; ModuleID = '../../third_party/skia/src/sksl/SkSLConstantFolder.cpp'
source_filename = "../../third_party/skia/src/sksl/SkSLConstantFolder.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.SkSL::Expression" = type { %"class.SkSL::IRNode", %"class.SkSL::Type"* }
%"class.SkSL::IRNode" = type { i32 (...)**, i32, i32 }
%"class.SkSL::Type" = type { %"class.SkSL::Symbol", i8*, %"class.SkSL::String", i32, i32, i32, %"class.SkSL::Type"*, %"class.std::__1::vector", i32, i32, %"class.std::__1::vector.6", i32, i8, i8, i8, i8, i8, %"class.SkSL::Type"*, %"class.SkSL::Type"* }
%"class.SkSL::Symbol" = type { %"class.SkSL::IRNode", %"struct.SkSL::StringFragment", %"class.SkSL::Type"* }
%"struct.SkSL::StringFragment" = type { i8*, i64 }
%"class.SkSL::String" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.SkSL::Type"**, %"class.SkSL::Type"**, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.SkSL::Type"** }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"struct.SkSL::Type::Field"*, %"struct.SkSL::Type::Field"*, %"class.std::__1::__compressed_pair.8" }
%"struct.SkSL::Type::Field" = type { %"struct.SkSL::Modifiers", %"struct.SkSL::StringFragment", %"class.SkSL::Type"* }
%"struct.SkSL::Modifiers" = type { %"struct.SkSL::Layout", i32, [4 x i8] }
%"struct.SkSL::Layout" = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], %"struct.SkSL::StringFragment", i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.SkSL::Type::Field"* }
%"class.SkSL::Variable" = type <{ %"class.SkSL::Symbol", %"class.SkSL::VarDeclaration"*, %"struct.SkSL::Modifiers"*, i8, i8, [6 x i8] }>
%"class.SkSL::VarDeclaration" = type { %"class.SkSL::Statement", %"class.SkSL::Variable"*, %"class.SkSL::Type"*, i32, %"class.std::__1::unique_ptr.38" }
%"class.SkSL::Statement" = type { %"class.SkSL::IRNode" }
%"class.std::__1::unique_ptr.38" = type { %"class.std::__1::__compressed_pair.39" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { %"class.SkSL::Expression"* }
%"class.SkSL::Context" = type { %"class.SkSL::BuiltinTypes", %"class.SkSL::ErrorReporter"*, %class.GrShaderCaps*, %"class.SkSL::ModifiersPool"*, %"struct.SkSL::ProgramConfig"* }
%"class.SkSL::BuiltinTypes" = type { %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"class.SkSL::Type"* }
%"class.SkSL::ErrorReporter" = type { i32 (...)** }
%class.GrShaderCaps = type <{ %class.SkRefCnt.base, i32, i56, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, [4 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.17" }
%"struct.std::__1::__atomic_base.17" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.SkSL::ModifiersPool" = type { %"class.std::__1::unordered_set" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.18", %"class.std::__1::__compressed_pair.27", %"class.std::__1::__compressed_pair.32", %"class.std::__1::__compressed_pair.34", [4 x i8] }>
%"class.std::__1::unique_ptr.18" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20", %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { i64 }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { float }
%"struct.SkSL::ProgramConfig" = type { i8, %"struct.SkSL::ProgramSettings" }
%"struct.SkSL::ProgramSettings" = type { i8, i8, i8, i8, i8, i32, i32, i32, i32, i32, i8, i8, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, %"class.std::__1::vector.37"* }
%"class.std::__1::vector.37" = type opaque
%"class.SkSL::AnyConstructor" = type { %"class.SkSL::Expression", %"class.std::__1::unique_ptr.38" }
%"class.std::__1::__basic_string_common" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.SkSL::ConstructorSplat" = type { %"class.SkSL::SingleArgumentConstructor" }
%"class.SkSL::SingleArgumentConstructor" = type { %"class.SkSL::AnyConstructor", %"class.std::__1::unique_ptr.38" }
%class.SkSTArray = type { %class.SkAlignedSTStorage, %class.SkTArray }
%class.SkAlignedSTStorage = type { [16 x i8] }
%class.SkTArray = type { %"class.std::__1::unique_ptr.38"*, i64 }
%"class.SkSL::Literal.44" = type <{ %"class.SkSL::Expression", i8, [7 x i8] }>
%"class.SkSL::Literal" = type { %"class.SkSL::Expression", i64 }
%"class.SkSL::Literal.13" = type <{ %"class.SkSL::Expression", float, [4 x i8] }>

$_ZN4SkSL13ErrorReporter5errorEiPKc = comdat any

$_ZN4SkSL6IRNodeD2Ev = comdat any

$_ZN4SkSL7LiteralIbED0Ev = comdat any

$_ZNK4SkSL7LiteralIbE11descriptionEv = comdat any

$_ZNK4SkSL10Expression4typeEv = comdat any

$_ZNK4SkSL7LiteralIbE21isCompileTimeConstantEv = comdat any

$_ZNK4SkSL7LiteralIbE15compareConstantERKNS_10ExpressionE = comdat any

$_ZNK4SkSL10Expression19isConstantOrUniformEv = comdat any

$_ZNK4SkSL7LiteralIbE11hasPropertyENS_10Expression8PropertyE = comdat any

$_ZNK4SkSL10Expression12coercionCostERKNS_4TypeE = comdat any

$_ZNK4SkSL7LiteralIbE24getConstantSubexpressionEi = comdat any

$_ZNK4SkSL7LiteralIbE5cloneEv = comdat any

$_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL10ExpressionENS0_14default_deleteIS3_EEEELb0EE12checkReallocEiNS7_11ReallocTypeE = comdat any

$_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL10ExpressionENS0_14default_deleteIS3_EEEELb0EEaSEOS7_ = comdat any

$_ZN4SkSL7LiteralIlED0Ev = comdat any

$_ZNK4SkSL7LiteralIlE11descriptionEv = comdat any

$_ZNK4SkSL7LiteralIlE21isCompileTimeConstantEv = comdat any

$_ZNK4SkSL7LiteralIlE15compareConstantERKNS_10ExpressionE = comdat any

$_ZNK4SkSL7LiteralIlE11hasPropertyENS_10Expression8PropertyE = comdat any

$_ZNK4SkSL7LiteralIlE12coercionCostERKNS_4TypeE = comdat any

$_ZNK4SkSL7LiteralIlE24getConstantSubexpressionEi = comdat any

$_ZNK4SkSL7LiteralIlE5cloneEv = comdat any

$_ZN4SkSL16ConstructorSplatD0Ev = comdat any

$_ZNK4SkSL14AnyConstructor11descriptionEv = comdat any

$_ZNK4SkSL14AnyConstructor21isCompileTimeConstantEv = comdat any

$_ZNK4SkSL14AnyConstructor19isConstantOrUniformEv = comdat any

$_ZNK4SkSL14AnyConstructor11hasPropertyENS_10Expression8PropertyE = comdat any

$_ZNK4SkSL16ConstructorSplat24getConstantSubexpressionEi = comdat any

$_ZNK4SkSL16ConstructorSplat5cloneEv = comdat any

$_ZN4SkSL25SingleArgumentConstructor12argumentSpanEv = comdat any

$_ZNK4SkSL25SingleArgumentConstructor12argumentSpanEv = comdat any

$_ZN4SkSL25SingleArgumentConstructorD2Ev = comdat any

$_ZN4SkSL25SingleArgumentConstructorD0Ev = comdat any

$_ZN4SkSL7LiteralIfED0Ev = comdat any

$_ZNK4SkSL7LiteralIfE11descriptionEv = comdat any

$_ZNK4SkSL7LiteralIfE21isCompileTimeConstantEv = comdat any

$_ZNK4SkSL7LiteralIfE15compareConstantERKNS_10ExpressionE = comdat any

$_ZNK4SkSL7LiteralIfE11hasPropertyENS_10Expression8PropertyE = comdat any

$_ZNK4SkSL7LiteralIfE12coercionCostERKNS_4TypeE = comdat any

$_ZNK4SkSL7LiteralIfE24getConstantSubexpressionEi = comdat any

$_ZNK4SkSL7LiteralIfE5cloneEv = comdat any

$_ZTVN4SkSL7LiteralIbEE = comdat any

$_ZTVN4SkSL7LiteralIlEE = comdat any

$_ZTVN4SkSL16ConstructorSplatE = comdat any

$_ZTVN4SkSL25SingleArgumentConstructorE = comdat any

$_ZTVN4SkSL7LiteralIfEE = comdat any

@.str = private unnamed_addr constant [17 x i8] c"division by zero\00", align 1
@.str.1 = private unnamed_addr constant [20 x i8] c"arithmetic overflow\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"shift value out of range\00", align 1
@_ZTVN4SkSL7LiteralIbEE = linkonce_odr hidden unnamed_addr constant { [13 x i8*] } { [13 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.SkSL::IRNode"*)* @_ZN4SkSL6IRNodeD2Ev to i8*), i8* bitcast (void (%"class.SkSL::Literal.44"*)* @_ZN4SkSL7LiteralIbED0Ev to i8*), i8* bitcast (void (%"class.SkSL::String"*, %"class.SkSL::Literal.44"*)* @_ZNK4SkSL7LiteralIbE11descriptionEv to i8*), i8* bitcast (%"class.SkSL::Type"* (%"class.SkSL::Expression"*)* @_ZNK4SkSL10Expression4typeEv to i8*), i8* bitcast (i1 (%"class.SkSL::Literal.44"*)* @_ZNK4SkSL7LiteralIbE21isCompileTimeConstantEv to i8*), i8* bitcast (i32 (%"class.SkSL::Literal.44"*, %"class.SkSL::Expression"*)* @_ZNK4SkSL7LiteralIbE15compareConstantERKNS_10ExpressionE to i8*), i8* bitcast (i1 (%"class.SkSL::Expression"*)* @_ZNK4SkSL10Expression19isConstantOrUniformEv to i8*), i8* bitcast (i1 (%"class.SkSL::Literal.44"*, i32)* @_ZNK4SkSL7LiteralIbE11hasPropertyENS_10Expression8PropertyE to i8*), i8* bitcast ({ i64, i8 } (%"class.SkSL::Expression"*, %"class.SkSL::Type"*)* @_ZNK4SkSL10Expression12coercionCostERKNS_4TypeE to i8*), i8* bitcast (%"class.SkSL::Expression"* (%"class.SkSL::Literal.44"*, i32)* @_ZNK4SkSL7LiteralIbE24getConstantSubexpressionEi to i8*), i8* bitcast (%"class.SkSL::Expression"* (%"class.SkSL::Literal.44"*)* @_ZNK4SkSL7LiteralIbE5cloneEv to i8*)] }, comdat, align 8
@.str.4 = private unnamed_addr constant [5 x i8] c"true\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"false\00", align 1
@_ZTVN4SkSL7LiteralIlEE = linkonce_odr hidden unnamed_addr constant { [13 x i8*] } { [13 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.SkSL::IRNode"*)* @_ZN4SkSL6IRNodeD2Ev to i8*), i8* bitcast (void (%"class.SkSL::Literal"*)* @_ZN4SkSL7LiteralIlED0Ev to i8*), i8* bitcast (void (%"class.SkSL::String"*, %"class.SkSL::Literal"*)* @_ZNK4SkSL7LiteralIlE11descriptionEv to i8*), i8* bitcast (%"class.SkSL::Type"* (%"class.SkSL::Expression"*)* @_ZNK4SkSL10Expression4typeEv to i8*), i8* bitcast (i1 (%"class.SkSL::Literal"*)* @_ZNK4SkSL7LiteralIlE21isCompileTimeConstantEv to i8*), i8* bitcast (i32 (%"class.SkSL::Literal"*, %"class.SkSL::Expression"*)* @_ZNK4SkSL7LiteralIlE15compareConstantERKNS_10ExpressionE to i8*), i8* bitcast (i1 (%"class.SkSL::Expression"*)* @_ZNK4SkSL10Expression19isConstantOrUniformEv to i8*), i8* bitcast (i1 (%"class.SkSL::Literal"*, i32)* @_ZNK4SkSL7LiteralIlE11hasPropertyENS_10Expression8PropertyE to i8*), i8* bitcast ({ i64, i8 } (%"class.SkSL::Literal"*, %"class.SkSL::Type"*)* @_ZNK4SkSL7LiteralIlE12coercionCostERKNS_4TypeE to i8*), i8* bitcast (%"class.SkSL::Expression"* (%"class.SkSL::Literal"*, i32)* @_ZNK4SkSL7LiteralIlE24getConstantSubexpressionEi to i8*), i8* bitcast (%"class.SkSL::Expression"* (%"class.SkSL::Literal"*)* @_ZNK4SkSL7LiteralIlE5cloneEv to i8*)] }, comdat, align 8
@_ZTVN4SkSL16ConstructorSplatE = linkonce_odr hidden unnamed_addr constant { [15 x i8*] } { [15 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.SkSL::SingleArgumentConstructor"*)* @_ZN4SkSL25SingleArgumentConstructorD2Ev to i8*), i8* bitcast (void (%"class.SkSL::ConstructorSplat"*)* @_ZN4SkSL16ConstructorSplatD0Ev to i8*), i8* bitcast (void (%"class.SkSL::String"*, %"class.SkSL::AnyConstructor"*)* @_ZNK4SkSL14AnyConstructor11descriptionEv to i8*), i8* bitcast (%"class.SkSL::Type"* (%"class.SkSL::Expression"*)* @_ZNK4SkSL10Expression4typeEv to i8*), i8* bitcast (i1 (%"class.SkSL::AnyConstructor"*)* @_ZNK4SkSL14AnyConstructor21isCompileTimeConstantEv to i8*), i8* bitcast (i32 (%"class.SkSL::AnyConstructor"*, %"class.SkSL::Expression"*)* @_ZNK4SkSL14AnyConstructor15compareConstantERKNS_10ExpressionE to i8*), i8* bitcast (i1 (%"class.SkSL::AnyConstructor"*)* @_ZNK4SkSL14AnyConstructor19isConstantOrUniformEv to i8*), i8* bitcast (i1 (%"class.SkSL::AnyConstructor"*, i32)* @_ZNK4SkSL14AnyConstructor11hasPropertyENS_10Expression8PropertyE to i8*), i8* bitcast ({ i64, i8 } (%"class.SkSL::Expression"*, %"class.SkSL::Type"*)* @_ZNK4SkSL10Expression12coercionCostERKNS_4TypeE to i8*), i8* bitcast (%"class.SkSL::Expression"* (%"class.SkSL::ConstructorSplat"*, i32)* @_ZNK4SkSL16ConstructorSplat24getConstantSubexpressionEi to i8*), i8* bitcast (%"class.SkSL::Expression"* (%"class.SkSL::ConstructorSplat"*)* @_ZNK4SkSL16ConstructorSplat5cloneEv to i8*), i8* bitcast ({ %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::SingleArgumentConstructor"*)* @_ZN4SkSL25SingleArgumentConstructor12argumentSpanEv to i8*), i8* bitcast ({ %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::SingleArgumentConstructor"*)* @_ZNK4SkSL25SingleArgumentConstructor12argumentSpanEv to i8*)] }, comdat, align 8
@_ZTVN4SkSL25SingleArgumentConstructorE = linkonce_odr hidden unnamed_addr constant { [15 x i8*] } { [15 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.SkSL::SingleArgumentConstructor"*)* @_ZN4SkSL25SingleArgumentConstructorD2Ev to i8*), i8* bitcast (void (%"class.SkSL::SingleArgumentConstructor"*)* @_ZN4SkSL25SingleArgumentConstructorD0Ev to i8*), i8* bitcast (void (%"class.SkSL::String"*, %"class.SkSL::AnyConstructor"*)* @_ZNK4SkSL14AnyConstructor11descriptionEv to i8*), i8* bitcast (%"class.SkSL::Type"* (%"class.SkSL::Expression"*)* @_ZNK4SkSL10Expression4typeEv to i8*), i8* bitcast (i1 (%"class.SkSL::AnyConstructor"*)* @_ZNK4SkSL14AnyConstructor21isCompileTimeConstantEv to i8*), i8* bitcast (i32 (%"class.SkSL::AnyConstructor"*, %"class.SkSL::Expression"*)* @_ZNK4SkSL14AnyConstructor15compareConstantERKNS_10ExpressionE to i8*), i8* bitcast (i1 (%"class.SkSL::AnyConstructor"*)* @_ZNK4SkSL14AnyConstructor19isConstantOrUniformEv to i8*), i8* bitcast (i1 (%"class.SkSL::AnyConstructor"*, i32)* @_ZNK4SkSL14AnyConstructor11hasPropertyENS_10Expression8PropertyE to i8*), i8* bitcast ({ i64, i8 } (%"class.SkSL::Expression"*, %"class.SkSL::Type"*)* @_ZNK4SkSL10Expression12coercionCostERKNS_4TypeE to i8*), i8* bitcast (%"class.SkSL::Expression"* (%"class.SkSL::AnyConstructor"*, i32)* @_ZNK4SkSL14AnyConstructor24getConstantSubexpressionEi to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast ({ %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::SingleArgumentConstructor"*)* @_ZN4SkSL25SingleArgumentConstructor12argumentSpanEv to i8*), i8* bitcast ({ %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::SingleArgumentConstructor"*)* @_ZNK4SkSL25SingleArgumentConstructor12argumentSpanEv to i8*)] }, comdat, align 8
@_ZTVN4SkSL14AnyConstructorE = external unnamed_addr constant { [15 x i8*] }, align 8
@.str.6 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.7 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.8 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c")\00", align 1
@_ZTVN4SkSL7LiteralIfEE = linkonce_odr hidden unnamed_addr constant { [13 x i8*] } { [13 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.SkSL::IRNode"*)* @_ZN4SkSL6IRNodeD2Ev to i8*), i8* bitcast (void (%"class.SkSL::Literal.13"*)* @_ZN4SkSL7LiteralIfED0Ev to i8*), i8* bitcast (void (%"class.SkSL::String"*, %"class.SkSL::Literal.13"*)* @_ZNK4SkSL7LiteralIfE11descriptionEv to i8*), i8* bitcast (%"class.SkSL::Type"* (%"class.SkSL::Expression"*)* @_ZNK4SkSL10Expression4typeEv to i8*), i8* bitcast (i1 (%"class.SkSL::Literal.13"*)* @_ZNK4SkSL7LiteralIfE21isCompileTimeConstantEv to i8*), i8* bitcast (i32 (%"class.SkSL::Literal.13"*, %"class.SkSL::Expression"*)* @_ZNK4SkSL7LiteralIfE15compareConstantERKNS_10ExpressionE to i8*), i8* bitcast (i1 (%"class.SkSL::Expression"*)* @_ZNK4SkSL10Expression19isConstantOrUniformEv to i8*), i8* bitcast (i1 (%"class.SkSL::Literal.13"*, i32)* @_ZNK4SkSL7LiteralIfE11hasPropertyENS_10Expression8PropertyE to i8*), i8* bitcast ({ i64, i8 } (%"class.SkSL::Literal.13"*, %"class.SkSL::Type"*)* @_ZNK4SkSL7LiteralIfE12coercionCostERKNS_4TypeE to i8*), i8* bitcast (%"class.SkSL::Expression"* (%"class.SkSL::Literal.13"*, i32)* @_ZNK4SkSL7LiteralIfE24getConstantSubexpressionEi to i8*), i8* bitcast (%"class.SkSL::Expression"* (%"class.SkSL::Literal.13"*)* @_ZNK4SkSL7LiteralIfE5cloneEv to i8*)] }, comdat, align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4SkSL14ConstantFolder14GetConstantIntERKNS_10ExpressionEPl(%"class.SkSL::Expression"* nocapture readonly dereferenceable(24), i64* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %0, i64 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 55
  br label %6

6:                                                ; preds = %33, %2
  %7 = phi i1 [ %5, %2 ], [ true, %33 ]
  %8 = phi %"class.SkSL::Expression"* [ %0, %2 ], [ %25, %33 ]
  br i1 %7, label %9, label %37

9:                                                ; preds = %6
  %10 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %8, i64 1, i32 0, i32 1
  %11 = bitcast i32* %10 to i8*
  %12 = load i8, i8* %11, align 8
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %37

14:                                               ; preds = %9
  %15 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %8, i64 1
  %16 = bitcast %"class.SkSL::Expression"* %15 to %"class.SkSL::Variable"**
  %17 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %16, align 8
  %18 = getelementptr inbounds %"class.SkSL::Variable", %"class.SkSL::Variable"* %17, i64 0, i32 2
  %19 = load %"struct.SkSL::Modifiers"*, %"struct.SkSL::Modifiers"** %18, align 8
  %20 = getelementptr inbounds %"struct.SkSL::Modifiers", %"struct.SkSL::Modifiers"* %19, i64 0, i32 1
  %21 = load i32, i32* %20, align 8
  %22 = and i32 %21, 1
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %37, label %24

24:                                               ; preds = %14
  %25 = tail call %"class.SkSL::Expression"* @_ZNK4SkSL8Variable12initialValueEv(%"class.SkSL::Variable"* %17) #10
  %26 = icmp eq %"class.SkSL::Expression"* %25, null
  br i1 %26, label %37, label %27

27:                                               ; preds = %24
  %28 = bitcast %"class.SkSL::Expression"* %25 to i1 (%"class.SkSL::Expression"*)***
  %29 = load i1 (%"class.SkSL::Expression"*)**, i1 (%"class.SkSL::Expression"*)*** %28, align 8
  %30 = getelementptr inbounds i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %29, i64 4
  %31 = load i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %30, align 8
  %32 = tail call zeroext i1 %31(%"class.SkSL::Expression"* nonnull %25) #10
  br i1 %32, label %37, label %33

33:                                               ; preds = %27
  %34 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %25, i64 0, i32 0, i32 2
  %35 = load i32, i32* %34, align 4
  %36 = icmp eq i32 %35, 55
  br i1 %36, label %6, label %37

37:                                               ; preds = %6, %9, %14, %24, %27, %33
  %38 = phi %"class.SkSL::Expression"* [ %25, %27 ], [ %0, %6 ], [ %0, %33 ], [ %0, %24 ], [ %0, %14 ], [ %0, %9 ]
  %39 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %38, i64 0, i32 0, i32 2
  %40 = load i32, i32* %39, align 4
  %41 = icmp eq i32 %40, 43
  br i1 %41, label %42, label %46

42:                                               ; preds = %37
  %43 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %38, i64 1
  %44 = bitcast %"class.SkSL::Expression"* %43 to i64*
  %45 = load i64, i64* %44, align 8
  store i64 %45, i64* %1, align 8
  br label %46

46:                                               ; preds = %37, %42
  %47 = phi i1 [ true, %42 ], [ false, %37 ]
  ret i1 %47
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.SkSL::Expression"* @_ZN4SkSL14ConstantFolder27GetConstantValueForVariableERKNS_10ExpressionE(%"class.SkSL::Expression"* readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %0, i64 0, i32 0, i32 2
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 55
  br label %5

5:                                                ; preds = %32, %1
  %6 = phi i1 [ %4, %1 ], [ true, %32 ]
  %7 = phi %"class.SkSL::Expression"* [ %0, %1 ], [ %24, %32 ]
  br i1 %6, label %8, label %36

8:                                                ; preds = %5
  %9 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %7, i64 1, i32 0, i32 1
  %10 = bitcast i32* %9 to i8*
  %11 = load i8, i8* %10, align 8
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %13, label %36

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %7, i64 1
  %15 = bitcast %"class.SkSL::Expression"* %14 to %"class.SkSL::Variable"**
  %16 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %15, align 8
  %17 = getelementptr inbounds %"class.SkSL::Variable", %"class.SkSL::Variable"* %16, i64 0, i32 2
  %18 = load %"struct.SkSL::Modifiers"*, %"struct.SkSL::Modifiers"** %17, align 8
  %19 = getelementptr inbounds %"struct.SkSL::Modifiers", %"struct.SkSL::Modifiers"* %18, i64 0, i32 1
  %20 = load i32, i32* %19, align 8
  %21 = and i32 %20, 1
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %36, label %23

23:                                               ; preds = %13
  %24 = tail call %"class.SkSL::Expression"* @_ZNK4SkSL8Variable12initialValueEv(%"class.SkSL::Variable"* %16) #10
  %25 = icmp eq %"class.SkSL::Expression"* %24, null
  br i1 %25, label %36, label %26

26:                                               ; preds = %23
  %27 = bitcast %"class.SkSL::Expression"* %24 to i1 (%"class.SkSL::Expression"*)***
  %28 = load i1 (%"class.SkSL::Expression"*)**, i1 (%"class.SkSL::Expression"*)*** %27, align 8
  %29 = getelementptr inbounds i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %28, i64 4
  %30 = load i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %29, align 8
  %31 = tail call zeroext i1 %30(%"class.SkSL::Expression"* nonnull %24) #10
  br i1 %31, label %36, label %32

32:                                               ; preds = %26
  %33 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %24, i64 0, i32 0, i32 2
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 55
  br i1 %35, label %5, label %36

36:                                               ; preds = %8, %13, %23, %32, %5, %26
  %37 = phi %"class.SkSL::Expression"* [ %24, %26 ], [ %0, %5 ], [ %0, %32 ], [ %0, %23 ], [ %0, %13 ], [ %0, %8 ]
  ret %"class.SkSL::Expression"* %37
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4SkSL14ConstantFolder16GetConstantFloatERKNS_10ExpressionEPf(%"class.SkSL::Expression"* nocapture readonly dereferenceable(24), float* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %0, i64 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 55
  br label %6

6:                                                ; preds = %33, %2
  %7 = phi i1 [ %5, %2 ], [ true, %33 ]
  %8 = phi %"class.SkSL::Expression"* [ %0, %2 ], [ %25, %33 ]
  br i1 %7, label %9, label %37

9:                                                ; preds = %6
  %10 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %8, i64 1, i32 0, i32 1
  %11 = bitcast i32* %10 to i8*
  %12 = load i8, i8* %11, align 8
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %37

14:                                               ; preds = %9
  %15 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %8, i64 1
  %16 = bitcast %"class.SkSL::Expression"* %15 to %"class.SkSL::Variable"**
  %17 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %16, align 8
  %18 = getelementptr inbounds %"class.SkSL::Variable", %"class.SkSL::Variable"* %17, i64 0, i32 2
  %19 = load %"struct.SkSL::Modifiers"*, %"struct.SkSL::Modifiers"** %18, align 8
  %20 = getelementptr inbounds %"struct.SkSL::Modifiers", %"struct.SkSL::Modifiers"* %19, i64 0, i32 1
  %21 = load i32, i32* %20, align 8
  %22 = and i32 %21, 1
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %37, label %24

24:                                               ; preds = %14
  %25 = tail call %"class.SkSL::Expression"* @_ZNK4SkSL8Variable12initialValueEv(%"class.SkSL::Variable"* %17) #10
  %26 = icmp eq %"class.SkSL::Expression"* %25, null
  br i1 %26, label %37, label %27

27:                                               ; preds = %24
  %28 = bitcast %"class.SkSL::Expression"* %25 to i1 (%"class.SkSL::Expression"*)***
  %29 = load i1 (%"class.SkSL::Expression"*)**, i1 (%"class.SkSL::Expression"*)*** %28, align 8
  %30 = getelementptr inbounds i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %29, i64 4
  %31 = load i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %30, align 8
  %32 = tail call zeroext i1 %31(%"class.SkSL::Expression"* nonnull %25) #10
  br i1 %32, label %37, label %33

33:                                               ; preds = %27
  %34 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %25, i64 0, i32 0, i32 2
  %35 = load i32, i32* %34, align 4
  %36 = icmp eq i32 %35, 55
  br i1 %36, label %6, label %37

37:                                               ; preds = %6, %9, %14, %24, %27, %33
  %38 = phi %"class.SkSL::Expression"* [ %25, %27 ], [ %0, %6 ], [ %0, %33 ], [ %0, %24 ], [ %0, %14 ], [ %0, %9 ]
  %39 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %38, i64 0, i32 0, i32 2
  %40 = load i32, i32* %39, align 4
  %41 = icmp eq i32 %40, 45
  br i1 %41, label %42, label %47

42:                                               ; preds = %37
  %43 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %38, i64 1
  %44 = bitcast %"class.SkSL::Expression"* %43 to i32*
  %45 = load i32, i32* %44, align 8
  %46 = bitcast float* %1 to i32*
  store i32 %45, i32* %46, align 4
  br label %47

47:                                               ; preds = %37, %42
  %48 = phi i1 [ true, %42 ], [ false, %37 ]
  ret i1 %48
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4SkSL14ConstantFolder19ErrorOnDivideByZeroERKNS_7ContextEiNS_8OperatorERKNS_10ExpressionE(%"class.SkSL::Context"* nocapture readonly dereferenceable(744), i32, i32, %"class.SkSL::Expression"* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  switch i32 %2, label %10 [
    i32 49, label %5
    i32 74, label %5
    i32 50, label %5
    i32 75, label %5
  ]

5:                                                ; preds = %4, %4, %4, %4
  %6 = tail call fastcc zeroext i1 @_ZN4SkSLL22contains_constant_zeroERKNS_10ExpressionE(%"class.SkSL::Expression"* dereferenceable(24) %3)
  br i1 %6, label %7, label %10

7:                                                ; preds = %5
  %8 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 1
  %9 = load %"class.SkSL::ErrorReporter"*, %"class.SkSL::ErrorReporter"** %8, align 8
  tail call void @_ZN4SkSL13ErrorReporter5errorEiPKc(%"class.SkSL::ErrorReporter"* %9, i32 %1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0))
  br label %10

10:                                               ; preds = %4, %5, %7
  %11 = phi i1 [ true, %7 ], [ false, %5 ], [ false, %4 ]
  ret i1 %11
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN4SkSLL22contains_constant_zeroERKNS_10ExpressionE(%"class.SkSL::Expression"* dereferenceable(24)) unnamed_addr #0 {
  %2 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %0, i64 0, i32 0, i32 2
  %3 = load i32, i32* %2, align 4
  %4 = add i32 %3, -33
  %5 = icmp ult i32 %4, 8
  br i1 %5, label %6, label %27

6:                                                ; preds = %1
  %7 = tail call dereferenceable(32) %"class.SkSL::AnyConstructor"* @_ZNK4SkSL10Expression16asAnyConstructorEv(%"class.SkSL::Expression"* %0) #10
  %8 = bitcast %"class.SkSL::AnyConstructor"* %7 to { %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::AnyConstructor"*)***
  %9 = load { %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::AnyConstructor"*)**, { %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::AnyConstructor"*)*** %8, align 8
  %10 = getelementptr inbounds { %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::AnyConstructor"*)** %9, i64 12
  %11 = load { %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::AnyConstructor"*)** %10, align 8
  %12 = tail call { %"class.std::__1::unique_ptr.38"*, i64 } %11(%"class.SkSL::AnyConstructor"* %7) #10
  %13 = extractvalue { %"class.std::__1::unique_ptr.38"*, i64 } %12, 0
  %14 = extractvalue { %"class.std::__1::unique_ptr.38"*, i64 } %12, 1
  %15 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %13, i64 %14
  %16 = icmp eq i64 %14, 0
  br i1 %16, label %25, label %19

17:                                               ; preds = %19
  %18 = icmp eq %"class.std::__1::unique_ptr.38"* %24, %15
  br i1 %18, label %25, label %19

19:                                               ; preds = %6, %17
  %20 = phi %"class.std::__1::unique_ptr.38"* [ %24, %17 ], [ %13, %6 ]
  %21 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %20, i64 0, i32 0, i32 0, i32 0
  %22 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %21, align 8
  %23 = tail call fastcc zeroext i1 @_ZN4SkSLL22contains_constant_zeroERKNS_10ExpressionE(%"class.SkSL::Expression"* dereferenceable(24) %22)
  %24 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %20, i64 1
  br i1 %23, label %25, label %17

25:                                               ; preds = %17, %19, %6, %69, %60
  %26 = phi i1 [ %73, %69 ], [ false, %60 ], [ false, %6 ], [ false, %17 ], [ true, %19 ]
  ret i1 %26

27:                                               ; preds = %1
  %28 = icmp eq i32 %3, 55
  br label %29

29:                                               ; preds = %56, %27
  %30 = phi i1 [ %28, %27 ], [ true, %56 ]
  %31 = phi %"class.SkSL::Expression"* [ %0, %27 ], [ %48, %56 ]
  br i1 %30, label %32, label %60

32:                                               ; preds = %29
  %33 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %31, i64 1, i32 0, i32 1
  %34 = bitcast i32* %33 to i8*
  %35 = load i8, i8* %34, align 8
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %37, label %60

37:                                               ; preds = %32
  %38 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %31, i64 1
  %39 = bitcast %"class.SkSL::Expression"* %38 to %"class.SkSL::Variable"**
  %40 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %39, align 8
  %41 = getelementptr inbounds %"class.SkSL::Variable", %"class.SkSL::Variable"* %40, i64 0, i32 2
  %42 = load %"struct.SkSL::Modifiers"*, %"struct.SkSL::Modifiers"** %41, align 8
  %43 = getelementptr inbounds %"struct.SkSL::Modifiers", %"struct.SkSL::Modifiers"* %42, i64 0, i32 1
  %44 = load i32, i32* %43, align 8
  %45 = and i32 %44, 1
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %60, label %47

47:                                               ; preds = %37
  %48 = tail call %"class.SkSL::Expression"* @_ZNK4SkSL8Variable12initialValueEv(%"class.SkSL::Variable"* %40) #10
  %49 = icmp eq %"class.SkSL::Expression"* %48, null
  br i1 %49, label %60, label %50

50:                                               ; preds = %47
  %51 = bitcast %"class.SkSL::Expression"* %48 to i1 (%"class.SkSL::Expression"*)***
  %52 = load i1 (%"class.SkSL::Expression"*)**, i1 (%"class.SkSL::Expression"*)*** %51, align 8
  %53 = getelementptr inbounds i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %52, i64 4
  %54 = load i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %53, align 8
  %55 = tail call zeroext i1 %54(%"class.SkSL::Expression"* nonnull %48) #10
  br i1 %55, label %60, label %56

56:                                               ; preds = %50
  %57 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %48, i64 0, i32 0, i32 2
  %58 = load i32, i32* %57, align 4
  %59 = icmp eq i32 %58, 55
  br i1 %59, label %29, label %60

60:                                               ; preds = %56, %50, %47, %37, %32, %29
  %61 = phi %"class.SkSL::Expression"* [ %48, %50 ], [ %0, %29 ], [ %0, %56 ], [ %0, %47 ], [ %0, %37 ], [ %0, %32 ]
  %62 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %61, i64 0, i32 0, i32 2
  %63 = load i32, i32* %62, align 4
  switch i32 %63, label %25 [
    i32 43, label %64
    i32 45, label %69
  ]

64:                                               ; preds = %60
  %65 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %61, i64 1
  %66 = bitcast %"class.SkSL::Expression"* %65 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = icmp eq i64 %67, 0
  ret i1 %68

69:                                               ; preds = %60
  %70 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %61, i64 1
  %71 = bitcast %"class.SkSL::Expression"* %70 to float*
  %72 = load float, float* %71, align 8
  %73 = fcmp oeq float %72, 0.000000e+00
  br label %25
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL13ErrorReporter5errorEiPKc(%"class.SkSL::ErrorReporter"*, i32, i8*) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.SkSL::String", align 8
  %5 = tail call i64 @strlen(i8* %2) #10
  %6 = icmp ugt i64 %5, -17
  br i1 %6, label %7, label %9

7:                                                ; preds = %3
  %8 = bitcast %"class.SkSL::String"* %4 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %8) #11
  unreachable

9:                                                ; preds = %3
  %10 = icmp ult i64 %5, 23
  br i1 %10, label %20, label %11

11:                                               ; preds = %9
  %12 = add nuw i64 %5, 16
  %13 = and i64 %12, -16
  %14 = tail call i8* @_Znwm(i64 %13) #12
  %15 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %14, i8** %15, align 8
  %16 = or i64 %13, -9223372036854775808
  %17 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %16, i64* %17, align 8
  %18 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %5, i64* %18, align 8
  %19 = bitcast %"class.SkSL::String"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %26

20:                                               ; preds = %9
  %21 = trunc i64 %5 to i8
  %22 = bitcast %"class.SkSL::String"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %23 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %22, i64 0, i32 1, i32 0
  store i8 %21, i8* %23, align 1
  %24 = bitcast %"class.SkSL::String"* %4 to i8*
  %25 = icmp eq i64 %5, 0
  br i1 %25, label %29, label %26

26:                                               ; preds = %20, %11
  %27 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %22, %20 ], [ %19, %11 ]
  %28 = phi i8* [ %24, %20 ], [ %14, %11 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %28, i8* align 1 %2, i64 %5, i1 false) #10
  br label %29

29:                                               ; preds = %20, %26
  %30 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %22, %20 ], [ %27, %26 ]
  %31 = phi i8* [ %24, %20 ], [ %28, %26 ]
  %32 = getelementptr inbounds i8, i8* %31, i64 %5
  store i8 0, i8* %32, align 1
  %33 = bitcast %"class.SkSL::ErrorReporter"* %0 to void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)***
  %34 = load void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)**, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*** %33, align 8
  %35 = getelementptr inbounds void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)** %34, i64 2
  %36 = load void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)** %35, align 8
  call void %36(%"class.SkSL::ErrorReporter"* %0, i32 %1, %"class.SkSL::String"* nonnull %4) #10
  %37 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %30, i64 0, i32 1, i32 0
  %38 = load i8, i8* %37, align 1
  %39 = icmp slt i8 %38, 0
  br i1 %39, label %40, label %43

40:                                               ; preds = %29
  %41 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = load i8*, i8** %41, align 8
  call void @_ZdlPv(i8* %42) #12
  br label %43

43:                                               ; preds = %29, %40
  ret void
}

declare %"class.SkSL::Expression"* @_ZNK4SkSL8Variable12initialValueEv(%"class.SkSL::Variable"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.SkSL::Expression"* @_ZN4SkSL14ConstantFolder28MakeConstantValueForVariableENSt3__110unique_ptrINS_10ExpressionENS1_14default_deleteIS3_EEEE(%"class.SkSL::Expression"*) local_unnamed_addr #0 align 2 {
  %2 = ptrtoint %"class.SkSL::Expression"* %0 to i64
  %3 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %0, i64 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 55
  br label %6

6:                                                ; preds = %33, %1
  %7 = phi i1 [ %5, %1 ], [ true, %33 ]
  %8 = phi %"class.SkSL::Expression"* [ %0, %1 ], [ %25, %33 ]
  br i1 %7, label %9, label %52

9:                                                ; preds = %6
  %10 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %8, i64 1, i32 0, i32 1
  %11 = bitcast i32* %10 to i8*
  %12 = load i8, i8* %11, align 8
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %52

14:                                               ; preds = %9
  %15 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %8, i64 1
  %16 = bitcast %"class.SkSL::Expression"* %15 to %"class.SkSL::Variable"**
  %17 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %16, align 8
  %18 = getelementptr inbounds %"class.SkSL::Variable", %"class.SkSL::Variable"* %17, i64 0, i32 2
  %19 = load %"struct.SkSL::Modifiers"*, %"struct.SkSL::Modifiers"** %18, align 8
  %20 = getelementptr inbounds %"struct.SkSL::Modifiers", %"struct.SkSL::Modifiers"* %19, i64 0, i32 1
  %21 = load i32, i32* %20, align 8
  %22 = and i32 %21, 1
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %52, label %24

24:                                               ; preds = %14
  %25 = tail call %"class.SkSL::Expression"* @_ZNK4SkSL8Variable12initialValueEv(%"class.SkSL::Variable"* %17) #10
  %26 = icmp eq %"class.SkSL::Expression"* %25, null
  br i1 %26, label %52, label %27

27:                                               ; preds = %24
  %28 = bitcast %"class.SkSL::Expression"* %25 to i1 (%"class.SkSL::Expression"*)***
  %29 = load i1 (%"class.SkSL::Expression"*)**, i1 (%"class.SkSL::Expression"*)*** %28, align 8
  %30 = getelementptr inbounds i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %29, i64 4
  %31 = load i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %30, align 8
  %32 = tail call zeroext i1 %31(%"class.SkSL::Expression"* nonnull %25) #10
  br i1 %32, label %37, label %33

33:                                               ; preds = %27
  %34 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %25, i64 0, i32 0, i32 2
  %35 = load i32, i32* %34, align 4
  %36 = icmp eq i32 %35, 55
  br i1 %36, label %6, label %52

37:                                               ; preds = %27
  %38 = icmp eq %"class.SkSL::Expression"* %25, %0
  br i1 %38, label %52, label %39

39:                                               ; preds = %37
  %40 = bitcast %"class.SkSL::Expression"* %25 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)***
  %41 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*** %40, align 8
  %42 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %41, i64 10
  %43 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %42, align 8
  %44 = tail call %"class.SkSL::Expression"* %43(%"class.SkSL::Expression"* nonnull %25) #10
  %45 = ptrtoint %"class.SkSL::Expression"* %44 to i64
  %46 = icmp eq %"class.SkSL::Expression"* %0, null
  br i1 %46, label %52, label %47

47:                                               ; preds = %39
  %48 = bitcast %"class.SkSL::Expression"* %0 to void (%"class.SkSL::Expression"*)***
  %49 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %48, align 8
  %50 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %49, i64 1
  %51 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %50, align 8
  tail call void %51(%"class.SkSL::Expression"* nonnull %0) #10
  br label %52

52:                                               ; preds = %9, %14, %24, %33, %6, %37, %47, %39
  %53 = phi i64 [ %2, %37 ], [ %45, %47 ], [ %45, %39 ], [ %2, %6 ], [ %2, %33 ], [ %2, %24 ], [ %2, %14 ], [ %2, %9 ]
  %54 = inttoptr i64 %53 to %"class.SkSL::Expression"*
  ret %"class.SkSL::Expression"* %54
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.SkSL::Expression"* @_ZN4SkSL14ConstantFolder8SimplifyERKNS_7ContextEiRKNS_10ExpressionENS_8OperatorES6_RKNS_4TypeE(%"class.SkSL::Context"* dereferenceable(744), i32, %"class.SkSL::Expression"* dereferenceable(24), i32, %"class.SkSL::Expression"* dereferenceable(24), %"class.SkSL::Type"* dereferenceable(184)) local_unnamed_addr #0 align 2 {
  %7 = alloca <2 x i64>, align 16
  %8 = bitcast <2 x i64>* %7 to %"struct.SkSL::StringFragment"*
  %9 = alloca <2 x i64>, align 16
  %10 = bitcast <2 x i64>* %9 to %"struct.SkSL::StringFragment"*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to %"struct.SkSL::StringFragment"*
  %13 = alloca %"class.SkSL::ConstructorSplat", align 8
  %14 = alloca %"class.SkSL::ConstructorSplat", align 8
  %15 = alloca %"class.SkSL::ConstructorSplat", align 8
  %16 = alloca %"class.SkSL::ConstructorSplat", align 8
  %17 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 4
  %18 = load %"struct.SkSL::ProgramConfig"*, %"struct.SkSL::ProgramConfig"** %17, align 8
  %19 = getelementptr inbounds %"struct.SkSL::ProgramConfig", %"struct.SkSL::ProgramConfig"* %18, i64 0, i32 1, i32 10
  %20 = load i8, i8* %19, align 4, !range !2
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %93, label %22

22:                                               ; preds = %6
  %23 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %2, i64 0, i32 0, i32 2
  %24 = load i32, i32* %23, align 4
  %25 = icmp eq i32 %24, 55
  br label %26

26:                                               ; preds = %53, %22
  %27 = phi i1 [ %25, %22 ], [ true, %53 ]
  %28 = phi %"class.SkSL::Expression"* [ %2, %22 ], [ %45, %53 ]
  br i1 %27, label %29, label %57

29:                                               ; preds = %26
  %30 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %28, i64 1, i32 0, i32 1
  %31 = bitcast i32* %30 to i8*
  %32 = load i8, i8* %31, align 8
  %33 = icmp eq i8 %32, 0
  br i1 %33, label %34, label %57

34:                                               ; preds = %29
  %35 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %28, i64 1
  %36 = bitcast %"class.SkSL::Expression"* %35 to %"class.SkSL::Variable"**
  %37 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %36, align 8
  %38 = getelementptr inbounds %"class.SkSL::Variable", %"class.SkSL::Variable"* %37, i64 0, i32 2
  %39 = load %"struct.SkSL::Modifiers"*, %"struct.SkSL::Modifiers"** %38, align 8
  %40 = getelementptr inbounds %"struct.SkSL::Modifiers", %"struct.SkSL::Modifiers"* %39, i64 0, i32 1
  %41 = load i32, i32* %40, align 8
  %42 = and i32 %41, 1
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %57, label %44

44:                                               ; preds = %34
  %45 = tail call %"class.SkSL::Expression"* @_ZNK4SkSL8Variable12initialValueEv(%"class.SkSL::Variable"* %37) #10
  %46 = icmp eq %"class.SkSL::Expression"* %45, null
  br i1 %46, label %57, label %47

47:                                               ; preds = %44
  %48 = bitcast %"class.SkSL::Expression"* %45 to i1 (%"class.SkSL::Expression"*)***
  %49 = load i1 (%"class.SkSL::Expression"*)**, i1 (%"class.SkSL::Expression"*)*** %48, align 8
  %50 = getelementptr inbounds i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %49, i64 4
  %51 = load i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %50, align 8
  %52 = tail call zeroext i1 %51(%"class.SkSL::Expression"* nonnull %45) #10
  br i1 %52, label %57, label %53

53:                                               ; preds = %47
  %54 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %45, i64 0, i32 0, i32 2
  %55 = load i32, i32* %54, align 4
  %56 = icmp eq i32 %55, 55
  br i1 %56, label %26, label %57

57:                                               ; preds = %26, %29, %34, %44, %47, %53
  %58 = phi %"class.SkSL::Expression"* [ %45, %47 ], [ %2, %26 ], [ %2, %53 ], [ %2, %44 ], [ %2, %34 ], [ %2, %29 ]
  %59 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %4, i64 0, i32 0, i32 2
  %60 = load i32, i32* %59, align 4
  %61 = icmp eq i32 %60, 55
  br label %62

62:                                               ; preds = %89, %57
  %63 = phi i1 [ %61, %57 ], [ true, %89 ]
  %64 = phi %"class.SkSL::Expression"* [ %4, %57 ], [ %81, %89 ]
  br i1 %63, label %65, label %93

65:                                               ; preds = %62
  %66 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %64, i64 1, i32 0, i32 1
  %67 = bitcast i32* %66 to i8*
  %68 = load i8, i8* %67, align 8
  %69 = icmp eq i8 %68, 0
  br i1 %69, label %70, label %93

70:                                               ; preds = %65
  %71 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %64, i64 1
  %72 = bitcast %"class.SkSL::Expression"* %71 to %"class.SkSL::Variable"**
  %73 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %72, align 8
  %74 = getelementptr inbounds %"class.SkSL::Variable", %"class.SkSL::Variable"* %73, i64 0, i32 2
  %75 = load %"struct.SkSL::Modifiers"*, %"struct.SkSL::Modifiers"** %74, align 8
  %76 = getelementptr inbounds %"struct.SkSL::Modifiers", %"struct.SkSL::Modifiers"* %75, i64 0, i32 1
  %77 = load i32, i32* %76, align 8
  %78 = and i32 %77, 1
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %93, label %80

80:                                               ; preds = %70
  %81 = tail call %"class.SkSL::Expression"* @_ZNK4SkSL8Variable12initialValueEv(%"class.SkSL::Variable"* %73) #10
  %82 = icmp eq %"class.SkSL::Expression"* %81, null
  br i1 %82, label %93, label %83

83:                                               ; preds = %80
  %84 = bitcast %"class.SkSL::Expression"* %81 to i1 (%"class.SkSL::Expression"*)***
  %85 = load i1 (%"class.SkSL::Expression"*)**, i1 (%"class.SkSL::Expression"*)*** %84, align 8
  %86 = getelementptr inbounds i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %85, i64 4
  %87 = load i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %86, align 8
  %88 = tail call zeroext i1 %87(%"class.SkSL::Expression"* nonnull %81) #10
  br i1 %88, label %93, label %89

89:                                               ; preds = %83
  %90 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %81, i64 0, i32 0, i32 2
  %91 = load i32, i32* %90, align 4
  %92 = icmp eq i32 %91, 55
  br i1 %92, label %62, label %93

93:                                               ; preds = %89, %83, %80, %70, %65, %62, %6
  %94 = phi %"class.SkSL::Expression"* [ %4, %6 ], [ %4, %65 ], [ %4, %70 ], [ %4, %80 ], [ %4, %89 ], [ %4, %62 ], [ %81, %83 ]
  %95 = phi %"class.SkSL::Expression"* [ %2, %6 ], [ %58, %62 ], [ %58, %65 ], [ %58, %70 ], [ %58, %80 ], [ %58, %83 ], [ %58, %89 ]
  switch i32 %3, label %118 [
    i32 43, label %96
    i32 64, label %109
  ]

96:                                               ; preds = %93
  %97 = bitcast %"class.SkSL::Expression"* %95 to i1 (%"class.SkSL::Expression"*, i32)***
  %98 = load i1 (%"class.SkSL::Expression"*, i32)**, i1 (%"class.SkSL::Expression"*, i32)*** %97, align 8
  %99 = getelementptr inbounds i1 (%"class.SkSL::Expression"*, i32)*, i1 (%"class.SkSL::Expression"*, i32)** %98, i64 7
  %100 = load i1 (%"class.SkSL::Expression"*, i32)*, i1 (%"class.SkSL::Expression"*, i32)** %99, align 8
  %101 = tail call zeroext i1 %100(%"class.SkSL::Expression"* %95, i32 0) #10
  br i1 %101, label %118, label %102

102:                                              ; preds = %96
  %103 = bitcast %"class.SkSL::Expression"* %94 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)***
  %104 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*** %103, align 8
  %105 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %104, i64 10
  %106 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %105, align 8
  %107 = tail call %"class.SkSL::Expression"* %106(%"class.SkSL::Expression"* %94) #10
  %108 = ptrtoint %"class.SkSL::Expression"* %107 to i64
  br label %1116

109:                                              ; preds = %93
  %110 = tail call zeroext i1 @_ZN4SkSL8Analysis20IsSameExpressionTreeERKNS_10ExpressionES3_(%"class.SkSL::Expression"* dereferenceable(24) %95, %"class.SkSL::Expression"* dereferenceable(24) %94) #10
  br i1 %110, label %111, label %118

111:                                              ; preds = %109
  %112 = bitcast %"class.SkSL::Expression"* %94 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)***
  %113 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*** %112, align 8
  %114 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %113, i64 10
  %115 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %114, align 8
  %116 = tail call %"class.SkSL::Expression"* %115(%"class.SkSL::Expression"* %94) #10
  %117 = ptrtoint %"class.SkSL::Expression"* %116 to i64
  br label %1116

118:                                              ; preds = %93, %96, %109
  %119 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %95, i64 0, i32 0, i32 2
  %120 = load i32, i32* %119, align 4
  %121 = icmp eq i32 %120, 31
  %122 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %94, i64 0, i32 0, i32 2
  %123 = load i32, i32* %122, align 4
  %124 = icmp eq i32 %123, 31
  br i1 %121, label %125, label %198

125:                                              ; preds = %118
  %126 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %95, i64 1
  %127 = bitcast %"class.SkSL::Expression"* %126 to i8*
  %128 = load i8, i8* %127, align 8, !range !2
  %129 = icmp ne i8 %128, 0
  br i1 %124, label %130, label %163

130:                                              ; preds = %125
  %131 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %94, i64 1
  %132 = bitcast %"class.SkSL::Expression"* %131 to i8*
  %133 = load i8, i8* %132, align 8, !range !2
  %134 = icmp ne i8 %133, 0
  switch i32 %3, label %1116 [
    i32 59, label %135
    i32 57, label %137
    i32 58, label %140
    i32 65, label %142
    i32 66, label %145
  ]

135:                                              ; preds = %130
  %136 = and i1 %129, %134
  br label %147

137:                                              ; preds = %130
  %138 = or i8 %133, %128
  %139 = icmp ne i8 %138, 0
  br label %147

140:                                              ; preds = %130
  %141 = xor i1 %129, %134
  br label %147

142:                                              ; preds = %130
  %143 = xor i1 %129, %134
  %144 = xor i1 %143, true
  br label %147

145:                                              ; preds = %130
  %146 = xor i1 %129, %134
  br label %147

147:                                              ; preds = %135, %137, %140, %142, %145
  %148 = phi i1 [ %146, %145 ], [ %144, %142 ], [ %141, %140 ], [ %139, %137 ], [ %136, %135 ]
  %149 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 0, i32 24, i32 0, i32 0, i32 0
  %150 = bitcast %"class.SkSL::Type"** %149 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #10
  %153 = zext i1 %148 to i8
  %154 = bitcast i8* %152 to i32 (...)***
  %155 = getelementptr inbounds i8, i8* %152, i64 8
  %156 = bitcast i8* %155 to i32*
  store i32 %1, i32* %156, align 8
  %157 = getelementptr inbounds i8, i8* %152, i64 12
  %158 = bitcast i8* %157 to i32*
  store i32 31, i32* %158, align 4
  %159 = getelementptr inbounds i8, i8* %152, i64 16
  %160 = bitcast i8* %159 to i64*
  store i64 %151, i64* %160, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIbEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %154, align 8
  %161 = getelementptr inbounds i8, i8* %152, i64 24
  store i8 %153, i8* %161, align 8
  %162 = ptrtoint i8* %152 to i64
  br label %1116

163:                                              ; preds = %125
  %164 = icmp ne i32 %3, 59
  %165 = or i1 %164, %129
  br i1 %165, label %166, label %170

166:                                              ; preds = %163
  %167 = icmp ne i32 %3, 57
  %168 = xor i1 %129, true
  %169 = or i1 %167, %168
  br i1 %169, label %176, label %170

170:                                              ; preds = %166, %163
  %171 = bitcast %"class.SkSL::Expression"* %95 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)***
  %172 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*** %171, align 8
  %173 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %172, i64 10
  %174 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %173, align 8
  %175 = tail call %"class.SkSL::Expression"* %174(%"class.SkSL::Expression"* %95) #10
  br label %195

176:                                              ; preds = %166
  %177 = or i1 %164, %168
  %178 = or i1 %167, %129
  %179 = and i1 %177, %178
  %180 = icmp ne i32 %3, 58
  %181 = or i1 %180, %129
  %182 = and i1 %181, %179
  %183 = icmp ne i32 %3, 65
  %184 = or i1 %183, %168
  %185 = and i1 %184, %182
  %186 = icmp ne i32 %3, 66
  %187 = or i1 %186, %129
  %188 = and i1 %187, %185
  br i1 %188, label %195, label %189

189:                                              ; preds = %176
  %190 = bitcast %"class.SkSL::Expression"* %94 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)***
  %191 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*** %190, align 8
  %192 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %191, i64 10
  %193 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %192, align 8
  %194 = tail call %"class.SkSL::Expression"* %193(%"class.SkSL::Expression"* %94) #10
  br label %195

195:                                              ; preds = %170, %176, %189
  %196 = phi %"class.SkSL::Expression"* [ %175, %170 ], [ %194, %189 ], [ null, %176 ]
  %197 = ptrtoint %"class.SkSL::Expression"* %196 to i64
  br label %1116

198:                                              ; preds = %118
  br i1 %124, label %199, label %266

199:                                              ; preds = %198
  %200 = bitcast %"class.SkSL::Expression"* %95 to i1 (%"class.SkSL::Expression"*, i32)***
  %201 = load i1 (%"class.SkSL::Expression"*, i32)**, i1 (%"class.SkSL::Expression"*, i32)*** %200, align 8
  %202 = getelementptr inbounds i1 (%"class.SkSL::Expression"*, i32)*, i1 (%"class.SkSL::Expression"*, i32)** %201, i64 7
  %203 = load i1 (%"class.SkSL::Expression"*, i32)*, i1 (%"class.SkSL::Expression"*, i32)** %202, align 8
  %204 = tail call zeroext i1 %203(%"class.SkSL::Expression"* %95, i32 0) #10
  %205 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %94, i64 1
  %206 = bitcast %"class.SkSL::Expression"* %205 to i8*
  %207 = load i8, i8* %206, align 8, !range !2
  %208 = icmp ne i8 %207, 0
  %209 = icmp ne i32 %3, 59
  br i1 %204, label %244, label %210

210:                                              ; preds = %199
  %211 = or i1 %209, %208
  br i1 %211, label %212, label %216

212:                                              ; preds = %210
  %213 = icmp ne i32 %3, 57
  %214 = xor i1 %208, true
  %215 = or i1 %213, %214
  br i1 %215, label %222, label %216

216:                                              ; preds = %212, %210
  %217 = bitcast %"class.SkSL::Expression"* %94 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)***
  %218 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*** %217, align 8
  %219 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %218, i64 10
  %220 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %219, align 8
  %221 = tail call %"class.SkSL::Expression"* %220(%"class.SkSL::Expression"* %94) #10
  br label %241

222:                                              ; preds = %212
  %223 = or i1 %209, %214
  %224 = or i1 %213, %208
  %225 = and i1 %223, %224
  %226 = icmp ne i32 %3, 58
  %227 = or i1 %226, %208
  %228 = and i1 %227, %225
  %229 = icmp ne i32 %3, 65
  %230 = or i1 %229, %214
  %231 = and i1 %230, %228
  %232 = icmp ne i32 %3, 66
  %233 = or i1 %232, %208
  %234 = and i1 %233, %231
  br i1 %234, label %241, label %235

235:                                              ; preds = %222
  %236 = bitcast %"class.SkSL::Expression"* %95 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)***
  %237 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*** %236, align 8
  %238 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %237, i64 10
  %239 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %238, align 8
  %240 = tail call %"class.SkSL::Expression"* %239(%"class.SkSL::Expression"* %95) #10
  br label %241

241:                                              ; preds = %216, %222, %235
  %242 = phi %"class.SkSL::Expression"* [ %221, %216 ], [ %240, %235 ], [ null, %222 ]
  %243 = ptrtoint %"class.SkSL::Expression"* %242 to i64
  br label %1116

244:                                              ; preds = %199
  %245 = xor i1 %208, true
  %246 = or i1 %209, %245
  %247 = icmp ne i32 %3, 57
  %248 = or i1 %247, %208
  %249 = and i1 %246, %248
  %250 = icmp ne i32 %3, 58
  %251 = or i1 %250, %208
  %252 = and i1 %251, %249
  %253 = icmp ne i32 %3, 65
  %254 = or i1 %253, %245
  %255 = and i1 %254, %252
  %256 = icmp ne i32 %3, 66
  %257 = or i1 %256, %208
  %258 = and i1 %257, %255
  br i1 %258, label %1116, label %259

259:                                              ; preds = %244
  %260 = bitcast %"class.SkSL::Expression"* %95 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)***
  %261 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*** %260, align 8
  %262 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %261, i64 10
  %263 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %262, align 8
  %264 = tail call %"class.SkSL::Expression"* %263(%"class.SkSL::Expression"* %95) #10
  %265 = ptrtoint %"class.SkSL::Expression"* %264 to i64
  br label %1116

266:                                              ; preds = %198
  switch i32 %3, label %308 [
    i32 65, label %267
    i32 66, label %285
    i32 49, label %303
    i32 74, label %303
    i32 50, label %303
    i32 75, label %303
  ]

267:                                              ; preds = %266
  %268 = tail call zeroext i1 @_ZN4SkSL8Analysis20IsSameExpressionTreeERKNS_10ExpressionES3_(%"class.SkSL::Expression"* dereferenceable(24) %95, %"class.SkSL::Expression"* dereferenceable(24) %94) #10
  br i1 %268, label %269, label %308

269:                                              ; preds = %267
  %270 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %2, i64 0, i32 0, i32 1
  %271 = load i32, i32* %270, align 8
  %272 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 0, i32 24, i32 0, i32 0, i32 0
  %273 = bitcast %"class.SkSL::Type"** %272 to i64*
  %274 = load i64, i64* %273, align 8
  %275 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #10
  %276 = bitcast i8* %275 to i32 (...)***
  %277 = getelementptr inbounds i8, i8* %275, i64 8
  %278 = bitcast i8* %277 to i32*
  store i32 %271, i32* %278, align 8
  %279 = getelementptr inbounds i8, i8* %275, i64 12
  %280 = bitcast i8* %279 to i32*
  store i32 31, i32* %280, align 4
  %281 = getelementptr inbounds i8, i8* %275, i64 16
  %282 = bitcast i8* %281 to i64*
  store i64 %274, i64* %282, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIbEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %276, align 8
  %283 = getelementptr inbounds i8, i8* %275, i64 24
  store i8 1, i8* %283, align 8
  %284 = ptrtoint i8* %275 to i64
  br label %1116

285:                                              ; preds = %266
  %286 = tail call zeroext i1 @_ZN4SkSL8Analysis20IsSameExpressionTreeERKNS_10ExpressionES3_(%"class.SkSL::Expression"* dereferenceable(24) %95, %"class.SkSL::Expression"* dereferenceable(24) %94) #10
  br i1 %286, label %287, label %308

287:                                              ; preds = %285
  %288 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %2, i64 0, i32 0, i32 1
  %289 = load i32, i32* %288, align 8
  %290 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 0, i32 24, i32 0, i32 0, i32 0
  %291 = bitcast %"class.SkSL::Type"** %290 to i64*
  %292 = load i64, i64* %291, align 8
  %293 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #10
  %294 = bitcast i8* %293 to i32 (...)***
  %295 = getelementptr inbounds i8, i8* %293, i64 8
  %296 = bitcast i8* %295 to i32*
  store i32 %289, i32* %296, align 8
  %297 = getelementptr inbounds i8, i8* %293, i64 12
  %298 = bitcast i8* %297 to i32*
  store i32 31, i32* %298, align 4
  %299 = getelementptr inbounds i8, i8* %293, i64 16
  %300 = bitcast i8* %299 to i64*
  store i64 %292, i64* %300, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIbEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %294, align 8
  %301 = getelementptr inbounds i8, i8* %293, i64 24
  store i8 0, i8* %301, align 8
  %302 = ptrtoint i8* %293 to i64
  br label %1116

303:                                              ; preds = %266, %266, %266, %266
  %304 = tail call fastcc zeroext i1 @_ZN4SkSLL22contains_constant_zeroERKNS_10ExpressionE(%"class.SkSL::Expression"* dereferenceable(24) %94) #10
  br i1 %304, label %305, label %308

305:                                              ; preds = %303
  %306 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 1
  %307 = load %"class.SkSL::ErrorReporter"*, %"class.SkSL::ErrorReporter"** %306, align 8
  tail call void @_ZN4SkSL13ErrorReporter5errorEiPKc(%"class.SkSL::ErrorReporter"* %307, i32 %1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #10
  br label %1116

308:                                              ; preds = %266, %267, %285, %303
  %309 = bitcast %"class.SkSL::Expression"* %95 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %310 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %309, align 8
  %311 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %310, i64 3
  %312 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %311, align 8
  %313 = tail call dereferenceable(184) %"class.SkSL::Type"* %312(%"class.SkSL::Expression"* %95) #10
  %314 = bitcast %"class.SkSL::Expression"* %94 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %315 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %314, align 8
  %316 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %315, i64 3
  %317 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %316, align 8
  %318 = tail call dereferenceable(184) %"class.SkSL::Type"* %317(%"class.SkSL::Expression"* %94) #10
  %319 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %313, i64 0, i32 3
  %320 = load i32, i32* %319, align 8
  switch i32 %320, label %398 [
    i32 8, label %321
    i32 11, label %321
  ]

321:                                              ; preds = %308, %308
  %322 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %318, i64 0, i32 3
  %323 = load i32, i32* %322, align 8
  switch i32 %323, label %398 [
    i32 8, label %324
    i32 11, label %324
  ]

324:                                              ; preds = %321, %321
  switch i32 %3, label %398 [
    i32 46, label %325
    i32 48, label %333
    i32 47, label %361
    i32 49, label %370
    i32 71, label %386
    i32 72, label %386
    i32 73, label %390
    i32 74, label %390
  ]

325:                                              ; preds = %324
  %326 = tail call fastcc zeroext i1 @_ZN4SkSLL17is_constant_valueERKNS_10ExpressionEf(%"class.SkSL::Expression"* dereferenceable(24) %94, float 0.000000e+00) #10
  br i1 %326, label %327, label %329

327:                                              ; preds = %325
  %328 = tail call fastcc %"class.SkSL::Expression"* @_ZN4SkSLL15cast_expressionERKNS_7ContextERKNS_10ExpressionERKNS_4TypeE(%"class.SkSL::Context"* dereferenceable(744) %0, %"class.SkSL::Expression"* dereferenceable(24) %95, %"class.SkSL::Type"* dereferenceable(184) %5) #10
  br label %394

329:                                              ; preds = %325
  %330 = tail call fastcc zeroext i1 @_ZN4SkSLL17is_constant_valueERKNS_10ExpressionEf(%"class.SkSL::Expression"* dereferenceable(24) %95, float 0.000000e+00) #10
  br i1 %330, label %331, label %398

331:                                              ; preds = %329
  %332 = tail call fastcc %"class.SkSL::Expression"* @_ZN4SkSLL15cast_expressionERKNS_7ContextERKNS_10ExpressionERKNS_4TypeE(%"class.SkSL::Context"* dereferenceable(744) %0, %"class.SkSL::Expression"* dereferenceable(24) %94, %"class.SkSL::Type"* dereferenceable(184) %5) #10
  br label %394

333:                                              ; preds = %324
  %334 = tail call fastcc zeroext i1 @_ZN4SkSLL17is_constant_valueERKNS_10ExpressionEf(%"class.SkSL::Expression"* dereferenceable(24) %94, float 1.000000e+00) #10
  br i1 %334, label %335, label %337

335:                                              ; preds = %333
  %336 = tail call fastcc %"class.SkSL::Expression"* @_ZN4SkSLL15cast_expressionERKNS_7ContextERKNS_10ExpressionERKNS_4TypeE(%"class.SkSL::Context"* dereferenceable(744) %0, %"class.SkSL::Expression"* dereferenceable(24) %95, %"class.SkSL::Type"* dereferenceable(184) %5) #10
  br label %394

337:                                              ; preds = %333
  %338 = tail call fastcc zeroext i1 @_ZN4SkSLL17is_constant_valueERKNS_10ExpressionEf(%"class.SkSL::Expression"* dereferenceable(24) %95, float 1.000000e+00) #10
  br i1 %338, label %339, label %341

339:                                              ; preds = %337
  %340 = tail call fastcc %"class.SkSL::Expression"* @_ZN4SkSLL15cast_expressionERKNS_7ContextERKNS_10ExpressionERKNS_4TypeE(%"class.SkSL::Context"* dereferenceable(744) %0, %"class.SkSL::Expression"* dereferenceable(24) %94, %"class.SkSL::Type"* dereferenceable(184) %5) #10
  br label %394

341:                                              ; preds = %337
  %342 = tail call fastcc zeroext i1 @_ZN4SkSLL17is_constant_valueERKNS_10ExpressionEf(%"class.SkSL::Expression"* dereferenceable(24) %94, float 0.000000e+00) #10
  br i1 %342, label %343, label %351

343:                                              ; preds = %341
  %344 = bitcast %"class.SkSL::Expression"* %95 to i1 (%"class.SkSL::Expression"*, i32)***
  %345 = load i1 (%"class.SkSL::Expression"*, i32)**, i1 (%"class.SkSL::Expression"*, i32)*** %344, align 8
  %346 = getelementptr inbounds i1 (%"class.SkSL::Expression"*, i32)*, i1 (%"class.SkSL::Expression"*, i32)** %345, i64 7
  %347 = load i1 (%"class.SkSL::Expression"*, i32)*, i1 (%"class.SkSL::Expression"*, i32)** %346, align 8
  %348 = tail call zeroext i1 %347(%"class.SkSL::Expression"* %95, i32 0) #10
  br i1 %348, label %351, label %349

349:                                              ; preds = %343
  %350 = tail call fastcc %"class.SkSL::Expression"* @_ZN4SkSLL15cast_expressionERKNS_7ContextERKNS_10ExpressionERKNS_4TypeE(%"class.SkSL::Context"* dereferenceable(744) %0, %"class.SkSL::Expression"* dereferenceable(24) %94, %"class.SkSL::Type"* dereferenceable(184) %5) #10
  br label %394

351:                                              ; preds = %343, %341
  %352 = tail call fastcc zeroext i1 @_ZN4SkSLL17is_constant_valueERKNS_10ExpressionEf(%"class.SkSL::Expression"* dereferenceable(24) %95, float 0.000000e+00) #10
  br i1 %352, label %353, label %398

353:                                              ; preds = %351
  %354 = bitcast %"class.SkSL::Expression"* %94 to i1 (%"class.SkSL::Expression"*, i32)***
  %355 = load i1 (%"class.SkSL::Expression"*, i32)**, i1 (%"class.SkSL::Expression"*, i32)*** %354, align 8
  %356 = getelementptr inbounds i1 (%"class.SkSL::Expression"*, i32)*, i1 (%"class.SkSL::Expression"*, i32)** %355, i64 7
  %357 = load i1 (%"class.SkSL::Expression"*, i32)*, i1 (%"class.SkSL::Expression"*, i32)** %356, align 8
  %358 = tail call zeroext i1 %357(%"class.SkSL::Expression"* %94, i32 0) #10
  br i1 %358, label %398, label %359

359:                                              ; preds = %353
  %360 = tail call fastcc %"class.SkSL::Expression"* @_ZN4SkSLL15cast_expressionERKNS_7ContextERKNS_10ExpressionERKNS_4TypeE(%"class.SkSL::Context"* dereferenceable(744) %0, %"class.SkSL::Expression"* dereferenceable(24) %95, %"class.SkSL::Type"* dereferenceable(184) %5) #10
  br label %394

361:                                              ; preds = %324
  %362 = tail call fastcc zeroext i1 @_ZN4SkSLL17is_constant_valueERKNS_10ExpressionEf(%"class.SkSL::Expression"* dereferenceable(24) %94, float 0.000000e+00) #10
  br i1 %362, label %363, label %365

363:                                              ; preds = %361
  %364 = tail call fastcc %"class.SkSL::Expression"* @_ZN4SkSLL15cast_expressionERKNS_7ContextERKNS_10ExpressionERKNS_4TypeE(%"class.SkSL::Context"* dereferenceable(744) %0, %"class.SkSL::Expression"* dereferenceable(24) %95, %"class.SkSL::Type"* dereferenceable(184) %5) #10
  br label %394

365:                                              ; preds = %361
  %366 = tail call fastcc zeroext i1 @_ZN4SkSLL17is_constant_valueERKNS_10ExpressionEf(%"class.SkSL::Expression"* dereferenceable(24) %95, float 0.000000e+00) #10
  br i1 %366, label %367, label %398

367:                                              ; preds = %365
  %368 = tail call fastcc %"class.SkSL::Expression"* @_ZN4SkSLL15cast_expressionERKNS_7ContextERKNS_10ExpressionERKNS_4TypeE(%"class.SkSL::Context"* dereferenceable(744) %0, %"class.SkSL::Expression"* dereferenceable(24) %94, %"class.SkSL::Type"* dereferenceable(184) %5) #10
  %369 = tail call %"class.SkSL::Expression"* @_ZN4SkSL16PrefixExpression4MakeERKNS_7ContextENS_8OperatorENSt3__110unique_ptrINS_10ExpressionENS5_14default_deleteIS7_EEEE(%"class.SkSL::Context"* dereferenceable(744) %0, i32 47, %"class.SkSL::Expression"* %368) #10
  br label %394

370:                                              ; preds = %324
  %371 = tail call fastcc zeroext i1 @_ZN4SkSLL17is_constant_valueERKNS_10ExpressionEf(%"class.SkSL::Expression"* dereferenceable(24) %94, float 1.000000e+00) #10
  br i1 %371, label %372, label %374

372:                                              ; preds = %370
  %373 = tail call fastcc %"class.SkSL::Expression"* @_ZN4SkSLL15cast_expressionERKNS_7ContextERKNS_10ExpressionERKNS_4TypeE(%"class.SkSL::Context"* dereferenceable(744) %0, %"class.SkSL::Expression"* dereferenceable(24) %95, %"class.SkSL::Type"* dereferenceable(184) %5) #10
  br label %394

374:                                              ; preds = %370
  %375 = tail call fastcc zeroext i1 @_ZN4SkSLL17is_constant_valueERKNS_10ExpressionEf(%"class.SkSL::Expression"* dereferenceable(24) %95, float 0.000000e+00) #10
  br i1 %375, label %376, label %398

376:                                              ; preds = %374
  %377 = tail call fastcc zeroext i1 @_ZN4SkSLL17is_constant_valueERKNS_10ExpressionEf(%"class.SkSL::Expression"* dereferenceable(24) %94, float 0.000000e+00) #10
  br i1 %377, label %398, label %378

378:                                              ; preds = %376
  %379 = bitcast %"class.SkSL::Expression"* %94 to i1 (%"class.SkSL::Expression"*, i32)***
  %380 = load i1 (%"class.SkSL::Expression"*, i32)**, i1 (%"class.SkSL::Expression"*, i32)*** %379, align 8
  %381 = getelementptr inbounds i1 (%"class.SkSL::Expression"*, i32)*, i1 (%"class.SkSL::Expression"*, i32)** %380, i64 7
  %382 = load i1 (%"class.SkSL::Expression"*, i32)*, i1 (%"class.SkSL::Expression"*, i32)** %381, align 8
  %383 = tail call zeroext i1 %382(%"class.SkSL::Expression"* %94, i32 0) #10
  br i1 %383, label %398, label %384

384:                                              ; preds = %378
  %385 = tail call fastcc %"class.SkSL::Expression"* @_ZN4SkSLL15cast_expressionERKNS_7ContextERKNS_10ExpressionERKNS_4TypeE(%"class.SkSL::Context"* dereferenceable(744) %0, %"class.SkSL::Expression"* dereferenceable(24) %95, %"class.SkSL::Type"* dereferenceable(184) %5) #10
  br label %394

386:                                              ; preds = %324, %324
  %387 = tail call fastcc zeroext i1 @_ZN4SkSLL17is_constant_valueERKNS_10ExpressionEf(%"class.SkSL::Expression"* dereferenceable(24) %94, float 0.000000e+00) #10
  br i1 %387, label %388, label %398

388:                                              ; preds = %386
  %389 = tail call fastcc %"class.SkSL::Expression"* @_ZN4SkSLL15cast_expressionERKNS_7ContextERKNS_10ExpressionERKNS_4TypeE(%"class.SkSL::Context"* dereferenceable(744) %0, %"class.SkSL::Expression"* dereferenceable(24) %95, %"class.SkSL::Type"* dereferenceable(184) %5) #10
  tail call void @_ZN4SkSL8Analysis13UpdateRefKindEPNS_10ExpressionENS_15VariableRefKindE(%"class.SkSL::Expression"* %389, i8 signext 0) #10
  br label %394

390:                                              ; preds = %324, %324
  %391 = tail call fastcc zeroext i1 @_ZN4SkSLL17is_constant_valueERKNS_10ExpressionEf(%"class.SkSL::Expression"* dereferenceable(24) %94, float 1.000000e+00) #10
  br i1 %391, label %392, label %398

392:                                              ; preds = %390
  %393 = tail call fastcc %"class.SkSL::Expression"* @_ZN4SkSLL15cast_expressionERKNS_7ContextERKNS_10ExpressionERKNS_4TypeE(%"class.SkSL::Context"* dereferenceable(744) %0, %"class.SkSL::Expression"* dereferenceable(24) %95, %"class.SkSL::Type"* dereferenceable(184) %5) #10
  tail call void @_ZN4SkSL8Analysis13UpdateRefKindEPNS_10ExpressionENS_15VariableRefKindE(%"class.SkSL::Expression"* %393, i8 signext 0) #10
  br label %394

394:                                              ; preds = %327, %331, %335, %339, %349, %359, %363, %367, %372, %384, %388, %392
  %395 = phi %"class.SkSL::Expression"* [ %393, %392 ], [ %389, %388 ], [ %373, %372 ], [ %385, %384 ], [ %364, %363 ], [ %369, %367 ], [ %336, %335 ], [ %340, %339 ], [ %360, %359 ], [ %350, %349 ], [ %328, %327 ], [ %332, %331 ]
  %396 = ptrtoint %"class.SkSL::Expression"* %395 to i64
  %397 = icmp eq %"class.SkSL::Expression"* %395, null
  br i1 %397, label %398, label %1116

398:                                              ; preds = %394, %321, %308, %329, %353, %351, %365, %378, %376, %374, %386, %390, %324
  %399 = bitcast %"class.SkSL::Expression"* %95 to i1 (%"class.SkSL::Expression"*)***
  %400 = load i1 (%"class.SkSL::Expression"*)**, i1 (%"class.SkSL::Expression"*)*** %399, align 8
  %401 = getelementptr inbounds i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %400, i64 4
  %402 = load i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %401, align 8
  %403 = tail call zeroext i1 %402(%"class.SkSL::Expression"* %95) #10
  br i1 %403, label %404, label %1116

404:                                              ; preds = %398
  %405 = bitcast %"class.SkSL::Expression"* %94 to i1 (%"class.SkSL::Expression"*)***
  %406 = load i1 (%"class.SkSL::Expression"*)**, i1 (%"class.SkSL::Expression"*)*** %405, align 8
  %407 = getelementptr inbounds i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %406, i64 4
  %408 = load i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %407, align 8
  %409 = tail call zeroext i1 %408(%"class.SkSL::Expression"* %94) #10
  br i1 %409, label %410, label %1116

410:                                              ; preds = %404
  %411 = load i32, i32* %119, align 4
  switch i32 %411, label %832 [
    i32 43, label %412
    i32 45, label %670
  ]

412:                                              ; preds = %410
  %413 = load i32, i32* %122, align 4
  %414 = icmp eq i32 %413, 43
  br i1 %414, label %415, label %832

415:                                              ; preds = %412
  %416 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %95, i64 1
  %417 = bitcast %"class.SkSL::Expression"* %416 to i64*
  %418 = load i64, i64* %417, align 8
  %419 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %94, i64 1
  %420 = bitcast %"class.SkSL::Expression"* %419 to i64*
  %421 = load i64, i64* %420, align 8
  switch i32 %3, label %1116 [
    i32 46, label %422
    i32 47, label %436
    i32 48, label %450
    i32 49, label %464
    i32 50, label %485
    i32 55, label %506
    i32 53, label %520
    i32 54, label %534
    i32 65, label %548
    i32 66, label %562
    i32 67, label %576
    i32 69, label %590
    i32 68, label %604
    i32 70, label %618
    i32 51, label %632
    i32 52, label %651
  ]

422:                                              ; preds = %415
  %423 = add i64 %421, %418
  %424 = ptrtoint %"class.SkSL::Type"* %5 to i64
  %425 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #10
  %426 = bitcast i8* %425 to i32 (...)***
  %427 = getelementptr inbounds i8, i8* %425, i64 8
  %428 = bitcast i8* %427 to i32*
  store i32 %1, i32* %428, align 8
  %429 = getelementptr inbounds i8, i8* %425, i64 12
  %430 = bitcast i8* %429 to i32*
  store i32 43, i32* %430, align 4
  %431 = getelementptr inbounds i8, i8* %425, i64 16
  %432 = bitcast i8* %431 to i64*
  store i64 %424, i64* %432, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIlEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %426, align 8
  %433 = getelementptr inbounds i8, i8* %425, i64 24
  %434 = bitcast i8* %433 to i64*
  store i64 %423, i64* %434, align 8
  %435 = ptrtoint i8* %425 to i64
  br label %1116

436:                                              ; preds = %415
  %437 = sub i64 %418, %421
  %438 = ptrtoint %"class.SkSL::Type"* %5 to i64
  %439 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #10
  %440 = bitcast i8* %439 to i32 (...)***
  %441 = getelementptr inbounds i8, i8* %439, i64 8
  %442 = bitcast i8* %441 to i32*
  store i32 %1, i32* %442, align 8
  %443 = getelementptr inbounds i8, i8* %439, i64 12
  %444 = bitcast i8* %443 to i32*
  store i32 43, i32* %444, align 4
  %445 = getelementptr inbounds i8, i8* %439, i64 16
  %446 = bitcast i8* %445 to i64*
  store i64 %438, i64* %446, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIlEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %440, align 8
  %447 = getelementptr inbounds i8, i8* %439, i64 24
  %448 = bitcast i8* %447 to i64*
  store i64 %437, i64* %448, align 8
  %449 = ptrtoint i8* %439 to i64
  br label %1116

450:                                              ; preds = %415
  %451 = mul i64 %421, %418
  %452 = ptrtoint %"class.SkSL::Type"* %5 to i64
  %453 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #10
  %454 = bitcast i8* %453 to i32 (...)***
  %455 = getelementptr inbounds i8, i8* %453, i64 8
  %456 = bitcast i8* %455 to i32*
  store i32 %1, i32* %456, align 8
  %457 = getelementptr inbounds i8, i8* %453, i64 12
  %458 = bitcast i8* %457 to i32*
  store i32 43, i32* %458, align 4
  %459 = getelementptr inbounds i8, i8* %453, i64 16
  %460 = bitcast i8* %459 to i64*
  store i64 %452, i64* %460, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIlEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %454, align 8
  %461 = getelementptr inbounds i8, i8* %453, i64 24
  %462 = bitcast i8* %461 to i64*
  store i64 %451, i64* %462, align 8
  %463 = ptrtoint i8* %453 to i64
  br label %1116

464:                                              ; preds = %415
  %465 = icmp eq i64 %418, -9223372036854775808
  %466 = icmp eq i64 %421, -1
  %467 = and i1 %465, %466
  br i1 %467, label %468, label %471

468:                                              ; preds = %464
  %469 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 1
  %470 = load %"class.SkSL::ErrorReporter"*, %"class.SkSL::ErrorReporter"** %469, align 8
  tail call void @_ZN4SkSL13ErrorReporter5errorEiPKc(%"class.SkSL::ErrorReporter"* %470, i32 %1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0))
  br label %1116

471:                                              ; preds = %464
  %472 = sdiv i64 %418, %421
  %473 = ptrtoint %"class.SkSL::Type"* %5 to i64
  %474 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #10
  %475 = bitcast i8* %474 to i32 (...)***
  %476 = getelementptr inbounds i8, i8* %474, i64 8
  %477 = bitcast i8* %476 to i32*
  store i32 %1, i32* %477, align 8
  %478 = getelementptr inbounds i8, i8* %474, i64 12
  %479 = bitcast i8* %478 to i32*
  store i32 43, i32* %479, align 4
  %480 = getelementptr inbounds i8, i8* %474, i64 16
  %481 = bitcast i8* %480 to i64*
  store i64 %473, i64* %481, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIlEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %475, align 8
  %482 = getelementptr inbounds i8, i8* %474, i64 24
  %483 = bitcast i8* %482 to i64*
  store i64 %472, i64* %483, align 8
  %484 = ptrtoint i8* %474 to i64
  br label %1116

485:                                              ; preds = %415
  %486 = icmp eq i64 %418, -9223372036854775808
  %487 = icmp eq i64 %421, -1
  %488 = and i1 %486, %487
  br i1 %488, label %489, label %492

489:                                              ; preds = %485
  %490 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 1
  %491 = load %"class.SkSL::ErrorReporter"*, %"class.SkSL::ErrorReporter"** %490, align 8
  tail call void @_ZN4SkSL13ErrorReporter5errorEiPKc(%"class.SkSL::ErrorReporter"* %491, i32 %1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0))
  br label %1116

492:                                              ; preds = %485
  %493 = srem i64 %418, %421
  %494 = ptrtoint %"class.SkSL::Type"* %5 to i64
  %495 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #10
  %496 = bitcast i8* %495 to i32 (...)***
  %497 = getelementptr inbounds i8, i8* %495, i64 8
  %498 = bitcast i8* %497 to i32*
  store i32 %1, i32* %498, align 8
  %499 = getelementptr inbounds i8, i8* %495, i64 12
  %500 = bitcast i8* %499 to i32*
  store i32 43, i32* %500, align 4
  %501 = getelementptr inbounds i8, i8* %495, i64 16
  %502 = bitcast i8* %501 to i64*
  store i64 %494, i64* %502, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIlEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %496, align 8
  %503 = getelementptr inbounds i8, i8* %495, i64 24
  %504 = bitcast i8* %503 to i64*
  store i64 %493, i64* %504, align 8
  %505 = ptrtoint i8* %495 to i64
  br label %1116

506:                                              ; preds = %415
  %507 = and i64 %421, %418
  %508 = ptrtoint %"class.SkSL::Type"* %5 to i64
  %509 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #10
  %510 = bitcast i8* %509 to i32 (...)***
  %511 = getelementptr inbounds i8, i8* %509, i64 8
  %512 = bitcast i8* %511 to i32*
  store i32 %1, i32* %512, align 8
  %513 = getelementptr inbounds i8, i8* %509, i64 12
  %514 = bitcast i8* %513 to i32*
  store i32 43, i32* %514, align 4
  %515 = getelementptr inbounds i8, i8* %509, i64 16
  %516 = bitcast i8* %515 to i64*
  store i64 %508, i64* %516, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIlEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %510, align 8
  %517 = getelementptr inbounds i8, i8* %509, i64 24
  %518 = bitcast i8* %517 to i64*
  store i64 %507, i64* %518, align 8
  %519 = ptrtoint i8* %509 to i64
  br label %1116

520:                                              ; preds = %415
  %521 = or i64 %421, %418
  %522 = ptrtoint %"class.SkSL::Type"* %5 to i64
  %523 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #10
  %524 = bitcast i8* %523 to i32 (...)***
  %525 = getelementptr inbounds i8, i8* %523, i64 8
  %526 = bitcast i8* %525 to i32*
  store i32 %1, i32* %526, align 8
  %527 = getelementptr inbounds i8, i8* %523, i64 12
  %528 = bitcast i8* %527 to i32*
  store i32 43, i32* %528, align 4
  %529 = getelementptr inbounds i8, i8* %523, i64 16
  %530 = bitcast i8* %529 to i64*
  store i64 %522, i64* %530, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIlEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %524, align 8
  %531 = getelementptr inbounds i8, i8* %523, i64 24
  %532 = bitcast i8* %531 to i64*
  store i64 %521, i64* %532, align 8
  %533 = ptrtoint i8* %523 to i64
  br label %1116

534:                                              ; preds = %415
  %535 = xor i64 %421, %418
  %536 = ptrtoint %"class.SkSL::Type"* %5 to i64
  %537 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #10
  %538 = bitcast i8* %537 to i32 (...)***
  %539 = getelementptr inbounds i8, i8* %537, i64 8
  %540 = bitcast i8* %539 to i32*
  store i32 %1, i32* %540, align 8
  %541 = getelementptr inbounds i8, i8* %537, i64 12
  %542 = bitcast i8* %541 to i32*
  store i32 43, i32* %542, align 4
  %543 = getelementptr inbounds i8, i8* %537, i64 16
  %544 = bitcast i8* %543 to i64*
  store i64 %536, i64* %544, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIlEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %538, align 8
  %545 = getelementptr inbounds i8, i8* %537, i64 24
  %546 = bitcast i8* %545 to i64*
  store i64 %535, i64* %546, align 8
  %547 = ptrtoint i8* %537 to i64
  br label %1116

548:                                              ; preds = %415
  %549 = icmp eq i64 %418, %421
  %550 = ptrtoint %"class.SkSL::Type"* %5 to i64
  %551 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #10
  %552 = zext i1 %549 to i8
  %553 = bitcast i8* %551 to i32 (...)***
  %554 = getelementptr inbounds i8, i8* %551, i64 8
  %555 = bitcast i8* %554 to i32*
  store i32 %1, i32* %555, align 8
  %556 = getelementptr inbounds i8, i8* %551, i64 12
  %557 = bitcast i8* %556 to i32*
  store i32 31, i32* %557, align 4
  %558 = getelementptr inbounds i8, i8* %551, i64 16
  %559 = bitcast i8* %558 to i64*
  store i64 %550, i64* %559, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIbEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %553, align 8
  %560 = getelementptr inbounds i8, i8* %551, i64 24
  store i8 %552, i8* %560, align 8
  %561 = ptrtoint i8* %551 to i64
  br label %1116

562:                                              ; preds = %415
  %563 = icmp ne i64 %418, %421
  %564 = ptrtoint %"class.SkSL::Type"* %5 to i64
  %565 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #10
  %566 = zext i1 %563 to i8
  %567 = bitcast i8* %565 to i32 (...)***
  %568 = getelementptr inbounds i8, i8* %565, i64 8
  %569 = bitcast i8* %568 to i32*
  store i32 %1, i32* %569, align 8
  %570 = getelementptr inbounds i8, i8* %565, i64 12
  %571 = bitcast i8* %570 to i32*
  store i32 31, i32* %571, align 4
  %572 = getelementptr inbounds i8, i8* %565, i64 16
  %573 = bitcast i8* %572 to i64*
  store i64 %564, i64* %573, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIbEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %567, align 8
  %574 = getelementptr inbounds i8, i8* %565, i64 24
  store i8 %566, i8* %574, align 8
  %575 = ptrtoint i8* %565 to i64
  br label %1116

576:                                              ; preds = %415
  %577 = icmp sgt i64 %418, %421
  %578 = ptrtoint %"class.SkSL::Type"* %5 to i64
  %579 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #10
  %580 = zext i1 %577 to i8
  %581 = bitcast i8* %579 to i32 (...)***
  %582 = getelementptr inbounds i8, i8* %579, i64 8
  %583 = bitcast i8* %582 to i32*
  store i32 %1, i32* %583, align 8
  %584 = getelementptr inbounds i8, i8* %579, i64 12
  %585 = bitcast i8* %584 to i32*
  store i32 31, i32* %585, align 4
  %586 = getelementptr inbounds i8, i8* %579, i64 16
  %587 = bitcast i8* %586 to i64*
  store i64 %578, i64* %587, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIbEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %581, align 8
  %588 = getelementptr inbounds i8, i8* %579, i64 24
  store i8 %580, i8* %588, align 8
  %589 = ptrtoint i8* %579 to i64
  br label %1116

590:                                              ; preds = %415
  %591 = icmp sge i64 %418, %421
  %592 = ptrtoint %"class.SkSL::Type"* %5 to i64
  %593 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #10
  %594 = zext i1 %591 to i8
  %595 = bitcast i8* %593 to i32 (...)***
  %596 = getelementptr inbounds i8, i8* %593, i64 8
  %597 = bitcast i8* %596 to i32*
  store i32 %1, i32* %597, align 8
  %598 = getelementptr inbounds i8, i8* %593, i64 12
  %599 = bitcast i8* %598 to i32*
  store i32 31, i32* %599, align 4
  %600 = getelementptr inbounds i8, i8* %593, i64 16
  %601 = bitcast i8* %600 to i64*
  store i64 %592, i64* %601, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIbEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %595, align 8
  %602 = getelementptr inbounds i8, i8* %593, i64 24
  store i8 %594, i8* %602, align 8
  %603 = ptrtoint i8* %593 to i64
  br label %1116

604:                                              ; preds = %415
  %605 = icmp slt i64 %418, %421
  %606 = ptrtoint %"class.SkSL::Type"* %5 to i64
  %607 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #10
  %608 = zext i1 %605 to i8
  %609 = bitcast i8* %607 to i32 (...)***
  %610 = getelementptr inbounds i8, i8* %607, i64 8
  %611 = bitcast i8* %610 to i32*
  store i32 %1, i32* %611, align 8
  %612 = getelementptr inbounds i8, i8* %607, i64 12
  %613 = bitcast i8* %612 to i32*
  store i32 31, i32* %613, align 4
  %614 = getelementptr inbounds i8, i8* %607, i64 16
  %615 = bitcast i8* %614 to i64*
  store i64 %606, i64* %615, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIbEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %609, align 8
  %616 = getelementptr inbounds i8, i8* %607, i64 24
  store i8 %608, i8* %616, align 8
  %617 = ptrtoint i8* %607 to i64
  br label %1116

618:                                              ; preds = %415
  %619 = icmp sle i64 %418, %421
  %620 = ptrtoint %"class.SkSL::Type"* %5 to i64
  %621 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #10
  %622 = zext i1 %619 to i8
  %623 = bitcast i8* %621 to i32 (...)***
  %624 = getelementptr inbounds i8, i8* %621, i64 8
  %625 = bitcast i8* %624 to i32*
  store i32 %1, i32* %625, align 8
  %626 = getelementptr inbounds i8, i8* %621, i64 12
  %627 = bitcast i8* %626 to i32*
  store i32 31, i32* %627, align 4
  %628 = getelementptr inbounds i8, i8* %621, i64 16
  %629 = bitcast i8* %628 to i64*
  store i64 %620, i64* %629, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIbEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %623, align 8
  %630 = getelementptr inbounds i8, i8* %621, i64 24
  store i8 %622, i8* %630, align 8
  %631 = ptrtoint i8* %621 to i64
  br label %1116

632:                                              ; preds = %415
  %633 = icmp ult i64 %421, 32
  br i1 %633, label %634, label %648

634:                                              ; preds = %632
  %635 = shl i64 %418, %421
  %636 = ptrtoint %"class.SkSL::Type"* %5 to i64
  %637 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #10
  %638 = bitcast i8* %637 to i32 (...)***
  %639 = getelementptr inbounds i8, i8* %637, i64 8
  %640 = bitcast i8* %639 to i32*
  store i32 %1, i32* %640, align 8
  %641 = getelementptr inbounds i8, i8* %637, i64 12
  %642 = bitcast i8* %641 to i32*
  store i32 43, i32* %642, align 4
  %643 = getelementptr inbounds i8, i8* %637, i64 16
  %644 = bitcast i8* %643 to i64*
  store i64 %636, i64* %644, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIlEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %638, align 8
  %645 = getelementptr inbounds i8, i8* %637, i64 24
  %646 = bitcast i8* %645 to i64*
  store i64 %635, i64* %646, align 8
  %647 = ptrtoint i8* %637 to i64
  br label %1116

648:                                              ; preds = %632
  %649 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 1
  %650 = load %"class.SkSL::ErrorReporter"*, %"class.SkSL::ErrorReporter"** %649, align 8
  tail call void @_ZN4SkSL13ErrorReporter5errorEiPKc(%"class.SkSL::ErrorReporter"* %650, i32 %1, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0))
  br label %1116

651:                                              ; preds = %415
  %652 = icmp ult i64 %421, 32
  br i1 %652, label %653, label %667

653:                                              ; preds = %651
  %654 = ashr i64 %418, %421
  %655 = ptrtoint %"class.SkSL::Type"* %5 to i64
  %656 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #10
  %657 = bitcast i8* %656 to i32 (...)***
  %658 = getelementptr inbounds i8, i8* %656, i64 8
  %659 = bitcast i8* %658 to i32*
  store i32 %1, i32* %659, align 8
  %660 = getelementptr inbounds i8, i8* %656, i64 12
  %661 = bitcast i8* %660 to i32*
  store i32 43, i32* %661, align 4
  %662 = getelementptr inbounds i8, i8* %656, i64 16
  %663 = bitcast i8* %662 to i64*
  store i64 %655, i64* %663, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIlEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %657, align 8
  %664 = getelementptr inbounds i8, i8* %656, i64 24
  %665 = bitcast i8* %664 to i64*
  store i64 %654, i64* %665, align 8
  %666 = ptrtoint i8* %656 to i64
  br label %1116

667:                                              ; preds = %651
  %668 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 1
  %669 = load %"class.SkSL::ErrorReporter"*, %"class.SkSL::ErrorReporter"** %668, align 8
  tail call void @_ZN4SkSL13ErrorReporter5errorEiPKc(%"class.SkSL::ErrorReporter"* %669, i32 %1, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0))
  br label %1116

670:                                              ; preds = %410
  %671 = load i32, i32* %122, align 4
  %672 = icmp eq i32 %671, 45
  br i1 %672, label %673, label %832

673:                                              ; preds = %670
  %674 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %95, i64 1
  %675 = bitcast %"class.SkSL::Expression"* %674 to float*
  %676 = load float, float* %675, align 8
  %677 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %94, i64 1
  %678 = bitcast %"class.SkSL::Expression"* %677 to float*
  %679 = load float, float* %678, align 8
  switch i32 %3, label %1116 [
    i32 46, label %680
    i32 47, label %697
    i32 48, label %714
    i32 49, label %731
    i32 65, label %748
    i32 66, label %762
    i32 67, label %776
    i32 69, label %790
    i32 68, label %804
    i32 70, label %818
  ]

680:                                              ; preds = %673
  %681 = fadd float %676, %679
  %682 = tail call float @llvm.fabs.f32(float %681) #13
  %683 = fcmp ueq float %682, 0x7FF0000000000000
  br i1 %683, label %1116, label %684

684:                                              ; preds = %680
  %685 = ptrtoint %"class.SkSL::Type"* %5 to i64
  %686 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #10
  %687 = bitcast i8* %686 to i32 (...)***
  %688 = getelementptr inbounds i8, i8* %686, i64 8
  %689 = bitcast i8* %688 to i32*
  store i32 %1, i32* %689, align 8
  %690 = getelementptr inbounds i8, i8* %686, i64 12
  %691 = bitcast i8* %690 to i32*
  store i32 45, i32* %691, align 4
  %692 = getelementptr inbounds i8, i8* %686, i64 16
  %693 = bitcast i8* %692 to i64*
  store i64 %685, i64* %693, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIfEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %687, align 8
  %694 = getelementptr inbounds i8, i8* %686, i64 24
  %695 = bitcast i8* %694 to float*
  store float %681, float* %695, align 8
  %696 = ptrtoint i8* %686 to i64
  br label %1116

697:                                              ; preds = %673
  %698 = fsub float %676, %679
  %699 = tail call float @llvm.fabs.f32(float %698) #13
  %700 = fcmp ueq float %699, 0x7FF0000000000000
  br i1 %700, label %1116, label %701

701:                                              ; preds = %697
  %702 = ptrtoint %"class.SkSL::Type"* %5 to i64
  %703 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #10
  %704 = bitcast i8* %703 to i32 (...)***
  %705 = getelementptr inbounds i8, i8* %703, i64 8
  %706 = bitcast i8* %705 to i32*
  store i32 %1, i32* %706, align 8
  %707 = getelementptr inbounds i8, i8* %703, i64 12
  %708 = bitcast i8* %707 to i32*
  store i32 45, i32* %708, align 4
  %709 = getelementptr inbounds i8, i8* %703, i64 16
  %710 = bitcast i8* %709 to i64*
  store i64 %702, i64* %710, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIfEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %704, align 8
  %711 = getelementptr inbounds i8, i8* %703, i64 24
  %712 = bitcast i8* %711 to float*
  store float %698, float* %712, align 8
  %713 = ptrtoint i8* %703 to i64
  br label %1116

714:                                              ; preds = %673
  %715 = fmul float %676, %679
  %716 = tail call float @llvm.fabs.f32(float %715) #13
  %717 = fcmp ueq float %716, 0x7FF0000000000000
  br i1 %717, label %1116, label %718

718:                                              ; preds = %714
  %719 = ptrtoint %"class.SkSL::Type"* %5 to i64
  %720 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #10
  %721 = bitcast i8* %720 to i32 (...)***
  %722 = getelementptr inbounds i8, i8* %720, i64 8
  %723 = bitcast i8* %722 to i32*
  store i32 %1, i32* %723, align 8
  %724 = getelementptr inbounds i8, i8* %720, i64 12
  %725 = bitcast i8* %724 to i32*
  store i32 45, i32* %725, align 4
  %726 = getelementptr inbounds i8, i8* %720, i64 16
  %727 = bitcast i8* %726 to i64*
  store i64 %719, i64* %727, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIfEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %721, align 8
  %728 = getelementptr inbounds i8, i8* %720, i64 24
  %729 = bitcast i8* %728 to float*
  store float %715, float* %729, align 8
  %730 = ptrtoint i8* %720 to i64
  br label %1116

731:                                              ; preds = %673
  %732 = fdiv float %676, %679
  %733 = tail call float @llvm.fabs.f32(float %732) #13
  %734 = fcmp ueq float %733, 0x7FF0000000000000
  br i1 %734, label %1116, label %735

735:                                              ; preds = %731
  %736 = ptrtoint %"class.SkSL::Type"* %5 to i64
  %737 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #10
  %738 = bitcast i8* %737 to i32 (...)***
  %739 = getelementptr inbounds i8, i8* %737, i64 8
  %740 = bitcast i8* %739 to i32*
  store i32 %1, i32* %740, align 8
  %741 = getelementptr inbounds i8, i8* %737, i64 12
  %742 = bitcast i8* %741 to i32*
  store i32 45, i32* %742, align 4
  %743 = getelementptr inbounds i8, i8* %737, i64 16
  %744 = bitcast i8* %743 to i64*
  store i64 %736, i64* %744, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIfEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %738, align 8
  %745 = getelementptr inbounds i8, i8* %737, i64 24
  %746 = bitcast i8* %745 to float*
  store float %732, float* %746, align 8
  %747 = ptrtoint i8* %737 to i64
  br label %1116

748:                                              ; preds = %673
  %749 = fcmp oeq float %676, %679
  %750 = ptrtoint %"class.SkSL::Type"* %5 to i64
  %751 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #10
  %752 = zext i1 %749 to i8
  %753 = bitcast i8* %751 to i32 (...)***
  %754 = getelementptr inbounds i8, i8* %751, i64 8
  %755 = bitcast i8* %754 to i32*
  store i32 %1, i32* %755, align 8
  %756 = getelementptr inbounds i8, i8* %751, i64 12
  %757 = bitcast i8* %756 to i32*
  store i32 31, i32* %757, align 4
  %758 = getelementptr inbounds i8, i8* %751, i64 16
  %759 = bitcast i8* %758 to i64*
  store i64 %750, i64* %759, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIbEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %753, align 8
  %760 = getelementptr inbounds i8, i8* %751, i64 24
  store i8 %752, i8* %760, align 8
  %761 = ptrtoint i8* %751 to i64
  br label %1116

762:                                              ; preds = %673
  %763 = fcmp une float %676, %679
  %764 = ptrtoint %"class.SkSL::Type"* %5 to i64
  %765 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #10
  %766 = zext i1 %763 to i8
  %767 = bitcast i8* %765 to i32 (...)***
  %768 = getelementptr inbounds i8, i8* %765, i64 8
  %769 = bitcast i8* %768 to i32*
  store i32 %1, i32* %769, align 8
  %770 = getelementptr inbounds i8, i8* %765, i64 12
  %771 = bitcast i8* %770 to i32*
  store i32 31, i32* %771, align 4
  %772 = getelementptr inbounds i8, i8* %765, i64 16
  %773 = bitcast i8* %772 to i64*
  store i64 %764, i64* %773, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIbEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %767, align 8
  %774 = getelementptr inbounds i8, i8* %765, i64 24
  store i8 %766, i8* %774, align 8
  %775 = ptrtoint i8* %765 to i64
  br label %1116

776:                                              ; preds = %673
  %777 = fcmp ogt float %676, %679
  %778 = ptrtoint %"class.SkSL::Type"* %5 to i64
  %779 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #10
  %780 = zext i1 %777 to i8
  %781 = bitcast i8* %779 to i32 (...)***
  %782 = getelementptr inbounds i8, i8* %779, i64 8
  %783 = bitcast i8* %782 to i32*
  store i32 %1, i32* %783, align 8
  %784 = getelementptr inbounds i8, i8* %779, i64 12
  %785 = bitcast i8* %784 to i32*
  store i32 31, i32* %785, align 4
  %786 = getelementptr inbounds i8, i8* %779, i64 16
  %787 = bitcast i8* %786 to i64*
  store i64 %778, i64* %787, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIbEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %781, align 8
  %788 = getelementptr inbounds i8, i8* %779, i64 24
  store i8 %780, i8* %788, align 8
  %789 = ptrtoint i8* %779 to i64
  br label %1116

790:                                              ; preds = %673
  %791 = fcmp oge float %676, %679
  %792 = ptrtoint %"class.SkSL::Type"* %5 to i64
  %793 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #10
  %794 = zext i1 %791 to i8
  %795 = bitcast i8* %793 to i32 (...)***
  %796 = getelementptr inbounds i8, i8* %793, i64 8
  %797 = bitcast i8* %796 to i32*
  store i32 %1, i32* %797, align 8
  %798 = getelementptr inbounds i8, i8* %793, i64 12
  %799 = bitcast i8* %798 to i32*
  store i32 31, i32* %799, align 4
  %800 = getelementptr inbounds i8, i8* %793, i64 16
  %801 = bitcast i8* %800 to i64*
  store i64 %792, i64* %801, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIbEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %795, align 8
  %802 = getelementptr inbounds i8, i8* %793, i64 24
  store i8 %794, i8* %802, align 8
  %803 = ptrtoint i8* %793 to i64
  br label %1116

804:                                              ; preds = %673
  %805 = fcmp olt float %676, %679
  %806 = ptrtoint %"class.SkSL::Type"* %5 to i64
  %807 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #10
  %808 = zext i1 %805 to i8
  %809 = bitcast i8* %807 to i32 (...)***
  %810 = getelementptr inbounds i8, i8* %807, i64 8
  %811 = bitcast i8* %810 to i32*
  store i32 %1, i32* %811, align 8
  %812 = getelementptr inbounds i8, i8* %807, i64 12
  %813 = bitcast i8* %812 to i32*
  store i32 31, i32* %813, align 4
  %814 = getelementptr inbounds i8, i8* %807, i64 16
  %815 = bitcast i8* %814 to i64*
  store i64 %806, i64* %815, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIbEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %809, align 8
  %816 = getelementptr inbounds i8, i8* %807, i64 24
  store i8 %808, i8* %816, align 8
  %817 = ptrtoint i8* %807 to i64
  br label %1116

818:                                              ; preds = %673
  %819 = fcmp ole float %676, %679
  %820 = ptrtoint %"class.SkSL::Type"* %5 to i64
  %821 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #10
  %822 = zext i1 %819 to i8
  %823 = bitcast i8* %821 to i32 (...)***
  %824 = getelementptr inbounds i8, i8* %821, i64 8
  %825 = bitcast i8* %824 to i32*
  store i32 %1, i32* %825, align 8
  %826 = getelementptr inbounds i8, i8* %821, i64 12
  %827 = bitcast i8* %826 to i32*
  store i32 31, i32* %827, align 4
  %828 = getelementptr inbounds i8, i8* %821, i64 16
  %829 = bitcast i8* %828 to i64*
  store i64 %820, i64* %829, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIbEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %823, align 8
  %830 = getelementptr inbounds i8, i8* %821, i64 24
  store i8 %822, i8* %830, align 8
  %831 = ptrtoint i8* %821 to i64
  br label %1116

832:                                              ; preds = %410, %412, %670
  %833 = load i32, i32* %319, align 8
  %834 = icmp eq i32 %833, 11
  br i1 %834, label %835, label %970

835:                                              ; preds = %832
  %836 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %836) #10
  %837 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %313, i64 0, i32 0, i32 1, i32 0
  %838 = bitcast i8** %837 to <2 x i64>*
  %839 = load <2 x i64>, <2 x i64>* %838, align 8
  store <2 x i64> %839, <2 x i64>* %7, align 16
  %840 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %318, i64 0, i32 0, i32 1, i32 0
  %841 = load i8*, i8** %840, align 8
  %842 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %318, i64 0, i32 0, i32 1, i32 1
  %843 = load i64, i64* %842, align 8
  %844 = call zeroext i1 @_ZNK4SkSL14StringFragmenteqES0_(%"struct.SkSL::StringFragment"* nonnull %8, i8* %841, i64 %843) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %836) #10
  br i1 %844, label %845, label %862

845:                                              ; preds = %835
  %846 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %313, i64 0, i32 6
  %847 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %846, align 8
  %848 = icmp eq %"class.SkSL::Type"* %847, null
  %849 = select i1 %848, %"class.SkSL::Type"* %313, %"class.SkSL::Type"* %847
  %850 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %849, i64 0, i32 4
  %851 = load i32, i32* %850, align 4
  %852 = icmp eq i32 %851, 0
  br i1 %852, label %853, label %856

853:                                              ; preds = %845
  %854 = call fastcc %"class.SkSL::Expression"* @_ZN4SkSLL15simplify_vectorIffEENSt3__110unique_ptrINS_10ExpressionENS1_14default_deleteIS3_EEEERKNS_7ContextERKS3_NS_8OperatorESB_(%"class.SkSL::Context"* dereferenceable(744) %0, %"class.SkSL::Expression"* dereferenceable(24) %95, i32 %3, %"class.SkSL::Expression"* dereferenceable(24) %94)
  %855 = ptrtoint %"class.SkSL::Expression"* %854 to i64
  br label %1116

856:                                              ; preds = %845
  %857 = add i32 %851, -1
  %858 = icmp ult i32 %857, 2
  br i1 %858, label %859, label %1116

859:                                              ; preds = %856
  %860 = call fastcc %"class.SkSL::Expression"* @_ZN4SkSLL15simplify_vectorIlmEENSt3__110unique_ptrINS_10ExpressionENS1_14default_deleteIS3_EEEERKNS_7ContextERKS3_NS_8OperatorESB_(%"class.SkSL::Context"* dereferenceable(744) %0, %"class.SkSL::Expression"* dereferenceable(24) %95, i32 %3, %"class.SkSL::Expression"* dereferenceable(24) %94)
  %861 = ptrtoint %"class.SkSL::Expression"* %860 to i64
  br label %1116

862:                                              ; preds = %835
  %863 = load i32, i32* %319, align 8
  %864 = icmp eq i32 %863, 11
  br i1 %864, label %865, label %970

865:                                              ; preds = %862
  %866 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %313, i64 0, i32 6
  %867 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %866, align 8
  %868 = icmp eq %"class.SkSL::Type"* %867, null
  %869 = select i1 %868, %"class.SkSL::Type"* %313, %"class.SkSL::Type"* %867
  %870 = bitcast <2 x i64>* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %870) #10
  %871 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %869, i64 0, i32 0, i32 1, i32 0
  %872 = bitcast i8** %871 to <2 x i64>*
  %873 = load <2 x i64>, <2 x i64>* %872, align 8
  store <2 x i64> %873, <2 x i64>* %9, align 16
  %874 = load i8*, i8** %840, align 8
  %875 = load i64, i64* %842, align 8
  %876 = call zeroext i1 @_ZNK4SkSL14StringFragmenteqES0_(%"struct.SkSL::StringFragment"* nonnull %10, i8* %874, i64 %875) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %870) #10
  br i1 %876, label %877, label %970

877:                                              ; preds = %865
  %878 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %318, i64 0, i32 4
  %879 = load i32, i32* %878, align 4
  %880 = icmp eq i32 %879, 0
  br i1 %880, label %881, label %924

881:                                              ; preds = %877
  %882 = bitcast %"class.SkSL::ConstructorSplat"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %882) #10
  %883 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %309, align 8
  %884 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %883, i64 3
  %885 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %884, align 8
  %886 = call dereferenceable(184) %"class.SkSL::Type"* %885(%"class.SkSL::Expression"* %95) #10
  %887 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %94, i64 0, i32 0, i32 1
  %888 = load i32, i32* %887, align 8, !noalias !3
  %889 = bitcast %"class.SkSL::Expression"* %94 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)***
  %890 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*** %889, align 8, !noalias !3
  %891 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %890, i64 10
  %892 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %891, align 8, !noalias !3
  %893 = call %"class.SkSL::Expression"* %892(%"class.SkSL::Expression"* %94) #10, !noalias !3
  %894 = ptrtoint %"class.SkSL::Expression"* %893 to i64
  %895 = getelementptr inbounds %"class.SkSL::ConstructorSplat", %"class.SkSL::ConstructorSplat"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %896 = getelementptr inbounds %"class.SkSL::ConstructorSplat", %"class.SkSL::ConstructorSplat"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i32 %888, i32* %896, align 8, !alias.scope !3
  %897 = getelementptr inbounds %"class.SkSL::ConstructorSplat", %"class.SkSL::ConstructorSplat"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i32 39, i32* %897, align 4, !alias.scope !3
  %898 = getelementptr inbounds %"class.SkSL::ConstructorSplat", %"class.SkSL::ConstructorSplat"* %13, i64 0, i32 0, i32 0, i32 0, i32 1
  store %"class.SkSL::Type"* %886, %"class.SkSL::Type"** %898, align 8, !alias.scope !3
  %899 = getelementptr inbounds %"class.SkSL::ConstructorSplat", %"class.SkSL::ConstructorSplat"* %13, i64 0, i32 0, i32 0, i32 1
  %900 = bitcast %"class.std::__1::unique_ptr.38"* %899 to i64*
  store i64 0, i64* %900, align 8, !alias.scope !3
  %901 = getelementptr inbounds %"class.SkSL::ConstructorSplat", %"class.SkSL::ConstructorSplat"* %13, i64 0, i32 0, i32 1
  %902 = bitcast %"class.std::__1::unique_ptr.38"* %901 to i64*
  store i64 %894, i64* %902, align 8, !alias.scope !3
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN4SkSL16ConstructorSplatE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %895, align 8, !alias.scope !3
  %903 = getelementptr inbounds %"class.SkSL::ConstructorSplat", %"class.SkSL::ConstructorSplat"* %13, i64 0, i32 0, i32 0, i32 0
  %904 = call fastcc %"class.SkSL::Expression"* @_ZN4SkSLL15simplify_vectorIffEENSt3__110unique_ptrINS_10ExpressionENS1_14default_deleteIS3_EEEERKNS_7ContextERKS3_NS_8OperatorESB_(%"class.SkSL::Context"* dereferenceable(744) %0, %"class.SkSL::Expression"* dereferenceable(24) %95, i32 %3, %"class.SkSL::Expression"* nonnull dereferenceable(24) %903)
  %905 = ptrtoint %"class.SkSL::Expression"* %904 to i64
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN4SkSL25SingleArgumentConstructorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %895, align 8
  %906 = getelementptr inbounds %"class.SkSL::ConstructorSplat", %"class.SkSL::ConstructorSplat"* %13, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %907 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %906, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %906, align 8
  %908 = icmp eq %"class.SkSL::Expression"* %907, null
  br i1 %908, label %914, label %909

909:                                              ; preds = %881
  %910 = bitcast %"class.SkSL::Expression"* %907 to void (%"class.SkSL::Expression"*)***
  %911 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %910, align 8
  %912 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %911, i64 1
  %913 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %912, align 8
  call void %913(%"class.SkSL::Expression"* nonnull %907) #10
  br label %914

914:                                              ; preds = %909, %881
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN4SkSL14AnyConstructorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %895, align 8
  %915 = getelementptr inbounds %"class.SkSL::ConstructorSplat", %"class.SkSL::ConstructorSplat"* %13, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %916 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %915, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %915, align 8
  %917 = icmp eq %"class.SkSL::Expression"* %916, null
  br i1 %917, label %923, label %918

918:                                              ; preds = %914
  %919 = bitcast %"class.SkSL::Expression"* %916 to void (%"class.SkSL::Expression"*)***
  %920 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %919, align 8
  %921 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %920, i64 1
  %922 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %921, align 8
  call void %922(%"class.SkSL::Expression"* nonnull %916) #10
  br label %923

923:                                              ; preds = %914, %918
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %882) #10
  br label %1116

924:                                              ; preds = %877
  %925 = add i32 %879, -1
  %926 = icmp ult i32 %925, 2
  br i1 %926, label %927, label %1116

927:                                              ; preds = %924
  %928 = bitcast %"class.SkSL::ConstructorSplat"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %928) #10
  %929 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %309, align 8
  %930 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %929, i64 3
  %931 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %930, align 8
  %932 = call dereferenceable(184) %"class.SkSL::Type"* %931(%"class.SkSL::Expression"* %95) #10
  %933 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %94, i64 0, i32 0, i32 1
  %934 = load i32, i32* %933, align 8, !noalias !6
  %935 = bitcast %"class.SkSL::Expression"* %94 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)***
  %936 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*** %935, align 8, !noalias !6
  %937 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %936, i64 10
  %938 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %937, align 8, !noalias !6
  %939 = call %"class.SkSL::Expression"* %938(%"class.SkSL::Expression"* %94) #10, !noalias !6
  %940 = ptrtoint %"class.SkSL::Expression"* %939 to i64
  %941 = getelementptr inbounds %"class.SkSL::ConstructorSplat", %"class.SkSL::ConstructorSplat"* %14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %942 = getelementptr inbounds %"class.SkSL::ConstructorSplat", %"class.SkSL::ConstructorSplat"* %14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i32 %934, i32* %942, align 8, !alias.scope !6
  %943 = getelementptr inbounds %"class.SkSL::ConstructorSplat", %"class.SkSL::ConstructorSplat"* %14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i32 39, i32* %943, align 4, !alias.scope !6
  %944 = getelementptr inbounds %"class.SkSL::ConstructorSplat", %"class.SkSL::ConstructorSplat"* %14, i64 0, i32 0, i32 0, i32 0, i32 1
  store %"class.SkSL::Type"* %932, %"class.SkSL::Type"** %944, align 8, !alias.scope !6
  %945 = getelementptr inbounds %"class.SkSL::ConstructorSplat", %"class.SkSL::ConstructorSplat"* %14, i64 0, i32 0, i32 0, i32 1
  %946 = bitcast %"class.std::__1::unique_ptr.38"* %945 to i64*
  store i64 0, i64* %946, align 8, !alias.scope !6
  %947 = getelementptr inbounds %"class.SkSL::ConstructorSplat", %"class.SkSL::ConstructorSplat"* %14, i64 0, i32 0, i32 1
  %948 = bitcast %"class.std::__1::unique_ptr.38"* %947 to i64*
  store i64 %940, i64* %948, align 8, !alias.scope !6
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN4SkSL16ConstructorSplatE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %941, align 8, !alias.scope !6
  %949 = getelementptr inbounds %"class.SkSL::ConstructorSplat", %"class.SkSL::ConstructorSplat"* %14, i64 0, i32 0, i32 0, i32 0
  %950 = call fastcc %"class.SkSL::Expression"* @_ZN4SkSLL15simplify_vectorIlmEENSt3__110unique_ptrINS_10ExpressionENS1_14default_deleteIS3_EEEERKNS_7ContextERKS3_NS_8OperatorESB_(%"class.SkSL::Context"* dereferenceable(744) %0, %"class.SkSL::Expression"* dereferenceable(24) %95, i32 %3, %"class.SkSL::Expression"* nonnull dereferenceable(24) %949)
  %951 = ptrtoint %"class.SkSL::Expression"* %950 to i64
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN4SkSL25SingleArgumentConstructorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %941, align 8
  %952 = getelementptr inbounds %"class.SkSL::ConstructorSplat", %"class.SkSL::ConstructorSplat"* %14, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %953 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %952, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %952, align 8
  %954 = icmp eq %"class.SkSL::Expression"* %953, null
  br i1 %954, label %960, label %955

955:                                              ; preds = %927
  %956 = bitcast %"class.SkSL::Expression"* %953 to void (%"class.SkSL::Expression"*)***
  %957 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %956, align 8
  %958 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %957, i64 1
  %959 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %958, align 8
  call void %959(%"class.SkSL::Expression"* nonnull %953) #10
  br label %960

960:                                              ; preds = %955, %927
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN4SkSL14AnyConstructorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %941, align 8
  %961 = getelementptr inbounds %"class.SkSL::ConstructorSplat", %"class.SkSL::ConstructorSplat"* %14, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %962 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %961, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %961, align 8
  %963 = icmp eq %"class.SkSL::Expression"* %962, null
  br i1 %963, label %969, label %964

964:                                              ; preds = %960
  %965 = bitcast %"class.SkSL::Expression"* %962 to void (%"class.SkSL::Expression"*)***
  %966 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %965, align 8
  %967 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %966, i64 1
  %968 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %967, align 8
  call void %968(%"class.SkSL::Expression"* nonnull %962) #10
  br label %969

969:                                              ; preds = %960, %964
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %928) #10
  br label %1116

970:                                              ; preds = %832, %865, %862
  %971 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %318, i64 0, i32 3
  %972 = load i32, i32* %971, align 8
  %973 = icmp eq i32 %972, 11
  br i1 %973, label %974, label %1081

974:                                              ; preds = %970
  %975 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %318, i64 0, i32 6
  %976 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %975, align 8
  %977 = icmp eq %"class.SkSL::Type"* %976, null
  %978 = select i1 %977, %"class.SkSL::Type"* %318, %"class.SkSL::Type"* %976
  %979 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %979) #10
  %980 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %978, i64 0, i32 0, i32 1, i32 0
  %981 = bitcast i8** %980 to <2 x i64>*
  %982 = load <2 x i64>, <2 x i64>* %981, align 8
  store <2 x i64> %982, <2 x i64>* %11, align 16
  %983 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %313, i64 0, i32 0, i32 1, i32 0
  %984 = load i8*, i8** %983, align 8
  %985 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %313, i64 0, i32 0, i32 1, i32 1
  %986 = load i64, i64* %985, align 8
  %987 = call zeroext i1 @_ZNK4SkSL14StringFragmenteqES0_(%"struct.SkSL::StringFragment"* nonnull %12, i8* %984, i64 %986) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %979) #10
  br i1 %987, label %988, label %1081

988:                                              ; preds = %974
  %989 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %313, i64 0, i32 4
  %990 = load i32, i32* %989, align 4
  %991 = icmp eq i32 %990, 0
  br i1 %991, label %992, label %1035

992:                                              ; preds = %988
  %993 = bitcast %"class.SkSL::ConstructorSplat"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %993) #10
  %994 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %314, align 8
  %995 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %994, i64 3
  %996 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %995, align 8
  %997 = call dereferenceable(184) %"class.SkSL::Type"* %996(%"class.SkSL::Expression"* %94) #10
  %998 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %95, i64 0, i32 0, i32 1
  %999 = load i32, i32* %998, align 8, !noalias !9
  %1000 = bitcast %"class.SkSL::Expression"* %95 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)***
  %1001 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*** %1000, align 8, !noalias !9
  %1002 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %1001, i64 10
  %1003 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %1002, align 8, !noalias !9
  %1004 = call %"class.SkSL::Expression"* %1003(%"class.SkSL::Expression"* %95) #10, !noalias !9
  %1005 = ptrtoint %"class.SkSL::Expression"* %1004 to i64
  %1006 = getelementptr inbounds %"class.SkSL::ConstructorSplat", %"class.SkSL::ConstructorSplat"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %1007 = getelementptr inbounds %"class.SkSL::ConstructorSplat", %"class.SkSL::ConstructorSplat"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i32 %999, i32* %1007, align 8, !alias.scope !9
  %1008 = getelementptr inbounds %"class.SkSL::ConstructorSplat", %"class.SkSL::ConstructorSplat"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i32 39, i32* %1008, align 4, !alias.scope !9
  %1009 = getelementptr inbounds %"class.SkSL::ConstructorSplat", %"class.SkSL::ConstructorSplat"* %15, i64 0, i32 0, i32 0, i32 0, i32 1
  store %"class.SkSL::Type"* %997, %"class.SkSL::Type"** %1009, align 8, !alias.scope !9
  %1010 = getelementptr inbounds %"class.SkSL::ConstructorSplat", %"class.SkSL::ConstructorSplat"* %15, i64 0, i32 0, i32 0, i32 1
  %1011 = bitcast %"class.std::__1::unique_ptr.38"* %1010 to i64*
  store i64 0, i64* %1011, align 8, !alias.scope !9
  %1012 = getelementptr inbounds %"class.SkSL::ConstructorSplat", %"class.SkSL::ConstructorSplat"* %15, i64 0, i32 0, i32 1
  %1013 = bitcast %"class.std::__1::unique_ptr.38"* %1012 to i64*
  store i64 %1005, i64* %1013, align 8, !alias.scope !9
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN4SkSL16ConstructorSplatE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1006, align 8, !alias.scope !9
  %1014 = getelementptr inbounds %"class.SkSL::ConstructorSplat", %"class.SkSL::ConstructorSplat"* %15, i64 0, i32 0, i32 0, i32 0
  %1015 = call fastcc %"class.SkSL::Expression"* @_ZN4SkSLL15simplify_vectorIffEENSt3__110unique_ptrINS_10ExpressionENS1_14default_deleteIS3_EEEERKNS_7ContextERKS3_NS_8OperatorESB_(%"class.SkSL::Context"* dereferenceable(744) %0, %"class.SkSL::Expression"* nonnull dereferenceable(24) %1014, i32 %3, %"class.SkSL::Expression"* dereferenceable(24) %94)
  %1016 = ptrtoint %"class.SkSL::Expression"* %1015 to i64
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN4SkSL25SingleArgumentConstructorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1006, align 8
  %1017 = getelementptr inbounds %"class.SkSL::ConstructorSplat", %"class.SkSL::ConstructorSplat"* %15, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %1018 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %1017, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %1017, align 8
  %1019 = icmp eq %"class.SkSL::Expression"* %1018, null
  br i1 %1019, label %1025, label %1020

1020:                                             ; preds = %992
  %1021 = bitcast %"class.SkSL::Expression"* %1018 to void (%"class.SkSL::Expression"*)***
  %1022 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %1021, align 8
  %1023 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %1022, i64 1
  %1024 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %1023, align 8
  call void %1024(%"class.SkSL::Expression"* nonnull %1018) #10
  br label %1025

1025:                                             ; preds = %1020, %992
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN4SkSL14AnyConstructorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1006, align 8
  %1026 = getelementptr inbounds %"class.SkSL::ConstructorSplat", %"class.SkSL::ConstructorSplat"* %15, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %1027 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %1026, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %1026, align 8
  %1028 = icmp eq %"class.SkSL::Expression"* %1027, null
  br i1 %1028, label %1034, label %1029

1029:                                             ; preds = %1025
  %1030 = bitcast %"class.SkSL::Expression"* %1027 to void (%"class.SkSL::Expression"*)***
  %1031 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %1030, align 8
  %1032 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %1031, i64 1
  %1033 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %1032, align 8
  call void %1033(%"class.SkSL::Expression"* nonnull %1027) #10
  br label %1034

1034:                                             ; preds = %1025, %1029
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %993) #10
  br label %1116

1035:                                             ; preds = %988
  %1036 = add i32 %990, -1
  %1037 = icmp ult i32 %1036, 2
  br i1 %1037, label %1038, label %1116

1038:                                             ; preds = %1035
  %1039 = bitcast %"class.SkSL::ConstructorSplat"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %1039) #10
  %1040 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %314, align 8
  %1041 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %1040, i64 3
  %1042 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %1041, align 8
  %1043 = call dereferenceable(184) %"class.SkSL::Type"* %1042(%"class.SkSL::Expression"* %94) #10
  %1044 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %95, i64 0, i32 0, i32 1
  %1045 = load i32, i32* %1044, align 8, !noalias !12
  %1046 = bitcast %"class.SkSL::Expression"* %95 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)***
  %1047 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*** %1046, align 8, !noalias !12
  %1048 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %1047, i64 10
  %1049 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %1048, align 8, !noalias !12
  %1050 = call %"class.SkSL::Expression"* %1049(%"class.SkSL::Expression"* %95) #10, !noalias !12
  %1051 = ptrtoint %"class.SkSL::Expression"* %1050 to i64
  %1052 = getelementptr inbounds %"class.SkSL::ConstructorSplat", %"class.SkSL::ConstructorSplat"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %1053 = getelementptr inbounds %"class.SkSL::ConstructorSplat", %"class.SkSL::ConstructorSplat"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i32 %1045, i32* %1053, align 8, !alias.scope !12
  %1054 = getelementptr inbounds %"class.SkSL::ConstructorSplat", %"class.SkSL::ConstructorSplat"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i32 39, i32* %1054, align 4, !alias.scope !12
  %1055 = getelementptr inbounds %"class.SkSL::ConstructorSplat", %"class.SkSL::ConstructorSplat"* %16, i64 0, i32 0, i32 0, i32 0, i32 1
  store %"class.SkSL::Type"* %1043, %"class.SkSL::Type"** %1055, align 8, !alias.scope !12
  %1056 = getelementptr inbounds %"class.SkSL::ConstructorSplat", %"class.SkSL::ConstructorSplat"* %16, i64 0, i32 0, i32 0, i32 1
  %1057 = bitcast %"class.std::__1::unique_ptr.38"* %1056 to i64*
  store i64 0, i64* %1057, align 8, !alias.scope !12
  %1058 = getelementptr inbounds %"class.SkSL::ConstructorSplat", %"class.SkSL::ConstructorSplat"* %16, i64 0, i32 0, i32 1
  %1059 = bitcast %"class.std::__1::unique_ptr.38"* %1058 to i64*
  store i64 %1051, i64* %1059, align 8, !alias.scope !12
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN4SkSL16ConstructorSplatE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1052, align 8, !alias.scope !12
  %1060 = getelementptr inbounds %"class.SkSL::ConstructorSplat", %"class.SkSL::ConstructorSplat"* %16, i64 0, i32 0, i32 0, i32 0
  %1061 = call fastcc %"class.SkSL::Expression"* @_ZN4SkSLL15simplify_vectorIlmEENSt3__110unique_ptrINS_10ExpressionENS1_14default_deleteIS3_EEEERKNS_7ContextERKS3_NS_8OperatorESB_(%"class.SkSL::Context"* dereferenceable(744) %0, %"class.SkSL::Expression"* nonnull dereferenceable(24) %1060, i32 %3, %"class.SkSL::Expression"* dereferenceable(24) %94)
  %1062 = ptrtoint %"class.SkSL::Expression"* %1061 to i64
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN4SkSL25SingleArgumentConstructorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1052, align 8
  %1063 = getelementptr inbounds %"class.SkSL::ConstructorSplat", %"class.SkSL::ConstructorSplat"* %16, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %1064 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %1063, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %1063, align 8
  %1065 = icmp eq %"class.SkSL::Expression"* %1064, null
  br i1 %1065, label %1071, label %1066

1066:                                             ; preds = %1038
  %1067 = bitcast %"class.SkSL::Expression"* %1064 to void (%"class.SkSL::Expression"*)***
  %1068 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %1067, align 8
  %1069 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %1068, i64 1
  %1070 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %1069, align 8
  call void %1070(%"class.SkSL::Expression"* nonnull %1064) #10
  br label %1071

1071:                                             ; preds = %1066, %1038
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN4SkSL14AnyConstructorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1052, align 8
  %1072 = getelementptr inbounds %"class.SkSL::ConstructorSplat", %"class.SkSL::ConstructorSplat"* %16, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %1073 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %1072, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %1072, align 8
  %1074 = icmp eq %"class.SkSL::Expression"* %1073, null
  br i1 %1074, label %1080, label %1075

1075:                                             ; preds = %1071
  %1076 = bitcast %"class.SkSL::Expression"* %1073 to void (%"class.SkSL::Expression"*)***
  %1077 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %1076, align 8
  %1078 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %1077, i64 1
  %1079 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %1078, align 8
  call void %1079(%"class.SkSL::Expression"* nonnull %1073) #10
  br label %1080

1080:                                             ; preds = %1071, %1075
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %1039) #10
  br label %1116

1081:                                             ; preds = %974, %970
  %1082 = load i32, i32* %319, align 8
  switch i32 %1082, label %1116 [
    i32 4, label %1083
    i32 0, label %1086
  ]

1083:                                             ; preds = %1081
  %1084 = load i32, i32* %971, align 8
  %1085 = icmp eq i32 %1084, 4
  br i1 %1085, label %1089, label %1116

1086:                                             ; preds = %1081
  %1087 = load i32, i32* %971, align 8
  %1088 = icmp eq i32 %1087, 0
  br i1 %1088, label %1089, label %1116

1089:                                             ; preds = %1086, %1083
  switch i32 %3, label %1116 [
    i32 65, label %1091
    i32 66, label %1090
  ]

1090:                                             ; preds = %1089
  br label %1091

1091:                                             ; preds = %1089, %1090
  %1092 = phi i8 [ 0, %1090 ], [ 1, %1089 ]
  %1093 = bitcast %"class.SkSL::Expression"* %95 to i32 (%"class.SkSL::Expression"*, %"class.SkSL::Expression"*)***
  %1094 = load i32 (%"class.SkSL::Expression"*, %"class.SkSL::Expression"*)**, i32 (%"class.SkSL::Expression"*, %"class.SkSL::Expression"*)*** %1093, align 8
  %1095 = getelementptr inbounds i32 (%"class.SkSL::Expression"*, %"class.SkSL::Expression"*)*, i32 (%"class.SkSL::Expression"*, %"class.SkSL::Expression"*)** %1094, i64 5
  %1096 = load i32 (%"class.SkSL::Expression"*, %"class.SkSL::Expression"*)*, i32 (%"class.SkSL::Expression"*, %"class.SkSL::Expression"*)** %1095, align 8
  %1097 = call i32 %1096(%"class.SkSL::Expression"* %95, %"class.SkSL::Expression"* dereferenceable(24) %94) #10
  switch i32 %1097, label %1116 [
    i32 0, label %1098
    i32 1, label %1100
  ]

1098:                                             ; preds = %1091
  %1099 = xor i8 %1092, 1
  br label %1100

1100:                                             ; preds = %1098, %1091
  %1101 = phi i8 [ %1092, %1091 ], [ %1099, %1098 ]
  %1102 = and i8 %1101, 1
  %1103 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 0, i32 24, i32 0, i32 0, i32 0
  %1104 = bitcast %"class.SkSL::Type"** %1103 to i64*
  %1105 = load i64, i64* %1104, align 8
  %1106 = call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #10
  %1107 = bitcast i8* %1106 to i32 (...)***
  %1108 = getelementptr inbounds i8, i8* %1106, i64 8
  %1109 = bitcast i8* %1108 to i32*
  store i32 %1, i32* %1109, align 8
  %1110 = getelementptr inbounds i8, i8* %1106, i64 12
  %1111 = bitcast i8* %1110 to i32*
  store i32 31, i32* %1111, align 4
  %1112 = getelementptr inbounds i8, i8* %1106, i64 16
  %1113 = bitcast i8* %1112 to i64*
  store i64 %1105, i64* %1113, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIbEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1107, align 8
  %1114 = getelementptr inbounds i8, i8* %1106, i64 24
  store i8 %1102, i8* %1114, align 8
  %1115 = ptrtoint i8* %1106 to i64
  br label %1116

1116:                                             ; preds = %394, %735, %731, %718, %714, %701, %697, %684, %680, %259, %244, %1081, %1083, %1086, %1091, %1089, %1035, %924, %856, %673, %415, %398, %404, %130, %853, %859, %923, %969, %1034, %1080, %667, %653, %648, %634, %618, %604, %590, %576, %562, %548, %534, %520, %506, %492, %489, %471, %468, %450, %436, %422, %818, %804, %790, %776, %762, %748, %1100, %147, %305, %287, %269, %241, %195, %111, %102
  %1117 = phi i64 [ %117, %111 ], [ %162, %147 ], [ %197, %195 ], [ %243, %241 ], [ %284, %269 ], [ %302, %287 ], [ 0, %305 ], [ %666, %653 ], [ 0, %667 ], [ %647, %634 ], [ 0, %648 ], [ %631, %618 ], [ %617, %604 ], [ %603, %590 ], [ %589, %576 ], [ %575, %562 ], [ %561, %548 ], [ %547, %534 ], [ %533, %520 ], [ %519, %506 ], [ 0, %489 ], [ %505, %492 ], [ 0, %468 ], [ %484, %471 ], [ %463, %450 ], [ %449, %436 ], [ %435, %422 ], [ %831, %818 ], [ %817, %804 ], [ %803, %790 ], [ %789, %776 ], [ %775, %762 ], [ %761, %748 ], [ %855, %853 ], [ %861, %859 ], [ %905, %923 ], [ %951, %969 ], [ %1016, %1034 ], [ %1062, %1080 ], [ %1115, %1100 ], [ %396, %394 ], [ %108, %102 ], [ 0, %130 ], [ 0, %404 ], [ 0, %398 ], [ 0, %415 ], [ 0, %673 ], [ 0, %856 ], [ 0, %924 ], [ 0, %1035 ], [ 0, %1089 ], [ 0, %1091 ], [ 0, %1086 ], [ 0, %1083 ], [ 0, %1081 ], [ %265, %259 ], [ 0, %244 ], [ %696, %684 ], [ 0, %680 ], [ %713, %701 ], [ 0, %697 ], [ %730, %718 ], [ 0, %714 ], [ %747, %735 ], [ 0, %731 ]
  %1118 = inttoptr i64 %1117 to %"class.SkSL::Expression"*
  ret %"class.SkSL::Expression"* %1118
}

declare zeroext i1 @_ZN4SkSL8Analysis20IsSameExpressionTreeERKNS_10ExpressionES3_(%"class.SkSL::Expression"* dereferenceable(24), %"class.SkSL::Expression"* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc %"class.SkSL::Expression"* @_ZN4SkSLL15simplify_vectorIffEENSt3__110unique_ptrINS_10ExpressionENS1_14default_deleteIS3_EEEERKNS_7ContextERKS3_NS_8OperatorESB_(%"class.SkSL::Context"* dereferenceable(744), %"class.SkSL::Expression"* dereferenceable(24), i32, %"class.SkSL::Expression"* dereferenceable(24)) unnamed_addr #0 {
  %5 = alloca %class.SkSTArray, align 8
  %6 = alloca %class.SkSTArray, align 8
  %7 = alloca %class.SkSTArray, align 8
  %8 = alloca %class.SkSTArray, align 8
  %9 = alloca %class.SkSTArray, align 8
  %10 = alloca %class.SkSTArray, align 8
  %11 = alloca %class.SkSTArray, align 8
  %12 = alloca %class.SkSTArray, align 8
  %13 = bitcast %"class.SkSL::Expression"* %1 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %14 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %13, align 8
  %15 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %14, i64 3
  %16 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %15, align 8
  %17 = tail call dereferenceable(184) %"class.SkSL::Type"* %16(%"class.SkSL::Expression"* %1) #10
  %18 = icmp eq i32 %2, 65
  switch i32 %2, label %609 [
    i32 66, label %19
    i32 65, label %19
    i32 46, label %45
    i32 47, label %186
    i32 48, label %327
    i32 49, label %468
  ]

19:                                               ; preds = %4, %4
  %20 = bitcast %"class.SkSL::Expression"* %1 to i32 (%"class.SkSL::Expression"*, %"class.SkSL::Expression"*)***
  %21 = load i32 (%"class.SkSL::Expression"*, %"class.SkSL::Expression"*)**, i32 (%"class.SkSL::Expression"*, %"class.SkSL::Expression"*)*** %20, align 8
  %22 = getelementptr inbounds i32 (%"class.SkSL::Expression"*, %"class.SkSL::Expression"*)*, i32 (%"class.SkSL::Expression"*, %"class.SkSL::Expression"*)** %21, i64 5
  %23 = load i32 (%"class.SkSL::Expression"*, %"class.SkSL::Expression"*)*, i32 (%"class.SkSL::Expression"*, %"class.SkSL::Expression"*)** %22, align 8
  %24 = tail call i32 %23(%"class.SkSL::Expression"* %1, %"class.SkSL::Expression"* dereferenceable(24) %3) #10
  switch i32 %24, label %609 [
    i32 0, label %25
    i32 1, label %27
  ]

25:                                               ; preds = %19
  %26 = xor i1 %18, true
  br label %27

27:                                               ; preds = %25, %19
  %28 = phi i1 [ %18, %19 ], [ %26, %25 ]
  %29 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 1
  %30 = load i32, i32* %29, align 8
  %31 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 0, i32 24, i32 0, i32 0, i32 0
  %32 = bitcast %"class.SkSL::Type"** %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #10
  %35 = zext i1 %28 to i8
  %36 = bitcast i8* %34 to i32 (...)***
  %37 = getelementptr inbounds i8, i8* %34, i64 8
  %38 = bitcast i8* %37 to i32*
  store i32 %30, i32* %38, align 8
  %39 = getelementptr inbounds i8, i8* %34, i64 12
  %40 = bitcast i8* %39 to i32*
  store i32 31, i32* %40, align 4
  %41 = getelementptr inbounds i8, i8* %34, i64 16
  %42 = bitcast i8* %41 to i64*
  store i64 %33, i64* %42, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIbEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %36, align 8
  %43 = getelementptr inbounds i8, i8* %34, i64 24
  store i8 %35, i8* %43, align 8
  %44 = ptrtoint i8* %34 to i64
  br label %609

45:                                               ; preds = %4
  %46 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %10, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %46)
  %47 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %17, i64 0, i32 6
  %48 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %47, align 8
  %49 = icmp eq %"class.SkSL::Type"* %48, null
  %50 = select i1 %49, %"class.SkSL::Type"* %17, %"class.SkSL::Type"* %48
  %51 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %9, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %51) #10
  %52 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %9, i64 0, i32 0, i32 0, i64 16
  %53 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %9, i64 0, i32 0, i32 0, i64 24
  %54 = bitcast i8* %53 to i64*
  %55 = bitcast i8* %52 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %51, i8 -86, i64 16, i1 false) #10
  store i8* %51, i8** %55, align 8
  store i64 17179869184, i64* %54, align 8
  %56 = bitcast i8* %52 to %class.SkTArray*
  %57 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %17, i64 0, i32 8
  %58 = load i32, i32* %57, align 8
  %59 = icmp sgt i32 %58, 0
  br i1 %59, label %61, label %60

60:                                               ; preds = %45
  store i64 17179869184, i64* %54, align 8
  br label %75

61:                                               ; preds = %45
  call void @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL10ExpressionENS0_14default_deleteIS3_EEEELb0EE12checkReallocEiNS7_11ReallocTypeE(%class.SkTArray* %56, i32 %58, i32 0) #10
  %62 = load i64, i64* %54, align 8
  %63 = shl i64 %62, 32
  %64 = and i64 %63, 4294967296
  %65 = and i64 %62, -4294967297
  %66 = or i64 %64, %65
  store i64 %66, i64* %54, align 8
  %67 = load i32, i32* %57, align 8
  %68 = icmp sgt i32 %67, 0
  br i1 %68, label %69, label %75

69:                                               ; preds = %61
  %70 = ptrtoint %"class.SkSL::Type"* %50 to i64
  %71 = bitcast i8* %52 to %"class.std::__1::unique_ptr.38"**
  %72 = bitcast %"class.SkSL::Expression"* %1 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)***
  %73 = bitcast %"class.SkSL::Expression"* %3 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)***
  %74 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 1
  br label %142

75:                                               ; preds = %142, %61, %60
  %76 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 1
  %77 = load i32, i32* %76, align 8
  %78 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %10, i64 0, i32 0, i32 0, i64 16
  %79 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %10, i64 0, i32 0, i32 0, i64 24
  %80 = bitcast i8* %79 to i64*
  %81 = bitcast i8* %78 to i8**
  store i8* %46, i8** %81, align 8
  store i64 17179869184, i64* %80, align 8
  %82 = bitcast i8* %78 to %class.SkTArray*
  %83 = call dereferenceable(16) %class.SkTArray* @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL10ExpressionENS0_14default_deleteIS3_EEEELb0EEaSEOS7_(%class.SkTArray* %82, %class.SkTArray* dereferenceable(16) %56) #10
  %84 = call %"class.SkSL::Expression"* @_ZN4SkSL19ConstructorCompound4MakeERKNS_7ContextEiRKNS_4TypeE9SkSTArrayILi2ENSt3__110unique_ptrINS_10ExpressionENS8_14default_deleteISA_EEEELb0EE(%"class.SkSL::Context"* dereferenceable(744) %0, i32 %77, %"class.SkSL::Type"* dereferenceable(184) %17, %class.SkSTArray* nonnull %10) #10
  %85 = load i64, i64* %80, align 8
  %86 = and i64 %85, 4294967294
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %90, label %88

88:                                               ; preds = %75
  %89 = bitcast i8* %78 to %"class.std::__1::unique_ptr.38"**
  br label %94

90:                                               ; preds = %105, %75
  %91 = phi i64 [ %85, %75 ], [ %107, %105 ]
  %92 = and i64 %91, 1
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %113, label %111

94:                                               ; preds = %105, %88
  %95 = phi i64 [ 0, %88 ], [ %106, %105 ]
  %96 = load %"class.std::__1::unique_ptr.38"*, %"class.std::__1::unique_ptr.38"** %89, align 8
  %97 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %96, i64 %95, i32 0, i32 0, i32 0
  %98 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %97, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %97, align 8
  %99 = icmp eq %"class.SkSL::Expression"* %98, null
  br i1 %99, label %105, label %100

100:                                              ; preds = %94
  %101 = bitcast %"class.SkSL::Expression"* %98 to void (%"class.SkSL::Expression"*)***
  %102 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %101, align 8
  %103 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %102, i64 1
  %104 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %103, align 8
  call void %104(%"class.SkSL::Expression"* nonnull %98) #10
  br label %105

105:                                              ; preds = %100, %94
  %106 = add nuw nsw i64 %95, 1
  %107 = load i64, i64* %80, align 8
  %108 = lshr i64 %107, 1
  %109 = and i64 %108, 2147483647
  %110 = icmp ult i64 %106, %109
  br i1 %110, label %94, label %90

111:                                              ; preds = %90
  %112 = load i8*, i8** %81, align 8
  call void @_Z7sk_freePv(i8* %112) #10
  br label %113

113:                                              ; preds = %111, %90
  %114 = load i64, i64* %54, align 8
  %115 = and i64 %114, 4294967294
  %116 = icmp eq i64 %115, 0
  br i1 %116, label %119, label %117

117:                                              ; preds = %113
  %118 = bitcast i8* %52 to %"class.std::__1::unique_ptr.38"**
  br label %123

119:                                              ; preds = %134, %113
  %120 = phi i64 [ %114, %113 ], [ %136, %134 ]
  %121 = and i64 %120, 1
  %122 = icmp eq i64 %121, 0
  br i1 %122, label %184, label %140

123:                                              ; preds = %134, %117
  %124 = phi i64 [ 0, %117 ], [ %135, %134 ]
  %125 = load %"class.std::__1::unique_ptr.38"*, %"class.std::__1::unique_ptr.38"** %118, align 8
  %126 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %125, i64 %124, i32 0, i32 0, i32 0
  %127 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %126, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %126, align 8
  %128 = icmp eq %"class.SkSL::Expression"* %127, null
  br i1 %128, label %134, label %129

129:                                              ; preds = %123
  %130 = bitcast %"class.SkSL::Expression"* %127 to void (%"class.SkSL::Expression"*)***
  %131 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %130, align 8
  %132 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %131, i64 1
  %133 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %132, align 8
  call void %133(%"class.SkSL::Expression"* nonnull %127) #10
  br label %134

134:                                              ; preds = %129, %123
  %135 = add nuw nsw i64 %124, 1
  %136 = load i64, i64* %54, align 8
  %137 = lshr i64 %136, 1
  %138 = and i64 %137, 2147483647
  %139 = icmp ult i64 %135, %138
  br i1 %139, label %123, label %119

140:                                              ; preds = %119
  %141 = load i8*, i8** %55, align 8
  call void @_Z7sk_freePv(i8* %141) #10
  br label %184

142:                                              ; preds = %142, %69
  %143 = phi i32 [ 0, %69 ], [ %181, %142 ]
  %144 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*** %72, align 8
  %145 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)** %144, i64 9
  %146 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)** %145, align 8
  %147 = call %"class.SkSL::Expression"* %146(%"class.SkSL::Expression"* %1, i32 %143) #10
  %148 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %147, i64 1
  %149 = bitcast %"class.SkSL::Expression"* %148 to float*
  %150 = load float, float* %149, align 8
  %151 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*** %73, align 8
  %152 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)** %151, i64 9
  %153 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)** %152, align 8
  %154 = call %"class.SkSL::Expression"* %153(%"class.SkSL::Expression"* %3, i32 %143) #10
  %155 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %154, i64 1
  %156 = bitcast %"class.SkSL::Expression"* %155 to float*
  %157 = load float, float* %156, align 8
  %158 = fadd float %150, %157
  %159 = load i32, i32* %74, align 8
  %160 = call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #10
  %161 = bitcast i8* %160 to i32 (...)***
  %162 = getelementptr inbounds i8, i8* %160, i64 8
  %163 = bitcast i8* %162 to i32*
  store i32 %159, i32* %163, align 8
  %164 = getelementptr inbounds i8, i8* %160, i64 12
  %165 = bitcast i8* %164 to i32*
  store i32 45, i32* %165, align 4
  %166 = getelementptr inbounds i8, i8* %160, i64 16
  %167 = bitcast i8* %166 to i64*
  store i64 %70, i64* %167, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIfEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %161, align 8
  %168 = getelementptr inbounds i8, i8* %160, i64 24
  %169 = bitcast i8* %168 to float*
  store float %158, float* %169, align 8
  %170 = ptrtoint i8* %160 to i64
  call void @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL10ExpressionENS0_14default_deleteIS3_EEEELb0EE12checkReallocEiNS7_11ReallocTypeE(%class.SkTArray* %56, i32 1, i32 1) #10
  %171 = load %"class.std::__1::unique_ptr.38"*, %"class.std::__1::unique_ptr.38"** %71, align 8
  %172 = load i64, i64* %54, align 8
  %173 = lshr i64 %172, 1
  %174 = and i64 %173, 2147483647
  %175 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %171, i64 %174
  %176 = add i64 %172, 2
  %177 = and i64 %176, 4294967294
  %178 = and i64 %172, -4294967295
  %179 = or i64 %177, %178
  store i64 %179, i64* %54, align 8
  %180 = bitcast %"class.std::__1::unique_ptr.38"* %175 to i64*
  store i64 %170, i64* %180, align 8
  %181 = add nuw nsw i32 %143, 1
  %182 = load i32, i32* %57, align 8
  %183 = icmp slt i32 %181, %182
  br i1 %183, label %142, label %75

184:                                              ; preds = %119, %140
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %51) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %46)
  %185 = ptrtoint %"class.SkSL::Expression"* %84 to i64
  br label %609

186:                                              ; preds = %4
  %187 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %8, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %187)
  %188 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %17, i64 0, i32 6
  %189 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %188, align 8
  %190 = icmp eq %"class.SkSL::Type"* %189, null
  %191 = select i1 %190, %"class.SkSL::Type"* %17, %"class.SkSL::Type"* %189
  %192 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %7, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %192) #10
  %193 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %7, i64 0, i32 0, i32 0, i64 16
  %194 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %7, i64 0, i32 0, i32 0, i64 24
  %195 = bitcast i8* %194 to i64*
  %196 = bitcast i8* %193 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %192, i8 -86, i64 16, i1 false) #10
  store i8* %192, i8** %196, align 8
  store i64 17179869184, i64* %195, align 8
  %197 = bitcast i8* %193 to %class.SkTArray*
  %198 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %17, i64 0, i32 8
  %199 = load i32, i32* %198, align 8
  %200 = icmp sgt i32 %199, 0
  br i1 %200, label %202, label %201

201:                                              ; preds = %186
  store i64 17179869184, i64* %195, align 8
  br label %216

202:                                              ; preds = %186
  call void @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL10ExpressionENS0_14default_deleteIS3_EEEELb0EE12checkReallocEiNS7_11ReallocTypeE(%class.SkTArray* %197, i32 %199, i32 0) #10
  %203 = load i64, i64* %195, align 8
  %204 = shl i64 %203, 32
  %205 = and i64 %204, 4294967296
  %206 = and i64 %203, -4294967297
  %207 = or i64 %205, %206
  store i64 %207, i64* %195, align 8
  %208 = load i32, i32* %198, align 8
  %209 = icmp sgt i32 %208, 0
  br i1 %209, label %210, label %216

210:                                              ; preds = %202
  %211 = ptrtoint %"class.SkSL::Type"* %191 to i64
  %212 = bitcast i8* %193 to %"class.std::__1::unique_ptr.38"**
  %213 = bitcast %"class.SkSL::Expression"* %1 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)***
  %214 = bitcast %"class.SkSL::Expression"* %3 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)***
  %215 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 1
  br label %283

216:                                              ; preds = %283, %202, %201
  %217 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 1
  %218 = load i32, i32* %217, align 8
  %219 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %8, i64 0, i32 0, i32 0, i64 16
  %220 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %8, i64 0, i32 0, i32 0, i64 24
  %221 = bitcast i8* %220 to i64*
  %222 = bitcast i8* %219 to i8**
  store i8* %187, i8** %222, align 8
  store i64 17179869184, i64* %221, align 8
  %223 = bitcast i8* %219 to %class.SkTArray*
  %224 = call dereferenceable(16) %class.SkTArray* @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL10ExpressionENS0_14default_deleteIS3_EEEELb0EEaSEOS7_(%class.SkTArray* %223, %class.SkTArray* dereferenceable(16) %197) #10
  %225 = call %"class.SkSL::Expression"* @_ZN4SkSL19ConstructorCompound4MakeERKNS_7ContextEiRKNS_4TypeE9SkSTArrayILi2ENSt3__110unique_ptrINS_10ExpressionENS8_14default_deleteISA_EEEELb0EE(%"class.SkSL::Context"* dereferenceable(744) %0, i32 %218, %"class.SkSL::Type"* dereferenceable(184) %17, %class.SkSTArray* nonnull %8) #10
  %226 = load i64, i64* %221, align 8
  %227 = and i64 %226, 4294967294
  %228 = icmp eq i64 %227, 0
  br i1 %228, label %231, label %229

229:                                              ; preds = %216
  %230 = bitcast i8* %219 to %"class.std::__1::unique_ptr.38"**
  br label %235

231:                                              ; preds = %246, %216
  %232 = phi i64 [ %226, %216 ], [ %248, %246 ]
  %233 = and i64 %232, 1
  %234 = icmp eq i64 %233, 0
  br i1 %234, label %254, label %252

235:                                              ; preds = %246, %229
  %236 = phi i64 [ 0, %229 ], [ %247, %246 ]
  %237 = load %"class.std::__1::unique_ptr.38"*, %"class.std::__1::unique_ptr.38"** %230, align 8
  %238 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %237, i64 %236, i32 0, i32 0, i32 0
  %239 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %238, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %238, align 8
  %240 = icmp eq %"class.SkSL::Expression"* %239, null
  br i1 %240, label %246, label %241

241:                                              ; preds = %235
  %242 = bitcast %"class.SkSL::Expression"* %239 to void (%"class.SkSL::Expression"*)***
  %243 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %242, align 8
  %244 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %243, i64 1
  %245 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %244, align 8
  call void %245(%"class.SkSL::Expression"* nonnull %239) #10
  br label %246

246:                                              ; preds = %241, %235
  %247 = add nuw nsw i64 %236, 1
  %248 = load i64, i64* %221, align 8
  %249 = lshr i64 %248, 1
  %250 = and i64 %249, 2147483647
  %251 = icmp ult i64 %247, %250
  br i1 %251, label %235, label %231

252:                                              ; preds = %231
  %253 = load i8*, i8** %222, align 8
  call void @_Z7sk_freePv(i8* %253) #10
  br label %254

254:                                              ; preds = %252, %231
  %255 = load i64, i64* %195, align 8
  %256 = and i64 %255, 4294967294
  %257 = icmp eq i64 %256, 0
  br i1 %257, label %260, label %258

258:                                              ; preds = %254
  %259 = bitcast i8* %193 to %"class.std::__1::unique_ptr.38"**
  br label %264

260:                                              ; preds = %275, %254
  %261 = phi i64 [ %255, %254 ], [ %277, %275 ]
  %262 = and i64 %261, 1
  %263 = icmp eq i64 %262, 0
  br i1 %263, label %325, label %281

264:                                              ; preds = %275, %258
  %265 = phi i64 [ 0, %258 ], [ %276, %275 ]
  %266 = load %"class.std::__1::unique_ptr.38"*, %"class.std::__1::unique_ptr.38"** %259, align 8
  %267 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %266, i64 %265, i32 0, i32 0, i32 0
  %268 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %267, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %267, align 8
  %269 = icmp eq %"class.SkSL::Expression"* %268, null
  br i1 %269, label %275, label %270

270:                                              ; preds = %264
  %271 = bitcast %"class.SkSL::Expression"* %268 to void (%"class.SkSL::Expression"*)***
  %272 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %271, align 8
  %273 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %272, i64 1
  %274 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %273, align 8
  call void %274(%"class.SkSL::Expression"* nonnull %268) #10
  br label %275

275:                                              ; preds = %270, %264
  %276 = add nuw nsw i64 %265, 1
  %277 = load i64, i64* %195, align 8
  %278 = lshr i64 %277, 1
  %279 = and i64 %278, 2147483647
  %280 = icmp ult i64 %276, %279
  br i1 %280, label %264, label %260

281:                                              ; preds = %260
  %282 = load i8*, i8** %196, align 8
  call void @_Z7sk_freePv(i8* %282) #10
  br label %325

283:                                              ; preds = %283, %210
  %284 = phi i32 [ 0, %210 ], [ %322, %283 ]
  %285 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*** %213, align 8
  %286 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)** %285, i64 9
  %287 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)** %286, align 8
  %288 = call %"class.SkSL::Expression"* %287(%"class.SkSL::Expression"* %1, i32 %284) #10
  %289 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %288, i64 1
  %290 = bitcast %"class.SkSL::Expression"* %289 to float*
  %291 = load float, float* %290, align 8
  %292 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*** %214, align 8
  %293 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)** %292, i64 9
  %294 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)** %293, align 8
  %295 = call %"class.SkSL::Expression"* %294(%"class.SkSL::Expression"* %3, i32 %284) #10
  %296 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %295, i64 1
  %297 = bitcast %"class.SkSL::Expression"* %296 to float*
  %298 = load float, float* %297, align 8
  %299 = fsub float %291, %298
  %300 = load i32, i32* %215, align 8
  %301 = call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #10
  %302 = bitcast i8* %301 to i32 (...)***
  %303 = getelementptr inbounds i8, i8* %301, i64 8
  %304 = bitcast i8* %303 to i32*
  store i32 %300, i32* %304, align 8
  %305 = getelementptr inbounds i8, i8* %301, i64 12
  %306 = bitcast i8* %305 to i32*
  store i32 45, i32* %306, align 4
  %307 = getelementptr inbounds i8, i8* %301, i64 16
  %308 = bitcast i8* %307 to i64*
  store i64 %211, i64* %308, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIfEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %302, align 8
  %309 = getelementptr inbounds i8, i8* %301, i64 24
  %310 = bitcast i8* %309 to float*
  store float %299, float* %310, align 8
  %311 = ptrtoint i8* %301 to i64
  call void @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL10ExpressionENS0_14default_deleteIS3_EEEELb0EE12checkReallocEiNS7_11ReallocTypeE(%class.SkTArray* %197, i32 1, i32 1) #10
  %312 = load %"class.std::__1::unique_ptr.38"*, %"class.std::__1::unique_ptr.38"** %212, align 8
  %313 = load i64, i64* %195, align 8
  %314 = lshr i64 %313, 1
  %315 = and i64 %314, 2147483647
  %316 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %312, i64 %315
  %317 = add i64 %313, 2
  %318 = and i64 %317, 4294967294
  %319 = and i64 %313, -4294967295
  %320 = or i64 %318, %319
  store i64 %320, i64* %195, align 8
  %321 = bitcast %"class.std::__1::unique_ptr.38"* %316 to i64*
  store i64 %311, i64* %321, align 8
  %322 = add nuw nsw i32 %284, 1
  %323 = load i32, i32* %198, align 8
  %324 = icmp slt i32 %322, %323
  br i1 %324, label %283, label %216

325:                                              ; preds = %260, %281
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %192) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %187)
  %326 = ptrtoint %"class.SkSL::Expression"* %225 to i64
  br label %609

327:                                              ; preds = %4
  %328 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %6, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %328)
  %329 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %17, i64 0, i32 6
  %330 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %329, align 8
  %331 = icmp eq %"class.SkSL::Type"* %330, null
  %332 = select i1 %331, %"class.SkSL::Type"* %17, %"class.SkSL::Type"* %330
  %333 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %5, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %333) #10
  %334 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %5, i64 0, i32 0, i32 0, i64 16
  %335 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %5, i64 0, i32 0, i32 0, i64 24
  %336 = bitcast i8* %335 to i64*
  %337 = bitcast i8* %334 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %333, i8 -86, i64 16, i1 false) #10
  store i8* %333, i8** %337, align 8
  store i64 17179869184, i64* %336, align 8
  %338 = bitcast i8* %334 to %class.SkTArray*
  %339 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %17, i64 0, i32 8
  %340 = load i32, i32* %339, align 8
  %341 = icmp sgt i32 %340, 0
  br i1 %341, label %343, label %342

342:                                              ; preds = %327
  store i64 17179869184, i64* %336, align 8
  br label %357

343:                                              ; preds = %327
  call void @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL10ExpressionENS0_14default_deleteIS3_EEEELb0EE12checkReallocEiNS7_11ReallocTypeE(%class.SkTArray* %338, i32 %340, i32 0) #10
  %344 = load i64, i64* %336, align 8
  %345 = shl i64 %344, 32
  %346 = and i64 %345, 4294967296
  %347 = and i64 %344, -4294967297
  %348 = or i64 %346, %347
  store i64 %348, i64* %336, align 8
  %349 = load i32, i32* %339, align 8
  %350 = icmp sgt i32 %349, 0
  br i1 %350, label %351, label %357

351:                                              ; preds = %343
  %352 = ptrtoint %"class.SkSL::Type"* %332 to i64
  %353 = bitcast i8* %334 to %"class.std::__1::unique_ptr.38"**
  %354 = bitcast %"class.SkSL::Expression"* %1 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)***
  %355 = bitcast %"class.SkSL::Expression"* %3 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)***
  %356 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 1
  br label %424

357:                                              ; preds = %424, %343, %342
  %358 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 1
  %359 = load i32, i32* %358, align 8
  %360 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %6, i64 0, i32 0, i32 0, i64 16
  %361 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %6, i64 0, i32 0, i32 0, i64 24
  %362 = bitcast i8* %361 to i64*
  %363 = bitcast i8* %360 to i8**
  store i8* %328, i8** %363, align 8
  store i64 17179869184, i64* %362, align 8
  %364 = bitcast i8* %360 to %class.SkTArray*
  %365 = call dereferenceable(16) %class.SkTArray* @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL10ExpressionENS0_14default_deleteIS3_EEEELb0EEaSEOS7_(%class.SkTArray* %364, %class.SkTArray* dereferenceable(16) %338) #10
  %366 = call %"class.SkSL::Expression"* @_ZN4SkSL19ConstructorCompound4MakeERKNS_7ContextEiRKNS_4TypeE9SkSTArrayILi2ENSt3__110unique_ptrINS_10ExpressionENS8_14default_deleteISA_EEEELb0EE(%"class.SkSL::Context"* dereferenceable(744) %0, i32 %359, %"class.SkSL::Type"* dereferenceable(184) %17, %class.SkSTArray* nonnull %6) #10
  %367 = load i64, i64* %362, align 8
  %368 = and i64 %367, 4294967294
  %369 = icmp eq i64 %368, 0
  br i1 %369, label %372, label %370

370:                                              ; preds = %357
  %371 = bitcast i8* %360 to %"class.std::__1::unique_ptr.38"**
  br label %376

372:                                              ; preds = %387, %357
  %373 = phi i64 [ %367, %357 ], [ %389, %387 ]
  %374 = and i64 %373, 1
  %375 = icmp eq i64 %374, 0
  br i1 %375, label %395, label %393

376:                                              ; preds = %387, %370
  %377 = phi i64 [ 0, %370 ], [ %388, %387 ]
  %378 = load %"class.std::__1::unique_ptr.38"*, %"class.std::__1::unique_ptr.38"** %371, align 8
  %379 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %378, i64 %377, i32 0, i32 0, i32 0
  %380 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %379, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %379, align 8
  %381 = icmp eq %"class.SkSL::Expression"* %380, null
  br i1 %381, label %387, label %382

382:                                              ; preds = %376
  %383 = bitcast %"class.SkSL::Expression"* %380 to void (%"class.SkSL::Expression"*)***
  %384 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %383, align 8
  %385 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %384, i64 1
  %386 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %385, align 8
  call void %386(%"class.SkSL::Expression"* nonnull %380) #10
  br label %387

387:                                              ; preds = %382, %376
  %388 = add nuw nsw i64 %377, 1
  %389 = load i64, i64* %362, align 8
  %390 = lshr i64 %389, 1
  %391 = and i64 %390, 2147483647
  %392 = icmp ult i64 %388, %391
  br i1 %392, label %376, label %372

393:                                              ; preds = %372
  %394 = load i8*, i8** %363, align 8
  call void @_Z7sk_freePv(i8* %394) #10
  br label %395

395:                                              ; preds = %393, %372
  %396 = load i64, i64* %336, align 8
  %397 = and i64 %396, 4294967294
  %398 = icmp eq i64 %397, 0
  br i1 %398, label %401, label %399

399:                                              ; preds = %395
  %400 = bitcast i8* %334 to %"class.std::__1::unique_ptr.38"**
  br label %405

401:                                              ; preds = %416, %395
  %402 = phi i64 [ %396, %395 ], [ %418, %416 ]
  %403 = and i64 %402, 1
  %404 = icmp eq i64 %403, 0
  br i1 %404, label %466, label %422

405:                                              ; preds = %416, %399
  %406 = phi i64 [ 0, %399 ], [ %417, %416 ]
  %407 = load %"class.std::__1::unique_ptr.38"*, %"class.std::__1::unique_ptr.38"** %400, align 8
  %408 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %407, i64 %406, i32 0, i32 0, i32 0
  %409 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %408, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %408, align 8
  %410 = icmp eq %"class.SkSL::Expression"* %409, null
  br i1 %410, label %416, label %411

411:                                              ; preds = %405
  %412 = bitcast %"class.SkSL::Expression"* %409 to void (%"class.SkSL::Expression"*)***
  %413 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %412, align 8
  %414 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %413, i64 1
  %415 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %414, align 8
  call void %415(%"class.SkSL::Expression"* nonnull %409) #10
  br label %416

416:                                              ; preds = %411, %405
  %417 = add nuw nsw i64 %406, 1
  %418 = load i64, i64* %336, align 8
  %419 = lshr i64 %418, 1
  %420 = and i64 %419, 2147483647
  %421 = icmp ult i64 %417, %420
  br i1 %421, label %405, label %401

422:                                              ; preds = %401
  %423 = load i8*, i8** %337, align 8
  call void @_Z7sk_freePv(i8* %423) #10
  br label %466

424:                                              ; preds = %424, %351
  %425 = phi i32 [ 0, %351 ], [ %463, %424 ]
  %426 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*** %354, align 8
  %427 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)** %426, i64 9
  %428 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)** %427, align 8
  %429 = call %"class.SkSL::Expression"* %428(%"class.SkSL::Expression"* %1, i32 %425) #10
  %430 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %429, i64 1
  %431 = bitcast %"class.SkSL::Expression"* %430 to float*
  %432 = load float, float* %431, align 8
  %433 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*** %355, align 8
  %434 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)** %433, i64 9
  %435 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)** %434, align 8
  %436 = call %"class.SkSL::Expression"* %435(%"class.SkSL::Expression"* %3, i32 %425) #10
  %437 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %436, i64 1
  %438 = bitcast %"class.SkSL::Expression"* %437 to float*
  %439 = load float, float* %438, align 8
  %440 = fmul float %432, %439
  %441 = load i32, i32* %356, align 8
  %442 = call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #10
  %443 = bitcast i8* %442 to i32 (...)***
  %444 = getelementptr inbounds i8, i8* %442, i64 8
  %445 = bitcast i8* %444 to i32*
  store i32 %441, i32* %445, align 8
  %446 = getelementptr inbounds i8, i8* %442, i64 12
  %447 = bitcast i8* %446 to i32*
  store i32 45, i32* %447, align 4
  %448 = getelementptr inbounds i8, i8* %442, i64 16
  %449 = bitcast i8* %448 to i64*
  store i64 %352, i64* %449, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIfEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %443, align 8
  %450 = getelementptr inbounds i8, i8* %442, i64 24
  %451 = bitcast i8* %450 to float*
  store float %440, float* %451, align 8
  %452 = ptrtoint i8* %442 to i64
  call void @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL10ExpressionENS0_14default_deleteIS3_EEEELb0EE12checkReallocEiNS7_11ReallocTypeE(%class.SkTArray* %338, i32 1, i32 1) #10
  %453 = load %"class.std::__1::unique_ptr.38"*, %"class.std::__1::unique_ptr.38"** %353, align 8
  %454 = load i64, i64* %336, align 8
  %455 = lshr i64 %454, 1
  %456 = and i64 %455, 2147483647
  %457 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %453, i64 %456
  %458 = add i64 %454, 2
  %459 = and i64 %458, 4294967294
  %460 = and i64 %454, -4294967295
  %461 = or i64 %459, %460
  store i64 %461, i64* %336, align 8
  %462 = bitcast %"class.std::__1::unique_ptr.38"* %457 to i64*
  store i64 %452, i64* %462, align 8
  %463 = add nuw nsw i32 %425, 1
  %464 = load i32, i32* %339, align 8
  %465 = icmp slt i32 %463, %464
  br i1 %465, label %424, label %357

466:                                              ; preds = %401, %422
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %333) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %328)
  %467 = ptrtoint %"class.SkSL::Expression"* %366 to i64
  br label %609

468:                                              ; preds = %4
  %469 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %12, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %469)
  %470 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %17, i64 0, i32 6
  %471 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %470, align 8
  %472 = icmp eq %"class.SkSL::Type"* %471, null
  %473 = select i1 %472, %"class.SkSL::Type"* %17, %"class.SkSL::Type"* %471
  %474 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %11, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %474) #10
  %475 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %11, i64 0, i32 0, i32 0, i64 16
  %476 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %11, i64 0, i32 0, i32 0, i64 24
  %477 = bitcast i8* %476 to i64*
  %478 = bitcast i8* %475 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %474, i8 -86, i64 16, i1 false) #10
  store i8* %474, i8** %478, align 8
  store i64 17179869184, i64* %477, align 8
  %479 = bitcast i8* %475 to %class.SkTArray*
  %480 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %17, i64 0, i32 8
  %481 = load i32, i32* %480, align 8
  %482 = icmp sgt i32 %481, 0
  br i1 %482, label %484, label %483

483:                                              ; preds = %468
  store i64 17179869184, i64* %477, align 8
  br label %498

484:                                              ; preds = %468
  call void @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL10ExpressionENS0_14default_deleteIS3_EEEELb0EE12checkReallocEiNS7_11ReallocTypeE(%class.SkTArray* %479, i32 %481, i32 0) #10
  %485 = load i64, i64* %477, align 8
  %486 = shl i64 %485, 32
  %487 = and i64 %486, 4294967296
  %488 = and i64 %485, -4294967297
  %489 = or i64 %487, %488
  store i64 %489, i64* %477, align 8
  %490 = load i32, i32* %480, align 8
  %491 = icmp sgt i32 %490, 0
  br i1 %491, label %492, label %498

492:                                              ; preds = %484
  %493 = ptrtoint %"class.SkSL::Type"* %473 to i64
  %494 = bitcast i8* %475 to %"class.std::__1::unique_ptr.38"**
  %495 = bitcast %"class.SkSL::Expression"* %1 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)***
  %496 = bitcast %"class.SkSL::Expression"* %3 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)***
  %497 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 1
  br label %565

498:                                              ; preds = %565, %484, %483
  %499 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 1
  %500 = load i32, i32* %499, align 8
  %501 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %12, i64 0, i32 0, i32 0, i64 16
  %502 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %12, i64 0, i32 0, i32 0, i64 24
  %503 = bitcast i8* %502 to i64*
  %504 = bitcast i8* %501 to i8**
  store i8* %469, i8** %504, align 8
  store i64 17179869184, i64* %503, align 8
  %505 = bitcast i8* %501 to %class.SkTArray*
  %506 = call dereferenceable(16) %class.SkTArray* @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL10ExpressionENS0_14default_deleteIS3_EEEELb0EEaSEOS7_(%class.SkTArray* %505, %class.SkTArray* dereferenceable(16) %479) #10
  %507 = call %"class.SkSL::Expression"* @_ZN4SkSL19ConstructorCompound4MakeERKNS_7ContextEiRKNS_4TypeE9SkSTArrayILi2ENSt3__110unique_ptrINS_10ExpressionENS8_14default_deleteISA_EEEELb0EE(%"class.SkSL::Context"* dereferenceable(744) %0, i32 %500, %"class.SkSL::Type"* dereferenceable(184) %17, %class.SkSTArray* nonnull %12) #10
  %508 = load i64, i64* %503, align 8
  %509 = and i64 %508, 4294967294
  %510 = icmp eq i64 %509, 0
  br i1 %510, label %513, label %511

511:                                              ; preds = %498
  %512 = bitcast i8* %501 to %"class.std::__1::unique_ptr.38"**
  br label %517

513:                                              ; preds = %528, %498
  %514 = phi i64 [ %508, %498 ], [ %530, %528 ]
  %515 = and i64 %514, 1
  %516 = icmp eq i64 %515, 0
  br i1 %516, label %536, label %534

517:                                              ; preds = %528, %511
  %518 = phi i64 [ 0, %511 ], [ %529, %528 ]
  %519 = load %"class.std::__1::unique_ptr.38"*, %"class.std::__1::unique_ptr.38"** %512, align 8
  %520 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %519, i64 %518, i32 0, i32 0, i32 0
  %521 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %520, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %520, align 8
  %522 = icmp eq %"class.SkSL::Expression"* %521, null
  br i1 %522, label %528, label %523

523:                                              ; preds = %517
  %524 = bitcast %"class.SkSL::Expression"* %521 to void (%"class.SkSL::Expression"*)***
  %525 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %524, align 8
  %526 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %525, i64 1
  %527 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %526, align 8
  call void %527(%"class.SkSL::Expression"* nonnull %521) #10
  br label %528

528:                                              ; preds = %523, %517
  %529 = add nuw nsw i64 %518, 1
  %530 = load i64, i64* %503, align 8
  %531 = lshr i64 %530, 1
  %532 = and i64 %531, 2147483647
  %533 = icmp ult i64 %529, %532
  br i1 %533, label %517, label %513

534:                                              ; preds = %513
  %535 = load i8*, i8** %504, align 8
  call void @_Z7sk_freePv(i8* %535) #10
  br label %536

536:                                              ; preds = %534, %513
  %537 = load i64, i64* %477, align 8
  %538 = and i64 %537, 4294967294
  %539 = icmp eq i64 %538, 0
  br i1 %539, label %542, label %540

540:                                              ; preds = %536
  %541 = bitcast i8* %475 to %"class.std::__1::unique_ptr.38"**
  br label %546

542:                                              ; preds = %557, %536
  %543 = phi i64 [ %537, %536 ], [ %559, %557 ]
  %544 = and i64 %543, 1
  %545 = icmp eq i64 %544, 0
  br i1 %545, label %607, label %563

546:                                              ; preds = %557, %540
  %547 = phi i64 [ 0, %540 ], [ %558, %557 ]
  %548 = load %"class.std::__1::unique_ptr.38"*, %"class.std::__1::unique_ptr.38"** %541, align 8
  %549 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %548, i64 %547, i32 0, i32 0, i32 0
  %550 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %549, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %549, align 8
  %551 = icmp eq %"class.SkSL::Expression"* %550, null
  br i1 %551, label %557, label %552

552:                                              ; preds = %546
  %553 = bitcast %"class.SkSL::Expression"* %550 to void (%"class.SkSL::Expression"*)***
  %554 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %553, align 8
  %555 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %554, i64 1
  %556 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %555, align 8
  call void %556(%"class.SkSL::Expression"* nonnull %550) #10
  br label %557

557:                                              ; preds = %552, %546
  %558 = add nuw nsw i64 %547, 1
  %559 = load i64, i64* %477, align 8
  %560 = lshr i64 %559, 1
  %561 = and i64 %560, 2147483647
  %562 = icmp ult i64 %558, %561
  br i1 %562, label %546, label %542

563:                                              ; preds = %542
  %564 = load i8*, i8** %478, align 8
  call void @_Z7sk_freePv(i8* %564) #10
  br label %607

565:                                              ; preds = %565, %492
  %566 = phi i32 [ 0, %492 ], [ %604, %565 ]
  %567 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*** %495, align 8
  %568 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)** %567, i64 9
  %569 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)** %568, align 8
  %570 = call %"class.SkSL::Expression"* %569(%"class.SkSL::Expression"* %1, i32 %566) #10
  %571 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %570, i64 1
  %572 = bitcast %"class.SkSL::Expression"* %571 to float*
  %573 = load float, float* %572, align 8
  %574 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*** %496, align 8
  %575 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)** %574, i64 9
  %576 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)** %575, align 8
  %577 = call %"class.SkSL::Expression"* %576(%"class.SkSL::Expression"* %3, i32 %566) #10
  %578 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %577, i64 1
  %579 = bitcast %"class.SkSL::Expression"* %578 to float*
  %580 = load float, float* %579, align 8
  %581 = fdiv float %573, %580
  %582 = load i32, i32* %497, align 8
  %583 = call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #10
  %584 = bitcast i8* %583 to i32 (...)***
  %585 = getelementptr inbounds i8, i8* %583, i64 8
  %586 = bitcast i8* %585 to i32*
  store i32 %582, i32* %586, align 8
  %587 = getelementptr inbounds i8, i8* %583, i64 12
  %588 = bitcast i8* %587 to i32*
  store i32 45, i32* %588, align 4
  %589 = getelementptr inbounds i8, i8* %583, i64 16
  %590 = bitcast i8* %589 to i64*
  store i64 %493, i64* %590, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIfEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %584, align 8
  %591 = getelementptr inbounds i8, i8* %583, i64 24
  %592 = bitcast i8* %591 to float*
  store float %581, float* %592, align 8
  %593 = ptrtoint i8* %583 to i64
  call void @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL10ExpressionENS0_14default_deleteIS3_EEEELb0EE12checkReallocEiNS7_11ReallocTypeE(%class.SkTArray* %479, i32 1, i32 1) #10
  %594 = load %"class.std::__1::unique_ptr.38"*, %"class.std::__1::unique_ptr.38"** %494, align 8
  %595 = load i64, i64* %477, align 8
  %596 = lshr i64 %595, 1
  %597 = and i64 %596, 2147483647
  %598 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %594, i64 %597
  %599 = add i64 %595, 2
  %600 = and i64 %599, 4294967294
  %601 = and i64 %595, -4294967295
  %602 = or i64 %600, %601
  store i64 %602, i64* %477, align 8
  %603 = bitcast %"class.std::__1::unique_ptr.38"* %598 to i64*
  store i64 %593, i64* %603, align 8
  %604 = add nuw nsw i32 %566, 1
  %605 = load i32, i32* %480, align 8
  %606 = icmp slt i32 %604, %605
  br i1 %606, label %565, label %498

607:                                              ; preds = %542, %563
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %474) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %469)
  %608 = ptrtoint %"class.SkSL::Expression"* %507 to i64
  br label %609

609:                                              ; preds = %19, %4, %184, %325, %466, %607, %27
  %610 = phi i64 [ %44, %27 ], [ %608, %607 ], [ %467, %466 ], [ %326, %325 ], [ %185, %184 ], [ 0, %4 ], [ 0, %19 ]
  %611 = inttoptr i64 %610 to %"class.SkSL::Expression"*
  ret %"class.SkSL::Expression"* %611
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc %"class.SkSL::Expression"* @_ZN4SkSLL15simplify_vectorIlmEENSt3__110unique_ptrINS_10ExpressionENS1_14default_deleteIS3_EEEERKNS_7ContextERKS3_NS_8OperatorESB_(%"class.SkSL::Context"* dereferenceable(744), %"class.SkSL::Expression"* dereferenceable(24), i32, %"class.SkSL::Expression"* dereferenceable(24)) unnamed_addr #0 {
  %5 = alloca %class.SkSTArray, align 8
  %6 = alloca %class.SkSTArray, align 8
  %7 = alloca %class.SkSTArray, align 8
  %8 = alloca %class.SkSTArray, align 8
  %9 = alloca %class.SkSTArray, align 8
  %10 = alloca %class.SkSTArray, align 8
  %11 = alloca %class.SkSTArray, align 8
  %12 = alloca %class.SkSTArray, align 8
  %13 = bitcast %"class.SkSL::Expression"* %1 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %14 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %13, align 8
  %15 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %14, i64 3
  %16 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %15, align 8
  %17 = tail call dereferenceable(184) %"class.SkSL::Type"* %16(%"class.SkSL::Expression"* %1) #10
  %18 = icmp eq i32 %2, 65
  switch i32 %2, label %609 [
    i32 66, label %19
    i32 65, label %19
    i32 46, label %45
    i32 47, label %186
    i32 48, label %327
    i32 49, label %468
  ]

19:                                               ; preds = %4, %4
  %20 = bitcast %"class.SkSL::Expression"* %1 to i32 (%"class.SkSL::Expression"*, %"class.SkSL::Expression"*)***
  %21 = load i32 (%"class.SkSL::Expression"*, %"class.SkSL::Expression"*)**, i32 (%"class.SkSL::Expression"*, %"class.SkSL::Expression"*)*** %20, align 8
  %22 = getelementptr inbounds i32 (%"class.SkSL::Expression"*, %"class.SkSL::Expression"*)*, i32 (%"class.SkSL::Expression"*, %"class.SkSL::Expression"*)** %21, i64 5
  %23 = load i32 (%"class.SkSL::Expression"*, %"class.SkSL::Expression"*)*, i32 (%"class.SkSL::Expression"*, %"class.SkSL::Expression"*)** %22, align 8
  %24 = tail call i32 %23(%"class.SkSL::Expression"* %1, %"class.SkSL::Expression"* dereferenceable(24) %3) #10
  switch i32 %24, label %609 [
    i32 0, label %25
    i32 1, label %27
  ]

25:                                               ; preds = %19
  %26 = xor i1 %18, true
  br label %27

27:                                               ; preds = %25, %19
  %28 = phi i1 [ %18, %19 ], [ %26, %25 ]
  %29 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 1
  %30 = load i32, i32* %29, align 8
  %31 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 0, i32 24, i32 0, i32 0, i32 0
  %32 = bitcast %"class.SkSL::Type"** %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #10
  %35 = zext i1 %28 to i8
  %36 = bitcast i8* %34 to i32 (...)***
  %37 = getelementptr inbounds i8, i8* %34, i64 8
  %38 = bitcast i8* %37 to i32*
  store i32 %30, i32* %38, align 8
  %39 = getelementptr inbounds i8, i8* %34, i64 12
  %40 = bitcast i8* %39 to i32*
  store i32 31, i32* %40, align 4
  %41 = getelementptr inbounds i8, i8* %34, i64 16
  %42 = bitcast i8* %41 to i64*
  store i64 %33, i64* %42, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIbEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %36, align 8
  %43 = getelementptr inbounds i8, i8* %34, i64 24
  store i8 %35, i8* %43, align 8
  %44 = ptrtoint i8* %34 to i64
  br label %609

45:                                               ; preds = %4
  %46 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %10, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %46)
  %47 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %17, i64 0, i32 6
  %48 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %47, align 8
  %49 = icmp eq %"class.SkSL::Type"* %48, null
  %50 = select i1 %49, %"class.SkSL::Type"* %17, %"class.SkSL::Type"* %48
  %51 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %9, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %51) #10
  %52 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %9, i64 0, i32 0, i32 0, i64 16
  %53 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %9, i64 0, i32 0, i32 0, i64 24
  %54 = bitcast i8* %53 to i64*
  %55 = bitcast i8* %52 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %51, i8 -86, i64 16, i1 false) #10
  store i8* %51, i8** %55, align 8
  store i64 17179869184, i64* %54, align 8
  %56 = bitcast i8* %52 to %class.SkTArray*
  %57 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %17, i64 0, i32 8
  %58 = load i32, i32* %57, align 8
  %59 = icmp sgt i32 %58, 0
  br i1 %59, label %61, label %60

60:                                               ; preds = %45
  store i64 17179869184, i64* %54, align 8
  br label %75

61:                                               ; preds = %45
  call void @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL10ExpressionENS0_14default_deleteIS3_EEEELb0EE12checkReallocEiNS7_11ReallocTypeE(%class.SkTArray* %56, i32 %58, i32 0) #10
  %62 = load i64, i64* %54, align 8
  %63 = shl i64 %62, 32
  %64 = and i64 %63, 4294967296
  %65 = and i64 %62, -4294967297
  %66 = or i64 %64, %65
  store i64 %66, i64* %54, align 8
  %67 = load i32, i32* %57, align 8
  %68 = icmp sgt i32 %67, 0
  br i1 %68, label %69, label %75

69:                                               ; preds = %61
  %70 = ptrtoint %"class.SkSL::Type"* %50 to i64
  %71 = bitcast i8* %52 to %"class.std::__1::unique_ptr.38"**
  %72 = bitcast %"class.SkSL::Expression"* %1 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)***
  %73 = bitcast %"class.SkSL::Expression"* %3 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)***
  %74 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 1
  br label %142

75:                                               ; preds = %142, %61, %60
  %76 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 1
  %77 = load i32, i32* %76, align 8
  %78 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %10, i64 0, i32 0, i32 0, i64 16
  %79 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %10, i64 0, i32 0, i32 0, i64 24
  %80 = bitcast i8* %79 to i64*
  %81 = bitcast i8* %78 to i8**
  store i8* %46, i8** %81, align 8
  store i64 17179869184, i64* %80, align 8
  %82 = bitcast i8* %78 to %class.SkTArray*
  %83 = call dereferenceable(16) %class.SkTArray* @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL10ExpressionENS0_14default_deleteIS3_EEEELb0EEaSEOS7_(%class.SkTArray* %82, %class.SkTArray* dereferenceable(16) %56) #10
  %84 = call %"class.SkSL::Expression"* @_ZN4SkSL19ConstructorCompound4MakeERKNS_7ContextEiRKNS_4TypeE9SkSTArrayILi2ENSt3__110unique_ptrINS_10ExpressionENS8_14default_deleteISA_EEEELb0EE(%"class.SkSL::Context"* dereferenceable(744) %0, i32 %77, %"class.SkSL::Type"* dereferenceable(184) %17, %class.SkSTArray* nonnull %10) #10
  %85 = load i64, i64* %80, align 8
  %86 = and i64 %85, 4294967294
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %90, label %88

88:                                               ; preds = %75
  %89 = bitcast i8* %78 to %"class.std::__1::unique_ptr.38"**
  br label %94

90:                                               ; preds = %105, %75
  %91 = phi i64 [ %85, %75 ], [ %107, %105 ]
  %92 = and i64 %91, 1
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %113, label %111

94:                                               ; preds = %105, %88
  %95 = phi i64 [ 0, %88 ], [ %106, %105 ]
  %96 = load %"class.std::__1::unique_ptr.38"*, %"class.std::__1::unique_ptr.38"** %89, align 8
  %97 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %96, i64 %95, i32 0, i32 0, i32 0
  %98 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %97, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %97, align 8
  %99 = icmp eq %"class.SkSL::Expression"* %98, null
  br i1 %99, label %105, label %100

100:                                              ; preds = %94
  %101 = bitcast %"class.SkSL::Expression"* %98 to void (%"class.SkSL::Expression"*)***
  %102 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %101, align 8
  %103 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %102, i64 1
  %104 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %103, align 8
  call void %104(%"class.SkSL::Expression"* nonnull %98) #10
  br label %105

105:                                              ; preds = %100, %94
  %106 = add nuw nsw i64 %95, 1
  %107 = load i64, i64* %80, align 8
  %108 = lshr i64 %107, 1
  %109 = and i64 %108, 2147483647
  %110 = icmp ult i64 %106, %109
  br i1 %110, label %94, label %90

111:                                              ; preds = %90
  %112 = load i8*, i8** %81, align 8
  call void @_Z7sk_freePv(i8* %112) #10
  br label %113

113:                                              ; preds = %111, %90
  %114 = load i64, i64* %54, align 8
  %115 = and i64 %114, 4294967294
  %116 = icmp eq i64 %115, 0
  br i1 %116, label %119, label %117

117:                                              ; preds = %113
  %118 = bitcast i8* %52 to %"class.std::__1::unique_ptr.38"**
  br label %123

119:                                              ; preds = %134, %113
  %120 = phi i64 [ %114, %113 ], [ %136, %134 ]
  %121 = and i64 %120, 1
  %122 = icmp eq i64 %121, 0
  br i1 %122, label %184, label %140

123:                                              ; preds = %134, %117
  %124 = phi i64 [ 0, %117 ], [ %135, %134 ]
  %125 = load %"class.std::__1::unique_ptr.38"*, %"class.std::__1::unique_ptr.38"** %118, align 8
  %126 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %125, i64 %124, i32 0, i32 0, i32 0
  %127 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %126, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %126, align 8
  %128 = icmp eq %"class.SkSL::Expression"* %127, null
  br i1 %128, label %134, label %129

129:                                              ; preds = %123
  %130 = bitcast %"class.SkSL::Expression"* %127 to void (%"class.SkSL::Expression"*)***
  %131 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %130, align 8
  %132 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %131, i64 1
  %133 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %132, align 8
  call void %133(%"class.SkSL::Expression"* nonnull %127) #10
  br label %134

134:                                              ; preds = %129, %123
  %135 = add nuw nsw i64 %124, 1
  %136 = load i64, i64* %54, align 8
  %137 = lshr i64 %136, 1
  %138 = and i64 %137, 2147483647
  %139 = icmp ult i64 %135, %138
  br i1 %139, label %123, label %119

140:                                              ; preds = %119
  %141 = load i8*, i8** %55, align 8
  call void @_Z7sk_freePv(i8* %141) #10
  br label %184

142:                                              ; preds = %142, %69
  %143 = phi i32 [ 0, %69 ], [ %181, %142 ]
  %144 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*** %72, align 8
  %145 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)** %144, i64 9
  %146 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)** %145, align 8
  %147 = call %"class.SkSL::Expression"* %146(%"class.SkSL::Expression"* %1, i32 %143) #10
  %148 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %147, i64 1
  %149 = bitcast %"class.SkSL::Expression"* %148 to i64*
  %150 = load i64, i64* %149, align 8
  %151 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*** %73, align 8
  %152 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)** %151, i64 9
  %153 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)** %152, align 8
  %154 = call %"class.SkSL::Expression"* %153(%"class.SkSL::Expression"* %3, i32 %143) #10
  %155 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %154, i64 1
  %156 = bitcast %"class.SkSL::Expression"* %155 to i64*
  %157 = load i64, i64* %156, align 8
  %158 = add i64 %157, %150
  %159 = load i32, i32* %74, align 8
  %160 = call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #10
  %161 = bitcast i8* %160 to i32 (...)***
  %162 = getelementptr inbounds i8, i8* %160, i64 8
  %163 = bitcast i8* %162 to i32*
  store i32 %159, i32* %163, align 8
  %164 = getelementptr inbounds i8, i8* %160, i64 12
  %165 = bitcast i8* %164 to i32*
  store i32 43, i32* %165, align 4
  %166 = getelementptr inbounds i8, i8* %160, i64 16
  %167 = bitcast i8* %166 to i64*
  store i64 %70, i64* %167, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIlEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %161, align 8
  %168 = getelementptr inbounds i8, i8* %160, i64 24
  %169 = bitcast i8* %168 to i64*
  store i64 %158, i64* %169, align 8
  %170 = ptrtoint i8* %160 to i64
  call void @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL10ExpressionENS0_14default_deleteIS3_EEEELb0EE12checkReallocEiNS7_11ReallocTypeE(%class.SkTArray* %56, i32 1, i32 1) #10
  %171 = load %"class.std::__1::unique_ptr.38"*, %"class.std::__1::unique_ptr.38"** %71, align 8
  %172 = load i64, i64* %54, align 8
  %173 = lshr i64 %172, 1
  %174 = and i64 %173, 2147483647
  %175 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %171, i64 %174
  %176 = add i64 %172, 2
  %177 = and i64 %176, 4294967294
  %178 = and i64 %172, -4294967295
  %179 = or i64 %177, %178
  store i64 %179, i64* %54, align 8
  %180 = bitcast %"class.std::__1::unique_ptr.38"* %175 to i64*
  store i64 %170, i64* %180, align 8
  %181 = add nuw nsw i32 %143, 1
  %182 = load i32, i32* %57, align 8
  %183 = icmp slt i32 %181, %182
  br i1 %183, label %142, label %75

184:                                              ; preds = %119, %140
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %51) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %46)
  %185 = ptrtoint %"class.SkSL::Expression"* %84 to i64
  br label %609

186:                                              ; preds = %4
  %187 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %8, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %187)
  %188 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %17, i64 0, i32 6
  %189 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %188, align 8
  %190 = icmp eq %"class.SkSL::Type"* %189, null
  %191 = select i1 %190, %"class.SkSL::Type"* %17, %"class.SkSL::Type"* %189
  %192 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %7, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %192) #10
  %193 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %7, i64 0, i32 0, i32 0, i64 16
  %194 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %7, i64 0, i32 0, i32 0, i64 24
  %195 = bitcast i8* %194 to i64*
  %196 = bitcast i8* %193 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %192, i8 -86, i64 16, i1 false) #10
  store i8* %192, i8** %196, align 8
  store i64 17179869184, i64* %195, align 8
  %197 = bitcast i8* %193 to %class.SkTArray*
  %198 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %17, i64 0, i32 8
  %199 = load i32, i32* %198, align 8
  %200 = icmp sgt i32 %199, 0
  br i1 %200, label %202, label %201

201:                                              ; preds = %186
  store i64 17179869184, i64* %195, align 8
  br label %216

202:                                              ; preds = %186
  call void @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL10ExpressionENS0_14default_deleteIS3_EEEELb0EE12checkReallocEiNS7_11ReallocTypeE(%class.SkTArray* %197, i32 %199, i32 0) #10
  %203 = load i64, i64* %195, align 8
  %204 = shl i64 %203, 32
  %205 = and i64 %204, 4294967296
  %206 = and i64 %203, -4294967297
  %207 = or i64 %205, %206
  store i64 %207, i64* %195, align 8
  %208 = load i32, i32* %198, align 8
  %209 = icmp sgt i32 %208, 0
  br i1 %209, label %210, label %216

210:                                              ; preds = %202
  %211 = ptrtoint %"class.SkSL::Type"* %191 to i64
  %212 = bitcast i8* %193 to %"class.std::__1::unique_ptr.38"**
  %213 = bitcast %"class.SkSL::Expression"* %1 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)***
  %214 = bitcast %"class.SkSL::Expression"* %3 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)***
  %215 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 1
  br label %283

216:                                              ; preds = %283, %202, %201
  %217 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 1
  %218 = load i32, i32* %217, align 8
  %219 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %8, i64 0, i32 0, i32 0, i64 16
  %220 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %8, i64 0, i32 0, i32 0, i64 24
  %221 = bitcast i8* %220 to i64*
  %222 = bitcast i8* %219 to i8**
  store i8* %187, i8** %222, align 8
  store i64 17179869184, i64* %221, align 8
  %223 = bitcast i8* %219 to %class.SkTArray*
  %224 = call dereferenceable(16) %class.SkTArray* @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL10ExpressionENS0_14default_deleteIS3_EEEELb0EEaSEOS7_(%class.SkTArray* %223, %class.SkTArray* dereferenceable(16) %197) #10
  %225 = call %"class.SkSL::Expression"* @_ZN4SkSL19ConstructorCompound4MakeERKNS_7ContextEiRKNS_4TypeE9SkSTArrayILi2ENSt3__110unique_ptrINS_10ExpressionENS8_14default_deleteISA_EEEELb0EE(%"class.SkSL::Context"* dereferenceable(744) %0, i32 %218, %"class.SkSL::Type"* dereferenceable(184) %17, %class.SkSTArray* nonnull %8) #10
  %226 = load i64, i64* %221, align 8
  %227 = and i64 %226, 4294967294
  %228 = icmp eq i64 %227, 0
  br i1 %228, label %231, label %229

229:                                              ; preds = %216
  %230 = bitcast i8* %219 to %"class.std::__1::unique_ptr.38"**
  br label %235

231:                                              ; preds = %246, %216
  %232 = phi i64 [ %226, %216 ], [ %248, %246 ]
  %233 = and i64 %232, 1
  %234 = icmp eq i64 %233, 0
  br i1 %234, label %254, label %252

235:                                              ; preds = %246, %229
  %236 = phi i64 [ 0, %229 ], [ %247, %246 ]
  %237 = load %"class.std::__1::unique_ptr.38"*, %"class.std::__1::unique_ptr.38"** %230, align 8
  %238 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %237, i64 %236, i32 0, i32 0, i32 0
  %239 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %238, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %238, align 8
  %240 = icmp eq %"class.SkSL::Expression"* %239, null
  br i1 %240, label %246, label %241

241:                                              ; preds = %235
  %242 = bitcast %"class.SkSL::Expression"* %239 to void (%"class.SkSL::Expression"*)***
  %243 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %242, align 8
  %244 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %243, i64 1
  %245 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %244, align 8
  call void %245(%"class.SkSL::Expression"* nonnull %239) #10
  br label %246

246:                                              ; preds = %241, %235
  %247 = add nuw nsw i64 %236, 1
  %248 = load i64, i64* %221, align 8
  %249 = lshr i64 %248, 1
  %250 = and i64 %249, 2147483647
  %251 = icmp ult i64 %247, %250
  br i1 %251, label %235, label %231

252:                                              ; preds = %231
  %253 = load i8*, i8** %222, align 8
  call void @_Z7sk_freePv(i8* %253) #10
  br label %254

254:                                              ; preds = %252, %231
  %255 = load i64, i64* %195, align 8
  %256 = and i64 %255, 4294967294
  %257 = icmp eq i64 %256, 0
  br i1 %257, label %260, label %258

258:                                              ; preds = %254
  %259 = bitcast i8* %193 to %"class.std::__1::unique_ptr.38"**
  br label %264

260:                                              ; preds = %275, %254
  %261 = phi i64 [ %255, %254 ], [ %277, %275 ]
  %262 = and i64 %261, 1
  %263 = icmp eq i64 %262, 0
  br i1 %263, label %325, label %281

264:                                              ; preds = %275, %258
  %265 = phi i64 [ 0, %258 ], [ %276, %275 ]
  %266 = load %"class.std::__1::unique_ptr.38"*, %"class.std::__1::unique_ptr.38"** %259, align 8
  %267 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %266, i64 %265, i32 0, i32 0, i32 0
  %268 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %267, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %267, align 8
  %269 = icmp eq %"class.SkSL::Expression"* %268, null
  br i1 %269, label %275, label %270

270:                                              ; preds = %264
  %271 = bitcast %"class.SkSL::Expression"* %268 to void (%"class.SkSL::Expression"*)***
  %272 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %271, align 8
  %273 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %272, i64 1
  %274 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %273, align 8
  call void %274(%"class.SkSL::Expression"* nonnull %268) #10
  br label %275

275:                                              ; preds = %270, %264
  %276 = add nuw nsw i64 %265, 1
  %277 = load i64, i64* %195, align 8
  %278 = lshr i64 %277, 1
  %279 = and i64 %278, 2147483647
  %280 = icmp ult i64 %276, %279
  br i1 %280, label %264, label %260

281:                                              ; preds = %260
  %282 = load i8*, i8** %196, align 8
  call void @_Z7sk_freePv(i8* %282) #10
  br label %325

283:                                              ; preds = %283, %210
  %284 = phi i32 [ 0, %210 ], [ %322, %283 ]
  %285 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*** %213, align 8
  %286 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)** %285, i64 9
  %287 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)** %286, align 8
  %288 = call %"class.SkSL::Expression"* %287(%"class.SkSL::Expression"* %1, i32 %284) #10
  %289 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %288, i64 1
  %290 = bitcast %"class.SkSL::Expression"* %289 to i64*
  %291 = load i64, i64* %290, align 8
  %292 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*** %214, align 8
  %293 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)** %292, i64 9
  %294 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)** %293, align 8
  %295 = call %"class.SkSL::Expression"* %294(%"class.SkSL::Expression"* %3, i32 %284) #10
  %296 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %295, i64 1
  %297 = bitcast %"class.SkSL::Expression"* %296 to i64*
  %298 = load i64, i64* %297, align 8
  %299 = sub i64 %291, %298
  %300 = load i32, i32* %215, align 8
  %301 = call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #10
  %302 = bitcast i8* %301 to i32 (...)***
  %303 = getelementptr inbounds i8, i8* %301, i64 8
  %304 = bitcast i8* %303 to i32*
  store i32 %300, i32* %304, align 8
  %305 = getelementptr inbounds i8, i8* %301, i64 12
  %306 = bitcast i8* %305 to i32*
  store i32 43, i32* %306, align 4
  %307 = getelementptr inbounds i8, i8* %301, i64 16
  %308 = bitcast i8* %307 to i64*
  store i64 %211, i64* %308, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIlEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %302, align 8
  %309 = getelementptr inbounds i8, i8* %301, i64 24
  %310 = bitcast i8* %309 to i64*
  store i64 %299, i64* %310, align 8
  %311 = ptrtoint i8* %301 to i64
  call void @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL10ExpressionENS0_14default_deleteIS3_EEEELb0EE12checkReallocEiNS7_11ReallocTypeE(%class.SkTArray* %197, i32 1, i32 1) #10
  %312 = load %"class.std::__1::unique_ptr.38"*, %"class.std::__1::unique_ptr.38"** %212, align 8
  %313 = load i64, i64* %195, align 8
  %314 = lshr i64 %313, 1
  %315 = and i64 %314, 2147483647
  %316 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %312, i64 %315
  %317 = add i64 %313, 2
  %318 = and i64 %317, 4294967294
  %319 = and i64 %313, -4294967295
  %320 = or i64 %318, %319
  store i64 %320, i64* %195, align 8
  %321 = bitcast %"class.std::__1::unique_ptr.38"* %316 to i64*
  store i64 %311, i64* %321, align 8
  %322 = add nuw nsw i32 %284, 1
  %323 = load i32, i32* %198, align 8
  %324 = icmp slt i32 %322, %323
  br i1 %324, label %283, label %216

325:                                              ; preds = %260, %281
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %192) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %187)
  %326 = ptrtoint %"class.SkSL::Expression"* %225 to i64
  br label %609

327:                                              ; preds = %4
  %328 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %6, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %328)
  %329 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %17, i64 0, i32 6
  %330 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %329, align 8
  %331 = icmp eq %"class.SkSL::Type"* %330, null
  %332 = select i1 %331, %"class.SkSL::Type"* %17, %"class.SkSL::Type"* %330
  %333 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %5, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %333) #10
  %334 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %5, i64 0, i32 0, i32 0, i64 16
  %335 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %5, i64 0, i32 0, i32 0, i64 24
  %336 = bitcast i8* %335 to i64*
  %337 = bitcast i8* %334 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %333, i8 -86, i64 16, i1 false) #10
  store i8* %333, i8** %337, align 8
  store i64 17179869184, i64* %336, align 8
  %338 = bitcast i8* %334 to %class.SkTArray*
  %339 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %17, i64 0, i32 8
  %340 = load i32, i32* %339, align 8
  %341 = icmp sgt i32 %340, 0
  br i1 %341, label %343, label %342

342:                                              ; preds = %327
  store i64 17179869184, i64* %336, align 8
  br label %357

343:                                              ; preds = %327
  call void @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL10ExpressionENS0_14default_deleteIS3_EEEELb0EE12checkReallocEiNS7_11ReallocTypeE(%class.SkTArray* %338, i32 %340, i32 0) #10
  %344 = load i64, i64* %336, align 8
  %345 = shl i64 %344, 32
  %346 = and i64 %345, 4294967296
  %347 = and i64 %344, -4294967297
  %348 = or i64 %346, %347
  store i64 %348, i64* %336, align 8
  %349 = load i32, i32* %339, align 8
  %350 = icmp sgt i32 %349, 0
  br i1 %350, label %351, label %357

351:                                              ; preds = %343
  %352 = ptrtoint %"class.SkSL::Type"* %332 to i64
  %353 = bitcast i8* %334 to %"class.std::__1::unique_ptr.38"**
  %354 = bitcast %"class.SkSL::Expression"* %1 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)***
  %355 = bitcast %"class.SkSL::Expression"* %3 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)***
  %356 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 1
  br label %424

357:                                              ; preds = %424, %343, %342
  %358 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 1
  %359 = load i32, i32* %358, align 8
  %360 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %6, i64 0, i32 0, i32 0, i64 16
  %361 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %6, i64 0, i32 0, i32 0, i64 24
  %362 = bitcast i8* %361 to i64*
  %363 = bitcast i8* %360 to i8**
  store i8* %328, i8** %363, align 8
  store i64 17179869184, i64* %362, align 8
  %364 = bitcast i8* %360 to %class.SkTArray*
  %365 = call dereferenceable(16) %class.SkTArray* @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL10ExpressionENS0_14default_deleteIS3_EEEELb0EEaSEOS7_(%class.SkTArray* %364, %class.SkTArray* dereferenceable(16) %338) #10
  %366 = call %"class.SkSL::Expression"* @_ZN4SkSL19ConstructorCompound4MakeERKNS_7ContextEiRKNS_4TypeE9SkSTArrayILi2ENSt3__110unique_ptrINS_10ExpressionENS8_14default_deleteISA_EEEELb0EE(%"class.SkSL::Context"* dereferenceable(744) %0, i32 %359, %"class.SkSL::Type"* dereferenceable(184) %17, %class.SkSTArray* nonnull %6) #10
  %367 = load i64, i64* %362, align 8
  %368 = and i64 %367, 4294967294
  %369 = icmp eq i64 %368, 0
  br i1 %369, label %372, label %370

370:                                              ; preds = %357
  %371 = bitcast i8* %360 to %"class.std::__1::unique_ptr.38"**
  br label %376

372:                                              ; preds = %387, %357
  %373 = phi i64 [ %367, %357 ], [ %389, %387 ]
  %374 = and i64 %373, 1
  %375 = icmp eq i64 %374, 0
  br i1 %375, label %395, label %393

376:                                              ; preds = %387, %370
  %377 = phi i64 [ 0, %370 ], [ %388, %387 ]
  %378 = load %"class.std::__1::unique_ptr.38"*, %"class.std::__1::unique_ptr.38"** %371, align 8
  %379 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %378, i64 %377, i32 0, i32 0, i32 0
  %380 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %379, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %379, align 8
  %381 = icmp eq %"class.SkSL::Expression"* %380, null
  br i1 %381, label %387, label %382

382:                                              ; preds = %376
  %383 = bitcast %"class.SkSL::Expression"* %380 to void (%"class.SkSL::Expression"*)***
  %384 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %383, align 8
  %385 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %384, i64 1
  %386 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %385, align 8
  call void %386(%"class.SkSL::Expression"* nonnull %380) #10
  br label %387

387:                                              ; preds = %382, %376
  %388 = add nuw nsw i64 %377, 1
  %389 = load i64, i64* %362, align 8
  %390 = lshr i64 %389, 1
  %391 = and i64 %390, 2147483647
  %392 = icmp ult i64 %388, %391
  br i1 %392, label %376, label %372

393:                                              ; preds = %372
  %394 = load i8*, i8** %363, align 8
  call void @_Z7sk_freePv(i8* %394) #10
  br label %395

395:                                              ; preds = %393, %372
  %396 = load i64, i64* %336, align 8
  %397 = and i64 %396, 4294967294
  %398 = icmp eq i64 %397, 0
  br i1 %398, label %401, label %399

399:                                              ; preds = %395
  %400 = bitcast i8* %334 to %"class.std::__1::unique_ptr.38"**
  br label %405

401:                                              ; preds = %416, %395
  %402 = phi i64 [ %396, %395 ], [ %418, %416 ]
  %403 = and i64 %402, 1
  %404 = icmp eq i64 %403, 0
  br i1 %404, label %466, label %422

405:                                              ; preds = %416, %399
  %406 = phi i64 [ 0, %399 ], [ %417, %416 ]
  %407 = load %"class.std::__1::unique_ptr.38"*, %"class.std::__1::unique_ptr.38"** %400, align 8
  %408 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %407, i64 %406, i32 0, i32 0, i32 0
  %409 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %408, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %408, align 8
  %410 = icmp eq %"class.SkSL::Expression"* %409, null
  br i1 %410, label %416, label %411

411:                                              ; preds = %405
  %412 = bitcast %"class.SkSL::Expression"* %409 to void (%"class.SkSL::Expression"*)***
  %413 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %412, align 8
  %414 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %413, i64 1
  %415 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %414, align 8
  call void %415(%"class.SkSL::Expression"* nonnull %409) #10
  br label %416

416:                                              ; preds = %411, %405
  %417 = add nuw nsw i64 %406, 1
  %418 = load i64, i64* %336, align 8
  %419 = lshr i64 %418, 1
  %420 = and i64 %419, 2147483647
  %421 = icmp ult i64 %417, %420
  br i1 %421, label %405, label %401

422:                                              ; preds = %401
  %423 = load i8*, i8** %337, align 8
  call void @_Z7sk_freePv(i8* %423) #10
  br label %466

424:                                              ; preds = %424, %351
  %425 = phi i32 [ 0, %351 ], [ %463, %424 ]
  %426 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*** %354, align 8
  %427 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)** %426, i64 9
  %428 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)** %427, align 8
  %429 = call %"class.SkSL::Expression"* %428(%"class.SkSL::Expression"* %1, i32 %425) #10
  %430 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %429, i64 1
  %431 = bitcast %"class.SkSL::Expression"* %430 to i64*
  %432 = load i64, i64* %431, align 8
  %433 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*** %355, align 8
  %434 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)** %433, i64 9
  %435 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)** %434, align 8
  %436 = call %"class.SkSL::Expression"* %435(%"class.SkSL::Expression"* %3, i32 %425) #10
  %437 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %436, i64 1
  %438 = bitcast %"class.SkSL::Expression"* %437 to i64*
  %439 = load i64, i64* %438, align 8
  %440 = mul i64 %439, %432
  %441 = load i32, i32* %356, align 8
  %442 = call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #10
  %443 = bitcast i8* %442 to i32 (...)***
  %444 = getelementptr inbounds i8, i8* %442, i64 8
  %445 = bitcast i8* %444 to i32*
  store i32 %441, i32* %445, align 8
  %446 = getelementptr inbounds i8, i8* %442, i64 12
  %447 = bitcast i8* %446 to i32*
  store i32 43, i32* %447, align 4
  %448 = getelementptr inbounds i8, i8* %442, i64 16
  %449 = bitcast i8* %448 to i64*
  store i64 %352, i64* %449, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIlEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %443, align 8
  %450 = getelementptr inbounds i8, i8* %442, i64 24
  %451 = bitcast i8* %450 to i64*
  store i64 %440, i64* %451, align 8
  %452 = ptrtoint i8* %442 to i64
  call void @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL10ExpressionENS0_14default_deleteIS3_EEEELb0EE12checkReallocEiNS7_11ReallocTypeE(%class.SkTArray* %338, i32 1, i32 1) #10
  %453 = load %"class.std::__1::unique_ptr.38"*, %"class.std::__1::unique_ptr.38"** %353, align 8
  %454 = load i64, i64* %336, align 8
  %455 = lshr i64 %454, 1
  %456 = and i64 %455, 2147483647
  %457 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %453, i64 %456
  %458 = add i64 %454, 2
  %459 = and i64 %458, 4294967294
  %460 = and i64 %454, -4294967295
  %461 = or i64 %459, %460
  store i64 %461, i64* %336, align 8
  %462 = bitcast %"class.std::__1::unique_ptr.38"* %457 to i64*
  store i64 %452, i64* %462, align 8
  %463 = add nuw nsw i32 %425, 1
  %464 = load i32, i32* %339, align 8
  %465 = icmp slt i32 %463, %464
  br i1 %465, label %424, label %357

466:                                              ; preds = %401, %422
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %333) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %328)
  %467 = ptrtoint %"class.SkSL::Expression"* %366 to i64
  br label %609

468:                                              ; preds = %4
  %469 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %12, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %469)
  %470 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %17, i64 0, i32 6
  %471 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %470, align 8
  %472 = icmp eq %"class.SkSL::Type"* %471, null
  %473 = select i1 %472, %"class.SkSL::Type"* %17, %"class.SkSL::Type"* %471
  %474 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %11, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %474) #10
  %475 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %11, i64 0, i32 0, i32 0, i64 16
  %476 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %11, i64 0, i32 0, i32 0, i64 24
  %477 = bitcast i8* %476 to i64*
  %478 = bitcast i8* %475 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %474, i8 -86, i64 16, i1 false) #10
  store i8* %474, i8** %478, align 8
  store i64 17179869184, i64* %477, align 8
  %479 = bitcast i8* %475 to %class.SkTArray*
  %480 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %17, i64 0, i32 8
  %481 = load i32, i32* %480, align 8
  %482 = icmp sgt i32 %481, 0
  br i1 %482, label %484, label %483

483:                                              ; preds = %468
  store i64 17179869184, i64* %477, align 8
  br label %498

484:                                              ; preds = %468
  call void @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL10ExpressionENS0_14default_deleteIS3_EEEELb0EE12checkReallocEiNS7_11ReallocTypeE(%class.SkTArray* %479, i32 %481, i32 0) #10
  %485 = load i64, i64* %477, align 8
  %486 = shl i64 %485, 32
  %487 = and i64 %486, 4294967296
  %488 = and i64 %485, -4294967297
  %489 = or i64 %487, %488
  store i64 %489, i64* %477, align 8
  %490 = load i32, i32* %480, align 8
  %491 = icmp sgt i32 %490, 0
  br i1 %491, label %492, label %498

492:                                              ; preds = %484
  %493 = ptrtoint %"class.SkSL::Type"* %473 to i64
  %494 = bitcast i8* %475 to %"class.std::__1::unique_ptr.38"**
  %495 = bitcast %"class.SkSL::Expression"* %1 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)***
  %496 = bitcast %"class.SkSL::Expression"* %3 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)***
  %497 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 1
  br label %565

498:                                              ; preds = %565, %484, %483
  %499 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 1
  %500 = load i32, i32* %499, align 8
  %501 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %12, i64 0, i32 0, i32 0, i64 16
  %502 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %12, i64 0, i32 0, i32 0, i64 24
  %503 = bitcast i8* %502 to i64*
  %504 = bitcast i8* %501 to i8**
  store i8* %469, i8** %504, align 8
  store i64 17179869184, i64* %503, align 8
  %505 = bitcast i8* %501 to %class.SkTArray*
  %506 = call dereferenceable(16) %class.SkTArray* @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL10ExpressionENS0_14default_deleteIS3_EEEELb0EEaSEOS7_(%class.SkTArray* %505, %class.SkTArray* dereferenceable(16) %479) #10
  %507 = call %"class.SkSL::Expression"* @_ZN4SkSL19ConstructorCompound4MakeERKNS_7ContextEiRKNS_4TypeE9SkSTArrayILi2ENSt3__110unique_ptrINS_10ExpressionENS8_14default_deleteISA_EEEELb0EE(%"class.SkSL::Context"* dereferenceable(744) %0, i32 %500, %"class.SkSL::Type"* dereferenceable(184) %17, %class.SkSTArray* nonnull %12) #10
  %508 = load i64, i64* %503, align 8
  %509 = and i64 %508, 4294967294
  %510 = icmp eq i64 %509, 0
  br i1 %510, label %513, label %511

511:                                              ; preds = %498
  %512 = bitcast i8* %501 to %"class.std::__1::unique_ptr.38"**
  br label %517

513:                                              ; preds = %528, %498
  %514 = phi i64 [ %508, %498 ], [ %530, %528 ]
  %515 = and i64 %514, 1
  %516 = icmp eq i64 %515, 0
  br i1 %516, label %536, label %534

517:                                              ; preds = %528, %511
  %518 = phi i64 [ 0, %511 ], [ %529, %528 ]
  %519 = load %"class.std::__1::unique_ptr.38"*, %"class.std::__1::unique_ptr.38"** %512, align 8
  %520 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %519, i64 %518, i32 0, i32 0, i32 0
  %521 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %520, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %520, align 8
  %522 = icmp eq %"class.SkSL::Expression"* %521, null
  br i1 %522, label %528, label %523

523:                                              ; preds = %517
  %524 = bitcast %"class.SkSL::Expression"* %521 to void (%"class.SkSL::Expression"*)***
  %525 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %524, align 8
  %526 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %525, i64 1
  %527 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %526, align 8
  call void %527(%"class.SkSL::Expression"* nonnull %521) #10
  br label %528

528:                                              ; preds = %523, %517
  %529 = add nuw nsw i64 %518, 1
  %530 = load i64, i64* %503, align 8
  %531 = lshr i64 %530, 1
  %532 = and i64 %531, 2147483647
  %533 = icmp ult i64 %529, %532
  br i1 %533, label %517, label %513

534:                                              ; preds = %513
  %535 = load i8*, i8** %504, align 8
  call void @_Z7sk_freePv(i8* %535) #10
  br label %536

536:                                              ; preds = %534, %513
  %537 = load i64, i64* %477, align 8
  %538 = and i64 %537, 4294967294
  %539 = icmp eq i64 %538, 0
  br i1 %539, label %542, label %540

540:                                              ; preds = %536
  %541 = bitcast i8* %475 to %"class.std::__1::unique_ptr.38"**
  br label %546

542:                                              ; preds = %557, %536
  %543 = phi i64 [ %537, %536 ], [ %559, %557 ]
  %544 = and i64 %543, 1
  %545 = icmp eq i64 %544, 0
  br i1 %545, label %607, label %563

546:                                              ; preds = %557, %540
  %547 = phi i64 [ 0, %540 ], [ %558, %557 ]
  %548 = load %"class.std::__1::unique_ptr.38"*, %"class.std::__1::unique_ptr.38"** %541, align 8
  %549 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %548, i64 %547, i32 0, i32 0, i32 0
  %550 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %549, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %549, align 8
  %551 = icmp eq %"class.SkSL::Expression"* %550, null
  br i1 %551, label %557, label %552

552:                                              ; preds = %546
  %553 = bitcast %"class.SkSL::Expression"* %550 to void (%"class.SkSL::Expression"*)***
  %554 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %553, align 8
  %555 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %554, i64 1
  %556 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %555, align 8
  call void %556(%"class.SkSL::Expression"* nonnull %550) #10
  br label %557

557:                                              ; preds = %552, %546
  %558 = add nuw nsw i64 %547, 1
  %559 = load i64, i64* %477, align 8
  %560 = lshr i64 %559, 1
  %561 = and i64 %560, 2147483647
  %562 = icmp ult i64 %558, %561
  br i1 %562, label %546, label %542

563:                                              ; preds = %542
  %564 = load i8*, i8** %478, align 8
  call void @_Z7sk_freePv(i8* %564) #10
  br label %607

565:                                              ; preds = %565, %492
  %566 = phi i32 [ 0, %492 ], [ %604, %565 ]
  %567 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*** %495, align 8
  %568 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)** %567, i64 9
  %569 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)** %568, align 8
  %570 = call %"class.SkSL::Expression"* %569(%"class.SkSL::Expression"* %1, i32 %566) #10
  %571 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %570, i64 1
  %572 = bitcast %"class.SkSL::Expression"* %571 to i64*
  %573 = load i64, i64* %572, align 8
  %574 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*** %496, align 8
  %575 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)** %574, i64 9
  %576 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)** %575, align 8
  %577 = call %"class.SkSL::Expression"* %576(%"class.SkSL::Expression"* %3, i32 %566) #10
  %578 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %577, i64 1
  %579 = bitcast %"class.SkSL::Expression"* %578 to i64*
  %580 = load i64, i64* %579, align 8
  %581 = sdiv i64 %573, %580
  %582 = load i32, i32* %497, align 8
  %583 = call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #10
  %584 = bitcast i8* %583 to i32 (...)***
  %585 = getelementptr inbounds i8, i8* %583, i64 8
  %586 = bitcast i8* %585 to i32*
  store i32 %582, i32* %586, align 8
  %587 = getelementptr inbounds i8, i8* %583, i64 12
  %588 = bitcast i8* %587 to i32*
  store i32 43, i32* %588, align 4
  %589 = getelementptr inbounds i8, i8* %583, i64 16
  %590 = bitcast i8* %589 to i64*
  store i64 %493, i64* %590, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIlEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %584, align 8
  %591 = getelementptr inbounds i8, i8* %583, i64 24
  %592 = bitcast i8* %591 to i64*
  store i64 %581, i64* %592, align 8
  %593 = ptrtoint i8* %583 to i64
  call void @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL10ExpressionENS0_14default_deleteIS3_EEEELb0EE12checkReallocEiNS7_11ReallocTypeE(%class.SkTArray* %479, i32 1, i32 1) #10
  %594 = load %"class.std::__1::unique_ptr.38"*, %"class.std::__1::unique_ptr.38"** %494, align 8
  %595 = load i64, i64* %477, align 8
  %596 = lshr i64 %595, 1
  %597 = and i64 %596, 2147483647
  %598 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %594, i64 %597
  %599 = add i64 %595, 2
  %600 = and i64 %599, 4294967294
  %601 = and i64 %595, -4294967295
  %602 = or i64 %600, %601
  store i64 %602, i64* %477, align 8
  %603 = bitcast %"class.std::__1::unique_ptr.38"* %598 to i64*
  store i64 %593, i64* %603, align 8
  %604 = add nuw nsw i32 %566, 1
  %605 = load i32, i32* %480, align 8
  %606 = icmp slt i32 %604, %605
  br i1 %606, label %565, label %498

607:                                              ; preds = %542, %563
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %474) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %469)
  %608 = ptrtoint %"class.SkSL::Expression"* %507 to i64
  br label %609

609:                                              ; preds = %19, %4, %184, %325, %466, %607, %27
  %610 = phi i64 [ %44, %27 ], [ %608, %607 ], [ %467, %466 ], [ %326, %325 ], [ %185, %184 ], [ 0, %4 ], [ 0, %19 ]
  %611 = inttoptr i64 %610 to %"class.SkSL::Expression"*
  ret %"class.SkSL::Expression"* %611
}

declare dereferenceable(32) %"class.SkSL::AnyConstructor"* @_ZNK4SkSL10Expression16asAnyConstructorEv(%"class.SkSL::Expression"*) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

declare i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL6IRNodeD2Ev(%"class.SkSL::IRNode"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL7LiteralIbED0Ev(%"class.SkSL::Literal.44"*) unnamed_addr #7 comdat align 2 {
  %2 = bitcast %"class.SkSL::Literal.44"* %0 to i8*
  tail call void @_ZN4SkSL4Pool10FreeMemoryEPv(i8* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK4SkSL7LiteralIbE11descriptionEv(%"class.SkSL::String"* noalias sret, %"class.SkSL::Literal.44"*) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.SkSL::Literal.44", %"class.SkSL::Literal.44"* %1, i64 0, i32 1
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  %6 = select i1 %5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0)
  %7 = select i1 %5, i64 5, i64 4
  %8 = trunc i64 %7 to i8
  %9 = bitcast %"class.SkSL::String"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %10 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %9, i64 0, i32 1, i32 0
  store i8 %8, i8* %10, align 1
  %11 = bitcast %"class.SkSL::String"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 1 %6, i64 %7, i1 false) #10
  %12 = getelementptr inbounds i8, i8* %11, i64 %7
  store i8 0, i8* %12, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(184) %"class.SkSL::Type"* @_ZNK4SkSL10Expression4typeEv(%"class.SkSL::Expression"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %0, i64 0, i32 1
  %3 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %2, align 8
  ret %"class.SkSL::Type"* %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL7LiteralIbE21isCompileTimeConstantEv(%"class.SkSL::Literal.44"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK4SkSL7LiteralIbE15compareConstantERKNS_10ExpressionE(%"class.SkSL::Literal.44"*, %"class.SkSL::Expression"* dereferenceable(24)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 31
  br i1 %5, label %6, label %16

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.SkSL::Literal.44", %"class.SkSL::Literal.44"* %0, i64 0, i32 1
  %8 = load i8, i8* %7, align 8, !range !2
  %9 = icmp eq i8 %8, 0
  %10 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1
  %11 = bitcast %"class.SkSL::Expression"* %10 to i8*
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp ne i8 %12, 0
  %14 = xor i1 %9, %13
  %15 = zext i1 %14 to i32
  br label %16

16:                                               ; preds = %2, %6
  %17 = phi i32 [ %15, %6 ], [ -1, %2 ]
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL10Expression19isConstantOrUniformEv(%"class.SkSL::Expression"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.SkSL::Expression"* %0 to i1 (%"class.SkSL::Expression"*)***
  %3 = load i1 (%"class.SkSL::Expression"*)**, i1 (%"class.SkSL::Expression"*)*** %2, align 8
  %4 = getelementptr inbounds i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %3, i64 4
  %5 = load i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %4, align 8
  %6 = tail call zeroext i1 %5(%"class.SkSL::Expression"* %0) #10
  ret i1 %6
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL7LiteralIbE11hasPropertyENS_10Expression8PropertyE(%"class.SkSL::Literal.44"*, i32) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i64, i8 } @_ZNK4SkSL10Expression12coercionCostERKNS_4TypeE(%"class.SkSL::Expression"*, %"class.SkSL::Type"* dereferenceable(184)) unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.SkSL::Expression"* %0 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %4 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %3, align 8
  %5 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %4, i64 3
  %6 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %5, align 8
  %7 = tail call dereferenceable(184) %"class.SkSL::Type"* %6(%"class.SkSL::Expression"* %0) #10
  %8 = tail call { i64, i8 } @_ZNK4SkSL4Type12coercionCostERKS0_(%"class.SkSL::Type"* %7, %"class.SkSL::Type"* dereferenceable(184) %1) #10
  ret { i64, i8 } %8
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.SkSL::Expression"* @_ZNK4SkSL7LiteralIbE24getConstantSubexpressionEi(%"class.SkSL::Literal.44"*, i32) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.SkSL::Literal.44", %"class.SkSL::Literal.44"* %0, i64 0, i32 0
  ret %"class.SkSL::Expression"* %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.SkSL::Expression"* @_ZNK4SkSL7LiteralIbE5cloneEv(%"class.SkSL::Literal.44"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::Literal.44", %"class.SkSL::Literal.44"* %0, i64 0, i32 0, i32 0, i32 1
  %3 = getelementptr inbounds %"class.SkSL::Literal.44", %"class.SkSL::Literal.44"* %0, i64 0, i32 1
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = getelementptr inbounds %"class.SkSL::Literal.44", %"class.SkSL::Literal.44"* %0, i64 0, i32 0, i32 1
  %6 = bitcast %"class.SkSL::Type"** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #10
  %9 = load i32, i32* %2, align 4
  %10 = bitcast i8* %8 to i32 (...)***
  %11 = getelementptr inbounds i8, i8* %8, i64 8
  %12 = bitcast i8* %11 to i32*
  store i32 %9, i32* %12, align 8
  %13 = getelementptr inbounds i8, i8* %8, i64 12
  %14 = bitcast i8* %13 to i32*
  store i32 31, i32* %14, align 4
  %15 = getelementptr inbounds i8, i8* %8, i64 16
  %16 = bitcast i8* %15 to i64*
  store i64 %7, i64* %16, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIbEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %10, align 8
  %17 = getelementptr inbounds i8, i8* %8, i64 24
  store i8 %4, i8* %17, align 8
  %18 = bitcast i8* %8 to %"class.SkSL::Expression"*
  ret %"class.SkSL::Expression"* %18
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #8

declare void @_ZN4SkSL4Pool10FreeMemoryEPv(i8*) local_unnamed_addr #2

declare { i64, i8 } @_ZNK4SkSL4Type12coercionCostERKS0_(%"class.SkSL::Type"*, %"class.SkSL::Type"* dereferenceable(184)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN4SkSLL17is_constant_valueERKNS_10ExpressionEf(%"class.SkSL::Expression"* dereferenceable(24), float) unnamed_addr #0 {
  %3 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %0, i64 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, -33
  %6 = icmp ult i32 %5, 8
  br i1 %6, label %7, label %28

7:                                                ; preds = %2
  %8 = tail call dereferenceable(32) %"class.SkSL::AnyConstructor"* @_ZNK4SkSL10Expression16asAnyConstructorEv(%"class.SkSL::Expression"* %0) #10
  %9 = bitcast %"class.SkSL::AnyConstructor"* %8 to { %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::AnyConstructor"*)***
  %10 = load { %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::AnyConstructor"*)**, { %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::AnyConstructor"*)*** %9, align 8
  %11 = getelementptr inbounds { %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::AnyConstructor"*)** %10, i64 12
  %12 = load { %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::AnyConstructor"*)** %11, align 8
  %13 = tail call { %"class.std::__1::unique_ptr.38"*, i64 } %12(%"class.SkSL::AnyConstructor"* %8) #10
  %14 = extractvalue { %"class.std::__1::unique_ptr.38"*, i64 } %13, 0
  %15 = extractvalue { %"class.std::__1::unique_ptr.38"*, i64 } %13, 1
  %16 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %14, i64 %15
  %17 = icmp eq i64 %15, 0
  br i1 %17, label %26, label %20

18:                                               ; preds = %20
  %19 = icmp eq %"class.std::__1::unique_ptr.38"* %25, %16
  br i1 %19, label %26, label %20

20:                                               ; preds = %7, %18
  %21 = phi %"class.std::__1::unique_ptr.38"* [ %25, %18 ], [ %14, %7 ]
  %22 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %21, i64 0, i32 0, i32 0, i32 0
  %23 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %22, align 8
  %24 = tail call fastcc zeroext i1 @_ZN4SkSLL17is_constant_valueERKNS_10ExpressionEf(%"class.SkSL::Expression"* dereferenceable(24) %23, float %1)
  %25 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %21, i64 1
  br i1 %24, label %18, label %26

26:                                               ; preds = %20, %18, %7, %72, %71, %65, %61
  %27 = phi i1 [ true, %65 ], [ %76, %72 ], [ false, %71 ], [ false, %61 ], [ true, %7 ], [ false, %20 ], [ true, %18 ]
  ret i1 %27

28:                                               ; preds = %2
  %29 = icmp eq i32 %4, 55
  br label %30

30:                                               ; preds = %57, %28
  %31 = phi i1 [ %29, %28 ], [ true, %57 ]
  %32 = phi %"class.SkSL::Expression"* [ %0, %28 ], [ %49, %57 ]
  br i1 %31, label %33, label %61

33:                                               ; preds = %30
  %34 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %32, i64 1, i32 0, i32 1
  %35 = bitcast i32* %34 to i8*
  %36 = load i8, i8* %35, align 8
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %38, label %61

38:                                               ; preds = %33
  %39 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %32, i64 1
  %40 = bitcast %"class.SkSL::Expression"* %39 to %"class.SkSL::Variable"**
  %41 = load %"class.SkSL::Variable"*, %"class.SkSL::Variable"** %40, align 8
  %42 = getelementptr inbounds %"class.SkSL::Variable", %"class.SkSL::Variable"* %41, i64 0, i32 2
  %43 = load %"struct.SkSL::Modifiers"*, %"struct.SkSL::Modifiers"** %42, align 8
  %44 = getelementptr inbounds %"struct.SkSL::Modifiers", %"struct.SkSL::Modifiers"* %43, i64 0, i32 1
  %45 = load i32, i32* %44, align 8
  %46 = and i32 %45, 1
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %61, label %48

48:                                               ; preds = %38
  %49 = tail call %"class.SkSL::Expression"* @_ZNK4SkSL8Variable12initialValueEv(%"class.SkSL::Variable"* %41) #10
  %50 = icmp eq %"class.SkSL::Expression"* %49, null
  br i1 %50, label %61, label %51

51:                                               ; preds = %48
  %52 = bitcast %"class.SkSL::Expression"* %49 to i1 (%"class.SkSL::Expression"*)***
  %53 = load i1 (%"class.SkSL::Expression"*)**, i1 (%"class.SkSL::Expression"*)*** %52, align 8
  %54 = getelementptr inbounds i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %53, i64 4
  %55 = load i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %54, align 8
  %56 = tail call zeroext i1 %55(%"class.SkSL::Expression"* nonnull %49) #10
  br i1 %56, label %61, label %57

57:                                               ; preds = %51
  %58 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %49, i64 0, i32 0, i32 2
  %59 = load i32, i32* %58, align 4
  %60 = icmp eq i32 %59, 55
  br i1 %60, label %30, label %61

61:                                               ; preds = %57, %51, %48, %38, %33, %30
  %62 = phi %"class.SkSL::Expression"* [ %49, %51 ], [ %0, %30 ], [ %0, %57 ], [ %0, %48 ], [ %0, %38 ], [ %0, %33 ]
  %63 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %62, i64 0, i32 0, i32 2
  %64 = load i32, i32* %63, align 4
  switch i32 %64, label %26 [
    i32 43, label %65
    i32 45, label %72
  ]

65:                                               ; preds = %61
  %66 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %62, i64 1
  %67 = bitcast %"class.SkSL::Expression"* %66 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = sitofp i64 %68 to float
  %70 = fcmp oeq float %69, %1
  br i1 %70, label %26, label %71

71:                                               ; preds = %65
  br label %26

72:                                               ; preds = %61
  %73 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %62, i64 1
  %74 = bitcast %"class.SkSL::Expression"* %73 to float*
  %75 = load float, float* %74, align 8
  %76 = fcmp oeq float %75, %1
  br label %26
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc %"class.SkSL::Expression"* @_ZN4SkSLL15cast_expressionERKNS_7ContextERKNS_10ExpressionERKNS_4TypeE(%"class.SkSL::Context"* dereferenceable(744), %"class.SkSL::Expression"* dereferenceable(24), %"class.SkSL::Type"* dereferenceable(184)) unnamed_addr #0 {
  %4 = alloca %class.SkSTArray, align 8
  %5 = alloca %class.SkSTArray, align 8
  %6 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %4, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #10
  %7 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %4, i64 0, i32 0, i32 0, i64 16
  %8 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %4, i64 0, i32 0, i32 0, i64 24
  %9 = bitcast i8* %8 to i64*
  %10 = bitcast i8* %7 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  store i8* %6, i8** %10, align 8
  store i64 17179869184, i64* %9, align 8
  %11 = bitcast i8* %7 to %class.SkTArray*
  %12 = bitcast %"class.SkSL::Expression"* %1 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)***
  %13 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*** %12, align 8
  %14 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %13, i64 10
  %15 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %14, align 8
  %16 = call %"class.SkSL::Expression"* %15(%"class.SkSL::Expression"* %1) #10
  %17 = ptrtoint %"class.SkSL::Expression"* %16 to i64
  call void @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL10ExpressionENS0_14default_deleteIS3_EEEELb0EE12checkReallocEiNS7_11ReallocTypeE(%class.SkTArray* %11, i32 1, i32 1) #10
  %18 = bitcast i8* %7 to %"class.std::__1::unique_ptr.38"**
  %19 = load %"class.std::__1::unique_ptr.38"*, %"class.std::__1::unique_ptr.38"** %18, align 8
  %20 = load i64, i64* %9, align 8
  %21 = lshr i64 %20, 1
  %22 = and i64 %21, 2147483647
  %23 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %19, i64 %22
  %24 = add i64 %20, 2
  %25 = and i64 %24, 4294967294
  %26 = and i64 %20, -4294967295
  %27 = or i64 %25, %26
  store i64 %27, i64* %9, align 8
  %28 = bitcast %"class.std::__1::unique_ptr.38"* %23 to i64*
  store i64 %17, i64* %28, align 8
  %29 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 1
  %30 = load i32, i32* %29, align 8
  %31 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %5, i64 0, i32 0, i32 0, i64 16
  %32 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %5, i64 0, i32 0, i32 0, i64 0
  %33 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %5, i64 0, i32 0, i32 0, i64 24
  %34 = bitcast i8* %33 to i64*
  %35 = bitcast i8* %31 to i8**
  store i8* %32, i8** %35, align 8
  store i64 17179869184, i64* %34, align 8
  %36 = bitcast i8* %31 to %class.SkTArray*
  %37 = call dereferenceable(16) %class.SkTArray* @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL10ExpressionENS0_14default_deleteIS3_EEEELb0EEaSEOS7_(%class.SkTArray* %36, %class.SkTArray* dereferenceable(16) %11) #10
  %38 = call %"class.SkSL::Expression"* @_ZN4SkSL11Constructor7ConvertERKNS_7ContextEiRKNS_4TypeE9SkSTArrayILi2ENSt3__110unique_ptrINS_10ExpressionENS8_14default_deleteISA_EEEELb0EE(%"class.SkSL::Context"* dereferenceable(744) %0, i32 %30, %"class.SkSL::Type"* dereferenceable(184) %2, %class.SkSTArray* nonnull %5) #10
  %39 = load i64, i64* %34, align 8
  %40 = and i64 %39, 4294967294
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %44, label %42

42:                                               ; preds = %3
  %43 = bitcast i8* %31 to %"class.std::__1::unique_ptr.38"**
  br label %48

44:                                               ; preds = %59, %3
  %45 = phi i64 [ %39, %3 ], [ %61, %59 ]
  %46 = and i64 %45, 1
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %67, label %65

48:                                               ; preds = %59, %42
  %49 = phi i64 [ 0, %42 ], [ %60, %59 ]
  %50 = load %"class.std::__1::unique_ptr.38"*, %"class.std::__1::unique_ptr.38"** %43, align 8
  %51 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %50, i64 %49, i32 0, i32 0, i32 0
  %52 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %51, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %51, align 8
  %53 = icmp eq %"class.SkSL::Expression"* %52, null
  br i1 %53, label %59, label %54

54:                                               ; preds = %48
  %55 = bitcast %"class.SkSL::Expression"* %52 to void (%"class.SkSL::Expression"*)***
  %56 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %55, align 8
  %57 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %56, i64 1
  %58 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %57, align 8
  call void %58(%"class.SkSL::Expression"* nonnull %52) #10
  br label %59

59:                                               ; preds = %54, %48
  %60 = add nuw nsw i64 %49, 1
  %61 = load i64, i64* %34, align 8
  %62 = lshr i64 %61, 1
  %63 = and i64 %62, 2147483647
  %64 = icmp ult i64 %60, %63
  br i1 %64, label %48, label %44

65:                                               ; preds = %44
  %66 = load i8*, i8** %35, align 8
  call void @_Z7sk_freePv(i8* %66) #10
  br label %67

67:                                               ; preds = %44, %65
  %68 = load i64, i64* %9, align 8
  %69 = and i64 %68, 4294967294
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %75

71:                                               ; preds = %86, %67
  %72 = phi i64 [ %68, %67 ], [ %88, %86 ]
  %73 = and i64 %72, 1
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %94, label %92

75:                                               ; preds = %67, %86
  %76 = phi i64 [ %87, %86 ], [ 0, %67 ]
  %77 = load %"class.std::__1::unique_ptr.38"*, %"class.std::__1::unique_ptr.38"** %18, align 8
  %78 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %77, i64 %76, i32 0, i32 0, i32 0
  %79 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %78, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %78, align 8
  %80 = icmp eq %"class.SkSL::Expression"* %79, null
  br i1 %80, label %86, label %81

81:                                               ; preds = %75
  %82 = bitcast %"class.SkSL::Expression"* %79 to void (%"class.SkSL::Expression"*)***
  %83 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %82, align 8
  %84 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %83, i64 1
  %85 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %84, align 8
  call void %85(%"class.SkSL::Expression"* nonnull %79) #10
  br label %86

86:                                               ; preds = %81, %75
  %87 = add nuw nsw i64 %76, 1
  %88 = load i64, i64* %9, align 8
  %89 = lshr i64 %88, 1
  %90 = and i64 %89, 2147483647
  %91 = icmp ult i64 %87, %90
  br i1 %91, label %75, label %71

92:                                               ; preds = %71
  %93 = load i8*, i8** %10, align 8
  call void @_Z7sk_freePv(i8* %93) #10
  br label %94

94:                                               ; preds = %71, %92
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #10
  ret %"class.SkSL::Expression"* %38
}

declare %"class.SkSL::Expression"* @_ZN4SkSL16PrefixExpression4MakeERKNS_7ContextENS_8OperatorENSt3__110unique_ptrINS_10ExpressionENS5_14default_deleteIS7_EEEE(%"class.SkSL::Context"* dereferenceable(744), i32, %"class.SkSL::Expression"*) local_unnamed_addr #2

declare void @_ZN4SkSL8Analysis13UpdateRefKindEPNS_10ExpressionENS_15VariableRefKindE(%"class.SkSL::Expression"*, i8 signext) local_unnamed_addr #2

declare %"class.SkSL::Expression"* @_ZN4SkSL11Constructor7ConvertERKNS_7ContextEiRKNS_4TypeE9SkSTArrayILi2ENSt3__110unique_ptrINS_10ExpressionENS8_14default_deleteISA_EEEELb0EE(%"class.SkSL::Context"* dereferenceable(744), i32, %"class.SkSL::Type"* dereferenceable(184), %class.SkSTArray*) local_unnamed_addr #2

declare i8* @_Z15sk_malloc_throwmm(i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL10ExpressionENS0_14default_deleteIS3_EEEELb0EE12checkReallocEiNS7_11ReallocTypeE(%class.SkTArray*, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 1
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2147483647
  %9 = add nsw i32 %8, %1
  %10 = sext i32 %9 to i64
  %11 = lshr i64 %5, 33
  %12 = icmp slt i64 %11, %10
  %13 = mul nsw i64 %10, 3
  %14 = icmp sle i64 %11, %13
  %15 = and i64 %5, 1
  %16 = icmp eq i64 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = and i64 %5, 4294967296
  %20 = icmp eq i64 %19, 0
  br label %21

21:                                               ; preds = %3, %18
  %22 = phi i1 [ false, %3 ], [ %20, %18 ]
  %23 = or i1 %12, %22
  br i1 %23, label %24, label %87

24:                                               ; preds = %21
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = add nsw i64 %10, 1
  %28 = ashr i64 %27, 1
  %29 = add nsw i64 %10, 7
  %30 = add nsw i64 %29, %28
  %31 = and i64 %30, -8
  br label %32

32:                                               ; preds = %24, %26
  %33 = phi i64 [ %31, %26 ], [ %10, %24 ]
  %34 = icmp eq i64 %33, %11
  br i1 %34, label %87, label %35

35:                                               ; preds = %32
  %36 = icmp slt i64 %33, 2147483647
  %37 = select i1 %36, i64 %33, i64 2147483647
  %38 = icmp sgt i64 %37, -2147483647
  %39 = select i1 %38, i64 %37, i64 -2147483647
  %40 = shl i64 %39, 33
  %41 = and i64 %5, 8589934591
  %42 = or i64 %40, %41
  store i64 %42, i64* %4, align 8
  %43 = and i64 %39, 2147483647
  %44 = tail call i8* @_Z15sk_malloc_throwmm(i64 %43, i64 8) #10
  %45 = load i64, i64* %4, align 8
  %46 = and i64 %45, 4294967294
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %75, label %48

48:                                               ; preds = %35
  %49 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 0
  br label %50

50:                                               ; preds = %69, %48
  %51 = phi i64 [ 0, %48 ], [ %70, %69 ]
  %52 = shl nuw nsw i64 %51, 3
  %53 = getelementptr inbounds i8, i8* %44, i64 %52
  %54 = load %"class.std::__1::unique_ptr.38"*, %"class.std::__1::unique_ptr.38"** %49, align 8
  %55 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %54, i64 %51
  %56 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %55, i64 0, i32 0, i32 0, i32 0
  %57 = bitcast %"class.std::__1::unique_ptr.38"* %55 to i64*
  %58 = load i64, i64* %57, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %56, align 8
  %59 = bitcast i8* %53 to i64*
  store i64 %58, i64* %59, align 8
  %60 = load %"class.std::__1::unique_ptr.38"*, %"class.std::__1::unique_ptr.38"** %49, align 8
  %61 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %60, i64 %51, i32 0, i32 0, i32 0
  %62 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %61, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %61, align 8
  %63 = icmp eq %"class.SkSL::Expression"* %62, null
  br i1 %63, label %69, label %64

64:                                               ; preds = %50
  %65 = bitcast %"class.SkSL::Expression"* %62 to void (%"class.SkSL::Expression"*)***
  %66 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %65, align 8
  %67 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %66, i64 1
  %68 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %67, align 8
  tail call void %68(%"class.SkSL::Expression"* nonnull %62) #10
  br label %69

69:                                               ; preds = %64, %50
  %70 = add nuw nsw i64 %51, 1
  %71 = load i64, i64* %4, align 8
  %72 = lshr i64 %71, 1
  %73 = and i64 %72, 2147483647
  %74 = icmp ult i64 %70, %73
  br i1 %74, label %50, label %75

75:                                               ; preds = %69, %35
  %76 = phi i64 [ %45, %35 ], [ %71, %69 ]
  %77 = and i64 %76, 1
  %78 = icmp eq i64 %77, 0
  %79 = bitcast %class.SkTArray* %0 to i8**
  br i1 %78, label %83, label %80

80:                                               ; preds = %75
  %81 = load i8*, i8** %79, align 8
  tail call void @_Z7sk_freePv(i8* %81) #10
  %82 = load i64, i64* %4, align 8
  br label %83

83:                                               ; preds = %75, %80
  %84 = phi i64 [ %82, %80 ], [ %76, %75 ]
  store i8* %44, i8** %79, align 8
  %85 = and i64 %84, -4294967298
  %86 = or i64 %85, 1
  store i64 %86, i64* %4, align 8
  br label %87

87:                                               ; preds = %83, %32, %21
  ret void
}

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %class.SkTArray* @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL10ExpressionENS0_14default_deleteIS3_EEEELb0EEaSEOS7_(%class.SkTArray*, %class.SkTArray* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %class.SkTArray* %0, %1
  br i1 %3, label %76, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = and i64 %6, 4294967294
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 0
  br label %59

11:                                               ; preds = %70, %4
  %12 = phi i64 [ %6, %4 ], [ %72, %70 ]
  %13 = and i64 %12, -4294967295
  store i64 %13, i64* %5, align 8
  %14 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %1, i64 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = lshr i64 %15, 1
  %17 = trunc i64 %16 to i32
  %18 = and i32 %17, 2147483647
  tail call void @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL10ExpressionENS0_14default_deleteIS3_EEEELb0EE12checkReallocEiNS7_11ReallocTypeE(%class.SkTArray* %0, i32 %18, i32 0)
  %19 = load i64, i64* %14, align 8
  %20 = and i64 %19, 4294967294
  %21 = load i64, i64* %5, align 8
  %22 = and i64 %21, -4294967295
  %23 = or i64 %22, %20
  store i64 %23, i64* %5, align 8
  %24 = bitcast %class.SkTArray* %0 to i8**
  %25 = load i8*, i8** %24, align 8
  %26 = load i64, i64* %14, align 8
  %27 = and i64 %26, 4294967294
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %56, label %29

29:                                               ; preds = %11
  %30 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %1, i64 0, i32 0
  br label %31

31:                                               ; preds = %50, %29
  %32 = phi i64 [ 0, %29 ], [ %51, %50 ]
  %33 = shl nuw nsw i64 %32, 3
  %34 = getelementptr inbounds i8, i8* %25, i64 %33
  %35 = load %"class.std::__1::unique_ptr.38"*, %"class.std::__1::unique_ptr.38"** %30, align 8
  %36 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %35, i64 %32
  %37 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %36, i64 0, i32 0, i32 0, i32 0
  %38 = bitcast %"class.std::__1::unique_ptr.38"* %36 to i64*
  %39 = load i64, i64* %38, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %37, align 8
  %40 = bitcast i8* %34 to i64*
  store i64 %39, i64* %40, align 8
  %41 = load %"class.std::__1::unique_ptr.38"*, %"class.std::__1::unique_ptr.38"** %30, align 8
  %42 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %41, i64 %32, i32 0, i32 0, i32 0
  %43 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %42, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %42, align 8
  %44 = icmp eq %"class.SkSL::Expression"* %43, null
  br i1 %44, label %50, label %45

45:                                               ; preds = %31
  %46 = bitcast %"class.SkSL::Expression"* %43 to void (%"class.SkSL::Expression"*)***
  %47 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %46, align 8
  %48 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %47, i64 1
  %49 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %48, align 8
  tail call void %49(%"class.SkSL::Expression"* nonnull %43) #10
  br label %50

50:                                               ; preds = %45, %31
  %51 = add nuw nsw i64 %32, 1
  %52 = load i64, i64* %14, align 8
  %53 = lshr i64 %52, 1
  %54 = and i64 %53, 2147483647
  %55 = icmp ult i64 %51, %54
  br i1 %55, label %31, label %56

56:                                               ; preds = %50, %11
  %57 = phi i64 [ %26, %11 ], [ %52, %50 ]
  %58 = and i64 %57, -4294967295
  store i64 %58, i64* %14, align 8
  br label %76

59:                                               ; preds = %9, %70
  %60 = phi i64 [ 0, %9 ], [ %71, %70 ]
  %61 = load %"class.std::__1::unique_ptr.38"*, %"class.std::__1::unique_ptr.38"** %10, align 8
  %62 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %61, i64 %60, i32 0, i32 0, i32 0
  %63 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %62, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %62, align 8
  %64 = icmp eq %"class.SkSL::Expression"* %63, null
  br i1 %64, label %70, label %65

65:                                               ; preds = %59
  %66 = bitcast %"class.SkSL::Expression"* %63 to void (%"class.SkSL::Expression"*)***
  %67 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %66, align 8
  %68 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %67, i64 1
  %69 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %68, align 8
  tail call void %69(%"class.SkSL::Expression"* nonnull %63) #10
  br label %70

70:                                               ; preds = %59, %65
  %71 = add nuw nsw i64 %60, 1
  %72 = load i64, i64* %5, align 8
  %73 = lshr i64 %72, 1
  %74 = and i64 %73, 2147483647
  %75 = icmp ult i64 %71, %74
  br i1 %75, label %59, label %11

76:                                               ; preds = %2, %56
  ret %class.SkTArray* %0
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL7LiteralIlED0Ev(%"class.SkSL::Literal"*) unnamed_addr #7 comdat align 2 {
  %2 = bitcast %"class.SkSL::Literal"* %0 to i8*
  tail call void @_ZN4SkSL4Pool10FreeMemoryEPv(i8* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK4SkSL7LiteralIlE11descriptionEv(%"class.SkSL::String"* noalias sret, %"class.SkSL::Literal"*) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.SkSL::Literal", %"class.SkSL::Literal"* %1, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  tail call void @_ZN4SkSL9to_stringEl(%"class.SkSL::String"* sret %0, i64 %4) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL7LiteralIlE21isCompileTimeConstantEv(%"class.SkSL::Literal"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK4SkSL7LiteralIlE15compareConstantERKNS_10ExpressionE(%"class.SkSL::Literal"*, %"class.SkSL::Expression"* dereferenceable(24)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 43
  br i1 %5, label %6, label %14

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.SkSL::Literal", %"class.SkSL::Literal"* %0, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1
  %10 = bitcast %"class.SkSL::Expression"* %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = icmp eq i64 %8, %11
  %13 = zext i1 %12 to i32
  br label %14

14:                                               ; preds = %2, %6
  %15 = phi i32 [ %13, %6 ], [ -1, %2 ]
  ret i32 %15
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL7LiteralIlE11hasPropertyENS_10Expression8PropertyE(%"class.SkSL::Literal"*, i32) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i64, i8 } @_ZNK4SkSL7LiteralIlE12coercionCostERKNS_4TypeE(%"class.SkSL::Literal"*, %"class.SkSL::Type"* dereferenceable(184)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %1, i64 0, i32 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp ult i32 %4, 3
  br i1 %5, label %20, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %1, i64 0, i32 3
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %20, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.SkSL::Literal", %"class.SkSL::Literal"* %0, i64 0, i32 0
  %12 = bitcast %"class.SkSL::Literal"* %0 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %13 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %12, align 8
  %14 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %13, i64 3
  %15 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %14, align 8
  %16 = tail call dereferenceable(184) %"class.SkSL::Type"* %15(%"class.SkSL::Expression"* %11) #10
  %17 = tail call { i64, i8 } @_ZNK4SkSL4Type12coercionCostERKS0_(%"class.SkSL::Type"* %16, %"class.SkSL::Type"* dereferenceable(184) %1) #10
  %18 = extractvalue { i64, i8 } %17, 0
  %19 = extractvalue { i64, i8 } %17, 1
  br label %20

20:                                               ; preds = %2, %6, %10
  %21 = phi i64 [ %18, %10 ], [ 0, %6 ], [ 0, %2 ]
  %22 = phi i8 [ %19, %10 ], [ 0, %6 ], [ 0, %2 ]
  %23 = insertvalue { i64, i8 } undef, i64 %21, 0
  %24 = insertvalue { i64, i8 } %23, i8 %22, 1
  ret { i64, i8 } %24
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.SkSL::Expression"* @_ZNK4SkSL7LiteralIlE24getConstantSubexpressionEi(%"class.SkSL::Literal"*, i32) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.SkSL::Literal", %"class.SkSL::Literal"* %0, i64 0, i32 0
  ret %"class.SkSL::Expression"* %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.SkSL::Expression"* @_ZNK4SkSL7LiteralIlE5cloneEv(%"class.SkSL::Literal"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::Literal", %"class.SkSL::Literal"* %0, i64 0, i32 0, i32 0, i32 1
  %3 = getelementptr inbounds %"class.SkSL::Literal", %"class.SkSL::Literal"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.SkSL::Type"** %3 to <2 x i64>*
  %5 = load <2 x i64>, <2 x i64>* %4, align 8
  %6 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #10
  %7 = load i32, i32* %2, align 4
  %8 = bitcast i8* %6 to i32 (...)***
  %9 = getelementptr inbounds i8, i8* %6, i64 8
  %10 = bitcast i8* %9 to i32*
  store i32 %7, i32* %10, align 8
  %11 = getelementptr inbounds i8, i8* %6, i64 12
  %12 = bitcast i8* %11 to i32*
  store i32 43, i32* %12, align 4
  %13 = getelementptr inbounds i8, i8* %6, i64 16
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIlEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  %14 = bitcast i8* %13 to <2 x i64>*
  store <2 x i64> %5, <2 x i64>* %14, align 8
  %15 = bitcast i8* %6 to %"class.SkSL::Expression"*
  ret %"class.SkSL::Expression"* %15
}

declare void @_ZN4SkSL9to_stringEl(%"class.SkSL::String"* sret, i64) local_unnamed_addr #2

declare zeroext i1 @_ZNK4SkSL14StringFragmenteqES0_(%"struct.SkSL::StringFragment"*, i8*, i64) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL16ConstructorSplatD0Ev(%"class.SkSL::ConstructorSplat"*) unnamed_addr #7 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::ConstructorSplat", %"class.SkSL::ConstructorSplat"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN4SkSL25SingleArgumentConstructorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.SkSL::ConstructorSplat", %"class.SkSL::ConstructorSplat"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %3, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %3, align 8
  %5 = icmp eq %"class.SkSL::Expression"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.SkSL::Expression"* %4 to void (%"class.SkSL::Expression"*)***
  %8 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %8, i64 1
  %10 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %9, align 8
  tail call void %10(%"class.SkSL::Expression"* nonnull %4) #10
  br label %11

11:                                               ; preds = %6, %1
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN4SkSL14AnyConstructorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %12 = getelementptr inbounds %"class.SkSL::ConstructorSplat", %"class.SkSL::ConstructorSplat"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %13 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %12, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %12, align 8
  %14 = icmp eq %"class.SkSL::Expression"* %13, null
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = bitcast %"class.SkSL::Expression"* %13 to void (%"class.SkSL::Expression"*)***
  %17 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %16, align 8
  %18 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %17, i64 1
  %19 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %18, align 8
  tail call void %19(%"class.SkSL::Expression"* nonnull %13) #10
  br label %20

20:                                               ; preds = %11, %15
  %21 = bitcast %"class.SkSL::ConstructorSplat"* %0 to i8*
  tail call void @_ZN4SkSL4Pool10FreeMemoryEPv(i8* %21) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK4SkSL14AnyConstructor11descriptionEv(%"class.SkSL::String"* noalias sret, %"class.SkSL::AnyConstructor"*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.SkSL::String", align 8
  %4 = alloca %"class.SkSL::String", align 8
  %5 = bitcast %"class.SkSL::String"* %3 to i8*
  %6 = bitcast %"class.SkSL::String"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 -86, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #10
  %7 = getelementptr inbounds %"class.SkSL::AnyConstructor", %"class.SkSL::AnyConstructor"* %1, i64 0, i32 0
  %8 = bitcast %"class.SkSL::AnyConstructor"* %1 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %9 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %8, align 8
  %10 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %9, i64 3
  %11 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %10, align 8
  %12 = tail call dereferenceable(184) %"class.SkSL::Type"* %11(%"class.SkSL::Expression"* %7) #10
  %13 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %12, i64 0, i32 18
  %14 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %13, align 8, !noalias !15
  %15 = icmp eq %"class.SkSL::Type"* %14, null
  %16 = select i1 %15, %"class.SkSL::Type"* %12, %"class.SkSL::Type"* %14
  %17 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %16, i64 0, i32 0, i32 1, i32 0
  %18 = load i8*, i8** %17, align 8, !noalias !15
  %19 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %16, i64 0, i32 0, i32 1, i32 1
  %20 = load i64, i64* %19, align 8, !noalias !15
  %21 = icmp ugt i64 %20, -17
  br i1 %21, label %22, label %24

22:                                               ; preds = %2
  %23 = bitcast %"class.SkSL::String"* %3 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %23) #11
  unreachable

24:                                               ; preds = %2
  %25 = icmp ult i64 %20, 23
  br i1 %25, label %35, label %26

26:                                               ; preds = %24
  %27 = add nuw i64 %20, 16
  %28 = and i64 %27, -16
  %29 = tail call i8* @_Znwm(i64 %28) #12
  %30 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %29, i8** %30, align 8, !alias.scope !15
  %31 = or i64 %28, -9223372036854775808
  %32 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %31, i64* %32, align 8, !alias.scope !15
  %33 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %20, i64* %33, align 8, !alias.scope !15
  %34 = bitcast %"class.SkSL::String"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %40

35:                                               ; preds = %24
  %36 = trunc i64 %20 to i8
  %37 = bitcast %"class.SkSL::String"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %38 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %37, i64 0, i32 1, i32 0
  store i8 %36, i8* %38, align 1, !alias.scope !15
  %39 = icmp eq i64 %20, 0
  br i1 %39, label %43, label %40

40:                                               ; preds = %35, %26
  %41 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %37, %35 ], [ %34, %26 ]
  %42 = phi i8* [ %5, %35 ], [ %29, %26 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %42, i8* align 1 %18, i64 %20, i1 false) #10
  br label %43

43:                                               ; preds = %35, %40
  %44 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %37, %35 ], [ %41, %40 ]
  %45 = phi i8* [ %5, %35 ], [ %42, %40 ]
  %46 = getelementptr inbounds i8, i8* %45, i64 %20
  store i8 0, i8* %46, align 1
  call void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* sret %0, %"class.SkSL::String"* nonnull %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)) #10
  %47 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %44, i64 0, i32 1, i32 0
  %48 = load i8, i8* %47, align 1
  %49 = icmp slt i8 %48, 0
  br i1 %49, label %50, label %53

50:                                               ; preds = %43
  %51 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  call void @_ZdlPv(i8* %52) #12
  br label %53

53:                                               ; preds = %43, %50
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #10
  %54 = bitcast %"class.SkSL::AnyConstructor"* %1 to { %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::AnyConstructor"*)***
  %55 = load { %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::AnyConstructor"*)**, { %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::AnyConstructor"*)*** %54, align 8
  %56 = getelementptr inbounds { %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::AnyConstructor"*)** %55, i64 12
  %57 = load { %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::AnyConstructor"*)** %56, align 8
  %58 = call { %"class.std::__1::unique_ptr.38"*, i64 } %57(%"class.SkSL::AnyConstructor"* %1) #10
  %59 = extractvalue { %"class.std::__1::unique_ptr.38"*, i64 } %58, 0
  %60 = extractvalue { %"class.std::__1::unique_ptr.38"*, i64 } %58, 1
  %61 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %59, i64 %60
  %62 = icmp eq i64 %60, 0
  br i1 %62, label %84, label %63

63:                                               ; preds = %53
  %64 = bitcast %"class.SkSL::String"* %4 to i8*
  %65 = bitcast %"class.SkSL::String"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %66 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %65, i64 0, i32 1, i32 0
  %67 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %68 = call dereferenceable(24) %"class.SkSL::String"* @_ZN4SkSL6StringpLEPKc(%"class.SkSL::String"* %0, i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.7, i64 0, i64 0)) #10
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %64) #10
  %69 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %59, i64 0, i32 0, i32 0, i32 0
  %70 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %69, align 8
  %71 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %70, i64 0, i32 0
  %72 = bitcast %"class.SkSL::Expression"* %70 to void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)***
  %73 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)**, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*** %72, align 8
  %74 = getelementptr inbounds void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %73, i64 2
  %75 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %74, align 8
  call void %75(%"class.SkSL::String"* nonnull sret %4, %"class.SkSL::IRNode"* %71) #10
  %76 = call dereferenceable(24) %"class.SkSL::String"* @_ZN4SkSL6StringpLERKS0_(%"class.SkSL::String"* %0, %"class.SkSL::String"* nonnull dereferenceable(24) %4) #10
  %77 = load i8, i8* %66, align 1
  %78 = icmp slt i8 %77, 0
  br i1 %78, label %79, label %81

79:                                               ; preds = %63
  %80 = load i8*, i8** %67, align 8
  call void @_ZdlPv(i8* %80) #12
  br label %81

81:                                               ; preds = %79, %63
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %64) #10
  %82 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %59, i64 1
  %83 = icmp eq i64 %60, 1
  br i1 %83, label %84, label %86

84:                                               ; preds = %81, %101, %53
  %85 = call dereferenceable(24) %"class.SkSL::String"* @_ZN4SkSL6StringpLEPKc(%"class.SkSL::String"* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)) #10
  ret void

86:                                               ; preds = %81, %101
  %87 = phi %"class.std::__1::unique_ptr.38"* [ %102, %101 ], [ %82, %81 ]
  %88 = call dereferenceable(24) %"class.SkSL::String"* @_ZN4SkSL6StringpLEPKc(%"class.SkSL::String"* %0, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0)) #10
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %64) #10
  %89 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %87, i64 0, i32 0, i32 0, i32 0
  %90 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %89, align 8
  %91 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %90, i64 0, i32 0
  %92 = bitcast %"class.SkSL::Expression"* %90 to void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)***
  %93 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)**, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*** %92, align 8
  %94 = getelementptr inbounds void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %93, i64 2
  %95 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %94, align 8
  call void %95(%"class.SkSL::String"* nonnull sret %4, %"class.SkSL::IRNode"* %91) #10
  %96 = call dereferenceable(24) %"class.SkSL::String"* @_ZN4SkSL6StringpLERKS0_(%"class.SkSL::String"* %0, %"class.SkSL::String"* nonnull dereferenceable(24) %4) #10
  %97 = load i8, i8* %66, align 1
  %98 = icmp slt i8 %97, 0
  br i1 %98, label %99, label %101

99:                                               ; preds = %86
  %100 = load i8*, i8** %67, align 8
  call void @_ZdlPv(i8* %100) #12
  br label %101

101:                                              ; preds = %86, %99
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %64) #10
  %102 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %87, i64 1
  %103 = icmp eq %"class.std::__1::unique_ptr.38"* %102, %61
  br i1 %103, label %84, label %86, !llvm.loop !20
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL14AnyConstructor21isCompileTimeConstantEv(%"class.SkSL::AnyConstructor"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.SkSL::AnyConstructor"* %0 to { %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::AnyConstructor"*)***
  %3 = load { %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::AnyConstructor"*)**, { %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::AnyConstructor"*)*** %2, align 8
  %4 = getelementptr inbounds { %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::AnyConstructor"*)** %3, i64 12
  %5 = load { %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::AnyConstructor"*)** %4, align 8
  %6 = tail call { %"class.std::__1::unique_ptr.38"*, i64 } %5(%"class.SkSL::AnyConstructor"* %0) #10
  %7 = extractvalue { %"class.std::__1::unique_ptr.38"*, i64 } %6, 0
  %8 = extractvalue { %"class.std::__1::unique_ptr.38"*, i64 } %6, 1
  %9 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %7, i64 %8
  %10 = icmp eq i64 %8, 0
  br i1 %10, label %23, label %13

11:                                               ; preds = %13
  %12 = icmp eq %"class.std::__1::unique_ptr.38"* %22, %9
  br i1 %12, label %23, label %13

13:                                               ; preds = %1, %11
  %14 = phi %"class.std::__1::unique_ptr.38"* [ %22, %11 ], [ %7, %1 ]
  %15 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %14, i64 0, i32 0, i32 0, i32 0
  %16 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %15, align 8
  %17 = bitcast %"class.SkSL::Expression"* %16 to i1 (%"class.SkSL::Expression"*)***
  %18 = load i1 (%"class.SkSL::Expression"*)**, i1 (%"class.SkSL::Expression"*)*** %17, align 8
  %19 = getelementptr inbounds i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %18, i64 4
  %20 = load i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %19, align 8
  %21 = tail call zeroext i1 %20(%"class.SkSL::Expression"* %16) #10
  %22 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %14, i64 1
  br i1 %21, label %11, label %23

23:                                               ; preds = %13, %11, %1
  %24 = phi i1 [ true, %1 ], [ true, %11 ], [ false, %13 ]
  ret i1 %24
}

declare i32 @_ZNK4SkSL14AnyConstructor15compareConstantERKNS_10ExpressionE(%"class.SkSL::AnyConstructor"*, %"class.SkSL::Expression"* dereferenceable(24)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL14AnyConstructor19isConstantOrUniformEv(%"class.SkSL::AnyConstructor"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.SkSL::AnyConstructor"* %0 to { %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::AnyConstructor"*)***
  %3 = load { %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::AnyConstructor"*)**, { %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::AnyConstructor"*)*** %2, align 8
  %4 = getelementptr inbounds { %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::AnyConstructor"*)** %3, i64 12
  %5 = load { %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::AnyConstructor"*)** %4, align 8
  %6 = tail call { %"class.std::__1::unique_ptr.38"*, i64 } %5(%"class.SkSL::AnyConstructor"* %0) #10
  %7 = extractvalue { %"class.std::__1::unique_ptr.38"*, i64 } %6, 0
  %8 = extractvalue { %"class.std::__1::unique_ptr.38"*, i64 } %6, 1
  %9 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %7, i64 %8
  %10 = icmp eq i64 %8, 0
  br i1 %10, label %23, label %13

11:                                               ; preds = %13
  %12 = icmp eq %"class.std::__1::unique_ptr.38"* %22, %9
  br i1 %12, label %23, label %13

13:                                               ; preds = %1, %11
  %14 = phi %"class.std::__1::unique_ptr.38"* [ %22, %11 ], [ %7, %1 ]
  %15 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %14, i64 0, i32 0, i32 0, i32 0
  %16 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %15, align 8
  %17 = bitcast %"class.SkSL::Expression"* %16 to i1 (%"class.SkSL::Expression"*)***
  %18 = load i1 (%"class.SkSL::Expression"*)**, i1 (%"class.SkSL::Expression"*)*** %17, align 8
  %19 = getelementptr inbounds i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %18, i64 6
  %20 = load i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %19, align 8
  %21 = tail call zeroext i1 %20(%"class.SkSL::Expression"* %16) #10
  %22 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %14, i64 1
  br i1 %21, label %11, label %23

23:                                               ; preds = %13, %11, %1
  %24 = phi i1 [ true, %1 ], [ true, %11 ], [ false, %13 ]
  ret i1 %24
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL14AnyConstructor11hasPropertyENS_10Expression8PropertyE(%"class.SkSL::AnyConstructor"*, i32) unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.SkSL::AnyConstructor"* %0 to { %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::AnyConstructor"*)***
  %4 = load { %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::AnyConstructor"*)**, { %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::AnyConstructor"*)*** %3, align 8
  %5 = getelementptr inbounds { %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::AnyConstructor"*)** %4, i64 12
  %6 = load { %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr.38"*, i64 } (%"class.SkSL::AnyConstructor"*)** %5, align 8
  %7 = tail call { %"class.std::__1::unique_ptr.38"*, i64 } %6(%"class.SkSL::AnyConstructor"* %0) #10
  %8 = extractvalue { %"class.std::__1::unique_ptr.38"*, i64 } %7, 0
  %9 = extractvalue { %"class.std::__1::unique_ptr.38"*, i64 } %7, 1
  %10 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %8, i64 %9
  %11 = icmp eq i64 %9, 0
  br i1 %11, label %24, label %14

12:                                               ; preds = %14
  %13 = icmp eq %"class.std::__1::unique_ptr.38"* %23, %10
  br i1 %13, label %24, label %14

14:                                               ; preds = %2, %12
  %15 = phi %"class.std::__1::unique_ptr.38"* [ %23, %12 ], [ %8, %2 ]
  %16 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %15, i64 0, i32 0, i32 0, i32 0
  %17 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %16, align 8
  %18 = bitcast %"class.SkSL::Expression"* %17 to i1 (%"class.SkSL::Expression"*, i32)***
  %19 = load i1 (%"class.SkSL::Expression"*, i32)**, i1 (%"class.SkSL::Expression"*, i32)*** %18, align 8
  %20 = getelementptr inbounds i1 (%"class.SkSL::Expression"*, i32)*, i1 (%"class.SkSL::Expression"*, i32)** %19, i64 7
  %21 = load i1 (%"class.SkSL::Expression"*, i32)*, i1 (%"class.SkSL::Expression"*, i32)** %20, align 8
  %22 = tail call zeroext i1 %21(%"class.SkSL::Expression"* %17, i32 %1) #10
  %23 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %15, i64 1
  br i1 %22, label %24, label %12

24:                                               ; preds = %12, %14, %2
  %25 = phi i1 [ false, %2 ], [ true, %14 ], [ false, %12 ]
  ret i1 %25
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.SkSL::Expression"* @_ZNK4SkSL16ConstructorSplat24getConstantSubexpressionEi(%"class.SkSL::ConstructorSplat"*, i32) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.SkSL::ConstructorSplat", %"class.SkSL::ConstructorSplat"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %3, align 8
  %5 = bitcast %"class.SkSL::Expression"* %4 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)***
  %6 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*** %5, align 8
  %7 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)** %6, i64 9
  %8 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)** %7, align 8
  %9 = tail call %"class.SkSL::Expression"* %8(%"class.SkSL::Expression"* %4, i32 0) #10
  ret %"class.SkSL::Expression"* %9
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.SkSL::Expression"* @_ZNK4SkSL16ConstructorSplat5cloneEv(%"class.SkSL::ConstructorSplat"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::ConstructorSplat", %"class.SkSL::ConstructorSplat"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %3 = getelementptr inbounds %"class.SkSL::ConstructorSplat", %"class.SkSL::ConstructorSplat"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %4 = bitcast %"class.SkSL::Type"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.SkSL::ConstructorSplat", %"class.SkSL::ConstructorSplat"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %7 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %6, align 8
  %8 = bitcast %"class.SkSL::Expression"* %7 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)***
  %9 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*** %8, align 8
  %10 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %9, i64 10
  %11 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %10, align 8
  %12 = tail call %"class.SkSL::Expression"* %11(%"class.SkSL::Expression"* %7) #10
  %13 = ptrtoint %"class.SkSL::Expression"* %12 to i64
  %14 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 40) #10
  %15 = load i32, i32* %2, align 4
  %16 = bitcast i8* %14 to i32 (...)***
  %17 = getelementptr inbounds i8, i8* %14, i64 8
  %18 = bitcast i8* %17 to i32*
  store i32 %15, i32* %18, align 8
  %19 = getelementptr inbounds i8, i8* %14, i64 12
  %20 = bitcast i8* %19 to i32*
  store i32 39, i32* %20, align 4
  %21 = getelementptr inbounds i8, i8* %14, i64 16
  %22 = bitcast i8* %21 to i64*
  store i64 %5, i64* %22, align 8
  %23 = getelementptr inbounds i8, i8* %14, i64 24
  %24 = bitcast i8* %23 to i64*
  store i64 0, i64* %24, align 8
  %25 = getelementptr inbounds i8, i8* %14, i64 32
  %26 = bitcast i8* %25 to i64*
  store i64 %13, i64* %26, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN4SkSL16ConstructorSplatE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %16, align 8
  %27 = bitcast i8* %14 to %"class.SkSL::Expression"*
  ret %"class.SkSL::Expression"* %27
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.std::__1::unique_ptr.38"*, i64 } @_ZN4SkSL25SingleArgumentConstructor12argumentSpanEv(%"class.SkSL::SingleArgumentConstructor"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::SingleArgumentConstructor", %"class.SkSL::SingleArgumentConstructor"* %0, i64 0, i32 1
  %3 = insertvalue { %"class.std::__1::unique_ptr.38"*, i64 } undef, %"class.std::__1::unique_ptr.38"* %2, 0
  %4 = insertvalue { %"class.std::__1::unique_ptr.38"*, i64 } %3, i64 1, 1
  ret { %"class.std::__1::unique_ptr.38"*, i64 } %4
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.std::__1::unique_ptr.38"*, i64 } @_ZNK4SkSL25SingleArgumentConstructor12argumentSpanEv(%"class.SkSL::SingleArgumentConstructor"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::SingleArgumentConstructor", %"class.SkSL::SingleArgumentConstructor"* %0, i64 0, i32 1
  %3 = insertvalue { %"class.std::__1::unique_ptr.38"*, i64 } undef, %"class.std::__1::unique_ptr.38"* %2, 0
  %4 = insertvalue { %"class.std::__1::unique_ptr.38"*, i64 } %3, i64 1, 1
  ret { %"class.std::__1::unique_ptr.38"*, i64 } %4
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL25SingleArgumentConstructorD2Ev(%"class.SkSL::SingleArgumentConstructor"*) unnamed_addr #7 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::SingleArgumentConstructor", %"class.SkSL::SingleArgumentConstructor"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN4SkSL25SingleArgumentConstructorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.SkSL::SingleArgumentConstructor", %"class.SkSL::SingleArgumentConstructor"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %3, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %3, align 8
  %5 = icmp eq %"class.SkSL::Expression"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.SkSL::Expression"* %4 to void (%"class.SkSL::Expression"*)***
  %8 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %8, i64 1
  %10 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %9, align 8
  tail call void %10(%"class.SkSL::Expression"* nonnull %4) #10
  br label %11

11:                                               ; preds = %1, %6
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN4SkSL14AnyConstructorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %12 = getelementptr inbounds %"class.SkSL::SingleArgumentConstructor", %"class.SkSL::SingleArgumentConstructor"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %13 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %12, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %12, align 8
  %14 = icmp eq %"class.SkSL::Expression"* %13, null
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = bitcast %"class.SkSL::Expression"* %13 to void (%"class.SkSL::Expression"*)***
  %17 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %16, align 8
  %18 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %17, i64 1
  %19 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %18, align 8
  tail call void %19(%"class.SkSL::Expression"* nonnull %13) #10
  br label %20

20:                                               ; preds = %11, %15
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL25SingleArgumentConstructorD0Ev(%"class.SkSL::SingleArgumentConstructor"*) unnamed_addr #7 comdat align 2 {
  tail call void @llvm.trap() #11
  unreachable
}

declare %"class.SkSL::Expression"* @_ZNK4SkSL14AnyConstructor24getConstantSubexpressionEi(%"class.SkSL::AnyConstructor"*, i32) unnamed_addr #2

declare void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* sret, %"class.SkSL::String"*, i8*) local_unnamed_addr #2

declare dereferenceable(24) %"class.SkSL::String"* @_ZN4SkSL6StringpLEPKc(%"class.SkSL::String"*, i8*) local_unnamed_addr #2

declare dereferenceable(24) %"class.SkSL::String"* @_ZN4SkSL6StringpLERKS0_(%"class.SkSL::String"*, %"class.SkSL::String"* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #9

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL7LiteralIfED0Ev(%"class.SkSL::Literal.13"*) unnamed_addr #7 comdat align 2 {
  %2 = bitcast %"class.SkSL::Literal.13"* %0 to i8*
  tail call void @_ZN4SkSL4Pool10FreeMemoryEPv(i8* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK4SkSL7LiteralIfE11descriptionEv(%"class.SkSL::String"* noalias sret, %"class.SkSL::Literal.13"*) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.SkSL::Literal.13", %"class.SkSL::Literal.13"* %1, i64 0, i32 1
  %4 = load float, float* %3, align 8
  %5 = fpext float %4 to double
  tail call void @_ZN4SkSL9to_stringEd(%"class.SkSL::String"* sret %0, double %5) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL7LiteralIfE21isCompileTimeConstantEv(%"class.SkSL::Literal.13"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK4SkSL7LiteralIfE15compareConstantERKNS_10ExpressionE(%"class.SkSL::Literal.13"*, %"class.SkSL::Expression"* dereferenceable(24)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 45
  br i1 %5, label %6, label %14

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.SkSL::Literal.13", %"class.SkSL::Literal.13"* %0, i64 0, i32 1
  %8 = load float, float* %7, align 8
  %9 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1
  %10 = bitcast %"class.SkSL::Expression"* %9 to float*
  %11 = load float, float* %10, align 8
  %12 = fcmp oeq float %8, %11
  %13 = zext i1 %12 to i32
  br label %14

14:                                               ; preds = %2, %6
  %15 = phi i32 [ %13, %6 ], [ -1, %2 ]
  ret i32 %15
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL7LiteralIfE11hasPropertyENS_10Expression8PropertyE(%"class.SkSL::Literal.13"*, i32) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i64, i8 } @_ZNK4SkSL7LiteralIfE12coercionCostERKNS_4TypeE(%"class.SkSL::Literal.13"*, %"class.SkSL::Type"* dereferenceable(184)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %1, i64 0, i32 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %16, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.SkSL::Literal.13", %"class.SkSL::Literal.13"* %0, i64 0, i32 0
  %8 = bitcast %"class.SkSL::Literal.13"* %0 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %9 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %8, align 8
  %10 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %9, i64 3
  %11 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %10, align 8
  %12 = tail call dereferenceable(184) %"class.SkSL::Type"* %11(%"class.SkSL::Expression"* %7) #10
  %13 = tail call { i64, i8 } @_ZNK4SkSL4Type12coercionCostERKS0_(%"class.SkSL::Type"* %12, %"class.SkSL::Type"* dereferenceable(184) %1) #10
  %14 = extractvalue { i64, i8 } %13, 0
  %15 = extractvalue { i64, i8 } %13, 1
  br label %16

16:                                               ; preds = %2, %6
  %17 = phi i64 [ %14, %6 ], [ 0, %2 ]
  %18 = phi i8 [ %15, %6 ], [ 0, %2 ]
  %19 = insertvalue { i64, i8 } undef, i64 %17, 0
  %20 = insertvalue { i64, i8 } %19, i8 %18, 1
  ret { i64, i8 } %20
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.SkSL::Expression"* @_ZNK4SkSL7LiteralIfE24getConstantSubexpressionEi(%"class.SkSL::Literal.13"*, i32) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.SkSL::Literal.13", %"class.SkSL::Literal.13"* %0, i64 0, i32 0
  ret %"class.SkSL::Expression"* %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.SkSL::Expression"* @_ZNK4SkSL7LiteralIfE5cloneEv(%"class.SkSL::Literal.13"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::Literal.13", %"class.SkSL::Literal.13"* %0, i64 0, i32 0, i32 0, i32 1
  %3 = getelementptr inbounds %"class.SkSL::Literal.13", %"class.SkSL::Literal.13"* %0, i64 0, i32 1
  %4 = bitcast float* %3 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %"class.SkSL::Literal.13", %"class.SkSL::Literal.13"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.SkSL::Type"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #10
  %10 = load i32, i32* %2, align 4
  %11 = bitcast i8* %9 to i32 (...)***
  %12 = getelementptr inbounds i8, i8* %9, i64 8
  %13 = bitcast i8* %12 to i32*
  store i32 %10, i32* %13, align 8
  %14 = getelementptr inbounds i8, i8* %9, i64 12
  %15 = bitcast i8* %14 to i32*
  store i32 45, i32* %15, align 4
  %16 = getelementptr inbounds i8, i8* %9, i64 16
  %17 = bitcast i8* %16 to i64*
  store i64 %8, i64* %17, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIfEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8
  %18 = getelementptr inbounds i8, i8* %9, i64 24
  %19 = bitcast i8* %18 to i32*
  store i32 %5, i32* %19, align 8
  %20 = bitcast i8* %9 to %"class.SkSL::Expression"*
  ret %"class.SkSL::Expression"* %20
}

declare void @_ZN4SkSL9to_stringEd(%"class.SkSL::String"* sret, double) local_unnamed_addr #2

declare %"class.SkSL::Expression"* @_ZN4SkSL19ConstructorCompound4MakeERKNS_7ContextEiRKNS_4TypeE9SkSTArrayILi2ENSt3__110unique_ptrINS_10ExpressionENS8_14default_deleteISA_EEEELb0EE(%"class.SkSL::Context"* dereferenceable(744), i32, %"class.SkSL::Type"* dereferenceable(184), %class.SkSTArray*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { cold noreturn nounwind }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { nounwind }
attributes #11 = { noreturn nounwind }
attributes #12 = { builtin nounwind }
attributes #13 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN4SkSLL12splat_scalarERKNS_10ExpressionERKNS_4TypeE: argument 0"}
!5 = distinct !{!5, !"_ZN4SkSLL12splat_scalarERKNS_10ExpressionERKNS_4TypeE"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZN4SkSLL12splat_scalarERKNS_10ExpressionERKNS_4TypeE: argument 0"}
!8 = distinct !{!8, !"_ZN4SkSLL12splat_scalarERKNS_10ExpressionERKNS_4TypeE"}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZN4SkSLL12splat_scalarERKNS_10ExpressionERKNS_4TypeE: argument 0"}
!11 = distinct !{!11, !"_ZN4SkSLL12splat_scalarERKNS_10ExpressionERKNS_4TypeE"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_ZN4SkSLL12splat_scalarERKNS_10ExpressionERKNS_4TypeE: argument 0"}
!14 = distinct !{!14, !"_ZN4SkSLL12splat_scalarERKNS_10ExpressionERKNS_4TypeE"}
!15 = !{!16, !18}
!16 = distinct !{!16, !17, !"_ZNK4SkSL4Type11displayNameEv: argument 0"}
!17 = distinct !{!17, !"_ZNK4SkSL4Type11displayNameEv"}
!18 = distinct !{!18, !19, !"_ZNK4SkSL4Type11descriptionEv: argument 0"}
!19 = distinct !{!19, !"_ZNK4SkSL4Type11descriptionEv"}
!20 = distinct !{!20, !21}
!21 = !{!"llvm.loop.unroll.disable"}
