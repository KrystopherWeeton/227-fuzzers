; ModuleID = '../../third_party/libvpx/source/libvpx/vpx_util/vpx_thread.c'
source_filename = "../../third_party/libvpx/source/libvpx/vpx_util/vpx_thread.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.VPxWorkerInterface = type { void (%struct.VPxWorker*)*, i32 (%struct.VPxWorker*)*, i32 (%struct.VPxWorker*)*, void (%struct.VPxWorker*)*, void (%struct.VPxWorker*)*, void (%struct.VPxWorker*)* }
%struct.VPxWorker = type { %struct.VPxWorkerImpl*, i32, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.VPxWorkerImpl = type { %union.pthread_mutex_t, %union.pthread_cond_t, i64 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon.0, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon = type { i64 }
%union.anon.0 = type { i64 }
%union.pthread_mutexattr_t = type { i32 }
%union.pthread_condattr_t = type { i32 }
%union.pthread_attr_t = type { i64, [48 x i8] }

@g_worker_interface = internal global %struct.VPxWorkerInterface { void (%struct.VPxWorker*)* @init, i32 (%struct.VPxWorker*)* @reset, i32 (%struct.VPxWorker*)* @sync, void (%struct.VPxWorker*)* @launch, void (%struct.VPxWorker*)* @execute, void (%struct.VPxWorker*)* @end }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_set_worker_interface(%struct.VPxWorkerInterface* readonly) local_unnamed_addr #0 {
  %2 = icmp eq %struct.VPxWorkerInterface* %0, null
  br i1 %2, label %29, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.VPxWorkerInterface, %struct.VPxWorkerInterface* %0, i64 0, i32 0
  %5 = load void (%struct.VPxWorker*)*, void (%struct.VPxWorker*)** %4, align 8
  %6 = icmp eq void (%struct.VPxWorker*)* %5, null
  br i1 %6, label %29, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.VPxWorkerInterface, %struct.VPxWorkerInterface* %0, i64 0, i32 1
  %9 = load i32 (%struct.VPxWorker*)*, i32 (%struct.VPxWorker*)** %8, align 8
  %10 = icmp eq i32 (%struct.VPxWorker*)* %9, null
  br i1 %10, label %29, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.VPxWorkerInterface, %struct.VPxWorkerInterface* %0, i64 0, i32 2
  %13 = load i32 (%struct.VPxWorker*)*, i32 (%struct.VPxWorker*)** %12, align 8
  %14 = icmp eq i32 (%struct.VPxWorker*)* %13, null
  br i1 %14, label %29, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %struct.VPxWorkerInterface, %struct.VPxWorkerInterface* %0, i64 0, i32 3
  %17 = load void (%struct.VPxWorker*)*, void (%struct.VPxWorker*)** %16, align 8
  %18 = icmp eq void (%struct.VPxWorker*)* %17, null
  br i1 %18, label %29, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.VPxWorkerInterface, %struct.VPxWorkerInterface* %0, i64 0, i32 4
  %21 = load void (%struct.VPxWorker*)*, void (%struct.VPxWorker*)** %20, align 8
  %22 = icmp eq void (%struct.VPxWorker*)* %21, null
  br i1 %22, label %29, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds %struct.VPxWorkerInterface, %struct.VPxWorkerInterface* %0, i64 0, i32 5
  %25 = load void (%struct.VPxWorker*)*, void (%struct.VPxWorker*)** %24, align 8
  %26 = icmp eq void (%struct.VPxWorker*)* %25, null
  br i1 %26, label %29, label %27

27:                                               ; preds = %23
  %28 = bitcast %struct.VPxWorkerInterface* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.VPxWorkerInterface* @g_worker_interface to i8*), i8* nonnull align 8 %28, i64 48, i1 false)
  br label %29

29:                                               ; preds = %1, %3, %7, %11, %15, %19, %23, %27
  %30 = phi i32 [ 1, %27 ], [ 0, %23 ], [ 0, %19 ], [ 0, %15 ], [ 0, %11 ], [ 0, %7 ], [ 0, %3 ], [ 0, %1 ]
  ret i32 %30
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden nonnull %struct.VPxWorkerInterface* @vpx_get_worker_interface() local_unnamed_addr #2 {
  ret %struct.VPxWorkerInterface* @g_worker_interface
}

; Function Attrs: nounwind ssp uwtable
define internal void @init(%struct.VPxWorker* nocapture) #0 {
  %2 = bitcast %struct.VPxWorker* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 48, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @reset(%struct.VPxWorker*) #0 {
  %2 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %0, i64 0, i32 5
  store i32 0, i32* %2, align 8
  %3 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 8
  switch i32 %4, label %46 [
    i32 0, label %5
    i32 1, label %69
  ]

5:                                                ; preds = %1
  %6 = tail call i8* @vpx_calloc(i64 1, i64 96) #5
  %7 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %0, i64 0, i32 0
  %8 = bitcast %struct.VPxWorker* %0 to i8**
  store i8* %6, i8** %8, align 8
  %9 = icmp eq i8* %6, null
  br i1 %9, label %69, label %10

10:                                               ; preds = %5
  %11 = bitcast i8* %6 to %union.pthread_mutex_t*
  %12 = tail call i32 @pthread_mutex_init(%union.pthread_mutex_t* nonnull %11, %union.pthread_mutexattr_t* null) #5
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %44

14:                                               ; preds = %10
  %15 = load %struct.VPxWorkerImpl*, %struct.VPxWorkerImpl** %7, align 8
  %16 = getelementptr inbounds %struct.VPxWorkerImpl, %struct.VPxWorkerImpl* %15, i64 0, i32 1
  %17 = tail call i32 @pthread_cond_init(%union.pthread_cond_t* %16, %union.pthread_condattr_t* null) #5
  %18 = icmp eq i32 %17, 0
  %19 = load %struct.VPxWorkerImpl*, %struct.VPxWorkerImpl** %7, align 8
  %20 = getelementptr inbounds %struct.VPxWorkerImpl, %struct.VPxWorkerImpl* %19, i64 0, i32 0
  br i1 %18, label %23, label %21

21:                                               ; preds = %14
  %22 = tail call i32 @pthread_mutex_destroy(%union.pthread_mutex_t* %20) #5
  br label %44

23:                                               ; preds = %14
  %24 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %20) #5
  %25 = load %struct.VPxWorkerImpl*, %struct.VPxWorkerImpl** %7, align 8
  %26 = getelementptr inbounds %struct.VPxWorkerImpl, %struct.VPxWorkerImpl* %25, i64 0, i32 2
  %27 = bitcast %struct.VPxWorker* %0 to i8*
  %28 = tail call i32 @pthread_create(i64* %26, %union.pthread_attr_t* null, i8* (i8*)* nonnull @thread_loop, i8* %27) #5
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %34

30:                                               ; preds = %23
  store i32 1, i32* %3, align 8
  %31 = load %struct.VPxWorkerImpl*, %struct.VPxWorkerImpl** %7, align 8
  %32 = getelementptr inbounds %struct.VPxWorkerImpl, %struct.VPxWorkerImpl* %31, i64 0, i32 0
  %33 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %32) #5
  br label %69

34:                                               ; preds = %23
  %35 = load %struct.VPxWorkerImpl*, %struct.VPxWorkerImpl** %7, align 8
  %36 = getelementptr inbounds %struct.VPxWorkerImpl, %struct.VPxWorkerImpl* %35, i64 0, i32 0
  %37 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %36) #5
  %38 = load %struct.VPxWorkerImpl*, %struct.VPxWorkerImpl** %7, align 8
  %39 = getelementptr inbounds %struct.VPxWorkerImpl, %struct.VPxWorkerImpl* %38, i64 0, i32 0
  %40 = tail call i32 @pthread_mutex_destroy(%union.pthread_mutex_t* %39) #5
  %41 = load %struct.VPxWorkerImpl*, %struct.VPxWorkerImpl** %7, align 8
  %42 = getelementptr inbounds %struct.VPxWorkerImpl, %struct.VPxWorkerImpl* %41, i64 0, i32 1
  %43 = tail call i32 @pthread_cond_destroy(%union.pthread_cond_t* %42) #5
  br label %44

44:                                               ; preds = %10, %34, %21
  %45 = load i8*, i8** %8, align 8
  tail call void @vpx_free(i8* %45) #5
  store %struct.VPxWorkerImpl* null, %struct.VPxWorkerImpl** %7, align 8
  br label %69

46:                                               ; preds = %1
  %47 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %0, i64 0, i32 0
  %48 = load %struct.VPxWorkerImpl*, %struct.VPxWorkerImpl** %47, align 8
  %49 = icmp eq %struct.VPxWorkerImpl* %48, null
  br i1 %49, label %69, label %50

50:                                               ; preds = %46
  %51 = getelementptr inbounds %struct.VPxWorkerImpl, %struct.VPxWorkerImpl* %48, i64 0, i32 0
  %52 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %51) #5
  %53 = load i32, i32* %3, align 8
  %54 = icmp ult i32 %53, 2
  br i1 %54, label %62, label %55

55:                                               ; preds = %50, %55
  %56 = load %struct.VPxWorkerImpl*, %struct.VPxWorkerImpl** %47, align 8
  %57 = getelementptr inbounds %struct.VPxWorkerImpl, %struct.VPxWorkerImpl* %56, i64 0, i32 1
  %58 = getelementptr inbounds %struct.VPxWorkerImpl, %struct.VPxWorkerImpl* %56, i64 0, i32 0
  %59 = tail call i32 @pthread_cond_wait(%union.pthread_cond_t* %57, %union.pthread_mutex_t* %58) #5
  %60 = load i32, i32* %3, align 8
  %61 = icmp eq i32 %60, 1
  br i1 %61, label %62, label %55

62:                                               ; preds = %55, %50
  %63 = load %struct.VPxWorkerImpl*, %struct.VPxWorkerImpl** %47, align 8
  %64 = getelementptr inbounds %struct.VPxWorkerImpl, %struct.VPxWorkerImpl* %63, i64 0, i32 0
  %65 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %64) #5
  %66 = load i32, i32* %2, align 8
  %67 = icmp eq i32 %66, 0
  %68 = zext i1 %67 to i32
  br label %69

69:                                               ; preds = %62, %46, %30, %1, %5, %44
  %70 = phi i32 [ 0, %44 ], [ 0, %5 ], [ 1, %30 ], [ %4, %1 ], [ 1, %46 ], [ %68, %62 ]
  ret i32 %70
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @sync(%struct.VPxWorker* nocapture readonly) #0 {
  %2 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %0, i64 0, i32 0
  %3 = load %struct.VPxWorkerImpl*, %struct.VPxWorkerImpl** %2, align 8
  %4 = icmp eq %struct.VPxWorkerImpl* %3, null
  br i1 %4, label %22, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.VPxWorkerImpl, %struct.VPxWorkerImpl* %3, i64 0, i32 0
  %7 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %6) #5
  %8 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %0, i64 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = icmp ult i32 %9, 2
  br i1 %10, label %18, label %11

11:                                               ; preds = %5, %11
  %12 = load %struct.VPxWorkerImpl*, %struct.VPxWorkerImpl** %2, align 8
  %13 = getelementptr inbounds %struct.VPxWorkerImpl, %struct.VPxWorkerImpl* %12, i64 0, i32 1
  %14 = getelementptr inbounds %struct.VPxWorkerImpl, %struct.VPxWorkerImpl* %12, i64 0, i32 0
  %15 = tail call i32 @pthread_cond_wait(%union.pthread_cond_t* %13, %union.pthread_mutex_t* %14) #5
  %16 = load i32, i32* %8, align 8
  %17 = icmp eq i32 %16, 1
  br i1 %17, label %18, label %11

18:                                               ; preds = %11, %5
  %19 = load %struct.VPxWorkerImpl*, %struct.VPxWorkerImpl** %2, align 8
  %20 = getelementptr inbounds %struct.VPxWorkerImpl, %struct.VPxWorkerImpl* %19, i64 0, i32 0
  %21 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %20) #5
  br label %22

22:                                               ; preds = %1, %18
  %23 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %0, i64 0, i32 5
  %24 = load i32, i32* %23, align 8
  %25 = icmp eq i32 %24, 0
  %26 = zext i1 %25 to i32
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal void @launch(%struct.VPxWorker* nocapture) #0 {
  %2 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %0, i64 0, i32 0
  %3 = load %struct.VPxWorkerImpl*, %struct.VPxWorkerImpl** %2, align 8
  %4 = icmp eq %struct.VPxWorkerImpl* %3, null
  br i1 %4, label %25, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.VPxWorkerImpl, %struct.VPxWorkerImpl* %3, i64 0, i32 0
  %7 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %6) #5
  %8 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %0, i64 0, i32 1
  %9 = load i32, i32* %8, align 8
  switch i32 %9, label %10 [
    i32 0, label %21
    i32 1, label %17
  ]

10:                                               ; preds = %5, %10
  %11 = load %struct.VPxWorkerImpl*, %struct.VPxWorkerImpl** %2, align 8
  %12 = getelementptr inbounds %struct.VPxWorkerImpl, %struct.VPxWorkerImpl* %11, i64 0, i32 1
  %13 = getelementptr inbounds %struct.VPxWorkerImpl, %struct.VPxWorkerImpl* %11, i64 0, i32 0
  %14 = tail call i32 @pthread_cond_wait(%union.pthread_cond_t* %12, %union.pthread_mutex_t* %13) #5
  %15 = load i32, i32* %8, align 8
  %16 = icmp eq i32 %15, 1
  br i1 %16, label %17, label %10

17:                                               ; preds = %10, %5
  store i32 2, i32* %8, align 8
  %18 = load %struct.VPxWorkerImpl*, %struct.VPxWorkerImpl** %2, align 8
  %19 = getelementptr inbounds %struct.VPxWorkerImpl, %struct.VPxWorkerImpl* %18, i64 0, i32 1
  %20 = tail call i32 @pthread_cond_signal(%union.pthread_cond_t* %19) #5
  br label %21

21:                                               ; preds = %17, %5
  %22 = load %struct.VPxWorkerImpl*, %struct.VPxWorkerImpl** %2, align 8
  %23 = getelementptr inbounds %struct.VPxWorkerImpl, %struct.VPxWorkerImpl* %22, i64 0, i32 0
  %24 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %23) #5
  br label %25

25:                                               ; preds = %1, %21
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @execute(%struct.VPxWorker* nocapture) #0 {
  %2 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %0, i64 0, i32 2
  %3 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %2, align 8
  %4 = icmp eq i32 (i8*, i8*)* %3, null
  br i1 %4, label %16, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %0, i64 0, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %0, i64 0, i32 4
  %9 = load i8*, i8** %8, align 8
  %10 = tail call i32 %3(i8* %7, i8* %9) #5
  %11 = icmp eq i32 %10, 0
  %12 = zext i1 %11 to i32
  %13 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %0, i64 0, i32 5
  %14 = load i32, i32* %13, align 8
  %15 = or i32 %14, %12
  store i32 %15, i32* %13, align 8
  br label %16

16:                                               ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @end(%struct.VPxWorker* nocapture) #0 {
  %2 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %0, i64 0, i32 0
  %3 = load %struct.VPxWorkerImpl*, %struct.VPxWorkerImpl** %2, align 8
  %4 = icmp eq %struct.VPxWorkerImpl* %3, null
  br i1 %4, label %37, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.VPxWorkerImpl, %struct.VPxWorkerImpl* %3, i64 0, i32 0
  %7 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %6) #5
  %8 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %0, i64 0, i32 1
  %9 = load i32, i32* %8, align 8
  switch i32 %9, label %10 [
    i32 0, label %21
    i32 1, label %17
  ]

10:                                               ; preds = %5, %10
  %11 = load %struct.VPxWorkerImpl*, %struct.VPxWorkerImpl** %2, align 8
  %12 = getelementptr inbounds %struct.VPxWorkerImpl, %struct.VPxWorkerImpl* %11, i64 0, i32 1
  %13 = getelementptr inbounds %struct.VPxWorkerImpl, %struct.VPxWorkerImpl* %11, i64 0, i32 0
  %14 = tail call i32 @pthread_cond_wait(%union.pthread_cond_t* %12, %union.pthread_mutex_t* %13) #5
  %15 = load i32, i32* %8, align 8
  %16 = icmp eq i32 %15, 1
  br i1 %16, label %17, label %10

17:                                               ; preds = %10, %5
  store i32 0, i32* %8, align 8
  %18 = load %struct.VPxWorkerImpl*, %struct.VPxWorkerImpl** %2, align 8
  %19 = getelementptr inbounds %struct.VPxWorkerImpl, %struct.VPxWorkerImpl* %18, i64 0, i32 1
  %20 = tail call i32 @pthread_cond_signal(%union.pthread_cond_t* %19) #5
  br label %21

21:                                               ; preds = %5, %17
  %22 = load %struct.VPxWorkerImpl*, %struct.VPxWorkerImpl** %2, align 8
  %23 = getelementptr inbounds %struct.VPxWorkerImpl, %struct.VPxWorkerImpl* %22, i64 0, i32 0
  %24 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %23) #5
  %25 = load %struct.VPxWorkerImpl*, %struct.VPxWorkerImpl** %2, align 8
  %26 = getelementptr inbounds %struct.VPxWorkerImpl, %struct.VPxWorkerImpl* %25, i64 0, i32 2
  %27 = load i64, i64* %26, align 8
  %28 = tail call i32 @pthread_join(i64 %27, i8** null) #5
  %29 = load %struct.VPxWorkerImpl*, %struct.VPxWorkerImpl** %2, align 8
  %30 = getelementptr inbounds %struct.VPxWorkerImpl, %struct.VPxWorkerImpl* %29, i64 0, i32 0
  %31 = tail call i32 @pthread_mutex_destroy(%union.pthread_mutex_t* %30) #5
  %32 = load %struct.VPxWorkerImpl*, %struct.VPxWorkerImpl** %2, align 8
  %33 = getelementptr inbounds %struct.VPxWorkerImpl, %struct.VPxWorkerImpl* %32, i64 0, i32 1
  %34 = tail call i32 @pthread_cond_destroy(%union.pthread_cond_t* %33) #5
  %35 = bitcast %struct.VPxWorker* %0 to i8**
  %36 = load i8*, i8** %35, align 8
  tail call void @vpx_free(i8* %36) #5
  store %struct.VPxWorkerImpl* null, %struct.VPxWorkerImpl** %2, align 8
  br label %37

37:                                               ; preds = %1, %21
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i8* @vpx_calloc(i64, i64) local_unnamed_addr #3

; Function Attrs: nounwind
declare i32 @pthread_mutex_init(%union.pthread_mutex_t*, %union.pthread_mutexattr_t*) local_unnamed_addr #4

; Function Attrs: nounwind
declare i32 @pthread_cond_init(%union.pthread_cond_t*, %union.pthread_condattr_t*) local_unnamed_addr #4

; Function Attrs: nounwind
declare i32 @pthread_mutex_destroy(%union.pthread_mutex_t*) local_unnamed_addr #4

; Function Attrs: nounwind
declare i32 @pthread_mutex_lock(%union.pthread_mutex_t*) local_unnamed_addr #4

; Function Attrs: nounwind
declare i32 @pthread_create(i64*, %union.pthread_attr_t*, i8* (i8*)*, i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal noalias i8* @thread_loop(i8* nocapture) #0 {
  %2 = bitcast i8* %0 to %struct.VPxWorkerImpl**
  %3 = getelementptr inbounds i8, i8* %0, i64 8
  %4 = bitcast i8* %3 to i32*
  %5 = getelementptr inbounds i8, i8* %0, i64 16
  %6 = bitcast i8* %5 to i32 (i8*, i8*)**
  %7 = getelementptr inbounds i8, i8* %0, i64 24
  %8 = bitcast i8* %7 to i8**
  %9 = getelementptr inbounds i8, i8* %0, i64 32
  %10 = bitcast i8* %9 to i8**
  %11 = getelementptr inbounds i8, i8* %0, i64 40
  %12 = bitcast i8* %11 to i32*
  br label %13

13:                                               ; preds = %36, %1
  %14 = load %struct.VPxWorkerImpl*, %struct.VPxWorkerImpl** %2, align 8
  %15 = getelementptr inbounds %struct.VPxWorkerImpl, %struct.VPxWorkerImpl* %14, i64 0, i32 0
  %16 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %15) #5
  br label %17

17:                                               ; preds = %19, %13
  %18 = load i32, i32* %4, align 8
  switch i32 %18, label %36 [
    i32 1, label %19
    i32 2, label %24
    i32 0, label %43
  ]

19:                                               ; preds = %17
  %20 = load %struct.VPxWorkerImpl*, %struct.VPxWorkerImpl** %2, align 8
  %21 = getelementptr inbounds %struct.VPxWorkerImpl, %struct.VPxWorkerImpl* %20, i64 0, i32 1
  %22 = getelementptr inbounds %struct.VPxWorkerImpl, %struct.VPxWorkerImpl* %20, i64 0, i32 0
  %23 = tail call i32 @pthread_cond_wait(%union.pthread_cond_t* %21, %union.pthread_mutex_t* %22) #5
  br label %17

24:                                               ; preds = %17
  %25 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %6, align 8
  %26 = icmp eq i32 (i8*, i8*)* %25, null
  br i1 %26, label %35, label %27

27:                                               ; preds = %24
  %28 = load i8*, i8** %8, align 8
  %29 = load i8*, i8** %10, align 8
  %30 = tail call i32 %25(i8* %28, i8* %29) #5
  %31 = icmp eq i32 %30, 0
  %32 = zext i1 %31 to i32
  %33 = load i32, i32* %12, align 8
  %34 = or i32 %33, %32
  store i32 %34, i32* %12, align 8
  br label %35

35:                                               ; preds = %24, %27
  store i32 1, i32* %4, align 8
  br label %36

36:                                               ; preds = %17, %35
  %37 = load %struct.VPxWorkerImpl*, %struct.VPxWorkerImpl** %2, align 8
  %38 = getelementptr inbounds %struct.VPxWorkerImpl, %struct.VPxWorkerImpl* %37, i64 0, i32 1
  %39 = tail call i32 @pthread_cond_signal(%union.pthread_cond_t* %38) #5
  %40 = load %struct.VPxWorkerImpl*, %struct.VPxWorkerImpl** %2, align 8
  %41 = getelementptr inbounds %struct.VPxWorkerImpl, %struct.VPxWorkerImpl* %40, i64 0, i32 0
  %42 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %41) #5
  br label %13

43:                                               ; preds = %17
  %44 = load %struct.VPxWorkerImpl*, %struct.VPxWorkerImpl** %2, align 8
  %45 = getelementptr inbounds %struct.VPxWorkerImpl, %struct.VPxWorkerImpl* %44, i64 0, i32 1
  %46 = tail call i32 @pthread_cond_signal(%union.pthread_cond_t* %45) #5
  %47 = load %struct.VPxWorkerImpl*, %struct.VPxWorkerImpl** %2, align 8
  %48 = getelementptr inbounds %struct.VPxWorkerImpl, %struct.VPxWorkerImpl* %47, i64 0, i32 0
  %49 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %48) #5
  ret i8* null
}

; Function Attrs: nounwind
declare i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) local_unnamed_addr #4

; Function Attrs: nounwind
declare i32 @pthread_cond_destroy(%union.pthread_cond_t*) local_unnamed_addr #4

declare void @vpx_free(i8*) local_unnamed_addr #3

declare i32 @pthread_cond_wait(%union.pthread_cond_t*, %union.pthread_mutex_t*) local_unnamed_addr #3

; Function Attrs: nounwind
declare i32 @pthread_cond_signal(%union.pthread_cond_t*) local_unnamed_addr #4

declare i32 @pthread_join(i64, i8**) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
