; ModuleID = '../../chrome/browser/ui/commander/commander.cc'
source_filename = "../../chrome/browser/ui/commander/commander.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.base::Feature" = type { i8*, i32 }
%"class.base::NoDestructor" = type { [16 x i8] }
%"class.commander::Commander" = type { %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.1" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.commander::CommanderFrontend"* }
%"class.commander::CommanderFrontend" = type { i32 (...)** }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.commander::CommanderBackend"* }
%"class.commander::CommanderBackend" = type { i32 (...)** }
%"class.commander::CommanderController" = type { %"class.commander::CommanderBackend", %"class.std::__1::vector", i32, %"class.std::__1::vector.14", %"class.base::RepeatingCallback", %"class.base::RepeatingCallback.23" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::unique_ptr.10"*, %"class.std::__1::unique_ptr.10"*, %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::unique_ptr.10" = type opaque
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"class.std::__1::unique_ptr.10"* }
%"class.std::__1::vector.14" = type { %"class.std::__1::__vector_base.15" }
%"class.std::__1::__vector_base.15" = type { %"class.std::__1::unique_ptr.16"*, %"class.std::__1::unique_ptr.16"*, %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::unique_ptr.16" = type opaque
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"class.std::__1::unique_ptr.16"* }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.22" }
%"struct.std::__1::__atomic_base.22" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::RepeatingCallback.23" = type { %"class.base::internal::CallbackBaseCopyable" }
%class.Browser = type opaque

@_ZN8features10kCommanderE = external global %"struct.base::Feature", align 8
@_ZZN9commander9Commander3GetEvE8instance = internal global %"class.base::NoDestructor" zeroinitializer, align 8
@_ZGVZN9commander9Commander3GetEvE8instance = internal global i64 0, align 8

@_ZN9commander9CommanderC1Ev = hidden unnamed_addr alias void (%"class.commander::Commander"*), void (%"class.commander::Commander"*)* @_ZN9commander9CommanderC2Ev
@_ZN9commander9CommanderD1Ev = hidden unnamed_addr alias void (%"class.commander::Commander"*), void (%"class.commander::Commander"*)* @_ZN9commander9CommanderD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN9commander9IsEnabledEv() local_unnamed_addr #0 {
  %1 = tail call zeroext i1 @_ZN4base11FeatureList9IsEnabledERKNS_7FeatureE(%"struct.base::Feature"* nonnull dereferenceable(16) @_ZN8features10kCommanderE) #6
  ret i1 %1
}

declare zeroext i1 @_ZN4base11FeatureList9IsEnabledERKNS_7FeatureE(%"struct.base::Feature"* dereferenceable(16)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.commander::Commander"* @_ZN9commander9Commander3GetEv() local_unnamed_addr #0 align 2 {
  %1 = load atomic i8, i8* bitcast (i64* @_ZGVZN9commander9Commander3GetEvE8instance to i8*) acquire, align 8
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %3, label %7, !prof !2

3:                                                ; preds = %0
  %4 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN9commander9Commander3GetEvE8instance) #6
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %3
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN9commander9Commander3GetEvE8instance, i64 0, i32 0, i64 0), i8 0, i64 16, i1 false) #6
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN9commander9Commander3GetEvE8instance) #6
  br label %7

7:                                                ; preds = %3, %6, %0
  ret %"class.commander::Commander"* bitcast (%"class.base::NoDestructor"* @_ZZN9commander9Commander3GetEvE8instance to %"class.commander::Commander"*)
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN9commander9CommanderC2Ev(%"class.commander::Commander"* nocapture) unnamed_addr #3 align 2 {
  %2 = bitcast %"class.commander::Commander"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9commander9CommanderD2Ev(%"class.commander::Commander"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.commander::Commander", %"class.commander::Commander"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %3 = load %"class.commander::CommanderBackend"*, %"class.commander::CommanderBackend"** %2, align 8
  store %"class.commander::CommanderBackend"* null, %"class.commander::CommanderBackend"** %2, align 8
  %4 = icmp eq %"class.commander::CommanderBackend"* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.commander::CommanderBackend"* %3 to void (%"class.commander::CommanderBackend"*)***
  %7 = load void (%"class.commander::CommanderBackend"*)**, void (%"class.commander::CommanderBackend"*)*** %6, align 8
  %8 = getelementptr inbounds void (%"class.commander::CommanderBackend"*)*, void (%"class.commander::CommanderBackend"*)** %7, i64 1
  %9 = load void (%"class.commander::CommanderBackend"*)*, void (%"class.commander::CommanderBackend"*)** %8, align 8
  tail call void %9(%"class.commander::CommanderBackend"* nonnull %3) #6
  br label %10

10:                                               ; preds = %1, %5
  %11 = getelementptr inbounds %"class.commander::Commander", %"class.commander::Commander"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %12 = load %"class.commander::CommanderFrontend"*, %"class.commander::CommanderFrontend"** %11, align 8
  store %"class.commander::CommanderFrontend"* null, %"class.commander::CommanderFrontend"** %11, align 8
  %13 = icmp eq %"class.commander::CommanderFrontend"* %12, null
  br i1 %13, label %19, label %14

14:                                               ; preds = %10
  %15 = bitcast %"class.commander::CommanderFrontend"* %12 to void (%"class.commander::CommanderFrontend"*)***
  %16 = load void (%"class.commander::CommanderFrontend"*)**, void (%"class.commander::CommanderFrontend"*)*** %15, align 8
  %17 = getelementptr inbounds void (%"class.commander::CommanderFrontend"*)*, void (%"class.commander::CommanderFrontend"*)** %16, i64 1
  %18 = load void (%"class.commander::CommanderFrontend"*)*, void (%"class.commander::CommanderFrontend"*)** %17, align 8
  tail call void %18(%"class.commander::CommanderFrontend"* nonnull %12) #6
  br label %19

19:                                               ; preds = %10, %14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9commander9Commander10InitializeEv(%"class.commander::Commander"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = tail call i8* @_Znwm(i64 80) #7
  %3 = bitcast i8* %2 to %"class.commander::CommanderController"*
  tail call void @_ZN9commander19CommanderControllerC1Ev(%"class.commander::CommanderController"* nonnull %3) #6
  %4 = getelementptr inbounds %"class.commander::Commander", %"class.commander::Commander"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %5 = load %"class.commander::CommanderBackend"*, %"class.commander::CommanderBackend"** %4, align 8
  %6 = bitcast %"class.commander::CommanderBackend"** %4 to i8**
  store i8* %2, i8** %6, align 8
  %7 = icmp eq %"class.commander::CommanderBackend"* %5, null
  %8 = bitcast i8* %2 to %"class.commander::CommanderBackend"*
  br i1 %7, label %15, label %9

9:                                                ; preds = %1
  %10 = bitcast %"class.commander::CommanderBackend"* %5 to void (%"class.commander::CommanderBackend"*)***
  %11 = load void (%"class.commander::CommanderBackend"*)**, void (%"class.commander::CommanderBackend"*)*** %10, align 8
  %12 = getelementptr inbounds void (%"class.commander::CommanderBackend"*)*, void (%"class.commander::CommanderBackend"*)** %11, i64 1
  %13 = load void (%"class.commander::CommanderBackend"*)*, void (%"class.commander::CommanderBackend"*)** %12, align 8
  tail call void %13(%"class.commander::CommanderBackend"* nonnull %5) #6
  %14 = load %"class.commander::CommanderBackend"*, %"class.commander::CommanderBackend"** %4, align 8
  br label %15

15:                                               ; preds = %9, %1
  %16 = phi %"class.commander::CommanderBackend"* [ %14, %9 ], [ %8, %1 ]
  %17 = tail call %"class.commander::CommanderFrontend"* @_ZN9commander17CommanderFrontend6CreateEPNS_16CommanderBackendE(%"class.commander::CommanderBackend"* %16) #6
  %18 = ptrtoint %"class.commander::CommanderFrontend"* %17 to i64
  %19 = getelementptr inbounds %"class.commander::Commander", %"class.commander::Commander"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %20 = load %"class.commander::CommanderFrontend"*, %"class.commander::CommanderFrontend"** %19, align 8
  %21 = bitcast %"class.commander::Commander"* %0 to i64*
  store i64 %18, i64* %21, align 8
  %22 = icmp eq %"class.commander::CommanderFrontend"* %20, null
  br i1 %22, label %28, label %23

23:                                               ; preds = %15
  %24 = bitcast %"class.commander::CommanderFrontend"* %20 to void (%"class.commander::CommanderFrontend"*)***
  %25 = load void (%"class.commander::CommanderFrontend"*)**, void (%"class.commander::CommanderFrontend"*)*** %24, align 8
  %26 = getelementptr inbounds void (%"class.commander::CommanderFrontend"*)*, void (%"class.commander::CommanderFrontend"*)** %25, i64 1
  %27 = load void (%"class.commander::CommanderFrontend"*)*, void (%"class.commander::CommanderFrontend"*)** %26, align 8
  tail call void %27(%"class.commander::CommanderFrontend"* nonnull %20) #6
  br label %28

28:                                               ; preds = %23, %15
  ret void
}

declare %"class.commander::CommanderFrontend"* @_ZN9commander17CommanderFrontend6CreateEPNS_16CommanderBackendE(%"class.commander::CommanderBackend"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9commander9Commander16ToggleForBrowserEP7Browser(%"class.commander::Commander"* nocapture readonly, %class.Browser*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.commander::Commander", %"class.commander::Commander"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load %"class.commander::CommanderFrontend"*, %"class.commander::CommanderFrontend"** %3, align 8
  %5 = bitcast %"class.commander::CommanderFrontend"* %4 to void (%"class.commander::CommanderFrontend"*, %class.Browser*)***
  %6 = load void (%"class.commander::CommanderFrontend"*, %class.Browser*)**, void (%"class.commander::CommanderFrontend"*, %class.Browser*)*** %5, align 8
  %7 = getelementptr inbounds void (%"class.commander::CommanderFrontend"*, %class.Browser*)*, void (%"class.commander::CommanderFrontend"*, %class.Browser*)** %6, i64 2
  %8 = load void (%"class.commander::CommanderFrontend"*, %class.Browser*)*, void (%"class.commander::CommanderFrontend"*, %class.Browser*)** %7, align 8
  tail call void %8(%"class.commander::CommanderFrontend"* %4, %class.Browser* %1) #6
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

declare void @_ZN9commander19CommanderControllerC1Ev(%"class.commander::CommanderController"*) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 1048575}
