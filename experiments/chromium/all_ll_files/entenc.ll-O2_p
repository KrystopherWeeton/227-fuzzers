; ModuleID = '../../third_party/libaom/source/libaom/aom_dsp/entenc.c'
source_filename = "../../third_party/libaom/source/libaom/aom_dsp/entenc.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.od_ec_enc = type { i8*, i32, i16*, i32, i32, i32, i16, i16, i32 }

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @od_ec_enc_init(%struct.od_ec_enc* nocapture, i32) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 4
  store i32 0, i32* %3, align 4
  %4 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 5
  store i32 0, i32* %4, align 8
  %5 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 6
  store i16 -32768, i16* %5, align 4
  %6 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 7
  store i16 -9, i16* %6, align 2
  %7 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 8
  store i32 0, i32* %7, align 8
  %8 = zext i32 %1 to i64
  %9 = tail call noalias i8* @malloc(i64 %8) #10
  %10 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 0
  store i8* %9, i8** %10, align 8
  %11 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 1
  store i32 %1, i32* %11, align 8
  %12 = icmp ne i32 %1, 0
  %13 = icmp eq i8* %9, null
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %16

15:                                               ; preds = %2
  store i32 0, i32* %11, align 8
  store i32 -1, i32* %7, align 8
  br label %16

16:                                               ; preds = %15, %2
  %17 = shl nuw nsw i64 %8, 1
  %18 = tail call noalias i8* @malloc(i64 %17) #10
  %19 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 2
  %20 = bitcast i16** %19 to i8**
  store i8* %18, i8** %20, align 8
  %21 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 3
  store i32 %1, i32* %21, align 8
  %22 = icmp eq i8* %18, null
  %23 = and i1 %12, %22
  br i1 %23, label %24, label %25

24:                                               ; preds = %16
  store i32 0, i32* %21, align 8
  store i32 -1, i32* %7, align 8
  br label %25

25:                                               ; preds = %24, %16
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @od_ec_enc_reset(%struct.od_ec_enc* nocapture) local_unnamed_addr #1 {
  %2 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 4
  store i32 0, i32* %2, align 4
  %3 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 5
  store i32 0, i32* %3, align 8
  %4 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 6
  store i16 -32768, i16* %4, align 4
  %5 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 7
  store i16 -9, i16* %5, align 2
  %6 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 8
  store i32 0, i32* %6, align 8
  ret void
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @od_ec_enc_clear(%struct.od_ec_enc* nocapture readonly) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 2
  %3 = bitcast i16** %2 to i8**
  %4 = load i8*, i8** %3, align 8
  tail call void @free(i8* %4) #10
  %5 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 0
  %6 = load i8*, i8** %5, align 8
  tail call void @free(i8* %6) #10
  ret void
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @od_ec_encode_bool_q15(%struct.od_ec_enc* nocapture, i32, i32) local_unnamed_addr #3 {
  %4 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 5
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 6
  %7 = load i16, i16* %6, align 4
  %8 = zext i16 %7 to i32
  %9 = lshr i32 %8, 8
  %10 = lshr i32 %2, 6
  %11 = mul i32 %9, %10
  %12 = lshr i32 %11, 1
  %13 = add nuw i32 %12, 4
  %14 = icmp ne i32 %1, 0
  %15 = sub i32 %8, %13
  %16 = select i1 %14, i32 %15, i32 0
  %17 = add i32 %16, %5
  %18 = select i1 %14, i32 %13, i32 %15
  %19 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 7
  %20 = load i16, i16* %19, align 2
  %21 = sext i16 %20 to i32
  %22 = tail call i32 @llvm.ctlz.i32(i32 %18, i1 true) #10, !range !2
  %23 = xor i32 %22, 31
  %24 = sub nsw i32 15, %23
  %25 = add nsw i32 %24, %21
  %26 = icmp sgt i32 %25, -1
  br i1 %26, label %27, label %77

27:                                               ; preds = %3
  %28 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 2
  %29 = load i16*, i16** %28, align 8
  %30 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 3
  %31 = load i32, i32* %30, align 8
  %32 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 4
  %33 = load i32, i32* %32, align 4
  %34 = add i32 %33, 2
  %35 = icmp ugt i32 %34, %31
  br i1 %35, label %36, label %47

36:                                               ; preds = %27
  %37 = shl i32 %31, 1
  %38 = add i32 %37, 2
  %39 = bitcast i16* %29 to i8*
  %40 = zext i32 %38 to i64
  %41 = shl nuw nsw i64 %40, 1
  %42 = tail call i8* @realloc(i8* %39, i64 %41) #10
  %43 = icmp eq i8* %42, null
  br i1 %43, label %75, label %44

44:                                               ; preds = %36
  %45 = bitcast i8* %42 to i16*
  %46 = bitcast i16** %28 to i8**
  store i8* %42, i8** %46, align 8
  store i32 %38, i32* %30, align 8
  br label %47

47:                                               ; preds = %44, %27
  %48 = phi i16* [ %45, %44 ], [ %29, %27 ]
  %49 = add nsw i32 %21, 16
  %50 = shl nsw i32 -1, %49
  %51 = xor i32 %50, -1
  %52 = icmp sgt i32 %25, 7
  br i1 %52, label %53, label %62

53:                                               ; preds = %47
  %54 = lshr i32 %17, %49
  %55 = trunc i32 %54 to i16
  %56 = add i32 %33, 1
  %57 = zext i32 %33 to i64
  %58 = getelementptr inbounds i16, i16* %48, i64 %57
  store i16 %55, i16* %58, align 2
  %59 = and i32 %17, %51
  %60 = add nsw i32 %21, 8
  %61 = lshr i32 %51, 8
  br label %62

62:                                               ; preds = %53, %47
  %63 = phi i32 [ %59, %53 ], [ %17, %47 ]
  %64 = phi i32 [ %60, %53 ], [ %49, %47 ]
  %65 = phi i32 [ %56, %53 ], [ %33, %47 ]
  %66 = phi i32 [ %61, %53 ], [ %51, %47 ]
  %67 = lshr i32 %63, %64
  %68 = trunc i32 %67 to i16
  %69 = add i32 %65, 1
  %70 = zext i32 %65 to i64
  %71 = getelementptr inbounds i16, i16* %48, i64 %70
  store i16 %68, i16* %71, align 2
  %72 = sub nuw nsw i32 -9, %23
  %73 = add nsw i32 %72, %64
  %74 = and i32 %66, %63
  store i32 %69, i32* %32, align 4
  br label %77

75:                                               ; preds = %36
  %76 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 8
  store i32 -1, i32* %76, align 8
  store i32 0, i32* %32, align 4
  br label %84

77:                                               ; preds = %62, %3
  %78 = phi i32 [ %17, %3 ], [ %74, %62 ]
  %79 = phi i32 [ %25, %3 ], [ %73, %62 ]
  %80 = shl i32 %78, %24
  store i32 %80, i32* %4, align 8
  %81 = shl i32 %18, %24
  %82 = trunc i32 %81 to i16
  store i16 %82, i16* %6, align 4
  %83 = trunc i32 %79 to i16
  store i16 %83, i16* %19, align 2
  br label %84

84:                                               ; preds = %75, %77
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @od_ec_encode_cdf_q15(%struct.od_ec_enc* nocapture, i32, i16* nocapture readonly, i32) local_unnamed_addr #3 {
  %5 = icmp sgt i32 %1, 0
  br i1 %5, label %6, label %12

6:                                                ; preds = %4
  %7 = add nsw i32 %1, -1
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds i16, i16* %2, i64 %8
  %10 = load i16, i16* %9, align 2
  %11 = zext i16 %10 to i32
  br label %12

12:                                               ; preds = %4, %6
  %13 = phi i32 [ %11, %6 ], [ 32768, %4 ]
  %14 = sext i32 %1 to i64
  %15 = getelementptr inbounds i16, i16* %2, i64 %14
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 5
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 6
  %21 = load i16, i16* %20, align 4
  %22 = zext i16 %21 to i32
  %23 = add nsw i32 %3, -1
  %24 = icmp ult i32 %13, 32768
  %25 = lshr i32 %22, 8
  br i1 %24, label %26, label %43

26:                                               ; preds = %12
  %27 = lshr i32 %13, 6
  %28 = mul nuw nsw i32 %25, %27
  %29 = lshr i32 %28, 1
  %30 = sub i32 1, %1
  %31 = add i32 %30, %23
  %32 = shl nsw i32 %31, 2
  %33 = add i32 %29, %32
  %34 = lshr i32 %17, 6
  %35 = mul nuw nsw i32 %25, %34
  %36 = lshr i32 %35, 1
  %37 = add i32 %19, %22
  %38 = sub i32 %37, %33
  %39 = sub i32 %1, %23
  %40 = shl i32 %39, 2
  %41 = sub i32 %40, %36
  %42 = add i32 %41, %33
  br label %51

43:                                               ; preds = %12
  %44 = lshr i32 %17, 6
  %45 = mul nuw nsw i32 %25, %44
  %46 = lshr i32 %45, 1
  %47 = sub i32 %1, %23
  %48 = shl i32 %47, 2
  %49 = add i32 %48, %22
  %50 = sub i32 %49, %46
  br label %51

51:                                               ; preds = %43, %26
  %52 = phi i32 [ %38, %26 ], [ %19, %43 ]
  %53 = phi i32 [ %42, %26 ], [ %50, %43 ]
  %54 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 7
  %55 = load i16, i16* %54, align 2
  %56 = sext i16 %55 to i32
  %57 = tail call i32 @llvm.ctlz.i32(i32 %53, i1 true) #10, !range !2
  %58 = xor i32 %57, 31
  %59 = sub nsw i32 15, %58
  %60 = add nsw i32 %59, %56
  %61 = icmp sgt i32 %60, -1
  br i1 %61, label %62, label %112

62:                                               ; preds = %51
  %63 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 2
  %64 = load i16*, i16** %63, align 8
  %65 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 3
  %66 = load i32, i32* %65, align 8
  %67 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 4
  %68 = load i32, i32* %67, align 4
  %69 = add i32 %68, 2
  %70 = icmp ugt i32 %69, %66
  br i1 %70, label %71, label %82

71:                                               ; preds = %62
  %72 = shl i32 %66, 1
  %73 = add i32 %72, 2
  %74 = bitcast i16* %64 to i8*
  %75 = zext i32 %73 to i64
  %76 = shl nuw nsw i64 %75, 1
  %77 = tail call i8* @realloc(i8* %74, i64 %76) #10
  %78 = icmp eq i8* %77, null
  br i1 %78, label %110, label %79

79:                                               ; preds = %71
  %80 = bitcast i8* %77 to i16*
  %81 = bitcast i16** %63 to i8**
  store i8* %77, i8** %81, align 8
  store i32 %73, i32* %65, align 8
  br label %82

82:                                               ; preds = %79, %62
  %83 = phi i16* [ %80, %79 ], [ %64, %62 ]
  %84 = add nsw i32 %56, 16
  %85 = shl nsw i32 -1, %84
  %86 = xor i32 %85, -1
  %87 = icmp sgt i32 %60, 7
  br i1 %87, label %88, label %97

88:                                               ; preds = %82
  %89 = lshr i32 %52, %84
  %90 = trunc i32 %89 to i16
  %91 = add i32 %68, 1
  %92 = zext i32 %68 to i64
  %93 = getelementptr inbounds i16, i16* %83, i64 %92
  store i16 %90, i16* %93, align 2
  %94 = and i32 %52, %86
  %95 = add nsw i32 %56, 8
  %96 = lshr i32 %86, 8
  br label %97

97:                                               ; preds = %88, %82
  %98 = phi i32 [ %94, %88 ], [ %52, %82 ]
  %99 = phi i32 [ %95, %88 ], [ %84, %82 ]
  %100 = phi i32 [ %91, %88 ], [ %68, %82 ]
  %101 = phi i32 [ %96, %88 ], [ %86, %82 ]
  %102 = lshr i32 %98, %99
  %103 = trunc i32 %102 to i16
  %104 = add i32 %100, 1
  %105 = zext i32 %100 to i64
  %106 = getelementptr inbounds i16, i16* %83, i64 %105
  store i16 %103, i16* %106, align 2
  %107 = sub nuw nsw i32 -9, %58
  %108 = add nsw i32 %107, %99
  %109 = and i32 %101, %98
  store i32 %104, i32* %67, align 4
  br label %112

110:                                              ; preds = %71
  %111 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 8
  store i32 -1, i32* %111, align 8
  store i32 0, i32* %67, align 4
  br label %119

112:                                              ; preds = %97, %51
  %113 = phi i32 [ %52, %51 ], [ %109, %97 ]
  %114 = phi i32 [ %60, %51 ], [ %108, %97 ]
  %115 = shl i32 %113, %59
  store i32 %115, i32* %18, align 8
  %116 = shl i32 %53, %59
  %117 = trunc i32 %116 to i16
  store i16 %117, i16* %20, align 4
  %118 = trunc i32 %114 to i16
  store i16 %118, i16* %54, align 2
  br label %119

119:                                              ; preds = %110, %112
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @od_ec_enc_patch_initial_bits(%struct.od_ec_enc* nocapture, i32, i32) local_unnamed_addr #5 {
  %4 = sub nsw i32 8, %2
  %5 = shl nsw i32 -1, %2
  %6 = xor i32 %5, -1
  %7 = shl i32 %6, %4
  %8 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 4
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %21, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 2
  %13 = load i16*, i16** %12, align 8
  %14 = load i16, i16* %13, align 2
  %15 = zext i16 %14 to i32
  %16 = xor i32 %7, 65535
  %17 = and i32 %16, %15
  %18 = shl i32 %1, %4
  %19 = or i32 %17, %18
  %20 = trunc i32 %19 to i16
  store i16 %20, i16* %13, align 2
  br label %44

21:                                               ; preds = %3
  %22 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 7
  %23 = load i16, i16* %22, align 2
  %24 = sext i16 %23 to i32
  %25 = add nsw i32 %24, 9
  %26 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 6
  %27 = load i16, i16* %26, align 4
  %28 = icmp eq i16 %27, -32768
  %29 = zext i1 %28 to i32
  %30 = add nsw i32 %25, %29
  %31 = icmp sgt i32 %30, %2
  br i1 %31, label %32, label %42

32:                                               ; preds = %21
  %33 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 5
  %34 = load i32, i32* %33, align 8
  %35 = add nsw i32 %24, 16
  %36 = shl i32 %7, %35
  %37 = xor i32 %36, -1
  %38 = and i32 %34, %37
  %39 = add nsw i32 %35, %4
  %40 = shl i32 %1, %39
  %41 = or i32 %38, %40
  store i32 %41, i32* %33, align 8
  br label %44

42:                                               ; preds = %21
  %43 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 8
  store i32 -1, i32* %43, align 8
  br label %44

44:                                               ; preds = %32, %42, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @od_ec_enc_done(%struct.od_ec_enc* nocapture, i32* nocapture) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 8
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %135

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 5
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 7
  %10 = load i16, i16* %9, align 2
  %11 = sext i16 %10 to i32
  %12 = add i32 %8, 16383
  %13 = and i32 %12, -32768
  %14 = or i32 %13, 16384
  %15 = add nsw i32 %11, 10
  %16 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 4
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 2
  %19 = load i16*, i16** %18, align 8
  %20 = icmp sgt i32 %15, 0
  br i1 %20, label %21, label %62

21:                                               ; preds = %6
  %22 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 3
  %23 = load i32, i32* %22, align 8
  %24 = add nsw i32 %11, 17
  %25 = ashr i32 %24, 3
  %26 = add i32 %25, %17
  %27 = icmp ugt i32 %26, %23
  br i1 %27, label %28, label %39

28:                                               ; preds = %21
  %29 = shl i32 %23, 1
  %30 = add i32 %29, %25
  %31 = bitcast i16* %19 to i8*
  %32 = zext i32 %30 to i64
  %33 = shl nuw nsw i64 %32, 1
  %34 = tail call i8* @realloc(i8* %31, i64 %33) #10
  %35 = icmp eq i8* %34, null
  br i1 %35, label %61, label %36

36:                                               ; preds = %28
  %37 = bitcast i8* %34 to i16*
  %38 = bitcast i16** %18 to i8**
  store i8* %34, i8** %38, align 8
  store i32 %30, i32* %22, align 8
  br label %39

39:                                               ; preds = %36, %21
  %40 = phi i16* [ %37, %36 ], [ %19, %21 ]
  %41 = add nsw i32 %11, 16
  %42 = shl nsw i32 -1, %41
  %43 = xor i32 %42, -1
  br label %44

44:                                               ; preds = %44, %39
  %45 = phi i32 [ %17, %39 ], [ %53, %44 ]
  %46 = phi i32 [ %14, %39 ], [ %56, %44 ]
  %47 = phi i32 [ %11, %39 ], [ %58, %44 ]
  %48 = phi i32 [ %15, %39 ], [ %57, %44 ]
  %49 = phi i32 [ %43, %39 ], [ %59, %44 ]
  %50 = add nsw i32 %47, 16
  %51 = lshr i32 %46, %50
  %52 = trunc i32 %51 to i16
  %53 = add i32 %45, 1
  %54 = zext i32 %45 to i64
  %55 = getelementptr inbounds i16, i16* %40, i64 %54
  store i16 %52, i16* %55, align 2
  %56 = and i32 %49, %46
  %57 = add nsw i32 %48, -8
  %58 = add nsw i32 %47, -8
  %59 = lshr i32 %49, 8
  %60 = icmp sgt i32 %57, 0
  br i1 %60, label %44, label %62

61:                                               ; preds = %28
  store i32 -1, i32* %3, align 8
  br label %135

62:                                               ; preds = %44, %6
  %63 = phi i16* [ %19, %6 ], [ %40, %44 ]
  %64 = phi i32 [ %17, %6 ], [ %53, %44 ]
  %65 = phi i32 [ %15, %6 ], [ %57, %44 ]
  %66 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 0
  %67 = load i8*, i8** %66, align 8
  %68 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 1
  %69 = load i32, i32* %68, align 8
  %70 = icmp sgt i32 %65, 0
  %71 = add nsw i32 %65, 7
  %72 = ashr i32 %71, 3
  %73 = select i1 %70, i32 %72, i32 0
  %74 = add i32 %73, %64
  %75 = icmp ugt i32 %74, %69
  br i1 %75, label %78, label %76

76:                                               ; preds = %62
  %77 = zext i32 %69 to i64
  br label %84

78:                                               ; preds = %62
  %79 = zext i32 %74 to i64
  %80 = tail call i8* @realloc(i8* %67, i64 %79) #10
  %81 = icmp eq i8* %80, null
  br i1 %81, label %82, label %83

82:                                               ; preds = %78
  store i32 -1, i32* %3, align 8
  br label %135

83:                                               ; preds = %78
  store i8* %80, i8** %66, align 8
  store i32 %74, i32* %68, align 8
  br label %84

84:                                               ; preds = %76, %83
  %85 = phi i64 [ %77, %76 ], [ %79, %83 ]
  %86 = phi i8* [ %67, %76 ], [ %80, %83 ]
  store i32 %64, i32* %1, align 4
  %87 = getelementptr inbounds i8, i8* %86, i64 %85
  %88 = zext i32 %64 to i64
  %89 = sub nsw i64 0, %88
  %90 = getelementptr inbounds i8, i8* %87, i64 %89
  %91 = icmp eq i32 %64, 0
  br i1 %91, label %135, label %92

92:                                               ; preds = %84
  %93 = and i32 %64, 1
  %94 = icmp eq i32 %64, 1
  br i1 %94, label %122, label %95

95:                                               ; preds = %92
  %96 = sub i32 %64, %93
  br label %97

97:                                               ; preds = %97, %95
  %98 = phi i64 [ %88, %95 ], [ %119, %97 ]
  %99 = phi i32 [ 0, %95 ], [ %118, %97 ]
  %100 = phi i32 [ %96, %95 ], [ %120, %97 ]
  %101 = add i64 %98, 4294967295
  %102 = and i64 %101, 4294967295
  %103 = getelementptr inbounds i16, i16* %63, i64 %102
  %104 = load i16, i16* %103, align 2
  %105 = zext i16 %104 to i32
  %106 = add nsw i32 %99, %105
  %107 = trunc i32 %106 to i8
  %108 = getelementptr inbounds i8, i8* %90, i64 %102
  store i8 %107, i8* %108, align 1
  %109 = ashr i32 %106, 8
  %110 = add i64 %98, 4294967294
  %111 = and i64 %110, 4294967295
  %112 = getelementptr inbounds i16, i16* %63, i64 %111
  %113 = load i16, i16* %112, align 2
  %114 = zext i16 %113 to i32
  %115 = add nsw i32 %109, %114
  %116 = trunc i32 %115 to i8
  %117 = getelementptr inbounds i8, i8* %90, i64 %111
  store i8 %116, i8* %117, align 1
  %118 = ashr i32 %115, 8
  %119 = add nsw i64 %98, -2
  %120 = add i32 %100, -2
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %97

122:                                              ; preds = %97, %92
  %123 = phi i64 [ %88, %92 ], [ %119, %97 ]
  %124 = phi i32 [ 0, %92 ], [ %118, %97 ]
  %125 = icmp eq i32 %93, 0
  br i1 %125, label %135, label %126

126:                                              ; preds = %122
  %127 = add i64 %123, 4294967295
  %128 = and i64 %127, 4294967295
  %129 = getelementptr inbounds i16, i16* %63, i64 %128
  %130 = load i16, i16* %129, align 2
  %131 = zext i16 %130 to i32
  %132 = add nsw i32 %124, %131
  %133 = trunc i32 %132 to i8
  %134 = getelementptr inbounds i8, i8* %90, i64 %128
  store i8 %133, i8* %134, align 1
  br label %135

135:                                              ; preds = %126, %122, %84, %61, %2, %82
  %136 = phi i8* [ null, %82 ], [ null, %61 ], [ null, %2 ], [ %90, %84 ], [ %90, %122 ], [ %90, %126 ]
  ret i8* %136
}

; Function Attrs: nounwind
declare noalias i8* @realloc(i8* nocapture, i64) local_unnamed_addr #4

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @od_ec_enc_tell(%struct.od_ec_enc* nocapture readonly) local_unnamed_addr #6 {
  %2 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 7
  %3 = load i16, i16* %2, align 2
  %4 = sext i16 %3 to i32
  %5 = add nsw i32 %4, 10
  %6 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 4
  %7 = load i32, i32* %6, align 4
  %8 = shl i32 %7, 3
  %9 = add i32 %5, %8
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @od_ec_enc_tell_frac(%struct.od_ec_enc* nocapture readonly) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 7
  %3 = load i16, i16* %2, align 2
  %4 = sext i16 %3 to i32
  %5 = add nsw i32 %4, 10
  %6 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 4
  %7 = load i32, i32* %6, align 4
  %8 = shl i32 %7, 3
  %9 = add i32 %5, %8
  %10 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 6
  %11 = load i16, i16* %10, align 4
  %12 = zext i16 %11 to i32
  %13 = tail call i32 @od_ec_tell_frac(i32 %9, i32 %12) #10
  ret i32 %13
}

declare i32 @od_ec_tell_frac(i32, i32) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define hidden void @od_ec_enc_checkpoint(%struct.od_ec_enc* nocapture, %struct.od_ec_enc* nocapture readonly) local_unnamed_addr #3 {
  %3 = bitcast %struct.od_ec_enc* %0 to i8*
  %4 = bitcast %struct.od_ec_enc* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 48, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #8

; Function Attrs: nounwind ssp uwtable
define hidden void @od_ec_enc_rollback(%struct.od_ec_enc* nocapture, %struct.od_ec_enc* nocapture readonly) local_unnamed_addr #3 {
  %3 = bitcast %struct.od_ec_enc* %0 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 2
  %8 = bitcast i16** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %struct.od_ec_enc, %struct.od_ec_enc* %0, i64 0, i32 3
  %11 = load i32, i32* %10, align 8
  %12 = bitcast %struct.od_ec_enc* %0 to i8*
  %13 = bitcast %struct.od_ec_enc* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* align 8 %13, i64 48, i1 false)
  store i64 %4, i64* %3, align 8
  store i32 %6, i32* %5, align 8
  store i64 %9, i64* %8, align 8
  store i32 %11, i32* %10, align 8
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #9

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { argmemonly nounwind }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
