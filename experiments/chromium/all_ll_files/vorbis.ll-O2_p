; ModuleID = '../../third_party/ffmpeg/libavcodec/vorbis.c'
source_filename = "../../third_party/ffmpeg/libavcodec/vorbis.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AVCodecContext = type { %struct.AVClass*, i32, i32, %struct.AVCodec*, i32, i32, i8*, %struct.AVCodecInternal*, i8*, i64, i32, i32, i32, i32, i32, i8*, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, void (%struct.AVCodecContext*, %struct.AVFrame*, i32*, i32, i32, i32)*, i32 (%struct.AVCodecContext*, i32*)*, i32, float, i32, float, i32, i32, float, float, float, float, float, float, float, i32, i32, i32*, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16*, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*, i32)*, i32, float, float, i32, i32, i32, i32, i32, %struct.RcOverride*, i64, i64, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, void (%struct.AVCodecContext*, i8*, i32, i32)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i32, i32, i64, %struct.AVHWAccel*, i8*, [8 x i64], i32, i32, i32, i32, i32, %struct.AVFrame*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*)*, i8*, i32*, i32, i32)*, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*, i32, i32)*, i8*, i32*, i32)*, i32, i32, i32, i32, i32, i32, i8*, i32, i64, i32, i32, %struct.AVRational, i32, %struct.AVRational, %struct.AVCodecDescriptor*, i64, i64, i64, i64, i8*, i32, i32, i32, i32, i16*, i8*, i8*, i32, %struct.AVPacketSideData*, i32, %struct.AVBufferRef*, i32, i32, i64, %struct.AVBufferRef*, i32, i32, i32, i32, i64, i32 }
%struct.AVClass = type { i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass* (%struct.AVClass*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)*, %struct.AVClass* (i8**)* }
%struct.AVOption = type opaque
%struct.AVOptionRanges = type opaque
%struct.AVCodec = type { i8*, i8*, i32, i32, i32, %struct.AVRational*, i32*, i32*, i32*, i64*, i8, %struct.AVClass*, %struct.AVProfile*, i8*, i32, %struct.AVCodec*, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)*, %struct.AVCodecDefault*, void (%struct.AVCodec*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)*, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, void (%struct.AVCodecContext*)*, i32, i8*, %struct.AVCodecHWConfigInternal**, i32* }
%struct.AVProfile = type { i32, i8* }
%struct.AVCodecDefault = type opaque
%struct.AVSubtitle = type { i16, i32, i32, i32, %struct.AVSubtitleRect**, i64 }
%struct.AVSubtitleRect = type { i32, i32, i32, i32, i32, %struct.AVPicture, [4 x i8*], [4 x i32], i32, i8*, i8*, i32 }
%struct.AVPicture = type { [8 x i8*], [8 x i32] }
%struct.AVPacket = type { %struct.AVBufferRef*, i64, i64, i8*, i32, i32, i32, %struct.AVPacketSideData*, i32, i64, i64, i64 }
%struct.AVCodecHWConfigInternal = type opaque
%struct.AVCodecInternal = type opaque
%struct.RcOverride = type { i32, i32, i32, float }
%struct.AVHWAccel = type { i8*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*, i32, i8*, i32)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*)*, i32, void (%struct.MpegEncContext*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*)*, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVBufferRef*)* }
%struct.MpegEncContext = type opaque
%struct.AVFrame = type { [8 x i8*], [8 x i32], i8**, i32, i32, i32, i32, i32, i32, %struct.AVRational, i64, i64, i64, i32, i32, i32, i8*, [8 x i64], i32, i32, i32, i32, i64, i32, i64, [8 x %struct.AVBufferRef*], %struct.AVBufferRef**, i32, %struct.AVFrameSideData**, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, %struct.AVDictionary*, i32, i32, i32, i8*, i32, i32, %struct.AVBufferRef*, %struct.AVBufferRef*, %struct.AVBufferRef*, i64, i64, i64, i64, %struct.AVBufferRef* }
%struct.AVFrameSideData = type { i32, i8*, i32, %struct.AVDictionary*, %struct.AVBufferRef* }
%struct.AVDictionary = type opaque
%struct.AVRational = type { i32, i32 }
%struct.AVCodecDescriptor = type { i32, i32, i8*, i8*, i32, i8**, %struct.AVProfile* }
%struct.AVPacketSideData = type { i8*, i32, i32 }
%struct.AVBufferRef = type { %struct.AVBuffer*, i8*, i32 }
%struct.AVBuffer = type opaque
%struct.vorbis_floor1_entry = type { i16, i16, i16, i16 }

@.str = private unnamed_addr constant [48 x i8] c"Duplicate value found in floor 1 X coordinates\0A\00", align 1
@ff_vorbis_floor1_inverse_db_table = external local_unnamed_addr constant [256 x float], align 16

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @ff_vorbis_nth_root(i32, i32) local_unnamed_addr #0 {
  %3 = add i32 %1, -1
  %4 = icmp eq i32 %3, 0
  %5 = add i32 %1, -2
  %6 = and i32 %3, 7
  %7 = icmp ult i32 %5, 7
  %8 = sub i32 %3, %6
  %9 = icmp eq i32 %6, 0
  br label %10

10:                                               ; preds = %36, %2
  %11 = phi i32 [ 0, %2 ], [ %12, %36 ]
  %12 = add i32 %11, 1
  br i1 %4, label %36, label %13

13:                                               ; preds = %10
  br i1 %7, label %27, label %14

14:                                               ; preds = %13, %14
  %15 = phi i32 [ %24, %14 ], [ %12, %13 ]
  %16 = phi i32 [ %25, %14 ], [ %8, %13 ]
  %17 = mul i32 %15, %12
  %18 = mul i32 %17, %12
  %19 = mul i32 %18, %12
  %20 = mul i32 %19, %12
  %21 = mul i32 %20, %12
  %22 = mul i32 %21, %12
  %23 = mul i32 %22, %12
  %24 = mul i32 %23, %12
  %25 = add i32 %16, -8
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %14

27:                                               ; preds = %14, %13
  %28 = phi i32 [ undef, %13 ], [ %24, %14 ]
  %29 = phi i32 [ %12, %13 ], [ %24, %14 ]
  br i1 %9, label %36, label %30

30:                                               ; preds = %27, %30
  %31 = phi i32 [ %33, %30 ], [ %29, %27 ]
  %32 = phi i32 [ %34, %30 ], [ %6, %27 ]
  %33 = mul i32 %31, %12
  %34 = add i32 %32, -1
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %30, !llvm.loop !2

36:                                               ; preds = %27, %30, %10
  %37 = phi i32 [ %12, %10 ], [ %28, %27 ], [ %33, %30 ]
  %38 = icmp ugt i32 %37, %0
  br i1 %38, label %39, label %10

39:                                               ; preds = %36
  ret i32 %11
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ff_vorbis_len2vlc(i8* nocapture readonly, i32* nocapture, i32) local_unnamed_addr #2 {
  %4 = alloca [33 x i32], align 16
  %5 = bitcast [33 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 132, i8* nonnull %5) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 0, i64 132, i1 false)
  %6 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 0
  store i32 404, i32* %6, align 16
  %7 = icmp eq i32 %2, 0
  br i1 %7, label %22, label %8

8:                                                ; preds = %3
  %9 = zext i32 %2 to i64
  br label %10

10:                                               ; preds = %16, %8
  %11 = phi i64 [ 0, %8 ], [ %17, %16 ]
  %12 = phi i32 [ 0, %8 ], [ %18, %16 ]
  %13 = getelementptr inbounds i8, i8* %0, i64 %11
  %14 = load i8, i8* %13, align 1
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %16, label %20

16:                                               ; preds = %10
  %17 = add nuw nsw i64 %11, 1
  %18 = add nuw i32 %12, 1
  %19 = icmp eq i64 %17, %9
  br i1 %19, label %22, label %10

20:                                               ; preds = %10
  %21 = trunc i64 %11 to i32
  br label %22

22:                                               ; preds = %16, %20, %3
  %23 = phi i32 [ 0, %3 ], [ %21, %20 ], [ %18, %16 ]
  %24 = icmp eq i32 %23, %2
  br i1 %24, label %185, label %25

25:                                               ; preds = %22
  %26 = zext i32 %23 to i64
  %27 = getelementptr inbounds i32, i32* %1, i64 %26
  store i32 0, i32* %27, align 4
  %28 = getelementptr inbounds i8, i8* %0, i64 %26
  %29 = load i8, i8* %28, align 1
  %30 = icmp ugt i8 %29, 32
  br i1 %30, label %185, label %31

31:                                               ; preds = %25
  %32 = icmp eq i8 %29, 0
  br i1 %32, label %73, label %33

33:                                               ; preds = %31
  %34 = zext i8 %29 to i64
  %35 = add nsw i64 %34, -1
  %36 = and i64 %34, 3
  %37 = icmp ult i64 %35, 3
  br i1 %37, label %61, label %38

38:                                               ; preds = %33
  %39 = sub nsw i64 %34, %36
  br label %40

40:                                               ; preds = %40, %38
  %41 = phi i64 [ 0, %38 ], [ %57, %40 ]
  %42 = phi i64 [ %39, %38 ], [ %59, %40 ]
  %43 = trunc i64 %41 to i32
  %44 = shl i32 1, %43
  %45 = or i64 %41, 1
  %46 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 %45
  store i32 %44, i32* %46, align 4
  %47 = trunc i64 %45 to i32
  %48 = shl i32 1, %47
  %49 = or i64 %41, 2
  %50 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 %49
  store i32 %48, i32* %50, align 8
  %51 = trunc i64 %49 to i32
  %52 = shl i32 1, %51
  %53 = or i64 %41, 3
  %54 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 %53
  store i32 %52, i32* %54, align 4
  %55 = trunc i64 %53 to i32
  %56 = shl i32 1, %55
  %57 = add nuw nsw i64 %41, 4
  %58 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 %57
  store i32 %56, i32* %58, align 16
  %59 = add i64 %42, -4
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %61, label %40

61:                                               ; preds = %40, %33
  %62 = phi i64 [ 0, %33 ], [ %57, %40 ]
  %63 = icmp eq i64 %36, 0
  br i1 %63, label %73, label %64

64:                                               ; preds = %61, %64
  %65 = phi i64 [ %69, %64 ], [ %62, %61 ]
  %66 = phi i64 [ %71, %64 ], [ %36, %61 ]
  %67 = trunc i64 %65 to i32
  %68 = shl i32 1, %67
  %69 = add nuw nsw i64 %65, 1
  %70 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 %69
  store i32 %68, i32* %70, align 4
  %71 = add i64 %66, -1
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %64, !llvm.loop !4

73:                                               ; preds = %61, %64, %31
  %74 = add i32 %23, 1
  %75 = icmp ult i32 %74, %2
  br i1 %75, label %76, label %91

76:                                               ; preds = %73
  %77 = zext i32 %74 to i64
  br label %78

78:                                               ; preds = %84, %76
  %79 = phi i64 [ %77, %76 ], [ %85, %84 ]
  %80 = phi i32 [ %74, %76 ], [ %86, %84 ]
  %81 = getelementptr inbounds i8, i8* %0, i64 %79
  %82 = load i8, i8* %81, align 1
  %83 = icmp eq i8 %82, 0
  br i1 %83, label %84, label %89

84:                                               ; preds = %78
  %85 = add nuw nsw i64 %79, 1
  %86 = add nuw i32 %80, 1
  %87 = trunc i64 %85 to i32
  %88 = icmp eq i32 %87, %2
  br i1 %88, label %91, label %78

89:                                               ; preds = %78
  %90 = trunc i64 %79 to i32
  br label %91

91:                                               ; preds = %84, %89, %73
  %92 = phi i32 [ %74, %73 ], [ %90, %89 ], [ %86, %84 ]
  %93 = icmp eq i32 %92, %2
  br i1 %93, label %185, label %94

94:                                               ; preds = %91
  br i1 %75, label %99, label %95

95:                                               ; preds = %178, %94
  %96 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 1
  %97 = load i32, i32* %96, align 4
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %181, label %185

99:                                               ; preds = %94, %178
  %100 = phi i32 [ %179, %178 ], [ %74, %94 ]
  %101 = zext i32 %100 to i64
  %102 = getelementptr inbounds i8, i8* %0, i64 %101
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i32
  %105 = icmp ugt i8 %103, 32
  br i1 %105, label %185, label %106

106:                                              ; preds = %99
  %107 = icmp eq i8 %103, 0
  br i1 %107, label %178, label %108

108:                                              ; preds = %106, %114
  %109 = phi i32 [ %115, %114 ], [ %104, %106 ]
  %110 = zext i32 %109 to i64
  %111 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 %110
  %112 = load i32, i32* %111, align 4
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %114, label %117

114:                                              ; preds = %108
  %115 = add nsw i32 %109, -1
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %185, label %108

117:                                              ; preds = %108
  %118 = zext i32 %109 to i64
  %119 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 %118
  store i32 0, i32* %119, align 4
  %120 = add i32 %109, 1
  %121 = icmp ugt i32 %120, %104
  br i1 %121, label %176, label %122

122:                                              ; preds = %117
  %123 = zext i32 %120 to i64
  %124 = sub i32 %104, %109
  %125 = xor i32 %109, -1
  %126 = add i32 %125, %104
  %127 = and i32 %124, 3
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %144, label %129

129:                                              ; preds = %122, %129
  %130 = phi i64 [ %138, %129 ], [ %123, %122 ]
  %131 = phi i32 [ %137, %129 ], [ %120, %122 ]
  %132 = phi i32 [ %139, %129 ], [ %109, %122 ]
  %133 = phi i32 [ %140, %129 ], [ %127, %122 ]
  %134 = shl i32 1, %132
  %135 = add i32 %134, %112
  %136 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 %130
  store i32 %135, i32* %136, align 4
  %137 = add i32 %131, 1
  %138 = add nuw nsw i64 %130, 1
  %139 = trunc i64 %130 to i32
  %140 = add i32 %133, -1
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %142, label %129, !llvm.loop !5

142:                                              ; preds = %129
  %143 = trunc i64 %130 to i32
  br label %144

144:                                              ; preds = %122, %142
  %145 = phi i64 [ %123, %122 ], [ %138, %142 ]
  %146 = phi i32 [ %120, %122 ], [ %137, %142 ]
  %147 = phi i32 [ %109, %122 ], [ %143, %142 ]
  %148 = icmp ult i32 %126, 3
  br i1 %148, label %176, label %149

149:                                              ; preds = %144, %149
  %150 = phi i64 [ %173, %149 ], [ %145, %144 ]
  %151 = phi i32 [ %172, %149 ], [ %146, %144 ]
  %152 = phi i32 [ %174, %149 ], [ %147, %144 ]
  %153 = shl i32 1, %152
  %154 = add i32 %153, %112
  %155 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 %150
  store i32 %154, i32* %155, align 4
  %156 = add nuw nsw i64 %150, 1
  %157 = trunc i64 %150 to i32
  %158 = shl i32 1, %157
  %159 = add i32 %158, %112
  %160 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 %156
  store i32 %159, i32* %160, align 4
  %161 = add nuw nsw i64 %150, 2
  %162 = trunc i64 %156 to i32
  %163 = shl i32 1, %162
  %164 = add i32 %163, %112
  %165 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 %161
  store i32 %164, i32* %165, align 4
  %166 = add i32 %151, 3
  %167 = add nuw nsw i64 %150, 3
  %168 = trunc i64 %161 to i32
  %169 = shl i32 1, %168
  %170 = add i32 %169, %112
  %171 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 %167
  store i32 %170, i32* %171, align 4
  %172 = add i32 %151, 4
  %173 = add nuw nsw i64 %150, 4
  %174 = trunc i64 %167 to i32
  %175 = icmp eq i32 %166, %104
  br i1 %175, label %176, label %149

176:                                              ; preds = %144, %149, %117
  %177 = getelementptr inbounds i32, i32* %1, i64 %101
  store i32 %112, i32* %177, align 4
  br label %178

178:                                              ; preds = %106, %176
  %179 = add i32 %100, 1
  %180 = icmp eq i32 %179, %2
  br i1 %180, label %95, label %99

181:                                              ; preds = %95
  %182 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 2
  %183 = load i32, i32* %182, align 8
  %184 = icmp eq i32 %183, 0
  br i1 %184, label %187, label %185

185:                                              ; preds = %99, %114, %303, %95, %181, %187, %191, %195, %199, %203, %207, %211, %215, %219, %223, %227, %231, %235, %239, %243, %247, %251, %255, %259, %263, %267, %271, %275, %279, %283, %287, %291, %295, %299, %91, %25, %22
  %186 = phi i32 [ 0, %22 ], [ -1094995529, %25 ], [ 0, %91 ], [ -1094995529, %95 ], [ -1094995529, %181 ], [ -1094995529, %187 ], [ -1094995529, %191 ], [ -1094995529, %195 ], [ -1094995529, %199 ], [ -1094995529, %203 ], [ -1094995529, %207 ], [ -1094995529, %211 ], [ -1094995529, %215 ], [ -1094995529, %219 ], [ -1094995529, %223 ], [ -1094995529, %227 ], [ -1094995529, %231 ], [ -1094995529, %235 ], [ -1094995529, %239 ], [ -1094995529, %243 ], [ -1094995529, %247 ], [ -1094995529, %251 ], [ -1094995529, %255 ], [ -1094995529, %259 ], [ -1094995529, %263 ], [ -1094995529, %267 ], [ -1094995529, %271 ], [ -1094995529, %275 ], [ -1094995529, %279 ], [ -1094995529, %283 ], [ -1094995529, %287 ], [ -1094995529, %291 ], [ -1094995529, %295 ], [ -1094995529, %299 ], [ %307, %303 ], [ -1094995529, %114 ], [ -1094995529, %99 ]
  call void @llvm.lifetime.end.p0i8(i64 132, i8* nonnull %5) #6
  ret i32 %186

187:                                              ; preds = %181
  %188 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 3
  %189 = load i32, i32* %188, align 4
  %190 = icmp eq i32 %189, 0
  br i1 %190, label %191, label %185

191:                                              ; preds = %187
  %192 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 4
  %193 = load i32, i32* %192, align 16
  %194 = icmp eq i32 %193, 0
  br i1 %194, label %195, label %185

195:                                              ; preds = %191
  %196 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 5
  %197 = load i32, i32* %196, align 4
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %199, label %185

199:                                              ; preds = %195
  %200 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 6
  %201 = load i32, i32* %200, align 8
  %202 = icmp eq i32 %201, 0
  br i1 %202, label %203, label %185

203:                                              ; preds = %199
  %204 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 7
  %205 = load i32, i32* %204, align 4
  %206 = icmp eq i32 %205, 0
  br i1 %206, label %207, label %185

207:                                              ; preds = %203
  %208 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 8
  %209 = load i32, i32* %208, align 16
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %211, label %185

211:                                              ; preds = %207
  %212 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 9
  %213 = load i32, i32* %212, align 4
  %214 = icmp eq i32 %213, 0
  br i1 %214, label %215, label %185

215:                                              ; preds = %211
  %216 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 10
  %217 = load i32, i32* %216, align 8
  %218 = icmp eq i32 %217, 0
  br i1 %218, label %219, label %185

219:                                              ; preds = %215
  %220 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 11
  %221 = load i32, i32* %220, align 4
  %222 = icmp eq i32 %221, 0
  br i1 %222, label %223, label %185

223:                                              ; preds = %219
  %224 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 12
  %225 = load i32, i32* %224, align 16
  %226 = icmp eq i32 %225, 0
  br i1 %226, label %227, label %185

227:                                              ; preds = %223
  %228 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 13
  %229 = load i32, i32* %228, align 4
  %230 = icmp eq i32 %229, 0
  br i1 %230, label %231, label %185

231:                                              ; preds = %227
  %232 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 14
  %233 = load i32, i32* %232, align 8
  %234 = icmp eq i32 %233, 0
  br i1 %234, label %235, label %185

235:                                              ; preds = %231
  %236 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 15
  %237 = load i32, i32* %236, align 4
  %238 = icmp eq i32 %237, 0
  br i1 %238, label %239, label %185

239:                                              ; preds = %235
  %240 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 16
  %241 = load i32, i32* %240, align 16
  %242 = icmp eq i32 %241, 0
  br i1 %242, label %243, label %185

243:                                              ; preds = %239
  %244 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 17
  %245 = load i32, i32* %244, align 4
  %246 = icmp eq i32 %245, 0
  br i1 %246, label %247, label %185

247:                                              ; preds = %243
  %248 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 18
  %249 = load i32, i32* %248, align 8
  %250 = icmp eq i32 %249, 0
  br i1 %250, label %251, label %185

251:                                              ; preds = %247
  %252 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 19
  %253 = load i32, i32* %252, align 4
  %254 = icmp eq i32 %253, 0
  br i1 %254, label %255, label %185

255:                                              ; preds = %251
  %256 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 20
  %257 = load i32, i32* %256, align 16
  %258 = icmp eq i32 %257, 0
  br i1 %258, label %259, label %185

259:                                              ; preds = %255
  %260 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 21
  %261 = load i32, i32* %260, align 4
  %262 = icmp eq i32 %261, 0
  br i1 %262, label %263, label %185

263:                                              ; preds = %259
  %264 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 22
  %265 = load i32, i32* %264, align 8
  %266 = icmp eq i32 %265, 0
  br i1 %266, label %267, label %185

267:                                              ; preds = %263
  %268 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 23
  %269 = load i32, i32* %268, align 4
  %270 = icmp eq i32 %269, 0
  br i1 %270, label %271, label %185

271:                                              ; preds = %267
  %272 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 24
  %273 = load i32, i32* %272, align 16
  %274 = icmp eq i32 %273, 0
  br i1 %274, label %275, label %185

275:                                              ; preds = %271
  %276 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 25
  %277 = load i32, i32* %276, align 4
  %278 = icmp eq i32 %277, 0
  br i1 %278, label %279, label %185

279:                                              ; preds = %275
  %280 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 26
  %281 = load i32, i32* %280, align 8
  %282 = icmp eq i32 %281, 0
  br i1 %282, label %283, label %185

283:                                              ; preds = %279
  %284 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 27
  %285 = load i32, i32* %284, align 4
  %286 = icmp eq i32 %285, 0
  br i1 %286, label %287, label %185

287:                                              ; preds = %283
  %288 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 28
  %289 = load i32, i32* %288, align 16
  %290 = icmp eq i32 %289, 0
  br i1 %290, label %291, label %185

291:                                              ; preds = %287
  %292 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 29
  %293 = load i32, i32* %292, align 4
  %294 = icmp eq i32 %293, 0
  br i1 %294, label %295, label %185

295:                                              ; preds = %291
  %296 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 30
  %297 = load i32, i32* %296, align 8
  %298 = icmp eq i32 %297, 0
  br i1 %298, label %299, label %185

299:                                              ; preds = %295
  %300 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 31
  %301 = load i32, i32* %300, align 4
  %302 = icmp eq i32 %301, 0
  br i1 %302, label %303, label %185

303:                                              ; preds = %299
  %304 = getelementptr inbounds [33 x i32], [33 x i32]* %4, i64 0, i64 32
  %305 = load i32, i32* %304, align 16
  %306 = icmp eq i32 %305, 0
  %307 = select i1 %306, i32 0, i32 -1094995529
  br label %185
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ff_vorbis_ready_floor1_list(%struct.AVCodecContext*, %struct.vorbis_floor1_entry* nocapture, i32) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.vorbis_floor1_entry, %struct.vorbis_floor1_entry* %1, i64 0, i32 1
  store i16 0, i16* %4, align 2
  %5 = getelementptr inbounds %struct.vorbis_floor1_entry, %struct.vorbis_floor1_entry* %1, i64 1, i32 1
  store i16 1, i16* %5, align 2
  %6 = icmp sgt i32 %2, 2
  br i1 %6, label %7, label %9

7:                                                ; preds = %3
  %8 = zext i32 %2 to i64
  br label %16

9:                                                ; preds = %52, %3
  %10 = add i32 %2, -1
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %12, label %89

12:                                               ; preds = %9
  %13 = sext i32 %2 to i64
  %14 = zext i32 %10 to i64
  %15 = zext i32 %2 to i64
  br label %58

16:                                               ; preds = %52, %7
  %17 = phi i64 [ 2, %7 ], [ %53, %52 ]
  %18 = getelementptr inbounds %struct.vorbis_floor1_entry, %struct.vorbis_floor1_entry* %1, i64 %17, i32 2
  store i16 0, i16* %18, align 2
  %19 = getelementptr inbounds %struct.vorbis_floor1_entry, %struct.vorbis_floor1_entry* %1, i64 %17, i32 3
  store i16 1, i16* %19, align 2
  %20 = trunc i64 %17 to i16
  %21 = getelementptr inbounds %struct.vorbis_floor1_entry, %struct.vorbis_floor1_entry* %1, i64 %17, i32 1
  store i16 %20, i16* %21, align 2
  %22 = icmp ugt i64 %17, 2
  br i1 %22, label %23, label %52

23:                                               ; preds = %16
  %24 = getelementptr inbounds %struct.vorbis_floor1_entry, %struct.vorbis_floor1_entry* %1, i64 %17, i32 0
  %25 = load i16, i16* %24, align 2
  br label %26

26:                                               ; preds = %47, %23
  %27 = phi i16 [ 0, %23 ], [ %48, %47 ]
  %28 = phi i16 [ 1, %23 ], [ %49, %47 ]
  %29 = phi i64 [ 2, %23 ], [ %50, %47 ]
  %30 = getelementptr inbounds %struct.vorbis_floor1_entry, %struct.vorbis_floor1_entry* %1, i64 %29, i32 0
  %31 = load i16, i16* %30, align 2
  %32 = icmp ult i16 %31, %25
  br i1 %32, label %33, label %40

33:                                               ; preds = %26
  %34 = zext i16 %27 to i64
  %35 = getelementptr inbounds %struct.vorbis_floor1_entry, %struct.vorbis_floor1_entry* %1, i64 %34, i32 0
  %36 = load i16, i16* %35, align 2
  %37 = icmp ugt i16 %31, %36
  br i1 %37, label %38, label %47

38:                                               ; preds = %33
  %39 = trunc i64 %29 to i16
  store i16 %39, i16* %18, align 2
  br label %47

40:                                               ; preds = %26
  %41 = zext i16 %28 to i64
  %42 = getelementptr inbounds %struct.vorbis_floor1_entry, %struct.vorbis_floor1_entry* %1, i64 %41, i32 0
  %43 = load i16, i16* %42, align 2
  %44 = icmp ult i16 %31, %43
  br i1 %44, label %45, label %47

45:                                               ; preds = %40
  %46 = trunc i64 %29 to i16
  store i16 %46, i16* %19, align 2
  br label %47

47:                                               ; preds = %40, %45, %33, %38
  %48 = phi i16 [ %27, %40 ], [ %27, %45 ], [ %27, %33 ], [ %39, %38 ]
  %49 = phi i16 [ %28, %40 ], [ %46, %45 ], [ %28, %33 ], [ %28, %38 ]
  %50 = add nuw nsw i64 %29, 1
  %51 = icmp eq i64 %50, %17
  br i1 %51, label %52, label %26

52:                                               ; preds = %47, %16
  %53 = add nuw nsw i64 %17, 1
  %54 = icmp eq i64 %53, %8
  br i1 %54, label %9, label %16

55:                                               ; preds = %86, %58
  %56 = add nuw nsw i64 %60, 1
  %57 = icmp eq i64 %61, %14
  br i1 %57, label %89, label %58

58:                                               ; preds = %55, %12
  %59 = phi i64 [ 0, %12 ], [ %61, %55 ]
  %60 = phi i64 [ 1, %12 ], [ %56, %55 ]
  %61 = add nuw nsw i64 %59, 1
  %62 = icmp slt i64 %61, %13
  br i1 %62, label %63, label %55

63:                                               ; preds = %58
  %64 = getelementptr inbounds %struct.vorbis_floor1_entry, %struct.vorbis_floor1_entry* %1, i64 %59, i32 0
  %65 = load i16, i16* %64, align 2
  %66 = getelementptr inbounds %struct.vorbis_floor1_entry, %struct.vorbis_floor1_entry* %1, i64 %59, i32 1
  br label %67

67:                                               ; preds = %86, %63
  %68 = phi i64 [ %60, %63 ], [ %87, %86 ]
  %69 = getelementptr inbounds %struct.vorbis_floor1_entry, %struct.vorbis_floor1_entry* %1, i64 %68, i32 0
  %70 = load i16, i16* %69, align 2
  %71 = icmp eq i16 %65, %70
  br i1 %71, label %72, label %74

72:                                               ; preds = %67
  %73 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %73, i32 16, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0)) #6
  br label %89

74:                                               ; preds = %67
  %75 = load i16, i16* %66, align 2
  %76 = zext i16 %75 to i64
  %77 = getelementptr inbounds %struct.vorbis_floor1_entry, %struct.vorbis_floor1_entry* %1, i64 %76, i32 0
  %78 = load i16, i16* %77, align 2
  %79 = getelementptr inbounds %struct.vorbis_floor1_entry, %struct.vorbis_floor1_entry* %1, i64 %68, i32 1
  %80 = load i16, i16* %79, align 2
  %81 = zext i16 %80 to i64
  %82 = getelementptr inbounds %struct.vorbis_floor1_entry, %struct.vorbis_floor1_entry* %1, i64 %81, i32 0
  %83 = load i16, i16* %82, align 2
  %84 = icmp ugt i16 %78, %83
  br i1 %84, label %85, label %86

85:                                               ; preds = %74
  store i16 %80, i16* %66, align 2
  store i16 %75, i16* %79, align 2
  br label %86

86:                                               ; preds = %74, %85
  %87 = add nuw nsw i64 %68, 1
  %88 = icmp eq i64 %87, %15
  br i1 %88, label %55, label %67

89:                                               ; preds = %55, %9, %72
  %90 = phi i32 [ -1094995529, %72 ], [ 0, %9 ], [ 0, %55 ]
  ret i32 %90
}

declare void @av_log(i8*, i32, i8*, ...) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ff_vorbis_floor1_render_list(%struct.vorbis_floor1_entry* nocapture readonly, i32, i16* nocapture readonly, i32* nocapture readonly, i32, float* nocapture, i32) local_unnamed_addr #4 {
  %8 = load i16, i16* %2, align 2
  %9 = zext i16 %8 to i32
  %10 = mul nsw i32 %9, %4
  %11 = icmp sgt i32 %1, 1
  br i1 %11, label %12, label %43

12:                                               ; preds = %7
  %13 = sext i32 %1 to i64
  br label %14

14:                                               ; preds = %36, %12
  %15 = phi i64 [ %40, %36 ], [ 1, %12 ]
  %16 = phi i32 [ %38, %36 ], [ %10, %12 ]
  %17 = phi i32 [ %37, %36 ], [ 0, %12 ]
  %18 = getelementptr inbounds %struct.vorbis_floor1_entry, %struct.vorbis_floor1_entry* %0, i64 %15, i32 1
  %19 = load i16, i16* %18, align 2
  %20 = zext i16 %19 to i64
  %21 = getelementptr inbounds i32, i32* %3, i64 %20
  %22 = load i32, i32* %21, align 4
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %36, label %24

24:                                               ; preds = %14
  %25 = getelementptr inbounds %struct.vorbis_floor1_entry, %struct.vorbis_floor1_entry* %0, i64 %20, i32 0
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = getelementptr inbounds i16, i16* %2, i64 %20
  %29 = load i16, i16* %28, align 2
  %30 = zext i16 %29 to i32
  %31 = mul nsw i32 %30, %4
  %32 = icmp slt i32 %17, %6
  br i1 %32, label %33, label %36

33:                                               ; preds = %24
  %34 = icmp sgt i32 %27, %6
  %35 = select i1 %34, i32 %6, i32 %27
  tail call fastcc void @render_line(i32 %17, i32 %16, i32 %35, i32 %31, float* %5)
  br label %36

36:                                               ; preds = %24, %33, %14
  %37 = phi i32 [ %17, %14 ], [ %27, %33 ], [ %27, %24 ]
  %38 = phi i32 [ %16, %14 ], [ %31, %33 ], [ %31, %24 ]
  %39 = icmp slt i32 %37, %6
  %40 = add nuw nsw i64 %15, 1
  %41 = icmp slt i64 %40, %13
  %42 = and i1 %39, %41
  br i1 %42, label %14, label %43

43:                                               ; preds = %36, %7
  %44 = phi i32 [ 0, %7 ], [ %37, %36 ]
  %45 = phi i32 [ %10, %7 ], [ %38, %36 ]
  %46 = icmp slt i32 %44, %6
  br i1 %46, label %47, label %48

47:                                               ; preds = %43
  tail call fastcc void @render_line(i32 %44, i32 %45, i32 %6, i32 %45, float* %5)
  br label %48

48:                                               ; preds = %47, %43
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal fastcc void @render_line(i32, i32, i32, i32, float* nocapture) unnamed_addr #5 {
  %6 = sub nsw i32 %3, %1
  %7 = sub nsw i32 %2, %0
  %8 = sub i32 0, %7
  %9 = icmp slt i32 %6, 0
  %10 = sub nsw i32 0, %6
  %11 = select i1 %9, i32 %10, i32 %6
  %12 = select i1 %9, i32 -1, i32 1
  %13 = icmp ugt i32 %1, 255
  %14 = ashr i32 %1, 31
  %15 = xor i32 %14, 255
  %16 = select i1 %13, i32 %15, i32 %1
  %17 = and i32 %16, 255
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds [256 x float], [256 x float]* @ff_vorbis_floor1_inverse_db_table, i64 0, i64 %18
  %20 = bitcast float* %19 to i32*
  %21 = load i32, i32* %20, align 4
  %22 = sext i32 %0 to i64
  %23 = getelementptr inbounds float, float* %4, i64 %22
  %24 = bitcast float* %23 to i32*
  store i32 %21, i32* %24, align 4
  %25 = shl nuw nsw i32 %11, 1
  %26 = icmp sgt i32 %25, %7
  br i1 %26, label %97, label %27

27:                                               ; preds = %5
  %28 = add nsw i32 %2, -1
  %29 = sext i32 %28 to i64
  %30 = sub nsw i64 %22, %29
  %31 = getelementptr inbounds float, float* %4, i64 %29
  %32 = add nsw i64 %30, 1
  %33 = icmp slt i64 %32, 0
  br i1 %33, label %34, label %77

34:                                               ; preds = %27
  %35 = sub i32 %11, %7
  br label %36

36:                                               ; preds = %61, %34
  %37 = phi i64 [ %32, %34 ], [ %75, %61 ]
  %38 = phi i32 [ %8, %34 ], [ %65, %61 ]
  %39 = phi i64 [ %30, %34 ], [ %64, %61 ]
  %40 = phi i32 [ %1, %34 ], [ %63, %61 ]
  %41 = add nsw i32 %38, %11
  %42 = icmp sgt i32 %41, -1
  br i1 %42, label %46, label %43

43:                                               ; preds = %36
  %44 = ashr i32 %40, 31
  %45 = xor i32 %44, 255
  br label %61

46:                                               ; preds = %36
  %47 = add nsw i32 %35, %41
  %48 = add i32 %40, %12
  %49 = icmp ugt i32 %48, 255
  %50 = ashr i32 %48, 31
  %51 = xor i32 %50, 255
  %52 = select i1 %49, i32 %51, i32 %48
  %53 = and i32 %52, 255
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds [256 x float], [256 x float]* @ff_vorbis_floor1_inverse_db_table, i64 0, i64 %54
  %56 = bitcast float* %55 to i32*
  %57 = load i32, i32* %56, align 4
  %58 = add nsw i64 %39, 2
  %59 = getelementptr inbounds float, float* %31, i64 %37
  %60 = bitcast float* %59 to i32*
  store i32 %57, i32* %60, align 4
  br label %61

61:                                               ; preds = %46, %43
  %62 = phi i32 [ %45, %43 ], [ %51, %46 ]
  %63 = phi i32 [ %40, %43 ], [ %48, %46 ]
  %64 = phi i64 [ %37, %43 ], [ %58, %46 ]
  %65 = phi i32 [ %41, %43 ], [ %47, %46 ]
  %66 = icmp ugt i32 %63, 255
  %67 = select i1 %66, i32 %62, i32 %63
  %68 = and i32 %67, 255
  %69 = zext i32 %68 to i64
  %70 = getelementptr inbounds [256 x float], [256 x float]* @ff_vorbis_floor1_inverse_db_table, i64 0, i64 %69
  %71 = bitcast float* %70 to i32*
  %72 = load i32, i32* %71, align 4
  %73 = getelementptr inbounds float, float* %31, i64 %64
  %74 = bitcast float* %73 to i32*
  store i32 %72, i32* %74, align 4
  %75 = add nsw i64 %64, 1
  %76 = icmp slt i64 %75, 0
  br i1 %76, label %36, label %77

77:                                               ; preds = %61, %27
  %78 = phi i32 [ %1, %27 ], [ %63, %61 ]
  %79 = phi i32 [ %8, %27 ], [ %65, %61 ]
  %80 = phi i64 [ %32, %27 ], [ %75, %61 ]
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %133

82:                                               ; preds = %77
  %83 = add nsw i32 %79, %11
  %84 = icmp sgt i32 %83, -1
  %85 = select i1 %84, i32 %12, i32 0
  %86 = add i32 %85, %78
  %87 = icmp ugt i32 %86, 255
  %88 = ashr i32 %86, 31
  %89 = xor i32 %88, 255
  %90 = select i1 %87, i32 %89, i32 %86
  %91 = and i32 %90, 255
  %92 = zext i32 %91 to i64
  %93 = getelementptr inbounds [256 x float], [256 x float]* @ff_vorbis_floor1_inverse_db_table, i64 0, i64 %92
  %94 = bitcast float* %93 to i32*
  %95 = load i32, i32* %94, align 4
  %96 = bitcast float* %31 to i32*
  store i32 %95, i32* %96, align 4
  br label %133

97:                                               ; preds = %5
  %98 = sdiv i32 %6, %7
  %99 = icmp slt i32 %98, 0
  %100 = sub nsw i32 0, %98
  %101 = select i1 %99, i32 %100, i32 %98
  %102 = mul nsw i32 %101, %7
  %103 = sub nsw i32 %11, %102
  %104 = add i32 %0, 1
  %105 = icmp slt i32 %104, %2
  br i1 %105, label %106, label %133

106:                                              ; preds = %97
  %107 = sext i32 %104 to i64
  br label %108

108:                                              ; preds = %108, %106
  %109 = phi i64 [ %107, %106 ], [ %130, %108 ]
  %110 = phi i32 [ %8, %106 ], [ %118, %108 ]
  %111 = phi i32 [ %1, %106 ], [ %116, %108 ]
  %112 = add nsw i32 %111, %98
  %113 = add nsw i32 %110, %103
  %114 = icmp sgt i32 %113, -1
  %115 = select i1 %114, i32 %12, i32 0
  %116 = add nsw i32 %112, %115
  %117 = select i1 %114, i32 %7, i32 0
  %118 = sub nsw i32 %113, %117
  %119 = icmp ugt i32 %116, 255
  %120 = ashr i32 %116, 31
  %121 = xor i32 %120, 255
  %122 = select i1 %119, i32 %121, i32 %116
  %123 = and i32 %122, 255
  %124 = zext i32 %123 to i64
  %125 = getelementptr inbounds [256 x float], [256 x float]* @ff_vorbis_floor1_inverse_db_table, i64 0, i64 %124
  %126 = bitcast float* %125 to i32*
  %127 = load i32, i32* %126, align 4
  %128 = getelementptr inbounds float, float* %4, i64 %109
  %129 = bitcast float* %128 to i32*
  store i32 %127, i32* %129, align 4
  %130 = add nsw i64 %109, 1
  %131 = trunc i64 %130 to i32
  %132 = icmp eq i32 %131, %2
  br i1 %132, label %133, label %108

133:                                              ; preds = %108, %97, %82, %77
  ret void
}

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
