; ModuleID = '../../net/third_party/quiche/src/quic/core/crypto/p256_key_exchange.cc'
source_filename = "../../net/third_party/quiche/src/quic/core/crypto/p256_key_exchange.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.quic::P256KeyExchange" = type <{ %"class.quic::SynchronousKeyExchange", %"class.std::__1::unique_ptr", [65 x i8], [7 x i8] }>
%"class.quic::SynchronousKeyExchange" = type { %"class.quic::AsynchronousKeyExchange" }
%"class.quic::AsynchronousKeyExchange" = type { i32 (...)** }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %struct.ec_key_st* }
%struct.ec_key_st = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%struct.ec_group_st = type opaque
%struct.ec_point_st = type opaque
%struct.bignum_ctx = type opaque
%"class.quic::AsynchronousKeyExchange::Callback" = type { i32 (...)** }

$_ZNK4quic22SynchronousKeyExchange23CalculateSharedKeyAsyncEN4absl11string_viewEPNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_10unique_ptrINS_23AsynchronousKeyExchange8CallbackENS3_14default_deleteISD_EEEE = comdat any

$_ZNK4quic15P256KeyExchange4typeEv = comdat any

@_ZTVN4quic15P256KeyExchangeE = hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.quic::P256KeyExchange"*)* @_ZN4quic15P256KeyExchangeD2Ev to i8*), i8* bitcast (void (%"class.quic::P256KeyExchange"*)* @_ZN4quic15P256KeyExchangeD0Ev to i8*), i8* bitcast (void (%"class.quic::SynchronousKeyExchange"*, i8*, i64, %"class.std::__1::basic_string"*, %"class.quic::AsynchronousKeyExchange::Callback"*)* @_ZNK4quic22SynchronousKeyExchange23CalculateSharedKeyAsyncEN4absl11string_viewEPNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_10unique_ptrINS_23AsynchronousKeyExchange8CallbackENS3_14default_deleteISD_EEEE to i8*), i8* bitcast (i32 (%"class.quic::P256KeyExchange"*)* @_ZNK4quic15P256KeyExchange4typeEv to i8*), i8* bitcast (i1 (%"class.quic::P256KeyExchange"*, i8*, i64, %"class.std::__1::basic_string"*)* @_ZNK4quic15P256KeyExchange22CalculateSharedKeySyncEN4absl11string_viewEPNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE to i8*), i8* bitcast ({ i8*, i64 } (%"class.quic::P256KeyExchange"*)* @_ZNK4quic15P256KeyExchange12public_valueEv to i8*)] }, align 8

@_ZN4quic15P256KeyExchangeC1ENSt3__110unique_ptrI9ec_key_stN4bssl8internal7DeleterIS3_EEEEPKh = hidden unnamed_addr alias void (%"class.quic::P256KeyExchange"*, %struct.ec_key_st*, i8*), void (%"class.quic::P256KeyExchange"*, %struct.ec_key_st*, i8*)* @_ZN4quic15P256KeyExchangeC2ENSt3__110unique_ptrI9ec_key_stN4bssl8internal7DeleterIS3_EEEEPKh
@_ZN4quic15P256KeyExchangeD1Ev = hidden unnamed_addr alias void (%"class.quic::P256KeyExchange"*), void (%"class.quic::P256KeyExchange"*)* @_ZN4quic15P256KeyExchangeD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic15P256KeyExchangeC2ENSt3__110unique_ptrI9ec_key_stN4bssl8internal7DeleterIS3_EEEEPKh(%"class.quic::P256KeyExchange"* nocapture, %struct.ec_key_st*, i8* nocapture readonly) unnamed_addr #0 align 2 {
  %4 = ptrtoint %struct.ec_key_st* %1 to i64
  %5 = getelementptr inbounds %"class.quic::P256KeyExchange", %"class.quic::P256KeyExchange"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN4quic15P256KeyExchangeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.quic::P256KeyExchange", %"class.quic::P256KeyExchange"* %0, i64 0, i32 1
  %7 = bitcast %"class.std::__1::unique_ptr"* %6 to i64*
  store i64 %4, i64* %7, align 8
  %8 = getelementptr inbounds %"class.quic::P256KeyExchange", %"class.quic::P256KeyExchange"* %0, i64 0, i32 2, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 1 %2, i64 65, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic15P256KeyExchangeD2Ev(%"class.quic::P256KeyExchange"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.quic::P256KeyExchange", %"class.quic::P256KeyExchange"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN4quic15P256KeyExchangeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.quic::P256KeyExchange", %"class.quic::P256KeyExchange"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %struct.ec_key_st*, %struct.ec_key_st** %3, align 8
  store %struct.ec_key_st* null, %struct.ec_key_st** %3, align 8
  %5 = icmp eq %struct.ec_key_st* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @EC_KEY_free(%struct.ec_key_st* nonnull %4) #7
  br label %7

7:                                                ; preds = %1, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic15P256KeyExchangeD0Ev(%"class.quic::P256KeyExchange"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.quic::P256KeyExchange", %"class.quic::P256KeyExchange"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN4quic15P256KeyExchangeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.quic::P256KeyExchange", %"class.quic::P256KeyExchange"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %struct.ec_key_st*, %struct.ec_key_st** %3, align 8
  store %struct.ec_key_st* null, %struct.ec_key_st** %3, align 8
  %5 = icmp eq %struct.ec_key_st* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @EC_KEY_free(%struct.ec_key_st* nonnull %4) #7
  br label %7

7:                                                ; preds = %1, %6
  %8 = bitcast %"class.quic::P256KeyExchange"* %0 to i8*
  tail call void @_ZdlPv(i8* %8) #8
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.quic::P256KeyExchange"* @_ZN4quic15P256KeyExchange3NewEv() local_unnamed_addr #0 align 2 {
  %1 = alloca %"class.std::__1::basic_string", align 8
  %2 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %2) #7
  call void @_ZN4quic15P256KeyExchange13NewPrivateKeyEv(%"class.std::__1::basic_string"* nonnull sret %1)
  %3 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %4 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %3, i64 0, i32 1, i32 0
  %5 = load i8, i8* %4, align 1
  %6 = icmp slt i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %0
  %8 = zext i8 %5 to i64
  %9 = ptrtoint %"class.std::__1::basic_string"* %1 to i64
  br label %17

10:                                               ; preds = %0
  %11 = bitcast %"class.std::__1::basic_string"* %1 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i64 %14, -1
  br i1 %15, label %17, label %16, !prof !2

16:                                               ; preds = %10
  call void @llvm.trap() #7
  unreachable

17:                                               ; preds = %7, %10
  %18 = phi i64 [ %12, %10 ], [ %9, %7 ]
  %19 = phi i64 [ %14, %10 ], [ %8, %7 ]
  %20 = inttoptr i64 %18 to i8*
  %21 = call %"class.quic::P256KeyExchange"* @_ZN4quic15P256KeyExchange3NewEN4absl11string_viewE(i8* %20, i64 %19)
  %22 = load i8, i8* %4, align 1
  %23 = icmp slt i8 %22, 0
  br i1 %23, label %24, label %27

24:                                               ; preds = %17
  %25 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %26 = load i8*, i8** %25, align 8
  call void @_ZdlPv(i8* %26) #8
  br label %27

27:                                               ; preds = %17, %24
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %2) #7
  ret %"class.quic::P256KeyExchange"* %21
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.quic::P256KeyExchange"* @_ZN4quic15P256KeyExchange3NewEN4absl11string_viewE(i8*, i64) local_unnamed_addr #0 align 2 {
  %3 = alloca i8*, align 8
  %4 = alloca [65 x i8], align 16
  %5 = icmp eq i64 %1, 0
  br i1 %5, label %37, label %6

6:                                                ; preds = %2
  %7 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #7
  store i8* %0, i8** %3, align 8
  %8 = call %struct.ec_key_st* @d2i_ECPrivateKey(%struct.ec_key_st** null, i8** nonnull %3, i64 %1) #7
  %9 = ptrtoint %struct.ec_key_st* %8 to i64
  %10 = icmp eq %struct.ec_key_st* %8, null
  br i1 %10, label %30, label %11

11:                                               ; preds = %6
  %12 = call i32 @EC_KEY_check_key(%struct.ec_key_st* nonnull %8) #7
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %30, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds [65 x i8], [65 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 65, i8* nonnull %15) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 65, i1 false)
  %16 = call %struct.ec_group_st* @EC_KEY_get0_group(%struct.ec_key_st* nonnull %8) #7
  %17 = call %struct.ec_point_st* @EC_KEY_get0_public_key(%struct.ec_key_st* nonnull %8) #7
  %18 = call i64 @EC_POINT_point2oct(%struct.ec_group_st* %16, %struct.ec_point_st* %17, i32 4, i8* nonnull %15, i64 65, %struct.bignum_ctx* null) #7
  %19 = icmp eq i64 %18, 65
  br i1 %19, label %20, label %27

20:                                               ; preds = %14
  %21 = call i8* @_Znwm(i64 88) #8
  %22 = bitcast i8* %21 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN4quic15P256KeyExchangeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %22, align 8
  %23 = getelementptr inbounds i8, i8* %21, i64 8
  %24 = bitcast i8* %23 to i64*
  store i64 %9, i64* %24, align 8
  %25 = getelementptr inbounds i8, i8* %21, i64 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* nonnull align 16 %15, i64 65, i1 false) #7
  %26 = ptrtoint i8* %21 to i64
  br label %27

27:                                               ; preds = %14, %20
  %28 = phi i64 [ 0, %20 ], [ %9, %14 ]
  %29 = phi i64 [ %26, %20 ], [ 0, %14 ]
  call void @llvm.lifetime.end.p0i8(i64 65, i8* nonnull %15) #7
  br label %30

30:                                               ; preds = %6, %11, %27
  %31 = phi i64 [ %28, %27 ], [ %9, %11 ], [ %9, %6 ]
  %32 = phi i64 [ %29, %27 ], [ 0, %11 ], [ 0, %6 ]
  %33 = icmp eq i64 %31, 0
  br i1 %33, label %36, label %34

34:                                               ; preds = %30
  %35 = inttoptr i64 %31 to %struct.ec_key_st*
  call void @EC_KEY_free(%struct.ec_key_st* nonnull %35) #7
  br label %36

36:                                               ; preds = %30, %34
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #7
  br label %37

37:                                               ; preds = %2, %36
  %38 = phi i64 [ %32, %36 ], [ 0, %2 ]
  %39 = inttoptr i64 %38 to %"class.quic::P256KeyExchange"*
  ret %"class.quic::P256KeyExchange"* %39
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic15P256KeyExchange13NewPrivateKeyEv(%"class.std::__1::basic_string"* noalias sret) local_unnamed_addr #0 align 2 {
  %2 = alloca i8*, align 8
  %3 = tail call %struct.ec_key_st* @EC_KEY_new_by_curve_name(i32 415) #7
  %4 = icmp eq %struct.ec_key_st* %3, null
  br i1 %4, label %5, label %7

5:                                                ; preds = %1
  %6 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 24, i1 false) #7
  br label %45

7:                                                ; preds = %1
  %8 = tail call i32 @EC_KEY_generate_key(%struct.ec_key_st* nonnull %3) #7
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %42, label %10

10:                                               ; preds = %7
  %11 = tail call i32 @i2d_ECPrivateKey(%struct.ec_key_st* nonnull %3, i8** null) #7
  %12 = icmp slt i32 %11, 1
  br i1 %12, label %13, label %15

13:                                               ; preds = %10
  %14 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 24, i1 false) #7
  br label %44

15:                                               ; preds = %10
  %16 = sext i32 %11 to i64
  %17 = tail call i8* @_Znam(i64 %16) #8
  %18 = bitcast i8** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #7
  store i8* %17, i8** %2, align 8
  %19 = call i32 @i2d_ECPrivateKey(%struct.ec_key_st* nonnull %3, i8** nonnull %2) #7
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %23

21:                                               ; preds = %15
  %22 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 24, i1 false) #7
  br label %41

23:                                               ; preds = %15
  %24 = icmp ult i32 %11, 23
  br i1 %24, label %33, label %25

25:                                               ; preds = %23
  %26 = add nuw nsw i64 %16, 16
  %27 = and i64 %26, -16
  %28 = call i8* @_Znwm(i64 %27) #8
  %29 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %28, i8** %29, align 8
  %30 = or i64 %27, -9223372036854775808
  %31 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %30, i64* %31, align 8
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %16, i64* %32, align 8
  br label %38

33:                                               ; preds = %23
  %34 = trunc i32 %11 to i8
  %35 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %36 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %35, i64 0, i32 1, i32 0
  store i8 %34, i8* %36, align 1
  %37 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  br label %38

38:                                               ; preds = %25, %33
  %39 = phi i8* [ %28, %25 ], [ %37, %33 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %39, i8* nonnull align 1 %17, i64 %16, i1 false) #7
  %40 = getelementptr inbounds i8, i8* %39, i64 %16
  store i8 0, i8* %40, align 1
  br label %41

41:                                               ; preds = %38, %21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #7
  call void @_ZdaPv(i8* nonnull %17) #8
  br label %44

42:                                               ; preds = %7
  %43 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %43, i8 0, i64 24, i1 false) #7
  br label %44

44:                                               ; preds = %41, %13, %42
  call void @EC_KEY_free(%struct.ec_key_st* nonnull %3) #7
  br label %45

45:                                               ; preds = %5, %44
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare %struct.ec_key_st* @d2i_ECPrivateKey(%struct.ec_key_st**, i8**, i64) local_unnamed_addr #3

declare i32 @EC_KEY_check_key(%struct.ec_key_st*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i64 @EC_POINT_point2oct(%struct.ec_group_st*, %struct.ec_point_st*, i32, i8*, i64, %struct.bignum_ctx*) local_unnamed_addr #3

declare %struct.ec_group_st* @EC_KEY_get0_group(%struct.ec_key_st*) local_unnamed_addr #3

declare %struct.ec_point_st* @EC_KEY_get0_public_key(%struct.ec_key_st*) local_unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

declare %struct.ec_key_st* @EC_KEY_new_by_curve_name(i32) local_unnamed_addr #3

declare i32 @EC_KEY_generate_key(%struct.ec_key_st*) local_unnamed_addr #3

declare i32 @i2d_ECPrivateKey(%struct.ec_key_st*, i8**) local_unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK4quic15P256KeyExchange22CalculateSharedKeySyncEN4absl11string_viewEPNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE(%"class.quic::P256KeyExchange"* nocapture readonly, i8*, i64, %"class.std::__1::basic_string"*) unnamed_addr #0 align 2 {
  %5 = alloca [32 x i8], align 16
  %6 = icmp eq i64 %2, 65
  br i1 %6, label %7, label %29

7:                                                ; preds = %4
  %8 = getelementptr inbounds %"class.quic::P256KeyExchange", %"class.quic::P256KeyExchange"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %9 = load %struct.ec_key_st*, %struct.ec_key_st** %8, align 8
  %10 = tail call %struct.ec_group_st* @EC_KEY_get0_group(%struct.ec_key_st* %9) #7
  %11 = tail call %struct.ec_point_st* @EC_POINT_new(%struct.ec_group_st* %10) #7
  %12 = icmp eq %struct.ec_point_st* %11, null
  br i1 %12, label %29, label %13

13:                                               ; preds = %7
  %14 = load %struct.ec_key_st*, %struct.ec_key_st** %8, align 8
  %15 = tail call %struct.ec_group_st* @EC_KEY_get0_group(%struct.ec_key_st* %14) #7
  %16 = tail call i32 @EC_POINT_oct2point(%struct.ec_group_st* %15, %struct.ec_point_st* nonnull %11, i8* %1, i64 65, %struct.bignum_ctx* null) #7
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %27, label %18

18:                                               ; preds = %13
  %19 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %19) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %19, i8 -86, i64 32, i1 false)
  %20 = load %struct.ec_key_st*, %struct.ec_key_st** %8, align 8
  %21 = call i32 @ECDH_compute_key(i8* nonnull %19, i64 32, %struct.ec_point_st* nonnull %11, %struct.ec_key_st* %20, i8* (i8*, i64, i8*, i64*)* null) #7
  %22 = icmp eq i32 %21, 32
  br i1 %22, label %23, label %25

23:                                               ; preds = %18
  %24 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKcm(%"class.std::__1::basic_string"* %3, i8* nonnull %19, i64 32) #7
  br label %25

25:                                               ; preds = %18, %23
  %26 = phi i1 [ true, %23 ], [ false, %18 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %19) #7
  br label %27

27:                                               ; preds = %13, %25
  %28 = phi i1 [ false, %13 ], [ %26, %25 ]
  call void @EC_POINT_free(%struct.ec_point_st* nonnull %11) #7
  br label %29

29:                                               ; preds = %27, %7, %4
  %30 = phi i1 [ false, %4 ], [ %28, %27 ], [ false, %7 ]
  ret i1 %30
}

declare %struct.ec_point_st* @EC_POINT_new(%struct.ec_group_st*) local_unnamed_addr #3

declare i32 @EC_POINT_oct2point(%struct.ec_group_st*, %struct.ec_point_st*, i8*, i64, %struct.bignum_ctx*) local_unnamed_addr #3

declare i32 @ECDH_compute_key(i8*, i64, %struct.ec_point_st*, %struct.ec_key_st*, i8* (i8*, i64, i8*, i64*)*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden { i8*, i64 } @_ZNK4quic15P256KeyExchange12public_valueEv(%"class.quic::P256KeyExchange"*) unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.quic::P256KeyExchange", %"class.quic::P256KeyExchange"* %0, i64 0, i32 2, i64 0
  %3 = insertvalue { i8*, i64 } undef, i8* %2, 0
  %4 = insertvalue { i8*, i64 } %3, i64 65, 1
  ret { i8*, i64 } %4
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK4quic22SynchronousKeyExchange23CalculateSharedKeyAsyncEN4absl11string_viewEPNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_10unique_ptrINS_23AsynchronousKeyExchange8CallbackENS3_14default_deleteISD_EEEE(%"class.quic::SynchronousKeyExchange"*, i8*, i64, %"class.std::__1::basic_string"*, %"class.quic::AsynchronousKeyExchange::Callback"*) unnamed_addr #0 comdat align 2 {
  %6 = bitcast %"class.quic::SynchronousKeyExchange"* %0 to i1 (%"class.quic::SynchronousKeyExchange"*, i8*, i64, %"class.std::__1::basic_string"*)***
  %7 = load i1 (%"class.quic::SynchronousKeyExchange"*, i8*, i64, %"class.std::__1::basic_string"*)**, i1 (%"class.quic::SynchronousKeyExchange"*, i8*, i64, %"class.std::__1::basic_string"*)*** %6, align 8
  %8 = getelementptr inbounds i1 (%"class.quic::SynchronousKeyExchange"*, i8*, i64, %"class.std::__1::basic_string"*)*, i1 (%"class.quic::SynchronousKeyExchange"*, i8*, i64, %"class.std::__1::basic_string"*)** %7, i64 4
  %9 = load i1 (%"class.quic::SynchronousKeyExchange"*, i8*, i64, %"class.std::__1::basic_string"*)*, i1 (%"class.quic::SynchronousKeyExchange"*, i8*, i64, %"class.std::__1::basic_string"*)** %8, align 8
  %10 = tail call zeroext i1 %9(%"class.quic::SynchronousKeyExchange"* %0, i8* %1, i64 %2, %"class.std::__1::basic_string"* %3) #7
  %11 = bitcast %"class.quic::AsynchronousKeyExchange::Callback"* %4 to void (%"class.quic::AsynchronousKeyExchange::Callback"*, i1)***
  %12 = load void (%"class.quic::AsynchronousKeyExchange::Callback"*, i1)**, void (%"class.quic::AsynchronousKeyExchange::Callback"*, i1)*** %11, align 8
  %13 = getelementptr inbounds void (%"class.quic::AsynchronousKeyExchange::Callback"*, i1)*, void (%"class.quic::AsynchronousKeyExchange::Callback"*, i1)** %12, i64 2
  %14 = load void (%"class.quic::AsynchronousKeyExchange::Callback"*, i1)*, void (%"class.quic::AsynchronousKeyExchange::Callback"*, i1)** %13, align 8
  tail call void %14(%"class.quic::AsynchronousKeyExchange::Callback"* %4, i1 zeroext %10) #7
  %15 = icmp eq %"class.quic::AsynchronousKeyExchange::Callback"* %4, null
  br i1 %15, label %21, label %16

16:                                               ; preds = %5
  %17 = bitcast %"class.quic::AsynchronousKeyExchange::Callback"* %4 to void (%"class.quic::AsynchronousKeyExchange::Callback"*)***
  %18 = load void (%"class.quic::AsynchronousKeyExchange::Callback"*)**, void (%"class.quic::AsynchronousKeyExchange::Callback"*)*** %17, align 8
  %19 = getelementptr inbounds void (%"class.quic::AsynchronousKeyExchange::Callback"*)*, void (%"class.quic::AsynchronousKeyExchange::Callback"*)** %18, i64 1
  %20 = load void (%"class.quic::AsynchronousKeyExchange::Callback"*)*, void (%"class.quic::AsynchronousKeyExchange::Callback"*)** %19, align 8
  tail call void %20(%"class.quic::AsynchronousKeyExchange::Callback"* nonnull %4) #7
  br label %21

21:                                               ; preds = %5, %16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK4quic15P256KeyExchange4typeEv(%"class.quic::P256KeyExchange"*) unnamed_addr #0 comdat align 2 {
  ret i32 909455952
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

declare void @EC_KEY_free(%struct.ec_key_st*) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #2

declare void @EC_POINT_free(%struct.ec_point_st*) local_unnamed_addr #3

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
