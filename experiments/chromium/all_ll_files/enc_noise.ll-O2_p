; ModuleID = '../../third_party/libjxl/src/lib/jxl/enc_noise.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/enc_noise.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.jxl::Image3" = type { [3 x %"class.jxl::Plane"] }
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"struct.jxl::NoiseParams" = type { [8 x float] }
%"class.jxl::optimize::Array" = type { [8 x double] }
%"struct.jxl::(anonymous namespace)::LossFunction" = type { %"class.std::__1::vector.4" }
%"class.std::__1::vector.4" = type { %"class.std::__1::__vector_base.5" }
%"class.std::__1::__vector_base.5" = type { %"struct.jxl::NoiseLevel"*, %"struct.jxl::NoiseLevel"*, %"class.std::__1::__compressed_pair.6" }
%"struct.jxl::NoiseLevel" = type { float, float }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.jxl::NoiseLevel"* }
%"class.jxl::HalfRangeMode" = type { i8 }
%"struct.std::__1::__less.128" = type { i8 }
%"class.jxl::(anonymous namespace)::NoiseHistogram" = type { [256 x i32] }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.jxl::BitWriter" = type { i64, %"class.jxl::PaddedBytes", %"class.jxl::BitWriter::Allotment"* }
%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"class.jxl::BitWriter::Allotment" = type { i64, i64, i64, i8, %"class.jxl::BitWriter::Allotment"* }
%"struct.jxl::AuxOut" = type { %"struct.std::__1::array", i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array.11", %"struct.std::__1::array.11", i32, %"class.std::__1::basic_string", i64, %"class.std::__1::function", %"class.std::__1::function.17" }
%"struct.std::__1::array" = type { [21 x %"struct.jxl::AuxOut::LayerTotals"] }
%"struct.jxl::AuxOut::LayerTotals" = type { i64, i64, i64, i64, double }
%"struct.std::__1::array.11" = type { [8 x i32] }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { i1 (%"union.std::__1::__function::__policy_storage"*, i8*, %"class.jxl::Image3"*)* }
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"class.std::__1::function.17" = type { %"class.std::__1::__function::__policy_func.21" }
%"class.std::__1::__function::__policy_func.21" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker.22", %"struct.std::__1::__function::__policy"* }
%"struct.std::__1::__function::__policy_invoker.22" = type { i32 (%"union.std::__1::__function::__policy_storage"*, %"class.jxl::CodecInOut"*, %"class.std::__1::basic_string"*)* }
%"class.jxl::CodecInOut" = type { %"struct.jxl::SizeConstraints", %"class.jxl::DecoderHints", i32, float, i64, %"struct.jxl::Blobs", %"struct.jxl::CodecMetadata", %"class.jxl::ImageBundle", %"class.std::__1::vector.121", i8, i64 }
%"struct.jxl::SizeConstraints" = type { i32, i32, i64 }
%"class.jxl::DecoderHints" = type { %"class.std::__1::vector.23" }
%"class.std::__1::vector.23" = type { %"class.std::__1::__vector_base.24" }
%"class.std::__1::__vector_base.24" = type { %"struct.jxl::DecoderHints::KeyValue"*, %"struct.jxl::DecoderHints::KeyValue"*, %"class.std::__1::__compressed_pair.25" }
%"struct.jxl::DecoderHints::KeyValue" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"struct.jxl::DecoderHints::KeyValue"* }
%"struct.jxl::Blobs" = type { %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes" }
%"struct.jxl::CodecMetadata" = type { %"struct.jxl::ImageMetadata", %"class.jxl::SizeHeader", %"struct.jxl::CustomTransformData" }
%"struct.jxl::ImageMetadata" = type <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], %"struct.jxl::ColorEncoding", i32, i8, i8, i8, i8, %"class.jxl::SizeHeader", %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector.30", %"struct.jxl::CustomTransformData", %"class.jxl::PreviewHeader", %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>
%"class.jxl::Fields" = type { i32 (...)** }
%"struct.jxl::BitDepth" = type <{ %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8] }>
%"struct.jxl::ColorEncoding" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::CustomTransferFunction", i32, i8, i8, %"class.jxl::PaddedBytes", i32, %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }
%"struct.jxl::CustomTransferFunction" = type { %"class.jxl::Fields", i32, i8, i32, i32 }
%"struct.jxl::Customxy" = type { %"class.jxl::Fields", i32, i32 }
%"struct.jxl::ToneMapping" = type <{ %"class.jxl::Fields", i8, [3 x i8], float, float, i8, [3 x i8], float, [4 x i8] }>
%"class.std::__1::vector.30" = type { %"class.std::__1::__vector_base.31" }
%"class.std::__1::__vector_base.31" = type { %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"*, %"class.std::__1::__compressed_pair.32" }
%"struct.jxl::ExtraChannelInfo" = type { %"class.jxl::Fields", i8, i32, %"struct.jxl::BitDepth", i32, %"class.std::__1::basic_string", i8, [4 x float], i32 }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"struct.jxl::ExtraChannelInfo"* }
%"class.jxl::PreviewHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::AnimationHeader" = type <{ %"class.jxl::Fields", i32, i32, i32, i8, [3 x i8] }>
%"class.jxl::SizeHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::CustomTransformData" = type <{ %"class.jxl::Fields", i8, i8, [6 x i8], %"struct.jxl::OpsinInverseMatrix", i32, [15 x float], [55 x float], [210 x float], [4 x i8] }>
%"struct.jxl::OpsinInverseMatrix" = type <{ %"class.jxl::Fields", i8, [3 x i8], [9 x float], [3 x float], [4 x float], [4 x i8] }>
%"class.jxl::ImageBundle" = type { %"class.std::__1::unique_ptr.37", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", %"struct.jxl::ColorEncoding", %"class.std::__1::vector.114", i64 }
%"class.std::__1::unique_ptr.37" = type { %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"struct.jxl::jpeg::JPEGData"* }
%"struct.jxl::jpeg::JPEGData" = type { %"class.jxl::Fields", i32, i32, i32, %"class.std::__1::vector.40", %"class.std::__1::vector.53", %"class.std::__1::vector.40", %"class.std::__1::vector.60", %"class.std::__1::vector.68", %"class.std::__1::vector.77", %"class.std::__1::vector.91", %"class.std::__1::vector.42", %"class.std::__1::vector.40", %"class.std::__1::vector.42", i32, i8, %"class.std::__1::vector.42" }
%"class.std::__1::vector.53" = type { %"class.std::__1::__vector_base.54" }
%"class.std::__1::__vector_base.54" = type { i32*, i32*, %"class.std::__1::__compressed_pair.55" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { i32* }
%"class.std::__1::vector.60" = type { %"class.std::__1::__vector_base.61" }
%"class.std::__1::__vector_base.61" = type { %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"*, %"class.std::__1::__compressed_pair.63" }
%"struct.jxl::jpeg::JPEGQuantTable" = type <{ %"struct.std::__1::array.62", i32, i32, i8, [3 x i8] }>
%"struct.std::__1::array.62" = type { [64 x i32] }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"struct.std::__1::__compressed_pair_elem.64" = type { %"struct.jxl::jpeg::JPEGQuantTable"* }
%"class.std::__1::vector.68" = type { %"class.std::__1::__vector_base.69" }
%"class.std::__1::__vector_base.69" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"class.std::__1::__compressed_pair.72" }
%"struct.jxl::jpeg::JPEGHuffmanCode" = type <{ %"struct.std::__1::array.70", %"struct.std::__1::array.71", i32, i8, [3 x i8] }>
%"struct.std::__1::array.70" = type { [17 x i32] }
%"struct.std::__1::array.71" = type { [257 x i32] }
%"class.std::__1::__compressed_pair.72" = type { %"struct.std::__1::__compressed_pair_elem.73" }
%"struct.std::__1::__compressed_pair_elem.73" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"* }
%"class.std::__1::vector.77" = type { %"class.std::__1::__vector_base.78" }
%"class.std::__1::__vector_base.78" = type { %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"*, %"class.std::__1::__compressed_pair.86" }
%"struct.jxl::jpeg::JPEGComponent" = type { i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.79" }
%"class.std::__1::vector.79" = type { %"class.std::__1::__vector_base.80" }
%"class.std::__1::__vector_base.80" = type { i16*, i16*, %"class.std::__1::__compressed_pair.81" }
%"class.std::__1::__compressed_pair.81" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"struct.std::__1::__compressed_pair_elem.82" = type { i16* }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.87" }
%"struct.std::__1::__compressed_pair_elem.87" = type { %"struct.jxl::jpeg::JPEGComponent"* }
%"class.std::__1::vector.91" = type { %"class.std::__1::__vector_base.92" }
%"class.std::__1::__vector_base.92" = type { %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"*, %"class.std::__1::__compressed_pair.108" }
%"struct.jxl::jpeg::JPEGScanInfo" = type { i32, i32, i32, i32, i32, %"struct.std::__1::array.93", i32, %"class.std::__1::vector.94", %"class.std::__1::vector.101" }
%"struct.std::__1::array.93" = type { [4 x %"struct.jxl::jpeg::JPEGComponentScanInfo"] }
%"struct.jxl::jpeg::JPEGComponentScanInfo" = type { i32, i32, i32 }
%"class.std::__1::vector.94" = type { %"class.std::__1::__vector_base.95" }
%"class.std::__1::__vector_base.95" = type { i32*, i32*, %"class.std::__1::__compressed_pair.96" }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem.97" }
%"struct.std::__1::__compressed_pair_elem.97" = type { i32* }
%"class.std::__1::vector.101" = type { %"class.std::__1::__vector_base.102" }
%"class.std::__1::__vector_base.102" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"class.std::__1::__compressed_pair.103" }
%"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo" = type { i32, i32 }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.104" }
%"struct.std::__1::__compressed_pair_elem.104" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* }
%"class.std::__1::__compressed_pair.108" = type { %"struct.std::__1::__compressed_pair_elem.109" }
%"struct.std::__1::__compressed_pair_elem.109" = type { %"struct.jxl::jpeg::JPEGScanInfo"* }
%"class.std::__1::vector.40" = type { %"class.std::__1::__vector_base.41" }
%"class.std::__1::__vector_base.41" = type { %"class.std::__1::vector.42"*, %"class.std::__1::vector.42"*, %"class.std::__1::__compressed_pair.48" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %"class.std::__1::vector.42"* }
%"class.std::__1::vector.42" = type { %"class.std::__1::__vector_base.43" }
%"class.std::__1::__vector_base.43" = type { i8*, i8*, %"class.std::__1::__compressed_pair.44" }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.jxl::YCbCrChromaSubsampling" = type <{ %"class.jxl::Fields", [3 x i32], i8, i8, [2 x i8] }>
%"struct.jxl::FrameOrigin" = type { i32, i32 }
%"class.std::__1::vector.114" = type { %"class.std::__1::__vector_base.115" }
%"class.std::__1::__vector_base.115" = type { %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.std::__1::__compressed_pair.116" }
%"class.std::__1::__compressed_pair.116" = type { %"struct.std::__1::__compressed_pair_elem.117" }
%"struct.std::__1::__compressed_pair_elem.117" = type { %"class.jxl::Plane"* }
%"class.std::__1::vector.121" = type { %"class.std::__1::__vector_base.122" }
%"class.std::__1::__vector_base.122" = type { %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"*, %"class.std::__1::__compressed_pair.123" }
%"class.std::__1::__compressed_pair.123" = type { %"struct.std::__1::__compressed_pair_elem.124" }
%"struct.std::__1::__compressed_pair_elem.124" = type { %"class.jxl::ImageBundle"* }
%"struct.std::__1::__less.129" = type { i8 }
%"class.std::__1::vector.130" = type { %"class.std::__1::__vector_base.131" }
%"class.std::__1::__vector_base.131" = type { i32*, i32*, %"class.std::__1::__compressed_pair.132" }
%"class.std::__1::__compressed_pair.132" = type { %"struct.std::__1::__compressed_pair_elem.133" }
%"struct.std::__1::__compressed_pair_elem.133" = type { i32* }

$_ZNK3jxl13HalfRangeModeclEPKjm = comdat any

$_ZNSt3__113__nth_elementIRNS_6__lessIiiEEPiEEvT0_S5_S5_T_ = comdat any

@.str = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [50 x i8] c"../../third_party/libjxl/src/lib/jxl/enc_noise.cc\00", align 1
@.str.2 = private unnamed_addr constant [22 x i8] c"noise_params.HasAny()\00", align 1
@.str.4 = private unnamed_addr constant [62 x i8] c"../../third_party/libjxl/src/lib/jxl/base/robust_statistics.h\00", align 1
@.str.5 = private unnamed_addr constant [10 x i8] c"Assert %s\00", align 1
@.str.6 = private unnamed_addr constant [20 x i8] c"!candidates.empty()\00", align 1
@.str.7 = private unnamed_addr constant [10 x i8] c"min < max\00", align 1
@.str.8 = private unnamed_addr constant [25 x i8] c"cdf[min] <= cdf[max - 1]\00", align 1
@.str.9 = private unnamed_addr constant [17 x i8] c"num_samples != 0\00", align 1
@_ZZN3jxl12_GLOBAL__N_113GetNoiseLevelERKNS_6Image3IfEERKNSt3__16vectorIfNS5_9allocatorIfEEEEfmE11kLaplFilter = internal unnamed_addr constant [3 x [3 x float]] [[3 x float] [float -2.500000e-01, float -1.000000e+00, float -2.500000e-01], [3 x float] [float -1.000000e+00, float 5.000000e+00, float -1.000000e+00], [3 x float] [float -2.500000e-01, float -1.000000e+00, float -2.500000e-01]], align 16
@.str.10 = private unnamed_addr constant [9 x i8] c"val >= 0\00", align 1
@.str.11 = private unnamed_addr constant [25 x i8] c"absval_quant < (1 << 10)\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl17GetNoiseParameterERKNS_6Image3IfEEPNS_11NoiseParamsEf(%"class.jxl::Image3"* nocapture readonly dereferenceable(96), %"struct.jxl::NoiseParams"*, float) local_unnamed_addr #0 {
  %4 = alloca %"class.jxl::optimize::Array", align 8
  %5 = alloca %"class.jxl::optimize::Array", align 8
  %6 = alloca %"class.jxl::optimize::Array", align 8
  %7 = alloca %"class.jxl::optimize::Array", align 8
  %8 = alloca %"struct.jxl::(anonymous namespace)::LossFunction", align 8
  %9 = alloca %"class.std::__1::vector.4", align 8
  %10 = alloca %"class.jxl::optimize::Array", align 8
  %11 = alloca %"class.jxl::optimize::Array", align 8
  %12 = alloca %"class.jxl::optimize::Array", align 8
  %13 = alloca [256 x i32], align 16
  %14 = alloca %"class.jxl::HalfRangeMode", align 1
  %15 = alloca %"struct.std::__1::__less.128", align 1
  %16 = alloca %"class.jxl::(anonymous namespace)::NoiseHistogram", align 4
  %17 = alloca %"class.std::__1::vector.4", align 8
  %18 = bitcast %"class.jxl::(anonymous namespace)::NoiseHistogram"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %18) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %18, i8 0, i64 1024, i1 false) #7
  %19 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 1
  %20 = load i32, i32* %19, align 4, !noalias !2
  %21 = lshr i32 %20, 3
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 0
  %24 = load i32, i32* %23, align 8, !noalias !2
  %25 = lshr i32 %24, 3
  %26 = zext i32 %25 to i64
  %27 = mul nuw nsw i64 %26, %22
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %33, label %29

29:                                               ; preds = %3
  %30 = shl nuw nsw i64 %27, 2
  %31 = tail call i8* @_Znwm(i64 %30) #11, !noalias !2
  %32 = bitcast i8* %31 to float*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %31, i8 0, i64 %30, i1 false) #7, !noalias !2
  br label %33

33:                                               ; preds = %29, %3
  %34 = phi i8* [ null, %3 ], [ %31, %29 ]
  %35 = phi float* [ null, %3 ], [ %32, %29 ]
  %36 = icmp ult i32 %20, 8
  br i1 %36, label %453, label %37

37:                                               ; preds = %33
  %38 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 4
  %39 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %40 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %41 = getelementptr inbounds %"struct.std::__1::__less.128", %"struct.std::__1::__less.128"* %15, i64 0, i32 0
  br label %52

42:                                               ; preds = %392
  %43 = trunc i64 %434 to i32
  %44 = load i32, i32* %19, align 4, !noalias !2
  br label %45

45:                                               ; preds = %52, %42
  %46 = phi i32 [ %53, %52 ], [ %44, %42 ]
  %47 = phi i32 [ %54, %52 ], [ %447, %42 ]
  %48 = phi i32 [ %57, %52 ], [ %43, %42 ]
  %49 = add nuw nsw i64 %55, 8
  %50 = zext i32 %46 to i64
  %51 = icmp ugt i64 %49, %50
  br i1 %51, label %450, label %52

52:                                               ; preds = %45, %37
  %53 = phi i32 [ %20, %37 ], [ %46, %45 ]
  %54 = phi i32 [ %24, %37 ], [ %47, %45 ]
  %55 = phi i64 [ 8, %37 ], [ %49, %45 ]
  %56 = phi i64 [ 0, %37 ], [ %55, %45 ]
  %57 = phi i32 [ 0, %37 ], [ %48, %45 ]
  %58 = icmp ult i32 %54, 8
  br i1 %58, label %45, label %59

59:                                               ; preds = %52
  %60 = trunc i64 %56 to i32
  %61 = shl i64 %56, 32
  %62 = ashr exact i64 %61, 32
  %63 = sext i32 %57 to i64
  %64 = or i32 %60, 2
  %65 = sext i32 %64 to i64
  %66 = or i64 %62, 1
  %67 = or i64 %62, 3
  %68 = add nuw nsw i32 %64, 2
  %69 = sext i32 %68 to i64
  %70 = or i32 %60, 3
  %71 = sext i32 %70 to i64
  %72 = add nuw nsw i32 %70, 2
  %73 = sext i32 %72 to i64
  br label %74

74:                                               ; preds = %392, %59
  %75 = phi i64 [ %63, %59 ], [ %434, %392 ]
  %76 = phi i64 [ 8, %59 ], [ %446, %392 ]
  %77 = phi i64 [ 0, %59 ], [ %76, %392 ]
  %78 = trunc i64 %77 to i32
  %79 = call i8* @_Znwm(i64 80) #11, !noalias !2
  %80 = bitcast i8* %79 to float*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %79, i8 0, i64 80, i1 false) #7, !noalias !2
  %81 = or i32 %78, 2
  %82 = sext i32 %81 to i64
  %83 = or i64 %77, 1
  %84 = shl i64 %77, 32
  %85 = ashr exact i64 %84, 32
  %86 = or i64 %85, 3
  %87 = or i64 %85, 4
  br label %88

88:                                               ; preds = %389, %74
  %89 = phi i64 [ %390, %389 ], [ 0, %74 ]
  %90 = phi i64 [ %385, %389 ], [ 0, %74 ]
  %91 = shl i64 %90, 32
  %92 = ashr exact i64 %91, 32
  %93 = add nuw nsw i64 %89, %62
  %94 = add nuw nsw i64 %89, %66
  %95 = add nuw nsw i64 %89, %65
  %96 = add nuw nsw i64 %89, %71
  br label %97

97:                                               ; preds = %97, %88
  %98 = phi i64 [ 0, %88 ], [ %387, %97 ]
  %99 = phi i64 [ %92, %88 ], [ %385, %97 ]
  %100 = load i64, i64* %38, align 8, !noalias !2
  %101 = load i8*, i8** %39, align 8, !noalias !2
  %102 = ptrtoint i8* %101 to i64
  %103 = and i64 %102, 63
  %104 = icmp eq i64 %103, 0
  call void @llvm.assume(i1 %104) #7, !noalias !2
  %105 = load i8*, i8** %40, align 8, !noalias !2
  %106 = ptrtoint i8* %105 to i64
  %107 = and i64 %106, 63
  %108 = icmp eq i64 %107, 0
  call void @llvm.assume(i1 %108) #7, !noalias !2
  %109 = trunc i64 %98 to i32
  %110 = add nuw nsw i64 %98, %77
  %111 = shl i64 %110, 32
  %112 = ashr exact i64 %111, 32
  %113 = add nuw nsw i64 %98, %83
  %114 = shl i64 %113, 32
  %115 = ashr exact i64 %114, 32
  %116 = add i32 %81, %109
  %117 = sext i32 %116 to i64
  %118 = mul i64 %100, %93
  %119 = getelementptr inbounds i8, i8* %101, i64 %118
  %120 = ptrtoint i8* %119 to i64
  %121 = and i64 %120, 63
  %122 = icmp eq i64 %121, 0
  call void @llvm.assume(i1 %122) #7, !noalias !2
  %123 = bitcast i8* %119 to float*
  %124 = getelementptr inbounds i8, i8* %105, i64 %118
  %125 = ptrtoint i8* %124 to i64
  %126 = and i64 %125, 63
  %127 = icmp eq i64 %126, 0
  call void @llvm.assume(i1 %127) #7, !noalias !2
  %128 = bitcast i8* %124 to float*
  %129 = mul i64 %100, %65
  %130 = getelementptr inbounds i8, i8* %101, i64 %129
  %131 = ptrtoint i8* %130 to i64
  %132 = and i64 %131, 63
  %133 = icmp eq i64 %132, 0
  call void @llvm.assume(i1 %133) #7, !noalias !2
  %134 = bitcast i8* %130 to float*
  %135 = getelementptr inbounds i8, i8* %105, i64 %129
  %136 = ptrtoint i8* %135 to i64
  %137 = and i64 %136, 63
  %138 = icmp eq i64 %137, 0
  call void @llvm.assume(i1 %138) #7, !noalias !2
  %139 = bitcast i8* %135 to float*
  %140 = getelementptr inbounds float, float* %123, i64 %112
  %141 = load float, float* %140, align 4, !noalias !2
  %142 = getelementptr inbounds float, float* %128, i64 %112
  %143 = load float, float* %142, align 4, !noalias !2
  %144 = fadd float %141, %143
  %145 = fmul float %144, 5.000000e-01
  %146 = getelementptr inbounds float, float* %134, i64 %82
  %147 = load float, float* %146, align 8, !noalias !2
  %148 = getelementptr inbounds float, float* %139, i64 %82
  %149 = load float, float* %148, align 8, !noalias !2
  %150 = fadd float %147, %149
  %151 = fmul float %150, 5.000000e-01
  %152 = fsub float %151, %145
  %153 = call float @llvm.fabs.f32(float %152) #7
  %154 = getelementptr inbounds float, float* %123, i64 %115
  %155 = load float, float* %154, align 4, !noalias !2
  %156 = getelementptr inbounds float, float* %128, i64 %115
  %157 = load float, float* %156, align 4, !noalias !2
  %158 = fadd float %155, %157
  %159 = fmul float %158, 5.000000e-01
  %160 = getelementptr inbounds float, float* %134, i64 %86
  %161 = load float, float* %160, align 4, !noalias !2
  %162 = getelementptr inbounds float, float* %139, i64 %86
  %163 = load float, float* %162, align 4, !noalias !2
  %164 = fadd float %161, %163
  %165 = fmul float %164, 5.000000e-01
  %166 = fsub float %165, %159
  %167 = call float @llvm.fabs.f32(float %166) #7
  %168 = fadd float %153, %167
  %169 = getelementptr inbounds float, float* %123, i64 %117
  %170 = load float, float* %169, align 4, !noalias !2
  %171 = getelementptr inbounds float, float* %128, i64 %117
  %172 = load float, float* %171, align 4, !noalias !2
  %173 = fadd float %170, %172
  %174 = fmul float %173, 5.000000e-01
  %175 = getelementptr inbounds float, float* %134, i64 %87
  %176 = load float, float* %175, align 16, !noalias !2
  %177 = getelementptr inbounds float, float* %139, i64 %87
  %178 = load float, float* %177, align 16, !noalias !2
  %179 = fadd float %176, %178
  %180 = fmul float %179, 5.000000e-01
  %181 = fsub float %180, %174
  %182 = call float @llvm.fabs.f32(float %181) #7
  %183 = fadd float %168, %182
  %184 = mul i64 %100, %94
  %185 = getelementptr inbounds i8, i8* %101, i64 %184
  %186 = ptrtoint i8* %185 to i64
  %187 = and i64 %186, 63
  %188 = icmp eq i64 %187, 0
  call void @llvm.assume(i1 %188) #7, !noalias !2
  %189 = bitcast i8* %185 to float*
  %190 = getelementptr inbounds i8, i8* %105, i64 %184
  %191 = ptrtoint i8* %190 to i64
  %192 = and i64 %191, 63
  %193 = icmp eq i64 %192, 0
  call void @llvm.assume(i1 %193) #7, !noalias !2
  %194 = bitcast i8* %190 to float*
  %195 = mul i64 %100, %67
  %196 = getelementptr inbounds i8, i8* %101, i64 %195
  %197 = ptrtoint i8* %196 to i64
  %198 = and i64 %197, 63
  %199 = icmp eq i64 %198, 0
  call void @llvm.assume(i1 %199) #7, !noalias !2
  %200 = bitcast i8* %196 to float*
  %201 = getelementptr inbounds i8, i8* %105, i64 %195
  %202 = ptrtoint i8* %201 to i64
  %203 = and i64 %202, 63
  %204 = icmp eq i64 %203, 0
  call void @llvm.assume(i1 %204) #7, !noalias !2
  %205 = bitcast i8* %201 to float*
  %206 = getelementptr inbounds float, float* %189, i64 %112
  %207 = load float, float* %206, align 4, !noalias !2
  %208 = getelementptr inbounds float, float* %194, i64 %112
  %209 = load float, float* %208, align 4, !noalias !2
  %210 = fadd float %207, %209
  %211 = fmul float %210, 5.000000e-01
  %212 = getelementptr inbounds float, float* %200, i64 %82
  %213 = load float, float* %212, align 8, !noalias !2
  %214 = getelementptr inbounds float, float* %205, i64 %82
  %215 = load float, float* %214, align 8, !noalias !2
  %216 = fadd float %213, %215
  %217 = fmul float %216, 5.000000e-01
  %218 = fsub float %217, %211
  %219 = call float @llvm.fabs.f32(float %218) #7
  %220 = fadd float %183, %219
  %221 = getelementptr inbounds float, float* %189, i64 %115
  %222 = load float, float* %221, align 4, !noalias !2
  %223 = getelementptr inbounds float, float* %194, i64 %115
  %224 = load float, float* %223, align 4, !noalias !2
  %225 = fadd float %222, %224
  %226 = fmul float %225, 5.000000e-01
  %227 = getelementptr inbounds float, float* %200, i64 %86
  %228 = load float, float* %227, align 4, !noalias !2
  %229 = getelementptr inbounds float, float* %205, i64 %86
  %230 = load float, float* %229, align 4, !noalias !2
  %231 = fadd float %228, %230
  %232 = fmul float %231, 5.000000e-01
  %233 = fsub float %232, %226
  %234 = call float @llvm.fabs.f32(float %233) #7
  %235 = fadd float %220, %234
  %236 = getelementptr inbounds float, float* %189, i64 %117
  %237 = load float, float* %236, align 4, !noalias !2
  %238 = getelementptr inbounds float, float* %194, i64 %117
  %239 = load float, float* %238, align 4, !noalias !2
  %240 = fadd float %237, %239
  %241 = fmul float %240, 5.000000e-01
  %242 = getelementptr inbounds float, float* %200, i64 %87
  %243 = load float, float* %242, align 16, !noalias !2
  %244 = getelementptr inbounds float, float* %205, i64 %87
  %245 = load float, float* %244, align 16, !noalias !2
  %246 = fadd float %243, %245
  %247 = fmul float %246, 5.000000e-01
  %248 = fsub float %247, %241
  %249 = call float @llvm.fabs.f32(float %248) #7
  %250 = fadd float %235, %249
  %251 = mul i64 %100, %95
  %252 = getelementptr inbounds i8, i8* %101, i64 %251
  %253 = ptrtoint i8* %252 to i64
  %254 = and i64 %253, 63
  %255 = icmp eq i64 %254, 0
  call void @llvm.assume(i1 %255) #7, !noalias !2
  %256 = bitcast i8* %252 to float*
  %257 = getelementptr inbounds i8, i8* %105, i64 %251
  %258 = ptrtoint i8* %257 to i64
  %259 = and i64 %258, 63
  %260 = icmp eq i64 %259, 0
  call void @llvm.assume(i1 %260) #7, !noalias !2
  %261 = bitcast i8* %257 to float*
  %262 = mul i64 %100, %69
  %263 = getelementptr inbounds i8, i8* %101, i64 %262
  %264 = ptrtoint i8* %263 to i64
  %265 = and i64 %264, 63
  %266 = icmp eq i64 %265, 0
  call void @llvm.assume(i1 %266) #7, !noalias !2
  %267 = bitcast i8* %263 to float*
  %268 = getelementptr inbounds i8, i8* %105, i64 %262
  %269 = ptrtoint i8* %268 to i64
  %270 = and i64 %269, 63
  %271 = icmp eq i64 %270, 0
  call void @llvm.assume(i1 %271) #7, !noalias !2
  %272 = bitcast i8* %268 to float*
  %273 = getelementptr inbounds float, float* %256, i64 %112
  %274 = load float, float* %273, align 4, !noalias !2
  %275 = getelementptr inbounds float, float* %261, i64 %112
  %276 = load float, float* %275, align 4, !noalias !2
  %277 = fadd float %274, %276
  %278 = fmul float %277, 5.000000e-01
  %279 = getelementptr inbounds float, float* %267, i64 %82
  %280 = load float, float* %279, align 8, !noalias !2
  %281 = getelementptr inbounds float, float* %272, i64 %82
  %282 = load float, float* %281, align 8, !noalias !2
  %283 = fadd float %280, %282
  %284 = fmul float %283, 5.000000e-01
  %285 = fsub float %284, %278
  %286 = call float @llvm.fabs.f32(float %285) #7
  %287 = fadd float %250, %286
  %288 = getelementptr inbounds float, float* %256, i64 %115
  %289 = load float, float* %288, align 4, !noalias !2
  %290 = getelementptr inbounds float, float* %261, i64 %115
  %291 = load float, float* %290, align 4, !noalias !2
  %292 = fadd float %289, %291
  %293 = fmul float %292, 5.000000e-01
  %294 = getelementptr inbounds float, float* %267, i64 %86
  %295 = load float, float* %294, align 4, !noalias !2
  %296 = getelementptr inbounds float, float* %272, i64 %86
  %297 = load float, float* %296, align 4, !noalias !2
  %298 = fadd float %295, %297
  %299 = fmul float %298, 5.000000e-01
  %300 = fsub float %299, %293
  %301 = call float @llvm.fabs.f32(float %300) #7
  %302 = fadd float %287, %301
  %303 = getelementptr inbounds float, float* %256, i64 %117
  %304 = load float, float* %303, align 4, !noalias !2
  %305 = getelementptr inbounds float, float* %261, i64 %117
  %306 = load float, float* %305, align 4, !noalias !2
  %307 = fadd float %304, %306
  %308 = fmul float %307, 5.000000e-01
  %309 = getelementptr inbounds float, float* %267, i64 %87
  %310 = load float, float* %309, align 16, !noalias !2
  %311 = getelementptr inbounds float, float* %272, i64 %87
  %312 = load float, float* %311, align 16, !noalias !2
  %313 = fadd float %310, %312
  %314 = fmul float %313, 5.000000e-01
  %315 = fsub float %314, %308
  %316 = call float @llvm.fabs.f32(float %315) #7
  %317 = fadd float %302, %316
  %318 = mul i64 %100, %96
  %319 = getelementptr inbounds i8, i8* %101, i64 %318
  %320 = ptrtoint i8* %319 to i64
  %321 = and i64 %320, 63
  %322 = icmp eq i64 %321, 0
  call void @llvm.assume(i1 %322) #7, !noalias !2
  %323 = bitcast i8* %319 to float*
  %324 = getelementptr inbounds i8, i8* %105, i64 %318
  %325 = ptrtoint i8* %324 to i64
  %326 = and i64 %325, 63
  %327 = icmp eq i64 %326, 0
  call void @llvm.assume(i1 %327) #7, !noalias !2
  %328 = bitcast i8* %324 to float*
  %329 = mul i64 %100, %73
  %330 = getelementptr inbounds i8, i8* %101, i64 %329
  %331 = ptrtoint i8* %330 to i64
  %332 = and i64 %331, 63
  %333 = icmp eq i64 %332, 0
  call void @llvm.assume(i1 %333) #7, !noalias !2
  %334 = bitcast i8* %330 to float*
  %335 = getelementptr inbounds i8, i8* %105, i64 %329
  %336 = ptrtoint i8* %335 to i64
  %337 = and i64 %336, 63
  %338 = icmp eq i64 %337, 0
  call void @llvm.assume(i1 %338) #7, !noalias !2
  %339 = bitcast i8* %335 to float*
  %340 = getelementptr inbounds float, float* %323, i64 %112
  %341 = load float, float* %340, align 4, !noalias !2
  %342 = getelementptr inbounds float, float* %328, i64 %112
  %343 = load float, float* %342, align 4, !noalias !2
  %344 = fadd float %341, %343
  %345 = fmul float %344, 5.000000e-01
  %346 = getelementptr inbounds float, float* %334, i64 %82
  %347 = load float, float* %346, align 8, !noalias !2
  %348 = getelementptr inbounds float, float* %339, i64 %82
  %349 = load float, float* %348, align 8, !noalias !2
  %350 = fadd float %347, %349
  %351 = fmul float %350, 5.000000e-01
  %352 = fsub float %351, %345
  %353 = call float @llvm.fabs.f32(float %352) #7
  %354 = fadd float %317, %353
  %355 = getelementptr inbounds float, float* %323, i64 %115
  %356 = load float, float* %355, align 4, !noalias !2
  %357 = getelementptr inbounds float, float* %328, i64 %115
  %358 = load float, float* %357, align 4, !noalias !2
  %359 = fadd float %356, %358
  %360 = fmul float %359, 5.000000e-01
  %361 = getelementptr inbounds float, float* %334, i64 %86
  %362 = load float, float* %361, align 4, !noalias !2
  %363 = getelementptr inbounds float, float* %339, i64 %86
  %364 = load float, float* %363, align 4, !noalias !2
  %365 = fadd float %362, %364
  %366 = fmul float %365, 5.000000e-01
  %367 = fsub float %366, %360
  %368 = call float @llvm.fabs.f32(float %367) #7
  %369 = fadd float %354, %368
  %370 = getelementptr inbounds float, float* %323, i64 %117
  %371 = load float, float* %370, align 4, !noalias !2
  %372 = getelementptr inbounds float, float* %328, i64 %117
  %373 = load float, float* %372, align 4, !noalias !2
  %374 = fadd float %371, %373
  %375 = fmul float %374, 5.000000e-01
  %376 = getelementptr inbounds float, float* %334, i64 %87
  %377 = load float, float* %376, align 16, !noalias !2
  %378 = getelementptr inbounds float, float* %339, i64 %87
  %379 = load float, float* %378, align 16, !noalias !2
  %380 = fadd float %377, %379
  %381 = fmul float %380, 5.000000e-01
  %382 = fsub float %381, %375
  %383 = call float @llvm.fabs.f32(float %382) #7
  %384 = fadd float %369, %383
  %385 = add nsw i64 %99, 1
  %386 = getelementptr inbounds float, float* %80, i64 %99
  store float %384, float* %386, align 4, !noalias !2
  %387 = add nuw nsw i64 %98, 1
  %388 = icmp eq i64 %387, 5
  br i1 %388, label %389, label %97

389:                                              ; preds = %97
  %390 = add nuw nsw i64 %89, 1
  %391 = icmp eq i64 %390, 4
  br i1 %391, label %392, label %88

392:                                              ; preds = %389
  %393 = getelementptr inbounds i8, i8* %79, i64 80
  %394 = bitcast i8* %393 to float*
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %41) #7, !noalias !2
  call void @_ZNSt3__16__sortIRNS_6__lessIffEEPfEEvT0_S5_T_(float* nonnull %80, float* %394, %"struct.std::__1::__less.128"* nonnull dereferenceable(1) %15) #7, !noalias !2
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %41) #7, !noalias !2
  %395 = load float, float* %80, align 4, !noalias !2
  %396 = fadd float %395, 0.000000e+00
  %397 = getelementptr inbounds i8, i8* %79, i64 4
  %398 = bitcast i8* %397 to float*
  %399 = load float, float* %398, align 4, !noalias !2
  %400 = fadd float %396, %399
  %401 = getelementptr inbounds i8, i8* %79, i64 8
  %402 = bitcast i8* %401 to float*
  %403 = load float, float* %402, align 4, !noalias !2
  %404 = fadd float %400, %403
  %405 = getelementptr inbounds i8, i8* %79, i64 12
  %406 = bitcast i8* %405 to float*
  %407 = load float, float* %406, align 4, !noalias !2
  %408 = fadd float %404, %407
  %409 = getelementptr inbounds i8, i8* %79, i64 16
  %410 = bitcast i8* %409 to float*
  %411 = load float, float* %410, align 4, !noalias !2
  %412 = fadd float %408, %411
  %413 = getelementptr inbounds i8, i8* %79, i64 20
  %414 = bitcast i8* %413 to float*
  %415 = load float, float* %414, align 4, !noalias !2
  %416 = fadd float %412, %415
  %417 = getelementptr inbounds i8, i8* %79, i64 24
  %418 = bitcast i8* %417 to float*
  %419 = load float, float* %418, align 4, !noalias !2
  %420 = fadd float %416, %419
  %421 = getelementptr inbounds i8, i8* %79, i64 28
  %422 = bitcast i8* %421 to float*
  %423 = load float, float* %422, align 4, !noalias !2
  %424 = fadd float %420, %423
  %425 = getelementptr inbounds i8, i8* %79, i64 32
  %426 = bitcast i8* %425 to float*
  %427 = load float, float* %426, align 4, !noalias !2
  %428 = fadd float %424, %427
  %429 = getelementptr inbounds i8, i8* %79, i64 36
  %430 = bitcast i8* %429 to float*
  %431 = load float, float* %430, align 4, !noalias !2
  %432 = fadd float %428, %431
  %433 = fdiv float %432, 1.000000e+01
  call void @_ZdlPv(i8* nonnull %79) #11, !noalias !2
  %434 = add nsw i64 %75, 1
  %435 = getelementptr inbounds float, float* %35, i64 %75
  store float %433, float* %435, align 4, !noalias !2
  %436 = fmul float %433, 2.560000e+02
  %437 = fptosi float %436 to i32
  %438 = icmp sgt i32 %437, 0
  %439 = select i1 %438, i32 %437, i32 0
  %440 = icmp slt i32 %439, 255
  %441 = select i1 %440, i32 %439, i32 255
  %442 = zext i32 %441 to i64
  %443 = getelementptr inbounds %"class.jxl::(anonymous namespace)::NoiseHistogram", %"class.jxl::(anonymous namespace)::NoiseHistogram"* %16, i64 0, i32 0, i64 %442
  %444 = load i32, i32* %443, align 4, !noalias !2
  %445 = add i32 %444, 1
  store i32 %445, i32* %443, align 4, !noalias !2
  %446 = add nuw nsw i64 %76, 8
  %447 = load i32, i32* %23, align 8, !noalias !2
  %448 = zext i32 %447 to i64
  %449 = icmp ugt i64 %446, %448
  br i1 %449, label %42, label %74

450:                                              ; preds = %45
  %451 = getelementptr inbounds %"class.jxl::(anonymous namespace)::NoiseHistogram", %"class.jxl::(anonymous namespace)::NoiseHistogram"* %16, i64 0, i32 0, i64 0
  %452 = load i32, i32* %451, align 4
  br label %453

453:                                              ; preds = %450, %33
  %454 = phi i32 [ %452, %450 ], [ 0, %33 ]
  %455 = bitcast [256 x i32]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %455) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %455, i8 -86, i64 1024, i1 false) #7
  %456 = getelementptr inbounds %"class.jxl::(anonymous namespace)::NoiseHistogram", %"class.jxl::(anonymous namespace)::NoiseHistogram"* %16, i64 0, i32 0, i64 256
  %457 = getelementptr inbounds [256 x i32], [256 x i32]* %13, i64 0, i64 0
  store i32 %454, i32* %457, align 16
  %458 = getelementptr inbounds [256 x i32], [256 x i32]* %13, i64 0, i64 1
  %459 = getelementptr inbounds %"class.jxl::(anonymous namespace)::NoiseHistogram", %"class.jxl::(anonymous namespace)::NoiseHistogram"* %16, i64 0, i32 0, i64 1
  br label %460

460:                                              ; preds = %460, %453
  %461 = phi i32* [ %459, %453 ], [ %483, %460 ]
  %462 = phi i32* [ %458, %453 ], [ %482, %460 ]
  %463 = phi i32 [ %454, %453 ], [ %481, %460 ]
  %464 = load i32, i32* %461, align 4
  %465 = add i32 %464, %463
  store i32 %465, i32* %462, align 4
  %466 = getelementptr inbounds i32, i32* %462, i64 1
  %467 = getelementptr inbounds i32, i32* %461, i64 1
  %468 = load i32, i32* %467, align 4
  %469 = add i32 %468, %465
  store i32 %469, i32* %466, align 4
  %470 = getelementptr inbounds i32, i32* %462, i64 2
  %471 = getelementptr inbounds i32, i32* %461, i64 2
  %472 = load i32, i32* %471, align 4
  %473 = add i32 %472, %469
  store i32 %473, i32* %470, align 4
  %474 = getelementptr inbounds i32, i32* %462, i64 3
  %475 = getelementptr inbounds i32, i32* %461, i64 3
  %476 = load i32, i32* %475, align 4
  %477 = add i32 %476, %473
  store i32 %477, i32* %474, align 4
  %478 = getelementptr inbounds i32, i32* %462, i64 4
  %479 = getelementptr inbounds i32, i32* %461, i64 4
  %480 = load i32, i32* %479, align 4
  %481 = add i32 %480, %477
  store i32 %481, i32* %478, align 4
  %482 = getelementptr inbounds i32, i32* %462, i64 5
  %483 = getelementptr inbounds i32, i32* %461, i64 5
  %484 = icmp eq i32* %483, %456
  br i1 %484, label %485, label %460

485:                                              ; preds = %460
  %486 = getelementptr inbounds %"class.jxl::HalfRangeMode", %"class.jxl::HalfRangeMode"* %14, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %486) #7
  %487 = call i32 @_ZNK3jxl13HalfRangeModeclEPKjm(%"class.jxl::HalfRangeMode"* nonnull %14, i32* nonnull %457, i64 256) #7
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %486) #7
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %455) #7
  %488 = sitofp i32 %487 to float
  %489 = fmul float %488, 3.906250e-03
  %490 = fcmp ogt float %489, 0x3FC3333340000000
  %491 = fcmp ole float %489, 0.000000e+00
  %492 = or i1 %490, %491
  br i1 %492, label %493, label %495

493:                                              ; preds = %485
  %494 = bitcast %"struct.jxl::NoiseParams"* %1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %494, i8 0, i64 32, i1 false) #7
  br label %1450

495:                                              ; preds = %485
  %496 = bitcast %"class.std::__1::vector.4"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %496) #7
  %497 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %17, i64 0, i32 0, i32 0
  %498 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %17, i64 0, i32 0, i32 1
  %499 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %17, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %496, i8 0, i64 24, i1 false) #7, !alias.scope !5
  %500 = load i32, i32* %19, align 4, !noalias !5
  %501 = icmp ult i32 %500, 8
  br i1 %501, label %502, label %504

502:                                              ; preds = %495
  %503 = bitcast %"class.std::__1::vector.4"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %503)
  br label %804

504:                                              ; preds = %495
  %505 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 4
  %506 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %507 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %508 = bitcast %"struct.jxl::NoiseLevel"** %498 to i64*
  %509 = bitcast %"class.std::__1::vector.4"* %17 to i64*
  %510 = bitcast %"struct.jxl::NoiseLevel"** %499 to i64*
  %511 = load i32, i32* %23, align 8, !noalias !5
  br label %521

512:                                              ; preds = %767
  %513 = load i32, i32* %19, align 4, !noalias !5
  br label %514

514:                                              ; preds = %521, %512
  %515 = phi i32 [ %522, %521 ], [ %513, %512 ]
  %516 = phi i32 [ %523, %521 ], [ %770, %512 ]
  %517 = phi i64 [ %526, %521 ], [ %768, %512 ]
  %518 = add nuw nsw i64 %524, 8
  %519 = zext i32 %515 to i64
  %520 = icmp ugt i64 %518, %519
  br i1 %520, label %773, label %521

521:                                              ; preds = %514, %504
  %522 = phi i32 [ %500, %504 ], [ %515, %514 ]
  %523 = phi i32 [ %511, %504 ], [ %516, %514 ]
  %524 = phi i64 [ 8, %504 ], [ %518, %514 ]
  %525 = phi i64 [ 0, %504 ], [ %524, %514 ]
  %526 = phi i64 [ 0, %504 ], [ %517, %514 ]
  %527 = icmp ult i32 %523, 8
  br i1 %527, label %514, label %528

528:                                              ; preds = %521, %767
  %529 = phi i64 [ %769, %767 ], [ 8, %521 ]
  %530 = phi i64 [ %529, %767 ], [ 0, %521 ]
  %531 = phi i64 [ %768, %767 ], [ %526, %521 ]
  %532 = getelementptr inbounds float, float* %35, i64 %531
  %533 = load float, float* %532, align 4, !noalias !5
  %534 = fcmp ugt float %533, %489
  br i1 %534, label %767, label %535

535:                                              ; preds = %528
  %536 = load i64, i64* %505, align 8, !noalias !5
  %537 = load i8*, i8** %506, align 8, !noalias !5
  %538 = ptrtoint i8* %537 to i64
  %539 = and i64 %538, 63
  %540 = icmp eq i64 %539, 0
  call void @llvm.assume(i1 %540) #7, !noalias !5
  %541 = load i8*, i8** %507, align 8, !noalias !5
  %542 = ptrtoint i8* %541 to i64
  %543 = and i64 %542, 63
  %544 = icmp eq i64 %543, 0
  call void @llvm.assume(i1 %544) #7, !noalias !5
  %545 = or i64 %530, 1
  %546 = or i64 %530, 2
  %547 = or i64 %530, 3
  %548 = or i64 %530, 4
  %549 = or i64 %530, 5
  %550 = or i64 %530, 7
  br label %551

551:                                              ; preds = %551, %535
  %552 = phi i64 [ 0, %535 ], [ %620, %551 ]
  %553 = phi float [ 0.000000e+00, %535 ], [ %619, %551 ]
  %554 = add nuw nsw i64 %552, %525
  %555 = mul i64 %554, %536
  %556 = getelementptr inbounds i8, i8* %537, i64 %555
  %557 = ptrtoint i8* %556 to i64
  %558 = and i64 %557, 63
  %559 = icmp eq i64 %558, 0
  call void @llvm.assume(i1 %559) #7, !noalias !5
  %560 = bitcast i8* %556 to float*
  %561 = getelementptr inbounds i8, i8* %541, i64 %555
  %562 = ptrtoint i8* %561 to i64
  %563 = and i64 %562, 63
  %564 = icmp eq i64 %563, 0
  call void @llvm.assume(i1 %564) #7, !noalias !5
  %565 = bitcast i8* %561 to float*
  %566 = getelementptr inbounds float, float* %560, i64 %530
  %567 = load float, float* %566, align 32, !noalias !5
  %568 = getelementptr inbounds float, float* %565, i64 %530
  %569 = load float, float* %568, align 32, !noalias !5
  %570 = fadd float %567, %569
  %571 = fmul float %570, 5.000000e-01
  %572 = fadd float %553, %571
  %573 = getelementptr inbounds float, float* %560, i64 %545
  %574 = load float, float* %573, align 4, !noalias !5
  %575 = getelementptr inbounds float, float* %565, i64 %545
  %576 = load float, float* %575, align 4, !noalias !5
  %577 = fadd float %574, %576
  %578 = fmul float %577, 5.000000e-01
  %579 = fadd float %572, %578
  %580 = getelementptr inbounds float, float* %560, i64 %546
  %581 = load float, float* %580, align 8, !noalias !5
  %582 = getelementptr inbounds float, float* %565, i64 %546
  %583 = load float, float* %582, align 8, !noalias !5
  %584 = fadd float %581, %583
  %585 = fmul float %584, 5.000000e-01
  %586 = fadd float %579, %585
  %587 = getelementptr inbounds float, float* %560, i64 %547
  %588 = load float, float* %587, align 4, !noalias !5
  %589 = getelementptr inbounds float, float* %565, i64 %547
  %590 = load float, float* %589, align 4, !noalias !5
  %591 = fadd float %588, %590
  %592 = fmul float %591, 5.000000e-01
  %593 = fadd float %586, %592
  %594 = getelementptr inbounds float, float* %560, i64 %548
  %595 = load float, float* %594, align 16, !noalias !5
  %596 = getelementptr inbounds float, float* %565, i64 %548
  %597 = load float, float* %596, align 16, !noalias !5
  %598 = fadd float %595, %597
  %599 = fmul float %598, 5.000000e-01
  %600 = fadd float %593, %599
  %601 = getelementptr inbounds float, float* %560, i64 %549
  %602 = getelementptr inbounds float, float* %565, i64 %549
  %603 = bitcast float* %601 to <2 x float>*
  %604 = load <2 x float>, <2 x float>* %603, align 4, !noalias !5
  %605 = bitcast float* %602 to <2 x float>*
  %606 = load <2 x float>, <2 x float>* %605, align 4, !noalias !5
  %607 = fadd <2 x float> %604, %606
  %608 = fmul <2 x float> %607, <float 5.000000e-01, float 5.000000e-01>
  %609 = extractelement <2 x float> %608, i32 0
  %610 = fadd float %600, %609
  %611 = extractelement <2 x float> %608, i32 1
  %612 = fadd float %610, %611
  %613 = getelementptr inbounds float, float* %560, i64 %550
  %614 = load float, float* %613, align 4, !noalias !5
  %615 = getelementptr inbounds float, float* %565, i64 %550
  %616 = load float, float* %615, align 4, !noalias !5
  %617 = fadd float %614, %616
  %618 = fmul float %617, 5.000000e-01
  %619 = fadd float %612, %618
  %620 = add nuw nsw i64 %552, 1
  %621 = icmp eq i64 %620, 8
  br i1 %621, label %622, label %551

622:                                              ; preds = %551, %696
  %623 = phi i64 [ %697, %696 ], [ 0, %551 ]
  %624 = phi float [ %701, %696 ], [ 0.000000e+00, %551 ]
  %625 = add nuw nsw i64 %623, %525
  br label %683

626:                                              ; preds = %696
  %627 = fmul float %619, 1.562500e-02
  %628 = fmul float %701, 1.562500e-02
  %629 = load %"struct.jxl::NoiseLevel"*, %"struct.jxl::NoiseLevel"** %498, align 8, !alias.scope !5
  %630 = load %"struct.jxl::NoiseLevel"*, %"struct.jxl::NoiseLevel"** %499, align 8, !alias.scope !5
  %631 = icmp eq %"struct.jxl::NoiseLevel"* %629, %630
  %632 = ptrtoint %"struct.jxl::NoiseLevel"* %630 to i64
  br i1 %631, label %638, label %633

633:                                              ; preds = %626
  %634 = getelementptr inbounds %"struct.jxl::NoiseLevel", %"struct.jxl::NoiseLevel"* %629, i64 0, i32 0
  store float %628, float* %634, align 4
  %635 = getelementptr inbounds %"struct.jxl::NoiseLevel", %"struct.jxl::NoiseLevel"* %629, i64 0, i32 1
  store float %627, float* %635, align 4
  %636 = getelementptr inbounds %"struct.jxl::NoiseLevel", %"struct.jxl::NoiseLevel"* %629, i64 1
  %637 = ptrtoint %"struct.jxl::NoiseLevel"* %636 to i64
  store i64 %637, i64* %508, align 8, !alias.scope !5
  br label %767

638:                                              ; preds = %626
  %639 = ptrtoint %"struct.jxl::NoiseLevel"* %629 to i64
  %640 = load i64, i64* %509, align 8, !alias.scope !5
  %641 = sub i64 %639, %640
  %642 = ashr exact i64 %641, 3
  %643 = add nsw i64 %642, 1
  %644 = icmp ugt i64 %643, 2305843009213693951
  br i1 %644, label %645, label %647

645:                                              ; preds = %638
  %646 = bitcast %"class.std::__1::vector.4"* %17 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %646) #12
  unreachable

647:                                              ; preds = %638
  %648 = sub i64 %632, %640
  %649 = ashr exact i64 %648, 3
  %650 = icmp ult i64 %649, 1152921504606846975
  br i1 %650, label %651, label %659

651:                                              ; preds = %647
  %652 = ashr exact i64 %648, 2
  %653 = icmp ult i64 %652, %643
  %654 = select i1 %653, i64 %643, i64 %652
  %655 = icmp eq i64 %654, 0
  br i1 %655, label %664, label %656

656:                                              ; preds = %651
  %657 = icmp ugt i64 %654, 2305843009213693951
  br i1 %657, label %658, label %659

658:                                              ; preds = %656
  call void @abort() #12
  unreachable

659:                                              ; preds = %656, %647
  %660 = phi i64 [ %654, %656 ], [ 2305843009213693951, %647 ]
  %661 = shl i64 %660, 3
  %662 = call i8* @_Znwm(i64 %661) #11
  %663 = bitcast i8* %662 to %"struct.jxl::NoiseLevel"*
  br label %664

664:                                              ; preds = %659, %651
  %665 = phi i64 [ %660, %659 ], [ 0, %651 ]
  %666 = phi i8* [ %662, %659 ], [ null, %651 ]
  %667 = phi %"struct.jxl::NoiseLevel"* [ %663, %659 ], [ null, %651 ]
  %668 = getelementptr inbounds %"struct.jxl::NoiseLevel", %"struct.jxl::NoiseLevel"* %667, i64 %642
  %669 = getelementptr inbounds %"struct.jxl::NoiseLevel", %"struct.jxl::NoiseLevel"* %667, i64 %665
  %670 = ptrtoint %"struct.jxl::NoiseLevel"* %669 to i64
  %671 = getelementptr inbounds %"struct.jxl::NoiseLevel", %"struct.jxl::NoiseLevel"* %668, i64 0, i32 0
  store float %628, float* %671, align 4, !noalias !5
  %672 = getelementptr inbounds %"struct.jxl::NoiseLevel", %"struct.jxl::NoiseLevel"* %667, i64 %642, i32 1
  store float %627, float* %672, align 4, !noalias !5
  %673 = getelementptr inbounds %"struct.jxl::NoiseLevel", %"struct.jxl::NoiseLevel"* %668, i64 1
  %674 = ptrtoint %"struct.jxl::NoiseLevel"* %673 to i64
  %675 = ptrtoint %"struct.jxl::NoiseLevel"* %667 to i64
  %676 = icmp sgt i64 %641, 0
  br i1 %676, label %677, label %679

677:                                              ; preds = %664
  %678 = inttoptr i64 %640 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %666, i8* align 4 %678, i64 %641, i1 false) #7
  br label %679

679:                                              ; preds = %677, %664
  store i64 %675, i64* %509, align 8, !alias.scope !5
  store i64 %674, i64* %508, align 8, !alias.scope !5
  store i64 %670, i64* %510, align 8, !alias.scope !5
  %680 = icmp eq i64 %640, 0
  br i1 %680, label %767, label %681

681:                                              ; preds = %679
  %682 = inttoptr i64 %640 to i8*
  call void @_ZdlPv(i8* %682) #11
  br label %767

683:                                              ; preds = %699, %622
  %684 = phi i64 [ 0, %622 ], [ %702, %699 ]
  %685 = phi float [ %624, %622 ], [ %701, %699 ]
  %686 = add nuw nsw i64 %684, %530
  %687 = add nsw i64 %684, -1
  %688 = icmp ult i64 %687, 8
  %689 = add nuw nsw i64 %686, 1
  %690 = add nsw i64 %686, -1
  %691 = icmp ult i64 %684, 7
  %692 = select i1 %688, i64 %690, i64 %689
  %693 = select i1 %688, i64 %690, i64 %689
  %694 = select i1 %691, i64 %689, i64 %690
  %695 = select i1 %691, i64 %689, i64 %690
  br label %704

696:                                              ; preds = %699
  %697 = add nuw nsw i64 %623, 1
  %698 = icmp eq i64 %697, 8
  br i1 %698, label %626, label %622

699:                                              ; preds = %727
  %700 = call float @llvm.fabs.f32(float %765) #7
  %701 = fadd float %685, %700
  %702 = add nuw nsw i64 %684, 1
  %703 = icmp eq i64 %702, 8
  br i1 %703, label %696, label %683

704:                                              ; preds = %727, %683
  %705 = phi i64 [ -1, %683 ], [ %730, %727 ]
  %706 = phi float [ 0.000000e+00, %683 ], [ %765, %727 ]
  %707 = add nsw i64 %705, %623
  %708 = icmp ult i64 %707, 8
  br i1 %708, label %718, label %709

709:                                              ; preds = %704
  %710 = sub nsw i64 %625, %705
  %711 = mul i64 %710, %536
  %712 = getelementptr inbounds i8, i8* %537, i64 %711
  %713 = ptrtoint i8* %712 to i64
  %714 = and i64 %713, 63
  %715 = icmp eq i64 %714, 0
  call void @llvm.assume(i1 %715) #7
  %716 = getelementptr inbounds i8, i8* %541, i64 %711
  %717 = add nsw i64 %705, 1
  br label %727

718:                                              ; preds = %704
  %719 = add nsw i64 %705, %625
  %720 = mul i64 %719, %536
  %721 = getelementptr inbounds i8, i8* %537, i64 %720
  %722 = ptrtoint i8* %721 to i64
  %723 = and i64 %722, 63
  %724 = icmp eq i64 %723, 0
  call void @llvm.assume(i1 %724) #7
  %725 = getelementptr inbounds i8, i8* %541, i64 %720
  %726 = add nsw i64 %705, 1
  br label %727

727:                                              ; preds = %718, %709
  %728 = phi i8* [ %721, %718 ], [ %712, %709 ]
  %729 = phi i8* [ %725, %718 ], [ %716, %709 ]
  %730 = phi i64 [ %726, %718 ], [ %717, %709 ]
  %731 = ptrtoint i8* %729 to i64
  %732 = and i64 %731, 63
  %733 = bitcast i8* %729 to float*
  %734 = icmp eq i64 %732, 0
  %735 = bitcast i8* %728 to float*
  %736 = getelementptr inbounds float, float* %735, i64 %692
  %737 = load float, float* %736, align 4
  call void @llvm.assume(i1 %734) #7
  %738 = getelementptr inbounds float, float* %733, i64 %693
  %739 = load float, float* %738, align 4
  %740 = fadd float %737, %739
  %741 = fmul float %740, 5.000000e-01
  %742 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* @_ZZN3jxl12_GLOBAL__N_113GetNoiseLevelERKNS_6Image3IfEERKNSt3__16vectorIfNS5_9allocatorIfEEEEfmE11kLaplFilter, i64 0, i64 %730, i64 0
  %743 = load float, float* %742, align 4
  %744 = fmul float %743, %741
  %745 = fadd float %706, %744
  %746 = getelementptr inbounds float, float* %735, i64 %686
  %747 = load float, float* %746, align 4
  %748 = getelementptr inbounds float, float* %733, i64 %686
  %749 = load float, float* %748, align 4
  %750 = fadd float %747, %749
  %751 = fmul float %750, 5.000000e-01
  %752 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* @_ZZN3jxl12_GLOBAL__N_113GetNoiseLevelERKNS_6Image3IfEERKNSt3__16vectorIfNS5_9allocatorIfEEEEfmE11kLaplFilter, i64 0, i64 %730, i64 1
  %753 = load float, float* %752, align 4
  %754 = fmul float %753, %751
  %755 = fadd float %745, %754
  %756 = getelementptr inbounds float, float* %735, i64 %694
  %757 = load float, float* %756, align 4
  %758 = getelementptr inbounds float, float* %733, i64 %695
  %759 = load float, float* %758, align 4
  %760 = fadd float %757, %759
  %761 = fmul float %760, 5.000000e-01
  %762 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* @_ZZN3jxl12_GLOBAL__N_113GetNoiseLevelERKNS_6Image3IfEERKNSt3__16vectorIfNS5_9allocatorIfEEEEfmE11kLaplFilter, i64 0, i64 %730, i64 2
  %763 = load float, float* %762, align 4
  %764 = fmul float %763, %761
  %765 = fadd float %755, %764
  %766 = icmp eq i64 %730, 2
  br i1 %766, label %699, label %704

767:                                              ; preds = %681, %679, %633, %528
  %768 = add i64 %531, 1
  %769 = add nuw nsw i64 %529, 8
  %770 = load i32, i32* %23, align 8, !noalias !5
  %771 = zext i32 %770 to i64
  %772 = icmp ugt i64 %769, %771
  br i1 %772, label %512, label %528

773:                                              ; preds = %514
  %774 = load %"struct.jxl::NoiseLevel"*, %"struct.jxl::NoiseLevel"** %497, align 8
  %775 = ptrtoint %"struct.jxl::NoiseLevel"* %774 to i64
  %776 = bitcast %"struct.jxl::NoiseLevel"* %774 to i8*
  %777 = load %"struct.jxl::NoiseLevel"*, %"struct.jxl::NoiseLevel"** %498, align 8
  %778 = bitcast %"class.std::__1::vector.4"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %778)
  %779 = icmp eq %"struct.jxl::NoiseLevel"* %774, %777
  %780 = ptrtoint %"struct.jxl::NoiseLevel"* %777 to i64
  br i1 %779, label %804, label %781

781:                                              ; preds = %773
  %782 = getelementptr %"struct.jxl::NoiseLevel", %"struct.jxl::NoiseLevel"* %777, i64 -1, i32 0
  %783 = ptrtoint float* %782 to i64
  %784 = sub i64 %783, %775
  %785 = lshr i64 %784, 3
  %786 = add nuw nsw i64 %785, 1
  %787 = and i64 %786, 7
  %788 = icmp eq i64 %787, 0
  br i1 %788, label %799, label %789

789:                                              ; preds = %781, %789
  %790 = phi float [ %795, %789 ], [ 0.000000e+00, %781 ]
  %791 = phi %"struct.jxl::NoiseLevel"* [ %796, %789 ], [ %774, %781 ]
  %792 = phi i64 [ %797, %789 ], [ %787, %781 ]
  %793 = getelementptr inbounds %"struct.jxl::NoiseLevel", %"struct.jxl::NoiseLevel"* %791, i64 0, i32 0
  %794 = load float, float* %793, align 4
  %795 = fadd float %790, %794
  %796 = getelementptr inbounds %"struct.jxl::NoiseLevel", %"struct.jxl::NoiseLevel"* %791, i64 1
  %797 = add i64 %792, -1
  %798 = icmp eq i64 %797, 0
  br i1 %798, label %799, label %789, !llvm.loop !8

799:                                              ; preds = %789, %781
  %800 = phi float [ undef, %781 ], [ %795, %789 ]
  %801 = phi float [ 0.000000e+00, %781 ], [ %795, %789 ]
  %802 = phi %"struct.jxl::NoiseLevel"* [ %774, %781 ], [ %796, %789 ]
  %803 = icmp ult i64 %784, 56
  br i1 %803, label %804, label %917

804:                                              ; preds = %799, %917, %502, %773
  %805 = phi i64 [ %775, %773 ], [ 0, %502 ], [ %775, %917 ], [ %775, %799 ]
  %806 = phi i64 [ %780, %773 ], [ 0, %502 ], [ %780, %917 ], [ %780, %799 ]
  %807 = phi i8* [ %778, %773 ], [ %503, %502 ], [ %778, %917 ], [ %778, %799 ]
  %808 = phi i8* [ %776, %773 ], [ null, %502 ], [ %776, %917 ], [ %776, %799 ]
  %809 = phi float [ 0.000000e+00, %773 ], [ 0.000000e+00, %502 ], [ %800, %799 ], [ %943, %917 ]
  %810 = bitcast %"struct.jxl::NoiseLevel"** %498 to i64*
  %811 = bitcast %"class.std::__1::vector.4"* %17 to i64*
  %812 = sub i64 %806, %805
  %813 = ashr exact i64 %812, 3
  %814 = uitofp i64 %813 to float
  %815 = fdiv float %809, %814
  %816 = bitcast %"struct.jxl::(anonymous namespace)::LossFunction"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %816) #7
  %817 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::LossFunction", %"struct.jxl::(anonymous namespace)::LossFunction"* %8, i64 0, i32 0, i32 0, i32 1
  %818 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::LossFunction", %"struct.jxl::(anonymous namespace)::LossFunction"* %8, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %816, i8 -86, i64 24, i1 false) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %807, i8 0, i64 24, i1 false) #7
  %819 = icmp eq i64 %812, 0
  br i1 %819, label %842, label %820

820:                                              ; preds = %804
  %821 = icmp ugt i64 %813, 2305843009213693951
  br i1 %821, label %822, label %824

822:                                              ; preds = %820
  %823 = bitcast %"class.std::__1::vector.4"* %9 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %823) #12
  unreachable

824:                                              ; preds = %820
  %825 = call i8* @_Znwm(i64 %812) #11
  %826 = bitcast i8* %825 to %"struct.jxl::NoiseLevel"*
  %827 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %9, i64 0, i32 0, i32 1
  %828 = bitcast %"struct.jxl::NoiseLevel"** %827 to i8**
  store i8* %825, i8** %828, align 8
  %829 = bitcast %"class.std::__1::vector.4"* %9 to i8**
  store i8* %825, i8** %829, align 8
  %830 = getelementptr inbounds %"struct.jxl::NoiseLevel", %"struct.jxl::NoiseLevel"* %826, i64 %813
  %831 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %9, i64 0, i32 0, i32 2, i32 0, i32 0
  store %"struct.jxl::NoiseLevel"* %830, %"struct.jxl::NoiseLevel"** %831, align 8
  %832 = bitcast %"struct.jxl::NoiseLevel"** %827 to i64*
  %833 = ptrtoint i8* %825 to i64
  %834 = icmp sgt i64 %812, 0
  %835 = ptrtoint %"struct.jxl::NoiseLevel"* %830 to i64
  br i1 %834, label %836, label %840

836:                                              ; preds = %824
  %837 = lshr exact i64 %812, 3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %825, i8* align 4 %808, i64 %812, i1 false) #7
  %838 = getelementptr inbounds %"struct.jxl::NoiseLevel", %"struct.jxl::NoiseLevel"* %826, i64 %837
  %839 = ptrtoint %"struct.jxl::NoiseLevel"* %838 to i64
  br label %840

840:                                              ; preds = %836, %824
  %841 = phi i64 [ %839, %836 ], [ %833, %824 ]
  store i64 %841, i64* %832, align 8
  br label %842

842:                                              ; preds = %840, %804
  %843 = phi i64 [ %835, %840 ], [ 0, %804 ]
  %844 = phi i64 [ %841, %840 ], [ 0, %804 ]
  %845 = phi i64 [ %833, %840 ], [ 0, %804 ]
  %846 = bitcast %"struct.jxl::(anonymous namespace)::LossFunction"* %8 to i64*
  store i64 %845, i64* %846, align 8
  %847 = bitcast %"struct.jxl::NoiseLevel"** %817 to i64*
  store i64 %844, i64* %847, align 8
  %848 = bitcast %"struct.jxl::NoiseLevel"** %818 to i64*
  store i64 %843, i64* %848, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %807, i8 0, i64 24, i1 false) #7
  %849 = bitcast %"class.jxl::optimize::Array"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %849) #7
  %850 = fpext float %815 to double
  %851 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %10, i64 0, i32 0, i64 0
  store double %850, double* %851, align 8
  %852 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %10, i64 0, i32 0, i64 1
  store double %850, double* %852, align 8
  %853 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %10, i64 0, i32 0, i64 2
  store double %850, double* %853, align 8
  %854 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %10, i64 0, i32 0, i64 3
  store double %850, double* %854, align 8
  %855 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %10, i64 0, i32 0, i64 4
  store double %850, double* %855, align 8
  %856 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %10, i64 0, i32 0, i64 5
  store double %850, double* %856, align 8
  %857 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %10, i64 0, i32 0, i64 6
  store double %850, double* %857, align 8
  %858 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %10, i64 0, i32 0, i64 7
  store double %850, double* %858, align 8
  %859 = bitcast %"class.jxl::optimize::Array"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %859) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %859, i8* nonnull align 8 %849, i64 64, i1 false) #7
  %860 = bitcast %"class.jxl::optimize::Array"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %860) #7, !noalias !10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %860, i8 -1, i64 64, i1 false) #7, !noalias !10
  %861 = bitcast %"class.jxl::optimize::Array"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %861) #7, !noalias !10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %861, i8 -1, i64 64, i1 false) #7, !noalias !10
  %862 = bitcast %"class.jxl::optimize::Array"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %862) #7, !noalias !10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %862, i8 -1, i64 64, i1 false) #7, !noalias !10
  %863 = call fastcc double @_ZNK3jxl12_GLOBAL__N_112LossFunction7ComputeERKNS_8optimize5ArrayIdLm8EEEPS4_b(%"struct.jxl::(anonymous namespace)::LossFunction"* nonnull %8, %"class.jxl::optimize::Array"* nonnull dereferenceable(64) %11, %"class.jxl::optimize::Array"* nonnull %5, i1 zeroext false) #7
  %864 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %5, i64 0, i32 0, i64 0
  %865 = load double, double* %864, align 8, !noalias !10
  %866 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %5, i64 0, i32 0, i64 1
  %867 = load double, double* %866, align 8, !noalias !10
  %868 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %5, i64 0, i32 0, i64 2
  %869 = load double, double* %868, align 8, !noalias !10
  %870 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %5, i64 0, i32 0, i64 3
  %871 = load double, double* %870, align 8, !noalias !10
  %872 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %5, i64 0, i32 0, i64 4
  %873 = bitcast double* %872 to <2 x double>*
  %874 = load <2 x double>, <2 x double>* %873, align 8, !noalias !10
  %875 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %5, i64 0, i32 0, i64 6
  %876 = bitcast double* %875 to <2 x double>*
  %877 = load <2 x double>, <2 x double>* %876, align 8, !noalias !10
  %878 = bitcast %"class.jxl::optimize::Array"* %7 to i8*
  %879 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %11, i64 0, i32 0, i64 0
  %880 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %7, i64 0, i32 0, i64 0
  %881 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %11, i64 0, i32 0, i64 1
  %882 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %7, i64 0, i32 0, i64 1
  %883 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %11, i64 0, i32 0, i64 2
  %884 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %7, i64 0, i32 0, i64 2
  %885 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %11, i64 0, i32 0, i64 3
  %886 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %7, i64 0, i32 0, i64 3
  %887 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %11, i64 0, i32 0, i64 4
  %888 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %11, i64 0, i32 0, i64 5
  %889 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %7, i64 0, i32 0, i64 5
  %890 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %11, i64 0, i32 0, i64 6
  %891 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %11, i64 0, i32 0, i64 7
  %892 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %7, i64 0, i32 0, i64 7
  %893 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %6, i64 0, i32 0, i64 0
  %894 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %6, i64 0, i32 0, i64 1
  %895 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %6, i64 0, i32 0, i64 2
  %896 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %6, i64 0, i32 0, i64 3
  %897 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %6, i64 0, i32 0, i64 4
  %898 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %6, i64 0, i32 0, i64 5
  %899 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %6, i64 0, i32 0, i64 6
  %900 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %6, i64 0, i32 0, i64 7
  %901 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %4, i64 0, i32 0, i64 0
  %902 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %4, i64 0, i32 0, i64 1
  %903 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %4, i64 0, i32 0, i64 2
  %904 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %4, i64 0, i32 0, i64 3
  %905 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %4, i64 0, i32 0, i64 4
  %906 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %4, i64 0, i32 0, i64 6
  %907 = bitcast double* %885 to <2 x double>*
  %908 = bitcast double* %886 to <2 x double>*
  %909 = bitcast double* %888 to <2 x double>*
  %910 = bitcast double* %889 to <2 x double>*
  %911 = bitcast double* %887 to <2 x double>*
  %912 = bitcast double* %890 to <2 x double>*
  %913 = bitcast double* %905 to <2 x double>*
  %914 = bitcast double* %906 to <2 x double>*
  %915 = bitcast double* %872 to <2 x double>*
  %916 = bitcast double* %875 to <2 x double>*
  br label %946

917:                                              ; preds = %799, %917
  %918 = phi float [ %943, %917 ], [ %801, %799 ]
  %919 = phi %"struct.jxl::NoiseLevel"* [ %944, %917 ], [ %802, %799 ]
  %920 = getelementptr inbounds %"struct.jxl::NoiseLevel", %"struct.jxl::NoiseLevel"* %919, i64 0, i32 0
  %921 = load float, float* %920, align 4
  %922 = fadd float %918, %921
  %923 = getelementptr inbounds %"struct.jxl::NoiseLevel", %"struct.jxl::NoiseLevel"* %919, i64 1, i32 0
  %924 = load float, float* %923, align 4
  %925 = fadd float %922, %924
  %926 = getelementptr inbounds %"struct.jxl::NoiseLevel", %"struct.jxl::NoiseLevel"* %919, i64 2, i32 0
  %927 = load float, float* %926, align 4
  %928 = fadd float %925, %927
  %929 = getelementptr inbounds %"struct.jxl::NoiseLevel", %"struct.jxl::NoiseLevel"* %919, i64 3, i32 0
  %930 = load float, float* %929, align 4
  %931 = fadd float %928, %930
  %932 = getelementptr inbounds %"struct.jxl::NoiseLevel", %"struct.jxl::NoiseLevel"* %919, i64 4, i32 0
  %933 = load float, float* %932, align 4
  %934 = fadd float %931, %933
  %935 = getelementptr inbounds %"struct.jxl::NoiseLevel", %"struct.jxl::NoiseLevel"* %919, i64 5, i32 0
  %936 = load float, float* %935, align 4
  %937 = fadd float %934, %936
  %938 = getelementptr inbounds %"struct.jxl::NoiseLevel", %"struct.jxl::NoiseLevel"* %919, i64 6, i32 0
  %939 = load float, float* %938, align 4
  %940 = fadd float %937, %939
  %941 = getelementptr inbounds %"struct.jxl::NoiseLevel", %"struct.jxl::NoiseLevel"* %919, i64 7, i32 0
  %942 = load float, float* %941, align 4
  %943 = fadd float %940, %942
  %944 = getelementptr inbounds %"struct.jxl::NoiseLevel", %"struct.jxl::NoiseLevel"* %919, i64 8
  %945 = icmp eq %"struct.jxl::NoiseLevel"* %944, %777
  br i1 %945, label %804, label %917

946:                                              ; preds = %1310, %842
  %947 = phi double [ %871, %842 ], [ %1212, %1310 ]
  %948 = phi double [ %869, %842 ], [ %1213, %1310 ]
  %949 = phi double [ %867, %842 ], [ %1214, %1310 ]
  %950 = phi double [ %865, %842 ], [ %1215, %1310 ]
  %951 = phi double [ %871, %842 ], [ %1311, %1310 ]
  %952 = phi double [ %869, %842 ], [ %1312, %1310 ]
  %953 = phi double [ %867, %842 ], [ %1313, %1310 ]
  %954 = phi double [ %865, %842 ], [ %1314, %1310 ]
  %955 = phi double [ %871, %842 ], [ %1315, %1310 ]
  %956 = phi double [ %869, %842 ], [ %1316, %1310 ]
  %957 = phi double [ %867, %842 ], [ %1317, %1310 ]
  %958 = phi double [ %865, %842 ], [ %1318, %1310 ]
  %959 = phi double [ %871, %842 ], [ %1319, %1310 ]
  %960 = phi double [ %869, %842 ], [ %1320, %1310 ]
  %961 = phi double [ %867, %842 ], [ %1321, %1310 ]
  %962 = phi double [ %865, %842 ], [ %1322, %1310 ]
  %963 = phi i64 [ 1, %842 ], [ %1336, %1310 ]
  %964 = phi i64 [ 0, %842 ], [ %1229, %1310 ]
  %965 = phi i8 [ 1, %842 ], [ %1230, %1310 ]
  %966 = phi double [ 1.000000e+00, %842 ], [ %1327, %1310 ]
  %967 = phi double [ %863, %842 ], [ %1235, %1310 ]
  %968 = phi double [ 0xFFFFFFFFFFFFFFFF, %842 ], [ %1142, %1310 ]
  %969 = phi double [ 0xFFFFFFFFFFFFFFFF, %842 ], [ %1141, %1310 ]
  %970 = phi double [ 0xFFFFFFFFFFFFFFFF, %842 ], [ %1140, %1310 ]
  %971 = phi double [ %865, %842 ], [ %1234, %1310 ]
  %972 = phi double [ %867, %842 ], [ %1233, %1310 ]
  %973 = phi double [ %869, %842 ], [ %1232, %1310 ]
  %974 = phi double [ %871, %842 ], [ %1231, %1310 ]
  %975 = phi double [ %865, %842 ], [ %1326, %1310 ]
  %976 = phi double [ %867, %842 ], [ %1325, %1310 ]
  %977 = phi double [ %869, %842 ], [ %1324, %1310 ]
  %978 = phi double [ %871, %842 ], [ %1323, %1310 ]
  %979 = phi <2 x double> [ %874, %842 ], [ %1328, %1310 ]
  %980 = phi <2 x double> [ %874, %842 ], [ %1329, %1310 ]
  %981 = phi <2 x double> [ %874, %842 ], [ %1237, %1310 ]
  %982 = phi <2 x double> [ %874, %842 ], [ %1330, %1310 ]
  %983 = phi <2 x double> [ %874, %842 ], [ %1331, %1310 ]
  %984 = phi <2 x double> [ %877, %842 ], [ %1332, %1310 ]
  %985 = phi <2 x double> [ %877, %842 ], [ %1333, %1310 ]
  %986 = phi <2 x double> [ %877, %842 ], [ %1241, %1310 ]
  %987 = phi <2 x double> [ %877, %842 ], [ %1334, %1310 ]
  %988 = phi <2 x double> [ %877, %842 ], [ %1335, %1310 ]
  %989 = phi <2 x double> [ %874, %842 ], [ %1244, %1310 ]
  %990 = phi <2 x double> [ %877, %842 ], [ %1245, %1310 ]
  %991 = icmp eq i8 %965, 0
  br i1 %991, label %1131, label %992

992:                                              ; preds = %946
  %993 = fmul double %962, %975
  %994 = fadd double %993, 0.000000e+00
  %995 = fmul double %961, %976
  %996 = fadd double %994, %995
  %997 = fmul double %960, %977
  %998 = fadd double %996, %997
  %999 = fmul double %959, %978
  %1000 = fadd double %998, %999
  %1001 = fmul <2 x double> %982, %979
  %1002 = extractelement <2 x double> %1001, i32 0
  %1003 = fadd double %1000, %1002
  %1004 = extractelement <2 x double> %1001, i32 1
  %1005 = fadd double %1003, %1004
  %1006 = fmul <2 x double> %987, %984
  %1007 = extractelement <2 x double> %1006, i32 0
  %1008 = fadd double %1005, %1007
  %1009 = extractelement <2 x double> %1006, i32 1
  %1010 = fadd double %1008, %1009
  %1011 = fcmp ugt double %1010, 0.000000e+00
  br i1 %1011, label %1012, label %1033

1012:                                             ; preds = %992
  %1013 = fmul double %975, %975
  %1014 = fadd double %1013, 0.000000e+00
  %1015 = fmul double %976, %976
  %1016 = fadd double %1015, %1014
  %1017 = fmul double %977, %977
  %1018 = fadd double %1017, %1016
  %1019 = fmul double %978, %978
  %1020 = fadd double %1019, %1018
  %1021 = extractelement <2 x double> %979, i32 0
  %1022 = fmul double %1021, %1021
  %1023 = fadd double %1022, %1020
  %1024 = extractelement <2 x double> %979, i32 1
  %1025 = fmul double %1024, %1024
  %1026 = fadd double %1025, %1023
  %1027 = extractelement <2 x double> %984, i32 0
  %1028 = fmul double %1027, %1027
  %1029 = fadd double %1028, %1026
  %1030 = extractelement <2 x double> %984, i32 1
  %1031 = fmul double %1030, %1030
  %1032 = fadd double %1031, %1029
  br label %1054

1033:                                             ; preds = %992
  %1034 = fmul double %962, %962
  %1035 = fadd double %1034, 0.000000e+00
  %1036 = fmul double %961, %961
  %1037 = fadd double %1036, %1035
  %1038 = fmul double %960, %960
  %1039 = fadd double %1038, %1037
  %1040 = fmul double %959, %959
  %1041 = fadd double %1040, %1039
  %1042 = extractelement <2 x double> %982, i32 0
  %1043 = fmul double %1042, %1042
  %1044 = fadd double %1043, %1041
  %1045 = extractelement <2 x double> %982, i32 1
  %1046 = fmul double %1045, %1045
  %1047 = fadd double %1046, %1044
  %1048 = extractelement <2 x double> %987, i32 0
  %1049 = fmul double %1048, %1048
  %1050 = fadd double %1049, %1047
  %1051 = extractelement <2 x double> %987, i32 1
  %1052 = fmul double %1051, %1051
  %1053 = fadd double %1052, %1050
  br label %1054

1054:                                             ; preds = %1033, %1012
  %1055 = phi double [ %1032, %1012 ], [ %1053, %1033 ]
  %1056 = phi double [ %978, %1012 ], [ %959, %1033 ]
  %1057 = phi double [ %977, %1012 ], [ %960, %1033 ]
  %1058 = phi double [ %976, %1012 ], [ %961, %1033 ]
  %1059 = phi double [ %975, %1012 ], [ %962, %1033 ]
  %1060 = phi double [ %1010, %1012 ], [ %1053, %1033 ]
  %1061 = phi <2 x double> [ %979, %1012 ], [ %982, %1033 ]
  %1062 = phi <2 x double> [ %984, %1012 ], [ %987, %1033 ]
  %1063 = fsub double -0.000000e+00, %1060
  %1064 = call double @sqrt(double %1055) #7, !noalias !10
  %1065 = fdiv double 1.000000e-04, %1064
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %878) #7, !noalias !10
  %1066 = fmul double %1059, %1065
  %1067 = fmul double %1058, %1065
  %1068 = fmul double %1057, %1065
  %1069 = extractelement <2 x double> %1061, i32 0
  %1070 = insertelement <2 x double> undef, double %1056, i32 0
  %1071 = shufflevector <2 x double> %1070, <2 x double> %1061, <2 x i32> <i32 0, i32 2>
  %1072 = insertelement <2 x double> undef, double %1065, i32 0
  %1073 = shufflevector <2 x double> %1072, <2 x double> undef, <2 x i32> zeroinitializer
  %1074 = fmul <2 x double> %1071, %1073
  %1075 = extractelement <2 x double> %1061, i32 1
  %1076 = extractelement <2 x double> %1062, i32 0
  %1077 = shufflevector <2 x double> %1061, <2 x double> %1062, <2 x i32> <i32 1, i32 2>
  %1078 = fmul <2 x double> %1077, %1073
  %1079 = extractelement <2 x double> %1062, i32 1
  %1080 = fmul double %1079, %1065
  %1081 = load double, double* %879, align 8, !alias.scope !10, !noalias !13
  %1082 = fadd double %1081, %1066
  store double %1082, double* %880, align 8, !alias.scope !13, !noalias !10
  %1083 = load double, double* %881, align 8, !alias.scope !10, !noalias !13
  %1084 = fadd double %1067, %1083
  store double %1084, double* %882, align 8, !alias.scope !13, !noalias !10
  %1085 = load double, double* %883, align 8, !alias.scope !10, !noalias !13
  %1086 = fadd double %1068, %1085
  store double %1086, double* %884, align 8, !alias.scope !13, !noalias !10
  %1087 = load <2 x double>, <2 x double>* %907, align 8, !alias.scope !10, !noalias !13
  %1088 = fadd <2 x double> %1074, %1087
  store <2 x double> %1088, <2 x double>* %908, align 8, !alias.scope !13, !noalias !10
  %1089 = load <2 x double>, <2 x double>* %909, align 8, !alias.scope !10, !noalias !13
  %1090 = fadd <2 x double> %1078, %1089
  store <2 x double> %1090, <2 x double>* %910, align 8, !alias.scope !13, !noalias !10
  %1091 = load double, double* %891, align 8, !alias.scope !10, !noalias !13
  %1092 = fadd double %1080, %1091
  store double %1092, double* %892, align 8, !alias.scope !13, !noalias !10
  %1093 = call fastcc double @_ZNK3jxl12_GLOBAL__N_112LossFunction7ComputeERKNS_8optimize5ArrayIdLm8EEEPS4_b(%"struct.jxl::(anonymous namespace)::LossFunction"* nonnull %8, %"class.jxl::optimize::Array"* nonnull dereferenceable(64) %7, %"class.jxl::optimize::Array"* nonnull %6, i1 zeroext false) #7, !noalias !10
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %878) #7, !noalias !10
  %1094 = load double, double* %893, align 8, !noalias !16
  %1095 = fsub double %958, %1094
  %1096 = load double, double* %894, align 8, !noalias !16
  %1097 = fsub double %957, %1096
  %1098 = load double, double* %895, align 8, !noalias !16
  %1099 = fsub double %956, %1098
  %1100 = load double, double* %896, align 8, !noalias !16
  %1101 = fsub double %955, %1100
  %1102 = load double, double* %897, align 8, !noalias !16
  %1103 = extractelement <2 x double> %983, i32 0
  %1104 = fsub double %1103, %1102
  %1105 = load double, double* %898, align 8, !noalias !16
  %1106 = extractelement <2 x double> %983, i32 1
  %1107 = fsub double %1106, %1105
  %1108 = load double, double* %899, align 8, !noalias !16
  %1109 = extractelement <2 x double> %988, i32 0
  %1110 = fsub double %1109, %1108
  %1111 = load double, double* %900, align 8, !noalias !16
  %1112 = extractelement <2 x double> %988, i32 1
  %1113 = fsub double %1112, %1111
  %1114 = fmul double %1059, %1095
  %1115 = fadd double %1114, 0.000000e+00
  %1116 = fmul double %1058, %1097
  %1117 = fadd double %1115, %1116
  %1118 = fmul double %1057, %1099
  %1119 = fadd double %1117, %1118
  %1120 = fmul double %1056, %1101
  %1121 = fadd double %1119, %1120
  %1122 = fmul double %1069, %1104
  %1123 = fadd double %1121, %1122
  %1124 = fmul double %1075, %1107
  %1125 = fadd double %1123, %1124
  %1126 = fmul double %1076, %1110
  %1127 = fadd double %1125, %1126
  %1128 = fmul double %1079, %1113
  %1129 = fadd double %1127, %1128
  %1130 = fdiv double %1129, %1065
  br label %1131

1131:                                             ; preds = %1054, %946
  %1132 = phi double [ %959, %946 ], [ %955, %1054 ]
  %1133 = phi double [ %960, %946 ], [ %956, %1054 ]
  %1134 = phi double [ %961, %946 ], [ %957, %1054 ]
  %1135 = phi double [ %962, %946 ], [ %958, %1054 ]
  %1136 = phi double [ %978, %946 ], [ %1056, %1054 ]
  %1137 = phi double [ %977, %946 ], [ %1057, %1054 ]
  %1138 = phi double [ %976, %946 ], [ %1058, %1054 ]
  %1139 = phi double [ %975, %946 ], [ %1059, %1054 ]
  %1140 = phi double [ %970, %946 ], [ %1055, %1054 ]
  %1141 = phi double [ %969, %946 ], [ %1063, %1054 ]
  %1142 = phi double [ %968, %946 ], [ %1130, %1054 ]
  %1143 = phi <2 x double> [ %979, %946 ], [ %1061, %1054 ]
  %1144 = phi <2 x double> [ %982, %946 ], [ %983, %1054 ]
  %1145 = phi <2 x double> [ %984, %946 ], [ %1062, %1054 ]
  %1146 = phi <2 x double> [ %987, %946 ], [ %988, %1054 ]
  %1147 = fmul double %966, %1140
  %1148 = fadd double %1147, %1142
  %1149 = fcmp ugt double %1148, 0.000000e+00
  br i1 %1149, label %1153, label %1150

1150:                                             ; preds = %1131
  %1151 = fdiv double %1142, %1140
  %1152 = fsub double %966, %1151
  br label %1153

1153:                                             ; preds = %1150, %1131
  %1154 = phi double [ %1147, %1150 ], [ %1148, %1131 ]
  %1155 = phi double [ %1152, %1150 ], [ %966, %1131 ]
  %1156 = fsub double -0.000000e+00, %1141
  %1157 = fdiv double %1156, %1154
  %1158 = fmul double %1139, %1157
  %1159 = fmul double %1138, %1157
  %1160 = fmul double %1137, %1157
  %1161 = fmul double %1136, %1157
  %1162 = insertelement <2 x double> undef, double %1157, i32 0
  %1163 = shufflevector <2 x double> %1162, <2 x double> undef, <2 x i32> zeroinitializer
  %1164 = fmul <2 x double> %1143, %1163
  %1165 = fmul <2 x double> %1145, %1163
  %1166 = load double, double* %879, align 8, !alias.scope !10, !noalias !19
  %1167 = fadd double %1166, %1158
  %1168 = load double, double* %881, align 8, !alias.scope !10, !noalias !19
  %1169 = fadd double %1159, %1168
  %1170 = load double, double* %883, align 8, !alias.scope !10, !noalias !19
  %1171 = fadd double %1160, %1170
  %1172 = load double, double* %885, align 8, !alias.scope !10, !noalias !19
  %1173 = fadd double %1161, %1172
  %1174 = load <2 x double>, <2 x double>* %911, align 8, !alias.scope !10, !noalias !19
  %1175 = fadd <2 x double> %1164, %1174
  %1176 = load <2 x double>, <2 x double>* %912, align 8, !alias.scope !10, !noalias !19
  %1177 = fadd <2 x double> %1165, %1176
  store double %1167, double* %901, align 8, !noalias !10
  store double %1169, double* %902, align 8, !noalias !10
  store double %1171, double* %903, align 8, !noalias !10
  store double %1173, double* %904, align 8, !noalias !10
  store <2 x double> %1175, <2 x double>* %913, align 8, !noalias !10
  store <2 x double> %1177, <2 x double>* %914, align 8, !noalias !10
  %1178 = call fastcc double @_ZNK3jxl12_GLOBAL__N_112LossFunction7ComputeERKNS_8optimize5ArrayIdLm8EEEPS4_b(%"struct.jxl::(anonymous namespace)::LossFunction"* nonnull %8, %"class.jxl::optimize::Array"* nonnull dereferenceable(64) %4, %"class.jxl::optimize::Array"* nonnull %6, i1 zeroext false) #7, !noalias !10
  %1179 = fsub double %1178, %967
  %1180 = fmul double %1179, 2.000000e+00
  %1181 = fmul double %1141, %1157
  %1182 = fdiv double %1180, %1181
  %1183 = fcmp ult double %1182, 0.000000e+00
  br i1 %1183, label %1211, label %1184

1184:                                             ; preds = %1153
  %1185 = add i64 %964, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %859, i8* nonnull align 8 %860, i64 64, i1 false) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %861, i8* nonnull align 8 %862, i64 64, i1 false) #7, !noalias !10
  %1186 = load double, double* %864, align 8, !noalias !10
  %1187 = fmul double %1186, %1186
  %1188 = fadd double %1187, 0.000000e+00
  %1189 = load double, double* %866, align 8, !noalias !10
  %1190 = fmul double %1189, %1189
  %1191 = fadd double %1188, %1190
  %1192 = load double, double* %868, align 8, !noalias !10
  %1193 = fmul double %1192, %1192
  %1194 = fadd double %1191, %1193
  %1195 = load double, double* %870, align 8, !noalias !10
  %1196 = fmul double %1195, %1195
  %1197 = fadd double %1194, %1196
  %1198 = load <2 x double>, <2 x double>* %915, align 8, !noalias !10
  %1199 = fmul <2 x double> %1198, %1198
  %1200 = extractelement <2 x double> %1199, i32 0
  %1201 = fadd double %1197, %1200
  %1202 = extractelement <2 x double> %1199, i32 1
  %1203 = fadd double %1201, %1202
  %1204 = load <2 x double>, <2 x double>* %916, align 8, !noalias !10
  %1205 = fmul <2 x double> %1204, %1204
  %1206 = extractelement <2 x double> %1205, i32 0
  %1207 = fadd double %1203, %1206
  %1208 = extractelement <2 x double> %1205, i32 1
  %1209 = fadd double %1207, %1208
  %1210 = fcmp ugt double %1209, 0x3C9CD2B297D889BD
  br i1 %1210, label %1211, label %1338

1211:                                             ; preds = %1184, %1153
  %1212 = phi double [ %1195, %1184 ], [ %947, %1153 ]
  %1213 = phi double [ %1192, %1184 ], [ %948, %1153 ]
  %1214 = phi double [ %1189, %1184 ], [ %949, %1153 ]
  %1215 = phi double [ %1186, %1184 ], [ %950, %1153 ]
  %1216 = phi double [ %1195, %1184 ], [ %951, %1153 ]
  %1217 = phi double [ %1192, %1184 ], [ %952, %1153 ]
  %1218 = phi double [ %1189, %1184 ], [ %953, %1153 ]
  %1219 = phi double [ %1186, %1184 ], [ %954, %1153 ]
  %1220 = phi double [ %1195, %1184 ], [ %955, %1153 ]
  %1221 = phi double [ %1192, %1184 ], [ %956, %1153 ]
  %1222 = phi double [ %1189, %1184 ], [ %957, %1153 ]
  %1223 = phi double [ %1186, %1184 ], [ %958, %1153 ]
  %1224 = phi double [ %1195, %1184 ], [ %1132, %1153 ]
  %1225 = phi double [ %1192, %1184 ], [ %1133, %1153 ]
  %1226 = phi double [ %1189, %1184 ], [ %1134, %1153 ]
  %1227 = phi double [ %1186, %1184 ], [ %1135, %1153 ]
  %1228 = phi i1 [ true, %1184 ], [ false, %1153 ]
  %1229 = phi i64 [ %1185, %1184 ], [ %964, %1153 ]
  %1230 = phi i8 [ 1, %1184 ], [ 0, %1153 ]
  %1231 = phi double [ %955, %1184 ], [ %974, %1153 ]
  %1232 = phi double [ %956, %1184 ], [ %973, %1153 ]
  %1233 = phi double [ %957, %1184 ], [ %972, %1153 ]
  %1234 = phi double [ %958, %1184 ], [ %971, %1153 ]
  %1235 = phi double [ %1178, %1184 ], [ %967, %1153 ]
  %1236 = phi <2 x double> [ %1198, %1184 ], [ %980, %1153 ]
  %1237 = phi <2 x double> [ %1198, %1184 ], [ %981, %1153 ]
  %1238 = phi <2 x double> [ %1198, %1184 ], [ %1144, %1153 ]
  %1239 = phi <2 x double> [ %1198, %1184 ], [ %983, %1153 ]
  %1240 = phi <2 x double> [ %1204, %1184 ], [ %985, %1153 ]
  %1241 = phi <2 x double> [ %1204, %1184 ], [ %986, %1153 ]
  %1242 = phi <2 x double> [ %1204, %1184 ], [ %1146, %1153 ]
  %1243 = phi <2 x double> [ %1204, %1184 ], [ %988, %1153 ]
  %1244 = phi <2 x double> [ %983, %1184 ], [ %989, %1153 ]
  %1245 = phi <2 x double> [ %988, %1184 ], [ %990, %1153 ]
  %1246 = fcmp olt double %1182, 2.500000e-01
  br i1 %1246, label %1247, label %1251

1247:                                             ; preds = %1211
  %1248 = fmul double %1155, 4.000000e+00
  %1249 = fcmp ogt double %1248, 1.000000e+15
  %1250 = select i1 %1249, double 1.000000e+15, double %1248
  br label %1257

1251:                                             ; preds = %1211
  %1252 = fcmp ogt double %1182, 7.500000e-01
  br i1 %1252, label %1253, label %1257

1253:                                             ; preds = %1251
  %1254 = fmul double %1155, 2.500000e-01
  %1255 = fcmp olt double %1254, 1.000000e-15
  %1256 = select i1 %1255, double 1.000000e-15, double %1254
  br label %1257

1257:                                             ; preds = %1253, %1251, %1247
  %1258 = phi double [ %1250, %1247 ], [ %1256, %1253 ], [ %1155, %1251 ]
  %1259 = and i64 %1229, 7
  %1260 = icmp eq i64 %1259, 0
  br i1 %1260, label %1310, label %1261

1261:                                             ; preds = %1257
  br i1 %1228, label %1262, label %1310

1262:                                             ; preds = %1261
  %1263 = fsub double %1234, %1219
  %1264 = fsub double %1233, %1218
  %1265 = fsub double %1232, %1217
  %1266 = fsub double %1231, %1216
  %1267 = extractelement <2 x double> %1236, i32 0
  %1268 = extractelement <2 x double> %1244, i32 0
  %1269 = fsub double %1268, %1267
  %1270 = extractelement <2 x double> %1236, i32 1
  %1271 = extractelement <2 x double> %1244, i32 1
  %1272 = fsub double %1271, %1270
  %1273 = extractelement <2 x double> %1240, i32 0
  %1274 = extractelement <2 x double> %1245, i32 0
  %1275 = fsub double %1274, %1273
  %1276 = extractelement <2 x double> %1240, i32 1
  %1277 = extractelement <2 x double> %1245, i32 1
  %1278 = fsub double %1277, %1276
  %1279 = fmul double %1219, %1263
  %1280 = fadd double %1279, 0.000000e+00
  %1281 = fmul double %1218, %1264
  %1282 = fadd double %1281, %1280
  %1283 = fmul double %1217, %1265
  %1284 = fadd double %1283, %1282
  %1285 = fmul double %1216, %1266
  %1286 = fadd double %1285, %1284
  %1287 = fmul double %1267, %1269
  %1288 = fadd double %1287, %1286
  %1289 = fmul double %1270, %1272
  %1290 = fadd double %1289, %1288
  %1291 = fmul double %1273, %1275
  %1292 = fadd double %1291, %1290
  %1293 = fmul double %1276, %1278
  %1294 = fadd double %1293, %1292
  %1295 = fdiv double %1294, %1141
  %1296 = fmul double %1139, %1295
  %1297 = fmul double %1138, %1295
  %1298 = fmul double %1137, %1295
  %1299 = fmul double %1136, %1295
  %1300 = insertelement <2 x double> undef, double %1295, i32 0
  %1301 = shufflevector <2 x double> %1300, <2 x double> undef, <2 x i32> zeroinitializer
  %1302 = fmul <2 x double> %1143, %1301
  %1303 = fmul <2 x double> %1145, %1301
  %1304 = fadd double %1219, %1296
  %1305 = fadd double %1218, %1297
  %1306 = fadd double %1217, %1298
  %1307 = fadd double %1216, %1299
  %1308 = fadd <2 x double> %1236, %1302
  %1309 = fadd <2 x double> %1240, %1303
  br label %1310

1310:                                             ; preds = %1262, %1261, %1257
  %1311 = phi double [ %1216, %1262 ], [ %1216, %1261 ], [ %1212, %1257 ]
  %1312 = phi double [ %1217, %1262 ], [ %1217, %1261 ], [ %1213, %1257 ]
  %1313 = phi double [ %1218, %1262 ], [ %1218, %1261 ], [ %1214, %1257 ]
  %1314 = phi double [ %1219, %1262 ], [ %1219, %1261 ], [ %1215, %1257 ]
  %1315 = phi double [ %1216, %1262 ], [ %1220, %1261 ], [ %1212, %1257 ]
  %1316 = phi double [ %1217, %1262 ], [ %1221, %1261 ], [ %1213, %1257 ]
  %1317 = phi double [ %1218, %1262 ], [ %1222, %1261 ], [ %1214, %1257 ]
  %1318 = phi double [ %1219, %1262 ], [ %1223, %1261 ], [ %1215, %1257 ]
  %1319 = phi double [ %1216, %1262 ], [ %1224, %1261 ], [ %1212, %1257 ]
  %1320 = phi double [ %1217, %1262 ], [ %1225, %1261 ], [ %1213, %1257 ]
  %1321 = phi double [ %1218, %1262 ], [ %1226, %1261 ], [ %1214, %1257 ]
  %1322 = phi double [ %1219, %1262 ], [ %1227, %1261 ], [ %1215, %1257 ]
  %1323 = phi double [ %1307, %1262 ], [ %1136, %1261 ], [ %1212, %1257 ]
  %1324 = phi double [ %1306, %1262 ], [ %1137, %1261 ], [ %1213, %1257 ]
  %1325 = phi double [ %1305, %1262 ], [ %1138, %1261 ], [ %1214, %1257 ]
  %1326 = phi double [ %1304, %1262 ], [ %1139, %1261 ], [ %1215, %1257 ]
  %1327 = phi double [ %1258, %1262 ], [ %1258, %1261 ], [ 1.000000e+00, %1257 ]
  %1328 = phi <2 x double> [ %1308, %1262 ], [ %1143, %1261 ], [ %1237, %1257 ]
  %1329 = phi <2 x double> [ %1236, %1262 ], [ %1236, %1261 ], [ %1237, %1257 ]
  %1330 = phi <2 x double> [ %1236, %1262 ], [ %1238, %1261 ], [ %1237, %1257 ]
  %1331 = phi <2 x double> [ %1236, %1262 ], [ %1239, %1261 ], [ %1237, %1257 ]
  %1332 = phi <2 x double> [ %1309, %1262 ], [ %1145, %1261 ], [ %1241, %1257 ]
  %1333 = phi <2 x double> [ %1240, %1262 ], [ %1240, %1261 ], [ %1241, %1257 ]
  %1334 = phi <2 x double> [ %1240, %1262 ], [ %1242, %1261 ], [ %1241, %1257 ]
  %1335 = phi <2 x double> [ %1240, %1262 ], [ %1243, %1261 ], [ %1241, %1257 ]
  %1336 = add nuw nsw i64 %963, 1
  %1337 = icmp eq i64 %1336, 41
  br i1 %1337, label %1338, label %946

1338:                                             ; preds = %1310, %1184
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %862) #7, !noalias !10
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %861) #7, !noalias !10
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %860) #7, !noalias !10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %849, i8* nonnull align 8 %859, i64 64, i1 false) #7
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %859) #7
  %1339 = bitcast %"class.jxl::optimize::Array"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %1339) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %1339, i8* nonnull align 8 %849, i64 64, i1 false) #7
  %1340 = call fastcc double @_ZNK3jxl12_GLOBAL__N_112LossFunction7ComputeERKNS_8optimize5ArrayIdLm8EEEPS4_b(%"struct.jxl::(anonymous namespace)::LossFunction"* nonnull %8, %"class.jxl::optimize::Array"* nonnull dereferenceable(64) %10, %"class.jxl::optimize::Array"* nonnull %12, i1 zeroext true) #7
  %1341 = load i64, i64* %810, align 8
  %1342 = load i64, i64* %811, align 8
  %1343 = sub i64 %1341, %1342
  %1344 = ashr exact i64 %1343, 3
  %1345 = uitofp i64 %1344 to double
  %1346 = fdiv double %1340, %1345
  %1347 = fptrunc double %1346 to float
  %1348 = fpext float %1347 to double
  %1349 = fcmp ogt double %1348, 1.000000e-03
  br i1 %1349, label %1365, label %1350

1350:                                             ; preds = %1338
  %1351 = bitcast %"class.jxl::optimize::Array"* %10 to <4 x double>*
  %1352 = load <4 x double>, <4 x double>* %1351, align 8
  %1353 = fcmp olt <4 x double> %1352, zeroinitializer
  %1354 = select <4 x i1> %1353, <4 x double> zeroinitializer, <4 x double> %1352
  %1355 = fptrunc <4 x double> %1354 to <4 x float>
  %1356 = bitcast %"struct.jxl::NoiseParams"* %1 to <4 x float>*
  store <4 x float> %1355, <4 x float>* %1356, align 4
  %1357 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %1, i64 0, i32 0, i64 4
  %1358 = bitcast double* %855 to <4 x double>*
  %1359 = load <4 x double>, <4 x double>* %1358, align 8
  %1360 = fcmp olt <4 x double> %1359, zeroinitializer
  %1361 = select <4 x i1> %1360, <4 x double> zeroinitializer, <4 x double> %1359
  %1362 = fptrunc <4 x double> %1361 to <4 x float>
  %1363 = bitcast float* %1357 to <4 x float>*
  store <4 x float> %1362, <4 x float>* %1363, align 4
  %1364 = extractelement <4 x float> %1362, i32 0
  br label %1367

1365:                                             ; preds = %1338
  %1366 = bitcast %"struct.jxl::NoiseParams"* %1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %1366, i8 0, i64 32, i1 false) #7
  br label %1367

1367:                                             ; preds = %1365, %1350
  %1368 = phi float [ 0.000000e+00, %1365 ], [ %1364, %1350 ]
  %1369 = phi <4 x float> [ zeroinitializer, %1365 ], [ %1355, %1350 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %1339) #7
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %849) #7
  %1370 = icmp eq i64 %845, 0
  br i1 %1370, label %1377, label %1371

1371:                                             ; preds = %1367
  store i64 %845, i64* %847, align 8
  %1372 = inttoptr i64 %845 to i8*
  call void @_ZdlPv(i8* %1372) #11
  %1373 = bitcast %"struct.jxl::NoiseParams"* %1 to <4 x float>*
  %1374 = load <4 x float>, <4 x float>* %1373, align 4
  %1375 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %1, i64 0, i32 0, i64 4
  %1376 = load float, float* %1375, align 4
  br label %1377

1377:                                             ; preds = %1367, %1371
  %1378 = phi float [ %1368, %1367 ], [ %1376, %1371 ]
  %1379 = phi <4 x float> [ %1369, %1367 ], [ %1374, %1371 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %816) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %807)
  %1380 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %1, i64 0, i32 0, i64 0
  %1381 = fpext float %2 to double
  %1382 = fmul double %1381, 1.400000e+00
  %1383 = fpext <4 x float> %1379 to <4 x double>
  %1384 = insertelement <4 x double> undef, double %1382, i32 0
  %1385 = shufflevector <4 x double> %1384, <4 x double> undef, <4 x i32> zeroinitializer
  %1386 = fmul <4 x double> %1385, %1383
  %1387 = fptrunc <4 x double> %1386 to <4 x float>
  %1388 = bitcast %"struct.jxl::NoiseParams"* %1 to <4 x float>*
  store <4 x float> %1387, <4 x float>* %1388, align 4
  %1389 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %1, i64 0, i32 0, i64 4
  %1390 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %1, i64 0, i32 0, i64 5
  %1391 = load float, float* %1390, align 4
  %1392 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %1, i64 0, i32 0, i64 6
  %1393 = load float, float* %1392, align 4
  %1394 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %1, i64 0, i32 0, i64 7
  %1395 = load float, float* %1394, align 4
  %1396 = insertelement <4 x float> undef, float %1378, i32 0
  %1397 = insertelement <4 x float> %1396, float %1391, i32 1
  %1398 = insertelement <4 x float> %1397, float %1393, i32 2
  %1399 = insertelement <4 x float> %1398, float %1395, i32 3
  %1400 = fpext <4 x float> %1399 to <4 x double>
  %1401 = fmul <4 x double> %1385, %1400
  %1402 = fptrunc <4 x double> %1401 to <4 x float>
  %1403 = bitcast float* %1389 to <4 x float>*
  store <4 x float> %1402, <4 x float>* %1403, align 4
  %1404 = load float, float* %1380, align 4
  %1405 = call float @llvm.fabs.f32(float %1404) #7
  %1406 = fcmp ule float %1405, 0x3F50624DE0000000
  br i1 %1406, label %1407, label %1442

1407:                                             ; preds = %1377
  %1408 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %1, i64 0, i32 0, i64 1
  %1409 = load float, float* %1408, align 4
  %1410 = call float @llvm.fabs.f32(float %1409) #7
  %1411 = fcmp ule float %1410, 0x3F50624DE0000000
  br i1 %1411, label %1412, label %1442

1412:                                             ; preds = %1407
  %1413 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %1, i64 0, i32 0, i64 2
  %1414 = load float, float* %1413, align 4
  %1415 = call float @llvm.fabs.f32(float %1414) #7
  %1416 = fcmp ule float %1415, 0x3F50624DE0000000
  br i1 %1416, label %1417, label %1442

1417:                                             ; preds = %1412
  %1418 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %1, i64 0, i32 0, i64 3
  %1419 = load float, float* %1418, align 4
  %1420 = call float @llvm.fabs.f32(float %1419) #7
  %1421 = fcmp ule float %1420, 0x3F50624DE0000000
  br i1 %1421, label %1422, label %1442

1422:                                             ; preds = %1417
  %1423 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %1, i64 0, i32 0, i64 4
  %1424 = load float, float* %1423, align 4
  %1425 = call float @llvm.fabs.f32(float %1424) #7
  %1426 = fcmp ule float %1425, 0x3F50624DE0000000
  br i1 %1426, label %1427, label %1442

1427:                                             ; preds = %1422
  %1428 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %1, i64 0, i32 0, i64 5
  %1429 = load float, float* %1428, align 4
  %1430 = call float @llvm.fabs.f32(float %1429) #7
  %1431 = fcmp ule float %1430, 0x3F50624DE0000000
  br i1 %1431, label %1432, label %1442

1432:                                             ; preds = %1427
  %1433 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %1, i64 0, i32 0, i64 6
  %1434 = load float, float* %1433, align 4
  %1435 = call float @llvm.fabs.f32(float %1434) #7
  %1436 = fcmp ule float %1435, 0x3F50624DE0000000
  %1437 = extractelement <4 x float> %1402, i32 3
  %1438 = call float @llvm.fabs.f32(float %1437) #7
  %1439 = fcmp ule float %1438, 0x3F50624DE0000000
  %1440 = and i1 %1436, %1439
  %1441 = zext i1 %1440 to i32
  br label %1442

1442:                                             ; preds = %1432, %1377, %1407, %1412, %1417, %1422, %1427
  %1443 = phi i32 [ 0, %1377 ], [ 0, %1407 ], [ 0, %1412 ], [ 0, %1417 ], [ 0, %1422 ], [ 0, %1427 ], [ %1441, %1432 ]
  %1444 = load %"struct.jxl::NoiseLevel"*, %"struct.jxl::NoiseLevel"** %497, align 8
  %1445 = icmp eq %"struct.jxl::NoiseLevel"* %1444, null
  br i1 %1445, label %1449, label %1446

1446:                                             ; preds = %1442
  %1447 = ptrtoint %"struct.jxl::NoiseLevel"* %1444 to i64
  store i64 %1447, i64* %810, align 8
  %1448 = bitcast %"struct.jxl::NoiseLevel"* %1444 to i8*
  call void @_ZdlPv(i8* %1448) #11
  br label %1449

1449:                                             ; preds = %1442, %1446
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %496) #7
  br label %1450

1450:                                             ; preds = %1449, %493
  %1451 = phi i32 [ 1, %493 ], [ %1443, %1449 ]
  %1452 = icmp eq float* %35, null
  br i1 %1452, label %1454, label %1453

1453:                                             ; preds = %1450
  call void @_ZdlPv(i8* %34) #11
  br label %1454

1454:                                             ; preds = %1450, %1453
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %18) #7
  ret i32 %1451
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl11EncodeNoiseERKNS_11NoiseParamsEPNS_9BitWriterEmPNS_6AuxOutE(%"struct.jxl::NoiseParams"* readonly dereferenceable(32), %"struct.jxl::BitWriter"*, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #0 {
  %5 = alloca %"class.jxl::BitWriter::Allotment", align 8
  %6 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 0
  %7 = load float, float* %6, align 4
  %8 = tail call float @llvm.fabs.f32(float %7) #7
  %9 = fcmp ule float %8, 0x3F50624DE0000000
  br i1 %9, label %10, label %48

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 1
  %12 = load float, float* %11, align 4
  %13 = tail call float @llvm.fabs.f32(float %12) #7
  %14 = fcmp ule float %13, 0x3F50624DE0000000
  br i1 %14, label %15, label %48

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 2
  %17 = load float, float* %16, align 4
  %18 = tail call float @llvm.fabs.f32(float %17) #7
  %19 = fcmp ule float %18, 0x3F50624DE0000000
  br i1 %19, label %20, label %48

20:                                               ; preds = %15
  %21 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 3
  %22 = load float, float* %21, align 4
  %23 = tail call float @llvm.fabs.f32(float %22) #7
  %24 = fcmp ule float %23, 0x3F50624DE0000000
  br i1 %24, label %25, label %48

25:                                               ; preds = %20
  %26 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 4
  %27 = load float, float* %26, align 4
  %28 = tail call float @llvm.fabs.f32(float %27) #7
  %29 = fcmp ule float %28, 0x3F50624DE0000000
  br i1 %29, label %30, label %48

30:                                               ; preds = %25
  %31 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 5
  %32 = load float, float* %31, align 4
  %33 = tail call float @llvm.fabs.f32(float %32) #7
  %34 = fcmp ule float %33, 0x3F50624DE0000000
  br i1 %34, label %35, label %48

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 6
  %37 = load float, float* %36, align 4
  %38 = tail call float @llvm.fabs.f32(float %37) #7
  %39 = fcmp ule float %38, 0x3F50624DE0000000
  br i1 %39, label %40, label %48

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 7
  %42 = load float, float* %41, align 4
  %43 = tail call float @llvm.fabs.f32(float %42) #7
  %44 = fcmp ule float %43, 0x3F50624DE0000000
  br i1 %44, label %45, label %48

45:                                               ; preds = %40
  %46 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.1, i64 0, i64 0), i32 378, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0)) #7
  %47 = tail call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

48:                                               ; preds = %4, %10, %15, %20, %25, %30, %35, %40
  %49 = bitcast %"class.jxl::BitWriter::Allotment"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %49) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %49, i8 -86, i64 40, i1 false)
  call void @_ZN3jxl9BitWriter9AllotmentC1EPS0_m(%"class.jxl::BitWriter::Allotment"* nonnull %5, %"struct.jxl::BitWriter"* %1, i64 128) #7
  %50 = load float, float* %6, align 4
  %51 = fcmp ult float %50, 0.000000e+00
  br i1 %51, label %52, label %55

52:                                               ; preds = %123, %113, %103, %93, %83, %73, %63, %48
  %53 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.1, i64 0, i64 0), i32 338, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.10, i64 0, i64 0)) #7
  %54 = call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

55:                                               ; preds = %48
  %56 = fmul float %50, 1.024000e+03
  %57 = fadd float %56, 5.000000e-01
  %58 = fptosi float %57 to i32
  %59 = icmp slt i32 %58, 1024
  br i1 %59, label %63, label %60

60:                                               ; preds = %128, %118, %108, %98, %88, %78, %68, %55
  %61 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.1, i64 0, i64 0), i32 340, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.11, i64 0, i64 0)) #7
  %62 = call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

63:                                               ; preds = %55
  %64 = sext i32 %58 to i64
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %1, i64 10, i64 %64) #7
  %65 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 1
  %66 = load float, float* %65, align 4
  %67 = fcmp ult float %66, 0.000000e+00
  br i1 %67, label %52, label %68

68:                                               ; preds = %63
  %69 = fmul float %66, 1.024000e+03
  %70 = fadd float %69, 5.000000e-01
  %71 = fptosi float %70 to i32
  %72 = icmp slt i32 %71, 1024
  br i1 %72, label %73, label %60

73:                                               ; preds = %68
  %74 = sext i32 %71 to i64
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %1, i64 10, i64 %74) #7
  %75 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 2
  %76 = load float, float* %75, align 4
  %77 = fcmp ult float %76, 0.000000e+00
  br i1 %77, label %52, label %78

78:                                               ; preds = %73
  %79 = fmul float %76, 1.024000e+03
  %80 = fadd float %79, 5.000000e-01
  %81 = fptosi float %80 to i32
  %82 = icmp slt i32 %81, 1024
  br i1 %82, label %83, label %60

83:                                               ; preds = %78
  %84 = sext i32 %81 to i64
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %1, i64 10, i64 %84) #7
  %85 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 3
  %86 = load float, float* %85, align 4
  %87 = fcmp ult float %86, 0.000000e+00
  br i1 %87, label %52, label %88

88:                                               ; preds = %83
  %89 = fmul float %86, 1.024000e+03
  %90 = fadd float %89, 5.000000e-01
  %91 = fptosi float %90 to i32
  %92 = icmp slt i32 %91, 1024
  br i1 %92, label %93, label %60

93:                                               ; preds = %88
  %94 = sext i32 %91 to i64
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %1, i64 10, i64 %94) #7
  %95 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 4
  %96 = load float, float* %95, align 4
  %97 = fcmp ult float %96, 0.000000e+00
  br i1 %97, label %52, label %98

98:                                               ; preds = %93
  %99 = fmul float %96, 1.024000e+03
  %100 = fadd float %99, 5.000000e-01
  %101 = fptosi float %100 to i32
  %102 = icmp slt i32 %101, 1024
  br i1 %102, label %103, label %60

103:                                              ; preds = %98
  %104 = sext i32 %101 to i64
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %1, i64 10, i64 %104) #7
  %105 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 5
  %106 = load float, float* %105, align 4
  %107 = fcmp ult float %106, 0.000000e+00
  br i1 %107, label %52, label %108

108:                                              ; preds = %103
  %109 = fmul float %106, 1.024000e+03
  %110 = fadd float %109, 5.000000e-01
  %111 = fptosi float %110 to i32
  %112 = icmp slt i32 %111, 1024
  br i1 %112, label %113, label %60

113:                                              ; preds = %108
  %114 = sext i32 %111 to i64
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %1, i64 10, i64 %114) #7
  %115 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 6
  %116 = load float, float* %115, align 4
  %117 = fcmp ult float %116, 0.000000e+00
  br i1 %117, label %52, label %118

118:                                              ; preds = %113
  %119 = fmul float %116, 1.024000e+03
  %120 = fadd float %119, 5.000000e-01
  %121 = fptosi float %120 to i32
  %122 = icmp slt i32 %121, 1024
  br i1 %122, label %123, label %60

123:                                              ; preds = %118
  %124 = sext i32 %121 to i64
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %1, i64 10, i64 %124) #7
  %125 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 7
  %126 = load float, float* %125, align 4
  %127 = fcmp ult float %126, 0.000000e+00
  br i1 %127, label %52, label %128

128:                                              ; preds = %123
  %129 = fmul float %126, 1.024000e+03
  %130 = fadd float %129, 5.000000e-01
  %131 = fptosi float %130 to i32
  %132 = icmp slt i32 %131, 1024
  br i1 %132, label %133, label %60

133:                                              ; preds = %128
  %134 = sext i32 %131 to i64
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %1, i64 10, i64 %134) #7
  call void @_ZN3jxl16ReclaimAndChargeEPNS_9BitWriterEPNS0_9AllotmentEmPNS_6AuxOutE(%"struct.jxl::BitWriter"* %1, %"class.jxl::BitWriter::Allotment"* nonnull %5, i64 %2, %"struct.jxl::AuxOut"* %3) #7
  call void @_ZN3jxl9BitWriter9AllotmentD1Ev(%"class.jxl::BitWriter::Allotment"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %49) #7
  ret void
}

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #2

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #3

declare void @_ZN3jxl9BitWriter9AllotmentC1EPS0_m(%"class.jxl::BitWriter::Allotment"*, %"struct.jxl::BitWriter"*, i64) unnamed_addr #2

declare void @_ZN3jxl16ReclaimAndChargeEPNS_9BitWriterEPNS0_9AllotmentEmPNS_6AuxOutE(%"struct.jxl::BitWriter"*, %"class.jxl::BitWriter::Allotment"*, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN3jxl9BitWriter9AllotmentD1Ev(%"class.jxl::BitWriter::Allotment"*) unnamed_addr #4

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: nounwind
declare void @llvm.assume(i1) #7

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #8

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZNSt3__16__sortIRNS_6__lessIffEEPfEEvT0_S5_T_(float*, float*, %"struct.std::__1::__less.128"* dereferenceable(1)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3jxl13HalfRangeModeclEPKjm(%"class.jxl::HalfRangeMode"*, i32* noalias, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"struct.std::__1::__less.129", align 1
  %5 = alloca %"class.std::__1::vector.130", align 8
  %6 = lshr i64 %2, 1
  %7 = trunc i64 %6 to i32
  %8 = trunc i64 %2 to i32
  %9 = icmp sgt i32 %8, 2
  br i1 %9, label %10, label %256

10:                                               ; preds = %3
  %11 = add nsw i32 %8, -1
  %12 = bitcast %"class.std::__1::vector.130"* %5 to i8*
  %13 = getelementptr inbounds %"class.std::__1::vector.130", %"class.std::__1::vector.130"* %5, i64 0, i32 0, i32 0
  %14 = getelementptr inbounds %"class.std::__1::vector.130", %"class.std::__1::vector.130"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  %15 = getelementptr inbounds %"class.std::__1::vector.130", %"class.std::__1::vector.130"* %5, i64 0, i32 0, i32 1
  %16 = bitcast i32** %15 to i64*
  %17 = bitcast %"class.std::__1::vector.130"* %5 to i64*
  %18 = bitcast i32** %14 to i64*
  %19 = getelementptr inbounds %"struct.std::__1::__less.129", %"struct.std::__1::__less.129"* %4, i64 0, i32 0
  br label %20

20:                                               ; preds = %10, %254
  %21 = phi i32 [ %8, %10 ], [ %24, %254 ]
  %22 = phi i32 [ %7, %10 ], [ %248, %254 ]
  %23 = add nuw nsw i32 %21, 1
  %24 = sdiv i32 %23, 2
  %25 = add nsw i32 %24, 1
  %26 = sdiv i32 %25, 2
  %27 = sub nsw i32 %22, %26
  %28 = add nsw i32 %26, %22
  %29 = icmp sgt i32 %27, %28
  br i1 %29, label %30, label %33

30:                                               ; preds = %20
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #7, !noalias !22
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 0, i64 24, i1 false) #7, !noalias !22
  br label %173

31:                                               ; preds = %54
  %32 = fmul float %69, 0x3FEFF7CEE0000000
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #7, !noalias !22
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 0, i64 24, i1 false) #7, !noalias !22
  br i1 %29, label %173, label %75

33:                                               ; preds = %20, %54
  %34 = phi float [ %69, %54 ], [ 0.000000e+00, %20 ]
  %35 = phi i32 [ %70, %54 ], [ %27, %20 ]
  %36 = sub nsw i32 %35, %26
  %37 = icmp sgt i32 %36, 1
  %38 = select i1 %37, i32 %36, i32 1
  %39 = add nsw i32 %35, %26
  %40 = icmp slt i32 %11, %39
  %41 = select i1 %40, i32 %11, i32 %39
  %42 = icmp sgt i32 %41, %38
  br i1 %42, label %44, label %43

43:                                               ; preds = %33
  call void (i8*, i32, i8*, ...) @_ZN3hwy5AbortEPKciS1_z(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.4, i64 0, i64 0), i32 218, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i64 0, i64 0)) #12, !noalias !22
  unreachable

44:                                               ; preds = %33
  %45 = zext i32 %38 to i64
  %46 = getelementptr inbounds i32, i32* %1, i64 %45
  %47 = load i32, i32* %46, align 4, !alias.scope !22
  %48 = add nsw i32 %41, -1
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i32, i32* %1, i64 %49
  %51 = load i32, i32* %50, align 4, !alias.scope !22
  %52 = icmp ugt i32 %47, %51
  br i1 %52, label %53, label %54

53:                                               ; preds = %44
  call void (i8*, i32, i8*, ...) @_ZN3hwy5AbortEPKciS1_z(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.4, i64 0, i64 0), i32 219, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.8, i64 0, i64 0)) #12, !noalias !22
  unreachable

54:                                               ; preds = %44
  %55 = sub nsw i32 1, %38
  %56 = add i32 %55, %41
  %57 = sext i32 %41 to i64
  %58 = getelementptr inbounds i32, i32* %1, i64 %57
  %59 = load i32, i32* %58, align 4, !alias.scope !22
  %60 = add nsw i32 %38, -1
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds i32, i32* %1, i64 %61
  %63 = load i32, i32* %62, align 4, !alias.scope !22
  %64 = sub i32 %59, %63
  %65 = uitofp i32 %64 to float
  %66 = sitofp i32 %56 to float
  %67 = fdiv float %65, %66
  %68 = fcmp olt float %34, %67
  %69 = select i1 %68, float %67, float %34
  %70 = add nsw i32 %35, 1
  %71 = icmp slt i32 %35, %28
  br i1 %71, label %33, label %31

72:                                               ; preds = %167
  %73 = load i32*, i32** %13, align 8, !noalias !22
  %74 = icmp eq i32* %73, %168
  br i1 %74, label %173, label %174

75:                                               ; preds = %31, %167
  %76 = phi i32* [ %168, %167 ], [ null, %31 ]
  %77 = phi i64 [ %169, %167 ], [ 0, %31 ]
  %78 = phi i32* [ %170, %167 ], [ null, %31 ]
  %79 = phi i32 [ %171, %167 ], [ %27, %31 ]
  %80 = sub nsw i32 %79, %26
  %81 = icmp sgt i32 %80, 1
  %82 = select i1 %81, i32 %80, i32 1
  %83 = add nsw i32 %79, %26
  %84 = icmp slt i32 %11, %83
  %85 = select i1 %84, i32 %11, i32 %83
  %86 = icmp sgt i32 %85, %82
  br i1 %86, label %88, label %87

87:                                               ; preds = %75
  call void (i8*, i32, i8*, ...) @_ZN3hwy5AbortEPKciS1_z(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.4, i64 0, i64 0), i32 218, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i64 0, i64 0)) #12, !noalias !22
  unreachable

88:                                               ; preds = %75
  %89 = zext i32 %82 to i64
  %90 = getelementptr inbounds i32, i32* %1, i64 %89
  %91 = load i32, i32* %90, align 4, !alias.scope !22
  %92 = add nsw i32 %85, -1
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds i32, i32* %1, i64 %93
  %95 = load i32, i32* %94, align 4, !alias.scope !22
  %96 = icmp ugt i32 %91, %95
  br i1 %96, label %97, label %98

97:                                               ; preds = %88
  call void (i8*, i32, i8*, ...) @_ZN3hwy5AbortEPKciS1_z(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.4, i64 0, i64 0), i32 219, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.8, i64 0, i64 0)) #12, !noalias !22
  unreachable

98:                                               ; preds = %88
  %99 = sub nsw i32 1, %82
  %100 = add i32 %99, %85
  %101 = sext i32 %85 to i64
  %102 = getelementptr inbounds i32, i32* %1, i64 %101
  %103 = load i32, i32* %102, align 4, !alias.scope !22
  %104 = add nsw i32 %82, -1
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds i32, i32* %1, i64 %105
  %107 = load i32, i32* %106, align 4, !alias.scope !22
  %108 = sub i32 %103, %107
  %109 = uitofp i32 %108 to float
  %110 = sitofp i32 %100 to float
  %111 = fdiv float %109, %110
  %112 = add nuw nsw i32 %82, 1
  %113 = add i32 %112, %85
  %114 = sdiv i32 %113, 2
  %115 = fcmp ult float %111, %32
  br i1 %115, label %167, label %116

116:                                              ; preds = %98
  %117 = load i32*, i32** %14, align 8, !noalias !22
  %118 = icmp eq i32* %78, %117
  br i1 %118, label %122, label %119

119:                                              ; preds = %116
  store i32 %114, i32* %78, align 4, !noalias !22
  %120 = getelementptr inbounds i32, i32* %78, i64 1
  %121 = ptrtoint i32* %120 to i64
  store i64 %121, i64* %16, align 8, !noalias !22
  br label %167

122:                                              ; preds = %116
  %123 = ptrtoint i32* %78 to i64
  %124 = load i64, i64* %17, align 8, !noalias !22
  %125 = sub i64 %123, %124
  %126 = ashr exact i64 %125, 2
  %127 = add nsw i64 %126, 1
  %128 = icmp ugt i64 %127, 4611686018427387903
  br i1 %128, label %129, label %131

129:                                              ; preds = %122
  %130 = bitcast %"class.std::__1::vector.130"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %130) #12, !noalias !22
  unreachable

131:                                              ; preds = %122
  %132 = icmp ult i64 %126, 2305843009213693951
  br i1 %132, label %133, label %141

133:                                              ; preds = %131
  %134 = ashr exact i64 %125, 1
  %135 = icmp ult i64 %134, %127
  %136 = select i1 %135, i64 %127, i64 %134
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %146, label %138

138:                                              ; preds = %133
  %139 = icmp ugt i64 %136, 4611686018427387903
  br i1 %139, label %140, label %141

140:                                              ; preds = %138
  call void @abort() #12, !noalias !22
  unreachable

141:                                              ; preds = %138, %131
  %142 = phi i64 [ %136, %138 ], [ 4611686018427387903, %131 ]
  %143 = shl i64 %142, 2
  %144 = call i8* @_Znwm(i64 %143) #11, !noalias !22
  %145 = bitcast i8* %144 to i32*
  br label %146

146:                                              ; preds = %141, %133
  %147 = phi i64 [ %142, %141 ], [ 0, %133 ]
  %148 = phi i32* [ %145, %141 ], [ null, %133 ]
  %149 = getelementptr inbounds i32, i32* %148, i64 %126
  %150 = getelementptr inbounds i32, i32* %148, i64 %147
  %151 = ptrtoint i32* %150 to i64
  store i32 %114, i32* %149, align 4, !noalias !22
  %152 = getelementptr inbounds i32, i32* %149, i64 1
  %153 = ptrtoint i32* %152 to i64
  %154 = sub i64 %77, %124
  %155 = ashr exact i64 %154, 2
  %156 = sub nsw i64 0, %155
  %157 = getelementptr inbounds i32, i32* %149, i64 %156
  %158 = ptrtoint i32* %157 to i64
  %159 = icmp sgt i64 %154, 0
  br i1 %159, label %160, label %163

160:                                              ; preds = %146
  %161 = bitcast i32* %157 to i8*
  %162 = inttoptr i64 %124 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %161, i8* align 4 %162, i64 %154, i1 false) #7, !noalias !22
  br label %163

163:                                              ; preds = %160, %146
  store i64 %158, i64* %17, align 8, !noalias !22
  store i64 %153, i64* %16, align 8, !noalias !22
  store i64 %151, i64* %18, align 8, !noalias !22
  %164 = icmp eq i64 %124, 0
  br i1 %164, label %167, label %165

165:                                              ; preds = %163
  %166 = inttoptr i64 %124 to i8*
  call void @_ZdlPv(i8* %166) #11, !noalias !22
  br label %167

167:                                              ; preds = %165, %163, %119, %98
  %168 = phi i32* [ %152, %165 ], [ %152, %163 ], [ %120, %119 ], [ %76, %98 ]
  %169 = phi i64 [ %153, %165 ], [ %153, %163 ], [ %121, %119 ], [ %77, %98 ]
  %170 = phi i32* [ %152, %165 ], [ %152, %163 ], [ %120, %119 ], [ %78, %98 ]
  %171 = add nsw i32 %79, 1
  %172 = icmp slt i32 %79, %28
  br i1 %172, label %75, label %72

173:                                              ; preds = %72, %31, %30
  call void (i8*, i32, i8*, ...) @_ZN3hwy5AbortEPKciS1_z(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.4, i64 0, i64 0), i32 248, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6, i64 0, i64 0)) #12, !noalias !22
  unreachable

174:                                              ; preds = %72
  %175 = ptrtoint i32* %73 to i64
  %176 = sub i64 %169, %175
  %177 = icmp eq i64 %176, 4
  br i1 %177, label %178, label %180

178:                                              ; preds = %174
  %179 = load i32, i32* %73, align 4, !noalias !22
  br label %247

180:                                              ; preds = %174
  %181 = ashr exact i64 %176, 2
  %182 = icmp eq i64 %176, 0
  br i1 %182, label %183, label %184

183:                                              ; preds = %180
  call void (i8*, i32, i8*, ...) @_ZN3hwy5AbortEPKciS1_z(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.4, i64 0, i64 0), i32 61, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.9, i64 0, i64 0)) #12, !noalias !22
  unreachable

184:                                              ; preds = %180
  %185 = lshr i64 %181, 1
  %186 = getelementptr inbounds i32, i32* %73, i64 %185
  %187 = getelementptr inbounds i32, i32* %73, i64 %181
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %19) #7, !noalias !22
  call void @_ZNSt3__113__nth_elementIRNS_6__lessIiiEEPiEEvT0_S5_S5_T_(i32* %73, i32* %186, i32* %187, %"struct.std::__1::__less.129"* nonnull dereferenceable(1) %4) #7, !noalias !22
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %19) #7, !noalias !22
  %188 = load i32, i32* %186, align 4, !noalias !22
  %189 = and i64 %176, 4
  %190 = icmp eq i64 %189, 0
  br i1 %190, label %191, label %247

191:                                              ; preds = %184
  %192 = icmp ult i64 %181, 4
  br i1 %192, label %241, label %193

193:                                              ; preds = %191
  %194 = getelementptr inbounds i32, i32* %73, i64 1
  %195 = shl nuw nsw i64 %185, 2
  %196 = add nsw i64 %195, -8
  %197 = lshr exact i64 %196, 2
  %198 = add nuw nsw i64 %197, 1
  %199 = and i64 %198, 3
  %200 = icmp eq i64 %199, 0
  br i1 %200, label %212, label %201

201:                                              ; preds = %193, %201
  %202 = phi i32* [ %209, %201 ], [ %194, %193 ]
  %203 = phi i32* [ %208, %201 ], [ %73, %193 ]
  %204 = phi i64 [ %210, %201 ], [ %199, %193 ]
  %205 = load i32, i32* %203, align 4, !noalias !22
  %206 = load i32, i32* %202, align 4, !noalias !22
  %207 = icmp slt i32 %205, %206
  %208 = select i1 %207, i32* %202, i32* %203
  %209 = getelementptr inbounds i32, i32* %202, i64 1
  %210 = add i64 %204, -1
  %211 = icmp eq i64 %210, 0
  br i1 %211, label %212, label %201, !llvm.loop !25

212:                                              ; preds = %201, %193
  %213 = phi i32* [ undef, %193 ], [ %208, %201 ]
  %214 = phi i32* [ %194, %193 ], [ %209, %201 ]
  %215 = phi i32* [ %73, %193 ], [ %208, %201 ]
  %216 = icmp ult i64 %196, 12
  br i1 %216, label %241, label %217

217:                                              ; preds = %212, %217
  %218 = phi i32* [ %239, %217 ], [ %214, %212 ]
  %219 = phi i32* [ %238, %217 ], [ %215, %212 ]
  %220 = load i32, i32* %219, align 4, !noalias !22
  %221 = load i32, i32* %218, align 4, !noalias !22
  %222 = icmp slt i32 %220, %221
  %223 = select i1 %222, i32* %218, i32* %219
  %224 = getelementptr inbounds i32, i32* %218, i64 1
  %225 = load i32, i32* %223, align 4, !noalias !22
  %226 = load i32, i32* %224, align 4, !noalias !22
  %227 = icmp slt i32 %225, %226
  %228 = select i1 %227, i32* %224, i32* %223
  %229 = getelementptr inbounds i32, i32* %218, i64 2
  %230 = load i32, i32* %228, align 4, !noalias !22
  %231 = load i32, i32* %229, align 4, !noalias !22
  %232 = icmp slt i32 %230, %231
  %233 = select i1 %232, i32* %229, i32* %228
  %234 = getelementptr inbounds i32, i32* %218, i64 3
  %235 = load i32, i32* %233, align 4, !noalias !22
  %236 = load i32, i32* %234, align 4, !noalias !22
  %237 = icmp slt i32 %235, %236
  %238 = select i1 %237, i32* %234, i32* %233
  %239 = getelementptr inbounds i32, i32* %218, i64 4
  %240 = icmp eq i32* %239, %186
  br i1 %240, label %241, label %217

241:                                              ; preds = %212, %217, %191
  %242 = phi i32* [ %73, %191 ], [ %213, %212 ], [ %238, %217 ]
  %243 = load i32, i32* %242, align 4, !noalias !22
  %244 = add i32 %188, 1
  %245 = add i32 %244, %243
  %246 = sdiv i32 %245, 2
  br label %247

247:                                              ; preds = %241, %184, %178
  %248 = phi i32 [ %179, %178 ], [ %246, %241 ], [ %188, %184 ]
  %249 = load i32*, i32** %13, align 8, !noalias !22
  %250 = icmp eq i32* %249, null
  br i1 %250, label %254, label %251

251:                                              ; preds = %247
  %252 = ptrtoint i32* %249 to i64
  store i64 %252, i64* %16, align 8, !noalias !22
  %253 = bitcast i32* %249 to i8*
  call void @_ZdlPv(i8* %253) #11, !noalias !22
  br label %254

254:                                              ; preds = %247, %251
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #7, !noalias !22
  %255 = icmp sgt i32 %21, 4
  br i1 %255, label %20, label %256

256:                                              ; preds = %254, %3
  %257 = phi i32 [ %7, %3 ], [ %248, %254 ]
  ret i32 %257
}

; Function Attrs: noreturn
declare void @_ZN3hwy5AbortEPKciS1_z(i8*, i32, i8*, ...) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__113__nth_elementIRNS_6__lessIiiEEPiEEvT0_S5_S5_T_(i32*, i32*, i32*, %"struct.std::__1::__less.129"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %5 = icmp eq i32* %2, %1
  br i1 %5, label %254, label %6

6:                                                ; preds = %4, %250
  %7 = phi i32* [ %252, %250 ], [ %0, %4 ]
  %8 = phi i32* [ %251, %250 ], [ %2, %4 ]
  %9 = ptrtoint i32* %8 to i64
  %10 = ptrtoint i32* %7 to i64
  %11 = sub i64 %9, %10
  %12 = ashr exact i64 %11, 2
  switch i64 %12, label %39 [
    i64 0, label %254
    i64 1, label %254
    i64 2, label %13
    i64 3, label %19
  ]

13:                                               ; preds = %6
  %14 = getelementptr inbounds i32, i32* %8, i64 -1
  %15 = load i32, i32* %14, align 4
  %16 = load i32, i32* %7, align 4
  %17 = icmp slt i32 %15, %16
  br i1 %17, label %18, label %254

18:                                               ; preds = %13
  store i32 %15, i32* %7, align 4
  store i32 %16, i32* %14, align 4
  br label %254

19:                                               ; preds = %6
  %20 = getelementptr inbounds i32, i32* %7, i64 1
  %21 = getelementptr inbounds i32, i32* %8, i64 -1
  %22 = load i32, i32* %20, align 4
  %23 = load i32, i32* %7, align 4
  %24 = icmp slt i32 %22, %23
  %25 = load i32, i32* %21, align 4
  %26 = icmp slt i32 %25, %22
  br i1 %24, label %33, label %27

27:                                               ; preds = %19
  br i1 %26, label %28, label %254

28:                                               ; preds = %27
  store i32 %25, i32* %20, align 4
  store i32 %22, i32* %21, align 4
  %29 = load i32, i32* %20, align 4
  %30 = load i32, i32* %7, align 4
  %31 = icmp slt i32 %29, %30
  br i1 %31, label %32, label %254

32:                                               ; preds = %28
  store i32 %29, i32* %7, align 4
  store i32 %30, i32* %20, align 4
  br label %254

33:                                               ; preds = %19
  br i1 %26, label %34, label %35

34:                                               ; preds = %33
  store i32 %25, i32* %7, align 4
  store i32 %23, i32* %21, align 4
  br label %254

35:                                               ; preds = %33
  store i32 %22, i32* %7, align 4
  store i32 %23, i32* %20, align 4
  %36 = load i32, i32* %21, align 4
  %37 = icmp slt i32 %36, %23
  br i1 %37, label %38, label %254

38:                                               ; preds = %35
  store i32 %36, i32* %20, align 4
  store i32 %23, i32* %21, align 4
  br label %254

39:                                               ; preds = %6
  %40 = icmp slt i64 %11, 32
  br i1 %40, label %41, label %112

41:                                               ; preds = %39
  %42 = getelementptr inbounds i32, i32* %8, i64 -1
  %43 = icmp eq i32* %42, %7
  br i1 %43, label %254, label %44

44:                                               ; preds = %41
  %45 = ptrtoint i32* %7 to i64
  br label %46

46:                                               ; preds = %44, %108
  %47 = phi i64 [ 0, %44 ], [ %111, %108 ]
  %48 = phi i32* [ %7, %44 ], [ %109, %108 ]
  %49 = sub i64 -2, %47
  %50 = getelementptr i32, i32* %8, i64 %49
  %51 = ptrtoint i32* %50 to i64
  %52 = sub i64 %51, %45
  %53 = lshr i64 %52, 2
  %54 = add nuw nsw i64 %53, 1
  %55 = icmp eq i32* %48, %8
  br i1 %55, label %108, label %56

56:                                               ; preds = %46
  %57 = getelementptr inbounds i32, i32* %48, i64 1
  %58 = icmp eq i32* %57, %8
  br i1 %58, label %108, label %59

59:                                               ; preds = %56
  %60 = and i64 %54, 3
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %73, label %62

62:                                               ; preds = %59, %62
  %63 = phi i32* [ %70, %62 ], [ %57, %59 ]
  %64 = phi i32* [ %69, %62 ], [ %48, %59 ]
  %65 = phi i64 [ %71, %62 ], [ %60, %59 ]
  %66 = load i32, i32* %63, align 4
  %67 = load i32, i32* %64, align 4
  %68 = icmp slt i32 %66, %67
  %69 = select i1 %68, i32* %63, i32* %64
  %70 = getelementptr inbounds i32, i32* %63, i64 1
  %71 = add i64 %65, -1
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %62, !llvm.loop !26

73:                                               ; preds = %62, %59
  %74 = phi i32* [ undef, %59 ], [ %69, %62 ]
  %75 = phi i32* [ %57, %59 ], [ %70, %62 ]
  %76 = phi i32* [ %48, %59 ], [ %69, %62 ]
  %77 = icmp ult i64 %52, 12
  br i1 %77, label %102, label %78

78:                                               ; preds = %73, %78
  %79 = phi i32* [ %100, %78 ], [ %75, %73 ]
  %80 = phi i32* [ %99, %78 ], [ %76, %73 ]
  %81 = load i32, i32* %79, align 4
  %82 = load i32, i32* %80, align 4
  %83 = icmp slt i32 %81, %82
  %84 = select i1 %83, i32* %79, i32* %80
  %85 = getelementptr inbounds i32, i32* %79, i64 1
  %86 = load i32, i32* %85, align 4
  %87 = load i32, i32* %84, align 4
  %88 = icmp slt i32 %86, %87
  %89 = select i1 %88, i32* %85, i32* %84
  %90 = getelementptr inbounds i32, i32* %79, i64 2
  %91 = load i32, i32* %90, align 4
  %92 = load i32, i32* %89, align 4
  %93 = icmp slt i32 %91, %92
  %94 = select i1 %93, i32* %90, i32* %89
  %95 = getelementptr inbounds i32, i32* %79, i64 3
  %96 = load i32, i32* %95, align 4
  %97 = load i32, i32* %94, align 4
  %98 = icmp slt i32 %96, %97
  %99 = select i1 %98, i32* %95, i32* %94
  %100 = getelementptr inbounds i32, i32* %79, i64 4
  %101 = icmp eq i32* %100, %8
  br i1 %101, label %102, label %78

102:                                              ; preds = %78, %73
  %103 = phi i32* [ %74, %73 ], [ %99, %78 ]
  %104 = icmp eq i32* %103, %48
  br i1 %104, label %108, label %105

105:                                              ; preds = %102
  %106 = load i32, i32* %48, align 4
  %107 = load i32, i32* %103, align 4
  store i32 %107, i32* %48, align 4
  store i32 %106, i32* %103, align 4
  br label %108

108:                                              ; preds = %105, %102, %56, %46
  %109 = getelementptr inbounds i32, i32* %48, i64 1
  %110 = icmp eq i32* %109, %42
  %111 = add i64 %47, 1
  br i1 %110, label %254, label %46

112:                                              ; preds = %39
  %113 = sdiv i64 %12, 2
  %114 = getelementptr inbounds i32, i32* %7, i64 %113
  %115 = getelementptr inbounds i32, i32* %8, i64 -1
  %116 = load i32, i32* %114, align 4
  %117 = load i32, i32* %7, align 4
  %118 = icmp slt i32 %116, %117
  %119 = load i32, i32* %115, align 4
  %120 = icmp slt i32 %119, %116
  br i1 %118, label %127, label %121

121:                                              ; preds = %112
  br i1 %120, label %122, label %133

122:                                              ; preds = %121
  store i32 %119, i32* %114, align 4
  store i32 %116, i32* %115, align 4
  %123 = load i32, i32* %114, align 4
  %124 = load i32, i32* %7, align 4
  %125 = icmp slt i32 %123, %124
  br i1 %125, label %126, label %133

126:                                              ; preds = %122
  store i32 %123, i32* %7, align 4
  store i32 %124, i32* %114, align 4
  br label %133

127:                                              ; preds = %112
  br i1 %120, label %128, label %129

128:                                              ; preds = %127
  store i32 %119, i32* %7, align 4
  store i32 %117, i32* %115, align 4
  br label %133

129:                                              ; preds = %127
  store i32 %116, i32* %7, align 4
  store i32 %117, i32* %114, align 4
  %130 = load i32, i32* %115, align 4
  %131 = icmp slt i32 %130, %117
  br i1 %131, label %132, label %133

132:                                              ; preds = %129
  store i32 %130, i32* %114, align 4
  store i32 %117, i32* %115, align 4
  br label %133

133:                                              ; preds = %121, %122, %126, %128, %129, %132
  %134 = phi i32 [ 1, %128 ], [ 0, %121 ], [ 2, %126 ], [ 1, %122 ], [ 2, %132 ], [ 1, %129 ]
  %135 = load i32, i32* %7, align 4
  %136 = load i32, i32* %114, align 4
  %137 = icmp slt i32 %135, %136
  br i1 %137, label %184, label %138

138:                                              ; preds = %133, %142
  %139 = phi i32* [ %140, %142 ], [ %115, %133 ]
  %140 = getelementptr inbounds i32, i32* %139, i64 -1
  %141 = icmp eq i32* %7, %140
  br i1 %141, label %147, label %142

142:                                              ; preds = %138
  %143 = load i32, i32* %140, align 4
  %144 = icmp slt i32 %143, %136
  br i1 %144, label %145, label %138

145:                                              ; preds = %142
  store i32 %143, i32* %7, align 4
  store i32 %135, i32* %140, align 4
  %146 = add nuw nsw i32 %134, 1
  br label %184

147:                                              ; preds = %138
  %148 = getelementptr inbounds i32, i32* %7, i64 1
  %149 = load i32, i32* %115, align 4
  %150 = icmp slt i32 %135, %149
  br i1 %150, label %162, label %151

151:                                              ; preds = %147
  %152 = icmp eq i32* %148, %115
  br i1 %152, label %254, label %153

153:                                              ; preds = %151, %159
  %154 = phi i32* [ %160, %159 ], [ %148, %151 ]
  %155 = load i32, i32* %154, align 4
  %156 = icmp slt i32 %135, %155
  br i1 %156, label %157, label %159

157:                                              ; preds = %153
  store i32 %149, i32* %154, align 4
  store i32 %155, i32* %115, align 4
  %158 = getelementptr inbounds i32, i32* %154, i64 1
  br label %162

159:                                              ; preds = %153
  %160 = getelementptr inbounds i32, i32* %154, i64 1
  %161 = icmp eq i32* %160, %115
  br i1 %161, label %254, label %153

162:                                              ; preds = %157, %147
  %163 = phi i32* [ %148, %147 ], [ %158, %157 ]
  %164 = icmp eq i32* %163, %115
  br i1 %164, label %254, label %165

165:                                              ; preds = %162, %181
  %166 = phi i32* [ %173, %181 ], [ %163, %162 ]
  %167 = phi i32* [ %176, %181 ], [ %115, %162 ]
  %168 = load i32, i32* %7, align 4
  br label %169

169:                                              ; preds = %169, %165
  %170 = phi i32* [ %166, %165 ], [ %173, %169 ]
  %171 = load i32, i32* %170, align 4
  %172 = icmp slt i32 %168, %171
  %173 = getelementptr inbounds i32, i32* %170, i64 1
  br i1 %172, label %174, label %169

174:                                              ; preds = %169, %174
  %175 = phi i32* [ %176, %174 ], [ %167, %169 ]
  %176 = getelementptr inbounds i32, i32* %175, i64 -1
  %177 = load i32, i32* %176, align 4
  %178 = icmp slt i32 %168, %177
  br i1 %178, label %174, label %179

179:                                              ; preds = %174
  %180 = icmp ult i32* %170, %176
  br i1 %180, label %181, label %182

181:                                              ; preds = %179
  store i32 %177, i32* %170, align 4
  store i32 %171, i32* %176, align 4
  br label %165

182:                                              ; preds = %179
  %183 = icmp ugt i32* %170, %1
  br i1 %183, label %254, label %250

184:                                              ; preds = %145, %133
  %185 = phi i32* [ %115, %133 ], [ %140, %145 ]
  %186 = phi i32 [ %134, %133 ], [ %146, %145 ]
  %187 = getelementptr inbounds i32, i32* %7, i64 1
  %188 = icmp ult i32* %187, %185
  br i1 %188, label %189, label %211

189:                                              ; preds = %184, %207
  %190 = phi i32* [ %199, %207 ], [ %187, %184 ]
  %191 = phi i32* [ %202, %207 ], [ %185, %184 ]
  %192 = phi i32* [ %210, %207 ], [ %114, %184 ]
  %193 = phi i32 [ %208, %207 ], [ %186, %184 ]
  %194 = load i32, i32* %192, align 4
  br label %195

195:                                              ; preds = %195, %189
  %196 = phi i32* [ %190, %189 ], [ %199, %195 ]
  %197 = load i32, i32* %196, align 4
  %198 = icmp slt i32 %197, %194
  %199 = getelementptr inbounds i32, i32* %196, i64 1
  br i1 %198, label %195, label %200

200:                                              ; preds = %195, %200
  %201 = phi i32* [ %202, %200 ], [ %191, %195 ]
  %202 = getelementptr inbounds i32, i32* %201, i64 -1
  %203 = load i32, i32* %202, align 4
  %204 = icmp slt i32 %203, %194
  br i1 %204, label %205, label %200

205:                                              ; preds = %200
  %206 = icmp ult i32* %196, %202
  br i1 %206, label %207, label %211

207:                                              ; preds = %205
  store i32 %203, i32* %196, align 4
  store i32 %197, i32* %202, align 4
  %208 = add i32 %193, 1
  %209 = icmp eq i32* %192, %196
  %210 = select i1 %209, i32* %202, i32* %192
  br label %189

211:                                              ; preds = %205, %184
  %212 = phi i32* [ %187, %184 ], [ %196, %205 ]
  %213 = phi i32* [ %114, %184 ], [ %192, %205 ]
  %214 = phi i32 [ %186, %184 ], [ %193, %205 ]
  %215 = icmp eq i32* %212, %213
  br i1 %215, label %222, label %216

216:                                              ; preds = %211
  %217 = load i32, i32* %213, align 4
  %218 = load i32, i32* %212, align 4
  %219 = icmp slt i32 %217, %218
  br i1 %219, label %220, label %222

220:                                              ; preds = %216
  store i32 %217, i32* %212, align 4
  store i32 %218, i32* %213, align 4
  %221 = add i32 %214, 1
  br label %222

222:                                              ; preds = %211, %220, %216
  %223 = phi i32 [ %221, %220 ], [ %214, %216 ], [ %214, %211 ]
  %224 = icmp eq i32* %212, %1
  br i1 %224, label %254, label %225

225:                                              ; preds = %222
  %226 = icmp eq i32 %223, 0
  br i1 %226, label %227, label %245

227:                                              ; preds = %225
  %228 = icmp ugt i32* %212, %1
  br i1 %228, label %229, label %237

229:                                              ; preds = %227, %233
  %230 = phi i32* [ %231, %233 ], [ %7, %227 ]
  %231 = getelementptr inbounds i32, i32* %230, i64 1
  %232 = icmp eq i32* %231, %212
  br i1 %232, label %254, label %233

233:                                              ; preds = %229
  %234 = load i32, i32* %231, align 4
  %235 = load i32, i32* %230, align 4
  %236 = icmp slt i32 %234, %235
  br i1 %236, label %245, label %229

237:                                              ; preds = %227, %241
  %238 = phi i32* [ %239, %241 ], [ %212, %227 ]
  %239 = getelementptr inbounds i32, i32* %238, i64 1
  %240 = icmp eq i32* %239, %8
  br i1 %240, label %254, label %241

241:                                              ; preds = %237
  %242 = load i32, i32* %239, align 4
  %243 = load i32, i32* %238, align 4
  %244 = icmp slt i32 %242, %243
  br i1 %244, label %245, label %237

245:                                              ; preds = %241, %233, %225
  %246 = icmp ugt i32* %212, %1
  %247 = getelementptr inbounds i32, i32* %212, i64 1
  %248 = select i1 %246, i32* %212, i32* %8
  %249 = select i1 %246, i32* %7, i32* %247
  br label %250

250:                                              ; preds = %245, %182
  %251 = phi i32* [ %8, %182 ], [ %248, %245 ]
  %252 = phi i32* [ %170, %182 ], [ %249, %245 ]
  %253 = icmp eq i32* %251, %1
  br i1 %253, label %254, label %6

254:                                              ; preds = %250, %6, %6, %162, %222, %182, %151, %159, %237, %229, %108, %4, %41, %38, %35, %34, %32, %28, %27, %13, %18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc double @_ZNK3jxl12_GLOBAL__N_112LossFunction7ComputeERKNS_8optimize5ArrayIdLm8EEEPS4_b(%"struct.jxl::(anonymous namespace)::LossFunction"* nocapture readonly, %"class.jxl::optimize::Array"* nocapture readonly dereferenceable(64), %"class.jxl::optimize::Array"* nocapture, i1 zeroext) unnamed_addr #0 align 2 {
  %5 = bitcast %"class.jxl::optimize::Array"* %2 to i8*
  %6 = alloca float, align 4
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 64, i1 false)
  %7 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::LossFunction", %"struct.jxl::(anonymous namespace)::LossFunction"* %0, i64 0, i32 0, i32 0, i32 0
  %8 = load %"struct.jxl::NoiseLevel"*, %"struct.jxl::NoiseLevel"** %7, align 8
  %9 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::LossFunction", %"struct.jxl::(anonymous namespace)::LossFunction"* %0, i64 0, i32 0, i32 0, i32 1
  %10 = load %"struct.jxl::NoiseLevel"*, %"struct.jxl::NoiseLevel"** %9, align 8
  %11 = icmp eq %"struct.jxl::NoiseLevel"* %8, %10
  br i1 %11, label %14, label %12

12:                                               ; preds = %4
  %13 = bitcast float* %6 to i8*
  br label %21

14:                                               ; preds = %72, %4
  %15 = phi double [ 0.000000e+00, %4 ], [ %79, %72 ]
  br i1 %3, label %116, label %16

16:                                               ; preds = %14
  %17 = bitcast %"struct.jxl::NoiseLevel"** %9 to i64*
  %18 = bitcast %"struct.jxl::(anonymous namespace)::LossFunction"* %0 to i64*
  %19 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %2, i64 0, i32 0, i64 0
  %20 = load double, double* %19, align 8
  br label %82

21:                                               ; preds = %12, %72
  %22 = phi double [ 0.000000e+00, %12 ], [ %79, %72 ]
  %23 = phi %"struct.jxl::NoiseLevel"* [ %8, %12 ], [ %80, %72 ]
  %24 = getelementptr inbounds %"struct.jxl::NoiseLevel", %"struct.jxl::NoiseLevel"* %23, i64 0, i32 0
  %25 = load float, float* %24, align 4
  %26 = getelementptr inbounds %"struct.jxl::NoiseLevel", %"struct.jxl::NoiseLevel"* %23, i64 0, i32 1
  %27 = load float, float* %26, align 4
  %28 = fmul float %27, 6.000000e+00
  %29 = fcmp ogt float %28, 0.000000e+00
  %30 = select i1 %29, float %28, float 0.000000e+00
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #7
  store float 0xFFFFFFFFE0000000, float* %6, align 4
  %31 = call float @modff(float %30, float* nonnull %6) #7
  %32 = fcmp ogt float %30, 6.000000e+00
  br i1 %32, label %37, label %33, !prof !27

33:                                               ; preds = %21
  %34 = load float, float* %6, align 4
  %35 = fptosi float %34 to i32
  %36 = zext i32 %35 to i64
  br label %38

37:                                               ; preds = %21
  store float 6.000000e+00, float* %6, align 4
  br label %38

38:                                               ; preds = %33, %37
  %39 = phi i64 [ %36, %33 ], [ 6, %37 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #7
  %40 = shl nuw i64 %39, 32
  %41 = ashr exact i64 %40, 32
  %42 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %1, i64 0, i32 0, i64 %41
  %43 = load double, double* %42, align 8
  %44 = add i64 %40, 4294967296
  %45 = ashr exact i64 %44, 32
  %46 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %1, i64 0, i32 0, i64 %45
  %47 = load double, double* %46, align 8
  %48 = fsub float 1.000000e+00, %31
  %49 = fpext float %48 to double
  %50 = fmul double %43, %49
  %51 = fpext float %31 to double
  %52 = fmul double %47, %51
  %53 = fadd double %50, %52
  %54 = fpext float %25 to double
  %55 = fsub double %53, %54
  %56 = fcmp ogt double %55, 0.000000e+00
  br i1 %56, label %57, label %66

57:                                               ; preds = %38
  %58 = fmul double %55, 1.100000e+00
  %59 = fmul double %49, 1.100000e+00
  %60 = fmul double %59, %55
  %61 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %2, i64 0, i32 0, i64 %41
  %62 = load double, double* %61, align 8
  %63 = fsub double %62, %60
  store double %63, double* %61, align 8
  %64 = fmul double %51, 1.100000e+00
  %65 = fmul double %64, %55
  br label %72

66:                                               ; preds = %38
  %67 = fmul double %55, %49
  %68 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %2, i64 0, i32 0, i64 %41
  %69 = load double, double* %68, align 8
  %70 = fsub double %69, %67
  store double %70, double* %68, align 8
  %71 = fmul double %55, %51
  br label %72

72:                                               ; preds = %66, %57
  %73 = phi double [ %71, %66 ], [ %65, %57 ]
  %74 = phi double [ %55, %66 ], [ %58, %57 ]
  %75 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %2, i64 0, i32 0, i64 %45
  %76 = load double, double* %75, align 8
  %77 = fsub double %76, %73
  store double %77, double* %75, align 8
  %78 = fmul double %55, %74
  %79 = fadd double %22, %78
  %80 = getelementptr inbounds %"struct.jxl::NoiseLevel", %"struct.jxl::NoiseLevel"* %23, i64 1
  %81 = icmp eq %"struct.jxl::NoiseLevel"* %80, %10
  br i1 %81, label %14, label %21

82:                                               ; preds = %82, %16
  %83 = phi double [ %20, %16 ], [ %113, %82 ]
  %84 = phi i64 [ 1, %16 ], [ %114, %82 ]
  %85 = phi i64 [ 0, %16 ], [ %84, %82 ]
  %86 = phi double [ %15, %16 ], [ %100, %82 ]
  %87 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %1, i64 0, i32 0, i64 %85
  %88 = load double, double* %87, align 8
  %89 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %1, i64 0, i32 0, i64 %84
  %90 = load double, double* %89, align 8
  %91 = fsub double %88, %90
  %92 = load i64, i64* %17, align 8
  %93 = load i64, i64* %18, align 8
  %94 = sub i64 %92, %93
  %95 = ashr exact i64 %94, 3
  %96 = uitofp i64 %95 to double
  %97 = fmul double %96, 5.000000e-03
  %98 = fmul double %91, %97
  %99 = fmul double %91, %98
  %100 = fadd double %86, %99
  %101 = fmul double %91, 5.000000e-03
  %102 = fmul double %101, %96
  %103 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %2, i64 0, i32 0, i64 %85
  %104 = fsub double %83, %102
  store double %104, double* %103, align 8
  %105 = load i64, i64* %17, align 8
  %106 = load i64, i64* %18, align 8
  %107 = sub i64 %105, %106
  %108 = ashr exact i64 %107, 3
  %109 = uitofp i64 %108 to double
  %110 = fmul double %101, %109
  %111 = getelementptr inbounds %"class.jxl::optimize::Array", %"class.jxl::optimize::Array"* %2, i64 0, i32 0, i64 %84
  %112 = load double, double* %111, align 8
  %113 = fadd double %112, %110
  store double %113, double* %111, align 8
  %114 = add nuw nsw i64 %84, 1
  %115 = icmp eq i64 %114, 8
  br i1 %115, label %116, label %82

116:                                              ; preds = %82, %14
  %117 = phi double [ %15, %14 ], [ %100, %82 ]
  ret double %117
}

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #10

; Function Attrs: nofree nounwind
declare float @modff(float, float* nocapture) local_unnamed_addr #10

declare void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"*, i64, i64) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { builtin nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN3jxl12_GLOBAL__N_122GetSADScoresForPatchesERKNS_6Image3IfEEmmPNS0_14NoiseHistogramE: argument 0"}
!4 = distinct !{!4, !"_ZN3jxl12_GLOBAL__N_122GetSADScoresForPatchesERKNS_6Image3IfEEmmPNS0_14NoiseHistogramE"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN3jxl12_GLOBAL__N_113GetNoiseLevelERKNS_6Image3IfEERKNSt3__16vectorIfNS5_9allocatorIfEEEEfm: argument 0"}
!7 = distinct !{!7, !"_ZN3jxl12_GLOBAL__N_113GetNoiseLevelERKNS_6Image3IfEERKNSt3__16vectorIfNS5_9allocatorIfEEEEfm"}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.unroll.disable"}
!10 = !{!11}
!11 = distinct !{!11, !12, !"_ZN3jxl8optimize41OptimizeWithScaledConjugateGradientMethodIdLm8ENS_12_GLOBAL__N_112LossFunctionEEENS0_5ArrayIT_XT0_EEERKT1_RKS6_S5_m: argument 0"}
!12 = distinct !{!12, !"_ZN3jxl8optimize41OptimizeWithScaledConjugateGradientMethodIdLm8ENS_12_GLOBAL__N_112LossFunctionEEENS0_5ArrayIT_XT0_EEERKT1_RKS6_S5_m"}
!13 = !{!14}
!14 = distinct !{!14, !15, !"_ZN3jxl8optimizeplIdLm8EEENS0_5ArrayIT_XT0_EEERKS4_S6_: argument 0"}
!15 = distinct !{!15, !"_ZN3jxl8optimizeplIdLm8EEENS0_5ArrayIT_XT0_EEERKS4_S6_"}
!16 = !{!17, !11}
!17 = distinct !{!17, !18, !"_ZN3jxl8optimizemiIdLm8EEENS0_5ArrayIT_XT0_EEERKS4_S6_: argument 0"}
!18 = distinct !{!18, !"_ZN3jxl8optimizemiIdLm8EEENS0_5ArrayIT_XT0_EEERKS4_S6_"}
!19 = !{!20}
!20 = distinct !{!20, !21, !"_ZN3jxl8optimizeplIdLm8EEENS0_5ArrayIT_XT0_EEERKS4_S6_: argument 0"}
!21 = distinct !{!21, !"_ZN3jxl8optimizeplIdLm8EEENS0_5ArrayIT_XT0_EEERKS4_S6_"}
!22 = !{!23}
!23 = distinct !{!23, !24, !"_ZN3jxl13HalfRangeMode30CenterOfIntervalWithMaxDensityEPKjiii: argument 0"}
!24 = distinct !{!24, !"_ZN3jxl13HalfRangeMode30CenterOfIntervalWithMaxDensityEPKjiii"}
!25 = distinct !{!25, !9}
!26 = distinct !{!26, !9}
!27 = !{!"branch_weights", i32 1, i32 2000}
