; ModuleID = '../../third_party/ffmpeg/libavcodec/libopusdec.c'
source_filename = "../../third_party/ffmpeg/libavcodec/libopusdec.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AVClass = type { i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass* (%struct.AVClass*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)*, %struct.AVClass* (i8**)* }
%struct.AVOption = type { i8*, i8*, i32, i32, %union.anon, double, double, i32, i8* }
%union.anon = type { i64 }
%struct.AVOptionRanges = type { %struct.AVOptionRange**, i32, i32 }
%struct.AVOptionRange = type { i8*, double, double, double, double, i32 }
%struct.AVCodec = type { i8*, i8*, i32, i32, i32, %struct.AVRational*, i32*, i32*, i32*, i64*, i8, %struct.AVClass*, %struct.AVProfile*, i8*, i32, %struct.AVCodec*, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)*, %struct.AVCodecDefault*, void (%struct.AVCodec*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)*, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, void (%struct.AVCodecContext*)*, i32, i8*, %struct.AVCodecHWConfigInternal**, i32* }
%struct.AVRational = type { i32, i32 }
%struct.AVProfile = type { i32, i8* }
%struct.AVCodecContext = type { %struct.AVClass*, i32, i32, %struct.AVCodec*, i32, i32, i8*, %struct.AVCodecInternal*, i8*, i64, i32, i32, i32, i32, i32, i8*, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, void (%struct.AVCodecContext*, %struct.AVFrame*, i32*, i32, i32, i32)*, i32 (%struct.AVCodecContext*, i32*)*, i32, float, i32, float, i32, i32, float, float, float, float, float, float, float, i32, i32, i32*, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16*, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*, i32)*, i32, float, float, i32, i32, i32, i32, i32, %struct.RcOverride*, i64, i64, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, void (%struct.AVCodecContext*, i8*, i32, i32)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i32, i32, i64, %struct.AVHWAccel*, i8*, [8 x i64], i32, i32, i32, i32, i32, %struct.AVFrame*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*)*, i8*, i32*, i32, i32)*, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*, i32, i32)*, i8*, i32*, i32)*, i32, i32, i32, i32, i32, i32, i8*, i32, i64, i32, i32, %struct.AVRational, i32, %struct.AVRational, %struct.AVCodecDescriptor*, i64, i64, i64, i64, i8*, i32, i32, i32, i32, i16*, i8*, i8*, i32, %struct.AVPacketSideData*, i32, %struct.AVBufferRef*, i32, i32, i64, %struct.AVBufferRef*, i32, i32, i32, i32, i64, i32 }
%struct.AVCodecInternal = type { i32, i32, %struct.AVFrame*, %struct.AVBufferRef*, i8*, %struct.DecodeSimpleContext, %struct.AVBSFContext*, %struct.AVPacket*, %struct.AVFifoBuffer*, i8*, i32, i8*, %struct.EncodeSimpleContext, i32, i8*, i32, %struct.AVPacket*, %struct.AVFrame*, i32, i32, i64, i64, %struct.AVFrame*, %struct.AVPacket*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 }
%struct.DecodeSimpleContext = type { %struct.AVPacket* }
%struct.AVBSFContext = type { %struct.AVClass*, %struct.AVBitStreamFilter*, %struct.AVBSFInternal*, i8*, %struct.AVCodecParameters*, %struct.AVCodecParameters*, %struct.AVRational, %struct.AVRational }
%struct.AVBitStreamFilter = type { i8*, i32*, %struct.AVClass*, i32, i32 (%struct.AVBSFContext*)*, i32 (%struct.AVBSFContext*, %struct.AVPacket*)*, void (%struct.AVBSFContext*)*, void (%struct.AVBSFContext*)* }
%struct.AVBSFInternal = type opaque
%struct.AVCodecParameters = type { i32, i32, i32, i8*, i32, i32, i64, i32, i32, i32, i32, i32, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVFifoBuffer = type { i8*, i8*, i8*, i8*, i32, i32 }
%struct.EncodeSimpleContext = type { %struct.AVFrame* }
%struct.AVPacket = type { %struct.AVBufferRef*, i64, i64, i8*, i32, i32, i32, %struct.AVPacketSideData*, i32, i64, i64, i64 }
%struct.RcOverride = type { i32, i32, i32, float }
%struct.AVHWAccel = type { i8*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*, i32, i8*, i32)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*)*, i32, void (%struct.MpegEncContext*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*)*, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVBufferRef*)* }
%struct.MpegEncContext = type opaque
%struct.AVFrame = type { [8 x i8*], [8 x i32], i8**, i32, i32, i32, i32, i32, i32, %struct.AVRational, i64, i64, i64, i32, i32, i32, i8*, [8 x i64], i32, i32, i32, i32, i64, i32, i64, [8 x %struct.AVBufferRef*], %struct.AVBufferRef**, i32, %struct.AVFrameSideData**, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, %struct.AVDictionary*, i32, i32, i32, i8*, i32, i32, %struct.AVBufferRef*, %struct.AVBufferRef*, %struct.AVBufferRef*, i64, i64, i64, i64, %struct.AVBufferRef* }
%struct.AVFrameSideData = type { i32, i8*, i32, %struct.AVDictionary*, %struct.AVBufferRef* }
%struct.AVDictionary = type opaque
%struct.AVCodecDescriptor = type { i32, i32, i8*, i8*, i32, i8**, %struct.AVProfile* }
%struct.AVPacketSideData = type { i8*, i32, i32 }
%struct.AVBufferRef = type { %struct.AVBuffer*, i8*, i32 }
%struct.AVBuffer = type opaque
%struct.AVCodecDefault = type { i8*, i8* }
%struct.AVSubtitle = type { i16, i32, i32, i32, %struct.AVSubtitleRect**, i64 }
%struct.AVSubtitleRect = type { i32, i32, i32, i32, i32, %struct.AVPicture, [4 x i8*], [4 x i32], i32, i8*, i8*, i32 }
%struct.AVPicture = type { [8 x i8*], [8 x i32] }
%struct.AVCodecHWConfigInternal = type opaque
%struct.libopus_context = type { %struct.AVClass*, %struct.OpusMSDecoder*, i32, i32 }
%struct.OpusMSDecoder = type opaque

@.str = private unnamed_addr constant [8 x i8] c"libopus\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c"libopus Opus\00", align 1
@.compoundliteral = internal constant [3 x i32] [i32 3, i32 1, i32 -1], align 4
@libopusdec_class = internal constant %struct.AVClass { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i8* (i8*)* @av_default_item_name, %struct.AVOption* getelementptr inbounds ([2 x %struct.AVOption], [2 x %struct.AVOption]* @libopusdec_options, i32 0, i32 0), i32 3687524, i32 0, i32 0, i8* (i8*, i8*)* null, %struct.AVClass* (%struct.AVClass*)* null, i32 0, i32 (i8*)* null, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)* null, %struct.AVClass* (i8**)* null }, align 8
@ff_libopus_decoder = hidden local_unnamed_addr global %struct.AVCodec { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i32 0, i32 0), i32 1, i32 86076, i32 1026, %struct.AVRational* null, i32* null, i32* null, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.compoundliteral, i32 0, i32 0), i64* null, i8 0, %struct.AVClass* @libopusdec_class, %struct.AVProfile* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i32 24, %struct.AVCodec* null, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)* null, %struct.AVCodecDefault* null, void (%struct.AVCodec*)* null, i32 (%struct.AVCodecContext*)* @libopus_decode_init, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)* null, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)* null, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)* @libopus_decode, i32 (%struct.AVCodecContext*)* @libopus_decode_close, i32 (%struct.AVCodecContext*, %struct.AVPacket*)* null, i32 (%struct.AVCodecContext*, %struct.AVFrame*)* null, void (%struct.AVCodecContext*)* @libopus_flush, i32 2, i8* null, %struct.AVCodecHWConfigInternal** null, i32* null }, align 8
@.str.2 = private unnamed_addr constant [11 x i8] c"libopusdec\00", align 1
@libopusdec_options = internal constant [2 x %struct.AVOption] [%struct.AVOption { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.4, i32 0, i32 0), i32 20, i32 18, %union.anon { i64 1 }, double 0.000000e+00, double 1.000000e+00, i32 10, i8* null }, %struct.AVOption zeroinitializer], align 16
@.str.3 = private unnamed_addr constant [16 x i8] c"apply_phase_inv\00", align 1
@.str.4 = private unnamed_addr constant [39 x i8] c"Apply intensity stereo phase inversion\00", align 1
@.str.5 = private unnamed_addr constant [53 x i8] c"Invalid number of channels %d, defaulting to stereo\0A\00", align 1
@.str.6 = private unnamed_addr constant [31 x i8] c"Inconsistent channel mapping.\0A\00", align 1
@.str.7 = private unnamed_addr constant [37 x i8] c"No channel mapping for %d channels.\0A\00", align 1
@ff_vorbis_channel_layouts = external local_unnamed_addr constant [9 x i64], align 16
@ff_vorbis_channel_layout_offsets = external local_unnamed_addr constant [8 x [8 x i8]], align 16
@.str.8 = private unnamed_addr constant [133 x i8] c"Channel mapping 2 is only specified for channel counts which can be written as (n + 1)^2 or (n + 2)^2 + 2 for nonnegative integer n\0A\00", align 1
@.str.9 = private unnamed_addr constant [19 x i8] c"Too many channels\0A\00", align 1
@.str.10 = private unnamed_addr constant [30 x i8] c"Unable to create decoder: %s\0A\00", align 1
@.str.11 = private unnamed_addr constant [24 x i8] c"Failed to set gain: %s\0A\00", align 1
@.str.12 = private unnamed_addr constant [35 x i8] c"Unable to set phase inversion: %s\0A\00", align 1
@ff_sqrt_tab = external local_unnamed_addr constant [256 x i8], align 16
@ff_inverse = external local_unnamed_addr constant [257 x i32], align 16
@.str.13 = private unnamed_addr constant [20 x i8] c"Decoding error: %s\0A\00", align 1

; Function Attrs: cold nounwind optsize ssp uwtable
define internal i32 @libopus_decode_init(%struct.AVCodecContext*) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i64, align 8
  %4 = bitcast i64* %3 to [8 x i8]*
  %5 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 6
  %6 = bitcast i8** %5 to %struct.libopus_context**
  %7 = load %struct.libopus_context*, %struct.libopus_context** %6, align 8
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  store i32 -1431655766, i32* %2, align 4
  %9 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #5
  store i64 256, i64* %3, align 8
  %10 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 16
  %11 = load i32, i32* %10, align 8
  %12 = icmp sgt i32 %11, 9
  br i1 %12, label %18, label %13

13:                                               ; preds = %1
  %14 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 83
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 1
  %17 = select i1 %16, i32 1, i32 2
  store i32 %17, i32* %14, align 4
  br label %29

18:                                               ; preds = %1
  %19 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 15
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 9
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 83
  store i32 %23, i32* %24, align 4
  %25 = icmp eq i8 %22, 0
  br i1 %25, label %26, label %29

26:                                               ; preds = %18
  %27 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %27, i32 24, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.5, i64 0, i64 0), i32 %23) #5
  store i32 2, i32* %24, align 4
  %28 = load i32, i32* %10, align 8
  br label %29

29:                                               ; preds = %13, %26, %18
  %30 = phi i32 [ %17, %13 ], [ 2, %26 ], [ %23, %18 ]
  %31 = phi i32 [ %11, %13 ], [ %28, %26 ], [ %11, %18 ]
  %32 = phi i32* [ %14, %13 ], [ %24, %26 ], [ %24, %18 ]
  %33 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 82
  store i32 48000, i32* %33, align 8
  %34 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 92
  %35 = load i32, i32* %34, align 4
  %36 = icmp eq i32 %35, 3
  %37 = select i1 %36, i32 3, i32 1
  %38 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 84
  store i32 %37, i32* %38, align 8
  %39 = icmp sgt i32 %31, 18
  br i1 %39, label %40, label %58

40:                                               ; preds = %29
  %41 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 15
  %42 = load i8*, i8** %41, align 8
  %43 = getelementptr inbounds i8, i8* %42, i64 10
  %44 = bitcast i8* %43 to i16*
  %45 = load i16, i16* %44, align 1
  %46 = zext i16 %45 to i32
  %47 = getelementptr inbounds %struct.libopus_context, %struct.libopus_context* %7, i64 0, i32 2
  store i32 %46, i32* %47, align 8
  %48 = load i8*, i8** %41, align 8
  %49 = getelementptr inbounds i8, i8* %48, i64 16
  %50 = bitcast i8* %49 to i16*
  %51 = load i16, i16* %50, align 1
  %52 = sext i16 %51 to i32
  %53 = getelementptr inbounds i8, i8* %48, i64 18
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i32
  %56 = load i32, i32* %10, align 8
  %57 = load i32, i32* %32, align 4
  br label %58

58:                                               ; preds = %40, %29
  %59 = phi i32 [ %57, %40 ], [ %30, %29 ]
  %60 = phi i32 [ %56, %40 ], [ %31, %29 ]
  %61 = phi i32 [ %55, %40 ], [ 0, %29 ]
  %62 = phi i32 [ %52, %40 ], [ 0, %29 ]
  %63 = add nsw i32 %59, 21
  %64 = icmp slt i32 %60, %63
  br i1 %64, label %79, label %65

65:                                               ; preds = %58
  %66 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 15
  %67 = load i8*, i8** %66, align 8
  %68 = getelementptr inbounds i8, i8* %67, i64 19
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = getelementptr inbounds i8, i8* %67, i64 20
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  %74 = add nuw nsw i32 %73, %70
  %75 = icmp eq i32 %74, %59
  br i1 %75, label %88, label %76

76:                                               ; preds = %65
  %77 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %77, i32 24, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0)) #5
  %78 = load i8*, i8** %66, align 8
  br label %88

79:                                               ; preds = %58
  %80 = icmp sgt i32 %59, 2
  %81 = icmp ne i32 %61, 0
  %82 = or i1 %81, %80
  br i1 %82, label %83, label %85

83:                                               ; preds = %79
  %84 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %84, i32 16, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.7, i64 0, i64 0), i32 %59) #5
  br label %245

85:                                               ; preds = %79
  %86 = icmp sgt i32 %59, 1
  %87 = zext i1 %86 to i32
  br label %200

88:                                               ; preds = %76, %65
  %89 = phi i8* [ %78, %76 ], [ %67, %65 ]
  %90 = getelementptr inbounds i8, i8* %89, i64 21
  %91 = trunc i32 %61 to i8
  switch i8 %91, label %92 [
    i8 1, label %94
    i8 2, label %118
  ]

92:                                               ; preds = %88
  %93 = load i32, i32* %32, align 4
  br label %200

94:                                               ; preds = %88
  %95 = load i32, i32* %32, align 4
  %96 = icmp sgt i32 %95, 8
  br i1 %96, label %97, label %99

97:                                               ; preds = %94
  %98 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 89
  store i64 0, i64* %98, align 8
  br label %206

99:                                               ; preds = %94
  %100 = add nsw i32 %95, -1
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds [9 x i64], [9 x i64]* @ff_vorbis_channel_layouts, i64 0, i64 %101
  %103 = load i64, i64* %102, align 8
  %104 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 89
  store i64 %103, i64* %104, align 8
  %105 = icmp sgt i32 %95, 2
  br i1 %105, label %106, label %206

106:                                              ; preds = %99
  %107 = zext i32 %95 to i64
  br label %108

108:                                              ; preds = %108, %106
  %109 = phi i64 [ 0, %106 ], [ %116, %108 ]
  %110 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* @ff_vorbis_channel_layout_offsets, i64 0, i64 %101, i64 %109
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i64
  %113 = getelementptr inbounds i8, i8* %90, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 %109
  store i8 %114, i8* %115, align 1
  %116 = add nuw nsw i64 %109, 1
  %117 = icmp eq i64 %116, %107
  br i1 %117, label %206, label %108

118:                                              ; preds = %88
  %119 = load i32, i32* %32, align 4
  %120 = icmp ult i32 %119, 255
  br i1 %120, label %121, label %129

121:                                              ; preds = %118
  %122 = add nuw nsw i32 %119, 1
  %123 = zext i32 %122 to i64
  %124 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_sqrt_tab, i64 0, i64 %123
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i32
  %127 = add nsw i32 %126, -1
  %128 = ashr i32 %127, 4
  br label %185

129:                                              ; preds = %118
  %130 = icmp ult i32 %119, 4096
  br i1 %130, label %131, label %138

131:                                              ; preds = %129
  %132 = lshr i32 %119, 4
  %133 = zext i32 %132 to i64
  %134 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_sqrt_tab, i64 0, i64 %133
  %135 = load i8, i8* %134, align 1
  %136 = lshr i8 %135, 2
  %137 = zext i8 %136 to i32
  br label %179

138:                                              ; preds = %129
  %139 = icmp ult i32 %119, 16384
  br i1 %139, label %140, label %147

140:                                              ; preds = %138
  %141 = lshr i32 %119, 6
  %142 = zext i32 %141 to i64
  %143 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_sqrt_tab, i64 0, i64 %142
  %144 = load i8, i8* %143, align 1
  %145 = lshr i8 %144, 1
  %146 = zext i8 %145 to i32
  br label %179

147:                                              ; preds = %138
  %148 = icmp ult i32 %119, 65536
  br i1 %148, label %149, label %155

149:                                              ; preds = %147
  %150 = lshr i32 %119, 8
  %151 = zext i32 %150 to i64
  %152 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_sqrt_tab, i64 0, i64 %151
  %153 = load i8, i8* %152, align 1
  %154 = zext i8 %153 to i32
  br label %179

155:                                              ; preds = %147
  %156 = lshr i32 %119, 16
  %157 = or i32 %156, 1
  %158 = tail call i32 @llvm.ctlz.i32(i32 %157, i1 true) #5, !range !2
  %159 = lshr i32 %158, 1
  %160 = xor i32 %159, 15
  %161 = add nuw nsw i32 %160, 2
  %162 = lshr i32 %119, %161
  %163 = or i32 %160, 8
  %164 = lshr i32 %162, %163
  %165 = zext i32 %164 to i64
  %166 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_sqrt_tab, i64 0, i64 %165
  %167 = load i8, i8* %166, align 1
  %168 = zext i8 %167 to i32
  %169 = zext i32 %162 to i64
  %170 = zext i8 %167 to i64
  %171 = getelementptr inbounds [257 x i32], [257 x i32]* @ff_inverse, i64 0, i64 %170
  %172 = load i32, i32* %171, align 4
  %173 = zext i32 %172 to i64
  %174 = mul nuw nsw i64 %173, %169
  %175 = lshr i64 %174, 32
  %176 = trunc i64 %175 to i32
  %177 = shl i32 %168, %160
  %178 = add nuw i32 %177, %176
  br label %179

179:                                              ; preds = %155, %149, %140, %131
  %180 = phi i32 [ %137, %131 ], [ %146, %140 ], [ %154, %149 ], [ %178, %155 ]
  %181 = mul i32 %180, %180
  %182 = icmp ugt i32 %181, %119
  %183 = zext i1 %182 to i32
  %184 = sub i32 %180, %183
  br label %185

185:                                              ; preds = %121, %179
  %186 = phi i32 [ %128, %121 ], [ %184, %179 ]
  %187 = mul nsw i32 %186, %186
  %188 = icmp eq i32 %119, %187
  %189 = add nuw nsw i32 %187, 2
  %190 = icmp eq i32 %119, %189
  %191 = or i1 %188, %190
  br i1 %191, label %194, label %192

192:                                              ; preds = %185
  %193 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %193, i32 16, i8* getelementptr inbounds ([133 x i8], [133 x i8]* @.str.8, i64 0, i64 0)) #5
  br label %245

194:                                              ; preds = %185
  %195 = icmp sgt i32 %119, 227
  br i1 %195, label %196, label %198

196:                                              ; preds = %194
  %197 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %197, i32 16, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i64 0, i64 0)) #5
  br label %245

198:                                              ; preds = %194
  %199 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 89
  store i64 0, i64* %199, align 8
  br label %206

200:                                              ; preds = %92, %85
  %201 = phi i32 [ %59, %85 ], [ %93, %92 ]
  %202 = phi i8* [ %9, %85 ], [ %90, %92 ]
  %203 = phi i32 [ %87, %85 ], [ %73, %92 ]
  %204 = phi i32 [ 1, %85 ], [ %70, %92 ]
  %205 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 89
  store i64 0, i64* %205, align 8
  br label %206

206:                                              ; preds = %108, %97, %198, %200, %99
  %207 = phi i32 [ %95, %99 ], [ %119, %198 ], [ %201, %200 ], [ %95, %97 ], [ %95, %108 ]
  %208 = phi i32 [ %73, %99 ], [ %73, %198 ], [ %203, %200 ], [ %73, %97 ], [ %73, %108 ]
  %209 = phi i32 [ %70, %99 ], [ %70, %198 ], [ %204, %200 ], [ %70, %97 ], [ %70, %108 ]
  %210 = phi i8* [ %90, %99 ], [ %90, %198 ], [ %202, %200 ], [ %90, %97 ], [ %9, %108 ]
  %211 = load i32, i32* %33, align 8
  %212 = call %struct.OpusMSDecoder* @opus_multistream_decoder_create(i32 %211, i32 %207, i32 %209, i32 %208, i8* %210, i32* nonnull %2) #5
  %213 = getelementptr inbounds %struct.libopus_context, %struct.libopus_context* %7, i64 0, i32 1
  store %struct.OpusMSDecoder* %212, %struct.OpusMSDecoder** %213, align 8
  %214 = icmp eq %struct.OpusMSDecoder* %212, null
  br i1 %214, label %215, label %221

215:                                              ; preds = %206
  %216 = bitcast %struct.AVCodecContext* %0 to i8*
  %217 = load i32, i32* %2, align 4
  %218 = call i8* @opus_strerror(i32 %217) #5
  call void (i8*, i32, i8*, ...) @av_log(i8* %216, i32 16, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.10, i64 0, i64 0), i8* %218) #5
  %219 = load i32, i32* %2, align 4
  %220 = call i32 @ff_opus_error_to_averror(i32 %219) #5
  br label %245

221:                                              ; preds = %206
  %222 = call i32 (%struct.OpusMSDecoder*, i32, ...) @opus_multistream_decoder_ctl(%struct.OpusMSDecoder* nonnull %212, i32 4034, i32 %62) #5
  store i32 %222, i32* %2, align 4
  %223 = icmp eq i32 %222, 0
  br i1 %223, label %227, label %224

224:                                              ; preds = %221
  %225 = bitcast %struct.AVCodecContext* %0 to i8*
  %226 = call i8* @opus_strerror(i32 %222) #5
  call void (i8*, i32, i8*, ...) @av_log(i8* %225, i32 24, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.11, i64 0, i64 0), i8* %226) #5
  br label %227

227:                                              ; preds = %221, %224
  %228 = load %struct.OpusMSDecoder*, %struct.OpusMSDecoder** %213, align 8
  %229 = getelementptr inbounds %struct.libopus_context, %struct.libopus_context* %7, i64 0, i32 3
  %230 = load i32, i32* %229, align 4
  %231 = icmp eq i32 %230, 0
  %232 = zext i1 %231 to i32
  %233 = call i32 (%struct.OpusMSDecoder*, i32, ...) @opus_multistream_decoder_ctl(%struct.OpusMSDecoder* %228, i32 4046, i32 %232) #5
  store i32 %233, i32* %2, align 4
  %234 = icmp eq i32 %233, 0
  br i1 %234, label %238, label %235

235:                                              ; preds = %227
  %236 = bitcast %struct.AVCodecContext* %0 to i8*
  %237 = call i8* @opus_strerror(i32 %233) #5
  call void (i8*, i32, i8*, ...) @av_log(i8* %236, i32 24, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.12, i64 0, i64 0), i8* %237) #5
  br label %238

238:                                              ; preds = %227, %235
  %239 = getelementptr inbounds %struct.libopus_context, %struct.libopus_context* %7, i64 0, i32 2
  %240 = load i32, i32* %239, align 8
  %241 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 7
  %242 = load %struct.AVCodecInternal*, %struct.AVCodecInternal** %241, align 8
  %243 = getelementptr inbounds %struct.AVCodecInternal, %struct.AVCodecInternal* %242, i64 0, i32 13
  store i32 %240, i32* %243, align 8
  %244 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 19
  store i32 %240, i32* %244, align 8
  br label %245

245:                                              ; preds = %196, %192, %238, %215, %83
  %246 = phi i32 [ 0, %238 ], [ %220, %215 ], [ -22, %83 ], [ -1094995529, %192 ], [ -1094995529, %196 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  ret i32 %246
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @libopus_decode(%struct.AVCodecContext*, i8*, i32* nocapture, %struct.AVPacket* nocapture readonly) #1 {
  %5 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 6
  %6 = bitcast i8** %5 to %struct.libopus_context**
  %7 = load %struct.libopus_context*, %struct.libopus_context** %6, align 8
  %8 = bitcast i8* %1 to %struct.AVFrame*
  %9 = getelementptr inbounds i8, i8* %1, i64 112
  %10 = bitcast i8* %9 to i32*
  store i32 5760, i32* %10, align 8
  %11 = tail call i32 @ff_get_buffer(%struct.AVCodecContext* %0, %struct.AVFrame* %8, i32 0) #5
  %12 = icmp slt i32 %11, 0
  br i1 %12, label %42, label %13

13:                                               ; preds = %4
  %14 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 84
  %15 = load i32, i32* %14, align 8
  %16 = icmp eq i32 %15, 1
  %17 = getelementptr inbounds %struct.libopus_context, %struct.libopus_context* %7, i64 0, i32 1
  %18 = load %struct.OpusMSDecoder*, %struct.OpusMSDecoder** %17, align 8
  %19 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 3
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 4
  %22 = load i32, i32* %21, align 8
  %23 = bitcast i8* %1 to i8**
  %24 = load i8*, i8** %23, align 8
  br i1 %16, label %25, label %29

25:                                               ; preds = %13
  %26 = bitcast i8* %24 to i16*
  %27 = load i32, i32* %10, align 8
  %28 = tail call i32 @opus_multistream_decode(%struct.OpusMSDecoder* %18, i8* %20, i32 %22, i16* %26, i32 %27, i32 0) #5
  br label %33

29:                                               ; preds = %13
  %30 = bitcast i8* %24 to float*
  %31 = load i32, i32* %10, align 8
  %32 = tail call i32 @opus_multistream_decode_float(%struct.OpusMSDecoder* %18, i8* %20, i32 %22, float* %30, i32 %31, i32 0) #5
  br label %33

33:                                               ; preds = %29, %25
  %34 = phi i32 [ %28, %25 ], [ %32, %29 ]
  %35 = icmp slt i32 %34, 0
  br i1 %35, label %36, label %40

36:                                               ; preds = %33
  %37 = bitcast %struct.AVCodecContext* %0 to i8*
  %38 = tail call i8* @opus_strerror(i32 %34) #5
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %37, i32 16, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.13, i64 0, i64 0), i8* %38) #5
  %39 = tail call i32 @ff_opus_error_to_averror(i32 %34) #5
  br label %42

40:                                               ; preds = %33
  store i32 %34, i32* %10, align 8
  store i32 1, i32* %2, align 4
  %41 = load i32, i32* %21, align 8
  br label %42

42:                                               ; preds = %4, %40, %36
  %43 = phi i32 [ %39, %36 ], [ %41, %40 ], [ %11, %4 ]
  ret i32 %43
}

; Function Attrs: cold nounwind optsize ssp uwtable
define internal i32 @libopus_decode_close(%struct.AVCodecContext* nocapture readonly) #0 {
  %2 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 6
  %3 = bitcast i8** %2 to %struct.libopus_context**
  %4 = load %struct.libopus_context*, %struct.libopus_context** %3, align 8
  %5 = getelementptr inbounds %struct.libopus_context, %struct.libopus_context* %4, i64 0, i32 1
  %6 = load %struct.OpusMSDecoder*, %struct.OpusMSDecoder** %5, align 8
  %7 = icmp eq %struct.OpusMSDecoder* %6, null
  br i1 %7, label %9, label %8

8:                                                ; preds = %1
  tail call void @opus_multistream_decoder_destroy(%struct.OpusMSDecoder* nonnull %6) #5
  store %struct.OpusMSDecoder* null, %struct.OpusMSDecoder** %5, align 8
  br label %9

9:                                                ; preds = %1, %8
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal void @libopus_flush(%struct.AVCodecContext* nocapture readonly) #1 {
  %2 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 6
  %3 = bitcast i8** %2 to %struct.libopus_context**
  %4 = load %struct.libopus_context*, %struct.libopus_context** %3, align 8
  %5 = getelementptr inbounds %struct.libopus_context, %struct.libopus_context* %4, i64 0, i32 1
  %6 = load %struct.OpusMSDecoder*, %struct.OpusMSDecoder** %5, align 8
  %7 = tail call i32 (%struct.OpusMSDecoder*, i32, ...) @opus_multistream_decoder_ctl(%struct.OpusMSDecoder* %6, i32 4028) #5
  %8 = getelementptr inbounds %struct.libopus_context, %struct.libopus_context* %4, i64 0, i32 2
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 7
  %11 = load %struct.AVCodecInternal*, %struct.AVCodecInternal** %10, align 8
  %12 = getelementptr inbounds %struct.AVCodecInternal, %struct.AVCodecInternal* %11, i64 0, i32 13
  store i32 %9, i32* %12, align 8
  ret void
}

declare i8* @av_default_item_name(i8*) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare void @av_log(i8*, i32, i8*, ...) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

declare %struct.OpusMSDecoder* @opus_multistream_decoder_create(i32, i32, i32, i32, i8*, i32*) local_unnamed_addr #2

declare i8* @opus_strerror(i32) local_unnamed_addr #2

declare i32 @ff_opus_error_to_averror(i32) local_unnamed_addr #2

declare i32 @opus_multistream_decoder_ctl(%struct.OpusMSDecoder*, i32, ...) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #4

declare i32 @ff_get_buffer(%struct.AVCodecContext*, %struct.AVFrame*, i32) local_unnamed_addr #2

declare i32 @opus_multistream_decode(%struct.OpusMSDecoder*, i8*, i32, i16*, i32, i32) local_unnamed_addr #2

declare i32 @opus_multistream_decode_float(%struct.OpusMSDecoder*, i8*, i32, float*, i32, i32) local_unnamed_addr #2

declare void @opus_multistream_decoder_destroy(%struct.OpusMSDecoder*) local_unnamed_addr #2

attributes #0 = { cold nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 16, i32 32}
