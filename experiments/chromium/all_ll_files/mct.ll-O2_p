; ModuleID = '../../third_party/pdfium/third_party/libopenjpeg20/mct.c'
source_filename = "../../third_party/pdfium/third_party/libopenjpeg20/mct.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

@opj_mct_norms = internal constant [3 x double] [double 1.732000e+00, double 8.292000e-01, double 8.292000e-01], align 16
@opj_mct_norms_real = internal constant [3 x double] [double 1.732000e+00, double 1.805000e+00, double 1.573000e+00], align 16

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden double* @opj_mct_get_mct_norms() local_unnamed_addr #0 {
  ret double* getelementptr inbounds ([3 x double], [3 x double]* @opj_mct_norms, i64 0, i64 0)
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden double* @opj_mct_get_mct_norms_real() local_unnamed_addr #0 {
  ret double* getelementptr inbounds ([3 x double], [3 x double]* @opj_mct_norms_real, i64 0, i64 0)
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @opj_mct_encode(i32* noalias nocapture, i32* noalias nocapture, i32* noalias nocapture, i64) local_unnamed_addr #1 {
  %5 = and i64 %3, 4294967292
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %36, label %7

7:                                                ; preds = %4
  %8 = add nsw i64 %5, -1
  %9 = lshr i64 %8, 2
  %10 = add nuw nsw i64 %9, 1
  %11 = and i64 %10, 1
  %12 = icmp eq i64 %9, 0
  br i1 %12, label %15, label %13

13:                                               ; preds = %7
  %14 = sub nuw nsw i64 %10, %11
  br label %72

15:                                               ; preds = %72, %7
  %16 = phi i64 [ undef, %7 ], [ %106, %72 ]
  %17 = phi i64 [ 0, %7 ], [ %106, %72 ]
  %18 = icmp eq i64 %11, 0
  br i1 %18, label %36, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds i32, i32* %0, i64 %17
  %21 = bitcast i32* %20 to <4 x i32>*
  %22 = load <4 x i32>, <4 x i32>* %21, align 16
  %23 = getelementptr inbounds i32, i32* %1, i64 %17
  %24 = bitcast i32* %23 to <4 x i32>*
  %25 = load <4 x i32>, <4 x i32>* %24, align 16
  %26 = getelementptr inbounds i32, i32* %2, i64 %17
  %27 = bitcast i32* %26 to <4 x i32>*
  %28 = load <4 x i32>, <4 x i32>* %27, align 16
  %29 = shl <4 x i32> %25, <i32 1, i32 1, i32 1, i32 1>
  %30 = add <4 x i32> %29, %22
  %31 = add <4 x i32> %30, %28
  %32 = ashr <4 x i32> %31, <i32 2, i32 2, i32 2, i32 2>
  %33 = sub <4 x i32> %28, %25
  %34 = sub <4 x i32> %22, %25
  store <4 x i32> %32, <4 x i32>* %21, align 16
  store <4 x i32> %33, <4 x i32>* %24, align 16
  store <4 x i32> %34, <4 x i32>* %27, align 16
  %35 = add nuw nsw i64 %17, 4
  br label %36

36:                                               ; preds = %19, %15, %4
  %37 = phi i64 [ 0, %4 ], [ %16, %15 ], [ %35, %19 ]
  %38 = icmp ult i64 %37, %3
  br i1 %38, label %39, label %125

39:                                               ; preds = %36
  %40 = sub i64 %3, %37
  %41 = icmp ult i64 %40, 4
  br i1 %41, label %42, label %44

42:                                               ; preds = %70, %39
  %43 = phi i64 [ %37, %39 ], [ %46, %70 ]
  br label %109

44:                                               ; preds = %39
  %45 = and i64 %40, -4
  %46 = add i64 %37, %45
  br label %47

47:                                               ; preds = %47, %44
  %48 = phi i64 [ 0, %44 ], [ %68, %47 ]
  %49 = add i64 %37, %48
  %50 = getelementptr inbounds i32, i32* %0, i64 %49
  %51 = bitcast i32* %50 to <4 x i32>*
  %52 = load <4 x i32>, <4 x i32>* %51, align 4
  %53 = getelementptr inbounds i32, i32* %1, i64 %49
  %54 = bitcast i32* %53 to <4 x i32>*
  %55 = load <4 x i32>, <4 x i32>* %54, align 4
  %56 = getelementptr inbounds i32, i32* %2, i64 %49
  %57 = bitcast i32* %56 to <4 x i32>*
  %58 = load <4 x i32>, <4 x i32>* %57, align 4
  %59 = shl <4 x i32> %55, <i32 1, i32 1, i32 1, i32 1>
  %60 = add nsw <4 x i32> %59, %52
  %61 = add nsw <4 x i32> %60, %58
  %62 = ashr <4 x i32> %61, <i32 2, i32 2, i32 2, i32 2>
  %63 = sub nsw <4 x i32> %58, %55
  %64 = sub nsw <4 x i32> %52, %55
  %65 = bitcast i32* %50 to <4 x i32>*
  store <4 x i32> %62, <4 x i32>* %65, align 4
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %63, <4 x i32>* %66, align 4
  %67 = bitcast i32* %56 to <4 x i32>*
  store <4 x i32> %64, <4 x i32>* %67, align 4
  %68 = add i64 %48, 4
  %69 = icmp eq i64 %68, %45
  br i1 %69, label %70, label %47, !llvm.loop !2

70:                                               ; preds = %47
  %71 = icmp eq i64 %40, %45
  br i1 %71, label %125, label %42

72:                                               ; preds = %72, %13
  %73 = phi i64 [ 0, %13 ], [ %106, %72 ]
  %74 = phi i64 [ %14, %13 ], [ %107, %72 ]
  %75 = getelementptr inbounds i32, i32* %0, i64 %73
  %76 = bitcast i32* %75 to <4 x i32>*
  %77 = load <4 x i32>, <4 x i32>* %76, align 16
  %78 = getelementptr inbounds i32, i32* %1, i64 %73
  %79 = bitcast i32* %78 to <4 x i32>*
  %80 = load <4 x i32>, <4 x i32>* %79, align 16
  %81 = getelementptr inbounds i32, i32* %2, i64 %73
  %82 = bitcast i32* %81 to <4 x i32>*
  %83 = load <4 x i32>, <4 x i32>* %82, align 16
  %84 = shl <4 x i32> %80, <i32 1, i32 1, i32 1, i32 1>
  %85 = add <4 x i32> %84, %77
  %86 = add <4 x i32> %85, %83
  %87 = ashr <4 x i32> %86, <i32 2, i32 2, i32 2, i32 2>
  %88 = sub <4 x i32> %83, %80
  %89 = sub <4 x i32> %77, %80
  store <4 x i32> %87, <4 x i32>* %76, align 16
  store <4 x i32> %88, <4 x i32>* %79, align 16
  store <4 x i32> %89, <4 x i32>* %82, align 16
  %90 = or i64 %73, 4
  %91 = getelementptr inbounds i32, i32* %0, i64 %90
  %92 = bitcast i32* %91 to <4 x i32>*
  %93 = load <4 x i32>, <4 x i32>* %92, align 16
  %94 = getelementptr inbounds i32, i32* %1, i64 %90
  %95 = bitcast i32* %94 to <4 x i32>*
  %96 = load <4 x i32>, <4 x i32>* %95, align 16
  %97 = getelementptr inbounds i32, i32* %2, i64 %90
  %98 = bitcast i32* %97 to <4 x i32>*
  %99 = load <4 x i32>, <4 x i32>* %98, align 16
  %100 = shl <4 x i32> %96, <i32 1, i32 1, i32 1, i32 1>
  %101 = add <4 x i32> %100, %93
  %102 = add <4 x i32> %101, %99
  %103 = ashr <4 x i32> %102, <i32 2, i32 2, i32 2, i32 2>
  %104 = sub <4 x i32> %99, %96
  %105 = sub <4 x i32> %93, %96
  store <4 x i32> %103, <4 x i32>* %92, align 16
  store <4 x i32> %104, <4 x i32>* %95, align 16
  store <4 x i32> %105, <4 x i32>* %98, align 16
  %106 = add nuw nsw i64 %73, 8
  %107 = add i64 %74, -2
  %108 = icmp eq i64 %107, 0
  br i1 %108, label %15, label %72

109:                                              ; preds = %42, %109
  %110 = phi i64 [ %123, %109 ], [ %43, %42 ]
  %111 = getelementptr inbounds i32, i32* %0, i64 %110
  %112 = load i32, i32* %111, align 4
  %113 = getelementptr inbounds i32, i32* %1, i64 %110
  %114 = load i32, i32* %113, align 4
  %115 = getelementptr inbounds i32, i32* %2, i64 %110
  %116 = load i32, i32* %115, align 4
  %117 = shl i32 %114, 1
  %118 = add nsw i32 %117, %112
  %119 = add nsw i32 %118, %116
  %120 = ashr i32 %119, 2
  %121 = sub nsw i32 %116, %114
  %122 = sub nsw i32 %112, %114
  store i32 %120, i32* %111, align 4
  store i32 %121, i32* %113, align 4
  store i32 %122, i32* %115, align 4
  %123 = add nuw i64 %110, 1
  %124 = icmp eq i64 %123, %3
  br i1 %124, label %125, label %109, !llvm.loop !4

125:                                              ; preds = %109, %70, %36
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @opj_mct_decode(i32* noalias nocapture, i32* noalias nocapture, i32* noalias nocapture, i64) local_unnamed_addr #1 {
  %5 = and i64 %3, 4294967292
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %35, label %7

7:                                                ; preds = %4
  %8 = add nsw i64 %5, -1
  %9 = lshr i64 %8, 2
  %10 = add nuw nsw i64 %9, 1
  %11 = and i64 %10, 1
  %12 = icmp eq i64 %9, 0
  br i1 %12, label %15, label %13

13:                                               ; preds = %7
  %14 = sub nuw nsw i64 %10, %11
  br label %120

15:                                               ; preds = %120, %7
  %16 = phi i64 [ undef, %7 ], [ %152, %120 ]
  %17 = phi i64 [ 0, %7 ], [ %152, %120 ]
  %18 = icmp eq i64 %11, 0
  br i1 %18, label %35, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds i32, i32* %0, i64 %17
  %21 = bitcast i32* %20 to <4 x i32>*
  %22 = load <4 x i32>, <4 x i32>* %21, align 16
  %23 = getelementptr inbounds i32, i32* %1, i64 %17
  %24 = bitcast i32* %23 to <4 x i32>*
  %25 = load <4 x i32>, <4 x i32>* %24, align 16
  %26 = getelementptr inbounds i32, i32* %2, i64 %17
  %27 = bitcast i32* %26 to <4 x i32>*
  %28 = load <4 x i32>, <4 x i32>* %27, align 16
  %29 = add <4 x i32> %28, %25
  %30 = ashr <4 x i32> %29, <i32 2, i32 2, i32 2, i32 2>
  %31 = sub <4 x i32> %22, %30
  %32 = add <4 x i32> %31, %28
  %33 = add <4 x i32> %31, %25
  store <4 x i32> %32, <4 x i32>* %21, align 16
  store <4 x i32> %31, <4 x i32>* %24, align 16
  store <4 x i32> %33, <4 x i32>* %27, align 16
  %34 = add nuw nsw i64 %17, 4
  br label %35

35:                                               ; preds = %19, %15, %4
  %36 = phi i64 [ 0, %4 ], [ %16, %15 ], [ %34, %19 ]
  %37 = icmp ult i64 %36, %3
  br i1 %37, label %38, label %170

38:                                               ; preds = %35
  %39 = sub i64 %3, %36
  %40 = icmp ult i64 %39, 4
  br i1 %40, label %41, label %43

41:                                               ; preds = %118, %38
  %42 = phi i64 [ %36, %38 ], [ %45, %118 ]
  br label %155

43:                                               ; preds = %38
  %44 = and i64 %39, -4
  %45 = add i64 %36, %44
  %46 = add i64 %44, -4
  %47 = lshr exact i64 %46, 2
  %48 = add nuw nsw i64 %47, 1
  %49 = and i64 %48, 1
  %50 = icmp eq i64 %46, 0
  br i1 %50, label %96, label %51

51:                                               ; preds = %43
  %52 = sub nuw nsw i64 %48, %49
  br label %53

53:                                               ; preds = %53, %51
  %54 = phi i64 [ 0, %51 ], [ %93, %53 ]
  %55 = phi i64 [ %52, %51 ], [ %94, %53 ]
  %56 = add i64 %36, %54
  %57 = getelementptr inbounds i32, i32* %0, i64 %56
  %58 = bitcast i32* %57 to <4 x i32>*
  %59 = load <4 x i32>, <4 x i32>* %58, align 4
  %60 = getelementptr inbounds i32, i32* %1, i64 %56
  %61 = bitcast i32* %60 to <4 x i32>*
  %62 = load <4 x i32>, <4 x i32>* %61, align 4
  %63 = getelementptr inbounds i32, i32* %2, i64 %56
  %64 = bitcast i32* %63 to <4 x i32>*
  %65 = load <4 x i32>, <4 x i32>* %64, align 4
  %66 = add nsw <4 x i32> %65, %62
  %67 = ashr <4 x i32> %66, <i32 2, i32 2, i32 2, i32 2>
  %68 = sub nsw <4 x i32> %59, %67
  %69 = add nsw <4 x i32> %68, %65
  %70 = add nsw <4 x i32> %68, %62
  %71 = bitcast i32* %57 to <4 x i32>*
  store <4 x i32> %69, <4 x i32>* %71, align 4
  %72 = bitcast i32* %60 to <4 x i32>*
  store <4 x i32> %68, <4 x i32>* %72, align 4
  %73 = bitcast i32* %63 to <4 x i32>*
  store <4 x i32> %70, <4 x i32>* %73, align 4
  %74 = or i64 %54, 4
  %75 = add i64 %36, %74
  %76 = getelementptr inbounds i32, i32* %0, i64 %75
  %77 = bitcast i32* %76 to <4 x i32>*
  %78 = load <4 x i32>, <4 x i32>* %77, align 4
  %79 = getelementptr inbounds i32, i32* %1, i64 %75
  %80 = bitcast i32* %79 to <4 x i32>*
  %81 = load <4 x i32>, <4 x i32>* %80, align 4
  %82 = getelementptr inbounds i32, i32* %2, i64 %75
  %83 = bitcast i32* %82 to <4 x i32>*
  %84 = load <4 x i32>, <4 x i32>* %83, align 4
  %85 = add nsw <4 x i32> %84, %81
  %86 = ashr <4 x i32> %85, <i32 2, i32 2, i32 2, i32 2>
  %87 = sub nsw <4 x i32> %78, %86
  %88 = add nsw <4 x i32> %87, %84
  %89 = add nsw <4 x i32> %87, %81
  %90 = bitcast i32* %76 to <4 x i32>*
  store <4 x i32> %88, <4 x i32>* %90, align 4
  %91 = bitcast i32* %79 to <4 x i32>*
  store <4 x i32> %87, <4 x i32>* %91, align 4
  %92 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %89, <4 x i32>* %92, align 4
  %93 = add i64 %54, 8
  %94 = add i64 %55, -2
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %96, label %53, !llvm.loop !6

96:                                               ; preds = %53, %43
  %97 = phi i64 [ 0, %43 ], [ %93, %53 ]
  %98 = icmp eq i64 %49, 0
  br i1 %98, label %118, label %99

99:                                               ; preds = %96
  %100 = add i64 %36, %97
  %101 = getelementptr inbounds i32, i32* %0, i64 %100
  %102 = bitcast i32* %101 to <4 x i32>*
  %103 = load <4 x i32>, <4 x i32>* %102, align 4
  %104 = getelementptr inbounds i32, i32* %1, i64 %100
  %105 = bitcast i32* %104 to <4 x i32>*
  %106 = load <4 x i32>, <4 x i32>* %105, align 4
  %107 = getelementptr inbounds i32, i32* %2, i64 %100
  %108 = bitcast i32* %107 to <4 x i32>*
  %109 = load <4 x i32>, <4 x i32>* %108, align 4
  %110 = add nsw <4 x i32> %109, %106
  %111 = ashr <4 x i32> %110, <i32 2, i32 2, i32 2, i32 2>
  %112 = sub nsw <4 x i32> %103, %111
  %113 = add nsw <4 x i32> %112, %109
  %114 = add nsw <4 x i32> %112, %106
  %115 = bitcast i32* %101 to <4 x i32>*
  store <4 x i32> %113, <4 x i32>* %115, align 4
  %116 = bitcast i32* %104 to <4 x i32>*
  store <4 x i32> %112, <4 x i32>* %116, align 4
  %117 = bitcast i32* %107 to <4 x i32>*
  store <4 x i32> %114, <4 x i32>* %117, align 4
  br label %118

118:                                              ; preds = %96, %99
  %119 = icmp eq i64 %39, %44
  br i1 %119, label %170, label %41

120:                                              ; preds = %120, %13
  %121 = phi i64 [ 0, %13 ], [ %152, %120 ]
  %122 = phi i64 [ %14, %13 ], [ %153, %120 ]
  %123 = getelementptr inbounds i32, i32* %0, i64 %121
  %124 = bitcast i32* %123 to <4 x i32>*
  %125 = load <4 x i32>, <4 x i32>* %124, align 16
  %126 = getelementptr inbounds i32, i32* %1, i64 %121
  %127 = bitcast i32* %126 to <4 x i32>*
  %128 = load <4 x i32>, <4 x i32>* %127, align 16
  %129 = getelementptr inbounds i32, i32* %2, i64 %121
  %130 = bitcast i32* %129 to <4 x i32>*
  %131 = load <4 x i32>, <4 x i32>* %130, align 16
  %132 = add <4 x i32> %131, %128
  %133 = ashr <4 x i32> %132, <i32 2, i32 2, i32 2, i32 2>
  %134 = sub <4 x i32> %125, %133
  %135 = add <4 x i32> %134, %131
  %136 = add <4 x i32> %134, %128
  store <4 x i32> %135, <4 x i32>* %124, align 16
  store <4 x i32> %134, <4 x i32>* %127, align 16
  store <4 x i32> %136, <4 x i32>* %130, align 16
  %137 = or i64 %121, 4
  %138 = getelementptr inbounds i32, i32* %0, i64 %137
  %139 = bitcast i32* %138 to <4 x i32>*
  %140 = load <4 x i32>, <4 x i32>* %139, align 16
  %141 = getelementptr inbounds i32, i32* %1, i64 %137
  %142 = bitcast i32* %141 to <4 x i32>*
  %143 = load <4 x i32>, <4 x i32>* %142, align 16
  %144 = getelementptr inbounds i32, i32* %2, i64 %137
  %145 = bitcast i32* %144 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 16
  %147 = add <4 x i32> %146, %143
  %148 = ashr <4 x i32> %147, <i32 2, i32 2, i32 2, i32 2>
  %149 = sub <4 x i32> %140, %148
  %150 = add <4 x i32> %149, %146
  %151 = add <4 x i32> %149, %143
  store <4 x i32> %150, <4 x i32>* %139, align 16
  store <4 x i32> %149, <4 x i32>* %142, align 16
  store <4 x i32> %151, <4 x i32>* %145, align 16
  %152 = add nuw nsw i64 %121, 8
  %153 = add i64 %122, -2
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %15, label %120

155:                                              ; preds = %41, %155
  %156 = phi i64 [ %168, %155 ], [ %42, %41 ]
  %157 = getelementptr inbounds i32, i32* %0, i64 %156
  %158 = load i32, i32* %157, align 4
  %159 = getelementptr inbounds i32, i32* %1, i64 %156
  %160 = load i32, i32* %159, align 4
  %161 = getelementptr inbounds i32, i32* %2, i64 %156
  %162 = load i32, i32* %161, align 4
  %163 = add nsw i32 %162, %160
  %164 = ashr i32 %163, 2
  %165 = sub nsw i32 %158, %164
  %166 = add nsw i32 %165, %162
  %167 = add nsw i32 %165, %160
  store i32 %166, i32* %157, align 4
  store i32 %165, i32* %159, align 4
  store i32 %167, i32* %161, align 4
  %168 = add nuw i64 %156, 1
  %169 = icmp eq i64 %168, %3
  br i1 %169, label %170, label %155, !llvm.loop !7

170:                                              ; preds = %155, %118, %35
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden double @opj_mct_getnorm(i32) local_unnamed_addr #0 {
  %2 = zext i32 %0 to i64
  %3 = getelementptr inbounds [3 x double], [3 x double]* @opj_mct_norms, i64 0, i64 %2
  %4 = load double, double* %3, align 8
  ret double %4
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @opj_mct_encode_real(float* noalias nocapture, float* noalias nocapture, float* noalias nocapture, i64) local_unnamed_addr #1 {
  %5 = lshr i64 %3, 3
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %62, label %7

7:                                                ; preds = %4, %7
  %8 = phi float* [ %57, %7 ], [ %0, %4 ]
  %9 = phi float* [ %58, %7 ], [ %1, %4 ]
  %10 = phi float* [ %59, %7 ], [ %2, %4 ]
  %11 = phi i64 [ %60, %7 ], [ 0, %4 ]
  %12 = bitcast float* %8 to <4 x float>*
  %13 = load <4 x float>, <4 x float>* %12, align 16
  %14 = bitcast float* %9 to <4 x float>*
  %15 = load <4 x float>, <4 x float>* %14, align 16
  %16 = bitcast float* %10 to <4 x float>*
  %17 = load <4 x float>, <4 x float>* %16, align 16
  %18 = fmul <4 x float> %13, <float 0x3FD322D0E0000000, float 0x3FD322D0E0000000, float 0x3FD322D0E0000000, float 0x3FD322D0E0000000>
  %19 = fmul <4 x float> %15, <float 0x3FE2C8B440000000, float 0x3FE2C8B440000000, float 0x3FE2C8B440000000, float 0x3FE2C8B440000000>
  %20 = fadd <4 x float> %18, %19
  %21 = fmul <4 x float> %17, <float 0x3FBD2F1AA0000000, float 0x3FBD2F1AA0000000, float 0x3FBD2F1AA0000000, float 0x3FBD2F1AA0000000>
  %22 = fadd <4 x float> %20, %21
  %23 = fmul <4 x float> %13, <float 0xBFC59999A0000000, float 0xBFC59999A0000000, float 0xBFC59999A0000000, float 0xBFC59999A0000000>
  %24 = fmul <4 x float> %15, <float 0xBFD5335D20000000, float 0xBFD5335D20000000, float 0xBFD5335D20000000, float 0xBFD5335D20000000>
  %25 = fadd <4 x float> %23, %24
  %26 = fmul <4 x float> %17, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %27 = fadd <4 x float> %25, %26
  %28 = fmul <4 x float> %13, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %29 = fmul <4 x float> %15, <float 0xBFDACBD120000000, float 0xBFDACBD120000000, float 0xBFDACBD120000000, float 0xBFDACBD120000000>
  %30 = fadd <4 x float> %28, %29
  %31 = fmul <4 x float> %17, <float 0xBFB4D0BB60000000, float 0xBFB4D0BB60000000, float 0xBFB4D0BB60000000, float 0xBFB4D0BB60000000>
  %32 = fadd <4 x float> %30, %31
  store <4 x float> %22, <4 x float>* %12, align 16
  store <4 x float> %27, <4 x float>* %14, align 16
  store <4 x float> %32, <4 x float>* %16, align 16
  %33 = getelementptr inbounds float, float* %8, i64 4
  %34 = getelementptr inbounds float, float* %9, i64 4
  %35 = getelementptr inbounds float, float* %10, i64 4
  %36 = bitcast float* %33 to <4 x float>*
  %37 = load <4 x float>, <4 x float>* %36, align 16
  %38 = bitcast float* %34 to <4 x float>*
  %39 = load <4 x float>, <4 x float>* %38, align 16
  %40 = bitcast float* %35 to <4 x float>*
  %41 = load <4 x float>, <4 x float>* %40, align 16
  %42 = fmul <4 x float> %37, <float 0x3FD322D0E0000000, float 0x3FD322D0E0000000, float 0x3FD322D0E0000000, float 0x3FD322D0E0000000>
  %43 = fmul <4 x float> %39, <float 0x3FE2C8B440000000, float 0x3FE2C8B440000000, float 0x3FE2C8B440000000, float 0x3FE2C8B440000000>
  %44 = fadd <4 x float> %42, %43
  %45 = fmul <4 x float> %41, <float 0x3FBD2F1AA0000000, float 0x3FBD2F1AA0000000, float 0x3FBD2F1AA0000000, float 0x3FBD2F1AA0000000>
  %46 = fadd <4 x float> %44, %45
  %47 = fmul <4 x float> %37, <float 0xBFC59999A0000000, float 0xBFC59999A0000000, float 0xBFC59999A0000000, float 0xBFC59999A0000000>
  %48 = fmul <4 x float> %39, <float 0xBFD5335D20000000, float 0xBFD5335D20000000, float 0xBFD5335D20000000, float 0xBFD5335D20000000>
  %49 = fadd <4 x float> %47, %48
  %50 = fmul <4 x float> %41, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %51 = fadd <4 x float> %49, %50
  %52 = fmul <4 x float> %37, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %53 = fmul <4 x float> %39, <float 0xBFDACBD120000000, float 0xBFDACBD120000000, float 0xBFDACBD120000000, float 0xBFDACBD120000000>
  %54 = fadd <4 x float> %52, %53
  %55 = fmul <4 x float> %41, <float 0xBFB4D0BB60000000, float 0xBFB4D0BB60000000, float 0xBFB4D0BB60000000, float 0xBFB4D0BB60000000>
  %56 = fadd <4 x float> %54, %55
  store <4 x float> %46, <4 x float>* %36, align 16
  store <4 x float> %51, <4 x float>* %38, align 16
  store <4 x float> %56, <4 x float>* %40, align 16
  %57 = getelementptr inbounds float, float* %8, i64 8
  %58 = getelementptr inbounds float, float* %9, i64 8
  %59 = getelementptr inbounds float, float* %10, i64 8
  %60 = add nuw nsw i64 %11, 1
  %61 = icmp eq i64 %60, %5
  br i1 %61, label %62, label %7

62:                                               ; preds = %7, %4
  %63 = phi float* [ %2, %4 ], [ %59, %7 ]
  %64 = phi float* [ %1, %4 ], [ %58, %7 ]
  %65 = phi float* [ %0, %4 ], [ %57, %7 ]
  %66 = and i64 %3, 7
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %93, label %68

68:                                               ; preds = %62, %68
  %69 = phi i64 [ %91, %68 ], [ 0, %62 ]
  %70 = getelementptr inbounds float, float* %65, i64 %69
  %71 = load float, float* %70, align 4
  %72 = getelementptr inbounds float, float* %64, i64 %69
  %73 = load float, float* %72, align 4
  %74 = getelementptr inbounds float, float* %63, i64 %69
  %75 = load float, float* %74, align 4
  %76 = fmul float %71, 0x3FD322D0E0000000
  %77 = fmul float %73, 0x3FE2C8B440000000
  %78 = fadd float %76, %77
  %79 = fmul float %75, 0x3FBD2F1AA0000000
  %80 = fadd float %78, %79
  %81 = fmul float %71, 0xBFC59999A0000000
  %82 = fmul float %73, 0x3FD5335D20000000
  %83 = fsub float %81, %82
  %84 = fmul float %75, 5.000000e-01
  %85 = fadd float %83, %84
  %86 = fmul float %71, 5.000000e-01
  %87 = fmul float %73, 0x3FDACBD120000000
  %88 = fsub float %86, %87
  %89 = fmul float %75, 0x3FB4D0BB60000000
  %90 = fsub float %88, %89
  store float %80, float* %70, align 4
  store float %85, float* %72, align 4
  store float %90, float* %74, align 4
  %91 = add nuw nsw i64 %69, 1
  %92 = icmp eq i64 %91, %66
  br i1 %92, label %93, label %68

93:                                               ; preds = %68, %62
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @opj_mct_decode_real(float* noalias nocapture, float* noalias nocapture, float* noalias nocapture, i64) local_unnamed_addr #1 {
  %5 = lshr i64 %3, 3
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %48, label %7

7:                                                ; preds = %4, %7
  %8 = phi float* [ %43, %7 ], [ %0, %4 ]
  %9 = phi float* [ %44, %7 ], [ %1, %4 ]
  %10 = phi float* [ %45, %7 ], [ %2, %4 ]
  %11 = phi i64 [ %46, %7 ], [ 0, %4 ]
  %12 = bitcast float* %8 to <4 x float>*
  %13 = load <4 x float>, <4 x float>* %12, align 16
  %14 = bitcast float* %9 to <4 x float>*
  %15 = load <4 x float>, <4 x float>* %14, align 16
  %16 = bitcast float* %10 to <4 x float>*
  %17 = load <4 x float>, <4 x float>* %16, align 16
  %18 = fmul <4 x float> %17, <float 0x3FF66E9780000000, float 0x3FF66E9780000000, float 0x3FF66E9780000000, float 0x3FF66E9780000000>
  %19 = fadd <4 x float> %13, %18
  %20 = fmul <4 x float> %15, <float 0x3FD60639E0000000, float 0x3FD60639E0000000, float 0x3FD60639E0000000, float 0x3FD60639E0000000>
  %21 = fsub <4 x float> %13, %20
  %22 = fmul <4 x float> %17, <float 0x3FE6DA3C20000000, float 0x3FE6DA3C20000000, float 0x3FE6DA3C20000000, float 0x3FE6DA3C20000000>
  %23 = fsub <4 x float> %21, %22
  %24 = fmul <4 x float> %15, <float 0x3FFC5A1CA0000000, float 0x3FFC5A1CA0000000, float 0x3FFC5A1CA0000000, float 0x3FFC5A1CA0000000>
  %25 = fadd <4 x float> %13, %24
  store <4 x float> %19, <4 x float>* %12, align 16
  store <4 x float> %23, <4 x float>* %14, align 16
  store <4 x float> %25, <4 x float>* %16, align 16
  %26 = getelementptr inbounds float, float* %8, i64 4
  %27 = getelementptr inbounds float, float* %9, i64 4
  %28 = getelementptr inbounds float, float* %10, i64 4
  %29 = bitcast float* %26 to <4 x float>*
  %30 = load <4 x float>, <4 x float>* %29, align 16
  %31 = bitcast float* %27 to <4 x float>*
  %32 = load <4 x float>, <4 x float>* %31, align 16
  %33 = bitcast float* %28 to <4 x float>*
  %34 = load <4 x float>, <4 x float>* %33, align 16
  %35 = fmul <4 x float> %34, <float 0x3FF66E9780000000, float 0x3FF66E9780000000, float 0x3FF66E9780000000, float 0x3FF66E9780000000>
  %36 = fadd <4 x float> %30, %35
  %37 = fmul <4 x float> %32, <float 0x3FD60639E0000000, float 0x3FD60639E0000000, float 0x3FD60639E0000000, float 0x3FD60639E0000000>
  %38 = fsub <4 x float> %30, %37
  %39 = fmul <4 x float> %34, <float 0x3FE6DA3C20000000, float 0x3FE6DA3C20000000, float 0x3FE6DA3C20000000, float 0x3FE6DA3C20000000>
  %40 = fsub <4 x float> %38, %39
  %41 = fmul <4 x float> %32, <float 0x3FFC5A1CA0000000, float 0x3FFC5A1CA0000000, float 0x3FFC5A1CA0000000, float 0x3FFC5A1CA0000000>
  %42 = fadd <4 x float> %30, %41
  store <4 x float> %36, <4 x float>* %29, align 16
  store <4 x float> %40, <4 x float>* %31, align 16
  store <4 x float> %42, <4 x float>* %33, align 16
  %43 = getelementptr inbounds float, float* %8, i64 8
  %44 = getelementptr inbounds float, float* %9, i64 8
  %45 = getelementptr inbounds float, float* %10, i64 8
  %46 = add nuw nsw i64 %11, 1
  %47 = icmp eq i64 %46, %5
  br i1 %47, label %48, label %7

48:                                               ; preds = %7, %4
  %49 = phi float* [ %2, %4 ], [ %45, %7 ]
  %50 = phi float* [ %1, %4 ], [ %44, %7 ]
  %51 = phi float* [ %0, %4 ], [ %43, %7 ]
  %52 = and i64 %3, 7
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %67, label %54

54:                                               ; preds = %48
  %55 = load float, float* %51, align 4
  %56 = load float, float* %50, align 4
  %57 = load float, float* %49, align 4
  %58 = fmul float %57, 0x3FF66E9780000000
  %59 = fadd float %55, %58
  %60 = fmul float %56, 0x3FD60639E0000000
  %61 = fsub float %55, %60
  %62 = fmul float %57, 0x3FE6DA3C20000000
  %63 = fsub float %61, %62
  %64 = fmul float %56, 0x3FFC5A1CA0000000
  %65 = fadd float %55, %64
  store float %59, float* %51, align 4
  store float %63, float* %50, align 4
  store float %65, float* %49, align 4
  %66 = icmp eq i64 %52, 1
  br i1 %66, label %67, label %68

67:                                               ; preds = %54, %68, %84, %100, %116, %132, %148, %48
  ret void

68:                                               ; preds = %54
  %69 = getelementptr inbounds float, float* %51, i64 1
  %70 = load float, float* %69, align 4
  %71 = getelementptr inbounds float, float* %50, i64 1
  %72 = load float, float* %71, align 4
  %73 = getelementptr inbounds float, float* %49, i64 1
  %74 = load float, float* %73, align 4
  %75 = fmul float %74, 0x3FF66E9780000000
  %76 = fadd float %70, %75
  %77 = fmul float %72, 0x3FD60639E0000000
  %78 = fsub float %70, %77
  %79 = fmul float %74, 0x3FE6DA3C20000000
  %80 = fsub float %78, %79
  %81 = fmul float %72, 0x3FFC5A1CA0000000
  %82 = fadd float %70, %81
  store float %76, float* %69, align 4
  store float %80, float* %71, align 4
  store float %82, float* %73, align 4
  %83 = icmp eq i64 %52, 2
  br i1 %83, label %67, label %84

84:                                               ; preds = %68
  %85 = getelementptr inbounds float, float* %51, i64 2
  %86 = load float, float* %85, align 4
  %87 = getelementptr inbounds float, float* %50, i64 2
  %88 = load float, float* %87, align 4
  %89 = getelementptr inbounds float, float* %49, i64 2
  %90 = load float, float* %89, align 4
  %91 = fmul float %90, 0x3FF66E9780000000
  %92 = fadd float %86, %91
  %93 = fmul float %88, 0x3FD60639E0000000
  %94 = fsub float %86, %93
  %95 = fmul float %90, 0x3FE6DA3C20000000
  %96 = fsub float %94, %95
  %97 = fmul float %88, 0x3FFC5A1CA0000000
  %98 = fadd float %86, %97
  store float %92, float* %85, align 4
  store float %96, float* %87, align 4
  store float %98, float* %89, align 4
  %99 = icmp eq i64 %52, 3
  br i1 %99, label %67, label %100

100:                                              ; preds = %84
  %101 = getelementptr inbounds float, float* %51, i64 3
  %102 = load float, float* %101, align 4
  %103 = getelementptr inbounds float, float* %50, i64 3
  %104 = load float, float* %103, align 4
  %105 = getelementptr inbounds float, float* %49, i64 3
  %106 = load float, float* %105, align 4
  %107 = fmul float %106, 0x3FF66E9780000000
  %108 = fadd float %102, %107
  %109 = fmul float %104, 0x3FD60639E0000000
  %110 = fsub float %102, %109
  %111 = fmul float %106, 0x3FE6DA3C20000000
  %112 = fsub float %110, %111
  %113 = fmul float %104, 0x3FFC5A1CA0000000
  %114 = fadd float %102, %113
  store float %108, float* %101, align 4
  store float %112, float* %103, align 4
  store float %114, float* %105, align 4
  %115 = icmp eq i64 %52, 4
  br i1 %115, label %67, label %116

116:                                              ; preds = %100
  %117 = getelementptr inbounds float, float* %51, i64 4
  %118 = load float, float* %117, align 4
  %119 = getelementptr inbounds float, float* %50, i64 4
  %120 = load float, float* %119, align 4
  %121 = getelementptr inbounds float, float* %49, i64 4
  %122 = load float, float* %121, align 4
  %123 = fmul float %122, 0x3FF66E9780000000
  %124 = fadd float %118, %123
  %125 = fmul float %120, 0x3FD60639E0000000
  %126 = fsub float %118, %125
  %127 = fmul float %122, 0x3FE6DA3C20000000
  %128 = fsub float %126, %127
  %129 = fmul float %120, 0x3FFC5A1CA0000000
  %130 = fadd float %118, %129
  store float %124, float* %117, align 4
  store float %128, float* %119, align 4
  store float %130, float* %121, align 4
  %131 = icmp eq i64 %52, 5
  br i1 %131, label %67, label %132

132:                                              ; preds = %116
  %133 = getelementptr inbounds float, float* %51, i64 5
  %134 = load float, float* %133, align 4
  %135 = getelementptr inbounds float, float* %50, i64 5
  %136 = load float, float* %135, align 4
  %137 = getelementptr inbounds float, float* %49, i64 5
  %138 = load float, float* %137, align 4
  %139 = fmul float %138, 0x3FF66E9780000000
  %140 = fadd float %134, %139
  %141 = fmul float %136, 0x3FD60639E0000000
  %142 = fsub float %134, %141
  %143 = fmul float %138, 0x3FE6DA3C20000000
  %144 = fsub float %142, %143
  %145 = fmul float %136, 0x3FFC5A1CA0000000
  %146 = fadd float %134, %145
  store float %140, float* %133, align 4
  store float %144, float* %135, align 4
  store float %146, float* %137, align 4
  %147 = icmp eq i64 %52, 6
  br i1 %147, label %67, label %148

148:                                              ; preds = %132
  %149 = getelementptr inbounds float, float* %51, i64 6
  %150 = load float, float* %149, align 4
  %151 = getelementptr inbounds float, float* %50, i64 6
  %152 = load float, float* %151, align 4
  %153 = getelementptr inbounds float, float* %49, i64 6
  %154 = load float, float* %153, align 4
  %155 = fmul float %154, 0x3FF66E9780000000
  %156 = fadd float %150, %155
  %157 = fmul float %152, 0x3FD60639E0000000
  %158 = fsub float %150, %157
  %159 = fmul float %154, 0x3FE6DA3C20000000
  %160 = fsub float %158, %159
  %161 = fmul float %152, 0x3FFC5A1CA0000000
  %162 = fadd float %150, %161
  store float %156, float* %149, align 4
  store float %160, float* %151, align 4
  store float %162, float* %153, align 4
  br label %67
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden double @opj_mct_getnorm_real(i32) local_unnamed_addr #0 {
  %2 = zext i32 %0 to i64
  %3 = getelementptr inbounds [3 x double], [3 x double]* @opj_mct_norms_real, i64 0, i64 %2
  %4 = load double, double* %3, align 8
  ret double %4
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_mct_encode_custom(i8* nocapture readonly, i64, i8** nocapture, i32, i32) local_unnamed_addr #2 {
  %6 = mul i32 %3, %3
  %7 = add i32 %6, %3
  %8 = zext i32 %7 to i64
  %9 = shl nuw nsw i64 %8, 2
  %10 = tail call i8* @opj_malloc(i64 %9) #6
  %11 = bitcast i8* %10 to i32*
  %12 = icmp eq i8* %10, null
  br i1 %12, label %274, label %13

13:                                               ; preds = %5
  %14 = zext i32 %3 to i64
  %15 = getelementptr inbounds i32, i32* %11, i64 %14
  %16 = zext i32 %6 to i64
  %17 = icmp eq i32 %6, 0
  br i1 %17, label %119, label %18

18:                                               ; preds = %13
  %19 = bitcast i8* %0 to float*
  %20 = icmp ult i32 %6, 8
  br i1 %20, label %21, label %44

21:                                               ; preds = %117, %44, %18
  %22 = phi i64 [ 0, %44 ], [ 0, %18 ], [ %55, %117 ]
  %23 = phi float* [ %19, %44 ], [ %19, %18 ], [ %56, %117 ]
  %24 = xor i64 %22, -1
  %25 = add nsw i64 %24, %16
  %26 = and i64 %16, 3
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %40, label %28

28:                                               ; preds = %21, %28
  %29 = phi i64 [ %37, %28 ], [ %22, %21 ]
  %30 = phi float* [ %32, %28 ], [ %23, %21 ]
  %31 = phi i64 [ %38, %28 ], [ %26, %21 ]
  %32 = getelementptr inbounds float, float* %30, i64 1
  %33 = load float, float* %30, align 4
  %34 = fmul float %33, 8.192000e+03
  %35 = fptosi float %34 to i32
  %36 = getelementptr inbounds i32, i32* %15, i64 %29
  store i32 %35, i32* %36, align 4
  %37 = add nuw nsw i64 %29, 1
  %38 = add i64 %31, -1
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %40, label %28, !llvm.loop !8

40:                                               ; preds = %28, %21
  %41 = phi i64 [ %22, %21 ], [ %37, %28 ]
  %42 = phi float* [ %23, %21 ], [ %32, %28 ]
  %43 = icmp ult i64 %25, 3
  br i1 %43, label %119, label %132

44:                                               ; preds = %18
  %45 = shl nuw nsw i64 %14, 2
  %46 = getelementptr i8, i8* %10, i64 %45
  %47 = shl nuw nsw i64 %16, 2
  %48 = add nuw nsw i64 %45, %47
  %49 = getelementptr i8, i8* %10, i64 %48
  %50 = getelementptr i8, i8* %0, i64 %47
  %51 = icmp ult i8* %46, %50
  %52 = icmp ugt i8* %49, %0
  %53 = and i1 %51, %52
  br i1 %53, label %21, label %54

54:                                               ; preds = %44
  %55 = and i64 %16, 4294967288
  %56 = getelementptr float, float* %19, i64 %55
  %57 = add nsw i64 %55, -8
  %58 = lshr exact i64 %57, 3
  %59 = add nuw nsw i64 %58, 1
  %60 = and i64 %59, 1
  %61 = icmp eq i64 %57, 0
  br i1 %61, label %99, label %62

62:                                               ; preds = %54
  %63 = sub nuw nsw i64 %59, %60
  br label %64

64:                                               ; preds = %64, %62
  %65 = phi i64 [ 0, %62 ], [ %96, %64 ]
  %66 = phi i64 [ %63, %62 ], [ %97, %64 ]
  %67 = getelementptr float, float* %19, i64 %65
  %68 = bitcast float* %67 to <4 x float>*
  %69 = load <4 x float>, <4 x float>* %68, align 4, !alias.scope !10
  %70 = getelementptr float, float* %67, i64 4
  %71 = bitcast float* %70 to <4 x float>*
  %72 = load <4 x float>, <4 x float>* %71, align 4, !alias.scope !10
  %73 = fmul <4 x float> %69, <float 8.192000e+03, float 8.192000e+03, float 8.192000e+03, float 8.192000e+03>
  %74 = fmul <4 x float> %72, <float 8.192000e+03, float 8.192000e+03, float 8.192000e+03, float 8.192000e+03>
  %75 = fptosi <4 x float> %73 to <4 x i32>
  %76 = fptosi <4 x float> %74 to <4 x i32>
  %77 = getelementptr inbounds i32, i32* %15, i64 %65
  %78 = bitcast i32* %77 to <4 x i32>*
  store <4 x i32> %75, <4 x i32>* %78, align 4, !alias.scope !13, !noalias !10
  %79 = getelementptr inbounds i32, i32* %77, i64 4
  %80 = bitcast i32* %79 to <4 x i32>*
  store <4 x i32> %76, <4 x i32>* %80, align 4, !alias.scope !13, !noalias !10
  %81 = or i64 %65, 8
  %82 = getelementptr float, float* %19, i64 %81
  %83 = bitcast float* %82 to <4 x float>*
  %84 = load <4 x float>, <4 x float>* %83, align 4, !alias.scope !10
  %85 = getelementptr float, float* %82, i64 4
  %86 = bitcast float* %85 to <4 x float>*
  %87 = load <4 x float>, <4 x float>* %86, align 4, !alias.scope !10
  %88 = fmul <4 x float> %84, <float 8.192000e+03, float 8.192000e+03, float 8.192000e+03, float 8.192000e+03>
  %89 = fmul <4 x float> %87, <float 8.192000e+03, float 8.192000e+03, float 8.192000e+03, float 8.192000e+03>
  %90 = fptosi <4 x float> %88 to <4 x i32>
  %91 = fptosi <4 x float> %89 to <4 x i32>
  %92 = getelementptr inbounds i32, i32* %15, i64 %81
  %93 = bitcast i32* %92 to <4 x i32>*
  store <4 x i32> %90, <4 x i32>* %93, align 4, !alias.scope !13, !noalias !10
  %94 = getelementptr inbounds i32, i32* %92, i64 4
  %95 = bitcast i32* %94 to <4 x i32>*
  store <4 x i32> %91, <4 x i32>* %95, align 4, !alias.scope !13, !noalias !10
  %96 = add i64 %65, 16
  %97 = add i64 %66, -2
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %99, label %64, !llvm.loop !15

99:                                               ; preds = %64, %54
  %100 = phi i64 [ 0, %54 ], [ %96, %64 ]
  %101 = icmp eq i64 %60, 0
  br i1 %101, label %117, label %102

102:                                              ; preds = %99
  %103 = getelementptr float, float* %19, i64 %100
  %104 = bitcast float* %103 to <4 x float>*
  %105 = load <4 x float>, <4 x float>* %104, align 4, !alias.scope !10
  %106 = getelementptr float, float* %103, i64 4
  %107 = bitcast float* %106 to <4 x float>*
  %108 = load <4 x float>, <4 x float>* %107, align 4, !alias.scope !10
  %109 = fmul <4 x float> %105, <float 8.192000e+03, float 8.192000e+03, float 8.192000e+03, float 8.192000e+03>
  %110 = fmul <4 x float> %108, <float 8.192000e+03, float 8.192000e+03, float 8.192000e+03, float 8.192000e+03>
  %111 = fptosi <4 x float> %109 to <4 x i32>
  %112 = fptosi <4 x float> %110 to <4 x i32>
  %113 = getelementptr inbounds i32, i32* %15, i64 %100
  %114 = bitcast i32* %113 to <4 x i32>*
  store <4 x i32> %111, <4 x i32>* %114, align 4, !alias.scope !13, !noalias !10
  %115 = getelementptr inbounds i32, i32* %113, i64 4
  %116 = bitcast i32* %115 to <4 x i32>*
  store <4 x i32> %112, <4 x i32>* %116, align 4, !alias.scope !13, !noalias !10
  br label %117

117:                                              ; preds = %99, %102
  %118 = icmp eq i64 %55, %16
  br i1 %118, label %119, label %21

119:                                              ; preds = %40, %132, %117, %13
  %120 = icmp eq i64 %1, 0
  br i1 %120, label %273, label %121

121:                                              ; preds = %119
  %122 = icmp eq i32 %3, 0
  %123 = add nsw i64 %14, -1
  %124 = and i64 %14, 3
  %125 = icmp ult i64 %123, 3
  %126 = sub nsw i64 %14, %124
  %127 = icmp eq i64 %124, 0
  %128 = and i64 %14, 1
  %129 = icmp eq i64 %123, 0
  %130 = sub nsw i64 %14, %128
  %131 = icmp eq i64 %128, 0
  br label %160

132:                                              ; preds = %40, %132
  %133 = phi i64 [ %158, %132 ], [ %41, %40 ]
  %134 = phi float* [ %153, %132 ], [ %42, %40 ]
  %135 = getelementptr inbounds float, float* %134, i64 1
  %136 = load float, float* %134, align 4
  %137 = fmul float %136, 8.192000e+03
  %138 = fptosi float %137 to i32
  %139 = getelementptr inbounds i32, i32* %15, i64 %133
  store i32 %138, i32* %139, align 4
  %140 = add nuw nsw i64 %133, 1
  %141 = getelementptr inbounds float, float* %134, i64 2
  %142 = load float, float* %135, align 4
  %143 = fmul float %142, 8.192000e+03
  %144 = fptosi float %143 to i32
  %145 = getelementptr inbounds i32, i32* %15, i64 %140
  store i32 %144, i32* %145, align 4
  %146 = add nuw nsw i64 %133, 2
  %147 = getelementptr inbounds float, float* %134, i64 3
  %148 = load float, float* %141, align 4
  %149 = fmul float %148, 8.192000e+03
  %150 = fptosi float %149 to i32
  %151 = getelementptr inbounds i32, i32* %15, i64 %146
  store i32 %150, i32* %151, align 4
  %152 = add nuw nsw i64 %133, 3
  %153 = getelementptr inbounds float, float* %134, i64 4
  %154 = load float, float* %147, align 4
  %155 = fmul float %154, 8.192000e+03
  %156 = fptosi float %155 to i32
  %157 = getelementptr inbounds i32, i32* %15, i64 %152
  store i32 %156, i32* %157, align 4
  %158 = add nuw nsw i64 %133, 4
  %159 = icmp eq i64 %158, %16
  br i1 %159, label %119, label %132, !llvm.loop !16

160:                                              ; preds = %270, %121
  %161 = phi i64 [ 0, %121 ], [ %271, %270 ]
  br i1 %122, label %270, label %162

162:                                              ; preds = %160
  br i1 %125, label %163, label %177

163:                                              ; preds = %177, %162
  %164 = phi i64 [ 0, %162 ], [ %203, %177 ]
  br i1 %127, label %176, label %165

165:                                              ; preds = %163, %165
  %166 = phi i64 [ %173, %165 ], [ %164, %163 ]
  %167 = phi i64 [ %174, %165 ], [ %124, %163 ]
  %168 = getelementptr inbounds i8*, i8** %2, i64 %166
  %169 = bitcast i8** %168 to i32**
  %170 = load i32*, i32** %169, align 8
  %171 = load i32, i32* %170, align 4
  %172 = getelementptr inbounds i32, i32* %11, i64 %166
  store i32 %171, i32* %172, align 4
  %173 = add nuw nsw i64 %166, 1
  %174 = add i64 %167, -1
  %175 = icmp eq i64 %174, 0
  br i1 %175, label %176, label %165, !llvm.loop !17

176:                                              ; preds = %165, %163
  br i1 %122, label %270, label %206

177:                                              ; preds = %162, %177
  %178 = phi i64 [ %203, %177 ], [ 0, %162 ]
  %179 = phi i64 [ %204, %177 ], [ %126, %162 ]
  %180 = getelementptr inbounds i8*, i8** %2, i64 %178
  %181 = bitcast i8** %180 to i32**
  %182 = load i32*, i32** %181, align 8
  %183 = load i32, i32* %182, align 4
  %184 = getelementptr inbounds i32, i32* %11, i64 %178
  store i32 %183, i32* %184, align 4
  %185 = or i64 %178, 1
  %186 = getelementptr inbounds i8*, i8** %2, i64 %185
  %187 = bitcast i8** %186 to i32**
  %188 = load i32*, i32** %187, align 8
  %189 = load i32, i32* %188, align 4
  %190 = getelementptr inbounds i32, i32* %11, i64 %185
  store i32 %189, i32* %190, align 4
  %191 = or i64 %178, 2
  %192 = getelementptr inbounds i8*, i8** %2, i64 %191
  %193 = bitcast i8** %192 to i32**
  %194 = load i32*, i32** %193, align 8
  %195 = load i32, i32* %194, align 4
  %196 = getelementptr inbounds i32, i32* %11, i64 %191
  store i32 %195, i32* %196, align 4
  %197 = or i64 %178, 3
  %198 = getelementptr inbounds i8*, i8** %2, i64 %197
  %199 = bitcast i8** %198 to i32**
  %200 = load i32*, i32** %199, align 8
  %201 = load i32, i32* %200, align 4
  %202 = getelementptr inbounds i32, i32* %11, i64 %197
  store i32 %201, i32* %202, align 4
  %203 = add nuw nsw i64 %178, 4
  %204 = add i64 %179, -4
  %205 = icmp eq i64 %204, 0
  br i1 %205, label %163, label %177

206:                                              ; preds = %176, %264
  %207 = phi i64 [ %268, %264 ], [ 0, %176 ]
  %208 = phi i32* [ %265, %264 ], [ %15, %176 ]
  %209 = getelementptr inbounds i8*, i8** %2, i64 %207
  %210 = bitcast i8** %209 to i32**
  %211 = load i32*, i32** %210, align 8
  store i32 0, i32* %211, align 4
  br i1 %129, label %246, label %212

212:                                              ; preds = %206, %212
  %213 = phi i64 [ %243, %212 ], [ 0, %206 ]
  %214 = phi i32* [ %242, %212 ], [ %208, %206 ]
  %215 = phi i64 [ %244, %212 ], [ %130, %206 ]
  %216 = load i32, i32* %214, align 4
  %217 = getelementptr inbounds i32, i32* %11, i64 %213
  %218 = load i32, i32* %217, align 4
  %219 = sext i32 %216 to i64
  %220 = sext i32 %218 to i64
  %221 = mul nsw i64 %220, %219
  %222 = add nsw i64 %221, 4096
  %223 = lshr i64 %222, 13
  %224 = trunc i64 %223 to i32
  %225 = load i32*, i32** %210, align 8
  %226 = load i32, i32* %225, align 4
  %227 = add nsw i32 %226, %224
  store i32 %227, i32* %225, align 4
  %228 = getelementptr inbounds i32, i32* %214, i64 1
  %229 = or i64 %213, 1
  %230 = load i32, i32* %228, align 4
  %231 = getelementptr inbounds i32, i32* %11, i64 %229
  %232 = load i32, i32* %231, align 4
  %233 = sext i32 %230 to i64
  %234 = sext i32 %232 to i64
  %235 = mul nsw i64 %234, %233
  %236 = add nsw i64 %235, 4096
  %237 = lshr i64 %236, 13
  %238 = trunc i64 %237 to i32
  %239 = load i32*, i32** %210, align 8
  %240 = load i32, i32* %239, align 4
  %241 = add nsw i32 %240, %238
  store i32 %241, i32* %239, align 4
  %242 = getelementptr inbounds i32, i32* %214, i64 2
  %243 = add nuw nsw i64 %213, 2
  %244 = add i64 %215, -2
  %245 = icmp eq i64 %244, 0
  br i1 %245, label %246, label %212

246:                                              ; preds = %212, %206
  %247 = phi i32* [ undef, %206 ], [ %242, %212 ]
  %248 = phi i64 [ 0, %206 ], [ %243, %212 ]
  %249 = phi i32* [ %208, %206 ], [ %242, %212 ]
  br i1 %131, label %264, label %250

250:                                              ; preds = %246
  %251 = load i32, i32* %249, align 4
  %252 = getelementptr inbounds i32, i32* %11, i64 %248
  %253 = load i32, i32* %252, align 4
  %254 = sext i32 %251 to i64
  %255 = sext i32 %253 to i64
  %256 = mul nsw i64 %255, %254
  %257 = add nsw i64 %256, 4096
  %258 = lshr i64 %257, 13
  %259 = trunc i64 %258 to i32
  %260 = load i32*, i32** %210, align 8
  %261 = load i32, i32* %260, align 4
  %262 = add nsw i32 %261, %259
  store i32 %262, i32* %260, align 4
  %263 = getelementptr inbounds i32, i32* %249, i64 1
  br label %264

264:                                              ; preds = %246, %250
  %265 = phi i32* [ %247, %246 ], [ %263, %250 ]
  %266 = load i32*, i32** %210, align 8
  %267 = getelementptr inbounds i32, i32* %266, i64 1
  store i32* %267, i32** %210, align 8
  %268 = add nuw nsw i64 %207, 1
  %269 = icmp eq i64 %268, %14
  br i1 %269, label %270, label %206

270:                                              ; preds = %264, %160, %176
  %271 = add nuw i64 %161, 1
  %272 = icmp eq i64 %271, %1
  br i1 %272, label %273, label %160

273:                                              ; preds = %270, %119
  tail call void @opj_free(i8* nonnull %10) #6
  br label %274

274:                                              ; preds = %5, %273
  %275 = phi i32 [ 1, %273 ], [ 0, %5 ]
  ret i32 %275
}

declare i8* @opj_malloc(i64) local_unnamed_addr #3

declare void @opj_free(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_mct_decode_custom(i8* nocapture readonly, i64, i8** nocapture, i32, i32) local_unnamed_addr #2 {
  %6 = shl i32 %3, 1
  %7 = zext i32 %6 to i64
  %8 = shl nuw nsw i64 %7, 2
  %9 = tail call i8* @opj_malloc(i64 %8) #6
  %10 = bitcast i8* %9 to float*
  %11 = icmp eq i8* %9, null
  br i1 %11, label %130, label %12

12:                                               ; preds = %5
  %13 = zext i32 %3 to i64
  %14 = getelementptr inbounds float, float* %10, i64 %13
  %15 = icmp eq i64 %1, 0
  br i1 %15, label %129, label %16

16:                                               ; preds = %12
  %17 = bitcast i8* %0 to float*
  %18 = icmp eq i32 %3, 0
  %19 = add nsw i64 %13, -1
  %20 = and i64 %13, 3
  %21 = icmp ult i64 %19, 3
  %22 = sub nsw i64 %13, %20
  %23 = icmp eq i64 %20, 0
  %24 = and i64 %13, 1
  %25 = icmp eq i64 %19, 0
  %26 = sub nsw i64 %13, %24
  %27 = icmp eq i64 %24, 0
  br label %28

28:                                               ; preds = %126, %16
  %29 = phi i64 [ 0, %16 ], [ %127, %126 ]
  br i1 %18, label %126, label %30

30:                                               ; preds = %28
  br i1 %21, label %31, label %46

31:                                               ; preds = %46, %30
  %32 = phi i64 [ 0, %30 ], [ %76, %46 ]
  br i1 %23, label %45, label %33

33:                                               ; preds = %31, %33
  %34 = phi i64 [ %42, %33 ], [ %32, %31 ]
  %35 = phi i64 [ %43, %33 ], [ %20, %31 ]
  %36 = getelementptr inbounds i8*, i8** %2, i64 %34
  %37 = bitcast i8** %36 to i32**
  %38 = load i32*, i32** %37, align 8
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds float, float* %10, i64 %34
  %41 = bitcast float* %40 to i32*
  store i32 %39, i32* %41, align 4
  %42 = add nuw nsw i64 %34, 1
  %43 = add i64 %35, -1
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %45, label %33, !llvm.loop !18

45:                                               ; preds = %33, %31
  br i1 %18, label %126, label %79

46:                                               ; preds = %30, %46
  %47 = phi i64 [ %76, %46 ], [ 0, %30 ]
  %48 = phi i64 [ %77, %46 ], [ %22, %30 ]
  %49 = getelementptr inbounds i8*, i8** %2, i64 %47
  %50 = bitcast i8** %49 to i32**
  %51 = load i32*, i32** %50, align 8
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds float, float* %10, i64 %47
  %54 = bitcast float* %53 to i32*
  store i32 %52, i32* %54, align 4
  %55 = or i64 %47, 1
  %56 = getelementptr inbounds i8*, i8** %2, i64 %55
  %57 = bitcast i8** %56 to i32**
  %58 = load i32*, i32** %57, align 8
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds float, float* %10, i64 %55
  %61 = bitcast float* %60 to i32*
  store i32 %59, i32* %61, align 4
  %62 = or i64 %47, 2
  %63 = getelementptr inbounds i8*, i8** %2, i64 %62
  %64 = bitcast i8** %63 to i32**
  %65 = load i32*, i32** %64, align 8
  %66 = load i32, i32* %65, align 4
  %67 = getelementptr inbounds float, float* %10, i64 %62
  %68 = bitcast float* %67 to i32*
  store i32 %66, i32* %68, align 4
  %69 = or i64 %47, 3
  %70 = getelementptr inbounds i8*, i8** %2, i64 %69
  %71 = bitcast i8** %70 to i32**
  %72 = load i32*, i32** %71, align 8
  %73 = load i32, i32* %72, align 4
  %74 = getelementptr inbounds float, float* %10, i64 %69
  %75 = bitcast float* %74 to i32*
  store i32 %73, i32* %75, align 4
  %76 = add nuw nsw i64 %47, 4
  %77 = add i64 %48, -4
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %31, label %46

79:                                               ; preds = %45, %117
  %80 = phi i64 [ %124, %117 ], [ 0, %45 ]
  %81 = phi float* [ %118, %117 ], [ %17, %45 ]
  %82 = getelementptr inbounds float, float* %14, i64 %80
  store float 0.000000e+00, float* %82, align 4
  br i1 %25, label %104, label %83

83:                                               ; preds = %79, %83
  %84 = phi float [ %100, %83 ], [ 0.000000e+00, %79 ]
  %85 = phi i64 [ %101, %83 ], [ 0, %79 ]
  %86 = phi float* [ %95, %83 ], [ %81, %79 ]
  %87 = phi i64 [ %102, %83 ], [ %26, %79 ]
  %88 = getelementptr inbounds float, float* %86, i64 1
  %89 = load float, float* %86, align 4
  %90 = getelementptr inbounds float, float* %10, i64 %85
  %91 = load float, float* %90, align 4
  %92 = fmul float %89, %91
  %93 = fadd float %84, %92
  store float %93, float* %82, align 4
  %94 = or i64 %85, 1
  %95 = getelementptr inbounds float, float* %86, i64 2
  %96 = load float, float* %88, align 4
  %97 = getelementptr inbounds float, float* %10, i64 %94
  %98 = load float, float* %97, align 4
  %99 = fmul float %96, %98
  %100 = fadd float %93, %99
  store float %100, float* %82, align 4
  %101 = add nuw nsw i64 %85, 2
  %102 = add i64 %87, -2
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %104, label %83

104:                                              ; preds = %83, %79
  %105 = phi float* [ undef, %79 ], [ %95, %83 ]
  %106 = phi float [ undef, %79 ], [ %100, %83 ]
  %107 = phi float [ 0.000000e+00, %79 ], [ %100, %83 ]
  %108 = phi i64 [ 0, %79 ], [ %101, %83 ]
  %109 = phi float* [ %81, %79 ], [ %95, %83 ]
  br i1 %27, label %117, label %110

110:                                              ; preds = %104
  %111 = load float, float* %109, align 4
  %112 = getelementptr inbounds float, float* %10, i64 %108
  %113 = load float, float* %112, align 4
  %114 = fmul float %111, %113
  %115 = fadd float %107, %114
  store float %115, float* %82, align 4
  %116 = getelementptr inbounds float, float* %109, i64 1
  br label %117

117:                                              ; preds = %104, %110
  %118 = phi float* [ %105, %104 ], [ %116, %110 ]
  %119 = phi float [ %106, %104 ], [ %115, %110 ]
  %120 = getelementptr inbounds i8*, i8** %2, i64 %80
  %121 = bitcast i8** %120 to float**
  %122 = load float*, float** %121, align 8
  %123 = getelementptr inbounds float, float* %122, i64 1
  store float* %123, float** %121, align 8
  store float %119, float* %122, align 4
  %124 = add nuw nsw i64 %80, 1
  %125 = icmp eq i64 %124, %13
  br i1 %125, label %126, label %79

126:                                              ; preds = %117, %28, %45
  %127 = add nuw i64 %29, 1
  %128 = icmp eq i64 %127, %1
  br i1 %128, label %129, label %28

129:                                              ; preds = %126, %12
  tail call void @opj_free(i8* nonnull %9) #6
  br label %130

130:                                              ; preds = %5, %129
  %131 = phi i32 [ 1, %129 ], [ 0, %5 ]
  ret i32 %131
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @opj_calculate_norms(double* nocapture, i32, float* nocapture readonly) local_unnamed_addr #4 {
  %4 = icmp eq i32 %1, 0
  br i1 %4, label %51, label %5

5:                                                ; preds = %3
  %6 = zext i32 %1 to i64
  %7 = and i32 %1, 1
  %8 = icmp eq i32 %1, 1
  %9 = sub i32 %1, %7
  %10 = icmp eq i32 %7, 0
  br label %11

11:                                               ; preds = %5, %46
  %12 = phi i64 [ 0, %5 ], [ %49, %46 ]
  %13 = getelementptr inbounds double, double* %0, i64 %12
  store double 0.000000e+00, double* %13, align 8
  %14 = trunc i64 %12 to i32
  br i1 %8, label %35, label %15

15:                                               ; preds = %11, %15
  %16 = phi double [ %32, %15 ], [ 0.000000e+00, %11 ]
  %17 = phi i32 [ %29, %15 ], [ %14, %11 ]
  %18 = phi i32 [ %33, %15 ], [ %9, %11 ]
  %19 = zext i32 %17 to i64
  %20 = getelementptr inbounds float, float* %2, i64 %19
  %21 = load float, float* %20, align 4
  %22 = add i32 %17, %1
  %23 = fmul float %21, %21
  %24 = fpext float %23 to double
  %25 = fadd double %16, %24
  store double %25, double* %13, align 8
  %26 = zext i32 %22 to i64
  %27 = getelementptr inbounds float, float* %2, i64 %26
  %28 = load float, float* %27, align 4
  %29 = add i32 %22, %1
  %30 = fmul float %28, %28
  %31 = fpext float %30 to double
  %32 = fadd double %25, %31
  store double %32, double* %13, align 8
  %33 = add i32 %18, -2
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %15

35:                                               ; preds = %15, %11
  %36 = phi double [ undef, %11 ], [ %32, %15 ]
  %37 = phi double [ 0.000000e+00, %11 ], [ %32, %15 ]
  %38 = phi i32 [ %14, %11 ], [ %29, %15 ]
  br i1 %10, label %46, label %39

39:                                               ; preds = %35
  %40 = zext i32 %38 to i64
  %41 = getelementptr inbounds float, float* %2, i64 %40
  %42 = load float, float* %41, align 4
  %43 = fmul float %42, %42
  %44 = fpext float %43 to double
  %45 = fadd double %37, %44
  store double %45, double* %13, align 8
  br label %46

46:                                               ; preds = %35, %39
  %47 = phi double [ %36, %35 ], [ %45, %39 ]
  %48 = tail call double @sqrt(double %47) #6
  store double %48, double* %13, align 8
  %49 = add nuw nsw i64 %12, 1
  %50 = icmp eq i64 %49, %6
  br i1 %50, label %51, label %11

51:                                               ; preds = %46, %3
  ret void
}

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #5

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !5, !3}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.unroll.disable"}
!10 = !{!11}
!11 = distinct !{!11, !12}
!12 = distinct !{!12, !"LVerDomain"}
!13 = !{!14}
!14 = distinct !{!14, !12}
!15 = distinct !{!15, !3}
!16 = distinct !{!16, !3}
!17 = distinct !{!17, !9}
!18 = distinct !{!18, !9}
