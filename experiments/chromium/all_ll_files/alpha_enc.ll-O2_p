; ModuleID = '../../third_party/libwebp/src/enc/alpha_enc.c'
source_filename = "../../third_party/libwebp/src/enc/alpha_enc.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.WebPAuxStats = type { i32, [5 x float], [3 x i32], [2 x i32], [3 x [4 x i32]], [4 x i32], [4 x i32], [4 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32] }
%struct.WebPConfig = type { i32, float, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VP8Encoder = type { %struct.WebPConfig*, %struct.WebPPicture*, %struct.VP8EncFilterHeader, %struct.VP8EncSegmentHeader, i32, i32, i32, i32, i32, %struct.VP8BitWriter, [8 x %struct.VP8BitWriter], %struct.VP8TBuffer, i32, i32, i8*, i32, %struct.WebPWorker, [4 x %struct.VP8SegmentInfo], i32, i32, i32, i32, i32, i32, i32, i32, %struct.VP8EncProba, [4 x i64], i64, i32, [3 x [4 x i32]], [3 x i32], i32, i32, i32, i32, i32, i32, i32, %struct.VP8MBInfo*, i8*, i32*, i8*, i8*, [4 x [64 x double]]*, [2 x [2 x i8]]* }
%struct.WebPPicture = type { i32, i32, i32, i32, i8*, i8*, i8*, i32, i32, i8*, i32, [2 x i32], i32*, i32, [3 x i32], i32 (i8*, i64, %struct.WebPPicture*)*, i8*, i32, i8*, %struct.WebPAuxStats*, i32, i32 (i32, %struct.WebPPicture*)*, i8*, [3 x i32], i8*, i8*, [8 x i32], i8*, i8*, [2 x i8*] }
%struct.VP8EncFilterHeader = type { i32, i32, i32, i32 }
%struct.VP8EncSegmentHeader = type { i32, i32, i32 }
%struct.VP8BitWriter = type { i32, i32, i32, i32, i8*, i64, i64, i32 }
%struct.VP8TBuffer = type { %struct.VP8Tokens*, %struct.VP8Tokens**, i16*, i32, i32, i32 }
%struct.VP8Tokens = type opaque
%struct.WebPWorker = type { i8*, i32, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.VP8SegmentInfo = type { %struct.VP8Matrix, %struct.VP8Matrix, %struct.VP8Matrix, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 }
%struct.VP8Matrix = type { [16 x i16], [16 x i16], [16 x i32], [16 x i32], [16 x i16] }
%struct.VP8EncProba = type { [3 x i8], i8, [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x i32]]]], [4 x [8 x [3 x [68 x i16]]]], [4 x [16 x [3 x i16*]]], i32, i32, i32 }
%struct.VP8MBInfo = type { i8, i8, [2 x i8] }
%struct.WebPWorkerInterface = type { void (%struct.WebPWorker*)*, i32 (%struct.WebPWorker*)*, i32 (%struct.WebPWorker*)*, void (%struct.WebPWorker*)*, void (%struct.WebPWorker*)*, void (%struct.WebPWorker*)* }
%struct.FilterTrial = type { i64, %struct.VP8BitWriter, %struct.WebPAuxStats }
%struct.VP8LBitWriter = type { i64, i32, i8*, i8*, i8*, i32 }

@__const.ApplyFiltersAndEncode.trial = private unnamed_addr constant { i64, { i32, i32, i32, i32, i8*, i64, i64, i32, [4 x i8] }, %struct.WebPAuxStats, [4 x i8] } { i64 -6148914691236517206, { i32, i32, i32, i32, i8*, i64, i64, i32, [4 x i8] } { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i8* inttoptr (i64 -6148914691236517206 to i8*), i64 -6148914691236517206, i64 -6148914691236517206, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA" }, %struct.WebPAuxStats { i32 -1431655766, [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [3 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766], [2 x i32] [i32 -1431655766, i32 -1431655766], [3 x [4 x i32]] [[4 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], [4 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], [4 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766]], [4 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], [4 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], [4 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, [2 x i32] [i32 -1431655766, i32 -1431655766] }, [4 x i8] c"\AA\AA\AA\AA" }, align 8
@WebPFilters = external local_unnamed_addr global [4 x void (i8*, i32, i32, i32, i8*)*], align 16
@__const.EncodeLossless.config = private unnamed_addr constant %struct.WebPConfig { i32 -1431655766, float 0xFFFFFFFFE0000000, i32 -1431655766, i32 -1431655766, i32 -1431655766, float 0xFFFFFFFFE0000000, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766 }, align 4
@WebPDispatchAlphaToGreen = external local_unnamed_addr global void (i8*, i32, i32, i32, i32*, i32)*, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @VP8EncInitAlpha(%struct.VP8Encoder*) local_unnamed_addr #0 {
  tail call void @WebPInitAlphaProcessing() #3
  %2 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 1
  %3 = load %struct.WebPPicture*, %struct.WebPPicture** %2, align 8
  %4 = tail call i32 @WebPPictureHasTransparency(%struct.WebPPicture* %3) #3
  %5 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 13
  store i32 %4, i32* %5, align 4
  %6 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 14
  store i8* null, i8** %6, align 8
  %7 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 15
  store i32 0, i32* %7, align 8
  %8 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 36
  %9 = load i32, i32* %8, align 8
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %11, label %20

11:                                               ; preds = %1
  %12 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 16
  %13 = tail call %struct.WebPWorkerInterface* @WebPGetWorkerInterface() #3
  %14 = getelementptr inbounds %struct.WebPWorkerInterface, %struct.WebPWorkerInterface* %13, i64 0, i32 0
  %15 = load void (%struct.WebPWorker*)*, void (%struct.WebPWorker*)** %14, align 8
  tail call void %15(%struct.WebPWorker* %12) #3
  %16 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 16, i32 3
  %17 = bitcast i8** %16 to %struct.VP8Encoder**
  store %struct.VP8Encoder* %0, %struct.VP8Encoder** %17, align 8
  %18 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 16, i32 4
  store i8* null, i8** %18, align 8
  %19 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 16, i32 2
  store i32 (i8*, i8*)* @CompressAlphaJob, i32 (i8*, i8*)** %19, align 8
  br label %20

20:                                               ; preds = %11, %1
  ret void
}

declare void @WebPInitAlphaProcessing() local_unnamed_addr #1

declare i32 @WebPPictureHasTransparency(%struct.WebPPicture*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare %struct.WebPWorkerInterface* @WebPGetWorkerInterface() local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal i32 @CompressAlphaJob(i8* nocapture, i8* nocapture readnone) #0 {
  %3 = alloca [256 x i8], align 16
  %4 = alloca %struct.FilterTrial, align 8
  %5 = alloca %struct.FilterTrial, align 8
  %6 = alloca i64, align 8
  %7 = bitcast i8* %0 to %struct.WebPConfig**
  %8 = load %struct.WebPConfig*, %struct.WebPConfig** %7, align 8
  %9 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %8, i64 0, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %8, i64 0, i32 13
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %8, i64 0, i32 14
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %8, i64 0, i32 12
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds i8, i8* %0, i64 8
  %18 = bitcast i8* %17 to %struct.WebPPicture**
  %19 = load %struct.WebPPicture*, %struct.WebPPicture** %18, align 8
  %20 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %19, i64 0, i32 2
  %21 = load i32, i32* %20, align 8
  %22 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %19, i64 0, i32 3
  %23 = load i32, i32* %22, align 4
  %24 = mul nsw i32 %23, %21
  %25 = sext i32 %24 to i64
  %26 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26) #3
  store i64 0, i64* %6, align 8
  %27 = icmp slt i32 %14, 100
  %28 = zext i1 %27 to i32
  %29 = icmp ugt i32 %14, 100
  %30 = icmp ugt i32 %16, 1
  %31 = or i1 %29, %30
  br i1 %31, label %224, label %32

32:                                               ; preds = %2
  %33 = icmp eq i32 %12, 0
  %34 = icmp eq i32 %12, 1
  %35 = select i1 %34, i32 6, i32 5
  %36 = icmp eq i32 %16, 0
  %37 = or i1 %33, %36
  %38 = select i1 %37, i32 0, i32 %35
  %39 = tail call i8* @WebPSafeMalloc(i64 1, i64 %25) #3
  %40 = icmp eq i8* %39, null
  br i1 %40, label %224, label %41

41:                                               ; preds = %32
  %42 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %19, i64 0, i32 9
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %19, i64 0, i32 10
  %45 = load i32, i32* %44, align 8
  tail call void @WebPCopyPlane(i8* %43, i32 %45, i8* nonnull %39, i32 %21, i32 %21, i32 %23) #3
  br i1 %27, label %46, label %60

46:                                               ; preds = %41
  %47 = icmp slt i32 %14, 71
  br i1 %47, label %48, label %53

48:                                               ; preds = %46
  %49 = trunc i32 %14 to i8
  %50 = udiv i8 %49, 5
  %51 = add nuw nsw i8 %50, 2
  %52 = zext i8 %51 to i32
  br label %56

53:                                               ; preds = %46
  %54 = shl i32 %14, 3
  %55 = add nsw i32 %54, -544
  br label %56

56:                                               ; preds = %53, %48
  %57 = phi i32 [ %52, %48 ], [ %55, %53 ]
  %58 = call i32 @QuantizeLevels(i8* nonnull %39, i32 %21, i32 %23, i32 %57, i64* nonnull %6) #3
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %225, label %60

60:                                               ; preds = %56, %41
  call void @VP8FiltersInit() #3
  %61 = bitcast %struct.FilterTrial* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 248, i8* nonnull %61) #3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %61, i8* align 8 bitcast ({ i64, { i32, i32, i32, i32, i8*, i64, i64, i32, [4 x i8] }, %struct.WebPAuxStats, [4 x i8] }* @__const.ApplyFiltersAndEncode.trial to i8*), i64 248, i1 false) #3
  switch i32 %38, label %170 [
    i32 6, label %62
    i32 0, label %171
  ]

62:                                               ; preds = %60
  %63 = icmp sgt i32 %10, 3
  %64 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %64) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %64, i8 0, i64 256, i1 false) #3
  %65 = icmp sgt i32 %23, 0
  br i1 %65, label %66, label %160

66:                                               ; preds = %62
  %67 = icmp sgt i32 %21, 0
  %68 = sext i32 %21 to i64
  %69 = zext i32 %23 to i64
  %70 = zext i32 %21 to i64
  %71 = add nsw i64 %70, -1
  %72 = and i64 %70, 3
  %73 = icmp ult i64 %71, 3
  %74 = sub nsw i64 %70, %72
  %75 = icmp eq i64 %72, 0
  br label %115

76:                                               ; preds = %76, %160
  %77 = phi i64 [ 0, %160 ], [ %105, %76 ]
  %78 = phi <4 x i32> [ zeroinitializer, %160 ], [ %103, %76 ]
  %79 = phi <4 x i32> [ zeroinitializer, %160 ], [ %104, %76 ]
  %80 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 %77
  %81 = bitcast i8* %80 to <4 x i8>*
  %82 = load <4 x i8>, <4 x i8>* %81, align 16
  %83 = getelementptr inbounds i8, i8* %80, i64 4
  %84 = bitcast i8* %83 to <4 x i8>*
  %85 = load <4 x i8>, <4 x i8>* %84, align 4
  %86 = icmp ne <4 x i8> %82, zeroinitializer
  %87 = icmp ne <4 x i8> %85, zeroinitializer
  %88 = zext <4 x i1> %86 to <4 x i32>
  %89 = zext <4 x i1> %87 to <4 x i32>
  %90 = add nuw nsw <4 x i32> %78, %88
  %91 = add nuw nsw <4 x i32> %79, %89
  %92 = or i64 %77, 8
  %93 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 %92
  %94 = bitcast i8* %93 to <4 x i8>*
  %95 = load <4 x i8>, <4 x i8>* %94, align 8
  %96 = getelementptr inbounds i8, i8* %93, i64 4
  %97 = bitcast i8* %96 to <4 x i8>*
  %98 = load <4 x i8>, <4 x i8>* %97, align 4
  %99 = icmp ne <4 x i8> %95, zeroinitializer
  %100 = icmp ne <4 x i8> %98, zeroinitializer
  %101 = zext <4 x i1> %99 to <4 x i32>
  %102 = zext <4 x i1> %100 to <4 x i32>
  %103 = add nuw nsw <4 x i32> %90, %101
  %104 = add nuw nsw <4 x i32> %91, %102
  %105 = add nuw nsw i64 %77, 16
  %106 = icmp eq i64 %105, 256
  br i1 %106, label %107, label %76, !llvm.loop !2

107:                                              ; preds = %76
  %108 = add nuw <4 x i32> %104, %103
  %109 = shufflevector <4 x i32> %108, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %110 = add <4 x i32> %108, %109
  %111 = shufflevector <4 x i32> %110, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %112 = add <4 x i32> %110, %111
  %113 = extractelement <4 x i32> %112, i32 0
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %64) #3
  %114 = icmp ult i32 %113, 17
  br i1 %114, label %163, label %161

115:                                              ; preds = %157, %66
  %116 = phi i64 [ 0, %66 ], [ %158, %157 ]
  %117 = mul nsw i64 %116, %68
  %118 = getelementptr inbounds i8, i8* %39, i64 %117
  br i1 %67, label %119, label %157

119:                                              ; preds = %115
  br i1 %73, label %145, label %120

120:                                              ; preds = %119, %120
  %121 = phi i64 [ %142, %120 ], [ 0, %119 ]
  %122 = phi i64 [ %143, %120 ], [ %74, %119 ]
  %123 = getelementptr inbounds i8, i8* %118, i64 %121
  %124 = load i8, i8* %123, align 1
  %125 = zext i8 %124 to i64
  %126 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 %125
  store i8 1, i8* %126, align 1
  %127 = or i64 %121, 1
  %128 = getelementptr inbounds i8, i8* %118, i64 %127
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i64
  %131 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 %130
  store i8 1, i8* %131, align 1
  %132 = or i64 %121, 2
  %133 = getelementptr inbounds i8, i8* %118, i64 %132
  %134 = load i8, i8* %133, align 1
  %135 = zext i8 %134 to i64
  %136 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 %135
  store i8 1, i8* %136, align 1
  %137 = or i64 %121, 3
  %138 = getelementptr inbounds i8, i8* %118, i64 %137
  %139 = load i8, i8* %138, align 1
  %140 = zext i8 %139 to i64
  %141 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 %140
  store i8 1, i8* %141, align 1
  %142 = add nuw nsw i64 %121, 4
  %143 = add i64 %122, -4
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %145, label %120

145:                                              ; preds = %120, %119
  %146 = phi i64 [ 0, %119 ], [ %142, %120 ]
  br i1 %75, label %157, label %147

147:                                              ; preds = %145, %147
  %148 = phi i64 [ %154, %147 ], [ %146, %145 ]
  %149 = phi i64 [ %155, %147 ], [ %72, %145 ]
  %150 = getelementptr inbounds i8, i8* %118, i64 %148
  %151 = load i8, i8* %150, align 1
  %152 = zext i8 %151 to i64
  %153 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 %152
  store i8 1, i8* %153, align 1
  %154 = add nuw nsw i64 %148, 1
  %155 = add i64 %149, -1
  %156 = icmp eq i64 %155, 0
  br i1 %156, label %157, label %147, !llvm.loop !4

157:                                              ; preds = %145, %147, %115
  %158 = add nuw nsw i64 %116, 1
  %159 = icmp eq i64 %158, %69
  br i1 %159, label %160, label %115

160:                                              ; preds = %157, %62
  br label %76

161:                                              ; preds = %107
  %162 = call i32 @WebPEstimateBestFilter(i8* nonnull %39, i32 %21, i32 %23, i32 %21) #3
  br label %163

163:                                              ; preds = %161, %107
  %164 = phi i32 [ %162, %161 ], [ 0, %107 ]
  %165 = shl i32 1, %164
  %166 = icmp ugt i32 %113, 192
  %167 = or i1 %63, %166
  %168 = zext i1 %167 to i32
  %169 = or i32 %165, %168
  br label %171

170:                                              ; preds = %60
  br label %171

171:                                              ; preds = %170, %163, %60
  %172 = phi i32 [ %169, %163 ], [ 15, %170 ], [ 1, %60 ]
  %173 = getelementptr inbounds %struct.FilterTrial, %struct.FilterTrial* %4, i64 0, i32 0
  store i64 4294967295, i64* %173, align 8
  %174 = getelementptr inbounds %struct.FilterTrial, %struct.FilterTrial* %4, i64 0, i32 1
  %175 = call i32 @VP8BitWriterInit(%struct.VP8BitWriter* %174, i64 0) #3
  %176 = icmp eq i32 %172, 1
  br i1 %176, label %208, label %177

177:                                              ; preds = %171
  %178 = call i8* @WebPSafeMalloc(i64 1, i64 %25) #3
  %179 = icmp eq i8* %178, null
  br i1 %179, label %220, label %180

180:                                              ; preds = %177
  %181 = bitcast %struct.FilterTrial* %5 to i8*
  %182 = getelementptr inbounds %struct.FilterTrial, %struct.FilterTrial* %5, i64 0, i32 0
  %183 = getelementptr inbounds %struct.FilterTrial, %struct.FilterTrial* %5, i64 0, i32 1
  br label %184

184:                                              ; preds = %200, %180
  %185 = phi i32 [ %172, %180 ], [ %203, %200 ]
  %186 = phi i32 [ 1, %180 ], [ %201, %200 ]
  %187 = phi i32 [ 0, %180 ], [ %202, %200 ]
  %188 = and i32 %185, 1
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %200, label %190

190:                                              ; preds = %184
  call void @llvm.lifetime.start.p0i8(i64 248, i8* nonnull %181) #3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %181, i8* align 8 bitcast ({ i64, { i32, i32, i32, i32, i8*, i64, i64, i32, [4 x i8] }, %struct.WebPAuxStats, [4 x i8] }* @__const.ApplyFiltersAndEncode.trial to i8*), i64 248, i1 false) #3
  %191 = call fastcc i32 @EncodeAlphaInternal(i8* nonnull %39, i32 %21, i32 %23, i32 %16, i32 %187, i32 %28, i32 %10, i8* nonnull %178, %struct.FilterTrial* nonnull %5) #3
  %192 = icmp eq i32 %191, 0
  br i1 %192, label %198, label %193

193:                                              ; preds = %190
  %194 = load i64, i64* %182, align 8
  %195 = load i64, i64* %173, align 8
  %196 = icmp ult i64 %194, %195
  br i1 %196, label %197, label %198

197:                                              ; preds = %193
  call void @VP8BitWriterWipeOut(%struct.VP8BitWriter* %174) #3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %61, i8* nonnull align 8 %181, i64 248, i1 false) #3
  br label %199

198:                                              ; preds = %193, %190
  call void @VP8BitWriterWipeOut(%struct.VP8BitWriter* %183) #3
  br label %199

199:                                              ; preds = %198, %197
  call void @llvm.lifetime.end.p0i8(i64 248, i8* nonnull %181) #3
  br label %200

200:                                              ; preds = %199, %184
  %201 = phi i32 [ %191, %199 ], [ %186, %184 ]
  %202 = add nuw nsw i32 %187, 1
  %203 = lshr i32 %185, 1
  %204 = icmp ne i32 %201, 0
  %205 = icmp ne i32 %203, 0
  %206 = and i1 %205, %204
  br i1 %206, label %184, label %207

207:                                              ; preds = %200
  call void @WebPSafeFree(i8* nonnull %178) #3
  br label %210

208:                                              ; preds = %171
  %209 = call fastcc i32 @EncodeAlphaInternal(i8* nonnull %39, i32 %21, i32 %23, i32 %16, i32 0, i32 %28, i32 %10, i8* null, %struct.FilterTrial* nonnull %4) #3
  br label %210

210:                                              ; preds = %208, %207
  %211 = phi i32 [ %209, %208 ], [ %201, %207 ]
  %212 = icmp eq i32 %211, 0
  br i1 %212, label %219, label %213

213:                                              ; preds = %210
  %214 = getelementptr inbounds %struct.FilterTrial, %struct.FilterTrial* %4, i64 0, i32 1, i32 5
  %215 = load i64, i64* %214, align 8
  %216 = getelementptr inbounds %struct.FilterTrial, %struct.FilterTrial* %4, i64 0, i32 1, i32 4
  %217 = bitcast i8** %216 to i64*
  %218 = load i64, i64* %217, align 8
  br label %220

219:                                              ; preds = %210
  call void @VP8BitWriterWipeOut(%struct.VP8BitWriter* %174) #3
  br label %220

220:                                              ; preds = %219, %213, %177
  %221 = phi i64 [ 0, %219 ], [ %218, %213 ], [ 0, %177 ]
  %222 = phi i64 [ 0, %219 ], [ %215, %213 ], [ 0, %177 ]
  %223 = phi i32 [ 0, %219 ], [ %211, %213 ], [ 0, %177 ]
  call void @llvm.lifetime.end.p0i8(i64 248, i8* nonnull %61) #3
  br label %225

224:                                              ; preds = %2, %32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26) #3
  br label %240

225:                                              ; preds = %56, %220
  %226 = phi i64 [ 0, %56 ], [ %221, %220 ]
  %227 = phi i64 [ 0, %56 ], [ %222, %220 ]
  %228 = phi i32 [ 0, %56 ], [ %223, %220 ]
  call void @WebPSafeFree(i8* nonnull %39) #3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26) #3
  %229 = icmp eq i32 %228, 0
  br i1 %229, label %240, label %230

230:                                              ; preds = %225
  %231 = icmp ugt i64 %227, 4294967295
  br i1 %231, label %232, label %234

232:                                              ; preds = %230
  %233 = inttoptr i64 %226 to i8*
  call void @WebPSafeFree(i8* %233) #3
  br label %240

234:                                              ; preds = %230
  %235 = trunc i64 %227 to i32
  %236 = getelementptr inbounds i8, i8* %0, i64 552
  %237 = bitcast i8* %236 to i32*
  store i32 %235, i32* %237, align 8
  %238 = getelementptr inbounds i8, i8* %0, i64 544
  %239 = bitcast i8* %238 to i64*
  store i64 %226, i64* %239, align 8
  br label %240

240:                                              ; preds = %224, %225, %234, %232
  %241 = phi i32 [ 0, %232 ], [ 1, %234 ], [ 0, %225 ], [ 0, %224 ]
  ret i32 %241
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @VP8EncStartAlpha(%struct.VP8Encoder*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 13
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %23, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 36
  %7 = load i32, i32* %6, align 8
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %20

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 16
  %11 = tail call %struct.WebPWorkerInterface* @WebPGetWorkerInterface() #3
  %12 = getelementptr inbounds %struct.WebPWorkerInterface, %struct.WebPWorkerInterface* %11, i64 0, i32 1
  %13 = load i32 (%struct.WebPWorker*)*, i32 (%struct.WebPWorker*)** %12, align 8
  %14 = tail call i32 %13(%struct.WebPWorker* %10) #3
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %23, label %16

16:                                               ; preds = %9
  %17 = tail call %struct.WebPWorkerInterface* @WebPGetWorkerInterface() #3
  %18 = getelementptr inbounds %struct.WebPWorkerInterface, %struct.WebPWorkerInterface* %17, i64 0, i32 3
  %19 = load void (%struct.WebPWorker*)*, void (%struct.WebPWorker*)** %18, align 8
  tail call void %19(%struct.WebPWorker* %10) #3
  br label %23

20:                                               ; preds = %5
  %21 = bitcast %struct.VP8Encoder* %0 to i8*
  %22 = tail call i32 @CompressAlphaJob(i8* %21, i8* null)
  br label %23

23:                                               ; preds = %1, %16, %9, %20
  %24 = phi i32 [ %22, %20 ], [ 1, %16 ], [ 0, %9 ], [ 1, %1 ]
  ret i32 %24
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @VP8EncFinishAlpha(%struct.VP8Encoder*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 13
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %16, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 36
  %7 = load i32, i32* %6, align 8
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %16

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 16
  %11 = tail call %struct.WebPWorkerInterface* @WebPGetWorkerInterface() #3
  %12 = getelementptr inbounds %struct.WebPWorkerInterface, %struct.WebPWorkerInterface* %11, i64 0, i32 2
  %13 = load i32 (%struct.WebPWorker*)*, i32 (%struct.WebPWorker*)** %12, align 8
  %14 = tail call i32 %13(%struct.WebPWorker* %10) #3
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %23, label %16

16:                                               ; preds = %9, %1, %5
  %17 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 1
  %18 = load %struct.WebPPicture*, %struct.WebPPicture** %17, align 8
  %19 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 12
  %20 = load i32, i32* %19, align 8
  %21 = add nsw i32 %20, 20
  %22 = tail call i32 @WebPReportProgress(%struct.WebPPicture* %18, i32 %21, i32* %19) #3
  br label %23

23:                                               ; preds = %9, %16
  %24 = phi i32 [ %22, %16 ], [ 0, %9 ]
  ret i32 %24
}

declare i32 @WebPReportProgress(%struct.WebPPicture*, i32, i32*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @VP8EncDeleteAlpha(%struct.VP8Encoder*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 36
  %3 = load i32, i32* %2, align 8
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %5, label %14

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 16
  %7 = tail call %struct.WebPWorkerInterface* @WebPGetWorkerInterface() #3
  %8 = getelementptr inbounds %struct.WebPWorkerInterface, %struct.WebPWorkerInterface* %7, i64 0, i32 2
  %9 = load i32 (%struct.WebPWorker*)*, i32 (%struct.WebPWorker*)** %8, align 8
  %10 = tail call i32 %9(%struct.WebPWorker* %6) #3
  %11 = tail call %struct.WebPWorkerInterface* @WebPGetWorkerInterface() #3
  %12 = getelementptr inbounds %struct.WebPWorkerInterface, %struct.WebPWorkerInterface* %11, i64 0, i32 5
  %13 = load void (%struct.WebPWorker*)*, void (%struct.WebPWorker*)** %12, align 8
  tail call void %13(%struct.WebPWorker* %6) #3
  br label %14

14:                                               ; preds = %5, %1
  %15 = phi i32 [ %10, %5 ], [ 1, %1 ]
  %16 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 14
  %17 = load i8*, i8** %16, align 8
  tail call void @WebPSafeFree(i8* %17) #3
  %18 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 13
  %19 = bitcast i32* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %19, i8 0, i64 16, i1 false)
  ret i32 %15
}

declare void @WebPSafeFree(i8*) local_unnamed_addr #1

declare i8* @WebPSafeMalloc(i64, i64) local_unnamed_addr #1

declare void @WebPCopyPlane(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #1

declare i32 @QuantizeLevels(i8*, i32, i32, i32, i64*) local_unnamed_addr #1

declare void @VP8FiltersInit() local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @EncodeAlphaInternal(i8*, i32, i32, i32, i32, i32, i32, i8*, %struct.FilterTrial*) unnamed_addr #0 {
  %10 = alloca %struct.WebPConfig, align 4
  %11 = alloca %struct.WebPPicture, align 8
  %12 = alloca i8, align 1
  %13 = alloca %struct.VP8LBitWriter, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %12) #3
  store i8 -86, i8* %12, align 1
  %14 = mul nsw i32 %2, %1
  %15 = sext i32 %14 to i64
  %16 = bitcast %struct.VP8LBitWriter* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %16) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 -86, i64 48, i1 false)
  %17 = sext i32 %4 to i64
  %18 = getelementptr inbounds [4 x void (i8*, i32, i32, i32, i8*)*], [4 x void (i8*, i32, i32, i32, i8*)*]* @WebPFilters, i64 0, i64 %17
  %19 = load void (i8*, i32, i32, i32, i8*)*, void (i8*, i32, i32, i32, i8*)** %18, align 8
  %20 = icmp eq void (i8*, i32, i32, i32, i8*)* %19, null
  br i1 %20, label %22, label %21

21:                                               ; preds = %9
  tail call void %19(i8* %0, i32 %1, i32 %2, i32 %1, i8* %7) #3
  br label %22

22:                                               ; preds = %9, %21
  %23 = phi i8* [ %7, %21 ], [ %0, %9 ]
  %24 = icmp eq i32 %3, 0
  br i1 %24, label %85, label %25

25:                                               ; preds = %22
  %26 = lshr i64 %15, 3
  %27 = call i32 @VP8LBitWriterInit(%struct.VP8LBitWriter* nonnull %13, i64 %26) #3
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %84, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %struct.FilterTrial, %struct.FilterTrial* %8, i64 0, i32 2
  %31 = bitcast %struct.WebPConfig* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 116, i8* nonnull %31) #3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %31, i8* align 4 bitcast (%struct.WebPConfig* @__const.EncodeLossless.config to i8*), i64 116, i1 false) #3
  %32 = bitcast %struct.WebPPicture* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %32) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %32, i8 -86, i64 256, i1 false) #3
  %33 = call i32 @WebPPictureInitInternal(%struct.WebPPicture* nonnull %11, i32 527) #3
  %34 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %11, i64 0, i32 2
  store i32 %1, i32* %34, align 8
  %35 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %11, i64 0, i32 3
  store i32 %2, i32* %35, align 4
  %36 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %11, i64 0, i32 0
  store i32 1, i32* %36, align 8
  %37 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %11, i64 0, i32 19
  store %struct.WebPAuxStats* %30, %struct.WebPAuxStats** %37, align 8
  %38 = call i32 @WebPPictureAlloc(%struct.WebPPicture* nonnull %11) #3
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %66, label %40

40:                                               ; preds = %29
  %41 = icmp eq i32 %5, 0
  %42 = load void (i8*, i32, i32, i32, i32*, i32)*, void (i8*, i32, i32, i32, i32*, i32)** @WebPDispatchAlphaToGreen, align 8
  %43 = load i32, i32* %34, align 8
  %44 = load i32, i32* %35, align 4
  %45 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %11, i64 0, i32 12
  %46 = load i32*, i32** %45, align 8
  %47 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %11, i64 0, i32 13
  %48 = load i32, i32* %47, align 8
  call void %42(i8* %23, i32 %1, i32 %43, i32 %44, i32* %46, i32 %48) #3
  %49 = call i32 @WebPConfigInitInternal(%struct.WebPConfig* nonnull %10, i32 0, float 7.500000e+01, i32 527) #3
  %50 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %10, i64 0, i32 0
  store i32 1, i32* %50, align 4
  %51 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %10, i64 0, i32 24
  store i32 1, i32* %51, align 4
  %52 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %10, i64 0, i32 2
  store i32 %6, i32* %52, align 4
  %53 = icmp eq i32 %6, 6
  %54 = and i1 %41, %53
  %55 = sitofp i32 %6 to float
  %56 = fmul float %55, 8.000000e+00
  %57 = select i1 %54, float 1.000000e+02, float %56
  %58 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %10, i64 0, i32 1
  store float %57, float* %58, align 4
  %59 = call i32 @VP8LEncodeStream(%struct.WebPConfig* nonnull %10, %struct.WebPPicture* nonnull %11, %struct.VP8LBitWriter* nonnull %13, i32 0) #3
  %60 = icmp eq i32 %59, 0
  call void @WebPPictureFree(%struct.WebPPicture* nonnull %11) #3
  br i1 %60, label %61, label %65

61:                                               ; preds = %40
  %62 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %13, i64 0, i32 5
  %63 = load i32, i32* %62, align 8
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %67, label %65

65:                                               ; preds = %61, %40
  call void @VP8LBitWriterWipeOut(%struct.VP8LBitWriter* nonnull %13) #3
  br label %66

66:                                               ; preds = %65, %29
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %32) #3
  call void @llvm.lifetime.end.p0i8(i64 116, i8* nonnull %31) #3
  br label %84

67:                                               ; preds = %61
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %32) #3
  call void @llvm.lifetime.end.p0i8(i64 116, i8* nonnull %31) #3
  %68 = call i8* @VP8LBitWriterFinish(%struct.VP8LBitWriter* nonnull %13) #3
  %69 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %13, i64 0, i32 3
  %70 = bitcast i8** %69 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %13, i64 0, i32 2
  %73 = bitcast i8** %72 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = sub i64 %71, %74
  %76 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %13, i64 0, i32 1
  %77 = load i32, i32* %76, align 8
  %78 = add nsw i32 %77, 7
  %79 = ashr i32 %78, 3
  %80 = sext i32 %79 to i64
  %81 = add nsw i64 %75, %80
  %82 = icmp ugt i64 %81, %15
  br i1 %82, label %83, label %85

83:                                               ; preds = %67
  call void @VP8LBitWriterWipeOut(%struct.VP8LBitWriter* nonnull %13) #3
  br label %85

84:                                               ; preds = %25, %66
  call void @VP8LBitWriterWipeOut(%struct.VP8LBitWriter* nonnull %13) #3
  br label %120

85:                                               ; preds = %67, %83, %22
  %86 = phi i32 [ 0, %83 ], [ %3, %67 ], [ 0, %22 ]
  %87 = phi i8* [ %68, %83 ], [ %68, %67 ], [ null, %22 ]
  %88 = phi i64 [ %81, %83 ], [ %81, %67 ], [ 0, %22 ]
  %89 = icmp eq i32 %86, 0
  %90 = select i1 %89, i64 %15, i64 %88
  %91 = shl i32 %4, 2
  %92 = or i32 %86, %91
  %93 = trunc i32 %92 to i8
  %94 = icmp eq i32 %5, 0
  %95 = or i8 %93, 16
  %96 = select i1 %94, i8 %93, i8 %95
  store i8 %96, i8* %12, align 1
  %97 = getelementptr inbounds %struct.FilterTrial, %struct.FilterTrial* %8, i64 0, i32 1
  %98 = add i64 %90, 1
  %99 = call i32 @VP8BitWriterInit(%struct.VP8BitWriter* %97, i64 %98) #3
  %100 = call i32 @VP8BitWriterAppend(%struct.VP8BitWriter* %97, i8* nonnull %12, i64 1) #3
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %106, label %102

102:                                              ; preds = %85
  %103 = select i1 %89, i8* %23, i8* %87
  %104 = call i32 @VP8BitWriterAppend(%struct.VP8BitWriter* %97, i8* %103, i64 %90) #3
  %105 = icmp ne i32 %104, 0
  br label %106

106:                                              ; preds = %85, %102
  %107 = phi i1 [ false, %85 ], [ %105, %102 ]
  br i1 %89, label %109, label %108

108:                                              ; preds = %106
  call void @VP8LBitWriterWipeOut(%struct.VP8LBitWriter* nonnull %13) #3
  br label %109

109:                                              ; preds = %106, %108
  br i1 %107, label %110, label %115

110:                                              ; preds = %109
  %111 = getelementptr inbounds %struct.FilterTrial, %struct.FilterTrial* %8, i64 0, i32 1, i32 7
  %112 = load i32, i32* %111, align 8
  %113 = icmp eq i32 %112, 0
  %114 = zext i1 %113 to i32
  br label %115

115:                                              ; preds = %110, %109
  %116 = phi i32 [ 0, %109 ], [ %114, %110 ]
  %117 = getelementptr inbounds %struct.FilterTrial, %struct.FilterTrial* %8, i64 0, i32 1, i32 5
  %118 = load i64, i64* %117, align 8
  %119 = getelementptr inbounds %struct.FilterTrial, %struct.FilterTrial* %8, i64 0, i32 0
  store i64 %118, i64* %119, align 8
  br label %120

120:                                              ; preds = %115, %84
  %121 = phi i32 [ %116, %115 ], [ 0, %84 ]
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %16) #3
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %12) #3
  ret i32 %121
}

declare void @VP8BitWriterWipeOut(%struct.VP8BitWriter*) local_unnamed_addr #1

declare i32 @WebPEstimateBestFilter(i8*, i32, i32, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare i32 @VP8BitWriterInit(%struct.VP8BitWriter*, i64) local_unnamed_addr #1

declare i32 @VP8LBitWriterInit(%struct.VP8LBitWriter*, i64) local_unnamed_addr #1

declare i8* @VP8LBitWriterFinish(%struct.VP8LBitWriter*) local_unnamed_addr #1

declare void @VP8LBitWriterWipeOut(%struct.VP8LBitWriter*) local_unnamed_addr #1

declare i32 @VP8BitWriterAppend(%struct.VP8BitWriter*, i8*, i64) local_unnamed_addr #1

declare i32 @WebPPictureAlloc(%struct.WebPPicture*) local_unnamed_addr #1

declare i32 @VP8LEncodeStream(%struct.WebPConfig*, %struct.WebPPicture*, %struct.VP8LBitWriter*, i32) local_unnamed_addr #1

declare void @WebPPictureFree(%struct.WebPPicture*) local_unnamed_addr #1

declare i32 @WebPPictureInitInternal(%struct.WebPPicture*, i32) local_unnamed_addr #1

declare i32 @WebPConfigInitInternal(%struct.WebPConfig*, i32, float, i32) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
