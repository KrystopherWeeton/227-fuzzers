; ModuleID = '../../native_client/src/trusted/service_runtime/sel_ldr_standard.c'
source_filename = "../../native_client/src/trusted/service_runtime/sel_ldr_standard.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.NaClApp = type { i8, i64, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, %struct.NaClMutex, %struct.NaClCondVar, [151 x %struct.NaClSyscallTableEntry], %struct.NaClResourceNaClApp, i32, i32, %struct.NaClVmmap, %struct.NaClIntervalMultiset*, %struct.NaClDescEffector*, i32, i32, %struct.NaClDesc*, %struct.NaClMutex, i8*, %struct.NaClDynamicRegion*, i32, i32, i32, i32, i64, i32, i32, i32, %struct.NaClCPUFeaturesAbstract*, %struct.NaClValidationCache*, i32, i32, i32, i32, i32, i64, %struct.NaClMutex, %struct.DynArray, i32, %struct.NaClFastMutex, %struct.DynArray, %struct.NaClDebugCallbacks*, %struct.NaClDesc*, %struct.NaClDesc*, %struct.NaClMutex, i32, i32, i32, i32, i32, i32, i32, %struct.NaClValidatorInterface* }
%struct.NaClCondVar = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon.0, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon = type { i64 }
%union.anon.0 = type { i64 }
%struct.NaClSyscallTableEntry = type { i32 (%struct.NaClAppThread*)* }
%struct.NaClAppThread = type { %struct.NaClThreadContext, %struct.NaClMutex, %struct.NaClApp*, i32, i32, %struct.NaClThread, %struct.NaClMutex, i32, %struct.NaClAppThreadSuspendedRegisters*, i32, i64, i8*, i32, i32, i32, %struct.NaClListNode, i32, %struct.NaClCondVar }
%struct.NaClThreadContext = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, i32, i16, i16, i64, i32, i32 }
%struct.NaClThread = type { i64 }
%struct.NaClAppThreadSuspendedRegisters = type opaque
%struct.NaClListNode = type { %struct.NaClListNode*, %struct.NaClListNode* }
%struct.NaClResourceNaClApp = type { %struct.NaClResource, %struct.NaClApp* }
%struct.NaClResource = type { %struct.NaClResourceSchemes*, i64 }
%struct.NaClResourceSchemes = type { i8*, i32, %struct.NaClDesc* (%struct.NaClResource*, i8*, i32, i32, i32)* }
%struct.NaClVmmap = type { %struct.NaClVmmapEntry**, i64, i64, i32 }
%struct.NaClVmmapEntry = type { i64, i64, i32, i32, i32, %struct.NaClDesc*, i64, i64 }
%struct.NaClIntervalMultiset = type { %struct.NaClIntervalMultisetVtbl* }
%struct.NaClIntervalMultisetVtbl = type { void (%struct.NaClIntervalMultiset*)*, void (%struct.NaClIntervalMultiset*, i32, i32)*, void (%struct.NaClIntervalMultiset*, i32, i32)*, i32 (%struct.NaClIntervalMultiset*, i32, i32)* }
%struct.NaClDescEffector = type opaque
%struct.NaClDynamicRegion = type { i64, i64, i32, i32 }
%struct.NaClCPUFeaturesAbstract = type opaque
%struct.NaClValidationCache = type opaque
%struct.NaClFastMutex = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.DynArray = type { i64, i8**, i64, i32*, i64 }
%struct.NaClDebugCallbacks = type { void (%struct.NaClAppThread*)*, void (%struct.NaClAppThread*)*, void ()* }
%struct.NaClDesc = type { %struct.NaClRefCount, i32, i32, i32, i8* }
%struct.NaClRefCount = type { %struct.NaClRefCountVtbl*, %struct.NaClFastMutex, i64 }
%struct.NaClRefCountVtbl = type { void (%struct.NaClRefCount*)* }
%struct.NaClMutex = type { %union.pthread_mutex_t, i32 }
%struct.NaClValidatorInterface = type { i32, i32, i32, i32 (i64, i8*, i64, i32, i32, i32, %struct.NaClCPUFeaturesAbstract*, %struct.NaClValidationMetadata*, %struct.NaClValidationCache*)*, i32 (i64, i8*, i8*, i64, %struct.NaClCPUFeaturesAbstract*, i32 (i8*, i8*, i8)*)*, i32 (i64, i8*, i8*, i64, %struct.NaClCPUFeaturesAbstract*)*, i64, void (%struct.NaClCPUFeaturesAbstract*)*, void (%struct.NaClCPUFeaturesAbstract*)*, i32 (i64, i64, i8*, i64, %struct.NaClCPUFeaturesAbstract*)* }
%struct.NaClValidationMetadata = type opaque
%struct.NaClPerfCounter = type { [128 x i8], i32, [16 x %struct.nacl_abi_timeval], [16 x [20 x i8]] }
%struct.nacl_abi_timeval = type { i64, i32 }
%struct.NaClElfImageInfo = type { i64, i64, i64, i64, i64, i64 }
%struct.NaClElfImage = type opaque

@.str = private unnamed_addr constant [49 x i8] c"Missing gap between text and data for halt_sled\0A\00", align 1
@.str.1 = private unnamed_addr constant [51 x i8] c"Missing gap between text and rodata for halt_sled\0A\00", align 1
@.str.2 = private unnamed_addr constant [40 x i8] c"Fatal error in file %s, line %d: !(%s)\0A\00", align 1
@.str.3 = private unnamed_addr constant [67 x i8] c"../../native_client/src/trusted/service_runtime/sel_ldr_standard.c\00", align 1
@.str.4 = private unnamed_addr constant [32 x i8] c"page_pad >= NACL_HALT_SLED_SIZE\00", align 1
@.str.5 = private unnamed_addr constant [51 x i8] c"page_pad < NACL_MAP_PAGESIZE + NACL_HALT_SLED_SIZE\00", align 1
@.str.6 = private unnamed_addr constant [40 x i8] c"Filling with halts: %08lx, %08lx bytes\0A\00", align 1
@.str.7 = private unnamed_addr constant [26 x i8] c"data segment is not last\0A\00", align 1
@.str.8 = private unnamed_addr constant [49 x i8] c"no data segment, but rodata segment is not last\0A\00", align 1
@.str.9 = private unnamed_addr constant [23 x i8] c"rodata_overlaps data.\0A\00", align 1
@.str.10 = private unnamed_addr constant [48 x i8] c"rodata_start not a multiple of allocation size\0A\00", align 1
@.str.11 = private unnamed_addr constant [28 x i8] c"NaClApp addr space layout:\0A\00", align 1
@.str.12 = private unnamed_addr constant [36 x i8] c"nap->static_text_end    = 0x%016lx\0A\00", align 1
@.str.13 = private unnamed_addr constant [36 x i8] c"nap->dynamic_text_start = 0x%016lx\0A\00", align 1
@.str.14 = private unnamed_addr constant [36 x i8] c"nap->dynamic_text_end   = 0x%016lx\0A\00", align 1
@.str.15 = private unnamed_addr constant [36 x i8] c"nap->rodata_start       = 0x%016lx\0A\00", align 1
@.str.16 = private unnamed_addr constant [36 x i8] c"nap->data_start         = 0x%016lx\0A\00", align 1
@.str.17 = private unnamed_addr constant [36 x i8] c"nap->data_end           = 0x%016lx\0A\00", align 1
@.str.18 = private unnamed_addr constant [36 x i8] c"nap->break_addr         = 0x%016lx\0A\00", align 1
@.str.19 = private unnamed_addr constant [36 x i8] c"nap->initial_entry_pt   = 0x%016lx\0A\00", align 1
@.str.20 = private unnamed_addr constant [36 x i8] c"nap->user_entry_pt      = 0x%016lx\0A\00", align 1
@.str.21 = private unnamed_addr constant [32 x i8] c"nap->bundle_size        = 0x%x\0A\00", align 1
@.str.22 = private unnamed_addr constant [16 x i8] c"NaClAppLoadFile\00", align 1
@.str.23 = private unnamed_addr constant [77 x i8] c"NaClAppLoadFileAslr: Code segment size (%lu bytes) exceeds limit (%d bytes)\0A\00", align 1
@.str.24 = private unnamed_addr constant [49 x i8] c"Values from NaClElfImageValidateProgramHeaders:\0A\00", align 1
@.str.25 = private unnamed_addr constant [24 x i8] c"rodata_start = 0x%08lx\0A\00", align 1
@.str.26 = private unnamed_addr constant [24 x i8] c"rodata_end   = 0x%08lx\0A\00", align 1
@.str.27 = private unnamed_addr constant [24 x i8] c"data_start   = 0x%08lx\0A\00", align 1
@.str.28 = private unnamed_addr constant [24 x i8] c"data_end     = 0x%08lx\0A\00", align 1
@.str.29 = private unnamed_addr constant [24 x i8] c"max_vaddr    = 0x%08lx\0A\00", align 1
@.str.30 = private unnamed_addr constant [26 x i8] c"Allocating address space\0A\00", align 1
@.str.31 = private unnamed_addr constant [18 x i8] c"PreAllocAddrSpace\00", align 1
@.str.32 = private unnamed_addr constant [16 x i8] c"*AllocAddrSpace\00", align 1
@.str.33 = private unnamed_addr constant [21 x i8] c"Loading into memory\0A\00", align 1
@.str.34 = private unnamed_addr constant [71 x i8] c"NaClAppLoadFile: Failed to make image pages writable. Error code 0x%x\0A\00", align 1
@.str.35 = private unnamed_addr constant [18 x i8] c"*NaClElfImageLoad\00", align 1
@.str.36 = private unnamed_addr constant [70 x i8] c"Replacing gap between static text and (ro)data with shareable memory\0A\00", align 1
@.str.37 = private unnamed_addr constant [13 x i8] c"*MakeDynText\00", align 1
@.str.38 = private unnamed_addr constant [82 x i8] c"Main executable segment hit validation cache and mapped in, skipping validation.\0A\00", align 1
@.str.39 = private unnamed_addr constant [18 x i8] c"Validating image\0A\00", align 1
@.str.40 = private unnamed_addr constant [13 x i8] c"*ValidateImg\00", align 1
@.str.41 = private unnamed_addr constant [28 x i8] c"Initializing arch switcher\0A\00", align 1
@.str.42 = private unnamed_addr constant [23 x i8] c"Installing trampoline\0A\00", align 1
@.str.43 = private unnamed_addr constant [24 x i8] c"Installing springboard\0A\00", align 1
@.str.44 = private unnamed_addr constant [28 x i8] c"Applying memory protection\0A\00", align 1
@.str.45 = private unnamed_addr constant [23 x i8] c"NaClAppLoadFile done; \00", align 1
@.str.46 = private unnamed_addr constant [12 x i8] c"EndLoadFile\00", align 1
@.str.47 = private unnamed_addr constant [10 x i8] c"argc >= 0\00", align 1
@.str.48 = private unnamed_addr constant [26 x i8] c"NULL != argv || 0 == argc\00", align 1
@.str.49 = private unnamed_addr constant [89 x i8] c"NaClCreateMainThread: ptr_tbl_size cause size of argv / environment copy to overflow!?!\0A\00", align 1
@.str.50 = private unnamed_addr constant [27 x i8] c"setting stack to : %016lx\0A\00", align 1
@.str.51 = private unnamed_addr constant [41 x i8] c"0 == (stack_ptr & NACL_STACK_ALIGN_MASK)\00", align 1
@.str.52 = private unnamed_addr constant [31 x i8] c"stack_ptr not aligned: %016lx\0A\00", align 1
@.str.53 = private unnamed_addr constant [26 x i8] c"copying arg %d  %p -> %p\0A\00", align 1
@.str.54 = private unnamed_addr constant [26 x i8] c"copying env %d  %p -> %p\0A\00", align 1
@.str.55 = private unnamed_addr constant [48 x i8] c"(char *) p == (char *) stack_ptr + ptr_tbl_size\00", align 1
@.str.56 = private unnamed_addr constant [27 x i8] c"system stack ptr : %016lx\0A\00", align 1
@.str.57 = private unnamed_addr constant [27 x i8] c"  user stack ptr : %016lx\0A\00", align 1
@.str.58 = private unnamed_addr constant [50 x i8] c"NaClWaitForMainThreadToExit: taking NaClApp lock\0A\00", align 1
@.str.59 = private unnamed_addr constant [26 x i8] c" waiting for exit status\0A\00", align 1
@.str.60 = private unnamed_addr constant [47 x i8] c" wakeup, nap->running %d, nap->exit_status %d\0A\00", align 1
@.str.61 = private unnamed_addr constant [91 x i8] c"NaClCreateAdditionalThread: could not allocate thread.  Returning EAGAIN per POSIX specs.\0A\00", align 1
@.str.62 = private unnamed_addr constant [71 x i8] c"NaClSysToUser: sysaddr 0x%08lx, mem_start 0x%08lx, addr space %d bits\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @NaClFillEndOfTextRegion(%struct.NaClApp* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 11
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %12, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 7
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, 32
  %9 = and i64 %3, -65536
  %10 = icmp ugt i64 %8, %9
  br i1 %10, label %11, label %12

11:                                               ; preds = %5
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str, i64 0, i64 0)) #8
  br label %12

12:                                               ; preds = %1, %11, %5
  %13 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 10
  %14 = load i64, i64* %13, align 8
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %22, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 7
  %18 = load i64, i64* %17, align 8
  %19 = add i64 %18, 32
  %20 = icmp ugt i64 %19, %14
  br i1 %20, label %21, label %22

21:                                               ; preds = %16
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.1, i64 0, i64 0)) #8
  br label %22

22:                                               ; preds = %12, %21, %16
  %23 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 28
  %24 = load %struct.NaClDesc*, %struct.NaClDesc** %23, align 8
  %25 = icmp eq %struct.NaClDesc* %24, null
  %26 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 7
  %27 = load i64, i64* %26, align 8
  br i1 %25, label %28, label %37

28:                                               ; preds = %22
  %29 = add i64 %27, 65567
  %30 = and i64 %29, -65536
  %31 = sub i64 %30, %27
  %32 = icmp ugt i64 %31, 31
  br i1 %32, label %34, label %33

33:                                               ; preds = %28
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.3, i64 0, i64 0), i32 81, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.4, i64 0, i64 0)) #8
  br label %41

34:                                               ; preds = %28
  %35 = icmp ult i64 %31, 65568
  br i1 %35, label %41, label %36

36:                                               ; preds = %34
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.3, i64 0, i64 0), i32 82, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.5, i64 0, i64 0)) #8
  br label %41

37:                                               ; preds = %22
  %38 = add i64 %27, 65535
  %39 = and i64 %38, -65536
  %40 = sub i64 %39, %27
  br label %41

41:                                               ; preds = %33, %34, %36, %37
  %42 = phi i64 [ %31, %34 ], [ %31, %36 ], [ %40, %37 ], [ %31, %33 ]
  %43 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 3
  %44 = load i64, i64* %43, align 8
  %45 = load i64, i64* %26, align 8
  %46 = add i64 %45, %44
  tail call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.6, i64 0, i64 0), i64 %46, i64 %42) #8
  %47 = load i64, i64* %43, align 8
  %48 = load i64, i64* %26, align 8
  %49 = add i64 %48, %47
  %50 = inttoptr i64 %49 to i8*
  tail call void @NaClFillMemoryRegionWithHalt(i8* %50, i64 %42) #8
  %51 = load i64, i64* %26, align 8
  %52 = add i64 %51, %42
  store i64 %52, i64* %26, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @NaClLog(i32, i8*, ...) local_unnamed_addr #2

declare void @NaClFillMemoryRegionWithHalt(i8*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClCheckAddressSpaceLayoutSanity(%struct.NaClApp* nocapture readonly, i64, i64, i64) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 11
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %11, label %8

8:                                                ; preds = %4
  %9 = icmp eq i64 %2, %3
  br i1 %9, label %20, label %10

10:                                               ; preds = %8
  tail call void (i32, i8*, ...) @NaClLog(i32 -1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.7, i64 0, i64 0)) #8
  br label %50

11:                                               ; preds = %4
  %12 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 10
  %13 = load i64, i64* %12, align 8
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %44, label %15

15:                                               ; preds = %11
  %16 = add i64 %1, 65535
  %17 = and i64 %16, -65536
  %18 = icmp eq i64 %17, %3
  br i1 %18, label %30, label %19

19:                                               ; preds = %15
  tail call void (i32, i8*, ...) @NaClLog(i32 -1, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.8, i64 0, i64 0)) #8
  br label %50

20:                                               ; preds = %8
  %21 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 10
  %22 = load i64, i64* %21, align 8
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %37, label %24

24:                                               ; preds = %20
  %25 = xor i1 %7, true
  %26 = and i64 %6, -65536
  %27 = icmp ult i64 %26, %1
  %28 = and i1 %27, %25
  br i1 %28, label %29, label %30

29:                                               ; preds = %24
  tail call void (i32, i8*, ...) @NaClLog(i32 -1, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.9, i64 0, i64 0)) #8
  br label %50

30:                                               ; preds = %15, %24
  %31 = phi i64 [ %22, %24 ], [ %13, %15 ]
  %32 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 7
  %33 = load i64, i64* %32, align 8
  %34 = add i64 %33, 65535
  %35 = and i64 %34, -65536
  %36 = icmp ugt i64 %35, %31
  br i1 %36, label %50, label %45

37:                                               ; preds = %20
  %38 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 7
  %39 = load i64, i64* %38, align 8
  %40 = add i64 %39, 65535
  %41 = and i64 %40, -65536
  %42 = and i64 %6, -65536
  %43 = icmp ugt i64 %41, %42
  br i1 %43, label %50, label %44

44:                                               ; preds = %11, %37
  br label %50

45:                                               ; preds = %30
  %46 = add i64 %31, 65535
  %47 = and i64 %46, -65536
  %48 = icmp eq i64 %47, %31
  br i1 %48, label %50, label %49

49:                                               ; preds = %45
  tail call void (i32, i8*, ...) @NaClLog(i32 -1, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.10, i64 0, i64 0)) #8
  br label %50

50:                                               ; preds = %44, %45, %37, %30, %49, %29, %19, %10
  %51 = phi i32 [ 26, %10 ], [ 25, %29 ], [ 30, %49 ], [ 27, %19 ], [ 28, %30 ], [ 29, %37 ], [ 0, %45 ], [ 0, %44 ]
  ret i32 %51
}

; Function Attrs: nounwind ssp uwtable
define hidden void @NaClLogAddressSpaceLayout(%struct.NaClApp* nocapture readonly) local_unnamed_addr #0 {
  tail call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.11, i64 0, i64 0)) #8
  %2 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 7
  %3 = load i64, i64* %2, align 8
  tail call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.12, i64 0, i64 0), i64 %3) #8
  %4 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 8
  %5 = load i64, i64* %4, align 8
  tail call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.13, i64 0, i64 0), i64 %5) #8
  %6 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 9
  %7 = load i64, i64* %6, align 8
  tail call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.14, i64 0, i64 0), i64 %7) #8
  %8 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 10
  %9 = load i64, i64* %8, align 8
  tail call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.15, i64 0, i64 0), i64 %9) #8
  %10 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 11
  %11 = load i64, i64* %10, align 8
  tail call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.16, i64 0, i64 0), i64 %11) #8
  %12 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 12
  %13 = load i64, i64* %12, align 8
  tail call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.17, i64 0, i64 0), i64 %13) #8
  %14 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 47
  %15 = load i64, i64* %14, align 8
  tail call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.18, i64 0, i64 0), i64 %15) #8
  %16 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 13
  %17 = load i64, i64* %16, align 8
  tail call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.19, i64 0, i64 0), i64 %17) #8
  %18 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 14
  %19 = load i64, i64* %18, align 8
  tail call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.20, i64 0, i64 0), i64 %19) #8
  %20 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 15
  %21 = load i32, i32* %20, align 8
  tail call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.21, i64 0, i64 0), i32 %21) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClAppLoadFileAslr(%struct.NaClDesc*, %struct.NaClApp*, i32) local_unnamed_addr #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.NaClPerfCounter, align 8
  %6 = alloca %struct.NaClElfImageInfo, align 8
  %7 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #8
  store i32 4, i32* %4, align 4
  %8 = getelementptr inbounds %struct.NaClPerfCounter, %struct.NaClPerfCounter* %5, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 712, i8* nonnull %8) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 712, i1 false)
  %9 = bitcast %struct.NaClElfImageInfo* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %9) #8
  %10 = getelementptr inbounds %struct.NaClElfImageInfo, %struct.NaClElfImageInfo* %6, i64 0, i32 0
  %11 = getelementptr inbounds %struct.NaClElfImageInfo, %struct.NaClElfImageInfo* %6, i64 0, i32 1
  %12 = getelementptr inbounds %struct.NaClElfImageInfo, %struct.NaClElfImageInfo* %6, i64 0, i32 2
  %13 = getelementptr inbounds %struct.NaClElfImageInfo, %struct.NaClElfImageInfo* %6, i64 0, i32 3
  %14 = getelementptr inbounds %struct.NaClElfImageInfo, %struct.NaClElfImageInfo* %6, i64 0, i32 4
  %15 = getelementptr inbounds %struct.NaClElfImageInfo, %struct.NaClElfImageInfo* %6, i64 0, i32 5
  %16 = bitcast %struct.NaClElfImageInfo* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 -86, i64 48, i1 false)
  call void @NaClPerfCounterCtor(%struct.NaClPerfCounter* nonnull %5, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.22, i64 0, i64 0)) #8
  %17 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %1, i64 0, i32 0
  %18 = load i8, i8* %17, align 8
  %19 = icmp ugt i8 %18, 32
  br i1 %19, label %136, label %20

20:                                               ; preds = %3
  %21 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %1, i64 0, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = add i64 %22, 65535
  %24 = and i64 %23, -65536
  store i64 %24, i64* %21, align 8
  %25 = call %struct.NaClElfImage* @NaClElfImageNew(%struct.NaClDesc* %0, i32* nonnull %4) #8
  %26 = icmp eq %struct.NaClElfImage* %25, null
  %27 = load i32, i32* %4, align 4
  %28 = icmp ne i32 %27, 0
  %29 = or i1 %26, %28
  br i1 %29, label %136, label %30

30:                                               ; preds = %20
  %31 = load i8, i8* %17, align 8
  %32 = call i32 @NaClElfImageValidateProgramHeaders(%struct.NaClElfImage* nonnull %25, i8 zeroext %31, %struct.NaClElfImageInfo* nonnull %6) #8
  store i32 %32, i32* %4, align 4
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %136

34:                                               ; preds = %30
  %35 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %1, i64 0, i32 2
  %36 = load i32, i32* %35, align 8
  %37 = icmp eq i32 %36, 0
  %38 = load i64, i64* %10, align 8
  br i1 %37, label %44, label %39

39:                                               ; preds = %34
  %40 = add i64 %38, -131072
  %41 = zext i32 %36 to i64
  %42 = icmp ugt i64 %40, %41
  br i1 %42, label %43, label %44

43:                                               ; preds = %39
  call void (i32, i8*, ...) @NaClLog(i32 -3, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.23, i64 0, i64 0), i64 %40, i32 %36) #8
  br label %136

44:                                               ; preds = %34, %39
  %45 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %1, i64 0, i32 7
  store i64 %38, i64* %45, align 8
  %46 = load i64, i64* %11, align 8
  %47 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %1, i64 0, i32 10
  store i64 %46, i64* %47, align 8
  %48 = load i64, i64* %12, align 8
  %49 = load i64, i64* %13, align 8
  %50 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %1, i64 0, i32 11
  store i64 %49, i64* %50, align 8
  %51 = load i64, i64* %14, align 8
  %52 = load i64, i64* %15, align 8
  %53 = icmp eq i64 %49, 0
  br i1 %53, label %54, label %67

54:                                               ; preds = %44
  %55 = icmp eq i64 %46, 0
  br i1 %55, label %56, label %63

56:                                               ; preds = %54
  %57 = add i64 %52, 65535
  %58 = and i64 %57, -65536
  %59 = sub i64 %58, %52
  %60 = icmp ult i64 %59, 32
  %61 = add i64 %52, 65536
  %62 = select i1 %60, i64 %61, i64 %52
  br label %63

63:                                               ; preds = %56, %54
  %64 = phi i64 [ %52, %54 ], [ %62, %56 ]
  %65 = add i64 %64, 65535
  %66 = and i64 %65, -65536
  br label %67

67:                                               ; preds = %63, %44
  %68 = phi i64 [ %66, %63 ], [ %52, %44 ]
  %69 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %1, i64 0, i32 47
  store i64 %68, i64* %69, align 8
  %70 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %1, i64 0, i32 12
  store i64 %68, i64* %70, align 8
  call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.24, i64 0, i64 0)) #8
  %71 = load i64, i64* %47, align 8
  call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.25, i64 0, i64 0), i64 %71) #8
  call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.26, i64 0, i64 0), i64 %48) #8
  %72 = load i64, i64* %50, align 8
  call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.27, i64 0, i64 0), i64 %72) #8
  call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.28, i64 0, i64 0), i64 %51) #8
  call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.29, i64 0, i64 0), i64 %68) #8
  %73 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %1, i64 0, i32 15
  store i32 32, i32* %73, align 8
  %74 = call i64 @NaClElfImageGetEntryPoint(%struct.NaClElfImage* nonnull %25) #8
  %75 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %1, i64 0, i32 13
  store i64 %74, i64* %75, align 8
  call void @NaClLogAddressSpaceLayout(%struct.NaClApp* %1)
  %76 = load i64, i64* %75, align 8
  %77 = load i32, i32* %73, align 8
  %78 = add nsw i32 %77, -1
  %79 = sext i32 %78 to i64
  %80 = and i64 %76, %79
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %136

82:                                               ; preds = %67
  %83 = load i64, i64* %45, align 8
  %84 = icmp ugt i64 %83, %76
  br i1 %84, label %85, label %136

85:                                               ; preds = %82
  %86 = call i32 @NaClCheckAddressSpaceLayoutSanity(%struct.NaClApp* %1, i64 %48, i64 %51, i64 %68)
  store i32 %86, i32* %4, align 4
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %88, label %136

88:                                               ; preds = %85
  call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.30, i64 0, i64 0)) #8
  %89 = call i32 @NaClPerfCounterMark(%struct.NaClPerfCounter* nonnull %5, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.31, i64 0, i64 0)) #8
  %90 = call i64 @NaClPerfCounterIntervalLast(%struct.NaClPerfCounter* nonnull %5) #8
  %91 = call i32 @NaClAllocAddrSpaceAslr(%struct.NaClApp* %1, i32 %2) #8
  store i32 %91, i32* %4, align 4
  %92 = call i32 @NaClPerfCounterMark(%struct.NaClPerfCounter* nonnull %5, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.32, i64 0, i64 0)) #8
  %93 = call i64 @NaClPerfCounterIntervalLast(%struct.NaClPerfCounter* nonnull %5) #8
  %94 = load i32, i32* %4, align 4
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %136

96:                                               ; preds = %88
  call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.33, i64 0, i64 0)) #8
  %97 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %1, i64 0, i32 3
  %98 = load i64, i64* %97, align 8
  %99 = add i64 %98, 65536
  %100 = inttoptr i64 %99 to i8*
  %101 = load i64, i64* %70, align 8
  %102 = add i64 %101, -1
  %103 = and i64 %102, -65536
  %104 = call i32 @NaClMprotect(i8* %100, i64 %103, i32 3) #8
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %107, label %106

106:                                              ; preds = %96
  call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.34, i64 0, i64 0), i32 %104) #8
  br label %107

107:                                              ; preds = %96, %106
  %108 = call i32 @NaClElfImageLoad(%struct.NaClElfImage* nonnull %25, %struct.NaClDesc* %0, %struct.NaClApp* %1) #8
  store i32 %108, i32* %4, align 4
  %109 = call i32 @NaClPerfCounterMark(%struct.NaClPerfCounter* nonnull %5, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.35, i64 0, i64 0)) #8
  %110 = call i64 @NaClPerfCounterIntervalLast(%struct.NaClPerfCounter* nonnull %5) #8
  %111 = load i32, i32* %4, align 4
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %113, label %136

113:                                              ; preds = %107
  call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.36, i64 0, i64 0)) #8
  %114 = call i32 @NaClMakeDynamicTextShared(%struct.NaClApp* %1) #8
  store i32 %114, i32* %4, align 4
  %115 = call i32 @NaClPerfCounterMark(%struct.NaClPerfCounter* nonnull %5, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.37, i64 0, i64 0)) #8
  %116 = call i64 @NaClPerfCounterIntervalLast(%struct.NaClPerfCounter* nonnull %5) #8
  %117 = load i32, i32* %4, align 4
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %119, label %136

119:                                              ; preds = %113
  call void @NaClFillEndOfTextRegion(%struct.NaClApp* %1)
  %120 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %1, i64 0, i32 16
  %121 = load i32, i32* %120, align 4
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %124, label %123

123:                                              ; preds = %119
  call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.38, i64 0, i64 0)) #8
  br label %126

124:                                              ; preds = %119
  call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.39, i64 0, i64 0)) #8
  %125 = call i32 @NaClValidateImage(%struct.NaClApp* %1) #8
  br label %126

126:                                              ; preds = %124, %123
  %127 = phi i32 [ %125, %124 ], [ 0, %123 ]
  store i32 %127, i32* %4, align 4
  %128 = call i32 @NaClPerfCounterMark(%struct.NaClPerfCounter* nonnull %5, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.40, i64 0, i64 0)) #8
  %129 = call i64 @NaClPerfCounterIntervalLast(%struct.NaClPerfCounter* nonnull %5) #8
  %130 = load i32, i32* %4, align 4
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %132, label %136

132:                                              ; preds = %126
  call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.41, i64 0, i64 0)) #8
  call void @NaClInitSwitchToApp(%struct.NaClApp* %1) #8
  call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.42, i64 0, i64 0)) #8
  call void @NaClLoadTrampoline(%struct.NaClApp* %1, i32 %2) #8
  call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.43, i64 0, i64 0)) #8
  call void @NaClLoadSpringboard(%struct.NaClApp* %1) #8
  call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.44, i64 0, i64 0)) #8
  %133 = call i32 @NaClMemoryProtection(%struct.NaClApp* %1) #8
  store i32 %133, i32* %4, align 4
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %135, label %136

135:                                              ; preds = %132
  call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.45, i64 0, i64 0)) #8
  call void @NaClLogAddressSpaceLayout(%struct.NaClApp* %1)
  br label %136

136:                                              ; preds = %82, %67, %43, %132, %126, %113, %107, %88, %85, %30, %20, %3, %135
  %137 = phi i32 [ 66, %43 ], [ 0, %135 ], [ 23, %3 ], [ %27, %20 ], [ %32, %30 ], [ 50, %82 ], [ %86, %85 ], [ %94, %88 ], [ %111, %107 ], [ %117, %113 ], [ %130, %126 ], [ %133, %132 ], [ 50, %67 ]
  %138 = phi %struct.NaClElfImage* [ %25, %43 ], [ %25, %135 ], [ null, %3 ], [ %25, %20 ], [ %25, %30 ], [ %25, %82 ], [ %25, %85 ], [ %25, %88 ], [ %25, %107 ], [ %25, %113 ], [ %25, %126 ], [ %25, %132 ], [ %25, %67 ]
  call void @NaClElfImageDelete(%struct.NaClElfImage* %138) #8
  %139 = call i32 @NaClPerfCounterMark(%struct.NaClPerfCounter* nonnull %5, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i64 0, i64 0)) #8
  %140 = call i64 @NaClPerfCounterIntervalTotal(%struct.NaClPerfCounter* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %9) #8
  call void @llvm.lifetime.end.p0i8(i64 712, i8* nonnull %8) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #8
  ret i32 %137
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @NaClPerfCounterCtor(%struct.NaClPerfCounter*, i8*) local_unnamed_addr #2

declare %struct.NaClElfImage* @NaClElfImageNew(%struct.NaClDesc*, i32*) local_unnamed_addr #2

declare i32 @NaClElfImageValidateProgramHeaders(%struct.NaClElfImage*, i8 zeroext, %struct.NaClElfImageInfo*) local_unnamed_addr #2

declare i64 @NaClElfImageGetEntryPoint(%struct.NaClElfImage*) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @NaClAddrIsValidEntryPt(%struct.NaClApp* nocapture readonly, i64) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 15
  %4 = load i32, i32* %3, align 8
  %5 = add nsw i32 %4, -1
  %6 = sext i32 %5 to i64
  %7 = and i64 %6, %1
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %9, label %14

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 7
  %11 = load i64, i64* %10, align 8
  %12 = icmp ugt i64 %11, %1
  %13 = zext i1 %12 to i32
  br label %14

14:                                               ; preds = %2, %9
  %15 = phi i32 [ %13, %9 ], [ 0, %2 ]
  ret i32 %15
}

declare i32 @NaClPerfCounterMark(%struct.NaClPerfCounter*, i8*) local_unnamed_addr #2

declare i64 @NaClPerfCounterIntervalLast(%struct.NaClPerfCounter*) local_unnamed_addr #2

declare i32 @NaClAllocAddrSpaceAslr(%struct.NaClApp*, i32) local_unnamed_addr #2

declare i32 @NaClMprotect(i8*, i64, i32) local_unnamed_addr #2

declare i32 @NaClElfImageLoad(%struct.NaClElfImage*, %struct.NaClDesc*, %struct.NaClApp*) local_unnamed_addr #2

declare i32 @NaClMakeDynamicTextShared(%struct.NaClApp*) local_unnamed_addr #2

declare i32 @NaClValidateImage(%struct.NaClApp*) local_unnamed_addr #2

declare void @NaClInitSwitchToApp(%struct.NaClApp*) local_unnamed_addr #2

declare void @NaClLoadTrampoline(%struct.NaClApp*, i32) local_unnamed_addr #2

declare void @NaClLoadSpringboard(%struct.NaClApp*) local_unnamed_addr #2

declare i32 @NaClMemoryProtection(%struct.NaClApp*) local_unnamed_addr #2

declare void @NaClElfImageDelete(%struct.NaClElfImage*) local_unnamed_addr #2

declare i64 @NaClPerfCounterIntervalTotal(%struct.NaClPerfCounter*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClAppLoadFile(%struct.NaClDesc*, %struct.NaClApp*) local_unnamed_addr #0 {
  %3 = tail call i32 @NaClAppLoadFileAslr(%struct.NaClDesc* %0, %struct.NaClApp* %1, i32 1)
  ret i32 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClAppLoadFileDynamically(%struct.NaClApp*, %struct.NaClDesc*, %struct.NaClValidationMetadata*) local_unnamed_addr #0 {
  %4 = alloca i32, align 4
  %5 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #8
  store i32 4, i32* %4, align 4
  %6 = call %struct.NaClElfImage* @NaClElfImageNew(%struct.NaClDesc* %1, i32* nonnull %4) #8
  %7 = icmp eq %struct.NaClElfImage* %6, null
  %8 = load i32, i32* %4, align 4
  %9 = icmp ne i32 %8, 0
  %10 = or i1 %7, %9
  br i1 %10, label %30, label %11

11:                                               ; preds = %3
  %12 = call i32 @NaClElfImageLoadDynamically(%struct.NaClElfImage* nonnull %6, %struct.NaClApp* %0, %struct.NaClDesc* %1, %struct.NaClValidationMetadata* %2) #8
  store i32 %12, i32* %4, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %30

14:                                               ; preds = %11
  %15 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 13
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 14
  store i64 %16, i64* %17, align 8
  %18 = call i64 @NaClElfImageGetEntryPoint(%struct.NaClElfImage* nonnull %6) #8
  store i64 %18, i64* %15, align 8
  %19 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 15
  %20 = load i32, i32* %19, align 8
  %21 = add nsw i32 %20, -1
  %22 = sext i32 %21 to i64
  %23 = and i64 %18, %22
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %25, label %29

25:                                               ; preds = %14
  %26 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 9
  %27 = load i64, i64* %26, align 8
  %28 = icmp ugt i64 %27, %18
  br i1 %28, label %30, label %29

29:                                               ; preds = %25, %14
  store i32 50, i32* %4, align 4
  br label %30

30:                                               ; preds = %25, %11, %3, %29
  call void @NaClElfImageDelete(%struct.NaClElfImage* %6) #8
  %31 = load i32, i32* %4, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #8
  ret i32 %31
}

declare i32 @NaClElfImageLoadDynamically(%struct.NaClElfImage*, %struct.NaClApp*, %struct.NaClDesc*, %struct.NaClValidationMetadata*) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @NaClAddrIsValidIrtEntryPt(%struct.NaClApp* nocapture readonly, i64) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 15
  %4 = load i32, i32* %3, align 8
  %5 = add nsw i32 %4, -1
  %6 = sext i32 %5 to i64
  %7 = and i64 %6, %1
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %9, label %14

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 9
  %11 = load i64, i64* %10, align 8
  %12 = icmp ugt i64 %11, %1
  %13 = zext i1 %12 to i32
  br label %14

14:                                               ; preds = %2, %9
  %15 = phi i32 [ %13, %9 ], [ 0, %2 ]
  ret i32 %15
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClReportExitStatus(%struct.NaClApp*, i32) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 17
  tail call void @NaClXMutexLock(%struct.NaClMutex* %3) #8
  %4 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 38
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 39
  store i32 %1, i32* %8, align 8
  store i32 0, i32* %4, align 4
  %9 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 18
  tail call void @NaClXCondVarSignal(%struct.NaClCondVar* %9) #8
  br label %10

10:                                               ; preds = %2, %7
  tail call void @NaClXMutexUnlock(%struct.NaClMutex* %3) #8
  ret i32 0
}

declare void @NaClXMutexLock(%struct.NaClMutex*) local_unnamed_addr #2

declare void @NaClXMutexUnlock(%struct.NaClMutex*) local_unnamed_addr #2

declare void @NaClXCondVarSignal(%struct.NaClCondVar*) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @NaClGetInitialStackTop(%struct.NaClApp* nocapture readonly) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 0
  %3 = load i8, i8* %2, align 8
  %4 = zext i8 %3 to i64
  %5 = shl i64 1, %4
  %6 = add i64 %5, -65536
  ret i64 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClCreateMainThread(%struct.NaClApp*, i32, i8** readonly, i8** readonly) local_unnamed_addr #0 {
  %5 = icmp sgt i32 %1, -1
  br i1 %5, label %7, label %6

6:                                                ; preds = %4
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.3, i64 0, i64 0), i32 546, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.47, i64 0, i64 0)) #8
  br label %7

7:                                                ; preds = %4, %6
  %8 = icmp ne i8** %2, null
  %9 = icmp eq i32 %1, 0
  %10 = or i1 %9, %8
  br i1 %10, label %12, label %11

11:                                               ; preds = %7
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.3, i64 0, i64 0), i32 547, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.48, i64 0, i64 0)) #8
  br label %12

12:                                               ; preds = %11, %7
  %13 = icmp eq i8** %3, null
  br i1 %13, label %24, label %14

14:                                               ; preds = %12
  %15 = load i8*, i8** %3, align 8
  %16 = icmp eq i8* %15, null
  br i1 %16, label %24, label %17

17:                                               ; preds = %14, %17
  %18 = phi i8** [ %21, %17 ], [ %3, %14 ]
  %19 = phi i32 [ %20, %17 ], [ 0, %14 ]
  %20 = add nuw nsw i32 %19, 1
  %21 = getelementptr inbounds i8*, i8** %18, i64 1
  %22 = load i8*, i8** %21, align 8
  %23 = icmp eq i8* %22, null
  br i1 %23, label %24, label %17

24:                                               ; preds = %17, %14, %12
  %25 = phi i32 [ 0, %12 ], [ 0, %14 ], [ %20, %17 ]
  %26 = sext i32 %1 to i64
  %27 = shl nsw i64 %26, 3
  %28 = tail call noalias i8* @malloc(i64 %27) #8
  %29 = bitcast i8* %28 to i64*
  %30 = zext i32 %25 to i64
  %31 = shl nuw nsw i64 %30, 3
  %32 = tail call noalias i8* @malloc(i64 %31) #8
  %33 = bitcast i8* %32 to i64*
  %34 = icmp eq i8* %28, null
  br i1 %34, label %245, label %35

35:                                               ; preds = %24
  %36 = icmp eq i8* %32, null
  %37 = icmp ne i32 %25, 0
  %38 = and i1 %37, %36
  br i1 %38, label %245, label %39

39:                                               ; preds = %35
  %40 = icmp sgt i32 %1, 0
  br i1 %40, label %41, label %43

41:                                               ; preds = %39
  %42 = zext i32 %1 to i64
  br label %46

43:                                               ; preds = %46, %39
  %44 = phi i64 [ 0, %39 ], [ %54, %46 ]
  %45 = icmp eq i32 %25, 0
  br i1 %45, label %68, label %57

46:                                               ; preds = %46, %41
  %47 = phi i64 [ 0, %41 ], [ %55, %46 ]
  %48 = phi i64 [ 0, %41 ], [ %54, %46 ]
  %49 = getelementptr inbounds i8*, i8** %2, i64 %47
  %50 = load i8*, i8** %49, align 8
  %51 = tail call i64 @strlen(i8* %50) #9
  %52 = add i64 %51, 1
  %53 = getelementptr inbounds i64, i64* %29, i64 %47
  store i64 %52, i64* %53, align 8
  %54 = add i64 %52, %48
  %55 = add nuw nsw i64 %47, 1
  %56 = icmp eq i64 %55, %42
  br i1 %56, label %43, label %46

57:                                               ; preds = %43, %57
  %58 = phi i64 [ %66, %57 ], [ 0, %43 ]
  %59 = phi i64 [ %65, %57 ], [ %44, %43 ]
  %60 = getelementptr inbounds i8*, i8** %3, i64 %58
  %61 = load i8*, i8** %60, align 8
  %62 = tail call i64 @strlen(i8* %61) #9
  %63 = add i64 %62, 1
  %64 = getelementptr inbounds i64, i64* %33, i64 %58
  store i64 %63, i64* %64, align 8
  %65 = add i64 %63, %59
  %66 = add nuw nsw i64 %58, 1
  %67 = icmp eq i64 %66, %30
  br i1 %67, label %68, label %57

68:                                               ; preds = %57, %43
  %69 = phi i64 [ %44, %43 ], [ %65, %57 ]
  %70 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 14
  %71 = load i64, i64* %70, align 8
  %72 = icmp eq i64 %71, 0
  %73 = select i1 %72, i32 1, i32 2
  %74 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 8
  %75 = load i64, i64* %74, align 8
  %76 = icmp ne i64 %75, 0
  %77 = zext i1 %76 to i32
  %78 = add nuw nsw i32 %73, %77
  %79 = shl nuw nsw i32 %78, 1
  %80 = add i32 %1, 5
  %81 = add i32 %80, %25
  %82 = add i32 %81, %79
  %83 = sext i32 %82 to i64
  %84 = shl nsw i64 %83, 2
  %85 = xor i64 %69, -1
  %86 = icmp ugt i64 %84, %85
  br i1 %86, label %87, label %88

87:                                               ; preds = %68
  tail call void (i32, i8*, ...) @NaClLog(i32 -2, i8* getelementptr inbounds ([89 x i8], [89 x i8]* @.str.49, i64 0, i64 0)) #8
  br label %245

88:                                               ; preds = %68
  %89 = add i64 %69, 15
  %90 = add i64 %89, %84
  %91 = and i64 %90, -16
  %92 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 1
  %93 = load i64, i64* %92, align 8
  %94 = icmp ugt i64 %91, %93
  br i1 %94, label %245, label %95

95:                                               ; preds = %88
  %96 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 0
  %97 = load i8, i8* %96, align 8
  %98 = zext i8 %97 to i64
  %99 = shl i64 1, %98
  %100 = add i64 %99, -65536
  %101 = sub i64 %100, %91
  %102 = icmp eq i64 %101, 0
  %103 = icmp ult i64 %100, %91
  %104 = or i1 %103, %102
  %105 = icmp ult i8 %97, 16
  %106 = or i1 %105, %104
  br i1 %106, label %245, label %107

107:                                              ; preds = %95
  %108 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 3
  %109 = load i64, i64* %108, align 8
  %110 = add i64 %109, %101
  %111 = icmp eq i64 %110, -1
  br i1 %111, label %245, label %112

112:                                              ; preds = %107
  tail call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.50, i64 0, i64 0), i64 %110) #8
  %113 = and i64 %110, 15
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %116, label %115

115:                                              ; preds = %112
  tail call void (i32, i8*, ...) @NaClLog(i32 -3, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.3, i64 0, i64 0), i32 648, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.51, i64 0, i64 0)) #8
  tail call void (i8*, ...) @NaClCheckIntern(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.52, i64 0, i64 0), i64 %110) #8
  br label %116

116:                                              ; preds = %115, %112
  %117 = inttoptr i64 %110 to i32*
  %118 = inttoptr i64 %110 to i8*
  %119 = getelementptr inbounds i8, i8* %118, i64 %84
  %120 = getelementptr inbounds i32, i32* %117, i64 1
  store i32 0, i32* %117, align 4
  %121 = getelementptr inbounds i32, i32* %117, i64 2
  store i32 %25, i32* %120, align 4
  %122 = getelementptr inbounds i32, i32* %117, i64 3
  store i32 %1, i32* %121, align 4
  br i1 %40, label %123, label %157

123:                                              ; preds = %116
  %124 = zext i32 %1 to i64
  br label %125

125:                                              ; preds = %141, %123
  %126 = phi i64 [ 0, %123 ], [ %155, %141 ]
  %127 = phi i8* [ %119, %123 ], [ %154, %141 ]
  %128 = phi i32* [ %122, %123 ], [ %145, %141 ]
  %129 = ptrtoint i8* %127 to i64
  %130 = load i64, i64* %108, align 8
  %131 = icmp ugt i64 %130, %129
  %132 = load i8, i8* %96, align 8
  br i1 %131, label %138, label %133

133:                                              ; preds = %125
  %134 = zext i8 %132 to i64
  %135 = shl i64 1, %134
  %136 = add i64 %135, %130
  %137 = icmp ugt i64 %136, %129
  br i1 %137, label %141, label %138

138:                                              ; preds = %133, %125
  %139 = zext i8 %132 to i32
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.62, i64 0, i64 0), i64 %129, i64 %130, i32 %139) #8
  %140 = load i64, i64* %108, align 8
  br label %141

141:                                              ; preds = %133, %138
  %142 = phi i64 [ %130, %133 ], [ %140, %138 ]
  %143 = sub i64 %129, %142
  %144 = trunc i64 %143 to i32
  %145 = getelementptr inbounds i32, i32* %128, i64 1
  store i32 %144, i32* %128, align 4
  %146 = getelementptr inbounds i8*, i8** %2, i64 %126
  %147 = load i8*, i8** %146, align 8
  %148 = trunc i64 %126 to i32
  tail call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.53, i64 0, i64 0), i32 %148, i8* %147, i8* %127) #8
  %149 = load i8*, i8** %146, align 8
  %150 = tail call i64 @llvm.objectsize.i64.p0i8(i8* %127, i1 false, i1 true, i1 false) #8
  %151 = tail call i8* @__strcpy_chk(i8* %127, i8* %149, i64 %150) #8
  %152 = getelementptr inbounds i64, i64* %29, i64 %126
  %153 = load i64, i64* %152, align 8
  %154 = getelementptr inbounds i8, i8* %127, i64 %153
  %155 = add nuw nsw i64 %126, 1
  %156 = icmp eq i64 %155, %124
  br i1 %156, label %157, label %125

157:                                              ; preds = %141, %116
  %158 = phi i32* [ %122, %116 ], [ %145, %141 ]
  %159 = phi i8* [ %119, %116 ], [ %154, %141 ]
  store i32 0, i32* %158, align 4
  %160 = getelementptr inbounds i32, i32* %158, i64 1
  br i1 %45, label %193, label %161

161:                                              ; preds = %157, %177
  %162 = phi i64 [ %190, %177 ], [ 0, %157 ]
  %163 = phi i32* [ %191, %177 ], [ %160, %157 ]
  %164 = phi i8* [ %189, %177 ], [ %159, %157 ]
  %165 = ptrtoint i8* %164 to i64
  %166 = load i64, i64* %108, align 8
  %167 = icmp ugt i64 %166, %165
  %168 = load i8, i8* %96, align 8
  br i1 %167, label %174, label %169

169:                                              ; preds = %161
  %170 = zext i8 %168 to i64
  %171 = shl i64 1, %170
  %172 = add i64 %171, %166
  %173 = icmp ugt i64 %172, %165
  br i1 %173, label %177, label %174

174:                                              ; preds = %169, %161
  %175 = zext i8 %168 to i32
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.62, i64 0, i64 0), i64 %165, i64 %166, i32 %175) #8
  %176 = load i64, i64* %108, align 8
  br label %177

177:                                              ; preds = %169, %174
  %178 = phi i64 [ %166, %169 ], [ %176, %174 ]
  %179 = sub i64 %165, %178
  %180 = trunc i64 %179 to i32
  store i32 %180, i32* %163, align 4
  %181 = getelementptr inbounds i8*, i8** %3, i64 %162
  %182 = load i8*, i8** %181, align 8
  %183 = trunc i64 %162 to i32
  tail call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.54, i64 0, i64 0), i32 %183, i8* %182, i8* %164) #8
  %184 = load i8*, i8** %181, align 8
  %185 = tail call i64 @llvm.objectsize.i64.p0i8(i8* %164, i1 false, i1 true, i1 false) #8
  %186 = tail call i8* @__strcpy_chk(i8* %164, i8* %184, i64 %185) #8
  %187 = getelementptr inbounds i64, i64* %33, i64 %162
  %188 = load i64, i64* %187, align 8
  %189 = getelementptr inbounds i8, i8* %164, i64 %188
  %190 = add nuw nsw i64 %162, 1
  %191 = getelementptr inbounds i32, i32* %163, i64 1
  %192 = icmp eq i64 %190, %30
  br i1 %192, label %193, label %161

193:                                              ; preds = %177, %157
  %194 = phi i32* [ %158, %157 ], [ %163, %177 ]
  %195 = phi i32* [ %160, %157 ], [ %191, %177 ]
  %196 = getelementptr inbounds i32, i32* %194, i64 2
  store i32 0, i32* %195, align 4
  %197 = load i64, i64* %70, align 8
  %198 = icmp eq i64 %197, 0
  br i1 %198, label %204, label %199

199:                                              ; preds = %193
  %200 = getelementptr inbounds i32, i32* %194, i64 3
  store i32 9, i32* %196, align 4
  %201 = load i64, i64* %70, align 8
  %202 = trunc i64 %201 to i32
  %203 = getelementptr inbounds i32, i32* %194, i64 4
  store i32 %202, i32* %200, align 4
  br label %204

204:                                              ; preds = %193, %199
  %205 = phi i32* [ %203, %199 ], [ %196, %193 ]
  %206 = load i64, i64* %74, align 8
  %207 = icmp eq i64 %206, 0
  br i1 %207, label %213, label %208

208:                                              ; preds = %204
  %209 = getelementptr inbounds i32, i32* %205, i64 1
  store i32 7, i32* %205, align 4
  %210 = load i64, i64* %74, align 8
  %211 = trunc i64 %210 to i32
  %212 = getelementptr inbounds i32, i32* %205, i64 2
  store i32 %211, i32* %209, align 4
  br label %213

213:                                              ; preds = %204, %208
  %214 = phi i32* [ %212, %208 ], [ %205, %204 ]
  %215 = getelementptr inbounds i32, i32* %214, i64 1
  store i32 0, i32* %214, align 4
  %216 = getelementptr inbounds i32, i32* %214, i64 2
  store i32 0, i32* %215, align 4
  %217 = bitcast i32* %216 to i8*
  %218 = icmp eq i8* %119, %217
  br i1 %218, label %220, label %219

219:                                              ; preds = %213
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.3, i64 0, i64 0), i32 699, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.55, i64 0, i64 0)) #8
  br label %220

220:                                              ; preds = %219, %213
  %221 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 17
  tail call void @NaClXMutexLock(%struct.NaClMutex* %221) #8
  %222 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 53
  %223 = load %struct.NaClDebugCallbacks*, %struct.NaClDebugCallbacks** %222, align 8
  %224 = icmp eq %struct.NaClDebugCallbacks* %223, null
  br i1 %224, label %225, label %235

225:                                              ; preds = %220
  %226 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 54
  %227 = load %struct.NaClDesc*, %struct.NaClDesc** %226, align 8
  %228 = icmp eq %struct.NaClDesc* %227, null
  br i1 %228, label %230, label %229

229:                                              ; preds = %225
  tail call void @NaClDescUnref(%struct.NaClDesc* nonnull %227) #8
  store %struct.NaClDesc* null, %struct.NaClDesc** %226, align 8
  br label %230

230:                                              ; preds = %225, %229
  %231 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 55
  %232 = load %struct.NaClDesc*, %struct.NaClDesc** %231, align 8
  %233 = icmp eq %struct.NaClDesc* %232, null
  br i1 %233, label %235, label %234

234:                                              ; preds = %230
  tail call void @NaClDescUnref(%struct.NaClDesc* nonnull %232) #8
  store %struct.NaClDesc* null, %struct.NaClDesc** %231, align 8
  br label %235

235:                                              ; preds = %230, %234, %220
  %236 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 38
  store i32 1, i32* %236, align 4
  tail call void @NaClXMutexUnlock(%struct.NaClMutex* %221) #8
  tail call void @NaClVmHoleWaitToStartThread(%struct.NaClApp* %0) #8
  %237 = add i64 %110, -8
  %238 = inttoptr i64 %237 to i64*
  store i64 0, i64* %238, align 1
  tail call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.56, i64 0, i64 0), i64 %237) #8
  tail call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.57, i64 0, i64 0), i64 %237) #8
  %239 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 13
  %240 = load i64, i64* %239, align 8
  %241 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 47
  %242 = load i64, i64* %241, align 8
  %243 = trunc i64 %242 to i32
  %244 = tail call i32 @NaClAppThreadSpawn(%struct.NaClApp* %0, i64 %240, i64 %237, i32 %243, i32 0) #8
  br label %245

245:                                              ; preds = %95, %107, %88, %35, %24, %235, %87
  %246 = phi i32 [ 0, %24 ], [ 0, %35 ], [ 0, %87 ], [ %244, %235 ], [ 0, %88 ], [ 0, %107 ], [ 0, %95 ]
  tail call void @free(i8* %28) #8
  tail call void @free(i8* %32) #8
  ret i32 %246
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #4

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #5

declare void @NaClCheckIntern(i8*, ...) local_unnamed_addr #2

declare void @NaClDescUnref(%struct.NaClDesc*) local_unnamed_addr #2

declare void @NaClVmHoleWaitToStartThread(%struct.NaClApp*) local_unnamed_addr #2

declare i32 @NaClAppThreadSpawn(%struct.NaClApp*, i64, i64, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClWaitForMainThreadToExit(%struct.NaClApp*) local_unnamed_addr #0 {
  tail call void (i32, i8*, ...) @NaClLog(i32 3, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.58, i64 0, i64 0)) #8
  %2 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 17
  tail call void @NaClXMutexLock(%struct.NaClMutex* %2) #8
  tail call void (i32, i8*, ...) @NaClLog(i32 3, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.59, i64 0, i64 0)) #8
  %3 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 38
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %14, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 18
  %8 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 39
  br label %9

9:                                                ; preds = %6, %9
  tail call void @NaClXCondVarWait(%struct.NaClCondVar* %7, %struct.NaClMutex* %2) #8
  %10 = load i32, i32* %3, align 4
  %11 = load i32, i32* %8, align 8
  tail call void (i32, i8*, ...) @NaClLog(i32 3, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.60, i64 0, i64 0), i32 %10, i32 %11) #8
  %12 = load i32, i32* %3, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %9

14:                                               ; preds = %9, %1
  tail call void @NaClXMutexUnlock(%struct.NaClMutex* %2) #8
  %15 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 53
  %16 = load %struct.NaClDebugCallbacks*, %struct.NaClDebugCallbacks** %15, align 8
  %17 = icmp eq %struct.NaClDebugCallbacks* %16, null
  br i1 %17, label %21, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.NaClDebugCallbacks, %struct.NaClDebugCallbacks* %16, i64 0, i32 2
  %20 = load void ()*, void ()** %19, align 8
  tail call void %20() #8
  br label %21

21:                                               ; preds = %14, %18
  %22 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 39
  %23 = load i32, i32* %22, align 8
  %24 = lshr i32 %23, 8
  %25 = and i32 %24, 255
  ret i32 %25
}

declare void @NaClXCondVarWait(%struct.NaClCondVar*, %struct.NaClMutex*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClCreateAdditionalThread(%struct.NaClApp*, i64, i64, i32, i32) local_unnamed_addr #0 {
  %6 = tail call i32 @NaClAppThreadSpawn(%struct.NaClApp* %0, i64 %1, i64 %2, i32 %3, i32 %4) #8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %9

8:                                                ; preds = %5
  tail call void (i32, i8*, ...) @NaClLog(i32 -2, i8* getelementptr inbounds ([91 x i8], [91 x i8]* @.str.61, i64 0, i64 0)) #8
  br label %9

9:                                                ; preds = %5, %8
  %10 = phi i32 [ -11, %8 ], [ 0, %5 ]
  ret i32 %10
}

; Function Attrs: nofree nounwind
declare i8* @__strcpy_chk(i8*, i8*, i64) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.objectsize.i64.p0i8(i8*, i1 immarg, i1 immarg, i1 immarg) #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nounwind }
attributes #9 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
