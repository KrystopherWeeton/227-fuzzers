; ModuleID = '../../v8/src/objects/bigint.cc'
source_filename = "../../v8/src/objects/bigint.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::locale::id" = type <{ %"struct.std::__1::once_flag", i32, [4 x i8] }>
%"struct.std::__1::once_flag" = type { i64 }
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"class.v8::internal::Isolate" = type { %"class.v8::internal::IsolateData", %"class.std::__1::unique_ptr", %"class.v8::internal::Heap", %"class.v8::internal::ReadOnlyHeap"*, %"class.std::__1::shared_ptr.646", %"class.std::__1::unique_ptr.667", i32, %"class.v8::internal::Isolate::EntryStackItem"*, i32, %"class.v8::internal::StringStream"*, [13 x i64], %"class.v8::internal::Bootstrapper"*, %"class.v8::internal::RuntimeProfiler"*, %"class.v8::internal::CompilationCache"*, %"class.std::__1::shared_ptr.677", %"class.v8::base::RecursiveMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::internal::Logger"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::Deoptimizer"*, i8, %"class.v8::internal::MaterializedObjectStore"*, i8, i32, i32, %"class.v8::internal::DescriptorLookupCache"*, %"struct.v8::internal::HandleScopeData", %"class.v8::internal::HandleScopeImplementer"*, %"class.v8::internal::UnicodeCache"*, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::InnerPointerToCodeCache"*, %"class.v8::internal::GlobalHandles"*, %"class.v8::internal::EternalHandles"*, %"class.v8::internal::ThreadManager"*, %"class.v8::bigint::Processor"*, %"class.v8::internal::RuntimeState", %"class.v8::internal::Builtins", %"class.v8::internal::SetupIsolateDelegate"*, %"class.v8::internal::RegExpStack"*, %"class.std::__1::vector.816", %"class.v8::internal::DateCache"*, %"class.v8::base::RandomNumberGenerator"*, %"class.v8::base::RandomNumberGenerator"*, %"struct.std::__1::atomic.829", {}*, i8*, void (i32, %"class.v8::Promise"*, %"class.v8::Value"*)*, {}*, {}*, %"struct.std::__1::atomic.839", {}*, %"class.v8::base::Mutex", double, %"class.std::__1::basic_string", %"class.std::__1::unordered_map.850", %"struct.std::__1::atomic.153", i8, i8, i8, i8, i8, i8, double, %"class.v8::internal::Debug"*, %"class.v8::internal::HeapProfiler"*, %"class.std::__1::unique_ptr.925", %"class.v8::internal::AstStringConstants"*, %"class.v8::internal::interpreter::Interpreter"*, %"class.v8::internal::compiler::PerIsolateCompilerCache"*, %"class.v8::internal::Zone"*, %"class.v8::internal::CompilerDispatcher"*, %"class.std::__1::queue", void (i8*, i8*)*, void (i8*, i1)*, void (i8*, i32)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*, i1)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::Context"*)*, void (%"class.v8::FunctionCallbackInfo"*)*, %"class.v8::String"* (%"class.v8::Isolate"*, i8*)*, i1 (%"class.v8::Context"*)*, i1 (%"class.v8::Context"*)*, %"class.v8::internal::Relocatable"*, %"class.std::__1::vector.968"*, %"class.v8::internal::Object", i64*, %"class.v8::internal::AddressToIndexHashMap"*, %"class.v8::internal::HeapObjectToIndexHashMap"*, %"class.v8::internal::MicrotaskQueue"*, %"class.v8::internal::CompilationStatistics"*, %"class.v8::internal::CodeTracer"*, i32, void (%"class.v8::PromiseRejectMessage"*)*, %"class.v8::StartupData"*, i32, i32, i32, i64, i8, i8, i32, i8, i32, %"class.v8_inspector::V8Inspector"*, i8, i8, i8, i32, i32, %"class.v8::internal::compiler::NodeObserver"*, i8, [128 x i32], [256 x i32], [251 x i32], [251 x i32], %"class.v8::internal::OptimizingCompileDispatcher"*, %"class.std::__1::unique_ptr.976", i32, i8, i8, i32, i32, %"class.std::__1::vector.982", %"class.std::__1::vector.982", void (%"class.v8::Isolate"*, i32)*, %"class.std::__1::shared_ptr.989", i64, %"class.std::__1::unordered_map.990", i64, %"struct.v8::metrics::LongTaskStats", %"class.std::__1::vector.542", %"class.v8::internal::BuiltinsConstantsTableBuilder"*, i8*, i32, i8*, i32, %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::shared_ptr.161", %"class.v8::internal::FutexWaitListNode", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::debug::ConsoleDelegate"*, %"class.v8::debug::AsyncEventDelegate"*, i32, i32, %"class.std::__1::unique_ptr.1046", i1 (%"class.v8::Isolate"*)*, i8, %"class.v8::base::Mutex", %"struct.v8::internal::ManagedPtrDestructor"*, i64, i64, %"class.v8::internal::wasm::WasmEngine"*, %"class.std::__1::unique_ptr.1084", %"class.v8::internal::EmbeddedFileWriterInterface"*, %"class.v8::Context::BackupIncumbentScope"*, {}*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate::ThreadDataTable", i8, %"class.v8::internal::Isolate"*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"struct.std::__1::atomic.1118", %"class.std::__1::vector.1122", %"class.std::__1::vector.1122", void (i32, %"class.std::__1::basic_string"*)* }
%"class.v8::internal::IsolateData" = type { [4 x i8*], i64, i64, i64, i64, i64, %"class.v8::internal::StackGuard", %"class.v8::internal::RootsTable", %"class.v8::internal::ExternalReferenceTable", %"class.v8::internal::ThreadLocalTop", [1711 x i64], [1711 x i64], i8, [15 x i8] }
%"class.v8::internal::StackGuard" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::StackGuard::ThreadLocal" }
%"class.v8::internal::StackGuard::ThreadLocal" = type { i64, i64, i64, i64, %"class.v8::internal::InterruptsScope"*, i64 }
%"class.v8::internal::InterruptsScope" = type { i32 (...)**, %"class.v8::internal::StackGuard"*, i64, i64, i32, %"class.v8::internal::InterruptsScope"* }
%"class.v8::internal::RootsTable" = type { [669 x i64] }
%"class.v8::internal::ExternalReferenceTable" = type { [1042 x i64], i32, i32 }
%"class.v8::internal::ThreadLocalTop" = type { %"class.v8::TryCatch"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Context", %"struct.std::__1::atomic", %"class.v8::internal::Object", %"class.v8::internal::Context", i64, i64, i64, i64, i64, %"class.v8::internal::Object", i8, i8, %"class.v8::internal::Object", i64, i64, i64, %"class.v8::internal::PromiseOnStack"*, %"class.v8::internal::Simulator"*, i64, %"class.v8::internal::ExternalCallbackScope"*, i32, void (%"class.v8::Object"*, i32, %"class.v8::Value"*)*, i64 }
%"class.v8::TryCatch" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::TryCatch"*, i8*, i8*, i8*, i8, [7 x i8] }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { %"class.v8::internal::ThreadId" }
%"class.v8::internal::ThreadId" = type { i32 }
%"class.v8::internal::Context" = type { %"class.v8::internal::TorqueGeneratedContext" }
%"class.v8::internal::TorqueGeneratedContext" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::HeapObject" = type { %"class.v8::internal::Object" }
%"class.v8::internal::PromiseOnStack" = type { %"class.v8::internal::Handle.0", %"class.v8::internal::PromiseOnStack"* }
%"class.v8::internal::Handle.0" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HandleBase" = type { i64* }
%"class.v8::internal::Simulator" = type opaque
%"class.v8::internal::ExternalCallbackScope" = type opaque
%"class.v8::Object" = type { i8 }
%"class.v8::Value" = type { i8 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.v8::internal::IsolateAllocator"* }
%"class.v8::internal::IsolateAllocator" = type { i8*, %"class.v8::PageAllocator"* }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.v8::internal::Heap" = type { %"class.std::__1::unordered_map", %"struct.std::__1::atomic.20", %"class.v8::internal::Heap::ExternalMemoryAccounting", %"class.v8::internal::Isolate"*, i64, i64, i64, i64, %"struct.std::__1::atomic.20", i64, i64, i64, i64, i64, i8, i64, i64, %"struct.std::__1::atomic.20", i64, i64, %"struct.std::__1::atomic.20", %"struct.std::__1::atomic.30", %"class.std::__1::vector", i32, %"class.v8::internal::NewSpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::CodeSpace"*, %"class.v8::internal::MapSpace"*, %"class.v8::internal::OldLargeObjectSpace"*, %"class.v8::internal::CodeLargeObjectSpace"*, %"class.v8::internal::NewLargeObjectSpace"*, %"class.v8::internal::ReadOnlySpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::MapSpace"*, %"class.std::__1::unique_ptr.147", %"class.std::__1::unique_ptr.147", [8 x %"class.v8::internal::Space"*], %"class.v8::internal::LocalHeap"*, %"class.v8::internal::ArrayBufferExtension"*, %"class.v8::internal::ArrayBufferExtension"*, i8, i64, %"struct.std::__1::atomic.162", i32, i32, i32, i32, %"class.v8::internal::AllocationObserver"*, %"class.v8::internal::StressScavengeObserver"*, double, i32, i32, i32, i64, i32, [128 x i64], %"struct.std::__1::atomic.20", i64, i8, %"struct.std::__1::atomic.20", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.std::__1::vector.166", %"class.std::__1::vector.166", i64 ()*, [113 x i32], i64, double, double, i64, i64, double, i32, i32, i32, i32, double, double, double, %"class.std::__1::unique_ptr.173", %"class.std::__1::unique_ptr.179", %"class.v8::internal::MinorMarkCompactCollector"*, %"class.std::__1::unique_ptr.309", %"class.std::__1::unique_ptr.315", %"class.std::__1::unique_ptr.321", %"class.std::__1::unique_ptr.360", %"class.std::__1::unique_ptr.399", %"class.std::__1::unique_ptr.429", %"class.std::__1::unique_ptr.435", %"class.std::__1::unique_ptr.445", %"class.std::__1::unique_ptr.451", %"class.std::__1::unique_ptr.451", %"class.std::__1::unique_ptr.457", %"class.std::__1::unique_ptr.463", %"class.std::__1::unique_ptr.463", %"class.std::__1::unique_ptr.469", %"class.std::__1::unique_ptr.475", %"class.std::__1::shared_ptr.481", %"class.v8::CppHeap"*, %"class.v8::EmbedderRootsHandler"*, %"class.v8::internal::StrongRootsEntry"*, %"class.v8::base::Mutex", i8, i64, i64, i64, i64, %"class.std::__1::unordered_map.504", %"class.std::__1::unique_ptr.530", [512 x i8], i8, i8, i64, i8, i32, i32, %"class.std::__1::unique_ptr.536", i8, %"class.v8::internal::Heap::ExternalStringTable", %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.549", i32, i8, i8, i8, i8, i8, %"class.v8::internal::HeapObject", %"class.v8::base::SharedMutex", %"class.v8::base::Mutex", %"class.std::__1::unordered_set.331", i8, [7 x i8], %"class.std::__1::unordered_map.555", %"class.std::__1::unordered_map.581", %"class.std::__1::unordered_map.555", %"class.std::__1::unordered_map.605", %"class.std::__1::vector.633", i8, %"class.std::__1::unique_ptr.640", i32, i32 }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.3", %"class.std::__1::__compressed_pair.10", %"class.std::__1::__compressed_pair.15", %"class.std::__1::__compressed_pair.17", [4 x i8] }>
%"class.std::__1::unique_ptr.3" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5", %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { i64 }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { float }
%"class.v8::internal::Heap::ExternalMemoryAccounting" = type { %"struct.std::__1::atomic.25", %"struct.std::__1::atomic.25", %"struct.std::__1::atomic.25" }
%"struct.std::__1::atomic.25" = type { %"struct.std::__1::__atomic_base.26" }
%"struct.std::__1::__atomic_base.26" = type { %"struct.std::__1::__atomic_base.27" }
%"struct.std::__1::__atomic_base.27" = type { %"struct.std::__1::__cxx_atomic_impl.28" }
%"struct.std::__1::__cxx_atomic_impl.28" = type { %"struct.std::__1::__cxx_atomic_base_impl.29" }
%"struct.std::__1::__cxx_atomic_base_impl.29" = type { i64 }
%"struct.std::__1::atomic.30" = type { %"struct.std::__1::__atomic_base.31" }
%"struct.std::__1::__atomic_base.31" = type { %"struct.std::__1::__cxx_atomic_impl.32" }
%"struct.std::__1::__cxx_atomic_impl.32" = type { %"struct.std::__1::__cxx_atomic_base_impl.33" }
%"struct.std::__1::__cxx_atomic_base_impl.33" = type { i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.34" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"struct.std::__1::pair"* }
%"class.v8::internal::NewSpace" = type { %"class.v8::internal::SpaceWithLinearArea", %"class.v8::base::Mutex", %"struct.std::__1::atomic.20", %"struct.std::__1::atomic.20", %"class.v8::internal::SemiSpace", %"class.v8::internal::SemiSpace", %"class.v8::internal::VirtualMemory", %"class.std::__1::vector.104" }
%"class.v8::internal::SpaceWithLinearArea" = type { %"class.v8::internal::Space", %"class.v8::internal::LinearAllocationArea", [3 x i64] }
%"class.v8::internal::Space" = type { %"class.v8::internal::BaseSpace", %"class.v8::internal::AllocationCounter", %"class.v8::internal::heap::List", %"struct.std::__1::atomic.20"*, %"class.std::__1::unique_ptr.98" }
%"class.v8::internal::BaseSpace" = type { i32 (...)**, %"class.v8::internal::Heap"*, i32, %"struct.std::__1::atomic.20", i64 }
%"class.v8::internal::AllocationCounter" = type <{ %"class.std::__1::vector.39", %"class.std::__1::vector.39", %"class.std::__1::unordered_set", i8, [7 x i8], i64, i64, i8, [7 x i8] }>
%"class.std::__1::vector.39" = type { %"class.std::__1::__vector_base.40" }
%"class.std::__1::__vector_base.40" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"class.std::__1::__compressed_pair.41" }
%"struct.v8::internal::AllocationCounter::AllocationObserverCounter" = type { %"class.v8::internal::AllocationObserver"*, i64, i64 }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"* }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table.46" }
%"class.std::__1::__hash_table.46" = type <{ %"class.std::__1::unique_ptr.47", %"class.std::__1::__compressed_pair.57", %"class.std::__1::__compressed_pair.62", %"class.std::__1::__compressed_pair.64", [4 x i8] }>
%"class.std::__1::unique_ptr.47" = type { %"class.std::__1::__compressed_pair.48" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49", %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %"struct.std::__1::__hash_node_base.50"** }
%"struct.std::__1::__hash_node_base.50" = type { %"struct.std::__1::__hash_node_base.50"* }
%"struct.std::__1::__compressed_pair_elem.51" = type { %"class.std::__1::__bucket_list_deallocator.52" }
%"class.std::__1::__bucket_list_deallocator.52" = type { %"class.std::__1::__compressed_pair.53" }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"struct.std::__1::__compressed_pair_elem.58" = type { %"struct.std::__1::__hash_node_base.50" }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.v8::internal::heap::List" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::MemoryChunk" = type { %"class.v8::internal::BasicMemoryChunk", [2 x %"class.v8::internal::SlotSet"*], %"struct.std::__1::atomic.20", %"struct.std::__1::atomic.25", %"class.v8::internal::SlotSet"*, [2 x %"class.v8::internal::TypedSlotSet"*], [2 x %"class.std::__1::set"*], %"class.v8::base::Mutex"*, %"struct.std::__1::atomic.87", %"class.v8::base::Mutex"*, i64, [2 x %"struct.std::__1::atomic.20"], %"class.v8::internal::heap::ListNode", %"class.v8::internal::FreeListCategory"**, %"struct.std::__1::atomic.25", %"class.v8::internal::Bitmap"*, %"class.v8::internal::CodeObjectRegistry"*, %"class.v8::internal::PossiblyEmptyBuckets" }
%"class.v8::internal::BasicMemoryChunk" = type { i64, i64, %"class.v8::internal::Heap"*, i64, i64, i64, i64, %"struct.std::__1::atomic.25", %"struct.std::__1::atomic.69", %"class.v8::internal::VirtualMemory" }
%"struct.std::__1::atomic.69" = type { %"struct.std::__1::__atomic_base.70" }
%"struct.std::__1::__atomic_base.70" = type { %"struct.std::__1::__cxx_atomic_impl.71" }
%"struct.std::__1::__cxx_atomic_impl.71" = type { %"struct.std::__1::__cxx_atomic_base_impl.72" }
%"struct.std::__1::__cxx_atomic_base_impl.72" = type { %"class.v8::internal::BaseSpace"* }
%"class.v8::internal::SlotSet" = type { i8 }
%"class.v8::internal::TypedSlotSet" = type { %"class.v8::internal::TypedSlots", i64 }
%"class.v8::internal::TypedSlots" = type { i32 (...)**, %"struct.v8::internal::TypedSlots::Chunk"*, %"struct.v8::internal::TypedSlots::Chunk"* }
%"struct.v8::internal::TypedSlots::Chunk" = type { %"struct.v8::internal::TypedSlots::Chunk"*, %"class.std::__1::vector.73" }
%"class.std::__1::vector.73" = type { %"class.std::__1::__vector_base.74" }
%"class.std::__1::__vector_base.74" = type { %"struct.v8::internal::TypedSlots::TypedSlot"*, %"struct.v8::internal::TypedSlots::TypedSlot"*, %"class.std::__1::__compressed_pair.75" }
%"struct.v8::internal::TypedSlots::TypedSlot" = type { i32 }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { %"struct.v8::internal::TypedSlots::TypedSlot"* }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.80", %"class.std::__1::__compressed_pair.85" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.85" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::atomic.87" = type { %"struct.std::__1::__atomic_base.88" }
%"struct.std::__1::__atomic_base.88" = type { %"struct.std::__1::__cxx_atomic_impl.89" }
%"struct.std::__1::__cxx_atomic_impl.89" = type { %"struct.std::__1::__cxx_atomic_base_impl.90" }
%"struct.std::__1::__cxx_atomic_base_impl.90" = type { i64 }
%"class.v8::internal::heap::ListNode" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::FreeListCategory" = type { i32, i32, %"class.v8::internal::FreeSpace", %"class.v8::internal::FreeListCategory"*, %"class.v8::internal::FreeListCategory"* }
%"class.v8::internal::FreeSpace" = type { %"class.v8::internal::TorqueGeneratedFreeSpace" }
%"class.v8::internal::TorqueGeneratedFreeSpace" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Bitmap" = type { i8 }
%"class.v8::internal::CodeObjectRegistry" = type <{ %"class.std::__1::vector.91", i8, [7 x i8] }>
%"class.std::__1::vector.91" = type { %"class.std::__1::__vector_base.92" }
%"class.std::__1::__vector_base.92" = type { i64*, i64*, %"class.std::__1::__compressed_pair.93" }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.94" }
%"struct.std::__1::__compressed_pair_elem.94" = type { i64* }
%"class.v8::internal::PossiblyEmptyBuckets" = type { i64 }
%"class.std::__1::unique_ptr.98" = type { %"class.std::__1::__compressed_pair.99" }
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.100" }
%"struct.std::__1::__compressed_pair_elem.100" = type { %"class.v8::internal::FreeList"* }
%"class.v8::internal::FreeList" = type { i32 (...)**, i32, i32, i64, %"struct.std::__1::atomic.20", %"class.v8::internal::FreeListCategory"**, i64 }
%"class.v8::internal::LinearAllocationArea" = type { i64, i64, i64 }
%"class.v8::internal::SemiSpace" = type { %"class.v8::internal::Space", i64, i64, i64, i64, i64, i32, %"class.v8::internal::Page"* }
%"class.v8::internal::Page" = type { %"class.v8::internal::MemoryChunk" }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::vector.104" = type { %"class.std::__1::__vector_base.105" }
%"class.std::__1::__vector_base.105" = type { %"struct.std::__1::pair.106"*, %"struct.std::__1::pair.106"*, %"class.std::__1::__compressed_pair.107" }
%"struct.std::__1::pair.106" = type { i32, i64 }
%"class.std::__1::__compressed_pair.107" = type { %"struct.std::__1::__compressed_pair_elem.108" }
%"struct.std::__1::__compressed_pair_elem.108" = type { %"struct.std::__1::pair.106"* }
%"class.v8::internal::CodeSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::PagedSpace" = type { %"class.v8::internal::SpaceWithLinearArea", i32, i32, i64, %"class.v8::internal::AllocationStats", %"class.v8::base::Mutex", i64, i64 }
%"class.v8::internal::AllocationStats" = type { %"struct.std::__1::atomic.20", i64, %"struct.std::__1::atomic.20" }
%"class.v8::internal::OldLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace" }
%"class.v8::internal::LargeObjectSpace" = type { %"class.v8::internal::Space", %"struct.std::__1::atomic.20", i32, %"struct.std::__1::atomic.20", %"class.v8::base::Mutex", %"struct.std::__1::atomic.20" }
%"class.v8::internal::CodeLargeObjectSpace" = type { %"class.v8::internal::OldLargeObjectSpace", %"class.std::__1::unordered_map.112" }
%"class.std::__1::unordered_map.112" = type { %"class.std::__1::__hash_table.113" }
%"class.std::__1::__hash_table.113" = type <{ %"class.std::__1::unique_ptr.114", %"class.std::__1::__compressed_pair.124", %"class.std::__1::__compressed_pair.129", %"class.std::__1::__compressed_pair.134", [4 x i8] }>
%"class.std::__1::unique_ptr.114" = type { %"class.std::__1::__compressed_pair.115" }
%"class.std::__1::__compressed_pair.115" = type { %"struct.std::__1::__compressed_pair_elem.116", %"struct.std::__1::__compressed_pair_elem.118" }
%"struct.std::__1::__compressed_pair_elem.116" = type { %"struct.std::__1::__hash_node_base.117"** }
%"struct.std::__1::__hash_node_base.117" = type { %"struct.std::__1::__hash_node_base.117"* }
%"struct.std::__1::__compressed_pair_elem.118" = type { %"class.std::__1::__bucket_list_deallocator.119" }
%"class.std::__1::__bucket_list_deallocator.119" = type { %"class.std::__1::__compressed_pair.120" }
%"class.std::__1::__compressed_pair.120" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.124" = type { %"struct.std::__1::__compressed_pair_elem.125" }
%"struct.std::__1::__compressed_pair_elem.125" = type { %"struct.std::__1::__hash_node_base.117" }
%"class.std::__1::__compressed_pair.129" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.134" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.v8::internal::NewLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace", i64 }
%"class.v8::internal::ReadOnlySpace" = type { %"class.v8::internal::BaseSpace", i8, %"class.v8::internal::AllocationStats", %"class.std::__1::vector.140", i64, i64, i8, i64, i64 }
%"class.std::__1::vector.140" = type { %"class.std::__1::__vector_base.141" }
%"class.std::__1::__vector_base.141" = type { %"class.v8::internal::ReadOnlyPage"**, %"class.v8::internal::ReadOnlyPage"**, %"class.std::__1::__compressed_pair.142" }
%"class.v8::internal::ReadOnlyPage" = type { %"class.v8::internal::BasicMemoryChunk" }
%"class.std::__1::__compressed_pair.142" = type { %"struct.std::__1::__compressed_pair_elem.143" }
%"struct.std::__1::__compressed_pair_elem.143" = type { %"class.v8::internal::ReadOnlyPage"** }
%"class.v8::internal::OldSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::MapSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.std::__1::unique_ptr.147" = type { %"class.std::__1::__compressed_pair.148" }
%"class.std::__1::__compressed_pair.148" = type { %"struct.std::__1::__compressed_pair_elem.149" }
%"struct.std::__1::__compressed_pair_elem.149" = type { %"class.v8::internal::ConcurrentAllocator"* }
%"class.v8::internal::ConcurrentAllocator" = type { %"class.v8::internal::LocalHeap"*, %"class.v8::internal::PagedSpace"*, %"class.v8::internal::LocalAllocationBuffer" }
%"class.v8::internal::LocalAllocationBuffer" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::LinearAllocationArea" }
%"class.v8::internal::LocalHeap" = type { %"class.v8::internal::Heap"*, i8, %"struct.std::__1::atomic.1051", i8, i8, %"class.v8::internal::LocalHeap"*, %"class.v8::internal::LocalHeap"*, %"class.std::__1::unique_ptr.1055", %"class.std::__1::unique_ptr.1061", %"class.std::__1::unique_ptr.475", %"class.std::__1::vector.1067", %"class.v8::internal::ConcurrentAllocator" }
%"struct.std::__1::atomic.1051" = type { %"struct.std::__1::__atomic_base.1052" }
%"struct.std::__1::__atomic_base.1052" = type { %"struct.std::__1::__cxx_atomic_impl.1053" }
%"struct.std::__1::__cxx_atomic_impl.1053" = type { %"struct.std::__1::__cxx_atomic_base_impl.1054" }
%"struct.std::__1::__cxx_atomic_base_impl.1054" = type { i32 }
%"class.std::__1::unique_ptr.1055" = type { %"class.std::__1::__compressed_pair.1056" }
%"class.std::__1::__compressed_pair.1056" = type { %"struct.std::__1::__compressed_pair_elem.1057" }
%"struct.std::__1::__compressed_pair_elem.1057" = type { %"class.v8::internal::LocalHandles"* }
%"class.v8::internal::LocalHandles" = type { %"struct.v8::internal::HandleScopeData", %"class.std::__1::vector.809" }
%"class.std::__1::vector.809" = type { %"class.std::__1::__vector_base.810" }
%"class.std::__1::__vector_base.810" = type { i64**, i64**, %"class.std::__1::__compressed_pair.811" }
%"class.std::__1::__compressed_pair.811" = type { %"struct.std::__1::__compressed_pair_elem.812" }
%"struct.std::__1::__compressed_pair_elem.812" = type { i64** }
%"class.std::__1::unique_ptr.1061" = type { %"class.std::__1::__compressed_pair.1062" }
%"class.std::__1::__compressed_pair.1062" = type { %"struct.std::__1::__compressed_pair_elem.1063" }
%"struct.std::__1::__compressed_pair_elem.1063" = type { %"class.v8::internal::PersistentHandles"* }
%"class.v8::internal::PersistentHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::vector.809", i64*, i64*, %"class.v8::internal::PersistentHandles"*, %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.1067" = type { %"class.std::__1::__vector_base.1068" }
%"class.std::__1::__vector_base.1068" = type { %"struct.std::__1::pair.1069"*, %"struct.std::__1::pair.1069"*, %"class.std::__1::__compressed_pair.1070" }
%"struct.std::__1::pair.1069" = type opaque
%"class.std::__1::__compressed_pair.1070" = type { %"struct.std::__1::__compressed_pair_elem.1071" }
%"struct.std::__1::__compressed_pair_elem.1071" = type { %"struct.std::__1::pair.1069"* }
%"class.v8::internal::ArrayBufferExtension" = type { %"struct.std::__1::atomic.153", %"struct.std::__1::atomic.157", %"class.std::__1::shared_ptr", %"class.v8::internal::ArrayBufferExtension"*, %"struct.std::__1::atomic.20" }
%"struct.std::__1::atomic.157" = type { %"struct.std::__1::__atomic_base.158" }
%"struct.std::__1::__atomic_base.158" = type { %"struct.std::__1::__cxx_atomic_impl.159" }
%"struct.std::__1::__cxx_atomic_impl.159" = type { %"struct.std::__1::__cxx_atomic_base_impl.160" }
%"struct.std::__1::__cxx_atomic_base_impl.160" = type { i8 }
%"class.std::__1::shared_ptr" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::BackingStore" = type <{ i8*, %"struct.std::__1::atomic.20", i64, %"union.v8::internal::BackingStore::TypeSpecificData", i16, [6 x i8] }>
%"union.v8::internal::BackingStore::TypeSpecificData" = type { %"class.std::__1::shared_ptr.161" }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"struct.std::__1::atomic.162" = type { %"struct.std::__1::__atomic_base.163" }
%"struct.std::__1::__atomic_base.163" = type { %"struct.std::__1::__cxx_atomic_impl.164" }
%"struct.std::__1::__cxx_atomic_impl.164" = type { %"struct.std::__1::__cxx_atomic_base_impl.165" }
%"struct.std::__1::__cxx_atomic_base_impl.165" = type { i32 }
%"class.v8::internal::AllocationObserver" = type { i32 (...)**, i64 }
%"class.v8::internal::StressScavengeObserver" = type opaque
%"struct.std::__1::atomic.20" = type { %"struct.std::__1::__atomic_base.21" }
%"struct.std::__1::__atomic_base.21" = type { %"struct.std::__1::__atomic_base.22" }
%"struct.std::__1::__atomic_base.22" = type { %"struct.std::__1::__cxx_atomic_impl.23" }
%"struct.std::__1::__cxx_atomic_impl.23" = type { %"struct.std::__1::__cxx_atomic_base_impl.24" }
%"struct.std::__1::__cxx_atomic_base_impl.24" = type { i64 }
%"class.std::__1::vector.166" = type { %"class.std::__1::__vector_base.167" }
%"class.std::__1::__vector_base.167" = type { %"struct.v8::internal::Heap::GCCallbackTuple"*, %"struct.v8::internal::Heap::GCCallbackTuple"*, %"class.std::__1::__compressed_pair.168" }
%"struct.v8::internal::Heap::GCCallbackTuple" = type { void (%"class.v8::Isolate"*, i32, i32, i8*)*, i32, i8* }
%"class.v8::Isolate" = type { i8 }
%"class.std::__1::__compressed_pair.168" = type { %"struct.std::__1::__compressed_pair_elem.169" }
%"struct.std::__1::__compressed_pair_elem.169" = type { %"struct.v8::internal::Heap::GCCallbackTuple"* }
%"class.std::__1::unique_ptr.173" = type { %"class.std::__1::__compressed_pair.174" }
%"class.std::__1::__compressed_pair.174" = type { %"struct.std::__1::__compressed_pair_elem.175" }
%"struct.std::__1::__compressed_pair_elem.175" = type { %"class.v8::internal::GCTracer"* }
%"class.v8::internal::GCTracer" = type opaque
%"class.std::__1::unique_ptr.179" = type { %"class.std::__1::__compressed_pair.180" }
%"class.std::__1::__compressed_pair.180" = type { %"struct.std::__1::__compressed_pair_elem.181" }
%"struct.std::__1::__compressed_pair_elem.181" = type { %"class.v8::internal::MarkCompactCollector"* }
%"class.v8::internal::MarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::base::Mutex", %"class.v8::base::Semaphore", i8, i8, i8, i8, i8, i8, [2 x i8], %"class.v8::internal::MarkingWorklists", %"class.v8::internal::WeakObjects", %"struct.v8::internal::EphemeronMarking", %"class.std::__1::unique_ptr.221", %"class.std::__1::unique_ptr.227", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", %"class.std::__1::vector.281", %"class.std::__1::vector.281", %"class.std::__1::vector.281", %"class.std::__1::vector.288", %"class.v8::internal::Sweeper"*, %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", [2 x i8], i32, i32, [4 x i8] }>
%"class.v8::internal::MarkCompactCollectorBase" = type { i32 (...)**, %"class.v8::internal::Heap"* }
%"class.v8::base::Semaphore" = type { %union.sem_t }
%union.sem_t = type { i64, [24 x i8] }
%"class.v8::internal::MarkingWorklists" = type { %"class.heap::base::Worklist", %"class.heap::base::Worklist", %"class.heap::base::Worklist.182", %"class.std::__1::vector.183", %"class.std::__1::vector.190", %"class.heap::base::Worklist" }
%"class.heap::base::Worklist.182" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment"*, %"struct.std::__1::atomic.20" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment" = type opaque
%"class.std::__1::vector.183" = type { %"class.std::__1::__vector_base.184" }
%"class.std::__1::__vector_base.184" = type { %"struct.v8::internal::ContextWorklistPair"*, %"struct.v8::internal::ContextWorklistPair"*, %"class.std::__1::__compressed_pair.185" }
%"struct.v8::internal::ContextWorklistPair" = type { i64, %"class.heap::base::Worklist"* }
%"class.std::__1::__compressed_pair.185" = type { %"struct.std::__1::__compressed_pair_elem.186" }
%"struct.std::__1::__compressed_pair_elem.186" = type { %"struct.v8::internal::ContextWorklistPair"* }
%"class.std::__1::vector.190" = type { %"class.std::__1::__vector_base.191" }
%"class.std::__1::__vector_base.191" = type { %"class.std::__1::unique_ptr.192"*, %"class.std::__1::unique_ptr.192"*, %"class.std::__1::__compressed_pair.193" }
%"class.std::__1::unique_ptr.192" = type opaque
%"class.std::__1::__compressed_pair.193" = type { %"struct.std::__1::__compressed_pair_elem.194" }
%"struct.std::__1::__compressed_pair_elem.194" = type { %"class.std::__1::unique_ptr.192"* }
%"class.heap::base::Worklist" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment"*, %"struct.std::__1::atomic.20" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment" = type opaque
%"class.v8::internal::WeakObjects" = type { %"class.v8::internal::Worklist", %"class.v8::internal::Worklist.198", %"class.v8::internal::Worklist.200", %"class.v8::internal::Worklist.200", %"class.v8::internal::Worklist.200", %"class.v8::internal::Worklist.202", %"class.v8::internal::Worklist.204", %"class.v8::internal::Worklist.206", %"class.v8::internal::Worklist.208", %"class.v8::internal::Worklist.210", %"class.v8::internal::Worklist.212" }
%"class.v8::internal::Worklist" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"struct.std::__1::atomic.20" }
%"class.v8::internal::Worklist.198" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"struct.std::__1::atomic.20" }
%"class.v8::internal::Worklist.200" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"struct.std::__1::atomic.20" }
%"class.v8::internal::Worklist.202" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"struct.std::__1::atomic.20" }
%"class.v8::internal::Worklist.204" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"struct.std::__1::atomic.20" }
%"class.v8::internal::Worklist.206" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"struct.std::__1::atomic.20" }
%"class.v8::internal::Worklist.208" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"struct.std::__1::atomic.20" }
%"class.v8::internal::Worklist.210" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"struct.std::__1::atomic.20" }
%"class.v8::internal::Worklist.212" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"struct.std::__1::atomic.20" }
%"struct.v8::internal::EphemeronMarking" = type { %"class.std::__1::vector.214", i8, i64 }
%"class.std::__1::vector.214" = type { %"class.std::__1::__vector_base.215" }
%"class.std::__1::__vector_base.215" = type { %"class.v8::internal::HeapObject"*, %"class.v8::internal::HeapObject"*, %"class.std::__1::__compressed_pair.216" }
%"class.std::__1::__compressed_pair.216" = type { %"struct.std::__1::__compressed_pair_elem.217" }
%"struct.std::__1::__compressed_pair_elem.217" = type { %"class.v8::internal::HeapObject"* }
%"class.std::__1::unique_ptr.221" = type { %"class.std::__1::__compressed_pair.222" }
%"class.std::__1::__compressed_pair.222" = type { %"struct.std::__1::__compressed_pair_elem.223" }
%"struct.std::__1::__compressed_pair_elem.223" = type { %"class.v8::internal::MainMarkingVisitor"* }
%"class.v8::internal::MainMarkingVisitor" = type opaque
%"class.std::__1::unique_ptr.227" = type { %"class.std::__1::__compressed_pair.228" }
%"class.std::__1::__compressed_pair.228" = type { %"struct.std::__1::__compressed_pair_elem.229" }
%"struct.std::__1::__compressed_pair_elem.229" = type { %"class.v8::internal::MarkingWorklists::Local"* }
%"class.v8::internal::MarkingWorklists::Local" = type { %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", i64, %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local"*, i8, [7 x i8], %"class.std::__1::unordered_map.230" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local" = type { %"class.heap::base::Worklist.182"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.heap::base::internal::SegmentBase" = type { i16, i16 }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local" = type { %"class.heap::base::Worklist"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.std::__1::unordered_map.230" = type { %"class.std::__1::__hash_table.231" }
%"class.std::__1::__hash_table.231" = type <{ %"class.std::__1::unique_ptr.232", %"class.std::__1::__compressed_pair.242", %"class.std::__1::__compressed_pair.247", %"class.std::__1::__compressed_pair.250", [4 x i8] }>
%"class.std::__1::unique_ptr.232" = type { %"class.std::__1::__compressed_pair.233" }
%"class.std::__1::__compressed_pair.233" = type { %"struct.std::__1::__compressed_pair_elem.234", %"struct.std::__1::__compressed_pair_elem.236" }
%"struct.std::__1::__compressed_pair_elem.234" = type { %"struct.std::__1::__hash_node_base.235"** }
%"struct.std::__1::__hash_node_base.235" = type { %"struct.std::__1::__hash_node_base.235"* }
%"struct.std::__1::__compressed_pair_elem.236" = type { %"class.std::__1::__bucket_list_deallocator.237" }
%"class.std::__1::__bucket_list_deallocator.237" = type { %"class.std::__1::__compressed_pair.238" }
%"class.std::__1::__compressed_pair.238" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.242" = type { %"struct.std::__1::__compressed_pair_elem.243" }
%"struct.std::__1::__compressed_pair_elem.243" = type { %"struct.std::__1::__hash_node_base.235" }
%"class.std::__1::__compressed_pair.247" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.250" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.v8::internal::NativeContextInferrer" = type { i8 }
%"class.v8::internal::NativeContextStats" = type { %"class.std::__1::unordered_map.257" }
%"class.std::__1::unordered_map.257" = type { %"class.std::__1::__hash_table.258" }
%"class.std::__1::__hash_table.258" = type <{ %"class.std::__1::unique_ptr.259", %"class.std::__1::__compressed_pair.269", %"class.std::__1::__compressed_pair.274", %"class.std::__1::__compressed_pair.277", [4 x i8] }>
%"class.std::__1::unique_ptr.259" = type { %"class.std::__1::__compressed_pair.260" }
%"class.std::__1::__compressed_pair.260" = type { %"struct.std::__1::__compressed_pair_elem.261", %"struct.std::__1::__compressed_pair_elem.263" }
%"struct.std::__1::__compressed_pair_elem.261" = type { %"struct.std::__1::__hash_node_base.262"** }
%"struct.std::__1::__hash_node_base.262" = type { %"struct.std::__1::__hash_node_base.262"* }
%"struct.std::__1::__compressed_pair_elem.263" = type { %"class.std::__1::__bucket_list_deallocator.264" }
%"class.std::__1::__bucket_list_deallocator.264" = type { %"class.std::__1::__compressed_pair.265" }
%"class.std::__1::__compressed_pair.265" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.269" = type { %"struct.std::__1::__compressed_pair_elem.270" }
%"struct.std::__1::__compressed_pair_elem.270" = type { %"struct.std::__1::__hash_node_base.262" }
%"class.std::__1::__compressed_pair.274" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.277" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.std::__1::vector.281" = type { %"class.std::__1::__vector_base.282" }
%"class.std::__1::__vector_base.282" = type { %"class.v8::internal::Page"**, %"class.v8::internal::Page"**, %"class.std::__1::__compressed_pair.283" }
%"class.std::__1::__compressed_pair.283" = type { %"struct.std::__1::__compressed_pair_elem.284" }
%"struct.std::__1::__compressed_pair_elem.284" = type { %"class.v8::internal::Page"** }
%"class.std::__1::vector.288" = type { %"class.std::__1::__vector_base.289" }
%"class.std::__1::__vector_base.289" = type { %"struct.std::__1::pair.290"*, %"struct.std::__1::pair.290"*, %"class.std::__1::__compressed_pair.291" }
%"struct.std::__1::pair.290" = type opaque
%"class.std::__1::__compressed_pair.291" = type { %"struct.std::__1::__compressed_pair_elem.292" }
%"struct.std::__1::__compressed_pair_elem.292" = type { %"struct.std::__1::pair.290"* }
%"class.v8::internal::Sweeper" = type <{ %"class.v8::internal::Heap"*, %"class.v8::internal::MajorNonAtomicMarkingState"*, %"class.std::__1::unique_ptr.296", %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.281"], [3 x %"class.std::__1::vector.281"], i8, %"struct.std::__1::atomic.153", [6 x i8], %"class.std::__1::vector.281", i64, %"class.v8::base::Semaphore", i8, i8, i8, [5 x i8] }>
%"class.std::__1::unique_ptr.296" = type { %"class.std::__1::__compressed_pair.297" }
%"class.std::__1::__compressed_pair.297" = type { %"struct.std::__1::__compressed_pair_elem.298" }
%"struct.std::__1::__compressed_pair_elem.298" = type { %"class.v8::JobHandle"* }
%"class.v8::JobHandle" = type { i32 (...)** }
%"class.v8::internal::MajorMarkingState" = type { i8 }
%"class.v8::internal::MajorNonAtomicMarkingState" = type { i8 }
%"class.v8::internal::MinorMarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::internal::Worklist.306"*, %"class.v8::internal::YoungGenerationMarkingVisitor"*, %"class.v8::base::Semaphore", %"class.std::__1::vector.281", %"class.std::__1::vector.281", %"class.v8::internal::MinorMarkingState", %"class.v8::internal::MinorNonAtomicMarkingState", [6 x i8] }>
%"class.v8::internal::Worklist.306" = type opaque
%"class.v8::internal::YoungGenerationMarkingVisitor" = type opaque
%"class.v8::internal::MinorMarkingState" = type { i8 }
%"class.v8::internal::MinorNonAtomicMarkingState" = type { i8 }
%"class.std::__1::unique_ptr.309" = type { %"class.std::__1::__compressed_pair.310" }
%"class.std::__1::__compressed_pair.310" = type { %"struct.std::__1::__compressed_pair_elem.311" }
%"struct.std::__1::__compressed_pair_elem.311" = type { %"class.v8::internal::ScavengerCollector"* }
%"class.v8::internal::ScavengerCollector" = type opaque
%"class.std::__1::unique_ptr.315" = type { %"class.std::__1::__compressed_pair.316" }
%"class.std::__1::__compressed_pair.316" = type { %"struct.std::__1::__compressed_pair_elem.317" }
%"struct.std::__1::__compressed_pair_elem.317" = type { %"class.v8::internal::ArrayBufferSweeper"* }
%"class.v8::internal::ArrayBufferSweeper" = type opaque
%"class.std::__1::unique_ptr.321" = type { %"class.std::__1::__compressed_pair.322" }
%"class.std::__1::__compressed_pair.322" = type { %"struct.std::__1::__compressed_pair_elem.323" }
%"struct.std::__1::__compressed_pair_elem.323" = type { %"class.v8::internal::MemoryAllocator"* }
%"class.v8::internal::MemoryAllocator" = type { %"class.v8::internal::Isolate"*, %"class.v8::PageAllocator"*, %"class.v8::PageAllocator"*, i64, %"struct.std::__1::atomic.20", %"struct.std::__1::atomic.20", %"struct.std::__1::atomic.20", %"struct.std::__1::atomic.20", %"class.v8::internal::VirtualMemory", %"class.v8::internal::MemoryAllocator::Unmapper", %"class.std::__1::unordered_set.331", %"class.v8::base::Mutex" }
%"class.v8::internal::MemoryAllocator::Unmapper" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MemoryAllocator"*, %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.324"], %"class.std::__1::unique_ptr.296" }
%"class.std::__1::vector.324" = type { %"class.std::__1::__vector_base.325" }
%"class.std::__1::__vector_base.325" = type { %"class.v8::internal::MemoryChunk"**, %"class.v8::internal::MemoryChunk"**, %"class.std::__1::__compressed_pair.326" }
%"class.std::__1::__compressed_pair.326" = type { %"struct.std::__1::__compressed_pair_elem.327" }
%"struct.std::__1::__compressed_pair_elem.327" = type { %"class.v8::internal::MemoryChunk"** }
%"class.std::__1::unique_ptr.360" = type { %"class.std::__1::__compressed_pair.361" }
%"class.std::__1::__compressed_pair.361" = type { %"struct.std::__1::__compressed_pair_elem.362" }
%"struct.std::__1::__compressed_pair_elem.362" = type { %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::IncrementalMarking" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MarkCompactCollector"*, %"class.v8::internal::WeakObjects"*, double, double, i64, i64, i64, i64, double, i64, %"struct.std::__1::atomic.363", i8, i8, i8, i8, [3 x i8], %"class.v8::internal::IncrementalMarkingJob", %"struct.std::__1::atomic.367", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorAtomicMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", %"class.v8::base::Mutex", %"class.std::__1::unordered_map.372" }
%"struct.std::__1::atomic.363" = type { %"struct.std::__1::__atomic_base.364" }
%"struct.std::__1::__atomic_base.364" = type { %"struct.std::__1::__cxx_atomic_impl.365" }
%"struct.std::__1::__cxx_atomic_impl.365" = type { %"struct.std::__1::__cxx_atomic_base_impl.366" }
%"struct.std::__1::__cxx_atomic_base_impl.366" = type { i8 }
%"class.v8::internal::IncrementalMarkingJob" = type <{ %"class.v8::base::Mutex", double, i8, i8, [6 x i8] }>
%"struct.std::__1::atomic.367" = type { %"struct.std::__1::__atomic_base.368" }
%"struct.std::__1::__atomic_base.368" = type { %"struct.std::__1::__cxx_atomic_impl.369" }
%"struct.std::__1::__cxx_atomic_impl.369" = type { %"struct.std::__1::__cxx_atomic_base_impl.370" }
%"struct.std::__1::__cxx_atomic_base_impl.370" = type { i32 }
%"class.v8::internal::IncrementalMarking::Observer" = type { %"class.v8::internal::AllocationObserver", %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::MajorAtomicMarkingState" = type { i8 }
%"class.std::__1::unordered_map.372" = type { %"class.std::__1::__hash_table.373" }
%"class.std::__1::__hash_table.373" = type <{ %"class.std::__1::unique_ptr.374", %"class.std::__1::__compressed_pair.384", %"class.std::__1::__compressed_pair.389", %"class.std::__1::__compressed_pair.392", [4 x i8] }>
%"class.std::__1::unique_ptr.374" = type { %"class.std::__1::__compressed_pair.375" }
%"class.std::__1::__compressed_pair.375" = type { %"struct.std::__1::__compressed_pair_elem.376", %"struct.std::__1::__compressed_pair_elem.378" }
%"struct.std::__1::__compressed_pair_elem.376" = type { %"struct.std::__1::__hash_node_base.377"** }
%"struct.std::__1::__hash_node_base.377" = type { %"struct.std::__1::__hash_node_base.377"* }
%"struct.std::__1::__compressed_pair_elem.378" = type { %"class.std::__1::__bucket_list_deallocator.379" }
%"class.std::__1::__bucket_list_deallocator.379" = type { %"class.std::__1::__compressed_pair.380" }
%"class.std::__1::__compressed_pair.380" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.384" = type { %"struct.std::__1::__compressed_pair_elem.385" }
%"struct.std::__1::__compressed_pair_elem.385" = type { %"struct.std::__1::__hash_node_base.377" }
%"class.std::__1::__compressed_pair.389" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.392" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.std::__1::unique_ptr.399" = type { %"class.std::__1::__compressed_pair.400" }
%"class.std::__1::__compressed_pair.400" = type { %"struct.std::__1::__compressed_pair_elem.401" }
%"struct.std::__1::__compressed_pair_elem.401" = type { %"class.v8::internal::ConcurrentMarking"* }
%"class.v8::internal::ConcurrentMarking" = type <{ %"class.std::__1::unique_ptr.296", %"class.v8::internal::Heap"*, %"class.v8::internal::MarkingWorklists"*, %"class.v8::internal::WeakObjects"*, [8 x %"struct.v8::internal::ConcurrentMarking::TaskState"], %"struct.std::__1::atomic.20", %"struct.std::__1::atomic.153", [7 x i8] }>
%"struct.v8::internal::ConcurrentMarking::TaskState" = type { i64, %"class.std::__1::unordered_map.402", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", [64 x i8] }
%"class.std::__1::unordered_map.402" = type { %"class.std::__1::__hash_table.403" }
%"class.std::__1::__hash_table.403" = type <{ %"class.std::__1::unique_ptr.404", %"class.std::__1::__compressed_pair.414", %"class.std::__1::__compressed_pair.419", %"class.std::__1::__compressed_pair.422", [4 x i8] }>
%"class.std::__1::unique_ptr.404" = type { %"class.std::__1::__compressed_pair.405" }
%"class.std::__1::__compressed_pair.405" = type { %"struct.std::__1::__compressed_pair_elem.406", %"struct.std::__1::__compressed_pair_elem.408" }
%"struct.std::__1::__compressed_pair_elem.406" = type { %"struct.std::__1::__hash_node_base.407"** }
%"struct.std::__1::__hash_node_base.407" = type { %"struct.std::__1::__hash_node_base.407"* }
%"struct.std::__1::__compressed_pair_elem.408" = type { %"class.std::__1::__bucket_list_deallocator.409" }
%"class.std::__1::__bucket_list_deallocator.409" = type { %"class.std::__1::__compressed_pair.410" }
%"class.std::__1::__compressed_pair.410" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.414" = type { %"struct.std::__1::__compressed_pair_elem.415" }
%"struct.std::__1::__compressed_pair_elem.415" = type { %"struct.std::__1::__hash_node_base.407" }
%"class.std::__1::__compressed_pair.419" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.422" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.std::__1::unique_ptr.429" = type { %"class.std::__1::__compressed_pair.430" }
%"class.std::__1::__compressed_pair.430" = type { %"struct.std::__1::__compressed_pair_elem.431" }
%"struct.std::__1::__compressed_pair_elem.431" = type { %"class.v8::internal::GCIdleTimeHandler"* }
%"class.v8::internal::GCIdleTimeHandler" = type opaque
%"class.std::__1::unique_ptr.435" = type { %"class.std::__1::__compressed_pair.436" }
%"class.std::__1::__compressed_pair.436" = type { %"struct.std::__1::__compressed_pair_elem.437" }
%"struct.std::__1::__compressed_pair_elem.437" = type { %"class.v8::internal::MemoryMeasurement"* }
%"class.v8::internal::MemoryMeasurement" = type { %"class.std::__1::list", %"class.std::__1::list", %"class.std::__1::list", %"class.v8::internal::Isolate"*, i8, i8, i8, %"class.v8::base::RandomNumberGenerator" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.438" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.438" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.v8::base::RandomNumberGenerator" = type { i64, i64, i64 }
%"class.std::__1::unique_ptr.445" = type { %"class.std::__1::__compressed_pair.446" }
%"class.std::__1::__compressed_pair.446" = type { %"struct.std::__1::__compressed_pair_elem.447" }
%"struct.std::__1::__compressed_pair_elem.447" = type { %"class.v8::internal::MemoryReducer"* }
%"class.v8::internal::MemoryReducer" = type opaque
%"class.std::__1::unique_ptr.451" = type { %"class.std::__1::__compressed_pair.452" }
%"class.std::__1::__compressed_pair.452" = type { %"struct.std::__1::__compressed_pair_elem.453" }
%"struct.std::__1::__compressed_pair_elem.453" = type { %"class.v8::internal::ObjectStats"* }
%"class.v8::internal::ObjectStats" = type opaque
%"class.std::__1::unique_ptr.457" = type { %"class.std::__1::__compressed_pair.458" }
%"class.std::__1::__compressed_pair.458" = type { %"struct.std::__1::__compressed_pair_elem.459" }
%"struct.std::__1::__compressed_pair_elem.459" = type { %"class.v8::internal::ScavengeJob"* }
%"class.v8::internal::ScavengeJob" = type opaque
%"class.std::__1::unique_ptr.463" = type { %"class.std::__1::__compressed_pair.464" }
%"class.std::__1::__compressed_pair.464" = type { %"struct.std::__1::__compressed_pair_elem.465" }
%"struct.std::__1::__compressed_pair_elem.465" = type { %"class.v8::internal::AllocationObserver"* }
%"class.std::__1::unique_ptr.469" = type { %"class.std::__1::__compressed_pair.470" }
%"class.std::__1::__compressed_pair.470" = type { %"struct.std::__1::__compressed_pair_elem.471" }
%"struct.std::__1::__compressed_pair_elem.471" = type { %"class.v8::internal::LocalEmbedderHeapTracer"* }
%"class.v8::internal::LocalEmbedderHeapTracer" = type opaque
%"class.std::__1::unique_ptr.475" = type { %"class.std::__1::__compressed_pair.476" }
%"class.std::__1::__compressed_pair.476" = type { %"struct.std::__1::__compressed_pair_elem.477" }
%"struct.std::__1::__compressed_pair_elem.477" = type { %"class.v8::internal::MarkingBarrier"* }
%"class.v8::internal::MarkingBarrier" = type opaque
%"class.std::__1::shared_ptr.481" = type { %"class.v8::internal::CodeRange"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::CodeRange" = type { %"class.v8::internal::VirtualMemoryCage", %"struct.std::__1::atomic.500", %"class.v8::base::Mutex" }
%"class.v8::internal::VirtualMemoryCage" = type { i32 (...)**, i64, %"class.std::__1::unique_ptr.482", %"class.v8::internal::VirtualMemory" }
%"class.std::__1::unique_ptr.482" = type { %"class.std::__1::__compressed_pair.483" }
%"class.std::__1::__compressed_pair.483" = type { %"struct.std::__1::__compressed_pair_elem.484" }
%"struct.std::__1::__compressed_pair_elem.484" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type { %"class.v8::PageAllocator", %"class.v8::base::Mutex", i64, i64, %"class.v8::PageAllocator"*, %"class.v8::base::RegionAllocator" }
%"class.v8::base::RegionAllocator" = type { %"class.v8::base::RegionAllocator::Region", i64, i64, i64, i64, %"class.std::__1::set.485", %"class.std::__1::set.493" }
%"class.v8::base::RegionAllocator::Region" = type <{ %"class.v8::base::AddressRegion", i32, [4 x i8] }>
%"class.std::__1::set.485" = type { %"class.std::__1::__tree.486" }
%"class.std::__1::__tree.486" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.487", %"class.std::__1::__compressed_pair.491" }
%"class.std::__1::__compressed_pair.487" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"class.std::__1::__compressed_pair.491" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::set.493" = type { %"class.std::__1::__tree.494" }
%"class.std::__1::__tree.494" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.487", %"class.std::__1::__compressed_pair.495" }
%"class.std::__1::__compressed_pair.495" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::atomic.500" = type { %"struct.std::__1::__atomic_base.501" }
%"struct.std::__1::__atomic_base.501" = type { %"struct.std::__1::__cxx_atomic_impl.502" }
%"struct.std::__1::__cxx_atomic_impl.502" = type { %"struct.std::__1::__cxx_atomic_base_impl.503" }
%"struct.std::__1::__cxx_atomic_base_impl.503" = type { i8* }
%"class.v8::CppHeap" = type opaque
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"class.v8::internal::StrongRootsEntry" = type { %"class.v8::internal::FullObjectSlot", %"class.v8::internal::FullObjectSlot", %"class.v8::internal::StrongRootsEntry"*, %"class.v8::internal::StrongRootsEntry"* }
%"class.v8::internal::FullObjectSlot" = type { %"class.v8::internal::SlotBase" }
%"class.v8::internal::SlotBase" = type { i64 }
%"class.std::__1::unordered_map.504" = type { %"class.std::__1::__hash_table.505" }
%"class.std::__1::__hash_table.505" = type <{ %"class.std::__1::unique_ptr.506", %"class.std::__1::__compressed_pair.516", %"class.std::__1::__compressed_pair.521", %"class.std::__1::__compressed_pair.524", [4 x i8] }>
%"class.std::__1::unique_ptr.506" = type { %"class.std::__1::__compressed_pair.507" }
%"class.std::__1::__compressed_pair.507" = type { %"struct.std::__1::__compressed_pair_elem.508", %"struct.std::__1::__compressed_pair_elem.510" }
%"struct.std::__1::__compressed_pair_elem.508" = type { %"struct.std::__1::__hash_node_base.509"** }
%"struct.std::__1::__hash_node_base.509" = type { %"struct.std::__1::__hash_node_base.509"* }
%"struct.std::__1::__compressed_pair_elem.510" = type { %"class.std::__1::__bucket_list_deallocator.511" }
%"class.std::__1::__bucket_list_deallocator.511" = type { %"class.std::__1::__compressed_pair.512" }
%"class.std::__1::__compressed_pair.512" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.516" = type { %"struct.std::__1::__compressed_pair_elem.517" }
%"struct.std::__1::__compressed_pair_elem.517" = type { %"struct.std::__1::__hash_node_base.509" }
%"class.std::__1::__compressed_pair.521" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.524" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.std::__1::unique_ptr.530" = type { %"class.std::__1::__compressed_pair.531" }
%"class.std::__1::__compressed_pair.531" = type { %"struct.std::__1::__compressed_pair_elem.532" }
%"struct.std::__1::__compressed_pair_elem.532" = type { %"class.v8::internal::GlobalHandleVector"* }
%"class.v8::internal::GlobalHandleVector" = type opaque
%"class.std::__1::unique_ptr.536" = type { %"class.std::__1::__compressed_pair.537" }
%"class.std::__1::__compressed_pair.537" = type { %"struct.std::__1::__compressed_pair_elem.538" }
%"struct.std::__1::__compressed_pair_elem.538" = type { %"class.v8::internal::GlobalSafepoint"* }
%"class.v8::internal::GlobalSafepoint" = type opaque
%"class.v8::internal::Heap::ExternalStringTable" = type { %"class.v8::internal::Heap"*, %"class.std::__1::vector.542", %"class.std::__1::vector.542" }
%"class.std::__1::unique_ptr.549" = type { %"class.std::__1::__compressed_pair.550" }
%"class.std::__1::__compressed_pair.550" = type { %"struct.std::__1::__compressed_pair_elem.551" }
%"struct.std::__1::__compressed_pair_elem.551" = type { %"class.v8::internal::CollectionBarrier"* }
%"class.v8::internal::CollectionBarrier" = type opaque
%"class.std::__1::unordered_set.331" = type { %"class.std::__1::__hash_table.332" }
%"class.std::__1::__hash_table.332" = type <{ %"class.std::__1::unique_ptr.333", %"class.std::__1::__compressed_pair.343", %"class.std::__1::__compressed_pair.348", %"class.std::__1::__compressed_pair.352", [4 x i8] }>
%"class.std::__1::unique_ptr.333" = type { %"class.std::__1::__compressed_pair.334" }
%"class.std::__1::__compressed_pair.334" = type { %"struct.std::__1::__compressed_pair_elem.335", %"struct.std::__1::__compressed_pair_elem.337" }
%"struct.std::__1::__compressed_pair_elem.335" = type { %"struct.std::__1::__hash_node_base.336"** }
%"struct.std::__1::__hash_node_base.336" = type { %"struct.std::__1::__hash_node_base.336"* }
%"struct.std::__1::__compressed_pair_elem.337" = type { %"class.std::__1::__bucket_list_deallocator.338" }
%"class.std::__1::__bucket_list_deallocator.338" = type { %"class.std::__1::__compressed_pair.339" }
%"class.std::__1::__compressed_pair.339" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.343" = type { %"struct.std::__1::__compressed_pair_elem.344" }
%"struct.std::__1::__compressed_pair_elem.344" = type { %"struct.std::__1::__hash_node_base.336" }
%"class.std::__1::__compressed_pair.348" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.352" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.std::__1::unordered_map.581" = type { %"class.std::__1::__hash_table.582" }
%"class.std::__1::__hash_table.582" = type <{ %"class.std::__1::unique_ptr.583", %"class.std::__1::__compressed_pair.593", %"class.std::__1::__compressed_pair.598", %"class.std::__1::__compressed_pair.601", [4 x i8] }>
%"class.std::__1::unique_ptr.583" = type { %"class.std::__1::__compressed_pair.584" }
%"class.std::__1::__compressed_pair.584" = type { %"struct.std::__1::__compressed_pair_elem.585", %"struct.std::__1::__compressed_pair_elem.587" }
%"struct.std::__1::__compressed_pair_elem.585" = type { %"struct.std::__1::__hash_node_base.586"** }
%"struct.std::__1::__hash_node_base.586" = type { %"struct.std::__1::__hash_node_base.586"* }
%"struct.std::__1::__compressed_pair_elem.587" = type { %"class.std::__1::__bucket_list_deallocator.588" }
%"class.std::__1::__bucket_list_deallocator.588" = type { %"class.std::__1::__compressed_pair.589" }
%"class.std::__1::__compressed_pair.589" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.593" = type { %"struct.std::__1::__compressed_pair_elem.594" }
%"struct.std::__1::__compressed_pair_elem.594" = type { %"struct.std::__1::__hash_node_base.586" }
%"class.std::__1::__compressed_pair.598" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.601" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.std::__1::unordered_map.555" = type { %"class.std::__1::__hash_table.556" }
%"class.std::__1::__hash_table.556" = type <{ %"class.std::__1::unique_ptr.557", %"class.std::__1::__compressed_pair.567", %"class.std::__1::__compressed_pair.572", %"class.std::__1::__compressed_pair.575", [4 x i8] }>
%"class.std::__1::unique_ptr.557" = type { %"class.std::__1::__compressed_pair.558" }
%"class.std::__1::__compressed_pair.558" = type { %"struct.std::__1::__compressed_pair_elem.559", %"struct.std::__1::__compressed_pair_elem.561" }
%"struct.std::__1::__compressed_pair_elem.559" = type { %"struct.std::__1::__hash_node_base.560"** }
%"struct.std::__1::__hash_node_base.560" = type { %"struct.std::__1::__hash_node_base.560"* }
%"struct.std::__1::__compressed_pair_elem.561" = type { %"class.std::__1::__bucket_list_deallocator.562" }
%"class.std::__1::__bucket_list_deallocator.562" = type { %"class.std::__1::__compressed_pair.563" }
%"class.std::__1::__compressed_pair.563" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.567" = type { %"struct.std::__1::__compressed_pair_elem.568" }
%"struct.std::__1::__compressed_pair_elem.568" = type { %"struct.std::__1::__hash_node_base.560" }
%"class.std::__1::__compressed_pair.572" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.575" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.std::__1::unordered_map.605" = type { %"class.std::__1::__hash_table.606" }
%"class.std::__1::__hash_table.606" = type <{ %"class.std::__1::unique_ptr.607", %"class.std::__1::__compressed_pair.617", %"class.std::__1::__compressed_pair.622", %"class.std::__1::__compressed_pair.627", [4 x i8] }>
%"class.std::__1::unique_ptr.607" = type { %"class.std::__1::__compressed_pair.608" }
%"class.std::__1::__compressed_pair.608" = type { %"struct.std::__1::__compressed_pair_elem.609", %"struct.std::__1::__compressed_pair_elem.611" }
%"struct.std::__1::__compressed_pair_elem.609" = type { %"struct.std::__1::__hash_node_base.610"** }
%"struct.std::__1::__hash_node_base.610" = type { %"struct.std::__1::__hash_node_base.610"* }
%"struct.std::__1::__compressed_pair_elem.611" = type { %"class.std::__1::__bucket_list_deallocator.612" }
%"class.std::__1::__bucket_list_deallocator.612" = type { %"class.std::__1::__compressed_pair.613" }
%"class.std::__1::__compressed_pair.613" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.617" = type { %"struct.std::__1::__compressed_pair_elem.618" }
%"struct.std::__1::__compressed_pair_elem.618" = type { %"struct.std::__1::__hash_node_base.610" }
%"class.std::__1::__compressed_pair.622" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.627" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.std::__1::vector.633" = type { %"class.std::__1::__vector_base.634" }
%"class.std::__1::__vector_base.634" = type { %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.std::__1::__compressed_pair.635" }
%"class.v8::internal::HeapObjectAllocationTracker" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.635" = type { %"struct.std::__1::__compressed_pair_elem.636" }
%"struct.std::__1::__compressed_pair_elem.636" = type { %"class.v8::internal::HeapObjectAllocationTracker"** }
%"class.std::__1::unique_ptr.640" = type { %"class.std::__1::__compressed_pair.641" }
%"class.std::__1::__compressed_pair.641" = type { %"struct.std::__1::__compressed_pair_elem.642" }
%"struct.std::__1::__compressed_pair_elem.642" = type { %"class.v8::internal::third_party_heap::Heap"* }
%"class.v8::internal::third_party_heap::Heap" = type { i8 }
%"class.v8::internal::ReadOnlyHeap" = type { i32 (...)**, i8, %"class.v8::internal::ReadOnlySpace"*, %"class.std::__1::vector.542" }
%"class.std::__1::shared_ptr.646" = type { %"class.v8::internal::ReadOnlyArtifacts"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::ReadOnlyArtifacts" = type { i32 (...)**, %"class.std::__1::vector.140", %"class.v8::internal::AllocationStats", %"class.std::__1::unique_ptr.647", %"class.std::__1::unique_ptr.661" }
%"class.std::__1::unique_ptr.647" = type { %"class.std::__1::__compressed_pair.648" }
%"class.std::__1::__compressed_pair.648" = type { %"struct.std::__1::__compressed_pair_elem.649" }
%"struct.std::__1::__compressed_pair_elem.649" = type { %"class.v8::internal::SharedReadOnlySpace"* }
%"class.v8::internal::SharedReadOnlySpace" = type { %"class.v8::internal::ReadOnlySpace", %"class.std::__1::vector.650" }
%"class.std::__1::vector.650" = type { %"class.std::__1::__vector_base.651" }
%"class.std::__1::__vector_base.651" = type { %"class.std::__1::unique_ptr.652"*, %"class.std::__1::unique_ptr.652"*, %"class.std::__1::__compressed_pair.653" }
%"class.std::__1::unique_ptr.652" = type { %"class.std::__1::__compressed_pair.1162" }
%"class.std::__1::__compressed_pair.1162" = type { %"struct.std::__1::__compressed_pair_elem.1163" }
%"struct.std::__1::__compressed_pair_elem.1163" = type { %"class.v8::PageAllocator::SharedMemoryMapping"* }
%"class.v8::PageAllocator::SharedMemoryMapping" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.653" = type { %"struct.std::__1::__compressed_pair_elem.654" }
%"struct.std::__1::__compressed_pair_elem.654" = type { %"class.std::__1::unique_ptr.652"* }
%"class.std::__1::unique_ptr.661" = type { %"class.std::__1::__compressed_pair.662" }
%"class.std::__1::__compressed_pair.662" = type { %"struct.std::__1::__compressed_pair_elem.663" }
%"struct.std::__1::__compressed_pair_elem.663" = type { %"class.v8::internal::ReadOnlyHeap"* }
%"class.std::__1::unique_ptr.667" = type { %"class.std::__1::__compressed_pair.668" }
%"class.std::__1::__compressed_pair.668" = type { %"struct.std::__1::__compressed_pair_elem.669" }
%"struct.std::__1::__compressed_pair_elem.669" = type { %"class.v8::internal::StringTable"* }
%"class.v8::internal::StringTable" = type { %"struct.std::__1::atomic.670", %"class.v8::base::Mutex" }
%"struct.std::__1::atomic.670" = type { %"struct.std::__1::__atomic_base.671" }
%"struct.std::__1::__atomic_base.671" = type { %"struct.std::__1::__cxx_atomic_impl.672" }
%"struct.std::__1::__cxx_atomic_impl.672" = type { %"struct.std::__1::__cxx_atomic_base_impl.673" }
%"struct.std::__1::__cxx_atomic_base_impl.673" = type { %"class.v8::internal::StringTable::Data"* }
%"class.v8::internal::StringTable::Data" = type opaque
%"class.v8::internal::Isolate::EntryStackItem" = type { i32, %"class.v8::internal::Isolate::PerIsolateThreadData"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate::EntryStackItem"* }
%"class.v8::internal::Isolate::PerIsolateThreadData" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::ThreadId", i64, %"class.v8::internal::ThreadState"* }
%"class.v8::internal::ThreadState" = type opaque
%"class.v8::internal::StringStream" = type opaque
%"class.v8::internal::Bootstrapper" = type { %"class.v8::internal::Isolate"*, i32, %"class.v8::internal::SourceCodeCache" }
%"class.v8::internal::SourceCodeCache" = type { i32, %"class.v8::internal::FixedArray" }
%"class.v8::internal::FixedArray" = type { %"class.v8::internal::TorqueGeneratedFixedArray" }
%"class.v8::internal::TorqueGeneratedFixedArray" = type { %"class.v8::internal::FixedArrayBase" }
%"class.v8::internal::FixedArrayBase" = type { %"class.v8::internal::TorqueGeneratedFixedArrayBase" }
%"class.v8::internal::TorqueGeneratedFixedArrayBase" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::RuntimeProfiler" = type opaque
%"class.v8::internal::CompilationCache" = type opaque
%"class.std::__1::shared_ptr.677" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::Counters" = type { %"class.std::__1::enable_shared_from_this", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::AggregatableHistogramTimer", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::RuntimeCallStats", %"class.v8::internal::WorkerThreadRuntimeCallStats", %"class.v8::internal::Isolate"*, %"class.v8::internal::StatsTable" }
%"class.std::__1::enable_shared_from_this" = type { %"class.std::__1::weak_ptr" }
%"class.std::__1::weak_ptr" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::HistogramTimer" = type { %"class.v8::internal::TimedHistogram.base", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::TimedHistogram.base" = type <{ %"class.v8::internal::Histogram", i32 }>
%"class.v8::base::ElapsedTimer" = type { %"class.v8::base::TimeTicks" }
%"class.v8::base::TimeTicks" = type { %"class.v8::base::time_internal::TimeBase" }
%"class.v8::base::time_internal::TimeBase" = type { i64 }
%"class.v8::internal::TimedHistogram" = type <{ %"class.v8::internal::Histogram", i32, [4 x i8] }>
%"class.v8::internal::AggregatableHistogramTimer" = type { %"class.v8::internal::Histogram", %"class.v8::base::TimeDelta" }
%"class.v8::base::TimeDelta" = type { i64 }
%"class.v8::internal::Histogram" = type { i8*, i32, i32, i32, i8*, %"class.v8::internal::Counters"* }
%"class.v8::internal::StatsCounterThreadSafe" = type { %"class.v8::internal::StatsCounterBase", %"class.v8::base::Mutex" }
%"class.v8::internal::StatsCounterBase" = type { %"class.v8::internal::Counters"*, i8*, i32* }
%"class.v8::internal::StatsCounter" = type <{ %"class.v8::internal::StatsCounterBase", i8, [7 x i8] }>
%"class.v8::internal::RuntimeCallStats" = type { %"class.v8::base::AtomicValue", %"class.v8::base::AtomicValue.678", i8, i32, %"class.v8::internal::ThreadId", [1370 x %"class.v8::internal::RuntimeCallCounter"] }
%"class.v8::base::AtomicValue" = type { i64 }
%"class.v8::base::AtomicValue.678" = type { i64 }
%"class.v8::internal::RuntimeCallCounter" = type { i8*, i64, i64 }
%"class.v8::internal::WorkerThreadRuntimeCallStats" = type <{ %"class.v8::base::Mutex", %"class.std::__1::vector.679", %"class.v8::base::Optional", %"class.v8::internal::ThreadId", [4 x i8] }>
%"class.std::__1::vector.679" = type { %"class.std::__1::__vector_base.680" }
%"class.std::__1::__vector_base.680" = type { %"class.std::__1::unique_ptr.681"*, %"class.std::__1::unique_ptr.681"*, %"class.std::__1::__compressed_pair.682" }
%"class.std::__1::unique_ptr.681" = type opaque
%"class.std::__1::__compressed_pair.682" = type { %"struct.std::__1::__compressed_pair_elem.683" }
%"struct.std::__1::__compressed_pair_elem.683" = type { %"class.std::__1::unique_ptr.681"* }
%"class.v8::base::Optional" = type { %"class.v8::base::internal::OptionalBase" }
%"class.v8::base::internal::OptionalBase" = type { %"struct.v8::base::internal::OptionalStorage" }
%"struct.v8::base::internal::OptionalStorage" = type { %"struct.v8::base::internal::OptionalStorageBase" }
%"struct.v8::base::internal::OptionalStorageBase" = type { i8, %union.anon }
%union.anon = type { i32 }
%"class.v8::internal::StatsTable" = type { i32* (i8*)*, i8* (i8*, i32, i32, i64)*, void (i8*, i32)* }
%"class.v8::base::RecursiveMutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.v8::base::SharedMutex" = type { %union.pthread_rwlock_t }
%union.pthread_rwlock_t = type { %struct.__pthread_rwlock_arch_t }
%struct.__pthread_rwlock_arch_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i8, [7 x i8], i64, i32 }
%"class.v8::internal::Logger" = type { %"class.v8::internal::CodeEventListener", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.687", %"class.std::__1::unique_ptr.693", %"struct.std::__1::atomic.153", %"class.std::__1::unique_ptr.699", %"class.std::__1::unique_ptr.705", %"class.std::__1::unique_ptr.711", %"class.std::__1::unique_ptr.717", %"class.std::__1::unique_ptr.723", %"class.std::__1::set.729", i32, i8, %"class.v8::internal::ExistingCodeLogger", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::CodeEventListener" = type { i32 (...)** }
%"class.std::__1::unique_ptr.687" = type { %"class.std::__1::__compressed_pair.688" }
%"class.std::__1::__compressed_pair.688" = type { %"struct.std::__1::__compressed_pair_elem.689" }
%"struct.std::__1::__compressed_pair_elem.689" = type { %"class.v8::internal::Ticker"* }
%"class.v8::internal::Ticker" = type opaque
%"class.std::__1::unique_ptr.693" = type { %"class.std::__1::__compressed_pair.694" }
%"class.std::__1::__compressed_pair.694" = type { %"struct.std::__1::__compressed_pair_elem.695" }
%"struct.std::__1::__compressed_pair_elem.695" = type { %"class.v8::internal::Profiler"* }
%"class.v8::internal::Profiler" = type opaque
%"class.std::__1::unique_ptr.699" = type { %"class.std::__1::__compressed_pair.700" }
%"class.std::__1::__compressed_pair.700" = type { %"struct.std::__1::__compressed_pair_elem.701" }
%"struct.std::__1::__compressed_pair_elem.701" = type { %"class.v8::internal::Log"* }
%"class.v8::internal::Log" = type opaque
%"class.std::__1::unique_ptr.705" = type { %"class.std::__1::__compressed_pair.706" }
%"class.std::__1::__compressed_pair.706" = type { %"struct.std::__1::__compressed_pair_elem.707" }
%"struct.std::__1::__compressed_pair_elem.707" = type { %"class.v8::internal::PerfBasicLogger"* }
%"class.v8::internal::PerfBasicLogger" = type opaque
%"class.std::__1::unique_ptr.711" = type { %"class.std::__1::__compressed_pair.712" }
%"class.std::__1::__compressed_pair.712" = type { %"struct.std::__1::__compressed_pair_elem.713" }
%"struct.std::__1::__compressed_pair_elem.713" = type { %"class.v8::internal::PerfJitLogger"* }
%"class.v8::internal::PerfJitLogger" = type opaque
%"class.std::__1::unique_ptr.717" = type { %"class.std::__1::__compressed_pair.718" }
%"class.std::__1::__compressed_pair.718" = type { %"struct.std::__1::__compressed_pair_elem.719" }
%"struct.std::__1::__compressed_pair_elem.719" = type { %"class.v8::internal::LowLevelLogger"* }
%"class.v8::internal::LowLevelLogger" = type opaque
%"class.std::__1::unique_ptr.723" = type { %"class.std::__1::__compressed_pair.724" }
%"class.std::__1::__compressed_pair.724" = type { %"struct.std::__1::__compressed_pair_elem.725" }
%"struct.std::__1::__compressed_pair_elem.725" = type { %"class.v8::internal::JitLogger"* }
%"class.v8::internal::JitLogger" = type opaque
%"class.std::__1::set.729" = type { %"class.std::__1::__tree.730" }
%"class.std::__1::__tree.730" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.731", %"class.std::__1::__compressed_pair.735" }
%"class.std::__1::__compressed_pair.731" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"class.std::__1::__compressed_pair.735" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.v8::internal::ExistingCodeLogger" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::CodeEventListener"* }
%"class.v8::internal::StubCache" = type { [2048 x %"struct.v8::internal::StubCache::Entry"], [512 x %"struct.v8::internal::StubCache::Entry"], %"class.v8::internal::Isolate"* }
%"struct.v8::internal::StubCache::Entry" = type { %"class.v8::internal::StrongTaggedValue", %"class.v8::internal::TaggedValue", %"class.v8::internal::StrongTaggedValue" }
%"class.v8::internal::TaggedValue" = type { %"class.v8::internal::TaggedImpl.738" }
%"class.v8::internal::TaggedImpl.738" = type { i32 }
%"class.v8::internal::StrongTaggedValue" = type { %"class.v8::internal::TaggedImpl.737" }
%"class.v8::internal::TaggedImpl.737" = type { i32 }
%"class.v8::internal::Deoptimizer" = type opaque
%"class.v8::internal::MaterializedObjectStore" = type opaque
%"class.v8::internal::DescriptorLookupCache" = type { [64 x %"struct.v8::internal::DescriptorLookupCache::Key"], [64 x i32] }
%"struct.v8::internal::DescriptorLookupCache::Key" = type { %"class.v8::internal::Map", %"class.v8::internal::Name" }
%"class.v8::internal::Map" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Name" = type { %"class.v8::internal::TorqueGeneratedName" }
%"class.v8::internal::TorqueGeneratedName" = type { %"class.v8::internal::PrimitiveHeapObject" }
%"class.v8::internal::PrimitiveHeapObject" = type { %"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" }
%"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" = type { %"class.v8::internal::HeapObject" }
%"struct.v8::internal::HandleScopeData" = type { i64*, i64*, i32, i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::CanonicalHandleScope" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::OptimizedCompilationInfo"*, %"class.v8::internal::Zone"*, %"class.v8::internal::RootIndexMap"*, %"class.std::__1::unique_ptr.745", i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::OptimizedCompilationInfo" = type opaque
%"class.v8::internal::RootIndexMap" = type opaque
%"class.std::__1::unique_ptr.745" = type { %"class.std::__1::__compressed_pair.746" }
%"class.std::__1::__compressed_pair.746" = type { %"struct.std::__1::__compressed_pair_elem.747" }
%"struct.std::__1::__compressed_pair_elem.747" = type { %"class.v8::internal::IdentityMap"* }
%"class.v8::internal::IdentityMap" = type opaque
%"class.v8::internal::HandleScopeImplementer" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::DetachableVector", %"class.v8::internal::DetachableVector.751", %"class.v8::internal::DetachableVector.752", %"class.v8::internal::DetachableVector.751", i64*, i64*, %"struct.v8::internal::HandleScopeData" }
%"class.v8::internal::DetachableVector" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVectorBase" = type { i8*, i64, i64 }
%"class.v8::internal::DetachableVector.752" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVector.751" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::UnicodeCache" = type opaque
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic.20", %"struct.std::__1::atomic.20", %"class.std::__1::unique_ptr.739", %"class.std::__1::unique_ptr.482" }
%"class.std::__1::unique_ptr.739" = type { %"class.std::__1::__compressed_pair.740" }
%"class.std::__1::__compressed_pair.740" = type { %"struct.std::__1::__compressed_pair_elem.741" }
%"struct.std::__1::__compressed_pair_elem.741" = type { %"class.v8::internal::VirtualMemory"* }
%"class.v8::internal::InnerPointerToCodeCache" = type opaque
%"class.v8::internal::GlobalHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.753", %"class.std::__1::vector.759", %"class.std::__1::unique_ptr.766", %"class.std::__1::vector.773", %"class.std::__1::unique_ptr.780", i64, %"class.std::__1::vector.786", %"class.std::__1::vector.794", %"class.std::__1::vector.802", i8, i8, i32 }
%"class.std::__1::unique_ptr.753" = type { %"class.std::__1::__compressed_pair.754" }
%"class.std::__1::__compressed_pair.754" = type { %"struct.std::__1::__compressed_pair_elem.755" }
%"struct.std::__1::__compressed_pair_elem.755" = type { %"class.v8::internal::GlobalHandles::NodeSpace"* }
%"class.v8::internal::GlobalHandles::NodeSpace" = type opaque
%"class.std::__1::vector.759" = type { %"class.std::__1::__vector_base.760" }
%"class.std::__1::__vector_base.760" = type { %"class.v8::internal::GlobalHandles::Node"**, %"class.v8::internal::GlobalHandles::Node"**, %"class.std::__1::__compressed_pair.761" }
%"class.v8::internal::GlobalHandles::Node" = type opaque
%"class.std::__1::__compressed_pair.761" = type { %"struct.std::__1::__compressed_pair_elem.762" }
%"struct.std::__1::__compressed_pair_elem.762" = type { %"class.v8::internal::GlobalHandles::Node"** }
%"class.std::__1::unique_ptr.766" = type { %"class.std::__1::__compressed_pair.767" }
%"class.std::__1::__compressed_pair.767" = type { %"struct.std::__1::__compressed_pair_elem.768" }
%"struct.std::__1::__compressed_pair_elem.768" = type { %"class.v8::internal::GlobalHandles::NodeSpace.769"* }
%"class.v8::internal::GlobalHandles::NodeSpace.769" = type opaque
%"class.std::__1::vector.773" = type { %"class.std::__1::__vector_base.774" }
%"class.std::__1::__vector_base.774" = type { %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.std::__1::__compressed_pair.775" }
%"class.v8::internal::GlobalHandles::TracedNode" = type opaque
%"class.std::__1::__compressed_pair.775" = type { %"struct.std::__1::__compressed_pair_elem.776" }
%"struct.std::__1::__compressed_pair_elem.776" = type { %"class.v8::internal::GlobalHandles::TracedNode"** }
%"class.std::__1::unique_ptr.780" = type { %"class.std::__1::__compressed_pair.781" }
%"class.std::__1::__compressed_pair.781" = type { %"struct.std::__1::__compressed_pair_elem.782" }
%"struct.std::__1::__compressed_pair_elem.782" = type { %"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace"* }
%"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace" = type opaque
%"class.std::__1::vector.786" = type { %"class.std::__1::__vector_base.787" }
%"class.std::__1::__vector_base.787" = type { %"struct.std::__1::pair.788"*, %"struct.std::__1::pair.788"*, %"class.std::__1::__compressed_pair.789" }
%"struct.std::__1::pair.788" = type opaque
%"class.std::__1::__compressed_pair.789" = type { %"struct.std::__1::__compressed_pair_elem.790" }
%"struct.std::__1::__compressed_pair_elem.790" = type { %"struct.std::__1::pair.788"* }
%"class.std::__1::vector.794" = type { %"class.std::__1::__vector_base.795" }
%"class.std::__1::__vector_base.795" = type { %"struct.std::__1::pair.796"*, %"struct.std::__1::pair.796"*, %"class.std::__1::__compressed_pair.797" }
%"struct.std::__1::pair.796" = type opaque
%"class.std::__1::__compressed_pair.797" = type { %"struct.std::__1::__compressed_pair_elem.798" }
%"struct.std::__1::__compressed_pair_elem.798" = type { %"struct.std::__1::pair.796"* }
%"class.std::__1::vector.802" = type { %"class.std::__1::__vector_base.803" }
%"class.std::__1::__vector_base.803" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.std::__1::__compressed_pair.804" }
%"class.v8::internal::GlobalHandles::PendingPhantomCallback" = type { void (%"class.v8::WeakCallbackInfo"*)*, i8*, [2 x i8*] }
%"class.v8::WeakCallbackInfo" = type { %"class.v8::Isolate"*, i8*, {}**, [2 x i8*] }
%"class.std::__1::__compressed_pair.804" = type { %"struct.std::__1::__compressed_pair_elem.805" }
%"struct.std::__1::__compressed_pair_elem.805" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"* }
%"class.v8::internal::EternalHandles" = type { i32, %"class.std::__1::vector.809", %"class.std::__1::vector.816" }
%"class.v8::internal::ThreadManager" = type opaque
%"class.v8::bigint::Processor" = type { i8 }
%"class.v8::internal::RuntimeState" = type { %"class.std::__1::unique_ptr.823" }
%"class.std::__1::unique_ptr.823" = type { %"class.std::__1::__compressed_pair.824" }
%"class.std::__1::__compressed_pair.824" = type { %"struct.std::__1::__compressed_pair_elem.825" }
%"struct.std::__1::__compressed_pair_elem.825" = type { %"struct.v8::internal::Runtime::Function"* }
%"struct.v8::internal::Runtime::Function" = type { i32, i32, i8*, i64, i8, i8 }
%"class.v8::internal::Builtins" = type { %"class.v8::internal::Isolate"*, i8, i32 }
%"class.v8::internal::SetupIsolateDelegate" = type opaque
%"class.v8::internal::RegExpStack" = type opaque
%"class.std::__1::vector.816" = type { %"class.std::__1::__vector_base.817" }
%"class.std::__1::__vector_base.817" = type { i32*, i32*, %"class.std::__1::__compressed_pair.818" }
%"class.std::__1::__compressed_pair.818" = type { %"struct.std::__1::__compressed_pair_elem.819" }
%"struct.std::__1::__compressed_pair_elem.819" = type { i32* }
%"class.v8::internal::DateCache" = type opaque
%"struct.std::__1::atomic.829" = type { %"struct.std::__1::__atomic_base.830" }
%"struct.std::__1::__atomic_base.830" = type { %"struct.std::__1::__cxx_atomic_impl.831" }
%"struct.std::__1::__cxx_atomic_impl.831" = type { %"struct.std::__1::__cxx_atomic_base_impl.832" }
%"struct.std::__1::__cxx_atomic_base_impl.832" = type { i32 }
%"class.v8::Promise" = type { i8 }
%"struct.std::__1::atomic.839" = type { %"struct.std::__1::__atomic_base.840" }
%"struct.std::__1::__atomic_base.840" = type { %"struct.std::__1::__cxx_atomic_impl.841" }
%"struct.std::__1::__cxx_atomic_impl.841" = type { %"struct.std::__1::__cxx_atomic_base_impl.842" }
%"struct.std::__1::__cxx_atomic_base_impl.842" = type { i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.844" }
%"class.std::__1::__compressed_pair.844" = type { %"struct.std::__1::__compressed_pair_elem.845" }
%"struct.std::__1::__compressed_pair_elem.845" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.846 }
%union.anon.846 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unordered_map.850" = type { %"class.std::__1::__hash_table.851" }
%"class.std::__1::__hash_table.851" = type <{ %"class.std::__1::unique_ptr.852", %"class.std::__1::__compressed_pair.862", %"class.std::__1::__compressed_pair.867", %"class.std::__1::__compressed_pair.870", [4 x i8] }>
%"class.std::__1::unique_ptr.852" = type { %"class.std::__1::__compressed_pair.853" }
%"class.std::__1::__compressed_pair.853" = type { %"struct.std::__1::__compressed_pair_elem.854", %"struct.std::__1::__compressed_pair_elem.856" }
%"struct.std::__1::__compressed_pair_elem.854" = type { %"struct.std::__1::__hash_node_base.855"** }
%"struct.std::__1::__hash_node_base.855" = type { %"struct.std::__1::__hash_node_base.855"* }
%"struct.std::__1::__compressed_pair_elem.856" = type { %"class.std::__1::__bucket_list_deallocator.857" }
%"class.std::__1::__bucket_list_deallocator.857" = type { %"class.std::__1::__compressed_pair.858" }
%"class.std::__1::__compressed_pair.858" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.862" = type { %"struct.std::__1::__compressed_pair_elem.863" }
%"struct.std::__1::__compressed_pair_elem.863" = type { %"struct.std::__1::__hash_node_base.855" }
%"class.std::__1::__compressed_pair.867" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.870" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::atomic.153" = type { %"struct.std::__1::__atomic_base.154" }
%"struct.std::__1::__atomic_base.154" = type { %"struct.std::__1::__cxx_atomic_impl.155" }
%"struct.std::__1::__cxx_atomic_impl.155" = type { %"struct.std::__1::__cxx_atomic_base_impl.156" }
%"struct.std::__1::__cxx_atomic_base_impl.156" = type { i8 }
%"class.v8::internal::Debug" = type { %"class.v8::debug::DebugDelegate"*, i8, i8, i8, i8, i8, i8, i8, i8, i8, %"class.v8::internal::DebugInfoListNode"*, %"class.std::__1::unique_ptr.876", %"class.v8::internal::Handle.882", %"class.v8::internal::DebugFeatureTracker", %"class.v8::internal::Debug::ThreadLocal", %"class.v8::internal::Handle.883", %"class.v8::internal::Isolate"* }
%"class.v8::debug::DebugDelegate" = type { i32 (...)** }
%"class.v8::internal::DebugInfoListNode" = type { i64*, %"class.v8::internal::DebugInfoListNode"* }
%"class.std::__1::unique_ptr.876" = type { %"class.std::__1::__compressed_pair.877" }
%"class.std::__1::__compressed_pair.877" = type { %"struct.std::__1::__compressed_pair_elem.878" }
%"struct.std::__1::__compressed_pair_elem.878" = type { %"class.v8::internal::Debug::TemporaryObjectsTracker"* }
%"class.v8::internal::Debug::TemporaryObjectsTracker" = type opaque
%"class.v8::internal::Handle.882" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::DebugFeatureTracker" = type <{ %"class.v8::internal::Isolate"*, i32, [4 x i8] }>
%"class.v8::internal::Debug::ThreadLocal" = type <{ i64, i32, i8, [3 x i8], %"class.v8::internal::Object", i8, [3 x i8], i32, i32, i32, %"class.v8::internal::Object", %"class.v8::internal::Object", i32, i8, [3 x i8] }>
%"class.v8::internal::Handle.883" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HeapProfiler" = type { %"class.v8::internal::HeapObjectAllocationTracker", %"class.std::__1::unique_ptr.884", %"class.std::__1::vector.890", %"class.std::__1::unique_ptr.898", %"class.std::__1::unique_ptr.904", i8, i8, %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.910", %"class.std::__1::vector.916", %"struct.std::__1::pair.924" }
%"class.std::__1::unique_ptr.884" = type { %"class.std::__1::__compressed_pair.885" }
%"class.std::__1::__compressed_pair.885" = type { %"struct.std::__1::__compressed_pair_elem.886" }
%"struct.std::__1::__compressed_pair_elem.886" = type { %"class.v8::internal::HeapObjectsMap"* }
%"class.v8::internal::HeapObjectsMap" = type opaque
%"class.std::__1::vector.890" = type { %"class.std::__1::__vector_base.891" }
%"class.std::__1::__vector_base.891" = type { %"class.std::__1::unique_ptr.892"*, %"class.std::__1::unique_ptr.892"*, %"class.std::__1::__compressed_pair.893" }
%"class.std::__1::unique_ptr.892" = type opaque
%"class.std::__1::__compressed_pair.893" = type { %"struct.std::__1::__compressed_pair_elem.894" }
%"struct.std::__1::__compressed_pair_elem.894" = type { %"class.std::__1::unique_ptr.892"* }
%"class.std::__1::unique_ptr.898" = type { %"class.std::__1::__compressed_pair.899" }
%"class.std::__1::__compressed_pair.899" = type { %"struct.std::__1::__compressed_pair_elem.900" }
%"struct.std::__1::__compressed_pair_elem.900" = type { %"class.v8::internal::StringsStorage"* }
%"class.v8::internal::StringsStorage" = type opaque
%"class.std::__1::unique_ptr.904" = type { %"class.std::__1::__compressed_pair.905" }
%"class.std::__1::__compressed_pair.905" = type { %"struct.std::__1::__compressed_pair_elem.906" }
%"struct.std::__1::__compressed_pair_elem.906" = type { %"class.v8::internal::AllocationTracker"* }
%"class.v8::internal::AllocationTracker" = type opaque
%"class.std::__1::unique_ptr.910" = type { %"class.std::__1::__compressed_pair.911" }
%"class.std::__1::__compressed_pair.911" = type { %"struct.std::__1::__compressed_pair_elem.912" }
%"struct.std::__1::__compressed_pair_elem.912" = type { %"class.v8::internal::SamplingHeapProfiler"* }
%"class.v8::internal::SamplingHeapProfiler" = type opaque
%"class.std::__1::vector.916" = type { %"class.std::__1::__vector_base.917" }
%"class.std::__1::__vector_base.917" = type { %"struct.std::__1::pair.918"*, %"struct.std::__1::pair.918"*, %"class.std::__1::__compressed_pair.919" }
%"struct.std::__1::pair.918" = type opaque
%"class.std::__1::__compressed_pair.919" = type { %"struct.std::__1::__compressed_pair_elem.920" }
%"struct.std::__1::__compressed_pair_elem.920" = type { %"struct.std::__1::pair.918"* }
%"struct.std::__1::pair.924" = type { i8 (%"class.v8::Isolate"*, %"class.v8::Local.1"*, i16, i8*)*, i8* }
%"class.v8::Local.1" = type { %"class.v8::Value"* }
%"class.std::__1::unique_ptr.925" = type { %"class.std::__1::__compressed_pair.926" }
%"class.std::__1::__compressed_pair.926" = type { %"struct.std::__1::__compressed_pair_elem.927" }
%"struct.std::__1::__compressed_pair_elem.927" = type { %"class.v8::internal::CodeEventDispatcher"* }
%"class.v8::internal::CodeEventDispatcher" = type { %"class.v8::internal::CodeEventListener", %"class.std::__1::unordered_set.928", %"class.v8::base::Mutex" }
%"class.std::__1::unordered_set.928" = type { %"class.std::__1::__hash_table.929" }
%"class.std::__1::__hash_table.929" = type <{ %"class.std::__1::unique_ptr.930", %"class.std::__1::__compressed_pair.940", %"class.std::__1::__compressed_pair.945", %"class.std::__1::__compressed_pair.949", [4 x i8] }>
%"class.std::__1::unique_ptr.930" = type { %"class.std::__1::__compressed_pair.931" }
%"class.std::__1::__compressed_pair.931" = type { %"struct.std::__1::__compressed_pair_elem.932", %"struct.std::__1::__compressed_pair_elem.934" }
%"struct.std::__1::__compressed_pair_elem.932" = type { %"struct.std::__1::__hash_node_base.933"** }
%"struct.std::__1::__hash_node_base.933" = type { %"struct.std::__1::__hash_node_base.933"* }
%"struct.std::__1::__compressed_pair_elem.934" = type { %"class.std::__1::__bucket_list_deallocator.935" }
%"class.std::__1::__bucket_list_deallocator.935" = type { %"class.std::__1::__compressed_pair.936" }
%"class.std::__1::__compressed_pair.936" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.940" = type { %"struct.std::__1::__compressed_pair_elem.941" }
%"struct.std::__1::__compressed_pair_elem.941" = type { %"struct.std::__1::__hash_node_base.933" }
%"class.std::__1::__compressed_pair.945" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.949" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.v8::internal::AstStringConstants" = type opaque
%"class.v8::internal::interpreter::Interpreter" = type opaque
%"class.v8::internal::compiler::PerIsolateCompilerCache" = type opaque
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"class.v8::internal::CompilerDispatcher" = type opaque
%"class.std::__1::queue" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.963" }
%"struct.std::__1::__split_buffer" = type { %"struct.std::__1::pair.957"**, %"struct.std::__1::pair.957"**, %"struct.std::__1::pair.957"**, %"class.std::__1::__compressed_pair.958" }
%"struct.std::__1::pair.957" = type opaque
%"class.std::__1::__compressed_pair.958" = type { %"struct.std::__1::__compressed_pair_elem.959" }
%"struct.std::__1::__compressed_pair_elem.959" = type { %"struct.std::__1::pair.957"** }
%"class.std::__1::__compressed_pair.963" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.v8::String" = type { i8 }
%"class.v8::Context" = type { i8 }
%"class.v8::FunctionCallbackInfo" = type <{ i64*, i64*, i32, [4 x i8] }>
%"class.v8::internal::Relocatable" = type { i32 (...)**, %"class.v8::internal::Isolate"*, %"class.v8::internal::Relocatable"* }
%"class.std::__1::vector.968" = type { %"class.std::__1::__vector_base.969" }
%"class.std::__1::__vector_base.969" = type { %"class.v8::internal::Handle.970"*, %"class.v8::internal::Handle.970"*, %"class.std::__1::__compressed_pair.971" }
%"class.v8::internal::Handle.970" = type { %"class.v8::internal::HandleBase" }
%"class.std::__1::__compressed_pair.971" = type { %"struct.std::__1::__compressed_pair_elem.972" }
%"struct.std::__1::__compressed_pair_elem.972" = type { %"class.v8::internal::Handle.970"* }
%"class.v8::internal::Object" = type { %"class.v8::internal::TaggedImpl" }
%"class.v8::internal::TaggedImpl" = type { i64 }
%"class.v8::internal::AddressToIndexHashMap" = type opaque
%"class.v8::internal::HeapObjectToIndexHashMap" = type opaque
%"class.v8::internal::MicrotaskQueue" = type opaque
%"class.v8::internal::CompilationStatistics" = type opaque
%"class.v8::internal::CodeTracer" = type <{ %"class.v8::internal::EmbeddedVector", %struct._IO_FILE*, i32, [4 x i8] }>
%"class.v8::internal::EmbeddedVector" = type { %"class.v8::internal::Vector", [128 x i8] }
%"class.v8::internal::Vector" = type { i8*, i64 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%"class.v8::PromiseRejectMessage" = type { %"class.v8::Local.834", i32, %"class.v8::Local.1" }
%"class.v8::Local.834" = type { %"class.v8::Promise"* }
%"class.v8::StartupData" = type { i8*, i32 }
%"class.v8_inspector::V8Inspector" = type opaque
%"class.v8::internal::compiler::NodeObserver" = type opaque
%"class.v8::internal::OptimizingCompileDispatcher" = type opaque
%"class.std::__1::unique_ptr.976" = type { %"class.std::__1::__compressed_pair.977" }
%"class.std::__1::__compressed_pair.977" = type { %"struct.std::__1::__compressed_pair_elem.978" }
%"struct.std::__1::__compressed_pair_elem.978" = type { %"class.v8::internal::PersistentHandlesList"* }
%"class.v8::internal::PersistentHandlesList" = type { %"class.v8::base::Mutex", %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.982" = type { %"class.std::__1::__vector_base.983" }
%"class.std::__1::__vector_base.983" = type { void (%"class.v8::Isolate"*)**, void (%"class.v8::Isolate"*)**, %"class.std::__1::__compressed_pair.984" }
%"class.std::__1::__compressed_pair.984" = type { %"struct.std::__1::__compressed_pair_elem.985" }
%"struct.std::__1::__compressed_pair_elem.985" = type { void (%"class.v8::Isolate"*)** }
%"class.std::__1::shared_ptr.989" = type { %"class.v8::internal::metrics::Recorder"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::metrics::Recorder" = type opaque
%"class.std::__1::unordered_map.990" = type { %"class.std::__1::__hash_table.991" }
%"class.std::__1::__hash_table.991" = type <{ %"class.std::__1::unique_ptr.992", %"class.std::__1::__compressed_pair.1002", %"class.std::__1::__compressed_pair.1007", %"class.std::__1::__compressed_pair.1010", [4 x i8] }>
%"class.std::__1::unique_ptr.992" = type { %"class.std::__1::__compressed_pair.993" }
%"class.std::__1::__compressed_pair.993" = type { %"struct.std::__1::__compressed_pair_elem.994", %"struct.std::__1::__compressed_pair_elem.996" }
%"struct.std::__1::__compressed_pair_elem.994" = type { %"struct.std::__1::__hash_node_base.995"** }
%"struct.std::__1::__hash_node_base.995" = type { %"struct.std::__1::__hash_node_base.995"* }
%"struct.std::__1::__compressed_pair_elem.996" = type { %"class.std::__1::__bucket_list_deallocator.997" }
%"class.std::__1::__bucket_list_deallocator.997" = type { %"class.std::__1::__compressed_pair.998" }
%"class.std::__1::__compressed_pair.998" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.1002" = type { %"struct.std::__1::__compressed_pair_elem.1003" }
%"struct.std::__1::__compressed_pair_elem.1003" = type { %"struct.std::__1::__hash_node_base.995" }
%"class.std::__1::__compressed_pair.1007" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.1010" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.v8::metrics::LongTaskStats" = type { i64, i64, i64 }
%"class.std::__1::vector.542" = type { %"class.std::__1::__vector_base.543" }
%"class.std::__1::__vector_base.543" = type { %"class.v8::internal::Object"*, %"class.v8::internal::Object"*, %"class.std::__1::__compressed_pair.544" }
%"class.std::__1::__compressed_pair.544" = type { %"struct.std::__1::__compressed_pair_elem.545" }
%"struct.std::__1::__compressed_pair_elem.545" = type { %"class.v8::internal::Object"* }
%"class.v8::internal::BuiltinsConstantsTableBuilder" = type opaque
%"class.v8::ArrayBuffer::Allocator" = type { i32 (...)** }
%"class.std::__1::shared_ptr.161" = type { %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::FutexWaitListNode" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::shared_ptr.1014", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::base::ConditionVariable", %"class.v8::internal::FutexWaitListNode"*, %"class.v8::internal::FutexWaitListNode"*, %"class.std::__1::weak_ptr.1043", i64, i8*, i8, i8, %"class.v8::Global", %"class.v8::Global.1044", %"class.v8::base::TimeTicks", i64 }
%"class.std::__1::shared_ptr.1014" = type { %"class.v8::TaskRunner"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::TaskRunner" = type { i32 (...)** }
%"class.v8::base::ConditionVariable" = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.1039, %union.anon.1041, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.1039 = type { i64 }
%union.anon.1041 = type { i64 }
%"class.std::__1::weak_ptr.1043" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::Global" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Promise"* }
%"class.v8::Global.1044" = type { %"class.v8::PersistentBase.1045" }
%"class.v8::PersistentBase.1045" = type { %"class.v8::Context"* }
%"class.v8::internal::CancelableTaskManager" = type <{ i64, %"class.std::__1::unordered_map.1015", %"class.v8::base::ConditionVariable", %"class.v8::base::Mutex", i8, [7 x i8] }>
%"class.std::__1::unordered_map.1015" = type { %"class.std::__1::__hash_table.1016" }
%"class.std::__1::__hash_table.1016" = type <{ %"class.std::__1::unique_ptr.1017", %"class.std::__1::__compressed_pair.1027", %"class.std::__1::__compressed_pair.1032", %"class.std::__1::__compressed_pair.1035", [4 x i8] }>
%"class.std::__1::unique_ptr.1017" = type { %"class.std::__1::__compressed_pair.1018" }
%"class.std::__1::__compressed_pair.1018" = type { %"struct.std::__1::__compressed_pair_elem.1019", %"struct.std::__1::__compressed_pair_elem.1021" }
%"struct.std::__1::__compressed_pair_elem.1019" = type { %"struct.std::__1::__hash_node_base.1020"** }
%"struct.std::__1::__hash_node_base.1020" = type { %"struct.std::__1::__hash_node_base.1020"* }
%"struct.std::__1::__compressed_pair_elem.1021" = type { %"class.std::__1::__bucket_list_deallocator.1022" }
%"class.std::__1::__bucket_list_deallocator.1022" = type { %"class.std::__1::__compressed_pair.1023" }
%"class.std::__1::__compressed_pair.1023" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.1027" = type { %"struct.std::__1::__compressed_pair_elem.1028" }
%"struct.std::__1::__compressed_pair_elem.1028" = type { %"struct.std::__1::__hash_node_base.1020" }
%"class.std::__1::__compressed_pair.1032" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.1035" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.v8::debug::ConsoleDelegate" = type { i32 (...)** }
%"class.v8::debug::AsyncEventDelegate" = type { i32 (...)** }
%"class.std::__1::unique_ptr.1046" = type { %"class.std::__1::__compressed_pair.1047" }
%"class.std::__1::__compressed_pair.1047" = type { %"struct.std::__1::__compressed_pair_elem.1048" }
%"struct.std::__1::__compressed_pair_elem.1048" = type { %"class.v8::internal::LocalIsolate"* }
%"class.v8::internal::LocalIsolate" = type { %"class.v8::internal::HiddenLocalFactory", %"class.v8::internal::LocalHeap", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.1075", %"class.v8::internal::ThreadId", i64, %"class.v8::internal::RuntimeCallStats"* }
%"class.v8::internal::HiddenLocalFactory" = type { %"class.v8::internal::LocalFactory" }
%"class.v8::internal::LocalFactory" = type { %"class.v8::internal::ReadOnlyRoots" }
%"class.v8::internal::ReadOnlyRoots" = type { i64* }
%"class.std::__1::unique_ptr.1075" = type { %"class.std::__1::__compressed_pair.1076" }
%"class.std::__1::__compressed_pair.1076" = type { %"struct.std::__1::__compressed_pair_elem.1077" }
%"struct.std::__1::__compressed_pair_elem.1077" = type { %"class.v8::internal::LocalLogger"* }
%"class.v8::internal::LocalLogger" = type opaque
%"struct.v8::internal::ManagedPtrDestructor" = type { i64, %"struct.v8::internal::ManagedPtrDestructor"*, %"struct.v8::internal::ManagedPtrDestructor"*, i8*, void (i8*)*, i64* }
%"class.v8::internal::wasm::WasmEngine" = type opaque
%"class.std::__1::unique_ptr.1084" = type { %"class.std::__1::__compressed_pair.1085" }
%"class.std::__1::__compressed_pair.1085" = type { %"struct.std::__1::__compressed_pair_elem.1086" }
%"struct.std::__1::__compressed_pair_elem.1086" = type { %"class.v8::internal::TracingCpuProfilerImpl"* }
%"class.v8::internal::TracingCpuProfilerImpl" = type opaque
%"class.v8::internal::EmbeddedFileWriterInterface" = type opaque
%"class.v8::Context::BackupIncumbentScope" = type { %"class.v8::Local.835", i64, %"class.v8::Context::BackupIncumbentScope"* }
%"class.v8::Local.835" = type { %"class.v8::Context"* }
%"class.v8::internal::Isolate::ThreadDataTable" = type { %"class.std::__1::unordered_map.1092" }
%"class.std::__1::unordered_map.1092" = type { %"class.std::__1::__hash_table.1093" }
%"class.std::__1::__hash_table.1093" = type <{ %"class.std::__1::unique_ptr.1094", %"class.std::__1::__compressed_pair.1104", %"class.std::__1::__compressed_pair.1109", %"class.std::__1::__compressed_pair.1112", [4 x i8] }>
%"class.std::__1::unique_ptr.1094" = type { %"class.std::__1::__compressed_pair.1095" }
%"class.std::__1::__compressed_pair.1095" = type { %"struct.std::__1::__compressed_pair_elem.1096", %"struct.std::__1::__compressed_pair_elem.1098" }
%"struct.std::__1::__compressed_pair_elem.1096" = type { %"struct.std::__1::__hash_node_base.1097"** }
%"struct.std::__1::__hash_node_base.1097" = type { %"struct.std::__1::__hash_node_base.1097"* }
%"struct.std::__1::__compressed_pair_elem.1098" = type { %"class.std::__1::__bucket_list_deallocator.1099" }
%"class.std::__1::__bucket_list_deallocator.1099" = type { %"class.std::__1::__compressed_pair.1100" }
%"class.std::__1::__compressed_pair.1100" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.1104" = type { %"struct.std::__1::__compressed_pair_elem.1105" }
%"struct.std::__1::__compressed_pair_elem.1105" = type { %"struct.std::__1::__hash_node_base.1097" }
%"class.std::__1::__compressed_pair.1109" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.1112" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.v8::base::Mutex" = type { %union.pthread_mutex_t }
%"struct.std::__1::atomic.1118" = type { %"struct.std::__1::__atomic_base.1119" }
%"struct.std::__1::__atomic_base.1119" = type { %"struct.std::__1::__cxx_atomic_impl.1120" }
%"struct.std::__1::__cxx_atomic_impl.1120" = type { %"struct.std::__1::__cxx_atomic_base_impl.1121" }
%"struct.std::__1::__cxx_atomic_base_impl.1121" = type { %"class.std::__1::vector.1122"* }
%"class.std::__1::vector.1122" = type { %"class.std::__1::__vector_base.1123" }
%"class.std::__1::__vector_base.1123" = type { %"struct.v8::MemoryRange"*, %"struct.v8::MemoryRange"*, %"class.std::__1::__compressed_pair.1124" }
%"struct.v8::MemoryRange" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.1124" = type { %"struct.std::__1::__compressed_pair_elem.1125" }
%"struct.std::__1::__compressed_pair_elem.1125" = type { %"struct.v8::MemoryRange"* }
%"class.v8::internal::FactoryBase" = type { i8 }
%"class.v8::internal::FactoryBase.1049" = type { i8 }
%"class.v8::internal::Factory" = type { i8 }
%"class.v8::internal::MessageLocation" = type { %"class.v8::internal::Handle.1177", i32, i32, i32, %"class.v8::internal::Handle.1178" }
%"class.v8::internal::Handle.1177" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::Handle.1178" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::MutableBigInt" = type { %"class.v8::internal::FreshlyAllocatedBigInt" }
%"class.v8::internal::FreshlyAllocatedBigInt" = type { %"class.v8::internal::BigIntBase" }
%"class.v8::internal::BigIntBase" = type { %"class.v8::internal::PrimitiveHeapObject" }
%"class.v8::bigint::Digits" = type <{ i64*, i32, [4 x i8] }>
%"class.v8::internal::Handle.1129" = type { %"class.v8::internal::HandleBase" }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { i64 (%"union.std::__1::__function::__policy_storage"*, i64, i64)* }
%"class.v8::internal::Handle.1132" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::Handle<v8::internal::Object>::ObjectRef" = type { %"class.v8::internal::Object" }
%"class.v8::internal::BigInt" = type { %"class.v8::internal::BigIntBase" }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry" = type { i8, %"class.std::__1::basic_ostream"* }
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale::facet" = type { %"class.std::__1::__shared_count" }
%"class.std::__1::ctype" = type <{ %"class.std::__1::locale::facet", i16*, i8, [7 x i8] }>
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

$_ZN2v88internal6BigInt4ZeroINS0_7IsolateEEENS0_6HandleIS1_EEPT_NS0_14AllocationTypeE = comdat any

$_ZN2v88internal13MutableBigInt4ZeroINS0_7IsolateEEENS0_6HandleINS0_6BigIntEEEPT_NS0_14AllocationTypeE = comdat any

$_ZN2v88internal6BigInt4ZeroINS0_12LocalIsolateEEENS0_6HandleIS1_EEPT_NS0_14AllocationTypeE = comdat any

$_ZN2v88internal6BigInt11AllocateForINS0_7IsolateEEENS0_11MaybeHandleINS0_22FreshlyAllocatedBigIntEEEPT_iiNS0_11ShouldThrowENS0_14AllocationTypeE = comdat any

$_ZN2v88internal6BigInt11AllocateForINS0_12LocalIsolateEEENS0_11MaybeHandleINS0_22FreshlyAllocatedBigIntEEEPT_iiNS0_11ShouldThrowENS0_14AllocationTypeE = comdat any

$_ZN2v88internal6BigInt8FinalizeINS0_7IsolateEEENS0_6HandleIS1_EENS4_INS0_22FreshlyAllocatedBigIntEEEb = comdat any

$_ZN2v88internal6BigInt8FinalizeINS0_12LocalIsolateEEENS0_6HandleIS1_EENS4_INS0_22FreshlyAllocatedBigIntEEEb = comdat any

$_ZN2v88internal13MutableBigInt17AbsoluteBitwiseOpEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEES6_S1_NS1_19ExtraDigitsHandlingENS1_11SymmetricOpERKNSt3__18functionIFmmmEEE = comdat any

$_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m = comdat any

$_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = comdat any

@_ZN2v88internalL15kMaxBitsPerCharE = internal unnamed_addr constant [37 x i8] c"\00\00 3@KSZ`fkoswz~\80\83\86\88\8B\8D\8F\91\93\95\97\99\9A\9C\9E\9F\A0\A2\A3\A5\A6", align 16
@.str = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"...\00", align 1
@.str.3 = private unnamed_addr constant [18 x i8] c"Check failed: %s.\00", align 1
@.str.4 = private unnamed_addr constant [18 x i8] c"carry + high == 0\00", align 1
@_ZN2v88internalL16kConversionCharsE = internal unnamed_addr constant [37 x i8] c"0123456789abcdefghijklmnopqrstuvwxyz\00", align 16
@_ZNSt3__15ctypeIcE2idE = external global %"class.std::__1::locale::id", align 8
@_ZN2v88internal36FLAG_correctness_fuzzer_suppressionsE = external local_unnamed_addr global i8, align 1
@.str.6 = private unnamed_addr constant [34 x i8] c"Aborting on invalid BigInt length\00", align 1
@.str.7 = private unnamed_addr constant [23 x i8] c"(location_) != nullptr\00", align 1
@"_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN2v88internal13MutableBigInt11AbsoluteAndEPNS5_7IsolateENS5_6HandleINS5_10BigIntBaseEEESB_S6_E3$_0FmmmEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_" = internal constant %"struct.std::__1::__function::__policy" zeroinitializer, align 8
@"_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN2v88internal13MutableBigInt14AbsoluteAndNotEPNS5_7IsolateENS5_6HandleINS5_10BigIntBaseEEESB_S6_E3$_1FmmmEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_" = internal constant %"struct.std::__1::__function::__policy" zeroinitializer, align 8
@"_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN2v88internal13MutableBigInt10AbsoluteOrEPNS5_7IsolateENS5_6HandleINS5_10BigIntBaseEEESB_S6_E3$_2FmmmEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_" = internal constant %"struct.std::__1::__function::__policy" zeroinitializer, align 8
@"_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN2v88internal13MutableBigInt11AbsoluteXorEPNS5_7IsolateENS5_6HandleINS5_10BigIntBaseEEESB_S6_E3$_3FmmmEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_" = internal constant %"struct.std::__1::__function::__policy" zeroinitializer, align 8
@.str.8 = private unnamed_addr constant [17 x i8] c"unreachable code\00", align 1

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64* @_ZN2v88internal6BigInt4ZeroINS0_7IsolateEEENS0_6HandleIS1_EEPT_NS0_14AllocationTypeE(%"class.v8::internal::Isolate"*, i8 zeroext) local_unnamed_addr #0 comdat align 2 {
  %3 = tail call i64* @_ZN2v88internal13MutableBigInt4ZeroINS0_7IsolateEEENS0_6HandleINS0_6BigIntEEEPT_NS0_14AllocationTypeE(%"class.v8::internal::Isolate"* %0, i8 zeroext %1)
  ret i64* %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64* @_ZN2v88internal13MutableBigInt4ZeroINS0_7IsolateEEENS0_6HandleINS0_6BigIntEEEPT_NS0_14AllocationTypeE(%"class.v8::internal::Isolate"*, i8 zeroext) local_unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %4 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE9NewBigIntEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %3, i32 0, i8 zeroext %1) #13
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, 3
  %7 = inttoptr i64 %6 to i32*
  store i32 0, i32* %7, align 4
  %8 = icmp eq i64* %4, null
  br i1 %8, label %9, label %10, !prof !2

9:                                                ; preds = %2
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0)) #14
  unreachable

10:                                               ; preds = %2
  %11 = load i64, i64* %4, align 8
  %12 = add i64 %11, 3
  %13 = inttoptr i64 %12 to i32*
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = lshr i32 %14, 1
  %16 = and i32 %15, 1073741823
  %17 = zext i32 %16 to i64
  br label %18

18:                                               ; preds = %21, %10
  %19 = phi i64 [ %22, %21 ], [ %17, %10 ]
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %31

21:                                               ; preds = %18
  %22 = add nsw i64 %19, -1
  %23 = trunc i64 %22 to i32
  %24 = shl nsw i32 %23, 3
  %25 = or i32 %24, 7
  %26 = sext i32 %25 to i64
  %27 = add i64 %11, %26
  %28 = inttoptr i64 %27 to i64*
  %29 = load i64, i64* %28, align 1
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %18, label %31

31:                                               ; preds = %21, %18
  %32 = trunc i64 %19 to i32
  %33 = sub nsw i32 %16, %32
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %58, label %35

35:                                               ; preds = %31
  %36 = and i64 %11, -262144
  %37 = or i64 %36, 16
  %38 = inttoptr i64 %37 to %"class.v8::internal::Heap"**
  %39 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %38, align 16
  %40 = tail call zeroext i1 @_ZN2v88internal4Heap13IsLargeObjectENS0_10HeapObjectE(i64 %11) #13
  br i1 %40, label %49, label %41

41:                                               ; preds = %35
  %42 = shl i32 %32, 3
  %43 = add nsw i32 %42, 8
  %44 = add i64 %11, -1
  %45 = sext i32 %43 to i64
  %46 = add i64 %44, %45
  %47 = shl nsw i32 %33, 3
  %48 = tail call i64 @_ZN2v88internal4Heap20CreateFillerObjectAtEmiNS0_18ClearRecordedSlotsE(%"class.v8::internal::Heap"* %39, i64 %46, i32 %47, i32 1) #13
  br label %49

49:                                               ; preds = %41, %35
  %50 = load atomic i32, i32* %13 monotonic, align 4
  %51 = and i32 %50, -2147483647
  %52 = shl i32 %32, 1
  %53 = or i32 %51, %52
  store atomic volatile i32 %53, i32* %13 release, align 4
  %54 = icmp eq i32 %32, 0
  br i1 %54, label %55, label %58

55:                                               ; preds = %49
  %56 = load atomic i32, i32* %13 monotonic, align 4
  %57 = and i32 %56, -2
  store atomic volatile i32 %57, i32* %13 monotonic, align 4
  br label %58

58:                                               ; preds = %31, %49, %55
  ret i64* %4
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64* @_ZN2v88internal6BigInt4ZeroINS0_12LocalIsolateEEENS0_6HandleIS1_EEPT_NS0_14AllocationTypeE(%"class.v8::internal::LocalIsolate"*, i8 zeroext) local_unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.v8::internal::LocalIsolate"* %0 to %"class.v8::internal::FactoryBase.1049"*
  %4 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_12LocalFactoryEE9NewBigIntEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase.1049"* %3, i32 0, i8 zeroext %1) #13
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, 3
  %7 = inttoptr i64 %6 to i32*
  store i32 0, i32* %7, align 4
  %8 = icmp eq i64* %4, null
  br i1 %8, label %9, label %10, !prof !2

9:                                                ; preds = %2
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0)) #14
  unreachable

10:                                               ; preds = %2
  %11 = load i64, i64* %4, align 8
  %12 = add i64 %11, 3
  %13 = inttoptr i64 %12 to i32*
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = lshr i32 %14, 1
  %16 = and i32 %15, 1073741823
  %17 = zext i32 %16 to i64
  br label %18

18:                                               ; preds = %21, %10
  %19 = phi i64 [ %22, %21 ], [ %17, %10 ]
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %31

21:                                               ; preds = %18
  %22 = add nsw i64 %19, -1
  %23 = trunc i64 %22 to i32
  %24 = shl nsw i32 %23, 3
  %25 = or i32 %24, 7
  %26 = sext i32 %25 to i64
  %27 = add i64 %11, %26
  %28 = inttoptr i64 %27 to i64*
  %29 = load i64, i64* %28, align 1
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %18, label %31

31:                                               ; preds = %21, %18
  %32 = trunc i64 %19 to i32
  %33 = sub nsw i32 %16, %32
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %58, label %35

35:                                               ; preds = %31
  %36 = and i64 %11, -262144
  %37 = or i64 %36, 16
  %38 = inttoptr i64 %37 to %"class.v8::internal::Heap"**
  %39 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %38, align 16
  %40 = tail call zeroext i1 @_ZN2v88internal4Heap13IsLargeObjectENS0_10HeapObjectE(i64 %11) #13
  br i1 %40, label %49, label %41

41:                                               ; preds = %35
  %42 = shl i32 %32, 3
  %43 = add nsw i32 %42, 8
  %44 = add i64 %11, -1
  %45 = sext i32 %43 to i64
  %46 = add i64 %44, %45
  %47 = shl nsw i32 %33, 3
  %48 = tail call i64 @_ZN2v88internal4Heap20CreateFillerObjectAtEmiNS0_18ClearRecordedSlotsE(%"class.v8::internal::Heap"* %39, i64 %46, i32 %47, i32 1) #13
  br label %49

49:                                               ; preds = %41, %35
  %50 = load atomic i32, i32* %13 monotonic, align 4
  %51 = and i32 %50, -2147483647
  %52 = shl i32 %32, 1
  %53 = or i32 %51, %52
  store atomic volatile i32 %53, i32* %13 release, align 4
  %54 = icmp eq i32 %32, 0
  br i1 %54, label %55, label %58

55:                                               ; preds = %49
  %56 = load atomic i32, i32* %13 monotonic, align 4
  %57 = and i32 %56, -2
  store atomic volatile i32 %57, i32* %13 monotonic, align 4
  br label %58

58:                                               ; preds = %31, %49, %55
  ret i64* %4
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64* @_ZN2v88internal6BigInt11AllocateForINS0_7IsolateEEENS0_11MaybeHandleINS0_22FreshlyAllocatedBigIntEEEPT_iiNS0_11ShouldThrowENS0_14AllocationTypeE(%"class.v8::internal::Isolate"*, i32, i32, i32, i8 zeroext) local_unnamed_addr #0 comdat align 2 {
  %6 = sext i32 %1 to i64
  %7 = getelementptr inbounds [37 x i8], [37 x i8]* @_ZN2v88internalL15kMaxBitsPerCharE, i64 0, i64 %6
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i64
  %10 = sext i32 %2 to i64
  %11 = udiv i64 -32, %9
  %12 = icmp ult i64 %11, %10
  br i1 %12, label %39, label %13

13:                                               ; preds = %5
  %14 = mul nsw i64 %9, %10
  %15 = add nsw i64 %14, 31
  %16 = icmp ult i64 %15, 68719476736
  br i1 %16, label %17, label %39

17:                                               ; preds = %13
  %18 = lshr i64 %15, 5
  %19 = add nuw nsw i64 %18, 63
  %20 = lshr i64 %19, 6
  %21 = trunc i64 %20 to i32
  %22 = icmp slt i32 %21, 16777217
  br i1 %22, label %23, label %39

23:                                               ; preds = %17
  %24 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %25 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE9NewBigIntEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %24, i32 %21, i8 zeroext %4) #13
  %26 = load i64, i64* %25, align 8
  %27 = shl nuw nsw i64 %20, 1
  %28 = trunc i64 %27 to i32
  %29 = add i64 %26, 3
  %30 = inttoptr i64 %29 to i32*
  store i32 %28, i32* %30, align 4
  %31 = icmp eq i64* %25, null
  br i1 %31, label %32, label %33, !prof !2

32:                                               ; preds = %23
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0)) #14
  unreachable

33:                                               ; preds = %23
  %34 = load i64, i64* %25, align 8
  %35 = add i64 %34, 7
  %36 = inttoptr i64 %35 to i8*
  %37 = shl i64 %20, 35
  %38 = ashr exact i64 %37, 32
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %36, i8 0, i64 %38, i1 false) #13
  br label %50

39:                                               ; preds = %17, %13, %5
  %40 = icmp eq i32 %3, 0
  br i1 %40, label %41, label %50

41:                                               ; preds = %39
  %42 = load i8, i8* @_ZN2v88internal36FLAG_correctness_fuzzer_suppressionsE, align 1, !range !3
  %43 = icmp eq i8 %42, 0
  br i1 %43, label %45, label %44

44:                                               ; preds = %41
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.6, i64 0, i64 0)) #14
  unreachable

45:                                               ; preds = %41
  %46 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::Factory"*
  %47 = tail call i64* @_ZN2v88internal7Factory13NewRangeErrorENS0_15MessageTemplateENS0_6HandleINS0_6ObjectEEES5_S5_(%"class.v8::internal::Factory"* %46, i32 190, i64* null, i64* null, i64* null) #13
  %48 = load i64, i64* %47, align 8
  %49 = tail call i64 @_ZN2v88internal7Isolate13ThrowInternalENS0_6ObjectEPNS0_15MessageLocationE(%"class.v8::internal::Isolate"* %0, i64 %48, %"class.v8::internal::MessageLocation"* null) #13
  br label %50

50:                                               ; preds = %39, %33, %45
  %51 = phi i64* [ null, %45 ], [ %25, %33 ], [ null, %39 ]
  ret i64* %51
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13MutableBigInt16InitializeDigitsEih(%"class.v8::internal::MutableBigInt"* nocapture readonly, i32, i8 zeroext) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::MutableBigInt", %"class.v8::internal::MutableBigInt"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, 7
  %7 = inttoptr i64 %6 to i8*
  %8 = shl nsw i32 %1, 3
  %9 = sext i32 %8 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %7, i8 %2, i64 %9, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64* @_ZN2v88internal6BigInt11AllocateForINS0_12LocalIsolateEEENS0_11MaybeHandleINS0_22FreshlyAllocatedBigIntEEEPT_iiNS0_11ShouldThrowENS0_14AllocationTypeE(%"class.v8::internal::LocalIsolate"*, i32, i32, i32, i8 zeroext) local_unnamed_addr #0 comdat align 2 {
  %6 = sext i32 %1 to i64
  %7 = getelementptr inbounds [37 x i8], [37 x i8]* @_ZN2v88internalL15kMaxBitsPerCharE, i64 0, i64 %6
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i64
  %10 = sext i32 %2 to i64
  %11 = udiv i64 -32, %9
  %12 = icmp ult i64 %11, %10
  br i1 %12, label %39, label %13

13:                                               ; preds = %5
  %14 = mul nsw i64 %9, %10
  %15 = add nsw i64 %14, 31
  %16 = icmp ult i64 %15, 68719476736
  br i1 %16, label %17, label %39

17:                                               ; preds = %13
  %18 = lshr i64 %15, 5
  %19 = add nuw nsw i64 %18, 63
  %20 = lshr i64 %19, 6
  %21 = trunc i64 %20 to i32
  %22 = icmp slt i32 %21, 16777217
  br i1 %22, label %23, label %39

23:                                               ; preds = %17
  %24 = bitcast %"class.v8::internal::LocalIsolate"* %0 to %"class.v8::internal::FactoryBase.1049"*
  %25 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_12LocalFactoryEE9NewBigIntEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase.1049"* %24, i32 %21, i8 zeroext %4) #13
  %26 = load i64, i64* %25, align 8
  %27 = shl nuw nsw i64 %20, 1
  %28 = trunc i64 %27 to i32
  %29 = add i64 %26, 3
  %30 = inttoptr i64 %29 to i32*
  store i32 %28, i32* %30, align 4
  %31 = icmp eq i64* %25, null
  br i1 %31, label %32, label %33, !prof !2

32:                                               ; preds = %23
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0)) #14
  unreachable

33:                                               ; preds = %23
  %34 = load i64, i64* %25, align 8
  %35 = add i64 %34, 7
  %36 = inttoptr i64 %35 to i8*
  %37 = shl i64 %20, 35
  %38 = ashr exact i64 %37, 32
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %36, i8 0, i64 %38, i1 false) #13
  br label %46

39:                                               ; preds = %17, %13, %5
  %40 = icmp eq i32 %3, 0
  br i1 %40, label %41, label %46

41:                                               ; preds = %39
  %42 = load i8, i8* @_ZN2v88internal36FLAG_correctness_fuzzer_suppressionsE, align 1, !range !3
  %43 = icmp eq i8 %42, 0
  br i1 %43, label %45, label %44

44:                                               ; preds = %41
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.6, i64 0, i64 0)) #14
  unreachable

45:                                               ; preds = %41
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.8, i64 0, i64 0)) #14
  unreachable

46:                                               ; preds = %39, %33
  %47 = phi i64* [ %25, %33 ], [ null, %39 ]
  ret i64* %47
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64* @_ZN2v88internal6BigInt8FinalizeINS0_7IsolateEEENS0_6HandleIS1_EENS4_INS0_22FreshlyAllocatedBigIntEEEb(i64*, i1 zeroext) local_unnamed_addr #0 comdat align 2 {
  %3 = load i64, i64* %0, align 8
  %4 = add i64 %3, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load atomic i32, i32* %5 monotonic, align 4
  %7 = and i32 %6, -2
  %8 = zext i1 %1 to i32
  %9 = or i32 %7, %8
  store atomic volatile i32 %9, i32* %5 monotonic, align 4
  %10 = load i64, i64* %0, align 8
  %11 = add i64 %10, 3
  %12 = inttoptr i64 %11 to i32*
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = lshr i32 %13, 1
  %15 = and i32 %14, 1073741823
  %16 = zext i32 %15 to i64
  br label %17

17:                                               ; preds = %20, %2
  %18 = phi i64 [ %21, %20 ], [ %16, %2 ]
  %19 = icmp sgt i64 %18, 0
  br i1 %19, label %20, label %30

20:                                               ; preds = %17
  %21 = add nsw i64 %18, -1
  %22 = trunc i64 %21 to i32
  %23 = shl nsw i32 %22, 3
  %24 = or i32 %23, 7
  %25 = sext i32 %24 to i64
  %26 = add i64 %10, %25
  %27 = inttoptr i64 %26 to i64*
  %28 = load i64, i64* %27, align 1
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %17, label %30

30:                                               ; preds = %20, %17
  %31 = trunc i64 %18 to i32
  %32 = sub nsw i32 %15, %31
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %57, label %34

34:                                               ; preds = %30
  %35 = and i64 %10, -262144
  %36 = or i64 %35, 16
  %37 = inttoptr i64 %36 to %"class.v8::internal::Heap"**
  %38 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %37, align 16
  %39 = tail call zeroext i1 @_ZN2v88internal4Heap13IsLargeObjectENS0_10HeapObjectE(i64 %10) #13
  br i1 %39, label %48, label %40

40:                                               ; preds = %34
  %41 = shl i32 %31, 3
  %42 = add nsw i32 %41, 8
  %43 = add i64 %10, -1
  %44 = sext i32 %42 to i64
  %45 = add i64 %43, %44
  %46 = shl nsw i32 %32, 3
  %47 = tail call i64 @_ZN2v88internal4Heap20CreateFillerObjectAtEmiNS0_18ClearRecordedSlotsE(%"class.v8::internal::Heap"* %38, i64 %45, i32 %46, i32 1) #13
  br label %48

48:                                               ; preds = %40, %34
  %49 = load atomic i32, i32* %12 monotonic, align 4
  %50 = and i32 %49, -2147483647
  %51 = shl i32 %31, 1
  %52 = or i32 %50, %51
  store atomic volatile i32 %52, i32* %12 release, align 4
  %53 = icmp eq i32 %31, 0
  br i1 %53, label %54, label %57

54:                                               ; preds = %48
  %55 = load atomic i32, i32* %12 monotonic, align 4
  %56 = and i32 %55, -2
  store atomic volatile i32 %56, i32* %12 monotonic, align 4
  br label %57

57:                                               ; preds = %30, %48, %54
  ret i64* %0
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64* @_ZN2v88internal6BigInt8FinalizeINS0_12LocalIsolateEEENS0_6HandleIS1_EENS4_INS0_22FreshlyAllocatedBigIntEEEb(i64*, i1 zeroext) local_unnamed_addr #0 comdat align 2 {
  %3 = load i64, i64* %0, align 8
  %4 = add i64 %3, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load atomic i32, i32* %5 monotonic, align 4
  %7 = and i32 %6, -2
  %8 = zext i1 %1 to i32
  %9 = or i32 %7, %8
  store atomic volatile i32 %9, i32* %5 monotonic, align 4
  %10 = load i64, i64* %0, align 8
  %11 = add i64 %10, 3
  %12 = inttoptr i64 %11 to i32*
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = lshr i32 %13, 1
  %15 = and i32 %14, 1073741823
  %16 = zext i32 %15 to i64
  br label %17

17:                                               ; preds = %20, %2
  %18 = phi i64 [ %21, %20 ], [ %16, %2 ]
  %19 = icmp sgt i64 %18, 0
  br i1 %19, label %20, label %30

20:                                               ; preds = %17
  %21 = add nsw i64 %18, -1
  %22 = trunc i64 %21 to i32
  %23 = shl nsw i32 %22, 3
  %24 = or i32 %23, 7
  %25 = sext i32 %24 to i64
  %26 = add i64 %10, %25
  %27 = inttoptr i64 %26 to i64*
  %28 = load i64, i64* %27, align 1
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %17, label %30

30:                                               ; preds = %20, %17
  %31 = trunc i64 %18 to i32
  %32 = sub nsw i32 %15, %31
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %57, label %34

34:                                               ; preds = %30
  %35 = and i64 %10, -262144
  %36 = or i64 %35, 16
  %37 = inttoptr i64 %36 to %"class.v8::internal::Heap"**
  %38 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %37, align 16
  %39 = tail call zeroext i1 @_ZN2v88internal4Heap13IsLargeObjectENS0_10HeapObjectE(i64 %10) #13
  br i1 %39, label %48, label %40

40:                                               ; preds = %34
  %41 = shl i32 %31, 3
  %42 = add nsw i32 %41, 8
  %43 = add i64 %10, -1
  %44 = sext i32 %42 to i64
  %45 = add i64 %43, %44
  %46 = shl nsw i32 %32, 3
  %47 = tail call i64 @_ZN2v88internal4Heap20CreateFillerObjectAtEmiNS0_18ClearRecordedSlotsE(%"class.v8::internal::Heap"* %38, i64 %45, i32 %46, i32 1) #13
  br label %48

48:                                               ; preds = %40, %34
  %49 = load atomic i32, i32* %12 monotonic, align 4
  %50 = and i32 %49, -2147483647
  %51 = shl i32 %31, 1
  %52 = or i32 %50, %51
  store atomic volatile i32 %52, i32* %12 release, align 4
  %53 = icmp eq i32 %31, 0
  br i1 %53, label %54, label %57

54:                                               ; preds = %48
  %55 = load atomic i32, i32* %12 monotonic, align 4
  %56 = and i32 %55, -2
  store atomic volatile i32 %56, i32* %12 monotonic, align 4
  br label %57

57:                                               ; preds = %30, %48, %54
  ret i64* %0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden { i64*, i32 } @_ZN2v88internal9GetDigitsENS0_10BigIntBaseE(i64) local_unnamed_addr #2 {
  %2 = add i64 %0, 7
  %3 = inttoptr i64 %2 to i64*
  %4 = add i64 %0, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load atomic i32, i32* %5 monotonic, align 4
  %7 = lshr i32 %6, 1
  %8 = and i32 %7, 1073741823
  %9 = insertvalue { i64*, i32 } undef, i64* %3, 0
  %10 = insertvalue { i64*, i32 } %9, i32 %8, 1
  ret { i64*, i32 } %10
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden { i64*, i32 } @_ZN2v88internal9GetDigitsENS0_6HandleINS0_10BigIntBaseEEE(i64*) local_unnamed_addr #2 {
  %2 = load i64, i64* %0, align 8
  %3 = add i64 %2, 7
  %4 = inttoptr i64 %3 to i64*
  %5 = add i64 %2, 3
  %6 = inttoptr i64 %5 to i32*
  %7 = load atomic i32, i32* %6 monotonic, align 4
  %8 = lshr i32 %7, 1
  %9 = and i32 %8, 1073741823
  %10 = insertvalue { i64*, i32 } undef, i64* %4, 0
  %11 = insertvalue { i64*, i32 } %10, i32 %9, 1
  ret { i64*, i32 } %11
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden { i64*, i32 } @_ZN2v88internal11GetRWDigitsENS0_13MutableBigIntE(i64) local_unnamed_addr #2 {
  %2 = add i64 %0, 7
  %3 = inttoptr i64 %2 to i64*
  %4 = add i64 %0, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load atomic i32, i32* %5 monotonic, align 4
  %7 = lshr i32 %6, 1
  %8 = and i32 %7, 1073741823
  %9 = insertvalue { i64*, i32 } undef, i64* %3, 0
  %10 = insertvalue { i64*, i32 } %9, i32 %8, 1
  ret { i64*, i32 } %10
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden { i64*, i32 } @_ZN2v88internal11GetRWDigitsENS0_6HandleINS0_13MutableBigIntEEE(i64*) local_unnamed_addr #2 {
  %2 = load i64, i64* %0, align 8
  %3 = add i64 %2, 7
  %4 = inttoptr i64 %3 to i64*
  %5 = add i64 %2, 3
  %6 = inttoptr i64 %5 to i32*
  %7 = load atomic i32, i32* %6 monotonic, align 4
  %8 = lshr i32 %7, 1
  %9 = and i32 %8, 1073741823
  %10 = insertvalue { i64*, i32 } undef, i64* %4, 0
  %11 = insertvalue { i64*, i32 } %10, i32 %9, 1
  ret { i64*, i32 } %11
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal13MutableBigInt10NewFromIntEPNS0_7IsolateEi(%"class.v8::internal::Isolate"*, i32) local_unnamed_addr #0 align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %4, label %6

4:                                                ; preds = %2
  %5 = tail call i64* @_ZN2v88internal13MutableBigInt4ZeroINS0_7IsolateEEENS0_6HandleINS0_6BigIntEEEPT_NS0_14AllocationTypeE(%"class.v8::internal::Isolate"* %0, i8 zeroext 0)
  br label %76

6:                                                ; preds = %2
  %7 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %8 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE9NewBigIntEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %7, i32 1, i8 zeroext 0) #13
  %9 = icmp slt i32 %1, 0
  %10 = load i64, i64* %8, align 8
  %11 = lshr i32 %1, 31
  %12 = or i32 %11, 2
  %13 = add i64 %10, 3
  %14 = inttoptr i64 %13 to i32*
  store i32 %12, i32* %14, align 4
  br i1 %9, label %18, label %15

15:                                               ; preds = %6
  %16 = load i64, i64* %8, align 8
  %17 = sext i32 %1 to i64
  br label %24

18:                                               ; preds = %6
  %19 = icmp eq i32 %1, -2147483648
  %20 = load i64, i64* %8, align 8
  br i1 %19, label %24, label %21

21:                                               ; preds = %18
  %22 = sub nsw i32 0, %1
  %23 = sext i32 %22 to i64
  br label %24

24:                                               ; preds = %18, %21, %15
  %25 = phi i64 [ %20, %21 ], [ %16, %15 ], [ %20, %18 ]
  %26 = phi i64 [ %23, %21 ], [ %17, %15 ], [ 2147483648, %18 ]
  %27 = add i64 %25, 7
  %28 = inttoptr i64 %27 to i64*
  store i64 %26, i64* %28, align 1
  %29 = load i64, i64* %8, align 8
  %30 = add i64 %29, 3
  %31 = inttoptr i64 %30 to i32*
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = lshr i32 %32, 1
  %34 = and i32 %33, 1073741823
  %35 = zext i32 %34 to i64
  br label %36

36:                                               ; preds = %39, %24
  %37 = phi i64 [ %40, %39 ], [ %35, %24 ]
  %38 = icmp sgt i64 %37, 0
  br i1 %38, label %39, label %49

39:                                               ; preds = %36
  %40 = add nsw i64 %37, -1
  %41 = trunc i64 %40 to i32
  %42 = shl nsw i32 %41, 3
  %43 = or i32 %42, 7
  %44 = sext i32 %43 to i64
  %45 = add i64 %29, %44
  %46 = inttoptr i64 %45 to i64*
  %47 = load i64, i64* %46, align 1
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %36, label %49

49:                                               ; preds = %39, %36
  %50 = trunc i64 %37 to i32
  %51 = sub nsw i32 %34, %50
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %76, label %53

53:                                               ; preds = %49
  %54 = and i64 %29, -262144
  %55 = or i64 %54, 16
  %56 = inttoptr i64 %55 to %"class.v8::internal::Heap"**
  %57 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %56, align 16
  %58 = tail call zeroext i1 @_ZN2v88internal4Heap13IsLargeObjectENS0_10HeapObjectE(i64 %29) #13
  br i1 %58, label %67, label %59

59:                                               ; preds = %53
  %60 = shl i32 %50, 3
  %61 = add nsw i32 %60, 8
  %62 = add i64 %29, -1
  %63 = sext i32 %61 to i64
  %64 = add i64 %62, %63
  %65 = shl nsw i32 %51, 3
  %66 = tail call i64 @_ZN2v88internal4Heap20CreateFillerObjectAtEmiNS0_18ClearRecordedSlotsE(%"class.v8::internal::Heap"* %57, i64 %64, i32 %65, i32 1) #13
  br label %67

67:                                               ; preds = %59, %53
  %68 = load atomic i32, i32* %31 monotonic, align 4
  %69 = and i32 %68, -2147483647
  %70 = shl i32 %50, 1
  %71 = or i32 %69, %70
  store atomic volatile i32 %71, i32* %31 release, align 4
  %72 = icmp eq i32 %50, 0
  br i1 %72, label %73, label %76

73:                                               ; preds = %67
  %74 = load atomic i32, i32* %31 monotonic, align 4
  %75 = and i32 %74, -2
  store atomic volatile i32 %75, i32* %31 monotonic, align 4
  br label %76

76:                                               ; preds = %73, %67, %49, %4
  %77 = phi i64* [ %5, %4 ], [ %8, %49 ], [ %8, %67 ], [ %8, %73 ]
  ret i64* %77
}

declare i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE9NewBigIntEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"*, i32, i8 zeroext) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal13MutableBigInt13NewFromDoubleEPNS0_7IsolateEd(%"class.v8::internal::Isolate"*, double) local_unnamed_addr #0 align 2 {
  %3 = bitcast double %1 to i64
  %4 = fcmp oeq double %1, 0.000000e+00
  br i1 %4, label %5, label %7

5:                                                ; preds = %2
  %6 = tail call i64* @_ZN2v88internal13MutableBigInt4ZeroINS0_7IsolateEEENS0_6HandleINS0_6BigIntEEEPT_NS0_14AllocationTypeE(%"class.v8::internal::Isolate"* %0, i8 zeroext 0)
  br label %118

7:                                                ; preds = %2
  %8 = fcmp olt double %1, 0.000000e+00
  %9 = lshr i64 %3, 52
  %10 = trunc i64 %9 to i32
  %11 = and i32 %10, 2047
  %12 = add nsw i32 %11, -1023
  %13 = sdiv i32 %12, 64
  %14 = add nsw i32 %13, 1
  %15 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %16 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE9NewBigIntEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %15, i32 %14, i8 zeroext 0) #13
  %17 = load i64, i64* %16, align 8
  %18 = shl nsw i32 %14, 1
  %19 = zext i1 %8 to i32
  %20 = or i32 %18, %19
  %21 = add i64 %17, 3
  %22 = inttoptr i64 %21 to i32*
  store i32 %20, i32* %22, align 4
  %23 = and i64 %3, 4503599627370495
  %24 = or i64 %23, 4503599627370496
  %25 = srem i32 %12, 64
  %26 = icmp slt i32 %25, 52
  br i1 %26, label %27, label %34

27:                                               ; preds = %7
  %28 = sub nsw i32 52, %25
  %29 = zext i32 %28 to i64
  %30 = lshr i64 %24, %29
  %31 = add nsw i32 %25, 12
  %32 = zext i32 %31 to i64
  %33 = shl i64 %24, %32
  br label %38

34:                                               ; preds = %7
  %35 = add nsw i32 %25, -52
  %36 = zext i32 %35 to i64
  %37 = shl i64 %24, %36
  br label %38

38:                                               ; preds = %34, %27
  %39 = phi i64 [ %33, %27 ], [ 0, %34 ]
  %40 = phi i32 [ %28, %27 ], [ 0, %34 ]
  %41 = phi i64 [ %30, %27 ], [ %37, %34 ]
  %42 = load i64, i64* %16, align 8
  %43 = shl nsw i32 %13, 3
  %44 = or i32 %43, 7
  %45 = sext i32 %44 to i64
  %46 = add i64 %42, %45
  %47 = inttoptr i64 %46 to i64*
  store i64 %41, i64* %47, align 1
  %48 = icmp sgt i32 %12, 63
  br i1 %48, label %49, label %51

49:                                               ; preds = %38
  %50 = sext i32 %13 to i64
  br label %99

51:                                               ; preds = %99, %38
  %52 = load i64, i64* %16, align 8
  %53 = add i64 %52, 3
  %54 = inttoptr i64 %53 to i32*
  %55 = load atomic i32, i32* %54 monotonic, align 4
  %56 = lshr i32 %55, 1
  %57 = and i32 %56, 1073741823
  %58 = zext i32 %57 to i64
  br label %59

59:                                               ; preds = %62, %51
  %60 = phi i64 [ %63, %62 ], [ %58, %51 ]
  %61 = icmp sgt i64 %60, 0
  br i1 %61, label %62, label %72

62:                                               ; preds = %59
  %63 = add nsw i64 %60, -1
  %64 = trunc i64 %63 to i32
  %65 = shl nsw i32 %64, 3
  %66 = or i32 %65, 7
  %67 = sext i32 %66 to i64
  %68 = add i64 %52, %67
  %69 = inttoptr i64 %68 to i64*
  %70 = load i64, i64* %69, align 1
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %59, label %72

72:                                               ; preds = %62, %59
  %73 = trunc i64 %60 to i32
  %74 = sub nsw i32 %57, %73
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %118, label %76

76:                                               ; preds = %72
  %77 = and i64 %52, -262144
  %78 = or i64 %77, 16
  %79 = inttoptr i64 %78 to %"class.v8::internal::Heap"**
  %80 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %79, align 16
  %81 = tail call zeroext i1 @_ZN2v88internal4Heap13IsLargeObjectENS0_10HeapObjectE(i64 %52) #13
  br i1 %81, label %90, label %82

82:                                               ; preds = %76
  %83 = shl i32 %73, 3
  %84 = add nsw i32 %83, 8
  %85 = add i64 %52, -1
  %86 = sext i32 %84 to i64
  %87 = add i64 %85, %86
  %88 = shl nsw i32 %74, 3
  %89 = tail call i64 @_ZN2v88internal4Heap20CreateFillerObjectAtEmiNS0_18ClearRecordedSlotsE(%"class.v8::internal::Heap"* %80, i64 %87, i32 %88, i32 1) #13
  br label %90

90:                                               ; preds = %82, %76
  %91 = load atomic i32, i32* %54 monotonic, align 4
  %92 = and i32 %91, -2147483647
  %93 = shl i32 %73, 1
  %94 = or i32 %92, %93
  store atomic volatile i32 %94, i32* %54 release, align 4
  %95 = icmp eq i32 %73, 0
  br i1 %95, label %96, label %118

96:                                               ; preds = %90
  %97 = load atomic i32, i32* %54 monotonic, align 4
  %98 = and i32 %97, -2
  store atomic volatile i32 %98, i32* %54 monotonic, align 4
  br label %118

99:                                               ; preds = %49, %99
  %100 = phi i64 [ %50, %49 ], [ %104, %99 ]
  %101 = phi i32 [ %13, %49 ], [ %105, %99 ]
  %102 = phi i32 [ %40, %49 ], [ %109, %99 ]
  %103 = phi i64 [ %39, %49 ], [ %108, %99 ]
  %104 = add nsw i64 %100, -1
  %105 = add nsw i32 %101, -1
  %106 = icmp sgt i32 %102, 0
  %107 = add nsw i32 %102, -64
  %108 = select i1 %106, i64 0, i64 %103
  %109 = select i1 %106, i32 %107, i32 %102
  %110 = select i1 %106, i64 %103, i64 0
  %111 = load i64, i64* %16, align 8
  %112 = shl nsw i32 %105, 3
  %113 = or i32 %112, 7
  %114 = sext i32 %113 to i64
  %115 = add i64 %111, %114
  %116 = inttoptr i64 %115 to i64*
  store i64 %110, i64* %116, align 1
  %117 = icmp sgt i64 %104, 0
  br i1 %117, label %99, label %51

118:                                              ; preds = %96, %90, %72, %5
  %119 = phi i64* [ %6, %5 ], [ %16, %72 ], [ %16, %90 ], [ %16, %96 ]
  ret i64* %119
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal13MutableBigInt4CopyEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEE(%"class.v8::internal::Isolate"*, i64*) local_unnamed_addr #0 align 2 {
  %3 = load i64, i64* %1, align 8
  %4 = add i64 %3, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load atomic i32, i32* %5 monotonic, align 4
  %7 = lshr i32 %6, 1
  %8 = and i32 %7, 1073741823
  %9 = icmp ugt i32 %8, 16777216
  br i1 %9, label %10, label %19

10:                                               ; preds = %2
  %11 = load i8, i8* @_ZN2v88internal36FLAG_correctness_fuzzer_suppressionsE, align 1, !range !3
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %14, label %13

13:                                               ; preds = %10
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.6, i64 0, i64 0)) #14
  unreachable

14:                                               ; preds = %10
  %15 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::Factory"*
  %16 = tail call i64* @_ZN2v88internal7Factory13NewRangeErrorENS0_15MessageTemplateENS0_6HandleINS0_6ObjectEEES5_S5_(%"class.v8::internal::Factory"* %15, i32 190, i64* null, i64* null, i64* null) #13
  %17 = load i64, i64* %16, align 8
  %18 = tail call i64 @_ZN2v88internal7Isolate13ThrowInternalENS0_6ObjectEPNS0_15MessageLocationE(%"class.v8::internal::Isolate"* %0, i64 %17, %"class.v8::internal::MessageLocation"* null) #13
  br label %27

19:                                               ; preds = %2
  %20 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %21 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE9NewBigIntEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %20, i32 %8, i8 zeroext 0) #13
  %22 = load i64, i64* %21, align 8
  %23 = shl nuw nsw i32 %8, 1
  %24 = add i64 %22, 3
  %25 = inttoptr i64 %24 to i32*
  store i32 %23, i32* %25, align 4
  %26 = icmp eq i64* %21, null
  br i1 %26, label %27, label %28, !prof !2

27:                                               ; preds = %14, %19
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0)) #14
  unreachable

28:                                               ; preds = %19
  %29 = load i64, i64* %21, align 8
  %30 = add i64 %29, 7
  %31 = inttoptr i64 %30 to i8*
  %32 = load i64, i64* %1, align 8
  %33 = add i64 %32, 7
  %34 = inttoptr i64 %33 to i8*
  %35 = shl i32 %7, 3
  %36 = sext i32 %35 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %31, i8* align 1 %34, i64 %36, i1 false) #13
  ret i64* %21
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal13MutableBigInt13MakeImmutableENS0_11MaybeHandleIS1_EE(i64*) local_unnamed_addr #0 align 2 {
  %2 = icmp eq i64* %0, null
  br i1 %2, label %52, label %3

3:                                                ; preds = %1
  %4 = ptrtoint i64* %0 to i64
  %5 = load i64, i64* %0, align 8
  %6 = add i64 %5, 3
  %7 = inttoptr i64 %6 to i32*
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = lshr i32 %8, 1
  %10 = and i32 %9, 1073741823
  %11 = zext i32 %10 to i64
  br label %12

12:                                               ; preds = %15, %3
  %13 = phi i64 [ %16, %15 ], [ %11, %3 ]
  %14 = icmp sgt i64 %13, 0
  br i1 %14, label %15, label %25

15:                                               ; preds = %12
  %16 = add nsw i64 %13, -1
  %17 = trunc i64 %16 to i32
  %18 = shl nsw i32 %17, 3
  %19 = or i32 %18, 7
  %20 = sext i32 %19 to i64
  %21 = add i64 %5, %20
  %22 = inttoptr i64 %21 to i64*
  %23 = load i64, i64* %22, align 1
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %12, label %25

25:                                               ; preds = %15, %12
  %26 = trunc i64 %13 to i32
  %27 = sub nsw i32 %10, %26
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %52, label %29

29:                                               ; preds = %25
  %30 = and i64 %5, -262144
  %31 = or i64 %30, 16
  %32 = inttoptr i64 %31 to %"class.v8::internal::Heap"**
  %33 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %32, align 16
  %34 = tail call zeroext i1 @_ZN2v88internal4Heap13IsLargeObjectENS0_10HeapObjectE(i64 %5) #13
  br i1 %34, label %43, label %35

35:                                               ; preds = %29
  %36 = shl i32 %26, 3
  %37 = add nsw i32 %36, 8
  %38 = add i64 %5, -1
  %39 = sext i32 %37 to i64
  %40 = add i64 %38, %39
  %41 = shl nsw i32 %27, 3
  %42 = tail call i64 @_ZN2v88internal4Heap20CreateFillerObjectAtEmiNS0_18ClearRecordedSlotsE(%"class.v8::internal::Heap"* %33, i64 %40, i32 %41, i32 1) #13
  br label %43

43:                                               ; preds = %35, %29
  %44 = load atomic i32, i32* %7 monotonic, align 4
  %45 = and i32 %44, -2147483647
  %46 = shl i32 %26, 1
  %47 = or i32 %45, %46
  store atomic volatile i32 %47, i32* %7 release, align 4
  %48 = icmp eq i32 %26, 0
  br i1 %48, label %49, label %52

49:                                               ; preds = %43
  %50 = load atomic i32, i32* %7 monotonic, align 4
  %51 = and i32 %50, -2
  store atomic volatile i32 %51, i32* %7 monotonic, align 4
  br label %52

52:                                               ; preds = %49, %43, %25, %1
  %53 = phi i64 [ 0, %1 ], [ %4, %25 ], [ %4, %43 ], [ %4, %49 ]
  %54 = inttoptr i64 %53 to i64*
  ret i64* %54
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13MutableBigInt12CanonicalizeES1_(i64) local_unnamed_addr #0 align 2 {
  %2 = add i64 %0, 3
  %3 = inttoptr i64 %2 to i32*
  %4 = load atomic i32, i32* %3 monotonic, align 4
  %5 = lshr i32 %4, 1
  %6 = and i32 %5, 1073741823
  %7 = and i32 %5, 1073741823
  %8 = zext i32 %7 to i64
  br label %9

9:                                                ; preds = %12, %1
  %10 = phi i64 [ %13, %12 ], [ %8, %1 ]
  %11 = icmp sgt i64 %10, 0
  br i1 %11, label %12, label %22

12:                                               ; preds = %9
  %13 = add nsw i64 %10, -1
  %14 = trunc i64 %13 to i32
  %15 = shl nsw i32 %14, 3
  %16 = or i32 %15, 7
  %17 = sext i32 %16 to i64
  %18 = add i64 %17, %0
  %19 = inttoptr i64 %18 to i64*
  %20 = load i64, i64* %19, align 1
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %9, label %22

22:                                               ; preds = %9, %12
  %23 = trunc i64 %10 to i32
  %24 = sub nsw i32 %6, %23
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %49, label %26

26:                                               ; preds = %22
  %27 = and i64 %0, -262144
  %28 = or i64 %27, 16
  %29 = inttoptr i64 %28 to %"class.v8::internal::Heap"**
  %30 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %29, align 16
  %31 = tail call zeroext i1 @_ZN2v88internal4Heap13IsLargeObjectENS0_10HeapObjectE(i64 %0) #13
  br i1 %31, label %40, label %32

32:                                               ; preds = %26
  %33 = shl i32 %23, 3
  %34 = add nsw i32 %33, 8
  %35 = add i64 %0, -1
  %36 = sext i32 %34 to i64
  %37 = add i64 %35, %36
  %38 = shl nsw i32 %24, 3
  %39 = tail call i64 @_ZN2v88internal4Heap20CreateFillerObjectAtEmiNS0_18ClearRecordedSlotsE(%"class.v8::internal::Heap"* %30, i64 %37, i32 %38, i32 1) #13
  br label %40

40:                                               ; preds = %32, %26
  %41 = load atomic i32, i32* %3 monotonic, align 4
  %42 = and i32 %41, -2147483647
  %43 = shl i32 %23, 1
  %44 = or i32 %42, %43
  store atomic volatile i32 %44, i32* %3 release, align 4
  %45 = icmp eq i32 %23, 0
  br i1 %45, label %46, label %49

46:                                               ; preds = %40
  %47 = load atomic i32, i32* %3 monotonic, align 4
  %48 = and i32 %47, -2
  store atomic volatile i32 %48, i32* %3 monotonic, align 4
  br label %49

49:                                               ; preds = %40, %46, %22
  ret void
}

declare zeroext i1 @_ZN2v88internal4Heap13IsLargeObjectENS0_10HeapObjectE(i64) local_unnamed_addr #3

declare i64 @_ZN2v88internal4Heap20CreateFillerObjectAtEmiNS0_18ClearRecordedSlotsE(%"class.v8::internal::Heap"*, i64, i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal6BigInt10UnaryMinusEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"*, i64*) local_unnamed_addr #0 align 2 {
  %3 = load i64, i64* %1, align 8
  %4 = add i64 %3, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load atomic i32, i32* %5 monotonic, align 4
  %7 = and i32 %6, 2147483646
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %70, label %9

9:                                                ; preds = %2
  %10 = tail call i64* @_ZN2v88internal13MutableBigInt4CopyEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEE(%"class.v8::internal::Isolate"* %0, i64* %1)
  %11 = load i64, i64* %10, align 8
  %12 = load i64, i64* %1, align 8
  %13 = add i64 %12, 3
  %14 = inttoptr i64 %13 to i32*
  %15 = load atomic i32, i32* %14 monotonic, align 4
  %16 = and i32 %15, 1
  %17 = add i64 %11, 3
  %18 = inttoptr i64 %17 to i32*
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = and i32 %19, -2
  %21 = or i32 %20, %16
  %22 = xor i32 %21, 1
  store atomic volatile i32 %22, i32* %18 monotonic, align 4
  %23 = load i64, i64* %10, align 8
  %24 = add i64 %23, 3
  %25 = inttoptr i64 %24 to i32*
  %26 = load atomic i32, i32* %25 monotonic, align 4
  %27 = lshr i32 %26, 1
  %28 = and i32 %27, 1073741823
  %29 = zext i32 %28 to i64
  br label %30

30:                                               ; preds = %33, %9
  %31 = phi i64 [ %34, %33 ], [ %29, %9 ]
  %32 = icmp sgt i64 %31, 0
  br i1 %32, label %33, label %43

33:                                               ; preds = %30
  %34 = add nsw i64 %31, -1
  %35 = trunc i64 %34 to i32
  %36 = shl nsw i32 %35, 3
  %37 = or i32 %36, 7
  %38 = sext i32 %37 to i64
  %39 = add i64 %23, %38
  %40 = inttoptr i64 %39 to i64*
  %41 = load i64, i64* %40, align 1
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %30, label %43

43:                                               ; preds = %33, %30
  %44 = trunc i64 %31 to i32
  %45 = sub nsw i32 %28, %44
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %70, label %47

47:                                               ; preds = %43
  %48 = and i64 %23, -262144
  %49 = or i64 %48, 16
  %50 = inttoptr i64 %49 to %"class.v8::internal::Heap"**
  %51 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %50, align 16
  %52 = tail call zeroext i1 @_ZN2v88internal4Heap13IsLargeObjectENS0_10HeapObjectE(i64 %23) #13
  br i1 %52, label %61, label %53

53:                                               ; preds = %47
  %54 = shl i32 %44, 3
  %55 = add nsw i32 %54, 8
  %56 = add i64 %23, -1
  %57 = sext i32 %55 to i64
  %58 = add i64 %56, %57
  %59 = shl nsw i32 %45, 3
  %60 = tail call i64 @_ZN2v88internal4Heap20CreateFillerObjectAtEmiNS0_18ClearRecordedSlotsE(%"class.v8::internal::Heap"* %51, i64 %58, i32 %59, i32 1) #13
  br label %61

61:                                               ; preds = %53, %47
  %62 = load atomic i32, i32* %25 monotonic, align 4
  %63 = and i32 %62, -2147483647
  %64 = shl i32 %44, 1
  %65 = or i32 %63, %64
  store atomic volatile i32 %65, i32* %25 release, align 4
  %66 = icmp eq i32 %44, 0
  br i1 %66, label %67, label %70

67:                                               ; preds = %61
  %68 = load atomic i32, i32* %25 monotonic, align 4
  %69 = and i32 %68, -2
  store atomic volatile i32 %69, i32* %25 monotonic, align 4
  br label %70

70:                                               ; preds = %67, %61, %43, %2
  %71 = phi i64* [ %1, %2 ], [ %10, %43 ], [ %10, %61 ], [ %10, %67 ]
  ret i64* %71
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal6BigInt10BitwiseNotEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"*, i64*) local_unnamed_addr #0 align 2 {
  %3 = load i64, i64* %1, align 8
  %4 = add i64 %3, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load atomic i32, i32* %5 monotonic, align 4
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %14, label %9

9:                                                ; preds = %2
  %10 = load atomic i32, i32* %5 monotonic, align 4
  %11 = lshr i32 %10, 1
  %12 = and i32 %11, 1073741823
  %13 = tail call i64* @_ZN2v88internal13MutableBigInt14AbsoluteSubOneEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEEi(%"class.v8::internal::Isolate"* %0, i64* %1, i32 %12)
  br label %16

14:                                               ; preds = %2
  %15 = tail call i64* @_ZN2v88internal13MutableBigInt14AbsoluteAddOneEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEEbS1_(%"class.v8::internal::Isolate"* %0, i64* %1, i1 zeroext true, i64 0)
  br label %16

16:                                               ; preds = %14, %9
  %17 = phi i64* [ %13, %9 ], [ %15, %14 ]
  %18 = tail call i64* @_ZN2v88internal13MutableBigInt13MakeImmutableENS0_11MaybeHandleIS1_EE(i64* %17)
  ret i64* %18
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal13MutableBigInt14AbsoluteSubOneEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEEi(%"class.v8::internal::Isolate"*, i64*, i32) local_unnamed_addr #0 align 2 {
  %4 = icmp sgt i32 %2, 16777216
  br i1 %4, label %5, label %14

5:                                                ; preds = %3
  %6 = load i8, i8* @_ZN2v88internal36FLAG_correctness_fuzzer_suppressionsE, align 1, !range !3
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %9, label %8

8:                                                ; preds = %5
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.6, i64 0, i64 0)) #14
  unreachable

9:                                                ; preds = %5
  %10 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::Factory"*
  %11 = tail call i64* @_ZN2v88internal7Factory13NewRangeErrorENS0_15MessageTemplateENS0_6HandleINS0_6ObjectEEES5_S5_(%"class.v8::internal::Factory"* %10, i32 190, i64* null, i64* null, i64* null) #13
  %12 = load i64, i64* %11, align 8
  %13 = tail call i64 @_ZN2v88internal7Isolate13ThrowInternalENS0_6ObjectEPNS0_15MessageLocationE(%"class.v8::internal::Isolate"* %0, i64 %12, %"class.v8::internal::MessageLocation"* null) #13
  br label %108

14:                                               ; preds = %3
  %15 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %16 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE9NewBigIntEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %15, i32 %2, i8 zeroext 0) #13
  %17 = load i64, i64* %16, align 8
  %18 = shl i32 %2, 1
  %19 = add i64 %17, 3
  %20 = inttoptr i64 %19 to i32*
  store i32 %18, i32* %20, align 4
  %21 = icmp eq i64* %16, null
  br i1 %21, label %108, label %22

22:                                               ; preds = %14
  %23 = ptrtoint i64* %16 to i64
  %24 = load i64, i64* %1, align 8
  %25 = add i64 %24, 3
  %26 = inttoptr i64 %25 to i32*
  %27 = load atomic i32, i32* %26 monotonic, align 4
  %28 = lshr i32 %27, 1
  %29 = and i32 %28, 1073741823
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %46, label %31

31:                                               ; preds = %22
  %32 = zext i32 %29 to i64
  %33 = load i64, i64* %16, align 8
  %34 = add i64 %24, 7
  %35 = inttoptr i64 %34 to i64*
  %36 = load i64, i64* %35, align 1
  %37 = zext i64 %36 to i128
  %38 = add nsw i128 %37, -1
  %39 = lshr i128 %38, 64
  %40 = trunc i128 %39 to i64
  %41 = and i64 %40, 1
  %42 = trunc i128 %38 to i64
  %43 = add i64 %33, 7
  %44 = inttoptr i64 %43 to i64*
  store i64 %42, i64* %44, align 1
  %45 = icmp eq i32 %29, 1
  br i1 %45, label %46, label %69

46:                                               ; preds = %69, %31, %22
  %47 = phi i64 [ 1, %22 ], [ %41, %31 ], [ %85, %69 ]
  %48 = icmp slt i32 %29, %2
  br i1 %48, label %49, label %108

49:                                               ; preds = %46
  %50 = and i32 %28, 1073741823
  %51 = zext i32 %50 to i64
  %52 = zext i32 %2 to i64
  %53 = sub nsw i64 %52, %51
  %54 = xor i64 %51, -1
  %55 = and i64 %53, 1
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %65, label %57

57:                                               ; preds = %49
  %58 = load i64, i64* %16, align 8
  %59 = shl nuw nsw i64 %51, 3
  %60 = and i64 %59, 4294967288
  %61 = or i64 %60, 7
  %62 = add i64 %58, %61
  %63 = inttoptr i64 %62 to i64*
  store i64 %47, i64* %63, align 1
  %64 = add nuw nsw i64 %51, 1
  br label %65

65:                                               ; preds = %49, %57
  %66 = phi i64 [ %51, %49 ], [ %64, %57 ]
  %67 = sub nsw i64 0, %52
  %68 = icmp eq i64 %54, %67
  br i1 %68, label %108, label %91

69:                                               ; preds = %31, %69
  %70 = phi i64 [ %89, %69 ], [ 1, %31 ]
  %71 = phi i64 [ %85, %69 ], [ %41, %31 ]
  %72 = load i64, i64* %1, align 8
  %73 = load i64, i64* %16, align 8
  %74 = shl i64 %70, 3
  %75 = and i64 %74, 4294967288
  %76 = or i64 %75, 7
  %77 = add i64 %72, %76
  %78 = inttoptr i64 %77 to i64*
  %79 = load i64, i64* %78, align 1
  %80 = zext i64 %79 to i128
  %81 = zext i64 %71 to i128
  %82 = sub nsw i128 %80, %81
  %83 = lshr i128 %82, 64
  %84 = trunc i128 %83 to i64
  %85 = and i64 %84, 1
  %86 = trunc i128 %82 to i64
  %87 = add i64 %73, %76
  %88 = inttoptr i64 %87 to i64*
  store i64 %86, i64* %88, align 1
  %89 = add nuw nsw i64 %70, 1
  %90 = icmp eq i64 %89, %32
  br i1 %90, label %46, label %69

91:                                               ; preds = %65, %91
  %92 = phi i64 [ %106, %91 ], [ %66, %65 ]
  %93 = load i64, i64* %16, align 8
  %94 = shl i64 %92, 3
  %95 = and i64 %94, 4294967288
  %96 = or i64 %95, 7
  %97 = add i64 %93, %96
  %98 = inttoptr i64 %97 to i64*
  store i64 %47, i64* %98, align 1
  %99 = load i64, i64* %16, align 8
  %100 = shl i64 %92, 3
  %101 = add i64 %100, 8
  %102 = and i64 %101, 4294967288
  %103 = or i64 %102, 7
  %104 = add i64 %99, %103
  %105 = inttoptr i64 %104 to i64*
  store i64 %47, i64* %105, align 1
  %106 = add nuw nsw i64 %92, 2
  %107 = icmp eq i64 %106, %52
  br i1 %107, label %108, label %91

108:                                              ; preds = %65, %91, %46, %14, %9
  %109 = phi i64 [ 0, %9 ], [ 0, %14 ], [ %23, %46 ], [ %23, %91 ], [ %23, %65 ]
  %110 = inttoptr i64 %109 to i64*
  ret i64* %110
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal13MutableBigInt14AbsoluteAddOneEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEEbS1_(%"class.v8::internal::Isolate"*, i64*, i1 zeroext, i64) local_unnamed_addr #0 align 2 {
  %5 = load i64, i64* %1, align 8
  %6 = add i64 %5, 3
  %7 = inttoptr i64 %6 to i32*
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = lshr i32 %8, 1
  %10 = and i32 %9, 1073741823
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %26, label %12

12:                                               ; preds = %4
  %13 = zext i32 %10 to i64
  br label %16

14:                                               ; preds = %16
  %15 = icmp eq i64 %25, %13
  br i1 %15, label %26, label %16

16:                                               ; preds = %14, %12
  %17 = phi i64 [ 0, %12 ], [ %25, %14 ]
  %18 = shl i64 %17, 3
  %19 = and i64 %18, 4294967288
  %20 = or i64 %19, 7
  %21 = add i64 %5, %20
  %22 = inttoptr i64 %21 to i64*
  %23 = load i64, i64* %22, align 1
  %24 = icmp eq i64 %23, -1
  %25 = add nuw nsw i64 %17, 1
  br i1 %24, label %14, label %26

26:                                               ; preds = %16, %14, %4
  %27 = phi i1 [ true, %4 ], [ false, %16 ], [ true, %14 ]
  %28 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %29 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %28, align 8
  %30 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %29, null
  br i1 %30, label %33, label %31

31:                                               ; preds = %26
  %32 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %29, i64 %3) #13
  br label %46

33:                                               ; preds = %26
  %34 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %35 = load i64*, i64** %34, align 8
  %36 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %37 = load i64*, i64** %36, align 8
  %38 = icmp eq i64* %35, %37
  br i1 %38, label %39, label %41

39:                                               ; preds = %33
  %40 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #13
  br label %41

41:                                               ; preds = %39, %33
  %42 = phi i64* [ %40, %39 ], [ %35, %33 ]
  %43 = ptrtoint i64* %42 to i64
  %44 = add i64 %43, 8
  %45 = inttoptr i64 %44 to i64*
  store i64* %45, i64** %34, align 8
  store i64 %3, i64* %42, align 8
  br label %46

46:                                               ; preds = %31, %41
  %47 = phi i64* [ %32, %31 ], [ %42, %41 ]
  %48 = trunc i64 %3 to i32
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %71

50:                                               ; preds = %46
  %51 = zext i1 %27 to i32
  %52 = add nuw nsw i32 %10, %51
  %53 = icmp ugt i32 %52, 16777216
  br i1 %53, label %54, label %63

54:                                               ; preds = %50
  %55 = load i8, i8* @_ZN2v88internal36FLAG_correctness_fuzzer_suppressionsE, align 1, !range !3
  %56 = icmp eq i8 %55, 0
  br i1 %56, label %58, label %57

57:                                               ; preds = %54
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.6, i64 0, i64 0)) #14
  unreachable

58:                                               ; preds = %54
  %59 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::Factory"*
  %60 = tail call i64* @_ZN2v88internal7Factory13NewRangeErrorENS0_15MessageTemplateENS0_6HandleINS0_6ObjectEEES5_S5_(%"class.v8::internal::Factory"* %59, i32 190, i64* null, i64* null, i64* null) #13
  %61 = load i64, i64* %60, align 8
  %62 = tail call i64 @_ZN2v88internal7Isolate13ThrowInternalENS0_6ObjectEPNS0_15MessageLocationE(%"class.v8::internal::Isolate"* %0, i64 %61, %"class.v8::internal::MessageLocation"* null) #13
  br label %156

63:                                               ; preds = %50
  %64 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %65 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE9NewBigIntEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %64, i32 %52, i8 zeroext 0) #13
  %66 = load i64, i64* %65, align 8
  %67 = shl nuw i32 %52, 1
  %68 = add i64 %66, 3
  %69 = inttoptr i64 %68 to i32*
  store i32 %67, i32* %69, align 4
  %70 = icmp eq i64* %65, null
  br i1 %70, label %156, label %71

71:                                               ; preds = %63, %46
  %72 = phi i64* [ %47, %46 ], [ %65, %63 ]
  br i1 %11, label %102, label %73

73:                                               ; preds = %71
  %74 = zext i32 %10 to i64
  %75 = and i64 %74, 1
  %76 = icmp eq i32 %10, 1
  br i1 %76, label %84, label %77

77:                                               ; preds = %73
  %78 = sub nsw i64 %74, %75
  br label %104

79:                                               ; preds = %104
  %80 = trunc i128 %133 to i64
  %81 = shl i64 %138, 3
  %82 = and i64 %81, 4294967280
  %83 = or i64 %82, 7
  br label %84

84:                                               ; preds = %79, %73
  %85 = phi i64 [ undef, %73 ], [ %80, %79 ]
  %86 = phi i64 [ 7, %73 ], [ %83, %79 ]
  %87 = phi i128 [ 1, %73 ], [ %133, %79 ]
  %88 = icmp eq i64 %75, 0
  br i1 %88, label %102, label %89

89:                                               ; preds = %84
  %90 = load i64, i64* %72, align 8
  %91 = load i64, i64* %1, align 8
  %92 = add i64 %91, %86
  %93 = inttoptr i64 %92 to i64*
  %94 = load i64, i64* %93, align 1
  %95 = zext i64 %94 to i128
  %96 = add nuw nsw i128 %87, %95
  %97 = trunc i128 %96 to i64
  %98 = add i64 %90, %86
  %99 = inttoptr i64 %98 to i64*
  store i64 %97, i64* %99, align 1
  %100 = lshr i128 %96, 64
  %101 = trunc i128 %100 to i64
  br label %102

102:                                              ; preds = %89, %84, %71
  %103 = phi i64 [ 1, %71 ], [ %85, %84 ], [ %101, %89 ]
  br i1 %27, label %141, label %148

104:                                              ; preds = %104, %77
  %105 = phi i64 [ 0, %77 ], [ %138, %104 ]
  %106 = phi i64 [ 1, %77 ], [ %134, %104 ]
  %107 = phi i64 [ %78, %77 ], [ %139, %104 ]
  %108 = load i64, i64* %72, align 8
  %109 = load i64, i64* %1, align 8
  %110 = shl i64 %105, 3
  %111 = and i64 %110, 4294967280
  %112 = or i64 %111, 7
  %113 = add i64 %109, %112
  %114 = inttoptr i64 %113 to i64*
  %115 = load i64, i64* %114, align 1
  %116 = zext i64 %115 to i128
  %117 = zext i64 %106 to i128
  %118 = add nuw nsw i128 %116, %117
  %119 = lshr i128 %118, 64
  %120 = trunc i128 %118 to i64
  %121 = add i64 %108, %112
  %122 = inttoptr i64 %121 to i64*
  store i64 %120, i64* %122, align 1
  %123 = load i64, i64* %72, align 8
  %124 = load i64, i64* %1, align 8
  %125 = shl i64 %105, 3
  %126 = and i64 %125, 4294967280
  %127 = or i64 %126, 15
  %128 = add i64 %124, %127
  %129 = inttoptr i64 %128 to i64*
  %130 = load i64, i64* %129, align 1
  %131 = zext i64 %130 to i128
  %132 = add nuw nsw i128 %119, %131
  %133 = lshr i128 %132, 64
  %134 = trunc i128 %133 to i64
  %135 = trunc i128 %132 to i64
  %136 = add i64 %123, %127
  %137 = inttoptr i64 %136 to i64*
  store i64 %135, i64* %137, align 1
  %138 = add nuw nsw i64 %105, 2
  %139 = add i64 %107, -2
  %140 = icmp eq i64 %139, 0
  br i1 %140, label %79, label %104

141:                                              ; preds = %102
  %142 = load i64, i64* %72, align 8
  %143 = shl nsw i32 %10, 3
  %144 = or i32 %143, 7
  %145 = zext i32 %144 to i64
  %146 = add i64 %142, %145
  %147 = inttoptr i64 %146 to i64*
  store i64 %103, i64* %147, align 1
  br label %148

148:                                              ; preds = %102, %141
  %149 = load i64, i64* %72, align 8
  %150 = add i64 %149, 3
  %151 = inttoptr i64 %150 to i32*
  %152 = load atomic i32, i32* %151 monotonic, align 4
  %153 = and i32 %152, -2
  %154 = zext i1 %2 to i32
  %155 = or i32 %153, %154
  store atomic volatile i32 %155, i32* %151 monotonic, align 4
  br label %156

156:                                              ; preds = %63, %58, %148
  %157 = phi i64* [ %72, %148 ], [ null, %58 ], [ null, %63 ]
  ret i64* %157
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal6BigInt12ExponentiateEPNS0_7IsolateENS0_6HandleIS1_EES5_(%"class.v8::internal::Isolate"*, i64*, i64*) local_unnamed_addr #0 align 2 {
  %4 = ptrtoint i64* %1 to i64
  %5 = load i64, i64* %2, align 8
  %6 = add i64 %5, 3
  %7 = inttoptr i64 %6 to i32*
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = and i32 %8, 1
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %16, label %11

11:                                               ; preds = %3
  %12 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::Factory"*
  %13 = tail call i64* @_ZN2v88internal7Factory13NewRangeErrorENS0_15MessageTemplateENS0_6HandleINS0_6ObjectEEES5_S5_(%"class.v8::internal::Factory"* %12, i32 189, i64* null, i64* null, i64* null) #13
  %14 = load i64, i64* %13, align 8
  %15 = tail call i64 @_ZN2v88internal7Isolate13ThrowInternalENS0_6ObjectEPNS0_15MessageLocationE(%"class.v8::internal::Isolate"* %0, i64 %14, %"class.v8::internal::MessageLocation"* null) #13
  br label %207

16:                                               ; preds = %3
  %17 = load atomic i32, i32* %7 monotonic, align 4
  %18 = and i32 %17, 2147483646
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %23

20:                                               ; preds = %16
  %21 = tail call i64* @_ZN2v88internal13MutableBigInt10NewFromIntEPNS0_7IsolateEi(%"class.v8::internal::Isolate"* %0, i32 1)
  %22 = ptrtoint i64* %21 to i64
  br label %207

23:                                               ; preds = %16
  %24 = load i64, i64* %1, align 8
  %25 = add i64 %24, 3
  %26 = inttoptr i64 %25 to i32*
  %27 = load atomic i32, i32* %26 monotonic, align 4
  %28 = and i32 %27, 2147483646
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %207, label %30

30:                                               ; preds = %23
  %31 = load atomic i32, i32* %26 monotonic, align 4
  %32 = and i32 %31, 2147483646
  %33 = icmp eq i32 %32, 2
  br i1 %33, label %34, label %52

34:                                               ; preds = %30
  %35 = add i64 %24, 7
  %36 = inttoptr i64 %35 to i64*
  %37 = load i64, i64* %36, align 1
  %38 = icmp eq i64 %37, 1
  br i1 %38, label %39, label %52

39:                                               ; preds = %34
  %40 = load atomic i32, i32* %26 monotonic, align 4
  %41 = and i32 %40, 1
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %207, label %43

43:                                               ; preds = %39
  %44 = add i64 %5, 7
  %45 = inttoptr i64 %44 to i64*
  %46 = load i64, i64* %45, align 1
  %47 = and i64 %46, 1
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %49, label %207

49:                                               ; preds = %43
  %50 = tail call i64* @_ZN2v88internal6BigInt10UnaryMinusEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"* %0, i64* %1)
  %51 = ptrtoint i64* %50 to i64
  br label %207

52:                                               ; preds = %30, %34
  %53 = load atomic i32, i32* %7 monotonic, align 4
  %54 = and i32 %53, 2147483644
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %65, label %56

56:                                               ; preds = %52
  %57 = load i8, i8* @_ZN2v88internal36FLAG_correctness_fuzzer_suppressionsE, align 1, !range !3
  %58 = icmp eq i8 %57, 0
  br i1 %58, label %60, label %59

59:                                               ; preds = %56
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.6, i64 0, i64 0)) #14
  unreachable

60:                                               ; preds = %56
  %61 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::Factory"*
  %62 = tail call i64* @_ZN2v88internal7Factory13NewRangeErrorENS0_15MessageTemplateENS0_6HandleINS0_6ObjectEEES5_S5_(%"class.v8::internal::Factory"* %61, i32 190, i64* null, i64* null, i64* null) #13
  %63 = load i64, i64* %62, align 8
  %64 = tail call i64 @_ZN2v88internal7Isolate13ThrowInternalENS0_6ObjectEPNS0_15MessageLocationE(%"class.v8::internal::Isolate"* %0, i64 %63, %"class.v8::internal::MessageLocation"* null) #13
  br label %207

65:                                               ; preds = %52
  %66 = add i64 %5, 7
  %67 = inttoptr i64 %66 to i64*
  %68 = load i64, i64* %67, align 1
  %69 = icmp eq i64 %68, 1
  br i1 %69, label %207, label %70

70:                                               ; preds = %65
  %71 = icmp ugt i64 %68, 1073741823
  br i1 %71, label %72, label %81

72:                                               ; preds = %70
  %73 = load i8, i8* @_ZN2v88internal36FLAG_correctness_fuzzer_suppressionsE, align 1, !range !3
  %74 = icmp eq i8 %73, 0
  br i1 %74, label %76, label %75

75:                                               ; preds = %72
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.6, i64 0, i64 0)) #14
  unreachable

76:                                               ; preds = %72
  %77 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::Factory"*
  %78 = tail call i64* @_ZN2v88internal7Factory13NewRangeErrorENS0_15MessageTemplateENS0_6HandleINS0_6ObjectEEES5_S5_(%"class.v8::internal::Factory"* %77, i32 190, i64* null, i64* null, i64* null) #13
  %79 = load i64, i64* %78, align 8
  %80 = tail call i64 @_ZN2v88internal7Isolate13ThrowInternalENS0_6ObjectEPNS0_15MessageLocationE(%"class.v8::internal::Isolate"* %0, i64 %79, %"class.v8::internal::MessageLocation"* null) #13
  br label %207

81:                                               ; preds = %70
  %82 = trunc i64 %68 to i32
  %83 = load atomic i32, i32* %26 monotonic, align 4
  %84 = and i32 %83, 2147483646
  %85 = icmp eq i32 %84, 2
  br i1 %85, label %86, label %178

86:                                               ; preds = %81
  %87 = add i64 %24, 7
  %88 = inttoptr i64 %87 to i64*
  %89 = load i64, i64* %88, align 1
  %90 = icmp eq i64 %89, 2
  br i1 %90, label %91, label %178

91:                                               ; preds = %86
  %92 = lshr i32 %82, 6
  %93 = add nuw nsw i32 %92, 1
  %94 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %95 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE9NewBigIntEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %94, i32 %93, i8 zeroext 0) #13
  %96 = load i64, i64* %95, align 8
  %97 = shl nuw nsw i32 %93, 1
  %98 = add i64 %96, 3
  %99 = inttoptr i64 %98 to i32*
  store i32 %97, i32* %99, align 4
  %100 = icmp eq i64* %95, null
  br i1 %100, label %207, label %101

101:                                              ; preds = %91
  %102 = ptrtoint i64* %95 to i64
  %103 = load i64, i64* %95, align 8
  %104 = add i64 %103, 7
  %105 = inttoptr i64 %104 to i8*
  %106 = shl nuw nsw i32 %93, 3
  %107 = zext i32 %106 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %105, i8 0, i64 %107, i1 false) #13
  %108 = and i64 %68, 63
  %109 = shl i64 1, %108
  %110 = load i64, i64* %95, align 8
  %111 = shl nuw nsw i32 %92, 3
  %112 = or i32 %111, 7
  %113 = zext i32 %112 to i64
  %114 = add i64 %110, %113
  %115 = inttoptr i64 %114 to i64*
  store i64 %109, i64* %115, align 1
  %116 = load i64, i64* %1, align 8
  %117 = add i64 %116, 3
  %118 = inttoptr i64 %117 to i32*
  %119 = load atomic i32, i32* %118 monotonic, align 4
  %120 = and i32 %119, 1
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %130, label %122

122:                                              ; preds = %101
  %123 = load i64, i64* %95, align 8
  %124 = and i32 %82, 1
  %125 = add i64 %123, 3
  %126 = inttoptr i64 %125 to i32*
  %127 = load atomic i32, i32* %126 monotonic, align 4
  %128 = and i32 %127, -2
  %129 = or i32 %128, %124
  store atomic volatile i32 %129, i32* %126 monotonic, align 4
  br label %130

130:                                              ; preds = %101, %122
  %131 = load i64, i64* %95, align 8
  %132 = add i64 %131, 3
  %133 = inttoptr i64 %132 to i32*
  %134 = load atomic i32, i32* %133 monotonic, align 4
  %135 = lshr i32 %134, 1
  %136 = and i32 %135, 1073741823
  %137 = zext i32 %136 to i64
  br label %138

138:                                              ; preds = %141, %130
  %139 = phi i64 [ %142, %141 ], [ %137, %130 ]
  %140 = icmp sgt i64 %139, 0
  br i1 %140, label %141, label %151

141:                                              ; preds = %138
  %142 = add nsw i64 %139, -1
  %143 = trunc i64 %142 to i32
  %144 = shl nsw i32 %143, 3
  %145 = or i32 %144, 7
  %146 = sext i32 %145 to i64
  %147 = add i64 %131, %146
  %148 = inttoptr i64 %147 to i64*
  %149 = load i64, i64* %148, align 1
  %150 = icmp eq i64 %149, 0
  br i1 %150, label %138, label %151

151:                                              ; preds = %141, %138
  %152 = trunc i64 %139 to i32
  %153 = sub nsw i32 %136, %152
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %207, label %155

155:                                              ; preds = %151
  %156 = and i64 %131, -262144
  %157 = or i64 %156, 16
  %158 = inttoptr i64 %157 to %"class.v8::internal::Heap"**
  %159 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %158, align 16
  %160 = tail call zeroext i1 @_ZN2v88internal4Heap13IsLargeObjectENS0_10HeapObjectE(i64 %131) #13
  br i1 %160, label %169, label %161

161:                                              ; preds = %155
  %162 = shl i32 %152, 3
  %163 = add nsw i32 %162, 8
  %164 = add i64 %131, -1
  %165 = sext i32 %163 to i64
  %166 = add i64 %164, %165
  %167 = shl nsw i32 %153, 3
  %168 = tail call i64 @_ZN2v88internal4Heap20CreateFillerObjectAtEmiNS0_18ClearRecordedSlotsE(%"class.v8::internal::Heap"* %159, i64 %166, i32 %167, i32 1) #13
  br label %169

169:                                              ; preds = %161, %155
  %170 = load atomic i32, i32* %133 monotonic, align 4
  %171 = and i32 %170, -2147483647
  %172 = shl i32 %152, 1
  %173 = or i32 %171, %172
  store atomic volatile i32 %173, i32* %133 release, align 4
  %174 = icmp eq i32 %152, 0
  br i1 %174, label %175, label %207

175:                                              ; preds = %169
  %176 = load atomic i32, i32* %133 monotonic, align 4
  %177 = and i32 %176, -2
  store atomic volatile i32 %177, i32* %133 monotonic, align 4
  br label %207

178:                                              ; preds = %81, %86
  %179 = and i32 %82, 1
  %180 = icmp eq i32 %179, 0
  %181 = select i1 %180, i64 0, i64 %4
  %182 = lshr i32 %82, 1
  %183 = icmp eq i32 %182, 0
  br i1 %183, label %207, label %184

184:                                              ; preds = %178, %203
  %185 = phi i32 [ %205, %203 ], [ %182, %178 ]
  %186 = phi i32 [ %185, %203 ], [ %82, %178 ]
  %187 = phi i64 [ %191, %203 ], [ %4, %178 ]
  %188 = phi i64 [ %204, %203 ], [ %181, %178 ]
  %189 = inttoptr i64 %187 to i64*
  %190 = tail call i64* @_ZN2v88internal6BigInt8MultiplyEPNS0_7IsolateENS0_6HandleIS1_EES5_(%"class.v8::internal::Isolate"* %0, i64* %189, i64* %189)
  %191 = ptrtoint i64* %190 to i64
  %192 = icmp eq i64* %190, null
  br i1 %192, label %207, label %193

193:                                              ; preds = %184
  %194 = and i32 %186, 2
  %195 = icmp eq i32 %194, 0
  br i1 %195, label %203, label %196

196:                                              ; preds = %193
  %197 = icmp eq i64 %188, 0
  br i1 %197, label %203, label %198

198:                                              ; preds = %196
  %199 = inttoptr i64 %188 to i64*
  %200 = tail call i64* @_ZN2v88internal6BigInt8MultiplyEPNS0_7IsolateENS0_6HandleIS1_EES5_(%"class.v8::internal::Isolate"* %0, i64* nonnull %199, i64* nonnull %190)
  %201 = ptrtoint i64* %200 to i64
  %202 = icmp eq i64* %200, null
  br i1 %202, label %207, label %203

203:                                              ; preds = %198, %196, %193
  %204 = phi i64 [ %188, %193 ], [ %191, %196 ], [ %201, %198 ]
  %205 = ashr i32 %185, 1
  %206 = icmp eq i32 %205, 0
  br i1 %206, label %207, label %184

207:                                              ; preds = %203, %184, %198, %178, %39, %91, %151, %169, %175, %65, %43, %23, %76, %60, %49, %20, %11
  %208 = phi i64 [ 0, %11 ], [ %22, %20 ], [ %51, %49 ], [ 0, %60 ], [ 0, %76 ], [ %4, %23 ], [ %4, %39 ], [ %4, %43 ], [ %4, %65 ], [ 0, %91 ], [ %102, %151 ], [ %102, %169 ], [ %102, %175 ], [ %181, %178 ], [ %204, %203 ], [ 0, %184 ], [ 0, %198 ]
  %209 = inttoptr i64 %208 to i64*
  ret i64* %209
}

declare i64* @_ZN2v88internal7Factory13NewRangeErrorENS0_15MessageTemplateENS0_6HandleINS0_6ObjectEEES5_S5_(%"class.v8::internal::Factory"*, i32, i64*, i64*, i64*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal6BigInt8MultiplyEPNS0_7IsolateENS0_6HandleIS1_EES5_(%"class.v8::internal::Isolate"*, i64*, i64*) local_unnamed_addr #0 align 2 {
  %4 = alloca { i64*, i32 }, align 8
  %5 = bitcast { i64*, i32 }* %4 to %"class.v8::bigint::Digits"*
  %6 = load i64, i64* %1, align 8
  %7 = add i64 %6, 3
  %8 = inttoptr i64 %7 to i32*
  %9 = load atomic i32, i32* %8 monotonic, align 4
  %10 = and i32 %9, 2147483646
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %14

12:                                               ; preds = %3
  %13 = ptrtoint i64* %1 to i64
  br label %151

14:                                               ; preds = %3
  %15 = load i64, i64* %2, align 8
  %16 = add i64 %15, 3
  %17 = inttoptr i64 %16 to i32*
  %18 = load atomic i32, i32* %17 monotonic, align 4
  %19 = and i32 %18, 2147483646
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %23

21:                                               ; preds = %14
  %22 = ptrtoint i64* %2 to i64
  br label %151

23:                                               ; preds = %14
  %24 = load atomic i32, i32* %8 monotonic, align 4
  %25 = lshr i32 %24, 1
  %26 = and i32 %25, 1073741823
  %27 = load atomic i32, i32* %17 monotonic, align 4
  %28 = lshr i32 %27, 1
  %29 = and i32 %28, 1073741823
  %30 = add nuw nsw i32 %29, %26
  %31 = icmp ugt i32 %30, 16777216
  br i1 %31, label %32, label %41

32:                                               ; preds = %23
  %33 = load i8, i8* @_ZN2v88internal36FLAG_correctness_fuzzer_suppressionsE, align 1, !range !3
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %36, label %35

35:                                               ; preds = %32
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.6, i64 0, i64 0)) #14
  unreachable

36:                                               ; preds = %32
  %37 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::Factory"*
  %38 = tail call i64* @_ZN2v88internal7Factory13NewRangeErrorENS0_15MessageTemplateENS0_6HandleINS0_6ObjectEEES5_S5_(%"class.v8::internal::Factory"* %37, i32 190, i64* null, i64* null, i64* null) #13
  %39 = load i64, i64* %38, align 8
  %40 = tail call i64 @_ZN2v88internal7Isolate13ThrowInternalENS0_6ObjectEPNS0_15MessageLocationE(%"class.v8::internal::Isolate"* %0, i64 %39, %"class.v8::internal::MessageLocation"* null) #13
  br label %151

41:                                               ; preds = %23
  %42 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %43 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE9NewBigIntEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %42, i32 %30, i8 zeroext 0) #13
  %44 = load i64, i64* %43, align 8
  %45 = shl nuw i32 %30, 1
  %46 = add i64 %44, 3
  %47 = inttoptr i64 %46 to i32*
  store i32 %45, i32* %47, align 4
  %48 = icmp eq i64* %43, null
  br i1 %48, label %151, label %49

49:                                               ; preds = %41
  %50 = ptrtoint i64* %43 to i64
  %51 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 39
  %52 = load %"class.v8::bigint::Processor"*, %"class.v8::bigint::Processor"** %51, align 8
  %53 = load i64, i64* %43, align 8
  %54 = add i64 %53, 7
  %55 = inttoptr i64 %54 to i64*
  %56 = add i64 %53, 3
  %57 = inttoptr i64 %56 to i32*
  %58 = load atomic i32, i32* %57 monotonic, align 4
  %59 = lshr i32 %58, 1
  %60 = and i32 %59, 1073741823
  %61 = load i64, i64* %1, align 8
  %62 = add i64 %61, 7
  %63 = inttoptr i64 %62 to i64*
  %64 = add i64 %61, 3
  %65 = inttoptr i64 %64 to i32*
  %66 = load atomic i32, i32* %65 monotonic, align 4
  %67 = lshr i32 %66, 1
  %68 = and i32 %67, 1073741823
  %69 = load i64, i64* %2, align 8
  %70 = add i64 %69, 7
  %71 = inttoptr i64 %70 to i64*
  %72 = add i64 %69, 3
  %73 = inttoptr i64 %72 to i32*
  %74 = load atomic i32, i32* %73 monotonic, align 4
  %75 = lshr i32 %74, 1
  %76 = and i32 %75, 1073741823
  %77 = getelementptr inbounds { i64*, i32 }, { i64*, i32 }* %4, i64 0, i32 0
  store i64* %71, i64** %77, align 8
  %78 = getelementptr inbounds { i64*, i32 }, { i64*, i32 }* %4, i64 0, i32 1
  store i32 %76, i32* %78, align 8
  %79 = tail call i32 @_ZN2v86bigint9Processor8MultiplyENS0_8RWDigitsENS0_6DigitsES3_(%"class.v8::bigint::Processor"* %52, i64* %55, i32 %60, i64* %63, i32 %68, %"class.v8::bigint::Digits"* nonnull byval(%"class.v8::bigint::Digits") align 8 %5) #13
  %80 = icmp eq i32 %79, 1
  br i1 %80, label %81, label %83

81:                                               ; preds = %49
  %82 = tail call i64 @_ZN2v88internal7Isolate18TerminateExecutionEv(%"class.v8::internal::Isolate"* %0) #13
  br label %151

83:                                               ; preds = %49
  %84 = load i64, i64* %43, align 8
  %85 = load i64, i64* %1, align 8
  %86 = add i64 %85, 3
  %87 = inttoptr i64 %86 to i32*
  %88 = load atomic i32, i32* %87 monotonic, align 4
  %89 = and i32 %88, 1
  %90 = icmp ne i32 %89, 0
  %91 = load i64, i64* %2, align 8
  %92 = add i64 %91, 3
  %93 = inttoptr i64 %92 to i32*
  %94 = load atomic i32, i32* %93 monotonic, align 4
  %95 = and i32 %94, 1
  %96 = icmp ne i32 %95, 0
  %97 = xor i1 %90, %96
  %98 = add i64 %84, 3
  %99 = inttoptr i64 %98 to i32*
  %100 = load atomic i32, i32* %99 monotonic, align 4
  %101 = and i32 %100, -2
  %102 = zext i1 %97 to i32
  %103 = or i32 %101, %102
  store atomic volatile i32 %103, i32* %99 monotonic, align 4
  %104 = load i64, i64* %43, align 8
  %105 = add i64 %104, 3
  %106 = inttoptr i64 %105 to i32*
  %107 = load atomic i32, i32* %106 monotonic, align 4
  %108 = lshr i32 %107, 1
  %109 = and i32 %108, 1073741823
  %110 = zext i32 %109 to i64
  br label %111

111:                                              ; preds = %114, %83
  %112 = phi i64 [ %115, %114 ], [ %110, %83 ]
  %113 = icmp sgt i64 %112, 0
  br i1 %113, label %114, label %124

114:                                              ; preds = %111
  %115 = add nsw i64 %112, -1
  %116 = trunc i64 %115 to i32
  %117 = shl nsw i32 %116, 3
  %118 = or i32 %117, 7
  %119 = sext i32 %118 to i64
  %120 = add i64 %104, %119
  %121 = inttoptr i64 %120 to i64*
  %122 = load i64, i64* %121, align 1
  %123 = icmp eq i64 %122, 0
  br i1 %123, label %111, label %124

124:                                              ; preds = %114, %111
  %125 = trunc i64 %112 to i32
  %126 = sub nsw i32 %109, %125
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %151, label %128

128:                                              ; preds = %124
  %129 = and i64 %104, -262144
  %130 = or i64 %129, 16
  %131 = inttoptr i64 %130 to %"class.v8::internal::Heap"**
  %132 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %131, align 16
  %133 = tail call zeroext i1 @_ZN2v88internal4Heap13IsLargeObjectENS0_10HeapObjectE(i64 %104) #13
  br i1 %133, label %142, label %134

134:                                              ; preds = %128
  %135 = shl i32 %125, 3
  %136 = add nsw i32 %135, 8
  %137 = add i64 %104, -1
  %138 = sext i32 %136 to i64
  %139 = add i64 %137, %138
  %140 = shl nsw i32 %126, 3
  %141 = tail call i64 @_ZN2v88internal4Heap20CreateFillerObjectAtEmiNS0_18ClearRecordedSlotsE(%"class.v8::internal::Heap"* %132, i64 %139, i32 %140, i32 1) #13
  br label %142

142:                                              ; preds = %134, %128
  %143 = load atomic i32, i32* %106 monotonic, align 4
  %144 = and i32 %143, -2147483647
  %145 = shl i32 %125, 1
  %146 = or i32 %144, %145
  store atomic volatile i32 %146, i32* %106 release, align 4
  %147 = icmp eq i32 %125, 0
  br i1 %147, label %148, label %151

148:                                              ; preds = %142
  %149 = load atomic i32, i32* %106 monotonic, align 4
  %150 = and i32 %149, -2
  store atomic volatile i32 %150, i32* %106 monotonic, align 4
  br label %151

151:                                              ; preds = %36, %41, %148, %142, %124, %81, %21, %12
  %152 = phi i64 [ %13, %12 ], [ %22, %21 ], [ 0, %36 ], [ 0, %41 ], [ 0, %81 ], [ %50, %124 ], [ %50, %142 ], [ %50, %148 ]
  %153 = inttoptr i64 %152 to i64*
  ret i64* %153
}

declare i32 @_ZN2v86bigint9Processor8MultiplyENS0_8RWDigitsENS0_6DigitsES3_(%"class.v8::bigint::Processor"*, i64*, i32, i64*, i32, %"class.v8::bigint::Digits"* byval(%"class.v8::bigint::Digits") align 8) local_unnamed_addr #3

declare i64 @_ZN2v88internal7Isolate18TerminateExecutionEv(%"class.v8::internal::Isolate"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal6BigInt6DivideEPNS0_7IsolateENS0_6HandleIS1_EES5_(%"class.v8::internal::Isolate"*, i64*, i64*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.v8::internal::Handle.1129", align 8
  %5 = alloca i64, align 8
  %6 = load i64, i64* %2, align 8
  %7 = add i64 %6, 3
  %8 = inttoptr i64 %7 to i32*
  %9 = load atomic i32, i32* %8 monotonic, align 4
  %10 = and i32 %9, 2147483646
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %17

12:                                               ; preds = %3
  %13 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::Factory"*
  %14 = tail call i64* @_ZN2v88internal7Factory13NewRangeErrorENS0_15MessageTemplateENS0_6HandleINS0_6ObjectEEES5_S5_(%"class.v8::internal::Factory"* %13, i32 188, i64* null, i64* null, i64* null) #13
  %15 = load i64, i64* %14, align 8
  %16 = tail call i64 @_ZN2v88internal7Isolate13ThrowInternalENS0_6ObjectEPNS0_15MessageLocationE(%"class.v8::internal::Isolate"* %0, i64 %15, %"class.v8::internal::MessageLocation"* null) #13
  br label %148

17:                                               ; preds = %3
  %18 = load i64, i64* %1, align 8
  %19 = add i64 %18, 7
  %20 = inttoptr i64 %19 to i64*
  %21 = add i64 %18, 3
  %22 = inttoptr i64 %21 to i32*
  %23 = load atomic i32, i32* %22 monotonic, align 4
  %24 = lshr i32 %23, 1
  %25 = and i32 %24, 1073741823
  %26 = add i64 %6, 7
  %27 = inttoptr i64 %26 to i64*
  %28 = load atomic i32, i32* %8 monotonic, align 4
  %29 = lshr i32 %28, 1
  %30 = and i32 %29, 1073741823
  %31 = tail call i32 @_ZN2v86bigint7CompareENS0_6DigitsES1_(i64* %20, i32 %25, i64* %27, i32 %30) #13
  %32 = icmp slt i32 %31, 0
  br i1 %32, label %33, label %36

33:                                               ; preds = %17
  %34 = tail call i64* @_ZN2v88internal13MutableBigInt4ZeroINS0_7IsolateEEENS0_6HandleINS0_6BigIntEEEPT_NS0_14AllocationTypeE(%"class.v8::internal::Isolate"* %0, i8 zeroext 0) #13
  %35 = ptrtoint i64* %34 to i64
  br label %148

36:                                               ; preds = %17
  %37 = bitcast %"class.v8::internal::Handle.1129"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37) #13
  %38 = getelementptr inbounds %"class.v8::internal::Handle.1129", %"class.v8::internal::Handle.1129"* %4, i64 0, i32 0, i32 0
  store i64* null, i64** %38, align 8
  %39 = load i64, i64* %1, align 8
  %40 = add i64 %39, 3
  %41 = inttoptr i64 %40 to i32*
  %42 = load atomic i32, i32* %41 monotonic, align 4
  %43 = and i32 %42, 1
  %44 = icmp ne i32 %43, 0
  %45 = load i64, i64* %2, align 8
  %46 = add i64 %45, 3
  %47 = inttoptr i64 %46 to i32*
  %48 = load atomic i32, i32* %47 monotonic, align 4
  %49 = and i32 %48, 1
  %50 = icmp ne i32 %49, 0
  %51 = xor i1 %44, %50
  %52 = load atomic i32, i32* %47 monotonic, align 4
  %53 = and i32 %52, 2147483646
  %54 = icmp eq i32 %53, 2
  br i1 %54, label %55, label %72

55:                                               ; preds = %36
  %56 = add i64 %45, 7
  %57 = inttoptr i64 %56 to i64*
  %58 = load i64, i64* %57, align 1
  %59 = icmp eq i64 %58, 1
  br i1 %59, label %60, label %70

60:                                               ; preds = %55
  %61 = load atomic i32, i32* %41 monotonic, align 4
  %62 = and i32 %61, 1
  %63 = icmp ne i32 %62, 0
  %64 = xor i1 %51, %63
  br i1 %64, label %65, label %67

65:                                               ; preds = %60
  %66 = tail call i64* @_ZN2v88internal6BigInt10UnaryMinusEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"* %0, i64* %1)
  br label %67

67:                                               ; preds = %60, %65
  %68 = phi i64* [ %66, %65 ], [ %1, %60 ]
  %69 = ptrtoint i64* %68 to i64
  br label %146

70:                                               ; preds = %55
  %71 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %71) #13
  call void @_ZN2v88internal13MutableBigInt16AbsoluteDivSmallEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEEmPNS4_IS1_EEPm(%"class.v8::internal::Isolate"* %0, i64* %1, i64 %58, %"class.v8::internal::Handle.1129"* nonnull %4, i64* nonnull %5)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %71) #13
  br label %74

72:                                               ; preds = %36
  %73 = call zeroext i1 @_ZN2v88internal13MutableBigInt16AbsoluteDivLargeEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEES6_PNS4_IS1_EES8_(%"class.v8::internal::Isolate"* %0, i64* %1, i64* %2, %"class.v8::internal::Handle.1129"* nonnull %4, %"class.v8::internal::Handle.1129"* null)
  br i1 %73, label %74, label %146

74:                                               ; preds = %70, %72
  %75 = load i64*, i64** %38, align 8
  %76 = load i64, i64* %75, align 8
  %77 = load i64, i64* %1, align 8
  %78 = add i64 %77, 3
  %79 = inttoptr i64 %78 to i32*
  %80 = load atomic i32, i32* %79 monotonic, align 4
  %81 = and i32 %80, 1
  %82 = icmp ne i32 %81, 0
  %83 = load i64, i64* %2, align 8
  %84 = add i64 %83, 3
  %85 = inttoptr i64 %84 to i32*
  %86 = load atomic i32, i32* %85 monotonic, align 4
  %87 = and i32 %86, 1
  %88 = icmp ne i32 %87, 0
  %89 = xor i1 %82, %88
  %90 = add i64 %76, 3
  %91 = inttoptr i64 %90 to i32*
  %92 = load atomic i32, i32* %91 monotonic, align 4
  %93 = and i32 %92, -2
  %94 = zext i1 %89 to i32
  %95 = or i32 %93, %94
  store atomic volatile i32 %95, i32* %91 monotonic, align 4
  %96 = load i64*, i64** %38, align 8
  %97 = load i64, i64* %96, align 8
  %98 = add i64 %97, 3
  %99 = inttoptr i64 %98 to i32*
  %100 = load atomic i32, i32* %99 monotonic, align 4
  %101 = lshr i32 %100, 1
  %102 = and i32 %101, 1073741823
  %103 = zext i32 %102 to i64
  br label %104

104:                                              ; preds = %107, %74
  %105 = phi i64 [ %108, %107 ], [ %103, %74 ]
  %106 = icmp sgt i64 %105, 0
  br i1 %106, label %107, label %117

107:                                              ; preds = %104
  %108 = add nsw i64 %105, -1
  %109 = trunc i64 %108 to i32
  %110 = shl nsw i32 %109, 3
  %111 = or i32 %110, 7
  %112 = sext i32 %111 to i64
  %113 = add i64 %97, %112
  %114 = inttoptr i64 %113 to i64*
  %115 = load i64, i64* %114, align 1
  %116 = icmp eq i64 %115, 0
  br i1 %116, label %104, label %117

117:                                              ; preds = %107, %104
  %118 = trunc i64 %105 to i32
  %119 = sub nsw i32 %102, %118
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %144, label %121

121:                                              ; preds = %117
  %122 = and i64 %97, -262144
  %123 = or i64 %122, 16
  %124 = inttoptr i64 %123 to %"class.v8::internal::Heap"**
  %125 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %124, align 16
  %126 = call zeroext i1 @_ZN2v88internal4Heap13IsLargeObjectENS0_10HeapObjectE(i64 %97) #13
  br i1 %126, label %135, label %127

127:                                              ; preds = %121
  %128 = shl i32 %118, 3
  %129 = add nsw i32 %128, 8
  %130 = add i64 %97, -1
  %131 = sext i32 %129 to i64
  %132 = add i64 %130, %131
  %133 = shl nsw i32 %119, 3
  %134 = call i64 @_ZN2v88internal4Heap20CreateFillerObjectAtEmiNS0_18ClearRecordedSlotsE(%"class.v8::internal::Heap"* %125, i64 %132, i32 %133, i32 1) #13
  br label %135

135:                                              ; preds = %127, %121
  %136 = load atomic i32, i32* %99 monotonic, align 4
  %137 = and i32 %136, -2147483647
  %138 = shl i32 %118, 1
  %139 = or i32 %137, %138
  store atomic volatile i32 %139, i32* %99 release, align 4
  %140 = icmp eq i32 %118, 0
  br i1 %140, label %141, label %144

141:                                              ; preds = %135
  %142 = load atomic i32, i32* %99 monotonic, align 4
  %143 = and i32 %142, -2
  store atomic volatile i32 %143, i32* %99 monotonic, align 4
  br label %144

144:                                              ; preds = %117, %135, %141
  %145 = ptrtoint i64* %96 to i64
  br label %146

146:                                              ; preds = %72, %67, %144
  %147 = phi i64 [ %69, %67 ], [ %145, %144 ], [ 0, %72 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37) #13
  br label %148

148:                                              ; preds = %146, %33, %12
  %149 = phi i64 [ 0, %12 ], [ %35, %33 ], [ %147, %146 ]
  %150 = inttoptr i64 %149 to i64*
  ret i64* %150
}

declare i32 @_ZN2v86bigint7CompareENS0_6DigitsES1_(i64*, i32, i64*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13MutableBigInt16AbsoluteDivSmallEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEEmPNS4_IS1_EEPm(%"class.v8::internal::Isolate"*, i64*, i64, %"class.v8::internal::Handle.1129"*, i64* nocapture) local_unnamed_addr #0 align 2 {
  store i64 0, i64* %4, align 8
  %6 = load i64, i64* %1, align 8
  %7 = add i64 %6, 3
  %8 = inttoptr i64 %7 to i32*
  %9 = load atomic i32, i32* %8 monotonic, align 4
  %10 = lshr i32 %9, 1
  %11 = and i32 %10, 1073741823
  %12 = icmp eq %"class.v8::internal::Handle.1129"* %3, null
  br i1 %12, label %13, label %29

13:                                               ; preds = %5
  %14 = icmp eq i32 %11, 0
  br i1 %14, label %94, label %15

15:                                               ; preds = %13
  %16 = and i32 %10, 1073741823
  %17 = zext i32 %16 to i64
  %18 = add nsw i64 %17, -1
  %19 = trunc i64 %18 to i32
  %20 = shl nsw i32 %19, 3
  %21 = or i32 %20, 7
  %22 = sext i32 %21 to i64
  %23 = add i64 %6, %22
  %24 = inttoptr i64 %23 to i64*
  %25 = load i64, i64* %24, align 1
  %26 = tail call { i64, i64 } asm "divq  $4", "={ax},={dx},{dx},{ax},rm,~{dirflag},~{fpsr},~{flags}"(i64 0, i64 %25, i64 %2) #15, !srcloc !4
  %27 = extractvalue { i64, i64 } %26, 1
  store i64 %27, i64* %4, align 8
  %28 = icmp sgt i64 %18, 0
  br i1 %28, label %79, label %94

29:                                               ; preds = %5
  %30 = getelementptr inbounds %"class.v8::internal::Handle.1129", %"class.v8::internal::Handle.1129"* %3, i64 0, i32 0, i32 0
  %31 = load i64*, i64** %30, align 8
  %32 = icmp eq i64* %31, null
  br i1 %32, label %33, label %54

33:                                               ; preds = %29
  %34 = icmp ugt i32 %11, 16777216
  br i1 %34, label %35, label %44

35:                                               ; preds = %33
  %36 = load i8, i8* @_ZN2v88internal36FLAG_correctness_fuzzer_suppressionsE, align 1, !range !3
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %39, label %38

38:                                               ; preds = %35
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.6, i64 0, i64 0)) #14
  unreachable

39:                                               ; preds = %35
  %40 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::Factory"*
  %41 = tail call i64* @_ZN2v88internal7Factory13NewRangeErrorENS0_15MessageTemplateENS0_6HandleINS0_6ObjectEEES5_S5_(%"class.v8::internal::Factory"* %40, i32 190, i64* null, i64* null, i64* null) #13
  %42 = load i64, i64* %41, align 8
  %43 = tail call i64 @_ZN2v88internal7Isolate13ThrowInternalENS0_6ObjectEPNS0_15MessageLocationE(%"class.v8::internal::Isolate"* %0, i64 %42, %"class.v8::internal::MessageLocation"* null) #13
  br label %52

44:                                               ; preds = %33
  %45 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %46 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE9NewBigIntEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %45, i32 %11, i8 zeroext 0) #13
  %47 = load i64, i64* %46, align 8
  %48 = shl nuw nsw i32 %11, 1
  %49 = add i64 %47, 3
  %50 = inttoptr i64 %49 to i32*
  store i32 %48, i32* %50, align 4
  %51 = icmp eq i64* %46, null
  br i1 %51, label %52, label %53, !prof !2

52:                                               ; preds = %39, %44
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0)) #14
  unreachable

53:                                               ; preds = %44
  store i64* %46, i64** %30, align 8
  br label %54

54:                                               ; preds = %53, %29
  %55 = icmp eq i32 %11, 0
  br i1 %55, label %94, label %56

56:                                               ; preds = %54
  %57 = and i32 %10, 1073741823
  %58 = zext i32 %57 to i64
  br label %59

59:                                               ; preds = %56, %59
  %60 = phi i64 [ %58, %56 ], [ %61, %59 ]
  %61 = add nsw i64 %60, -1
  %62 = load i64, i64* %4, align 8
  %63 = load i64, i64* %1, align 8
  %64 = trunc i64 %61 to i32
  %65 = shl nsw i32 %64, 3
  %66 = or i32 %65, 7
  %67 = sext i32 %66 to i64
  %68 = add i64 %63, %67
  %69 = inttoptr i64 %68 to i64*
  %70 = load i64, i64* %69, align 1
  %71 = tail call { i64, i64 } asm "divq  $4", "={ax},={dx},{dx},{ax},rm,~{dirflag},~{fpsr},~{flags}"(i64 %62, i64 %70, i64 %2) #15, !srcloc !4
  %72 = extractvalue { i64, i64 } %71, 0
  %73 = extractvalue { i64, i64 } %71, 1
  store i64 %73, i64* %4, align 8
  %74 = load i64*, i64** %30, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, %67
  %77 = inttoptr i64 %76 to i64*
  store i64 %72, i64* %77, align 1
  %78 = icmp sgt i64 %61, 0
  br i1 %78, label %59, label %94

79:                                               ; preds = %15, %79
  %80 = phi i64 [ %92, %79 ], [ %27, %15 ]
  %81 = phi i64 [ %83, %79 ], [ %18, %15 ]
  %82 = load i64, i64* %1, align 8
  %83 = add nsw i64 %81, -1
  %84 = trunc i64 %83 to i32
  %85 = shl nsw i32 %84, 3
  %86 = or i32 %85, 7
  %87 = sext i32 %86 to i64
  %88 = add i64 %82, %87
  %89 = inttoptr i64 %88 to i64*
  %90 = load i64, i64* %89, align 1
  %91 = tail call { i64, i64 } asm "divq  $4", "={ax},={dx},{dx},{ax},rm,~{dirflag},~{fpsr},~{flags}"(i64 %80, i64 %90, i64 %2) #15, !srcloc !4
  %92 = extractvalue { i64, i64 } %91, 1
  store i64 %92, i64* %4, align 8
  %93 = icmp sgt i64 %83, 0
  br i1 %93, label %79, label %94

94:                                               ; preds = %59, %79, %15, %13, %54
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal13MutableBigInt16AbsoluteDivLargeEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEES6_PNS4_IS1_EES8_(%"class.v8::internal::Isolate"*, i64*, i64*, %"class.v8::internal::Handle.1129"*, %"class.v8::internal::Handle.1129"*) local_unnamed_addr #0 align 2 {
  %6 = load i64, i64* %2, align 8
  %7 = add i64 %6, 3
  %8 = inttoptr i64 %7 to i32*
  %9 = load atomic i32, i32* %8 monotonic, align 4
  %10 = lshr i32 %9, 1
  %11 = and i32 %10, 1073741823
  %12 = load i64, i64* %1, align 8
  %13 = add i64 %12, 3
  %14 = inttoptr i64 %13 to i32*
  %15 = load atomic i32, i32* %14 monotonic, align 4
  %16 = lshr i32 %15, 1
  %17 = and i32 %16, 1073741823
  %18 = sub nsw i32 %17, %11
  %19 = icmp ne %"class.v8::internal::Handle.1129"* %3, null
  br i1 %19, label %20, label %43

20:                                               ; preds = %5
  %21 = add nsw i32 %18, 1
  %22 = icmp sgt i32 %18, 16777215
  br i1 %22, label %23, label %32

23:                                               ; preds = %20
  %24 = load i8, i8* @_ZN2v88internal36FLAG_correctness_fuzzer_suppressionsE, align 1, !range !3
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %27, label %26

26:                                               ; preds = %23
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.6, i64 0, i64 0)) #14
  unreachable

27:                                               ; preds = %23
  %28 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::Factory"*
  %29 = tail call i64* @_ZN2v88internal7Factory13NewRangeErrorENS0_15MessageTemplateENS0_6HandleINS0_6ObjectEEES5_S5_(%"class.v8::internal::Factory"* %28, i32 190, i64* null, i64* null, i64* null) #13
  %30 = load i64, i64* %29, align 8
  %31 = tail call i64 @_ZN2v88internal7Isolate13ThrowInternalENS0_6ObjectEPNS0_15MessageLocationE(%"class.v8::internal::Isolate"* %0, i64 %30, %"class.v8::internal::MessageLocation"* null) #13
  br label %40

32:                                               ; preds = %20
  %33 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %34 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE9NewBigIntEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %33, i32 %21, i8 zeroext 0) #13
  %35 = load i64, i64* %34, align 8
  %36 = shl i32 %21, 1
  %37 = add i64 %35, 3
  %38 = inttoptr i64 %37 to i32*
  store i32 %36, i32* %38, align 4
  %39 = icmp eq i64* %34, null
  br i1 %39, label %40, label %41, !prof !2

40:                                               ; preds = %27, %32
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0)) #14
  unreachable

41:                                               ; preds = %32
  %42 = ptrtoint i64* %34 to i64
  br label %43

43:                                               ; preds = %41, %5
  %44 = phi i64 [ %42, %41 ], [ 0, %5 ]
  %45 = add nuw nsw i32 %11, 1
  %46 = icmp ugt i32 %11, 16777215
  br i1 %46, label %47, label %56

47:                                               ; preds = %43
  %48 = load i8, i8* @_ZN2v88internal36FLAG_correctness_fuzzer_suppressionsE, align 1, !range !3
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %51, label %50

50:                                               ; preds = %47
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.6, i64 0, i64 0)) #14
  unreachable

51:                                               ; preds = %47
  %52 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::Factory"*
  %53 = tail call i64* @_ZN2v88internal7Factory13NewRangeErrorENS0_15MessageTemplateENS0_6HandleINS0_6ObjectEEES5_S5_(%"class.v8::internal::Factory"* %52, i32 190, i64* null, i64* null, i64* null) #13
  %54 = load i64, i64* %53, align 8
  %55 = tail call i64 @_ZN2v88internal7Isolate13ThrowInternalENS0_6ObjectEPNS0_15MessageLocationE(%"class.v8::internal::Isolate"* %0, i64 %54, %"class.v8::internal::MessageLocation"* null) #13
  br label %347

56:                                               ; preds = %43
  %57 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %58 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE9NewBigIntEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %57, i32 %45, i8 zeroext 0) #13
  %59 = load i64, i64* %58, align 8
  %60 = shl nuw i32 %45, 1
  %61 = add i64 %59, 3
  %62 = inttoptr i64 %61 to i32*
  store i32 %60, i32* %62, align 4
  %63 = icmp eq i64* %58, null
  br i1 %63, label %347, label %64

64:                                               ; preds = %56
  %65 = load i64, i64* %2, align 8
  %66 = shl i32 %10, 3
  %67 = add i32 %66, -8
  %68 = or i32 %67, 7
  %69 = sext i32 %68 to i64
  %70 = add i64 %65, %69
  %71 = inttoptr i64 %70 to i64*
  %72 = load i64, i64* %71, align 1
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %78, label %74

74:                                               ; preds = %64
  %75 = tail call i64 @llvm.ctlz.i64(i64 %72, i1 true) #13, !range !5
  %76 = trunc i64 %75 to i32
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %83, label %78

78:                                               ; preds = %74, %64
  %79 = phi i32 [ %76, %74 ], [ 64, %64 ]
  %80 = tail call i64* @_ZN2v88internal13MutableBigInt16SpecialLeftShiftEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEEiNS1_20SpecialLeftShiftModeE(%"class.v8::internal::Isolate"* %0, i64* %2, i32 %79, i32 0)
  %81 = icmp eq i64* %80, null
  br i1 %81, label %82, label %83, !prof !2

82:                                               ; preds = %78
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0)) #14
  unreachable

83:                                               ; preds = %78, %74
  %84 = phi i32 [ 0, %74 ], [ %79, %78 ]
  %85 = phi i64* [ %2, %74 ], [ %80, %78 ]
  %86 = tail call i64* @_ZN2v88internal13MutableBigInt16SpecialLeftShiftEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEEiNS1_20SpecialLeftShiftModeE(%"class.v8::internal::Isolate"* %0, i64* %1, i32 %84, i32 1)
  %87 = icmp eq i64* %86, null
  br i1 %87, label %347, label %88

88:                                               ; preds = %83
  %89 = ptrtoint i64* %86 to i64
  %90 = load i64, i64* %85, align 8
  %91 = add i64 %90, %69
  %92 = inttoptr i64 %91 to i64*
  %93 = load i64, i64* %92, align 1
  %94 = icmp sgt i32 %18, -1
  br i1 %94, label %95, label %294

95:                                               ; preds = %88
  %96 = add i32 %66, -16
  %97 = or i32 %96, 7
  %98 = sext i32 %97 to i64
  %99 = inttoptr i64 %44 to i64*
  %100 = zext i32 %11 to i64
  %101 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 6, i32 1, i32 3
  %102 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 6
  %103 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 7, i32 0, i64 32
  %104 = sext i32 %18 to i64
  br label %105

105:                                              ; preds = %95, %290
  %106 = phi i64 [ %104, %95 ], [ %292, %290 ]
  %107 = phi i64 [ 0, %95 ], [ %291, %290 ]
  %108 = load i64, i64* %86, align 8
  %109 = trunc i64 %106 to i32
  %110 = add i32 %10, %109
  %111 = shl i32 %110, 3
  %112 = or i32 %111, 7
  %113 = sext i32 %112 to i64
  %114 = add i64 %108, %113
  %115 = inttoptr i64 %114 to i64*
  %116 = load i64, i64* %115, align 1
  %117 = icmp eq i64 %116, %93
  br i1 %117, label %118, label %120

118:                                              ; preds = %105
  %119 = load i64, i64* %85, align 8
  br label %158

120:                                              ; preds = %105
  %121 = add i32 %111, -8
  %122 = or i32 %121, 7
  %123 = sext i32 %122 to i64
  %124 = add i64 %108, %123
  %125 = inttoptr i64 %124 to i64*
  %126 = load i64, i64* %125, align 1
  %127 = tail call { i64, i64 } asm "divq  $4", "={ax},={dx},{dx},{ax},rm,~{dirflag},~{fpsr},~{flags}"(i64 %116, i64 %126, i64 %93) #15, !srcloc !4
  %128 = extractvalue { i64, i64 } %127, 0
  %129 = extractvalue { i64, i64 } %127, 1
  %130 = load i64, i64* %85, align 8
  %131 = add i64 %130, %98
  %132 = inttoptr i64 %131 to i64*
  %133 = load i64, i64* %132, align 1
  %134 = add i32 %111, -16
  %135 = or i32 %134, 7
  %136 = sext i32 %135 to i64
  %137 = add i64 %108, %136
  %138 = inttoptr i64 %137 to i64*
  %139 = load i64, i64* %138, align 1
  %140 = zext i64 %133 to i128
  br label %141

141:                                              ; preds = %154, %120
  %142 = phi i64 [ %129, %120 ], [ %156, %154 ]
  %143 = phi i64 [ %128, %120 ], [ %155, %154 ]
  %144 = zext i64 %143 to i128
  %145 = mul nuw i128 %144, %140
  %146 = lshr i128 %145, 64
  %147 = trunc i128 %146 to i64
  %148 = icmp ult i64 %142, %147
  br i1 %148, label %154, label %149

149:                                              ; preds = %141
  %150 = trunc i128 %145 to i64
  %151 = icmp eq i64 %142, %147
  %152 = icmp ult i64 %139, %150
  %153 = and i1 %152, %151
  br i1 %153, label %154, label %158

154:                                              ; preds = %141, %149
  %155 = add i64 %143, -1
  %156 = add i64 %142, %93
  %157 = icmp ult i64 %156, %142
  br i1 %157, label %158, label %141

158:                                              ; preds = %154, %149, %118
  %159 = phi i64 [ %119, %118 ], [ %130, %149 ], [ %130, %154 ]
  %160 = phi i64 [ -1, %118 ], [ %155, %154 ], [ %143, %149 ]
  %161 = load i64, i64* %58, align 8
  tail call void @_ZN2v88internal13MutableBigInt19InternalMultiplyAddENS0_10BigIntBaseEmmiS1_(i64 %159, i64 %160, i64 0, i32 %11, i64 %161)
  %162 = load i64, i64* %86, align 8
  %163 = load i64, i64* %58, align 8
  %164 = add i64 %163, 3
  %165 = inttoptr i64 %164 to i32*
  %166 = load atomic i32, i32* %165 monotonic, align 4
  %167 = lshr i32 %166, 1
  %168 = and i32 %167, 1073741823
  %169 = icmp eq i32 %168, 0
  br i1 %169, label %267, label %170

170:                                              ; preds = %158
  %171 = zext i32 %168 to i64
  %172 = trunc i64 %106 to i32
  br label %173

173:                                              ; preds = %207, %170
  %174 = phi i64 [ %163, %170 ], [ %208, %207 ]
  %175 = phi i64 [ 0, %170 ], [ %205, %207 ]
  %176 = phi i64 [ 0, %170 ], [ %203, %207 ]
  %177 = trunc i64 %175 to i32
  %178 = add i32 %172, %177
  %179 = shl nsw i32 %178, 3
  %180 = or i32 %179, 7
  %181 = sext i32 %180 to i64
  %182 = add i64 %162, %181
  %183 = inttoptr i64 %182 to i64*
  %184 = load i64, i64* %183, align 1
  %185 = shl i64 %175, 3
  %186 = and i64 %185, 4294967288
  %187 = or i64 %186, 7
  %188 = add i64 %187, %174
  %189 = inttoptr i64 %188 to i64*
  %190 = load i64, i64* %189, align 1
  %191 = zext i64 %184 to i128
  %192 = zext i64 %190 to i128
  %193 = sub nsw i128 %191, %192
  %194 = lshr i128 %193, 64
  %195 = trunc i128 %194 to i64
  %196 = and i64 %195, 1
  %197 = and i128 %193, 18446744073709551615
  %198 = zext i64 %176 to i128
  %199 = sub nsw i128 %197, %198
  %200 = lshr i128 %199, 64
  %201 = trunc i128 %200 to i64
  %202 = and i64 %201, 1
  %203 = add nuw nsw i64 %202, %196
  %204 = trunc i128 %199 to i64
  store i64 %204, i64* %183, align 1
  %205 = add nuw nsw i64 %175, 1
  %206 = icmp eq i64 %205, %171
  br i1 %206, label %209, label %207

207:                                              ; preds = %173
  %208 = load i64, i64* %58, align 8
  br label %173

209:                                              ; preds = %173
  %210 = trunc i64 %106 to i32
  %211 = icmp eq i64 %203, 0
  br i1 %211, label %267, label %212

212:                                              ; preds = %209
  %213 = load i64, i64* %86, align 8
  %214 = load i64, i64* %85, align 8
  %215 = add i64 %214, 3
  %216 = inttoptr i64 %215 to i32*
  %217 = load atomic i32, i32* %216 monotonic, align 4
  %218 = lshr i32 %217, 1
  %219 = and i32 %218, 1073741823
  %220 = icmp eq i32 %219, 0
  br i1 %220, label %259, label %221

221:                                              ; preds = %212
  %222 = zext i32 %219 to i64
  br label %223

223:                                              ; preds = %255, %221
  %224 = phi i64 [ %214, %221 ], [ %256, %255 ]
  %225 = phi i64 [ 0, %221 ], [ %253, %255 ]
  %226 = phi i64 [ 0, %221 ], [ %251, %255 ]
  %227 = trunc i64 %225 to i32
  %228 = add i32 %210, %227
  %229 = shl nsw i32 %228, 3
  %230 = or i32 %229, 7
  %231 = sext i32 %230 to i64
  %232 = add i64 %213, %231
  %233 = inttoptr i64 %232 to i64*
  %234 = load i64, i64* %233, align 1
  %235 = shl i64 %225, 3
  %236 = and i64 %235, 4294967288
  %237 = or i64 %236, 7
  %238 = add i64 %237, %224
  %239 = inttoptr i64 %238 to i64*
  %240 = load i64, i64* %239, align 1
  %241 = zext i64 %234 to i128
  %242 = zext i64 %240 to i128
  %243 = add nuw nsw i128 %242, %241
  %244 = lshr i128 %243, 64
  %245 = trunc i128 %244 to i64
  %246 = and i128 %243, 18446744073709551615
  %247 = zext i64 %226 to i128
  %248 = add nuw nsw i128 %246, %247
  %249 = lshr i128 %248, 64
  %250 = trunc i128 %249 to i64
  %251 = add nuw nsw i64 %250, %245
  %252 = trunc i128 %248 to i64
  store i64 %252, i64* %233, align 1
  %253 = add nuw nsw i64 %225, 1
  %254 = icmp eq i64 %253, %222
  br i1 %254, label %257, label %255

255:                                              ; preds = %223
  %256 = load i64, i64* %85, align 8
  br label %223

257:                                              ; preds = %223
  %258 = load i64, i64* %86, align 8
  br label %259

259:                                              ; preds = %257, %212
  %260 = phi i64 [ %213, %212 ], [ %258, %257 ]
  %261 = phi i64 [ 0, %212 ], [ %251, %257 ]
  %262 = add i64 %260, %113
  %263 = inttoptr i64 %262 to i64*
  %264 = load i64, i64* %263, align 1
  %265 = add i64 %264, %261
  store i64 %265, i64* %263, align 1
  %266 = add i64 %160, -1
  br label %267

267:                                              ; preds = %158, %209, %259
  %268 = phi i64 [ %266, %259 ], [ %160, %209 ], [ %160, %158 ]
  br i1 %19, label %269, label %277

269:                                              ; preds = %267
  %270 = load i64, i64* %99, align 8
  %271 = trunc i64 %106 to i32
  %272 = shl nsw i32 %271, 3
  %273 = or i32 %272, 7
  %274 = sext i32 %273 to i64
  %275 = add i64 %270, %274
  %276 = inttoptr i64 %275 to i64*
  store i64 %268, i64* %276, align 1
  br label %277

277:                                              ; preds = %269, %267
  %278 = add i64 %107, %100
  %279 = icmp ugt i64 %278, 5000000
  br i1 %279, label %280, label %290

280:                                              ; preds = %277
  %281 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #13
  %282 = load atomic i64, i64* %101 monotonic, align 8
  %283 = icmp ult i64 %281, %282
  br i1 %283, label %284, label %290

284:                                              ; preds = %280
  %285 = tail call i64 @_ZN2v88internal10StackGuard16HandleInterruptsEv(%"class.v8::internal::StackGuard"* %102) #13
  %286 = load i64, i64* %103, align 8
  %287 = trunc i64 %285 to i32
  %288 = trunc i64 %286 to i32
  %289 = icmp eq i32 %287, %288
  br i1 %289, label %347, label %290

290:                                              ; preds = %280, %284, %277
  %291 = phi i64 [ %278, %277 ], [ 0, %284 ], [ 0, %280 ]
  %292 = add nsw i64 %106, -1
  %293 = icmp sgt i64 %106, 0
  br i1 %293, label %105, label %294

294:                                              ; preds = %290, %88
  br i1 %19, label %295, label %297

295:                                              ; preds = %294
  %296 = bitcast %"class.v8::internal::Handle.1129"* %3 to i64*
  store i64 %44, i64* %296, align 8
  br label %297

297:                                              ; preds = %295, %294
  %298 = icmp eq %"class.v8::internal::Handle.1129"* %4, null
  br i1 %298, label %347, label %299

299:                                              ; preds = %297
  %300 = load i64, i64* %86, align 8
  %301 = icmp eq i32 %84, 0
  br i1 %301, label %345, label %302

302:                                              ; preds = %299
  %303 = add i64 %300, 7
  %304 = inttoptr i64 %303 to i64*
  %305 = load i64, i64* %304, align 1
  %306 = zext i32 %84 to i64
  %307 = add i64 %300, 3
  %308 = inttoptr i64 %307 to i32*
  %309 = load atomic i32, i32* %308 monotonic, align 4
  %310 = lshr i32 %309, 1
  %311 = and i32 %310, 1073741823
  %312 = add nsw i32 %311, -1
  %313 = lshr i64 %305, %306
  %314 = icmp sgt i32 %312, 0
  br i1 %314, label %315, label %319

315:                                              ; preds = %302
  %316 = sub nsw i32 64, %84
  %317 = zext i32 %316 to i64
  %318 = zext i32 %312 to i64
  br label %326

319:                                              ; preds = %326, %302
  %320 = phi i64 [ %313, %302 ], [ %343, %326 ]
  %321 = shl nsw i32 %312, 3
  %322 = or i32 %321, 7
  %323 = sext i32 %322 to i64
  %324 = add i64 %300, %323
  %325 = inttoptr i64 %324 to i64*
  store i64 %320, i64* %325, align 1
  br label %345

326:                                              ; preds = %326, %315
  %327 = phi i64 [ 0, %315 ], [ %329, %326 ]
  %328 = phi i64 [ %313, %315 ], [ %343, %326 ]
  %329 = add nuw nsw i64 %327, 1
  %330 = shl i64 %329, 3
  %331 = and i64 %330, 4294967288
  %332 = or i64 %331, 7
  %333 = add i64 %332, %300
  %334 = inttoptr i64 %333 to i64*
  %335 = load i64, i64* %334, align 1
  %336 = shl i64 %335, %317
  %337 = or i64 %336, %328
  %338 = shl i64 %327, 3
  %339 = and i64 %338, 4294967288
  %340 = or i64 %339, 7
  %341 = add i64 %340, %300
  %342 = inttoptr i64 %341 to i64*
  store i64 %337, i64* %342, align 1
  %343 = lshr i64 %335, %306
  %344 = icmp eq i64 %329, %318
  br i1 %344, label %319, label %326

345:                                              ; preds = %299, %319
  %346 = bitcast %"class.v8::internal::Handle.1129"* %4 to i64*
  store i64 %89, i64* %346, align 8
  br label %347

347:                                              ; preds = %284, %56, %51, %345, %297, %83
  %348 = phi i1 [ true, %297 ], [ true, %345 ], [ false, %83 ], [ false, %51 ], [ false, %56 ], [ false, %284 ]
  ret i1 %348
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal6BigInt9RemainderEPNS0_7IsolateENS0_6HandleIS1_EES5_(%"class.v8::internal::Isolate"*, i64*, i64*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.v8::internal::Handle.1129", align 8
  %5 = load i64, i64* %2, align 8
  %6 = add i64 %5, 3
  %7 = inttoptr i64 %6 to i32*
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = and i32 %8, 2147483646
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %16

11:                                               ; preds = %3
  %12 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::Factory"*
  %13 = tail call i64* @_ZN2v88internal7Factory13NewRangeErrorENS0_15MessageTemplateENS0_6HandleINS0_6ObjectEEES5_S5_(%"class.v8::internal::Factory"* %12, i32 188, i64* null, i64* null, i64* null) #13
  %14 = load i64, i64* %13, align 8
  %15 = tail call i64 @_ZN2v88internal7Isolate13ThrowInternalENS0_6ObjectEPNS0_15MessageLocationE(%"class.v8::internal::Isolate"* %0, i64 %14, %"class.v8::internal::MessageLocation"* null) #13
  br label %159

16:                                               ; preds = %3
  %17 = load i64, i64* %1, align 8
  %18 = add i64 %17, 7
  %19 = inttoptr i64 %18 to i64*
  %20 = add i64 %17, 3
  %21 = inttoptr i64 %20 to i32*
  %22 = load atomic i32, i32* %21 monotonic, align 4
  %23 = lshr i32 %22, 1
  %24 = and i32 %23, 1073741823
  %25 = add i64 %5, 7
  %26 = inttoptr i64 %25 to i64*
  %27 = load atomic i32, i32* %7 monotonic, align 4
  %28 = lshr i32 %27, 1
  %29 = and i32 %28, 1073741823
  %30 = tail call i32 @_ZN2v86bigint7CompareENS0_6DigitsES1_(i64* %19, i32 %24, i64* %26, i32 %29) #13
  %31 = icmp slt i32 %30, 0
  br i1 %31, label %32, label %34

32:                                               ; preds = %16
  %33 = ptrtoint i64* %1 to i64
  br label %159

34:                                               ; preds = %16
  %35 = bitcast %"class.v8::internal::Handle.1129"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #13
  %36 = getelementptr inbounds %"class.v8::internal::Handle.1129", %"class.v8::internal::Handle.1129"* %4, i64 0, i32 0, i32 0
  store i64* null, i64** %36, align 8
  %37 = load i64, i64* %2, align 8
  %38 = add i64 %37, 3
  %39 = inttoptr i64 %38 to i32*
  %40 = load atomic i32, i32* %39 monotonic, align 4
  %41 = and i32 %40, 2147483646
  %42 = icmp eq i32 %41, 2
  br i1 %42, label %43, label %92

43:                                               ; preds = %34
  %44 = add i64 %37, 7
  %45 = inttoptr i64 %44 to i64*
  %46 = load i64, i64* %45, align 1
  %47 = icmp eq i64 %46, 1
  br i1 %47, label %48, label %51

48:                                               ; preds = %43
  %49 = tail call i64* @_ZN2v88internal13MutableBigInt4ZeroINS0_7IsolateEEENS0_6HandleINS0_6BigIntEEEPT_NS0_14AllocationTypeE(%"class.v8::internal::Isolate"* %0, i8 zeroext 0) #13
  %50 = ptrtoint i64* %49 to i64
  br label %157

51:                                               ; preds = %43
  %52 = load i64, i64* %1, align 8
  %53 = add i64 %52, 3
  %54 = inttoptr i64 %53 to i32*
  %55 = load atomic i32, i32* %54 monotonic, align 4
  %56 = lshr i32 %55, 1
  %57 = and i32 %56, 1073741823
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %77, label %59

59:                                               ; preds = %51
  %60 = zext i32 %57 to i64
  br label %61

61:                                               ; preds = %61, %59
  %62 = phi i64 [ 0, %59 ], [ %73, %61 ]
  %63 = phi i64 [ %60, %59 ], [ %64, %61 ]
  %64 = add nsw i64 %63, -1
  %65 = trunc i64 %64 to i32
  %66 = shl nsw i32 %65, 3
  %67 = or i32 %66, 7
  %68 = sext i32 %67 to i64
  %69 = add i64 %52, %68
  %70 = inttoptr i64 %69 to i64*
  %71 = load i64, i64* %70, align 1
  %72 = tail call { i64, i64 } asm "divq  $4", "={ax},={dx},{dx},{ax},rm,~{dirflag},~{fpsr},~{flags}"(i64 %62, i64 %71, i64 %46) #15, !srcloc !4
  %73 = extractvalue { i64, i64 } %72, 1
  %74 = icmp sgt i64 %64, 0
  br i1 %74, label %61, label %75

75:                                               ; preds = %61
  %76 = icmp eq i64 %73, 0
  br i1 %76, label %77, label %80

77:                                               ; preds = %51, %75
  %78 = tail call i64* @_ZN2v88internal13MutableBigInt4ZeroINS0_7IsolateEEENS0_6HandleINS0_6BigIntEEEPT_NS0_14AllocationTypeE(%"class.v8::internal::Isolate"* %0, i8 zeroext 0) #13
  %79 = ptrtoint i64* %78 to i64
  br label %157

80:                                               ; preds = %75
  %81 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %82 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE9NewBigIntEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %81, i32 1, i8 zeroext 0) #13
  %83 = load i64, i64* %82, align 8
  %84 = add i64 %83, 3
  %85 = inttoptr i64 %84 to i32*
  store i32 2, i32* %85, align 4
  %86 = icmp eq i64* %82, null
  br i1 %86, label %87, label %88, !prof !2

87:                                               ; preds = %80
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0)) #14
  unreachable

88:                                               ; preds = %80
  store i64* %82, i64** %36, align 8
  %89 = load i64, i64* %82, align 8
  %90 = add i64 %89, 7
  %91 = inttoptr i64 %90 to i64*
  store i64 %73, i64* %91, align 1
  br label %94

92:                                               ; preds = %34
  %93 = call zeroext i1 @_ZN2v88internal13MutableBigInt16AbsoluteDivLargeEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEES6_PNS4_IS1_EES8_(%"class.v8::internal::Isolate"* %0, i64* %1, i64* %2, %"class.v8::internal::Handle.1129"* null, %"class.v8::internal::Handle.1129"* nonnull %4)
  br i1 %93, label %94, label %157

94:                                               ; preds = %88, %92
  %95 = load i64*, i64** %36, align 8
  %96 = load i64, i64* %95, align 8
  %97 = load i64, i64* %1, align 8
  %98 = add i64 %97, 3
  %99 = inttoptr i64 %98 to i32*
  %100 = load atomic i32, i32* %99 monotonic, align 4
  %101 = and i32 %100, 1
  %102 = add i64 %96, 3
  %103 = inttoptr i64 %102 to i32*
  %104 = load atomic i32, i32* %103 monotonic, align 4
  %105 = and i32 %104, -2
  %106 = or i32 %105, %101
  store atomic volatile i32 %106, i32* %103 monotonic, align 4
  %107 = load i64*, i64** %36, align 8
  %108 = load i64, i64* %107, align 8
  %109 = add i64 %108, 3
  %110 = inttoptr i64 %109 to i32*
  %111 = load atomic i32, i32* %110 monotonic, align 4
  %112 = lshr i32 %111, 1
  %113 = and i32 %112, 1073741823
  %114 = zext i32 %113 to i64
  br label %115

115:                                              ; preds = %118, %94
  %116 = phi i64 [ %119, %118 ], [ %114, %94 ]
  %117 = icmp sgt i64 %116, 0
  br i1 %117, label %118, label %128

118:                                              ; preds = %115
  %119 = add nsw i64 %116, -1
  %120 = trunc i64 %119 to i32
  %121 = shl nsw i32 %120, 3
  %122 = or i32 %121, 7
  %123 = sext i32 %122 to i64
  %124 = add i64 %108, %123
  %125 = inttoptr i64 %124 to i64*
  %126 = load i64, i64* %125, align 1
  %127 = icmp eq i64 %126, 0
  br i1 %127, label %115, label %128

128:                                              ; preds = %118, %115
  %129 = trunc i64 %116 to i32
  %130 = sub nsw i32 %113, %129
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %155, label %132

132:                                              ; preds = %128
  %133 = and i64 %108, -262144
  %134 = or i64 %133, 16
  %135 = inttoptr i64 %134 to %"class.v8::internal::Heap"**
  %136 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %135, align 16
  %137 = call zeroext i1 @_ZN2v88internal4Heap13IsLargeObjectENS0_10HeapObjectE(i64 %108) #13
  br i1 %137, label %146, label %138

138:                                              ; preds = %132
  %139 = shl i32 %129, 3
  %140 = add nsw i32 %139, 8
  %141 = add i64 %108, -1
  %142 = sext i32 %140 to i64
  %143 = add i64 %141, %142
  %144 = shl nsw i32 %130, 3
  %145 = call i64 @_ZN2v88internal4Heap20CreateFillerObjectAtEmiNS0_18ClearRecordedSlotsE(%"class.v8::internal::Heap"* %136, i64 %143, i32 %144, i32 1) #13
  br label %146

146:                                              ; preds = %138, %132
  %147 = load atomic i32, i32* %110 monotonic, align 4
  %148 = and i32 %147, -2147483647
  %149 = shl i32 %129, 1
  %150 = or i32 %148, %149
  store atomic volatile i32 %150, i32* %110 release, align 4
  %151 = icmp eq i32 %129, 0
  br i1 %151, label %152, label %155

152:                                              ; preds = %146
  %153 = load atomic i32, i32* %110 monotonic, align 4
  %154 = and i32 %153, -2
  store atomic volatile i32 %154, i32* %110 monotonic, align 4
  br label %155

155:                                              ; preds = %128, %146, %152
  %156 = ptrtoint i64* %107 to i64
  br label %157

157:                                              ; preds = %77, %48, %92, %155
  %158 = phi i64 [ %156, %155 ], [ 0, %92 ], [ %79, %77 ], [ %50, %48 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #13
  br label %159

159:                                              ; preds = %157, %32, %11
  %160 = phi i64 [ 0, %11 ], [ %33, %32 ], [ %158, %157 ]
  %161 = inttoptr i64 %160 to i64*
  ret i64* %161
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal6BigInt3AddEPNS0_7IsolateENS0_6HandleIS1_EES5_(%"class.v8::internal::Isolate"*, i64*, i64*) local_unnamed_addr #0 align 2 {
  %4 = load i64, i64* %1, align 8
  %5 = add i64 %4, 3
  %6 = inttoptr i64 %5 to i32*
  %7 = load atomic i32, i32* %6 monotonic, align 4
  %8 = and i32 %7, 1
  %9 = icmp ne i32 %8, 0
  %10 = load i64, i64* %2, align 8
  %11 = add i64 %10, 3
  %12 = inttoptr i64 %11 to i32*
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 1
  %15 = icmp ne i32 %14, 0
  %16 = xor i1 %9, %15
  br i1 %16, label %19, label %17

17:                                               ; preds = %3
  %18 = tail call i64* @_ZN2v88internal13MutableBigInt11AbsoluteAddEPNS0_7IsolateENS0_6HandleINS0_6BigIntEEES6_b(%"class.v8::internal::Isolate"* %0, i64* %1, i64* %2, i1 zeroext %9)
  br label %37

19:                                               ; preds = %3
  %20 = add i64 %4, 7
  %21 = inttoptr i64 %20 to i64*
  %22 = load atomic i32, i32* %6 monotonic, align 4
  %23 = lshr i32 %22, 1
  %24 = and i32 %23, 1073741823
  %25 = add i64 %10, 7
  %26 = inttoptr i64 %25 to i64*
  %27 = load atomic i32, i32* %12 monotonic, align 4
  %28 = lshr i32 %27, 1
  %29 = and i32 %28, 1073741823
  %30 = tail call i32 @_ZN2v86bigint7CompareENS0_6DigitsES1_(i64* %21, i32 %24, i64* %26, i32 %29) #13
  %31 = icmp sgt i32 %30, -1
  br i1 %31, label %32, label %34

32:                                               ; preds = %19
  %33 = tail call i64* @_ZN2v88internal13MutableBigInt11AbsoluteSubEPNS0_7IsolateENS0_6HandleINS0_6BigIntEEES6_b(%"class.v8::internal::Isolate"* %0, i64* %1, i64* %2, i1 zeroext %9)
  br label %37

34:                                               ; preds = %19
  %35 = xor i1 %9, true
  %36 = tail call i64* @_ZN2v88internal13MutableBigInt11AbsoluteSubEPNS0_7IsolateENS0_6HandleINS0_6BigIntEEES6_b(%"class.v8::internal::Isolate"* %0, i64* %2, i64* %1, i1 zeroext %35)
  br label %37

37:                                               ; preds = %34, %32, %17
  %38 = phi i64* [ %33, %32 ], [ %36, %34 ], [ %18, %17 ]
  ret i64* %38
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal13MutableBigInt11AbsoluteAddEPNS0_7IsolateENS0_6HandleINS0_6BigIntEEES6_b(%"class.v8::internal::Isolate"*, i64*, i64*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %5 = load i64, i64* %1, align 8
  %6 = add i64 %5, 3
  %7 = inttoptr i64 %6 to i32*
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = lshr i32 %8, 1
  %10 = and i32 %9, 1073741823
  %11 = load i64, i64* %2, align 8
  %12 = add i64 %11, 3
  %13 = inttoptr i64 %12 to i32*
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = lshr i32 %14, 1
  %16 = and i32 %15, 1073741823
  %17 = icmp ult i32 %10, %16
  br i1 %17, label %18, label %21

18:                                               ; preds = %4
  %19 = tail call i64* @_ZN2v88internal13MutableBigInt11AbsoluteAddEPNS0_7IsolateENS0_6HandleINS0_6BigIntEEES6_b(%"class.v8::internal::Isolate"* %0, i64* %2, i64* %1, i1 zeroext %3)
  %20 = ptrtoint i64* %19 to i64
  br label %206

21:                                               ; preds = %4
  %22 = load atomic i32, i32* %7 monotonic, align 4
  %23 = and i32 %22, 2147483646
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %21
  %26 = ptrtoint i64* %1 to i64
  br label %206

27:                                               ; preds = %21
  %28 = load atomic i32, i32* %13 monotonic, align 4
  %29 = and i32 %28, 2147483646
  %30 = icmp eq i32 %29, 0
  %31 = load atomic i32, i32* %7 monotonic, align 4
  br i1 %30, label %32, label %41

32:                                               ; preds = %27
  %33 = and i32 %31, 1
  %34 = icmp ne i32 %33, 0
  %35 = xor i1 %34, %3
  br i1 %35, label %36, label %38

36:                                               ; preds = %32
  %37 = tail call i64* @_ZN2v88internal6BigInt10UnaryMinusEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"* %0, i64* %1)
  br label %38

38:                                               ; preds = %32, %36
  %39 = phi i64* [ %37, %36 ], [ %1, %32 ]
  %40 = ptrtoint i64* %39 to i64
  br label %206

41:                                               ; preds = %27
  %42 = lshr i32 %31, 1
  %43 = and i32 %42, 1073741823
  %44 = add nuw nsw i32 %43, 1
  %45 = icmp ugt i32 %43, 16777215
  br i1 %45, label %46, label %55

46:                                               ; preds = %41
  %47 = load i8, i8* @_ZN2v88internal36FLAG_correctness_fuzzer_suppressionsE, align 1, !range !3
  %48 = icmp eq i8 %47, 0
  br i1 %48, label %50, label %49

49:                                               ; preds = %46
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.6, i64 0, i64 0)) #14
  unreachable

50:                                               ; preds = %46
  %51 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::Factory"*
  %52 = tail call i64* @_ZN2v88internal7Factory13NewRangeErrorENS0_15MessageTemplateENS0_6HandleINS0_6ObjectEEES5_S5_(%"class.v8::internal::Factory"* %51, i32 190, i64* null, i64* null, i64* null) #13
  %53 = load i64, i64* %52, align 8
  %54 = tail call i64 @_ZN2v88internal7Isolate13ThrowInternalENS0_6ObjectEPNS0_15MessageLocationE(%"class.v8::internal::Isolate"* %0, i64 %53, %"class.v8::internal::MessageLocation"* null) #13
  br label %206

55:                                               ; preds = %41
  %56 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %57 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE9NewBigIntEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %56, i32 %44, i8 zeroext 0) #13
  %58 = load i64, i64* %57, align 8
  %59 = shl nuw i32 %44, 1
  %60 = add i64 %58, 3
  %61 = inttoptr i64 %60 to i32*
  store i32 %59, i32* %61, align 4
  %62 = icmp eq i64* %57, null
  br i1 %62, label %206, label %63

63:                                               ; preds = %55
  %64 = ptrtoint i64* %57 to i64
  %65 = load i64, i64* %57, align 8
  %66 = load i64, i64* %1, align 8
  %67 = load i64, i64* %2, align 8
  %68 = add i64 %67, 3
  %69 = inttoptr i64 %68 to i32*
  %70 = load atomic i32, i32* %69 monotonic, align 4
  %71 = and i32 %70, 2147483646
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %75, label %89

73:                                               ; preds = %89
  %74 = trunc i64 %115 to i32
  br label %75

75:                                               ; preds = %73, %63
  %76 = phi i32 [ 0, %63 ], [ %74, %73 ]
  %77 = phi i64 [ 0, %63 ], [ %111, %73 ]
  %78 = add i64 %66, 3
  %79 = inttoptr i64 %78 to i32*
  %80 = load atomic i32, i32* %79 monotonic, align 4
  %81 = lshr i32 %80, 1
  %82 = and i32 %81, 1073741823
  %83 = icmp ult i32 %76, %82
  %84 = shl nsw i32 %76, 3
  %85 = or i32 %84, 7
  %86 = zext i32 %85 to i64
  br i1 %83, label %87, label %147

87:                                               ; preds = %75
  %88 = zext i32 %76 to i64
  br label %121

89:                                               ; preds = %63, %89
  %90 = phi i64 [ %115, %89 ], [ 0, %63 ]
  %91 = phi i64 [ %111, %89 ], [ 0, %63 ]
  %92 = shl i64 %90, 3
  %93 = and i64 %92, 4294967288
  %94 = or i64 %93, 7
  %95 = add i64 %94, %66
  %96 = inttoptr i64 %95 to i64*
  %97 = load i64, i64* %96, align 1
  %98 = add i64 %94, %67
  %99 = inttoptr i64 %98 to i64*
  %100 = load i64, i64* %99, align 1
  %101 = zext i64 %97 to i128
  %102 = zext i64 %100 to i128
  %103 = add nuw nsw i128 %102, %101
  %104 = lshr i128 %103, 64
  %105 = trunc i128 %104 to i64
  %106 = and i128 %103, 18446744073709551615
  %107 = zext i64 %91 to i128
  %108 = add nuw nsw i128 %106, %107
  %109 = lshr i128 %108, 64
  %110 = trunc i128 %109 to i64
  %111 = add nuw nsw i64 %110, %105
  %112 = trunc i128 %108 to i64
  %113 = add i64 %94, %65
  %114 = inttoptr i64 %113 to i64*
  store i64 %112, i64* %114, align 1
  %115 = add nuw nsw i64 %90, 1
  %116 = load atomic i32, i32* %69 monotonic, align 4
  %117 = lshr i32 %116, 1
  %118 = and i32 %117, 1073741823
  %119 = zext i32 %118 to i64
  %120 = icmp ult i64 %115, %119
  br i1 %120, label %89, label %73

121:                                              ; preds = %121, %87
  %122 = phi i64 [ %88, %87 ], [ %136, %121 ]
  %123 = phi i64 [ %86, %87 ], [ %144, %121 ]
  %124 = phi i64 [ %77, %87 ], [ %132, %121 ]
  %125 = add i64 %123, %66
  %126 = inttoptr i64 %125 to i64*
  %127 = load i64, i64* %126, align 1
  %128 = zext i64 %127 to i128
  %129 = zext i64 %124 to i128
  %130 = add nuw nsw i128 %128, %129
  %131 = lshr i128 %130, 64
  %132 = trunc i128 %131 to i64
  %133 = trunc i128 %130 to i64
  %134 = add i64 %123, %65
  %135 = inttoptr i64 %134 to i64*
  store i64 %133, i64* %135, align 1
  %136 = add nuw nsw i64 %122, 1
  %137 = load atomic i32, i32* %79 monotonic, align 4
  %138 = lshr i32 %137, 1
  %139 = and i32 %138, 1073741823
  %140 = zext i32 %139 to i64
  %141 = icmp ult i64 %136, %140
  %142 = shl i64 %136, 3
  %143 = and i64 %142, 4294967288
  %144 = or i64 %143, 7
  br i1 %141, label %121, label %145

145:                                              ; preds = %121
  %146 = trunc i128 %131 to i64
  br label %147

147:                                              ; preds = %145, %75
  %148 = phi i64 [ %77, %75 ], [ %146, %145 ]
  %149 = phi i64 [ %86, %75 ], [ %144, %145 ]
  %150 = add i64 %149, %65
  %151 = inttoptr i64 %150 to i64*
  store i64 %148, i64* %151, align 1
  %152 = load i64, i64* %57, align 8
  %153 = add i64 %152, 3
  %154 = inttoptr i64 %153 to i32*
  %155 = load atomic i32, i32* %154 monotonic, align 4
  %156 = and i32 %155, -2
  %157 = zext i1 %3 to i32
  %158 = or i32 %156, %157
  store atomic volatile i32 %158, i32* %154 monotonic, align 4
  %159 = load i64, i64* %57, align 8
  %160 = add i64 %159, 3
  %161 = inttoptr i64 %160 to i32*
  %162 = load atomic i32, i32* %161 monotonic, align 4
  %163 = lshr i32 %162, 1
  %164 = and i32 %163, 1073741823
  %165 = zext i32 %164 to i64
  br label %166

166:                                              ; preds = %169, %147
  %167 = phi i64 [ %170, %169 ], [ %165, %147 ]
  %168 = icmp sgt i64 %167, 0
  br i1 %168, label %169, label %179

169:                                              ; preds = %166
  %170 = add nsw i64 %167, -1
  %171 = trunc i64 %170 to i32
  %172 = shl nsw i32 %171, 3
  %173 = or i32 %172, 7
  %174 = sext i32 %173 to i64
  %175 = add i64 %159, %174
  %176 = inttoptr i64 %175 to i64*
  %177 = load i64, i64* %176, align 1
  %178 = icmp eq i64 %177, 0
  br i1 %178, label %166, label %179

179:                                              ; preds = %169, %166
  %180 = trunc i64 %167 to i32
  %181 = sub nsw i32 %164, %180
  %182 = icmp eq i32 %181, 0
  br i1 %182, label %206, label %183

183:                                              ; preds = %179
  %184 = and i64 %159, -262144
  %185 = or i64 %184, 16
  %186 = inttoptr i64 %185 to %"class.v8::internal::Heap"**
  %187 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %186, align 16
  %188 = tail call zeroext i1 @_ZN2v88internal4Heap13IsLargeObjectENS0_10HeapObjectE(i64 %159) #13
  br i1 %188, label %197, label %189

189:                                              ; preds = %183
  %190 = shl i32 %180, 3
  %191 = add nsw i32 %190, 8
  %192 = add i64 %159, -1
  %193 = sext i32 %191 to i64
  %194 = add i64 %192, %193
  %195 = shl nsw i32 %181, 3
  %196 = tail call i64 @_ZN2v88internal4Heap20CreateFillerObjectAtEmiNS0_18ClearRecordedSlotsE(%"class.v8::internal::Heap"* %187, i64 %194, i32 %195, i32 1) #13
  br label %197

197:                                              ; preds = %189, %183
  %198 = load atomic i32, i32* %161 monotonic, align 4
  %199 = and i32 %198, -2147483647
  %200 = shl i32 %180, 1
  %201 = or i32 %199, %200
  store atomic volatile i32 %201, i32* %161 release, align 4
  %202 = icmp eq i32 %180, 0
  br i1 %202, label %203, label %206

203:                                              ; preds = %197
  %204 = load atomic i32, i32* %161 monotonic, align 4
  %205 = and i32 %204, -2
  store atomic volatile i32 %205, i32* %161 monotonic, align 4
  br label %206

206:                                              ; preds = %50, %55, %179, %197, %203, %38, %25, %18
  %207 = phi i64 [ %20, %18 ], [ %26, %25 ], [ %40, %38 ], [ 0, %50 ], [ 0, %55 ], [ %64, %179 ], [ %64, %197 ], [ %64, %203 ]
  %208 = inttoptr i64 %207 to i64*
  ret i64* %208
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal13MutableBigInt11AbsoluteSubEPNS0_7IsolateENS0_6HandleINS0_6BigIntEEES6_b(%"class.v8::internal::Isolate"*, i64*, i64*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %5 = load i64, i64* %1, align 8
  %6 = add i64 %5, 3
  %7 = inttoptr i64 %6 to i32*
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = and i32 %8, 2147483646
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %182, label %11

11:                                               ; preds = %4
  %12 = load i64, i64* %2, align 8
  %13 = add i64 %12, 3
  %14 = inttoptr i64 %13 to i32*
  %15 = load atomic i32, i32* %14 monotonic, align 4
  %16 = and i32 %15, 2147483646
  %17 = icmp eq i32 %16, 0
  %18 = load atomic i32, i32* %7 monotonic, align 4
  br i1 %17, label %19, label %25

19:                                               ; preds = %11
  %20 = and i32 %18, 1
  %21 = icmp ne i32 %20, 0
  %22 = xor i1 %21, %3
  br i1 %22, label %23, label %182

23:                                               ; preds = %19
  %24 = tail call i64* @_ZN2v88internal6BigInt10UnaryMinusEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"* %0, i64* %1)
  br label %182

25:                                               ; preds = %11
  %26 = lshr i32 %18, 1
  %27 = and i32 %26, 1073741823
  %28 = icmp ugt i32 %27, 16777216
  br i1 %28, label %29, label %38

29:                                               ; preds = %25
  %30 = load i8, i8* @_ZN2v88internal36FLAG_correctness_fuzzer_suppressionsE, align 1, !range !3
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %33, label %32

32:                                               ; preds = %29
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.6, i64 0, i64 0)) #14
  unreachable

33:                                               ; preds = %29
  %34 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::Factory"*
  %35 = tail call i64* @_ZN2v88internal7Factory13NewRangeErrorENS0_15MessageTemplateENS0_6HandleINS0_6ObjectEEES5_S5_(%"class.v8::internal::Factory"* %34, i32 190, i64* null, i64* null, i64* null) #13
  %36 = load i64, i64* %35, align 8
  %37 = tail call i64 @_ZN2v88internal7Isolate13ThrowInternalENS0_6ObjectEPNS0_15MessageLocationE(%"class.v8::internal::Isolate"* %0, i64 %36, %"class.v8::internal::MessageLocation"* null) #13
  br label %46

38:                                               ; preds = %25
  %39 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %40 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE9NewBigIntEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %39, i32 %27, i8 zeroext 0) #13
  %41 = load i64, i64* %40, align 8
  %42 = shl nuw nsw i32 %27, 1
  %43 = add i64 %41, 3
  %44 = inttoptr i64 %43 to i32*
  store i32 %42, i32* %44, align 4
  %45 = icmp eq i64* %40, null
  br i1 %45, label %46, label %47, !prof !2

46:                                               ; preds = %33, %38
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0)) #14
  unreachable

47:                                               ; preds = %38
  %48 = load i64, i64* %40, align 8
  %49 = load i64, i64* %1, align 8
  %50 = load i64, i64* %2, align 8
  %51 = add i64 %50, 3
  %52 = inttoptr i64 %51 to i32*
  %53 = load atomic i32, i32* %52 monotonic, align 4
  %54 = and i32 %53, 2147483646
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %58, label %69

56:                                               ; preds = %69
  %57 = trunc i64 %97 to i32
  br label %58

58:                                               ; preds = %56, %47
  %59 = phi i32 [ 0, %47 ], [ %57, %56 ]
  %60 = phi i64 [ 0, %47 ], [ %93, %56 ]
  %61 = add i64 %49, 3
  %62 = inttoptr i64 %61 to i32*
  %63 = load atomic i32, i32* %62 monotonic, align 4
  %64 = lshr i32 %63, 1
  %65 = and i32 %64, 1073741823
  %66 = icmp ult i32 %59, %65
  br i1 %66, label %67, label %127

67:                                               ; preds = %58
  %68 = zext i32 %59 to i64
  br label %103

69:                                               ; preds = %47, %69
  %70 = phi i64 [ %97, %69 ], [ 0, %47 ]
  %71 = phi i64 [ %93, %69 ], [ 0, %47 ]
  %72 = shl i64 %70, 3
  %73 = and i64 %72, 4294967288
  %74 = or i64 %73, 7
  %75 = add i64 %74, %49
  %76 = inttoptr i64 %75 to i64*
  %77 = load i64, i64* %76, align 1
  %78 = add i64 %74, %50
  %79 = inttoptr i64 %78 to i64*
  %80 = load i64, i64* %79, align 1
  %81 = zext i64 %77 to i128
  %82 = zext i64 %80 to i128
  %83 = sub nsw i128 %81, %82
  %84 = lshr i128 %83, 64
  %85 = trunc i128 %84 to i64
  %86 = and i64 %85, 1
  %87 = and i128 %83, 18446744073709551615
  %88 = zext i64 %71 to i128
  %89 = sub nsw i128 %87, %88
  %90 = lshr i128 %89, 64
  %91 = trunc i128 %90 to i64
  %92 = and i64 %91, 1
  %93 = add nuw nsw i64 %92, %86
  %94 = trunc i128 %89 to i64
  %95 = add i64 %74, %48
  %96 = inttoptr i64 %95 to i64*
  store i64 %94, i64* %96, align 1
  %97 = add nuw nsw i64 %70, 1
  %98 = load atomic i32, i32* %52 monotonic, align 4
  %99 = lshr i32 %98, 1
  %100 = and i32 %99, 1073741823
  %101 = zext i32 %100 to i64
  %102 = icmp ult i64 %97, %101
  br i1 %102, label %69, label %56

103:                                              ; preds = %103, %67
  %104 = phi i64 [ %68, %67 ], [ %121, %103 ]
  %105 = phi i64 [ %60, %67 ], [ %117, %103 ]
  %106 = shl i64 %104, 3
  %107 = and i64 %106, 4294967288
  %108 = or i64 %107, 7
  %109 = add i64 %108, %49
  %110 = inttoptr i64 %109 to i64*
  %111 = load i64, i64* %110, align 1
  %112 = zext i64 %111 to i128
  %113 = zext i64 %105 to i128
  %114 = sub nsw i128 %112, %113
  %115 = lshr i128 %114, 64
  %116 = trunc i128 %115 to i64
  %117 = and i64 %116, 1
  %118 = trunc i128 %114 to i64
  %119 = add i64 %108, %48
  %120 = inttoptr i64 %119 to i64*
  store i64 %118, i64* %120, align 1
  %121 = add nuw nsw i64 %104, 1
  %122 = load atomic i32, i32* %62 monotonic, align 4
  %123 = lshr i32 %122, 1
  %124 = and i32 %123, 1073741823
  %125 = zext i32 %124 to i64
  %126 = icmp ult i64 %121, %125
  br i1 %126, label %103, label %127

127:                                              ; preds = %103, %58
  %128 = load i64, i64* %40, align 8
  %129 = add i64 %128, 3
  %130 = inttoptr i64 %129 to i32*
  %131 = load atomic i32, i32* %130 monotonic, align 4
  %132 = and i32 %131, -2
  %133 = zext i1 %3 to i32
  %134 = or i32 %132, %133
  store atomic volatile i32 %134, i32* %130 monotonic, align 4
  %135 = load i64, i64* %40, align 8
  %136 = add i64 %135, 3
  %137 = inttoptr i64 %136 to i32*
  %138 = load atomic i32, i32* %137 monotonic, align 4
  %139 = lshr i32 %138, 1
  %140 = and i32 %139, 1073741823
  %141 = zext i32 %140 to i64
  br label %142

142:                                              ; preds = %145, %127
  %143 = phi i64 [ %146, %145 ], [ %141, %127 ]
  %144 = icmp sgt i64 %143, 0
  br i1 %144, label %145, label %155

145:                                              ; preds = %142
  %146 = add nsw i64 %143, -1
  %147 = trunc i64 %146 to i32
  %148 = shl nsw i32 %147, 3
  %149 = or i32 %148, 7
  %150 = sext i32 %149 to i64
  %151 = add i64 %135, %150
  %152 = inttoptr i64 %151 to i64*
  %153 = load i64, i64* %152, align 1
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %142, label %155

155:                                              ; preds = %145, %142
  %156 = trunc i64 %143 to i32
  %157 = sub nsw i32 %140, %156
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %182, label %159

159:                                              ; preds = %155
  %160 = and i64 %135, -262144
  %161 = or i64 %160, 16
  %162 = inttoptr i64 %161 to %"class.v8::internal::Heap"**
  %163 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %162, align 16
  %164 = tail call zeroext i1 @_ZN2v88internal4Heap13IsLargeObjectENS0_10HeapObjectE(i64 %135) #13
  br i1 %164, label %173, label %165

165:                                              ; preds = %159
  %166 = shl i32 %156, 3
  %167 = add nsw i32 %166, 8
  %168 = add i64 %135, -1
  %169 = sext i32 %167 to i64
  %170 = add i64 %168, %169
  %171 = shl nsw i32 %157, 3
  %172 = tail call i64 @_ZN2v88internal4Heap20CreateFillerObjectAtEmiNS0_18ClearRecordedSlotsE(%"class.v8::internal::Heap"* %163, i64 %170, i32 %171, i32 1) #13
  br label %173

173:                                              ; preds = %165, %159
  %174 = load atomic i32, i32* %137 monotonic, align 4
  %175 = and i32 %174, -2147483647
  %176 = shl i32 %156, 1
  %177 = or i32 %175, %176
  store atomic volatile i32 %177, i32* %137 release, align 4
  %178 = icmp eq i32 %156, 0
  br i1 %178, label %179, label %182

179:                                              ; preds = %173
  %180 = load atomic i32, i32* %137 monotonic, align 4
  %181 = and i32 %180, -2
  store atomic volatile i32 %181, i32* %137 monotonic, align 4
  br label %182

182:                                              ; preds = %179, %173, %155, %23, %19, %4
  %183 = phi i64* [ %1, %4 ], [ %24, %23 ], [ %1, %19 ], [ %40, %155 ], [ %40, %173 ], [ %40, %179 ]
  ret i64* %183
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal6BigInt8SubtractEPNS0_7IsolateENS0_6HandleIS1_EES5_(%"class.v8::internal::Isolate"*, i64*, i64*) local_unnamed_addr #0 align 2 {
  %4 = load i64, i64* %1, align 8
  %5 = add i64 %4, 3
  %6 = inttoptr i64 %5 to i32*
  %7 = load atomic i32, i32* %6 monotonic, align 4
  %8 = and i32 %7, 1
  %9 = icmp ne i32 %8, 0
  %10 = load i64, i64* %2, align 8
  %11 = add i64 %10, 3
  %12 = inttoptr i64 %11 to i32*
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 1
  %15 = icmp ne i32 %14, 0
  %16 = xor i1 %9, %15
  br i1 %16, label %17, label %19

17:                                               ; preds = %3
  %18 = tail call i64* @_ZN2v88internal13MutableBigInt11AbsoluteAddEPNS0_7IsolateENS0_6HandleINS0_6BigIntEEES6_b(%"class.v8::internal::Isolate"* %0, i64* %1, i64* %2, i1 zeroext %9)
  br label %37

19:                                               ; preds = %3
  %20 = add i64 %4, 7
  %21 = inttoptr i64 %20 to i64*
  %22 = load atomic i32, i32* %6 monotonic, align 4
  %23 = lshr i32 %22, 1
  %24 = and i32 %23, 1073741823
  %25 = add i64 %10, 7
  %26 = inttoptr i64 %25 to i64*
  %27 = load atomic i32, i32* %12 monotonic, align 4
  %28 = lshr i32 %27, 1
  %29 = and i32 %28, 1073741823
  %30 = tail call i32 @_ZN2v86bigint7CompareENS0_6DigitsES1_(i64* %21, i32 %24, i64* %26, i32 %29) #13
  %31 = icmp sgt i32 %30, -1
  br i1 %31, label %32, label %34

32:                                               ; preds = %19
  %33 = tail call i64* @_ZN2v88internal13MutableBigInt11AbsoluteSubEPNS0_7IsolateENS0_6HandleINS0_6BigIntEEES6_b(%"class.v8::internal::Isolate"* %0, i64* %1, i64* %2, i1 zeroext %9)
  br label %37

34:                                               ; preds = %19
  %35 = xor i1 %9, true
  %36 = tail call i64* @_ZN2v88internal13MutableBigInt11AbsoluteSubEPNS0_7IsolateENS0_6HandleINS0_6BigIntEEES6_b(%"class.v8::internal::Isolate"* %0, i64* %2, i64* %1, i1 zeroext %35)
  br label %37

37:                                               ; preds = %34, %32, %17
  %38 = phi i64* [ %18, %17 ], [ %33, %32 ], [ %36, %34 ]
  ret i64* %38
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal6BigInt9LeftShiftEPNS0_7IsolateENS0_6HandleIS1_EES5_(%"class.v8::internal::Isolate"*, i64*, i64*) local_unnamed_addr #0 align 2 {
  %4 = load i64, i64* %2, align 8
  %5 = add i64 %4, 3
  %6 = inttoptr i64 %5 to i32*
  %7 = load atomic i32, i32* %6 monotonic, align 4
  %8 = and i32 %7, 2147483646
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %25, label %10

10:                                               ; preds = %3
  %11 = load i64, i64* %1, align 8
  %12 = add i64 %11, 3
  %13 = inttoptr i64 %12 to i32*
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = and i32 %14, 2147483646
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %25, label %17

17:                                               ; preds = %10
  %18 = load atomic i32, i32* %6 monotonic, align 4
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %23, label %21

21:                                               ; preds = %17
  %22 = tail call i64* @_ZN2v88internal13MutableBigInt20RightShiftByAbsoluteEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEES6_(%"class.v8::internal::Isolate"* %0, i64* %1, i64* %2)
  br label %25

23:                                               ; preds = %17
  %24 = tail call i64* @_ZN2v88internal13MutableBigInt19LeftShiftByAbsoluteEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEES6_(%"class.v8::internal::Isolate"* %0, i64* %1, i64* %2)
  br label %25

25:                                               ; preds = %10, %3, %23, %21
  %26 = phi i64* [ %22, %21 ], [ %24, %23 ], [ %1, %3 ], [ %1, %10 ]
  ret i64* %26
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal13MutableBigInt20RightShiftByAbsoluteEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEES6_(%"class.v8::internal::Isolate"*, i64*, i64* nocapture readonly) local_unnamed_addr #0 align 2 {
  %4 = load i64, i64* %1, align 8
  %5 = add i64 %4, 3
  %6 = inttoptr i64 %5 to i32*
  %7 = load atomic i32, i32* %6 monotonic, align 4
  %8 = lshr i32 %7, 1
  %9 = and i32 %8, 1073741823
  %10 = load atomic i32, i32* %6 monotonic, align 4
  %11 = and i32 %10, 1
  %12 = icmp ne i32 %11, 0
  %13 = load i64, i64* %2, align 8
  %14 = add i64 %13, 3
  %15 = inttoptr i64 %14 to i32*
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = and i32 %16, 2147483644
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %24

19:                                               ; preds = %3
  %20 = add i64 %13, 7
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21, align 1
  %23 = icmp ugt i64 %22, 1073741824
  br i1 %23, label %24, label %29

24:                                               ; preds = %3, %19
  br i1 %12, label %25, label %27

25:                                               ; preds = %24
  %26 = tail call i64* @_ZN2v88internal13MutableBigInt10NewFromIntEPNS0_7IsolateEi(%"class.v8::internal::Isolate"* %0, i32 -1) #13
  br label %255

27:                                               ; preds = %24
  %28 = tail call i64* @_ZN2v88internal13MutableBigInt4ZeroINS0_7IsolateEEENS0_6HandleINS0_6BigIntEEEPT_NS0_14AllocationTypeE(%"class.v8::internal::Isolate"* %0, i8 zeroext 0) #13
  br label %255

29:                                               ; preds = %19
  %30 = lshr i64 %22, 6
  %31 = trunc i64 %30 to i32
  %32 = trunc i64 %22 to i32
  %33 = and i32 %32, 63
  %34 = sub nsw i32 %9, %31
  %35 = icmp slt i32 %34, 1
  br i1 %35, label %36, label %41

36:                                               ; preds = %29
  br i1 %12, label %37, label %39

37:                                               ; preds = %36
  %38 = tail call i64* @_ZN2v88internal13MutableBigInt10NewFromIntEPNS0_7IsolateEi(%"class.v8::internal::Isolate"* %0, i32 -1) #13
  br label %255

39:                                               ; preds = %36
  %40 = tail call i64* @_ZN2v88internal13MutableBigInt4ZeroINS0_7IsolateEEENS0_6HandleINS0_6BigIntEEEPT_NS0_14AllocationTypeE(%"class.v8::internal::Isolate"* %0, i8 zeroext 0) #13
  br label %255

41:                                               ; preds = %29
  br i1 %12, label %42, label %70

42:                                               ; preds = %41
  %43 = zext i32 %33 to i64
  %44 = shl nsw i64 -1, %43
  %45 = xor i64 %44, -1
  %46 = shl i64 %30, 35
  %47 = ashr exact i64 %46, 32
  %48 = or i64 %47, 7
  %49 = add i64 %4, %48
  %50 = inttoptr i64 %49 to i64*
  %51 = load i64, i64* %50, align 1
  %52 = and i64 %51, %45
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %54, label %72

54:                                               ; preds = %42
  %55 = icmp sgt i32 %31, 0
  br i1 %55, label %56, label %70

56:                                               ; preds = %54
  %57 = and i64 %30, 4294967295
  br label %60

58:                                               ; preds = %60
  %59 = icmp eq i64 %69, %57
  br i1 %59, label %70, label %60

60:                                               ; preds = %58, %56
  %61 = phi i64 [ 0, %56 ], [ %69, %58 ]
  %62 = shl i64 %61, 3
  %63 = and i64 %62, 4294967288
  %64 = or i64 %63, 7
  %65 = add i64 %4, %64
  %66 = inttoptr i64 %65 to i64*
  %67 = load i64, i64* %66, align 1
  %68 = icmp eq i64 %67, 0
  %69 = add nuw nsw i64 %61, 1
  br i1 %68, label %58, label %72

70:                                               ; preds = %58, %54, %41
  %71 = icmp eq i32 %33, 0
  br label %85

72:                                               ; preds = %60, %42
  %73 = icmp eq i32 %33, 0
  br i1 %73, label %74, label %85

74:                                               ; preds = %72
  %75 = shl i32 %8, 3
  %76 = add i32 %75, -8
  %77 = or i32 %76, 7
  %78 = sext i32 %77 to i64
  %79 = add i64 %4, %78
  %80 = inttoptr i64 %79 to i64*
  %81 = load i64, i64* %80, align 1
  %82 = icmp eq i64 %81, -1
  %83 = zext i1 %82 to i32
  %84 = add nsw i32 %34, %83
  br label %85

85:                                               ; preds = %70, %74, %72
  %86 = phi i1 [ true, %74 ], [ false, %72 ], [ %71, %70 ]
  %87 = phi i1 [ true, %74 ], [ true, %72 ], [ false, %70 ]
  %88 = phi i32 [ %84, %74 ], [ %34, %72 ], [ %34, %70 ]
  %89 = icmp sgt i32 %88, 16777216
  br i1 %89, label %90, label %99

90:                                               ; preds = %85
  %91 = load i8, i8* @_ZN2v88internal36FLAG_correctness_fuzzer_suppressionsE, align 1, !range !3
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %94, label %93

93:                                               ; preds = %90
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.6, i64 0, i64 0)) #14
  unreachable

94:                                               ; preds = %90
  %95 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::Factory"*
  %96 = tail call i64* @_ZN2v88internal7Factory13NewRangeErrorENS0_15MessageTemplateENS0_6HandleINS0_6ObjectEEES5_S5_(%"class.v8::internal::Factory"* %95, i32 190, i64* null, i64* null, i64* null) #13
  %97 = load i64, i64* %96, align 8
  %98 = tail call i64 @_ZN2v88internal7Isolate13ThrowInternalENS0_6ObjectEPNS0_15MessageLocationE(%"class.v8::internal::Isolate"* %0, i64 %97, %"class.v8::internal::MessageLocation"* null) #13
  br label %107

99:                                               ; preds = %85
  %100 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %101 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE9NewBigIntEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %100, i32 %88, i8 zeroext 0) #13
  %102 = load i64, i64* %101, align 8
  %103 = shl i32 %88, 1
  %104 = add i64 %102, 3
  %105 = inttoptr i64 %104 to i32*
  store i32 %103, i32* %105, align 4
  %106 = icmp eq i64* %101, null
  br i1 %106, label %107, label %108, !prof !2

107:                                              ; preds = %94, %99
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0)) #14
  unreachable

108:                                              ; preds = %99
  br i1 %86, label %109, label %142

109:                                              ; preds = %108
  %110 = load i64, i64* %101, align 8
  %111 = shl i32 %88, 3
  %112 = add i32 %111, -8
  %113 = or i32 %112, 7
  %114 = sext i32 %113 to i64
  %115 = add i64 %110, %114
  %116 = inttoptr i64 %115 to i64*
  store i64 0, i64* %116, align 1
  %117 = icmp sgt i32 %9, %31
  br i1 %117, label %118, label %194

118:                                              ; preds = %109
  %119 = shl i64 %30, 32
  %120 = ashr exact i64 %119, 32
  %121 = zext i32 %9 to i64
  br label %122

122:                                              ; preds = %122, %118
  %123 = phi i64 [ %120, %118 ], [ %140, %122 ]
  %124 = load i64, i64* %101, align 8
  %125 = sub nsw i64 %123, %120
  %126 = load i64, i64* %1, align 8
  %127 = trunc i64 %123 to i32
  %128 = shl nsw i32 %127, 3
  %129 = or i32 %128, 7
  %130 = sext i32 %129 to i64
  %131 = add i64 %126, %130
  %132 = inttoptr i64 %131 to i64*
  %133 = load i64, i64* %132, align 1
  %134 = trunc i64 %125 to i32
  %135 = shl nsw i32 %134, 3
  %136 = or i32 %135, 7
  %137 = sext i32 %136 to i64
  %138 = add i64 %124, %137
  %139 = inttoptr i64 %138 to i64*
  store i64 %133, i64* %139, align 1
  %140 = add nsw i64 %123, 1
  %141 = icmp eq i64 %140, %121
  br i1 %141, label %194, label %122

142:                                              ; preds = %108
  %143 = load i64, i64* %1, align 8
  %144 = shl i64 %30, 35
  %145 = ashr exact i64 %144, 32
  %146 = or i64 %145, 7
  %147 = add i64 %143, %146
  %148 = inttoptr i64 %147 to i64*
  %149 = load i64, i64* %148, align 1
  %150 = zext i32 %33 to i64
  %151 = add nsw i32 %34, -1
  %152 = lshr i64 %149, %150
  %153 = icmp sgt i32 %151, 0
  br i1 %153, label %154, label %160

154:                                              ; preds = %142
  %155 = sub nuw nsw i32 64, %33
  %156 = zext i32 %155 to i64
  %157 = xor i32 %31, -1
  %158 = add i32 %9, %157
  %159 = zext i32 %158 to i64
  br label %168

160:                                              ; preds = %168, %142
  %161 = phi i64 [ %152, %142 ], [ %190, %168 ]
  %162 = load i64, i64* %101, align 8
  %163 = shl nsw i32 %151, 3
  %164 = or i32 %163, 7
  %165 = sext i32 %164 to i64
  %166 = add i64 %162, %165
  %167 = inttoptr i64 %166 to i64*
  store i64 %161, i64* %167, align 1
  br label %194

168:                                              ; preds = %192, %154
  %169 = phi i64 [ %143, %154 ], [ %193, %192 ]
  %170 = phi i64 [ 0, %154 ], [ %189, %192 ]
  %171 = phi i64 [ %152, %154 ], [ %190, %192 ]
  %172 = add nuw i64 %170, %30
  %173 = trunc i64 %172 to i32
  %174 = shl i32 %173, 3
  %175 = add i32 %174, 8
  %176 = or i32 %175, 7
  %177 = sext i32 %176 to i64
  %178 = add i64 %169, %177
  %179 = inttoptr i64 %178 to i64*
  %180 = load i64, i64* %179, align 1
  %181 = load i64, i64* %101, align 8
  %182 = shl i64 %180, %156
  %183 = or i64 %182, %171
  %184 = shl i64 %170, 3
  %185 = and i64 %184, 4294967288
  %186 = or i64 %185, 7
  %187 = add i64 %181, %186
  %188 = inttoptr i64 %187 to i64*
  store i64 %183, i64* %188, align 1
  %189 = add nuw nsw i64 %170, 1
  %190 = lshr i64 %180, %150
  %191 = icmp eq i64 %189, %159
  br i1 %191, label %160, label %192

192:                                              ; preds = %168
  %193 = load i64, i64* %1, align 8
  br label %168

194:                                              ; preds = %122, %109, %160
  br i1 %12, label %195, label %206

195:                                              ; preds = %194
  %196 = load i64, i64* %101, align 8
  %197 = add i64 %196, 3
  %198 = inttoptr i64 %197 to i32*
  %199 = load atomic i32, i32* %198 monotonic, align 4
  %200 = or i32 %199, 1
  store atomic volatile i32 %200, i32* %198 monotonic, align 4
  br i1 %87, label %201, label %206

201:                                              ; preds = %195
  %202 = load i64, i64* %101, align 8
  %203 = tail call i64* @_ZN2v88internal13MutableBigInt14AbsoluteAddOneEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEEbS1_(%"class.v8::internal::Isolate"* %0, i64* nonnull %101, i1 zeroext true, i64 %202)
  %204 = icmp eq i64* %203, null
  br i1 %204, label %205, label %206, !prof !2

205:                                              ; preds = %201
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0)) #14
  unreachable

206:                                              ; preds = %201, %195, %194
  %207 = phi i64* [ %101, %195 ], [ %101, %194 ], [ %203, %201 ]
  %208 = load i64, i64* %207, align 8
  %209 = add i64 %208, 3
  %210 = inttoptr i64 %209 to i32*
  %211 = load atomic i32, i32* %210 monotonic, align 4
  %212 = lshr i32 %211, 1
  %213 = and i32 %212, 1073741823
  %214 = zext i32 %213 to i64
  br label %215

215:                                              ; preds = %218, %206
  %216 = phi i64 [ %219, %218 ], [ %214, %206 ]
  %217 = icmp sgt i64 %216, 0
  br i1 %217, label %218, label %228

218:                                              ; preds = %215
  %219 = add nsw i64 %216, -1
  %220 = trunc i64 %219 to i32
  %221 = shl nsw i32 %220, 3
  %222 = or i32 %221, 7
  %223 = sext i32 %222 to i64
  %224 = add i64 %208, %223
  %225 = inttoptr i64 %224 to i64*
  %226 = load i64, i64* %225, align 1
  %227 = icmp eq i64 %226, 0
  br i1 %227, label %215, label %228

228:                                              ; preds = %218, %215
  %229 = trunc i64 %216 to i32
  %230 = sub nsw i32 %213, %229
  %231 = icmp eq i32 %230, 0
  br i1 %231, label %255, label %232

232:                                              ; preds = %228
  %233 = and i64 %208, -262144
  %234 = or i64 %233, 16
  %235 = inttoptr i64 %234 to %"class.v8::internal::Heap"**
  %236 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %235, align 16
  %237 = tail call zeroext i1 @_ZN2v88internal4Heap13IsLargeObjectENS0_10HeapObjectE(i64 %208) #13
  br i1 %237, label %246, label %238

238:                                              ; preds = %232
  %239 = shl i32 %229, 3
  %240 = add nsw i32 %239, 8
  %241 = add i64 %208, -1
  %242 = sext i32 %240 to i64
  %243 = add i64 %241, %242
  %244 = shl nsw i32 %230, 3
  %245 = tail call i64 @_ZN2v88internal4Heap20CreateFillerObjectAtEmiNS0_18ClearRecordedSlotsE(%"class.v8::internal::Heap"* %236, i64 %243, i32 %244, i32 1) #13
  br label %246

246:                                              ; preds = %238, %232
  %247 = load atomic i32, i32* %210 monotonic, align 4
  %248 = and i32 %247, -2147483647
  %249 = shl i32 %229, 1
  %250 = or i32 %248, %249
  store atomic volatile i32 %250, i32* %210 release, align 4
  %251 = icmp eq i32 %229, 0
  br i1 %251, label %252, label %255

252:                                              ; preds = %246
  %253 = load atomic i32, i32* %210 monotonic, align 4
  %254 = and i32 %253, -2
  store atomic volatile i32 %254, i32* %210 monotonic, align 4
  br label %255

255:                                              ; preds = %252, %246, %228, %39, %37, %27, %25
  %256 = phi i64* [ %26, %25 ], [ %28, %27 ], [ %38, %37 ], [ %40, %39 ], [ %207, %228 ], [ %207, %246 ], [ %207, %252 ]
  ret i64* %256
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal13MutableBigInt19LeftShiftByAbsoluteEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEES6_(%"class.v8::internal::Isolate"*, i64*, i64* nocapture readonly) local_unnamed_addr #0 align 2 {
  %4 = load i64, i64* %2, align 8
  %5 = add i64 %4, 3
  %6 = inttoptr i64 %5 to i32*
  %7 = load atomic i32, i32* %6 monotonic, align 4
  %8 = and i32 %7, 2147483644
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %15

10:                                               ; preds = %3
  %11 = add i64 %4, 7
  %12 = inttoptr i64 %11 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = icmp ugt i64 %13, 1073741824
  br i1 %14, label %15, label %24

15:                                               ; preds = %3, %10
  %16 = load i8, i8* @_ZN2v88internal36FLAG_correctness_fuzzer_suppressionsE, align 1, !range !3
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %19, label %18

18:                                               ; preds = %15
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.6, i64 0, i64 0)) #14
  unreachable

19:                                               ; preds = %15
  %20 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::Factory"*
  %21 = tail call i64* @_ZN2v88internal7Factory13NewRangeErrorENS0_15MessageTemplateENS0_6HandleINS0_6ObjectEEES5_S5_(%"class.v8::internal::Factory"* %20, i32 190, i64* null, i64* null, i64* null) #13
  %22 = load i64, i64* %21, align 8
  %23 = tail call i64 @_ZN2v88internal7Isolate13ThrowInternalENS0_6ObjectEPNS0_15MessageLocationE(%"class.v8::internal::Isolate"* %0, i64 %22, %"class.v8::internal::MessageLocation"* null) #13
  br label %270

24:                                               ; preds = %10
  %25 = lshr i64 %13, 6
  %26 = trunc i64 %25 to i32
  %27 = trunc i64 %13 to i32
  %28 = and i32 %27, 63
  %29 = load i64, i64* %1, align 8
  %30 = add i64 %29, 3
  %31 = inttoptr i64 %30 to i32*
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = lshr i32 %32, 1
  %34 = and i32 %33, 1073741823
  %35 = icmp eq i32 %28, 0
  br i1 %35, label %48, label %36

36:                                               ; preds = %24
  %37 = shl i32 %33, 3
  %38 = add i32 %37, -8
  %39 = or i32 %38, 7
  %40 = sext i32 %39 to i64
  %41 = add i64 %29, %40
  %42 = inttoptr i64 %41 to i64*
  %43 = load i64, i64* %42, align 1
  %44 = sub nuw nsw i32 64, %28
  %45 = zext i32 %44 to i64
  %46 = lshr i64 %43, %45
  %47 = icmp ne i64 %46, 0
  br label %48

48:                                               ; preds = %24, %36
  %49 = phi i1 [ false, %24 ], [ %47, %36 ]
  %50 = add nuw nsw i32 %34, %26
  %51 = zext i1 %49 to i32
  %52 = add nuw nsw i32 %50, %51
  %53 = icmp sgt i32 %52, 16777216
  br i1 %53, label %54, label %63

54:                                               ; preds = %48
  %55 = load i8, i8* @_ZN2v88internal36FLAG_correctness_fuzzer_suppressionsE, align 1, !range !3
  %56 = icmp eq i8 %55, 0
  br i1 %56, label %58, label %57

57:                                               ; preds = %54
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.6, i64 0, i64 0)) #14
  unreachable

58:                                               ; preds = %54
  %59 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::Factory"*
  %60 = tail call i64* @_ZN2v88internal7Factory13NewRangeErrorENS0_15MessageTemplateENS0_6HandleINS0_6ObjectEEES5_S5_(%"class.v8::internal::Factory"* %59, i32 190, i64* null, i64* null, i64* null) #13
  %61 = load i64, i64* %60, align 8
  %62 = tail call i64 @_ZN2v88internal7Isolate13ThrowInternalENS0_6ObjectEPNS0_15MessageLocationE(%"class.v8::internal::Isolate"* %0, i64 %61, %"class.v8::internal::MessageLocation"* null) #13
  br label %270

63:                                               ; preds = %48
  %64 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %65 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE9NewBigIntEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %64, i32 %52, i8 zeroext 0) #13
  %66 = load i64, i64* %65, align 8
  %67 = shl i32 %52, 1
  %68 = add i64 %66, 3
  %69 = inttoptr i64 %68 to i32*
  store i32 %67, i32* %69, align 4
  %70 = icmp eq i64* %65, null
  br i1 %70, label %270, label %71

71:                                               ; preds = %63
  %72 = ptrtoint i64* %65 to i64
  %73 = icmp sgt i32 %26, 0
  br i1 %35, label %81, label %74

74:                                               ; preds = %71
  br i1 %73, label %75, label %154

75:                                               ; preds = %74
  %76 = and i64 %25, 4294967295
  %77 = and i64 %25, 1
  %78 = icmp eq i64 %76, 1
  br i1 %78, label %147, label %79

79:                                               ; preds = %75
  %80 = sub nsw i64 %76, %77
  br label %161

81:                                               ; preds = %71
  br i1 %73, label %82, label %99

82:                                               ; preds = %81
  %83 = and i64 %25, 4294967295
  %84 = and i64 %25, 1
  %85 = icmp eq i64 %83, 1
  br i1 %85, label %92, label %86

86:                                               ; preds = %82
  %87 = sub nsw i64 %83, %84
  br label %106

88:                                               ; preds = %106
  %89 = shl i64 %121, 3
  %90 = and i64 %89, 4294967280
  %91 = or i64 %90, 7
  br label %92

92:                                               ; preds = %88, %82
  %93 = phi i64 [ 7, %82 ], [ %91, %88 ]
  %94 = icmp eq i64 %84, 0
  br i1 %94, label %99, label %95

95:                                               ; preds = %92
  %96 = load i64, i64* %65, align 8
  %97 = add i64 %96, %93
  %98 = inttoptr i64 %97 to i64*
  store i64 0, i64* %98, align 1
  br label %99

99:                                               ; preds = %95, %92, %81
  %100 = icmp sgt i32 %52, %26
  br i1 %100, label %101, label %211

101:                                              ; preds = %99
  %102 = and i64 %25, 4294967295
  %103 = add nuw nsw i32 %34, %51
  %104 = add i32 %103, %26
  %105 = zext i32 %104 to i64
  br label %124

106:                                              ; preds = %106, %86
  %107 = phi i64 [ 0, %86 ], [ %121, %106 ]
  %108 = phi i64 [ %87, %86 ], [ %122, %106 ]
  %109 = load i64, i64* %65, align 8
  %110 = shl i64 %107, 3
  %111 = and i64 %110, 4294967280
  %112 = or i64 %111, 7
  %113 = add i64 %109, %112
  %114 = inttoptr i64 %113 to i64*
  store i64 0, i64* %114, align 1
  %115 = load i64, i64* %65, align 8
  %116 = shl i64 %107, 3
  %117 = and i64 %116, 4294967280
  %118 = or i64 %117, 15
  %119 = add i64 %115, %118
  %120 = inttoptr i64 %119 to i64*
  store i64 0, i64* %120, align 1
  %121 = add nuw nsw i64 %107, 2
  %122 = add i64 %108, -2
  %123 = icmp eq i64 %122, 0
  br i1 %123, label %88, label %106

124:                                              ; preds = %124, %101
  %125 = phi i64 [ %102, %101 ], [ %141, %124 ]
  %126 = load i64, i64* %65, align 8
  %127 = load i64, i64* %1, align 8
  %128 = trunc i64 %125 to i32
  %129 = sub nsw i32 %128, %26
  %130 = shl nsw i32 %129, 3
  %131 = or i32 %130, 7
  %132 = sext i32 %131 to i64
  %133 = add i64 %127, %132
  %134 = inttoptr i64 %133 to i64*
  %135 = load i64, i64* %134, align 1
  %136 = shl i64 %125, 3
  %137 = and i64 %136, 4294967288
  %138 = or i64 %137, 7
  %139 = add i64 %126, %138
  %140 = inttoptr i64 %139 to i64*
  store i64 %135, i64* %140, align 1
  %141 = add nuw nsw i64 %125, 1
  %142 = icmp eq i64 %141, %105
  br i1 %142, label %211, label %124

143:                                              ; preds = %161
  %144 = shl i64 %176, 3
  %145 = and i64 %144, 4294967280
  %146 = or i64 %145, 7
  br label %147

147:                                              ; preds = %143, %75
  %148 = phi i64 [ 7, %75 ], [ %146, %143 ]
  %149 = icmp eq i64 %77, 0
  br i1 %149, label %154, label %150

150:                                              ; preds = %147
  %151 = load i64, i64* %65, align 8
  %152 = add i64 %151, %148
  %153 = inttoptr i64 %152 to i64*
  store i64 0, i64* %153, align 1
  br label %154

154:                                              ; preds = %150, %147, %74
  %155 = icmp eq i32 %34, 0
  br i1 %155, label %179, label %156

156:                                              ; preds = %154
  %157 = zext i32 %28 to i64
  %158 = sub nuw nsw i32 64, %28
  %159 = zext i32 %158 to i64
  %160 = zext i32 %34 to i64
  br label %181

161:                                              ; preds = %161, %79
  %162 = phi i64 [ 0, %79 ], [ %176, %161 ]
  %163 = phi i64 [ %80, %79 ], [ %177, %161 ]
  %164 = load i64, i64* %65, align 8
  %165 = shl i64 %162, 3
  %166 = and i64 %165, 4294967280
  %167 = or i64 %166, 7
  %168 = add i64 %164, %167
  %169 = inttoptr i64 %168 to i64*
  store i64 0, i64* %169, align 1
  %170 = load i64, i64* %65, align 8
  %171 = shl i64 %162, 3
  %172 = and i64 %171, 4294967280
  %173 = or i64 %172, 15
  %174 = add i64 %170, %173
  %175 = inttoptr i64 %174 to i64*
  store i64 0, i64* %175, align 1
  %176 = add nuw nsw i64 %162, 2
  %177 = add i64 %163, -2
  %178 = icmp eq i64 %177, 0
  br i1 %178, label %143, label %161

179:                                              ; preds = %181, %154
  %180 = phi i64 [ 0, %154 ], [ %201, %181 ]
  br i1 %49, label %204, label %211

181:                                              ; preds = %181, %156
  %182 = phi i64 [ 0, %156 ], [ %202, %181 ]
  %183 = phi i64 [ 0, %156 ], [ %201, %181 ]
  %184 = load i64, i64* %1, align 8
  %185 = shl i64 %182, 3
  %186 = and i64 %185, 4294967288
  %187 = or i64 %186, 7
  %188 = add i64 %184, %187
  %189 = inttoptr i64 %188 to i64*
  %190 = load i64, i64* %189, align 1
  %191 = load i64, i64* %65, align 8
  %192 = add nuw i64 %182, %25
  %193 = shl i64 %190, %157
  %194 = or i64 %193, %183
  %195 = trunc i64 %192 to i32
  %196 = shl nsw i32 %195, 3
  %197 = or i32 %196, 7
  %198 = sext i32 %197 to i64
  %199 = add i64 %191, %198
  %200 = inttoptr i64 %199 to i64*
  store i64 %194, i64* %200, align 1
  %201 = lshr i64 %190, %159
  %202 = add nuw nsw i64 %182, 1
  %203 = icmp eq i64 %202, %160
  br i1 %203, label %179, label %181

204:                                              ; preds = %179
  %205 = load i64, i64* %65, align 8
  %206 = shl nsw i32 %50, 3
  %207 = or i32 %206, 7
  %208 = sext i32 %207 to i64
  %209 = add i64 %205, %208
  %210 = inttoptr i64 %209 to i64*
  store i64 %180, i64* %210, align 1
  br label %211

211:                                              ; preds = %124, %99, %204, %179
  %212 = load i64, i64* %65, align 8
  %213 = load i64, i64* %1, align 8
  %214 = add i64 %213, 3
  %215 = inttoptr i64 %214 to i32*
  %216 = load atomic i32, i32* %215 monotonic, align 4
  %217 = and i32 %216, 1
  %218 = add i64 %212, 3
  %219 = inttoptr i64 %218 to i32*
  %220 = load atomic i32, i32* %219 monotonic, align 4
  %221 = and i32 %220, -2
  %222 = or i32 %221, %217
  store atomic volatile i32 %222, i32* %219 monotonic, align 4
  %223 = load i64, i64* %65, align 8
  %224 = add i64 %223, 3
  %225 = inttoptr i64 %224 to i32*
  %226 = load atomic i32, i32* %225 monotonic, align 4
  %227 = lshr i32 %226, 1
  %228 = and i32 %227, 1073741823
  %229 = zext i32 %228 to i64
  br label %230

230:                                              ; preds = %233, %211
  %231 = phi i64 [ %234, %233 ], [ %229, %211 ]
  %232 = icmp sgt i64 %231, 0
  br i1 %232, label %233, label %243

233:                                              ; preds = %230
  %234 = add nsw i64 %231, -1
  %235 = trunc i64 %234 to i32
  %236 = shl nsw i32 %235, 3
  %237 = or i32 %236, 7
  %238 = sext i32 %237 to i64
  %239 = add i64 %223, %238
  %240 = inttoptr i64 %239 to i64*
  %241 = load i64, i64* %240, align 1
  %242 = icmp eq i64 %241, 0
  br i1 %242, label %230, label %243

243:                                              ; preds = %233, %230
  %244 = trunc i64 %231 to i32
  %245 = sub nsw i32 %228, %244
  %246 = icmp eq i32 %245, 0
  br i1 %246, label %270, label %247

247:                                              ; preds = %243
  %248 = and i64 %223, -262144
  %249 = or i64 %248, 16
  %250 = inttoptr i64 %249 to %"class.v8::internal::Heap"**
  %251 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %250, align 16
  %252 = tail call zeroext i1 @_ZN2v88internal4Heap13IsLargeObjectENS0_10HeapObjectE(i64 %223) #13
  br i1 %252, label %261, label %253

253:                                              ; preds = %247
  %254 = shl i32 %244, 3
  %255 = add nsw i32 %254, 8
  %256 = add i64 %223, -1
  %257 = sext i32 %255 to i64
  %258 = add i64 %256, %257
  %259 = shl nsw i32 %245, 3
  %260 = tail call i64 @_ZN2v88internal4Heap20CreateFillerObjectAtEmiNS0_18ClearRecordedSlotsE(%"class.v8::internal::Heap"* %251, i64 %258, i32 %259, i32 1) #13
  br label %261

261:                                              ; preds = %253, %247
  %262 = load atomic i32, i32* %225 monotonic, align 4
  %263 = and i32 %262, -2147483647
  %264 = shl i32 %244, 1
  %265 = or i32 %263, %264
  store atomic volatile i32 %265, i32* %225 release, align 4
  %266 = icmp eq i32 %244, 0
  br i1 %266, label %267, label %270

267:                                              ; preds = %261
  %268 = load atomic i32, i32* %225 monotonic, align 4
  %269 = and i32 %268, -2
  store atomic volatile i32 %269, i32* %225 monotonic, align 4
  br label %270

270:                                              ; preds = %63, %243, %261, %267, %58, %19
  %271 = phi i64 [ 0, %19 ], [ 0, %58 ], [ 0, %63 ], [ %72, %243 ], [ %72, %261 ], [ %72, %267 ]
  %272 = inttoptr i64 %271 to i64*
  ret i64* %272
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal6BigInt16SignedRightShiftEPNS0_7IsolateENS0_6HandleIS1_EES5_(%"class.v8::internal::Isolate"*, i64*, i64*) local_unnamed_addr #0 align 2 {
  %4 = load i64, i64* %2, align 8
  %5 = add i64 %4, 3
  %6 = inttoptr i64 %5 to i32*
  %7 = load atomic i32, i32* %6 monotonic, align 4
  %8 = and i32 %7, 2147483646
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %25, label %10

10:                                               ; preds = %3
  %11 = load i64, i64* %1, align 8
  %12 = add i64 %11, 3
  %13 = inttoptr i64 %12 to i32*
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = and i32 %14, 2147483646
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %25, label %17

17:                                               ; preds = %10
  %18 = load atomic i32, i32* %6 monotonic, align 4
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %23, label %21

21:                                               ; preds = %17
  %22 = tail call i64* @_ZN2v88internal13MutableBigInt19LeftShiftByAbsoluteEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEES6_(%"class.v8::internal::Isolate"* %0, i64* %1, i64* %2)
  br label %25

23:                                               ; preds = %17
  %24 = tail call i64* @_ZN2v88internal13MutableBigInt20RightShiftByAbsoluteEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEES6_(%"class.v8::internal::Isolate"* %0, i64* %1, i64* %2)
  br label %25

25:                                               ; preds = %10, %3, %23, %21
  %26 = phi i64* [ %22, %21 ], [ %24, %23 ], [ %1, %3 ], [ %1, %10 ]
  ret i64* %26
}

; Function Attrs: nounwind ssp uwtable
define hidden noalias i64* @_ZN2v88internal6BigInt18UnsignedRightShiftEPNS0_7IsolateENS0_6HandleIS1_EES5_(%"class.v8::internal::Isolate"*, i64* nocapture readnone, i64* nocapture readnone) local_unnamed_addr #0 align 2 {
  %4 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::Factory"*
  %5 = tail call i64* @_ZN2v88internal7Factory12NewTypeErrorENS0_15MessageTemplateENS0_6HandleINS0_6ObjectEEES5_S5_(%"class.v8::internal::Factory"* %4, i32 23, i64* null, i64* null, i64* null) #13
  %6 = load i64, i64* %5, align 8
  %7 = tail call i64 @_ZN2v88internal7Isolate13ThrowInternalENS0_6ObjectEPNS0_15MessageLocationE(%"class.v8::internal::Isolate"* %0, i64 %6, %"class.v8::internal::MessageLocation"* null) #13
  ret i64* null
}

declare i64* @_ZN2v88internal7Factory12NewTypeErrorENS0_15MessageTemplateENS0_6HandleINS0_6ObjectEEES5_S5_(%"class.v8::internal::Factory"*, i32, i64*, i64*, i64*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal6BigInt15CompareToBigIntENS0_6HandleIS1_EES3_(i64*, i64*) local_unnamed_addr #0 align 2 {
  %3 = load i64, i64* %0, align 8
  %4 = add i64 %3, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load atomic i32, i32* %5 monotonic, align 4
  %7 = and i32 %6, 1
  %8 = icmp ne i32 %7, 0
  %9 = load i64, i64* %1, align 8
  %10 = add i64 %9, 3
  %11 = inttoptr i64 %10 to i32*
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 1
  %14 = icmp ne i32 %13, 0
  %15 = xor i1 %8, %14
  br i1 %15, label %33, label %16

16:                                               ; preds = %2
  %17 = add i64 %3, 7
  %18 = inttoptr i64 %17 to i64*
  %19 = load atomic i32, i32* %5 monotonic, align 4
  %20 = lshr i32 %19, 1
  %21 = and i32 %20, 1073741823
  %22 = add i64 %9, 7
  %23 = inttoptr i64 %22 to i64*
  %24 = load atomic i32, i32* %11 monotonic, align 4
  %25 = lshr i32 %24, 1
  %26 = and i32 %25, 1073741823
  %27 = tail call i32 @_ZN2v86bigint7CompareENS0_6DigitsES1_(i64* %18, i32 %21, i64* %23, i32 %26) #13
  %28 = icmp sgt i32 %27, 0
  br i1 %28, label %33, label %29

29:                                               ; preds = %16
  %30 = icmp eq i32 %27, 0
  %31 = shl nuw nsw i32 %7, 1
  %32 = select i1 %30, i32 1, i32 %31
  ret i32 %32

33:                                               ; preds = %16, %2
  %34 = shl nuw nsw i32 %7, 1
  %35 = xor i32 %34, 2
  ret i32 %35
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal6BigInt13EqualToBigIntES1_S1_(i64, i64) local_unnamed_addr #2 align 2 {
  %3 = add i64 %0, 3
  %4 = inttoptr i64 %3 to i32*
  %5 = load atomic i32, i32* %4 monotonic, align 4
  %6 = and i32 %5, 1
  %7 = icmp ne i32 %6, 0
  %8 = add i64 %1, 3
  %9 = inttoptr i64 %8 to i32*
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 1
  %12 = icmp ne i32 %11, 0
  %13 = xor i1 %7, %12
  br i1 %13, label %43, label %14

14:                                               ; preds = %2
  %15 = load atomic i32, i32* %4 monotonic, align 4
  %16 = load atomic i32, i32* %9 monotonic, align 4
  %17 = xor i32 %16, %15
  %18 = and i32 %17, 2147483646
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %43

20:                                               ; preds = %14
  %21 = load atomic i32, i32* %4 monotonic, align 4
  %22 = and i32 %21, 2147483646
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %43, label %30

24:                                               ; preds = %30
  %25 = load atomic i32, i32* %4 monotonic, align 4
  %26 = lshr i32 %25, 1
  %27 = and i32 %26, 1073741823
  %28 = zext i32 %27 to i64
  %29 = icmp ult i64 %42, %28
  br i1 %29, label %30, label %43

30:                                               ; preds = %20, %24
  %31 = phi i64 [ %42, %24 ], [ 0, %20 ]
  %32 = shl i64 %31, 3
  %33 = and i64 %32, 4294967288
  %34 = or i64 %33, 7
  %35 = add i64 %34, %0
  %36 = inttoptr i64 %35 to i64*
  %37 = load i64, i64* %36, align 1
  %38 = add i64 %34, %1
  %39 = inttoptr i64 %38 to i64*
  %40 = load i64, i64* %39, align 1
  %41 = icmp eq i64 %37, %40
  %42 = add nuw nsw i64 %31, 1
  br i1 %41, label %24, label %43

43:                                               ; preds = %30, %24, %20, %2, %14
  %44 = phi i1 [ false, %14 ], [ false, %2 ], [ true, %20 ], [ false, %30 ], [ true, %24 ]
  ret i1 %44
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal6BigInt10BitwiseAndEPNS0_7IsolateENS0_6HandleIS1_EES5_(%"class.v8::internal::Isolate"*, i64*, i64*) local_unnamed_addr #0 align 2 {
  %4 = tail call i64* @_ZN2v88internal13MutableBigInt10BitwiseAndEPNS0_7IsolateENS0_6HandleINS0_6BigIntEEES6_(%"class.v8::internal::Isolate"* %0, i64* %1, i64* %2)
  %5 = tail call i64* @_ZN2v88internal13MutableBigInt13MakeImmutableENS0_11MaybeHandleIS1_EE(i64* %4)
  ret i64* %5
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal13MutableBigInt10BitwiseAndEPNS0_7IsolateENS0_6HandleINS0_6BigIntEEES6_(%"class.v8::internal::Isolate"*, i64*, i64*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::function", align 8
  %5 = alloca %"class.std::__1::function", align 8
  %6 = alloca %"class.std::__1::function", align 8
  %7 = ptrtoint i64* %1 to i64
  %8 = ptrtoint i64* %2 to i64
  %9 = load i64, i64* %1, align 8
  %10 = add i64 %9, 3
  %11 = inttoptr i64 %10 to i32*
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 1
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %36

15:                                               ; preds = %3
  %16 = load i64, i64* %2, align 8
  %17 = add i64 %16, 3
  %18 = inttoptr i64 %17 to i32*
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = and i32 %19, 1
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %36

22:                                               ; preds = %15
  %23 = bitcast %"class.std::__1::function"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %23) #13
  %24 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %4, i64 0, i32 0, i32 1, i32 0
  %25 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %4, i64 0, i32 0, i32 2
  store i64 (%"union.std::__1::__function::__policy_storage"*, i64, i64)* @"_ZNSt3__110__function16__policy_invokerIFmmmEE11__call_implINS0_20__default_alloc_funcIZN2v88internal13MutableBigInt11AbsoluteAndEPNS7_7IsolateENS7_6HandleINS7_10BigIntBaseEEESD_S8_E3$_0S2_EEEEmPKNS0_16__policy_storageEmm", i64 (%"union.std::__1::__function::__policy_storage"*, i64, i64)** %24, align 8
  store %"struct.std::__1::__function::__policy"* @"_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN2v88internal13MutableBigInt11AbsoluteAndEPNS5_7IsolateENS5_6HandleINS5_10BigIntBaseEEESB_S6_E3$_0FmmmEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_", %"struct.std::__1::__function::__policy"** %25, align 8
  %26 = call i64* @_ZN2v88internal13MutableBigInt17AbsoluteBitwiseOpEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEES6_S1_NS1_19ExtraDigitsHandlingENS1_11SymmetricOpERKNSt3__18functionIFmmmEEE(%"class.v8::internal::Isolate"* %0, i64* %1, i64* %2, i64 0, i32 1, i32 0, %"class.std::__1::function"* nonnull dereferenceable(32) %4) #13
  %27 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %25, align 8
  %28 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %27, i64 0, i32 1
  %29 = load void (i8*)*, void (i8*)** %28, align 8
  %30 = icmp eq void (i8*)* %29, null
  br i1 %30, label %34, label %31

31:                                               ; preds = %22
  %32 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %4, i64 0, i32 0, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  call void %29(i8* %33) #13
  br label %34

34:                                               ; preds = %22, %31
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %23) #13
  %35 = ptrtoint i64* %26 to i64
  br label %117

36:                                               ; preds = %15, %3
  %37 = load atomic i32, i32* %11 monotonic, align 4
  %38 = and i32 %37, 1
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %86, label %40

40:                                               ; preds = %36
  %41 = load i64, i64* %2, align 8
  %42 = add i64 %41, 3
  %43 = inttoptr i64 %42 to i32*
  %44 = load atomic i32, i32* %43 monotonic, align 4
  %45 = and i32 %44, 1
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %86, label %47

47:                                               ; preds = %40
  %48 = load atomic i32, i32* %11 monotonic, align 4
  %49 = lshr i32 %48, 1
  %50 = and i32 %49, 1073741823
  %51 = load atomic i32, i32* %43 monotonic, align 4
  %52 = lshr i32 %51, 1
  %53 = and i32 %52, 1073741823
  %54 = icmp ult i32 %50, %53
  %55 = select i1 %54, i32 %53, i32 %50
  %56 = add nuw nsw i32 %55, 1
  %57 = tail call i64* @_ZN2v88internal13MutableBigInt14AbsoluteSubOneEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEEi(%"class.v8::internal::Isolate"* %0, i64* %1, i32 %56)
  %58 = icmp eq i64* %57, null
  br i1 %58, label %117, label %59

59:                                               ; preds = %47
  %60 = load i64, i64* %2, align 8
  %61 = add i64 %60, 3
  %62 = inttoptr i64 %61 to i32*
  %63 = load atomic i32, i32* %62 monotonic, align 4
  %64 = lshr i32 %63, 1
  %65 = and i32 %64, 1073741823
  %66 = tail call i64* @_ZN2v88internal13MutableBigInt14AbsoluteSubOneEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEEi(%"class.v8::internal::Isolate"* %0, i64* %2, i32 %65) #13
  %67 = icmp eq i64* %66, null
  br i1 %67, label %68, label %69, !prof !2

68:                                               ; preds = %59
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0)) #14
  unreachable

69:                                               ; preds = %59
  %70 = load i64, i64* %57, align 8
  %71 = bitcast %"class.std::__1::function"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %71) #13
  %72 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %5, i64 0, i32 0, i32 1, i32 0
  %73 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %5, i64 0, i32 0, i32 2
  store i64 (%"union.std::__1::__function::__policy_storage"*, i64, i64)* @"_ZNSt3__110__function16__policy_invokerIFmmmEE11__call_implINS0_20__default_alloc_funcIZN2v88internal13MutableBigInt10AbsoluteOrEPNS7_7IsolateENS7_6HandleINS7_10BigIntBaseEEESD_S8_E3$_2S2_EEEEmPKNS0_16__policy_storageEmm", i64 (%"union.std::__1::__function::__policy_storage"*, i64, i64)** %72, align 8
  store %"struct.std::__1::__function::__policy"* @"_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN2v88internal13MutableBigInt10AbsoluteOrEPNS5_7IsolateENS5_6HandleINS5_10BigIntBaseEEESB_S6_E3$_2FmmmEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_", %"struct.std::__1::__function::__policy"** %73, align 8
  %74 = call i64* @_ZN2v88internal13MutableBigInt17AbsoluteBitwiseOpEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEES6_S1_NS1_19ExtraDigitsHandlingENS1_11SymmetricOpERKNSt3__18functionIFmmmEEE(%"class.v8::internal::Isolate"* %0, i64* nonnull %57, i64* nonnull %66, i64 %70, i32 0, i32 0, %"class.std::__1::function"* nonnull dereferenceable(32) %5) #13
  %75 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %73, align 8
  %76 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %75, i64 0, i32 1
  %77 = load void (i8*)*, void (i8*)** %76, align 8
  %78 = icmp eq void (i8*)* %77, null
  br i1 %78, label %82, label %79

79:                                               ; preds = %69
  %80 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %5, i64 0, i32 0, i32 0, i32 0
  %81 = load i8*, i8** %80, align 8
  call void %77(i8* %81) #13
  br label %82

82:                                               ; preds = %69, %79
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %71) #13
  %83 = load i64, i64* %74, align 8
  %84 = call i64* @_ZN2v88internal13MutableBigInt14AbsoluteAddOneEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEEbS1_(%"class.v8::internal::Isolate"* %0, i64* %74, i1 zeroext true, i64 %83)
  %85 = ptrtoint i64* %84 to i64
  br label %117

86:                                               ; preds = %40, %36
  %87 = load atomic i32, i32* %11 monotonic, align 4
  %88 = and i32 %87, 1
  %89 = icmp ne i32 %88, 0
  %90 = select i1 %89, i64 %7, i64 %8
  %91 = inttoptr i64 %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, 3
  %94 = inttoptr i64 %93 to i32*
  %95 = load atomic i32, i32* %94 monotonic, align 4
  %96 = lshr i32 %95, 1
  %97 = and i32 %96, 1073741823
  %98 = tail call i64* @_ZN2v88internal13MutableBigInt14AbsoluteSubOneEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEEi(%"class.v8::internal::Isolate"* %0, i64* %91, i32 %97) #13
  %99 = icmp eq i64* %98, null
  br i1 %99, label %100, label %101, !prof !2

100:                                              ; preds = %86
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0)) #14
  unreachable

101:                                              ; preds = %86
  %102 = select i1 %89, i64 %8, i64 %7
  %103 = inttoptr i64 %102 to i64*
  %104 = bitcast %"class.std::__1::function"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %104) #13
  %105 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %6, i64 0, i32 0, i32 1, i32 0
  %106 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %6, i64 0, i32 0, i32 2
  store i64 (%"union.std::__1::__function::__policy_storage"*, i64, i64)* @"_ZNSt3__110__function16__policy_invokerIFmmmEE11__call_implINS0_20__default_alloc_funcIZN2v88internal13MutableBigInt14AbsoluteAndNotEPNS7_7IsolateENS7_6HandleINS7_10BigIntBaseEEESD_S8_E3$_1S2_EEEEmPKNS0_16__policy_storageEmm", i64 (%"union.std::__1::__function::__policy_storage"*, i64, i64)** %105, align 8
  store %"struct.std::__1::__function::__policy"* @"_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN2v88internal13MutableBigInt14AbsoluteAndNotEPNS5_7IsolateENS5_6HandleINS5_10BigIntBaseEEESB_S6_E3$_1FmmmEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_", %"struct.std::__1::__function::__policy"** %106, align 8
  %107 = call i64* @_ZN2v88internal13MutableBigInt17AbsoluteBitwiseOpEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEES6_S1_NS1_19ExtraDigitsHandlingENS1_11SymmetricOpERKNSt3__18functionIFmmmEEE(%"class.v8::internal::Isolate"* %0, i64* %103, i64* nonnull %98, i64 0, i32 0, i32 1, %"class.std::__1::function"* nonnull dereferenceable(32) %6) #13
  %108 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %106, align 8
  %109 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %108, i64 0, i32 1
  %110 = load void (i8*)*, void (i8*)** %109, align 8
  %111 = icmp eq void (i8*)* %110, null
  br i1 %111, label %115, label %112

112:                                              ; preds = %101
  %113 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %6, i64 0, i32 0, i32 0, i32 0
  %114 = load i8*, i8** %113, align 8
  call void %110(i8* %114) #13
  br label %115

115:                                              ; preds = %101, %112
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %104) #13
  %116 = ptrtoint i64* %107 to i64
  br label %117

117:                                              ; preds = %82, %47, %115, %34
  %118 = phi i64 [ %116, %115 ], [ %35, %34 ], [ %85, %82 ], [ 0, %47 ]
  %119 = inttoptr i64 %118 to i64*
  ret i64* %119
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal13MutableBigInt11AbsoluteAndEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEES6_S1_(%"class.v8::internal::Isolate"*, i64*, i64*, i64) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.std::__1::function", align 8
  %6 = bitcast %"class.std::__1::function"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #13
  %7 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %5, i64 0, i32 0, i32 1, i32 0
  %8 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %5, i64 0, i32 0, i32 2
  store i64 (%"union.std::__1::__function::__policy_storage"*, i64, i64)* @"_ZNSt3__110__function16__policy_invokerIFmmmEE11__call_implINS0_20__default_alloc_funcIZN2v88internal13MutableBigInt11AbsoluteAndEPNS7_7IsolateENS7_6HandleINS7_10BigIntBaseEEESD_S8_E3$_0S2_EEEEmPKNS0_16__policy_storageEmm", i64 (%"union.std::__1::__function::__policy_storage"*, i64, i64)** %7, align 8
  store %"struct.std::__1::__function::__policy"* @"_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN2v88internal13MutableBigInt11AbsoluteAndEPNS5_7IsolateENS5_6HandleINS5_10BigIntBaseEEESB_S6_E3$_0FmmmEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_", %"struct.std::__1::__function::__policy"** %8, align 8
  %9 = call i64* @_ZN2v88internal13MutableBigInt17AbsoluteBitwiseOpEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEES6_S1_NS1_19ExtraDigitsHandlingENS1_11SymmetricOpERKNSt3__18functionIFmmmEEE(%"class.v8::internal::Isolate"* %0, i64* %1, i64* %2, i64 %3, i32 1, i32 0, %"class.std::__1::function"* nonnull dereferenceable(32) %5)
  %10 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %8, align 8
  %11 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %10, i64 0, i32 1
  %12 = load void (i8*)*, void (i8*)** %11, align 8
  %13 = icmp eq void (i8*)* %12, null
  br i1 %13, label %17, label %14

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %5, i64 0, i32 0, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  call void %12(i8* %16) #13
  br label %17

17:                                               ; preds = %4, %14
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #13
  ret i64* %9
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal13MutableBigInt14AbsoluteSubOneEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEE(%"class.v8::internal::Isolate"*, i64*) local_unnamed_addr #0 align 2 {
  %3 = load i64, i64* %1, align 8
  %4 = add i64 %3, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load atomic i32, i32* %5 monotonic, align 4
  %7 = lshr i32 %6, 1
  %8 = and i32 %7, 1073741823
  %9 = tail call i64* @_ZN2v88internal13MutableBigInt14AbsoluteSubOneEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEEi(%"class.v8::internal::Isolate"* %0, i64* %1, i32 %8)
  %10 = icmp eq i64* %9, null
  br i1 %10, label %11, label %12, !prof !2

11:                                               ; preds = %2
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0)) #14
  unreachable

12:                                               ; preds = %2
  ret i64* %9
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal13MutableBigInt10AbsoluteOrEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEES6_S1_(%"class.v8::internal::Isolate"*, i64*, i64*, i64) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.std::__1::function", align 8
  %6 = bitcast %"class.std::__1::function"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #13
  %7 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %5, i64 0, i32 0, i32 1, i32 0
  %8 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %5, i64 0, i32 0, i32 2
  store i64 (%"union.std::__1::__function::__policy_storage"*, i64, i64)* @"_ZNSt3__110__function16__policy_invokerIFmmmEE11__call_implINS0_20__default_alloc_funcIZN2v88internal13MutableBigInt10AbsoluteOrEPNS7_7IsolateENS7_6HandleINS7_10BigIntBaseEEESD_S8_E3$_2S2_EEEEmPKNS0_16__policy_storageEmm", i64 (%"union.std::__1::__function::__policy_storage"*, i64, i64)** %7, align 8
  store %"struct.std::__1::__function::__policy"* @"_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN2v88internal13MutableBigInt10AbsoluteOrEPNS5_7IsolateENS5_6HandleINS5_10BigIntBaseEEESB_S6_E3$_2FmmmEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_", %"struct.std::__1::__function::__policy"** %8, align 8
  %9 = call i64* @_ZN2v88internal13MutableBigInt17AbsoluteBitwiseOpEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEES6_S1_NS1_19ExtraDigitsHandlingENS1_11SymmetricOpERKNSt3__18functionIFmmmEEE(%"class.v8::internal::Isolate"* %0, i64* %1, i64* %2, i64 %3, i32 0, i32 0, %"class.std::__1::function"* nonnull dereferenceable(32) %5)
  %10 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %8, align 8
  %11 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %10, i64 0, i32 1
  %12 = load void (i8*)*, void (i8*)** %11, align 8
  %13 = icmp eq void (i8*)* %12, null
  br i1 %13, label %17, label %14

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %5, i64 0, i32 0, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  call void %12(i8* %16) #13
  br label %17

17:                                               ; preds = %4, %14
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #13
  ret i64* %9
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal13MutableBigInt14AbsoluteAndNotEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEES6_S1_(%"class.v8::internal::Isolate"*, i64*, i64*, i64) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.std::__1::function", align 8
  %6 = bitcast %"class.std::__1::function"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #13
  %7 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %5, i64 0, i32 0, i32 1, i32 0
  %8 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %5, i64 0, i32 0, i32 2
  store i64 (%"union.std::__1::__function::__policy_storage"*, i64, i64)* @"_ZNSt3__110__function16__policy_invokerIFmmmEE11__call_implINS0_20__default_alloc_funcIZN2v88internal13MutableBigInt14AbsoluteAndNotEPNS7_7IsolateENS7_6HandleINS7_10BigIntBaseEEESD_S8_E3$_1S2_EEEEmPKNS0_16__policy_storageEmm", i64 (%"union.std::__1::__function::__policy_storage"*, i64, i64)** %7, align 8
  store %"struct.std::__1::__function::__policy"* @"_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN2v88internal13MutableBigInt14AbsoluteAndNotEPNS5_7IsolateENS5_6HandleINS5_10BigIntBaseEEESB_S6_E3$_1FmmmEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_", %"struct.std::__1::__function::__policy"** %8, align 8
  %9 = call i64* @_ZN2v88internal13MutableBigInt17AbsoluteBitwiseOpEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEES6_S1_NS1_19ExtraDigitsHandlingENS1_11SymmetricOpERKNSt3__18functionIFmmmEEE(%"class.v8::internal::Isolate"* %0, i64* %1, i64* %2, i64 %3, i32 0, i32 1, %"class.std::__1::function"* nonnull dereferenceable(32) %5)
  %10 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %8, align 8
  %11 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %10, i64 0, i32 1
  %12 = load void (i8*)*, void (i8*)** %11, align 8
  %13 = icmp eq void (i8*)* %12, null
  br i1 %13, label %17, label %14

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %5, i64 0, i32 0, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  call void %12(i8* %16) #13
  br label %17

17:                                               ; preds = %4, %14
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #13
  ret i64* %9
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal6BigInt10BitwiseXorEPNS0_7IsolateENS0_6HandleIS1_EES5_(%"class.v8::internal::Isolate"*, i64*, i64*) local_unnamed_addr #0 align 2 {
  %4 = tail call i64* @_ZN2v88internal13MutableBigInt10BitwiseXorEPNS0_7IsolateENS0_6HandleINS0_6BigIntEEES6_(%"class.v8::internal::Isolate"* %0, i64* %1, i64* %2)
  %5 = tail call i64* @_ZN2v88internal13MutableBigInt13MakeImmutableENS0_11MaybeHandleIS1_EE(i64* %4)
  ret i64* %5
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal13MutableBigInt10BitwiseXorEPNS0_7IsolateENS0_6HandleINS0_6BigIntEEES6_(%"class.v8::internal::Isolate"*, i64*, i64*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::function", align 8
  %5 = alloca %"class.std::__1::function", align 8
  %6 = alloca %"class.std::__1::function", align 8
  %7 = ptrtoint i64* %1 to i64
  %8 = ptrtoint i64* %2 to i64
  %9 = load i64, i64* %1, align 8
  %10 = add i64 %9, 3
  %11 = inttoptr i64 %10 to i32*
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 1
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %36

15:                                               ; preds = %3
  %16 = load i64, i64* %2, align 8
  %17 = add i64 %16, 3
  %18 = inttoptr i64 %17 to i32*
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = and i32 %19, 1
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %36

22:                                               ; preds = %15
  %23 = bitcast %"class.std::__1::function"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %23) #13
  %24 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %4, i64 0, i32 0, i32 1, i32 0
  %25 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %4, i64 0, i32 0, i32 2
  store i64 (%"union.std::__1::__function::__policy_storage"*, i64, i64)* @"_ZNSt3__110__function16__policy_invokerIFmmmEE11__call_implINS0_20__default_alloc_funcIZN2v88internal13MutableBigInt11AbsoluteXorEPNS7_7IsolateENS7_6HandleINS7_10BigIntBaseEEESD_S8_E3$_3S2_EEEEmPKNS0_16__policy_storageEmm", i64 (%"union.std::__1::__function::__policy_storage"*, i64, i64)** %24, align 8
  store %"struct.std::__1::__function::__policy"* @"_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN2v88internal13MutableBigInt11AbsoluteXorEPNS5_7IsolateENS5_6HandleINS5_10BigIntBaseEEESB_S6_E3$_3FmmmEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_", %"struct.std::__1::__function::__policy"** %25, align 8
  %26 = call i64* @_ZN2v88internal13MutableBigInt17AbsoluteBitwiseOpEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEES6_S1_NS1_19ExtraDigitsHandlingENS1_11SymmetricOpERKNSt3__18functionIFmmmEEE(%"class.v8::internal::Isolate"* %0, i64* %1, i64* %2, i64 0, i32 0, i32 0, %"class.std::__1::function"* nonnull dereferenceable(32) %4) #13
  %27 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %25, align 8
  %28 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %27, i64 0, i32 1
  %29 = load void (i8*)*, void (i8*)** %28, align 8
  %30 = icmp eq void (i8*)* %29, null
  br i1 %30, label %34, label %31

31:                                               ; preds = %22
  %32 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %4, i64 0, i32 0, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  call void %29(i8* %33) #13
  br label %34

34:                                               ; preds = %22, %31
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %23) #13
  %35 = ptrtoint i64* %26 to i64
  br label %120

36:                                               ; preds = %15, %3
  %37 = load atomic i32, i32* %11 monotonic, align 4
  %38 = and i32 %37, 1
  %39 = icmp eq i32 %38, 0
  %40 = load i64, i64* %2, align 8
  %41 = add i64 %40, 3
  %42 = inttoptr i64 %41 to i32*
  br i1 %39, label %84, label %43

43:                                               ; preds = %36
  %44 = load atomic i32, i32* %42 monotonic, align 4
  %45 = and i32 %44, 1
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %84, label %47

47:                                               ; preds = %43
  %48 = load atomic i32, i32* %11 monotonic, align 4
  %49 = lshr i32 %48, 1
  %50 = and i32 %49, 1073741823
  %51 = load atomic i32, i32* %42 monotonic, align 4
  %52 = lshr i32 %51, 1
  %53 = and i32 %52, 1073741823
  %54 = icmp ult i32 %50, %53
  %55 = select i1 %54, i32 %53, i32 %50
  %56 = tail call i64* @_ZN2v88internal13MutableBigInt14AbsoluteSubOneEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEEi(%"class.v8::internal::Isolate"* %0, i64* %1, i32 %55)
  %57 = icmp eq i64* %56, null
  br i1 %57, label %58, label %59, !prof !2

58:                                               ; preds = %47
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0)) #14
  unreachable

59:                                               ; preds = %47
  %60 = load i64, i64* %2, align 8
  %61 = add i64 %60, 3
  %62 = inttoptr i64 %61 to i32*
  %63 = load atomic i32, i32* %62 monotonic, align 4
  %64 = lshr i32 %63, 1
  %65 = and i32 %64, 1073741823
  %66 = tail call i64* @_ZN2v88internal13MutableBigInt14AbsoluteSubOneEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEEi(%"class.v8::internal::Isolate"* %0, i64* %2, i32 %65) #13
  %67 = icmp eq i64* %66, null
  br i1 %67, label %68, label %69, !prof !2

68:                                               ; preds = %59
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0)) #14
  unreachable

69:                                               ; preds = %59
  %70 = load i64, i64* %56, align 8
  %71 = bitcast %"class.std::__1::function"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %71) #13
  %72 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %5, i64 0, i32 0, i32 1, i32 0
  %73 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %5, i64 0, i32 0, i32 2
  store i64 (%"union.std::__1::__function::__policy_storage"*, i64, i64)* @"_ZNSt3__110__function16__policy_invokerIFmmmEE11__call_implINS0_20__default_alloc_funcIZN2v88internal13MutableBigInt11AbsoluteXorEPNS7_7IsolateENS7_6HandleINS7_10BigIntBaseEEESD_S8_E3$_3S2_EEEEmPKNS0_16__policy_storageEmm", i64 (%"union.std::__1::__function::__policy_storage"*, i64, i64)** %72, align 8
  store %"struct.std::__1::__function::__policy"* @"_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN2v88internal13MutableBigInt11AbsoluteXorEPNS5_7IsolateENS5_6HandleINS5_10BigIntBaseEEESB_S6_E3$_3FmmmEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_", %"struct.std::__1::__function::__policy"** %73, align 8
  %74 = call i64* @_ZN2v88internal13MutableBigInt17AbsoluteBitwiseOpEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEES6_S1_NS1_19ExtraDigitsHandlingENS1_11SymmetricOpERKNSt3__18functionIFmmmEEE(%"class.v8::internal::Isolate"* %0, i64* nonnull %56, i64* nonnull %66, i64 %70, i32 0, i32 0, %"class.std::__1::function"* nonnull dereferenceable(32) %5) #13
  %75 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %73, align 8
  %76 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %75, i64 0, i32 1
  %77 = load void (i8*)*, void (i8*)** %76, align 8
  %78 = icmp eq void (i8*)* %77, null
  br i1 %78, label %82, label %79

79:                                               ; preds = %69
  %80 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %5, i64 0, i32 0, i32 0, i32 0
  %81 = load i8*, i8** %80, align 8
  call void %77(i8* %81) #13
  br label %82

82:                                               ; preds = %69, %79
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %71) #13
  %83 = ptrtoint i64* %74 to i64
  br label %120

84:                                               ; preds = %36, %43
  %85 = load atomic i32, i32* %11 monotonic, align 4
  %86 = lshr i32 %85, 1
  %87 = and i32 %86, 1073741823
  %88 = load atomic i32, i32* %42 monotonic, align 4
  %89 = lshr i32 %88, 1
  %90 = and i32 %89, 1073741823
  %91 = icmp ult i32 %87, %90
  %92 = select i1 %91, i32 %90, i32 %87
  %93 = add nuw nsw i32 %92, 1
  %94 = load atomic i32, i32* %11 monotonic, align 4
  %95 = and i32 %94, 1
  %96 = icmp ne i32 %95, 0
  %97 = select i1 %96, i64 %7, i64 %8
  %98 = inttoptr i64 %97 to i64*
  %99 = tail call i64* @_ZN2v88internal13MutableBigInt14AbsoluteSubOneEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEEi(%"class.v8::internal::Isolate"* %0, i64* %98, i32 %93)
  %100 = icmp eq i64* %99, null
  br i1 %100, label %120, label %101

101:                                              ; preds = %84
  %102 = select i1 %96, i64 %8, i64 %7
  %103 = inttoptr i64 %102 to i64*
  %104 = load i64, i64* %99, align 8
  %105 = bitcast %"class.std::__1::function"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %105) #13
  %106 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %6, i64 0, i32 0, i32 1, i32 0
  %107 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %6, i64 0, i32 0, i32 2
  store i64 (%"union.std::__1::__function::__policy_storage"*, i64, i64)* @"_ZNSt3__110__function16__policy_invokerIFmmmEE11__call_implINS0_20__default_alloc_funcIZN2v88internal13MutableBigInt11AbsoluteXorEPNS7_7IsolateENS7_6HandleINS7_10BigIntBaseEEESD_S8_E3$_3S2_EEEEmPKNS0_16__policy_storageEmm", i64 (%"union.std::__1::__function::__policy_storage"*, i64, i64)** %106, align 8
  store %"struct.std::__1::__function::__policy"* @"_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN2v88internal13MutableBigInt11AbsoluteXorEPNS5_7IsolateENS5_6HandleINS5_10BigIntBaseEEESB_S6_E3$_3FmmmEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_", %"struct.std::__1::__function::__policy"** %107, align 8
  %108 = call i64* @_ZN2v88internal13MutableBigInt17AbsoluteBitwiseOpEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEES6_S1_NS1_19ExtraDigitsHandlingENS1_11SymmetricOpERKNSt3__18functionIFmmmEEE(%"class.v8::internal::Isolate"* %0, i64* nonnull %99, i64* %103, i64 %104, i32 0, i32 0, %"class.std::__1::function"* nonnull dereferenceable(32) %6) #13
  %109 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %107, align 8
  %110 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %109, i64 0, i32 1
  %111 = load void (i8*)*, void (i8*)** %110, align 8
  %112 = icmp eq void (i8*)* %111, null
  br i1 %112, label %116, label %113

113:                                              ; preds = %101
  %114 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %6, i64 0, i32 0, i32 0, i32 0
  %115 = load i8*, i8** %114, align 8
  call void %111(i8* %115) #13
  br label %116

116:                                              ; preds = %101, %113
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %105) #13
  %117 = load i64, i64* %108, align 8
  %118 = call i64* @_ZN2v88internal13MutableBigInt14AbsoluteAddOneEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEEbS1_(%"class.v8::internal::Isolate"* %0, i64* %108, i1 zeroext true, i64 %117)
  %119 = ptrtoint i64* %118 to i64
  br label %120

120:                                              ; preds = %116, %84, %82, %34
  %121 = phi i64 [ %83, %82 ], [ %35, %34 ], [ %119, %116 ], [ 0, %84 ]
  %122 = inttoptr i64 %121 to i64*
  ret i64* %122
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal13MutableBigInt11AbsoluteXorEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEES6_S1_(%"class.v8::internal::Isolate"*, i64*, i64*, i64) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.std::__1::function", align 8
  %6 = bitcast %"class.std::__1::function"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #13
  %7 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %5, i64 0, i32 0, i32 1, i32 0
  %8 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %5, i64 0, i32 0, i32 2
  store i64 (%"union.std::__1::__function::__policy_storage"*, i64, i64)* @"_ZNSt3__110__function16__policy_invokerIFmmmEE11__call_implINS0_20__default_alloc_funcIZN2v88internal13MutableBigInt11AbsoluteXorEPNS7_7IsolateENS7_6HandleINS7_10BigIntBaseEEESD_S8_E3$_3S2_EEEEmPKNS0_16__policy_storageEmm", i64 (%"union.std::__1::__function::__policy_storage"*, i64, i64)** %7, align 8
  store %"struct.std::__1::__function::__policy"* @"_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN2v88internal13MutableBigInt11AbsoluteXorEPNS5_7IsolateENS5_6HandleINS5_10BigIntBaseEEESB_S6_E3$_3FmmmEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_", %"struct.std::__1::__function::__policy"** %8, align 8
  %9 = call i64* @_ZN2v88internal13MutableBigInt17AbsoluteBitwiseOpEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEES6_S1_NS1_19ExtraDigitsHandlingENS1_11SymmetricOpERKNSt3__18functionIFmmmEEE(%"class.v8::internal::Isolate"* %0, i64* %1, i64* %2, i64 %3, i32 0, i32 0, %"class.std::__1::function"* nonnull dereferenceable(32) %5)
  %10 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %8, align 8
  %11 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %10, i64 0, i32 1
  %12 = load void (i8*)*, void (i8*)** %11, align 8
  %13 = icmp eq void (i8*)* %12, null
  br i1 %13, label %17, label %14

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %5, i64 0, i32 0, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  call void %12(i8* %16) #13
  br label %17

17:                                               ; preds = %4, %14
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #13
  ret i64* %9
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal6BigInt9BitwiseOrEPNS0_7IsolateENS0_6HandleIS1_EES5_(%"class.v8::internal::Isolate"*, i64*, i64*) local_unnamed_addr #0 align 2 {
  %4 = tail call i64* @_ZN2v88internal13MutableBigInt9BitwiseOrEPNS0_7IsolateENS0_6HandleINS0_6BigIntEEES6_(%"class.v8::internal::Isolate"* %0, i64* %1, i64* %2)
  %5 = tail call i64* @_ZN2v88internal13MutableBigInt13MakeImmutableENS0_11MaybeHandleIS1_EE(i64* %4)
  ret i64* %5
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal13MutableBigInt9BitwiseOrEPNS0_7IsolateENS0_6HandleINS0_6BigIntEEES6_(%"class.v8::internal::Isolate"*, i64*, i64*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::function", align 8
  %5 = alloca %"class.std::__1::function", align 8
  %6 = alloca %"class.std::__1::function", align 8
  %7 = ptrtoint i64* %1 to i64
  %8 = ptrtoint i64* %2 to i64
  %9 = load i64, i64* %1, align 8
  %10 = add i64 %9, 3
  %11 = inttoptr i64 %10 to i32*
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = lshr i32 %12, 1
  %14 = and i32 %13, 1073741823
  %15 = load i64, i64* %2, align 8
  %16 = add i64 %15, 3
  %17 = inttoptr i64 %16 to i32*
  %18 = load atomic i32, i32* %17 monotonic, align 4
  %19 = lshr i32 %18, 1
  %20 = and i32 %19, 1073741823
  %21 = icmp ult i32 %14, %20
  %22 = select i1 %21, i32 %20, i32 %14
  %23 = load atomic i32, i32* %11 monotonic, align 4
  %24 = and i32 %23, 1
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %43

26:                                               ; preds = %3
  %27 = load atomic i32, i32* %17 monotonic, align 4
  %28 = and i32 %27, 1
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %43

30:                                               ; preds = %26
  %31 = bitcast %"class.std::__1::function"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %31) #13
  %32 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %4, i64 0, i32 0, i32 1, i32 0
  %33 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %4, i64 0, i32 0, i32 2
  store i64 (%"union.std::__1::__function::__policy_storage"*, i64, i64)* @"_ZNSt3__110__function16__policy_invokerIFmmmEE11__call_implINS0_20__default_alloc_funcIZN2v88internal13MutableBigInt10AbsoluteOrEPNS7_7IsolateENS7_6HandleINS7_10BigIntBaseEEESD_S8_E3$_2S2_EEEEmPKNS0_16__policy_storageEmm", i64 (%"union.std::__1::__function::__policy_storage"*, i64, i64)** %32, align 8
  store %"struct.std::__1::__function::__policy"* @"_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN2v88internal13MutableBigInt10AbsoluteOrEPNS5_7IsolateENS5_6HandleINS5_10BigIntBaseEEESB_S6_E3$_2FmmmEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_", %"struct.std::__1::__function::__policy"** %33, align 8
  %34 = call i64* @_ZN2v88internal13MutableBigInt17AbsoluteBitwiseOpEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEES6_S1_NS1_19ExtraDigitsHandlingENS1_11SymmetricOpERKNSt3__18functionIFmmmEEE(%"class.v8::internal::Isolate"* %0, i64* %1, i64* %2, i64 0, i32 0, i32 0, %"class.std::__1::function"* nonnull dereferenceable(32) %4) #13
  %35 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %33, align 8
  %36 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %35, i64 0, i32 1
  %37 = load void (i8*)*, void (i8*)** %36, align 8
  %38 = icmp eq void (i8*)* %37, null
  br i1 %38, label %42, label %39

39:                                               ; preds = %30
  %40 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %4, i64 0, i32 0, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  call void %37(i8* %41) #13
  br label %42

42:                                               ; preds = %30, %39
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %31) #13
  br label %108

43:                                               ; preds = %26, %3
  %44 = load atomic i32, i32* %11 monotonic, align 4
  %45 = and i32 %44, 1
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %81, label %47

47:                                               ; preds = %43
  %48 = load atomic i32, i32* %17 monotonic, align 4
  %49 = and i32 %48, 1
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %81, label %51

51:                                               ; preds = %47
  %52 = tail call i64* @_ZN2v88internal13MutableBigInt14AbsoluteSubOneEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEEi(%"class.v8::internal::Isolate"* %0, i64* %1, i32 %22)
  %53 = icmp eq i64* %52, null
  br i1 %53, label %54, label %55, !prof !2

54:                                               ; preds = %51
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0)) #14
  unreachable

55:                                               ; preds = %51
  %56 = load i64, i64* %2, align 8
  %57 = add i64 %56, 3
  %58 = inttoptr i64 %57 to i32*
  %59 = load atomic i32, i32* %58 monotonic, align 4
  %60 = lshr i32 %59, 1
  %61 = and i32 %60, 1073741823
  %62 = tail call i64* @_ZN2v88internal13MutableBigInt14AbsoluteSubOneEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEEi(%"class.v8::internal::Isolate"* %0, i64* %2, i32 %61) #13
  %63 = icmp eq i64* %62, null
  br i1 %63, label %64, label %65, !prof !2

64:                                               ; preds = %55
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0)) #14
  unreachable

65:                                               ; preds = %55
  %66 = load i64, i64* %52, align 8
  %67 = bitcast %"class.std::__1::function"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %67) #13
  %68 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %5, i64 0, i32 0, i32 1, i32 0
  %69 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %5, i64 0, i32 0, i32 2
  store i64 (%"union.std::__1::__function::__policy_storage"*, i64, i64)* @"_ZNSt3__110__function16__policy_invokerIFmmmEE11__call_implINS0_20__default_alloc_funcIZN2v88internal13MutableBigInt11AbsoluteAndEPNS7_7IsolateENS7_6HandleINS7_10BigIntBaseEEESD_S8_E3$_0S2_EEEEmPKNS0_16__policy_storageEmm", i64 (%"union.std::__1::__function::__policy_storage"*, i64, i64)** %68, align 8
  store %"struct.std::__1::__function::__policy"* @"_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN2v88internal13MutableBigInt11AbsoluteAndEPNS5_7IsolateENS5_6HandleINS5_10BigIntBaseEEESB_S6_E3$_0FmmmEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_", %"struct.std::__1::__function::__policy"** %69, align 8
  %70 = call i64* @_ZN2v88internal13MutableBigInt17AbsoluteBitwiseOpEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEES6_S1_NS1_19ExtraDigitsHandlingENS1_11SymmetricOpERKNSt3__18functionIFmmmEEE(%"class.v8::internal::Isolate"* %0, i64* nonnull %52, i64* nonnull %62, i64 %66, i32 1, i32 0, %"class.std::__1::function"* nonnull dereferenceable(32) %5) #13
  %71 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %69, align 8
  %72 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %71, i64 0, i32 1
  %73 = load void (i8*)*, void (i8*)** %72, align 8
  %74 = icmp eq void (i8*)* %73, null
  br i1 %74, label %78, label %75

75:                                               ; preds = %65
  %76 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %5, i64 0, i32 0, i32 0, i32 0
  %77 = load i8*, i8** %76, align 8
  call void %73(i8* %77) #13
  br label %78

78:                                               ; preds = %65, %75
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %67) #13
  %79 = load i64, i64* %70, align 8
  %80 = call i64* @_ZN2v88internal13MutableBigInt14AbsoluteAddOneEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEEbS1_(%"class.v8::internal::Isolate"* %0, i64* %70, i1 zeroext true, i64 %79)
  br label %108

81:                                               ; preds = %47, %43
  %82 = load atomic i32, i32* %11 monotonic, align 4
  %83 = and i32 %82, 1
  %84 = icmp ne i32 %83, 0
  %85 = select i1 %84, i64 %7, i64 %8
  %86 = inttoptr i64 %85 to i64*
  %87 = tail call i64* @_ZN2v88internal13MutableBigInt14AbsoluteSubOneEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEEi(%"class.v8::internal::Isolate"* %0, i64* %86, i32 %22)
  %88 = icmp eq i64* %87, null
  br i1 %88, label %89, label %90, !prof !2

89:                                               ; preds = %81
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0)) #14
  unreachable

90:                                               ; preds = %81
  %91 = select i1 %84, i64 %8, i64 %7
  %92 = inttoptr i64 %91 to i64*
  %93 = load i64, i64* %87, align 8
  %94 = bitcast %"class.std::__1::function"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %94) #13
  %95 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %6, i64 0, i32 0, i32 1, i32 0
  %96 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %6, i64 0, i32 0, i32 2
  store i64 (%"union.std::__1::__function::__policy_storage"*, i64, i64)* @"_ZNSt3__110__function16__policy_invokerIFmmmEE11__call_implINS0_20__default_alloc_funcIZN2v88internal13MutableBigInt14AbsoluteAndNotEPNS7_7IsolateENS7_6HandleINS7_10BigIntBaseEEESD_S8_E3$_1S2_EEEEmPKNS0_16__policy_storageEmm", i64 (%"union.std::__1::__function::__policy_storage"*, i64, i64)** %95, align 8
  store %"struct.std::__1::__function::__policy"* @"_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN2v88internal13MutableBigInt14AbsoluteAndNotEPNS5_7IsolateENS5_6HandleINS5_10BigIntBaseEEESB_S6_E3$_1FmmmEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_", %"struct.std::__1::__function::__policy"** %96, align 8
  %97 = call i64* @_ZN2v88internal13MutableBigInt17AbsoluteBitwiseOpEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEES6_S1_NS1_19ExtraDigitsHandlingENS1_11SymmetricOpERKNSt3__18functionIFmmmEEE(%"class.v8::internal::Isolate"* %0, i64* nonnull %87, i64* %92, i64 %93, i32 0, i32 1, %"class.std::__1::function"* nonnull dereferenceable(32) %6) #13
  %98 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %96, align 8
  %99 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %98, i64 0, i32 1
  %100 = load void (i8*)*, void (i8*)** %99, align 8
  %101 = icmp eq void (i8*)* %100, null
  br i1 %101, label %105, label %102

102:                                              ; preds = %90
  %103 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %6, i64 0, i32 0, i32 0, i32 0
  %104 = load i8*, i8** %103, align 8
  call void %100(i8* %104) #13
  br label %105

105:                                              ; preds = %90, %102
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %94) #13
  %106 = load i64, i64* %97, align 8
  %107 = call i64* @_ZN2v88internal13MutableBigInt14AbsoluteAddOneEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEEbS1_(%"class.v8::internal::Isolate"* %0, i64* %97, i1 zeroext true, i64 %106)
  br label %108

108:                                              ; preds = %105, %78, %42
  %109 = phi i64* [ %80, %78 ], [ %107, %105 ], [ %34, %42 ]
  ret i64* %109
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal6BigInt9IncrementEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"*, i64*) local_unnamed_addr #0 align 2 {
  %3 = load i64, i64* %1, align 8
  %4 = add i64 %3, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load atomic i32, i32* %5 monotonic, align 4
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %69, label %9

9:                                                ; preds = %2
  %10 = load atomic i32, i32* %5 monotonic, align 4
  %11 = lshr i32 %10, 1
  %12 = and i32 %11, 1073741823
  %13 = tail call i64* @_ZN2v88internal13MutableBigInt14AbsoluteSubOneEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEEi(%"class.v8::internal::Isolate"* %0, i64* %1, i32 %12) #13
  %14 = icmp eq i64* %13, null
  br i1 %14, label %15, label %16, !prof !2

15:                                               ; preds = %9
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0)) #14
  unreachable

16:                                               ; preds = %9
  %17 = load i64, i64* %13, align 8
  %18 = add i64 %17, 3
  %19 = inttoptr i64 %18 to i32*
  %20 = load atomic i32, i32* %19 monotonic, align 4
  %21 = or i32 %20, 1
  store atomic volatile i32 %21, i32* %19 monotonic, align 4
  %22 = load i64, i64* %13, align 8
  %23 = add i64 %22, 3
  %24 = inttoptr i64 %23 to i32*
  %25 = load atomic i32, i32* %24 monotonic, align 4
  %26 = lshr i32 %25, 1
  %27 = and i32 %26, 1073741823
  %28 = zext i32 %27 to i64
  br label %29

29:                                               ; preds = %32, %16
  %30 = phi i64 [ %33, %32 ], [ %28, %16 ]
  %31 = icmp sgt i64 %30, 0
  br i1 %31, label %32, label %42

32:                                               ; preds = %29
  %33 = add nsw i64 %30, -1
  %34 = trunc i64 %33 to i32
  %35 = shl nsw i32 %34, 3
  %36 = or i32 %35, 7
  %37 = sext i32 %36 to i64
  %38 = add i64 %22, %37
  %39 = inttoptr i64 %38 to i64*
  %40 = load i64, i64* %39, align 1
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %29, label %42

42:                                               ; preds = %32, %29
  %43 = trunc i64 %30 to i32
  %44 = sub nsw i32 %27, %43
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %72, label %46

46:                                               ; preds = %42
  %47 = and i64 %22, -262144
  %48 = or i64 %47, 16
  %49 = inttoptr i64 %48 to %"class.v8::internal::Heap"**
  %50 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %49, align 16
  %51 = tail call zeroext i1 @_ZN2v88internal4Heap13IsLargeObjectENS0_10HeapObjectE(i64 %22) #13
  br i1 %51, label %60, label %52

52:                                               ; preds = %46
  %53 = shl i32 %43, 3
  %54 = add nsw i32 %53, 8
  %55 = add i64 %22, -1
  %56 = sext i32 %54 to i64
  %57 = add i64 %55, %56
  %58 = shl nsw i32 %44, 3
  %59 = tail call i64 @_ZN2v88internal4Heap20CreateFillerObjectAtEmiNS0_18ClearRecordedSlotsE(%"class.v8::internal::Heap"* %50, i64 %57, i32 %58, i32 1) #13
  br label %60

60:                                               ; preds = %52, %46
  %61 = load atomic i32, i32* %24 monotonic, align 4
  %62 = and i32 %61, -2147483647
  %63 = shl i32 %43, 1
  %64 = or i32 %62, %63
  store atomic volatile i32 %64, i32* %24 release, align 4
  %65 = icmp eq i32 %43, 0
  br i1 %65, label %66, label %72

66:                                               ; preds = %60
  %67 = load atomic i32, i32* %24 monotonic, align 4
  %68 = and i32 %67, -2
  store atomic volatile i32 %68, i32* %24 monotonic, align 4
  br label %72

69:                                               ; preds = %2
  %70 = tail call i64* @_ZN2v88internal13MutableBigInt14AbsoluteAddOneEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEEbS1_(%"class.v8::internal::Isolate"* %0, i64* %1, i1 zeroext false, i64 0)
  %71 = tail call i64* @_ZN2v88internal13MutableBigInt13MakeImmutableENS0_11MaybeHandleIS1_EE(i64* %70)
  br label %72

72:                                               ; preds = %66, %60, %42, %69
  %73 = phi i64* [ %71, %69 ], [ %13, %42 ], [ %13, %60 ], [ %13, %66 ]
  ret i64* %73
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal6BigInt9DecrementEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"*, i64*) local_unnamed_addr #0 align 2 {
  %3 = load i64, i64* %1, align 8
  %4 = add i64 %3, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load atomic i32, i32* %5 monotonic, align 4
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %2
  %10 = tail call i64* @_ZN2v88internal13MutableBigInt14AbsoluteAddOneEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEEbS1_(%"class.v8::internal::Isolate"* %0, i64* %1, i1 zeroext true, i64 0)
  br label %24

11:                                               ; preds = %2
  %12 = load atomic i32, i32* %5 monotonic, align 4
  %13 = and i32 %12, 2147483646
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %11
  %16 = tail call i64* @_ZN2v88internal13MutableBigInt10NewFromIntEPNS0_7IsolateEi(%"class.v8::internal::Isolate"* %0, i32 -1)
  br label %27

17:                                               ; preds = %11
  %18 = load atomic i32, i32* %5 monotonic, align 4
  %19 = lshr i32 %18, 1
  %20 = and i32 %19, 1073741823
  %21 = tail call i64* @_ZN2v88internal13MutableBigInt14AbsoluteSubOneEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEEi(%"class.v8::internal::Isolate"* %0, i64* %1, i32 %20) #13
  %22 = icmp eq i64* %21, null
  br i1 %22, label %23, label %24, !prof !2

23:                                               ; preds = %17
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0)) #14
  unreachable

24:                                               ; preds = %17, %9
  %25 = phi i64* [ %10, %9 ], [ %21, %17 ]
  %26 = tail call i64* @_ZN2v88internal13MutableBigInt13MakeImmutableENS0_11MaybeHandleIS1_EE(i64* %25)
  br label %27

27:                                               ; preds = %24, %15
  %28 = phi i64* [ %26, %24 ], [ %16, %15 ]
  ret i64* %28
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN2v88internal6BigInt15CompareToStringEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_6StringEEE(%"class.v8::internal::Isolate"*, i64* nocapture readonly, i64*) local_unnamed_addr #0 align 2 {
  %4 = tail call i64* @_ZN2v88internal14StringToBigIntEPNS0_7IsolateENS0_6HandleINS0_6StringEEE(%"class.v8::internal::Isolate"* %0, i64* %2) #13
  %5 = icmp eq i64* %4, null
  br i1 %5, label %6, label %15

6:                                                ; preds = %3
  %7 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 7, i32 0, i64 5
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 9, i32 4, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = trunc i64 %10 to i32
  %12 = trunc i64 %8 to i32
  %13 = icmp eq i32 %11, %12
  %14 = select i1 %13, i64 12884901889, i64 0
  ret i64 %14

15:                                               ; preds = %3
  %16 = load i64, i64* %1, align 8
  %17 = add i64 %16, 3
  %18 = inttoptr i64 %17 to i32*
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = and i32 %19, 1
  %21 = icmp ne i32 %20, 0
  %22 = load i64, i64* %4, align 8
  %23 = add i64 %22, 3
  %24 = inttoptr i64 %23 to i32*
  %25 = load atomic i32, i32* %24 monotonic, align 4
  %26 = and i32 %25, 1
  %27 = icmp ne i32 %26, 0
  %28 = xor i1 %21, %27
  br i1 %28, label %46, label %29

29:                                               ; preds = %15
  %30 = add i64 %16, 7
  %31 = inttoptr i64 %30 to i64*
  %32 = load atomic i32, i32* %18 monotonic, align 4
  %33 = lshr i32 %32, 1
  %34 = and i32 %33, 1073741823
  %35 = add i64 %22, 7
  %36 = inttoptr i64 %35 to i64*
  %37 = load atomic i32, i32* %24 monotonic, align 4
  %38 = lshr i32 %37, 1
  %39 = and i32 %38, 1073741823
  %40 = tail call i32 @_ZN2v86bigint7CompareENS0_6DigitsES1_(i64* %31, i32 %34, i64* %36, i32 %39) #13
  %41 = icmp sgt i32 %40, 0
  br i1 %41, label %46, label %42

42:                                               ; preds = %29
  %43 = icmp eq i32 %40, 0
  %44 = shl nuw nsw i32 %20, 1
  %45 = select i1 %43, i32 1, i32 %44
  br label %49

46:                                               ; preds = %29, %15
  %47 = shl nuw nsw i32 %20, 1
  %48 = xor i32 %47, 2
  br label %49

49:                                               ; preds = %46, %42
  %50 = phi i32 [ %45, %42 ], [ %48, %46 ]
  %51 = zext i32 %50 to i64
  %52 = shl nuw i64 %51, 32
  %53 = or i64 %52, 1
  ret i64 %53
}

declare i64* @_ZN2v88internal14StringToBigIntEPNS0_7IsolateENS0_6HandleINS0_6StringEEE(%"class.v8::internal::Isolate"*, i64*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i16 @_ZN2v88internal6BigInt13EqualToStringEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_6StringEEE(%"class.v8::internal::Isolate"*, i64*, i64*) local_unnamed_addr #0 align 2 {
  %4 = tail call i64* @_ZN2v88internal14StringToBigIntEPNS0_7IsolateENS0_6HandleINS0_6StringEEE(%"class.v8::internal::Isolate"* %0, i64* %2) #13
  %5 = icmp eq i64* %4, null
  br i1 %5, label %6, label %15

6:                                                ; preds = %3
  %7 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 7, i32 0, i64 5
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 9, i32 4, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = trunc i64 %10 to i32
  %12 = trunc i64 %8 to i32
  %13 = icmp eq i32 %11, %12
  %14 = zext i1 %13 to i16
  ret i16 %14

15:                                               ; preds = %3
  %16 = load i64, i64* %1, align 8
  %17 = load i64, i64* %4, align 8
  %18 = add i64 %16, 3
  %19 = inttoptr i64 %18 to i32*
  %20 = load atomic i32, i32* %19 monotonic, align 4
  %21 = and i32 %20, 1
  %22 = icmp ne i32 %21, 0
  %23 = add i64 %17, 3
  %24 = inttoptr i64 %23 to i32*
  %25 = load atomic i32, i32* %24 monotonic, align 4
  %26 = and i32 %25, 1
  %27 = icmp ne i32 %26, 0
  %28 = xor i1 %22, %27
  br i1 %28, label %58, label %29

29:                                               ; preds = %15
  %30 = load atomic i32, i32* %19 monotonic, align 4
  %31 = load atomic i32, i32* %24 monotonic, align 4
  %32 = xor i32 %31, %30
  %33 = and i32 %32, 2147483646
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %58

35:                                               ; preds = %29
  %36 = load atomic i32, i32* %19 monotonic, align 4
  %37 = and i32 %36, 2147483646
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %58, label %45

39:                                               ; preds = %45
  %40 = load atomic i32, i32* %19 monotonic, align 4
  %41 = lshr i32 %40, 1
  %42 = and i32 %41, 1073741823
  %43 = zext i32 %42 to i64
  %44 = icmp ult i64 %57, %43
  br i1 %44, label %45, label %58

45:                                               ; preds = %35, %39
  %46 = phi i64 [ %57, %39 ], [ 0, %35 ]
  %47 = shl i64 %46, 3
  %48 = and i64 %47, 4294967288
  %49 = or i64 %48, 7
  %50 = add i64 %49, %16
  %51 = inttoptr i64 %50 to i64*
  %52 = load i64, i64* %51, align 1
  %53 = add i64 %49, %17
  %54 = inttoptr i64 %53 to i64*
  %55 = load i64, i64* %54, align 1
  %56 = icmp eq i64 %52, %55
  %57 = add nuw nsw i64 %46, 1
  br i1 %56, label %39, label %58

58:                                               ; preds = %39, %45, %15, %29, %35
  %59 = phi i16 [ 1, %29 ], [ 1, %15 ], [ 257, %35 ], [ 257, %39 ], [ 1, %45 ]
  ret i16 %59
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal6BigInt13EqualToNumberENS0_6HandleIS1_EENS2_INS0_6ObjectEEE(i64*, i64*) local_unnamed_addr #0 align 2 {
  %3 = load i64, i64* %1, align 8
  %4 = and i64 %3, 1
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %6, label %33

6:                                                ; preds = %2
  %7 = trunc i64 %3 to i32
  %8 = ashr i32 %7, 1
  %9 = icmp eq i32 %8, 0
  %10 = load i64, i64* %0, align 8
  %11 = add i64 %10, 3
  %12 = inttoptr i64 %11 to i32*
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 2147483646
  br i1 %9, label %15, label %17

15:                                               ; preds = %6
  %16 = icmp eq i32 %14, 0
  br label %39

17:                                               ; preds = %6
  %18 = icmp eq i32 %14, 2
  br i1 %18, label %19, label %39

19:                                               ; preds = %17
  %20 = load atomic i32, i32* %12 monotonic, align 4
  %21 = and i32 %20, 1
  %22 = lshr i32 %8, 31
  %23 = icmp eq i32 %22, %21
  br i1 %23, label %24, label %39

24:                                               ; preds = %19
  %25 = add i64 %10, 7
  %26 = inttoptr i64 %25 to i64*
  %27 = load i64, i64* %26, align 1
  %28 = sext i32 %8 to i64
  %29 = sub nsw i64 0, %28
  %30 = icmp slt i64 %28, 0
  %31 = select i1 %30, i64 %29, i64 %28
  %32 = icmp eq i64 %27, %31
  br label %39

33:                                               ; preds = %2
  %34 = add i64 %3, 3
  %35 = inttoptr i64 %34 to double*
  %36 = load double, double* %35, align 1
  %37 = tail call i32 @_ZN2v88internal6BigInt15CompareToDoubleENS0_6HandleIS1_EEd(i64* %0, double %36)
  %38 = icmp eq i32 %37, 1
  br label %39

39:                                               ; preds = %17, %19, %24, %15, %33
  %40 = phi i1 [ %38, %33 ], [ %16, %15 ], [ false, %19 ], [ false, %17 ], [ %32, %24 ]
  ret i1 %40
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal6BigInt15CompareToDoubleENS0_6HandleIS1_EEd(i64*, double) local_unnamed_addr #0 align 2 {
  %3 = bitcast double %1 to i64
  %4 = fcmp uno double %1, 0.000000e+00
  br i1 %4, label %130, label %5

5:                                                ; preds = %2
  %6 = fcmp oeq double %1, 0x7FF0000000000000
  br i1 %6, label %130, label %7

7:                                                ; preds = %5
  %8 = fcmp oeq double %1, 0xFFF0000000000000
  br i1 %8, label %130, label %9

9:                                                ; preds = %7
  %10 = load i64, i64* %0, align 8
  %11 = add i64 %10, 3
  %12 = inttoptr i64 %11 to i32*
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 1
  %15 = icmp ne i32 %14, 0
  %16 = fcmp olt double %1, 0.000000e+00
  %17 = xor i1 %16, %15
  br i1 %17, label %18, label %21

18:                                               ; preds = %9
  %19 = shl nuw nsw i32 %14, 1
  %20 = xor i32 %19, 2
  br label %130

21:                                               ; preds = %9
  %22 = fcmp oeq double %1, 0.000000e+00
  %23 = load atomic i32, i32* %12 monotonic, align 4
  %24 = and i32 %23, 2147483646
  %25 = icmp eq i32 %24, 0
  br i1 %22, label %26, label %28

26:                                               ; preds = %21
  %27 = select i1 %25, i32 1, i32 2
  br label %130

28:                                               ; preds = %21
  br i1 %25, label %130, label %29

29:                                               ; preds = %28
  %30 = lshr i64 %3, 52
  %31 = trunc i64 %30 to i32
  %32 = and i32 %31, 2047
  %33 = and i64 %3, 4503599627370495
  %34 = icmp ult i32 %32, 1023
  br i1 %34, label %35, label %38

35:                                               ; preds = %29
  %36 = shl nuw nsw i32 %14, 1
  %37 = xor i32 %36, 2
  br label %130

38:                                               ; preds = %29
  %39 = load atomic i32, i32* %12 monotonic, align 4
  %40 = lshr i32 %39, 1
  %41 = and i32 %40, 1073741823
  %42 = shl i32 %40, 3
  %43 = add i32 %42, -8
  %44 = or i32 %43, 7
  %45 = sext i32 %44 to i64
  %46 = add i64 %10, %45
  %47 = inttoptr i64 %46 to i64*
  %48 = load i64, i64* %47, align 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %53, label %50

50:                                               ; preds = %38
  %51 = tail call i64 @llvm.ctlz.i64(i64 %48, i1 true) #13, !range !5
  %52 = trunc i64 %51 to i32
  br label %53

53:                                               ; preds = %38, %50
  %54 = phi i32 [ %52, %50 ], [ 64, %38 ]
  %55 = shl nsw i32 %41, 6
  %56 = sub nsw i32 %55, %54
  %57 = add nsw i32 %32, -1022
  %58 = icmp slt i32 %56, %57
  br i1 %58, label %59, label %61

59:                                               ; preds = %53
  %60 = shl nuw nsw i32 %14, 1
  br label %130

61:                                               ; preds = %53
  %62 = icmp sgt i32 %56, %57
  br i1 %62, label %63, label %66

63:                                               ; preds = %61
  %64 = shl nuw nsw i32 %14, 1
  %65 = xor i32 %64, 2
  br label %130

66:                                               ; preds = %61
  %67 = or i64 %33, 4503599627370496
  %68 = icmp sgt i32 %54, 11
  br i1 %68, label %69, label %76

69:                                               ; preds = %66
  %70 = add nsw i32 %54, -11
  %71 = zext i32 %70 to i64
  %72 = lshr i64 %67, %71
  %73 = sub nsw i32 75, %54
  %74 = zext i32 %73 to i64
  %75 = shl i64 %67, %74
  br label %80

76:                                               ; preds = %66
  %77 = sub nsw i32 11, %54
  %78 = zext i32 %77 to i64
  %79 = shl i64 %67, %78
  br label %80

80:                                               ; preds = %76, %69
  %81 = phi i64 [ %75, %69 ], [ 0, %76 ]
  %82 = phi i64 [ %72, %69 ], [ %79, %76 ]
  %83 = phi i32 [ %70, %69 ], [ 0, %76 ]
  %84 = icmp ugt i64 %48, %82
  br i1 %84, label %85, label %88

85:                                               ; preds = %80
  %86 = shl nuw nsw i32 %14, 1
  %87 = xor i32 %86, 2
  br label %130

88:                                               ; preds = %80
  %89 = icmp ult i64 %48, %82
  br i1 %89, label %90, label %92

90:                                               ; preds = %88
  %91 = shl nuw nsw i32 %14, 1
  br label %130

92:                                               ; preds = %88
  %93 = icmp ugt i32 %41, 1
  br i1 %93, label %94, label %125

94:                                               ; preds = %92
  %95 = and i32 %40, 1073741823
  %96 = zext i32 %95 to i64
  %97 = add nsw i64 %96, -2
  br label %103

98:                                               ; preds = %120
  %99 = add i64 %104, -1
  %100 = add nsw i32 %105, -64
  %101 = select i1 %107, i32 %100, i32 %105
  %102 = icmp sgt i64 %104, 0
  br i1 %102, label %103, label %125

103:                                              ; preds = %94, %98
  %104 = phi i64 [ %97, %94 ], [ %99, %98 ]
  %105 = phi i32 [ %83, %94 ], [ %101, %98 ]
  %106 = phi i64 [ %81, %94 ], [ %121, %98 ]
  %107 = icmp sgt i32 %105, 0
  %108 = select i1 %107, i64 %106, i64 0
  %109 = trunc i64 %104 to i32
  %110 = shl nsw i32 %109, 3
  %111 = or i32 %110, 7
  %112 = sext i32 %111 to i64
  %113 = add i64 %10, %112
  %114 = inttoptr i64 %113 to i64*
  %115 = load i64, i64* %114, align 1
  %116 = icmp ugt i64 %115, %108
  br i1 %116, label %117, label %120

117:                                              ; preds = %103
  %118 = shl nuw nsw i32 %14, 1
  %119 = xor i32 %118, 2
  br label %130

120:                                              ; preds = %103
  %121 = select i1 %107, i64 0, i64 %106
  %122 = icmp ult i64 %115, %108
  br i1 %122, label %123, label %98

123:                                              ; preds = %120
  %124 = shl nuw nsw i32 %14, 1
  br label %130

125:                                              ; preds = %98, %92
  %126 = phi i64 [ %81, %92 ], [ %121, %98 ]
  %127 = icmp eq i64 %126, 0
  %128 = shl nuw nsw i32 %14, 1
  %129 = select i1 %127, i32 1, i32 %128
  ret i32 %129

130:                                              ; preds = %123, %117, %18, %26, %28, %59, %63, %90, %85, %35, %7, %5, %2
  %131 = phi i32 [ 3, %2 ], [ 0, %5 ], [ 2, %7 ], [ %20, %18 ], [ %27, %26 ], [ 0, %28 ], [ %37, %35 ], [ %60, %59 ], [ %65, %63 ], [ %87, %85 ], [ %91, %90 ], [ %124, %123 ], [ %119, %117 ]
  ret i32 %131
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal6BigInt15CompareToNumberENS0_6HandleIS1_EENS2_INS0_6ObjectEEE(i64*, i64*) local_unnamed_addr #0 align 2 {
  %3 = load i64, i64* %1, align 8
  %4 = and i64 %3, 1
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %6, label %49

6:                                                ; preds = %2
  %7 = load i64, i64* %0, align 8
  %8 = add i64 %7, 3
  %9 = inttoptr i64 %8 to i32*
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 1
  %12 = trunc i64 %3 to i32
  %13 = ashr i32 %12, 1
  %14 = lshr i32 %13, 31
  %15 = icmp eq i32 %14, %11
  br i1 %15, label %19, label %16

16:                                               ; preds = %6
  %17 = shl nuw nsw i32 %11, 1
  %18 = xor i32 %17, 2
  br label %54

19:                                               ; preds = %6
  %20 = load atomic i32, i32* %9 monotonic, align 4
  %21 = and i32 %20, 2147483646
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %19
  %24 = icmp eq i32 %13, 0
  %25 = zext i1 %24 to i32
  br label %54

26:                                               ; preds = %19
  %27 = load atomic i32, i32* %9 monotonic, align 4
  %28 = and i32 %27, 2147483644
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %26
  %31 = shl nuw nsw i32 %11, 1
  %32 = xor i32 %31, 2
  br label %54

33:                                               ; preds = %26
  %34 = sext i32 %13 to i64
  %35 = sub nsw i64 0, %34
  %36 = icmp slt i64 %34, 0
  %37 = select i1 %36, i64 %35, i64 %34
  %38 = add i64 %7, 7
  %39 = inttoptr i64 %38 to i64*
  %40 = load i64, i64* %39, align 1
  %41 = icmp ugt i64 %40, %37
  br i1 %41, label %42, label %45

42:                                               ; preds = %33
  %43 = shl nuw nsw i32 %11, 1
  %44 = xor i32 %43, 2
  br label %54

45:                                               ; preds = %33
  %46 = icmp ult i64 %40, %37
  %47 = shl nuw nsw i32 %11, 1
  %48 = select i1 %46, i32 %47, i32 1
  ret i32 %48

49:                                               ; preds = %2
  %50 = add i64 %3, 3
  %51 = inttoptr i64 %50 to double*
  %52 = load double, double* %51, align 1
  %53 = tail call i32 @_ZN2v88internal6BigInt15CompareToDoubleENS0_6HandleIS1_EEd(i64* %0, double %52)
  br label %54

54:                                               ; preds = %16, %23, %30, %42, %49
  %55 = phi i32 [ %53, %49 ], [ %18, %16 ], [ %25, %23 ], [ %32, %30 ], [ %44, %42 ]
  ret i32 %55
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal6BigInt8ToStringEPNS0_7IsolateENS0_6HandleIS1_EEiNS0_11ShouldThrowE(%"class.v8::internal::Isolate"*, i64*, i32, i32) local_unnamed_addr #0 align 2 {
  %5 = load i64, i64* %1, align 8
  %6 = add i64 %5, 3
  %7 = inttoptr i64 %6 to i32*
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = and i32 %8, 2147483646
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %13

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 7, i32 0, i64 473
  br label %22

13:                                               ; preds = %4
  %14 = icmp sgt i32 %2, 0
  %15 = tail call i32 @llvm.ctpop.i32(i32 %2) #13, !range !6
  %16 = icmp ult i32 %15, 2
  %17 = and i1 %14, %16
  br i1 %17, label %18, label %20

18:                                               ; preds = %13
  %19 = tail call i64* @_ZN2v88internal13MutableBigInt22ToStringBasePowerOfTwoEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEEiNS0_11ShouldThrowE(%"class.v8::internal::Isolate"* %0, i64* %1, i32 %2, i32 %3)
  br label %22

20:                                               ; preds = %13
  %21 = tail call i64* @_ZN2v88internal13MutableBigInt15ToStringGenericEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEEiNS0_11ShouldThrowE(%"class.v8::internal::Isolate"* %0, i64* %1, i32 %2, i32 %3)
  br label %22

22:                                               ; preds = %20, %18, %11
  %23 = phi i64* [ %12, %11 ], [ %19, %18 ], [ %21, %20 ]
  ret i64* %23
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal13MutableBigInt22ToStringBasePowerOfTwoEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEEiNS0_11ShouldThrowE(%"class.v8::internal::Isolate"*, i64*, i32, i32) local_unnamed_addr #0 align 2 {
  %5 = load i64, i64* %1, align 8
  %6 = add i64 %5, 3
  %7 = inttoptr i64 %6 to i32*
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = lshr i32 %8, 1
  %10 = and i32 %9, 1073741823
  %11 = load atomic i32, i32* %7 monotonic, align 4
  %12 = and i32 %11, 1
  %13 = icmp eq i32 %12, 0
  %14 = tail call i32 @llvm.cttz.i32(i32 %2, i1 false) #13, !range !6
  %15 = add nsw i32 %2, -1
  %16 = add nsw i32 %10, -1
  %17 = shl nsw i32 %16, 3
  %18 = or i32 %17, 7
  %19 = sext i32 %18 to i64
  %20 = add i64 %5, %19
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21, align 1
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %27, label %24

24:                                               ; preds = %4
  %25 = tail call i64 @llvm.ctlz.i64(i64 %22, i1 true) #13, !range !5
  %26 = trunc i64 %25 to i32
  br label %27

27:                                               ; preds = %4, %24
  %28 = phi i32 [ %26, %24 ], [ 64, %4 ]
  %29 = shl nsw i32 %10, 6
  %30 = sub nsw i32 %29, %28
  %31 = sext i32 %30 to i64
  %32 = zext i32 %14 to i64
  %33 = add nsw i64 %32, -1
  %34 = add nsw i64 %33, %31
  %35 = udiv i64 %34, %32
  %36 = zext i32 %12 to i64
  %37 = add i64 %35, %36
  %38 = icmp ugt i64 %37, 536870888
  br i1 %38, label %39, label %46

39:                                               ; preds = %27
  %40 = icmp eq i32 %3, 0
  br i1 %40, label %41, label %149

41:                                               ; preds = %39
  %42 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::Factory"*
  %43 = tail call i64* @_ZN2v88internal7Factory27NewInvalidStringLengthErrorEv(%"class.v8::internal::Factory"* %42) #13
  %44 = load i64, i64* %43, align 8
  %45 = tail call i64 @_ZN2v88internal7Isolate13ThrowInternalENS0_6ObjectEPNS0_15MessageLocationE(%"class.v8::internal::Isolate"* %0, i64 %44, %"class.v8::internal::MessageLocation"* null) #13
  br label %149

46:                                               ; preds = %27
  %47 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %48 = trunc i64 %37 to i32
  %49 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE19NewRawOneByteStringEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %47, i32 %48, i8 zeroext 0) #13
  %50 = icmp eq i64* %49, null
  br i1 %50, label %51, label %52, !prof !2

51:                                               ; preds = %46
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0)) #14
  unreachable

52:                                               ; preds = %46
  %53 = load i64, i64* %49, align 8
  %54 = add i64 %53, 11
  %55 = inttoptr i64 %54 to i8*
  %56 = add nsw i32 %48, -1
  %57 = icmp sgt i32 %16, 0
  %58 = sext i32 %15 to i64
  br i1 %57, label %59, label %61

59:                                               ; preds = %52
  %60 = zext i32 %16 to i64
  br label %82

61:                                               ; preds = %126, %52
  %62 = phi i32 [ 0, %52 ], [ %127, %126 ]
  %63 = phi i64 [ 0, %52 ], [ %128, %126 ]
  %64 = phi i32 [ %56, %52 ], [ %129, %126 ]
  %65 = zext i32 %62 to i64
  %66 = shl i64 %22, %65
  %67 = or i64 %66, %63
  %68 = trunc i64 %67 to i32
  %69 = and i32 %15, %68
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds [37 x i8], [37 x i8]* @_ZN2v88internalL16kConversionCharsE, i64 0, i64 %70
  %72 = load i8, i8* %71, align 1
  %73 = sext i32 %64 to i64
  %74 = getelementptr inbounds i8, i8* %55, i64 %73
  store i8 %72, i8* %74, align 1
  %75 = sub nsw i32 %14, %62
  %76 = zext i32 %75 to i64
  %77 = lshr i64 %22, %76
  %78 = add i32 %64, -1
  %79 = icmp eq i64 %77, 0
  br i1 %79, label %144, label %80

80:                                               ; preds = %61
  %81 = sext i32 %78 to i64
  br label %132

82:                                               ; preds = %126, %59
  %83 = phi i64 [ 0, %59 ], [ %130, %126 ]
  %84 = phi i32 [ %56, %59 ], [ %129, %126 ]
  %85 = phi i64 [ 0, %59 ], [ %128, %126 ]
  %86 = phi i32 [ 0, %59 ], [ %127, %126 ]
  %87 = load i64, i64* %1, align 8
  %88 = shl i64 %83, 3
  %89 = and i64 %88, 4294967288
  %90 = or i64 %89, 7
  %91 = add i64 %87, %90
  %92 = inttoptr i64 %91 to i64*
  %93 = load i64, i64* %92, align 1
  %94 = zext i32 %86 to i64
  %95 = shl i64 %93, %94
  %96 = or i64 %95, %85
  %97 = trunc i64 %96 to i32
  %98 = and i32 %15, %97
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds [37 x i8], [37 x i8]* @_ZN2v88internalL16kConversionCharsE, i64 0, i64 %99
  %101 = load i8, i8* %100, align 1
  %102 = sext i32 %84 to i64
  %103 = getelementptr inbounds i8, i8* %55, i64 %102
  store i8 %101, i8* %103, align 1
  %104 = sub nsw i32 %14, %86
  %105 = zext i32 %104 to i64
  %106 = lshr i64 %93, %105
  %107 = sub nsw i32 64, %104
  %108 = add i32 %84, -1
  %109 = icmp slt i32 %107, %14
  br i1 %109, label %126, label %110

110:                                              ; preds = %82
  %111 = sext i32 %108 to i64
  br label %112

112:                                              ; preds = %110, %112
  %113 = phi i64 [ %111, %110 ], [ %122, %112 ]
  %114 = phi i64 [ %106, %110 ], [ %120, %112 ]
  %115 = phi i32 [ %107, %110 ], [ %121, %112 ]
  %116 = and i64 %114, %58
  %117 = getelementptr inbounds [37 x i8], [37 x i8]* @_ZN2v88internalL16kConversionCharsE, i64 0, i64 %116
  %118 = load i8, i8* %117, align 1
  %119 = getelementptr inbounds i8, i8* %55, i64 %113
  store i8 %118, i8* %119, align 1
  %120 = lshr i64 %114, %32
  %121 = sub nsw i32 %115, %14
  %122 = add i64 %113, -1
  %123 = icmp slt i32 %121, %14
  br i1 %123, label %124, label %112

124:                                              ; preds = %112
  %125 = trunc i64 %122 to i32
  br label %126

126:                                              ; preds = %124, %82
  %127 = phi i32 [ %107, %82 ], [ %121, %124 ]
  %128 = phi i64 [ %106, %82 ], [ %120, %124 ]
  %129 = phi i32 [ %108, %82 ], [ %125, %124 ]
  %130 = add nuw nsw i64 %83, 1
  %131 = icmp eq i64 %130, %60
  br i1 %131, label %61, label %82

132:                                              ; preds = %80, %132
  %133 = phi i64 [ %81, %80 ], [ %140, %132 ]
  %134 = phi i64 [ %77, %80 ], [ %139, %132 ]
  %135 = and i64 %134, %58
  %136 = getelementptr inbounds [37 x i8], [37 x i8]* @_ZN2v88internalL16kConversionCharsE, i64 0, i64 %135
  %137 = load i8, i8* %136, align 1
  %138 = getelementptr inbounds i8, i8* %55, i64 %133
  store i8 %137, i8* %138, align 1
  %139 = lshr i64 %134, %32
  %140 = add i64 %133, -1
  %141 = icmp eq i64 %139, 0
  br i1 %141, label %142, label %132

142:                                              ; preds = %132
  %143 = trunc i64 %140 to i32
  br label %144

144:                                              ; preds = %142, %61
  %145 = phi i32 [ %78, %61 ], [ %143, %142 ]
  br i1 %13, label %149, label %146

146:                                              ; preds = %144
  %147 = sext i32 %145 to i64
  %148 = getelementptr inbounds i8, i8* %55, i64 %147
  store i8 45, i8* %148, align 1
  br label %149

149:                                              ; preds = %146, %144, %39, %41
  %150 = phi i64* [ null, %41 ], [ null, %39 ], [ %49, %144 ], [ %49, %146 ]
  ret i64* %150
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal13MutableBigInt15ToStringGenericEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEEiNS0_11ShouldThrowE(%"class.v8::internal::Isolate"*, i64*, i32, i32) local_unnamed_addr #0 align 2 {
  %5 = alloca i64*, align 8
  %6 = bitcast i64** %5 to %"class.v8::internal::Handle.1132"*
  %7 = alloca %"class.v8::internal::Handle.1129", align 8
  %8 = alloca i64, align 8
  store i64* %1, i64** %5, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 2
  %10 = load i64, i64* %1, align 8
  %11 = add i64 %10, 3
  %12 = inttoptr i64 %11 to i32*
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = lshr i32 %13, 1
  %15 = and i32 %14, 1073741823
  %16 = load atomic i32, i32* %12 monotonic, align 4
  %17 = and i32 %16, 1
  %18 = icmp eq i32 %17, 0
  %19 = shl nsw i32 %15, 6
  %20 = add nsw i32 %15, -1
  %21 = shl nsw i32 %20, 3
  %22 = or i32 %21, 7
  %23 = sext i32 %22 to i64
  %24 = add i64 %10, %23
  %25 = inttoptr i64 %24 to i64*
  %26 = load i64, i64* %25, align 1
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %31, label %28

28:                                               ; preds = %4
  %29 = tail call i64 @llvm.ctlz.i64(i64 %26, i1 true) #13, !range !5
  %30 = trunc i64 %29 to i32
  br label %31

31:                                               ; preds = %4, %28
  %32 = phi i32 [ %30, %28 ], [ 64, %4 ]
  %33 = sub i32 %19, %32
  %34 = zext i32 %33 to i64
  %35 = sext i32 %2 to i64
  %36 = getelementptr inbounds [37 x i8], [37 x i8]* @_ZN2v88internalL15kMaxBitsPerCharE, i64 0, i64 %35
  %37 = load i8, i8* %36, align 1
  %38 = add i8 %37, -1
  %39 = shl nuw nsw i64 %34, 5
  %40 = zext i8 %38 to i64
  %41 = add nsw i64 %40, -1
  %42 = add nsw i64 %41, %39
  %43 = udiv i64 %42, %40
  %44 = zext i32 %17 to i64
  %45 = add i64 %43, %44
  %46 = icmp ugt i64 %45, 536870888
  br i1 %46, label %47, label %54

47:                                               ; preds = %31
  %48 = icmp eq i32 %3, 0
  br i1 %48, label %49, label %222

49:                                               ; preds = %47
  %50 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::Factory"*
  %51 = tail call i64* @_ZN2v88internal7Factory27NewInvalidStringLengthErrorEv(%"class.v8::internal::Factory"* %50) #13
  %52 = load i64, i64* %51, align 8
  %53 = tail call i64 @_ZN2v88internal7Isolate13ThrowInternalENS0_6ObjectEPNS0_15MessageLocationE(%"class.v8::internal::Isolate"* %0, i64 %52, %"class.v8::internal::MessageLocation"* null) #13
  br label %222

54:                                               ; preds = %31
  %55 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %56 = trunc i64 %45 to i32
  %57 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE19NewRawOneByteStringEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %55, i32 %56, i8 zeroext 0) #13
  %58 = icmp eq i64* %57, null
  br i1 %58, label %59, label %60, !prof !2

59:                                               ; preds = %54
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0)) #14
  unreachable

60:                                               ; preds = %54
  %61 = icmp eq i32 %15, 1
  br i1 %61, label %62, label %67

62:                                               ; preds = %60
  %63 = load i64, i64* %1, align 8
  %64 = add i64 %63, 7
  %65 = inttoptr i64 %64 to i64*
  %66 = load i64, i64* %65, align 1
  br label %154

67:                                               ; preds = %60
  %68 = zext i8 %37 to i16
  %69 = udiv i16 2048, %68
  %70 = zext i16 %69 to i64
  br label %71

71:                                               ; preds = %67, %71
  %72 = phi i64 [ %78, %71 ], [ 1, %67 ]
  %73 = phi i64 [ %79, %71 ], [ %70, %67 ]
  %74 = phi i64 [ %80, %71 ], [ %35, %67 ]
  %75 = and i64 %73, 1
  %76 = icmp eq i64 %75, 0
  %77 = select i1 %76, i64 1, i64 %74
  %78 = mul i64 %77, %72
  %79 = lshr i64 %73, 1
  %80 = mul i64 %74, %74
  %81 = icmp eq i64 %79, 0
  br i1 %81, label %82, label %71

82:                                               ; preds = %71
  %83 = zext i16 %69 to i32
  %84 = bitcast %"class.v8::internal::Handle.1129"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %84) #13
  %85 = getelementptr inbounds %"class.v8::internal::Handle.1129", %"class.v8::internal::Handle.1129"* %7, i64 0, i32 0, i32 0
  store i64* null, i64** %85, align 8
  %86 = bitcast i64* %8 to i8*
  %87 = bitcast %"class.v8::internal::Handle.1129"* %7 to %"class.v8::internal::Handle.1132"*
  %88 = zext i32 %15 to i64
  %89 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 6, i32 1, i32 3
  %90 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 6
  %91 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 7, i32 0, i64 32
  br label %92

92:                                               ; preds = %82, %115
  %93 = phi i64 [ %116, %115 ], [ 0, %82 ]
  %94 = phi %"class.v8::internal::Handle.1132"* [ %87, %115 ], [ %6, %82 ]
  %95 = phi i32 [ %142, %115 ], [ %20, %82 ]
  %96 = phi i64 [ %125, %115 ], [ 0, %82 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %86) #13
  %97 = getelementptr inbounds %"class.v8::internal::Handle.1132", %"class.v8::internal::Handle.1132"* %94, i64 0, i32 0, i32 0
  %98 = load i64*, i64** %97, align 8
  call void @_ZN2v88internal13MutableBigInt16AbsoluteDivSmallEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEEmPNS4_IS1_EEPm(%"class.v8::internal::Isolate"* %0, i64* %98, i64 %78, %"class.v8::internal::Handle.1129"* nonnull %7, i64* nonnull %8)
  %99 = load i64, i64* %57, align 8
  %100 = add i64 %99, 11
  %101 = inttoptr i64 %100 to i8*
  %102 = shl i64 %96, 32
  %103 = ashr exact i64 %102, 32
  %104 = load i64, i64* %8, align 8
  br label %118

105:                                              ; preds = %131
  %106 = call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #13
  %107 = load atomic i64, i64* %89 monotonic, align 8
  %108 = icmp ult i64 %106, %107
  br i1 %108, label %109, label %115

109:                                              ; preds = %105
  %110 = call i64 @_ZN2v88internal10StackGuard16HandleInterruptsEv(%"class.v8::internal::StackGuard"* %90) #13
  %111 = load i64, i64* %91, align 8
  %112 = trunc i64 %110 to i32
  %113 = trunc i64 %111 to i32
  %114 = icmp eq i32 %112, %113
  br i1 %114, label %153, label %115

115:                                              ; preds = %109, %105, %131
  %116 = phi i64 [ %143, %131 ], [ 0, %105 ], [ 0, %109 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %86) #13
  %117 = icmp sgt i32 %142, 0
  br i1 %117, label %92, label %145

118:                                              ; preds = %92, %118
  %119 = phi i64 [ %104, %92 ], [ %128, %118 ]
  %120 = phi i64 [ %103, %92 ], [ %125, %118 ]
  %121 = phi i32 [ 0, %92 ], [ %129, %118 ]
  %122 = urem i64 %119, %35
  %123 = getelementptr inbounds [37 x i8], [37 x i8]* @_ZN2v88internalL16kConversionCharsE, i64 0, i64 %122
  %124 = load i8, i8* %123, align 1
  %125 = add nsw i64 %120, 1
  %126 = getelementptr inbounds i8, i8* %101, i64 %120
  store i8 %124, i8* %126, align 1
  %127 = load i64, i64* %8, align 8
  %128 = udiv i64 %127, %35
  store i64 %128, i64* %8, align 8
  %129 = add nuw nsw i32 %121, 1
  %130 = icmp ult i32 %129, %83
  br i1 %130, label %118, label %131

131:                                              ; preds = %118
  %132 = load i64*, i64** %85, align 8
  %133 = load i64, i64* %132, align 8
  %134 = shl nsw i32 %95, 3
  %135 = or i32 %134, 7
  %136 = sext i32 %135 to i64
  %137 = add i64 %133, %136
  %138 = inttoptr i64 %137 to i64*
  %139 = load i64, i64* %138, align 1
  %140 = icmp eq i64 %139, 0
  %141 = zext i1 %140 to i32
  %142 = sub i32 %95, %141
  %143 = add i64 %93, %88
  %144 = icmp ugt i64 %143, 500000
  br i1 %144, label %105, label %115

145:                                              ; preds = %115
  %146 = load i64*, i64** %85, align 8
  %147 = load i64, i64* %146, align 8
  %148 = add i64 %147, 7
  %149 = inttoptr i64 %148 to i64*
  %150 = load i64, i64* %149, align 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %84) #13
  %151 = shl i64 %125, 32
  %152 = ashr exact i64 %151, 32
  br label %154

153:                                              ; preds = %109
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %86) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %84) #13
  br label %222

154:                                              ; preds = %145, %62
  %155 = phi i64 [ %66, %62 ], [ %150, %145 ]
  %156 = phi i64 [ 0, %62 ], [ %152, %145 ]
  %157 = load i64, i64* %57, align 8
  %158 = add i64 %157, 11
  %159 = inttoptr i64 %158 to i8*
  br label %160

160:                                              ; preds = %160, %154
  %161 = phi i64 [ %166, %160 ], [ %156, %154 ]
  %162 = phi i64 [ %168, %160 ], [ %155, %154 ]
  %163 = urem i64 %162, %35
  %164 = getelementptr inbounds [37 x i8], [37 x i8]* @_ZN2v88internalL16kConversionCharsE, i64 0, i64 %163
  %165 = load i8, i8* %164, align 1
  %166 = add i64 %161, 1
  %167 = getelementptr inbounds i8, i8* %159, i64 %161
  store i8 %165, i8* %167, align 1
  %168 = udiv i64 %162, %35
  %169 = icmp ult i64 %162, %35
  br i1 %169, label %170, label %160

170:                                              ; preds = %160
  %171 = shl i64 %166, 32
  %172 = ashr exact i64 %171, 32
  br label %173

173:                                              ; preds = %170, %176
  %174 = phi i64 [ %172, %170 ], [ %177, %176 ]
  %175 = icmp sgt i64 %174, 1
  br i1 %175, label %176, label %181

176:                                              ; preds = %173
  %177 = add nsw i64 %174, -1
  %178 = getelementptr inbounds i8, i8* %159, i64 %177
  %179 = load i8, i8* %178, align 1
  %180 = icmp eq i8 %179, 48
  br i1 %180, label %173, label %181

181:                                              ; preds = %173, %176
  %182 = trunc i64 %174 to i32
  br i1 %18, label %188, label %183

183:                                              ; preds = %181
  %184 = add nsw i32 %182, 1
  %185 = shl i64 %174, 32
  %186 = ashr exact i64 %185, 32
  %187 = getelementptr inbounds i8, i8* %159, i64 %186
  store i8 45, i8* %187, align 1
  br label %188

188:                                              ; preds = %181, %183
  %189 = phi i32 [ %184, %183 ], [ %182, %181 ]
  %190 = icmp slt i32 %189, %56
  br i1 %190, label %191, label %207

191:                                              ; preds = %188
  %192 = load i64, i64* %57, align 8
  %193 = add i64 %192, 7
  %194 = inttoptr i64 %193 to i32*
  store atomic volatile i32 %189, i32* %194 release, align 4
  %195 = add i32 %56, 15
  %196 = and i32 %195, -4
  %197 = add i32 %189, 15
  %198 = and i32 %197, -4
  %199 = icmp sgt i32 %196, %198
  br i1 %199, label %200, label %207

200:                                              ; preds = %191
  %201 = load i64, i64* %57, align 8
  %202 = sext i32 %198 to i64
  %203 = add nsw i64 %202, -1
  %204 = add i64 %203, %201
  %205 = sub nsw i32 %196, %198
  %206 = call i64 @_ZN2v88internal4Heap20CreateFillerObjectAtEmiNS0_18ClearRecordedSlotsE(%"class.v8::internal::Heap"* %9, i64 %204, i32 %205, i32 1) #13
  br label %207

207:                                              ; preds = %191, %200, %188
  %208 = add i32 %189, -1
  %209 = icmp sgt i32 %208, 0
  br i1 %209, label %210, label %222

210:                                              ; preds = %207
  %211 = sext i32 %208 to i64
  br label %212

212:                                              ; preds = %210, %212
  %213 = phi i64 [ 0, %210 ], [ %219, %212 ]
  %214 = phi i64 [ %211, %210 ], [ %220, %212 ]
  %215 = getelementptr inbounds i8, i8* %159, i64 %213
  %216 = load i8, i8* %215, align 1
  %217 = getelementptr inbounds i8, i8* %159, i64 %214
  %218 = load i8, i8* %217, align 1
  store i8 %218, i8* %215, align 1
  store i8 %216, i8* %217, align 1
  %219 = add nuw nsw i64 %213, 1
  %220 = add nsw i64 %214, -1
  %221 = icmp slt i64 %219, %220
  br i1 %221, label %212, label %222

222:                                              ; preds = %212, %207, %153, %47, %49
  %223 = phi i64* [ null, %49 ], [ null, %47 ], [ null, %153 ], [ %57, %207 ], [ %57, %212 ]
  ret i64* %223
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal6BigInt10FromNumberEPNS0_7IsolateENS0_6HandleINS0_6ObjectEEE(%"class.v8::internal::Isolate"*, i64*) local_unnamed_addr #0 align 2 {
  %3 = load i64, i64* %1, align 8
  %4 = and i64 %3, 1
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %6, label %10

6:                                                ; preds = %2
  %7 = trunc i64 %3 to i32
  %8 = ashr i32 %7, 1
  %9 = tail call i64* @_ZN2v88internal13MutableBigInt10NewFromIntEPNS0_7IsolateEi(%"class.v8::internal::Isolate"* %0, i32 %8)
  br label %33

10:                                               ; preds = %2
  %11 = add i64 %3, 3
  %12 = inttoptr i64 %11 to double*
  %13 = load double, double* %12, align 1
  %14 = tail call double @llvm.fabs.f64(double %13) #16
  %15 = fcmp ueq double %14, 0x7FF0000000000000
  br i1 %15, label %26, label %16

16:                                               ; preds = %10
  %17 = fcmp ueq double %13, 0.000000e+00
  br i1 %17, label %23, label %18

18:                                               ; preds = %16
  %19 = fcmp oge double %13, 0.000000e+00
  %20 = tail call double @llvm.floor.f64(double %13) #13
  %21 = tail call double @llvm.ceil.f64(double %13) #13
  %22 = select i1 %19, double %20, double %21
  br label %23

23:                                               ; preds = %16, %18
  %24 = phi double [ %22, %18 ], [ 0.000000e+00, %16 ]
  %25 = fcmp une double %24, %13
  br i1 %25, label %26, label %31

26:                                               ; preds = %10, %23
  %27 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::Factory"*
  %28 = tail call i64* @_ZN2v88internal7Factory13NewRangeErrorENS0_15MessageTemplateENS0_6HandleINS0_6ObjectEEES5_S5_(%"class.v8::internal::Factory"* %27, i32 19, i64* %1, i64* null, i64* null) #13
  %29 = load i64, i64* %28, align 8
  %30 = tail call i64 @_ZN2v88internal7Isolate13ThrowInternalENS0_6ObjectEPNS0_15MessageLocationE(%"class.v8::internal::Isolate"* %0, i64 %29, %"class.v8::internal::MessageLocation"* null) #13
  br label %33

31:                                               ; preds = %23
  %32 = tail call i64* @_ZN2v88internal13MutableBigInt13NewFromDoubleEPNS0_7IsolateEd(%"class.v8::internal::Isolate"* %0, double %13)
  br label %33

33:                                               ; preds = %26, %31, %6
  %34 = phi i64* [ %9, %6 ], [ null, %26 ], [ %32, %31 ]
  ret i64* %34
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal6BigInt10FromObjectEPNS0_7IsolateENS0_6HandleINS0_6ObjectEEE(%"class.v8::internal::Isolate"*, i64*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::Handle<v8::internal::Object>::ObjectRef", align 8
  %4 = ptrtoint i64* %1 to i64
  %5 = load i64, i64* %1, align 8
  %6 = and i64 %5, 1
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %24, label %8

8:                                                ; preds = %2
  %9 = and i64 %5, -4294967296
  %10 = add i64 %5, -1
  %11 = inttoptr i64 %10 to i32*
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = zext i32 %12 to i64
  %14 = or i64 %9, %13
  %15 = add i64 %14, 7
  %16 = inttoptr i64 %15 to i16*
  %17 = load atomic i16, i16* %16 monotonic, align 2
  %18 = icmp ugt i16 %17, 185
  br i1 %18, label %19, label %24

19:                                               ; preds = %8
  %20 = tail call i64* @_ZN2v88internal10JSReceiver11ToPrimitiveENS0_6HandleIS1_EENS0_15ToPrimitiveHintE(i64* %1, i32 1) #13
  %21 = icmp eq i64* %20, null
  br i1 %21, label %95, label %22

22:                                               ; preds = %19
  %23 = ptrtoint i64* %20 to i64
  br label %24

24:                                               ; preds = %2, %22, %8
  %25 = phi i64 [ %4, %8 ], [ %23, %22 ], [ %4, %2 ]
  %26 = inttoptr i64 %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = and i64 %27, 1
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %90, label %30

30:                                               ; preds = %24
  %31 = and i64 %27, -4294967296
  %32 = add i64 %27, -1
  %33 = inttoptr i64 %32 to i32*
  %34 = load atomic i32, i32* %33 monotonic, align 4
  %35 = zext i32 %34 to i64
  %36 = or i64 %31, %35
  %37 = add i64 %36, 7
  %38 = inttoptr i64 %37 to i16*
  %39 = load atomic i16, i16* %38 monotonic, align 2
  %40 = icmp eq i16 %39, 67
  br i1 %40, label %41, label %56

41:                                               ; preds = %30
  %42 = add i64 %27, 23
  %43 = inttoptr i64 %42 to i32*
  %44 = load i32, i32* %43, align 4
  %45 = lshr i32 %44, 1
  %46 = trunc i32 %45 to i8
  %47 = icmp ult i8 %46, 2
  br i1 %47, label %48, label %56

48:                                               ; preds = %41
  %49 = bitcast %"class.v8::internal::Handle<v8::internal::Object>::ObjectRef"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %49) #13
  %50 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::Object>::ObjectRef", %"class.v8::internal::Handle<v8::internal::Object>::ObjectRef"* %3, i64 0, i32 0, i32 0, i32 0
  store i64 %27, i64* %50, align 8
  %51 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::Object>::ObjectRef", %"class.v8::internal::Handle<v8::internal::Object>::ObjectRef"* %3, i64 0, i32 0
  %52 = call zeroext i1 @_ZN2v88internal6Object12BooleanValueEPNS0_7IsolateE(%"class.v8::internal::Object"* nonnull %51, %"class.v8::internal::Isolate"* %0) #13
  %53 = zext i1 %52 to i32
  %54 = call i64* @_ZN2v88internal13MutableBigInt10NewFromIntEPNS0_7IsolateEi(%"class.v8::internal::Isolate"* %0, i32 %53)
  %55 = ptrtoint i64* %54 to i64
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %49) #13
  br label %95

56:                                               ; preds = %41, %30
  %57 = load atomic i32, i32* %33 monotonic, align 4
  %58 = zext i32 %57 to i64
  %59 = or i64 %31, %58
  %60 = add i64 %59, 7
  %61 = inttoptr i64 %60 to i16*
  %62 = load atomic i16, i16* %61 monotonic, align 2
  %63 = icmp eq i16 %62, 65
  br i1 %63, label %95, label %64

64:                                               ; preds = %56
  %65 = load atomic i32, i32* %33 monotonic, align 4
  %66 = zext i32 %65 to i64
  %67 = or i64 %31, %66
  %68 = add i64 %67, 7
  %69 = inttoptr i64 %68 to i16*
  %70 = load atomic i16, i16* %69 monotonic, align 2
  %71 = icmp ult i16 %70, 64
  br i1 %71, label %72, label %90

72:                                               ; preds = %64
  %73 = tail call i64* @_ZN2v88internal14StringToBigIntEPNS0_7IsolateENS0_6HandleINS0_6StringEEE(%"class.v8::internal::Isolate"* %0, i64* %26) #13
  %74 = icmp eq i64* %73, null
  br i1 %74, label %75, label %88

75:                                               ; preds = %72
  %76 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 7, i32 0, i64 5
  %77 = load i64, i64* %76, align 8
  %78 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 9, i32 4, i32 0, i32 0
  %79 = load i64, i64* %78, align 8
  %80 = trunc i64 %79 to i32
  %81 = trunc i64 %77 to i32
  %82 = icmp eq i32 %80, %81
  br i1 %82, label %83, label %95

83:                                               ; preds = %75
  %84 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::Factory"*
  %85 = tail call i64* @_ZN2v88internal7Factory14NewSyntaxErrorENS0_15MessageTemplateENS0_6HandleINS0_6ObjectEEES5_S5_(%"class.v8::internal::Factory"* %84, i32 20, i64* %26, i64* null, i64* null) #13
  %86 = load i64, i64* %85, align 8
  %87 = tail call i64 @_ZN2v88internal7Isolate13ThrowInternalENS0_6ObjectEPNS0_15MessageLocationE(%"class.v8::internal::Isolate"* %0, i64 %86, %"class.v8::internal::MessageLocation"* null) #13
  br label %95

88:                                               ; preds = %72
  %89 = ptrtoint i64* %73 to i64
  br label %95

90:                                               ; preds = %24, %64
  %91 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::Factory"*
  %92 = tail call i64* @_ZN2v88internal7Factory12NewTypeErrorENS0_15MessageTemplateENS0_6HandleINS0_6ObjectEEES5_S5_(%"class.v8::internal::Factory"* %91, i32 20, i64* %26, i64* null, i64* null) #13
  %93 = load i64, i64* %92, align 8
  %94 = tail call i64 @_ZN2v88internal7Isolate13ThrowInternalENS0_6ObjectEPNS0_15MessageLocationE(%"class.v8::internal::Isolate"* %0, i64 %93, %"class.v8::internal::MessageLocation"* null) #13
  br label %95

95:                                               ; preds = %75, %83, %88, %56, %19, %90, %48
  %96 = phi i64 [ %55, %48 ], [ 0, %90 ], [ 0, %19 ], [ %25, %56 ], [ %89, %88 ], [ 0, %83 ], [ 0, %75 ]
  %97 = inttoptr i64 %96 to i64*
  ret i64* %97
}

declare i64* @_ZN2v88internal10JSReceiver11ToPrimitiveENS0_6HandleIS1_EENS0_15ToPrimitiveHintE(i64*, i32) local_unnamed_addr #3

declare zeroext i1 @_ZN2v88internal6Object12BooleanValueEPNS0_7IsolateE(%"class.v8::internal::Object"*, %"class.v8::internal::Isolate"*) local_unnamed_addr #3

declare i64* @_ZN2v88internal7Factory14NewSyntaxErrorENS0_15MessageTemplateENS0_6HandleINS0_6ObjectEEES5_S5_(%"class.v8::internal::Factory"*, i32, i64*, i64*, i64*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal6BigInt8ToNumberEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"*, i64*) local_unnamed_addr #0 align 2 {
  %3 = load i64, i64* %1, align 8
  %4 = add i64 %3, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load atomic i32, i32* %5 monotonic, align 4
  %7 = and i32 %6, 2147483646
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %28

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %11 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %10, align 8
  %12 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %11, null
  br i1 %12, label %15, label %13

13:                                               ; preds = %9
  %14 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %11, i64 0) #13
  br label %70

15:                                               ; preds = %9
  %16 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %19 = load i64*, i64** %18, align 8
  %20 = icmp eq i64* %17, %19
  br i1 %20, label %21, label %23

21:                                               ; preds = %15
  %22 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #13
  br label %23

23:                                               ; preds = %21, %15
  %24 = phi i64* [ %22, %21 ], [ %17, %15 ]
  %25 = ptrtoint i64* %24 to i64
  %26 = add i64 %25, 8
  %27 = inttoptr i64 %26 to i64*
  store i64* %27, i64** %16, align 8
  store i64 0, i64* %24, align 8
  br label %70

28:                                               ; preds = %2
  %29 = load atomic i32, i32* %5 monotonic, align 4
  %30 = and i32 %29, 2147483646
  %31 = icmp eq i32 %30, 2
  br i1 %31, label %32, label %63

32:                                               ; preds = %28
  %33 = add i64 %3, 7
  %34 = inttoptr i64 %33 to i64*
  %35 = load i64, i64* %34, align 1
  %36 = icmp ult i64 %35, 1073741823
  br i1 %36, label %37, label %63

37:                                               ; preds = %32
  %38 = load atomic i32, i32* %5 monotonic, align 4
  %39 = and i32 %38, 1
  %40 = icmp eq i32 %39, 0
  %41 = sub nsw i64 0, %35
  %42 = select i1 %40, i64 %35, i64 %41
  %43 = shl i64 %42, 32
  %44 = ashr exact i64 %43, 31
  %45 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %46 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %45, align 8
  %47 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %37
  %49 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %46, i64 %44) #13
  br label %70

50:                                               ; preds = %37
  %51 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %52 = load i64*, i64** %51, align 8
  %53 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %54 = load i64*, i64** %53, align 8
  %55 = icmp eq i64* %52, %54
  br i1 %55, label %56, label %58

56:                                               ; preds = %50
  %57 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #13
  br label %58

58:                                               ; preds = %56, %50
  %59 = phi i64* [ %57, %56 ], [ %52, %50 ]
  %60 = ptrtoint i64* %59 to i64
  %61 = add i64 %60, 8
  %62 = inttoptr i64 %61 to i64*
  store i64* %62, i64** %51, align 8
  store i64 %44, i64* %59, align 8
  br label %70

63:                                               ; preds = %28, %32
  %64 = tail call double @_ZN2v88internal13MutableBigInt8ToDoubleENS0_6HandleINS0_10BigIntBaseEEE(i64* %1)
  %65 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %66 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE13NewHeapNumberILNS0_14AllocationTypeE0EEENS0_6HandleINS0_10HeapNumberEEEv(%"class.v8::internal::FactoryBase"* %65) #13
  %67 = load i64, i64* %66, align 8
  %68 = add i64 %67, 3
  %69 = inttoptr i64 %68 to double*
  store double %64, double* %69, align 1
  br label %70

70:                                               ; preds = %58, %48, %23, %13, %63
  %71 = phi i64* [ %66, %63 ], [ %14, %13 ], [ %24, %23 ], [ %49, %48 ], [ %59, %58 ]
  ret i64* %71
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN2v88internal13MutableBigInt8ToDoubleENS0_6HandleINS0_10BigIntBaseEEE(i64*) local_unnamed_addr #0 align 2 {
  %2 = load i64, i64* %0, align 8
  %3 = add i64 %2, 3
  %4 = inttoptr i64 %3 to i32*
  %5 = load atomic i32, i32* %4 monotonic, align 4
  %6 = and i32 %5, 2147483646
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %151, label %8

8:                                                ; preds = %1
  %9 = load atomic i32, i32* %4 monotonic, align 4
  %10 = lshr i32 %9, 1
  %11 = and i32 %10, 1073741823
  %12 = add nsw i32 %11, -1
  %13 = shl nsw i32 %12, 3
  %14 = or i32 %13, 7
  %15 = sext i32 %14 to i64
  %16 = add i64 %2, %15
  %17 = inttoptr i64 %16 to i64*
  %18 = load i64, i64* %17, align 1
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %23, label %20

20:                                               ; preds = %8
  %21 = tail call i64 @llvm.ctlz.i64(i64 %18, i1 true) #13, !range !5
  %22 = trunc i64 %21 to i32
  br label %23

23:                                               ; preds = %8, %20
  %24 = phi i32 [ %22, %20 ], [ 64, %8 ]
  %25 = shl nsw i32 %11, 6
  %26 = sub nsw i32 %25, %24
  %27 = icmp sgt i32 %26, 1024
  br i1 %27, label %28, label %33

28:                                               ; preds = %23
  %29 = load atomic i32, i32* %4 monotonic, align 4
  %30 = and i32 %29, 1
  %31 = icmp eq i32 %30, 0
  %32 = select i1 %31, double 0x7FF0000000000000, double 0xFFF0000000000000
  br label %151

33:                                               ; preds = %23
  %34 = add nsw i32 %26, -1
  %35 = sext i32 %34 to i64
  %36 = add nsw i32 %24, 1
  %37 = icmp eq i32 %36, 64
  %38 = zext i32 %36 to i64
  %39 = shl i64 %18, %38
  %40 = lshr i64 %39, 12
  %41 = select i1 %37, i64 0, i64 %40
  %42 = add nsw i32 %24, -11
  %43 = icmp sgt i32 %42, 63
  %44 = icmp sgt i32 %12, 0
  %45 = and i1 %44, %43
  br i1 %45, label %46, label %58

46:                                               ; preds = %33
  %47 = add nsw i32 %11, -2
  %48 = shl nsw i32 %47, 3
  %49 = or i32 %48, 7
  %50 = sext i32 %49 to i64
  %51 = add i64 %2, %50
  %52 = inttoptr i64 %51 to i64*
  %53 = load i64, i64* %52, align 1
  %54 = add nsw i32 %24, -75
  %55 = zext i32 %54 to i64
  %56 = shl i64 %53, %55
  %57 = or i64 %56, %41
  br label %58

58:                                               ; preds = %46, %33
  %59 = phi i32 [ %47, %46 ], [ %12, %33 ]
  %60 = phi i64 [ %53, %46 ], [ %18, %33 ]
  %61 = phi i64 [ %57, %46 ], [ %41, %33 ]
  %62 = phi i32 [ %54, %46 ], [ %42, %33 ]
  %63 = icmp sgt i32 %62, 0
  %64 = icmp sgt i32 %59, 0
  %65 = and i1 %64, %63
  br i1 %65, label %66, label %79

66:                                               ; preds = %58
  %67 = add nsw i32 %59, -1
  %68 = shl nsw i32 %67, 3
  %69 = or i32 %68, 7
  %70 = sext i32 %69 to i64
  %71 = add i64 %2, %70
  %72 = inttoptr i64 %71 to i64*
  %73 = load i64, i64* %72, align 1
  %74 = sub nsw i32 64, %62
  %75 = zext i32 %74 to i64
  %76 = lshr i64 %73, %75
  %77 = or i64 %76, %61
  %78 = add nsw i32 %62, -64
  br label %79

79:                                               ; preds = %66, %58
  %80 = phi i32 [ %67, %66 ], [ %59, %58 ]
  %81 = phi i64 [ %73, %66 ], [ %60, %58 ]
  %82 = phi i64 [ %77, %66 ], [ %61, %58 ]
  %83 = phi i32 [ %78, %66 ], [ %62, %58 ]
  %84 = icmp sgt i32 %83, 0
  br i1 %84, label %140, label %85

85:                                               ; preds = %79
  %86 = icmp slt i32 %83, 0
  br i1 %86, label %87, label %90

87:                                               ; preds = %85
  %88 = xor i32 %83, -1
  %89 = zext i32 %88 to i64
  br label %100

90:                                               ; preds = %85
  %91 = icmp eq i32 %80, 0
  br i1 %91, label %140, label %92

92:                                               ; preds = %90
  %93 = add nsw i32 %80, -1
  %94 = shl nsw i32 %93, 3
  %95 = or i32 %94, 7
  %96 = sext i32 %95 to i64
  %97 = add i64 %2, %96
  %98 = inttoptr i64 %97 to i64*
  %99 = load i64, i64* %98, align 1
  br label %100

100:                                              ; preds = %92, %87
  %101 = phi i32 [ %80, %87 ], [ %93, %92 ]
  %102 = phi i64 [ %81, %87 ], [ %99, %92 ]
  %103 = phi i64 [ %89, %87 ], [ 63, %92 ]
  %104 = shl i64 1, %103
  %105 = and i64 %104, %102
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %140, label %107

107:                                              ; preds = %100
  %108 = add i64 %104, -1
  %109 = and i64 %108, %102
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %111, label %129

111:                                              ; preds = %107
  %112 = sext i32 %101 to i64
  br label %113

113:                                              ; preds = %116, %111
  %114 = phi i64 [ %112, %111 ], [ %117, %116 ]
  %115 = icmp sgt i64 %114, 0
  br i1 %115, label %116, label %126

116:                                              ; preds = %113
  %117 = add nsw i64 %114, -1
  %118 = trunc i64 %117 to i32
  %119 = shl nsw i32 %118, 3
  %120 = or i32 %119, 7
  %121 = sext i32 %120 to i64
  %122 = add i64 %2, %121
  %123 = inttoptr i64 %122 to i64*
  %124 = load i64, i64* %123, align 1
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %113, label %129

126:                                              ; preds = %113
  %127 = and i64 %82, 1
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %140, label %129

129:                                              ; preds = %116, %107, %126
  %130 = add i64 %82, 1
  %131 = icmp ugt i64 %130, 4503599627370495
  br i1 %131, label %132, label %140

132:                                              ; preds = %129
  %133 = add nsw i64 %35, 1
  %134 = icmp ugt i64 %133, 1023
  br i1 %134, label %135, label %140

135:                                              ; preds = %132
  %136 = load atomic i32, i32* %4 monotonic, align 4
  %137 = and i32 %136, 1
  %138 = icmp eq i32 %137, 0
  %139 = select i1 %138, double 0x7FF0000000000000, double 0xFFF0000000000000
  br label %151

140:                                              ; preds = %100, %90, %79, %126, %129, %132
  %141 = phi i64 [ 0, %132 ], [ %130, %129 ], [ %82, %126 ], [ %82, %79 ], [ %82, %90 ], [ %82, %100 ]
  %142 = phi i64 [ %133, %132 ], [ %35, %129 ], [ %35, %126 ], [ %35, %79 ], [ %35, %90 ], [ %35, %100 ]
  %143 = load atomic i32, i32* %4 monotonic, align 4
  %144 = zext i32 %143 to i64
  %145 = shl i64 %144, 63
  %146 = shl i64 %142, 52
  %147 = add i64 %146, 4607182418800017408
  %148 = or i64 %147, %141
  %149 = or i64 %148, %145
  %150 = bitcast i64 %149 to double
  br label %151

151:                                              ; preds = %28, %140, %135, %1
  %152 = phi double [ 0.000000e+00, %1 ], [ %32, %28 ], [ %139, %135 ], [ %150, %140 ]
  ret double %152
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @_ZN2v88internal13MutableBigInt14DecideRoundingENS0_6HandleINS0_10BigIntBaseEEEiim(i64*, i32, i32, i64) local_unnamed_addr #4 align 2 {
  %5 = icmp sgt i32 %1, 0
  br i1 %5, label %49, label %6

6:                                                ; preds = %4
  %7 = icmp slt i32 %1, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %6
  %9 = xor i32 %1, -1
  %10 = zext i32 %9 to i64
  br label %22

11:                                               ; preds = %6
  %12 = icmp eq i32 %2, 0
  br i1 %12, label %49, label %13

13:                                               ; preds = %11
  %14 = add nsw i32 %2, -1
  %15 = load i64, i64* %0, align 8
  %16 = shl nsw i32 %14, 3
  %17 = or i32 %16, 7
  %18 = sext i32 %17 to i64
  %19 = add i64 %15, %18
  %20 = inttoptr i64 %19 to i64*
  %21 = load i64, i64* %20, align 1
  br label %22

22:                                               ; preds = %13, %8
  %23 = phi i32 [ %2, %8 ], [ %14, %13 ]
  %24 = phi i64 [ %3, %8 ], [ %21, %13 ]
  %25 = phi i64 [ %10, %8 ], [ 63, %13 ]
  %26 = shl i64 1, %25
  %27 = and i64 %26, %24
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %49, label %29

29:                                               ; preds = %22
  %30 = add i64 %26, -1
  %31 = and i64 %30, %24
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %33, label %49

33:                                               ; preds = %29
  %34 = sext i32 %23 to i64
  br label %35

35:                                               ; preds = %33, %38
  %36 = phi i64 [ %34, %33 ], [ %39, %38 ]
  %37 = icmp sgt i64 %36, 0
  br i1 %37, label %38, label %49

38:                                               ; preds = %35
  %39 = add nsw i64 %36, -1
  %40 = load i64, i64* %0, align 8
  %41 = trunc i64 %39 to i32
  %42 = shl nsw i32 %41, 3
  %43 = or i32 %42, 7
  %44 = sext i32 %43 to i64
  %45 = add i64 %40, %44
  %46 = inttoptr i64 %45 to i64*
  %47 = load i64, i64* %46, align 1
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %35, label %49

49:                                               ; preds = %35, %38, %11, %29, %22, %4
  %50 = phi i32 [ 0, %4 ], [ 0, %11 ], [ 0, %22 ], [ 2, %29 ], [ 1, %35 ], [ 2, %38 ]
  ret i32 %50
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal6BigInt16BigIntShortPrintERNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEE(%"class.v8::internal::BigInt"* nocapture readonly, %"class.std::__1::basic_ostream"* dereferenceable(160)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::BigInt", %"class.v8::internal::BigInt"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, 3
  %6 = inttoptr i64 %5 to i32*
  %7 = load atomic i32, i32* %6 monotonic, align 4
  %8 = and i32 %7, 1
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %15, label %10

10:                                               ; preds = %2
  %11 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0), i64 1) #13
  %12 = load i64, i64* %3, align 8
  %13 = add i64 %12, 3
  %14 = inttoptr i64 %13 to i32*
  br label %15

15:                                               ; preds = %2, %10
  %16 = phi i32* [ %6, %2 ], [ %14, %10 ]
  %17 = phi i64 [ %4, %2 ], [ %12, %10 ]
  %18 = load atomic i32, i32* %16 monotonic, align 4
  %19 = lshr i32 %18, 1
  %20 = and i32 %19, 1073741823
  switch i32 %20, label %23 [
    i32 0, label %21
    i32 1, label %26
  ]

21:                                               ; preds = %15
  %22 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), i64 1) #13
  br label %32

23:                                               ; preds = %15
  %24 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i64 3) #13
  %25 = load i64, i64* %3, align 8
  br label %26

26:                                               ; preds = %15, %23
  %27 = phi i64 [ %17, %15 ], [ %25, %23 ]
  %28 = add i64 %27, 7
  %29 = inttoptr i64 %28 to i64*
  %30 = load i64, i64* %29, align 1
  %31 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEm(%"class.std::__1::basic_ostream"* %1, i64 %30) #13
  br label %32

32:                                               ; preds = %26, %21
  ret void
}

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEm(%"class.std::__1::basic_ostream"*, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13MutableBigInt11AbsoluteAddES1_NS0_6BigIntES2_(i64, i64, i64) local_unnamed_addr #0 align 2 {
  %4 = add i64 %2, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load atomic i32, i32* %5 monotonic, align 4
  %7 = and i32 %6, 2147483646
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %11, label %25

9:                                                ; preds = %25
  %10 = trunc i64 %51 to i32
  br label %11

11:                                               ; preds = %9, %3
  %12 = phi i32 [ 0, %3 ], [ %10, %9 ]
  %13 = phi i64 [ 0, %3 ], [ %47, %9 ]
  %14 = add i64 %1, 3
  %15 = inttoptr i64 %14 to i32*
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = lshr i32 %16, 1
  %18 = and i32 %17, 1073741823
  %19 = icmp ult i32 %12, %18
  %20 = shl nsw i32 %12, 3
  %21 = or i32 %20, 7
  %22 = zext i32 %21 to i64
  br i1 %19, label %23, label %83

23:                                               ; preds = %11
  %24 = zext i32 %12 to i64
  br label %57

25:                                               ; preds = %3, %25
  %26 = phi i64 [ %51, %25 ], [ 0, %3 ]
  %27 = phi i64 [ %47, %25 ], [ 0, %3 ]
  %28 = shl i64 %26, 3
  %29 = and i64 %28, 4294967288
  %30 = or i64 %29, 7
  %31 = add i64 %30, %1
  %32 = inttoptr i64 %31 to i64*
  %33 = load i64, i64* %32, align 1
  %34 = add i64 %30, %2
  %35 = inttoptr i64 %34 to i64*
  %36 = load i64, i64* %35, align 1
  %37 = zext i64 %33 to i128
  %38 = zext i64 %36 to i128
  %39 = add nuw nsw i128 %38, %37
  %40 = lshr i128 %39, 64
  %41 = trunc i128 %40 to i64
  %42 = and i128 %39, 18446744073709551615
  %43 = zext i64 %27 to i128
  %44 = add nuw nsw i128 %42, %43
  %45 = lshr i128 %44, 64
  %46 = trunc i128 %45 to i64
  %47 = add nuw nsw i64 %46, %41
  %48 = trunc i128 %44 to i64
  %49 = add i64 %30, %0
  %50 = inttoptr i64 %49 to i64*
  store i64 %48, i64* %50, align 1
  %51 = add nuw nsw i64 %26, 1
  %52 = load atomic i32, i32* %5 monotonic, align 4
  %53 = lshr i32 %52, 1
  %54 = and i32 %53, 1073741823
  %55 = zext i32 %54 to i64
  %56 = icmp ult i64 %51, %55
  br i1 %56, label %25, label %9

57:                                               ; preds = %23, %57
  %58 = phi i64 [ %24, %23 ], [ %72, %57 ]
  %59 = phi i64 [ %22, %23 ], [ %80, %57 ]
  %60 = phi i64 [ %13, %23 ], [ %68, %57 ]
  %61 = add i64 %59, %1
  %62 = inttoptr i64 %61 to i64*
  %63 = load i64, i64* %62, align 1
  %64 = zext i64 %63 to i128
  %65 = zext i64 %60 to i128
  %66 = add nuw nsw i128 %64, %65
  %67 = lshr i128 %66, 64
  %68 = trunc i128 %67 to i64
  %69 = trunc i128 %66 to i64
  %70 = add i64 %59, %0
  %71 = inttoptr i64 %70 to i64*
  store i64 %69, i64* %71, align 1
  %72 = add nuw nsw i64 %58, 1
  %73 = load atomic i32, i32* %15 monotonic, align 4
  %74 = lshr i32 %73, 1
  %75 = and i32 %74, 1073741823
  %76 = zext i32 %75 to i64
  %77 = icmp ult i64 %72, %76
  %78 = shl i64 %72, 3
  %79 = and i64 %78, 4294967288
  %80 = or i64 %79, 7
  br i1 %77, label %57, label %81

81:                                               ; preds = %57
  %82 = trunc i128 %67 to i64
  br label %83

83:                                               ; preds = %81, %11
  %84 = phi i64 [ %13, %11 ], [ %82, %81 ]
  %85 = phi i64 [ %22, %11 ], [ %80, %81 ]
  %86 = add i64 %85, %0
  %87 = inttoptr i64 %86 to i64*
  store i64 %84, i64* %87, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13MutableBigInt11AbsoluteSubES1_NS0_6BigIntES2_(i64, i64, i64) local_unnamed_addr #0 align 2 {
  %4 = add i64 %2, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load atomic i32, i32* %5 monotonic, align 4
  %7 = and i32 %6, 2147483646
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %11, label %22

9:                                                ; preds = %22
  %10 = trunc i64 %50 to i32
  br label %11

11:                                               ; preds = %9, %3
  %12 = phi i32 [ 0, %3 ], [ %10, %9 ]
  %13 = phi i64 [ 0, %3 ], [ %46, %9 ]
  %14 = add i64 %1, 3
  %15 = inttoptr i64 %14 to i32*
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = lshr i32 %16, 1
  %18 = and i32 %17, 1073741823
  %19 = icmp ult i32 %12, %18
  br i1 %19, label %20, label %80

20:                                               ; preds = %11
  %21 = zext i32 %12 to i64
  br label %56

22:                                               ; preds = %3, %22
  %23 = phi i64 [ %50, %22 ], [ 0, %3 ]
  %24 = phi i64 [ %46, %22 ], [ 0, %3 ]
  %25 = shl i64 %23, 3
  %26 = and i64 %25, 4294967288
  %27 = or i64 %26, 7
  %28 = add i64 %27, %1
  %29 = inttoptr i64 %28 to i64*
  %30 = load i64, i64* %29, align 1
  %31 = add i64 %27, %2
  %32 = inttoptr i64 %31 to i64*
  %33 = load i64, i64* %32, align 1
  %34 = zext i64 %30 to i128
  %35 = zext i64 %33 to i128
  %36 = sub nsw i128 %34, %35
  %37 = lshr i128 %36, 64
  %38 = trunc i128 %37 to i64
  %39 = and i64 %38, 1
  %40 = and i128 %36, 18446744073709551615
  %41 = zext i64 %24 to i128
  %42 = sub nsw i128 %40, %41
  %43 = lshr i128 %42, 64
  %44 = trunc i128 %43 to i64
  %45 = and i64 %44, 1
  %46 = add nuw nsw i64 %45, %39
  %47 = trunc i128 %42 to i64
  %48 = add i64 %27, %0
  %49 = inttoptr i64 %48 to i64*
  store i64 %47, i64* %49, align 1
  %50 = add nuw nsw i64 %23, 1
  %51 = load atomic i32, i32* %5 monotonic, align 4
  %52 = lshr i32 %51, 1
  %53 = and i32 %52, 1073741823
  %54 = zext i32 %53 to i64
  %55 = icmp ult i64 %50, %54
  br i1 %55, label %22, label %9

56:                                               ; preds = %20, %56
  %57 = phi i64 [ %21, %20 ], [ %74, %56 ]
  %58 = phi i64 [ %13, %20 ], [ %70, %56 ]
  %59 = shl i64 %57, 3
  %60 = and i64 %59, 4294967288
  %61 = or i64 %60, 7
  %62 = add i64 %61, %1
  %63 = inttoptr i64 %62 to i64*
  %64 = load i64, i64* %63, align 1
  %65 = zext i64 %64 to i128
  %66 = zext i64 %58 to i128
  %67 = sub nsw i128 %65, %66
  %68 = lshr i128 %67, 64
  %69 = trunc i128 %68 to i64
  %70 = and i64 %69, 1
  %71 = trunc i128 %67 to i64
  %72 = add i64 %61, %0
  %73 = inttoptr i64 %72 to i64*
  store i64 %71, i64* %73, align 1
  %74 = add nuw nsw i64 %57, 1
  %75 = load atomic i32, i32* %15 monotonic, align 4
  %76 = lshr i32 %75, 1
  %77 = and i32 %76, 1073741823
  %78 = zext i32 %77 to i64
  %79 = icmp ult i64 %74, %78
  br i1 %79, label %56, label %80

80:                                               ; preds = %56, %11
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i64* @_ZN2v88internal13MutableBigInt17AbsoluteBitwiseOpEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEES6_S1_NS1_19ExtraDigitsHandlingENS1_11SymmetricOpERKNSt3__18functionIFmmmEEE(%"class.v8::internal::Isolate"*, i64*, i64*, i64, i32, i32, %"class.std::__1::function"* dereferenceable(32)) local_unnamed_addr #5 comdat align 2 {
  %8 = ptrtoint i64* %1 to i64
  %9 = ptrtoint i64* %2 to i64
  %10 = load i64, i64* %1, align 8
  %11 = add i64 %10, 3
  %12 = inttoptr i64 %11 to i32*
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = lshr i32 %13, 1
  %15 = and i32 %14, 1073741823
  %16 = load i64, i64* %2, align 8
  %17 = add i64 %16, 3
  %18 = inttoptr i64 %17 to i32*
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = lshr i32 %19, 1
  %21 = and i32 %20, 1073741823
  %22 = icmp ult i32 %15, %21
  br i1 %22, label %23, label %28

23:                                               ; preds = %7
  %24 = icmp eq i32 %5, 0
  %25 = select i1 %24, i32 %21, i32 %15
  %26 = select i1 %24, i64 %8, i64 %9
  %27 = select i1 %24, i64 %9, i64 %8
  br label %28

28:                                               ; preds = %23, %7
  %29 = phi i32 [ %15, %7 ], [ %25, %23 ]
  %30 = phi i64 [ %9, %7 ], [ %26, %23 ]
  %31 = phi i64 [ %8, %7 ], [ %27, %23 ]
  %32 = phi i32 [ %21, %7 ], [ %15, %23 ]
  %33 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %34 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %33, align 8
  %35 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %34, null
  br i1 %35, label %38, label %36

36:                                               ; preds = %28
  %37 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %34, i64 %3) #13
  br label %51

38:                                               ; preds = %28
  %39 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %40 = load i64*, i64** %39, align 8
  %41 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %42 = load i64*, i64** %41, align 8
  %43 = icmp eq i64* %40, %42
  br i1 %43, label %44, label %46

44:                                               ; preds = %38
  %45 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #13
  br label %46

46:                                               ; preds = %44, %38
  %47 = phi i64* [ %45, %44 ], [ %40, %38 ]
  %48 = ptrtoint i64* %47 to i64
  %49 = add i64 %48, 8
  %50 = inttoptr i64 %49 to i64*
  store i64* %50, i64** %39, align 8
  store i64 %3, i64* %47, align 8
  br label %51

51:                                               ; preds = %36, %46
  %52 = phi i64* [ %37, %36 ], [ %47, %46 ]
  %53 = icmp eq i32 %4, 0
  %54 = select i1 %53, i32 %29, i32 %32
  %55 = trunc i64 %3 to i32
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %77

57:                                               ; preds = %51
  %58 = icmp sgt i32 %54, 16777216
  br i1 %58, label %59, label %68

59:                                               ; preds = %57
  %60 = load i8, i8* @_ZN2v88internal36FLAG_correctness_fuzzer_suppressionsE, align 1, !range !3
  %61 = icmp eq i8 %60, 0
  br i1 %61, label %63, label %62

62:                                               ; preds = %59
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.6, i64 0, i64 0)) #14
  unreachable

63:                                               ; preds = %59
  %64 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::Factory"*
  %65 = tail call i64* @_ZN2v88internal7Factory13NewRangeErrorENS0_15MessageTemplateENS0_6HandleINS0_6ObjectEEES5_S5_(%"class.v8::internal::Factory"* %64, i32 190, i64* null, i64* null, i64* null) #13
  %66 = load i64, i64* %65, align 8
  %67 = tail call i64 @_ZN2v88internal7Isolate13ThrowInternalENS0_6ObjectEPNS0_15MessageLocationE(%"class.v8::internal::Isolate"* %0, i64 %66, %"class.v8::internal::MessageLocation"* null) #13
  br label %76

68:                                               ; preds = %57
  %69 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %70 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE9NewBigIntEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %69, i32 %54, i8 zeroext 0) #13
  %71 = load i64, i64* %70, align 8
  %72 = shl nsw i32 %54, 1
  %73 = add i64 %71, 3
  %74 = inttoptr i64 %73 to i32*
  store i32 %72, i32* %74, align 4
  %75 = icmp eq i64* %70, null
  br i1 %75, label %76, label %83, !prof !2

76:                                               ; preds = %63, %68
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0)) #14
  unreachable

77:                                               ; preds = %51
  %78 = add i64 %3, 3
  %79 = inttoptr i64 %78 to i32*
  %80 = load atomic i32, i32* %79 monotonic, align 4
  %81 = lshr i32 %80, 1
  %82 = and i32 %81, 1073741823
  br label %83

83:                                               ; preds = %68, %77
  %84 = phi i64* [ %52, %77 ], [ %70, %68 ]
  %85 = phi i32 [ %82, %77 ], [ %54, %68 ]
  %86 = icmp eq i32 %32, 0
  br i1 %86, label %113, label %87

87:                                               ; preds = %83
  %88 = inttoptr i64 %31 to i64*
  %89 = inttoptr i64 %30 to i64*
  %90 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %6, i64 0, i32 0, i32 1, i32 0
  %91 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %6, i64 0, i32 0, i32 0
  %92 = zext i32 %32 to i64
  br label %93

93:                                               ; preds = %93, %87
  %94 = phi i64 [ 0, %87 ], [ %111, %93 ]
  %95 = load i64, i64* %84, align 8
  %96 = load i64, i64* %88, align 8
  %97 = shl i64 %94, 3
  %98 = and i64 %97, 4294967288
  %99 = or i64 %98, 7
  %100 = add i64 %96, %99
  %101 = inttoptr i64 %100 to i64*
  %102 = load i64, i64* %101, align 1
  %103 = load i64, i64* %89, align 8
  %104 = add i64 %103, %99
  %105 = inttoptr i64 %104 to i64*
  %106 = load i64, i64* %105, align 1
  %107 = load i64 (%"union.std::__1::__function::__policy_storage"*, i64, i64)*, i64 (%"union.std::__1::__function::__policy_storage"*, i64, i64)** %90, align 8
  %108 = tail call i64 %107(%"union.std::__1::__function::__policy_storage"* %91, i64 %102, i64 %106) #13
  %109 = add i64 %95, %99
  %110 = inttoptr i64 %109 to i64*
  store i64 %108, i64* %110, align 1
  %111 = add nuw nsw i64 %94, 1
  %112 = icmp eq i64 %111, %92
  br i1 %112, label %113, label %93

113:                                              ; preds = %93, %83
  %114 = icmp slt i32 %32, %29
  %115 = and i1 %53, %114
  br i1 %115, label %116, label %165

116:                                              ; preds = %113
  %117 = inttoptr i64 %31 to i64*
  %118 = zext i32 %32 to i64
  %119 = zext i32 %29 to i64
  %120 = sub nsw i64 %119, %118
  %121 = xor i64 %118, -1
  %122 = and i64 %120, 1
  %123 = icmp eq i64 %122, 0
  br i1 %123, label %136, label %124

124:                                              ; preds = %116
  %125 = load i64, i64* %84, align 8
  %126 = load i64, i64* %117, align 8
  %127 = shl nuw nsw i64 %118, 3
  %128 = and i64 %127, 4294967288
  %129 = or i64 %128, 7
  %130 = add i64 %126, %129
  %131 = inttoptr i64 %130 to i64*
  %132 = load i64, i64* %131, align 1
  %133 = add i64 %125, %129
  %134 = inttoptr i64 %133 to i64*
  store i64 %132, i64* %134, align 1
  %135 = add nuw nsw i64 %118, 1
  br label %136

136:                                              ; preds = %116, %124
  %137 = phi i64 [ %118, %116 ], [ %135, %124 ]
  %138 = sub nsw i64 0, %119
  %139 = icmp eq i64 %121, %138
  br i1 %139, label %165, label %140

140:                                              ; preds = %136, %140
  %141 = phi i64 [ %163, %140 ], [ %137, %136 ]
  %142 = load i64, i64* %84, align 8
  %143 = load i64, i64* %117, align 8
  %144 = shl i64 %141, 3
  %145 = and i64 %144, 4294967288
  %146 = or i64 %145, 7
  %147 = add i64 %143, %146
  %148 = inttoptr i64 %147 to i64*
  %149 = load i64, i64* %148, align 1
  %150 = add i64 %142, %146
  %151 = inttoptr i64 %150 to i64*
  store i64 %149, i64* %151, align 1
  %152 = load i64, i64* %84, align 8
  %153 = load i64, i64* %117, align 8
  %154 = shl i64 %141, 3
  %155 = add i64 %154, 8
  %156 = and i64 %155, 4294967288
  %157 = or i64 %156, 7
  %158 = add i64 %153, %157
  %159 = inttoptr i64 %158 to i64*
  %160 = load i64, i64* %159, align 1
  %161 = add i64 %152, %157
  %162 = inttoptr i64 %161 to i64*
  store i64 %160, i64* %162, align 1
  %163 = add nuw nsw i64 %141, 2
  %164 = icmp eq i64 %163, %119
  br i1 %164, label %165, label %140

165:                                              ; preds = %136, %140, %113
  %166 = phi i32 [ %32, %113 ], [ %29, %140 ], [ %29, %136 ]
  %167 = icmp slt i32 %166, %85
  br i1 %167, label %168, label %206

168:                                              ; preds = %165
  %169 = zext i32 %166 to i64
  %170 = zext i32 %85 to i64
  %171 = sub nsw i64 %170, %169
  %172 = xor i64 %169, -1
  %173 = and i64 %171, 1
  %174 = icmp eq i64 %173, 0
  br i1 %174, label %183, label %175

175:                                              ; preds = %168
  %176 = load i64, i64* %84, align 8
  %177 = shl nsw i32 %166, 3
  %178 = or i32 %177, 7
  %179 = sext i32 %178 to i64
  %180 = add i64 %176, %179
  %181 = inttoptr i64 %180 to i64*
  store i64 0, i64* %181, align 1
  %182 = add nuw nsw i64 %169, 1
  br label %183

183:                                              ; preds = %168, %175
  %184 = phi i64 [ %169, %168 ], [ %182, %175 ]
  %185 = sub nsw i64 0, %170
  %186 = icmp eq i64 %172, %185
  br i1 %186, label %206, label %187

187:                                              ; preds = %183, %187
  %188 = phi i64 [ %204, %187 ], [ %184, %183 ]
  %189 = load i64, i64* %84, align 8
  %190 = trunc i64 %188 to i32
  %191 = shl nsw i32 %190, 3
  %192 = or i32 %191, 7
  %193 = sext i32 %192 to i64
  %194 = add i64 %189, %193
  %195 = inttoptr i64 %194 to i64*
  store i64 0, i64* %195, align 1
  %196 = load i64, i64* %84, align 8
  %197 = trunc i64 %188 to i32
  %198 = shl i32 %197, 3
  %199 = add i32 %198, 8
  %200 = or i32 %199, 7
  %201 = sext i32 %200 to i64
  %202 = add i64 %196, %201
  %203 = inttoptr i64 %202 to i64*
  store i64 0, i64* %203, align 1
  %204 = add nuw nsw i64 %188, 2
  %205 = icmp eq i64 %204, %170
  br i1 %205, label %206, label %187

206:                                              ; preds = %183, %187, %165
  ret i64* %84
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13MutableBigInt19InternalMultiplyAddENS0_10BigIntBaseEmmiS1_(i64, i64, i64, i32, i64) local_unnamed_addr #0 align 2 {
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %12

7:                                                ; preds = %5
  %8 = zext i64 %1 to i128
  %9 = zext i32 %3 to i64
  br label %22

10:                                               ; preds = %22
  %11 = trunc i128 %34 to i64
  br label %12

12:                                               ; preds = %10, %5
  %13 = phi i64 [ 0, %5 ], [ %11, %10 ]
  %14 = phi i64 [ %2, %5 ], [ %46, %10 ]
  %15 = add i64 %4, 3
  %16 = inttoptr i64 %15 to i32*
  %17 = load atomic i32, i32* %16 monotonic, align 4
  %18 = lshr i32 %17, 1
  %19 = and i32 %18, 1073741823
  %20 = icmp sgt i32 %19, %3
  %21 = add i64 %14, %13
  br i1 %20, label %52, label %80

22:                                               ; preds = %22, %7
  %23 = phi i64 [ 0, %7 ], [ %50, %22 ]
  %24 = phi i64 [ %2, %7 ], [ %46, %22 ]
  %25 = phi i64 [ 0, %7 ], [ %35, %22 ]
  %26 = shl i64 %23, 3
  %27 = and i64 %26, 4294967288
  %28 = or i64 %27, 7
  %29 = add i64 %28, %0
  %30 = inttoptr i64 %29 to i64*
  %31 = load i64, i64* %30, align 1
  %32 = zext i64 %31 to i128
  %33 = mul nuw i128 %32, %8
  %34 = lshr i128 %33, 64
  %35 = trunc i128 %34 to i64
  %36 = and i128 %33, 18446744073709551615
  %37 = zext i64 %25 to i128
  %38 = add nuw nsw i128 %36, %37
  %39 = lshr i128 %38, 64
  %40 = trunc i128 %39 to i64
  %41 = and i128 %38, 18446744073709551615
  %42 = zext i64 %24 to i128
  %43 = add nuw nsw i128 %41, %42
  %44 = lshr i128 %43, 64
  %45 = trunc i128 %44 to i64
  %46 = add nuw nsw i64 %45, %40
  %47 = trunc i128 %43 to i64
  %48 = add i64 %28, %4
  %49 = inttoptr i64 %48 to i64*
  store i64 %47, i64* %49, align 1
  %50 = add nuw nsw i64 %23, 1
  %51 = icmp eq i64 %50, %9
  br i1 %51, label %10, label %22

52:                                               ; preds = %12
  %53 = shl nsw i32 %3, 3
  %54 = or i32 %53, 7
  %55 = sext i32 %54 to i64
  %56 = add i64 %55, %4
  %57 = inttoptr i64 %56 to i64*
  store i64 %21, i64* %57, align 1
  %58 = add nsw i32 %3, 1
  %59 = load atomic i32, i32* %16 monotonic, align 4
  %60 = lshr i32 %59, 1
  %61 = and i32 %60, 1073741823
  %62 = icmp slt i32 %58, %61
  br i1 %62, label %63, label %83

63:                                               ; preds = %52
  %64 = sext i32 %3 to i64
  %65 = add nsw i64 %64, 1
  br label %66

66:                                               ; preds = %63, %66
  %67 = phi i64 [ %65, %63 ], [ %74, %66 ]
  %68 = trunc i64 %67 to i32
  %69 = shl nsw i32 %68, 3
  %70 = or i32 %69, 7
  %71 = sext i32 %70 to i64
  %72 = add i64 %71, %4
  %73 = inttoptr i64 %72 to i64*
  store i64 0, i64* %73, align 1
  %74 = add nsw i64 %67, 1
  %75 = load atomic i32, i32* %16 monotonic, align 4
  %76 = lshr i32 %75, 1
  %77 = and i32 %76, 1073741823
  %78 = zext i32 %77 to i64
  %79 = icmp slt i64 %74, %78
  br i1 %79, label %66, label %83

80:                                               ; preds = %12
  %81 = icmp eq i64 %21, 0
  br i1 %81, label %83, label %82, !prof !7

82:                                               ; preds = %80
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4, i64 0, i64 0)) #14
  unreachable

83:                                               ; preds = %66, %52, %80
  ret void
}

; Function Attrs: noreturn
declare void @_Z8V8_FatalPKcz(i8*, ...) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal6BigInt18InplaceMultiplyAddENS0_22FreshlyAllocatedBigIntEmm(i64, i64, i64) local_unnamed_addr #0 align 2 {
  %4 = add i64 %0, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load atomic i32, i32* %5 monotonic, align 4
  %7 = lshr i32 %6, 1
  %8 = and i32 %7, 1073741823
  tail call void @_ZN2v88internal13MutableBigInt19InternalMultiplyAddENS0_10BigIntBaseEmmiS1_(i64 %0, i64 %1, i64 %2, i32 %8, i64 %0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal13MutableBigInt16SpecialLeftShiftEPNS0_7IsolateENS0_6HandleINS0_10BigIntBaseEEEiNS1_20SpecialLeftShiftModeE(%"class.v8::internal::Isolate"*, i64*, i32, i32) local_unnamed_addr #0 align 2 {
  %5 = load i64, i64* %1, align 8
  %6 = add i64 %5, 3
  %7 = inttoptr i64 %6 to i32*
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = lshr i32 %8, 1
  %10 = and i32 %9, 1073741823
  %11 = icmp eq i32 %3, 1
  %12 = zext i1 %11 to i32
  %13 = add nuw nsw i32 %10, %12
  %14 = icmp ugt i32 %13, 16777216
  br i1 %14, label %15, label %24

15:                                               ; preds = %4
  %16 = load i8, i8* @_ZN2v88internal36FLAG_correctness_fuzzer_suppressionsE, align 1, !range !3
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %19, label %18

18:                                               ; preds = %15
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.6, i64 0, i64 0)) #14
  unreachable

19:                                               ; preds = %15
  %20 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::Factory"*
  %21 = tail call i64* @_ZN2v88internal7Factory13NewRangeErrorENS0_15MessageTemplateENS0_6HandleINS0_6ObjectEEES5_S5_(%"class.v8::internal::Factory"* %20, i32 190, i64* null, i64* null, i64* null) #13
  %22 = load i64, i64* %21, align 8
  %23 = tail call i64 @_ZN2v88internal7Isolate13ThrowInternalENS0_6ObjectEPNS0_15MessageLocationE(%"class.v8::internal::Isolate"* %0, i64 %22, %"class.v8::internal::MessageLocation"* null) #13
  br label %164

24:                                               ; preds = %4
  %25 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %26 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE9NewBigIntEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %25, i32 %13, i8 zeroext 0) #13
  %27 = load i64, i64* %26, align 8
  %28 = shl nuw i32 %13, 1
  %29 = add i64 %27, 3
  %30 = inttoptr i64 %29 to i32*
  store i32 %28, i32* %30, align 4
  %31 = icmp eq i64* %26, null
  br i1 %31, label %164, label %32

32:                                               ; preds = %24
  %33 = ptrtoint i64* %26 to i64
  %34 = icmp eq i32 %2, 0
  %35 = icmp ne i32 %10, 0
  br i1 %34, label %46, label %36

36:                                               ; preds = %32
  br i1 %35, label %37, label %122

37:                                               ; preds = %36
  %38 = zext i32 %2 to i64
  %39 = sub nsw i32 64, %2
  %40 = zext i32 %39 to i64
  %41 = zext i32 %10 to i64
  %42 = and i64 %41, 1
  %43 = icmp eq i32 %10, 1
  br i1 %43, label %106, label %44

44:                                               ; preds = %37
  %45 = sub nsw i64 %41, %42
  br label %124

46:                                               ; preds = %32
  br i1 %35, label %47, label %68

47:                                               ; preds = %46
  %48 = zext i32 %10 to i64
  %49 = and i64 %48, 1
  %50 = icmp eq i32 %10, 1
  br i1 %50, label %57, label %51

51:                                               ; preds = %47
  %52 = sub nsw i64 %48, %49
  br label %69

53:                                               ; preds = %69
  %54 = shl i64 %92, 3
  %55 = and i64 %54, 4294967280
  %56 = or i64 %55, 7
  br label %57

57:                                               ; preds = %53, %47
  %58 = phi i64 [ 7, %47 ], [ %56, %53 ]
  %59 = icmp eq i64 %49, 0
  br i1 %59, label %68, label %60

60:                                               ; preds = %57
  %61 = load i64, i64* %26, align 8
  %62 = load i64, i64* %1, align 8
  %63 = add i64 %62, %58
  %64 = inttoptr i64 %63 to i64*
  %65 = load i64, i64* %64, align 1
  %66 = add i64 %61, %58
  %67 = inttoptr i64 %66 to i64*
  store i64 %65, i64* %67, align 1
  br label %68

68:                                               ; preds = %60, %57, %46
  br i1 %11, label %95, label %164

69:                                               ; preds = %69, %51
  %70 = phi i64 [ 0, %51 ], [ %92, %69 ]
  %71 = phi i64 [ %52, %51 ], [ %93, %69 ]
  %72 = load i64, i64* %26, align 8
  %73 = load i64, i64* %1, align 8
  %74 = shl i64 %70, 3
  %75 = and i64 %74, 4294967280
  %76 = or i64 %75, 7
  %77 = add i64 %73, %76
  %78 = inttoptr i64 %77 to i64*
  %79 = load i64, i64* %78, align 1
  %80 = add i64 %72, %76
  %81 = inttoptr i64 %80 to i64*
  store i64 %79, i64* %81, align 1
  %82 = load i64, i64* %26, align 8
  %83 = load i64, i64* %1, align 8
  %84 = shl i64 %70, 3
  %85 = and i64 %84, 4294967280
  %86 = or i64 %85, 15
  %87 = add i64 %83, %86
  %88 = inttoptr i64 %87 to i64*
  %89 = load i64, i64* %88, align 1
  %90 = add i64 %82, %86
  %91 = inttoptr i64 %90 to i64*
  store i64 %89, i64* %91, align 1
  %92 = add nuw nsw i64 %70, 2
  %93 = add i64 %71, -2
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %53, label %69

95:                                               ; preds = %68
  %96 = load i64, i64* %26, align 8
  %97 = shl nsw i32 %10, 3
  %98 = or i32 %97, 7
  %99 = zext i32 %98 to i64
  %100 = add i64 %96, %99
  %101 = inttoptr i64 %100 to i64*
  store i64 0, i64* %101, align 1
  br label %164

102:                                              ; preds = %124
  %103 = shl i64 %154, 3
  %104 = and i64 %103, 4294967280
  %105 = or i64 %104, 7
  br label %106

106:                                              ; preds = %102, %37
  %107 = phi i64 [ undef, %37 ], [ %153, %102 ]
  %108 = phi i64 [ 7, %37 ], [ %105, %102 ]
  %109 = phi i64 [ 0, %37 ], [ %153, %102 ]
  %110 = icmp eq i64 %42, 0
  br i1 %110, label %122, label %111

111:                                              ; preds = %106
  %112 = load i64, i64* %1, align 8
  %113 = add i64 %112, %108
  %114 = inttoptr i64 %113 to i64*
  %115 = load i64, i64* %114, align 1
  %116 = load i64, i64* %26, align 8
  %117 = shl i64 %115, %38
  %118 = or i64 %117, %109
  %119 = add i64 %116, %108
  %120 = inttoptr i64 %119 to i64*
  store i64 %118, i64* %120, align 1
  %121 = lshr i64 %115, %40
  br label %122

122:                                              ; preds = %111, %106, %36
  %123 = phi i64 [ 0, %36 ], [ %107, %106 ], [ %121, %111 ]
  br i1 %11, label %157, label %164

124:                                              ; preds = %124, %44
  %125 = phi i64 [ 0, %44 ], [ %154, %124 ]
  %126 = phi i64 [ 0, %44 ], [ %153, %124 ]
  %127 = phi i64 [ %45, %44 ], [ %155, %124 ]
  %128 = load i64, i64* %1, align 8
  %129 = shl i64 %125, 3
  %130 = and i64 %129, 4294967280
  %131 = or i64 %130, 7
  %132 = add i64 %128, %131
  %133 = inttoptr i64 %132 to i64*
  %134 = load i64, i64* %133, align 1
  %135 = load i64, i64* %26, align 8
  %136 = shl i64 %134, %38
  %137 = or i64 %136, %126
  %138 = add i64 %135, %131
  %139 = inttoptr i64 %138 to i64*
  store i64 %137, i64* %139, align 1
  %140 = lshr i64 %134, %40
  %141 = load i64, i64* %1, align 8
  %142 = shl i64 %125, 3
  %143 = and i64 %142, 4294967280
  %144 = or i64 %143, 15
  %145 = add i64 %141, %144
  %146 = inttoptr i64 %145 to i64*
  %147 = load i64, i64* %146, align 1
  %148 = load i64, i64* %26, align 8
  %149 = shl i64 %147, %38
  %150 = or i64 %149, %140
  %151 = add i64 %148, %144
  %152 = inttoptr i64 %151 to i64*
  store i64 %150, i64* %152, align 1
  %153 = lshr i64 %147, %40
  %154 = add nuw nsw i64 %125, 2
  %155 = add i64 %127, -2
  %156 = icmp eq i64 %155, 0
  br i1 %156, label %102, label %124

157:                                              ; preds = %122
  %158 = load i64, i64* %26, align 8
  %159 = shl nsw i32 %10, 3
  %160 = or i32 %159, 7
  %161 = zext i32 %160 to i64
  %162 = add i64 %158, %161
  %163 = inttoptr i64 %162 to i64*
  store i64 %123, i64* %163, align 1
  br label %164

164:                                              ; preds = %157, %122, %68, %95, %24, %19
  %165 = phi i64 [ 0, %19 ], [ 0, %24 ], [ %33, %95 ], [ %33, %68 ], [ %33, %122 ], [ %33, %157 ]
  %166 = inttoptr i64 %165 to i64*
  ret i64* %166
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN2v88internal13MutableBigInt18ProductGreaterThanEmmmm(i64, i64, i64, i64) local_unnamed_addr #7 align 2 {
  %5 = zext i64 %0 to i128
  %6 = zext i64 %1 to i128
  %7 = mul nuw i128 %6, %5
  %8 = lshr i128 %7, 64
  %9 = trunc i128 %8 to i64
  %10 = icmp ugt i64 %9, %2
  br i1 %10, label %16, label %11

11:                                               ; preds = %4
  %12 = trunc i128 %7 to i64
  %13 = icmp eq i64 %9, %2
  %14 = icmp ugt i64 %12, %3
  %15 = and i1 %14, %13
  br label %16

16:                                               ; preds = %11, %4
  %17 = phi i1 [ true, %4 ], [ %15, %11 ]
  ret i1 %17
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN2v88internal13MutableBigInt10InplaceSubENS0_6HandleINS0_10BigIntBaseEEEi(%"class.v8::internal::MutableBigInt"* nocapture readonly, i64*, i32) local_unnamed_addr #0 align 2 {
  %4 = load i64, i64* %1, align 8
  %5 = add i64 %4, 3
  %6 = inttoptr i64 %5 to i32*
  %7 = load atomic i32, i32* %6 monotonic, align 4
  %8 = lshr i32 %7, 1
  %9 = and i32 %8, 1073741823
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %14, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.v8::internal::MutableBigInt", %"class.v8::internal::MutableBigInt"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = zext i32 %9 to i64
  br label %16

14:                                               ; preds = %16, %3
  %15 = phi i64 [ 0, %3 ], [ %47, %16 ]
  ret i64 %15

16:                                               ; preds = %51, %11
  %17 = phi i64 [ %4, %11 ], [ %52, %51 ]
  %18 = phi i64 [ 0, %11 ], [ %49, %51 ]
  %19 = phi i64 [ 0, %11 ], [ %47, %51 ]
  %20 = trunc i64 %18 to i32
  %21 = add i32 %20, %2
  %22 = shl nsw i32 %21, 3
  %23 = load i64, i64* %12, align 8
  %24 = or i32 %22, 7
  %25 = sext i32 %24 to i64
  %26 = add i64 %23, %25
  %27 = inttoptr i64 %26 to i64*
  %28 = load i64, i64* %27, align 1
  %29 = shl i64 %18, 3
  %30 = and i64 %29, 4294967288
  %31 = or i64 %30, 7
  %32 = add i64 %17, %31
  %33 = inttoptr i64 %32 to i64*
  %34 = load i64, i64* %33, align 1
  %35 = zext i64 %28 to i128
  %36 = zext i64 %34 to i128
  %37 = sub nsw i128 %35, %36
  %38 = lshr i128 %37, 64
  %39 = trunc i128 %38 to i64
  %40 = and i64 %39, 1
  %41 = and i128 %37, 18446744073709551615
  %42 = zext i64 %19 to i128
  %43 = sub nsw i128 %41, %42
  %44 = lshr i128 %43, 64
  %45 = trunc i128 %44 to i64
  %46 = and i64 %45, 1
  %47 = add nuw nsw i64 %46, %40
  %48 = trunc i128 %43 to i64
  store i64 %48, i64* %27, align 1
  %49 = add nuw nsw i64 %18, 1
  %50 = icmp eq i64 %49, %13
  br i1 %50, label %14, label %51

51:                                               ; preds = %16
  %52 = load i64, i64* %1, align 8
  br label %16
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN2v88internal13MutableBigInt10InplaceAddENS0_6HandleINS0_10BigIntBaseEEEi(%"class.v8::internal::MutableBigInt"* nocapture readonly, i64*, i32) local_unnamed_addr #0 align 2 {
  %4 = load i64, i64* %1, align 8
  %5 = add i64 %4, 3
  %6 = inttoptr i64 %5 to i32*
  %7 = load atomic i32, i32* %6 monotonic, align 4
  %8 = lshr i32 %7, 1
  %9 = and i32 %8, 1073741823
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %14, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.v8::internal::MutableBigInt", %"class.v8::internal::MutableBigInt"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = zext i32 %9 to i64
  br label %16

14:                                               ; preds = %16, %3
  %15 = phi i64 [ 0, %3 ], [ %45, %16 ]
  ret i64 %15

16:                                               ; preds = %49, %11
  %17 = phi i64 [ %4, %11 ], [ %50, %49 ]
  %18 = phi i64 [ 0, %11 ], [ %47, %49 ]
  %19 = phi i64 [ 0, %11 ], [ %45, %49 ]
  %20 = trunc i64 %18 to i32
  %21 = add i32 %20, %2
  %22 = shl nsw i32 %21, 3
  %23 = load i64, i64* %12, align 8
  %24 = or i32 %22, 7
  %25 = sext i32 %24 to i64
  %26 = add i64 %23, %25
  %27 = inttoptr i64 %26 to i64*
  %28 = load i64, i64* %27, align 1
  %29 = shl i64 %18, 3
  %30 = and i64 %29, 4294967288
  %31 = or i64 %30, 7
  %32 = add i64 %17, %31
  %33 = inttoptr i64 %32 to i64*
  %34 = load i64, i64* %33, align 1
  %35 = zext i64 %28 to i128
  %36 = zext i64 %34 to i128
  %37 = add nuw nsw i128 %36, %35
  %38 = lshr i128 %37, 64
  %39 = trunc i128 %38 to i64
  %40 = and i128 %37, 18446744073709551615
  %41 = zext i64 %19 to i128
  %42 = add nuw nsw i128 %40, %41
  %43 = lshr i128 %42, 64
  %44 = trunc i128 %43 to i64
  %45 = add nuw nsw i64 %44, %39
  %46 = trunc i128 %42 to i64
  store i64 %46, i64* %27, align 1
  %47 = add nuw nsw i64 %18, 1
  %48 = icmp eq i64 %47, %13
  br i1 %48, label %14, label %49

49:                                               ; preds = %16
  %50 = load i64, i64* %1, align 8
  br label %16
}

declare i64 @_ZN2v88internal10StackGuard16HandleInterruptsEv(%"class.v8::internal::StackGuard"*) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal13MutableBigInt17InplaceRightShiftEi(%"class.v8::internal::MutableBigInt"* nocapture readonly, i32) local_unnamed_addr #2 align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %63, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.v8::internal::MutableBigInt", %"class.v8::internal::MutableBigInt"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 7
  %8 = inttoptr i64 %7 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = zext i32 %1 to i64
  %11 = add i64 %6, 3
  %12 = inttoptr i64 %11 to i32*
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = lshr i32 %13, 1
  %15 = and i32 %14, 1073741823
  %16 = add nsw i32 %15, -1
  %17 = lshr i64 %9, %10
  %18 = icmp sgt i32 %16, 0
  br i1 %18, label %19, label %35

19:                                               ; preds = %4
  %20 = sub nsw i32 64, %1
  %21 = zext i32 %20 to i64
  %22 = zext i32 %16 to i64
  %23 = add i64 %6, 15
  %24 = inttoptr i64 %23 to i64*
  %25 = load i64, i64* %24, align 1
  %26 = shl i64 %25, %21
  %27 = or i64 %26, %17
  %28 = add i64 %6, 7
  %29 = inttoptr i64 %28 to i64*
  store i64 %27, i64* %29, align 1
  %30 = lshr i64 %25, %10
  %31 = icmp eq i32 %16, 1
  br i1 %31, label %32, label %43

32:                                               ; preds = %43, %19
  %33 = phi i64 [ %30, %19 ], [ %61, %43 ]
  %34 = load i64, i64* %5, align 8
  br label %35

35:                                               ; preds = %32, %4
  %36 = phi i64 [ %6, %4 ], [ %34, %32 ]
  %37 = phi i64 [ %17, %4 ], [ %33, %32 ]
  %38 = shl nsw i32 %16, 3
  %39 = or i32 %38, 7
  %40 = sext i32 %39 to i64
  %41 = add i64 %36, %40
  %42 = inttoptr i64 %41 to i64*
  store i64 %37, i64* %42, align 1
  br label %63

43:                                               ; preds = %19, %43
  %44 = phi i64 [ %61, %43 ], [ %30, %19 ]
  %45 = phi i64 [ %47, %43 ], [ 1, %19 ]
  %46 = load i64, i64* %5, align 8
  %47 = add nuw nsw i64 %45, 1
  %48 = shl i64 %47, 3
  %49 = and i64 %48, 4294967288
  %50 = or i64 %49, 7
  %51 = add i64 %46, %50
  %52 = inttoptr i64 %51 to i64*
  %53 = load i64, i64* %52, align 1
  %54 = shl i64 %53, %21
  %55 = or i64 %54, %44
  %56 = shl i64 %45, 3
  %57 = and i64 %56, 4294967288
  %58 = or i64 %57, 7
  %59 = add i64 %46, %58
  %60 = inttoptr i64 %59 to i64*
  store i64 %55, i64* %60, align 1
  %61 = lshr i64 %53, %10
  %62 = icmp eq i64 %47, %22
  br i1 %62, label %32, label %43

63:                                               ; preds = %2, %35
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden { i8, i64 } @_ZN2v88internal13MutableBigInt13ToShiftAmountENS0_6HandleINS0_10BigIntBaseEEE(i64*) local_unnamed_addr #0 align 2 {
  %2 = load i64, i64* %0, align 8
  %3 = add i64 %2, 3
  %4 = inttoptr i64 %3 to i32*
  %5 = load atomic i32, i32* %4 monotonic, align 4
  %6 = and i32 %5, 2147483644
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %14

8:                                                ; preds = %1
  %9 = add i64 %2, 7
  %10 = inttoptr i64 %9 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = icmp ult i64 %11, 1073741825
  %13 = zext i1 %12 to i8
  br label %14

14:                                               ; preds = %8, %1
  %15 = phi i64 [ undef, %1 ], [ %11, %8 ]
  %16 = phi i8 [ 0, %1 ], [ %13, %8 ]
  %17 = insertvalue { i8, i64 } undef, i8 %16, 0
  %18 = insertvalue { i8, i64 } %17, i64 %15, 1
  ret { i8, i64 } %18
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal13MutableBigInt19RightShiftByMaximumEPNS0_7IsolateEb(%"class.v8::internal::Isolate"*, i1 zeroext) local_unnamed_addr #0 align 2 {
  br i1 %1, label %3, label %5

3:                                                ; preds = %2
  %4 = tail call i64* @_ZN2v88internal13MutableBigInt10NewFromIntEPNS0_7IsolateEi(%"class.v8::internal::Isolate"* %0, i32 -1)
  br label %7

5:                                                ; preds = %2
  %6 = tail call i64* @_ZN2v88internal13MutableBigInt4ZeroINS0_7IsolateEEENS0_6HandleINS0_6BigIntEEEPT_NS0_14AllocationTypeE(%"class.v8::internal::Isolate"* %0, i8 zeroext 0)
  br label %7

7:                                                ; preds = %5, %3
  %8 = phi i64* [ %4, %3 ], [ %6, %5 ]
  ret i64* %8
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZNK2v88internal6BigInt27GetBitfieldForSerializationEv(%"class.v8::internal::BigInt"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::BigInt", %"class.v8::internal::BigInt"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load atomic i32, i32* %5 monotonic, align 4
  %7 = lshr i32 %6, 1
  %8 = shl i32 %7, 4
  %9 = load atomic i32, i32* %5 monotonic, align 4
  %10 = and i32 %9, 1
  %11 = or i32 %10, %8
  ret i32 %11
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN2v88internal6BigInt27DigitsByteLengthForBitfieldEj(i32) local_unnamed_addr #8 align 2 {
  %2 = lshr i32 %0, 1
  %3 = and i32 %2, 1073741823
  ret i32 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal6BigInt15SerializeDigitsEPh(%"class.v8::internal::BigInt"* nocapture readonly, i8* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::BigInt", %"class.v8::internal::BigInt"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, 7
  %6 = inttoptr i64 %5 to i8*
  %7 = add i64 %4, 3
  %8 = inttoptr i64 %7 to i32*
  %9 = load atomic i32, i32* %8 monotonic, align 4
  %10 = lshr i32 %9, 1
  %11 = shl i32 %10, 3
  %12 = sext i32 %11 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %6, i64 %12, i1 false) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal6BigInt20FromSerializedDigitsEPNS0_7IsolateEjNS0_6VectorIKhEE(%"class.v8::internal::Isolate"*, i32, i8*, i64) local_unnamed_addr #0 align 2 {
  %5 = lshr i32 %1, 1
  %6 = and i32 %5, 1073741823
  %7 = and i32 %1, 1
  %8 = add nuw nsw i32 %6, 7
  %9 = lshr i32 %8, 3
  %10 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %11 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE9NewBigIntEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %10, i32 %9, i8 zeroext 0) #13
  %12 = load i64, i64* %11, align 8
  %13 = shl nuw nsw i32 %9, 1
  %14 = or i32 %13, %7
  %15 = add i64 %12, 3
  %16 = inttoptr i64 %15 to i32*
  store i32 %14, i32* %16, align 4
  %17 = load i64, i64* %11, align 8
  %18 = add i64 %17, 7
  %19 = inttoptr i64 %18 to i8*
  %20 = zext i32 %6 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %19, i8* align 1 %2, i64 %20, i1 false) #13
  %21 = add i64 %18, %20
  %22 = inttoptr i64 %21 to i8*
  %23 = and i32 %8, 2147483640
  %24 = sub nsw i32 %23, %6
  %25 = sext i32 %24 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 0, i64 %25, i1 false)
  %26 = load i64, i64* %11, align 8
  %27 = add i64 %26, 3
  %28 = inttoptr i64 %27 to i32*
  %29 = load atomic i32, i32* %28 monotonic, align 4
  %30 = lshr i32 %29, 1
  %31 = and i32 %30, 1073741823
  %32 = zext i32 %31 to i64
  br label %33

33:                                               ; preds = %36, %4
  %34 = phi i64 [ %37, %36 ], [ %32, %4 ]
  %35 = icmp sgt i64 %34, 0
  br i1 %35, label %36, label %46

36:                                               ; preds = %33
  %37 = add nsw i64 %34, -1
  %38 = trunc i64 %37 to i32
  %39 = shl nsw i32 %38, 3
  %40 = or i32 %39, 7
  %41 = sext i32 %40 to i64
  %42 = add i64 %26, %41
  %43 = inttoptr i64 %42 to i64*
  %44 = load i64, i64* %43, align 1
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %33, label %46

46:                                               ; preds = %36, %33
  %47 = trunc i64 %34 to i32
  %48 = sub nsw i32 %31, %47
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %73, label %50

50:                                               ; preds = %46
  %51 = and i64 %26, -262144
  %52 = or i64 %51, 16
  %53 = inttoptr i64 %52 to %"class.v8::internal::Heap"**
  %54 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %53, align 16
  %55 = tail call zeroext i1 @_ZN2v88internal4Heap13IsLargeObjectENS0_10HeapObjectE(i64 %26) #13
  br i1 %55, label %64, label %56

56:                                               ; preds = %50
  %57 = shl i32 %47, 3
  %58 = add nsw i32 %57, 8
  %59 = add i64 %26, -1
  %60 = sext i32 %58 to i64
  %61 = add i64 %59, %60
  %62 = shl nsw i32 %48, 3
  %63 = tail call i64 @_ZN2v88internal4Heap20CreateFillerObjectAtEmiNS0_18ClearRecordedSlotsE(%"class.v8::internal::Heap"* %54, i64 %61, i32 %62, i32 1) #13
  br label %64

64:                                               ; preds = %56, %50
  %65 = load atomic i32, i32* %28 monotonic, align 4
  %66 = and i32 %65, -2147483647
  %67 = shl i32 %47, 1
  %68 = or i32 %66, %67
  store atomic volatile i32 %68, i32* %28 release, align 4
  %69 = icmp eq i32 %47, 0
  br i1 %69, label %70, label %73

70:                                               ; preds = %64
  %71 = load atomic i32, i32* %28 monotonic, align 4
  %72 = and i32 %71, -2
  store atomic volatile i32 %72, i32* %28 monotonic, align 4
  br label %73

73:                                               ; preds = %46, %64, %70
  ret i64* %11
}

declare i64* @_ZN2v88internal7Factory27NewInvalidStringLengthErrorEv(%"class.v8::internal::Factory"*) local_unnamed_addr #3

declare i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE19NewRawOneByteStringEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"*, i32, i8 zeroext) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZN2v88internal13MutableBigInt9digit_powEmm(i64, i64) local_unnamed_addr #8 align 2 {
  %3 = icmp eq i64 %1, 0
  br i1 %3, label %15, label %4

4:                                                ; preds = %2, %4
  %5 = phi i64 [ %11, %4 ], [ 1, %2 ]
  %6 = phi i64 [ %12, %4 ], [ %1, %2 ]
  %7 = phi i64 [ %13, %4 ], [ %0, %2 ]
  %8 = and i64 %6, 1
  %9 = icmp eq i64 %8, 0
  %10 = select i1 %9, i64 1, i64 %7
  %11 = mul i64 %10, %5
  %12 = lshr i64 %6, 1
  %13 = mul i64 %7, %7
  %14 = icmp eq i64 %12, 0
  br i1 %14, label %15, label %4

15:                                               ; preds = %4, %2
  %16 = phi i64 [ 1, %2 ], [ %11, %4 ]
  ret i64 %16
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal6BigInt6AsIntNEPNS0_7IsolateEmNS0_6HandleIS1_EE(%"class.v8::internal::Isolate"*, i64, i64*) local_unnamed_addr #0 align 2 {
  %4 = load i64, i64* %2, align 8
  %5 = add i64 %4, 3
  %6 = inttoptr i64 %5 to i32*
  %7 = load atomic i32, i32* %6 monotonic, align 4
  %8 = and i32 %7, 2147483646
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %79, label %10

10:                                               ; preds = %3
  %11 = icmp eq i64 %1, 0
  br i1 %11, label %12, label %14

12:                                               ; preds = %10
  %13 = tail call i64* @_ZN2v88internal13MutableBigInt4ZeroINS0_7IsolateEEENS0_6HandleINS0_6BigIntEEEPT_NS0_14AllocationTypeE(%"class.v8::internal::Isolate"* %0, i8 zeroext 0)
  br label %79

14:                                               ; preds = %10
  %15 = add i64 %1, 63
  %16 = lshr i64 %15, 6
  %17 = load atomic i32, i32* %6 monotonic, align 4
  %18 = lshr i32 %17, 1
  %19 = and i32 %18, 1073741823
  %20 = zext i32 %19 to i64
  %21 = icmp ugt i64 %16, %20
  br i1 %21, label %79, label %22

22:                                               ; preds = %14
  %23 = trunc i64 %16 to i32
  %24 = shl i64 %16, 35
  %25 = add i64 %24, -34359738368
  %26 = ashr exact i64 %25, 32
  %27 = or i64 %26, 7
  %28 = add i64 %4, %27
  %29 = inttoptr i64 %28 to i64*
  %30 = load i64, i64* %29, align 1
  %31 = and i64 %15, 63
  %32 = shl i64 1, %31
  %33 = icmp eq i64 %16, %20
  %34 = icmp ult i64 %30, %32
  %35 = and i1 %33, %34
  br i1 %35, label %79, label %36

36:                                               ; preds = %22
  %37 = and i64 %30, %32
  %38 = icmp eq i64 %37, %32
  %39 = trunc i64 %1 to i32
  br i1 %38, label %42, label %40

40:                                               ; preds = %36
  %41 = tail call i64* @_ZN2v88internal13MutableBigInt15TruncateToNBitsEPNS0_7IsolateEiNS0_6HandleINS0_6BigIntEEE(%"class.v8::internal::Isolate"* %0, i32 %39, i64* %2)
  br label %79

42:                                               ; preds = %36
  %43 = load atomic i32, i32* %6 monotonic, align 4
  %44 = and i32 %43, 1
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %48

46:                                               ; preds = %42
  %47 = tail call i64* @_ZN2v88internal13MutableBigInt28TruncateAndSubFromPowerOfTwoEPNS0_7IsolateEiNS0_6HandleINS0_6BigIntEEEb(%"class.v8::internal::Isolate"* %0, i32 %39, i64* %2, i1 zeroext true)
  br label %79

48:                                               ; preds = %42
  %49 = add i64 %32, -1
  %50 = and i64 %30, %49
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %52, label %77

52:                                               ; preds = %48
  %53 = add i32 %23, -2
  %54 = icmp sgt i32 %53, -1
  br i1 %54, label %55, label %72

55:                                               ; preds = %52
  %56 = sext i32 %53 to i64
  br label %60

57:                                               ; preds = %60
  %58 = add nsw i64 %61, -1
  %59 = icmp sgt i64 %61, 0
  br i1 %59, label %60, label %72

60:                                               ; preds = %55, %57
  %61 = phi i64 [ %56, %55 ], [ %58, %57 ]
  %62 = trunc i64 %61 to i32
  %63 = shl nsw i32 %62, 3
  %64 = or i32 %63, 7
  %65 = sext i32 %64 to i64
  %66 = add i64 %4, %65
  %67 = inttoptr i64 %66 to i64*
  %68 = load i64, i64* %67, align 1
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %57, label %70

70:                                               ; preds = %60
  %71 = tail call i64* @_ZN2v88internal13MutableBigInt28TruncateAndSubFromPowerOfTwoEPNS0_7IsolateEiNS0_6HandleINS0_6BigIntEEEb(%"class.v8::internal::Isolate"* %0, i32 %39, i64* %2, i1 zeroext false)
  br label %79

72:                                               ; preds = %57, %52
  %73 = icmp eq i64 %30, %32
  %74 = and i1 %33, %73
  br i1 %74, label %79, label %75

75:                                               ; preds = %72
  %76 = tail call i64* @_ZN2v88internal13MutableBigInt15TruncateToNBitsEPNS0_7IsolateEiNS0_6HandleINS0_6BigIntEEE(%"class.v8::internal::Isolate"* %0, i32 %39, i64* %2)
  br label %79

77:                                               ; preds = %48
  %78 = tail call i64* @_ZN2v88internal13MutableBigInt28TruncateAndSubFromPowerOfTwoEPNS0_7IsolateEiNS0_6HandleINS0_6BigIntEEEb(%"class.v8::internal::Isolate"* %0, i32 %39, i64* %2, i1 zeroext false)
  br label %79

79:                                               ; preds = %70, %22, %14, %3, %72, %40, %46, %75, %77, %12
  %80 = phi i64* [ %13, %12 ], [ %47, %46 ], [ %76, %75 ], [ %71, %70 ], [ %78, %77 ], [ %41, %40 ], [ %2, %72 ], [ %2, %3 ], [ %2, %14 ], [ %2, %22 ]
  ret i64* %80
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal13MutableBigInt15TruncateToNBitsEPNS0_7IsolateEiNS0_6HandleINS0_6BigIntEEE(%"class.v8::internal::Isolate"*, i32, i64*) local_unnamed_addr #0 align 2 {
  %4 = add nsw i32 %1, 63
  %5 = sdiv i32 %4, 64
  %6 = icmp sgt i32 %4, 1073741887
  br i1 %6, label %7, label %16

7:                                                ; preds = %3
  %8 = load i8, i8* @_ZN2v88internal36FLAG_correctness_fuzzer_suppressionsE, align 1, !range !3
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %11, label %10

10:                                               ; preds = %7
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.6, i64 0, i64 0)) #14
  unreachable

11:                                               ; preds = %7
  %12 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::Factory"*
  %13 = tail call i64* @_ZN2v88internal7Factory13NewRangeErrorENS0_15MessageTemplateENS0_6HandleINS0_6ObjectEEES5_S5_(%"class.v8::internal::Factory"* %12, i32 190, i64* null, i64* null, i64* null) #13
  %14 = load i64, i64* %13, align 8
  %15 = tail call i64 @_ZN2v88internal7Isolate13ThrowInternalENS0_6ObjectEPNS0_15MessageLocationE(%"class.v8::internal::Isolate"* %0, i64 %14, %"class.v8::internal::MessageLocation"* null) #13
  br label %24

16:                                               ; preds = %3
  %17 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %18 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE9NewBigIntEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %17, i32 %5, i8 zeroext 0) #13
  %19 = load i64, i64* %18, align 8
  %20 = shl nsw i32 %5, 1
  %21 = add i64 %19, 3
  %22 = inttoptr i64 %21 to i32*
  store i32 %20, i32* %22, align 4
  %23 = icmp eq i64* %18, null
  br i1 %23, label %24, label %25, !prof !2

24:                                               ; preds = %11, %16
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0)) #14
  unreachable

25:                                               ; preds = %16
  %26 = add nsw i32 %5, -1
  %27 = icmp sgt i32 %26, 0
  br i1 %27, label %28, label %48

28:                                               ; preds = %25
  %29 = zext i32 %26 to i64
  %30 = and i64 %29, 1
  %31 = icmp eq i32 %26, 1
  br i1 %31, label %37, label %32

32:                                               ; preds = %28
  %33 = sub nsw i64 %29, %30
  br label %58

34:                                               ; preds = %58
  %35 = shl i64 %79, 3
  %36 = or i64 %35, 7
  br label %37

37:                                               ; preds = %34, %28
  %38 = phi i64 [ 7, %28 ], [ %36, %34 ]
  %39 = icmp eq i64 %30, 0
  br i1 %39, label %48, label %40

40:                                               ; preds = %37
  %41 = load i64, i64* %18, align 8
  %42 = load i64, i64* %2, align 8
  %43 = add i64 %42, %38
  %44 = inttoptr i64 %43 to i64*
  %45 = load i64, i64* %44, align 1
  %46 = add i64 %41, %38
  %47 = inttoptr i64 %46 to i64*
  store i64 %45, i64* %47, align 1
  br label %48

48:                                               ; preds = %40, %37, %25
  %49 = load i64, i64* %2, align 8
  %50 = shl nsw i32 %26, 3
  %51 = or i32 %50, 7
  %52 = sext i32 %51 to i64
  %53 = add i64 %49, %52
  %54 = inttoptr i64 %53 to i64*
  %55 = load i64, i64* %54, align 1
  %56 = srem i32 %1, 64
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %87, label %82

58:                                               ; preds = %58, %32
  %59 = phi i64 [ 0, %32 ], [ %79, %58 ]
  %60 = phi i64 [ %33, %32 ], [ %80, %58 ]
  %61 = load i64, i64* %18, align 8
  %62 = load i64, i64* %2, align 8
  %63 = shl nsw i64 %59, 3
  %64 = or i64 %63, 7
  %65 = add i64 %62, %64
  %66 = inttoptr i64 %65 to i64*
  %67 = load i64, i64* %66, align 1
  %68 = add i64 %61, %64
  %69 = inttoptr i64 %68 to i64*
  store i64 %67, i64* %69, align 1
  %70 = load i64, i64* %18, align 8
  %71 = load i64, i64* %2, align 8
  %72 = shl i64 %59, 3
  %73 = or i64 %72, 15
  %74 = add i64 %71, %73
  %75 = inttoptr i64 %74 to i64*
  %76 = load i64, i64* %75, align 1
  %77 = add i64 %70, %73
  %78 = inttoptr i64 %77 to i64*
  store i64 %76, i64* %78, align 1
  %79 = add nuw nsw i64 %59, 2
  %80 = add i64 %60, -2
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %34, label %58

82:                                               ; preds = %48
  %83 = sub nsw i32 64, %56
  %84 = zext i32 %83 to i64
  %85 = lshr i64 -1, %84
  %86 = and i64 %55, %85
  br label %87

87:                                               ; preds = %48, %82
  %88 = phi i64 [ %86, %82 ], [ %55, %48 ]
  %89 = load i64, i64* %18, align 8
  %90 = add i64 %89, %52
  %91 = inttoptr i64 %90 to i64*
  store i64 %88, i64* %91, align 1
  %92 = load i64, i64* %18, align 8
  %93 = load i64, i64* %2, align 8
  %94 = add i64 %93, 3
  %95 = inttoptr i64 %94 to i32*
  %96 = load atomic i32, i32* %95 monotonic, align 4
  %97 = and i32 %96, 1
  %98 = add i64 %92, 3
  %99 = inttoptr i64 %98 to i32*
  %100 = load atomic i32, i32* %99 monotonic, align 4
  %101 = and i32 %100, -2
  %102 = or i32 %101, %97
  store atomic volatile i32 %102, i32* %99 monotonic, align 4
  %103 = load i64, i64* %18, align 8
  %104 = add i64 %103, 3
  %105 = inttoptr i64 %104 to i32*
  %106 = load atomic i32, i32* %105 monotonic, align 4
  %107 = lshr i32 %106, 1
  %108 = and i32 %107, 1073741823
  %109 = zext i32 %108 to i64
  br label %110

110:                                              ; preds = %113, %87
  %111 = phi i64 [ %114, %113 ], [ %109, %87 ]
  %112 = icmp sgt i64 %111, 0
  br i1 %112, label %113, label %123

113:                                              ; preds = %110
  %114 = add nsw i64 %111, -1
  %115 = trunc i64 %114 to i32
  %116 = shl nsw i32 %115, 3
  %117 = or i32 %116, 7
  %118 = sext i32 %117 to i64
  %119 = add i64 %103, %118
  %120 = inttoptr i64 %119 to i64*
  %121 = load i64, i64* %120, align 1
  %122 = icmp eq i64 %121, 0
  br i1 %122, label %110, label %123

123:                                              ; preds = %113, %110
  %124 = trunc i64 %111 to i32
  %125 = sub nsw i32 %108, %124
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %150, label %127

127:                                              ; preds = %123
  %128 = and i64 %103, -262144
  %129 = or i64 %128, 16
  %130 = inttoptr i64 %129 to %"class.v8::internal::Heap"**
  %131 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %130, align 16
  %132 = tail call zeroext i1 @_ZN2v88internal4Heap13IsLargeObjectENS0_10HeapObjectE(i64 %103) #13
  br i1 %132, label %141, label %133

133:                                              ; preds = %127
  %134 = shl i32 %124, 3
  %135 = add nsw i32 %134, 8
  %136 = add i64 %103, -1
  %137 = sext i32 %135 to i64
  %138 = add i64 %136, %137
  %139 = shl nsw i32 %125, 3
  %140 = tail call i64 @_ZN2v88internal4Heap20CreateFillerObjectAtEmiNS0_18ClearRecordedSlotsE(%"class.v8::internal::Heap"* %131, i64 %138, i32 %139, i32 1) #13
  br label %141

141:                                              ; preds = %133, %127
  %142 = load atomic i32, i32* %105 monotonic, align 4
  %143 = and i32 %142, -2147483647
  %144 = shl i32 %124, 1
  %145 = or i32 %143, %144
  store atomic volatile i32 %145, i32* %105 release, align 4
  %146 = icmp eq i32 %124, 0
  br i1 %146, label %147, label %150

147:                                              ; preds = %141
  %148 = load atomic i32, i32* %105 monotonic, align 4
  %149 = and i32 %148, -2
  store atomic volatile i32 %149, i32* %105 monotonic, align 4
  br label %150

150:                                              ; preds = %123, %141, %147
  ret i64* %18
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal13MutableBigInt28TruncateAndSubFromPowerOfTwoEPNS0_7IsolateEiNS0_6HandleINS0_6BigIntEEEb(%"class.v8::internal::Isolate"*, i32, i64*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %5 = add nsw i32 %1, 63
  %6 = sdiv i32 %5, 64
  %7 = icmp sgt i32 %5, 1073741887
  br i1 %7, label %8, label %17

8:                                                ; preds = %4
  %9 = load i8, i8* @_ZN2v88internal36FLAG_correctness_fuzzer_suppressionsE, align 1, !range !3
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %12, label %11

11:                                               ; preds = %8
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.6, i64 0, i64 0)) #14
  unreachable

12:                                               ; preds = %8
  %13 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::Factory"*
  %14 = tail call i64* @_ZN2v88internal7Factory13NewRangeErrorENS0_15MessageTemplateENS0_6HandleINS0_6ObjectEEES5_S5_(%"class.v8::internal::Factory"* %13, i32 190, i64* null, i64* null, i64* null) #13
  %15 = load i64, i64* %14, align 8
  %16 = tail call i64 @_ZN2v88internal7Isolate13ThrowInternalENS0_6ObjectEPNS0_15MessageLocationE(%"class.v8::internal::Isolate"* %0, i64 %15, %"class.v8::internal::MessageLocation"* null) #13
  br label %25

17:                                               ; preds = %4
  %18 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %19 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE9NewBigIntEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %18, i32 %6, i8 zeroext 0) #13
  %20 = load i64, i64* %19, align 8
  %21 = shl nsw i32 %6, 1
  %22 = add i64 %20, 3
  %23 = inttoptr i64 %22 to i32*
  store i32 %21, i32* %23, align 4
  %24 = icmp eq i64* %19, null
  br i1 %24, label %25, label %26, !prof !2

25:                                               ; preds = %12, %17
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0)) #14
  unreachable

26:                                               ; preds = %17
  %27 = add nsw i32 %6, -1
  %28 = load i64, i64* %2, align 8
  %29 = add i64 %28, 3
  %30 = inttoptr i64 %29 to i32*
  %31 = load atomic i32, i32* %30 monotonic, align 4
  %32 = lshr i32 %31, 1
  %33 = and i32 %32, 1073741823
  %34 = icmp slt i32 %33, %27
  %35 = select i1 %34, i32 %33, i32 %27
  %36 = icmp sgt i32 %35, 0
  br i1 %36, label %37, label %41

37:                                               ; preds = %26
  %38 = sext i32 %35 to i64
  br label %72

39:                                               ; preds = %72
  %40 = trunc i64 %98 to i32
  br label %41

41:                                               ; preds = %39, %26
  %42 = phi i64 [ 0, %26 ], [ %93, %39 ]
  %43 = phi i32 [ 0, %26 ], [ %40, %39 ]
  %44 = icmp slt i32 %43, %27
  br i1 %44, label %45, label %130

45:                                               ; preds = %41
  %46 = zext i32 %43 to i64
  %47 = zext i32 %27 to i64
  %48 = sub nsw i64 %47, %46
  %49 = xor i64 %46, -1
  %50 = and i64 %48, 1
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %66, label %52

52:                                               ; preds = %45
  %53 = zext i64 %42 to i128
  %54 = sub nsw i128 0, %53
  %55 = lshr i128 %54, 64
  %56 = trunc i128 %55 to i64
  %57 = and i64 %56, 1
  %58 = trunc i128 %54 to i64
  %59 = load i64, i64* %19, align 8
  %60 = shl nuw nsw i64 %46, 3
  %61 = and i64 %60, 4294967288
  %62 = or i64 %61, 7
  %63 = add i64 %59, %62
  %64 = inttoptr i64 %63 to i64*
  store i64 %58, i64* %64, align 1
  %65 = add nuw nsw i64 %46, 1
  br label %66

66:                                               ; preds = %45, %52
  %67 = phi i64 [ undef, %45 ], [ %57, %52 ]
  %68 = phi i64 [ %46, %45 ], [ %65, %52 ]
  %69 = phi i64 [ %42, %45 ], [ %57, %52 ]
  %70 = sub nsw i64 0, %47
  %71 = icmp eq i64 %49, %70
  br i1 %71, label %130, label %102

72:                                               ; preds = %100, %37
  %73 = phi i64 [ %28, %37 ], [ %101, %100 ]
  %74 = phi i64 [ 0, %37 ], [ %98, %100 ]
  %75 = phi i64 [ 0, %37 ], [ %93, %100 ]
  %76 = shl i64 %74, 3
  %77 = and i64 %76, 4294967288
  %78 = or i64 %77, 7
  %79 = add i64 %73, %78
  %80 = inttoptr i64 %79 to i64*
  %81 = load i64, i64* %80, align 1
  %82 = zext i64 %81 to i128
  %83 = sub nsw i128 0, %82
  %84 = lshr i128 %83, 64
  %85 = trunc i128 %84 to i64
  %86 = and i64 %85, 1
  %87 = and i128 %83, 18446744073709551615
  %88 = zext i64 %75 to i128
  %89 = sub nsw i128 %87, %88
  %90 = lshr i128 %89, 64
  %91 = trunc i128 %90 to i64
  %92 = and i64 %91, 1
  %93 = add nuw nsw i64 %92, %86
  %94 = trunc i128 %89 to i64
  %95 = load i64, i64* %19, align 8
  %96 = add i64 %95, %78
  %97 = inttoptr i64 %96 to i64*
  store i64 %94, i64* %97, align 1
  %98 = add nuw nsw i64 %74, 1
  %99 = icmp slt i64 %98, %38
  br i1 %99, label %100, label %39

100:                                              ; preds = %72
  %101 = load i64, i64* %2, align 8
  br label %72

102:                                              ; preds = %66, %102
  %103 = phi i64 [ %128, %102 ], [ %68, %66 ]
  %104 = phi i64 [ %119, %102 ], [ %69, %66 ]
  %105 = zext i64 %104 to i128
  %106 = sub nsw i128 0, %105
  %107 = lshr i128 %106, 64
  %108 = trunc i128 %106 to i64
  %109 = load i64, i64* %19, align 8
  %110 = shl i64 %103, 3
  %111 = and i64 %110, 4294967288
  %112 = or i64 %111, 7
  %113 = add i64 %109, %112
  %114 = inttoptr i64 %113 to i64*
  store i64 %108, i64* %114, align 1
  %115 = and i128 %107, 1
  %116 = sub nsw i128 0, %115
  %117 = lshr i128 %116, 64
  %118 = trunc i128 %117 to i64
  %119 = and i64 %118, 1
  %120 = trunc i128 %116 to i64
  %121 = load i64, i64* %19, align 8
  %122 = shl i64 %103, 3
  %123 = add i64 %122, 8
  %124 = and i64 %123, 4294967288
  %125 = or i64 %124, 7
  %126 = add i64 %121, %125
  %127 = inttoptr i64 %126 to i64*
  store i64 %120, i64* %127, align 1
  %128 = add nuw nsw i64 %103, 2
  %129 = icmp eq i64 %128, %47
  br i1 %129, label %130, label %102

130:                                              ; preds = %66, %102, %41
  %131 = phi i64 [ %42, %41 ], [ %67, %66 ], [ %119, %102 ]
  %132 = icmp sgt i32 %6, %33
  br i1 %132, label %141, label %133

133:                                              ; preds = %130
  %134 = load i64, i64* %2, align 8
  %135 = shl nsw i32 %27, 3
  %136 = or i32 %135, 7
  %137 = sext i32 %136 to i64
  %138 = add i64 %134, %137
  %139 = inttoptr i64 %138 to i64*
  %140 = load i64, i64* %139, align 1
  br label %141

141:                                              ; preds = %130, %133
  %142 = phi i64 [ %140, %133 ], [ 0, %130 ]
  %143 = srem i32 %1, 64
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %145, label %148

145:                                              ; preds = %141
  %146 = add i64 %142, %131
  %147 = sub i64 0, %146
  br label %159

148:                                              ; preds = %141
  %149 = sub nsw i32 64, %143
  %150 = zext i32 %149 to i64
  %151 = lshr i64 -1, %150
  %152 = and i64 %142, %151
  %153 = zext i32 %143 to i64
  %154 = shl i64 1, %153
  %155 = sub i64 %154, %131
  %156 = sub i64 %155, %152
  %157 = add i64 %154, -1
  %158 = and i64 %156, %157
  br label %159

159:                                              ; preds = %148, %145
  %160 = phi i64 [ %147, %145 ], [ %158, %148 ]
  %161 = load i64, i64* %19, align 8
  %162 = shl nsw i32 %27, 3
  %163 = or i32 %162, 7
  %164 = sext i32 %163 to i64
  %165 = add i64 %161, %164
  %166 = inttoptr i64 %165 to i64*
  store i64 %160, i64* %166, align 1
  %167 = load i64, i64* %19, align 8
  %168 = add i64 %167, 3
  %169 = inttoptr i64 %168 to i32*
  %170 = load atomic i32, i32* %169 monotonic, align 4
  %171 = and i32 %170, -2
  %172 = zext i1 %3 to i32
  %173 = or i32 %171, %172
  store atomic volatile i32 %173, i32* %169 monotonic, align 4
  %174 = load i64, i64* %19, align 8
  %175 = add i64 %174, 3
  %176 = inttoptr i64 %175 to i32*
  %177 = load atomic i32, i32* %176 monotonic, align 4
  %178 = lshr i32 %177, 1
  %179 = and i32 %178, 1073741823
  %180 = zext i32 %179 to i64
  br label %181

181:                                              ; preds = %184, %159
  %182 = phi i64 [ %185, %184 ], [ %180, %159 ]
  %183 = icmp sgt i64 %182, 0
  br i1 %183, label %184, label %194

184:                                              ; preds = %181
  %185 = add nsw i64 %182, -1
  %186 = trunc i64 %185 to i32
  %187 = shl nsw i32 %186, 3
  %188 = or i32 %187, 7
  %189 = sext i32 %188 to i64
  %190 = add i64 %174, %189
  %191 = inttoptr i64 %190 to i64*
  %192 = load i64, i64* %191, align 1
  %193 = icmp eq i64 %192, 0
  br i1 %193, label %181, label %194

194:                                              ; preds = %184, %181
  %195 = trunc i64 %182 to i32
  %196 = sub nsw i32 %179, %195
  %197 = icmp eq i32 %196, 0
  br i1 %197, label %221, label %198

198:                                              ; preds = %194
  %199 = and i64 %174, -262144
  %200 = or i64 %199, 16
  %201 = inttoptr i64 %200 to %"class.v8::internal::Heap"**
  %202 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %201, align 16
  %203 = tail call zeroext i1 @_ZN2v88internal4Heap13IsLargeObjectENS0_10HeapObjectE(i64 %174) #13
  br i1 %203, label %212, label %204

204:                                              ; preds = %198
  %205 = shl i32 %195, 3
  %206 = add nsw i32 %205, 8
  %207 = add i64 %174, -1
  %208 = sext i32 %206 to i64
  %209 = add i64 %207, %208
  %210 = shl nsw i32 %196, 3
  %211 = tail call i64 @_ZN2v88internal4Heap20CreateFillerObjectAtEmiNS0_18ClearRecordedSlotsE(%"class.v8::internal::Heap"* %202, i64 %209, i32 %210, i32 1) #13
  br label %212

212:                                              ; preds = %204, %198
  %213 = load atomic i32, i32* %176 monotonic, align 4
  %214 = and i32 %213, -2147483647
  %215 = shl i32 %195, 1
  %216 = or i32 %214, %215
  store atomic volatile i32 %216, i32* %176 release, align 4
  %217 = icmp eq i32 %195, 0
  br i1 %217, label %218, label %221

218:                                              ; preds = %212
  %219 = load atomic i32, i32* %176 monotonic, align 4
  %220 = and i32 %219, -2
  store atomic volatile i32 %220, i32* %176 monotonic, align 4
  br label %221

221:                                              ; preds = %194, %212, %218
  ret i64* %19
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal6BigInt7AsUintNEPNS0_7IsolateEmNS0_6HandleIS1_EE(%"class.v8::internal::Isolate"*, i64, i64*) local_unnamed_addr #0 align 2 {
  %4 = load i64, i64* %2, align 8
  %5 = add i64 %4, 3
  %6 = inttoptr i64 %5 to i32*
  %7 = load atomic i32, i32* %6 monotonic, align 4
  %8 = and i32 %7, 2147483646
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %64, label %10

10:                                               ; preds = %3
  %11 = icmp eq i64 %1, 0
  br i1 %11, label %12, label %14

12:                                               ; preds = %10
  %13 = tail call i64* @_ZN2v88internal13MutableBigInt4ZeroINS0_7IsolateEEENS0_6HandleINS0_6BigIntEEEPT_NS0_14AllocationTypeE(%"class.v8::internal::Isolate"* %0, i8 zeroext 0)
  br label %64

14:                                               ; preds = %10
  %15 = load atomic i32, i32* %6 monotonic, align 4
  %16 = and i32 %15, 1
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %32, label %18

18:                                               ; preds = %14
  %19 = icmp ugt i64 %1, 1073741824
  br i1 %19, label %20, label %29

20:                                               ; preds = %18
  %21 = load i8, i8* @_ZN2v88internal36FLAG_correctness_fuzzer_suppressionsE, align 1, !range !3
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %24, label %23

23:                                               ; preds = %20
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.6, i64 0, i64 0)) #14
  unreachable

24:                                               ; preds = %20
  %25 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::Factory"*
  %26 = tail call i64* @_ZN2v88internal7Factory13NewRangeErrorENS0_15MessageTemplateENS0_6HandleINS0_6ObjectEEES5_S5_(%"class.v8::internal::Factory"* %25, i32 190, i64* null, i64* null, i64* null) #13
  %27 = load i64, i64* %26, align 8
  %28 = tail call i64 @_ZN2v88internal7Isolate13ThrowInternalENS0_6ObjectEPNS0_15MessageLocationE(%"class.v8::internal::Isolate"* %0, i64 %27, %"class.v8::internal::MessageLocation"* null) #13
  br label %64

29:                                               ; preds = %18
  %30 = trunc i64 %1 to i32
  %31 = tail call i64* @_ZN2v88internal13MutableBigInt28TruncateAndSubFromPowerOfTwoEPNS0_7IsolateEiNS0_6HandleINS0_6BigIntEEEb(%"class.v8::internal::Isolate"* %0, i32 %30, i64* %2, i1 zeroext false)
  br label %64

32:                                               ; preds = %14
  %33 = icmp ugt i64 %1, 1073741823
  br i1 %33, label %64, label %34

34:                                               ; preds = %32
  %35 = add nuw nsw i64 %1, 63
  %36 = lshr i64 %35, 6
  %37 = trunc i64 %36 to i32
  %38 = load atomic i32, i32* %6 monotonic, align 4
  %39 = lshr i32 %38, 1
  %40 = and i32 %39, 1073741823
  %41 = icmp slt i32 %40, %37
  br i1 %41, label %64, label %42

42:                                               ; preds = %34
  %43 = trunc i64 %1 to i32
  %44 = and i32 %43, 63
  %45 = load atomic i32, i32* %6 monotonic, align 4
  %46 = lshr i32 %45, 1
  %47 = and i32 %46, 1073741823
  %48 = icmp eq i32 %47, %37
  br i1 %48, label %49, label %62

49:                                               ; preds = %42
  %50 = icmp eq i32 %44, 0
  br i1 %50, label %64, label %51

51:                                               ; preds = %49
  %52 = shl i64 %36, 35
  %53 = add nsw i64 %52, -34359738368
  %54 = ashr exact i64 %53, 32
  %55 = or i64 %54, 7
  %56 = add i64 %4, %55
  %57 = inttoptr i64 %56 to i64*
  %58 = load i64, i64* %57, align 1
  %59 = zext i32 %44 to i64
  %60 = lshr i64 %58, %59
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %64, label %62

62:                                               ; preds = %51, %42
  %63 = tail call i64* @_ZN2v88internal13MutableBigInt15TruncateToNBitsEPNS0_7IsolateEiNS0_6HandleINS0_6BigIntEEE(%"class.v8::internal::Isolate"* %0, i32 %43, i64* %2)
  br label %64

64:                                               ; preds = %51, %49, %34, %32, %3, %62, %29, %24, %12
  %65 = phi i64* [ %13, %12 ], [ null, %24 ], [ %31, %29 ], [ %63, %62 ], [ %2, %3 ], [ %2, %32 ], [ %2, %34 ], [ %2, %49 ], [ %2, %51 ]
  ret i64* %65
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal6BigInt9FromInt64EPNS0_7IsolateEl(%"class.v8::internal::Isolate"*, i64) local_unnamed_addr #0 align 2 {
  %3 = icmp eq i64 %1, 0
  br i1 %3, label %4, label %6

4:                                                ; preds = %2
  %5 = tail call i64* @_ZN2v88internal13MutableBigInt4ZeroINS0_7IsolateEEENS0_6HandleINS0_6BigIntEEEPT_NS0_14AllocationTypeE(%"class.v8::internal::Isolate"* %0, i8 zeroext 0)
  br label %72

6:                                                ; preds = %2
  %7 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %8 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE9NewBigIntEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %7, i32 1, i8 zeroext 0) #13
  %9 = icmp slt i64 %1, 0
  %10 = load i64, i64* %8, align 8
  %11 = lshr i64 %1, 63
  %12 = trunc i64 %11 to i32
  %13 = or i32 %12, 2
  %14 = add i64 %10, 3
  %15 = inttoptr i64 %14 to i32*
  store i32 %13, i32* %15, align 4
  br i1 %9, label %16, label %20

16:                                               ; preds = %6
  %17 = icmp eq i64 %1, -9223372036854775808
  %18 = sub nsw i64 0, %1
  %19 = select i1 %17, i64 -9223372036854775808, i64 %18
  br label %20

20:                                               ; preds = %16, %6
  %21 = phi i64 [ %1, %6 ], [ %19, %16 ]
  %22 = load i64, i64* %8, align 8
  %23 = add i64 %22, 7
  %24 = inttoptr i64 %23 to i64*
  store i64 %21, i64* %24, align 1
  %25 = load i64, i64* %8, align 8
  %26 = add i64 %25, 3
  %27 = inttoptr i64 %26 to i32*
  %28 = load atomic i32, i32* %27 monotonic, align 4
  %29 = lshr i32 %28, 1
  %30 = and i32 %29, 1073741823
  %31 = zext i32 %30 to i64
  br label %32

32:                                               ; preds = %35, %20
  %33 = phi i64 [ %36, %35 ], [ %31, %20 ]
  %34 = icmp sgt i64 %33, 0
  br i1 %34, label %35, label %45

35:                                               ; preds = %32
  %36 = add nsw i64 %33, -1
  %37 = trunc i64 %36 to i32
  %38 = shl nsw i32 %37, 3
  %39 = or i32 %38, 7
  %40 = sext i32 %39 to i64
  %41 = add i64 %25, %40
  %42 = inttoptr i64 %41 to i64*
  %43 = load i64, i64* %42, align 1
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %32, label %45

45:                                               ; preds = %35, %32
  %46 = trunc i64 %33 to i32
  %47 = sub nsw i32 %30, %46
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %72, label %49

49:                                               ; preds = %45
  %50 = and i64 %25, -262144
  %51 = or i64 %50, 16
  %52 = inttoptr i64 %51 to %"class.v8::internal::Heap"**
  %53 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %52, align 16
  %54 = tail call zeroext i1 @_ZN2v88internal4Heap13IsLargeObjectENS0_10HeapObjectE(i64 %25) #13
  br i1 %54, label %63, label %55

55:                                               ; preds = %49
  %56 = shl i32 %46, 3
  %57 = add nsw i32 %56, 8
  %58 = add i64 %25, -1
  %59 = sext i32 %57 to i64
  %60 = add i64 %58, %59
  %61 = shl nsw i32 %47, 3
  %62 = tail call i64 @_ZN2v88internal4Heap20CreateFillerObjectAtEmiNS0_18ClearRecordedSlotsE(%"class.v8::internal::Heap"* %53, i64 %60, i32 %61, i32 1) #13
  br label %63

63:                                               ; preds = %55, %49
  %64 = load atomic i32, i32* %27 monotonic, align 4
  %65 = and i32 %64, -2147483647
  %66 = shl i32 %46, 1
  %67 = or i32 %65, %66
  store atomic volatile i32 %67, i32* %27 release, align 4
  %68 = icmp eq i32 %46, 0
  br i1 %68, label %69, label %72

69:                                               ; preds = %63
  %70 = load atomic i32, i32* %27 monotonic, align 4
  %71 = and i32 %70, -2
  store atomic volatile i32 %71, i32* %27 monotonic, align 4
  br label %72

72:                                               ; preds = %69, %63, %45, %4
  %73 = phi i64* [ %5, %4 ], [ %8, %45 ], [ %8, %63 ], [ %8, %69 ]
  ret i64* %73
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal13MutableBigInt11set_64_bitsEm(%"class.v8::internal::MutableBigInt"* nocapture readonly, i64) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::MutableBigInt", %"class.v8::internal::MutableBigInt"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, 7
  %6 = inttoptr i64 %5 to i64*
  store i64 %1, i64* %6, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal6BigInt10FromUint64EPNS0_7IsolateEm(%"class.v8::internal::Isolate"*, i64) local_unnamed_addr #0 align 2 {
  %3 = icmp eq i64 %1, 0
  br i1 %3, label %4, label %6

4:                                                ; preds = %2
  %5 = tail call i64* @_ZN2v88internal13MutableBigInt4ZeroINS0_7IsolateEEENS0_6HandleINS0_6BigIntEEEPT_NS0_14AllocationTypeE(%"class.v8::internal::Isolate"* %0, i8 zeroext 0)
  br label %62

6:                                                ; preds = %2
  %7 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %8 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE9NewBigIntEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %7, i32 1, i8 zeroext 0) #13
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %9, 3
  %11 = inttoptr i64 %10 to i32*
  store i32 2, i32* %11, align 4
  %12 = load i64, i64* %8, align 8
  %13 = add i64 %12, 7
  %14 = inttoptr i64 %13 to i64*
  store i64 %1, i64* %14, align 1
  %15 = load i64, i64* %8, align 8
  %16 = add i64 %15, 3
  %17 = inttoptr i64 %16 to i32*
  %18 = load atomic i32, i32* %17 monotonic, align 4
  %19 = lshr i32 %18, 1
  %20 = and i32 %19, 1073741823
  %21 = zext i32 %20 to i64
  br label %22

22:                                               ; preds = %25, %6
  %23 = phi i64 [ %26, %25 ], [ %21, %6 ]
  %24 = icmp sgt i64 %23, 0
  br i1 %24, label %25, label %35

25:                                               ; preds = %22
  %26 = add nsw i64 %23, -1
  %27 = trunc i64 %26 to i32
  %28 = shl nsw i32 %27, 3
  %29 = or i32 %28, 7
  %30 = sext i32 %29 to i64
  %31 = add i64 %15, %30
  %32 = inttoptr i64 %31 to i64*
  %33 = load i64, i64* %32, align 1
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %22, label %35

35:                                               ; preds = %25, %22
  %36 = trunc i64 %23 to i32
  %37 = sub nsw i32 %20, %36
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %62, label %39

39:                                               ; preds = %35
  %40 = and i64 %15, -262144
  %41 = or i64 %40, 16
  %42 = inttoptr i64 %41 to %"class.v8::internal::Heap"**
  %43 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %42, align 16
  %44 = tail call zeroext i1 @_ZN2v88internal4Heap13IsLargeObjectENS0_10HeapObjectE(i64 %15) #13
  br i1 %44, label %53, label %45

45:                                               ; preds = %39
  %46 = shl i32 %36, 3
  %47 = add nsw i32 %46, 8
  %48 = add i64 %15, -1
  %49 = sext i32 %47 to i64
  %50 = add i64 %48, %49
  %51 = shl nsw i32 %37, 3
  %52 = tail call i64 @_ZN2v88internal4Heap20CreateFillerObjectAtEmiNS0_18ClearRecordedSlotsE(%"class.v8::internal::Heap"* %43, i64 %50, i32 %51, i32 1) #13
  br label %53

53:                                               ; preds = %45, %39
  %54 = load atomic i32, i32* %17 monotonic, align 4
  %55 = and i32 %54, -2147483647
  %56 = shl i32 %36, 1
  %57 = or i32 %55, %56
  store atomic volatile i32 %57, i32* %17 release, align 4
  %58 = icmp eq i32 %36, 0
  br i1 %58, label %59, label %62

59:                                               ; preds = %53
  %60 = load atomic i32, i32* %17 monotonic, align 4
  %61 = and i32 %60, -2
  store atomic volatile i32 %61, i32* %17 monotonic, align 4
  br label %62

62:                                               ; preds = %59, %53, %35, %4
  %63 = phi i64* [ %5, %4 ], [ %8, %35 ], [ %8, %53 ], [ %8, %59 ]
  ret i64* %63
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal6BigInt11FromWords64EPNS0_7IsolateEiiPKm(%"class.v8::internal::Isolate"*, i32, i32, i64* nocapture readonly) local_unnamed_addr #0 align 2 {
  %5 = icmp ugt i32 %2, 16777216
  br i1 %5, label %6, label %15

6:                                                ; preds = %4
  %7 = load i8, i8* @_ZN2v88internal36FLAG_correctness_fuzzer_suppressionsE, align 1, !range !3
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %6
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.6, i64 0, i64 0)) #14
  unreachable

10:                                               ; preds = %6
  %11 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::Factory"*
  %12 = tail call i64* @_ZN2v88internal7Factory13NewRangeErrorENS0_15MessageTemplateENS0_6HandleINS0_6ObjectEEES5_S5_(%"class.v8::internal::Factory"* %11, i32 190, i64* null, i64* null, i64* null) #13
  %13 = load i64, i64* %12, align 8
  %14 = tail call i64 @_ZN2v88internal7Isolate13ThrowInternalENS0_6ObjectEPNS0_15MessageLocationE(%"class.v8::internal::Isolate"* %0, i64 %13, %"class.v8::internal::MessageLocation"* null) #13
  br label %130

15:                                               ; preds = %4
  %16 = icmp eq i32 %2, 0
  br i1 %16, label %17, label %20

17:                                               ; preds = %15
  %18 = tail call i64* @_ZN2v88internal13MutableBigInt4ZeroINS0_7IsolateEEENS0_6HandleINS0_6BigIntEEEPT_NS0_14AllocationTypeE(%"class.v8::internal::Isolate"* %0, i8 zeroext 0)
  %19 = ptrtoint i64* %18 to i64
  br label %130

20:                                               ; preds = %15
  %21 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %22 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE9NewBigIntEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %21, i32 %2, i8 zeroext 0) #13
  %23 = load i64, i64* %22, align 8
  %24 = shl i32 %2, 1
  %25 = add i64 %23, 3
  %26 = inttoptr i64 %25 to i32*
  store i32 %24, i32* %26, align 4
  %27 = icmp eq i64* %22, null
  br i1 %27, label %130, label %28

28:                                               ; preds = %20
  %29 = ptrtoint i64* %22 to i64
  %30 = load i64, i64* %22, align 8
  %31 = icmp ne i32 %1, 0
  %32 = add i64 %30, 3
  %33 = inttoptr i64 %32 to i32*
  %34 = load atomic i32, i32* %33 monotonic, align 4
  %35 = and i32 %34, -2
  %36 = zext i1 %31 to i32
  %37 = or i32 %35, %36
  store atomic volatile i32 %37, i32* %33 monotonic, align 4
  %38 = load i64, i64* %22, align 8
  %39 = zext i32 %2 to i64
  %40 = and i64 %39, 1
  %41 = icmp eq i32 %2, 1
  br i1 %41, label %44, label %42

42:                                               ; preds = %28
  %43 = sub nsw i64 %39, %40
  br label %106

44:                                               ; preds = %106, %28
  %45 = phi i64 [ undef, %28 ], [ %127, %106 ]
  %46 = phi i64 [ 0, %28 ], [ %126, %106 ]
  %47 = phi i64 [ %38, %28 ], [ %127, %106 ]
  %48 = icmp eq i64 %40, 0
  br i1 %48, label %58, label %49

49:                                               ; preds = %44
  %50 = getelementptr inbounds i64, i64* %3, i64 %46
  %51 = load i64, i64* %50, align 8
  %52 = shl i64 %46, 3
  %53 = and i64 %52, 4294967288
  %54 = or i64 %53, 7
  %55 = add i64 %47, %54
  %56 = inttoptr i64 %55 to i64*
  store i64 %51, i64* %56, align 1
  %57 = load i64, i64* %22, align 8
  br label %58

58:                                               ; preds = %44, %49
  %59 = phi i64 [ %45, %44 ], [ %57, %49 ]
  %60 = add i64 %59, 3
  %61 = inttoptr i64 %60 to i32*
  %62 = load atomic i32, i32* %61 monotonic, align 4
  %63 = lshr i32 %62, 1
  %64 = and i32 %63, 1073741823
  %65 = zext i32 %64 to i64
  br label %66

66:                                               ; preds = %69, %58
  %67 = phi i64 [ %70, %69 ], [ %65, %58 ]
  %68 = icmp sgt i64 %67, 0
  br i1 %68, label %69, label %79

69:                                               ; preds = %66
  %70 = add nsw i64 %67, -1
  %71 = trunc i64 %70 to i32
  %72 = shl nsw i32 %71, 3
  %73 = or i32 %72, 7
  %74 = sext i32 %73 to i64
  %75 = add i64 %59, %74
  %76 = inttoptr i64 %75 to i64*
  %77 = load i64, i64* %76, align 1
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %66, label %79

79:                                               ; preds = %69, %66
  %80 = trunc i64 %67 to i32
  %81 = sub nsw i32 %64, %80
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %130, label %83

83:                                               ; preds = %79
  %84 = and i64 %59, -262144
  %85 = or i64 %84, 16
  %86 = inttoptr i64 %85 to %"class.v8::internal::Heap"**
  %87 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %86, align 16
  %88 = tail call zeroext i1 @_ZN2v88internal4Heap13IsLargeObjectENS0_10HeapObjectE(i64 %59) #13
  br i1 %88, label %97, label %89

89:                                               ; preds = %83
  %90 = shl i32 %80, 3
  %91 = add nsw i32 %90, 8
  %92 = add i64 %59, -1
  %93 = sext i32 %91 to i64
  %94 = add i64 %92, %93
  %95 = shl nsw i32 %81, 3
  %96 = tail call i64 @_ZN2v88internal4Heap20CreateFillerObjectAtEmiNS0_18ClearRecordedSlotsE(%"class.v8::internal::Heap"* %87, i64 %94, i32 %95, i32 1) #13
  br label %97

97:                                               ; preds = %89, %83
  %98 = load atomic i32, i32* %61 monotonic, align 4
  %99 = and i32 %98, -2147483647
  %100 = shl i32 %80, 1
  %101 = or i32 %99, %100
  store atomic volatile i32 %101, i32* %61 release, align 4
  %102 = icmp eq i32 %80, 0
  br i1 %102, label %103, label %130

103:                                              ; preds = %97
  %104 = load atomic i32, i32* %61 monotonic, align 4
  %105 = and i32 %104, -2
  store atomic volatile i32 %105, i32* %61 monotonic, align 4
  br label %130

106:                                              ; preds = %106, %42
  %107 = phi i64 [ 0, %42 ], [ %126, %106 ]
  %108 = phi i64 [ %38, %42 ], [ %127, %106 ]
  %109 = phi i64 [ %43, %42 ], [ %128, %106 ]
  %110 = getelementptr inbounds i64, i64* %3, i64 %107
  %111 = load i64, i64* %110, align 8
  %112 = shl i64 %107, 3
  %113 = and i64 %112, 4294967280
  %114 = or i64 %113, 7
  %115 = add i64 %108, %114
  %116 = inttoptr i64 %115 to i64*
  store i64 %111, i64* %116, align 1
  %117 = or i64 %107, 1
  %118 = load i64, i64* %22, align 8
  %119 = getelementptr inbounds i64, i64* %3, i64 %117
  %120 = load i64, i64* %119, align 8
  %121 = shl i64 %117, 3
  %122 = and i64 %121, 4294967288
  %123 = or i64 %122, 7
  %124 = add i64 %118, %123
  %125 = inttoptr i64 %124 to i64*
  store i64 %120, i64* %125, align 1
  %126 = add nuw nsw i64 %107, 2
  %127 = load i64, i64* %22, align 8
  %128 = add i64 %109, -2
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %44, label %106

130:                                              ; preds = %20, %79, %97, %103, %17, %10
  %131 = phi i64 [ 0, %10 ], [ %19, %17 ], [ 0, %20 ], [ %29, %79 ], [ %29, %97 ], [ %29, %103 ]
  %132 = inttoptr i64 %131 to i64*
  ret i64* %132
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZN2v88internal6BigInt12Words64CountEv(%"class.v8::internal::BigInt"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::BigInt", %"class.v8::internal::BigInt"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load atomic i32, i32* %5 monotonic, align 4
  %7 = lshr i32 %6, 1
  %8 = and i32 %7, 1073741823
  ret i32 %8
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal6BigInt14ToWordsArray64EPiS2_Pm(%"class.v8::internal::BigInt"* nocapture readonly, i32* nocapture, i32* nocapture, i64* nocapture) local_unnamed_addr #2 align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::BigInt", %"class.v8::internal::BigInt"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 3
  %8 = inttoptr i64 %7 to i32*
  %9 = load atomic i32, i32* %8 monotonic, align 4
  %10 = and i32 %9, 1
  store i32 %10, i32* %1, align 4
  %11 = load i32, i32* %2, align 4
  %12 = load i64, i64* %5, align 8
  %13 = add i64 %12, 3
  %14 = inttoptr i64 %13 to i32*
  %15 = load atomic i32, i32* %14 monotonic, align 4
  %16 = lshr i32 %15, 1
  %17 = and i32 %16, 1073741823
  store i32 %17, i32* %2, align 4
  %18 = icmp eq i32 %11, 0
  br i1 %18, label %52, label %19

19:                                               ; preds = %4
  %20 = load i64, i64* %5, align 8
  %21 = add i64 %20, 3
  %22 = inttoptr i64 %21 to i32*
  %23 = load atomic i32, i32* %22 monotonic, align 4
  %24 = lshr i32 %23, 1
  %25 = and i32 %24, 1073741823
  %26 = icmp ne i32 %25, 0
  %27 = icmp sgt i32 %11, 0
  %28 = and i1 %26, %27
  br i1 %28, label %29, label %52

29:                                               ; preds = %19
  %30 = zext i32 %25 to i64
  %31 = sext i32 %11 to i64
  %32 = add i64 %20, 7
  %33 = inttoptr i64 %32 to i64*
  %34 = load i64, i64* %33, align 1
  store i64 %34, i64* %3, align 8
  %35 = icmp ugt i32 %25, 1
  %36 = icmp sgt i32 %11, 1
  %37 = and i1 %35, %36
  br i1 %37, label %38, label %52

38:                                               ; preds = %29, %38
  %39 = phi i64 [ %48, %38 ], [ 1, %29 ]
  %40 = load i64, i64* %5, align 8
  %41 = shl i64 %39, 3
  %42 = and i64 %41, 4294967288
  %43 = or i64 %42, 7
  %44 = add i64 %40, %43
  %45 = inttoptr i64 %44 to i64*
  %46 = load i64, i64* %45, align 1
  %47 = getelementptr inbounds i64, i64* %3, i64 %39
  store i64 %46, i64* %47, align 8
  %48 = add nuw nsw i64 %39, 1
  %49 = icmp ult i64 %48, %30
  %50 = icmp slt i64 %48, %31
  %51 = and i1 %49, %50
  br i1 %51, label %38, label %52

52:                                               ; preds = %38, %29, %19, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i64 @_ZN2v88internal13MutableBigInt10GetRawBitsENS0_10BigIntBaseEPb(i64, i8*) local_unnamed_addr #2 align 2 {
  %3 = icmp ne i8* %1, null
  br i1 %3, label %4, label %5

4:                                                ; preds = %2
  store i8 1, i8* %1, align 1
  br label %5

5:                                                ; preds = %4, %2
  %6 = add i64 %0, 3
  %7 = inttoptr i64 %6 to i32*
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = and i32 %8, 2147483646
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %26, label %11

11:                                               ; preds = %5
  %12 = load atomic i32, i32* %7 monotonic, align 4
  %13 = and i32 %12, 2147483644
  %14 = icmp ne i32 %13, 0
  %15 = and i1 %3, %14
  br i1 %15, label %16, label %17

16:                                               ; preds = %11
  store i8 0, i8* %1, align 1
  br label %17

17:                                               ; preds = %16, %11
  %18 = add i64 %0, 7
  %19 = inttoptr i64 %18 to i64*
  %20 = load i64, i64* %19, align 1
  %21 = load atomic i32, i32* %7 monotonic, align 4
  %22 = and i32 %21, 1
  %23 = icmp eq i32 %22, 0
  %24 = sub i64 0, %20
  %25 = select i1 %23, i64 %20, i64 %24
  br label %26

26:                                               ; preds = %5, %17
  %27 = phi i64 [ %25, %17 ], [ 0, %5 ]
  ret i64 %27
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i64 @_ZN2v88internal6BigInt7AsInt64EPb(%"class.v8::internal::BigInt"* nocapture readonly, i8*) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::BigInt", %"class.v8::internal::BigInt"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ne i8* %1, null
  br i1 %5, label %6, label %7

6:                                                ; preds = %2
  store i8 1, i8* %1, align 1
  br label %7

7:                                                ; preds = %6, %2
  %8 = add i64 %4, 3
  %9 = inttoptr i64 %8 to i32*
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 2147483646
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %28, label %13

13:                                               ; preds = %7
  %14 = load atomic i32, i32* %9 monotonic, align 4
  %15 = and i32 %14, 2147483644
  %16 = icmp ne i32 %15, 0
  %17 = and i1 %5, %16
  br i1 %17, label %18, label %19

18:                                               ; preds = %13
  store i8 0, i8* %1, align 1
  br label %19

19:                                               ; preds = %18, %13
  %20 = add i64 %4, 7
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21, align 1
  %23 = load atomic i32, i32* %9 monotonic, align 4
  %24 = and i32 %23, 1
  %25 = icmp eq i32 %24, 0
  %26 = sub i64 0, %22
  %27 = select i1 %25, i64 %22, i64 %26
  br label %28

28:                                               ; preds = %7, %19
  %29 = phi i64 [ %27, %19 ], [ 0, %7 ]
  %30 = icmp eq i8* %1, null
  br i1 %30, label %41, label %31

31:                                               ; preds = %28
  %32 = lshr i64 %29, 63
  %33 = trunc i64 %32 to i32
  %34 = load i64, i64* %3, align 8
  %35 = add i64 %34, 3
  %36 = inttoptr i64 %35 to i32*
  %37 = load atomic i32, i32* %36 monotonic, align 4
  %38 = and i32 %37, 1
  %39 = icmp eq i32 %38, %33
  br i1 %39, label %41, label %40

40:                                               ; preds = %31
  store i8 0, i8* %1, align 1
  br label %41

41:                                               ; preds = %31, %28, %40
  ret i64 %29
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i64 @_ZN2v88internal6BigInt8AsUint64EPb(%"class.v8::internal::BigInt"* nocapture readonly, i8*) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::BigInt", %"class.v8::internal::BigInt"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ne i8* %1, null
  br i1 %5, label %6, label %7

6:                                                ; preds = %2
  store i8 1, i8* %1, align 1
  br label %7

7:                                                ; preds = %6, %2
  %8 = add i64 %4, 3
  %9 = inttoptr i64 %8 to i32*
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 2147483646
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %28, label %13

13:                                               ; preds = %7
  %14 = load atomic i32, i32* %9 monotonic, align 4
  %15 = and i32 %14, 2147483644
  %16 = icmp ne i32 %15, 0
  %17 = and i1 %5, %16
  br i1 %17, label %18, label %19

18:                                               ; preds = %13
  store i8 0, i8* %1, align 1
  br label %19

19:                                               ; preds = %18, %13
  %20 = add i64 %4, 7
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21, align 1
  %23 = load atomic i32, i32* %9 monotonic, align 4
  %24 = and i32 %23, 1
  %25 = icmp eq i32 %24, 0
  %26 = sub i64 0, %22
  %27 = select i1 %25, i64 %22, i64 %26
  br label %28

28:                                               ; preds = %7, %19
  %29 = phi i64 [ %27, %19 ], [ 0, %7 ]
  %30 = icmp eq i8* %1, null
  br i1 %30, label %39, label %31

31:                                               ; preds = %28
  %32 = load i64, i64* %3, align 8
  %33 = add i64 %32, 3
  %34 = inttoptr i64 %33 to i32*
  %35 = load atomic i32, i32* %34 monotonic, align 4
  %36 = and i32 %35, 1
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %39, label %38

38:                                               ; preds = %31
  store i8 0, i8* %1, align 1
  br label %39

39:                                               ; preds = %31, %28, %38
  ret i64 %29
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal40MutableBigInt_AbsoluteAddAndCanonicalizeEmmm(i64, i64, i64) local_unnamed_addr #0 {
  %4 = add i64 %2, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load atomic i32, i32* %5 monotonic, align 4
  %7 = and i32 %6, 2147483646
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %11, label %25

9:                                                ; preds = %25
  %10 = trunc i64 %51 to i32
  br label %11

11:                                               ; preds = %9, %3
  %12 = phi i32 [ 0, %3 ], [ %10, %9 ]
  %13 = phi i64 [ 0, %3 ], [ %47, %9 ]
  %14 = add i64 %1, 3
  %15 = inttoptr i64 %14 to i32*
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = lshr i32 %16, 1
  %18 = and i32 %17, 1073741823
  %19 = icmp ult i32 %12, %18
  %20 = shl nsw i32 %12, 3
  %21 = or i32 %20, 7
  %22 = zext i32 %21 to i64
  br i1 %19, label %23, label %83

23:                                               ; preds = %11
  %24 = zext i32 %12 to i64
  br label %57

25:                                               ; preds = %3, %25
  %26 = phi i64 [ %51, %25 ], [ 0, %3 ]
  %27 = phi i64 [ %47, %25 ], [ 0, %3 ]
  %28 = shl i64 %26, 3
  %29 = and i64 %28, 4294967288
  %30 = or i64 %29, 7
  %31 = add i64 %30, %1
  %32 = inttoptr i64 %31 to i64*
  %33 = load i64, i64* %32, align 1
  %34 = add i64 %30, %2
  %35 = inttoptr i64 %34 to i64*
  %36 = load i64, i64* %35, align 1
  %37 = zext i64 %33 to i128
  %38 = zext i64 %36 to i128
  %39 = add nuw nsw i128 %38, %37
  %40 = lshr i128 %39, 64
  %41 = trunc i128 %40 to i64
  %42 = and i128 %39, 18446744073709551615
  %43 = zext i64 %27 to i128
  %44 = add nuw nsw i128 %42, %43
  %45 = lshr i128 %44, 64
  %46 = trunc i128 %45 to i64
  %47 = add nuw nsw i64 %46, %41
  %48 = trunc i128 %44 to i64
  %49 = add i64 %30, %0
  %50 = inttoptr i64 %49 to i64*
  store i64 %48, i64* %50, align 1
  %51 = add nuw nsw i64 %26, 1
  %52 = load atomic i32, i32* %5 monotonic, align 4
  %53 = lshr i32 %52, 1
  %54 = and i32 %53, 1073741823
  %55 = zext i32 %54 to i64
  %56 = icmp ult i64 %51, %55
  br i1 %56, label %25, label %9

57:                                               ; preds = %57, %23
  %58 = phi i64 [ %24, %23 ], [ %72, %57 ]
  %59 = phi i64 [ %22, %23 ], [ %80, %57 ]
  %60 = phi i64 [ %13, %23 ], [ %68, %57 ]
  %61 = add i64 %59, %1
  %62 = inttoptr i64 %61 to i64*
  %63 = load i64, i64* %62, align 1
  %64 = zext i64 %63 to i128
  %65 = zext i64 %60 to i128
  %66 = add nuw nsw i128 %64, %65
  %67 = lshr i128 %66, 64
  %68 = trunc i128 %67 to i64
  %69 = trunc i128 %66 to i64
  %70 = add i64 %59, %0
  %71 = inttoptr i64 %70 to i64*
  store i64 %69, i64* %71, align 1
  %72 = add nuw nsw i64 %58, 1
  %73 = load atomic i32, i32* %15 monotonic, align 4
  %74 = lshr i32 %73, 1
  %75 = and i32 %74, 1073741823
  %76 = zext i32 %75 to i64
  %77 = icmp ult i64 %72, %76
  %78 = shl i64 %72, 3
  %79 = and i64 %78, 4294967288
  %80 = or i64 %79, 7
  br i1 %77, label %57, label %81

81:                                               ; preds = %57
  %82 = trunc i128 %67 to i64
  br label %83

83:                                               ; preds = %81, %11
  %84 = phi i64 [ %13, %11 ], [ %82, %81 ]
  %85 = phi i64 [ %22, %11 ], [ %80, %81 ]
  %86 = add i64 %85, %0
  %87 = inttoptr i64 %86 to i64*
  store i64 %84, i64* %87, align 1
  %88 = add i64 %0, 3
  %89 = inttoptr i64 %88 to i32*
  %90 = load atomic i32, i32* %89 monotonic, align 4
  %91 = lshr i32 %90, 1
  %92 = and i32 %91, 1073741823
  %93 = zext i32 %92 to i64
  br label %94

94:                                               ; preds = %97, %83
  %95 = phi i64 [ %98, %97 ], [ %93, %83 ]
  %96 = icmp sgt i64 %95, 0
  br i1 %96, label %97, label %107

97:                                               ; preds = %94
  %98 = add nsw i64 %95, -1
  %99 = trunc i64 %98 to i32
  %100 = shl nsw i32 %99, 3
  %101 = or i32 %100, 7
  %102 = sext i32 %101 to i64
  %103 = add i64 %102, %0
  %104 = inttoptr i64 %103 to i64*
  %105 = load i64, i64* %104, align 1
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %94, label %107

107:                                              ; preds = %97, %94
  %108 = trunc i64 %95 to i32
  %109 = sub nsw i32 %92, %108
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %134, label %111

111:                                              ; preds = %107
  %112 = and i64 %0, -262144
  %113 = or i64 %112, 16
  %114 = inttoptr i64 %113 to %"class.v8::internal::Heap"**
  %115 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %114, align 16
  %116 = tail call zeroext i1 @_ZN2v88internal4Heap13IsLargeObjectENS0_10HeapObjectE(i64 %0) #13
  br i1 %116, label %125, label %117

117:                                              ; preds = %111
  %118 = shl i32 %108, 3
  %119 = add nsw i32 %118, 8
  %120 = add i64 %0, -1
  %121 = sext i32 %119 to i64
  %122 = add i64 %120, %121
  %123 = shl nsw i32 %109, 3
  %124 = tail call i64 @_ZN2v88internal4Heap20CreateFillerObjectAtEmiNS0_18ClearRecordedSlotsE(%"class.v8::internal::Heap"* %115, i64 %122, i32 %123, i32 1) #13
  br label %125

125:                                              ; preds = %117, %111
  %126 = load atomic i32, i32* %89 monotonic, align 4
  %127 = and i32 %126, -2147483647
  %128 = shl i32 %108, 1
  %129 = or i32 %127, %128
  store atomic volatile i32 %129, i32* %89 release, align 4
  %130 = icmp eq i32 %108, 0
  br i1 %130, label %131, label %134

131:                                              ; preds = %125
  %132 = load atomic i32, i32* %89 monotonic, align 4
  %133 = and i32 %132, -2
  store atomic volatile i32 %133, i32* %89 monotonic, align 4
  br label %134

134:                                              ; preds = %107, %125, %131
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal29MutableBigInt_AbsoluteCompareEmm(i64, i64) local_unnamed_addr #0 {
  %3 = add i64 %0, 7
  %4 = inttoptr i64 %3 to i64*
  %5 = add i64 %0, 3
  %6 = inttoptr i64 %5 to i32*
  %7 = load atomic i32, i32* %6 monotonic, align 4
  %8 = lshr i32 %7, 1
  %9 = and i32 %8, 1073741823
  %10 = add i64 %1, 7
  %11 = inttoptr i64 %10 to i64*
  %12 = add i64 %1, 3
  %13 = inttoptr i64 %12 to i32*
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = lshr i32 %14, 1
  %16 = and i32 %15, 1073741823
  %17 = tail call i32 @_ZN2v86bigint7CompareENS0_6DigitsES1_(i64* %4, i32 %9, i64* %11, i32 %16) #13
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal40MutableBigInt_AbsoluteSubAndCanonicalizeEmmm(i64, i64, i64) local_unnamed_addr #0 {
  %4 = add i64 %2, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load atomic i32, i32* %5 monotonic, align 4
  %7 = and i32 %6, 2147483646
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %11, label %22

9:                                                ; preds = %22
  %10 = trunc i64 %50 to i32
  br label %11

11:                                               ; preds = %9, %3
  %12 = phi i32 [ 0, %3 ], [ %10, %9 ]
  %13 = phi i64 [ 0, %3 ], [ %46, %9 ]
  %14 = add i64 %1, 3
  %15 = inttoptr i64 %14 to i32*
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = lshr i32 %16, 1
  %18 = and i32 %17, 1073741823
  %19 = icmp ult i32 %12, %18
  br i1 %19, label %20, label %80

20:                                               ; preds = %11
  %21 = zext i32 %12 to i64
  br label %56

22:                                               ; preds = %3, %22
  %23 = phi i64 [ %50, %22 ], [ 0, %3 ]
  %24 = phi i64 [ %46, %22 ], [ 0, %3 ]
  %25 = shl i64 %23, 3
  %26 = and i64 %25, 4294967288
  %27 = or i64 %26, 7
  %28 = add i64 %27, %1
  %29 = inttoptr i64 %28 to i64*
  %30 = load i64, i64* %29, align 1
  %31 = add i64 %27, %2
  %32 = inttoptr i64 %31 to i64*
  %33 = load i64, i64* %32, align 1
  %34 = zext i64 %30 to i128
  %35 = zext i64 %33 to i128
  %36 = sub nsw i128 %34, %35
  %37 = lshr i128 %36, 64
  %38 = trunc i128 %37 to i64
  %39 = and i64 %38, 1
  %40 = and i128 %36, 18446744073709551615
  %41 = zext i64 %24 to i128
  %42 = sub nsw i128 %40, %41
  %43 = lshr i128 %42, 64
  %44 = trunc i128 %43 to i64
  %45 = and i64 %44, 1
  %46 = add nuw nsw i64 %45, %39
  %47 = trunc i128 %42 to i64
  %48 = add i64 %27, %0
  %49 = inttoptr i64 %48 to i64*
  store i64 %47, i64* %49, align 1
  %50 = add nuw nsw i64 %23, 1
  %51 = load atomic i32, i32* %5 monotonic, align 4
  %52 = lshr i32 %51, 1
  %53 = and i32 %52, 1073741823
  %54 = zext i32 %53 to i64
  %55 = icmp ult i64 %50, %54
  br i1 %55, label %22, label %9

56:                                               ; preds = %56, %20
  %57 = phi i64 [ %21, %20 ], [ %74, %56 ]
  %58 = phi i64 [ %13, %20 ], [ %70, %56 ]
  %59 = shl i64 %57, 3
  %60 = and i64 %59, 4294967288
  %61 = or i64 %60, 7
  %62 = add i64 %61, %1
  %63 = inttoptr i64 %62 to i64*
  %64 = load i64, i64* %63, align 1
  %65 = zext i64 %64 to i128
  %66 = zext i64 %58 to i128
  %67 = sub nsw i128 %65, %66
  %68 = lshr i128 %67, 64
  %69 = trunc i128 %68 to i64
  %70 = and i64 %69, 1
  %71 = trunc i128 %67 to i64
  %72 = add i64 %61, %0
  %73 = inttoptr i64 %72 to i64*
  store i64 %71, i64* %73, align 1
  %74 = add nuw nsw i64 %57, 1
  %75 = load atomic i32, i32* %15 monotonic, align 4
  %76 = lshr i32 %75, 1
  %77 = and i32 %76, 1073741823
  %78 = zext i32 %77 to i64
  %79 = icmp ult i64 %74, %78
  br i1 %79, label %56, label %80

80:                                               ; preds = %56, %11
  %81 = add i64 %0, 3
  %82 = inttoptr i64 %81 to i32*
  %83 = load atomic i32, i32* %82 monotonic, align 4
  %84 = lshr i32 %83, 1
  %85 = and i32 %84, 1073741823
  %86 = zext i32 %85 to i64
  br label %87

87:                                               ; preds = %90, %80
  %88 = phi i64 [ %91, %90 ], [ %86, %80 ]
  %89 = icmp sgt i64 %88, 0
  br i1 %89, label %90, label %100

90:                                               ; preds = %87
  %91 = add nsw i64 %88, -1
  %92 = trunc i64 %91 to i32
  %93 = shl nsw i32 %92, 3
  %94 = or i32 %93, 7
  %95 = sext i32 %94 to i64
  %96 = add i64 %95, %0
  %97 = inttoptr i64 %96 to i64*
  %98 = load i64, i64* %97, align 1
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %87, label %100

100:                                              ; preds = %90, %87
  %101 = trunc i64 %88 to i32
  %102 = sub nsw i32 %85, %101
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %127, label %104

104:                                              ; preds = %100
  %105 = and i64 %0, -262144
  %106 = or i64 %105, 16
  %107 = inttoptr i64 %106 to %"class.v8::internal::Heap"**
  %108 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %107, align 16
  %109 = tail call zeroext i1 @_ZN2v88internal4Heap13IsLargeObjectENS0_10HeapObjectE(i64 %0) #13
  br i1 %109, label %118, label %110

110:                                              ; preds = %104
  %111 = shl i32 %101, 3
  %112 = add nsw i32 %111, 8
  %113 = add i64 %0, -1
  %114 = sext i32 %112 to i64
  %115 = add i64 %113, %114
  %116 = shl nsw i32 %102, 3
  %117 = tail call i64 @_ZN2v88internal4Heap20CreateFillerObjectAtEmiNS0_18ClearRecordedSlotsE(%"class.v8::internal::Heap"* %108, i64 %115, i32 %116, i32 1) #13
  br label %118

118:                                              ; preds = %110, %104
  %119 = load atomic i32, i32* %82 monotonic, align 4
  %120 = and i32 %119, -2147483647
  %121 = shl i32 %101, 1
  %122 = or i32 %120, %121
  store atomic volatile i32 %122, i32* %82 release, align 4
  %123 = icmp eq i32 %101, 0
  br i1 %123, label %124, label %127

124:                                              ; preds = %118
  %125 = load atomic i32, i32* %82 monotonic, align 4
  %126 = and i32 %125, -2
  store atomic volatile i32 %126, i32* %82 monotonic, align 4
  br label %127

127:                                              ; preds = %100, %118, %124
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #9

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #9

; Function Attrs: nounwind readnone speculatable
declare double @llvm.ceil.f64(double) #9

declare i64 @_ZN2v88internal23GetCurrentStackPositionEv() local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1 immarg) #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*, i64) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.std::__1::locale", align 8
  %5 = alloca %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", align 8
  %6 = getelementptr inbounds %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #13
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5, %"class.std::__1::basic_ostream"* dereferenceable(160) %0) #13
  %7 = load i8, i8* %6, align 8, !range !3
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %58, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.std::__1::basic_ostream"* %0 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8, i8* %11, i64 -24
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::basic_ostream"* %0 to i8*
  %16 = getelementptr inbounds i8, i8* %15, i64 %14
  %17 = getelementptr inbounds i8, i8* %16, i64 40
  %18 = bitcast i8* %17 to %"class.std::__1::basic_streambuf"**
  %19 = load %"class.std::__1::basic_streambuf"*, %"class.std::__1::basic_streambuf"** %18, align 8
  %20 = bitcast i8* %16 to %"class.std::__1::ios_base"*
  %21 = getelementptr inbounds i8, i8* %16, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 176
  %25 = icmp eq i32 %24, 32
  %26 = getelementptr inbounds i8, i8* %1, i64 %2
  %27 = select i1 %25, i8* %26, i8* %1
  %28 = getelementptr inbounds i8, i8* %16, i64 144
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %42

32:                                               ; preds = %9
  %33 = bitcast %"class.std::__1::locale"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #13
  call void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* nonnull sret %4, %"class.std::__1::ios_base"* %20) #13
  %34 = call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* nonnull %4, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #13
  %35 = bitcast %"class.std::__1::locale::facet"* %34 to %"class.std::__1::ctype"*
  %36 = bitcast %"class.std::__1::locale::facet"* %34 to i8 (%"class.std::__1::ctype"*, i8)***
  %37 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %36, align 8
  %38 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %37, i64 7
  %39 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %38, align 8
  %40 = call signext i8 %39(%"class.std::__1::ctype"* %35, i8 signext 32) #13
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %4) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #13
  %41 = sext i8 %40 to i32
  store i32 %41, i32* %29, align 8
  br label %42

42:                                               ; preds = %9, %32
  %43 = phi i32 [ %41, %32 ], [ %30, %9 ]
  %44 = trunc i32 %43 to i8
  %45 = call %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"* %19, i8* %1, i8* %27, i8* %26, %"class.std::__1::ios_base"* dereferenceable(136) %20, i8 signext %44)
  %46 = icmp eq %"class.std::__1::basic_streambuf"* %45, null
  br i1 %46, label %47, label %58

47:                                               ; preds = %42
  %48 = load i8*, i8** %10, align 8
  %49 = getelementptr i8, i8* %48, i64 -24
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds i8, i8* %15, i64 %51
  %53 = bitcast i8* %52 to %"class.std::__1::ios_base"*
  %54 = getelementptr inbounds i8, i8* %52, i64 32
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 8
  %57 = or i32 %56, 5
  call void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"* %53, i32 %57) #13
  br label %58

58:                                               ; preds = %3, %42, %47
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #13
  ret %"class.std::__1::basic_ostream"* %0
}

declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*, %"class.std::__1::basic_ostream"* dereferenceable(160)) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"*, i8*, i8*, i8*, %"class.std::__1::ios_base"* dereferenceable(136), i8 signext) local_unnamed_addr #0 comdat {
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = icmp eq %"class.std::__1::basic_streambuf"* %0, null
  br i1 %8, label %78, label %9

9:                                                ; preds = %6
  %10 = ptrtoint i8* %3 to i64
  %11 = ptrtoint i8* %1 to i64
  %12 = sub i64 %10, %11
  %13 = getelementptr inbounds %"class.std::__1::ios_base", %"class.std::__1::ios_base"* %4, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i64 %14, %12
  %16 = sub nsw i64 %14, %12
  %17 = select i1 %15, i64 %16, i64 0
  %18 = ptrtoint i8* %2 to i64
  %19 = sub i64 %18, %11
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %9
  %22 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %23 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %22, align 8
  %24 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %23, i64 12
  %25 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %24, align 8
  %26 = tail call i64 %25(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %1, i64 %19) #13
  %27 = icmp eq i64 %26, %19
  br i1 %27, label %28, label %78

28:                                               ; preds = %21, %9
  %29 = icmp sgt i64 %17, 0
  br i1 %29, label %30, label %67

30:                                               ; preds = %28
  %31 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #13
  %32 = icmp ult i64 %17, 23
  br i1 %32, label %42, label %33

33:                                               ; preds = %30
  %34 = add nuw i64 %17, 16
  %35 = and i64 %34, -16
  %36 = tail call i8* @_Znwm(i64 %35) #17
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %36, i8** %37, align 8
  %38 = or i64 %35, -9223372036854775808
  %39 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %38, i64* %39, align 8
  %40 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %17, i64* %40, align 8
  %41 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %46

42:                                               ; preds = %30
  %43 = trunc i64 %17 to i8
  %44 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %45 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %44, i64 0, i32 1, i32 0
  store i8 %43, i8* %45, align 1
  br label %46

46:                                               ; preds = %33, %42
  %47 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %41, %33 ], [ %44, %42 ]
  %48 = phi i8* [ %36, %33 ], [ %31, %42 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %48, i8 %5, i64 %17, i1 false) #13
  %49 = getelementptr inbounds i8, i8* %48, i64 %17
  store i8 0, i8* %49, align 1
  %50 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %47, i64 0, i32 1, i32 0
  %51 = load i8, i8* %50, align 1
  %52 = icmp slt i8 %51, 0
  %53 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = select i1 %52, i8* %54, i8* %31
  %56 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %57 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %56, align 8
  %58 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %57, i64 12
  %59 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %58, align 8
  %60 = call i64 %59(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %55, i64 %17) #13
  %61 = icmp eq i64 %60, %17
  %62 = load i8, i8* %50, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %46
  %65 = load i8*, i8** %53, align 8
  call void @_ZdlPv(i8* %65) #17
  br label %66

66:                                               ; preds = %46, %64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #13
  br i1 %61, label %67, label %78

67:                                               ; preds = %66, %28
  %68 = sub i64 %10, %18
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %70, label %77

70:                                               ; preds = %67
  %71 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %72 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %71, align 8
  %73 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %72, i64 12
  %74 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %73, align 8
  %75 = call i64 %74(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %2, i64 %68) #13
  %76 = icmp eq i64 %75, %68
  br i1 %76, label %77, label %78

77:                                               ; preds = %70, %67
  store i64 0, i64* %13, align 8
  br label %78

78:                                               ; preds = %77, %66, %21, %70, %6
  %79 = phi %"class.std::__1::basic_streambuf"* [ null, %6 ], [ %0, %77 ], [ null, %66 ], [ null, %21 ], [ null, %70 ]
  ret %"class.std::__1::basic_streambuf"* %79
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*) unnamed_addr #10

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #11

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #12

declare void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"*) unnamed_addr #10

declare %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"*, %"class.std::__1::locale::id"* dereferenceable(16)) local_unnamed_addr #3

declare void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"*, i32) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #9

declare i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"*, i64) local_unnamed_addr #3

declare i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"*) local_unnamed_addr #3

declare i64 @_ZN2v88internal7Isolate13ThrowInternalENS0_6ObjectEPNS0_15MessageLocationE(%"class.v8::internal::Isolate"*, i64, %"class.v8::internal::MessageLocation"*) local_unnamed_addr #3

declare i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE13NewHeapNumberILNS0_14AllocationTypeE0EEENS0_6HandleINS0_10HeapNumberEEEv(%"class.v8::internal::FactoryBase"*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i64 @"_ZNSt3__110__function16__policy_invokerIFmmmEE11__call_implINS0_20__default_alloc_funcIZN2v88internal13MutableBigInt11AbsoluteAndEPNS7_7IsolateENS7_6HandleINS7_10BigIntBaseEEESD_S8_E3$_0S2_EEEEmPKNS0_16__policy_storageEmm"(%"union.std::__1::__function::__policy_storage"* nocapture readnone, i64, i64) #8 align 2 {
  %4 = and i64 %2, %1
  ret i64 %4
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i64 @"_ZNSt3__110__function16__policy_invokerIFmmmEE11__call_implINS0_20__default_alloc_funcIZN2v88internal13MutableBigInt14AbsoluteAndNotEPNS7_7IsolateENS7_6HandleINS7_10BigIntBaseEEESD_S8_E3$_1S2_EEEEmPKNS0_16__policy_storageEmm"(%"union.std::__1::__function::__policy_storage"* nocapture readnone, i64, i64) #8 align 2 {
  %4 = xor i64 %2, -1
  %5 = and i64 %4, %1
  ret i64 %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i64 @"_ZNSt3__110__function16__policy_invokerIFmmmEE11__call_implINS0_20__default_alloc_funcIZN2v88internal13MutableBigInt10AbsoluteOrEPNS7_7IsolateENS7_6HandleINS7_10BigIntBaseEEESD_S8_E3$_2S2_EEEEmPKNS0_16__policy_storageEmm"(%"union.std::__1::__function::__policy_storage"* nocapture readnone, i64, i64) #8 align 2 {
  %4 = or i64 %2, %1
  ret i64 %4
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i64 @"_ZNSt3__110__function16__policy_invokerIFmmmEE11__call_implINS0_20__default_alloc_funcIZN2v88internal13MutableBigInt11AbsoluteXorEPNS7_7IsolateENS7_6HandleINS7_10BigIntBaseEEESD_S8_E3$_3S2_EEEEmPKNS0_16__policy_storageEmm"(%"union.std::__1::__function::__policy_storage"* nocapture readnone, i64, i64) #8 align 2 {
  %4 = xor i64 %2, %1
  ret i64 %4
}

declare i64* @_ZN2v88internal11FactoryBaseINS0_12LocalFactoryEE9NewBigIntEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase.1049"*, i32, i8 zeroext) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctpop.i32(i32) #9

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nounwind }
attributes #14 = { noreturn nounwind }
attributes #15 = { nounwind readonly }
attributes #16 = { nounwind readnone }
attributes #17 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{i8 0, i8 2}
!4 = !{i32 101652}
!5 = !{i64 0, i64 65}
!6 = !{i32 0, i32 33}
!7 = !{!"branch_weights", i32 2000, i32 1}
