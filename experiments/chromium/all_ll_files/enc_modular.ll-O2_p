; ModuleID = '../../third_party/libjxl/src/lib/jxl/enc_modular.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/enc_modular.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.jxl::ModularOptions" = type <{ i64, float, i32, %"class.std::__1::vector.40", float, [4 x i8], i64, i32, i32, float, i32, i8, [3 x i8], i32, i8, [7 x i8] }>
%"class.std::__1::vector.40" = type { %"class.std::__1::__vector_base.41" }
%"class.std::__1::__vector_base.41" = type { i32*, i32*, %"class.std::__1::__compressed_pair.42" }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { i32* }
%"struct.jxl::Histogram" = type <{ %"class.std::__1::vector.156", i64, float, [4 x i8] }>
%"class.std::__1::vector.156" = type { %"class.std::__1::__vector_base.157" }
%"class.std::__1::__vector_base.157" = type { i32*, i32*, %"class.std::__1::__compressed_pair.158" }
%"class.std::__1::__compressed_pair.158" = type { %"struct.std::__1::__compressed_pair_elem.159" }
%"struct.std::__1::__compressed_pair_elem.159" = type { i32* }
%"struct.std::__1::array.306" = type { [21 x %"struct.jxl::AuxOut::LayerTotals"] }
%"struct.jxl::AuxOut::LayerTotals" = type { i64, i64, i64, i64, double }
%"struct.std::__1::array.307" = type { [8 x i32] }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.111" }
%"class.std::__1::__compressed_pair.111" = type { %"struct.std::__1::__compressed_pair_elem.112" }
%"struct.std::__1::__compressed_pair_elem.112" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { i1 (%"union.std::__1::__function::__policy_storage"*, i8*, %"class.jxl::Image3"*)* }
%"class.jxl::Image3" = type { [3 x %"class.jxl::Plane.95"] }
%"class.jxl::Plane.95" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { i8* }
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"class.std::__1::function.308" = type { %"class.std::__1::__function::__policy_func.312" }
%"class.std::__1::__function::__policy_func.312" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker.313", %"struct.std::__1::__function::__policy"* }
%"struct.std::__1::__function::__policy_invoker.313" = type { i32 (%"union.std::__1::__function::__policy_storage"*, %"class.jxl::CodecInOut"*, %"class.std::__1::basic_string"*)* }
%"class.jxl::CodecInOut" = type { %"struct.jxl::SizeConstraints", %"class.jxl::DecoderHints", i32, float, i64, %"struct.jxl::Blobs", %"struct.jxl::CodecMetadata", %"class.jxl::ImageBundle", %"class.std::__1::vector.321", i8, i64 }
%"struct.jxl::SizeConstraints" = type { i32, i32, i64 }
%"class.jxl::DecoderHints" = type { %"class.std::__1::vector.314" }
%"class.std::__1::vector.314" = type { %"class.std::__1::__vector_base.315" }
%"class.std::__1::__vector_base.315" = type { %"struct.jxl::DecoderHints::KeyValue"*, %"struct.jxl::DecoderHints::KeyValue"*, %"class.std::__1::__compressed_pair.316" }
%"struct.jxl::DecoderHints::KeyValue" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.316" = type { %"struct.std::__1::__compressed_pair_elem.317" }
%"struct.std::__1::__compressed_pair_elem.317" = type { %"struct.jxl::DecoderHints::KeyValue"* }
%"struct.jxl::Blobs" = type { %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes" }
%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"struct.jxl::CodecMetadata" = type { %"struct.jxl::ImageMetadata", %"class.jxl::SizeHeader", %"struct.jxl::CustomTransformData" }
%"struct.jxl::ImageMetadata" = type <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], %"struct.jxl::ColorEncoding", i32, i8, i8, i8, i8, %"class.jxl::SizeHeader", %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector.123", %"struct.jxl::CustomTransformData", %"class.jxl::PreviewHeader", %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>
%"class.jxl::Fields" = type { i32 (...)** }
%"struct.jxl::BitDepth" = type <{ %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8] }>
%"struct.jxl::ColorEncoding" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::CustomTransferFunction", i32, i8, i8, %"class.jxl::PaddedBytes", i32, %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }
%"struct.jxl::CustomTransferFunction" = type { %"class.jxl::Fields", i32, i8, i32, i32 }
%"struct.jxl::Customxy" = type { %"class.jxl::Fields", i32, i32 }
%"struct.jxl::ToneMapping" = type <{ %"class.jxl::Fields", i8, [3 x i8], float, float, i8, [3 x i8], float, [4 x i8] }>
%"class.std::__1::vector.123" = type { %"class.std::__1::__vector_base.124" }
%"class.std::__1::__vector_base.124" = type { %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"*, %"class.std::__1::__compressed_pair.125" }
%"struct.jxl::ExtraChannelInfo" = type { %"class.jxl::Fields", i8, i32, %"struct.jxl::BitDepth", i32, %"class.std::__1::basic_string", i8, [4 x float], i32 }
%"class.std::__1::__compressed_pair.125" = type { %"struct.std::__1::__compressed_pair_elem.126" }
%"struct.std::__1::__compressed_pair_elem.126" = type { %"struct.jxl::ExtraChannelInfo"* }
%"class.jxl::PreviewHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::AnimationHeader" = type <{ %"class.jxl::Fields", i32, i32, i32, i8, [3 x i8] }>
%"class.jxl::SizeHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::CustomTransformData" = type <{ %"class.jxl::Fields", i8, i8, [6 x i8], %"struct.jxl::OpsinInverseMatrix", i32, [15 x float], [55 x float], [210 x float], [4 x i8] }>
%"struct.jxl::OpsinInverseMatrix" = type <{ %"class.jxl::Fields", i8, [3 x i8], [9 x float], [3 x float], [4 x float], [4 x i8] }>
%"class.jxl::ImageBundle" = type { %"class.std::__1::unique_ptr.207", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", %"struct.jxl::ColorEncoding", %"class.std::__1::vector.130", i64 }
%"class.std::__1::unique_ptr.207" = type { %"class.std::__1::__compressed_pair.208" }
%"class.std::__1::__compressed_pair.208" = type { %"struct.std::__1::__compressed_pair_elem.209" }
%"struct.std::__1::__compressed_pair_elem.209" = type { %"struct.jxl::jpeg::JPEGData"* }
%"struct.jxl::jpeg::JPEGData" = type { %"class.jxl::Fields", i32, i32, i32, %"class.std::__1::vector.210", %"class.std::__1::vector.217", %"class.std::__1::vector.210", %"class.std::__1::vector.224", %"class.std::__1::vector.232", %"class.std::__1::vector.241", %"class.std::__1::vector.255", %"class.std::__1::vector.1", %"class.std::__1::vector.210", %"class.std::__1::vector.1", i32, i8, %"class.std::__1::vector.1" }
%"class.std::__1::vector.217" = type { %"class.std::__1::__vector_base.218" }
%"class.std::__1::__vector_base.218" = type { i32*, i32*, %"class.std::__1::__compressed_pair.219" }
%"class.std::__1::__compressed_pair.219" = type { %"struct.std::__1::__compressed_pair_elem.220" }
%"struct.std::__1::__compressed_pair_elem.220" = type { i32* }
%"class.std::__1::vector.224" = type { %"class.std::__1::__vector_base.225" }
%"class.std::__1::__vector_base.225" = type { %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"*, %"class.std::__1::__compressed_pair.227" }
%"struct.jxl::jpeg::JPEGQuantTable" = type <{ %"struct.std::__1::array.226", i32, i32, i8, [3 x i8] }>
%"struct.std::__1::array.226" = type { [64 x i32] }
%"class.std::__1::__compressed_pair.227" = type { %"struct.std::__1::__compressed_pair_elem.228" }
%"struct.std::__1::__compressed_pair_elem.228" = type { %"struct.jxl::jpeg::JPEGQuantTable"* }
%"class.std::__1::vector.232" = type { %"class.std::__1::__vector_base.233" }
%"class.std::__1::__vector_base.233" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"class.std::__1::__compressed_pair.236" }
%"struct.jxl::jpeg::JPEGHuffmanCode" = type <{ %"struct.std::__1::array.234", %"struct.std::__1::array.235", i32, i8, [3 x i8] }>
%"struct.std::__1::array.234" = type { [17 x i32] }
%"struct.std::__1::array.235" = type { [257 x i32] }
%"class.std::__1::__compressed_pair.236" = type { %"struct.std::__1::__compressed_pair_elem.237" }
%"struct.std::__1::__compressed_pair_elem.237" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"* }
%"class.std::__1::vector.241" = type { %"class.std::__1::__vector_base.242" }
%"class.std::__1::__vector_base.242" = type { %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"*, %"class.std::__1::__compressed_pair.250" }
%"struct.jxl::jpeg::JPEGComponent" = type { i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.243" }
%"class.std::__1::vector.243" = type { %"class.std::__1::__vector_base.244" }
%"class.std::__1::__vector_base.244" = type { i16*, i16*, %"class.std::__1::__compressed_pair.245" }
%"class.std::__1::__compressed_pair.245" = type { %"struct.std::__1::__compressed_pair_elem.246" }
%"struct.std::__1::__compressed_pair_elem.246" = type { i16* }
%"class.std::__1::__compressed_pair.250" = type { %"struct.std::__1::__compressed_pair_elem.251" }
%"struct.std::__1::__compressed_pair_elem.251" = type { %"struct.jxl::jpeg::JPEGComponent"* }
%"class.std::__1::vector.255" = type { %"class.std::__1::__vector_base.256" }
%"class.std::__1::__vector_base.256" = type { %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"*, %"class.std::__1::__compressed_pair.265" }
%"struct.jxl::jpeg::JPEGScanInfo" = type { i32, i32, i32, i32, i32, %"struct.std::__1::array.257", i32, %"class.std::__1::vector.40", %"class.std::__1::vector.258" }
%"struct.std::__1::array.257" = type { [4 x %"struct.jxl::jpeg::JPEGComponentScanInfo"] }
%"struct.jxl::jpeg::JPEGComponentScanInfo" = type { i32, i32, i32 }
%"class.std::__1::vector.258" = type { %"class.std::__1::__vector_base.259" }
%"class.std::__1::__vector_base.259" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"class.std::__1::__compressed_pair.260" }
%"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo" = type { i32, i32 }
%"class.std::__1::__compressed_pair.260" = type { %"struct.std::__1::__compressed_pair_elem.261" }
%"struct.std::__1::__compressed_pair_elem.261" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* }
%"class.std::__1::__compressed_pair.265" = type { %"struct.std::__1::__compressed_pair_elem.266" }
%"struct.std::__1::__compressed_pair_elem.266" = type { %"struct.jxl::jpeg::JPEGScanInfo"* }
%"class.std::__1::vector.210" = type { %"class.std::__1::__vector_base.211" }
%"class.std::__1::__vector_base.211" = type { %"class.std::__1::vector.1"*, %"class.std::__1::vector.1"*, %"class.std::__1::__compressed_pair.212" }
%"class.std::__1::__compressed_pair.212" = type { %"struct.std::__1::__compressed_pair_elem.213" }
%"struct.std::__1::__compressed_pair_elem.213" = type { %"class.std::__1::vector.1"* }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { i8*, i8*, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.jxl::YCbCrChromaSubsampling" = type <{ %"class.jxl::Fields", [3 x i32], i8, i8, [2 x i8] }>
%"struct.jxl::FrameOrigin" = type { i32, i32 }
%"class.std::__1::vector.130" = type { %"class.std::__1::__vector_base.131" }
%"class.std::__1::__vector_base.131" = type { %"class.jxl::Plane.95"*, %"class.jxl::Plane.95"*, %"class.std::__1::__compressed_pair.132" }
%"class.std::__1::__compressed_pair.132" = type { %"struct.std::__1::__compressed_pair_elem.133" }
%"struct.std::__1::__compressed_pair_elem.133" = type { %"class.jxl::Plane.95"* }
%"class.std::__1::vector.321" = type { %"class.std::__1::__vector_base.322" }
%"class.std::__1::__vector_base.322" = type { %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"*, %"class.std::__1::__compressed_pair.323" }
%"class.std::__1::__compressed_pair.323" = type { %"struct.std::__1::__compressed_pair_elem.324" }
%"struct.std::__1::__compressed_pair_elem.324" = type { %"class.jxl::ImageBundle"* }
%"class.jxl::ModularFrameEncoder" = type { %"class.std::__1::vector", %"class.std::__1::vector.1", %"class.std::__1::vector.8", %"class.std::__1::vector.38", %"class.std::__1::vector.52", %"class.std::__1::vector.59", %"class.std::__1::vector.73", %"class.std::__1::vector.59", %"struct.jxl::EntropyEncodingData", %"class.std::__1::vector.1", %"struct.jxl::FrameDimensions", %"struct.jxl::CompressParams", float, float, %"class.std::__1::vector", %"class.std::__1::vector.96", %"class.std::__1::vector.104", %"class.std::__1::vector" }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { %"class.jxl::Image"*, %"class.jxl::Image"*, %"class.std::__1::__compressed_pair.33" }
%"class.jxl::Image" = type <{ %"class.std::__1::vector.10", %"class.std::__1::vector.19", i64, i64, i32, i32, i64, i64, i64, i8, [7 x i8] }>
%"class.std::__1::vector.10" = type { %"class.std::__1::__vector_base.11" }
%"class.std::__1::__vector_base.11" = type { %"class.jxl::Channel"*, %"class.jxl::Channel"*, %"class.std::__1::__compressed_pair.14" }
%"class.jxl::Channel" = type { %"class.jxl::Plane", i64, i64, i32, i32, i32, i32 }
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"class.jxl::Channel"* }
%"class.std::__1::vector.19" = type { %"class.std::__1::__vector_base.20" }
%"class.std::__1::__vector_base.20" = type { %"class.jxl::Transform"*, %"class.jxl::Transform"*, %"class.std::__1::__compressed_pair.28" }
%"class.jxl::Transform" = type <{ %"class.jxl::Fields", i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.21", i32, i32, i8, i8, [6 x i8] }>
%"class.std::__1::vector.21" = type { %"class.std::__1::__vector_base.22" }
%"class.std::__1::__vector_base.22" = type { %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"*, %"class.std::__1::__compressed_pair.23" }
%"struct.jxl::SqueezeParams" = type <{ %"class.jxl::Fields", i8, i8, [2 x i8], i32, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"struct.jxl::SqueezeParams"* }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"class.jxl::Transform"* }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %"class.jxl::Image"* }
%"class.std::__1::vector.38" = type { %"class.std::__1::__vector_base.39" }
%"class.std::__1::__vector_base.39" = type { %"struct.jxl::ModularOptions"*, %"struct.jxl::ModularOptions"*, %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %"struct.jxl::ModularOptions"* }
%"class.std::__1::vector.52" = type { %"class.std::__1::__vector_base.53" }
%"class.std::__1::__vector_base.53" = type { %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"*, %"class.std::__1::__compressed_pair.54" }
%"struct.jxl::PropertyDecisionNode" = type <{ i32, i16, [2 x i8], i32, i32, i32, [4 x i8], i64, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"struct.std::__1::__compressed_pair_elem.55" = type { %"struct.jxl::PropertyDecisionNode"* }
%"class.std::__1::vector.73" = type { %"class.std::__1::__vector_base.74" }
%"class.std::__1::__vector_base.74" = type { %"struct.jxl::GroupHeader"*, %"struct.jxl::GroupHeader"*, %"class.std::__1::__compressed_pair.75" }
%"struct.jxl::GroupHeader" = type { %"class.jxl::Fields", i8, %"struct.jxl::weighted::Header", %"class.std::__1::vector.19" }
%"struct.jxl::weighted::Header" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32, i32, i32, [4 x i32] }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { %"struct.jxl::GroupHeader"* }
%"class.std::__1::vector.59" = type { %"class.std::__1::__vector_base.60" }
%"class.std::__1::__vector_base.60" = type { %"class.std::__1::vector.61"*, %"class.std::__1::vector.61"*, %"class.std::__1::__compressed_pair.68" }
%"class.std::__1::vector.61" = type { %"class.std::__1::__vector_base.62" }
%"class.std::__1::__vector_base.62" = type { %"struct.jxl::Token"*, %"struct.jxl::Token"*, %"class.std::__1::__compressed_pair.63" }
%"struct.jxl::Token" = type { i32, i32 }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"struct.std::__1::__compressed_pair_elem.64" = type { %"struct.jxl::Token"* }
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %"class.std::__1::vector.61"* }
%"struct.jxl::EntropyEncodingData" = type { %"class.std::__1::vector.80", i8, %"class.std::__1::vector.88", %"struct.jxl::LZ77Params" }
%"class.std::__1::vector.80" = type { %"class.std::__1::__vector_base.81" }
%"class.std::__1::__vector_base.81" = type { %"class.std::__1::vector.82"*, %"class.std::__1::vector.82"*, %"class.std::__1::__compressed_pair.83" }
%"class.std::__1::vector.82" = type { %"class.std::__1::__vector_base.385" }
%"class.std::__1::__vector_base.385" = type { %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"*, %"class.std::__1::__compressed_pair.386" }
%"struct.jxl::ANSEncSymbolInfo" = type <{ i16, [6 x i8], %"class.std::__1::vector.364", i64, i8, i8, i16, [4 x i8] }>
%"class.std::__1::vector.364" = type { %"class.std::__1::__vector_base.365" }
%"class.std::__1::__vector_base.365" = type { i16*, i16*, %"class.std::__1::__compressed_pair.366" }
%"class.std::__1::__compressed_pair.366" = type { %"struct.std::__1::__compressed_pair_elem.367" }
%"struct.std::__1::__compressed_pair_elem.367" = type { i16* }
%"class.std::__1::__compressed_pair.386" = type { %"struct.std::__1::__compressed_pair_elem.387" }
%"struct.std::__1::__compressed_pair_elem.387" = type { %"struct.jxl::ANSEncSymbolInfo"* }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.84" }
%"struct.std::__1::__compressed_pair_elem.84" = type { %"class.std::__1::vector.82"* }
%"class.std::__1::vector.88" = type { %"class.std::__1::__vector_base.89" }
%"class.std::__1::__vector_base.89" = type { %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"*, %"class.std::__1::__compressed_pair.90" }
%"struct.jxl::HybridUintConfig" = type { i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.90" = type { %"struct.std::__1::__compressed_pair_elem.91" }
%"struct.std::__1::__compressed_pair_elem.91" = type { %"struct.jxl::HybridUintConfig"* }
%"struct.jxl::LZ77Params" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::HybridUintConfig", i64 }
%"struct.jxl::FrameDimensions" = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%"struct.jxl::CompressParams" = type { float, i64, float, float, float, i8, [3 x float], i32, i64, i32, i32, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i8, i64, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i32, i8, i64, float, %"class.jxl::Plane.95"*, i8*, i8*, i8, i8, [2 x i8], %"struct.jxl::ButteraugliParams", i8, [3 x i8], %"struct.jxl::ModularOptions", i32, %"struct.std::__1::pair", i32, float, float, i32, i32, i8, i8, i64, i64 }
%"struct.jxl::ButteraugliParams" = type <{ float, float, float, i8, [3 x i8] }>
%"struct.std::__1::pair" = type { float, float }
%"class.std::__1::vector.96" = type { %"class.std::__1::__vector_base.97" }
%"class.std::__1::__vector_base.97" = type { %"struct.jxl::ModularMultiplierInfo"*, %"struct.jxl::ModularMultiplierInfo"*, %"class.std::__1::__compressed_pair.99" }
%"struct.jxl::ModularMultiplierInfo" = type { %"struct.std::__1::array", i32 }
%"struct.std::__1::array" = type { [2 x %"struct.std::__1::array.98"] }
%"struct.std::__1::array.98" = type { [2 x i32] }
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.100" }
%"struct.std::__1::__compressed_pair_elem.100" = type { %"struct.jxl::ModularMultiplierInfo"* }
%"class.std::__1::vector.104" = type { %"class.std::__1::__vector_base.105" }
%"class.std::__1::__vector_base.105" = type { %"class.std::__1::vector.40"*, %"class.std::__1::vector.40"*, %"class.std::__1::__compressed_pair.106" }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.107" = type { %"class.std::__1::vector.40"* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i64*, i64*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i64* }
%"struct.jxl::FrameHeader" = type { %"class.jxl::Fields", i8, i32, i32, i64, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i32, i32, i32, %"class.std::__1::basic_string", %"struct.jxl::Passes", i8, %"struct.jxl::FrameSize", i32, %"class.std::__1::vector.40", %"struct.jxl::FrameOrigin", %"struct.jxl::BlendingInfo", %"class.std::__1::vector.116", %"struct.jxl::AnimationFrame", i8, i32, i8, i32, %"struct.jxl::CodecMetadata"*, %"struct.jxl::LoopFilter", i8, i64 }
%"struct.jxl::Passes" = type <{ %"class.jxl::Fields", i32, i32, [11 x i32], [11 x i32], [11 x i32], [4 x i8] }>
%"struct.jxl::FrameSize" = type { i32, i32 }
%"struct.jxl::BlendingInfo" = type <{ %"class.jxl::Fields", i32, i32, i8, [3 x i8], i32, i64, i8, [7 x i8] }>
%"class.std::__1::vector.116" = type { %"class.std::__1::__vector_base.117" }
%"class.std::__1::__vector_base.117" = type { %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"*, %"class.std::__1::__compressed_pair.118" }
%"class.std::__1::__compressed_pair.118" = type { %"struct.std::__1::__compressed_pair_elem.119" }
%"struct.std::__1::__compressed_pair_elem.119" = type { %"struct.jxl::BlendingInfo"* }
%"struct.jxl::AnimationFrame" = type { %"class.jxl::Fields", i32, i32, %"struct.jxl::CodecMetadata"* }
%"struct.jxl::LoopFilter" = type <{ %"class.jxl::Fields", i8, i8, i8, i8, float, float, float, float, float, float, i32, i8, [3 x i8], [8 x float], i8, [3 x i8], [3 x float], float, float, i8, [3 x i8], float, float, float, float, float, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.jxl::PassesEncoderState" = type { %"struct.jxl::PassesSharedState", %"class.jxl::Plane.95", %"class.jxl::Plane.95", %"class.std::__1::vector.272", %"class.std::__1::vector.285", %"class.jxl::ProgressiveSplitter", %"struct.jxl::CompressParams", %"class.std::__1::vector.293", %"class.std::__1::vector.1", %"class.std::__1::vector.40", float, float, %"class.std::__1::unique_ptr.300" }
%"struct.jxl::PassesSharedState" = type { %"struct.jxl::CodecMetadata"*, %"struct.jxl::FrameHeader", %"struct.jxl::FrameDimensions", %"class.jxl::AcStrategyImage", %"class.jxl::DequantMatrices", %"class.jxl::Quantizer", %"class.jxl::Plane", %"class.jxl::Plane.137", %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ImageFeatures", i64, %"class.std::__1::vector.40", %"class.jxl::Plane.137", %"class.jxl::Image3", %"class.jxl::Image3"*, %"struct.jxl::BlockCtxMap", [4 x %"class.jxl::Image3"], [4 x %struct.anon.206], i64 }
%"class.jxl::AcStrategyImage" = type { %"class.jxl::Plane.137", i8*, i64 }
%"class.jxl::DequantMatrices" = type { %"class.std::__1::unique_ptr.138", float*, float*, [3 x float], [3 x float], [81 x i64], %"class.std::__1::vector.142" }
%"class.std::__1::unique_ptr.138" = type { %"class.std::__1::__compressed_pair.139" }
%"class.std::__1::__compressed_pair.139" = type { %"struct.std::__1::__compressed_pair_elem.140", %"struct.std::__1::__compressed_pair_elem.141" }
%"struct.std::__1::__compressed_pair_elem.140" = type { float* }
%"struct.std::__1::__compressed_pair_elem.141" = type { %"class.hwy::AlignedFreer" }
%"class.hwy::AlignedFreer" = type { void (i8*, i8*)*, i8* }
%"class.std::__1::vector.142" = type { %"class.std::__1::__vector_base.143" }
%"class.std::__1::__vector_base.143" = type { %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"*, %"class.std::__1::__compressed_pair.164" }
%"class.jxl::QuantEncoding" = type { %"struct.jxl::QuantEncodingInternal.base", [7 x i8] }
%"struct.jxl::QuantEncodingInternal.base" = type <{ i32, [4 x i8], %"struct.jxl::DctQuantWeightParams", %union.anon.146, %"struct.jxl::DctQuantWeightParams", %union.anon.163 }>
%union.anon.146 = type { %"struct.std::__1::array.153", [4 x i8] }
%"struct.std::__1::array.153" = type { [3 x %"struct.std::__1::array.154"] }
%"struct.std::__1::array.154" = type { [9 x float] }
%"struct.jxl::DctQuantWeightParams" = type <{ i64, %"struct.std::__1::array.144", [4 x i8] }>
%"struct.std::__1::array.144" = type { [3 x %"struct.std::__1::array.145"] }
%"struct.std::__1::array.145" = type { [17 x float] }
%union.anon.163 = type { i8 }
%"class.std::__1::__compressed_pair.164" = type { %"struct.std::__1::__compressed_pair_elem.165" }
%"struct.std::__1::__compressed_pair_elem.165" = type { %"class.jxl::QuantEncoding"* }
%"class.jxl::Quantizer" = type { [4 x float], [4 x float], i32, i32, float, float, float, [3 x float], %"class.jxl::DequantMatrices"* }
%"struct.jxl::ColorCorrelationMap" = type { %"class.jxl::Plane.169", %"class.jxl::Plane.169", [4 x float], i32, float, float, float, i32, i32 }
%"class.jxl::Plane.169" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::ImageFeatures" = type { %"struct.jxl::NoiseParams", %"class.jxl::PatchDictionary", %"class.jxl::Splines" }
%"struct.jxl::NoiseParams" = type { [8 x float] }
%"class.jxl::PatchDictionary" = type { %"struct.jxl::PassesSharedState"*, %"class.std::__1::vector.170", %"class.std::__1::vector", %"class.std::__1::vector" }
%"class.std::__1::vector.170" = type { %"class.std::__1::__vector_base.171" }
%"class.std::__1::__vector_base.171" = type { %"struct.jxl::PatchPosition"*, %"struct.jxl::PatchPosition"*, %"class.std::__1::__compressed_pair.179" }
%"struct.jxl::PatchPosition" = type { i64, i64, %"class.std::__1::vector.172", %"struct.jxl::PatchReferencePosition" }
%"class.std::__1::vector.172" = type { %"class.std::__1::__vector_base.173" }
%"class.std::__1::__vector_base.173" = type { %"struct.jxl::PatchBlending"*, %"struct.jxl::PatchBlending"*, %"class.std::__1::__compressed_pair.174" }
%"struct.jxl::PatchBlending" = type { i8, i32, i8 }
%"class.std::__1::__compressed_pair.174" = type { %"struct.std::__1::__compressed_pair_elem.175" }
%"struct.std::__1::__compressed_pair_elem.175" = type { %"struct.jxl::PatchBlending"* }
%"struct.jxl::PatchReferencePosition" = type { i64, i64, i64, i64, i64 }
%"class.std::__1::__compressed_pair.179" = type { %"struct.std::__1::__compressed_pair_elem.180" }
%"struct.std::__1::__compressed_pair_elem.180" = type { %"struct.jxl::PatchPosition"* }
%"class.jxl::Splines" = type { i32, %"class.std::__1::vector.184", %"class.std::__1::vector.199" }
%"class.std::__1::vector.184" = type { %"class.std::__1::__vector_base.185" }
%"class.std::__1::__vector_base.185" = type { %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"*, %"class.std::__1::__compressed_pair.194" }
%"class.jxl::QuantizedSpline" = type { %"class.std::__1::vector.186", [3 x [32 x i32]], [32 x i32] }
%"class.std::__1::vector.186" = type { %"class.std::__1::__vector_base.187" }
%"class.std::__1::__vector_base.187" = type { %"struct.std::__1::pair.188"*, %"struct.std::__1::pair.188"*, %"class.std::__1::__compressed_pair.189" }
%"struct.std::__1::pair.188" = type { i64, i64 }
%"class.std::__1::__compressed_pair.189" = type { %"struct.std::__1::__compressed_pair_elem.190" }
%"struct.std::__1::__compressed_pair_elem.190" = type { %"struct.std::__1::pair.188"* }
%"class.std::__1::__compressed_pair.194" = type { %"struct.std::__1::__compressed_pair_elem.195" }
%"struct.std::__1::__compressed_pair_elem.195" = type { %"class.jxl::QuantizedSpline"* }
%"class.std::__1::vector.199" = type { %"class.std::__1::__vector_base.200" }
%"class.std::__1::__vector_base.200" = type { %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"*, %"class.std::__1::__compressed_pair.201" }
%"struct.jxl::Spline::Point" = type { float, float }
%"class.std::__1::__compressed_pair.201" = type { %"struct.std::__1::__compressed_pair_elem.202" }
%"struct.std::__1::__compressed_pair_elem.202" = type { %"struct.jxl::Spline::Point"* }
%"class.jxl::Plane.137" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::BlockCtxMap" = type { [3 x %"class.std::__1::vector.156"], %"class.std::__1::vector.40", %"class.std::__1::vector.1", i64, i64 }
%struct.anon.206 = type <{ %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"*, i8, [7 x i8] }>
%"class.std::__1::vector.272" = type { %"class.std::__1::__vector_base.273" }
%"class.std::__1::__vector_base.273" = type { %"class.std::__1::unique_ptr.274"*, %"class.std::__1::unique_ptr.274"*, %"class.std::__1::__compressed_pair.280" }
%"class.std::__1::unique_ptr.274" = type { %"class.std::__1::__compressed_pair.275" }
%"class.std::__1::__compressed_pair.275" = type { %"struct.std::__1::__compressed_pair_elem.276" }
%"struct.std::__1::__compressed_pair_elem.276" = type { %"class.jxl::ACImage"* }
%"class.jxl::ACImage" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.280" = type { %"struct.std::__1::__compressed_pair_elem.281" }
%"struct.std::__1::__compressed_pair_elem.281" = type { %"class.std::__1::unique_ptr.274"* }
%"class.std::__1::vector.285" = type { %"class.std::__1::__vector_base.286" }
%"class.std::__1::__vector_base.286" = type { %"class.std::__1::unique_ptr.287"*, %"class.std::__1::unique_ptr.287"*, %"class.std::__1::__compressed_pair.288" }
%"class.std::__1::unique_ptr.287" = type opaque
%"class.std::__1::__compressed_pair.288" = type { %"struct.std::__1::__compressed_pair_elem.289" }
%"struct.std::__1::__compressed_pair_elem.289" = type { %"class.std::__1::unique_ptr.287"* }
%"class.jxl::ProgressiveSplitter" = type <{ %"struct.jxl::ProgressiveMode", %"class.jxl::Plane.95"*, float, [4 x i8] }>
%"struct.jxl::ProgressiveMode" = type { i64, [11 x %"struct.jxl::PassDefinition"] }
%"struct.jxl::PassDefinition" = type { i64, i64, i8, i64 }
%"class.std::__1::vector.293" = type { %"class.std::__1::__vector_base.294" }
%"class.std::__1::__vector_base.294" = type { %"struct.jxl::PassesEncoderState::PassData"*, %"struct.jxl::PassesEncoderState::PassData"*, %"class.std::__1::__compressed_pair.295" }
%"struct.jxl::PassesEncoderState::PassData" = type { %"class.std::__1::vector.59", %"class.std::__1::vector.1", %"struct.jxl::EntropyEncodingData" }
%"class.std::__1::__compressed_pair.295" = type { %"struct.std::__1::__compressed_pair_elem.296" }
%"struct.std::__1::__compressed_pair_elem.296" = type { %"struct.jxl::PassesEncoderState::PassData"* }
%"class.std::__1::unique_ptr.300" = type { %"class.std::__1::__compressed_pair.301" }
%"class.std::__1::__compressed_pair.301" = type { %"struct.std::__1::__compressed_pair_elem.302" }
%"struct.std::__1::__compressed_pair_elem.302" = type { %"class.jxl::EncoderHeuristics"* }
%"class.jxl::EncoderHeuristics" = type { i32 (...)** }
%"class.jxl::ThreadPool" = type { i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i8* }
%"struct.jxl::AuxOut" = type { %"struct.std::__1::array.306", i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array.307", %"struct.std::__1::array.307", i32, %"class.std::__1::basic_string", i64, %"class.std::__1::function", %"class.std::__1::function.308" }
%"class.jxl::ThreadPool::RunCallState" = type { i32 (i64)*, %class.anon* }
%class.anon = type { %"class.jxl::ModularFrameEncoder"*, %"class.std::__1::vector.328"*, %"struct.jxl::FrameDimensions"*, i8* }
%"class.std::__1::vector.328" = type { %"class.std::__1::__vector_base.329" }
%"class.std::__1::__vector_base.329" = type { %struct.GroupParams*, %struct.GroupParams*, %"class.std::__1::__compressed_pair.330" }
%struct.GroupParams = type { %"class.jxl::Rect", i32, i32, %"struct.jxl::ModularStreamId" }
%"class.jxl::Rect" = type { i64, i64, i64, i64 }
%"struct.jxl::ModularStreamId" = type { i32, i64, i64, i64 }
%"class.std::__1::__compressed_pair.330" = type { %"struct.std::__1::__compressed_pair_elem.331" }
%"struct.std::__1::__compressed_pair_elem.331" = type { %struct.GroupParams* }
%"class.jxl::ThreadPool::RunCallState.476" = type { i32 (i64)*, %class.anon.345* }
%class.anon.345 = type { %"class.std::__1::vector"*, %"class.jxl::ModularFrameEncoder"*, %"class.std::__1::vector.338"*, %"struct.std::__1::atomic_flag"* }
%"class.std::__1::vector.338" = type { %"class.std::__1::__vector_base.339" }
%"class.std::__1::__vector_base.339" = type { %"class.std::__1::vector.52"*, %"class.std::__1::vector.52"*, %"class.std::__1::__compressed_pair.340" }
%"class.std::__1::__compressed_pair.340" = type { %"struct.std::__1::__compressed_pair_elem.341" }
%"struct.std::__1::__compressed_pair_elem.341" = type { %"class.std::__1::vector.52"* }
%"struct.std::__1::atomic_flag" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i8 }
%"class.jxl::ThreadPool::RunCallState.478" = type { i32 (i64)*, %class.anon.349* }
%class.anon.349 = type { %"struct.jxl::AuxOut"**, %"class.jxl::ModularFrameEncoder"* }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__basic_string_common" = type { i8 }
%"class.std::__1::queue" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer.400", i64, %"class.std::__1::__compressed_pair.406" }
%"struct.std::__1::__split_buffer.400" = type { %struct.NodeInfo**, %struct.NodeInfo**, %struct.NodeInfo**, %"class.std::__1::__compressed_pair.401" }
%struct.NodeInfo = type { i64, i64, i64 }
%"class.std::__1::__compressed_pair.401" = type { %"struct.std::__1::__compressed_pair_elem.402" }
%"struct.std::__1::__compressed_pair_elem.402" = type { %struct.NodeInfo** }
%"class.std::__1::__compressed_pair.406" = type { %"struct.std::__1::__compressed_pair_elem.407" }
%"struct.std::__1::__compressed_pair_elem.407" = type { i64 }
%"struct.jxl::BitWriter" = type { i64, %"class.jxl::PaddedBytes", %"class.jxl::BitWriter::Allotment"* }
%"class.jxl::BitWriter::Allotment" = type { i64, i64, i64, i8, %"class.jxl::BitWriter::Allotment"* }
%"struct.jxl::HistogramParams" = type <{ i32, i32, i32, i32, %"class.std::__1::vector", i64, i8, [7 x i8] }>
%"struct.jxl::weighted::State" = type { [4 x i64], i64, [4 x %"class.std::__1::vector.40"], %"class.std::__1::vector.156", %"struct.jxl::weighted::Header", [64 x i32] }
%"struct.jxl::PredictionResult" = type { i32, i64, i32, i32 }
%"class.jxl::MATreeLookup" = type { %"class.std::__1::vector.425"* }
%"class.std::__1::vector.425" = type { %"class.std::__1::__vector_base.426" }
%"class.std::__1::__vector_base.426" = type { %"struct.jxl::FlatDecisionNode"*, %"struct.jxl::FlatDecisionNode"*, %"class.std::__1::__compressed_pair.430" }
%"struct.jxl::FlatDecisionNode" = type { i32, %union.anon.427, i32, %union.anon.428, %union.anon.429 }
%union.anon.427 = type { i32 }
%union.anon.428 = type { [2 x i32] }
%union.anon.429 = type { i64 }
%"class.std::__1::__compressed_pair.430" = type { %"struct.std::__1::__compressed_pair_elem.431" }
%"struct.std::__1::__compressed_pair_elem.431" = type { %"struct.jxl::FlatDecisionNode"* }
%"struct.jxl::TreeSamples" = type { %"class.std::__1::vector.350", %"class.std::__1::vector.364", %"class.std::__1::vector.210", %"class.std::__1::vector.371", %"class.std::__1::vector.40", %"class.std::__1::vector.378", %"class.std::__1::vector.210", i64, %"class.std::__1::vector.40" }
%"class.std::__1::vector.350" = type { %"class.std::__1::__vector_base.351" }
%"class.std::__1::__vector_base.351" = type { %"class.std::__1::vector.352"*, %"class.std::__1::vector.352"*, %"class.std::__1::__compressed_pair.359" }
%"class.std::__1::vector.352" = type { %"class.std::__1::__vector_base.353" }
%"class.std::__1::__vector_base.353" = type { %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"*, %"class.std::__1::__compressed_pair.354" }
%"struct.jxl::TreeSamples::ResidualToken" = type { i8, i8 }
%"class.std::__1::__compressed_pair.354" = type { %"struct.std::__1::__compressed_pair_elem.355" }
%"struct.std::__1::__compressed_pair_elem.355" = type { %"struct.jxl::TreeSamples::ResidualToken"* }
%"class.std::__1::__compressed_pair.359" = type { %"struct.std::__1::__compressed_pair_elem.360" }
%"struct.std::__1::__compressed_pair_elem.360" = type { %"class.std::__1::vector.352"* }
%"class.std::__1::vector.371" = type { %"class.std::__1::__vector_base.372" }
%"class.std::__1::__vector_base.372" = type { %"class.std::__1::vector.156"*, %"class.std::__1::vector.156"*, %"class.std::__1::__compressed_pair.373" }
%"class.std::__1::__compressed_pair.373" = type { %"struct.std::__1::__compressed_pair_elem.374" }
%"struct.std::__1::__compressed_pair_elem.374" = type { %"class.std::__1::vector.156"* }
%"class.std::__1::vector.378" = type { %"class.std::__1::__vector_base.379" }
%"class.std::__1::__vector_base.379" = type { i32*, i32*, %"class.std::__1::__compressed_pair.380" }
%"class.std::__1::__compressed_pair.380" = type { %"struct.std::__1::__compressed_pair_elem.381" }
%"struct.std::__1::__compressed_pair_elem.381" = type { i32* }
%"class.jxl::Visitor" = type { i32 (...)** }

$_ZNK3jxl11FrameHeader17ToFrameDimensionsEv = comdat any

$_ZNSt3__16vectorIjNS_9allocatorIjEEE6assignINS_11__wrap_iterIPjEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_ = comdat any

$_ZN3jxl9TransformD2Ev = comdat any

$_ZN3jxl8weighted5StateC2ENS0_6HeaderEmm = comdat any

$_ZN3jxl7Channel6resizeEi = comdat any

$_ZN3jxl8weighted6HeaderD0Ev = comdat any

$_ZNK3jxl8weighted6Header4NameEv = comdat any

$_ZN3jxl8weighted6Header11VisitFieldsEPNS_7VisitorE = comdat any

$_ZN3jxl9TransformD0Ev = comdat any

$_ZNK3jxl9Transform4NameEv = comdat any

$_ZN3jxl9Transform11VisitFieldsEPNS_7VisitorE = comdat any

$_ZNSt3__16vectorIN3jxl13SqueezeParamsENS_9allocatorIS2_EEE8__appendEm = comdat any

$_ZN3jxl6FieldsD2Ev = comdat any

$_ZN3jxl13SqueezeParamsD0Ev = comdat any

$_ZNK3jxl13SqueezeParams4NameEv = comdat any

$_ZN3jxl13SqueezeParams11VisitFieldsEPNS_7VisitorE = comdat any

$_ZNSt3__16vectorIN3jxl20PropertyDecisionNodeENS_9allocatorIS2_EEE6insertINS_11__wrap_iterIPKS2_EEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISC_E9referenceEEE5valueENS7_IPS2_EEE4typeESA_SC_SC_ = comdat any

$_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm = comdat any

$_ZN3jxl6detail7PredictILi2EEENS_16PredictionResultEPNSt3__16vectorIiNS3_9allocatorIiEEEEmPKilmmNS_9PredictorEPKNS_12MATreeLookupEPKNS_7ChannelEPNS_8weighted5StateEPl = comdat any

$_ZN3jxl6detail7PredictILi0EEENS_16PredictionResultEPNSt3__16vectorIiNS3_9allocatorIiEEEEmPKilmmNS_9PredictorEPKNS_12MATreeLookupEPKNS_7ChannelEPNS_8weighted5StateEPl = comdat any

$_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm = comdat any

$_ZN3jxl22YCbCrChromaSubsamplingD0Ev = comdat any

$_ZNK3jxl22YCbCrChromaSubsampling4NameEv = comdat any

$_ZN3jxl22YCbCrChromaSubsampling11VisitFieldsEPNS_7VisitorE = comdat any

$_ZNSt3__16vectorIN3jxl5ImageENS_9allocatorIS2_EEE8__appendEm = comdat any

$_ZNSt3__16vectorIjNS_9allocatorIjEEE6assignIPKjEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_ = comdat any

$_ZNSt3__16vectorIjNS_9allocatorIjEEE6assignIPjEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_ = comdat any

$_ZNSt3__16vectorImNS_9allocatorImEEE8__appendEm = comdat any

$_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm = comdat any

$_ZNSt3__16vectorIN3jxl14ModularOptionsENS_9allocatorIS2_EEE8__appendEmRKS2_ = comdat any

$_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEmRKj = comdat any

$_ZNSt3__16vectorINS0_IjNS_9allocatorIjEEEENS1_IS3_EEE8__appendEm = comdat any

$_ZN3jxl10ThreadPool14ReturnTrueInitEm = comdat any

$_ZNSt3__16vectorIN3jxl21ModularMultiplierInfoENS_9allocatorIS2_EEE8__appendEm = comdat any

$_ZNSt3__16vectorIN3jxl11GroupHeaderENS_9allocatorIS2_EEE8__appendEm = comdat any

$_ZN3jxl11GroupHeaderD2Ev = comdat any

$_ZN3jxl11GroupHeaderD0Ev = comdat any

$_ZNK3jxl11GroupHeader4NameEv = comdat any

$_ZN3jxl11GroupHeader11VisitFieldsEPNS_7VisitorE = comdat any

$_ZNSt3__16vectorIN3jxl9TransformENS_9allocatorIS2_EEE8__appendEm = comdat any

$_ZNSt3__16vectorINS0_IN3jxl5TokenENS_9allocatorIS2_EEEENS3_IS5_EEE8__appendEm = comdat any

$_ZN3jxl11TreeSamplesD2Ev = comdat any

$_ZNSt3__110__function16__policy_invokerIFbPKcRKN3jxl6Image3IfEEEE12__call_emptyEPKNS0_16__policy_storageES3_S8_ = comdat any

$_ZNSt3__125__throw_bad_function_callEv = comdat any

$_ZNSt3__110__function16__policy_invokerIFN3jxl6StatusERKNS2_10CodecInOutERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEE12__call_emptyEPKNS0_16__policy_storageES6_SE_ = comdat any

$_ZNSt3__16vectorImNS_9allocatorImEEE6assignIPmEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleImNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_ = comdat any

$_ZNSt3__16vectorIN3jxl7ChannelENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJS2_EEEvDpOT_ = comdat any

$_ZTVN3jxl8weighted6HeaderE = comdat any

$_ZTVN3jxl9TransformE = comdat any

$_ZTVN3jxl13SqueezeParamsE = comdat any

$_ZTVN3jxl22YCbCrChromaSubsamplingE = comdat any

$_ZTVN3jxl11GroupHeaderE = comdat any

$_ZZNSt3__110__function8__policy14__create_emptyEvE9__policy_ = comdat any

@.ref.tmp = private constant [16 x i32] [i32 0, i32 1, i32 4, i32 5, i32 6, i32 7, i32 8, i32 15, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 2, i32 3], align 4
@.ref.tmp.1 = private constant [16 x i32] [i32 0, i32 1, i32 15, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8], align 4
@.str.2 = private unnamed_addr constant [52 x i8] c"../../third_party/libjxl/src/lib/jxl/enc_modular.cc\00", align 1
@_ZZN3jxl19ModularFrameEncoder19ComputeEncodingDataERKNS_11FrameHeaderERKNS_13ImageMetadataEPNS_6Image3IfEERKNSt3__16vectorINS_5PlaneIfEENSA_9allocatorISD_EEEEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_6AuxOutEbE11enc_factors = internal constant [3 x float] [float 3.276800e+04, float 2.048000e+03, float 2.048000e+03], align 4
@.str.4 = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"!fp\00", align 1
@.str.9 = private unnamed_addr constant [14 x i8] c"c == nb_chans\00", align 1
@_ZN3jxl12_GLOBAL__N_118squeeze_xyb_qtableE = internal unnamed_addr constant [3 x [16 x float]] [[16 x float] [float 0x40647AE140000000, float 0x40547AE140000000, float 0x40447AE140000000, float 0x40347AE140000000, float 0x40247AE140000000, float 0x40147AE140000000, float 0x40047AE140000000, float 0x3FF47AE140000000, float 0x3FE47AE140000000, float 0x3FD47AE140000000, float 0x3FC47AE140000000, float 0x3FB47AE140000000, float 0x3FA47AE140000000, float 0x3F947AE140000000, float 0x3F847AE140000000, float 0x3F747AE140000000], [16 x float] [float 1.024000e+03, float 5.120000e+02, float 2.560000e+02, float 1.280000e+02, float 6.400000e+01, float 3.200000e+01, float 1.600000e+01, float 8.000000e+00, float 4.000000e+00, float 2.000000e+00, float 1.000000e+00, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01], [16 x float] [float 2.048000e+03, float 1.024000e+03, float 5.120000e+02, float 2.560000e+02, float 1.280000e+02, float 6.400000e+01, float 3.200000e+01, float 1.600000e+01, float 8.000000e+00, float 4.000000e+00, float 2.000000e+00, float 1.000000e+00, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01]], align 16
@_ZN3jxl12_GLOBAL__N_121squeeze_chroma_qtableE = internal unnamed_addr constant [16 x float] [float 1.024000e+03, float 5.120000e+02, float 2.560000e+02, float 1.280000e+02, float 6.400000e+01, float 3.200000e+01, float 1.600000e+01, float 8.000000e+00, float 4.000000e+00, float 2.000000e+00, float 1.000000e+00, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01], align 16
@_ZN3jxl12_GLOBAL__N_119squeeze_luma_qtableE = internal unnamed_addr constant [16 x float] [float 0x40647AE140000000, float 0x40547AE140000000, float 0x40447AE140000000, float 0x40347AE140000000, float 0x40247AE140000000, float 0x40147AE140000000, float 0x40047AE140000000, float 0x3FF47AE140000000, float 0x3FE47AE140000000, float 0x3FD47AE140000000, float 0x3FC47AE140000000, float 0x3FB47AE140000000, float 0x3FA47AE140000000, float 0x3F947AE140000000, float 0x3F847AE140000000, float 0x3F747AE140000000], align 16
@.str.11 = private unnamed_addr constant [13 x i8] c"ChooseParams\00", align 1
@.str.12 = private unnamed_addr constant [11 x i8] c"LearnTrees\00", align 1
@.ref.tmp.14 = private unnamed_addr constant [29 x i32] [i32 -255, i32 -191, i32 -127, i32 -95, i32 -63, i32 -47, i32 -31, i32 -23, i32 -15, i32 -11, i32 -7, i32 -5, i32 -3, i32 -1, i32 0, i32 1, i32 3, i32 5, i32 7, i32 11, i32 15, i32 23, i32 31, i32 47, i32 63, i32 95, i32 127, i32 191, i32 255], align 4
@.str.15 = private unnamed_addr constant [35 x i8] c"tree.size() == decoded_tree.size()\00", align 1
@.str.16 = private unnamed_addr constant [13 x i8] c"/global_tree\00", align 1
@.str.17 = private unnamed_addr constant [14 x i8] c"ComputeTokens\00", align 1
@.str.19 = private unnamed_addr constant [15 x i8] c"stream_id != 0\00", align 1
@.ref.tmp.22 = private constant [19 x i32] [i32 0, i32 6, i32 5, i32 10, i32 26, i32 40, i32 12, i32 19, i32 8, i32 4, i32 9, i32 15, i32 16, i32 17, i32 32, i32 33, i32 2, i32 1, i32 3], align 4
@.str.23 = private unnamed_addr constant [58 x i8] c"enc_state->shared.frame_header.chroma_subsampling.Is444()\00", align 1
@.ref.tmp.24 = private constant [3 x i32] [i32 1, i32 0, i32 2], align 4
@.ref.tmp.25 = private constant [3 x i32] [i32 1, i32 0, i32 2], align 4
@.ref.tmp.26 = private constant [3 x i32] [i32 1, i32 0, i32 2], align 4
@.ref.tmp.27 = private constant [3 x i32] [i32 1, i32 0, i32 2], align 4
@.str.28 = private unnamed_addr constant [32 x i8] c"encoding.qraw.qtable != nullptr\00", align 1
@.str.29 = private unnamed_addr constant [52 x i8] c"size_x * size_y * 3 == encoding.qraw.qtable->size()\00", align 1
@.str.30 = private unnamed_addr constant [22 x i8] c"%s:%d: JXL_CHECK: %s\0A\00", align 1
@.str.31 = private unnamed_addr constant [50 x i8] c"F16Coder::Write(encoding.qraw.qtable_den, writer)\00", align 1
@.str.32 = private unnamed_addr constant [91 x i8] c"modular_frame_encoder->EncodeStream( writer, nullptr, 0, ModularStreamId::QuantTable(idx))\00", align 1
@__const._ZN3jxl19ModularFrameEncoder16EncodeQuantTableEmmPNS_9BitWriterERKNS_13QuantEncodingEmPS0_.cfopts = private unnamed_addr constant %"struct.jxl::ModularOptions" <{ i64 -6148914691236517206, float 0xFFFFFFFFE0000000, i32 -1431655766, %"class.std::__1::vector.40" { %"class.std::__1::__vector_base.41" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.42" { %"struct.std::__1::__compressed_pair_elem.43" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA", i64 -6148914691236517206, i32 -1431655766, i32 -1431655766, float 0xFFFFFFFFE0000000, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" }>, align 8
@.str.33 = private unnamed_addr constant [46 x i8] c"ModularGenericCompress(image, cfopts, writer)\00", align 1
@.str.35 = private unnamed_addr constant [51 x i8] c"../../third_party/libjxl/src/lib/jxl/dec_modular.h\00", align 1
@.str.36 = private unnamed_addr constant [39 x i8] c"quant_table_id < DequantMatrices::kNum\00", align 1
@_ZN3jxl22YCbCrChromaSubsampling7kHShiftE.const = private unnamed_addr constant [4 x i8] c"\00\01\01\00", align 1
@_ZN3jxl22YCbCrChromaSubsampling7kVShiftE.const = private unnamed_addr constant [4 x i8] c"\00\01\00\01", align 1
@.str.37 = private unnamed_addr constant [31 x i8] c"sizeof(pixel_type) * 8 >= bits\00", align 1
@.str.38 = private unnamed_addr constant [14 x i8] c"exp_bits == 8\00", align 1
@_ZTVN3jxl8weighted6HeaderE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::Fields"*)* @_ZN3jxl6FieldsD2Ev to i8*), i8* bitcast (void (%"struct.jxl::weighted::Header"*)* @_ZN3jxl8weighted6HeaderD0Ev to i8*), i8* bitcast (i8* (%"struct.jxl::weighted::Header"*)* @_ZNK3jxl8weighted6Header4NameEv to i8*), i8* bitcast (i32 (%"struct.jxl::weighted::Header"*, %"class.jxl::Visitor"*)* @_ZN3jxl8weighted6Header11VisitFieldsEPNS_7VisitorE to i8*)] }, comdat, align 8
@.str.43 = private unnamed_addr constant [24 x i8] c"WeightedPredictorHeader\00", align 1
@_ZTVN3jxl9TransformE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::Transform"*)* @_ZN3jxl9TransformD2Ev to i8*), i8* bitcast (void (%"class.jxl::Transform"*)* @_ZN3jxl9TransformD0Ev to i8*), i8* bitcast (i8* (%"class.jxl::Transform"*)* @_ZNK3jxl9Transform4NameEv to i8*), i8* bitcast (i32 (%"class.jxl::Transform"*, %"class.jxl::Visitor"*)* @_ZN3jxl9Transform11VisitFieldsEPNS_7VisitorE to i8*)] }, comdat, align 8
@.str.44 = private unnamed_addr constant [10 x i8] c"Transform\00", align 1
@_ZTVN3jxl13SqueezeParamsE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::Fields"*)* @_ZN3jxl6FieldsD2Ev to i8*), i8* bitcast (void (%"struct.jxl::SqueezeParams"*)* @_ZN3jxl13SqueezeParamsD0Ev to i8*), i8* bitcast (i8* (%"struct.jxl::SqueezeParams"*)* @_ZNK3jxl13SqueezeParams4NameEv to i8*), i8* bitcast (i32 (%"struct.jxl::SqueezeParams"*, %"class.jxl::Visitor"*)* @_ZN3jxl13SqueezeParams11VisitFieldsEPNS_7VisitorE to i8*)] }, comdat, align 8
@.str.49 = private unnamed_addr constant [14 x i8] c"SqueezeParams\00", align 1
@.str.50 = private unnamed_addr constant [39 x i8] c"trees.size() + 1 == tree_splits.size()\00", align 1
@.str.51 = private unnamed_addr constant [12 x i8] c"end > begin\00", align 1
@.str.52 = private unnamed_addr constant [20 x i8] c"end <= trees.size()\00", align 1
@__const._ZN3jxl12_GLOBAL__N_112EstimateCostERKNS_5ImageE.histo = private unnamed_addr constant [18 x %"struct.jxl::Histogram"] [%"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>], align 16
@__const._ZN3jxl12_GLOBAL__N_114EstimateWPCostERKNS_5ImageEm.histo = private unnamed_addr constant [34 x %"struct.jxl::Histogram"] [%"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, %"struct.jxl::Histogram" <{ %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.158" { %"struct.std::__1::__compressed_pair_elem.159" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>], align 16
@_ZTVN3jxl22YCbCrChromaSubsamplingE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::Fields"*)* @_ZN3jxl6FieldsD2Ev to i8*), i8* bitcast (void (%"struct.jxl::YCbCrChromaSubsampling"*)* @_ZN3jxl22YCbCrChromaSubsamplingD0Ev to i8*), i8* bitcast (i8* (%"struct.jxl::YCbCrChromaSubsampling"*)* @_ZNK3jxl22YCbCrChromaSubsampling4NameEv to i8*), i8* bitcast (i32 (%"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Visitor"*)* @_ZN3jxl22YCbCrChromaSubsampling11VisitFieldsEPNS_7VisitorE to i8*)] }, comdat, align 8
@.str.54 = private unnamed_addr constant [23 x i8] c"YCbCrChromaSubsampling\00", align 1
@_ZN3jxl22YCbCrChromaSubsampling7kHShiftE = external local_unnamed_addr constant [4 x i8], align 1
@_ZN3jxl22YCbCrChromaSubsampling7kVShiftE = external local_unnamed_addr constant [4 x i8], align 1
@.ref.tmp.55 = private unnamed_addr constant [8 x i32] [i32 0, i32 1, i32 15, i32 9, i32 10, i32 11, i32 12, i32 13], align 4
@.str.58 = private unnamed_addr constant [138 x i8] c"PrepareStreamParams( stream_params[i].rect, cparams, stream_params[i].minShift, stream_params[i].maxShift, stream_params[i].id, do_color)\00", align 1
@_ZTVN3jxl11GroupHeaderE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"struct.jxl::GroupHeader"*)* @_ZN3jxl11GroupHeaderD2Ev to i8*), i8* bitcast (void (%"struct.jxl::GroupHeader"*)* @_ZN3jxl11GroupHeaderD0Ev to i8*), i8* bitcast (i8* (%"struct.jxl::GroupHeader"*)* @_ZNK3jxl11GroupHeader4NameEv to i8*), i8* bitcast (i32 (%"struct.jxl::GroupHeader"*, %"class.jxl::Visitor"*)* @_ZN3jxl11GroupHeader11VisitFieldsEPNS_7VisitorE to i8*)] }, comdat, align 8
@.str.59 = private unnamed_addr constant [12 x i8] c"GroupHeader\00", align 1
@.str.60 = private unnamed_addr constant [115 x i8] c"ModularGenericCompress( stream_images[i], stream_options[i], nullptr, nullptr, 0, i, &tree_samples, &total_pixels)\00", align 1
@.ref.tmp.62 = private unnamed_addr constant [33 x i32] [i32 -500, i32 -392, i32 -255, i32 -191, i32 -127, i32 -95, i32 -63, i32 -47, i32 -31, i32 -23, i32 -15, i32 -11, i32 -7, i32 -4, i32 -3, i32 -1, i32 0, i32 1, i32 3, i32 5, i32 7, i32 11, i32 15, i32 23, i32 31, i32 47, i32 63, i32 95, i32 127, i32 191, i32 255, i32 392, i32 500], align 4
@.str.63 = private unnamed_addr constant [31 x i8] c"%s:%d: JXL_ABORT: Unreachable\0A\00", align 1
@"__const._ZZN3jxl19ModularFrameEncoder15PrepareEncodingEPNS_10ThreadPoolERKNS_15FrameDimensionsEPNS_17EncoderHeuristicsEPNS_6AuxOutEENK3$_3clEmm.my_aux_out" = private unnamed_addr constant { %"struct.std::__1::array.306", i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array.307", %"struct.std::__1::array.307", i32, [4 x i8], %"class.std::__1::basic_string", i64, %"class.std::__1::function", %"class.std::__1::function.308" } { %"struct.std::__1::array.306" { [21 x %"struct.jxl::AuxOut::LayerTotals"] [%"struct.jxl::AuxOut::LayerTotals" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }, %"struct.jxl::AuxOut::LayerTotals" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }, %"struct.jxl::AuxOut::LayerTotals" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }, %"struct.jxl::AuxOut::LayerTotals" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }, %"struct.jxl::AuxOut::LayerTotals" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }, %"struct.jxl::AuxOut::LayerTotals" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }, %"struct.jxl::AuxOut::LayerTotals" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }, %"struct.jxl::AuxOut::LayerTotals" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }, %"struct.jxl::AuxOut::LayerTotals" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }, %"struct.jxl::AuxOut::LayerTotals" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }, %"struct.jxl::AuxOut::LayerTotals" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }, %"struct.jxl::AuxOut::LayerTotals" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }, %"struct.jxl::AuxOut::LayerTotals" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }, %"struct.jxl::AuxOut::LayerTotals" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }, %"struct.jxl::AuxOut::LayerTotals" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }, %"struct.jxl::AuxOut::LayerTotals" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }, %"struct.jxl::AuxOut::LayerTotals" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }, %"struct.jxl::AuxOut::LayerTotals" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }, %"struct.jxl::AuxOut::LayerTotals" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }, %"struct.jxl::AuxOut::LayerTotals" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }, %"struct.jxl::AuxOut::LayerTotals" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }] }, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, %"struct.std::__1::array.307" { [8 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766] }, %"struct.std::__1::array.307" { [8 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766] }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"class.std::__1::basic_string" { %"class.std::__1::__compressed_pair.111" { %"struct.std::__1::__compressed_pair_elem.112" { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" { %union.anon { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" { i8* inttoptr (i64 -6148914691236517206 to i8*), i64 -6148914691236517206, i64 -6148914691236517206 } } } } } }, i64 -6148914691236517206, %"class.std::__1::function" { %"class.std::__1::__function::__policy_func" { %"union.std::__1::__function::__policy_storage" { i8* inttoptr (i64 -6148914691236517206 to i8*), [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, %"struct.std::__1::__function::__policy_invoker" { i1 (%"union.std::__1::__function::__policy_storage"*, i8*, %"class.jxl::Image3"*)* inttoptr (i64 -6148914691236517206 to i1 (%"union.std::__1::__function::__policy_storage"*, i8*, %"class.jxl::Image3"*)*) }, %"struct.std::__1::__function::__policy"* inttoptr (i64 -6148914691236517206 to %"struct.std::__1::__function::__policy"*) } }, %"class.std::__1::function.308" { %"class.std::__1::__function::__policy_func.312" { %"union.std::__1::__function::__policy_storage" { i8* inttoptr (i64 -6148914691236517206 to i8*), [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, %"struct.std::__1::__function::__policy_invoker.313" { i32 (%"union.std::__1::__function::__policy_storage"*, %"class.jxl::CodecInOut"*, %"class.std::__1::basic_string"*)* inttoptr (i64 -6148914691236517206 to i32 (%"union.std::__1::__function::__policy_storage"*, %"class.jxl::CodecInOut"*, %"class.std::__1::basic_string"*)*) }, %"struct.std::__1::__function::__policy"* inttoptr (i64 -6148914691236517206 to %"struct.std::__1::__function::__policy"*) } } }, align 8
@.str.64 = private unnamed_addr constant [212 x i8] c"ModularGenericCompress( stream_images[stream_id], stream_options[stream_id], nullptr, &my_aux_out, 0, stream_id, nullptr, nullptr, &tree, &stream_headers[stream_id], &tokens[stream_id], &image_widths[stream_id])\00", align 1
@_ZZNSt3__110__function8__policy14__create_emptyEvE9__policy_ = linkonce_odr hidden constant %"struct.std::__1::__function::__policy" { i8* (i8*)* null, void (i8*)* null, i8 1, %"class.std::type_info"* null }, comdat, align 8
@.str.65 = private unnamed_addr constant [49 x i8] c"../../third_party/libjxl/src/lib/jxl/image_ops.h\00", align 1
@.str.66 = private unnamed_addr constant [29 x i8] c"SameSize(rect_from, rect_to)\00", align 1
@switch.table._ZN3jxl19ModularFrameEncoder19ComputeEncodingDataERKNS_11FrameHeaderERKNS_13ImageMetadataEPNS_6Image3IfEERKNSt3__16vectorINS_5PlaneIfEENSA_9allocatorISD_EEEEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_6AuxOutEb.67 = private unnamed_addr constant [8 x i32] [i32 0, i32 1, i32 3, i32 2, i32 3, i32 3, i32 3, i32 3], align 4
@switch.table._ZN3jxl19ModularFrameEncoder19PrepareStreamParamsERKNS_4RectERKNS_14CompressParamsEiiRKNS_15ModularStreamIdEb = private unnamed_addr constant [5 x i64] [i64 19, i64 9, i64 7, i64 5, i64 4], align 8
@switch.table._ZN3jxl19ModularFrameEncoder19PrepareStreamParamsERKNS_4RectERKNS_14CompressParamsEiiRKNS_15ModularStreamIdEb.68 = private unnamed_addr constant [4 x i32] [i32 12, i32 12, i32 12, i32 13], align 4
@switch.table._ZN3jxl19ModularFrameEncoder19PrepareStreamParamsERKNS_4RectERKNS_14CompressParamsEiiRKNS_15ModularStreamIdEb.69 = private unnamed_addr constant [4 x i32] [i32 12, i32 12, i32 13, i32 12], align 4
@switch.table._ZN3jxl19ModularFrameEncoder19PrepareStreamParamsERKNS_4RectERKNS_14CompressParamsEiiRKNS_15ModularStreamIdEb.70 = private unnamed_addr constant [4 x i32] [i32 12, i32 11, i32 12, i32 12], align 4
@switch.table._ZN3jxl19ModularFrameEncoder19PrepareStreamParamsERKNS_4RectERKNS_14CompressParamsEiiRKNS_15ModularStreamIdEb.71 = private unnamed_addr constant [4 x i32] [i32 16, i32 8, i32 10, i32 16], align 4
@switch.table._ZN3jxl19ModularFrameEncoder19PrepareStreamParamsERKNS_4RectERKNS_14CompressParamsEiiRKNS_15ModularStreamIdEb.72 = private unnamed_addr constant [4 x i32] [i32 10, i32 8, i32 9, i32 8], align 4
@switch.table._ZN3jxl19ModularFrameEncoder19PrepareStreamParamsERKNS_4RectERKNS_14CompressParamsEiiRKNS_15ModularStreamIdEb.73 = private unnamed_addr constant [4 x i32] [i32 7, i32 4, i32 7, i32 0], align 4
@switch.table._ZN3jxl19ModularFrameEncoder19PrepareStreamParamsERKNS_4RectERKNS_14CompressParamsEiiRKNS_15ModularStreamIdEb.74 = private unnamed_addr constant [4 x i32] [i32 7, i32 0, i32 0, i32 16], align 4
@switch.table._ZN3jxl19ModularFrameEncoder19PrepareStreamParamsERKNS_4RectERKNS_14CompressParamsEiiRKNS_15ModularStreamIdEb.75 = private unnamed_addr constant [4 x i32] [i32 7, i32 3, i32 0, i32 0], align 4
@switch.table._ZN3jxl19ModularFrameEncoder19PrepareStreamParamsERKNS_4RectERKNS_14CompressParamsEiiRKNS_15ModularStreamIdEb.76 = private unnamed_addr constant [4 x i32] [i32 0, i32 23, i32 16, i32 23], align 4
@switch.table._ZN3jxl19ModularFrameEncoder19PrepareStreamParamsERKNS_4RectERKNS_14CompressParamsEiiRKNS_15ModularStreamIdEb.77 = private unnamed_addr constant [4 x i32] [i32 0, i32 2, i32 9, i32 0], align 4

@_ZN3jxl19ModularFrameEncoderC1ERKNS_11FrameHeaderERKNS_14CompressParamsE = hidden unnamed_addr alias void (%"class.jxl::ModularFrameEncoder"*, %"struct.jxl::FrameHeader"*, %"struct.jxl::CompressParams"*), void (%"class.jxl::ModularFrameEncoder"*, %"struct.jxl::FrameHeader"*, %"struct.jxl::CompressParams"*)* @_ZN3jxl19ModularFrameEncoderC2ERKNS_11FrameHeaderERKNS_14CompressParamsE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl19ModularFrameEncoderC2ERKNS_11FrameHeaderERKNS_14CompressParamsE(%"class.jxl::ModularFrameEncoder"*, %"struct.jxl::FrameHeader"* dereferenceable(576), %"struct.jxl::CompressParams"* nocapture readonly dereferenceable(360)) unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::vector.40", align 8
  %5 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 0
  %6 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 2
  %8 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 3
  %9 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 8, i32 2
  %10 = bitcast %"class.std::__1::vector.88"* %9 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 24, i1 false) #10
  %11 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 8, i32 3
  %12 = bitcast %"class.jxl::ModularFrameEncoder"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 216, i1 false)
  tail call void @_ZN3jxl10LZ77ParamsC1Ev(%"struct.jxl::LZ77Params"* %11) #10
  %13 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 9
  %14 = bitcast %"class.std::__1::vector.1"* %13 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 24, i1 false) #10
  %15 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 10
  tail call void @_ZNK3jxl11FrameHeader17ToFrameDimensionsEv(%"struct.jxl::FrameDimensions"* sret %15, %"struct.jxl::FrameHeader"* %1)
  %16 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11
  %17 = bitcast %"struct.jxl::CompressParams"* %16 to i8*
  %18 = bitcast %"struct.jxl::CompressParams"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 8 %18, i64 68, i1 false) #10
  %19 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 13, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl22YCbCrChromaSubsamplingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %19, align 8
  %20 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 13, i32 1
  %21 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %2, i64 0, i32 13, i32 1
  %22 = bitcast [3 x i32]* %20 to i8*
  %23 = bitcast [3 x i32]* %21 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %22, i8* align 8 %23, i64 14, i1 false) #10
  %24 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 14
  %25 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %2, i64 0, i32 14
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %25, i64 117, i1 false) #10
  %26 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 39
  %27 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %2, i64 0, i32 39
  %28 = bitcast %"struct.jxl::ModularOptions"* %26 to i8*
  %29 = bitcast %"struct.jxl::ModularOptions"* %27 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %28, i8* align 8 %29, i64 16, i1 false) #10
  %30 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 39, i32 3
  %31 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %2, i64 0, i32 39, i32 3
  %32 = bitcast %"class.std::__1::vector.40"* %30 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %32, i8 0, i64 24, i1 false) #10
  %33 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %2, i64 0, i32 39, i32 3, i32 0, i32 1
  %34 = bitcast i32** %33 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = bitcast %"class.std::__1::vector.40"* %31 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = sub i64 %35, %37
  %39 = ashr exact i64 %38, 2
  %40 = icmp eq i64 %38, 0
  br i1 %40, label %68, label %41

41:                                               ; preds = %3
  %42 = icmp ugt i64 %39, 4611686018427387903
  br i1 %42, label %43, label %45

43:                                               ; preds = %41
  %44 = bitcast %"class.std::__1::vector.40"* %30 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %44) #12
  unreachable

45:                                               ; preds = %41
  %46 = tail call i8* @_Znwm(i64 %38) #13
  %47 = bitcast i8* %46 to i32*
  %48 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 39, i32 3, i32 0, i32 1
  %49 = bitcast i32** %48 to i8**
  store i8* %46, i8** %49, align 8
  %50 = bitcast %"class.std::__1::vector.40"* %30 to i8**
  store i8* %46, i8** %50, align 8
  %51 = getelementptr inbounds i32, i32* %47, i64 %39
  %52 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 39, i32 3, i32 0, i32 2, i32 0, i32 0
  store i32* %51, i32** %52, align 8
  %53 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %31, i64 0, i32 0, i32 0
  %54 = load i32*, i32** %53, align 8
  %55 = load i64, i64* %34, align 8
  %56 = bitcast i32** %48 to i64*
  %57 = ptrtoint i8* %46 to i64
  %58 = ptrtoint i32* %54 to i64
  %59 = sub i64 %55, %58
  %60 = icmp sgt i64 %59, 0
  br i1 %60, label %61, label %66

61:                                               ; preds = %45
  %62 = lshr exact i64 %59, 2
  %63 = bitcast i32* %54 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %46, i8* align 4 %63, i64 %59, i1 false) #10
  %64 = getelementptr inbounds i32, i32* %47, i64 %62
  %65 = ptrtoint i32* %64 to i64
  br label %66

66:                                               ; preds = %61, %45
  %67 = phi i64 [ %65, %61 ], [ %57, %45 ]
  store i64 %67, i64* %56, align 8
  br label %68

68:                                               ; preds = %3, %66
  %69 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 39, i32 4
  %70 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %2, i64 0, i32 39, i32 4
  %71 = bitcast float* %69 to i8*
  %72 = bitcast float* %70 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %71, i8* align 8 %72, i64 41, i1 false) #10
  %73 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 40
  %74 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %2, i64 0, i32 40
  %75 = bitcast i32* %73 to i8*
  %76 = bitcast i32* %74 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %75, i8* align 8 %76, i64 56, i1 false) #10
  %77 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 12
  %78 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 41
  %79 = bitcast %"struct.std::__1::pair"* %78 to i32*
  %80 = load i32, i32* %79, align 4
  %81 = bitcast float* %77 to i32*
  store i32 %80, i32* %81, align 8
  %82 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 13
  %83 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 41, i32 1
  %84 = bitcast float* %83 to i32*
  %85 = load i32, i32* %84, align 4
  %86 = bitcast float* %82 to i32*
  store i32 %85, i32* %86, align 4
  %87 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 14
  %88 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 12, i32 1
  %89 = bitcast %"class.std::__1::vector"* %87 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %89, i8 0, i64 96, i1 false)
  %90 = load i32, i32* %88, align 8
  %91 = zext i32 %90 to i64
  %92 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 10, i32 15
  %93 = load i64, i64* %92, align 8
  %94 = mul i64 %93, 3
  %95 = add i64 %94, 18
  %96 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 10, i32 14
  %97 = load i64, i64* %96, align 8
  %98 = mul i64 %97, %91
  %99 = add i64 %95, %98
  %100 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 2, i32 0, i32 1
  %101 = bitcast %"class.jxl::Image"** %100 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = bitcast %"class.std::__1::vector.8"* %7 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = sub i64 %102, %104
  %106 = sdiv exact i64 %105, 104
  %107 = icmp ugt i64 %99, %106
  %108 = inttoptr i64 %104 to %"class.jxl::Image"*
  %109 = inttoptr i64 %102 to %"class.jxl::Image"*
  br i1 %107, label %110, label %112

110:                                              ; preds = %68
  %111 = sub i64 %99, %106
  tail call void @_ZNSt3__16vectorIN3jxl5ImageENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.8"* %7, i64 %111) #10
  br label %122

112:                                              ; preds = %68
  %113 = icmp ult i64 %99, %106
  br i1 %113, label %114, label %122

114:                                              ; preds = %112
  %115 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %108, i64 %99
  %116 = icmp eq %"class.jxl::Image"* %115, %109
  br i1 %116, label %121, label %117

117:                                              ; preds = %114, %117
  %118 = phi %"class.jxl::Image"* [ %119, %117 ], [ %109, %114 ]
  %119 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %118, i64 -1
  tail call void @_ZN3jxl5ImageD1Ev(%"class.jxl::Image"* %119) #10
  %120 = icmp eq %"class.jxl::Image"* %119, %115
  br i1 %120, label %121, label %117

121:                                              ; preds = %117, %114
  store %"class.jxl::Image"* %115, %"class.jxl::Image"** %100, align 8
  br label %122

122:                                              ; preds = %110, %112, %121
  %123 = load float, float* %82, align 4
  %124 = fcmp ogt float %123, 1.000000e+02
  br i1 %124, label %125, label %127

125:                                              ; preds = %122
  %126 = load i32, i32* %81, align 8
  store i32 %126, i32* %86, align 4
  br label %127

127:                                              ; preds = %125, %122
  %128 = load i32, i32* %73, align 8
  %129 = icmp slt i32 %128, 0
  br i1 %129, label %130, label %134

130:                                              ; preds = %127
  %131 = load float, float* %77, align 8
  %132 = fcmp une float %131, 1.000000e+02
  %133 = zext i1 %132 to i32
  store i32 %133, i32* %73, align 8
  br label %134

134:                                              ; preds = %130, %127
  %135 = phi i32 [ %128, %127 ], [ %133, %130 ]
  %136 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 7
  %137 = load i32, i32* %136, align 4
  %138 = icmp sgt i32 %137, 4
  %139 = select i1 %138, float 1.920000e+02, float 9.600000e+01
  store float %139, float* %69, align 8
  %140 = bitcast %"class.std::__1::vector.40"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %140) #10
  %141 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %4, i64 0, i32 0, i32 0
  %142 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %4, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %140, i8 0, i64 24, i1 false) #10
  %143 = icmp eq i32 %135, 0
  br i1 %143, label %145, label %144

144:                                              ; preds = %134
  call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE6assignIPKjEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_(%"class.std::__1::vector.40"* nonnull %4, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @.ref.tmp, i64 0, i64 0), i32* getelementptr inbounds ([16 x i32], [16 x i32]* @.ref.tmp, i64 1, i64 0)) #10
  br label %146

145:                                              ; preds = %134
  call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE6assignIPKjEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_(%"class.std::__1::vector.40"* nonnull %4, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @.ref.tmp.1, i64 0, i64 0), i32* getelementptr inbounds ([16 x i32], [16 x i32]* @.ref.tmp.1, i64 1, i64 0)) #10
  br label %146

146:                                              ; preds = %145, %144
  %147 = load i32, i32* %136, align 4
  switch i32 %147, label %159 [
    i32 3, label %148
    i32 2, label %151
    i32 1, label %154
  ]

148:                                              ; preds = %146
  %149 = load i32*, i32** %141, align 8
  %150 = getelementptr inbounds i32, i32* %149, i64 8
  call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE6assignINS_11__wrap_iterIPjEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(%"class.std::__1::vector.40"* %30, i32* %149, i32* %150)
  br label %162

151:                                              ; preds = %146
  %152 = load i32*, i32** %141, align 8
  %153 = getelementptr inbounds i32, i32* %152, i64 10
  call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE6assignINS_11__wrap_iterIPjEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(%"class.std::__1::vector.40"* %30, i32* %152, i32* %153)
  br label %162

154:                                              ; preds = %146
  %155 = icmp eq %"class.std::__1::vector.40"* %30, %4
  br i1 %155, label %162, label %156

156:                                              ; preds = %154
  %157 = load i32*, i32** %141, align 8
  %158 = load i32*, i32** %142, align 8
  call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE6assignIPjEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector.40"* %30, i32* %157, i32* %158) #10
  br label %162

159:                                              ; preds = %146
  %160 = load i32*, i32** %141, align 8
  %161 = getelementptr inbounds i32, i32* %160, i64 6
  call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE6assignINS_11__wrap_iterIPjEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(%"class.std::__1::vector.40"* %30, i32* %160, i32* %161)
  br label %162

162:                                              ; preds = %156, %154, %159, %151, %148
  %163 = phi i64 [ 16, %159 ], [ 64, %151 ], [ 32, %148 ], [ 256, %154 ], [ 256, %156 ]
  %164 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 39, i32 6
  store i64 %163, i64* %164, align 8
  %165 = load i32, i32* %136, align 4
  %166 = icmp sgt i32 %165, 1
  %167 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 39, i32 2
  %168 = load i32, i32* %167, align 4
  %169 = icmp sgt i32 %168, 0
  br i1 %166, label %178, label %170

170:                                              ; preds = %162
  br i1 %169, label %171, label %320

171:                                              ; preds = %170
  %172 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 39, i32 3, i32 0, i32 1
  %173 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 39, i32 3, i32 0, i32 2, i32 0, i32 0
  %174 = bitcast i32** %172 to i64*
  %175 = bitcast %"class.std::__1::vector.40"* %30 to i64*
  %176 = bitcast i32** %173 to i64*
  %177 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %30, i64 0, i32 0, i32 0
  br label %253

178:                                              ; preds = %162
  br i1 %169, label %179, label %320

179:                                              ; preds = %178
  %180 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 39, i32 3, i32 0, i32 1
  %181 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 39, i32 3, i32 0, i32 2, i32 0, i32 0
  %182 = bitcast i32** %180 to i64*
  %183 = bitcast %"class.std::__1::vector.40"* %30 to i64*
  %184 = bitcast i32** %181 to i64*
  %185 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %30, i64 0, i32 0, i32 0
  br label %186

186:                                              ; preds = %179, %249
  %187 = phi i32 [ 0, %179 ], [ %250, %249 ]
  %188 = shl nsw i32 %187, 2
  %189 = add nuw i32 %188, 19
  %190 = load i32*, i32** %180, align 8
  %191 = load i32*, i32** %181, align 8
  %192 = icmp ult i32* %190, %191
  %193 = ptrtoint i32* %191 to i64
  br i1 %192, label %194, label %197

194:                                              ; preds = %186
  store i32 %189, i32* %190, align 4
  %195 = getelementptr inbounds i32, i32* %190, i64 1
  %196 = ptrtoint i32* %195 to i64
  store i64 %196, i64* %182, align 8
  br label %249

197:                                              ; preds = %186
  %198 = ptrtoint i32* %190 to i64
  %199 = load i64, i64* %183, align 8
  %200 = sub i64 %198, %199
  %201 = ashr exact i64 %200, 2
  %202 = add nsw i64 %201, 1
  %203 = icmp ugt i64 %202, 4611686018427387903
  br i1 %203, label %204, label %206

204:                                              ; preds = %197
  %205 = bitcast %"class.std::__1::vector.40"* %30 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %205) #12
  unreachable

206:                                              ; preds = %197
  %207 = sub i64 %193, %199
  %208 = ashr exact i64 %207, 2
  %209 = icmp ult i64 %208, 2305843009213693951
  br i1 %209, label %210, label %218

210:                                              ; preds = %206
  %211 = ashr exact i64 %207, 1
  %212 = icmp ult i64 %211, %202
  %213 = select i1 %212, i64 %202, i64 %211
  %214 = icmp eq i64 %213, 0
  br i1 %214, label %223, label %215

215:                                              ; preds = %210
  %216 = icmp ugt i64 %213, 4611686018427387903
  br i1 %216, label %217, label %218

217:                                              ; preds = %215
  call void @abort() #12
  unreachable

218:                                              ; preds = %215, %206
  %219 = phi i64 [ %213, %215 ], [ 4611686018427387903, %206 ]
  %220 = shl i64 %219, 2
  %221 = call i8* @_Znwm(i64 %220) #13
  %222 = bitcast i8* %221 to i32*
  br label %223

223:                                              ; preds = %218, %210
  %224 = phi i64 [ %219, %218 ], [ 0, %210 ]
  %225 = phi i32* [ %222, %218 ], [ null, %210 ]
  %226 = getelementptr inbounds i32, i32* %225, i64 %201
  %227 = getelementptr inbounds i32, i32* %225, i64 %224
  %228 = ptrtoint i32* %227 to i64
  store i32 %189, i32* %226, align 4
  %229 = getelementptr inbounds i32, i32* %226, i64 1
  %230 = ptrtoint i32* %229 to i64
  %231 = load i32*, i32** %185, align 8
  %232 = load i64, i64* %182, align 8
  %233 = ptrtoint i32* %231 to i64
  %234 = sub i64 %232, %233
  %235 = ashr exact i64 %234, 2
  %236 = sub nsw i64 0, %235
  %237 = getelementptr inbounds i32, i32* %226, i64 %236
  %238 = ptrtoint i32* %237 to i64
  %239 = icmp sgt i64 %234, 0
  br i1 %239, label %240, label %244

240:                                              ; preds = %223
  %241 = bitcast i32* %237 to i8*
  %242 = bitcast i32* %231 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %241, i8* align 4 %242, i64 %234, i1 false) #10
  %243 = load i32*, i32** %185, align 8
  br label %244

244:                                              ; preds = %240, %223
  %245 = phi i32* [ %231, %223 ], [ %243, %240 ]
  store i64 %238, i64* %183, align 8
  store i64 %230, i64* %182, align 8
  store i64 %228, i64* %184, align 8
  %246 = icmp eq i32* %245, null
  br i1 %246, label %249, label %247

247:                                              ; preds = %244
  %248 = bitcast i32* %245 to i8*
  call void @_ZdlPv(i8* %248) #13
  br label %249

249:                                              ; preds = %194, %244, %247
  %250 = add nuw nsw i32 %187, 1
  %251 = load i32, i32* %167, align 4
  %252 = icmp slt i32 %250, %251
  br i1 %252, label %186, label %320

253:                                              ; preds = %171, %315
  %254 = phi i32 [ 0, %171 ], [ %316, %315 ]
  %255 = add nuw i32 %254, 16
  %256 = load i32*, i32** %172, align 8
  %257 = load i32*, i32** %173, align 8
  %258 = icmp ult i32* %256, %257
  %259 = ptrtoint i32* %257 to i64
  br i1 %258, label %260, label %263

260:                                              ; preds = %253
  store i32 %255, i32* %256, align 4
  %261 = getelementptr inbounds i32, i32* %256, i64 1
  %262 = ptrtoint i32* %261 to i64
  store i64 %262, i64* %174, align 8
  br label %315

263:                                              ; preds = %253
  %264 = ptrtoint i32* %256 to i64
  %265 = load i64, i64* %175, align 8
  %266 = sub i64 %264, %265
  %267 = ashr exact i64 %266, 2
  %268 = add nsw i64 %267, 1
  %269 = icmp ugt i64 %268, 4611686018427387903
  br i1 %269, label %270, label %272

270:                                              ; preds = %263
  %271 = bitcast %"class.std::__1::vector.40"* %30 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %271) #12
  unreachable

272:                                              ; preds = %263
  %273 = sub i64 %259, %265
  %274 = ashr exact i64 %273, 2
  %275 = icmp ult i64 %274, 2305843009213693951
  br i1 %275, label %276, label %284

276:                                              ; preds = %272
  %277 = ashr exact i64 %273, 1
  %278 = icmp ult i64 %277, %268
  %279 = select i1 %278, i64 %268, i64 %277
  %280 = icmp eq i64 %279, 0
  br i1 %280, label %289, label %281

281:                                              ; preds = %276
  %282 = icmp ugt i64 %279, 4611686018427387903
  br i1 %282, label %283, label %284

283:                                              ; preds = %281
  call void @abort() #12
  unreachable

284:                                              ; preds = %281, %272
  %285 = phi i64 [ %279, %281 ], [ 4611686018427387903, %272 ]
  %286 = shl i64 %285, 2
  %287 = call i8* @_Znwm(i64 %286) #13
  %288 = bitcast i8* %287 to i32*
  br label %289

289:                                              ; preds = %284, %276
  %290 = phi i64 [ %285, %284 ], [ 0, %276 ]
  %291 = phi i32* [ %288, %284 ], [ null, %276 ]
  %292 = getelementptr inbounds i32, i32* %291, i64 %267
  %293 = getelementptr inbounds i32, i32* %291, i64 %290
  %294 = ptrtoint i32* %293 to i64
  store i32 %255, i32* %292, align 4
  %295 = getelementptr inbounds i32, i32* %292, i64 1
  %296 = ptrtoint i32* %295 to i64
  %297 = load i32*, i32** %177, align 8
  %298 = load i64, i64* %174, align 8
  %299 = ptrtoint i32* %297 to i64
  %300 = sub i64 %298, %299
  %301 = ashr exact i64 %300, 2
  %302 = sub nsw i64 0, %301
  %303 = getelementptr inbounds i32, i32* %292, i64 %302
  %304 = ptrtoint i32* %303 to i64
  %305 = icmp sgt i64 %300, 0
  br i1 %305, label %306, label %310

306:                                              ; preds = %289
  %307 = bitcast i32* %303 to i8*
  %308 = bitcast i32* %297 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %307, i8* align 4 %308, i64 %300, i1 false) #10
  %309 = load i32*, i32** %177, align 8
  br label %310

310:                                              ; preds = %306, %289
  %311 = phi i32* [ %297, %289 ], [ %309, %306 ]
  store i64 %304, i64* %175, align 8
  store i64 %296, i64* %174, align 8
  store i64 %294, i64* %176, align 8
  %312 = icmp eq i32* %311, null
  br i1 %312, label %315, label %313

313:                                              ; preds = %310
  %314 = bitcast i32* %311 to i8*
  call void @_ZdlPv(i8* %314) #13
  br label %315

315:                                              ; preds = %260, %310, %313
  %316 = add nuw nsw i32 %254, 1
  %317 = load i32, i32* %167, align 4
  %318 = shl nsw i32 %317, 2
  %319 = icmp slt i32 %316, %318
  br i1 %319, label %253, label %320

320:                                              ; preds = %315, %249, %170, %178
  %321 = load i32*, i32** %141, align 8
  %322 = icmp eq i32* %321, null
  br i1 %322, label %327, label %323

323:                                              ; preds = %320
  %324 = ptrtoint i32* %321 to i64
  %325 = bitcast i32** %142 to i64*
  store i64 %324, i64* %325, align 8
  %326 = bitcast i32* %321 to i8*
  call void @_ZdlPv(i8* %326) #13
  br label %327

327:                                              ; preds = %320, %323
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %140) #10
  %328 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 39, i32 7
  %329 = load i32, i32* %328, align 8
  %330 = icmp eq i32 %329, -1
  br i1 %330, label %331, label %362

331:                                              ; preds = %327
  %332 = load i32, i32* %136, align 4
  %333 = icmp slt i32 %332, 2
  br i1 %333, label %337, label %334

334:                                              ; preds = %331
  %335 = load i8, i8* %24, align 8, !range !2
  %336 = icmp eq i8 %335, 0
  br i1 %336, label %337, label %347

337:                                              ; preds = %334, %331
  %338 = load float, float* %77, align 8
  %339 = fcmp oeq float %338, 1.000000e+02
  br i1 %339, label %340, label %347

340:                                              ; preds = %337
  %341 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 45
  %342 = load i32, i32* %341, align 8
  %343 = icmp eq i32 %342, 0
  br i1 %343, label %344, label %347

344:                                              ; preds = %340
  %345 = load i32, i32* %73, align 8
  %346 = icmp eq i32 %345, 0
  br i1 %346, label %360, label %347

347:                                              ; preds = %344, %340, %337, %334
  %348 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 45
  %349 = load i32, i32* %348, align 8
  %350 = icmp eq i32 %349, 0
  br i1 %350, label %351, label %360

351:                                              ; preds = %347
  %352 = load i32, i32* %73, align 8
  %353 = icmp eq i32 %352, 0
  br i1 %353, label %354, label %360

354:                                              ; preds = %351
  %355 = load float, float* %77, align 8
  %356 = fcmp olt float %355, 1.000000e+02
  br i1 %356, label %360, label %357

357:                                              ; preds = %354
  %358 = icmp slt i32 %332, 7
  %359 = select i1 %358, i32 14, i32 6
  br label %360

360:                                              ; preds = %357, %354, %351, %347, %344
  %361 = phi i32 [ 15, %344 ], [ 6, %347 ], [ 0, %351 ], [ 5, %354 ], [ %359, %357 ]
  store i32 %361, i32* %328, align 8
  br label %362

362:                                              ; preds = %360, %327
  %363 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 14, i32 0, i32 1
  %364 = load i64*, i64** %363, align 8
  %365 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 14, i32 0, i32 2, i32 0, i32 0
  %366 = load i64*, i64** %365, align 8
  %367 = icmp ult i64* %364, %366
  %368 = ptrtoint i64* %366 to i64
  br i1 %367, label %369, label %373

369:                                              ; preds = %362
  store i64 0, i64* %364, align 8
  %370 = getelementptr inbounds i64, i64* %364, i64 1
  %371 = ptrtoint i64* %370 to i64
  %372 = bitcast i64** %363 to i64*
  store i64 %371, i64* %372, align 8
  br label %429

373:                                              ; preds = %362
  %374 = ptrtoint i64* %364 to i64
  %375 = bitcast i64** %363 to i64*
  %376 = bitcast %"class.std::__1::vector"* %87 to i64*
  %377 = load i64, i64* %376, align 8
  %378 = sub i64 %374, %377
  %379 = ashr exact i64 %378, 3
  %380 = add nsw i64 %379, 1
  %381 = icmp ugt i64 %380, 2305843009213693951
  br i1 %381, label %382, label %384

382:                                              ; preds = %373
  %383 = bitcast %"class.std::__1::vector"* %87 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %383) #12
  unreachable

384:                                              ; preds = %373
  %385 = bitcast i64** %365 to i64*
  %386 = sub i64 %368, %377
  %387 = ashr exact i64 %386, 3
  %388 = icmp ult i64 %387, 1152921504606846975
  br i1 %388, label %389, label %397

389:                                              ; preds = %384
  %390 = ashr exact i64 %386, 2
  %391 = icmp ult i64 %390, %380
  %392 = select i1 %391, i64 %380, i64 %390
  %393 = icmp eq i64 %392, 0
  br i1 %393, label %402, label %394

394:                                              ; preds = %389
  %395 = icmp ugt i64 %392, 2305843009213693951
  br i1 %395, label %396, label %397

396:                                              ; preds = %394
  call void @abort() #12
  unreachable

397:                                              ; preds = %394, %384
  %398 = phi i64 [ %392, %394 ], [ 2305843009213693951, %384 ]
  %399 = shl i64 %398, 3
  %400 = call i8* @_Znwm(i64 %399) #13
  %401 = bitcast i8* %400 to i64*
  br label %402

402:                                              ; preds = %397, %389
  %403 = phi i64 [ %398, %397 ], [ 0, %389 ]
  %404 = phi i64* [ %401, %397 ], [ null, %389 ]
  %405 = getelementptr inbounds i64, i64* %404, i64 %379
  %406 = getelementptr inbounds i64, i64* %404, i64 %403
  %407 = ptrtoint i64* %406 to i64
  store i64 0, i64* %405, align 8
  %408 = getelementptr inbounds i64, i64* %405, i64 1
  %409 = ptrtoint i64* %408 to i64
  %410 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %87, i64 0, i32 0, i32 0
  %411 = load i64*, i64** %410, align 8
  %412 = load i64, i64* %375, align 8
  %413 = ptrtoint i64* %411 to i64
  %414 = sub i64 %412, %413
  %415 = ashr exact i64 %414, 3
  %416 = sub nsw i64 0, %415
  %417 = getelementptr inbounds i64, i64* %405, i64 %416
  %418 = ptrtoint i64* %417 to i64
  %419 = icmp sgt i64 %414, 0
  br i1 %419, label %420, label %424

420:                                              ; preds = %402
  %421 = bitcast i64* %417 to i8*
  %422 = bitcast i64* %411 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %421, i8* align 8 %422, i64 %414, i1 false) #10
  %423 = load i64*, i64** %410, align 8
  br label %424

424:                                              ; preds = %420, %402
  %425 = phi i64* [ %411, %402 ], [ %423, %420 ]
  store i64 %418, i64* %376, align 8
  store i64 %409, i64* %375, align 8
  store i64 %407, i64* %385, align 8
  %426 = icmp eq i64* %425, null
  br i1 %426, label %429, label %427

427:                                              ; preds = %424
  %428 = bitcast i64* %425 to i8*
  call void @_ZdlPv(i8* %428) #13
  br label %429

429:                                              ; preds = %369, %424, %427
  %430 = load i8, i8* %24, align 8, !range !2
  %431 = icmp eq i8 %430, 0
  br i1 %431, label %432, label %807

432:                                              ; preds = %429
  %433 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 39, i32 9
  store float 1.000000e+00, float* %433, align 8
  %434 = load i64*, i64** %363, align 8
  %435 = load i64*, i64** %365, align 8
  %436 = icmp ult i64* %434, %435
  %437 = ptrtoint i64* %435 to i64
  br i1 %436, label %438, label %442

438:                                              ; preds = %432
  store i64 1, i64* %434, align 8
  %439 = getelementptr inbounds i64, i64* %434, i64 1
  %440 = ptrtoint i64* %439 to i64
  %441 = bitcast i64** %363 to i64*
  store i64 %440, i64* %441, align 8
  br label %499

442:                                              ; preds = %432
  %443 = ptrtoint i64* %434 to i64
  %444 = bitcast i64** %363 to i64*
  %445 = bitcast %"class.std::__1::vector"* %87 to i64*
  %446 = load i64, i64* %445, align 8
  %447 = sub i64 %443, %446
  %448 = ashr exact i64 %447, 3
  %449 = add nsw i64 %448, 1
  %450 = icmp ugt i64 %449, 2305843009213693951
  br i1 %450, label %451, label %453

451:                                              ; preds = %442
  %452 = bitcast %"class.std::__1::vector"* %87 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %452) #12
  unreachable

453:                                              ; preds = %442
  %454 = bitcast i64** %365 to i64*
  %455 = sub i64 %437, %446
  %456 = ashr exact i64 %455, 3
  %457 = icmp ult i64 %456, 1152921504606846975
  br i1 %457, label %458, label %466

458:                                              ; preds = %453
  %459 = ashr exact i64 %455, 2
  %460 = icmp ult i64 %459, %449
  %461 = select i1 %460, i64 %449, i64 %459
  %462 = icmp eq i64 %461, 0
  br i1 %462, label %471, label %463

463:                                              ; preds = %458
  %464 = icmp ugt i64 %461, 2305843009213693951
  br i1 %464, label %465, label %466

465:                                              ; preds = %463
  call void @abort() #12
  unreachable

466:                                              ; preds = %463, %453
  %467 = phi i64 [ %461, %463 ], [ 2305843009213693951, %453 ]
  %468 = shl i64 %467, 3
  %469 = call i8* @_Znwm(i64 %468) #13
  %470 = bitcast i8* %469 to i64*
  br label %471

471:                                              ; preds = %466, %458
  %472 = phi i64 [ %467, %466 ], [ 0, %458 ]
  %473 = phi i64* [ %470, %466 ], [ null, %458 ]
  %474 = getelementptr inbounds i64, i64* %473, i64 %448
  %475 = getelementptr inbounds i64, i64* %473, i64 %472
  %476 = ptrtoint i64* %475 to i64
  store i64 1, i64* %474, align 8
  %477 = getelementptr inbounds i64, i64* %474, i64 1
  %478 = ptrtoint i64* %477 to i64
  %479 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %87, i64 0, i32 0, i32 0
  %480 = load i64*, i64** %479, align 8
  %481 = load i64, i64* %444, align 8
  %482 = ptrtoint i64* %480 to i64
  %483 = sub i64 %481, %482
  %484 = ashr exact i64 %483, 3
  %485 = sub nsw i64 0, %484
  %486 = getelementptr inbounds i64, i64* %474, i64 %485
  %487 = ptrtoint i64* %486 to i64
  %488 = icmp sgt i64 %483, 0
  br i1 %488, label %489, label %493

489:                                              ; preds = %471
  %490 = bitcast i64* %486 to i8*
  %491 = bitcast i64* %480 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %490, i8* align 8 %491, i64 %483, i1 false) #10
  %492 = load i64*, i64** %479, align 8
  br label %493

493:                                              ; preds = %489, %471
  %494 = phi i64* [ %480, %471 ], [ %492, %489 ]
  store i64 %487, i64* %445, align 8
  store i64 %478, i64* %444, align 8
  store i64 %476, i64* %454, align 8
  %495 = icmp eq i64* %494, null
  br i1 %495, label %499, label %496

496:                                              ; preds = %493
  %497 = bitcast i64* %494 to i8*
  call void @_ZdlPv(i8* %497) #13
  %498 = load i64*, i64** %363, align 8
  br label %499

499:                                              ; preds = %438, %493, %496
  %500 = phi i64* [ %439, %438 ], [ %477, %493 ], [ %498, %496 ]
  %501 = load i64, i64* %92, align 8
  %502 = add i64 %501, 1
  %503 = load i64*, i64** %365, align 8
  %504 = icmp ult i64* %500, %503
  %505 = ptrtoint i64* %503 to i64
  br i1 %504, label %506, label %510

506:                                              ; preds = %499
  store i64 %502, i64* %500, align 8
  %507 = getelementptr inbounds i64, i64* %500, i64 1
  %508 = ptrtoint i64* %507 to i64
  %509 = bitcast i64** %363 to i64*
  store i64 %508, i64* %509, align 8
  br label %567

510:                                              ; preds = %499
  %511 = ptrtoint i64* %500 to i64
  %512 = bitcast i64** %363 to i64*
  %513 = bitcast %"class.std::__1::vector"* %87 to i64*
  %514 = load i64, i64* %513, align 8
  %515 = sub i64 %511, %514
  %516 = ashr exact i64 %515, 3
  %517 = add nsw i64 %516, 1
  %518 = icmp ugt i64 %517, 2305843009213693951
  br i1 %518, label %519, label %521

519:                                              ; preds = %510
  %520 = bitcast %"class.std::__1::vector"* %87 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %520) #12
  unreachable

521:                                              ; preds = %510
  %522 = bitcast i64** %365 to i64*
  %523 = sub i64 %505, %514
  %524 = ashr exact i64 %523, 3
  %525 = icmp ult i64 %524, 1152921504606846975
  br i1 %525, label %526, label %534

526:                                              ; preds = %521
  %527 = ashr exact i64 %523, 2
  %528 = icmp ult i64 %527, %517
  %529 = select i1 %528, i64 %517, i64 %527
  %530 = icmp eq i64 %529, 0
  br i1 %530, label %539, label %531

531:                                              ; preds = %526
  %532 = icmp ugt i64 %529, 2305843009213693951
  br i1 %532, label %533, label %534

533:                                              ; preds = %531
  call void @abort() #12
  unreachable

534:                                              ; preds = %531, %521
  %535 = phi i64 [ %529, %531 ], [ 2305843009213693951, %521 ]
  %536 = shl i64 %535, 3
  %537 = call i8* @_Znwm(i64 %536) #13
  %538 = bitcast i8* %537 to i64*
  br label %539

539:                                              ; preds = %534, %526
  %540 = phi i64 [ %535, %534 ], [ 0, %526 ]
  %541 = phi i64* [ %538, %534 ], [ null, %526 ]
  %542 = getelementptr inbounds i64, i64* %541, i64 %516
  %543 = getelementptr inbounds i64, i64* %541, i64 %540
  %544 = ptrtoint i64* %543 to i64
  store i64 %502, i64* %542, align 8
  %545 = getelementptr inbounds i64, i64* %542, i64 1
  %546 = ptrtoint i64* %545 to i64
  %547 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %87, i64 0, i32 0, i32 0
  %548 = load i64*, i64** %547, align 8
  %549 = load i64, i64* %512, align 8
  %550 = ptrtoint i64* %548 to i64
  %551 = sub i64 %549, %550
  %552 = ashr exact i64 %551, 3
  %553 = sub nsw i64 0, %552
  %554 = getelementptr inbounds i64, i64* %542, i64 %553
  %555 = ptrtoint i64* %554 to i64
  %556 = icmp sgt i64 %551, 0
  br i1 %556, label %557, label %561

557:                                              ; preds = %539
  %558 = bitcast i64* %554 to i8*
  %559 = bitcast i64* %548 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %558, i8* align 8 %559, i64 %551, i1 false) #10
  %560 = load i64*, i64** %547, align 8
  br label %561

561:                                              ; preds = %557, %539
  %562 = phi i64* [ %548, %539 ], [ %560, %557 ]
  store i64 %555, i64* %513, align 8
  store i64 %546, i64* %512, align 8
  store i64 %544, i64* %522, align 8
  %563 = icmp eq i64* %562, null
  br i1 %563, label %567, label %564

564:                                              ; preds = %561
  %565 = bitcast i64* %562 to i8*
  call void @_ZdlPv(i8* %565) #13
  %566 = load i64*, i64** %363, align 8
  br label %567

567:                                              ; preds = %506, %561, %564
  %568 = phi i64* [ %507, %506 ], [ %545, %561 ], [ %566, %564 ]
  %569 = load i64, i64* %92, align 8
  %570 = shl i64 %569, 1
  %571 = or i64 %570, 1
  %572 = load i64*, i64** %365, align 8
  %573 = icmp ult i64* %568, %572
  %574 = ptrtoint i64* %572 to i64
  br i1 %573, label %575, label %579

575:                                              ; preds = %567
  store i64 %571, i64* %568, align 8
  %576 = getelementptr inbounds i64, i64* %568, i64 1
  %577 = ptrtoint i64* %576 to i64
  %578 = bitcast i64** %363 to i64*
  store i64 %577, i64* %578, align 8
  br label %636

579:                                              ; preds = %567
  %580 = ptrtoint i64* %568 to i64
  %581 = bitcast i64** %363 to i64*
  %582 = bitcast %"class.std::__1::vector"* %87 to i64*
  %583 = load i64, i64* %582, align 8
  %584 = sub i64 %580, %583
  %585 = ashr exact i64 %584, 3
  %586 = add nsw i64 %585, 1
  %587 = icmp ugt i64 %586, 2305843009213693951
  br i1 %587, label %588, label %590

588:                                              ; preds = %579
  %589 = bitcast %"class.std::__1::vector"* %87 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %589) #12
  unreachable

590:                                              ; preds = %579
  %591 = bitcast i64** %365 to i64*
  %592 = sub i64 %574, %583
  %593 = ashr exact i64 %592, 3
  %594 = icmp ult i64 %593, 1152921504606846975
  br i1 %594, label %595, label %603

595:                                              ; preds = %590
  %596 = ashr exact i64 %592, 2
  %597 = icmp ult i64 %596, %586
  %598 = select i1 %597, i64 %586, i64 %596
  %599 = icmp eq i64 %598, 0
  br i1 %599, label %608, label %600

600:                                              ; preds = %595
  %601 = icmp ugt i64 %598, 2305843009213693951
  br i1 %601, label %602, label %603

602:                                              ; preds = %600
  call void @abort() #12
  unreachable

603:                                              ; preds = %600, %590
  %604 = phi i64 [ %598, %600 ], [ 2305843009213693951, %590 ]
  %605 = shl i64 %604, 3
  %606 = call i8* @_Znwm(i64 %605) #13
  %607 = bitcast i8* %606 to i64*
  br label %608

608:                                              ; preds = %603, %595
  %609 = phi i64 [ %604, %603 ], [ 0, %595 ]
  %610 = phi i64* [ %607, %603 ], [ null, %595 ]
  %611 = getelementptr inbounds i64, i64* %610, i64 %585
  %612 = getelementptr inbounds i64, i64* %610, i64 %609
  %613 = ptrtoint i64* %612 to i64
  store i64 %571, i64* %611, align 8
  %614 = getelementptr inbounds i64, i64* %611, i64 1
  %615 = ptrtoint i64* %614 to i64
  %616 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %87, i64 0, i32 0, i32 0
  %617 = load i64*, i64** %616, align 8
  %618 = load i64, i64* %581, align 8
  %619 = ptrtoint i64* %617 to i64
  %620 = sub i64 %618, %619
  %621 = ashr exact i64 %620, 3
  %622 = sub nsw i64 0, %621
  %623 = getelementptr inbounds i64, i64* %611, i64 %622
  %624 = ptrtoint i64* %623 to i64
  %625 = icmp sgt i64 %620, 0
  br i1 %625, label %626, label %630

626:                                              ; preds = %608
  %627 = bitcast i64* %623 to i8*
  %628 = bitcast i64* %617 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %627, i8* align 8 %628, i64 %620, i1 false) #10
  %629 = load i64*, i64** %616, align 8
  br label %630

630:                                              ; preds = %626, %608
  %631 = phi i64* [ %617, %608 ], [ %629, %626 ]
  store i64 %624, i64* %582, align 8
  store i64 %615, i64* %581, align 8
  store i64 %613, i64* %591, align 8
  %632 = icmp eq i64* %631, null
  br i1 %632, label %636, label %633

633:                                              ; preds = %630
  %634 = bitcast i64* %631 to i8*
  call void @_ZdlPv(i8* %634) #13
  %635 = load i64*, i64** %363, align 8
  br label %636

636:                                              ; preds = %575, %630, %633
  %637 = phi i64* [ %576, %575 ], [ %614, %630 ], [ %635, %633 ]
  %638 = load i64, i64* %92, align 8
  %639 = mul i64 %638, 3
  %640 = add i64 %639, 1
  %641 = load i64*, i64** %365, align 8
  %642 = icmp ult i64* %637, %641
  %643 = ptrtoint i64* %641 to i64
  br i1 %642, label %644, label %648

644:                                              ; preds = %636
  store i64 %640, i64* %637, align 8
  %645 = getelementptr inbounds i64, i64* %637, i64 1
  %646 = ptrtoint i64* %645 to i64
  %647 = bitcast i64** %363 to i64*
  store i64 %646, i64* %647, align 8
  br label %705

648:                                              ; preds = %636
  %649 = ptrtoint i64* %637 to i64
  %650 = bitcast i64** %363 to i64*
  %651 = bitcast %"class.std::__1::vector"* %87 to i64*
  %652 = load i64, i64* %651, align 8
  %653 = sub i64 %649, %652
  %654 = ashr exact i64 %653, 3
  %655 = add nsw i64 %654, 1
  %656 = icmp ugt i64 %655, 2305843009213693951
  br i1 %656, label %657, label %659

657:                                              ; preds = %648
  %658 = bitcast %"class.std::__1::vector"* %87 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %658) #12
  unreachable

659:                                              ; preds = %648
  %660 = bitcast i64** %365 to i64*
  %661 = sub i64 %643, %652
  %662 = ashr exact i64 %661, 3
  %663 = icmp ult i64 %662, 1152921504606846975
  br i1 %663, label %664, label %672

664:                                              ; preds = %659
  %665 = ashr exact i64 %661, 2
  %666 = icmp ult i64 %665, %655
  %667 = select i1 %666, i64 %655, i64 %665
  %668 = icmp eq i64 %667, 0
  br i1 %668, label %677, label %669

669:                                              ; preds = %664
  %670 = icmp ugt i64 %667, 2305843009213693951
  br i1 %670, label %671, label %672

671:                                              ; preds = %669
  call void @abort() #12
  unreachable

672:                                              ; preds = %669, %659
  %673 = phi i64 [ %667, %669 ], [ 2305843009213693951, %659 ]
  %674 = shl i64 %673, 3
  %675 = call i8* @_Znwm(i64 %674) #13
  %676 = bitcast i8* %675 to i64*
  br label %677

677:                                              ; preds = %672, %664
  %678 = phi i64 [ %673, %672 ], [ 0, %664 ]
  %679 = phi i64* [ %676, %672 ], [ null, %664 ]
  %680 = getelementptr inbounds i64, i64* %679, i64 %654
  %681 = getelementptr inbounds i64, i64* %679, i64 %678
  %682 = ptrtoint i64* %681 to i64
  store i64 %640, i64* %680, align 8
  %683 = getelementptr inbounds i64, i64* %680, i64 1
  %684 = ptrtoint i64* %683 to i64
  %685 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %87, i64 0, i32 0, i32 0
  %686 = load i64*, i64** %685, align 8
  %687 = load i64, i64* %650, align 8
  %688 = ptrtoint i64* %686 to i64
  %689 = sub i64 %687, %688
  %690 = ashr exact i64 %689, 3
  %691 = sub nsw i64 0, %690
  %692 = getelementptr inbounds i64, i64* %680, i64 %691
  %693 = ptrtoint i64* %692 to i64
  %694 = icmp sgt i64 %689, 0
  br i1 %694, label %695, label %699

695:                                              ; preds = %677
  %696 = bitcast i64* %692 to i8*
  %697 = bitcast i64* %686 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %696, i8* align 8 %697, i64 %689, i1 false) #10
  %698 = load i64*, i64** %685, align 8
  br label %699

699:                                              ; preds = %695, %677
  %700 = phi i64* [ %686, %677 ], [ %698, %695 ]
  store i64 %693, i64* %651, align 8
  store i64 %684, i64* %650, align 8
  store i64 %682, i64* %660, align 8
  %701 = icmp eq i64* %700, null
  br i1 %701, label %705, label %702

702:                                              ; preds = %699
  %703 = bitcast i64* %700 to i8*
  call void @_ZdlPv(i8* %703) #13
  %704 = load i64*, i64** %363, align 8
  br label %705

705:                                              ; preds = %644, %699, %702
  %706 = phi i64* [ %645, %644 ], [ %683, %699 ], [ %704, %702 ]
  %707 = load i64, i64* %92, align 8
  %708 = mul i64 %707, 3
  %709 = add i64 %708, 18
  %710 = load i64*, i64** %365, align 8
  %711 = icmp ult i64* %706, %710
  %712 = ptrtoint i64* %710 to i64
  br i1 %711, label %713, label %717

713:                                              ; preds = %705
  store i64 %709, i64* %706, align 8
  %714 = getelementptr inbounds i64, i64* %706, i64 1
  %715 = ptrtoint i64* %714 to i64
  %716 = bitcast i64** %363 to i64*
  store i64 %715, i64* %716, align 8
  br label %773

717:                                              ; preds = %705
  %718 = ptrtoint i64* %706 to i64
  %719 = bitcast i64** %363 to i64*
  %720 = bitcast %"class.std::__1::vector"* %87 to i64*
  %721 = load i64, i64* %720, align 8
  %722 = sub i64 %718, %721
  %723 = ashr exact i64 %722, 3
  %724 = add nsw i64 %723, 1
  %725 = icmp ugt i64 %724, 2305843009213693951
  br i1 %725, label %726, label %728

726:                                              ; preds = %717
  %727 = bitcast %"class.std::__1::vector"* %87 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %727) #12
  unreachable

728:                                              ; preds = %717
  %729 = bitcast i64** %365 to i64*
  %730 = sub i64 %712, %721
  %731 = ashr exact i64 %730, 3
  %732 = icmp ult i64 %731, 1152921504606846975
  br i1 %732, label %733, label %741

733:                                              ; preds = %728
  %734 = ashr exact i64 %730, 2
  %735 = icmp ult i64 %734, %724
  %736 = select i1 %735, i64 %724, i64 %734
  %737 = icmp eq i64 %736, 0
  br i1 %737, label %746, label %738

738:                                              ; preds = %733
  %739 = icmp ugt i64 %736, 2305843009213693951
  br i1 %739, label %740, label %741

740:                                              ; preds = %738
  call void @abort() #12
  unreachable

741:                                              ; preds = %738, %728
  %742 = phi i64 [ %736, %738 ], [ 2305843009213693951, %728 ]
  %743 = shl i64 %742, 3
  %744 = call i8* @_Znwm(i64 %743) #13
  %745 = bitcast i8* %744 to i64*
  br label %746

746:                                              ; preds = %741, %733
  %747 = phi i64 [ %742, %741 ], [ 0, %733 ]
  %748 = phi i64* [ %745, %741 ], [ null, %733 ]
  %749 = getelementptr inbounds i64, i64* %748, i64 %723
  %750 = getelementptr inbounds i64, i64* %748, i64 %747
  %751 = ptrtoint i64* %750 to i64
  store i64 %709, i64* %749, align 8
  %752 = getelementptr inbounds i64, i64* %749, i64 1
  %753 = ptrtoint i64* %752 to i64
  %754 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %87, i64 0, i32 0, i32 0
  %755 = load i64*, i64** %754, align 8
  %756 = load i64, i64* %719, align 8
  %757 = ptrtoint i64* %755 to i64
  %758 = sub i64 %756, %757
  %759 = ashr exact i64 %758, 3
  %760 = sub nsw i64 0, %759
  %761 = getelementptr inbounds i64, i64* %749, i64 %760
  %762 = ptrtoint i64* %761 to i64
  %763 = icmp sgt i64 %758, 0
  br i1 %763, label %764, label %768

764:                                              ; preds = %746
  %765 = bitcast i64* %761 to i8*
  %766 = bitcast i64* %755 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %765, i8* align 8 %766, i64 %758, i1 false) #10
  %767 = load i64*, i64** %754, align 8
  br label %768

768:                                              ; preds = %764, %746
  %769 = phi i64* [ %755, %746 ], [ %767, %764 ]
  store i64 %762, i64* %720, align 8
  store i64 %753, i64* %719, align 8
  store i64 %751, i64* %729, align 8
  %770 = icmp eq i64* %769, null
  br i1 %770, label %773, label %771

771:                                              ; preds = %768
  %772 = bitcast i64* %769 to i8*
  call void @_ZdlPv(i8* %772) #13
  br label %773

773:                                              ; preds = %713, %768, %771
  %774 = load i64, i64* %92, align 8
  %775 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 0, i32 0, i32 1
  %776 = bitcast i64** %775 to i64*
  %777 = load i64, i64* %776, align 8
  %778 = bitcast %"class.jxl::ModularFrameEncoder"* %0 to i64*
  %779 = load i64, i64* %778, align 8
  %780 = sub i64 %777, %779
  %781 = ashr exact i64 %780, 3
  %782 = icmp ugt i64 %774, %781
  %783 = inttoptr i64 %779 to i64*
  br i1 %782, label %784, label %787

784:                                              ; preds = %773
  %785 = sub i64 %774, %781
  call void @_ZNSt3__16vectorImNS_9allocatorImEEE8__appendEm(%"class.std::__1::vector"* %5, i64 %785) #10
  %786 = load i64, i64* %92, align 8
  br label %791

787:                                              ; preds = %773
  %788 = icmp ult i64 %774, %781
  br i1 %788, label %789, label %791

789:                                              ; preds = %787
  %790 = getelementptr inbounds i64, i64* %783, i64 %774
  store i64* %790, i64** %775, align 8
  br label %791

791:                                              ; preds = %784, %787, %789
  %792 = phi i64 [ %786, %784 ], [ %774, %787 ], [ %774, %789 ]
  %793 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 1, i32 0, i32 1
  %794 = bitcast i8** %793 to i64*
  %795 = load i64, i64* %794, align 8
  %796 = bitcast %"class.std::__1::vector.1"* %6 to i64*
  %797 = load i64, i64* %796, align 8
  %798 = sub i64 %795, %797
  %799 = icmp ugt i64 %792, %798
  %800 = inttoptr i64 %797 to i8*
  br i1 %799, label %801, label %803

801:                                              ; preds = %791
  %802 = sub i64 %792, %798
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector.1"* %6, i64 %802) #10
  br label %807

803:                                              ; preds = %791
  %804 = icmp ult i64 %792, %798
  br i1 %804, label %805, label %807

805:                                              ; preds = %803
  %806 = getelementptr inbounds i8, i8* %800, i64 %792
  store i8* %806, i8** %793, align 8
  br label %807

807:                                              ; preds = %805, %803, %801, %429
  %808 = load i64*, i64** %363, align 8
  %809 = load i64*, i64** %365, align 8
  %810 = icmp eq i64* %808, %809
  %811 = ptrtoint i64* %809 to i64
  br i1 %810, label %816, label %812

812:                                              ; preds = %807
  store i64 %99, i64* %808, align 8
  %813 = getelementptr inbounds i64, i64* %808, i64 1
  %814 = ptrtoint i64* %813 to i64
  %815 = bitcast i64** %363 to i64*
  store i64 %814, i64* %815, align 8
  br label %872

816:                                              ; preds = %807
  %817 = ptrtoint i64* %808 to i64
  %818 = bitcast i64** %363 to i64*
  %819 = bitcast %"class.std::__1::vector"* %87 to i64*
  %820 = load i64, i64* %819, align 8
  %821 = sub i64 %817, %820
  %822 = ashr exact i64 %821, 3
  %823 = add nsw i64 %822, 1
  %824 = icmp ugt i64 %823, 2305843009213693951
  br i1 %824, label %825, label %827

825:                                              ; preds = %816
  %826 = bitcast %"class.std::__1::vector"* %87 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %826) #12
  unreachable

827:                                              ; preds = %816
  %828 = bitcast i64** %365 to i64*
  %829 = sub i64 %811, %820
  %830 = ashr exact i64 %829, 3
  %831 = icmp ult i64 %830, 1152921504606846975
  br i1 %831, label %832, label %840

832:                                              ; preds = %827
  %833 = ashr exact i64 %829, 2
  %834 = icmp ult i64 %833, %823
  %835 = select i1 %834, i64 %823, i64 %833
  %836 = icmp eq i64 %835, 0
  br i1 %836, label %845, label %837

837:                                              ; preds = %832
  %838 = icmp ugt i64 %835, 2305843009213693951
  br i1 %838, label %839, label %840

839:                                              ; preds = %837
  call void @abort() #12
  unreachable

840:                                              ; preds = %837, %827
  %841 = phi i64 [ %835, %837 ], [ 2305843009213693951, %827 ]
  %842 = shl i64 %841, 3
  %843 = call i8* @_Znwm(i64 %842) #13
  %844 = bitcast i8* %843 to i64*
  br label %845

845:                                              ; preds = %840, %832
  %846 = phi i64 [ %841, %840 ], [ 0, %832 ]
  %847 = phi i64* [ %844, %840 ], [ null, %832 ]
  %848 = getelementptr inbounds i64, i64* %847, i64 %822
  %849 = getelementptr inbounds i64, i64* %847, i64 %846
  %850 = ptrtoint i64* %849 to i64
  store i64 %99, i64* %848, align 8
  %851 = getelementptr inbounds i64, i64* %848, i64 1
  %852 = ptrtoint i64* %851 to i64
  %853 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %87, i64 0, i32 0, i32 0
  %854 = load i64*, i64** %853, align 8
  %855 = load i64, i64* %818, align 8
  %856 = ptrtoint i64* %854 to i64
  %857 = sub i64 %855, %856
  %858 = ashr exact i64 %857, 3
  %859 = sub nsw i64 0, %858
  %860 = getelementptr inbounds i64, i64* %848, i64 %859
  %861 = ptrtoint i64* %860 to i64
  %862 = icmp sgt i64 %857, 0
  br i1 %862, label %863, label %867

863:                                              ; preds = %845
  %864 = bitcast i64* %860 to i8*
  %865 = bitcast i64* %854 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %864, i8* align 8 %865, i64 %857, i1 false) #10
  %866 = load i64*, i64** %853, align 8
  br label %867

867:                                              ; preds = %863, %845
  %868 = phi i64* [ %854, %845 ], [ %866, %863 ]
  store i64 %861, i64* %819, align 8
  store i64 %852, i64* %818, align 8
  store i64 %850, i64* %828, align 8
  %869 = icmp eq i64* %868, null
  br i1 %869, label %872, label %870

870:                                              ; preds = %867
  %871 = bitcast i64* %868 to i8*
  call void @_ZdlPv(i8* %871) #13
  br label %872

872:                                              ; preds = %812, %867, %870
  %873 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 10, i32 16
  %874 = load i64, i64* %873, align 8
  %875 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %26, i64 0, i32 0
  store i64 %874, i64* %875, align 8
  %876 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 3, i32 0, i32 1
  %877 = bitcast %"struct.jxl::ModularOptions"** %876 to i64*
  %878 = load i64, i64* %877, align 8
  %879 = bitcast %"class.std::__1::vector.38"* %8 to i64*
  %880 = load i64, i64* %879, align 8
  %881 = sub i64 %878, %880
  %882 = sdiv exact i64 %881, 88
  %883 = icmp ugt i64 %99, %882
  %884 = inttoptr i64 %880 to %"struct.jxl::ModularOptions"*
  %885 = inttoptr i64 %878 to %"struct.jxl::ModularOptions"*
  br i1 %883, label %886, label %888

886:                                              ; preds = %872
  %887 = sub i64 %99, %882
  call void @_ZNSt3__16vectorIN3jxl14ModularOptionsENS_9allocatorIS2_EEE8__appendEmRKS2_(%"class.std::__1::vector.38"* %8, i64 %887, %"struct.jxl::ModularOptions"* dereferenceable(88) %26) #10
  br label %907

888:                                              ; preds = %872
  %889 = icmp ult i64 %99, %882
  br i1 %889, label %890, label %907

890:                                              ; preds = %888
  %891 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %884, i64 %99
  %892 = icmp eq %"struct.jxl::ModularOptions"* %891, %885
  br i1 %892, label %906, label %893

893:                                              ; preds = %890, %904
  %894 = phi %"struct.jxl::ModularOptions"* [ %895, %904 ], [ %885, %890 ]
  %895 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %894, i64 -1
  %896 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %894, i64 -1, i32 3, i32 0, i32 0
  %897 = load i32*, i32** %896, align 8
  %898 = icmp eq i32* %897, null
  br i1 %898, label %904, label %899

899:                                              ; preds = %893
  %900 = ptrtoint i32* %897 to i64
  %901 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %894, i64 -1, i32 3, i32 0, i32 1
  %902 = bitcast i32** %901 to i64*
  store i64 %900, i64* %902, align 8
  %903 = bitcast i32* %897 to i8*
  call void @_ZdlPv(i8* %903) #13
  br label %904

904:                                              ; preds = %899, %893
  %905 = icmp eq %"struct.jxl::ModularOptions"* %895, %891
  br i1 %905, label %906, label %893

906:                                              ; preds = %904, %890
  store %"struct.jxl::ModularOptions"* %891, %"struct.jxl::ModularOptions"** %876, align 8
  br label %907

907:                                              ; preds = %886, %888, %906
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3jxl11FrameHeader17ToFrameDimensionsEv(%"struct.jxl::FrameDimensions"* noalias sret, %"struct.jxl::FrameHeader"*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 25
  %4 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %3, align 8
  %5 = icmp eq %"struct.jxl::CodecMetadata"* %4, null
  br i1 %5, label %46, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 27
  %8 = load i8, i8* %7, align 8, !range !2
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %4, i64 0, i32 0, i32 19
  %12 = tail call i64 @_ZNK3jxl13PreviewHeader5xsizeEv(%"class.jxl::PreviewHeader"* %11) #10
  br label %16

13:                                               ; preds = %6
  %14 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %4, i64 0, i32 1
  %15 = tail call i64 @_ZNK3jxl10SizeHeader5xsizeEv(%"class.jxl::SizeHeader"* %14) #10
  br label %16

16:                                               ; preds = %10, %13
  %17 = phi i64 [ %15, %13 ], [ %12, %10 ]
  %18 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %3, align 8
  %19 = icmp eq %"struct.jxl::CodecMetadata"* %18, null
  br i1 %19, label %46, label %20

20:                                               ; preds = %16
  %21 = load i8, i8* %7, align 8, !range !2
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %34, label %23

23:                                               ; preds = %20
  %24 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %18, i64 0, i32 0, i32 19, i32 1
  %25 = load i8, i8* %24, align 8, !range !2
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %31, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %18, i64 0, i32 0, i32 19, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = shl i32 %29, 3
  br label %46

31:                                               ; preds = %23
  %32 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %18, i64 0, i32 0, i32 19, i32 3
  %33 = load i32, i32* %32, align 8
  br label %46

34:                                               ; preds = %20
  %35 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %18, i64 0, i32 1, i32 1
  %36 = load i8, i8* %35, align 8, !range !2
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %43, label %38

38:                                               ; preds = %34
  %39 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %18, i64 0, i32 1, i32 2
  %40 = load i32, i32* %39, align 4
  %41 = shl i32 %40, 3
  %42 = add i32 %41, 8
  br label %46

43:                                               ; preds = %34
  %44 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %18, i64 0, i32 1, i32 3
  %45 = load i32, i32* %44, align 8
  br label %46

46:                                               ; preds = %2, %16, %27, %31, %38, %43
  %47 = phi i64 [ %17, %16 ], [ %17, %27 ], [ %17, %31 ], [ %17, %38 ], [ %17, %43 ], [ 0, %2 ]
  %48 = phi i32 [ 0, %16 ], [ %30, %27 ], [ %33, %31 ], [ %42, %38 ], [ %45, %43 ], [ 0, %2 ]
  %49 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 14, i32 0
  %50 = load i32, i32* %49, align 4
  %51 = icmp eq i32 %50, 0
  %52 = zext i32 %50 to i64
  %53 = select i1 %51, i64 %47, i64 %52
  %54 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 14, i32 1
  %55 = load i32, i32* %54, align 4
  %56 = icmp eq i32 %55, 0
  %57 = select i1 %56, i32 %48, i32 %55
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 24
  %60 = load i32, i32* %59, align 4
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %71, label %62

62:                                               ; preds = %46
  %63 = mul i32 %60, 3
  %64 = shl i32 1, %63
  %65 = sext i32 %64 to i64
  %66 = add nsw i64 %65, -1
  %67 = add i64 %66, %53
  %68 = udiv i64 %67, %65
  %69 = add nsw i64 %66, %58
  %70 = udiv i64 %69, %65
  br label %71

71:                                               ; preds = %46, %62
  %72 = phi i64 [ %68, %62 ], [ %53, %46 ]
  %73 = phi i64 [ %70, %62 ], [ %58, %46 ]
  %74 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 4
  %75 = bitcast i64* %74 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %75, i8 -86, i64 96, i1 false)
  %76 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 8
  %77 = load i32, i32* %76, align 8
  %78 = zext i32 %77 to i64
  %79 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 7, i32 2
  %80 = load i8, i8* %79, align 4
  %81 = zext i8 %80 to i64
  %82 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 7, i32 3
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i64
  %85 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 2
  %86 = load i32, i32* %85, align 4
  %87 = icmp eq i32 %86, 1
  %88 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 15
  %89 = load i32, i32* %88, align 4
  %90 = zext i32 %89 to i64
  %91 = shl i64 128, %78
  %92 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 16
  store i64 %91, i64* %92, align 8
  %93 = shl i64 %91, 3
  %94 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 17
  store i64 %93, i64* %94, align 8
  %95 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 2
  store i64 %72, i64* %95, align 8
  %96 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 3
  store i64 %73, i64* %96, align 8
  %97 = add nsw i64 %90, -1
  %98 = add i64 %97, %72
  %99 = udiv i64 %98, %90
  %100 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 0
  store i64 %99, i64* %100, align 8
  %101 = add i64 %97, %73
  %102 = udiv i64 %101, %90
  %103 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 1
  store i64 %102, i64* %103, align 8
  %104 = shl i64 8, %81
  %105 = add i64 %99, -1
  %106 = add i64 %105, %104
  %107 = add nuw nsw i64 %81, 3
  %108 = lshr i64 %106, %107
  %109 = shl i64 %108, %81
  %110 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 8
  store i64 %109, i64* %110, align 8
  %111 = shl i64 8, %84
  %112 = add i64 %102, -1
  %113 = add i64 %112, %111
  %114 = add nuw nsw i64 %84, 3
  %115 = lshr i64 %113, %114
  %116 = shl i64 %115, %84
  %117 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 9
  store i64 %116, i64* %117, align 8
  %118 = shl i64 %109, 3
  %119 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 6
  store i64 %118, i64* %119, align 8
  %120 = shl i64 %116, 3
  %121 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 7
  store i64 %120, i64* %121, align 8
  br i1 %87, label %122, label %123

122:                                              ; preds = %71
  store i64 %99, i64* %119, align 8
  store i64 %102, i64* %121, align 8
  br label %123

123:                                              ; preds = %71, %122
  %124 = phi i64 [ %102, %122 ], [ %120, %71 ]
  %125 = phi i64 [ %99, %122 ], [ %118, %71 ]
  %126 = mul i64 %125, %90
  %127 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 4
  store i64 %126, i64* %127, align 8
  %128 = mul i64 %124, %90
  %129 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 5
  store i64 %128, i64* %129, align 8
  %130 = add i64 %105, %91
  %131 = add nuw nsw i64 %78, 7
  %132 = lshr i64 %130, %131
  %133 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 10
  store i64 %132, i64* %133, align 8
  %134 = add i64 %112, %91
  %135 = lshr i64 %134, %131
  %136 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 11
  store i64 %135, i64* %136, align 8
  %137 = add i64 %91, -1
  %138 = add i64 %109, %137
  %139 = lshr i64 %138, %131
  %140 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 12
  store i64 %139, i64* %140, align 8
  %141 = add i64 %116, %137
  %142 = lshr i64 %141, %131
  %143 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 13
  store i64 %142, i64* %143, align 8
  %144 = mul i64 %135, %132
  %145 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 14
  store i64 %144, i64* %145, align 8
  %146 = mul i64 %142, %139
  %147 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 15
  store i64 %146, i64* %147, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIjNS_9allocatorIjEEE6assignINS_11__wrap_iterIPjEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(%"class.std::__1::vector.40"*, i32*, i32*) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint i32* %1 to i64
  %5 = ptrtoint i32* %2 to i64
  %6 = sub i64 %5, %4
  %7 = ashr exact i64 %6, 2
  %8 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast i32** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector.40"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 2
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to i32*
  br i1 %15, label %203, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %0, i64 0, i32 0, i32 1
  %19 = bitcast i32** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = ashr exact i64 %21, 2
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds i32, i32* %1, i64 %22
  %25 = select i1 %23, i32* %24, i32* %2
  %26 = ptrtoint i32* %25 to i64
  %27 = sub i64 %26, %4
  %28 = ashr exact i64 %27, 2
  %29 = icmp eq i64 %27, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %17
  %31 = inttoptr i64 %12 to i8*
  %32 = bitcast i32* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %31, i8* align 4 %32, i64 %27, i1 false) #10
  br label %33

33:                                               ; preds = %17, %30
  br i1 %23, label %34, label %201

34:                                               ; preds = %33
  %35 = load i64, i64* %19, align 8
  %36 = icmp eq i32* %25, %2
  br i1 %36, label %199, label %37

37:                                               ; preds = %34
  %38 = inttoptr i64 %35 to i32*
  %39 = xor i64 %22, -1
  %40 = getelementptr i32, i32* %2, i64 %39
  %41 = ptrtoint i32* %40 to i64
  %42 = sub i64 %41, %4
  %43 = lshr i64 %42, 2
  %44 = add nuw nsw i64 %43, 1
  %45 = icmp ult i64 %44, 8
  br i1 %45, label %143, label %46

46:                                               ; preds = %37
  %47 = inttoptr i64 %35 to i8*
  %48 = xor i64 %22, -1
  %49 = getelementptr i32, i32* %2, i64 %48
  %50 = ptrtoint i32* %49 to i64
  %51 = sub i64 %50, %4
  %52 = lshr i64 %51, 2
  %53 = add nuw nsw i64 %52, 1
  %54 = getelementptr i32, i32* %38, i64 %53
  %55 = add nsw i64 %22, %52
  %56 = add i64 %55, 1
  %57 = getelementptr i32, i32* %1, i64 %56
  %58 = bitcast i32* %57 to i8*
  %59 = icmp ult i8* %47, %58
  %60 = icmp ult i32* %24, %54
  %61 = and i1 %59, %60
  br i1 %61, label %143, label %62

62:                                               ; preds = %46
  %63 = and i64 %44, 9223372036854775800
  %64 = getelementptr i32, i32* %38, i64 %63
  %65 = getelementptr i32, i32* %24, i64 %63
  %66 = add nsw i64 %63, -8
  %67 = lshr exact i64 %66, 3
  %68 = add nuw nsw i64 %67, 1
  %69 = and i64 %68, 3
  %70 = icmp ult i64 %66, 24
  br i1 %70, label %122, label %71

71:                                               ; preds = %62
  %72 = sub nsw i64 %68, %69
  br label %73

73:                                               ; preds = %73, %71
  %74 = phi i64 [ 0, %71 ], [ %119, %73 ]
  %75 = phi i64 [ %72, %71 ], [ %120, %73 ]
  %76 = getelementptr i32, i32* %38, i64 %74
  %77 = getelementptr i32, i32* %24, i64 %74
  %78 = bitcast i32* %77 to <4 x i32>*
  %79 = load <4 x i32>, <4 x i32>* %78, align 4, !alias.scope !3
  %80 = getelementptr i32, i32* %77, i64 4
  %81 = bitcast i32* %80 to <4 x i32>*
  %82 = load <4 x i32>, <4 x i32>* %81, align 4, !alias.scope !3
  %83 = bitcast i32* %76 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %83, align 4, !alias.scope !6, !noalias !3
  %84 = getelementptr i32, i32* %76, i64 4
  %85 = bitcast i32* %84 to <4 x i32>*
  store <4 x i32> %82, <4 x i32>* %85, align 4, !alias.scope !6, !noalias !3
  %86 = or i64 %74, 8
  %87 = getelementptr i32, i32* %38, i64 %86
  %88 = getelementptr i32, i32* %24, i64 %86
  %89 = bitcast i32* %88 to <4 x i32>*
  %90 = load <4 x i32>, <4 x i32>* %89, align 4, !alias.scope !3
  %91 = getelementptr i32, i32* %88, i64 4
  %92 = bitcast i32* %91 to <4 x i32>*
  %93 = load <4 x i32>, <4 x i32>* %92, align 4, !alias.scope !3
  %94 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> %90, <4 x i32>* %94, align 4, !alias.scope !6, !noalias !3
  %95 = getelementptr i32, i32* %87, i64 4
  %96 = bitcast i32* %95 to <4 x i32>*
  store <4 x i32> %93, <4 x i32>* %96, align 4, !alias.scope !6, !noalias !3
  %97 = or i64 %74, 16
  %98 = getelementptr i32, i32* %38, i64 %97
  %99 = getelementptr i32, i32* %24, i64 %97
  %100 = bitcast i32* %99 to <4 x i32>*
  %101 = load <4 x i32>, <4 x i32>* %100, align 4, !alias.scope !3
  %102 = getelementptr i32, i32* %99, i64 4
  %103 = bitcast i32* %102 to <4 x i32>*
  %104 = load <4 x i32>, <4 x i32>* %103, align 4, !alias.scope !3
  %105 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %101, <4 x i32>* %105, align 4, !alias.scope !6, !noalias !3
  %106 = getelementptr i32, i32* %98, i64 4
  %107 = bitcast i32* %106 to <4 x i32>*
  store <4 x i32> %104, <4 x i32>* %107, align 4, !alias.scope !6, !noalias !3
  %108 = or i64 %74, 24
  %109 = getelementptr i32, i32* %38, i64 %108
  %110 = getelementptr i32, i32* %24, i64 %108
  %111 = bitcast i32* %110 to <4 x i32>*
  %112 = load <4 x i32>, <4 x i32>* %111, align 4, !alias.scope !3
  %113 = getelementptr i32, i32* %110, i64 4
  %114 = bitcast i32* %113 to <4 x i32>*
  %115 = load <4 x i32>, <4 x i32>* %114, align 4, !alias.scope !3
  %116 = bitcast i32* %109 to <4 x i32>*
  store <4 x i32> %112, <4 x i32>* %116, align 4, !alias.scope !6, !noalias !3
  %117 = getelementptr i32, i32* %109, i64 4
  %118 = bitcast i32* %117 to <4 x i32>*
  store <4 x i32> %115, <4 x i32>* %118, align 4, !alias.scope !6, !noalias !3
  %119 = add i64 %74, 32
  %120 = add i64 %75, -4
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %122, label %73, !llvm.loop !8

122:                                              ; preds = %73, %62
  %123 = phi i64 [ 0, %62 ], [ %119, %73 ]
  %124 = icmp eq i64 %69, 0
  br i1 %124, label %141, label %125

125:                                              ; preds = %122, %125
  %126 = phi i64 [ %138, %125 ], [ %123, %122 ]
  %127 = phi i64 [ %139, %125 ], [ %69, %122 ]
  %128 = getelementptr i32, i32* %38, i64 %126
  %129 = getelementptr i32, i32* %24, i64 %126
  %130 = bitcast i32* %129 to <4 x i32>*
  %131 = load <4 x i32>, <4 x i32>* %130, align 4, !alias.scope !3
  %132 = getelementptr i32, i32* %129, i64 4
  %133 = bitcast i32* %132 to <4 x i32>*
  %134 = load <4 x i32>, <4 x i32>* %133, align 4, !alias.scope !3
  %135 = bitcast i32* %128 to <4 x i32>*
  store <4 x i32> %131, <4 x i32>* %135, align 4, !alias.scope !6, !noalias !3
  %136 = getelementptr i32, i32* %128, i64 4
  %137 = bitcast i32* %136 to <4 x i32>*
  store <4 x i32> %134, <4 x i32>* %137, align 4, !alias.scope !6, !noalias !3
  %138 = add i64 %126, 8
  %139 = add i64 %127, -1
  %140 = icmp eq i64 %139, 0
  br i1 %140, label %141, label %125, !llvm.loop !10

141:                                              ; preds = %125, %122
  %142 = icmp eq i64 %44, %63
  br i1 %142, label %196, label %143

143:                                              ; preds = %141, %46, %37
  %144 = phi i32* [ %38, %46 ], [ %38, %37 ], [ %64, %141 ]
  %145 = phi i32* [ %24, %46 ], [ %24, %37 ], [ %65, %141 ]
  %146 = ptrtoint i32* %145 to i64
  %147 = getelementptr i32, i32* %2, i64 -1
  %148 = ptrtoint i32* %147 to i64
  %149 = sub i64 %148, %146
  %150 = lshr i64 %149, 2
  %151 = add nuw nsw i64 %150, 1
  %152 = and i64 %151, 7
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %163, label %154

154:                                              ; preds = %143, %154
  %155 = phi i32* [ %160, %154 ], [ %144, %143 ]
  %156 = phi i32* [ %159, %154 ], [ %145, %143 ]
  %157 = phi i64 [ %161, %154 ], [ %152, %143 ]
  %158 = load i32, i32* %156, align 4
  store i32 %158, i32* %155, align 4
  %159 = getelementptr inbounds i32, i32* %156, i64 1
  %160 = getelementptr inbounds i32, i32* %155, i64 1
  %161 = add i64 %157, -1
  %162 = icmp eq i64 %161, 0
  br i1 %162, label %163, label %154, !llvm.loop !12

163:                                              ; preds = %154, %143
  %164 = phi i32* [ undef, %143 ], [ %160, %154 ]
  %165 = phi i32* [ %144, %143 ], [ %160, %154 ]
  %166 = phi i32* [ %145, %143 ], [ %159, %154 ]
  %167 = icmp ult i64 %149, 28
  br i1 %167, label %196, label %168

168:                                              ; preds = %163, %168
  %169 = phi i32* [ %194, %168 ], [ %165, %163 ]
  %170 = phi i32* [ %193, %168 ], [ %166, %163 ]
  %171 = load i32, i32* %170, align 4
  store i32 %171, i32* %169, align 4
  %172 = getelementptr inbounds i32, i32* %170, i64 1
  %173 = getelementptr inbounds i32, i32* %169, i64 1
  %174 = load i32, i32* %172, align 4
  store i32 %174, i32* %173, align 4
  %175 = getelementptr inbounds i32, i32* %170, i64 2
  %176 = getelementptr inbounds i32, i32* %169, i64 2
  %177 = load i32, i32* %175, align 4
  store i32 %177, i32* %176, align 4
  %178 = getelementptr inbounds i32, i32* %170, i64 3
  %179 = getelementptr inbounds i32, i32* %169, i64 3
  %180 = load i32, i32* %178, align 4
  store i32 %180, i32* %179, align 4
  %181 = getelementptr inbounds i32, i32* %170, i64 4
  %182 = getelementptr inbounds i32, i32* %169, i64 4
  %183 = load i32, i32* %181, align 4
  store i32 %183, i32* %182, align 4
  %184 = getelementptr inbounds i32, i32* %170, i64 5
  %185 = getelementptr inbounds i32, i32* %169, i64 5
  %186 = load i32, i32* %184, align 4
  store i32 %186, i32* %185, align 4
  %187 = getelementptr inbounds i32, i32* %170, i64 6
  %188 = getelementptr inbounds i32, i32* %169, i64 6
  %189 = load i32, i32* %187, align 4
  store i32 %189, i32* %188, align 4
  %190 = getelementptr inbounds i32, i32* %170, i64 7
  %191 = getelementptr inbounds i32, i32* %169, i64 7
  %192 = load i32, i32* %190, align 4
  store i32 %192, i32* %191, align 4
  %193 = getelementptr inbounds i32, i32* %170, i64 8
  %194 = getelementptr inbounds i32, i32* %169, i64 8
  %195 = icmp eq i32* %193, %2
  br i1 %195, label %196, label %168, !llvm.loop !13

196:                                              ; preds = %163, %168, %141
  %197 = phi i32* [ %64, %141 ], [ %164, %163 ], [ %194, %168 ]
  %198 = ptrtoint i32* %197 to i64
  br label %199

199:                                              ; preds = %34, %196
  %200 = phi i64 [ %35, %34 ], [ %198, %196 ]
  store i64 %200, i64* %19, align 8
  br label %340

201:                                              ; preds = %33
  %202 = getelementptr inbounds i32, i32* %16, i64 %28
  store i32* %202, i32** %18, align 8
  br label %340

203:                                              ; preds = %3
  %204 = icmp eq i64 %12, 0
  br i1 %204, label %210, label %205

205:                                              ; preds = %203
  %206 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %0, i64 0, i32 0, i32 1
  %207 = bitcast i32** %206 to i64*
  store i64 %12, i64* %207, align 8
  %208 = inttoptr i64 %12 to i8*
  tail call void @_ZdlPv(i8* %208) #13
  %209 = bitcast %"class.std::__1::vector.40"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %209, i8 0, i64 24, i1 false) #10
  br label %210

210:                                              ; preds = %203, %205
  %211 = phi i64 [ %10, %203 ], [ 0, %205 ]
  %212 = icmp ugt i64 %7, 4611686018427387903
  br i1 %212, label %213, label %215

213:                                              ; preds = %210
  %214 = bitcast %"class.std::__1::vector.40"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %214) #12
  unreachable

215:                                              ; preds = %210
  %216 = ashr exact i64 %211, 2
  %217 = icmp ult i64 %216, 2305843009213693951
  br i1 %217, label %218, label %225

218:                                              ; preds = %215
  %219 = ashr exact i64 %211, 1
  %220 = icmp ult i64 %219, %7
  br i1 %220, label %225, label %221

221:                                              ; preds = %218
  %222 = icmp ugt i64 %219, 4611686018427387903
  br i1 %222, label %223, label %225

223:                                              ; preds = %221
  %224 = bitcast %"class.std::__1::vector.40"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %224) #12
  unreachable

225:                                              ; preds = %218, %215, %221
  %226 = phi i64 [ %219, %221 ], [ 4611686018427387903, %215 ], [ %7, %218 ]
  %227 = shl i64 %226, 2
  %228 = tail call i8* @_Znwm(i64 %227) #13
  %229 = bitcast i8* %228 to i32*
  %230 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %0, i64 0, i32 0, i32 1
  %231 = bitcast i32** %230 to i8**
  store i8* %228, i8** %231, align 8
  %232 = bitcast %"class.std::__1::vector.40"* %0 to i8**
  store i8* %228, i8** %232, align 8
  %233 = getelementptr inbounds i32, i32* %229, i64 %226
  store i32* %233, i32** %8, align 8
  %234 = bitcast i32** %230 to i64*
  %235 = ptrtoint i8* %228 to i64
  %236 = icmp eq i32* %1, %2
  br i1 %236, label %338, label %237

237:                                              ; preds = %225
  %238 = getelementptr i32, i32* %2, i64 -1
  %239 = ptrtoint i32* %238 to i64
  %240 = sub i64 %239, %4
  %241 = lshr i64 %240, 2
  %242 = add nuw nsw i64 %241, 1
  %243 = icmp ult i64 %242, 8
  br i1 %243, label %325, label %244

244:                                              ; preds = %237
  %245 = and i64 %242, 9223372036854775800
  %246 = getelementptr i32, i32* %229, i64 %245
  %247 = getelementptr i32, i32* %1, i64 %245
  %248 = add nsw i64 %245, -8
  %249 = lshr exact i64 %248, 3
  %250 = add nuw nsw i64 %249, 1
  %251 = and i64 %250, 3
  %252 = icmp ult i64 %248, 24
  br i1 %252, label %304, label %253

253:                                              ; preds = %244
  %254 = sub nsw i64 %250, %251
  br label %255

255:                                              ; preds = %255, %253
  %256 = phi i64 [ 0, %253 ], [ %301, %255 ]
  %257 = phi i64 [ %254, %253 ], [ %302, %255 ]
  %258 = getelementptr i32, i32* %229, i64 %256
  %259 = getelementptr i32, i32* %1, i64 %256
  %260 = bitcast i32* %259 to <4 x i32>*
  %261 = load <4 x i32>, <4 x i32>* %260, align 4
  %262 = getelementptr i32, i32* %259, i64 4
  %263 = bitcast i32* %262 to <4 x i32>*
  %264 = load <4 x i32>, <4 x i32>* %263, align 4
  %265 = bitcast i32* %258 to <4 x i32>*
  store <4 x i32> %261, <4 x i32>* %265, align 4
  %266 = getelementptr i32, i32* %258, i64 4
  %267 = bitcast i32* %266 to <4 x i32>*
  store <4 x i32> %264, <4 x i32>* %267, align 4
  %268 = or i64 %256, 8
  %269 = getelementptr i32, i32* %229, i64 %268
  %270 = getelementptr i32, i32* %1, i64 %268
  %271 = bitcast i32* %270 to <4 x i32>*
  %272 = load <4 x i32>, <4 x i32>* %271, align 4
  %273 = getelementptr i32, i32* %270, i64 4
  %274 = bitcast i32* %273 to <4 x i32>*
  %275 = load <4 x i32>, <4 x i32>* %274, align 4
  %276 = bitcast i32* %269 to <4 x i32>*
  store <4 x i32> %272, <4 x i32>* %276, align 4
  %277 = getelementptr i32, i32* %269, i64 4
  %278 = bitcast i32* %277 to <4 x i32>*
  store <4 x i32> %275, <4 x i32>* %278, align 4
  %279 = or i64 %256, 16
  %280 = getelementptr i32, i32* %229, i64 %279
  %281 = getelementptr i32, i32* %1, i64 %279
  %282 = bitcast i32* %281 to <4 x i32>*
  %283 = load <4 x i32>, <4 x i32>* %282, align 4
  %284 = getelementptr i32, i32* %281, i64 4
  %285 = bitcast i32* %284 to <4 x i32>*
  %286 = load <4 x i32>, <4 x i32>* %285, align 4
  %287 = bitcast i32* %280 to <4 x i32>*
  store <4 x i32> %283, <4 x i32>* %287, align 4
  %288 = getelementptr i32, i32* %280, i64 4
  %289 = bitcast i32* %288 to <4 x i32>*
  store <4 x i32> %286, <4 x i32>* %289, align 4
  %290 = or i64 %256, 24
  %291 = getelementptr i32, i32* %229, i64 %290
  %292 = getelementptr i32, i32* %1, i64 %290
  %293 = bitcast i32* %292 to <4 x i32>*
  %294 = load <4 x i32>, <4 x i32>* %293, align 4
  %295 = getelementptr i32, i32* %292, i64 4
  %296 = bitcast i32* %295 to <4 x i32>*
  %297 = load <4 x i32>, <4 x i32>* %296, align 4
  %298 = bitcast i32* %291 to <4 x i32>*
  store <4 x i32> %294, <4 x i32>* %298, align 4
  %299 = getelementptr i32, i32* %291, i64 4
  %300 = bitcast i32* %299 to <4 x i32>*
  store <4 x i32> %297, <4 x i32>* %300, align 4
  %301 = add i64 %256, 32
  %302 = add i64 %257, -4
  %303 = icmp eq i64 %302, 0
  br i1 %303, label %304, label %255, !llvm.loop !14

304:                                              ; preds = %255, %244
  %305 = phi i64 [ 0, %244 ], [ %301, %255 ]
  %306 = icmp eq i64 %251, 0
  br i1 %306, label %323, label %307

307:                                              ; preds = %304, %307
  %308 = phi i64 [ %320, %307 ], [ %305, %304 ]
  %309 = phi i64 [ %321, %307 ], [ %251, %304 ]
  %310 = getelementptr i32, i32* %229, i64 %308
  %311 = getelementptr i32, i32* %1, i64 %308
  %312 = bitcast i32* %311 to <4 x i32>*
  %313 = load <4 x i32>, <4 x i32>* %312, align 4
  %314 = getelementptr i32, i32* %311, i64 4
  %315 = bitcast i32* %314 to <4 x i32>*
  %316 = load <4 x i32>, <4 x i32>* %315, align 4
  %317 = bitcast i32* %310 to <4 x i32>*
  store <4 x i32> %313, <4 x i32>* %317, align 4
  %318 = getelementptr i32, i32* %310, i64 4
  %319 = bitcast i32* %318 to <4 x i32>*
  store <4 x i32> %316, <4 x i32>* %319, align 4
  %320 = add i64 %308, 8
  %321 = add i64 %309, -1
  %322 = icmp eq i64 %321, 0
  br i1 %322, label %323, label %307, !llvm.loop !15

323:                                              ; preds = %307, %304
  %324 = icmp eq i64 %242, %245
  br i1 %324, label %335, label %325

325:                                              ; preds = %323, %237
  %326 = phi i32* [ %229, %237 ], [ %246, %323 ]
  %327 = phi i32* [ %1, %237 ], [ %247, %323 ]
  br label %328

328:                                              ; preds = %325, %328
  %329 = phi i32* [ %333, %328 ], [ %326, %325 ]
  %330 = phi i32* [ %332, %328 ], [ %327, %325 ]
  %331 = load i32, i32* %330, align 4
  store i32 %331, i32* %329, align 4
  %332 = getelementptr inbounds i32, i32* %330, i64 1
  %333 = getelementptr inbounds i32, i32* %329, i64 1
  %334 = icmp eq i32* %332, %2
  br i1 %334, label %335, label %328, !llvm.loop !16

335:                                              ; preds = %328, %323
  %336 = phi i32* [ %246, %323 ], [ %333, %328 ]
  %337 = ptrtoint i32* %336 to i64
  br label %338

338:                                              ; preds = %225, %335
  %339 = phi i64 [ %235, %225 ], [ %337, %335 ]
  store i64 %339, i64* %234, align 8
  br label %340

340:                                              ; preds = %199, %201, %338
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl19ModularFrameEncoder19ComputeEncodingDataERKNS_11FrameHeaderERKNS_13ImageMetadataEPNS_6Image3IfEERKNSt3__16vectorINS_5PlaneIfEENSA_9allocatorISD_EEEEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_6AuxOutEb(%"class.jxl::ModularFrameEncoder"*, %"struct.jxl::FrameHeader"* nocapture readonly dereferenceable(576), %"struct.jxl::ImageMetadata"* nocapture readonly dereferenceable(1600), %"class.jxl::Image3"* noalias, %"class.std::__1::vector.130"* nocapture readonly dereferenceable(24), %"struct.jxl::PassesEncoderState"* noalias, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %10 = alloca %"class.jxl::ThreadPool::RunCallState", align 8
  %11 = alloca %"class.jxl::ThreadPool::RunCallState", align 8
  %12 = alloca double, align 8
  %13 = alloca %"class.jxl::ThreadPool", align 8
  %14 = alloca i8, align 1
  %15 = alloca %"class.jxl::Image", align 8
  %16 = alloca %"class.jxl::Transform", align 8
  %17 = alloca %"struct.jxl::weighted::Header", align 8
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca %"class.jxl::Transform", align 8
  %21 = alloca %"struct.jxl::weighted::Header", align 8
  %22 = alloca %"class.jxl::Transform", align 8
  %23 = alloca %"struct.jxl::weighted::Header", align 8
  %24 = alloca %"class.jxl::Transform", align 8
  %25 = alloca %"struct.jxl::weighted::Header", align 8
  %26 = alloca %"class.jxl::Transform", align 8
  %27 = alloca %"struct.jxl::weighted::Header", align 8
  %28 = alloca %"class.jxl::Transform", align 8
  %29 = alloca %"struct.jxl::weighted::Header", align 8
  %30 = alloca %"class.jxl::Transform", align 8
  %31 = alloca %"struct.jxl::weighted::Header", align 8
  %32 = alloca %"class.std::__1::vector.40", align 8
  %33 = alloca i32, align 4
  %34 = alloca %"class.std::__1::vector.328", align 8
  %35 = alloca %class.anon, align 8
  %36 = zext i1 %8 to i8
  store i8 %36, i8* %14, align 1
  %37 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %5, i64 0, i32 0, i32 2
  br i1 %8, label %38, label %56

38:                                               ; preds = %9
  %39 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 26, i32 2
  %40 = load i8, i8* %39, align 1, !range !2
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %43, label %42

42:                                               ; preds = %38
  tail call void @_ZN3jxl15GaborishInverseEPNS_6Image3IfEEfPNS_10ThreadPoolE(%"class.jxl::Image3"* %3, float 0x3FEFB50D60000000, %"class.jxl::ThreadPool"* %6) #10
  br label %43

43:                                               ; preds = %42, %38
  %44 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %2, i64 0, i32 3, i32 3
  %45 = load i32, i32* %44, align 4
  %46 = icmp ult i32 %45, 17
  br i1 %46, label %47, label %56

47:                                               ; preds = %43
  %48 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 7
  %49 = load i32, i32* %48, align 4
  %50 = icmp slt i32 %49, 6
  br i1 %50, label %51, label %56

51:                                               ; preds = %47
  %52 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 11
  %53 = load i32, i32* %52, align 8
  %54 = icmp eq i32 %53, 0
  tail call void @_ZN3jxl23FindBestPatchDictionaryERKNS_6Image3IfEEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_6AuxOutEb(%"class.jxl::Image3"* dereferenceable(96) %3, %"struct.jxl::PassesEncoderState"* %5, %"class.jxl::ThreadPool"* null, %"struct.jxl::AuxOut"* %7, i1 zeroext %54) #10
  %55 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %5, i64 0, i32 0, i32 9, i32 1
  tail call void @_ZN3jxl22PatchDictionaryEncoder12SubtractFromERKNS_15PatchDictionaryEPNS_6Image3IfEE(%"class.jxl::PatchDictionary"* dereferenceable(80) %55, %"class.jxl::Image3"* %3) #10
  br label %56

56:                                               ; preds = %9, %51, %47, %43
  %57 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %37, i64 0, i32 0
  %58 = load i64, i64* %57, align 8
  %59 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %5, i64 0, i32 0, i32 2, i32 1
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %2, i64 0, i32 7, i32 9
  %62 = load i32, i32* %61, align 8
  %63 = icmp eq i32 %62, 1
  br i1 %63, label %64, label %69

64:                                               ; preds = %56
  %65 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 11
  %66 = load i32, i32* %65, align 8
  %67 = icmp eq i32 %66, 1
  %68 = select i1 %67, i64 1, i64 3
  br label %69

69:                                               ; preds = %64, %56
  %70 = phi i64 [ 3, %56 ], [ %68, %64 ]
  %71 = xor i1 %8, true
  %72 = select i1 %8, i64 %70, i64 0
  %73 = getelementptr inbounds %"class.std::__1::vector.130", %"class.std::__1::vector.130"* %4, i64 0, i32 0, i32 1
  %74 = bitcast %"class.jxl::Plane.95"** %73 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = bitcast %"class.std::__1::vector.130"* %4 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = sub i64 %75, %77
  %79 = lshr exact i64 %78, 5
  %80 = add nuw nsw i64 %79, %72
  %81 = trunc i64 %80 to i32
  %82 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %2, i64 0, i32 3, i32 1
  %83 = load i8, i8* %82, align 8, !range !2
  %84 = icmp ne i8 %83, 0
  %85 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %2, i64 0, i32 3, i32 3
  %86 = load i32, i32* %85, align 4
  %87 = icmp ult i32 %86, 32
  %88 = or i1 %87, %71
  br i1 %88, label %99, label %89

89:                                               ; preds = %69
  %90 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 11
  %91 = load i32, i32* %90, align 8
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %99, label %93

93:                                               ; preds = %89
  %94 = icmp eq i32 %86, 32
  %95 = icmp eq i8 %83, 0
  %96 = and i1 %95, %94
  %97 = icmp ugt i32 %86, 32
  %98 = or i1 %97, %96
  br i1 %98, label %1877, label %99

99:                                               ; preds = %93, %69, %89
  %100 = shl nsw i32 -1, %86
  %101 = xor i32 %100, -1
  %102 = select i1 %84, i32 1, i32 %101
  %103 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 2
  %104 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %103, i64 0, i32 0, i32 0
  %105 = load %"class.jxl::Image"*, %"class.jxl::Image"** %104, align 8
  %106 = bitcast %"class.jxl::Image"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %106) #10
  call void @_ZN3jxl5ImageC1Emmii(%"class.jxl::Image"* nonnull %15, i64 %58, i64 %60, i32 %102, i32 %81) #10
  %107 = call dereferenceable(104) %"class.jxl::Image"* @_ZN3jxl5ImageaSEOS0_(%"class.jxl::Image"* %105, %"class.jxl::Image"* nonnull dereferenceable(104) %15) #10
  call void @_ZN3jxl5ImageD1Ev(%"class.jxl::Image"* nonnull %15) #10
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %106) #10
  %108 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 11
  %109 = load i32, i32* %108, align 8
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %111, label %117

111:                                              ; preds = %99
  %112 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 14
  %113 = load i8, i8* %112, align 8, !range !2
  %114 = icmp eq i8 %113, 0
  br i1 %114, label %117, label %115

115:                                              ; preds = %111
  %116 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %5, i64 0, i32 0, i32 4
  call void @_ZN3jxl26DequantMatricesSetCustomDCEPNS_15DequantMatricesEPKf(%"class.jxl::DequantMatrices"* %116, float* getelementptr inbounds ([3 x float], [3 x float]* @_ZZN3jxl19ModularFrameEncoder19ComputeEncodingDataERKNS_11FrameHeaderERKNS_13ImageMetadataEPNS_6Image3IfEERKNSt3__16vectorINS_5PlaneIfEENSA_9allocatorISD_EEEEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_6AuxOutEbE11enc_factors, i64 0, i64 0)) #10
  br label %117

117:                                              ; preds = %111, %115, %99
  %118 = load i8, i8* %14, align 1, !range !2
  %119 = icmp eq i8 %118, 0
  br i1 %119, label %414, label %120

120:                                              ; preds = %117
  %121 = load i32, i32* %61, align 8
  %122 = icmp eq i32 %121, 1
  %123 = sitofp i32 %102 to float
  %124 = icmp eq i64 %60, 0
  %125 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 4
  %126 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %105, i64 0, i32 0, i32 0, i32 0
  %127 = icmp eq i64 %58, 0
  %128 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %2, i64 0, i32 3, i32 4
  %129 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %5, i64 0, i32 0, i32 1, i32 7, i32 2
  %130 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %5, i64 0, i32 0, i32 1, i32 7, i32 3
  %131 = add i64 %58, -1
  %132 = add i64 %60, -1
  %133 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %134 = shl i64 %58, 2
  %135 = add i64 %58, -4
  %136 = lshr i64 %135, 2
  %137 = add nuw nsw i64 %136, 1
  %138 = icmp ult i64 %58, 4
  %139 = and i64 %58, -4
  %140 = and i64 %137, 1
  %141 = icmp eq i64 %136, 0
  %142 = sub nuw nsw i64 %137, %140
  %143 = icmp eq i64 %140, 0
  %144 = icmp eq i64 %58, %139
  %145 = and i64 %58, 1
  %146 = icmp eq i64 %145, 0
  br label %147

147:                                              ; preds = %403, %120
  %148 = phi i64 [ 0, %120 ], [ %404, %403 ]
  %149 = phi i1 [ %122, %120 ], [ %407, %403 ]
  %150 = phi i32 [ 0, %120 ], [ %405, %403 ]
  %151 = load i32, i32* %108, align 8
  br i1 %149, label %152, label %156

152:                                              ; preds = %147
  %153 = icmp ne i32 %151, 1
  %154 = icmp eq i64 %148, 0
  %155 = or i1 %154, %153
  br i1 %155, label %156, label %403

156:                                              ; preds = %147, %152
  %157 = icmp eq i32 %151, 0
  %158 = icmp ult i64 %148, 2
  %159 = and i1 %158, %157
  %160 = sub nsw i32 1, %150
  %161 = trunc i64 %148 to i32
  %162 = select i1 %159, i32 %160, i32 %161
  br i1 %157, label %163, label %325

163:                                              ; preds = %156
  %164 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %5, i64 0, i32 0, i32 4, i32 4, i64 %148
  %165 = load float, float* %164, align 4
  %166 = icmp ne i64 %148, 2
  %167 = xor i1 %157, true
  %168 = or i1 %166, %167
  br i1 %168, label %325, label %169

169:                                              ; preds = %163
  br i1 %84, label %178, label %170

170:                                              ; preds = %169
  br i1 %124, label %171, label %174

171:                                              ; preds = %170
  %172 = load i32, i32* %61, align 8
  %173 = icmp eq i32 %172, 1
  br i1 %173, label %410, label %414

174:                                              ; preds = %170
  %175 = sext i32 %162 to i64
  %176 = insertelement <4 x float> undef, float %165, i32 0
  %177 = shufflevector <4 x float> %176, <4 x float> undef, <4 x i32> zeroinitializer
  br label %181

178:                                              ; preds = %169
  %179 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.2, i64 0, i64 0), i32 485, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0)) #10
  %180 = call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

181:                                              ; preds = %299, %174
  %182 = phi i64 [ 0, %174 ], [ %300, %299 ]
  %183 = load i64, i64* %125, align 8
  %184 = mul i64 %183, %182
  %185 = load i8*, i8** %133, align 8
  %186 = ptrtoint i8* %185 to i64
  %187 = and i64 %186, 63
  %188 = icmp eq i64 %187, 0
  call void @llvm.assume(i1 %188) #10
  %189 = getelementptr inbounds i8, i8* %185, i64 %184
  %190 = ptrtoint i8* %189 to i64
  %191 = and i64 %190, 63
  %192 = icmp eq i64 %191, 0
  call void @llvm.assume(i1 %192) #10
  %193 = bitcast i8* %189 to float*
  %194 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %126, align 8
  %195 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %194, i64 %175, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %196 = load i8*, i8** %195, align 8
  %197 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %194, i64 %175, i32 0, i32 0, i32 4
  %198 = load i64, i64* %197, align 8
  %199 = mul i64 %198, %182
  %200 = getelementptr inbounds i8, i8* %196, i64 %199
  %201 = ptrtoint i8* %200 to i64
  %202 = and i64 %201, 63
  %203 = icmp eq i64 %202, 0
  call void @llvm.assume(i1 %203) #10
  %204 = bitcast i8* %200 to i32*
  %205 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %194, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %206 = load i8*, i8** %205, align 8
  %207 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %194, i64 0, i32 0, i32 0, i32 4
  %208 = load i64, i64* %207, align 8
  %209 = mul i64 %208, %182
  %210 = getelementptr inbounds i8, i8* %206, i64 %209
  %211 = ptrtoint i8* %210 to i64
  %212 = and i64 %211, 63
  %213 = icmp eq i64 %212, 0
  call void @llvm.assume(i1 %213) #10
  %214 = bitcast i8* %210 to i32*
  br i1 %127, label %299, label %215

215:                                              ; preds = %181
  br i1 %138, label %216, label %233

216:                                              ; preds = %298, %233, %215
  %217 = phi i64 [ 0, %233 ], [ 0, %215 ], [ %139, %298 ]
  br i1 %146, label %229, label %218

218:                                              ; preds = %216
  %219 = getelementptr inbounds float, float* %193, i64 %217
  %220 = load float, float* %219, align 16
  %221 = fmul float %165, %220
  %222 = fadd float %221, 5.000000e-01
  %223 = fptosi float %222 to i32
  %224 = getelementptr inbounds i32, i32* %204, i64 %217
  store i32 %223, i32* %224, align 16
  %225 = getelementptr inbounds i32, i32* %214, i64 %217
  %226 = load i32, i32* %225, align 16
  %227 = sub nsw i32 %223, %226
  store i32 %227, i32* %224, align 16
  %228 = or i64 %217, 1
  br label %229

229:                                              ; preds = %218, %216
  %230 = phi i64 [ %228, %218 ], [ %217, %216 ]
  %231 = or i64 %217, 1
  %232 = icmp eq i64 %58, %231
  br i1 %232, label %299, label %302

233:                                              ; preds = %215
  %234 = getelementptr i8, i8* %196, i64 %134
  %235 = getelementptr i8, i8* %234, i64 %199
  %236 = getelementptr i8, i8* %185, i64 %134
  %237 = mul i64 %183, %182
  %238 = getelementptr i8, i8* %236, i64 %237
  %239 = getelementptr i8, i8* %206, i64 %134
  %240 = getelementptr i8, i8* %239, i64 %209
  %241 = icmp ult i8* %200, %238
  %242 = icmp ult i8* %189, %235
  %243 = and i1 %241, %242
  %244 = icmp ult i8* %200, %240
  %245 = icmp ult i8* %210, %235
  %246 = and i1 %244, %245
  %247 = or i1 %243, %246
  br i1 %247, label %216, label %248

248:                                              ; preds = %233
  br i1 %141, label %282, label %249

249:                                              ; preds = %248, %249
  %250 = phi i64 [ %279, %249 ], [ 0, %248 ]
  %251 = phi i64 [ %280, %249 ], [ %142, %248 ]
  %252 = getelementptr inbounds float, float* %193, i64 %250
  %253 = bitcast float* %252 to <4 x float>*
  %254 = load <4 x float>, <4 x float>* %253, align 32, !alias.scope !18
  %255 = fmul <4 x float> %177, %254
  %256 = fadd <4 x float> %255, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %257 = fptosi <4 x float> %256 to <4 x i32>
  %258 = getelementptr inbounds i32, i32* %204, i64 %250
  %259 = bitcast i32* %258 to <4 x i32>*
  store <4 x i32> %257, <4 x i32>* %259, align 32, !alias.scope !21, !noalias !23
  %260 = getelementptr inbounds i32, i32* %214, i64 %250
  %261 = bitcast i32* %260 to <4 x i32>*
  %262 = load <4 x i32>, <4 x i32>* %261, align 32, !alias.scope !25
  %263 = sub nsw <4 x i32> %257, %262
  %264 = bitcast i32* %258 to <4 x i32>*
  store <4 x i32> %263, <4 x i32>* %264, align 32, !alias.scope !21, !noalias !23
  %265 = or i64 %250, 4
  %266 = getelementptr inbounds float, float* %193, i64 %265
  %267 = bitcast float* %266 to <4 x float>*
  %268 = load <4 x float>, <4 x float>* %267, align 16, !alias.scope !18
  %269 = fmul <4 x float> %177, %268
  %270 = fadd <4 x float> %269, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %271 = fptosi <4 x float> %270 to <4 x i32>
  %272 = getelementptr inbounds i32, i32* %204, i64 %265
  %273 = bitcast i32* %272 to <4 x i32>*
  store <4 x i32> %271, <4 x i32>* %273, align 16, !alias.scope !21, !noalias !23
  %274 = getelementptr inbounds i32, i32* %214, i64 %265
  %275 = bitcast i32* %274 to <4 x i32>*
  %276 = load <4 x i32>, <4 x i32>* %275, align 16, !alias.scope !25
  %277 = sub nsw <4 x i32> %271, %276
  %278 = bitcast i32* %272 to <4 x i32>*
  store <4 x i32> %277, <4 x i32>* %278, align 16, !alias.scope !21, !noalias !23
  %279 = add i64 %250, 8
  %280 = add i64 %251, -2
  %281 = icmp eq i64 %280, 0
  br i1 %281, label %282, label %249, !llvm.loop !26

282:                                              ; preds = %249, %248
  %283 = phi i64 [ 0, %248 ], [ %279, %249 ]
  br i1 %143, label %298, label %284

284:                                              ; preds = %282
  %285 = getelementptr inbounds float, float* %193, i64 %283
  %286 = bitcast float* %285 to <4 x float>*
  %287 = load <4 x float>, <4 x float>* %286, align 16, !alias.scope !18
  %288 = fmul <4 x float> %177, %287
  %289 = fadd <4 x float> %288, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %290 = fptosi <4 x float> %289 to <4 x i32>
  %291 = getelementptr inbounds i32, i32* %204, i64 %283
  %292 = bitcast i32* %291 to <4 x i32>*
  store <4 x i32> %290, <4 x i32>* %292, align 16, !alias.scope !21, !noalias !23
  %293 = getelementptr inbounds i32, i32* %214, i64 %283
  %294 = bitcast i32* %293 to <4 x i32>*
  %295 = load <4 x i32>, <4 x i32>* %294, align 16, !alias.scope !25
  %296 = sub nsw <4 x i32> %290, %295
  %297 = bitcast i32* %291 to <4 x i32>*
  store <4 x i32> %296, <4 x i32>* %297, align 16, !alias.scope !21, !noalias !23
  br label %298

298:                                              ; preds = %282, %284
  br i1 %144, label %299, label %216

299:                                              ; preds = %229, %302, %298, %181
  %300 = add nuw i64 %182, 1
  %301 = icmp eq i64 %300, %60
  br i1 %301, label %403, label %181

302:                                              ; preds = %229, %302
  %303 = phi i64 [ %323, %302 ], [ %230, %229 ]
  %304 = getelementptr inbounds float, float* %193, i64 %303
  %305 = load float, float* %304, align 4
  %306 = fmul float %165, %305
  %307 = fadd float %306, 5.000000e-01
  %308 = fptosi float %307 to i32
  %309 = getelementptr inbounds i32, i32* %204, i64 %303
  store i32 %308, i32* %309, align 4
  %310 = getelementptr inbounds i32, i32* %214, i64 %303
  %311 = load i32, i32* %310, align 4
  %312 = sub nsw i32 %308, %311
  store i32 %312, i32* %309, align 4
  %313 = add nuw i64 %303, 1
  %314 = getelementptr inbounds float, float* %193, i64 %313
  %315 = load float, float* %314, align 4
  %316 = fmul float %165, %315
  %317 = fadd float %316, 5.000000e-01
  %318 = fptosi float %317 to i32
  %319 = getelementptr inbounds i32, i32* %204, i64 %313
  store i32 %318, i32* %319, align 4
  %320 = getelementptr inbounds i32, i32* %214, i64 %313
  %321 = load i32, i32* %320, align 4
  %322 = sub nsw i32 %318, %321
  store i32 %322, i32* %319, align 4
  %323 = add nuw i64 %303, 2
  %324 = icmp eq i64 %323, %58
  br i1 %324, label %299, label %302, !llvm.loop !27

325:                                              ; preds = %156, %163
  %326 = phi float [ %165, %163 ], [ %123, %156 ]
  %327 = load i32, i32* %85, align 4
  %328 = load i32, i32* %128, align 8
  %329 = load i8, i8* %129, align 4
  %330 = zext i8 %329 to i32
  %331 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %5, i64 0, i32 0, i32 1, i32 7, i32 1, i64 %148
  %332 = load i32, i32* %331, align 4
  %333 = zext i32 %332 to i64
  %334 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE.const, i64 0, i64 %333
  %335 = load i8, i8* %334, align 1
  %336 = zext i8 %335 to i32
  %337 = sub nsw i32 %330, %336
  %338 = sext i32 %162 to i64
  %339 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %126, align 8
  %340 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %339, i64 %338, i32 3
  store i32 %337, i32* %340, align 8
  %341 = load i8, i8* %130, align 1
  %342 = zext i8 %341 to i32
  %343 = load i32, i32* %331, align 4
  %344 = zext i32 %343 to i64
  %345 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE.const, i64 0, i64 %344
  %346 = load i8, i8* %345, align 1
  %347 = zext i8 %346 to i32
  %348 = sub nsw i32 %342, %347
  %349 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %126, align 8
  %350 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %349, i64 %338, i32 4
  store i32 %348, i32* %350, align 4
  %351 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %126, align 8
  %352 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %351, i64 %338
  %353 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %351, i64 %338, i32 3
  %354 = load i32, i32* %353, align 8
  %355 = shl i32 1, %354
  %356 = sext i32 %355 to i64
  %357 = add i64 %131, %356
  %358 = udiv i64 %357, %356
  %359 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %351, i64 %338, i32 4
  %360 = load i32, i32* %359, align 4
  %361 = shl i32 1, %360
  %362 = sext i32 %361 to i64
  %363 = add i64 %132, %362
  %364 = udiv i64 %363, %362
  %365 = shl i64 %358, 32
  %366 = ashr exact i64 %365, 32
  %367 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %351, i64 %338, i32 1
  store i64 %366, i64* %367, align 8
  %368 = shl i64 %364, 32
  %369 = ashr exact i64 %368, 32
  %370 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %351, i64 %338, i32 2
  store i64 %369, i64* %370, align 8
  call void @_ZN3jxl7Channel6resizeEi(%"class.jxl::Channel"* %352, i32 0) #10
  %371 = icmp ult i64 %363, %362
  br i1 %371, label %403, label %372

372:                                              ; preds = %325
  %373 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 %148, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %376

374:                                              ; preds = %376
  %375 = icmp ult i64 %402, %364
  br i1 %375, label %376, label %403

376:                                              ; preds = %372, %374
  %377 = phi i64 [ 0, %372 ], [ %402, %374 ]
  %378 = load i64, i64* %125, align 8
  %379 = mul i64 %378, %377
  %380 = load i8*, i8** %373, align 8
  %381 = ptrtoint i8* %380 to i64
  %382 = and i64 %381, 63
  %383 = icmp eq i64 %382, 0
  call void @llvm.assume(i1 %383) #10
  %384 = getelementptr inbounds i8, i8* %380, i64 %379
  %385 = ptrtoint i8* %384 to i64
  %386 = and i64 %385, 63
  %387 = icmp eq i64 %386, 0
  call void @llvm.assume(i1 %387) #10
  %388 = bitcast i8* %384 to float*
  %389 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %126, align 8
  %390 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %389, i64 %338, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %391 = load i8*, i8** %390, align 8
  %392 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %389, i64 %338, i32 0, i32 0, i32 4
  %393 = load i64, i64* %392, align 8
  %394 = mul i64 %393, %377
  %395 = getelementptr inbounds i8, i8* %391, i64 %394
  %396 = ptrtoint i8* %395 to i64
  %397 = and i64 %396, 63
  %398 = icmp eq i64 %397, 0
  call void @llvm.assume(i1 %398) #10
  %399 = bitcast i8* %395 to i32*
  %400 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_112float_to_intEPKfPimjjbf(float* %388, i32* %399, i64 %358, i32 %327, i32 %328, i1 zeroext %84, float %326)
  %401 = icmp eq i32 %400, 0
  %402 = add nuw i64 %377, 1
  br i1 %401, label %374, label %1877

403:                                              ; preds = %299, %374, %325, %152
  %404 = add nuw nsw i64 %148, 1
  %405 = add nuw nsw i32 %150, 1
  %406 = load i32, i32* %61, align 8
  %407 = icmp eq i32 %406, 1
  %408 = icmp eq i64 %404, 3
  br i1 %408, label %409, label %147

409:                                              ; preds = %403
  br i1 %407, label %410, label %414

410:                                              ; preds = %171, %409
  %411 = load i32, i32* %108, align 8
  %412 = icmp eq i32 %411, 1
  %413 = select i1 %412, i32 1, i32 3
  br label %414

414:                                              ; preds = %171, %410, %117, %409
  %415 = phi i32 [ 3, %409 ], [ 0, %117 ], [ %413, %410 ], [ 3, %171 ]
  %416 = load i64, i64* %74, align 8
  %417 = load i64, i64* %76, align 8
  %418 = icmp eq i64 %416, %417
  br i1 %418, label %534, label %419

419:                                              ; preds = %414
  %420 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %2, i64 0, i32 17, i32 0, i32 0
  %421 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 16, i32 0, i32 0
  %422 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %105, i64 0, i32 0, i32 0, i32 0
  %423 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %5, i64 0, i32 0, i32 2, i32 2
  %424 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %5, i64 0, i32 0, i32 2, i32 3
  %425 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 15
  %426 = getelementptr inbounds %"class.std::__1::vector.130", %"class.std::__1::vector.130"* %4, i64 0, i32 0, i32 0
  %427 = zext i32 %415 to i64
  %428 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %422, align 8
  br label %429

429:                                              ; preds = %419, %523
  %430 = phi %"class.jxl::Channel"* [ %428, %419 ], [ %524, %523 ]
  %431 = phi i64 [ %427, %419 ], [ %526, %523 ]
  %432 = phi i64 [ 0, %419 ], [ %525, %523 ]
  %433 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %420, align 8
  %434 = load i32*, i32** %421, align 8
  %435 = getelementptr inbounds i32, i32* %434, i64 %432
  %436 = load i32, i32* %435, align 4
  %437 = zext i32 %436 to i64
  %438 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %430, i64 %431
  %439 = load i64, i64* %423, align 8
  %440 = add nsw i64 %437, -1
  %441 = add i64 %440, %439
  %442 = udiv i64 %441, %437
  %443 = load i64, i64* %424, align 8
  %444 = add i64 %440, %443
  %445 = udiv i64 %444, %437
  %446 = shl i64 %442, 32
  %447 = ashr exact i64 %446, 32
  %448 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %430, i64 %431, i32 1
  store i64 %447, i64* %448, align 8
  %449 = shl i64 %445, 32
  %450 = ashr exact i64 %449, 32
  %451 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %430, i64 %431, i32 2
  store i64 %450, i64* %451, align 8
  call void @_ZN3jxl7Channel6resizeEi(%"class.jxl::Channel"* %438, i32 0) #10
  %452 = call i64 @llvm.ctlz.i64(i64 %437, i1 true) #10, !range !28
  %453 = xor i64 %452, 63
  %454 = call i64 @llvm.ctpop.i64(i64 %437) #10, !range !28
  %455 = icmp ugt i64 %454, 1
  %456 = zext i1 %455 to i64
  %457 = load i32, i32* %425, align 4
  %458 = call i32 @llvm.ctlz.i32(i32 %457, i1 true) #10, !range !29
  %459 = xor i32 %458, 31
  %460 = zext i32 %459 to i64
  %461 = call i32 @llvm.ctpop.i32(i32 %457) #10, !range !29
  %462 = icmp ugt i32 %461, 1
  %463 = add nuw nsw i64 %453, %456
  %464 = sub nsw i64 %463, %460
  %465 = zext i1 %462 to i64
  %466 = sub nsw i64 %464, %465
  %467 = trunc i64 %466 to i32
  %468 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %422, align 8
  %469 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %468, i64 %431, i32 4
  store i32 %467, i32* %469, align 4
  %470 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %422, align 8
  %471 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %470, i64 %431, i32 3
  store i32 %467, i32* %471, align 8
  %472 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %433, i64 %432, i32 3, i32 3
  %473 = load i32, i32* %472, align 4
  %474 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %433, i64 %432, i32 3, i32 4
  %475 = load i32, i32* %474, align 8
  %476 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %433, i64 %432, i32 3, i32 1
  %477 = load i8, i8* %476, align 8, !range !2
  %478 = icmp ne i8 %477, 0
  %479 = shl nsw i32 -1, %473
  %480 = xor i32 %479, -1
  %481 = uitofp i32 %480 to float
  %482 = select i1 %478, float 1.000000e+00, float %481
  %483 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %422, align 8
  %484 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %483, i64 %431, i32 0, i32 0, i32 1
  %485 = load i32, i32* %484, align 4
  %486 = icmp eq i32 %485, 0
  br i1 %486, label %523, label %493

487:                                              ; preds = %493
  %488 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %422, align 8
  %489 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %488, i64 %431, i32 0, i32 0, i32 1
  %490 = load i32, i32* %489, align 4
  %491 = zext i32 %490 to i64
  %492 = icmp ult i64 %522, %491
  br i1 %492, label %493, label %523

493:                                              ; preds = %429, %487
  %494 = phi %"class.jxl::Channel"* [ %488, %487 ], [ %483, %429 ]
  %495 = phi i64 [ %522, %487 ], [ 0, %429 ]
  %496 = load %"class.jxl::Plane.95"*, %"class.jxl::Plane.95"** %426, align 8
  %497 = getelementptr inbounds %"class.jxl::Plane.95", %"class.jxl::Plane.95"* %496, i64 %432, i32 0, i32 5, i32 0, i32 0, i32 0
  %498 = load i8*, i8** %497, align 8
  %499 = getelementptr inbounds %"class.jxl::Plane.95", %"class.jxl::Plane.95"* %496, i64 %432, i32 0, i32 4
  %500 = load i64, i64* %499, align 8
  %501 = mul i64 %500, %495
  %502 = getelementptr inbounds i8, i8* %498, i64 %501
  %503 = ptrtoint i8* %502 to i64
  %504 = and i64 %503, 63
  %505 = icmp eq i64 %504, 0
  call void @llvm.assume(i1 %505) #10
  %506 = bitcast i8* %502 to float*
  %507 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %494, i64 %431, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %508 = load i8*, i8** %507, align 8
  %509 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %494, i64 %431, i32 0, i32 0, i32 4
  %510 = load i64, i64* %509, align 8
  %511 = mul i64 %510, %495
  %512 = getelementptr inbounds i8, i8* %508, i64 %511
  %513 = ptrtoint i8* %512 to i64
  %514 = and i64 %513, 63
  %515 = icmp eq i64 %514, 0
  call void @llvm.assume(i1 %515) #10
  %516 = bitcast i8* %512 to i32*
  %517 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %494, i64 %431, i32 0, i32 0, i32 0
  %518 = load i32, i32* %517, align 8
  %519 = zext i32 %518 to i64
  %520 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_112float_to_intEPKfPimjjbf(float* %506, i32* %516, i64 %519, i32 %473, i32 %475, i1 zeroext %478, float %482)
  %521 = icmp eq i32 %520, 0
  %522 = add nuw nsw i64 %495, 1
  br i1 %521, label %487, label %1877

523:                                              ; preds = %487, %429
  %524 = phi %"class.jxl::Channel"* [ %483, %429 ], [ %488, %487 ]
  %525 = add nuw i64 %432, 1
  %526 = add nuw i64 %431, 1
  %527 = load i64, i64* %74, align 8
  %528 = load i64, i64* %76, align 8
  %529 = sub i64 %527, %528
  %530 = ashr exact i64 %529, 5
  %531 = icmp ult i64 %525, %530
  br i1 %531, label %429, label %532

532:                                              ; preds = %523
  %533 = trunc i64 %526 to i32
  br label %534

534:                                              ; preds = %532, %414
  %535 = phi i32 [ %415, %414 ], [ %533, %532 ]
  %536 = icmp eq i32 %535, %81
  br i1 %536, label %540, label %537

537:                                              ; preds = %534
  %538 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.2, i64 0, i64 0), i32 538, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i64 0, i64 0)) #10
  %539 = call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

540:                                              ; preds = %534
  %541 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 12
  %542 = load float, float* %541, align 8
  %543 = fcmp olt float %542, 1.000000e+02
  br i1 %543, label %548, label %544

544:                                              ; preds = %540
  %545 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 45
  %546 = load i32, i32* %545, align 8
  %547 = icmp eq i32 %546, 0
  br i1 %547, label %557, label %548

548:                                              ; preds = %544, %540
  %549 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 46
  %550 = load i32, i32* %108, align 8
  %551 = icmp eq i32 %550, 0
  br i1 %551, label %552, label %554

552:                                              ; preds = %548
  %553 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 43
  store float 0.000000e+00, float* %553, align 8
  br label %554

554:                                              ; preds = %548, %552
  %555 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 44
  store float 0.000000e+00, float* %555, align 4
  store i32 0, i32* %549, align 4
  %556 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 46
  br label %626

557:                                              ; preds = %544
  %558 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 46
  %559 = load i32, i32* %558, align 4
  %560 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 46
  %561 = icmp eq i32 %559, 0
  br i1 %561, label %626, label %562

562:                                              ; preds = %557
  %563 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 7
  %564 = load i32, i32* %563, align 4
  %565 = icmp slt i32 %564, 7
  br i1 %565, label %566, label %626

566:                                              ; preds = %562
  %567 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %105, i64 0, i32 6
  %568 = load i64, i64* %567, align 8
  %569 = icmp ugt i64 %568, 1
  br i1 %569, label %570, label %626

570:                                              ; preds = %566
  %571 = bitcast %"class.jxl::Transform"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %571) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %571, i8 -86, i64 72, i1 false)
  call void @_ZN3jxl9TransformC1ENS_11TransformIdE(%"class.jxl::Transform"* nonnull %16, i32 1) #10
  %572 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %105, i64 0, i32 8
  %573 = load i64, i64* %572, align 8
  %574 = trunc i64 %573 to i32
  %575 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %16, i64 0, i32 2
  store i32 %574, i32* %575, align 4
  %576 = load i64, i64* %567, align 8
  %577 = trunc i64 %576 to i32
  %578 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %16, i64 0, i32 4
  store i32 %577, i32* %578, align 4
  %579 = mul i64 %60, %58
  %580 = lshr i64 %579, 3
  %581 = trunc i64 %580 to i32
  %582 = icmp slt i32 %581, 200
  %583 = load i32, i32* %560, align 4
  %584 = icmp slt i32 %583, 0
  %585 = sub nsw i32 0, %583
  %586 = select i1 %584, i32 %585, i32 %583
  %587 = lshr i32 %586, 4
  %588 = select i1 %582, i32 %581, i32 200
  %589 = icmp slt i32 %587, %588
  %590 = select i1 %589, i32 %587, i32 %588
  %591 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %16, i64 0, i32 5
  store i32 %590, i32* %591, align 8
  %592 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %16, i64 0, i32 10
  %593 = lshr i32 %583, 31
  %594 = trunc i32 %593 to i8
  %595 = xor i8 %594, 1
  store i8 %595, i8* %592, align 8
  %596 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %16, i64 0, i32 11
  store i8 0, i8* %596, align 1
  %597 = bitcast %"struct.jxl::weighted::Header"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %597) #10
  %598 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %17, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8weighted6HeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %598, align 8
  %599 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %17, i64 0, i32 2
  %600 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %17, i64 0, i32 0
  %601 = bitcast i32* %599 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %601, i8 0, i64 44, i1 false) #10
  call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* nonnull %600) #10
  %602 = call zeroext i1 @_ZN3jxl5Image12do_transformERKNS_9TransformERKNS_8weighted6HeaderE(%"class.jxl::Image"* %105, %"class.jxl::Transform"* nonnull dereferenceable(72) %16, %"struct.jxl::weighted::Header"* nonnull dereferenceable(56) %17) #10
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %597) #10
  %603 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %16, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl9TransformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %603, align 8
  %604 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %16, i64 0, i32 7
  %605 = getelementptr inbounds %"class.std::__1::vector.21", %"class.std::__1::vector.21"* %604, i64 0, i32 0, i32 0
  %606 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %605, align 8
  %607 = icmp eq %"struct.jxl::SqueezeParams"* %606, null
  br i1 %607, label %625, label %608

608:                                              ; preds = %570
  %609 = bitcast %"struct.jxl::SqueezeParams"* %606 to i8*
  %610 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %16, i64 0, i32 7, i32 0, i32 1
  %611 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %610, align 8
  %612 = icmp eq %"struct.jxl::SqueezeParams"* %611, %606
  br i1 %612, label %623, label %613

613:                                              ; preds = %608, %613
  %614 = phi %"struct.jxl::SqueezeParams"* [ %615, %613 ], [ %611, %608 ]
  %615 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %614, i64 -1
  %616 = bitcast %"struct.jxl::SqueezeParams"* %615 to void (%"struct.jxl::SqueezeParams"*)***
  %617 = load void (%"struct.jxl::SqueezeParams"*)**, void (%"struct.jxl::SqueezeParams"*)*** %616, align 8
  %618 = load void (%"struct.jxl::SqueezeParams"*)*, void (%"struct.jxl::SqueezeParams"*)** %617, align 8
  call void %618(%"struct.jxl::SqueezeParams"* %615) #10
  %619 = icmp eq %"struct.jxl::SqueezeParams"* %615, %606
  br i1 %619, label %620, label %613

620:                                              ; preds = %613
  %621 = bitcast %"class.std::__1::vector.21"* %604 to i8**
  %622 = load i8*, i8** %621, align 8
  br label %623

623:                                              ; preds = %620, %608
  %624 = phi i8* [ %622, %620 ], [ %609, %608 ]
  store %"struct.jxl::SqueezeParams"* %606, %"struct.jxl::SqueezeParams"** %610, align 8
  call void @_ZdlPv(i8* %624) #13
  br label %625

625:                                              ; preds = %570, %623
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %571) #10
  br label %626

626:                                              ; preds = %554, %557, %566, %625, %562
  %627 = phi i32* [ %556, %554 ], [ %560, %557 ], [ %560, %566 ], [ %560, %625 ], [ %560, %562 ]
  %628 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 43
  %629 = load float, float* %628, align 8
  %630 = fcmp ogt float %629, 0.000000e+00
  br i1 %630, label %631, label %715

631:                                              ; preds = %626
  %632 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 47
  %633 = load i8, i8* %632, align 8, !range !2
  %634 = icmp eq i8 %633, 0
  br i1 %634, label %635, label %715

635:                                              ; preds = %631
  %636 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %105, i64 0, i32 6
  %637 = load i64, i64* %636, align 8
  %638 = icmp eq i64 %637, 0
  br i1 %638, label %715, label %639

639:                                              ; preds = %635
  %640 = bitcast i32* %18 to i8*
  %641 = bitcast i32* %19 to i8*
  %642 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %105, i64 0, i32 8
  %643 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %105, i64 0, i32 0, i32 0, i32 0
  %644 = bitcast %"class.jxl::Transform"* %20 to i8*
  %645 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %20, i64 0, i32 2
  %646 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %20, i64 0, i32 4
  %647 = mul i64 %60, %58
  %648 = lshr i64 %647, 4
  %649 = trunc i64 %648 to i32
  %650 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %20, i64 0, i32 5
  %651 = bitcast %"struct.jxl::weighted::Header"* %21 to i8*
  %652 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %21, i64 0, i32 0, i32 0
  %653 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %21, i64 0, i32 2
  %654 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %21, i64 0, i32 0
  %655 = bitcast i32* %653 to i8*
  %656 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %20, i64 0, i32 0, i32 0
  %657 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %20, i64 0, i32 7
  %658 = getelementptr inbounds %"class.std::__1::vector.21", %"class.std::__1::vector.21"* %657, i64 0, i32 0, i32 0
  %659 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %20, i64 0, i32 7, i32 0, i32 1
  %660 = bitcast %"class.std::__1::vector.21"* %657 to i8**
  br label %661

661:                                              ; preds = %639, %711
  %662 = phi i32 [ %102, %639 ], [ %693, %711 ]
  %663 = phi i64 [ 0, %639 ], [ %712, %711 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %640) #10
  store i32 -1431655766, i32* %18, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %641) #10
  store i32 -1431655766, i32* %19, align 4
  %664 = load i64, i64* %642, align 8
  %665 = add i64 %664, %663
  %666 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %643, align 8
  %667 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %666, i64 %665
  call void @_ZNK3jxl7Channel14compute_minmaxEPiS1_(%"class.jxl::Channel"* %667, i32* nonnull %18, i32* nonnull %19) #10
  %668 = load i32, i32* %19, align 4
  %669 = load i32, i32* %18, align 4
  %670 = add i32 %668, 1
  %671 = sub i32 %670, %669
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %644) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %644, i8 -86, i64 72, i1 false)
  call void @_ZN3jxl9TransformC1ENS_11TransformIdE(%"class.jxl::Transform"* nonnull %20, i32 1) #10
  %672 = load i64, i64* %642, align 8
  %673 = add i64 %672, %663
  %674 = trunc i64 %673 to i32
  store i32 %674, i32* %645, align 4
  store i32 1, i32* %646, align 4
  %675 = load float, float* %628, align 8
  %676 = fpext float %675 to double
  %677 = fdiv double %676, 1.000000e+02
  %678 = sitofp i32 %671 to double
  %679 = fmul double %677, %678
  %680 = fptosi double %679 to i32
  %681 = icmp slt i32 %680, %649
  %682 = select i1 %681, i32 %680, i32 %649
  store i32 %682, i32* %650, align 8
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %651) #10
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8weighted6HeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %652, align 8
  call void @llvm.memset.p0i8.i64(i8* align 4 %655, i8 0, i64 44, i1 false) #10
  call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* nonnull %654) #10
  %683 = call zeroext i1 @_ZN3jxl5Image12do_transformERKNS_9TransformERKNS_8weighted6HeaderE(%"class.jxl::Image"* %105, %"class.jxl::Transform"* nonnull dereferenceable(72) %20, %"struct.jxl::weighted::Header"* nonnull dereferenceable(56) %21) #10
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %651) #10
  br i1 %683, label %684, label %692

684:                                              ; preds = %661
  %685 = load i64, i64* %642, align 8
  %686 = add i64 %685, %663
  %687 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %643, align 8
  %688 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %687, i64 %686
  call void @_ZNK3jxl7Channel14compute_minmaxEPiS1_(%"class.jxl::Channel"* %688, i32* nonnull %18, i32* nonnull %19) #10
  %689 = load i32, i32* %19, align 4
  %690 = icmp slt i32 %689, %662
  %691 = select i1 %690, i32 %689, i32 %662
  br label %692

692:                                              ; preds = %684, %661
  %693 = phi i32 [ %662, %661 ], [ %691, %684 ]
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl9TransformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %656, align 8
  %694 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %658, align 8
  %695 = icmp eq %"struct.jxl::SqueezeParams"* %694, null
  br i1 %695, label %711, label %696

696:                                              ; preds = %692
  %697 = bitcast %"struct.jxl::SqueezeParams"* %694 to i8*
  %698 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %659, align 8
  %699 = icmp eq %"struct.jxl::SqueezeParams"* %698, %694
  br i1 %699, label %709, label %700

700:                                              ; preds = %696, %700
  %701 = phi %"struct.jxl::SqueezeParams"* [ %702, %700 ], [ %698, %696 ]
  %702 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %701, i64 -1
  %703 = bitcast %"struct.jxl::SqueezeParams"* %702 to void (%"struct.jxl::SqueezeParams"*)***
  %704 = load void (%"struct.jxl::SqueezeParams"*)**, void (%"struct.jxl::SqueezeParams"*)*** %703, align 8
  %705 = load void (%"struct.jxl::SqueezeParams"*)*, void (%"struct.jxl::SqueezeParams"*)** %704, align 8
  call void %705(%"struct.jxl::SqueezeParams"* %702) #10
  %706 = icmp eq %"struct.jxl::SqueezeParams"* %702, %694
  br i1 %706, label %707, label %700

707:                                              ; preds = %700
  %708 = load i8*, i8** %660, align 8
  br label %709

709:                                              ; preds = %707, %696
  %710 = phi i8* [ %708, %707 ], [ %697, %696 ]
  store %"struct.jxl::SqueezeParams"* %694, %"struct.jxl::SqueezeParams"** %659, align 8
  call void @_ZdlPv(i8* %710) #13
  br label %711

711:                                              ; preds = %692, %709
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %644) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %641) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %640) #10
  %712 = add nuw i64 %663, 1
  %713 = load i64, i64* %636, align 8
  %714 = icmp ult i64 %712, %713
  br i1 %714, label %661, label %715

715:                                              ; preds = %711, %635, %631, %626
  %716 = phi i32 [ %102, %631 ], [ %102, %626 ], [ %102, %635 ], [ %693, %711 ]
  %717 = load i32, i32* %627, align 4
  %718 = icmp eq i32 %717, 0
  br i1 %718, label %719, label %723

719:                                              ; preds = %715
  %720 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 47
  %721 = load i8, i8* %720, align 8, !range !2
  %722 = icmp eq i8 %721, 0
  br i1 %722, label %852, label %723

723:                                              ; preds = %719, %715
  %724 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 7
  %725 = load i32, i32* %724, align 4
  %726 = icmp slt i32 %725, 7
  br i1 %726, label %727, label %852

727:                                              ; preds = %723
  %728 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %105, i64 0, i32 6
  %729 = load i64, i64* %728, align 8
  %730 = icmp ugt i64 %729, 1
  br i1 %730, label %731, label %852

731:                                              ; preds = %727
  %732 = bitcast %"class.jxl::Transform"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %732) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %732, i8 -86, i64 72, i1 false)
  call void @_ZN3jxl9TransformC1ENS_11TransformIdE(%"class.jxl::Transform"* nonnull %22, i32 1) #10
  %733 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %105, i64 0, i32 8
  %734 = load i64, i64* %733, align 8
  %735 = trunc i64 %734 to i32
  %736 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %22, i64 0, i32 2
  store i32 %735, i32* %736, align 4
  %737 = load i64, i64* %728, align 8
  %738 = trunc i64 %737 to i32
  %739 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %22, i64 0, i32 4
  store i32 %738, i32* %739, align 4
  %740 = mul i64 %60, %58
  %741 = lshr i64 %740, 3
  %742 = trunc i64 %741 to i32
  %743 = load i32, i32* %627, align 4
  %744 = icmp slt i32 %743, 0
  %745 = sub nsw i32 0, %743
  %746 = select i1 %744, i32 %745, i32 %743
  %747 = icmp slt i32 %746, %742
  %748 = select i1 %747, i32 %746, i32 %742
  %749 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %22, i64 0, i32 5
  store i32 %748, i32* %749, align 8
  %750 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %22, i64 0, i32 10
  %751 = lshr i32 %743, 31
  %752 = trunc i32 %751 to i8
  %753 = xor i8 %752, 1
  store i8 %753, i8* %750, align 8
  %754 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 47
  %755 = load i8, i8* %754, align 8, !range !2
  %756 = icmp eq i8 %755, 0
  br i1 %756, label %757, label %759

757:                                              ; preds = %731
  %758 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %22, i64 0, i32 11
  store i8 0, i8* %758, align 1
  br label %765

759:                                              ; preds = %731
  %760 = icmp eq i64 %737, 3
  %761 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %22, i64 0, i32 11
  %762 = zext i1 %760 to i8
  store i8 %762, i8* %761, align 1
  br i1 %760, label %763, label %765

763:                                              ; preds = %759
  %764 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %22, i64 0, i32 9
  store i32 13, i32* %764, align 4
  br label %765

765:                                              ; preds = %757, %763, %759
  %766 = bitcast %"struct.jxl::weighted::Header"* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %766) #10
  %767 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %23, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8weighted6HeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %767, align 8
  %768 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %23, i64 0, i32 2
  %769 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %23, i64 0, i32 0
  %770 = bitcast i32* %768 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %770, i8 0, i64 44, i1 false) #10
  call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* nonnull %769) #10
  %771 = call zeroext i1 @_ZN3jxl5Image12do_transformERKNS_9TransformERKNS_8weighted6HeaderE(%"class.jxl::Image"* %105, %"class.jxl::Transform"* nonnull dereferenceable(72) %22, %"struct.jxl::weighted::Header"* nonnull dereferenceable(56) %23) #10
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %766) #10
  %772 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %22, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl9TransformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %772, align 8
  %773 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %22, i64 0, i32 7
  %774 = getelementptr inbounds %"class.std::__1::vector.21", %"class.std::__1::vector.21"* %773, i64 0, i32 0, i32 0
  %775 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %774, align 8
  %776 = icmp eq %"struct.jxl::SqueezeParams"* %775, null
  br i1 %776, label %794, label %777

777:                                              ; preds = %765
  %778 = bitcast %"struct.jxl::SqueezeParams"* %775 to i8*
  %779 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %22, i64 0, i32 7, i32 0, i32 1
  %780 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %779, align 8
  %781 = icmp eq %"struct.jxl::SqueezeParams"* %780, %775
  br i1 %781, label %792, label %782

782:                                              ; preds = %777, %782
  %783 = phi %"struct.jxl::SqueezeParams"* [ %784, %782 ], [ %780, %777 ]
  %784 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %783, i64 -1
  %785 = bitcast %"struct.jxl::SqueezeParams"* %784 to void (%"struct.jxl::SqueezeParams"*)***
  %786 = load void (%"struct.jxl::SqueezeParams"*)**, void (%"struct.jxl::SqueezeParams"*)*** %785, align 8
  %787 = load void (%"struct.jxl::SqueezeParams"*)*, void (%"struct.jxl::SqueezeParams"*)** %786, align 8
  call void %787(%"struct.jxl::SqueezeParams"* %784) #10
  %788 = icmp eq %"struct.jxl::SqueezeParams"* %784, %775
  br i1 %788, label %789, label %782

789:                                              ; preds = %782
  %790 = bitcast %"class.std::__1::vector.21"* %773 to i8**
  %791 = load i8*, i8** %790, align 8
  br label %792

792:                                              ; preds = %789, %777
  %793 = phi i8* [ %791, %789 ], [ %778, %777 ]
  store %"struct.jxl::SqueezeParams"* %775, %"struct.jxl::SqueezeParams"** %779, align 8
  call void @_ZdlPv(i8* %793) #13
  br label %794

794:                                              ; preds = %792, %765
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %732) #10
  %795 = load i64, i64* %728, align 8
  %796 = icmp ugt i64 %795, 3
  br i1 %796, label %797, label %852

797:                                              ; preds = %794
  %798 = bitcast %"class.jxl::Transform"* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %798) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %798, i8 -86, i64 72, i1 false)
  call void @_ZN3jxl9TransformC1ENS_11TransformIdE(%"class.jxl::Transform"* nonnull %24, i32 1) #10
  %799 = load i64, i64* %733, align 8
  %800 = trunc i64 %799 to i32
  %801 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %24, i64 0, i32 2
  store i32 %800, i32* %801, align 4
  %802 = load i64, i64* %728, align 8
  %803 = trunc i64 %802 to i32
  %804 = add i32 %803, -1
  %805 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %24, i64 0, i32 4
  store i32 %804, i32* %805, align 4
  %806 = load i32, i32* %627, align 4
  %807 = icmp slt i32 %806, 0
  %808 = sub nsw i32 0, %806
  %809 = select i1 %807, i32 %808, i32 %806
  %810 = icmp slt i32 %809, %742
  %811 = select i1 %810, i32 %809, i32 %742
  %812 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %24, i64 0, i32 5
  store i32 %811, i32* %812, align 8
  %813 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %24, i64 0, i32 10
  %814 = lshr i32 %806, 31
  %815 = trunc i32 %814 to i8
  %816 = xor i8 %815, 1
  store i8 %816, i8* %813, align 8
  %817 = load i8, i8* %754, align 8, !range !2
  %818 = icmp eq i8 %817, 0
  %819 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %24, i64 0, i32 11
  store i8 %817, i8* %819, align 1
  br i1 %818, label %822, label %820

820:                                              ; preds = %797
  %821 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %24, i64 0, i32 9
  store i32 13, i32* %821, align 4
  br label %822

822:                                              ; preds = %797, %820
  %823 = bitcast %"struct.jxl::weighted::Header"* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %823) #10
  %824 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %25, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8weighted6HeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %824, align 8
  %825 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %25, i64 0, i32 2
  %826 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %25, i64 0, i32 0
  %827 = bitcast i32* %825 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %827, i8 0, i64 44, i1 false) #10
  call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* nonnull %826) #10
  %828 = call zeroext i1 @_ZN3jxl5Image12do_transformERKNS_9TransformERKNS_8weighted6HeaderE(%"class.jxl::Image"* %105, %"class.jxl::Transform"* nonnull dereferenceable(72) %24, %"struct.jxl::weighted::Header"* nonnull dereferenceable(56) %25) #10
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %823) #10
  %829 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %24, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl9TransformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %829, align 8
  %830 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %24, i64 0, i32 7
  %831 = getelementptr inbounds %"class.std::__1::vector.21", %"class.std::__1::vector.21"* %830, i64 0, i32 0, i32 0
  %832 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %831, align 8
  %833 = icmp eq %"struct.jxl::SqueezeParams"* %832, null
  br i1 %833, label %851, label %834

834:                                              ; preds = %822
  %835 = bitcast %"struct.jxl::SqueezeParams"* %832 to i8*
  %836 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %24, i64 0, i32 7, i32 0, i32 1
  %837 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %836, align 8
  %838 = icmp eq %"struct.jxl::SqueezeParams"* %837, %832
  br i1 %838, label %849, label %839

839:                                              ; preds = %834, %839
  %840 = phi %"struct.jxl::SqueezeParams"* [ %841, %839 ], [ %837, %834 ]
  %841 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %840, i64 -1
  %842 = bitcast %"struct.jxl::SqueezeParams"* %841 to void (%"struct.jxl::SqueezeParams"*)***
  %843 = load void (%"struct.jxl::SqueezeParams"*)**, void (%"struct.jxl::SqueezeParams"*)*** %842, align 8
  %844 = load void (%"struct.jxl::SqueezeParams"*)*, void (%"struct.jxl::SqueezeParams"*)** %843, align 8
  call void %844(%"struct.jxl::SqueezeParams"* %841) #10
  %845 = icmp eq %"struct.jxl::SqueezeParams"* %841, %832
  br i1 %845, label %846, label %839

846:                                              ; preds = %839
  %847 = bitcast %"class.std::__1::vector.21"* %830 to i8**
  %848 = load i8*, i8** %847, align 8
  br label %849

849:                                              ; preds = %846, %834
  %850 = phi i8* [ %848, %846 ], [ %835, %834 ]
  store %"struct.jxl::SqueezeParams"* %832, %"struct.jxl::SqueezeParams"** %836, align 8
  call void @_ZdlPv(i8* %850) #13
  br label %851

851:                                              ; preds = %822, %849
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %798) #10
  br label %852

852:                                              ; preds = %727, %719, %794, %851, %723
  %853 = load i32, i32* %108, align 8
  %854 = icmp ne i32 %853, 1
  %855 = load i8, i8* %14, align 1
  %856 = icmp eq i8 %855, 0
  %857 = or i1 %854, %856
  %858 = or i1 %84, %857
  br i1 %858, label %952, label %859

859:                                              ; preds = %852
  %860 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 42
  %861 = load i32, i32* %860, align 4
  %862 = icmp eq i32 %861, 1
  br i1 %862, label %876, label %863

863:                                              ; preds = %859
  %864 = icmp slt i32 %861, 0
  br i1 %864, label %865, label %912

865:                                              ; preds = %863
  %866 = load float, float* %541, align 8
  %867 = fcmp olt float %866, 1.000000e+02
  br i1 %867, label %876, label %868

868:                                              ; preds = %865
  %869 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 45
  %870 = load i32, i32* %869, align 8
  %871 = icmp eq i32 %870, 0
  br i1 %871, label %872, label %876

872:                                              ; preds = %868
  %873 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 7
  %874 = load i32, i32* %873, align 4
  %875 = icmp sgt i32 %874, 5
  br i1 %875, label %876, label %952

876:                                              ; preds = %868, %872, %865, %859
  %877 = bitcast %"class.jxl::Transform"* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %877) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %877, i8 -86, i64 72, i1 false)
  call void @_ZN3jxl9TransformC1ENS_11TransformIdE(%"class.jxl::Transform"* nonnull %26, i32 0) #10
  %878 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %26, i64 0, i32 3
  store i32 6, i32* %878, align 8
  %879 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %105, i64 0, i32 8
  %880 = load i64, i64* %879, align 8
  %881 = trunc i64 %880 to i32
  %882 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %26, i64 0, i32 2
  store i32 %881, i32* %882, align 4
  %883 = bitcast %"struct.jxl::weighted::Header"* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %883) #10
  %884 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %27, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8weighted6HeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %884, align 8
  %885 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %27, i64 0, i32 2
  %886 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %27, i64 0, i32 0
  %887 = bitcast i32* %885 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %887, i8 0, i64 44, i1 false) #10
  call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* nonnull %886) #10
  %888 = call zeroext i1 @_ZN3jxl5Image12do_transformERKNS_9TransformERKNS_8weighted6HeaderE(%"class.jxl::Image"* %105, %"class.jxl::Transform"* nonnull dereferenceable(72) %26, %"struct.jxl::weighted::Header"* nonnull dereferenceable(56) %27) #10
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %883) #10
  %889 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %26, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl9TransformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %889, align 8
  %890 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %26, i64 0, i32 7
  %891 = getelementptr inbounds %"class.std::__1::vector.21", %"class.std::__1::vector.21"* %890, i64 0, i32 0, i32 0
  %892 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %891, align 8
  %893 = icmp eq %"struct.jxl::SqueezeParams"* %892, null
  br i1 %893, label %911, label %894

894:                                              ; preds = %876
  %895 = bitcast %"struct.jxl::SqueezeParams"* %892 to i8*
  %896 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %26, i64 0, i32 7, i32 0, i32 1
  %897 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %896, align 8
  %898 = icmp eq %"struct.jxl::SqueezeParams"* %897, %892
  br i1 %898, label %909, label %899

899:                                              ; preds = %894, %899
  %900 = phi %"struct.jxl::SqueezeParams"* [ %901, %899 ], [ %897, %894 ]
  %901 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %900, i64 -1
  %902 = bitcast %"struct.jxl::SqueezeParams"* %901 to void (%"struct.jxl::SqueezeParams"*)***
  %903 = load void (%"struct.jxl::SqueezeParams"*)**, void (%"struct.jxl::SqueezeParams"*)*** %902, align 8
  %904 = load void (%"struct.jxl::SqueezeParams"*)*, void (%"struct.jxl::SqueezeParams"*)** %903, align 8
  call void %904(%"struct.jxl::SqueezeParams"* %901) #10
  %905 = icmp eq %"struct.jxl::SqueezeParams"* %901, %892
  br i1 %905, label %906, label %899

906:                                              ; preds = %899
  %907 = bitcast %"class.std::__1::vector.21"* %890 to i8**
  %908 = load i8*, i8** %907, align 8
  br label %909

909:                                              ; preds = %906, %894
  %910 = phi i8* [ %908, %906 ], [ %895, %894 ]
  store %"struct.jxl::SqueezeParams"* %892, %"struct.jxl::SqueezeParams"** %896, align 8
  call void @_ZdlPv(i8* %910) #13
  br label %911

911:                                              ; preds = %876, %909
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %877) #10
  br label %952

912:                                              ; preds = %863
  %913 = icmp sgt i32 %861, 1
  br i1 %913, label %914, label %952

914:                                              ; preds = %912
  %915 = bitcast %"class.jxl::Transform"* %28 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %915) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %915, i8 -86, i64 72, i1 false)
  call void @_ZN3jxl9TransformC1ENS_11TransformIdE(%"class.jxl::Transform"* nonnull %28, i32 0) #10
  %916 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %105, i64 0, i32 8
  %917 = load i64, i64* %916, align 8
  %918 = trunc i64 %917 to i32
  %919 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %28, i64 0, i32 2
  store i32 %918, i32* %919, align 4
  %920 = load i32, i32* %860, align 4
  %921 = add nsw i32 %920, -2
  %922 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %28, i64 0, i32 3
  store i32 %921, i32* %922, align 8
  %923 = bitcast %"struct.jxl::weighted::Header"* %29 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %923) #10
  %924 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %29, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8weighted6HeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %924, align 8
  %925 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %29, i64 0, i32 2
  %926 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %29, i64 0, i32 0
  %927 = bitcast i32* %925 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %927, i8 0, i64 44, i1 false) #10
  call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* nonnull %926) #10
  %928 = call zeroext i1 @_ZN3jxl5Image12do_transformERKNS_9TransformERKNS_8weighted6HeaderE(%"class.jxl::Image"* %105, %"class.jxl::Transform"* nonnull dereferenceable(72) %28, %"struct.jxl::weighted::Header"* nonnull dereferenceable(56) %29) #10
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %923) #10
  %929 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %28, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl9TransformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %929, align 8
  %930 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %28, i64 0, i32 7
  %931 = getelementptr inbounds %"class.std::__1::vector.21", %"class.std::__1::vector.21"* %930, i64 0, i32 0, i32 0
  %932 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %931, align 8
  %933 = icmp eq %"struct.jxl::SqueezeParams"* %932, null
  br i1 %933, label %951, label %934

934:                                              ; preds = %914
  %935 = bitcast %"struct.jxl::SqueezeParams"* %932 to i8*
  %936 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %28, i64 0, i32 7, i32 0, i32 1
  %937 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %936, align 8
  %938 = icmp eq %"struct.jxl::SqueezeParams"* %937, %932
  br i1 %938, label %949, label %939

939:                                              ; preds = %934, %939
  %940 = phi %"struct.jxl::SqueezeParams"* [ %941, %939 ], [ %937, %934 ]
  %941 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %940, i64 -1
  %942 = bitcast %"struct.jxl::SqueezeParams"* %941 to void (%"struct.jxl::SqueezeParams"*)***
  %943 = load void (%"struct.jxl::SqueezeParams"*)**, void (%"struct.jxl::SqueezeParams"*)*** %942, align 8
  %944 = load void (%"struct.jxl::SqueezeParams"*)*, void (%"struct.jxl::SqueezeParams"*)** %943, align 8
  call void %944(%"struct.jxl::SqueezeParams"* %941) #10
  %945 = icmp eq %"struct.jxl::SqueezeParams"* %941, %932
  br i1 %945, label %946, label %939

946:                                              ; preds = %939
  %947 = bitcast %"class.std::__1::vector.21"* %930 to i8**
  %948 = load i8*, i8** %947, align 8
  br label %949

949:                                              ; preds = %946, %934
  %950 = phi i8* [ %948, %946 ], [ %935, %934 ]
  store %"struct.jxl::SqueezeParams"* %932, %"struct.jxl::SqueezeParams"** %936, align 8
  call void @_ZdlPv(i8* %950) #13
  br label %951

951:                                              ; preds = %914, %949
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %915) #10
  br label %952

952:                                              ; preds = %872, %852, %911, %951, %912
  %953 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 40
  %954 = load i32, i32* %953, align 8
  %955 = icmp eq i32 %954, 0
  br i1 %955, label %991, label %956

956:                                              ; preds = %952
  %957 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %105, i64 0, i32 6
  %958 = load i64, i64* %957, align 8
  %959 = icmp eq i64 %958, 0
  br i1 %959, label %991, label %960

960:                                              ; preds = %956
  %961 = bitcast %"class.jxl::Transform"* %30 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %961) #10
  call void @_ZN3jxl9TransformC1ENS_11TransformIdE(%"class.jxl::Transform"* nonnull %30, i32 2) #10
  %962 = bitcast %"struct.jxl::weighted::Header"* %31 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %962) #10
  %963 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %31, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8weighted6HeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %963, align 8
  %964 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %31, i64 0, i32 2
  %965 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %31, i64 0, i32 0
  %966 = bitcast i32* %964 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %966, i8 0, i64 44, i1 false) #10
  call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* nonnull %965) #10
  %967 = call zeroext i1 @_ZN3jxl5Image12do_transformERKNS_9TransformERKNS_8weighted6HeaderE(%"class.jxl::Image"* %105, %"class.jxl::Transform"* nonnull dereferenceable(72) %30, %"struct.jxl::weighted::Header"* nonnull dereferenceable(56) %31) #10
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %962) #10
  %968 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %30, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl9TransformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %968, align 8
  %969 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %30, i64 0, i32 7
  %970 = getelementptr inbounds %"class.std::__1::vector.21", %"class.std::__1::vector.21"* %969, i64 0, i32 0, i32 0
  %971 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %970, align 8
  %972 = icmp eq %"struct.jxl::SqueezeParams"* %971, null
  br i1 %972, label %990, label %973

973:                                              ; preds = %960
  %974 = bitcast %"struct.jxl::SqueezeParams"* %971 to i8*
  %975 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %30, i64 0, i32 7, i32 0, i32 1
  %976 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %975, align 8
  %977 = icmp eq %"struct.jxl::SqueezeParams"* %976, %971
  br i1 %977, label %988, label %978

978:                                              ; preds = %973, %978
  %979 = phi %"struct.jxl::SqueezeParams"* [ %980, %978 ], [ %976, %973 ]
  %980 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %979, i64 -1
  %981 = bitcast %"struct.jxl::SqueezeParams"* %980 to void (%"struct.jxl::SqueezeParams"*)***
  %982 = load void (%"struct.jxl::SqueezeParams"*)**, void (%"struct.jxl::SqueezeParams"*)*** %981, align 8
  %983 = load void (%"struct.jxl::SqueezeParams"*)*, void (%"struct.jxl::SqueezeParams"*)** %982, align 8
  call void %983(%"struct.jxl::SqueezeParams"* %980) #10
  %984 = icmp eq %"struct.jxl::SqueezeParams"* %980, %971
  br i1 %984, label %985, label %978

985:                                              ; preds = %978
  %986 = bitcast %"class.std::__1::vector.21"* %969 to i8**
  %987 = load i8*, i8** %986, align 8
  br label %988

988:                                              ; preds = %985, %973
  %989 = phi i8* [ %987, %985 ], [ %974, %973 ]
  store %"struct.jxl::SqueezeParams"* %971, %"struct.jxl::SqueezeParams"** %975, align 8
  call void @_ZdlPv(i8* %989) #13
  br label %990

990:                                              ; preds = %960, %988
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %961) #10
  br label %991

991:                                              ; preds = %956, %952, %990
  %992 = bitcast %"class.std::__1::vector.40"* %32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %992) #10
  %993 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %32, i64 0, i32 0, i32 0
  %994 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %32, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %992, i8 0, i64 24, i1 false) #10
  %995 = load float, float* %541, align 8
  %996 = fcmp olt float %995, 1.000000e+02
  br i1 %996, label %1001, label %997

997:                                              ; preds = %991
  %998 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 13
  %999 = load float, float* %998, align 4
  %1000 = fcmp olt float %999, 1.000000e+02
  br i1 %1000, label %1001, label %1202

1001:                                             ; preds = %997, %991
  %1002 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %105, i64 0, i32 0, i32 0, i32 1
  %1003 = bitcast %"class.jxl::Channel"** %1002 to i64*
  %1004 = load i64, i64* %1003, align 8
  %1005 = bitcast %"class.jxl::Image"* %105 to i64*
  %1006 = load i64, i64* %1005, align 8
  %1007 = sub i64 %1004, %1006
  %1008 = bitcast i32* %33 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1008) #10
  store i32 1, i32* %33, align 4
  %1009 = icmp eq i64 %1007, 0
  br i1 %1009, label %1012, label %1010

1010:                                             ; preds = %1001
  %1011 = ashr exact i64 %1007, 6
  call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEmRKj(%"class.std::__1::vector.40"* nonnull %32, i64 %1011, i32* nonnull dereferenceable(4) %33) #10
  br label %1012

1012:                                             ; preds = %1001, %1010
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1008) #10
  %1013 = load i32, i32* %953, align 8
  %1014 = icmp eq i32 %1013, 0
  %1015 = load float, float* %541, align 8
  %1016 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 13
  %1017 = load float, float* %1016, align 4
  %1018 = insertelement <2 x float> undef, float %1017, i32 0
  %1019 = insertelement <2 x float> %1018, float %1015, i32 1
  br i1 %1014, label %1020, label %1025

1020:                                             ; preds = %1012
  %1021 = fadd <2 x float> %1019, <float 4.000000e+02, float 4.000000e+02>
  %1022 = fdiv <2 x float> %1021, <float 5.000000e+00, float 5.000000e+00>
  %1023 = extractelement <2 x float> %1022, i32 1
  store float %1023, float* %541, align 8
  %1024 = extractelement <2 x float> %1022, i32 0
  store float %1024, float* %1016, align 4
  br label %1025

1025:                                             ; preds = %1012, %1020
  %1026 = phi <2 x float> [ %1022, %1020 ], [ %1019, %1012 ]
  %1027 = extractelement <2 x float> %1026, i32 1
  %1028 = fcmp ogt float %1027, 5.000000e+01
  %1029 = fpext float %1027 to double
  %1030 = fmul double %1029, 1.600000e+01
  %1031 = fsub double 9.000000e+02, %1030
  %1032 = fmul double %1029, 2.000000e+00
  %1033 = fsub double 2.000000e+02, %1032
  %1034 = select i1 %1028, double %1033, double %1031
  %1035 = fptrunc double %1034 to float
  store float %1035, float* %541, align 8
  %1036 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 13
  %1037 = extractelement <2 x float> %1026, i32 0
  %1038 = fcmp ogt float %1037, 5.000000e+01
  %1039 = fpext float %1037 to double
  %1040 = fmul double %1039, 1.600000e+01
  %1041 = fsub double 9.000000e+02, %1040
  %1042 = fmul double %1039, 2.000000e+00
  %1043 = fsub double 2.000000e+02, %1042
  %1044 = select i1 %1038, double %1043, double %1041
  %1045 = fptrunc double %1044 to float
  store float %1045, float* %1036, align 4
  %1046 = load i32, i32* %108, align 8
  %1047 = icmp eq i32 %1046, 0
  br i1 %1047, label %1054, label %1048

1048:                                             ; preds = %1025
  %1049 = sitofp i32 %716 to float
  %1050 = fmul float %1049, 0x3F847AE140000000
  %1051 = fdiv float %1050, 2.550000e+02
  %1052 = fmul float %1051, %1035
  store float %1052, float* %541, align 8
  %1053 = fmul float %1051, %1045
  br label %1057

1054:                                             ; preds = %1025
  %1055 = fmul float %1035, 0x3F847AE140000000
  store float %1055, float* %541, align 8
  %1056 = fmul float %1045, 0x3F847AE140000000
  br label %1057

1057:                                             ; preds = %1054, %1048
  %1058 = phi float [ %1056, %1054 ], [ %1053, %1048 ]
  store float %1058, float* %1036, align 4
  %1059 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 39, i32 1
  %1060 = load float, float* %1059, align 8
  %1061 = fcmp oeq float %1060, 0.000000e+00
  br i1 %1061, label %1868, label %1062

1062:                                             ; preds = %1057
  %1063 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %105, i64 0, i32 8
  %1064 = load i64, i64* %1063, align 8
  %1065 = and i64 %1064, 4294967295
  %1066 = load i64, i64* %1003, align 8
  %1067 = load i64, i64* %1005, align 8
  %1068 = sub i64 %1066, %1067
  %1069 = ashr exact i64 %1068, 6
  %1070 = icmp ugt i64 %1069, %1065
  br i1 %1070, label %1071, label %1202

1071:                                             ; preds = %1062
  %1072 = trunc i64 %1064 to i32
  %1073 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %105, i64 0, i32 7
  %1074 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 42
  br label %1075

1075:                                             ; preds = %1200, %1071
  %1076 = phi i64 [ %1064, %1071 ], [ %1201, %1200 ]
  %1077 = phi i64 [ %1067, %1071 ], [ %1196, %1200 ]
  %1078 = phi i64 [ %1069, %1071 ], [ %1198, %1200 ]
  %1079 = phi i64 [ %1065, %1071 ], [ %1194, %1200 ]
  %1080 = phi i32 [ %1072, %1071 ], [ %1193, %1200 ]
  %1081 = inttoptr i64 %1077 to %"class.jxl::Channel"*
  %1082 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %1081, i64 %1079, i32 5
  %1083 = load i32, i32* %1082, align 8
  %1084 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %1081, i64 %1079, i32 6
  %1085 = load i32, i32* %1084, align 4
  %1086 = add nsw i32 %1085, %1083
  %1087 = icmp slt i32 %1086, 15
  %1088 = select i1 %1087, i32 %1086, i32 15
  %1089 = sub i64 %1079, %1076
  %1090 = load i64, i64* %1073, align 8
  %1091 = urem i64 %1089, %1090
  %1092 = trunc i64 %1091 to i32
  %1093 = icmp ugt i64 %1090, 2
  br i1 %1093, label %1094, label %1098

1094:                                             ; preds = %1075
  %1095 = add nsw i64 %1078, -4
  %1096 = icmp ugt i64 %1095, %1079
  %1097 = select i1 %1096, i32 %1092, i32 1
  br label %1098

1098:                                             ; preds = %1094, %1075
  %1099 = phi i32 [ %1092, %1075 ], [ %1097, %1094 ]
  %1100 = load i32, i32* %108, align 8
  %1101 = icmp eq i32 %1100, 0
  %1102 = icmp slt i32 %1099, 3
  %1103 = and i1 %1102, %1101
  br i1 %1103, label %1104, label %1113

1104:                                             ; preds = %1098
  %1105 = icmp eq i32 %1099, 0
  %1106 = select i1 %1105, float* %541, float* %1036
  %1107 = load float, float* %1106, align 4
  %1108 = fmul float %1107, 0x4003333340000000
  %1109 = sext i32 %1099 to i64
  %1110 = sext i32 %1088 to i64
  %1111 = getelementptr inbounds [3 x [16 x float]], [3 x [16 x float]]* @_ZN3jxl12_GLOBAL__N_118squeeze_xyb_qtableE, i64 0, i64 %1109, i64 %1110
  %1112 = load float, float* %1111, align 4
  br label %1132

1113:                                             ; preds = %1098
  %1114 = load i32, i32* %1074, align 4
  %1115 = icmp ne i32 %1114, 0
  %1116 = add i32 %1099, -1
  %1117 = icmp ult i32 %1116, 2
  %1118 = and i1 %1117, %1115
  br i1 %1118, label %1119, label %1125

1119:                                             ; preds = %1113
  %1120 = load float, float* %1036, align 4
  %1121 = fmul float %1120, 0x3FD6666660000000
  %1122 = sext i32 %1088 to i64
  %1123 = getelementptr inbounds [16 x float], [16 x float]* @_ZN3jxl12_GLOBAL__N_121squeeze_chroma_qtableE, i64 0, i64 %1122
  %1124 = load float, float* %1123, align 4
  br label %1132

1125:                                             ; preds = %1113
  %1126 = load float, float* %541, align 8
  %1127 = fmul float %1126, 0x3FD6666660000000
  %1128 = fmul float %1127, 0x3FF19999A0000000
  %1129 = sext i32 %1088 to i64
  %1130 = getelementptr inbounds [16 x float], [16 x float]* @_ZN3jxl12_GLOBAL__N_119squeeze_luma_qtableE, i64 0, i64 %1129
  %1131 = load float, float* %1130, align 4
  br label %1132

1132:                                             ; preds = %1119, %1125, %1104
  %1133 = phi float [ %1124, %1119 ], [ %1128, %1125 ], [ %1112, %1104 ]
  %1134 = phi float [ %1121, %1119 ], [ %1131, %1125 ], [ %1108, %1104 ]
  %1135 = fmul float %1134, %1133
  %1136 = fptosi float %1135 to i32
  %1137 = icmp sgt i32 %1136, 1
  %1138 = select i1 %1137, i32 %1136, i32 1
  %1139 = icmp slt i32 %1136, 2
  br i1 %1139, label %1190, label %1140

1140:                                             ; preds = %1132
  %1141 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %1081, i64 %1079, i32 0, i32 0, i32 1
  %1142 = load i32, i32* %1141, align 4
  %1143 = icmp eq i32 %1142, 0
  br i1 %1143, label %1190, label %1144

1144:                                             ; preds = %1140
  %1145 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %1081, i64 %1079, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %1146 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %1081, i64 %1079, i32 0, i32 0, i32 4
  %1147 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %1081, i64 %1079, i32 0, i32 0, i32 0
  %1148 = lshr i32 %1138, 1
  %1149 = load i32, i32* %1147, align 8
  br label %1150

1150:                                             ; preds = %1165, %1144
  %1151 = phi i32 [ %1142, %1144 ], [ %1166, %1165 ]
  %1152 = phi i32 [ %1149, %1144 ], [ %1167, %1165 ]
  %1153 = phi i64 [ 0, %1144 ], [ %1168, %1165 ]
  %1154 = load i8*, i8** %1145, align 8
  %1155 = load i64, i64* %1146, align 8
  %1156 = mul i64 %1155, %1153
  %1157 = getelementptr inbounds i8, i8* %1154, i64 %1156
  %1158 = ptrtoint i8* %1157 to i64
  %1159 = and i64 %1158, 63
  %1160 = icmp eq i64 %1159, 0
  call void @llvm.assume(i1 %1160) #10
  %1161 = bitcast i8* %1157 to i32*
  %1162 = icmp eq i32 %1152, 0
  br i1 %1162, label %1165, label %1171

1163:                                             ; preds = %1182
  %1164 = load i32, i32* %1141, align 4
  br label %1165

1165:                                             ; preds = %1163, %1150
  %1166 = phi i32 [ %1164, %1163 ], [ %1151, %1150 ]
  %1167 = phi i32 [ %1187, %1163 ], [ 0, %1150 ]
  %1168 = add nuw nsw i64 %1153, 1
  %1169 = zext i32 %1166 to i64
  %1170 = icmp ult i64 %1168, %1169
  br i1 %1170, label %1150, label %1190

1171:                                             ; preds = %1150, %1182
  %1172 = phi i64 [ %1186, %1182 ], [ 0, %1150 ]
  %1173 = getelementptr inbounds i32, i32* %1161, i64 %1172
  %1174 = load i32, i32* %1173, align 4
  %1175 = icmp slt i32 %1174, 0
  br i1 %1175, label %1176, label %1179

1176:                                             ; preds = %1171
  %1177 = sub i32 %1148, %1174
  %1178 = srem i32 %1177, %1138
  br label %1182

1179:                                             ; preds = %1171
  %1180 = add nsw i32 %1174, %1148
  %1181 = srem i32 %1180, %1138
  br label %1182

1182:                                             ; preds = %1179, %1176
  %1183 = phi i32 [ %1181, %1179 ], [ %1177, %1176 ]
  %1184 = phi i32 [ %1180, %1179 ], [ %1178, %1176 ]
  %1185 = sub i32 %1184, %1183
  store i32 %1185, i32* %1173, align 4
  %1186 = add nuw nsw i64 %1172, 1
  %1187 = load i32, i32* %1147, align 8
  %1188 = zext i32 %1187 to i64
  %1189 = icmp ult i64 %1186, %1188
  br i1 %1189, label %1171, label %1163

1190:                                             ; preds = %1165, %1132, %1140
  %1191 = load i32*, i32** %993, align 8
  %1192 = getelementptr inbounds i32, i32* %1191, i64 %1079
  store i32 %1138, i32* %1192, align 4
  %1193 = add i32 %1080, 1
  %1194 = zext i32 %1193 to i64
  %1195 = load i64, i64* %1003, align 8
  %1196 = load i64, i64* %1005, align 8
  %1197 = sub i64 %1195, %1196
  %1198 = ashr exact i64 %1197, 6
  %1199 = icmp ugt i64 %1198, %1194
  br i1 %1199, label %1200, label %1202

1200:                                             ; preds = %1190
  %1201 = load i64, i64* %1063, align 8
  br label %1075

1202:                                             ; preds = %1190, %1062, %997
  %1203 = bitcast %"class.std::__1::vector.328"* %34 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1203) #10
  %1204 = getelementptr inbounds %"class.std::__1::vector.328", %"class.std::__1::vector.328"* %34, i64 0, i32 0, i32 0
  %1205 = getelementptr inbounds %"class.std::__1::vector.328", %"class.std::__1::vector.328"* %34, i64 0, i32 0, i32 1
  %1206 = getelementptr inbounds %"class.std::__1::vector.328", %"class.std::__1::vector.328"* %34, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1203, i8 0, i64 24, i1 false) #10
  %1207 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 39
  %1208 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 3, i32 0, i32 0
  %1209 = load %"struct.jxl::ModularOptions"*, %"struct.jxl::ModularOptions"** %1208, align 8
  %1210 = bitcast %"struct.jxl::ModularOptions"* %1209 to i8*
  %1211 = bitcast %"struct.jxl::ModularOptions"* %1207 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1210, i8* align 8 %1211, i64 16, i1 false) #10
  %1212 = icmp eq %"struct.jxl::ModularOptions"* %1209, %1207
  br i1 %1212, label %1219, label %1213

1213:                                             ; preds = %1202
  %1214 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %1209, i64 0, i32 3
  %1215 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 39, i32 3, i32 0, i32 0
  %1216 = load i32*, i32** %1215, align 8
  %1217 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 39, i32 3, i32 0, i32 1
  %1218 = load i32*, i32** %1217, align 8
  call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE6assignIPjEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector.40"* %1214, i32* %1216, i32* %1218) #10
  br label %1219

1219:                                             ; preds = %1202, %1213
  %1220 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %1209, i64 0, i32 4
  %1221 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 39, i32 4
  %1222 = bitcast float* %1220 to i8*
  %1223 = bitcast float* %1221 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1222, i8* align 8 %1223, i64 41, i1 false) #10
  %1224 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %5, i64 0, i32 0, i32 2, i32 15
  %1225 = load i64, i64* %1224, align 8
  %1226 = icmp eq i64 %1225, 0
  br i1 %1226, label %1233, label %1227

1227:                                             ; preds = %1219
  %1228 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %5, i64 0, i32 0, i32 2, i32 12
  %1229 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %5, i64 0, i32 0, i32 2, i32 17
  %1230 = bitcast %struct.GroupParams** %1205 to i64*
  %1231 = bitcast %"class.std::__1::vector.328"* %34 to i64*
  %1232 = bitcast %struct.GroupParams** %1206 to i64*
  br label %1247

1233:                                             ; preds = %1324, %1219
  %1234 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %5, i64 0, i32 0, i32 2, i32 14
  %1235 = load i64, i64* %1234, align 8
  %1236 = icmp eq i64 %1235, 0
  br i1 %1236, label %1328, label %1237

1237:                                             ; preds = %1233
  %1238 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %5, i64 0, i32 0, i32 2, i32 10
  %1239 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %5, i64 0, i32 0, i32 2, i32 16
  %1240 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %5, i64 0, i32 5, i32 0, i32 0
  %1241 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 12, i32 2
  %1242 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 12, i32 1
  %1243 = bitcast %struct.GroupParams** %1205 to i64*
  %1244 = bitcast %"class.std::__1::vector.328"* %34 to i64*
  %1245 = bitcast %struct.GroupParams** %1206 to i64*
  %1246 = load i64, i64* %1240, align 8
  br label %1424

1247:                                             ; preds = %1227, %1324
  %1248 = phi i64 [ 0, %1227 ], [ %1325, %1324 ]
  %1249 = load i64, i64* %1228, align 8
  %1250 = urem i64 %1248, %1249
  %1251 = udiv i64 %1248, %1249
  %1252 = load i64, i64* %1229, align 8
  %1253 = mul i64 %1252, %1250
  %1254 = mul i64 %1252, %1251
  %1255 = load %struct.GroupParams*, %struct.GroupParams** %1205, align 8
  %1256 = load %struct.GroupParams*, %struct.GroupParams** %1206, align 8
  %1257 = icmp ult %struct.GroupParams* %1255, %1256
  %1258 = ptrtoint %struct.GroupParams* %1256 to i64
  br i1 %1257, label %1259, label %1272

1259:                                             ; preds = %1247
  %1260 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1255, i64 0, i32 0, i32 0
  store i64 %1253, i64* %1260, align 8
  %1261 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1255, i64 0, i32 0, i32 1
  store i64 %1254, i64* %1261, align 8
  %1262 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1255, i64 0, i32 0, i32 2
  store i64 %1252, i64* %1262, align 8
  %1263 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1255, i64 0, i32 0, i32 3
  store i64 %1252, i64* %1263, align 8
  %1264 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1255, i64 0, i32 1
  store i32 3, i32* %1264, align 8
  %1265 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1255, i64 0, i32 2
  store i32 1000, i32* %1265, align 4
  %1266 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1255, i64 0, i32 3, i32 0
  store i32 2, i32* %1266, align 8
  %1267 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1255, i64 0, i32 3, i32 1
  store i64 0, i64* %1267, align 8
  %1268 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1255, i64 0, i32 3, i32 2
  store i64 %1248, i64* %1268, align 8
  %1269 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1255, i64 0, i32 3, i32 3
  store i64 0, i64* %1269, align 8
  %1270 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1255, i64 1
  %1271 = ptrtoint %struct.GroupParams* %1270 to i64
  store i64 %1271, i64* %1230, align 8
  br label %1324

1272:                                             ; preds = %1247
  %1273 = ptrtoint %struct.GroupParams* %1255 to i64
  %1274 = load i64, i64* %1231, align 8
  %1275 = sub i64 %1273, %1274
  %1276 = sdiv exact i64 %1275, 72
  %1277 = add nsw i64 %1276, 1
  %1278 = icmp ugt i64 %1277, 256204778801521550
  br i1 %1278, label %1279, label %1281

1279:                                             ; preds = %1272
  %1280 = bitcast %"class.std::__1::vector.328"* %34 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1280) #12
  unreachable

1281:                                             ; preds = %1272
  %1282 = sub i64 %1258, %1274
  %1283 = sdiv exact i64 %1282, 72
  %1284 = icmp ult i64 %1283, 128102389400760775
  br i1 %1284, label %1285, label %1290

1285:                                             ; preds = %1281
  %1286 = shl nsw i64 %1283, 1
  %1287 = icmp ult i64 %1286, %1277
  %1288 = select i1 %1287, i64 %1277, i64 %1286
  %1289 = icmp eq i64 %1288, 0
  br i1 %1289, label %1295, label %1290

1290:                                             ; preds = %1285, %1281
  %1291 = phi i64 [ %1288, %1285 ], [ 256204778801521550, %1281 ]
  %1292 = mul i64 %1291, 72
  %1293 = call i8* @_Znwm(i64 %1292) #13
  %1294 = bitcast i8* %1293 to %struct.GroupParams*
  br label %1295

1295:                                             ; preds = %1290, %1285
  %1296 = phi i64 [ %1291, %1290 ], [ 0, %1285 ]
  %1297 = phi %struct.GroupParams* [ %1294, %1290 ], [ null, %1285 ]
  %1298 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1297, i64 %1276
  %1299 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1297, i64 %1296
  %1300 = ptrtoint %struct.GroupParams* %1299 to i64
  %1301 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1298, i64 0, i32 0, i32 0
  store i64 %1253, i64* %1301, align 8
  %1302 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1297, i64 %1276, i32 0, i32 1
  store i64 %1254, i64* %1302, align 8
  %1303 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1297, i64 %1276, i32 0, i32 2
  store i64 %1252, i64* %1303, align 8
  %1304 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1297, i64 %1276, i32 0, i32 3
  store i64 %1252, i64* %1304, align 8
  %1305 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1297, i64 %1276, i32 1
  store i32 3, i32* %1305, align 8
  %1306 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1297, i64 %1276, i32 2
  store i32 1000, i32* %1306, align 4
  %1307 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1297, i64 %1276, i32 3, i32 0
  store i32 2, i32* %1307, align 8
  %1308 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1297, i64 %1276, i32 3, i32 1
  store i64 0, i64* %1308, align 8
  %1309 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1297, i64 %1276, i32 3, i32 2
  store i64 %1248, i64* %1309, align 8
  %1310 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1297, i64 %1276, i32 3, i32 3
  store i64 0, i64* %1310, align 8
  %1311 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1298, i64 1
  %1312 = ptrtoint %struct.GroupParams* %1311 to i64
  %1313 = sdiv exact i64 %1275, -72
  %1314 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1298, i64 %1313
  %1315 = ptrtoint %struct.GroupParams* %1314 to i64
  %1316 = icmp sgt i64 %1275, 0
  br i1 %1316, label %1317, label %1320

1317:                                             ; preds = %1295
  %1318 = bitcast %struct.GroupParams* %1314 to i8*
  %1319 = inttoptr i64 %1274 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1318, i8* align 8 %1319, i64 %1275, i1 false) #10
  br label %1320

1320:                                             ; preds = %1317, %1295
  store i64 %1315, i64* %1231, align 8
  store i64 %1312, i64* %1230, align 8
  store i64 %1300, i64* %1232, align 8
  %1321 = icmp eq i64 %1274, 0
  br i1 %1321, label %1324, label %1322

1322:                                             ; preds = %1320
  %1323 = inttoptr i64 %1274 to i8*
  call void @_ZdlPv(i8* %1323) #13
  br label %1324

1324:                                             ; preds = %1259, %1320, %1322
  %1325 = add nuw i64 %1248, 1
  %1326 = load i64, i64* %1224, align 8
  %1327 = icmp ult i64 %1325, %1326
  br i1 %1327, label %1247, label %1233

1328:                                             ; preds = %1437, %1233
  %1329 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 16
  %1330 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 2, i32 0, i32 1
  %1331 = bitcast %"class.jxl::Image"** %1330 to i64*
  %1332 = load i64, i64* %1331, align 8
  %1333 = bitcast %"class.std::__1::vector.8"* %103 to i64*
  %1334 = load i64, i64* %1333, align 8
  %1335 = sub i64 %1332, %1334
  %1336 = sdiv exact i64 %1335, 104
  %1337 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 16, i32 0, i32 1
  %1338 = bitcast %"class.std::__1::vector.40"** %1337 to i64*
  %1339 = load i64, i64* %1338, align 8
  %1340 = bitcast %"class.std::__1::vector.104"* %1329 to i64*
  %1341 = load i64, i64* %1340, align 8
  %1342 = sub i64 %1339, %1341
  %1343 = sdiv exact i64 %1342, 24
  %1344 = icmp ugt i64 %1336, %1343
  %1345 = inttoptr i64 %1341 to %"class.std::__1::vector.40"*
  %1346 = inttoptr i64 %1339 to %"class.std::__1::vector.40"*
  br i1 %1344, label %1347, label %1349

1347:                                             ; preds = %1328
  %1348 = sub nsw i64 %1336, %1343
  call void @_ZNSt3__16vectorINS0_IjNS_9allocatorIjEEEENS1_IS3_EEE8__appendEm(%"class.std::__1::vector.104"* %1329, i64 %1348) #10
  br label %1368

1349:                                             ; preds = %1328
  %1350 = icmp ult i64 %1336, %1343
  br i1 %1350, label %1351, label %1368

1351:                                             ; preds = %1349
  %1352 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %1345, i64 %1336
  %1353 = icmp eq %"class.std::__1::vector.40"* %1352, %1346
  br i1 %1353, label %1367, label %1354

1354:                                             ; preds = %1351, %1365
  %1355 = phi %"class.std::__1::vector.40"* [ %1356, %1365 ], [ %1346, %1351 ]
  %1356 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %1355, i64 -1
  %1357 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %1356, i64 0, i32 0, i32 0
  %1358 = load i32*, i32** %1357, align 8
  %1359 = icmp eq i32* %1358, null
  br i1 %1359, label %1365, label %1360

1360:                                             ; preds = %1354
  %1361 = ptrtoint i32* %1358 to i64
  %1362 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %1355, i64 -1, i32 0, i32 1
  %1363 = bitcast i32** %1362 to i64*
  store i64 %1361, i64* %1363, align 8
  %1364 = bitcast i32* %1358 to i8*
  call void @_ZdlPv(i8* %1364) #13
  br label %1365

1365:                                             ; preds = %1360, %1354
  %1366 = icmp eq %"class.std::__1::vector.40"* %1356, %1352
  br i1 %1366, label %1367, label %1354

1367:                                             ; preds = %1365, %1351
  store %"class.std::__1::vector.40"* %1352, %"class.std::__1::vector.40"** %1337, align 8
  br label %1368

1368:                                             ; preds = %1347, %1349, %1367
  %1369 = bitcast %struct.GroupParams** %1205 to i64*
  %1370 = load i64, i64* %1369, align 8
  %1371 = bitcast %"class.std::__1::vector.328"* %34 to i64*
  %1372 = load i64, i64* %1371, align 8
  %1373 = sub i64 %1370, %1372
  %1374 = sdiv exact i64 %1373, 72
  %1375 = trunc i64 %1374 to i32
  %1376 = bitcast %class.anon* %35 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1376) #10
  %1377 = getelementptr inbounds %class.anon, %class.anon* %35, i64 0, i32 0
  store %"class.jxl::ModularFrameEncoder"* %0, %"class.jxl::ModularFrameEncoder"** %1377, align 8
  %1378 = getelementptr inbounds %class.anon, %class.anon* %35, i64 0, i32 1
  store %"class.std::__1::vector.328"* %34, %"class.std::__1::vector.328"** %1378, align 8
  %1379 = getelementptr inbounds %class.anon, %class.anon* %35, i64 0, i32 2
  store %"struct.jxl::FrameDimensions"* %37, %"struct.jxl::FrameDimensions"** %1379, align 8
  %1380 = getelementptr inbounds %class.anon, %class.anon* %35, i64 0, i32 3
  store i8* %14, i8** %1380, align 8
  %1381 = bitcast double* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1381) #10
  store double 0xFFFFFFFFFFFFFFFF, double* %12, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i64 0, i64 0), double* nonnull %12) #10
  %1382 = icmp eq %"class.jxl::ThreadPool"* %6, null
  br i1 %1382, label %1383, label %1394

1383:                                             ; preds = %1368
  %1384 = bitcast %"class.jxl::ThreadPool"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1384) #10
  %1385 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %13, i64 0, i32 0
  %1386 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %13, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %1385, align 8
  %1387 = bitcast i8** %1386 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %13, %"class.jxl::ThreadPool"** %1387, align 8
  %1388 = icmp eq i32 %1375, 0
  br i1 %1388, label %1405, label %1389

1389:                                             ; preds = %1383
  %1390 = bitcast %"class.jxl::ThreadPool::RunCallState"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1390) #10
  %1391 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %10, i64 0, i32 0
  %1392 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %10, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %1391, align 8
  store %class.anon* %35, %class.anon** %1392, align 8
  %1393 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %1384, i8* nonnull %1390, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ModularFrameEncoder19ComputeEncodingDataERKNS_11FrameHeaderERKNS_13ImageMetadataEPNS_6Image3IfEERKNSt3__16vectorINS_5PlaneIfEENSE_9allocatorISH_EEEEPNS_18PassesEncoderStateEPS0_PNS_6AuxOutEbE3$_0E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ModularFrameEncoder19ComputeEncodingDataERKNS_11FrameHeaderERKNS_13ImageMetadataEPNS_6Image3IfEERKNSt3__16vectorINS_5PlaneIfEENSE_9allocatorISH_EEEEPNS_18PassesEncoderStateEPS0_PNS_6AuxOutEbE3$_0E12CallDataFuncEPvjm", i32 0, i32 %1375) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1390) #10
  br label %1405

1394:                                             ; preds = %1368
  %1395 = icmp eq i32 %1375, 0
  br i1 %1395, label %1407, label %1396

1396:                                             ; preds = %1394
  %1397 = bitcast %"class.jxl::ThreadPool::RunCallState"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1397) #10
  %1398 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %11, i64 0, i32 0
  %1399 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %11, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %1398, align 8
  store %class.anon* %35, %class.anon** %1399, align 8
  %1400 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %6, i64 0, i32 0
  %1401 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %1400, align 8
  %1402 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %6, i64 0, i32 1
  %1403 = load i8*, i8** %1402, align 8
  %1404 = call i32 %1401(i8* %1403, i8* nonnull %1397, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ModularFrameEncoder19ComputeEncodingDataERKNS_11FrameHeaderERKNS_13ImageMetadataEPNS_6Image3IfEERKNSt3__16vectorINS_5PlaneIfEENSE_9allocatorISH_EEEEPNS_18PassesEncoderStateEPS0_PNS_6AuxOutEbE3$_0E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ModularFrameEncoder19ComputeEncodingDataERKNS_11FrameHeaderERKNS_13ImageMetadataEPNS_6Image3IfEERKNSt3__16vectorINS_5PlaneIfEENSE_9allocatorISH_EEEEPNS_18PassesEncoderStateEPS0_PNS_6AuxOutEbE3$_0E12CallDataFuncEPvjm", i32 0, i32 %1375) #10
  br label %1405

1405:                                             ; preds = %1383, %1389, %1396
  %1406 = phi i8* [ %1397, %1396 ], [ %1384, %1389 ], [ %1384, %1383 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1406) #10
  br label %1407

1407:                                             ; preds = %1405, %1394
  %1408 = load double, double* %12, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i64 0, i64 0), double %1408) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1381) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1376) #10
  %1409 = load %"class.jxl::Image"*, %"class.jxl::Image"** %104, align 8
  %1410 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %1409, i64 0, i32 8
  %1411 = load i64, i64* %1410, align 8
  %1412 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %1409, i64 0, i32 0, i32 0, i32 1
  %1413 = bitcast %"class.jxl::Channel"** %1412 to i64*
  %1414 = load i64, i64* %1413, align 8
  %1415 = bitcast %"class.jxl::Image"* %1409 to i64*
  %1416 = load i64, i64* %1415, align 8
  %1417 = sub i64 %1414, %1416
  %1418 = ashr exact i64 %1417, 6
  %1419 = icmp ult i64 %1411, %1418
  %1420 = inttoptr i64 %1416 to %"class.jxl::Channel"*
  br i1 %1419, label %1421, label %1579

1421:                                             ; preds = %1407
  %1422 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %5, i64 0, i32 0, i32 2, i32 16
  %1423 = load i64, i64* %1422, align 8
  br label %1567

1424:                                             ; preds = %1237, %1437
  %1425 = phi i64 [ %1235, %1237 ], [ %1438, %1437 ]
  %1426 = phi i64 [ %1246, %1237 ], [ %1439, %1437 ]
  %1427 = phi i64 [ 0, %1237 ], [ %1440, %1437 ]
  %1428 = load i64, i64* %1238, align 8
  %1429 = urem i64 %1427, %1428
  %1430 = udiv i64 %1427, %1428
  %1431 = load i64, i64* %1239, align 8
  %1432 = mul i64 %1431, %1429
  %1433 = mul i64 %1431, %1430
  %1434 = icmp eq i64 %1426, 0
  br i1 %1434, label %1437, label %1442

1435:                                             ; preds = %1563
  %1436 = load i64, i64* %1234, align 8
  br label %1437

1437:                                             ; preds = %1435, %1424
  %1438 = phi i64 [ %1436, %1435 ], [ %1425, %1424 ]
  %1439 = phi i64 [ %1565, %1435 ], [ 0, %1424 ]
  %1440 = add nuw i64 %1427, 1
  %1441 = icmp ult i64 %1440, %1438
  br i1 %1441, label %1424, label %1328

1442:                                             ; preds = %1424, %1563
  %1443 = phi i64 [ %1564, %1563 ], [ 0, %1424 ]
  %1444 = load i32, i32* %1241, align 4
  %1445 = icmp eq i32 %1444, 0
  %1446 = zext i32 %1444 to i64
  %1447 = load i32, i32* %1242, align 8
  %1448 = add i32 %1447, -1
  %1449 = zext i32 %1448 to i64
  br label %1450

1450:                                             ; preds = %1488, %1442
  %1451 = phi i32 [ 2, %1442 ], [ %1490, %1488 ]
  %1452 = phi i64 [ 0, %1442 ], [ %1491, %1488 ]
  br i1 %1445, label %1453, label %1458

1453:                                             ; preds = %1483, %1450
  %1454 = phi i32 [ 0, %1450 ], [ %1484, %1483 ]
  %1455 = phi i32 [ 0, %1450 ], [ %1485, %1483 ]
  %1456 = icmp eq i64 %1452, %1449
  %1457 = icmp eq i64 %1452, %1443
  br i1 %1457, label %1492, label %1488

1458:                                             ; preds = %1450, %1483
  %1459 = phi i32 [ %1484, %1483 ], [ 0, %1450 ]
  %1460 = phi i32 [ %1485, %1483 ], [ 0, %1450 ]
  %1461 = phi i64 [ %1486, %1483 ], [ 0, %1450 ]
  %1462 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 12, i32 4, i64 %1461
  %1463 = load i32, i32* %1462, align 4
  %1464 = zext i32 %1463 to i64
  %1465 = icmp ugt i64 %1452, %1464
  br i1 %1465, label %1483, label %1466

1466:                                             ; preds = %1458
  %1467 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 12, i32 3, i64 %1461
  %1468 = load i32, i32* %1467, align 4
  %1469 = add i32 %1468, -1
  %1470 = icmp ult i32 %1469, 8
  br i1 %1470, label %1471, label %1483

1471:                                             ; preds = %1466
  %1472 = trunc i32 %1469 to i8
  %1473 = lshr i8 -117, %1472
  %1474 = and i8 %1473, 1
  %1475 = icmp eq i8 %1474, 0
  br i1 %1475, label %1483, label %1476

1476:                                             ; preds = %1471
  %1477 = sext i32 %1469 to i64
  %1478 = getelementptr inbounds [8 x i32], [8 x i32]* @switch.table._ZN3jxl19ModularFrameEncoder19ComputeEncodingDataERKNS_11FrameHeaderERKNS_13ImageMetadataEPNS_6Image3IfEERKNSt3__16vectorINS_5PlaneIfEENSA_9allocatorISD_EEEEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_6AuxOutEb.67, i64 0, i64 %1477
  %1479 = load i32, i32* %1478, align 4
  %1480 = sext i32 %1469 to i64
  %1481 = getelementptr inbounds [8 x i32], [8 x i32]* @switch.table._ZN3jxl19ModularFrameEncoder19ComputeEncodingDataERKNS_11FrameHeaderERKNS_13ImageMetadataEPNS_6Image3IfEERKNSt3__16vectorINS_5PlaneIfEENSA_9allocatorISD_EEEEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_6AuxOutEb.67, i64 0, i64 %1480
  %1482 = load i32, i32* %1481, align 4
  br label %1483

1483:                                             ; preds = %1471, %1466, %1476, %1458
  %1484 = phi i32 [ %1459, %1458 ], [ %1479, %1476 ], [ %1459, %1471 ], [ %1459, %1466 ]
  %1485 = phi i32 [ %1460, %1458 ], [ %1482, %1476 ], [ %1460, %1471 ], [ %1460, %1466 ]
  %1486 = add nuw nsw i64 %1461, 1
  %1487 = icmp eq i64 %1486, %1446
  br i1 %1487, label %1453, label %1458

1488:                                             ; preds = %1453
  %1489 = add i32 %1455, -1
  %1490 = select i1 %1456, i32 -1, i32 %1489
  %1491 = add nuw i64 %1452, 1
  br label %1450

1492:                                             ; preds = %1453
  %1493 = select i1 %1456, i32 0, i32 %1454
  %1494 = load %struct.GroupParams*, %struct.GroupParams** %1205, align 8
  %1495 = load %struct.GroupParams*, %struct.GroupParams** %1206, align 8
  %1496 = icmp ult %struct.GroupParams* %1494, %1495
  %1497 = ptrtoint %struct.GroupParams* %1495 to i64
  br i1 %1496, label %1498, label %1511

1498:                                             ; preds = %1492
  %1499 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1494, i64 0, i32 0, i32 0
  store i64 %1432, i64* %1499, align 8
  %1500 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1494, i64 0, i32 0, i32 1
  store i64 %1433, i64* %1500, align 8
  %1501 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1494, i64 0, i32 0, i32 2
  store i64 %1431, i64* %1501, align 8
  %1502 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1494, i64 0, i32 0, i32 3
  store i64 %1431, i64* %1502, align 8
  %1503 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1494, i64 0, i32 1
  store i32 %1493, i32* %1503, align 8
  %1504 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1494, i64 0, i32 2
  store i32 %1451, i32* %1504, align 4
  %1505 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1494, i64 0, i32 3, i32 0
  store i32 5, i32* %1505, align 8
  %1506 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1494, i64 0, i32 3, i32 1
  store i64 0, i64* %1506, align 8
  %1507 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1494, i64 0, i32 3, i32 2
  store i64 %1427, i64* %1507, align 8
  %1508 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1494, i64 0, i32 3, i32 3
  store i64 %1443, i64* %1508, align 8
  %1509 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1494, i64 1
  %1510 = ptrtoint %struct.GroupParams* %1509 to i64
  store i64 %1510, i64* %1243, align 8
  br label %1563

1511:                                             ; preds = %1492
  %1512 = ptrtoint %struct.GroupParams* %1494 to i64
  %1513 = load i64, i64* %1244, align 8
  %1514 = sub i64 %1512, %1513
  %1515 = sdiv exact i64 %1514, 72
  %1516 = add nsw i64 %1515, 1
  %1517 = icmp ugt i64 %1516, 256204778801521550
  br i1 %1517, label %1518, label %1520

1518:                                             ; preds = %1511
  %1519 = bitcast %"class.std::__1::vector.328"* %34 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1519) #12
  unreachable

1520:                                             ; preds = %1511
  %1521 = sub i64 %1497, %1513
  %1522 = sdiv exact i64 %1521, 72
  %1523 = icmp ult i64 %1522, 128102389400760775
  br i1 %1523, label %1524, label %1529

1524:                                             ; preds = %1520
  %1525 = shl nsw i64 %1522, 1
  %1526 = icmp ult i64 %1525, %1516
  %1527 = select i1 %1526, i64 %1516, i64 %1525
  %1528 = icmp eq i64 %1527, 0
  br i1 %1528, label %1534, label %1529

1529:                                             ; preds = %1524, %1520
  %1530 = phi i64 [ %1527, %1524 ], [ 256204778801521550, %1520 ]
  %1531 = mul i64 %1530, 72
  %1532 = call i8* @_Znwm(i64 %1531) #13
  %1533 = bitcast i8* %1532 to %struct.GroupParams*
  br label %1534

1534:                                             ; preds = %1529, %1524
  %1535 = phi i64 [ %1530, %1529 ], [ 0, %1524 ]
  %1536 = phi %struct.GroupParams* [ %1533, %1529 ], [ null, %1524 ]
  %1537 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1536, i64 %1515
  %1538 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1536, i64 %1535
  %1539 = ptrtoint %struct.GroupParams* %1538 to i64
  %1540 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1537, i64 0, i32 0, i32 0
  store i64 %1432, i64* %1540, align 8
  %1541 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1536, i64 %1515, i32 0, i32 1
  store i64 %1433, i64* %1541, align 8
  %1542 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1536, i64 %1515, i32 0, i32 2
  store i64 %1431, i64* %1542, align 8
  %1543 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1536, i64 %1515, i32 0, i32 3
  store i64 %1431, i64* %1543, align 8
  %1544 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1536, i64 %1515, i32 1
  store i32 %1493, i32* %1544, align 8
  %1545 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1536, i64 %1515, i32 2
  store i32 %1451, i32* %1545, align 4
  %1546 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1536, i64 %1515, i32 3, i32 0
  store i32 5, i32* %1546, align 8
  %1547 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1536, i64 %1515, i32 3, i32 1
  store i64 0, i64* %1547, align 8
  %1548 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1536, i64 %1515, i32 3, i32 2
  store i64 %1427, i64* %1548, align 8
  %1549 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1536, i64 %1515, i32 3, i32 3
  store i64 %1443, i64* %1549, align 8
  %1550 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1537, i64 1
  %1551 = ptrtoint %struct.GroupParams* %1550 to i64
  %1552 = sdiv exact i64 %1514, -72
  %1553 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %1537, i64 %1552
  %1554 = ptrtoint %struct.GroupParams* %1553 to i64
  %1555 = icmp sgt i64 %1514, 0
  br i1 %1555, label %1556, label %1559

1556:                                             ; preds = %1534
  %1557 = bitcast %struct.GroupParams* %1553 to i8*
  %1558 = inttoptr i64 %1513 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1557, i8* align 8 %1558, i64 %1514, i1 false) #10
  br label %1559

1559:                                             ; preds = %1556, %1534
  store i64 %1554, i64* %1244, align 8
  store i64 %1551, i64* %1243, align 8
  store i64 %1539, i64* %1245, align 8
  %1560 = icmp eq i64 %1513, 0
  br i1 %1560, label %1563, label %1561

1561:                                             ; preds = %1559
  %1562 = inttoptr i64 %1513 to i8*
  call void @_ZdlPv(i8* %1562) #13
  br label %1563

1563:                                             ; preds = %1498, %1559, %1561
  %1564 = add nuw i64 %1443, 1
  %1565 = load i64, i64* %1240, align 8
  %1566 = icmp ult i64 %1564, %1565
  br i1 %1566, label %1442, label %1435

1567:                                             ; preds = %1421, %1576
  %1568 = phi i64 [ %1411, %1421 ], [ %1577, %1576 ]
  %1569 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %1420, i64 %1568, i32 1
  %1570 = load i64, i64* %1569, align 8
  %1571 = icmp ugt i64 %1570, %1423
  br i1 %1571, label %1579, label %1572

1572:                                             ; preds = %1567
  %1573 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %1420, i64 %1568, i32 2
  %1574 = load i64, i64* %1573, align 8
  %1575 = icmp ugt i64 %1574, %1423
  br i1 %1575, label %1579, label %1576

1576:                                             ; preds = %1572
  %1577 = add nuw i64 %1568, 1
  %1578 = icmp ult i64 %1577, %1418
  br i1 %1578, label %1567, label %1579

1579:                                             ; preds = %1576, %1567, %1572, %1407
  %1580 = phi i64 [ %1411, %1407 ], [ %1568, %1572 ], [ %1568, %1567 ], [ %1577, %1576 ]
  %1581 = icmp ult i64 %1580, %1418
  br i1 %1581, label %1582, label %1601

1582:                                             ; preds = %1579, %1593
  %1583 = phi %"class.jxl::Channel"* [ %1600, %1593 ], [ %1420, %1579 ]
  %1584 = phi i64 [ %1594, %1593 ], [ %1580, %1579 ]
  %1585 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %1583, i64 %1584
  %1586 = bitcast %"class.jxl::Channel"* %1585 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1586, i8 0, i64 24, i1 false)
  %1587 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %1583, i64 %1584, i32 0, i32 0, i32 5
  %1588 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %1587, i64 0, i32 0, i32 0, i32 0
  %1589 = load i8*, i8** %1588, align 8
  %1590 = bitcast %"class.std::__1::unique_ptr"* %1587 to i64*
  store i64 0, i64* %1590, align 8
  %1591 = icmp eq i8* %1589, null
  br i1 %1591, label %1593, label %1592

1592:                                             ; preds = %1582
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1589) #10
  br label %1593

1593:                                             ; preds = %1592, %1582
  %1594 = add nuw i64 %1584, 1
  %1595 = load i64, i64* %1413, align 8
  %1596 = load i64, i64* %1415, align 8
  %1597 = sub i64 %1595, %1596
  %1598 = ashr exact i64 %1597, 6
  %1599 = icmp ult i64 %1594, %1598
  %1600 = inttoptr i64 %1596 to %"class.jxl::Channel"*
  br i1 %1599, label %1582, label %1601

1601:                                             ; preds = %1593, %1579
  %1602 = load i32*, i32** %993, align 8
  %1603 = load i32*, i32** %994, align 8
  %1604 = icmp eq i32* %1602, %1603
  br i1 %1604, label %1858, label %1605

1605:                                             ; preds = %1601
  %1606 = load i64, i64* %1331, align 8
  %1607 = load i64, i64* %1333, align 8
  %1608 = icmp eq i64 %1606, %1607
  br i1 %1608, label %1618, label %1609

1609:                                             ; preds = %1605
  %1610 = getelementptr inbounds %"class.std::__1::vector.104", %"class.std::__1::vector.104"* %1329, i64 0, i32 0, i32 0
  %1611 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 15
  %1612 = getelementptr inbounds %"class.std::__1::vector.96", %"class.std::__1::vector.96"* %1611, i64 0, i32 0, i32 0
  %1613 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 15, i32 0, i32 1
  %1614 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 15, i32 0, i32 2, i32 0, i32 0
  %1615 = bitcast %"struct.jxl::ModularMultiplierInfo"** %1613 to i64*
  %1616 = bitcast %"class.std::__1::vector.96"* %1611 to i64*
  %1617 = bitcast %"struct.jxl::ModularMultiplierInfo"** %1614 to i64*
  br label %1632

1618:                                             ; preds = %1791, %1605
  %1619 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 15
  %1620 = getelementptr inbounds %"class.std::__1::vector.96", %"class.std::__1::vector.96"* %1619, i64 0, i32 0, i32 0
  %1621 = load %"struct.jxl::ModularMultiplierInfo"*, %"struct.jxl::ModularMultiplierInfo"** %1620, align 8
  %1622 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 15, i32 0, i32 1
  %1623 = load %"struct.jxl::ModularMultiplierInfo"*, %"struct.jxl::ModularMultiplierInfo"** %1622, align 8
  call fastcc void @"_ZNSt3__16__sortIRZN3jxl19ModularFrameEncoder19ComputeEncodingDataERKNS1_11FrameHeaderERKNS1_13ImageMetadataEPNS1_6Image3IfEERKNS_6vectorINS1_5PlaneIfEENS_9allocatorISE_EEEEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_6AuxOutEbE3$_1PNS1_21ModularMultiplierInfoEEEvT0_SU_T_"(%"struct.jxl::ModularMultiplierInfo"* %1621, %"struct.jxl::ModularMultiplierInfo"* %1623) #10
  %1624 = bitcast %"struct.jxl::ModularMultiplierInfo"** %1622 to i64*
  %1625 = load i64, i64* %1624, align 8
  %1626 = bitcast %"class.std::__1::vector.96"* %1619 to i64*
  %1627 = load i64, i64* %1626, align 8
  %1628 = sub i64 %1625, %1627
  %1629 = sdiv exact i64 %1628, 20
  %1630 = icmp ugt i64 %1629, 1
  %1631 = inttoptr i64 %1627 to %"struct.jxl::ModularMultiplierInfo"*
  br i1 %1630, label %1812, label %1801

1632:                                             ; preds = %1609, %1791
  %1633 = phi i64 [ %1607, %1609 ], [ %1792, %1791 ]
  %1634 = phi i64 [ %1606, %1609 ], [ %1793, %1791 ]
  %1635 = phi i64 [ 0, %1609 ], [ %1795, %1791 ]
  %1636 = phi i32 [ 0, %1609 ], [ %1794, %1791 ]
  %1637 = inttoptr i64 %1633 to %"class.jxl::Image"*
  %1638 = icmp ne i32 %1636, 0
  br i1 %1638, label %1639, label %1646

1639:                                             ; preds = %1632
  %1640 = load %"class.std::__1::vector.40"*, %"class.std::__1::vector.40"** %1610, align 8
  %1641 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %1640, i64 %1635, i32 0, i32 0
  %1642 = load i32*, i32** %1641, align 8
  %1643 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %1640, i64 %1635, i32 0, i32 1
  %1644 = load i32*, i32** %1643, align 8
  %1645 = icmp eq i32* %1642, %1644
  br i1 %1645, label %1791, label %1646

1646:                                             ; preds = %1639, %1632
  %1647 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %1637, i64 %1635, i32 8
  %1648 = load i64, i64* %1647, align 8
  %1649 = and i64 %1648, 4294967295
  %1650 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %1637, i64 %1635, i32 0
  %1651 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %1637, i64 %1635, i32 0, i32 0, i32 1
  %1652 = bitcast %"class.jxl::Channel"** %1651 to i64*
  %1653 = load i64, i64* %1652, align 8
  %1654 = bitcast %"class.std::__1::vector.10"* %1650 to i64*
  %1655 = load i64, i64* %1654, align 8
  %1656 = sub i64 %1653, %1655
  %1657 = ashr exact i64 %1656, 6
  %1658 = icmp ugt i64 %1657, %1649
  br i1 %1658, label %1659, label %1791

1659:                                             ; preds = %1646
  %1660 = trunc i64 %1648 to i32
  %1661 = load %"struct.jxl::ModularOptions"*, %"struct.jxl::ModularOptions"** %1208, align 8
  %1662 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %1661, i64 %1635, i32 0
  %1663 = add i32 %1636, 1
  br label %1664

1664:                                             ; preds = %1786, %1659
  %1665 = phi i64 [ %1655, %1659 ], [ %1782, %1786 ]
  %1666 = phi i64 [ %1648, %1659 ], [ %1787, %1786 ]
  %1667 = phi i64 [ %1649, %1659 ], [ %1780, %1786 ]
  %1668 = phi i32 [ %1660, %1659 ], [ %1779, %1786 ]
  %1669 = inttoptr i64 %1665 to %"class.jxl::Channel"*
  %1670 = icmp ult i64 %1667, %1666
  br i1 %1670, label %1680, label %1671

1671:                                             ; preds = %1664
  %1672 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %1669, i64 %1667, i32 1
  %1673 = load i64, i64* %1672, align 8
  %1674 = load i64, i64* %1662, align 8
  %1675 = icmp ugt i64 %1673, %1674
  br i1 %1675, label %1778, label %1676

1676:                                             ; preds = %1671
  %1677 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %1669, i64 %1667, i32 2
  %1678 = load i64, i64* %1677, align 8
  %1679 = icmp ugt i64 %1678, %1674
  br i1 %1679, label %1778, label %1680

1680:                                             ; preds = %1664, %1676
  br i1 %1638, label %1681, label %1692

1681:                                             ; preds = %1680
  %1682 = load %"class.std::__1::vector.40"*, %"class.std::__1::vector.40"** %1610, align 8
  %1683 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %1682, i64 %1635, i32 0, i32 0
  %1684 = load i32*, i32** %1683, align 8
  %1685 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %1682, i64 %1635, i32 0, i32 1
  %1686 = load i32*, i32** %1685, align 8
  %1687 = icmp eq i32* %1684, %1686
  br i1 %1687, label %1778, label %1688

1688:                                             ; preds = %1681
  %1689 = sub i64 %1667, %1666
  %1690 = getelementptr inbounds i32, i32* %1684, i64 %1689
  %1691 = load i32, i32* %1690, align 4
  br label %1692

1692:                                             ; preds = %1680, %1688
  %1693 = phi i32 [ %1691, %1688 ], [ %1668, %1680 ]
  %1694 = zext i32 %1693 to i64
  %1695 = load i32*, i32** %993, align 8
  %1696 = getelementptr inbounds i32, i32* %1695, i64 %1694
  %1697 = load i32, i32* %1696, align 4
  %1698 = load %"struct.jxl::ModularMultiplierInfo"*, %"struct.jxl::ModularMultiplierInfo"** %1612, align 8
  %1699 = load %"struct.jxl::ModularMultiplierInfo"*, %"struct.jxl::ModularMultiplierInfo"** %1613, align 8
  %1700 = icmp eq %"struct.jxl::ModularMultiplierInfo"* %1698, %1699
  %1701 = ptrtoint %"struct.jxl::ModularMultiplierInfo"* %1698 to i64
  br i1 %1700, label %1710, label %1702

1702:                                             ; preds = %1692
  %1703 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1699, i64 -1, i32 0, i32 0, i64 1, i32 0, i64 0
  %1704 = load i32, i32* %1703, align 4
  %1705 = icmp eq i32 %1704, %1636
  br i1 %1705, label %1706, label %1710

1706:                                             ; preds = %1702
  %1707 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1699, i64 -1, i32 1
  %1708 = load i32, i32* %1707, align 4
  %1709 = icmp eq i32 %1708, %1697
  br i1 %1709, label %1775, label %1710

1710:                                             ; preds = %1706, %1702, %1692
  %1711 = add i32 %1668, 1
  %1712 = load %"struct.jxl::ModularMultiplierInfo"*, %"struct.jxl::ModularMultiplierInfo"** %1614, align 8
  %1713 = icmp ult %"struct.jxl::ModularMultiplierInfo"* %1699, %1712
  %1714 = ptrtoint %"struct.jxl::ModularMultiplierInfo"* %1712 to i64
  br i1 %1713, label %1715, label %1723

1715:                                             ; preds = %1710
  %1716 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1699, i64 0, i32 0, i32 0, i64 0, i32 0, i64 0
  store i32 %1668, i32* %1716, align 4
  %1717 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1699, i64 0, i32 0, i32 0, i64 0, i32 0, i64 1
  store i32 %1711, i32* %1717, align 4
  %1718 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1699, i64 0, i32 0, i32 0, i64 1, i32 0, i64 0
  store i32 %1636, i32* %1718, align 4
  %1719 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1699, i64 0, i32 0, i32 0, i64 1, i32 0, i64 1
  store i32 %1663, i32* %1719, align 4
  %1720 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1699, i64 0, i32 1
  store i32 %1697, i32* %1720, align 4
  %1721 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1699, i64 1
  %1722 = ptrtoint %"struct.jxl::ModularMultiplierInfo"* %1721 to i64
  store i64 %1722, i64* %1615, align 8
  br label %1778

1723:                                             ; preds = %1710
  %1724 = ptrtoint %"struct.jxl::ModularMultiplierInfo"* %1699 to i64
  %1725 = sub i64 %1724, %1701
  %1726 = sdiv exact i64 %1725, 20
  %1727 = add nsw i64 %1726, 1
  %1728 = icmp ugt i64 %1727, 922337203685477580
  br i1 %1728, label %1729, label %1731

1729:                                             ; preds = %1723
  %1730 = bitcast %"class.std::__1::vector.96"* %1611 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %1730) #12
  unreachable

1731:                                             ; preds = %1723
  %1732 = sub i64 %1714, %1701
  %1733 = sdiv exact i64 %1732, 20
  %1734 = icmp ult i64 %1733, 461168601842738790
  br i1 %1734, label %1735, label %1740

1735:                                             ; preds = %1731
  %1736 = shl nsw i64 %1733, 1
  %1737 = icmp ult i64 %1736, %1727
  %1738 = select i1 %1737, i64 %1727, i64 %1736
  %1739 = icmp eq i64 %1738, 0
  br i1 %1739, label %1745, label %1740

1740:                                             ; preds = %1735, %1731
  %1741 = phi i64 [ %1738, %1735 ], [ 922337203685477580, %1731 ]
  %1742 = mul i64 %1741, 20
  %1743 = call i8* @_Znwm(i64 %1742) #13
  %1744 = bitcast i8* %1743 to %"struct.jxl::ModularMultiplierInfo"*
  br label %1745

1745:                                             ; preds = %1740, %1735
  %1746 = phi i64 [ %1741, %1740 ], [ 0, %1735 ]
  %1747 = phi %"struct.jxl::ModularMultiplierInfo"* [ %1744, %1740 ], [ null, %1735 ]
  %1748 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1747, i64 %1726
  %1749 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1747, i64 %1746
  %1750 = ptrtoint %"struct.jxl::ModularMultiplierInfo"* %1749 to i64
  %1751 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1748, i64 0, i32 0, i32 0, i64 0, i32 0, i64 0
  store i32 %1668, i32* %1751, align 4
  %1752 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1747, i64 %1726, i32 0, i32 0, i64 0, i32 0, i64 1
  store i32 %1711, i32* %1752, align 4
  %1753 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1747, i64 %1726, i32 0, i32 0, i64 1, i32 0, i64 0
  store i32 %1636, i32* %1753, align 4
  %1754 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1747, i64 %1726, i32 0, i32 0, i64 1, i32 0, i64 1
  store i32 %1663, i32* %1754, align 4
  %1755 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1747, i64 %1726, i32 1
  store i32 %1697, i32* %1755, align 4
  %1756 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1748, i64 1
  %1757 = ptrtoint %"struct.jxl::ModularMultiplierInfo"* %1756 to i64
  %1758 = load %"struct.jxl::ModularMultiplierInfo"*, %"struct.jxl::ModularMultiplierInfo"** %1612, align 8
  %1759 = load i64, i64* %1615, align 8
  %1760 = ptrtoint %"struct.jxl::ModularMultiplierInfo"* %1758 to i64
  %1761 = sub i64 %1759, %1760
  %1762 = sdiv exact i64 %1761, -20
  %1763 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1748, i64 %1762
  %1764 = ptrtoint %"struct.jxl::ModularMultiplierInfo"* %1763 to i64
  %1765 = icmp sgt i64 %1761, 0
  br i1 %1765, label %1766, label %1770

1766:                                             ; preds = %1745
  %1767 = bitcast %"struct.jxl::ModularMultiplierInfo"* %1763 to i8*
  %1768 = bitcast %"struct.jxl::ModularMultiplierInfo"* %1758 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1767, i8* align 4 %1768, i64 %1761, i1 false) #10
  %1769 = load %"struct.jxl::ModularMultiplierInfo"*, %"struct.jxl::ModularMultiplierInfo"** %1612, align 8
  br label %1770

1770:                                             ; preds = %1766, %1745
  %1771 = phi %"struct.jxl::ModularMultiplierInfo"* [ %1758, %1745 ], [ %1769, %1766 ]
  store i64 %1764, i64* %1616, align 8
  store i64 %1757, i64* %1615, align 8
  store i64 %1750, i64* %1617, align 8
  %1772 = icmp eq %"struct.jxl::ModularMultiplierInfo"* %1771, null
  br i1 %1772, label %1778, label %1773

1773:                                             ; preds = %1770
  %1774 = bitcast %"struct.jxl::ModularMultiplierInfo"* %1771 to i8*
  call void @_ZdlPv(i8* %1774) #13
  br label %1778

1775:                                             ; preds = %1706
  %1776 = add i32 %1668, 1
  %1777 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1699, i64 -1, i32 0, i32 0, i64 0, i32 0, i64 1
  store i32 %1776, i32* %1777, align 4
  br label %1778

1778:                                             ; preds = %1773, %1770, %1715, %1775, %1681, %1671, %1676
  %1779 = add i32 %1668, 1
  %1780 = zext i32 %1779 to i64
  %1781 = load i64, i64* %1652, align 8
  %1782 = load i64, i64* %1654, align 8
  %1783 = sub i64 %1781, %1782
  %1784 = ashr exact i64 %1783, 6
  %1785 = icmp ugt i64 %1784, %1780
  br i1 %1785, label %1786, label %1788

1786:                                             ; preds = %1778
  %1787 = load i64, i64* %1647, align 8
  br label %1664

1788:                                             ; preds = %1778
  %1789 = load i64, i64* %1331, align 8
  %1790 = load i64, i64* %1333, align 8
  br label %1791

1791:                                             ; preds = %1788, %1646, %1639
  %1792 = phi i64 [ %1790, %1788 ], [ %1633, %1646 ], [ %1633, %1639 ]
  %1793 = phi i64 [ %1789, %1788 ], [ %1634, %1646 ], [ %1634, %1639 ]
  %1794 = add i32 %1636, 1
  %1795 = zext i32 %1794 to i64
  %1796 = sub i64 %1793, %1792
  %1797 = sdiv exact i64 %1796, 104
  %1798 = icmp ugt i64 %1797, %1795
  br i1 %1798, label %1632, label %1618

1799:                                             ; preds = %1849
  %1800 = inttoptr i64 %1853 to %"struct.jxl::ModularMultiplierInfo"*
  br label %1801

1801:                                             ; preds = %1799, %1618
  %1802 = phi %"struct.jxl::ModularMultiplierInfo"* [ %1631, %1618 ], [ %1800, %1799 ]
  %1803 = phi i64 [ 1, %1618 ], [ %1850, %1799 ]
  %1804 = phi i64 [ %1629, %1618 ], [ %1855, %1799 ]
  %1805 = icmp ugt i64 %1803, %1804
  br i1 %1805, label %1806, label %1808

1806:                                             ; preds = %1801
  %1807 = sub i64 %1803, %1804
  call void @_ZNSt3__16vectorIN3jxl21ModularMultiplierInfoENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.96"* %1619, i64 %1807) #10
  br label %1858

1808:                                             ; preds = %1801
  %1809 = icmp ult i64 %1803, %1804
  br i1 %1809, label %1810, label %1858

1810:                                             ; preds = %1808
  %1811 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1802, i64 %1803
  store %"struct.jxl::ModularMultiplierInfo"* %1811, %"struct.jxl::ModularMultiplierInfo"** %1622, align 8
  br label %1858

1812:                                             ; preds = %1618, %1849
  %1813 = phi %"struct.jxl::ModularMultiplierInfo"* [ %1857, %1849 ], [ %1631, %1618 ]
  %1814 = phi i64 [ %1851, %1849 ], [ 1, %1618 ]
  %1815 = phi i64 [ %1850, %1849 ], [ 1, %1618 ]
  %1816 = add i64 %1815, -1
  %1817 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1813, i64 %1814
  %1818 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1813, i64 %1816, i32 0, i32 0, i64 0, i32 0, i64 0
  %1819 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1817, i64 0, i32 0, i32 0, i64 0, i32 0, i64 0
  %1820 = load i32, i32* %1818, align 4
  %1821 = load i32, i32* %1819, align 4
  %1822 = icmp eq i32 %1820, %1821
  br i1 %1822, label %1823, label %1844

1823:                                             ; preds = %1812
  %1824 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1813, i64 %1816, i32 0, i32 0, i64 0, i32 0, i64 1
  %1825 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1813, i64 %1814, i32 0, i32 0, i64 0, i32 0, i64 1
  %1826 = load i32, i32* %1824, align 4
  %1827 = load i32, i32* %1825, align 4
  %1828 = icmp eq i32 %1826, %1827
  br i1 %1828, label %1829, label %1844

1829:                                             ; preds = %1823
  %1830 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1813, i64 %1816, i32 1
  %1831 = load i32, i32* %1830, align 4
  %1832 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1813, i64 %1814, i32 1
  %1833 = load i32, i32* %1832, align 4
  %1834 = icmp eq i32 %1831, %1833
  br i1 %1834, label %1835, label %1844

1835:                                             ; preds = %1829
  %1836 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1813, i64 %1816, i32 0, i32 0, i64 1, i32 0, i64 1
  %1837 = load i32, i32* %1836, align 4
  %1838 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1813, i64 %1814, i32 0, i32 0, i64 1, i32 0, i64 0
  %1839 = load i32, i32* %1838, align 4
  %1840 = icmp eq i32 %1837, %1839
  br i1 %1840, label %1841, label %1844

1841:                                             ; preds = %1835
  %1842 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1813, i64 %1814, i32 0, i32 0, i64 1, i32 0, i64 1
  %1843 = load i32, i32* %1842, align 4
  store i32 %1843, i32* %1836, align 4
  br label %1849

1844:                                             ; preds = %1812, %1835, %1829, %1823
  %1845 = add i64 %1815, 1
  %1846 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1813, i64 %1815
  %1847 = bitcast %"struct.jxl::ModularMultiplierInfo"* %1846 to i8*
  %1848 = bitcast %"struct.jxl::ModularMultiplierInfo"* %1817 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1847, i8* align 4 %1848, i64 20, i1 false)
  br label %1849

1849:                                             ; preds = %1844, %1841
  %1850 = phi i64 [ %1815, %1841 ], [ %1845, %1844 ]
  %1851 = add nuw i64 %1814, 1
  %1852 = load i64, i64* %1624, align 8
  %1853 = load i64, i64* %1626, align 8
  %1854 = sub i64 %1852, %1853
  %1855 = sdiv exact i64 %1854, 20
  %1856 = icmp ult i64 %1851, %1855
  %1857 = inttoptr i64 %1853 to %"struct.jxl::ModularMultiplierInfo"*
  br i1 %1856, label %1812, label %1799

1858:                                             ; preds = %1810, %1808, %1806, %1601
  %1859 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %5, i64 0, i32 12, i32 0, i32 0, i32 0
  %1860 = load %"class.jxl::EncoderHeuristics"*, %"class.jxl::EncoderHeuristics"** %1859, align 8
  %1861 = call i32 @_ZN3jxl19ModularFrameEncoder15PrepareEncodingEPNS_10ThreadPoolERKNS_15FrameDimensionsEPNS_17EncoderHeuristicsEPNS_6AuxOutE(%"class.jxl::ModularFrameEncoder"* %0, %"class.jxl::ThreadPool"* %6, %"struct.jxl::FrameDimensions"* dereferenceable(144) %37, %"class.jxl::EncoderHeuristics"* %1860, %"struct.jxl::AuxOut"* %7)
  %1862 = load %struct.GroupParams*, %struct.GroupParams** %1204, align 8
  %1863 = icmp eq %struct.GroupParams* %1862, null
  br i1 %1863, label %1867, label %1864

1864:                                             ; preds = %1858
  %1865 = ptrtoint %struct.GroupParams* %1862 to i64
  store i64 %1865, i64* %1369, align 8
  %1866 = bitcast %struct.GroupParams* %1862 to i8*
  call void @_ZdlPv(i8* %1866) #13
  br label %1867

1867:                                             ; preds = %1858, %1864
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1203) #10
  br label %1868

1868:                                             ; preds = %1057, %1867
  %1869 = phi i32 [ %1861, %1867 ], [ 1, %1057 ]
  %1870 = load i32*, i32** %993, align 8
  %1871 = icmp eq i32* %1870, null
  br i1 %1871, label %1876, label %1872

1872:                                             ; preds = %1868
  %1873 = ptrtoint i32* %1870 to i64
  %1874 = bitcast i32** %994 to i64*
  store i64 %1873, i64* %1874, align 8
  %1875 = bitcast i32* %1870 to i8*
  call void @_ZdlPv(i8* %1875) #13
  br label %1876

1876:                                             ; preds = %1868, %1872
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %992) #10
  br label %1877

1877:                                             ; preds = %376, %493, %93, %1876
  %1878 = phi i32 [ %1869, %1876 ], [ 1, %93 ], [ %520, %493 ], [ %400, %376 ]
  ret i32 %1878
}

declare void @_ZN3jxl15GaborishInverseEPNS_6Image3IfEEfPNS_10ThreadPoolE(%"class.jxl::Image3"*, float, %"class.jxl::ThreadPool"*) local_unnamed_addr #2

declare void @_ZN3jxl23FindBestPatchDictionaryERKNS_6Image3IfEEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_6AuxOutEb(%"class.jxl::Image3"* dereferenceable(96), %"struct.jxl::PassesEncoderState"*, %"class.jxl::ThreadPool"*, %"struct.jxl::AuxOut"*, i1 zeroext) local_unnamed_addr #2

declare void @_ZN3jxl22PatchDictionaryEncoder12SubtractFromERKNS_15PatchDictionaryEPNS_6Image3IfEE(%"class.jxl::PatchDictionary"* dereferenceable(80), %"class.jxl::Image3"*) local_unnamed_addr #2

declare void @_ZN3jxl5ImageC1Emmii(%"class.jxl::Image"*, i64, i64, i32, i32) unnamed_addr #2

; Function Attrs: nounwind
declare dereferenceable(104) %"class.jxl::Image"* @_ZN3jxl5ImageaSEOS0_(%"class.jxl::Image"*, %"class.jxl::Image"* dereferenceable(104)) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN3jxl5ImageD1Ev(%"class.jxl::Image"*) unnamed_addr #3

declare void @_ZN3jxl26DequantMatricesSetCustomDCEPNS_15DequantMatricesEPKf(%"class.jxl::DequantMatrices"*, float*) local_unnamed_addr #2

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #2

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZN3jxl12_GLOBAL__N_112float_to_intEPKfPimjjbf(float* nocapture readonly, i32* nocapture, i64, i32, i32, i1 zeroext, float) unnamed_addr #0 {
  %8 = bitcast i32* %1 to i8*
  %9 = bitcast float* %0 to i8*
  %10 = icmp ult i32 %3, 33
  br i1 %10, label %14, label %11

11:                                               ; preds = %7
  %12 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.2, i64 0, i64 0), i32 238, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.37, i64 0, i64 0)) #10
  %13 = tail call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

14:                                               ; preds = %7
  br i1 %5, label %135, label %15

15:                                               ; preds = %14
  %16 = icmp eq i64 %2, 0
  br i1 %16, label %203, label %17

17:                                               ; preds = %15
  %18 = icmp ult i64 %2, 8
  br i1 %18, label %101, label %19

19:                                               ; preds = %17
  %20 = getelementptr i32, i32* %1, i64 %2
  %21 = getelementptr float, float* %0, i64 %2
  %22 = bitcast float* %21 to i32*
  %23 = icmp ugt i32* %22, %1
  %24 = bitcast i32* %20 to float*
  %25 = icmp ugt float* %24, %0
  %26 = and i1 %23, %25
  br i1 %26, label %101, label %27

27:                                               ; preds = %19
  %28 = and i64 %2, -8
  %29 = insertelement <4 x float> undef, float %6, i32 0
  %30 = shufflevector <4 x float> %29, <4 x float> undef, <4 x i32> zeroinitializer
  %31 = insertelement <4 x float> undef, float %6, i32 0
  %32 = shufflevector <4 x float> %31, <4 x float> undef, <4 x i32> zeroinitializer
  %33 = add i64 %28, -8
  %34 = lshr exact i64 %33, 3
  %35 = add nuw nsw i64 %34, 1
  %36 = and i64 %35, 1
  %37 = icmp eq i64 %33, 0
  br i1 %37, label %79, label %38

38:                                               ; preds = %27
  %39 = sub nuw nsw i64 %35, %36
  br label %40

40:                                               ; preds = %40, %38
  %41 = phi i64 [ 0, %38 ], [ %76, %40 ]
  %42 = phi i64 [ %39, %38 ], [ %77, %40 ]
  %43 = getelementptr inbounds float, float* %0, i64 %41
  %44 = bitcast float* %43 to <4 x float>*
  %45 = load <4 x float>, <4 x float>* %44, align 4, !alias.scope !30
  %46 = getelementptr inbounds float, float* %43, i64 4
  %47 = bitcast float* %46 to <4 x float>*
  %48 = load <4 x float>, <4 x float>* %47, align 4, !alias.scope !30
  %49 = fmul <4 x float> %45, %30
  %50 = fmul <4 x float> %48, %32
  %51 = fadd <4 x float> %49, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %52 = fadd <4 x float> %50, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %53 = fptosi <4 x float> %51 to <4 x i32>
  %54 = fptosi <4 x float> %52 to <4 x i32>
  %55 = getelementptr inbounds i32, i32* %1, i64 %41
  %56 = bitcast i32* %55 to <4 x i32>*
  store <4 x i32> %53, <4 x i32>* %56, align 4, !alias.scope !33, !noalias !30
  %57 = getelementptr inbounds i32, i32* %55, i64 4
  %58 = bitcast i32* %57 to <4 x i32>*
  store <4 x i32> %54, <4 x i32>* %58, align 4, !alias.scope !33, !noalias !30
  %59 = or i64 %41, 8
  %60 = getelementptr inbounds float, float* %0, i64 %59
  %61 = bitcast float* %60 to <4 x float>*
  %62 = load <4 x float>, <4 x float>* %61, align 4, !alias.scope !30
  %63 = getelementptr inbounds float, float* %60, i64 4
  %64 = bitcast float* %63 to <4 x float>*
  %65 = load <4 x float>, <4 x float>* %64, align 4, !alias.scope !30
  %66 = fmul <4 x float> %62, %30
  %67 = fmul <4 x float> %65, %32
  %68 = fadd <4 x float> %66, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %69 = fadd <4 x float> %67, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %70 = fptosi <4 x float> %68 to <4 x i32>
  %71 = fptosi <4 x float> %69 to <4 x i32>
  %72 = getelementptr inbounds i32, i32* %1, i64 %59
  %73 = bitcast i32* %72 to <4 x i32>*
  store <4 x i32> %70, <4 x i32>* %73, align 4, !alias.scope !33, !noalias !30
  %74 = getelementptr inbounds i32, i32* %72, i64 4
  %75 = bitcast i32* %74 to <4 x i32>*
  store <4 x i32> %71, <4 x i32>* %75, align 4, !alias.scope !33, !noalias !30
  %76 = add i64 %41, 16
  %77 = add i64 %42, -2
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %79, label %40, !llvm.loop !35

79:                                               ; preds = %40, %27
  %80 = phi i64 [ 0, %27 ], [ %76, %40 ]
  %81 = icmp eq i64 %36, 0
  br i1 %81, label %99, label %82

82:                                               ; preds = %79
  %83 = getelementptr inbounds float, float* %0, i64 %80
  %84 = bitcast float* %83 to <4 x float>*
  %85 = load <4 x float>, <4 x float>* %84, align 4, !alias.scope !30
  %86 = getelementptr inbounds float, float* %83, i64 4
  %87 = bitcast float* %86 to <4 x float>*
  %88 = load <4 x float>, <4 x float>* %87, align 4, !alias.scope !30
  %89 = fmul <4 x float> %85, %30
  %90 = fmul <4 x float> %88, %32
  %91 = fadd <4 x float> %89, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %92 = fadd <4 x float> %90, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %93 = fptosi <4 x float> %91 to <4 x i32>
  %94 = fptosi <4 x float> %92 to <4 x i32>
  %95 = getelementptr inbounds i32, i32* %1, i64 %80
  %96 = bitcast i32* %95 to <4 x i32>*
  store <4 x i32> %93, <4 x i32>* %96, align 4, !alias.scope !33, !noalias !30
  %97 = getelementptr inbounds i32, i32* %95, i64 4
  %98 = bitcast i32* %97 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %98, align 4, !alias.scope !33, !noalias !30
  br label %99

99:                                               ; preds = %79, %82
  %100 = icmp eq i64 %28, %2
  br i1 %100, label %203, label %101

101:                                              ; preds = %99, %19, %17
  %102 = phi i64 [ 0, %19 ], [ 0, %17 ], [ %28, %99 ]
  %103 = xor i64 %102, -1
  %104 = and i64 %2, 1
  %105 = icmp eq i64 %104, 0
  br i1 %105, label %114, label %106

106:                                              ; preds = %101
  %107 = getelementptr inbounds float, float* %0, i64 %102
  %108 = load float, float* %107, align 4
  %109 = fmul float %108, %6
  %110 = fadd float %109, 5.000000e-01
  %111 = fptosi float %110 to i32
  %112 = getelementptr inbounds i32, i32* %1, i64 %102
  store i32 %111, i32* %112, align 4
  %113 = or i64 %102, 1
  br label %114

114:                                              ; preds = %101, %106
  %115 = phi i64 [ %102, %101 ], [ %113, %106 ]
  %116 = sub i64 0, %2
  %117 = icmp eq i64 %103, %116
  br i1 %117, label %203, label %118

118:                                              ; preds = %114, %118
  %119 = phi i64 [ %133, %118 ], [ %115, %114 ]
  %120 = getelementptr inbounds float, float* %0, i64 %119
  %121 = load float, float* %120, align 4
  %122 = fmul float %121, %6
  %123 = fadd float %122, 5.000000e-01
  %124 = fptosi float %123 to i32
  %125 = getelementptr inbounds i32, i32* %1, i64 %119
  store i32 %124, i32* %125, align 4
  %126 = add nuw i64 %119, 1
  %127 = getelementptr inbounds float, float* %0, i64 %126
  %128 = load float, float* %127, align 4
  %129 = fmul float %128, %6
  %130 = fadd float %129, 5.000000e-01
  %131 = fptosi float %130 to i32
  %132 = getelementptr inbounds i32, i32* %1, i64 %126
  store i32 %131, i32* %132, align 4
  %133 = add nuw i64 %119, 2
  %134 = icmp eq i64 %133, %2
  br i1 %134, label %203, label %118, !llvm.loop !36

135:                                              ; preds = %14
  %136 = icmp eq i32 %3, 32
  br i1 %136, label %137, label %144

137:                                              ; preds = %135
  %138 = icmp eq i32 %4, 8
  br i1 %138, label %142, label %139

139:                                              ; preds = %137
  %140 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.2, i64 0, i64 0), i32 246, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.38, i64 0, i64 0)) #10
  %141 = tail call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

142:                                              ; preds = %137
  %143 = shl i64 %2, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %9, i64 %143, i1 false)
  br label %203

144:                                              ; preds = %135
  %145 = add i32 %4, -1
  %146 = shl nsw i32 -1, %145
  %147 = xor i32 %146, -1
  %148 = shl nsw i32 -1, %4
  %149 = xor i32 %148, -1
  %150 = add nsw i32 %3, -1
  %151 = shl i32 1, %150
  %152 = xor i32 %4, -1
  %153 = add i32 %152, %3
  %154 = sub nsw i32 23, %153
  %155 = sub nsw i32 0, %153
  %156 = shl nsw i32 -1, %154
  %157 = xor i32 %156, -1
  %158 = icmp eq i64 %2, 0
  br i1 %158, label %203, label %159

159:                                              ; preds = %144, %198
  %160 = phi i64 [ %201, %198 ], [ 0, %144 ]
  %161 = getelementptr inbounds float, float* %0, i64 %160
  %162 = bitcast float* %161 to i32*
  %163 = load i32, i32* %162, align 4
  %164 = lshr i32 %163, 31
  %165 = and i32 %163, 2147483647
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %167, label %170

167:                                              ; preds = %159
  %168 = icmp eq i32 %164, 0
  %169 = select i1 %168, i32 0, i32 %151
  br label %198

170:                                              ; preds = %159
  %171 = lshr i32 %165, 23
  %172 = add nsw i32 %171, -127
  %173 = icmp eq i32 %172, 128
  br i1 %173, label %203, label %174

174:                                              ; preds = %170
  %175 = and i32 %163, 8388607
  %176 = add nsw i32 %172, %147
  %177 = icmp slt i32 %176, 0
  br i1 %177, label %178, label %184

178:                                              ; preds = %174
  %179 = icmp slt i32 %176, %155
  br i1 %179, label %203, label %180

180:                                              ; preds = %178
  %181 = or i32 %175, 8388608
  %182 = sub nsw i32 1, %176
  %183 = lshr i32 %181, %182
  br label %184

184:                                              ; preds = %180, %174
  %185 = phi i32 [ 0, %180 ], [ %176, %174 ]
  %186 = phi i32 [ %183, %180 ], [ %175, %174 ]
  %187 = icmp sle i32 %185, %149
  %188 = and i32 %186, %157
  %189 = icmp eq i32 %188, 0
  %190 = and i1 %187, %189
  br i1 %190, label %191, label %203

191:                                              ; preds = %184
  %192 = lshr i32 %186, %154
  %193 = icmp eq i32 %164, 0
  %194 = select i1 %193, i32 0, i32 %151
  %195 = shl i32 %185, %153
  %196 = or i32 %195, %194
  %197 = or i32 %196, %192
  br label %198

198:                                              ; preds = %167, %191
  %199 = phi i32 [ %169, %167 ], [ %197, %191 ]
  %200 = getelementptr inbounds i32, i32* %1, i64 %160
  store i32 %199, i32* %200, align 4
  %201 = add nuw i64 %160, 1
  %202 = icmp eq i64 %201, %2
  br i1 %202, label %203, label %159

203:                                              ; preds = %114, %118, %184, %170, %178, %198, %99, %144, %15, %142
  %204 = phi i32 [ 0, %142 ], [ 0, %144 ], [ 0, %15 ], [ 0, %99 ], [ 1, %170 ], [ 1, %184 ], [ 0, %198 ], [ 1, %178 ], [ 0, %118 ], [ 0, %114 ]
  ret i32 %204
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN3jxl9TransformC1ENS_11TransformIdE(%"class.jxl::Transform"*, i32) unnamed_addr #2

declare zeroext i1 @_ZN3jxl5Image12do_transformERKNS_9TransformERKNS_8weighted6HeaderE(%"class.jxl::Image"*, %"class.jxl::Transform"* dereferenceable(72), %"struct.jxl::weighted::Header"* dereferenceable(56)) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl9TransformD2Ev(%"class.jxl::Transform"*) unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl9TransformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 7
  %4 = getelementptr inbounds %"class.std::__1::vector.21", %"class.std::__1::vector.21"* %3, i64 0, i32 0, i32 0
  %5 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %4, align 8
  %6 = icmp eq %"struct.jxl::SqueezeParams"* %5, null
  br i1 %6, label %24, label %7

7:                                                ; preds = %1
  %8 = bitcast %"struct.jxl::SqueezeParams"* %5 to i8*
  %9 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 7, i32 0, i32 1
  %10 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %9, align 8
  %11 = icmp eq %"struct.jxl::SqueezeParams"* %10, %5
  br i1 %11, label %22, label %12

12:                                               ; preds = %7, %12
  %13 = phi %"struct.jxl::SqueezeParams"* [ %14, %12 ], [ %10, %7 ]
  %14 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %13, i64 -1
  %15 = bitcast %"struct.jxl::SqueezeParams"* %14 to void (%"struct.jxl::SqueezeParams"*)***
  %16 = load void (%"struct.jxl::SqueezeParams"*)**, void (%"struct.jxl::SqueezeParams"*)*** %15, align 8
  %17 = load void (%"struct.jxl::SqueezeParams"*)*, void (%"struct.jxl::SqueezeParams"*)** %16, align 8
  tail call void %17(%"struct.jxl::SqueezeParams"* %14) #10
  %18 = icmp eq %"struct.jxl::SqueezeParams"* %14, %5
  br i1 %18, label %19, label %12

19:                                               ; preds = %12
  %20 = bitcast %"class.std::__1::vector.21"* %3 to i8**
  %21 = load i8*, i8** %20, align 8
  br label %22

22:                                               ; preds = %19, %7
  %23 = phi i8* [ %21, %19 ], [ %8, %7 ]
  store %"struct.jxl::SqueezeParams"* %5, %"struct.jxl::SqueezeParams"** %9, align 8
  tail call void @_ZdlPv(i8* %23) #13
  br label %24

24:                                               ; preds = %1, %22
  ret void
}

declare void @_ZNK3jxl7Channel14compute_minmaxEPiS1_(%"class.jxl::Channel"*, i32*, i32*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl19ModularFrameEncoder15PrepareEncodingEPNS_10ThreadPoolERKNS_15FrameDimensionsEPNS_17EncoderHeuristicsEPNS_6AuxOutE(%"class.jxl::ModularFrameEncoder"*, %"class.jxl::ThreadPool"* readonly, %"struct.jxl::FrameDimensions"* dereferenceable(144), %"class.jxl::EncoderHeuristics"*, %"struct.jxl::AuxOut"*) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.jxl::ThreadPool::RunCallState.476", align 8
  %7 = alloca %"class.jxl::ThreadPool::RunCallState.476", align 8
  %8 = alloca double, align 8
  %9 = alloca %"class.jxl::ThreadPool", align 8
  %10 = alloca %"class.jxl::ThreadPool::RunCallState.478", align 8
  %11 = alloca %"class.jxl::ThreadPool::RunCallState.478", align 8
  %12 = alloca double, align 8
  %13 = alloca %"class.jxl::ThreadPool", align 8
  %14 = alloca %"struct.jxl::AuxOut"*, align 8
  %15 = alloca %"class.std::__1::vector", align 8
  %16 = alloca %"struct.std::__1::atomic_flag", align 1
  %17 = alloca %"class.std::__1::vector.338", align 8
  %18 = alloca %class.anon.345, align 8
  %19 = alloca %"class.std::__1::vector.156", align 8
  %20 = alloca %"class.std::__1::vector.52", align 8
  %21 = alloca %"class.std::__1::vector.52", align 16
  %22 = alloca %"class.std::__1::basic_string", align 8
  %23 = alloca %class.anon.349, align 8
  store %"struct.jxl::AuxOut"* %4, %"struct.jxl::AuxOut"** %14, align 8
  %24 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 4
  %25 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %24, i64 0, i32 0, i32 0
  %26 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %25, align 8
  %27 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 4, i32 0, i32 1
  %28 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %27, align 8
  %29 = icmp eq %"struct.jxl::PropertyDecisionNode"* %26, %28
  br i1 %29, label %30, label %794

30:                                               ; preds = %5
  %31 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 2
  %32 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 2, i32 0, i32 1
  %33 = bitcast %"class.jxl::Image"** %32 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = bitcast %"class.std::__1::vector.8"* %31 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = sub i64 %34, %36
  %38 = sdiv exact i64 %37, 104
  %39 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 6
  %40 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 6, i32 0, i32 1
  %41 = bitcast %"struct.jxl::GroupHeader"** %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = bitcast %"class.std::__1::vector.73"* %39 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = sub i64 %42, %44
  %46 = sdiv exact i64 %45, 96
  %47 = icmp ugt i64 %38, %46
  %48 = inttoptr i64 %44 to %"struct.jxl::GroupHeader"*
  %49 = inttoptr i64 %42 to %"struct.jxl::GroupHeader"*
  br i1 %47, label %50, label %52

50:                                               ; preds = %30
  %51 = sub nsw i64 %38, %46
  tail call void @_ZNSt3__16vectorIN3jxl11GroupHeaderENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.73"* %39, i64 %51) #10
  br label %65

52:                                               ; preds = %30
  %53 = icmp ult i64 %38, %46
  br i1 %53, label %54, label %65

54:                                               ; preds = %52
  %55 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %48, i64 %38
  %56 = icmp eq %"struct.jxl::GroupHeader"* %55, %49
  br i1 %56, label %64, label %57

57:                                               ; preds = %54, %57
  %58 = phi %"struct.jxl::GroupHeader"* [ %59, %57 ], [ %49, %54 ]
  %59 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %58, i64 -1
  %60 = bitcast %"struct.jxl::GroupHeader"* %59 to void (%"struct.jxl::GroupHeader"*)***
  %61 = load void (%"struct.jxl::GroupHeader"*)**, void (%"struct.jxl::GroupHeader"*)*** %60, align 8
  %62 = load void (%"struct.jxl::GroupHeader"*)*, void (%"struct.jxl::GroupHeader"*)** %61, align 8
  tail call void %62(%"struct.jxl::GroupHeader"* %59) #10
  %63 = icmp eq %"struct.jxl::GroupHeader"* %59, %55
  br i1 %63, label %64, label %57

64:                                               ; preds = %57, %54
  store %"struct.jxl::GroupHeader"* %55, %"struct.jxl::GroupHeader"** %40, align 8
  br label %65

65:                                               ; preds = %50, %52, %64
  %66 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 7
  %67 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 7, i32 0, i32 1
  %68 = bitcast %"class.std::__1::vector.61"** %67 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = bitcast %"class.std::__1::vector.59"* %66 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = sub i64 %69, %71
  %73 = sdiv exact i64 %72, 24
  %74 = icmp ugt i64 %38, %73
  %75 = inttoptr i64 %71 to %"class.std::__1::vector.61"*
  %76 = inttoptr i64 %69 to %"class.std::__1::vector.61"*
  br i1 %74, label %77, label %79

77:                                               ; preds = %65
  %78 = sub nsw i64 %38, %73
  tail call void @_ZNSt3__16vectorINS0_IN3jxl5TokenENS_9allocatorIS2_EEEENS3_IS5_EEE8__appendEm(%"class.std::__1::vector.59"* %66, i64 %78) #10
  br label %98

79:                                               ; preds = %65
  %80 = icmp ult i64 %38, %73
  br i1 %80, label %81, label %98

81:                                               ; preds = %79
  %82 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %75, i64 %38
  %83 = icmp eq %"class.std::__1::vector.61"* %82, %76
  br i1 %83, label %97, label %84

84:                                               ; preds = %81, %95
  %85 = phi %"class.std::__1::vector.61"* [ %86, %95 ], [ %76, %81 ]
  %86 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %85, i64 -1
  %87 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %86, i64 0, i32 0, i32 0
  %88 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %87, align 8
  %89 = icmp eq %"struct.jxl::Token"* %88, null
  br i1 %89, label %95, label %90

90:                                               ; preds = %84
  %91 = ptrtoint %"struct.jxl::Token"* %88 to i64
  %92 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %85, i64 -1, i32 0, i32 1
  %93 = bitcast %"struct.jxl::Token"** %92 to i64*
  store i64 %91, i64* %93, align 8
  %94 = bitcast %"struct.jxl::Token"* %88 to i8*
  tail call void @_ZdlPv(i8* %94) #13
  br label %95

95:                                               ; preds = %90, %84
  %96 = icmp eq %"class.std::__1::vector.61"* %86, %82
  br i1 %96, label %97, label %84

97:                                               ; preds = %95, %81
  store %"class.std::__1::vector.61"* %82, %"class.std::__1::vector.61"** %67, align 8
  br label %98

98:                                               ; preds = %77, %79, %97
  %99 = bitcast %"class.jxl::EncoderHeuristics"* %3 to i1 (%"class.jxl::EncoderHeuristics"*, %"struct.jxl::FrameDimensions"*, %"class.std::__1::vector.52"*)***
  %100 = load i1 (%"class.jxl::EncoderHeuristics"*, %"struct.jxl::FrameDimensions"*, %"class.std::__1::vector.52"*)**, i1 (%"class.jxl::EncoderHeuristics"*, %"struct.jxl::FrameDimensions"*, %"class.std::__1::vector.52"*)*** %99, align 8
  %101 = getelementptr inbounds i1 (%"class.jxl::EncoderHeuristics"*, %"struct.jxl::FrameDimensions"*, %"class.std::__1::vector.52"*)*, i1 (%"class.jxl::EncoderHeuristics"*, %"struct.jxl::FrameDimensions"*, %"class.std::__1::vector.52"*)** %100, i64 3
  %102 = load i1 (%"class.jxl::EncoderHeuristics"*, %"struct.jxl::FrameDimensions"*, %"class.std::__1::vector.52"*)*, i1 (%"class.jxl::EncoderHeuristics"*, %"struct.jxl::FrameDimensions"*, %"class.std::__1::vector.52"*)** %101, align 8
  %103 = tail call zeroext i1 %102(%"class.jxl::EncoderHeuristics"* %3, %"struct.jxl::FrameDimensions"* dereferenceable(144) %2, %"class.std::__1::vector.52"* %24) #10
  br i1 %103, label %582, label %104

104:                                              ; preds = %98
  %105 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 7
  %106 = load i32, i32* %105, align 4
  %107 = icmp eq i32 %106, 7
  br i1 %107, label %108, label %116

108:                                              ; preds = %104
  %109 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 12
  %110 = load float, float* %109, align 8
  %111 = fcmp une float %110, 1.000000e+02
  br i1 %111, label %116, label %112

112:                                              ; preds = %108
  %113 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 14
  %114 = load i8, i8* %113, align 8, !range !2
  %115 = icmp eq i8 %114, 0
  br i1 %115, label %116, label %475

116:                                              ; preds = %112, %104, %108
  %117 = bitcast %"class.std::__1::vector"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %117) #10
  %118 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %15, i64 0, i32 0, i32 0
  %119 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %15, i64 0, i32 0, i32 1
  %120 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %15, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %117, i8 0, i64 24, i1 false) #10
  %121 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 14
  %122 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 14, i32 0, i32 1
  %123 = bitcast i64** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast %"class.std::__1::vector"* %121 to i64*
  %126 = load i64, i64* %125, align 8
  %127 = sub i64 %124, %126
  %128 = ashr exact i64 %127, 3
  %129 = bitcast i64** %120 to i64*
  %130 = bitcast %"class.std::__1::vector"* %15 to i64*
  %131 = icmp eq i64 %127, 0
  br i1 %131, label %145, label %132

132:                                              ; preds = %116
  %133 = icmp ugt i64 %128, 2305843009213693951
  br i1 %133, label %134, label %135

134:                                              ; preds = %132
  tail call void @abort() #12
  unreachable

135:                                              ; preds = %132
  %136 = bitcast i64** %119 to i64*
  %137 = tail call i8* @_Znwm(i64 %127) #13
  %138 = bitcast i8* %137 to i64*
  %139 = ptrtoint i8* %137 to i64
  %140 = getelementptr inbounds i64, i64* %138, i64 %128
  %141 = ptrtoint i64* %140 to i64
  %142 = ptrtoint i8* %137 to i64
  store i64 %142, i64* %130, align 8
  store i64 %139, i64* %136, align 8
  store i64 %141, i64* %129, align 8
  %143 = bitcast i8* %137 to i64*
  %144 = icmp eq i64 %127, 8
  br i1 %144, label %464, label %145

145:                                              ; preds = %116, %135
  %146 = phi i64* [ %138, %135 ], [ null, %116 ]
  %147 = phi i64 [ %139, %135 ], [ 0, %116 ]
  %148 = phi i64* [ %143, %135 ], [ null, %116 ]
  %149 = phi i64 [ %142, %135 ], [ 0, %116 ]
  %150 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %31, i64 0, i32 0, i32 0
  %151 = bitcast i64** %119 to i64*
  br label %154

152:                                              ; preds = %278
  %153 = icmp eq i64* %281, %280
  br i1 %153, label %459, label %290

154:                                              ; preds = %145, %278
  %155 = phi i64 [ %149, %145 ], [ %279, %278 ]
  %156 = phi i64* [ %146, %145 ], [ %280, %278 ]
  %157 = phi i64* [ %148, %145 ], [ %281, %278 ]
  %158 = phi i64 [ %147, %145 ], [ %282, %278 ]
  %159 = phi i64* [ %146, %145 ], [ %283, %278 ]
  %160 = phi i64 [ %126, %145 ], [ %285, %278 ]
  %161 = phi i64 [ 0, %145 ], [ %165, %278 ]
  %162 = inttoptr i64 %160 to i64*
  %163 = getelementptr inbounds i64, i64* %162, i64 %161
  %164 = load i64, i64* %163, align 8
  %165 = add nuw i64 %161, 1
  %166 = getelementptr inbounds i64, i64* %162, i64 %165
  %167 = load i64, i64* %166, align 8
  %168 = icmp ult i64 %164, %167
  br i1 %168, label %169, label %278

169:                                              ; preds = %154
  %170 = load %"class.jxl::Image"*, %"class.jxl::Image"** %150, align 8
  br label %174

171:                                              ; preds = %206
  %172 = and i8 %207, 1
  %173 = icmp eq i8 %172, 0
  br i1 %173, label %278, label %226

174:                                              ; preds = %206, %169
  %175 = phi i8 [ 0, %169 ], [ %207, %206 ]
  %176 = phi i64 [ %164, %169 ], [ %208, %206 ]
  %177 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %170, i64 %176, i32 0, i32 0, i32 0
  %178 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %177, align 8
  %179 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %170, i64 %176, i32 0, i32 0, i32 1
  %180 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %179, align 8
  %181 = icmp eq %"class.jxl::Channel"* %178, %180
  br i1 %181, label %206, label %182

182:                                              ; preds = %174
  %183 = ptrtoint %"class.jxl::Channel"* %178 to i64
  %184 = getelementptr %"class.jxl::Channel", %"class.jxl::Channel"* %180, i64 -1
  %185 = ptrtoint %"class.jxl::Channel"* %184 to i64
  %186 = sub i64 %185, %183
  %187 = and i64 %186, 64
  %188 = icmp eq i64 %187, 0
  br i1 %188, label %189, label %201

189:                                              ; preds = %182
  %190 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %178, i64 0, i32 1
  %191 = load i64, i64* %190, align 8
  %192 = icmp eq i64 %191, 0
  br i1 %192, label %198, label %193

193:                                              ; preds = %189
  %194 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %178, i64 0, i32 2
  %195 = load i64, i64* %194, align 8
  %196 = icmp eq i64 %195, 0
  %197 = select i1 %196, i8 %175, i8 1
  br label %198

198:                                              ; preds = %193, %189
  %199 = phi i8 [ %175, %189 ], [ %197, %193 ]
  %200 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %178, i64 1
  br label %201

201:                                              ; preds = %198, %182
  %202 = phi i8 [ %199, %198 ], [ undef, %182 ]
  %203 = phi i8 [ %199, %198 ], [ %175, %182 ]
  %204 = phi %"class.jxl::Channel"* [ %200, %198 ], [ %178, %182 ]
  %205 = icmp ult i64 %186, 64
  br i1 %205, label %206, label %210

206:                                              ; preds = %201, %801, %174
  %207 = phi i8 [ %175, %174 ], [ %202, %201 ], [ %802, %801 ]
  %208 = add nuw i64 %176, 1
  %209 = icmp eq i64 %208, %167
  br i1 %209, label %171, label %174

210:                                              ; preds = %201, %801
  %211 = phi i8 [ %802, %801 ], [ %203, %201 ]
  %212 = phi %"class.jxl::Channel"* [ %803, %801 ], [ %204, %201 ]
  %213 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %212, i64 0, i32 1
  %214 = load i64, i64* %213, align 8
  %215 = icmp eq i64 %214, 0
  br i1 %215, label %221, label %216

216:                                              ; preds = %210
  %217 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %212, i64 0, i32 2
  %218 = load i64, i64* %217, align 8
  %219 = icmp eq i64 %218, 0
  %220 = select i1 %219, i8 %211, i8 1
  br label %221

221:                                              ; preds = %216, %210
  %222 = phi i8 [ %211, %210 ], [ %220, %216 ]
  %223 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %212, i64 1, i32 1
  %224 = load i64, i64* %223, align 8
  %225 = icmp eq i64 %224, 0
  br i1 %225, label %801, label %796

226:                                              ; preds = %171
  %227 = load i64*, i64** %120, align 8
  %228 = icmp eq i64* %159, %227
  br i1 %228, label %232, label %229

229:                                              ; preds = %226
  store i64 %164, i64* %159, align 8
  %230 = getelementptr inbounds i64, i64* %159, i64 1
  %231 = ptrtoint i64* %230 to i64
  store i64 %231, i64* %151, align 8
  br label %278

232:                                              ; preds = %226
  %233 = ptrtoint i64* %227 to i64
  %234 = sub i64 %233, %155
  %235 = ashr exact i64 %234, 3
  %236 = add nsw i64 %235, 1
  %237 = icmp ugt i64 %236, 2305843009213693951
  br i1 %237, label %238, label %240

238:                                              ; preds = %232
  %239 = bitcast %"class.std::__1::vector"* %15 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %239) #12
  unreachable

240:                                              ; preds = %232
  %241 = icmp ult i64 %235, 1152921504606846975
  br i1 %241, label %242, label %250

242:                                              ; preds = %240
  %243 = ashr exact i64 %234, 2
  %244 = icmp ult i64 %243, %236
  %245 = select i1 %244, i64 %236, i64 %243
  %246 = icmp eq i64 %245, 0
  br i1 %246, label %256, label %247

247:                                              ; preds = %242
  %248 = icmp ugt i64 %245, 2305843009213693951
  br i1 %248, label %249, label %250

249:                                              ; preds = %247
  tail call void @abort() #12
  unreachable

250:                                              ; preds = %247, %240
  %251 = phi i64 [ %245, %247 ], [ 2305843009213693951, %240 ]
  %252 = shl i64 %251, 3
  %253 = tail call i8* @_Znwm(i64 %252) #13
  %254 = bitcast i8* %253 to i64*
  %255 = load i64, i64* %163, align 8
  br label %256

256:                                              ; preds = %250, %242
  %257 = phi i64 [ %255, %250 ], [ %164, %242 ]
  %258 = phi i64 [ %251, %250 ], [ 0, %242 ]
  %259 = phi i64* [ %254, %250 ], [ null, %242 ]
  %260 = getelementptr inbounds i64, i64* %259, i64 %235
  %261 = getelementptr inbounds i64, i64* %259, i64 %258
  %262 = ptrtoint i64* %261 to i64
  store i64 %257, i64* %260, align 8
  %263 = getelementptr inbounds i64, i64* %260, i64 1
  %264 = ptrtoint i64* %263 to i64
  %265 = sub i64 %158, %155
  %266 = ashr exact i64 %265, 3
  %267 = sub nsw i64 0, %266
  %268 = getelementptr inbounds i64, i64* %260, i64 %267
  %269 = ptrtoint i64* %268 to i64
  %270 = icmp sgt i64 %265, 0
  br i1 %270, label %271, label %274

271:                                              ; preds = %256
  %272 = bitcast i64* %268 to i8*
  %273 = inttoptr i64 %155 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %272, i8* align 8 %273, i64 %265, i1 false) #10
  br label %274

274:                                              ; preds = %271, %256
  store i64 %269, i64* %130, align 8
  store i64 %264, i64* %151, align 8
  store i64 %262, i64* %129, align 8
  %275 = icmp eq i64 %155, 0
  br i1 %275, label %278, label %276

276:                                              ; preds = %274
  %277 = inttoptr i64 %155 to i8*
  tail call void @_ZdlPv(i8* %277) #13
  br label %278

278:                                              ; preds = %154, %276, %274, %229, %171
  %279 = phi i64 [ %269, %276 ], [ %269, %274 ], [ %155, %229 ], [ %155, %171 ], [ %155, %154 ]
  %280 = phi i64* [ %263, %276 ], [ %263, %274 ], [ %230, %229 ], [ %156, %171 ], [ %156, %154 ]
  %281 = phi i64* [ %268, %276 ], [ %268, %274 ], [ %157, %229 ], [ %157, %171 ], [ %157, %154 ]
  %282 = phi i64 [ %264, %276 ], [ %264, %274 ], [ %231, %229 ], [ %158, %171 ], [ %158, %154 ]
  %283 = phi i64* [ %263, %276 ], [ %263, %274 ], [ %230, %229 ], [ %159, %171 ], [ %159, %154 ]
  %284 = load i64, i64* %123, align 8
  %285 = load i64, i64* %125, align 8
  %286 = sub i64 %284, %285
  %287 = ashr exact i64 %286, 3
  %288 = add nsw i64 %287, -1
  %289 = icmp ult i64 %165, %288
  br i1 %289, label %154, label %152

290:                                              ; preds = %152
  %291 = inttoptr i64 %284 to i64*
  %292 = getelementptr inbounds i64, i64* %291, i64 -1
  %293 = load i64*, i64** %120, align 8
  %294 = icmp eq i64* %280, %293
  %295 = ptrtoint i64* %293 to i64
  br i1 %294, label %301, label %296

296:                                              ; preds = %290
  %297 = load i64, i64* %292, align 8
  store i64 %297, i64* %280, align 8
  %298 = getelementptr inbounds i64, i64* %280, i64 1
  %299 = ptrtoint i64* %298 to i64
  %300 = bitcast i64** %119 to i64*
  store i64 %299, i64* %300, align 8
  br label %350

301:                                              ; preds = %290
  %302 = ptrtoint i64* %280 to i64
  %303 = bitcast i64** %119 to i64*
  %304 = sub i64 %302, %279
  %305 = ashr exact i64 %304, 3
  %306 = add nsw i64 %305, 1
  %307 = icmp ugt i64 %306, 2305843009213693951
  br i1 %307, label %308, label %310

308:                                              ; preds = %301
  %309 = bitcast %"class.std::__1::vector"* %15 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %309) #12
  unreachable

310:                                              ; preds = %301
  %311 = sub i64 %295, %279
  %312 = ashr exact i64 %311, 3
  %313 = icmp ult i64 %312, 1152921504606846975
  br i1 %313, label %314, label %322

314:                                              ; preds = %310
  %315 = ashr exact i64 %311, 2
  %316 = icmp ult i64 %315, %306
  %317 = select i1 %316, i64 %306, i64 %315
  %318 = icmp eq i64 %317, 0
  br i1 %318, label %327, label %319

319:                                              ; preds = %314
  %320 = icmp ugt i64 %317, 2305843009213693951
  br i1 %320, label %321, label %322

321:                                              ; preds = %319
  tail call void @abort() #12
  unreachable

322:                                              ; preds = %319, %310
  %323 = phi i64 [ %317, %319 ], [ 2305843009213693951, %310 ]
  %324 = shl i64 %323, 3
  %325 = tail call i8* @_Znwm(i64 %324) #13
  %326 = bitcast i8* %325 to i64*
  br label %327

327:                                              ; preds = %322, %314
  %328 = phi i64 [ %323, %322 ], [ 0, %314 ]
  %329 = phi i64* [ %326, %322 ], [ null, %314 ]
  %330 = getelementptr inbounds i64, i64* %329, i64 %305
  %331 = getelementptr inbounds i64, i64* %329, i64 %328
  %332 = ptrtoint i64* %331 to i64
  %333 = load i64, i64* %292, align 8
  store i64 %333, i64* %330, align 8
  %334 = getelementptr inbounds i64, i64* %330, i64 1
  %335 = ptrtoint i64* %334 to i64
  %336 = ptrtoint i64* %281 to i64
  %337 = sub i64 %282, %336
  %338 = ashr exact i64 %337, 3
  %339 = sub nsw i64 0, %338
  %340 = getelementptr inbounds i64, i64* %330, i64 %339
  %341 = ptrtoint i64* %340 to i64
  %342 = icmp sgt i64 %337, 0
  br i1 %342, label %343, label %346

343:                                              ; preds = %327
  %344 = bitcast i64* %340 to i8*
  %345 = bitcast i64* %281 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %344, i8* align 8 %345, i64 %337, i1 false) #10
  br label %346

346:                                              ; preds = %343, %327
  store i64 %341, i64* %130, align 8
  store i64 %335, i64* %303, align 8
  store i64 %332, i64* %129, align 8
  %347 = icmp eq i64* %281, null
  br i1 %347, label %350, label %348

348:                                              ; preds = %346
  %349 = bitcast i64* %281 to i8*
  tail call void @_ZdlPv(i8* %349) #13
  br label %350

350:                                              ; preds = %296, %346, %348
  %351 = phi i64* [ %300, %296 ], [ %303, %346 ], [ %303, %348 ]
  %352 = phi i64 [ %279, %296 ], [ %341, %346 ], [ %341, %348 ]
  %353 = phi i64 [ %299, %296 ], [ %335, %346 ], [ %335, %348 ]
  %354 = getelementptr inbounds %"struct.std::__1::atomic_flag", %"struct.std::__1::atomic_flag"* %16, i64 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %354) #10
  store i8 0, i8* %354, align 1
  %355 = bitcast %"class.std::__1::vector.338"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %355) #10
  %356 = getelementptr inbounds %"class.std::__1::vector.338", %"class.std::__1::vector.338"* %17, i64 0, i32 0, i32 0
  %357 = getelementptr inbounds %"class.std::__1::vector.338", %"class.std::__1::vector.338"* %17, i64 0, i32 0, i32 1
  %358 = getelementptr inbounds %"class.std::__1::vector.338", %"class.std::__1::vector.338"* %17, i64 0, i32 0, i32 2, i32 0, i32 0
  %359 = sub i64 %353, %352
  %360 = ashr exact i64 %359, 3
  %361 = add nsw i64 %360, -1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %355, i8 0, i64 24, i1 false) #10
  %362 = icmp eq i64 %361, 0
  br i1 %362, label %383, label %363

363:                                              ; preds = %350
  %364 = icmp ugt i64 %361, 768614336404564650
  br i1 %364, label %365, label %367

365:                                              ; preds = %363
  %366 = bitcast %"class.std::__1::vector.338"* %17 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %366) #12
  unreachable

367:                                              ; preds = %363
  %368 = mul i64 %361, 24
  %369 = tail call i8* @_Znwm(i64 %368) #13
  %370 = bitcast i8* %369 to %"class.std::__1::vector.52"*
  %371 = bitcast %"class.std::__1::vector.338"* %17 to i8**
  store i8* %369, i8** %371, align 8
  %372 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %370, i64 %361
  store %"class.std::__1::vector.52"* %372, %"class.std::__1::vector.52"** %358, align 8
  %373 = bitcast %"class.std::__1::vector.52"** %357 to i64*
  %374 = ptrtoint i8* %369 to i64
  %375 = add nsw i64 %360, -2
  %376 = getelementptr %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %370, i64 %375, i32 0, i32 0
  %377 = ptrtoint %"struct.jxl::PropertyDecisionNode"** %376 to i64
  %378 = sub i64 %377, %374
  %379 = urem i64 %378, 24
  %380 = add i64 %378, 24
  %381 = sub i64 %380, %379
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %369, i8 0, i64 %381, i1 false) #10
  %382 = ptrtoint %"class.std::__1::vector.52"* %372 to i64
  store i64 %382, i64* %373, align 8
  br label %383

383:                                              ; preds = %350, %367
  %384 = trunc i64 %360 to i32
  %385 = add i32 %384, -1
  %386 = bitcast %class.anon.345* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %386) #10
  %387 = getelementptr inbounds %class.anon.345, %class.anon.345* %18, i64 0, i32 0
  store %"class.std::__1::vector"* %15, %"class.std::__1::vector"** %387, align 8
  %388 = getelementptr inbounds %class.anon.345, %class.anon.345* %18, i64 0, i32 1
  store %"class.jxl::ModularFrameEncoder"* %0, %"class.jxl::ModularFrameEncoder"** %388, align 8
  %389 = getelementptr inbounds %class.anon.345, %class.anon.345* %18, i64 0, i32 2
  store %"class.std::__1::vector.338"* %17, %"class.std::__1::vector.338"** %389, align 8
  %390 = getelementptr inbounds %class.anon.345, %class.anon.345* %18, i64 0, i32 3
  store %"struct.std::__1::atomic_flag"* %16, %"struct.std::__1::atomic_flag"** %390, align 8
  %391 = bitcast double* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %391) #10
  store double 0xFFFFFFFFFFFFFFFF, double* %8, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.12, i64 0, i64 0), double* nonnull %8) #10
  %392 = icmp eq %"class.jxl::ThreadPool"* %1, null
  br i1 %392, label %393, label %404

393:                                              ; preds = %383
  %394 = bitcast %"class.jxl::ThreadPool"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %394) #10
  %395 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %9, i64 0, i32 0
  %396 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %9, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %395, align 8
  %397 = bitcast i8** %396 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %9, %"class.jxl::ThreadPool"** %397, align 8
  %398 = icmp eq i32 %385, 0
  br i1 %398, label %415, label %399

399:                                              ; preds = %393
  %400 = bitcast %"class.jxl::ThreadPool::RunCallState.476"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %400) #10
  %401 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.476", %"class.jxl::ThreadPool::RunCallState.476"* %6, i64 0, i32 0
  %402 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.476", %"class.jxl::ThreadPool::RunCallState.476"* %6, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %401, align 8
  store %class.anon.345* %18, %class.anon.345** %402, align 8
  %403 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %394, i8* nonnull %400, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ModularFrameEncoder15PrepareEncodingEPS0_RKNS_15FrameDimensionsEPNS_17EncoderHeuristicsEPNS_6AuxOutEE3$_2E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ModularFrameEncoder15PrepareEncodingEPS0_RKNS_15FrameDimensionsEPNS_17EncoderHeuristicsEPNS_6AuxOutEE3$_2E12CallDataFuncEPvjm", i32 0, i32 %385) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %400) #10
  br label %415

404:                                              ; preds = %383
  %405 = icmp eq i32 %385, 0
  br i1 %405, label %417, label %406

406:                                              ; preds = %404
  %407 = bitcast %"class.jxl::ThreadPool::RunCallState.476"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %407) #10
  %408 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.476", %"class.jxl::ThreadPool::RunCallState.476"* %7, i64 0, i32 0
  %409 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.476", %"class.jxl::ThreadPool::RunCallState.476"* %7, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %408, align 8
  store %class.anon.345* %18, %class.anon.345** %409, align 8
  %410 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %1, i64 0, i32 0
  %411 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %410, align 8
  %412 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %1, i64 0, i32 1
  %413 = load i8*, i8** %412, align 8
  %414 = call i32 %411(i8* %413, i8* nonnull %407, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ModularFrameEncoder15PrepareEncodingEPS0_RKNS_15FrameDimensionsEPNS_17EncoderHeuristicsEPNS_6AuxOutEE3$_2E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ModularFrameEncoder15PrepareEncodingEPS0_RKNS_15FrameDimensionsEPNS_17EncoderHeuristicsEPNS_6AuxOutEE3$_2E12CallDataFuncEPvjm", i32 0, i32 %385) #10
  br label %415

415:                                              ; preds = %393, %399, %406
  %416 = phi i8* [ %407, %406 ], [ %394, %399 ], [ %394, %393 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %416) #10
  br label %417

417:                                              ; preds = %415, %404
  %418 = load double, double* %8, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.12, i64 0, i64 0), double %418) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %391) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %386) #10
  %419 = atomicrmw xchg i8* %354, i8 1 acq_rel
  %420 = and i8 %419, 1
  %421 = icmp eq i8 %420, 0
  br i1 %421, label %422, label %431

422:                                              ; preds = %417
  %423 = bitcast %"class.std::__1::vector.52"* %24 to i64*
  %424 = load i64, i64* %423, align 8
  %425 = bitcast %"struct.jxl::PropertyDecisionNode"** %27 to i64*
  store i64 %424, i64* %425, align 8
  %426 = load i64, i64* %351, align 8
  %427 = load i64, i64* %130, align 8
  %428 = sub i64 %426, %427
  %429 = ashr exact i64 %428, 3
  %430 = add nsw i64 %429, -1
  call fastcc void @_ZN3jxl12_GLOBAL__N_110MergeTreesERKNSt3__16vectorINS2_INS_20PropertyDecisionNodeENS1_9allocatorIS3_EEEENS4_IS6_EEEERKNS2_ImNS4_ImEEEEmmPS6_(%"class.std::__1::vector.338"* nonnull dereferenceable(24) %17, %"class.std::__1::vector"* nonnull dereferenceable(24) %15, i64 0, i64 %430, %"class.std::__1::vector.52"* %24)
  br label %431

431:                                              ; preds = %417, %422
  %432 = phi i32 [ 0, %422 ], [ 1, %417 ]
  %433 = load %"class.std::__1::vector.52"*, %"class.std::__1::vector.52"** %356, align 8
  %434 = icmp eq %"class.std::__1::vector.52"* %433, null
  br i1 %434, label %457, label %435

435:                                              ; preds = %431
  %436 = bitcast %"class.std::__1::vector.52"* %433 to i8*
  %437 = load %"class.std::__1::vector.52"*, %"class.std::__1::vector.52"** %357, align 8
  %438 = icmp eq %"class.std::__1::vector.52"* %437, %433
  br i1 %438, label %455, label %439

439:                                              ; preds = %435, %450
  %440 = phi %"class.std::__1::vector.52"* [ %441, %450 ], [ %437, %435 ]
  %441 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %440, i64 -1
  %442 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %441, i64 0, i32 0, i32 0
  %443 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %442, align 8
  %444 = icmp eq %"struct.jxl::PropertyDecisionNode"* %443, null
  br i1 %444, label %450, label %445

445:                                              ; preds = %439
  %446 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %443 to i64
  %447 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %440, i64 -1, i32 0, i32 1
  %448 = bitcast %"struct.jxl::PropertyDecisionNode"** %447 to i64*
  store i64 %446, i64* %448, align 8
  %449 = bitcast %"struct.jxl::PropertyDecisionNode"* %443 to i8*
  call void @_ZdlPv(i8* %449) #13
  br label %450

450:                                              ; preds = %445, %439
  %451 = icmp eq %"class.std::__1::vector.52"* %441, %433
  br i1 %451, label %452, label %439

452:                                              ; preds = %450
  %453 = bitcast %"class.std::__1::vector.338"* %17 to i8**
  %454 = load i8*, i8** %453, align 8
  br label %455

455:                                              ; preds = %452, %435
  %456 = phi i8* [ %454, %452 ], [ %436, %435 ]
  store %"class.std::__1::vector.52"* %433, %"class.std::__1::vector.52"** %357, align 8
  call void @_ZdlPv(i8* %456) #13
  br label %457

457:                                              ; preds = %431, %455
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %355) #10
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %354) #10
  %458 = load i64*, i64** %118, align 8
  br label %459

459:                                              ; preds = %152, %457
  %460 = phi i64* [ %280, %152 ], [ %458, %457 ]
  %461 = phi i32 [ 0, %152 ], [ 1, %457 ]
  %462 = phi i32 [ 1, %152 ], [ %432, %457 ]
  %463 = icmp eq i64* %460, null
  br i1 %463, label %471, label %464

464:                                              ; preds = %135, %459
  %465 = phi i32 [ %462, %459 ], [ 1, %135 ]
  %466 = phi i32 [ %461, %459 ], [ 0, %135 ]
  %467 = phi i64* [ %460, %459 ], [ %138, %135 ]
  %468 = ptrtoint i64* %467 to i64
  %469 = bitcast i64** %119 to i64*
  store i64 %468, i64* %469, align 8
  %470 = bitcast i64* %467 to i8*
  call void @_ZdlPv(i8* %470) #13
  br label %471

471:                                              ; preds = %459, %464
  %472 = phi i32 [ %462, %459 ], [ %465, %464 ]
  %473 = phi i32 [ %461, %459 ], [ %466, %464 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %117) #10
  %474 = icmp eq i32 %472, 0
  br i1 %474, label %582, label %794

475:                                              ; preds = %112
  %476 = bitcast %"class.std::__1::vector.156"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %476) #10
  %477 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %19, i64 0, i32 0, i32 1
  %478 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %19, i64 0, i32 0, i32 2, i32 0, i32 0
  %479 = tail call i8* @_Znwm(i64 116) #13
  %480 = bitcast %"class.std::__1::vector.156"* %19 to i8**
  store i8* %479, i8** %480, align 8
  %481 = getelementptr inbounds i8, i8* %479, i64 116
  %482 = bitcast i32** %478 to i8**
  store i8* %481, i8** %482, align 8
  %483 = bitcast i32** %477 to i64*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %479, i8* align 4 bitcast ([29 x i32]* @.ref.tmp.14 to i8*), i64 116, i1 false) #10
  %484 = ptrtoint i8* %481 to i64
  store i64 %484, i64* %483, align 8
  %485 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %31, i64 0, i32 0, i32 0
  %486 = load %"class.jxl::Image"*, %"class.jxl::Image"** %485, align 8
  %487 = load %"class.jxl::Image"*, %"class.jxl::Image"** %32, align 8
  %488 = icmp eq %"class.jxl::Image"* %486, %487
  br i1 %488, label %489, label %514

489:                                              ; preds = %549, %475
  %490 = phi i64 [ 0, %475 ], [ %550, %549 ]
  %491 = bitcast %"class.std::__1::vector.52"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %491) #10
  call fastcc void @_ZN3jxl12_GLOBAL__N_113MakeFixedTreeEiRKNSt3__16vectorIiNS1_9allocatorIiEEEENS_9PredictorEm(%"class.std::__1::vector.52"* nonnull sret %20, i32 15, %"class.std::__1::vector.156"* nonnull dereferenceable(24) %19, i32 6, i64 %490)
  %492 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %25, align 8
  %493 = icmp eq %"struct.jxl::PropertyDecisionNode"* %492, null
  br i1 %493, label %494, label %496

494:                                              ; preds = %489
  %495 = bitcast %"struct.jxl::PropertyDecisionNode"** %27 to i64*
  br label %501

496:                                              ; preds = %489
  %497 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %492 to i64
  %498 = bitcast %"struct.jxl::PropertyDecisionNode"** %27 to i64*
  store i64 %497, i64* %498, align 8
  %499 = bitcast %"struct.jxl::PropertyDecisionNode"* %492 to i8*
  call void @_ZdlPv(i8* %499) #13
  %500 = bitcast %"class.std::__1::vector.52"* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %500, i8 0, i64 24, i1 false) #10
  br label %501

501:                                              ; preds = %496, %494
  %502 = phi i64* [ %495, %494 ], [ %498, %496 ]
  %503 = bitcast %"class.std::__1::vector.52"* %20 to i64*
  %504 = load i64, i64* %503, align 8
  %505 = bitcast %"class.std::__1::vector.52"* %24 to i64*
  store i64 %504, i64* %505, align 8
  %506 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %20, i64 0, i32 0, i32 1
  %507 = bitcast %"struct.jxl::PropertyDecisionNode"** %506 to i64*
  %508 = load i64, i64* %507, align 8
  store i64 %508, i64* %502, align 8
  %509 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %20, i64 0, i32 0, i32 2, i32 0, i32 0
  %510 = bitcast %"struct.jxl::PropertyDecisionNode"** %509 to i64*
  %511 = load i64, i64* %510, align 8
  %512 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0
  %513 = bitcast %"struct.jxl::PropertyDecisionNode"** %512 to i64*
  store i64 %511, i64* %513, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %491) #10
  call void @_ZdlPv(i8* nonnull %479) #13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %476) #10
  br label %582

514:                                              ; preds = %475, %549
  %515 = phi i64 [ %550, %549 ], [ 0, %475 ]
  %516 = phi %"class.jxl::Image"* [ %551, %549 ], [ %486, %475 ]
  %517 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %516, i64 0, i32 0, i32 0, i32 0
  %518 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %517, align 8
  %519 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %516, i64 0, i32 0, i32 0, i32 1
  %520 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %519, align 8
  %521 = icmp eq %"class.jxl::Channel"* %518, %520
  br i1 %521, label %549, label %522

522:                                              ; preds = %514
  %523 = ptrtoint %"class.jxl::Channel"* %518 to i64
  %524 = getelementptr %"class.jxl::Channel", %"class.jxl::Channel"* %520, i64 -1
  %525 = ptrtoint %"class.jxl::Channel"* %524 to i64
  %526 = sub i64 %525, %523
  %527 = lshr i64 %526, 6
  %528 = add nuw nsw i64 %527, 1
  %529 = and i64 %528, 3
  %530 = icmp eq i64 %529, 0
  br i1 %530, label %544, label %531

531:                                              ; preds = %522, %531
  %532 = phi i64 [ %540, %531 ], [ %515, %522 ]
  %533 = phi %"class.jxl::Channel"* [ %541, %531 ], [ %518, %522 ]
  %534 = phi i64 [ %542, %531 ], [ %529, %522 ]
  %535 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %533, i64 0, i32 1
  %536 = load i64, i64* %535, align 8
  %537 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %533, i64 0, i32 2
  %538 = load i64, i64* %537, align 8
  %539 = mul i64 %538, %536
  %540 = add i64 %539, %532
  %541 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %533, i64 1
  %542 = add i64 %534, -1
  %543 = icmp eq i64 %542, 0
  br i1 %543, label %544, label %531, !llvm.loop !37

544:                                              ; preds = %531, %522
  %545 = phi i64 [ undef, %522 ], [ %540, %531 ]
  %546 = phi i64 [ %515, %522 ], [ %540, %531 ]
  %547 = phi %"class.jxl::Channel"* [ %518, %522 ], [ %541, %531 ]
  %548 = icmp ult i64 %526, 192
  br i1 %548, label %549, label %553

549:                                              ; preds = %544, %553, %514
  %550 = phi i64 [ %515, %514 ], [ %545, %544 ], [ %579, %553 ]
  %551 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %516, i64 1
  %552 = icmp eq %"class.jxl::Image"* %551, %487
  br i1 %552, label %489, label %514

553:                                              ; preds = %544, %553
  %554 = phi i64 [ %579, %553 ], [ %546, %544 ]
  %555 = phi %"class.jxl::Channel"* [ %580, %553 ], [ %547, %544 ]
  %556 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %555, i64 0, i32 1
  %557 = load i64, i64* %556, align 8
  %558 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %555, i64 0, i32 2
  %559 = load i64, i64* %558, align 8
  %560 = mul i64 %559, %557
  %561 = add i64 %560, %554
  %562 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %555, i64 1, i32 1
  %563 = load i64, i64* %562, align 8
  %564 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %555, i64 1, i32 2
  %565 = load i64, i64* %564, align 8
  %566 = mul i64 %565, %563
  %567 = add i64 %566, %561
  %568 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %555, i64 2, i32 1
  %569 = load i64, i64* %568, align 8
  %570 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %555, i64 2, i32 2
  %571 = load i64, i64* %570, align 8
  %572 = mul i64 %571, %569
  %573 = add i64 %572, %567
  %574 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %555, i64 3, i32 1
  %575 = load i64, i64* %574, align 8
  %576 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %555, i64 3, i32 2
  %577 = load i64, i64* %576, align 8
  %578 = mul i64 %577, %575
  %579 = add i64 %578, %573
  %580 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %555, i64 4
  %581 = icmp eq %"class.jxl::Channel"* %580, %520
  br i1 %581, label %549, label %553

582:                                              ; preds = %501, %471, %98
  %583 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 45
  %584 = load i32, i32* %583, align 8
  %585 = icmp eq i32 %584, 0
  br i1 %585, label %603, label %586

586:                                              ; preds = %582
  %587 = bitcast %"struct.jxl::PropertyDecisionNode"** %27 to i64*
  %588 = load i64, i64* %587, align 8
  %589 = bitcast %"class.std::__1::vector.52"* %24 to i64*
  %590 = load i64, i64* %589, align 8
  %591 = icmp eq i64 %588, %590
  br i1 %591, label %603, label %592

592:                                              ; preds = %586, %592
  %593 = phi i64 [ %599, %592 ], [ %590, %586 ]
  %594 = phi i64 [ %597, %592 ], [ 0, %586 ]
  %595 = inttoptr i64 %593 to %"struct.jxl::PropertyDecisionNode"*
  %596 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %595, i64 %594, i32 7
  store i64 0, i64* %596, align 8
  %597 = add nuw i64 %594, 1
  %598 = load i64, i64* %587, align 8
  %599 = load i64, i64* %589, align 8
  %600 = sub i64 %598, %599
  %601 = sdiv exact i64 %600, 40
  %602 = icmp ult i64 %597, %601
  br i1 %602, label %592, label %603

603:                                              ; preds = %592, %586, %582
  %604 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 5
  %605 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 5, i32 0, i32 1
  %606 = bitcast %"class.std::__1::vector.61"** %605 to i64*
  %607 = load i64, i64* %606, align 8
  %608 = bitcast %"class.std::__1::vector.59"* %604 to i64*
  %609 = load i64, i64* %608, align 8
  %610 = sub i64 %607, %609
  %611 = sdiv exact i64 %610, 24
  %612 = icmp eq i64 %610, 0
  %613 = inttoptr i64 %609 to %"class.std::__1::vector.61"*
  %614 = inttoptr i64 %607 to %"class.std::__1::vector.61"*
  br i1 %612, label %615, label %617

615:                                              ; preds = %603
  %616 = sub nuw nsw i64 1, %611
  call void @_ZNSt3__16vectorINS0_IN3jxl5TokenENS_9allocatorIS2_EEEENS3_IS5_EEE8__appendEm(%"class.std::__1::vector.59"* %604, i64 %616) #10
  br label %636

617:                                              ; preds = %603
  %618 = icmp ugt i64 %611, 1
  br i1 %618, label %619, label %636

619:                                              ; preds = %617
  %620 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %613, i64 1
  %621 = icmp eq %"class.std::__1::vector.61"* %620, %614
  br i1 %621, label %635, label %622

622:                                              ; preds = %619, %633
  %623 = phi %"class.std::__1::vector.61"* [ %624, %633 ], [ %614, %619 ]
  %624 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %623, i64 -1
  %625 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %624, i64 0, i32 0, i32 0
  %626 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %625, align 8
  %627 = icmp eq %"struct.jxl::Token"* %626, null
  br i1 %627, label %633, label %628

628:                                              ; preds = %622
  %629 = ptrtoint %"struct.jxl::Token"* %626 to i64
  %630 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %623, i64 -1, i32 0, i32 1
  %631 = bitcast %"struct.jxl::Token"** %630 to i64*
  store i64 %629, i64* %631, align 8
  %632 = bitcast %"struct.jxl::Token"* %626 to i8*
  call void @_ZdlPv(i8* %632) #13
  br label %633

633:                                              ; preds = %628, %622
  %634 = icmp eq %"class.std::__1::vector.61"* %624, %620
  br i1 %634, label %635, label %622

635:                                              ; preds = %633, %619
  store %"class.std::__1::vector.61"* %620, %"class.std::__1::vector.61"** %605, align 8
  br label %636

636:                                              ; preds = %615, %617, %635
  %637 = getelementptr inbounds %"class.std::__1::vector.59", %"class.std::__1::vector.59"* %604, i64 0, i32 0, i32 0
  %638 = load %"class.std::__1::vector.61"*, %"class.std::__1::vector.61"** %637, align 8
  %639 = bitcast %"class.std::__1::vector.61"* %638 to i64*
  %640 = load i64, i64* %639, align 8
  %641 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %638, i64 0, i32 0, i32 1
  %642 = bitcast %"struct.jxl::Token"** %641 to i64*
  store i64 %640, i64* %642, align 8
  %643 = bitcast %"class.std::__1::vector.52"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %643) #10
  %644 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %21, i64 0, i32 0, i32 0
  %645 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %21, i64 0, i32 0, i32 1
  %646 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %21, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %643, i8 0, i64 24, i1 false) #10
  %647 = load %"class.std::__1::vector.61"*, %"class.std::__1::vector.61"** %637, align 8
  call void @_ZN3jxl12TokenizeTreeERKNSt3__16vectorINS_20PropertyDecisionNodeENS0_9allocatorIS2_EEEEPNS1_INS_5TokenENS3_IS8_EEEEPS5_(%"class.std::__1::vector.52"* dereferenceable(24) %24, %"class.std::__1::vector.61"* %647, %"class.std::__1::vector.52"* nonnull %21) #10
  %648 = bitcast %"struct.jxl::PropertyDecisionNode"** %27 to i64*
  %649 = load i64, i64* %648, align 8
  %650 = bitcast %"class.std::__1::vector.52"* %24 to i64*
  %651 = load i64, i64* %650, align 8
  %652 = sub i64 %649, %651
  %653 = bitcast %"struct.jxl::PropertyDecisionNode"** %645 to i64*
  %654 = bitcast %"class.std::__1::vector.52"* %21 to <2 x i64>*
  %655 = load <2 x i64>, <2 x i64>* %654, align 16
  %656 = extractelement <2 x i64> %655, i32 0
  %657 = extractelement <2 x i64> %655, i32 1
  %658 = sub i64 %657, %656
  %659 = icmp eq i64 %652, %658
  br i1 %659, label %663, label %660

660:                                              ; preds = %636
  %661 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.2, i64 0, i64 0), i32 981, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.15, i64 0, i64 0)) #10
  %662 = call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

663:                                              ; preds = %636
  %664 = icmp eq i64 %651, 0
  br i1 %664, label %670, label %665

665:                                              ; preds = %663
  store i64 %651, i64* %648, align 8
  %666 = inttoptr i64 %651 to i8*
  call void @_ZdlPv(i8* %666) #13
  %667 = bitcast %"class.std::__1::vector.52"* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %667, i8 0, i64 24, i1 false) #10
  %668 = bitcast %"class.std::__1::vector.52"* %21 to <2 x i64>*
  %669 = load <2 x i64>, <2 x i64>* %668, align 16
  br label %670

670:                                              ; preds = %663, %665
  %671 = phi <2 x i64> [ %655, %663 ], [ %669, %665 ]
  %672 = bitcast %"class.std::__1::vector.52"* %24 to <2 x i64>*
  store <2 x i64> %671, <2 x i64>* %672, align 8
  %673 = bitcast %"struct.jxl::PropertyDecisionNode"** %646 to i64*
  %674 = load i64, i64* %673, align 16
  %675 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0
  %676 = bitcast %"struct.jxl::PropertyDecisionNode"** %675 to i64*
  store i64 %674, i64* %676, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %643, i8 0, i64 24, i1 false) #10
  %677 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %14, align 8
  %678 = icmp eq %"struct.jxl::AuxOut"* %677, null
  br i1 %678, label %738, label %679

679:                                              ; preds = %670
  %680 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %677, i64 0, i32 15
  %681 = bitcast %"class.std::__1::basic_string"* %680 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %682 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %681, i64 0, i32 1, i32 0
  %683 = load i8, i8* %682, align 1
  %684 = icmp slt i8 %683, 0
  br i1 %684, label %685, label %688

685:                                              ; preds = %679
  %686 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %677, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %687 = load i64, i64* %686, align 8
  br label %690

688:                                              ; preds = %679
  %689 = zext i8 %683 to i64
  br label %690

690:                                              ; preds = %685, %688
  %691 = phi i64 [ %687, %685 ], [ %689, %688 ]
  %692 = icmp eq i64 %691, 0
  br i1 %692, label %738, label %693

693:                                              ; preds = %690
  %694 = bitcast %"class.std::__1::basic_string"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %694) #10
  %695 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %22, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %696 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %22, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %697 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %22, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %694, i8 0, i64 24, i1 false) #10, !alias.scope !38
  br i1 %684, label %698, label %703

698:                                              ; preds = %693
  %699 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %677, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %700 = load i64, i64* %699, align 8, !noalias !38
  %701 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %680, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %702 = load i8*, i8** %701, align 8, !noalias !38
  br label %706

703:                                              ; preds = %693
  %704 = zext i8 %683 to i64
  %705 = bitcast %"class.std::__1::basic_string"* %680 to i8*
  br label %706

706:                                              ; preds = %703, %698
  %707 = phi i64 [ %700, %698 ], [ %704, %703 ]
  %708 = phi i8* [ %702, %698 ], [ %705, %703 ]
  %709 = add i64 %707, 12
  %710 = icmp ugt i64 %709, -17
  br i1 %710, label %711, label %713

711:                                              ; preds = %706
  %712 = bitcast %"class.std::__1::basic_string"* %22 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %712) #12
  unreachable

713:                                              ; preds = %706
  %714 = icmp ult i64 %709, 23
  br i1 %714, label %720, label %715

715:                                              ; preds = %713
  %716 = add nuw i64 %707, 28
  %717 = and i64 %716, -16
  %718 = call i8* @_Znwm(i64 %717) #13
  store i8* %718, i8** %695, align 8, !alias.scope !38
  %719 = or i64 %717, -9223372036854775808
  store i64 %719, i64* %697, align 8, !alias.scope !38
  store i64 %707, i64* %696, align 8, !alias.scope !38
  br label %725

720:                                              ; preds = %713
  %721 = trunc i64 %707 to i8
  %722 = bitcast %"class.std::__1::basic_string"* %22 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %723 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %722, i64 0, i32 1, i32 0
  store i8 %721, i8* %723, align 1, !alias.scope !38
  %724 = icmp eq i64 %707, 0
  br i1 %724, label %727, label %725

725:                                              ; preds = %715, %720
  %726 = phi i8* [ %718, %715 ], [ %694, %720 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %726, i8* align 1 %708, i64 %707, i1 false) #10
  br label %727

727:                                              ; preds = %720, %725
  %728 = phi i8* [ %694, %720 ], [ %726, %725 ]
  %729 = getelementptr inbounds i8, i8* %728, i64 %707
  store i8 0, i8* %729, align 1
  %730 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %22, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.16, i64 0, i64 0), i64 12) #10
  call void @_ZN3jxl9PrintTreeERKNSt3__16vectorINS_20PropertyDecisionNodeENS0_9allocatorIS2_EEEERKNS0_12basic_stringIcNS0_11char_traitsIcEENS3_IcEEEE(%"class.std::__1::vector.52"* dereferenceable(24) %24, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %22) #10
  %731 = bitcast %"class.std::__1::basic_string"* %22 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %732 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %731, i64 0, i32 1, i32 0
  %733 = load i8, i8* %732, align 1
  %734 = icmp slt i8 %733, 0
  br i1 %734, label %735, label %737

735:                                              ; preds = %727
  %736 = load i8*, i8** %695, align 8
  call void @_ZdlPv(i8* %736) #13
  br label %737

737:                                              ; preds = %727, %735
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %694) #10
  br label %738

738:                                              ; preds = %690, %670, %737
  %739 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 17
  %740 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 17, i32 0, i32 1
  %741 = bitcast i64** %740 to i64*
  %742 = load i64, i64* %741, align 8
  %743 = bitcast %"class.std::__1::vector"* %739 to i64*
  %744 = load i64, i64* %743, align 8
  %745 = sub i64 %742, %744
  %746 = ashr exact i64 %745, 3
  %747 = icmp ugt i64 %38, %746
  %748 = inttoptr i64 %744 to i64*
  br i1 %747, label %749, label %751

749:                                              ; preds = %738
  %750 = sub nsw i64 %38, %746
  call void @_ZNSt3__16vectorImNS_9allocatorImEEE8__appendEm(%"class.std::__1::vector"* %739, i64 %750) #10
  br label %755

751:                                              ; preds = %738
  %752 = icmp ult i64 %38, %746
  br i1 %752, label %753, label %755

753:                                              ; preds = %751
  %754 = getelementptr inbounds i64, i64* %748, i64 %38
  store i64* %754, i64** %740, align 8
  br label %755

755:                                              ; preds = %749, %751, %753
  %756 = trunc i64 %38 to i32
  %757 = bitcast %class.anon.349* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %757) #10
  %758 = getelementptr inbounds %class.anon.349, %class.anon.349* %23, i64 0, i32 0
  store %"struct.jxl::AuxOut"** %14, %"struct.jxl::AuxOut"*** %758, align 8
  %759 = getelementptr inbounds %class.anon.349, %class.anon.349* %23, i64 0, i32 1
  store %"class.jxl::ModularFrameEncoder"* %0, %"class.jxl::ModularFrameEncoder"** %759, align 8
  %760 = bitcast double* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %760) #10
  store double 0xFFFFFFFFFFFFFFFF, double* %12, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.17, i64 0, i64 0), double* nonnull %12) #10
  %761 = icmp eq %"class.jxl::ThreadPool"* %1, null
  br i1 %761, label %762, label %773

762:                                              ; preds = %755
  %763 = bitcast %"class.jxl::ThreadPool"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %763) #10
  %764 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %13, i64 0, i32 0
  %765 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %13, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %764, align 8
  %766 = bitcast i8** %765 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %13, %"class.jxl::ThreadPool"** %766, align 8
  %767 = icmp eq i32 %756, 0
  br i1 %767, label %784, label %768

768:                                              ; preds = %762
  %769 = bitcast %"class.jxl::ThreadPool::RunCallState.478"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %769) #10
  %770 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.478", %"class.jxl::ThreadPool::RunCallState.478"* %10, i64 0, i32 0
  %771 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.478", %"class.jxl::ThreadPool::RunCallState.478"* %10, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %770, align 8
  store %class.anon.349* %23, %class.anon.349** %771, align 8
  %772 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %763, i8* nonnull %769, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ModularFrameEncoder15PrepareEncodingEPS0_RKNS_15FrameDimensionsEPNS_17EncoderHeuristicsEPNS_6AuxOutEE3$_3E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ModularFrameEncoder15PrepareEncodingEPS0_RKNS_15FrameDimensionsEPNS_17EncoderHeuristicsEPNS_6AuxOutEE3$_3E12CallDataFuncEPvjm", i32 0, i32 %756) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %769) #10
  br label %784

773:                                              ; preds = %755
  %774 = icmp eq i32 %756, 0
  br i1 %774, label %786, label %775

775:                                              ; preds = %773
  %776 = bitcast %"class.jxl::ThreadPool::RunCallState.478"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %776) #10
  %777 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.478", %"class.jxl::ThreadPool::RunCallState.478"* %11, i64 0, i32 0
  %778 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.478", %"class.jxl::ThreadPool::RunCallState.478"* %11, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %777, align 8
  store %class.anon.349* %23, %class.anon.349** %778, align 8
  %779 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %1, i64 0, i32 0
  %780 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %779, align 8
  %781 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %1, i64 0, i32 1
  %782 = load i8*, i8** %781, align 8
  %783 = call i32 %780(i8* %782, i8* nonnull %776, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ModularFrameEncoder15PrepareEncodingEPS0_RKNS_15FrameDimensionsEPNS_17EncoderHeuristicsEPNS_6AuxOutEE3$_3E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ModularFrameEncoder15PrepareEncodingEPS0_RKNS_15FrameDimensionsEPNS_17EncoderHeuristicsEPNS_6AuxOutEE3$_3E12CallDataFuncEPvjm", i32 0, i32 %756) #10
  br label %784

784:                                              ; preds = %762, %768, %775
  %785 = phi i8* [ %776, %775 ], [ %763, %768 ], [ %763, %762 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %785) #10
  br label %786

786:                                              ; preds = %784, %773
  %787 = load double, double* %12, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.17, i64 0, i64 0), double %787) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %760) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %757) #10
  %788 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %644, align 16
  %789 = icmp eq %"struct.jxl::PropertyDecisionNode"* %788, null
  br i1 %789, label %793, label %790

790:                                              ; preds = %786
  %791 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %788 to i64
  store i64 %791, i64* %653, align 8
  %792 = bitcast %"struct.jxl::PropertyDecisionNode"* %788 to i8*
  call void @_ZdlPv(i8* %792) #13
  br label %793

793:                                              ; preds = %786, %790
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %643) #10
  br label %794

794:                                              ; preds = %5, %793, %471
  %795 = phi i32 [ 0, %793 ], [ %473, %471 ], [ 0, %5 ]
  ret i32 %795

796:                                              ; preds = %221
  %797 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %212, i64 1, i32 2
  %798 = load i64, i64* %797, align 8
  %799 = icmp eq i64 %798, 0
  %800 = select i1 %799, i8 %222, i8 1
  br label %801

801:                                              ; preds = %796, %221
  %802 = phi i8 [ %222, %221 ], [ %800, %796 ]
  %803 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %212, i64 2
  %804 = icmp eq %"class.jxl::Channel"* %803, %180
  br i1 %804, label %206, label %210
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN3jxl12_GLOBAL__N_110MergeTreesERKNSt3__16vectorINS2_INS_20PropertyDecisionNodeENS1_9allocatorIS3_EEEENS4_IS6_EEEERKNS2_ImNS4_ImEEEEmmPS6_(%"class.std::__1::vector.338"* readonly dereferenceable(24), %"class.std::__1::vector"* readonly dereferenceable(24), i64, i64, %"class.std::__1::vector.52"*) unnamed_addr #0 {
  %6 = getelementptr inbounds %"class.std::__1::vector.338", %"class.std::__1::vector.338"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.std::__1::vector.52"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %"class.std::__1::vector.338"* %0 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %8, %10
  %12 = sdiv exact i64 %11, 24
  %13 = add nsw i64 %12, 1
  %14 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %15 = bitcast i64** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = bitcast %"class.std::__1::vector"* %1 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = icmp eq i64 %13, %20
  br i1 %21, label %22, label %30

22:                                               ; preds = %5
  %23 = add nuw i64 %2, 1
  %24 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %4, i64 0, i32 0, i32 1
  %25 = bitcast %"struct.jxl::PropertyDecisionNode"** %24 to i64*
  %26 = bitcast %"class.std::__1::vector.52"* %4 to i64*
  %27 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %28 = bitcast %"struct.jxl::PropertyDecisionNode"** %27 to i64*
  %29 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %4, i64 0, i32 0, i32 0
  br label %33

30:                                               ; preds = %164, %5
  %31 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.2, i64 0, i64 0), i32 193, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.50, i64 0, i64 0)) #10
  %32 = tail call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

33:                                               ; preds = %22, %164
  %34 = phi i64 [ %10, %22 ], [ %180, %164 ]
  %35 = phi i64 [ %18, %22 ], [ %185, %164 ]
  %36 = phi i64 [ %12, %22 ], [ %182, %164 ]
  %37 = phi i64 [ %3, %22 ], [ %88, %164 ]
  %38 = inttoptr i64 %35 to i64*
  %39 = icmp ugt i64 %37, %2
  br i1 %39, label %43, label %40

40:                                               ; preds = %33
  %41 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.2, i64 0, i64 0), i32 194, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.51, i64 0, i64 0)) #10
  %42 = tail call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

43:                                               ; preds = %33
  %44 = icmp ult i64 %36, %37
  br i1 %44, label %45, label %48

45:                                               ; preds = %43
  %46 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.2, i64 0, i64 0), i32 195, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.52, i64 0, i64 0)) #10
  %47 = tail call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

48:                                               ; preds = %43
  %49 = icmp eq i64 %23, %37
  br i1 %49, label %50, label %86

50:                                               ; preds = %48
  %51 = inttoptr i64 %34 to %"class.std::__1::vector.52"*
  %52 = load i64, i64* %25, align 8
  %53 = load i64, i64* %26, align 8
  %54 = sub i64 %52, %53
  %55 = sdiv exact i64 %54, 40
  %56 = inttoptr i64 %52 to %"struct.jxl::PropertyDecisionNode"*
  %57 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %51, i64 %2, i32 0, i32 0
  %58 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %57, align 8
  %59 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %51, i64 %2, i32 0, i32 1
  %60 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %59, align 8
  %61 = tail call %"struct.jxl::PropertyDecisionNode"* @_ZNSt3__16vectorIN3jxl20PropertyDecisionNodeENS_9allocatorIS2_EEE6insertINS_11__wrap_iterIPKS2_EEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISC_E9referenceEEE5valueENS7_IPS2_EEE4typeESA_SC_SC_(%"class.std::__1::vector.52"* %4, %"struct.jxl::PropertyDecisionNode"* %56, %"struct.jxl::PropertyDecisionNode"* %58, %"struct.jxl::PropertyDecisionNode"* %60)
  %62 = load i64, i64* %25, align 8
  %63 = load i64, i64* %26, align 8
  %64 = sub i64 %62, %63
  %65 = sdiv exact i64 %64, 40
  %66 = icmp ult i64 %55, %65
  br i1 %66, label %67, label %189

67:                                               ; preds = %50
  %68 = trunc i64 %55 to i32
  br label %69

69:                                               ; preds = %67, %69
  %70 = phi i64 [ %63, %67 ], [ %82, %69 ]
  %71 = phi i64 [ %55, %67 ], [ %80, %69 ]
  %72 = inttoptr i64 %70 to %"struct.jxl::PropertyDecisionNode"*
  %73 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %72, i64 %71, i32 3
  %74 = load i32, i32* %73, align 8
  %75 = add i32 %74, %68
  store i32 %75, i32* %73, align 8
  %76 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %29, align 8
  %77 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %76, i64 %71, i32 4
  %78 = load i32, i32* %77, align 4
  %79 = add i32 %78, %68
  store i32 %79, i32* %77, align 4
  %80 = add nuw i64 %71, 1
  %81 = load i64, i64* %25, align 8
  %82 = load i64, i64* %26, align 8
  %83 = sub i64 %81, %82
  %84 = sdiv exact i64 %83, 40
  %85 = icmp ult i64 %80, %84
  br i1 %85, label %69, label %189

86:                                               ; preds = %48
  %87 = add i64 %37, %2
  %88 = lshr i64 %87, 1
  %89 = getelementptr inbounds i64, i64* %38, i64 %88
  %90 = load i64, i64* %89, align 8
  %91 = add i64 %90, -1
  %92 = load i64, i64* %25, align 8
  %93 = load i64, i64* %26, align 8
  %94 = sub i64 %92, %93
  %95 = sdiv exact i64 %94, 40
  %96 = inttoptr i64 %92 to %"struct.jxl::PropertyDecisionNode"*
  %97 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %27, align 8
  %98 = icmp ugt %"struct.jxl::PropertyDecisionNode"* %97, %96
  %99 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %97 to i64
  br i1 %98, label %100, label %111

100:                                              ; preds = %86
  %101 = trunc i64 %91 to i32
  %102 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %96, i64 0, i32 0
  store i32 %101, i32* %102, align 8
  %103 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %96, i64 0, i32 1
  store i16 1, i16* %103, align 4
  %104 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %96, i64 0, i32 3
  store i32 0, i32* %104, align 8
  %105 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %96, i64 0, i32 4
  store i32 0, i32* %105, align 4
  %106 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %96, i64 0, i32 5
  store i32 0, i32* %106, align 8
  %107 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %96, i64 0, i32 7
  store i64 0, i64* %107, align 8
  %108 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %96, i64 0, i32 8
  store i32 1, i32* %108, align 8
  %109 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %96, i64 1
  %110 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %109 to i64
  store i64 %110, i64* %25, align 8
  br label %164

111:                                              ; preds = %86
  %112 = add nsw i64 %95, 1
  %113 = icmp ugt i64 %112, 461168601842738790
  br i1 %113, label %114, label %116

114:                                              ; preds = %111
  %115 = bitcast %"class.std::__1::vector.52"* %4 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %115) #12
  unreachable

116:                                              ; preds = %111
  %117 = sub i64 %99, %93
  %118 = sdiv exact i64 %117, 40
  %119 = icmp ult i64 %118, 230584300921369395
  br i1 %119, label %120, label %125

120:                                              ; preds = %116
  %121 = shl nsw i64 %118, 1
  %122 = icmp ult i64 %121, %112
  %123 = select i1 %122, i64 %112, i64 %121
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %130, label %125

125:                                              ; preds = %120, %116
  %126 = phi i64 [ %123, %120 ], [ 461168601842738790, %116 ]
  %127 = mul i64 %126, 40
  %128 = tail call i8* @_Znwm(i64 %127) #13
  %129 = bitcast i8* %128 to %"struct.jxl::PropertyDecisionNode"*
  br label %130

130:                                              ; preds = %125, %120
  %131 = phi i64 [ %126, %125 ], [ 0, %120 ]
  %132 = phi %"struct.jxl::PropertyDecisionNode"* [ %129, %125 ], [ null, %120 ]
  %133 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %132, i64 %95
  %134 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %132, i64 %131
  %135 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %134 to i64
  %136 = trunc i64 %91 to i32
  %137 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %133, i64 0, i32 0
  store i32 %136, i32* %137, align 8
  %138 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %132, i64 %95, i32 1
  store i16 1, i16* %138, align 4
  %139 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %132, i64 %95, i32 3
  store i32 0, i32* %139, align 8
  %140 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %132, i64 %95, i32 4
  store i32 0, i32* %140, align 4
  %141 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %132, i64 %95, i32 5
  store i32 0, i32* %141, align 8
  %142 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %132, i64 %95, i32 7
  store i64 0, i64* %142, align 8
  %143 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %132, i64 %95, i32 8
  store i32 1, i32* %143, align 8
  %144 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %133, i64 1
  %145 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %144 to i64
  %146 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %29, align 8
  %147 = load i64, i64* %25, align 8
  %148 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %146 to i64
  %149 = sub i64 %147, %148
  %150 = sdiv exact i64 %149, -40
  %151 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %133, i64 %150
  %152 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %151 to i64
  %153 = icmp sgt i64 %149, 0
  br i1 %153, label %154, label %158

154:                                              ; preds = %130
  %155 = bitcast %"struct.jxl::PropertyDecisionNode"* %151 to i8*
  %156 = bitcast %"struct.jxl::PropertyDecisionNode"* %146 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %155, i8* align 8 %156, i64 %149, i1 false) #10
  %157 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %29, align 8
  br label %158

158:                                              ; preds = %154, %130
  %159 = phi %"struct.jxl::PropertyDecisionNode"* [ %146, %130 ], [ %157, %154 ]
  store i64 %152, i64* %26, align 8
  store i64 %145, i64* %25, align 8
  store i64 %135, i64* %28, align 8
  %160 = icmp eq %"struct.jxl::PropertyDecisionNode"* %159, null
  br i1 %160, label %164, label %161

161:                                              ; preds = %158
  %162 = bitcast %"struct.jxl::PropertyDecisionNode"* %159 to i8*
  tail call void @_ZdlPv(i8* %162) #13
  %163 = load i64, i64* %25, align 8
  br label %164

164:                                              ; preds = %100, %158, %161
  %165 = phi i64 [ %110, %100 ], [ %145, %158 ], [ %163, %161 ]
  %166 = load i64, i64* %26, align 8
  %167 = sub i64 %165, %166
  %168 = sdiv exact i64 %167, 40
  %169 = trunc i64 %168 to i32
  %170 = inttoptr i64 %166 to %"struct.jxl::PropertyDecisionNode"*
  %171 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %170, i64 %95, i32 3
  store i32 %169, i32* %171, align 8
  tail call fastcc void @_ZN3jxl12_GLOBAL__N_110MergeTreesERKNSt3__16vectorINS2_INS_20PropertyDecisionNodeENS1_9allocatorIS3_EEEENS4_IS6_EEEERKNS2_ImNS4_ImEEEEmmPS6_(%"class.std::__1::vector.338"* dereferenceable(24) %0, %"class.std::__1::vector"* dereferenceable(24) %1, i64 %88, i64 %37, %"class.std::__1::vector.52"* %4)
  %172 = load i64, i64* %25, align 8
  %173 = load i64, i64* %26, align 8
  %174 = sub i64 %172, %173
  %175 = sdiv exact i64 %174, 40
  %176 = trunc i64 %175 to i32
  %177 = inttoptr i64 %173 to %"struct.jxl::PropertyDecisionNode"*
  %178 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %177, i64 %95, i32 4
  store i32 %176, i32* %178, align 4
  %179 = load i64, i64* %7, align 8
  %180 = load i64, i64* %9, align 8
  %181 = sub i64 %179, %180
  %182 = sdiv exact i64 %181, 24
  %183 = add nsw i64 %182, 1
  %184 = load i64, i64* %15, align 8
  %185 = load i64, i64* %17, align 8
  %186 = sub i64 %184, %185
  %187 = ashr exact i64 %186, 3
  %188 = icmp eq i64 %183, %187
  br i1 %188, label %33, label %30

189:                                              ; preds = %69, %50
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN3jxl12_GLOBAL__N_113MakeFixedTreeEiRKNSt3__16vectorIiNS1_9allocatorIiEEEENS_9PredictorEm(%"class.std::__1::vector.52"* noalias sret, i32, %"class.std::__1::vector.156"* nocapture readonly dereferenceable(24), i32, i64) unnamed_addr #0 {
  %6 = alloca %"class.std::__1::queue", align 8
  %7 = alloca %struct.NodeInfo, align 8
  %8 = alloca %struct.NodeInfo, align 8
  %9 = alloca %struct.NodeInfo, align 8
  %10 = tail call i64 @llvm.ctlz.i64(i64 %4, i1 true) #10, !range !28
  %11 = xor i64 %10, 63
  %12 = tail call i64 @llvm.ctpop.i64(i64 %4) #10, !range !28
  %13 = icmp ugt i64 %12, 1
  %14 = zext i1 %13 to i64
  %15 = add nuw nsw i64 %11, %14
  %16 = icmp ult i64 %15, 14
  %17 = shl nuw nsw i64 %15, 3
  %18 = sub nsw i64 112, %17
  %19 = select i1 %16, i64 %18, i64 0
  %20 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %0, i64 0, i32 0, i32 1
  %21 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %22 = bitcast %"class.std::__1::queue"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %22) #10
  %23 = getelementptr inbounds %"class.std::__1::queue", %"class.std::__1::queue"* %6, i64 0, i32 0, i32 0, i32 0, i32 1
  %24 = getelementptr inbounds %"class.std::__1::queue", %"class.std::__1::queue"* %6, i64 0, i32 0, i32 0, i32 1
  %25 = getelementptr inbounds %"class.std::__1::queue", %"class.std::__1::queue"* %6, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %22, i8 0, i64 48, i1 false) #10
  %26 = bitcast %"struct.jxl::PropertyDecisionNode"** %20 to i64*
  %27 = bitcast %"class.std::__1::vector.52"* %0 to i64*
  %28 = bitcast %"struct.jxl::PropertyDecisionNode"** %21 to i64*
  %29 = tail call i8* @_Znwm(i64 40) #13
  %30 = getelementptr inbounds i8, i8* %29, i64 40
  %31 = ptrtoint i8* %30 to i64
  %32 = bitcast i8* %29 to i32*
  store i32 0, i32* %32, align 8
  %33 = getelementptr inbounds i8, i8* %29, i64 4
  %34 = bitcast i8* %33 to i16*
  store i16 -1, i16* %34, align 4
  %35 = getelementptr inbounds i8, i8* %29, i64 8
  %36 = bitcast i8* %35 to i32*
  store i32 0, i32* %36, align 8
  %37 = getelementptr inbounds i8, i8* %29, i64 12
  %38 = bitcast i8* %37 to i32*
  store i32 0, i32* %38, align 4
  %39 = getelementptr inbounds i8, i8* %29, i64 16
  %40 = bitcast i8* %39 to i32*
  store i32 %3, i32* %40, align 8
  %41 = getelementptr inbounds i8, i8* %29, i64 24
  %42 = bitcast i8* %41 to i64*
  store i64 0, i64* %42, align 8
  %43 = getelementptr inbounds i8, i8* %29, i64 32
  %44 = bitcast i8* %43 to i32*
  store i32 1, i32* %44, align 8
  %45 = ptrtoint i8* %29 to i64
  store i64 %45, i64* %27, align 8
  store i64 %31, i64* %26, align 8
  store i64 %31, i64* %28, align 8
  %46 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %2, i64 0, i32 0, i32 1
  %47 = bitcast i32** %46 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = bitcast %"class.std::__1::vector.156"* %2 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = bitcast %struct.NodeInfo* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %51) #10
  %52 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %7, i64 0, i32 0
  store i64 0, i64* %52, align 8
  %53 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %7, i64 0, i32 1
  %54 = sub i64 %48, %50
  %55 = ashr exact i64 %54, 2
  store i64 %55, i64* %53, align 8
  %56 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %7, i64 0, i32 2
  store i64 0, i64* %56, align 8
  call fastcc void @_ZNSt3__15queueIZN3jxl12_GLOBAL__N_113MakeFixedTreeEiRKNS_6vectorIiNS_9allocatorIiEEEENS1_9PredictorEmE8NodeInfoNS_5dequeISA_NS4_ISA_EEEEE4pushEOSA_(%"class.std::__1::queue"* nonnull %6, %struct.NodeInfo* nonnull dereferenceable(24) %7)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %51) #10
  %57 = load i64, i64* %25, align 8
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %260, label %59

59:                                               ; preds = %5
  %60 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %2, i64 0, i32 0, i32 0
  %61 = bitcast %"struct.jxl::PropertyDecisionNode"** %20 to i64*
  %62 = bitcast %"class.std::__1::vector.52"* %0 to i64*
  %63 = trunc i32 %1 to i16
  %64 = bitcast %struct.NodeInfo* %8 to i8*
  %65 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %8, i64 0, i32 0
  %66 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %8, i64 0, i32 1
  %67 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %8, i64 0, i32 2
  %68 = bitcast %"struct.jxl::PropertyDecisionNode"** %21 to i64*
  %69 = bitcast %struct.NodeInfo* %9 to i8*
  %70 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %9, i64 0, i32 0
  %71 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %9, i64 0, i32 1
  %72 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %9, i64 0, i32 2
  br label %73

73:                                               ; preds = %59, %257
  %74 = phi i64 [ %57, %59 ], [ %258, %257 ]
  %75 = load %struct.NodeInfo**, %struct.NodeInfo*** %23, align 8
  %76 = load i64, i64* %24, align 8
  %77 = udiv i64 %76, 170
  %78 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %75, i64 %77
  %79 = load %struct.NodeInfo*, %struct.NodeInfo** %78, align 8
  %80 = urem i64 %76, 170
  %81 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %79, i64 %80, i32 0
  %82 = load i64, i64* %81, align 8
  %83 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %79, i64 %80, i32 1
  %84 = load i64, i64* %83, align 8
  %85 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %79, i64 %80, i32 2
  %86 = load i64, i64* %85, align 8
  %87 = add i64 %74, -1
  store i64 %87, i64* %25, align 8
  %88 = add i64 %76, 1
  store i64 %88, i64* %24, align 8
  %89 = icmp ugt i64 %88, 339
  br i1 %89, label %90, label %95

90:                                               ; preds = %73
  %91 = bitcast %struct.NodeInfo** %75 to i8**
  %92 = load i8*, i8** %91, align 8
  tail call void @_ZdlPv(i8* %92) #13
  %93 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %75, i64 1
  store %struct.NodeInfo** %93, %struct.NodeInfo*** %23, align 8
  %94 = add i64 %76, -169
  store i64 %94, i64* %24, align 8
  br label %95

95:                                               ; preds = %73, %90
  %96 = add i64 %82, %19
  %97 = icmp ult i64 %96, %84
  br i1 %97, label %98, label %257

98:                                               ; preds = %95
  %99 = add i64 %84, %82
  %100 = lshr i64 %99, 1
  %101 = and i64 %100, 4294967295
  %102 = load i32*, i32** %60, align 8
  %103 = getelementptr inbounds i32, i32* %102, i64 %101
  %104 = load i32, i32* %103, align 4
  %105 = load i64, i64* %61, align 8
  %106 = load i64, i64* %62, align 8
  %107 = sub i64 %105, %106
  %108 = sdiv exact i64 %107, 40
  %109 = trunc i64 %108 to i32
  %110 = add nsw i32 %109, 1
  %111 = inttoptr i64 %106 to %"struct.jxl::PropertyDecisionNode"*
  %112 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %111, i64 %86, i32 0
  store i32 %104, i32* %112, align 8
  %113 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %111, i64 %86, i32 1
  store i16 %63, i16* %113, align 4
  %114 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %111, i64 %86, i32 3
  store i32 %109, i32* %114, align 8
  %115 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %111, i64 %86, i32 4
  store i32 %110, i32* %115, align 4
  %116 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %111, i64 %86, i32 5
  store i32 0, i32* %116, align 8
  %117 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %111, i64 %86, i32 7
  store i64 0, i64* %117, align 8
  %118 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %111, i64 %86, i32 8
  store i32 1, i32* %118, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %64) #10
  %119 = add nuw i64 %100, 1
  %120 = and i64 %119, 4294967295
  store i64 %120, i64* %65, align 8
  store i64 %84, i64* %66, align 8
  %121 = load i64, i64* %61, align 8
  %122 = load i64, i64* %62, align 8
  %123 = sub i64 %121, %122
  %124 = sdiv exact i64 %123, 40
  store i64 %124, i64* %67, align 8
  call fastcc void @_ZNSt3__15queueIZN3jxl12_GLOBAL__N_113MakeFixedTreeEiRKNS_6vectorIiNS_9allocatorIiEEEENS1_9PredictorEmE8NodeInfoNS_5dequeISA_NS4_ISA_EEEEE4pushEOSA_(%"class.std::__1::queue"* nonnull %6, %struct.NodeInfo* nonnull dereferenceable(24) %8)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %64) #10
  %125 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %20, align 8
  %126 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %21, align 8
  %127 = icmp ult %"struct.jxl::PropertyDecisionNode"* %125, %126
  %128 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %126 to i64
  br i1 %127, label %129, label %139

129:                                              ; preds = %98
  %130 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %125, i64 0, i32 0
  store i32 0, i32* %130, align 8
  %131 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %125, i64 0, i32 1
  store i16 -1, i16* %131, align 4
  %132 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %125, i64 0, i32 3
  store i32 0, i32* %132, align 8
  %133 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %125, i64 0, i32 4
  store i32 0, i32* %133, align 4
  %134 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %125, i64 0, i32 5
  store i32 %3, i32* %134, align 8
  %135 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %125, i64 0, i32 7
  store i64 0, i64* %135, align 8
  %136 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %125, i64 0, i32 8
  store i32 1, i32* %136, align 8
  %137 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %125, i64 1
  %138 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %137 to i64
  store i64 %138, i64* %61, align 8
  br label %189

139:                                              ; preds = %98
  %140 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %125 to i64
  %141 = load i64, i64* %62, align 8
  %142 = sub i64 %140, %141
  %143 = sdiv exact i64 %142, 40
  %144 = add nsw i64 %143, 1
  %145 = icmp ugt i64 %144, 461168601842738790
  br i1 %145, label %146, label %148

146:                                              ; preds = %139
  %147 = bitcast %"class.std::__1::vector.52"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %147) #12
  unreachable

148:                                              ; preds = %139
  %149 = sub i64 %128, %141
  %150 = sdiv exact i64 %149, 40
  %151 = icmp ult i64 %150, 230584300921369395
  br i1 %151, label %152, label %157

152:                                              ; preds = %148
  %153 = shl nsw i64 %150, 1
  %154 = icmp ult i64 %153, %144
  %155 = select i1 %154, i64 %144, i64 %153
  %156 = icmp eq i64 %155, 0
  br i1 %156, label %162, label %157

157:                                              ; preds = %152, %148
  %158 = phi i64 [ %155, %152 ], [ 461168601842738790, %148 ]
  %159 = mul i64 %158, 40
  %160 = tail call i8* @_Znwm(i64 %159) #13
  %161 = bitcast i8* %160 to %"struct.jxl::PropertyDecisionNode"*
  br label %162

162:                                              ; preds = %157, %152
  %163 = phi i64 [ %158, %157 ], [ 0, %152 ]
  %164 = phi %"struct.jxl::PropertyDecisionNode"* [ %161, %157 ], [ null, %152 ]
  %165 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %164, i64 %143
  %166 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %164, i64 %163
  %167 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %166 to i64
  %168 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %165, i64 0, i32 0
  store i32 0, i32* %168, align 8
  %169 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %164, i64 %143, i32 1
  store i16 -1, i16* %169, align 4
  %170 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %164, i64 %143, i32 3
  store i32 0, i32* %170, align 8
  %171 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %164, i64 %143, i32 4
  store i32 0, i32* %171, align 4
  %172 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %164, i64 %143, i32 5
  store i32 %3, i32* %172, align 8
  %173 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %164, i64 %143, i32 7
  store i64 0, i64* %173, align 8
  %174 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %164, i64 %143, i32 8
  store i32 1, i32* %174, align 8
  %175 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %165, i64 1
  %176 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %175 to i64
  %177 = sdiv exact i64 %142, -40
  %178 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %165, i64 %177
  %179 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %178 to i64
  %180 = icmp sgt i64 %142, 0
  br i1 %180, label %181, label %184

181:                                              ; preds = %162
  %182 = bitcast %"struct.jxl::PropertyDecisionNode"* %178 to i8*
  %183 = inttoptr i64 %141 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %182, i8* align 8 %183, i64 %142, i1 false) #10
  br label %184

184:                                              ; preds = %181, %162
  store i64 %179, i64* %62, align 8
  store i64 %176, i64* %61, align 8
  store i64 %167, i64* %68, align 8
  %185 = icmp eq i64 %141, 0
  br i1 %185, label %189, label %186

186:                                              ; preds = %184
  %187 = inttoptr i64 %141 to i8*
  tail call void @_ZdlPv(i8* %187) #13
  %188 = load i64, i64* %61, align 8
  br label %189

189:                                              ; preds = %129, %184, %186
  %190 = phi i64 [ %138, %129 ], [ %176, %184 ], [ %188, %186 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %69) #10
  store i64 %82, i64* %70, align 8
  store i64 %101, i64* %71, align 8
  %191 = load i64, i64* %62, align 8
  %192 = sub i64 %190, %191
  %193 = sdiv exact i64 %192, 40
  store i64 %193, i64* %72, align 8
  call fastcc void @_ZNSt3__15queueIZN3jxl12_GLOBAL__N_113MakeFixedTreeEiRKNS_6vectorIiNS_9allocatorIiEEEENS1_9PredictorEmE8NodeInfoNS_5dequeISA_NS4_ISA_EEEEE4pushEOSA_(%"class.std::__1::queue"* nonnull %6, %struct.NodeInfo* nonnull dereferenceable(24) %9)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %69) #10
  %194 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %20, align 8
  %195 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %21, align 8
  %196 = icmp ult %"struct.jxl::PropertyDecisionNode"* %194, %195
  %197 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %195 to i64
  br i1 %196, label %198, label %208

198:                                              ; preds = %189
  %199 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %194, i64 0, i32 0
  store i32 0, i32* %199, align 8
  %200 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %194, i64 0, i32 1
  store i16 -1, i16* %200, align 4
  %201 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %194, i64 0, i32 3
  store i32 0, i32* %201, align 8
  %202 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %194, i64 0, i32 4
  store i32 0, i32* %202, align 4
  %203 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %194, i64 0, i32 5
  store i32 %3, i32* %203, align 8
  %204 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %194, i64 0, i32 7
  store i64 0, i64* %204, align 8
  %205 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %194, i64 0, i32 8
  store i32 1, i32* %205, align 8
  %206 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %194, i64 1
  %207 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %206 to i64
  store i64 %207, i64* %61, align 8
  br label %257

208:                                              ; preds = %189
  %209 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %194 to i64
  %210 = load i64, i64* %62, align 8
  %211 = sub i64 %209, %210
  %212 = sdiv exact i64 %211, 40
  %213 = add nsw i64 %212, 1
  %214 = icmp ugt i64 %213, 461168601842738790
  br i1 %214, label %215, label %217

215:                                              ; preds = %208
  %216 = bitcast %"class.std::__1::vector.52"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %216) #12
  unreachable

217:                                              ; preds = %208
  %218 = sub i64 %197, %210
  %219 = sdiv exact i64 %218, 40
  %220 = icmp ult i64 %219, 230584300921369395
  br i1 %220, label %221, label %226

221:                                              ; preds = %217
  %222 = shl nsw i64 %219, 1
  %223 = icmp ult i64 %222, %213
  %224 = select i1 %223, i64 %213, i64 %222
  %225 = icmp eq i64 %224, 0
  br i1 %225, label %231, label %226

226:                                              ; preds = %221, %217
  %227 = phi i64 [ %224, %221 ], [ 461168601842738790, %217 ]
  %228 = mul i64 %227, 40
  %229 = tail call i8* @_Znwm(i64 %228) #13
  %230 = bitcast i8* %229 to %"struct.jxl::PropertyDecisionNode"*
  br label %231

231:                                              ; preds = %226, %221
  %232 = phi i64 [ %227, %226 ], [ 0, %221 ]
  %233 = phi %"struct.jxl::PropertyDecisionNode"* [ %230, %226 ], [ null, %221 ]
  %234 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %233, i64 %212
  %235 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %233, i64 %232
  %236 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %235 to i64
  %237 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %234, i64 0, i32 0
  store i32 0, i32* %237, align 8
  %238 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %233, i64 %212, i32 1
  store i16 -1, i16* %238, align 4
  %239 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %233, i64 %212, i32 3
  store i32 0, i32* %239, align 8
  %240 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %233, i64 %212, i32 4
  store i32 0, i32* %240, align 4
  %241 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %233, i64 %212, i32 5
  store i32 %3, i32* %241, align 8
  %242 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %233, i64 %212, i32 7
  store i64 0, i64* %242, align 8
  %243 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %233, i64 %212, i32 8
  store i32 1, i32* %243, align 8
  %244 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %234, i64 1
  %245 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %244 to i64
  %246 = sdiv exact i64 %211, -40
  %247 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %234, i64 %246
  %248 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %247 to i64
  %249 = icmp sgt i64 %211, 0
  br i1 %249, label %250, label %253

250:                                              ; preds = %231
  %251 = bitcast %"struct.jxl::PropertyDecisionNode"* %247 to i8*
  %252 = inttoptr i64 %210 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %251, i8* align 8 %252, i64 %211, i1 false) #10
  br label %253

253:                                              ; preds = %250, %231
  store i64 %248, i64* %62, align 8
  store i64 %245, i64* %61, align 8
  store i64 %236, i64* %68, align 8
  %254 = icmp eq i64 %210, 0
  br i1 %254, label %257, label %255

255:                                              ; preds = %253
  %256 = inttoptr i64 %210 to i8*
  tail call void @_ZdlPv(i8* %256) #13
  br label %257

257:                                              ; preds = %255, %253, %198, %95
  %258 = load i64, i64* %25, align 8
  %259 = icmp eq i64 %258, 0
  br i1 %259, label %260, label %73

260:                                              ; preds = %257, %5
  %261 = getelementptr inbounds %"class.std::__1::queue", %"class.std::__1::queue"* %6, i64 0, i32 0, i32 0
  call fastcc void @_ZNSt3__112__deque_baseIZN3jxl12_GLOBAL__N_113MakeFixedTreeEiRKNS_6vectorIiNS_9allocatorIiEEEENS1_9PredictorEmE8NodeInfoNS4_ISA_EEED2Ev(%"class.std::__1::__deque_base"* nonnull %261) #10
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %22) #10
  ret void
}

declare void @_ZN3jxl12TokenizeTreeERKNSt3__16vectorINS_20PropertyDecisionNodeENS0_9allocatorIS2_EEEEPNS1_INS_5TokenENS3_IS8_EEEEPS5_(%"class.std::__1::vector.52"* dereferenceable(24), %"class.std::__1::vector.61"*, %"class.std::__1::vector.52"*) local_unnamed_addr #2

declare void @_ZN3jxl9PrintTreeERKNSt3__16vectorINS_20PropertyDecisionNodeENS0_9allocatorIS2_EEEERKNS0_12basic_stringIcNS0_11char_traitsIcEENS3_IcEEEE(%"class.std::__1::vector.52"* dereferenceable(24), %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl19ModularFrameEncoder16EncodeGlobalInfoEPNS_9BitWriterEPNS_6AuxOutE(%"class.jxl::ModularFrameEncoder"*, %"struct.jxl::BitWriter"*, %"struct.jxl::AuxOut"*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.jxl::BitWriter::Allotment", align 8
  %5 = alloca %"struct.jxl::HistogramParams", align 16
  %6 = bitcast %"class.jxl::BitWriter::Allotment"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %6) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 40, i1 false)
  call void @_ZN3jxl9BitWriter9AllotmentC1EPS0_m(%"class.jxl::BitWriter::Allotment"* nonnull %4, %"struct.jxl::BitWriter"* %1, i64 1) #10
  %7 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 5
  %8 = getelementptr inbounds %"class.std::__1::vector.59", %"class.std::__1::vector.59"* %7, i64 0, i32 0, i32 0
  %9 = load %"class.std::__1::vector.61"*, %"class.std::__1::vector.61"** %8, align 8
  %10 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 5, i32 0, i32 1
  %11 = load %"class.std::__1::vector.61"*, %"class.std::__1::vector.61"** %10, align 8
  %12 = icmp eq %"class.std::__1::vector.61"* %9, %11
  br i1 %12, label %19, label %13

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %9, i64 0, i32 0, i32 0
  %15 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %14, align 8
  %16 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %9, i64 0, i32 0, i32 1
  %17 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %16, align 8
  %18 = icmp eq %"struct.jxl::Token"* %15, %17
  br i1 %18, label %19, label %20

19:                                               ; preds = %13, %3
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %1, i64 1, i64 0) #10
  call void @_ZN3jxl16ReclaimAndChargeEPNS_9BitWriterEPNS0_9AllotmentEmPNS_6AuxOutE(%"struct.jxl::BitWriter"* %1, %"class.jxl::BitWriter::Allotment"* nonnull %4, i64 17, %"struct.jxl::AuxOut"* %2) #10
  br label %94

20:                                               ; preds = %13
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %1, i64 1, i64 1) #10
  call void @_ZN3jxl16ReclaimAndChargeEPNS_9BitWriterEPNS0_9AllotmentEmPNS_6AuxOutE(%"struct.jxl::BitWriter"* %1, %"class.jxl::BitWriter::Allotment"* nonnull %4, i64 17, %"struct.jxl::AuxOut"* %2) #10
  %21 = bitcast %"struct.jxl::HistogramParams"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %21) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %21, i8 -86, i64 56, i1 false)
  %22 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %5, i64 0, i32 1
  %23 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %5, i64 0, i32 2
  %24 = bitcast %"struct.jxl::HistogramParams"* %5 to <4 x i32>*
  store <4 x i32> <i32 2, i32 3, i32 1, i32 2>, <4 x i32>* %24, align 16
  %25 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %5, i64 0, i32 4
  %26 = bitcast %"class.std::__1::vector"* %25 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %26, i8 0, i64 24, i1 false) #10
  %27 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %5, i64 0, i32 5
  store i64 -1, i64* %27, align 8
  %28 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %5, i64 0, i32 6
  store i8 0, i8* %28, align 16
  %29 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 7
  %30 = load i32, i32* %29, align 4
  %31 = icmp sgt i32 %30, 2
  br i1 %31, label %32, label %51

32:                                               ; preds = %20
  %33 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %5, i64 0, i32 0
  %34 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %5, i64 0, i32 3
  store i32 1, i32* %33, align 16
  store i32 1, i32* %34, align 4
  store i32 0, i32* %23, align 8
  %35 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 1, i32 0, i32 0
  %36 = load i8*, i8** %35, align 8
  %37 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 1, i32 0, i32 1
  %38 = load i8*, i8** %37, align 8
  %39 = icmp eq i8* %36, %38
  br i1 %39, label %43, label %40

40:                                               ; preds = %32
  %41 = load i8, i8* %36, align 1
  %42 = icmp eq i8 %41, 0
  br i1 %42, label %43, label %49

43:                                               ; preds = %40, %32
  %44 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 14
  %45 = load i8, i8* %44, align 8, !range !2
  %46 = icmp ne i8 %45, 0
  %47 = icmp slt i32 %30, 6
  %48 = and i1 %47, %46
  br i1 %48, label %49, label %50

49:                                               ; preds = %43, %40
  store i32 1, i32* %22, align 4
  br label %55

50:                                               ; preds = %43
  store i32 0, i32* %22, align 4
  br label %55

51:                                               ; preds = %20
  %52 = icmp eq i32 %30, 2
  br i1 %52, label %54, label %53

53:                                               ; preds = %51
  store i32 3, i32* %23, align 8
  br label %55

54:                                               ; preds = %51
  store i32 2, i32* %23, align 8
  br label %55

55:                                               ; preds = %53, %54, %49, %50
  %56 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 8
  %57 = load i64, i64* %56, align 8
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %60, label %59

59:                                               ; preds = %55
  store i64 12, i64* %27, align 8
  br label %60

60:                                               ; preds = %55, %59
  %61 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 8
  %62 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 9
  %63 = call i64 @_ZN3jxl24BuildAndEncodeHistogramsERKNS_15HistogramParamsEmRNSt3__16vectorINS4_INS_5TokenENS3_9allocatorIS5_EEEENS6_IS8_EEEEPNS_19EntropyEncodingDataEPNS4_IhNS6_IhEEEEPNS_9BitWriterEmPNS_6AuxOutE(%"struct.jxl::HistogramParams"* nonnull dereferenceable(56) %5, i64 6, %"class.std::__1::vector.59"* dereferenceable(24) %7, %"struct.jxl::EntropyEncodingData"* %61, %"class.std::__1::vector.1"* %62, %"struct.jxl::BitWriter"* %1, i64 17, %"struct.jxl::AuxOut"* %2) #10
  %64 = load %"class.std::__1::vector.61"*, %"class.std::__1::vector.61"** %8, align 8
  call void @_ZN3jxl11WriteTokensERKNSt3__16vectorINS_5TokenENS0_9allocatorIS2_EEEERKNS_19EntropyEncodingDataERKNS1_IhNS3_IhEEEEPNS_9BitWriterEmPNS_6AuxOutE(%"class.std::__1::vector.61"* dereferenceable(24) %64, %"struct.jxl::EntropyEncodingData"* dereferenceable(104) %61, %"class.std::__1::vector.1"* dereferenceable(24) %62, %"struct.jxl::BitWriter"* %1, i64 17, %"struct.jxl::AuxOut"* %2) #10
  %65 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 17
  %66 = icmp eq %"class.std::__1::vector"* %25, %65
  br i1 %66, label %72, label %67

67:                                               ; preds = %60
  %68 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %65, i64 0, i32 0, i32 0
  %69 = load i64*, i64** %68, align 8
  %70 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 17, i32 0, i32 1
  %71 = load i64*, i64** %70, align 8
  call void @_ZNSt3__16vectorImNS_9allocatorImEEE6assignIPmEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleImNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector"* %25, i64* %69, i64* %71) #10
  br label %72

72:                                               ; preds = %60, %67
  %73 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 4
  %74 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 4, i32 0, i32 1
  %75 = bitcast %"struct.jxl::PropertyDecisionNode"** %74 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = bitcast %"class.std::__1::vector.52"* %73 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = sub i64 %76, %78
  %80 = sdiv exact i64 %79, 40
  %81 = add nsw i64 %80, 1
  %82 = lshr i64 %81, 1
  %83 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 7
  %84 = call i64 @_ZN3jxl24BuildAndEncodeHistogramsERKNS_15HistogramParamsEmRNSt3__16vectorINS4_INS_5TokenENS3_9allocatorIS5_EEEENS6_IS8_EEEEPNS_19EntropyEncodingDataEPNS4_IhNS6_IhEEEEPNS_9BitWriterEmPNS_6AuxOutE(%"struct.jxl::HistogramParams"* nonnull dereferenceable(56) %5, i64 %82, %"class.std::__1::vector.59"* dereferenceable(24) %83, %"struct.jxl::EntropyEncodingData"* %61, %"class.std::__1::vector.1"* %62, %"struct.jxl::BitWriter"* %1, i64 14, %"struct.jxl::AuxOut"* %2) #10
  %85 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %5, i64 0, i32 4, i32 0, i32 0
  %86 = load i64*, i64** %85, align 16
  %87 = icmp eq i64* %86, null
  br i1 %87, label %93, label %88

88:                                               ; preds = %72
  %89 = ptrtoint i64* %86 to i64
  %90 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %5, i64 0, i32 4, i32 0, i32 1
  %91 = bitcast i64** %90 to i64*
  store i64 %89, i64* %91, align 8
  %92 = bitcast i64* %86 to i8*
  call void @_ZdlPv(i8* %92) #13
  br label %93

93:                                               ; preds = %72, %88
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %21) #10
  br label %94

94:                                               ; preds = %93, %19
  call void @_ZN3jxl9BitWriter9AllotmentD1Ev(%"class.jxl::BitWriter::Allotment"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %6) #10
  ret i32 0
}

declare void @_ZN3jxl9BitWriter9AllotmentC1EPS0_m(%"class.jxl::BitWriter::Allotment"*, %"struct.jxl::BitWriter"*, i64) unnamed_addr #2

declare void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"*, i64, i64) local_unnamed_addr #2

declare void @_ZN3jxl16ReclaimAndChargeEPNS_9BitWriterEPNS0_9AllotmentEmPNS_6AuxOutE(%"struct.jxl::BitWriter"*, %"class.jxl::BitWriter::Allotment"*, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #2

declare i64 @_ZN3jxl24BuildAndEncodeHistogramsERKNS_15HistogramParamsEmRNSt3__16vectorINS4_INS_5TokenENS3_9allocatorIS5_EEEENS6_IS8_EEEEPNS_19EntropyEncodingDataEPNS4_IhNS6_IhEEEEPNS_9BitWriterEmPNS_6AuxOutE(%"struct.jxl::HistogramParams"* dereferenceable(56), i64, %"class.std::__1::vector.59"* dereferenceable(24), %"struct.jxl::EntropyEncodingData"*, %"class.std::__1::vector.1"*, %"struct.jxl::BitWriter"*, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #2

declare void @_ZN3jxl11WriteTokensERKNSt3__16vectorINS_5TokenENS0_9allocatorIS2_EEEERKNS_19EntropyEncodingDataERKNS1_IhNS3_IhEEEEPNS_9BitWriterEmPNS_6AuxOutE(%"class.std::__1::vector.61"* dereferenceable(24), %"struct.jxl::EntropyEncodingData"* dereferenceable(104), %"class.std::__1::vector.1"* dereferenceable(24), %"struct.jxl::BitWriter"*, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN3jxl9BitWriter9AllotmentD1Ev(%"class.jxl::BitWriter::Allotment"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl19ModularFrameEncoder12EncodeStreamEPNS_9BitWriterEPNS_6AuxOutEmRKNS_15ModularStreamIdE(%"class.jxl::ModularFrameEncoder"*, %"struct.jxl::BitWriter"*, %"struct.jxl::AuxOut"*, i64, %"struct.jxl::ModularStreamId"* nocapture readonly dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %4, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  switch i32 %7, label %49 [
    i32 5, label %35
    i32 1, label %8
    i32 2, label %12
    i32 3, label %19
    i32 4, label %27
  ]

8:                                                ; preds = %5
  %9 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %4, i64 0, i32 2
  %10 = load i64, i64* %9, align 8
  %11 = add i64 %10, 1
  br label %49

12:                                               ; preds = %5
  %13 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 10, i32 15
  %14 = load i64, i64* %13, align 8
  %15 = add i64 %14, 1
  %16 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %4, i64 0, i32 2
  %17 = load i64, i64* %16, align 8
  %18 = add i64 %15, %17
  br label %49

19:                                               ; preds = %5
  %20 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 10, i32 15
  %21 = load i64, i64* %20, align 8
  %22 = shl i64 %21, 1
  %23 = or i64 %22, 1
  %24 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %4, i64 0, i32 2
  %25 = load i64, i64* %24, align 8
  %26 = add i64 %23, %25
  br label %49

27:                                               ; preds = %5
  %28 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 10, i32 15
  %29 = load i64, i64* %28, align 8
  %30 = mul i64 %29, 3
  %31 = add i64 %30, 1
  %32 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %4, i64 0, i32 1
  %33 = load i64, i64* %32, align 8
  %34 = add i64 %31, %33
  br label %49

35:                                               ; preds = %5
  %36 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 10, i32 15
  %37 = load i64, i64* %36, align 8
  %38 = mul i64 %37, 3
  %39 = add i64 %38, 18
  %40 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 10, i32 14
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %4, i64 0, i32 3
  %43 = load i64, i64* %42, align 8
  %44 = mul i64 %43, %41
  %45 = add i64 %39, %44
  %46 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %4, i64 0, i32 2
  %47 = load i64, i64* %46, align 8
  %48 = add i64 %45, %47
  br label %49

49:                                               ; preds = %5, %8, %12, %19, %27, %35
  %50 = phi i64 [ %48, %35 ], [ %34, %27 ], [ %26, %19 ], [ %18, %12 ], [ %11, %8 ], [ 0, %5 ]
  %51 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 2, i32 0, i32 0
  %52 = load %"class.jxl::Image"*, %"class.jxl::Image"** %51, align 8
  %53 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %52, i64 %50, i32 7
  %54 = load i64, i64* %53, align 8
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %68, label %56

56:                                               ; preds = %49
  %57 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 6, i32 0, i32 0
  %58 = load %"struct.jxl::GroupHeader"*, %"struct.jxl::GroupHeader"** %57, align 8
  %59 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %58, i64 %50, i32 0
  %60 = tail call i32 @_ZN3jxl6Bundle5WriteERKNS_6FieldsEPNS_9BitWriterEmPNS_6AuxOutE(%"class.jxl::Fields"* dereferenceable(8) %59, %"struct.jxl::BitWriter"* %1, i64 %3, %"struct.jxl::AuxOut"* %2) #10
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %68

62:                                               ; preds = %56
  %63 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 7, i32 0, i32 0
  %64 = load %"class.std::__1::vector.61"*, %"class.std::__1::vector.61"** %63, align 8
  %65 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %64, i64 %50
  %66 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 8
  %67 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 9
  tail call void @_ZN3jxl11WriteTokensERKNSt3__16vectorINS_5TokenENS0_9allocatorIS2_EEEERKNS_19EntropyEncodingDataERKNS1_IhNS3_IhEEEEPNS_9BitWriterEmPNS_6AuxOutE(%"class.std::__1::vector.61"* dereferenceable(24) %65, %"struct.jxl::EntropyEncodingData"* dereferenceable(104) %66, %"class.std::__1::vector.1"* dereferenceable(24) %67, %"struct.jxl::BitWriter"* %1, i64 %3, %"struct.jxl::AuxOut"* %2) #10
  br label %68

68:                                               ; preds = %56, %49, %62
  %69 = phi i32 [ 0, %62 ], [ 0, %49 ], [ %60, %56 ]
  ret i32 %69
}

declare i32 @_ZN3jxl6Bundle5WriteERKNS_6FieldsEPNS_9BitWriterEmPNS_6AuxOutE(%"class.jxl::Fields"* dereferenceable(8), %"struct.jxl::BitWriter"*, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl19ModularFrameEncoder19PrepareStreamParamsERKNS_4RectERKNS_14CompressParamsEiiRKNS_15ModularStreamIdEb(%"class.jxl::ModularFrameEncoder"* nocapture readonly, %"class.jxl::Rect"* nocapture readonly dereferenceable(32), %"struct.jxl::CompressParams"* nocapture readonly dereferenceable(360), i32, i32, %"struct.jxl::ModularStreamId"* nocapture readonly dereferenceable(32), i1 zeroext) local_unnamed_addr #0 align 2 {
  %8 = alloca [18 x %"struct.jxl::Histogram"], align 16
  %9 = alloca [34 x %"struct.jxl::Histogram"], align 16
  %10 = alloca %"struct.jxl::weighted::Header", align 8
  %11 = alloca %"struct.jxl::weighted::State", align 8
  %12 = alloca %"struct.jxl::weighted::Header", align 8
  %13 = alloca %"class.jxl::Image", align 8
  %14 = alloca %"class.jxl::Channel", align 8
  %15 = alloca %"class.jxl::Transform", align 8
  %16 = alloca %"struct.jxl::weighted::Header", align 8
  %17 = alloca %"class.jxl::Transform", align 8
  %18 = alloca %"struct.jxl::weighted::Header", align 8
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca %"class.jxl::Transform", align 8
  %22 = alloca %"struct.jxl::weighted::Header", align 8
  %23 = alloca %"class.jxl::Transform", align 8
  %24 = alloca %"struct.jxl::weighted::Header", align 8
  %25 = alloca %"struct.jxl::weighted::Header", align 8
  %26 = alloca %"struct.jxl::weighted::Header", align 8
  %27 = alloca %"class.jxl::Transform", align 8
  %28 = alloca %"struct.jxl::weighted::Header", align 8
  %29 = alloca %"struct.jxl::weighted::Header", align 8
  %30 = alloca %"struct.jxl::weighted::Header", align 8
  %31 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %5, i64 0, i32 0
  %32 = load i32, i32* %31, align 8
  switch i32 %32, label %74 [
    i32 5, label %56
    i32 1, label %33
    i32 2, label %36
    i32 3, label %42
    i32 4, label %49
  ]

33:                                               ; preds = %7
  %34 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %5, i64 0, i32 2
  %35 = load i64, i64* %34, align 8
  br label %69

36:                                               ; preds = %7
  %37 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 10, i32 15
  %38 = load i64, i64* %37, align 8
  %39 = add i64 %38, 1
  %40 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %5, i64 0, i32 2
  %41 = load i64, i64* %40, align 8
  br label %69

42:                                               ; preds = %7
  %43 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 10, i32 15
  %44 = load i64, i64* %43, align 8
  %45 = shl i64 %44, 1
  %46 = or i64 %45, 1
  %47 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %5, i64 0, i32 2
  %48 = load i64, i64* %47, align 8
  br label %69

49:                                               ; preds = %7
  %50 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 10, i32 15
  %51 = load i64, i64* %50, align 8
  %52 = mul i64 %51, 3
  %53 = add i64 %52, 1
  %54 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %5, i64 0, i32 1
  %55 = load i64, i64* %54, align 8
  br label %69

56:                                               ; preds = %7
  %57 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 10, i32 15
  %58 = load i64, i64* %57, align 8
  %59 = mul i64 %58, 3
  %60 = add i64 %59, 18
  %61 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 10, i32 14
  %62 = load i64, i64* %61, align 8
  %63 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %5, i64 0, i32 3
  %64 = load i64, i64* %63, align 8
  %65 = mul i64 %64, %62
  %66 = add i64 %60, %65
  %67 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %5, i64 0, i32 2
  %68 = load i64, i64* %67, align 8
  br label %69

69:                                               ; preds = %33, %36, %42, %49, %56
  %70 = phi i64 [ 1, %33 ], [ %41, %36 ], [ %48, %42 ], [ %55, %49 ], [ %68, %56 ]
  %71 = phi i64 [ %35, %33 ], [ %39, %36 ], [ %46, %42 ], [ %53, %49 ], [ %66, %56 ]
  %72 = add i64 %71, %70
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %74, label %77

74:                                               ; preds = %7, %69
  %75 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.2, i64 0, i64 0), i32 1166, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.19, i64 0, i64 0)) #10
  %76 = tail call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

77:                                               ; preds = %69
  %78 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 2, i32 0, i32 0
  %79 = load %"class.jxl::Image"*, %"class.jxl::Image"** %78, align 8
  %80 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 2
  %81 = load i64, i64* %80, align 8
  %82 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 3
  %83 = load i64, i64* %82, align 8
  %84 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %79, i64 0, i32 5
  %85 = load i32, i32* %84, align 4
  %86 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %79, i64 %72
  %87 = bitcast %"class.jxl::Image"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %87) #10
  call void @_ZN3jxl5ImageC1Emmii(%"class.jxl::Image"* nonnull %13, i64 %81, i64 %83, i32 %85, i32 0) #10
  %88 = call dereferenceable(104) %"class.jxl::Image"* @_ZN3jxl5ImageaSEOS0_(%"class.jxl::Image"* %86, %"class.jxl::Image"* nonnull dereferenceable(104) %13) #10
  call void @_ZN3jxl5ImageD1Ev(%"class.jxl::Image"* nonnull %13) #10
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %87) #10
  %89 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %79, i64 0, i32 8
  %90 = load i64, i64* %89, align 8
  %91 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %79, i64 0, i32 0, i32 0, i32 1
  %92 = bitcast %"class.jxl::Channel"** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = bitcast %"class.jxl::Image"* %79 to i64*
  %95 = load i64, i64* %94, align 8
  %96 = sub i64 %93, %95
  %97 = ashr exact i64 %96, 6
  %98 = icmp ult i64 %90, %97
  %99 = inttoptr i64 %95 to %"class.jxl::Channel"*
  br i1 %98, label %100, label %115

100:                                              ; preds = %77
  %101 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 10, i32 16
  %102 = load i64, i64* %101, align 8
  br label %103

103:                                              ; preds = %100, %112
  %104 = phi i64 [ %90, %100 ], [ %113, %112 ]
  %105 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %99, i64 %104, i32 1
  %106 = load i64, i64* %105, align 8
  %107 = icmp ugt i64 %106, %102
  br i1 %107, label %115, label %108

108:                                              ; preds = %103
  %109 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %99, i64 %104, i32 2
  %110 = load i64, i64* %109, align 8
  %111 = icmp ugt i64 %110, %102
  br i1 %111, label %115, label %112

112:                                              ; preds = %108
  %113 = add nuw i64 %104, 1
  %114 = icmp ult i64 %113, %97
  br i1 %114, label %103, label %115

115:                                              ; preds = %112, %103, %108, %77
  %116 = phi i64 [ %90, %77 ], [ %104, %108 ], [ %104, %103 ], [ %113, %112 ]
  %117 = icmp ult i64 %116, %97
  br i1 %117, label %118, label %437

118:                                              ; preds = %115
  %119 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 0
  %120 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 1
  %121 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 16, i32 0, i32 0
  %122 = bitcast %"class.jxl::Channel"* %14 to i8*
  %123 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %14, i64 0, i32 0, i32 0
  %124 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %14, i64 0, i32 1
  %125 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %14, i64 0, i32 2
  %126 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %14, i64 0, i32 3
  %127 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %14, i64 0, i32 4
  %128 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %14, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %129 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %14, i64 0, i32 0, i32 0, i32 4
  %130 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %79, i64 %72, i32 0, i32 0, i32 1
  %131 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %79, i64 %72, i32 0, i32 0, i32 2, i32 0, i32 0
  %132 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %86, i64 0, i32 0
  %133 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %14, i64 0, i32 0, i32 0, i32 5
  %134 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %133, i64 0, i32 0, i32 0, i32 0
  %135 = bitcast %"class.std::__1::unique_ptr"* %133 to i64*
  %136 = bitcast i64* %124 to i8*
  %137 = bitcast %"class.jxl::Channel"** %130 to i64*
  %138 = bitcast i32* %126 to i8*
  br label %139

139:                                              ; preds = %118, %429
  %140 = phi i64 [ %95, %118 ], [ %430, %429 ]
  %141 = phi i64 [ %93, %118 ], [ %431, %429 ]
  %142 = phi %"class.jxl::Channel"* [ %99, %118 ], [ %436, %429 ]
  %143 = phi i64 [ %116, %118 ], [ %432, %429 ]
  %144 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %142, i64 %143, i32 3
  %145 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %142, i64 %143, i32 4
  %146 = load i32, i32* %145, align 4
  %147 = load i32, i32* %144, align 4
  %148 = icmp slt i32 %146, %147
  %149 = select i1 %148, i32 %146, i32 %147
  %150 = icmp sgt i32 %149, %4
  %151 = icmp slt i32 %149, %3
  %152 = or i1 %150, %151
  br i1 %152, label %429, label %153

153:                                              ; preds = %139
  %154 = load i64, i64* %119, align 8
  %155 = zext i32 %147 to i64
  %156 = lshr i64 %154, %155
  %157 = load i64, i64* %120, align 8
  %158 = zext i32 %146 to i64
  %159 = lshr i64 %157, %158
  %160 = load i64, i64* %80, align 8
  %161 = lshr i64 %160, %155
  %162 = load i64, i64* %82, align 8
  %163 = lshr i64 %162, %158
  %164 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %142, i64 %143, i32 1
  %165 = load i64, i64* %164, align 8
  %166 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %142, i64 %143, i32 2
  %167 = load i64, i64* %166, align 8
  %168 = add i64 %161, %156
  %169 = icmp ugt i64 %168, %165
  %170 = call i64 @llvm.usub.sat.i64(i64 %165, i64 %156) #10
  %171 = select i1 %169, i64 %170, i64 %161
  %172 = add i64 %163, %159
  %173 = icmp ugt i64 %172, %167
  %174 = call i64 @llvm.usub.sat.i64(i64 %167, i64 %159) #10
  %175 = select i1 %173, i64 %174, i64 %163
  %176 = icmp eq i64 %171, 0
  %177 = icmp eq i64 %175, 0
  %178 = or i1 %176, %177
  br i1 %178, label %429, label %179

179:                                              ; preds = %153
  %180 = load %"class.std::__1::vector.40"*, %"class.std::__1::vector.40"** %121, align 8
  %181 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %180, i64 %72
  %182 = trunc i64 %143 to i32
  %183 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %180, i64 %72, i32 0, i32 1
  %184 = load i32*, i32** %183, align 8
  %185 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %180, i64 %72, i32 0, i32 2, i32 0, i32 0
  %186 = load i32*, i32** %185, align 8
  %187 = icmp ult i32* %184, %186
  %188 = ptrtoint i32* %186 to i64
  br i1 %187, label %189, label %193

189:                                              ; preds = %179
  store i32 %182, i32* %184, align 4
  %190 = getelementptr inbounds i32, i32* %184, i64 1
  %191 = ptrtoint i32* %190 to i64
  %192 = bitcast i32** %183 to i64*
  store i64 %191, i64* %192, align 8
  br label %249

193:                                              ; preds = %179
  %194 = ptrtoint i32* %184 to i64
  %195 = bitcast i32** %183 to i64*
  %196 = bitcast %"class.std::__1::vector.40"* %181 to i64*
  %197 = load i64, i64* %196, align 8
  %198 = sub i64 %194, %197
  %199 = ashr exact i64 %198, 2
  %200 = add nsw i64 %199, 1
  %201 = icmp ugt i64 %200, 4611686018427387903
  br i1 %201, label %202, label %204

202:                                              ; preds = %193
  %203 = bitcast %"class.std::__1::vector.40"* %181 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %203) #12
  unreachable

204:                                              ; preds = %193
  %205 = bitcast i32** %185 to i64*
  %206 = sub i64 %188, %197
  %207 = ashr exact i64 %206, 2
  %208 = icmp ult i64 %207, 2305843009213693951
  br i1 %208, label %209, label %217

209:                                              ; preds = %204
  %210 = ashr exact i64 %206, 1
  %211 = icmp ult i64 %210, %200
  %212 = select i1 %211, i64 %200, i64 %210
  %213 = icmp eq i64 %212, 0
  br i1 %213, label %222, label %214

214:                                              ; preds = %209
  %215 = icmp ugt i64 %212, 4611686018427387903
  br i1 %215, label %216, label %217

216:                                              ; preds = %214
  call void @abort() #12
  unreachable

217:                                              ; preds = %214, %204
  %218 = phi i64 [ %212, %214 ], [ 4611686018427387903, %204 ]
  %219 = shl i64 %218, 2
  %220 = call i8* @_Znwm(i64 %219) #13
  %221 = bitcast i8* %220 to i32*
  br label %222

222:                                              ; preds = %217, %209
  %223 = phi i64 [ %218, %217 ], [ 0, %209 ]
  %224 = phi i32* [ %221, %217 ], [ null, %209 ]
  %225 = getelementptr inbounds i32, i32* %224, i64 %199
  %226 = getelementptr inbounds i32, i32* %224, i64 %223
  %227 = ptrtoint i32* %226 to i64
  store i32 %182, i32* %225, align 4
  %228 = getelementptr inbounds i32, i32* %225, i64 1
  %229 = ptrtoint i32* %228 to i64
  %230 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %181, i64 0, i32 0, i32 0
  %231 = load i32*, i32** %230, align 8
  %232 = load i64, i64* %195, align 8
  %233 = ptrtoint i32* %231 to i64
  %234 = sub i64 %232, %233
  %235 = ashr exact i64 %234, 2
  %236 = sub nsw i64 0, %235
  %237 = getelementptr inbounds i32, i32* %225, i64 %236
  %238 = ptrtoint i32* %237 to i64
  %239 = icmp sgt i64 %234, 0
  br i1 %239, label %240, label %244

240:                                              ; preds = %222
  %241 = bitcast i32* %237 to i8*
  %242 = bitcast i32* %231 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %241, i8* align 4 %242, i64 %234, i1 false) #10
  %243 = load i32*, i32** %230, align 8
  br label %244

244:                                              ; preds = %240, %222
  %245 = phi i32* [ %231, %222 ], [ %243, %240 ]
  store i64 %238, i64* %196, align 8
  store i64 %229, i64* %195, align 8
  store i64 %227, i64* %205, align 8
  %246 = icmp eq i32* %245, null
  br i1 %246, label %249, label %247

247:                                              ; preds = %244
  %248 = bitcast i32* %245 to i8*
  call void @_ZdlPv(i8* %248) #13
  br label %249

249:                                              ; preds = %247, %244, %189
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %122) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %122, i8 -86, i64 64, i1 false)
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %123, i64 %171, i64 %175, i64 4) #10
  store i64 %171, i64* %124, align 8
  store i64 %175, i64* %125, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %138, i8 0, i64 16, i1 false)
  %250 = load i32, i32* %144, align 8
  store i32 %250, i32* %126, align 8
  %251 = load i32, i32* %145, align 4
  store i32 %251, i32* %127, align 4
  %252 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %142, i64 %143, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %253 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %142, i64 %143, i32 0, i32 0, i32 4
  %254 = shl i64 %171, 2
  %255 = shl nsw i64 %156, 2
  %256 = add i64 %254, %255
  %257 = add i64 %171, -8
  %258 = lshr i64 %257, 3
  %259 = add nuw nsw i64 %258, 1
  %260 = icmp ult i64 %171, 8
  %261 = and i64 %171, -8
  %262 = and i64 %259, 3
  %263 = icmp ult i64 %257, 24
  %264 = sub nsw i64 %259, %262
  %265 = icmp eq i64 %262, 0
  %266 = icmp eq i64 %171, %261
  %267 = and i64 %171, 3
  %268 = icmp eq i64 %267, 0
  br label %290

269:                                              ; preds = %407
  %270 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %130, align 8
  %271 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %131, align 8
  %272 = icmp ult %"class.jxl::Channel"* %270, %271
  br i1 %272, label %273, label %282

273:                                              ; preds = %269
  %274 = bitcast %"class.jxl::Channel"* %270 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %274, i8* nonnull align 8 %122, i64 24, i1 false) #10
  %275 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %270, i64 0, i32 0, i32 0, i32 5
  %276 = load i64, i64* %135, align 8
  store i8* null, i8** %134, align 8
  %277 = bitcast %"class.std::__1::unique_ptr"* %275 to i64*
  store i64 %276, i64* %277, align 8
  %278 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %270, i64 0, i32 1
  %279 = bitcast i64* %278 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %279, i8* align 8 %136, i64 32, i1 false) #10
  %280 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %270, i64 1
  %281 = ptrtoint %"class.jxl::Channel"* %280 to i64
  store i64 %281, i64* %137, align 8
  br label %283

282:                                              ; preds = %269
  call void @_ZNSt3__16vectorIN3jxl7ChannelENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJS2_EEEvDpOT_(%"class.std::__1::vector.10"* %132, %"class.jxl::Channel"* nonnull dereferenceable(64) %14) #10
  br label %283

283:                                              ; preds = %273, %282
  %284 = load i8*, i8** %128, align 8
  store i8* null, i8** %128, align 8
  %285 = icmp eq i8* %284, null
  br i1 %285, label %287, label %286

286:                                              ; preds = %283
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %284) #10
  br label %287

287:                                              ; preds = %283, %286
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %122) #10
  %288 = load i64, i64* %92, align 8
  %289 = load i64, i64* %94, align 8
  br label %429

290:                                              ; preds = %249, %407
  %291 = phi i64 [ 0, %249 ], [ %408, %407 ]
  %292 = add i64 %291, %159
  %293 = load i8*, i8** %252, align 8
  %294 = load i64, i64* %253, align 8
  %295 = mul i64 %294, %292
  %296 = getelementptr inbounds i8, i8* %293, i64 %295
  %297 = ptrtoint i8* %296 to i64
  %298 = and i64 %297, 63
  %299 = icmp eq i64 %298, 0
  call void @llvm.assume(i1 %299) #10
  %300 = bitcast i8* %296 to i32*
  %301 = getelementptr inbounds i32, i32* %300, i64 %156
  %302 = load i8*, i8** %128, align 8
  %303 = load i64, i64* %129, align 8
  %304 = mul i64 %303, %291
  %305 = getelementptr inbounds i8, i8* %302, i64 %304
  %306 = ptrtoint i8* %305 to i64
  %307 = and i64 %306, 63
  %308 = icmp eq i64 %307, 0
  call void @llvm.assume(i1 %308) #10
  %309 = bitcast i8* %305 to i32*
  br i1 %260, label %310, label %326

310:                                              ; preds = %406, %326, %290
  %311 = phi i64 [ 0, %326 ], [ 0, %290 ], [ %261, %406 ]
  %312 = xor i64 %311, -1
  %313 = add i64 %171, %312
  br i1 %268, label %323, label %314

314:                                              ; preds = %310, %314
  %315 = phi i64 [ %320, %314 ], [ %311, %310 ]
  %316 = phi i64 [ %321, %314 ], [ %267, %310 ]
  %317 = getelementptr inbounds i32, i32* %301, i64 %315
  %318 = load i32, i32* %317, align 4
  %319 = getelementptr inbounds i32, i32* %309, i64 %315
  store i32 %318, i32* %319, align 4
  %320 = add nuw i64 %315, 1
  %321 = add i64 %316, -1
  %322 = icmp eq i64 %321, 0
  br i1 %322, label %323, label %314, !llvm.loop !41

323:                                              ; preds = %314, %310
  %324 = phi i64 [ %311, %310 ], [ %320, %314 ]
  %325 = icmp ult i64 %313, 3
  br i1 %325, label %407, label %410

326:                                              ; preds = %290
  %327 = add i64 %159, %291
  %328 = getelementptr i8, i8* %302, i64 %254
  %329 = getelementptr i8, i8* %328, i64 %304
  %330 = getelementptr i8, i8* %293, i64 %255
  %331 = mul i64 %294, %327
  %332 = getelementptr i8, i8* %330, i64 %331
  %333 = getelementptr i8, i8* %293, i64 %256
  %334 = getelementptr i8, i8* %333, i64 %331
  %335 = icmp ult i8* %305, %334
  %336 = icmp ult i8* %332, %329
  %337 = and i1 %335, %336
  br i1 %337, label %310, label %338

338:                                              ; preds = %326
  br i1 %263, label %388, label %339

339:                                              ; preds = %338, %339
  %340 = phi i64 [ %385, %339 ], [ 0, %338 ]
  %341 = phi i64 [ %386, %339 ], [ %264, %338 ]
  %342 = getelementptr inbounds i32, i32* %301, i64 %340
  %343 = bitcast i32* %342 to <4 x i32>*
  %344 = load <4 x i32>, <4 x i32>* %343, align 4, !alias.scope !42
  %345 = getelementptr inbounds i32, i32* %342, i64 4
  %346 = bitcast i32* %345 to <4 x i32>*
  %347 = load <4 x i32>, <4 x i32>* %346, align 4, !alias.scope !42
  %348 = getelementptr inbounds i32, i32* %309, i64 %340
  %349 = bitcast i32* %348 to <4 x i32>*
  store <4 x i32> %344, <4 x i32>* %349, align 64, !alias.scope !45, !noalias !42
  %350 = getelementptr inbounds i32, i32* %348, i64 4
  %351 = bitcast i32* %350 to <4 x i32>*
  store <4 x i32> %347, <4 x i32>* %351, align 16, !alias.scope !45, !noalias !42
  %352 = or i64 %340, 8
  %353 = getelementptr inbounds i32, i32* %301, i64 %352
  %354 = bitcast i32* %353 to <4 x i32>*
  %355 = load <4 x i32>, <4 x i32>* %354, align 4, !alias.scope !42
  %356 = getelementptr inbounds i32, i32* %353, i64 4
  %357 = bitcast i32* %356 to <4 x i32>*
  %358 = load <4 x i32>, <4 x i32>* %357, align 4, !alias.scope !42
  %359 = getelementptr inbounds i32, i32* %309, i64 %352
  %360 = bitcast i32* %359 to <4 x i32>*
  store <4 x i32> %355, <4 x i32>* %360, align 32, !alias.scope !45, !noalias !42
  %361 = getelementptr inbounds i32, i32* %359, i64 4
  %362 = bitcast i32* %361 to <4 x i32>*
  store <4 x i32> %358, <4 x i32>* %362, align 16, !alias.scope !45, !noalias !42
  %363 = or i64 %340, 16
  %364 = getelementptr inbounds i32, i32* %301, i64 %363
  %365 = bitcast i32* %364 to <4 x i32>*
  %366 = load <4 x i32>, <4 x i32>* %365, align 4, !alias.scope !42
  %367 = getelementptr inbounds i32, i32* %364, i64 4
  %368 = bitcast i32* %367 to <4 x i32>*
  %369 = load <4 x i32>, <4 x i32>* %368, align 4, !alias.scope !42
  %370 = getelementptr inbounds i32, i32* %309, i64 %363
  %371 = bitcast i32* %370 to <4 x i32>*
  store <4 x i32> %366, <4 x i32>* %371, align 64, !alias.scope !45, !noalias !42
  %372 = getelementptr inbounds i32, i32* %370, i64 4
  %373 = bitcast i32* %372 to <4 x i32>*
  store <4 x i32> %369, <4 x i32>* %373, align 16, !alias.scope !45, !noalias !42
  %374 = or i64 %340, 24
  %375 = getelementptr inbounds i32, i32* %301, i64 %374
  %376 = bitcast i32* %375 to <4 x i32>*
  %377 = load <4 x i32>, <4 x i32>* %376, align 4, !alias.scope !42
  %378 = getelementptr inbounds i32, i32* %375, i64 4
  %379 = bitcast i32* %378 to <4 x i32>*
  %380 = load <4 x i32>, <4 x i32>* %379, align 4, !alias.scope !42
  %381 = getelementptr inbounds i32, i32* %309, i64 %374
  %382 = bitcast i32* %381 to <4 x i32>*
  store <4 x i32> %377, <4 x i32>* %382, align 32, !alias.scope !45, !noalias !42
  %383 = getelementptr inbounds i32, i32* %381, i64 4
  %384 = bitcast i32* %383 to <4 x i32>*
  store <4 x i32> %380, <4 x i32>* %384, align 16, !alias.scope !45, !noalias !42
  %385 = add i64 %340, 32
  %386 = add i64 %341, -4
  %387 = icmp eq i64 %386, 0
  br i1 %387, label %388, label %339, !llvm.loop !47

388:                                              ; preds = %339, %338
  %389 = phi i64 [ 0, %338 ], [ %385, %339 ]
  br i1 %265, label %406, label %390

390:                                              ; preds = %388, %390
  %391 = phi i64 [ %403, %390 ], [ %389, %388 ]
  %392 = phi i64 [ %404, %390 ], [ %262, %388 ]
  %393 = getelementptr inbounds i32, i32* %301, i64 %391
  %394 = bitcast i32* %393 to <4 x i32>*
  %395 = load <4 x i32>, <4 x i32>* %394, align 4, !alias.scope !42
  %396 = getelementptr inbounds i32, i32* %393, i64 4
  %397 = bitcast i32* %396 to <4 x i32>*
  %398 = load <4 x i32>, <4 x i32>* %397, align 4, !alias.scope !42
  %399 = getelementptr inbounds i32, i32* %309, i64 %391
  %400 = bitcast i32* %399 to <4 x i32>*
  store <4 x i32> %395, <4 x i32>* %400, align 32, !alias.scope !45, !noalias !42
  %401 = getelementptr inbounds i32, i32* %399, i64 4
  %402 = bitcast i32* %401 to <4 x i32>*
  store <4 x i32> %398, <4 x i32>* %402, align 16, !alias.scope !45, !noalias !42
  %403 = add i64 %391, 8
  %404 = add i64 %392, -1
  %405 = icmp eq i64 %404, 0
  br i1 %405, label %406, label %390, !llvm.loop !48

406:                                              ; preds = %390, %388
  br i1 %266, label %407, label %310

407:                                              ; preds = %323, %410, %406
  %408 = add nuw i64 %291, 1
  %409 = icmp eq i64 %408, %175
  br i1 %409, label %269, label %290

410:                                              ; preds = %323, %410
  %411 = phi i64 [ %427, %410 ], [ %324, %323 ]
  %412 = getelementptr inbounds i32, i32* %301, i64 %411
  %413 = load i32, i32* %412, align 4
  %414 = getelementptr inbounds i32, i32* %309, i64 %411
  store i32 %413, i32* %414, align 4
  %415 = add nuw i64 %411, 1
  %416 = getelementptr inbounds i32, i32* %301, i64 %415
  %417 = load i32, i32* %416, align 4
  %418 = getelementptr inbounds i32, i32* %309, i64 %415
  store i32 %417, i32* %418, align 4
  %419 = add nuw i64 %411, 2
  %420 = getelementptr inbounds i32, i32* %301, i64 %419
  %421 = load i32, i32* %420, align 4
  %422 = getelementptr inbounds i32, i32* %309, i64 %419
  store i32 %421, i32* %422, align 4
  %423 = add nuw i64 %411, 3
  %424 = getelementptr inbounds i32, i32* %301, i64 %423
  %425 = load i32, i32* %424, align 4
  %426 = getelementptr inbounds i32, i32* %309, i64 %423
  store i32 %425, i32* %426, align 4
  %427 = add nuw i64 %411, 4
  %428 = icmp eq i64 %427, %171
  br i1 %428, label %407, label %410, !llvm.loop !49

429:                                              ; preds = %287, %153, %139
  %430 = phi i64 [ %289, %287 ], [ %140, %153 ], [ %140, %139 ]
  %431 = phi i64 [ %288, %287 ], [ %141, %153 ], [ %141, %139 ]
  %432 = add nuw i64 %143, 1
  %433 = sub i64 %431, %430
  %434 = ashr exact i64 %433, 6
  %435 = icmp ult i64 %432, %434
  %436 = inttoptr i64 %430 to %"class.jxl::Channel"*
  br i1 %435, label %139, label %437

437:                                              ; preds = %429, %115
  %438 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %79, i64 %72, i32 0, i32 0, i32 1
  %439 = bitcast %"class.jxl::Channel"** %438 to i64*
  %440 = load i64, i64* %439, align 8
  %441 = bitcast %"class.jxl::Image"* %86 to i64*
  %442 = load i64, i64* %441, align 8
  %443 = sub i64 %440, %442
  %444 = ashr exact i64 %443, 6
  %445 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %79, i64 %72, i32 6
  store i64 %444, i64* %445, align 8
  %446 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %79, i64 %72, i32 7
  store i64 %444, i64* %446, align 8
  %447 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %2, i64 0, i32 41, i32 0
  %448 = load float, float* %447, align 4
  %449 = fcmp oeq float %448, 1.000000e+02
  br i1 %449, label %450, label %645

450:                                              ; preds = %437
  %451 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %2, i64 0, i32 46
  %452 = load i32, i32* %451, align 4
  %453 = icmp eq i32 %452, 0
  br i1 %453, label %564, label %454

454:                                              ; preds = %450
  %455 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %2, i64 0, i32 7
  %456 = load i32, i32* %455, align 4
  %457 = icmp slt i32 %456, 6
  %458 = icmp ugt i64 %444, 1
  %459 = and i1 %457, %458
  br i1 %459, label %460, label %564

460:                                              ; preds = %454
  %461 = bitcast %"class.jxl::Transform"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %461) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %461, i8 -86, i64 72, i1 false)
  call void @_ZN3jxl9TransformC1ENS_11TransformIdE(%"class.jxl::Transform"* nonnull %15, i32 1) #10
  %462 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %79, i64 %72, i32 8
  %463 = load i64, i64* %462, align 8
  %464 = trunc i64 %463 to i32
  %465 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %15, i64 0, i32 2
  store i32 %464, i32* %465, align 4
  %466 = load i64, i64* %445, align 8
  %467 = trunc i64 %466 to i32
  %468 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %15, i64 0, i32 4
  store i32 %467, i32* %468, align 4
  %469 = load i32, i32* %451, align 4
  %470 = icmp slt i32 %469, 0
  %471 = sub nsw i32 0, %469
  %472 = select i1 %470, i32 %471, i32 %469
  %473 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %15, i64 0, i32 5
  store i32 %472, i32* %473, align 8
  %474 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %15, i64 0, i32 10
  %475 = lshr i32 %469, 31
  %476 = trunc i32 %475 to i8
  %477 = xor i8 %476, 1
  store i8 %477, i8* %474, align 8
  %478 = bitcast %"struct.jxl::weighted::Header"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %478) #10
  %479 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %16, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8weighted6HeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %479, align 8
  %480 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %16, i64 0, i32 2
  %481 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %16, i64 0, i32 0
  %482 = bitcast i32* %480 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %482, i8 0, i64 44, i1 false) #10
  call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* nonnull %481) #10
  %483 = call zeroext i1 @_ZN3jxl5Image12do_transformERKNS_9TransformERKNS_8weighted6HeaderE(%"class.jxl::Image"* %86, %"class.jxl::Transform"* nonnull dereferenceable(72) %15, %"struct.jxl::weighted::Header"* nonnull dereferenceable(56) %16) #10
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %478) #10
  %484 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %15, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl9TransformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %484, align 8
  %485 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %15, i64 0, i32 7
  %486 = getelementptr inbounds %"class.std::__1::vector.21", %"class.std::__1::vector.21"* %485, i64 0, i32 0, i32 0
  %487 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %486, align 8
  %488 = icmp eq %"struct.jxl::SqueezeParams"* %487, null
  br i1 %488, label %506, label %489

489:                                              ; preds = %460
  %490 = bitcast %"struct.jxl::SqueezeParams"* %487 to i8*
  %491 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %15, i64 0, i32 7, i32 0, i32 1
  %492 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %491, align 8
  %493 = icmp eq %"struct.jxl::SqueezeParams"* %492, %487
  br i1 %493, label %504, label %494

494:                                              ; preds = %489, %494
  %495 = phi %"struct.jxl::SqueezeParams"* [ %496, %494 ], [ %492, %489 ]
  %496 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %495, i64 -1
  %497 = bitcast %"struct.jxl::SqueezeParams"* %496 to void (%"struct.jxl::SqueezeParams"*)***
  %498 = load void (%"struct.jxl::SqueezeParams"*)**, void (%"struct.jxl::SqueezeParams"*)*** %497, align 8
  %499 = load void (%"struct.jxl::SqueezeParams"*)*, void (%"struct.jxl::SqueezeParams"*)** %498, align 8
  call void %499(%"struct.jxl::SqueezeParams"* %496) #10
  %500 = icmp eq %"struct.jxl::SqueezeParams"* %496, %487
  br i1 %500, label %501, label %494

501:                                              ; preds = %494
  %502 = bitcast %"class.std::__1::vector.21"* %485 to i8**
  %503 = load i8*, i8** %502, align 8
  br label %504

504:                                              ; preds = %501, %489
  %505 = phi i8* [ %503, %501 ], [ %490, %489 ]
  store %"struct.jxl::SqueezeParams"* %487, %"struct.jxl::SqueezeParams"** %491, align 8
  call void @_ZdlPv(i8* %505) #13
  br label %506

506:                                              ; preds = %504, %460
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %461) #10
  %507 = load i64, i64* %445, align 8
  %508 = icmp ugt i64 %507, 3
  br i1 %508, label %509, label %564

509:                                              ; preds = %506
  %510 = bitcast %"class.jxl::Transform"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %510) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %510, i8 -86, i64 72, i1 false)
  call void @_ZN3jxl9TransformC1ENS_11TransformIdE(%"class.jxl::Transform"* nonnull %17, i32 1) #10
  %511 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %79, i64 %72, i32 8
  %512 = load i64, i64* %511, align 8
  %513 = trunc i64 %512 to i32
  %514 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %17, i64 0, i32 2
  store i32 %513, i32* %514, align 4
  %515 = load i64, i64* %445, align 8
  %516 = trunc i64 %515 to i32
  %517 = add i32 %516, -1
  %518 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %17, i64 0, i32 4
  store i32 %517, i32* %518, align 4
  %519 = load i32, i32* %451, align 4
  %520 = icmp slt i32 %519, 0
  %521 = sub nsw i32 0, %519
  %522 = select i1 %520, i32 %521, i32 %519
  %523 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %17, i64 0, i32 5
  store i32 %522, i32* %523, align 8
  %524 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %17, i64 0, i32 10
  %525 = lshr i32 %519, 31
  %526 = trunc i32 %525 to i8
  %527 = xor i8 %526, 1
  store i8 %527, i8* %524, align 8
  %528 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %2, i64 0, i32 47
  %529 = load i8, i8* %528, align 8, !range !2
  %530 = icmp eq i8 %529, 0
  %531 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %17, i64 0, i32 11
  store i8 %529, i8* %531, align 1
  br i1 %530, label %534, label %532

532:                                              ; preds = %509
  %533 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %17, i64 0, i32 9
  store i32 6, i32* %533, align 4
  br label %534

534:                                              ; preds = %509, %532
  %535 = bitcast %"struct.jxl::weighted::Header"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %535) #10
  %536 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %18, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8weighted6HeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %536, align 8
  %537 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %18, i64 0, i32 2
  %538 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %18, i64 0, i32 0
  %539 = bitcast i32* %537 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %539, i8 0, i64 44, i1 false) #10
  call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* nonnull %538) #10
  %540 = call zeroext i1 @_ZN3jxl5Image12do_transformERKNS_9TransformERKNS_8weighted6HeaderE(%"class.jxl::Image"* %86, %"class.jxl::Transform"* nonnull dereferenceable(72) %17, %"struct.jxl::weighted::Header"* nonnull dereferenceable(56) %18) #10
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %535) #10
  %541 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %17, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl9TransformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %541, align 8
  %542 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %17, i64 0, i32 7
  %543 = getelementptr inbounds %"class.std::__1::vector.21", %"class.std::__1::vector.21"* %542, i64 0, i32 0, i32 0
  %544 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %543, align 8
  %545 = icmp eq %"struct.jxl::SqueezeParams"* %544, null
  br i1 %545, label %563, label %546

546:                                              ; preds = %534
  %547 = bitcast %"struct.jxl::SqueezeParams"* %544 to i8*
  %548 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %17, i64 0, i32 7, i32 0, i32 1
  %549 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %548, align 8
  %550 = icmp eq %"struct.jxl::SqueezeParams"* %549, %544
  br i1 %550, label %561, label %551

551:                                              ; preds = %546, %551
  %552 = phi %"struct.jxl::SqueezeParams"* [ %553, %551 ], [ %549, %546 ]
  %553 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %552, i64 -1
  %554 = bitcast %"struct.jxl::SqueezeParams"* %553 to void (%"struct.jxl::SqueezeParams"*)***
  %555 = load void (%"struct.jxl::SqueezeParams"*)**, void (%"struct.jxl::SqueezeParams"*)*** %554, align 8
  %556 = load void (%"struct.jxl::SqueezeParams"*)*, void (%"struct.jxl::SqueezeParams"*)** %555, align 8
  call void %556(%"struct.jxl::SqueezeParams"* %553) #10
  %557 = icmp eq %"struct.jxl::SqueezeParams"* %553, %544
  br i1 %557, label %558, label %551

558:                                              ; preds = %551
  %559 = bitcast %"class.std::__1::vector.21"* %542 to i8**
  %560 = load i8*, i8** %559, align 8
  br label %561

561:                                              ; preds = %558, %546
  %562 = phi i8* [ %560, %558 ], [ %547, %546 ]
  store %"struct.jxl::SqueezeParams"* %544, %"struct.jxl::SqueezeParams"** %548, align 8
  call void @_ZdlPv(i8* %562) #13
  br label %563

563:                                              ; preds = %534, %561
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %510) #10
  br label %564

564:                                              ; preds = %450, %506, %563, %454
  %565 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %2, i64 0, i32 44
  %566 = load float, float* %565, align 4
  %567 = fcmp ogt float %566, 0.000000e+00
  br i1 %567, label %568, label %645

568:                                              ; preds = %564
  %569 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %2, i64 0, i32 47
  %570 = load i8, i8* %569, align 8, !range !2
  %571 = icmp eq i8 %570, 0
  br i1 %571, label %572, label %645

572:                                              ; preds = %568
  %573 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %2, i64 0, i32 7
  %574 = load i32, i32* %573, align 4
  %575 = icmp slt i32 %574, 6
  br i1 %575, label %576, label %645

576:                                              ; preds = %572
  %577 = load i64, i64* %445, align 8
  %578 = icmp eq i64 %577, 0
  br i1 %578, label %645, label %579

579:                                              ; preds = %576
  %580 = bitcast i32* %19 to i8*
  %581 = bitcast i32* %20 to i8*
  %582 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %79, i64 %72, i32 8
  %583 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %86, i64 0, i32 0, i32 0, i32 0
  %584 = bitcast %"class.jxl::Transform"* %21 to i8*
  %585 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %21, i64 0, i32 2
  %586 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %21, i64 0, i32 4
  %587 = mul i64 %83, %81
  %588 = uitofp i64 %587 to double
  %589 = fmul double %588, 8.000000e-01
  %590 = fptosi double %589 to i32
  %591 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %21, i64 0, i32 5
  %592 = bitcast %"struct.jxl::weighted::Header"* %22 to i8*
  %593 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %22, i64 0, i32 0, i32 0
  %594 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %22, i64 0, i32 2
  %595 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %22, i64 0, i32 0
  %596 = bitcast i32* %594 to i8*
  %597 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %21, i64 0, i32 0, i32 0
  %598 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %21, i64 0, i32 7
  %599 = getelementptr inbounds %"class.std::__1::vector.21", %"class.std::__1::vector.21"* %598, i64 0, i32 0, i32 0
  %600 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %21, i64 0, i32 7, i32 0, i32 1
  %601 = bitcast %"class.std::__1::vector.21"* %598 to i8**
  br label %602

602:                                              ; preds = %579, %641
  %603 = phi i64 [ 0, %579 ], [ %642, %641 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %580) #10
  store i32 -1431655766, i32* %19, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %581) #10
  store i32 -1431655766, i32* %20, align 4
  %604 = load i64, i64* %582, align 8
  %605 = add i64 %604, %603
  %606 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %583, align 8
  %607 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %606, i64 %605
  call void @_ZNK3jxl7Channel14compute_minmaxEPiS1_(%"class.jxl::Channel"* %607, i32* nonnull %19, i32* nonnull %20) #10
  %608 = load i32, i32* %20, align 4
  %609 = load i32, i32* %19, align 4
  %610 = add i32 %608, 1
  %611 = sub i32 %610, %609
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %584) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %584, i8 -86, i64 72, i1 false)
  call void @_ZN3jxl9TransformC1ENS_11TransformIdE(%"class.jxl::Transform"* nonnull %21, i32 1) #10
  %612 = load i64, i64* %582, align 8
  %613 = add i64 %612, %603
  %614 = trunc i64 %613 to i32
  store i32 %614, i32* %585, align 4
  store i32 1, i32* %586, align 4
  %615 = load float, float* %565, align 4
  %616 = fpext float %615 to double
  %617 = fdiv double %616, 1.000000e+02
  %618 = sitofp i32 %611 to double
  %619 = fmul double %617, %618
  %620 = fptosi double %619 to i32
  %621 = icmp slt i32 %620, %590
  %622 = select i1 %621, i32 %620, i32 %590
  store i32 %622, i32* %591, align 8
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %592) #10
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8weighted6HeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %593, align 8
  call void @llvm.memset.p0i8.i64(i8* align 4 %596, i8 0, i64 44, i1 false) #10
  call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* nonnull %595) #10
  %623 = call zeroext i1 @_ZN3jxl5Image12do_transformERKNS_9TransformERKNS_8weighted6HeaderE(%"class.jxl::Image"* %86, %"class.jxl::Transform"* nonnull dereferenceable(72) %21, %"struct.jxl::weighted::Header"* nonnull dereferenceable(56) %22) #10
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %592) #10
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl9TransformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %597, align 8
  %624 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %599, align 8
  %625 = icmp eq %"struct.jxl::SqueezeParams"* %624, null
  br i1 %625, label %641, label %626

626:                                              ; preds = %602
  %627 = bitcast %"struct.jxl::SqueezeParams"* %624 to i8*
  %628 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %600, align 8
  %629 = icmp eq %"struct.jxl::SqueezeParams"* %628, %624
  br i1 %629, label %639, label %630

630:                                              ; preds = %626, %630
  %631 = phi %"struct.jxl::SqueezeParams"* [ %632, %630 ], [ %628, %626 ]
  %632 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %631, i64 -1
  %633 = bitcast %"struct.jxl::SqueezeParams"* %632 to void (%"struct.jxl::SqueezeParams"*)***
  %634 = load void (%"struct.jxl::SqueezeParams"*)**, void (%"struct.jxl::SqueezeParams"*)*** %633, align 8
  %635 = load void (%"struct.jxl::SqueezeParams"*)*, void (%"struct.jxl::SqueezeParams"*)** %634, align 8
  call void %635(%"struct.jxl::SqueezeParams"* %632) #10
  %636 = icmp eq %"struct.jxl::SqueezeParams"* %632, %624
  br i1 %636, label %637, label %630

637:                                              ; preds = %630
  %638 = load i8*, i8** %601, align 8
  br label %639

639:                                              ; preds = %637, %626
  %640 = phi i8* [ %638, %637 ], [ %627, %626 ]
  store %"struct.jxl::SqueezeParams"* %624, %"struct.jxl::SqueezeParams"** %600, align 8
  call void @_ZdlPv(i8* %640) #13
  br label %641

641:                                              ; preds = %602, %639
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %584) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %581) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %580) #10
  %642 = add nuw i64 %603, 1
  %643 = load i64, i64* %445, align 8
  %644 = icmp ult i64 %642, %643
  br i1 %644, label %602, label %645

645:                                              ; preds = %641, %576, %437, %568, %572, %564
  %646 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %2, i64 0, i32 45
  %647 = load i32, i32* %646, align 8
  %648 = icmp sgt i32 %647, 0
  br i1 %648, label %649, label %767

649:                                              ; preds = %645
  %650 = load i64, i64* %445, align 8
  %651 = icmp eq i64 %650, 0
  br i1 %651, label %767, label %652

652:                                              ; preds = %649
  %653 = bitcast %"class.jxl::Transform"* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %653) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %653, i8 -86, i64 72, i1 false)
  call void @_ZN3jxl9TransformC1ENS_11TransformIdE(%"class.jxl::Transform"* nonnull %23, i32 4) #10
  %654 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %2, i64 0, i32 39, i32 7
  %655 = load i32, i32* %654, align 8
  %656 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %23, i64 0, i32 9
  store i32 %655, i32* %656, align 4
  switch i32 %655, label %705 [
    i32 14, label %657
    i32 15, label %681
  ]

657:                                              ; preds = %652
  %658 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %23, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl9TransformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %658, align 8
  %659 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %23, i64 0, i32 7
  %660 = getelementptr inbounds %"class.std::__1::vector.21", %"class.std::__1::vector.21"* %659, i64 0, i32 0, i32 0
  %661 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %660, align 8
  %662 = icmp eq %"struct.jxl::SqueezeParams"* %661, null
  br i1 %662, label %680, label %663

663:                                              ; preds = %657
  %664 = bitcast %"struct.jxl::SqueezeParams"* %661 to i8*
  %665 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %23, i64 0, i32 7, i32 0, i32 1
  %666 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %665, align 8
  %667 = icmp eq %"struct.jxl::SqueezeParams"* %666, %661
  br i1 %667, label %678, label %668

668:                                              ; preds = %663, %668
  %669 = phi %"struct.jxl::SqueezeParams"* [ %670, %668 ], [ %666, %663 ]
  %670 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %669, i64 -1
  %671 = bitcast %"struct.jxl::SqueezeParams"* %670 to void (%"struct.jxl::SqueezeParams"*)***
  %672 = load void (%"struct.jxl::SqueezeParams"*)**, void (%"struct.jxl::SqueezeParams"*)*** %671, align 8
  %673 = load void (%"struct.jxl::SqueezeParams"*)*, void (%"struct.jxl::SqueezeParams"*)** %672, align 8
  call void %673(%"struct.jxl::SqueezeParams"* %670) #10
  %674 = icmp eq %"struct.jxl::SqueezeParams"* %670, %661
  br i1 %674, label %675, label %668

675:                                              ; preds = %668
  %676 = bitcast %"class.std::__1::vector.21"* %659 to i8**
  %677 = load i8*, i8** %676, align 8
  br label %678

678:                                              ; preds = %675, %663
  %679 = phi i8* [ %677, %675 ], [ %664, %663 ]
  store %"struct.jxl::SqueezeParams"* %661, %"struct.jxl::SqueezeParams"** %665, align 8
  call void @_ZdlPv(i8* %679) #13
  br label %680

680:                                              ; preds = %657, %678
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %653) #10
  br label %2145

681:                                              ; preds = %652
  %682 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %23, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl9TransformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %682, align 8
  %683 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %23, i64 0, i32 7
  %684 = getelementptr inbounds %"class.std::__1::vector.21", %"class.std::__1::vector.21"* %683, i64 0, i32 0, i32 0
  %685 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %684, align 8
  %686 = icmp eq %"struct.jxl::SqueezeParams"* %685, null
  br i1 %686, label %704, label %687

687:                                              ; preds = %681
  %688 = bitcast %"struct.jxl::SqueezeParams"* %685 to i8*
  %689 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %23, i64 0, i32 7, i32 0, i32 1
  %690 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %689, align 8
  %691 = icmp eq %"struct.jxl::SqueezeParams"* %690, %685
  br i1 %691, label %702, label %692

692:                                              ; preds = %687, %692
  %693 = phi %"struct.jxl::SqueezeParams"* [ %694, %692 ], [ %690, %687 ]
  %694 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %693, i64 -1
  %695 = bitcast %"struct.jxl::SqueezeParams"* %694 to void (%"struct.jxl::SqueezeParams"*)***
  %696 = load void (%"struct.jxl::SqueezeParams"*)**, void (%"struct.jxl::SqueezeParams"*)*** %695, align 8
  %697 = load void (%"struct.jxl::SqueezeParams"*)*, void (%"struct.jxl::SqueezeParams"*)** %696, align 8
  call void %697(%"struct.jxl::SqueezeParams"* %694) #10
  %698 = icmp eq %"struct.jxl::SqueezeParams"* %694, %685
  br i1 %698, label %699, label %692

699:                                              ; preds = %692
  %700 = bitcast %"class.std::__1::vector.21"* %683 to i8**
  %701 = load i8*, i8** %700, align 8
  br label %702

702:                                              ; preds = %699, %687
  %703 = phi i8* [ %701, %699 ], [ %688, %687 ]
  store %"struct.jxl::SqueezeParams"* %685, %"struct.jxl::SqueezeParams"** %689, align 8
  call void @_ZdlPv(i8* %703) #13
  br label %704

704:                                              ; preds = %681, %702
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %653) #10
  br label %2145

705:                                              ; preds = %652
  %706 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %79, i64 %72, i32 8
  %707 = load i64, i64* %706, align 8
  %708 = trunc i64 %707 to i32
  %709 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %23, i64 0, i32 2
  store i32 %708, i32* %709, align 4
  %710 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %2, i64 0, i32 42
  %711 = load i32, i32* %710, align 4
  %712 = icmp eq i32 %711, 0
  br i1 %712, label %713, label %719

713:                                              ; preds = %705
  %714 = load i64, i64* %445, align 8
  %715 = trunc i64 %714 to i32
  %716 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %23, i64 0, i32 4
  store i32 %715, i32* %716, align 4
  %717 = load i32, i32* %646, align 8
  %718 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %23, i64 0, i32 8
  store i32 %717, i32* %718, align 8
  br label %736

719:                                              ; preds = %705
  %720 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %23, i64 0, i32 4
  store i32 1, i32* %720, align 4
  %721 = load i32, i32* %646, align 8
  %722 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %23, i64 0, i32 8
  store i32 %721, i32* %722, align 8
  %723 = bitcast %"struct.jxl::weighted::Header"* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %723) #10
  %724 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %25, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8weighted6HeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %724, align 8
  %725 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %25, i64 0, i32 2
  %726 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %25, i64 0, i32 0
  %727 = bitcast i32* %725 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %727, i8 0, i64 44, i1 false) #10
  call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* nonnull %726) #10
  %728 = call zeroext i1 @_ZN3jxl5Image12do_transformERKNS_9TransformERKNS_8weighted6HeaderE(%"class.jxl::Image"* %86, %"class.jxl::Transform"* nonnull dereferenceable(72) %23, %"struct.jxl::weighted::Header"* nonnull dereferenceable(56) %25) #10
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %723) #10
  %729 = load i32, i32* %709, align 4
  %730 = add i32 %729, 1
  store i32 %730, i32* %709, align 4
  %731 = load i64, i64* %445, align 8
  %732 = trunc i64 %731 to i32
  %733 = add i32 %732, -1
  store i32 %733, i32* %720, align 4
  %734 = load i32, i32* %722, align 8
  %735 = add nsw i32 %734, 1
  store i32 %735, i32* %722, align 8
  br label %736

736:                                              ; preds = %713, %719
  %737 = phi %"struct.jxl::weighted::Header"* [ %24, %713 ], [ %26, %719 ]
  %738 = bitcast %"struct.jxl::weighted::Header"* %737 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %738) #10
  %739 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %737, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8weighted6HeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %739, align 8
  %740 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %737, i64 0, i32 2
  %741 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %737, i64 0, i32 0
  %742 = bitcast i32* %740 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %742, i8 0, i64 44, i1 false) #10
  call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* nonnull %741) #10
  %743 = call zeroext i1 @_ZN3jxl5Image12do_transformERKNS_9TransformERKNS_8weighted6HeaderE(%"class.jxl::Image"* %86, %"class.jxl::Transform"* nonnull dereferenceable(72) %23, %"struct.jxl::weighted::Header"* nonnull dereferenceable(56) %737) #10
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %738) #10
  %744 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %23, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl9TransformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %744, align 8
  %745 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %23, i64 0, i32 7
  %746 = getelementptr inbounds %"class.std::__1::vector.21", %"class.std::__1::vector.21"* %745, i64 0, i32 0, i32 0
  %747 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %746, align 8
  %748 = icmp eq %"struct.jxl::SqueezeParams"* %747, null
  br i1 %748, label %766, label %749

749:                                              ; preds = %736
  %750 = bitcast %"struct.jxl::SqueezeParams"* %747 to i8*
  %751 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %23, i64 0, i32 7, i32 0, i32 1
  %752 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %751, align 8
  %753 = icmp eq %"struct.jxl::SqueezeParams"* %752, %747
  br i1 %753, label %764, label %754

754:                                              ; preds = %749, %754
  %755 = phi %"struct.jxl::SqueezeParams"* [ %756, %754 ], [ %752, %749 ]
  %756 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %755, i64 -1
  %757 = bitcast %"struct.jxl::SqueezeParams"* %756 to void (%"struct.jxl::SqueezeParams"*)***
  %758 = load void (%"struct.jxl::SqueezeParams"*)**, void (%"struct.jxl::SqueezeParams"*)*** %757, align 8
  %759 = load void (%"struct.jxl::SqueezeParams"*)*, void (%"struct.jxl::SqueezeParams"*)** %758, align 8
  call void %759(%"struct.jxl::SqueezeParams"* %756) #10
  %760 = icmp eq %"struct.jxl::SqueezeParams"* %756, %747
  br i1 %760, label %761, label %754

761:                                              ; preds = %754
  %762 = bitcast %"class.std::__1::vector.21"* %745 to i8**
  %763 = load i8*, i8** %762, align 8
  br label %764

764:                                              ; preds = %761, %749
  %765 = phi i8* [ %763, %761 ], [ %750, %749 ]
  store %"struct.jxl::SqueezeParams"* %747, %"struct.jxl::SqueezeParams"** %751, align 8
  call void @_ZdlPv(i8* %765) #13
  br label %766

766:                                              ; preds = %736, %764
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %653) #10
  br label %767

767:                                              ; preds = %766, %649, %645
  %768 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %2, i64 0, i32 11
  %769 = load i32, i32* %768, align 8
  %770 = icmp eq i32 %769, 1
  %771 = and i1 %449, %770
  br i1 %771, label %772, label %1295

772:                                              ; preds = %767
  %773 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %2, i64 0, i32 42
  %774 = load i32, i32* %773, align 4
  %775 = icmp slt i32 %774, 0
  br i1 %775, label %776, label %1295

776:                                              ; preds = %772
  %777 = load i64, i64* %445, align 8
  %778 = icmp ugt i64 %777, 2
  %779 = load i32, i32* %646, align 8
  %780 = icmp eq i32 %779, 0
  %781 = and i1 %778, %780
  br i1 %781, label %782, label %1295

782:                                              ; preds = %776
  %783 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %2, i64 0, i32 40
  %784 = load i32, i32* %783, align 8
  %785 = icmp ne i32 %784, 0
  %786 = xor i1 %6, true
  %787 = or i1 %785, %786
  br i1 %787, label %1295, label %788

788:                                              ; preds = %782
  %789 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %2, i64 0, i32 7
  %790 = load i32, i32* %789, align 4
  %791 = icmp slt i32 %790, 6
  br i1 %791, label %792, label %1295

792:                                              ; preds = %788
  %793 = bitcast %"class.jxl::Transform"* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %793) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %793, i8 -86, i64 72, i1 false)
  call void @_ZN3jxl9TransformC1ENS_11TransformIdE(%"class.jxl::Transform"* nonnull %27, i32 0) #10
  %794 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %79, i64 %72, i32 8
  %795 = load i64, i64* %794, align 8
  %796 = trunc i64 %795 to i32
  %797 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %27, i64 0, i32 2
  store i32 %796, i32* %797, align 4
  %798 = load i32, i32* %789, align 4
  %799 = add i32 %798, -1
  %800 = icmp ult i32 %799, 5
  br i1 %800, label %801, label %805

801:                                              ; preds = %792
  %802 = sext i32 %799 to i64
  %803 = getelementptr inbounds [5 x i64], [5 x i64]* @switch.table._ZN3jxl19ModularFrameEncoder19PrepareStreamParamsERKNS_4RectERKNS_14CompressParamsEiiRKNS_15ModularStreamIdEb, i64 0, i64 %802
  %804 = load i64, i64* %803, align 8
  br label %805

805:                                              ; preds = %801, %792
  %806 = phi i64 [ 0, %792 ], [ %804, %801 ]
  %807 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %79, i64 %72, i32 1
  %808 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %79, i64 %72, i32 1, i32 0, i32 1
  %809 = bitcast %"class.jxl::Transform"** %808 to i64*
  %810 = bitcast %"class.std::__1::vector.19"* %807 to i64*
  %811 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %27, i64 0, i32 3
  %812 = bitcast %"struct.jxl::weighted::Header"* %28 to i8*
  %813 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %28, i64 0, i32 0, i32 0
  %814 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %28, i64 0, i32 2
  %815 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %28, i64 0, i32 0
  %816 = bitcast i32* %814 to i8*
  %817 = bitcast [18 x %"struct.jxl::Histogram"]* %8 to i8*
  %818 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 1
  %819 = bitcast %"struct.jxl::Histogram"* %818 to i8*
  %820 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 2
  %821 = bitcast %"struct.jxl::Histogram"* %820 to i8*
  %822 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 3
  %823 = bitcast %"struct.jxl::Histogram"* %822 to i8*
  %824 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 4
  %825 = bitcast %"struct.jxl::Histogram"* %824 to i8*
  %826 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 5
  %827 = bitcast %"struct.jxl::Histogram"* %826 to i8*
  %828 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 6
  %829 = bitcast %"struct.jxl::Histogram"* %828 to i8*
  %830 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 7
  %831 = bitcast %"struct.jxl::Histogram"* %830 to i8*
  %832 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 8
  %833 = bitcast %"struct.jxl::Histogram"* %832 to i8*
  %834 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 9
  %835 = bitcast %"struct.jxl::Histogram"* %834 to i8*
  %836 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 10
  %837 = bitcast %"struct.jxl::Histogram"* %836 to i8*
  %838 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 11
  %839 = bitcast %"struct.jxl::Histogram"* %838 to i8*
  %840 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 12
  %841 = bitcast %"struct.jxl::Histogram"* %840 to i8*
  %842 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 13
  %843 = bitcast %"struct.jxl::Histogram"* %842 to i8*
  %844 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 14
  %845 = bitcast %"struct.jxl::Histogram"* %844 to i8*
  %846 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 15
  %847 = bitcast %"struct.jxl::Histogram"* %846 to i8*
  %848 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 16
  %849 = bitcast %"struct.jxl::Histogram"* %848 to i8*
  %850 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 17
  %851 = bitcast %"struct.jxl::Histogram"* %850 to i8*
  %852 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %86, i64 0, i32 0, i32 0, i32 0
  %853 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 17, i32 0, i32 0, i32 0
  %854 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 17, i32 0, i32 0, i32 1
  %855 = bitcast i32** %854 to i64*
  %856 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 16, i32 0, i32 0, i32 0
  %857 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 16, i32 0, i32 0, i32 1
  %858 = bitcast i32** %857 to i64*
  %859 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 15, i32 0, i32 0, i32 0
  %860 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 15, i32 0, i32 0, i32 1
  %861 = bitcast i32** %860 to i64*
  %862 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 14, i32 0, i32 0, i32 0
  %863 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 14, i32 0, i32 0, i32 1
  %864 = bitcast i32** %863 to i64*
  %865 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 13, i32 0, i32 0, i32 0
  %866 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 13, i32 0, i32 0, i32 1
  %867 = bitcast i32** %866 to i64*
  %868 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 12, i32 0, i32 0, i32 0
  %869 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 12, i32 0, i32 0, i32 1
  %870 = bitcast i32** %869 to i64*
  %871 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 11, i32 0, i32 0, i32 0
  %872 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 11, i32 0, i32 0, i32 1
  %873 = bitcast i32** %872 to i64*
  %874 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 10, i32 0, i32 0, i32 0
  %875 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 10, i32 0, i32 0, i32 1
  %876 = bitcast i32** %875 to i64*
  %877 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 9, i32 0, i32 0, i32 0
  %878 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 9, i32 0, i32 0, i32 1
  %879 = bitcast i32** %878 to i64*
  %880 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 8, i32 0, i32 0, i32 0
  %881 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 8, i32 0, i32 0, i32 1
  %882 = bitcast i32** %881 to i64*
  %883 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 7, i32 0, i32 0, i32 0
  %884 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 7, i32 0, i32 0, i32 1
  %885 = bitcast i32** %884 to i64*
  %886 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 6, i32 0, i32 0, i32 0
  %887 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 6, i32 0, i32 0, i32 1
  %888 = bitcast i32** %887 to i64*
  %889 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 5, i32 0, i32 0, i32 0
  %890 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 5, i32 0, i32 0, i32 1
  %891 = bitcast i32** %890 to i64*
  %892 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 4, i32 0, i32 0, i32 0
  %893 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 4, i32 0, i32 0, i32 1
  %894 = bitcast i32** %893 to i64*
  %895 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 3, i32 0, i32 0, i32 0
  %896 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 3, i32 0, i32 0, i32 1
  %897 = bitcast i32** %896 to i64*
  %898 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 2, i32 0, i32 0, i32 0
  %899 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 2, i32 0, i32 0, i32 1
  %900 = bitcast i32** %899 to i64*
  %901 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 1, i32 0, i32 0, i32 0
  %902 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 1, i32 0, i32 0, i32 1
  %903 = bitcast i32** %902 to i64*
  %904 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 0, i32 0, i32 0, i32 0
  %905 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 0, i32 0, i32 0, i32 1
  %906 = bitcast i32** %905 to i64*
  %907 = bitcast %"struct.jxl::weighted::Header"* %29 to i8*
  %908 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %29, i64 0, i32 0, i32 0
  %909 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %29, i64 0, i32 2
  %910 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %29, i64 0, i32 0
  %911 = bitcast i32* %909 to i8*
  br label %912

912:                                              ; preds = %805, %1252
  %913 = phi i32* [ getelementptr inbounds ([19 x i32], [19 x i32]* @.ref.tmp.22, i64 0, i64 0), %805 ], [ %1261, %1252 ]
  %914 = phi i64 [ 0, %805 ], [ %1257, %1252 ]
  %915 = phi float [ 0x47EFFFFFE0000000, %805 ], [ %1256, %1252 ]
  %916 = phi i64 [ %806, %805 ], [ %1258, %1252 ]
  %917 = load i32, i32* %913, align 4
  %918 = icmp eq i64 %916, 0
  br i1 %918, label %1263, label %919

919:                                              ; preds = %912
  %920 = load i64, i64* %809, align 8
  %921 = load i64, i64* %810, align 8
  %922 = sub i64 %920, %921
  %923 = sdiv exact i64 %922, 72
  %924 = trunc i64 %923 to i32
  store i32 %917, i32* %811, align 8
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %812) #10
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8weighted6HeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %813, align 8
  call void @llvm.memset.p0i8.i64(i8* align 4 %816, i8 0, i64 44, i1 false) #10
  call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* nonnull %815) #10
  %925 = call zeroext i1 @_ZN3jxl5Image12do_transformERKNS_9TransformERKNS_8weighted6HeaderE(%"class.jxl::Image"* %86, %"class.jxl::Transform"* nonnull dereferenceable(72) %27, %"struct.jxl::weighted::Header"* nonnull dereferenceable(56) %28) #10
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %812) #10
  call void @llvm.lifetime.start.p0i8(i64 720, i8* nonnull %817) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %817, i8* align 16 bitcast ([18 x %"struct.jxl::Histogram"]* @__const._ZN3jxl12_GLOBAL__N_112EstimateCostERKNS_5ImageE.histo to i8*), i64 720, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %817, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 8 %819, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 16 %821, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 8 %823, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 16 %825, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 8 %827, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 16 %829, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 8 %831, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 16 %833, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 8 %835, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 16 %837, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 8 %839, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 16 %841, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 8 %843, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 16 %845, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 8 %847, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 16 %849, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 8 %851, i8 0, i64 32, i1 false) #10
  %926 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %852, align 8
  %927 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %438, align 8
  %928 = icmp eq %"class.jxl::Channel"* %926, %927
  br i1 %928, label %1148, label %933

929:                                              ; preds = %1129
  %930 = load i32*, i32** %853, align 8
  %931 = uitofp i64 %949 to float
  %932 = icmp eq i32* %930, null
  br i1 %932, label %1148, label %1145

933:                                              ; preds = %919, %1129
  %934 = phi i64 [ %949, %1129 ], [ 0, %919 ]
  %935 = phi float [ %1137, %1129 ], [ 0.000000e+00, %919 ]
  %936 = phi %"class.jxl::Channel"* [ %1130, %1129 ], [ %926, %919 ]
  %937 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %936, i64 0, i32 0, i32 0, i32 4
  %938 = load i64, i64* %937, align 8
  %939 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %936, i64 0, i32 2
  %940 = load i64, i64* %939, align 8
  %941 = icmp eq i64 %940, 0
  br i1 %941, label %948, label %942

942:                                              ; preds = %933
  %943 = lshr i64 %938, 2
  %944 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %936, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %945 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %936, i64 0, i32 1
  %946 = sub nsw i64 0, %943
  %947 = load i64, i64* %945, align 8
  br label %950

948:                                              ; preds = %972, %933
  %949 = phi i64 [ %934, %933 ], [ %975, %972 ]
  br label %1132

950:                                              ; preds = %978, %942
  %951 = phi i64 [ %940, %942 ], [ %973, %978 ]
  %952 = phi i64 [ %947, %942 ], [ %974, %978 ]
  %953 = phi i64 [ %938, %942 ], [ %979, %978 ]
  %954 = phi i64 [ %934, %942 ], [ %975, %978 ]
  %955 = phi i64 [ 0, %942 ], [ %976, %978 ]
  %956 = load i8*, i8** %944, align 8
  %957 = mul i64 %955, %953
  %958 = getelementptr inbounds i8, i8* %956, i64 %957
  %959 = ptrtoint i8* %958 to i64
  %960 = and i64 %959, 63
  %961 = icmp eq i64 %960, 0
  call void @llvm.assume(i1 %961) #10
  %962 = bitcast i8* %958 to i32*
  %963 = icmp eq i64 %952, 0
  br i1 %963, label %972, label %964

964:                                              ; preds = %950
  %965 = icmp eq i64 %955, 0
  %966 = getelementptr inbounds i32, i32* %962, i64 %946
  %967 = getelementptr inbounds i8, i8* %958, i64 -4
  %968 = bitcast i8* %967 to i32*
  %969 = getelementptr inbounds i32, i32* %968, i64 %946
  br label %980

970:                                              ; preds = %1116
  %971 = load i64, i64* %939, align 8
  br label %972

972:                                              ; preds = %970, %950
  %973 = phi i64 [ %951, %950 ], [ %971, %970 ]
  %974 = phi i64 [ 0, %950 ], [ %1127, %970 ]
  %975 = phi i64 [ %954, %950 ], [ %1125, %970 ]
  %976 = add nuw i64 %955, 1
  %977 = icmp ult i64 %976, %973
  br i1 %977, label %978, label %948

978:                                              ; preds = %972
  %979 = load i64, i64* %937, align 8
  br label %950

980:                                              ; preds = %1116, %964
  %981 = phi i64 [ %954, %964 ], [ %1125, %1116 ]
  %982 = phi i64 [ 0, %964 ], [ %1126, %1116 ]
  %983 = icmp eq i64 %982, 0
  br i1 %983, label %984, label %988

984:                                              ; preds = %980
  br i1 %965, label %1000, label %985

985:                                              ; preds = %984
  %986 = load i32, i32* %966, align 4
  %987 = sext i32 %986 to i64
  br label %1000

988:                                              ; preds = %980
  %989 = add i64 %982, -1
  %990 = getelementptr inbounds i32, i32* %962, i64 %989
  %991 = load i32, i32* %990, align 4
  %992 = sext i32 %991 to i64
  br i1 %965, label %1000, label %993

993:                                              ; preds = %988
  %994 = getelementptr inbounds i32, i32* %966, i64 %982
  %995 = load i32, i32* %994, align 4
  %996 = sext i32 %995 to i64
  %997 = getelementptr inbounds i32, i32* %969, i64 %982
  %998 = load i32, i32* %997, align 4
  %999 = sext i32 %998 to i64
  br label %1000

1000:                                             ; preds = %993, %988, %985, %984
  %1001 = phi i64 [ %996, %993 ], [ %987, %985 ], [ %992, %988 ], [ 0, %984 ]
  %1002 = phi i32 [ %991, %993 ], [ %986, %985 ], [ %991, %988 ], [ 0, %984 ]
  %1003 = phi i64 [ %992, %993 ], [ %987, %985 ], [ %992, %988 ], [ 0, %984 ]
  %1004 = phi i64 [ %999, %993 ], [ %987, %985 ], [ %992, %988 ], [ 0, %984 ]
  %1005 = icmp slt i64 %1003, %1001
  %1006 = select i1 %1005, i64 %1001, i64 %1003
  %1007 = icmp slt i64 %1006, %1004
  %1008 = select i1 %1007, i64 %1004, i64 %1006
  %1009 = icmp slt i64 %1001, %1003
  %1010 = select i1 %1009, i64 %1001, i64 %1003
  %1011 = icmp slt i64 %1004, %1010
  %1012 = select i1 %1011, i64 %1004, i64 %1010
  %1013 = sub nsw i64 %1008, %1012
  %1014 = icmp eq i64 %1013, 0
  %1015 = zext i1 %1014 to i64
  %1016 = icmp ult i64 %1013, 3
  %1017 = zext i1 %1016 to i64
  %1018 = add nuw nsw i64 %1015, %1017
  %1019 = icmp ult i64 %1013, 5
  %1020 = zext i1 %1019 to i64
  %1021 = add nuw nsw i64 %1018, %1020
  %1022 = icmp ult i64 %1013, 7
  %1023 = zext i1 %1022 to i64
  %1024 = add nuw nsw i64 %1021, %1023
  %1025 = icmp ult i64 %1013, 11
  %1026 = zext i1 %1025 to i64
  %1027 = add nuw nsw i64 %1024, %1026
  %1028 = icmp ult i64 %1013, 15
  %1029 = zext i1 %1028 to i64
  %1030 = add nuw nsw i64 %1027, %1029
  %1031 = icmp ult i64 %1013, 23
  %1032 = zext i1 %1031 to i64
  %1033 = add nuw nsw i64 %1030, %1032
  %1034 = icmp ult i64 %1013, 31
  %1035 = zext i1 %1034 to i64
  %1036 = add nuw nsw i64 %1033, %1035
  %1037 = icmp ult i64 %1013, 47
  %1038 = zext i1 %1037 to i64
  %1039 = add nuw nsw i64 %1036, %1038
  %1040 = icmp ult i64 %1013, 63
  %1041 = zext i1 %1040 to i64
  %1042 = add nuw nsw i64 %1039, %1041
  %1043 = icmp ult i64 %1013, 95
  %1044 = zext i1 %1043 to i64
  %1045 = add nuw nsw i64 %1042, %1044
  %1046 = icmp ult i64 %1013, 127
  %1047 = zext i1 %1046 to i64
  %1048 = add nuw nsw i64 %1045, %1047
  %1049 = icmp ult i64 %1013, 191
  %1050 = zext i1 %1049 to i64
  %1051 = add nuw nsw i64 %1048, %1050
  %1052 = icmp ult i64 %1013, 255
  %1053 = zext i1 %1052 to i64
  %1054 = add nuw nsw i64 %1051, %1053
  %1055 = icmp ult i64 %1013, 392
  %1056 = zext i1 %1055 to i64
  %1057 = add nuw nsw i64 %1054, %1056
  %1058 = icmp ult i64 %1013, 500
  %1059 = zext i1 %1058 to i64
  %1060 = add nuw nsw i64 %1057, %1059
  %1061 = getelementptr inbounds i32, i32* %962, i64 %982
  %1062 = load i32, i32* %1061, align 4
  %1063 = trunc i64 %1001 to i32
  %1064 = trunc i64 %1004 to i32
  %1065 = icmp slt i32 %1002, %1063
  %1066 = select i1 %1065, i32 %1002, i32 %1063
  %1067 = icmp sgt i32 %1002, %1063
  %1068 = select i1 %1067, i32 %1002, i32 %1063
  %1069 = add i32 %1002, %1063
  %1070 = sub i32 %1069, %1064
  %1071 = icmp sgt i32 %1066, %1064
  %1072 = select i1 %1071, i32 %1068, i32 %1070
  %1073 = icmp slt i32 %1068, %1064
  %1074 = select i1 %1073, i32 %1066, i32 %1072
  %1075 = sub nsw i32 %1062, %1074
  %1076 = shl i32 %1075, 1
  %1077 = ashr i32 %1075, 31
  %1078 = xor i32 %1076, %1077
  %1079 = icmp ult i32 %1078, 16
  br i1 %1079, label %1089, label %1080

1080:                                             ; preds = %1000
  %1081 = call i32 @llvm.ctlz.i32(i32 %1078, i1 true) #10, !range !29
  %1082 = xor i32 %1081, 31
  %1083 = shl i32 1, %1082
  %1084 = sub i32 %1078, %1083
  %1085 = shl nuw nsw i32 %1082, 2
  %1086 = add nsw i32 %1082, -2
  %1087 = lshr i32 %1084, %1086
  %1088 = add i32 %1087, %1085
  br label %1089

1089:                                             ; preds = %1080, %1000
  %1090 = phi i32 [ %1088, %1080 ], [ %1078, %1000 ]
  %1091 = phi i32 [ %1086, %1080 ], [ 0, %1000 ]
  %1092 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 %1060
  %1093 = zext i32 %1090 to i64
  %1094 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %1092, i64 0, i32 0
  %1095 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 %1060, i32 0, i32 0, i32 1
  %1096 = bitcast i32** %1095 to i64*
  %1097 = load i64, i64* %1096, align 8
  %1098 = bitcast %"struct.jxl::Histogram"* %1092 to i64*
  %1099 = load i64, i64* %1098, align 8
  %1100 = sub i64 %1097, %1099
  %1101 = ashr exact i64 %1100, 2
  %1102 = icmp ugt i64 %1101, %1093
  %1103 = inttoptr i64 %1099 to i32*
  br i1 %1102, label %1116, label %1104

1104:                                             ; preds = %1089
  %1105 = add nuw nsw i64 %1093, 8
  %1106 = and i64 %1105, 8589934584
  %1107 = icmp ugt i64 %1106, %1101
  br i1 %1107, label %1108, label %1112

1108:                                             ; preds = %1104
  %1109 = sub nsw i64 %1106, %1101
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.156"* %1094, i64 %1109) #10
  %1110 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %1092, i64 0, i32 0, i32 0, i32 0
  %1111 = load i32*, i32** %1110, align 8
  br label %1116

1112:                                             ; preds = %1104
  %1113 = icmp ult i64 %1106, %1101
  br i1 %1113, label %1114, label %1116

1114:                                             ; preds = %1112
  %1115 = getelementptr inbounds i32, i32* %1103, i64 %1106
  store i32* %1115, i32** %1095, align 8
  br label %1116

1116:                                             ; preds = %1114, %1112, %1108, %1089
  %1117 = phi i32* [ %1103, %1114 ], [ %1103, %1112 ], [ %1111, %1108 ], [ %1103, %1089 ]
  %1118 = getelementptr inbounds i32, i32* %1117, i64 %1093
  %1119 = load i32, i32* %1118, align 4
  %1120 = add nsw i32 %1119, 1
  store i32 %1120, i32* %1118, align 4
  %1121 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 %1060, i32 1
  %1122 = load i64, i64* %1121, align 8
  %1123 = add i64 %1122, 1
  store i64 %1123, i64* %1121, align 8
  %1124 = zext i32 %1091 to i64
  %1125 = add i64 %981, %1124
  %1126 = add nuw i64 %982, 1
  %1127 = load i64, i64* %945, align 8
  %1128 = icmp ult i64 %1126, %1127
  br i1 %1128, label %980, label %970

1129:                                             ; preds = %1132
  %1130 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %936, i64 1
  %1131 = icmp eq %"class.jxl::Channel"* %1130, %927
  br i1 %1131, label %929, label %933

1132:                                             ; preds = %1132, %948
  %1133 = phi i64 [ 0, %948 ], [ %1143, %1132 ]
  %1134 = phi float [ %935, %948 ], [ %1137, %1132 ]
  %1135 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 %1133
  %1136 = call float @_ZNK3jxl9Histogram14ShannonEntropyEv(%"struct.jxl::Histogram"* %1135) #10
  %1137 = fadd float %1134, %1136
  %1138 = bitcast %"struct.jxl::Histogram"* %1135 to i64*
  %1139 = load i64, i64* %1138, align 8
  %1140 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 %1133, i32 0, i32 0, i32 1
  %1141 = bitcast i32** %1140 to i64*
  store i64 %1139, i64* %1141, align 8
  %1142 = getelementptr inbounds [18 x %"struct.jxl::Histogram"], [18 x %"struct.jxl::Histogram"]* %8, i64 0, i64 %1133, i32 1
  store i64 0, i64* %1142, align 8
  %1143 = add nuw nsw i64 %1133, 1
  %1144 = icmp eq i64 %1143, 18
  br i1 %1144, label %1129, label %1132

1145:                                             ; preds = %929
  %1146 = bitcast i32* %930 to i8*
  %1147 = ptrtoint i32* %930 to i64
  store i64 %1147, i64* %855, align 8
  call void @_ZdlPv(i8* %1146) #13
  br label %1148

1148:                                             ; preds = %1145, %929, %919
  %1149 = phi float [ %931, %929 ], [ %931, %1145 ], [ 0.000000e+00, %919 ]
  %1150 = phi float [ %1137, %929 ], [ %1137, %1145 ], [ 0.000000e+00, %919 ]
  %1151 = load i32*, i32** %856, align 16
  %1152 = icmp eq i32* %1151, null
  br i1 %1152, label %1156, label %1153

1153:                                             ; preds = %1148
  %1154 = ptrtoint i32* %1151 to i64
  store i64 %1154, i64* %858, align 8
  %1155 = bitcast i32* %1151 to i8*
  call void @_ZdlPv(i8* %1155) #13
  br label %1156

1156:                                             ; preds = %1153, %1148
  %1157 = load i32*, i32** %859, align 8
  %1158 = icmp eq i32* %1157, null
  br i1 %1158, label %1162, label %1159

1159:                                             ; preds = %1156
  %1160 = ptrtoint i32* %1157 to i64
  store i64 %1160, i64* %861, align 8
  %1161 = bitcast i32* %1157 to i8*
  call void @_ZdlPv(i8* %1161) #13
  br label %1162

1162:                                             ; preds = %1159, %1156
  %1163 = load i32*, i32** %862, align 16
  %1164 = icmp eq i32* %1163, null
  br i1 %1164, label %1168, label %1165

1165:                                             ; preds = %1162
  %1166 = ptrtoint i32* %1163 to i64
  store i64 %1166, i64* %864, align 8
  %1167 = bitcast i32* %1163 to i8*
  call void @_ZdlPv(i8* %1167) #13
  br label %1168

1168:                                             ; preds = %1165, %1162
  %1169 = load i32*, i32** %865, align 8
  %1170 = icmp eq i32* %1169, null
  br i1 %1170, label %1174, label %1171

1171:                                             ; preds = %1168
  %1172 = ptrtoint i32* %1169 to i64
  store i64 %1172, i64* %867, align 8
  %1173 = bitcast i32* %1169 to i8*
  call void @_ZdlPv(i8* %1173) #13
  br label %1174

1174:                                             ; preds = %1171, %1168
  %1175 = load i32*, i32** %868, align 16
  %1176 = icmp eq i32* %1175, null
  br i1 %1176, label %1180, label %1177

1177:                                             ; preds = %1174
  %1178 = ptrtoint i32* %1175 to i64
  store i64 %1178, i64* %870, align 8
  %1179 = bitcast i32* %1175 to i8*
  call void @_ZdlPv(i8* %1179) #13
  br label %1180

1180:                                             ; preds = %1177, %1174
  %1181 = load i32*, i32** %871, align 8
  %1182 = icmp eq i32* %1181, null
  br i1 %1182, label %1186, label %1183

1183:                                             ; preds = %1180
  %1184 = ptrtoint i32* %1181 to i64
  store i64 %1184, i64* %873, align 8
  %1185 = bitcast i32* %1181 to i8*
  call void @_ZdlPv(i8* %1185) #13
  br label %1186

1186:                                             ; preds = %1183, %1180
  %1187 = load i32*, i32** %874, align 16
  %1188 = icmp eq i32* %1187, null
  br i1 %1188, label %1192, label %1189

1189:                                             ; preds = %1186
  %1190 = ptrtoint i32* %1187 to i64
  store i64 %1190, i64* %876, align 8
  %1191 = bitcast i32* %1187 to i8*
  call void @_ZdlPv(i8* %1191) #13
  br label %1192

1192:                                             ; preds = %1189, %1186
  %1193 = load i32*, i32** %877, align 8
  %1194 = icmp eq i32* %1193, null
  br i1 %1194, label %1198, label %1195

1195:                                             ; preds = %1192
  %1196 = ptrtoint i32* %1193 to i64
  store i64 %1196, i64* %879, align 8
  %1197 = bitcast i32* %1193 to i8*
  call void @_ZdlPv(i8* %1197) #13
  br label %1198

1198:                                             ; preds = %1195, %1192
  %1199 = load i32*, i32** %880, align 16
  %1200 = icmp eq i32* %1199, null
  br i1 %1200, label %1204, label %1201

1201:                                             ; preds = %1198
  %1202 = ptrtoint i32* %1199 to i64
  store i64 %1202, i64* %882, align 8
  %1203 = bitcast i32* %1199 to i8*
  call void @_ZdlPv(i8* %1203) #13
  br label %1204

1204:                                             ; preds = %1201, %1198
  %1205 = load i32*, i32** %883, align 8
  %1206 = icmp eq i32* %1205, null
  br i1 %1206, label %1210, label %1207

1207:                                             ; preds = %1204
  %1208 = ptrtoint i32* %1205 to i64
  store i64 %1208, i64* %885, align 8
  %1209 = bitcast i32* %1205 to i8*
  call void @_ZdlPv(i8* %1209) #13
  br label %1210

1210:                                             ; preds = %1207, %1204
  %1211 = load i32*, i32** %886, align 16
  %1212 = icmp eq i32* %1211, null
  br i1 %1212, label %1216, label %1213

1213:                                             ; preds = %1210
  %1214 = ptrtoint i32* %1211 to i64
  store i64 %1214, i64* %888, align 8
  %1215 = bitcast i32* %1211 to i8*
  call void @_ZdlPv(i8* %1215) #13
  br label %1216

1216:                                             ; preds = %1213, %1210
  %1217 = load i32*, i32** %889, align 8
  %1218 = icmp eq i32* %1217, null
  br i1 %1218, label %1222, label %1219

1219:                                             ; preds = %1216
  %1220 = ptrtoint i32* %1217 to i64
  store i64 %1220, i64* %891, align 8
  %1221 = bitcast i32* %1217 to i8*
  call void @_ZdlPv(i8* %1221) #13
  br label %1222

1222:                                             ; preds = %1219, %1216
  %1223 = load i32*, i32** %892, align 16
  %1224 = icmp eq i32* %1223, null
  br i1 %1224, label %1228, label %1225

1225:                                             ; preds = %1222
  %1226 = ptrtoint i32* %1223 to i64
  store i64 %1226, i64* %894, align 8
  %1227 = bitcast i32* %1223 to i8*
  call void @_ZdlPv(i8* %1227) #13
  br label %1228

1228:                                             ; preds = %1225, %1222
  %1229 = load i32*, i32** %895, align 8
  %1230 = icmp eq i32* %1229, null
  br i1 %1230, label %1234, label %1231

1231:                                             ; preds = %1228
  %1232 = ptrtoint i32* %1229 to i64
  store i64 %1232, i64* %897, align 8
  %1233 = bitcast i32* %1229 to i8*
  call void @_ZdlPv(i8* %1233) #13
  br label %1234

1234:                                             ; preds = %1231, %1228
  %1235 = load i32*, i32** %898, align 16
  %1236 = icmp eq i32* %1235, null
  br i1 %1236, label %1240, label %1237

1237:                                             ; preds = %1234
  %1238 = ptrtoint i32* %1235 to i64
  store i64 %1238, i64* %900, align 8
  %1239 = bitcast i32* %1235 to i8*
  call void @_ZdlPv(i8* %1239) #13
  br label %1240

1240:                                             ; preds = %1237, %1234
  %1241 = load i32*, i32** %901, align 8
  %1242 = icmp eq i32* %1241, null
  br i1 %1242, label %1246, label %1243

1243:                                             ; preds = %1240
  %1244 = ptrtoint i32* %1241 to i64
  store i64 %1244, i64* %903, align 8
  %1245 = bitcast i32* %1241 to i8*
  call void @_ZdlPv(i8* %1245) #13
  br label %1246

1246:                                             ; preds = %1243, %1240
  %1247 = load i32*, i32** %904, align 16
  %1248 = icmp eq i32* %1247, null
  br i1 %1248, label %1252, label %1249

1249:                                             ; preds = %1246
  %1250 = ptrtoint i32* %1247 to i64
  store i64 %1250, i64* %906, align 8
  %1251 = bitcast i32* %1247 to i8*
  call void @_ZdlPv(i8* %1251) #13
  br label %1252

1252:                                             ; preds = %1249, %1246
  %1253 = fadd float %1149, %1150
  call void @llvm.lifetime.end.p0i8(i64 720, i8* nonnull %817) #10
  %1254 = fcmp olt float %1253, %915
  %1255 = sext i32 %917 to i64
  %1256 = select i1 %1254, float %1253, float %915
  %1257 = select i1 %1254, i64 %1255, i64 %914
  %1258 = add nsw i64 %916, -1
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %907) #10
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8weighted6HeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %908, align 8
  call void @llvm.memset.p0i8.i64(i8* align 4 %911, i8 0, i64 44, i1 false) #10
  call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* nonnull %910) #10
  %1259 = icmp eq i32 %924, 0
  %1260 = select i1 %1259, i32 -1, i32 %924
  call void @_ZN3jxl5Image15undo_transformsERKNS_8weighted6HeaderEiPNS_10ThreadPoolE(%"class.jxl::Image"* %86, %"struct.jxl::weighted::Header"* nonnull dereferenceable(56) %29, i32 %1260, %"class.jxl::ThreadPool"* null) #10
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %907) #10
  %1261 = getelementptr inbounds i32, i32* %913, i64 1
  %1262 = icmp eq i32* %1261, getelementptr inbounds ([19 x i32], [19 x i32]* @.ref.tmp.22, i64 1, i64 0)
  br i1 %1262, label %1263, label %912

1263:                                             ; preds = %912, %1252
  %1264 = phi i64 [ %914, %912 ], [ %1257, %1252 ]
  %1265 = trunc i64 %1264 to i32
  store i32 %1265, i32* %811, align 8
  %1266 = bitcast %"struct.jxl::weighted::Header"* %30 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %1266) #10
  %1267 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %30, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8weighted6HeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1267, align 8
  %1268 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %30, i64 0, i32 2
  %1269 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %30, i64 0, i32 0
  %1270 = bitcast i32* %1268 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %1270, i8 0, i64 44, i1 false) #10
  call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* nonnull %1269) #10
  %1271 = call zeroext i1 @_ZN3jxl5Image12do_transformERKNS_9TransformERKNS_8weighted6HeaderE(%"class.jxl::Image"* %86, %"class.jxl::Transform"* nonnull dereferenceable(72) %27, %"struct.jxl::weighted::Header"* nonnull dereferenceable(56) %30) #10
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %1266) #10
  %1272 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %27, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl9TransformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1272, align 8
  %1273 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %27, i64 0, i32 7
  %1274 = getelementptr inbounds %"class.std::__1::vector.21", %"class.std::__1::vector.21"* %1273, i64 0, i32 0, i32 0
  %1275 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %1274, align 8
  %1276 = icmp eq %"struct.jxl::SqueezeParams"* %1275, null
  br i1 %1276, label %1294, label %1277

1277:                                             ; preds = %1263
  %1278 = bitcast %"struct.jxl::SqueezeParams"* %1275 to i8*
  %1279 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %27, i64 0, i32 7, i32 0, i32 1
  %1280 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %1279, align 8
  %1281 = icmp eq %"struct.jxl::SqueezeParams"* %1280, %1275
  br i1 %1281, label %1292, label %1282

1282:                                             ; preds = %1277, %1282
  %1283 = phi %"struct.jxl::SqueezeParams"* [ %1284, %1282 ], [ %1280, %1277 ]
  %1284 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %1283, i64 -1
  %1285 = bitcast %"struct.jxl::SqueezeParams"* %1284 to void (%"struct.jxl::SqueezeParams"*)***
  %1286 = load void (%"struct.jxl::SqueezeParams"*)**, void (%"struct.jxl::SqueezeParams"*)*** %1285, align 8
  %1287 = load void (%"struct.jxl::SqueezeParams"*)*, void (%"struct.jxl::SqueezeParams"*)** %1286, align 8
  call void %1287(%"struct.jxl::SqueezeParams"* %1284) #10
  %1288 = icmp eq %"struct.jxl::SqueezeParams"* %1284, %1275
  br i1 %1288, label %1289, label %1282

1289:                                             ; preds = %1282
  %1290 = bitcast %"class.std::__1::vector.21"* %1273 to i8**
  %1291 = load i8*, i8** %1290, align 8
  br label %1292

1292:                                             ; preds = %1289, %1277
  %1293 = phi i8* [ %1291, %1289 ], [ %1278, %1277 ]
  store %"struct.jxl::SqueezeParams"* %1275, %"struct.jxl::SqueezeParams"** %1279, align 8
  call void @_ZdlPv(i8* %1293) #13
  br label %1294

1294:                                             ; preds = %1263, %1292
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %793) #10
  br label %1295

1295:                                             ; preds = %782, %767, %772, %776, %788, %1294
  %1296 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %2, i64 0, i32 7
  %1297 = load i32, i32* %1296, align 4
  switch i32 %1297, label %2145 [
    i32 1, label %1298
    i32 2, label %1299
  ]

1298:                                             ; preds = %1295
  br label %1299

1299:                                             ; preds = %1295, %1298
  %1300 = phi i64 [ 5, %1298 ], [ 2, %1295 ]
  %1301 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 3, i32 0, i32 0
  %1302 = load %"struct.jxl::ModularOptions"*, %"struct.jxl::ModularOptions"** %1301, align 8
  %1303 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %1302, i64 %72, i32 7
  %1304 = load i32, i32* %1303, align 8
  switch i32 %1304, label %2145 [
    i32 6, label %1305
    i32 14, label %1305
    i32 15, label %1305
  ]

1305:                                             ; preds = %1299, %1299, %1299
  %1306 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %1302, i64 %72, i32 8
  store i32 0, i32* %1306, align 4
  %1307 = bitcast %"struct.jxl::weighted::Header"* %12 to i8*
  %1308 = bitcast [34 x %"struct.jxl::Histogram"]* %9 to i8*
  %1309 = getelementptr inbounds [34 x %"struct.jxl::Histogram"], [34 x %"struct.jxl::Histogram"]* %9, i64 0, i64 0
  %1310 = getelementptr inbounds [34 x %"struct.jxl::Histogram"], [34 x %"struct.jxl::Histogram"]* %9, i64 0, i64 34
  %1311 = getelementptr inbounds [34 x %"struct.jxl::Histogram"], [34 x %"struct.jxl::Histogram"]* %9, i64 0, i64 1
  %1312 = bitcast %"struct.jxl::Histogram"* %1311 to i8*
  %1313 = getelementptr inbounds [34 x %"struct.jxl::Histogram"], [34 x %"struct.jxl::Histogram"]* %9, i64 0, i64 2
  %1314 = bitcast %"struct.jxl::Histogram"* %1313 to i8*
  %1315 = getelementptr inbounds [34 x %"struct.jxl::Histogram"], [34 x %"struct.jxl::Histogram"]* %9, i64 0, i64 3
  %1316 = bitcast %"struct.jxl::Histogram"* %1315 to i8*
  %1317 = getelementptr inbounds [34 x %"struct.jxl::Histogram"], [34 x %"struct.jxl::Histogram"]* %9, i64 0, i64 4
  %1318 = bitcast %"struct.jxl::Histogram"* %1317 to i8*
  %1319 = getelementptr inbounds [34 x %"struct.jxl::Histogram"], [34 x %"struct.jxl::Histogram"]* %9, i64 0, i64 5
  %1320 = bitcast %"struct.jxl::Histogram"* %1319 to i8*
  %1321 = getelementptr inbounds [34 x %"struct.jxl::Histogram"], [34 x %"struct.jxl::Histogram"]* %9, i64 0, i64 6
  %1322 = bitcast %"struct.jxl::Histogram"* %1321 to i8*
  %1323 = getelementptr inbounds [34 x %"struct.jxl::Histogram"], [34 x %"struct.jxl::Histogram"]* %9, i64 0, i64 7
  %1324 = bitcast %"struct.jxl::Histogram"* %1323 to i8*
  %1325 = getelementptr inbounds [34 x %"struct.jxl::Histogram"], [34 x %"struct.jxl::Histogram"]* %9, i64 0, i64 8
  %1326 = bitcast %"struct.jxl::Histogram"* %1325 to i8*
  %1327 = getelementptr inbounds [34 x %"struct.jxl::Histogram"], [34 x %"struct.jxl::Histogram"]* %9, i64 0, i64 9
  %1328 = bitcast %"struct.jxl::Histogram"* %1327 to i8*
  %1329 = getelementptr inbounds [34 x %"struct.jxl::Histogram"], [34 x %"struct.jxl::Histogram"]* %9, i64 0, i64 10
  %1330 = bitcast %"struct.jxl::Histogram"* %1329 to i8*
  %1331 = getelementptr inbounds [34 x %"struct.jxl::Histogram"], [34 x %"struct.jxl::Histogram"]* %9, i64 0, i64 11
  %1332 = bitcast %"struct.jxl::Histogram"* %1331 to i8*
  %1333 = getelementptr inbounds [34 x %"struct.jxl::Histogram"], [34 x %"struct.jxl::Histogram"]* %9, i64 0, i64 12
  %1334 = bitcast %"struct.jxl::Histogram"* %1333 to i8*
  %1335 = getelementptr inbounds [34 x %"struct.jxl::Histogram"], [34 x %"struct.jxl::Histogram"]* %9, i64 0, i64 13
  %1336 = bitcast %"struct.jxl::Histogram"* %1335 to i8*
  %1337 = getelementptr inbounds [34 x %"struct.jxl::Histogram"], [34 x %"struct.jxl::Histogram"]* %9, i64 0, i64 14
  %1338 = bitcast %"struct.jxl::Histogram"* %1337 to i8*
  %1339 = getelementptr inbounds [34 x %"struct.jxl::Histogram"], [34 x %"struct.jxl::Histogram"]* %9, i64 0, i64 15
  %1340 = bitcast %"struct.jxl::Histogram"* %1339 to i8*
  %1341 = getelementptr inbounds [34 x %"struct.jxl::Histogram"], [34 x %"struct.jxl::Histogram"]* %9, i64 0, i64 16
  %1342 = bitcast %"struct.jxl::Histogram"* %1341 to i8*
  %1343 = getelementptr inbounds [34 x %"struct.jxl::Histogram"], [34 x %"struct.jxl::Histogram"]* %9, i64 0, i64 17
  %1344 = bitcast %"struct.jxl::Histogram"* %1343 to i8*
  %1345 = getelementptr inbounds [34 x %"struct.jxl::Histogram"], [34 x %"struct.jxl::Histogram"]* %9, i64 0, i64 18
  %1346 = bitcast %"struct.jxl::Histogram"* %1345 to i8*
  %1347 = getelementptr inbounds [34 x %"struct.jxl::Histogram"], [34 x %"struct.jxl::Histogram"]* %9, i64 0, i64 19
  %1348 = bitcast %"struct.jxl::Histogram"* %1347 to i8*
  %1349 = getelementptr inbounds [34 x %"struct.jxl::Histogram"], [34 x %"struct.jxl::Histogram"]* %9, i64 0, i64 20
  %1350 = bitcast %"struct.jxl::Histogram"* %1349 to i8*
  %1351 = getelementptr inbounds [34 x %"struct.jxl::Histogram"], [34 x %"struct.jxl::Histogram"]* %9, i64 0, i64 21
  %1352 = bitcast %"struct.jxl::Histogram"* %1351 to i8*
  %1353 = getelementptr inbounds [34 x %"struct.jxl::Histogram"], [34 x %"struct.jxl::Histogram"]* %9, i64 0, i64 22
  %1354 = bitcast %"struct.jxl::Histogram"* %1353 to i8*
  %1355 = getelementptr inbounds [34 x %"struct.jxl::Histogram"], [34 x %"struct.jxl::Histogram"]* %9, i64 0, i64 23
  %1356 = bitcast %"struct.jxl::Histogram"* %1355 to i8*
  %1357 = getelementptr inbounds [34 x %"struct.jxl::Histogram"], [34 x %"struct.jxl::Histogram"]* %9, i64 0, i64 24
  %1358 = bitcast %"struct.jxl::Histogram"* %1357 to i8*
  %1359 = getelementptr inbounds [34 x %"struct.jxl::Histogram"], [34 x %"struct.jxl::Histogram"]* %9, i64 0, i64 25
  %1360 = bitcast %"struct.jxl::Histogram"* %1359 to i8*
  %1361 = getelementptr inbounds [34 x %"struct.jxl::Histogram"], [34 x %"struct.jxl::Histogram"]* %9, i64 0, i64 26
  %1362 = bitcast %"struct.jxl::Histogram"* %1361 to i8*
  %1363 = getelementptr inbounds [34 x %"struct.jxl::Histogram"], [34 x %"struct.jxl::Histogram"]* %9, i64 0, i64 27
  %1364 = bitcast %"struct.jxl::Histogram"* %1363 to i8*
  %1365 = getelementptr inbounds [34 x %"struct.jxl::Histogram"], [34 x %"struct.jxl::Histogram"]* %9, i64 0, i64 28
  %1366 = bitcast %"struct.jxl::Histogram"* %1365 to i8*
  %1367 = getelementptr inbounds [34 x %"struct.jxl::Histogram"], [34 x %"struct.jxl::Histogram"]* %9, i64 0, i64 29
  %1368 = bitcast %"struct.jxl::Histogram"* %1367 to i8*
  %1369 = getelementptr inbounds [34 x %"struct.jxl::Histogram"], [34 x %"struct.jxl::Histogram"]* %9, i64 0, i64 30
  %1370 = bitcast %"struct.jxl::Histogram"* %1369 to i8*
  %1371 = getelementptr inbounds [34 x %"struct.jxl::Histogram"], [34 x %"struct.jxl::Histogram"]* %9, i64 0, i64 31
  %1372 = bitcast %"struct.jxl::Histogram"* %1371 to i8*
  %1373 = getelementptr inbounds [34 x %"struct.jxl::Histogram"], [34 x %"struct.jxl::Histogram"]* %9, i64 0, i64 32
  %1374 = bitcast %"struct.jxl::Histogram"* %1373 to i8*
  %1375 = getelementptr inbounds [34 x %"struct.jxl::Histogram"], [34 x %"struct.jxl::Histogram"]* %9, i64 0, i64 33
  %1376 = bitcast %"struct.jxl::Histogram"* %1375 to i8*
  %1377 = bitcast %"struct.jxl::weighted::Header"* %10 to i8*
  %1378 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %10, i64 0, i32 1
  %1379 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %10, i64 0, i32 0, i32 0
  %1380 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %10, i64 0, i32 2
  %1381 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %10, i64 0, i32 0
  %1382 = bitcast i32* %1380 to i8*
  %1383 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %10, i64 0, i32 9, i64 0
  %1384 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %10, i64 0, i32 9, i64 1
  %1385 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %10, i64 0, i32 9, i64 2
  %1386 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %10, i64 0, i32 9, i64 3
  %1387 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %10, i64 0, i32 3
  %1388 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %10, i64 0, i32 4
  %1389 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %10, i64 0, i32 5
  %1390 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %10, i64 0, i32 6
  %1391 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %10, i64 0, i32 7
  %1392 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %10, i64 0, i32 8
  %1393 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %86, i64 0, i32 0, i32 0, i32 0
  %1394 = bitcast %"struct.jxl::weighted::State"* %11 to i8*
  %1395 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %12, i64 0, i32 0, i32 0
  %1396 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %12, i64 0, i32 1
  %1397 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 2, i64 0, i32 0, i32 0
  %1398 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 4, i32 9, i64 0
  %1399 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 2, i64 1, i32 0, i32 0
  %1400 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 4, i32 9, i64 1
  %1401 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 2, i64 2, i32 0, i32 0
  %1402 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 4, i32 9, i64 2
  %1403 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 2, i64 3, i32 0, i32 0
  %1404 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 4, i32 9, i64 3
  %1405 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 3, i32 0, i32 0
  %1406 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 0, i64 0
  %1407 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 4, i32 2
  %1408 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 0, i64 1
  %1409 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 4, i32 3
  %1410 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 0, i64 2
  %1411 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 4, i32 4
  %1412 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 4, i32 5
  %1413 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 4, i32 6
  %1414 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 4, i32 7
  %1415 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 4, i32 8
  %1416 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 0, i64 3
  %1417 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 1
  %1418 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 3, i32 0, i32 1
  %1419 = bitcast i32** %1418 to i64*
  %1420 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 2, i64 3, i32 0, i32 1
  %1421 = bitcast i32** %1420 to i64*
  %1422 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 2, i64 2, i32 0, i32 1
  %1423 = bitcast i32** %1422 to i64*
  %1424 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 2, i64 1, i32 0, i32 1
  %1425 = bitcast i32** %1424 to i64*
  %1426 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 2, i64 0, i32 0, i32 1
  %1427 = bitcast i32** %1426 to i64*
  br label %1428

1428:                                             ; preds = %2141, %1305
  %1429 = phi i64 [ 0, %1305 ], [ %2143, %2141 ]
  %1430 = phi float [ 0x47EFFFFFE0000000, %1305 ], [ %2142, %2141 ]
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %1307)
  call void @llvm.lifetime.start.p0i8(i64 1360, i8* nonnull %1308) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %1308, i8* align 16 bitcast ([34 x %"struct.jxl::Histogram"]* @__const._ZN3jxl12_GLOBAL__N_114EstimateWPCostERKNS_5ImageEm.histo to i8*), i64 1360, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1308, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 8 %1312, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 16 %1314, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 8 %1316, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 16 %1318, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 8 %1320, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 16 %1322, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 8 %1324, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 16 %1326, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 8 %1328, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 16 %1330, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 8 %1332, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 16 %1334, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 8 %1336, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 16 %1338, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 8 %1340, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 16 %1342, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 8 %1344, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 16 %1346, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 8 %1348, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 16 %1350, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 8 %1352, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 16 %1354, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 8 %1356, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 16 %1358, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 8 %1360, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 16 %1362, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 8 %1364, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 16 %1366, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 8 %1368, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 16 %1370, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 8 %1372, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 16 %1374, i8 0, i64 32, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 8 %1376, i8 0, i64 32, i1 false) #10
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %1377) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1378, i8 -86, i64 48, i1 false) #10
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8weighted6HeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1379, align 8
  call void @llvm.memset.p0i8.i64(i8* align 4 %1382, i8 0, i64 44, i1 false) #10
  call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* nonnull %1381) #10
  %1431 = trunc i64 %1429 to i32
  %1432 = icmp ult i32 %1431, 4
  br i1 %1432, label %1433, label %1474

1433:                                             ; preds = %1428
  %1434 = shl i64 %1429, 32
  %1435 = ashr exact i64 %1434, 32
  %1436 = getelementptr inbounds [4 x i32], [4 x i32]* @switch.table._ZN3jxl19ModularFrameEncoder19PrepareStreamParamsERKNS_4RectERKNS_14CompressParamsEiiRKNS_15ModularStreamIdEb.68, i64 0, i64 %1435
  %1437 = load i32, i32* %1436, align 4
  %1438 = shl i64 %1429, 32
  %1439 = ashr exact i64 %1438, 32
  %1440 = getelementptr inbounds [4 x i32], [4 x i32]* @switch.table._ZN3jxl19ModularFrameEncoder19PrepareStreamParamsERKNS_4RectERKNS_14CompressParamsEiiRKNS_15ModularStreamIdEb.69, i64 0, i64 %1439
  %1441 = load i32, i32* %1440, align 4
  %1442 = shl i64 %1429, 32
  %1443 = ashr exact i64 %1442, 32
  %1444 = getelementptr inbounds [4 x i32], [4 x i32]* @switch.table._ZN3jxl19ModularFrameEncoder19PrepareStreamParamsERKNS_4RectERKNS_14CompressParamsEiiRKNS_15ModularStreamIdEb.70, i64 0, i64 %1443
  %1445 = load i32, i32* %1444, align 4
  %1446 = shl i64 %1429, 32
  %1447 = ashr exact i64 %1446, 32
  %1448 = getelementptr inbounds [4 x i32], [4 x i32]* @switch.table._ZN3jxl19ModularFrameEncoder19PrepareStreamParamsERKNS_4RectERKNS_14CompressParamsEiiRKNS_15ModularStreamIdEb.71, i64 0, i64 %1447
  %1449 = load i32, i32* %1448, align 4
  %1450 = shl i64 %1429, 32
  %1451 = ashr exact i64 %1450, 32
  %1452 = getelementptr inbounds [4 x i32], [4 x i32]* @switch.table._ZN3jxl19ModularFrameEncoder19PrepareStreamParamsERKNS_4RectERKNS_14CompressParamsEiiRKNS_15ModularStreamIdEb.72, i64 0, i64 %1451
  %1453 = load i32, i32* %1452, align 4
  %1454 = shl i64 %1429, 32
  %1455 = ashr exact i64 %1454, 32
  %1456 = getelementptr inbounds [4 x i32], [4 x i32]* @switch.table._ZN3jxl19ModularFrameEncoder19PrepareStreamParamsERKNS_4RectERKNS_14CompressParamsEiiRKNS_15ModularStreamIdEb.73, i64 0, i64 %1455
  %1457 = load i32, i32* %1456, align 4
  %1458 = shl i64 %1429, 32
  %1459 = ashr exact i64 %1458, 32
  %1460 = getelementptr inbounds [4 x i32], [4 x i32]* @switch.table._ZN3jxl19ModularFrameEncoder19PrepareStreamParamsERKNS_4RectERKNS_14CompressParamsEiiRKNS_15ModularStreamIdEb.74, i64 0, i64 %1459
  %1461 = load i32, i32* %1460, align 4
  %1462 = shl i64 %1429, 32
  %1463 = ashr exact i64 %1462, 32
  %1464 = getelementptr inbounds [4 x i32], [4 x i32]* @switch.table._ZN3jxl19ModularFrameEncoder19PrepareStreamParamsERKNS_4RectERKNS_14CompressParamsEiiRKNS_15ModularStreamIdEb.75, i64 0, i64 %1463
  %1465 = load i32, i32* %1464, align 4
  %1466 = shl i64 %1429, 32
  %1467 = ashr exact i64 %1466, 32
  %1468 = getelementptr inbounds [4 x i32], [4 x i32]* @switch.table._ZN3jxl19ModularFrameEncoder19PrepareStreamParamsERKNS_4RectERKNS_14CompressParamsEiiRKNS_15ModularStreamIdEb.76, i64 0, i64 %1467
  %1469 = load i32, i32* %1468, align 4
  %1470 = shl i64 %1429, 32
  %1471 = ashr exact i64 %1470, 32
  %1472 = getelementptr inbounds [4 x i32], [4 x i32]* @switch.table._ZN3jxl19ModularFrameEncoder19PrepareStreamParamsERKNS_4RectERKNS_14CompressParamsEiiRKNS_15ModularStreamIdEb.77, i64 0, i64 %1471
  %1473 = load i32, i32* %1472, align 4
  br label %1474

1474:                                             ; preds = %1428, %1433
  %1475 = phi i32 [ %1437, %1433 ], [ 12, %1428 ]
  %1476 = phi i32 [ %1441, %1433 ], [ 12, %1428 ]
  %1477 = phi i32 [ %1445, %1433 ], [ 12, %1428 ]
  %1478 = phi i32 [ %1449, %1433 ], [ 10, %1428 ]
  %1479 = phi i32 [ %1453, %1433 ], [ 10, %1428 ]
  %1480 = phi i32 [ %1457, %1433 ], [ 5, %1428 ]
  %1481 = phi i32 [ %1461, %1433 ], [ 5, %1428 ]
  %1482 = phi i32 [ %1465, %1433 ], [ 5, %1428 ]
  %1483 = phi i32 [ %1469, %1433 ], [ 12, %1428 ]
  %1484 = phi i32 [ %1473, %1433 ], [ 4, %1428 ]
  store i32 13, i32* %1383, align 8
  store i32 %1475, i32* %1384, align 4
  store i32 %1476, i32* %1385, align 8
  store i32 %1477, i32* %1386, align 4
  store i32 %1478, i32* %1380, align 4
  store i32 %1479, i32* %1387, align 8
  store i32 %1480, i32* %1388, align 4
  store i32 %1481, i32* %1389, align 8
  store i32 %1482, i32* %1390, align 4
  store i32 %1483, i32* %1391, align 8
  store i32 %1484, i32* %1392, align 4
  %1485 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %1393, align 8
  %1486 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %438, align 8
  %1487 = icmp eq %"class.jxl::Channel"* %1485, %1486
  br i1 %1487, label %1488, label %1491

1488:                                             ; preds = %2105, %1474
  %1489 = phi float [ 0.000000e+00, %1474 ], [ %2113, %2105 ]
  %1490 = phi i64 [ 0, %1474 ], [ %1509, %2105 ]
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %1377) #10
  br label %2121

1491:                                             ; preds = %1474, %2105
  %1492 = phi i64 [ %1509, %2105 ], [ 0, %1474 ]
  %1493 = phi float [ %2113, %2105 ], [ 0.000000e+00, %1474 ]
  %1494 = phi %"class.jxl::Channel"* [ %2106, %2105 ], [ %1485, %1474 ]
  %1495 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %1494, i64 0, i32 0, i32 0, i32 4
  %1496 = load i64, i64* %1495, align 8
  call void @llvm.lifetime.start.p0i8(i64 472, i8* nonnull %1394) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1394, i8 -86, i64 472, i1 false) #10
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8weighted6HeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1395, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1396, i8* align 8 %1378, i64 48, i1 false) #10
  %1497 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %1494, i64 0, i32 1
  %1498 = load i64, i64* %1497, align 8
  %1499 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %1494, i64 0, i32 2
  %1500 = load i64, i64* %1499, align 8
  call void @_ZN3jxl8weighted5StateC2ENS0_6HeaderEmm(%"struct.jxl::weighted::State"* nonnull %11, %"struct.jxl::weighted::Header"* nonnull %12, i64 %1498, i64 %1500) #10
  %1501 = load i64, i64* %1499, align 8
  %1502 = icmp eq i64 %1501, 0
  br i1 %1502, label %1508, label %1503

1503:                                             ; preds = %1491
  %1504 = lshr i64 %1496, 2
  %1505 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %1494, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %1506 = sub nsw i64 0, %1504
  %1507 = load i64, i64* %1497, align 8
  br label %1510

1508:                                             ; preds = %1539, %1491
  %1509 = phi i64 [ %1492, %1491 ], [ %1542, %1539 ]
  br label %2108

1510:                                             ; preds = %1539, %1503
  %1511 = phi i64 [ %1501, %1503 ], [ %1540, %1539 ]
  %1512 = phi i64 [ %1507, %1503 ], [ %1541, %1539 ]
  %1513 = phi i64 [ %1492, %1503 ], [ %1542, %1539 ]
  %1514 = phi i64 [ 0, %1503 ], [ %1543, %1539 ]
  %1515 = load i8*, i8** %1505, align 8
  %1516 = load i64, i64* %1495, align 8
  %1517 = mul i64 %1516, %1514
  %1518 = getelementptr inbounds i8, i8* %1515, i64 %1517
  %1519 = ptrtoint i8* %1518 to i64
  %1520 = and i64 %1519, 63
  %1521 = icmp eq i64 %1520, 0
  call void @llvm.assume(i1 %1521) #10
  %1522 = bitcast i8* %1518 to i32*
  %1523 = icmp eq i64 %1512, 0
  br i1 %1523, label %1539, label %1524

1524:                                             ; preds = %1510
  %1525 = icmp eq i64 %1514, 0
  %1526 = getelementptr inbounds i32, i32* %1522, i64 %1506
  %1527 = getelementptr inbounds i8, i8* %1518, i64 -4
  %1528 = bitcast i8* %1527 to i32*
  %1529 = getelementptr inbounds i8, i8* %1518, i64 4
  %1530 = bitcast i8* %1529 to i32*
  %1531 = icmp ugt i64 %1514, 1
  %1532 = and i64 %1514, 1
  %1533 = icmp ne i64 %1532, 0
  %1534 = getelementptr inbounds i32, i32* %1528, i64 %1506
  %1535 = getelementptr inbounds i32, i32* %1530, i64 %1506
  %1536 = getelementptr inbounds i32, i32* %1526, i64 %1506
  br label %1545

1537:                                             ; preds = %1989
  %1538 = load i64, i64* %1499, align 8
  br label %1539

1539:                                             ; preds = %1537, %1510
  %1540 = phi i64 [ %1538, %1537 ], [ %1511, %1510 ]
  %1541 = phi i64 [ %2073, %1537 ], [ 0, %1510 ]
  %1542 = phi i64 [ %1998, %1537 ], [ %1513, %1510 ]
  %1543 = add nuw i64 %1514, 1
  %1544 = icmp ult i64 %1543, %1540
  br i1 %1544, label %1510, label %1508

1545:                                             ; preds = %1989, %1524
  %1546 = phi i64 [ %1512, %1524 ], [ %2073, %1989 ]
  %1547 = phi i64 [ %1513, %1524 ], [ %1998, %1989 ]
  %1548 = phi i64 [ 0, %1524 ], [ %1593, %1989 ]
  %1549 = icmp ne i64 %1548, 0
  br i1 %1549, label %1554, label %1550

1550:                                             ; preds = %1545
  br i1 %1525, label %1578, label %1551

1551:                                             ; preds = %1550
  %1552 = load i32, i32* %1526, align 4
  %1553 = sext i32 %1552 to i64
  br label %1568

1554:                                             ; preds = %1545
  %1555 = add i64 %1548, -1
  %1556 = getelementptr inbounds i32, i32* %1522, i64 %1555
  %1557 = load i32, i32* %1556, align 4
  %1558 = sext i32 %1557 to i64
  br i1 %1525, label %1559, label %1561

1559:                                             ; preds = %1554
  %1560 = add nuw i64 %1548, 1
  br label %1588

1561:                                             ; preds = %1554
  %1562 = getelementptr inbounds i32, i32* %1526, i64 %1548
  %1563 = load i32, i32* %1562, align 4
  %1564 = sext i32 %1563 to i64
  %1565 = getelementptr inbounds i32, i32* %1534, i64 %1548
  %1566 = load i32, i32* %1565, align 4
  %1567 = sext i32 %1566 to i64
  br label %1568

1568:                                             ; preds = %1561, %1551
  %1569 = phi i64 [ %1564, %1561 ], [ %1553, %1551 ]
  %1570 = phi i64 [ %1558, %1561 ], [ %1553, %1551 ]
  %1571 = phi i64 [ %1567, %1561 ], [ %1553, %1551 ]
  %1572 = add nuw i64 %1548, 1
  %1573 = icmp ult i64 %1572, %1546
  br i1 %1573, label %1574, label %1578

1574:                                             ; preds = %1568
  %1575 = getelementptr inbounds i32, i32* %1535, i64 %1548
  %1576 = load i32, i32* %1575, align 4
  %1577 = sext i32 %1576 to i64
  br label %1578

1578:                                             ; preds = %1574, %1568, %1550
  %1579 = phi i64 [ %1572, %1574 ], [ %1572, %1568 ], [ 1, %1550 ]
  %1580 = phi i64 [ %1571, %1574 ], [ %1571, %1568 ], [ 0, %1550 ]
  %1581 = phi i64 [ %1570, %1574 ], [ %1570, %1568 ], [ 0, %1550 ]
  %1582 = phi i64 [ %1569, %1574 ], [ %1569, %1568 ], [ 0, %1550 ]
  %1583 = phi i64 [ %1577, %1574 ], [ %1569, %1568 ], [ 0, %1550 ]
  br i1 %1531, label %1584, label %1588

1584:                                             ; preds = %1578
  %1585 = getelementptr inbounds i32, i32* %1536, i64 %1548
  %1586 = load i32, i32* %1585, align 4
  %1587 = sext i32 %1586 to i64
  br label %1588

1588:                                             ; preds = %1584, %1578, %1559
  %1589 = phi i64 [ %1583, %1584 ], [ %1583, %1578 ], [ %1558, %1559 ]
  %1590 = phi i64 [ %1582, %1584 ], [ %1582, %1578 ], [ %1558, %1559 ]
  %1591 = phi i64 [ %1581, %1584 ], [ %1581, %1578 ], [ %1558, %1559 ]
  %1592 = phi i64 [ %1580, %1584 ], [ %1580, %1578 ], [ %1558, %1559 ]
  %1593 = phi i64 [ %1579, %1584 ], [ %1579, %1578 ], [ %1560, %1559 ]
  %1594 = phi i64 [ %1587, %1584 ], [ %1582, %1578 ], [ %1558, %1559 ]
  %1595 = add i64 %1546, 2
  %1596 = select i1 %1533, i64 %1595, i64 0
  %1597 = add i64 %1596, %1548
  %1598 = add i64 %1546, -1
  %1599 = icmp ugt i64 %1598, %1548
  %1600 = zext i1 %1599 to i64
  %1601 = add i64 %1597, %1600
  %1602 = zext i1 %1549 to i64
  %1603 = sub i64 %1597, %1602
  %1604 = load i32*, i32** %1397, align 8
  %1605 = getelementptr inbounds i32, i32* %1604, i64 %1597
  %1606 = load i32, i32* %1605, align 4
  %1607 = getelementptr inbounds i32, i32* %1604, i64 %1601
  %1608 = load i32, i32* %1607, align 4
  %1609 = add i32 %1608, %1606
  %1610 = getelementptr inbounds i32, i32* %1604, i64 %1603
  %1611 = load i32, i32* %1610, align 4
  %1612 = add i32 %1609, %1611
  %1613 = zext i32 %1612 to i64
  %1614 = load i32, i32* %1398, align 8
  %1615 = add nuw nsw i64 %1613, 1
  %1616 = call i64 @llvm.ctlz.i64(i64 %1615, i1 true) #10, !range !28
  %1617 = trunc i64 %1616 to i32
  %1618 = sub nsw i32 58, %1617
  %1619 = icmp sgt i32 %1618, 0
  %1620 = select i1 %1619, i32 %1618, i32 0
  %1621 = zext i32 %1620 to i64
  %1622 = lshr i64 %1613, %1621
  %1623 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 5, i64 %1622
  %1624 = load i32, i32* %1623, align 4
  %1625 = mul i32 %1624, %1614
  %1626 = lshr i32 %1625, %1620
  %1627 = add i32 %1626, 4
  %1628 = load i32*, i32** %1399, align 8
  %1629 = getelementptr inbounds i32, i32* %1628, i64 %1597
  %1630 = load i32, i32* %1629, align 4
  %1631 = getelementptr inbounds i32, i32* %1628, i64 %1601
  %1632 = load i32, i32* %1631, align 4
  %1633 = add i32 %1632, %1630
  %1634 = getelementptr inbounds i32, i32* %1628, i64 %1603
  %1635 = load i32, i32* %1634, align 4
  %1636 = add i32 %1633, %1635
  %1637 = zext i32 %1636 to i64
  %1638 = load i32, i32* %1400, align 4
  %1639 = add nuw nsw i64 %1637, 1
  %1640 = call i64 @llvm.ctlz.i64(i64 %1639, i1 true) #10, !range !28
  %1641 = trunc i64 %1640 to i32
  %1642 = sub nsw i32 58, %1641
  %1643 = icmp sgt i32 %1642, 0
  %1644 = select i1 %1643, i32 %1642, i32 0
  %1645 = zext i32 %1644 to i64
  %1646 = lshr i64 %1637, %1645
  %1647 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 5, i64 %1646
  %1648 = load i32, i32* %1647, align 4
  %1649 = mul i32 %1648, %1638
  %1650 = lshr i32 %1649, %1644
  %1651 = add i32 %1650, 4
  %1652 = load i32*, i32** %1401, align 8
  %1653 = getelementptr inbounds i32, i32* %1652, i64 %1597
  %1654 = load i32, i32* %1653, align 4
  %1655 = getelementptr inbounds i32, i32* %1652, i64 %1601
  %1656 = load i32, i32* %1655, align 4
  %1657 = add i32 %1656, %1654
  %1658 = getelementptr inbounds i32, i32* %1652, i64 %1603
  %1659 = load i32, i32* %1658, align 4
  %1660 = add i32 %1657, %1659
  %1661 = zext i32 %1660 to i64
  %1662 = load i32, i32* %1402, align 8
  %1663 = add nuw nsw i64 %1661, 1
  %1664 = call i64 @llvm.ctlz.i64(i64 %1663, i1 true) #10, !range !28
  %1665 = trunc i64 %1664 to i32
  %1666 = sub nsw i32 58, %1665
  %1667 = icmp sgt i32 %1666, 0
  %1668 = select i1 %1667, i32 %1666, i32 0
  %1669 = zext i32 %1668 to i64
  %1670 = lshr i64 %1661, %1669
  %1671 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 5, i64 %1670
  %1672 = load i32, i32* %1671, align 4
  %1673 = mul i32 %1672, %1662
  %1674 = lshr i32 %1673, %1668
  %1675 = add i32 %1674, 4
  %1676 = load i32*, i32** %1403, align 8
  %1677 = getelementptr inbounds i32, i32* %1676, i64 %1597
  %1678 = load i32, i32* %1677, align 4
  %1679 = getelementptr inbounds i32, i32* %1676, i64 %1601
  %1680 = load i32, i32* %1679, align 4
  %1681 = add i32 %1680, %1678
  %1682 = getelementptr inbounds i32, i32* %1676, i64 %1603
  %1683 = load i32, i32* %1682, align 4
  %1684 = add i32 %1681, %1683
  %1685 = zext i32 %1684 to i64
  %1686 = load i32, i32* %1404, align 4
  %1687 = add nuw nsw i64 %1685, 1
  %1688 = call i64 @llvm.ctlz.i64(i64 %1687, i1 true) #10, !range !28
  %1689 = trunc i64 %1688 to i32
  %1690 = sub nsw i32 58, %1689
  %1691 = icmp sgt i32 %1690, 0
  %1692 = select i1 %1691, i32 %1690, i32 0
  %1693 = zext i32 %1692 to i64
  %1694 = lshr i64 %1685, %1693
  %1695 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 5, i64 %1694
  %1696 = load i32, i32* %1695, align 4
  %1697 = mul i32 %1696, %1686
  %1698 = lshr i32 %1697, %1692
  %1699 = add i32 %1698, 4
  %1700 = shl nsw i64 %1590, 3
  %1701 = shl nsw i64 %1591, 3
  %1702 = shl nsw i64 %1589, 3
  %1703 = shl nsw i64 %1592, 3
  %1704 = shl nsw i64 %1594, 3
  %1705 = icmp eq i64 %1548, 0
  br i1 %1705, label %1706, label %1708

1706:                                             ; preds = %1588
  %1707 = load i32*, i32** %1405, align 8
  br label %1716

1708:                                             ; preds = %1588
  %1709 = select i1 %1533, i64 0, i64 %1595
  %1710 = add i64 %1548, -1
  %1711 = add i64 %1710, %1709
  %1712 = load i32*, i32** %1405, align 8
  %1713 = getelementptr inbounds i32, i32* %1712, i64 %1711
  %1714 = load i32, i32* %1713, align 4
  %1715 = sext i32 %1714 to i64
  br label %1716

1716:                                             ; preds = %1708, %1706
  %1717 = phi i32* [ %1712, %1708 ], [ %1707, %1706 ]
  %1718 = phi i64 [ %1715, %1708 ], [ 0, %1706 ]
  %1719 = getelementptr inbounds i32, i32* %1717, i64 %1597
  %1720 = load i32, i32* %1719, align 4
  %1721 = sext i32 %1720 to i64
  %1722 = getelementptr inbounds i32, i32* %1717, i64 %1603
  %1723 = load i32, i32* %1722, align 4
  %1724 = sext i32 %1723 to i64
  %1725 = add nsw i64 %1718, %1721
  %1726 = getelementptr inbounds i32, i32* %1717, i64 %1601
  %1727 = load i32, i32* %1726, align 4
  %1728 = sext i32 %1727 to i64
  %1729 = sub nsw i64 0, %1721
  %1730 = icmp slt i64 %1721, 0
  %1731 = select i1 %1730, i64 %1729, i64 %1721
  %1732 = sub nsw i64 0, %1718
  %1733 = icmp slt i64 %1718, 0
  %1734 = select i1 %1733, i64 %1732, i64 %1718
  %1735 = icmp sgt i64 %1731, %1734
  %1736 = select i1 %1735, i64 %1721, i64 %1718
  %1737 = sub nsw i64 0, %1724
  %1738 = icmp slt i64 %1724, 0
  %1739 = select i1 %1738, i64 %1737, i64 %1724
  %1740 = sub nsw i64 0, %1736
  %1741 = icmp slt i64 %1736, 0
  %1742 = select i1 %1741, i64 %1740, i64 %1736
  %1743 = icmp sgt i64 %1739, %1742
  %1744 = select i1 %1743, i64 %1724, i64 %1736
  %1745 = sub nsw i64 0, %1728
  %1746 = icmp slt i64 %1728, 0
  %1747 = select i1 %1746, i64 %1745, i64 %1728
  %1748 = sub nsw i64 0, %1744
  %1749 = icmp slt i64 %1744, 0
  %1750 = select i1 %1749, i64 %1748, i64 %1744
  %1751 = icmp sgt i64 %1747, %1750
  %1752 = select i1 %1751, i64 %1728, i64 %1744
  %1753 = trunc i64 %1752 to i32
  %1754 = sub nsw i64 %1701, %1700
  %1755 = add nsw i64 %1754, %1702
  store i64 %1755, i64* %1406, align 8
  %1756 = add nsw i64 %1725, %1728
  %1757 = load i32, i32* %1407, align 4
  %1758 = sext i32 %1757 to i64
  %1759 = mul nsw i64 %1756, %1758
  %1760 = ashr i64 %1759, 5
  %1761 = sub nsw i64 %1700, %1760
  store i64 %1761, i64* %1408, align 8
  %1762 = add nsw i64 %1725, %1724
  %1763 = load i32, i32* %1409, align 8
  %1764 = sext i32 %1763 to i64
  %1765 = mul nsw i64 %1762, %1764
  %1766 = ashr i64 %1765, 5
  %1767 = sub nsw i64 %1701, %1766
  store i64 %1767, i64* %1410, align 8
  %1768 = load i32, i32* %1411, align 4
  %1769 = sext i32 %1768 to i64
  %1770 = mul nsw i64 %1769, %1724
  %1771 = load i32, i32* %1412, align 8
  %1772 = sext i32 %1771 to i64
  %1773 = mul nsw i64 %1772, %1721
  %1774 = add nsw i64 %1773, %1770
  %1775 = load i32, i32* %1413, align 4
  %1776 = sext i32 %1775 to i64
  %1777 = mul nsw i64 %1776, %1728
  %1778 = add nsw i64 %1774, %1777
  %1779 = sub nsw i64 %1704, %1700
  %1780 = load i32, i32* %1414, align 8
  %1781 = sext i32 %1780 to i64
  %1782 = mul nsw i64 %1779, %1781
  %1783 = add nsw i64 %1778, %1782
  %1784 = sub nsw i64 %1703, %1701
  %1785 = load i32, i32* %1415, align 4
  %1786 = sext i32 %1785 to i64
  %1787 = mul nsw i64 %1784, %1786
  %1788 = add nsw i64 %1783, %1787
  %1789 = ashr i64 %1788, 5
  %1790 = sub nsw i64 %1700, %1789
  store i64 %1790, i64* %1416, align 8
  %1791 = add i32 %1651, %1627
  %1792 = add i32 %1791, %1675
  %1793 = add i32 %1792, %1699
  %1794 = call i32 @llvm.ctlz.i32(i32 %1793, i1 true) #10, !range !29
  %1795 = sub nsw i32 27, %1794
  %1796 = lshr i32 %1627, %1795
  %1797 = lshr i32 %1651, %1795
  %1798 = add i32 %1797, %1796
  %1799 = lshr i32 %1675, %1795
  %1800 = add i32 %1798, %1799
  %1801 = lshr i32 %1699, %1795
  %1802 = add i32 %1800, %1801
  %1803 = lshr i32 %1802, 1
  %1804 = add nsw i32 %1803, -1
  %1805 = zext i32 %1804 to i64
  %1806 = zext i32 %1796 to i64
  %1807 = mul nsw i64 %1755, %1806
  %1808 = zext i32 %1797 to i64
  %1809 = mul nsw i64 %1761, %1808
  %1810 = zext i32 %1799 to i64
  %1811 = mul nsw i64 %1767, %1810
  %1812 = zext i32 %1801 to i64
  %1813 = mul nsw i64 %1790, %1812
  %1814 = add i64 %1807, %1805
  %1815 = add i64 %1814, %1809
  %1816 = add i64 %1815, %1811
  %1817 = add i64 %1816, %1813
  %1818 = add i32 %1802, -1
  %1819 = zext i32 %1818 to i64
  %1820 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 5, i64 %1819
  %1821 = load i32, i32* %1820, align 4, !noalias !50
  %1822 = zext i32 %1821 to i64
  %1823 = mul nsw i64 %1817, %1822
  %1824 = ashr i64 %1823, 24
  %1825 = xor i64 %1718, %1721
  %1826 = xor i32 %1723, %1720
  %1827 = sext i32 %1826 to i64
  %1828 = or i64 %1825, %1827
  %1829 = icmp sgt i64 %1828, 0
  br i1 %1829, label %1843, label %1830

1830:                                             ; preds = %1716
  %1831 = icmp slt i64 %1702, %1700
  %1832 = select i1 %1831, i64 %1700, i64 %1702
  %1833 = icmp slt i64 %1701, %1832
  %1834 = select i1 %1833, i64 %1832, i64 %1701
  %1835 = icmp slt i64 %1700, %1702
  %1836 = select i1 %1835, i64 %1700, i64 %1702
  %1837 = icmp slt i64 %1836, %1701
  %1838 = select i1 %1837, i64 %1836, i64 %1701
  %1839 = icmp slt i64 %1824, %1834
  %1840 = select i1 %1839, i64 %1824, i64 %1834
  %1841 = icmp slt i64 %1838, %1840
  %1842 = select i1 %1841, i64 %1840, i64 %1838
  br label %1843

1843:                                             ; preds = %1830, %1716
  %1844 = phi i64 [ %1842, %1830 ], [ %1824, %1716 ]
  store i64 %1844, i64* %1417, align 8
  %1845 = add nsw i64 %1844, 3
  %1846 = lshr i64 %1845, 3
  %1847 = icmp slt i32 %1753, -499
  %1848 = zext i1 %1847 to i64
  %1849 = icmp slt i32 %1753, -391
  %1850 = zext i1 %1849 to i64
  %1851 = icmp slt i32 %1753, -254
  %1852 = zext i1 %1851 to i64
  %1853 = icmp slt i32 %1753, -190
  %1854 = zext i1 %1853 to i64
  %1855 = icmp slt i32 %1753, -126
  %1856 = zext i1 %1855 to i64
  %1857 = icmp slt i32 %1753, -94
  %1858 = zext i1 %1857 to i64
  %1859 = icmp slt i32 %1753, -62
  %1860 = zext i1 %1859 to i64
  %1861 = icmp slt i32 %1753, -46
  %1862 = zext i1 %1861 to i64
  %1863 = icmp slt i32 %1753, -30
  %1864 = zext i1 %1863 to i64
  %1865 = icmp slt i32 %1753, -22
  %1866 = zext i1 %1865 to i64
  %1867 = icmp slt i32 %1753, -14
  %1868 = zext i1 %1867 to i64
  %1869 = icmp slt i32 %1753, -10
  %1870 = zext i1 %1869 to i64
  %1871 = icmp slt i32 %1753, -6
  %1872 = zext i1 %1871 to i64
  %1873 = icmp slt i32 %1753, -3
  %1874 = zext i1 %1873 to i64
  %1875 = icmp slt i32 %1753, -2
  %1876 = zext i1 %1875 to i64
  %1877 = lshr i64 %1752, 31
  %1878 = and i64 %1877, 1
  %1879 = icmp slt i32 %1753, 1
  %1880 = zext i1 %1879 to i64
  %1881 = icmp slt i32 %1753, 2
  %1882 = zext i1 %1881 to i64
  %1883 = icmp slt i32 %1753, 4
  %1884 = zext i1 %1883 to i64
  %1885 = icmp slt i32 %1753, 6
  %1886 = zext i1 %1885 to i64
  %1887 = icmp slt i32 %1753, 8
  %1888 = zext i1 %1887 to i64
  %1889 = icmp slt i32 %1753, 12
  %1890 = zext i1 %1889 to i64
  %1891 = icmp slt i32 %1753, 16
  %1892 = zext i1 %1891 to i64
  %1893 = icmp slt i32 %1753, 24
  %1894 = zext i1 %1893 to i64
  %1895 = icmp slt i32 %1753, 32
  %1896 = zext i1 %1895 to i64
  %1897 = icmp slt i32 %1753, 48
  %1898 = zext i1 %1897 to i64
  %1899 = icmp slt i32 %1753, 64
  %1900 = zext i1 %1899 to i64
  %1901 = icmp slt i32 %1753, 96
  %1902 = zext i1 %1901 to i64
  %1903 = icmp slt i32 %1753, 128
  %1904 = zext i1 %1903 to i64
  %1905 = icmp slt i32 %1753, 192
  %1906 = zext i1 %1905 to i64
  %1907 = icmp slt i32 %1753, 256
  %1908 = zext i1 %1907 to i64
  %1909 = icmp slt i32 %1753, 393
  %1910 = zext i1 %1909 to i64
  %1911 = icmp slt i32 %1753, 501
  %1912 = zext i1 %1911 to i64
  %1913 = add nuw nsw i64 %1878, %1850
  %1914 = add nuw nsw i64 %1913, %1848
  %1915 = add nuw nsw i64 %1914, %1852
  %1916 = add nuw nsw i64 %1915, %1854
  %1917 = add nuw nsw i64 %1916, %1856
  %1918 = add nuw nsw i64 %1917, %1858
  %1919 = add nuw nsw i64 %1918, %1860
  %1920 = add nuw nsw i64 %1919, %1862
  %1921 = add nuw nsw i64 %1920, %1864
  %1922 = add nuw nsw i64 %1921, %1866
  %1923 = add nuw nsw i64 %1922, %1868
  %1924 = add nuw nsw i64 %1923, %1870
  %1925 = add nuw nsw i64 %1924, %1872
  %1926 = add nuw nsw i64 %1925, %1874
  %1927 = add nuw nsw i64 %1926, %1876
  %1928 = add nuw nsw i64 %1927, %1880
  %1929 = add nuw nsw i64 %1928, %1882
  %1930 = add nuw nsw i64 %1929, %1884
  %1931 = add nuw nsw i64 %1930, %1886
  %1932 = add nuw nsw i64 %1931, %1888
  %1933 = add nuw nsw i64 %1932, %1890
  %1934 = add nuw nsw i64 %1933, %1892
  %1935 = add nuw nsw i64 %1934, %1894
  %1936 = add nuw nsw i64 %1935, %1896
  %1937 = add nuw nsw i64 %1936, %1898
  %1938 = add nuw nsw i64 %1937, %1900
  %1939 = add nuw nsw i64 %1938, %1902
  %1940 = add nuw nsw i64 %1939, %1904
  %1941 = add nuw nsw i64 %1940, %1906
  %1942 = add nuw nsw i64 %1941, %1908
  %1943 = add nuw nsw i64 %1942, %1910
  %1944 = add nuw nsw i64 %1943, %1912
  %1945 = trunc i64 %1846 to i32
  %1946 = getelementptr inbounds i32, i32* %1522, i64 %1548
  %1947 = load i32, i32* %1946, align 4
  %1948 = sub nsw i32 %1947, %1945
  %1949 = shl i32 %1948, 1
  %1950 = ashr i32 %1948, 31
  %1951 = xor i32 %1949, %1950
  %1952 = icmp ult i32 %1951, 16
  br i1 %1952, label %1962, label %1953

1953:                                             ; preds = %1843
  %1954 = call i32 @llvm.ctlz.i32(i32 %1951, i1 true) #10, !range !29
  %1955 = xor i32 %1954, 31
  %1956 = shl i32 1, %1955
  %1957 = sub i32 %1951, %1956
  %1958 = shl nuw nsw i32 %1955, 2
  %1959 = add nsw i32 %1955, -2
  %1960 = lshr i32 %1957, %1959
  %1961 = add i32 %1960, %1958
  br label %1962

1962:                                             ; preds = %1953, %1843
  %1963 = phi i32 [ %1961, %1953 ], [ %1951, %1843 ]
  %1964 = phi i32 [ %1959, %1953 ], [ 0, %1843 ]
  %1965 = getelementptr inbounds [34 x %"struct.jxl::Histogram"], [34 x %"struct.jxl::Histogram"]* %9, i64 0, i64 %1944
  %1966 = zext i32 %1963 to i64
  %1967 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %1965, i64 0, i32 0
  %1968 = getelementptr inbounds [34 x %"struct.jxl::Histogram"], [34 x %"struct.jxl::Histogram"]* %9, i64 0, i64 %1944, i32 0, i32 0, i32 1
  %1969 = bitcast i32** %1968 to i64*
  %1970 = load i64, i64* %1969, align 8
  %1971 = bitcast %"struct.jxl::Histogram"* %1965 to i64*
  %1972 = load i64, i64* %1971, align 8
  %1973 = sub i64 %1970, %1972
  %1974 = ashr exact i64 %1973, 2
  %1975 = icmp ugt i64 %1974, %1966
  %1976 = inttoptr i64 %1972 to i32*
  br i1 %1975, label %1989, label %1977

1977:                                             ; preds = %1962
  %1978 = add nuw nsw i64 %1966, 8
  %1979 = and i64 %1978, 8589934584
  %1980 = icmp ugt i64 %1979, %1974
  br i1 %1980, label %1981, label %1985

1981:                                             ; preds = %1977
  %1982 = sub nsw i64 %1979, %1974
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.156"* %1967, i64 %1982) #10
  %1983 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %1965, i64 0, i32 0, i32 0, i32 0
  %1984 = load i32*, i32** %1983, align 8
  br label %1989

1985:                                             ; preds = %1977
  %1986 = icmp ult i64 %1979, %1974
  br i1 %1986, label %1987, label %1989

1987:                                             ; preds = %1985
  %1988 = getelementptr inbounds i32, i32* %1976, i64 %1979
  store i32* %1988, i32** %1968, align 8
  br label %1989

1989:                                             ; preds = %1987, %1985, %1981, %1962
  %1990 = phi i32* [ %1976, %1987 ], [ %1976, %1985 ], [ %1984, %1981 ], [ %1976, %1962 ]
  %1991 = getelementptr inbounds i32, i32* %1990, i64 %1966
  %1992 = load i32, i32* %1991, align 4
  %1993 = add nsw i32 %1992, 1
  store i32 %1993, i32* %1991, align 4
  %1994 = getelementptr inbounds [34 x %"struct.jxl::Histogram"], [34 x %"struct.jxl::Histogram"]* %9, i64 0, i64 %1944, i32 1
  %1995 = load i64, i64* %1994, align 8
  %1996 = add i64 %1995, 1
  store i64 %1996, i64* %1994, align 8
  %1997 = zext i32 %1964 to i64
  %1998 = add i64 %1547, %1997
  %1999 = load i32, i32* %1946, align 4
  %2000 = sext i32 %1999 to i64
  %2001 = load i64, i64* %1497, align 8
  %2002 = add i64 %2001, 2
  %2003 = select i1 %1533, i64 0, i64 %2002
  %2004 = select i1 %1533, i64 %2002, i64 0
  %2005 = shl nsw i64 %2000, 3
  %2006 = load i64, i64* %1417, align 8
  %2007 = sub nsw i64 %2006, %2005
  %2008 = icmp slt i64 %2007, 2147483647
  %2009 = select i1 %2008, i64 %2007, i64 2147483647
  %2010 = icmp sgt i64 %2009, -2147483648
  %2011 = select i1 %2010, i64 %2009, i64 -2147483648
  %2012 = trunc i64 %2011 to i32
  %2013 = add i64 %2003, %1548
  %2014 = load i32*, i32** %1405, align 8
  %2015 = getelementptr inbounds i32, i32* %2014, i64 %2013
  store i32 %2012, i32* %2015, align 4
  %2016 = add i64 %2004, %1593
  %2017 = load i64, i64* %1406, align 8
  %2018 = sub nsw i64 %2017, %2005
  %2019 = sub nsw i64 0, %2018
  %2020 = icmp slt i64 %2018, 0
  %2021 = select i1 %2020, i64 %2019, i64 %2018
  %2022 = add nuw nsw i64 %2021, 3
  %2023 = lshr i64 %2022, 3
  %2024 = trunc i64 %2023 to i32
  %2025 = load i32*, i32** %1397, align 8
  %2026 = getelementptr inbounds i32, i32* %2025, i64 %2013
  store i32 %2024, i32* %2026, align 4
  %2027 = load i32*, i32** %1397, align 8
  %2028 = getelementptr inbounds i32, i32* %2027, i64 %2016
  %2029 = load i32, i32* %2028, align 4
  %2030 = add i32 %2029, %2024
  store i32 %2030, i32* %2028, align 4
  %2031 = load i64, i64* %1408, align 8
  %2032 = sub nsw i64 %2031, %2005
  %2033 = sub nsw i64 0, %2032
  %2034 = icmp slt i64 %2032, 0
  %2035 = select i1 %2034, i64 %2033, i64 %2032
  %2036 = add nuw nsw i64 %2035, 3
  %2037 = lshr i64 %2036, 3
  %2038 = trunc i64 %2037 to i32
  %2039 = load i32*, i32** %1399, align 8
  %2040 = getelementptr inbounds i32, i32* %2039, i64 %2013
  store i32 %2038, i32* %2040, align 4
  %2041 = load i32*, i32** %1399, align 8
  %2042 = getelementptr inbounds i32, i32* %2041, i64 %2016
  %2043 = load i32, i32* %2042, align 4
  %2044 = add i32 %2043, %2038
  store i32 %2044, i32* %2042, align 4
  %2045 = load i64, i64* %1410, align 8
  %2046 = sub nsw i64 %2045, %2005
  %2047 = sub nsw i64 0, %2046
  %2048 = icmp slt i64 %2046, 0
  %2049 = select i1 %2048, i64 %2047, i64 %2046
  %2050 = add nuw nsw i64 %2049, 3
  %2051 = lshr i64 %2050, 3
  %2052 = trunc i64 %2051 to i32
  %2053 = load i32*, i32** %1401, align 8
  %2054 = getelementptr inbounds i32, i32* %2053, i64 %2013
  store i32 %2052, i32* %2054, align 4
  %2055 = load i32*, i32** %1401, align 8
  %2056 = getelementptr inbounds i32, i32* %2055, i64 %2016
  %2057 = load i32, i32* %2056, align 4
  %2058 = add i32 %2057, %2052
  store i32 %2058, i32* %2056, align 4
  %2059 = load i64, i64* %1416, align 8
  %2060 = sub nsw i64 %2059, %2005
  %2061 = sub nsw i64 0, %2060
  %2062 = icmp slt i64 %2060, 0
  %2063 = select i1 %2062, i64 %2061, i64 %2060
  %2064 = add nuw nsw i64 %2063, 3
  %2065 = lshr i64 %2064, 3
  %2066 = trunc i64 %2065 to i32
  %2067 = load i32*, i32** %1403, align 8
  %2068 = getelementptr inbounds i32, i32* %2067, i64 %2013
  store i32 %2066, i32* %2068, align 4
  %2069 = load i32*, i32** %1403, align 8
  %2070 = getelementptr inbounds i32, i32* %2069, i64 %2016
  %2071 = load i32, i32* %2070, align 4
  %2072 = add i32 %2071, %2066
  store i32 %2072, i32* %2070, align 4
  %2073 = load i64, i64* %1497, align 8
  %2074 = icmp ult i64 %1593, %2073
  br i1 %2074, label %1545, label %1537

2075:                                             ; preds = %2108
  %2076 = load i32*, i32** %1405, align 8
  %2077 = icmp eq i32* %2076, null
  br i1 %2077, label %2081, label %2078

2078:                                             ; preds = %2075
  %2079 = ptrtoint i32* %2076 to i64
  store i64 %2079, i64* %1419, align 8
  %2080 = bitcast i32* %2076 to i8*
  call void @_ZdlPv(i8* %2080) #13
  br label %2081

2081:                                             ; preds = %2078, %2075
  %2082 = load i32*, i32** %1403, align 8
  %2083 = icmp eq i32* %2082, null
  br i1 %2083, label %2087, label %2084

2084:                                             ; preds = %2081
  %2085 = ptrtoint i32* %2082 to i64
  store i64 %2085, i64* %1421, align 8
  %2086 = bitcast i32* %2082 to i8*
  call void @_ZdlPv(i8* %2086) #13
  br label %2087

2087:                                             ; preds = %2084, %2081
  %2088 = load i32*, i32** %1401, align 8
  %2089 = icmp eq i32* %2088, null
  br i1 %2089, label %2093, label %2090

2090:                                             ; preds = %2087
  %2091 = ptrtoint i32* %2088 to i64
  store i64 %2091, i64* %1423, align 8
  %2092 = bitcast i32* %2088 to i8*
  call void @_ZdlPv(i8* %2092) #13
  br label %2093

2093:                                             ; preds = %2090, %2087
  %2094 = load i32*, i32** %1399, align 8
  %2095 = icmp eq i32* %2094, null
  br i1 %2095, label %2099, label %2096

2096:                                             ; preds = %2093
  %2097 = ptrtoint i32* %2094 to i64
  store i64 %2097, i64* %1425, align 8
  %2098 = bitcast i32* %2094 to i8*
  call void @_ZdlPv(i8* %2098) #13
  br label %2099

2099:                                             ; preds = %2096, %2093
  %2100 = load i32*, i32** %1397, align 8
  %2101 = icmp eq i32* %2100, null
  br i1 %2101, label %2105, label %2102

2102:                                             ; preds = %2099
  %2103 = ptrtoint i32* %2100 to i64
  store i64 %2103, i64* %1427, align 8
  %2104 = bitcast i32* %2100 to i8*
  call void @_ZdlPv(i8* %2104) #13
  br label %2105

2105:                                             ; preds = %2102, %2099
  call void @llvm.lifetime.end.p0i8(i64 472, i8* nonnull %1394) #10
  %2106 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %1494, i64 1
  %2107 = icmp eq %"class.jxl::Channel"* %2106, %1486
  br i1 %2107, label %1488, label %1491

2108:                                             ; preds = %2108, %1508
  %2109 = phi i64 [ 0, %1508 ], [ %2119, %2108 ]
  %2110 = phi float [ %1493, %1508 ], [ %2113, %2108 ]
  %2111 = getelementptr inbounds [34 x %"struct.jxl::Histogram"], [34 x %"struct.jxl::Histogram"]* %9, i64 0, i64 %2109
  %2112 = call float @_ZNK3jxl9Histogram14ShannonEntropyEv(%"struct.jxl::Histogram"* %2111) #10
  %2113 = fadd float %2110, %2112
  %2114 = bitcast %"struct.jxl::Histogram"* %2111 to i64*
  %2115 = load i64, i64* %2114, align 8
  %2116 = getelementptr inbounds [34 x %"struct.jxl::Histogram"], [34 x %"struct.jxl::Histogram"]* %9, i64 0, i64 %2109, i32 0, i32 0, i32 1
  %2117 = bitcast i32** %2116 to i64*
  store i64 %2115, i64* %2117, align 8
  %2118 = getelementptr inbounds [34 x %"struct.jxl::Histogram"], [34 x %"struct.jxl::Histogram"]* %9, i64 0, i64 %2109, i32 1
  store i64 0, i64* %2118, align 8
  %2119 = add nuw nsw i64 %2109, 1
  %2120 = icmp eq i64 %2119, 34
  br i1 %2120, label %2075, label %2108

2121:                                             ; preds = %2132, %1488
  %2122 = phi %"struct.jxl::Histogram"* [ %1310, %1488 ], [ %2123, %2132 ]
  %2123 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %2122, i64 -1
  %2124 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %2123, i64 0, i32 0, i32 0, i32 0
  %2125 = load i32*, i32** %2124, align 8
  %2126 = icmp eq i32* %2125, null
  br i1 %2126, label %2132, label %2127

2127:                                             ; preds = %2121
  %2128 = ptrtoint i32* %2125 to i64
  %2129 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %2122, i64 -1, i32 0, i32 0, i32 1
  %2130 = bitcast i32** %2129 to i64*
  store i64 %2128, i64* %2130, align 8
  %2131 = bitcast i32* %2125 to i8*
  call void @_ZdlPv(i8* %2131) #13
  br label %2132

2132:                                             ; preds = %2127, %2121
  %2133 = icmp eq %"struct.jxl::Histogram"* %2123, %1309
  br i1 %2133, label %2134, label %2121

2134:                                             ; preds = %2132
  %2135 = uitofp i64 %1490 to float
  %2136 = fadd float %1489, %2135
  call void @llvm.lifetime.end.p0i8(i64 1360, i8* nonnull %1308) #10
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %1307)
  %2137 = fcmp olt float %2136, %1430
  br i1 %2137, label %2138, label %2141

2138:                                             ; preds = %2134
  %2139 = load %"struct.jxl::ModularOptions"*, %"struct.jxl::ModularOptions"** %1301, align 8
  %2140 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %2139, i64 %72, i32 8
  store i32 %1431, i32* %2140, align 4
  br label %2141

2141:                                             ; preds = %2138, %2134
  %2142 = phi float [ %2136, %2138 ], [ %1430, %2134 ]
  %2143 = add nuw nsw i64 %1429, 1
  %2144 = icmp eq i64 %2143, %1300
  br i1 %2144, label %2145, label %1428

2145:                                             ; preds = %2141, %1299, %1295, %680, %704
  %2146 = phi i32 [ 1, %704 ], [ 1, %680 ], [ 0, %1295 ], [ 0, %1299 ], [ 0, %2141 ]
  ret i32 %2146
}

declare void @_ZN3jxl5Image15undo_transformsERKNS_8weighted6HeaderEiPNS_10ThreadPoolE(%"class.jxl::Image"*, %"struct.jxl::weighted::Header"* dereferenceable(56), i32, %"class.jxl::ThreadPool"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl10QuantizeWPEPKimmmmmPNS_8weighted5StateEff(i32*, i64, i64, i64, i64, i64, %"struct.jxl::weighted::State"*, float, float) local_unnamed_addr #0 {
  %10 = alloca %"struct.jxl::PredictionResult", align 8
  %11 = fmul float %7, %8
  %12 = bitcast %"struct.jxl::PredictionResult"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 24, i1 false)
  %13 = getelementptr inbounds i32, i32* %0, i64 %3
  %14 = shl i64 %3, 32
  %15 = ashr exact i64 %14, 32
  %16 = shl i64 %4, 32
  %17 = ashr exact i64 %16, 32
  call void @_ZN3jxl6detail7PredictILi2EEENS_16PredictionResultEPNSt3__16vectorIiNS3_9allocatorIiEEEEmPKilmmNS_9PredictorEPKNS_12MATreeLookupEPKNS_7ChannelEPNS_8weighted5StateEPl(%"struct.jxl::PredictionResult"* nonnull sret %10, %"class.std::__1::vector.156"* null, i64 %5, i32* %13, i64 %1, i64 %15, i64 %17, i32 6, %"class.jxl::MATreeLookup"* null, %"class.jxl::Channel"* null, %"struct.jxl::weighted::State"* %6, i64* null) #10
  %18 = getelementptr inbounds %"struct.jxl::PredictionResult", %"struct.jxl::PredictionResult"* %10, i64 0, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = sitofp i64 %19 to float
  %21 = fsub float %11, %20
  %22 = call float @llvm.round.f32(float %21)
  %23 = fptosi float %22 to i32
  %24 = add i32 %23, 2
  %25 = icmp ugt i32 %24, 4
  br i1 %25, label %26, label %31

26:                                               ; preds = %9
  %27 = fmul float %21, 5.000000e-01
  %28 = call float @llvm.round.f32(float %27)
  %29 = fmul float %28, 2.000000e+00
  %30 = fptosi float %29 to i32
  br label %31

31:                                               ; preds = %9, %26
  %32 = phi i32 [ %30, %26 ], [ %23, %9 ]
  %33 = trunc i64 %19 to i32
  %34 = add i32 %32, %33
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #10
  ret i32 %34
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.round.f32(float) #6

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl16QuantizeGradientEPKimmmmmff(i32*, i64, i64, i64, i64, i64, float, float) local_unnamed_addr #0 {
  %9 = alloca %"struct.jxl::PredictionResult", align 8
  %10 = fmul float %6, %7
  %11 = bitcast %"struct.jxl::PredictionResult"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false)
  %12 = getelementptr inbounds i32, i32* %0, i64 %3
  %13 = shl i64 %3, 32
  %14 = ashr exact i64 %13, 32
  %15 = shl i64 %4, 32
  %16 = ashr exact i64 %15, 32
  call void @_ZN3jxl6detail7PredictILi0EEENS_16PredictionResultEPNSt3__16vectorIiNS3_9allocatorIiEEEEmPKilmmNS_9PredictorEPKNS_12MATreeLookupEPKNS_7ChannelEPNS_8weighted5StateEPl(%"struct.jxl::PredictionResult"* nonnull sret %9, %"class.std::__1::vector.156"* null, i64 %5, i32* %12, i64 %1, i64 %14, i64 %16, i32 5, %"class.jxl::MATreeLookup"* null, %"class.jxl::Channel"* null, %"struct.jxl::weighted::State"* null, i64* null) #10
  %17 = getelementptr inbounds %"struct.jxl::PredictionResult", %"struct.jxl::PredictionResult"* %9, i64 0, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = sitofp i64 %18 to float
  %20 = fsub float %10, %19
  %21 = call float @llvm.round.f32(float %20)
  %22 = fptosi float %21 to i32
  %23 = add i32 %22, 2
  %24 = icmp ugt i32 %23, 4
  br i1 %24, label %25, label %30

25:                                               ; preds = %8
  %26 = fmul float %20, 5.000000e-01
  %27 = call float @llvm.round.f32(float %26)
  %28 = fmul float %27, 2.000000e+00
  %29 = fptosi float %28 to i32
  br label %30

30:                                               ; preds = %8, %25
  %31 = phi i32 [ %29, %25 ], [ %22, %8 ]
  %32 = trunc i64 %18 to i32
  %33 = add i32 %31, %32
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #10
  ret i32 %33
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl19ModularFrameEncoder11AddVarDCTDCERKNS_6Image3IfEEmbPNS_18PassesEncoderStateE(%"class.jxl::ModularFrameEncoder"* nocapture readonly, %"class.jxl::Image3"* nocapture readonly dereferenceable(96), i64, i1 zeroext, %"struct.jxl::PassesEncoderState"*) local_unnamed_addr #0 align 2 {
  %6 = alloca %"struct.jxl::PredictionResult", align 8
  %7 = alloca %"struct.jxl::PredictionResult", align 8
  %8 = alloca %"struct.jxl::PredictionResult", align 8
  %9 = alloca %"struct.jxl::PredictionResult", align 8
  %10 = alloca %"class.jxl::Rect", align 8
  %11 = alloca %"class.jxl::Image", align 8
  %12 = alloca %"struct.jxl::weighted::Header", align 8
  %13 = alloca %"struct.jxl::weighted::State", align 8
  %14 = alloca %"struct.jxl::weighted::Header", align 8
  %15 = alloca %"struct.jxl::YCbCrChromaSubsampling", align 8
  %16 = bitcast %"class.jxl::Rect"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %16) #10
  %17 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %10, i64 0, i32 0
  %18 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %10, i64 0, i32 1
  %19 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %10, i64 0, i32 2
  %20 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %10, i64 0, i32 3
  %21 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %4, i64 0, i32 0, i32 2, i32 12
  %22 = load i64, i64* %21, align 8, !noalias !53
  %23 = urem i64 %2, %22
  %24 = udiv i64 %2, %22
  %25 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %4, i64 0, i32 0, i32 2, i32 16
  %26 = load i64, i64* %25, align 8, !noalias !53
  %27 = mul i64 %26, %23
  %28 = mul i64 %26, %24
  %29 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %4, i64 0, i32 0, i32 2, i32 8
  %30 = load i64, i64* %29, align 8, !noalias !53
  %31 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %4, i64 0, i32 0, i32 2, i32 9
  %32 = load i64, i64* %31, align 8, !noalias !53
  store i64 %27, i64* %17, align 8, !alias.scope !53
  store i64 %28, i64* %18, align 8, !alias.scope !53
  %33 = add i64 %27, %26
  %34 = icmp ugt i64 %33, %30
  %35 = tail call i64 @llvm.usub.sat.i64(i64 %30, i64 %27) #10
  %36 = select i1 %34, i64 %35, i64 %26
  store i64 %36, i64* %19, align 8, !alias.scope !53
  %37 = add i64 %28, %26
  %38 = icmp ugt i64 %37, %32
  %39 = tail call i64 @llvm.usub.sat.i64(i64 %32, i64 %28) #10
  %40 = select i1 %38, i64 %39, i64 %26
  store i64 %40, i64* %20, align 8, !alias.scope !53
  %41 = zext i1 %3 to i8
  %42 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 1, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr inbounds i8, i8* %43, i64 %2
  store i8 %41, i8* %44, align 1
  %45 = load i8*, i8** %42, align 8
  %46 = getelementptr inbounds i8, i8* %45, i64 %2
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = shl i32 1, %48
  %50 = sitofp i32 %49 to float
  %51 = add i64 %2, 1
  %52 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 3, i32 0, i32 0
  %53 = load %"struct.jxl::ModularOptions"*, %"struct.jxl::ModularOptions"** %52, align 8
  %54 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %53, i64 %51, i32 0
  store i64 16777215, i64* %54, align 8
  %55 = load %"struct.jxl::ModularOptions"*, %"struct.jxl::ModularOptions"** %52, align 8
  %56 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %55, i64 %51, i32 7
  store i32 6, i32* %56, align 8
  %57 = load %"struct.jxl::ModularOptions"*, %"struct.jxl::ModularOptions"** %52, align 8
  %58 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %57, i64 %51, i32 10
  store i32 0, i32* %58, align 4
  %59 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 7
  %60 = load i32, i32* %59, align 4
  %61 = icmp sgt i32 %60, 2
  br i1 %61, label %62, label %65

62:                                               ; preds = %5
  %63 = load %"struct.jxl::ModularOptions"*, %"struct.jxl::ModularOptions"** %52, align 8
  %64 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %63, i64 %51, i32 13
  store i32 4, i32* %64, align 4
  br label %65

65:                                               ; preds = %62, %5
  %66 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 8
  %67 = load i64, i64* %66, align 8
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %72, label %69

69:                                               ; preds = %65
  %70 = load %"struct.jxl::ModularOptions"*, %"struct.jxl::ModularOptions"** %52, align 8
  %71 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %70, i64 %51, i32 13
  store i32 5, i32* %71, align 4
  br label %72

72:                                               ; preds = %65, %69
  %73 = bitcast %"class.jxl::Image"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %73) #10
  %74 = load i64, i64* %19, align 8
  %75 = load i64, i64* %20, align 8
  call void @_ZN3jxl5ImageC1Emmii(%"class.jxl::Image"* nonnull %11, i64 %74, i64 %75, i32 255, i32 3) #10
  %76 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 2, i32 0, i32 0
  %77 = load %"class.jxl::Image"*, %"class.jxl::Image"** %76, align 8
  %78 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %77, i64 %51
  %79 = call dereferenceable(104) %"class.jxl::Image"* @_ZN3jxl5ImageaSEOS0_(%"class.jxl::Image"* %78, %"class.jxl::Image"* nonnull dereferenceable(104) %11) #10
  call void @_ZN3jxl5ImageD1Ev(%"class.jxl::Image"* nonnull %11) #10
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %73) #10
  br i1 %3, label %80, label %265

80:                                               ; preds = %72
  %81 = load %"struct.jxl::ModularOptions"*, %"struct.jxl::ModularOptions"** %52, align 8
  %82 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %81, i64 %51, i32 13
  %83 = load i32, i32* %82, align 4
  %84 = icmp eq i32 %83, 5
  br i1 %84, label %85, label %265

85:                                               ; preds = %80
  %86 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %4, i64 0, i32 0, i32 1, i32 7, i32 1, i64 1
  %87 = load i32, i32* %86, align 4
  %88 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %4, i64 0, i32 0, i32 1, i32 7, i32 1, i64 0
  %89 = load i32, i32* %88, align 4
  %90 = icmp eq i32 %89, %87
  br i1 %90, label %91, label %105

91:                                               ; preds = %85
  %92 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %4, i64 0, i32 0, i32 1, i32 7, i32 1, i64 2
  %93 = load i32, i32* %92, align 4
  %94 = icmp eq i32 %93, %87
  br i1 %94, label %95, label %105

95:                                               ; preds = %91
  %96 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %4, i64 0, i32 0, i32 5, i32 8
  %97 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %4, i64 0, i32 0, i32 5, i32 5
  %98 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %4, i64 0, i32 0, i32 5, i32 3
  %99 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %4, i64 0, i32 0, i32 5, i32 6
  %100 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 4
  %101 = bitcast %"struct.jxl::PredictionResult"* %7 to i8*
  %102 = getelementptr inbounds %"struct.jxl::PredictionResult", %"struct.jxl::PredictionResult"* %7, i64 0, i32 1
  %103 = bitcast %"struct.jxl::PredictionResult"* %6 to i8*
  %104 = getelementptr inbounds %"struct.jxl::PredictionResult", %"struct.jxl::PredictionResult"* %6, i64 0, i32 1
  br label %108

105:                                              ; preds = %85, %91
  %106 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.2, i64 0, i64 0), i32 1430, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.23, i64 0, i64 0)) #10
  %107 = call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

108:                                              ; preds = %95, %139
  %109 = phi i64 [ %74, %95 ], [ %140, %139 ]
  %110 = phi i64 [ %74, %95 ], [ %141, %139 ]
  %111 = phi i64 [ %75, %95 ], [ %142, %139 ]
  %112 = phi i32* [ getelementptr inbounds ([3 x i32], [3 x i32]* @.ref.tmp.24, i64 0, i64 0), %95 ], [ %143, %139 ]
  %113 = load i32, i32* %112, align 4
  %114 = sext i32 %113 to i64
  %115 = load %"class.jxl::DequantMatrices"*, %"class.jxl::DequantMatrices"** %96, align 8
  %116 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %115, i64 0, i32 4, i64 %114
  %117 = load float, float* %116, align 4
  %118 = load float, float* %97, align 4
  %119 = load i32, i32* %98, align 4
  %120 = sitofp i32 %119 to float
  %121 = fmul float %118, %120
  %122 = fmul float %117, %121
  %123 = fmul float %122, %50
  %124 = icmp eq i64 %111, 0
  br i1 %124, label %139, label %125

125:                                              ; preds = %108
  %126 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %4, i64 0, i32 0, i32 8, i32 2, i64 %114
  %127 = load float, float* %126, align 4
  %128 = load float, float* %99, align 8
  %129 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %115, i64 0, i32 3, i64 1
  %130 = load float, float* %129, align 4
  %131 = fmul float %128, %130
  %132 = fdiv float %131, %50
  %133 = icmp ult i32 %113, 2
  %134 = zext i1 %133 to i64
  %135 = xor i64 %134, %114
  %136 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 %114, i32 0, i32 5, i32 0, i32 0, i32 0
  %137 = icmp eq i32 %113, 1
  %138 = fmul float %127, %132
  br label %145

139:                                              ; preds = %259, %108
  %140 = phi i64 [ %109, %108 ], [ %260, %259 ]
  %141 = phi i64 [ %110, %108 ], [ %261, %259 ]
  %142 = phi i64 [ 0, %108 ], [ %263, %259 ]
  %143 = getelementptr inbounds i32, i32* %112, i64 1
  %144 = icmp eq i32* %143, getelementptr inbounds ([3 x i32], [3 x i32]* @.ref.tmp.24, i64 1, i64 0)
  br i1 %144, label %986, label %108

145:                                              ; preds = %125, %259
  %146 = phi i64 [ %109, %125 ], [ %260, %259 ]
  %147 = phi i64 [ %110, %125 ], [ %261, %259 ]
  %148 = phi i64 [ 0, %125 ], [ %262, %259 ]
  %149 = load %"class.jxl::Image"*, %"class.jxl::Image"** %76, align 8
  %150 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %149, i64 %51, i32 0, i32 0, i32 0
  %151 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %150, align 8
  %152 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %151, i64 %135, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %153 = load i8*, i8** %152, align 8
  %154 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %151, i64 %135, i32 0, i32 0, i32 4
  %155 = load i64, i64* %154, align 8
  %156 = mul i64 %155, %148
  %157 = getelementptr inbounds i8, i8* %153, i64 %156
  %158 = ptrtoint i8* %157 to i64
  %159 = and i64 %158, 63
  %160 = icmp eq i64 %159, 0
  call void @llvm.assume(i1 %160) #10
  %161 = bitcast i8* %157 to i32*
  %162 = lshr i64 %155, 2
  %163 = load i64, i64* %18, align 8
  %164 = add i64 %163, %148
  %165 = load i64, i64* %100, align 8
  %166 = mul i64 %165, %164
  %167 = load i8*, i8** %136, align 8
  %168 = ptrtoint i8* %167 to i64
  %169 = and i64 %168, 63
  %170 = icmp eq i64 %169, 0
  call void @llvm.assume(i1 %170) #10
  %171 = getelementptr inbounds i8, i8* %167, i64 %166
  %172 = ptrtoint i8* %171 to i64
  %173 = and i64 %172, 63
  %174 = icmp eq i64 %173, 0
  call void @llvm.assume(i1 %174) #10
  %175 = bitcast i8* %171 to float*
  %176 = load i64, i64* %17, align 8
  %177 = getelementptr inbounds float, float* %175, i64 %176
  br i1 %137, label %178, label %211

178:                                              ; preds = %145
  %179 = icmp eq i64 %146, 0
  br i1 %179, label %259, label %180

180:                                              ; preds = %178
  %181 = shl i64 %148, 32
  %182 = ashr exact i64 %181, 32
  br label %183

183:                                              ; preds = %180, %204
  %184 = phi i64 [ %146, %180 ], [ %209, %204 ]
  %185 = phi i64 [ 0, %180 ], [ %208, %204 ]
  %186 = getelementptr inbounds float, float* %177, i64 %185
  %187 = load float, float* %186, align 4
  %188 = fmul float %123, %187
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %103) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %103, i8 -86, i64 24, i1 false) #10
  %189 = getelementptr inbounds i32, i32* %161, i64 %185
  %190 = shl i64 %185, 32
  %191 = ashr exact i64 %190, 32
  call void @_ZN3jxl6detail7PredictILi0EEENS_16PredictionResultEPNSt3__16vectorIiNS3_9allocatorIiEEEEmPKilmmNS_9PredictorEPKNS_12MATreeLookupEPKNS_7ChannelEPNS_8weighted5StateEPl(%"struct.jxl::PredictionResult"* nonnull sret %6, %"class.std::__1::vector.156"* null, i64 %184, i32* %189, i64 %162, i64 %191, i64 %182, i32 5, %"class.jxl::MATreeLookup"* null, %"class.jxl::Channel"* null, %"struct.jxl::weighted::State"* null, i64* null) #10
  %192 = load i64, i64* %104, align 8
  %193 = sitofp i64 %192 to float
  %194 = fsub float %188, %193
  %195 = call float @llvm.round.f32(float %194) #10
  %196 = fptosi float %195 to i32
  %197 = add i32 %196, 2
  %198 = icmp ugt i32 %197, 4
  br i1 %198, label %199, label %204

199:                                              ; preds = %183
  %200 = fmul float %194, 5.000000e-01
  %201 = call float @llvm.round.f32(float %200) #10
  %202 = fmul float %201, 2.000000e+00
  %203 = fptosi float %202 to i32
  br label %204

204:                                              ; preds = %183, %199
  %205 = phi i32 [ %203, %199 ], [ %196, %183 ]
  %206 = trunc i64 %192 to i32
  %207 = add i32 %205, %206
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %103) #10
  store i32 %207, i32* %189, align 4
  %208 = add nuw i64 %185, 1
  %209 = load i64, i64* %19, align 8
  %210 = icmp ult i64 %208, %209
  br i1 %210, label %183, label %259

211:                                              ; preds = %145
  %212 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %151, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %213 = load i8*, i8** %212, align 8
  %214 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %151, i64 0, i32 0, i32 0, i32 4
  %215 = load i64, i64* %214, align 8
  %216 = mul i64 %215, %148
  %217 = getelementptr inbounds i8, i8* %213, i64 %216
  %218 = ptrtoint i8* %217 to i64
  %219 = and i64 %218, 63
  %220 = icmp eq i64 %219, 0
  call void @llvm.assume(i1 %220) #10
  %221 = bitcast i8* %217 to i32*
  %222 = icmp eq i64 %147, 0
  br i1 %222, label %259, label %223

223:                                              ; preds = %211
  %224 = shl i64 %148, 32
  %225 = ashr exact i64 %224, 32
  br label %226

226:                                              ; preds = %223, %252
  %227 = phi i64 [ %147, %223 ], [ %257, %252 ]
  %228 = phi i64 [ 0, %223 ], [ %256, %252 ]
  %229 = getelementptr inbounds float, float* %177, i64 %228
  %230 = load float, float* %229, align 4
  %231 = getelementptr inbounds i32, i32* %221, i64 %228
  %232 = load i32, i32* %231, align 4
  %233 = sitofp i32 %232 to float
  %234 = fmul float %138, %233
  %235 = fsub float %230, %234
  %236 = fmul float %123, %235
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %101) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %101, i8 -86, i64 24, i1 false) #10
  %237 = getelementptr inbounds i32, i32* %161, i64 %228
  %238 = shl i64 %228, 32
  %239 = ashr exact i64 %238, 32
  call void @_ZN3jxl6detail7PredictILi0EEENS_16PredictionResultEPNSt3__16vectorIiNS3_9allocatorIiEEEEmPKilmmNS_9PredictorEPKNS_12MATreeLookupEPKNS_7ChannelEPNS_8weighted5StateEPl(%"struct.jxl::PredictionResult"* nonnull sret %7, %"class.std::__1::vector.156"* null, i64 %227, i32* %237, i64 %162, i64 %239, i64 %225, i32 5, %"class.jxl::MATreeLookup"* null, %"class.jxl::Channel"* null, %"struct.jxl::weighted::State"* null, i64* null) #10
  %240 = load i64, i64* %102, align 8
  %241 = sitofp i64 %240 to float
  %242 = fsub float %236, %241
  %243 = call float @llvm.round.f32(float %242) #10
  %244 = fptosi float %243 to i32
  %245 = add i32 %244, 2
  %246 = icmp ugt i32 %245, 4
  br i1 %246, label %247, label %252

247:                                              ; preds = %226
  %248 = fmul float %242, 5.000000e-01
  %249 = call float @llvm.round.f32(float %248) #10
  %250 = fmul float %249, 2.000000e+00
  %251 = fptosi float %250 to i32
  br label %252

252:                                              ; preds = %226, %247
  %253 = phi i32 [ %251, %247 ], [ %244, %226 ]
  %254 = trunc i64 %240 to i32
  %255 = add i32 %253, %254
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %101) #10
  store i32 %255, i32* %237, align 4
  %256 = add nuw i64 %228, 1
  %257 = load i64, i64* %19, align 8
  %258 = icmp ult i64 %256, %257
  br i1 %258, label %226, label %259

259:                                              ; preds = %252, %204, %178, %211
  %260 = phi i64 [ 0, %178 ], [ %146, %211 ], [ %209, %204 ], [ %257, %252 ]
  %261 = phi i64 [ 0, %178 ], [ 0, %211 ], [ %209, %204 ], [ %257, %252 ]
  %262 = add nuw i64 %148, 1
  %263 = load i64, i64* %20, align 8
  %264 = icmp ult i64 %262, %263
  br i1 %264, label %145, label %139

265:                                              ; preds = %80, %72
  %266 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %4, i64 0, i32 0, i32 1, i32 7, i32 1, i64 1
  %267 = load i32, i32* %266, align 4
  %268 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %4, i64 0, i32 0, i32 1, i32 7, i32 1, i64 0
  %269 = load i32, i32* %268, align 4
  %270 = icmp eq i32 %269, %267
  br i1 %270, label %271, label %275

271:                                              ; preds = %265
  %272 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %4, i64 0, i32 0, i32 1, i32 7, i32 1, i64 2
  %273 = load i32, i32* %272, align 4
  %274 = icmp eq i32 %273, %267
  br label %275

275:                                              ; preds = %265, %271
  %276 = phi i1 [ false, %265 ], [ %274, %271 ]
  br i1 %3, label %277, label %653

277:                                              ; preds = %275
  br i1 %276, label %278, label %318

278:                                              ; preds = %277
  %279 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %4, i64 0, i32 0, i32 5, i32 8
  %280 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %4, i64 0, i32 0, i32 5, i32 5
  %281 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %4, i64 0, i32 0, i32 5, i32 3
  %282 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %4, i64 0, i32 0, i32 5, i32 6
  %283 = bitcast %"struct.jxl::weighted::Header"* %12 to i8*
  %284 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %12, i64 0, i32 0, i32 0
  %285 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %12, i64 0, i32 2
  %286 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %12, i64 0, i32 0
  %287 = bitcast i32* %285 to i8*
  %288 = bitcast %"struct.jxl::weighted::State"* %13 to i8*
  %289 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %14, i64 0, i32 0, i32 0
  %290 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %14, i64 0, i32 1
  %291 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %12, i64 0, i32 1
  %292 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 4
  %293 = bitcast %"struct.jxl::PredictionResult"* %9 to i8*
  %294 = getelementptr inbounds %"struct.jxl::PredictionResult", %"struct.jxl::PredictionResult"* %9, i64 0, i32 1
  %295 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %13, i64 0, i32 1
  %296 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %13, i64 0, i32 3, i32 0, i32 0
  %297 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %13, i64 0, i32 0, i64 0
  %298 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %13, i64 0, i32 2, i64 0, i32 0, i32 0
  %299 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %13, i64 0, i32 0, i64 1
  %300 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %13, i64 0, i32 2, i64 1, i32 0, i32 0
  %301 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %13, i64 0, i32 0, i64 2
  %302 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %13, i64 0, i32 2, i64 2, i32 0, i32 0
  %303 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %13, i64 0, i32 0, i64 3
  %304 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %13, i64 0, i32 2, i64 3, i32 0, i32 0
  %305 = bitcast %"struct.jxl::PredictionResult"* %8 to i8*
  %306 = getelementptr inbounds %"struct.jxl::PredictionResult", %"struct.jxl::PredictionResult"* %8, i64 0, i32 1
  %307 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %13, i64 0, i32 3, i32 0, i32 1
  %308 = bitcast i32** %307 to i64*
  %309 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %13, i64 0, i32 2, i64 3, i32 0, i32 1
  %310 = bitcast i32** %309 to i64*
  %311 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %13, i64 0, i32 2, i64 2, i32 0, i32 1
  %312 = bitcast i32** %311 to i64*
  %313 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %13, i64 0, i32 2, i64 1, i32 0, i32 1
  %314 = bitcast i32** %313 to i64*
  %315 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %13, i64 0, i32 2, i64 0, i32 0, i32 1
  %316 = bitcast i32** %315 to i64*
  %317 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %12, i64 0, i32 1
  br label %321

318:                                              ; preds = %277
  %319 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.2, i64 0, i64 0), i32 1459, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.23, i64 0, i64 0)) #10
  %320 = call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

321:                                              ; preds = %278, %382
  %322 = phi i32* [ getelementptr inbounds ([3 x i32], [3 x i32]* @.ref.tmp.25, i64 0, i64 0), %278 ], [ %383, %382 ]
  %323 = load i32, i32* %322, align 4
  %324 = sext i32 %323 to i64
  %325 = load %"class.jxl::DequantMatrices"*, %"class.jxl::DequantMatrices"** %279, align 8
  %326 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %325, i64 0, i32 4, i64 %324
  %327 = load float, float* %326, align 4
  %328 = load float, float* %280, align 4
  %329 = load i32, i32* %281, align 4
  %330 = sitofp i32 %329 to float
  %331 = fmul float %328, %330
  %332 = fmul float %327, %331
  %333 = fmul float %332, %50
  %334 = load float, float* %282, align 8
  %335 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %325, i64 0, i32 3, i64 1
  %336 = load float, float* %335, align 4
  %337 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %4, i64 0, i32 0, i32 8, i32 2, i64 %324
  %338 = load float, float* %337, align 4
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %283) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %317, i8 -86, i64 48, i1 false)
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8weighted6HeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %284, align 8
  call void @llvm.memset.p0i8.i64(i8* align 4 %287, i8 0, i64 44, i1 false) #10
  call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* nonnull %286) #10
  call void @llvm.lifetime.start.p0i8(i64 472, i8* nonnull %288) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %288, i8 -86, i64 472, i1 false)
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8weighted6HeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %289, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %290, i8* align 8 %291, i64 48, i1 false) #10
  %339 = load i64, i64* %19, align 8
  %340 = load i64, i64* %20, align 8
  call void @_ZN3jxl8weighted5StateC2ENS0_6HeaderEmm(%"struct.jxl::weighted::State"* nonnull %13, %"struct.jxl::weighted::Header"* nonnull %14, i64 %339, i64 %340)
  %341 = load i64, i64* %20, align 8
  %342 = icmp eq i64 %341, 0
  br i1 %342, label %352, label %343

343:                                              ; preds = %321
  %344 = fmul float %334, %336
  %345 = fdiv float %344, %50
  %346 = icmp ult i32 %323, 2
  %347 = zext i1 %346 to i64
  %348 = xor i64 %347, %324
  %349 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 %324, i32 0, i32 5, i32 0, i32 0, i32 0
  %350 = icmp eq i32 %323, 1
  %351 = fmul float %338, %345
  br label %385

352:                                              ; preds = %649, %321
  %353 = load i32*, i32** %296, align 8
  %354 = icmp eq i32* %353, null
  br i1 %354, label %358, label %355

355:                                              ; preds = %352
  %356 = ptrtoint i32* %353 to i64
  store i64 %356, i64* %308, align 8
  %357 = bitcast i32* %353 to i8*
  call void @_ZdlPv(i8* %357) #13
  br label %358

358:                                              ; preds = %355, %352
  %359 = load i32*, i32** %304, align 8
  %360 = icmp eq i32* %359, null
  br i1 %360, label %364, label %361

361:                                              ; preds = %358
  %362 = ptrtoint i32* %359 to i64
  store i64 %362, i64* %310, align 8
  %363 = bitcast i32* %359 to i8*
  call void @_ZdlPv(i8* %363) #13
  br label %364

364:                                              ; preds = %361, %358
  %365 = load i32*, i32** %302, align 8
  %366 = icmp eq i32* %365, null
  br i1 %366, label %370, label %367

367:                                              ; preds = %364
  %368 = ptrtoint i32* %365 to i64
  store i64 %368, i64* %312, align 8
  %369 = bitcast i32* %365 to i8*
  call void @_ZdlPv(i8* %369) #13
  br label %370

370:                                              ; preds = %367, %364
  %371 = load i32*, i32** %300, align 8
  %372 = icmp eq i32* %371, null
  br i1 %372, label %376, label %373

373:                                              ; preds = %370
  %374 = ptrtoint i32* %371 to i64
  store i64 %374, i64* %314, align 8
  %375 = bitcast i32* %371 to i8*
  call void @_ZdlPv(i8* %375) #13
  br label %376

376:                                              ; preds = %373, %370
  %377 = load i32*, i32** %298, align 8
  %378 = icmp eq i32* %377, null
  br i1 %378, label %382, label %379

379:                                              ; preds = %376
  %380 = ptrtoint i32* %377 to i64
  store i64 %380, i64* %316, align 8
  %381 = bitcast i32* %377 to i8*
  call void @_ZdlPv(i8* %381) #13
  br label %382

382:                                              ; preds = %376, %379
  call void @llvm.lifetime.end.p0i8(i64 472, i8* nonnull %288) #10
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %283) #10
  %383 = getelementptr inbounds i32, i32* %322, i64 1
  %384 = icmp eq i32* %383, getelementptr inbounds ([3 x i32], [3 x i32]* @.ref.tmp.25, i64 1, i64 0)
  br i1 %384, label %986, label %321

385:                                              ; preds = %343, %649
  %386 = phi i64 [ 0, %343 ], [ %650, %649 ]
  %387 = load %"class.jxl::Image"*, %"class.jxl::Image"** %76, align 8
  %388 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %387, i64 %51, i32 0, i32 0, i32 0
  %389 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %388, align 8
  %390 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %389, i64 %348, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %391 = load i8*, i8** %390, align 8
  %392 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %389, i64 %348, i32 0, i32 0, i32 4
  %393 = load i64, i64* %392, align 8
  %394 = mul i64 %393, %386
  %395 = getelementptr inbounds i8, i8* %391, i64 %394
  %396 = ptrtoint i8* %395 to i64
  %397 = and i64 %396, 63
  %398 = icmp eq i64 %397, 0
  call void @llvm.assume(i1 %398) #10
  %399 = bitcast i8* %395 to i32*
  %400 = lshr i64 %393, 2
  %401 = load i64, i64* %18, align 8
  %402 = add i64 %401, %386
  %403 = load i64, i64* %292, align 8
  %404 = mul i64 %403, %402
  %405 = load i8*, i8** %349, align 8
  %406 = ptrtoint i8* %405 to i64
  %407 = and i64 %406, 63
  %408 = icmp eq i64 %407, 0
  call void @llvm.assume(i1 %408) #10
  %409 = getelementptr inbounds i8, i8* %405, i64 %404
  %410 = ptrtoint i8* %409 to i64
  %411 = and i64 %410, 63
  %412 = icmp eq i64 %411, 0
  call void @llvm.assume(i1 %412) #10
  %413 = bitcast i8* %409 to float*
  %414 = load i64, i64* %17, align 8
  %415 = getelementptr inbounds float, float* %413, i64 %414
  br i1 %350, label %416, label %525

416:                                              ; preds = %385
  %417 = load i64, i64* %19, align 8
  %418 = icmp eq i64 %417, 0
  br i1 %418, label %649, label %419

419:                                              ; preds = %416
  %420 = shl i64 %386, 32
  %421 = ashr exact i64 %420, 32
  %422 = and i64 %386, 1
  %423 = icmp ne i64 %422, 0
  br label %424

424:                                              ; preds = %419, %445
  %425 = phi i64 [ %417, %419 ], [ %523, %445 ]
  %426 = phi i64 [ 0, %419 ], [ %465, %445 ]
  %427 = getelementptr inbounds float, float* %415, i64 %426
  %428 = load float, float* %427, align 4
  %429 = fmul float %333, %428
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %305) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %305, i8 -86, i64 24, i1 false) #10
  %430 = getelementptr inbounds i32, i32* %399, i64 %426
  %431 = shl i64 %426, 32
  %432 = ashr exact i64 %431, 32
  call void @_ZN3jxl6detail7PredictILi2EEENS_16PredictionResultEPNSt3__16vectorIiNS3_9allocatorIiEEEEmPKilmmNS_9PredictorEPKNS_12MATreeLookupEPKNS_7ChannelEPNS_8weighted5StateEPl(%"struct.jxl::PredictionResult"* nonnull sret %8, %"class.std::__1::vector.156"* null, i64 %425, i32* %430, i64 %400, i64 %432, i64 %421, i32 6, %"class.jxl::MATreeLookup"* null, %"class.jxl::Channel"* null, %"struct.jxl::weighted::State"* nonnull %13, i64* null) #10
  %433 = load i64, i64* %306, align 8
  %434 = sitofp i64 %433 to float
  %435 = fsub float %429, %434
  %436 = call float @llvm.round.f32(float %435) #10
  %437 = fptosi float %436 to i32
  %438 = add i32 %437, 2
  %439 = icmp ugt i32 %438, 4
  br i1 %439, label %440, label %445

440:                                              ; preds = %424
  %441 = fmul float %435, 5.000000e-01
  %442 = call float @llvm.round.f32(float %441) #10
  %443 = fmul float %442, 2.000000e+00
  %444 = fptosi float %443 to i32
  br label %445

445:                                              ; preds = %424, %440
  %446 = phi i32 [ %444, %440 ], [ %437, %424 ]
  %447 = trunc i64 %433 to i32
  %448 = add i32 %446, %447
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %305) #10
  store i32 %448, i32* %430, align 4
  %449 = sext i32 %448 to i64
  %450 = load i64, i64* %19, align 8
  %451 = add i64 %450, 2
  %452 = select i1 %423, i64 0, i64 %451
  %453 = select i1 %423, i64 %451, i64 0
  %454 = shl nsw i64 %449, 3
  %455 = load i64, i64* %295, align 8
  %456 = sub nsw i64 %455, %454
  %457 = icmp slt i64 %456, 2147483647
  %458 = select i1 %457, i64 %456, i64 2147483647
  %459 = icmp sgt i64 %458, -2147483648
  %460 = select i1 %459, i64 %458, i64 -2147483648
  %461 = trunc i64 %460 to i32
  %462 = add i64 %452, %426
  %463 = load i32*, i32** %296, align 8
  %464 = getelementptr inbounds i32, i32* %463, i64 %462
  store i32 %461, i32* %464, align 4
  %465 = add nuw i64 %426, 1
  %466 = add i64 %453, %465
  %467 = load i64, i64* %297, align 8
  %468 = sub nsw i64 %467, %454
  %469 = sub nsw i64 0, %468
  %470 = icmp slt i64 %468, 0
  %471 = select i1 %470, i64 %469, i64 %468
  %472 = add nuw nsw i64 %471, 3
  %473 = lshr i64 %472, 3
  %474 = trunc i64 %473 to i32
  %475 = load i32*, i32** %298, align 8
  %476 = getelementptr inbounds i32, i32* %475, i64 %462
  store i32 %474, i32* %476, align 4
  %477 = load i32*, i32** %298, align 8
  %478 = getelementptr inbounds i32, i32* %477, i64 %466
  %479 = load i32, i32* %478, align 4
  %480 = add i32 %479, %474
  store i32 %480, i32* %478, align 4
  %481 = load i64, i64* %299, align 8
  %482 = sub nsw i64 %481, %454
  %483 = sub nsw i64 0, %482
  %484 = icmp slt i64 %482, 0
  %485 = select i1 %484, i64 %483, i64 %482
  %486 = add nuw nsw i64 %485, 3
  %487 = lshr i64 %486, 3
  %488 = trunc i64 %487 to i32
  %489 = load i32*, i32** %300, align 8
  %490 = getelementptr inbounds i32, i32* %489, i64 %462
  store i32 %488, i32* %490, align 4
  %491 = load i32*, i32** %300, align 8
  %492 = getelementptr inbounds i32, i32* %491, i64 %466
  %493 = load i32, i32* %492, align 4
  %494 = add i32 %493, %488
  store i32 %494, i32* %492, align 4
  %495 = load i64, i64* %301, align 8
  %496 = sub nsw i64 %495, %454
  %497 = sub nsw i64 0, %496
  %498 = icmp slt i64 %496, 0
  %499 = select i1 %498, i64 %497, i64 %496
  %500 = add nuw nsw i64 %499, 3
  %501 = lshr i64 %500, 3
  %502 = trunc i64 %501 to i32
  %503 = load i32*, i32** %302, align 8
  %504 = getelementptr inbounds i32, i32* %503, i64 %462
  store i32 %502, i32* %504, align 4
  %505 = load i32*, i32** %302, align 8
  %506 = getelementptr inbounds i32, i32* %505, i64 %466
  %507 = load i32, i32* %506, align 4
  %508 = add i32 %507, %502
  store i32 %508, i32* %506, align 4
  %509 = load i64, i64* %303, align 8
  %510 = sub nsw i64 %509, %454
  %511 = sub nsw i64 0, %510
  %512 = icmp slt i64 %510, 0
  %513 = select i1 %512, i64 %511, i64 %510
  %514 = add nuw nsw i64 %513, 3
  %515 = lshr i64 %514, 3
  %516 = trunc i64 %515 to i32
  %517 = load i32*, i32** %304, align 8
  %518 = getelementptr inbounds i32, i32* %517, i64 %462
  store i32 %516, i32* %518, align 4
  %519 = load i32*, i32** %304, align 8
  %520 = getelementptr inbounds i32, i32* %519, i64 %466
  %521 = load i32, i32* %520, align 4
  %522 = add i32 %521, %516
  store i32 %522, i32* %520, align 4
  %523 = load i64, i64* %19, align 8
  %524 = icmp ult i64 %465, %523
  br i1 %524, label %424, label %649

525:                                              ; preds = %385
  %526 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %389, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %527 = load i8*, i8** %526, align 8
  %528 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %389, i64 0, i32 0, i32 0, i32 4
  %529 = load i64, i64* %528, align 8
  %530 = mul i64 %529, %386
  %531 = getelementptr inbounds i8, i8* %527, i64 %530
  %532 = ptrtoint i8* %531 to i64
  %533 = and i64 %532, 63
  %534 = icmp eq i64 %533, 0
  call void @llvm.assume(i1 %534) #10
  %535 = bitcast i8* %531 to i32*
  %536 = load i64, i64* %19, align 8
  %537 = icmp eq i64 %536, 0
  br i1 %537, label %649, label %538

538:                                              ; preds = %525
  %539 = shl i64 %386, 32
  %540 = ashr exact i64 %539, 32
  %541 = and i64 %386, 1
  %542 = icmp ne i64 %541, 0
  br label %543

543:                                              ; preds = %538, %569
  %544 = phi i64 [ %536, %538 ], [ %647, %569 ]
  %545 = phi i64 [ 0, %538 ], [ %589, %569 ]
  %546 = getelementptr inbounds float, float* %415, i64 %545
  %547 = load float, float* %546, align 4
  %548 = getelementptr inbounds i32, i32* %535, i64 %545
  %549 = load i32, i32* %548, align 4
  %550 = sitofp i32 %549 to float
  %551 = fmul float %351, %550
  %552 = fsub float %547, %551
  %553 = fmul float %333, %552
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %293) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %293, i8 -86, i64 24, i1 false) #10
  %554 = getelementptr inbounds i32, i32* %399, i64 %545
  %555 = shl i64 %545, 32
  %556 = ashr exact i64 %555, 32
  call void @_ZN3jxl6detail7PredictILi2EEENS_16PredictionResultEPNSt3__16vectorIiNS3_9allocatorIiEEEEmPKilmmNS_9PredictorEPKNS_12MATreeLookupEPKNS_7ChannelEPNS_8weighted5StateEPl(%"struct.jxl::PredictionResult"* nonnull sret %9, %"class.std::__1::vector.156"* null, i64 %544, i32* %554, i64 %400, i64 %556, i64 %540, i32 6, %"class.jxl::MATreeLookup"* null, %"class.jxl::Channel"* null, %"struct.jxl::weighted::State"* nonnull %13, i64* null) #10
  %557 = load i64, i64* %294, align 8
  %558 = sitofp i64 %557 to float
  %559 = fsub float %553, %558
  %560 = call float @llvm.round.f32(float %559) #10
  %561 = fptosi float %560 to i32
  %562 = add i32 %561, 2
  %563 = icmp ugt i32 %562, 4
  br i1 %563, label %564, label %569

564:                                              ; preds = %543
  %565 = fmul float %559, 5.000000e-01
  %566 = call float @llvm.round.f32(float %565) #10
  %567 = fmul float %566, 2.000000e+00
  %568 = fptosi float %567 to i32
  br label %569

569:                                              ; preds = %543, %564
  %570 = phi i32 [ %568, %564 ], [ %561, %543 ]
  %571 = trunc i64 %557 to i32
  %572 = add i32 %570, %571
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %293) #10
  store i32 %572, i32* %554, align 4
  %573 = sext i32 %572 to i64
  %574 = load i64, i64* %19, align 8
  %575 = add i64 %574, 2
  %576 = select i1 %542, i64 0, i64 %575
  %577 = select i1 %542, i64 %575, i64 0
  %578 = shl nsw i64 %573, 3
  %579 = load i64, i64* %295, align 8
  %580 = sub nsw i64 %579, %578
  %581 = icmp slt i64 %580, 2147483647
  %582 = select i1 %581, i64 %580, i64 2147483647
  %583 = icmp sgt i64 %582, -2147483648
  %584 = select i1 %583, i64 %582, i64 -2147483648
  %585 = trunc i64 %584 to i32
  %586 = add i64 %576, %545
  %587 = load i32*, i32** %296, align 8
  %588 = getelementptr inbounds i32, i32* %587, i64 %586
  store i32 %585, i32* %588, align 4
  %589 = add nuw i64 %545, 1
  %590 = add i64 %577, %589
  %591 = load i64, i64* %297, align 8
  %592 = sub nsw i64 %591, %578
  %593 = sub nsw i64 0, %592
  %594 = icmp slt i64 %592, 0
  %595 = select i1 %594, i64 %593, i64 %592
  %596 = add nuw nsw i64 %595, 3
  %597 = lshr i64 %596, 3
  %598 = trunc i64 %597 to i32
  %599 = load i32*, i32** %298, align 8
  %600 = getelementptr inbounds i32, i32* %599, i64 %586
  store i32 %598, i32* %600, align 4
  %601 = load i32*, i32** %298, align 8
  %602 = getelementptr inbounds i32, i32* %601, i64 %590
  %603 = load i32, i32* %602, align 4
  %604 = add i32 %603, %598
  store i32 %604, i32* %602, align 4
  %605 = load i64, i64* %299, align 8
  %606 = sub nsw i64 %605, %578
  %607 = sub nsw i64 0, %606
  %608 = icmp slt i64 %606, 0
  %609 = select i1 %608, i64 %607, i64 %606
  %610 = add nuw nsw i64 %609, 3
  %611 = lshr i64 %610, 3
  %612 = trunc i64 %611 to i32
  %613 = load i32*, i32** %300, align 8
  %614 = getelementptr inbounds i32, i32* %613, i64 %586
  store i32 %612, i32* %614, align 4
  %615 = load i32*, i32** %300, align 8
  %616 = getelementptr inbounds i32, i32* %615, i64 %590
  %617 = load i32, i32* %616, align 4
  %618 = add i32 %617, %612
  store i32 %618, i32* %616, align 4
  %619 = load i64, i64* %301, align 8
  %620 = sub nsw i64 %619, %578
  %621 = sub nsw i64 0, %620
  %622 = icmp slt i64 %620, 0
  %623 = select i1 %622, i64 %621, i64 %620
  %624 = add nuw nsw i64 %623, 3
  %625 = lshr i64 %624, 3
  %626 = trunc i64 %625 to i32
  %627 = load i32*, i32** %302, align 8
  %628 = getelementptr inbounds i32, i32* %627, i64 %586
  store i32 %626, i32* %628, align 4
  %629 = load i32*, i32** %302, align 8
  %630 = getelementptr inbounds i32, i32* %629, i64 %590
  %631 = load i32, i32* %630, align 4
  %632 = add i32 %631, %626
  store i32 %632, i32* %630, align 4
  %633 = load i64, i64* %303, align 8
  %634 = sub nsw i64 %633, %578
  %635 = sub nsw i64 0, %634
  %636 = icmp slt i64 %634, 0
  %637 = select i1 %636, i64 %635, i64 %634
  %638 = add nuw nsw i64 %637, 3
  %639 = lshr i64 %638, 3
  %640 = trunc i64 %639 to i32
  %641 = load i32*, i32** %304, align 8
  %642 = getelementptr inbounds i32, i32* %641, i64 %586
  store i32 %640, i32* %642, align 4
  %643 = load i32*, i32** %304, align 8
  %644 = getelementptr inbounds i32, i32* %643, i64 %590
  %645 = load i32, i32* %644, align 4
  %646 = add i32 %645, %640
  store i32 %646, i32* %644, align 4
  %647 = load i64, i64* %19, align 8
  %648 = icmp ult i64 %589, %647
  br i1 %648, label %543, label %649

649:                                              ; preds = %569, %445, %416, %525
  %650 = add nuw i64 %386, 1
  %651 = load i64, i64* %20, align 8
  %652 = icmp ult i64 %650, %651
  br i1 %652, label %385, label %352

653:                                              ; preds = %275
  br i1 %276, label %661, label %654

654:                                              ; preds = %653
  %655 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %4, i64 0, i32 0, i32 1, i32 7, i32 2
  %656 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %4, i64 0, i32 0, i32 1, i32 7, i32 3
  %657 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %4, i64 0, i32 0, i32 5, i32 8
  %658 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %4, i64 0, i32 0, i32 5, i32 5
  %659 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %4, i64 0, i32 0, i32 5, i32 3
  %660 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 4
  br label %783

661:                                              ; preds = %653
  %662 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %4, i64 0, i32 0, i32 5, i32 8
  %663 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %4, i64 0, i32 0, i32 5, i32 5
  %664 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %4, i64 0, i32 0, i32 5, i32 3
  %665 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %4, i64 0, i32 0, i32 5, i32 6
  %666 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 4
  br label %667

667:                                              ; preds = %661, %698
  %668 = phi i64 [ %74, %661 ], [ %699, %698 ]
  %669 = phi i64 [ %74, %661 ], [ %700, %698 ]
  %670 = phi i64 [ %75, %661 ], [ %701, %698 ]
  %671 = phi i32* [ getelementptr inbounds ([3 x i32], [3 x i32]* @.ref.tmp.26, i64 0, i64 0), %661 ], [ %702, %698 ]
  %672 = load i32, i32* %671, align 4
  %673 = sext i32 %672 to i64
  %674 = load %"class.jxl::DequantMatrices"*, %"class.jxl::DequantMatrices"** %662, align 8
  %675 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %674, i64 0, i32 4, i64 %673
  %676 = load float, float* %675, align 4
  %677 = load float, float* %663, align 4
  %678 = load i32, i32* %664, align 4
  %679 = sitofp i32 %678 to float
  %680 = fmul float %677, %679
  %681 = fmul float %676, %680
  %682 = fmul float %681, %50
  %683 = icmp eq i64 %670, 0
  br i1 %683, label %698, label %684

684:                                              ; preds = %667
  %685 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %4, i64 0, i32 0, i32 8, i32 2, i64 %673
  %686 = load float, float* %685, align 4
  %687 = load float, float* %665, align 8
  %688 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %674, i64 0, i32 3, i64 1
  %689 = load float, float* %688, align 4
  %690 = fmul float %687, %689
  %691 = fdiv float %690, %50
  %692 = icmp ult i32 %672, 2
  %693 = zext i1 %692 to i64
  %694 = xor i64 %693, %673
  %695 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 %673, i32 0, i32 5, i32 0, i32 0, i32 0
  %696 = icmp eq i32 %672, 1
  %697 = fmul float %686, %691
  br label %704

698:                                              ; preds = %777, %667
  %699 = phi i64 [ %668, %667 ], [ %778, %777 ]
  %700 = phi i64 [ %669, %667 ], [ %779, %777 ]
  %701 = phi i64 [ 0, %667 ], [ %781, %777 ]
  %702 = getelementptr inbounds i32, i32* %671, i64 1
  %703 = icmp eq i32* %702, getelementptr inbounds ([3 x i32], [3 x i32]* @.ref.tmp.26, i64 1, i64 0)
  br i1 %703, label %986, label %667

704:                                              ; preds = %684, %777
  %705 = phi i64 [ %668, %684 ], [ %778, %777 ]
  %706 = phi i64 [ %669, %684 ], [ %779, %777 ]
  %707 = phi i64 [ 0, %684 ], [ %780, %777 ]
  %708 = load %"class.jxl::Image"*, %"class.jxl::Image"** %76, align 8
  %709 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %708, i64 %51, i32 0, i32 0, i32 0
  %710 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %709, align 8
  %711 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %710, i64 %694, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %712 = load i8*, i8** %711, align 8
  %713 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %710, i64 %694, i32 0, i32 0, i32 4
  %714 = load i64, i64* %713, align 8
  %715 = mul i64 %714, %707
  %716 = getelementptr inbounds i8, i8* %712, i64 %715
  %717 = ptrtoint i8* %716 to i64
  %718 = and i64 %717, 63
  %719 = icmp eq i64 %718, 0
  call void @llvm.assume(i1 %719) #10
  %720 = bitcast i8* %716 to i32*
  %721 = load i64, i64* %18, align 8
  %722 = add i64 %721, %707
  %723 = load i64, i64* %666, align 8
  %724 = mul i64 %723, %722
  %725 = load i8*, i8** %695, align 8
  %726 = ptrtoint i8* %725 to i64
  %727 = and i64 %726, 63
  %728 = icmp eq i64 %727, 0
  call void @llvm.assume(i1 %728) #10
  %729 = getelementptr inbounds i8, i8* %725, i64 %724
  %730 = ptrtoint i8* %729 to i64
  %731 = and i64 %730, 63
  %732 = icmp eq i64 %731, 0
  call void @llvm.assume(i1 %732) #10
  %733 = bitcast i8* %729 to float*
  %734 = load i64, i64* %17, align 8
  %735 = getelementptr inbounds float, float* %733, i64 %734
  br i1 %696, label %736, label %749

736:                                              ; preds = %704
  %737 = icmp eq i64 %705, 0
  br i1 %737, label %777, label %738

738:                                              ; preds = %736, %738
  %739 = phi i64 [ %746, %738 ], [ 0, %736 ]
  %740 = getelementptr inbounds float, float* %735, i64 %739
  %741 = load float, float* %740, align 4
  %742 = fmul float %682, %741
  %743 = call float @llvm.round.f32(float %742)
  %744 = fptosi float %743 to i32
  %745 = getelementptr inbounds i32, i32* %720, i64 %739
  store i32 %744, i32* %745, align 4
  %746 = add nuw i64 %739, 1
  %747 = load i64, i64* %19, align 8
  %748 = icmp ult i64 %746, %747
  br i1 %748, label %738, label %777

749:                                              ; preds = %704
  %750 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %710, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %751 = load i8*, i8** %750, align 8
  %752 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %710, i64 0, i32 0, i32 0, i32 4
  %753 = load i64, i64* %752, align 8
  %754 = mul i64 %753, %707
  %755 = getelementptr inbounds i8, i8* %751, i64 %754
  %756 = ptrtoint i8* %755 to i64
  %757 = and i64 %756, 63
  %758 = icmp eq i64 %757, 0
  call void @llvm.assume(i1 %758) #10
  %759 = bitcast i8* %755 to i32*
  %760 = icmp eq i64 %706, 0
  br i1 %760, label %777, label %761

761:                                              ; preds = %749, %761
  %762 = phi i64 [ %774, %761 ], [ 0, %749 ]
  %763 = getelementptr inbounds float, float* %735, i64 %762
  %764 = load float, float* %763, align 4
  %765 = getelementptr inbounds i32, i32* %759, i64 %762
  %766 = load i32, i32* %765, align 4
  %767 = sitofp i32 %766 to float
  %768 = fmul float %697, %767
  %769 = fsub float %764, %768
  %770 = fmul float %682, %769
  %771 = call float @llvm.round.f32(float %770)
  %772 = fptosi float %771 to i32
  %773 = getelementptr inbounds i32, i32* %720, i64 %762
  store i32 %772, i32* %773, align 4
  %774 = add nuw i64 %762, 1
  %775 = load i64, i64* %19, align 8
  %776 = icmp ult i64 %774, %775
  br i1 %776, label %761, label %777

777:                                              ; preds = %761, %738, %736, %749
  %778 = phi i64 [ 0, %736 ], [ %705, %749 ], [ %747, %738 ], [ %775, %761 ]
  %779 = phi i64 [ 0, %736 ], [ 0, %749 ], [ %747, %738 ], [ %775, %761 ]
  %780 = add nuw i64 %707, 1
  %781 = load i64, i64* %20, align 8
  %782 = icmp ult i64 %780, %781
  br i1 %782, label %704, label %698

783:                                              ; preds = %854, %654
  %784 = phi i64 [ %75, %654 ], [ %856, %854 ]
  %785 = phi i64 [ %74, %654 ], [ %855, %854 ]
  %786 = phi i32* [ getelementptr inbounds ([3 x i32], [3 x i32]* @.ref.tmp.27, i64 0, i64 0), %654 ], [ %852, %854 ]
  %787 = load i32, i32* %786, align 4
  %788 = sext i32 %787 to i64
  %789 = load i64, i64* %17, align 8
  %790 = load i8, i8* %655, align 4
  %791 = zext i8 %790 to i64
  %792 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %4, i64 0, i32 0, i32 1, i32 7, i32 1, i64 %788
  %793 = load i32, i32* %792, align 4
  %794 = zext i32 %793 to i64
  %795 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE.const, i64 0, i64 %794
  %796 = load i8, i8* %795, align 1
  %797 = zext i8 %796 to i64
  %798 = sub nsw i64 %791, %797
  %799 = lshr i64 %789, %798
  %800 = load i64, i64* %18, align 8
  %801 = load i8, i8* %656, align 1
  %802 = zext i8 %801 to i64
  %803 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE.const, i64 0, i64 %794
  %804 = load i8, i8* %803, align 1
  %805 = zext i8 %804 to i64
  %806 = sub nsw i64 %802, %805
  %807 = lshr i64 %800, %806
  %808 = lshr i64 %785, %798
  %809 = lshr i64 %784, %806
  %810 = load %"class.jxl::DequantMatrices"*, %"class.jxl::DequantMatrices"** %657, align 8
  %811 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %810, i64 0, i32 4, i64 %788
  %812 = load float, float* %811, align 4
  %813 = load float, float* %658, align 4
  %814 = load i32, i32* %659, align 4
  %815 = sitofp i32 %814 to float
  %816 = fmul float %813, %815
  %817 = fmul float %812, %816
  %818 = fmul float %817, %50
  %819 = load %"class.jxl::Image"*, %"class.jxl::Image"** %76, align 8
  %820 = icmp ult i32 %787, 2
  %821 = zext i1 %820 to i64
  %822 = xor i64 %821, %788
  %823 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %819, i64 %51, i32 0, i32 0, i32 0
  %824 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %823, align 8
  %825 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %824, i64 %822
  %826 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %824, i64 %822, i32 1
  store i64 %808, i64* %826, align 8
  %827 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %824, i64 %822, i32 2
  store i64 %809, i64* %827, align 8
  call void @_ZN3jxl7Channel6resizeEi(%"class.jxl::Channel"* %825, i32 0)
  %828 = icmp eq i64 %809, 0
  br i1 %828, label %851, label %829

829:                                              ; preds = %783
  %830 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %824, i64 %822, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %831 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %824, i64 %822, i32 0, i32 0, i32 4
  %832 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 %788, i32 0, i32 5, i32 0, i32 0, i32 0
  %833 = icmp eq i64 %808, 0
  %834 = shl i64 %808, 2
  %835 = shl nsw i64 %799, 2
  %836 = add i64 %834, %835
  %837 = add i64 %808, -4
  %838 = lshr i64 %837, 2
  %839 = add nuw nsw i64 %838, 1
  %840 = icmp ult i64 %808, 4
  %841 = and i64 %808, -4
  %842 = insertelement <4 x float> undef, float %818, i32 0
  %843 = shufflevector <4 x float> %842, <4 x float> undef, <4 x i32> zeroinitializer
  %844 = and i64 %839, 3
  %845 = icmp ult i64 %837, 12
  %846 = sub nsw i64 %839, %844
  %847 = icmp eq i64 %844, 0
  %848 = icmp eq i64 %808, %841
  %849 = and i64 %808, 1
  %850 = icmp eq i64 %849, 0
  br label %857

851:                                              ; preds = %966, %783
  %852 = getelementptr inbounds i32, i32* %786, i64 1
  %853 = icmp eq i32* %852, getelementptr inbounds ([3 x i32], [3 x i32]* @.ref.tmp.27, i64 1, i64 0)
  br i1 %853, label %986, label %854

854:                                              ; preds = %851
  %855 = load i64, i64* %19, align 8
  %856 = load i64, i64* %20, align 8
  br label %783

857:                                              ; preds = %966, %829
  %858 = phi i64 [ 0, %829 ], [ %967, %966 ]
  %859 = add i64 %807, %858
  %860 = load i8*, i8** %830, align 8
  %861 = load i64, i64* %831, align 8
  %862 = mul i64 %861, %858
  %863 = getelementptr inbounds i8, i8* %860, i64 %862
  %864 = ptrtoint i8* %863 to i64
  %865 = and i64 %864, 63
  %866 = icmp eq i64 %865, 0
  call void @llvm.assume(i1 %866) #10
  %867 = bitcast i8* %863 to i32*
  %868 = add i64 %858, %807
  %869 = load i64, i64* %660, align 8
  %870 = mul i64 %869, %868
  %871 = load i8*, i8** %832, align 8
  %872 = ptrtoint i8* %871 to i64
  %873 = and i64 %872, 63
  %874 = icmp eq i64 %873, 0
  call void @llvm.assume(i1 %874) #10
  %875 = getelementptr inbounds i8, i8* %871, i64 %870
  %876 = ptrtoint i8* %875 to i64
  %877 = and i64 %876, 63
  %878 = icmp eq i64 %877, 0
  call void @llvm.assume(i1 %878) #10
  %879 = bitcast i8* %875 to float*
  %880 = getelementptr inbounds float, float* %879, i64 %799
  br i1 %833, label %966, label %881

881:                                              ; preds = %857
  br i1 %840, label %882, label %896

882:                                              ; preds = %965, %896, %881
  %883 = phi i64 [ 0, %896 ], [ 0, %881 ], [ %841, %965 ]
  br i1 %850, label %892, label %884

884:                                              ; preds = %882
  %885 = getelementptr inbounds float, float* %880, i64 %883
  %886 = load float, float* %885, align 4
  %887 = fmul float %818, %886
  %888 = call float @llvm.round.f32(float %887)
  %889 = fptosi float %888 to i32
  %890 = getelementptr inbounds i32, i32* %867, i64 %883
  store i32 %889, i32* %890, align 16
  %891 = or i64 %883, 1
  br label %892

892:                                              ; preds = %884, %882
  %893 = phi i64 [ %891, %884 ], [ %883, %882 ]
  %894 = or i64 %883, 1
  %895 = icmp eq i64 %808, %894
  br i1 %895, label %966, label %969

896:                                              ; preds = %881
  %897 = getelementptr i8, i8* %860, i64 %834
  %898 = getelementptr i8, i8* %897, i64 %862
  %899 = getelementptr i8, i8* %871, i64 %835
  %900 = mul i64 %869, %859
  %901 = getelementptr i8, i8* %899, i64 %900
  %902 = getelementptr i8, i8* %871, i64 %836
  %903 = getelementptr i8, i8* %902, i64 %900
  %904 = icmp ult i8* %863, %903
  %905 = icmp ult i8* %901, %898
  %906 = and i1 %904, %905
  br i1 %906, label %882, label %907

907:                                              ; preds = %896
  br i1 %845, label %949, label %908

908:                                              ; preds = %907, %908
  %909 = phi i64 [ %946, %908 ], [ 0, %907 ]
  %910 = phi i64 [ %947, %908 ], [ %846, %907 ]
  %911 = getelementptr inbounds float, float* %880, i64 %909
  %912 = bitcast float* %911 to <4 x float>*
  %913 = load <4 x float>, <4 x float>* %912, align 4, !alias.scope !56
  %914 = fmul <4 x float> %843, %913
  %915 = call <4 x float> @llvm.round.v4f32(<4 x float> %914)
  %916 = fptosi <4 x float> %915 to <4 x i32>
  %917 = getelementptr inbounds i32, i32* %867, i64 %909
  %918 = bitcast i32* %917 to <4 x i32>*
  store <4 x i32> %916, <4 x i32>* %918, align 64, !alias.scope !59, !noalias !56
  %919 = or i64 %909, 4
  %920 = getelementptr inbounds float, float* %880, i64 %919
  %921 = bitcast float* %920 to <4 x float>*
  %922 = load <4 x float>, <4 x float>* %921, align 4, !alias.scope !56
  %923 = fmul <4 x float> %843, %922
  %924 = call <4 x float> @llvm.round.v4f32(<4 x float> %923)
  %925 = fptosi <4 x float> %924 to <4 x i32>
  %926 = getelementptr inbounds i32, i32* %867, i64 %919
  %927 = bitcast i32* %926 to <4 x i32>*
  store <4 x i32> %925, <4 x i32>* %927, align 16, !alias.scope !59, !noalias !56
  %928 = or i64 %909, 8
  %929 = getelementptr inbounds float, float* %880, i64 %928
  %930 = bitcast float* %929 to <4 x float>*
  %931 = load <4 x float>, <4 x float>* %930, align 4, !alias.scope !56
  %932 = fmul <4 x float> %843, %931
  %933 = call <4 x float> @llvm.round.v4f32(<4 x float> %932)
  %934 = fptosi <4 x float> %933 to <4 x i32>
  %935 = getelementptr inbounds i32, i32* %867, i64 %928
  %936 = bitcast i32* %935 to <4 x i32>*
  store <4 x i32> %934, <4 x i32>* %936, align 32, !alias.scope !59, !noalias !56
  %937 = or i64 %909, 12
  %938 = getelementptr inbounds float, float* %880, i64 %937
  %939 = bitcast float* %938 to <4 x float>*
  %940 = load <4 x float>, <4 x float>* %939, align 4, !alias.scope !56
  %941 = fmul <4 x float> %843, %940
  %942 = call <4 x float> @llvm.round.v4f32(<4 x float> %941)
  %943 = fptosi <4 x float> %942 to <4 x i32>
  %944 = getelementptr inbounds i32, i32* %867, i64 %937
  %945 = bitcast i32* %944 to <4 x i32>*
  store <4 x i32> %943, <4 x i32>* %945, align 16, !alias.scope !59, !noalias !56
  %946 = add i64 %909, 16
  %947 = add i64 %910, -4
  %948 = icmp eq i64 %947, 0
  br i1 %948, label %949, label %908, !llvm.loop !61

949:                                              ; preds = %908, %907
  %950 = phi i64 [ 0, %907 ], [ %946, %908 ]
  br i1 %847, label %965, label %951

951:                                              ; preds = %949, %951
  %952 = phi i64 [ %962, %951 ], [ %950, %949 ]
  %953 = phi i64 [ %963, %951 ], [ %844, %949 ]
  %954 = getelementptr inbounds float, float* %880, i64 %952
  %955 = bitcast float* %954 to <4 x float>*
  %956 = load <4 x float>, <4 x float>* %955, align 4, !alias.scope !56
  %957 = fmul <4 x float> %843, %956
  %958 = call <4 x float> @llvm.round.v4f32(<4 x float> %957)
  %959 = fptosi <4 x float> %958 to <4 x i32>
  %960 = getelementptr inbounds i32, i32* %867, i64 %952
  %961 = bitcast i32* %960 to <4 x i32>*
  store <4 x i32> %959, <4 x i32>* %961, align 16, !alias.scope !59, !noalias !56
  %962 = add i64 %952, 4
  %963 = add i64 %953, -1
  %964 = icmp eq i64 %963, 0
  br i1 %964, label %965, label %951, !llvm.loop !62

965:                                              ; preds = %951, %949
  br i1 %848, label %966, label %882

966:                                              ; preds = %892, %969, %965, %857
  %967 = add nuw i64 %858, 1
  %968 = icmp eq i64 %967, %809
  br i1 %968, label %851, label %857

969:                                              ; preds = %892, %969
  %970 = phi i64 [ %984, %969 ], [ %893, %892 ]
  %971 = getelementptr inbounds float, float* %880, i64 %970
  %972 = load float, float* %971, align 4
  %973 = fmul float %818, %972
  %974 = call float @llvm.round.f32(float %973)
  %975 = fptosi float %974 to i32
  %976 = getelementptr inbounds i32, i32* %867, i64 %970
  store i32 %975, i32* %976, align 4
  %977 = add nuw i64 %970, 1
  %978 = getelementptr inbounds float, float* %880, i64 %977
  %979 = load float, float* %978, align 4
  %980 = fmul float %818, %979
  %981 = call float @llvm.round.f32(float %980)
  %982 = fptosi float %981 to i32
  %983 = getelementptr inbounds i32, i32* %867, i64 %977
  store i32 %982, i32* %983, align 4
  %984 = add nuw i64 %970, 2
  %985 = icmp eq i64 %984, %808
  br i1 %985, label %966, label %969, !llvm.loop !63

986:                                              ; preds = %851, %698, %382, %139
  %987 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %4, i64 0, i32 0, i32 13
  %988 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %4, i64 0, i32 0, i32 12
  %989 = load %"class.jxl::Image"*, %"class.jxl::Image"** %76, align 8
  %990 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %989, i64 %51
  %991 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %4, i64 0, i32 0, i32 5, i32 0, i64 0
  %992 = fdiv float 1.000000e+00, %50
  %993 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %4, i64 0, i32 0, i32 8, i32 2, i64 0
  %994 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %15, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl22YCbCrChromaSubsamplingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %994, align 8
  %995 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %15, i64 0, i32 1
  %996 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %4, i64 0, i32 0, i32 1, i32 7, i32 1
  %997 = bitcast [3 x i32]* %995 to i8*
  %998 = bitcast [3 x i32]* %996 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %997, i8* align 8 %998, i64 14, i1 false) #10
  %999 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %4, i64 0, i32 0, i32 15
  call void @_ZN3jxl9DequantDCERKNS_4RectEPNS_6Image3IfEEPNS_5PlaneIhEERKNS_5ImageEPKffSD_NS_22YCbCrChromaSubsamplingERKNS_11BlockCtxMapE(%"class.jxl::Rect"* nonnull dereferenceable(32) %10, %"class.jxl::Image3"* %987, %"class.jxl::Plane.137"* %988, %"class.jxl::Image"* dereferenceable(104) %990, float* %991, float %992, float* %993, %"struct.jxl::YCbCrChromaSubsampling"* nonnull %15, %"struct.jxl::BlockCtxMap"* dereferenceable(136) %999) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %16) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl8weighted5StateC2ENS0_6HeaderEmm(%"struct.jxl::weighted::State"*, %"struct.jxl::weighted::Header"*, i64, i64) unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %0, i64 0, i32 3
  %6 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %0, i64 0, i32 4, i32 0, i32 0
  %7 = bitcast %"struct.jxl::weighted::State"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 160, i1 false)
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8weighted6HeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %8 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %0, i64 0, i32 4, i32 1
  %9 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %1, i64 0, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 48, i1 false) #10
  %10 = shl i64 %2, 1
  %11 = add i64 %10, 4
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %28, label %20

13:                                               ; preds = %89
  %14 = sub i64 %11, %96
  tail call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.156"* %5, i64 %14) #10
  br label %19

15:                                               ; preds = %89
  %16 = icmp ult i64 %11, %96
  br i1 %16, label %17, label %19

17:                                               ; preds = %15
  %18 = getelementptr inbounds i32, i32* %98, i64 %11
  store i32* %18, i32** %90, align 8
  br label %19

19:                                               ; preds = %13, %15, %17
  br label %37

20:                                               ; preds = %4
  %21 = getelementptr %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %0, i64 0, i32 2, i64 0
  tail call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector.40"* %21, i64 %11) #10
  %22 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %0, i64 0, i32 2, i64 1, i32 0, i32 1
  %23 = bitcast i32** %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %0, i64 0, i32 2, i64 1
  %26 = bitcast %"class.std::__1::vector.40"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  br label %28

28:                                               ; preds = %4, %20
  %29 = phi i64 [ %27, %20 ], [ 0, %4 ]
  %30 = phi i64 [ %24, %20 ], [ 0, %4 ]
  %31 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %0, i64 0, i32 2, i64 1, i32 0, i32 1
  %32 = sub i64 %30, %29
  %33 = ashr exact i64 %32, 2
  %34 = icmp ugt i64 %11, %33
  %35 = inttoptr i64 %29 to i32*
  br i1 %34, label %52, label %48

36:                                               ; preds = %37
  ret void

37:                                               ; preds = %37, %19
  %38 = phi i64 [ 0, %19 ], [ %43, %37 ]
  %39 = or i64 %38, 1
  %40 = trunc i64 %39 to i32
  %41 = udiv i32 16777216, %40
  %42 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %0, i64 0, i32 5, i64 %38
  store i32 %41, i32* %42, align 4
  %43 = add nuw nsw i64 %38, 2
  %44 = trunc i64 %43 to i32
  %45 = udiv i32 16777216, %44
  %46 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %0, i64 0, i32 5, i64 %39
  store i32 %45, i32* %46, align 4
  %47 = icmp eq i64 %43, 64
  br i1 %47, label %36, label %37

48:                                               ; preds = %28
  %49 = icmp ult i64 %11, %33
  br i1 %49, label %50, label %55

50:                                               ; preds = %48
  %51 = getelementptr inbounds i32, i32* %35, i64 %11
  store i32* %51, i32** %31, align 8
  br label %55

52:                                               ; preds = %28
  %53 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %0, i64 0, i32 2, i64 1
  %54 = sub i64 %11, %33
  tail call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector.40"* %53, i64 %54) #10
  br label %55

55:                                               ; preds = %52, %50, %48
  %56 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %0, i64 0, i32 2, i64 2
  %57 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %0, i64 0, i32 2, i64 2, i32 0, i32 1
  %58 = bitcast i32** %57 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = bitcast %"class.std::__1::vector.40"* %56 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = sub i64 %59, %61
  %63 = ashr exact i64 %62, 2
  %64 = icmp ugt i64 %11, %63
  %65 = inttoptr i64 %61 to i32*
  br i1 %64, label %70, label %66

66:                                               ; preds = %55
  %67 = icmp ult i64 %11, %63
  br i1 %67, label %68, label %72

68:                                               ; preds = %66
  %69 = getelementptr inbounds i32, i32* %65, i64 %11
  store i32* %69, i32** %57, align 8
  br label %72

70:                                               ; preds = %55
  %71 = sub i64 %11, %63
  tail call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector.40"* %56, i64 %71) #10
  br label %72

72:                                               ; preds = %70, %68, %66
  %73 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %0, i64 0, i32 2, i64 3
  %74 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %0, i64 0, i32 2, i64 3, i32 0, i32 1
  %75 = bitcast i32** %74 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = bitcast %"class.std::__1::vector.40"* %73 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = sub i64 %76, %78
  %80 = ashr exact i64 %79, 2
  %81 = icmp ugt i64 %11, %80
  %82 = inttoptr i64 %78 to i32*
  br i1 %81, label %87, label %83

83:                                               ; preds = %72
  %84 = icmp ult i64 %11, %80
  br i1 %84, label %85, label %89

85:                                               ; preds = %83
  %86 = getelementptr inbounds i32, i32* %82, i64 %11
  store i32* %86, i32** %74, align 8
  br label %89

87:                                               ; preds = %72
  %88 = sub i64 %11, %80
  tail call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector.40"* %73, i64 %88) #10
  br label %89

89:                                               ; preds = %87, %85, %83
  %90 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %0, i64 0, i32 3, i32 0, i32 1
  %91 = bitcast i32** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = bitcast %"class.std::__1::vector.156"* %5 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = sub i64 %92, %94
  %96 = ashr exact i64 %95, 2
  %97 = icmp ugt i64 %11, %96
  %98 = inttoptr i64 %94 to i32*
  br i1 %97, label %13, label %15
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl7Channel6resizeEi(%"class.jxl::Channel"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.jxl::Plane", align 8
  %4 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %0, i64 0, i32 0, i32 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %0, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %8, %6
  br i1 %9, label %13, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %0, i64 0, i32 2
  %12 = load i64, i64* %11, align 8
  br label %20

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %0, i64 0, i32 2
  %18 = load i64, i64* %17, align 8
  %19 = icmp eq i64 %18, %16
  br i1 %19, label %190, label %20

20:                                               ; preds = %10, %13
  %21 = phi i64 [ %12, %10 ], [ %18, %13 ]
  %22 = bitcast %"class.jxl::Plane"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %22) #10
  %23 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %3, i64 0, i32 0, i32 0
  %24 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %3, i64 0, i32 0, i32 1
  %25 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %3, i64 0, i32 0, i32 4
  %26 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %3, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %27 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %0, i64 0, i32 2
  %28 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %3, i64 0, i32 0
  %29 = bitcast %"class.jxl::Plane"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %29, i8 -86, i64 32, i1 false)
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %28, i64 %8, i64 %21, i64 4) #10
  %30 = load i32, i32* %4, align 8
  %31 = icmp eq i32 %30, 0
  %32 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %0, i64 0, i32 0, i32 0, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = icmp eq i32 %33, 0
  br i1 %31, label %35, label %36

35:                                               ; preds = %20
  br i1 %34, label %123, label %37

36:                                               ; preds = %20
  br i1 %34, label %91, label %37

37:                                               ; preds = %35, %36
  %38 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %0, i64 0, i32 0, i32 0, i32 1
  %39 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %0, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %40 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %0, i64 0, i32 0, i32 0, i32 4
  br label %41

41:                                               ; preds = %37, %86
  %42 = phi i64 [ 0, %37 ], [ %87, %86 ]
  %43 = load i64, i64* %27, align 8
  %44 = icmp ult i64 %42, %43
  br i1 %44, label %45, label %91

45:                                               ; preds = %41
  %46 = load i8*, i8** %39, align 8
  %47 = load i64, i64* %40, align 8
  %48 = mul i64 %47, %42
  %49 = getelementptr inbounds i8, i8* %46, i64 %48
  %50 = ptrtoint i8* %49 to i64
  %51 = and i64 %50, 63
  %52 = icmp eq i64 %51, 0
  call void @llvm.assume(i1 %52) #10
  %53 = bitcast i8* %49 to i32*
  %54 = load i8*, i8** %26, align 8
  %55 = load i64, i64* %25, align 8
  %56 = mul i64 %55, %42
  %57 = getelementptr inbounds i8, i8* %54, i64 %56
  %58 = ptrtoint i8* %57 to i64
  %59 = and i64 %58, 63
  %60 = icmp eq i64 %59, 0
  call void @llvm.assume(i1 %60) #10
  %61 = bitcast i8* %57 to i32*
  %62 = load i32, i32* %4, align 8
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %76, label %64

64:                                               ; preds = %45, %68
  %65 = phi i64 [ %72, %68 ], [ 0, %45 ]
  %66 = load i64, i64* %7, align 8
  %67 = icmp ult i64 %65, %66
  br i1 %67, label %68, label %76

68:                                               ; preds = %64
  %69 = getelementptr inbounds i32, i32* %53, i64 %65
  %70 = load i32, i32* %69, align 4
  %71 = getelementptr inbounds i32, i32* %61, i64 %65
  store i32 %70, i32* %71, align 4
  %72 = add nuw nsw i64 %65, 1
  %73 = load i32, i32* %4, align 8
  %74 = zext i32 %73 to i64
  %75 = icmp ult i64 %72, %74
  br i1 %75, label %64, label %76

76:                                               ; preds = %64, %68, %45
  %77 = phi i64 [ 0, %45 ], [ %72, %68 ], [ %65, %64 ]
  %78 = load i64, i64* %7, align 8
  %79 = icmp ult i64 %77, %78
  br i1 %79, label %80, label %86

80:                                               ; preds = %76, %80
  %81 = phi i64 [ %83, %80 ], [ %77, %76 ]
  %82 = getelementptr inbounds i32, i32* %61, i64 %81
  store i32 %1, i32* %82, align 4
  %83 = add nuw i64 %81, 1
  %84 = load i64, i64* %7, align 8
  %85 = icmp ult i64 %83, %84
  br i1 %85, label %80, label %86

86:                                               ; preds = %80, %76
  %87 = add nuw nsw i64 %42, 1
  %88 = load i32, i32* %38, align 4
  %89 = zext i32 %88 to i64
  %90 = icmp ult i64 %87, %89
  br i1 %90, label %41, label %91

91:                                               ; preds = %41, %86, %36
  %92 = phi i64 [ 0, %36 ], [ %87, %86 ], [ %42, %41 ]
  %93 = load i64, i64* %27, align 8
  %94 = icmp ult i64 %92, %93
  br i1 %94, label %95, label %173

95:                                               ; preds = %91
  %96 = load i64, i64* %7, align 8
  br label %97

97:                                               ; preds = %95, %112
  %98 = phi i64 [ %113, %112 ], [ %93, %95 ]
  %99 = phi i64 [ %114, %112 ], [ %96, %95 ]
  %100 = phi i64 [ %115, %112 ], [ %92, %95 ]
  %101 = load i8*, i8** %26, align 8
  %102 = load i64, i64* %25, align 8
  %103 = mul i64 %102, %100
  %104 = getelementptr inbounds i8, i8* %101, i64 %103
  %105 = ptrtoint i8* %104 to i64
  %106 = and i64 %105, 63
  %107 = icmp eq i64 %106, 0
  call void @llvm.assume(i1 %107) #10
  %108 = bitcast i8* %104 to i32*
  %109 = icmp eq i64 %99, 0
  br i1 %109, label %112, label %117

110:                                              ; preds = %117
  %111 = load i64, i64* %27, align 8
  br label %112

112:                                              ; preds = %110, %97
  %113 = phi i64 [ %111, %110 ], [ %98, %97 ]
  %114 = phi i64 [ %121, %110 ], [ 0, %97 ]
  %115 = add nuw i64 %100, 1
  %116 = icmp ult i64 %115, %113
  br i1 %116, label %97, label %173

117:                                              ; preds = %97, %117
  %118 = phi i64 [ %120, %117 ], [ 0, %97 ]
  %119 = getelementptr inbounds i32, i32* %108, i64 %118
  store i32 %1, i32* %119, align 4
  %120 = add nuw i64 %118, 1
  %121 = load i64, i64* %7, align 8
  %122 = icmp ult i64 %120, %121
  br i1 %122, label %117, label %110

123:                                              ; preds = %35
  %124 = load i64, i64* %7, align 8
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %173, label %126

126:                                              ; preds = %123
  %127 = load i64, i64* %27, align 8
  %128 = icmp ne i64 %127, 0
  %129 = icmp eq i32 %1, 0
  %130 = and i1 %129, %128
  br i1 %130, label %131, label %138

131:                                              ; preds = %126
  %132 = load i64, i64* %25, align 8
  %133 = load i8*, i8** %26, align 8
  %134 = ptrtoint i8* %133 to i64
  %135 = and i64 %134, 63
  %136 = icmp eq i64 %135, 0
  call void @llvm.assume(i1 %136) #10
  %137 = mul i64 %132, %127
  call void @llvm.memset.p0i8.i64(i8* align 64 %133, i8 0, i64 %137, i1 false)
  br label %173

138:                                              ; preds = %126
  %139 = icmp eq i64 %127, 0
  br i1 %139, label %173, label %140

140:                                              ; preds = %138
  %141 = load i32, i32* %24, align 4
  %142 = icmp eq i32 %141, 0
  br i1 %142, label %173, label %143

143:                                              ; preds = %140
  %144 = load i32, i32* %23, align 8
  br label %145

145:                                              ; preds = %160, %143
  %146 = phi i32 [ %141, %143 ], [ %161, %160 ]
  %147 = phi i32 [ %144, %143 ], [ %162, %160 ]
  %148 = phi i64 [ 0, %143 ], [ %163, %160 ]
  %149 = load i8*, i8** %26, align 8
  %150 = load i64, i64* %25, align 8
  %151 = mul i64 %150, %148
  %152 = getelementptr inbounds i8, i8* %149, i64 %151
  %153 = ptrtoint i8* %152 to i64
  %154 = and i64 %153, 63
  %155 = icmp eq i64 %154, 0
  call void @llvm.assume(i1 %155) #10
  %156 = bitcast i8* %152 to i32*
  %157 = icmp eq i32 %147, 0
  br i1 %157, label %160, label %166

158:                                              ; preds = %166
  %159 = load i32, i32* %24, align 4
  br label %160

160:                                              ; preds = %158, %145
  %161 = phi i32 [ %159, %158 ], [ %146, %145 ]
  %162 = phi i32 [ %170, %158 ], [ 0, %145 ]
  %163 = add nuw nsw i64 %148, 1
  %164 = zext i32 %161 to i64
  %165 = icmp ult i64 %163, %164
  br i1 %165, label %145, label %173

166:                                              ; preds = %145, %166
  %167 = phi i64 [ %169, %166 ], [ 0, %145 ]
  %168 = getelementptr inbounds i32, i32* %156, i64 %167
  store i32 %1, i32* %168, align 4
  %169 = add nuw nsw i64 %167, 1
  %170 = load i32, i32* %23, align 8
  %171 = zext i32 %170 to i64
  %172 = icmp ult i64 %169, %171
  br i1 %172, label %166, label %158

173:                                              ; preds = %112, %160, %91, %123, %140, %138, %131
  %174 = bitcast %"class.jxl::Channel"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %174, i8* nonnull align 8 %22, i64 24, i1 false) #10
  %175 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %0, i64 0, i32 0, i32 0, i32 5
  %176 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %3, i64 0, i32 0, i32 5
  %177 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %176, i64 0, i32 0, i32 0, i32 0
  %178 = bitcast %"class.std::__1::unique_ptr"* %176 to i64*
  %179 = load i64, i64* %178, align 8
  store i8* null, i8** %177, align 8
  %180 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %175, i64 0, i32 0, i32 0, i32 0
  %181 = load i8*, i8** %180, align 8
  %182 = bitcast %"class.std::__1::unique_ptr"* %175 to i64*
  store i64 %179, i64* %182, align 8
  %183 = icmp eq i8* %181, null
  br i1 %183, label %184, label %185

184:                                              ; preds = %173
  store i8* null, i8** %26, align 8
  br label %189

185:                                              ; preds = %173
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %181) #10
  %186 = load i8*, i8** %26, align 8
  store i8* null, i8** %26, align 8
  %187 = icmp eq i8* %186, null
  br i1 %187, label %189, label %188

188:                                              ; preds = %185
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %186) #10
  br label %189

189:                                              ; preds = %184, %185, %188
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %22) #10
  br label %190

190:                                              ; preds = %13, %189
  ret void
}

declare void @_ZN3jxl9DequantDCERKNS_4RectEPNS_6Image3IfEEPNS_5PlaneIhEERKNS_5ImageEPKffSD_NS_22YCbCrChromaSubsamplingERKNS_11BlockCtxMapE(%"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Image3"*, %"class.jxl::Plane.137"*, %"class.jxl::Image"* dereferenceable(104), float*, float, float*, %"struct.jxl::YCbCrChromaSubsampling"*, %"struct.jxl::BlockCtxMap"* dereferenceable(136)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl19ModularFrameEncoder13AddACMetadataEmbPNS_18PassesEncoderStateE(%"class.jxl::ModularFrameEncoder"* nocapture readonly, i64, i1 zeroext, %"struct.jxl::PassesEncoderState"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.jxl::Image", align 8
  %6 = alloca %"class.jxl::Channel", align 8
  %7 = alloca %"class.jxl::Channel", align 8
  %8 = alloca %"class.jxl::Channel", align 8
  %9 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %3, i64 0, i32 0, i32 2, i32 12
  %10 = load i64, i64* %9, align 8, !noalias !64
  %11 = urem i64 %1, %10
  %12 = udiv i64 %1, %10
  %13 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %3, i64 0, i32 0, i32 2, i32 16
  %14 = load i64, i64* %13, align 8, !noalias !64
  %15 = mul i64 %14, %11
  %16 = mul i64 %14, %12
  %17 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %3, i64 0, i32 0, i32 2, i32 8
  %18 = load i64, i64* %17, align 8, !noalias !64
  %19 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %3, i64 0, i32 0, i32 2, i32 9
  %20 = load i64, i64* %19, align 8, !noalias !64
  %21 = add i64 %15, %14
  %22 = icmp ugt i64 %21, %18
  %23 = tail call i64 @llvm.usub.sat.i64(i64 %18, i64 %15) #10
  %24 = select i1 %22, i64 %23, i64 %14
  %25 = add i64 %16, %14
  %26 = icmp ugt i64 %25, %20
  %27 = tail call i64 @llvm.usub.sat.i64(i64 %20, i64 %16) #10
  %28 = select i1 %26, i64 %27, i64 %14
  %29 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 10, i32 15
  %30 = load i64, i64* %29, align 8
  %31 = shl i64 %30, 1
  %32 = or i64 %31, 1
  %33 = add i64 %32, %1
  %34 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 3, i32 0, i32 0
  %35 = load %"struct.jxl::ModularOptions"*, %"struct.jxl::ModularOptions"** %34, align 8
  %36 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %35, i64 %33, i32 0
  store i64 16777215, i64* %36, align 8
  %37 = load %"struct.jxl::ModularOptions"*, %"struct.jxl::ModularOptions"** %34, align 8
  %38 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %37, i64 %33, i32 10
  store i32 1, i32* %38, align 4
  br i1 %2, label %45, label %39

39:                                               ; preds = %4
  %40 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 7
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %41, 7
  br i1 %42, label %45, label %43

43:                                               ; preds = %39
  %44 = icmp sgt i32 %41, 2
  br i1 %44, label %45, label %49

45:                                               ; preds = %43, %39, %4
  %46 = phi i32 [ 1, %4 ], [ 2, %39 ], [ 3, %43 ]
  %47 = load %"struct.jxl::ModularOptions"*, %"struct.jxl::ModularOptions"** %34, align 8
  %48 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %47, i64 %33, i32 13
  store i32 %46, i32* %48, align 4
  br label %49

49:                                               ; preds = %45, %43
  %50 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 7
  %51 = load i32, i32* %50, align 4
  %52 = icmp slt i32 %51, 3
  br i1 %52, label %53, label %60

53:                                               ; preds = %49
  %54 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 11, i32 37
  %55 = load i8, i8* %54, align 4, !range !2
  %56 = icmp eq i8 %55, 0
  br i1 %56, label %60, label %57

57:                                               ; preds = %53
  %58 = load %"struct.jxl::ModularOptions"*, %"struct.jxl::ModularOptions"** %34, align 8
  %59 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %58, i64 %33, i32 13
  store i32 0, i32* %59, align 4
  br label %60

60:                                               ; preds = %53, %57, %49
  %61 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 2, i32 0, i32 0
  %62 = load %"class.jxl::Image"*, %"class.jxl::Image"** %61, align 8
  %63 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %62, i64 %33
  %64 = bitcast %"class.jxl::Image"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %64) #10
  call void @_ZN3jxl5ImageC1Emmii(%"class.jxl::Image"* nonnull %5, i64 %24, i64 %28, i32 255, i32 4) #10
  %65 = call dereferenceable(104) %"class.jxl::Image"* @_ZN3jxl5ImageaSEOS0_(%"class.jxl::Image"* %63, %"class.jxl::Image"* nonnull dereferenceable(104) %5) #10
  call void @_ZN3jxl5ImageD1Ev(%"class.jxl::Image"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %64) #10
  %66 = lshr i64 %15, 3
  %67 = lshr i64 %16, 3
  %68 = add i64 %24, 7
  %69 = lshr i64 %68, 3
  %70 = add i64 %28, 7
  %71 = lshr i64 %70, 3
  %72 = bitcast %"class.jxl::Channel"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %72) #10
  %73 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %6, i64 0, i32 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %73, i64 %69, i64 %71, i64 4) #10
  %74 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %6, i64 0, i32 1
  store i64 %69, i64* %74, align 8
  %75 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %6, i64 0, i32 2
  store i64 %71, i64* %75, align 8
  %76 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %6, i64 0, i32 3
  %77 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %6, i64 0, i32 4
  %78 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %6, i64 0, i32 5
  %79 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %6, i64 0, i32 6
  %80 = bitcast i32* %76 to <4 x i32>*
  store <4 x i32> <i32 3, i32 3, i32 0, i32 0>, <4 x i32>* %80, align 8
  %81 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %63, i64 0, i32 0, i32 0, i32 0
  %82 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %81, align 8
  %83 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %82, i64 0, i32 1
  store i64 %69, i64* %83, align 8
  %84 = load i64, i64* %75, align 8
  %85 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %82, i64 0, i32 2
  store i64 %84, i64* %85, align 8
  %86 = load i32, i32* %76, align 8
  %87 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %82, i64 0, i32 3
  store i32 %86, i32* %87, align 8
  %88 = load i32, i32* %77, align 4
  %89 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %82, i64 0, i32 4
  store i32 %88, i32* %89, align 4
  %90 = load i32, i32* %78, align 8
  %91 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %82, i64 0, i32 5
  store i32 %90, i32* %91, align 8
  %92 = load i32, i32* %79, align 4
  %93 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %82, i64 0, i32 6
  store i32 %92, i32* %93, align 4
  %94 = bitcast %"class.jxl::Channel"* %82 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %94, i8* nonnull align 8 %72, i64 24, i1 false) #10
  %95 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %82, i64 0, i32 0, i32 0, i32 5
  %96 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %6, i64 0, i32 0, i32 0, i32 5
  %97 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %96, i64 0, i32 0, i32 0, i32 0
  %98 = bitcast %"class.std::__1::unique_ptr"* %96 to i64*
  %99 = load i64, i64* %98, align 8
  store i8* null, i8** %97, align 8
  %100 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %95, i64 0, i32 0, i32 0, i32 0
  %101 = load i8*, i8** %100, align 8
  %102 = bitcast %"class.std::__1::unique_ptr"* %95 to i64*
  store i64 %99, i64* %102, align 8
  %103 = icmp eq i8* %101, null
  br i1 %103, label %105, label %104

104:                                              ; preds = %60
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %101) #10
  br label %105

105:                                              ; preds = %60, %104
  %106 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %6, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %107 = load i8*, i8** %106, align 8
  store i8* null, i8** %106, align 8
  %108 = icmp eq i8* %107, null
  br i1 %108, label %110, label %109

109:                                              ; preds = %105
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %107) #10
  br label %110

110:                                              ; preds = %105, %109
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %72) #10
  %111 = bitcast %"class.jxl::Channel"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %111) #10
  %112 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %7, i64 0, i32 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %112, i64 %69, i64 %71, i64 4) #10
  %113 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %7, i64 0, i32 1
  store i64 %69, i64* %113, align 8
  %114 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %7, i64 0, i32 2
  store i64 %71, i64* %114, align 8
  %115 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %7, i64 0, i32 3
  %116 = bitcast i32* %115 to <4 x i32>*
  store <4 x i32> <i32 3, i32 3, i32 0, i32 0>, <4 x i32>* %116, align 8
  %117 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %81, align 8
  %118 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %117, i64 1
  %119 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %117, i64 1, i32 1
  store i64 %69, i64* %119, align 8
  %120 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %117, i64 1, i32 2
  store i64 %71, i64* %120, align 8
  %121 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %117, i64 1, i32 3
  %122 = bitcast i32* %121 to <4 x i32>*
  store <4 x i32> <i32 3, i32 3, i32 0, i32 0>, <4 x i32>* %122, align 8
  %123 = bitcast %"class.jxl::Channel"* %118 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %123, i8* nonnull align 8 %111, i64 24, i1 false) #10
  %124 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %117, i64 1, i32 0, i32 0, i32 5
  %125 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %7, i64 0, i32 0, i32 0, i32 5
  %126 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %125, i64 0, i32 0, i32 0, i32 0
  %127 = bitcast %"class.std::__1::unique_ptr"* %125 to i64*
  %128 = load i64, i64* %127, align 8
  store i8* null, i8** %126, align 8
  %129 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %124, i64 0, i32 0, i32 0, i32 0
  %130 = load i8*, i8** %129, align 8
  %131 = bitcast %"class.std::__1::unique_ptr"* %124 to i64*
  store i64 %128, i64* %131, align 8
  %132 = icmp eq i8* %130, null
  br i1 %132, label %133, label %135

133:                                              ; preds = %110
  %134 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %7, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %134, align 8
  br label %141

135:                                              ; preds = %110
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %130) #10
  %136 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %7, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %137 = load i8*, i8** %136, align 8
  %138 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %7, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %138, align 8
  %139 = icmp eq i8* %137, null
  br i1 %139, label %141, label %140

140:                                              ; preds = %135
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %137) #10
  br label %141

141:                                              ; preds = %133, %135, %140
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %111) #10
  %142 = bitcast %"class.jxl::Channel"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %142) #10
  %143 = mul i64 %24, %28
  %144 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %8, i64 0, i32 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %144, i64 %143, i64 2, i64 4) #10
  %145 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %8, i64 0, i32 1
  store i64 %143, i64* %145, align 8
  %146 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %8, i64 0, i32 2
  store i64 2, i64* %146, align 8
  %147 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %8, i64 0, i32 3
  %148 = bitcast i32* %147 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %148, i8 0, i64 16, i1 false)
  %149 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %81, align 8
  %150 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %149, i64 2
  %151 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %149, i64 2, i32 1
  store i64 %143, i64* %151, align 8
  %152 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %149, i64 2, i32 2
  store i64 2, i64* %152, align 8
  %153 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %149, i64 2, i32 3
  %154 = bitcast %"class.jxl::Channel"* %150 to i8*
  %155 = bitcast i32* %153 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %155, i8 0, i64 16, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %154, i8* nonnull align 8 %142, i64 24, i1 false) #10
  %156 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %149, i64 2, i32 0, i32 0, i32 5
  %157 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %8, i64 0, i32 0, i32 0, i32 5
  %158 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %157, i64 0, i32 0, i32 0, i32 0
  %159 = bitcast %"class.std::__1::unique_ptr"* %157 to i64*
  %160 = load i64, i64* %159, align 8
  store i8* null, i8** %158, align 8
  %161 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %156, i64 0, i32 0, i32 0, i32 0
  %162 = load i8*, i8** %161, align 8
  %163 = bitcast %"class.std::__1::unique_ptr"* %156 to i64*
  store i64 %160, i64* %163, align 8
  %164 = icmp eq i8* %162, null
  br i1 %164, label %165, label %167

165:                                              ; preds = %141
  %166 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %8, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %166, align 8
  br label %173

167:                                              ; preds = %141
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %162) #10
  %168 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %8, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %169 = load i8*, i8** %168, align 8
  %170 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %8, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %170, align 8
  %171 = icmp eq i8* %169, null
  br i1 %171, label %173, label %172

172:                                              ; preds = %167
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %169) #10
  br label %173

173:                                              ; preds = %165, %167, %172
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %142) #10
  %174 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %81, align 8
  %175 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %174, i64 0, i32 0, i32 0, i32 0
  %176 = load i32, i32* %175, align 8
  %177 = zext i32 %176 to i64
  %178 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %174, i64 0, i32 0, i32 0, i32 1
  %179 = load i32, i32* %178, align 4
  %180 = zext i32 %179 to i64
  %181 = icmp eq i64 %69, %177
  %182 = icmp eq i64 %71, %180
  %183 = and i1 %181, %182
  br i1 %183, label %184, label %210

184:                                              ; preds = %173
  %185 = icmp eq i64 %71, 0
  br i1 %185, label %309, label %186

186:                                              ; preds = %184
  %187 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %3, i64 0, i32 0, i32 8, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %188 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %3, i64 0, i32 0, i32 8, i32 0, i32 0, i32 4
  %189 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %174, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %190 = load i8*, i8** %189, align 8, !alias.scope !67
  %191 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %174, i64 0, i32 0, i32 0, i32 4
  %192 = load i64, i64* %191, align 8, !alias.scope !67
  %193 = icmp ugt i64 %69, 1
  %194 = select i1 %193, i64 %69, i64 1
  %195 = icmp ugt i64 %69, 1
  %196 = select i1 %195, i64 %69, i64 1
  %197 = shl nuw nsw i64 %196, 2
  %198 = add nuw nsw i64 %196, %66
  %199 = and i64 %194, 2305843009213693944
  %200 = add nsw i64 %199, -8
  %201 = lshr exact i64 %200, 3
  %202 = add nuw nsw i64 %201, 1
  %203 = icmp ult i64 %194, 8
  %204 = and i64 %194, 2305843009213693944
  %205 = and i64 %202, 1
  %206 = icmp eq i64 %200, 0
  %207 = sub nuw nsw i64 %202, %205
  %208 = icmp eq i64 %205, 0
  %209 = icmp eq i64 %194, %204
  br label %213

210:                                              ; preds = %173
  %211 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.65, i64 0, i64 0), i32 90, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.66, i64 0, i64 0)) #10, !noalias !67
  %212 = call zeroext i1 @_ZN3jxl5AbortEv() #12, !noalias !67
  unreachable

213:                                              ; preds = %295, %186
  %214 = phi i64 [ %69, %186 ], [ %296, %295 ]
  %215 = phi i64 [ 0, %186 ], [ %297, %295 ]
  %216 = mul i64 %192, %215
  %217 = getelementptr i8, i8* %190, i64 %216
  %218 = add i64 %197, %216
  %219 = getelementptr i8, i8* %190, i64 %218
  %220 = add i64 %215, %67
  %221 = load i8*, i8** %187, align 8, !noalias !67
  %222 = load i64, i64* %188, align 8, !noalias !67
  %223 = mul i64 %222, %220
  %224 = getelementptr inbounds i8, i8* %221, i64 %223
  %225 = ptrtoint i8* %224 to i64
  %226 = and i64 %225, 63
  %227 = icmp eq i64 %226, 0
  call void @llvm.assume(i1 %227) #10, !noalias !67
  %228 = getelementptr inbounds i8, i8* %224, i64 %66
  %229 = mul i64 %215, %192
  %230 = getelementptr inbounds i8, i8* %190, i64 %229
  %231 = ptrtoint i8* %230 to i64
  %232 = and i64 %231, 63
  %233 = icmp eq i64 %232, 0
  call void @llvm.assume(i1 %233) #10, !noalias !67
  %234 = bitcast i8* %230 to i32*
  %235 = icmp eq i64 %214, 0
  br i1 %235, label %295, label %236

236:                                              ; preds = %213
  br i1 %203, label %237, label %239

237:                                              ; preds = %294, %239, %236
  %238 = phi i64 [ 0, %239 ], [ 0, %236 ], [ %204, %294 ]
  br label %299

239:                                              ; preds = %236
  %240 = getelementptr i8, i8* %221, i64 %198
  %241 = add i64 %67, %215
  %242 = mul i64 %222, %241
  %243 = getelementptr i8, i8* %240, i64 %242
  %244 = icmp ult i8* %217, %243
  %245 = icmp ult i8* %228, %219
  %246 = and i1 %244, %245
  br i1 %246, label %237, label %247

247:                                              ; preds = %239
  br i1 %206, label %279, label %248

248:                                              ; preds = %247, %248
  %249 = phi i64 [ %276, %248 ], [ 0, %247 ]
  %250 = phi i64 [ %277, %248 ], [ %207, %247 ]
  %251 = getelementptr inbounds i8, i8* %228, i64 %249
  %252 = bitcast i8* %251 to <4 x i8>*
  %253 = load <4 x i8>, <4 x i8>* %252, align 1, !alias.scope !70, !noalias !67
  %254 = getelementptr inbounds i8, i8* %251, i64 4
  %255 = bitcast i8* %254 to <4 x i8>*
  %256 = load <4 x i8>, <4 x i8>* %255, align 1, !alias.scope !70, !noalias !67
  %257 = sext <4 x i8> %253 to <4 x i32>
  %258 = sext <4 x i8> %256 to <4 x i32>
  %259 = getelementptr inbounds i32, i32* %234, i64 %249
  %260 = bitcast i32* %259 to <4 x i32>*
  store <4 x i32> %257, <4 x i32>* %260, align 64, !alias.scope !73, !noalias !75
  %261 = getelementptr inbounds i32, i32* %259, i64 4
  %262 = bitcast i32* %261 to <4 x i32>*
  store <4 x i32> %258, <4 x i32>* %262, align 16, !alias.scope !73, !noalias !75
  %263 = or i64 %249, 8
  %264 = getelementptr inbounds i8, i8* %228, i64 %263
  %265 = bitcast i8* %264 to <4 x i8>*
  %266 = load <4 x i8>, <4 x i8>* %265, align 1, !alias.scope !70, !noalias !67
  %267 = getelementptr inbounds i8, i8* %264, i64 4
  %268 = bitcast i8* %267 to <4 x i8>*
  %269 = load <4 x i8>, <4 x i8>* %268, align 1, !alias.scope !70, !noalias !67
  %270 = sext <4 x i8> %266 to <4 x i32>
  %271 = sext <4 x i8> %269 to <4 x i32>
  %272 = getelementptr inbounds i32, i32* %234, i64 %263
  %273 = bitcast i32* %272 to <4 x i32>*
  store <4 x i32> %270, <4 x i32>* %273, align 32, !alias.scope !73, !noalias !75
  %274 = getelementptr inbounds i32, i32* %272, i64 4
  %275 = bitcast i32* %274 to <4 x i32>*
  store <4 x i32> %271, <4 x i32>* %275, align 16, !alias.scope !73, !noalias !75
  %276 = add i64 %249, 16
  %277 = add i64 %250, -2
  %278 = icmp eq i64 %277, 0
  br i1 %278, label %279, label %248, !llvm.loop !76

279:                                              ; preds = %248, %247
  %280 = phi i64 [ 0, %247 ], [ %276, %248 ]
  br i1 %208, label %294, label %281

281:                                              ; preds = %279
  %282 = getelementptr inbounds i8, i8* %228, i64 %280
  %283 = bitcast i8* %282 to <4 x i8>*
  %284 = load <4 x i8>, <4 x i8>* %283, align 1, !alias.scope !70, !noalias !67
  %285 = getelementptr inbounds i8, i8* %282, i64 4
  %286 = bitcast i8* %285 to <4 x i8>*
  %287 = load <4 x i8>, <4 x i8>* %286, align 1, !alias.scope !70, !noalias !67
  %288 = sext <4 x i8> %284 to <4 x i32>
  %289 = sext <4 x i8> %287 to <4 x i32>
  %290 = getelementptr inbounds i32, i32* %234, i64 %280
  %291 = bitcast i32* %290 to <4 x i32>*
  store <4 x i32> %288, <4 x i32>* %291, align 32, !alias.scope !73, !noalias !75
  %292 = getelementptr inbounds i32, i32* %290, i64 4
  %293 = bitcast i32* %292 to <4 x i32>*
  store <4 x i32> %289, <4 x i32>* %293, align 16, !alias.scope !73, !noalias !75
  br label %294

294:                                              ; preds = %279, %281
  br i1 %209, label %295, label %237

295:                                              ; preds = %299, %294, %213
  %296 = phi i64 [ 0, %213 ], [ %69, %294 ], [ %69, %299 ]
  %297 = add nuw i64 %215, 1
  %298 = icmp ult i64 %297, %71
  br i1 %298, label %213, label %307

299:                                              ; preds = %237, %299
  %300 = phi i64 [ %305, %299 ], [ %238, %237 ]
  %301 = getelementptr inbounds i8, i8* %228, i64 %300
  %302 = load i8, i8* %301, align 1, !noalias !67
  %303 = sext i8 %302 to i32
  %304 = getelementptr inbounds i32, i32* %234, i64 %300
  store i32 %303, i32* %304, align 4, !noalias !67
  %305 = add nuw nsw i64 %300, 1
  %306 = icmp ult i64 %305, %69
  br i1 %306, label %299, label %295, !llvm.loop !77

307:                                              ; preds = %295
  %308 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %81, align 8
  br label %309

309:                                              ; preds = %307, %184
  %310 = phi %"class.jxl::Channel"* [ %308, %307 ], [ %174, %184 ]
  %311 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %310, i64 1, i32 0, i32 0, i32 0
  %312 = load i32, i32* %311, align 8
  %313 = zext i32 %312 to i64
  %314 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %310, i64 1, i32 0, i32 0, i32 1
  %315 = load i32, i32* %314, align 4
  %316 = zext i32 %315 to i64
  %317 = icmp eq i64 %69, %313
  %318 = icmp eq i64 %71, %316
  %319 = and i1 %317, %318
  br i1 %319, label %320, label %345

320:                                              ; preds = %309
  br i1 %185, label %442, label %321

321:                                              ; preds = %320
  %322 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %3, i64 0, i32 0, i32 8, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %323 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %3, i64 0, i32 0, i32 8, i32 1, i32 0, i32 4
  %324 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %310, i64 1, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %325 = load i8*, i8** %324, align 8, !alias.scope !78
  %326 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %310, i64 1, i32 0, i32 0, i32 4
  %327 = load i64, i64* %326, align 8, !alias.scope !78
  %328 = icmp ugt i64 %69, 1
  %329 = select i1 %328, i64 %69, i64 1
  %330 = icmp ugt i64 %69, 1
  %331 = select i1 %330, i64 %69, i64 1
  %332 = shl nuw nsw i64 %331, 2
  %333 = add nuw nsw i64 %331, %66
  %334 = and i64 %329, 2305843009213693944
  %335 = add nsw i64 %334, -8
  %336 = lshr exact i64 %335, 3
  %337 = add nuw nsw i64 %336, 1
  %338 = icmp ult i64 %329, 8
  %339 = and i64 %329, 2305843009213693944
  %340 = and i64 %337, 1
  %341 = icmp eq i64 %335, 0
  %342 = sub nuw nsw i64 %337, %340
  %343 = icmp eq i64 %340, 0
  %344 = icmp eq i64 %329, %339
  br label %348

345:                                              ; preds = %309
  %346 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.65, i64 0, i64 0), i32 90, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.66, i64 0, i64 0)) #10, !noalias !78
  %347 = call zeroext i1 @_ZN3jxl5AbortEv() #12, !noalias !78
  unreachable

348:                                              ; preds = %430, %321
  %349 = phi i64 [ %69, %321 ], [ %431, %430 ]
  %350 = phi i64 [ 0, %321 ], [ %432, %430 ]
  %351 = mul i64 %327, %350
  %352 = getelementptr i8, i8* %325, i64 %351
  %353 = add i64 %332, %351
  %354 = getelementptr i8, i8* %325, i64 %353
  %355 = add i64 %350, %67
  %356 = load i8*, i8** %322, align 8, !noalias !78
  %357 = load i64, i64* %323, align 8, !noalias !78
  %358 = mul i64 %357, %355
  %359 = getelementptr inbounds i8, i8* %356, i64 %358
  %360 = ptrtoint i8* %359 to i64
  %361 = and i64 %360, 63
  %362 = icmp eq i64 %361, 0
  call void @llvm.assume(i1 %362) #10, !noalias !78
  %363 = getelementptr inbounds i8, i8* %359, i64 %66
  %364 = mul i64 %350, %327
  %365 = getelementptr inbounds i8, i8* %325, i64 %364
  %366 = ptrtoint i8* %365 to i64
  %367 = and i64 %366, 63
  %368 = icmp eq i64 %367, 0
  call void @llvm.assume(i1 %368) #10, !noalias !78
  %369 = bitcast i8* %365 to i32*
  %370 = icmp eq i64 %349, 0
  br i1 %370, label %430, label %371

371:                                              ; preds = %348
  br i1 %338, label %372, label %374

372:                                              ; preds = %429, %374, %371
  %373 = phi i64 [ 0, %374 ], [ 0, %371 ], [ %339, %429 ]
  br label %434

374:                                              ; preds = %371
  %375 = getelementptr i8, i8* %356, i64 %333
  %376 = add i64 %67, %350
  %377 = mul i64 %357, %376
  %378 = getelementptr i8, i8* %375, i64 %377
  %379 = icmp ult i8* %352, %378
  %380 = icmp ult i8* %363, %354
  %381 = and i1 %379, %380
  br i1 %381, label %372, label %382

382:                                              ; preds = %374
  br i1 %341, label %414, label %383

383:                                              ; preds = %382, %383
  %384 = phi i64 [ %411, %383 ], [ 0, %382 ]
  %385 = phi i64 [ %412, %383 ], [ %342, %382 ]
  %386 = getelementptr inbounds i8, i8* %363, i64 %384
  %387 = bitcast i8* %386 to <4 x i8>*
  %388 = load <4 x i8>, <4 x i8>* %387, align 1, !alias.scope !81, !noalias !78
  %389 = getelementptr inbounds i8, i8* %386, i64 4
  %390 = bitcast i8* %389 to <4 x i8>*
  %391 = load <4 x i8>, <4 x i8>* %390, align 1, !alias.scope !81, !noalias !78
  %392 = sext <4 x i8> %388 to <4 x i32>
  %393 = sext <4 x i8> %391 to <4 x i32>
  %394 = getelementptr inbounds i32, i32* %369, i64 %384
  %395 = bitcast i32* %394 to <4 x i32>*
  store <4 x i32> %392, <4 x i32>* %395, align 64, !alias.scope !84, !noalias !86
  %396 = getelementptr inbounds i32, i32* %394, i64 4
  %397 = bitcast i32* %396 to <4 x i32>*
  store <4 x i32> %393, <4 x i32>* %397, align 16, !alias.scope !84, !noalias !86
  %398 = or i64 %384, 8
  %399 = getelementptr inbounds i8, i8* %363, i64 %398
  %400 = bitcast i8* %399 to <4 x i8>*
  %401 = load <4 x i8>, <4 x i8>* %400, align 1, !alias.scope !81, !noalias !78
  %402 = getelementptr inbounds i8, i8* %399, i64 4
  %403 = bitcast i8* %402 to <4 x i8>*
  %404 = load <4 x i8>, <4 x i8>* %403, align 1, !alias.scope !81, !noalias !78
  %405 = sext <4 x i8> %401 to <4 x i32>
  %406 = sext <4 x i8> %404 to <4 x i32>
  %407 = getelementptr inbounds i32, i32* %369, i64 %398
  %408 = bitcast i32* %407 to <4 x i32>*
  store <4 x i32> %405, <4 x i32>* %408, align 32, !alias.scope !84, !noalias !86
  %409 = getelementptr inbounds i32, i32* %407, i64 4
  %410 = bitcast i32* %409 to <4 x i32>*
  store <4 x i32> %406, <4 x i32>* %410, align 16, !alias.scope !84, !noalias !86
  %411 = add i64 %384, 16
  %412 = add i64 %385, -2
  %413 = icmp eq i64 %412, 0
  br i1 %413, label %414, label %383, !llvm.loop !87

414:                                              ; preds = %383, %382
  %415 = phi i64 [ 0, %382 ], [ %411, %383 ]
  br i1 %343, label %429, label %416

416:                                              ; preds = %414
  %417 = getelementptr inbounds i8, i8* %363, i64 %415
  %418 = bitcast i8* %417 to <4 x i8>*
  %419 = load <4 x i8>, <4 x i8>* %418, align 1, !alias.scope !81, !noalias !78
  %420 = getelementptr inbounds i8, i8* %417, i64 4
  %421 = bitcast i8* %420 to <4 x i8>*
  %422 = load <4 x i8>, <4 x i8>* %421, align 1, !alias.scope !81, !noalias !78
  %423 = sext <4 x i8> %419 to <4 x i32>
  %424 = sext <4 x i8> %422 to <4 x i32>
  %425 = getelementptr inbounds i32, i32* %369, i64 %415
  %426 = bitcast i32* %425 to <4 x i32>*
  store <4 x i32> %423, <4 x i32>* %426, align 32, !alias.scope !84, !noalias !86
  %427 = getelementptr inbounds i32, i32* %425, i64 4
  %428 = bitcast i32* %427 to <4 x i32>*
  store <4 x i32> %424, <4 x i32>* %428, align 16, !alias.scope !84, !noalias !86
  br label %429

429:                                              ; preds = %414, %416
  br i1 %344, label %430, label %372

430:                                              ; preds = %434, %429, %348
  %431 = phi i64 [ 0, %348 ], [ %69, %429 ], [ %69, %434 ]
  %432 = add nuw i64 %350, 1
  %433 = icmp ult i64 %432, %71
  br i1 %433, label %348, label %442

434:                                              ; preds = %372, %434
  %435 = phi i64 [ %440, %434 ], [ %373, %372 ]
  %436 = getelementptr inbounds i8, i8* %363, i64 %435
  %437 = load i8, i8* %436, align 1, !noalias !78
  %438 = sext i8 %437 to i32
  %439 = getelementptr inbounds i32, i32* %369, i64 %435
  store i32 %438, i32* %439, align 4, !noalias !78
  %440 = add nuw nsw i64 %435, 1
  %441 = icmp ult i64 %440, %69
  br i1 %441, label %434, label %430, !llvm.loop !88

442:                                              ; preds = %430, %320
  %443 = icmp eq i64 %28, 0
  br i1 %443, label %452, label %444

444:                                              ; preds = %442
  %445 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %3, i64 0, i32 0, i32 3, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %446 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %3, i64 0, i32 0, i32 3, i32 0, i32 0, i32 4
  %447 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %3, i64 0, i32 0, i32 6, i32 0, i32 5, i32 0, i32 0, i32 0
  %448 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %3, i64 0, i32 0, i32 6, i32 0, i32 4
  %449 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %3, i64 0, i32 0, i32 7, i32 0, i32 5, i32 0, i32 0, i32 0
  %450 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %3, i64 0, i32 0, i32 7, i32 0, i32 4
  %451 = icmp eq i64 %24, 0
  br label %461

452:                                              ; preds = %514, %442
  %453 = phi i64 [ 0, %442 ], [ %515, %514 ]
  %454 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %81, align 8
  %455 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %454, i64 2, i32 1
  store i64 %453, i64* %455, align 8
  %456 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %81, align 8
  %457 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %456, i64 2
  call void @_ZN3jxl7Channel6resizeEi(%"class.jxl::Channel"* %457, i32 0)
  %458 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 0, i32 0, i32 0
  %459 = load i64*, i64** %458, align 8
  %460 = getelementptr inbounds i64, i64* %459, i64 %1
  store i64 %453, i64* %460, align 8
  ret void

461:                                              ; preds = %514, %444
  %462 = phi i64 [ 0, %444 ], [ %516, %514 ]
  %463 = phi i64 [ 0, %444 ], [ %515, %514 ]
  %464 = add i64 %462, %16
  %465 = load i8*, i8** %445, align 8
  %466 = load i64, i64* %446, align 8
  %467 = mul i64 %466, %464
  %468 = getelementptr inbounds i8, i8* %465, i64 %467
  %469 = ptrtoint i8* %468 to i64
  %470 = and i64 %469, 63
  %471 = icmp eq i64 %470, 0
  call void @llvm.assume(i1 %471) #10
  %472 = getelementptr inbounds i8, i8* %468, i64 %15
  %473 = load i8*, i8** %447, align 8
  %474 = load i64, i64* %448, align 8
  %475 = mul i64 %474, %464
  %476 = getelementptr inbounds i8, i8* %473, i64 %475
  %477 = ptrtoint i8* %476 to i64
  %478 = and i64 %477, 63
  %479 = icmp eq i64 %478, 0
  call void @llvm.assume(i1 %479) #10
  %480 = bitcast i8* %476 to i32*
  %481 = getelementptr inbounds i32, i32* %480, i64 %15
  %482 = load i8*, i8** %449, align 8
  %483 = load i64, i64* %450, align 8
  %484 = mul i64 %483, %464
  %485 = getelementptr inbounds i8, i8* %482, i64 %484
  %486 = ptrtoint i8* %485 to i64
  %487 = and i64 %486, 63
  %488 = icmp eq i64 %487, 0
  call void @llvm.assume(i1 %488) #10
  %489 = getelementptr inbounds i8, i8* %485, i64 %15
  %490 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %81, align 8
  %491 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %490, i64 2, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %492 = load i8*, i8** %491, align 8
  %493 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %490, i64 2, i32 0, i32 0, i32 4
  %494 = ptrtoint i8* %492 to i64
  %495 = and i64 %494, 63
  %496 = icmp eq i64 %495, 0
  call void @llvm.assume(i1 %496) #10
  %497 = bitcast i8* %492 to i32*
  %498 = load i64, i64* %493, align 8
  %499 = getelementptr inbounds i8, i8* %492, i64 %498
  %500 = ptrtoint i8* %499 to i64
  %501 = and i64 %500, 63
  %502 = icmp eq i64 %501, 0
  call void @llvm.assume(i1 %502) #10
  %503 = bitcast i8* %499 to i32*
  %504 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %490, i64 3, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %505 = load i8*, i8** %504, align 8
  %506 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %490, i64 3, i32 0, i32 0, i32 4
  %507 = load i64, i64* %506, align 8
  %508 = mul i64 %507, %462
  %509 = getelementptr inbounds i8, i8* %505, i64 %508
  %510 = ptrtoint i8* %509 to i64
  %511 = and i64 %510, 63
  %512 = icmp eq i64 %511, 0
  call void @llvm.assume(i1 %512) #10
  %513 = bitcast i8* %509 to i32*
  br i1 %451, label %514, label %518

514:                                              ; preds = %538, %461
  %515 = phi i64 [ %463, %461 ], [ %539, %538 ]
  %516 = add nuw i64 %462, 1
  %517 = icmp eq i64 %516, %28
  br i1 %517, label %452, label %461

518:                                              ; preds = %461, %538
  %519 = phi i64 [ %540, %538 ], [ 0, %461 ]
  %520 = phi i64 [ %539, %538 ], [ %463, %461 ]
  %521 = getelementptr inbounds i8, i8* %489, i64 %519
  %522 = load i8, i8* %521, align 1
  %523 = zext i8 %522 to i32
  %524 = getelementptr inbounds i32, i32* %513, i64 %519
  store i32 %523, i32* %524, align 4
  %525 = getelementptr inbounds i8, i8* %472, i64 %519
  %526 = load i8, i8* %525, align 1
  %527 = and i8 %526, 1
  %528 = icmp eq i8 %527, 0
  br i1 %528, label %538, label %529

529:                                              ; preds = %518
  %530 = lshr i8 %526, 1
  %531 = zext i8 %530 to i32
  %532 = getelementptr inbounds i32, i32* %497, i64 %520
  store i32 %531, i32* %532, align 4
  %533 = getelementptr inbounds i32, i32* %481, i64 %519
  %534 = load i32, i32* %533, align 4
  %535 = add nsw i32 %534, -1
  %536 = getelementptr inbounds i32, i32* %503, i64 %520
  store i32 %535, i32* %536, align 4
  %537 = add i64 %520, 1
  br label %538

538:                                              ; preds = %518, %529
  %539 = phi i64 [ %520, %518 ], [ %537, %529 ]
  %540 = add nuw i64 %519, 1
  %541 = icmp eq i64 %540, %24
  br i1 %541, label %514, label %518
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl19ModularFrameEncoder16EncodeQuantTableEmmPNS_9BitWriterERKNS_13QuantEncodingEmPS0_(i64, i64, %"struct.jxl::BitWriter"*, %"class.jxl::QuantEncoding"* nocapture readonly dereferenceable(560), i64, %"class.jxl::ModularFrameEncoder"*) local_unnamed_addr #0 align 2 {
  %7 = alloca %"struct.jxl::ModularStreamId", align 8
  %8 = alloca %"class.jxl::Image", align 8
  %9 = alloca %"struct.jxl::ModularOptions", align 8
  %10 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %3, i64 0, i32 0, i32 3
  %11 = bitcast %union.anon.146* %10 to %"class.std::__1::vector.156"**
  %12 = load %"class.std::__1::vector.156"*, %"class.std::__1::vector.156"** %11, align 8
  %13 = icmp eq %"class.std::__1::vector.156"* %12, null
  br i1 %13, label %14, label %17

14:                                               ; preds = %6
  %15 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.2, i64 0, i64 0), i32 1606, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.28, i64 0, i64 0)) #10
  %16 = tail call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

17:                                               ; preds = %6
  %18 = mul i64 %1, %0
  %19 = mul i64 %18, 3
  %20 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %12, i64 0, i32 0, i32 1
  %21 = bitcast i32** %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = bitcast %"class.std::__1::vector.156"* %12 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %22, %24
  %26 = ashr exact i64 %25, 2
  %27 = icmp eq i64 %19, %26
  br i1 %27, label %31, label %28

28:                                               ; preds = %17
  %29 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.2, i64 0, i64 0), i32 1607, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.29, i64 0, i64 0)) #10
  %30 = tail call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

31:                                               ; preds = %17
  %32 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %3, i64 0, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 2
  %33 = load float, float* %32, align 8
  %34 = tail call i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float %33, %"struct.jxl::BitWriter"* %2) #10
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %39, label %36

36:                                               ; preds = %31
  %37 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.30, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.2, i64 0, i64 0), i32 1608, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.31, i64 0, i64 0)) #10
  %38 = tail call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

39:                                               ; preds = %31
  %40 = icmp eq %"class.jxl::ModularFrameEncoder"* %5, null
  br i1 %40, label %57, label %41

41:                                               ; preds = %39
  %42 = bitcast %"struct.jxl::ModularStreamId"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %42) #10
  %43 = icmp ult i64 %4, 17
  br i1 %43, label %47, label %44

44:                                               ; preds = %41
  %45 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.35, i64 0, i64 0), i32 85, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.36, i64 0, i64 0)) #10, !noalias !89
  %46 = tail call zeroext i1 @_ZN3jxl5AbortEv() #12, !noalias !89
  unreachable

47:                                               ; preds = %41
  %48 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %7, i64 0, i32 0
  store i32 4, i32* %48, align 8, !alias.scope !89
  %49 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %7, i64 0, i32 1
  store i64 %4, i64* %49, align 8, !alias.scope !89
  %50 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %7, i64 0, i32 2
  %51 = bitcast i64* %50 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %51, i8 0, i64 16, i1 false) #10, !alias.scope !89
  %52 = call i32 @_ZN3jxl19ModularFrameEncoder12EncodeStreamEPNS_9BitWriterEPNS_6AuxOutEmRKNS_15ModularStreamIdE(%"class.jxl::ModularFrameEncoder"* nonnull %5, %"struct.jxl::BitWriter"* %2, %"struct.jxl::AuxOut"* null, i64 0, %"struct.jxl::ModularStreamId"* nonnull dereferenceable(32) %7)
  %53 = icmp eq i32 %52, 0
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %42) #10
  br i1 %53, label %133, label %54

54:                                               ; preds = %47
  %55 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.30, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.2, i64 0, i64 0), i32 1611, i8* getelementptr inbounds ([91 x i8], [91 x i8]* @.str.32, i64 0, i64 0)) #10
  %56 = tail call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

57:                                               ; preds = %39
  %58 = bitcast %"class.jxl::Image"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %58) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %58, i8 -86, i64 104, i1 false)
  call void @_ZN3jxl5ImageC1Emmii(%"class.jxl::Image"* nonnull %8, i64 %0, i64 %1, i32 255, i32 3) #10
  %59 = icmp eq i64 %1, 0
  %60 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %8, i64 0, i32 0, i32 0, i32 0
  %61 = icmp eq i64 %0, 0
  br i1 %59, label %241, label %62

62:                                               ; preds = %57
  %63 = and i64 %0, 1
  %64 = icmp eq i64 %0, 1
  %65 = sub i64 %0, %63
  %66 = icmp eq i64 %63, 0
  br label %73

67:                                               ; preds = %98
  br i1 %59, label %241, label %68

68:                                               ; preds = %67
  %69 = and i64 %0, 1
  %70 = icmp eq i64 %0, 1
  %71 = sub i64 %0, %69
  %72 = icmp eq i64 %69, 0
  br label %134

73:                                               ; preds = %62, %98
  %74 = phi i64 [ %99, %98 ], [ 0, %62 ]
  %75 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %60, align 8
  %76 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %75, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %77 = load i8*, i8** %76, align 8
  %78 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %75, i64 0, i32 0, i32 0, i32 4
  %79 = load i64, i64* %78, align 8
  %80 = mul i64 %79, %74
  %81 = getelementptr inbounds i8, i8* %77, i64 %80
  %82 = ptrtoint i8* %81 to i64
  %83 = and i64 %82, 63
  %84 = icmp eq i64 %83, 0
  call void @llvm.assume(i1 %84) #10
  %85 = bitcast i8* %81 to i32*
  br i1 %61, label %98, label %86

86:                                               ; preds = %73
  %87 = mul i64 %74, %0
  br i1 %64, label %88, label %101

88:                                               ; preds = %101, %86
  %89 = phi i64 [ 0, %86 ], [ %119, %101 ]
  br i1 %66, label %98, label %90

90:                                               ; preds = %88
  %91 = load %"class.std::__1::vector.156"*, %"class.std::__1::vector.156"** %11, align 8
  %92 = add i64 %89, %87
  %93 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %91, i64 0, i32 0, i32 0
  %94 = load i32*, i32** %93, align 8
  %95 = getelementptr inbounds i32, i32* %94, i64 %92
  %96 = load i32, i32* %95, align 4
  %97 = getelementptr inbounds i32, i32* %85, i64 %89
  store i32 %96, i32* %97, align 4
  br label %98

98:                                               ; preds = %90, %88, %73
  %99 = add nuw i64 %74, 1
  %100 = icmp eq i64 %99, %1
  br i1 %100, label %67, label %73

101:                                              ; preds = %86, %101
  %102 = phi i64 [ %119, %101 ], [ 0, %86 ]
  %103 = phi i64 [ %120, %101 ], [ %65, %86 ]
  %104 = load %"class.std::__1::vector.156"*, %"class.std::__1::vector.156"** %11, align 8
  %105 = add i64 %102, %87
  %106 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %104, i64 0, i32 0, i32 0
  %107 = load i32*, i32** %106, align 8
  %108 = getelementptr inbounds i32, i32* %107, i64 %105
  %109 = load i32, i32* %108, align 4
  %110 = getelementptr inbounds i32, i32* %85, i64 %102
  store i32 %109, i32* %110, align 8
  %111 = or i64 %102, 1
  %112 = load %"class.std::__1::vector.156"*, %"class.std::__1::vector.156"** %11, align 8
  %113 = add i64 %111, %87
  %114 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %112, i64 0, i32 0, i32 0
  %115 = load i32*, i32** %114, align 8
  %116 = getelementptr inbounds i32, i32* %115, i64 %113
  %117 = load i32, i32* %116, align 4
  %118 = getelementptr inbounds i32, i32* %85, i64 %111
  store i32 %117, i32* %118, align 4
  %119 = add nuw i64 %102, 2
  %120 = add i64 %103, -2
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %88, label %101

122:                                              ; preds = %241
  %123 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.30, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.2, i64 0, i64 0), i32 1624, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.33, i64 0, i64 0)) #10
  %124 = call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

125:                                              ; preds = %241
  %126 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %9, i64 0, i32 3, i32 0, i32 0
  %127 = load i32*, i32** %126, align 8
  %128 = icmp eq i32* %127, null
  br i1 %128, label %132, label %129

129:                                              ; preds = %125
  %130 = ptrtoint i32* %127 to i64
  store i64 %130, i64* %253, align 8
  %131 = bitcast i32* %127 to i8*
  call void @_ZdlPv(i8* %131) #13
  br label %132

132:                                              ; preds = %125, %129
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %242) #10
  call void @_ZN3jxl5ImageD1Ev(%"class.jxl::Image"* nonnull %8) #10
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %58) #10
  br label %133

133:                                              ; preds = %47, %132
  ret void

134:                                              ; preds = %68, %181
  %135 = phi i64 [ %182, %181 ], [ 0, %68 ]
  %136 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %60, align 8
  %137 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %136, i64 1, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %138 = load i8*, i8** %137, align 8
  %139 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %136, i64 1, i32 0, i32 0, i32 4
  %140 = load i64, i64* %139, align 8
  %141 = mul i64 %140, %135
  %142 = getelementptr inbounds i8, i8* %138, i64 %141
  %143 = ptrtoint i8* %142 to i64
  %144 = and i64 %143, 63
  %145 = icmp eq i64 %144, 0
  call void @llvm.assume(i1 %145) #10
  %146 = bitcast i8* %142 to i32*
  br i1 %61, label %181, label %147

147:                                              ; preds = %134
  %148 = add i64 %135, %1
  %149 = mul i64 %148, %0
  br i1 %70, label %171, label %150

150:                                              ; preds = %147, %150
  %151 = phi i64 [ %168, %150 ], [ 0, %147 ]
  %152 = phi i64 [ %169, %150 ], [ %71, %147 ]
  %153 = load %"class.std::__1::vector.156"*, %"class.std::__1::vector.156"** %11, align 8
  %154 = add i64 %151, %149
  %155 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %153, i64 0, i32 0, i32 0
  %156 = load i32*, i32** %155, align 8
  %157 = getelementptr inbounds i32, i32* %156, i64 %154
  %158 = load i32, i32* %157, align 4
  %159 = getelementptr inbounds i32, i32* %146, i64 %151
  store i32 %158, i32* %159, align 8
  %160 = or i64 %151, 1
  %161 = load %"class.std::__1::vector.156"*, %"class.std::__1::vector.156"** %11, align 8
  %162 = add i64 %160, %149
  %163 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %161, i64 0, i32 0, i32 0
  %164 = load i32*, i32** %163, align 8
  %165 = getelementptr inbounds i32, i32* %164, i64 %162
  %166 = load i32, i32* %165, align 4
  %167 = getelementptr inbounds i32, i32* %146, i64 %160
  store i32 %166, i32* %167, align 4
  %168 = add nuw i64 %151, 2
  %169 = add i64 %152, -2
  %170 = icmp eq i64 %169, 0
  br i1 %170, label %171, label %150

171:                                              ; preds = %150, %147
  %172 = phi i64 [ 0, %147 ], [ %168, %150 ]
  br i1 %72, label %181, label %173

173:                                              ; preds = %171
  %174 = load %"class.std::__1::vector.156"*, %"class.std::__1::vector.156"** %11, align 8
  %175 = add i64 %172, %149
  %176 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %174, i64 0, i32 0, i32 0
  %177 = load i32*, i32** %176, align 8
  %178 = getelementptr inbounds i32, i32* %177, i64 %175
  %179 = load i32, i32* %178, align 4
  %180 = getelementptr inbounds i32, i32* %146, i64 %172
  store i32 %179, i32* %180, align 4
  br label %181

181:                                              ; preds = %173, %171, %134
  %182 = add nuw i64 %135, 1
  %183 = icmp eq i64 %182, %1
  br i1 %183, label %184, label %134

184:                                              ; preds = %181
  br i1 %59, label %241, label %185

185:                                              ; preds = %184
  %186 = shl i64 %1, 1
  %187 = and i64 %0, 1
  %188 = icmp eq i64 %0, 1
  %189 = sub i64 %0, %187
  %190 = icmp eq i64 %187, 0
  br label %191

191:                                              ; preds = %238, %185
  %192 = phi i64 [ 0, %185 ], [ %239, %238 ]
  %193 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %60, align 8
  %194 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %193, i64 2, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %195 = load i8*, i8** %194, align 8
  %196 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %193, i64 2, i32 0, i32 0, i32 4
  %197 = load i64, i64* %196, align 8
  %198 = mul i64 %197, %192
  %199 = getelementptr inbounds i8, i8* %195, i64 %198
  %200 = ptrtoint i8* %199 to i64
  %201 = and i64 %200, 63
  %202 = icmp eq i64 %201, 0
  call void @llvm.assume(i1 %202) #10
  %203 = bitcast i8* %199 to i32*
  br i1 %61, label %238, label %204

204:                                              ; preds = %191
  %205 = add i64 %192, %186
  %206 = mul i64 %205, %0
  br i1 %188, label %228, label %207

207:                                              ; preds = %204, %207
  %208 = phi i64 [ %225, %207 ], [ 0, %204 ]
  %209 = phi i64 [ %226, %207 ], [ %189, %204 ]
  %210 = load %"class.std::__1::vector.156"*, %"class.std::__1::vector.156"** %11, align 8
  %211 = add i64 %208, %206
  %212 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %210, i64 0, i32 0, i32 0
  %213 = load i32*, i32** %212, align 8
  %214 = getelementptr inbounds i32, i32* %213, i64 %211
  %215 = load i32, i32* %214, align 4
  %216 = getelementptr inbounds i32, i32* %203, i64 %208
  store i32 %215, i32* %216, align 8
  %217 = or i64 %208, 1
  %218 = load %"class.std::__1::vector.156"*, %"class.std::__1::vector.156"** %11, align 8
  %219 = add i64 %217, %206
  %220 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %218, i64 0, i32 0, i32 0
  %221 = load i32*, i32** %220, align 8
  %222 = getelementptr inbounds i32, i32* %221, i64 %219
  %223 = load i32, i32* %222, align 4
  %224 = getelementptr inbounds i32, i32* %203, i64 %217
  store i32 %223, i32* %224, align 4
  %225 = add nuw i64 %208, 2
  %226 = add i64 %209, -2
  %227 = icmp eq i64 %226, 0
  br i1 %227, label %228, label %207

228:                                              ; preds = %207, %204
  %229 = phi i64 [ 0, %204 ], [ %225, %207 ]
  br i1 %190, label %238, label %230

230:                                              ; preds = %228
  %231 = load %"class.std::__1::vector.156"*, %"class.std::__1::vector.156"** %11, align 8
  %232 = add i64 %229, %206
  %233 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %231, i64 0, i32 0, i32 0
  %234 = load i32*, i32** %233, align 8
  %235 = getelementptr inbounds i32, i32* %234, i64 %232
  %236 = load i32, i32* %235, align 4
  %237 = getelementptr inbounds i32, i32* %203, i64 %229
  store i32 %236, i32* %237, align 4
  br label %238

238:                                              ; preds = %230, %228, %191
  %239 = add nuw i64 %192, 1
  %240 = icmp eq i64 %239, %1
  br i1 %240, label %241, label %191

241:                                              ; preds = %238, %57, %67, %184
  %242 = bitcast %"struct.jxl::ModularOptions"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %242) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %242, i8* align 8 bitcast (%"struct.jxl::ModularOptions"* @__const._ZN3jxl19ModularFrameEncoder16EncodeQuantTableEmmPNS_9BitWriterERKNS_13QuantEncodingEmPS0_.cfopts to i8*), i64 88, i1 false)
  %243 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %9, i64 0, i32 0
  store i64 16777215, i64* %243, align 8
  %244 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %9, i64 0, i32 1
  store float 5.000000e-01, float* %244, align 8
  %245 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %9, i64 0, i32 2
  %246 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %9, i64 0, i32 3
  store i32 0, i32* %245, align 4
  %247 = call i8* @_Znwm(i64 32) #13
  %248 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %9, i64 0, i32 3, i32 0, i32 1
  %249 = bitcast %"class.std::__1::vector.40"* %246 to i8**
  store i8* %247, i8** %249, align 8
  %250 = getelementptr inbounds i8, i8* %247, i64 32
  %251 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %9, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %252 = bitcast i32** %251 to i8**
  store i8* %250, i8** %252, align 8
  %253 = bitcast i32** %248 to i64*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %247, i8* align 4 bitcast ([8 x i32]* @.ref.tmp.55 to i8*), i64 32, i1 false) #10
  %254 = ptrtoint i8* %250 to i64
  store i64 %254, i64* %253, align 8
  %255 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %9, i64 0, i32 4
  store float 9.600000e+01, float* %255, align 8
  %256 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %9, i64 0, i32 6
  store i64 32, i64* %256, align 8
  %257 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %9, i64 0, i32 7
  store i32 -1, i32* %257, align 8
  %258 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %9, i64 0, i32 8
  store i32 0, i32* %258, align 4
  %259 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %9, i64 0, i32 9
  store float 0x3FF028F5C0000000, float* %259, align 8
  %260 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %9, i64 0, i32 10
  store i32 2, i32* %260, align 4
  %261 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %9, i64 0, i32 11
  store i8 0, i8* %261, align 8
  %262 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %9, i64 0, i32 13
  store i32 0, i32* %262, align 4
  %263 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %9, i64 0, i32 14
  store i8 0, i8* %263, align 8
  %264 = call i32 @_ZN3jxl22ModularGenericCompressERNS_5ImageERKNS_14ModularOptionsEPNS_9BitWriterEPNS_6AuxOutEmmPNS_11TreeSamplesEPmPKNSt3__16vectorINS_20PropertyDecisionNodeENSC_9allocatorISE_EEEEPNS_11GroupHeaderEPNSD_INS_5TokenENSF_ISM_EEEESB_(%"class.jxl::Image"* nonnull dereferenceable(104) %8, %"struct.jxl::ModularOptions"* nonnull dereferenceable(88) %9, %"struct.jxl::BitWriter"* %2, %"struct.jxl::AuxOut"* null, i64 0, i64 0, %"struct.jxl::TreeSamples"* null, i64* null, %"class.std::__1::vector.52"* null, %"struct.jxl::GroupHeader"* null, %"class.std::__1::vector.61"* null, i64* null) #10
  %265 = icmp eq i32 %264, 0
  br i1 %265, label %125, label %122
}

declare i32 @_ZN3jxl8F16Coder5WriteEfPNS_9BitWriterE(float, %"struct.jxl::BitWriter"*) local_unnamed_addr #2

declare i32 @_ZN3jxl22ModularGenericCompressERNS_5ImageERKNS_14ModularOptionsEPNS_9BitWriterEPNS_6AuxOutEmmPNS_11TreeSamplesEPmPKNSt3__16vectorINS_20PropertyDecisionNodeENSC_9allocatorISE_EEEEPNS_11GroupHeaderEPNSD_INS_5TokenENSF_ISM_EEEESB_(%"class.jxl::Image"* dereferenceable(104), %"struct.jxl::ModularOptions"* dereferenceable(88), %"struct.jxl::BitWriter"*, %"struct.jxl::AuxOut"*, i64, i64, %"struct.jxl::TreeSamples"*, i64*, %"class.std::__1::vector.52"*, %"struct.jxl::GroupHeader"*, %"class.std::__1::vector.61"*, i64*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl19ModularFrameEncoder13AddQuantTableEmmRKNS_13QuantEncodingEm(%"class.jxl::ModularFrameEncoder"* nocapture readonly, i64, i64, %"class.jxl::QuantEncoding"* nocapture readonly dereferenceable(560), i64) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.jxl::Image", align 8
  %7 = icmp ult i64 %4, 17
  br i1 %7, label %11, label %8

8:                                                ; preds = %5
  %9 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.35, i64 0, i64 0), i32 85, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.36, i64 0, i64 0)) #10, !noalias !92
  %10 = tail call zeroext i1 @_ZN3jxl5AbortEv() #12, !noalias !92
  unreachable

11:                                               ; preds = %5
  %12 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 10, i32 15
  %13 = load i64, i64* %12, align 8
  %14 = mul i64 %13, 3
  %15 = add nuw nsw i64 %4, 1
  %16 = add i64 %15, %14
  %17 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %3, i64 0, i32 0, i32 3
  %18 = bitcast %union.anon.146* %17 to %"class.std::__1::vector.156"**
  %19 = load %"class.std::__1::vector.156"*, %"class.std::__1::vector.156"** %18, align 8
  %20 = icmp eq %"class.std::__1::vector.156"* %19, null
  br i1 %20, label %21, label %24

21:                                               ; preds = %11
  %22 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.2, i64 0, i64 0), i32 1631, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.28, i64 0, i64 0)) #10
  %23 = tail call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

24:                                               ; preds = %11
  %25 = mul i64 %2, %1
  %26 = mul i64 %25, 3
  %27 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %19, i64 0, i32 0, i32 1
  %28 = bitcast i32** %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = bitcast %"class.std::__1::vector.156"* %19 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %29, %31
  %33 = ashr exact i64 %32, 2
  %34 = icmp eq i64 %26, %33
  br i1 %34, label %38, label %35

35:                                               ; preds = %24
  %36 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.2, i64 0, i64 0), i32 1632, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.29, i64 0, i64 0)) #10
  %37 = tail call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

38:                                               ; preds = %24
  %39 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %0, i64 0, i32 2, i32 0, i32 0
  %40 = load %"class.jxl::Image"*, %"class.jxl::Image"** %39, align 8
  %41 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %40, i64 %16
  %42 = bitcast %"class.jxl::Image"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %42) #10
  call void @_ZN3jxl5ImageC1Emmii(%"class.jxl::Image"* nonnull %6, i64 %1, i64 %2, i32 255, i32 3) #10
  %43 = call dereferenceable(104) %"class.jxl::Image"* @_ZN3jxl5ImageaSEOS0_(%"class.jxl::Image"* %41, %"class.jxl::Image"* nonnull dereferenceable(104) %6) #10
  call void @_ZN3jxl5ImageD1Ev(%"class.jxl::Image"* nonnull %6) #10
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %42) #10
  %44 = icmp eq i64 %2, 0
  %45 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %41, i64 0, i32 0, i32 0, i32 0
  %46 = icmp eq i64 %1, 0
  br i1 %44, label %214, label %47

47:                                               ; preds = %38
  %48 = and i64 %1, 1
  %49 = icmp eq i64 %1, 1
  %50 = sub i64 %1, %48
  %51 = icmp eq i64 %48, 0
  br label %58

52:                                               ; preds = %83
  br i1 %44, label %214, label %53

53:                                               ; preds = %52
  %54 = and i64 %1, 1
  %55 = icmp eq i64 %1, 1
  %56 = sub i64 %1, %54
  %57 = icmp eq i64 %54, 0
  br label %107

58:                                               ; preds = %47, %83
  %59 = phi i64 [ %84, %83 ], [ 0, %47 ]
  %60 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %45, align 8
  %61 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %60, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %62 = load i8*, i8** %61, align 8
  %63 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %60, i64 0, i32 0, i32 0, i32 4
  %64 = load i64, i64* %63, align 8
  %65 = mul i64 %64, %59
  %66 = getelementptr inbounds i8, i8* %62, i64 %65
  %67 = ptrtoint i8* %66 to i64
  %68 = and i64 %67, 63
  %69 = icmp eq i64 %68, 0
  call void @llvm.assume(i1 %69) #10
  %70 = bitcast i8* %66 to i32*
  br i1 %46, label %83, label %71

71:                                               ; preds = %58
  %72 = mul i64 %59, %1
  br i1 %49, label %73, label %86

73:                                               ; preds = %86, %71
  %74 = phi i64 [ 0, %71 ], [ %104, %86 ]
  br i1 %51, label %83, label %75

75:                                               ; preds = %73
  %76 = load %"class.std::__1::vector.156"*, %"class.std::__1::vector.156"** %18, align 8
  %77 = add i64 %74, %72
  %78 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %76, i64 0, i32 0, i32 0
  %79 = load i32*, i32** %78, align 8
  %80 = getelementptr inbounds i32, i32* %79, i64 %77
  %81 = load i32, i32* %80, align 4
  %82 = getelementptr inbounds i32, i32* %70, i64 %74
  store i32 %81, i32* %82, align 4
  br label %83

83:                                               ; preds = %75, %73, %58
  %84 = add nuw i64 %59, 1
  %85 = icmp eq i64 %84, %2
  br i1 %85, label %52, label %58

86:                                               ; preds = %71, %86
  %87 = phi i64 [ %104, %86 ], [ 0, %71 ]
  %88 = phi i64 [ %105, %86 ], [ %50, %71 ]
  %89 = load %"class.std::__1::vector.156"*, %"class.std::__1::vector.156"** %18, align 8
  %90 = add i64 %87, %72
  %91 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %89, i64 0, i32 0, i32 0
  %92 = load i32*, i32** %91, align 8
  %93 = getelementptr inbounds i32, i32* %92, i64 %90
  %94 = load i32, i32* %93, align 4
  %95 = getelementptr inbounds i32, i32* %70, i64 %87
  store i32 %94, i32* %95, align 8
  %96 = or i64 %87, 1
  %97 = load %"class.std::__1::vector.156"*, %"class.std::__1::vector.156"** %18, align 8
  %98 = add i64 %96, %72
  %99 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %97, i64 0, i32 0, i32 0
  %100 = load i32*, i32** %99, align 8
  %101 = getelementptr inbounds i32, i32* %100, i64 %98
  %102 = load i32, i32* %101, align 4
  %103 = getelementptr inbounds i32, i32* %70, i64 %96
  store i32 %102, i32* %103, align 4
  %104 = add nuw i64 %87, 2
  %105 = add i64 %88, -2
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %73, label %86

107:                                              ; preds = %53, %154
  %108 = phi i64 [ %155, %154 ], [ 0, %53 ]
  %109 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %45, align 8
  %110 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %109, i64 1, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %111 = load i8*, i8** %110, align 8
  %112 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %109, i64 1, i32 0, i32 0, i32 4
  %113 = load i64, i64* %112, align 8
  %114 = mul i64 %113, %108
  %115 = getelementptr inbounds i8, i8* %111, i64 %114
  %116 = ptrtoint i8* %115 to i64
  %117 = and i64 %116, 63
  %118 = icmp eq i64 %117, 0
  call void @llvm.assume(i1 %118) #10
  %119 = bitcast i8* %115 to i32*
  br i1 %46, label %154, label %120

120:                                              ; preds = %107
  %121 = add i64 %108, %2
  %122 = mul i64 %121, %1
  br i1 %55, label %144, label %123

123:                                              ; preds = %120, %123
  %124 = phi i64 [ %141, %123 ], [ 0, %120 ]
  %125 = phi i64 [ %142, %123 ], [ %56, %120 ]
  %126 = load %"class.std::__1::vector.156"*, %"class.std::__1::vector.156"** %18, align 8
  %127 = add i64 %124, %122
  %128 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %126, i64 0, i32 0, i32 0
  %129 = load i32*, i32** %128, align 8
  %130 = getelementptr inbounds i32, i32* %129, i64 %127
  %131 = load i32, i32* %130, align 4
  %132 = getelementptr inbounds i32, i32* %119, i64 %124
  store i32 %131, i32* %132, align 8
  %133 = or i64 %124, 1
  %134 = load %"class.std::__1::vector.156"*, %"class.std::__1::vector.156"** %18, align 8
  %135 = add i64 %133, %122
  %136 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %134, i64 0, i32 0, i32 0
  %137 = load i32*, i32** %136, align 8
  %138 = getelementptr inbounds i32, i32* %137, i64 %135
  %139 = load i32, i32* %138, align 4
  %140 = getelementptr inbounds i32, i32* %119, i64 %133
  store i32 %139, i32* %140, align 4
  %141 = add nuw i64 %124, 2
  %142 = add i64 %125, -2
  %143 = icmp eq i64 %142, 0
  br i1 %143, label %144, label %123

144:                                              ; preds = %123, %120
  %145 = phi i64 [ 0, %120 ], [ %141, %123 ]
  br i1 %57, label %154, label %146

146:                                              ; preds = %144
  %147 = load %"class.std::__1::vector.156"*, %"class.std::__1::vector.156"** %18, align 8
  %148 = add i64 %145, %122
  %149 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %147, i64 0, i32 0, i32 0
  %150 = load i32*, i32** %149, align 8
  %151 = getelementptr inbounds i32, i32* %150, i64 %148
  %152 = load i32, i32* %151, align 4
  %153 = getelementptr inbounds i32, i32* %119, i64 %145
  store i32 %152, i32* %153, align 4
  br label %154

154:                                              ; preds = %146, %144, %107
  %155 = add nuw i64 %108, 1
  %156 = icmp eq i64 %155, %2
  br i1 %156, label %157, label %107

157:                                              ; preds = %154
  br i1 %44, label %214, label %158

158:                                              ; preds = %157
  %159 = shl i64 %2, 1
  %160 = and i64 %1, 1
  %161 = icmp eq i64 %1, 1
  %162 = sub i64 %1, %160
  %163 = icmp eq i64 %160, 0
  br label %164

164:                                              ; preds = %211, %158
  %165 = phi i64 [ 0, %158 ], [ %212, %211 ]
  %166 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %45, align 8
  %167 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %166, i64 2, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %168 = load i8*, i8** %167, align 8
  %169 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %166, i64 2, i32 0, i32 0, i32 4
  %170 = load i64, i64* %169, align 8
  %171 = mul i64 %170, %165
  %172 = getelementptr inbounds i8, i8* %168, i64 %171
  %173 = ptrtoint i8* %172 to i64
  %174 = and i64 %173, 63
  %175 = icmp eq i64 %174, 0
  call void @llvm.assume(i1 %175) #10
  %176 = bitcast i8* %172 to i32*
  br i1 %46, label %211, label %177

177:                                              ; preds = %164
  %178 = add i64 %165, %159
  %179 = mul i64 %178, %1
  br i1 %161, label %201, label %180

180:                                              ; preds = %177, %180
  %181 = phi i64 [ %198, %180 ], [ 0, %177 ]
  %182 = phi i64 [ %199, %180 ], [ %162, %177 ]
  %183 = load %"class.std::__1::vector.156"*, %"class.std::__1::vector.156"** %18, align 8
  %184 = add i64 %181, %179
  %185 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %183, i64 0, i32 0, i32 0
  %186 = load i32*, i32** %185, align 8
  %187 = getelementptr inbounds i32, i32* %186, i64 %184
  %188 = load i32, i32* %187, align 4
  %189 = getelementptr inbounds i32, i32* %176, i64 %181
  store i32 %188, i32* %189, align 8
  %190 = or i64 %181, 1
  %191 = load %"class.std::__1::vector.156"*, %"class.std::__1::vector.156"** %18, align 8
  %192 = add i64 %190, %179
  %193 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %191, i64 0, i32 0, i32 0
  %194 = load i32*, i32** %193, align 8
  %195 = getelementptr inbounds i32, i32* %194, i64 %192
  %196 = load i32, i32* %195, align 4
  %197 = getelementptr inbounds i32, i32* %176, i64 %190
  store i32 %196, i32* %197, align 4
  %198 = add nuw i64 %181, 2
  %199 = add i64 %182, -2
  %200 = icmp eq i64 %199, 0
  br i1 %200, label %201, label %180

201:                                              ; preds = %180, %177
  %202 = phi i64 [ 0, %177 ], [ %198, %180 ]
  br i1 %163, label %211, label %203

203:                                              ; preds = %201
  %204 = load %"class.std::__1::vector.156"*, %"class.std::__1::vector.156"** %18, align 8
  %205 = add i64 %202, %179
  %206 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %204, i64 0, i32 0, i32 0
  %207 = load i32*, i32** %206, align 8
  %208 = getelementptr inbounds i32, i32* %207, i64 %205
  %209 = load i32, i32* %208, align 4
  %210 = getelementptr inbounds i32, i32* %176, i64 %202
  store i32 %209, i32* %210, align 4
  br label %211

211:                                              ; preds = %203, %201, %164
  %212 = add nuw i64 %165, 1
  %213 = icmp eq i64 %212, %2
  br i1 %213, label %214, label %164

214:                                              ; preds = %211, %38, %52, %157
  ret void
}

declare void @_ZN3jxl10LZ77ParamsC1Ev(%"struct.jxl::LZ77Params"*) unnamed_addr #2

declare i64 @_ZNK3jxl13PreviewHeader5xsizeEv(%"class.jxl::PreviewHeader"*) local_unnamed_addr #2

declare i64 @_ZNK3jxl10SizeHeader5xsizeEv(%"class.jxl::SizeHeader"*) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

declare void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl8weighted6HeaderD0Ev(%"struct.jxl::weighted::Header"*) unnamed_addr #5 comdat align 2 {
  %2 = bitcast %"struct.jxl::weighted::Header"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK3jxl8weighted6Header4NameEv(%"struct.jxl::weighted::Header"*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.43, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl8weighted6Header11VisitFieldsEPNS_7VisitorE(%"struct.jxl::weighted::Header"*, %"class.jxl::Visitor"* noalias) unnamed_addr #0 comdat align 2 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %0, i64 0, i32 0
  %11 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %0, i64 0, i32 1
  %12 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)***
  %13 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)**, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)*** %12, align 8
  %14 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)** %13, i64 9
  %15 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)** %14, align 8
  %16 = tail call i32 %15(%"class.jxl::Visitor"* %1, %"class.jxl::Fields"* dereferenceable(8) %10, i8* %11) #10
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %23

18:                                               ; preds = %2
  %19 = bitcast %"class.jxl::Visitor"* %1 to void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)***
  %20 = load void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)**, void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*** %19, align 8
  %21 = getelementptr inbounds void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %20, i64 10
  %22 = load void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %21, align 8
  tail call void %22(%"class.jxl::Visitor"* %1, %"class.jxl::Fields"* %10) #10
  br label %128

23:                                               ; preds = %2
  %24 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %0, i64 0, i32 2
  %25 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %25) #10
  %26 = load i32, i32* %24, align 4
  store i32 %26, i32* %9, align 4
  %27 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i32, i32*)***
  %28 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %27, align 8
  %29 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %28, i64 5
  %30 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %29, align 8
  %31 = call i32 %30(%"class.jxl::Visitor"* %1, i64 5, i32 16, i32* nonnull %9) #10
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %34, label %33

33:                                               ; preds = %23
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %25) #10
  br label %128

34:                                               ; preds = %23
  %35 = load i32, i32* %9, align 4
  store i32 %35, i32* %24, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %25) #10
  %36 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %0, i64 0, i32 3
  %37 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %37) #10
  %38 = load i32, i32* %36, align 4
  store i32 %38, i32* %8, align 4
  %39 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %27, align 8
  %40 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %39, i64 5
  %41 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %40, align 8
  %42 = call i32 %41(%"class.jxl::Visitor"* %1, i64 5, i32 10, i32* nonnull %8) #10
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %45, label %44

44:                                               ; preds = %34
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %37) #10
  br label %128

45:                                               ; preds = %34
  %46 = load i32, i32* %8, align 4
  store i32 %46, i32* %36, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %37) #10
  %47 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %0, i64 0, i32 4
  %48 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %48) #10
  %49 = load i32, i32* %47, align 4
  store i32 %49, i32* %7, align 4
  %50 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %27, align 8
  %51 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %50, i64 5
  %52 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %51, align 8
  %53 = call i32 %52(%"class.jxl::Visitor"* %1, i64 5, i32 7, i32* nonnull %7) #10
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %56, label %55

55:                                               ; preds = %45
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %48) #10
  br label %128

56:                                               ; preds = %45
  %57 = load i32, i32* %7, align 4
  store i32 %57, i32* %47, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %48) #10
  %58 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %0, i64 0, i32 5
  %59 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %59) #10
  %60 = load i32, i32* %58, align 4
  store i32 %60, i32* %5, align 4
  %61 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %27, align 8
  %62 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %61, i64 5
  %63 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %62, align 8
  %64 = call i32 %63(%"class.jxl::Visitor"* %1, i64 5, i32 7, i32* nonnull %5) #10
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %67, label %66

66:                                               ; preds = %56
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %59) #10
  br label %128

67:                                               ; preds = %56
  %68 = load i32, i32* %5, align 4
  store i32 %68, i32* %58, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %59) #10
  %69 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %0, i64 0, i32 6
  %70 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %70) #10
  %71 = load i32, i32* %69, align 4
  store i32 %71, i32* %3, align 4
  %72 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %27, align 8
  %73 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %72, i64 5
  %74 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %73, align 8
  %75 = call i32 %74(%"class.jxl::Visitor"* %1, i64 5, i32 7, i32* nonnull %3) #10
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %78, label %77

77:                                               ; preds = %67
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %70) #10
  br label %128

78:                                               ; preds = %67
  %79 = load i32, i32* %3, align 4
  store i32 %79, i32* %69, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %70) #10
  %80 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %0, i64 0, i32 7
  %81 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %81) #10
  %82 = load i32, i32* %80, align 4
  store i32 %82, i32* %4, align 4
  %83 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %27, align 8
  %84 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %83, i64 5
  %85 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %84, align 8
  %86 = call i32 %85(%"class.jxl::Visitor"* %1, i64 5, i32 0, i32* nonnull %4) #10
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %89, label %88

88:                                               ; preds = %78
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %81) #10
  br label %128

89:                                               ; preds = %78
  %90 = load i32, i32* %4, align 4
  store i32 %90, i32* %80, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %81) #10
  %91 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %0, i64 0, i32 8
  %92 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %92) #10
  %93 = load i32, i32* %91, align 4
  store i32 %93, i32* %6, align 4
  %94 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %27, align 8
  %95 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %94, i64 5
  %96 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %95, align 8
  %97 = call i32 %96(%"class.jxl::Visitor"* %1, i64 5, i32 0, i32* nonnull %6) #10
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %100, label %99

99:                                               ; preds = %89
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %92) #10
  br label %128

100:                                              ; preds = %89
  %101 = load i32, i32* %6, align 4
  store i32 %101, i32* %91, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %92) #10
  %102 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %0, i64 0, i32 9, i64 0
  %103 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %27, align 8
  %104 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %103, i64 5
  %105 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %104, align 8
  %106 = call i32 %105(%"class.jxl::Visitor"* %1, i64 4, i32 13, i32* %102) #10
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %108, label %128

108:                                              ; preds = %100
  %109 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %0, i64 0, i32 9, i64 1
  %110 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %27, align 8
  %111 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %110, i64 5
  %112 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %111, align 8
  %113 = call i32 %112(%"class.jxl::Visitor"* %1, i64 4, i32 12, i32* %109) #10
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %115, label %128

115:                                              ; preds = %108
  %116 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %0, i64 0, i32 9, i64 2
  %117 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %27, align 8
  %118 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %117, i64 5
  %119 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %118, align 8
  %120 = call i32 %119(%"class.jxl::Visitor"* %1, i64 4, i32 12, i32* %116) #10
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %128

122:                                              ; preds = %115
  %123 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %0, i64 0, i32 9, i64 3
  %124 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %27, align 8
  %125 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %124, i64 5
  %126 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %125, align 8
  %127 = call i32 %126(%"class.jxl::Visitor"* %1, i64 4, i32 12, i32* %123) #10
  ret i32 %127

128:                                              ; preds = %100, %108, %115, %33, %44, %55, %66, %77, %88, %99, %18
  %129 = phi i32 [ 0, %18 ], [ %120, %115 ], [ %113, %108 ], [ %106, %100 ], [ %97, %99 ], [ %86, %88 ], [ %75, %77 ], [ %64, %66 ], [ %53, %55 ], [ %42, %44 ], [ %31, %33 ]
  ret i32 %129
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #9

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl9TransformD0Ev(%"class.jxl::Transform"*) unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl9TransformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 7
  %4 = getelementptr inbounds %"class.std::__1::vector.21", %"class.std::__1::vector.21"* %3, i64 0, i32 0, i32 0
  %5 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %4, align 8
  %6 = icmp eq %"struct.jxl::SqueezeParams"* %5, null
  br i1 %6, label %24, label %7

7:                                                ; preds = %1
  %8 = bitcast %"struct.jxl::SqueezeParams"* %5 to i8*
  %9 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 7, i32 0, i32 1
  %10 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %9, align 8
  %11 = icmp eq %"struct.jxl::SqueezeParams"* %10, %5
  br i1 %11, label %22, label %12

12:                                               ; preds = %7, %12
  %13 = phi %"struct.jxl::SqueezeParams"* [ %14, %12 ], [ %10, %7 ]
  %14 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %13, i64 -1
  %15 = bitcast %"struct.jxl::SqueezeParams"* %14 to void (%"struct.jxl::SqueezeParams"*)***
  %16 = load void (%"struct.jxl::SqueezeParams"*)**, void (%"struct.jxl::SqueezeParams"*)*** %15, align 8
  %17 = load void (%"struct.jxl::SqueezeParams"*)*, void (%"struct.jxl::SqueezeParams"*)** %16, align 8
  tail call void %17(%"struct.jxl::SqueezeParams"* %14) #10
  %18 = icmp eq %"struct.jxl::SqueezeParams"* %14, %5
  br i1 %18, label %19, label %12

19:                                               ; preds = %12
  %20 = bitcast %"class.std::__1::vector.21"* %3 to i8**
  %21 = load i8*, i8** %20, align 8
  br label %22

22:                                               ; preds = %19, %7
  %23 = phi i8* [ %21, %19 ], [ %8, %7 ]
  store %"struct.jxl::SqueezeParams"* %5, %"struct.jxl::SqueezeParams"** %9, align 8
  tail call void @_ZdlPv(i8* %23) #13
  br label %24

24:                                               ; preds = %1, %22
  %25 = bitcast %"class.jxl::Transform"* %0 to i8*
  tail call void @_ZdlPv(i8* %25) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK3jxl9Transform4NameEv(%"class.jxl::Transform"*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.44, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl9Transform11VisitFieldsEPNS_7VisitorE(%"class.jxl::Transform"*, %"class.jxl::Visitor"* noalias) unnamed_addr #0 comdat align 2 {
  %3 = alloca i32, align 4
  %4 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 1
  %5 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)***
  %6 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %5, align 8, !noalias !95
  %7 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %6, i64 4
  %8 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %7, align 8, !noalias !95
  %9 = tail call i32 %8(%"class.jxl::Visitor"* %1, i64 -9223372030412324864, i64 -9223372021822390270, i32 0, i32* %4) #10
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %165

11:                                               ; preds = %2
  %12 = load i32, i32* %4, align 8
  %13 = icmp eq i32 %12, 3
  br i1 %13, label %165, label %14

14:                                               ; preds = %11
  %15 = icmp ult i32 %12, 2
  %16 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i1)***
  %17 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %16, align 8
  %18 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %17, i64 8
  %19 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %18, align 8
  %20 = tail call i32 %19(%"class.jxl::Visitor"* %1, i1 zeroext %15) #10
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %29

22:                                               ; preds = %14
  %23 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 2
  %24 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %5, align 8, !noalias !98
  %25 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %24, i64 4
  %26 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %25, align 8, !noalias !98
  %27 = tail call i32 %26(%"class.jxl::Visitor"* %1, i64 1120986464258, i64 150684632615177, i32 0, i32* %23) #10
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %165

29:                                               ; preds = %22, %14
  %30 = load i32, i32* %4, align 8
  %31 = icmp eq i32 %30, 0
  %32 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %16, align 8
  %33 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %32, i64 8
  %34 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %33, align 8
  %35 = tail call i32 %34(%"class.jxl::Visitor"* %1, i1 zeroext %31) #10
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %47

37:                                               ; preds = %29
  %38 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 3
  %39 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %5, align 8, !noalias !101
  %40 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %39, i64 4
  %41 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %40, align 8, !noalias !101
  %42 = tail call i32 %41(%"class.jxl::Visitor"* %1, i64 6442450950, i64 1395864371267, i32 6, i32* %38) #10
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %165

44:                                               ; preds = %37
  %45 = load i32, i32* %38, align 8
  %46 = icmp ugt i32 %45, 41
  br i1 %46, label %165, label %47

47:                                               ; preds = %44, %29
  %48 = load i32, i32* %4, align 8
  %49 = icmp eq i32 %48, 1
  %50 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %16, align 8
  %51 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %50, i64 8
  %52 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %51, align 8
  %53 = tail call i32 %52(%"class.jxl::Visitor"* %1, i1 zeroext %49) #10
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %87

55:                                               ; preds = %47
  %56 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 4
  %57 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %5, align 8, !noalias !104
  %58 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %57, i64 4
  %59 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %58, align 8, !noalias !104
  %60 = tail call i32 %59(%"class.jxl::Visitor"* %1, i64 -9223372021822390271, i64 191126044676, i32 3, i32* %56) #10
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %165

62:                                               ; preds = %55
  %63 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 5
  %64 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %5, align 8, !noalias !107
  %65 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %64, i64 4
  %66 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %65, align 8, !noalias !107
  %67 = tail call i32 %66(%"class.jxl::Visitor"* %1, i64 35223026794503, i64 738936238415883, i32 256, i32* %63) #10
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %165

69:                                               ; preds = %62
  %70 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 6
  %71 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %5, align 8, !noalias !110
  %72 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %71, i64 4
  %73 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %72, align 8, !noalias !110
  %74 = tail call i32 %73(%"class.jxl::Visitor"* %1, i64 169651208192, i64 176123723915305, i32 0, i32* %70) #10
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %76, label %165

76:                                               ; preds = %69
  %77 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 9
  %78 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i32, i32*)***
  %79 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %78, align 8
  %80 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %79, i64 5
  %81 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %80, align 8
  %82 = tail call i32 %81(%"class.jxl::Visitor"* %1, i64 4, i32 0, i32* %77) #10
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %165

84:                                               ; preds = %76
  %85 = load i32, i32* %77, align 4
  %86 = icmp ugt i32 %85, 13
  br i1 %86, label %165, label %87

87:                                               ; preds = %84, %47
  %88 = load i32, i32* %4, align 8
  %89 = icmp eq i32 %88, 2
  %90 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %16, align 8
  %91 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %90, i64 8
  %92 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %91, align 8
  %93 = tail call i32 %92(%"class.jxl::Visitor"* %1, i1 zeroext %89) #10
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %165

95:                                               ; preds = %87
  %96 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %96) #10
  %97 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 7
  %98 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 7, i32 0, i32 1
  %99 = bitcast %"struct.jxl::SqueezeParams"** %98 to i64*
  %100 = load i64, i64* %99, align 8
  %101 = bitcast %"class.std::__1::vector.21"* %97 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = sub i64 %100, %102
  %104 = sdiv exact i64 %103, 24
  %105 = trunc i64 %104 to i32
  store i32 %105, i32* %3, align 4
  %106 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %5, align 8, !noalias !113
  %107 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %106, i64 4
  %108 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %107, align 8, !noalias !113
  %109 = call i32 %108(%"class.jxl::Visitor"* %1, i64 152471339008, i64 5665061863717, i32 0, i32* nonnull %3) #10
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %111, label %164

111:                                              ; preds = %95
  %112 = bitcast %"class.jxl::Visitor"* %1 to i1 (%"class.jxl::Visitor"*)***
  %113 = load i1 (%"class.jxl::Visitor"*)**, i1 (%"class.jxl::Visitor"*)*** %112, align 8
  %114 = getelementptr inbounds i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %113, i64 12
  %115 = load i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %114, align 8
  %116 = call zeroext i1 %115(%"class.jxl::Visitor"* %1) #10
  br i1 %116, label %117, label %142

117:                                              ; preds = %111
  %118 = load i32, i32* %3, align 4
  %119 = zext i32 %118 to i64
  %120 = load i64, i64* %99, align 8
  %121 = load i64, i64* %101, align 8
  %122 = sub i64 %120, %121
  %123 = sdiv exact i64 %122, 24
  %124 = icmp ult i64 %123, %119
  %125 = inttoptr i64 %121 to %"struct.jxl::SqueezeParams"*
  %126 = inttoptr i64 %120 to %"struct.jxl::SqueezeParams"*
  br i1 %124, label %127, label %129

127:                                              ; preds = %117
  %128 = sub nsw i64 %119, %123
  call void @_ZNSt3__16vectorIN3jxl13SqueezeParamsENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.21"* %97, i64 %128) #10
  br label %142

129:                                              ; preds = %117
  %130 = icmp ugt i64 %123, %119
  br i1 %130, label %131, label %142

131:                                              ; preds = %129
  %132 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %125, i64 %119
  %133 = icmp eq %"struct.jxl::SqueezeParams"* %132, %126
  br i1 %133, label %141, label %134

134:                                              ; preds = %131, %134
  %135 = phi %"struct.jxl::SqueezeParams"* [ %136, %134 ], [ %126, %131 ]
  %136 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %135, i64 -1
  %137 = bitcast %"struct.jxl::SqueezeParams"* %136 to void (%"struct.jxl::SqueezeParams"*)***
  %138 = load void (%"struct.jxl::SqueezeParams"*)**, void (%"struct.jxl::SqueezeParams"*)*** %137, align 8
  %139 = load void (%"struct.jxl::SqueezeParams"*)*, void (%"struct.jxl::SqueezeParams"*)** %138, align 8
  call void %139(%"struct.jxl::SqueezeParams"* %136) #10
  %140 = icmp eq %"struct.jxl::SqueezeParams"* %136, %132
  br i1 %140, label %141, label %134

141:                                              ; preds = %134, %131
  store %"struct.jxl::SqueezeParams"* %132, %"struct.jxl::SqueezeParams"** %98, align 8
  br label %142

142:                                              ; preds = %141, %129, %127, %111
  %143 = load i32, i32* %3, align 4
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %152, label %145

145:                                              ; preds = %142
  %146 = getelementptr inbounds %"class.std::__1::vector.21", %"class.std::__1::vector.21"* %97, i64 0, i32 0, i32 0
  %147 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)***
  br label %153

148:                                              ; preds = %153
  %149 = load i32, i32* %3, align 4
  %150 = zext i32 %149 to i64
  %151 = icmp ult i64 %162, %150
  br i1 %151, label %153, label %152

152:                                              ; preds = %148, %142
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %96) #10
  br label %165

153:                                              ; preds = %145, %148
  %154 = phi i64 [ 0, %145 ], [ %162, %148 ]
  %155 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %146, align 8
  %156 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %155, i64 %154, i32 0
  %157 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)**, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*** %147, align 8
  %158 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %157, i64 11
  %159 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %158, align 8
  %160 = call i32 %159(%"class.jxl::Visitor"* %1, %"class.jxl::Fields"* %156) #10
  %161 = icmp eq i32 %160, 0
  %162 = add nuw nsw i64 %154, 1
  br i1 %161, label %148, label %163

163:                                              ; preds = %153
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %96) #10
  br label %165

164:                                              ; preds = %95
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %96) #10
  br label %165

165:                                              ; preds = %87, %152, %163, %84, %44, %11, %164, %76, %69, %62, %55, %37, %22, %2
  %166 = phi i32 [ %160, %163 ], [ %109, %164 ], [ %82, %76 ], [ %74, %69 ], [ %67, %62 ], [ %60, %55 ], [ %42, %37 ], [ %27, %22 ], [ %9, %2 ], [ 1, %11 ], [ 1, %44 ], [ 1, %84 ], [ 0, %152 ], [ 0, %87 ]
  ret i32 %166
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl13SqueezeParamsENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.21"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.21", %"class.std::__1::vector.21"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"struct.jxl::SqueezeParams"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.21", %"class.std::__1::vector.21"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"struct.jxl::SqueezeParams"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 24
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %24, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"struct.jxl::SqueezeParams"*
  %14 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %13, i64 %1
  %15 = icmp eq i64 %1, 0
  br i1 %15, label %22, label %18

16:                                               ; preds = %18
  %17 = ptrtoint %"struct.jxl::SqueezeParams"* %14 to i64
  br label %22

18:                                               ; preds = %12, %18
  %19 = phi %"struct.jxl::SqueezeParams"* [ %20, %18 ], [ %13, %12 ]
  tail call void @_ZN3jxl13SqueezeParamsC1Ev(%"struct.jxl::SqueezeParams"* %19) #10
  %20 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %19, i64 1
  %21 = icmp eq %"struct.jxl::SqueezeParams"* %20, %14
  br i1 %21, label %16, label %18

22:                                               ; preds = %12, %16
  %23 = phi i64 [ %17, %16 ], [ %8, %12 ]
  store i64 %23, i64* %7, align 8
  br label %96

24:                                               ; preds = %2
  %25 = bitcast %"class.std::__1::vector.21"* %0 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = sub i64 %8, %26
  %28 = sdiv exact i64 %27, 24
  %29 = add i64 %28, %1
  %30 = icmp ugt i64 %29, 768614336404564650
  br i1 %30, label %31, label %33

31:                                               ; preds = %24
  %32 = bitcast %"class.std::__1::vector.21"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %32) #12
  unreachable

33:                                               ; preds = %24
  %34 = sub i64 %5, %26
  %35 = sdiv exact i64 %34, 24
  %36 = icmp ult i64 %35, 384307168202282325
  br i1 %36, label %37, label %42

37:                                               ; preds = %33
  %38 = shl nsw i64 %35, 1
  %39 = icmp ult i64 %38, %29
  %40 = select i1 %39, i64 %29, i64 %38
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %47, label %42

42:                                               ; preds = %33, %37
  %43 = phi i64 [ %40, %37 ], [ 768614336404564650, %33 ]
  %44 = mul i64 %43, 24
  %45 = tail call i8* @_Znwm(i64 %44) #13
  %46 = bitcast i8* %45 to %"struct.jxl::SqueezeParams"*
  br label %47

47:                                               ; preds = %37, %42
  %48 = phi i64 [ %43, %42 ], [ 0, %37 ]
  %49 = phi %"struct.jxl::SqueezeParams"* [ %46, %42 ], [ null, %37 ]
  %50 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %49, i64 %28
  %51 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %49, i64 %48
  %52 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %50, i64 %1
  br label %53

53:                                               ; preds = %47, %53
  %54 = phi %"struct.jxl::SqueezeParams"* [ %55, %53 ], [ %50, %47 ]
  tail call void @_ZN3jxl13SqueezeParamsC1Ev(%"struct.jxl::SqueezeParams"* %54) #10
  %55 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %54, i64 1
  %56 = icmp eq %"struct.jxl::SqueezeParams"* %52, %55
  br i1 %56, label %57, label %53

57:                                               ; preds = %53
  %58 = ptrtoint %"struct.jxl::SqueezeParams"* %51 to i64
  %59 = ptrtoint %"struct.jxl::SqueezeParams"* %52 to i64
  %60 = getelementptr inbounds %"class.std::__1::vector.21", %"class.std::__1::vector.21"* %0, i64 0, i32 0, i32 0
  %61 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %60, align 8
  %62 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %6, align 8
  %63 = icmp eq %"struct.jxl::SqueezeParams"* %62, %61
  br i1 %63, label %64, label %66

64:                                               ; preds = %57
  %65 = ptrtoint %"struct.jxl::SqueezeParams"* %61 to i64
  br label %78

66:                                               ; preds = %57, %66
  %67 = phi %"struct.jxl::SqueezeParams"* [ %73, %66 ], [ %50, %57 ]
  %68 = phi %"struct.jxl::SqueezeParams"* [ %69, %66 ], [ %62, %57 ]
  %69 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %68, i64 -1
  %70 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %67, i64 -1, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13SqueezeParamsE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %70, align 8
  %71 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %67, i64 -1, i32 1
  %72 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %68, i64 -1, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %71, i8* align 8 %72, i64 12, i1 false) #10
  %73 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %67, i64 -1
  %74 = icmp eq %"struct.jxl::SqueezeParams"* %69, %61
  br i1 %74, label %75, label %66

75:                                               ; preds = %66
  %76 = load i64, i64* %25, align 8
  %77 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %6, align 8
  br label %78

78:                                               ; preds = %64, %75
  %79 = phi %"struct.jxl::SqueezeParams"* [ %61, %64 ], [ %77, %75 ]
  %80 = phi %"struct.jxl::SqueezeParams"* [ %50, %64 ], [ %73, %75 ]
  %81 = phi i64 [ %65, %64 ], [ %76, %75 ]
  %82 = ptrtoint %"struct.jxl::SqueezeParams"* %80 to i64
  store i64 %82, i64* %25, align 8
  store i64 %59, i64* %7, align 8
  store i64 %58, i64* %4, align 8
  %83 = inttoptr i64 %81 to %"struct.jxl::SqueezeParams"*
  %84 = icmp eq %"struct.jxl::SqueezeParams"* %79, %83
  br i1 %84, label %92, label %85

85:                                               ; preds = %78, %85
  %86 = phi %"struct.jxl::SqueezeParams"* [ %87, %85 ], [ %79, %78 ]
  %87 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %86, i64 -1
  %88 = bitcast %"struct.jxl::SqueezeParams"* %87 to void (%"struct.jxl::SqueezeParams"*)***
  %89 = load void (%"struct.jxl::SqueezeParams"*)**, void (%"struct.jxl::SqueezeParams"*)*** %88, align 8
  %90 = load void (%"struct.jxl::SqueezeParams"*)*, void (%"struct.jxl::SqueezeParams"*)** %89, align 8
  tail call void %90(%"struct.jxl::SqueezeParams"* %87) #10
  %91 = icmp eq %"struct.jxl::SqueezeParams"* %87, %83
  br i1 %91, label %92, label %85

92:                                               ; preds = %85, %78
  %93 = icmp eq i64 %81, 0
  br i1 %93, label %96, label %94

94:                                               ; preds = %92
  %95 = inttoptr i64 %81 to i8*
  tail call void @_ZdlPv(i8* %95) #13
  br label %96

96:                                               ; preds = %94, %92, %22
  ret void
}

declare void @_ZN3jxl13SqueezeParamsC1Ev(%"struct.jxl::SqueezeParams"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl6FieldsD2Ev(%"class.jxl::Fields"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl13SqueezeParamsD0Ev(%"struct.jxl::SqueezeParams"*) unnamed_addr #5 comdat align 2 {
  %2 = bitcast %"struct.jxl::SqueezeParams"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK3jxl13SqueezeParams4NameEv(%"struct.jxl::SqueezeParams"*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.49, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl13SqueezeParams11VisitFieldsEPNS_7VisitorE(%"struct.jxl::SqueezeParams"*, %"class.jxl::Visitor"* noalias) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %0, i64 0, i32 1
  %4 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i1, i8*)***
  %5 = load i32 (%"class.jxl::Visitor"*, i1, i8*)**, i32 (%"class.jxl::Visitor"*, i1, i8*)*** %4, align 8
  %6 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %5, i64 3
  %7 = load i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %6, align 8
  %8 = tail call i32 %7(%"class.jxl::Visitor"* %1, i1 zeroext false, i8* %3) #10
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %31

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %0, i64 0, i32 2
  %12 = load i32 (%"class.jxl::Visitor"*, i1, i8*)**, i32 (%"class.jxl::Visitor"*, i1, i8*)*** %4, align 8
  %13 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %12, i64 3
  %14 = load i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %13, align 8
  %15 = tail call i32 %14(%"class.jxl::Visitor"* %1, i1 zeroext false, i8* %11) #10
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %31

17:                                               ; preds = %10
  %18 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %0, i64 0, i32 4
  %19 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)***
  %20 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %19, align 8, !noalias !116
  %21 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %20, i64 4
  %22 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %21, align 8, !noalias !116
  %23 = tail call i32 %22(%"class.jxl::Visitor"* %1, i64 1120986464258, i64 150684632615177, i32 0, i32* %18) #10
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %31

25:                                               ; preds = %17
  %26 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %0, i64 0, i32 5
  %27 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %19, align 8, !noalias !119
  %28 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %27, i64 4
  %29 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %28, align 8, !noalias !119
  %30 = tail call i32 %29(%"class.jxl::Visitor"* %1, i64 -9223372026117357567, i64 564788199427, i32 2, i32* %26) #10
  ret i32 %30

31:                                               ; preds = %17, %10, %2
  %32 = phi i32 [ %23, %17 ], [ %15, %10 ], [ %8, %2 ]
  ret i32 %32
}

declare void @_ZN3jxl12CacheAligned4FreeEPKv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.jxl::PropertyDecisionNode"* @_ZNSt3__16vectorIN3jxl20PropertyDecisionNodeENS_9allocatorIS2_EEE6insertINS_11__wrap_iterIPKS2_EEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISC_E9referenceEEE5valueENS7_IPS2_EEE4typeESA_SC_SC_(%"class.std::__1::vector.52"*, %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"*) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1 to i64
  %6 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %0, i64 0, i32 0, i32 0
  %7 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %2 to i64
  %8 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %3 to i64
  %9 = sub i64 %8, %7
  %10 = sdiv exact i64 %9, 40
  %11 = icmp sgt i64 %9, 0
  br i1 %11, label %12, label %154

12:                                               ; preds = %4
  %13 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %14 = bitcast %"struct.jxl::PropertyDecisionNode"** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %0, i64 0, i32 0, i32 1
  %17 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %16, align 8
  %18 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %17 to i64
  %19 = sub i64 %15, %18
  %20 = sdiv exact i64 %19, 40
  %21 = icmp sgt i64 %10, %20
  %22 = bitcast %"struct.jxl::PropertyDecisionNode"** %16 to i64*
  br i1 %21, label %80, label %23

23:                                               ; preds = %12
  %24 = sub i64 %18, %5
  %25 = sdiv exact i64 %24, 40
  %26 = icmp sgt i64 %10, %25
  br i1 %26, label %27, label %45

27:                                               ; preds = %23
  %28 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %2, i64 %25
  %29 = icmp eq %"struct.jxl::PropertyDecisionNode"* %28, %3
  br i1 %29, label %40, label %30

30:                                               ; preds = %27, %30
  %31 = phi %"struct.jxl::PropertyDecisionNode"* [ %36, %30 ], [ %17, %27 ]
  %32 = phi %"struct.jxl::PropertyDecisionNode"* [ %35, %30 ], [ %28, %27 ]
  %33 = bitcast %"struct.jxl::PropertyDecisionNode"* %31 to i8*
  %34 = bitcast %"struct.jxl::PropertyDecisionNode"* %32 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %33, i8* align 8 %34, i64 40, i1 false) #10
  %35 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %32, i64 1
  %36 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %31, i64 1
  %37 = icmp eq %"struct.jxl::PropertyDecisionNode"* %35, %3
  br i1 %37, label %38, label %30

38:                                               ; preds = %30
  %39 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %36 to i64
  br label %40

40:                                               ; preds = %38, %27
  %41 = phi i64 [ %18, %27 ], [ %39, %38 ]
  store i64 %41, i64* %22, align 8
  %42 = icmp sgt i64 %24, 0
  br i1 %42, label %43, label %154

43:                                               ; preds = %40
  %44 = inttoptr i64 %41 to %"struct.jxl::PropertyDecisionNode"*
  br label %45

45:                                               ; preds = %43, %23
  %46 = phi i64 [ %41, %43 ], [ %18, %23 ]
  %47 = phi %"struct.jxl::PropertyDecisionNode"* [ %44, %43 ], [ %17, %23 ]
  %48 = phi %"struct.jxl::PropertyDecisionNode"* [ %28, %43 ], [ %3, %23 ]
  %49 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1, i64 %10
  %50 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %49 to i64
  %51 = sub i64 %46, %50
  %52 = sdiv exact i64 %51, 40
  %53 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1, i64 %52
  %54 = icmp ult %"struct.jxl::PropertyDecisionNode"* %53, %17
  br i1 %54, label %65, label %57

55:                                               ; preds = %65
  %56 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %71 to i64
  br label %57

57:                                               ; preds = %55, %45
  %58 = phi i64 [ %56, %55 ], [ %46, %45 ]
  store i64 %58, i64* %22, align 8
  %59 = icmp eq i64 %51, 0
  br i1 %59, label %73, label %60

60:                                               ; preds = %57
  %61 = sdiv exact i64 %51, -40
  %62 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %47, i64 %61
  %63 = bitcast %"struct.jxl::PropertyDecisionNode"* %62 to i8*
  %64 = bitcast %"struct.jxl::PropertyDecisionNode"* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %63, i8* align 8 %64, i64 %51, i1 false) #10
  br label %73

65:                                               ; preds = %45, %65
  %66 = phi %"struct.jxl::PropertyDecisionNode"* [ %71, %65 ], [ %47, %45 ]
  %67 = phi %"struct.jxl::PropertyDecisionNode"* [ %70, %65 ], [ %53, %45 ]
  %68 = bitcast %"struct.jxl::PropertyDecisionNode"* %66 to i8*
  %69 = bitcast %"struct.jxl::PropertyDecisionNode"* %67 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %68, i8* align 8 %69, i64 40, i1 false) #10
  %70 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %67, i64 1
  %71 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %66, i64 1
  %72 = icmp ult %"struct.jxl::PropertyDecisionNode"* %70, %17
  br i1 %72, label %65, label %55

73:                                               ; preds = %57, %60
  %74 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %48 to i64
  %75 = sub i64 %74, %7
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %154, label %77

77:                                               ; preds = %73
  %78 = bitcast %"struct.jxl::PropertyDecisionNode"* %1 to i8*
  %79 = bitcast %"struct.jxl::PropertyDecisionNode"* %2 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %78, i8* align 8 %79, i64 %75, i1 false) #10
  br label %154

80:                                               ; preds = %12
  %81 = bitcast %"class.std::__1::vector.52"* %0 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = sub i64 %18, %82
  %84 = sdiv exact i64 %83, 40
  %85 = add nsw i64 %84, %10
  %86 = icmp ugt i64 %85, 461168601842738790
  br i1 %86, label %87, label %89

87:                                               ; preds = %80
  %88 = bitcast %"class.std::__1::vector.52"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %88) #12
  unreachable

89:                                               ; preds = %80
  %90 = sub i64 %15, %82
  %91 = sdiv exact i64 %90, 40
  %92 = icmp ult i64 %91, 230584300921369395
  br i1 %92, label %96, label %93

93:                                               ; preds = %89
  %94 = sub i64 %5, %82
  %95 = sdiv exact i64 %94, 40
  br label %103

96:                                               ; preds = %89
  %97 = shl nsw i64 %91, 1
  %98 = icmp ult i64 %97, %85
  %99 = select i1 %98, i64 %85, i64 %97
  %100 = sub i64 %5, %82
  %101 = sdiv exact i64 %100, 40
  %102 = icmp eq i64 %99, 0
  br i1 %102, label %109, label %103

103:                                              ; preds = %96, %93
  %104 = phi i64 [ %95, %93 ], [ %101, %96 ]
  %105 = phi i64 [ 461168601842738790, %93 ], [ %99, %96 ]
  %106 = mul i64 %105, 40
  %107 = tail call i8* @_Znwm(i64 %106) #13
  %108 = bitcast i8* %107 to %"struct.jxl::PropertyDecisionNode"*
  br label %109

109:                                              ; preds = %103, %96
  %110 = phi i64 [ %104, %103 ], [ %101, %96 ]
  %111 = phi i64 [ %105, %103 ], [ 0, %96 ]
  %112 = phi %"struct.jxl::PropertyDecisionNode"* [ %108, %103 ], [ null, %96 ]
  %113 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %112, i64 %110
  %114 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %112, i64 %111
  %115 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %114 to i64
  %116 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %113, i64 %10
  br label %117

117:                                              ; preds = %109, %117
  %118 = phi %"struct.jxl::PropertyDecisionNode"* [ %122, %117 ], [ %113, %109 ]
  %119 = phi %"struct.jxl::PropertyDecisionNode"* [ %123, %117 ], [ %2, %109 ]
  %120 = bitcast %"struct.jxl::PropertyDecisionNode"* %118 to i8*
  %121 = bitcast %"struct.jxl::PropertyDecisionNode"* %119 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %120, i8* align 8 %121, i64 40, i1 false) #10
  %122 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %118, i64 1
  %123 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %119, i64 1
  %124 = icmp eq %"struct.jxl::PropertyDecisionNode"* %116, %122
  br i1 %124, label %125, label %117

125:                                              ; preds = %117
  %126 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %6, align 8
  %127 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %126 to i64
  %128 = sub i64 %5, %127
  %129 = sdiv exact i64 %128, -40
  %130 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %113, i64 %129
  %131 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %130 to i64
  %132 = icmp sgt i64 %128, 0
  br i1 %132, label %133, label %136

133:                                              ; preds = %125
  %134 = bitcast %"struct.jxl::PropertyDecisionNode"* %130 to i8*
  %135 = bitcast %"struct.jxl::PropertyDecisionNode"* %126 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %134, i8* align 8 %135, i64 %128, i1 false) #10
  br label %136

136:                                              ; preds = %133, %125
  %137 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %16, align 8
  %138 = icmp eq %"struct.jxl::PropertyDecisionNode"* %137, %1
  br i1 %138, label %147, label %139

139:                                              ; preds = %136, %139
  %140 = phi %"struct.jxl::PropertyDecisionNode"* [ %145, %139 ], [ %116, %136 ]
  %141 = phi %"struct.jxl::PropertyDecisionNode"* [ %144, %139 ], [ %1, %136 ]
  %142 = bitcast %"struct.jxl::PropertyDecisionNode"* %140 to i8*
  %143 = bitcast %"struct.jxl::PropertyDecisionNode"* %141 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %142, i8* align 8 %143, i64 40, i1 false) #10
  %144 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %141, i64 1
  %145 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %140, i64 1
  %146 = icmp eq %"struct.jxl::PropertyDecisionNode"* %144, %137
  br i1 %146, label %147, label %139

147:                                              ; preds = %139, %136
  %148 = phi %"struct.jxl::PropertyDecisionNode"* [ %116, %136 ], [ %145, %139 ]
  %149 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %148 to i64
  %150 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %6, align 8
  store i64 %131, i64* %81, align 8
  store i64 %149, i64* %22, align 8
  store i64 %115, i64* %14, align 8
  %151 = icmp eq %"struct.jxl::PropertyDecisionNode"* %150, null
  br i1 %151, label %154, label %152

152:                                              ; preds = %147
  %153 = bitcast %"struct.jxl::PropertyDecisionNode"* %150 to i8*
  tail call void @_ZdlPv(i8* %153) #13
  br label %154

154:                                              ; preds = %152, %147, %40, %73, %77, %4
  %155 = phi %"struct.jxl::PropertyDecisionNode"* [ %1, %4 ], [ %1, %77 ], [ %1, %73 ], [ %1, %40 ], [ %113, %147 ], [ %113, %152 ]
  ret %"struct.jxl::PropertyDecisionNode"* %155
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZNSt3__15queueIZN3jxl12_GLOBAL__N_113MakeFixedTreeEiRKNS_6vectorIiNS_9allocatorIiEEEENS1_9PredictorEmE8NodeInfoNS_5dequeISA_NS4_ISA_EEEEE4pushEOSA_(%"class.std::__1::queue"* nocapture, %struct.NodeInfo* nocapture readonly dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.std::__1::queue", %"class.std::__1::queue"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %4 = bitcast %struct.NodeInfo*** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::queue", %"class.std::__1::queue"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %7 = bitcast %struct.NodeInfo*** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 3
  %11 = icmp eq i64 %9, 0
  %12 = mul i64 %10, 170
  %13 = add i64 %12, -1
  %14 = select i1 %11, i64 0, i64 %13
  %15 = getelementptr inbounds %"class.std::__1::queue", %"class.std::__1::queue"* %0, i64 0, i32 0, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::queue", %"class.std::__1::queue"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %18 = load i64, i64* %17, align 8
  %19 = add i64 %18, %16
  %20 = icmp eq i64 %14, %19
  %21 = inttoptr i64 %8 to %struct.NodeInfo**
  %22 = inttoptr i64 %5 to %struct.NodeInfo**
  br i1 %20, label %23, label %790

23:                                               ; preds = %2
  %24 = icmp ugt i64 %16, 169
  br i1 %24, label %25, label %171

25:                                               ; preds = %23
  %26 = add i64 %16, -170
  store i64 %26, i64* %15, align 8
  %27 = inttoptr i64 %8 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %21, i64 1
  store %struct.NodeInfo** %29, %struct.NodeInfo*** %6, align 8
  %30 = getelementptr inbounds %"class.std::__1::queue", %"class.std::__1::queue"* %0, i64 0, i32 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %31 = load %struct.NodeInfo**, %struct.NodeInfo*** %30, align 8
  %32 = icmp eq %struct.NodeInfo** %31, %22
  %33 = ptrtoint %struct.NodeInfo** %31 to i64
  %34 = inttoptr i64 %5 to i64*
  br i1 %32, label %35, label %167

35:                                               ; preds = %25
  %36 = getelementptr inbounds %"class.std::__1::queue", %"class.std::__1::queue"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %37 = load %struct.NodeInfo**, %struct.NodeInfo*** %36, align 8
  %38 = icmp ugt %struct.NodeInfo** %29, %37
  %39 = ptrtoint %struct.NodeInfo** %37 to i64
  br i1 %38, label %40, label %59

40:                                               ; preds = %35
  %41 = ptrtoint %struct.NodeInfo** %29 to i64
  %42 = sub i64 %41, %39
  %43 = ashr exact i64 %42, 3
  %44 = add nsw i64 %43, 1
  %45 = sdiv i64 %44, -2
  %46 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %29, i64 %45
  %47 = sub i64 %5, %41
  %48 = ashr exact i64 %47, 3
  %49 = icmp eq i64 %47, 0
  br i1 %49, label %54, label %50

50:                                               ; preds = %40
  %51 = bitcast %struct.NodeInfo** %46 to i8*
  %52 = bitcast %struct.NodeInfo** %29 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %51, i8* align 8 %52, i64 %47, i1 false) #10
  %53 = load %struct.NodeInfo**, %struct.NodeInfo*** %6, align 8
  br label %54

54:                                               ; preds = %50, %40
  %55 = phi %struct.NodeInfo** [ %29, %40 ], [ %53, %50 ]
  %56 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %46, i64 %48
  store %struct.NodeInfo** %56, %struct.NodeInfo*** %3, align 8
  %57 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %55, i64 %45
  store %struct.NodeInfo** %57, %struct.NodeInfo*** %6, align 8
  %58 = bitcast %struct.NodeInfo** %56 to i64*
  br label %167

59:                                               ; preds = %35
  %60 = bitcast %struct.NodeInfo*** %30 to i64*
  %61 = bitcast %"class.std::__1::queue"* %0 to i64*
  %62 = sub i64 %33, %39
  %63 = ashr exact i64 %62, 2
  %64 = icmp eq i64 %62, 0
  %65 = select i1 %64, i64 1, i64 %63
  %66 = icmp ugt i64 %65, 2305843009213693951
  br i1 %66, label %67, label %68

67:                                               ; preds = %59
  tail call void @abort() #12
  unreachable

68:                                               ; preds = %59
  %69 = lshr i64 %65, 2
  %70 = shl i64 %65, 3
  %71 = tail call i8* @_Znwm(i64 %70) #13
  %72 = bitcast i8* %71 to %struct.NodeInfo**
  %73 = ptrtoint i8* %71 to i64
  %74 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %72, i64 %69
  %75 = ptrtoint %struct.NodeInfo** %74 to i64
  %76 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %72, i64 %65
  %77 = ptrtoint %struct.NodeInfo** %76 to i64
  %78 = ptrtoint %struct.NodeInfo** %29 to i64
  %79 = sub i64 %5, %78
  %80 = ashr exact i64 %79, 3
  %81 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %74, i64 %80
  %82 = icmp eq i64 %79, 0
  br i1 %82, label %158, label %83

83:                                               ; preds = %68
  %84 = add i64 %79, -8
  %85 = lshr i64 %84, 3
  %86 = add nuw nsw i64 %85, 1
  %87 = and i64 %86, 7
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %104, label %89

89:                                               ; preds = %83, %89
  %90 = phi %struct.NodeInfo** [ %97, %89 ], [ %74, %83 ]
  %91 = phi i64 [ %98, %89 ], [ %75, %83 ]
  %92 = phi %struct.NodeInfo** [ %99, %89 ], [ %29, %83 ]
  %93 = phi i64 [ %100, %89 ], [ %87, %83 ]
  %94 = bitcast %struct.NodeInfo** %92 to i64*
  %95 = load i64, i64* %94, align 8
  %96 = inttoptr i64 %91 to i64*
  store i64 %95, i64* %96, align 8
  %97 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %90, i64 1
  %98 = ptrtoint %struct.NodeInfo** %97 to i64
  %99 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %92, i64 1
  %100 = add i64 %93, -1
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %102, label %89, !llvm.loop !122

102:                                              ; preds = %89
  %103 = ptrtoint %struct.NodeInfo** %97 to i64
  br label %104

104:                                              ; preds = %83, %102
  %105 = phi %struct.NodeInfo** [ %74, %83 ], [ %97, %102 ]
  %106 = phi i64 [ %75, %83 ], [ %103, %102 ]
  %107 = phi %struct.NodeInfo** [ %29, %83 ], [ %99, %102 ]
  %108 = icmp ult i64 %84, 56
  br i1 %108, label %155, label %109

109:                                              ; preds = %104, %109
  %110 = phi %struct.NodeInfo** [ %151, %109 ], [ %105, %104 ]
  %111 = phi i64 [ %152, %109 ], [ %106, %104 ]
  %112 = phi %struct.NodeInfo** [ %153, %109 ], [ %107, %104 ]
  %113 = bitcast %struct.NodeInfo** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = inttoptr i64 %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %110, i64 1
  %117 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %112, i64 1
  %118 = bitcast %struct.NodeInfo** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast %struct.NodeInfo** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %110, i64 2
  %122 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %112, i64 2
  %123 = bitcast %struct.NodeInfo** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast %struct.NodeInfo** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %110, i64 3
  %127 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %112, i64 3
  %128 = bitcast %struct.NodeInfo** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast %struct.NodeInfo** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %110, i64 4
  %132 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %112, i64 4
  %133 = bitcast %struct.NodeInfo** %132 to i64*
  %134 = load i64, i64* %133, align 8
  %135 = bitcast %struct.NodeInfo** %131 to i64*
  store i64 %134, i64* %135, align 8
  %136 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %110, i64 5
  %137 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %112, i64 5
  %138 = bitcast %struct.NodeInfo** %137 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = bitcast %struct.NodeInfo** %136 to i64*
  store i64 %139, i64* %140, align 8
  %141 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %110, i64 6
  %142 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %112, i64 6
  %143 = bitcast %struct.NodeInfo** %142 to i64*
  %144 = load i64, i64* %143, align 8
  %145 = bitcast %struct.NodeInfo** %141 to i64*
  store i64 %144, i64* %145, align 8
  %146 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %110, i64 7
  %147 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %112, i64 7
  %148 = bitcast %struct.NodeInfo** %147 to i64*
  %149 = load i64, i64* %148, align 8
  %150 = bitcast %struct.NodeInfo** %146 to i64*
  store i64 %149, i64* %150, align 8
  %151 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %110, i64 8
  %152 = ptrtoint %struct.NodeInfo** %151 to i64
  %153 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %112, i64 8
  %154 = icmp eq %struct.NodeInfo** %81, %151
  br i1 %154, label %155, label %109

155:                                              ; preds = %109, %104
  %156 = ptrtoint %struct.NodeInfo** %81 to i64
  %157 = load %struct.NodeInfo**, %struct.NodeInfo*** %36, align 8
  br label %158

158:                                              ; preds = %155, %68
  %159 = phi %struct.NodeInfo** [ %157, %155 ], [ %37, %68 ]
  %160 = phi i64 [ %156, %155 ], [ %75, %68 ]
  store i64 %73, i64* %61, align 8
  store i64 %75, i64* %7, align 8
  store i64 %160, i64* %4, align 8
  store i64 %77, i64* %60, align 8
  %161 = icmp eq %struct.NodeInfo** %159, null
  %162 = inttoptr i64 %160 to i64*
  br i1 %161, label %167, label %163

163:                                              ; preds = %158
  %164 = bitcast %struct.NodeInfo** %159 to i8*
  tail call void @_ZdlPv(i8* %164) #13
  %165 = bitcast %struct.NodeInfo*** %3 to i64**
  %166 = load i64*, i64** %165, align 8
  br label %167

167:                                              ; preds = %163, %158, %54, %25
  %168 = phi i64* [ %166, %163 ], [ %162, %158 ], [ %58, %54 ], [ %34, %25 ]
  store i64 %28, i64* %168, align 8
  %169 = load %struct.NodeInfo**, %struct.NodeInfo*** %3, align 8
  %170 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %169, i64 1
  store %struct.NodeInfo** %170, %struct.NodeInfo*** %3, align 8
  br label %790

171:                                              ; preds = %23
  %172 = getelementptr inbounds %"class.std::__1::queue", %"class.std::__1::queue"* %0, i64 0, i32 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %173 = bitcast %struct.NodeInfo*** %172 to i64*
  %174 = load i64, i64* %173, align 8
  %175 = bitcast %"class.std::__1::queue"* %0 to i64*
  %176 = load i64, i64* %175, align 8
  %177 = sub i64 %174, %176
  %178 = ashr exact i64 %177, 3
  %179 = icmp ult i64 %10, %178
  %180 = inttoptr i64 %174 to %struct.NodeInfo**
  %181 = inttoptr i64 %176 to %struct.NodeInfo**
  br i1 %179, label %182, label %575

182:                                              ; preds = %171
  %183 = icmp eq i64 %174, %5
  %184 = tail call i8* @_Znwm(i64 4080) #13
  %185 = ptrtoint i8* %184 to i64
  br i1 %183, label %312, label %186

186:                                              ; preds = %182
  %187 = icmp eq %struct.NodeInfo** %22, %180
  %188 = inttoptr i64 %5 to i64*
  br i1 %187, label %189, label %308

189:                                              ; preds = %186
  %190 = getelementptr inbounds %"class.std::__1::queue", %"class.std::__1::queue"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %191 = icmp ugt %struct.NodeInfo** %21, %181
  br i1 %191, label %192, label %207

192:                                              ; preds = %189
  %193 = sub i64 %8, %176
  %194 = ashr exact i64 %193, 3
  %195 = add nsw i64 %194, 1
  %196 = sdiv i64 %195, -2
  %197 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %21, i64 %196
  br i1 %11, label %202, label %198

198:                                              ; preds = %192
  %199 = bitcast %struct.NodeInfo** %197 to i8*
  %200 = inttoptr i64 %8 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %199, i8* align 8 %200, i64 %9, i1 false) #10
  %201 = load %struct.NodeInfo**, %struct.NodeInfo*** %6, align 8
  br label %202

202:                                              ; preds = %198, %192
  %203 = phi %struct.NodeInfo** [ %21, %192 ], [ %201, %198 ]
  %204 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %197, i64 %10
  store %struct.NodeInfo** %204, %struct.NodeInfo*** %3, align 8
  %205 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %203, i64 %196
  store %struct.NodeInfo** %205, %struct.NodeInfo*** %6, align 8
  %206 = bitcast %struct.NodeInfo** %204 to i64*
  br label %308

207:                                              ; preds = %189
  %208 = ashr exact i64 %177, 2
  %209 = icmp eq i64 %177, 0
  %210 = select i1 %209, i64 1, i64 %208
  %211 = icmp ugt i64 %210, 2305843009213693951
  br i1 %211, label %212, label %213

212:                                              ; preds = %207
  tail call void @abort() #12
  unreachable

213:                                              ; preds = %207
  %214 = lshr i64 %210, 2
  %215 = shl i64 %210, 3
  %216 = tail call i8* @_Znwm(i64 %215) #13
  %217 = bitcast i8* %216 to %struct.NodeInfo**
  %218 = ptrtoint i8* %216 to i64
  %219 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %217, i64 %214
  %220 = ptrtoint %struct.NodeInfo** %219 to i64
  %221 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %217, i64 %210
  %222 = ptrtoint %struct.NodeInfo** %221 to i64
  %223 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %219, i64 %10
  br i1 %11, label %299, label %224

224:                                              ; preds = %213
  %225 = add i64 %9, -8
  %226 = lshr i64 %225, 3
  %227 = add nuw nsw i64 %226, 1
  %228 = and i64 %227, 7
  %229 = icmp eq i64 %228, 0
  br i1 %229, label %245, label %230

230:                                              ; preds = %224, %230
  %231 = phi %struct.NodeInfo** [ %238, %230 ], [ %219, %224 ]
  %232 = phi i64 [ %239, %230 ], [ %220, %224 ]
  %233 = phi %struct.NodeInfo** [ %240, %230 ], [ %21, %224 ]
  %234 = phi i64 [ %241, %230 ], [ %228, %224 ]
  %235 = bitcast %struct.NodeInfo** %233 to i64*
  %236 = load i64, i64* %235, align 8
  %237 = inttoptr i64 %232 to i64*
  store i64 %236, i64* %237, align 8
  %238 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %231, i64 1
  %239 = ptrtoint %struct.NodeInfo** %238 to i64
  %240 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %233, i64 1
  %241 = add i64 %234, -1
  %242 = icmp eq i64 %241, 0
  br i1 %242, label %243, label %230, !llvm.loop !123

243:                                              ; preds = %230
  %244 = ptrtoint %struct.NodeInfo** %238 to i64
  br label %245

245:                                              ; preds = %224, %243
  %246 = phi %struct.NodeInfo** [ %219, %224 ], [ %238, %243 ]
  %247 = phi i64 [ %220, %224 ], [ %244, %243 ]
  %248 = phi %struct.NodeInfo** [ %21, %224 ], [ %240, %243 ]
  %249 = icmp ult i64 %225, 56
  br i1 %249, label %296, label %250

250:                                              ; preds = %245, %250
  %251 = phi %struct.NodeInfo** [ %292, %250 ], [ %246, %245 ]
  %252 = phi i64 [ %293, %250 ], [ %247, %245 ]
  %253 = phi %struct.NodeInfo** [ %294, %250 ], [ %248, %245 ]
  %254 = bitcast %struct.NodeInfo** %253 to i64*
  %255 = load i64, i64* %254, align 8
  %256 = inttoptr i64 %252 to i64*
  store i64 %255, i64* %256, align 8
  %257 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %251, i64 1
  %258 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %253, i64 1
  %259 = bitcast %struct.NodeInfo** %258 to i64*
  %260 = load i64, i64* %259, align 8
  %261 = bitcast %struct.NodeInfo** %257 to i64*
  store i64 %260, i64* %261, align 8
  %262 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %251, i64 2
  %263 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %253, i64 2
  %264 = bitcast %struct.NodeInfo** %263 to i64*
  %265 = load i64, i64* %264, align 8
  %266 = bitcast %struct.NodeInfo** %262 to i64*
  store i64 %265, i64* %266, align 8
  %267 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %251, i64 3
  %268 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %253, i64 3
  %269 = bitcast %struct.NodeInfo** %268 to i64*
  %270 = load i64, i64* %269, align 8
  %271 = bitcast %struct.NodeInfo** %267 to i64*
  store i64 %270, i64* %271, align 8
  %272 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %251, i64 4
  %273 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %253, i64 4
  %274 = bitcast %struct.NodeInfo** %273 to i64*
  %275 = load i64, i64* %274, align 8
  %276 = bitcast %struct.NodeInfo** %272 to i64*
  store i64 %275, i64* %276, align 8
  %277 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %251, i64 5
  %278 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %253, i64 5
  %279 = bitcast %struct.NodeInfo** %278 to i64*
  %280 = load i64, i64* %279, align 8
  %281 = bitcast %struct.NodeInfo** %277 to i64*
  store i64 %280, i64* %281, align 8
  %282 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %251, i64 6
  %283 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %253, i64 6
  %284 = bitcast %struct.NodeInfo** %283 to i64*
  %285 = load i64, i64* %284, align 8
  %286 = bitcast %struct.NodeInfo** %282 to i64*
  store i64 %285, i64* %286, align 8
  %287 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %251, i64 7
  %288 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %253, i64 7
  %289 = bitcast %struct.NodeInfo** %288 to i64*
  %290 = load i64, i64* %289, align 8
  %291 = bitcast %struct.NodeInfo** %287 to i64*
  store i64 %290, i64* %291, align 8
  %292 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %251, i64 8
  %293 = ptrtoint %struct.NodeInfo** %292 to i64
  %294 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %253, i64 8
  %295 = icmp eq %struct.NodeInfo** %223, %292
  br i1 %295, label %296, label %250

296:                                              ; preds = %250, %245
  %297 = ptrtoint %struct.NodeInfo** %223 to i64
  %298 = load %struct.NodeInfo**, %struct.NodeInfo*** %190, align 8
  br label %299

299:                                              ; preds = %296, %213
  %300 = phi %struct.NodeInfo** [ %298, %296 ], [ %181, %213 ]
  %301 = phi i64 [ %297, %296 ], [ %220, %213 ]
  store i64 %218, i64* %175, align 8
  store i64 %220, i64* %7, align 8
  store i64 %301, i64* %4, align 8
  store i64 %222, i64* %173, align 8
  %302 = icmp eq %struct.NodeInfo** %300, null
  %303 = inttoptr i64 %301 to i64*
  br i1 %302, label %308, label %304

304:                                              ; preds = %299
  %305 = bitcast %struct.NodeInfo** %300 to i8*
  tail call void @_ZdlPv(i8* %305) #13
  %306 = bitcast %struct.NodeInfo*** %3 to i64**
  %307 = load i64*, i64** %306, align 8
  br label %308

308:                                              ; preds = %304, %299, %202, %186
  %309 = phi i64* [ %307, %304 ], [ %303, %299 ], [ %206, %202 ], [ %188, %186 ]
  store i64 %185, i64* %309, align 8
  %310 = load %struct.NodeInfo**, %struct.NodeInfo*** %3, align 8
  %311 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %310, i64 1
  store %struct.NodeInfo** %311, %struct.NodeInfo*** %3, align 8
  br label %790

312:                                              ; preds = %182
  %313 = getelementptr inbounds %"class.std::__1::queue", %"class.std::__1::queue"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %314 = icmp eq %struct.NodeInfo** %21, %181
  br i1 %314, label %315, label %427

315:                                              ; preds = %312
  %316 = icmp ult %struct.NodeInfo** %22, %180
  br i1 %316, label %317, label %327

317:                                              ; preds = %315
  br i1 %11, label %324, label %318

318:                                              ; preds = %317
  %319 = sub nsw i64 0, %10
  %320 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %22, i64 %319
  %321 = bitcast %struct.NodeInfo** %320 to i8*
  %322 = inttoptr i64 %8 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %321, i8* align 8 %322, i64 %9, i1 false) #10
  %323 = load %struct.NodeInfo**, %struct.NodeInfo*** %3, align 8
  br label %324

324:                                              ; preds = %318, %317
  %325 = phi %struct.NodeInfo** [ %323, %318 ], [ %22, %317 ]
  %326 = phi %struct.NodeInfo** [ %320, %318 ], [ %22, %317 ]
  store %struct.NodeInfo** %326, %struct.NodeInfo*** %6, align 8
  store %struct.NodeInfo** %325, %struct.NodeInfo*** %3, align 8
  br label %427

327:                                              ; preds = %315
  %328 = ashr exact i64 %177, 2
  %329 = icmp eq i64 %177, 0
  %330 = select i1 %329, i64 1, i64 %328
  %331 = icmp ugt i64 %330, 2305843009213693951
  br i1 %331, label %332, label %333

332:                                              ; preds = %327
  tail call void @abort() #12
  unreachable

333:                                              ; preds = %327
  %334 = add nuw nsw i64 %330, 3
  %335 = lshr i64 %334, 2
  %336 = shl i64 %330, 3
  %337 = tail call i8* @_Znwm(i64 %336) #13
  %338 = bitcast i8* %337 to %struct.NodeInfo**
  %339 = ptrtoint i8* %337 to i64
  %340 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %338, i64 %335
  %341 = ptrtoint %struct.NodeInfo** %340 to i64
  %342 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %338, i64 %330
  %343 = ptrtoint %struct.NodeInfo** %342 to i64
  %344 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %340, i64 %10
  br i1 %11, label %420, label %345

345:                                              ; preds = %333
  %346 = add i64 %9, -8
  %347 = lshr i64 %346, 3
  %348 = add nuw nsw i64 %347, 1
  %349 = and i64 %348, 7
  %350 = icmp eq i64 %349, 0
  br i1 %350, label %366, label %351

351:                                              ; preds = %345, %351
  %352 = phi %struct.NodeInfo** [ %359, %351 ], [ %340, %345 ]
  %353 = phi i64 [ %360, %351 ], [ %341, %345 ]
  %354 = phi %struct.NodeInfo** [ %361, %351 ], [ %21, %345 ]
  %355 = phi i64 [ %362, %351 ], [ %349, %345 ]
  %356 = bitcast %struct.NodeInfo** %354 to i64*
  %357 = load i64, i64* %356, align 8
  %358 = inttoptr i64 %353 to i64*
  store i64 %357, i64* %358, align 8
  %359 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %352, i64 1
  %360 = ptrtoint %struct.NodeInfo** %359 to i64
  %361 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %354, i64 1
  %362 = add i64 %355, -1
  %363 = icmp eq i64 %362, 0
  br i1 %363, label %364, label %351, !llvm.loop !124

364:                                              ; preds = %351
  %365 = ptrtoint %struct.NodeInfo** %359 to i64
  br label %366

366:                                              ; preds = %345, %364
  %367 = phi %struct.NodeInfo** [ %340, %345 ], [ %359, %364 ]
  %368 = phi i64 [ %341, %345 ], [ %365, %364 ]
  %369 = phi %struct.NodeInfo** [ %21, %345 ], [ %361, %364 ]
  %370 = icmp ult i64 %346, 56
  br i1 %370, label %417, label %371

371:                                              ; preds = %366, %371
  %372 = phi %struct.NodeInfo** [ %413, %371 ], [ %367, %366 ]
  %373 = phi i64 [ %414, %371 ], [ %368, %366 ]
  %374 = phi %struct.NodeInfo** [ %415, %371 ], [ %369, %366 ]
  %375 = bitcast %struct.NodeInfo** %374 to i64*
  %376 = load i64, i64* %375, align 8
  %377 = inttoptr i64 %373 to i64*
  store i64 %376, i64* %377, align 8
  %378 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %372, i64 1
  %379 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %374, i64 1
  %380 = bitcast %struct.NodeInfo** %379 to i64*
  %381 = load i64, i64* %380, align 8
  %382 = bitcast %struct.NodeInfo** %378 to i64*
  store i64 %381, i64* %382, align 8
  %383 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %372, i64 2
  %384 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %374, i64 2
  %385 = bitcast %struct.NodeInfo** %384 to i64*
  %386 = load i64, i64* %385, align 8
  %387 = bitcast %struct.NodeInfo** %383 to i64*
  store i64 %386, i64* %387, align 8
  %388 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %372, i64 3
  %389 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %374, i64 3
  %390 = bitcast %struct.NodeInfo** %389 to i64*
  %391 = load i64, i64* %390, align 8
  %392 = bitcast %struct.NodeInfo** %388 to i64*
  store i64 %391, i64* %392, align 8
  %393 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %372, i64 4
  %394 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %374, i64 4
  %395 = bitcast %struct.NodeInfo** %394 to i64*
  %396 = load i64, i64* %395, align 8
  %397 = bitcast %struct.NodeInfo** %393 to i64*
  store i64 %396, i64* %397, align 8
  %398 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %372, i64 5
  %399 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %374, i64 5
  %400 = bitcast %struct.NodeInfo** %399 to i64*
  %401 = load i64, i64* %400, align 8
  %402 = bitcast %struct.NodeInfo** %398 to i64*
  store i64 %401, i64* %402, align 8
  %403 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %372, i64 6
  %404 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %374, i64 6
  %405 = bitcast %struct.NodeInfo** %404 to i64*
  %406 = load i64, i64* %405, align 8
  %407 = bitcast %struct.NodeInfo** %403 to i64*
  store i64 %406, i64* %407, align 8
  %408 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %372, i64 7
  %409 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %374, i64 7
  %410 = bitcast %struct.NodeInfo** %409 to i64*
  %411 = load i64, i64* %410, align 8
  %412 = bitcast %struct.NodeInfo** %408 to i64*
  store i64 %411, i64* %412, align 8
  %413 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %372, i64 8
  %414 = ptrtoint %struct.NodeInfo** %413 to i64
  %415 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %374, i64 8
  %416 = icmp eq %struct.NodeInfo** %344, %413
  br i1 %416, label %417, label %371

417:                                              ; preds = %371, %366
  %418 = ptrtoint %struct.NodeInfo** %344 to i64
  %419 = load %struct.NodeInfo**, %struct.NodeInfo*** %313, align 8
  br label %420

420:                                              ; preds = %417, %333
  %421 = phi %struct.NodeInfo** [ %419, %417 ], [ %21, %333 ]
  %422 = phi i64 [ %418, %417 ], [ %341, %333 ]
  store i64 %339, i64* %175, align 8
  store i64 %341, i64* %7, align 8
  store i64 %422, i64* %4, align 8
  store i64 %343, i64* %173, align 8
  %423 = icmp eq %struct.NodeInfo** %421, null
  br i1 %423, label %427, label %424

424:                                              ; preds = %420
  %425 = bitcast %struct.NodeInfo** %421 to i8*
  tail call void @_ZdlPv(i8* %425) #13
  %426 = load %struct.NodeInfo**, %struct.NodeInfo*** %6, align 8
  br label %427

427:                                              ; preds = %424, %420, %324, %312
  %428 = phi %struct.NodeInfo** [ %426, %424 ], [ %340, %420 ], [ %326, %324 ], [ %21, %312 ]
  %429 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %428, i64 -1
  %430 = bitcast %struct.NodeInfo** %429 to i64*
  store i64 %185, i64* %430, align 8
  %431 = load %struct.NodeInfo**, %struct.NodeInfo*** %6, align 8
  %432 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %431, i64 -1
  store %struct.NodeInfo** %432, %struct.NodeInfo*** %6, align 8
  %433 = bitcast %struct.NodeInfo** %432 to i64*
  %434 = load i64, i64* %433, align 8
  store %struct.NodeInfo** %431, %struct.NodeInfo*** %6, align 8
  %435 = load %struct.NodeInfo**, %struct.NodeInfo*** %3, align 8
  %436 = load %struct.NodeInfo**, %struct.NodeInfo*** %172, align 8
  %437 = icmp eq %struct.NodeInfo** %435, %436
  %438 = ptrtoint %struct.NodeInfo** %436 to i64
  %439 = bitcast %struct.NodeInfo** %435 to i64*
  br i1 %437, label %440, label %571

440:                                              ; preds = %427
  %441 = load %struct.NodeInfo**, %struct.NodeInfo*** %313, align 8
  %442 = icmp ugt %struct.NodeInfo** %431, %441
  %443 = ptrtoint %struct.NodeInfo** %441 to i64
  br i1 %442, label %444, label %464

444:                                              ; preds = %440
  %445 = ptrtoint %struct.NodeInfo** %431 to i64
  %446 = sub i64 %445, %443
  %447 = ashr exact i64 %446, 3
  %448 = add nsw i64 %447, 1
  %449 = sdiv i64 %448, -2
  %450 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %431, i64 %449
  %451 = ptrtoint %struct.NodeInfo** %435 to i64
  %452 = sub i64 %451, %445
  %453 = ashr exact i64 %452, 3
  %454 = icmp eq i64 %452, 0
  br i1 %454, label %459, label %455

455:                                              ; preds = %444
  %456 = bitcast %struct.NodeInfo** %450 to i8*
  %457 = bitcast %struct.NodeInfo** %431 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %456, i8* align 8 %457, i64 %452, i1 false) #10
  %458 = load %struct.NodeInfo**, %struct.NodeInfo*** %6, align 8
  br label %459

459:                                              ; preds = %455, %444
  %460 = phi %struct.NodeInfo** [ %431, %444 ], [ %458, %455 ]
  %461 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %450, i64 %453
  store %struct.NodeInfo** %461, %struct.NodeInfo*** %3, align 8
  %462 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %460, i64 %449
  store %struct.NodeInfo** %462, %struct.NodeInfo*** %6, align 8
  %463 = bitcast %struct.NodeInfo** %461 to i64*
  br label %571

464:                                              ; preds = %440
  %465 = sub i64 %438, %443
  %466 = ashr exact i64 %465, 2
  %467 = icmp eq i64 %465, 0
  %468 = select i1 %467, i64 1, i64 %466
  %469 = icmp ugt i64 %468, 2305843009213693951
  br i1 %469, label %470, label %471

470:                                              ; preds = %464
  tail call void @abort() #12
  unreachable

471:                                              ; preds = %464
  %472 = lshr i64 %468, 2
  %473 = shl i64 %468, 3
  %474 = tail call i8* @_Znwm(i64 %473) #13
  %475 = bitcast i8* %474 to %struct.NodeInfo**
  %476 = ptrtoint i8* %474 to i64
  %477 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %475, i64 %472
  %478 = ptrtoint %struct.NodeInfo** %477 to i64
  %479 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %475, i64 %468
  %480 = ptrtoint %struct.NodeInfo** %479 to i64
  %481 = ptrtoint %struct.NodeInfo** %431 to i64
  %482 = ptrtoint %struct.NodeInfo** %435 to i64
  %483 = sub i64 %482, %481
  %484 = ashr exact i64 %483, 3
  %485 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %477, i64 %484
  %486 = icmp eq i64 %483, 0
  br i1 %486, label %562, label %487

487:                                              ; preds = %471
  %488 = add i64 %483, -8
  %489 = lshr i64 %488, 3
  %490 = add nuw nsw i64 %489, 1
  %491 = and i64 %490, 7
  %492 = icmp eq i64 %491, 0
  br i1 %492, label %508, label %493

493:                                              ; preds = %487, %493
  %494 = phi %struct.NodeInfo** [ %501, %493 ], [ %477, %487 ]
  %495 = phi i64 [ %502, %493 ], [ %478, %487 ]
  %496 = phi %struct.NodeInfo** [ %503, %493 ], [ %431, %487 ]
  %497 = phi i64 [ %504, %493 ], [ %491, %487 ]
  %498 = bitcast %struct.NodeInfo** %496 to i64*
  %499 = load i64, i64* %498, align 8
  %500 = inttoptr i64 %495 to i64*
  store i64 %499, i64* %500, align 8
  %501 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %494, i64 1
  %502 = ptrtoint %struct.NodeInfo** %501 to i64
  %503 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %496, i64 1
  %504 = add i64 %497, -1
  %505 = icmp eq i64 %504, 0
  br i1 %505, label %506, label %493, !llvm.loop !125

506:                                              ; preds = %493
  %507 = ptrtoint %struct.NodeInfo** %501 to i64
  br label %508

508:                                              ; preds = %487, %506
  %509 = phi %struct.NodeInfo** [ %477, %487 ], [ %501, %506 ]
  %510 = phi i64 [ %478, %487 ], [ %507, %506 ]
  %511 = phi %struct.NodeInfo** [ %431, %487 ], [ %503, %506 ]
  %512 = icmp ult i64 %488, 56
  br i1 %512, label %559, label %513

513:                                              ; preds = %508, %513
  %514 = phi %struct.NodeInfo** [ %555, %513 ], [ %509, %508 ]
  %515 = phi i64 [ %556, %513 ], [ %510, %508 ]
  %516 = phi %struct.NodeInfo** [ %557, %513 ], [ %511, %508 ]
  %517 = bitcast %struct.NodeInfo** %516 to i64*
  %518 = load i64, i64* %517, align 8
  %519 = inttoptr i64 %515 to i64*
  store i64 %518, i64* %519, align 8
  %520 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %514, i64 1
  %521 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %516, i64 1
  %522 = bitcast %struct.NodeInfo** %521 to i64*
  %523 = load i64, i64* %522, align 8
  %524 = bitcast %struct.NodeInfo** %520 to i64*
  store i64 %523, i64* %524, align 8
  %525 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %514, i64 2
  %526 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %516, i64 2
  %527 = bitcast %struct.NodeInfo** %526 to i64*
  %528 = load i64, i64* %527, align 8
  %529 = bitcast %struct.NodeInfo** %525 to i64*
  store i64 %528, i64* %529, align 8
  %530 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %514, i64 3
  %531 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %516, i64 3
  %532 = bitcast %struct.NodeInfo** %531 to i64*
  %533 = load i64, i64* %532, align 8
  %534 = bitcast %struct.NodeInfo** %530 to i64*
  store i64 %533, i64* %534, align 8
  %535 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %514, i64 4
  %536 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %516, i64 4
  %537 = bitcast %struct.NodeInfo** %536 to i64*
  %538 = load i64, i64* %537, align 8
  %539 = bitcast %struct.NodeInfo** %535 to i64*
  store i64 %538, i64* %539, align 8
  %540 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %514, i64 5
  %541 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %516, i64 5
  %542 = bitcast %struct.NodeInfo** %541 to i64*
  %543 = load i64, i64* %542, align 8
  %544 = bitcast %struct.NodeInfo** %540 to i64*
  store i64 %543, i64* %544, align 8
  %545 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %514, i64 6
  %546 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %516, i64 6
  %547 = bitcast %struct.NodeInfo** %546 to i64*
  %548 = load i64, i64* %547, align 8
  %549 = bitcast %struct.NodeInfo** %545 to i64*
  store i64 %548, i64* %549, align 8
  %550 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %514, i64 7
  %551 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %516, i64 7
  %552 = bitcast %struct.NodeInfo** %551 to i64*
  %553 = load i64, i64* %552, align 8
  %554 = bitcast %struct.NodeInfo** %550 to i64*
  store i64 %553, i64* %554, align 8
  %555 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %514, i64 8
  %556 = ptrtoint %struct.NodeInfo** %555 to i64
  %557 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %516, i64 8
  %558 = icmp eq %struct.NodeInfo** %485, %555
  br i1 %558, label %559, label %513

559:                                              ; preds = %513, %508
  %560 = ptrtoint %struct.NodeInfo** %485 to i64
  %561 = load %struct.NodeInfo**, %struct.NodeInfo*** %313, align 8
  br label %562

562:                                              ; preds = %559, %471
  %563 = phi %struct.NodeInfo** [ %561, %559 ], [ %441, %471 ]
  %564 = phi i64 [ %560, %559 ], [ %478, %471 ]
  store i64 %476, i64* %175, align 8
  store i64 %478, i64* %7, align 8
  store i64 %564, i64* %4, align 8
  store i64 %480, i64* %173, align 8
  %565 = icmp eq %struct.NodeInfo** %563, null
  %566 = inttoptr i64 %564 to i64*
  br i1 %565, label %571, label %567

567:                                              ; preds = %562
  %568 = bitcast %struct.NodeInfo** %563 to i8*
  tail call void @_ZdlPv(i8* %568) #13
  %569 = bitcast %struct.NodeInfo*** %3 to i64**
  %570 = load i64*, i64** %569, align 8
  br label %571

571:                                              ; preds = %567, %562, %459, %427
  %572 = phi i64* [ %570, %567 ], [ %566, %562 ], [ %463, %459 ], [ %439, %427 ]
  store i64 %434, i64* %572, align 8
  %573 = load %struct.NodeInfo**, %struct.NodeInfo*** %3, align 8
  %574 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %573, i64 1
  store %struct.NodeInfo** %574, %struct.NodeInfo*** %3, align 8
  br label %790

575:                                              ; preds = %171
  %576 = ashr exact i64 %177, 2
  %577 = icmp eq i64 %177, 0
  %578 = select i1 %577, i64 1, i64 %576
  %579 = icmp ugt i64 %578, 2305843009213693951
  br i1 %579, label %580, label %581

580:                                              ; preds = %575
  tail call void @abort() #12
  unreachable

581:                                              ; preds = %575
  %582 = shl i64 %578, 3
  %583 = tail call i8* @_Znwm(i64 %582) #13
  %584 = bitcast i8* %583 to %struct.NodeInfo**
  %585 = ptrtoint i8* %583 to i64
  %586 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %584, i64 %10
  %587 = ptrtoint %struct.NodeInfo** %586 to i64
  %588 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %584, i64 %578
  %589 = ptrtoint %struct.NodeInfo** %588 to i64
  %590 = tail call i8* @_Znwm(i64 4080) #13
  %591 = ptrtoint i8* %590 to i64
  %592 = icmp eq i64 %10, %578
  br i1 %592, label %593, label %621

593:                                              ; preds = %581
  %594 = icmp ugt %struct.NodeInfo** %586, %584
  br i1 %594, label %595, label %602

595:                                              ; preds = %593
  %596 = sub i64 %587, %585
  %597 = ashr exact i64 %596, 3
  %598 = add nsw i64 %597, 1
  %599 = sdiv i64 %598, -2
  %600 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %586, i64 %599
  %601 = ptrtoint %struct.NodeInfo** %600 to i64
  br label %621

602:                                              ; preds = %593
  %603 = sub i64 %589, %585
  %604 = ashr exact i64 %603, 2
  %605 = icmp eq i64 %603, 0
  %606 = select i1 %605, i64 1, i64 %604
  %607 = icmp ugt i64 %606, 2305843009213693951
  br i1 %607, label %608, label %609

608:                                              ; preds = %602
  tail call void @abort() #12
  unreachable

609:                                              ; preds = %602
  %610 = lshr i64 %606, 2
  %611 = shl i64 %606, 3
  %612 = tail call i8* @_Znwm(i64 %611) #13
  %613 = bitcast i8* %612 to %struct.NodeInfo**
  %614 = ptrtoint i8* %612 to i64
  %615 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %613, i64 %610
  %616 = ptrtoint %struct.NodeInfo** %615 to i64
  %617 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %613, i64 %606
  %618 = ptrtoint %struct.NodeInfo** %617 to i64
  tail call void @_ZdlPv(i8* nonnull %583) #13
  %619 = load %struct.NodeInfo**, %struct.NodeInfo*** %3, align 8
  %620 = load %struct.NodeInfo**, %struct.NodeInfo*** %6, align 8
  br label %621

621:                                              ; preds = %609, %595, %581
  %622 = phi %struct.NodeInfo** [ %21, %595 ], [ %620, %609 ], [ %21, %581 ]
  %623 = phi %struct.NodeInfo** [ %22, %595 ], [ %619, %609 ], [ %22, %581 ]
  %624 = phi i64 [ %589, %595 ], [ %618, %609 ], [ %589, %581 ]
  %625 = phi %struct.NodeInfo** [ %600, %595 ], [ %615, %609 ], [ %586, %581 ]
  %626 = phi i64 [ %601, %595 ], [ %616, %609 ], [ %587, %581 ]
  %627 = phi i64 [ %585, %595 ], [ %614, %609 ], [ %585, %581 ]
  %628 = bitcast %struct.NodeInfo** %625 to i64*
  store i64 %591, i64* %628, align 8
  %629 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %625, i64 1
  %630 = ptrtoint %struct.NodeInfo** %629 to i64
  %631 = icmp eq %struct.NodeInfo** %623, %622
  br i1 %631, label %634, label %646

632:                                              ; preds = %778
  %633 = ptrtoint %struct.NodeInfo** %783 to i64
  br label %634

634:                                              ; preds = %632, %621
  %635 = phi i64 [ %624, %621 ], [ %779, %632 ]
  %636 = phi i64 [ %630, %621 ], [ %780, %632 ]
  %637 = phi i64 [ %626, %621 ], [ %633, %632 ]
  %638 = phi i64 [ %627, %621 ], [ %781, %632 ]
  %639 = getelementptr inbounds %"class.std::__1::queue", %"class.std::__1::queue"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %640 = load %struct.NodeInfo**, %struct.NodeInfo*** %639, align 8
  store i64 %638, i64* %175, align 8
  store i64 %637, i64* %7, align 8
  store i64 %636, i64* %4, align 8
  store i64 %635, i64* %173, align 8
  %641 = icmp eq %struct.NodeInfo** %640, null
  %642 = inttoptr i64 %636 to %struct.NodeInfo**
  br i1 %641, label %790, label %643

643:                                              ; preds = %634
  %644 = bitcast %struct.NodeInfo** %640 to i8*
  tail call void @_ZdlPv(i8* %644) #13
  %645 = load %struct.NodeInfo**, %struct.NodeInfo*** %3, align 8
  br label %790

646:                                              ; preds = %621, %778
  %647 = phi %struct.NodeInfo** [ %652, %778 ], [ %623, %621 ]
  %648 = phi i64 [ %781, %778 ], [ %627, %621 ]
  %649 = phi i64 [ %787, %778 ], [ %626, %621 ]
  %650 = phi i64 [ %780, %778 ], [ %630, %621 ]
  %651 = phi i64 [ %779, %778 ], [ %624, %621 ]
  %652 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %647, i64 -1
  %653 = inttoptr i64 %649 to %struct.NodeInfo**
  %654 = inttoptr i64 %648 to %struct.NodeInfo**
  %655 = icmp eq %struct.NodeInfo** %653, %654
  br i1 %655, label %656, label %778

656:                                              ; preds = %646
  %657 = inttoptr i64 %650 to %struct.NodeInfo**
  %658 = inttoptr i64 %651 to %struct.NodeInfo**
  %659 = icmp ult %struct.NodeInfo** %657, %658
  br i1 %659, label %660, label %677

660:                                              ; preds = %656
  %661 = sub i64 %651, %650
  %662 = ashr exact i64 %661, 3
  %663 = add nsw i64 %662, 1
  %664 = sdiv i64 %663, 2
  %665 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %657, i64 %664
  %666 = sub i64 %650, %649
  %667 = icmp eq i64 %666, 0
  br i1 %667, label %674, label %668

668:                                              ; preds = %660
  %669 = ashr exact i64 %666, 3
  %670 = sub nsw i64 0, %669
  %671 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %665, i64 %670
  %672 = bitcast %struct.NodeInfo** %671 to i8*
  %673 = inttoptr i64 %649 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %672, i8* align 8 %673, i64 %666, i1 false) #10
  br label %674

674:                                              ; preds = %668, %660
  %675 = phi %struct.NodeInfo** [ %671, %668 ], [ %665, %660 ]
  %676 = ptrtoint %struct.NodeInfo** %665 to i64
  br label %778

677:                                              ; preds = %656
  %678 = sub i64 %651, %648
  %679 = ashr exact i64 %678, 2
  %680 = icmp eq i64 %678, 0
  %681 = select i1 %680, i64 1, i64 %679
  %682 = icmp ugt i64 %681, 2305843009213693951
  br i1 %682, label %683, label %684

683:                                              ; preds = %677
  tail call void @abort() #12
  unreachable

684:                                              ; preds = %677
  %685 = add nuw nsw i64 %681, 3
  %686 = lshr i64 %685, 2
  %687 = shl i64 %681, 3
  %688 = tail call i8* @_Znwm(i64 %687) #13
  %689 = bitcast i8* %688 to %struct.NodeInfo**
  %690 = ptrtoint i8* %688 to i64
  %691 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %689, i64 %686
  %692 = ptrtoint %struct.NodeInfo** %691 to i64
  %693 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %689, i64 %681
  %694 = ptrtoint %struct.NodeInfo** %693 to i64
  %695 = sub i64 %650, %649
  %696 = ashr exact i64 %695, 3
  %697 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %691, i64 %696
  %698 = icmp eq i64 %695, 0
  br i1 %698, label %773, label %699

699:                                              ; preds = %684
  %700 = add i64 %695, -8
  %701 = lshr i64 %700, 3
  %702 = add nuw nsw i64 %701, 1
  %703 = and i64 %702, 7
  %704 = icmp eq i64 %703, 0
  br i1 %704, label %720, label %705

705:                                              ; preds = %699, %705
  %706 = phi %struct.NodeInfo** [ %713, %705 ], [ %691, %699 ]
  %707 = phi i64 [ %714, %705 ], [ %692, %699 ]
  %708 = phi %struct.NodeInfo** [ %715, %705 ], [ %653, %699 ]
  %709 = phi i64 [ %716, %705 ], [ %703, %699 ]
  %710 = bitcast %struct.NodeInfo** %708 to i64*
  %711 = load i64, i64* %710, align 8
  %712 = inttoptr i64 %707 to i64*
  store i64 %711, i64* %712, align 8
  %713 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %706, i64 1
  %714 = ptrtoint %struct.NodeInfo** %713 to i64
  %715 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %708, i64 1
  %716 = add i64 %709, -1
  %717 = icmp eq i64 %716, 0
  br i1 %717, label %718, label %705, !llvm.loop !126

718:                                              ; preds = %705
  %719 = ptrtoint %struct.NodeInfo** %713 to i64
  br label %720

720:                                              ; preds = %699, %718
  %721 = phi %struct.NodeInfo** [ %691, %699 ], [ %713, %718 ]
  %722 = phi i64 [ %692, %699 ], [ %719, %718 ]
  %723 = phi %struct.NodeInfo** [ %653, %699 ], [ %715, %718 ]
  %724 = icmp ult i64 %700, 56
  br i1 %724, label %771, label %725

725:                                              ; preds = %720, %725
  %726 = phi %struct.NodeInfo** [ %767, %725 ], [ %721, %720 ]
  %727 = phi i64 [ %768, %725 ], [ %722, %720 ]
  %728 = phi %struct.NodeInfo** [ %769, %725 ], [ %723, %720 ]
  %729 = bitcast %struct.NodeInfo** %728 to i64*
  %730 = load i64, i64* %729, align 8
  %731 = inttoptr i64 %727 to i64*
  store i64 %730, i64* %731, align 8
  %732 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %726, i64 1
  %733 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %728, i64 1
  %734 = bitcast %struct.NodeInfo** %733 to i64*
  %735 = load i64, i64* %734, align 8
  %736 = bitcast %struct.NodeInfo** %732 to i64*
  store i64 %735, i64* %736, align 8
  %737 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %726, i64 2
  %738 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %728, i64 2
  %739 = bitcast %struct.NodeInfo** %738 to i64*
  %740 = load i64, i64* %739, align 8
  %741 = bitcast %struct.NodeInfo** %737 to i64*
  store i64 %740, i64* %741, align 8
  %742 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %726, i64 3
  %743 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %728, i64 3
  %744 = bitcast %struct.NodeInfo** %743 to i64*
  %745 = load i64, i64* %744, align 8
  %746 = bitcast %struct.NodeInfo** %742 to i64*
  store i64 %745, i64* %746, align 8
  %747 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %726, i64 4
  %748 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %728, i64 4
  %749 = bitcast %struct.NodeInfo** %748 to i64*
  %750 = load i64, i64* %749, align 8
  %751 = bitcast %struct.NodeInfo** %747 to i64*
  store i64 %750, i64* %751, align 8
  %752 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %726, i64 5
  %753 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %728, i64 5
  %754 = bitcast %struct.NodeInfo** %753 to i64*
  %755 = load i64, i64* %754, align 8
  %756 = bitcast %struct.NodeInfo** %752 to i64*
  store i64 %755, i64* %756, align 8
  %757 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %726, i64 6
  %758 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %728, i64 6
  %759 = bitcast %struct.NodeInfo** %758 to i64*
  %760 = load i64, i64* %759, align 8
  %761 = bitcast %struct.NodeInfo** %757 to i64*
  store i64 %760, i64* %761, align 8
  %762 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %726, i64 7
  %763 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %728, i64 7
  %764 = bitcast %struct.NodeInfo** %763 to i64*
  %765 = load i64, i64* %764, align 8
  %766 = bitcast %struct.NodeInfo** %762 to i64*
  store i64 %765, i64* %766, align 8
  %767 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %726, i64 8
  %768 = ptrtoint %struct.NodeInfo** %767 to i64
  %769 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %728, i64 8
  %770 = icmp eq %struct.NodeInfo** %697, %767
  br i1 %770, label %771, label %725

771:                                              ; preds = %725, %720
  %772 = ptrtoint %struct.NodeInfo** %697 to i64
  br label %773

773:                                              ; preds = %771, %684
  %774 = phi i64 [ %772, %771 ], [ %692, %684 ]
  %775 = icmp eq i64 %649, 0
  br i1 %775, label %778, label %776

776:                                              ; preds = %773
  %777 = inttoptr i64 %649 to i8*
  tail call void @_ZdlPv(i8* %777) #13
  br label %778

778:                                              ; preds = %776, %773, %674, %646
  %779 = phi i64 [ %651, %674 ], [ %694, %773 ], [ %694, %776 ], [ %651, %646 ]
  %780 = phi i64 [ %676, %674 ], [ %774, %773 ], [ %774, %776 ], [ %650, %646 ]
  %781 = phi i64 [ %648, %674 ], [ %690, %773 ], [ %690, %776 ], [ %648, %646 ]
  %782 = phi %struct.NodeInfo** [ %675, %674 ], [ %691, %773 ], [ %691, %776 ], [ %653, %646 ]
  %783 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %782, i64 -1
  %784 = bitcast %struct.NodeInfo** %652 to i64*
  %785 = load i64, i64* %784, align 8
  %786 = bitcast %struct.NodeInfo** %783 to i64*
  store i64 %785, i64* %786, align 8
  %787 = ptrtoint %struct.NodeInfo** %783 to i64
  %788 = load %struct.NodeInfo**, %struct.NodeInfo*** %6, align 8
  %789 = icmp eq %struct.NodeInfo** %652, %788
  br i1 %789, label %632, label %646

790:                                              ; preds = %643, %634, %571, %308, %167, %2
  %791 = phi %struct.NodeInfo** [ %645, %643 ], [ %642, %634 ], [ %574, %571 ], [ %311, %308 ], [ %170, %167 ], [ %22, %2 ]
  %792 = load i64, i64* %17, align 8
  %793 = load i64, i64* %15, align 8
  %794 = add i64 %793, %792
  %795 = load %struct.NodeInfo**, %struct.NodeInfo*** %6, align 8
  %796 = icmp eq %struct.NodeInfo** %791, %795
  br i1 %796, label %804, label %797

797:                                              ; preds = %790
  %798 = udiv i64 %794, 170
  %799 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %795, i64 %798
  %800 = load %struct.NodeInfo*, %struct.NodeInfo** %799, align 8
  %801 = urem i64 %794, 170
  %802 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %800, i64 %801
  %803 = bitcast %struct.NodeInfo* %802 to i8*
  br label %804

804:                                              ; preds = %790, %797
  %805 = phi i8* [ %803, %797 ], [ null, %790 ]
  %806 = bitcast %struct.NodeInfo* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %805, i8* align 8 %806, i64 24, i1 false) #10
  %807 = load i64, i64* %17, align 8
  %808 = add i64 %807, 1
  store i64 %808, i64* %17, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZNSt3__112__deque_baseIZN3jxl12_GLOBAL__N_113MakeFixedTreeEiRKNS_6vectorIiNS_9allocatorIiEEEENS1_9PredictorEmE8NodeInfoNS4_ISA_EEED2Ev(%"class.std::__1::__deque_base"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 0, i32 1
  %3 = load %struct.NodeInfo**, %struct.NodeInfo*** %2, align 8
  %4 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = udiv i64 %5, 170
  %7 = urem i64 %5, 170
  %8 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %3, i64 %6
  %9 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 0, i32 2
  %10 = load %struct.NodeInfo**, %struct.NodeInfo*** %9, align 8
  %11 = icmp eq %struct.NodeInfo** %10, %3
  %12 = ptrtoint %struct.NodeInfo** %10 to i64
  %13 = ptrtoint %struct.NodeInfo** %3 to i64
  br i1 %11, label %14, label %16

14:                                               ; preds = %1
  %15 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 2, i32 0, i32 0
  br label %28

16:                                               ; preds = %1
  %17 = load %struct.NodeInfo*, %struct.NodeInfo** %8, align 8
  %18 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %17, i64 %7
  %19 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 2, i32 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = add i64 %20, %5
  %22 = udiv i64 %21, 170
  %23 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %3, i64 %22
  %24 = load %struct.NodeInfo*, %struct.NodeInfo** %23, align 8
  %25 = urem i64 %21, 170
  %26 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %24, i64 %25
  %27 = icmp eq %struct.NodeInfo* %26, %18
  br i1 %27, label %28, label %34

28:                                               ; preds = %47, %16, %14
  %29 = phi i64* [ %15, %14 ], [ %19, %16 ], [ %19, %47 ]
  store i64 0, i64* %29, align 8
  %30 = bitcast %struct.NodeInfo*** %9 to i64*
  %31 = sub i64 %12, %13
  %32 = ashr exact i64 %31, 3
  %33 = icmp ugt i64 %32, 2
  br i1 %33, label %52, label %65

34:                                               ; preds = %16, %47
  %35 = phi %struct.NodeInfo* [ %50, %47 ], [ %18, %16 ]
  %36 = phi %struct.NodeInfo** [ %49, %47 ], [ %8, %16 ]
  %37 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %35, i64 1
  %38 = ptrtoint %struct.NodeInfo* %37 to i64
  %39 = bitcast %struct.NodeInfo** %36 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = sub i64 %38, %40
  %42 = icmp eq i64 %41, 4080
  br i1 %42, label %43, label %47

43:                                               ; preds = %34
  %44 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %36, i64 1
  %45 = bitcast %struct.NodeInfo** %44 to i64*
  %46 = load i64, i64* %45, align 8
  br label %47

47:                                               ; preds = %43, %34
  %48 = phi i64 [ %46, %43 ], [ %38, %34 ]
  %49 = phi %struct.NodeInfo** [ %44, %43 ], [ %36, %34 ]
  %50 = inttoptr i64 %48 to %struct.NodeInfo*
  %51 = icmp eq %struct.NodeInfo* %26, %50
  br i1 %51, label %28, label %34

52:                                               ; preds = %28, %52
  %53 = phi %struct.NodeInfo** [ %57, %52 ], [ %3, %28 ]
  %54 = bitcast %struct.NodeInfo** %53 to i8**
  %55 = load i8*, i8** %54, align 8
  tail call void @_ZdlPv(i8* %55) #13
  %56 = load %struct.NodeInfo**, %struct.NodeInfo*** %2, align 8
  %57 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %56, i64 1
  store %struct.NodeInfo** %57, %struct.NodeInfo*** %2, align 8
  %58 = load i64, i64* %30, align 8
  %59 = ptrtoint %struct.NodeInfo** %57 to i64
  %60 = sub i64 %58, %59
  %61 = ashr exact i64 %60, 3
  %62 = icmp ugt i64 %61, 2
  br i1 %62, label %52, label %63

63:                                               ; preds = %52
  %64 = inttoptr i64 %58 to %struct.NodeInfo**
  br label %65

65:                                               ; preds = %63, %28
  %66 = phi %struct.NodeInfo** [ %10, %28 ], [ %64, %63 ]
  %67 = phi %struct.NodeInfo** [ %3, %28 ], [ %57, %63 ]
  %68 = phi i64 [ %32, %28 ], [ %61, %63 ]
  switch i64 %68, label %72 [
    i64 1, label %70
    i64 2, label %69
  ]

69:                                               ; preds = %65
  br label %70

70:                                               ; preds = %65, %69
  %71 = phi i64 [ 170, %69 ], [ 85, %65 ]
  store i64 %71, i64* %4, align 8
  br label %72

72:                                               ; preds = %70, %65
  %73 = icmp eq %struct.NodeInfo** %67, %66
  br i1 %73, label %83, label %74

74:                                               ; preds = %72, %74
  %75 = phi %struct.NodeInfo** [ %78, %74 ], [ %67, %72 ]
  %76 = bitcast %struct.NodeInfo** %75 to i8**
  %77 = load i8*, i8** %76, align 8
  tail call void @_ZdlPv(i8* %77) #13
  %78 = getelementptr inbounds %struct.NodeInfo*, %struct.NodeInfo** %75, i64 1
  %79 = icmp eq %struct.NodeInfo** %78, %66
  br i1 %79, label %80, label %74

80:                                               ; preds = %74
  %81 = load %struct.NodeInfo**, %struct.NodeInfo*** %2, align 8
  %82 = load %struct.NodeInfo**, %struct.NodeInfo*** %9, align 8
  br label %83

83:                                               ; preds = %80, %72
  %84 = phi %struct.NodeInfo** [ %82, %80 ], [ %66, %72 ]
  %85 = phi %struct.NodeInfo** [ %81, %80 ], [ %66, %72 ]
  %86 = icmp eq %struct.NodeInfo** %84, %85
  br i1 %86, label %95, label %87

87:                                               ; preds = %83
  %88 = ptrtoint %struct.NodeInfo** %85 to i64
  %89 = getelementptr %struct.NodeInfo*, %struct.NodeInfo** %84, i64 -1
  %90 = ptrtoint %struct.NodeInfo** %89 to i64
  %91 = sub i64 %90, %88
  %92 = lshr i64 %91, 3
  %93 = xor i64 %92, -1
  %94 = getelementptr %struct.NodeInfo*, %struct.NodeInfo** %84, i64 %93
  store %struct.NodeInfo** %94, %struct.NodeInfo*** %9, align 8
  br label %95

95:                                               ; preds = %87, %83
  %96 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 0, i32 0
  %97 = load %struct.NodeInfo**, %struct.NodeInfo*** %96, align 8
  %98 = icmp eq %struct.NodeInfo** %97, null
  br i1 %98, label %101, label %99

99:                                               ; preds = %95
  %100 = bitcast %struct.NodeInfo** %97 to i8*
  tail call void @_ZdlPv(i8* %100) #13
  br label %101

101:                                              ; preds = %95, %99
  ret void
}

declare void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"*, i64, i64, i64) unnamed_addr #2

declare float @_ZNK3jxl9Histogram14ShannonEntropyEv(%"struct.jxl::Histogram"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @llvm.assume(i1) #10

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.156"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i32** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i32*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i32, i32* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i32, i32* %13, i64 %18
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #10
  %26 = ptrtoint i32* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.156"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.156"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #12
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #12
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %38 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #13
  %54 = bitcast i8* %53 to i32*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi i32* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds i32, i32* %57, i64 %33
  %59 = getelementptr inbounds i32, i32* %57, i64 %56
  %60 = getelementptr inbounds i32, i32* %58, i64 %1
  %61 = bitcast i32* %58 to i8*
  %62 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %62, i1 false) #10
  %63 = ptrtoint i32* %59 to i64
  %64 = ptrtoint i32* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %0, i64 0, i32 0, i32 0
  %66 = load i32*, i32** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint i32* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 2
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds i32, i32* %58, i64 %71
  %73 = ptrtoint i32* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast i32* %72 to i8*
  %77 = bitcast i32* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #10
  %78 = load i32*, i32** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi i32* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq i32* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast i32* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #13
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #6

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl6detail7PredictILi2EEENS_16PredictionResultEPNSt3__16vectorIiNS3_9allocatorIiEEEEmPKilmmNS_9PredictorEPKNS_12MATreeLookupEPKNS_7ChannelEPNS_8weighted5StateEPl(%"struct.jxl::PredictionResult"* noalias sret, %"class.std::__1::vector.156"*, i64, i32* noalias, i64, i64, i64, i32, %"class.jxl::MATreeLookup"*, %"class.jxl::Channel"*, %"struct.jxl::weighted::State"*, i64*) local_unnamed_addr #5 comdat {
  %13 = sub i64 0, %4
  %14 = alloca [14 x i64], align 16
  %15 = icmp ne i64 %5, 0
  br i1 %15, label %22, label %16

16:                                               ; preds = %12
  %17 = icmp eq i64 %6, 0
  br i1 %17, label %78, label %18

18:                                               ; preds = %16
  %19 = getelementptr inbounds i32, i32* %3, i64 %13
  %20 = load i32, i32* %19, align 4
  %21 = sext i32 %20 to i64
  br label %35

22:                                               ; preds = %12
  %23 = getelementptr inbounds i32, i32* %3, i64 -1
  %24 = load i32, i32* %23, align 4
  %25 = sext i32 %24 to i64
  %26 = icmp eq i64 %6, 0
  br i1 %26, label %47, label %27

27:                                               ; preds = %22
  %28 = getelementptr inbounds i32, i32* %3, i64 %13
  %29 = load i32, i32* %28, align 4
  %30 = sext i32 %29 to i64
  %31 = xor i64 %4, -1
  %32 = getelementptr inbounds i32, i32* %3, i64 %31
  %33 = load i32, i32* %32, align 4
  %34 = sext i32 %33 to i64
  br label %35

35:                                               ; preds = %18, %27
  %36 = phi i64 [ %30, %27 ], [ %21, %18 ]
  %37 = phi i32 [ %24, %27 ], [ %20, %18 ]
  %38 = phi i64 [ %25, %27 ], [ %21, %18 ]
  %39 = phi i64 [ %34, %27 ], [ %21, %18 ]
  %40 = add i64 %5, 1
  %41 = icmp ult i64 %40, %2
  br i1 %41, label %42, label %47

42:                                               ; preds = %35
  %43 = sub nsw i64 1, %4
  %44 = getelementptr inbounds i32, i32* %3, i64 %43
  %45 = load i32, i32* %44, align 4
  %46 = sext i32 %45 to i64
  br label %47

47:                                               ; preds = %22, %35, %42
  %48 = phi i64 [ %39, %42 ], [ %39, %35 ], [ %25, %22 ]
  %49 = phi i1 [ true, %42 ], [ true, %35 ], [ false, %22 ]
  %50 = phi i64 [ %38, %42 ], [ %38, %35 ], [ %25, %22 ]
  %51 = phi i32 [ %37, %42 ], [ %37, %35 ], [ %24, %22 ]
  %52 = phi i64 [ %36, %42 ], [ %36, %35 ], [ %25, %22 ]
  %53 = phi i64 [ %46, %42 ], [ %36, %35 ], [ %25, %22 ]
  %54 = icmp ugt i64 %5, 1
  br i1 %54, label %55, label %59

55:                                               ; preds = %47
  %56 = getelementptr inbounds i32, i32* %3, i64 -2
  %57 = load i32, i32* %56, align 4
  %58 = sext i32 %57 to i64
  br label %59

59:                                               ; preds = %47, %55
  %60 = phi i64 [ %58, %55 ], [ %50, %47 ]
  %61 = icmp ugt i64 %6, 1
  br i1 %61, label %62, label %68

62:                                               ; preds = %59
  %63 = shl i64 %4, 1
  %64 = sub i64 0, %63
  %65 = getelementptr inbounds i32, i32* %3, i64 %64
  %66 = load i32, i32* %65, align 4
  %67 = sext i32 %66 to i64
  br label %68

68:                                               ; preds = %59, %62
  %69 = phi i64 [ %67, %62 ], [ %52, %59 ]
  %70 = add i64 %5, 2
  %71 = icmp ult i64 %70, %2
  %72 = and i1 %71, %49
  br i1 %72, label %73, label %78

73:                                               ; preds = %68
  %74 = sub nsw i64 2, %4
  %75 = getelementptr inbounds i32, i32* %3, i64 %74
  %76 = load i32, i32* %75, align 4
  %77 = sext i32 %76 to i64
  br label %78

78:                                               ; preds = %16, %68, %73
  %79 = phi i64 [ %69, %73 ], [ %69, %68 ], [ 0, %16 ]
  %80 = phi i64 [ %53, %73 ], [ %53, %68 ], [ 0, %16 ]
  %81 = phi i64 [ %52, %73 ], [ %52, %68 ], [ 0, %16 ]
  %82 = phi i32 [ %51, %73 ], [ %51, %68 ], [ 0, %16 ]
  %83 = phi i64 [ %50, %73 ], [ %50, %68 ], [ 0, %16 ]
  %84 = phi i64 [ %48, %73 ], [ %48, %68 ], [ 0, %16 ]
  %85 = phi i64 [ %60, %73 ], [ %60, %68 ], [ 0, %16 ]
  %86 = phi i64 [ %77, %73 ], [ %53, %68 ], [ 0, %16 ]
  %87 = and i64 %6, 1
  %88 = icmp ne i64 %87, 0
  %89 = add i64 %2, 2
  %90 = select i1 %88, i64 %89, i64 0
  %91 = add i64 %90, %5
  %92 = add i64 %2, -1
  %93 = icmp ugt i64 %92, %5
  %94 = zext i1 %93 to i64
  %95 = add i64 %91, %94
  %96 = zext i1 %15 to i64
  %97 = sub i64 %91, %96
  %98 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 2, i64 0, i32 0, i32 0
  %99 = load i32*, i32** %98, align 8
  %100 = getelementptr inbounds i32, i32* %99, i64 %91
  %101 = load i32, i32* %100, align 4
  %102 = getelementptr inbounds i32, i32* %99, i64 %95
  %103 = load i32, i32* %102, align 4
  %104 = add i32 %103, %101
  %105 = getelementptr inbounds i32, i32* %99, i64 %97
  %106 = load i32, i32* %105, align 4
  %107 = add i32 %104, %106
  %108 = zext i32 %107 to i64
  %109 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 9, i64 0
  %110 = load i32, i32* %109, align 4
  %111 = add nuw nsw i64 %108, 1
  %112 = tail call i64 @llvm.ctlz.i64(i64 %111, i1 true) #10, !range !28
  %113 = trunc i64 %112 to i32
  %114 = sub nsw i32 58, %113
  %115 = icmp sgt i32 %114, 0
  %116 = select i1 %115, i32 %114, i32 0
  %117 = zext i32 %116 to i64
  %118 = lshr i64 %108, %117
  %119 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 5, i64 %118
  %120 = load i32, i32* %119, align 4
  %121 = mul i32 %120, %110
  %122 = lshr i32 %121, %116
  %123 = add i32 %122, 4
  %124 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 2, i64 1, i32 0, i32 0
  %125 = load i32*, i32** %124, align 8
  %126 = getelementptr inbounds i32, i32* %125, i64 %91
  %127 = load i32, i32* %126, align 4
  %128 = getelementptr inbounds i32, i32* %125, i64 %95
  %129 = load i32, i32* %128, align 4
  %130 = add i32 %129, %127
  %131 = getelementptr inbounds i32, i32* %125, i64 %97
  %132 = load i32, i32* %131, align 4
  %133 = add i32 %130, %132
  %134 = zext i32 %133 to i64
  %135 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 9, i64 1
  %136 = load i32, i32* %135, align 4
  %137 = add nuw nsw i64 %134, 1
  %138 = tail call i64 @llvm.ctlz.i64(i64 %137, i1 true) #10, !range !28
  %139 = trunc i64 %138 to i32
  %140 = sub nsw i32 58, %139
  %141 = icmp sgt i32 %140, 0
  %142 = select i1 %141, i32 %140, i32 0
  %143 = zext i32 %142 to i64
  %144 = lshr i64 %134, %143
  %145 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 5, i64 %144
  %146 = load i32, i32* %145, align 4
  %147 = mul i32 %146, %136
  %148 = lshr i32 %147, %142
  %149 = add i32 %148, 4
  %150 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 2, i64 2, i32 0, i32 0
  %151 = load i32*, i32** %150, align 8
  %152 = getelementptr inbounds i32, i32* %151, i64 %91
  %153 = load i32, i32* %152, align 4
  %154 = getelementptr inbounds i32, i32* %151, i64 %95
  %155 = load i32, i32* %154, align 4
  %156 = add i32 %155, %153
  %157 = getelementptr inbounds i32, i32* %151, i64 %97
  %158 = load i32, i32* %157, align 4
  %159 = add i32 %156, %158
  %160 = zext i32 %159 to i64
  %161 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 9, i64 2
  %162 = load i32, i32* %161, align 4
  %163 = add nuw nsw i64 %160, 1
  %164 = tail call i64 @llvm.ctlz.i64(i64 %163, i1 true) #10, !range !28
  %165 = trunc i64 %164 to i32
  %166 = sub nsw i32 58, %165
  %167 = icmp sgt i32 %166, 0
  %168 = select i1 %167, i32 %166, i32 0
  %169 = zext i32 %168 to i64
  %170 = lshr i64 %160, %169
  %171 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 5, i64 %170
  %172 = load i32, i32* %171, align 4
  %173 = mul i32 %172, %162
  %174 = lshr i32 %173, %168
  %175 = add i32 %174, 4
  %176 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 2, i64 3, i32 0, i32 0
  %177 = load i32*, i32** %176, align 8
  %178 = getelementptr inbounds i32, i32* %177, i64 %91
  %179 = load i32, i32* %178, align 4
  %180 = getelementptr inbounds i32, i32* %177, i64 %95
  %181 = load i32, i32* %180, align 4
  %182 = add i32 %181, %179
  %183 = getelementptr inbounds i32, i32* %177, i64 %97
  %184 = load i32, i32* %183, align 4
  %185 = add i32 %182, %184
  %186 = zext i32 %185 to i64
  %187 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 9, i64 3
  %188 = load i32, i32* %187, align 4
  %189 = add nuw nsw i64 %186, 1
  %190 = tail call i64 @llvm.ctlz.i64(i64 %189, i1 true) #10, !range !28
  %191 = trunc i64 %190 to i32
  %192 = sub nsw i32 58, %191
  %193 = icmp sgt i32 %192, 0
  %194 = select i1 %193, i32 %192, i32 0
  %195 = zext i32 %194 to i64
  %196 = lshr i64 %186, %195
  %197 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 5, i64 %196
  %198 = load i32, i32* %197, align 4
  %199 = mul i32 %198, %188
  %200 = lshr i32 %199, %194
  %201 = add i32 %200, 4
  %202 = shl nsw i64 %81, 3
  %203 = shl nsw i64 %83, 3
  %204 = shl nsw i64 %80, 3
  %205 = shl nsw i64 %84, 3
  %206 = shl nsw i64 %79, 3
  %207 = icmp eq i64 %5, 0
  br i1 %207, label %208, label %211

208:                                              ; preds = %78
  %209 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 3, i32 0, i32 0
  %210 = load i32*, i32** %209, align 8
  br label %220

211:                                              ; preds = %78
  %212 = select i1 %88, i64 0, i64 %89
  %213 = add i64 %5, -1
  %214 = add i64 %213, %212
  %215 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 3, i32 0, i32 0
  %216 = load i32*, i32** %215, align 8
  %217 = getelementptr inbounds i32, i32* %216, i64 %214
  %218 = load i32, i32* %217, align 4
  %219 = sext i32 %218 to i64
  br label %220

220:                                              ; preds = %211, %208
  %221 = phi i32* [ %216, %211 ], [ %210, %208 ]
  %222 = phi i64 [ %219, %211 ], [ 0, %208 ]
  %223 = getelementptr inbounds i32, i32* %221, i64 %91
  %224 = load i32, i32* %223, align 4
  %225 = sext i32 %224 to i64
  %226 = getelementptr inbounds i32, i32* %221, i64 %97
  %227 = load i32, i32* %226, align 4
  %228 = sext i32 %227 to i64
  %229 = add nsw i64 %222, %225
  %230 = getelementptr inbounds i32, i32* %221, i64 %95
  %231 = load i32, i32* %230, align 4
  %232 = sext i32 %231 to i64
  %233 = sub nsw i64 %203, %202
  %234 = add nsw i64 %233, %204
  %235 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 0, i64 0
  store i64 %234, i64* %235, align 8
  %236 = add nsw i64 %229, %232
  %237 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 2
  %238 = load i32, i32* %237, align 4
  %239 = sext i32 %238 to i64
  %240 = mul nsw i64 %236, %239
  %241 = ashr i64 %240, 5
  %242 = sub nsw i64 %202, %241
  %243 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 0, i64 1
  store i64 %242, i64* %243, align 8
  %244 = add nsw i64 %229, %228
  %245 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 3
  %246 = load i32, i32* %245, align 8
  %247 = sext i32 %246 to i64
  %248 = mul nsw i64 %244, %247
  %249 = ashr i64 %248, 5
  %250 = sub nsw i64 %203, %249
  %251 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 0, i64 2
  store i64 %250, i64* %251, align 8
  %252 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 4
  %253 = load i32, i32* %252, align 4
  %254 = sext i32 %253 to i64
  %255 = mul nsw i64 %254, %228
  %256 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 5
  %257 = load i32, i32* %256, align 8
  %258 = sext i32 %257 to i64
  %259 = mul nsw i64 %258, %225
  %260 = add nsw i64 %259, %255
  %261 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 6
  %262 = load i32, i32* %261, align 4
  %263 = sext i32 %262 to i64
  %264 = mul nsw i64 %263, %232
  %265 = add nsw i64 %260, %264
  %266 = sub nsw i64 %206, %202
  %267 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 7
  %268 = load i32, i32* %267, align 8
  %269 = sext i32 %268 to i64
  %270 = mul nsw i64 %266, %269
  %271 = add nsw i64 %265, %270
  %272 = sub nsw i64 %205, %203
  %273 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 8
  %274 = load i32, i32* %273, align 4
  %275 = sext i32 %274 to i64
  %276 = mul nsw i64 %272, %275
  %277 = add nsw i64 %271, %276
  %278 = ashr i64 %277, 5
  %279 = sub nsw i64 %202, %278
  %280 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 0, i64 3
  store i64 %279, i64* %280, align 8
  %281 = add i32 %149, %123
  %282 = add i32 %281, %175
  %283 = add i32 %282, %201
  %284 = tail call i32 @llvm.ctlz.i32(i32 %283, i1 true) #10, !range !29
  %285 = sub nsw i32 27, %284
  %286 = lshr i32 %123, %285
  %287 = lshr i32 %149, %285
  %288 = add i32 %287, %286
  %289 = lshr i32 %175, %285
  %290 = add i32 %288, %289
  %291 = lshr i32 %201, %285
  %292 = add i32 %290, %291
  %293 = lshr i32 %292, 1
  %294 = add nsw i32 %293, -1
  %295 = zext i32 %294 to i64
  %296 = zext i32 %286 to i64
  %297 = mul nsw i64 %234, %296
  %298 = zext i32 %287 to i64
  %299 = mul nsw i64 %242, %298
  %300 = zext i32 %289 to i64
  %301 = mul nsw i64 %250, %300
  %302 = zext i32 %291 to i64
  %303 = mul nsw i64 %279, %302
  %304 = add i64 %297, %295
  %305 = add i64 %304, %299
  %306 = add i64 %305, %301
  %307 = add i64 %306, %303
  %308 = add i32 %292, -1
  %309 = zext i32 %308 to i64
  %310 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 5, i64 %309
  %311 = load i32, i32* %310, align 4, !noalias !127
  %312 = zext i32 %311 to i64
  %313 = mul nsw i64 %307, %312
  %314 = ashr i64 %313, 24
  %315 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 1
  %316 = xor i64 %222, %225
  %317 = xor i32 %227, %224
  %318 = sext i32 %317 to i64
  %319 = or i64 %316, %318
  %320 = icmp sgt i64 %319, 0
  br i1 %320, label %334, label %321

321:                                              ; preds = %220
  %322 = icmp slt i64 %204, %202
  %323 = select i1 %322, i64 %202, i64 %204
  %324 = icmp slt i64 %203, %323
  %325 = select i1 %324, i64 %323, i64 %203
  %326 = icmp slt i64 %202, %204
  %327 = select i1 %326, i64 %202, i64 %204
  %328 = icmp slt i64 %327, %203
  %329 = select i1 %328, i64 %327, i64 %203
  %330 = icmp slt i64 %314, %325
  %331 = select i1 %330, i64 %314, i64 %325
  %332 = icmp slt i64 %329, %331
  %333 = select i1 %332, i64 %331, i64 %329
  br label %334

334:                                              ; preds = %220, %321
  %335 = phi i64 [ %333, %321 ], [ %314, %220 ]
  store i64 %335, i64* %315, align 8
  %336 = add nsw i64 %335, 3
  %337 = ashr i64 %336, 3
  %338 = bitcast %"struct.jxl::PredictionResult"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %338, i8 -86, i64 24, i1 false)
  %339 = getelementptr inbounds %"struct.jxl::PredictionResult", %"struct.jxl::PredictionResult"* %0, i64 0, i32 0
  store i32 0, i32* %339, align 8
  %340 = getelementptr inbounds %"struct.jxl::PredictionResult", %"struct.jxl::PredictionResult"* %0, i64 0, i32 1
  %341 = bitcast [14 x i64]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %341) #10
  %342 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 0
  store i64 0, i64* %342, align 16
  %343 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 1
  store i64 %83, i64* %343, align 8
  %344 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 2
  store i64 %81, i64* %344, align 16
  %345 = add nsw i64 %81, %83
  %346 = sub nsw i64 %345, %84
  %347 = sub nsw i64 %346, %83
  %348 = sub nsw i64 0, %347
  %349 = icmp slt i64 %347, 0
  %350 = select i1 %349, i64 %348, i64 %347
  %351 = sub nsw i64 %346, %81
  %352 = sub nsw i64 0, %351
  %353 = icmp slt i64 %351, 0
  %354 = select i1 %353, i64 %352, i64 %351
  %355 = icmp slt i64 %350, %354
  %356 = select i1 %355, i64 %83, i64 %81
  %357 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 4
  store i64 %356, i64* %357, align 16
  %358 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 6
  store i64 %337, i64* %358, align 16
  %359 = trunc i64 %81 to i32
  %360 = trunc i64 %84 to i32
  %361 = icmp sgt i32 %82, %359
  %362 = select i1 %361, i32 %359, i32 %82
  %363 = icmp slt i32 %82, %359
  %364 = select i1 %363, i32 %359, i32 %82
  %365 = sub i32 %82, %360
  %366 = add i32 %365, %359
  %367 = icmp sgt i32 %362, %360
  %368 = select i1 %367, i32 %364, i32 %366
  %369 = icmp slt i32 %364, %360
  %370 = select i1 %369, i32 %362, i32 %368
  %371 = sext i32 %370 to i64
  %372 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 5
  store i64 %371, i64* %372, align 8
  %373 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 8
  store i64 %84, i64* %373, align 16
  %374 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 7
  store i64 %80, i64* %374, align 8
  %375 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 9
  store i64 %85, i64* %375, align 8
  %376 = sdiv i64 %345, 2
  %377 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 3
  store i64 %376, i64* %377, align 8
  %378 = add nsw i64 %83, %84
  %379 = sdiv i64 %378, 2
  %380 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 10
  store i64 %379, i64* %380, align 16
  %381 = add nsw i64 %81, %84
  %382 = sdiv i64 %381, 2
  %383 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 11
  store i64 %382, i64* %383, align 8
  %384 = add nsw i64 %80, %81
  %385 = sdiv i64 %384, 2
  %386 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 12
  store i64 %385, i64* %386, align 16
  %387 = mul nsw i64 %81, 6
  %388 = shl nsw i64 %79, 1
  %389 = mul nsw i64 %83, 7
  %390 = mul nsw i64 %80, 3
  %391 = add nsw i64 %389, 8
  %392 = add nsw i64 %391, %387
  %393 = add nsw i64 %392, %390
  %394 = add nsw i64 %393, %85
  %395 = sub i64 %394, %388
  %396 = add i64 %395, %86
  %397 = sdiv i64 %396, 16
  %398 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 13
  store i64 %397, i64* %398, align 8
  %399 = sext i32 %7 to i64
  %400 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 %399
  %401 = load i64, i64* %400, align 8
  store i64 %401, i64* %340, align 8
  %402 = getelementptr inbounds %"struct.jxl::PredictionResult", %"struct.jxl::PredictionResult"* %0, i64 0, i32 2
  store i32 %7, i32* %402, align 8
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %341) #10
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl6detail7PredictILi0EEENS_16PredictionResultEPNSt3__16vectorIiNS3_9allocatorIiEEEEmPKilmmNS_9PredictorEPKNS_12MATreeLookupEPKNS_7ChannelEPNS_8weighted5StateEPl(%"struct.jxl::PredictionResult"* noalias sret, %"class.std::__1::vector.156"*, i64, i32* noalias, i64, i64, i64, i32, %"class.jxl::MATreeLookup"*, %"class.jxl::Channel"*, %"struct.jxl::weighted::State"*, i64*) local_unnamed_addr #5 comdat {
  %13 = sub i64 0, %4
  %14 = alloca [14 x i64], align 16
  %15 = icmp eq i64 %5, 0
  br i1 %15, label %16, label %22

16:                                               ; preds = %12
  %17 = icmp eq i64 %6, 0
  br i1 %17, label %78, label %18

18:                                               ; preds = %16
  %19 = getelementptr inbounds i32, i32* %3, i64 %13
  %20 = load i32, i32* %19, align 4
  %21 = sext i32 %20 to i64
  br label %35

22:                                               ; preds = %12
  %23 = getelementptr inbounds i32, i32* %3, i64 -1
  %24 = load i32, i32* %23, align 4
  %25 = sext i32 %24 to i64
  %26 = icmp eq i64 %6, 0
  br i1 %26, label %47, label %27

27:                                               ; preds = %22
  %28 = getelementptr inbounds i32, i32* %3, i64 %13
  %29 = load i32, i32* %28, align 4
  %30 = sext i32 %29 to i64
  %31 = xor i64 %4, -1
  %32 = getelementptr inbounds i32, i32* %3, i64 %31
  %33 = load i32, i32* %32, align 4
  %34 = sext i32 %33 to i64
  br label %35

35:                                               ; preds = %18, %27
  %36 = phi i64 [ %30, %27 ], [ %21, %18 ]
  %37 = phi i32 [ %24, %27 ], [ %20, %18 ]
  %38 = phi i64 [ %25, %27 ], [ %21, %18 ]
  %39 = phi i64 [ %34, %27 ], [ %21, %18 ]
  %40 = add i64 %5, 1
  %41 = icmp ult i64 %40, %2
  br i1 %41, label %42, label %47

42:                                               ; preds = %35
  %43 = sub nsw i64 1, %4
  %44 = getelementptr inbounds i32, i32* %3, i64 %43
  %45 = load i32, i32* %44, align 4
  %46 = sext i32 %45 to i64
  br label %47

47:                                               ; preds = %22, %35, %42
  %48 = phi i64 [ %39, %42 ], [ %39, %35 ], [ %25, %22 ]
  %49 = phi i1 [ true, %42 ], [ true, %35 ], [ false, %22 ]
  %50 = phi i64 [ %38, %42 ], [ %38, %35 ], [ %25, %22 ]
  %51 = phi i32 [ %37, %42 ], [ %37, %35 ], [ %24, %22 ]
  %52 = phi i64 [ %36, %42 ], [ %36, %35 ], [ %25, %22 ]
  %53 = phi i64 [ %46, %42 ], [ %36, %35 ], [ %25, %22 ]
  %54 = icmp ugt i64 %5, 1
  br i1 %54, label %55, label %59

55:                                               ; preds = %47
  %56 = getelementptr inbounds i32, i32* %3, i64 -2
  %57 = load i32, i32* %56, align 4
  %58 = sext i32 %57 to i64
  br label %59

59:                                               ; preds = %47, %55
  %60 = phi i64 [ %58, %55 ], [ %50, %47 ]
  %61 = icmp ugt i64 %6, 1
  br i1 %61, label %62, label %68

62:                                               ; preds = %59
  %63 = shl i64 %4, 1
  %64 = sub i64 0, %63
  %65 = getelementptr inbounds i32, i32* %3, i64 %64
  %66 = load i32, i32* %65, align 4
  %67 = sext i32 %66 to i64
  br label %68

68:                                               ; preds = %59, %62
  %69 = phi i64 [ %67, %62 ], [ %52, %59 ]
  %70 = add i64 %5, 2
  %71 = icmp ult i64 %70, %2
  %72 = and i1 %71, %49
  br i1 %72, label %73, label %78

73:                                               ; preds = %68
  %74 = sub nsw i64 2, %4
  %75 = getelementptr inbounds i32, i32* %3, i64 %74
  %76 = load i32, i32* %75, align 4
  %77 = sext i32 %76 to i64
  br label %78

78:                                               ; preds = %16, %68, %73
  %79 = phi i64 [ %69, %73 ], [ %69, %68 ], [ 0, %16 ]
  %80 = phi i64 [ %53, %73 ], [ %53, %68 ], [ 0, %16 ]
  %81 = phi i64 [ %52, %73 ], [ %52, %68 ], [ 0, %16 ]
  %82 = phi i32 [ %51, %73 ], [ %51, %68 ], [ 0, %16 ]
  %83 = phi i64 [ %50, %73 ], [ %50, %68 ], [ 0, %16 ]
  %84 = phi i64 [ %48, %73 ], [ %48, %68 ], [ 0, %16 ]
  %85 = phi i64 [ %60, %73 ], [ %60, %68 ], [ 0, %16 ]
  %86 = phi i64 [ %77, %73 ], [ %53, %68 ], [ 0, %16 ]
  %87 = bitcast %"struct.jxl::PredictionResult"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %87, i8 -86, i64 24, i1 false)
  %88 = getelementptr inbounds %"struct.jxl::PredictionResult", %"struct.jxl::PredictionResult"* %0, i64 0, i32 0
  store i32 0, i32* %88, align 8
  %89 = getelementptr inbounds %"struct.jxl::PredictionResult", %"struct.jxl::PredictionResult"* %0, i64 0, i32 1
  %90 = bitcast [14 x i64]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %90) #10
  %91 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 0
  store i64 0, i64* %91, align 16
  %92 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 1
  store i64 %83, i64* %92, align 8
  %93 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 2
  store i64 %81, i64* %93, align 16
  %94 = add nsw i64 %81, %83
  %95 = sub nsw i64 %94, %84
  %96 = sub nsw i64 %95, %83
  %97 = sub nsw i64 0, %96
  %98 = icmp slt i64 %96, 0
  %99 = select i1 %98, i64 %97, i64 %96
  %100 = sub nsw i64 %95, %81
  %101 = sub nsw i64 0, %100
  %102 = icmp slt i64 %100, 0
  %103 = select i1 %102, i64 %101, i64 %100
  %104 = icmp slt i64 %99, %103
  %105 = select i1 %104, i64 %83, i64 %81
  %106 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 4
  store i64 %105, i64* %106, align 16
  %107 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 6
  store i64 0, i64* %107, align 16
  %108 = trunc i64 %81 to i32
  %109 = trunc i64 %84 to i32
  %110 = icmp sgt i32 %82, %108
  %111 = select i1 %110, i32 %108, i32 %82
  %112 = icmp slt i32 %82, %108
  %113 = select i1 %112, i32 %108, i32 %82
  %114 = sub i32 %82, %109
  %115 = add i32 %114, %108
  %116 = icmp sgt i32 %111, %109
  %117 = select i1 %116, i32 %113, i32 %115
  %118 = icmp slt i32 %113, %109
  %119 = select i1 %118, i32 %111, i32 %117
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 5
  store i64 %120, i64* %121, align 8
  %122 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 8
  store i64 %84, i64* %122, align 16
  %123 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 7
  store i64 %80, i64* %123, align 8
  %124 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 9
  store i64 %85, i64* %124, align 8
  %125 = sdiv i64 %94, 2
  %126 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 3
  store i64 %125, i64* %126, align 8
  %127 = add nsw i64 %83, %84
  %128 = sdiv i64 %127, 2
  %129 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 10
  store i64 %128, i64* %129, align 16
  %130 = add nsw i64 %81, %84
  %131 = sdiv i64 %130, 2
  %132 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 11
  store i64 %131, i64* %132, align 8
  %133 = add nsw i64 %80, %81
  %134 = sdiv i64 %133, 2
  %135 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 12
  store i64 %134, i64* %135, align 16
  %136 = mul nsw i64 %81, 6
  %137 = shl nsw i64 %79, 1
  %138 = mul nsw i64 %83, 7
  %139 = mul nsw i64 %80, 3
  %140 = add nsw i64 %138, 8
  %141 = add nsw i64 %140, %136
  %142 = add nsw i64 %141, %139
  %143 = add nsw i64 %142, %85
  %144 = sub i64 %143, %137
  %145 = add i64 %144, %86
  %146 = sdiv i64 %145, 16
  %147 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 13
  store i64 %146, i64* %147, align 8
  %148 = sext i32 %7 to i64
  %149 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 %148
  %150 = load i64, i64* %149, align 8
  store i64 %150, i64* %89, align 8
  %151 = getelementptr inbounds %"struct.jxl::PredictionResult", %"struct.jxl::PredictionResult"* %0, i64 0, i32 2
  store i32 %7, i32* %151, align 8
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %90) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector.40"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i32** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i32*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i32, i32* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i32, i32* %13, i64 %18
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #10
  %26 = ptrtoint i32* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.40"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.40"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #12
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #12
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %38 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #13
  %54 = bitcast i8* %53 to i32*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi i32* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds i32, i32* %57, i64 %33
  %59 = getelementptr inbounds i32, i32* %57, i64 %56
  %60 = getelementptr inbounds i32, i32* %58, i64 %1
  %61 = bitcast i32* %58 to i8*
  %62 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %62, i1 false) #10
  %63 = ptrtoint i32* %59 to i64
  %64 = ptrtoint i32* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %0, i64 0, i32 0, i32 0
  %66 = load i32*, i32** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint i32* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 2
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds i32, i32* %58, i64 %71
  %73 = ptrtoint i32* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast i32* %72 to i8*
  %77 = bitcast i32* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #10
  %78 = load i32*, i32** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi i32* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq i32* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast i32* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #13
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl22YCbCrChromaSubsamplingD0Ev(%"struct.jxl::YCbCrChromaSubsampling"*) unnamed_addr #5 comdat align 2 {
  %2 = bitcast %"struct.jxl::YCbCrChromaSubsampling"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK3jxl22YCbCrChromaSubsampling4NameEv(%"struct.jxl::YCbCrChromaSubsampling"*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.54, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl22YCbCrChromaSubsampling11VisitFieldsEPNS_7VisitorE(%"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Visitor"* noalias) unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i32, i32*)***
  %4 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 1, i64 0
  %5 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %3, align 8
  %6 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %5, i64 5
  %7 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %6, align 8
  %8 = tail call i32 %7(%"class.jxl::Visitor"* %1, i64 2, i32 0, i32* %4) #10
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %17

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 1, i64 1
  %12 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %3, align 8
  %13 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %12, i64 5
  %14 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %13, align 8
  %15 = tail call i32 %14(%"class.jxl::Visitor"* %1, i64 2, i32 0, i32* %11) #10
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %19, label %17

17:                                               ; preds = %2, %10, %19, %26
  %18 = phi i32 [ 0, %26 ], [ %8, %2 ], [ %15, %10 ], [ %24, %19 ]
  ret i32 %18

19:                                               ; preds = %10
  %20 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 1, i64 2
  %21 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %3, align 8
  %22 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %21, i64 5
  %23 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %22, align 8
  %24 = tail call i32 %23(%"class.jxl::Visitor"* %1, i64 2, i32 0, i32* %20) #10
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %17

26:                                               ; preds = %19
  %27 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 2
  %28 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 3
  %29 = load i32, i32* %4, align 4
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE, i64 0, i64 %30
  %32 = load i8, i8* %31, align 1
  %33 = add nsw i64 %30, -1
  %34 = icmp ult i64 %33, 2
  %35 = select i1 %34, i8 %32, i8 0
  %36 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE, i64 0, i64 %30
  %37 = load i8, i8* %36, align 1
  %38 = or i64 %30, 2
  %39 = icmp eq i64 %38, 3
  %40 = select i1 %39, i8 %37, i8 0
  %41 = load i32, i32* %11, align 4
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE, i64 0, i64 %42
  %44 = load i8, i8* %43, align 1
  %45 = icmp ult i8 %35, %44
  %46 = select i1 %45, i8 %44, i8 %35
  %47 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE, i64 0, i64 %42
  %48 = load i8, i8* %47, align 1
  %49 = icmp ult i8 %40, %48
  %50 = select i1 %49, i8 %48, i8 %40
  %51 = load i32, i32* %20, align 4
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE, i64 0, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = icmp ult i8 %46, %54
  %56 = select i1 %55, i8 %54, i8 %46
  store i8 %56, i8* %27, align 4
  %57 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE, i64 0, i64 %52
  %58 = load i8, i8* %57, align 1
  %59 = icmp ult i8 %50, %58
  %60 = select i1 %59, i8 %58, i8 %50
  store i8 %60, i8* %28, align 1
  br label %17
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl5ImageENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.8"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.jxl::Image"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.jxl::Image"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 104
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %24, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"class.jxl::Image"*
  %14 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %13, i64 %1
  %15 = icmp eq i64 %1, 0
  br i1 %15, label %22, label %18

16:                                               ; preds = %18
  %17 = ptrtoint %"class.jxl::Image"* %14 to i64
  br label %22

18:                                               ; preds = %12, %18
  %19 = phi %"class.jxl::Image"* [ %20, %18 ], [ %13, %12 ]
  tail call void @_ZN3jxl5ImageC1Ev(%"class.jxl::Image"* %19) #10
  %20 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %19, i64 1
  %21 = icmp eq %"class.jxl::Image"* %20, %14
  br i1 %21, label %16, label %18

22:                                               ; preds = %12, %16
  %23 = phi i64 [ %17, %16 ], [ %8, %12 ]
  store i64 %23, i64* %7, align 8
  br label %126

24:                                               ; preds = %2
  %25 = bitcast %"class.std::__1::vector.8"* %0 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = sub i64 %8, %26
  %28 = sdiv exact i64 %27, 104
  %29 = add i64 %28, %1
  %30 = icmp ugt i64 %29, 177372539170284150
  br i1 %30, label %31, label %33

31:                                               ; preds = %24
  %32 = bitcast %"class.std::__1::vector.8"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %32) #12
  unreachable

33:                                               ; preds = %24
  %34 = sub i64 %5, %26
  %35 = sdiv exact i64 %34, 104
  %36 = icmp ult i64 %35, 88686269585142075
  br i1 %36, label %37, label %42

37:                                               ; preds = %33
  %38 = shl nsw i64 %35, 1
  %39 = icmp ult i64 %38, %29
  %40 = select i1 %39, i64 %29, i64 %38
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %47, label %42

42:                                               ; preds = %33, %37
  %43 = phi i64 [ %40, %37 ], [ 177372539170284150, %33 ]
  %44 = mul i64 %43, 104
  %45 = tail call i8* @_Znwm(i64 %44) #13
  %46 = bitcast i8* %45 to %"class.jxl::Image"*
  br label %47

47:                                               ; preds = %37, %42
  %48 = phi i64 [ %43, %42 ], [ 0, %37 ]
  %49 = phi %"class.jxl::Image"* [ %46, %42 ], [ null, %37 ]
  %50 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %49, i64 %28
  %51 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %49, i64 %48
  %52 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %50, i64 %1
  br label %53

53:                                               ; preds = %47, %53
  %54 = phi %"class.jxl::Image"* [ %55, %53 ], [ %50, %47 ]
  tail call void @_ZN3jxl5ImageC1Ev(%"class.jxl::Image"* %54) #10
  %55 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %54, i64 1
  %56 = icmp eq %"class.jxl::Image"* %52, %55
  br i1 %56, label %57, label %53

57:                                               ; preds = %53
  %58 = ptrtoint %"class.jxl::Image"* %51 to i64
  %59 = ptrtoint %"class.jxl::Image"* %52 to i64
  %60 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 0
  %61 = load %"class.jxl::Image"*, %"class.jxl::Image"** %60, align 8
  %62 = load %"class.jxl::Image"*, %"class.jxl::Image"** %6, align 8
  %63 = icmp eq %"class.jxl::Image"* %62, %61
  br i1 %63, label %64, label %66

64:                                               ; preds = %57
  %65 = ptrtoint %"class.jxl::Image"* %61 to i64
  br label %111

66:                                               ; preds = %57, %66
  %67 = phi %"class.jxl::Image"* [ %69, %66 ], [ %50, %57 ]
  %68 = phi %"class.jxl::Image"* [ %70, %66 ], [ %62, %57 ]
  %69 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %67, i64 -1
  %70 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %68, i64 -1
  %71 = bitcast %"class.jxl::Image"* %69 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %71, i8 0, i64 24, i1 false) #10
  %72 = bitcast %"class.jxl::Image"* %70 to i64*
  %73 = load i64, i64* %72, align 8
  %74 = bitcast %"class.jxl::Image"* %69 to i64*
  store i64 %73, i64* %74, align 8
  %75 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %68, i64 -1, i32 0, i32 0, i32 1
  %76 = bitcast %"class.jxl::Channel"** %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %67, i64 -1, i32 0, i32 0, i32 1
  %79 = bitcast %"class.jxl::Channel"** %78 to i64*
  store i64 %77, i64* %79, align 8
  %80 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %68, i64 -1, i32 0, i32 0, i32 2, i32 0, i32 0
  %81 = bitcast %"class.jxl::Channel"** %80 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %67, i64 -1, i32 0, i32 0, i32 2, i32 0, i32 0
  %84 = bitcast %"class.jxl::Channel"** %83 to i64*
  store i64 %82, i64* %84, align 8
  %85 = bitcast %"class.jxl::Image"* %70 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %85, i8 0, i64 24, i1 false) #10
  %86 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %67, i64 -1, i32 1
  %87 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %68, i64 -1, i32 1
  %88 = bitcast %"class.std::__1::vector.19"* %86 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %88, i8 0, i64 24, i1 false) #10
  %89 = bitcast %"class.std::__1::vector.19"* %87 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = bitcast %"class.std::__1::vector.19"* %86 to i64*
  store i64 %90, i64* %91, align 8
  %92 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %68, i64 -1, i32 1, i32 0, i32 1
  %93 = bitcast %"class.jxl::Transform"** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %67, i64 -1, i32 1, i32 0, i32 1
  %96 = bitcast %"class.jxl::Transform"** %95 to i64*
  store i64 %94, i64* %96, align 8
  %97 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %68, i64 -1, i32 1, i32 0, i32 2, i32 0, i32 0
  %98 = bitcast %"class.jxl::Transform"** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %67, i64 -1, i32 1, i32 0, i32 2, i32 0, i32 0
  %101 = bitcast %"class.jxl::Transform"** %100 to i64*
  store i64 %99, i64* %101, align 8
  %102 = bitcast %"class.std::__1::vector.19"* %87 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %102, i8 0, i64 24, i1 false) #10
  %103 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %67, i64 -1, i32 2
  %104 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %68, i64 -1, i32 2
  %105 = bitcast i64* %103 to i8*
  %106 = bitcast i64* %104 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %105, i8* align 8 %106, i64 49, i1 false) #10
  %107 = icmp eq %"class.jxl::Image"* %70, %61
  br i1 %107, label %108, label %66

108:                                              ; preds = %66
  %109 = load i64, i64* %25, align 8
  %110 = load %"class.jxl::Image"*, %"class.jxl::Image"** %6, align 8
  br label %111

111:                                              ; preds = %64, %108
  %112 = phi %"class.jxl::Image"* [ %61, %64 ], [ %110, %108 ]
  %113 = phi %"class.jxl::Image"* [ %50, %64 ], [ %69, %108 ]
  %114 = phi i64 [ %65, %64 ], [ %109, %108 ]
  %115 = ptrtoint %"class.jxl::Image"* %113 to i64
  store i64 %115, i64* %25, align 8
  store i64 %59, i64* %7, align 8
  store i64 %58, i64* %4, align 8
  %116 = inttoptr i64 %114 to %"class.jxl::Image"*
  %117 = icmp eq %"class.jxl::Image"* %112, %116
  br i1 %117, label %122, label %118

118:                                              ; preds = %111, %118
  %119 = phi %"class.jxl::Image"* [ %120, %118 ], [ %112, %111 ]
  %120 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %119, i64 -1
  tail call void @_ZN3jxl5ImageD1Ev(%"class.jxl::Image"* %120) #10
  %121 = icmp eq %"class.jxl::Image"* %120, %116
  br i1 %121, label %122, label %118

122:                                              ; preds = %118, %111
  %123 = icmp eq i64 %114, 0
  br i1 %123, label %126, label %124

124:                                              ; preds = %122
  %125 = inttoptr i64 %114 to i8*
  tail call void @_ZdlPv(i8* %125) #13
  br label %126

126:                                              ; preds = %124, %122, %22
  ret void
}

declare void @_ZN3jxl5ImageC1Ev(%"class.jxl::Image"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIjNS_9allocatorIjEEE6assignIPKjEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_(%"class.std::__1::vector.40"*, i32*, i32*) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint i32* %2 to i64
  %5 = ptrtoint i32* %1 to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 2
  %8 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast i32** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector.40"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 2
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to i32*
  br i1 %15, label %49, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %0, i64 0, i32 0, i32 1
  %19 = bitcast i32** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = ashr exact i64 %21, 2
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds i32, i32* %1, i64 %22
  %25 = select i1 %23, i32* %24, i32* %2
  %26 = ptrtoint i32* %25 to i64
  %27 = sub i64 %26, %5
  %28 = ashr exact i64 %27, 2
  %29 = icmp eq i64 %27, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %17
  %31 = inttoptr i64 %12 to i8*
  %32 = bitcast i32* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %31, i8* align 4 %32, i64 %27, i1 false) #10
  br label %33

33:                                               ; preds = %17, %30
  br i1 %23, label %34, label %47

34:                                               ; preds = %33
  %35 = load i64, i64* %19, align 8
  %36 = sub i64 %4, %26
  %37 = icmp sgt i64 %36, 0
  br i1 %37, label %38, label %45

38:                                               ; preds = %34
  %39 = lshr exact i64 %36, 2
  %40 = inttoptr i64 %35 to i8*
  %41 = bitcast i32* %25 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %40, i8* align 4 %41, i64 %36, i1 false) #10
  %42 = inttoptr i64 %35 to i32*
  %43 = getelementptr inbounds i32, i32* %42, i64 %39
  %44 = ptrtoint i32* %43 to i64
  br label %45

45:                                               ; preds = %34, %38
  %46 = phi i64 [ %44, %38 ], [ %35, %34 ]
  store i64 %46, i64* %19, align 8
  br label %90

47:                                               ; preds = %33
  %48 = getelementptr inbounds i32, i32* %16, i64 %28
  store i32* %48, i32** %18, align 8
  br label %90

49:                                               ; preds = %3
  %50 = icmp eq i64 %12, 0
  br i1 %50, label %56, label %51

51:                                               ; preds = %49
  %52 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %0, i64 0, i32 0, i32 1
  %53 = bitcast i32** %52 to i64*
  store i64 %12, i64* %53, align 8
  %54 = inttoptr i64 %12 to i8*
  tail call void @_ZdlPv(i8* %54) #13
  %55 = bitcast %"class.std::__1::vector.40"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %55, i8 0, i64 24, i1 false) #10
  br label %56

56:                                               ; preds = %49, %51
  %57 = phi i64 [ %10, %49 ], [ 0, %51 ]
  %58 = icmp ugt i64 %7, 4611686018427387903
  br i1 %58, label %59, label %61

59:                                               ; preds = %56
  %60 = bitcast %"class.std::__1::vector.40"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %60) #12
  unreachable

61:                                               ; preds = %56
  %62 = ashr exact i64 %57, 2
  %63 = icmp ult i64 %62, 2305843009213693951
  br i1 %63, label %64, label %71

64:                                               ; preds = %61
  %65 = ashr exact i64 %57, 1
  %66 = icmp ult i64 %65, %7
  br i1 %66, label %71, label %67

67:                                               ; preds = %64
  %68 = icmp ugt i64 %65, 4611686018427387903
  br i1 %68, label %69, label %71

69:                                               ; preds = %67
  %70 = bitcast %"class.std::__1::vector.40"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %70) #12
  unreachable

71:                                               ; preds = %64, %61, %67
  %72 = phi i64 [ %65, %67 ], [ 4611686018427387903, %61 ], [ %7, %64 ]
  %73 = shl i64 %72, 2
  %74 = tail call i8* @_Znwm(i64 %73) #13
  %75 = bitcast i8* %74 to i32*
  %76 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %0, i64 0, i32 0, i32 1
  %77 = bitcast i32** %76 to i8**
  store i8* %74, i8** %77, align 8
  %78 = bitcast %"class.std::__1::vector.40"* %0 to i8**
  store i8* %74, i8** %78, align 8
  %79 = getelementptr inbounds i32, i32* %75, i64 %72
  store i32* %79, i32** %8, align 8
  %80 = bitcast i32** %76 to i64*
  %81 = ptrtoint i8* %74 to i64
  %82 = icmp sgt i64 %6, 0
  br i1 %82, label %83, label %88

83:                                               ; preds = %71
  %84 = lshr exact i64 %6, 2
  %85 = bitcast i32* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %74, i8* align 4 %85, i64 %6, i1 false) #10
  %86 = getelementptr inbounds i32, i32* %75, i64 %84
  %87 = ptrtoint i32* %86 to i64
  br label %88

88:                                               ; preds = %71, %83
  %89 = phi i64 [ %87, %83 ], [ %81, %71 ]
  store i64 %89, i64* %80, align 8
  br label %90

90:                                               ; preds = %45, %47, %88
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIjNS_9allocatorIjEEE6assignIPjEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector.40"*, i32*, i32*) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint i32* %2 to i64
  %5 = ptrtoint i32* %1 to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 2
  %8 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast i32** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector.40"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 2
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to i32*
  br i1 %15, label %49, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %0, i64 0, i32 0, i32 1
  %19 = bitcast i32** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = ashr exact i64 %21, 2
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds i32, i32* %1, i64 %22
  %25 = select i1 %23, i32* %24, i32* %2
  %26 = ptrtoint i32* %25 to i64
  %27 = sub i64 %26, %5
  %28 = ashr exact i64 %27, 2
  %29 = icmp eq i64 %27, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %17
  %31 = inttoptr i64 %12 to i8*
  %32 = bitcast i32* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %31, i8* align 4 %32, i64 %27, i1 false) #10
  br label %33

33:                                               ; preds = %17, %30
  br i1 %23, label %34, label %47

34:                                               ; preds = %33
  %35 = load i64, i64* %19, align 8
  %36 = sub i64 %4, %26
  %37 = icmp sgt i64 %36, 0
  br i1 %37, label %38, label %45

38:                                               ; preds = %34
  %39 = lshr exact i64 %36, 2
  %40 = inttoptr i64 %35 to i8*
  %41 = bitcast i32* %25 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %40, i8* align 4 %41, i64 %36, i1 false) #10
  %42 = inttoptr i64 %35 to i32*
  %43 = getelementptr inbounds i32, i32* %42, i64 %39
  %44 = ptrtoint i32* %43 to i64
  br label %45

45:                                               ; preds = %34, %38
  %46 = phi i64 [ %44, %38 ], [ %35, %34 ]
  store i64 %46, i64* %19, align 8
  br label %90

47:                                               ; preds = %33
  %48 = getelementptr inbounds i32, i32* %16, i64 %28
  store i32* %48, i32** %18, align 8
  br label %90

49:                                               ; preds = %3
  %50 = icmp eq i64 %12, 0
  br i1 %50, label %56, label %51

51:                                               ; preds = %49
  %52 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %0, i64 0, i32 0, i32 1
  %53 = bitcast i32** %52 to i64*
  store i64 %12, i64* %53, align 8
  %54 = inttoptr i64 %12 to i8*
  tail call void @_ZdlPv(i8* %54) #13
  %55 = bitcast %"class.std::__1::vector.40"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %55, i8 0, i64 24, i1 false) #10
  br label %56

56:                                               ; preds = %49, %51
  %57 = phi i64 [ %10, %49 ], [ 0, %51 ]
  %58 = icmp ugt i64 %7, 4611686018427387903
  br i1 %58, label %59, label %61

59:                                               ; preds = %56
  %60 = bitcast %"class.std::__1::vector.40"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %60) #12
  unreachable

61:                                               ; preds = %56
  %62 = ashr exact i64 %57, 2
  %63 = icmp ult i64 %62, 2305843009213693951
  br i1 %63, label %64, label %71

64:                                               ; preds = %61
  %65 = ashr exact i64 %57, 1
  %66 = icmp ult i64 %65, %7
  br i1 %66, label %71, label %67

67:                                               ; preds = %64
  %68 = icmp ugt i64 %65, 4611686018427387903
  br i1 %68, label %69, label %71

69:                                               ; preds = %67
  %70 = bitcast %"class.std::__1::vector.40"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %70) #12
  unreachable

71:                                               ; preds = %64, %61, %67
  %72 = phi i64 [ %65, %67 ], [ 4611686018427387903, %61 ], [ %7, %64 ]
  %73 = shl i64 %72, 2
  %74 = tail call i8* @_Znwm(i64 %73) #13
  %75 = bitcast i8* %74 to i32*
  %76 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %0, i64 0, i32 0, i32 1
  %77 = bitcast i32** %76 to i8**
  store i8* %74, i8** %77, align 8
  %78 = bitcast %"class.std::__1::vector.40"* %0 to i8**
  store i8* %74, i8** %78, align 8
  %79 = getelementptr inbounds i32, i32* %75, i64 %72
  store i32* %79, i32** %8, align 8
  %80 = bitcast i32** %76 to i64*
  %81 = ptrtoint i8* %74 to i64
  %82 = icmp sgt i64 %6, 0
  br i1 %82, label %83, label %88

83:                                               ; preds = %71
  %84 = lshr exact i64 %6, 2
  %85 = bitcast i32* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %74, i8* align 4 %85, i64 %6, i1 false) #10
  %86 = getelementptr inbounds i32, i32* %75, i64 %84
  %87 = ptrtoint i32* %86 to i64
  br label %88

88:                                               ; preds = %71, %83
  %89 = phi i64 [ %87, %83 ], [ %81, %71 ]
  store i64 %89, i64* %80, align 8
  br label %90

90:                                               ; preds = %45, %47, %88
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorImNS_9allocatorImEEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i64** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i64** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 3
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i64*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i64, i64* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i64, i64* %13, i64 %18
  %20 = bitcast i64* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 8
  %25 = and i64 %24, -8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %25, i1 false) #10
  %26 = ptrtoint i64* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 3
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 2305843009213693951
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #12
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 3
  %41 = icmp ult i64 %40, 1152921504606846975
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 2
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 2305843009213693951
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #12
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 2305843009213693951, %38 ]
  %52 = shl i64 %51, 3
  %53 = tail call i8* @_Znwm(i64 %52) #13
  %54 = bitcast i8* %53 to i64*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi i64* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds i64, i64* %57, i64 %33
  %59 = getelementptr inbounds i64, i64* %57, i64 %56
  %60 = getelementptr inbounds i64, i64* %58, i64 %1
  %61 = bitcast i64* %58 to i8*
  %62 = shl i64 %1, 3
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %61, i8 0, i64 %62, i1 false) #10
  %63 = ptrtoint i64* %59 to i64
  %64 = ptrtoint i64* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %66 = load i64*, i64** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint i64* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 3
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds i64, i64* %58, i64 %71
  %73 = ptrtoint i64* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast i64* %72 to i8*
  %77 = bitcast i64* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %76, i8* align 8 %77, i64 %69, i1 false) #10
  %78 = load i64*, i64** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi i64* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq i64* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast i64* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #13
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector.1"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #10
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %68

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector.1"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector.1"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #12
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = tail call i8* @_Znwm(i64 %39) #13
  br label %41

41:                                               ; preds = %38, %33
  %42 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %43 = phi i8* [ %40, %38 ], [ null, %33 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %25
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %42
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = sub i64 %1, %45
  %49 = getelementptr i8, i8* %44, i64 %48
  %50 = ptrtoint i8* %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 %50, i1 false) #10
  %51 = ptrtoint i8* %46 to i64
  %52 = ptrtoint i8* %47 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i64, i64* %7, align 8
  %56 = ptrtoint i8* %54 to i64
  %57 = sub i64 %55, %56
  %58 = sub i64 0, %57
  %59 = getelementptr inbounds i8, i8* %44, i64 %58
  %60 = ptrtoint i8* %59 to i64
  %61 = icmp sgt i64 %57, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %54, i64 %57, i1 false) #10
  %63 = load i8*, i8** %53, align 8
  br label %64

64:                                               ; preds = %41, %62
  %65 = phi i8* [ %54, %41 ], [ %63, %62 ]
  store i64 %60, i64* %23, align 8
  store i64 %52, i64* %7, align 8
  store i64 %51, i64* %4, align 8
  %66 = icmp eq i8* %65, null
  br i1 %66, label %68, label %67

67:                                               ; preds = %64
  tail call void @_ZdlPv(i8* nonnull %65) #13
  br label %68

68:                                               ; preds = %67, %64, %20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl14ModularOptionsENS_9allocatorIS2_EEE8__appendEmRKS2_(%"class.std::__1::vector.38"*, i64, %"struct.jxl::ModularOptions"* dereferenceable(88)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.std::__1::vector.38", %"class.std::__1::vector.38"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %5 = bitcast %"struct.jxl::ModularOptions"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::vector.38", %"class.std::__1::vector.38"* %0, i64 0, i32 0, i32 1
  %8 = bitcast %"struct.jxl::ModularOptions"** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %6, %9
  %11 = sdiv exact i64 %10, 88
  %12 = icmp ult i64 %11, %1
  br i1 %12, label %71, label %13

13:                                               ; preds = %3
  %14 = inttoptr i64 %9 to %"struct.jxl::ModularOptions"*
  %15 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %14, i64 %1
  %16 = icmp eq i64 %1, 0
  br i1 %16, label %69, label %17

17:                                               ; preds = %13
  %18 = bitcast %"struct.jxl::ModularOptions"* %2 to i8*
  %19 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %2, i64 0, i32 3
  %20 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %2, i64 0, i32 3, i32 0, i32 1
  %21 = bitcast i32** %20 to i64*
  %22 = bitcast %"class.std::__1::vector.40"* %19 to i64*
  %23 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %19, i64 0, i32 0, i32 0
  %24 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %2, i64 0, i32 4
  %25 = bitcast float* %24 to i8*
  br label %28

26:                                               ; preds = %64
  %27 = ptrtoint %"struct.jxl::ModularOptions"* %15 to i64
  br label %69

28:                                               ; preds = %64, %17
  %29 = phi %"struct.jxl::ModularOptions"* [ %14, %17 ], [ %67, %64 ]
  %30 = bitcast %"struct.jxl::ModularOptions"* %29 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %30, i8* align 8 %18, i64 16, i1 false) #10
  %31 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %29, i64 0, i32 3
  %32 = bitcast %"class.std::__1::vector.40"* %31 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %32, i8 0, i64 24, i1 false) #10
  %33 = load i64, i64* %21, align 8
  %34 = load i64, i64* %22, align 8
  %35 = sub i64 %33, %34
  %36 = ashr exact i64 %35, 2
  %37 = icmp eq i64 %35, 0
  br i1 %37, label %64, label %38

38:                                               ; preds = %28
  %39 = icmp ugt i64 %36, 4611686018427387903
  br i1 %39, label %40, label %42

40:                                               ; preds = %38
  %41 = bitcast %"class.std::__1::vector.40"* %31 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %41) #12
  unreachable

42:                                               ; preds = %38
  %43 = tail call i8* @_Znwm(i64 %35) #13
  %44 = bitcast i8* %43 to i32*
  %45 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %29, i64 0, i32 3, i32 0, i32 1
  %46 = bitcast i32** %45 to i8**
  store i8* %43, i8** %46, align 8
  %47 = bitcast %"class.std::__1::vector.40"* %31 to i8**
  store i8* %43, i8** %47, align 8
  %48 = getelementptr inbounds i32, i32* %44, i64 %36
  %49 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %29, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  store i32* %48, i32** %49, align 8
  %50 = load i32*, i32** %23, align 8
  %51 = load i64, i64* %21, align 8
  %52 = bitcast i32** %45 to i64*
  %53 = ptrtoint i8* %43 to i64
  %54 = ptrtoint i32* %50 to i64
  %55 = sub i64 %51, %54
  %56 = icmp sgt i64 %55, 0
  br i1 %56, label %57, label %62

57:                                               ; preds = %42
  %58 = lshr exact i64 %55, 2
  %59 = bitcast i32* %50 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %43, i8* align 4 %59, i64 %55, i1 false) #10
  %60 = getelementptr inbounds i32, i32* %44, i64 %58
  %61 = ptrtoint i32* %60 to i64
  br label %62

62:                                               ; preds = %57, %42
  %63 = phi i64 [ %61, %57 ], [ %53, %42 ]
  store i64 %63, i64* %52, align 8
  br label %64

64:                                               ; preds = %62, %28
  %65 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %29, i64 0, i32 4
  %66 = bitcast float* %65 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %66, i8* align 8 %25, i64 41, i1 false) #10
  %67 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %29, i64 1
  %68 = icmp eq %"struct.jxl::ModularOptions"* %67, %15
  br i1 %68, label %26, label %28

69:                                               ; preds = %13, %26
  %70 = phi i64 [ %27, %26 ], [ %9, %13 ]
  store i64 %70, i64* %8, align 8
  br label %217

71:                                               ; preds = %3
  %72 = bitcast %"class.std::__1::vector.38"* %0 to i64*
  %73 = load i64, i64* %72, align 8
  %74 = sub i64 %9, %73
  %75 = sdiv exact i64 %74, 88
  %76 = add i64 %75, %1
  %77 = icmp ugt i64 %76, 209622091746699450
  br i1 %77, label %78, label %80

78:                                               ; preds = %71
  %79 = bitcast %"class.std::__1::vector.38"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %79) #12
  unreachable

80:                                               ; preds = %71
  %81 = sub i64 %6, %73
  %82 = sdiv exact i64 %81, 88
  %83 = icmp ult i64 %82, 104811045873349725
  br i1 %83, label %84, label %89

84:                                               ; preds = %80
  %85 = shl nsw i64 %82, 1
  %86 = icmp ult i64 %85, %76
  %87 = select i1 %86, i64 %76, i64 %85
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %94, label %89

89:                                               ; preds = %80, %84
  %90 = phi i64 [ %87, %84 ], [ 209622091746699450, %80 ]
  %91 = mul i64 %90, 88
  %92 = tail call i8* @_Znwm(i64 %91) #13
  %93 = bitcast i8* %92 to %"struct.jxl::ModularOptions"*
  br label %94

94:                                               ; preds = %89, %84
  %95 = phi i64 [ %90, %89 ], [ 0, %84 ]
  %96 = phi %"struct.jxl::ModularOptions"* [ %93, %89 ], [ null, %84 ]
  %97 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %96, i64 %75
  %98 = ptrtoint %"struct.jxl::ModularOptions"* %97 to i64
  %99 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %96, i64 %95
  %100 = ptrtoint %"struct.jxl::ModularOptions"* %99 to i64
  %101 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %97, i64 %1
  %102 = bitcast %"struct.jxl::ModularOptions"* %2 to i8*
  %103 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %2, i64 0, i32 3
  %104 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %2, i64 0, i32 3, i32 0, i32 1
  %105 = bitcast i32** %104 to i64*
  %106 = bitcast %"class.std::__1::vector.40"* %103 to i64*
  %107 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %103, i64 0, i32 0, i32 0
  %108 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %2, i64 0, i32 4
  %109 = bitcast float* %108 to i8*
  br label %110

110:                                              ; preds = %147, %94
  %111 = phi %"struct.jxl::ModularOptions"* [ %97, %94 ], [ %150, %147 ]
  %112 = phi i64 [ %98, %94 ], [ %151, %147 ]
  %113 = inttoptr i64 %112 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %113, i8* align 8 %102, i64 16, i1 false) #10
  %114 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %111, i64 0, i32 3
  %115 = bitcast %"class.std::__1::vector.40"* %114 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %115, i8 0, i64 24, i1 false) #10
  %116 = load i64, i64* %105, align 8
  %117 = load i64, i64* %106, align 8
  %118 = sub i64 %116, %117
  %119 = ashr exact i64 %118, 2
  %120 = icmp eq i64 %118, 0
  br i1 %120, label %147, label %121

121:                                              ; preds = %110
  %122 = icmp ugt i64 %119, 4611686018427387903
  br i1 %122, label %123, label %125

123:                                              ; preds = %121
  %124 = bitcast %"class.std::__1::vector.40"* %114 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %124) #12
  unreachable

125:                                              ; preds = %121
  %126 = tail call i8* @_Znwm(i64 %118) #13
  %127 = bitcast i8* %126 to i32*
  %128 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %111, i64 0, i32 3, i32 0, i32 1
  %129 = bitcast i32** %128 to i8**
  store i8* %126, i8** %129, align 8
  %130 = bitcast %"class.std::__1::vector.40"* %114 to i8**
  store i8* %126, i8** %130, align 8
  %131 = getelementptr inbounds i32, i32* %127, i64 %119
  %132 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %111, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  store i32* %131, i32** %132, align 8
  %133 = load i32*, i32** %107, align 8
  %134 = load i64, i64* %105, align 8
  %135 = bitcast i32** %128 to i64*
  %136 = ptrtoint i8* %126 to i64
  %137 = ptrtoint i32* %133 to i64
  %138 = sub i64 %134, %137
  %139 = icmp sgt i64 %138, 0
  br i1 %139, label %140, label %145

140:                                              ; preds = %125
  %141 = lshr exact i64 %138, 2
  %142 = bitcast i32* %133 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %126, i8* align 4 %142, i64 %138, i1 false) #10
  %143 = getelementptr inbounds i32, i32* %127, i64 %141
  %144 = ptrtoint i32* %143 to i64
  br label %145

145:                                              ; preds = %140, %125
  %146 = phi i64 [ %144, %140 ], [ %136, %125 ]
  store i64 %146, i64* %135, align 8
  br label %147

147:                                              ; preds = %145, %110
  %148 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %111, i64 0, i32 4
  %149 = bitcast float* %148 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %149, i8* align 8 %109, i64 41, i1 false) #10
  %150 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %111, i64 1
  %151 = ptrtoint %"struct.jxl::ModularOptions"* %150 to i64
  %152 = icmp eq %"struct.jxl::ModularOptions"* %101, %150
  br i1 %152, label %153, label %110

153:                                              ; preds = %147
  %154 = ptrtoint %"struct.jxl::ModularOptions"* %101 to i64
  %155 = getelementptr inbounds %"class.std::__1::vector.38", %"class.std::__1::vector.38"* %0, i64 0, i32 0, i32 0
  %156 = load %"struct.jxl::ModularOptions"*, %"struct.jxl::ModularOptions"** %155, align 8
  %157 = load %"struct.jxl::ModularOptions"*, %"struct.jxl::ModularOptions"** %7, align 8
  %158 = icmp eq %"struct.jxl::ModularOptions"* %157, %156
  br i1 %158, label %159, label %161

159:                                              ; preds = %153
  %160 = ptrtoint %"struct.jxl::ModularOptions"* %156 to i64
  br label %194

161:                                              ; preds = %153, %161
  %162 = phi %"struct.jxl::ModularOptions"* [ %164, %161 ], [ %97, %153 ]
  %163 = phi %"struct.jxl::ModularOptions"* [ %165, %161 ], [ %157, %153 ]
  %164 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %162, i64 -1
  %165 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %163, i64 -1
  %166 = bitcast %"struct.jxl::ModularOptions"* %164 to i8*
  %167 = bitcast %"struct.jxl::ModularOptions"* %165 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %166, i8* align 8 %167, i64 16, i1 false) #10
  %168 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %162, i64 -1, i32 3
  %169 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %163, i64 -1, i32 3
  %170 = bitcast %"class.std::__1::vector.40"* %168 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %170, i8 0, i64 24, i1 false) #10
  %171 = bitcast %"class.std::__1::vector.40"* %169 to i64*
  %172 = load i64, i64* %171, align 8
  %173 = bitcast %"class.std::__1::vector.40"* %168 to i64*
  store i64 %172, i64* %173, align 8
  %174 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %163, i64 -1, i32 3, i32 0, i32 1
  %175 = bitcast i32** %174 to i64*
  %176 = load i64, i64* %175, align 8
  %177 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %162, i64 -1, i32 3, i32 0, i32 1
  %178 = bitcast i32** %177 to i64*
  store i64 %176, i64* %178, align 8
  %179 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %163, i64 -1, i32 3, i32 0, i32 2, i32 0, i32 0
  %180 = bitcast i32** %179 to i64*
  %181 = load i64, i64* %180, align 8
  %182 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %162, i64 -1, i32 3, i32 0, i32 2, i32 0, i32 0
  %183 = bitcast i32** %182 to i64*
  store i64 %181, i64* %183, align 8
  %184 = bitcast %"class.std::__1::vector.40"* %169 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %184, i8 0, i64 24, i1 false) #10
  %185 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %162, i64 -1, i32 4
  %186 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %163, i64 -1, i32 4
  %187 = bitcast float* %185 to i8*
  %188 = bitcast float* %186 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %187, i8* align 8 %188, i64 41, i1 false) #10
  %189 = icmp eq %"struct.jxl::ModularOptions"* %165, %156
  br i1 %189, label %190, label %161

190:                                              ; preds = %161
  %191 = ptrtoint %"struct.jxl::ModularOptions"* %164 to i64
  %192 = load i64, i64* %72, align 8
  %193 = load %"struct.jxl::ModularOptions"*, %"struct.jxl::ModularOptions"** %7, align 8
  br label %194

194:                                              ; preds = %159, %190
  %195 = phi %"struct.jxl::ModularOptions"* [ %156, %159 ], [ %193, %190 ]
  %196 = phi i64 [ %98, %159 ], [ %191, %190 ]
  %197 = phi i64 [ %160, %159 ], [ %192, %190 ]
  store i64 %196, i64* %72, align 8
  store i64 %154, i64* %8, align 8
  store i64 %100, i64* %5, align 8
  %198 = inttoptr i64 %197 to %"struct.jxl::ModularOptions"*
  %199 = icmp eq %"struct.jxl::ModularOptions"* %195, %198
  br i1 %199, label %213, label %200

200:                                              ; preds = %194, %211
  %201 = phi %"struct.jxl::ModularOptions"* [ %202, %211 ], [ %195, %194 ]
  %202 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %201, i64 -1
  %203 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %201, i64 -1, i32 3, i32 0, i32 0
  %204 = load i32*, i32** %203, align 8
  %205 = icmp eq i32* %204, null
  br i1 %205, label %211, label %206

206:                                              ; preds = %200
  %207 = ptrtoint i32* %204 to i64
  %208 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %201, i64 -1, i32 3, i32 0, i32 1
  %209 = bitcast i32** %208 to i64*
  store i64 %207, i64* %209, align 8
  %210 = bitcast i32* %204 to i8*
  tail call void @_ZdlPv(i8* %210) #13
  br label %211

211:                                              ; preds = %206, %200
  %212 = icmp eq %"struct.jxl::ModularOptions"* %202, %198
  br i1 %212, label %213, label %200

213:                                              ; preds = %211, %194
  %214 = icmp eq i64 %197, 0
  br i1 %214, label %217, label %215

215:                                              ; preds = %213
  %216 = inttoptr i64 %197 to i8*
  tail call void @_ZdlPv(i8* %216) #13
  br label %217

217:                                              ; preds = %215, %213, %69
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEmRKj(%"class.std::__1::vector.40"*, i64, i32* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %4 = bitcast i32* %2 to i8*
  %5 = bitcast i32* %2 to i8*
  %6 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %0, i64 0, i32 0, i32 1
  %10 = bitcast i32** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %8, %11
  %13 = ashr exact i64 %12, 2
  %14 = icmp ult i64 %13, %1
  br i1 %14, label %130, label %15

15:                                               ; preds = %3
  %16 = inttoptr i64 %11 to i32*
  %17 = inttoptr i64 %11 to i8*
  %18 = getelementptr inbounds i32, i32* %16, i64 %1
  %19 = icmp eq i64 %1, 0
  br i1 %19, label %128, label %20

20:                                               ; preds = %15
  %21 = shl nsw i64 %1, 2
  %22 = add i64 %21, -4
  %23 = lshr exact i64 %22, 2
  %24 = add nuw nsw i64 %23, 1
  %25 = icmp ult i64 %24, 8
  br i1 %25, label %26, label %47

26:                                               ; preds = %105, %47, %20
  %27 = phi i32* [ %16, %47 ], [ %16, %20 ], [ %59, %105 ]
  %28 = ptrtoint i32* %27 to i64
  %29 = add i64 %1, -1
  %30 = getelementptr i32, i32* %16, i64 %29
  %31 = ptrtoint i32* %30 to i64
  %32 = sub i64 %31, %28
  %33 = lshr i64 %32, 2
  %34 = add nuw nsw i64 %33, 1
  %35 = and i64 %34, 7
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %44, label %37

37:                                               ; preds = %26, %37
  %38 = phi i32* [ %41, %37 ], [ %27, %26 ]
  %39 = phi i64 [ %42, %37 ], [ %35, %26 ]
  %40 = load i32, i32* %2, align 4
  store i32 %40, i32* %38, align 4
  %41 = getelementptr inbounds i32, i32* %38, i64 1
  %42 = add i64 %39, -1
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %37, !llvm.loop !130

44:                                               ; preds = %37, %26
  %45 = phi i32* [ %27, %26 ], [ %41, %37 ]
  %46 = icmp ult i64 %32, 28
  br i1 %46, label %107, label %109

47:                                               ; preds = %20
  %48 = shl nsw i64 %1, 2
  %49 = add i64 %48, -4
  %50 = lshr exact i64 %49, 2
  %51 = add nuw nsw i64 %50, 1
  %52 = getelementptr i32, i32* %16, i64 %51
  %53 = getelementptr i8, i8* %5, i64 1
  %54 = icmp ugt i8* %53, %17
  %55 = icmp ugt i32* %52, %2
  %56 = and i1 %54, %55
  br i1 %56, label %26, label %57

57:                                               ; preds = %47
  %58 = and i64 %24, 9223372036854775800
  %59 = getelementptr i32, i32* %16, i64 %58
  %60 = add nsw i64 %58, -8
  %61 = lshr exact i64 %60, 3
  %62 = add nuw nsw i64 %61, 1
  %63 = and i64 %62, 1
  %64 = icmp eq i64 %60, 0
  br i1 %64, label %92, label %65

65:                                               ; preds = %57
  %66 = sub nuw nsw i64 %62, %63
  %67 = load i32, i32* %2, align 4, !alias.scope !131
  %68 = insertelement <4 x i32> undef, i32 %67, i32 0
  %69 = shufflevector <4 x i32> %68, <4 x i32> undef, <4 x i32> zeroinitializer
  %70 = insertelement <4 x i32> undef, i32 %67, i32 0
  %71 = shufflevector <4 x i32> %70, <4 x i32> undef, <4 x i32> zeroinitializer
  %72 = load i32, i32* %2, align 4, !alias.scope !131
  %73 = insertelement <4 x i32> undef, i32 %72, i32 0
  %74 = shufflevector <4 x i32> %73, <4 x i32> undef, <4 x i32> zeroinitializer
  %75 = insertelement <4 x i32> undef, i32 %72, i32 0
  %76 = shufflevector <4 x i32> %75, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %77

77:                                               ; preds = %77, %65
  %78 = phi i64 [ 0, %65 ], [ %89, %77 ]
  %79 = phi i64 [ %66, %65 ], [ %90, %77 ]
  %80 = getelementptr i32, i32* %16, i64 %78
  %81 = bitcast i32* %80 to <4 x i32>*
  store <4 x i32> %69, <4 x i32>* %81, align 4, !alias.scope !134, !noalias !131
  %82 = getelementptr i32, i32* %80, i64 4
  %83 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %71, <4 x i32>* %83, align 4, !alias.scope !134, !noalias !131
  %84 = or i64 %78, 8
  %85 = getelementptr i32, i32* %16, i64 %84
  %86 = bitcast i32* %85 to <4 x i32>*
  store <4 x i32> %74, <4 x i32>* %86, align 4, !alias.scope !134, !noalias !131
  %87 = getelementptr i32, i32* %85, i64 4
  %88 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> %76, <4 x i32>* %88, align 4, !alias.scope !134, !noalias !131
  %89 = add i64 %78, 16
  %90 = add i64 %79, -2
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %92, label %77, !llvm.loop !136

92:                                               ; preds = %77, %57
  %93 = phi i64 [ 0, %57 ], [ %89, %77 ]
  %94 = icmp eq i64 %63, 0
  br i1 %94, label %105, label %95

95:                                               ; preds = %92
  %96 = getelementptr i32, i32* %16, i64 %93
  %97 = load i32, i32* %2, align 4, !alias.scope !131
  %98 = insertelement <4 x i32> undef, i32 %97, i32 0
  %99 = shufflevector <4 x i32> %98, <4 x i32> undef, <4 x i32> zeroinitializer
  %100 = insertelement <4 x i32> undef, i32 %97, i32 0
  %101 = shufflevector <4 x i32> %100, <4 x i32> undef, <4 x i32> zeroinitializer
  %102 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %99, <4 x i32>* %102, align 4, !alias.scope !134, !noalias !131
  %103 = getelementptr i32, i32* %96, i64 4
  %104 = bitcast i32* %103 to <4 x i32>*
  store <4 x i32> %101, <4 x i32>* %104, align 4, !alias.scope !134, !noalias !131
  br label %105

105:                                              ; preds = %92, %95
  %106 = icmp eq i64 %24, %58
  br i1 %106, label %107, label %26

107:                                              ; preds = %44, %109, %105
  %108 = ptrtoint i32* %18 to i64
  br label %128

109:                                              ; preds = %44, %109
  %110 = phi i32* [ %126, %109 ], [ %45, %44 ]
  %111 = load i32, i32* %2, align 4
  store i32 %111, i32* %110, align 4
  %112 = getelementptr inbounds i32, i32* %110, i64 1
  %113 = load i32, i32* %2, align 4
  store i32 %113, i32* %112, align 4
  %114 = getelementptr inbounds i32, i32* %110, i64 2
  %115 = load i32, i32* %2, align 4
  store i32 %115, i32* %114, align 4
  %116 = getelementptr inbounds i32, i32* %110, i64 3
  %117 = load i32, i32* %2, align 4
  store i32 %117, i32* %116, align 4
  %118 = getelementptr inbounds i32, i32* %110, i64 4
  %119 = load i32, i32* %2, align 4
  store i32 %119, i32* %118, align 4
  %120 = getelementptr inbounds i32, i32* %110, i64 5
  %121 = load i32, i32* %2, align 4
  store i32 %121, i32* %120, align 4
  %122 = getelementptr inbounds i32, i32* %110, i64 6
  %123 = load i32, i32* %2, align 4
  store i32 %123, i32* %122, align 4
  %124 = getelementptr inbounds i32, i32* %110, i64 7
  %125 = load i32, i32* %2, align 4
  store i32 %125, i32* %124, align 4
  %126 = getelementptr inbounds i32, i32* %110, i64 8
  %127 = icmp eq i32* %126, %18
  br i1 %127, label %107, label %109, !llvm.loop !137

128:                                              ; preds = %15, %107
  %129 = phi i64 [ %108, %107 ], [ %11, %15 ]
  store i64 %129, i64* %10, align 8
  br label %292

130:                                              ; preds = %3
  %131 = bitcast %"class.std::__1::vector.40"* %0 to i64*
  %132 = load i64, i64* %131, align 8
  %133 = sub i64 %11, %132
  %134 = ashr exact i64 %133, 2
  %135 = add i64 %134, %1
  %136 = icmp ugt i64 %135, 4611686018427387903
  br i1 %136, label %137, label %139

137:                                              ; preds = %130
  %138 = bitcast %"class.std::__1::vector.40"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %138) #12
  unreachable

139:                                              ; preds = %130
  %140 = sub i64 %8, %132
  %141 = ashr exact i64 %140, 2
  %142 = icmp ult i64 %141, 2305843009213693951
  br i1 %142, label %143, label %151

143:                                              ; preds = %139
  %144 = ashr exact i64 %140, 1
  %145 = icmp ult i64 %144, %135
  %146 = select i1 %145, i64 %135, i64 %144
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %156, label %148

148:                                              ; preds = %143
  %149 = icmp ugt i64 %146, 4611686018427387903
  br i1 %149, label %150, label %151

150:                                              ; preds = %148
  tail call void @abort() #12
  unreachable

151:                                              ; preds = %139, %148
  %152 = phi i64 [ %146, %148 ], [ 4611686018427387903, %139 ]
  %153 = shl i64 %152, 2
  %154 = tail call i8* @_Znwm(i64 %153) #13
  %155 = bitcast i8* %154 to i32*
  br label %156

156:                                              ; preds = %143, %151
  %157 = phi i64 [ %152, %151 ], [ 0, %143 ]
  %158 = phi i32* [ %155, %151 ], [ null, %143 ]
  %159 = getelementptr inbounds i32, i32* %158, i64 %134
  %160 = getelementptr inbounds i32, i32* %158, i64 %157
  %161 = getelementptr inbounds i32, i32* %159, i64 %1
  %162 = shl nsw i64 %1, 2
  %163 = add i64 %162, -4
  %164 = lshr exact i64 %163, 2
  %165 = add nuw nsw i64 %164, 1
  %166 = icmp ult i64 %165, 8
  br i1 %166, label %229, label %167

167:                                              ; preds = %156
  %168 = bitcast i32* %159 to i8*
  %169 = shl nsw i64 %1, 2
  %170 = add i64 %169, -4
  %171 = lshr exact i64 %170, 2
  %172 = add nsw i64 %134, %171
  %173 = add i64 %172, 1
  %174 = getelementptr i32, i32* %158, i64 %173
  %175 = getelementptr i8, i8* %4, i64 1
  %176 = icmp ugt i8* %175, %168
  %177 = icmp ugt i32* %174, %2
  %178 = and i1 %176, %177
  br i1 %178, label %229, label %179

179:                                              ; preds = %167
  %180 = and i64 %165, 9223372036854775800
  %181 = getelementptr i32, i32* %159, i64 %180
  %182 = add nsw i64 %180, -8
  %183 = lshr exact i64 %182, 3
  %184 = add nuw nsw i64 %183, 1
  %185 = and i64 %184, 1
  %186 = icmp eq i64 %182, 0
  br i1 %186, label %214, label %187

187:                                              ; preds = %179
  %188 = sub nuw nsw i64 %184, %185
  %189 = load i32, i32* %2, align 4, !alias.scope !138
  %190 = insertelement <4 x i32> undef, i32 %189, i32 0
  %191 = shufflevector <4 x i32> %190, <4 x i32> undef, <4 x i32> zeroinitializer
  %192 = insertelement <4 x i32> undef, i32 %189, i32 0
  %193 = shufflevector <4 x i32> %192, <4 x i32> undef, <4 x i32> zeroinitializer
  %194 = load i32, i32* %2, align 4, !alias.scope !138
  %195 = insertelement <4 x i32> undef, i32 %194, i32 0
  %196 = shufflevector <4 x i32> %195, <4 x i32> undef, <4 x i32> zeroinitializer
  %197 = insertelement <4 x i32> undef, i32 %194, i32 0
  %198 = shufflevector <4 x i32> %197, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %199

199:                                              ; preds = %199, %187
  %200 = phi i64 [ 0, %187 ], [ %211, %199 ]
  %201 = phi i64 [ %188, %187 ], [ %212, %199 ]
  %202 = getelementptr i32, i32* %159, i64 %200
  %203 = bitcast i32* %202 to <4 x i32>*
  store <4 x i32> %191, <4 x i32>* %203, align 4, !alias.scope !141, !noalias !138
  %204 = getelementptr i32, i32* %202, i64 4
  %205 = bitcast i32* %204 to <4 x i32>*
  store <4 x i32> %193, <4 x i32>* %205, align 4, !alias.scope !141, !noalias !138
  %206 = or i64 %200, 8
  %207 = getelementptr i32, i32* %159, i64 %206
  %208 = bitcast i32* %207 to <4 x i32>*
  store <4 x i32> %196, <4 x i32>* %208, align 4, !alias.scope !141, !noalias !138
  %209 = getelementptr i32, i32* %207, i64 4
  %210 = bitcast i32* %209 to <4 x i32>*
  store <4 x i32> %198, <4 x i32>* %210, align 4, !alias.scope !141, !noalias !138
  %211 = add i64 %200, 16
  %212 = add i64 %201, -2
  %213 = icmp eq i64 %212, 0
  br i1 %213, label %214, label %199, !llvm.loop !143

214:                                              ; preds = %199, %179
  %215 = phi i64 [ 0, %179 ], [ %211, %199 ]
  %216 = icmp eq i64 %185, 0
  br i1 %216, label %227, label %217

217:                                              ; preds = %214
  %218 = getelementptr i32, i32* %159, i64 %215
  %219 = load i32, i32* %2, align 4, !alias.scope !138
  %220 = insertelement <4 x i32> undef, i32 %219, i32 0
  %221 = shufflevector <4 x i32> %220, <4 x i32> undef, <4 x i32> zeroinitializer
  %222 = insertelement <4 x i32> undef, i32 %219, i32 0
  %223 = shufflevector <4 x i32> %222, <4 x i32> undef, <4 x i32> zeroinitializer
  %224 = bitcast i32* %218 to <4 x i32>*
  store <4 x i32> %221, <4 x i32>* %224, align 4, !alias.scope !141, !noalias !138
  %225 = getelementptr i32, i32* %218, i64 4
  %226 = bitcast i32* %225 to <4 x i32>*
  store <4 x i32> %223, <4 x i32>* %226, align 4, !alias.scope !141, !noalias !138
  br label %227

227:                                              ; preds = %214, %217
  %228 = icmp eq i64 %165, %180
  br i1 %228, label %270, label %229

229:                                              ; preds = %227, %167, %156
  %230 = phi i32* [ %159, %167 ], [ %159, %156 ], [ %181, %227 ]
  %231 = ptrtoint i32* %230 to i64
  %232 = add i64 %134, %1
  %233 = add i64 %232, -1
  %234 = getelementptr i32, i32* %158, i64 %233
  %235 = ptrtoint i32* %234 to i64
  %236 = sub i64 %235, %231
  %237 = lshr i64 %236, 2
  %238 = add nuw nsw i64 %237, 1
  %239 = and i64 %238, 7
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %248, label %241

241:                                              ; preds = %229, %241
  %242 = phi i32* [ %245, %241 ], [ %230, %229 ]
  %243 = phi i64 [ %246, %241 ], [ %239, %229 ]
  %244 = load i32, i32* %2, align 4
  store i32 %244, i32* %242, align 4
  %245 = getelementptr inbounds i32, i32* %242, i64 1
  %246 = add i64 %243, -1
  %247 = icmp eq i64 %246, 0
  br i1 %247, label %248, label %241, !llvm.loop !144

248:                                              ; preds = %241, %229
  %249 = phi i32* [ %230, %229 ], [ %245, %241 ]
  %250 = icmp ult i64 %236, 28
  br i1 %250, label %270, label %251

251:                                              ; preds = %248, %251
  %252 = phi i32* [ %268, %251 ], [ %249, %248 ]
  %253 = load i32, i32* %2, align 4
  store i32 %253, i32* %252, align 4
  %254 = getelementptr inbounds i32, i32* %252, i64 1
  %255 = load i32, i32* %2, align 4
  store i32 %255, i32* %254, align 4
  %256 = getelementptr inbounds i32, i32* %252, i64 2
  %257 = load i32, i32* %2, align 4
  store i32 %257, i32* %256, align 4
  %258 = getelementptr inbounds i32, i32* %252, i64 3
  %259 = load i32, i32* %2, align 4
  store i32 %259, i32* %258, align 4
  %260 = getelementptr inbounds i32, i32* %252, i64 4
  %261 = load i32, i32* %2, align 4
  store i32 %261, i32* %260, align 4
  %262 = getelementptr inbounds i32, i32* %252, i64 5
  %263 = load i32, i32* %2, align 4
  store i32 %263, i32* %262, align 4
  %264 = getelementptr inbounds i32, i32* %252, i64 6
  %265 = load i32, i32* %2, align 4
  store i32 %265, i32* %264, align 4
  %266 = getelementptr inbounds i32, i32* %252, i64 7
  %267 = load i32, i32* %2, align 4
  store i32 %267, i32* %266, align 4
  %268 = getelementptr inbounds i32, i32* %252, i64 8
  %269 = icmp eq i32* %161, %268
  br i1 %269, label %270, label %251, !llvm.loop !145

270:                                              ; preds = %248, %251, %227
  %271 = ptrtoint i32* %160 to i64
  %272 = ptrtoint i32* %161 to i64
  %273 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %0, i64 0, i32 0, i32 0
  %274 = load i32*, i32** %273, align 8
  %275 = load i64, i64* %10, align 8
  %276 = ptrtoint i32* %274 to i64
  %277 = sub i64 %275, %276
  %278 = ashr exact i64 %277, 2
  %279 = sub nsw i64 0, %278
  %280 = getelementptr inbounds i32, i32* %159, i64 %279
  %281 = ptrtoint i32* %280 to i64
  %282 = icmp sgt i64 %277, 0
  br i1 %282, label %283, label %287

283:                                              ; preds = %270
  %284 = bitcast i32* %280 to i8*
  %285 = bitcast i32* %274 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %284, i8* align 4 %285, i64 %277, i1 false) #10
  %286 = load i32*, i32** %273, align 8
  br label %287

287:                                              ; preds = %270, %283
  %288 = phi i32* [ %274, %270 ], [ %286, %283 ]
  store i64 %281, i64* %131, align 8
  store i64 %272, i64* %10, align 8
  store i64 %271, i64* %7, align 8
  %289 = icmp eq i32* %288, null
  br i1 %289, label %292, label %290

290:                                              ; preds = %287
  %291 = bitcast i32* %288 to i8*
  tail call void @_ZdlPv(i8* %291) #13
  br label %292

292:                                              ; preds = %290, %287, %128
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS0_IjNS_9allocatorIjEEEENS1_IS3_EEE8__appendEm(%"class.std::__1::vector.104"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.104", %"class.std::__1::vector.104"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.std::__1::vector.40"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.104", %"class.std::__1::vector.104"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.std::__1::vector.40"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 24
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %30, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"class.std::__1::vector.40"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %28, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %13, i64 %18, i32 0, i32 0
  %20 = bitcast i32** %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = urem i64 %23, 24
  %25 = add i64 %23, 24
  %26 = sub i64 %25, %24
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %26, i1 false) #10
  %27 = ptrtoint %"class.std::__1::vector.40"* %16 to i64
  br label %28

28:                                               ; preds = %12, %15
  %29 = phi i64 [ %27, %15 ], [ %8, %12 ]
  store i64 %29, i64* %7, align 8
  br label %124

30:                                               ; preds = %2
  %31 = bitcast %"class.std::__1::vector.104"* %0 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = sub i64 %8, %32
  %34 = sdiv exact i64 %33, 24
  %35 = add i64 %34, %1
  %36 = icmp ugt i64 %35, 768614336404564650
  br i1 %36, label %37, label %39

37:                                               ; preds = %30
  %38 = bitcast %"class.std::__1::vector.104"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %38) #12
  unreachable

39:                                               ; preds = %30
  %40 = sub i64 %5, %32
  %41 = sdiv exact i64 %40, 24
  %42 = icmp ult i64 %41, 384307168202282325
  br i1 %42, label %43, label %48

43:                                               ; preds = %39
  %44 = shl nsw i64 %41, 1
  %45 = icmp ult i64 %44, %35
  %46 = select i1 %45, i64 %35, i64 %44
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %39, %43
  %49 = phi i64 [ %46, %43 ], [ 768614336404564650, %39 ]
  %50 = mul i64 %49, 24
  %51 = tail call i8* @_Znwm(i64 %50) #13
  %52 = bitcast i8* %51 to %"class.std::__1::vector.40"*
  br label %53

53:                                               ; preds = %43, %48
  %54 = phi i64 [ %49, %48 ], [ 0, %43 ]
  %55 = phi %"class.std::__1::vector.40"* [ %52, %48 ], [ null, %43 ]
  %56 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %55, i64 %34
  %57 = ptrtoint %"class.std::__1::vector.40"* %56 to i64
  %58 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %55, i64 %54
  %59 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %56, i64 %1
  br label %60

60:                                               ; preds = %53, %60
  %61 = phi %"class.std::__1::vector.40"* [ %64, %60 ], [ %56, %53 ]
  %62 = phi i64 [ %65, %60 ], [ %57, %53 ]
  %63 = inttoptr i64 %62 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 24, i1 false) #10
  %64 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %61, i64 1
  %65 = ptrtoint %"class.std::__1::vector.40"* %64 to i64
  %66 = icmp eq %"class.std::__1::vector.40"* %59, %64
  br i1 %66, label %67, label %60

67:                                               ; preds = %60
  %68 = ptrtoint %"class.std::__1::vector.40"* %58 to i64
  %69 = ptrtoint %"class.std::__1::vector.40"* %59 to i64
  %70 = getelementptr inbounds %"class.std::__1::vector.104", %"class.std::__1::vector.104"* %0, i64 0, i32 0, i32 0
  %71 = load %"class.std::__1::vector.40"*, %"class.std::__1::vector.40"** %70, align 8
  %72 = load %"class.std::__1::vector.40"*, %"class.std::__1::vector.40"** %6, align 8
  %73 = icmp eq %"class.std::__1::vector.40"* %72, %71
  br i1 %73, label %74, label %76

74:                                               ; preds = %67
  %75 = ptrtoint %"class.std::__1::vector.40"* %71 to i64
  br label %101

76:                                               ; preds = %67, %76
  %77 = phi %"class.std::__1::vector.40"* [ %79, %76 ], [ %56, %67 ]
  %78 = phi %"class.std::__1::vector.40"* [ %80, %76 ], [ %72, %67 ]
  %79 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %77, i64 -1
  %80 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %78, i64 -1
  %81 = bitcast %"class.std::__1::vector.40"* %79 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 24, i1 false) #10
  %82 = bitcast %"class.std::__1::vector.40"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast %"class.std::__1::vector.40"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %78, i64 -1, i32 0, i32 1
  %86 = bitcast i32** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %77, i64 -1, i32 0, i32 1
  %89 = bitcast i32** %88 to i64*
  store i64 %87, i64* %89, align 8
  %90 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %78, i64 -1, i32 0, i32 2, i32 0, i32 0
  %91 = bitcast i32** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %77, i64 -1, i32 0, i32 2, i32 0, i32 0
  %94 = bitcast i32** %93 to i64*
  store i64 %92, i64* %94, align 8
  %95 = bitcast %"class.std::__1::vector.40"* %80 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 24, i1 false) #10
  %96 = icmp eq %"class.std::__1::vector.40"* %80, %71
  br i1 %96, label %97, label %76

97:                                               ; preds = %76
  %98 = ptrtoint %"class.std::__1::vector.40"* %79 to i64
  %99 = load i64, i64* %31, align 8
  %100 = load %"class.std::__1::vector.40"*, %"class.std::__1::vector.40"** %6, align 8
  br label %101

101:                                              ; preds = %74, %97
  %102 = phi %"class.std::__1::vector.40"* [ %71, %74 ], [ %100, %97 ]
  %103 = phi i64 [ %57, %74 ], [ %98, %97 ]
  %104 = phi i64 [ %75, %74 ], [ %99, %97 ]
  store i64 %103, i64* %31, align 8
  store i64 %69, i64* %7, align 8
  store i64 %68, i64* %4, align 8
  %105 = inttoptr i64 %104 to %"class.std::__1::vector.40"*
  %106 = icmp eq %"class.std::__1::vector.40"* %102, %105
  br i1 %106, label %120, label %107

107:                                              ; preds = %101, %118
  %108 = phi %"class.std::__1::vector.40"* [ %109, %118 ], [ %102, %101 ]
  %109 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %108, i64 -1
  %110 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %109, i64 0, i32 0, i32 0
  %111 = load i32*, i32** %110, align 8
  %112 = icmp eq i32* %111, null
  br i1 %112, label %118, label %113

113:                                              ; preds = %107
  %114 = ptrtoint i32* %111 to i64
  %115 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %108, i64 -1, i32 0, i32 1
  %116 = bitcast i32** %115 to i64*
  store i64 %114, i64* %116, align 8
  %117 = bitcast i32* %111 to i8*
  tail call void @_ZdlPv(i8* %117) #13
  br label %118

118:                                              ; preds = %113, %107
  %119 = icmp eq %"class.std::__1::vector.40"* %109, %105
  br i1 %119, label %120, label %107

120:                                              ; preds = %118, %101
  %121 = icmp eq i64 %104, 0
  br i1 %121, label %124, label %122

122:                                              ; preds = %120
  %123 = inttoptr i64 %104 to i8*
  tail call void @_ZdlPv(i8* %123) #13
  br label %124

124:                                              ; preds = %122, %120, %28
  ret void
}

declare void @_ZN3jxl13TraceRunBeginEPKcPd(i8*, double*) local_unnamed_addr #2

declare void @_ZN3jxl11TraceRunEndEPKcd(i8*, double) local_unnamed_addr #2

declare i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl10ThreadPool14ReturnTrueInitEm(i64) #0 comdat align 2 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ModularFrameEncoder19ComputeEncodingDataERKNS_11FrameHeaderERKNS_13ImageMetadataEPNS_6Image3IfEERKNSt3__16vectorINS_5PlaneIfEENSE_9allocatorISH_EEEEPNS_18PassesEncoderStateEPS0_PNS_6AuxOutEbE3$_0E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #0 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #10
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ModularFrameEncoder19ComputeEncodingDataERKNS_11FrameHeaderERKNS_13ImageMetadataEPNS_6Image3IfEERKNSt3__16vectorINS_5PlaneIfEENSE_9allocatorISH_EEEEPNS_18PassesEncoderStateEPS0_PNS_6AuxOutEbE3$_0E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #0 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon**
  %6 = load %class.anon*, %class.anon** %5, align 8
  %7 = zext i32 %1 to i64
  %8 = getelementptr inbounds %class.anon, %class.anon* %6, i64 0, i32 0
  %9 = load %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ModularFrameEncoder"** %8, align 8
  %10 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %9, i64 0, i32 11
  %11 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %9, i64 0, i32 11, i32 39
  %12 = getelementptr inbounds %class.anon, %class.anon* %6, i64 0, i32 1
  %13 = load %"class.std::__1::vector.328"*, %"class.std::__1::vector.328"** %12, align 8
  %14 = getelementptr inbounds %"class.std::__1::vector.328", %"class.std::__1::vector.328"* %13, i64 0, i32 0, i32 0
  %15 = load %struct.GroupParams*, %struct.GroupParams** %14, align 8
  %16 = getelementptr inbounds %class.anon, %class.anon* %6, i64 0, i32 2
  %17 = load %"struct.jxl::FrameDimensions"*, %"struct.jxl::FrameDimensions"** %16, align 8
  %18 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %15, i64 %7, i32 3, i32 0
  %19 = load i32, i32* %18, align 8
  switch i32 %19, label %60 [
    i32 5, label %43
    i32 1, label %20
    i32 2, label %23
    i32 3, label %29
    i32 4, label %36
  ]

20:                                               ; preds = %3
  %21 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %15, i64 %7, i32 3, i32 2
  %22 = load i64, i64* %21, align 8
  br label %56

23:                                               ; preds = %3
  %24 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %17, i64 0, i32 15
  %25 = load i64, i64* %24, align 8
  %26 = add i64 %25, 1
  %27 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %15, i64 %7, i32 3, i32 2
  %28 = load i64, i64* %27, align 8
  br label %56

29:                                               ; preds = %3
  %30 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %17, i64 0, i32 15
  %31 = load i64, i64* %30, align 8
  %32 = shl i64 %31, 1
  %33 = or i64 %32, 1
  %34 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %15, i64 %7, i32 3, i32 2
  %35 = load i64, i64* %34, align 8
  br label %56

36:                                               ; preds = %3
  %37 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %17, i64 0, i32 15
  %38 = load i64, i64* %37, align 8
  %39 = mul i64 %38, 3
  %40 = add i64 %39, 1
  %41 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %15, i64 %7, i32 3, i32 1
  %42 = load i64, i64* %41, align 8
  br label %56

43:                                               ; preds = %3
  %44 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %17, i64 0, i32 15
  %45 = load i64, i64* %44, align 8
  %46 = mul i64 %45, 3
  %47 = add i64 %46, 18
  %48 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %17, i64 0, i32 14
  %49 = load i64, i64* %48, align 8
  %50 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %15, i64 %7, i32 3, i32 3
  %51 = load i64, i64* %50, align 8
  %52 = mul i64 %51, %49
  %53 = add i64 %47, %52
  %54 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %15, i64 %7, i32 3, i32 2
  %55 = load i64, i64* %54, align 8
  br label %56

56:                                               ; preds = %20, %23, %29, %36, %43
  %57 = phi i64 [ %55, %43 ], [ %42, %36 ], [ %35, %29 ], [ %28, %23 ], [ 1, %20 ]
  %58 = phi i64 [ %53, %43 ], [ %40, %36 ], [ %33, %29 ], [ %26, %23 ], [ %22, %20 ]
  %59 = add i64 %58, %57
  br label %60

60:                                               ; preds = %56, %3
  %61 = phi i64 [ 0, %3 ], [ %59, %56 ]
  %62 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %9, i64 0, i32 3, i32 0, i32 0
  %63 = load %"struct.jxl::ModularOptions"*, %"struct.jxl::ModularOptions"** %62, align 8
  %64 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %63, i64 %61
  %65 = bitcast %"struct.jxl::ModularOptions"* %64 to i8*
  %66 = bitcast %"struct.jxl::ModularOptions"* %11 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %65, i8* align 8 %66, i64 16, i1 false) #10
  %67 = icmp eq %"struct.jxl::ModularOptions"* %64, %11
  br i1 %67, label %74, label %68

68:                                               ; preds = %60
  %69 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %63, i64 %61, i32 3
  %70 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %9, i64 0, i32 11, i32 39, i32 3, i32 0, i32 0
  %71 = load i32*, i32** %70, align 8
  %72 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %9, i64 0, i32 11, i32 39, i32 3, i32 0, i32 1
  %73 = load i32*, i32** %72, align 8
  tail call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE6assignIPjEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector.40"* %69, i32* %71, i32* %73) #10
  br label %74

74:                                               ; preds = %68, %60
  %75 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %63, i64 %61, i32 4
  %76 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %9, i64 0, i32 11, i32 39, i32 4
  %77 = bitcast float* %75 to i8*
  %78 = bitcast float* %76 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %77, i8* align 8 %78, i64 41, i1 false) #10
  %79 = load %"class.std::__1::vector.328"*, %"class.std::__1::vector.328"** %12, align 8
  %80 = getelementptr inbounds %"class.std::__1::vector.328", %"class.std::__1::vector.328"* %79, i64 0, i32 0, i32 0
  %81 = load %struct.GroupParams*, %struct.GroupParams** %80, align 8
  %82 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %81, i64 %7, i32 0
  %83 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %81, i64 %7, i32 1
  %84 = load i32, i32* %83, align 8
  %85 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %81, i64 %7, i32 2
  %86 = load i32, i32* %85, align 4
  %87 = getelementptr inbounds %struct.GroupParams, %struct.GroupParams* %81, i64 %7, i32 3
  %88 = getelementptr inbounds %class.anon, %class.anon* %6, i64 0, i32 3
  %89 = load i8*, i8** %88, align 8
  %90 = load i8, i8* %89, align 1, !range !2
  %91 = icmp ne i8 %90, 0
  %92 = tail call i32 @_ZN3jxl19ModularFrameEncoder19PrepareStreamParamsERKNS_4RectERKNS_14CompressParamsEiiRKNS_15ModularStreamIdEb(%"class.jxl::ModularFrameEncoder"* %9, %"class.jxl::Rect"* dereferenceable(32) %82, %"struct.jxl::CompressParams"* dereferenceable(360) %10, i32 %84, i32 %86, %"struct.jxl::ModularStreamId"* dereferenceable(32) %87, i1 zeroext %91) #10
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %97, label %94

94:                                               ; preds = %74
  %95 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.30, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.2, i64 0, i64 0), i32 773, i8* getelementptr inbounds ([138 x i8], [138 x i8]* @.str.58, i64 0, i64 0)) #10
  %96 = tail call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

97:                                               ; preds = %74
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @"_ZNSt3__16__sortIRZN3jxl19ModularFrameEncoder19ComputeEncodingDataERKNS1_11FrameHeaderERKNS1_13ImageMetadataEPNS1_6Image3IfEERKNS_6vectorINS1_5PlaneIfEENS_9allocatorISE_EEEEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_6AuxOutEbE3$_1PNS1_21ModularMultiplierInfoEEEvT0_SU_T_"(%"struct.jxl::ModularMultiplierInfo"*, %"struct.jxl::ModularMultiplierInfo"*) unnamed_addr #0 {
  br label %3

3:                                                ; preds = %589, %2
  %4 = phi %"struct.jxl::ModularMultiplierInfo"* [ %1, %2 ], [ %538, %589 ]
  %5 = phi %"struct.jxl::ModularMultiplierInfo"* [ %0, %2 ], [ %20, %589 ]
  %6 = ptrtoint %"struct.jxl::ModularMultiplierInfo"* %4 to i64
  %7 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %4, i64 -1
  %8 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %4, i64 -2
  %9 = bitcast %"struct.jxl::ModularMultiplierInfo"* %7 to i8*
  %10 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %4, i64 -1, i32 0, i32 0, i64 0, i32 0, i64 0
  %11 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %4, i64 -1, i32 0, i32 0, i64 0, i32 0, i64 1
  %12 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %4, i64 -1, i32 0, i32 0, i64 1, i32 0, i64 0
  %13 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %4, i64 -1, i32 0, i32 0, i64 1, i32 0, i64 1
  %14 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %4, i64 -1, i32 1
  %15 = bitcast %"struct.jxl::ModularMultiplierInfo"* %7 to <4 x i32>*
  %16 = ptrtoint %"struct.jxl::ModularMultiplierInfo"* %4 to i64
  br label %17

17:                                               ; preds = %600, %3
  %18 = phi %"struct.jxl::ModularMultiplierInfo"* [ %5, %3 ], [ %601, %600 ]
  br label %19

19:                                               ; preds = %380, %17
  %20 = phi %"struct.jxl::ModularMultiplierInfo"* [ %18, %17 ], [ %338, %380 ]
  %21 = ptrtoint %"struct.jxl::ModularMultiplierInfo"* %20 to i64
  %22 = sub i64 %6, %21
  %23 = sdiv exact i64 %22, 20
  switch i64 %23, label %80 [
    i64 0, label %604
    i64 1, label %604
    i64 2, label %24
    i64 3, label %65
    i64 4, label %69
    i64 5, label %74
  ]

24:                                               ; preds = %19
  %25 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %4, i64 -1
  %26 = bitcast %"struct.jxl::ModularMultiplierInfo"* %25 to i8*
  %27 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %4, i64 -1, i32 0, i32 0, i64 0, i32 0, i64 0
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %4, i64 -1, i32 0, i32 0, i64 0, i32 0, i64 1
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %4, i64 -1, i32 0, i32 0, i64 1, i32 0, i64 0
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %4, i64 -1, i32 0, i32 0, i64 1, i32 0, i64 1
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %4, i64 -1, i32 1
  %36 = load i32, i32* %35, align 4
  %37 = bitcast %"struct.jxl::ModularMultiplierInfo"* %20 to <4 x i32>*
  %38 = load <4 x i32>, <4 x i32>* %37, align 4
  %39 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %20, i64 0, i32 1
  %40 = load i32, i32* %39, align 4
  %41 = extractelement <4 x i32> %38, i32 0
  %42 = icmp ult i32 %28, %41
  br i1 %42, label %62, label %43

43:                                               ; preds = %24
  %44 = icmp ult i32 %41, %28
  br i1 %44, label %604, label %45

45:                                               ; preds = %43
  %46 = extractelement <4 x i32> %38, i32 1
  %47 = icmp ult i32 %30, %46
  br i1 %47, label %62, label %48

48:                                               ; preds = %45
  %49 = icmp ult i32 %46, %30
  br i1 %49, label %604, label %50

50:                                               ; preds = %48
  %51 = extractelement <4 x i32> %38, i32 2
  %52 = icmp ult i32 %32, %51
  br i1 %52, label %62, label %53

53:                                               ; preds = %50
  %54 = icmp ult i32 %51, %32
  br i1 %54, label %604, label %55

55:                                               ; preds = %53
  %56 = extractelement <4 x i32> %38, i32 3
  %57 = icmp ult i32 %34, %56
  br i1 %57, label %62, label %58

58:                                               ; preds = %55
  %59 = icmp uge i32 %56, %34
  %60 = icmp ult i32 %36, %40
  %61 = and i1 %59, %60
  br i1 %61, label %62, label %604

62:                                               ; preds = %50, %45, %24, %55, %58
  %63 = bitcast %"struct.jxl::ModularMultiplierInfo"* %20 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %63, i8* align 4 %26, i64 20, i1 false) #10
  %64 = bitcast %"struct.jxl::ModularMultiplierInfo"* %25 to <4 x i32>*
  store <4 x i32> %38, <4 x i32>* %64, align 4
  store i32 %40, i32* %35, align 4
  br label %604

65:                                               ; preds = %19
  %66 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %20, i64 1
  %67 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %4, i64 -1
  %68 = tail call fastcc i32 @"_ZNSt3__17__sort3IRZN3jxl19ModularFrameEncoder19ComputeEncodingDataERKNS1_11FrameHeaderERKNS1_13ImageMetadataEPNS1_6Image3IfEERKNS_6vectorINS1_5PlaneIfEENS_9allocatorISE_EEEEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_6AuxOutEbE3$_1PNS1_21ModularMultiplierInfoEEEjT0_SU_SU_T_"(%"struct.jxl::ModularMultiplierInfo"* %20, %"struct.jxl::ModularMultiplierInfo"* %66, %"struct.jxl::ModularMultiplierInfo"* %67)
  br label %604

69:                                               ; preds = %19
  %70 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %20, i64 1
  %71 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %20, i64 2
  %72 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %4, i64 -1
  %73 = tail call fastcc i32 @"_ZNSt3__17__sort4IRZN3jxl19ModularFrameEncoder19ComputeEncodingDataERKNS1_11FrameHeaderERKNS1_13ImageMetadataEPNS1_6Image3IfEERKNS_6vectorINS1_5PlaneIfEENS_9allocatorISE_EEEEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_6AuxOutEbE3$_1PNS1_21ModularMultiplierInfoEEEjT0_SU_SU_SU_T_"(%"struct.jxl::ModularMultiplierInfo"* %20, %"struct.jxl::ModularMultiplierInfo"* %70, %"struct.jxl::ModularMultiplierInfo"* %71, %"struct.jxl::ModularMultiplierInfo"* %72)
  br label %604

74:                                               ; preds = %19
  %75 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %20, i64 1
  %76 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %20, i64 2
  %77 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %20, i64 3
  %78 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %4, i64 -1
  %79 = tail call fastcc i32 @"_ZNSt3__17__sort5IRZN3jxl19ModularFrameEncoder19ComputeEncodingDataERKNS1_11FrameHeaderERKNS1_13ImageMetadataEPNS1_6Image3IfEERKNS_6vectorINS1_5PlaneIfEENS_9allocatorISE_EEEEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_6AuxOutEbE3$_1PNS1_21ModularMultiplierInfoEEEjT0_SU_SU_SU_SU_T_"(%"struct.jxl::ModularMultiplierInfo"* %20, %"struct.jxl::ModularMultiplierInfo"* %75, %"struct.jxl::ModularMultiplierInfo"* %76, %"struct.jxl::ModularMultiplierInfo"* %77, %"struct.jxl::ModularMultiplierInfo"* %78)
  br label %604

80:                                               ; preds = %19
  %81 = icmp slt i64 %22, 620
  br i1 %81, label %82, label %175

82:                                               ; preds = %80
  %83 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %20, i64 2
  %84 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %20, i64 1
  %85 = tail call fastcc i32 @"_ZNSt3__17__sort3IRZN3jxl19ModularFrameEncoder19ComputeEncodingDataERKNS1_11FrameHeaderERKNS1_13ImageMetadataEPNS1_6Image3IfEERKNS_6vectorINS1_5PlaneIfEENS_9allocatorISE_EEEEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_6AuxOutEbE3$_1PNS1_21ModularMultiplierInfoEEEjT0_SU_SU_T_"(%"struct.jxl::ModularMultiplierInfo"* %20, %"struct.jxl::ModularMultiplierInfo"* %84, %"struct.jxl::ModularMultiplierInfo"* %83) #10
  %86 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %20, i64 3
  %87 = icmp eq %"struct.jxl::ModularMultiplierInfo"* %86, %4
  br i1 %87, label %604, label %88

88:                                               ; preds = %82, %172
  %89 = phi %"struct.jxl::ModularMultiplierInfo"* [ %173, %172 ], [ %86, %82 ]
  %90 = phi %"struct.jxl::ModularMultiplierInfo"* [ %89, %172 ], [ %83, %82 ]
  %91 = bitcast %"struct.jxl::ModularMultiplierInfo"* %89 to <4 x i32>*
  %92 = load <4 x i32>, <4 x i32>* %91, align 4
  %93 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %89, i64 0, i32 1
  %94 = load i32, i32* %93, align 4
  %95 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %90, i64 0, i32 0, i32 0, i64 0, i32 0, i64 0
  %96 = load i32, i32* %95, align 4
  %97 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %90, i64 0, i32 0, i32 0, i64 0, i32 0, i64 1
  %98 = load i32, i32* %97, align 4
  %99 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %90, i64 0, i32 0, i32 0, i64 1, i32 0, i64 0
  %100 = load i32, i32* %99, align 4
  %101 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %90, i64 0, i32 0, i32 0, i64 1, i32 0, i64 1
  %102 = load i32, i32* %101, align 4
  %103 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %90, i64 0, i32 1
  %104 = load i32, i32* %103, align 4
  %105 = extractelement <4 x i32> %92, i32 0
  %106 = icmp ult i32 %105, %96
  br i1 %106, label %126, label %107

107:                                              ; preds = %88
  %108 = icmp ult i32 %96, %105
  br i1 %108, label %172, label %109

109:                                              ; preds = %107
  %110 = extractelement <4 x i32> %92, i32 1
  %111 = icmp ult i32 %110, %98
  br i1 %111, label %126, label %112

112:                                              ; preds = %109
  %113 = icmp ult i32 %98, %110
  br i1 %113, label %172, label %114

114:                                              ; preds = %112
  %115 = extractelement <4 x i32> %92, i32 2
  %116 = icmp ult i32 %115, %100
  br i1 %116, label %126, label %117

117:                                              ; preds = %114
  %118 = icmp ult i32 %100, %115
  br i1 %118, label %172, label %119

119:                                              ; preds = %117
  %120 = extractelement <4 x i32> %92, i32 3
  %121 = icmp ult i32 %120, %102
  br i1 %121, label %126, label %122

122:                                              ; preds = %119
  %123 = icmp uge i32 %102, %120
  %124 = icmp ult i32 %94, %104
  %125 = and i1 %123, %124
  br i1 %125, label %126, label %172

126:                                              ; preds = %122, %119, %114, %109, %88
  %127 = bitcast %"struct.jxl::ModularMultiplierInfo"* %89 to i8*
  %128 = bitcast %"struct.jxl::ModularMultiplierInfo"* %90 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %127, i8* align 4 %128, i64 20, i1 false) #10
  %129 = icmp eq %"struct.jxl::ModularMultiplierInfo"* %90, %20
  br i1 %129, label %168, label %130

130:                                              ; preds = %126
  %131 = extractelement <4 x i32> %92, i32 1
  %132 = extractelement <4 x i32> %92, i32 2
  %133 = extractelement <4 x i32> %92, i32 3
  br label %134

134:                                              ; preds = %130, %164
  %135 = phi %"struct.jxl::ModularMultiplierInfo"* [ %136, %164 ], [ %90, %130 ]
  %136 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %135, i64 -1
  %137 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %135, i64 -1, i32 0, i32 0, i64 0, i32 0, i64 0
  %138 = load i32, i32* %137, align 4
  %139 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %135, i64 -1, i32 0, i32 0, i64 0, i32 0, i64 1
  %140 = load i32, i32* %139, align 4
  %141 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %135, i64 -1, i32 0, i32 0, i64 1, i32 0, i64 0
  %142 = load i32, i32* %141, align 4
  %143 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %135, i64 -1, i32 0, i32 0, i64 1, i32 0, i64 1
  %144 = load i32, i32* %143, align 4
  %145 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %135, i64 -1, i32 1
  %146 = load i32, i32* %145, align 4
  %147 = icmp ult i32 %105, %138
  br i1 %147, label %164, label %148

148:                                              ; preds = %134
  %149 = icmp ult i32 %138, %105
  br i1 %149, label %168, label %150

150:                                              ; preds = %148
  %151 = icmp ult i32 %131, %140
  br i1 %151, label %164, label %152

152:                                              ; preds = %150
  %153 = icmp ult i32 %140, %131
  br i1 %153, label %168, label %154

154:                                              ; preds = %152
  %155 = icmp ult i32 %132, %142
  br i1 %155, label %164, label %156

156:                                              ; preds = %154
  %157 = icmp ult i32 %142, %132
  br i1 %157, label %168, label %158

158:                                              ; preds = %156
  %159 = icmp ult i32 %133, %144
  br i1 %159, label %164, label %160

160:                                              ; preds = %158
  %161 = icmp uge i32 %144, %133
  %162 = icmp ult i32 %94, %146
  %163 = and i1 %161, %162
  br i1 %163, label %164, label %168

164:                                              ; preds = %160, %158, %154, %150, %134
  %165 = bitcast %"struct.jxl::ModularMultiplierInfo"* %135 to i8*
  %166 = bitcast %"struct.jxl::ModularMultiplierInfo"* %136 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %165, i8* align 4 %166, i64 20, i1 false) #10
  %167 = icmp eq %"struct.jxl::ModularMultiplierInfo"* %136, %20
  br i1 %167, label %168, label %134

168:                                              ; preds = %164, %160, %156, %152, %148, %126
  %169 = phi %"struct.jxl::ModularMultiplierInfo"* [ %20, %126 ], [ %20, %164 ], [ %135, %160 ], [ %135, %148 ], [ %135, %152 ], [ %135, %156 ]
  %170 = bitcast %"struct.jxl::ModularMultiplierInfo"* %169 to <4 x i32>*
  store <4 x i32> %92, <4 x i32>* %170, align 4
  %171 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %169, i64 0, i32 1
  store i32 %94, i32* %171, align 4
  br label %172

172:                                              ; preds = %168, %122, %117, %112, %107
  %173 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %89, i64 1
  %174 = icmp eq %"struct.jxl::ModularMultiplierInfo"* %173, %4
  br i1 %174, label %604, label %88

175:                                              ; preds = %80
  %176 = icmp sgt i64 %22, 19980
  %177 = udiv i64 %22, 40
  %178 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %20, i64 %177
  br i1 %176, label %179, label %184

179:                                              ; preds = %175
  %180 = udiv i64 %22, 80
  %181 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %20, i64 %180
  %182 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %178, i64 %180
  %183 = tail call fastcc i32 @"_ZNSt3__17__sort5IRZN3jxl19ModularFrameEncoder19ComputeEncodingDataERKNS1_11FrameHeaderERKNS1_13ImageMetadataEPNS1_6Image3IfEERKNS_6vectorINS1_5PlaneIfEENS_9allocatorISE_EEEEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_6AuxOutEbE3$_1PNS1_21ModularMultiplierInfoEEEjT0_SU_SU_SU_SU_T_"(%"struct.jxl::ModularMultiplierInfo"* %20, %"struct.jxl::ModularMultiplierInfo"* %181, %"struct.jxl::ModularMultiplierInfo"* %178, %"struct.jxl::ModularMultiplierInfo"* %182, %"struct.jxl::ModularMultiplierInfo"* %7)
  br label %186

184:                                              ; preds = %175
  %185 = tail call fastcc i32 @"_ZNSt3__17__sort3IRZN3jxl19ModularFrameEncoder19ComputeEncodingDataERKNS1_11FrameHeaderERKNS1_13ImageMetadataEPNS1_6Image3IfEERKNS_6vectorINS1_5PlaneIfEENS_9allocatorISE_EEEEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_6AuxOutEbE3$_1PNS1_21ModularMultiplierInfoEEEjT0_SU_SU_T_"(%"struct.jxl::ModularMultiplierInfo"* %20, %"struct.jxl::ModularMultiplierInfo"* %178, %"struct.jxl::ModularMultiplierInfo"* %7)
  br label %186

186:                                              ; preds = %184, %179
  %187 = phi i32 [ %183, %179 ], [ %185, %184 ]
  %188 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %20, i64 0, i32 0, i32 0, i64 0, i32 0, i64 0
  %189 = load i32, i32* %188, align 4
  %190 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %20, i64 0, i32 0, i32 0, i64 0, i32 0, i64 1
  %191 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %20, i64 0, i32 0, i32 0, i64 1, i32 0, i64 0
  %192 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %20, i64 0, i32 0, i32 0, i64 1, i32 0, i64 1
  %193 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %20, i64 0, i32 1
  %194 = bitcast i32* %190 to <4 x i32>*
  %195 = load <4 x i32>, <4 x i32>* %194, align 4
  %196 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %178, i64 0, i32 0, i32 0, i64 0, i32 0, i64 0
  %197 = load i32, i32* %196, align 4
  %198 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %20, i64 %177, i32 0, i32 0, i64 0, i32 0, i64 1
  %199 = load i32, i32* %198, align 4
  %200 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %20, i64 %177, i32 0, i32 0, i64 1, i32 0, i64 0
  %201 = load i32, i32* %200, align 4
  %202 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %20, i64 %177, i32 0, i32 0, i64 1, i32 0, i64 1
  %203 = load i32, i32* %202, align 4
  %204 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %20, i64 %177, i32 1
  %205 = load i32, i32* %204, align 4
  %206 = icmp ult i32 %189, %197
  br i1 %206, label %428, label %207

207:                                              ; preds = %186
  %208 = icmp ult i32 %197, %189
  br i1 %208, label %227, label %209

209:                                              ; preds = %207
  %210 = extractelement <4 x i32> %195, i32 0
  %211 = icmp ult i32 %210, %199
  br i1 %211, label %428, label %212

212:                                              ; preds = %209
  %213 = icmp ult i32 %199, %210
  br i1 %213, label %227, label %214

214:                                              ; preds = %212
  %215 = extractelement <4 x i32> %195, i32 1
  %216 = icmp ult i32 %215, %201
  br i1 %216, label %428, label %217

217:                                              ; preds = %214
  %218 = icmp ult i32 %201, %215
  br i1 %218, label %227, label %219

219:                                              ; preds = %217
  %220 = extractelement <4 x i32> %195, i32 2
  %221 = icmp ult i32 %220, %203
  br i1 %221, label %428, label %222

222:                                              ; preds = %219
  %223 = icmp uge i32 %203, %220
  %224 = extractelement <4 x i32> %195, i32 3
  %225 = icmp ult i32 %224, %205
  %226 = and i1 %223, %225
  br i1 %226, label %428, label %227

227:                                              ; preds = %217, %212, %207, %222
  %228 = icmp eq %"struct.jxl::ModularMultiplierInfo"* %20, %8
  br i1 %228, label %229, label %388

229:                                              ; preds = %418, %227
  %230 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %20, i64 1
  %231 = load i32, i32* %10, align 4
  %232 = load i32, i32* %11, align 4
  %233 = load i32, i32* %12, align 4
  %234 = load i32, i32* %13, align 4
  %235 = load i32, i32* %14, align 4
  %236 = icmp ult i32 %189, %231
  br i1 %236, label %297, label %237

237:                                              ; preds = %229
  %238 = icmp ult i32 %231, %189
  br i1 %238, label %257, label %239

239:                                              ; preds = %237
  %240 = extractelement <4 x i32> %195, i32 0
  %241 = icmp ult i32 %240, %232
  br i1 %241, label %297, label %242

242:                                              ; preds = %239
  %243 = icmp ult i32 %232, %240
  br i1 %243, label %257, label %244

244:                                              ; preds = %242
  %245 = extractelement <4 x i32> %195, i32 1
  %246 = icmp ult i32 %245, %233
  br i1 %246, label %297, label %247

247:                                              ; preds = %244
  %248 = icmp ult i32 %233, %245
  br i1 %248, label %257, label %249

249:                                              ; preds = %247
  %250 = extractelement <4 x i32> %195, i32 2
  %251 = icmp ult i32 %250, %234
  br i1 %251, label %297, label %252

252:                                              ; preds = %249
  %253 = icmp uge i32 %234, %250
  %254 = extractelement <4 x i32> %195, i32 3
  %255 = icmp ult i32 %254, %235
  %256 = and i1 %253, %255
  br i1 %256, label %297, label %257

257:                                              ; preds = %247, %242, %237, %252
  %258 = icmp eq %"struct.jxl::ModularMultiplierInfo"* %230, %7
  br i1 %258, label %604, label %259

259:                                              ; preds = %257
  %260 = extractelement <4 x i32> %195, i32 0
  %261 = extractelement <4 x i32> %195, i32 1
  %262 = extractelement <4 x i32> %195, i32 2
  %263 = extractelement <4 x i32> %195, i32 3
  br label %264

264:                                              ; preds = %259, %294
  %265 = phi %"struct.jxl::ModularMultiplierInfo"* [ %295, %294 ], [ %230, %259 ]
  %266 = bitcast %"struct.jxl::ModularMultiplierInfo"* %265 to <4 x i32>*
  %267 = load <4 x i32>, <4 x i32>* %266, align 4
  %268 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %265, i64 0, i32 1
  %269 = load i32, i32* %268, align 4
  %270 = extractelement <4 x i32> %267, i32 0
  %271 = icmp ult i32 %189, %270
  br i1 %271, label %291, label %272

272:                                              ; preds = %264
  %273 = icmp ult i32 %270, %189
  br i1 %273, label %294, label %274

274:                                              ; preds = %272
  %275 = extractelement <4 x i32> %267, i32 1
  %276 = icmp ult i32 %260, %275
  br i1 %276, label %291, label %277

277:                                              ; preds = %274
  %278 = icmp ult i32 %275, %260
  br i1 %278, label %294, label %279

279:                                              ; preds = %277
  %280 = extractelement <4 x i32> %267, i32 2
  %281 = icmp ult i32 %261, %280
  br i1 %281, label %291, label %282

282:                                              ; preds = %279
  %283 = icmp ult i32 %280, %261
  br i1 %283, label %294, label %284

284:                                              ; preds = %282
  %285 = extractelement <4 x i32> %267, i32 3
  %286 = icmp ult i32 %262, %285
  br i1 %286, label %291, label %287

287:                                              ; preds = %284
  %288 = icmp uge i32 %285, %262
  %289 = icmp ult i32 %263, %269
  %290 = and i1 %288, %289
  br i1 %290, label %291, label %294

291:                                              ; preds = %279, %274, %264, %284, %287
  %292 = bitcast %"struct.jxl::ModularMultiplierInfo"* %265 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %292, i8* align 4 %9, i64 20, i1 false) #10
  store <4 x i32> %267, <4 x i32>* %15, align 4
  store i32 %269, i32* %14, align 4
  %293 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %265, i64 1
  br label %297

294:                                              ; preds = %282, %277, %272, %287
  %295 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %265, i64 1
  %296 = icmp eq %"struct.jxl::ModularMultiplierInfo"* %295, %7
  br i1 %296, label %604, label %264

297:                                              ; preds = %244, %239, %229, %249, %252, %291
  %298 = phi %"struct.jxl::ModularMultiplierInfo"* [ %293, %291 ], [ %230, %252 ], [ %230, %249 ], [ %230, %229 ], [ %230, %239 ], [ %230, %244 ]
  %299 = icmp eq %"struct.jxl::ModularMultiplierInfo"* %298, %7
  br i1 %299, label %604, label %300

300:                                              ; preds = %297, %382
  %301 = phi %"struct.jxl::ModularMultiplierInfo"* [ %387, %382 ], [ %298, %297 ]
  %302 = phi %"struct.jxl::ModularMultiplierInfo"* [ %351, %382 ], [ %7, %297 ]
  %303 = load i32, i32* %188, align 4
  %304 = load i32, i32* %190, align 4
  %305 = load i32, i32* %191, align 4
  %306 = load i32, i32* %192, align 4
  %307 = load i32, i32* %193, align 4
  %308 = bitcast %"struct.jxl::ModularMultiplierInfo"* %301 to <4 x i32>*
  %309 = load <4 x i32>, <4 x i32>* %308, align 4
  %310 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %301, i64 0, i32 1
  %311 = load i32, i32* %310, align 4
  %312 = extractelement <4 x i32> %309, i32 0
  %313 = icmp ult i32 %303, %312
  br i1 %313, label %337, label %314

314:                                              ; preds = %300, %341
  %315 = phi i32 [ %346, %341 ], [ %311, %300 ]
  %316 = phi %"struct.jxl::ModularMultiplierInfo"* [ %342, %341 ], [ %301, %300 ]
  %317 = phi <4 x i32> [ %344, %341 ], [ %309, %300 ]
  %318 = extractelement <4 x i32> %317, i32 0
  %319 = icmp ult i32 %318, %303
  br i1 %319, label %341, label %320

320:                                              ; preds = %314
  %321 = extractelement <4 x i32> %317, i32 1
  %322 = icmp ult i32 %304, %321
  br i1 %322, label %337, label %323

323:                                              ; preds = %320
  %324 = icmp ult i32 %321, %304
  br i1 %324, label %341, label %325

325:                                              ; preds = %323
  %326 = extractelement <4 x i32> %317, i32 2
  %327 = icmp ult i32 %305, %326
  br i1 %327, label %337, label %328

328:                                              ; preds = %325
  %329 = icmp ult i32 %326, %305
  br i1 %329, label %341, label %330

330:                                              ; preds = %328
  %331 = extractelement <4 x i32> %317, i32 3
  %332 = icmp ult i32 %306, %331
  br i1 %332, label %337, label %333

333:                                              ; preds = %330
  %334 = icmp uge i32 %331, %306
  %335 = icmp ult i32 %307, %315
  %336 = and i1 %334, %335
  br i1 %336, label %337, label %341

337:                                              ; preds = %333, %341, %320, %325, %330, %300
  %338 = phi %"struct.jxl::ModularMultiplierInfo"* [ %301, %300 ], [ %342, %341 ], [ %316, %320 ], [ %316, %325 ], [ %316, %330 ], [ %316, %333 ]
  %339 = phi i32 [ %311, %300 ], [ %346, %341 ], [ %315, %320 ], [ %315, %325 ], [ %315, %330 ], [ %315, %333 ]
  %340 = phi <4 x i32> [ %309, %300 ], [ %344, %341 ], [ %317, %320 ], [ %317, %325 ], [ %317, %330 ], [ %317, %333 ]
  br label %349

341:                                              ; preds = %328, %323, %314, %333
  %342 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %316, i64 1
  %343 = bitcast %"struct.jxl::ModularMultiplierInfo"* %342 to <4 x i32>*
  %344 = load <4 x i32>, <4 x i32>* %343, align 4
  %345 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %316, i64 1, i32 1
  %346 = load i32, i32* %345, align 4
  %347 = extractelement <4 x i32> %344, i32 0
  %348 = icmp ult i32 %303, %347
  br i1 %348, label %337, label %314

349:                                              ; preds = %375, %337
  %350 = phi %"struct.jxl::ModularMultiplierInfo"* [ %302, %337 ], [ %351, %375 ]
  %351 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %350, i64 -1
  %352 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %350, i64 -1, i32 0, i32 0, i64 0, i32 0, i64 0
  %353 = load i32, i32* %352, align 4
  %354 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %350, i64 -1, i32 0, i32 0, i64 0, i32 0, i64 1
  %355 = load i32, i32* %354, align 4
  %356 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %350, i64 -1, i32 0, i32 0, i64 1, i32 0, i64 0
  %357 = load i32, i32* %356, align 4
  %358 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %350, i64 -1, i32 0, i32 0, i64 1, i32 0, i64 1
  %359 = load i32, i32* %358, align 4
  %360 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %350, i64 -1, i32 1
  %361 = load i32, i32* %360, align 4
  %362 = icmp ult i32 %303, %353
  br i1 %362, label %375, label %363

363:                                              ; preds = %349
  %364 = icmp ult i32 %353, %303
  br i1 %364, label %380, label %365

365:                                              ; preds = %363
  %366 = icmp ult i32 %304, %355
  br i1 %366, label %375, label %367

367:                                              ; preds = %365
  %368 = icmp ult i32 %355, %304
  br i1 %368, label %380, label %369

369:                                              ; preds = %367
  %370 = icmp ult i32 %305, %357
  br i1 %370, label %375, label %371

371:                                              ; preds = %369
  %372 = icmp ult i32 %357, %305
  br i1 %372, label %380, label %373

373:                                              ; preds = %371
  %374 = icmp ult i32 %306, %359
  br i1 %374, label %375, label %376

375:                                              ; preds = %373, %369, %365, %349, %376
  br label %349

376:                                              ; preds = %373
  %377 = icmp uge i32 %359, %306
  %378 = icmp ult i32 %307, %361
  %379 = and i1 %377, %378
  br i1 %379, label %375, label %380

380:                                              ; preds = %371, %367, %363, %376
  %381 = icmp ult %"struct.jxl::ModularMultiplierInfo"* %338, %351
  br i1 %381, label %382, label %19

382:                                              ; preds = %380
  %383 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %350, i64 -1, i32 1
  %384 = bitcast %"struct.jxl::ModularMultiplierInfo"* %351 to i8*
  %385 = bitcast %"struct.jxl::ModularMultiplierInfo"* %338 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %385, i8* align 4 %384, i64 20, i1 false) #10
  %386 = bitcast %"struct.jxl::ModularMultiplierInfo"* %351 to <4 x i32>*
  store <4 x i32> %340, <4 x i32>* %386, align 4
  store i32 %339, i32* %383, align 4
  %387 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %338, i64 1
  br label %300

388:                                              ; preds = %227, %418
  %389 = phi %"struct.jxl::ModularMultiplierInfo"* [ %419, %418 ], [ %8, %227 ]
  %390 = phi %"struct.jxl::ModularMultiplierInfo"* [ %389, %418 ], [ %7, %227 ]
  %391 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %390, i64 -1, i32 0, i32 0, i64 0, i32 0, i64 0
  %392 = load i32, i32* %391, align 4
  %393 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %390, i64 -1, i32 0, i32 0, i64 0, i32 0, i64 1
  %394 = load i32, i32* %393, align 4
  %395 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %390, i64 -1, i32 0, i32 0, i64 1, i32 0, i64 0
  %396 = load i32, i32* %395, align 4
  %397 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %390, i64 -1, i32 0, i32 0, i64 1, i32 0, i64 1
  %398 = load i32, i32* %397, align 4
  %399 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %390, i64 -1, i32 1
  %400 = load i32, i32* %399, align 4
  %401 = icmp ult i32 %392, %197
  br i1 %401, label %421, label %402

402:                                              ; preds = %388
  %403 = icmp ult i32 %197, %392
  br i1 %403, label %418, label %404

404:                                              ; preds = %402
  %405 = icmp ult i32 %394, %199
  br i1 %405, label %421, label %406

406:                                              ; preds = %404
  %407 = icmp ult i32 %199, %394
  br i1 %407, label %418, label %408

408:                                              ; preds = %406
  %409 = icmp ult i32 %396, %201
  br i1 %409, label %421, label %410

410:                                              ; preds = %408
  %411 = icmp ult i32 %201, %396
  br i1 %411, label %418, label %412

412:                                              ; preds = %410
  %413 = icmp ult i32 %398, %203
  br i1 %413, label %421, label %414

414:                                              ; preds = %412
  %415 = icmp uge i32 %203, %398
  %416 = icmp ult i32 %400, %205
  %417 = and i1 %415, %416
  br i1 %417, label %421, label %418

418:                                              ; preds = %410, %406, %402, %414
  %419 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %389, i64 -1
  %420 = icmp eq %"struct.jxl::ModularMultiplierInfo"* %20, %419
  br i1 %420, label %229, label %388

421:                                              ; preds = %408, %404, %388, %412, %414
  %422 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %390, i64 -1, i32 0, i32 0, i64 0, i32 0, i64 1
  %423 = bitcast %"struct.jxl::ModularMultiplierInfo"* %389 to i8*
  %424 = bitcast %"struct.jxl::ModularMultiplierInfo"* %20 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %424, i8* align 4 %423, i64 20, i1 false) #10
  %425 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %389, i64 0, i32 0, i32 0, i64 0, i32 0, i64 0
  store i32 %189, i32* %425, align 4
  %426 = bitcast i32* %422 to <4 x i32>*
  store <4 x i32> %195, <4 x i32>* %426, align 4
  %427 = add i32 %187, 1
  br label %428

428:                                              ; preds = %214, %209, %186, %219, %222, %421
  %429 = phi i32 [ %427, %421 ], [ %187, %222 ], [ %187, %219 ], [ %187, %186 ], [ %187, %209 ], [ %187, %214 ]
  %430 = phi %"struct.jxl::ModularMultiplierInfo"* [ %389, %421 ], [ %7, %222 ], [ %7, %219 ], [ %7, %186 ], [ %7, %209 ], [ %7, %214 ]
  %431 = ptrtoint %"struct.jxl::ModularMultiplierInfo"* %20 to i64
  %432 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %20, i64 1
  %433 = icmp ult %"struct.jxl::ModularMultiplierInfo"* %432, %430
  br i1 %433, label %434, label %535

434:                                              ; preds = %428, %526
  %435 = phi %"struct.jxl::ModularMultiplierInfo"* [ %533, %526 ], [ %178, %428 ]
  %436 = phi i32 [ %531, %526 ], [ %429, %428 ]
  %437 = phi %"struct.jxl::ModularMultiplierInfo"* [ %534, %526 ], [ %432, %428 ]
  %438 = phi %"struct.jxl::ModularMultiplierInfo"* [ %523, %526 ], [ %430, %428 ]
  %439 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %435, i64 0, i32 0, i32 0, i64 0, i32 0, i64 0
  %440 = load i32, i32* %439, align 4
  %441 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %435, i64 0, i32 0, i32 0, i64 0, i32 0, i64 1
  %442 = load i32, i32* %441, align 4
  %443 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %435, i64 0, i32 0, i32 0, i64 1, i32 0, i64 0
  %444 = load i32, i32* %443, align 4
  %445 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %435, i64 0, i32 0, i32 0, i64 1, i32 0, i64 1
  %446 = load i32, i32* %445, align 4
  %447 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %435, i64 0, i32 1
  %448 = load i32, i32* %447, align 4
  br label %449

449:                                              ; preds = %483, %434
  %450 = phi %"struct.jxl::ModularMultiplierInfo"* [ %437, %434 ], [ %484, %483 ]
  %451 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %450, i64 0, i32 0, i32 0, i64 0, i32 0, i64 0
  %452 = load i32, i32* %451, align 4
  %453 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %450, i64 0, i32 0, i32 0, i64 0, i32 0, i64 1
  %454 = bitcast i32* %453 to <4 x i32>*
  %455 = load <4 x i32>, <4 x i32>* %454, align 4
  %456 = icmp ult i32 %452, %440
  br i1 %456, label %483, label %457

457:                                              ; preds = %449
  %458 = icmp ult i32 %440, %452
  br i1 %458, label %477, label %459

459:                                              ; preds = %457
  %460 = extractelement <4 x i32> %455, i32 0
  %461 = icmp ult i32 %460, %442
  br i1 %461, label %483, label %462

462:                                              ; preds = %459
  %463 = icmp ult i32 %442, %460
  br i1 %463, label %477, label %464

464:                                              ; preds = %462
  %465 = extractelement <4 x i32> %455, i32 1
  %466 = icmp ult i32 %465, %444
  br i1 %466, label %483, label %467

467:                                              ; preds = %464
  %468 = icmp ult i32 %444, %465
  br i1 %468, label %477, label %469

469:                                              ; preds = %467
  %470 = extractelement <4 x i32> %455, i32 2
  %471 = icmp ult i32 %470, %446
  br i1 %471, label %483, label %472

472:                                              ; preds = %469
  %473 = icmp uge i32 %446, %470
  %474 = extractelement <4 x i32> %455, i32 3
  %475 = icmp ult i32 %474, %448
  %476 = and i1 %473, %475
  br i1 %476, label %483, label %477

477:                                              ; preds = %472, %467, %462, %457
  %478 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %438, i64 -1
  %479 = bitcast %"struct.jxl::ModularMultiplierInfo"* %478 to i8*
  %480 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %438, i64 -1, i32 0, i32 0, i64 0, i32 0, i64 0
  %481 = load i32, i32* %480, align 4
  %482 = icmp ult i32 %481, %440
  br i1 %482, label %521, label %485

483:                                              ; preds = %464, %459, %449, %469, %472
  %484 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %450, i64 1
  br label %449

485:                                              ; preds = %477, %513
  %486 = phi %"struct.jxl::ModularMultiplierInfo"* [ %488, %513 ], [ %438, %477 ]
  %487 = phi i32 [ %517, %513 ], [ %481, %477 ]
  %488 = phi %"struct.jxl::ModularMultiplierInfo"* [ %514, %513 ], [ %478, %477 ]
  %489 = phi i8* [ %515, %513 ], [ %479, %477 ]
  %490 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %486, i64 -1, i32 0, i32 0, i64 0, i32 0, i64 1
  %491 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %486, i64 -1, i32 0, i32 0, i64 1, i32 0, i64 0
  %492 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %486, i64 -1, i32 0, i32 0, i64 1, i32 0, i64 1
  %493 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %486, i64 -1, i32 1
  %494 = load i32, i32* %490, align 4
  %495 = load i32, i32* %491, align 4
  %496 = load i32, i32* %492, align 4
  %497 = load i32, i32* %493, align 4
  %498 = icmp ult i32 %440, %487
  br i1 %498, label %513, label %499

499:                                              ; preds = %485
  %500 = icmp ult i32 %494, %442
  br i1 %500, label %521, label %501

501:                                              ; preds = %499
  %502 = icmp ult i32 %442, %494
  br i1 %502, label %513, label %503

503:                                              ; preds = %501
  %504 = icmp ult i32 %495, %444
  br i1 %504, label %521, label %505

505:                                              ; preds = %503
  %506 = icmp ult i32 %444, %495
  br i1 %506, label %513, label %507

507:                                              ; preds = %505
  %508 = icmp ult i32 %496, %446
  br i1 %508, label %521, label %509

509:                                              ; preds = %507
  %510 = icmp uge i32 %446, %496
  %511 = icmp ult i32 %497, %448
  %512 = and i1 %510, %511
  br i1 %512, label %521, label %513

513:                                              ; preds = %505, %501, %485, %509
  %514 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %488, i64 -1
  %515 = bitcast %"struct.jxl::ModularMultiplierInfo"* %514 to i8*
  %516 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %488, i64 -1, i32 0, i32 0, i64 0, i32 0, i64 0
  %517 = load i32, i32* %516, align 4
  %518 = icmp ult i32 %517, %440
  br i1 %518, label %519, label %485

519:                                              ; preds = %513
  %520 = bitcast %"struct.jxl::ModularMultiplierInfo"* %514 to i8*
  br label %521

521:                                              ; preds = %503, %499, %507, %509, %519, %477
  %522 = phi %"struct.jxl::ModularMultiplierInfo"* [ %438, %477 ], [ %488, %519 ], [ %486, %509 ], [ %486, %507 ], [ %486, %499 ], [ %486, %503 ]
  %523 = phi %"struct.jxl::ModularMultiplierInfo"* [ %478, %477 ], [ %514, %519 ], [ %488, %509 ], [ %488, %507 ], [ %488, %499 ], [ %488, %503 ]
  %524 = phi i8* [ %479, %477 ], [ %520, %519 ], [ %489, %509 ], [ %489, %507 ], [ %489, %499 ], [ %489, %503 ]
  %525 = icmp ugt %"struct.jxl::ModularMultiplierInfo"* %450, %523
  br i1 %525, label %535, label %526

526:                                              ; preds = %521
  %527 = bitcast %"struct.jxl::ModularMultiplierInfo"* %450 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %527, i8* align 4 %524, i64 20, i1 false) #10
  %528 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %523, i64 0, i32 0, i32 0, i64 0, i32 0, i64 0
  store i32 %452, i32* %528, align 4
  %529 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %522, i64 -1, i32 0, i32 0, i64 0, i32 0, i64 1
  %530 = bitcast i32* %529 to <4 x i32>*
  store <4 x i32> %455, <4 x i32>* %530, align 4
  %531 = add i32 %436, 1
  %532 = icmp eq %"struct.jxl::ModularMultiplierInfo"* %435, %450
  %533 = select i1 %532, %"struct.jxl::ModularMultiplierInfo"* %523, %"struct.jxl::ModularMultiplierInfo"* %435
  %534 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %450, i64 1
  br label %434

535:                                              ; preds = %521, %428
  %536 = phi %"struct.jxl::ModularMultiplierInfo"* [ %178, %428 ], [ %435, %521 ]
  %537 = phi i32 [ %429, %428 ], [ %436, %521 ]
  %538 = phi %"struct.jxl::ModularMultiplierInfo"* [ %432, %428 ], [ %450, %521 ]
  %539 = icmp eq %"struct.jxl::ModularMultiplierInfo"* %538, %536
  br i1 %539, label %581, label %540

540:                                              ; preds = %535
  %541 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %536, i64 0, i32 0, i32 0, i64 0, i32 0, i64 0
  %542 = load i32, i32* %541, align 4
  %543 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %536, i64 0, i32 0, i32 0, i64 0, i32 0, i64 1
  %544 = load i32, i32* %543, align 4
  %545 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %536, i64 0, i32 0, i32 0, i64 1, i32 0, i64 0
  %546 = load i32, i32* %545, align 4
  %547 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %536, i64 0, i32 0, i32 0, i64 1, i32 0, i64 1
  %548 = load i32, i32* %547, align 4
  %549 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %536, i64 0, i32 1
  %550 = load i32, i32* %549, align 4
  %551 = bitcast %"struct.jxl::ModularMultiplierInfo"* %538 to <4 x i32>*
  %552 = load <4 x i32>, <4 x i32>* %551, align 4
  %553 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %538, i64 0, i32 1
  %554 = load i32, i32* %553, align 4
  %555 = extractelement <4 x i32> %552, i32 0
  %556 = icmp ult i32 %542, %555
  br i1 %556, label %576, label %557

557:                                              ; preds = %540
  %558 = icmp ult i32 %555, %542
  br i1 %558, label %581, label %559

559:                                              ; preds = %557
  %560 = extractelement <4 x i32> %552, i32 1
  %561 = icmp ult i32 %544, %560
  br i1 %561, label %576, label %562

562:                                              ; preds = %559
  %563 = icmp ult i32 %560, %544
  br i1 %563, label %581, label %564

564:                                              ; preds = %562
  %565 = extractelement <4 x i32> %552, i32 2
  %566 = icmp ult i32 %546, %565
  br i1 %566, label %576, label %567

567:                                              ; preds = %564
  %568 = icmp ult i32 %565, %546
  br i1 %568, label %581, label %569

569:                                              ; preds = %567
  %570 = extractelement <4 x i32> %552, i32 3
  %571 = icmp ult i32 %548, %570
  br i1 %571, label %576, label %572

572:                                              ; preds = %569
  %573 = icmp uge i32 %570, %548
  %574 = icmp ult i32 %550, %554
  %575 = and i1 %573, %574
  br i1 %575, label %576, label %581

576:                                              ; preds = %564, %559, %540, %569, %572
  %577 = bitcast %"struct.jxl::ModularMultiplierInfo"* %538 to i8*
  %578 = bitcast %"struct.jxl::ModularMultiplierInfo"* %536 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %577, i8* align 4 %578, i64 20, i1 false) #10
  %579 = bitcast %"struct.jxl::ModularMultiplierInfo"* %536 to <4 x i32>*
  store <4 x i32> %552, <4 x i32>* %579, align 4
  store i32 %554, i32* %549, align 4
  %580 = add i32 %537, 1
  br label %581

581:                                              ; preds = %567, %562, %557, %535, %576, %572
  %582 = phi i32 [ %580, %576 ], [ %537, %572 ], [ %537, %535 ], [ %537, %557 ], [ %537, %562 ], [ %537, %567 ]
  %583 = icmp eq i32 %582, 0
  br i1 %583, label %584, label %591

584:                                              ; preds = %581
  %585 = tail call fastcc zeroext i1 @"_ZNSt3__127__insertion_sort_incompleteIRZN3jxl19ModularFrameEncoder19ComputeEncodingDataERKNS1_11FrameHeaderERKNS1_13ImageMetadataEPNS1_6Image3IfEERKNS_6vectorINS1_5PlaneIfEENS_9allocatorISE_EEEEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_6AuxOutEbE3$_1PNS1_21ModularMultiplierInfoEEEbT0_SU_T_"(%"struct.jxl::ModularMultiplierInfo"* %20, %"struct.jxl::ModularMultiplierInfo"* %538)
  %586 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %538, i64 1
  %587 = tail call fastcc zeroext i1 @"_ZNSt3__127__insertion_sort_incompleteIRZN3jxl19ModularFrameEncoder19ComputeEncodingDataERKNS1_11FrameHeaderERKNS1_13ImageMetadataEPNS1_6Image3IfEERKNS_6vectorINS1_5PlaneIfEENS_9allocatorISE_EEEEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_6AuxOutEbE3$_1PNS1_21ModularMultiplierInfoEEEbT0_SU_T_"(%"struct.jxl::ModularMultiplierInfo"* %586, %"struct.jxl::ModularMultiplierInfo"* %4)
  br i1 %587, label %588, label %590

588:                                              ; preds = %584
  br i1 %585, label %604, label %589

589:                                              ; preds = %588, %602
  br label %3

590:                                              ; preds = %584
  br i1 %585, label %600, label %591

591:                                              ; preds = %590, %581
  %592 = ptrtoint %"struct.jxl::ModularMultiplierInfo"* %538 to i64
  %593 = sub i64 %592, %431
  %594 = sdiv exact i64 %593, 20
  %595 = sub i64 %16, %592
  %596 = sdiv exact i64 %595, 20
  %597 = icmp slt i64 %594, %596
  br i1 %597, label %598, label %602

598:                                              ; preds = %591
  tail call fastcc void @"_ZNSt3__16__sortIRZN3jxl19ModularFrameEncoder19ComputeEncodingDataERKNS1_11FrameHeaderERKNS1_13ImageMetadataEPNS1_6Image3IfEERKNS_6vectorINS1_5PlaneIfEENS_9allocatorISE_EEEEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_6AuxOutEbE3$_1PNS1_21ModularMultiplierInfoEEEvT0_SU_T_"(%"struct.jxl::ModularMultiplierInfo"* %20, %"struct.jxl::ModularMultiplierInfo"* %538)
  %599 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %538, i64 1
  br label %600

600:                                              ; preds = %598, %590
  %601 = phi %"struct.jxl::ModularMultiplierInfo"* [ %586, %590 ], [ %599, %598 ]
  br label %17

602:                                              ; preds = %591
  %603 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %538, i64 1
  tail call fastcc void @"_ZNSt3__16__sortIRZN3jxl19ModularFrameEncoder19ComputeEncodingDataERKNS1_11FrameHeaderERKNS1_13ImageMetadataEPNS1_6Image3IfEERKNS_6vectorINS1_5PlaneIfEENS_9allocatorISE_EEEEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_6AuxOutEbE3$_1PNS1_21ModularMultiplierInfoEEEvT0_SU_T_"(%"struct.jxl::ModularMultiplierInfo"* %603, %"struct.jxl::ModularMultiplierInfo"* %4)
  br label %589

604:                                              ; preds = %588, %297, %19, %19, %257, %294, %172, %53, %48, %43, %82, %58, %62, %65, %69, %74
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @"_ZNSt3__17__sort3IRZN3jxl19ModularFrameEncoder19ComputeEncodingDataERKNS1_11FrameHeaderERKNS1_13ImageMetadataEPNS1_6Image3IfEERKNS_6vectorINS1_5PlaneIfEENS_9allocatorISE_EEEEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_6AuxOutEbE3$_1PNS1_21ModularMultiplierInfoEEEjT0_SU_SU_T_"(%"struct.jxl::ModularMultiplierInfo"* nocapture, %"struct.jxl::ModularMultiplierInfo"*, %"struct.jxl::ModularMultiplierInfo"* nocapture) unnamed_addr #0 {
  %4 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1, i64 0, i32 0, i32 0, i64 0, i32 0, i64 0
  %5 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1, i64 0, i32 0, i32 0, i64 0, i32 0, i64 1
  %6 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1, i64 0, i32 0, i32 0, i64 1, i32 0, i64 0
  %7 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1, i64 0, i32 0, i32 0, i64 1, i32 0, i64 1
  %8 = bitcast %"struct.jxl::ModularMultiplierInfo"* %1 to <4 x i32>*
  %9 = load <4 x i32>, <4 x i32>* %8, align 4
  %10 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1, i64 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = bitcast %"struct.jxl::ModularMultiplierInfo"* %0 to <4 x i32>*
  %13 = load <4 x i32>, <4 x i32>* %12, align 4
  %14 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %0, i64 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = extractelement <4 x i32> %13, i32 0
  %17 = extractelement <4 x i32> %9, i32 0
  %18 = icmp ult i32 %17, %16
  br i1 %18, label %108, label %19

19:                                               ; preds = %3
  %20 = icmp ult i32 %16, %17
  br i1 %20, label %41, label %21

21:                                               ; preds = %19
  %22 = extractelement <4 x i32> %13, i32 1
  %23 = extractelement <4 x i32> %9, i32 1
  %24 = icmp ult i32 %23, %22
  br i1 %24, label %108, label %25

25:                                               ; preds = %21
  %26 = icmp ult i32 %22, %23
  br i1 %26, label %41, label %27

27:                                               ; preds = %25
  %28 = extractelement <4 x i32> %13, i32 2
  %29 = extractelement <4 x i32> %9, i32 2
  %30 = icmp ult i32 %29, %28
  br i1 %30, label %108, label %31

31:                                               ; preds = %27
  %32 = icmp ult i32 %28, %29
  br i1 %32, label %41, label %33

33:                                               ; preds = %31
  %34 = extractelement <4 x i32> %13, i32 3
  %35 = extractelement <4 x i32> %9, i32 3
  %36 = icmp ult i32 %35, %34
  br i1 %36, label %108, label %37

37:                                               ; preds = %33
  %38 = icmp uge i32 %34, %35
  %39 = icmp ult i32 %11, %15
  %40 = and i1 %38, %39
  br i1 %40, label %108, label %41

41:                                               ; preds = %31, %25, %19, %37
  %42 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %2, i64 0, i32 0, i32 0, i64 0, i32 0, i64 0
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %2, i64 0, i32 0, i32 0, i64 0, i32 0, i64 1
  %45 = load i32, i32* %44, align 4
  %46 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %2, i64 0, i32 0, i32 0, i64 1, i32 0, i64 0
  %47 = load i32, i32* %46, align 4
  %48 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %2, i64 0, i32 0, i32 0, i64 1, i32 0, i64 1
  %49 = load i32, i32* %48, align 4
  %50 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %2, i64 0, i32 1
  %51 = load i32, i32* %50, align 4
  %52 = icmp ult i32 %43, %17
  br i1 %52, label %72, label %53

53:                                               ; preds = %41
  %54 = icmp ult i32 %17, %43
  br i1 %54, label %175, label %55

55:                                               ; preds = %53
  %56 = extractelement <4 x i32> %9, i32 1
  %57 = icmp ult i32 %45, %56
  br i1 %57, label %72, label %58

58:                                               ; preds = %55
  %59 = icmp ult i32 %56, %45
  br i1 %59, label %175, label %60

60:                                               ; preds = %58
  %61 = extractelement <4 x i32> %9, i32 2
  %62 = icmp ult i32 %47, %61
  br i1 %62, label %72, label %63

63:                                               ; preds = %60
  %64 = icmp ult i32 %61, %47
  br i1 %64, label %175, label %65

65:                                               ; preds = %63
  %66 = extractelement <4 x i32> %9, i32 3
  %67 = icmp ult i32 %49, %66
  br i1 %67, label %72, label %68

68:                                               ; preds = %65
  %69 = icmp uge i32 %66, %49
  %70 = icmp ult i32 %51, %11
  %71 = and i1 %69, %70
  br i1 %71, label %72, label %175

72:                                               ; preds = %60, %55, %41, %65, %68
  %73 = bitcast %"struct.jxl::ModularMultiplierInfo"* %1 to i8*
  %74 = bitcast %"struct.jxl::ModularMultiplierInfo"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %73, i8* align 4 %74, i64 20, i1 false) #10
  %75 = bitcast %"struct.jxl::ModularMultiplierInfo"* %2 to <4 x i32>*
  store <4 x i32> %9, <4 x i32>* %75, align 4
  store i32 %11, i32* %50, align 4
  %76 = load i32, i32* %4, align 4
  %77 = load i32, i32* %5, align 4
  %78 = load i32, i32* %6, align 4
  %79 = load i32, i32* %7, align 4
  %80 = load i32, i32* %10, align 4
  %81 = bitcast %"struct.jxl::ModularMultiplierInfo"* %0 to <4 x i32>*
  %82 = load <4 x i32>, <4 x i32>* %81, align 4
  %83 = load i32, i32* %14, align 4
  %84 = extractelement <4 x i32> %82, i32 0
  %85 = icmp ult i32 %76, %84
  br i1 %85, label %105, label %86

86:                                               ; preds = %72
  %87 = icmp ult i32 %84, %76
  br i1 %87, label %175, label %88

88:                                               ; preds = %86
  %89 = extractelement <4 x i32> %82, i32 1
  %90 = icmp ult i32 %77, %89
  br i1 %90, label %105, label %91

91:                                               ; preds = %88
  %92 = icmp ult i32 %89, %77
  br i1 %92, label %175, label %93

93:                                               ; preds = %91
  %94 = extractelement <4 x i32> %82, i32 2
  %95 = icmp ult i32 %78, %94
  br i1 %95, label %105, label %96

96:                                               ; preds = %93
  %97 = icmp ult i32 %94, %78
  br i1 %97, label %175, label %98

98:                                               ; preds = %96
  %99 = extractelement <4 x i32> %82, i32 3
  %100 = icmp ult i32 %79, %99
  br i1 %100, label %105, label %101

101:                                              ; preds = %98
  %102 = icmp uge i32 %99, %79
  %103 = icmp ult i32 %80, %83
  %104 = and i1 %102, %103
  br i1 %104, label %105, label %175

105:                                              ; preds = %93, %88, %72, %98, %101
  %106 = bitcast %"struct.jxl::ModularMultiplierInfo"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %106, i8* align 4 %73, i64 20, i1 false) #10
  %107 = bitcast %"struct.jxl::ModularMultiplierInfo"* %1 to <4 x i32>*
  store <4 x i32> %82, <4 x i32>* %107, align 4
  store i32 %83, i32* %10, align 4
  br label %175

108:                                              ; preds = %27, %21, %3, %33, %37
  %109 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %2, i64 0, i32 0, i32 0, i64 0, i32 0, i64 0
  %110 = load i32, i32* %109, align 4
  %111 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %2, i64 0, i32 0, i32 0, i64 0, i32 0, i64 1
  %112 = load i32, i32* %111, align 4
  %113 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %2, i64 0, i32 0, i32 0, i64 1, i32 0, i64 0
  %114 = load i32, i32* %113, align 4
  %115 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %2, i64 0, i32 0, i32 0, i64 1, i32 0, i64 1
  %116 = load i32, i32* %115, align 4
  %117 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %2, i64 0, i32 1
  %118 = load i32, i32* %117, align 4
  %119 = icmp ult i32 %110, %17
  br i1 %119, label %139, label %120

120:                                              ; preds = %108
  %121 = icmp ult i32 %17, %110
  br i1 %121, label %143, label %122

122:                                              ; preds = %120
  %123 = extractelement <4 x i32> %9, i32 1
  %124 = icmp ult i32 %112, %123
  br i1 %124, label %139, label %125

125:                                              ; preds = %122
  %126 = icmp ult i32 %123, %112
  br i1 %126, label %143, label %127

127:                                              ; preds = %125
  %128 = extractelement <4 x i32> %9, i32 2
  %129 = icmp ult i32 %114, %128
  br i1 %129, label %139, label %130

130:                                              ; preds = %127
  %131 = icmp ult i32 %128, %114
  br i1 %131, label %143, label %132

132:                                              ; preds = %130
  %133 = extractelement <4 x i32> %9, i32 3
  %134 = icmp ult i32 %116, %133
  br i1 %134, label %139, label %135

135:                                              ; preds = %132
  %136 = icmp uge i32 %133, %116
  %137 = icmp ult i32 %118, %11
  %138 = and i1 %136, %137
  br i1 %138, label %139, label %143

139:                                              ; preds = %127, %122, %108, %132, %135
  %140 = bitcast %"struct.jxl::ModularMultiplierInfo"* %0 to i8*
  %141 = bitcast %"struct.jxl::ModularMultiplierInfo"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %140, i8* align 4 %141, i64 20, i1 false) #10
  %142 = bitcast %"struct.jxl::ModularMultiplierInfo"* %2 to <4 x i32>*
  store <4 x i32> %13, <4 x i32>* %142, align 4
  store i32 %15, i32* %117, align 4
  br label %175

143:                                              ; preds = %130, %125, %120, %135
  %144 = bitcast %"struct.jxl::ModularMultiplierInfo"* %0 to i8*
  %145 = bitcast %"struct.jxl::ModularMultiplierInfo"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %144, i8* align 4 %145, i64 20, i1 false) #10
  %146 = bitcast %"struct.jxl::ModularMultiplierInfo"* %1 to <4 x i32>*
  store <4 x i32> %13, <4 x i32>* %146, align 4
  store i32 %15, i32* %10, align 4
  %147 = load i32, i32* %109, align 4
  %148 = load i32, i32* %111, align 4
  %149 = load i32, i32* %113, align 4
  %150 = load i32, i32* %115, align 4
  %151 = load i32, i32* %117, align 4
  %152 = icmp ult i32 %147, %16
  br i1 %152, label %172, label %153

153:                                              ; preds = %143
  %154 = icmp ult i32 %16, %147
  br i1 %154, label %175, label %155

155:                                              ; preds = %153
  %156 = extractelement <4 x i32> %13, i32 1
  %157 = icmp ult i32 %148, %156
  br i1 %157, label %172, label %158

158:                                              ; preds = %155
  %159 = icmp ult i32 %156, %148
  br i1 %159, label %175, label %160

160:                                              ; preds = %158
  %161 = extractelement <4 x i32> %13, i32 2
  %162 = icmp ult i32 %149, %161
  br i1 %162, label %172, label %163

163:                                              ; preds = %160
  %164 = icmp ult i32 %161, %149
  br i1 %164, label %175, label %165

165:                                              ; preds = %163
  %166 = extractelement <4 x i32> %13, i32 3
  %167 = icmp ult i32 %150, %166
  br i1 %167, label %172, label %168

168:                                              ; preds = %165
  %169 = icmp uge i32 %166, %150
  %170 = icmp ult i32 %151, %15
  %171 = and i1 %169, %170
  br i1 %171, label %172, label %175

172:                                              ; preds = %160, %155, %143, %165, %168
  %173 = bitcast %"struct.jxl::ModularMultiplierInfo"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %145, i8* align 4 %173, i64 20, i1 false) #10
  %174 = bitcast %"struct.jxl::ModularMultiplierInfo"* %2 to <4 x i32>*
  store <4 x i32> %13, <4 x i32>* %174, align 4
  store i32 %15, i32* %117, align 4
  br label %175

175:                                              ; preds = %163, %158, %153, %96, %91, %86, %63, %58, %53, %168, %172, %101, %105, %68, %139
  %176 = phi i32 [ 1, %139 ], [ 0, %68 ], [ 2, %105 ], [ 1, %101 ], [ 2, %172 ], [ 1, %168 ], [ 0, %53 ], [ 0, %58 ], [ 0, %63 ], [ 1, %86 ], [ 1, %91 ], [ 1, %96 ], [ 1, %153 ], [ 1, %158 ], [ 1, %163 ]
  ret i32 %176
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @"_ZNSt3__17__sort4IRZN3jxl19ModularFrameEncoder19ComputeEncodingDataERKNS1_11FrameHeaderERKNS1_13ImageMetadataEPNS1_6Image3IfEERKNS_6vectorINS1_5PlaneIfEENS_9allocatorISE_EEEEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_6AuxOutEbE3$_1PNS1_21ModularMultiplierInfoEEEjT0_SU_SU_SU_T_"(%"struct.jxl::ModularMultiplierInfo"* nocapture, %"struct.jxl::ModularMultiplierInfo"*, %"struct.jxl::ModularMultiplierInfo"* nocapture, %"struct.jxl::ModularMultiplierInfo"* nocapture) unnamed_addr #0 {
  %5 = tail call fastcc i32 @"_ZNSt3__17__sort3IRZN3jxl19ModularFrameEncoder19ComputeEncodingDataERKNS1_11FrameHeaderERKNS1_13ImageMetadataEPNS1_6Image3IfEERKNS_6vectorINS1_5PlaneIfEENS_9allocatorISE_EEEEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_6AuxOutEbE3$_1PNS1_21ModularMultiplierInfoEEEjT0_SU_SU_T_"(%"struct.jxl::ModularMultiplierInfo"* %0, %"struct.jxl::ModularMultiplierInfo"* %1, %"struct.jxl::ModularMultiplierInfo"* %2)
  %6 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %3, i64 0, i32 0, i32 0, i64 0, i32 0, i64 0
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %3, i64 0, i32 0, i32 0, i64 0, i32 0, i64 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %3, i64 0, i32 0, i32 0, i64 1, i32 0, i64 0
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %3, i64 0, i32 0, i32 0, i64 1, i32 0, i64 1
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %3, i64 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %2, i64 0, i32 0, i32 0, i64 0, i32 0, i64 0
  %17 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %2, i64 0, i32 0, i32 0, i64 0, i32 0, i64 1
  %18 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %2, i64 0, i32 0, i32 0, i64 1, i32 0, i64 0
  %19 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %2, i64 0, i32 0, i32 0, i64 1, i32 0, i64 1
  %20 = bitcast %"struct.jxl::ModularMultiplierInfo"* %2 to <4 x i32>*
  %21 = load <4 x i32>, <4 x i32>* %20, align 4
  %22 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %2, i64 0, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = extractelement <4 x i32> %21, i32 0
  %25 = icmp ult i32 %7, %24
  br i1 %25, label %45, label %26

26:                                               ; preds = %4
  %27 = icmp ult i32 %24, %7
  br i1 %27, label %122, label %28

28:                                               ; preds = %26
  %29 = extractelement <4 x i32> %21, i32 1
  %30 = icmp ult i32 %9, %29
  br i1 %30, label %45, label %31

31:                                               ; preds = %28
  %32 = icmp ult i32 %29, %9
  br i1 %32, label %122, label %33

33:                                               ; preds = %31
  %34 = extractelement <4 x i32> %21, i32 2
  %35 = icmp ult i32 %11, %34
  br i1 %35, label %45, label %36

36:                                               ; preds = %33
  %37 = icmp ult i32 %34, %11
  br i1 %37, label %122, label %38

38:                                               ; preds = %36
  %39 = extractelement <4 x i32> %21, i32 3
  %40 = icmp ult i32 %13, %39
  br i1 %40, label %45, label %41

41:                                               ; preds = %38
  %42 = icmp uge i32 %39, %13
  %43 = icmp ult i32 %15, %23
  %44 = and i1 %42, %43
  br i1 %44, label %45, label %122

45:                                               ; preds = %33, %28, %4, %38, %41
  %46 = bitcast %"struct.jxl::ModularMultiplierInfo"* %2 to i8*
  %47 = bitcast %"struct.jxl::ModularMultiplierInfo"* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %46, i8* align 4 %47, i64 20, i1 false) #10
  %48 = bitcast %"struct.jxl::ModularMultiplierInfo"* %3 to <4 x i32>*
  store <4 x i32> %21, <4 x i32>* %48, align 4
  store i32 %23, i32* %14, align 4
  %49 = add i32 %5, 1
  %50 = load i32, i32* %16, align 4
  %51 = load i32, i32* %17, align 4
  %52 = load i32, i32* %18, align 4
  %53 = load i32, i32* %19, align 4
  %54 = load i32, i32* %22, align 4
  %55 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1, i64 0, i32 0, i32 0, i64 0, i32 0, i64 0
  %56 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1, i64 0, i32 0, i32 0, i64 0, i32 0, i64 1
  %57 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1, i64 0, i32 0, i32 0, i64 1, i32 0, i64 0
  %58 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1, i64 0, i32 0, i32 0, i64 1, i32 0, i64 1
  %59 = bitcast %"struct.jxl::ModularMultiplierInfo"* %1 to <4 x i32>*
  %60 = load <4 x i32>, <4 x i32>* %59, align 4
  %61 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1, i64 0, i32 1
  %62 = load i32, i32* %61, align 4
  %63 = extractelement <4 x i32> %60, i32 0
  %64 = icmp ult i32 %50, %63
  br i1 %64, label %84, label %65

65:                                               ; preds = %45
  %66 = icmp ult i32 %63, %50
  br i1 %66, label %122, label %67

67:                                               ; preds = %65
  %68 = extractelement <4 x i32> %60, i32 1
  %69 = icmp ult i32 %51, %68
  br i1 %69, label %84, label %70

70:                                               ; preds = %67
  %71 = icmp ult i32 %68, %51
  br i1 %71, label %122, label %72

72:                                               ; preds = %70
  %73 = extractelement <4 x i32> %60, i32 2
  %74 = icmp ult i32 %52, %73
  br i1 %74, label %84, label %75

75:                                               ; preds = %72
  %76 = icmp ult i32 %73, %52
  br i1 %76, label %122, label %77

77:                                               ; preds = %75
  %78 = extractelement <4 x i32> %60, i32 3
  %79 = icmp ult i32 %53, %78
  br i1 %79, label %84, label %80

80:                                               ; preds = %77
  %81 = icmp uge i32 %78, %53
  %82 = icmp ult i32 %54, %62
  %83 = and i1 %81, %82
  br i1 %83, label %84, label %122

84:                                               ; preds = %72, %67, %45, %77, %80
  %85 = bitcast %"struct.jxl::ModularMultiplierInfo"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %85, i8* align 4 %46, i64 20, i1 false) #10
  %86 = bitcast %"struct.jxl::ModularMultiplierInfo"* %2 to <4 x i32>*
  store <4 x i32> %60, <4 x i32>* %86, align 4
  store i32 %62, i32* %22, align 4
  %87 = add i32 %5, 2
  %88 = load i32, i32* %55, align 4
  %89 = load i32, i32* %56, align 4
  %90 = load i32, i32* %57, align 4
  %91 = load i32, i32* %58, align 4
  %92 = load i32, i32* %61, align 4
  %93 = bitcast %"struct.jxl::ModularMultiplierInfo"* %0 to <4 x i32>*
  %94 = load <4 x i32>, <4 x i32>* %93, align 4
  %95 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %0, i64 0, i32 1
  %96 = load i32, i32* %95, align 4
  %97 = extractelement <4 x i32> %94, i32 0
  %98 = icmp ult i32 %88, %97
  br i1 %98, label %118, label %99

99:                                               ; preds = %84
  %100 = icmp ult i32 %97, %88
  br i1 %100, label %122, label %101

101:                                              ; preds = %99
  %102 = extractelement <4 x i32> %94, i32 1
  %103 = icmp ult i32 %89, %102
  br i1 %103, label %118, label %104

104:                                              ; preds = %101
  %105 = icmp ult i32 %102, %89
  br i1 %105, label %122, label %106

106:                                              ; preds = %104
  %107 = extractelement <4 x i32> %94, i32 2
  %108 = icmp ult i32 %90, %107
  br i1 %108, label %118, label %109

109:                                              ; preds = %106
  %110 = icmp ult i32 %107, %90
  br i1 %110, label %122, label %111

111:                                              ; preds = %109
  %112 = extractelement <4 x i32> %94, i32 3
  %113 = icmp ult i32 %91, %112
  br i1 %113, label %118, label %114

114:                                              ; preds = %111
  %115 = icmp uge i32 %112, %91
  %116 = icmp ult i32 %92, %96
  %117 = and i1 %115, %116
  br i1 %117, label %118, label %122

118:                                              ; preds = %106, %101, %84, %111, %114
  %119 = bitcast %"struct.jxl::ModularMultiplierInfo"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %119, i8* align 4 %85, i64 20, i1 false) #10
  %120 = bitcast %"struct.jxl::ModularMultiplierInfo"* %1 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %120, align 4
  store i32 %96, i32* %61, align 4
  %121 = add i32 %5, 3
  br label %122

122:                                              ; preds = %109, %104, %99, %75, %70, %65, %36, %31, %26, %80, %118, %114, %41
  %123 = phi i32 [ %121, %118 ], [ %87, %114 ], [ %49, %80 ], [ %5, %41 ], [ %5, %26 ], [ %5, %31 ], [ %5, %36 ], [ %49, %65 ], [ %49, %70 ], [ %49, %75 ], [ %87, %99 ], [ %87, %104 ], [ %87, %109 ]
  ret i32 %123
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @"_ZNSt3__17__sort5IRZN3jxl19ModularFrameEncoder19ComputeEncodingDataERKNS1_11FrameHeaderERKNS1_13ImageMetadataEPNS1_6Image3IfEERKNS_6vectorINS1_5PlaneIfEENS_9allocatorISE_EEEEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_6AuxOutEbE3$_1PNS1_21ModularMultiplierInfoEEEjT0_SU_SU_SU_SU_T_"(%"struct.jxl::ModularMultiplierInfo"* nocapture, %"struct.jxl::ModularMultiplierInfo"*, %"struct.jxl::ModularMultiplierInfo"* nocapture, %"struct.jxl::ModularMultiplierInfo"* nocapture, %"struct.jxl::ModularMultiplierInfo"* nocapture) unnamed_addr #0 {
  %6 = tail call fastcc i32 @"_ZNSt3__17__sort4IRZN3jxl19ModularFrameEncoder19ComputeEncodingDataERKNS1_11FrameHeaderERKNS1_13ImageMetadataEPNS1_6Image3IfEERKNS_6vectorINS1_5PlaneIfEENS_9allocatorISE_EEEEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_6AuxOutEbE3$_1PNS1_21ModularMultiplierInfoEEEjT0_SU_SU_SU_T_"(%"struct.jxl::ModularMultiplierInfo"* %0, %"struct.jxl::ModularMultiplierInfo"* %1, %"struct.jxl::ModularMultiplierInfo"* %2, %"struct.jxl::ModularMultiplierInfo"* %3)
  %7 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %4, i64 0, i32 0, i32 0, i64 0, i32 0, i64 0
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %4, i64 0, i32 0, i32 0, i64 0, i32 0, i64 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %4, i64 0, i32 0, i32 0, i64 1, i32 0, i64 0
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %4, i64 0, i32 0, i32 0, i64 1, i32 0, i64 1
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %4, i64 0, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %3, i64 0, i32 0, i32 0, i64 0, i32 0, i64 0
  %18 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %3, i64 0, i32 0, i32 0, i64 0, i32 0, i64 1
  %19 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %3, i64 0, i32 0, i32 0, i64 1, i32 0, i64 0
  %20 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %3, i64 0, i32 0, i32 0, i64 1, i32 0, i64 1
  %21 = bitcast %"struct.jxl::ModularMultiplierInfo"* %3 to <4 x i32>*
  %22 = load <4 x i32>, <4 x i32>* %21, align 4
  %23 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %3, i64 0, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = extractelement <4 x i32> %22, i32 0
  %26 = icmp ult i32 %8, %25
  br i1 %26, label %46, label %27

27:                                               ; preds = %5
  %28 = icmp ult i32 %25, %8
  br i1 %28, label %161, label %29

29:                                               ; preds = %27
  %30 = extractelement <4 x i32> %22, i32 1
  %31 = icmp ult i32 %10, %30
  br i1 %31, label %46, label %32

32:                                               ; preds = %29
  %33 = icmp ult i32 %30, %10
  br i1 %33, label %161, label %34

34:                                               ; preds = %32
  %35 = extractelement <4 x i32> %22, i32 2
  %36 = icmp ult i32 %12, %35
  br i1 %36, label %46, label %37

37:                                               ; preds = %34
  %38 = icmp ult i32 %35, %12
  br i1 %38, label %161, label %39

39:                                               ; preds = %37
  %40 = extractelement <4 x i32> %22, i32 3
  %41 = icmp ult i32 %14, %40
  br i1 %41, label %46, label %42

42:                                               ; preds = %39
  %43 = icmp uge i32 %40, %14
  %44 = icmp ult i32 %16, %24
  %45 = and i1 %43, %44
  br i1 %45, label %46, label %161

46:                                               ; preds = %34, %29, %5, %39, %42
  %47 = bitcast %"struct.jxl::ModularMultiplierInfo"* %3 to i8*
  %48 = bitcast %"struct.jxl::ModularMultiplierInfo"* %4 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %47, i8* align 4 %48, i64 20, i1 false) #10
  %49 = bitcast %"struct.jxl::ModularMultiplierInfo"* %4 to <4 x i32>*
  store <4 x i32> %22, <4 x i32>* %49, align 4
  store i32 %24, i32* %15, align 4
  %50 = add i32 %6, 1
  %51 = load i32, i32* %17, align 4
  %52 = load i32, i32* %18, align 4
  %53 = load i32, i32* %19, align 4
  %54 = load i32, i32* %20, align 4
  %55 = load i32, i32* %23, align 4
  %56 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %2, i64 0, i32 0, i32 0, i64 0, i32 0, i64 0
  %57 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %2, i64 0, i32 0, i32 0, i64 0, i32 0, i64 1
  %58 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %2, i64 0, i32 0, i32 0, i64 1, i32 0, i64 0
  %59 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %2, i64 0, i32 0, i32 0, i64 1, i32 0, i64 1
  %60 = bitcast %"struct.jxl::ModularMultiplierInfo"* %2 to <4 x i32>*
  %61 = load <4 x i32>, <4 x i32>* %60, align 4
  %62 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %2, i64 0, i32 1
  %63 = load i32, i32* %62, align 4
  %64 = extractelement <4 x i32> %61, i32 0
  %65 = icmp ult i32 %51, %64
  br i1 %65, label %85, label %66

66:                                               ; preds = %46
  %67 = icmp ult i32 %64, %51
  br i1 %67, label %161, label %68

68:                                               ; preds = %66
  %69 = extractelement <4 x i32> %61, i32 1
  %70 = icmp ult i32 %52, %69
  br i1 %70, label %85, label %71

71:                                               ; preds = %68
  %72 = icmp ult i32 %69, %52
  br i1 %72, label %161, label %73

73:                                               ; preds = %71
  %74 = extractelement <4 x i32> %61, i32 2
  %75 = icmp ult i32 %53, %74
  br i1 %75, label %85, label %76

76:                                               ; preds = %73
  %77 = icmp ult i32 %74, %53
  br i1 %77, label %161, label %78

78:                                               ; preds = %76
  %79 = extractelement <4 x i32> %61, i32 3
  %80 = icmp ult i32 %54, %79
  br i1 %80, label %85, label %81

81:                                               ; preds = %78
  %82 = icmp uge i32 %79, %54
  %83 = icmp ult i32 %55, %63
  %84 = and i1 %82, %83
  br i1 %84, label %85, label %161

85:                                               ; preds = %73, %68, %46, %78, %81
  %86 = bitcast %"struct.jxl::ModularMultiplierInfo"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %86, i8* align 4 %47, i64 20, i1 false) #10
  %87 = bitcast %"struct.jxl::ModularMultiplierInfo"* %3 to <4 x i32>*
  store <4 x i32> %61, <4 x i32>* %87, align 4
  store i32 %63, i32* %23, align 4
  %88 = add i32 %6, 2
  %89 = load i32, i32* %56, align 4
  %90 = load i32, i32* %57, align 4
  %91 = load i32, i32* %58, align 4
  %92 = load i32, i32* %59, align 4
  %93 = load i32, i32* %62, align 4
  %94 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1, i64 0, i32 0, i32 0, i64 0, i32 0, i64 0
  %95 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1, i64 0, i32 0, i32 0, i64 0, i32 0, i64 1
  %96 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1, i64 0, i32 0, i32 0, i64 1, i32 0, i64 0
  %97 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1, i64 0, i32 0, i32 0, i64 1, i32 0, i64 1
  %98 = bitcast %"struct.jxl::ModularMultiplierInfo"* %1 to <4 x i32>*
  %99 = load <4 x i32>, <4 x i32>* %98, align 4
  %100 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1, i64 0, i32 1
  %101 = load i32, i32* %100, align 4
  %102 = extractelement <4 x i32> %99, i32 0
  %103 = icmp ult i32 %89, %102
  br i1 %103, label %123, label %104

104:                                              ; preds = %85
  %105 = icmp ult i32 %102, %89
  br i1 %105, label %161, label %106

106:                                              ; preds = %104
  %107 = extractelement <4 x i32> %99, i32 1
  %108 = icmp ult i32 %90, %107
  br i1 %108, label %123, label %109

109:                                              ; preds = %106
  %110 = icmp ult i32 %107, %90
  br i1 %110, label %161, label %111

111:                                              ; preds = %109
  %112 = extractelement <4 x i32> %99, i32 2
  %113 = icmp ult i32 %91, %112
  br i1 %113, label %123, label %114

114:                                              ; preds = %111
  %115 = icmp ult i32 %112, %91
  br i1 %115, label %161, label %116

116:                                              ; preds = %114
  %117 = extractelement <4 x i32> %99, i32 3
  %118 = icmp ult i32 %92, %117
  br i1 %118, label %123, label %119

119:                                              ; preds = %116
  %120 = icmp uge i32 %117, %92
  %121 = icmp ult i32 %93, %101
  %122 = and i1 %120, %121
  br i1 %122, label %123, label %161

123:                                              ; preds = %111, %106, %85, %116, %119
  %124 = bitcast %"struct.jxl::ModularMultiplierInfo"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %124, i8* align 4 %86, i64 20, i1 false) #10
  %125 = bitcast %"struct.jxl::ModularMultiplierInfo"* %2 to <4 x i32>*
  store <4 x i32> %99, <4 x i32>* %125, align 4
  store i32 %101, i32* %62, align 4
  %126 = add i32 %6, 3
  %127 = load i32, i32* %94, align 4
  %128 = load i32, i32* %95, align 4
  %129 = load i32, i32* %96, align 4
  %130 = load i32, i32* %97, align 4
  %131 = load i32, i32* %100, align 4
  %132 = bitcast %"struct.jxl::ModularMultiplierInfo"* %0 to <4 x i32>*
  %133 = load <4 x i32>, <4 x i32>* %132, align 4
  %134 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %0, i64 0, i32 1
  %135 = load i32, i32* %134, align 4
  %136 = extractelement <4 x i32> %133, i32 0
  %137 = icmp ult i32 %127, %136
  br i1 %137, label %157, label %138

138:                                              ; preds = %123
  %139 = icmp ult i32 %136, %127
  br i1 %139, label %161, label %140

140:                                              ; preds = %138
  %141 = extractelement <4 x i32> %133, i32 1
  %142 = icmp ult i32 %128, %141
  br i1 %142, label %157, label %143

143:                                              ; preds = %140
  %144 = icmp ult i32 %141, %128
  br i1 %144, label %161, label %145

145:                                              ; preds = %143
  %146 = extractelement <4 x i32> %133, i32 2
  %147 = icmp ult i32 %129, %146
  br i1 %147, label %157, label %148

148:                                              ; preds = %145
  %149 = icmp ult i32 %146, %129
  br i1 %149, label %161, label %150

150:                                              ; preds = %148
  %151 = extractelement <4 x i32> %133, i32 3
  %152 = icmp ult i32 %130, %151
  br i1 %152, label %157, label %153

153:                                              ; preds = %150
  %154 = icmp uge i32 %151, %130
  %155 = icmp ult i32 %131, %135
  %156 = and i1 %154, %155
  br i1 %156, label %157, label %161

157:                                              ; preds = %145, %140, %123, %150, %153
  %158 = bitcast %"struct.jxl::ModularMultiplierInfo"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %158, i8* align 4 %124, i64 20, i1 false) #10
  %159 = bitcast %"struct.jxl::ModularMultiplierInfo"* %1 to <4 x i32>*
  store <4 x i32> %133, <4 x i32>* %159, align 4
  store i32 %135, i32* %100, align 4
  %160 = add i32 %6, 4
  br label %161

161:                                              ; preds = %148, %143, %138, %114, %109, %104, %76, %71, %66, %37, %32, %27, %81, %153, %157, %119, %42
  %162 = phi i32 [ %160, %157 ], [ %126, %153 ], [ %88, %119 ], [ %50, %81 ], [ %6, %42 ], [ %6, %27 ], [ %6, %32 ], [ %6, %37 ], [ %50, %66 ], [ %50, %71 ], [ %50, %76 ], [ %88, %104 ], [ %88, %109 ], [ %88, %114 ], [ %126, %138 ], [ %126, %143 ], [ %126, %148 ]
  ret i32 %162
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @"_ZNSt3__127__insertion_sort_incompleteIRZN3jxl19ModularFrameEncoder19ComputeEncodingDataERKNS1_11FrameHeaderERKNS1_13ImageMetadataEPNS1_6Image3IfEERKNS_6vectorINS1_5PlaneIfEENS_9allocatorISE_EEEEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_6AuxOutEbE3$_1PNS1_21ModularMultiplierInfoEEEbT0_SU_T_"(%"struct.jxl::ModularMultiplierInfo"*, %"struct.jxl::ModularMultiplierInfo"*) unnamed_addr #0 {
  %3 = ptrtoint %"struct.jxl::ModularMultiplierInfo"* %1 to i64
  %4 = ptrtoint %"struct.jxl::ModularMultiplierInfo"* %0 to i64
  %5 = sub i64 %3, %4
  %6 = sdiv exact i64 %5, 20
  switch i64 %6, label %63 [
    i64 0, label %163
    i64 1, label %163
    i64 2, label %7
    i64 3, label %48
    i64 4, label %52
    i64 5, label %57
  ]

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1, i64 -1
  %9 = bitcast %"struct.jxl::ModularMultiplierInfo"* %8 to i8*
  %10 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1, i64 -1, i32 0, i32 0, i64 0, i32 0, i64 0
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1, i64 -1, i32 0, i32 0, i64 0, i32 0, i64 1
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1, i64 -1, i32 0, i32 0, i64 1, i32 0, i64 0
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1, i64 -1, i32 0, i32 0, i64 1, i32 0, i64 1
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1, i64 -1, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = bitcast %"struct.jxl::ModularMultiplierInfo"* %0 to <4 x i32>*
  %21 = load <4 x i32>, <4 x i32>* %20, align 4
  %22 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %0, i64 0, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = extractelement <4 x i32> %21, i32 0
  %25 = icmp ult i32 %11, %24
  br i1 %25, label %45, label %26

26:                                               ; preds = %7
  %27 = icmp ult i32 %24, %11
  br i1 %27, label %163, label %28

28:                                               ; preds = %26
  %29 = extractelement <4 x i32> %21, i32 1
  %30 = icmp ult i32 %13, %29
  br i1 %30, label %45, label %31

31:                                               ; preds = %28
  %32 = icmp ult i32 %29, %13
  br i1 %32, label %163, label %33

33:                                               ; preds = %31
  %34 = extractelement <4 x i32> %21, i32 2
  %35 = icmp ult i32 %15, %34
  br i1 %35, label %45, label %36

36:                                               ; preds = %33
  %37 = icmp ult i32 %34, %15
  br i1 %37, label %163, label %38

38:                                               ; preds = %36
  %39 = extractelement <4 x i32> %21, i32 3
  %40 = icmp ult i32 %17, %39
  br i1 %40, label %45, label %41

41:                                               ; preds = %38
  %42 = icmp uge i32 %39, %17
  %43 = icmp ult i32 %19, %23
  %44 = and i1 %42, %43
  br i1 %44, label %45, label %163

45:                                               ; preds = %33, %28, %7, %38, %41
  %46 = bitcast %"struct.jxl::ModularMultiplierInfo"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %46, i8* align 4 %9, i64 20, i1 false) #10
  %47 = bitcast %"struct.jxl::ModularMultiplierInfo"* %8 to <4 x i32>*
  store <4 x i32> %21, <4 x i32>* %47, align 4
  store i32 %23, i32* %18, align 4
  br label %163

48:                                               ; preds = %2
  %49 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %0, i64 1
  %50 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1, i64 -1
  %51 = tail call fastcc i32 @"_ZNSt3__17__sort3IRZN3jxl19ModularFrameEncoder19ComputeEncodingDataERKNS1_11FrameHeaderERKNS1_13ImageMetadataEPNS1_6Image3IfEERKNS_6vectorINS1_5PlaneIfEENS_9allocatorISE_EEEEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_6AuxOutEbE3$_1PNS1_21ModularMultiplierInfoEEEjT0_SU_SU_T_"(%"struct.jxl::ModularMultiplierInfo"* %0, %"struct.jxl::ModularMultiplierInfo"* %49, %"struct.jxl::ModularMultiplierInfo"* %50)
  br label %163

52:                                               ; preds = %2
  %53 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %0, i64 1
  %54 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %0, i64 2
  %55 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1, i64 -1
  %56 = tail call fastcc i32 @"_ZNSt3__17__sort4IRZN3jxl19ModularFrameEncoder19ComputeEncodingDataERKNS1_11FrameHeaderERKNS1_13ImageMetadataEPNS1_6Image3IfEERKNS_6vectorINS1_5PlaneIfEENS_9allocatorISE_EEEEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_6AuxOutEbE3$_1PNS1_21ModularMultiplierInfoEEEjT0_SU_SU_SU_T_"(%"struct.jxl::ModularMultiplierInfo"* %0, %"struct.jxl::ModularMultiplierInfo"* %53, %"struct.jxl::ModularMultiplierInfo"* %54, %"struct.jxl::ModularMultiplierInfo"* %55)
  br label %163

57:                                               ; preds = %2
  %58 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %0, i64 1
  %59 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %0, i64 2
  %60 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %0, i64 3
  %61 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1, i64 -1
  %62 = tail call fastcc i32 @"_ZNSt3__17__sort5IRZN3jxl19ModularFrameEncoder19ComputeEncodingDataERKNS1_11FrameHeaderERKNS1_13ImageMetadataEPNS1_6Image3IfEERKNS_6vectorINS1_5PlaneIfEENS_9allocatorISE_EEEEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_6AuxOutEbE3$_1PNS1_21ModularMultiplierInfoEEEjT0_SU_SU_SU_SU_T_"(%"struct.jxl::ModularMultiplierInfo"* %0, %"struct.jxl::ModularMultiplierInfo"* %58, %"struct.jxl::ModularMultiplierInfo"* %59, %"struct.jxl::ModularMultiplierInfo"* %60, %"struct.jxl::ModularMultiplierInfo"* %61)
  br label %163

63:                                               ; preds = %2
  %64 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %0, i64 2
  %65 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %0, i64 1
  %66 = tail call fastcc i32 @"_ZNSt3__17__sort3IRZN3jxl19ModularFrameEncoder19ComputeEncodingDataERKNS1_11FrameHeaderERKNS1_13ImageMetadataEPNS1_6Image3IfEERKNS_6vectorINS1_5PlaneIfEENS_9allocatorISE_EEEEPNS1_18PassesEncoderStateEPNS1_10ThreadPoolEPNS1_6AuxOutEbE3$_1PNS1_21ModularMultiplierInfoEEEjT0_SU_SU_T_"(%"struct.jxl::ModularMultiplierInfo"* %0, %"struct.jxl::ModularMultiplierInfo"* %65, %"struct.jxl::ModularMultiplierInfo"* %64)
  %67 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %0, i64 3
  %68 = icmp eq %"struct.jxl::ModularMultiplierInfo"* %67, %1
  br i1 %68, label %163, label %69

69:                                               ; preds = %63, %156
  %70 = phi %"struct.jxl::ModularMultiplierInfo"* [ %158, %156 ], [ %67, %63 ]
  %71 = phi i32 [ %157, %156 ], [ 0, %63 ]
  %72 = phi %"struct.jxl::ModularMultiplierInfo"* [ %70, %156 ], [ %64, %63 ]
  %73 = bitcast %"struct.jxl::ModularMultiplierInfo"* %70 to <4 x i32>*
  %74 = load <4 x i32>, <4 x i32>* %73, align 4
  %75 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %70, i64 0, i32 1
  %76 = load i32, i32* %75, align 4
  %77 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %72, i64 0, i32 0, i32 0, i64 0, i32 0, i64 0
  %78 = load i32, i32* %77, align 4
  %79 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %72, i64 0, i32 0, i32 0, i64 0, i32 0, i64 1
  %80 = load i32, i32* %79, align 4
  %81 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %72, i64 0, i32 0, i32 0, i64 1, i32 0, i64 0
  %82 = load i32, i32* %81, align 4
  %83 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %72, i64 0, i32 0, i32 0, i64 1, i32 0, i64 1
  %84 = load i32, i32* %83, align 4
  %85 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %72, i64 0, i32 1
  %86 = load i32, i32* %85, align 4
  %87 = extractelement <4 x i32> %74, i32 0
  %88 = icmp ult i32 %87, %78
  br i1 %88, label %108, label %89

89:                                               ; preds = %69
  %90 = icmp ult i32 %78, %87
  br i1 %90, label %156, label %91

91:                                               ; preds = %89
  %92 = extractelement <4 x i32> %74, i32 1
  %93 = icmp ult i32 %92, %80
  br i1 %93, label %108, label %94

94:                                               ; preds = %91
  %95 = icmp ult i32 %80, %92
  br i1 %95, label %156, label %96

96:                                               ; preds = %94
  %97 = extractelement <4 x i32> %74, i32 2
  %98 = icmp ult i32 %97, %82
  br i1 %98, label %108, label %99

99:                                               ; preds = %96
  %100 = icmp ult i32 %82, %97
  br i1 %100, label %156, label %101

101:                                              ; preds = %99
  %102 = extractelement <4 x i32> %74, i32 3
  %103 = icmp ult i32 %102, %84
  br i1 %103, label %108, label %104

104:                                              ; preds = %101
  %105 = icmp uge i32 %84, %102
  %106 = icmp ult i32 %76, %86
  %107 = and i1 %105, %106
  br i1 %107, label %108, label %156

108:                                              ; preds = %96, %91, %69, %101, %104
  %109 = bitcast %"struct.jxl::ModularMultiplierInfo"* %70 to i8*
  %110 = bitcast %"struct.jxl::ModularMultiplierInfo"* %72 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %109, i8* align 4 %110, i64 20, i1 false)
  %111 = icmp eq %"struct.jxl::ModularMultiplierInfo"* %72, %0
  br i1 %111, label %150, label %112

112:                                              ; preds = %108
  %113 = extractelement <4 x i32> %74, i32 1
  %114 = extractelement <4 x i32> %74, i32 2
  %115 = extractelement <4 x i32> %74, i32 3
  br label %116

116:                                              ; preds = %112, %146
  %117 = phi %"struct.jxl::ModularMultiplierInfo"* [ %118, %146 ], [ %72, %112 ]
  %118 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %117, i64 -1
  %119 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %117, i64 -1, i32 0, i32 0, i64 0, i32 0, i64 0
  %120 = load i32, i32* %119, align 4
  %121 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %117, i64 -1, i32 0, i32 0, i64 0, i32 0, i64 1
  %122 = load i32, i32* %121, align 4
  %123 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %117, i64 -1, i32 0, i32 0, i64 1, i32 0, i64 0
  %124 = load i32, i32* %123, align 4
  %125 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %117, i64 -1, i32 0, i32 0, i64 1, i32 0, i64 1
  %126 = load i32, i32* %125, align 4
  %127 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %117, i64 -1, i32 1
  %128 = load i32, i32* %127, align 4
  %129 = icmp ult i32 %87, %120
  br i1 %129, label %146, label %130

130:                                              ; preds = %116
  %131 = icmp ult i32 %120, %87
  br i1 %131, label %150, label %132

132:                                              ; preds = %130
  %133 = icmp ult i32 %113, %122
  br i1 %133, label %146, label %134

134:                                              ; preds = %132
  %135 = icmp ult i32 %122, %113
  br i1 %135, label %150, label %136

136:                                              ; preds = %134
  %137 = icmp ult i32 %114, %124
  br i1 %137, label %146, label %138

138:                                              ; preds = %136
  %139 = icmp ult i32 %124, %114
  br i1 %139, label %150, label %140

140:                                              ; preds = %138
  %141 = icmp ult i32 %115, %126
  br i1 %141, label %146, label %142

142:                                              ; preds = %140
  %143 = icmp uge i32 %126, %115
  %144 = icmp ult i32 %76, %128
  %145 = and i1 %143, %144
  br i1 %145, label %146, label %150

146:                                              ; preds = %140, %136, %132, %116, %142
  %147 = bitcast %"struct.jxl::ModularMultiplierInfo"* %117 to i8*
  %148 = bitcast %"struct.jxl::ModularMultiplierInfo"* %118 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %147, i8* align 4 %148, i64 20, i1 false)
  %149 = icmp eq %"struct.jxl::ModularMultiplierInfo"* %118, %0
  br i1 %149, label %150, label %116

150:                                              ; preds = %146, %142, %130, %134, %138, %108
  %151 = phi %"struct.jxl::ModularMultiplierInfo"* [ %0, %108 ], [ %117, %138 ], [ %117, %134 ], [ %117, %130 ], [ %117, %142 ], [ %0, %146 ]
  %152 = bitcast %"struct.jxl::ModularMultiplierInfo"* %151 to <4 x i32>*
  store <4 x i32> %74, <4 x i32>* %152, align 4
  %153 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %151, i64 0, i32 1
  store i32 %76, i32* %153, align 4
  %154 = add i32 %71, 1
  %155 = icmp eq i32 %154, 8
  br i1 %155, label %160, label %156

156:                                              ; preds = %150, %99, %94, %89, %104
  %157 = phi i32 [ %154, %150 ], [ %71, %104 ], [ %71, %89 ], [ %71, %94 ], [ %71, %99 ]
  %158 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %70, i64 1
  %159 = icmp eq %"struct.jxl::ModularMultiplierInfo"* %158, %1
  br i1 %159, label %163, label %69

160:                                              ; preds = %150
  %161 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %70, i64 1
  %162 = icmp eq %"struct.jxl::ModularMultiplierInfo"* %161, %1
  br label %163

163:                                              ; preds = %156, %160, %63, %36, %31, %26, %41, %45, %2, %2, %57, %52, %48
  %164 = phi i1 [ true, %57 ], [ true, %52 ], [ true, %48 ], [ true, %2 ], [ true, %2 ], [ true, %45 ], [ true, %41 ], [ true, %26 ], [ true, %31 ], [ true, %36 ], [ true, %63 ], [ %162, %160 ], [ true, %156 ]
  ret i1 %164
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl21ModularMultiplierInfoENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.96"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.96", %"class.std::__1::vector.96"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"struct.jxl::ModularMultiplierInfo"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.96", %"class.std::__1::vector.96"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"struct.jxl::ModularMultiplierInfo"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 20
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %30, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"struct.jxl::ModularMultiplierInfo"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %28, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %13, i64 %18, i32 0, i32 0, i64 0, i32 0, i64 0
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = urem i64 %23, 20
  %25 = add i64 %23, 20
  %26 = sub i64 %25, %24
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %26, i1 false) #10
  %27 = ptrtoint %"struct.jxl::ModularMultiplierInfo"* %16 to i64
  br label %28

28:                                               ; preds = %12, %15
  %29 = phi i64 [ %27, %15 ], [ %8, %12 ]
  store i64 %29, i64* %7, align 8
  br label %85

30:                                               ; preds = %2
  %31 = bitcast %"class.std::__1::vector.96"* %0 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = sub i64 %8, %32
  %34 = sdiv exact i64 %33, 20
  %35 = add i64 %34, %1
  %36 = icmp ugt i64 %35, 922337203685477580
  br i1 %36, label %37, label %39

37:                                               ; preds = %30
  %38 = bitcast %"class.std::__1::vector.96"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %38) #12
  unreachable

39:                                               ; preds = %30
  %40 = sub i64 %5, %32
  %41 = sdiv exact i64 %40, 20
  %42 = icmp ult i64 %41, 461168601842738790
  br i1 %42, label %43, label %48

43:                                               ; preds = %39
  %44 = shl nsw i64 %41, 1
  %45 = icmp ult i64 %44, %35
  %46 = select i1 %45, i64 %35, i64 %44
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %39, %43
  %49 = phi i64 [ %46, %43 ], [ 922337203685477580, %39 ]
  %50 = mul i64 %49, 20
  %51 = tail call i8* @_Znwm(i64 %50) #13
  %52 = bitcast i8* %51 to %"struct.jxl::ModularMultiplierInfo"*
  br label %53

53:                                               ; preds = %43, %48
  %54 = phi i64 [ %49, %48 ], [ 0, %43 ]
  %55 = phi %"struct.jxl::ModularMultiplierInfo"* [ %52, %48 ], [ null, %43 ]
  %56 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %55, i64 %34
  %57 = bitcast %"struct.jxl::ModularMultiplierInfo"* %56 to i8*
  %58 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %55, i64 %54
  %59 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %56, i64 %1
  %60 = mul nsw i64 %1, 20
  %61 = add i64 %60, -20
  %62 = urem i64 %61, 20
  %63 = sub i64 %61, %62
  %64 = add i64 %63, 20
  call void @llvm.memset.p0i8.i64(i8* align 4 %57, i8 0, i64 %64, i1 false)
  %65 = ptrtoint %"struct.jxl::ModularMultiplierInfo"* %58 to i64
  %66 = ptrtoint %"struct.jxl::ModularMultiplierInfo"* %59 to i64
  %67 = getelementptr inbounds %"class.std::__1::vector.96", %"class.std::__1::vector.96"* %0, i64 0, i32 0, i32 0
  %68 = load %"struct.jxl::ModularMultiplierInfo"*, %"struct.jxl::ModularMultiplierInfo"** %67, align 8
  %69 = load i64, i64* %7, align 8
  %70 = ptrtoint %"struct.jxl::ModularMultiplierInfo"* %68 to i64
  %71 = sub i64 %69, %70
  %72 = sdiv exact i64 %71, -20
  %73 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %56, i64 %72
  %74 = ptrtoint %"struct.jxl::ModularMultiplierInfo"* %73 to i64
  %75 = icmp sgt i64 %71, 0
  br i1 %75, label %76, label %80

76:                                               ; preds = %53
  %77 = bitcast %"struct.jxl::ModularMultiplierInfo"* %73 to i8*
  %78 = bitcast %"struct.jxl::ModularMultiplierInfo"* %68 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %77, i8* align 4 %78, i64 %71, i1 false) #10
  %79 = load %"struct.jxl::ModularMultiplierInfo"*, %"struct.jxl::ModularMultiplierInfo"** %67, align 8
  br label %80

80:                                               ; preds = %53, %76
  %81 = phi %"struct.jxl::ModularMultiplierInfo"* [ %68, %53 ], [ %79, %76 ]
  store i64 %74, i64* %31, align 8
  store i64 %66, i64* %7, align 8
  store i64 %65, i64* %4, align 8
  %82 = icmp eq %"struct.jxl::ModularMultiplierInfo"* %81, null
  br i1 %82, label %85, label %83

83:                                               ; preds = %80
  %84 = bitcast %"struct.jxl::ModularMultiplierInfo"* %81 to i8*
  tail call void @_ZdlPv(i8* %84) #13
  br label %85

85:                                               ; preds = %83, %80, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl11GroupHeaderENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.73"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.73", %"class.std::__1::vector.73"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"struct.jxl::GroupHeader"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.73", %"class.std::__1::vector.73"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"struct.jxl::GroupHeader"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 96
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %24, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"struct.jxl::GroupHeader"*
  %14 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %13, i64 %1
  %15 = icmp eq i64 %1, 0
  br i1 %15, label %22, label %18

16:                                               ; preds = %18
  %17 = ptrtoint %"struct.jxl::GroupHeader"* %14 to i64
  br label %22

18:                                               ; preds = %12, %18
  %19 = phi %"struct.jxl::GroupHeader"* [ %20, %18 ], [ %13, %12 ]
  tail call void @_ZN3jxl11GroupHeaderC1Ev(%"struct.jxl::GroupHeader"* %19) #10
  %20 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %19, i64 1
  %21 = icmp eq %"struct.jxl::GroupHeader"* %20, %14
  br i1 %21, label %16, label %18

22:                                               ; preds = %12, %16
  %23 = phi i64 [ %17, %16 ], [ %8, %12 ]
  store i64 %23, i64* %7, align 8
  br label %117

24:                                               ; preds = %2
  %25 = bitcast %"class.std::__1::vector.73"* %0 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = sub i64 %8, %26
  %28 = sdiv exact i64 %27, 96
  %29 = add i64 %28, %1
  %30 = icmp ugt i64 %29, 192153584101141162
  br i1 %30, label %31, label %33

31:                                               ; preds = %24
  %32 = bitcast %"class.std::__1::vector.73"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %32) #12
  unreachable

33:                                               ; preds = %24
  %34 = sub i64 %5, %26
  %35 = sdiv exact i64 %34, 96
  %36 = icmp ult i64 %35, 96076792050570581
  br i1 %36, label %37, label %42

37:                                               ; preds = %33
  %38 = shl nsw i64 %35, 1
  %39 = icmp ult i64 %38, %29
  %40 = select i1 %39, i64 %29, i64 %38
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %47, label %42

42:                                               ; preds = %33, %37
  %43 = phi i64 [ %40, %37 ], [ 192153584101141162, %33 ]
  %44 = mul i64 %43, 96
  %45 = tail call i8* @_Znwm(i64 %44) #13
  %46 = bitcast i8* %45 to %"struct.jxl::GroupHeader"*
  br label %47

47:                                               ; preds = %37, %42
  %48 = phi i64 [ %43, %42 ], [ 0, %37 ]
  %49 = phi %"struct.jxl::GroupHeader"* [ %46, %42 ], [ null, %37 ]
  %50 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %49, i64 %28
  %51 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %49, i64 %48
  %52 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %50, i64 %1
  br label %53

53:                                               ; preds = %47, %53
  %54 = phi %"struct.jxl::GroupHeader"* [ %55, %53 ], [ %50, %47 ]
  tail call void @_ZN3jxl11GroupHeaderC1Ev(%"struct.jxl::GroupHeader"* %54) #10
  %55 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %54, i64 1
  %56 = icmp eq %"struct.jxl::GroupHeader"* %52, %55
  br i1 %56, label %57, label %53

57:                                               ; preds = %53
  %58 = ptrtoint %"struct.jxl::GroupHeader"* %51 to i64
  %59 = ptrtoint %"struct.jxl::GroupHeader"* %52 to i64
  %60 = getelementptr inbounds %"class.std::__1::vector.73", %"class.std::__1::vector.73"* %0, i64 0, i32 0, i32 0
  %61 = load %"struct.jxl::GroupHeader"*, %"struct.jxl::GroupHeader"** %60, align 8
  %62 = load %"struct.jxl::GroupHeader"*, %"struct.jxl::GroupHeader"** %6, align 8
  %63 = icmp eq %"struct.jxl::GroupHeader"* %62, %61
  br i1 %63, label %64, label %66

64:                                               ; preds = %57
  %65 = ptrtoint %"struct.jxl::GroupHeader"* %61 to i64
  br label %99

66:                                               ; preds = %57, %66
  %67 = phi %"struct.jxl::GroupHeader"* [ %94, %66 ], [ %50, %57 ]
  %68 = phi %"struct.jxl::GroupHeader"* [ %69, %66 ], [ %62, %57 ]
  %69 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %68, i64 -1
  %70 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %67, i64 -1, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl11GroupHeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %70, align 8
  %71 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %67, i64 -1, i32 1
  %72 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %68, i64 -1, i32 1
  %73 = load i8, i8* %72, align 8, !range !2
  store i8 %73, i8* %71, align 8
  %74 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %67, i64 -1, i32 2, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8weighted6HeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %74, align 8
  %75 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %67, i64 -1, i32 2, i32 1
  %76 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %68, i64 -1, i32 2, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %75, i8* align 8 %76, i64 48, i1 false) #10
  %77 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %67, i64 -1, i32 3
  %78 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %68, i64 -1, i32 3
  %79 = bitcast %"class.std::__1::vector.19"* %77 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %79, i8 0, i64 24, i1 false) #10
  %80 = bitcast %"class.std::__1::vector.19"* %78 to i64*
  %81 = load i64, i64* %80, align 8
  %82 = bitcast %"class.std::__1::vector.19"* %77 to i64*
  store i64 %81, i64* %82, align 8
  %83 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %68, i64 -1, i32 3, i32 0, i32 1
  %84 = bitcast %"class.jxl::Transform"** %83 to i64*
  %85 = load i64, i64* %84, align 8
  %86 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %67, i64 -1, i32 3, i32 0, i32 1
  %87 = bitcast %"class.jxl::Transform"** %86 to i64*
  store i64 %85, i64* %87, align 8
  %88 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %68, i64 -1, i32 3, i32 0, i32 2, i32 0, i32 0
  %89 = bitcast %"class.jxl::Transform"** %88 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %67, i64 -1, i32 3, i32 0, i32 2, i32 0, i32 0
  %92 = bitcast %"class.jxl::Transform"** %91 to i64*
  store i64 %90, i64* %92, align 8
  %93 = bitcast %"class.std::__1::vector.19"* %78 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %93, i8 0, i64 24, i1 false) #10
  %94 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %67, i64 -1
  %95 = icmp eq %"struct.jxl::GroupHeader"* %69, %61
  br i1 %95, label %96, label %66

96:                                               ; preds = %66
  %97 = load i64, i64* %25, align 8
  %98 = load %"struct.jxl::GroupHeader"*, %"struct.jxl::GroupHeader"** %6, align 8
  br label %99

99:                                               ; preds = %64, %96
  %100 = phi %"struct.jxl::GroupHeader"* [ %61, %64 ], [ %98, %96 ]
  %101 = phi %"struct.jxl::GroupHeader"* [ %50, %64 ], [ %94, %96 ]
  %102 = phi i64 [ %65, %64 ], [ %97, %96 ]
  %103 = ptrtoint %"struct.jxl::GroupHeader"* %101 to i64
  store i64 %103, i64* %25, align 8
  store i64 %59, i64* %7, align 8
  store i64 %58, i64* %4, align 8
  %104 = inttoptr i64 %102 to %"struct.jxl::GroupHeader"*
  %105 = icmp eq %"struct.jxl::GroupHeader"* %100, %104
  br i1 %105, label %113, label %106

106:                                              ; preds = %99, %106
  %107 = phi %"struct.jxl::GroupHeader"* [ %108, %106 ], [ %100, %99 ]
  %108 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %107, i64 -1
  %109 = bitcast %"struct.jxl::GroupHeader"* %108 to void (%"struct.jxl::GroupHeader"*)***
  %110 = load void (%"struct.jxl::GroupHeader"*)**, void (%"struct.jxl::GroupHeader"*)*** %109, align 8
  %111 = load void (%"struct.jxl::GroupHeader"*)*, void (%"struct.jxl::GroupHeader"*)** %110, align 8
  tail call void %111(%"struct.jxl::GroupHeader"* %108) #10
  %112 = icmp eq %"struct.jxl::GroupHeader"* %108, %104
  br i1 %112, label %113, label %106

113:                                              ; preds = %106, %99
  %114 = icmp eq i64 %102, 0
  br i1 %114, label %117, label %115

115:                                              ; preds = %113
  %116 = inttoptr i64 %102 to i8*
  tail call void @_ZdlPv(i8* %116) #13
  br label %117

117:                                              ; preds = %115, %113, %22
  ret void
}

declare void @_ZN3jxl11GroupHeaderC1Ev(%"struct.jxl::GroupHeader"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11GroupHeaderD2Ev(%"struct.jxl::GroupHeader"*) unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl11GroupHeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %0, i64 0, i32 3
  %4 = getelementptr inbounds %"class.std::__1::vector.19", %"class.std::__1::vector.19"* %3, i64 0, i32 0, i32 0
  %5 = load %"class.jxl::Transform"*, %"class.jxl::Transform"** %4, align 8
  %6 = icmp eq %"class.jxl::Transform"* %5, null
  br i1 %6, label %24, label %7

7:                                                ; preds = %1
  %8 = bitcast %"class.jxl::Transform"* %5 to i8*
  %9 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %0, i64 0, i32 3, i32 0, i32 1
  %10 = load %"class.jxl::Transform"*, %"class.jxl::Transform"** %9, align 8
  %11 = icmp eq %"class.jxl::Transform"* %10, %5
  br i1 %11, label %22, label %12

12:                                               ; preds = %7, %12
  %13 = phi %"class.jxl::Transform"* [ %14, %12 ], [ %10, %7 ]
  %14 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %13, i64 -1
  %15 = bitcast %"class.jxl::Transform"* %14 to void (%"class.jxl::Transform"*)***
  %16 = load void (%"class.jxl::Transform"*)**, void (%"class.jxl::Transform"*)*** %15, align 8
  %17 = load void (%"class.jxl::Transform"*)*, void (%"class.jxl::Transform"*)** %16, align 8
  tail call void %17(%"class.jxl::Transform"* %14) #10
  %18 = icmp eq %"class.jxl::Transform"* %14, %5
  br i1 %18, label %19, label %12

19:                                               ; preds = %12
  %20 = bitcast %"class.std::__1::vector.19"* %3 to i8**
  %21 = load i8*, i8** %20, align 8
  br label %22

22:                                               ; preds = %19, %7
  %23 = phi i8* [ %21, %19 ], [ %8, %7 ]
  store %"class.jxl::Transform"* %5, %"class.jxl::Transform"** %9, align 8
  tail call void @_ZdlPv(i8* %23) #13
  br label %24

24:                                               ; preds = %1, %22
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11GroupHeaderD0Ev(%"struct.jxl::GroupHeader"*) unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl11GroupHeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %0, i64 0, i32 3
  %4 = getelementptr inbounds %"class.std::__1::vector.19", %"class.std::__1::vector.19"* %3, i64 0, i32 0, i32 0
  %5 = load %"class.jxl::Transform"*, %"class.jxl::Transform"** %4, align 8
  %6 = icmp eq %"class.jxl::Transform"* %5, null
  br i1 %6, label %24, label %7

7:                                                ; preds = %1
  %8 = bitcast %"class.jxl::Transform"* %5 to i8*
  %9 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %0, i64 0, i32 3, i32 0, i32 1
  %10 = load %"class.jxl::Transform"*, %"class.jxl::Transform"** %9, align 8
  %11 = icmp eq %"class.jxl::Transform"* %10, %5
  br i1 %11, label %22, label %12

12:                                               ; preds = %7, %12
  %13 = phi %"class.jxl::Transform"* [ %14, %12 ], [ %10, %7 ]
  %14 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %13, i64 -1
  %15 = bitcast %"class.jxl::Transform"* %14 to void (%"class.jxl::Transform"*)***
  %16 = load void (%"class.jxl::Transform"*)**, void (%"class.jxl::Transform"*)*** %15, align 8
  %17 = load void (%"class.jxl::Transform"*)*, void (%"class.jxl::Transform"*)** %16, align 8
  tail call void %17(%"class.jxl::Transform"* %14) #10
  %18 = icmp eq %"class.jxl::Transform"* %14, %5
  br i1 %18, label %19, label %12

19:                                               ; preds = %12
  %20 = bitcast %"class.std::__1::vector.19"* %3 to i8**
  %21 = load i8*, i8** %20, align 8
  br label %22

22:                                               ; preds = %19, %7
  %23 = phi i8* [ %21, %19 ], [ %8, %7 ]
  store %"class.jxl::Transform"* %5, %"class.jxl::Transform"** %9, align 8
  tail call void @_ZdlPv(i8* %23) #13
  br label %24

24:                                               ; preds = %1, %22
  %25 = bitcast %"struct.jxl::GroupHeader"* %0 to i8*
  tail call void @_ZdlPv(i8* %25) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK3jxl11GroupHeader4NameEv(%"struct.jxl::GroupHeader"*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.59, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl11GroupHeader11VisitFieldsEPNS_7VisitorE(%"struct.jxl::GroupHeader"*, %"class.jxl::Visitor"* noalias) unnamed_addr #0 comdat align 2 {
  %3 = alloca i32, align 4
  %4 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %0, i64 0, i32 1
  %5 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i1, i8*)***
  %6 = load i32 (%"class.jxl::Visitor"*, i1, i8*)**, i32 (%"class.jxl::Visitor"*, i1, i8*)*** %5, align 8
  %7 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %6, i64 3
  %8 = load i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %7, align 8
  %9 = tail call i32 %8(%"class.jxl::Visitor"* %1, i1 zeroext false, i8* %4) #10
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %87

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %0, i64 0, i32 2, i32 0
  %13 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)***
  %14 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)**, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*** %13, align 8
  %15 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %14, i64 11
  %16 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %15, align 8
  %17 = tail call i32 %16(%"class.jxl::Visitor"* %1, %"class.jxl::Fields"* %12) #10
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %87

19:                                               ; preds = %11
  %20 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %20) #10
  %21 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %0, i64 0, i32 3
  %22 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %0, i64 0, i32 3, i32 0, i32 1
  %23 = bitcast %"class.jxl::Transform"** %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = bitcast %"class.std::__1::vector.19"* %21 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = sub i64 %24, %26
  %28 = sdiv exact i64 %27, 72
  %29 = trunc i64 %28 to i32
  store i32 %29, i32* %3, align 4
  %30 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)***
  %31 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %30, align 8, !noalias !146
  %32 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %31, i64 4
  %33 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %32, align 8, !noalias !146
  %34 = call i32 %33(%"class.jxl::Visitor"* %1, i64 -9223372030412324864, i64 2503965933635, i32 0, i32* nonnull %3) #10
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %85

36:                                               ; preds = %19
  %37 = bitcast %"class.jxl::Visitor"* %1 to i1 (%"class.jxl::Visitor"*)***
  %38 = load i1 (%"class.jxl::Visitor"*)**, i1 (%"class.jxl::Visitor"*)*** %37, align 8
  %39 = getelementptr inbounds i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %38, i64 12
  %40 = load i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %39, align 8
  %41 = call zeroext i1 %40(%"class.jxl::Visitor"* %1) #10
  br i1 %41, label %42, label %67

42:                                               ; preds = %36
  %43 = load i32, i32* %3, align 4
  %44 = zext i32 %43 to i64
  %45 = load i64, i64* %23, align 8
  %46 = load i64, i64* %25, align 8
  %47 = sub i64 %45, %46
  %48 = sdiv exact i64 %47, 72
  %49 = icmp ult i64 %48, %44
  %50 = inttoptr i64 %46 to %"class.jxl::Transform"*
  %51 = inttoptr i64 %45 to %"class.jxl::Transform"*
  br i1 %49, label %52, label %54

52:                                               ; preds = %42
  %53 = sub nsw i64 %44, %48
  call void @_ZNSt3__16vectorIN3jxl9TransformENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.19"* %21, i64 %53) #10
  br label %67

54:                                               ; preds = %42
  %55 = icmp ugt i64 %48, %44
  br i1 %55, label %56, label %67

56:                                               ; preds = %54
  %57 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %50, i64 %44
  %58 = icmp eq %"class.jxl::Transform"* %57, %51
  br i1 %58, label %66, label %59

59:                                               ; preds = %56, %59
  %60 = phi %"class.jxl::Transform"* [ %61, %59 ], [ %51, %56 ]
  %61 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %60, i64 -1
  %62 = bitcast %"class.jxl::Transform"* %61 to void (%"class.jxl::Transform"*)***
  %63 = load void (%"class.jxl::Transform"*)**, void (%"class.jxl::Transform"*)*** %62, align 8
  %64 = load void (%"class.jxl::Transform"*)*, void (%"class.jxl::Transform"*)** %63, align 8
  call void %64(%"class.jxl::Transform"* %61) #10
  %65 = icmp eq %"class.jxl::Transform"* %61, %57
  br i1 %65, label %66, label %59

66:                                               ; preds = %59, %56
  store %"class.jxl::Transform"* %57, %"class.jxl::Transform"** %22, align 8
  br label %67

67:                                               ; preds = %66, %54, %52, %36
  %68 = getelementptr inbounds %"class.std::__1::vector.19", %"class.std::__1::vector.19"* %21, i64 0, i32 0, i32 0
  %69 = load i32, i32* %3, align 4
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %85, label %75

71:                                               ; preds = %75
  %72 = load i32, i32* %3, align 4
  %73 = zext i32 %72 to i64
  %74 = icmp ult i64 %84, %73
  br i1 %74, label %75, label %85

75:                                               ; preds = %67, %71
  %76 = phi i64 [ %84, %71 ], [ 0, %67 ]
  %77 = load %"class.jxl::Transform"*, %"class.jxl::Transform"** %68, align 8
  %78 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %77, i64 %76, i32 0
  %79 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)**, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*** %13, align 8
  %80 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %79, i64 11
  %81 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %80, align 8
  %82 = call i32 %81(%"class.jxl::Visitor"* %1, %"class.jxl::Fields"* %78) #10
  %83 = icmp eq i32 %82, 0
  %84 = add nuw nsw i64 %76, 1
  br i1 %83, label %71, label %85

85:                                               ; preds = %75, %71, %67, %19
  %86 = phi i32 [ %34, %19 ], [ 0, %67 ], [ %82, %75 ], [ 0, %71 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20) #10
  br label %87

87:                                               ; preds = %11, %2, %85
  %88 = phi i32 [ %86, %85 ], [ %17, %11 ], [ %9, %2 ]
  ret i32 %88
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl9TransformENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.19"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.19", %"class.std::__1::vector.19"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.jxl::Transform"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.19", %"class.std::__1::vector.19"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.jxl::Transform"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 72
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %24, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"class.jxl::Transform"*
  %14 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %13, i64 %1
  %15 = icmp eq i64 %1, 0
  br i1 %15, label %22, label %18

16:                                               ; preds = %18
  %17 = ptrtoint %"class.jxl::Transform"* %14 to i64
  br label %22

18:                                               ; preds = %12, %18
  %19 = phi %"class.jxl::Transform"* [ %20, %18 ], [ %13, %12 ]
  tail call void @_ZN3jxl9TransformC2ENS_11TransformIdE(%"class.jxl::Transform"* %19, i32 5) #10
  %20 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %19, i64 1
  %21 = icmp eq %"class.jxl::Transform"* %20, %14
  br i1 %21, label %16, label %18

22:                                               ; preds = %12, %16
  %23 = phi i64 [ %17, %16 ], [ %8, %12 ]
  store i64 %23, i64* %7, align 8
  br label %119

24:                                               ; preds = %2
  %25 = bitcast %"class.std::__1::vector.19"* %0 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = sub i64 %8, %26
  %28 = sdiv exact i64 %27, 72
  %29 = add i64 %28, %1
  %30 = icmp ugt i64 %29, 256204778801521550
  br i1 %30, label %31, label %33

31:                                               ; preds = %24
  %32 = bitcast %"class.std::__1::vector.19"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %32) #12
  unreachable

33:                                               ; preds = %24
  %34 = sub i64 %5, %26
  %35 = sdiv exact i64 %34, 72
  %36 = icmp ult i64 %35, 128102389400760775
  br i1 %36, label %37, label %42

37:                                               ; preds = %33
  %38 = shl nsw i64 %35, 1
  %39 = icmp ult i64 %38, %29
  %40 = select i1 %39, i64 %29, i64 %38
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %47, label %42

42:                                               ; preds = %33, %37
  %43 = phi i64 [ %40, %37 ], [ 256204778801521550, %33 ]
  %44 = mul i64 %43, 72
  %45 = tail call i8* @_Znwm(i64 %44) #13
  %46 = bitcast i8* %45 to %"class.jxl::Transform"*
  br label %47

47:                                               ; preds = %37, %42
  %48 = phi i64 [ %43, %42 ], [ 0, %37 ]
  %49 = phi %"class.jxl::Transform"* [ %46, %42 ], [ null, %37 ]
  %50 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %49, i64 %28
  %51 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %49, i64 %48
  %52 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %50, i64 %1
  br label %53

53:                                               ; preds = %47, %53
  %54 = phi %"class.jxl::Transform"* [ %55, %53 ], [ %50, %47 ]
  tail call void @_ZN3jxl9TransformC2ENS_11TransformIdE(%"class.jxl::Transform"* %54, i32 5) #10
  %55 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %54, i64 1
  %56 = icmp eq %"class.jxl::Transform"* %52, %55
  br i1 %56, label %57, label %53

57:                                               ; preds = %53
  %58 = ptrtoint %"class.jxl::Transform"* %51 to i64
  %59 = ptrtoint %"class.jxl::Transform"* %52 to i64
  %60 = getelementptr inbounds %"class.std::__1::vector.19", %"class.std::__1::vector.19"* %0, i64 0, i32 0, i32 0
  %61 = load %"class.jxl::Transform"*, %"class.jxl::Transform"** %60, align 8
  %62 = load %"class.jxl::Transform"*, %"class.jxl::Transform"** %6, align 8
  %63 = icmp eq %"class.jxl::Transform"* %62, %61
  br i1 %63, label %64, label %66

64:                                               ; preds = %57
  %65 = ptrtoint %"class.jxl::Transform"* %61 to i64
  br label %101

66:                                               ; preds = %57, %66
  %67 = phi %"class.jxl::Transform"* [ %96, %66 ], [ %50, %57 ]
  %68 = phi %"class.jxl::Transform"* [ %69, %66 ], [ %62, %57 ]
  %69 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %68, i64 -1
  %70 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %67, i64 -1, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl9TransformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %70, align 8
  %71 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %67, i64 -1, i32 1
  %72 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %68, i64 -1, i32 1
  %73 = bitcast i32* %71 to i8*
  %74 = bitcast i32* %72 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %73, i8* align 8 %74, i64 24, i1 false) #10
  %75 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %67, i64 -1, i32 7
  %76 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %68, i64 -1, i32 7
  %77 = bitcast %"class.std::__1::vector.21"* %75 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %77, i8 0, i64 24, i1 false) #10
  %78 = bitcast %"class.std::__1::vector.21"* %76 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = bitcast %"class.std::__1::vector.21"* %75 to i64*
  store i64 %79, i64* %80, align 8
  %81 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %68, i64 -1, i32 7, i32 0, i32 1
  %82 = bitcast %"struct.jxl::SqueezeParams"** %81 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %67, i64 -1, i32 7, i32 0, i32 1
  %85 = bitcast %"struct.jxl::SqueezeParams"** %84 to i64*
  store i64 %83, i64* %85, align 8
  %86 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %68, i64 -1, i32 7, i32 0, i32 2, i32 0, i32 0
  %87 = bitcast %"struct.jxl::SqueezeParams"** %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %67, i64 -1, i32 7, i32 0, i32 2, i32 0, i32 0
  %90 = bitcast %"struct.jxl::SqueezeParams"** %89 to i64*
  store i64 %88, i64* %90, align 8
  %91 = bitcast %"class.std::__1::vector.21"* %76 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %91, i8 0, i64 24, i1 false) #10
  %92 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %67, i64 -1, i32 8
  %93 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %68, i64 -1, i32 8
  %94 = bitcast i32* %92 to i8*
  %95 = bitcast i32* %93 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %94, i8* align 8 %95, i64 10, i1 false) #10
  %96 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %67, i64 -1
  %97 = icmp eq %"class.jxl::Transform"* %69, %61
  br i1 %97, label %98, label %66

98:                                               ; preds = %66
  %99 = load i64, i64* %25, align 8
  %100 = load %"class.jxl::Transform"*, %"class.jxl::Transform"** %6, align 8
  br label %101

101:                                              ; preds = %64, %98
  %102 = phi %"class.jxl::Transform"* [ %61, %64 ], [ %100, %98 ]
  %103 = phi %"class.jxl::Transform"* [ %50, %64 ], [ %96, %98 ]
  %104 = phi i64 [ %65, %64 ], [ %99, %98 ]
  %105 = ptrtoint %"class.jxl::Transform"* %103 to i64
  store i64 %105, i64* %25, align 8
  store i64 %59, i64* %7, align 8
  store i64 %58, i64* %4, align 8
  %106 = inttoptr i64 %104 to %"class.jxl::Transform"*
  %107 = icmp eq %"class.jxl::Transform"* %102, %106
  br i1 %107, label %115, label %108

108:                                              ; preds = %101, %108
  %109 = phi %"class.jxl::Transform"* [ %110, %108 ], [ %102, %101 ]
  %110 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %109, i64 -1
  %111 = bitcast %"class.jxl::Transform"* %110 to void (%"class.jxl::Transform"*)***
  %112 = load void (%"class.jxl::Transform"*)**, void (%"class.jxl::Transform"*)*** %111, align 8
  %113 = load void (%"class.jxl::Transform"*)*, void (%"class.jxl::Transform"*)** %112, align 8
  tail call void %113(%"class.jxl::Transform"* %110) #10
  %114 = icmp eq %"class.jxl::Transform"* %110, %106
  br i1 %114, label %115, label %108

115:                                              ; preds = %108, %101
  %116 = icmp eq i64 %104, 0
  br i1 %116, label %119, label %117

117:                                              ; preds = %115
  %118 = inttoptr i64 %104 to i8*
  tail call void @_ZdlPv(i8* %118) #13
  br label %119

119:                                              ; preds = %117, %115, %22
  ret void
}

declare void @_ZN3jxl9TransformC2ENS_11TransformIdE(%"class.jxl::Transform"*, i32) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS0_IN3jxl5TokenENS_9allocatorIS2_EEEENS3_IS5_EEE8__appendEm(%"class.std::__1::vector.59"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.59", %"class.std::__1::vector.59"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.std::__1::vector.61"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.59", %"class.std::__1::vector.59"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.std::__1::vector.61"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 24
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %30, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"class.std::__1::vector.61"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %28, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %13, i64 %18, i32 0, i32 0
  %20 = bitcast %"struct.jxl::Token"** %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = urem i64 %23, 24
  %25 = add i64 %23, 24
  %26 = sub i64 %25, %24
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %26, i1 false) #10
  %27 = ptrtoint %"class.std::__1::vector.61"* %16 to i64
  br label %28

28:                                               ; preds = %12, %15
  %29 = phi i64 [ %27, %15 ], [ %8, %12 ]
  store i64 %29, i64* %7, align 8
  br label %124

30:                                               ; preds = %2
  %31 = bitcast %"class.std::__1::vector.59"* %0 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = sub i64 %8, %32
  %34 = sdiv exact i64 %33, 24
  %35 = add i64 %34, %1
  %36 = icmp ugt i64 %35, 768614336404564650
  br i1 %36, label %37, label %39

37:                                               ; preds = %30
  %38 = bitcast %"class.std::__1::vector.59"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %38) #12
  unreachable

39:                                               ; preds = %30
  %40 = sub i64 %5, %32
  %41 = sdiv exact i64 %40, 24
  %42 = icmp ult i64 %41, 384307168202282325
  br i1 %42, label %43, label %48

43:                                               ; preds = %39
  %44 = shl nsw i64 %41, 1
  %45 = icmp ult i64 %44, %35
  %46 = select i1 %45, i64 %35, i64 %44
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %39, %43
  %49 = phi i64 [ %46, %43 ], [ 768614336404564650, %39 ]
  %50 = mul i64 %49, 24
  %51 = tail call i8* @_Znwm(i64 %50) #13
  %52 = bitcast i8* %51 to %"class.std::__1::vector.61"*
  br label %53

53:                                               ; preds = %43, %48
  %54 = phi i64 [ %49, %48 ], [ 0, %43 ]
  %55 = phi %"class.std::__1::vector.61"* [ %52, %48 ], [ null, %43 ]
  %56 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %55, i64 %34
  %57 = ptrtoint %"class.std::__1::vector.61"* %56 to i64
  %58 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %55, i64 %54
  %59 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %56, i64 %1
  br label %60

60:                                               ; preds = %53, %60
  %61 = phi %"class.std::__1::vector.61"* [ %64, %60 ], [ %56, %53 ]
  %62 = phi i64 [ %65, %60 ], [ %57, %53 ]
  %63 = inttoptr i64 %62 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 24, i1 false) #10
  %64 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %61, i64 1
  %65 = ptrtoint %"class.std::__1::vector.61"* %64 to i64
  %66 = icmp eq %"class.std::__1::vector.61"* %59, %64
  br i1 %66, label %67, label %60

67:                                               ; preds = %60
  %68 = ptrtoint %"class.std::__1::vector.61"* %58 to i64
  %69 = ptrtoint %"class.std::__1::vector.61"* %59 to i64
  %70 = getelementptr inbounds %"class.std::__1::vector.59", %"class.std::__1::vector.59"* %0, i64 0, i32 0, i32 0
  %71 = load %"class.std::__1::vector.61"*, %"class.std::__1::vector.61"** %70, align 8
  %72 = load %"class.std::__1::vector.61"*, %"class.std::__1::vector.61"** %6, align 8
  %73 = icmp eq %"class.std::__1::vector.61"* %72, %71
  br i1 %73, label %74, label %76

74:                                               ; preds = %67
  %75 = ptrtoint %"class.std::__1::vector.61"* %71 to i64
  br label %101

76:                                               ; preds = %67, %76
  %77 = phi %"class.std::__1::vector.61"* [ %79, %76 ], [ %56, %67 ]
  %78 = phi %"class.std::__1::vector.61"* [ %80, %76 ], [ %72, %67 ]
  %79 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %77, i64 -1
  %80 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %78, i64 -1
  %81 = bitcast %"class.std::__1::vector.61"* %79 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 24, i1 false) #10
  %82 = bitcast %"class.std::__1::vector.61"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast %"class.std::__1::vector.61"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %78, i64 -1, i32 0, i32 1
  %86 = bitcast %"struct.jxl::Token"** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %77, i64 -1, i32 0, i32 1
  %89 = bitcast %"struct.jxl::Token"** %88 to i64*
  store i64 %87, i64* %89, align 8
  %90 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %78, i64 -1, i32 0, i32 2, i32 0, i32 0
  %91 = bitcast %"struct.jxl::Token"** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %77, i64 -1, i32 0, i32 2, i32 0, i32 0
  %94 = bitcast %"struct.jxl::Token"** %93 to i64*
  store i64 %92, i64* %94, align 8
  %95 = bitcast %"class.std::__1::vector.61"* %80 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 24, i1 false) #10
  %96 = icmp eq %"class.std::__1::vector.61"* %80, %71
  br i1 %96, label %97, label %76

97:                                               ; preds = %76
  %98 = ptrtoint %"class.std::__1::vector.61"* %79 to i64
  %99 = load i64, i64* %31, align 8
  %100 = load %"class.std::__1::vector.61"*, %"class.std::__1::vector.61"** %6, align 8
  br label %101

101:                                              ; preds = %74, %97
  %102 = phi %"class.std::__1::vector.61"* [ %71, %74 ], [ %100, %97 ]
  %103 = phi i64 [ %57, %74 ], [ %98, %97 ]
  %104 = phi i64 [ %75, %74 ], [ %99, %97 ]
  store i64 %103, i64* %31, align 8
  store i64 %69, i64* %7, align 8
  store i64 %68, i64* %4, align 8
  %105 = inttoptr i64 %104 to %"class.std::__1::vector.61"*
  %106 = icmp eq %"class.std::__1::vector.61"* %102, %105
  br i1 %106, label %120, label %107

107:                                              ; preds = %101, %118
  %108 = phi %"class.std::__1::vector.61"* [ %109, %118 ], [ %102, %101 ]
  %109 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %108, i64 -1
  %110 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %109, i64 0, i32 0, i32 0
  %111 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %110, align 8
  %112 = icmp eq %"struct.jxl::Token"* %111, null
  br i1 %112, label %118, label %113

113:                                              ; preds = %107
  %114 = ptrtoint %"struct.jxl::Token"* %111 to i64
  %115 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %108, i64 -1, i32 0, i32 1
  %116 = bitcast %"struct.jxl::Token"** %115 to i64*
  store i64 %114, i64* %116, align 8
  %117 = bitcast %"struct.jxl::Token"* %111 to i8*
  tail call void @_ZdlPv(i8* %117) #13
  br label %118

118:                                              ; preds = %113, %107
  %119 = icmp eq %"class.std::__1::vector.61"* %109, %105
  br i1 %119, label %120, label %107

120:                                              ; preds = %118, %101
  %121 = icmp eq i64 %104, 0
  br i1 %121, label %124, label %122

122:                                              ; preds = %120
  %123 = inttoptr i64 %104 to i8*
  tail call void @_ZdlPv(i8* %123) #13
  br label %124

124:                                              ; preds = %122, %120, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ModularFrameEncoder15PrepareEncodingEPS0_RKNS_15FrameDimensionsEPNS_17EncoderHeuristicsEPNS_6AuxOutEE3$_2E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #0 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #10
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ModularFrameEncoder15PrepareEncodingEPS0_RKNS_15FrameDimensionsEPNS_17EncoderHeuristicsEPNS_6AuxOutEE3$_2E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #0 align 2 {
  %4 = alloca %"class.std::__1::vector.52", align 8
  %5 = alloca %"class.std::__1::vector.156", align 8
  %6 = alloca %"class.std::__1::vector.156", align 8
  %7 = alloca i64, align 8
  %8 = alloca %"class.std::__1::vector.52", align 8
  %9 = alloca %"struct.jxl::TreeSamples", align 8
  %10 = alloca %"class.std::__1::vector.156", align 8
  %11 = alloca %"class.std::__1::vector.156", align 8
  %12 = alloca %"class.std::__1::vector.40", align 8
  %13 = alloca %"class.std::__1::vector.40", align 8
  %14 = alloca %"struct.std::__1::array", align 8
  %15 = alloca %"class.std::__1::vector.96", align 8
  %16 = alloca %"class.std::__1::vector.52", align 8
  %17 = getelementptr inbounds i8, i8* %0, i64 8
  %18 = bitcast i8* %17 to %class.anon.345**
  %19 = load %class.anon.345*, %class.anon.345** %18, align 8
  %20 = zext i32 %1 to i64
  %21 = getelementptr inbounds %class.anon.345, %class.anon.345* %19, i64 0, i32 1
  %22 = load %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ModularFrameEncoder"** %21, align 8
  %23 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #10
  store i64 0, i64* %7, align 8
  %24 = getelementptr inbounds %class.anon.345, %class.anon.345* %19, i64 0, i32 0
  %25 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %24, align 8
  %26 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %25, i64 0, i32 0, i32 0
  %27 = load i64*, i64** %26, align 8
  %28 = getelementptr inbounds i64, i64* %27, i64 %20
  %29 = load i64, i64* %28, align 8
  %30 = trunc i64 %29 to i32
  %31 = add nuw nsw i64 %20, 1
  %32 = getelementptr inbounds i64, i64* %27, i64 %31
  %33 = load i64, i64* %32, align 8
  %34 = trunc i64 %33 to i32
  %35 = and i64 %29, 4294967295
  %36 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %22, i64 0, i32 3, i32 0, i32 0
  %37 = load %"struct.jxl::ModularOptions"*, %"struct.jxl::ModularOptions"** %36, align 8
  %38 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %37, i64 %35, i32 13
  %39 = load i32, i32* %38, align 4
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %1677, label %41

41:                                               ; preds = %3
  %42 = and i64 %33, 4294967295
  %43 = icmp ult i64 %35, %42
  br i1 %43, label %44, label %49

44:                                               ; preds = %41
  %45 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %22, i64 0, i32 2, i32 0, i32 0
  %46 = load %"class.jxl::Image"*, %"class.jxl::Image"** %45, align 8
  br label %1607

47:                                               ; preds = %1644
  %48 = load i32, i32* %38, align 4
  br label %49

49:                                               ; preds = %47, %41
  %50 = phi i64 [ %1645, %47 ], [ 0, %41 ]
  %51 = phi i32 [ %48, %47 ], [ %39, %41 ]
  %52 = bitcast %"class.std::__1::vector.52"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %52) #10
  switch i32 %51, label %1575 [
    i32 1, label %53
    i32 2, label %75
    i32 3, label %97
    i32 4, label %1555
    i32 5, label %1565
  ]

53:                                               ; preds = %49
  %54 = tail call i8* @_Znwm(i64 40) #13
  %55 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %8, i64 0, i32 0, i32 1
  %56 = bitcast %"class.std::__1::vector.52"* %8 to i8**
  store i8* %54, i8** %56, align 8, !alias.scope !149
  %57 = getelementptr inbounds i8, i8* %54, i64 40
  %58 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %8, i64 0, i32 0, i32 2, i32 0, i32 0
  %59 = bitcast %"struct.jxl::PropertyDecisionNode"** %58 to i8**
  store i8* %57, i8** %59, align 8, !alias.scope !149
  %60 = bitcast %"struct.jxl::PropertyDecisionNode"** %55 to i64*
  %61 = bitcast i8* %54 to i32*
  store i32 0, i32* %61, align 8, !noalias !149
  %62 = getelementptr inbounds i8, i8* %54, i64 4
  %63 = bitcast i8* %62 to i16*
  store i16 -1, i16* %63, align 4, !noalias !149
  %64 = getelementptr inbounds i8, i8* %54, i64 8
  %65 = bitcast i8* %64 to i32*
  store i32 0, i32* %65, align 8, !noalias !149
  %66 = getelementptr inbounds i8, i8* %54, i64 12
  %67 = bitcast i8* %66 to i32*
  store i32 0, i32* %67, align 4, !noalias !149
  %68 = getelementptr inbounds i8, i8* %54, i64 16
  %69 = bitcast i8* %68 to i32*
  store i32 0, i32* %69, align 8, !noalias !149
  %70 = getelementptr inbounds i8, i8* %54, i64 24
  %71 = bitcast i8* %70 to i64*
  store i64 0, i64* %71, align 8, !noalias !149
  %72 = getelementptr inbounds i8, i8* %54, i64 32
  %73 = bitcast i8* %72 to i32*
  store i32 1, i32* %73, align 8, !noalias !149
  %74 = ptrtoint i8* %57 to i64
  store i64 %74, i64* %60, align 8, !alias.scope !149
  br label %1578

75:                                               ; preds = %49
  %76 = tail call i8* @_Znwm(i64 40) #13
  %77 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %8, i64 0, i32 0, i32 1
  %78 = bitcast %"class.std::__1::vector.52"* %8 to i8**
  store i8* %76, i8** %78, align 8, !alias.scope !149
  %79 = getelementptr inbounds i8, i8* %76, i64 40
  %80 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %8, i64 0, i32 0, i32 2, i32 0, i32 0
  %81 = bitcast %"struct.jxl::PropertyDecisionNode"** %80 to i8**
  store i8* %79, i8** %81, align 8, !alias.scope !149
  %82 = bitcast %"struct.jxl::PropertyDecisionNode"** %77 to i64*
  %83 = bitcast i8* %76 to i32*
  store i32 0, i32* %83, align 8, !noalias !149
  %84 = getelementptr inbounds i8, i8* %76, i64 4
  %85 = bitcast i8* %84 to i16*
  store i16 -1, i16* %85, align 4, !noalias !149
  %86 = getelementptr inbounds i8, i8* %76, i64 8
  %87 = bitcast i8* %86 to i32*
  store i32 0, i32* %87, align 8, !noalias !149
  %88 = getelementptr inbounds i8, i8* %76, i64 12
  %89 = bitcast i8* %88 to i32*
  store i32 0, i32* %89, align 4, !noalias !149
  %90 = getelementptr inbounds i8, i8* %76, i64 16
  %91 = bitcast i8* %90 to i32*
  store i32 1, i32* %91, align 8, !noalias !149
  %92 = getelementptr inbounds i8, i8* %76, i64 24
  %93 = bitcast i8* %92 to i64*
  store i64 0, i64* %93, align 8, !noalias !149
  %94 = getelementptr inbounds i8, i8* %76, i64 32
  %95 = bitcast i8* %94 to i32*
  store i32 1, i32* %95, align 8, !noalias !149
  %96 = ptrtoint i8* %79 to i64
  store i64 %96, i64* %82, align 8, !alias.scope !149
  br label %1578

97:                                               ; preds = %49
  %98 = icmp ult i64 %50, 1024
  br i1 %98, label %99, label %121

99:                                               ; preds = %97
  %100 = tail call i8* @_Znwm(i64 40) #13
  %101 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %8, i64 0, i32 0, i32 1
  %102 = bitcast %"class.std::__1::vector.52"* %8 to i8**
  store i8* %100, i8** %102, align 8, !alias.scope !149
  %103 = getelementptr inbounds i8, i8* %100, i64 40
  %104 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %8, i64 0, i32 0, i32 2, i32 0, i32 0
  %105 = bitcast %"struct.jxl::PropertyDecisionNode"** %104 to i8**
  store i8* %103, i8** %105, align 8, !alias.scope !149
  %106 = bitcast %"struct.jxl::PropertyDecisionNode"** %101 to i64*
  %107 = bitcast i8* %100 to i32*
  store i32 0, i32* %107, align 8, !noalias !149
  %108 = getelementptr inbounds i8, i8* %100, i64 4
  %109 = bitcast i8* %108 to i16*
  store i16 -1, i16* %109, align 4, !noalias !149
  %110 = getelementptr inbounds i8, i8* %100, i64 8
  %111 = bitcast i8* %110 to i32*
  store i32 0, i32* %111, align 8, !noalias !149
  %112 = getelementptr inbounds i8, i8* %100, i64 12
  %113 = bitcast i8* %112 to i32*
  store i32 0, i32* %113, align 4, !noalias !149
  %114 = getelementptr inbounds i8, i8* %100, i64 16
  %115 = bitcast i8* %114 to i32*
  store i32 1, i32* %115, align 8, !noalias !149
  %116 = getelementptr inbounds i8, i8* %100, i64 24
  %117 = bitcast i8* %116 to i64*
  store i64 0, i64* %117, align 8, !noalias !149
  %118 = getelementptr inbounds i8, i8* %100, i64 32
  %119 = bitcast i8* %118 to i32*
  store i32 1, i32* %119, align 8, !noalias !149
  %120 = ptrtoint i8* %103 to i64
  store i64 %120, i64* %106, align 8, !alias.scope !149
  br label %1578

121:                                              ; preds = %97
  %122 = bitcast %"class.std::__1::vector.52"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %122) #10, !noalias !149
  %123 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %4, i64 0, i32 0, i32 1
  %124 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %125 = bitcast %"struct.jxl::PropertyDecisionNode"** %123 to i64*
  %126 = bitcast %"class.std::__1::vector.52"* %4 to i64*
  %127 = bitcast %"struct.jxl::PropertyDecisionNode"** %124 to i64*
  %128 = tail call i8* @_Znwm(i64 40) #13
  %129 = bitcast i8* %128 to i32*
  store i32 1, i32* %129, align 8, !noalias !149
  %130 = getelementptr inbounds i8, i8* %128, i64 4
  %131 = bitcast i8* %130 to i16*
  store i16 0, i16* %131, align 4, !noalias !149
  %132 = getelementptr inbounds i8, i8* %128, i64 8
  %133 = bitcast i8* %132 to i32*
  store i32 1, i32* %133, align 8, !noalias !149
  %134 = getelementptr inbounds i8, i8* %128, i64 12
  %135 = bitcast i8* %134 to i32*
  store i32 2, i32* %135, align 4, !noalias !149
  %136 = getelementptr inbounds i8, i8* %128, i64 16
  %137 = bitcast i8* %136 to i32*
  store i32 0, i32* %137, align 8, !noalias !149
  %138 = getelementptr inbounds i8, i8* %128, i64 24
  %139 = bitcast i8* %138 to i64*
  store i64 0, i64* %139, align 8, !noalias !149
  %140 = getelementptr inbounds i8, i8* %128, i64 32
  %141 = bitcast i8* %140 to i32*
  store i32 1, i32* %141, align 8, !noalias !149
  %142 = tail call i8* @_Znwm(i64 80) #13
  %143 = getelementptr inbounds i8, i8* %142, i64 40
  %144 = bitcast i8* %143 to i32*
  store i32 2, i32* %144, align 8, !noalias !149
  %145 = getelementptr inbounds i8, i8* %142, i64 44
  %146 = bitcast i8* %145 to i16*
  store i16 0, i16* %146, align 4, !noalias !149
  %147 = getelementptr inbounds i8, i8* %142, i64 48
  %148 = bitcast i8* %147 to i32*
  store i32 3, i32* %148, align 8, !noalias !149
  %149 = getelementptr inbounds i8, i8* %142, i64 52
  %150 = bitcast i8* %149 to i32*
  store i32 4, i32* %150, align 4, !noalias !149
  %151 = getelementptr inbounds i8, i8* %142, i64 56
  %152 = bitcast i8* %151 to i32*
  store i32 0, i32* %152, align 8, !noalias !149
  %153 = getelementptr inbounds i8, i8* %142, i64 64
  %154 = bitcast i8* %153 to i64*
  store i64 0, i64* %154, align 8, !noalias !149
  %155 = getelementptr inbounds i8, i8* %142, i64 72
  %156 = bitcast i8* %155 to i32*
  store i32 1, i32* %156, align 8, !noalias !149
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %142, i8* nonnull align 8 %128, i64 40, i1 false) #10, !noalias !149
  tail call void @_ZdlPv(i8* nonnull %128) #13
  %157 = tail call i8* @_Znwm(i64 160) #13
  %158 = getelementptr inbounds i8, i8* %157, i64 80
  %159 = bitcast i8* %158 to i32*
  store i32 0, i32* %159, align 8, !noalias !149
  %160 = getelementptr inbounds i8, i8* %157, i64 84
  %161 = bitcast i8* %160 to i16*
  store i16 0, i16* %161, align 4, !noalias !149
  %162 = getelementptr inbounds i8, i8* %157, i64 88
  %163 = bitcast i8* %162 to i32*
  store i32 5, i32* %163, align 8, !noalias !149
  %164 = getelementptr inbounds i8, i8* %157, i64 92
  %165 = bitcast i8* %164 to i32*
  store i32 6, i32* %165, align 4, !noalias !149
  %166 = getelementptr inbounds i8, i8* %157, i64 96
  %167 = bitcast i8* %166 to i32*
  store i32 0, i32* %167, align 8, !noalias !149
  %168 = getelementptr inbounds i8, i8* %157, i64 104
  %169 = bitcast i8* %168 to i64*
  store i64 0, i64* %169, align 8, !noalias !149
  %170 = getelementptr inbounds i8, i8* %157, i64 112
  %171 = bitcast i8* %170 to i32*
  store i32 1, i32* %171, align 8, !noalias !149
  %172 = getelementptr inbounds i8, i8* %157, i64 120
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %157, i8* nonnull align 8 %142, i64 80, i1 false) #10
  tail call void @_ZdlPv(i8* nonnull %142) #13
  %173 = bitcast i8* %172 to i32*
  store i32 0, i32* %173, align 8, !noalias !149
  %174 = getelementptr inbounds i8, i8* %157, i64 124
  %175 = bitcast i8* %174 to i16*
  store i16 6, i16* %175, align 4, !noalias !149
  %176 = getelementptr inbounds i8, i8* %157, i64 128
  %177 = bitcast i8* %176 to i32*
  store i32 21, i32* %177, align 8, !noalias !149
  %178 = getelementptr inbounds i8, i8* %157, i64 132
  %179 = bitcast i8* %178 to i32*
  store i32 22, i32* %179, align 4, !noalias !149
  %180 = getelementptr inbounds i8, i8* %157, i64 136
  %181 = bitcast i8* %180 to i32*
  store i32 0, i32* %181, align 8, !noalias !149
  %182 = getelementptr inbounds i8, i8* %157, i64 144
  %183 = bitcast i8* %182 to i64*
  store i64 0, i64* %183, align 8, !noalias !149
  %184 = getelementptr inbounds i8, i8* %157, i64 152
  %185 = bitcast i8* %184 to i32*
  store i32 1, i32* %185, align 8, !noalias !149
  %186 = tail call i8* @_Znwm(i64 320) #13
  %187 = getelementptr inbounds i8, i8* %186, i64 320
  %188 = ptrtoint i8* %187 to i64
  %189 = getelementptr inbounds i8, i8* %186, i64 160
  %190 = bitcast i8* %189 to i32*
  store i32 0, i32* %190, align 8, !noalias !149
  %191 = getelementptr inbounds i8, i8* %186, i64 164
  %192 = bitcast i8* %191 to i16*
  store i16 2, i16* %192, align 4, !noalias !149
  %193 = getelementptr inbounds i8, i8* %186, i64 168
  %194 = bitcast i8* %193 to i32*
  store i32 7, i32* %194, align 8, !noalias !149
  %195 = getelementptr inbounds i8, i8* %186, i64 172
  %196 = bitcast i8* %195 to i32*
  store i32 8, i32* %196, align 4, !noalias !149
  %197 = getelementptr inbounds i8, i8* %186, i64 176
  %198 = bitcast i8* %197 to i32*
  store i32 0, i32* %198, align 8, !noalias !149
  %199 = getelementptr inbounds i8, i8* %186, i64 184
  %200 = bitcast i8* %199 to i64*
  store i64 0, i64* %200, align 8, !noalias !149
  %201 = getelementptr inbounds i8, i8* %186, i64 192
  %202 = bitcast i8* %201 to i32*
  store i32 1, i32* %202, align 8, !noalias !149
  %203 = getelementptr inbounds i8, i8* %186, i64 200
  %204 = ptrtoint i8* %186 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %186, i8* nonnull align 8 %157, i64 160, i1 false) #10
  store i64 %204, i64* %126, align 8, !noalias !149
  store i64 %188, i64* %127, align 8, !noalias !149
  tail call void @_ZdlPv(i8* nonnull %157) #13
  %205 = bitcast i8* %203 to i32*
  store i32 0, i32* %205, align 8, !noalias !149
  %206 = getelementptr inbounds i8, i8* %186, i64 204
  %207 = bitcast i8* %206 to i16*
  store i16 -1, i16* %207, align 4, !noalias !149
  %208 = getelementptr inbounds i8, i8* %186, i64 208
  %209 = bitcast i8* %208 to i32*
  store i32 0, i32* %209, align 8, !noalias !149
  %210 = getelementptr inbounds i8, i8* %186, i64 212
  %211 = bitcast i8* %210 to i32*
  store i32 0, i32* %211, align 4, !noalias !149
  %212 = getelementptr inbounds i8, i8* %186, i64 216
  %213 = bitcast i8* %212 to i32*
  store i32 5, i32* %213, align 8, !noalias !149
  %214 = getelementptr inbounds i8, i8* %186, i64 224
  %215 = bitcast i8* %214 to i64*
  store i64 0, i64* %215, align 8, !noalias !149
  %216 = getelementptr inbounds i8, i8* %186, i64 232
  %217 = bitcast i8* %216 to i32*
  store i32 1, i32* %217, align 8, !noalias !149
  %218 = getelementptr inbounds i8, i8* %186, i64 240
  %219 = bitcast i8* %218 to i32*
  store i32 0, i32* %219, align 8, !noalias !149
  %220 = getelementptr inbounds i8, i8* %186, i64 244
  %221 = bitcast i8* %220 to i16*
  store i16 -1, i16* %221, align 4, !noalias !149
  %222 = getelementptr inbounds i8, i8* %186, i64 248
  %223 = bitcast i8* %222 to i32*
  store i32 0, i32* %223, align 8, !noalias !149
  %224 = getelementptr inbounds i8, i8* %186, i64 252
  %225 = bitcast i8* %224 to i32*
  store i32 0, i32* %225, align 4, !noalias !149
  %226 = getelementptr inbounds i8, i8* %186, i64 256
  %227 = bitcast i8* %226 to i32*
  store i32 5, i32* %227, align 8, !noalias !149
  %228 = getelementptr inbounds i8, i8* %186, i64 264
  %229 = bitcast i8* %228 to i64*
  store i64 0, i64* %229, align 8, !noalias !149
  %230 = getelementptr inbounds i8, i8* %186, i64 272
  %231 = bitcast i8* %230 to i32*
  store i32 1, i32* %231, align 8, !noalias !149
  %232 = getelementptr inbounds i8, i8* %186, i64 280
  %233 = ptrtoint i8* %232 to i64
  store i64 %233, i64* %125, align 8, !noalias !149
  %234 = bitcast i8* %232 to i32*
  store i32 5, i32* %234, align 8, !noalias !149
  %235 = getelementptr inbounds i8, i8* %186, i64 284
  %236 = bitcast i8* %235 to i16*
  store i16 7, i16* %236, align 4, !noalias !149
  %237 = getelementptr inbounds i8, i8* %186, i64 288
  %238 = bitcast i8* %237 to i32*
  store i32 9, i32* %238, align 8, !noalias !149
  %239 = getelementptr inbounds i8, i8* %186, i64 292
  %240 = bitcast i8* %239 to i32*
  store i32 10, i32* %240, align 4, !noalias !149
  %241 = getelementptr inbounds i8, i8* %186, i64 296
  %242 = bitcast i8* %241 to i32*
  store i32 0, i32* %242, align 8, !noalias !149
  %243 = getelementptr inbounds i8, i8* %186, i64 304
  %244 = bitcast i8* %243 to i64*
  store i64 0, i64* %244, align 8, !noalias !149
  %245 = getelementptr inbounds i8, i8* %186, i64 312
  %246 = bitcast i8* %245 to i32*
  store i32 1, i32* %246, align 8, !noalias !149
  %247 = getelementptr inbounds i8, i8* %186, i64 320
  %248 = ptrtoint i8* %247 to i64
  store i64 %248, i64* %125, align 8, !noalias !149
  %249 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %124, align 8, !noalias !149
  %250 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %249 to i64
  %251 = bitcast i8* %247 to %"struct.jxl::PropertyDecisionNode"*
  %252 = icmp ugt %"struct.jxl::PropertyDecisionNode"* %249, %251
  br i1 %252, label %253, label %272

253:                                              ; preds = %121
  %254 = bitcast i8* %247 to i32*
  store i32 5, i32* %254, align 8, !noalias !149
  %255 = getelementptr inbounds i8, i8* %186, i64 324
  %256 = bitcast i8* %255 to i16*
  store i16 7, i16* %256, align 4, !noalias !149
  %257 = getelementptr inbounds i8, i8* %186, i64 328
  %258 = bitcast i8* %257 to i32*
  store i32 15, i32* %258, align 8, !noalias !149
  %259 = getelementptr inbounds i8, i8* %186, i64 332
  %260 = bitcast i8* %259 to i32*
  store i32 16, i32* %260, align 4, !noalias !149
  %261 = getelementptr inbounds i8, i8* %186, i64 336
  %262 = bitcast i8* %261 to i32*
  store i32 0, i32* %262, align 8, !noalias !149
  %263 = getelementptr inbounds i8, i8* %186, i64 344
  %264 = bitcast i8* %263 to i64*
  store i64 0, i64* %264, align 8, !noalias !149
  %265 = getelementptr inbounds i8, i8* %186, i64 352
  %266 = bitcast i8* %265 to i32*
  store i32 1, i32* %266, align 8, !noalias !149
  %267 = getelementptr inbounds i8, i8* %186, i64 360
  %268 = bitcast i8* %267 to %"struct.jxl::PropertyDecisionNode"*
  %269 = ptrtoint i8* %267 to i64
  store i64 %269, i64* %125, align 8, !noalias !149
  %270 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %124, align 8, !noalias !149
  %271 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %270 to i64
  br label %322

272:                                              ; preds = %121
  %273 = ptrtoint i8* %247 to i64
  %274 = load i64, i64* %126, align 8, !noalias !149
  %275 = sub i64 %273, %274
  %276 = sdiv exact i64 %275, 40
  %277 = add nsw i64 %276, 1
  %278 = icmp ugt i64 %277, 461168601842738790
  br i1 %278, label %279, label %281

279:                                              ; preds = %272
  %280 = bitcast %"class.std::__1::vector.52"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %280) #12
  unreachable

281:                                              ; preds = %272
  %282 = sub i64 %250, %274
  %283 = sdiv exact i64 %282, 40
  %284 = icmp ult i64 %283, 230584300921369395
  br i1 %284, label %285, label %290

285:                                              ; preds = %281
  %286 = shl nsw i64 %283, 1
  %287 = icmp ult i64 %286, %277
  %288 = select i1 %287, i64 %277, i64 %286
  %289 = icmp eq i64 %288, 0
  br i1 %289, label %295, label %290

290:                                              ; preds = %285, %281
  %291 = phi i64 [ %288, %285 ], [ 461168601842738790, %281 ]
  %292 = mul i64 %291, 40
  %293 = tail call i8* @_Znwm(i64 %292) #13
  %294 = bitcast i8* %293 to %"struct.jxl::PropertyDecisionNode"*
  br label %295

295:                                              ; preds = %290, %285
  %296 = phi i64 [ %291, %290 ], [ 0, %285 ]
  %297 = phi %"struct.jxl::PropertyDecisionNode"* [ %294, %290 ], [ null, %285 ]
  %298 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %297, i64 %276
  %299 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %297, i64 %296
  %300 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %299 to i64
  %301 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %298, i64 0, i32 0
  store i32 5, i32* %301, align 8, !noalias !149
  %302 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %297, i64 %276, i32 1
  store i16 7, i16* %302, align 4, !noalias !149
  %303 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %297, i64 %276, i32 3
  store i32 15, i32* %303, align 8, !noalias !149
  %304 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %297, i64 %276, i32 4
  store i32 16, i32* %304, align 4, !noalias !149
  %305 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %297, i64 %276, i32 5
  store i32 0, i32* %305, align 8, !noalias !149
  %306 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %297, i64 %276, i32 7
  store i64 0, i64* %306, align 8, !noalias !149
  %307 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %297, i64 %276, i32 8
  store i32 1, i32* %307, align 8, !noalias !149
  %308 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %298, i64 1
  %309 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %308 to i64
  %310 = sub i64 %248, %274
  %311 = sdiv exact i64 %310, -40
  %312 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %298, i64 %311
  %313 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %312 to i64
  %314 = icmp sgt i64 %310, 0
  br i1 %314, label %315, label %318

315:                                              ; preds = %295
  %316 = bitcast %"struct.jxl::PropertyDecisionNode"* %312 to i8*
  %317 = inttoptr i64 %274 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %316, i8* align 8 %317, i64 %310, i1 false) #10
  br label %318

318:                                              ; preds = %315, %295
  store i64 %313, i64* %126, align 8, !noalias !149
  store i64 %309, i64* %125, align 8, !noalias !149
  store i64 %300, i64* %127, align 8, !noalias !149
  %319 = icmp eq i64 %274, 0
  br i1 %319, label %322, label %320

320:                                              ; preds = %318
  %321 = inttoptr i64 %274 to i8*
  tail call void @_ZdlPv(i8* %321) #13
  br label %322

322:                                              ; preds = %320, %318, %253
  %323 = phi i64 [ %271, %253 ], [ %300, %318 ], [ %300, %320 ]
  %324 = phi i64 [ %269, %253 ], [ %309, %318 ], [ %309, %320 ]
  %325 = phi %"struct.jxl::PropertyDecisionNode"* [ %270, %253 ], [ %299, %318 ], [ %299, %320 ]
  %326 = phi %"struct.jxl::PropertyDecisionNode"* [ %268, %253 ], [ %308, %318 ], [ %308, %320 ]
  %327 = icmp ult %"struct.jxl::PropertyDecisionNode"* %326, %325
  br i1 %327, label %328, label %340

328:                                              ; preds = %322
  %329 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %326, i64 0, i32 0
  store i32 11, i32* %329, align 8, !noalias !149
  %330 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %326, i64 0, i32 1
  store i16 7, i16* %330, align 4, !noalias !149
  %331 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %326, i64 0, i32 3
  store i32 11, i32* %331, align 8, !noalias !149
  %332 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %326, i64 0, i32 4
  store i32 12, i32* %332, align 4, !noalias !149
  %333 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %326, i64 0, i32 5
  store i32 0, i32* %333, align 8, !noalias !149
  %334 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %326, i64 0, i32 7
  store i64 0, i64* %334, align 8, !noalias !149
  %335 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %326, i64 0, i32 8
  store i32 1, i32* %335, align 8, !noalias !149
  %336 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %326, i64 1
  %337 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %336 to i64
  store i64 %337, i64* %125, align 8, !noalias !149
  %338 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %124, align 8, !noalias !149
  %339 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %338 to i64
  br label %390

340:                                              ; preds = %322
  %341 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %326 to i64
  %342 = load i64, i64* %126, align 8, !noalias !149
  %343 = sub i64 %341, %342
  %344 = sdiv exact i64 %343, 40
  %345 = add nsw i64 %344, 1
  %346 = icmp ugt i64 %345, 461168601842738790
  br i1 %346, label %347, label %349

347:                                              ; preds = %340
  %348 = bitcast %"class.std::__1::vector.52"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %348) #12
  unreachable

349:                                              ; preds = %340
  %350 = sub i64 %323, %342
  %351 = sdiv exact i64 %350, 40
  %352 = icmp ult i64 %351, 230584300921369395
  br i1 %352, label %353, label %358

353:                                              ; preds = %349
  %354 = shl nsw i64 %351, 1
  %355 = icmp ult i64 %354, %345
  %356 = select i1 %355, i64 %345, i64 %354
  %357 = icmp eq i64 %356, 0
  br i1 %357, label %363, label %358

358:                                              ; preds = %353, %349
  %359 = phi i64 [ %356, %353 ], [ 461168601842738790, %349 ]
  %360 = mul i64 %359, 40
  %361 = tail call i8* @_Znwm(i64 %360) #13
  %362 = bitcast i8* %361 to %"struct.jxl::PropertyDecisionNode"*
  br label %363

363:                                              ; preds = %358, %353
  %364 = phi i64 [ %359, %358 ], [ 0, %353 ]
  %365 = phi %"struct.jxl::PropertyDecisionNode"* [ %362, %358 ], [ null, %353 ]
  %366 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %365, i64 %344
  %367 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %365, i64 %364
  %368 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %367 to i64
  %369 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %366, i64 0, i32 0
  store i32 11, i32* %369, align 8, !noalias !149
  %370 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %365, i64 %344, i32 1
  store i16 7, i16* %370, align 4, !noalias !149
  %371 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %365, i64 %344, i32 3
  store i32 11, i32* %371, align 8, !noalias !149
  %372 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %365, i64 %344, i32 4
  store i32 12, i32* %372, align 4, !noalias !149
  %373 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %365, i64 %344, i32 5
  store i32 0, i32* %373, align 8, !noalias !149
  %374 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %365, i64 %344, i32 7
  store i64 0, i64* %374, align 8, !noalias !149
  %375 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %365, i64 %344, i32 8
  store i32 1, i32* %375, align 8, !noalias !149
  %376 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %366, i64 1
  %377 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %376 to i64
  %378 = sub i64 %324, %342
  %379 = sdiv exact i64 %378, -40
  %380 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %366, i64 %379
  %381 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %380 to i64
  %382 = icmp sgt i64 %378, 0
  br i1 %382, label %383, label %386

383:                                              ; preds = %363
  %384 = bitcast %"struct.jxl::PropertyDecisionNode"* %380 to i8*
  %385 = inttoptr i64 %342 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %384, i8* align 8 %385, i64 %378, i1 false) #10
  br label %386

386:                                              ; preds = %383, %363
  store i64 %381, i64* %126, align 8, !noalias !149
  store i64 %377, i64* %125, align 8, !noalias !149
  store i64 %368, i64* %127, align 8, !noalias !149
  %387 = icmp eq i64 %342, 0
  br i1 %387, label %390, label %388

388:                                              ; preds = %386
  %389 = inttoptr i64 %342 to i8*
  tail call void @_ZdlPv(i8* %389) #13
  br label %390

390:                                              ; preds = %388, %386, %328
  %391 = phi i64 [ %339, %328 ], [ %368, %386 ], [ %368, %388 ]
  %392 = phi i64 [ %337, %328 ], [ %377, %386 ], [ %377, %388 ]
  %393 = phi %"struct.jxl::PropertyDecisionNode"* [ %338, %328 ], [ %367, %386 ], [ %367, %388 ]
  %394 = phi %"struct.jxl::PropertyDecisionNode"* [ %336, %328 ], [ %376, %386 ], [ %376, %388 ]
  %395 = icmp ult %"struct.jxl::PropertyDecisionNode"* %394, %393
  br i1 %395, label %396, label %408

396:                                              ; preds = %390
  %397 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %394, i64 0, i32 0
  store i32 3, i32* %397, align 8, !noalias !149
  %398 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %394, i64 0, i32 1
  store i16 7, i16* %398, align 4, !noalias !149
  %399 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %394, i64 0, i32 3
  store i32 13, i32* %399, align 8, !noalias !149
  %400 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %394, i64 0, i32 4
  store i32 14, i32* %400, align 4, !noalias !149
  %401 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %394, i64 0, i32 5
  store i32 0, i32* %401, align 8, !noalias !149
  %402 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %394, i64 0, i32 7
  store i64 0, i64* %402, align 8, !noalias !149
  %403 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %394, i64 0, i32 8
  store i32 1, i32* %403, align 8, !noalias !149
  %404 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %394, i64 1
  %405 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %404 to i64
  store i64 %405, i64* %125, align 8, !noalias !149
  %406 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %124, align 8, !noalias !149
  %407 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %406 to i64
  br label %458

408:                                              ; preds = %390
  %409 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %394 to i64
  %410 = load i64, i64* %126, align 8, !noalias !149
  %411 = sub i64 %409, %410
  %412 = sdiv exact i64 %411, 40
  %413 = add nsw i64 %412, 1
  %414 = icmp ugt i64 %413, 461168601842738790
  br i1 %414, label %415, label %417

415:                                              ; preds = %408
  %416 = bitcast %"class.std::__1::vector.52"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %416) #12
  unreachable

417:                                              ; preds = %408
  %418 = sub i64 %391, %410
  %419 = sdiv exact i64 %418, 40
  %420 = icmp ult i64 %419, 230584300921369395
  br i1 %420, label %421, label %426

421:                                              ; preds = %417
  %422 = shl nsw i64 %419, 1
  %423 = icmp ult i64 %422, %413
  %424 = select i1 %423, i64 %413, i64 %422
  %425 = icmp eq i64 %424, 0
  br i1 %425, label %431, label %426

426:                                              ; preds = %421, %417
  %427 = phi i64 [ %424, %421 ], [ 461168601842738790, %417 ]
  %428 = mul i64 %427, 40
  %429 = tail call i8* @_Znwm(i64 %428) #13
  %430 = bitcast i8* %429 to %"struct.jxl::PropertyDecisionNode"*
  br label %431

431:                                              ; preds = %426, %421
  %432 = phi i64 [ %427, %426 ], [ 0, %421 ]
  %433 = phi %"struct.jxl::PropertyDecisionNode"* [ %430, %426 ], [ null, %421 ]
  %434 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %433, i64 %412
  %435 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %433, i64 %432
  %436 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %435 to i64
  %437 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %434, i64 0, i32 0
  store i32 3, i32* %437, align 8, !noalias !149
  %438 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %433, i64 %412, i32 1
  store i16 7, i16* %438, align 4, !noalias !149
  %439 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %433, i64 %412, i32 3
  store i32 13, i32* %439, align 8, !noalias !149
  %440 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %433, i64 %412, i32 4
  store i32 14, i32* %440, align 4, !noalias !149
  %441 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %433, i64 %412, i32 5
  store i32 0, i32* %441, align 8, !noalias !149
  %442 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %433, i64 %412, i32 7
  store i64 0, i64* %442, align 8, !noalias !149
  %443 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %433, i64 %412, i32 8
  store i32 1, i32* %443, align 8, !noalias !149
  %444 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %434, i64 1
  %445 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %444 to i64
  %446 = sub i64 %392, %410
  %447 = sdiv exact i64 %446, -40
  %448 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %434, i64 %447
  %449 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %448 to i64
  %450 = icmp sgt i64 %446, 0
  br i1 %450, label %451, label %454

451:                                              ; preds = %431
  %452 = bitcast %"struct.jxl::PropertyDecisionNode"* %448 to i8*
  %453 = inttoptr i64 %410 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %452, i8* align 8 %453, i64 %446, i1 false) #10
  br label %454

454:                                              ; preds = %451, %431
  store i64 %449, i64* %126, align 8, !noalias !149
  store i64 %445, i64* %125, align 8, !noalias !149
  store i64 %436, i64* %127, align 8, !noalias !149
  %455 = icmp eq i64 %410, 0
  br i1 %455, label %458, label %456

456:                                              ; preds = %454
  %457 = inttoptr i64 %410 to i8*
  tail call void @_ZdlPv(i8* %457) #13
  br label %458

458:                                              ; preds = %456, %454, %396
  %459 = phi i64 [ %407, %396 ], [ %436, %454 ], [ %436, %456 ]
  %460 = phi i64 [ %405, %396 ], [ %445, %454 ], [ %445, %456 ]
  %461 = phi %"struct.jxl::PropertyDecisionNode"* [ %406, %396 ], [ %435, %454 ], [ %435, %456 ]
  %462 = phi %"struct.jxl::PropertyDecisionNode"* [ %404, %396 ], [ %444, %454 ], [ %444, %456 ]
  %463 = icmp ult %"struct.jxl::PropertyDecisionNode"* %462, %461
  br i1 %463, label %464, label %476

464:                                              ; preds = %458
  %465 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %462, i64 0, i32 0
  store i32 0, i32* %465, align 8, !noalias !149
  %466 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %462, i64 0, i32 1
  store i16 -1, i16* %466, align 4, !noalias !149
  %467 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %462, i64 0, i32 3
  store i32 0, i32* %467, align 8, !noalias !149
  %468 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %462, i64 0, i32 4
  store i32 0, i32* %468, align 4, !noalias !149
  %469 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %462, i64 0, i32 5
  store i32 1, i32* %469, align 8, !noalias !149
  %470 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %462, i64 0, i32 7
  store i64 0, i64* %470, align 8, !noalias !149
  %471 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %462, i64 0, i32 8
  store i32 1, i32* %471, align 8, !noalias !149
  %472 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %462, i64 1
  %473 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %472 to i64
  store i64 %473, i64* %125, align 8, !noalias !149
  %474 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %124, align 8, !noalias !149
  %475 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %474 to i64
  br label %526

476:                                              ; preds = %458
  %477 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %462 to i64
  %478 = load i64, i64* %126, align 8, !noalias !149
  %479 = sub i64 %477, %478
  %480 = sdiv exact i64 %479, 40
  %481 = add nsw i64 %480, 1
  %482 = icmp ugt i64 %481, 461168601842738790
  br i1 %482, label %483, label %485

483:                                              ; preds = %476
  %484 = bitcast %"class.std::__1::vector.52"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %484) #12
  unreachable

485:                                              ; preds = %476
  %486 = sub i64 %459, %478
  %487 = sdiv exact i64 %486, 40
  %488 = icmp ult i64 %487, 230584300921369395
  br i1 %488, label %489, label %494

489:                                              ; preds = %485
  %490 = shl nsw i64 %487, 1
  %491 = icmp ult i64 %490, %481
  %492 = select i1 %491, i64 %481, i64 %490
  %493 = icmp eq i64 %492, 0
  br i1 %493, label %499, label %494

494:                                              ; preds = %489, %485
  %495 = phi i64 [ %492, %489 ], [ 461168601842738790, %485 ]
  %496 = mul i64 %495, 40
  %497 = tail call i8* @_Znwm(i64 %496) #13
  %498 = bitcast i8* %497 to %"struct.jxl::PropertyDecisionNode"*
  br label %499

499:                                              ; preds = %494, %489
  %500 = phi i64 [ %495, %494 ], [ 0, %489 ]
  %501 = phi %"struct.jxl::PropertyDecisionNode"* [ %498, %494 ], [ null, %489 ]
  %502 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %501, i64 %480
  %503 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %501, i64 %500
  %504 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %503 to i64
  %505 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %502, i64 0, i32 0
  store i32 0, i32* %505, align 8, !noalias !149
  %506 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %501, i64 %480, i32 1
  store i16 -1, i16* %506, align 4, !noalias !149
  %507 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %501, i64 %480, i32 3
  store i32 0, i32* %507, align 8, !noalias !149
  %508 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %501, i64 %480, i32 4
  store i32 0, i32* %508, align 4, !noalias !149
  %509 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %501, i64 %480, i32 5
  store i32 1, i32* %509, align 8, !noalias !149
  %510 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %501, i64 %480, i32 7
  store i64 0, i64* %510, align 8, !noalias !149
  %511 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %501, i64 %480, i32 8
  store i32 1, i32* %511, align 8, !noalias !149
  %512 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %502, i64 1
  %513 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %512 to i64
  %514 = sub i64 %460, %478
  %515 = sdiv exact i64 %514, -40
  %516 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %502, i64 %515
  %517 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %516 to i64
  %518 = icmp sgt i64 %514, 0
  br i1 %518, label %519, label %522

519:                                              ; preds = %499
  %520 = bitcast %"struct.jxl::PropertyDecisionNode"* %516 to i8*
  %521 = inttoptr i64 %478 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %520, i8* align 8 %521, i64 %514, i1 false) #10
  br label %522

522:                                              ; preds = %519, %499
  store i64 %517, i64* %126, align 8, !noalias !149
  store i64 %513, i64* %125, align 8, !noalias !149
  store i64 %504, i64* %127, align 8, !noalias !149
  %523 = icmp eq i64 %478, 0
  br i1 %523, label %526, label %524

524:                                              ; preds = %522
  %525 = inttoptr i64 %478 to i8*
  tail call void @_ZdlPv(i8* %525) #13
  br label %526

526:                                              ; preds = %524, %522, %464
  %527 = phi i64 [ %475, %464 ], [ %504, %522 ], [ %504, %524 ]
  %528 = phi i64 [ %473, %464 ], [ %513, %522 ], [ %513, %524 ]
  %529 = phi %"struct.jxl::PropertyDecisionNode"* [ %474, %464 ], [ %503, %522 ], [ %503, %524 ]
  %530 = phi %"struct.jxl::PropertyDecisionNode"* [ %472, %464 ], [ %512, %522 ], [ %512, %524 ]
  %531 = icmp ult %"struct.jxl::PropertyDecisionNode"* %530, %529
  br i1 %531, label %532, label %544

532:                                              ; preds = %526
  %533 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %530, i64 0, i32 0
  store i32 0, i32* %533, align 8, !noalias !149
  %534 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %530, i64 0, i32 1
  store i16 -1, i16* %534, align 4, !noalias !149
  %535 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %530, i64 0, i32 3
  store i32 0, i32* %535, align 8, !noalias !149
  %536 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %530, i64 0, i32 4
  store i32 0, i32* %536, align 4, !noalias !149
  %537 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %530, i64 0, i32 5
  store i32 1, i32* %537, align 8, !noalias !149
  %538 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %530, i64 0, i32 7
  store i64 0, i64* %538, align 8, !noalias !149
  %539 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %530, i64 0, i32 8
  store i32 1, i32* %539, align 8, !noalias !149
  %540 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %530, i64 1
  %541 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %540 to i64
  store i64 %541, i64* %125, align 8, !noalias !149
  %542 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %124, align 8, !noalias !149
  %543 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %542 to i64
  br label %594

544:                                              ; preds = %526
  %545 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %530 to i64
  %546 = load i64, i64* %126, align 8, !noalias !149
  %547 = sub i64 %545, %546
  %548 = sdiv exact i64 %547, 40
  %549 = add nsw i64 %548, 1
  %550 = icmp ugt i64 %549, 461168601842738790
  br i1 %550, label %551, label %553

551:                                              ; preds = %544
  %552 = bitcast %"class.std::__1::vector.52"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %552) #12
  unreachable

553:                                              ; preds = %544
  %554 = sub i64 %527, %546
  %555 = sdiv exact i64 %554, 40
  %556 = icmp ult i64 %555, 230584300921369395
  br i1 %556, label %557, label %562

557:                                              ; preds = %553
  %558 = shl nsw i64 %555, 1
  %559 = icmp ult i64 %558, %549
  %560 = select i1 %559, i64 %549, i64 %558
  %561 = icmp eq i64 %560, 0
  br i1 %561, label %567, label %562

562:                                              ; preds = %557, %553
  %563 = phi i64 [ %560, %557 ], [ 461168601842738790, %553 ]
  %564 = mul i64 %563, 40
  %565 = tail call i8* @_Znwm(i64 %564) #13
  %566 = bitcast i8* %565 to %"struct.jxl::PropertyDecisionNode"*
  br label %567

567:                                              ; preds = %562, %557
  %568 = phi i64 [ %563, %562 ], [ 0, %557 ]
  %569 = phi %"struct.jxl::PropertyDecisionNode"* [ %566, %562 ], [ null, %557 ]
  %570 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %569, i64 %548
  %571 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %569, i64 %568
  %572 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %571 to i64
  %573 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %570, i64 0, i32 0
  store i32 0, i32* %573, align 8, !noalias !149
  %574 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %569, i64 %548, i32 1
  store i16 -1, i16* %574, align 4, !noalias !149
  %575 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %569, i64 %548, i32 3
  store i32 0, i32* %575, align 8, !noalias !149
  %576 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %569, i64 %548, i32 4
  store i32 0, i32* %576, align 4, !noalias !149
  %577 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %569, i64 %548, i32 5
  store i32 1, i32* %577, align 8, !noalias !149
  %578 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %569, i64 %548, i32 7
  store i64 0, i64* %578, align 8, !noalias !149
  %579 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %569, i64 %548, i32 8
  store i32 1, i32* %579, align 8, !noalias !149
  %580 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %570, i64 1
  %581 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %580 to i64
  %582 = sub i64 %528, %546
  %583 = sdiv exact i64 %582, -40
  %584 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %570, i64 %583
  %585 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %584 to i64
  %586 = icmp sgt i64 %582, 0
  br i1 %586, label %587, label %590

587:                                              ; preds = %567
  %588 = bitcast %"struct.jxl::PropertyDecisionNode"* %584 to i8*
  %589 = inttoptr i64 %546 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %588, i8* align 8 %589, i64 %582, i1 false) #10
  br label %590

590:                                              ; preds = %587, %567
  store i64 %585, i64* %126, align 8, !noalias !149
  store i64 %581, i64* %125, align 8, !noalias !149
  store i64 %572, i64* %127, align 8, !noalias !149
  %591 = icmp eq i64 %546, 0
  br i1 %591, label %594, label %592

592:                                              ; preds = %590
  %593 = inttoptr i64 %546 to i8*
  tail call void @_ZdlPv(i8* %593) #13
  br label %594

594:                                              ; preds = %592, %590, %532
  %595 = phi i64 [ %543, %532 ], [ %572, %590 ], [ %572, %592 ]
  %596 = phi i64 [ %541, %532 ], [ %581, %590 ], [ %581, %592 ]
  %597 = phi %"struct.jxl::PropertyDecisionNode"* [ %542, %532 ], [ %571, %590 ], [ %571, %592 ]
  %598 = phi %"struct.jxl::PropertyDecisionNode"* [ %540, %532 ], [ %580, %590 ], [ %580, %592 ]
  %599 = icmp ult %"struct.jxl::PropertyDecisionNode"* %598, %597
  br i1 %599, label %600, label %612

600:                                              ; preds = %594
  %601 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %598, i64 0, i32 0
  store i32 0, i32* %601, align 8, !noalias !149
  %602 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %598, i64 0, i32 1
  store i16 -1, i16* %602, align 4, !noalias !149
  %603 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %598, i64 0, i32 3
  store i32 0, i32* %603, align 8, !noalias !149
  %604 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %598, i64 0, i32 4
  store i32 0, i32* %604, align 4, !noalias !149
  %605 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %598, i64 0, i32 5
  store i32 1, i32* %605, align 8, !noalias !149
  %606 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %598, i64 0, i32 7
  store i64 0, i64* %606, align 8, !noalias !149
  %607 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %598, i64 0, i32 8
  store i32 1, i32* %607, align 8, !noalias !149
  %608 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %598, i64 1
  %609 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %608 to i64
  store i64 %609, i64* %125, align 8, !noalias !149
  %610 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %124, align 8, !noalias !149
  %611 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %610 to i64
  br label %662

612:                                              ; preds = %594
  %613 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %598 to i64
  %614 = load i64, i64* %126, align 8, !noalias !149
  %615 = sub i64 %613, %614
  %616 = sdiv exact i64 %615, 40
  %617 = add nsw i64 %616, 1
  %618 = icmp ugt i64 %617, 461168601842738790
  br i1 %618, label %619, label %621

619:                                              ; preds = %612
  %620 = bitcast %"class.std::__1::vector.52"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %620) #12
  unreachable

621:                                              ; preds = %612
  %622 = sub i64 %595, %614
  %623 = sdiv exact i64 %622, 40
  %624 = icmp ult i64 %623, 230584300921369395
  br i1 %624, label %625, label %630

625:                                              ; preds = %621
  %626 = shl nsw i64 %623, 1
  %627 = icmp ult i64 %626, %617
  %628 = select i1 %627, i64 %617, i64 %626
  %629 = icmp eq i64 %628, 0
  br i1 %629, label %635, label %630

630:                                              ; preds = %625, %621
  %631 = phi i64 [ %628, %625 ], [ 461168601842738790, %621 ]
  %632 = mul i64 %631, 40
  %633 = tail call i8* @_Znwm(i64 %632) #13
  %634 = bitcast i8* %633 to %"struct.jxl::PropertyDecisionNode"*
  br label %635

635:                                              ; preds = %630, %625
  %636 = phi i64 [ %631, %630 ], [ 0, %625 ]
  %637 = phi %"struct.jxl::PropertyDecisionNode"* [ %634, %630 ], [ null, %625 ]
  %638 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %637, i64 %616
  %639 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %637, i64 %636
  %640 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %639 to i64
  %641 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %638, i64 0, i32 0
  store i32 0, i32* %641, align 8, !noalias !149
  %642 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %637, i64 %616, i32 1
  store i16 -1, i16* %642, align 4, !noalias !149
  %643 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %637, i64 %616, i32 3
  store i32 0, i32* %643, align 8, !noalias !149
  %644 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %637, i64 %616, i32 4
  store i32 0, i32* %644, align 4, !noalias !149
  %645 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %637, i64 %616, i32 5
  store i32 1, i32* %645, align 8, !noalias !149
  %646 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %637, i64 %616, i32 7
  store i64 0, i64* %646, align 8, !noalias !149
  %647 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %637, i64 %616, i32 8
  store i32 1, i32* %647, align 8, !noalias !149
  %648 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %638, i64 1
  %649 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %648 to i64
  %650 = sub i64 %596, %614
  %651 = sdiv exact i64 %650, -40
  %652 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %638, i64 %651
  %653 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %652 to i64
  %654 = icmp sgt i64 %650, 0
  br i1 %654, label %655, label %658

655:                                              ; preds = %635
  %656 = bitcast %"struct.jxl::PropertyDecisionNode"* %652 to i8*
  %657 = inttoptr i64 %614 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %656, i8* align 8 %657, i64 %650, i1 false) #10
  br label %658

658:                                              ; preds = %655, %635
  store i64 %653, i64* %126, align 8, !noalias !149
  store i64 %649, i64* %125, align 8, !noalias !149
  store i64 %640, i64* %127, align 8, !noalias !149
  %659 = icmp eq i64 %614, 0
  br i1 %659, label %662, label %660

660:                                              ; preds = %658
  %661 = inttoptr i64 %614 to i8*
  tail call void @_ZdlPv(i8* %661) #13
  br label %662

662:                                              ; preds = %660, %658, %600
  %663 = phi i64 [ %611, %600 ], [ %640, %658 ], [ %640, %660 ]
  %664 = phi i64 [ %609, %600 ], [ %649, %658 ], [ %649, %660 ]
  %665 = phi %"struct.jxl::PropertyDecisionNode"* [ %610, %600 ], [ %639, %658 ], [ %639, %660 ]
  %666 = phi %"struct.jxl::PropertyDecisionNode"* [ %608, %600 ], [ %648, %658 ], [ %648, %660 ]
  %667 = icmp ult %"struct.jxl::PropertyDecisionNode"* %666, %665
  br i1 %667, label %668, label %680

668:                                              ; preds = %662
  %669 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %666, i64 0, i32 0
  store i32 0, i32* %669, align 8, !noalias !149
  %670 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %666, i64 0, i32 1
  store i16 -1, i16* %670, align 4, !noalias !149
  %671 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %666, i64 0, i32 3
  store i32 0, i32* %671, align 8, !noalias !149
  %672 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %666, i64 0, i32 4
  store i32 0, i32* %672, align 4, !noalias !149
  %673 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %666, i64 0, i32 5
  store i32 1, i32* %673, align 8, !noalias !149
  %674 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %666, i64 0, i32 7
  store i64 0, i64* %674, align 8, !noalias !149
  %675 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %666, i64 0, i32 8
  store i32 1, i32* %675, align 8, !noalias !149
  %676 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %666, i64 1
  %677 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %676 to i64
  store i64 %677, i64* %125, align 8, !noalias !149
  %678 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %124, align 8, !noalias !149
  %679 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %678 to i64
  br label %730

680:                                              ; preds = %662
  %681 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %666 to i64
  %682 = load i64, i64* %126, align 8, !noalias !149
  %683 = sub i64 %681, %682
  %684 = sdiv exact i64 %683, 40
  %685 = add nsw i64 %684, 1
  %686 = icmp ugt i64 %685, 461168601842738790
  br i1 %686, label %687, label %689

687:                                              ; preds = %680
  %688 = bitcast %"class.std::__1::vector.52"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %688) #12
  unreachable

689:                                              ; preds = %680
  %690 = sub i64 %663, %682
  %691 = sdiv exact i64 %690, 40
  %692 = icmp ult i64 %691, 230584300921369395
  br i1 %692, label %693, label %698

693:                                              ; preds = %689
  %694 = shl nsw i64 %691, 1
  %695 = icmp ult i64 %694, %685
  %696 = select i1 %695, i64 %685, i64 %694
  %697 = icmp eq i64 %696, 0
  br i1 %697, label %703, label %698

698:                                              ; preds = %693, %689
  %699 = phi i64 [ %696, %693 ], [ 461168601842738790, %689 ]
  %700 = mul i64 %699, 40
  %701 = tail call i8* @_Znwm(i64 %700) #13
  %702 = bitcast i8* %701 to %"struct.jxl::PropertyDecisionNode"*
  br label %703

703:                                              ; preds = %698, %693
  %704 = phi i64 [ %699, %698 ], [ 0, %693 ]
  %705 = phi %"struct.jxl::PropertyDecisionNode"* [ %702, %698 ], [ null, %693 ]
  %706 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %705, i64 %684
  %707 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %705, i64 %704
  %708 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %707 to i64
  %709 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %706, i64 0, i32 0
  store i32 0, i32* %709, align 8, !noalias !149
  %710 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %705, i64 %684, i32 1
  store i16 -1, i16* %710, align 4, !noalias !149
  %711 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %705, i64 %684, i32 3
  store i32 0, i32* %711, align 8, !noalias !149
  %712 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %705, i64 %684, i32 4
  store i32 0, i32* %712, align 4, !noalias !149
  %713 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %705, i64 %684, i32 5
  store i32 1, i32* %713, align 8, !noalias !149
  %714 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %705, i64 %684, i32 7
  store i64 0, i64* %714, align 8, !noalias !149
  %715 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %705, i64 %684, i32 8
  store i32 1, i32* %715, align 8, !noalias !149
  %716 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %706, i64 1
  %717 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %716 to i64
  %718 = sub i64 %664, %682
  %719 = sdiv exact i64 %718, -40
  %720 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %706, i64 %719
  %721 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %720 to i64
  %722 = icmp sgt i64 %718, 0
  br i1 %722, label %723, label %726

723:                                              ; preds = %703
  %724 = bitcast %"struct.jxl::PropertyDecisionNode"* %720 to i8*
  %725 = inttoptr i64 %682 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %724, i8* align 8 %725, i64 %718, i1 false) #10
  br label %726

726:                                              ; preds = %723, %703
  store i64 %721, i64* %126, align 8, !noalias !149
  store i64 %717, i64* %125, align 8, !noalias !149
  store i64 %708, i64* %127, align 8, !noalias !149
  %727 = icmp eq i64 %682, 0
  br i1 %727, label %730, label %728

728:                                              ; preds = %726
  %729 = inttoptr i64 %682 to i8*
  tail call void @_ZdlPv(i8* %729) #13
  br label %730

730:                                              ; preds = %728, %726, %668
  %731 = phi i64 [ %679, %668 ], [ %708, %726 ], [ %708, %728 ]
  %732 = phi i64 [ %677, %668 ], [ %717, %726 ], [ %717, %728 ]
  %733 = phi %"struct.jxl::PropertyDecisionNode"* [ %678, %668 ], [ %707, %726 ], [ %707, %728 ]
  %734 = phi %"struct.jxl::PropertyDecisionNode"* [ %676, %668 ], [ %716, %726 ], [ %716, %728 ]
  %735 = icmp ult %"struct.jxl::PropertyDecisionNode"* %734, %733
  br i1 %735, label %736, label %748

736:                                              ; preds = %730
  %737 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %734, i64 0, i32 0
  store i32 11, i32* %737, align 8, !noalias !149
  %738 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %734, i64 0, i32 1
  store i16 7, i16* %738, align 4, !noalias !149
  %739 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %734, i64 0, i32 3
  store i32 17, i32* %739, align 8, !noalias !149
  %740 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %734, i64 0, i32 4
  store i32 18, i32* %740, align 4, !noalias !149
  %741 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %734, i64 0, i32 5
  store i32 0, i32* %741, align 8, !noalias !149
  %742 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %734, i64 0, i32 7
  store i64 0, i64* %742, align 8, !noalias !149
  %743 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %734, i64 0, i32 8
  store i32 1, i32* %743, align 8, !noalias !149
  %744 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %734, i64 1
  %745 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %744 to i64
  store i64 %745, i64* %125, align 8, !noalias !149
  %746 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %124, align 8, !noalias !149
  %747 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %746 to i64
  br label %798

748:                                              ; preds = %730
  %749 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %734 to i64
  %750 = load i64, i64* %126, align 8, !noalias !149
  %751 = sub i64 %749, %750
  %752 = sdiv exact i64 %751, 40
  %753 = add nsw i64 %752, 1
  %754 = icmp ugt i64 %753, 461168601842738790
  br i1 %754, label %755, label %757

755:                                              ; preds = %748
  %756 = bitcast %"class.std::__1::vector.52"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %756) #12
  unreachable

757:                                              ; preds = %748
  %758 = sub i64 %731, %750
  %759 = sdiv exact i64 %758, 40
  %760 = icmp ult i64 %759, 230584300921369395
  br i1 %760, label %761, label %766

761:                                              ; preds = %757
  %762 = shl nsw i64 %759, 1
  %763 = icmp ult i64 %762, %753
  %764 = select i1 %763, i64 %753, i64 %762
  %765 = icmp eq i64 %764, 0
  br i1 %765, label %771, label %766

766:                                              ; preds = %761, %757
  %767 = phi i64 [ %764, %761 ], [ 461168601842738790, %757 ]
  %768 = mul i64 %767, 40
  %769 = tail call i8* @_Znwm(i64 %768) #13
  %770 = bitcast i8* %769 to %"struct.jxl::PropertyDecisionNode"*
  br label %771

771:                                              ; preds = %766, %761
  %772 = phi i64 [ %767, %766 ], [ 0, %761 ]
  %773 = phi %"struct.jxl::PropertyDecisionNode"* [ %770, %766 ], [ null, %761 ]
  %774 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %773, i64 %752
  %775 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %773, i64 %772
  %776 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %775 to i64
  %777 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %774, i64 0, i32 0
  store i32 11, i32* %777, align 8, !noalias !149
  %778 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %773, i64 %752, i32 1
  store i16 7, i16* %778, align 4, !noalias !149
  %779 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %773, i64 %752, i32 3
  store i32 17, i32* %779, align 8, !noalias !149
  %780 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %773, i64 %752, i32 4
  store i32 18, i32* %780, align 4, !noalias !149
  %781 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %773, i64 %752, i32 5
  store i32 0, i32* %781, align 8, !noalias !149
  %782 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %773, i64 %752, i32 7
  store i64 0, i64* %782, align 8, !noalias !149
  %783 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %773, i64 %752, i32 8
  store i32 1, i32* %783, align 8, !noalias !149
  %784 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %774, i64 1
  %785 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %784 to i64
  %786 = sub i64 %732, %750
  %787 = sdiv exact i64 %786, -40
  %788 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %774, i64 %787
  %789 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %788 to i64
  %790 = icmp sgt i64 %786, 0
  br i1 %790, label %791, label %794

791:                                              ; preds = %771
  %792 = bitcast %"struct.jxl::PropertyDecisionNode"* %788 to i8*
  %793 = inttoptr i64 %750 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %792, i8* align 8 %793, i64 %786, i1 false) #10
  br label %794

794:                                              ; preds = %791, %771
  store i64 %789, i64* %126, align 8, !noalias !149
  store i64 %785, i64* %125, align 8, !noalias !149
  store i64 %776, i64* %127, align 8, !noalias !149
  %795 = icmp eq i64 %750, 0
  br i1 %795, label %798, label %796

796:                                              ; preds = %794
  %797 = inttoptr i64 %750 to i8*
  tail call void @_ZdlPv(i8* %797) #13
  br label %798

798:                                              ; preds = %796, %794, %736
  %799 = phi i64 [ %747, %736 ], [ %776, %794 ], [ %776, %796 ]
  %800 = phi i64 [ %745, %736 ], [ %785, %794 ], [ %785, %796 ]
  %801 = phi %"struct.jxl::PropertyDecisionNode"* [ %746, %736 ], [ %775, %794 ], [ %775, %796 ]
  %802 = phi %"struct.jxl::PropertyDecisionNode"* [ %744, %736 ], [ %784, %794 ], [ %784, %796 ]
  %803 = icmp ult %"struct.jxl::PropertyDecisionNode"* %802, %801
  br i1 %803, label %804, label %816

804:                                              ; preds = %798
  %805 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %802, i64 0, i32 0
  store i32 3, i32* %805, align 8, !noalias !149
  %806 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %802, i64 0, i32 1
  store i16 7, i16* %806, align 4, !noalias !149
  %807 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %802, i64 0, i32 3
  store i32 19, i32* %807, align 8, !noalias !149
  %808 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %802, i64 0, i32 4
  store i32 20, i32* %808, align 4, !noalias !149
  %809 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %802, i64 0, i32 5
  store i32 0, i32* %809, align 8, !noalias !149
  %810 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %802, i64 0, i32 7
  store i64 0, i64* %810, align 8, !noalias !149
  %811 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %802, i64 0, i32 8
  store i32 1, i32* %811, align 8, !noalias !149
  %812 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %802, i64 1
  %813 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %812 to i64
  store i64 %813, i64* %125, align 8, !noalias !149
  %814 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %124, align 8, !noalias !149
  %815 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %814 to i64
  br label %866

816:                                              ; preds = %798
  %817 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %802 to i64
  %818 = load i64, i64* %126, align 8, !noalias !149
  %819 = sub i64 %817, %818
  %820 = sdiv exact i64 %819, 40
  %821 = add nsw i64 %820, 1
  %822 = icmp ugt i64 %821, 461168601842738790
  br i1 %822, label %823, label %825

823:                                              ; preds = %816
  %824 = bitcast %"class.std::__1::vector.52"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %824) #12
  unreachable

825:                                              ; preds = %816
  %826 = sub i64 %799, %818
  %827 = sdiv exact i64 %826, 40
  %828 = icmp ult i64 %827, 230584300921369395
  br i1 %828, label %829, label %834

829:                                              ; preds = %825
  %830 = shl nsw i64 %827, 1
  %831 = icmp ult i64 %830, %821
  %832 = select i1 %831, i64 %821, i64 %830
  %833 = icmp eq i64 %832, 0
  br i1 %833, label %839, label %834

834:                                              ; preds = %829, %825
  %835 = phi i64 [ %832, %829 ], [ 461168601842738790, %825 ]
  %836 = mul i64 %835, 40
  %837 = tail call i8* @_Znwm(i64 %836) #13
  %838 = bitcast i8* %837 to %"struct.jxl::PropertyDecisionNode"*
  br label %839

839:                                              ; preds = %834, %829
  %840 = phi i64 [ %835, %834 ], [ 0, %829 ]
  %841 = phi %"struct.jxl::PropertyDecisionNode"* [ %838, %834 ], [ null, %829 ]
  %842 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %841, i64 %820
  %843 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %841, i64 %840
  %844 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %843 to i64
  %845 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %842, i64 0, i32 0
  store i32 3, i32* %845, align 8, !noalias !149
  %846 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %841, i64 %820, i32 1
  store i16 7, i16* %846, align 4, !noalias !149
  %847 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %841, i64 %820, i32 3
  store i32 19, i32* %847, align 8, !noalias !149
  %848 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %841, i64 %820, i32 4
  store i32 20, i32* %848, align 4, !noalias !149
  %849 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %841, i64 %820, i32 5
  store i32 0, i32* %849, align 8, !noalias !149
  %850 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %841, i64 %820, i32 7
  store i64 0, i64* %850, align 8, !noalias !149
  %851 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %841, i64 %820, i32 8
  store i32 1, i32* %851, align 8, !noalias !149
  %852 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %842, i64 1
  %853 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %852 to i64
  %854 = sub i64 %800, %818
  %855 = sdiv exact i64 %854, -40
  %856 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %842, i64 %855
  %857 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %856 to i64
  %858 = icmp sgt i64 %854, 0
  br i1 %858, label %859, label %862

859:                                              ; preds = %839
  %860 = bitcast %"struct.jxl::PropertyDecisionNode"* %856 to i8*
  %861 = inttoptr i64 %818 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %860, i8* align 8 %861, i64 %854, i1 false) #10
  br label %862

862:                                              ; preds = %859, %839
  store i64 %857, i64* %126, align 8, !noalias !149
  store i64 %853, i64* %125, align 8, !noalias !149
  store i64 %844, i64* %127, align 8, !noalias !149
  %863 = icmp eq i64 %818, 0
  br i1 %863, label %866, label %864

864:                                              ; preds = %862
  %865 = inttoptr i64 %818 to i8*
  tail call void @_ZdlPv(i8* %865) #13
  br label %866

866:                                              ; preds = %864, %862, %804
  %867 = phi i64 [ %815, %804 ], [ %844, %862 ], [ %844, %864 ]
  %868 = phi i64 [ %813, %804 ], [ %853, %862 ], [ %853, %864 ]
  %869 = phi %"struct.jxl::PropertyDecisionNode"* [ %814, %804 ], [ %843, %862 ], [ %843, %864 ]
  %870 = phi %"struct.jxl::PropertyDecisionNode"* [ %812, %804 ], [ %852, %862 ], [ %852, %864 ]
  %871 = icmp ult %"struct.jxl::PropertyDecisionNode"* %870, %869
  br i1 %871, label %872, label %884

872:                                              ; preds = %866
  %873 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %870, i64 0, i32 0
  store i32 0, i32* %873, align 8, !noalias !149
  %874 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %870, i64 0, i32 1
  store i16 -1, i16* %874, align 4, !noalias !149
  %875 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %870, i64 0, i32 3
  store i32 0, i32* %875, align 8, !noalias !149
  %876 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %870, i64 0, i32 4
  store i32 0, i32* %876, align 4, !noalias !149
  %877 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %870, i64 0, i32 5
  store i32 0, i32* %877, align 8, !noalias !149
  %878 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %870, i64 0, i32 7
  store i64 0, i64* %878, align 8, !noalias !149
  %879 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %870, i64 0, i32 8
  store i32 1, i32* %879, align 8, !noalias !149
  %880 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %870, i64 1
  %881 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %880 to i64
  store i64 %881, i64* %125, align 8, !noalias !149
  %882 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %124, align 8, !noalias !149
  %883 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %882 to i64
  br label %934

884:                                              ; preds = %866
  %885 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %870 to i64
  %886 = load i64, i64* %126, align 8, !noalias !149
  %887 = sub i64 %885, %886
  %888 = sdiv exact i64 %887, 40
  %889 = add nsw i64 %888, 1
  %890 = icmp ugt i64 %889, 461168601842738790
  br i1 %890, label %891, label %893

891:                                              ; preds = %884
  %892 = bitcast %"class.std::__1::vector.52"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %892) #12
  unreachable

893:                                              ; preds = %884
  %894 = sub i64 %867, %886
  %895 = sdiv exact i64 %894, 40
  %896 = icmp ult i64 %895, 230584300921369395
  br i1 %896, label %897, label %902

897:                                              ; preds = %893
  %898 = shl nsw i64 %895, 1
  %899 = icmp ult i64 %898, %889
  %900 = select i1 %899, i64 %889, i64 %898
  %901 = icmp eq i64 %900, 0
  br i1 %901, label %907, label %902

902:                                              ; preds = %897, %893
  %903 = phi i64 [ %900, %897 ], [ 461168601842738790, %893 ]
  %904 = mul i64 %903, 40
  %905 = tail call i8* @_Znwm(i64 %904) #13
  %906 = bitcast i8* %905 to %"struct.jxl::PropertyDecisionNode"*
  br label %907

907:                                              ; preds = %902, %897
  %908 = phi i64 [ %903, %902 ], [ 0, %897 ]
  %909 = phi %"struct.jxl::PropertyDecisionNode"* [ %906, %902 ], [ null, %897 ]
  %910 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %909, i64 %888
  %911 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %909, i64 %908
  %912 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %911 to i64
  %913 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %910, i64 0, i32 0
  store i32 0, i32* %913, align 8, !noalias !149
  %914 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %909, i64 %888, i32 1
  store i16 -1, i16* %914, align 4, !noalias !149
  %915 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %909, i64 %888, i32 3
  store i32 0, i32* %915, align 8, !noalias !149
  %916 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %909, i64 %888, i32 4
  store i32 0, i32* %916, align 4, !noalias !149
  %917 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %909, i64 %888, i32 5
  store i32 0, i32* %917, align 8, !noalias !149
  %918 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %909, i64 %888, i32 7
  store i64 0, i64* %918, align 8, !noalias !149
  %919 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %909, i64 %888, i32 8
  store i32 1, i32* %919, align 8, !noalias !149
  %920 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %910, i64 1
  %921 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %920 to i64
  %922 = sub i64 %868, %886
  %923 = sdiv exact i64 %922, -40
  %924 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %910, i64 %923
  %925 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %924 to i64
  %926 = icmp sgt i64 %922, 0
  br i1 %926, label %927, label %930

927:                                              ; preds = %907
  %928 = bitcast %"struct.jxl::PropertyDecisionNode"* %924 to i8*
  %929 = inttoptr i64 %886 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %928, i8* align 8 %929, i64 %922, i1 false) #10
  br label %930

930:                                              ; preds = %927, %907
  store i64 %925, i64* %126, align 8, !noalias !149
  store i64 %921, i64* %125, align 8, !noalias !149
  store i64 %912, i64* %127, align 8, !noalias !149
  %931 = icmp eq i64 %886, 0
  br i1 %931, label %934, label %932

932:                                              ; preds = %930
  %933 = inttoptr i64 %886 to i8*
  tail call void @_ZdlPv(i8* %933) #13
  br label %934

934:                                              ; preds = %932, %930, %872
  %935 = phi i64 [ %883, %872 ], [ %912, %930 ], [ %912, %932 ]
  %936 = phi i64 [ %881, %872 ], [ %921, %930 ], [ %921, %932 ]
  %937 = phi %"struct.jxl::PropertyDecisionNode"* [ %882, %872 ], [ %911, %930 ], [ %911, %932 ]
  %938 = phi %"struct.jxl::PropertyDecisionNode"* [ %880, %872 ], [ %920, %930 ], [ %920, %932 ]
  %939 = icmp ult %"struct.jxl::PropertyDecisionNode"* %938, %937
  br i1 %939, label %940, label %952

940:                                              ; preds = %934
  %941 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %938, i64 0, i32 0
  store i32 0, i32* %941, align 8, !noalias !149
  %942 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %938, i64 0, i32 1
  store i16 -1, i16* %942, align 4, !noalias !149
  %943 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %938, i64 0, i32 3
  store i32 0, i32* %943, align 8, !noalias !149
  %944 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %938, i64 0, i32 4
  store i32 0, i32* %944, align 4, !noalias !149
  %945 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %938, i64 0, i32 5
  store i32 0, i32* %945, align 8, !noalias !149
  %946 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %938, i64 0, i32 7
  store i64 0, i64* %946, align 8, !noalias !149
  %947 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %938, i64 0, i32 8
  store i32 1, i32* %947, align 8, !noalias !149
  %948 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %938, i64 1
  %949 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %948 to i64
  store i64 %949, i64* %125, align 8, !noalias !149
  %950 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %124, align 8, !noalias !149
  %951 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %950 to i64
  br label %1002

952:                                              ; preds = %934
  %953 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %938 to i64
  %954 = load i64, i64* %126, align 8, !noalias !149
  %955 = sub i64 %953, %954
  %956 = sdiv exact i64 %955, 40
  %957 = add nsw i64 %956, 1
  %958 = icmp ugt i64 %957, 461168601842738790
  br i1 %958, label %959, label %961

959:                                              ; preds = %952
  %960 = bitcast %"class.std::__1::vector.52"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %960) #12
  unreachable

961:                                              ; preds = %952
  %962 = sub i64 %935, %954
  %963 = sdiv exact i64 %962, 40
  %964 = icmp ult i64 %963, 230584300921369395
  br i1 %964, label %965, label %970

965:                                              ; preds = %961
  %966 = shl nsw i64 %963, 1
  %967 = icmp ult i64 %966, %957
  %968 = select i1 %967, i64 %957, i64 %966
  %969 = icmp eq i64 %968, 0
  br i1 %969, label %975, label %970

970:                                              ; preds = %965, %961
  %971 = phi i64 [ %968, %965 ], [ 461168601842738790, %961 ]
  %972 = mul i64 %971, 40
  %973 = tail call i8* @_Znwm(i64 %972) #13
  %974 = bitcast i8* %973 to %"struct.jxl::PropertyDecisionNode"*
  br label %975

975:                                              ; preds = %970, %965
  %976 = phi i64 [ %971, %970 ], [ 0, %965 ]
  %977 = phi %"struct.jxl::PropertyDecisionNode"* [ %974, %970 ], [ null, %965 ]
  %978 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %977, i64 %956
  %979 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %977, i64 %976
  %980 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %979 to i64
  %981 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %978, i64 0, i32 0
  store i32 0, i32* %981, align 8, !noalias !149
  %982 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %977, i64 %956, i32 1
  store i16 -1, i16* %982, align 4, !noalias !149
  %983 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %977, i64 %956, i32 3
  store i32 0, i32* %983, align 8, !noalias !149
  %984 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %977, i64 %956, i32 4
  store i32 0, i32* %984, align 4, !noalias !149
  %985 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %977, i64 %956, i32 5
  store i32 0, i32* %985, align 8, !noalias !149
  %986 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %977, i64 %956, i32 7
  store i64 0, i64* %986, align 8, !noalias !149
  %987 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %977, i64 %956, i32 8
  store i32 1, i32* %987, align 8, !noalias !149
  %988 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %978, i64 1
  %989 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %988 to i64
  %990 = sub i64 %936, %954
  %991 = sdiv exact i64 %990, -40
  %992 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %978, i64 %991
  %993 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %992 to i64
  %994 = icmp sgt i64 %990, 0
  br i1 %994, label %995, label %998

995:                                              ; preds = %975
  %996 = bitcast %"struct.jxl::PropertyDecisionNode"* %992 to i8*
  %997 = inttoptr i64 %954 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %996, i8* align 8 %997, i64 %990, i1 false) #10
  br label %998

998:                                              ; preds = %995, %975
  store i64 %993, i64* %126, align 8, !noalias !149
  store i64 %989, i64* %125, align 8, !noalias !149
  store i64 %980, i64* %127, align 8, !noalias !149
  %999 = icmp eq i64 %954, 0
  br i1 %999, label %1002, label %1000

1000:                                             ; preds = %998
  %1001 = inttoptr i64 %954 to i8*
  tail call void @_ZdlPv(i8* %1001) #13
  br label %1002

1002:                                             ; preds = %1000, %998, %940
  %1003 = phi i64 [ %951, %940 ], [ %980, %998 ], [ %980, %1000 ]
  %1004 = phi i64 [ %949, %940 ], [ %989, %998 ], [ %989, %1000 ]
  %1005 = phi %"struct.jxl::PropertyDecisionNode"* [ %950, %940 ], [ %979, %998 ], [ %979, %1000 ]
  %1006 = phi %"struct.jxl::PropertyDecisionNode"* [ %948, %940 ], [ %988, %998 ], [ %988, %1000 ]
  %1007 = icmp ult %"struct.jxl::PropertyDecisionNode"* %1006, %1005
  br i1 %1007, label %1008, label %1020

1008:                                             ; preds = %1002
  %1009 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1006, i64 0, i32 0
  store i32 0, i32* %1009, align 8, !noalias !149
  %1010 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1006, i64 0, i32 1
  store i16 -1, i16* %1010, align 4, !noalias !149
  %1011 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1006, i64 0, i32 3
  store i32 0, i32* %1011, align 8, !noalias !149
  %1012 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1006, i64 0, i32 4
  store i32 0, i32* %1012, align 4, !noalias !149
  %1013 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1006, i64 0, i32 5
  store i32 0, i32* %1013, align 8, !noalias !149
  %1014 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1006, i64 0, i32 7
  store i64 0, i64* %1014, align 8, !noalias !149
  %1015 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1006, i64 0, i32 8
  store i32 1, i32* %1015, align 8, !noalias !149
  %1016 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1006, i64 1
  %1017 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1016 to i64
  store i64 %1017, i64* %125, align 8, !noalias !149
  %1018 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %124, align 8, !noalias !149
  %1019 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1018 to i64
  br label %1070

1020:                                             ; preds = %1002
  %1021 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1006 to i64
  %1022 = load i64, i64* %126, align 8, !noalias !149
  %1023 = sub i64 %1021, %1022
  %1024 = sdiv exact i64 %1023, 40
  %1025 = add nsw i64 %1024, 1
  %1026 = icmp ugt i64 %1025, 461168601842738790
  br i1 %1026, label %1027, label %1029

1027:                                             ; preds = %1020
  %1028 = bitcast %"class.std::__1::vector.52"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1028) #12
  unreachable

1029:                                             ; preds = %1020
  %1030 = sub i64 %1003, %1022
  %1031 = sdiv exact i64 %1030, 40
  %1032 = icmp ult i64 %1031, 230584300921369395
  br i1 %1032, label %1033, label %1038

1033:                                             ; preds = %1029
  %1034 = shl nsw i64 %1031, 1
  %1035 = icmp ult i64 %1034, %1025
  %1036 = select i1 %1035, i64 %1025, i64 %1034
  %1037 = icmp eq i64 %1036, 0
  br i1 %1037, label %1043, label %1038

1038:                                             ; preds = %1033, %1029
  %1039 = phi i64 [ %1036, %1033 ], [ 461168601842738790, %1029 ]
  %1040 = mul i64 %1039, 40
  %1041 = tail call i8* @_Znwm(i64 %1040) #13
  %1042 = bitcast i8* %1041 to %"struct.jxl::PropertyDecisionNode"*
  br label %1043

1043:                                             ; preds = %1038, %1033
  %1044 = phi i64 [ %1039, %1038 ], [ 0, %1033 ]
  %1045 = phi %"struct.jxl::PropertyDecisionNode"* [ %1042, %1038 ], [ null, %1033 ]
  %1046 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1045, i64 %1024
  %1047 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1045, i64 %1044
  %1048 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1047 to i64
  %1049 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1046, i64 0, i32 0
  store i32 0, i32* %1049, align 8, !noalias !149
  %1050 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1045, i64 %1024, i32 1
  store i16 -1, i16* %1050, align 4, !noalias !149
  %1051 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1045, i64 %1024, i32 3
  store i32 0, i32* %1051, align 8, !noalias !149
  %1052 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1045, i64 %1024, i32 4
  store i32 0, i32* %1052, align 4, !noalias !149
  %1053 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1045, i64 %1024, i32 5
  store i32 0, i32* %1053, align 8, !noalias !149
  %1054 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1045, i64 %1024, i32 7
  store i64 0, i64* %1054, align 8, !noalias !149
  %1055 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1045, i64 %1024, i32 8
  store i32 1, i32* %1055, align 8, !noalias !149
  %1056 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1046, i64 1
  %1057 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1056 to i64
  %1058 = sub i64 %1004, %1022
  %1059 = sdiv exact i64 %1058, -40
  %1060 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1046, i64 %1059
  %1061 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1060 to i64
  %1062 = icmp sgt i64 %1058, 0
  br i1 %1062, label %1063, label %1066

1063:                                             ; preds = %1043
  %1064 = bitcast %"struct.jxl::PropertyDecisionNode"* %1060 to i8*
  %1065 = inttoptr i64 %1022 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1064, i8* align 8 %1065, i64 %1058, i1 false) #10
  br label %1066

1066:                                             ; preds = %1063, %1043
  store i64 %1061, i64* %126, align 8, !noalias !149
  store i64 %1057, i64* %125, align 8, !noalias !149
  store i64 %1048, i64* %127, align 8, !noalias !149
  %1067 = icmp eq i64 %1022, 0
  br i1 %1067, label %1070, label %1068

1068:                                             ; preds = %1066
  %1069 = inttoptr i64 %1022 to i8*
  tail call void @_ZdlPv(i8* %1069) #13
  br label %1070

1070:                                             ; preds = %1068, %1066, %1008
  %1071 = phi i64 [ %1019, %1008 ], [ %1048, %1066 ], [ %1048, %1068 ]
  %1072 = phi i64 [ %1017, %1008 ], [ %1057, %1066 ], [ %1057, %1068 ]
  %1073 = phi %"struct.jxl::PropertyDecisionNode"* [ %1018, %1008 ], [ %1047, %1066 ], [ %1047, %1068 ]
  %1074 = phi %"struct.jxl::PropertyDecisionNode"* [ %1016, %1008 ], [ %1056, %1066 ], [ %1056, %1068 ]
  %1075 = icmp ult %"struct.jxl::PropertyDecisionNode"* %1074, %1073
  br i1 %1075, label %1076, label %1088

1076:                                             ; preds = %1070
  %1077 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1074, i64 0, i32 0
  store i32 0, i32* %1077, align 8, !noalias !149
  %1078 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1074, i64 0, i32 1
  store i16 -1, i16* %1078, align 4, !noalias !149
  %1079 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1074, i64 0, i32 3
  store i32 0, i32* %1079, align 8, !noalias !149
  %1080 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1074, i64 0, i32 4
  store i32 0, i32* %1080, align 4, !noalias !149
  %1081 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1074, i64 0, i32 5
  store i32 0, i32* %1081, align 8, !noalias !149
  %1082 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1074, i64 0, i32 7
  store i64 0, i64* %1082, align 8, !noalias !149
  %1083 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1074, i64 0, i32 8
  store i32 1, i32* %1083, align 8, !noalias !149
  %1084 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1074, i64 1
  %1085 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1084 to i64
  store i64 %1085, i64* %125, align 8, !noalias !149
  %1086 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %124, align 8, !noalias !149
  %1087 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1086 to i64
  br label %1138

1088:                                             ; preds = %1070
  %1089 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1074 to i64
  %1090 = load i64, i64* %126, align 8, !noalias !149
  %1091 = sub i64 %1089, %1090
  %1092 = sdiv exact i64 %1091, 40
  %1093 = add nsw i64 %1092, 1
  %1094 = icmp ugt i64 %1093, 461168601842738790
  br i1 %1094, label %1095, label %1097

1095:                                             ; preds = %1088
  %1096 = bitcast %"class.std::__1::vector.52"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1096) #12
  unreachable

1097:                                             ; preds = %1088
  %1098 = sub i64 %1071, %1090
  %1099 = sdiv exact i64 %1098, 40
  %1100 = icmp ult i64 %1099, 230584300921369395
  br i1 %1100, label %1101, label %1106

1101:                                             ; preds = %1097
  %1102 = shl nsw i64 %1099, 1
  %1103 = icmp ult i64 %1102, %1093
  %1104 = select i1 %1103, i64 %1093, i64 %1102
  %1105 = icmp eq i64 %1104, 0
  br i1 %1105, label %1111, label %1106

1106:                                             ; preds = %1101, %1097
  %1107 = phi i64 [ %1104, %1101 ], [ 461168601842738790, %1097 ]
  %1108 = mul i64 %1107, 40
  %1109 = tail call i8* @_Znwm(i64 %1108) #13
  %1110 = bitcast i8* %1109 to %"struct.jxl::PropertyDecisionNode"*
  br label %1111

1111:                                             ; preds = %1106, %1101
  %1112 = phi i64 [ %1107, %1106 ], [ 0, %1101 ]
  %1113 = phi %"struct.jxl::PropertyDecisionNode"* [ %1110, %1106 ], [ null, %1101 ]
  %1114 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1113, i64 %1092
  %1115 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1113, i64 %1112
  %1116 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1115 to i64
  %1117 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1114, i64 0, i32 0
  store i32 0, i32* %1117, align 8, !noalias !149
  %1118 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1113, i64 %1092, i32 1
  store i16 -1, i16* %1118, align 4, !noalias !149
  %1119 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1113, i64 %1092, i32 3
  store i32 0, i32* %1119, align 8, !noalias !149
  %1120 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1113, i64 %1092, i32 4
  store i32 0, i32* %1120, align 4, !noalias !149
  %1121 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1113, i64 %1092, i32 5
  store i32 0, i32* %1121, align 8, !noalias !149
  %1122 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1113, i64 %1092, i32 7
  store i64 0, i64* %1122, align 8, !noalias !149
  %1123 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1113, i64 %1092, i32 8
  store i32 1, i32* %1123, align 8, !noalias !149
  %1124 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1114, i64 1
  %1125 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1124 to i64
  %1126 = sub i64 %1072, %1090
  %1127 = sdiv exact i64 %1126, -40
  %1128 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1114, i64 %1127
  %1129 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1128 to i64
  %1130 = icmp sgt i64 %1126, 0
  br i1 %1130, label %1131, label %1134

1131:                                             ; preds = %1111
  %1132 = bitcast %"struct.jxl::PropertyDecisionNode"* %1128 to i8*
  %1133 = inttoptr i64 %1090 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1132, i8* align 8 %1133, i64 %1126, i1 false) #10
  br label %1134

1134:                                             ; preds = %1131, %1111
  store i64 %1129, i64* %126, align 8, !noalias !149
  store i64 %1125, i64* %125, align 8, !noalias !149
  store i64 %1116, i64* %127, align 8, !noalias !149
  %1135 = icmp eq i64 %1090, 0
  br i1 %1135, label %1138, label %1136

1136:                                             ; preds = %1134
  %1137 = inttoptr i64 %1090 to i8*
  tail call void @_ZdlPv(i8* %1137) #13
  br label %1138

1138:                                             ; preds = %1136, %1134, %1076
  %1139 = phi i64 [ %1087, %1076 ], [ %1116, %1134 ], [ %1116, %1136 ]
  %1140 = phi i64 [ %1085, %1076 ], [ %1125, %1134 ], [ %1125, %1136 ]
  %1141 = phi %"struct.jxl::PropertyDecisionNode"* [ %1086, %1076 ], [ %1115, %1134 ], [ %1115, %1136 ]
  %1142 = phi %"struct.jxl::PropertyDecisionNode"* [ %1084, %1076 ], [ %1124, %1134 ], [ %1124, %1136 ]
  %1143 = icmp ult %"struct.jxl::PropertyDecisionNode"* %1142, %1141
  br i1 %1143, label %1144, label %1156

1144:                                             ; preds = %1138
  %1145 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1142, i64 0, i32 0
  store i32 0, i32* %1145, align 8, !noalias !149
  %1146 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1142, i64 0, i32 1
  store i16 7, i16* %1146, align 4, !noalias !149
  %1147 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1142, i64 0, i32 3
  store i32 23, i32* %1147, align 8, !noalias !149
  %1148 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1142, i64 0, i32 4
  store i32 24, i32* %1148, align 4, !noalias !149
  %1149 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1142, i64 0, i32 5
  store i32 0, i32* %1149, align 8, !noalias !149
  %1150 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1142, i64 0, i32 7
  store i64 0, i64* %1150, align 8, !noalias !149
  %1151 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1142, i64 0, i32 8
  store i32 1, i32* %1151, align 8, !noalias !149
  %1152 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1142, i64 1
  %1153 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1152 to i64
  store i64 %1153, i64* %125, align 8, !noalias !149
  %1154 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %124, align 8, !noalias !149
  %1155 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1154 to i64
  br label %1206

1156:                                             ; preds = %1138
  %1157 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1142 to i64
  %1158 = load i64, i64* %126, align 8, !noalias !149
  %1159 = sub i64 %1157, %1158
  %1160 = sdiv exact i64 %1159, 40
  %1161 = add nsw i64 %1160, 1
  %1162 = icmp ugt i64 %1161, 461168601842738790
  br i1 %1162, label %1163, label %1165

1163:                                             ; preds = %1156
  %1164 = bitcast %"class.std::__1::vector.52"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1164) #12
  unreachable

1165:                                             ; preds = %1156
  %1166 = sub i64 %1139, %1158
  %1167 = sdiv exact i64 %1166, 40
  %1168 = icmp ult i64 %1167, 230584300921369395
  br i1 %1168, label %1169, label %1174

1169:                                             ; preds = %1165
  %1170 = shl nsw i64 %1167, 1
  %1171 = icmp ult i64 %1170, %1161
  %1172 = select i1 %1171, i64 %1161, i64 %1170
  %1173 = icmp eq i64 %1172, 0
  br i1 %1173, label %1179, label %1174

1174:                                             ; preds = %1169, %1165
  %1175 = phi i64 [ %1172, %1169 ], [ 461168601842738790, %1165 ]
  %1176 = mul i64 %1175, 40
  %1177 = tail call i8* @_Znwm(i64 %1176) #13
  %1178 = bitcast i8* %1177 to %"struct.jxl::PropertyDecisionNode"*
  br label %1179

1179:                                             ; preds = %1174, %1169
  %1180 = phi i64 [ %1175, %1174 ], [ 0, %1169 ]
  %1181 = phi %"struct.jxl::PropertyDecisionNode"* [ %1178, %1174 ], [ null, %1169 ]
  %1182 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1181, i64 %1160
  %1183 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1181, i64 %1180
  %1184 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1183 to i64
  %1185 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1182, i64 0, i32 0
  store i32 0, i32* %1185, align 8, !noalias !149
  %1186 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1181, i64 %1160, i32 1
  store i16 7, i16* %1186, align 4, !noalias !149
  %1187 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1181, i64 %1160, i32 3
  store i32 23, i32* %1187, align 8, !noalias !149
  %1188 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1181, i64 %1160, i32 4
  store i32 24, i32* %1188, align 4, !noalias !149
  %1189 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1181, i64 %1160, i32 5
  store i32 0, i32* %1189, align 8, !noalias !149
  %1190 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1181, i64 %1160, i32 7
  store i64 0, i64* %1190, align 8, !noalias !149
  %1191 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1181, i64 %1160, i32 8
  store i32 1, i32* %1191, align 8, !noalias !149
  %1192 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1182, i64 1
  %1193 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1192 to i64
  %1194 = sub i64 %1140, %1158
  %1195 = sdiv exact i64 %1194, -40
  %1196 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1182, i64 %1195
  %1197 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1196 to i64
  %1198 = icmp sgt i64 %1194, 0
  br i1 %1198, label %1199, label %1202

1199:                                             ; preds = %1179
  %1200 = bitcast %"struct.jxl::PropertyDecisionNode"* %1196 to i8*
  %1201 = inttoptr i64 %1158 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1200, i8* align 8 %1201, i64 %1194, i1 false) #10
  br label %1202

1202:                                             ; preds = %1199, %1179
  store i64 %1197, i64* %126, align 8, !noalias !149
  store i64 %1193, i64* %125, align 8, !noalias !149
  store i64 %1184, i64* %127, align 8, !noalias !149
  %1203 = icmp eq i64 %1158, 0
  br i1 %1203, label %1206, label %1204

1204:                                             ; preds = %1202
  %1205 = inttoptr i64 %1158 to i8*
  tail call void @_ZdlPv(i8* %1205) #13
  br label %1206

1206:                                             ; preds = %1204, %1202, %1144
  %1207 = phi i64 [ %1155, %1144 ], [ %1184, %1202 ], [ %1184, %1204 ]
  %1208 = phi i64 [ %1153, %1144 ], [ %1193, %1202 ], [ %1193, %1204 ]
  %1209 = phi %"struct.jxl::PropertyDecisionNode"* [ %1154, %1144 ], [ %1183, %1202 ], [ %1183, %1204 ]
  %1210 = phi %"struct.jxl::PropertyDecisionNode"* [ %1152, %1144 ], [ %1192, %1202 ], [ %1192, %1204 ]
  %1211 = icmp ult %"struct.jxl::PropertyDecisionNode"* %1210, %1209
  br i1 %1211, label %1212, label %1224

1212:                                             ; preds = %1206
  %1213 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1210, i64 0, i32 0
  store i32 0, i32* %1213, align 8, !noalias !149
  %1214 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1210, i64 0, i32 1
  store i16 7, i16* %1214, align 4, !noalias !149
  %1215 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1210, i64 0, i32 3
  store i32 25, i32* %1215, align 8, !noalias !149
  %1216 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1210, i64 0, i32 4
  store i32 26, i32* %1216, align 4, !noalias !149
  %1217 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1210, i64 0, i32 5
  store i32 0, i32* %1217, align 8, !noalias !149
  %1218 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1210, i64 0, i32 7
  store i64 0, i64* %1218, align 8, !noalias !149
  %1219 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1210, i64 0, i32 8
  store i32 1, i32* %1219, align 8, !noalias !149
  %1220 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1210, i64 1
  %1221 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1220 to i64
  store i64 %1221, i64* %125, align 8, !noalias !149
  %1222 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %124, align 8, !noalias !149
  %1223 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1222 to i64
  br label %1274

1224:                                             ; preds = %1206
  %1225 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1210 to i64
  %1226 = load i64, i64* %126, align 8, !noalias !149
  %1227 = sub i64 %1225, %1226
  %1228 = sdiv exact i64 %1227, 40
  %1229 = add nsw i64 %1228, 1
  %1230 = icmp ugt i64 %1229, 461168601842738790
  br i1 %1230, label %1231, label %1233

1231:                                             ; preds = %1224
  %1232 = bitcast %"class.std::__1::vector.52"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1232) #12
  unreachable

1233:                                             ; preds = %1224
  %1234 = sub i64 %1207, %1226
  %1235 = sdiv exact i64 %1234, 40
  %1236 = icmp ult i64 %1235, 230584300921369395
  br i1 %1236, label %1237, label %1242

1237:                                             ; preds = %1233
  %1238 = shl nsw i64 %1235, 1
  %1239 = icmp ult i64 %1238, %1229
  %1240 = select i1 %1239, i64 %1229, i64 %1238
  %1241 = icmp eq i64 %1240, 0
  br i1 %1241, label %1247, label %1242

1242:                                             ; preds = %1237, %1233
  %1243 = phi i64 [ %1240, %1237 ], [ 461168601842738790, %1233 ]
  %1244 = mul i64 %1243, 40
  %1245 = tail call i8* @_Znwm(i64 %1244) #13
  %1246 = bitcast i8* %1245 to %"struct.jxl::PropertyDecisionNode"*
  br label %1247

1247:                                             ; preds = %1242, %1237
  %1248 = phi i64 [ %1243, %1242 ], [ 0, %1237 ]
  %1249 = phi %"struct.jxl::PropertyDecisionNode"* [ %1246, %1242 ], [ null, %1237 ]
  %1250 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1249, i64 %1228
  %1251 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1249, i64 %1248
  %1252 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1251 to i64
  %1253 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1250, i64 0, i32 0
  store i32 0, i32* %1253, align 8, !noalias !149
  %1254 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1249, i64 %1228, i32 1
  store i16 7, i16* %1254, align 4, !noalias !149
  %1255 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1249, i64 %1228, i32 3
  store i32 25, i32* %1255, align 8, !noalias !149
  %1256 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1249, i64 %1228, i32 4
  store i32 26, i32* %1256, align 4, !noalias !149
  %1257 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1249, i64 %1228, i32 5
  store i32 0, i32* %1257, align 8, !noalias !149
  %1258 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1249, i64 %1228, i32 7
  store i64 0, i64* %1258, align 8, !noalias !149
  %1259 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1249, i64 %1228, i32 8
  store i32 1, i32* %1259, align 8, !noalias !149
  %1260 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1250, i64 1
  %1261 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1260 to i64
  %1262 = sub i64 %1208, %1226
  %1263 = sdiv exact i64 %1262, -40
  %1264 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1250, i64 %1263
  %1265 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1264 to i64
  %1266 = icmp sgt i64 %1262, 0
  br i1 %1266, label %1267, label %1270

1267:                                             ; preds = %1247
  %1268 = bitcast %"struct.jxl::PropertyDecisionNode"* %1264 to i8*
  %1269 = inttoptr i64 %1226 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1268, i8* align 8 %1269, i64 %1262, i1 false) #10
  br label %1270

1270:                                             ; preds = %1267, %1247
  store i64 %1265, i64* %126, align 8, !noalias !149
  store i64 %1261, i64* %125, align 8, !noalias !149
  store i64 %1252, i64* %127, align 8, !noalias !149
  %1271 = icmp eq i64 %1226, 0
  br i1 %1271, label %1274, label %1272

1272:                                             ; preds = %1270
  %1273 = inttoptr i64 %1226 to i8*
  tail call void @_ZdlPv(i8* %1273) #13
  br label %1274

1274:                                             ; preds = %1272, %1270, %1212
  %1275 = phi i64 [ %1223, %1212 ], [ %1252, %1270 ], [ %1252, %1272 ]
  %1276 = phi i64 [ %1221, %1212 ], [ %1261, %1270 ], [ %1261, %1272 ]
  %1277 = phi %"struct.jxl::PropertyDecisionNode"* [ %1222, %1212 ], [ %1251, %1270 ], [ %1251, %1272 ]
  %1278 = phi %"struct.jxl::PropertyDecisionNode"* [ %1220, %1212 ], [ %1260, %1270 ], [ %1260, %1272 ]
  %1279 = icmp ult %"struct.jxl::PropertyDecisionNode"* %1278, %1277
  br i1 %1279, label %1280, label %1292

1280:                                             ; preds = %1274
  %1281 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1278, i64 0, i32 0
  store i32 0, i32* %1281, align 8, !noalias !149
  %1282 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1278, i64 0, i32 1
  store i16 -1, i16* %1282, align 4, !noalias !149
  %1283 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1278, i64 0, i32 3
  store i32 0, i32* %1283, align 8, !noalias !149
  %1284 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1278, i64 0, i32 4
  store i32 0, i32* %1284, align 4, !noalias !149
  %1285 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1278, i64 0, i32 5
  store i32 0, i32* %1285, align 8, !noalias !149
  %1286 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1278, i64 0, i32 7
  store i64 0, i64* %1286, align 8, !noalias !149
  %1287 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1278, i64 0, i32 8
  store i32 1, i32* %1287, align 8, !noalias !149
  %1288 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1278, i64 1
  %1289 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1288 to i64
  store i64 %1289, i64* %125, align 8, !noalias !149
  %1290 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %124, align 8, !noalias !149
  %1291 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1290 to i64
  br label %1342

1292:                                             ; preds = %1274
  %1293 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1278 to i64
  %1294 = load i64, i64* %126, align 8, !noalias !149
  %1295 = sub i64 %1293, %1294
  %1296 = sdiv exact i64 %1295, 40
  %1297 = add nsw i64 %1296, 1
  %1298 = icmp ugt i64 %1297, 461168601842738790
  br i1 %1298, label %1299, label %1301

1299:                                             ; preds = %1292
  %1300 = bitcast %"class.std::__1::vector.52"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1300) #12
  unreachable

1301:                                             ; preds = %1292
  %1302 = sub i64 %1275, %1294
  %1303 = sdiv exact i64 %1302, 40
  %1304 = icmp ult i64 %1303, 230584300921369395
  br i1 %1304, label %1305, label %1310

1305:                                             ; preds = %1301
  %1306 = shl nsw i64 %1303, 1
  %1307 = icmp ult i64 %1306, %1297
  %1308 = select i1 %1307, i64 %1297, i64 %1306
  %1309 = icmp eq i64 %1308, 0
  br i1 %1309, label %1315, label %1310

1310:                                             ; preds = %1305, %1301
  %1311 = phi i64 [ %1308, %1305 ], [ 461168601842738790, %1301 ]
  %1312 = mul i64 %1311, 40
  %1313 = tail call i8* @_Znwm(i64 %1312) #13
  %1314 = bitcast i8* %1313 to %"struct.jxl::PropertyDecisionNode"*
  br label %1315

1315:                                             ; preds = %1310, %1305
  %1316 = phi i64 [ %1311, %1310 ], [ 0, %1305 ]
  %1317 = phi %"struct.jxl::PropertyDecisionNode"* [ %1314, %1310 ], [ null, %1305 ]
  %1318 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1317, i64 %1296
  %1319 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1317, i64 %1316
  %1320 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1319 to i64
  %1321 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1318, i64 0, i32 0
  store i32 0, i32* %1321, align 8, !noalias !149
  %1322 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1317, i64 %1296, i32 1
  store i16 -1, i16* %1322, align 4, !noalias !149
  %1323 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1317, i64 %1296, i32 3
  store i32 0, i32* %1323, align 8, !noalias !149
  %1324 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1317, i64 %1296, i32 4
  store i32 0, i32* %1324, align 4, !noalias !149
  %1325 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1317, i64 %1296, i32 5
  store i32 0, i32* %1325, align 8, !noalias !149
  %1326 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1317, i64 %1296, i32 7
  store i64 0, i64* %1326, align 8, !noalias !149
  %1327 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1317, i64 %1296, i32 8
  store i32 1, i32* %1327, align 8, !noalias !149
  %1328 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1318, i64 1
  %1329 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1328 to i64
  %1330 = sub i64 %1276, %1294
  %1331 = sdiv exact i64 %1330, -40
  %1332 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1318, i64 %1331
  %1333 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1332 to i64
  %1334 = icmp sgt i64 %1330, 0
  br i1 %1334, label %1335, label %1338

1335:                                             ; preds = %1315
  %1336 = bitcast %"struct.jxl::PropertyDecisionNode"* %1332 to i8*
  %1337 = inttoptr i64 %1294 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1336, i8* align 8 %1337, i64 %1330, i1 false) #10
  br label %1338

1338:                                             ; preds = %1335, %1315
  store i64 %1333, i64* %126, align 8, !noalias !149
  store i64 %1329, i64* %125, align 8, !noalias !149
  store i64 %1320, i64* %127, align 8, !noalias !149
  %1339 = icmp eq i64 %1294, 0
  br i1 %1339, label %1342, label %1340

1340:                                             ; preds = %1338
  %1341 = inttoptr i64 %1294 to i8*
  tail call void @_ZdlPv(i8* %1341) #13
  br label %1342

1342:                                             ; preds = %1340, %1338, %1280
  %1343 = phi i64 [ %1291, %1280 ], [ %1320, %1338 ], [ %1320, %1340 ]
  %1344 = phi i64 [ %1289, %1280 ], [ %1329, %1338 ], [ %1329, %1340 ]
  %1345 = phi %"struct.jxl::PropertyDecisionNode"* [ %1290, %1280 ], [ %1319, %1338 ], [ %1319, %1340 ]
  %1346 = phi %"struct.jxl::PropertyDecisionNode"* [ %1288, %1280 ], [ %1328, %1338 ], [ %1328, %1340 ]
  %1347 = icmp ult %"struct.jxl::PropertyDecisionNode"* %1346, %1345
  br i1 %1347, label %1348, label %1360

1348:                                             ; preds = %1342
  %1349 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1346, i64 0, i32 0
  store i32 0, i32* %1349, align 8, !noalias !149
  %1350 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1346, i64 0, i32 1
  store i16 -1, i16* %1350, align 4, !noalias !149
  %1351 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1346, i64 0, i32 3
  store i32 0, i32* %1351, align 8, !noalias !149
  %1352 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1346, i64 0, i32 4
  store i32 0, i32* %1352, align 4, !noalias !149
  %1353 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1346, i64 0, i32 5
  store i32 0, i32* %1353, align 8, !noalias !149
  %1354 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1346, i64 0, i32 7
  store i64 0, i64* %1354, align 8, !noalias !149
  %1355 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1346, i64 0, i32 8
  store i32 1, i32* %1355, align 8, !noalias !149
  %1356 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1346, i64 1
  %1357 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1356 to i64
  store i64 %1357, i64* %125, align 8, !noalias !149
  %1358 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %124, align 8, !noalias !149
  %1359 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1358 to i64
  br label %1410

1360:                                             ; preds = %1342
  %1361 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1346 to i64
  %1362 = load i64, i64* %126, align 8, !noalias !149
  %1363 = sub i64 %1361, %1362
  %1364 = sdiv exact i64 %1363, 40
  %1365 = add nsw i64 %1364, 1
  %1366 = icmp ugt i64 %1365, 461168601842738790
  br i1 %1366, label %1367, label %1369

1367:                                             ; preds = %1360
  %1368 = bitcast %"class.std::__1::vector.52"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1368) #12
  unreachable

1369:                                             ; preds = %1360
  %1370 = sub i64 %1343, %1362
  %1371 = sdiv exact i64 %1370, 40
  %1372 = icmp ult i64 %1371, 230584300921369395
  br i1 %1372, label %1373, label %1378

1373:                                             ; preds = %1369
  %1374 = shl nsw i64 %1371, 1
  %1375 = icmp ult i64 %1374, %1365
  %1376 = select i1 %1375, i64 %1365, i64 %1374
  %1377 = icmp eq i64 %1376, 0
  br i1 %1377, label %1383, label %1378

1378:                                             ; preds = %1373, %1369
  %1379 = phi i64 [ %1376, %1373 ], [ 461168601842738790, %1369 ]
  %1380 = mul i64 %1379, 40
  %1381 = tail call i8* @_Znwm(i64 %1380) #13
  %1382 = bitcast i8* %1381 to %"struct.jxl::PropertyDecisionNode"*
  br label %1383

1383:                                             ; preds = %1378, %1373
  %1384 = phi i64 [ %1379, %1378 ], [ 0, %1373 ]
  %1385 = phi %"struct.jxl::PropertyDecisionNode"* [ %1382, %1378 ], [ null, %1373 ]
  %1386 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1385, i64 %1364
  %1387 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1385, i64 %1384
  %1388 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1387 to i64
  %1389 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1386, i64 0, i32 0
  store i32 0, i32* %1389, align 8, !noalias !149
  %1390 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1385, i64 %1364, i32 1
  store i16 -1, i16* %1390, align 4, !noalias !149
  %1391 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1385, i64 %1364, i32 3
  store i32 0, i32* %1391, align 8, !noalias !149
  %1392 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1385, i64 %1364, i32 4
  store i32 0, i32* %1392, align 4, !noalias !149
  %1393 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1385, i64 %1364, i32 5
  store i32 0, i32* %1393, align 8, !noalias !149
  %1394 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1385, i64 %1364, i32 7
  store i64 0, i64* %1394, align 8, !noalias !149
  %1395 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1385, i64 %1364, i32 8
  store i32 1, i32* %1395, align 8, !noalias !149
  %1396 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1386, i64 1
  %1397 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1396 to i64
  %1398 = sub i64 %1344, %1362
  %1399 = sdiv exact i64 %1398, -40
  %1400 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1386, i64 %1399
  %1401 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1400 to i64
  %1402 = icmp sgt i64 %1398, 0
  br i1 %1402, label %1403, label %1406

1403:                                             ; preds = %1383
  %1404 = bitcast %"struct.jxl::PropertyDecisionNode"* %1400 to i8*
  %1405 = inttoptr i64 %1362 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1404, i8* align 8 %1405, i64 %1398, i1 false) #10
  br label %1406

1406:                                             ; preds = %1403, %1383
  store i64 %1401, i64* %126, align 8, !noalias !149
  store i64 %1397, i64* %125, align 8, !noalias !149
  store i64 %1388, i64* %127, align 8, !noalias !149
  %1407 = icmp eq i64 %1362, 0
  br i1 %1407, label %1410, label %1408

1408:                                             ; preds = %1406
  %1409 = inttoptr i64 %1362 to i8*
  tail call void @_ZdlPv(i8* %1409) #13
  br label %1410

1410:                                             ; preds = %1408, %1406, %1348
  %1411 = phi i64 [ %1359, %1348 ], [ %1388, %1406 ], [ %1388, %1408 ]
  %1412 = phi i64 [ %1357, %1348 ], [ %1397, %1406 ], [ %1397, %1408 ]
  %1413 = phi %"struct.jxl::PropertyDecisionNode"* [ %1358, %1348 ], [ %1387, %1406 ], [ %1387, %1408 ]
  %1414 = phi %"struct.jxl::PropertyDecisionNode"* [ %1356, %1348 ], [ %1396, %1406 ], [ %1396, %1408 ]
  %1415 = icmp ult %"struct.jxl::PropertyDecisionNode"* %1414, %1413
  br i1 %1415, label %1416, label %1428

1416:                                             ; preds = %1410
  %1417 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1414, i64 0, i32 0
  store i32 0, i32* %1417, align 8, !noalias !149
  %1418 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1414, i64 0, i32 1
  store i16 -1, i16* %1418, align 4, !noalias !149
  %1419 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1414, i64 0, i32 3
  store i32 0, i32* %1419, align 8, !noalias !149
  %1420 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1414, i64 0, i32 4
  store i32 0, i32* %1420, align 4, !noalias !149
  %1421 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1414, i64 0, i32 5
  store i32 0, i32* %1421, align 8, !noalias !149
  %1422 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1414, i64 0, i32 7
  store i64 0, i64* %1422, align 8, !noalias !149
  %1423 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1414, i64 0, i32 8
  store i32 1, i32* %1423, align 8, !noalias !149
  %1424 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1414, i64 1
  %1425 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1424 to i64
  store i64 %1425, i64* %125, align 8, !noalias !149
  %1426 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %124, align 8, !noalias !149
  %1427 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1426 to i64
  br label %1478

1428:                                             ; preds = %1410
  %1429 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1414 to i64
  %1430 = load i64, i64* %126, align 8, !noalias !149
  %1431 = sub i64 %1429, %1430
  %1432 = sdiv exact i64 %1431, 40
  %1433 = add nsw i64 %1432, 1
  %1434 = icmp ugt i64 %1433, 461168601842738790
  br i1 %1434, label %1435, label %1437

1435:                                             ; preds = %1428
  %1436 = bitcast %"class.std::__1::vector.52"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1436) #12
  unreachable

1437:                                             ; preds = %1428
  %1438 = sub i64 %1411, %1430
  %1439 = sdiv exact i64 %1438, 40
  %1440 = icmp ult i64 %1439, 230584300921369395
  br i1 %1440, label %1441, label %1446

1441:                                             ; preds = %1437
  %1442 = shl nsw i64 %1439, 1
  %1443 = icmp ult i64 %1442, %1433
  %1444 = select i1 %1443, i64 %1433, i64 %1442
  %1445 = icmp eq i64 %1444, 0
  br i1 %1445, label %1451, label %1446

1446:                                             ; preds = %1441, %1437
  %1447 = phi i64 [ %1444, %1441 ], [ 461168601842738790, %1437 ]
  %1448 = mul i64 %1447, 40
  %1449 = tail call i8* @_Znwm(i64 %1448) #13
  %1450 = bitcast i8* %1449 to %"struct.jxl::PropertyDecisionNode"*
  br label %1451

1451:                                             ; preds = %1446, %1441
  %1452 = phi i64 [ %1447, %1446 ], [ 0, %1441 ]
  %1453 = phi %"struct.jxl::PropertyDecisionNode"* [ %1450, %1446 ], [ null, %1441 ]
  %1454 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1453, i64 %1432
  %1455 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1453, i64 %1452
  %1456 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1455 to i64
  %1457 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1454, i64 0, i32 0
  store i32 0, i32* %1457, align 8, !noalias !149
  %1458 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1453, i64 %1432, i32 1
  store i16 -1, i16* %1458, align 4, !noalias !149
  %1459 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1453, i64 %1432, i32 3
  store i32 0, i32* %1459, align 8, !noalias !149
  %1460 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1453, i64 %1432, i32 4
  store i32 0, i32* %1460, align 4, !noalias !149
  %1461 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1453, i64 %1432, i32 5
  store i32 0, i32* %1461, align 8, !noalias !149
  %1462 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1453, i64 %1432, i32 7
  store i64 0, i64* %1462, align 8, !noalias !149
  %1463 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1453, i64 %1432, i32 8
  store i32 1, i32* %1463, align 8, !noalias !149
  %1464 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1454, i64 1
  %1465 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1464 to i64
  %1466 = sub i64 %1412, %1430
  %1467 = sdiv exact i64 %1466, -40
  %1468 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1454, i64 %1467
  %1469 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1468 to i64
  %1470 = icmp sgt i64 %1466, 0
  br i1 %1470, label %1471, label %1474

1471:                                             ; preds = %1451
  %1472 = bitcast %"struct.jxl::PropertyDecisionNode"* %1468 to i8*
  %1473 = inttoptr i64 %1430 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1472, i8* align 8 %1473, i64 %1466, i1 false) #10
  br label %1474

1474:                                             ; preds = %1471, %1451
  store i64 %1469, i64* %126, align 8, !noalias !149
  store i64 %1465, i64* %125, align 8, !noalias !149
  store i64 %1456, i64* %127, align 8, !noalias !149
  %1475 = icmp eq i64 %1430, 0
  br i1 %1475, label %1478, label %1476

1476:                                             ; preds = %1474
  %1477 = inttoptr i64 %1430 to i8*
  tail call void @_ZdlPv(i8* %1477) #13
  br label %1478

1478:                                             ; preds = %1476, %1474, %1416
  %1479 = phi i64 [ %1427, %1416 ], [ %1456, %1474 ], [ %1456, %1476 ]
  %1480 = phi i64 [ %1425, %1416 ], [ %1465, %1474 ], [ %1465, %1476 ]
  %1481 = phi %"struct.jxl::PropertyDecisionNode"* [ %1426, %1416 ], [ %1455, %1474 ], [ %1455, %1476 ]
  %1482 = phi %"struct.jxl::PropertyDecisionNode"* [ %1424, %1416 ], [ %1464, %1474 ], [ %1464, %1476 ]
  %1483 = icmp ult %"struct.jxl::PropertyDecisionNode"* %1482, %1481
  br i1 %1483, label %1484, label %1496

1484:                                             ; preds = %1478
  %1485 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1482, i64 0, i32 0
  store i32 0, i32* %1485, align 8, !noalias !149
  %1486 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1482, i64 0, i32 1
  store i16 -1, i16* %1486, align 4, !noalias !149
  %1487 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1482, i64 0, i32 3
  store i32 0, i32* %1487, align 8, !noalias !149
  %1488 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1482, i64 0, i32 4
  store i32 0, i32* %1488, align 4, !noalias !149
  %1489 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1482, i64 0, i32 5
  store i32 0, i32* %1489, align 8, !noalias !149
  %1490 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1482, i64 0, i32 7
  store i64 0, i64* %1490, align 8, !noalias !149
  %1491 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1482, i64 0, i32 8
  store i32 1, i32* %1491, align 8, !noalias !149
  %1492 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1482, i64 1
  %1493 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1492 to i64
  store i64 %1493, i64* %125, align 8, !noalias !149
  %1494 = load i64, i64* %126, align 8, !noalias !149
  %1495 = load i64, i64* %127, align 8, !noalias !149
  br label %1546

1496:                                             ; preds = %1478
  %1497 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1482 to i64
  %1498 = load i64, i64* %126, align 8, !noalias !149
  %1499 = sub i64 %1497, %1498
  %1500 = sdiv exact i64 %1499, 40
  %1501 = add nsw i64 %1500, 1
  %1502 = icmp ugt i64 %1501, 461168601842738790
  br i1 %1502, label %1503, label %1505

1503:                                             ; preds = %1496
  %1504 = bitcast %"class.std::__1::vector.52"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1504) #12
  unreachable

1505:                                             ; preds = %1496
  %1506 = sub i64 %1479, %1498
  %1507 = sdiv exact i64 %1506, 40
  %1508 = icmp ult i64 %1507, 230584300921369395
  br i1 %1508, label %1509, label %1514

1509:                                             ; preds = %1505
  %1510 = shl nsw i64 %1507, 1
  %1511 = icmp ult i64 %1510, %1501
  %1512 = select i1 %1511, i64 %1501, i64 %1510
  %1513 = icmp eq i64 %1512, 0
  br i1 %1513, label %1519, label %1514

1514:                                             ; preds = %1509, %1505
  %1515 = phi i64 [ %1512, %1509 ], [ 461168601842738790, %1505 ]
  %1516 = mul i64 %1515, 40
  %1517 = tail call i8* @_Znwm(i64 %1516) #13
  %1518 = bitcast i8* %1517 to %"struct.jxl::PropertyDecisionNode"*
  br label %1519

1519:                                             ; preds = %1514, %1509
  %1520 = phi i64 [ %1515, %1514 ], [ 0, %1509 ]
  %1521 = phi %"struct.jxl::PropertyDecisionNode"* [ %1518, %1514 ], [ null, %1509 ]
  %1522 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1521, i64 %1500
  %1523 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1521, i64 %1520
  %1524 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1523 to i64
  %1525 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1522, i64 0, i32 0
  store i32 0, i32* %1525, align 8, !noalias !149
  %1526 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1521, i64 %1500, i32 1
  store i16 -1, i16* %1526, align 4, !noalias !149
  %1527 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1521, i64 %1500, i32 3
  store i32 0, i32* %1527, align 8, !noalias !149
  %1528 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1521, i64 %1500, i32 4
  store i32 0, i32* %1528, align 4, !noalias !149
  %1529 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1521, i64 %1500, i32 5
  store i32 0, i32* %1529, align 8, !noalias !149
  %1530 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1521, i64 %1500, i32 7
  store i64 0, i64* %1530, align 8, !noalias !149
  %1531 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1521, i64 %1500, i32 8
  store i32 1, i32* %1531, align 8, !noalias !149
  %1532 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1522, i64 1
  %1533 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1532 to i64
  %1534 = sub i64 %1480, %1498
  %1535 = sdiv exact i64 %1534, -40
  %1536 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1522, i64 %1535
  %1537 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1536 to i64
  %1538 = icmp sgt i64 %1534, 0
  br i1 %1538, label %1539, label %1542

1539:                                             ; preds = %1519
  %1540 = bitcast %"struct.jxl::PropertyDecisionNode"* %1536 to i8*
  %1541 = inttoptr i64 %1498 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1540, i8* align 8 %1541, i64 %1534, i1 false) #10
  br label %1542

1542:                                             ; preds = %1539, %1519
  store i64 %1537, i64* %126, align 8, !noalias !149
  store i64 %1533, i64* %125, align 8, !noalias !149
  store i64 %1524, i64* %127, align 8, !noalias !149
  %1543 = icmp eq i64 %1498, 0
  br i1 %1543, label %1546, label %1544

1544:                                             ; preds = %1542
  %1545 = inttoptr i64 %1498 to i8*
  tail call void @_ZdlPv(i8* %1545) #13
  br label %1546

1546:                                             ; preds = %1544, %1542, %1484
  %1547 = phi i64 [ %1495, %1484 ], [ %1524, %1542 ], [ %1524, %1544 ]
  %1548 = phi i64 [ %1493, %1484 ], [ %1533, %1542 ], [ %1533, %1544 ]
  %1549 = phi i64 [ %1494, %1484 ], [ %1537, %1542 ], [ %1537, %1544 ]
  %1550 = bitcast %"class.std::__1::vector.52"* %8 to i64*
  store i64 %1549, i64* %1550, align 8, !alias.scope !149
  %1551 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %8, i64 0, i32 0, i32 1
  %1552 = bitcast %"struct.jxl::PropertyDecisionNode"** %1551 to i64*
  store i64 %1548, i64* %1552, align 8, !alias.scope !149
  %1553 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %8, i64 0, i32 0, i32 2, i32 0, i32 0
  %1554 = bitcast %"struct.jxl::PropertyDecisionNode"** %1553 to i64*
  store i64 %1547, i64* %1554, align 8, !alias.scope !149
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %122) #10, !noalias !149
  br label %1578

1555:                                             ; preds = %49
  %1556 = bitcast %"class.std::__1::vector.156"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1556) #10, !noalias !149
  %1557 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %5, i64 0, i32 0, i32 1
  %1558 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  %1559 = tail call i8* @_Znwm(i64 132) #13
  %1560 = bitcast %"class.std::__1::vector.156"* %5 to i8**
  store i8* %1559, i8** %1560, align 8, !noalias !149
  %1561 = getelementptr inbounds i8, i8* %1559, i64 132
  %1562 = bitcast i32** %1558 to i8**
  store i8* %1561, i8** %1562, align 8, !noalias !149
  %1563 = bitcast i32** %1557 to i64*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %1559, i8* align 4 bitcast ([33 x i32]* @.ref.tmp.62 to i8*), i64 132, i1 false) #10
  %1564 = ptrtoint i8* %1561 to i64
  store i64 %1564, i64* %1563, align 8, !noalias !149
  call fastcc void @_ZN3jxl12_GLOBAL__N_113MakeFixedTreeEiRKNSt3__16vectorIiNS1_9allocatorIiEEEENS_9PredictorEm(%"class.std::__1::vector.52"* nonnull sret %8, i32 15, %"class.std::__1::vector.156"* nonnull dereferenceable(24) %5, i32 6, i64 %50) #10
  call void @_ZdlPv(i8* nonnull %1559) #13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1556) #10, !noalias !149
  br label %1578

1565:                                             ; preds = %49
  %1566 = bitcast %"class.std::__1::vector.156"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1566) #10, !noalias !149
  %1567 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %6, i64 0, i32 0, i32 1
  %1568 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  %1569 = tail call i8* @_Znwm(i64 132) #13
  %1570 = bitcast %"class.std::__1::vector.156"* %6 to i8**
  store i8* %1569, i8** %1570, align 8, !noalias !149
  %1571 = getelementptr inbounds i8, i8* %1569, i64 132
  %1572 = bitcast i32** %1568 to i8**
  store i8* %1571, i8** %1572, align 8, !noalias !149
  %1573 = bitcast i32** %1567 to i64*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %1569, i8* align 4 bitcast ([33 x i32]* @.ref.tmp.62 to i8*), i64 132, i1 false) #10
  %1574 = ptrtoint i8* %1571 to i64
  store i64 %1574, i64* %1573, align 8, !noalias !149
  call fastcc void @_ZN3jxl12_GLOBAL__N_113MakeFixedTreeEiRKNSt3__16vectorIiNS1_9allocatorIiEEEENS_9PredictorEm(%"class.std::__1::vector.52"* nonnull sret %8, i32 9, %"class.std::__1::vector.156"* nonnull dereferenceable(24) %6, i32 5, i64 %50) #10
  call void @_ZdlPv(i8* nonnull %1569) #13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1566) #10, !noalias !149
  br label %1578

1575:                                             ; preds = %49
  %1576 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.63, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.2, i64 0, i64 0), i32 184) #10
  %1577 = tail call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

1578:                                             ; preds = %1565, %1555, %1546, %99, %75, %53
  %1579 = getelementptr inbounds %class.anon.345, %class.anon.345* %19, i64 0, i32 2
  %1580 = load %"class.std::__1::vector.338"*, %"class.std::__1::vector.338"** %1579, align 8
  %1581 = getelementptr inbounds %"class.std::__1::vector.338", %"class.std::__1::vector.338"* %1580, i64 0, i32 0, i32 0
  %1582 = load %"class.std::__1::vector.52"*, %"class.std::__1::vector.52"** %1581, align 8
  %1583 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %1582, i64 %20
  %1584 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %1583, i64 0, i32 0, i32 0
  %1585 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %1584, align 8
  %1586 = icmp eq %"struct.jxl::PropertyDecisionNode"* %1585, null
  br i1 %1586, label %1593, label %1587

1587:                                             ; preds = %1578
  %1588 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1585 to i64
  %1589 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %1582, i64 %20, i32 0, i32 1
  %1590 = bitcast %"struct.jxl::PropertyDecisionNode"** %1589 to i64*
  store i64 %1588, i64* %1590, align 8
  %1591 = bitcast %"struct.jxl::PropertyDecisionNode"* %1585 to i8*
  call void @_ZdlPv(i8* %1591) #13
  %1592 = bitcast %"class.std::__1::vector.52"* %1583 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1592, i8 0, i64 24, i1 false) #10
  br label %1593

1593:                                             ; preds = %1578, %1587
  %1594 = bitcast %"class.std::__1::vector.52"* %8 to i64*
  %1595 = load i64, i64* %1594, align 8
  %1596 = bitcast %"class.std::__1::vector.52"* %1583 to i64*
  store i64 %1595, i64* %1596, align 8
  %1597 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %8, i64 0, i32 0, i32 1
  %1598 = bitcast %"struct.jxl::PropertyDecisionNode"** %1597 to i64*
  %1599 = load i64, i64* %1598, align 8
  %1600 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %1582, i64 %20, i32 0, i32 1
  %1601 = bitcast %"struct.jxl::PropertyDecisionNode"** %1600 to i64*
  store i64 %1599, i64* %1601, align 8
  %1602 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %8, i64 0, i32 0, i32 2, i32 0, i32 0
  %1603 = bitcast %"struct.jxl::PropertyDecisionNode"** %1602 to i64*
  %1604 = load i64, i64* %1603, align 8
  %1605 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %1582, i64 %20, i32 0, i32 2, i32 0, i32 0
  %1606 = bitcast %"struct.jxl::PropertyDecisionNode"** %1605 to i64*
  store i64 %1604, i64* %1606, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %52) #10
  br label %1873

1607:                                             ; preds = %1644, %44
  %1608 = phi i64 [ 0, %44 ], [ %1645, %1644 ]
  %1609 = phi i64 [ %35, %44 ], [ %1646, %1644 ]
  %1610 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %46, i64 %1609, i32 0, i32 0, i32 0
  %1611 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %1610, align 8
  %1612 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %46, i64 %1609, i32 0, i32 0, i32 1
  %1613 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %1612, align 8
  %1614 = icmp eq %"class.jxl::Channel"* %1611, %1613
  br i1 %1614, label %1644, label %1615

1615:                                             ; preds = %1607
  %1616 = ptrtoint %"class.jxl::Channel"* %1611 to i64
  %1617 = getelementptr %"class.jxl::Channel", %"class.jxl::Channel"* %1613, i64 -1
  %1618 = ptrtoint %"class.jxl::Channel"* %1617 to i64
  %1619 = sub i64 %1618, %1616
  %1620 = lshr i64 %1619, 6
  %1621 = add nuw nsw i64 %1620, 1
  %1622 = and i64 %1621, 3
  %1623 = icmp eq i64 %1622, 0
  br i1 %1623, label %1637, label %1624

1624:                                             ; preds = %1615, %1624
  %1625 = phi i64 [ %1633, %1624 ], [ %1608, %1615 ]
  %1626 = phi %"class.jxl::Channel"* [ %1634, %1624 ], [ %1611, %1615 ]
  %1627 = phi i64 [ %1635, %1624 ], [ %1622, %1615 ]
  %1628 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %1626, i64 0, i32 1
  %1629 = load i64, i64* %1628, align 8
  %1630 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %1626, i64 0, i32 2
  %1631 = load i64, i64* %1630, align 8
  %1632 = mul i64 %1631, %1629
  %1633 = add i64 %1632, %1625
  %1634 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %1626, i64 1
  %1635 = add i64 %1627, -1
  %1636 = icmp eq i64 %1635, 0
  br i1 %1636, label %1637, label %1624, !llvm.loop !152

1637:                                             ; preds = %1624, %1615
  %1638 = phi i64 [ undef, %1615 ], [ %1633, %1624 ]
  %1639 = phi i64 [ %1608, %1615 ], [ %1633, %1624 ]
  %1640 = phi %"class.jxl::Channel"* [ %1611, %1615 ], [ %1634, %1624 ]
  %1641 = icmp ult i64 %1619, 192
  br i1 %1641, label %1642, label %1648

1642:                                             ; preds = %1648, %1637
  %1643 = phi i64 [ %1638, %1637 ], [ %1674, %1648 ]
  store i64 %1643, i64* %7, align 8
  br label %1644

1644:                                             ; preds = %1642, %1607
  %1645 = phi i64 [ %1643, %1642 ], [ %1608, %1607 ]
  %1646 = add nuw nsw i64 %1609, 1
  %1647 = icmp eq i64 %1646, %42
  br i1 %1647, label %47, label %1607

1648:                                             ; preds = %1637, %1648
  %1649 = phi i64 [ %1674, %1648 ], [ %1639, %1637 ]
  %1650 = phi %"class.jxl::Channel"* [ %1675, %1648 ], [ %1640, %1637 ]
  %1651 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %1650, i64 0, i32 1
  %1652 = load i64, i64* %1651, align 8
  %1653 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %1650, i64 0, i32 2
  %1654 = load i64, i64* %1653, align 8
  %1655 = mul i64 %1654, %1652
  %1656 = add i64 %1655, %1649
  %1657 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %1650, i64 1, i32 1
  %1658 = load i64, i64* %1657, align 8
  %1659 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %1650, i64 1, i32 2
  %1660 = load i64, i64* %1659, align 8
  %1661 = mul i64 %1660, %1658
  %1662 = add i64 %1661, %1656
  %1663 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %1650, i64 2, i32 1
  %1664 = load i64, i64* %1663, align 8
  %1665 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %1650, i64 2, i32 2
  %1666 = load i64, i64* %1665, align 8
  %1667 = mul i64 %1666, %1664
  %1668 = add i64 %1667, %1662
  %1669 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %1650, i64 3, i32 1
  %1670 = load i64, i64* %1669, align 8
  %1671 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %1650, i64 3, i32 2
  %1672 = load i64, i64* %1671, align 8
  %1673 = mul i64 %1672, %1670
  %1674 = add i64 %1673, %1668
  %1675 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %1650, i64 4
  %1676 = icmp eq %"class.jxl::Channel"* %1675, %1613
  br i1 %1676, label %1642, label %1648

1677:                                             ; preds = %3
  %1678 = bitcast %"struct.jxl::TreeSamples"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 200, i8* nonnull %1678) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1678, i8 0, i64 200, i1 false) #10
  %1679 = load %"struct.jxl::ModularOptions"*, %"struct.jxl::ModularOptions"** %36, align 8
  %1680 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %1679, i64 %35, i32 7
  %1681 = load i32, i32* %1680, align 8
  %1682 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %1679, i64 %35, i32 10
  %1683 = load i32, i32* %1682, align 4
  %1684 = call i32 @_ZN3jxl11TreeSamples12SetPredictorENS_9PredictorENS_14ModularOptions10WPTreeModeE(%"struct.jxl::TreeSamples"* nonnull %9, i32 %1681, i32 %1683) #10
  %1685 = icmp eq i32 %1684, 0
  br i1 %1685, label %1691, label %1686

1686:                                             ; preds = %1677
  %1687 = getelementptr inbounds %class.anon.345, %class.anon.345* %19, i64 0, i32 3
  %1688 = load %"struct.std::__1::atomic_flag"*, %"struct.std::__1::atomic_flag"** %1687, align 8
  %1689 = getelementptr inbounds %"struct.std::__1::atomic_flag", %"struct.std::__1::atomic_flag"* %1688, i64 0, i32 0, i32 0, i32 0
  %1690 = atomicrmw xchg i8* %1689, i8 1 acq_rel
  br label %1872

1691:                                             ; preds = %1677
  %1692 = load %"struct.jxl::ModularOptions"*, %"struct.jxl::ModularOptions"** %36, align 8
  %1693 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %1692, i64 %35, i32 3
  %1694 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %1692, i64 %35, i32 10
  %1695 = load i32, i32* %1694, align 4
  %1696 = call i32 @_ZN3jxl11TreeSamples13SetPropertiesERKNSt3__16vectorIjNS1_9allocatorIjEEEENS_14ModularOptions10WPTreeModeE(%"struct.jxl::TreeSamples"* nonnull %9, %"class.std::__1::vector.40"* dereferenceable(24) %1693, i32 %1695) #10
  %1697 = icmp eq i32 %1696, 0
  br i1 %1697, label %1703, label %1698

1698:                                             ; preds = %1691
  %1699 = getelementptr inbounds %class.anon.345, %class.anon.345* %19, i64 0, i32 3
  %1700 = load %"struct.std::__1::atomic_flag"*, %"struct.std::__1::atomic_flag"** %1699, align 8
  %1701 = getelementptr inbounds %"struct.std::__1::atomic_flag", %"struct.std::__1::atomic_flag"* %1700, i64 0, i32 0, i32 0, i32 0
  %1702 = atomicrmw xchg i8* %1701, i8 1 acq_rel
  br label %1872

1703:                                             ; preds = %1691
  %1704 = bitcast %"class.std::__1::vector.156"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1704) #10
  %1705 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %10, i64 0, i32 0, i32 0
  %1706 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %10, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1704, i8 0, i64 24, i1 false) #10
  %1707 = bitcast %"class.std::__1::vector.156"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1707) #10
  %1708 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %11, i64 0, i32 0, i32 0
  %1709 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %11, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1707, i8 0, i64 24, i1 false) #10
  %1710 = bitcast %"class.std::__1::vector.40"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1710) #10
  %1711 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %12, i64 0, i32 0, i32 0
  %1712 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %12, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1710, i8 0, i64 24, i1 false) #10
  %1713 = bitcast %"class.std::__1::vector.40"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1713) #10
  %1714 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %13, i64 0, i32 0, i32 0
  %1715 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %13, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1713, i8 0, i64 24, i1 false) #10
  %1716 = and i64 %33, 4294967295
  %1717 = icmp ult i64 %35, %1716
  br i1 %1717, label %1718, label %1720

1718:                                             ; preds = %1703
  %1719 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %22, i64 0, i32 2, i32 0, i32 0
  br label %1771

1720:                                             ; preds = %1771, %1703
  %1721 = phi i32 [ 0, %1703 ], [ %1785, %1771 ]
  %1722 = bitcast %"struct.std::__1::array"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1722) #10
  %1723 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %14, i64 0, i32 0, i64 0, i32 0, i64 0
  %1724 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %14, i64 0, i32 0, i64 0, i32 0, i64 1
  %1725 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %14, i64 0, i32 0, i64 1, i32 0, i64 0
  %1726 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %14, i64 0, i32 0, i64 1, i32 0, i64 1
  store i32 0, i32* %1723, align 8
  store i32 %1721, i32* %1724, align 4
  store i32 %30, i32* %1725, align 8
  store i32 %34, i32* %1726, align 4
  %1727 = bitcast %"class.std::__1::vector.96"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1727) #10
  %1728 = getelementptr inbounds %"class.std::__1::vector.96", %"class.std::__1::vector.96"* %15, i64 0, i32 0, i32 0
  %1729 = getelementptr inbounds %"class.std::__1::vector.96", %"class.std::__1::vector.96"* %15, i64 0, i32 0, i32 1
  %1730 = getelementptr inbounds %"class.std::__1::vector.96", %"class.std::__1::vector.96"* %15, i64 0, i32 0, i32 2, i32 0, i32 0
  %1731 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %22, i64 0, i32 15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1727, i8 0, i64 24, i1 false) #10
  %1732 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %22, i64 0, i32 15, i32 0, i32 1
  %1733 = bitcast %"struct.jxl::ModularMultiplierInfo"** %1732 to i64*
  %1734 = load i64, i64* %1733, align 8
  %1735 = bitcast %"class.std::__1::vector.96"* %1731 to i64*
  %1736 = load i64, i64* %1735, align 8
  %1737 = sub i64 %1734, %1736
  %1738 = sdiv exact i64 %1737, 20
  %1739 = icmp eq i64 %1737, 0
  br i1 %1739, label %1765, label %1740

1740:                                             ; preds = %1720
  %1741 = icmp ugt i64 %1738, 922337203685477580
  br i1 %1741, label %1742, label %1744

1742:                                             ; preds = %1740
  %1743 = bitcast %"class.std::__1::vector.96"* %15 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1743) #12
  unreachable

1744:                                             ; preds = %1740
  %1745 = call i8* @_Znwm(i64 %1737) #13
  %1746 = bitcast i8* %1745 to %"struct.jxl::ModularMultiplierInfo"*
  %1747 = bitcast %"struct.jxl::ModularMultiplierInfo"** %1729 to i8**
  store i8* %1745, i8** %1747, align 8
  %1748 = bitcast %"class.std::__1::vector.96"* %15 to i8**
  store i8* %1745, i8** %1748, align 8
  %1749 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1746, i64 %1738
  store %"struct.jxl::ModularMultiplierInfo"* %1749, %"struct.jxl::ModularMultiplierInfo"** %1730, align 8
  %1750 = getelementptr inbounds %"class.std::__1::vector.96", %"class.std::__1::vector.96"* %1731, i64 0, i32 0, i32 0
  %1751 = load %"struct.jxl::ModularMultiplierInfo"*, %"struct.jxl::ModularMultiplierInfo"** %1750, align 8
  %1752 = load i64, i64* %1733, align 8
  %1753 = bitcast %"struct.jxl::ModularMultiplierInfo"** %1729 to i64*
  %1754 = ptrtoint i8* %1745 to i64
  %1755 = ptrtoint %"struct.jxl::ModularMultiplierInfo"* %1751 to i64
  %1756 = sub i64 %1752, %1755
  %1757 = icmp sgt i64 %1756, 0
  br i1 %1757, label %1758, label %1763

1758:                                             ; preds = %1744
  %1759 = udiv exact i64 %1756, 20
  %1760 = bitcast %"struct.jxl::ModularMultiplierInfo"* %1751 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %1745, i8* align 4 %1760, i64 %1756, i1 false) #10
  %1761 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %1746, i64 %1759
  %1762 = ptrtoint %"struct.jxl::ModularMultiplierInfo"* %1761 to i64
  br label %1763

1763:                                             ; preds = %1758, %1744
  %1764 = phi i64 [ %1762, %1758 ], [ %1754, %1744 ]
  store i64 %1764, i64* %1753, align 8
  br label %1765

1765:                                             ; preds = %1763, %1720
  %1766 = load %"struct.jxl::ModularOptions"*, %"struct.jxl::ModularOptions"** %36, align 8
  %1767 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %1766, i64 %35, i32 6
  %1768 = load i64, i64* %1767, align 8
  call void @_ZN3jxl11TreeSamples21PreQuantizePropertiesERKNSt3__15arrayINS2_IjLm2EEELm2EEERKNS1_6vectorINS_21ModularMultiplierInfoENS1_9allocatorIS8_EEEERKNS7_IjNS9_IjEEEESH_RNS7_IiNS9_IiEEEESK_m(%"struct.jxl::TreeSamples"* nonnull %9, %"struct.std::__1::array"* nonnull dereferenceable(16) %14, %"class.std::__1::vector.96"* nonnull dereferenceable(24) %15, %"class.std::__1::vector.40"* nonnull dereferenceable(24) %12, %"class.std::__1::vector.40"* nonnull dereferenceable(24) %13, %"class.std::__1::vector.156"* nonnull dereferenceable(24) %10, %"class.std::__1::vector.156"* nonnull dereferenceable(24) %11, i64 %1768) #10
  br i1 %1717, label %1769, label %1792

1769:                                             ; preds = %1765
  %1770 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %22, i64 0, i32 2, i32 0, i32 0
  br label %1860

1771:                                             ; preds = %1771, %1718
  %1772 = phi i64 [ %35, %1718 ], [ %1788, %1771 ]
  %1773 = phi i32 [ 0, %1718 ], [ %1785, %1771 ]
  %1774 = load %"class.jxl::Image"*, %"class.jxl::Image"** %1719, align 8
  %1775 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %1774, i64 %1772
  %1776 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %1774, i64 %1772, i32 0, i32 0, i32 1
  %1777 = bitcast %"class.jxl::Channel"** %1776 to i64*
  %1778 = load i64, i64* %1777, align 8
  %1779 = bitcast %"class.jxl::Image"* %1775 to i64*
  %1780 = load i64, i64* %1779, align 8
  %1781 = sub i64 %1778, %1780
  %1782 = lshr exact i64 %1781, 6
  %1783 = trunc i64 %1782 to i32
  %1784 = icmp ugt i32 %1773, %1783
  %1785 = select i1 %1784, i32 %1773, i32 %1783
  %1786 = load %"struct.jxl::ModularOptions"*, %"struct.jxl::ModularOptions"** %36, align 8
  %1787 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %1786, i64 %1772
  call void @_ZN3jxl19CollectPixelSamplesERKNS_5ImageERKNS_14ModularOptionsEmRNSt3__16vectorIjNS6_9allocatorIjEEEESB_RNS7_IiNS8_IiEEEESE_(%"class.jxl::Image"* dereferenceable(104) %1775, %"struct.jxl::ModularOptions"* dereferenceable(88) %1787, i64 %1772, %"class.std::__1::vector.40"* nonnull dereferenceable(24) %12, %"class.std::__1::vector.40"* nonnull dereferenceable(24) %13, %"class.std::__1::vector.156"* nonnull dereferenceable(24) %10, %"class.std::__1::vector.156"* nonnull dereferenceable(24) %11) #10
  %1788 = add nuw nsw i64 %1772, 1
  %1789 = icmp eq i64 %1788, %1716
  br i1 %1789, label %1720, label %1771

1790:                                             ; preds = %1860
  %1791 = icmp eq i64 %1868, %1716
  br i1 %1791, label %1792, label %1860

1792:                                             ; preds = %1790, %1765
  %1793 = bitcast %"class.std::__1::vector.52"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1793) #10
  %1794 = load i64, i64* %7, align 8
  %1795 = load %"struct.jxl::ModularOptions"*, %"struct.jxl::ModularOptions"** %36, align 8
  %1796 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %1795, i64 %35
  call void @_ZN3jxl9LearnTreeEONS_11TreeSamplesEmRKNS_14ModularOptionsERKNSt3__16vectorINS_21ModularMultiplierInfoENS5_9allocatorIS7_EEEENS5_5arrayINSD_IjLm2EEELm2EEE(%"class.std::__1::vector.52"* nonnull sret %16, %"struct.jxl::TreeSamples"* nonnull dereferenceable(200) %9, i64 %1794, %"struct.jxl::ModularOptions"* dereferenceable(88) %1796, %"class.std::__1::vector.96"* nonnull dereferenceable(24) %15, %"struct.std::__1::array"* nonnull byval(%"struct.std::__1::array") align 8 %14) #10
  %1797 = getelementptr inbounds %class.anon.345, %class.anon.345* %19, i64 0, i32 2
  %1798 = load %"class.std::__1::vector.338"*, %"class.std::__1::vector.338"** %1797, align 8
  %1799 = getelementptr inbounds %"class.std::__1::vector.338", %"class.std::__1::vector.338"* %1798, i64 0, i32 0, i32 0
  %1800 = load %"class.std::__1::vector.52"*, %"class.std::__1::vector.52"** %1799, align 8
  %1801 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %1800, i64 %20
  %1802 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %1801, i64 0, i32 0, i32 0
  %1803 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %1802, align 8
  %1804 = icmp eq %"struct.jxl::PropertyDecisionNode"* %1803, null
  br i1 %1804, label %1811, label %1805

1805:                                             ; preds = %1792
  %1806 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %1803 to i64
  %1807 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %1800, i64 %20, i32 0, i32 1
  %1808 = bitcast %"struct.jxl::PropertyDecisionNode"** %1807 to i64*
  store i64 %1806, i64* %1808, align 8
  %1809 = bitcast %"struct.jxl::PropertyDecisionNode"* %1803 to i8*
  call void @_ZdlPv(i8* %1809) #13
  %1810 = bitcast %"class.std::__1::vector.52"* %1801 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1810, i8 0, i64 24, i1 false) #10
  br label %1811

1811:                                             ; preds = %1792, %1805
  %1812 = bitcast %"class.std::__1::vector.52"* %16 to i64*
  %1813 = load i64, i64* %1812, align 8
  %1814 = bitcast %"class.std::__1::vector.52"* %1801 to i64*
  store i64 %1813, i64* %1814, align 8
  %1815 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %16, i64 0, i32 0, i32 1
  %1816 = bitcast %"struct.jxl::PropertyDecisionNode"** %1815 to i64*
  %1817 = load i64, i64* %1816, align 8
  %1818 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %1800, i64 %20, i32 0, i32 1
  %1819 = bitcast %"struct.jxl::PropertyDecisionNode"** %1818 to i64*
  store i64 %1817, i64* %1819, align 8
  %1820 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %16, i64 0, i32 0, i32 2, i32 0, i32 0
  %1821 = bitcast %"struct.jxl::PropertyDecisionNode"** %1820 to i64*
  %1822 = load i64, i64* %1821, align 8
  %1823 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %1800, i64 %20, i32 0, i32 2, i32 0, i32 0
  %1824 = bitcast %"struct.jxl::PropertyDecisionNode"** %1823 to i64*
  store i64 %1822, i64* %1824, align 8
  %1825 = load %"struct.jxl::ModularMultiplierInfo"*, %"struct.jxl::ModularMultiplierInfo"** %1728, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1793) #10
  %1826 = icmp eq %"struct.jxl::ModularMultiplierInfo"* %1825, null
  br i1 %1826, label %1831, label %1827

1827:                                             ; preds = %1811
  %1828 = bitcast %"struct.jxl::ModularMultiplierInfo"* %1825 to i8*
  %1829 = ptrtoint %"struct.jxl::ModularMultiplierInfo"* %1825 to i64
  %1830 = bitcast %"struct.jxl::ModularMultiplierInfo"** %1729 to i64*
  store i64 %1829, i64* %1830, align 8
  call void @_ZdlPv(i8* %1828) #13
  br label %1831

1831:                                             ; preds = %1827, %1811
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1727) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1722) #10
  %1832 = load i32*, i32** %1714, align 8
  %1833 = icmp eq i32* %1832, null
  br i1 %1833, label %1838, label %1834

1834:                                             ; preds = %1831
  %1835 = ptrtoint i32* %1832 to i64
  %1836 = bitcast i32** %1715 to i64*
  store i64 %1835, i64* %1836, align 8
  %1837 = bitcast i32* %1832 to i8*
  call void @_ZdlPv(i8* %1837) #13
  br label %1838

1838:                                             ; preds = %1834, %1831
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1713) #10
  %1839 = load i32*, i32** %1711, align 8
  %1840 = icmp eq i32* %1839, null
  br i1 %1840, label %1845, label %1841

1841:                                             ; preds = %1838
  %1842 = ptrtoint i32* %1839 to i64
  %1843 = bitcast i32** %1712 to i64*
  store i64 %1842, i64* %1843, align 8
  %1844 = bitcast i32* %1839 to i8*
  call void @_ZdlPv(i8* %1844) #13
  br label %1845

1845:                                             ; preds = %1841, %1838
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1710) #10
  %1846 = load i32*, i32** %1708, align 8
  %1847 = icmp eq i32* %1846, null
  br i1 %1847, label %1852, label %1848

1848:                                             ; preds = %1845
  %1849 = ptrtoint i32* %1846 to i64
  %1850 = bitcast i32** %1709 to i64*
  store i64 %1849, i64* %1850, align 8
  %1851 = bitcast i32* %1846 to i8*
  call void @_ZdlPv(i8* %1851) #13
  br label %1852

1852:                                             ; preds = %1848, %1845
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1707) #10
  %1853 = load i32*, i32** %1705, align 8
  %1854 = icmp eq i32* %1853, null
  br i1 %1854, label %1859, label %1855

1855:                                             ; preds = %1852
  %1856 = ptrtoint i32* %1853 to i64
  %1857 = bitcast i32** %1706 to i64*
  store i64 %1856, i64* %1857, align 8
  %1858 = bitcast i32* %1853 to i8*
  call void @_ZdlPv(i8* %1858) #13
  br label %1859

1859:                                             ; preds = %1855, %1852
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1704) #10
  br label %1872

1860:                                             ; preds = %1790, %1769
  %1861 = phi i64 [ %35, %1769 ], [ %1868, %1790 ]
  %1862 = load %"class.jxl::Image"*, %"class.jxl::Image"** %1770, align 8
  %1863 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %1862, i64 %1861
  %1864 = load %"struct.jxl::ModularOptions"*, %"struct.jxl::ModularOptions"** %36, align 8
  %1865 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %1864, i64 %1861
  %1866 = call i32 @_ZN3jxl22ModularGenericCompressERNS_5ImageERKNS_14ModularOptionsEPNS_9BitWriterEPNS_6AuxOutEmmPNS_11TreeSamplesEPmPKNSt3__16vectorINS_20PropertyDecisionNodeENSC_9allocatorISE_EEEEPNS_11GroupHeaderEPNSD_INS_5TokenENSF_ISM_EEEESB_(%"class.jxl::Image"* dereferenceable(104) %1863, %"struct.jxl::ModularOptions"* dereferenceable(88) %1865, %"struct.jxl::BitWriter"* null, %"struct.jxl::AuxOut"* null, i64 0, i64 %1861, %"struct.jxl::TreeSamples"* nonnull %9, i64* nonnull %7, %"class.std::__1::vector.52"* null, %"struct.jxl::GroupHeader"* null, %"class.std::__1::vector.61"* null, i64* null) #10
  %1867 = icmp eq i32 %1866, 0
  %1868 = add nuw nsw i64 %1861, 1
  br i1 %1867, label %1790, label %1869

1869:                                             ; preds = %1860
  %1870 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.30, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.2, i64 0, i64 0), i32 941, i8* getelementptr inbounds ([115 x i8], [115 x i8]* @.str.60, i64 0, i64 0)) #10
  %1871 = call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

1872:                                             ; preds = %1859, %1698, %1686
  call void @_ZN3jxl11TreeSamplesD2Ev(%"struct.jxl::TreeSamples"* nonnull %9) #10
  call void @llvm.lifetime.end.p0i8(i64 200, i8* nonnull %1678) #10
  br label %1873

1873:                                             ; preds = %1593, %1872
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #10
  ret void
}

declare i32 @_ZN3jxl11TreeSamples12SetPredictorENS_9PredictorENS_14ModularOptions10WPTreeModeE(%"struct.jxl::TreeSamples"*, i32, i32) local_unnamed_addr #2

declare i32 @_ZN3jxl11TreeSamples13SetPropertiesERKNSt3__16vectorIjNS1_9allocatorIjEEEENS_14ModularOptions10WPTreeModeE(%"struct.jxl::TreeSamples"*, %"class.std::__1::vector.40"* dereferenceable(24), i32) local_unnamed_addr #2

declare void @_ZN3jxl19CollectPixelSamplesERKNS_5ImageERKNS_14ModularOptionsEmRNSt3__16vectorIjNS6_9allocatorIjEEEESB_RNS7_IiNS8_IiEEEESE_(%"class.jxl::Image"* dereferenceable(104), %"struct.jxl::ModularOptions"* dereferenceable(88), i64, %"class.std::__1::vector.40"* dereferenceable(24), %"class.std::__1::vector.40"* dereferenceable(24), %"class.std::__1::vector.156"* dereferenceable(24), %"class.std::__1::vector.156"* dereferenceable(24)) local_unnamed_addr #2

declare void @_ZN3jxl11TreeSamples21PreQuantizePropertiesERKNSt3__15arrayINS2_IjLm2EEELm2EEERKNS1_6vectorINS_21ModularMultiplierInfoENS1_9allocatorIS8_EEEERKNS7_IjNS9_IjEEEESH_RNS7_IiNS9_IiEEEESK_m(%"struct.jxl::TreeSamples"*, %"struct.std::__1::array"* dereferenceable(16), %"class.std::__1::vector.96"* dereferenceable(24), %"class.std::__1::vector.40"* dereferenceable(24), %"class.std::__1::vector.40"* dereferenceable(24), %"class.std::__1::vector.156"* dereferenceable(24), %"class.std::__1::vector.156"* dereferenceable(24), i64) local_unnamed_addr #2

declare void @_ZN3jxl9LearnTreeEONS_11TreeSamplesEmRKNS_14ModularOptionsERKNSt3__16vectorINS_21ModularMultiplierInfoENS5_9allocatorIS7_EEEENS5_5arrayINSD_IjLm2EEELm2EEE(%"class.std::__1::vector.52"* sret, %"struct.jxl::TreeSamples"* dereferenceable(200), i64, %"struct.jxl::ModularOptions"* dereferenceable(88), %"class.std::__1::vector.96"* dereferenceable(24), %"struct.std::__1::array"* byval(%"struct.std::__1::array") align 8) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11TreeSamplesD2Ev(%"struct.jxl::TreeSamples"*) unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 8, i32 0, i32 0
  %3 = load i32*, i32** %2, align 8
  %4 = icmp eq i32* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint i32* %3 to i64
  %7 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 8, i32 0, i32 1
  %8 = bitcast i32** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast i32* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #13
  br label %10

10:                                               ; preds = %1, %5
  %11 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 6
  %12 = getelementptr inbounds %"class.std::__1::vector.210", %"class.std::__1::vector.210"* %11, i64 0, i32 0, i32 0
  %13 = load %"class.std::__1::vector.1"*, %"class.std::__1::vector.1"** %12, align 8
  %14 = icmp eq %"class.std::__1::vector.1"* %13, null
  br i1 %14, label %37, label %15

15:                                               ; preds = %10
  %16 = bitcast %"class.std::__1::vector.1"* %13 to i8*
  %17 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 6, i32 0, i32 1
  %18 = load %"class.std::__1::vector.1"*, %"class.std::__1::vector.1"** %17, align 8
  %19 = icmp eq %"class.std::__1::vector.1"* %18, %13
  br i1 %19, label %35, label %20

20:                                               ; preds = %15, %30
  %21 = phi %"class.std::__1::vector.1"* [ %22, %30 ], [ %18, %15 ]
  %22 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %21, i64 -1
  %23 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %22, i64 0, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = icmp eq i8* %24, null
  br i1 %25, label %30, label %26

26:                                               ; preds = %20
  %27 = ptrtoint i8* %24 to i64
  %28 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %21, i64 -1, i32 0, i32 1
  %29 = bitcast i8** %28 to i64*
  store i64 %27, i64* %29, align 8
  tail call void @_ZdlPv(i8* nonnull %24) #13
  br label %30

30:                                               ; preds = %26, %20
  %31 = icmp eq %"class.std::__1::vector.1"* %22, %13
  br i1 %31, label %32, label %20

32:                                               ; preds = %30
  %33 = bitcast %"class.std::__1::vector.210"* %11 to i8**
  %34 = load i8*, i8** %33, align 8
  br label %35

35:                                               ; preds = %32, %15
  %36 = phi i8* [ %34, %32 ], [ %16, %15 ]
  store %"class.std::__1::vector.1"* %13, %"class.std::__1::vector.1"** %17, align 8
  tail call void @_ZdlPv(i8* %36) #13
  br label %37

37:                                               ; preds = %10, %35
  %38 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 5, i32 0, i32 0
  %39 = load i32*, i32** %38, align 8
  %40 = icmp eq i32* %39, null
  br i1 %40, label %46, label %41

41:                                               ; preds = %37
  %42 = ptrtoint i32* %39 to i64
  %43 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 5, i32 0, i32 1
  %44 = bitcast i32** %43 to i64*
  store i64 %42, i64* %44, align 8
  %45 = bitcast i32* %39 to i8*
  tail call void @_ZdlPv(i8* %45) #13
  br label %46

46:                                               ; preds = %37, %41
  %47 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 4, i32 0, i32 0
  %48 = load i32*, i32** %47, align 8
  %49 = icmp eq i32* %48, null
  br i1 %49, label %55, label %50

50:                                               ; preds = %46
  %51 = ptrtoint i32* %48 to i64
  %52 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 4, i32 0, i32 1
  %53 = bitcast i32** %52 to i64*
  store i64 %51, i64* %53, align 8
  %54 = bitcast i32* %48 to i8*
  tail call void @_ZdlPv(i8* %54) #13
  br label %55

55:                                               ; preds = %46, %50
  %56 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 3
  %57 = getelementptr inbounds %"class.std::__1::vector.371", %"class.std::__1::vector.371"* %56, i64 0, i32 0, i32 0
  %58 = load %"class.std::__1::vector.156"*, %"class.std::__1::vector.156"** %57, align 8
  %59 = icmp eq %"class.std::__1::vector.156"* %58, null
  br i1 %59, label %83, label %60

60:                                               ; preds = %55
  %61 = bitcast %"class.std::__1::vector.156"* %58 to i8*
  %62 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 3, i32 0, i32 1
  %63 = load %"class.std::__1::vector.156"*, %"class.std::__1::vector.156"** %62, align 8
  %64 = icmp eq %"class.std::__1::vector.156"* %63, %58
  br i1 %64, label %81, label %65

65:                                               ; preds = %60, %76
  %66 = phi %"class.std::__1::vector.156"* [ %67, %76 ], [ %63, %60 ]
  %67 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %66, i64 -1
  %68 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %67, i64 0, i32 0, i32 0
  %69 = load i32*, i32** %68, align 8
  %70 = icmp eq i32* %69, null
  br i1 %70, label %76, label %71

71:                                               ; preds = %65
  %72 = ptrtoint i32* %69 to i64
  %73 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %66, i64 -1, i32 0, i32 1
  %74 = bitcast i32** %73 to i64*
  store i64 %72, i64* %74, align 8
  %75 = bitcast i32* %69 to i8*
  tail call void @_ZdlPv(i8* %75) #13
  br label %76

76:                                               ; preds = %71, %65
  %77 = icmp eq %"class.std::__1::vector.156"* %67, %58
  br i1 %77, label %78, label %65

78:                                               ; preds = %76
  %79 = bitcast %"class.std::__1::vector.371"* %56 to i8**
  %80 = load i8*, i8** %79, align 8
  br label %81

81:                                               ; preds = %78, %60
  %82 = phi i8* [ %80, %78 ], [ %61, %60 ]
  store %"class.std::__1::vector.156"* %58, %"class.std::__1::vector.156"** %62, align 8
  tail call void @_ZdlPv(i8* %82) #13
  br label %83

83:                                               ; preds = %55, %81
  %84 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 2
  %85 = getelementptr inbounds %"class.std::__1::vector.210", %"class.std::__1::vector.210"* %84, i64 0, i32 0, i32 0
  %86 = load %"class.std::__1::vector.1"*, %"class.std::__1::vector.1"** %85, align 8
  %87 = icmp eq %"class.std::__1::vector.1"* %86, null
  br i1 %87, label %110, label %88

88:                                               ; preds = %83
  %89 = bitcast %"class.std::__1::vector.1"* %86 to i8*
  %90 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 2, i32 0, i32 1
  %91 = load %"class.std::__1::vector.1"*, %"class.std::__1::vector.1"** %90, align 8
  %92 = icmp eq %"class.std::__1::vector.1"* %91, %86
  br i1 %92, label %108, label %93

93:                                               ; preds = %88, %103
  %94 = phi %"class.std::__1::vector.1"* [ %95, %103 ], [ %91, %88 ]
  %95 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %94, i64 -1
  %96 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %95, i64 0, i32 0, i32 0
  %97 = load i8*, i8** %96, align 8
  %98 = icmp eq i8* %97, null
  br i1 %98, label %103, label %99

99:                                               ; preds = %93
  %100 = ptrtoint i8* %97 to i64
  %101 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %94, i64 -1, i32 0, i32 1
  %102 = bitcast i8** %101 to i64*
  store i64 %100, i64* %102, align 8
  tail call void @_ZdlPv(i8* nonnull %97) #13
  br label %103

103:                                              ; preds = %99, %93
  %104 = icmp eq %"class.std::__1::vector.1"* %95, %86
  br i1 %104, label %105, label %93

105:                                              ; preds = %103
  %106 = bitcast %"class.std::__1::vector.210"* %84 to i8**
  %107 = load i8*, i8** %106, align 8
  br label %108

108:                                              ; preds = %105, %88
  %109 = phi i8* [ %107, %105 ], [ %89, %88 ]
  store %"class.std::__1::vector.1"* %86, %"class.std::__1::vector.1"** %90, align 8
  tail call void @_ZdlPv(i8* %109) #13
  br label %110

110:                                              ; preds = %83, %108
  %111 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 1, i32 0, i32 0
  %112 = load i16*, i16** %111, align 8
  %113 = icmp eq i16* %112, null
  br i1 %113, label %119, label %114

114:                                              ; preds = %110
  %115 = ptrtoint i16* %112 to i64
  %116 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 1, i32 0, i32 1
  %117 = bitcast i16** %116 to i64*
  store i64 %115, i64* %117, align 8
  %118 = bitcast i16* %112 to i8*
  tail call void @_ZdlPv(i8* %118) #13
  br label %119

119:                                              ; preds = %110, %114
  %120 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 0, i32 0, i32 0
  %121 = load %"class.std::__1::vector.352"*, %"class.std::__1::vector.352"** %120, align 8
  %122 = icmp eq %"class.std::__1::vector.352"* %121, null
  br i1 %122, label %146, label %123

123:                                              ; preds = %119
  %124 = bitcast %"class.std::__1::vector.352"* %121 to i8*
  %125 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 0, i32 0, i32 1
  %126 = load %"class.std::__1::vector.352"*, %"class.std::__1::vector.352"** %125, align 8
  %127 = icmp eq %"class.std::__1::vector.352"* %126, %121
  br i1 %127, label %144, label %128

128:                                              ; preds = %123, %139
  %129 = phi %"class.std::__1::vector.352"* [ %130, %139 ], [ %126, %123 ]
  %130 = getelementptr inbounds %"class.std::__1::vector.352", %"class.std::__1::vector.352"* %129, i64 -1
  %131 = getelementptr inbounds %"class.std::__1::vector.352", %"class.std::__1::vector.352"* %130, i64 0, i32 0, i32 0
  %132 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %131, align 8
  %133 = icmp eq %"struct.jxl::TreeSamples::ResidualToken"* %132, null
  br i1 %133, label %139, label %134

134:                                              ; preds = %128
  %135 = ptrtoint %"struct.jxl::TreeSamples::ResidualToken"* %132 to i64
  %136 = getelementptr inbounds %"class.std::__1::vector.352", %"class.std::__1::vector.352"* %129, i64 -1, i32 0, i32 1
  %137 = bitcast %"struct.jxl::TreeSamples::ResidualToken"** %136 to i64*
  store i64 %135, i64* %137, align 8
  %138 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %132, i64 0, i32 0
  tail call void @_ZdlPv(i8* %138) #13
  br label %139

139:                                              ; preds = %134, %128
  %140 = icmp eq %"class.std::__1::vector.352"* %130, %121
  br i1 %140, label %141, label %128

141:                                              ; preds = %139
  %142 = bitcast %"struct.jxl::TreeSamples"* %0 to i8**
  %143 = load i8*, i8** %142, align 8
  br label %144

144:                                              ; preds = %141, %123
  %145 = phi i8* [ %143, %141 ], [ %124, %123 ]
  store %"class.std::__1::vector.352"* %121, %"class.std::__1::vector.352"** %125, align 8
  tail call void @_ZdlPv(i8* %145) #13
  br label %146

146:                                              ; preds = %119, %144
  ret void
}

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ModularFrameEncoder15PrepareEncodingEPS0_RKNS_15FrameDimensionsEPNS_17EncoderHeuristicsEPNS_6AuxOutEE3$_3E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #0 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #10
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_19ModularFrameEncoder15PrepareEncodingEPS0_RKNS_15FrameDimensionsEPNS_17EncoderHeuristicsEPNS_6AuxOutEE3$_3E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #0 align 2 {
  %4 = alloca %"struct.jxl::AuxOut", align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %class.anon.349**
  %7 = load %class.anon.349*, %class.anon.349** %6, align 8
  %8 = zext i32 %1 to i64
  %9 = getelementptr inbounds %class.anon.349, %class.anon.349* %7, i64 0, i32 1
  %10 = load %"class.jxl::ModularFrameEncoder"*, %"class.jxl::ModularFrameEncoder"** %9, align 8
  %11 = bitcast %"struct.jxl::AuxOut"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1096, i8* nonnull %11) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %11, i8* align 8 bitcast ({ %"struct.std::__1::array.306", i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array.307", %"struct.std::__1::array.307", i32, [4 x i8], %"class.std::__1::basic_string", i64, %"class.std::__1::function", %"class.std::__1::function.308" }* @"__const._ZZN3jxl19ModularFrameEncoder15PrepareEncodingEPNS_10ThreadPoolERKNS_15FrameDimensionsEPNS_17EncoderHeuristicsEPNS_6AuxOutEENK3$_3clEmm.my_aux_out" to i8*), i64 1080, i1 false) #10
  %12 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %4, i64 0, i32 15
  %13 = bitcast %"class.std::__1::basic_string"* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 24, i1 false) #10
  %14 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %4, i64 0, i32 16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 0, i64 996, i1 false) #10
  store i64 1, i64* %14, align 8
  %15 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %4, i64 0, i32 17, i32 0, i32 1, i32 0
  store i1 (%"union.std::__1::__function::__policy_storage"*, i8*, %"class.jxl::Image3"*)* @_ZNSt3__110__function16__policy_invokerIFbPKcRKN3jxl6Image3IfEEEE12__call_emptyEPKNS0_16__policy_storageES3_S8_, i1 (%"union.std::__1::__function::__policy_storage"*, i8*, %"class.jxl::Image3"*)** %15, align 8
  %16 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %4, i64 0, i32 17, i32 0, i32 2
  store %"struct.std::__1::__function::__policy"* @_ZZNSt3__110__function8__policy14__create_emptyEvE9__policy_, %"struct.std::__1::__function::__policy"** %16, align 8
  %17 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %4, i64 0, i32 18, i32 0, i32 1, i32 0
  store i32 (%"union.std::__1::__function::__policy_storage"*, %"class.jxl::CodecInOut"*, %"class.std::__1::basic_string"*)* @_ZNSt3__110__function16__policy_invokerIFN3jxl6StatusERKNS2_10CodecInOutERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEE12__call_emptyEPKNS0_16__policy_storageES6_SE_, i32 (%"union.std::__1::__function::__policy_storage"*, %"class.jxl::CodecInOut"*, %"class.std::__1::basic_string"*)** %17, align 8
  %18 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %4, i64 0, i32 18, i32 0, i32 2
  store %"struct.std::__1::__function::__policy"* @_ZZNSt3__110__function8__policy14__create_emptyEvE9__policy_, %"struct.std::__1::__function::__policy"** %18, align 8
  %19 = getelementptr inbounds %class.anon.349, %class.anon.349* %7, i64 0, i32 0
  %20 = load %"struct.jxl::AuxOut"**, %"struct.jxl::AuxOut"*** %19, align 8
  %21 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %20, align 8
  %22 = icmp eq %"struct.jxl::AuxOut"* %21, null
  br i1 %22, label %88, label %23

23:                                               ; preds = %3
  %24 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %21, i64 0, i32 18
  %25 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %4, i64 0, i32 18
  %26 = bitcast %"class.std::__1::function.308"* %24 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %21, i64 0, i32 18, i32 0, i32 0, i32 1, i64 0
  %29 = load i8, i8* %28, align 8
  %30 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %21, i64 0, i32 18, i32 0, i32 0, i32 1, i64 1
  %31 = load i8, i8* %30, align 1
  %32 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %21, i64 0, i32 18, i32 0, i32 0, i32 1, i64 2
  %33 = load i8, i8* %32, align 2
  %34 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %21, i64 0, i32 18, i32 0, i32 0, i32 1, i64 3
  %35 = load i8, i8* %34, align 1
  %36 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %21, i64 0, i32 18, i32 0, i32 0, i32 1, i64 4
  %37 = load i8, i8* %36, align 4
  %38 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %21, i64 0, i32 18, i32 0, i32 0, i32 1, i64 5
  %39 = load i8, i8* %38, align 1
  %40 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %21, i64 0, i32 18, i32 0, i32 0, i32 1, i64 6
  %41 = load i8, i8* %40, align 2
  %42 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %21, i64 0, i32 18, i32 0, i32 0, i32 1, i64 7
  %43 = load i8, i8* %42, align 1
  %44 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %21, i64 0, i32 18, i32 0, i32 1
  %45 = bitcast %"struct.std::__1::__function::__policy_invoker.313"* %44 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %21, i64 0, i32 18, i32 0, i32 2
  %48 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %47, align 8
  %49 = ptrtoint %"struct.std::__1::__function::__policy"* %48 to i64
  %50 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %48, i64 0, i32 0
  %51 = load i8* (i8*)*, i8* (i8*)** %50, align 8
  %52 = icmp eq i8* (i8*)* %51, null
  br i1 %52, label %57, label %53

53:                                               ; preds = %23
  %54 = inttoptr i64 %27 to i8*
  %55 = tail call i8* %51(i8* %54) #10
  %56 = ptrtoint i8* %55 to i64
  br label %57

57:                                               ; preds = %53, %23
  %58 = phi i64 [ %27, %23 ], [ %56, %53 ]
  %59 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %4, i64 0, i32 18, i32 0, i32 1
  %60 = bitcast %"struct.std::__1::__function::__policy_invoker.313"* %59 to i64*
  store i64 %46, i64* %60, align 8
  %61 = bitcast %"struct.std::__1::__function::__policy"** %18 to i64*
  store i64 %49, i64* %61, align 8
  %62 = bitcast %"class.std::__1::function.308"* %25 to i64*
  %63 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %4, i64 0, i32 18, i32 0, i32 0, i32 1, i64 0
  %64 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %4, i64 0, i32 18, i32 0, i32 0, i32 1, i64 1
  %65 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %4, i64 0, i32 18, i32 0, i32 0, i32 1, i64 2
  %66 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %4, i64 0, i32 18, i32 0, i32 0, i32 1, i64 3
  %67 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %4, i64 0, i32 18, i32 0, i32 0, i32 1, i64 4
  %68 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %4, i64 0, i32 18, i32 0, i32 0, i32 1, i64 5
  %69 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %4, i64 0, i32 18, i32 0, i32 0, i32 1, i64 6
  %70 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %4, i64 0, i32 18, i32 0, i32 0, i32 1, i64 7
  store i64 %58, i64* %62, align 8
  store i8 %29, i8* %63, align 8
  store i8 %31, i8* %64, align 1
  store i8 %33, i8* %65, align 2
  store i8 %35, i8* %66, align 1
  store i8 %37, i8* %67, align 4
  store i8 %39, i8* %68, align 1
  store i8 %41, i8* %69, align 2
  store i8 %43, i8* %70, align 1
  %71 = load %"struct.jxl::AuxOut"**, %"struct.jxl::AuxOut"*** %19, align 8
  %72 = load %"struct.jxl::AuxOut"*, %"struct.jxl::AuxOut"** %71, align 8
  %73 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %72, i64 0, i32 15
  %74 = icmp eq %"struct.jxl::AuxOut"* %4, %72
  br i1 %74, label %88, label %75

75:                                               ; preds = %57
  %76 = bitcast %"class.std::__1::basic_string"* %73 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %77 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %76, i64 0, i32 1, i32 0
  %78 = load i8, i8* %77, align 1
  %79 = icmp slt i8 %78, 0
  br i1 %79, label %82, label %80

80:                                               ; preds = %75
  %81 = bitcast %"class.std::__1::basic_string"* %73 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %81, i64 24, i1 false) #10
  br label %88

82:                                               ; preds = %75
  %83 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %73, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %84 = load i8*, i8** %83, align 8
  %85 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %72, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %86 = load i64, i64* %85, align 8
  %87 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb1EEERS5_PKcm(%"class.std::__1::basic_string"* %12, i8* %84, i64 %86) #10
  br label %88

88:                                               ; preds = %82, %80, %57, %3
  %89 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %10, i64 0, i32 7, i32 0, i32 0
  %90 = load %"class.std::__1::vector.61"*, %"class.std::__1::vector.61"** %89, align 8
  %91 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %90, i64 %8
  %92 = bitcast %"class.std::__1::vector.61"* %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %90, i64 %8, i32 0, i32 1
  %95 = bitcast %"struct.jxl::Token"** %94 to i64*
  store i64 %93, i64* %95, align 8
  %96 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %10, i64 0, i32 2, i32 0, i32 0
  %97 = load %"class.jxl::Image"*, %"class.jxl::Image"** %96, align 8
  %98 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %97, i64 %8
  %99 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %10, i64 0, i32 3, i32 0, i32 0
  %100 = load %"struct.jxl::ModularOptions"*, %"struct.jxl::ModularOptions"** %99, align 8
  %101 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %100, i64 %8
  %102 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %10, i64 0, i32 4
  %103 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %10, i64 0, i32 6, i32 0, i32 0
  %104 = load %"struct.jxl::GroupHeader"*, %"struct.jxl::GroupHeader"** %103, align 8
  %105 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %104, i64 %8
  %106 = load %"class.std::__1::vector.61"*, %"class.std::__1::vector.61"** %89, align 8
  %107 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %106, i64 %8
  %108 = getelementptr inbounds %"class.jxl::ModularFrameEncoder", %"class.jxl::ModularFrameEncoder"* %10, i64 0, i32 17, i32 0, i32 0
  %109 = load i64*, i64** %108, align 8
  %110 = getelementptr inbounds i64, i64* %109, i64 %8
  %111 = call i32 @_ZN3jxl22ModularGenericCompressERNS_5ImageERKNS_14ModularOptionsEPNS_9BitWriterEPNS_6AuxOutEmmPNS_11TreeSamplesEPmPKNSt3__16vectorINS_20PropertyDecisionNodeENSC_9allocatorISE_EEEEPNS_11GroupHeaderEPNSD_INS_5TokenENSF_ISM_EEEESB_(%"class.jxl::Image"* dereferenceable(104) %98, %"struct.jxl::ModularOptions"* dereferenceable(88) %101, %"struct.jxl::BitWriter"* null, %"struct.jxl::AuxOut"* nonnull %4, i64 0, i64 %8, %"struct.jxl::TreeSamples"* null, i64* null, %"class.std::__1::vector.52"* %102, %"struct.jxl::GroupHeader"* %105, %"class.std::__1::vector.61"* %107, i64* %110) #10
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %116, label %113

113:                                              ; preds = %88
  %114 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.30, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.2, i64 0, i64 0), i32 1005, i8* getelementptr inbounds ([212 x i8], [212 x i8]* @.str.64, i64 0, i64 0)) #10
  %115 = call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

116:                                              ; preds = %88
  %117 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %18, align 8
  %118 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %117, i64 0, i32 1
  %119 = load void (i8*)*, void (i8*)** %118, align 8
  %120 = icmp eq void (i8*)* %119, null
  br i1 %120, label %124, label %121

121:                                              ; preds = %116
  %122 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %4, i64 0, i32 18, i32 0, i32 0, i32 0
  %123 = load i8*, i8** %122, align 8
  call void %119(i8* %123) #10
  br label %124

124:                                              ; preds = %121, %116
  %125 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %16, align 8
  %126 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %125, i64 0, i32 1
  %127 = load void (i8*)*, void (i8*)** %126, align 8
  %128 = icmp eq void (i8*)* %127, null
  br i1 %128, label %132, label %129

129:                                              ; preds = %124
  %130 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %4, i64 0, i32 17, i32 0, i32 0, i32 0
  %131 = load i8*, i8** %130, align 8
  call void %127(i8* %131) #10
  br label %132

132:                                              ; preds = %129, %124
  %133 = bitcast %"class.std::__1::basic_string"* %12 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %134 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %133, i64 0, i32 1, i32 0
  %135 = load i8, i8* %134, align 1
  %136 = icmp slt i8 %135, 0
  br i1 %136, label %137, label %140

137:                                              ; preds = %132
  %138 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %139 = load i8*, i8** %138, align 8
  call void @_ZdlPv(i8* %139) #13
  br label %140

140:                                              ; preds = %132, %137
  call void @llvm.lifetime.end.p0i8(i64 1096, i8* nonnull %11) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNSt3__110__function16__policy_invokerIFbPKcRKN3jxl6Image3IfEEEE12__call_emptyEPKNS0_16__policy_storageES3_S8_(%"union.std::__1::__function::__policy_storage"*, i8*, %"class.jxl::Image3"* dereferenceable(96)) #0 comdat align 2 {
  tail call void @_ZNSt3__125__throw_bad_function_callEv() #14
  unreachable
}

; Function Attrs: inlinehint noreturn nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__125__throw_bad_function_callEv() local_unnamed_addr #11 comdat {
  tail call void @abort() #12
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNSt3__110__function16__policy_invokerIFN3jxl6StatusERKNS2_10CodecInOutERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEE12__call_emptyEPKNS0_16__policy_storageES6_SE_(%"union.std::__1::__function::__policy_storage"*, %"class.jxl::CodecInOut"* dereferenceable(3416), %"class.std::__1::basic_string"* dereferenceable(24)) #0 comdat align 2 {
  tail call void @_ZNSt3__125__throw_bad_function_callEv() #14
  unreachable
}

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb1EEERS5_PKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorImNS_9allocatorImEEE6assignIPmEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleImNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector"*, i64*, i64*) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint i64* %2 to i64
  %5 = ptrtoint i64* %1 to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 3
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast i64** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 3
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to i64*
  br i1 %15, label %49, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %19 = bitcast i64** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = ashr exact i64 %21, 3
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds i64, i64* %1, i64 %22
  %25 = select i1 %23, i64* %24, i64* %2
  %26 = ptrtoint i64* %25 to i64
  %27 = sub i64 %26, %5
  %28 = ashr exact i64 %27, 3
  %29 = icmp eq i64 %27, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %17
  %31 = inttoptr i64 %12 to i8*
  %32 = bitcast i64* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %27, i1 false) #10
  br label %33

33:                                               ; preds = %17, %30
  br i1 %23, label %34, label %47

34:                                               ; preds = %33
  %35 = load i64, i64* %19, align 8
  %36 = sub i64 %4, %26
  %37 = icmp sgt i64 %36, 0
  br i1 %37, label %38, label %45

38:                                               ; preds = %34
  %39 = lshr exact i64 %36, 3
  %40 = inttoptr i64 %35 to i8*
  %41 = bitcast i64* %25 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 %36, i1 false) #10
  %42 = inttoptr i64 %35 to i64*
  %43 = getelementptr inbounds i64, i64* %42, i64 %39
  %44 = ptrtoint i64* %43 to i64
  br label %45

45:                                               ; preds = %34, %38
  %46 = phi i64 [ %44, %38 ], [ %35, %34 ]
  store i64 %46, i64* %19, align 8
  br label %90

47:                                               ; preds = %33
  %48 = getelementptr inbounds i64, i64* %16, i64 %28
  store i64* %48, i64** %18, align 8
  br label %90

49:                                               ; preds = %3
  %50 = icmp eq i64 %12, 0
  br i1 %50, label %56, label %51

51:                                               ; preds = %49
  %52 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %53 = bitcast i64** %52 to i64*
  store i64 %12, i64* %53, align 8
  %54 = inttoptr i64 %12 to i8*
  tail call void @_ZdlPv(i8* %54) #13
  %55 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %55, i8 0, i64 24, i1 false) #10
  br label %56

56:                                               ; preds = %49, %51
  %57 = phi i64 [ %10, %49 ], [ 0, %51 ]
  %58 = icmp ugt i64 %7, 2305843009213693951
  br i1 %58, label %59, label %61

59:                                               ; preds = %56
  %60 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %60) #12
  unreachable

61:                                               ; preds = %56
  %62 = ashr exact i64 %57, 3
  %63 = icmp ult i64 %62, 1152921504606846975
  br i1 %63, label %64, label %71

64:                                               ; preds = %61
  %65 = ashr exact i64 %57, 2
  %66 = icmp ult i64 %65, %7
  br i1 %66, label %71, label %67

67:                                               ; preds = %64
  %68 = icmp ugt i64 %65, 2305843009213693951
  br i1 %68, label %69, label %71

69:                                               ; preds = %67
  %70 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %70) #12
  unreachable

71:                                               ; preds = %64, %61, %67
  %72 = phi i64 [ %65, %67 ], [ 2305843009213693951, %61 ], [ %7, %64 ]
  %73 = shl i64 %72, 3
  %74 = tail call i8* @_Znwm(i64 %73) #13
  %75 = bitcast i8* %74 to i64*
  %76 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %77 = bitcast i64** %76 to i8**
  store i8* %74, i8** %77, align 8
  %78 = bitcast %"class.std::__1::vector"* %0 to i8**
  store i8* %74, i8** %78, align 8
  %79 = getelementptr inbounds i64, i64* %75, i64 %72
  store i64* %79, i64** %8, align 8
  %80 = bitcast i64** %76 to i64*
  %81 = ptrtoint i8* %74 to i64
  %82 = icmp sgt i64 %6, 0
  br i1 %82, label %83, label %88

83:                                               ; preds = %71
  %84 = lshr exact i64 %6, 3
  %85 = bitcast i64* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %74, i8* align 8 %85, i64 %6, i1 false) #10
  %86 = getelementptr inbounds i64, i64* %75, i64 %84
  %87 = ptrtoint i64* %86 to i64
  br label %88

88:                                               ; preds = %71, %83
  %89 = phi i64 [ %87, %83 ], [ %81, %71 ]
  store i64 %89, i64* %80, align 8
  br label %90

90:                                               ; preds = %45, %47, %88
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl7ChannelENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJS2_EEEvDpOT_(%"class.std::__1::vector.10"*, %"class.jxl::Channel"* dereferenceable(64)) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.jxl::Channel"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.10"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 6
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 288230376151711743
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.10"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #12
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.jxl::Channel"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 6
  %20 = icmp ult i64 %19, 144115188075855871
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 5
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 288230376151711743
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #12
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 288230376151711743, %14 ]
  %31 = shl i64 %30, 6
  %32 = tail call i8* @_Znwm(i64 %31) #13
  %33 = bitcast i8* %32 to %"class.jxl::Channel"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"class.jxl::Channel"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %36, i64 %9
  %38 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %36, i64 %35
  %39 = ptrtoint %"class.jxl::Channel"* %38 to i64
  %40 = bitcast %"class.jxl::Channel"* %37 to i8*
  %41 = bitcast %"class.jxl::Channel"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 24, i1 false) #10
  %42 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %36, i64 %9, i32 0, i32 0, i32 5
  %43 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %1, i64 0, i32 0, i32 0, i32 5
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %43, i64 0, i32 0, i32 0, i32 0
  %45 = bitcast %"class.std::__1::unique_ptr"* %43 to i64*
  %46 = load i64, i64* %45, align 8
  store i8* null, i8** %44, align 8
  %47 = bitcast %"class.std::__1::unique_ptr"* %42 to i64*
  store i64 %46, i64* %47, align 8
  %48 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %36, i64 %9, i32 1
  %49 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %1, i64 0, i32 1
  %50 = bitcast i64* %48 to i8*
  %51 = bitcast i64* %49 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %50, i8* align 8 %51, i64 32, i1 false) #10
  %52 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %37, i64 1
  %53 = ptrtoint %"class.jxl::Channel"* %52 to i64
  %54 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %0, i64 0, i32 0, i32 0
  %55 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %54, align 8
  %56 = ptrtoint %"class.jxl::Channel"* %55 to i64
  %57 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %3, align 8
  %58 = icmp eq %"class.jxl::Channel"* %57, %55
  br i1 %58, label %121, label %59

59:                                               ; preds = %34
  %60 = getelementptr %"class.jxl::Channel", %"class.jxl::Channel"* %57, i64 -1, i32 0, i32 0, i32 0
  %61 = ptrtoint i32* %60 to i64
  %62 = sub i64 %61, %56
  %63 = and i64 %62, 64
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %65, label %80

65:                                               ; preds = %59
  %66 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %37, i64 -1
  %67 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %57, i64 -1
  %68 = bitcast %"class.jxl::Channel"* %66 to i8*
  %69 = bitcast %"class.jxl::Channel"* %67 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %68, i8* align 8 %69, i64 24, i1 false) #10
  %70 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %37, i64 -1, i32 0, i32 0, i32 5
  %71 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %57, i64 -1, i32 0, i32 0, i32 5
  %72 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %71, i64 0, i32 0, i32 0, i32 0
  %73 = bitcast %"class.std::__1::unique_ptr"* %71 to i64*
  %74 = load i64, i64* %73, align 8
  store i8* null, i8** %72, align 8
  %75 = bitcast %"class.std::__1::unique_ptr"* %70 to i64*
  store i64 %74, i64* %75, align 8
  %76 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %37, i64 -1, i32 1
  %77 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %57, i64 -1, i32 1
  %78 = bitcast i64* %76 to i8*
  %79 = bitcast i64* %77 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %78, i8* align 8 %79, i64 32, i1 false) #10
  br label %80

80:                                               ; preds = %65, %59
  %81 = phi %"class.jxl::Channel"* [ undef, %59 ], [ %66, %65 ]
  %82 = phi %"class.jxl::Channel"* [ %37, %59 ], [ %66, %65 ]
  %83 = phi %"class.jxl::Channel"* [ %57, %59 ], [ %67, %65 ]
  %84 = icmp ult i64 %62, 64
  br i1 %84, label %117, label %85

85:                                               ; preds = %80, %85
  %86 = phi %"class.jxl::Channel"* [ %102, %85 ], [ %82, %80 ]
  %87 = phi %"class.jxl::Channel"* [ %103, %85 ], [ %83, %80 ]
  %88 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %86, i64 -1
  %89 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %87, i64 -1
  %90 = bitcast %"class.jxl::Channel"* %88 to i8*
  %91 = bitcast %"class.jxl::Channel"* %89 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %90, i8* align 8 %91, i64 24, i1 false) #10
  %92 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %86, i64 -1, i32 0, i32 0, i32 5
  %93 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %87, i64 -1, i32 0, i32 0, i32 5
  %94 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %93, i64 0, i32 0, i32 0, i32 0
  %95 = bitcast %"class.std::__1::unique_ptr"* %93 to i64*
  %96 = load i64, i64* %95, align 8
  store i8* null, i8** %94, align 8
  %97 = bitcast %"class.std::__1::unique_ptr"* %92 to i64*
  store i64 %96, i64* %97, align 8
  %98 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %86, i64 -1, i32 1
  %99 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %87, i64 -1, i32 1
  %100 = bitcast i64* %98 to i8*
  %101 = bitcast i64* %99 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %100, i8* align 8 %101, i64 32, i1 false) #10
  %102 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %86, i64 -2
  %103 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %87, i64 -2
  %104 = bitcast %"class.jxl::Channel"* %102 to i8*
  %105 = bitcast %"class.jxl::Channel"* %103 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %104, i8* align 8 %105, i64 24, i1 false) #10
  %106 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %86, i64 -2, i32 0, i32 0, i32 5
  %107 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %87, i64 -2, i32 0, i32 0, i32 5
  %108 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %107, i64 0, i32 0, i32 0, i32 0
  %109 = bitcast %"class.std::__1::unique_ptr"* %107 to i64*
  %110 = load i64, i64* %109, align 8
  store i8* null, i8** %108, align 8
  %111 = bitcast %"class.std::__1::unique_ptr"* %106 to i64*
  store i64 %110, i64* %111, align 8
  %112 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %86, i64 -2, i32 1
  %113 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %87, i64 -2, i32 1
  %114 = bitcast i64* %112 to i8*
  %115 = bitcast i64* %113 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %114, i8* align 8 %115, i64 32, i1 false) #10
  %116 = icmp eq %"class.jxl::Channel"* %103, %55
  br i1 %116, label %117, label %85

117:                                              ; preds = %85, %80
  %118 = phi %"class.jxl::Channel"* [ %81, %80 ], [ %102, %85 ]
  %119 = load i64, i64* %6, align 8
  %120 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %3, align 8
  br label %121

121:                                              ; preds = %34, %117
  %122 = phi %"class.jxl::Channel"* [ %120, %117 ], [ %55, %34 ]
  %123 = phi %"class.jxl::Channel"* [ %118, %117 ], [ %37, %34 ]
  %124 = phi i64 [ %119, %117 ], [ %56, %34 ]
  %125 = ptrtoint %"class.jxl::Channel"* %123 to i64
  store i64 %125, i64* %6, align 8
  store i64 %53, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %126 = inttoptr i64 %124 to %"class.jxl::Channel"*
  %127 = icmp eq %"class.jxl::Channel"* %122, %126
  br i1 %127, label %137, label %128

128:                                              ; preds = %121, %135
  %129 = phi %"class.jxl::Channel"* [ %130, %135 ], [ %122, %121 ]
  %130 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %129, i64 -1
  %131 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %129, i64 -1, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %132 = load i8*, i8** %131, align 8
  store i8* null, i8** %131, align 8
  %133 = icmp eq i8* %132, null
  br i1 %133, label %135, label %134

134:                                              ; preds = %128
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %132) #10
  br label %135

135:                                              ; preds = %134, %128
  %136 = icmp eq %"class.jxl::Channel"* %130, %126
  br i1 %136, label %137, label %128

137:                                              ; preds = %135, %121
  %138 = icmp eq i64 %124, 0
  br i1 %138, label %141, label %139

139:                                              ; preds = %137
  %140 = inttoptr i64 %124 to i8*
  tail call void @_ZdlPv(i8* %140) #13
  br label %141

141:                                              ; preds = %137, %139
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctpop.i64(i64) #6

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctpop.i32(i32) #6

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.usub.sat.i64(i64, i64) #6

; Function Attrs: nounwind readnone speculatable
declare <4 x float> @llvm.round.v4f32(<4 x float>) #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { inlinehint noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noreturn nounwind }
attributes #13 = { builtin nounwind }
attributes #14 = { noreturn }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5}
!5 = distinct !{!5, !"LVerDomain"}
!6 = !{!7}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
!12 = distinct !{!12, !11}
!13 = distinct !{!13, !9}
!14 = distinct !{!14, !9}
!15 = distinct !{!15, !11}
!16 = distinct !{!16, !17, !9}
!17 = !{!"llvm.loop.unroll.runtime.disable"}
!18 = !{!19}
!19 = distinct !{!19, !20}
!20 = distinct !{!20, !"LVerDomain"}
!21 = !{!22}
!22 = distinct !{!22, !20}
!23 = !{!19, !24}
!24 = distinct !{!24, !20}
!25 = !{!24}
!26 = distinct !{!26, !9}
!27 = distinct !{!27, !9}
!28 = !{i64 0, i64 65}
!29 = !{i32 0, i32 33}
!30 = !{!31}
!31 = distinct !{!31, !32}
!32 = distinct !{!32, !"LVerDomain"}
!33 = !{!34}
!34 = distinct !{!34, !32}
!35 = distinct !{!35, !9}
!36 = distinct !{!36, !9}
!37 = distinct !{!37, !11}
!38 = !{!39}
!39 = distinct !{!39, !40, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_: argument 0"}
!40 = distinct !{!40, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_"}
!41 = distinct !{!41, !11}
!42 = !{!43}
!43 = distinct !{!43, !44}
!44 = distinct !{!44, !"LVerDomain"}
!45 = !{!46}
!46 = distinct !{!46, !44}
!47 = distinct !{!47, !9}
!48 = distinct !{!48, !11}
!49 = distinct !{!49, !9}
!50 = !{!51}
!51 = distinct !{!51, !52, !"_ZNK3jxl8weighted5State15WeightedAverageEPKlNSt3__15arrayIjLm4EEE: argument 0"}
!52 = distinct !{!52, !"_ZNK3jxl8weighted5State15WeightedAverageEPKlNSt3__15arrayIjLm4EEE"}
!53 = !{!54}
!54 = distinct !{!54, !55, !"_ZNK3jxl17PassesSharedState11DCGroupRectEm: argument 0"}
!55 = distinct !{!55, !"_ZNK3jxl17PassesSharedState11DCGroupRectEm"}
!56 = !{!57}
!57 = distinct !{!57, !58}
!58 = distinct !{!58, !"LVerDomain"}
!59 = !{!60}
!60 = distinct !{!60, !58}
!61 = distinct !{!61, !9}
!62 = distinct !{!62, !11}
!63 = distinct !{!63, !9}
!64 = !{!65}
!65 = distinct !{!65, !66, !"_ZNK3jxl17PassesSharedState11DCGroupRectEm: argument 0"}
!66 = distinct !{!66, !"_ZNK3jxl17PassesSharedState11DCGroupRectEm"}
!67 = !{!68}
!68 = distinct !{!68, !69, !"_ZN3jxl20ConvertPlaneAndClampIaiEEvRKNS_4RectERKNS_5PlaneIT_EES3_PNS4_IT0_EE: argument 0"}
!69 = distinct !{!69, !"_ZN3jxl20ConvertPlaneAndClampIaiEEvRKNS_4RectERKNS_5PlaneIT_EES3_PNS4_IT0_EE"}
!70 = !{!71}
!71 = distinct !{!71, !72}
!72 = distinct !{!72, !"LVerDomain"}
!73 = !{!74}
!74 = distinct !{!74, !72}
!75 = !{!68, !71}
!76 = distinct !{!76, !9}
!77 = distinct !{!77, !9}
!78 = !{!79}
!79 = distinct !{!79, !80, !"_ZN3jxl20ConvertPlaneAndClampIaiEEvRKNS_4RectERKNS_5PlaneIT_EES3_PNS4_IT0_EE: argument 0"}
!80 = distinct !{!80, !"_ZN3jxl20ConvertPlaneAndClampIaiEEvRKNS_4RectERKNS_5PlaneIT_EES3_PNS4_IT0_EE"}
!81 = !{!82}
!82 = distinct !{!82, !83}
!83 = distinct !{!83, !"LVerDomain"}
!84 = !{!85}
!85 = distinct !{!85, !83}
!86 = !{!79, !82}
!87 = distinct !{!87, !9}
!88 = distinct !{!88, !9}
!89 = !{!90}
!90 = distinct !{!90, !91, !"_ZN3jxl15ModularStreamId10QuantTableEm: argument 0"}
!91 = distinct !{!91, !"_ZN3jxl15ModularStreamId10QuantTableEm"}
!92 = !{!93}
!93 = distinct !{!93, !94, !"_ZN3jxl15ModularStreamId10QuantTableEm: argument 0"}
!94 = distinct !{!94, !"_ZN3jxl15ModularStreamId10QuantTableEm"}
!95 = !{!96}
!96 = distinct !{!96, !97, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!97 = distinct !{!97, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!98 = !{!99}
!99 = distinct !{!99, !100, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!100 = distinct !{!100, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!101 = !{!102}
!102 = distinct !{!102, !103, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!103 = distinct !{!103, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!104 = !{!105}
!105 = distinct !{!105, !106, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!106 = distinct !{!106, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!107 = !{!108}
!108 = distinct !{!108, !109, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!109 = distinct !{!109, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!110 = !{!111}
!111 = distinct !{!111, !112, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!112 = distinct !{!112, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!113 = !{!114}
!114 = distinct !{!114, !115, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!115 = distinct !{!115, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!116 = !{!117}
!117 = distinct !{!117, !118, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!118 = distinct !{!118, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!119 = !{!120}
!120 = distinct !{!120, !121, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!121 = distinct !{!121, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!122 = distinct !{!122, !11}
!123 = distinct !{!123, !11}
!124 = distinct !{!124, !11}
!125 = distinct !{!125, !11}
!126 = distinct !{!126, !11}
!127 = !{!128}
!128 = distinct !{!128, !129, !"_ZNK3jxl8weighted5State15WeightedAverageEPKlNSt3__15arrayIjLm4EEE: argument 0"}
!129 = distinct !{!129, !"_ZNK3jxl8weighted5State15WeightedAverageEPKlNSt3__15arrayIjLm4EEE"}
!130 = distinct !{!130, !11}
!131 = !{!132}
!132 = distinct !{!132, !133}
!133 = distinct !{!133, !"LVerDomain"}
!134 = !{!135}
!135 = distinct !{!135, !133}
!136 = distinct !{!136, !9}
!137 = distinct !{!137, !9}
!138 = !{!139}
!139 = distinct !{!139, !140}
!140 = distinct !{!140, !"LVerDomain"}
!141 = !{!142}
!142 = distinct !{!142, !140}
!143 = distinct !{!143, !9}
!144 = distinct !{!144, !11}
!145 = distinct !{!145, !9}
!146 = !{!147}
!147 = distinct !{!147, !148, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!148 = distinct !{!148, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!149 = !{!150}
!150 = distinct !{!150, !151, !"_ZN3jxl12_GLOBAL__N_114PredefinedTreeENS_14ModularOptions8TreeKindEm: argument 0"}
!151 = distinct !{!151, !"_ZN3jxl12_GLOBAL__N_114PredefinedTreeENS_14ModularOptions8TreeKindEm"}
!152 = distinct !{!152, !11}
