; ModuleID = '../../third_party/blink/renderer/platform/exported/web_string.cc'
source_filename = "../../third_party/blink/renderer/platform/exported/web_string.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::WebString" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::String" = type { %class.scoped_refptr }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_string.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon.5 }
%union.anon.5 = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short" = type { [11 x i16], %struct.anon.6 }
%struct.anon.6 = type { %"struct.std::__1::__padding.7", i8 }
%"struct.std::__1::__padding.7" = type { [1 x i8] }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.11 }
%union.anon.11 = type { %"class.std::__1::basic_string.2" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__basic_string_common" = type { i8 }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>

@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8

@_ZN5blink9WebStringD1Ev = hidden unnamed_addr alias void (%"class.blink::WebString"*), void (%"class.blink::WebString"*)* @_ZN5blink9WebStringD2Ev
@_ZN5blink9WebStringC1Ev = hidden unnamed_addr alias void (%"class.blink::WebString"*), void (%"class.blink::WebString"*)* @_ZN5blink9WebStringC2Ev
@_ZN5blink9WebStringC1ERKS0_ = hidden unnamed_addr alias void (%"class.blink::WebString"*, %"class.blink::WebString"*), void (%"class.blink::WebString"*, %"class.blink::WebString"*)* @_ZN5blink9WebStringC2ERKS0_
@_ZN5blink9WebStringC1EOS0_ = hidden unnamed_addr alias void (%"class.blink::WebString"*, %"class.blink::WebString"*), void (%"class.blink::WebString"*, %"class.blink::WebString"*)* @_ZN5blink9WebStringC2EOS0_
@_ZN5blink9WebStringC1EPKDsm = hidden unnamed_addr alias void (%"class.blink::WebString"*, i16*, i64), void (%"class.blink::WebString"*, i16*, i64)* @_ZN5blink9WebStringC2EPKDsm
@_ZN5blink9WebStringC1ERKN3WTF6StringE = hidden unnamed_addr alias void (%"class.blink::WebString"*, %"class.WTF::String"*), void (%"class.blink::WebString"*, %"class.WTF::String"*)* @_ZN5blink9WebStringC2ERKN3WTF6StringE
@_ZN5blink9WebStringC1ERKN3WTF12AtomicStringE = hidden unnamed_addr alias void (%"class.blink::WebString"*, %"class.WTF::AtomicString"*), void (%"class.blink::WebString"*, %"class.WTF::AtomicString"*)* @_ZN5blink9WebStringC2ERKN3WTF12AtomicStringE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9WebStringD2Ev(%"class.blink::WebString"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::WebString", %"class.blink::WebString"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2, align 8
  %4 = icmp eq %"class.WTF::StringImpl"* %3, null
  br i1 %4, label %18, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = load atomic i32, i32* %6 monotonic, align 4
  %8 = and i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 0
  %11 = load i32, i32* %10, align 4
  br i1 %9, label %12, label %14

12:                                               ; preds = %5
  %13 = add i32 %11, -1
  store i32 %13, i32* %10, align 4
  br label %14

14:                                               ; preds = %12, %5
  %15 = phi i32 [ %13, %12 ], [ %11, %5 ]
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %14
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %3) #10
  br label %18

18:                                               ; preds = %1, %14, %17
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink9WebStringC2Ev(%"class.blink::WebString"* nocapture) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::WebString", %"class.blink::WebString"* %0, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9WebStringC2ERKS0_(%"class.blink::WebString"* nocapture, %"class.blink::WebString"* nocapture readonly dereferenceable(8)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::WebString", %"class.blink::WebString"* %1, i64 0, i32 0, i32 0
  %4 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  %5 = getelementptr inbounds %"class.blink::WebString", %"class.blink::WebString"* %0, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %4, %"class.WTF::StringImpl"** %5, align 8
  %6 = icmp eq %"class.WTF::StringImpl"* %4, null
  br i1 %6, label %24, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load atomic i32, i32* %8 monotonic, align 4
  %10 = and i32 %9, 2
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %24

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = zext i32 %14 to i33
  %16 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %15, i33 1) #10
  %17 = extractvalue { i33, i1 } %16, 1
  %18 = extractvalue { i33, i1 } %16, 0
  %19 = icmp slt i33 %18, 0
  %20 = or i1 %17, %19
  br i1 %20, label %21, label %22, !prof !2

21:                                               ; preds = %12
  tail call void @llvm.trap() #10
  unreachable

22:                                               ; preds = %12
  %23 = trunc i33 %18 to i32
  store i32 %23, i32* %13, align 4
  br label %24

24:                                               ; preds = %2, %7, %22
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink9WebStringC2EOS0_(%"class.blink::WebString"* nocapture, %"class.blink::WebString"* nocapture dereferenceable(8)) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.blink::WebString", %"class.blink::WebString"* %1, i64 0, i32 0, i32 0
  %4 = bitcast %"class.blink::WebString"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.blink::WebString"* %0 to i64*
  store i64 %5, i64* %6, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(8) %"class.blink::WebString"* @_ZN5blink9WebStringaSERKS0_(%"class.blink::WebString"* returned, %"class.blink::WebString"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::WebString", %"class.blink::WebString"* %1, i64 0, i32 0, i32 0
  %4 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  %5 = icmp eq %"class.WTF::StringImpl"* %4, null
  br i1 %5, label %23, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = and i32 %8, 2
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %23

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = zext i32 %13 to i33
  %15 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %14, i33 1) #10
  %16 = extractvalue { i33, i1 } %15, 1
  %17 = extractvalue { i33, i1 } %15, 0
  %18 = icmp slt i33 %17, 0
  %19 = or i1 %16, %18
  br i1 %19, label %20, label %21, !prof !2

20:                                               ; preds = %11
  tail call void @llvm.trap() #10
  unreachable

21:                                               ; preds = %11
  %22 = trunc i33 %17 to i32
  store i32 %22, i32* %12, align 4
  br label %23

23:                                               ; preds = %2, %6, %21
  %24 = ptrtoint %"class.WTF::StringImpl"* %4 to i64
  %25 = bitcast %"class.blink::WebString"* %0 to i64*
  %26 = getelementptr inbounds %"class.blink::WebString", %"class.blink::WebString"* %0, i64 0, i32 0, i32 0
  %27 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %26, align 8
  store i64 %24, i64* %25, align 8
  %28 = icmp eq %"class.WTF::StringImpl"* %27, null
  br i1 %28, label %42, label %29

29:                                               ; preds = %23
  %30 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = load atomic i32, i32* %30 monotonic, align 4
  %32 = and i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 0
  %35 = load i32, i32* %34, align 4
  br i1 %33, label %36, label %38

36:                                               ; preds = %29
  %37 = add i32 %35, -1
  store i32 %37, i32* %34, align 4
  br label %38

38:                                               ; preds = %36, %29
  %39 = phi i32 [ %37, %36 ], [ %35, %29 ]
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %42

41:                                               ; preds = %38
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %27) #10
  br label %42

42:                                               ; preds = %23, %38, %41
  ret %"class.blink::WebString"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(8) %"class.blink::WebString"* @_ZN5blink9WebStringaSEOS0_(%"class.blink::WebString"* returned, %"class.blink::WebString"* nocapture dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::WebString", %"class.blink::WebString"* %1, i64 0, i32 0, i32 0
  %4 = bitcast %"class.blink::WebString"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %3, align 8
  %6 = bitcast %"class.blink::WebString"* %0 to i64*
  %7 = getelementptr inbounds %"class.blink::WebString", %"class.blink::WebString"* %0, i64 0, i32 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  store i64 %5, i64* %6, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %9, label %23, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 2
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  br i1 %14, label %17, label %19

17:                                               ; preds = %10
  %18 = add i32 %16, -1
  store i32 %18, i32* %15, align 4
  br label %19

19:                                               ; preds = %17, %10
  %20 = phi i32 [ %18, %17 ], [ %16, %10 ]
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %19
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %8) #10
  br label %23

23:                                               ; preds = %2, %19, %22
  ret %"class.blink::WebString"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9WebStringC2EPKDsm(%"class.blink::WebString"* nocapture, i16*, i64) unnamed_addr #0 align 2 {
  %4 = trunc i64 %2 to i32
  %5 = tail call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl20Create8BitIfPossibleEPKDsj(i16* %1, i32 %4) #10
  %6 = getelementptr inbounds %"class.blink::WebString", %"class.blink::WebString"* %0, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %5, %"class.WTF::StringImpl"** %6, align 8
  ret void
}

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl20Create8BitIfPossibleEPKDsj(i16*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9WebString5ResetEv(%"class.blink::WebString"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = bitcast %"class.blink::WebString"* %0 to i64*
  %3 = getelementptr inbounds %"class.blink::WebString", %"class.blink::WebString"* %0, i64 0, i32 0, i32 0
  %4 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  store i64 0, i64* %2, align 8
  %5 = icmp eq %"class.WTF::StringImpl"* %4, null
  br i1 %5, label %19, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = and i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 0
  %12 = load i32, i32* %11, align 4
  br i1 %10, label %13, label %15

13:                                               ; preds = %6
  %14 = add i32 %12, -1
  store i32 %14, i32* %11, align 4
  br label %15

15:                                               ; preds = %13, %6
  %16 = phi i32 [ %14, %13 ], [ %12, %6 ]
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %19

18:                                               ; preds = %15
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %4) #10
  br label %19

19:                                               ; preds = %1, %15, %18
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK5blink9WebString6lengthEv(%"class.blink::WebString"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.blink::WebString", %"class.blink::WebString"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2, align 8
  %4 = icmp eq %"class.WTF::StringImpl"* %3, null
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = zext i32 %7 to i64
  br label %9

9:                                                ; preds = %1, %5
  %10 = phi i64 [ %8, %5 ], [ 0, %1 ]
  ret i64 %10
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink9WebString6Is8BitEv(%"class.blink::WebString"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.blink::WebString", %"class.blink::WebString"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2, align 8
  %4 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = load atomic i32, i32* %4 monotonic, align 4
  %6 = and i32 %5, 1
  %7 = icmp ne i32 %6, 0
  ret i1 %7
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i8* @_ZNK5blink9WebString5Data8Ev(%"class.blink::WebString"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.blink::WebString", %"class.blink::WebString"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2, align 8
  %4 = icmp eq %"class.WTF::StringImpl"* %3, null
  br i1 %4, label %13, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = load atomic i32, i32* %6 monotonic, align 4
  %8 = and i32 %7, 1
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 1
  %12 = bitcast %"class.WTF::StringImpl"* %11 to i8*
  br label %13

13:                                               ; preds = %5, %1, %10
  %14 = phi i8* [ %12, %10 ], [ null, %5 ], [ null, %1 ]
  ret i8* %14
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i16* @_ZNK5blink9WebString6Data16Ev(%"class.blink::WebString"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.blink::WebString", %"class.blink::WebString"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2, align 8
  %4 = icmp eq %"class.WTF::StringImpl"* %3, null
  br i1 %4, label %13, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = load atomic i32, i32* %6 monotonic, align 4
  %8 = and i32 %7, 1
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %13

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 1
  %12 = bitcast %"class.WTF::StringImpl"* %11 to i16*
  br label %13

13:                                               ; preds = %5, %1, %10
  %14 = phi i16* [ %12, %10 ], [ null, %5 ], [ null, %1 ]
  ret i16* %14
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink9WebString4Utf8ENS0_18UTF8ConversionModeE(%"class.std::__1::basic_string"* noalias sret, %"class.blink::WebString"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.WTF::String", align 8
  %5 = bitcast %"class.WTF::String"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.blink::WebString", %"class.blink::WebString"* %1, i64 0, i32 0, i32 0
  %7 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  %8 = icmp eq %"class.WTF::StringImpl"* %7, null
  br i1 %8, label %26, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load atomic i32, i32* %10 monotonic, align 4
  %12 = and i32 %11, 2
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %26

14:                                               ; preds = %9
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = zext i32 %16 to i33
  %18 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %17, i33 1) #10
  %19 = extractvalue { i33, i1 } %18, 1
  %20 = extractvalue { i33, i1 } %18, 0
  %21 = icmp slt i33 %20, 0
  %22 = or i1 %19, %21
  br i1 %22, label %23, label %24, !prof !2

23:                                               ; preds = %14
  tail call void @llvm.trap() #10
  unreachable

24:                                               ; preds = %14
  %25 = trunc i33 %20 to i32
  store i32 %25, i32* %15, align 4
  br label %26

26:                                               ; preds = %3, %9, %24
  %27 = ptrtoint %"class.WTF::StringImpl"* %7 to i64
  %28 = bitcast %"class.WTF::String"* %4 to i64*
  store i64 %27, i64* %28, align 8
  call void @_ZNK3WTF6String4Utf8ENS_18UTF8ConversionModeE(%"class.std::__1::basic_string"* sret %0, %"class.WTF::String"* nonnull %4, i32 %2) #10
  %29 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %4, i64 0, i32 0, i32 0
  %30 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %29, align 8
  %31 = icmp eq %"class.WTF::StringImpl"* %30, null
  br i1 %31, label %45, label %32

32:                                               ; preds = %26
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %30, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = load atomic i32, i32* %33 monotonic, align 4
  %35 = and i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %30, i64 0, i32 0
  %38 = load i32, i32* %37, align 4
  br i1 %36, label %39, label %41

39:                                               ; preds = %32
  %40 = add i32 %38, -1
  store i32 %40, i32* %37, align 4
  br label %41

41:                                               ; preds = %39, %32
  %42 = phi i32 [ %40, %39 ], [ %38, %32 ]
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %45

44:                                               ; preds = %41
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %30) #10
  br label %45

45:                                               ; preds = %26, %41, %44
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

declare void @_ZNK3WTF6String4Utf8ENS_18UTF8ConversionModeE(%"class.std::__1::basic_string"* sret, %"class.WTF::String"*, i32) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink9WebString9SubstringEmm(%"class.blink::WebString"* noalias nocapture sret, %"class.blink::WebString"* nocapture readonly, i64, i64) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.blink::WebString", %"class.blink::WebString"* %1, i64 0, i32 0, i32 0
  %6 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  %7 = trunc i64 %2 to i32
  %8 = trunc i64 %3 to i32
  %9 = tail call %"class.WTF::StringImpl"* @_ZNK3WTF10StringImpl9SubstringEjj(%"class.WTF::StringImpl"* %6, i32 %7, i32 %8) #10
  %10 = getelementptr inbounds %"class.blink::WebString", %"class.blink::WebString"* %0, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %9, %"class.WTF::StringImpl"** %10, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %9, null
  br i1 %11, label %41, label %12

12:                                               ; preds = %4
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = and i32 %14, 2
  %16 = icmp eq i32 %15, 0
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 0
  %18 = load i32, i32* %17, align 4
  br i1 %16, label %19, label %29

19:                                               ; preds = %12
  %20 = zext i32 %18 to i33
  %21 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %20, i33 1) #10
  %22 = extractvalue { i33, i1 } %21, 1
  %23 = extractvalue { i33, i1 } %21, 0
  %24 = icmp slt i33 %23, 0
  %25 = or i1 %22, %24
  br i1 %25, label %26, label %27, !prof !2

26:                                               ; preds = %19
  tail call void @llvm.trap() #10
  unreachable

27:                                               ; preds = %19
  %28 = trunc i33 %23 to i32
  store i32 %28, i32* %17, align 4
  br label %29

29:                                               ; preds = %12, %27
  %30 = phi i32 [ %28, %27 ], [ %18, %12 ]
  %31 = load atomic i32, i32* %13 monotonic, align 4
  %32 = and i32 %31, 2
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %37

34:                                               ; preds = %29
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 0
  %36 = add i32 %30, -1
  store i32 %36, i32* %35, align 4
  br label %37

37:                                               ; preds = %34, %29
  %38 = phi i32 [ %36, %34 ], [ %30, %29 ]
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %41

40:                                               ; preds = %37
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %9) #10
  br label %41

41:                                               ; preds = %4, %37, %40
  ret void
}

declare %"class.WTF::StringImpl"* @_ZNK3WTF10StringImpl9SubstringEjj(%"class.WTF::StringImpl"*, i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9WebString8FromUTF8EPKcm(%"class.blink::WebString"* noalias nocapture sret, i8*, i64) local_unnamed_addr #0 align 2 {
  %4 = tail call %"class.WTF::StringImpl"* @_ZN3WTF6String8FromUTF8EPKhm(i8* %1, i64 %2) #10
  %5 = getelementptr inbounds %"class.blink::WebString", %"class.blink::WebString"* %0, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %4, %"class.WTF::StringImpl"** %5, align 8
  %6 = icmp eq %"class.WTF::StringImpl"* %4, null
  br i1 %6, label %36, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load atomic i32, i32* %8 monotonic, align 4
  %10 = and i32 %9, 2
  %11 = icmp eq i32 %10, 0
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 0
  %13 = load i32, i32* %12, align 4
  br i1 %11, label %14, label %24

14:                                               ; preds = %7
  %15 = zext i32 %13 to i33
  %16 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %15, i33 1) #10
  %17 = extractvalue { i33, i1 } %16, 1
  %18 = extractvalue { i33, i1 } %16, 0
  %19 = icmp slt i33 %18, 0
  %20 = or i1 %17, %19
  br i1 %20, label %21, label %22, !prof !2

21:                                               ; preds = %14
  tail call void @llvm.trap() #10
  unreachable

22:                                               ; preds = %14
  %23 = trunc i33 %18 to i32
  store i32 %23, i32* %12, align 4
  br label %24

24:                                               ; preds = %7, %22
  %25 = phi i32 [ %23, %22 ], [ %13, %7 ]
  %26 = load atomic i32, i32* %8 monotonic, align 4
  %27 = and i32 %26, 2
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %32

29:                                               ; preds = %24
  %30 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 0
  %31 = add i32 %25, -1
  store i32 %31, i32* %30, align 4
  br label %32

32:                                               ; preds = %29, %24
  %33 = phi i32 [ %31, %29 ], [ %25, %24 ]
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %36

35:                                               ; preds = %32
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %4) #10
  br label %36

36:                                               ; preds = %3, %32, %35
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9WebString9FromUTF16EPKDs(%"class.blink::WebString"* noalias nocapture sret, i16*) local_unnamed_addr #0 align 2 {
  %3 = load i16, i16* %1, align 2
  %4 = icmp eq i16 %3, 0
  br i1 %4, label %14, label %5

5:                                                ; preds = %2, %5
  %6 = phi i64 [ %8, %5 ], [ 0, %2 ]
  %7 = phi i16* [ %9, %5 ], [ %1, %2 ]
  %8 = add i64 %6, 1
  %9 = getelementptr inbounds i16, i16* %7, i64 1
  %10 = load i16, i16* %9, align 2
  %11 = icmp eq i16 %10, 0
  br i1 %11, label %12, label %5

12:                                               ; preds = %5
  %13 = trunc i64 %8 to i32
  br label %14

14:                                               ; preds = %12, %2
  %15 = phi i32 [ 0, %2 ], [ %13, %12 ]
  %16 = tail call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl20Create8BitIfPossibleEPKDsj(i16* %1, i32 %15) #10
  %17 = getelementptr inbounds %"class.blink::WebString", %"class.blink::WebString"* %0, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %16, %"class.WTF::StringImpl"** %17, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9WebString9FromUTF16ERKNSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEE(%"class.blink::WebString"* noalias nocapture sret, %"class.std::__1::basic_string.2"* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.std::__1::basic_string.2"* %1 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %4 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %3, i64 0, i32 1, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = icmp slt i8 %5, 0
  %7 = getelementptr inbounds %"class.std::__1::basic_string.2", %"class.std::__1::basic_string.2"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = load i16*, i16** %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::basic_string.2", %"class.std::__1::basic_string.2"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::basic_string.2"* %1 to i16*
  %12 = zext i8 %5 to i64
  %13 = select i1 %6, i16* %8, i16* %11
  %14 = select i1 %6, i64 %10, i64 %12
  %15 = trunc i64 %14 to i32
  %16 = tail call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl20Create8BitIfPossibleEPKDsj(i16* %13, i32 %15) #10
  %17 = getelementptr inbounds %"class.blink::WebString", %"class.blink::WebString"* %0, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %16, %"class.WTF::StringImpl"** %17, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9WebString9FromUTF16ERKN4absl8optionalINSt3__112basic_stringIDsNS3_11char_traitsIDsEENS3_9allocatorIDsEEEEEE(%"class.blink::WebString"* noalias nocapture sret, %"class.absl::optional"* dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i8, i8* %3, align 8, !range !3
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %22, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %8 = bitcast %"class.std::__1::basic_string.2"* %7 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %9 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %8, i64 0, i32 1, i32 1
  %10 = load i8, i8* %9, align 1
  %11 = icmp slt i8 %10, 0
  %12 = getelementptr inbounds %"class.std::__1::basic_string.2", %"class.std::__1::basic_string.2"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load i16*, i16** %12, align 8
  %14 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = bitcast %"class.std::__1::basic_string.2"* %7 to i16*
  %17 = zext i8 %10 to i64
  %18 = select i1 %11, i16* %13, i16* %16
  %19 = select i1 %11, i64 %15, i64 %17
  %20 = trunc i64 %19 to i32
  %21 = tail call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl20Create8BitIfPossibleEPKDsj(i16* %18, i32 %20) #10
  br label %22

22:                                               ; preds = %2, %6
  %23 = phi %"class.WTF::StringImpl"* [ %21, %6 ], [ null, %2 ]
  %24 = getelementptr inbounds %"class.blink::WebString", %"class.blink::WebString"* %0, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %23, %"class.WTF::StringImpl"** %24, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink9WebString6Latin1Ev(%"class.std::__1::basic_string"* noalias sret, %"class.blink::WebString"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::String", align 8
  %4 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #10
  %5 = getelementptr inbounds %"class.blink::WebString", %"class.blink::WebString"* %1, i64 0, i32 0, i32 0
  %6 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  %7 = icmp eq %"class.WTF::StringImpl"* %6, null
  br i1 %7, label %25, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 2
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %25

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = zext i32 %15 to i33
  %17 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %16, i33 1) #10
  %18 = extractvalue { i33, i1 } %17, 1
  %19 = extractvalue { i33, i1 } %17, 0
  %20 = icmp slt i33 %19, 0
  %21 = or i1 %18, %20
  br i1 %21, label %22, label %23, !prof !2

22:                                               ; preds = %13
  tail call void @llvm.trap() #10
  unreachable

23:                                               ; preds = %13
  %24 = trunc i33 %19 to i32
  store i32 %24, i32* %14, align 4
  br label %25

25:                                               ; preds = %2, %8, %23
  %26 = ptrtoint %"class.WTF::StringImpl"* %6 to i64
  %27 = bitcast %"class.WTF::String"* %3 to i64*
  store i64 %26, i64* %27, align 8
  call void @_ZNK3WTF6String6Latin1Ev(%"class.std::__1::basic_string"* sret %0, %"class.WTF::String"* nonnull %3) #10
  %28 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %29 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %28, align 8
  %30 = icmp eq %"class.WTF::StringImpl"* %29, null
  br i1 %30, label %44, label %31

31:                                               ; preds = %25
  %32 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %29, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = load atomic i32, i32* %32 monotonic, align 4
  %34 = and i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %29, i64 0, i32 0
  %37 = load i32, i32* %36, align 4
  br i1 %35, label %38, label %40

38:                                               ; preds = %31
  %39 = add i32 %37, -1
  store i32 %39, i32* %36, align 4
  br label %40

40:                                               ; preds = %38, %31
  %41 = phi i32 [ %39, %38 ], [ %37, %31 ]
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %44

43:                                               ; preds = %40
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %29) #10
  br label %44

44:                                               ; preds = %25, %40, %43
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #10
  ret void
}

declare void @_ZNK3WTF6String6Latin1Ev(%"class.std::__1::basic_string"* sret, %"class.WTF::String"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9WebString10FromLatin1EPKhm(%"class.blink::WebString"* noalias nocapture sret, i8*, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.WTF::String", align 8
  %5 = bitcast %"class.WTF::String"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = trunc i64 %2 to i32
  call void @_ZN3WTF6StringC1EPKhj(%"class.WTF::String"* nonnull %4, i8* %1, i32 %6) #10
  %7 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %4, i64 0, i32 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.blink::WebString", %"class.blink::WebString"* %0, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %8, %"class.WTF::StringImpl"** %9, align 8
  %10 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %10, label %44, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 2
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %30

16:                                               ; preds = %11
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i33
  %20 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %19, i33 1) #10
  %21 = extractvalue { i33, i1 } %20, 1
  %22 = extractvalue { i33, i1 } %20, 0
  %23 = icmp slt i33 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %25, label %26, !prof !2

25:                                               ; preds = %16
  call void @llvm.trap() #10
  unreachable

26:                                               ; preds = %16
  %27 = trunc i33 %22 to i32
  store i32 %27, i32* %17, align 4
  %28 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %29 = icmp eq %"class.WTF::StringImpl"* %28, null
  br i1 %29, label %44, label %30

30:                                               ; preds = %11, %26
  %31 = phi %"class.WTF::StringImpl"* [ %28, %26 ], [ %8, %11 ]
  %32 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = load atomic i32, i32* %32 monotonic, align 4
  %34 = and i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 0, i32 0
  %37 = load i32, i32* %36, align 4
  br i1 %35, label %38, label %40

38:                                               ; preds = %30
  %39 = add i32 %37, -1
  store i32 %39, i32* %36, align 4
  br label %40

40:                                               ; preds = %38, %30
  %41 = phi i32 [ %39, %38 ], [ %37, %30 ]
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %44

43:                                               ; preds = %40
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %31) #10
  br label %44

44:                                               ; preds = %3, %26, %40, %43
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  ret void
}

declare void @_ZN3WTF6StringC1EPKhj(%"class.WTF::String"*, i8*, i32) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink9WebString5AsciiEv(%"class.std::__1::basic_string"* noalias sret, %"class.blink::WebString"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::WebString", %"class.blink::WebString"* %1, i64 0, i32 0, i32 0
  %4 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  %5 = bitcast %"class.WTF::StringImpl"* %4 to i8*
  %6 = icmp eq %"class.WTF::StringImpl"* %4, null
  br i1 %6, label %11, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %13

11:                                               ; preds = %2, %7
  %12 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 24, i1 false) #10
  br label %212

13:                                               ; preds = %7
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load atomic i32, i32* %14 monotonic, align 4
  %16 = and i32 %15, 1
  %17 = icmp eq i32 %16, 0
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 1
  %19 = bitcast %"class.WTF::StringImpl"* %18 to i8*
  br i1 %17, label %39, label %20

20:                                               ; preds = %13
  %21 = zext i32 %9 to i64
  %22 = icmp ult i32 %9, 23
  br i1 %22, label %31, label %23

23:                                               ; preds = %20
  %24 = add nuw nsw i64 %21, 16
  %25 = and i64 %24, 8589934576
  %26 = tail call i8* @_Znwm(i64 %25) #11
  %27 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %26, i8** %27, align 8
  %28 = or i64 %25, -9223372036854775808
  %29 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %28, i64* %29, align 8
  %30 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %21, i64* %30, align 8
  br label %36

31:                                               ; preds = %20
  %32 = trunc i32 %9 to i8
  %33 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %34 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %33, i64 0, i32 1, i32 0
  store i8 %32, i8* %34, align 1
  %35 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  br label %36

36:                                               ; preds = %23, %31
  %37 = phi i8* [ %26, %23 ], [ %35, %31 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %37, i8* align 1 %19, i64 %21, i1 false) #10
  %38 = getelementptr inbounds i8, i8* %37, i64 %21
  store i8 0, i8* %38, align 1
  br label %212

39:                                               ; preds = %13
  %40 = bitcast %"class.WTF::StringImpl"* %18 to i16*
  %41 = zext i32 %9 to i64
  %42 = getelementptr inbounds i16, i16* %40, i64 %41
  %43 = ptrtoint i16* %42 to i64
  %44 = ptrtoint %"class.WTF::StringImpl"* %18 to i64
  %45 = sub i64 %43, %44
  %46 = ashr exact i64 %45, 1
  %47 = icmp ugt i64 %46, -17
  br i1 %47, label %48, label %50

48:                                               ; preds = %39
  %49 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %49) #12
  unreachable

50:                                               ; preds = %39
  %51 = icmp ult i64 %46, 23
  br i1 %51, label %52, label %57

52:                                               ; preds = %50
  %53 = trunc i64 %46 to i8
  %54 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %55 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %54, i64 0, i32 1, i32 0
  store i8 %53, i8* %55, align 1
  %56 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  br label %65

57:                                               ; preds = %50
  %58 = add nsw i64 %46, 16
  %59 = and i64 %58, -16
  %60 = tail call i8* @_Znwm(i64 %59) #11
  %61 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %60, i8** %61, align 8
  %62 = or i64 %59, -9223372036854775808
  %63 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %62, i64* %63, align 8
  %64 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %46, i64* %64, align 8
  br label %65

65:                                               ; preds = %57, %52
  %66 = phi i8* [ %56, %52 ], [ %60, %57 ]
  %67 = icmp eq i16* %42, %40
  br i1 %67, label %210, label %68

68:                                               ; preds = %65
  %69 = shl nuw nsw i64 %41, 1
  %70 = add nsw i64 %69, -2
  %71 = lshr exact i64 %70, 1
  %72 = add nuw i64 %71, 1
  %73 = icmp ult i64 %72, 16
  br i1 %73, label %146, label %74

74:                                               ; preds = %68
  %75 = shl nuw nsw i64 %41, 1
  %76 = add nsw i64 %75, -2
  %77 = lshr exact i64 %76, 1
  %78 = add nuw i64 %77, 1
  %79 = getelementptr i8, i8* %66, i64 %78
  %80 = getelementptr %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 1, i32 0
  %81 = bitcast i32* %80 to i8*
  %82 = getelementptr i8, i8* %81, i64 %75
  %83 = icmp ult i8* %66, %82
  %84 = icmp ugt i8* %79, %19
  %85 = and i1 %83, %84
  br i1 %85, label %146, label %86

86:                                               ; preds = %74
  %87 = and i64 %72, -16
  %88 = getelementptr i16, i16* %40, i64 %87
  %89 = getelementptr i8, i8* %66, i64 %87
  %90 = add i64 %87, -16
  %91 = lshr exact i64 %90, 4
  %92 = add nuw nsw i64 %91, 1
  %93 = and i64 %92, 1
  %94 = icmp eq i64 %90, 0
  br i1 %94, label %128, label %95

95:                                               ; preds = %86
  %96 = sub nuw nsw i64 %92, %93
  br label %97

97:                                               ; preds = %97, %95
  %98 = phi i64 [ 0, %95 ], [ %125, %97 ]
  %99 = phi i64 [ %96, %95 ], [ %126, %97 ]
  %100 = getelementptr i16, i16* %40, i64 %98
  %101 = getelementptr i8, i8* %66, i64 %98
  %102 = bitcast i16* %100 to <8 x i16>*
  %103 = load <8 x i16>, <8 x i16>* %102, align 2, !alias.scope !4
  %104 = getelementptr i16, i16* %100, i64 8
  %105 = bitcast i16* %104 to <8 x i16>*
  %106 = load <8 x i16>, <8 x i16>* %105, align 2, !alias.scope !4
  %107 = trunc <8 x i16> %103 to <8 x i8>
  %108 = trunc <8 x i16> %106 to <8 x i8>
  %109 = bitcast i8* %101 to <8 x i8>*
  store <8 x i8> %107, <8 x i8>* %109, align 1, !alias.scope !7, !noalias !4
  %110 = getelementptr i8, i8* %101, i64 8
  %111 = bitcast i8* %110 to <8 x i8>*
  store <8 x i8> %108, <8 x i8>* %111, align 1, !alias.scope !7, !noalias !4
  %112 = or i64 %98, 16
  %113 = getelementptr i16, i16* %40, i64 %112
  %114 = getelementptr i8, i8* %66, i64 %112
  %115 = bitcast i16* %113 to <8 x i16>*
  %116 = load <8 x i16>, <8 x i16>* %115, align 2, !alias.scope !4
  %117 = getelementptr i16, i16* %113, i64 8
  %118 = bitcast i16* %117 to <8 x i16>*
  %119 = load <8 x i16>, <8 x i16>* %118, align 2, !alias.scope !4
  %120 = trunc <8 x i16> %116 to <8 x i8>
  %121 = trunc <8 x i16> %119 to <8 x i8>
  %122 = bitcast i8* %114 to <8 x i8>*
  store <8 x i8> %120, <8 x i8>* %122, align 1, !alias.scope !7, !noalias !4
  %123 = getelementptr i8, i8* %114, i64 8
  %124 = bitcast i8* %123 to <8 x i8>*
  store <8 x i8> %121, <8 x i8>* %124, align 1, !alias.scope !7, !noalias !4
  %125 = add i64 %98, 32
  %126 = add i64 %99, -2
  %127 = icmp eq i64 %126, 0
  br i1 %127, label %128, label %97, !llvm.loop !9

128:                                              ; preds = %97, %86
  %129 = phi i64 [ 0, %86 ], [ %125, %97 ]
  %130 = icmp eq i64 %93, 0
  br i1 %130, label %144, label %131

131:                                              ; preds = %128
  %132 = getelementptr i16, i16* %40, i64 %129
  %133 = getelementptr i8, i8* %66, i64 %129
  %134 = bitcast i16* %132 to <8 x i16>*
  %135 = load <8 x i16>, <8 x i16>* %134, align 2, !alias.scope !4
  %136 = getelementptr i16, i16* %132, i64 8
  %137 = bitcast i16* %136 to <8 x i16>*
  %138 = load <8 x i16>, <8 x i16>* %137, align 2, !alias.scope !4
  %139 = trunc <8 x i16> %135 to <8 x i8>
  %140 = trunc <8 x i16> %138 to <8 x i8>
  %141 = bitcast i8* %133 to <8 x i8>*
  store <8 x i8> %139, <8 x i8>* %141, align 1, !alias.scope !7, !noalias !4
  %142 = getelementptr i8, i8* %133, i64 8
  %143 = bitcast i8* %142 to <8 x i8>*
  store <8 x i8> %140, <8 x i8>* %143, align 1, !alias.scope !7, !noalias !4
  br label %144

144:                                              ; preds = %128, %131
  %145 = icmp eq i64 %72, %87
  br i1 %145, label %210, label %146

146:                                              ; preds = %144, %74, %68
  %147 = phi i16* [ %40, %74 ], [ %40, %68 ], [ %88, %144 ]
  %148 = phi i8* [ %66, %74 ], [ %66, %68 ], [ %89, %144 ]
  %149 = ptrtoint i16* %147 to i64
  %150 = shl nuw nsw i64 %41, 1
  %151 = add nuw nsw i64 %150, 10
  %152 = sub i64 %151, %149
  %153 = getelementptr i8, i8* %5, i64 %152
  %154 = ptrtoint i8* %153 to i64
  %155 = lshr i64 %154, 1
  %156 = add nuw i64 %155, 1
  %157 = and i64 %156, 7
  %158 = icmp eq i64 %157, 0
  br i1 %158, label %169, label %159

159:                                              ; preds = %146, %159
  %160 = phi i16* [ %165, %159 ], [ %147, %146 ]
  %161 = phi i8* [ %166, %159 ], [ %148, %146 ]
  %162 = phi i64 [ %167, %159 ], [ %157, %146 ]
  %163 = load i16, i16* %160, align 2
  %164 = trunc i16 %163 to i8
  store i8 %164, i8* %161, align 1
  %165 = getelementptr inbounds i16, i16* %160, i64 1
  %166 = getelementptr inbounds i8, i8* %161, i64 1
  %167 = add i64 %162, -1
  %168 = icmp eq i64 %167, 0
  br i1 %168, label %169, label %159, !llvm.loop !11

169:                                              ; preds = %159, %146
  %170 = phi i8* [ undef, %146 ], [ %166, %159 ]
  %171 = phi i16* [ %147, %146 ], [ %165, %159 ]
  %172 = phi i8* [ %148, %146 ], [ %166, %159 ]
  %173 = icmp ult i8* %153, inttoptr (i64 14 to i8*)
  br i1 %173, label %210, label %174

174:                                              ; preds = %169, %174
  %175 = phi i16* [ %207, %174 ], [ %171, %169 ]
  %176 = phi i8* [ %208, %174 ], [ %172, %169 ]
  %177 = load i16, i16* %175, align 2
  %178 = trunc i16 %177 to i8
  store i8 %178, i8* %176, align 1
  %179 = getelementptr inbounds i16, i16* %175, i64 1
  %180 = getelementptr inbounds i8, i8* %176, i64 1
  %181 = load i16, i16* %179, align 2
  %182 = trunc i16 %181 to i8
  store i8 %182, i8* %180, align 1
  %183 = getelementptr inbounds i16, i16* %175, i64 2
  %184 = getelementptr inbounds i8, i8* %176, i64 2
  %185 = load i16, i16* %183, align 2
  %186 = trunc i16 %185 to i8
  store i8 %186, i8* %184, align 1
  %187 = getelementptr inbounds i16, i16* %175, i64 3
  %188 = getelementptr inbounds i8, i8* %176, i64 3
  %189 = load i16, i16* %187, align 2
  %190 = trunc i16 %189 to i8
  store i8 %190, i8* %188, align 1
  %191 = getelementptr inbounds i16, i16* %175, i64 4
  %192 = getelementptr inbounds i8, i8* %176, i64 4
  %193 = load i16, i16* %191, align 2
  %194 = trunc i16 %193 to i8
  store i8 %194, i8* %192, align 1
  %195 = getelementptr inbounds i16, i16* %175, i64 5
  %196 = getelementptr inbounds i8, i8* %176, i64 5
  %197 = load i16, i16* %195, align 2
  %198 = trunc i16 %197 to i8
  store i8 %198, i8* %196, align 1
  %199 = getelementptr inbounds i16, i16* %175, i64 6
  %200 = getelementptr inbounds i8, i8* %176, i64 6
  %201 = load i16, i16* %199, align 2
  %202 = trunc i16 %201 to i8
  store i8 %202, i8* %200, align 1
  %203 = getelementptr inbounds i16, i16* %175, i64 7
  %204 = getelementptr inbounds i8, i8* %176, i64 7
  %205 = load i16, i16* %203, align 2
  %206 = trunc i16 %205 to i8
  store i8 %206, i8* %204, align 1
  %207 = getelementptr inbounds i16, i16* %175, i64 8
  %208 = getelementptr inbounds i8, i8* %176, i64 8
  %209 = icmp eq i16* %207, %42
  br i1 %209, label %210, label %174, !llvm.loop !13

210:                                              ; preds = %169, %174, %144, %65
  %211 = phi i8* [ %66, %65 ], [ %89, %144 ], [ %170, %169 ], [ %208, %174 ]
  store i8 0, i8* %211, align 1
  br label %212

212:                                              ; preds = %210, %36, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink9WebString17ContainsOnlyASCIIEv(%"class.blink::WebString"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::WebString", %"class.blink::WebString"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2, align 8
  %4 = icmp eq %"class.WTF::StringImpl"* %3, null
  br i1 %4, label %43, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = load atomic i32, i32* %6 monotonic, align 4
  %8 = and i32 %7, 2
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %22

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = zext i32 %12 to i33
  %14 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %13, i33 1) #10
  %15 = extractvalue { i33, i1 } %14, 1
  %16 = extractvalue { i33, i1 } %14, 0
  %17 = icmp slt i33 %16, 0
  %18 = or i1 %15, %17
  br i1 %18, label %19, label %20, !prof !2

19:                                               ; preds = %10
  tail call void @llvm.trap() #10
  unreachable

20:                                               ; preds = %10
  %21 = trunc i33 %16 to i32
  store i32 %21, i32* %11, align 4
  br label %22

22:                                               ; preds = %5, %20
  %23 = load atomic i32, i32* %6 monotonic, align 4
  %24 = and i32 %23, 8
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %28

26:                                               ; preds = %22
  %27 = tail call i32 @_ZNK3WTF10StringImpl17ComputeASCIIFlagsEv(%"class.WTF::StringImpl"* nonnull %3) #10
  br label %28

28:                                               ; preds = %26, %22
  %29 = phi i32 [ %27, %26 ], [ %23, %22 ]
  %30 = and i32 %29, 16
  %31 = icmp ne i32 %30, 0
  %32 = load atomic i32, i32* %6 monotonic, align 4
  %33 = and i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 0
  %36 = load i32, i32* %35, align 4
  br i1 %34, label %37, label %39

37:                                               ; preds = %28
  %38 = add i32 %36, -1
  store i32 %38, i32* %35, align 4
  br label %39

39:                                               ; preds = %37, %28
  %40 = phi i32 [ %38, %37 ], [ %36, %28 ]
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %39
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %3) #10
  br label %43

43:                                               ; preds = %1, %39, %42
  %44 = phi i1 [ %31, %39 ], [ %31, %42 ], [ true, %1 ]
  ret i1 %44
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9WebString9FromASCIIERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.blink::WebString"* noalias nocapture sret, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::String", align 8
  %4 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %5 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %4, i64 0, i32 1, i32 0
  %6 = load i8, i8* %5, align 1, !noalias !14
  %7 = icmp slt i8 %6, 0
  %8 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8, !noalias !14
  %10 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %11 = load i64, i64* %10, align 8, !noalias !14
  %12 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  %13 = zext i8 %6 to i64
  %14 = select i1 %7, i8* %9, i8* %12
  %15 = select i1 %7, i64 %11, i64 %13
  %16 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #10, !noalias !17
  %17 = trunc i64 %15 to i32
  call void @_ZN3WTF6StringC1EPKhj(%"class.WTF::String"* nonnull %3, i8* %14, i32 %17) #10, !noalias !17
  %18 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %19 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8, !noalias !17
  %20 = getelementptr inbounds %"class.blink::WebString", %"class.blink::WebString"* %0, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %19, %"class.WTF::StringImpl"** %20, align 8, !alias.scope !17
  %21 = icmp eq %"class.WTF::StringImpl"* %19, null
  br i1 %21, label %55, label %22

22:                                               ; preds = %2
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = load atomic i32, i32* %23 monotonic, align 4, !noalias !17
  %25 = and i32 %24, 2
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %41

27:                                               ; preds = %22
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 0
  %29 = load i32, i32* %28, align 4, !noalias !17
  %30 = zext i32 %29 to i33
  %31 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %30, i33 1) #10
  %32 = extractvalue { i33, i1 } %31, 1
  %33 = extractvalue { i33, i1 } %31, 0
  %34 = icmp slt i33 %33, 0
  %35 = or i1 %32, %34
  br i1 %35, label %36, label %37, !prof !2

36:                                               ; preds = %27
  call void @llvm.trap() #10, !noalias !17
  unreachable

37:                                               ; preds = %27
  %38 = trunc i33 %33 to i32
  store i32 %38, i32* %28, align 4, !noalias !17
  %39 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8, !noalias !17
  %40 = icmp eq %"class.WTF::StringImpl"* %39, null
  br i1 %40, label %55, label %41

41:                                               ; preds = %37, %22
  %42 = phi %"class.WTF::StringImpl"* [ %39, %37 ], [ %19, %22 ]
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = load atomic i32, i32* %43 monotonic, align 4, !noalias !17
  %45 = and i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 0
  %48 = load i32, i32* %47, align 4, !noalias !17
  br i1 %46, label %49, label %51

49:                                               ; preds = %41
  %50 = add i32 %48, -1
  store i32 %50, i32* %47, align 4, !noalias !17
  br label %51

51:                                               ; preds = %49, %41
  %52 = phi i32 [ %50, %49 ], [ %48, %41 ]
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %55

54:                                               ; preds = %51
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %42) #10, !noalias !17
  br label %55

55:                                               ; preds = %2, %37, %51, %54
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #10, !noalias !17
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink9WebString12IsolatedCopyEv(%"class.blink::WebString"* noalias nocapture sret, %"class.blink::WebString"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::String", align 8
  %4 = getelementptr inbounds %"class.blink::WebString", %"class.blink::WebString"* %1, i64 0, i32 0, i32 0
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %6 = icmp eq %"class.WTF::StringImpl"* %5, null
  br i1 %6, label %7, label %9

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.blink::WebString", %"class.blink::WebString"* %0, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %8, align 8
  br label %80

9:                                                ; preds = %2
  %10 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #10
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 2
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %27

15:                                               ; preds = %9
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = zext i32 %17 to i33
  %19 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %18, i33 1) #10
  %20 = extractvalue { i33, i1 } %19, 1
  %21 = extractvalue { i33, i1 } %19, 0
  %22 = icmp slt i33 %21, 0
  %23 = or i1 %20, %22
  br i1 %23, label %24, label %25, !prof !2

24:                                               ; preds = %15
  tail call void @llvm.trap() #10
  unreachable

25:                                               ; preds = %15
  %26 = trunc i33 %21 to i32
  store i32 %26, i32* %16, align 4
  br label %27

27:                                               ; preds = %9, %25
  %28 = ptrtoint %"class.WTF::StringImpl"* %5 to i64
  %29 = bitcast %"class.WTF::String"* %3 to i64*
  store i64 %28, i64* %29, align 8
  %30 = call %"class.WTF::StringImpl"* @_ZNK3WTF6String12IsolatedCopyEv(%"class.WTF::String"* nonnull %3) #10
  %31 = getelementptr inbounds %"class.blink::WebString", %"class.blink::WebString"* %0, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %30, %"class.WTF::StringImpl"** %31, align 8
  %32 = icmp eq %"class.WTF::StringImpl"* %30, null
  br i1 %32, label %62, label %33

33:                                               ; preds = %27
  %34 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %30, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = load atomic i32, i32* %34 monotonic, align 4
  %36 = and i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %30, i64 0, i32 0
  %39 = load i32, i32* %38, align 4
  br i1 %37, label %40, label %50

40:                                               ; preds = %33
  %41 = zext i32 %39 to i33
  %42 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %41, i33 1) #10
  %43 = extractvalue { i33, i1 } %42, 1
  %44 = extractvalue { i33, i1 } %42, 0
  %45 = icmp slt i33 %44, 0
  %46 = or i1 %43, %45
  br i1 %46, label %47, label %48, !prof !2

47:                                               ; preds = %40
  call void @llvm.trap() #10
  unreachable

48:                                               ; preds = %40
  %49 = trunc i33 %44 to i32
  store i32 %49, i32* %38, align 4
  br label %50

50:                                               ; preds = %33, %48
  %51 = phi i32 [ %49, %48 ], [ %39, %33 ]
  %52 = load atomic i32, i32* %34 monotonic, align 4
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %58

55:                                               ; preds = %50
  %56 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %30, i64 0, i32 0
  %57 = add i32 %51, -1
  store i32 %57, i32* %56, align 4
  br label %58

58:                                               ; preds = %55, %50
  %59 = phi i32 [ %57, %55 ], [ %51, %50 ]
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %62

61:                                               ; preds = %58
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %30) #10
  br label %62

62:                                               ; preds = %27, %58, %61
  %63 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %64 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %63, align 8
  %65 = icmp eq %"class.WTF::StringImpl"* %64, null
  br i1 %65, label %79, label %66

66:                                               ; preds = %62
  %67 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %64, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %68 = load atomic i32, i32* %67 monotonic, align 4
  %69 = and i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %64, i64 0, i32 0
  %72 = load i32, i32* %71, align 4
  br i1 %70, label %73, label %75

73:                                               ; preds = %66
  %74 = add i32 %72, -1
  store i32 %74, i32* %71, align 4
  br label %75

75:                                               ; preds = %73, %66
  %76 = phi i32 [ %74, %73 ], [ %72, %66 ]
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %79

78:                                               ; preds = %75
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %64) #10
  br label %79

79:                                               ; preds = %62, %75, %78
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #10
  br label %80

80:                                               ; preds = %79, %7
  ret void
}

declare %"class.WTF::StringImpl"* @_ZNK3WTF6String12IsolatedCopyEv(%"class.WTF::String"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink9WebString6EqualsERKS0_(%"class.blink::WebString"* nocapture readonly, %"class.blink::WebString"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::WebString", %"class.blink::WebString"* %0, i64 0, i32 0, i32 0
  %4 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  %5 = getelementptr inbounds %"class.blink::WebString", %"class.blink::WebString"* %1, i64 0, i32 0, i32 0
  %6 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  %7 = tail call zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %4, %"class.WTF::StringImpl"* %6) #10
  ret i1 %7
}

declare zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink9WebString6EqualsEPKcm(%"class.blink::WebString"* nocapture readonly, i8*, i64) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::WebString", %"class.blink::WebString"* %0, i64 0, i32 0, i32 0
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %6 = trunc i64 %2 to i32
  %7 = tail call zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplEPKhj(%"class.WTF::StringImpl"* %5, i8* %1, i32 %6) #10
  ret i1 %7
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9WebStringC2ERKN3WTF6StringE(%"class.blink::WebString"* nocapture, %"class.WTF::String"* nocapture readonly dereferenceable(8)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %4 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  %5 = getelementptr inbounds %"class.blink::WebString", %"class.blink::WebString"* %0, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %4, %"class.WTF::StringImpl"** %5, align 8
  %6 = icmp eq %"class.WTF::StringImpl"* %4, null
  br i1 %6, label %24, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load atomic i32, i32* %8 monotonic, align 4
  %10 = and i32 %9, 2
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %24

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = zext i32 %14 to i33
  %16 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %15, i33 1) #10
  %17 = extractvalue { i33, i1 } %16, 1
  %18 = extractvalue { i33, i1 } %16, 0
  %19 = icmp slt i33 %18, 0
  %20 = or i1 %17, %19
  br i1 %20, label %21, label %22, !prof !2

21:                                               ; preds = %12
  tail call void @llvm.trap() #10
  unreachable

22:                                               ; preds = %12
  %23 = trunc i33 %18 to i32
  store i32 %23, i32* %13, align 4
  br label %24

24:                                               ; preds = %2, %7, %22
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(8) %"class.blink::WebString"* @_ZN5blink9WebStringaSERKN3WTF6StringE(%"class.blink::WebString"* returned, %"class.WTF::String"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %4 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  %5 = icmp eq %"class.WTF::StringImpl"* %4, null
  br i1 %5, label %23, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = and i32 %8, 2
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %23

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = zext i32 %13 to i33
  %15 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %14, i33 1) #10
  %16 = extractvalue { i33, i1 } %15, 1
  %17 = extractvalue { i33, i1 } %15, 0
  %18 = icmp slt i33 %17, 0
  %19 = or i1 %16, %18
  br i1 %19, label %20, label %21, !prof !2

20:                                               ; preds = %11
  tail call void @llvm.trap() #10
  unreachable

21:                                               ; preds = %11
  %22 = trunc i33 %17 to i32
  store i32 %22, i32* %12, align 4
  br label %23

23:                                               ; preds = %21, %6, %2
  %24 = ptrtoint %"class.WTF::StringImpl"* %4 to i64
  %25 = bitcast %"class.blink::WebString"* %0 to i64*
  %26 = getelementptr inbounds %"class.blink::WebString", %"class.blink::WebString"* %0, i64 0, i32 0, i32 0
  %27 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %26, align 8
  store i64 %24, i64* %25, align 8
  %28 = icmp eq %"class.WTF::StringImpl"* %27, null
  br i1 %28, label %42, label %29

29:                                               ; preds = %23
  %30 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = load atomic i32, i32* %30 monotonic, align 4
  %32 = and i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 0
  %35 = load i32, i32* %34, align 4
  br i1 %33, label %36, label %38

36:                                               ; preds = %29
  %37 = add i32 %35, -1
  store i32 %37, i32* %34, align 4
  br label %38

38:                                               ; preds = %36, %29
  %39 = phi i32 [ %37, %36 ], [ %35, %29 ]
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %42

41:                                               ; preds = %38
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %27) #10
  br label %42

42:                                               ; preds = %23, %38, %41
  ret %"class.blink::WebString"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink9WebStringcvN3WTF6StringEEv(%"class.blink::WebString"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::WebString", %"class.blink::WebString"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2, align 8
  %4 = icmp eq %"class.WTF::StringImpl"* %3, null
  br i1 %4, label %22, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = load atomic i32, i32* %6 monotonic, align 4
  %8 = and i32 %7, 2
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %22

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = zext i32 %12 to i33
  %14 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %13, i33 1) #10
  %15 = extractvalue { i33, i1 } %14, 1
  %16 = extractvalue { i33, i1 } %14, 0
  %17 = icmp slt i33 %16, 0
  %18 = or i1 %15, %17
  br i1 %18, label %19, label %20, !prof !2

19:                                               ; preds = %10
  tail call void @llvm.trap() #10
  unreachable

20:                                               ; preds = %10
  %21 = trunc i33 %16 to i32
  store i32 %21, i32* %11, align 4
  br label %22

22:                                               ; preds = %1, %5, %20
  ret %"class.WTF::StringImpl"* %3
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK5blink9WebStringcvN3WTF10StringViewEEv(%"class.WTF::StringView"* noalias nocapture sret, %"class.blink::WebString"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.blink::WebString", %"class.blink::WebString"* %1, i64 0, i32 0, i32 0
  %4 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  %5 = icmp eq %"class.WTF::StringImpl"* %4, null
  br i1 %5, label %6, label %10

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 1
  store i8* null, i8** %7, align 8
  %8 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %9 = bitcast %"class.WTF::StringView"* %0 to i64*
  store i64 %8, i64* %9, align 8
  br label %17

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 0
  store %"class.WTF::StringImpl"* %4, %"class.WTF::StringImpl"** %11, align 8
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 1
  %15 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 1
  %16 = bitcast i8** %15 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %14, %"class.WTF::StringImpl"** %16, align 8
  br label %17

17:                                               ; preds = %6, %10
  %18 = phi i32 [ %13, %10 ], [ 0, %6 ]
  %19 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 2
  store i32 %18, i32* %19, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9WebStringC2ERKN3WTF12AtomicStringE(%"class.blink::WebString"* nocapture, %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::WebString", %"class.blink::WebString"* %0, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %3, align 8
  %4 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %6 = icmp eq %"class.WTF::StringImpl"* %5, null
  br i1 %6, label %7, label %9

7:                                                ; preds = %2
  %8 = bitcast %"class.blink::WebString"* %0 to i64*
  store i64 0, i64* %8, align 8
  br label %46

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load atomic i32, i32* %10 monotonic, align 4
  %12 = and i32 %11, 2
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %17, label %14

14:                                               ; preds = %9
  %15 = ptrtoint %"class.WTF::StringImpl"* %5 to i64
  %16 = bitcast %"class.blink::WebString"* %0 to i64*
  store i64 %15, i64* %16, align 8
  br label %46

17:                                               ; preds = %9
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = zext i32 %19 to i33
  %21 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %20, i33 1) #10
  %22 = extractvalue { i33, i1 } %21, 1
  %23 = extractvalue { i33, i1 } %21, 0
  %24 = icmp slt i33 %23, 0
  %25 = or i1 %22, %24
  br i1 %25, label %26, label %27, !prof !2

26:                                               ; preds = %17
  tail call void @llvm.trap() #10
  unreachable

27:                                               ; preds = %17
  %28 = trunc i33 %23 to i32
  store i32 %28, i32* %18, align 4
  %29 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  %30 = ptrtoint %"class.WTF::StringImpl"* %5 to i64
  %31 = bitcast %"class.blink::WebString"* %0 to i64*
  store i64 %30, i64* %31, align 8
  %32 = icmp eq %"class.WTF::StringImpl"* %29, null
  br i1 %32, label %46, label %33

33:                                               ; preds = %27
  %34 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %29, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = load atomic i32, i32* %34 monotonic, align 4
  %36 = and i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %29, i64 0, i32 0
  %39 = load i32, i32* %38, align 4
  br i1 %37, label %40, label %42

40:                                               ; preds = %33
  %41 = add i32 %39, -1
  store i32 %41, i32* %38, align 4
  br label %42

42:                                               ; preds = %40, %33
  %43 = phi i32 [ %41, %40 ], [ %39, %33 ]
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %46

45:                                               ; preds = %42
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %29) #10
  br label %46

46:                                               ; preds = %14, %7, %27, %42, %45
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(8) %"class.blink::WebString"* @_ZN5blink9WebStringaSERKN3WTF12AtomicStringE(%"class.blink::WebString"* returned, %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %4 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  %5 = icmp eq %"class.WTF::StringImpl"* %4, null
  br i1 %5, label %23, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = and i32 %8, 2
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %23

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = zext i32 %13 to i33
  %15 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %14, i33 1) #10
  %16 = extractvalue { i33, i1 } %15, 1
  %17 = extractvalue { i33, i1 } %15, 0
  %18 = icmp slt i33 %17, 0
  %19 = or i1 %16, %18
  br i1 %19, label %20, label %21, !prof !2

20:                                               ; preds = %11
  tail call void @llvm.trap() #10
  unreachable

21:                                               ; preds = %11
  %22 = trunc i33 %17 to i32
  store i32 %22, i32* %12, align 4
  br label %23

23:                                               ; preds = %21, %6, %2
  %24 = ptrtoint %"class.WTF::StringImpl"* %4 to i64
  %25 = bitcast %"class.blink::WebString"* %0 to i64*
  %26 = getelementptr inbounds %"class.blink::WebString", %"class.blink::WebString"* %0, i64 0, i32 0, i32 0
  %27 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %26, align 8
  store i64 %24, i64* %25, align 8
  %28 = icmp eq %"class.WTF::StringImpl"* %27, null
  br i1 %28, label %42, label %29

29:                                               ; preds = %23
  %30 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = load atomic i32, i32* %30 monotonic, align 4
  %32 = and i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 0
  %35 = load i32, i32* %34, align 4
  br i1 %33, label %36, label %38

36:                                               ; preds = %29
  %37 = add i32 %35, -1
  store i32 %37, i32* %34, align 4
  br label %38

38:                                               ; preds = %36, %29
  %39 = phi i32 [ %37, %36 ], [ %35, %29 ]
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %42

41:                                               ; preds = %38
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %27) #10
  br label %42

42:                                               ; preds = %23, %38, %41
  ret %"class.blink::WebString"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink9WebStringcvN3WTF12AtomicStringEEv(%"class.blink::WebString"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::WebString", %"class.blink::WebString"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2, align 8
  %4 = icmp eq %"class.WTF::StringImpl"* %3, null
  br i1 %4, label %57, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = load atomic i32, i32* %6 monotonic, align 4
  %8 = and i32 %7, 2
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %22

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = zext i32 %12 to i33
  %14 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %13, i33 1) #10
  %15 = extractvalue { i33, i1 } %14, 1
  %16 = extractvalue { i33, i1 } %14, 0
  %17 = icmp slt i33 %16, 0
  %18 = or i1 %15, %17
  br i1 %18, label %19, label %20, !prof !2

19:                                               ; preds = %10
  tail call void @llvm.trap() #10
  unreachable

20:                                               ; preds = %10
  %21 = trunc i33 %16 to i32
  store i32 %21, i32* %11, align 4
  br label %22

22:                                               ; preds = %5, %20
  %23 = load atomic i32, i32* %6 acquire, align 4
  %24 = and i32 %23, 4
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %42, label %26

26:                                               ; preds = %22
  %27 = load atomic i32, i32* %6 monotonic, align 4
  %28 = and i32 %27, 2
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %44

30:                                               ; preds = %26
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = zext i32 %32 to i33
  %34 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %33, i33 1) #10
  %35 = extractvalue { i33, i1 } %34, 1
  %36 = extractvalue { i33, i1 } %34, 0
  %37 = icmp slt i33 %36, 0
  %38 = or i1 %35, %37
  br i1 %38, label %39, label %40, !prof !2

39:                                               ; preds = %30
  tail call void @llvm.trap() #10
  unreachable

40:                                               ; preds = %30
  %41 = trunc i33 %36 to i32
  store i32 %41, i32* %31, align 4
  br label %44

42:                                               ; preds = %22
  %43 = tail call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %3) #10
  br label %44

44:                                               ; preds = %26, %40, %42
  %45 = phi %"class.WTF::StringImpl"* [ %3, %40 ], [ %3, %26 ], [ %43, %42 ]
  %46 = load atomic i32, i32* %6 monotonic, align 4
  %47 = and i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 0
  %50 = load i32, i32* %49, align 4
  br i1 %48, label %51, label %53

51:                                               ; preds = %44
  %52 = add i32 %50, -1
  store i32 %52, i32* %49, align 4
  br label %53

53:                                               ; preds = %51, %44
  %54 = phi i32 [ %52, %51 ], [ %50, %44 ]
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %57

56:                                               ; preds = %53
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %3) #10
  br label %57

57:                                               ; preds = %1, %53, %56
  %58 = phi %"class.WTF::StringImpl"* [ %45, %53 ], [ %45, %56 ], [ null, %1 ]
  ret %"class.WTF::StringImpl"* %58
}

declare %"class.WTF::StringImpl"* @_ZN3WTF6String8FromUTF8EPKhm(i8*, i64) local_unnamed_addr #3

declare i32 @_ZNK3WTF10StringImpl17ComputeASCIIFlagsEv(%"class.WTF::StringImpl"*) local_unnamed_addr #3

declare zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplEPKhj(%"class.WTF::StringImpl"*, i8*, i32) local_unnamed_addr #3

declare %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"*) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #8

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #9

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { cold noreturn nounwind }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{i8 0, i8 2}
!4 = !{!5}
!5 = distinct !{!5, !6}
!6 = distinct !{!6, !"LVerDomain"}
!7 = !{!8}
!8 = distinct !{!8, !6}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.isvectorized", i32 1}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.unroll.disable"}
!13 = distinct !{!13, !10}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZN5blink9WebString10FromLatin1ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE: argument 0"}
!16 = distinct !{!16, !"_ZN5blink9WebString10FromLatin1ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE"}
!17 = !{!18}
!18 = distinct !{!18, !19, !"_ZN5blink9WebString10FromLatin1EPKhm: argument 0"}
!19 = distinct !{!19, !"_ZN5blink9WebString10FromLatin1EPKhm"}
