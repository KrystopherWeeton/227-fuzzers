; ModuleID = '../../third_party/swiftshader/third_party/astc-encoder/Source/astc_integer_sequence.cpp'
source_filename = "../../third_party/swiftshader/third_party/astc-encoder/Source/astc_integer_sequence.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

@_ZZ10decode_iseiiPKhPhiE12bits_to_read = internal unnamed_addr constant [5 x i32] [i32 2, i32 2, i32 1, i32 2, i32 1], align 16
@_ZZ10decode_iseiiPKhPhiE11block_shift = internal unnamed_addr constant [5 x i32] [i32 0, i32 2, i32 4, i32 5, i32 7], align 16
@_ZZ10decode_iseiiPKhPhiE13next_lcounter = internal unnamed_addr constant [5 x i32] [i32 1, i32 2, i32 3, i32 4, i32 0], align 16
@_ZZ10decode_iseiiPKhPhiE13hcounter_incr = internal unnamed_addr constant [5 x i32] [i32 0, i32 0, i32 0, i32 0, i32 1], align 16
@_ZZ10decode_iseiiPKhPhiE12bits_to_read_0 = internal unnamed_addr constant [3 x i32] [i32 3, i32 2, i32 2], align 4
@_ZZ10decode_iseiiPKhPhiE11block_shift_0 = internal unnamed_addr constant [3 x i32] [i32 0, i32 3, i32 5], align 4
@_ZZ10decode_iseiiPKhPhiE13next_lcounter_0 = internal unnamed_addr constant [3 x i32] [i32 1, i32 2, i32 0], align 4
@_ZZ10decode_iseiiPKhPhiE13hcounter_incr_0 = internal unnamed_addr constant [3 x i32] [i32 0, i32 0, i32 1], align 4
@_ZL16trits_of_integer = internal unnamed_addr constant [256 x [5 x i8]] [[5 x i8] zeroinitializer, [5 x i8] c"\01\00\00\00\00", [5 x i8] c"\02\00\00\00\00", [5 x i8] c"\00\00\02\00\00", [5 x i8] c"\00\01\00\00\00", [5 x i8] c"\01\01\00\00\00", [5 x i8] c"\02\01\00\00\00", [5 x i8] c"\01\00\02\00\00", [5 x i8] c"\00\02\00\00\00", [5 x i8] c"\01\02\00\00\00", [5 x i8] c"\02\02\00\00\00", [5 x i8] c"\02\00\02\00\00", [5 x i8] c"\00\02\02\00\00", [5 x i8] c"\01\02\02\00\00", [5 x i8] c"\02\02\02\00\00", [5 x i8] c"\02\00\02\00\00", [5 x i8] c"\00\00\01\00\00", [5 x i8] c"\01\00\01\00\00", [5 x i8] c"\02\00\01\00\00", [5 x i8] c"\00\01\02\00\00", [5 x i8] c"\00\01\01\00\00", [5 x i8] c"\01\01\01\00\00", [5 x i8] c"\02\01\01\00\00", [5 x i8] c"\01\01\02\00\00", [5 x i8] c"\00\02\01\00\00", [5 x i8] c"\01\02\01\00\00", [5 x i8] c"\02\02\01\00\00", [5 x i8] c"\02\01\02\00\00", [5 x i8] c"\00\00\00\02\02", [5 x i8] c"\01\00\00\02\02", [5 x i8] c"\02\00\00\02\02", [5 x i8] c"\00\00\02\02\02", [5 x i8] c"\00\00\00\01\00", [5 x i8] c"\01\00\00\01\00", [5 x i8] c"\02\00\00\01\00", [5 x i8] c"\00\00\02\01\00", [5 x i8] c"\00\01\00\01\00", [5 x i8] c"\01\01\00\01\00", [5 x i8] c"\02\01\00\01\00", [5 x i8] c"\01\00\02\01\00", [5 x i8] c"\00\02\00\01\00", [5 x i8] c"\01\02\00\01\00", [5 x i8] c"\02\02\00\01\00", [5 x i8] c"\02\00\02\01\00", [5 x i8] c"\00\02\02\01\00", [5 x i8] c"\01\02\02\01\00", [5 x i8] c"\02\02\02\01\00", [5 x i8] c"\02\00\02\01\00", [5 x i8] c"\00\00\01\01\00", [5 x i8] c"\01\00\01\01\00", [5 x i8] c"\02\00\01\01\00", [5 x i8] c"\00\01\02\01\00", [5 x i8] c"\00\01\01\01\00", [5 x i8] c"\01\01\01\01\00", [5 x i8] c"\02\01\01\01\00", [5 x i8] c"\01\01\02\01\00", [5 x i8] c"\00\02\01\01\00", [5 x i8] c"\01\02\01\01\00", [5 x i8] c"\02\02\01\01\00", [5 x i8] c"\02\01\02\01\00", [5 x i8] c"\00\01\00\02\02", [5 x i8] c"\01\01\00\02\02", [5 x i8] c"\02\01\00\02\02", [5 x i8] c"\01\00\02\02\02", [5 x i8] c"\00\00\00\02\00", [5 x i8] c"\01\00\00\02\00", [5 x i8] c"\02\00\00\02\00", [5 x i8] c"\00\00\02\02\00", [5 x i8] c"\00\01\00\02\00", [5 x i8] c"\01\01\00\02\00", [5 x i8] c"\02\01\00\02\00", [5 x i8] c"\01\00\02\02\00", [5 x i8] c"\00\02\00\02\00", [5 x i8] c"\01\02\00\02\00", [5 x i8] c"\02\02\00\02\00", [5 x i8] c"\02\00\02\02\00", [5 x i8] c"\00\02\02\02\00", [5 x i8] c"\01\02\02\02\00", [5 x i8] c"\02\02\02\02\00", [5 x i8] c"\02\00\02\02\00", [5 x i8] c"\00\00\01\02\00", [5 x i8] c"\01\00\01\02\00", [5 x i8] c"\02\00\01\02\00", [5 x i8] c"\00\01\02\02\00", [5 x i8] c"\00\01\01\02\00", [5 x i8] c"\01\01\01\02\00", [5 x i8] c"\02\01\01\02\00", [5 x i8] c"\01\01\02\02\00", [5 x i8] c"\00\02\01\02\00", [5 x i8] c"\01\02\01\02\00", [5 x i8] c"\02\02\01\02\00", [5 x i8] c"\02\01\02\02\00", [5 x i8] c"\00\02\00\02\02", [5 x i8] c"\01\02\00\02\02", [5 x i8] c"\02\02\00\02\02", [5 x i8] c"\02\00\02\02\02", [5 x i8] c"\00\00\00\00\02", [5 x i8] c"\01\00\00\00\02", [5 x i8] c"\02\00\00\00\02", [5 x i8] c"\00\00\02\00\02", [5 x i8] c"\00\01\00\00\02", [5 x i8] c"\01\01\00\00\02", [5 x i8] c"\02\01\00\00\02", [5 x i8] c"\01\00\02\00\02", [5 x i8] c"\00\02\00\00\02", [5 x i8] c"\01\02\00\00\02", [5 x i8] c"\02\02\00\00\02", [5 x i8] c"\02\00\02\00\02", [5 x i8] c"\00\02\02\00\02", [5 x i8] c"\01\02\02\00\02", [5 x i8] c"\02\02\02\00\02", [5 x i8] c"\02\00\02\00\02", [5 x i8] c"\00\00\01\00\02", [5 x i8] c"\01\00\01\00\02", [5 x i8] c"\02\00\01\00\02", [5 x i8] c"\00\01\02\00\02", [5 x i8] c"\00\01\01\00\02", [5 x i8] c"\01\01\01\00\02", [5 x i8] c"\02\01\01\00\02", [5 x i8] c"\01\01\02\00\02", [5 x i8] c"\00\02\01\00\02", [5 x i8] c"\01\02\01\00\02", [5 x i8] c"\02\02\01\00\02", [5 x i8] c"\02\01\02\00\02", [5 x i8] c"\00\02\02\02\02", [5 x i8] c"\01\02\02\02\02", [5 x i8] c"\02\02\02\02\02", [5 x i8] c"\02\00\02\02\02", [5 x i8] c"\00\00\00\00\01", [5 x i8] c"\01\00\00\00\01", [5 x i8] c"\02\00\00\00\01", [5 x i8] c"\00\00\02\00\01", [5 x i8] c"\00\01\00\00\01", [5 x i8] c"\01\01\00\00\01", [5 x i8] c"\02\01\00\00\01", [5 x i8] c"\01\00\02\00\01", [5 x i8] c"\00\02\00\00\01", [5 x i8] c"\01\02\00\00\01", [5 x i8] c"\02\02\00\00\01", [5 x i8] c"\02\00\02\00\01", [5 x i8] c"\00\02\02\00\01", [5 x i8] c"\01\02\02\00\01", [5 x i8] c"\02\02\02\00\01", [5 x i8] c"\02\00\02\00\01", [5 x i8] c"\00\00\01\00\01", [5 x i8] c"\01\00\01\00\01", [5 x i8] c"\02\00\01\00\01", [5 x i8] c"\00\01\02\00\01", [5 x i8] c"\00\01\01\00\01", [5 x i8] c"\01\01\01\00\01", [5 x i8] c"\02\01\01\00\01", [5 x i8] c"\01\01\02\00\01", [5 x i8] c"\00\02\01\00\01", [5 x i8] c"\01\02\01\00\01", [5 x i8] c"\02\02\01\00\01", [5 x i8] c"\02\01\02\00\01", [5 x i8] c"\00\00\01\02\02", [5 x i8] c"\01\00\01\02\02", [5 x i8] c"\02\00\01\02\02", [5 x i8] c"\00\01\02\02\02", [5 x i8] c"\00\00\00\01\01", [5 x i8] c"\01\00\00\01\01", [5 x i8] c"\02\00\00\01\01", [5 x i8] c"\00\00\02\01\01", [5 x i8] c"\00\01\00\01\01", [5 x i8] c"\01\01\00\01\01", [5 x i8] c"\02\01\00\01\01", [5 x i8] c"\01\00\02\01\01", [5 x i8] c"\00\02\00\01\01", [5 x i8] c"\01\02\00\01\01", [5 x i8] c"\02\02\00\01\01", [5 x i8] c"\02\00\02\01\01", [5 x i8] c"\00\02\02\01\01", [5 x i8] c"\01\02\02\01\01", [5 x i8] c"\02\02\02\01\01", [5 x i8] c"\02\00\02\01\01", [5 x i8] c"\00\00\01\01\01", [5 x i8] c"\01\00\01\01\01", [5 x i8] c"\02\00\01\01\01", [5 x i8] c"\00\01\02\01\01", [5 x i8] c"\00\01\01\01\01", [5 x i8] c"\01\01\01\01\01", [5 x i8] c"\02\01\01\01\01", [5 x i8] c"\01\01\02\01\01", [5 x i8] c"\00\02\01\01\01", [5 x i8] c"\01\02\01\01\01", [5 x i8] c"\02\02\01\01\01", [5 x i8] c"\02\01\02\01\01", [5 x i8] c"\00\01\01\02\02", [5 x i8] c"\01\01\01\02\02", [5 x i8] c"\02\01\01\02\02", [5 x i8] c"\01\01\02\02\02", [5 x i8] c"\00\00\00\02\01", [5 x i8] c"\01\00\00\02\01", [5 x i8] c"\02\00\00\02\01", [5 x i8] c"\00\00\02\02\01", [5 x i8] c"\00\01\00\02\01", [5 x i8] c"\01\01\00\02\01", [5 x i8] c"\02\01\00\02\01", [5 x i8] c"\01\00\02\02\01", [5 x i8] c"\00\02\00\02\01", [5 x i8] c"\01\02\00\02\01", [5 x i8] c"\02\02\00\02\01", [5 x i8] c"\02\00\02\02\01", [5 x i8] c"\00\02\02\02\01", [5 x i8] c"\01\02\02\02\01", [5 x i8] c"\02\02\02\02\01", [5 x i8] c"\02\00\02\02\01", [5 x i8] c"\00\00\01\02\01", [5 x i8] c"\01\00\01\02\01", [5 x i8] c"\02\00\01\02\01", [5 x i8] c"\00\01\02\02\01", [5 x i8] c"\00\01\01\02\01", [5 x i8] c"\01\01\01\02\01", [5 x i8] c"\02\01\01\02\01", [5 x i8] c"\01\01\02\02\01", [5 x i8] c"\00\02\01\02\01", [5 x i8] c"\01\02\01\02\01", [5 x i8] c"\02\02\01\02\01", [5 x i8] c"\02\01\02\02\01", [5 x i8] c"\00\02\01\02\02", [5 x i8] c"\01\02\01\02\02", [5 x i8] c"\02\02\01\02\02", [5 x i8] c"\02\01\02\02\02", [5 x i8] c"\00\00\00\01\02", [5 x i8] c"\01\00\00\01\02", [5 x i8] c"\02\00\00\01\02", [5 x i8] c"\00\00\02\01\02", [5 x i8] c"\00\01\00\01\02", [5 x i8] c"\01\01\00\01\02", [5 x i8] c"\02\01\00\01\02", [5 x i8] c"\01\00\02\01\02", [5 x i8] c"\00\02\00\01\02", [5 x i8] c"\01\02\00\01\02", [5 x i8] c"\02\02\00\01\02", [5 x i8] c"\02\00\02\01\02", [5 x i8] c"\00\02\02\01\02", [5 x i8] c"\01\02\02\01\02", [5 x i8] c"\02\02\02\01\02", [5 x i8] c"\02\00\02\01\02", [5 x i8] c"\00\00\01\01\02", [5 x i8] c"\01\00\01\01\02", [5 x i8] c"\02\00\01\01\02", [5 x i8] c"\00\01\02\01\02", [5 x i8] c"\00\01\01\01\02", [5 x i8] c"\01\01\01\01\02", [5 x i8] c"\02\01\01\01\02", [5 x i8] c"\01\01\02\01\02", [5 x i8] c"\00\02\01\01\02", [5 x i8] c"\01\02\01\01\02", [5 x i8] c"\02\02\01\01\02", [5 x i8] c"\02\01\02\01\02", [5 x i8] c"\00\02\02\02\02", [5 x i8] c"\01\02\02\02\02", [5 x i8] c"\02\02\02\02\02", [5 x i8] c"\02\01\02\02\02"], align 16
@_ZL17quints_of_integer = internal unnamed_addr constant [128 x [3 x i8]] [[3 x i8] zeroinitializer, [3 x i8] c"\01\00\00", [3 x i8] c"\02\00\00", [3 x i8] c"\03\00\00", [3 x i8] c"\04\00\00", [3 x i8] c"\00\04\00", [3 x i8] c"\04\04\00", [3 x i8] c"\04\04\04", [3 x i8] c"\00\01\00", [3 x i8] c"\01\01\00", [3 x i8] c"\02\01\00", [3 x i8] c"\03\01\00", [3 x i8] c"\04\01\00", [3 x i8] c"\01\04\00", [3 x i8] c"\04\04\01", [3 x i8] c"\04\04\04", [3 x i8] c"\00\02\00", [3 x i8] c"\01\02\00", [3 x i8] c"\02\02\00", [3 x i8] c"\03\02\00", [3 x i8] c"\04\02\00", [3 x i8] c"\02\04\00", [3 x i8] c"\04\04\02", [3 x i8] c"\04\04\04", [3 x i8] c"\00\03\00", [3 x i8] c"\01\03\00", [3 x i8] c"\02\03\00", [3 x i8] c"\03\03\00", [3 x i8] c"\04\03\00", [3 x i8] c"\03\04\00", [3 x i8] c"\04\04\03", [3 x i8] c"\04\04\04", [3 x i8] c"\00\00\01", [3 x i8] c"\01\00\01", [3 x i8] c"\02\00\01", [3 x i8] c"\03\00\01", [3 x i8] c"\04\00\01", [3 x i8] c"\00\04\01", [3 x i8] c"\04\00\04", [3 x i8] c"\00\04\04", [3 x i8] c"\00\01\01", [3 x i8] c"\01\01\01", [3 x i8] c"\02\01\01", [3 x i8] c"\03\01\01", [3 x i8] c"\04\01\01", [3 x i8] c"\01\04\01", [3 x i8] c"\04\01\04", [3 x i8] c"\01\04\04", [3 x i8] c"\00\02\01", [3 x i8] c"\01\02\01", [3 x i8] c"\02\02\01", [3 x i8] c"\03\02\01", [3 x i8] c"\04\02\01", [3 x i8] c"\02\04\01", [3 x i8] c"\04\02\04", [3 x i8] c"\02\04\04", [3 x i8] c"\00\03\01", [3 x i8] c"\01\03\01", [3 x i8] c"\02\03\01", [3 x i8] c"\03\03\01", [3 x i8] c"\04\03\01", [3 x i8] c"\03\04\01", [3 x i8] c"\04\03\04", [3 x i8] c"\03\04\04", [3 x i8] c"\00\00\02", [3 x i8] c"\01\00\02", [3 x i8] c"\02\00\02", [3 x i8] c"\03\00\02", [3 x i8] c"\04\00\02", [3 x i8] c"\00\04\02", [3 x i8] c"\02\00\04", [3 x i8] c"\03\00\04", [3 x i8] c"\00\01\02", [3 x i8] c"\01\01\02", [3 x i8] c"\02\01\02", [3 x i8] c"\03\01\02", [3 x i8] c"\04\01\02", [3 x i8] c"\01\04\02", [3 x i8] c"\02\01\04", [3 x i8] c"\03\01\04", [3 x i8] c"\00\02\02", [3 x i8] c"\01\02\02", [3 x i8] c"\02\02\02", [3 x i8] c"\03\02\02", [3 x i8] c"\04\02\02", [3 x i8] c"\02\04\02", [3 x i8] c"\02\02\04", [3 x i8] c"\03\02\04", [3 x i8] c"\00\03\02", [3 x i8] c"\01\03\02", [3 x i8] c"\02\03\02", [3 x i8] c"\03\03\02", [3 x i8] c"\04\03\02", [3 x i8] c"\03\04\02", [3 x i8] c"\02\03\04", [3 x i8] c"\03\03\04", [3 x i8] c"\00\00\03", [3 x i8] c"\01\00\03", [3 x i8] c"\02\00\03", [3 x i8] c"\03\00\03", [3 x i8] c"\04\00\03", [3 x i8] c"\00\04\03", [3 x i8] c"\00\00\04", [3 x i8] c"\01\00\04", [3 x i8] c"\00\01\03", [3 x i8] c"\01\01\03", [3 x i8] c"\02\01\03", [3 x i8] c"\03\01\03", [3 x i8] c"\04\01\03", [3 x i8] c"\01\04\03", [3 x i8] c"\00\01\04", [3 x i8] c"\01\01\04", [3 x i8] c"\00\02\03", [3 x i8] c"\01\02\03", [3 x i8] c"\02\02\03", [3 x i8] c"\03\02\03", [3 x i8] c"\04\02\03", [3 x i8] c"\02\04\03", [3 x i8] c"\00\02\04", [3 x i8] c"\01\02\04", [3 x i8] c"\00\03\03", [3 x i8] c"\01\03\03", [3 x i8] c"\02\03\03", [3 x i8] c"\03\03\03", [3 x i8] c"\04\03\03", [3 x i8] c"\03\04\03", [3 x i8] c"\00\03\04", [3 x i8] c"\01\03\04"], align 16

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable writeonly
define hidden void @_Z32find_number_of_bits_trits_quintsiPiS_S_(i32, i32*, i32* nocapture, i32* nocapture) local_unnamed_addr #0 {
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  switch i32 %0, label %26 [
    i32 0, label %5
    i32 1, label %6
    i32 2, label %7
    i32 3, label %8
    i32 4, label %9
    i32 5, label %10
    i32 6, label %11
    i32 7, label %12
    i32 8, label %13
    i32 9, label %14
    i32 10, label %15
    i32 11, label %16
    i32 12, label %17
    i32 13, label %18
    i32 14, label %19
    i32 15, label %20
    i32 16, label %21
    i32 17, label %22
    i32 18, label %23
    i32 19, label %24
    i32 20, label %25
  ]

5:                                                ; preds = %4
  store i32 1, i32* %1, align 4
  br label %26

6:                                                ; preds = %4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  br label %26

7:                                                ; preds = %4
  store i32 2, i32* %1, align 4
  br label %26

8:                                                ; preds = %4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %3, align 4
  br label %26

9:                                                ; preds = %4
  store i32 1, i32* %1, align 4
  store i32 1, i32* %2, align 4
  br label %26

10:                                               ; preds = %4
  store i32 3, i32* %1, align 4
  br label %26

11:                                               ; preds = %4
  store i32 1, i32* %1, align 4
  store i32 1, i32* %3, align 4
  br label %26

12:                                               ; preds = %4
  store i32 2, i32* %1, align 4
  store i32 1, i32* %2, align 4
  br label %26

13:                                               ; preds = %4
  store i32 4, i32* %1, align 4
  br label %26

14:                                               ; preds = %4
  store i32 2, i32* %1, align 4
  store i32 1, i32* %3, align 4
  br label %26

15:                                               ; preds = %4
  store i32 3, i32* %1, align 4
  store i32 1, i32* %2, align 4
  br label %26

16:                                               ; preds = %4
  store i32 5, i32* %1, align 4
  br label %26

17:                                               ; preds = %4
  store i32 3, i32* %1, align 4
  store i32 1, i32* %3, align 4
  br label %26

18:                                               ; preds = %4
  store i32 4, i32* %1, align 4
  store i32 1, i32* %2, align 4
  br label %26

19:                                               ; preds = %4
  store i32 6, i32* %1, align 4
  br label %26

20:                                               ; preds = %4
  store i32 4, i32* %1, align 4
  store i32 1, i32* %3, align 4
  br label %26

21:                                               ; preds = %4
  store i32 5, i32* %1, align 4
  store i32 1, i32* %2, align 4
  br label %26

22:                                               ; preds = %4
  store i32 7, i32* %1, align 4
  br label %26

23:                                               ; preds = %4
  store i32 5, i32* %1, align 4
  store i32 1, i32* %3, align 4
  br label %26

24:                                               ; preds = %4
  store i32 6, i32* %1, align 4
  store i32 1, i32* %2, align 4
  br label %26

25:                                               ; preds = %4
  store i32 8, i32* %1, align 4
  br label %26

26:                                               ; preds = %4, %25, %24, %23, %22, %21, %20, %19, %18, %17, %16, %15, %14, %13, %12, %11, %10, %9, %8, %7, %6, %5
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_Z10decode_iseiiPKhPhi(i32, i32, i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #1 {
  %6 = alloca [68 x i8], align 16
  %7 = alloca [22 x i8], align 16
  %8 = getelementptr inbounds [22 x i8], [22 x i8]* %7, i64 0, i64 0
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = getelementptr inbounds [68 x i8], [68 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 68, i1 false)
  %13 = getelementptr inbounds [22 x i8], [22 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 22, i8* nonnull %13) #4
  %14 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #4
  store i32 -1431655766, i32* %9, align 4
  %15 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #4
  store i32 -1431655766, i32* %10, align 4
  %16 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #4
  store i32 -1431655766, i32* %11, align 4
  call void @_Z32find_number_of_bits_trits_quintsiPiS_S_(i32 %0, i32* nonnull %9, i32* nonnull %10, i32* nonnull %11) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 0, i64 22, i1 false)
  %17 = getelementptr inbounds [68 x i8], [68 x i8]* %6, i64 0, i64 0
  %18 = icmp sgt i32 %1, 0
  br i1 %18, label %21, label %19

19:                                               ; preds = %5
  %20 = load i32, i32* %10, align 4
  br label %127

21:                                               ; preds = %5
  %22 = load i32, i32* %9, align 4
  %23 = shl nsw i32 -1, %22
  %24 = xor i32 %23, 255
  %25 = load i32, i32* %10, align 4
  %26 = icmp eq i32 %25, 0
  %27 = load i32, i32* %11, align 4
  %28 = icmp eq i32 %27, 0
  %29 = zext i32 %1 to i64
  br label %30

30:                                               ; preds = %121, %21
  %31 = phi i64 [ 0, %21 ], [ %125, %121 ]
  %32 = phi i32 [ %4, %21 ], [ %124, %121 ]
  %33 = phi i32 [ 0, %21 ], [ %123, %121 ]
  %34 = phi i32 [ 0, %21 ], [ %122, %121 ]
  %35 = ashr i32 %32, 3
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i8, i8* %2, i64 %36
  %38 = and i32 %32, 7
  %39 = load i8, i8* %37, align 1
  %40 = zext i8 %39 to i32
  %41 = getelementptr inbounds i8, i8* %37, i64 1
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = shl nuw nsw i32 %43, 8
  %45 = or i32 %44, %40
  %46 = lshr i32 %45, %38
  %47 = and i32 %46, %24
  %48 = trunc i32 %47 to i8
  %49 = getelementptr inbounds [68 x i8], [68 x i8]* %6, i64 0, i64 %31
  store i8 %48, i8* %49, align 1
  %50 = add nsw i32 %22, %32
  br i1 %26, label %84, label %51

51:                                               ; preds = %30
  %52 = sext i32 %33 to i64
  %53 = getelementptr inbounds [5 x i32], [5 x i32]* @_ZZ10decode_iseiiPKhPhiE12bits_to_read, i64 0, i64 %52
  %54 = load i32, i32* %53, align 4
  %55 = shl nsw i32 -1, %54
  %56 = xor i32 %55, -1
  %57 = ashr i32 %50, 3
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds i8, i8* %2, i64 %58
  %60 = and i32 %50, 7
  %61 = load i8, i8* %59, align 1
  %62 = zext i8 %61 to i32
  %63 = getelementptr inbounds i8, i8* %59, i64 1
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i32
  %66 = shl nuw nsw i32 %65, 8
  %67 = or i32 %66, %62
  %68 = lshr i32 %67, %60
  %69 = and i32 %68, %56
  %70 = add nsw i32 %54, %50
  %71 = getelementptr inbounds [5 x i32], [5 x i32]* @_ZZ10decode_iseiiPKhPhiE11block_shift, i64 0, i64 %52
  %72 = load i32, i32* %71, align 4
  %73 = shl i32 %69, %72
  %74 = sext i32 %34 to i64
  %75 = getelementptr inbounds [22 x i8], [22 x i8]* %7, i64 0, i64 %74
  %76 = load i8, i8* %75, align 1
  %77 = trunc i32 %73 to i8
  %78 = or i8 %76, %77
  store i8 %78, i8* %75, align 1
  %79 = getelementptr inbounds [5 x i32], [5 x i32]* @_ZZ10decode_iseiiPKhPhiE13hcounter_incr, i64 0, i64 %52
  %80 = load i32, i32* %79, align 4
  %81 = add nsw i32 %80, %34
  %82 = getelementptr inbounds [5 x i32], [5 x i32]* @_ZZ10decode_iseiiPKhPhiE13next_lcounter, i64 0, i64 %52
  %83 = load i32, i32* %82, align 4
  br label %84

84:                                               ; preds = %30, %51
  %85 = phi i32 [ %81, %51 ], [ %34, %30 ]
  %86 = phi i32 [ %83, %51 ], [ %33, %30 ]
  %87 = phi i32 [ %70, %51 ], [ %50, %30 ]
  br i1 %28, label %121, label %88

88:                                               ; preds = %84
  %89 = sext i32 %86 to i64
  %90 = getelementptr inbounds [3 x i32], [3 x i32]* @_ZZ10decode_iseiiPKhPhiE12bits_to_read_0, i64 0, i64 %89
  %91 = load i32, i32* %90, align 4
  %92 = shl nsw i32 -1, %91
  %93 = xor i32 %92, -1
  %94 = ashr i32 %87, 3
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds i8, i8* %2, i64 %95
  %97 = and i32 %87, 7
  %98 = load i8, i8* %96, align 1
  %99 = zext i8 %98 to i32
  %100 = getelementptr inbounds i8, i8* %96, i64 1
  %101 = load i8, i8* %100, align 1
  %102 = zext i8 %101 to i32
  %103 = shl nuw nsw i32 %102, 8
  %104 = or i32 %103, %99
  %105 = lshr i32 %104, %97
  %106 = and i32 %105, %93
  %107 = add nsw i32 %91, %87
  %108 = getelementptr inbounds [3 x i32], [3 x i32]* @_ZZ10decode_iseiiPKhPhiE11block_shift_0, i64 0, i64 %89
  %109 = load i32, i32* %108, align 4
  %110 = shl i32 %106, %109
  %111 = sext i32 %85 to i64
  %112 = getelementptr inbounds [22 x i8], [22 x i8]* %7, i64 0, i64 %111
  %113 = load i8, i8* %112, align 1
  %114 = trunc i32 %110 to i8
  %115 = or i8 %113, %114
  store i8 %115, i8* %112, align 1
  %116 = getelementptr inbounds [3 x i32], [3 x i32]* @_ZZ10decode_iseiiPKhPhiE13hcounter_incr_0, i64 0, i64 %89
  %117 = load i32, i32* %116, align 4
  %118 = add nsw i32 %117, %85
  %119 = getelementptr inbounds [3 x i32], [3 x i32]* @_ZZ10decode_iseiiPKhPhiE13next_lcounter_0, i64 0, i64 %89
  %120 = load i32, i32* %119, align 4
  br label %121

121:                                              ; preds = %84, %88
  %122 = phi i32 [ %118, %88 ], [ %85, %84 ]
  %123 = phi i32 [ %120, %88 ], [ %86, %84 ]
  %124 = phi i32 [ %107, %88 ], [ %87, %84 ]
  %125 = add nuw nsw i64 %31, 1
  %126 = icmp eq i64 %125, %29
  br i1 %126, label %127, label %30

127:                                              ; preds = %121, %19
  %128 = phi i32 [ %20, %19 ], [ %25, %121 ]
  %129 = icmp eq i32 %128, 0
  %130 = xor i1 %18, true
  %131 = or i1 %129, %130
  br i1 %131, label %189, label %132

132:                                              ; preds = %127
  %133 = add nuw nsw i32 %1, 4
  %134 = sdiv i32 %133, 5
  %135 = load i32, i32* %9, align 4
  %136 = sext i32 %134 to i64
  br label %137

137:                                              ; preds = %132, %137
  %138 = phi i64 [ 0, %132 ], [ %187, %137 ]
  %139 = getelementptr inbounds [22 x i8], [22 x i8]* %7, i64 0, i64 %138
  %140 = load i8, i8* %139, align 1
  %141 = zext i8 %140 to i64
  %142 = getelementptr inbounds [256 x [5 x i8]], [256 x [5 x i8]]* @_ZL16trits_of_integer, i64 0, i64 %141, i64 0
  %143 = load i8, i8* %142, align 1
  %144 = zext i8 %143 to i32
  %145 = shl i32 %144, %135
  %146 = mul nuw nsw i64 %138, 5
  %147 = getelementptr inbounds [68 x i8], [68 x i8]* %6, i64 0, i64 %146
  %148 = load i8, i8* %147, align 1
  %149 = trunc i32 %145 to i8
  %150 = or i8 %148, %149
  store i8 %150, i8* %147, align 1
  %151 = getelementptr inbounds [256 x [5 x i8]], [256 x [5 x i8]]* @_ZL16trits_of_integer, i64 0, i64 %141, i64 1
  %152 = load i8, i8* %151, align 1
  %153 = zext i8 %152 to i32
  %154 = shl i32 %153, %135
  %155 = add nuw nsw i64 %146, 1
  %156 = getelementptr inbounds [68 x i8], [68 x i8]* %6, i64 0, i64 %155
  %157 = load i8, i8* %156, align 1
  %158 = trunc i32 %154 to i8
  %159 = or i8 %157, %158
  store i8 %159, i8* %156, align 1
  %160 = getelementptr inbounds [256 x [5 x i8]], [256 x [5 x i8]]* @_ZL16trits_of_integer, i64 0, i64 %141, i64 2
  %161 = load i8, i8* %160, align 1
  %162 = zext i8 %161 to i32
  %163 = shl i32 %162, %135
  %164 = add nuw nsw i64 %146, 2
  %165 = getelementptr inbounds [68 x i8], [68 x i8]* %6, i64 0, i64 %164
  %166 = load i8, i8* %165, align 1
  %167 = trunc i32 %163 to i8
  %168 = or i8 %166, %167
  store i8 %168, i8* %165, align 1
  %169 = getelementptr inbounds [256 x [5 x i8]], [256 x [5 x i8]]* @_ZL16trits_of_integer, i64 0, i64 %141, i64 3
  %170 = load i8, i8* %169, align 1
  %171 = zext i8 %170 to i32
  %172 = shl i32 %171, %135
  %173 = add nuw nsw i64 %146, 3
  %174 = getelementptr inbounds [68 x i8], [68 x i8]* %6, i64 0, i64 %173
  %175 = load i8, i8* %174, align 1
  %176 = trunc i32 %172 to i8
  %177 = or i8 %175, %176
  store i8 %177, i8* %174, align 1
  %178 = getelementptr inbounds [256 x [5 x i8]], [256 x [5 x i8]]* @_ZL16trits_of_integer, i64 0, i64 %141, i64 4
  %179 = load i8, i8* %178, align 1
  %180 = zext i8 %179 to i32
  %181 = shl i32 %180, %135
  %182 = add nuw nsw i64 %146, 4
  %183 = getelementptr inbounds [68 x i8], [68 x i8]* %6, i64 0, i64 %182
  %184 = load i8, i8* %183, align 1
  %185 = trunc i32 %181 to i8
  %186 = or i8 %184, %185
  store i8 %186, i8* %183, align 1
  %187 = add nuw nsw i64 %138, 1
  %188 = icmp slt i64 %187, %136
  br i1 %188, label %137, label %189

189:                                              ; preds = %137, %127
  %190 = load i32, i32* %11, align 4
  %191 = icmp eq i32 %190, 0
  br i1 %191, label %232, label %192

192:                                              ; preds = %189
  br i1 %18, label %193, label %235

193:                                              ; preds = %192
  %194 = add nuw nsw i32 %1, 2
  %195 = sdiv i32 %194, 3
  %196 = load i32, i32* %9, align 4
  %197 = sext i32 %195 to i64
  br label %198

198:                                              ; preds = %193, %198
  %199 = phi i64 [ 0, %193 ], [ %230, %198 ]
  %200 = getelementptr inbounds [22 x i8], [22 x i8]* %7, i64 0, i64 %199
  %201 = load i8, i8* %200, align 1
  %202 = zext i8 %201 to i64
  %203 = getelementptr inbounds [128 x [3 x i8]], [128 x [3 x i8]]* @_ZL17quints_of_integer, i64 0, i64 %202, i64 0
  %204 = load i8, i8* %203, align 1
  %205 = zext i8 %204 to i32
  %206 = shl i32 %205, %196
  %207 = mul nuw nsw i64 %199, 3
  %208 = getelementptr inbounds [68 x i8], [68 x i8]* %6, i64 0, i64 %207
  %209 = load i8, i8* %208, align 1
  %210 = trunc i32 %206 to i8
  %211 = or i8 %209, %210
  store i8 %211, i8* %208, align 1
  %212 = getelementptr inbounds [128 x [3 x i8]], [128 x [3 x i8]]* @_ZL17quints_of_integer, i64 0, i64 %202, i64 1
  %213 = load i8, i8* %212, align 1
  %214 = zext i8 %213 to i32
  %215 = shl i32 %214, %196
  %216 = add nuw nsw i64 %207, 1
  %217 = getelementptr inbounds [68 x i8], [68 x i8]* %6, i64 0, i64 %216
  %218 = load i8, i8* %217, align 1
  %219 = trunc i32 %215 to i8
  %220 = or i8 %218, %219
  store i8 %220, i8* %217, align 1
  %221 = getelementptr inbounds [128 x [3 x i8]], [128 x [3 x i8]]* @_ZL17quints_of_integer, i64 0, i64 %202, i64 2
  %222 = load i8, i8* %221, align 1
  %223 = zext i8 %222 to i32
  %224 = shl i32 %223, %196
  %225 = add nuw nsw i64 %207, 2
  %226 = getelementptr inbounds [68 x i8], [68 x i8]* %6, i64 0, i64 %225
  %227 = load i8, i8* %226, align 1
  %228 = trunc i32 %224 to i8
  %229 = or i8 %227, %228
  store i8 %229, i8* %226, align 1
  %230 = add nuw nsw i64 %199, 1
  %231 = icmp slt i64 %230, %197
  br i1 %231, label %198, label %232

232:                                              ; preds = %198, %189
  br i1 %18, label %233, label %235

233:                                              ; preds = %232
  %234 = zext i32 %1 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3, i8* nonnull align 16 %17, i64 %234, i1 false)
  br label %235

235:                                              ; preds = %192, %233, %232
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 22, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %12) #4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: norecurse nounwind optsize readnone ssp uwtable
define hidden i32 @_Z20compute_ise_bitcounti19quantization_method(i32, i32) local_unnamed_addr #3 {
  switch i32 %1, label %69 [
    i32 0, label %70
    i32 1, label %3
    i32 2, label %7
    i32 3, label %9
    i32 4, label %13
    i32 5, label %17
    i32 6, label %19
    i32 7, label %23
    i32 8, label %27
    i32 9, label %29
    i32 10, label %33
    i32 11, label %37
    i32 12, label %39
    i32 13, label %43
    i32 14, label %47
    i32 15, label %49
    i32 16, label %53
    i32 17, label %57
    i32 18, label %59
    i32 19, label %63
    i32 20, label %67
  ]

3:                                                ; preds = %2
  %4 = shl nsw i32 %0, 3
  %5 = or i32 %4, 4
  %6 = sdiv i32 %5, 5
  br label %70

7:                                                ; preds = %2
  %8 = shl nsw i32 %0, 1
  br label %70

9:                                                ; preds = %2
  %10 = mul nsw i32 %0, 7
  %11 = add nsw i32 %10, 2
  %12 = sdiv i32 %11, 3
  br label %70

13:                                               ; preds = %2
  %14 = mul nsw i32 %0, 13
  %15 = add nsw i32 %14, 4
  %16 = sdiv i32 %15, 5
  br label %70

17:                                               ; preds = %2
  %18 = mul nsw i32 %0, 3
  br label %70

19:                                               ; preds = %2
  %20 = mul nsw i32 %0, 10
  %21 = add nsw i32 %20, 2
  %22 = sdiv i32 %21, 3
  br label %70

23:                                               ; preds = %2
  %24 = mul nsw i32 %0, 18
  %25 = add nsw i32 %24, 4
  %26 = sdiv i32 %25, 5
  br label %70

27:                                               ; preds = %2
  %28 = shl nsw i32 %0, 2
  br label %70

29:                                               ; preds = %2
  %30 = mul nsw i32 %0, 13
  %31 = add nsw i32 %30, 2
  %32 = sdiv i32 %31, 3
  br label %70

33:                                               ; preds = %2
  %34 = mul nsw i32 %0, 23
  %35 = add nsw i32 %34, 4
  %36 = sdiv i32 %35, 5
  br label %70

37:                                               ; preds = %2
  %38 = mul nsw i32 %0, 5
  br label %70

39:                                               ; preds = %2
  %40 = shl nsw i32 %0, 4
  %41 = or i32 %40, 2
  %42 = sdiv i32 %41, 3
  br label %70

43:                                               ; preds = %2
  %44 = mul nsw i32 %0, 28
  %45 = add nsw i32 %44, 4
  %46 = sdiv i32 %45, 5
  br label %70

47:                                               ; preds = %2
  %48 = mul nsw i32 %0, 6
  br label %70

49:                                               ; preds = %2
  %50 = mul nsw i32 %0, 19
  %51 = add nsw i32 %50, 2
  %52 = sdiv i32 %51, 3
  br label %70

53:                                               ; preds = %2
  %54 = mul nsw i32 %0, 33
  %55 = add nsw i32 %54, 4
  %56 = sdiv i32 %55, 5
  br label %70

57:                                               ; preds = %2
  %58 = mul nsw i32 %0, 7
  br label %70

59:                                               ; preds = %2
  %60 = mul nsw i32 %0, 22
  %61 = add nsw i32 %60, 2
  %62 = sdiv i32 %61, 3
  br label %70

63:                                               ; preds = %2
  %64 = mul nsw i32 %0, 38
  %65 = add nsw i32 %64, 4
  %66 = sdiv i32 %65, 5
  br label %70

67:                                               ; preds = %2
  %68 = shl nsw i32 %0, 3
  br label %70

69:                                               ; preds = %2
  br label %70

70:                                               ; preds = %2, %69, %67, %63, %59, %57, %53, %49, %47, %43, %39, %37, %33, %29, %27, %23, %19, %17, %13, %9, %7, %3
  %71 = phi i32 [ 100000, %69 ], [ %68, %67 ], [ %66, %63 ], [ %62, %59 ], [ %58, %57 ], [ %56, %53 ], [ %52, %49 ], [ %48, %47 ], [ %46, %43 ], [ %42, %39 ], [ %38, %37 ], [ %36, %33 ], [ %32, %29 ], [ %28, %27 ], [ %26, %23 ], [ %22, %19 ], [ %18, %17 ], [ %16, %13 ], [ %12, %9 ], [ %8, %7 ], [ %6, %3 ], [ %0, %2 ]
  ret i32 %71
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

attributes #0 = { nofree norecurse nounwind optsize ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { norecurse nounwind optsize readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { optsize }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
