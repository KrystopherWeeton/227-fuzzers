; ModuleID = '../../third_party/blink/renderer/core/html/parser/html_view_source_parser.cc'
source_filename = "../../third_party/blink/renderer/core/html/parser/html_view_source_parser.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::HTMLViewSourceParser" = type { %"class.blink::DecodedDataDocumentParser", %"class.blink::HTMLInputStream", %"class.blink::HTMLToken", %"class.std::__1::unique_ptr.21", i8, [7 x i8], %"class.blink::SegmentedString", %"class.blink::SegmentedString", %"class.WTF::String" }
%"class.blink::DecodedDataDocumentParser" = type { %"class.blink::DocumentParser", i8, %"class.std::__1::unique_ptr" }
%"class.blink::DocumentParser" = type { %"class.blink::NameClient", i32, i8, %"class.blink::Member", %"class.blink::HeapHashSet" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::Document"* }
%"class.blink::Document" = type { %"class.blink::ContainerNode", %"class.blink::TreeScope", %"class.blink::UseCounter", %"class.blink::Supplementable", i32, %"class.blink::DocumentLifecycle", i8, i8, %"class.WTF::Vector.87", %"class.WTF::Vector.87", i8, i32, %"class.blink::Member.98", %"class.blink::Member.100", %"class.blink::Member.102", %"class.blink::Member.104", %"class.blink::Member.106", %"class.blink::Member.108", i8, %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.std::__1::unique_ptr.116", %"class.blink::KURL", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.blink::Member.122", %"class.blink::Member.124", %"class.blink::Member.77", i32, i32, i32, i8, %"class.blink::TaskHandle", %"class.blink::TaskHandle", %"class.WTF::Vector.127", i8, i32, i8, %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapVector", %"class.blink::Member.52", %"class.blink::Member.143", %"class.blink::Member.52", %"class.blink::Member.52", %"class.blink::Member.52", %"class.blink::UserActionElementSet", %"class.blink::Member.152", double, double, i64, i64, %"class.blink::HeapHashSet.154", %"class.blink::HeapHashSet.161", i16, i8, %"class.blink::Member.168", %"class.blink::Member.170", %"class.blink::Member.172", %"class.blink::Member.174", %"class.blink::TextLinkColors", %"class.blink::Member.176", i8, [7 x i8], %"class.blink::HeapHashMap.178", i32, i32, i8, i8, i8, i32, i32, i32, i8, %"class.WTF::String", %"class.WTF::String", %"class.blink::Member.52", %"class.WTF::Vector.185", %"class.blink::Member.190", %"class.blink::Member.192", i8, %"class.blink::Member.52", i8, i32, i8, %"class.base::ElapsedTimer", %"class.blink::Member.194", %"class.blink::HeapVector.196", %"class.std::__1::unique_ptr.204", %"class.WTF::String", %"class.WTF::String", i8, %"class.WTF::AtomicString", %"class.blink::DocumentEncodingData", i8, i8, [6 x i8], %"class.blink::HeapHashSet.210", %"class.blink::LiveNodeListRegistry", %"class.blink::Member.222", %"class.WTF::Vector.224", i8, i8, %"class.std::__1::unique_ptr.229", %"class.blink::NthIndexCache"*, i8, i8, i8, i8, i8, i8, %"class.blink::LayoutView"*, %"class.blink::HeapVector", %"class.blink::HeapVector.235", i32, i8, %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapTaskRunnerTimer", %"class.blink::DocumentTiming", %"class.blink::Member.243", i8, i32, %"class.blink::Member.245", %"class.blink::Member.247", %"class.blink::Member.249", %"class.blink::HeapTaskRunnerTimer", %"class.blink::Member.251", %"class.WTF::HashMap.253", %"class.blink::Member.258", %"class.blink::Member.260", %"class.blink::Member.262", %"class.blink::Member.264", %"class.blink::Member", %"class.blink::Member", %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapHashSet.266", i8, i32, %"class.blink::Member.273", %"class.blink::Member.275", i32, %"class.blink::Member.277", %"class.blink::Member.279", %"class.blink::Member.281", %"class.std::__1::unique_ptr.283", i64, %"class.std::__1::unique_ptr.289", i32, i32, %"class.blink::Member.295", %"class.blink::Member.297", %"class.blink::Member.299", i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, %"class.blink::Member.301", %"class.WTF::Vector.303", %"class.WTF::AtomicString", %"class.blink::HeapHashMap.308", %"class.blink::Member.315", %"class.std::__1::unique_ptr.317", %"class.blink::Member.323", i8, i8, %"class.WTF::String", %"class.blink::Member.325", i8, [7 x i8], %"class.blink::HeapHashMap.327", %"class.blink::HeapObserverSet", %"class.blink::Member.341", i8, i8, i8, i8, i8, i8, i8, %"class.blink::Member.343", i32, i8, i8, %"class.blink::WeakMember.345", %"class.blink::Member.346" }
%"class.blink::ContainerNode" = type { %"class.blink::Node", %"class.blink::Member.30", %"class.blink::Member.30" }
%"class.blink::Node" = type { %"class.blink::EventTarget", i32, %"class.blink::Member.30", %"class.blink::Member.32", %"class.blink::Member.30", %"class.blink::Member.30", %"class.blink::Member.34" }
%"class.blink::EventTarget" = type { %"class.blink::ScriptWrappable" }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.blink::Member.32" = type { %"class.blink::MemberBase.33" }
%"class.blink::MemberBase.33" = type { %"class.blink::TreeScope"* }
%"class.blink::Member.34" = type { %"class.blink::MemberBase.35" }
%"class.blink::MemberBase.35" = type { %"class.blink::NodeData"* }
%"class.blink::NodeData" = type { i16, %"class.WTF::ConcurrentlyReadBitField" }
%"class.WTF::ConcurrentlyReadBitField" = type { %"class.WTF::SingleThreadedBitField" }
%"class.WTF::SingleThreadedBitField" = type { i16 }
%"class.blink::Member.30" = type { %"class.blink::MemberBase.31" }
%"class.blink::MemberBase.31" = type { %"class.blink::Node"* }
%"class.blink::TreeScope" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.38", %"class.blink::Member", %"class.blink::Member.32", %"class.blink::Member.40", %"class.blink::Member.40", %"class.blink::Member.60", %"class.blink::Member.62", %"class.blink::Member.64", %"class.blink::RadioButtonGroupScope", %"class.blink::Member.69", %"class.blink::HeapVector.71" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::Member.38" = type { %"class.blink::MemberBase.39" }
%"class.blink::MemberBase.39" = type { %"class.blink::ContainerNode"* }
%"class.blink::Member.40" = type { %"class.blink::MemberBase.41" }
%"class.blink::MemberBase.41" = type { %"class.blink::TreeOrderedMap"* }
%"class.blink::TreeOrderedMap" = type { %"class.blink::HeapHashMap" }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap" }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable.46" }
%"class.WTF::HashTable.46" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type { %"class.WTF::AtomicString", %"class.blink::Member.48" }
%"class.blink::Member.48" = type { %"class.blink::MemberBase.49" }
%"class.blink::MemberBase.49" = type { %"class.blink::TreeOrderedMap::MapEntry"* }
%"class.blink::TreeOrderedMap::MapEntry" = type { %"class.blink::Member.52", i32, %"class.blink::HeapVector" }
%"class.blink::Member.60" = type { %"class.blink::MemberBase.61" }
%"class.blink::MemberBase.61" = type { %"class.blink::IdTargetObserverRegistry"* }
%"class.blink::IdTargetObserverRegistry" = type opaque
%"class.blink::Member.62" = type { %"class.blink::MemberBase.63" }
%"class.blink::MemberBase.63" = type { %"class.blink::ScopedStyleResolver"* }
%"class.blink::ScopedStyleResolver" = type opaque
%"class.blink::Member.64" = type { %"class.blink::MemberBase.65" }
%"class.blink::MemberBase.65" = type { %"class.blink::DOMSelection"* }
%"class.blink::DOMSelection" = type opaque
%"class.blink::RadioButtonGroupScope" = type { %"class.blink::Member.66" }
%"class.blink::Member.66" = type { %"class.blink::MemberBase.67" }
%"class.blink::MemberBase.67" = type { %"class.blink::HeapHashMap.68"* }
%"class.blink::HeapHashMap.68" = type opaque
%"class.blink::Member.69" = type { %"class.blink::MemberBase.70" }
%"class.blink::MemberBase.70" = type { %"class.blink::SVGTreeScopeResources"* }
%"class.blink::SVGTreeScopeResources" = type opaque
%"class.blink::HeapVector.71" = type { %"class.WTF::Vector.74" }
%"class.WTF::Vector.74" = type { %"class.WTF::VectorBuffer.75" }
%"class.WTF::VectorBuffer.75" = type { %"class.WTF::VectorBufferBase.76" }
%"class.WTF::VectorBufferBase.76" = type { %"class.blink::Member.77"*, i32, i32 }
%"class.blink::UseCounter" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::Supplementable" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.80" }
%"class.blink::HeapHashMap.80" = type { %"class.WTF::HashMap.83" }
%"class.WTF::HashMap.83" = type { %"class.WTF::HashTable.84" }
%"class.WTF::HashTable.84" = type <{ %"struct.WTF::KeyValuePair.86"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.86" = type opaque
%"class.blink::DocumentLifecycle" = type <{ i32, i32, i32, i8, i8, [2 x i8] }>
%"class.WTF::Vector.87" = type { %"class.WTF::VectorBuffer.88" }
%"class.WTF::VectorBuffer.88" = type { %"class.WTF::VectorBufferBase.89" }
%"class.WTF::VectorBufferBase.89" = type { %"class.base::OnceCallback"*, i32, i32 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.90 }
%class.scoped_refptr.90 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic.91" }
%"struct.std::__1::atomic.91" = type { %"struct.std::__1::__atomic_base.92" }
%"struct.std::__1::__atomic_base.92" = type { %"struct.std::__1::__atomic_base.93" }
%"struct.std::__1::__atomic_base.93" = type { %"struct.std::__1::__cxx_atomic_impl.94" }
%"struct.std::__1::__cxx_atomic_impl.94" = type { %"struct.std::__1::__cxx_atomic_base_impl.95" }
%"struct.std::__1::__cxx_atomic_base_impl.95" = type { i32 }
%"class.blink::Member.98" = type { %"class.blink::MemberBase.99" }
%"class.blink::MemberBase.99" = type { %"class.blink::LocalDOMWindow"* }
%"class.blink::LocalDOMWindow" = type opaque
%"class.blink::Member.100" = type { %"class.blink::MemberBase.101" }
%"class.blink::MemberBase.101" = type { %"class.blink::ExecutionContext"* }
%"class.blink::ExecutionContext" = type opaque
%"class.blink::Member.102" = type { %"class.blink::MemberBase.103" }
%"class.blink::MemberBase.103" = type { %"class.blink::ResourceFetcher"* }
%"class.blink::ResourceFetcher" = type opaque
%"class.blink::Member.104" = type { %"class.blink::MemberBase.105" }
%"class.blink::MemberBase.105" = type { %"class.blink::DocumentParser"* }
%"class.blink::Member.106" = type { %"class.blink::MemberBase.107" }
%"class.blink::MemberBase.107" = type { %"class.blink::ContextFeatures"* }
%"class.blink::ContextFeatures" = type opaque
%"class.blink::Member.108" = type { %"class.blink::MemberBase.109" }
%"class.blink::MemberBase.109" = type { %"class.blink::HttpRefreshScheduler"* }
%"class.blink::HttpRefreshScheduler" = type opaque
%"class.std::__1::unique_ptr.116" = type { %"class.std::__1::__compressed_pair.117" }
%"class.std::__1::__compressed_pair.117" = type { %"struct.std::__1::__compressed_pair_elem.118" }
%"struct.std::__1::__compressed_pair_elem.118" = type { %"class.blink::OriginAccessEntry"* }
%"class.blink::OriginAccessEntry" = type opaque
%"class.blink::KURL" = type { i8, i8, %"class.WTF::String", %"struct.url::Parsed", %"class.WTF::String", %"class.std::__1::unique_ptr.110" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr.110" = type { %"class.std::__1::__compressed_pair.111" }
%"class.std::__1::__compressed_pair.111" = type { %"struct.std::__1::__compressed_pair_elem.112" }
%"struct.std::__1::__compressed_pair_elem.112" = type { %"class.blink::KURL"* }
%"class.blink::Member.122" = type { %"class.blink::MemberBase.123" }
%"class.blink::MemberBase.123" = type { %"class.blink::DocumentType"* }
%"class.blink::DocumentType" = type opaque
%"class.blink::Member.124" = type { %"class.blink::MemberBase.125" }
%"class.blink::MemberBase.125" = type { %"class.blink::DOMImplementation"* }
%"class.blink::DOMImplementation" = type opaque
%"class.blink::Member.77" = type { %"class.blink::MemberBase.78" }
%"class.blink::MemberBase.78" = type { %"class.blink::CSSStyleSheet"* }
%"class.blink::CSSStyleSheet" = type opaque
%"class.blink::TaskHandle" = type { %class.scoped_refptr.126 }
%class.scoped_refptr.126 = type { %"class.blink::TaskHandle::Runner"* }
%"class.blink::TaskHandle::Runner" = type opaque
%"class.WTF::Vector.127" = type { %"class.WTF::VectorBuffer.128" }
%"class.WTF::VectorBuffer.128" = type { %"class.WTF::VectorBufferBase.129" }
%"class.WTF::VectorBufferBase.129" = type { %"struct.blink::Document::PendingJavascriptUrl"*, i32, i32 }
%"struct.blink::Document::PendingJavascriptUrl" = type { %"class.blink::KURL", %class.scoped_refptr.130 }
%class.scoped_refptr.130 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::DOMWrapperWorld" = type opaque
%"class.blink::Member.143" = type { %"class.blink::MemberBase.144" }
%"class.blink::MemberBase.144" = type { %"class.blink::Range"* }
%"class.blink::Range" = type opaque
%"class.blink::UserActionElementSet" = type { %"class.blink::HeapHashMap.145" }
%"class.blink::HeapHashMap.145" = type { %"class.WTF::HashMap.148" }
%"class.WTF::HashMap.148" = type { %"class.WTF::HashTable.149" }
%"class.WTF::HashTable.149" = type <{ %"struct.WTF::KeyValuePair.151"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.151" = type opaque
%"class.blink::Member.152" = type { %"class.blink::MemberBase.153" }
%"class.blink::MemberBase.153" = type { %"class.blink::RootScrollerController"* }
%"class.blink::RootScrollerController" = type opaque
%"class.blink::HeapHashSet.154" = type { %"class.WTF::HashSet.157" }
%"class.WTF::HashSet.157" = type { %"class.WTF::HashTable.158" }
%"class.WTF::HashTable.158" = type <{ %"class.blink::WeakMember.160"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.160" = type opaque
%"class.blink::HeapHashSet.161" = type { %"class.WTF::HashSet.164" }
%"class.WTF::HashSet.164" = type { %"class.WTF::HashTable.165" }
%"class.WTF::HashTable.165" = type <{ %"class.blink::WeakMember.167"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.167" = type opaque
%"class.blink::Member.168" = type { %"class.blink::MemberBase.169" }
%"class.blink::MemberBase.169" = type { %"class.blink::ElementIntersectionObserverData"* }
%"class.blink::ElementIntersectionObserverData" = type opaque
%"class.blink::Member.170" = type { %"class.blink::MemberBase.171" }
%"class.blink::MemberBase.171" = type { %"class.blink::StyleEngine"* }
%"class.blink::StyleEngine" = type opaque
%"class.blink::Member.172" = type { %"class.blink::MemberBase.173" }
%"class.blink::MemberBase.173" = type { %"class.blink::StyleSheetList"* }
%"class.blink::StyleSheetList" = type opaque
%"class.blink::Member.174" = type { %"class.blink::MemberBase.175" }
%"class.blink::MemberBase.175" = type { %"class.blink::FormController"* }
%"class.blink::FormController" = type opaque
%"class.blink::TextLinkColors" = type { %"class.blink::Color", %"class.blink::Color", %"class.blink::Color", %"class.blink::Color", i8, i8, i8, i8 }
%"class.blink::Color" = type { i32 }
%"class.blink::Member.176" = type { %"class.blink::MemberBase.177" }
%"class.blink::MemberBase.177" = type { %"class.blink::VisitedLinkState"* }
%"class.blink::VisitedLinkState" = type opaque
%"class.blink::HeapHashMap.178" = type { %"class.WTF::HashMap.181" }
%"class.WTF::HashMap.181" = type { %"class.WTF::HashTable.182" }
%"class.WTF::HashTable.182" = type <{ %"struct.WTF::KeyValuePair.184"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.184" = type opaque
%"class.WTF::Vector.185" = type { %"class.WTF::VectorBuffer.186" }
%"class.WTF::VectorBuffer.186" = type { %"class.WTF::VectorBufferBase.187" }
%"class.WTF::VectorBufferBase.187" = type { %"class.blink::AXContext"**, i32, i32 }
%"class.blink::AXContext" = type opaque
%"class.blink::Member.190" = type { %"class.blink::MemberBase.191" }
%"class.blink::MemberBase.191" = type { %"class.blink::AXObjectCache"* }
%"class.blink::AXObjectCache" = type opaque
%"class.blink::Member.192" = type { %"class.blink::MemberBase.193" }
%"class.blink::MemberBase.193" = type { %"class.blink::DocumentMarkerController"* }
%"class.blink::DocumentMarkerController" = type opaque
%"class.blink::Member.52" = type { %"class.blink::MemberBase.53" }
%"class.blink::MemberBase.53" = type { %"class.blink::Element"* }
%"class.blink::Element" = type opaque
%"class.base::ElapsedTimer" = type { %"class.base::TimeTicks" }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.blink::Member.194" = type { %"class.blink::MemberBase.195" }
%"class.blink::MemberBase.195" = type { %"class.blink::ScriptRunner"* }
%"class.blink::ScriptRunner" = type opaque
%"class.blink::HeapVector.196" = type { %"class.WTF::Vector.199" }
%"class.WTF::Vector.199" = type { %"class.WTF::VectorBuffer.200" }
%"class.WTF::VectorBuffer.200" = type { %"class.WTF::VectorBufferBase.201" }
%"class.WTF::VectorBufferBase.201" = type { %"class.blink::Member.202"*, i32, i32 }
%"class.blink::Member.202" = type opaque
%"class.std::__1::unique_ptr.204" = type { %"class.std::__1::__compressed_pair.205" }
%"class.std::__1::__compressed_pair.205" = type { %"struct.std::__1::__compressed_pair_elem.206" }
%"struct.std::__1::__compressed_pair_elem.206" = type { %"class.blink::TransformSource"* }
%"class.blink::TransformSource" = type opaque
%"class.blink::DocumentEncodingData" = type <{ %"class.WTF::TextEncoding", i8, i8, [6 x i8] }>
%"class.WTF::TextEncoding" = type { i8* }
%"class.blink::HeapHashSet.210" = type { %"class.WTF::HashSet.213" }
%"class.WTF::HashSet.213" = type { %"class.WTF::HashTable.214" }
%"class.WTF::HashTable.214" = type <{ %"class.blink::WeakMember.216"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.216" = type opaque
%"class.blink::LiveNodeListRegistry" = type <{ %"class.WTF::Vector.217", i32, [4 x i8] }>
%"class.WTF::Vector.217" = type { %"class.WTF::VectorBuffer.218" }
%"class.WTF::VectorBuffer.218" = type { %"class.WTF::VectorBufferBase.219" }
%"class.WTF::VectorBufferBase.219" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type opaque
%"class.blink::Member.222" = type { %"class.blink::MemberBase.223" }
%"class.blink::MemberBase.223" = type { %"class.blink::SVGDocumentExtensions"* }
%"class.blink::SVGDocumentExtensions" = type opaque
%"class.WTF::Vector.224" = type { %"class.WTF::VectorBuffer.225" }
%"class.WTF::VectorBuffer.225" = type { %"class.WTF::VectorBufferBase.226" }
%"class.WTF::VectorBufferBase.226" = type { %"struct.blink::AnnotatedRegionValue"*, i32, i32 }
%"struct.blink::AnnotatedRegionValue" = type opaque
%"class.std::__1::unique_ptr.229" = type { %"class.std::__1::__compressed_pair.230" }
%"class.std::__1::__compressed_pair.230" = type { %"struct.std::__1::__compressed_pair_elem.231" }
%"struct.std::__1::__compressed_pair_elem.231" = type { %"class.blink::SelectorQueryCache"* }
%"class.blink::SelectorQueryCache" = type opaque
%"class.blink::NthIndexCache" = type opaque
%"class.blink::LayoutView" = type opaque
%"class.blink::HeapVector" = type { %"class.WTF::Vector.56" }
%"class.WTF::Vector.56" = type { %"class.WTF::VectorBuffer.57" }
%"class.WTF::VectorBuffer.57" = type { %"class.WTF::VectorBufferBase.58" }
%"class.WTF::VectorBufferBase.58" = type { %"class.blink::Member.52"*, i32, i32 }
%"class.blink::HeapVector.235" = type { %"class.WTF::Vector.238" }
%"class.WTF::Vector.238" = type { %"class.WTF::VectorBuffer.239" }
%"class.WTF::VectorBuffer.239" = type { %"class.WTF::VectorBufferBase.240" }
%"class.WTF::VectorBufferBase.240" = type { %"class.blink::Member.241"*, i32, i32 }
%"class.blink::Member.241" = type opaque
%"class.blink::DocumentTiming" = type { %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.blink::Member" }
%"class.blink::Member.243" = type { %"class.blink::MemberBase.244" }
%"class.blink::MemberBase.244" = type { %"class.blink::MediaQueryMatcher"* }
%"class.blink::MediaQueryMatcher" = type opaque
%"class.blink::Member.245" = type { %"class.blink::MemberBase.246" }
%"class.blink::MemberBase.246" = type { %"class.blink::ScriptedAnimationController"* }
%"class.blink::ScriptedAnimationController" = type opaque
%"class.blink::Member.247" = type { %"class.blink::MemberBase.248" }
%"class.blink::MemberBase.248" = type { %"class.blink::ScriptedIdleTaskController"* }
%"class.blink::ScriptedIdleTaskController" = type opaque
%"class.blink::Member.249" = type { %"class.blink::MemberBase.250" }
%"class.blink::MemberBase.250" = type { %"class.blink::TextAutosizer"* }
%"class.blink::TextAutosizer" = type opaque
%"class.blink::Member.251" = type { %"class.blink::MemberBase.252" }
%"class.blink::MemberBase.252" = type { %"class.blink::ElementDataCache"* }
%"class.blink::ElementDataCache" = type opaque
%"class.WTF::HashMap.253" = type { %"class.WTF::HashTable.254" }
%"class.WTF::HashTable.254" = type <{ %"struct.WTF::KeyValuePair.257"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.257" = type opaque
%"class.blink::Member.258" = type { %"class.blink::MemberBase.259" }
%"class.blink::MemberBase.259" = type { %"class.blink::DocumentAnimations"* }
%"class.blink::DocumentAnimations" = type opaque
%"class.blink::Member.260" = type { %"class.blink::MemberBase.261" }
%"class.blink::MemberBase.261" = type { %"class.blink::DocumentTimeline"* }
%"class.blink::DocumentTimeline" = type opaque
%"class.blink::Member.262" = type { %"class.blink::MemberBase.263" }
%"class.blink::MemberBase.263" = type { %"class.blink::PendingAnimations"* }
%"class.blink::PendingAnimations" = type opaque
%"class.blink::Member.264" = type { %"class.blink::MemberBase.265" }
%"class.blink::MemberBase.265" = type { %"class.blink::WorkletAnimationController"* }
%"class.blink::WorkletAnimationController" = type opaque
%"class.blink::HeapTaskRunnerTimer" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.142", { i64, i64 } }
%"class.blink::TimerBase" = type { i32 (...)**, %"class.base::TimeTicks", %"class.base::TimeDelta", %"class.base::Location", %class.scoped_refptr.133, %"class.base::WeakPtrFactory" }
%"class.base::TimeDelta" = type { i64 }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%class.scoped_refptr.133 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.134" }>
%"class.base::RefCountedThreadSafe.134" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.135 }
%class.scoped_refptr.135 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.136", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.136" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.137" }
%"struct.std::__1::atomic.137" = type { %"struct.std::__1::__atomic_base.138" }
%"struct.std::__1::__atomic_base.138" = type { %"struct.std::__1::__atomic_base.139" }
%"struct.std::__1::__atomic_base.139" = type { %"struct.std::__1::__cxx_atomic_impl.140" }
%"struct.std::__1::__cxx_atomic_impl.140" = type { %"struct.std::__1::__cxx_atomic_base_impl.141" }
%"struct.std::__1::__cxx_atomic_base_impl.141" = type { i8 }
%"class.blink::WeakMember.142" = type { %"class.blink::MemberBase" }
%"class.blink::HeapHashSet.266" = type { %"class.WTF::HashSet.269" }
%"class.WTF::HashSet.269" = type { %"class.WTF::HashTable.270" }
%"class.WTF::HashTable.270" = type <{ %"class.blink::Member.272"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.272" = type opaque
%"class.blink::Member.273" = type { %"class.blink::MemberBase.274" }
%"class.blink::MemberBase.274" = type { %"class.blink::CanvasFontCache"* }
%"class.blink::CanvasFontCache" = type opaque
%"class.blink::Member.275" = type { %"class.blink::MemberBase.276" }
%"class.blink::MemberBase.276" = type { %"class.blink::IntersectionObserverController"* }
%"class.blink::IntersectionObserverController" = type opaque
%"class.blink::Member.277" = type { %"class.blink::MemberBase.278" }
%"class.blink::MemberBase.278" = type { %"class.blink::SnapCoordinator"* }
%"class.blink::SnapCoordinator" = type opaque
%"class.blink::Member.279" = type { %"class.blink::MemberBase.280" }
%"class.blink::MemberBase.280" = type { %"class.blink::PropertyRegistry"* }
%"class.blink::PropertyRegistry" = type opaque
%"class.blink::Member.281" = type { %"class.blink::MemberBase.282" }
%"class.blink::MemberBase.282" = type { %"class.blink::Document::NetworkStateObserver"* }
%"class.blink::Document::NetworkStateObserver" = type opaque
%"class.std::__1::unique_ptr.283" = type { %"class.std::__1::__compressed_pair.284" }
%"class.std::__1::__compressed_pair.284" = type { %"struct.std::__1::__compressed_pair_elem.285" }
%"struct.std::__1::__compressed_pair_elem.285" = type { %"class.ukm::UkmRecorder"* }
%"class.ukm::UkmRecorder" = type opaque
%"class.std::__1::unique_ptr.289" = type { %"class.std::__1::__compressed_pair.290" }
%"class.std::__1::__compressed_pair.290" = type { %"struct.std::__1::__compressed_pair_elem.291" }
%"struct.std::__1::__compressed_pair_elem.291" = type { %"class.blink::FontMatchingMetrics"* }
%"class.blink::FontMatchingMetrics" = type opaque
%"class.blink::Member.295" = type { %"class.blink::MemberBase.296" }
%"class.blink::MemberBase.296" = type { %"class.blink::DOMFeaturePolicy"* }
%"class.blink::DOMFeaturePolicy" = type opaque
%"class.blink::Member.297" = type { %"class.blink::MemberBase.298" }
%"class.blink::MemberBase.298" = type { %"class.blink::SlotAssignmentEngine"* }
%"class.blink::SlotAssignmentEngine" = type opaque
%"class.blink::Member.299" = type { %"class.blink::MemberBase.300" }
%"class.blink::MemberBase.300" = type { %"class.blink::ViewportData"* }
%"class.blink::ViewportData" = type opaque
%"class.blink::Member.301" = type { %"class.blink::MemberBase.302" }
%"class.blink::MemberBase.302" = type { %"class.blink::LazyLoadImageObserver"* }
%"class.blink::LazyLoadImageObserver" = type opaque
%"class.WTF::Vector.303" = type { %"class.WTF::VectorBuffer.304" }
%"class.WTF::VectorBuffer.304" = type { %"class.WTF::VectorBufferBase.305" }
%"class.WTF::VectorBufferBase.305" = type { i8*, i32, i32 }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.blink::HeapHashMap.308" = type { %"class.WTF::HashMap.311" }
%"class.WTF::HashMap.311" = type { %"class.WTF::HashTable.312" }
%"class.WTF::HashTable.312" = type <{ %"struct.WTF::KeyValuePair.314"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.314" = type opaque
%"class.blink::Member.315" = type { %"class.blink::MemberBase.316" }
%"class.blink::MemberBase.316" = type { %"class.blink::BeforeUnloadEventListener"* }
%"class.blink::BeforeUnloadEventListener" = type opaque
%"class.std::__1::unique_ptr.317" = type { %"class.std::__1::__compressed_pair.318" }
%"class.std::__1::__compressed_pair.318" = type { %"struct.std::__1::__compressed_pair_elem.319" }
%"struct.std::__1::__compressed_pair_elem.319" = type { %"class.blink::DocumentResourceCoordinator"* }
%"class.blink::DocumentResourceCoordinator" = type opaque
%"class.blink::Member.323" = type { %"class.blink::MemberBase.324" }
%"class.blink::MemberBase.324" = type { %"class.blink::CookieJar"* }
%"class.blink::CookieJar" = type opaque
%"class.blink::Member.325" = type { %"class.blink::MemberBase.326" }
%"class.blink::MemberBase.326" = type { %"class.blink::FragmentDirective"* }
%"class.blink::FragmentDirective" = type { %"class.blink::ScriptWrappable" }
%"class.blink::HeapHashMap.327" = type { %"class.WTF::HashMap.330" }
%"class.WTF::HashMap.330" = type { %"class.WTF::HashTable.331" }
%"class.WTF::HashTable.331" = type <{ %"struct.WTF::KeyValuePair.333"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.333" = type opaque
%"class.blink::HeapObserverSet" = type { i32, [4 x i8], %"class.blink::HeapHashSet.334" }
%"class.blink::HeapHashSet.334" = type { %"class.WTF::HashSet.337" }
%"class.WTF::HashSet.337" = type { %"class.WTF::HashTable.338" }
%"class.WTF::HashTable.338" = type <{ %"class.blink::WeakMember.340"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.340" = type opaque
%"class.blink::Member.341" = type { %"class.blink::MemberBase.342" }
%"class.blink::MemberBase.342" = type { %"class.blink::DisplayLockDocumentState"* }
%"class.blink::DisplayLockDocumentState" = type opaque
%"class.blink::Member.343" = type { %"class.blink::MemberBase.344" }
%"class.blink::MemberBase.344" = type { %"class.blink::FontPreloadManager"* }
%"class.blink::FontPreloadManager" = type <{ %"class.blink::Member", %"class.blink::HeapHashSet.350", i32, [4 x i8], %"class.blink::HeapTaskRunnerTimer.357", %"class.base::TimeDelta", i32, [4 x i8] }>
%"class.blink::HeapHashSet.350" = type { %"class.WTF::HashSet.353" }
%"class.WTF::HashSet.353" = type { %"class.WTF::HashTable.354" }
%"class.WTF::HashTable.354" = type <{ %"class.blink::Member.356"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.356" = type opaque
%"class.blink::HeapTaskRunnerTimer.357" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.358", { i64, i64 } }
%"class.blink::WeakMember.358" = type { %"class.blink::MemberBase.344" }
%"class.blink::WeakMember.345" = type { %"class.blink::MemberBase.31" }
%"class.blink::Member.346" = type { %"class.blink::MemberBase.347" }
%"class.blink::MemberBase.347" = type { %"class.blink::DocumentData"* }
%"class.blink::DocumentData" = type opaque
%"class.blink::HeapHashSet" = type { %"class.WTF::HashSet" }
%"class.WTF::HashSet" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"class.blink::WeakMember"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember" = type opaque
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::TextResourceDecoder"* }
%"class.blink::TextResourceDecoder" = type opaque
%"class.blink::HTMLInputStream" = type { %"class.blink::SegmentedString", %"class.blink::SegmentedString"* }
%"class.blink::HTMLToken" = type { i32, %"class.blink::HTMLToken::Attribute::Range", i32, %class.LiteralBuffer, i16, i8, %"class.WTF::Vector", %"class.blink::HTMLToken::Attribute"*, %"class.std::__1::unique_ptr.10" }
%"class.blink::HTMLToken::Attribute::Range" = type { i32, i32 }
%class.LiteralBuffer = type { i16*, i16*, i16*, [256 x i16] }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer.5" }
%"class.WTF::VectorBuffer.5" = type { %"class.WTF::VectorBufferBase.6", [1920 x i8] }
%"class.WTF::VectorBufferBase.6" = type { %"class.blink::HTMLToken::Attribute"*, i32, i32 }
%"class.blink::HTMLToken::Attribute" = type { %class.LiteralBuffer.7, %class.LiteralBuffer.7, %"class.blink::HTMLToken::Attribute::Range", %"class.blink::HTMLToken::Attribute::Range" }
%class.LiteralBuffer.7 = type { i16*, i16*, i16*, [32 x i16] }
%"class.std::__1::unique_ptr.10" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"class.blink::DoctypeData"* }
%"class.blink::DoctypeData" = type <{ i8, i8, [6 x i8], %"class.WTF::Vector.13", %"class.WTF::Vector.13", i8, [7 x i8] }>
%"class.WTF::Vector.13" = type { %"class.WTF::VectorBuffer.14" }
%"class.WTF::VectorBuffer.14" = type { %"class.WTF::VectorBufferBase.15" }
%"class.WTF::VectorBufferBase.15" = type { i16*, i32, i32 }
%"class.std::__1::unique_ptr.21" = type { %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"class.blink::HTMLTokenizer"* }
%"class.blink::HTMLTokenizer" = type <{ i32, i8, i8, [2 x i8], %"class.blink::HTMLToken"*, i16, [6 x i8], %"class.blink::InputStreamPreprocessor", %class.LiteralBuffer.7, %class.LiteralBuffer.24, %class.LiteralBuffer.24, %"class.blink::HTMLParserOptions", [6 x i8] }>
%"class.blink::InputStreamPreprocessor" = type <{ %"class.blink::HTMLTokenizer"*, i8, [7 x i8] }>
%class.LiteralBuffer.24 = type { i8*, i8*, i8*, [32 x i8] }
%"class.blink::HTMLParserOptions" = type { i8, i8 }
%"class.blink::SegmentedString" = type <{ %"class.blink::SegmentedSubstring", i32, i32, i32, [4 x i8], %"class.WTF::Deque", i8, i8, [6 x i8] }>
%"class.blink::SegmentedSubstring" = type { %union.anon, i8*, i8*, i8, i8, %"class.WTF::String" }
%union.anon = type { i8* }
%"class.WTF::Deque" = type { %"class.WTF::Deque<blink::SegmentedSubstring, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<blink::SegmentedSubstring, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.blink::SegmentedSubstring"*, i32, i32 }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.blink::HTMLViewSourceDocument" = type <{ %"class.blink::HTMLDocument", %"class.WTF::String", %"class.blink::Member.52", %"class.blink::Member.364", %"class.blink::Member.366", i32, [4 x i8] }>
%"class.blink::HTMLDocument" = type { %"class.blink::Document", %"class.WTF::HashCountedSet" }
%"class.WTF::HashCountedSet" = type { %"class.WTF::HashMap.359" }
%"class.WTF::HashMap.359" = type { %"class.WTF::HashTable.360" }
%"class.WTF::HashTable.360" = type <{ %"struct.WTF::KeyValuePair.363"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.363" = type <{ %"class.WTF::AtomicString", i32, [4 x i8] }>
%"class.blink::Member.364" = type { %"class.blink::MemberBase.365" }
%"class.blink::MemberBase.365" = type { %"class.blink::HTMLTableSectionElement"* }
%"class.blink::HTMLTableSectionElement" = type opaque
%"class.blink::Member.366" = type { %"class.blink::MemberBase.367" }
%"class.blink::MemberBase.367" = type { %"class.blink::HTMLTableCellElement"* }
%"class.blink::HTMLTableCellElement" = type opaque
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.WTF::StringBuilder" = type <{ %"class.WTF::String", %union.anon.368, i32, i8, i8, [2 x i8] }>
%union.anon.368 = type { %"class.WTF::Vector.369" }
%"class.WTF::Vector.369" = type { %"class.WTF::VectorBuffer.370" }
%"class.WTF::VectorBuffer.370" = type { %"class.WTF::VectorBufferBase.371", [16 x i8] }
%"class.WTF::VectorBufferBase.371" = type { i8*, i32, i32 }
%"class.WTF::Vector.374" = type { %"class.WTF::VectorBuffer.375" }
%"class.WTF::VectorBuffer.375" = type { %"class.WTF::VectorBufferBase.15", [16 x i8] }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.378", i32, [4 x i8], %"class.std::__1::unique_ptr.514", %"class.std::__1::unique_ptr.514", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque.520", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.526", %"class.std::__1::unique_ptr.532", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.544", %"class.std::__1::unique_ptr.550", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.557", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.378" = type { %"class.std::__1::__compressed_pair.379" }
%"class.std::__1::__compressed_pair.379" = type { %"struct.std::__1::__compressed_pair_elem.380" }
%"struct.std::__1::__compressed_pair_elem.380" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.381", %"class.std::__1::unique_ptr.387", %"class.std::__1::unique_ptr.393", %"class.std::__1::unique_ptr.399", %"class.std::__1::unique_ptr.405", %"class.std::__1::unique_ptr.411", %"class.std::__1::unique_ptr.422", %"class.std::__1::unique_ptr.429", %"class.std::__1::unique_ptr.429", %"class.std::__1::unique_ptr.436", %"class.std::__1::unique_ptr.443", %"class.std::__1::unique_ptr.450", %"class.std::__1::unique_ptr.450", %"class.std::__1::unique_ptr.457", %"class.std::__1::unique_ptr.464", %"class.std::__1::unique_ptr.471", %"class.std::__1::unique_ptr.494", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.381" = type { %"class.std::__1::__compressed_pair.382" }
%"class.std::__1::__compressed_pair.382" = type { %"struct.std::__1::__compressed_pair_elem.383" }
%"struct.std::__1::__compressed_pair_elem.383" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.387" = type { %"class.std::__1::__compressed_pair.388" }
%"class.std::__1::__compressed_pair.388" = type { %"struct.std::__1::__compressed_pair_elem.389" }
%"struct.std::__1::__compressed_pair_elem.389" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.393" = type { %"class.std::__1::__compressed_pair.394" }
%"class.std::__1::__compressed_pair.394" = type { %"struct.std::__1::__compressed_pair_elem.395" }
%"struct.std::__1::__compressed_pair_elem.395" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.399" = type { %"class.std::__1::__compressed_pair.400" }
%"class.std::__1::__compressed_pair.400" = type { %"struct.std::__1::__compressed_pair_elem.401" }
%"struct.std::__1::__compressed_pair_elem.401" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.405" = type { %"class.std::__1::__compressed_pair.406" }
%"class.std::__1::__compressed_pair.406" = type { %"struct.std::__1::__compressed_pair_elem.407" }
%"struct.std::__1::__compressed_pair_elem.407" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.411" = type { %"class.std::__1::__compressed_pair.412" }
%"class.std::__1::__compressed_pair.412" = type { %"struct.std::__1::__compressed_pair_elem.413" }
%"struct.std::__1::__compressed_pair_elem.413" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.414" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.414" = type { %"struct.std::__1::__atomic_base.415" }
%"struct.std::__1::__atomic_base.415" = type { %"struct.std::__1::__atomic_base.416" }
%"struct.std::__1::__atomic_base.416" = type { %"struct.std::__1::__cxx_atomic_impl.417" }
%"struct.std::__1::__cxx_atomic_impl.417" = type { %"struct.std::__1::__cxx_atomic_base_impl.418" }
%"struct.std::__1::__cxx_atomic_base_impl.418" = type { i64 }
%"class.std::__1::unique_ptr.422" = type { %"class.std::__1::__compressed_pair.423" }
%"class.std::__1::__compressed_pair.423" = type { %"struct.std::__1::__compressed_pair_elem.424" }
%"struct.std::__1::__compressed_pair_elem.424" = type { %"class.blink::Worklist.425"* }
%"class.blink::Worklist.425" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.414" }
%"class.std::__1::unique_ptr.429" = type { %"class.std::__1::__compressed_pair.430" }
%"class.std::__1::__compressed_pair.430" = type { %"struct.std::__1::__compressed_pair_elem.431" }
%"struct.std::__1::__compressed_pair_elem.431" = type { %"class.blink::Worklist.432"* }
%"class.blink::Worklist.432" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.414" }
%"class.std::__1::unique_ptr.436" = type { %"class.std::__1::__compressed_pair.437" }
%"class.std::__1::__compressed_pair.437" = type { %"struct.std::__1::__compressed_pair_elem.438" }
%"struct.std::__1::__compressed_pair_elem.438" = type { %"class.blink::Worklist.439"* }
%"class.blink::Worklist.439" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.414" }
%"class.std::__1::unique_ptr.443" = type { %"class.std::__1::__compressed_pair.444" }
%"class.std::__1::__compressed_pair.444" = type { %"struct.std::__1::__compressed_pair_elem.445" }
%"struct.std::__1::__compressed_pair_elem.445" = type { %"class.blink::Worklist.446"* }
%"class.blink::Worklist.446" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.414" }
%"class.std::__1::unique_ptr.450" = type { %"class.std::__1::__compressed_pair.451" }
%"class.std::__1::__compressed_pair.451" = type { %"struct.std::__1::__compressed_pair_elem.452" }
%"struct.std::__1::__compressed_pair_elem.452" = type { %"class.blink::Worklist.453"* }
%"class.blink::Worklist.453" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.414" }
%"class.std::__1::unique_ptr.457" = type { %"class.std::__1::__compressed_pair.458" }
%"class.std::__1::__compressed_pair.458" = type { %"struct.std::__1::__compressed_pair_elem.459" }
%"struct.std::__1::__compressed_pair_elem.459" = type { %"class.blink::Worklist.460"* }
%"class.blink::Worklist.460" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.414" }
%"class.std::__1::unique_ptr.464" = type { %"class.std::__1::__compressed_pair.465" }
%"class.std::__1::__compressed_pair.465" = type { %"struct.std::__1::__compressed_pair_elem.466" }
%"struct.std::__1::__compressed_pair_elem.466" = type { %"class.blink::Worklist.467"* }
%"class.blink::Worklist.467" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.414" }
%"class.std::__1::unique_ptr.471" = type { %"class.std::__1::__compressed_pair.472" }
%"class.std::__1::__compressed_pair.472" = type { %"struct.std::__1::__compressed_pair_elem.473" }
%"struct.std::__1::__compressed_pair_elem.473" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.474", %"class.std::__1::__compressed_pair.481", %"class.std::__1::__compressed_pair.486", %"class.std::__1::__compressed_pair.488", [4 x i8] }>
%"class.std::__1::unique_ptr.474" = type { %"class.std::__1::__compressed_pair.475" }
%"class.std::__1::__compressed_pair.475" = type { %"struct.std::__1::__compressed_pair_elem.476", %"struct.std::__1::__compressed_pair_elem.477" }
%"struct.std::__1::__compressed_pair_elem.476" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.477" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.478" }
%"class.std::__1::__compressed_pair.478" = type { %"struct.std::__1::__compressed_pair_elem.479" }
%"struct.std::__1::__compressed_pair_elem.479" = type { i64 }
%"class.std::__1::__compressed_pair.481" = type { %"struct.std::__1::__compressed_pair_elem.482" }
%"struct.std::__1::__compressed_pair_elem.482" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.486" = type { %"struct.std::__1::__compressed_pair_elem.479" }
%"class.std::__1::__compressed_pair.488" = type { %"struct.std::__1::__compressed_pair_elem.489" }
%"struct.std::__1::__compressed_pair_elem.489" = type { float }
%"class.std::__1::unique_ptr.494" = type { %"class.std::__1::__compressed_pair.495" }
%"class.std::__1::__compressed_pair.495" = type { %"struct.std::__1::__compressed_pair_elem.496" }
%"struct.std::__1::__compressed_pair_elem.496" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.497", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.497" = type { %"class.std::__1::__compressed_pair.498" }
%"class.std::__1::__compressed_pair.498" = type { %"struct.std::__1::__compressed_pair_elem.499" }
%"struct.std::__1::__compressed_pair_elem.499" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.506" }
%"class.WTF::Vector.506" = type { %"class.WTF::VectorBuffer.507" }
%"class.WTF::VectorBuffer.507" = type { %"class.WTF::VectorBufferBase.508" }
%"class.WTF::VectorBufferBase.508" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.514" = type { %"class.std::__1::__compressed_pair.515" }
%"class.std::__1::__compressed_pair.515" = type { %"struct.std::__1::__compressed_pair_elem.516" }
%"struct.std::__1::__compressed_pair_elem.516" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque.520" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.523" }
%"class.WTF::VectorBuffer.523" = type { %"class.WTF::VectorBufferBase.524" }
%"class.WTF::VectorBufferBase.524" = type { %"struct.std::__1::pair.525"*, i32, i32 }
%"struct.std::__1::pair.525" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.526" = type { %"class.std::__1::__compressed_pair.527" }
%"class.std::__1::__compressed_pair.527" = type { %"struct.std::__1::__compressed_pair_elem.528" }
%"struct.std::__1::__compressed_pair_elem.528" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.532" = type { %"class.std::__1::__compressed_pair.533" }
%"class.std::__1::__compressed_pair.533" = type { %"struct.std::__1::__compressed_pair_elem.534" }
%"struct.std::__1::__compressed_pair_elem.534" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.538" }
%"class.std::__1::unique_ptr.538" = type { %"class.std::__1::__compressed_pair.539" }
%"class.std::__1::__compressed_pair.539" = type { %"struct.std::__1::__compressed_pair_elem.540" }
%"struct.std::__1::__compressed_pair_elem.540" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.425"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.432"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.439"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.446"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.453"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.561" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.561" = type { %"struct.std::__1::__compressed_pair_elem.562" }
%"struct.std::__1::__compressed_pair_elem.562" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.544" = type { %"class.std::__1::__compressed_pair.545" }
%"class.std::__1::__compressed_pair.545" = type { %"struct.std::__1::__compressed_pair_elem.546" }
%"struct.std::__1::__compressed_pair_elem.546" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.550" = type { %"class.std::__1::__compressed_pair.551" }
%"class.std::__1::__compressed_pair.551" = type { %"struct.std::__1::__compressed_pair_elem.552" }
%"struct.std::__1::__compressed_pair_elem.552" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.556 }
%class.scoped_refptr.556 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.557" = type { %"struct.std::__1::__atomic_base.558" }
%"struct.std::__1::__atomic_base.558" = type { %"struct.std::__1::__cxx_atomic_impl.559" }
%"struct.std::__1::__cxx_atomic_impl.559" = type { %"struct.std::__1::__cxx_atomic_base_impl.560" }
%"struct.std::__1::__cxx_atomic_base_impl.560" = type { i8 }
%"class.blink::ScriptableDocumentParser" = type opaque
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.570" }
%"class.std::__1::__compressed_pair.570" = type { %"struct.std::__1::__compressed_pair_elem.571" }
%"struct.std::__1::__compressed_pair_elem.571" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.572 }
%union.anon.572 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN5blink15HTMLInputStream13MarkEndOfFileEv = comdat any

$_ZN3WTF13StringBuilder6AppendEDs = comdat any

$_ZNK5blink14DocumentParser18NameInHeapSnapshotEv = comdat any

$_ZN5blink20HTMLViewSourceParserD2Ev = comdat any

$_ZN5blink20HTMLViewSourceParserD0Ev = comdat any

$_ZN5blink14DocumentParser26AsScriptableDocumentParserEv = comdat any

$_ZN5blink14DocumentParser17HasInsertionPointEv = comdat any

$_ZN5blink20HTMLViewSourceParser6insertERKN3WTF6StringE = comdat any

$_ZNK5blink25DecodedDataDocumentParser12NeedsDecoderEv = comdat any

$_ZN5blink14DocumentParser18SetHasAppendedDataEv = comdat any

$_ZN5blink14DocumentParser24DocumentElementAvailableEv = comdat any

$_ZNK5blink25DecodedDataDocumentParser10WellFormedEv = comdat any

$_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEE10DestroyAllEv = comdat any

$_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEEC2ERKS4_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink18SegmentedSubstringEEEmm = comdat any

$_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14AppendSlowCaseIRhEEvOT_ = comdat any

$_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14ExpandCapacityEj = comdat any

$_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm = comdat any

$_ZN3WTF12VectorBufferIhLj16ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh = comdat any

$_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_ = comdat any

$_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14ExpandCapacityEj = comdat any

$_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm = comdat any

$_ZN3WTF12VectorBufferIDsLj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPDs = comdat any

$_ZN5blink9HTMLTokenD2Ev = comdat any

$_ZN3WTF12VectorBufferIN5blink9HTMLToken9AttributeELj10ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS3_ = comdat any

@_ZTVN5blink20HTMLViewSourceParserE = hidden unnamed_addr constant { [22 x i8*] } { [22 x i8*] [i8* null, i8* null, i8* bitcast (i8* (%"class.blink::DocumentParser"*)* @_ZNK5blink14DocumentParser18NameInHeapSnapshotEv to i8*), i8* bitcast (void (%"class.blink::HTMLViewSourceParser"*)* @_ZN5blink20HTMLViewSourceParserD2Ev to i8*), i8* bitcast (void (%"class.blink::HTMLViewSourceParser"*)* @_ZN5blink20HTMLViewSourceParserD0Ev to i8*), i8* bitcast (void (%"class.blink::DocumentParser"*, %"class.blink::Visitor"*)* @_ZNK5blink14DocumentParser5TraceEPNS_7VisitorE to i8*), i8* bitcast (%"class.blink::ScriptableDocumentParser"* (%"class.blink::DocumentParser"*)* @_ZN5blink14DocumentParser26AsScriptableDocumentParserEv to i8*), i8* bitcast (i1 (%"class.blink::DocumentParser"*)* @_ZN5blink14DocumentParser17HasInsertionPointEv to i8*), i8* bitcast (void (%"class.blink::HTMLViewSourceParser"*, %"class.WTF::String"*)* @_ZN5blink20HTMLViewSourceParser6insertERKN3WTF6StringE to i8*), i8* bitcast (void (%"class.blink::DecodedDataDocumentParser"*, i8*, i64)* @_ZN5blink25DecodedDataDocumentParser11AppendBytesEPKcm to i8*), i8* bitcast (i1 (%"class.blink::DecodedDataDocumentParser"*)* @_ZNK5blink25DecodedDataDocumentParser12NeedsDecoderEv to i8*), i8* bitcast (void (%"class.blink::DecodedDataDocumentParser"*, %"class.blink::TextResourceDecoder"*)* @_ZN5blink25DecodedDataDocumentParser10SetDecoderENSt3__110unique_ptrINS_19TextResourceDecoderENS1_14default_deleteIS3_EEEE to i8*), i8* bitcast (%"class.blink::TextResourceDecoder"* (%"class.blink::DecodedDataDocumentParser"*)* @_ZN5blink25DecodedDataDocumentParser7DecoderEv to i8*), i8* bitcast (void (%"class.blink::DocumentParser"*)* @_ZN5blink14DocumentParser18SetHasAppendedDataEv to i8*), i8* bitcast (void (%"class.blink::HTMLViewSourceParser"*, %"class.WTF::String"*)* @_ZN5blink20HTMLViewSourceParser6AppendERKN3WTF6StringE to i8*), i8* bitcast (void (%"class.blink::HTMLViewSourceParser"*)* @_ZN5blink20HTMLViewSourceParser6FinishEv to i8*), i8* bitcast (void (%"class.blink::DocumentParser"*)* @_ZN5blink14DocumentParser20PrepareToStopParsingEv to i8*), i8* bitcast (void (%"class.blink::DocumentParser"*)* @_ZN5blink14DocumentParser11StopParsingEv to i8*), i8* bitcast (void (%"class.blink::DocumentParser"*)* @_ZN5blink14DocumentParser6DetachEv to i8*), i8* bitcast (void (%"class.blink::DocumentParser"*)* @_ZN5blink14DocumentParser24DocumentElementAvailableEv to i8*), i8* bitcast (i1 (%"class.blink::DecodedDataDocumentParser"*)* @_ZNK5blink25DecodedDataDocumentParser10WellFormedEv to i8*), i8* bitcast (void (%"class.blink::DecodedDataDocumentParser"*)* @_ZN5blink25DecodedDataDocumentParser5FlushEv to i8*)] }, align 8
@.str = private unnamed_addr constant [10 x i8] c"text/html\00", align 1
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@_ZN5blinkL16kEndOfFileMarkerE = internal constant i8 0, align 1
@.str.1 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.2 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink18SegmentedSubstringEEEPKcv = private unnamed_addr constant [73 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::SegmentedSubstring]\00", align 1
@.str.3 = private unnamed_addr constant [33 x i8] c"expanded_capacity > old_capacity\00", align 1
@.str.4 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv = private unnamed_addr constant [61 x i8] c"const char *WTF::GetStringWithTypeName() [T = unsigned char]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv = private unnamed_addr constant [56 x i8] c"const char *WTF::GetStringWithTypeName() [T = char16_t]\00", align 1
@.str.6 = private unnamed_addr constant [15 x i8] c"DocumentParser\00", align 1

@_ZN5blink20HTMLViewSourceParserC1ERNS_22HTMLViewSourceDocumentERKN3WTF6StringE = hidden unnamed_addr alias void (%"class.blink::HTMLViewSourceParser"*, %"class.blink::HTMLViewSourceDocument"*, %"class.WTF::String"*), void (%"class.blink::HTMLViewSourceParser"*, %"class.blink::HTMLViewSourceDocument"*, %"class.WTF::String"*)* @_ZN5blink20HTMLViewSourceParserC2ERNS_22HTMLViewSourceDocumentERKN3WTF6StringE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20HTMLViewSourceParserC2ERNS_22HTMLViewSourceDocumentERKN3WTF6StringE(%"class.blink::HTMLViewSourceParser"*, %"class.blink::HTMLViewSourceDocument"* dereferenceable(2912), %"class.WTF::String"* dereferenceable(8)) unnamed_addr #0 align 2 {
  %4 = alloca %"class.WTF::StringView", align 8
  %5 = alloca %"class.WTF::StringView", align 8
  %6 = alloca %"class.blink::HTMLParserOptions", align 1
  %7 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 0
  %8 = getelementptr inbounds %"class.blink::HTMLViewSourceDocument", %"class.blink::HTMLViewSourceDocument"* %1, i64 0, i32 0, i32 0
  tail call void @_ZN5blink25DecodedDataDocumentParserC2ERNS_8DocumentE(%"class.blink::DecodedDataDocumentParser"* %7, %"class.blink::Document"* dereferenceable(2848) %8) #10
  %9 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [22 x i8*] }, { [22 x i8*] }* @_ZTVN5blink20HTMLViewSourceParserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %10 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 1
  %11 = getelementptr inbounds %"class.blink::HTMLInputStream", %"class.blink::HTMLInputStream"* %10, i64 0, i32 0
  %12 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 1, i32 0, i32 0, i32 3
  store i8 1, i8* %12, align 8
  %13 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 1, i32 0, i32 0, i32 4
  %14 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 1, i32 0, i32 0, i32 5, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %14, align 8
  store i8 1, i8* %13, align 1
  %15 = bitcast %"class.blink::HTMLInputStream"* %10 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 24, i1 false) #10
  %16 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 1, i32 0, i32 1
  store i32 0, i32* %16, align 8
  %17 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 1, i32 0, i32 2
  store i32 0, i32* %17, align 4
  %18 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 1, i32 0, i32 3
  store i32 0, i32* %18, align 8
  %19 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 1, i32 0, i32 5
  %20 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 1, i32 0, i32 7
  %21 = bitcast %"class.WTF::Deque"* %19 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %21, i8 0, i64 25, i1 false) #10
  store i8 1, i8* %20, align 1
  %22 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 1, i32 1
  store %"class.blink::SegmentedString"* %11, %"class.blink::SegmentedString"** %22, align 8
  %23 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 2, i32 3, i32 0
  %24 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 2, i32 3, i32 3, i64 0
  store i16* %24, i16** %23, align 8
  %25 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 2, i32 3, i32 1
  %26 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 2, i32 3, i32 2
  %27 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 2, i32 3, i32 3, i64 256
  store i16* %27, i16** %26, align 8
  %28 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 2, i32 6
  %29 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 2, i32 6, i32 0, i32 1, i64 0
  %30 = bitcast %"class.WTF::Vector"* %28 to i8**
  store i8* %29, i8** %30, align 8
  %31 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 2, i32 6, i32 0, i32 0, i32 1
  store i32 10, i32* %31, align 8
  %32 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 2, i32 6, i32 0, i32 0, i32 2
  store i32 0, i32* %32, align 4
  %33 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 2, i32 8
  %34 = bitcast %"class.std::__1::unique_ptr.10"* %33 to i64*
  store i64 0, i64* %34, align 8
  %35 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 2, i32 0
  store i32 0, i32* %35, align 8
  %36 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 2, i32 1, i32 0
  store i32 0, i32* %36, align 4
  %37 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 2, i32 2
  store i32 0, i32* %37, align 4
  %38 = ptrtoint i16* %24 to i64
  %39 = bitcast i16** %25 to i64*
  store i64 %38, i64* %39, align 8
  %40 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 2, i32 4
  store i16 0, i16* %40, align 8
  %41 = getelementptr inbounds %"class.blink::HTMLParserOptions", %"class.blink::HTMLParserOptions"* %6, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %41) #10
  call void @_ZN5blink17HTMLParserOptionsC1EPNS_8DocumentE(%"class.blink::HTMLParserOptions"* nonnull %6, %"class.blink::Document"* %8) #10
  %42 = call noalias i8* @malloc(i64 248) #10
  %43 = bitcast i8* %42 to %"class.blink::HTMLTokenizer"*
  call void @_ZN5blink13HTMLTokenizerC1ERKNS_17HTMLParserOptionsE(%"class.blink::HTMLTokenizer"* %43, %"class.blink::HTMLParserOptions"* nonnull dereferenceable(2) %6) #10
  %44 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %45 = bitcast %"class.blink::HTMLTokenizer"** %44 to i8**
  store i8* %42, i8** %45, align 8
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %41) #10
  %46 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 6
  %47 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 6, i32 0, i32 3
  store i8 1, i8* %47, align 8
  %48 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 6, i32 0, i32 4
  %49 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 6, i32 0, i32 5, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %49, align 8
  store i8 1, i8* %48, align 1
  %50 = bitcast %"class.blink::SegmentedString"* %46 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %50, i8 0, i64 24, i1 false) #10
  %51 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 6, i32 1
  store i32 0, i32* %51, align 8
  %52 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 6, i32 2
  store i32 0, i32* %52, align 4
  %53 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 6, i32 3
  store i32 0, i32* %53, align 8
  %54 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 6, i32 5
  %55 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 6, i32 7
  %56 = bitcast %"class.WTF::Deque"* %54 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %56, i8 0, i64 25, i1 false) #10
  store i8 1, i8* %55, align 1
  %57 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 7
  %58 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 7, i32 0, i32 3
  store i8 1, i8* %58, align 8
  %59 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 7, i32 0, i32 4
  %60 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 7, i32 0, i32 5, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %60, align 8
  store i8 1, i8* %59, align 1
  %61 = bitcast %"class.blink::SegmentedString"* %57 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %61, i8 0, i64 24, i1 false) #10
  %62 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 7, i32 1
  store i32 0, i32* %62, align 8
  %63 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 7, i32 2
  store i32 0, i32* %63, align 4
  %64 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 7, i32 3
  store i32 0, i32* %64, align 8
  %65 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 7, i32 5
  %66 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 7, i32 7
  %67 = bitcast %"class.WTF::Deque"* %65 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %67, i8 0, i64 25, i1 false) #10
  store i8 1, i8* %66, align 1
  %68 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 8, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %68, align 8
  %69 = bitcast %"class.WTF::StringView"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %69) #10
  %70 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %71 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %70, align 8
  %72 = icmp eq %"class.WTF::StringImpl"* %71, null
  br i1 %72, label %73, label %77

73:                                               ; preds = %3
  %74 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 1
  store i8* null, i8** %74, align 8
  %75 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %76 = bitcast %"class.WTF::StringView"* %4 to i64*
  store i64 %75, i64* %76, align 8
  br label %85

77:                                               ; preds = %3
  %78 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 0
  store %"class.WTF::StringImpl"* %71, %"class.WTF::StringImpl"** %78, align 8
  %79 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %71, i64 0, i32 1
  %80 = load i32, i32* %79, align 4
  %81 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %71, i64 1
  %82 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 1
  %83 = bitcast i8** %82 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %81, %"class.WTF::StringImpl"** %83, align 8
  %84 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %85

85:                                               ; preds = %77, %73
  %86 = phi i64 [ %84, %77 ], [ %75, %73 ]
  %87 = phi i32 [ %80, %77 ], [ 0, %73 ]
  %88 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 2
  store i32 %87, i32* %88, align 8
  %89 = bitcast %"class.WTF::StringView"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %89) #10
  %90 = bitcast %"class.WTF::StringView"* %5 to i64*
  store i64 %86, i64* %90, align 8
  %91 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 1
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i8** %91, align 8
  %92 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 2
  store i32 9, i32* %92, align 8
  %93 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %4, %"class.WTF::StringView"* nonnull dereferenceable(24) %5) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %89) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %69) #10
  br i1 %93, label %99, label %94

94:                                               ; preds = %85
  %95 = call zeroext i1 @_ZN5blink16MIMETypeRegistry13IsXMLMIMETypeERKN3WTF6StringE(%"class.WTF::String"* dereferenceable(8) %2) #10
  br i1 %95, label %99, label %96

96:                                               ; preds = %94
  %97 = load %"class.blink::HTMLTokenizer"*, %"class.blink::HTMLTokenizer"** %44, align 8
  %98 = getelementptr inbounds %"class.blink::HTMLTokenizer", %"class.blink::HTMLTokenizer"* %97, i64 0, i32 0
  store i32 6, i32* %98, align 8
  br label %99

99:                                               ; preds = %85, %96, %94
  ret void
}

declare void @_ZN5blink25DecodedDataDocumentParserC2ERNS_8DocumentE(%"class.blink::DecodedDataDocumentParser"*, %"class.blink::Document"* dereferenceable(2848)) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN5blink17HTMLParserOptionsC1EPNS_8DocumentE(%"class.blink::HTMLParserOptions"*, %"class.blink::Document"*) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare zeroext i1 @_ZN5blink16MIMETypeRegistry13IsXMLMIMETypeERKN3WTF6StringE(%"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20HTMLViewSourceParser13PumpTokenizerEv(%"class.blink::HTMLViewSourceParser"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.WTF::String", align 8
  %3 = alloca %"class.WTF::String", align 8
  %4 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 1, i32 0
  %5 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %6 = load %"class.blink::HTMLTokenizer"*, %"class.blink::HTMLTokenizer"** %5, align 8
  %7 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 2
  call void @_ZN5blink20HTMLViewSourceParser12StartTrackerERNS_15SegmentedStringEPNS_13HTMLTokenizerERNS_9HTMLTokenE(%"class.blink::HTMLViewSourceParser"* %0, %"class.blink::SegmentedString"* dereferenceable(88) %4, %"class.blink::HTMLTokenizer"* %6, %"class.blink::HTMLToken"* dereferenceable(2512) %7)
  %8 = load %"class.blink::HTMLTokenizer"*, %"class.blink::HTMLTokenizer"** %5, align 8
  %9 = call zeroext i1 @_ZN5blink13HTMLTokenizer9NextTokenERNS_15SegmentedStringERNS_9HTMLTokenE(%"class.blink::HTMLTokenizer"* %8, %"class.blink::SegmentedString"* dereferenceable(88) %4, %"class.blink::HTMLToken"* dereferenceable(2512) %7) #10
  br i1 %9, label %10, label %36

10:                                               ; preds = %1
  %11 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 4
  %12 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 8
  %13 = bitcast %"class.WTF::String"* %12 to i64*
  %14 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %12, i64 0, i32 0, i32 0
  %15 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 1, i32 0, i32 1
  %16 = bitcast %"class.blink::SegmentedString"* %4 to i64*
  %17 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %18 = bitcast i8** %17 to i64*
  %19 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 1, i32 0, i32 0, i32 4
  %20 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 2, i32 2
  %21 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 2, i32 1, i32 1
  %22 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %23 = bitcast %"class.blink::Document"** %22 to %"class.blink::HTMLViewSourceDocument"**
  %24 = bitcast %"class.WTF::String"* %2 to i8*
  %25 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %26 = getelementptr inbounds %"class.blink::HTMLToken", %"class.blink::HTMLToken"* %7, i64 0, i32 0
  %27 = bitcast %"class.WTF::String"* %3 to i8*
  %28 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 2, i32 3, i32 0
  %29 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 2, i32 3, i32 1
  %30 = bitcast i16** %29 to i64*
  %31 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %32 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 2, i32 1, i32 0
  %33 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 2, i32 3
  %34 = bitcast %class.LiteralBuffer* %33 to i64*
  %35 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 2, i32 4
  br label %37

36:                                               ; preds = %129, %1
  ret void

37:                                               ; preds = %10, %129
  %38 = load %"class.blink::HTMLTokenizer"*, %"class.blink::HTMLTokenizer"** %5, align 8
  store i8 0, i8* %11, align 8
  %39 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  store i64 0, i64* %13, align 8
  %40 = icmp eq %"class.WTF::StringImpl"* %39, null
  br i1 %40, label %54, label %41

41:                                               ; preds = %37
  %42 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %39, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %43 = load atomic i32, i32* %42 monotonic, align 4
  %44 = and i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %39, i64 0, i32 0
  %47 = load i32, i32* %46, align 4
  br i1 %45, label %48, label %50

48:                                               ; preds = %41
  %49 = add i32 %47, -1
  store i32 %49, i32* %46, align 4
  br label %50

50:                                               ; preds = %48, %41
  %51 = phi i32 [ %49, %48 ], [ %47, %41 ]
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %54

53:                                               ; preds = %50
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %39) #10
  br label %54

54:                                               ; preds = %53, %50, %37
  %55 = getelementptr inbounds %"class.blink::HTMLTokenizer", %"class.blink::HTMLTokenizer"* %38, i64 0, i32 0
  %56 = load i32, i32* %55, align 8
  switch i32 %56, label %69 [
    i32 0, label %57
    i32 11, label %57
    i32 12, label %57
    i32 14, label %57
    i32 15, label %57
    i32 17, label %57
    i32 18, label %57
    i32 25, label %57
    i32 26, label %57
  ]

57:                                               ; preds = %54, %54, %54, %54, %54, %54, %54, %54, %54
  %58 = getelementptr inbounds %"class.blink::HTMLTokenizer", %"class.blink::HTMLTokenizer"* %38, i64 0, i32 9
  %59 = getelementptr inbounds %"class.blink::HTMLTokenizer", %"class.blink::HTMLTokenizer"* %38, i64 0, i32 9, i32 1
  %60 = bitcast i8** %59 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = bitcast %class.LiteralBuffer.24* %58 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = sub i64 %61, %63
  %65 = icmp eq i64 %64, 0
  %66 = trunc i64 %64 to i32
  %67 = sub i32 -2, %66
  %68 = select i1 %65, i32 0, i32 %67
  br label %69

69:                                               ; preds = %54, %57
  %70 = phi i32 [ %68, %57 ], [ 0, %54 ]
  %71 = load i32, i32* %15, align 8
  %72 = load i64, i64* %16, align 8
  %73 = load i64, i64* %18, align 8
  %74 = sub i64 %72, %73
  %75 = trunc i64 %74 to i32
  %76 = load i8, i8* %19, align 1, !range !2
  %77 = xor i8 %76, 1
  %78 = zext i8 %77 to i32
  %79 = ashr i32 %75, %78
  %80 = load i32, i32* %20, align 4
  %81 = add i32 %71, %70
  %82 = sub i32 %81, %80
  %83 = add i32 %82, %79
  store i32 %83, i32* %21, align 4
  %84 = load %"class.blink::HTMLViewSourceDocument"*, %"class.blink::HTMLViewSourceDocument"** %23, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #10
  %85 = call %"class.WTF::StringImpl"* @_ZN5blink20HTMLViewSourceParser14SourceForTokenERKNS_9HTMLTokenE(%"class.blink::HTMLViewSourceParser"* %0, %"class.blink::HTMLToken"* dereferenceable(2512) %7)
  store %"class.WTF::StringImpl"* %85, %"class.WTF::StringImpl"** %25, align 8
  call void @_ZN5blink22HTMLViewSourceDocument9AddSourceERKN3WTF6StringERNS_9HTMLTokenE(%"class.blink::HTMLViewSourceDocument"* %84, %"class.WTF::String"* nonnull dereferenceable(8) %2, %"class.blink::HTMLToken"* dereferenceable(2512) %7) #10
  %86 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %25, align 8
  %87 = icmp eq %"class.WTF::StringImpl"* %86, null
  br i1 %87, label %101, label %88

88:                                               ; preds = %69
  %89 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %86, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %90 = load atomic i32, i32* %89 monotonic, align 4
  %91 = and i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %86, i64 0, i32 0
  %94 = load i32, i32* %93, align 4
  br i1 %92, label %95, label %97

95:                                               ; preds = %88
  %96 = add i32 %94, -1
  store i32 %96, i32* %93, align 4
  br label %97

97:                                               ; preds = %95, %88
  %98 = phi i32 [ %96, %95 ], [ %94, %88 ]
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %100, label %101

100:                                              ; preds = %97
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %86) #10
  br label %101

101:                                              ; preds = %69, %97, %100
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #10
  %102 = load i32, i32* %26, align 8
  %103 = icmp eq i32 %102, 2
  br i1 %103, label %104, label %129

104:                                              ; preds = %101
  %105 = load %"class.blink::HTMLTokenizer"*, %"class.blink::HTMLTokenizer"** %5, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #10
  %106 = load i16*, i16** %28, align 8
  %107 = load i64, i64* %30, align 8
  %108 = ptrtoint i16* %106 to i64
  %109 = sub i64 %107, %108
  %110 = lshr exact i64 %109, 1
  %111 = trunc i64 %110 to i32
  %112 = call %"class.WTF::StringImpl"* @_ZN5blink27AttemptStaticStringCreationEPKDsjNS_14CharacterWidthE(i16* %106, i32 %111, i32 0) #10
  store %"class.WTF::StringImpl"* %112, %"class.WTF::StringImpl"** %31, align 8
  call void @_ZN5blink13HTMLTokenizer14UpdateStateForERKN3WTF6StringE(%"class.blink::HTMLTokenizer"* %105, %"class.WTF::String"* nonnull dereferenceable(8) %3) #10
  %113 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %31, align 8
  %114 = icmp eq %"class.WTF::StringImpl"* %113, null
  br i1 %114, label %128, label %115

115:                                              ; preds = %104
  %116 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %113, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %117 = load atomic i32, i32* %116 monotonic, align 4
  %118 = and i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %113, i64 0, i32 0
  %121 = load i32, i32* %120, align 4
  br i1 %119, label %122, label %124

122:                                              ; preds = %115
  %123 = add i32 %121, -1
  store i32 %123, i32* %120, align 4
  br label %124

124:                                              ; preds = %122, %115
  %125 = phi i32 [ %123, %122 ], [ %121, %115 ]
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %128

127:                                              ; preds = %124
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %113) #10
  br label %128

128:                                              ; preds = %104, %124, %127
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #10
  br label %129

129:                                              ; preds = %128, %101
  store i32 0, i32* %26, align 8
  store i32 0, i32* %32, align 4
  store i32 0, i32* %20, align 4
  %130 = load i64, i64* %34, align 8
  store i64 %130, i64* %30, align 8
  store i16 0, i16* %35, align 8
  %131 = load %"class.blink::HTMLTokenizer"*, %"class.blink::HTMLTokenizer"** %5, align 8
  call void @_ZN5blink20HTMLViewSourceParser12StartTrackerERNS_15SegmentedStringEPNS_13HTMLTokenizerERNS_9HTMLTokenE(%"class.blink::HTMLViewSourceParser"* %0, %"class.blink::SegmentedString"* dereferenceable(88) %4, %"class.blink::HTMLTokenizer"* %131, %"class.blink::HTMLToken"* dereferenceable(2512) %7)
  %132 = load %"class.blink::HTMLTokenizer"*, %"class.blink::HTMLTokenizer"** %5, align 8
  %133 = call zeroext i1 @_ZN5blink13HTMLTokenizer9NextTokenERNS_15SegmentedStringERNS_9HTMLTokenE(%"class.blink::HTMLTokenizer"* %132, %"class.blink::SegmentedString"* dereferenceable(88) %4, %"class.blink::HTMLToken"* dereferenceable(2512) %7) #10
  br i1 %133, label %37, label %36
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20HTMLViewSourceParser12StartTrackerERNS_15SegmentedStringEPNS_13HTMLTokenizerERNS_9HTMLTokenE(%"class.blink::HTMLViewSourceParser"*, %"class.blink::SegmentedString"* dereferenceable(88), %"class.blink::HTMLTokenizer"*, %"class.blink::HTMLToken"* nocapture dereferenceable(2512)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.WTF::Deque", align 8
  %6 = alloca %"class.blink::SegmentedString", align 8
  %7 = getelementptr inbounds %"class.blink::HTMLToken", %"class.blink::HTMLToken"* %3, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %209

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 4
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %209

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 6
  tail call void @_ZN5blink15SegmentedString5ClearEv(%"class.blink::SegmentedString"* %15) #10
  %16 = getelementptr inbounds %"class.blink::HTMLTokenizer", %"class.blink::HTMLTokenizer"* %2, i64 0, i32 0
  %17 = load i32, i32* %16, align 8
  switch i32 %17, label %212 [
    i32 0, label %18
    i32 11, label %18
    i32 12, label %18
    i32 14, label %18
    i32 15, label %18
    i32 17, label %18
    i32 18, label %18
    i32 25, label %18
    i32 26, label %18
  ]

18:                                               ; preds = %14, %14, %14, %14, %14, %14, %14, %14, %14
  %19 = getelementptr inbounds %"class.blink::HTMLTokenizer", %"class.blink::HTMLTokenizer"* %2, i64 0, i32 9
  %20 = getelementptr inbounds %"class.blink::HTMLTokenizer", %"class.blink::HTMLTokenizer"* %2, i64 0, i32 9, i32 1
  %21 = bitcast i8** %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = bitcast %class.LiteralBuffer.24* %19 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %22, %24
  %26 = icmp eq i64 %25, 0
  %27 = trunc i64 %25 to i32
  %28 = icmp eq i32 %27, -2
  %29 = or i1 %26, %28
  br i1 %29, label %212, label %30

30:                                               ; preds = %18
  %31 = bitcast %"class.blink::SegmentedString"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %31) #10
  %32 = tail call %"class.WTF::StringImpl"* @_ZNK5blink13HTMLTokenizer18BufferedCharactersEv(%"class.blink::HTMLTokenizer"* %2) #10
  %33 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %6, i64 0, i32 0, i32 3
  store i8 1, i8* %33, align 8
  %34 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %6, i64 0, i32 0, i32 4
  store i8 1, i8* %34, align 1
  %35 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %6, i64 0, i32 0, i32 5, i32 0, i32 0
  store %"class.WTF::StringImpl"* %32, %"class.WTF::StringImpl"** %35, align 8
  %36 = icmp eq %"class.WTF::StringImpl"* %32, null
  br i1 %36, label %87, label %37

37:                                               ; preds = %30
  %38 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %39 = load atomic i32, i32* %38 monotonic, align 4
  %40 = and i32 %39, 2
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %54

42:                                               ; preds = %37
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 0
  %44 = load i32, i32* %43, align 4
  %45 = zext i32 %44 to i33
  %46 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %45, i33 1) #10
  %47 = extractvalue { i33, i1 } %46, 1
  %48 = extractvalue { i33, i1 } %46, 0
  %49 = icmp slt i33 %48, 0
  %50 = or i1 %47, %49
  br i1 %50, label %51, label %52, !prof !3

51:                                               ; preds = %42
  tail call void @llvm.trap() #10
  unreachable

52:                                               ; preds = %42
  %53 = trunc i33 %48 to i32
  store i32 %53, i32* %43, align 4
  br label %54

54:                                               ; preds = %52, %37
  %55 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 1
  %56 = load i32, i32* %55, align 4
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %87, label %58

58:                                               ; preds = %54
  %59 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %35, align 8
  %60 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %61 = load atomic i32, i32* %60 monotonic, align 4
  %62 = and i32 %61, 1
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %75, label %64

64:                                               ; preds = %58
  store i8 1, i8* %34, align 1
  %65 = icmp eq %"class.WTF::StringImpl"* %59, null
  %66 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 1
  %67 = bitcast %"class.WTF::StringImpl"* %66 to i8*
  %68 = select i1 %65, i8* null, i8* %67
  %69 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %6, i64 0, i32 0, i32 0, i32 0
  store i8* %68, i8** %69, align 8
  %70 = zext i32 %56 to i64
  %71 = getelementptr inbounds i8, i8* %68, i64 %70
  %72 = getelementptr inbounds i8, i8* %71, i64 -1
  %73 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %6, i64 0, i32 0, i32 2
  store i8* %72, i8** %73, align 8
  %74 = ptrtoint i8* %68 to i64
  br label %90

75:                                               ; preds = %58
  store i8 0, i8* %34, align 1
  %76 = icmp eq %"class.WTF::StringImpl"* %59, null
  %77 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 1
  %78 = bitcast %"class.WTF::StringImpl"* %77 to i16*
  %79 = select i1 %76, i16* null, i16* %78
  %80 = bitcast %"class.blink::SegmentedString"* %6 to i16**
  store i16* %79, i16** %80, align 8
  %81 = zext i32 %56 to i64
  %82 = getelementptr inbounds i16, i16* %79, i64 %81
  %83 = getelementptr inbounds i16, i16* %82, i64 -1
  %84 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %6, i64 0, i32 0, i32 2
  %85 = bitcast i8** %84 to i16**
  store i16* %83, i16** %85, align 8
  %86 = ptrtoint i16* %79 to i64
  br label %90

87:                                               ; preds = %30, %54
  store i8 1, i8* %34, align 1
  %88 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %6, i64 0, i32 0, i32 0, i32 0
  store i8* null, i8** %88, align 8
  %89 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %6, i64 0, i32 0, i32 2
  store i8* null, i8** %89, align 8
  br label %90

90:                                               ; preds = %87, %75, %64
  %91 = phi i64 [ %74, %64 ], [ %86, %75 ], [ 0, %87 ]
  %92 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %6, i64 0, i32 0, i32 1
  %93 = bitcast i8** %92 to i64*
  store i64 %91, i64* %93, align 8
  %94 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %6, i64 0, i32 1
  store i32 0, i32* %94, align 8
  %95 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %6, i64 0, i32 2
  store i32 0, i32* %95, align 4
  %96 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %6, i64 0, i32 3
  store i32 0, i32* %96, align 8
  %97 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %6, i64 0, i32 5
  %98 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %6, i64 0, i32 7
  %99 = bitcast %"class.WTF::Deque"* %97 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %99, i8 0, i64 25, i1 false) #10
  br i1 %36, label %105, label %100

100:                                              ; preds = %90
  %101 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 1
  %102 = load i32, i32* %101, align 4
  %103 = icmp eq i32 %102, 0
  %104 = zext i1 %103 to i8
  br label %105

105:                                              ; preds = %90, %100
  %106 = phi i8 [ %104, %100 ], [ 1, %90 ]
  store i8 %106, i8* %98, align 1
  %107 = bitcast %"class.blink::SegmentedString"* %15 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %107, i8* nonnull align 8 %31, i64 26, i1 false) #10
  %108 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 6, i32 0, i32 5
  %109 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %6, i64 0, i32 0, i32 5
  %110 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %109, i64 0, i32 0, i32 0
  %111 = bitcast %"class.WTF::String"* %109 to i64*
  %112 = load i64, i64* %111, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %110, align 8
  %113 = bitcast %"class.WTF::String"* %108 to i64*
  %114 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %108, i64 0, i32 0, i32 0
  %115 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %114, align 8
  store i64 %112, i64* %113, align 8
  %116 = icmp eq %"class.WTF::StringImpl"* %115, null
  br i1 %116, label %130, label %117

117:                                              ; preds = %105
  %118 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %115, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %119 = load atomic i32, i32* %118 monotonic, align 4
  %120 = and i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %115, i64 0, i32 0
  %123 = load i32, i32* %122, align 4
  br i1 %121, label %124, label %126

124:                                              ; preds = %117
  %125 = add i32 %123, -1
  store i32 %125, i32* %122, align 4
  br label %126

126:                                              ; preds = %124, %117
  %127 = phi i32 [ %125, %124 ], [ %123, %117 ]
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %129, label %130

129:                                              ; preds = %126
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %115) #10
  br label %130

130:                                              ; preds = %129, %126, %105
  %131 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 6, i32 1
  %132 = bitcast i32* %131 to i8*
  %133 = bitcast i32* %94 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %132, i8* align 8 %133, i64 12, i1 false) #10
  %134 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 6, i32 5
  %135 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 6, i32 5, i32 1
  %136 = load i32, i32* %135, align 8
  %137 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 6, i32 5, i32 2
  %138 = load i32, i32* %137, align 4
  %139 = icmp ugt i32 %136, %138
  %140 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 6, i32 5, i32 0, i32 0, i32 0, i32 1
  br i1 %139, label %143, label %141

141:                                              ; preds = %130
  %142 = load i32, i32* %140, align 4
  br label %145

143:                                              ; preds = %130
  %144 = load i32, i32* %140, align 8
  br label %145

145:                                              ; preds = %141, %143
  %146 = phi i32 [ %144, %143 ], [ %142, %141 ]
  %147 = phi i32 [ %144, %143 ], [ %138, %141 ]
  %148 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 6, i32 5, i32 0, i32 0, i32 0, i32 2
  %149 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %6, i64 0, i32 5, i32 1
  %150 = load i32, i32* %149, align 8
  %151 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %6, i64 0, i32 5, i32 2
  %152 = load i32, i32* %151, align 4
  %153 = icmp ugt i32 %150, %152
  %154 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %6, i64 0, i32 5, i32 0, i32 0, i32 0, i32 1
  %155 = load i32, i32* %154, align 8
  %156 = select i1 %153, i32 %155, i32 %152
  %157 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %6, i64 0, i32 5, i32 0, i32 0, i32 0, i32 2
  %158 = bitcast %"class.WTF::Deque"* %97 to i64*
  %159 = load i64, i64* %158, align 8
  %160 = bitcast %"class.WTF::Deque"* %134 to i64*
  %161 = load i64, i64* %160, align 8
  store atomic i64 %161, i64* %158 monotonic, align 8
  store atomic i64 %159, i64* %160 monotonic, align 8
  %162 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 6, i32 5, i32 0, i32 0, i32 0, i32 1
  store i32 %155, i32* %162, align 4
  store i32 %146, i32* %154, align 8
  store i32 %156, i32* %148, align 4
  store i32 %147, i32* %157, align 4
  store i32 %150, i32* %135, align 4
  store i32 %136, i32* %149, align 8
  store i32 %152, i32* %137, align 4
  store i32 %138, i32* %151, align 4
  %163 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 6, i32 6
  %164 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %6, i64 0, i32 6
  %165 = bitcast i8* %164 to i16*
  %166 = bitcast i8* %163 to i16*
  %167 = load i16, i16* %165, align 8
  store i16 %167, i16* %166, align 8
  %168 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %97, i64 0, i32 0, i32 0, i32 0, i32 0
  %169 = icmp eq i64 %161, 0
  br i1 %169, label %178, label %170

170:                                              ; preds = %145
  %171 = inttoptr i64 %161 to i8*
  %172 = icmp eq i32 %136, %138
  br i1 %172, label %176, label %173

173:                                              ; preds = %170
  call void @_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEE10DestroyAllEv(%"class.WTF::Deque"* %97) #10
  %174 = bitcast %"class.WTF::Deque"* %97 to i8**
  %175 = load i8*, i8** %174, align 8
  br label %176

176:                                              ; preds = %173, %170
  %177 = phi i8* [ %175, %173 ], [ %171, %170 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %177) #10
  store %"class.blink::SegmentedSubstring"* null, %"class.blink::SegmentedSubstring"** %168, align 8
  br label %178

178:                                              ; preds = %176, %145
  %179 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %35, align 8
  %180 = icmp eq %"class.WTF::StringImpl"* %179, null
  br i1 %180, label %194, label %181

181:                                              ; preds = %178
  %182 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %179, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %183 = load atomic i32, i32* %182 monotonic, align 4
  %184 = and i32 %183, 2
  %185 = icmp eq i32 %184, 0
  %186 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %179, i64 0, i32 0
  %187 = load i32, i32* %186, align 4
  br i1 %185, label %188, label %190

188:                                              ; preds = %181
  %189 = add i32 %187, -1
  store i32 %189, i32* %186, align 4
  br label %190

190:                                              ; preds = %188, %181
  %191 = phi i32 [ %189, %188 ], [ %187, %181 ]
  %192 = icmp eq i32 %191, 0
  br i1 %192, label %193, label %194

193:                                              ; preds = %190
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %179) #10
  br label %194

194:                                              ; preds = %178, %190, %193
  br i1 %36, label %208, label %195

195:                                              ; preds = %194
  %196 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %197 = load atomic i32, i32* %196 monotonic, align 4
  %198 = and i32 %197, 2
  %199 = icmp eq i32 %198, 0
  %200 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 0
  %201 = load i32, i32* %200, align 4
  br i1 %199, label %202, label %204

202:                                              ; preds = %195
  %203 = add i32 %201, -1
  store i32 %203, i32* %200, align 4
  br label %204

204:                                              ; preds = %202, %195
  %205 = phi i32 [ %203, %202 ], [ %201, %195 ]
  %206 = icmp eq i32 %205, 0
  br i1 %206, label %207, label %208

207:                                              ; preds = %204
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %32) #10
  br label %208

208:                                              ; preds = %194, %204, %207
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %31) #10
  br label %212

209:                                              ; preds = %10, %4
  %210 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 6
  %211 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 7
  tail call void @_ZN5blink15SegmentedString6AppendERKS0_(%"class.blink::SegmentedString"* %210, %"class.blink::SegmentedString"* dereferenceable(88) %211) #10
  br label %212

212:                                              ; preds = %14, %18, %208, %209
  %213 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 4
  store i8 1, i8* %213, align 8
  %214 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 7
  %215 = bitcast %"class.blink::SegmentedString"* %214 to i8*
  %216 = bitcast %"class.blink::SegmentedString"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %215, i8* align 8 %216, i64 26, i1 false) #10
  %217 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 7, i32 0, i32 5
  %218 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %1, i64 0, i32 0, i32 5, i32 0, i32 0
  %219 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %218, align 8
  %220 = icmp eq %"class.WTF::StringImpl"* %219, null
  br i1 %220, label %238, label %221

221:                                              ; preds = %212
  %222 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %219, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %223 = load atomic i32, i32* %222 monotonic, align 4
  %224 = and i32 %223, 2
  %225 = icmp eq i32 %224, 0
  br i1 %225, label %226, label %238

226:                                              ; preds = %221
  %227 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %219, i64 0, i32 0
  %228 = load i32, i32* %227, align 4
  %229 = zext i32 %228 to i33
  %230 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %229, i33 1) #10
  %231 = extractvalue { i33, i1 } %230, 1
  %232 = extractvalue { i33, i1 } %230, 0
  %233 = icmp slt i33 %232, 0
  %234 = or i1 %231, %233
  br i1 %234, label %235, label %236, !prof !3

235:                                              ; preds = %226
  call void @llvm.trap() #10
  unreachable

236:                                              ; preds = %226
  %237 = trunc i33 %232 to i32
  store i32 %237, i32* %227, align 4
  br label %238

238:                                              ; preds = %236, %221, %212
  %239 = ptrtoint %"class.WTF::StringImpl"* %219 to i64
  %240 = bitcast %"class.WTF::String"* %217 to i64*
  %241 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %217, i64 0, i32 0, i32 0
  %242 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %241, align 8
  store i64 %239, i64* %240, align 8
  %243 = icmp eq %"class.WTF::StringImpl"* %242, null
  br i1 %243, label %257, label %244

244:                                              ; preds = %238
  %245 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %242, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %246 = load atomic i32, i32* %245 monotonic, align 4
  %247 = and i32 %246, 2
  %248 = icmp eq i32 %247, 0
  %249 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %242, i64 0, i32 0
  %250 = load i32, i32* %249, align 4
  br i1 %248, label %251, label %253

251:                                              ; preds = %244
  %252 = add i32 %250, -1
  store i32 %252, i32* %249, align 4
  br label %253

253:                                              ; preds = %251, %244
  %254 = phi i32 [ %252, %251 ], [ %250, %244 ]
  %255 = icmp eq i32 %254, 0
  br i1 %255, label %256, label %257

256:                                              ; preds = %253
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %242) #10
  br label %257

257:                                              ; preds = %238, %253, %256
  %258 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 7, i32 1
  %259 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %1, i64 0, i32 1
  %260 = bitcast i32* %258 to i8*
  %261 = bitcast i32* %259 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %260, i8* align 8 %261, i64 12, i1 false) #10
  %262 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 7, i32 5
  %263 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %1, i64 0, i32 5
  %264 = bitcast %"class.WTF::Deque"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %264) #10
  %265 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  %266 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %5, i64 0, i32 0, i32 0, i32 0, i32 1
  %267 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %5, i64 0, i32 0, i32 0, i32 0, i32 2
  %268 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %5, i64 0, i32 1
  %269 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %5, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %264, i8 -86, i64 24, i1 false) #10
  call void @_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEEC2ERKS4_(%"class.WTF::Deque"* nonnull %5, %"class.WTF::Deque"* dereferenceable(24) %263) #10
  %270 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 7, i32 5, i32 1
  %271 = load i32, i32* %270, align 8
  %272 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 7, i32 5, i32 2
  %273 = load i32, i32* %272, align 4
  %274 = icmp ugt i32 %271, %273
  %275 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 7, i32 5, i32 0, i32 0, i32 0, i32 1
  br i1 %274, label %278, label %276

276:                                              ; preds = %257
  %277 = load i32, i32* %275, align 4
  br label %280

278:                                              ; preds = %257
  %279 = load i32, i32* %275, align 8
  br label %280

280:                                              ; preds = %278, %276
  %281 = phi i32 [ %279, %278 ], [ %277, %276 ]
  %282 = phi i32 [ %279, %278 ], [ %273, %276 ]
  %283 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 7, i32 5, i32 0, i32 0, i32 0, i32 2
  %284 = load i32, i32* %268, align 8
  %285 = load i32, i32* %269, align 4
  %286 = icmp ugt i32 %284, %285
  %287 = load i32, i32* %266, align 8
  %288 = select i1 %286, i32 %287, i32 %285
  %289 = bitcast %"class.WTF::Deque"* %5 to i64*
  %290 = load i64, i64* %289, align 8
  %291 = bitcast %"class.WTF::Deque"* %262 to i64*
  %292 = load i64, i64* %291, align 8
  store atomic i64 %292, i64* %289 monotonic, align 8
  store atomic i64 %290, i64* %291 monotonic, align 8
  store i32 %287, i32* %275, align 4
  store i32 %281, i32* %266, align 8
  store i32 %288, i32* %283, align 4
  store i32 %282, i32* %267, align 4
  store i32 %284, i32* %270, align 4
  store i32 %271, i32* %268, align 8
  store i32 %285, i32* %272, align 4
  store i32 %273, i32* %269, align 4
  %293 = icmp eq i64 %292, 0
  br i1 %293, label %302, label %294

294:                                              ; preds = %280
  %295 = inttoptr i64 %292 to i8*
  %296 = icmp eq i32 %271, %273
  br i1 %296, label %300, label %297

297:                                              ; preds = %294
  call void @_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEE10DestroyAllEv(%"class.WTF::Deque"* nonnull %5) #10
  %298 = bitcast %"class.WTF::Deque"* %5 to i8**
  %299 = load i8*, i8** %298, align 8
  br label %300

300:                                              ; preds = %297, %294
  %301 = phi i8* [ %299, %297 ], [ %295, %294 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %301) #10
  store %"class.blink::SegmentedSubstring"* null, %"class.blink::SegmentedSubstring"** %265, align 8
  br label %302

302:                                              ; preds = %280, %300
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %264) #10
  %303 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 7, i32 6
  %304 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %1, i64 0, i32 6
  %305 = bitcast i8* %304 to i16*
  %306 = bitcast i8* %303 to i16*
  %307 = load i16, i16* %305, align 8
  store i16 %307, i16* %306, align 8
  %308 = load i32, i32* %258, align 8
  %309 = bitcast %"class.blink::SegmentedString"* %214 to i64*
  %310 = load i64, i64* %309, align 8
  %311 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 7, i32 0, i32 1
  %312 = bitcast i8** %311 to i64*
  %313 = load i64, i64* %312, align 8
  %314 = sub i64 %310, %313
  %315 = trunc i64 %314 to i32
  %316 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 7, i32 0, i32 4
  %317 = load i8, i8* %316, align 1, !range !2
  %318 = xor i8 %317, 1
  %319 = zext i8 %318 to i32
  %320 = ashr i32 %315, %319
  %321 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 6
  %322 = call i32 @_ZNK5blink15SegmentedString6lengthEv(%"class.blink::SegmentedString"* %321) #10
  %323 = sub i32 %308, %322
  %324 = add i32 %323, %320
  %325 = getelementptr inbounds %"class.blink::HTMLToken", %"class.blink::HTMLToken"* %3, i64 0, i32 2
  store i32 %324, i32* %325, align 4
  ret void
}

declare zeroext i1 @_ZN5blink13HTMLTokenizer9NextTokenERNS_15SegmentedStringERNS_9HTMLTokenE(%"class.blink::HTMLTokenizer"*, %"class.blink::SegmentedString"* dereferenceable(88), %"class.blink::HTMLToken"* dereferenceable(2512)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20HTMLViewSourceParser10EndTrackerERNS_15SegmentedStringEPNS_13HTMLTokenizerERNS_9HTMLTokenE(%"class.blink::HTMLViewSourceParser"* nocapture, %"class.blink::SegmentedString"* nocapture readonly dereferenceable(88), %"class.blink::HTMLTokenizer"* nocapture readonly, %"class.blink::HTMLToken"* nocapture dereferenceable(2512)) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 4
  store i8 0, i8* %5, align 8
  %6 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 8
  %7 = bitcast %"class.WTF::String"* %6 to i64*
  %8 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %6, i64 0, i32 0, i32 0
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  store i64 0, i64* %7, align 8
  %10 = icmp eq %"class.WTF::StringImpl"* %9, null
  br i1 %10, label %24, label %11

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 2
  %15 = icmp eq i32 %14, 0
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 0
  %17 = load i32, i32* %16, align 4
  br i1 %15, label %18, label %20

18:                                               ; preds = %11
  %19 = add i32 %17, -1
  store i32 %19, i32* %16, align 4
  br label %20

20:                                               ; preds = %18, %11
  %21 = phi i32 [ %19, %18 ], [ %17, %11 ]
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %24

23:                                               ; preds = %20
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %9) #10
  br label %24

24:                                               ; preds = %23, %20, %4
  %25 = getelementptr inbounds %"class.blink::HTMLTokenizer", %"class.blink::HTMLTokenizer"* %2, i64 0, i32 0
  %26 = load i32, i32* %25, align 8
  switch i32 %26, label %39 [
    i32 0, label %27
    i32 11, label %27
    i32 12, label %27
    i32 14, label %27
    i32 15, label %27
    i32 17, label %27
    i32 18, label %27
    i32 25, label %27
    i32 26, label %27
  ]

27:                                               ; preds = %24, %24, %24, %24, %24, %24, %24, %24, %24
  %28 = getelementptr inbounds %"class.blink::HTMLTokenizer", %"class.blink::HTMLTokenizer"* %2, i64 0, i32 9
  %29 = getelementptr inbounds %"class.blink::HTMLTokenizer", %"class.blink::HTMLTokenizer"* %2, i64 0, i32 9, i32 1
  %30 = bitcast i8** %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = bitcast %class.LiteralBuffer.24* %28 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = sub i64 %31, %33
  %35 = icmp eq i64 %34, 0
  %36 = trunc i64 %34 to i32
  %37 = sub i32 -2, %36
  %38 = select i1 %35, i32 0, i32 %37
  br label %39

39:                                               ; preds = %24, %27
  %40 = phi i32 [ %38, %27 ], [ 0, %24 ]
  %41 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %1, i64 0, i32 1
  %42 = load i32, i32* %41, align 8
  %43 = bitcast %"class.blink::SegmentedString"* %1 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %1, i64 0, i32 0, i32 1
  %46 = bitcast i8** %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = sub i64 %44, %47
  %49 = trunc i64 %48 to i32
  %50 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %1, i64 0, i32 0, i32 4
  %51 = load i8, i8* %50, align 1, !range !2
  %52 = xor i8 %51, 1
  %53 = zext i8 %52 to i32
  %54 = ashr i32 %49, %53
  %55 = getelementptr inbounds %"class.blink::HTMLToken", %"class.blink::HTMLToken"* %3, i64 0, i32 2
  %56 = load i32, i32* %55, align 4
  %57 = add i32 %42, %40
  %58 = sub i32 %57, %56
  %59 = add i32 %58, %54
  %60 = getelementptr inbounds %"class.blink::HTMLToken", %"class.blink::HTMLToken"* %3, i64 0, i32 1, i32 1
  store i32 %59, i32* %60, align 4
  ret void
}

declare void @_ZN5blink22HTMLViewSourceDocument9AddSourceERKN3WTF6StringERNS_9HTMLTokenE(%"class.blink::HTMLViewSourceDocument"*, %"class.WTF::String"* dereferenceable(8), %"class.blink::HTMLToken"* dereferenceable(2512)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN5blink20HTMLViewSourceParser14SourceForTokenERKNS_9HTMLTokenE(%"class.blink::HTMLViewSourceParser"*, %"class.blink::HTMLToken"* nocapture readonly dereferenceable(2512)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::StringBuilder", align 8
  %4 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 8
  %5 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %4, i64 0, i32 0, i32 0
  %6 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  %7 = icmp eq %"class.WTF::StringImpl"* %6, null
  br i1 %7, label %29, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %29, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = and i32 %14, 2
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %190

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = zext i32 %19 to i33
  %21 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %20, i33 1) #10
  %22 = extractvalue { i33, i1 } %21, 1
  %23 = extractvalue { i33, i1 } %21, 0
  %24 = icmp slt i33 %23, 0
  %25 = or i1 %22, %24
  br i1 %25, label %26, label %27, !prof !3

26:                                               ; preds = %17
  tail call void @llvm.trap() #10
  unreachable

27:                                               ; preds = %17
  %28 = trunc i33 %23 to i32
  store i32 %28, i32* %18, align 4
  br label %190

29:                                               ; preds = %2, %8
  %30 = getelementptr inbounds %"class.blink::HTMLToken", %"class.blink::HTMLToken"* %1, i64 0, i32 0
  %31 = load i32, i32* %30, align 8
  %32 = icmp eq i32 %31, 6
  br i1 %32, label %33, label %40

33:                                               ; preds = %29
  %34 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 6
  %35 = tail call i32 @_ZNK5blink15SegmentedString6lengthEv(%"class.blink::SegmentedString"* %34) #10
  %36 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 7
  %37 = tail call i32 @_ZNK5blink15SegmentedString6lengthEv(%"class.blink::SegmentedString"* %36) #10
  %38 = add i32 %35, -1
  %39 = add i32 %38, %37
  br label %46

40:                                               ; preds = %29
  %41 = getelementptr inbounds %"class.blink::HTMLToken", %"class.blink::HTMLToken"* %1, i64 0, i32 1, i32 1
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr inbounds %"class.blink::HTMLToken", %"class.blink::HTMLToken"* %1, i64 0, i32 1, i32 0
  %44 = load i32, i32* %43, align 4
  %45 = sub nsw i32 %42, %44
  br label %46

46:                                               ; preds = %40, %33
  %47 = phi i32 [ %39, %33 ], [ %45, %40 ]
  %48 = bitcast %"class.WTF::StringBuilder"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %48) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %48, i8 -86, i64 48, i1 false)
  %49 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %3, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %49, align 8
  %50 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %3, i64 0, i32 1
  %51 = bitcast %union.anon.368* %50 to i8*
  store i8 0, i8* %51, align 8
  %52 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %3, i64 0, i32 2
  store i32 0, i32* %52, align 8
  %53 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %3, i64 0, i32 3
  store i8 1, i8* %53, align 4
  %54 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %3, i64 0, i32 4
  store i8 0, i8* %54, align 1
  call void @_ZN3WTF13StringBuilder15ReserveCapacityEj(%"class.WTF::StringBuilder"* nonnull %3, i32 %47) #10
  %55 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 6
  %56 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 6, i32 7
  %57 = zext i32 %47 to i64
  %58 = icmp eq i32 %47, 0
  br i1 %58, label %95, label %59

59:                                               ; preds = %46
  %60 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 6, i32 0, i32 4
  %61 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %55, i64 0, i32 0, i32 0, i32 0
  %62 = bitcast %"class.blink::SegmentedString"* %55 to i16**
  %63 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 6, i32 0, i32 2
  br label %64

64:                                               ; preds = %92, %59
  %65 = phi i64 [ 0, %59 ], [ %93, %92 ]
  %66 = load i8, i8* %56, align 1, !range !2
  %67 = icmp eq i8 %66, 0
  br i1 %67, label %68, label %95

68:                                               ; preds = %64
  %69 = load i8, i8* %60, align 1, !range !2
  %70 = icmp eq i8 %69, 0
  br i1 %70, label %75, label %71

71:                                               ; preds = %68
  %72 = load i8*, i8** %61, align 8
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i16
  br label %78

75:                                               ; preds = %68
  %76 = load i16*, i16** %62, align 8
  %77 = load i16, i16* %76, align 2
  br label %78

78:                                               ; preds = %71, %75
  %79 = phi i16 [ %74, %71 ], [ %77, %75 ]
  call void @_ZN3WTF13StringBuilder6AppendEDs(%"class.WTF::StringBuilder"* nonnull %3, i16 zeroext %79)
  %80 = load i8*, i8** %61, align 8
  %81 = load i8*, i8** %63, align 8
  %82 = icmp ult i8* %80, %81
  br i1 %82, label %83, label %90, !prof !4

83:                                               ; preds = %78
  %84 = load i8, i8* %60, align 1, !range !2
  %85 = icmp eq i8 %84, 0
  br i1 %85, label %88, label %86

86:                                               ; preds = %83
  %87 = getelementptr inbounds i8, i8* %80, i64 1
  store i8* %87, i8** %61, align 8
  br label %92

88:                                               ; preds = %83
  %89 = getelementptr inbounds i8, i8* %80, i64 2
  store i8* %89, i8** %61, align 8
  br label %92

90:                                               ; preds = %78
  %91 = call zeroext i16 @_ZN5blink15SegmentedString16AdvanceSubstringEv(%"class.blink::SegmentedString"* %55) #10
  br label %92

92:                                               ; preds = %86, %88, %90
  %93 = add nuw nsw i64 %65, 1
  %94 = icmp eq i64 %93, %57
  br i1 %94, label %132, label %64

95:                                               ; preds = %64, %46
  %96 = phi i64 [ 0, %46 ], [ %65, %64 ]
  %97 = icmp ult i64 %96, %57
  br i1 %97, label %98, label %132

98:                                               ; preds = %95
  %99 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 7
  %100 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 7, i32 0, i32 4
  %101 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %99, i64 0, i32 0, i32 0, i32 0
  %102 = bitcast %"class.blink::SegmentedString"* %99 to i16**
  %103 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 7, i32 0, i32 2
  br label %104

104:                                              ; preds = %129, %98
  %105 = phi i64 [ %96, %98 ], [ %130, %129 ]
  %106 = load i8, i8* %100, align 1, !range !2
  %107 = icmp eq i8 %106, 0
  br i1 %107, label %112, label %108

108:                                              ; preds = %104
  %109 = load i8*, i8** %101, align 8
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i16
  br label %115

112:                                              ; preds = %104
  %113 = load i16*, i16** %102, align 8
  %114 = load i16, i16* %113, align 2
  br label %115

115:                                              ; preds = %108, %112
  %116 = phi i16 [ %111, %108 ], [ %114, %112 ]
  call void @_ZN3WTF13StringBuilder6AppendEDs(%"class.WTF::StringBuilder"* nonnull %3, i16 zeroext %116)
  %117 = load i8*, i8** %101, align 8
  %118 = load i8*, i8** %103, align 8
  %119 = icmp ult i8* %117, %118
  br i1 %119, label %120, label %127, !prof !4

120:                                              ; preds = %115
  %121 = load i8, i8* %100, align 1, !range !2
  %122 = icmp eq i8 %121, 0
  br i1 %122, label %125, label %123

123:                                              ; preds = %120
  %124 = getelementptr inbounds i8, i8* %117, i64 1
  store i8* %124, i8** %101, align 8
  br label %129

125:                                              ; preds = %120
  %126 = getelementptr inbounds i8, i8* %117, i64 2
  store i8* %126, i8** %101, align 8
  br label %129

127:                                              ; preds = %115
  %128 = call zeroext i16 @_ZN5blink15SegmentedString16AdvanceSubstringEv(%"class.blink::SegmentedString"* %99) #10
  br label %129

129:                                              ; preds = %123, %125, %127
  %130 = add nuw nsw i64 %105, 1
  %131 = icmp eq i64 %130, %57
  br i1 %131, label %132, label %104

132:                                              ; preds = %92, %129, %95
  %133 = call %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"* nonnull %3) #10
  %134 = ptrtoint %"class.WTF::StringImpl"* %133 to i64
  %135 = bitcast %"class.WTF::String"* %4 to i64*
  %136 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  store i64 %134, i64* %135, align 8
  %137 = icmp eq %"class.WTF::StringImpl"* %136, null
  br i1 %137, label %153, label %138

138:                                              ; preds = %132
  %139 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %136, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %140 = load atomic i32, i32* %139 monotonic, align 4
  %141 = and i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %136, i64 0, i32 0
  %144 = load i32, i32* %143, align 4
  br i1 %142, label %145, label %147

145:                                              ; preds = %138
  %146 = add i32 %144, -1
  store i32 %146, i32* %143, align 4
  br label %147

147:                                              ; preds = %145, %138
  %148 = phi i32 [ %146, %145 ], [ %144, %138 ]
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %150, label %151

150:                                              ; preds = %147
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %136) #10
  br label %151

151:                                              ; preds = %147, %150
  %152 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  br label %153

153:                                              ; preds = %151, %132
  %154 = phi %"class.WTF::StringImpl"* [ %152, %151 ], [ %133, %132 ]
  %155 = icmp eq %"class.WTF::StringImpl"* %154, null
  br i1 %155, label %173, label %156

156:                                              ; preds = %153
  %157 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %154, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %158 = load atomic i32, i32* %157 monotonic, align 4
  %159 = and i32 %158, 2
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %161, label %173

161:                                              ; preds = %156
  %162 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %154, i64 0, i32 0
  %163 = load i32, i32* %162, align 4
  %164 = zext i32 %163 to i33
  %165 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %164, i33 1) #10
  %166 = extractvalue { i33, i1 } %165, 1
  %167 = extractvalue { i33, i1 } %165, 0
  %168 = icmp slt i33 %167, 0
  %169 = or i1 %166, %168
  br i1 %169, label %170, label %171, !prof !3

170:                                              ; preds = %161
  call void @llvm.trap() #10
  unreachable

171:                                              ; preds = %161
  %172 = trunc i33 %167 to i32
  store i32 %172, i32* %162, align 4
  br label %173

173:                                              ; preds = %153, %156, %171
  call void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"* nonnull %3) #10
  %174 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %49, align 8
  %175 = icmp eq %"class.WTF::StringImpl"* %174, null
  br i1 %175, label %189, label %176

176:                                              ; preds = %173
  %177 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %174, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %178 = load atomic i32, i32* %177 monotonic, align 4
  %179 = and i32 %178, 2
  %180 = icmp eq i32 %179, 0
  %181 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %174, i64 0, i32 0
  %182 = load i32, i32* %181, align 4
  br i1 %180, label %183, label %185

183:                                              ; preds = %176
  %184 = add i32 %182, -1
  store i32 %184, i32* %181, align 4
  br label %185

185:                                              ; preds = %183, %176
  %186 = phi i32 [ %184, %183 ], [ %182, %176 ]
  %187 = icmp eq i32 %186, 0
  br i1 %187, label %188, label %189

188:                                              ; preds = %185
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %174) #10
  br label %189

189:                                              ; preds = %173, %185, %188
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %48) #10
  br label %190

190:                                              ; preds = %27, %12, %189
  %191 = phi %"class.WTF::StringImpl"* [ %154, %189 ], [ %6, %12 ], [ %6, %27 ]
  ret %"class.WTF::StringImpl"* %191
}

declare void @_ZN5blink13HTMLTokenizer14UpdateStateForERKN3WTF6StringE(%"class.blink::HTMLTokenizer"*, %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20HTMLViewSourceParser6AppendERKN3WTF6StringE(%"class.blink::HTMLViewSourceParser"*, %"class.WTF::String"* nocapture readonly dereferenceable(8)) unnamed_addr #0 align 2 {
  %3 = alloca %"class.blink::SegmentedString", align 8
  %4 = bitcast %"class.blink::SegmentedString"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %4) #10
  %5 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 0, i32 3
  store i8 1, i8* %5, align 8
  %6 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 0, i32 4
  store i8 1, i8* %6, align 1
  %7 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 0, i32 5, i32 0, i32 0
  store %"class.WTF::StringImpl"* %8, %"class.WTF::StringImpl"** %9, align 8
  %10 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %10, label %64, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 2
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %30

16:                                               ; preds = %11
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i33
  %20 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %19, i33 1) #10
  %21 = extractvalue { i33, i1 } %20, 1
  %22 = extractvalue { i33, i1 } %20, 0
  %23 = icmp slt i33 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %25, label %26, !prof !3

25:                                               ; preds = %16
  tail call void @llvm.trap() #10
  unreachable

26:                                               ; preds = %16
  %27 = trunc i33 %22 to i32
  store i32 %27, i32* %17, align 4
  %28 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %29 = icmp eq %"class.WTF::StringImpl"* %28, null
  br i1 %29, label %64, label %30

30:                                               ; preds = %11, %26
  %31 = phi %"class.WTF::StringImpl"* [ %28, %26 ], [ %8, %11 ]
  %32 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 0, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %64, label %35

35:                                               ; preds = %30
  %36 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = load atomic i32, i32* %37 monotonic, align 4
  %39 = and i32 %38, 1
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %52, label %41

41:                                               ; preds = %35
  store i8 1, i8* %6, align 1
  %42 = icmp eq %"class.WTF::StringImpl"* %36, null
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 1
  %44 = bitcast %"class.WTF::StringImpl"* %43 to i8*
  %45 = select i1 %42, i8* null, i8* %44
  %46 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 0, i32 0, i32 0
  store i8* %45, i8** %46, align 8
  %47 = zext i32 %33 to i64
  %48 = getelementptr inbounds i8, i8* %45, i64 %47
  %49 = getelementptr inbounds i8, i8* %48, i64 -1
  %50 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 0, i32 2
  store i8* %49, i8** %50, align 8
  %51 = ptrtoint i8* %45 to i64
  br label %69

52:                                               ; preds = %35
  store i8 0, i8* %6, align 1
  %53 = icmp eq %"class.WTF::StringImpl"* %36, null
  %54 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 1
  %55 = bitcast %"class.WTF::StringImpl"* %54 to i16*
  %56 = select i1 %53, i16* null, i16* %55
  %57 = bitcast %"class.blink::SegmentedString"* %3 to i16**
  store i16* %56, i16** %57, align 8
  %58 = zext i32 %33 to i64
  %59 = getelementptr inbounds i16, i16* %56, i64 %58
  %60 = getelementptr inbounds i16, i16* %59, i64 -1
  %61 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 0, i32 2
  %62 = bitcast i8** %61 to i16**
  store i16* %60, i16** %62, align 8
  %63 = ptrtoint i16* %56 to i64
  br label %69

64:                                               ; preds = %2, %30, %26
  %65 = phi i1 [ false, %30 ], [ true, %26 ], [ true, %2 ]
  %66 = phi %"class.WTF::StringImpl"* [ %31, %30 ], [ null, %26 ], [ null, %2 ]
  store i8 1, i8* %6, align 1
  %67 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 0, i32 0, i32 0
  store i8* null, i8** %67, align 8
  %68 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 0, i32 2
  store i8* null, i8** %68, align 8
  br label %69

69:                                               ; preds = %64, %52, %41
  %70 = phi i1 [ false, %41 ], [ false, %52 ], [ %65, %64 ]
  %71 = phi %"class.WTF::StringImpl"* [ %31, %41 ], [ %31, %52 ], [ %66, %64 ]
  %72 = phi i64 [ %51, %41 ], [ %63, %52 ], [ 0, %64 ]
  %73 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 0, i32 1
  %74 = bitcast i8** %73 to i64*
  store i64 %72, i64* %74, align 8
  %75 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 1
  store i32 0, i32* %75, align 8
  %76 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 2
  store i32 0, i32* %76, align 4
  %77 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 3
  store i32 0, i32* %77, align 8
  %78 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 5
  %79 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 7
  %80 = bitcast %"class.WTF::Deque"* %78 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %80, i8 0, i64 25, i1 false) #10
  br i1 %70, label %86, label %81

81:                                               ; preds = %69
  %82 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %71, i64 0, i32 1
  %83 = load i32, i32* %82, align 4
  %84 = icmp eq i32 %83, 0
  %85 = zext i1 %84 to i8
  br label %86

86:                                               ; preds = %69, %81
  %87 = phi i8 [ %85, %81 ], [ 1, %69 ]
  store i8 %87, i8* %79, align 1
  %88 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 1, i32 1
  %89 = load %"class.blink::SegmentedString"*, %"class.blink::SegmentedString"** %88, align 8
  call void @_ZN5blink15SegmentedString6AppendERKS0_(%"class.blink::SegmentedString"* %89, %"class.blink::SegmentedString"* nonnull dereferenceable(88) %3) #10
  %90 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %78, i64 0, i32 0, i32 0, i32 0, i32 0
  %91 = load %"class.blink::SegmentedSubstring"*, %"class.blink::SegmentedSubstring"** %90, align 8
  %92 = icmp eq %"class.blink::SegmentedSubstring"* %91, null
  br i1 %92, label %105, label %93

93:                                               ; preds = %86
  %94 = bitcast %"class.blink::SegmentedSubstring"* %91 to i8*
  %95 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 5, i32 1
  %96 = load i32, i32* %95, align 8
  %97 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %3, i64 0, i32 5, i32 2
  %98 = load i32, i32* %97, align 4
  %99 = icmp eq i32 %96, %98
  br i1 %99, label %103, label %100

100:                                              ; preds = %93
  call void @_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEE10DestroyAllEv(%"class.WTF::Deque"* %78) #10
  %101 = bitcast %"class.WTF::Deque"* %78 to i8**
  %102 = load i8*, i8** %101, align 8
  br label %103

103:                                              ; preds = %100, %93
  %104 = phi i8* [ %102, %100 ], [ %94, %93 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %104) #10
  store %"class.blink::SegmentedSubstring"* null, %"class.blink::SegmentedSubstring"** %90, align 8
  br label %105

105:                                              ; preds = %103, %86
  %106 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %107 = icmp eq %"class.WTF::StringImpl"* %106, null
  br i1 %107, label %121, label %108

108:                                              ; preds = %105
  %109 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %106, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %110 = load atomic i32, i32* %109 monotonic, align 4
  %111 = and i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %106, i64 0, i32 0
  %114 = load i32, i32* %113, align 4
  br i1 %112, label %115, label %117

115:                                              ; preds = %108
  %116 = add i32 %114, -1
  store i32 %116, i32* %113, align 4
  br label %117

117:                                              ; preds = %115, %108
  %118 = phi i32 [ %116, %115 ], [ %114, %108 ]
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %120, label %121

120:                                              ; preds = %117
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %106) #10
  br label %121

121:                                              ; preds = %105, %117, %120
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %4) #10
  call void @_ZN5blink20HTMLViewSourceParser13PumpTokenizerEv(%"class.blink::HTMLViewSourceParser"* %0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20HTMLViewSourceParser6FinishEv(%"class.blink::HTMLViewSourceParser"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 0
  tail call void @_ZN5blink25DecodedDataDocumentParser5FlushEv(%"class.blink::DecodedDataDocumentParser"* %2) #10
  %3 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 1, i32 1
  %4 = load %"class.blink::SegmentedString"*, %"class.blink::SegmentedString"** %3, align 8
  %5 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %4, i64 0, i32 6
  %6 = load i8, i8* %5, align 8, !range !2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %10

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 1
  tail call void @_ZN5blink15HTMLInputStream13MarkEndOfFileEv(%"class.blink::HTMLInputStream"* %9)
  br label %10

10:                                               ; preds = %1, %8
  %11 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 0, i32 0, i32 1
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 3
  br i1 %13, label %19, label %14

14:                                               ; preds = %10
  tail call void @_ZN5blink20HTMLViewSourceParser13PumpTokenizerEv(%"class.blink::HTMLViewSourceParser"* %0)
  %15 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %16 = bitcast %"class.blink::Document"** %15 to %"class.blink::HTMLViewSourceDocument"**
  %17 = load %"class.blink::HTMLViewSourceDocument"*, %"class.blink::HTMLViewSourceDocument"** %16, align 8
  %18 = getelementptr inbounds %"class.blink::HTMLViewSourceDocument", %"class.blink::HTMLViewSourceDocument"* %17, i64 0, i32 0, i32 0
  tail call void @_ZN5blink8Document15FinishedParsingEv(%"class.blink::Document"* %18) #10
  br label %19

19:                                               ; preds = %14, %10
  ret void
}

declare void @_ZN5blink25DecodedDataDocumentParser5FlushEv(%"class.blink::DecodedDataDocumentParser"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink15HTMLInputStream13MarkEndOfFileEv(%"class.blink::HTMLInputStream"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.blink::SegmentedString", align 8
  %3 = alloca %"class.WTF::String", align 8
  %4 = getelementptr inbounds %"class.blink::HTMLInputStream", %"class.blink::HTMLInputStream"* %0, i64 0, i32 1
  %5 = load %"class.blink::SegmentedString"*, %"class.blink::SegmentedString"** %4, align 8
  %6 = bitcast %"class.blink::SegmentedString"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %6) #10
  %7 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #10
  call void @_ZN3WTF6StringC1EPKhj(%"class.WTF::String"* nonnull %3, i8* nonnull @_ZN5blinkL16kEndOfFileMarkerE, i32 1) #10
  %8 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %2, i64 0, i32 0, i32 3
  store i8 1, i8* %8, align 8
  %9 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %2, i64 0, i32 0, i32 4
  store i8 1, i8* %9, align 1
  %10 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %12 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %2, i64 0, i32 0, i32 5, i32 0, i32 0
  store %"class.WTF::StringImpl"* %11, %"class.WTF::StringImpl"** %12, align 8
  %13 = icmp eq %"class.WTF::StringImpl"* %11, null
  br i1 %13, label %67, label %14

14:                                               ; preds = %1
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = and i32 %16, 2
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %33

19:                                               ; preds = %14
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = zext i32 %21 to i33
  %23 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %22, i33 1) #10
  %24 = extractvalue { i33, i1 } %23, 1
  %25 = extractvalue { i33, i1 } %23, 0
  %26 = icmp slt i33 %25, 0
  %27 = or i1 %24, %26
  br i1 %27, label %28, label %29, !prof !3

28:                                               ; preds = %19
  call void @llvm.trap() #10
  unreachable

29:                                               ; preds = %19
  %30 = trunc i33 %25 to i32
  store i32 %30, i32* %20, align 4
  %31 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %32 = icmp eq %"class.WTF::StringImpl"* %31, null
  br i1 %32, label %67, label %33

33:                                               ; preds = %14, %29
  %34 = phi %"class.WTF::StringImpl"* [ %31, %29 ], [ %11, %14 ]
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %34, i64 0, i32 1
  %36 = load i32, i32* %35, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %67, label %38

38:                                               ; preds = %33
  %39 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %40 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %39, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = load atomic i32, i32* %40 monotonic, align 4
  %42 = and i32 %41, 1
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %55, label %44

44:                                               ; preds = %38
  store i8 1, i8* %9, align 1
  %45 = icmp eq %"class.WTF::StringImpl"* %39, null
  %46 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %39, i64 1
  %47 = bitcast %"class.WTF::StringImpl"* %46 to i8*
  %48 = select i1 %45, i8* null, i8* %47
  %49 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %2, i64 0, i32 0, i32 0, i32 0
  store i8* %48, i8** %49, align 8
  %50 = zext i32 %36 to i64
  %51 = getelementptr inbounds i8, i8* %48, i64 %50
  %52 = getelementptr inbounds i8, i8* %51, i64 -1
  %53 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %2, i64 0, i32 0, i32 2
  store i8* %52, i8** %53, align 8
  %54 = ptrtoint i8* %48 to i64
  br label %72

55:                                               ; preds = %38
  store i8 0, i8* %9, align 1
  %56 = icmp eq %"class.WTF::StringImpl"* %39, null
  %57 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %39, i64 1
  %58 = bitcast %"class.WTF::StringImpl"* %57 to i16*
  %59 = select i1 %56, i16* null, i16* %58
  %60 = bitcast %"class.blink::SegmentedString"* %2 to i16**
  store i16* %59, i16** %60, align 8
  %61 = zext i32 %36 to i64
  %62 = getelementptr inbounds i16, i16* %59, i64 %61
  %63 = getelementptr inbounds i16, i16* %62, i64 -1
  %64 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %2, i64 0, i32 0, i32 2
  %65 = bitcast i8** %64 to i16**
  store i16* %63, i16** %65, align 8
  %66 = ptrtoint i16* %59 to i64
  br label %72

67:                                               ; preds = %1, %33, %29
  %68 = phi i1 [ false, %33 ], [ true, %29 ], [ true, %1 ]
  %69 = phi %"class.WTF::StringImpl"* [ %34, %33 ], [ null, %29 ], [ null, %1 ]
  store i8 1, i8* %9, align 1
  %70 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %2, i64 0, i32 0, i32 0, i32 0
  store i8* null, i8** %70, align 8
  %71 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %2, i64 0, i32 0, i32 2
  store i8* null, i8** %71, align 8
  br label %72

72:                                               ; preds = %67, %55, %44
  %73 = phi i1 [ false, %44 ], [ false, %55 ], [ %68, %67 ]
  %74 = phi %"class.WTF::StringImpl"* [ %34, %44 ], [ %34, %55 ], [ %69, %67 ]
  %75 = phi i64 [ %54, %44 ], [ %66, %55 ], [ 0, %67 ]
  %76 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %2, i64 0, i32 0, i32 1
  %77 = bitcast i8** %76 to i64*
  store i64 %75, i64* %77, align 8
  %78 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %2, i64 0, i32 1
  store i32 0, i32* %78, align 8
  %79 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %2, i64 0, i32 2
  store i32 0, i32* %79, align 4
  %80 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %2, i64 0, i32 3
  store i32 0, i32* %80, align 8
  %81 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %2, i64 0, i32 5
  %82 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %2, i64 0, i32 7
  %83 = bitcast %"class.WTF::Deque"* %81 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %83, i8 0, i64 25, i1 false) #10
  br i1 %73, label %89, label %84

84:                                               ; preds = %72
  %85 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %74, i64 0, i32 1
  %86 = load i32, i32* %85, align 4
  %87 = icmp eq i32 %86, 0
  %88 = zext i1 %87 to i8
  br label %89

89:                                               ; preds = %72, %84
  %90 = phi i8 [ %88, %84 ], [ 1, %72 ]
  store i8 %90, i8* %82, align 1
  call void @_ZN5blink15SegmentedString6AppendERKS0_(%"class.blink::SegmentedString"* %5, %"class.blink::SegmentedString"* nonnull dereferenceable(88) %2) #10
  %91 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %81, i64 0, i32 0, i32 0, i32 0, i32 0
  %92 = load %"class.blink::SegmentedSubstring"*, %"class.blink::SegmentedSubstring"** %91, align 8
  %93 = icmp eq %"class.blink::SegmentedSubstring"* %92, null
  br i1 %93, label %106, label %94

94:                                               ; preds = %89
  %95 = bitcast %"class.blink::SegmentedSubstring"* %92 to i8*
  %96 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %2, i64 0, i32 5, i32 1
  %97 = load i32, i32* %96, align 8
  %98 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %2, i64 0, i32 5, i32 2
  %99 = load i32, i32* %98, align 4
  %100 = icmp eq i32 %97, %99
  br i1 %100, label %104, label %101

101:                                              ; preds = %94
  call void @_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEE10DestroyAllEv(%"class.WTF::Deque"* %81) #10
  %102 = bitcast %"class.WTF::Deque"* %81 to i8**
  %103 = load i8*, i8** %102, align 8
  br label %104

104:                                              ; preds = %101, %94
  %105 = phi i8* [ %103, %101 ], [ %95, %94 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %105) #10
  store %"class.blink::SegmentedSubstring"* null, %"class.blink::SegmentedSubstring"** %91, align 8
  br label %106

106:                                              ; preds = %104, %89
  %107 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %108 = icmp eq %"class.WTF::StringImpl"* %107, null
  br i1 %108, label %122, label %109

109:                                              ; preds = %106
  %110 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %107, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %111 = load atomic i32, i32* %110 monotonic, align 4
  %112 = and i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %107, i64 0, i32 0
  %115 = load i32, i32* %114, align 4
  br i1 %113, label %116, label %118

116:                                              ; preds = %109
  %117 = add i32 %115, -1
  store i32 %117, i32* %114, align 4
  br label %118

118:                                              ; preds = %116, %109
  %119 = phi i32 [ %117, %116 ], [ %115, %109 ]
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %121, label %122

121:                                              ; preds = %118
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %107) #10
  br label %122

122:                                              ; preds = %106, %118, %121
  %123 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %124 = icmp eq %"class.WTF::StringImpl"* %123, null
  br i1 %124, label %138, label %125

125:                                              ; preds = %122
  %126 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %123, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %127 = load atomic i32, i32* %126 monotonic, align 4
  %128 = and i32 %127, 2
  %129 = icmp eq i32 %128, 0
  %130 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %123, i64 0, i32 0
  %131 = load i32, i32* %130, align 4
  br i1 %129, label %132, label %134

132:                                              ; preds = %125
  %133 = add i32 %131, -1
  store i32 %133, i32* %130, align 4
  br label %134

134:                                              ; preds = %132, %125
  %135 = phi i32 [ %133, %132 ], [ %131, %125 ]
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %137, label %138

137:                                              ; preds = %134
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %123) #10
  br label %138

138:                                              ; preds = %122, %134, %137
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #10
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %6) #10
  %139 = load %"class.blink::SegmentedString"*, %"class.blink::SegmentedString"** %4, align 8
  call void @_ZN5blink15SegmentedString5CloseEv(%"class.blink::SegmentedString"* %139) #10
  ret void
}

declare void @_ZN5blink8Document15FinishedParsingEv(%"class.blink::Document"*) local_unnamed_addr #1

declare void @_ZN5blink15SegmentedString5ClearEv(%"class.blink::SegmentedString"*) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN5blink20HTMLViewSourceParser26NeedToCheckTokenizerBufferEPNS_13HTMLTokenizerE(%"class.blink::HTMLViewSourceParser"* nocapture readnone, %"class.blink::HTMLTokenizer"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.blink::HTMLTokenizer", %"class.blink::HTMLTokenizer"* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 27
  br i1 %5, label %6, label %11

6:                                                ; preds = %2
  %7 = trunc i32 %4 to i27
  %8 = lshr i27 -33105919, %7
  %9 = and i27 %8, 1
  %10 = icmp ne i27 %9, 0
  ret i1 %10

11:                                               ; preds = %2
  ret i1 false
}

declare %"class.WTF::StringImpl"* @_ZNK5blink13HTMLTokenizer18BufferedCharactersEv(%"class.blink::HTMLTokenizer"*) local_unnamed_addr #1

declare void @_ZN5blink15SegmentedString6AppendERKS0_(%"class.blink::SegmentedString"*, %"class.blink::SegmentedString"* dereferenceable(88)) local_unnamed_addr #1

declare i32 @_ZNK5blink15SegmentedString6lengthEv(%"class.blink::SegmentedString"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @_ZN3WTF13StringBuilder15ReserveCapacityEj(%"class.WTF::StringBuilder"*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF13StringBuilder6AppendEDs(%"class.WTF::StringBuilder"*, i16 zeroext) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca i8, align 1
  %4 = alloca i16, align 2
  store i16 %1, i16* %4, align 2
  %5 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 3
  %6 = load i8, i8* %5, align 4, !range !2
  %7 = icmp ne i8 %6, 0
  %8 = icmp ult i16 %1, 256
  %9 = and i1 %8, %7
  br i1 %9, label %10, label %35

10:                                               ; preds = %2
  %11 = trunc i16 %1 to i8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3)
  store i8 %11, i8* %3, align 1
  %12 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 4
  %13 = load i8, i8* %12, align 1, !range !2
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %15, label %16

15:                                               ; preds = %10
  tail call void @_ZN3WTF13StringBuilder13CreateBuffer8Ej(%"class.WTF::StringBuilder"* %0, i32 1) #10
  br label %16

16:                                               ; preds = %15, %10
  %17 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0
  %18 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %21 = load i32, i32* %20, align 8
  %22 = icmp eq i32 %19, %21
  br i1 %22, label %30, label %23, !prof !3

23:                                               ; preds = %16
  %24 = getelementptr inbounds %"class.WTF::Vector.369", %"class.WTF::Vector.369"* %17, i64 0, i32 0, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = zext i32 %19 to i64
  %27 = getelementptr inbounds i8, i8* %25, i64 %26
  store i8 %11, i8* %27, align 1
  %28 = load i32, i32* %18, align 4
  %29 = add i32 %28, 1
  store i32 %29, i32* %18, align 4
  br label %31

30:                                               ; preds = %16
  call void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14AppendSlowCaseIRhEEvOT_(%"class.WTF::Vector.369"* %17, i8* nonnull dereferenceable(1) %3) #10
  br label %31

31:                                               ; preds = %23, %30
  %32 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 2
  %33 = load i32, i32* %32, align 8
  %34 = add i32 %33, 1
  store i32 %34, i32* %32, align 8
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3)
  br label %62

35:                                               ; preds = %2
  %36 = icmp eq i8 %6, 0
  br i1 %36, label %37, label %41

37:                                               ; preds = %35
  %38 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 4
  %39 = load i8, i8* %38, align 1, !range !2
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %41, label %42

41:                                               ; preds = %37, %35
  tail call void @_ZN3WTF13StringBuilder14CreateBuffer16Ej(%"class.WTF::StringBuilder"* %0, i32 1) #10
  br label %42

42:                                               ; preds = %37, %41
  %43 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1
  %44 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %45 = load i32, i32* %44, align 4
  %46 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %47 = load i32, i32* %46, align 8
  %48 = icmp eq i32 %45, %47
  br i1 %48, label %56, label %49, !prof !3

49:                                               ; preds = %42
  %50 = bitcast %union.anon.368* %43 to i16**
  %51 = load i16*, i16** %50, align 8
  %52 = zext i32 %45 to i64
  %53 = getelementptr inbounds i16, i16* %51, i64 %52
  store i16 %1, i16* %53, align 2
  %54 = load i32, i32* %44, align 4
  %55 = add i32 %54, 1
  store i32 %55, i32* %44, align 4
  br label %58

56:                                               ; preds = %42
  %57 = bitcast %union.anon.368* %43 to %"class.WTF::Vector.374"*
  call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_(%"class.WTF::Vector.374"* %57, i16* nonnull dereferenceable(2) %4) #10
  br label %58

58:                                               ; preds = %49, %56
  %59 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 2
  %60 = load i32, i32* %59, align 8
  %61 = add i32 %60, 1
  store i32 %61, i32* %59, align 8
  br label %62

62:                                               ; preds = %58, %31
  ret void
}

declare %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK5blink14DocumentParser18NameInHeapSnapshotEv(%"class.blink::DocumentParser"*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink20HTMLViewSourceParserD2Ev(%"class.blink::HTMLViewSourceParser"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [22 x i8*] }, { [22 x i8*] }* @_ZTVN5blink20HTMLViewSourceParserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 8, i32 0, i32 0
  %4 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  %5 = icmp eq %"class.WTF::StringImpl"* %4, null
  br i1 %5, label %19, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = and i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 0
  %12 = load i32, i32* %11, align 4
  br i1 %10, label %13, label %15

13:                                               ; preds = %6
  %14 = add i32 %12, -1
  store i32 %14, i32* %11, align 4
  br label %15

15:                                               ; preds = %13, %6
  %16 = phi i32 [ %14, %13 ], [ %12, %6 ]
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %19

18:                                               ; preds = %15
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %4) #10
  br label %19

19:                                               ; preds = %1, %15, %18
  %20 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 7, i32 5
  %21 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %20, i64 0, i32 0, i32 0, i32 0, i32 0
  %22 = load %"class.blink::SegmentedSubstring"*, %"class.blink::SegmentedSubstring"** %21, align 8
  %23 = icmp eq %"class.blink::SegmentedSubstring"* %22, null
  br i1 %23, label %36, label %24

24:                                               ; preds = %19
  %25 = bitcast %"class.blink::SegmentedSubstring"* %22 to i8*
  %26 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 7, i32 5, i32 1
  %27 = load i32, i32* %26, align 8
  %28 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 7, i32 5, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = icmp eq i32 %27, %29
  br i1 %30, label %34, label %31

31:                                               ; preds = %24
  tail call void @_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEE10DestroyAllEv(%"class.WTF::Deque"* %20) #10
  %32 = bitcast %"class.WTF::Deque"* %20 to i8**
  %33 = load i8*, i8** %32, align 8
  br label %34

34:                                               ; preds = %31, %24
  %35 = phi i8* [ %33, %31 ], [ %25, %24 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %35) #10
  store %"class.blink::SegmentedSubstring"* null, %"class.blink::SegmentedSubstring"** %21, align 8
  br label %36

36:                                               ; preds = %34, %19
  %37 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 7, i32 0, i32 5, i32 0, i32 0
  %38 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %37, align 8
  %39 = icmp eq %"class.WTF::StringImpl"* %38, null
  br i1 %39, label %53, label %40

40:                                               ; preds = %36
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %38, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = load atomic i32, i32* %41 monotonic, align 4
  %43 = and i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %38, i64 0, i32 0
  %46 = load i32, i32* %45, align 4
  br i1 %44, label %47, label %49

47:                                               ; preds = %40
  %48 = add i32 %46, -1
  store i32 %48, i32* %45, align 4
  br label %49

49:                                               ; preds = %47, %40
  %50 = phi i32 [ %48, %47 ], [ %46, %40 ]
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %53

52:                                               ; preds = %49
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %38) #10
  br label %53

53:                                               ; preds = %36, %49, %52
  %54 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 6, i32 5
  %55 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %54, i64 0, i32 0, i32 0, i32 0, i32 0
  %56 = load %"class.blink::SegmentedSubstring"*, %"class.blink::SegmentedSubstring"** %55, align 8
  %57 = icmp eq %"class.blink::SegmentedSubstring"* %56, null
  br i1 %57, label %70, label %58

58:                                               ; preds = %53
  %59 = bitcast %"class.blink::SegmentedSubstring"* %56 to i8*
  %60 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 6, i32 5, i32 1
  %61 = load i32, i32* %60, align 8
  %62 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 6, i32 5, i32 2
  %63 = load i32, i32* %62, align 4
  %64 = icmp eq i32 %61, %63
  br i1 %64, label %68, label %65

65:                                               ; preds = %58
  tail call void @_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEE10DestroyAllEv(%"class.WTF::Deque"* %54) #10
  %66 = bitcast %"class.WTF::Deque"* %54 to i8**
  %67 = load i8*, i8** %66, align 8
  br label %68

68:                                               ; preds = %65, %58
  %69 = phi i8* [ %67, %65 ], [ %59, %58 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %69) #10
  store %"class.blink::SegmentedSubstring"* null, %"class.blink::SegmentedSubstring"** %55, align 8
  br label %70

70:                                               ; preds = %68, %53
  %71 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 6, i32 0, i32 5, i32 0, i32 0
  %72 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %71, align 8
  %73 = icmp eq %"class.WTF::StringImpl"* %72, null
  br i1 %73, label %87, label %74

74:                                               ; preds = %70
  %75 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %72, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %76 = load atomic i32, i32* %75 monotonic, align 4
  %77 = and i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %72, i64 0, i32 0
  %80 = load i32, i32* %79, align 4
  br i1 %78, label %81, label %83

81:                                               ; preds = %74
  %82 = add i32 %80, -1
  store i32 %82, i32* %79, align 4
  br label %83

83:                                               ; preds = %81, %74
  %84 = phi i32 [ %82, %81 ], [ %80, %74 ]
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %87

86:                                               ; preds = %83
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %72) #10
  br label %87

87:                                               ; preds = %70, %83, %86
  %88 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %89 = load %"class.blink::HTMLTokenizer"*, %"class.blink::HTMLTokenizer"** %88, align 8
  store %"class.blink::HTMLTokenizer"* null, %"class.blink::HTMLTokenizer"** %88, align 8
  %90 = icmp eq %"class.blink::HTMLTokenizer"* %89, null
  br i1 %90, label %93, label %91

91:                                               ; preds = %87
  tail call void @_ZN5blink13HTMLTokenizerD1Ev(%"class.blink::HTMLTokenizer"* nonnull %89) #10
  %92 = bitcast %"class.blink::HTMLTokenizer"* %89 to i8*
  tail call void @free(i8* %92) #10
  br label %93

93:                                               ; preds = %87, %91
  %94 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 2
  tail call void @_ZN5blink9HTMLTokenD2Ev(%"class.blink::HTMLToken"* %94) #10
  %95 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 1, i32 0, i32 5
  %96 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %95, i64 0, i32 0, i32 0, i32 0, i32 0
  %97 = load %"class.blink::SegmentedSubstring"*, %"class.blink::SegmentedSubstring"** %96, align 8
  %98 = icmp eq %"class.blink::SegmentedSubstring"* %97, null
  br i1 %98, label %111, label %99

99:                                               ; preds = %93
  %100 = bitcast %"class.blink::SegmentedSubstring"* %97 to i8*
  %101 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 1, i32 0, i32 5, i32 1
  %102 = load i32, i32* %101, align 8
  %103 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 1, i32 0, i32 5, i32 2
  %104 = load i32, i32* %103, align 4
  %105 = icmp eq i32 %102, %104
  br i1 %105, label %109, label %106

106:                                              ; preds = %99
  tail call void @_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEE10DestroyAllEv(%"class.WTF::Deque"* %95) #10
  %107 = bitcast %"class.WTF::Deque"* %95 to i8**
  %108 = load i8*, i8** %107, align 8
  br label %109

109:                                              ; preds = %106, %99
  %110 = phi i8* [ %108, %106 ], [ %100, %99 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %110) #10
  store %"class.blink::SegmentedSubstring"* null, %"class.blink::SegmentedSubstring"** %96, align 8
  br label %111

111:                                              ; preds = %109, %93
  %112 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 1, i32 0, i32 0, i32 5, i32 0, i32 0
  %113 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %112, align 8
  %114 = icmp eq %"class.WTF::StringImpl"* %113, null
  br i1 %114, label %128, label %115

115:                                              ; preds = %111
  %116 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %113, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %117 = load atomic i32, i32* %116 monotonic, align 4
  %118 = and i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %113, i64 0, i32 0
  %121 = load i32, i32* %120, align 4
  br i1 %119, label %122, label %124

122:                                              ; preds = %115
  %123 = add i32 %121, -1
  store i32 %123, i32* %120, align 4
  br label %124

124:                                              ; preds = %122, %115
  %125 = phi i32 [ %123, %122 ], [ %121, %115 ]
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %128

127:                                              ; preds = %124
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %113) #10
  br label %128

128:                                              ; preds = %111, %124, %127
  %129 = getelementptr inbounds %"class.blink::HTMLViewSourceParser", %"class.blink::HTMLViewSourceParser"* %0, i64 0, i32 0
  tail call void @_ZN5blink25DecodedDataDocumentParserD2Ev(%"class.blink::DecodedDataDocumentParser"* %129) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink20HTMLViewSourceParserD0Ev(%"class.blink::HTMLViewSourceParser"*) unnamed_addr #0 comdat align 2 {
  tail call void @_ZN5blink20HTMLViewSourceParserD2Ev(%"class.blink::HTMLViewSourceParser"* %0) #10
  ret void
}

declare void @_ZNK5blink14DocumentParser5TraceEPNS_7VisitorE(%"class.blink::DocumentParser"*, %"class.blink::Visitor"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::ScriptableDocumentParser"* @_ZN5blink14DocumentParser26AsScriptableDocumentParserEv(%"class.blink::DocumentParser"*) unnamed_addr #0 comdat align 2 {
  ret %"class.blink::ScriptableDocumentParser"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN5blink14DocumentParser17HasInsertionPointEv(%"class.blink::DocumentParser"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink20HTMLViewSourceParser6insertERKN3WTF6StringE(%"class.blink::HTMLViewSourceParser"*, %"class.WTF::String"* dereferenceable(8)) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN5blink25DecodedDataDocumentParser11AppendBytesEPKcm(%"class.blink::DecodedDataDocumentParser"*, i8*, i64) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink25DecodedDataDocumentParser12NeedsDecoderEv(%"class.blink::DecodedDataDocumentParser"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::DecodedDataDocumentParser", %"class.blink::DecodedDataDocumentParser"* %0, i64 0, i32 1
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp ne i8 %3, 0
  ret i1 %4
}

declare void @_ZN5blink25DecodedDataDocumentParser10SetDecoderENSt3__110unique_ptrINS_19TextResourceDecoderENS1_14default_deleteIS3_EEEE(%"class.blink::DecodedDataDocumentParser"*, %"class.blink::TextResourceDecoder"*) unnamed_addr #1

declare %"class.blink::TextResourceDecoder"* @_ZN5blink25DecodedDataDocumentParser7DecoderEv(%"class.blink::DecodedDataDocumentParser"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink14DocumentParser18SetHasAppendedDataEv(%"class.blink::DocumentParser"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN5blink14DocumentParser20PrepareToStopParsingEv(%"class.blink::DocumentParser"*) unnamed_addr #1

declare void @_ZN5blink14DocumentParser11StopParsingEv(%"class.blink::DocumentParser"*) unnamed_addr #1

declare void @_ZN5blink14DocumentParser6DetachEv(%"class.blink::DocumentParser"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink14DocumentParser24DocumentElementAvailableEv(%"class.blink::DocumentParser"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink25DecodedDataDocumentParser10WellFormedEv(%"class.blink::DecodedDataDocumentParser"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

declare zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* dereferenceable(24), %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #1

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEE10DestroyAllEv(%"class.WTF::Deque"*) local_unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = icmp ugt i32 %3, %5
  %7 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %8 = load %"class.blink::SegmentedSubstring"*, %"class.blink::SegmentedSubstring"** %7, align 8
  %9 = zext i32 %5 to i64
  %10 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %8, i64 %9
  br i1 %6, label %37, label %11

11:                                               ; preds = %1
  %12 = icmp eq i32 %3, %5
  br i1 %12, label %95, label %13

13:                                               ; preds = %11
  %14 = zext i32 %3 to i64
  %15 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %8, i64 %14
  br label %16

16:                                               ; preds = %13, %34
  %17 = phi %"class.blink::SegmentedSubstring"* [ %35, %34 ], [ %15, %13 ]
  %18 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %17, i64 0, i32 5, i32 0, i32 0
  %19 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8
  %20 = icmp eq %"class.WTF::StringImpl"* %19, null
  br i1 %20, label %34, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = load atomic i32, i32* %22 monotonic, align 4
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 0
  %27 = load i32, i32* %26, align 4
  br i1 %25, label %28, label %30

28:                                               ; preds = %21
  %29 = add i32 %27, -1
  store i32 %29, i32* %26, align 4
  br label %30

30:                                               ; preds = %28, %21
  %31 = phi i32 [ %29, %28 ], [ %27, %21 ]
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %34

33:                                               ; preds = %30
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %19) #10
  br label %34

34:                                               ; preds = %33, %30, %16
  %35 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %17, i64 1
  %36 = icmp eq %"class.blink::SegmentedSubstring"* %35, %10
  br i1 %36, label %95, label %16

37:                                               ; preds = %1
  %38 = icmp eq i32 %5, 0
  br i1 %38, label %63, label %39

39:                                               ; preds = %37, %57
  %40 = phi %"class.blink::SegmentedSubstring"* [ %58, %57 ], [ %8, %37 ]
  %41 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %40, i64 0, i32 5, i32 0, i32 0
  %42 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %41, align 8
  %43 = icmp eq %"class.WTF::StringImpl"* %42, null
  br i1 %43, label %57, label %44

44:                                               ; preds = %39
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load atomic i32, i32* %45 monotonic, align 4
  %47 = and i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 0
  %50 = load i32, i32* %49, align 4
  br i1 %48, label %51, label %53

51:                                               ; preds = %44
  %52 = add i32 %50, -1
  store i32 %52, i32* %49, align 4
  br label %53

53:                                               ; preds = %51, %44
  %54 = phi i32 [ %52, %51 ], [ %50, %44 ]
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %57

56:                                               ; preds = %53
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %42) #10
  br label %57

57:                                               ; preds = %56, %53, %39
  %58 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %40, i64 1
  %59 = icmp eq %"class.blink::SegmentedSubstring"* %58, %10
  br i1 %59, label %60, label %39

60:                                               ; preds = %57
  %61 = load %"class.blink::SegmentedSubstring"*, %"class.blink::SegmentedSubstring"** %7, align 8
  %62 = load i32, i32* %2, align 8
  br label %63

63:                                               ; preds = %60, %37
  %64 = phi i32 [ %62, %60 ], [ %3, %37 ]
  %65 = phi %"class.blink::SegmentedSubstring"* [ %61, %60 ], [ %8, %37 ]
  %66 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %67 = load i32, i32* %66, align 8
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %65, i64 %68
  %70 = icmp eq i32 %64, %67
  br i1 %70, label %95, label %71

71:                                               ; preds = %63
  %72 = zext i32 %64 to i64
  %73 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %65, i64 %72
  br label %74

74:                                               ; preds = %71, %92
  %75 = phi %"class.blink::SegmentedSubstring"* [ %93, %92 ], [ %73, %71 ]
  %76 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %75, i64 0, i32 5, i32 0, i32 0
  %77 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %76, align 8
  %78 = icmp eq %"class.WTF::StringImpl"* %77, null
  br i1 %78, label %92, label %79

79:                                               ; preds = %74
  %80 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %77, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %81 = load atomic i32, i32* %80 monotonic, align 4
  %82 = and i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %77, i64 0, i32 0
  %85 = load i32, i32* %84, align 4
  br i1 %83, label %86, label %88

86:                                               ; preds = %79
  %87 = add i32 %85, -1
  store i32 %87, i32* %84, align 4
  br label %88

88:                                               ; preds = %86, %79
  %89 = phi i32 [ %87, %86 ], [ %85, %79 ]
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %92

91:                                               ; preds = %88
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %77) #10
  br label %92

92:                                               ; preds = %91, %88, %74
  %93 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %75, i64 1
  %94 = icmp eq %"class.blink::SegmentedSubstring"* %93, %69
  br i1 %94, label %95, label %74

95:                                               ; preds = %34, %92, %63, %11
  ret void
}

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #1

declare void @_ZN3WTF6StringC1EPKhj(%"class.WTF::String"*, i8*, i32) unnamed_addr #1

declare void @_ZN5blink15SegmentedString5CloseEv(%"class.blink::SegmentedString"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #6

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEEC2ERKS4_(%"class.WTF::Deque"*, %"class.WTF::Deque"* dereferenceable(24)) unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.blink::SegmentedSubstring"* null, %"class.blink::SegmentedSubstring"** %5, align 8
  %6 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  store i32 0, i32* %6, align 8
  %7 = icmp eq i32 %4, 0
  br i1 %7, label %17, label %8

8:                                                ; preds = %2
  %9 = zext i32 %4 to i64
  %10 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink18SegmentedSubstringEEEmm(i64 %9) #10
  %11 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %10, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink18SegmentedSubstringEEEPKcv, i64 0, i64 0)) #10
  %12 = ptrtoint i8* %11 to i64
  %13 = bitcast %"class.WTF::Deque"* %0 to i64*
  store atomic i64 %12, i64* %13 monotonic, align 8
  %14 = udiv i64 %10, 40
  %15 = trunc i64 %14 to i32
  store i32 %15, i32* %6, align 8
  %16 = bitcast i8* %11 to %"class.blink::SegmentedSubstring"*
  br label %17

17:                                               ; preds = %2, %8
  %18 = phi %"class.blink::SegmentedSubstring"* [ null, %2 ], [ %16, %8 ]
  %19 = phi i32 [ 0, %2 ], [ %15, %8 ]
  %20 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 1
  %21 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %1, i64 0, i32 1
  %22 = load i32, i32* %21, align 8
  store i32 %22, i32* %20, align 8
  %23 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 2
  %24 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %1, i64 0, i32 2
  %25 = load i32, i32* %24, align 4
  store i32 %25, i32* %23, align 4
  %26 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %27 = load %"class.blink::SegmentedSubstring"*, %"class.blink::SegmentedSubstring"** %26, align 8
  %28 = icmp ugt i32 %22, %25
  br i1 %28, label %67, label %29

29:                                               ; preds = %17
  %30 = zext i32 %22 to i64
  %31 = zext i32 %25 to i64
  %32 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %27, i64 %31
  %33 = icmp eq i32 %22, %25
  br i1 %33, label %146, label %34

34:                                               ; preds = %29
  %35 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %18, i64 %30
  %36 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %27, i64 %30
  br label %37

37:                                               ; preds = %34, %63
  %38 = phi %"class.blink::SegmentedSubstring"* [ %64, %63 ], [ %35, %34 ]
  %39 = phi %"class.blink::SegmentedSubstring"* [ %65, %63 ], [ %36, %34 ]
  %40 = bitcast %"class.blink::SegmentedSubstring"* %38 to i8*
  %41 = bitcast %"class.blink::SegmentedSubstring"* %39 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 26, i1 false) #10
  %42 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %39, i64 0, i32 5, i32 0, i32 0
  %43 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %42, align 8
  %44 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %38, i64 0, i32 5, i32 0, i32 0
  store %"class.WTF::StringImpl"* %43, %"class.WTF::StringImpl"** %44, align 8
  %45 = icmp eq %"class.WTF::StringImpl"* %43, null
  br i1 %45, label %63, label %46

46:                                               ; preds = %37
  %47 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %48 = load atomic i32, i32* %47 monotonic, align 4
  %49 = and i32 %48, 2
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %63

51:                                               ; preds = %46
  %52 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 0
  %53 = load i32, i32* %52, align 4
  %54 = zext i32 %53 to i33
  %55 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %54, i33 1) #10
  %56 = extractvalue { i33, i1 } %55, 1
  %57 = extractvalue { i33, i1 } %55, 0
  %58 = icmp slt i33 %57, 0
  %59 = or i1 %56, %58
  br i1 %59, label %60, label %61, !prof !3

60:                                               ; preds = %51
  tail call void @llvm.trap() #10
  unreachable

61:                                               ; preds = %51
  %62 = trunc i33 %57 to i32
  store i32 %62, i32* %52, align 4
  br label %63

63:                                               ; preds = %61, %46, %37
  %64 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %38, i64 1
  %65 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %39, i64 1
  %66 = icmp eq %"class.blink::SegmentedSubstring"* %65, %32
  br i1 %66, label %146, label %37

67:                                               ; preds = %17
  %68 = zext i32 %25 to i64
  %69 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %27, i64 %68
  %70 = icmp eq i32 %25, 0
  br i1 %70, label %105, label %71

71:                                               ; preds = %67, %97
  %72 = phi %"class.blink::SegmentedSubstring"* [ %98, %97 ], [ %18, %67 ]
  %73 = phi %"class.blink::SegmentedSubstring"* [ %99, %97 ], [ %27, %67 ]
  %74 = bitcast %"class.blink::SegmentedSubstring"* %72 to i8*
  %75 = bitcast %"class.blink::SegmentedSubstring"* %73 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %74, i8* align 8 %75, i64 26, i1 false) #10
  %76 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %73, i64 0, i32 5, i32 0, i32 0
  %77 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %76, align 8
  %78 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %72, i64 0, i32 5, i32 0, i32 0
  store %"class.WTF::StringImpl"* %77, %"class.WTF::StringImpl"** %78, align 8
  %79 = icmp eq %"class.WTF::StringImpl"* %77, null
  br i1 %79, label %97, label %80

80:                                               ; preds = %71
  %81 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %77, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %82 = load atomic i32, i32* %81 monotonic, align 4
  %83 = and i32 %82, 2
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %85, label %97

85:                                               ; preds = %80
  %86 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %77, i64 0, i32 0
  %87 = load i32, i32* %86, align 4
  %88 = zext i32 %87 to i33
  %89 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %88, i33 1) #10
  %90 = extractvalue { i33, i1 } %89, 1
  %91 = extractvalue { i33, i1 } %89, 0
  %92 = icmp slt i33 %91, 0
  %93 = or i1 %90, %92
  br i1 %93, label %94, label %95, !prof !3

94:                                               ; preds = %85
  tail call void @llvm.trap() #10
  unreachable

95:                                               ; preds = %85
  %96 = trunc i33 %91 to i32
  store i32 %96, i32* %86, align 4
  br label %97

97:                                               ; preds = %95, %80, %71
  %98 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %72, i64 1
  %99 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %73, i64 1
  %100 = icmp eq %"class.blink::SegmentedSubstring"* %99, %69
  br i1 %100, label %101, label %71

101:                                              ; preds = %97
  %102 = load i32, i32* %20, align 8
  %103 = load i32, i32* %6, align 8
  %104 = load %"class.blink::SegmentedSubstring"*, %"class.blink::SegmentedSubstring"** %5, align 8
  br label %105

105:                                              ; preds = %101, %67
  %106 = phi %"class.blink::SegmentedSubstring"* [ %104, %101 ], [ %18, %67 ]
  %107 = phi i32 [ %103, %101 ], [ %19, %67 ]
  %108 = phi i32 [ %102, %101 ], [ %22, %67 ]
  %109 = zext i32 %108 to i64
  %110 = zext i32 %107 to i64
  %111 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %27, i64 %110
  %112 = icmp eq i32 %108, %107
  br i1 %112, label %146, label %113

113:                                              ; preds = %105
  %114 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %106, i64 %109
  %115 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %27, i64 %109
  br label %116

116:                                              ; preds = %113, %142
  %117 = phi %"class.blink::SegmentedSubstring"* [ %143, %142 ], [ %114, %113 ]
  %118 = phi %"class.blink::SegmentedSubstring"* [ %144, %142 ], [ %115, %113 ]
  %119 = bitcast %"class.blink::SegmentedSubstring"* %117 to i8*
  %120 = bitcast %"class.blink::SegmentedSubstring"* %118 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %119, i8* align 8 %120, i64 26, i1 false) #10
  %121 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %118, i64 0, i32 5, i32 0, i32 0
  %122 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %121, align 8
  %123 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %117, i64 0, i32 5, i32 0, i32 0
  store %"class.WTF::StringImpl"* %122, %"class.WTF::StringImpl"** %123, align 8
  %124 = icmp eq %"class.WTF::StringImpl"* %122, null
  br i1 %124, label %142, label %125

125:                                              ; preds = %116
  %126 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %122, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %127 = load atomic i32, i32* %126 monotonic, align 4
  %128 = and i32 %127, 2
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %130, label %142

130:                                              ; preds = %125
  %131 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %122, i64 0, i32 0
  %132 = load i32, i32* %131, align 4
  %133 = zext i32 %132 to i33
  %134 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %133, i33 1) #10
  %135 = extractvalue { i33, i1 } %134, 1
  %136 = extractvalue { i33, i1 } %134, 0
  %137 = icmp slt i33 %136, 0
  %138 = or i1 %135, %137
  br i1 %138, label %139, label %140, !prof !3

139:                                              ; preds = %130
  tail call void @llvm.trap() #10
  unreachable

140:                                              ; preds = %130
  %141 = trunc i33 %136 to i32
  store i32 %141, i32* %131, align 4
  br label %142

142:                                              ; preds = %140, %125, %116
  %143 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %117, i64 1
  %144 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %118, i64 1
  %145 = icmp eq %"class.blink::SegmentedSubstring"* %144, %111
  br i1 %145, label %146, label %116

146:                                              ; preds = %63, %142, %105, %29
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink18SegmentedSubstringEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 53634662
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #10
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 53634662) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.1, i64 0, i64 0), i8* %11, i8* %12) #10
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.2, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #10
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  %20 = mul i64 %0, 40
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #10
  ret i64 %21
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #7

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #1

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #1

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #1

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #1

declare void @_ZN3WTF13StringBuilder13CreateBuffer8Ej(%"class.WTF::StringBuilder"*, i32) local_unnamed_addr #1

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14AppendSlowCaseIRhEEvOT_(%"class.WTF::Vector.369"*, i8* dereferenceable(1)) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.369", %"class.WTF::Vector.369"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.369", %"class.WTF::Vector.369"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = icmp ugt i8* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds i8, i8* %7, i64 %10
  %12 = icmp ugt i8* %11, %1
  br i1 %12, label %15, label %13

13:                                               ; preds = %9, %2
  tail call void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.369"* %0, i32 %5) #10
  %14 = load i8*, i8** %6, align 8
  br label %21

15:                                               ; preds = %9
  %16 = ptrtoint i8* %1 to i64
  %17 = ptrtoint i8* %7 to i64
  %18 = sub i64 %16, %17
  tail call void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.369"* %0, i32 %5) #10
  %19 = load i8*, i8** %6, align 8
  %20 = getelementptr inbounds i8, i8* %19, i64 %18
  br label %21

21:                                               ; preds = %13, %15
  %22 = phi i8* [ %14, %13 ], [ %19, %15 ]
  %23 = phi i8* [ %1, %13 ], [ %20, %15 ]
  %24 = load i32, i32* %3, align 4
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i8, i8* %22, i64 %25
  %27 = load i8, i8* %23, align 1
  store i8 %27, i8* %26, align 1
  %28 = load i32, i32* %3, align 4
  %29 = add i32 %28, 1
  store i32 %29, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.369"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::Vector.369", %"class.WTF::Vector.369"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = shl i32 %7, 1
  %9 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #10
  %10 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %10, align 8
  %11 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = icmp ugt i32 %8, %7
  br i1 %12, label %13, label %14

13:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* null, i8** %10, align 8
  br label %23

14:                                               ; preds = %2
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %8) #10
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.3, i64 0, i64 0), i8* %15, i8* %16) #10
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* %18, i8** %10, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.4, i64 0, i64 0), i32 1715, %"class.logging::CheckOpResult"* nonnull %4) #10
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #10
  br label %23

23:                                               ; preds = %13, %14, %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #10
  %24 = icmp ugt i32 %8, 4
  %25 = select i1 %24, i32 %8, i32 4
  %26 = icmp ugt i32 %25, %1
  %27 = select i1 %26, i32 %25, i32 %1
  %28 = load i32, i32* %6, align 8
  %29 = icmp ult i32 %28, %27
  br i1 %29, label %30, label %50, !prof !4

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.WTF::Vector.369", %"class.WTF::Vector.369"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = icmp eq i8* %32, null
  br i1 %33, label %34, label %49

34:                                               ; preds = %30
  %35 = icmp ugt i32 %27, 16
  br i1 %35, label %36, label %43

36:                                               ; preds = %34
  %37 = zext i32 %27 to i64
  %38 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64 %37) #10
  %39 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %38, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv, i64 0, i64 0)) #10
  %40 = ptrtoint i8* %39 to i64
  %41 = bitcast %"class.WTF::Vector.369"* %0 to i64*
  store atomic i64 %40, i64* %41 monotonic, align 8
  %42 = trunc i64 %38 to i32
  br label %47

43:                                               ; preds = %34
  %44 = getelementptr inbounds %"class.WTF::Vector.369", %"class.WTF::Vector.369"* %0, i64 0, i32 0, i32 1, i64 0
  %45 = ptrtoint i8* %44 to i64
  %46 = bitcast %"class.WTF::Vector.369"* %0 to i64*
  store atomic i64 %45, i64* %46 monotonic, align 8
  br label %47

47:                                               ; preds = %43, %36
  %48 = phi i32 [ 16, %43 ], [ %42, %36 ]
  store i32 %48, i32* %6, align 8
  br label %50

49:                                               ; preds = %30
  call void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.369"* %0, i32 %27) #10
  br label %50

50:                                               ; preds = %23, %47, %49
  ret void
}

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.369"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp ult i32 %1, 17
  br i1 %3, label %4, label %26

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.369", %"class.WTF::Vector.369"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = icmp eq i8* %6, null
  %8 = getelementptr inbounds %"class.WTF::Vector.369", %"class.WTF::Vector.369"* %0, i64 0, i32 0, i32 1, i64 0
  %9 = icmp eq i8* %8, %6
  %10 = or i1 %7, %9
  br i1 %10, label %11, label %15

11:                                               ; preds = %4
  %12 = ptrtoint i8* %8 to i64
  %13 = bitcast %"class.WTF::Vector.369"* %0 to i64*
  store atomic i64 %12, i64* %13 monotonic, align 8
  %14 = getelementptr inbounds %"class.WTF::Vector.369", %"class.WTF::Vector.369"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 16, i32* %14, align 8
  br label %51

15:                                               ; preds = %4
  %16 = getelementptr inbounds %"class.WTF::Vector.369", %"class.WTF::Vector.369"* %0, i64 0, i32 0, i32 0, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.WTF::Vector.369", %"class.WTF::Vector.369"* %0, i64 0, i32 0
  %19 = ptrtoint i8* %8 to i64
  %20 = bitcast %"class.WTF::Vector.369"* %0 to i64*
  store atomic i64 %19, i64* %20 monotonic, align 8
  %21 = getelementptr inbounds %"class.WTF::Vector.369", %"class.WTF::Vector.369"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 16, i32* %21, align 8
  %22 = icmp eq i8* %8, null
  br i1 %22, label %25, label %23, !prof !3

23:                                               ; preds = %15
  %24 = zext i32 %17 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %8, i8* nonnull align 1 %6, i64 %24, i1 false) #10
  br label %25

25:                                               ; preds = %23, %15
  tail call void @_ZN3WTF12VectorBufferIhLj16ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh(%"class.WTF::VectorBuffer.370"* %18, i8* nonnull %6) #10
  br label %51

26:                                               ; preds = %2
  %27 = zext i32 %1 to i64
  %28 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64 %27) #10
  %29 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %28, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv, i64 0, i64 0)) #10
  %30 = ptrtoint i8* %29 to i64
  %31 = getelementptr inbounds %"class.WTF::Vector.369", %"class.WTF::Vector.369"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = icmp ne i8* %29, null
  %34 = icmp ne i8* %32, null
  %35 = and i1 %33, %34
  br i1 %35, label %36, label %41, !prof !4

36:                                               ; preds = %26
  %37 = getelementptr inbounds %"class.WTF::Vector.369", %"class.WTF::Vector.369"* %0, i64 0, i32 0, i32 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = zext i32 %38 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %29, i8* nonnull align 1 %32, i64 %39, i1 false) #10
  %40 = load i8*, i8** %31, align 8
  br label %41

41:                                               ; preds = %26, %36
  %42 = phi i8* [ %32, %26 ], [ %40, %36 ]
  %43 = getelementptr inbounds %"class.WTF::Vector.369", %"class.WTF::Vector.369"* %0, i64 0, i32 0, i32 1, i64 0
  %44 = icmp eq i8* %43, %42
  br i1 %44, label %47, label %45, !prof !4

45:                                               ; preds = %41
  %46 = getelementptr inbounds %"class.WTF::Vector.369", %"class.WTF::Vector.369"* %0, i64 0, i32 0
  tail call void @_ZN3WTF12VectorBufferIhLj16ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh(%"class.WTF::VectorBuffer.370"* %46, i8* %42) #10
  br label %47

47:                                               ; preds = %41, %45
  %48 = bitcast %"class.WTF::Vector.369"* %0 to i64*
  store atomic i64 %30, i64* %48 monotonic, align 8
  %49 = trunc i64 %28 to i32
  %50 = getelementptr inbounds %"class.WTF::Vector.369", %"class.WTF::Vector.369"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %49, i32* %50, align 8
  br label %51

51:                                               ; preds = %25, %47, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 2145386496
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #10
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 2145386496) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.1, i64 0, i64 0), i8* %11, i8* %12) #10
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.2, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #10
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  %20 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %0) #10
  ret i64 %20
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12VectorBufferIhLj16ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh(%"class.WTF::VectorBuffer.370"*, i8*) local_unnamed_addr #8 comdat align 2 {
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %1) #10
  ret void
}

declare void @_ZN3WTF13StringBuilder14CreateBuffer16Ej(%"class.WTF::StringBuilder"*, i32) local_unnamed_addr #1

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_(%"class.WTF::Vector.374"*, i16* dereferenceable(2)) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.374", %"class.WTF::Vector.374"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.374", %"class.WTF::Vector.374"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load i16*, i16** %6, align 8
  %8 = icmp ugt i16* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds i16, i16* %7, i64 %10
  %12 = icmp ugt i16* %11, %1
  br i1 %12, label %15, label %13

13:                                               ; preds = %9, %2
  tail call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.374"* %0, i32 %5) #10
  %14 = load i16*, i16** %6, align 8
  br label %22

15:                                               ; preds = %9
  %16 = ptrtoint i16* %1 to i64
  %17 = ptrtoint i16* %7 to i64
  %18 = sub i64 %16, %17
  %19 = ashr exact i64 %18, 1
  tail call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.374"* %0, i32 %5) #10
  %20 = load i16*, i16** %6, align 8
  %21 = getelementptr inbounds i16, i16* %20, i64 %19
  br label %22

22:                                               ; preds = %13, %15
  %23 = phi i16* [ %14, %13 ], [ %20, %15 ]
  %24 = phi i16* [ %1, %13 ], [ %21, %15 ]
  %25 = load i32, i32* %3, align 4
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds i16, i16* %23, i64 %26
  %28 = load i16, i16* %24, align 2
  store i16 %28, i16* %27, align 2
  %29 = load i32, i32* %3, align 4
  %30 = add i32 %29, 1
  store i32 %30, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.374"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::Vector.374", %"class.WTF::Vector.374"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = shl i32 %7, 1
  %9 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #10
  %10 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %10, align 8
  %11 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = icmp ugt i32 %8, %7
  br i1 %12, label %13, label %14

13:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* null, i8** %10, align 8
  br label %23

14:                                               ; preds = %2
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %8) #10
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.3, i64 0, i64 0), i8* %15, i8* %16) #10
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* %18, i8** %10, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.4, i64 0, i64 0), i32 1715, %"class.logging::CheckOpResult"* nonnull %4) #10
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #10
  br label %23

23:                                               ; preds = %13, %14, %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #10
  %24 = icmp ugt i32 %8, 4
  %25 = select i1 %24, i32 %8, i32 4
  %26 = icmp ugt i32 %25, %1
  %27 = select i1 %26, i32 %25, i32 %1
  %28 = load i32, i32* %6, align 8
  %29 = icmp ult i32 %28, %27
  br i1 %29, label %30, label %51, !prof !4

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.WTF::Vector.374", %"class.WTF::Vector.374"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load i16*, i16** %31, align 8
  %33 = icmp eq i16* %32, null
  br i1 %33, label %34, label %50

34:                                               ; preds = %30
  %35 = icmp ugt i32 %27, 8
  br i1 %35, label %36, label %44

36:                                               ; preds = %34
  %37 = zext i32 %27 to i64
  %38 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64 %37) #10
  %39 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %38, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv, i64 0, i64 0)) #10
  %40 = ptrtoint i8* %39 to i64
  %41 = bitcast %"class.WTF::Vector.374"* %0 to i64*
  store atomic i64 %40, i64* %41 monotonic, align 8
  %42 = lshr i64 %38, 1
  %43 = trunc i64 %42 to i32
  br label %48

44:                                               ; preds = %34
  %45 = getelementptr inbounds %"class.WTF::Vector.374", %"class.WTF::Vector.374"* %0, i64 0, i32 0, i32 1, i64 0
  %46 = ptrtoint i8* %45 to i64
  %47 = bitcast %"class.WTF::Vector.374"* %0 to i64*
  store atomic i64 %46, i64* %47 monotonic, align 8
  br label %48

48:                                               ; preds = %44, %36
  %49 = phi i32 [ 8, %44 ], [ %43, %36 ]
  store i32 %49, i32* %6, align 8
  br label %51

50:                                               ; preds = %30
  call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.374"* %0, i32 %27) #10
  br label %51

51:                                               ; preds = %23, %48, %50
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.374"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp ult i32 %1, 9
  br i1 %3, label %4, label %29

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.374", %"class.WTF::Vector.374"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load i16*, i16** %5, align 8
  %7 = icmp eq i16* %6, null
  %8 = getelementptr inbounds %"class.WTF::Vector.374", %"class.WTF::Vector.374"* %0, i64 0, i32 0, i32 1, i64 0
  %9 = bitcast i8* %8 to i16*
  %10 = icmp eq i16* %6, %9
  %11 = or i1 %10, %7
  br i1 %11, label %12, label %16

12:                                               ; preds = %4
  %13 = ptrtoint i8* %8 to i64
  %14 = bitcast %"class.WTF::Vector.374"* %0 to i64*
  store atomic i64 %13, i64* %14 monotonic, align 8
  %15 = getelementptr inbounds %"class.WTF::Vector.374", %"class.WTF::Vector.374"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 8, i32* %15, align 8
  br label %58

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.WTF::Vector.374", %"class.WTF::Vector.374"* %0, i64 0, i32 0, i32 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.WTF::Vector.374", %"class.WTF::Vector.374"* %0, i64 0, i32 0
  %20 = ptrtoint i8* %8 to i64
  %21 = bitcast %"class.WTF::Vector.374"* %0 to i64*
  store atomic i64 %20, i64* %21 monotonic, align 8
  %22 = getelementptr inbounds %"class.WTF::Vector.374", %"class.WTF::Vector.374"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 8, i32* %22, align 8
  %23 = icmp eq i8* %8, null
  br i1 %23, label %28, label %24, !prof !3

24:                                               ; preds = %16
  %25 = zext i32 %18 to i64
  %26 = bitcast i16* %6 to i8*
  %27 = shl nuw nsw i64 %25, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %8, i8* nonnull align 2 %26, i64 %27, i1 false) #10
  br label %28

28:                                               ; preds = %24, %16
  tail call void @_ZN3WTF12VectorBufferIDsLj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPDs(%"class.WTF::VectorBuffer.375"* %19, i16* nonnull %6) #10
  br label %58

29:                                               ; preds = %2
  %30 = zext i32 %1 to i64
  %31 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64 %30) #10
  %32 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %31, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv, i64 0, i64 0)) #10
  %33 = lshr i64 %31, 1
  %34 = ptrtoint i8* %32 to i64
  %35 = getelementptr inbounds %"class.WTF::Vector.374", %"class.WTF::Vector.374"* %0, i64 0, i32 0, i32 0, i32 0
  %36 = load i16*, i16** %35, align 8
  %37 = icmp ne i8* %32, null
  %38 = icmp ne i16* %36, null
  %39 = and i1 %37, %38
  br i1 %39, label %40, label %47, !prof !4

40:                                               ; preds = %29
  %41 = getelementptr inbounds %"class.WTF::Vector.374", %"class.WTF::Vector.374"* %0, i64 0, i32 0, i32 0, i32 2
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i64
  %44 = bitcast i16* %36 to i8*
  %45 = shl nuw nsw i64 %43, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %32, i8* nonnull align 2 %44, i64 %45, i1 false) #10
  %46 = load i16*, i16** %35, align 8
  br label %47

47:                                               ; preds = %29, %40
  %48 = phi i16* [ %36, %29 ], [ %46, %40 ]
  %49 = getelementptr inbounds %"class.WTF::Vector.374", %"class.WTF::Vector.374"* %0, i64 0, i32 0, i32 1, i64 0
  %50 = bitcast i8* %49 to i16*
  %51 = icmp eq i16* %48, %50
  br i1 %51, label %54, label %52, !prof !4

52:                                               ; preds = %47
  %53 = getelementptr inbounds %"class.WTF::Vector.374", %"class.WTF::Vector.374"* %0, i64 0, i32 0
  tail call void @_ZN3WTF12VectorBufferIDsLj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPDs(%"class.WTF::VectorBuffer.375"* %53, i16* %48) #10
  br label %54

54:                                               ; preds = %47, %52
  %55 = bitcast %"class.WTF::Vector.374"* %0 to i64*
  store atomic i64 %34, i64* %55 monotonic, align 8
  %56 = trunc i64 %33 to i32
  %57 = getelementptr inbounds %"class.WTF::Vector.374", %"class.WTF::Vector.374"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %56, i32* %57, align 8
  br label %58

58:                                               ; preds = %28, %54, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 1072693248
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #10
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 1072693248) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.1, i64 0, i64 0), i8* %11, i8* %12) #10
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.2, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #10
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  %20 = shl i64 %0, 1
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #10
  ret i64 %21
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12VectorBufferIDsLj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPDs(%"class.WTF::VectorBuffer.375"*, i16*) local_unnamed_addr #8 comdat align 2 {
  %3 = bitcast i16* %1 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %3) #10
  ret void
}

declare zeroext i16 @_ZN5blink15SegmentedString16AdvanceSubstringEv(%"class.blink::SegmentedString"*) local_unnamed_addr #1

declare void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"*) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink9HTMLTokenD2Ev(%"class.blink::HTMLToken"*) unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::HTMLToken", %"class.blink::HTMLToken"* %0, i64 0, i32 8, i32 0, i32 0, i32 0
  %3 = load %"class.blink::DoctypeData"*, %"class.blink::DoctypeData"** %2, align 8
  store %"class.blink::DoctypeData"* null, %"class.blink::DoctypeData"** %2, align 8
  %4 = icmp eq %"class.blink::DoctypeData"* %3, null
  br i1 %4, label %29, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::DoctypeData", %"class.blink::DoctypeData"* %3, i64 0, i32 4, i32 0, i32 0, i32 0
  %7 = load i16*, i16** %6, align 8
  %8 = icmp eq i16* %7, null
  %9 = bitcast i16* %7 to i8*
  br i1 %8, label %16, label %10, !prof !4

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.blink::DoctypeData", %"class.blink::DoctypeData"* %3, i64 0, i32 4, i32 0, i32 0, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %15, label %14, !prof !3

14:                                               ; preds = %10
  store i32 0, i32* %11, align 4
  br label %15

15:                                               ; preds = %14, %10
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %9) #10
  store i16* null, i16** %6, align 8
  br label %16

16:                                               ; preds = %15, %5
  %17 = getelementptr inbounds %"class.blink::DoctypeData", %"class.blink::DoctypeData"* %3, i64 0, i32 3, i32 0, i32 0, i32 0
  %18 = load i16*, i16** %17, align 8
  %19 = icmp eq i16* %18, null
  %20 = bitcast i16* %18 to i8*
  br i1 %19, label %27, label %21, !prof !4

21:                                               ; preds = %16
  %22 = getelementptr inbounds %"class.blink::DoctypeData", %"class.blink::DoctypeData"* %3, i64 0, i32 3, i32 0, i32 0, i32 2
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %26, label %25, !prof !3

25:                                               ; preds = %21
  store i32 0, i32* %22, align 4
  br label %26

26:                                               ; preds = %25, %21
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %20) #10
  br label %27

27:                                               ; preds = %26, %16
  %28 = getelementptr inbounds %"class.blink::DoctypeData", %"class.blink::DoctypeData"* %3, i64 0, i32 0
  tail call void @free(i8* %28) #10
  br label %29

29:                                               ; preds = %1, %27
  %30 = getelementptr inbounds %"class.blink::HTMLToken", %"class.blink::HTMLToken"* %0, i64 0, i32 6
  %31 = getelementptr inbounds %"class.blink::HTMLToken", %"class.blink::HTMLToken"* %0, i64 0, i32 6, i32 0, i32 0, i32 2
  %32 = load i32, i32* %31, align 4
  %33 = icmp eq i32 %32, 0
  %34 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %30, i64 0, i32 0, i32 0, i32 0
  br i1 %33, label %58, label %35, !prof !3

35:                                               ; preds = %29
  %36 = load %"class.blink::HTMLToken::Attribute"*, %"class.blink::HTMLToken::Attribute"** %34, align 8
  %37 = zext i32 %32 to i64
  %38 = getelementptr inbounds %"class.blink::HTMLToken::Attribute", %"class.blink::HTMLToken::Attribute"* %36, i64 %37
  br label %39

39:                                               ; preds = %54, %35
  %40 = phi %"class.blink::HTMLToken::Attribute"* [ %55, %54 ], [ %36, %35 ]
  %41 = getelementptr inbounds %"class.blink::HTMLToken::Attribute", %"class.blink::HTMLToken::Attribute"* %40, i64 0, i32 1, i32 0
  %42 = load i16*, i16** %41, align 8
  %43 = getelementptr inbounds %"class.blink::HTMLToken::Attribute", %"class.blink::HTMLToken::Attribute"* %40, i64 0, i32 1, i32 3, i64 0
  %44 = icmp eq i16* %42, %43
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  %46 = bitcast i16* %42 to i8*
  tail call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* %46) #10
  br label %47

47:                                               ; preds = %45, %39
  %48 = getelementptr inbounds %"class.blink::HTMLToken::Attribute", %"class.blink::HTMLToken::Attribute"* %40, i64 0, i32 0, i32 0
  %49 = load i16*, i16** %48, align 8
  %50 = getelementptr inbounds %"class.blink::HTMLToken::Attribute", %"class.blink::HTMLToken::Attribute"* %40, i64 0, i32 0, i32 3, i64 0
  %51 = icmp eq i16* %49, %50
  br i1 %51, label %54, label %52

52:                                               ; preds = %47
  %53 = bitcast i16* %49 to i8*
  tail call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* %53) #10
  br label %54

54:                                               ; preds = %52, %47
  %55 = getelementptr inbounds %"class.blink::HTMLToken::Attribute", %"class.blink::HTMLToken::Attribute"* %40, i64 1
  %56 = icmp eq %"class.blink::HTMLToken::Attribute"* %55, %38
  br i1 %56, label %57, label %39

57:                                               ; preds = %54
  store i32 0, i32* %31, align 4
  br label %58

58:                                               ; preds = %57, %29
  %59 = load %"class.blink::HTMLToken::Attribute"*, %"class.blink::HTMLToken::Attribute"** %34, align 8
  %60 = getelementptr inbounds %"class.blink::HTMLToken", %"class.blink::HTMLToken"* %0, i64 0, i32 6, i32 0, i32 1, i64 0
  %61 = bitcast i8* %60 to %"class.blink::HTMLToken::Attribute"*
  %62 = icmp eq %"class.blink::HTMLToken::Attribute"* %59, %61
  br i1 %62, label %65, label %63, !prof !4

63:                                               ; preds = %58
  %64 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %30, i64 0, i32 0
  tail call void @_ZN3WTF12VectorBufferIN5blink9HTMLToken9AttributeELj10ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS3_(%"class.WTF::VectorBuffer.5"* %64, %"class.blink::HTMLToken::Attribute"* %59) #10
  br label %65

65:                                               ; preds = %58, %63
  store %"class.blink::HTMLToken::Attribute"* null, %"class.blink::HTMLToken::Attribute"** %34, align 8
  %66 = getelementptr inbounds %"class.blink::HTMLToken", %"class.blink::HTMLToken"* %0, i64 0, i32 3, i32 0
  %67 = load i16*, i16** %66, align 8
  %68 = getelementptr inbounds %"class.blink::HTMLToken", %"class.blink::HTMLToken"* %0, i64 0, i32 3, i32 3, i64 0
  %69 = icmp eq i16* %67, %68
  br i1 %69, label %72, label %70

70:                                               ; preds = %65
  %71 = bitcast i16* %67 to i8*
  tail call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* %71) #10
  br label %72

72:                                               ; preds = %65, %70
  ret void
}

; Function Attrs: nounwind
declare void @_ZN5blink25DecodedDataDocumentParserD2Ev(%"class.blink::DecodedDataDocumentParser"*) unnamed_addr #7

; Function Attrs: nounwind
declare void @_ZN5blink13HTMLTokenizerD1Ev(%"class.blink::HTMLTokenizer"*) unnamed_addr #7

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #7

declare void @_ZN3WTF10Partitions10BufferFreeEPv(i8*) local_unnamed_addr #1

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12VectorBufferIN5blink9HTMLToken9AttributeELj10ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS3_(%"class.WTF::VectorBuffer.5"*, %"class.blink::HTMLToken::Attribute"*) local_unnamed_addr #8 comdat align 2 {
  %3 = bitcast %"class.blink::HTMLToken::Attribute"* %1 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %3) #10
  ret void
}

declare void @_ZN5blink13HTMLTokenizerC1ERKNS_17HTMLParserOptionsE(%"class.blink::HTMLTokenizer"*, %"class.blink::HTMLParserOptions"* dereferenceable(2)) unnamed_addr #1

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #9

declare %"class.WTF::StringImpl"* @_ZN5blink27AttemptStaticStringCreationEPKDsjNS_14CharacterWidthE(i16*, i32, i32) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{!"branch_weights", i32 2000, i32 1}
