; ModuleID = '../../third_party/blink/renderer/platform/wtf/text/case_map.cc'
source_filename = "../../third_party/blink/renderer/platform/wtf/text/case_map.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::CaseMap::Locale" = type { i8* }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.WTF::TextOffsetMap" = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"struct.WTF::TextOffsetMap::Entry"*, i32, i32 }
%"struct.WTF::TextOffsetMap::Entry" = type { i32, i32 }
%"class.icu_69::Edits" = type <{ i16*, i32, i32, i32, i32, i32, [100 x i16], [4 x i8] }>
%"class.WTF::CaseMap" = type { i8* }

@.str = private unnamed_addr constant [3 x i8] c"tr\00", align 1
@_ZN3WTF7CaseMap6Locale16turkic_or_azeri_E = hidden local_unnamed_addr global i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), align 8
@.str.1 = private unnamed_addr constant [3 x i8] c"el\00", align 1
@_ZN3WTF7CaseMap6Locale6greek_E = hidden local_unnamed_addr global i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), align 8
@.str.2 = private unnamed_addr constant [3 x i8] c"lt\00", align 1
@_ZN3WTF7CaseMap6Locale11lithuanian_E = hidden local_unnamed_addr global i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), align 8
@.str.3 = private unnamed_addr constant [3 x i8] c"az\00", align 1
@.str.4 = private unnamed_addr constant [81 x i8] c"source->length() <= static_cast<wtf_size_t>(std::numeric_limits<int32_t>::max())\00", align 1
@.str.5 = private unnamed_addr constant [63 x i8] c"../../third_party/blink/renderer/platform/wtf/text/case_map.cc\00", align 1
@.str.6 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.7 = private unnamed_addr constant [20 x i8] c"lang.length() >= 2u\00", align 1
@.str.8 = private unnamed_addr constant [20 x i8] c"lang.length() <= 3u\00", align 1
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@_ZN3WTF19kASCIICaseFoldTableE = external local_unnamed_addr constant [256 x i8], align 16

@_ZN3WTF7CaseMap6LocaleC1ERKNS_12AtomicStringE = hidden unnamed_addr alias void (%"class.WTF::CaseMap::Locale"*, %"class.WTF::AtomicString"*), void (%"class.WTF::CaseMap::Locale"*, %"class.WTF::AtomicString"*)* @_ZN3WTF7CaseMap6LocaleC2ERKNS_12AtomicStringE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3WTF7CaseMap6LocaleC2ERKNS_12AtomicStringE(%"class.WTF::CaseMap::Locale"* nocapture, %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8)) unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::StringView", align 8
  %4 = alloca %"class.WTF::StringView", align 8
  %5 = alloca %"class.WTF::StringView", align 8
  %6 = alloca %"class.WTF::StringView", align 8
  %7 = bitcast %"class.WTF::StringView"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #7
  %8 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %9 = bitcast %"class.WTF::StringView"* %3 to i64*
  store i64 %8, i64* %9, align 8
  %10 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 1
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i8** %10, align 8
  %11 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 2
  store i32 2, i32* %11, align 8
  %12 = call fastcc zeroext i1 @_ZN3WTF12_GLOBAL__N_119LocaleIdMatchesLangERKNS_12AtomicStringERKNS_10StringViewE(%"class.WTF::AtomicString"* dereferenceable(8) %1, %"class.WTF::StringView"* nonnull dereferenceable(24) %3)
  %13 = bitcast %"class.WTF::StringView"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #7
  br i1 %12, label %20, label %14, !prof !2

14:                                               ; preds = %2
  %15 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %16 = bitcast %"class.WTF::StringView"* %4 to i64*
  store i64 %15, i64* %16, align 8
  %17 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 1
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i8** %17, align 8
  %18 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 2
  store i32 2, i32* %18, align 8
  %19 = call fastcc zeroext i1 @_ZN3WTF12_GLOBAL__N_119LocaleIdMatchesLangERKNS_12AtomicStringERKNS_10StringViewE(%"class.WTF::AtomicString"* dereferenceable(8) %1, %"class.WTF::StringView"* nonnull dereferenceable(24) %4)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #7
  br i1 %19, label %21, label %24, !prof !2

20:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #7
  br label %21

21:                                               ; preds = %20, %14
  %22 = load i64, i64* bitcast (i8** @_ZN3WTF7CaseMap6Locale16turkic_or_azeri_E to i64*), align 8
  %23 = bitcast %"class.WTF::CaseMap::Locale"* %0 to i64*
  store i64 %22, i64* %23, align 8
  br label %46

24:                                               ; preds = %14
  %25 = bitcast %"class.WTF::StringView"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %25) #7
  %26 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %27 = bitcast %"class.WTF::StringView"* %5 to i64*
  store i64 %26, i64* %27, align 8
  %28 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 1
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i8** %28, align 8
  %29 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 2
  store i32 2, i32* %29, align 8
  %30 = call fastcc zeroext i1 @_ZN3WTF12_GLOBAL__N_119LocaleIdMatchesLangERKNS_12AtomicStringERKNS_10StringViewE(%"class.WTF::AtomicString"* dereferenceable(8) %1, %"class.WTF::StringView"* nonnull dereferenceable(24) %5)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %25) #7
  br i1 %30, label %31, label %34, !prof !2

31:                                               ; preds = %24
  %32 = load i64, i64* bitcast (i8** @_ZN3WTF7CaseMap6Locale6greek_E to i64*), align 8
  %33 = bitcast %"class.WTF::CaseMap::Locale"* %0 to i64*
  store i64 %32, i64* %33, align 8
  br label %46

34:                                               ; preds = %24
  %35 = bitcast %"class.WTF::StringView"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %35) #7
  %36 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %37 = bitcast %"class.WTF::StringView"* %6 to i64*
  store i64 %36, i64* %37, align 8
  %38 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 1
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i8** %38, align 8
  %39 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 2
  store i32 2, i32* %39, align 8
  %40 = call fastcc zeroext i1 @_ZN3WTF12_GLOBAL__N_119LocaleIdMatchesLangERKNS_12AtomicStringERKNS_10StringViewE(%"class.WTF::AtomicString"* dereferenceable(8) %1, %"class.WTF::StringView"* nonnull dereferenceable(24) %6)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %35) #7
  br i1 %40, label %41, label %44, !prof !2

41:                                               ; preds = %34
  %42 = load i64, i64* bitcast (i8** @_ZN3WTF7CaseMap6Locale11lithuanian_E to i64*), align 8
  %43 = bitcast %"class.WTF::CaseMap::Locale"* %0 to i64*
  store i64 %42, i64* %43, align 8
  br label %46

44:                                               ; preds = %34
  %45 = getelementptr inbounds %"class.WTF::CaseMap::Locale", %"class.WTF::CaseMap::Locale"* %0, i64 0, i32 0
  store i8* null, i8** %45, align 8
  br label %46

46:                                               ; preds = %31, %44, %41, %21
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN3WTF12_GLOBAL__N_119LocaleIdMatchesLangERKNS_12AtomicStringERKNS_10StringViewE(%"class.WTF::AtomicString"* nocapture readonly dereferenceable(8), %"class.WTF::StringView"* dereferenceable(24)) unnamed_addr #1 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #7
  %10 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %10, align 8
  %11 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %12 = load i32, i32* %11, align 8
  %13 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13)
  %14 = icmp ult i32 %12, 2
  br i1 %14, label %16, label %15

15:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13)
  store i8* null, i8** %10, align 8
  br label %25

16:                                               ; preds = %2
  %17 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %12) #7
  %18 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 2) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7, i64 0, i64 0), i8* %17, i8* %18) #7
  %19 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %20 = load i8*, i8** %19, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13)
  store i8* %20, i8** %10, align 8
  %21 = icmp eq i8* %20, null
  br i1 %21, label %25, label %22

22:                                               ; preds = %16
  %23 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.5, i64 0, i64 0), i32 23, %"class.logging::CheckOpResult"* nonnull %5) #7
  %24 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #7
  br label %25

25:                                               ; preds = %15, %16, %22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #7
  %26 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26) #7
  %27 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %27, align 8
  %28 = load i32, i32* %11, align 8
  %29 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29)
  %30 = icmp ugt i32 %28, 3
  br i1 %30, label %32, label %31

31:                                               ; preds = %25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29)
  store i8* null, i8** %27, align 8
  br label %41

32:                                               ; preds = %25
  %33 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %28) #7
  %34 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 3) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %4, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.8, i64 0, i64 0), i8* %33, i8* %34) #7
  %35 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  %36 = load i8*, i8** %35, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29)
  store i8* %36, i8** %27, align 8
  %37 = icmp eq i8* %36, null
  br i1 %37, label %41, label %38

38:                                               ; preds = %32
  %39 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.5, i64 0, i64 0), i32 24, %"class.logging::CheckOpResult"* nonnull %7) #7
  %40 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #7
  br label %41

41:                                               ; preds = %31, %32, %38
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26) #7
  %42 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %0, i64 0, i32 0, i32 0, i32 0
  %43 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %42, align 8
  %44 = icmp eq %"class.WTF::StringImpl"* %43, null
  br i1 %44, label %79, label %45

45:                                               ; preds = %41
  %46 = call zeroext i1 @_ZNK3WTF10StringImpl22StartsWithIgnoringCaseERKNS_10StringViewE(%"class.WTF::StringImpl"* nonnull %43, %"class.WTF::StringView"* dereferenceable(24) %1) #7
  br i1 %46, label %47, label %79

47:                                               ; preds = %45
  %48 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %42, align 8
  %49 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %48, i64 0, i32 1
  %50 = load i32, i32* %49, align 4
  %51 = load i32, i32* %11, align 8
  %52 = icmp eq i32 %50, %51
  br i1 %52, label %79, label %53

53:                                               ; preds = %47
  %54 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %48, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %55 = load atomic i32, i32* %54 monotonic, align 4
  %56 = and i32 %55, 1
  %57 = icmp eq i32 %56, 0
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %48, i64 1
  br i1 %57, label %65, label %59

59:                                               ; preds = %53
  %60 = bitcast %"class.WTF::StringImpl"* %58 to i8*
  %61 = zext i32 %51 to i64
  %62 = getelementptr inbounds i8, i8* %60, i64 %61
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i16
  br label %70

65:                                               ; preds = %53
  %66 = bitcast %"class.WTF::StringImpl"* %58 to i16*
  %67 = zext i32 %51 to i64
  %68 = getelementptr inbounds i16, i16* %66, i64 %67
  %69 = load i16, i16* %68, align 2
  br label %70

70:                                               ; preds = %59, %65
  %71 = phi i16 [ %64, %59 ], [ %69, %65 ]
  %72 = add i16 %71, -45
  %73 = icmp ult i16 %72, 51
  br i1 %73, label %74, label %79

74:                                               ; preds = %70
  %75 = zext i16 %72 to i51
  %76 = lshr i51 -1125899906318335, %75
  %77 = and i51 %76, 1
  %78 = icmp ne i51 %77, 0
  ret i1 %78

79:                                               ; preds = %70, %47, %45, %41
  %80 = phi i1 [ false, %41 ], [ false, %45 ], [ true, %47 ], [ false, %70 ]
  ret i1 %80
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN3WTF7CaseMap23TryFastToLowerInvariantEPNS_10StringImplE(%"class.WTF::StringImpl"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca i8*, align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca i16*, align 8
  %7 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = and i32 %8, 1
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %89, label %11

11:                                               ; preds = %1
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %35, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %17 = bitcast %"class.WTF::StringImpl"* %16 to i8*
  %18 = zext i32 %13 to i64
  br label %19

19:                                               ; preds = %19, %15
  %20 = phi i64 [ %30, %19 ], [ 0, %15 ]
  %21 = phi i32 [ %29, %19 ], [ %13, %15 ]
  %22 = getelementptr inbounds i8, i8* %17, i64 %20
  %23 = load i8, i8* %22, align 1
  %24 = add i8 %23, -65
  %25 = icmp ult i8 %24, 26
  %26 = icmp slt i8 %23, 0
  %27 = or i1 %26, %25
  %28 = trunc i64 %20 to i32
  %29 = select i1 %27, i32 %28, i32 %21, !prof !2
  %30 = add nuw nsw i64 %20, 1
  %31 = or i1 %26, %25
  %32 = xor i1 %31, true
  %33 = icmp ult i64 %30, %18
  %34 = and i1 %33, %32
  br i1 %34, label %19, label %35

35:                                               ; preds = %19, %11
  %36 = phi i32 [ 0, %11 ], [ %29, %19 ]
  %37 = icmp eq i32 %36, %13
  br i1 %37, label %38, label %57

38:                                               ; preds = %35
  %39 = ptrtoint %"class.WTF::StringImpl"* %0 to i64
  %40 = icmp eq %"class.WTF::StringImpl"* %0, null
  br i1 %40, label %258, label %41

41:                                               ; preds = %38
  %42 = load atomic i32, i32* %7 monotonic, align 4
  %43 = and i32 %42, 2
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %258

45:                                               ; preds = %41
  %46 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 0
  %47 = load i32, i32* %46, align 4
  %48 = zext i32 %47 to i33
  %49 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %48, i33 1) #7
  %50 = extractvalue { i33, i1 } %49, 1
  %51 = extractvalue { i33, i1 } %49, 0
  %52 = icmp slt i33 %51, 0
  %53 = or i1 %50, %52
  br i1 %53, label %54, label %55, !prof !2

54:                                               ; preds = %45
  tail call void @llvm.trap() #7
  unreachable

55:                                               ; preds = %45
  %56 = trunc i33 %51 to i32
  store i32 %56, i32* %46, align 4
  br label %258

57:                                               ; preds = %35
  %58 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %58) #7
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %3, align 8
  %59 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32 %13, i8** nonnull dereferenceable(8) %3) #7
  %60 = ptrtoint %"class.WTF::StringImpl"* %59 to i64
  %61 = load i8*, i8** %3, align 8
  %62 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %63 = bitcast %"class.WTF::StringImpl"* %62 to i8*
  %64 = zext i32 %36 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %61, i8* align 1 %63, i64 %64, i1 false)
  %65 = load i32, i32* %12, align 4
  %66 = icmp ult i32 %36, %65
  br i1 %66, label %68, label %67

67:                                               ; preds = %81, %57
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %58) #7
  br label %258

68:                                               ; preds = %57, %81
  %69 = phi i64 [ %85, %81 ], [ %64, %57 ]
  %70 = getelementptr inbounds i8, i8* %63, i64 %69
  %71 = load i8, i8* %70, align 1
  %72 = icmp slt i8 %71, 0
  br i1 %72, label %73, label %77, !prof !2

73:                                               ; preds = %68
  %74 = zext i8 %71 to i32
  %75 = call i32 @u_tolower_69(i32 %74) #7
  %76 = trunc i32 %75 to i8
  br label %81

77:                                               ; preds = %68
  %78 = zext i8 %71 to i64
  %79 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %78
  %80 = load i8, i8* %79, align 1
  br label %81

81:                                               ; preds = %77, %73
  %82 = phi i8 [ %76, %73 ], [ %80, %77 ]
  %83 = load i8*, i8** %3, align 8
  %84 = getelementptr inbounds i8, i8* %83, i64 %69
  store i8 %82, i8* %84, align 1
  %85 = add nuw nsw i64 %69, 1
  %86 = load i32, i32* %12, align 4
  %87 = zext i32 %86 to i64
  %88 = icmp ult i64 %85, %87
  br i1 %88, label %68, label %67

89:                                               ; preds = %1
  %90 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %91 = bitcast %"class.WTF::StringImpl"* %90 to i16*
  %92 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %93 = load i32, i32* %92, align 4
  %94 = zext i32 %93 to i64
  %95 = getelementptr inbounds i16, i16* %91, i64 %94
  %96 = icmp eq i16* %95, %91
  br i1 %96, label %133, label %97

97:                                               ; preds = %89
  %98 = shl nuw nsw i64 %94, 1
  %99 = add nsw i64 %98, -2
  %100 = lshr exact i64 %99, 1
  %101 = add nuw i64 %100, 1
  %102 = and i64 %101, 3
  %103 = icmp ult i64 %99, 6
  br i1 %103, label %106, label %104

104:                                              ; preds = %97
  %105 = sub i64 %101, %102
  br label %137

106:                                              ; preds = %137, %97
  %107 = phi i8 [ undef, %97 ], [ %166, %137 ]
  %108 = phi i32 [ undef, %97 ], [ %168, %137 ]
  %109 = phi i16* [ %91, %97 ], [ %169, %137 ]
  %110 = phi i32 [ 0, %97 ], [ %168, %137 ]
  %111 = phi i8 [ 1, %97 ], [ %166, %137 ]
  %112 = icmp eq i64 %102, 0
  br i1 %112, label %127, label %113

113:                                              ; preds = %106, %113
  %114 = phi i16* [ %124, %113 ], [ %109, %106 ]
  %115 = phi i32 [ %123, %113 ], [ %110, %106 ]
  %116 = phi i8 [ %121, %113 ], [ %111, %106 ]
  %117 = phi i64 [ %125, %113 ], [ %102, %106 ]
  %118 = load i16, i16* %114, align 2
  %119 = add i16 %118, -65
  %120 = icmp ult i16 %119, 26
  %121 = select i1 %120, i8 0, i8 %116, !prof !2
  %122 = zext i16 %118 to i32
  %123 = or i32 %115, %122
  %124 = getelementptr inbounds i16, i16* %114, i64 1
  %125 = add i64 %117, -1
  %126 = icmp eq i64 %125, 0
  br i1 %126, label %127, label %113, !llvm.loop !3

127:                                              ; preds = %113, %106
  %128 = phi i8 [ %107, %106 ], [ %121, %113 ]
  %129 = phi i32 [ %108, %106 ], [ %123, %113 ]
  %130 = and i8 %128, 1
  %131 = icmp eq i8 %130, 0
  %132 = icmp ugt i32 %129, 127
  br label %133

133:                                              ; preds = %127, %89
  %134 = phi i1 [ false, %89 ], [ %131, %127 ]
  %135 = phi i1 [ false, %89 ], [ %132, %127 ]
  %136 = or i1 %134, %135
  br i1 %136, label %191, label %172

137:                                              ; preds = %137, %104
  %138 = phi i16* [ %91, %104 ], [ %169, %137 ]
  %139 = phi i32 [ 0, %104 ], [ %168, %137 ]
  %140 = phi i8 [ 1, %104 ], [ %166, %137 ]
  %141 = phi i64 [ %105, %104 ], [ %170, %137 ]
  %142 = load i16, i16* %138, align 2
  %143 = add i16 %142, -65
  %144 = icmp ult i16 %143, 26
  %145 = zext i16 %142 to i32
  %146 = or i32 %139, %145
  %147 = getelementptr inbounds i16, i16* %138, i64 1
  %148 = load i16, i16* %147, align 2
  %149 = add i16 %148, -65
  %150 = icmp ult i16 %149, 26
  %151 = or i1 %150, %144
  %152 = zext i16 %148 to i32
  %153 = or i32 %146, %152
  %154 = getelementptr inbounds i16, i16* %138, i64 2
  %155 = load i16, i16* %154, align 2
  %156 = add i16 %155, -65
  %157 = icmp ult i16 %156, 26
  %158 = or i1 %157, %151
  %159 = zext i16 %155 to i32
  %160 = or i32 %153, %159
  %161 = getelementptr inbounds i16, i16* %138, i64 3
  %162 = load i16, i16* %161, align 2
  %163 = add i16 %162, -65
  %164 = icmp ult i16 %163, 26
  %165 = or i1 %164, %158
  %166 = select i1 %165, i8 0, i8 %140, !prof !2
  %167 = zext i16 %162 to i32
  %168 = or i32 %160, %167
  %169 = getelementptr inbounds i16, i16* %138, i64 4
  %170 = add i64 %141, -4
  %171 = icmp eq i64 %170, 0
  br i1 %171, label %106, label %137

172:                                              ; preds = %133
  %173 = ptrtoint %"class.WTF::StringImpl"* %0 to i64
  %174 = icmp eq %"class.WTF::StringImpl"* %0, null
  br i1 %174, label %258, label %175

175:                                              ; preds = %172
  %176 = load atomic i32, i32* %7 monotonic, align 4
  %177 = and i32 %176, 2
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %179, label %258

179:                                              ; preds = %175
  %180 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 0
  %181 = load i32, i32* %180, align 4
  %182 = zext i32 %181 to i33
  %183 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %182, i33 1) #7
  %184 = extractvalue { i33, i1 } %183, 1
  %185 = extractvalue { i33, i1 } %183, 0
  %186 = icmp slt i33 %185, 0
  %187 = or i1 %184, %186
  br i1 %187, label %188, label %189, !prof !2

188:                                              ; preds = %179
  tail call void @llvm.trap() #7
  unreachable

189:                                              ; preds = %179
  %190 = trunc i33 %185 to i32
  store i32 %190, i32* %180, align 4
  br label %258

191:                                              ; preds = %133
  %192 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %192) #7
  %193 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %193, align 8
  %194 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %194)
  %195 = icmp slt i32 %93, 0
  br i1 %195, label %197, label %196

196:                                              ; preds = %191
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %194)
  store i8* null, i8** %193, align 8
  br label %206

197:                                              ; preds = %191
  %198 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %93) #7
  %199 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 2147483647) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0), i8* %198, i8* %199) #7
  %200 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %201 = load i8*, i8** %200, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %194)
  store i8* %201, i8** %193, align 8
  %202 = icmp eq i8* %201, null
  br i1 %202, label %206, label %203

203:                                              ; preds = %197
  %204 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %204) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.5, i64 0, i64 0), i32 169, %"class.logging::CheckOpResult"* nonnull %4) #7
  %205 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %204) #7
  br label %206

206:                                              ; preds = %196, %197, %203
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %192) #7
  %207 = load i32, i32* %92, align 4
  br i1 %135, label %258, label %208

208:                                              ; preds = %206
  %209 = bitcast i16** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %209) #7
  store i16* inttoptr (i64 -6148914691236517206 to i16*), i16** %6, align 8
  %210 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32 %207, i16** nonnull dereferenceable(8) %6) #7
  %211 = ptrtoint %"class.WTF::StringImpl"* %210 to i64
  %212 = icmp sgt i32 %207, 0
  br i1 %212, label %213, label %257

213:                                              ; preds = %208
  %214 = zext i32 %207 to i64
  %215 = and i64 %214, 1
  %216 = icmp eq i32 %207, 1
  br i1 %216, label %244, label %217

217:                                              ; preds = %213
  %218 = sub nsw i64 %214, %215
  br label %219

219:                                              ; preds = %219, %217
  %220 = phi i64 [ 0, %217 ], [ %241, %219 ]
  %221 = phi i64 [ %218, %217 ], [ %242, %219 ]
  %222 = getelementptr inbounds i16, i16* %91, i64 %220
  %223 = load i16, i16* %222, align 2
  %224 = add i16 %223, -65
  %225 = icmp ult i16 %224, 26
  %226 = zext i1 %225 to i16
  %227 = shl nuw nsw i16 %226, 5
  %228 = or i16 %227, %223
  %229 = load i16*, i16** %6, align 8
  %230 = getelementptr inbounds i16, i16* %229, i64 %220
  store i16 %228, i16* %230, align 2
  %231 = or i64 %220, 1
  %232 = getelementptr inbounds i16, i16* %91, i64 %231
  %233 = load i16, i16* %232, align 2
  %234 = add i16 %233, -65
  %235 = icmp ult i16 %234, 26
  %236 = zext i1 %235 to i16
  %237 = shl nuw nsw i16 %236, 5
  %238 = or i16 %237, %233
  %239 = load i16*, i16** %6, align 8
  %240 = getelementptr inbounds i16, i16* %239, i64 %231
  store i16 %238, i16* %240, align 2
  %241 = add nuw nsw i64 %220, 2
  %242 = add i64 %221, -2
  %243 = icmp eq i64 %242, 0
  br i1 %243, label %244, label %219

244:                                              ; preds = %219, %213
  %245 = phi i64 [ 0, %213 ], [ %241, %219 ]
  %246 = icmp eq i64 %215, 0
  br i1 %246, label %257, label %247

247:                                              ; preds = %244
  %248 = getelementptr inbounds i16, i16* %91, i64 %245
  %249 = load i16, i16* %248, align 2
  %250 = add i16 %249, -65
  %251 = icmp ult i16 %250, 26
  %252 = zext i1 %251 to i16
  %253 = shl nuw nsw i16 %252, 5
  %254 = or i16 %253, %249
  %255 = load i16*, i16** %6, align 8
  %256 = getelementptr inbounds i16, i16* %255, i64 %245
  store i16 %254, i16* %256, align 2
  br label %257

257:                                              ; preds = %247, %244, %208
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %209) #7
  br label %258

258:                                              ; preds = %206, %189, %175, %172, %55, %41, %38, %257, %67
  %259 = phi i64 [ %60, %67 ], [ %211, %257 ], [ %39, %38 ], [ %39, %41 ], [ %39, %55 ], [ %173, %172 ], [ %173, %175 ], [ %173, %189 ], [ 0, %206 ]
  %260 = inttoptr i64 %259 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %260
}

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32, i8** dereferenceable(8)) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #3

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32, i16** dereferenceable(8)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN3WTF7CaseMap20FastToLowerInvariantEPNS_10StringImplE(%"class.WTF::StringImpl"*) local_unnamed_addr #0 align 2 {
  %2 = tail call %"class.WTF::StringImpl"* @_ZN3WTF7CaseMap23TryFastToLowerInvariantEPNS_10StringImplE(%"class.WTF::StringImpl"* %0)
  %3 = icmp eq %"class.WTF::StringImpl"* %2, null
  br i1 %3, label %4, label %6

4:                                                ; preds = %1
  %5 = tail call fastcc %"class.WTF::StringImpl"* @_ZN3WTF12_GLOBAL__N_111CaseConvertENS0_11CaseMapTypeEPNS_10StringImplEPKcPNS_13TextOffsetMapE(i32 0, %"class.WTF::StringImpl"* %0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.6, i64 0, i64 0), %"class.WTF::TextOffsetMap"* null)
  br label %6

6:                                                ; preds = %1, %4
  %7 = phi %"class.WTF::StringImpl"* [ %2, %1 ], [ %5, %4 ]
  ret %"class.WTF::StringImpl"* %7
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc %"class.WTF::StringImpl"* @_ZN3WTF12_GLOBAL__N_111CaseConvertENS0_11CaseMapTypeEPNS_10StringImplEPKcPNS_13TextOffsetMapE(i32, %"class.WTF::StringImpl"*, i8*, %"class.WTF::TextOffsetMap"*) unnamed_addr #0 {
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckOpResult", align 8
  %7 = alloca %"class.logging::CheckError", align 8
  %8 = alloca i16*, align 8
  %9 = alloca i32, align 4
  %10 = alloca %"class.icu_69::Edits", align 8
  %11 = bitcast %"class.logging::CheckOpResult"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #7
  %12 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %6, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %12, align 8
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15)
  %16 = icmp slt i32 %14, 0
  br i1 %16, label %18, label %17

17:                                               ; preds = %4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15)
  store i8* null, i8** %12, align 8
  br label %27

18:                                               ; preds = %4
  %19 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %14) #7
  %20 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 2147483647) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %5, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0), i8* %19, i8* %20) #7
  %21 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  %22 = load i8*, i8** %21, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15)
  store i8* %22, i8** %12, align 8
  %23 = icmp eq i8* %22, null
  br i1 %23, label %27, label %24

24:                                               ; preds = %18
  %25 = bitcast %"class.logging::CheckError"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %7, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.5, i64 0, i64 0), i32 42, %"class.logging::CheckOpResult"* nonnull %6) #7
  %26 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %7) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %7) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #7
  br label %27

27:                                               ; preds = %17, %18, %24
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #7
  %28 = load i32, i32* %13, align 4
  %29 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl17UpconvertedStringEv(%"class.WTF::StringImpl"* %1) #7
  %30 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %29, i64 1
  %31 = bitcast %"class.WTF::StringImpl"* %30 to i16*
  %32 = bitcast i16** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #7
  store i16* inttoptr (i64 -6148914691236517206 to i16*), i16** %8, align 8
  %33 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32 %28, i16** nonnull dereferenceable(8) %8) #7
  %34 = bitcast i32* %9 to i8*
  %35 = bitcast %"class.icu_69::Edits"* %10 to i8*
  %36 = getelementptr inbounds %"class.icu_69::Edits", %"class.icu_69::Edits"* %10, i64 0, i32 0
  %37 = getelementptr inbounds %"class.icu_69::Edits", %"class.icu_69::Edits"* %10, i64 0, i32 6, i64 0
  %38 = getelementptr inbounds %"class.icu_69::Edits", %"class.icu_69::Edits"* %10, i64 0, i32 1
  %39 = getelementptr inbounds %"class.icu_69::Edits", %"class.icu_69::Edits"* %10, i64 0, i32 2
  %40 = bitcast i32* %39 to i8*
  br label %41

41:                                               ; preds = %104, %27
  %42 = phi %"class.WTF::StringImpl"* [ %33, %27 ], [ %89, %104 ]
  %43 = phi i32 [ %28, %27 ], [ %51, %104 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %34) #7
  store i32 0, i32* %9, align 4
  call void @llvm.lifetime.start.p0i8(i64 232, i8* nonnull %35) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %35, i8 -86, i64 232, i1 false)
  store i16* %37, i16** %36, align 8
  store i32 100, i32* %38, align 8
  call void @llvm.memset.p0i8.i64(i8* align 4 %40, i8 0, i64 16, i1 false) #7
  switch i32 %0, label %50 [
    i32 0, label %44
    i32 1, label %47
  ]

44:                                               ; preds = %41
  %45 = load i16*, i16** %8, align 8
  %46 = call i32 @_ZN6icu_697CaseMap7toLowerEPKcjPKDsiPDsiPNS_5EditsER10UErrorCode(i8* %2, i32 0, i16* %31, i32 %28, i16* %45, i32 %43, %"class.icu_69::Edits"* nonnull %10, i32* nonnull dereferenceable(4) %9) #7
  br label %50

47:                                               ; preds = %41
  %48 = load i16*, i16** %8, align 8
  %49 = call i32 @_ZN6icu_697CaseMap7toUpperEPKcjPKDsiPDsiPNS_5EditsER10UErrorCode(i8* %2, i32 0, i16* %31, i32 %28, i16* %48, i32 %43, %"class.icu_69::Edits"* nonnull %10, i32* nonnull dereferenceable(4) %9) #7
  br label %50

50:                                               ; preds = %41, %47, %44
  %51 = phi i32 [ %43, %41 ], [ %49, %47 ], [ %46, %44 ]
  %52 = load i32, i32* %9, align 4
  %53 = icmp sgt i32 %52, 0
  br i1 %53, label %86, label %54

54:                                               ; preds = %50
  %55 = ptrtoint %"class.WTF::StringImpl"* %42 to i64
  %56 = getelementptr inbounds %"class.icu_69::Edits", %"class.icu_69::Edits"* %10, i64 0, i32 4
  %57 = load i32, i32* %56, align 4
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %78

59:                                               ; preds = %54
  %60 = icmp eq %"class.WTF::StringImpl"* %1, null
  br i1 %60, label %124, label %61

61:                                               ; preds = %59
  %62 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %63 = load atomic i32, i32* %62 monotonic, align 4
  %64 = and i32 %63, 2
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %124

66:                                               ; preds = %61
  %67 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %68 = load i32, i32* %67, align 4
  %69 = zext i32 %68 to i33
  %70 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %69, i33 1) #7
  %71 = extractvalue { i33, i1 } %70, 1
  %72 = extractvalue { i33, i1 } %70, 0
  %73 = icmp slt i33 %72, 0
  %74 = or i1 %71, %73
  br i1 %74, label %75, label %76, !prof !2

75:                                               ; preds = %66
  call void @llvm.trap() #7
  unreachable

76:                                               ; preds = %66
  %77 = trunc i33 %72 to i32
  store i32 %77, i32* %67, align 4
  br label %124

78:                                               ; preds = %54
  %79 = icmp eq %"class.WTF::TextOffsetMap"* %3, null
  br i1 %79, label %81, label %80

80:                                               ; preds = %78
  call void @_ZN3WTF13TextOffsetMap6AppendERKN6icu_695EditsE(%"class.WTF::TextOffsetMap"* nonnull %3, %"class.icu_69::Edits"* nonnull dereferenceable(232) %10) #7
  br label %81

81:                                               ; preds = %78, %80
  %82 = icmp eq i32 %28, %51
  br i1 %82, label %83, label %84

83:                                               ; preds = %81
  call void @_ZN6icu_695EditsD1Ev(%"class.icu_69::Edits"* nonnull %10) #7
  call void @llvm.lifetime.end.p0i8(i64 232, i8* nonnull %35) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %34) #7
  br label %141

84:                                               ; preds = %81
  %85 = call %"class.WTF::StringImpl"* @_ZNK3WTF10StringImpl9SubstringEjj(%"class.WTF::StringImpl"* %42, i32 0, i32 %51) #7
  br label %124

86:                                               ; preds = %50
  %87 = icmp eq i32 %52, 15
  br i1 %87, label %88, label %105

88:                                               ; preds = %86
  %89 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32 %51, i16** nonnull dereferenceable(8) %8) #7
  %90 = icmp eq %"class.WTF::StringImpl"* %42, null
  br i1 %90, label %104, label %91

91:                                               ; preds = %88
  %92 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %93 = load atomic i32, i32* %92 monotonic, align 4
  %94 = and i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 0
  %97 = load i32, i32* %96, align 4
  br i1 %95, label %98, label %100

98:                                               ; preds = %91
  %99 = add i32 %97, -1
  store i32 %99, i32* %96, align 4
  br label %100

100:                                              ; preds = %98, %91
  %101 = phi i32 [ %99, %98 ], [ %97, %91 ]
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %103, label %104

103:                                              ; preds = %100
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %42) #7
  br label %104

104:                                              ; preds = %88, %100, %103
  call void @_ZN6icu_695EditsD1Ev(%"class.icu_69::Edits"* nonnull %10) #7
  call void @llvm.lifetime.end.p0i8(i64 232, i8* nonnull %35) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %34) #7
  br label %41

105:                                              ; preds = %86
  %106 = icmp eq %"class.WTF::StringImpl"* %1, null
  br i1 %106, label %124, label %107

107:                                              ; preds = %105
  %108 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %109 = load atomic i32, i32* %108 monotonic, align 4
  %110 = and i32 %109, 2
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %124

112:                                              ; preds = %107
  %113 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %114 = load i32, i32* %113, align 4
  %115 = zext i32 %114 to i33
  %116 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %115, i33 1) #7
  %117 = extractvalue { i33, i1 } %116, 1
  %118 = extractvalue { i33, i1 } %116, 0
  %119 = icmp slt i33 %118, 0
  %120 = or i1 %117, %119
  br i1 %120, label %121, label %122, !prof !2

121:                                              ; preds = %112
  call void @llvm.trap() #7
  unreachable

122:                                              ; preds = %112
  %123 = trunc i33 %118 to i32
  store i32 %123, i32* %113, align 4
  br label %124

124:                                              ; preds = %122, %107, %105, %76, %61, %59, %84
  %125 = phi %"class.WTF::StringImpl"* [ %85, %84 ], [ %1, %59 ], [ %1, %61 ], [ %1, %76 ], [ %1, %105 ], [ %1, %107 ], [ %1, %122 ]
  call void @_ZN6icu_695EditsD1Ev(%"class.icu_69::Edits"* nonnull %10) #7
  call void @llvm.lifetime.end.p0i8(i64 232, i8* nonnull %35) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %34) #7
  %126 = ptrtoint %"class.WTF::StringImpl"* %125 to i64
  %127 = icmp eq %"class.WTF::StringImpl"* %42, null
  br i1 %127, label %141, label %128

128:                                              ; preds = %124
  %129 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %130 = load atomic i32, i32* %129 monotonic, align 4
  %131 = and i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 0
  %134 = load i32, i32* %133, align 4
  br i1 %132, label %135, label %137

135:                                              ; preds = %128
  %136 = add i32 %134, -1
  store i32 %136, i32* %133, align 4
  br label %137

137:                                              ; preds = %135, %128
  %138 = phi i32 [ %136, %135 ], [ %134, %128 ]
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %140, label %141

140:                                              ; preds = %137
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %42) #7
  br label %141

141:                                              ; preds = %83, %124, %137, %140
  %142 = phi i64 [ %55, %83 ], [ %126, %124 ], [ %126, %137 ], [ %126, %140 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #7
  %143 = icmp eq %"class.WTF::StringImpl"* %29, null
  br i1 %143, label %157, label %144

144:                                              ; preds = %141
  %145 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %29, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %146 = load atomic i32, i32* %145 monotonic, align 4
  %147 = and i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %29, i64 0, i32 0
  %150 = load i32, i32* %149, align 4
  br i1 %148, label %151, label %153

151:                                              ; preds = %144
  %152 = add i32 %150, -1
  store i32 %152, i32* %149, align 4
  br label %153

153:                                              ; preds = %151, %144
  %154 = phi i32 [ %152, %151 ], [ %150, %144 ]
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %156, label %157

156:                                              ; preds = %153
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %29) #7
  br label %157

157:                                              ; preds = %141, %153, %156
  %158 = inttoptr i64 %142 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %158
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN3WTF7CaseMap16ToLowerInvariantEPNS_10StringImplEPNS_13TextOffsetMapE(%"class.WTF::StringImpl"*, %"class.WTF::TextOffsetMap"*) local_unnamed_addr #0 align 2 {
  %3 = tail call %"class.WTF::StringImpl"* @_ZN3WTF7CaseMap23TryFastToLowerInvariantEPNS_10StringImplE(%"class.WTF::StringImpl"* %0)
  %4 = icmp eq %"class.WTF::StringImpl"* %3, null
  br i1 %4, label %5, label %7

5:                                                ; preds = %2
  %6 = tail call fastcc %"class.WTF::StringImpl"* @_ZN3WTF12_GLOBAL__N_111CaseConvertENS0_11CaseMapTypeEPNS_10StringImplEPKcPNS_13TextOffsetMapE(i32 0, %"class.WTF::StringImpl"* %0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.6, i64 0, i64 0), %"class.WTF::TextOffsetMap"* %1)
  br label %7

7:                                                ; preds = %2, %5
  %8 = phi %"class.WTF::StringImpl"* [ %3, %2 ], [ %6, %5 ]
  ret %"class.WTF::StringImpl"* %8
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN3WTF7CaseMap16ToUpperInvariantEPNS_10StringImplEPNS_13TextOffsetMapE(%"class.WTF::StringImpl"*, %"class.WTF::TextOffsetMap"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca i8*, align 8
  %7 = alloca i16*, align 8
  %8 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #7
  %9 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %9, align 8
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12)
  %13 = icmp slt i32 %11, 0
  br i1 %13, label %15, label %14

14:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12)
  store i8* null, i8** %9, align 8
  br label %24

15:                                               ; preds = %2
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %11) #7
  %17 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 2147483647) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0), i8* %16, i8* %17) #7
  %18 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %19 = load i8*, i8** %18, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12)
  store i8* %19, i8** %9, align 8
  %20 = icmp eq i8* %19, null
  br i1 %20, label %24, label %21

21:                                               ; preds = %15
  %22 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.5, i64 0, i64 0), i32 217, %"class.logging::CheckOpResult"* nonnull %4) #7
  %23 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #7
  br label %24

24:                                               ; preds = %14, %15, %21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #7
  %25 = load i32, i32* %10, align 4
  %26 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %27 = load atomic i32, i32* %26 monotonic, align 4
  %28 = and i32 %27, 1
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %192, label %30

30:                                               ; preds = %24
  %31 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #7
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %32 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32 %25, i8** nonnull dereferenceable(8) %6) #7
  %33 = ptrtoint %"class.WTF::StringImpl"* %32 to i64
  %34 = icmp sgt i32 %25, 0
  br i1 %34, label %35, label %190

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %37 = bitcast %"class.WTF::StringImpl"* %36 to i8*
  %38 = zext i32 %25 to i64
  %39 = and i64 %38, 1
  %40 = icmp eq i32 %25, 1
  br i1 %40, label %43, label %41

41:                                               ; preds = %35
  %42 = sub nsw i64 %38, %39
  br label %70

43:                                               ; preds = %70, %35
  %44 = phi i32 [ undef, %35 ], [ %90, %70 ]
  %45 = phi i64 [ 0, %35 ], [ %99, %70 ]
  %46 = phi i32 [ 0, %35 ], [ %90, %70 ]
  %47 = icmp eq i64 %39, 0
  br i1 %47, label %61, label %48

48:                                               ; preds = %43
  %49 = getelementptr inbounds i8, i8* %37, i64 %45
  %50 = load i8, i8* %49, align 1
  %51 = add i8 %50, -97
  %52 = icmp ult i8 %51, 26
  %53 = zext i1 %52 to i8
  %54 = shl nuw nsw i8 %53, 5
  %55 = xor i8 %54, -1
  %56 = and i8 %50, %55
  %57 = load i8*, i8** %6, align 8
  %58 = getelementptr inbounds i8, i8* %57, i64 %45
  store i8 %56, i8* %58, align 1
  %59 = zext i8 %50 to i32
  %60 = or i32 %46, %59
  br label %61

61:                                               ; preds = %43, %48
  %62 = phi i32 [ %44, %43 ], [ %60, %48 ]
  %63 = icmp ult i32 %62, 128
  %64 = xor i1 %34, true
  %65 = or i1 %63, %64
  br i1 %65, label %190, label %66

66:                                               ; preds = %61
  %67 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %68 = bitcast %"class.WTF::StringImpl"* %67 to i8*
  %69 = zext i32 %25 to i64
  br label %102

70:                                               ; preds = %70, %41
  %71 = phi i64 [ 0, %41 ], [ %99, %70 ]
  %72 = phi i32 [ 0, %41 ], [ %90, %70 ]
  %73 = phi i64 [ %42, %41 ], [ %100, %70 ]
  %74 = getelementptr inbounds i8, i8* %37, i64 %71
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i32
  %77 = or i32 %72, %76
  %78 = add i8 %75, -97
  %79 = icmp ult i8 %78, 26
  %80 = zext i1 %79 to i8
  %81 = shl nuw nsw i8 %80, 5
  %82 = xor i8 %81, -1
  %83 = and i8 %75, %82
  %84 = load i8*, i8** %6, align 8
  %85 = getelementptr inbounds i8, i8* %84, i64 %71
  store i8 %83, i8* %85, align 1
  %86 = or i64 %71, 1
  %87 = getelementptr inbounds i8, i8* %37, i64 %86
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i32
  %90 = or i32 %77, %89
  %91 = add i8 %88, -97
  %92 = icmp ult i8 %91, 26
  %93 = zext i1 %92 to i8
  %94 = shl nuw nsw i8 %93, 5
  %95 = xor i8 %94, -1
  %96 = and i8 %88, %95
  %97 = load i8*, i8** %6, align 8
  %98 = getelementptr inbounds i8, i8* %97, i64 %86
  store i8 %96, i8* %98, align 1
  %99 = add nuw nsw i64 %71, 2
  %100 = add i64 %73, -2
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %43, label %70

102:                                              ; preds = %111, %66
  %103 = phi i64 [ 0, %66 ], [ %118, %111 ]
  %104 = phi i32 [ 0, %66 ], [ %114, %111 ]
  %105 = getelementptr inbounds i8, i8* %68, i64 %103
  %106 = load i8, i8* %105, align 1
  %107 = zext i8 %106 to i32
  %108 = call i32 @u_toupper_69(i32 %107) #7
  %109 = and i32 %108, 65280
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %111, label %174, !prof !5

111:                                              ; preds = %102
  %112 = icmp eq i8 %106, -33
  %113 = zext i1 %112 to i32
  %114 = add nuw nsw i32 %104, %113
  %115 = trunc i32 %108 to i8
  %116 = load i8*, i8** %6, align 8
  %117 = getelementptr inbounds i8, i8* %116, i64 %103
  store i8 %115, i8* %117, align 1
  %118 = add nuw nsw i64 %103, 1
  %119 = icmp eq i64 %118, %69
  br i1 %119, label %120, label %102

120:                                              ; preds = %111
  %121 = icmp eq i32 %114, 0
  br i1 %121, label %190, label %122

122:                                              ; preds = %120
  %123 = load i32, i32* %10, align 4
  %124 = add i32 %123, %114
  %125 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32 %124, i8** nonnull dereferenceable(8) %6) #7
  %126 = ptrtoint %"class.WTF::StringImpl"* %125 to i64
  %127 = icmp eq %"class.WTF::StringImpl"* %32, null
  br i1 %127, label %141, label %128

128:                                              ; preds = %122
  %129 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %130 = load atomic i32, i32* %129 monotonic, align 4
  %131 = and i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 0
  %134 = load i32, i32* %133, align 4
  br i1 %132, label %135, label %137

135:                                              ; preds = %128
  %136 = add i32 %134, -1
  store i32 %136, i32* %133, align 4
  br label %137

137:                                              ; preds = %135, %128
  %138 = phi i32 [ %136, %135 ], [ %134, %128 ]
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %140, label %141

140:                                              ; preds = %137
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %32) #7
  br label %141

141:                                              ; preds = %122, %137, %140
  br i1 %34, label %142, label %190

142:                                              ; preds = %141
  %143 = load i8*, i8** %6, align 8
  %144 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %0, i64 1
  %145 = bitcast %"class.WTF::StringImpl"* %144 to i8*
  %146 = icmp eq %"class.WTF::TextOffsetMap"* %1, null
  %147 = bitcast i8** %6 to i64*
  %148 = zext i32 %25 to i64
  br label %149

149:                                              ; preds = %170, %142
  %150 = phi i64 [ 0, %142 ], [ %172, %170 ]
  %151 = phi i8* [ %143, %142 ], [ %171, %170 ]
  %152 = getelementptr inbounds i8, i8* %145, i64 %150
  %153 = load i8, i8* %152, align 1
  %154 = icmp eq i8 %153, -33
  br i1 %154, label %155, label %165

155:                                              ; preds = %149
  %156 = getelementptr inbounds i8, i8* %151, i64 1
  store i8 83, i8* %151, align 1
  %157 = getelementptr inbounds i8, i8* %151, i64 2
  store i8 83, i8* %156, align 1
  br i1 %146, label %170, label %158

158:                                              ; preds = %155
  %159 = load i64, i64* %147, align 8
  %160 = ptrtoint i8* %157 to i64
  %161 = sub i64 %160, %159
  %162 = trunc i64 %161 to i32
  %163 = trunc i64 %150 to i32
  %164 = add i32 %163, 1
  call void @_ZN3WTF13TextOffsetMap6AppendEjj(%"class.WTF::TextOffsetMap"* nonnull %1, i32 %164, i32 %162) #7
  br label %170

165:                                              ; preds = %149
  %166 = zext i8 %153 to i32
  %167 = call i32 @u_toupper_69(i32 %166) #7
  %168 = trunc i32 %167 to i8
  %169 = getelementptr inbounds i8, i8* %151, i64 1
  store i8 %168, i8* %151, align 1
  br label %170

170:                                              ; preds = %155, %158, %165
  %171 = phi i8* [ %157, %158 ], [ %157, %155 ], [ %169, %165 ]
  %172 = add nuw nsw i64 %150, 1
  %173 = icmp eq i64 %172, %148
  br i1 %173, label %190, label %149

174:                                              ; preds = %102
  %175 = icmp eq %"class.WTF::StringImpl"* %32, null
  br i1 %175, label %189, label %176

176:                                              ; preds = %174
  %177 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %178 = load atomic i32, i32* %177 monotonic, align 4
  %179 = and i32 %178, 2
  %180 = icmp eq i32 %179, 0
  %181 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 0
  %182 = load i32, i32* %181, align 4
  br i1 %180, label %183, label %185

183:                                              ; preds = %176
  %184 = add i32 %182, -1
  store i32 %184, i32* %181, align 4
  br label %185

185:                                              ; preds = %183, %176
  %186 = phi i32 [ %184, %183 ], [ %182, %176 ]
  %187 = icmp eq i32 %186, 0
  br i1 %187, label %188, label %189

188:                                              ; preds = %185
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %32) #7
  br label %189

189:                                              ; preds = %174, %185, %188
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #7
  br label %192

190:                                              ; preds = %170, %61, %30, %141, %120
  %191 = phi i64 [ %33, %61 ], [ %33, %120 ], [ %126, %141 ], [ %33, %30 ], [ %126, %170 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #7
  br label %293

192:                                              ; preds = %24, %189
  %193 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl17UpconvertedStringEv(%"class.WTF::StringImpl"* %0) #7
  %194 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %193, i64 1
  %195 = bitcast %"class.WTF::StringImpl"* %194 to i16*
  %196 = bitcast i16** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %196) #7
  store i16* inttoptr (i64 -6148914691236517206 to i16*), i16** %7, align 8
  %197 = load i32, i32* %10, align 4
  %198 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32 %197, i16** nonnull dereferenceable(8) %7) #7
  %199 = ptrtoint %"class.WTF::StringImpl"* %198 to i64
  %200 = icmp sgt i32 %25, 0
  br i1 %200, label %201, label %277

201:                                              ; preds = %192
  %202 = zext i32 %25 to i64
  %203 = and i64 %202, 1
  %204 = icmp eq i32 %25, 1
  br i1 %204, label %207, label %205

205:                                              ; preds = %201
  %206 = sub nsw i64 %202, %203
  br label %228

207:                                              ; preds = %228, %201
  %208 = phi i32 [ undef, %201 ], [ %248, %228 ]
  %209 = phi i64 [ 0, %201 ], [ %257, %228 ]
  %210 = phi i32 [ 0, %201 ], [ %248, %228 ]
  %211 = icmp eq i64 %203, 0
  br i1 %211, label %225, label %212

212:                                              ; preds = %207
  %213 = getelementptr inbounds i16, i16* %195, i64 %209
  %214 = load i16, i16* %213, align 2
  %215 = add i16 %214, -97
  %216 = icmp ult i16 %215, 26
  %217 = zext i1 %216 to i16
  %218 = shl nuw nsw i16 %217, 5
  %219 = xor i16 %218, -1
  %220 = and i16 %214, %219
  %221 = load i16*, i16** %7, align 8
  %222 = getelementptr inbounds i16, i16* %221, i64 %209
  store i16 %220, i16* %222, align 2
  %223 = zext i16 %214 to i32
  %224 = or i32 %210, %223
  br label %225

225:                                              ; preds = %207, %212
  %226 = phi i32 [ %208, %207 ], [ %224, %212 ]
  %227 = icmp ugt i32 %226, 127
  br i1 %227, label %260, label %277

228:                                              ; preds = %228, %205
  %229 = phi i64 [ 0, %205 ], [ %257, %228 ]
  %230 = phi i32 [ 0, %205 ], [ %248, %228 ]
  %231 = phi i64 [ %206, %205 ], [ %258, %228 ]
  %232 = getelementptr inbounds i16, i16* %195, i64 %229
  %233 = load i16, i16* %232, align 2
  %234 = zext i16 %233 to i32
  %235 = or i32 %230, %234
  %236 = add i16 %233, -97
  %237 = icmp ult i16 %236, 26
  %238 = zext i1 %237 to i16
  %239 = shl nuw nsw i16 %238, 5
  %240 = xor i16 %239, -1
  %241 = and i16 %233, %240
  %242 = load i16*, i16** %7, align 8
  %243 = getelementptr inbounds i16, i16* %242, i64 %229
  store i16 %241, i16* %243, align 2
  %244 = or i64 %229, 1
  %245 = getelementptr inbounds i16, i16* %195, i64 %244
  %246 = load i16, i16* %245, align 2
  %247 = zext i16 %246 to i32
  %248 = or i32 %235, %247
  %249 = add i16 %246, -97
  %250 = icmp ult i16 %249, 26
  %251 = zext i1 %250 to i16
  %252 = shl nuw nsw i16 %251, 5
  %253 = xor i16 %252, -1
  %254 = and i16 %246, %253
  %255 = load i16*, i16** %7, align 8
  %256 = getelementptr inbounds i16, i16* %255, i64 %244
  store i16 %254, i16* %256, align 2
  %257 = add nuw nsw i64 %229, 2
  %258 = add i64 %231, -2
  %259 = icmp eq i64 %258, 0
  br i1 %259, label %207, label %228

260:                                              ; preds = %225
  %261 = call fastcc %"class.WTF::StringImpl"* @_ZN3WTF12_GLOBAL__N_111CaseConvertENS0_11CaseMapTypeEPNS_10StringImplEPKcPNS_13TextOffsetMapE(i32 1, %"class.WTF::StringImpl"* %0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.6, i64 0, i64 0), %"class.WTF::TextOffsetMap"* %1)
  %262 = ptrtoint %"class.WTF::StringImpl"* %261 to i64
  %263 = icmp eq %"class.WTF::StringImpl"* %198, null
  br i1 %263, label %277, label %264

264:                                              ; preds = %260
  %265 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %198, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %266 = load atomic i32, i32* %265 monotonic, align 4
  %267 = and i32 %266, 2
  %268 = icmp eq i32 %267, 0
  %269 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %198, i64 0, i32 0
  %270 = load i32, i32* %269, align 4
  br i1 %268, label %271, label %273

271:                                              ; preds = %264
  %272 = add i32 %270, -1
  store i32 %272, i32* %269, align 4
  br label %273

273:                                              ; preds = %271, %264
  %274 = phi i32 [ %272, %271 ], [ %270, %264 ]
  %275 = icmp eq i32 %274, 0
  br i1 %275, label %276, label %277

276:                                              ; preds = %273
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %198) #7
  br label %277

277:                                              ; preds = %192, %225, %260, %273, %276
  %278 = phi i64 [ %262, %260 ], [ %262, %273 ], [ %262, %276 ], [ %199, %225 ], [ %199, %192 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %196) #7
  %279 = icmp eq %"class.WTF::StringImpl"* %193, null
  br i1 %279, label %293, label %280

280:                                              ; preds = %277
  %281 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %193, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %282 = load atomic i32, i32* %281 monotonic, align 4
  %283 = and i32 %282, 2
  %284 = icmp eq i32 %283, 0
  %285 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %193, i64 0, i32 0
  %286 = load i32, i32* %285, align 4
  br i1 %284, label %287, label %289

287:                                              ; preds = %280
  %288 = add i32 %286, -1
  store i32 %288, i32* %285, align 4
  br label %289

289:                                              ; preds = %287, %280
  %290 = phi i32 [ %288, %287 ], [ %286, %280 ]
  %291 = icmp eq i32 %290, 0
  br i1 %291, label %292, label %293

292:                                              ; preds = %289
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %193) #7
  br label %293

293:                                              ; preds = %292, %289, %277, %190
  %294 = phi i64 [ %191, %190 ], [ %278, %277 ], [ %278, %289 ], [ %278, %292 ]
  %295 = inttoptr i64 %294 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %295
}

declare void @_ZN3WTF13TextOffsetMap6AppendEjj(%"class.WTF::TextOffsetMap"*, i32, i32) local_unnamed_addr #3

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl17UpconvertedStringEv(%"class.WTF::StringImpl"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK3WTF7CaseMap7ToLowerEPNS_10StringImplEPNS_13TextOffsetMapE(%"class.WTF::CaseMap"* nocapture readonly, %"class.WTF::StringImpl"*, %"class.WTF::TextOffsetMap"*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.WTF::CaseMap", %"class.WTF::CaseMap"* %0, i64 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = icmp eq i8* %5, null
  br i1 %6, label %7, label %12

7:                                                ; preds = %3
  %8 = tail call %"class.WTF::StringImpl"* @_ZN3WTF7CaseMap23TryFastToLowerInvariantEPNS_10StringImplE(%"class.WTF::StringImpl"* %1) #7
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %9, label %10, label %14

10:                                               ; preds = %7
  %11 = tail call fastcc %"class.WTF::StringImpl"* @_ZN3WTF12_GLOBAL__N_111CaseConvertENS0_11CaseMapTypeEPNS_10StringImplEPKcPNS_13TextOffsetMapE(i32 0, %"class.WTF::StringImpl"* %1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.6, i64 0, i64 0), %"class.WTF::TextOffsetMap"* %2) #7
  br label %14

12:                                               ; preds = %3
  %13 = tail call fastcc %"class.WTF::StringImpl"* @_ZN3WTF12_GLOBAL__N_111CaseConvertENS0_11CaseMapTypeEPNS_10StringImplEPKcPNS_13TextOffsetMapE(i32 0, %"class.WTF::StringImpl"* %1, i8* nonnull %5, %"class.WTF::TextOffsetMap"* %2)
  br label %14

14:                                               ; preds = %10, %7, %12
  %15 = phi %"class.WTF::StringImpl"* [ %13, %12 ], [ %8, %7 ], [ %11, %10 ]
  ret %"class.WTF::StringImpl"* %15
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK3WTF7CaseMap7ToUpperEPNS_10StringImplEPNS_13TextOffsetMapE(%"class.WTF::CaseMap"* nocapture readonly, %"class.WTF::StringImpl"*, %"class.WTF::TextOffsetMap"*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.WTF::CaseMap", %"class.WTF::CaseMap"* %0, i64 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = icmp eq i8* %5, null
  br i1 %6, label %7, label %9

7:                                                ; preds = %3
  %8 = tail call %"class.WTF::StringImpl"* @_ZN3WTF7CaseMap16ToUpperInvariantEPNS_10StringImplEPNS_13TextOffsetMapE(%"class.WTF::StringImpl"* %1, %"class.WTF::TextOffsetMap"* %2)
  br label %11

9:                                                ; preds = %3
  %10 = tail call fastcc %"class.WTF::StringImpl"* @_ZN3WTF12_GLOBAL__N_111CaseConvertENS0_11CaseMapTypeEPNS_10StringImplEPKcPNS_13TextOffsetMapE(i32 1, %"class.WTF::StringImpl"* %1, i8* nonnull %5, %"class.WTF::TextOffsetMap"* %2)
  br label %11

11:                                               ; preds = %9, %7
  %12 = phi %"class.WTF::StringImpl"* [ %10, %9 ], [ %8, %7 ]
  ret %"class.WTF::StringImpl"* %12
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK3WTF7CaseMap7ToLowerERKNS_6StringEPNS_13TextOffsetMapE(%"class.WTF::CaseMap"* nocapture readonly, %"class.WTF::String"* nocapture readonly dereferenceable(8), %"class.WTF::TextOffsetMap"*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %6 = icmp eq %"class.WTF::StringImpl"* %5, null
  br i1 %6, label %18, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.WTF::CaseMap", %"class.WTF::CaseMap"* %0, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = icmp eq i8* %9, null
  br i1 %10, label %11, label %16

11:                                               ; preds = %7
  %12 = tail call %"class.WTF::StringImpl"* @_ZN3WTF7CaseMap23TryFastToLowerInvariantEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %5) #7
  %13 = icmp eq %"class.WTF::StringImpl"* %12, null
  br i1 %13, label %14, label %18

14:                                               ; preds = %11
  %15 = tail call fastcc %"class.WTF::StringImpl"* @_ZN3WTF12_GLOBAL__N_111CaseConvertENS0_11CaseMapTypeEPNS_10StringImplEPKcPNS_13TextOffsetMapE(i32 0, %"class.WTF::StringImpl"* nonnull %5, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.6, i64 0, i64 0), %"class.WTF::TextOffsetMap"* %2) #7
  br label %18

16:                                               ; preds = %7
  %17 = tail call fastcc %"class.WTF::StringImpl"* @_ZN3WTF12_GLOBAL__N_111CaseConvertENS0_11CaseMapTypeEPNS_10StringImplEPKcPNS_13TextOffsetMapE(i32 0, %"class.WTF::StringImpl"* nonnull %5, i8* nonnull %9, %"class.WTF::TextOffsetMap"* %2) #7
  br label %18

18:                                               ; preds = %16, %14, %11, %3
  %19 = phi %"class.WTF::StringImpl"* [ null, %3 ], [ %17, %16 ], [ %12, %11 ], [ %15, %14 ]
  ret %"class.WTF::StringImpl"* %19
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK3WTF7CaseMap7ToUpperERKNS_6StringEPNS_13TextOffsetMapE(%"class.WTF::CaseMap"* nocapture readonly, %"class.WTF::String"* nocapture readonly dereferenceable(8), %"class.WTF::TextOffsetMap"*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %6 = icmp eq %"class.WTF::StringImpl"* %5, null
  br i1 %6, label %15, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.WTF::CaseMap", %"class.WTF::CaseMap"* %0, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = icmp eq i8* %9, null
  br i1 %10, label %11, label %13

11:                                               ; preds = %7
  %12 = tail call %"class.WTF::StringImpl"* @_ZN3WTF7CaseMap16ToUpperInvariantEPNS_10StringImplEPNS_13TextOffsetMapE(%"class.WTF::StringImpl"* nonnull %5, %"class.WTF::TextOffsetMap"* %2) #7
  br label %15

13:                                               ; preds = %7
  %14 = tail call fastcc %"class.WTF::StringImpl"* @_ZN3WTF12_GLOBAL__N_111CaseConvertENS0_11CaseMapTypeEPNS_10StringImplEPKcPNS_13TextOffsetMapE(i32 1, %"class.WTF::StringImpl"* nonnull %5, i8* nonnull %9, %"class.WTF::TextOffsetMap"* %2) #7
  br label %15

15:                                               ; preds = %13, %11, %3
  %16 = phi %"class.WTF::StringImpl"* [ null, %3 ], [ %14, %13 ], [ %12, %11 ]
  ret %"class.WTF::StringImpl"* %16
}

declare zeroext i1 @_ZNK3WTF10StringImpl22StartsWithIgnoringCaseERKNS_10StringViewE(%"class.WTF::StringImpl"*, %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #3

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #3

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #3

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

declare i32 @u_tolower_69(i32) local_unnamed_addr #3

declare i32 @_ZN6icu_697CaseMap7toLowerEPKcjPKDsiPDsiPNS_5EditsER10UErrorCode(i8*, i32, i16*, i32, i16*, i32, %"class.icu_69::Edits"*, i32* dereferenceable(4)) local_unnamed_addr #3

declare i32 @_ZN6icu_697CaseMap7toUpperEPKcjPKDsiPDsiPNS_5EditsER10UErrorCode(i8*, i32, i16*, i32, i16*, i32, %"class.icu_69::Edits"*, i32* dereferenceable(4)) local_unnamed_addr #3

declare void @_ZN3WTF13TextOffsetMap6AppendERKN6icu_695EditsE(%"class.WTF::TextOffsetMap"*, %"class.icu_69::Edits"* dereferenceable(232)) local_unnamed_addr #3

declare %"class.WTF::StringImpl"* @_ZNK3WTF10StringImpl9SubstringEjj(%"class.WTF::StringImpl"*, i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN6icu_695EditsD1Ev(%"class.icu_69::Edits"*) unnamed_addr #4

declare i32 @u_toupper_69(i32) local_unnamed_addr #3

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
!5 = !{!"branch_weights", i32 2000, i32 1}
