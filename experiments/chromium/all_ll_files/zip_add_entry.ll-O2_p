; ModuleID = '../../third_party/libzip/src/lib/zip_add_entry.c'
source_filename = "../../third_party/libzip/src/lib/zip_add_entry.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.zip = type { %struct.zip_source*, i32, %struct.zip_error, i32, i32, i8*, %struct.zip_string*, %struct.zip_string*, i8, i64, i64, %struct.zip_entry*, i32, i32, %struct.zip_source**, %struct.zip_hash*, %struct.zip_progress* }
%struct.zip_source = type { %struct.zip_source*, %union.anon, i8*, %struct.zip_error, i64, i32, i32, i8, %struct.zip*, i32, i8, i8 }
%union.anon = type { i64 (i8*, i8*, i64, i32)* }
%struct.zip_error = type { i32, i32, i8* }
%struct.zip_string = type { i8*, i16, i32, i8*, i32 }
%struct.zip_entry = type { %struct.zip_dirent*, %struct.zip_dirent*, %struct.zip_source*, i8 }
%struct.zip_dirent = type { i32, i8, i8, i8, i16, i16, i16, i32, i64, i32, i64, i64, %struct.zip_string*, %struct.zip_extra_field*, %struct.zip_string*, i32, i16, i32, i64, i16, i16, i8* }
%struct.zip_extra_field = type { %struct.zip_extra_field*, i32, i16, i16, i8* }
%struct.zip_hash = type opaque
%struct.zip_progress = type opaque

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_zip_add_entry(%struct.zip*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 9
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 1
  %5 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 10
  %6 = load i64, i64* %5, align 8
  %7 = icmp ult i64 %4, %6
  br i1 %7, label %8, label %11

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 11
  %10 = load %struct.zip_entry*, %struct.zip_entry** %9, align 8
  br label %35

11:                                               ; preds = %1
  %12 = shl i64 %6, 1
  %13 = icmp ult i64 %12, 1024
  %14 = select i1 %13, i64 %12, i64 1024
  %15 = icmp ugt i64 %14, 16
  %16 = select i1 %15, i64 %14, i64 16
  %17 = add i64 %16, %6
  %18 = shl i64 %17, 5
  %19 = shl i64 %6, 5
  %20 = icmp ugt i64 %19, %18
  br i1 %20, label %21, label %23

21:                                               ; preds = %11
  %22 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %22, i32 14, i32 0) #3
  br label %40

23:                                               ; preds = %11
  %24 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 11
  %25 = bitcast %struct.zip_entry** %24 to i8**
  %26 = load i8*, i8** %25, align 8
  %27 = tail call i8* @realloc(i8* %26, i64 %18) #3
  %28 = icmp eq i8* %27, null
  br i1 %28, label %29, label %31

29:                                               ; preds = %23
  %30 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %30, i32 14, i32 0) #3
  br label %40

31:                                               ; preds = %23
  store i8* %27, i8** %25, align 8
  store i64 %17, i64* %5, align 8
  %32 = load i64, i64* %2, align 8
  %33 = bitcast i8* %27 to %struct.zip_entry*
  %34 = add i64 %32, 1
  br label %35

35:                                               ; preds = %8, %31
  %36 = phi i64 [ %4, %8 ], [ %34, %31 ]
  %37 = phi %struct.zip_entry* [ %10, %8 ], [ %33, %31 ]
  %38 = phi i64 [ %3, %8 ], [ %32, %31 ]
  store i64 %36, i64* %2, align 8
  %39 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %37, i64 %38
  tail call void @_zip_entry_init(%struct.zip_entry* %39) #3
  br label %40

40:                                               ; preds = %29, %21, %35
  %41 = phi i64 [ %38, %35 ], [ -1, %29 ], [ -1, %21 ]
  ret i64 %41
}

declare void @zip_error_set(%struct.zip_error*, i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind
declare noalias i8* @realloc(i8* nocapture, i64) local_unnamed_addr #2

declare void @_zip_entry_init(%struct.zip_entry*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
