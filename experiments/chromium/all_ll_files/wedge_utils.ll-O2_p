; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/wedge_utils.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/wedge_utils.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @av1_wedge_sse_from_residuals_c(i16* nocapture readonly, i16* nocapture readonly, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %87

6:                                                ; preds = %4
  %7 = zext i32 %3 to i64
  %8 = and i64 %7, 1
  %9 = icmp eq i32 %3, 1
  br i1 %9, label %58, label %10

10:                                               ; preds = %6
  %11 = sub nsw i64 %7, %8
  br label %12

12:                                               ; preds = %12, %10
  %13 = phi i64 [ 0, %10 ], [ %55, %12 ]
  %14 = phi i64 [ 0, %10 ], [ %54, %12 ]
  %15 = phi i64 [ %11, %10 ], [ %56, %12 ]
  %16 = getelementptr inbounds i16, i16* %0, i64 %13
  %17 = load i16, i16* %16, align 2
  %18 = sext i16 %17 to i32
  %19 = shl nsw i32 %18, 6
  %20 = getelementptr inbounds i8, i8* %2, i64 %13
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = getelementptr inbounds i16, i16* %1, i64 %13
  %24 = load i16, i16* %23, align 2
  %25 = sext i16 %24 to i32
  %26 = mul nsw i32 %25, %22
  %27 = add nsw i32 %26, %19
  %28 = icmp slt i32 %27, 32767
  %29 = select i1 %28, i32 %27, i32 32767
  %30 = icmp sgt i32 %29, -32768
  %31 = select i1 %30, i32 %29, i32 -32768
  %32 = mul nsw i32 %31, %31
  %33 = zext i32 %32 to i64
  %34 = add i64 %14, %33
  %35 = or i64 %13, 1
  %36 = getelementptr inbounds i16, i16* %0, i64 %35
  %37 = load i16, i16* %36, align 2
  %38 = sext i16 %37 to i32
  %39 = shl nsw i32 %38, 6
  %40 = getelementptr inbounds i8, i8* %2, i64 %35
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = getelementptr inbounds i16, i16* %1, i64 %35
  %44 = load i16, i16* %43, align 2
  %45 = sext i16 %44 to i32
  %46 = mul nsw i32 %45, %42
  %47 = add nsw i32 %46, %39
  %48 = icmp slt i32 %47, 32767
  %49 = select i1 %48, i32 %47, i32 32767
  %50 = icmp sgt i32 %49, -32768
  %51 = select i1 %50, i32 %49, i32 -32768
  %52 = mul nsw i32 %51, %51
  %53 = zext i32 %52 to i64
  %54 = add i64 %34, %53
  %55 = add nuw nsw i64 %13, 2
  %56 = add i64 %15, -2
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %12

58:                                               ; preds = %12, %6
  %59 = phi i64 [ undef, %6 ], [ %54, %12 ]
  %60 = phi i64 [ 0, %6 ], [ %55, %12 ]
  %61 = phi i64 [ 0, %6 ], [ %54, %12 ]
  %62 = icmp eq i64 %8, 0
  br i1 %62, label %83, label %63

63:                                               ; preds = %58
  %64 = getelementptr inbounds i16, i16* %0, i64 %60
  %65 = load i16, i16* %64, align 2
  %66 = sext i16 %65 to i32
  %67 = shl nsw i32 %66, 6
  %68 = getelementptr inbounds i8, i8* %2, i64 %60
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = getelementptr inbounds i16, i16* %1, i64 %60
  %72 = load i16, i16* %71, align 2
  %73 = sext i16 %72 to i32
  %74 = mul nsw i32 %73, %70
  %75 = add nsw i32 %74, %67
  %76 = icmp slt i32 %75, 32767
  %77 = select i1 %76, i32 %75, i32 32767
  %78 = icmp sgt i32 %77, -32768
  %79 = select i1 %78, i32 %77, i32 -32768
  %80 = mul nsw i32 %79, %79
  %81 = zext i32 %80 to i64
  %82 = add i64 %61, %81
  br label %83

83:                                               ; preds = %58, %63
  %84 = phi i64 [ %59, %58 ], [ %82, %63 ]
  %85 = add i64 %84, 2048
  %86 = lshr i64 %85, 12
  br label %87

87:                                               ; preds = %83, %4
  %88 = phi i64 [ 0, %4 ], [ %86, %83 ]
  ret i64 %88
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden signext i8 @av1_wedge_sign_from_residuals_c(i16* nocapture readonly, i8* nocapture readonly, i32, i64) local_unnamed_addr #0 {
  %5 = add nsw i32 %2, -1
  %6 = and i32 %2, 3
  %7 = icmp ult i32 %5, 3
  br i1 %7, label %49, label %8

8:                                                ; preds = %4
  %9 = sub i32 %2, %6
  br label %10

10:                                               ; preds = %10, %8
  %11 = phi i8* [ %1, %8 ], [ %42, %10 ]
  %12 = phi i16* [ %0, %8 ], [ %39, %10 ]
  %13 = phi i64 [ 0, %8 ], [ %46, %10 ]
  %14 = phi i32 [ %9, %8 ], [ %47, %10 ]
  %15 = getelementptr inbounds i16, i16* %12, i64 1
  %16 = load i16, i16* %12, align 2
  %17 = sext i16 %16 to i64
  %18 = getelementptr inbounds i8, i8* %11, i64 1
  %19 = load i8, i8* %11, align 1
  %20 = zext i8 %19 to i64
  %21 = mul nsw i64 %20, %17
  %22 = add nsw i64 %21, %13
  %23 = getelementptr inbounds i16, i16* %12, i64 2
  %24 = load i16, i16* %15, align 2
  %25 = sext i16 %24 to i64
  %26 = getelementptr inbounds i8, i8* %11, i64 2
  %27 = load i8, i8* %18, align 1
  %28 = zext i8 %27 to i64
  %29 = mul nsw i64 %28, %25
  %30 = add nsw i64 %29, %22
  %31 = getelementptr inbounds i16, i16* %12, i64 3
  %32 = load i16, i16* %23, align 2
  %33 = sext i16 %32 to i64
  %34 = getelementptr inbounds i8, i8* %11, i64 3
  %35 = load i8, i8* %26, align 1
  %36 = zext i8 %35 to i64
  %37 = mul nsw i64 %36, %33
  %38 = add nsw i64 %37, %30
  %39 = getelementptr inbounds i16, i16* %12, i64 4
  %40 = load i16, i16* %31, align 2
  %41 = sext i16 %40 to i64
  %42 = getelementptr inbounds i8, i8* %11, i64 4
  %43 = load i8, i8* %34, align 1
  %44 = zext i8 %43 to i64
  %45 = mul nsw i64 %44, %41
  %46 = add nsw i64 %45, %38
  %47 = add i32 %14, -4
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %10

49:                                               ; preds = %10, %4
  %50 = phi i64 [ undef, %4 ], [ %46, %10 ]
  %51 = phi i8* [ %1, %4 ], [ %42, %10 ]
  %52 = phi i16* [ %0, %4 ], [ %39, %10 ]
  %53 = phi i64 [ 0, %4 ], [ %46, %10 ]
  %54 = icmp eq i32 %6, 0
  br i1 %54, label %70, label %55

55:                                               ; preds = %49, %55
  %56 = phi i8* [ %63, %55 ], [ %51, %49 ]
  %57 = phi i16* [ %60, %55 ], [ %52, %49 ]
  %58 = phi i64 [ %67, %55 ], [ %53, %49 ]
  %59 = phi i32 [ %68, %55 ], [ %6, %49 ]
  %60 = getelementptr inbounds i16, i16* %57, i64 1
  %61 = load i16, i16* %57, align 2
  %62 = sext i16 %61 to i64
  %63 = getelementptr inbounds i8, i8* %56, i64 1
  %64 = load i8, i8* %56, align 1
  %65 = zext i8 %64 to i64
  %66 = mul nsw i64 %65, %62
  %67 = add nsw i64 %66, %58
  %68 = add i32 %59, -1
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %55, !llvm.loop !2

70:                                               ; preds = %55, %49
  %71 = phi i64 [ %50, %49 ], [ %67, %55 ]
  %72 = icmp sgt i64 %71, %3
  %73 = zext i1 %72 to i8
  ret i8 %73
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @av1_wedge_compute_delta_squares_c(i16* nocapture, i16* nocapture readonly, i16* nocapture readonly, i32) local_unnamed_addr #1 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %107

6:                                                ; preds = %4
  %7 = zext i32 %3 to i64
  %8 = icmp ult i32 %3, 8
  br i1 %8, label %46, label %9

9:                                                ; preds = %6
  %10 = getelementptr i16, i16* %0, i64 %7
  %11 = getelementptr i16, i16* %1, i64 %7
  %12 = getelementptr i16, i16* %2, i64 %7
  %13 = icmp ugt i16* %11, %0
  %14 = icmp ugt i16* %10, %1
  %15 = and i1 %13, %14
  %16 = icmp ugt i16* %12, %0
  %17 = icmp ugt i16* %10, %2
  %18 = and i1 %16, %17
  %19 = or i1 %15, %18
  br i1 %19, label %46, label %20

20:                                               ; preds = %9
  %21 = and i64 %7, 4294967288
  br label %22

22:                                               ; preds = %22, %20
  %23 = phi i64 [ 0, %20 ], [ %42, %22 ]
  %24 = getelementptr inbounds i16, i16* %1, i64 %23
  %25 = bitcast i16* %24 to <8 x i16>*
  %26 = load <8 x i16>, <8 x i16>* %25, align 2, !alias.scope !4
  %27 = sext <8 x i16> %26 to <8 x i32>
  %28 = mul nsw <8 x i32> %27, %27
  %29 = getelementptr inbounds i16, i16* %2, i64 %23
  %30 = bitcast i16* %29 to <8 x i16>*
  %31 = load <8 x i16>, <8 x i16>* %30, align 2, !alias.scope !7
  %32 = sext <8 x i16> %31 to <8 x i32>
  %33 = mul nsw <8 x i32> %32, %32
  %34 = sub nsw <8 x i32> %28, %33
  %35 = icmp slt <8 x i32> %34, <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %36 = select <8 x i1> %35, <8 x i32> %34, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %37 = icmp sgt <8 x i32> %36, <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %38 = select <8 x i1> %37, <8 x i32> %36, <8 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %39 = trunc <8 x i32> %38 to <8 x i16>
  %40 = getelementptr inbounds i16, i16* %0, i64 %23
  %41 = bitcast i16* %40 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %41, align 2, !alias.scope !9, !noalias !11
  %42 = add i64 %23, 8
  %43 = icmp eq i64 %42, %21
  br i1 %43, label %44, label %22, !llvm.loop !12

44:                                               ; preds = %22
  %45 = icmp eq i64 %21, %7
  br i1 %45, label %107, label %46

46:                                               ; preds = %44, %9, %6
  %47 = phi i64 [ 0, %9 ], [ 0, %6 ], [ %21, %44 ]
  %48 = xor i64 %47, -1
  %49 = and i64 %7, 1
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %68, label %51

51:                                               ; preds = %46
  %52 = getelementptr inbounds i16, i16* %1, i64 %47
  %53 = load i16, i16* %52, align 2
  %54 = sext i16 %53 to i32
  %55 = mul nsw i32 %54, %54
  %56 = getelementptr inbounds i16, i16* %2, i64 %47
  %57 = load i16, i16* %56, align 2
  %58 = sext i16 %57 to i32
  %59 = mul nsw i32 %58, %58
  %60 = sub nsw i32 %55, %59
  %61 = icmp slt i32 %60, 32767
  %62 = select i1 %61, i32 %60, i32 32767
  %63 = icmp sgt i32 %62, -32768
  %64 = select i1 %63, i32 %62, i32 -32768
  %65 = trunc i32 %64 to i16
  %66 = getelementptr inbounds i16, i16* %0, i64 %47
  store i16 %65, i16* %66, align 2
  %67 = or i64 %47, 1
  br label %68

68:                                               ; preds = %46, %51
  %69 = phi i64 [ %47, %46 ], [ %67, %51 ]
  %70 = sub nsw i64 0, %7
  %71 = icmp eq i64 %48, %70
  br i1 %71, label %107, label %72

72:                                               ; preds = %68, %72
  %73 = phi i64 [ %105, %72 ], [ %69, %68 ]
  %74 = getelementptr inbounds i16, i16* %1, i64 %73
  %75 = load i16, i16* %74, align 2
  %76 = sext i16 %75 to i32
  %77 = mul nsw i32 %76, %76
  %78 = getelementptr inbounds i16, i16* %2, i64 %73
  %79 = load i16, i16* %78, align 2
  %80 = sext i16 %79 to i32
  %81 = mul nsw i32 %80, %80
  %82 = sub nsw i32 %77, %81
  %83 = icmp slt i32 %82, 32767
  %84 = select i1 %83, i32 %82, i32 32767
  %85 = icmp sgt i32 %84, -32768
  %86 = select i1 %85, i32 %84, i32 -32768
  %87 = trunc i32 %86 to i16
  %88 = getelementptr inbounds i16, i16* %0, i64 %73
  store i16 %87, i16* %88, align 2
  %89 = add nuw nsw i64 %73, 1
  %90 = getelementptr inbounds i16, i16* %1, i64 %89
  %91 = load i16, i16* %90, align 2
  %92 = sext i16 %91 to i32
  %93 = mul nsw i32 %92, %92
  %94 = getelementptr inbounds i16, i16* %2, i64 %89
  %95 = load i16, i16* %94, align 2
  %96 = sext i16 %95 to i32
  %97 = mul nsw i32 %96, %96
  %98 = sub nsw i32 %93, %97
  %99 = icmp slt i32 %98, 32767
  %100 = select i1 %99, i32 %98, i32 32767
  %101 = icmp sgt i32 %100, -32768
  %102 = select i1 %101, i32 %100, i32 -32768
  %103 = trunc i32 %102 to i16
  %104 = getelementptr inbounds i16, i16* %0, i64 %89
  store i16 %103, i16* %104, align 2
  %105 = add nuw nsw i64 %73, 2
  %106 = icmp eq i64 %105, %7
  br i1 %106, label %107, label %72, !llvm.loop !14

107:                                              ; preds = %68, %72, %44, %4
  ret void
}

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = !{!5}
!5 = distinct !{!5, !6}
!6 = distinct !{!6, !"LVerDomain"}
!7 = !{!8}
!8 = distinct !{!8, !6}
!9 = !{!10}
!10 = distinct !{!10, !6}
!11 = !{!5, !8}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.isvectorized", i32 1}
!14 = distinct !{!14, !13}
