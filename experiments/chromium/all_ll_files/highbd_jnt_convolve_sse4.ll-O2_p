; ModuleID = '../../third_party/libaom/source/libaom/av1/common/x86/highbd_jnt_convolve_sse4.c'
source_filename = "../../third_party/libaom/source/libaom/av1/common/x86/highbd_jnt_convolve_sse4.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.InterpFilterParams = type { i16*, i16, i8 }
%struct.ConvolveParams = type { i32, i16*, i32, i32, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_highbd_dist_wtd_convolve_y_sse4_1(i16* nocapture readonly, i32, i16* nocapture, i32, i32, i32, %struct.InterpFilterParams* nocapture readonly, i32, %struct.ConvolveParams* nocapture readonly, i32) local_unnamed_addr #0 {
  %11 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 1
  %12 = load i16*, i16** %11, align 8
  %13 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 1
  %14 = load i16, i16* %13, align 8
  %15 = lshr i16 %14, 1
  %16 = zext i16 %15 to i32
  %17 = add nsw i32 %16, -1
  %18 = mul nsw i32 %17, %1
  %19 = sext i32 %18 to i64
  %20 = sub nsw i64 0, %19
  %21 = getelementptr inbounds i16, i16* %0, i64 %20
  %22 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 3
  %23 = load i32, i32* %22, align 4
  %24 = sub nsw i32 7, %23
  %25 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 8
  %26 = load i32, i32* %25, align 8
  %27 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 9
  %28 = load i32, i32* %27, align 4
  %29 = insertelement <4 x i32> undef, i32 %26, i32 0
  %30 = shufflevector <4 x i32> %29, <4 x i32> undef, <4 x i32> zeroinitializer
  %31 = insertelement <4 x i32> undef, i32 %28, i32 0
  %32 = shufflevector <4 x i32> %31, <4 x i32> undef, <4 x i32> zeroinitializer
  %33 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 4
  %34 = load i32, i32* %33, align 8
  %35 = shl i32 1, %34
  %36 = ashr i32 %35, 1
  %37 = insertelement <4 x i32> undef, i32 %36, i32 0
  %38 = shufflevector <4 x i32> %37, <4 x i32> undef, <4 x i32> zeroinitializer
  %39 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %34, i32 0
  %40 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %24, i32 0
  %41 = add nsw i32 %9, 14
  %42 = sub i32 %41, %23
  %43 = sub i32 %42, %34
  %44 = shl i32 1, %43
  %45 = add nsw i32 %43, -1
  %46 = shl i32 1, %45
  %47 = add nsw i32 %46, %44
  %48 = insertelement <4 x i32> undef, i32 %47, i32 0
  %49 = shufflevector <4 x i32> %48, <4 x i32> undef, <4 x i32> zeroinitializer
  %50 = sub nsw i32 14, %23
  %51 = sub i32 %50, %34
  %52 = icmp eq i32 %9, 10
  %53 = icmp eq i32 %9, 12
  %54 = select i1 %53, i16 4095, i16 255
  %55 = select i1 %52, i16 1023, i16 %54
  %56 = insertelement <8 x i16> undef, i16 %55, i32 0
  %57 = shufflevector <8 x i16> %56, <8 x i16> undef, <8 x i32> zeroinitializer
  %58 = and i32 %7, 15
  %59 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 0
  %60 = load i16*, i16** %59, align 8
  %61 = zext i16 %14 to i32
  %62 = mul nuw nsw i32 %58, %61
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds i16, i16* %60, i64 %63
  %65 = bitcast i16* %64 to <4 x i32>*
  %66 = load <4 x i32>, <4 x i32>* %65, align 1
  %67 = icmp sgt i32 %4, 0
  br i1 %67, label %68, label %386

68:                                               ; preds = %10
  %69 = shl i32 1, %51
  %70 = ashr i32 %69, 1
  %71 = insertelement <4 x i32> undef, i32 %70, i32 0
  %72 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 7
  %73 = load i32, i32* %72, align 4
  %74 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 0
  %75 = load i32, i32* %74, align 8
  %76 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 2
  %77 = load i32, i32* %76, align 8
  %78 = shufflevector <4 x i32> %66, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %79 = shufflevector <4 x i32> %66, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %80 = shufflevector <4 x i32> %66, <4 x i32> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %81 = shufflevector <4 x i32> %66, <4 x i32> undef, <4 x i32> zeroinitializer
  %82 = sext i32 %1 to i64
  %83 = shl nsw i32 %1, 1
  %84 = sext i32 %83 to i64
  %85 = mul nsw i32 %1, 3
  %86 = sext i32 %85 to i64
  %87 = shl nsw i32 %1, 2
  %88 = sext i32 %87 to i64
  %89 = mul nsw i32 %1, 5
  %90 = sext i32 %89 to i64
  %91 = mul nsw i32 %1, 6
  %92 = sext i32 %91 to i64
  %93 = icmp sgt i32 %5, 0
  %94 = mul nsw i32 %1, 7
  %95 = sext i32 %94 to i64
  %96 = shl nsw i32 %1, 3
  %97 = sext i32 %96 to i64
  %98 = bitcast <4 x i32> %81 to <8 x i16>
  %99 = bitcast <4 x i32> %80 to <8 x i16>
  %100 = bitcast <4 x i32> %79 to <8 x i16>
  %101 = bitcast <4 x i32> %78 to <8 x i16>
  %102 = icmp eq i32 %75, 0
  %103 = icmp eq i32 %73, 0
  %104 = sub <4 x i32> %71, %48
  %105 = shufflevector <4 x i32> %104, <4 x i32> undef, <4 x i32> zeroinitializer
  %106 = sext i32 %77 to i64
  %107 = sext i32 %3 to i64
  %108 = sext i32 %5 to i64
  %109 = sext i32 %4 to i64
  br label %110

110:                                              ; preds = %68, %383
  %111 = phi i64 [ 0, %68 ], [ %384, %383 ]
  %112 = getelementptr inbounds i16, i16* %21, i64 %111
  %113 = bitcast i16* %112 to <8 x i16>*
  %114 = load <8 x i16>, <8 x i16>* %113, align 1
  %115 = getelementptr inbounds i16, i16* %112, i64 %82
  %116 = bitcast i16* %115 to <8 x i16>*
  %117 = load <8 x i16>, <8 x i16>* %116, align 1
  %118 = getelementptr inbounds i16, i16* %112, i64 %84
  %119 = bitcast i16* %118 to <8 x i16>*
  %120 = load <8 x i16>, <8 x i16>* %119, align 1
  %121 = getelementptr inbounds i16, i16* %112, i64 %86
  %122 = bitcast i16* %121 to <8 x i16>*
  %123 = load <8 x i16>, <8 x i16>* %122, align 1
  %124 = getelementptr inbounds i16, i16* %112, i64 %88
  %125 = bitcast i16* %124 to <8 x i16>*
  %126 = load <8 x i16>, <8 x i16>* %125, align 1
  %127 = getelementptr inbounds i16, i16* %112, i64 %90
  %128 = bitcast i16* %127 to <8 x i16>*
  %129 = load <8 x i16>, <8 x i16>* %128, align 1
  %130 = getelementptr inbounds i16, i16* %112, i64 %92
  %131 = bitcast i16* %130 to <2 x i64>*
  %132 = load <2 x i64>, <2 x i64>* %131, align 1
  %133 = bitcast <2 x i64> %132 to <8 x i16>
  br i1 %93, label %134, label %383

134:                                              ; preds = %110
  %135 = shufflevector <8 x i16> %129, <8 x i16> %133, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %136 = shufflevector <8 x i16> %123, <8 x i16> %126, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %137 = shufflevector <8 x i16> %117, <8 x i16> %120, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %138 = shufflevector <8 x i16> %129, <8 x i16> %133, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %139 = shufflevector <8 x i16> %123, <8 x i16> %126, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %140 = shufflevector <8 x i16> %117, <8 x i16> %120, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %141 = shufflevector <8 x i16> %126, <8 x i16> %129, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %142 = shufflevector <8 x i16> %120, <8 x i16> %123, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %143 = shufflevector <8 x i16> %114, <8 x i16> %117, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %144 = shufflevector <8 x i16> %126, <8 x i16> %129, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %145 = shufflevector <8 x i16> %120, <8 x i16> %123, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %146 = shufflevector <8 x i16> %114, <8 x i16> %117, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %147 = trunc i64 %111 to i32
  %148 = sub nsw i32 %4, %147
  %149 = icmp slt i32 %148, 8
  br label %150

150:                                              ; preds = %134, %380
  %151 = phi i64 [ 0, %134 ], [ %381, %380 ]
  %152 = phi <2 x i64> [ %132, %134 ], [ %173, %380 ]
  %153 = phi <8 x i16> [ %146, %134 ], [ %154, %380 ]
  %154 = phi <8 x i16> [ %145, %134 ], [ %155, %380 ]
  %155 = phi <8 x i16> [ %144, %134 ], [ %175, %380 ]
  %156 = phi <8 x i16> [ %143, %134 ], [ %157, %380 ]
  %157 = phi <8 x i16> [ %142, %134 ], [ %158, %380 ]
  %158 = phi <8 x i16> [ %141, %134 ], [ %176, %380 ]
  %159 = phi <8 x i16> [ %140, %134 ], [ %160, %380 ]
  %160 = phi <8 x i16> [ %139, %134 ], [ %161, %380 ]
  %161 = phi <8 x i16> [ %138, %134 ], [ %178, %380 ]
  %162 = phi <8 x i16> [ %137, %134 ], [ %163, %380 ]
  %163 = phi <8 x i16> [ %136, %134 ], [ %164, %380 ]
  %164 = phi <8 x i16> [ %135, %134 ], [ %179, %380 ]
  %165 = mul nsw i64 %151, %82
  %166 = add nsw i64 %165, %111
  %167 = getelementptr inbounds i16, i16* %21, i64 %166
  %168 = getelementptr inbounds i16, i16* %167, i64 %95
  %169 = bitcast i16* %168 to <8 x i16>*
  %170 = load <8 x i16>, <8 x i16>* %169, align 1
  %171 = getelementptr inbounds i16, i16* %167, i64 %97
  %172 = bitcast i16* %171 to <2 x i64>*
  %173 = load <2 x i64>, <2 x i64>* %172, align 1
  %174 = bitcast <2 x i64> %152 to <8 x i16>
  %175 = shufflevector <8 x i16> %174, <8 x i16> %170, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %176 = shufflevector <8 x i16> %174, <8 x i16> %170, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %177 = bitcast <2 x i64> %173 to <8 x i16>
  %178 = shufflevector <8 x i16> %170, <8 x i16> %177, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %179 = shufflevector <8 x i16> %170, <8 x i16> %177, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %180 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %153, <8 x i16> %98) #2
  %181 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %154, <8 x i16> %99) #2
  %182 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %155, <8 x i16> %100) #2
  %183 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %175, <8 x i16> %101) #2
  %184 = add <4 x i32> %181, %180
  %185 = add <4 x i32> %184, %182
  %186 = add <4 x i32> %185, %183
  %187 = tail call <4 x i32> @llvm.x86.sse2.psll.d(<4 x i32> %186, <4 x i32> %40) #2
  %188 = add <4 x i32> %187, %38
  %189 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %188, <4 x i32> %39) #2
  %190 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %159, <8 x i16> %98) #2
  %191 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %160, <8 x i16> %99) #2
  %192 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %161, <8 x i16> %100) #2
  %193 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %178, <8 x i16> %101) #2
  %194 = add <4 x i32> %191, %190
  %195 = add <4 x i32> %194, %192
  %196 = add <4 x i32> %195, %193
  %197 = tail call <4 x i32> @llvm.x86.sse2.psll.d(<4 x i32> %196, <4 x i32> %40) #2
  %198 = add <4 x i32> %197, %38
  %199 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %198, <4 x i32> %39) #2
  %200 = add <4 x i32> %189, %49
  %201 = add <4 x i32> %199, %49
  br i1 %149, label %202, label %274

202:                                              ; preds = %150
  br i1 %102, label %260, label %203

203:                                              ; preds = %202
  %204 = mul nsw i64 %151, %106
  %205 = add nsw i64 %204, %111
  %206 = getelementptr inbounds i16, i16* %12, i64 %205
  %207 = bitcast i16* %206 to i64*
  %208 = load i64, i64* %207, align 1
  %209 = insertelement <2 x i64> undef, i64 %208, i32 0
  %210 = add nsw i64 %205, %106
  %211 = getelementptr inbounds i16, i16* %12, i64 %210
  %212 = bitcast i16* %211 to i64*
  %213 = load i64, i64* %212, align 1
  %214 = insertelement <2 x i64> undef, i64 %213, i32 0
  %215 = bitcast <2 x i64> %209 to <8 x i16>
  %216 = shufflevector <8 x i16> %215, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %217 = bitcast <2 x i64> %214 to <8 x i16>
  %218 = shufflevector <8 x i16> %217, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %219 = bitcast <8 x i16> %216 to <4 x i32>
  br i1 %103, label %229, label %220

220:                                              ; preds = %203
  %221 = mul <4 x i32> %30, %219
  %222 = mul <4 x i32> %200, %32
  %223 = add <4 x i32> %221, %222
  %224 = ashr <4 x i32> %223, <i32 4, i32 4, i32 4, i32 4>
  %225 = bitcast <8 x i16> %218 to <4 x i32>
  %226 = mul <4 x i32> %30, %225
  %227 = mul <4 x i32> %201, %32
  %228 = add <4 x i32> %226, %227
  br label %234

229:                                              ; preds = %203
  %230 = add <4 x i32> %200, %219
  %231 = ashr <4 x i32> %230, <i32 1, i32 1, i32 1, i32 1>
  %232 = bitcast <8 x i16> %218 to <4 x i32>
  %233 = add <4 x i32> %201, %232
  br label %234

234:                                              ; preds = %220, %229
  %235 = phi <4 x i32> [ <i32 4, i32 4, i32 4, i32 4>, %220 ], [ <i32 1, i32 1, i32 1, i32 1>, %229 ]
  %236 = phi <4 x i32> [ %228, %220 ], [ %233, %229 ]
  %237 = phi <4 x i32> [ %224, %220 ], [ %231, %229 ]
  %238 = ashr <4 x i32> %236, %235
  %239 = add <4 x i32> %105, %237
  %240 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %239, i32 %51) #2
  %241 = add <4 x i32> %105, %238
  %242 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %241, i32 %51) #2
  %243 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %240, <4 x i32> %240) #2
  %244 = icmp slt <8 x i16> %243, %57
  %245 = select <8 x i1> %244, <8 x i16> %243, <8 x i16> %57
  %246 = bitcast <8 x i16> %245 to <2 x i64>
  %247 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %242, <4 x i32> %242) #2
  %248 = icmp slt <8 x i16> %247, %57
  %249 = select <8 x i1> %248, <8 x i16> %247, <8 x i16> %57
  %250 = bitcast <8 x i16> %249 to <2 x i64>
  %251 = mul nsw i64 %151, %107
  %252 = add nsw i64 %251, %111
  %253 = getelementptr inbounds i16, i16* %2, i64 %252
  %254 = extractelement <2 x i64> %246, i32 0
  %255 = bitcast i16* %253 to i64*
  store i64 %254, i64* %255, align 1
  %256 = add nsw i64 %252, %107
  %257 = getelementptr inbounds i16, i16* %2, i64 %256
  %258 = extractelement <2 x i64> %250, i32 0
  %259 = bitcast i16* %257 to i64*
  store i64 %258, i64* %259, align 1
  br label %380

260:                                              ; preds = %202
  %261 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %200, <4 x i32> undef) #2
  %262 = bitcast <8 x i16> %261 to <2 x i64>
  %263 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %201, <4 x i32> undef) #2
  %264 = bitcast <8 x i16> %263 to <2 x i64>
  %265 = mul nsw i64 %151, %106
  %266 = add nsw i64 %265, %111
  %267 = getelementptr inbounds i16, i16* %12, i64 %266
  %268 = extractelement <2 x i64> %262, i32 0
  %269 = bitcast i16* %267 to i64*
  store i64 %268, i64* %269, align 1
  %270 = add nsw i64 %266, %106
  %271 = getelementptr inbounds i16, i16* %12, i64 %270
  %272 = extractelement <2 x i64> %264, i32 0
  %273 = bitcast i16* %271 to i64*
  store i64 %272, i64* %273, align 1
  br label %380

274:                                              ; preds = %150
  %275 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %156, <8 x i16> %98) #2
  %276 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %157, <8 x i16> %99) #2
  %277 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %158, <8 x i16> %100) #2
  %278 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %176, <8 x i16> %101) #2
  %279 = add <4 x i32> %276, %275
  %280 = add <4 x i32> %279, %277
  %281 = add <4 x i32> %280, %278
  %282 = tail call <4 x i32> @llvm.x86.sse2.psll.d(<4 x i32> %281, <4 x i32> %40) #2
  %283 = add <4 x i32> %282, %38
  %284 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %283, <4 x i32> %39) #2
  %285 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %162, <8 x i16> %98) #2
  %286 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %163, <8 x i16> %99) #2
  %287 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %164, <8 x i16> %100) #2
  %288 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %179, <8 x i16> %101) #2
  %289 = add <4 x i32> %286, %285
  %290 = add <4 x i32> %289, %287
  %291 = add <4 x i32> %290, %288
  %292 = tail call <4 x i32> @llvm.x86.sse2.psll.d(<4 x i32> %291, <4 x i32> %40) #2
  %293 = add <4 x i32> %292, %38
  %294 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %293, <4 x i32> %39) #2
  %295 = add <4 x i32> %284, %49
  %296 = add <4 x i32> %294, %49
  br i1 %102, label %370, label %297

297:                                              ; preds = %274
  %298 = mul nsw i64 %151, %106
  %299 = add nsw i64 %298, %111
  %300 = getelementptr inbounds i16, i16* %12, i64 %299
  %301 = bitcast i16* %300 to <8 x i16>*
  %302 = load <8 x i16>, <8 x i16>* %301, align 1
  %303 = add nsw i64 %299, %106
  %304 = getelementptr inbounds i16, i16* %12, i64 %303
  %305 = bitcast i16* %304 to <8 x i16>*
  %306 = load <8 x i16>, <8 x i16>* %305, align 1
  %307 = shufflevector <8 x i16> %302, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %308 = shufflevector <8 x i16> %306, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %309 = shufflevector <8 x i16> %302, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %310 = shufflevector <8 x i16> %306, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %311 = bitcast <8 x i16> %307 to <4 x i32>
  br i1 %103, label %331, label %312

312:                                              ; preds = %297
  %313 = mul <4 x i32> %30, %311
  %314 = mul <4 x i32> %200, %32
  %315 = add <4 x i32> %313, %314
  %316 = ashr <4 x i32> %315, <i32 4, i32 4, i32 4, i32 4>
  %317 = bitcast <8 x i16> %308 to <4 x i32>
  %318 = mul <4 x i32> %30, %317
  %319 = mul <4 x i32> %201, %32
  %320 = add <4 x i32> %318, %319
  %321 = ashr <4 x i32> %320, <i32 4, i32 4, i32 4, i32 4>
  %322 = bitcast <8 x i16> %309 to <4 x i32>
  %323 = mul <4 x i32> %30, %322
  %324 = mul <4 x i32> %295, %32
  %325 = add <4 x i32> %323, %324
  %326 = ashr <4 x i32> %325, <i32 4, i32 4, i32 4, i32 4>
  %327 = bitcast <8 x i16> %310 to <4 x i32>
  %328 = mul <4 x i32> %30, %327
  %329 = mul <4 x i32> %296, %32
  %330 = add <4 x i32> %328, %329
  br label %342

331:                                              ; preds = %297
  %332 = add <4 x i32> %200, %311
  %333 = ashr <4 x i32> %332, <i32 1, i32 1, i32 1, i32 1>
  %334 = bitcast <8 x i16> %308 to <4 x i32>
  %335 = add <4 x i32> %201, %334
  %336 = ashr <4 x i32> %335, <i32 1, i32 1, i32 1, i32 1>
  %337 = bitcast <8 x i16> %309 to <4 x i32>
  %338 = add <4 x i32> %295, %337
  %339 = ashr <4 x i32> %338, <i32 1, i32 1, i32 1, i32 1>
  %340 = bitcast <8 x i16> %310 to <4 x i32>
  %341 = add <4 x i32> %296, %340
  br label %342

342:                                              ; preds = %312, %331
  %343 = phi <4 x i32> [ <i32 4, i32 4, i32 4, i32 4>, %312 ], [ <i32 1, i32 1, i32 1, i32 1>, %331 ]
  %344 = phi <4 x i32> [ %330, %312 ], [ %341, %331 ]
  %345 = phi <4 x i32> [ %326, %312 ], [ %339, %331 ]
  %346 = phi <4 x i32> [ %316, %312 ], [ %333, %331 ]
  %347 = phi <4 x i32> [ %321, %312 ], [ %336, %331 ]
  %348 = ashr <4 x i32> %344, %343
  %349 = add <4 x i32> %105, %346
  %350 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %349, i32 %51) #2
  %351 = add <4 x i32> %105, %347
  %352 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %351, i32 %51) #2
  %353 = add <4 x i32> %105, %345
  %354 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %353, i32 %51) #2
  %355 = add <4 x i32> %105, %348
  %356 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %355, i32 %51) #2
  %357 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %350, <4 x i32> %354) #2
  %358 = icmp slt <8 x i16> %357, %57
  %359 = select <8 x i1> %358, <8 x i16> %357, <8 x i16> %57
  %360 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %352, <4 x i32> %356) #2
  %361 = icmp slt <8 x i16> %360, %57
  %362 = select <8 x i1> %361, <8 x i16> %360, <8 x i16> %57
  %363 = mul nsw i64 %151, %107
  %364 = add nsw i64 %363, %111
  %365 = getelementptr inbounds i16, i16* %2, i64 %364
  %366 = bitcast i16* %365 to <8 x i16>*
  store <8 x i16> %359, <8 x i16>* %366, align 16
  %367 = add nsw i64 %364, %107
  %368 = getelementptr inbounds i16, i16* %2, i64 %367
  %369 = bitcast i16* %368 to <8 x i16>*
  store <8 x i16> %362, <8 x i16>* %369, align 16
  br label %380

370:                                              ; preds = %274
  %371 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %200, <4 x i32> %295) #2
  %372 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %201, <4 x i32> %296) #2
  %373 = mul nsw i64 %151, %106
  %374 = add nsw i64 %373, %111
  %375 = getelementptr inbounds i16, i16* %12, i64 %374
  %376 = bitcast i16* %375 to <8 x i16>*
  store <8 x i16> %371, <8 x i16>* %376, align 16
  %377 = add nsw i64 %374, %106
  %378 = getelementptr inbounds i16, i16* %12, i64 %377
  %379 = bitcast i16* %378 to <8 x i16>*
  store <8 x i16> %372, <8 x i16>* %379, align 16
  br label %380

380:                                              ; preds = %342, %370, %234, %260
  %381 = add nuw nsw i64 %151, 2
  %382 = icmp slt i64 %381, %108
  br i1 %382, label %150, label %383

383:                                              ; preds = %380, %110
  %384 = add nuw nsw i64 %111, 8
  %385 = icmp slt i64 %384, %109
  br i1 %385, label %110, label %386

386:                                              ; preds = %383, %10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_highbd_dist_wtd_convolve_x_sse4_1(i16* nocapture readonly, i32, i16* nocapture, i32, i32, i32, %struct.InterpFilterParams* nocapture readonly, i32, %struct.ConvolveParams* nocapture readonly, i32) local_unnamed_addr #0 {
  %11 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 1
  %12 = load i16*, i16** %11, align 8
  %13 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 1
  %14 = load i16, i16* %13, align 8
  %15 = lshr i16 %14, 1
  %16 = zext i16 %15 to i64
  %17 = sub nsw i64 1, %16
  %18 = getelementptr inbounds i16, i16* %0, i64 %17
  %19 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 4
  %20 = load i32, i32* %19, align 8
  %21 = sub nsw i32 7, %20
  %22 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 8
  %23 = load i32, i32* %22, align 8
  %24 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 9
  %25 = load i32, i32* %24, align 4
  %26 = insertelement <4 x i32> undef, i32 %23, i32 0
  %27 = shufflevector <4 x i32> %26, <4 x i32> undef, <4 x i32> zeroinitializer
  %28 = insertelement <4 x i32> undef, i32 %25, i32 0
  %29 = shufflevector <4 x i32> %28, <4 x i32> undef, <4 x i32> zeroinitializer
  %30 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 3
  %31 = load i32, i32* %30, align 4
  %32 = shl i32 1, %31
  %33 = ashr i32 %32, 1
  %34 = insertelement <4 x i32> undef, i32 %33, i32 0
  %35 = shufflevector <4 x i32> %34, <4 x i32> undef, <4 x i32> zeroinitializer
  %36 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %31, i32 0
  %37 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %21, i32 0
  %38 = add nsw i32 %9, 14
  %39 = sub i32 %38, %20
  %40 = sub i32 %39, %31
  %41 = shl i32 1, %40
  %42 = add nsw i32 %40, -1
  %43 = shl i32 1, %42
  %44 = add nsw i32 %43, %41
  %45 = insertelement <4 x i32> undef, i32 %44, i32 0
  %46 = shufflevector <4 x i32> %45, <4 x i32> undef, <4 x i32> zeroinitializer
  %47 = sub nsw i32 14, %31
  %48 = sub i32 %47, %20
  %49 = icmp eq i32 %9, 10
  %50 = icmp eq i32 %9, 12
  %51 = select i1 %50, i16 4095, i16 255
  %52 = select i1 %49, i16 1023, i16 %51
  %53 = insertelement <8 x i16> undef, i16 %52, i32 0
  %54 = shufflevector <8 x i16> %53, <8 x i16> undef, <8 x i32> zeroinitializer
  %55 = and i32 %7, 15
  %56 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 0
  %57 = load i16*, i16** %56, align 8
  %58 = zext i16 %14 to i32
  %59 = mul nuw nsw i32 %55, %58
  %60 = zext i32 %59 to i64
  %61 = getelementptr inbounds i16, i16* %57, i64 %60
  %62 = bitcast i16* %61 to <4 x i32>*
  %63 = load <4 x i32>, <4 x i32>* %62, align 1
  %64 = icmp sgt i32 %4, 0
  br i1 %64, label %65, label %241

65:                                               ; preds = %10
  %66 = shl i32 1, %48
  %67 = ashr i32 %66, 1
  %68 = insertelement <4 x i32> undef, i32 %67, i32 0
  %69 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 7
  %70 = load i32, i32* %69, align 4
  %71 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 0
  %72 = load i32, i32* %71, align 8
  %73 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 2
  %74 = load i32, i32* %73, align 8
  %75 = shufflevector <4 x i32> %63, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %76 = shufflevector <4 x i32> %63, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %77 = shufflevector <4 x i32> %63, <4 x i32> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %78 = shufflevector <4 x i32> %63, <4 x i32> undef, <4 x i32> zeroinitializer
  %79 = icmp sgt i32 %5, 0
  %80 = bitcast <4 x i32> %78 to <8 x i16>
  %81 = bitcast <4 x i32> %77 to <8 x i16>
  %82 = bitcast <4 x i32> %76 to <8 x i16>
  %83 = bitcast <4 x i32> %75 to <8 x i16>
  %84 = icmp eq i32 %72, 0
  %85 = icmp eq i32 %70, 0
  %86 = sub <4 x i32> %68, %45
  %87 = shufflevector <4 x i32> %86, <4 x i32> undef, <4 x i32> zeroinitializer
  %88 = sext i32 %74 to i64
  %89 = sext i32 %3 to i64
  %90 = sext i32 %1 to i64
  %91 = sext i32 %4 to i64
  %92 = zext i32 %5 to i64
  br label %93

93:                                               ; preds = %65, %239
  %94 = phi i64 [ 0, %65 ], [ %95, %239 ]
  %95 = add nuw nsw i64 %94, 8
  br i1 %79, label %96, label %239

96:                                               ; preds = %93
  %97 = sub nsw i64 %91, %94
  %98 = icmp slt i64 %97, 8
  br label %99

99:                                               ; preds = %236, %96
  %100 = phi i64 [ 0, %96 ], [ %237, %236 ]
  %101 = mul nsw i64 %100, %90
  %102 = add nsw i64 %101, %94
  %103 = getelementptr inbounds i16, i16* %18, i64 %102
  %104 = bitcast i16* %103 to <2 x i64>*
  %105 = load <2 x i64>, <2 x i64>* %104, align 1
  %106 = add nsw i64 %95, %101
  %107 = getelementptr inbounds i16, i16* %18, i64 %106
  %108 = bitcast i16* %107 to <16 x i8>*
  %109 = load <16 x i8>, <16 x i8>* %108, align 1
  %110 = bitcast <2 x i64> %105 to <16 x i8>
  %111 = shufflevector <16 x i8> %110, <16 x i8> %109, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %112 = bitcast <16 x i8> %111 to <8 x i16>
  %113 = shufflevector <16 x i8> %110, <16 x i8> %109, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %114 = bitcast <16 x i8> %113 to <8 x i16>
  %115 = shufflevector <16 x i8> %110, <16 x i8> %109, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  %116 = bitcast <16 x i8> %115 to <8 x i16>
  %117 = bitcast <2 x i64> %105 to <8 x i16>
  %118 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %117, <8 x i16> %80) #2
  %119 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %112, <8 x i16> %81) #2
  %120 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %114, <8 x i16> %82) #2
  %121 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %116, <8 x i16> %83) #2
  %122 = add <4 x i32> %118, %35
  %123 = add <4 x i32> %122, %119
  %124 = add <4 x i32> %123, %120
  %125 = add <4 x i32> %124, %121
  %126 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %125, <4 x i32> %36) #2
  %127 = shufflevector <16 x i8> %110, <16 x i8> %109, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %128 = shufflevector <16 x i8> %110, <16 x i8> %109, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %129 = bitcast <16 x i8> %128 to <8 x i16>
  %130 = shufflevector <16 x i8> %110, <16 x i8> %109, <16 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25>
  %131 = bitcast <16 x i8> %130 to <8 x i16>
  %132 = shufflevector <16 x i8> %110, <16 x i8> %109, <16 x i32> <i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29>
  %133 = bitcast <16 x i8> %132 to <8 x i16>
  %134 = bitcast <16 x i8> %127 to <8 x i16>
  %135 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %134, <8 x i16> %80) #2
  %136 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %129, <8 x i16> %81) #2
  %137 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %131, <8 x i16> %82) #2
  %138 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %133, <8 x i16> %83) #2
  %139 = add <4 x i32> %135, %35
  %140 = add <4 x i32> %139, %136
  %141 = add <4 x i32> %140, %137
  %142 = add <4 x i32> %141, %138
  %143 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %142, <4 x i32> %36) #2
  %144 = tail call <4 x i32> @llvm.x86.sse2.psll.d(<4 x i32> %126, <4 x i32> %37) #2
  %145 = tail call <4 x i32> @llvm.x86.sse2.psll.d(<4 x i32> %143, <4 x i32> %37) #2
  %146 = shufflevector <4 x i32> %144, <4 x i32> %145, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %147 = add <4 x i32> %146, %46
  br i1 %98, label %148, label %188

148:                                              ; preds = %99
  br i1 %84, label %180, label %149

149:                                              ; preds = %148
  %150 = mul nsw i64 %100, %88
  %151 = add nsw i64 %150, %94
  %152 = getelementptr inbounds i16, i16* %12, i64 %151
  %153 = bitcast i16* %152 to i64*
  %154 = load i64, i64* %153, align 1
  %155 = insertelement <2 x i64> undef, i64 %154, i32 0
  %156 = bitcast <2 x i64> %155 to <8 x i16>
  %157 = shufflevector <8 x i16> %156, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %158 = bitcast <8 x i16> %157 to <4 x i32>
  br i1 %85, label %163, label %159

159:                                              ; preds = %149
  %160 = mul <4 x i32> %27, %158
  %161 = mul <4 x i32> %147, %29
  %162 = add <4 x i32> %160, %161
  br label %165

163:                                              ; preds = %149
  %164 = add <4 x i32> %147, %158
  br label %165

165:                                              ; preds = %159, %163
  %166 = phi <4 x i32> [ <i32 4, i32 4, i32 4, i32 4>, %159 ], [ <i32 1, i32 1, i32 1, i32 1>, %163 ]
  %167 = phi <4 x i32> [ %162, %159 ], [ %164, %163 ]
  %168 = ashr <4 x i32> %167, %166
  %169 = add <4 x i32> %87, %168
  %170 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %169, i32 %48) #2
  %171 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %170, <4 x i32> %170) #2
  %172 = icmp slt <8 x i16> %171, %54
  %173 = select <8 x i1> %172, <8 x i16> %171, <8 x i16> %54
  %174 = bitcast <8 x i16> %173 to <2 x i64>
  %175 = mul nsw i64 %100, %89
  %176 = add nsw i64 %175, %94
  %177 = getelementptr inbounds i16, i16* %2, i64 %176
  %178 = extractelement <2 x i64> %174, i32 0
  %179 = bitcast i16* %177 to i64*
  store i64 %178, i64* %179, align 1
  br label %236

180:                                              ; preds = %148
  %181 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %147, <4 x i32> undef) #2
  %182 = bitcast <8 x i16> %181 to <2 x i64>
  %183 = mul nsw i64 %100, %88
  %184 = add nsw i64 %183, %94
  %185 = getelementptr inbounds i16, i16* %12, i64 %184
  %186 = extractelement <2 x i64> %182, i32 0
  %187 = bitcast i16* %185 to i64*
  store i64 %186, i64* %187, align 1
  br label %236

188:                                              ; preds = %99
  %189 = shufflevector <4 x i32> %144, <4 x i32> %145, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %190 = add <4 x i32> %189, %46
  br i1 %84, label %230, label %191

191:                                              ; preds = %188
  %192 = mul nsw i64 %100, %88
  %193 = add nsw i64 %192, %94
  %194 = getelementptr inbounds i16, i16* %12, i64 %193
  %195 = bitcast i16* %194 to <8 x i16>*
  %196 = load <8 x i16>, <8 x i16>* %195, align 1
  %197 = shufflevector <8 x i16> %196, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %198 = shufflevector <8 x i16> %196, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %199 = bitcast <8 x i16> %197 to <4 x i32>
  br i1 %85, label %209, label %200

200:                                              ; preds = %191
  %201 = mul <4 x i32> %27, %199
  %202 = mul <4 x i32> %147, %29
  %203 = add <4 x i32> %201, %202
  %204 = ashr <4 x i32> %203, <i32 4, i32 4, i32 4, i32 4>
  %205 = bitcast <8 x i16> %198 to <4 x i32>
  %206 = mul <4 x i32> %27, %205
  %207 = mul <4 x i32> %190, %29
  %208 = add <4 x i32> %206, %207
  br label %214

209:                                              ; preds = %191
  %210 = add <4 x i32> %147, %199
  %211 = ashr <4 x i32> %210, <i32 1, i32 1, i32 1, i32 1>
  %212 = bitcast <8 x i16> %198 to <4 x i32>
  %213 = add <4 x i32> %190, %212
  br label %214

214:                                              ; preds = %200, %209
  %215 = phi <4 x i32> [ <i32 4, i32 4, i32 4, i32 4>, %200 ], [ <i32 1, i32 1, i32 1, i32 1>, %209 ]
  %216 = phi <4 x i32> [ %208, %200 ], [ %213, %209 ]
  %217 = phi <4 x i32> [ %204, %200 ], [ %211, %209 ]
  %218 = ashr <4 x i32> %216, %215
  %219 = add <4 x i32> %87, %217
  %220 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %219, i32 %48) #2
  %221 = add <4 x i32> %87, %218
  %222 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %221, i32 %48) #2
  %223 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %220, <4 x i32> %222) #2
  %224 = icmp slt <8 x i16> %223, %54
  %225 = select <8 x i1> %224, <8 x i16> %223, <8 x i16> %54
  %226 = mul nsw i64 %100, %89
  %227 = add nsw i64 %226, %94
  %228 = getelementptr inbounds i16, i16* %2, i64 %227
  %229 = bitcast i16* %228 to <8 x i16>*
  store <8 x i16> %225, <8 x i16>* %229, align 16
  br label %236

230:                                              ; preds = %188
  %231 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %147, <4 x i32> %190) #2
  %232 = mul nsw i64 %100, %88
  %233 = add nsw i64 %232, %94
  %234 = getelementptr inbounds i16, i16* %12, i64 %233
  %235 = bitcast i16* %234 to <8 x i16>*
  store <8 x i16> %231, <8 x i16>* %235, align 16
  br label %236

236:                                              ; preds = %214, %230, %165, %180
  %237 = add nuw nsw i64 %100, 1
  %238 = icmp eq i64 %237, %92
  br i1 %238, label %239, label %99

239:                                              ; preds = %236, %93
  %240 = icmp slt i64 %95, %91
  br i1 %240, label %93, label %241

241:                                              ; preds = %239, %10
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16>, <8 x i16>) #1

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.psll.d(<4 x i32>, <4 x i32>) #1

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32>, <4 x i32>) #1

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32>, i32) #1

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32>, <4 x i32>) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
