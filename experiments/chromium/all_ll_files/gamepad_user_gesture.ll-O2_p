; ModuleID = '../../device/gamepad/gamepad_user_gesture.cc'
source_filename = "../../device/gamepad/gamepad_user_gesture.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.device::Gamepads" = type { [4 x %"class.device::Gamepad"] }
%"class.device::Gamepad" = type <{ i8, i8, [128 x i16], [2 x i8], i64, i32, i32, [16 x double], i32, [32 x %"class.device::GamepadButton"], %"class.device::GamepadHapticActuator", i32, %"class.device::GamepadPose", i32, i32, i8, [3 x i8] }>
%"class.device::GamepadButton" = type <{ i8, i8, i8, i8, double }>
%"class.device::GamepadHapticActuator" = type { i8, i32 }
%"class.device::GamepadPose" = type { i8, i8, i8, %"class.device::GamepadQuaternion", %"class.device::GamepadVector", %"class.device::GamepadVector", %"class.device::GamepadVector", %"class.device::GamepadVector", %"class.device::GamepadVector" }
%"class.device::GamepadQuaternion" = type { i8, float, float, float, float }
%"class.device::GamepadVector" = type { i8, float, float, float }

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN6device23GamepadsHaveUserGestureERKNS_8GamepadsE(%"class.device::Gamepads"* nocapture readonly dereferenceable(3680)) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %"class.device::Gamepads", %"class.device::Gamepads"* %0, i64 0, i32 0, i64 0, i32 0
  %3 = load i8, i8* %2, align 4, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %38, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.device::Gamepads", %"class.device::Gamepads"* %0, i64 0, i32 0, i64 0, i32 14
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %42

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.device::Gamepads", %"class.device::Gamepads"* %0, i64 0, i32 0, i64 0, i32 8
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %17, label %13

13:                                               ; preds = %9
  %14 = zext i32 %11 to i64
  br label %23

15:                                               ; preds = %23
  %16 = icmp ult i64 %28, %14
  br i1 %16, label %23, label %17

17:                                               ; preds = %15, %9
  %18 = getelementptr inbounds %"class.device::Gamepads", %"class.device::Gamepads"* %0, i64 0, i32 0, i64 0, i32 5
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %38, label %21

21:                                               ; preds = %17
  %22 = zext i32 %19 to i64
  br label %31

23:                                               ; preds = %13, %15
  %24 = phi i64 [ %28, %15 ], [ 0, %13 ]
  %25 = getelementptr inbounds %"class.device::Gamepads", %"class.device::Gamepads"* %0, i64 0, i32 0, i64 0, i32 9, i64 %24, i32 1
  %26 = load i8, i8* %25, align 1, !range !2
  %27 = icmp eq i8 %26, 0
  %28 = add nuw nsw i64 %24, 1
  br i1 %27, label %15, label %42

29:                                               ; preds = %31
  %30 = icmp ult i64 %37, %22
  br i1 %30, label %31, label %38

31:                                               ; preds = %21, %29
  %32 = phi i64 [ %37, %29 ], [ 0, %21 ]
  %33 = getelementptr inbounds %"class.device::Gamepads", %"class.device::Gamepads"* %0, i64 0, i32 0, i64 0, i32 7, i64 %32
  %34 = load double, double* %33, align 4
  %35 = tail call double @llvm.fabs.f64(double %34)
  %36 = fcmp ogt double %35, 5.000000e-01
  %37 = add nuw nsw i64 %32, 1
  br i1 %36, label %42, label %29

38:                                               ; preds = %29, %17, %1
  %39 = getelementptr inbounds %"class.device::Gamepads", %"class.device::Gamepads"* %0, i64 0, i32 0, i64 1, i32 0
  %40 = load i8, i8* %39, align 4, !range !2
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %77, label %44

42:                                               ; preds = %114, %136, %149, %5, %44, %81, %118, %23, %54, %91, %128, %31, %68, %105, %142
  %43 = phi i1 [ true, %142 ], [ true, %105 ], [ true, %68 ], [ true, %31 ], [ true, %128 ], [ true, %91 ], [ true, %54 ], [ true, %23 ], [ true, %5 ], [ true, %44 ], [ true, %81 ], [ true, %118 ], [ false, %149 ], [ false, %136 ], [ false, %114 ]
  ret i1 %43

44:                                               ; preds = %38
  %45 = getelementptr inbounds %"class.device::Gamepads", %"class.device::Gamepads"* %0, i64 0, i32 0, i64 1, i32 14
  %46 = load i32, i32* %45, align 4
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %42

48:                                               ; preds = %44
  %49 = getelementptr inbounds %"class.device::Gamepads", %"class.device::Gamepads"* %0, i64 0, i32 0, i64 1, i32 8
  %50 = load i32, i32* %49, align 4
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %62, label %52

52:                                               ; preds = %48
  %53 = zext i32 %50 to i64
  br label %54

54:                                               ; preds = %60, %52
  %55 = phi i64 [ %59, %60 ], [ 0, %52 ]
  %56 = getelementptr inbounds %"class.device::Gamepads", %"class.device::Gamepads"* %0, i64 0, i32 0, i64 1, i32 9, i64 %55, i32 1
  %57 = load i8, i8* %56, align 1, !range !2
  %58 = icmp eq i8 %57, 0
  %59 = add nuw nsw i64 %55, 1
  br i1 %58, label %60, label %42

60:                                               ; preds = %54
  %61 = icmp ult i64 %59, %53
  br i1 %61, label %54, label %62

62:                                               ; preds = %60, %48
  %63 = getelementptr inbounds %"class.device::Gamepads", %"class.device::Gamepads"* %0, i64 0, i32 0, i64 1, i32 5
  %64 = load i32, i32* %63, align 4
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %77, label %66

66:                                               ; preds = %62
  %67 = zext i32 %64 to i64
  br label %68

68:                                               ; preds = %75, %66
  %69 = phi i64 [ %74, %75 ], [ 0, %66 ]
  %70 = getelementptr inbounds %"class.device::Gamepads", %"class.device::Gamepads"* %0, i64 0, i32 0, i64 1, i32 7, i64 %69
  %71 = load double, double* %70, align 4
  %72 = tail call double @llvm.fabs.f64(double %71)
  %73 = fcmp ogt double %72, 5.000000e-01
  %74 = add nuw nsw i64 %69, 1
  br i1 %73, label %42, label %75

75:                                               ; preds = %68
  %76 = icmp ult i64 %74, %67
  br i1 %76, label %68, label %77

77:                                               ; preds = %75, %62, %38
  %78 = getelementptr inbounds %"class.device::Gamepads", %"class.device::Gamepads"* %0, i64 0, i32 0, i64 2, i32 0
  %79 = load i8, i8* %78, align 4, !range !2
  %80 = icmp eq i8 %79, 0
  br i1 %80, label %114, label %81

81:                                               ; preds = %77
  %82 = getelementptr inbounds %"class.device::Gamepads", %"class.device::Gamepads"* %0, i64 0, i32 0, i64 2, i32 14
  %83 = load i32, i32* %82, align 4
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %85, label %42

85:                                               ; preds = %81
  %86 = getelementptr inbounds %"class.device::Gamepads", %"class.device::Gamepads"* %0, i64 0, i32 0, i64 2, i32 8
  %87 = load i32, i32* %86, align 4
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %99, label %89

89:                                               ; preds = %85
  %90 = zext i32 %87 to i64
  br label %91

91:                                               ; preds = %97, %89
  %92 = phi i64 [ %96, %97 ], [ 0, %89 ]
  %93 = getelementptr inbounds %"class.device::Gamepads", %"class.device::Gamepads"* %0, i64 0, i32 0, i64 2, i32 9, i64 %92, i32 1
  %94 = load i8, i8* %93, align 1, !range !2
  %95 = icmp eq i8 %94, 0
  %96 = add nuw nsw i64 %92, 1
  br i1 %95, label %97, label %42

97:                                               ; preds = %91
  %98 = icmp ult i64 %96, %90
  br i1 %98, label %91, label %99

99:                                               ; preds = %97, %85
  %100 = getelementptr inbounds %"class.device::Gamepads", %"class.device::Gamepads"* %0, i64 0, i32 0, i64 2, i32 5
  %101 = load i32, i32* %100, align 4
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %114, label %103

103:                                              ; preds = %99
  %104 = zext i32 %101 to i64
  br label %105

105:                                              ; preds = %112, %103
  %106 = phi i64 [ %111, %112 ], [ 0, %103 ]
  %107 = getelementptr inbounds %"class.device::Gamepads", %"class.device::Gamepads"* %0, i64 0, i32 0, i64 2, i32 7, i64 %106
  %108 = load double, double* %107, align 4
  %109 = tail call double @llvm.fabs.f64(double %108)
  %110 = fcmp ogt double %109, 5.000000e-01
  %111 = add nuw nsw i64 %106, 1
  br i1 %110, label %42, label %112

112:                                              ; preds = %105
  %113 = icmp ult i64 %111, %104
  br i1 %113, label %105, label %114

114:                                              ; preds = %112, %99, %77
  %115 = getelementptr inbounds %"class.device::Gamepads", %"class.device::Gamepads"* %0, i64 0, i32 0, i64 3, i32 0
  %116 = load i8, i8* %115, align 4, !range !2
  %117 = icmp eq i8 %116, 0
  br i1 %117, label %42, label %118

118:                                              ; preds = %114
  %119 = getelementptr inbounds %"class.device::Gamepads", %"class.device::Gamepads"* %0, i64 0, i32 0, i64 3, i32 14
  %120 = load i32, i32* %119, align 4
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %42

122:                                              ; preds = %118
  %123 = getelementptr inbounds %"class.device::Gamepads", %"class.device::Gamepads"* %0, i64 0, i32 0, i64 3, i32 8
  %124 = load i32, i32* %123, align 4
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %136, label %126

126:                                              ; preds = %122
  %127 = zext i32 %124 to i64
  br label %128

128:                                              ; preds = %134, %126
  %129 = phi i64 [ %133, %134 ], [ 0, %126 ]
  %130 = getelementptr inbounds %"class.device::Gamepads", %"class.device::Gamepads"* %0, i64 0, i32 0, i64 3, i32 9, i64 %129, i32 1
  %131 = load i8, i8* %130, align 1, !range !2
  %132 = icmp eq i8 %131, 0
  %133 = add nuw nsw i64 %129, 1
  br i1 %132, label %134, label %42

134:                                              ; preds = %128
  %135 = icmp ult i64 %133, %127
  br i1 %135, label %128, label %136

136:                                              ; preds = %134, %122
  %137 = getelementptr inbounds %"class.device::Gamepads", %"class.device::Gamepads"* %0, i64 0, i32 0, i64 3, i32 5
  %138 = load i32, i32* %137, align 4
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %42, label %140

140:                                              ; preds = %136
  %141 = zext i32 %138 to i64
  br label %142

142:                                              ; preds = %149, %140
  %143 = phi i64 [ %148, %149 ], [ 0, %140 ]
  %144 = getelementptr inbounds %"class.device::Gamepads", %"class.device::Gamepads"* %0, i64 0, i32 0, i64 3, i32 7, i64 %143
  %145 = load double, double* %144, align 4
  %146 = tail call double @llvm.fabs.f64(double %145)
  %147 = fcmp ogt double %146, 5.000000e-01
  %148 = add nuw nsw i64 %143, 1
  br i1 %147, label %42, label %149

149:                                              ; preds = %142
  %150 = icmp ult i64 %148, %141
  br i1 %150, label %142, label %42
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #1

attributes #0 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
