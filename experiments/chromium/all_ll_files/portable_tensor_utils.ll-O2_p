; ModuleID = '../../third_party/tflite/src/tensorflow/lite/kernels/internal/reference/portable_tensor_utils.cc'
source_filename = "../../third_party/tflite/src/tensorflow/lite/kernels/internal/reference/portable_tensor_utils.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.tflite::CpuBackendContext" = type opaque

$_ZN6tflite12tensor_utils47PortableMatrixBatchVectorMultiplyAccumulateImplIsEEvPKaPKiS3_iiiiiiPT_ = comdat any

$_ZN6tflite12tensor_utils47PortableMatrixBatchVectorMultiplyAccumulateImplIaEEvPKaPKiS3_iiiiiiPT_ = comdat any

$_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_ = comdat any

$_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IsEENS_10FixedPointIT_Li0EEES3_ = comdat any

$_ZN8gemmlowp22exp_on_negative_valuesIsLi3EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE = comdat any

$_ZN8gemmlowp40one_minus_x_over_one_plus_x_for_x_in_0_1IsEENS_10FixedPointIT_Li0EEES3_ = comdat any

$_ZN8gemmlowp22exp_on_negative_valuesIsLi1EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE = comdat any

$_ZN8gemmlowp22exp_on_negative_valuesIsLi2EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE = comdat any

$_ZN8gemmlowp22exp_on_negative_valuesIsLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE = comdat any

$_ZN8gemmlowp22exp_on_negative_valuesIsLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE = comdat any

$_ZN8gemmlowp22exp_on_negative_valuesIsLi6EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE = comdat any

$_ZN8gemmlowp22exp_on_negative_valuesIsLi7EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE = comdat any

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6tflite12tensor_utils31PortableSymmetricQuantizeFloatsEPKfiPaPfS4_S4_(float*, i32, i8* nocapture, float* nocapture, float* nocapture, float* nocapture) local_unnamed_addr #0 {
  %7 = bitcast float* %0 to i8*
  %8 = sext i32 %1 to i64
  %9 = getelementptr inbounds float, float* %0, i64 %8
  %10 = ptrtoint float* %0 to i64
  %11 = icmp eq i32 %1, 0
  br i1 %11, label %73, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds float, float* %0, i64 1
  %14 = ptrtoint float* %13 to i64
  %15 = icmp eq i32 %1, 1
  br i1 %15, label %73, label %16

16:                                               ; preds = %12
  %17 = load float, float* %13, align 4
  %18 = load float, float* %0, align 4
  %19 = fcmp olt float %17, %18
  %20 = select i1 %19, i64 %10, i64 %14
  %21 = select i1 %19, i64 %14, i64 %10
  %22 = icmp eq i32 %1, 2
  br i1 %22, label %73, label %23

23:                                               ; preds = %16
  %24 = getelementptr inbounds float, float* %0, i64 2
  br label %25

25:                                               ; preds = %23, %68
  %26 = phi float* [ %71, %68 ], [ %24, %23 ]
  %27 = phi float* [ %30, %68 ], [ %13, %23 ]
  %28 = phi i64 [ %70, %68 ], [ %21, %23 ]
  %29 = phi i64 [ %69, %68 ], [ %20, %23 ]
  %30 = getelementptr inbounds float, float* %27, i64 2
  %31 = ptrtoint float* %30 to i64
  %32 = icmp eq float* %30, %9
  br i1 %32, label %33, label %46

33:                                               ; preds = %25
  %34 = inttoptr i64 %28 to float*
  %35 = load float, float* %26, align 4
  %36 = load float, float* %34, align 4
  %37 = fcmp olt float %35, %36
  br i1 %37, label %38, label %40

38:                                               ; preds = %33
  %39 = ptrtoint float* %26 to i64
  br label %73

40:                                               ; preds = %33
  %41 = inttoptr i64 %29 to float*
  %42 = load float, float* %41, align 4
  %43 = fcmp olt float %35, %42
  br i1 %43, label %73, label %44

44:                                               ; preds = %40
  %45 = ptrtoint float* %26 to i64
  br label %73

46:                                               ; preds = %25
  %47 = load float, float* %30, align 4
  %48 = load float, float* %26, align 4
  %49 = fcmp olt float %47, %48
  %50 = inttoptr i64 %28 to float*
  %51 = load float, float* %50, align 4
  br i1 %49, label %52, label %60

52:                                               ; preds = %46
  %53 = fcmp olt float %47, %51
  %54 = select i1 %53, i64 %31, i64 %28
  %55 = inttoptr i64 %29 to float*
  %56 = load float, float* %55, align 4
  %57 = fcmp olt float %48, %56
  br i1 %57, label %68, label %58

58:                                               ; preds = %52
  %59 = ptrtoint float* %26 to i64
  br label %68

60:                                               ; preds = %46
  %61 = fcmp olt float %48, %51
  %62 = ptrtoint float* %26 to i64
  %63 = select i1 %61, i64 %62, i64 %28
  %64 = inttoptr i64 %29 to float*
  %65 = load float, float* %64, align 4
  %66 = fcmp olt float %47, %65
  br i1 %66, label %68, label %67

67:                                               ; preds = %60
  br label %68

68:                                               ; preds = %67, %60, %58, %52
  %69 = phi i64 [ %29, %52 ], [ %59, %58 ], [ %29, %60 ], [ %31, %67 ]
  %70 = phi i64 [ %54, %52 ], [ %54, %58 ], [ %63, %60 ], [ %63, %67 ]
  %71 = getelementptr inbounds float, float* %27, i64 3
  %72 = icmp eq float* %71, %9
  br i1 %72, label %73, label %25

73:                                               ; preds = %68, %6, %12, %16, %38, %40, %44
  %74 = phi i64 [ %10, %6 ], [ %10, %12 ], [ %29, %38 ], [ %29, %40 ], [ %45, %44 ], [ %20, %16 ], [ %69, %68 ]
  %75 = phi i64 [ %10, %6 ], [ %10, %12 ], [ %39, %38 ], [ %28, %40 ], [ %28, %44 ], [ %21, %16 ], [ %70, %68 ]
  %76 = inttoptr i64 %74 to float*
  %77 = inttoptr i64 %75 to i32*
  %78 = load i32, i32* %77, align 4
  %79 = bitcast float* %3 to i32*
  store i32 %78, i32* %79, align 4
  %80 = load float, float* %76, align 4
  store float %80, float* %4, align 4
  %81 = load float, float* %3, align 4
  %82 = tail call float @llvm.fabs.f32(float %81) #9
  %83 = tail call float @llvm.fabs.f32(float %80) #9
  %84 = fcmp olt float %82, %83
  %85 = select i1 %84, float %83, float %82
  %86 = fcmp oeq float %85, 0.000000e+00
  br i1 %86, label %87, label %88

87:                                               ; preds = %73
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %2, i8 0, i64 %8, i1 false) #9
  store float 1.000000e+00, float* %5, align 4
  br label %214

88:                                               ; preds = %73
  %89 = fdiv float %85, 1.270000e+02
  store float %89, float* %5, align 4
  %90 = fdiv float 1.270000e+02, %85
  %91 = icmp sgt i32 %1, 0
  br i1 %91, label %92, label %214

92:                                               ; preds = %88
  %93 = zext i32 %1 to i64
  %94 = icmp ult i32 %1, 4
  br i1 %94, label %165, label %95

95:                                               ; preds = %92
  %96 = getelementptr i8, i8* %2, i64 %93
  %97 = getelementptr float, float* %0, i64 %93
  %98 = bitcast float* %97 to i8*
  %99 = icmp ugt i8* %98, %2
  %100 = icmp ugt i8* %96, %7
  %101 = and i1 %99, %100
  br i1 %101, label %165, label %102

102:                                              ; preds = %95
  %103 = and i64 %93, 4294967292
  %104 = insertelement <4 x float> undef, float %90, i32 0
  %105 = shufflevector <4 x float> %104, <4 x float> undef, <4 x i32> zeroinitializer
  %106 = add nsw i64 %103, -4
  %107 = lshr exact i64 %106, 2
  %108 = add nuw nsw i64 %107, 1
  %109 = and i64 %108, 1
  %110 = icmp eq i64 %106, 0
  br i1 %110, label %146, label %111

111:                                              ; preds = %102
  %112 = sub nuw nsw i64 %108, %109
  br label %113

113:                                              ; preds = %113, %111
  %114 = phi i64 [ 0, %111 ], [ %143, %113 ]
  %115 = phi i64 [ %112, %111 ], [ %144, %113 ]
  %116 = getelementptr inbounds float, float* %0, i64 %114
  %117 = bitcast float* %116 to <4 x float>*
  %118 = load <4 x float>, <4 x float>* %117, align 4, !alias.scope !2
  %119 = fmul <4 x float> %105, %118
  %120 = call <4 x float> @llvm.round.v4f32(<4 x float> %119)
  %121 = fptosi <4 x float> %120 to <4 x i32>
  %122 = icmp sgt <4 x i32> %121, <i32 -127, i32 -127, i32 -127, i32 -127>
  %123 = select <4 x i1> %122, <4 x i32> %121, <4 x i32> <i32 -127, i32 -127, i32 -127, i32 -127>
  %124 = icmp slt <4 x i32> %123, <i32 127, i32 127, i32 127, i32 127>
  %125 = select <4 x i1> %124, <4 x i32> %123, <4 x i32> <i32 127, i32 127, i32 127, i32 127>
  %126 = trunc <4 x i32> %125 to <4 x i8>
  %127 = getelementptr inbounds i8, i8* %2, i64 %114
  %128 = bitcast i8* %127 to <4 x i8>*
  store <4 x i8> %126, <4 x i8>* %128, align 1, !alias.scope !5, !noalias !2
  %129 = or i64 %114, 4
  %130 = getelementptr inbounds float, float* %0, i64 %129
  %131 = bitcast float* %130 to <4 x float>*
  %132 = load <4 x float>, <4 x float>* %131, align 4, !alias.scope !2
  %133 = fmul <4 x float> %105, %132
  %134 = call <4 x float> @llvm.round.v4f32(<4 x float> %133)
  %135 = fptosi <4 x float> %134 to <4 x i32>
  %136 = icmp sgt <4 x i32> %135, <i32 -127, i32 -127, i32 -127, i32 -127>
  %137 = select <4 x i1> %136, <4 x i32> %135, <4 x i32> <i32 -127, i32 -127, i32 -127, i32 -127>
  %138 = icmp slt <4 x i32> %137, <i32 127, i32 127, i32 127, i32 127>
  %139 = select <4 x i1> %138, <4 x i32> %137, <4 x i32> <i32 127, i32 127, i32 127, i32 127>
  %140 = trunc <4 x i32> %139 to <4 x i8>
  %141 = getelementptr inbounds i8, i8* %2, i64 %129
  %142 = bitcast i8* %141 to <4 x i8>*
  store <4 x i8> %140, <4 x i8>* %142, align 1, !alias.scope !5, !noalias !2
  %143 = add i64 %114, 8
  %144 = add i64 %115, -2
  %145 = icmp eq i64 %144, 0
  br i1 %145, label %146, label %113, !llvm.loop !7

146:                                              ; preds = %113, %102
  %147 = phi i64 [ 0, %102 ], [ %143, %113 ]
  %148 = icmp eq i64 %109, 0
  br i1 %148, label %163, label %149

149:                                              ; preds = %146
  %150 = getelementptr inbounds float, float* %0, i64 %147
  %151 = bitcast float* %150 to <4 x float>*
  %152 = load <4 x float>, <4 x float>* %151, align 4, !alias.scope !2
  %153 = fmul <4 x float> %105, %152
  %154 = call <4 x float> @llvm.round.v4f32(<4 x float> %153)
  %155 = fptosi <4 x float> %154 to <4 x i32>
  %156 = icmp sgt <4 x i32> %155, <i32 -127, i32 -127, i32 -127, i32 -127>
  %157 = select <4 x i1> %156, <4 x i32> %155, <4 x i32> <i32 -127, i32 -127, i32 -127, i32 -127>
  %158 = icmp slt <4 x i32> %157, <i32 127, i32 127, i32 127, i32 127>
  %159 = select <4 x i1> %158, <4 x i32> %157, <4 x i32> <i32 127, i32 127, i32 127, i32 127>
  %160 = trunc <4 x i32> %159 to <4 x i8>
  %161 = getelementptr inbounds i8, i8* %2, i64 %147
  %162 = bitcast i8* %161 to <4 x i8>*
  store <4 x i8> %160, <4 x i8>* %162, align 1, !alias.scope !5, !noalias !2
  br label %163

163:                                              ; preds = %146, %149
  %164 = icmp eq i64 %103, %93
  br i1 %164, label %214, label %165

165:                                              ; preds = %163, %95, %92
  %166 = phi i64 [ 0, %95 ], [ 0, %92 ], [ %103, %163 ]
  %167 = xor i64 %166, -1
  %168 = and i64 %93, 1
  %169 = icmp eq i64 %168, 0
  br i1 %169, label %183, label %170

170:                                              ; preds = %165
  %171 = getelementptr inbounds float, float* %0, i64 %166
  %172 = load float, float* %171, align 4
  %173 = fmul float %90, %172
  %174 = tail call float @llvm.round.f32(float %173) #9
  %175 = fptosi float %174 to i32
  %176 = icmp sgt i32 %175, -127
  %177 = select i1 %176, i32 %175, i32 -127
  %178 = icmp slt i32 %177, 127
  %179 = select i1 %178, i32 %177, i32 127
  %180 = trunc i32 %179 to i8
  %181 = getelementptr inbounds i8, i8* %2, i64 %166
  store i8 %180, i8* %181, align 1
  %182 = or i64 %166, 1
  br label %183

183:                                              ; preds = %165, %170
  %184 = phi i64 [ %166, %165 ], [ %182, %170 ]
  %185 = sub nsw i64 0, %93
  %186 = icmp eq i64 %167, %185
  br i1 %186, label %214, label %187

187:                                              ; preds = %183, %187
  %188 = phi i64 [ %212, %187 ], [ %184, %183 ]
  %189 = getelementptr inbounds float, float* %0, i64 %188
  %190 = load float, float* %189, align 4
  %191 = fmul float %90, %190
  %192 = tail call float @llvm.round.f32(float %191) #9
  %193 = fptosi float %192 to i32
  %194 = icmp sgt i32 %193, -127
  %195 = select i1 %194, i32 %193, i32 -127
  %196 = icmp slt i32 %195, 127
  %197 = select i1 %196, i32 %195, i32 127
  %198 = trunc i32 %197 to i8
  %199 = getelementptr inbounds i8, i8* %2, i64 %188
  store i8 %198, i8* %199, align 1
  %200 = add nuw nsw i64 %188, 1
  %201 = getelementptr inbounds float, float* %0, i64 %200
  %202 = load float, float* %201, align 4
  %203 = fmul float %90, %202
  %204 = tail call float @llvm.round.f32(float %203) #9
  %205 = fptosi float %204 to i32
  %206 = icmp sgt i32 %205, -127
  %207 = select i1 %206, i32 %205, i32 -127
  %208 = icmp slt i32 %207, 127
  %209 = select i1 %208, i32 %207, i32 127
  %210 = trunc i32 %209 to i8
  %211 = getelementptr inbounds i8, i8* %2, i64 %200
  store i8 %210, i8* %211, align 1
  %212 = add nuw nsw i64 %188, 2
  %213 = icmp eq i64 %212, %93
  br i1 %213, label %214, label %187, !llvm.loop !9

214:                                              ; preds = %183, %187, %163, %87, %88
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6tflite12tensor_utils31PortableSymmetricQuantizeFloatsEPKfiPaffPf(float* nocapture readonly, i32, i8* nocapture, float, float, float* nocapture) local_unnamed_addr #0 {
  %7 = bitcast float* %0 to i8*
  %8 = tail call float @llvm.fabs.f32(float %3) #9
  %9 = tail call float @llvm.fabs.f32(float %4) #9
  %10 = fcmp olt float %8, %9
  %11 = select i1 %10, float %9, float %8
  %12 = fcmp oeq float %11, 0.000000e+00
  br i1 %12, label %13, label %15

13:                                               ; preds = %6
  %14 = sext i32 %1 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %2, i8 0, i64 %14, i1 false)
  store float 1.000000e+00, float* %5, align 4
  br label %141

15:                                               ; preds = %6
  %16 = fdiv float %11, 1.270000e+02
  store float %16, float* %5, align 4
  %17 = fdiv float 1.270000e+02, %11
  %18 = icmp sgt i32 %1, 0
  br i1 %18, label %19, label %141

19:                                               ; preds = %15
  %20 = zext i32 %1 to i64
  %21 = icmp ult i32 %1, 4
  br i1 %21, label %92, label %22

22:                                               ; preds = %19
  %23 = getelementptr i8, i8* %2, i64 %20
  %24 = getelementptr float, float* %0, i64 %20
  %25 = bitcast float* %24 to i8*
  %26 = icmp ugt i8* %25, %2
  %27 = icmp ugt i8* %23, %7
  %28 = and i1 %26, %27
  br i1 %28, label %92, label %29

29:                                               ; preds = %22
  %30 = and i64 %20, 4294967292
  %31 = insertelement <4 x float> undef, float %17, i32 0
  %32 = shufflevector <4 x float> %31, <4 x float> undef, <4 x i32> zeroinitializer
  %33 = add nsw i64 %30, -4
  %34 = lshr exact i64 %33, 2
  %35 = add nuw nsw i64 %34, 1
  %36 = and i64 %35, 1
  %37 = icmp eq i64 %33, 0
  br i1 %37, label %73, label %38

38:                                               ; preds = %29
  %39 = sub nuw nsw i64 %35, %36
  br label %40

40:                                               ; preds = %40, %38
  %41 = phi i64 [ 0, %38 ], [ %70, %40 ]
  %42 = phi i64 [ %39, %38 ], [ %71, %40 ]
  %43 = getelementptr inbounds float, float* %0, i64 %41
  %44 = bitcast float* %43 to <4 x float>*
  %45 = load <4 x float>, <4 x float>* %44, align 4, !alias.scope !10
  %46 = fmul <4 x float> %32, %45
  %47 = call <4 x float> @llvm.round.v4f32(<4 x float> %46)
  %48 = fptosi <4 x float> %47 to <4 x i32>
  %49 = icmp sgt <4 x i32> %48, <i32 -127, i32 -127, i32 -127, i32 -127>
  %50 = select <4 x i1> %49, <4 x i32> %48, <4 x i32> <i32 -127, i32 -127, i32 -127, i32 -127>
  %51 = icmp slt <4 x i32> %50, <i32 127, i32 127, i32 127, i32 127>
  %52 = select <4 x i1> %51, <4 x i32> %50, <4 x i32> <i32 127, i32 127, i32 127, i32 127>
  %53 = trunc <4 x i32> %52 to <4 x i8>
  %54 = getelementptr inbounds i8, i8* %2, i64 %41
  %55 = bitcast i8* %54 to <4 x i8>*
  store <4 x i8> %53, <4 x i8>* %55, align 1, !alias.scope !13, !noalias !10
  %56 = or i64 %41, 4
  %57 = getelementptr inbounds float, float* %0, i64 %56
  %58 = bitcast float* %57 to <4 x float>*
  %59 = load <4 x float>, <4 x float>* %58, align 4, !alias.scope !10
  %60 = fmul <4 x float> %32, %59
  %61 = call <4 x float> @llvm.round.v4f32(<4 x float> %60)
  %62 = fptosi <4 x float> %61 to <4 x i32>
  %63 = icmp sgt <4 x i32> %62, <i32 -127, i32 -127, i32 -127, i32 -127>
  %64 = select <4 x i1> %63, <4 x i32> %62, <4 x i32> <i32 -127, i32 -127, i32 -127, i32 -127>
  %65 = icmp slt <4 x i32> %64, <i32 127, i32 127, i32 127, i32 127>
  %66 = select <4 x i1> %65, <4 x i32> %64, <4 x i32> <i32 127, i32 127, i32 127, i32 127>
  %67 = trunc <4 x i32> %66 to <4 x i8>
  %68 = getelementptr inbounds i8, i8* %2, i64 %56
  %69 = bitcast i8* %68 to <4 x i8>*
  store <4 x i8> %67, <4 x i8>* %69, align 1, !alias.scope !13, !noalias !10
  %70 = add i64 %41, 8
  %71 = add i64 %42, -2
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %40, !llvm.loop !15

73:                                               ; preds = %40, %29
  %74 = phi i64 [ 0, %29 ], [ %70, %40 ]
  %75 = icmp eq i64 %36, 0
  br i1 %75, label %90, label %76

76:                                               ; preds = %73
  %77 = getelementptr inbounds float, float* %0, i64 %74
  %78 = bitcast float* %77 to <4 x float>*
  %79 = load <4 x float>, <4 x float>* %78, align 4, !alias.scope !10
  %80 = fmul <4 x float> %32, %79
  %81 = call <4 x float> @llvm.round.v4f32(<4 x float> %80)
  %82 = fptosi <4 x float> %81 to <4 x i32>
  %83 = icmp sgt <4 x i32> %82, <i32 -127, i32 -127, i32 -127, i32 -127>
  %84 = select <4 x i1> %83, <4 x i32> %82, <4 x i32> <i32 -127, i32 -127, i32 -127, i32 -127>
  %85 = icmp slt <4 x i32> %84, <i32 127, i32 127, i32 127, i32 127>
  %86 = select <4 x i1> %85, <4 x i32> %84, <4 x i32> <i32 127, i32 127, i32 127, i32 127>
  %87 = trunc <4 x i32> %86 to <4 x i8>
  %88 = getelementptr inbounds i8, i8* %2, i64 %74
  %89 = bitcast i8* %88 to <4 x i8>*
  store <4 x i8> %87, <4 x i8>* %89, align 1, !alias.scope !13, !noalias !10
  br label %90

90:                                               ; preds = %73, %76
  %91 = icmp eq i64 %30, %20
  br i1 %91, label %141, label %92

92:                                               ; preds = %90, %22, %19
  %93 = phi i64 [ 0, %22 ], [ 0, %19 ], [ %30, %90 ]
  %94 = xor i64 %93, -1
  %95 = and i64 %20, 1
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %110, label %97

97:                                               ; preds = %92
  %98 = getelementptr inbounds float, float* %0, i64 %93
  %99 = load float, float* %98, align 4
  %100 = fmul float %17, %99
  %101 = tail call float @llvm.round.f32(float %100) #9
  %102 = fptosi float %101 to i32
  %103 = icmp sgt i32 %102, -127
  %104 = select i1 %103, i32 %102, i32 -127
  %105 = icmp slt i32 %104, 127
  %106 = select i1 %105, i32 %104, i32 127
  %107 = trunc i32 %106 to i8
  %108 = getelementptr inbounds i8, i8* %2, i64 %93
  store i8 %107, i8* %108, align 1
  %109 = or i64 %93, 1
  br label %110

110:                                              ; preds = %92, %97
  %111 = phi i64 [ %93, %92 ], [ %109, %97 ]
  %112 = sub nsw i64 0, %20
  %113 = icmp eq i64 %94, %112
  br i1 %113, label %141, label %114

114:                                              ; preds = %110, %114
  %115 = phi i64 [ %139, %114 ], [ %111, %110 ]
  %116 = getelementptr inbounds float, float* %0, i64 %115
  %117 = load float, float* %116, align 4
  %118 = fmul float %17, %117
  %119 = tail call float @llvm.round.f32(float %118) #9
  %120 = fptosi float %119 to i32
  %121 = icmp sgt i32 %120, -127
  %122 = select i1 %121, i32 %120, i32 -127
  %123 = icmp slt i32 %122, 127
  %124 = select i1 %123, i32 %122, i32 127
  %125 = trunc i32 %124 to i8
  %126 = getelementptr inbounds i8, i8* %2, i64 %115
  store i8 %125, i8* %126, align 1
  %127 = add nuw nsw i64 %115, 1
  %128 = getelementptr inbounds float, float* %0, i64 %127
  %129 = load float, float* %128, align 4
  %130 = fmul float %17, %129
  %131 = tail call float @llvm.round.f32(float %130) #9
  %132 = fptosi float %131 to i32
  %133 = icmp sgt i32 %132, -127
  %134 = select i1 %133, i32 %132, i32 -127
  %135 = icmp slt i32 %134, 127
  %136 = select i1 %135, i32 %134, i32 127
  %137 = trunc i32 %136 to i8
  %138 = getelementptr inbounds i8, i8* %2, i64 %127
  store i8 %137, i8* %138, align 1
  %139 = add nuw nsw i64 %115, 2
  %140 = icmp eq i64 %139, %20
  br i1 %140, label %141, label %114, !llvm.loop !16

141:                                              ; preds = %110, %114, %90, %15, %13
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6tflite12tensor_utils32PortableAsymmetricQuantizeFloatsEPKfiPaPfPi(float*, i32, i8* nocapture, float* nocapture, i32* nocapture) local_unnamed_addr #0 {
  %6 = bitcast i32* %4 to i8*
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds float, float* %0, i64 %7
  %9 = ptrtoint float* %0 to i64
  %10 = icmp eq i32 %1, 0
  br i1 %10, label %72, label %11

11:                                               ; preds = %5
  %12 = getelementptr inbounds float, float* %0, i64 1
  %13 = ptrtoint float* %12 to i64
  %14 = icmp eq i32 %1, 1
  br i1 %14, label %72, label %15

15:                                               ; preds = %11
  %16 = load float, float* %12, align 4
  %17 = load float, float* %0, align 4
  %18 = fcmp olt float %16, %17
  %19 = select i1 %18, i64 %9, i64 %13
  %20 = select i1 %18, i64 %13, i64 %9
  %21 = icmp eq i32 %1, 2
  br i1 %21, label %72, label %22

22:                                               ; preds = %15
  %23 = getelementptr inbounds float, float* %0, i64 2
  br label %24

24:                                               ; preds = %22, %67
  %25 = phi float* [ %70, %67 ], [ %23, %22 ]
  %26 = phi float* [ %29, %67 ], [ %12, %22 ]
  %27 = phi i64 [ %69, %67 ], [ %20, %22 ]
  %28 = phi i64 [ %68, %67 ], [ %19, %22 ]
  %29 = getelementptr inbounds float, float* %26, i64 2
  %30 = ptrtoint float* %29 to i64
  %31 = icmp eq float* %29, %8
  br i1 %31, label %32, label %45

32:                                               ; preds = %24
  %33 = inttoptr i64 %27 to float*
  %34 = load float, float* %25, align 4
  %35 = load float, float* %33, align 4
  %36 = fcmp olt float %34, %35
  br i1 %36, label %37, label %39

37:                                               ; preds = %32
  %38 = ptrtoint float* %25 to i64
  br label %72

39:                                               ; preds = %32
  %40 = inttoptr i64 %28 to float*
  %41 = load float, float* %40, align 4
  %42 = fcmp olt float %34, %41
  br i1 %42, label %72, label %43

43:                                               ; preds = %39
  %44 = ptrtoint float* %25 to i64
  br label %72

45:                                               ; preds = %24
  %46 = load float, float* %29, align 4
  %47 = load float, float* %25, align 4
  %48 = fcmp olt float %46, %47
  %49 = inttoptr i64 %27 to float*
  %50 = load float, float* %49, align 4
  br i1 %48, label %51, label %59

51:                                               ; preds = %45
  %52 = fcmp olt float %46, %50
  %53 = select i1 %52, i64 %30, i64 %27
  %54 = inttoptr i64 %28 to float*
  %55 = load float, float* %54, align 4
  %56 = fcmp olt float %47, %55
  br i1 %56, label %67, label %57

57:                                               ; preds = %51
  %58 = ptrtoint float* %25 to i64
  br label %67

59:                                               ; preds = %45
  %60 = fcmp olt float %47, %50
  %61 = ptrtoint float* %25 to i64
  %62 = select i1 %60, i64 %61, i64 %27
  %63 = inttoptr i64 %28 to float*
  %64 = load float, float* %63, align 4
  %65 = fcmp olt float %46, %64
  br i1 %65, label %67, label %66

66:                                               ; preds = %59
  br label %67

67:                                               ; preds = %66, %59, %57, %51
  %68 = phi i64 [ %28, %51 ], [ %58, %57 ], [ %28, %59 ], [ %30, %66 ]
  %69 = phi i64 [ %53, %51 ], [ %53, %57 ], [ %62, %59 ], [ %62, %66 ]
  %70 = getelementptr inbounds float, float* %26, i64 3
  %71 = icmp eq float* %70, %8
  br i1 %71, label %72, label %24

72:                                               ; preds = %67, %5, %11, %15, %37, %39, %43
  %73 = phi i64 [ %9, %5 ], [ %9, %11 ], [ %28, %37 ], [ %28, %39 ], [ %44, %43 ], [ %19, %15 ], [ %68, %67 ]
  %74 = phi i64 [ %9, %5 ], [ %9, %11 ], [ %38, %37 ], [ %27, %39 ], [ %27, %43 ], [ %20, %15 ], [ %69, %67 ]
  %75 = inttoptr i64 %74 to float*
  %76 = inttoptr i64 %73 to float*
  %77 = load float, float* %75, align 4
  %78 = fpext float %77 to double
  %79 = tail call double @llvm.minnum.f64(double %78, double 0.000000e+00) #9
  %80 = load float, float* %76, align 4
  %81 = fpext float %80 to double
  %82 = tail call double @llvm.maxnum.f64(double %81, double 0.000000e+00) #9
  %83 = fcmp oeq double %79, %82
  br i1 %83, label %84, label %85

84:                                               ; preds = %72
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %2, i8 0, i64 %7, i1 false)
  store float 1.000000e+00, float* %3, align 4
  store i32 0, i32* %4, align 4
  br label %198

85:                                               ; preds = %72
  %86 = fsub double %82, %79
  %87 = fdiv double %86, 2.550000e+02
  %88 = insertelement <2 x double> undef, double %79, i32 0
  %89 = insertelement <2 x double> %88, double %82, i32 1
  %90 = insertelement <2 x double> undef, double %87, i32 0
  %91 = shufflevector <2 x double> %90, <2 x double> undef, <2 x i32> zeroinitializer
  %92 = fdiv <2 x double> %89, %91
  %93 = extractelement <2 x double> %92, i32 0
  %94 = fsub double -1.280000e+02, %93
  %95 = extractelement <2 x double> %92, i32 1
  %96 = fsub double 1.270000e+02, %95
  %97 = call <2 x double> @llvm.fabs.v2f64(<2 x double> %92)
  %98 = fadd <2 x double> %97, <double 1.280000e+02, double 1.270000e+02>
  %99 = extractelement <2 x double> %98, i32 0
  %100 = extractelement <2 x double> %98, i32 1
  %101 = fcmp olt double %99, %100
  %102 = select i1 %101, double %94, double %96
  %103 = fcmp ugt double %102, -1.280000e+02
  br i1 %103, label %104, label %110

104:                                              ; preds = %85
  %105 = fcmp ult double %102, 1.270000e+02
  br i1 %105, label %106, label %110

106:                                              ; preds = %104
  %107 = tail call double @llvm.round.f64(double %102)
  %108 = fptosi double %107 to i8
  %109 = sext i8 %108 to i32
  br label %110

110:                                              ; preds = %104, %85, %106
  %111 = phi i32 [ %109, %106 ], [ -128, %85 ], [ 127, %104 ]
  %112 = fptrunc double %87 to float
  store float %112, float* %3, align 4
  store i32 %111, i32* %4, align 4
  %113 = load float, float* %3, align 4
  %114 = fdiv float 1.000000e+00, %113
  %115 = icmp sgt i32 %1, 0
  br i1 %115, label %116, label %198

116:                                              ; preds = %110
  %117 = zext i32 %1 to i64
  %118 = sitofp i32 %111 to float
  %119 = load float, float* %0, align 4
  %120 = fmul float %114, %119
  %121 = fadd float %120, %118
  %122 = tail call float @llvm.round.f32(float %121) #9
  %123 = fptosi float %122 to i32
  %124 = icmp sgt i32 %123, -128
  %125 = select i1 %124, i32 %123, i32 -128
  %126 = icmp slt i32 %125, 127
  %127 = select i1 %126, i32 %125, i32 127
  %128 = trunc i32 %127 to i8
  store i8 %128, i8* %2, align 1
  %129 = icmp eq i32 %1, 1
  br i1 %129, label %198, label %130

130:                                              ; preds = %116
  %131 = add nsw i64 %117, -1
  %132 = icmp ult i64 %131, 4
  br i1 %132, label %178, label %133

133:                                              ; preds = %130
  %134 = getelementptr i8, i8* %2, i64 1
  %135 = getelementptr i8, i8* %2, i64 %117
  %136 = getelementptr float, float* %0, i64 1
  %137 = bitcast float* %136 to i8*
  %138 = getelementptr float, float* %0, i64 %117
  %139 = bitcast float* %138 to i8*
  %140 = bitcast i32* %4 to i8*
  %141 = icmp ugt i8* %6, %2
  %142 = icmp ugt i8* %135, %140
  %143 = and i1 %141, %142
  %144 = icmp ult i8* %134, %139
  %145 = icmp ugt i8* %135, %137
  %146 = and i1 %144, %145
  %147 = or i1 %143, %146
  br i1 %147, label %178, label %148

148:                                              ; preds = %133
  %149 = and i64 %131, -4
  %150 = or i64 %149, 1
  %151 = insertelement <4 x float> undef, float %114, i32 0
  %152 = shufflevector <4 x float> %151, <4 x float> undef, <4 x i32> zeroinitializer
  %153 = load i32, i32* %4, align 4, !alias.scope !17
  %154 = insertelement <4 x i32> undef, i32 %153, i32 0
  %155 = shufflevector <4 x i32> %154, <4 x i32> undef, <4 x i32> zeroinitializer
  %156 = sitofp <4 x i32> %155 to <4 x float>
  br label %157

157:                                              ; preds = %157, %148
  %158 = phi i64 [ 0, %148 ], [ %174, %157 ]
  %159 = or i64 %158, 1
  %160 = getelementptr inbounds float, float* %0, i64 %159
  %161 = bitcast float* %160 to <4 x float>*
  %162 = load <4 x float>, <4 x float>* %161, align 4, !alias.scope !20
  %163 = fmul <4 x float> %152, %162
  %164 = fadd <4 x float> %163, %156
  %165 = call <4 x float> @llvm.round.v4f32(<4 x float> %164)
  %166 = fptosi <4 x float> %165 to <4 x i32>
  %167 = icmp sgt <4 x i32> %166, <i32 -128, i32 -128, i32 -128, i32 -128>
  %168 = select <4 x i1> %167, <4 x i32> %166, <4 x i32> <i32 -128, i32 -128, i32 -128, i32 -128>
  %169 = icmp slt <4 x i32> %168, <i32 127, i32 127, i32 127, i32 127>
  %170 = select <4 x i1> %169, <4 x i32> %168, <4 x i32> <i32 127, i32 127, i32 127, i32 127>
  %171 = trunc <4 x i32> %170 to <4 x i8>
  %172 = getelementptr inbounds i8, i8* %2, i64 %159
  %173 = bitcast i8* %172 to <4 x i8>*
  store <4 x i8> %171, <4 x i8>* %173, align 1, !alias.scope !22, !noalias !24
  %174 = add i64 %158, 4
  %175 = icmp eq i64 %174, %149
  br i1 %175, label %176, label %157, !llvm.loop !25

176:                                              ; preds = %157
  %177 = icmp eq i64 %131, %149
  br i1 %177, label %198, label %178

178:                                              ; preds = %176, %133, %130
  %179 = phi i64 [ 1, %133 ], [ 1, %130 ], [ %150, %176 ]
  br label %180

180:                                              ; preds = %178, %180
  %181 = phi i64 [ %196, %180 ], [ %179, %178 ]
  %182 = load i32, i32* %4, align 4
  %183 = sitofp i32 %182 to float
  %184 = getelementptr inbounds float, float* %0, i64 %181
  %185 = load float, float* %184, align 4
  %186 = fmul float %114, %185
  %187 = fadd float %186, %183
  %188 = tail call float @llvm.round.f32(float %187) #9
  %189 = fptosi float %188 to i32
  %190 = icmp sgt i32 %189, -128
  %191 = select i1 %190, i32 %189, i32 -128
  %192 = icmp slt i32 %191, 127
  %193 = select i1 %192, i32 %191, i32 127
  %194 = trunc i32 %193 to i8
  %195 = getelementptr inbounds i8, i8* %2, i64 %181
  store i8 %194, i8* %195, align 1
  %196 = add nuw nsw i64 %181, 1
  %197 = icmp eq i64 %196, %117
  br i1 %197, label %198, label %180, !llvm.loop !26

198:                                              ; preds = %180, %116, %176, %110, %84
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.round.f64(double) #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6tflite12tensor_utils43PortableMatrixBatchVectorMultiplyAccumulateEPKfiiS2_iPf(float* nocapture readonly, i32, i32, float* nocapture readonly, i32, float* nocapture) local_unnamed_addr #3 {
  %7 = icmp sgt i32 %4, 0
  br i1 %7, label %8, label %26

8:                                                ; preds = %6
  %9 = icmp sgt i32 %1, 0
  %10 = icmp sgt i32 %2, 0
  %11 = add i32 %2, -1
  %12 = zext i32 %11 to i64
  %13 = add nuw nsw i64 %12, 1
  %14 = sext i32 %2 to i64
  %15 = zext i32 %4 to i64
  %16 = and i32 %2, 3
  %17 = icmp ult i32 %11, 3
  %18 = sub i32 %2, %16
  %19 = icmp eq i32 %16, 0
  br label %20

20:                                               ; preds = %27, %8
  %21 = phi i64 [ 0, %8 ], [ %29, %27 ]
  %22 = phi float* [ %5, %8 ], [ %28, %27 ]
  br i1 %9, label %23, label %27

23:                                               ; preds = %20
  %24 = mul nsw i64 %21, %14
  %25 = getelementptr inbounds float, float* %3, i64 %24
  br label %31

26:                                               ; preds = %27, %6
  ret void

27:                                               ; preds = %57, %20
  %28 = phi float* [ %22, %20 ], [ %62, %57 ]
  %29 = add nuw nsw i64 %21, 1
  %30 = icmp eq i64 %29, %15
  br i1 %30, label %26, label %20

31:                                               ; preds = %57, %23
  %32 = phi i32 [ 0, %23 ], [ %63, %57 ]
  %33 = phi float* [ %0, %23 ], [ %58, %57 ]
  %34 = phi float* [ %22, %23 ], [ %62, %57 ]
  br i1 %10, label %35, label %57

35:                                               ; preds = %31
  br i1 %17, label %36, label %65

36:                                               ; preds = %65, %35
  %37 = phi float [ undef, %35 ], [ %93, %65 ]
  %38 = phi float* [ %25, %35 ], [ %90, %65 ]
  %39 = phi float [ 0.000000e+00, %35 ], [ %93, %65 ]
  %40 = phi float* [ %33, %35 ], [ %88, %65 ]
  br i1 %19, label %54, label %41

41:                                               ; preds = %36, %41
  %42 = phi float* [ %48, %41 ], [ %38, %36 ]
  %43 = phi float [ %51, %41 ], [ %39, %36 ]
  %44 = phi float* [ %46, %41 ], [ %40, %36 ]
  %45 = phi i32 [ %52, %41 ], [ %16, %36 ]
  %46 = getelementptr inbounds float, float* %44, i64 1
  %47 = load float, float* %44, align 4
  %48 = getelementptr inbounds float, float* %42, i64 1
  %49 = load float, float* %42, align 4
  %50 = fmul float %47, %49
  %51 = fadd float %43, %50
  %52 = add i32 %45, -1
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %41, !llvm.loop !27

54:                                               ; preds = %41, %36
  %55 = phi float [ %37, %36 ], [ %51, %41 ]
  %56 = getelementptr float, float* %33, i64 %13
  br label %57

57:                                               ; preds = %54, %31
  %58 = phi float* [ %33, %31 ], [ %56, %54 ]
  %59 = phi float [ 0.000000e+00, %31 ], [ %55, %54 ]
  %60 = load float, float* %34, align 4
  %61 = fadd float %59, %60
  store float %61, float* %34, align 4
  %62 = getelementptr inbounds float, float* %34, i64 1
  %63 = add nuw nsw i32 %32, 1
  %64 = icmp eq i32 %63, %1
  br i1 %64, label %27, label %31

65:                                               ; preds = %35, %65
  %66 = phi float* [ %90, %65 ], [ %25, %35 ]
  %67 = phi float [ %93, %65 ], [ 0.000000e+00, %35 ]
  %68 = phi float* [ %88, %65 ], [ %33, %35 ]
  %69 = phi i32 [ %94, %65 ], [ %18, %35 ]
  %70 = getelementptr inbounds float, float* %68, i64 1
  %71 = load float, float* %68, align 4
  %72 = getelementptr inbounds float, float* %66, i64 1
  %73 = load float, float* %66, align 4
  %74 = fmul float %71, %73
  %75 = fadd float %67, %74
  %76 = getelementptr inbounds float, float* %68, i64 2
  %77 = load float, float* %70, align 4
  %78 = getelementptr inbounds float, float* %66, i64 2
  %79 = load float, float* %72, align 4
  %80 = fmul float %77, %79
  %81 = fadd float %75, %80
  %82 = getelementptr inbounds float, float* %68, i64 3
  %83 = load float, float* %76, align 4
  %84 = getelementptr inbounds float, float* %66, i64 3
  %85 = load float, float* %78, align 4
  %86 = fmul float %83, %85
  %87 = fadd float %81, %86
  %88 = getelementptr inbounds float, float* %68, i64 4
  %89 = load float, float* %82, align 4
  %90 = getelementptr inbounds float, float* %66, i64 4
  %91 = load float, float* %84, align 4
  %92 = fmul float %89, %91
  %93 = fadd float %87, %92
  %94 = add i32 %69, -4
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %36, label %65
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6tflite12tensor_utils43PortableMatrixBatchVectorMultiplyAccumulateEPKaiiS2_PKfiPf(i8* noalias nocapture readonly, i32, i32, i8* noalias nocapture readonly, float* nocapture readonly, i32, float* noalias nocapture) local_unnamed_addr #0 {
  %8 = icmp sgt i32 %5, 0
  br i1 %8, label %9, label %29

9:                                                ; preds = %7
  %10 = icmp sgt i32 %1, 0
  %11 = icmp sgt i32 %2, 0
  %12 = sext i32 %2 to i64
  %13 = add i32 %2, -1
  %14 = zext i32 %13 to i64
  %15 = add nuw nsw i64 %14, 1
  %16 = zext i32 %5 to i64
  %17 = zext i32 %2 to i64
  %18 = and i64 %17, 4294967288
  %19 = add nsw i64 %18, -8
  %20 = lshr exact i64 %19, 3
  %21 = add nuw nsw i64 %20, 1
  %22 = icmp ult i32 %2, 8
  %23 = and i64 %17, 4294967288
  %24 = and i64 %21, 1
  %25 = icmp eq i64 %19, 0
  %26 = sub nuw nsw i64 %21, %24
  %27 = icmp eq i64 %24, 0
  %28 = icmp eq i64 %23, %17
  br label %30

29:                                               ; preds = %36, %7
  ret void

30:                                               ; preds = %36, %9
  %31 = phi i64 [ 0, %9 ], [ %38, %36 ]
  %32 = phi float* [ %6, %9 ], [ %37, %36 ]
  %33 = phi i8* [ %3, %9 ], [ %39, %36 ]
  %34 = getelementptr inbounds float, float* %4, i64 %31
  %35 = load float, float* %34, align 4
  br i1 %10, label %41, label %36

36:                                               ; preds = %140, %30
  %37 = phi float* [ %32, %30 ], [ %147, %140 ]
  %38 = add nuw nsw i64 %31, 1
  %39 = getelementptr inbounds i8, i8* %33, i64 %12
  %40 = icmp eq i64 %38, %16
  br i1 %40, label %29, label %30

41:                                               ; preds = %30, %140
  %42 = phi i32 [ %148, %140 ], [ 0, %30 ]
  %43 = phi i8* [ %141, %140 ], [ %0, %30 ]
  %44 = phi float* [ %147, %140 ], [ %32, %30 ]
  tail call void @llvm.prefetch(i8* %43, i32 0, i32 3, i32 1)
  br i1 %11, label %45, label %140

45:                                               ; preds = %41
  br i1 %22, label %46, label %50

46:                                               ; preds = %128, %45
  %47 = phi i64 [ 0, %45 ], [ %23, %128 ]
  %48 = phi i32 [ 0, %45 ], [ %136, %128 ]
  %49 = phi i8* [ %43, %45 ], [ %51, %128 ]
  br label %150

50:                                               ; preds = %45
  %51 = getelementptr i8, i8* %43, i64 %23
  br i1 %25, label %101, label %52

52:                                               ; preds = %50, %52
  %53 = phi i64 [ %98, %52 ], [ 0, %50 ]
  %54 = phi <4 x i32> [ %96, %52 ], [ zeroinitializer, %50 ]
  %55 = phi <4 x i32> [ %97, %52 ], [ zeroinitializer, %50 ]
  %56 = phi i64 [ %99, %52 ], [ %26, %50 ]
  %57 = getelementptr i8, i8* %43, i64 %53
  %58 = bitcast i8* %57 to <4 x i8>*
  %59 = load <4 x i8>, <4 x i8>* %58, align 1
  %60 = getelementptr i8, i8* %57, i64 4
  %61 = bitcast i8* %60 to <4 x i8>*
  %62 = load <4 x i8>, <4 x i8>* %61, align 1
  %63 = sext <4 x i8> %59 to <4 x i32>
  %64 = sext <4 x i8> %62 to <4 x i32>
  %65 = getelementptr inbounds i8, i8* %33, i64 %53
  %66 = bitcast i8* %65 to <4 x i8>*
  %67 = load <4 x i8>, <4 x i8>* %66, align 1
  %68 = getelementptr inbounds i8, i8* %65, i64 4
  %69 = bitcast i8* %68 to <4 x i8>*
  %70 = load <4 x i8>, <4 x i8>* %69, align 1
  %71 = sext <4 x i8> %67 to <4 x i32>
  %72 = sext <4 x i8> %70 to <4 x i32>
  %73 = mul nsw <4 x i32> %71, %63
  %74 = mul nsw <4 x i32> %72, %64
  %75 = add nsw <4 x i32> %73, %54
  %76 = add nsw <4 x i32> %74, %55
  %77 = or i64 %53, 8
  %78 = getelementptr i8, i8* %43, i64 %77
  %79 = bitcast i8* %78 to <4 x i8>*
  %80 = load <4 x i8>, <4 x i8>* %79, align 1
  %81 = getelementptr i8, i8* %78, i64 4
  %82 = bitcast i8* %81 to <4 x i8>*
  %83 = load <4 x i8>, <4 x i8>* %82, align 1
  %84 = sext <4 x i8> %80 to <4 x i32>
  %85 = sext <4 x i8> %83 to <4 x i32>
  %86 = getelementptr inbounds i8, i8* %33, i64 %77
  %87 = bitcast i8* %86 to <4 x i8>*
  %88 = load <4 x i8>, <4 x i8>* %87, align 1
  %89 = getelementptr inbounds i8, i8* %86, i64 4
  %90 = bitcast i8* %89 to <4 x i8>*
  %91 = load <4 x i8>, <4 x i8>* %90, align 1
  %92 = sext <4 x i8> %88 to <4 x i32>
  %93 = sext <4 x i8> %91 to <4 x i32>
  %94 = mul nsw <4 x i32> %92, %84
  %95 = mul nsw <4 x i32> %93, %85
  %96 = add nsw <4 x i32> %94, %75
  %97 = add nsw <4 x i32> %95, %76
  %98 = add i64 %53, 16
  %99 = add i64 %56, -2
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %101, label %52, !llvm.loop !29

101:                                              ; preds = %52, %50
  %102 = phi <4 x i32> [ undef, %50 ], [ %96, %52 ]
  %103 = phi <4 x i32> [ undef, %50 ], [ %97, %52 ]
  %104 = phi i64 [ 0, %50 ], [ %98, %52 ]
  %105 = phi <4 x i32> [ zeroinitializer, %50 ], [ %96, %52 ]
  %106 = phi <4 x i32> [ zeroinitializer, %50 ], [ %97, %52 ]
  br i1 %27, label %128, label %107

107:                                              ; preds = %101
  %108 = getelementptr i8, i8* %43, i64 %104
  %109 = getelementptr inbounds i8, i8* %33, i64 %104
  %110 = getelementptr inbounds i8, i8* %109, i64 4
  %111 = bitcast i8* %110 to <4 x i8>*
  %112 = load <4 x i8>, <4 x i8>* %111, align 1
  %113 = sext <4 x i8> %112 to <4 x i32>
  %114 = getelementptr i8, i8* %108, i64 4
  %115 = bitcast i8* %114 to <4 x i8>*
  %116 = load <4 x i8>, <4 x i8>* %115, align 1
  %117 = sext <4 x i8> %116 to <4 x i32>
  %118 = mul nsw <4 x i32> %113, %117
  %119 = add nsw <4 x i32> %118, %106
  %120 = bitcast i8* %109 to <4 x i8>*
  %121 = load <4 x i8>, <4 x i8>* %120, align 1
  %122 = sext <4 x i8> %121 to <4 x i32>
  %123 = bitcast i8* %108 to <4 x i8>*
  %124 = load <4 x i8>, <4 x i8>* %123, align 1
  %125 = sext <4 x i8> %124 to <4 x i32>
  %126 = mul nsw <4 x i32> %122, %125
  %127 = add nsw <4 x i32> %126, %105
  br label %128

128:                                              ; preds = %101, %107
  %129 = phi <4 x i32> [ %102, %101 ], [ %127, %107 ]
  %130 = phi <4 x i32> [ %103, %101 ], [ %119, %107 ]
  %131 = add <4 x i32> %130, %129
  %132 = shufflevector <4 x i32> %131, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %133 = add <4 x i32> %131, %132
  %134 = shufflevector <4 x i32> %133, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %135 = add <4 x i32> %133, %134
  %136 = extractelement <4 x i32> %135, i32 0
  br i1 %28, label %137, label %46

137:                                              ; preds = %150, %128
  %138 = phi i32 [ %136, %128 ], [ %160, %150 ]
  %139 = getelementptr i8, i8* %43, i64 %15
  br label %140

140:                                              ; preds = %137, %41
  %141 = phi i8* [ %43, %41 ], [ %139, %137 ]
  %142 = phi i32 [ 0, %41 ], [ %138, %137 ]
  %143 = sitofp i32 %142 to float
  %144 = fmul float %35, %143
  %145 = load float, float* %44, align 4
  %146 = fadd float %144, %145
  store float %146, float* %44, align 4
  %147 = getelementptr inbounds float, float* %44, i64 1
  %148 = add nuw nsw i32 %42, 1
  %149 = icmp eq i32 %148, %1
  br i1 %149, label %36, label %41

150:                                              ; preds = %46, %150
  %151 = phi i64 [ %161, %150 ], [ %47, %46 ]
  %152 = phi i32 [ %160, %150 ], [ %48, %46 ]
  %153 = phi i8* [ %162, %150 ], [ %49, %46 ]
  %154 = load i8, i8* %153, align 1
  %155 = sext i8 %154 to i32
  %156 = getelementptr inbounds i8, i8* %33, i64 %151
  %157 = load i8, i8* %156, align 1
  %158 = sext i8 %157 to i32
  %159 = mul nsw i32 %158, %155
  %160 = add nsw i32 %159, %152
  %161 = add nuw nsw i64 %151, 1
  %162 = getelementptr inbounds i8, i8* %153, i64 1
  %163 = icmp eq i64 %161, %17
  br i1 %163, label %137, label %150, !llvm.loop !30
}

; Function Attrs: inaccessiblemem_or_argmemonly nounwind
declare void @llvm.prefetch(i8* nocapture readonly, i32 immarg, i32 immarg, i32) #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6tflite12tensor_utils43PortableMatrixBatchVectorMultiplyAccumulateEPKaiiS2_PKfiPfS4_PKiPiS8_PbPNS_17CpuBackendContextE(i8* noalias nocapture readonly, i32, i32, i8* noalias nocapture readonly, float* nocapture readonly, i32, float* noalias nocapture, float* readonly, i32* readonly, i32* nocapture readnone, i32* nocapture, i8*, %"class.tflite::CpuBackendContext"* nocapture readnone) local_unnamed_addr #0 {
  %14 = icmp eq i32* %8, null
  br i1 %14, label %15, label %171

15:                                               ; preds = %13
  %16 = icmp sgt i32 %5, 0
  br i1 %16, label %17, label %469

17:                                               ; preds = %15
  %18 = icmp sgt i32 %1, 0
  %19 = icmp sgt i32 %2, 0
  %20 = sext i32 %2 to i64
  %21 = add i32 %2, -1
  %22 = zext i32 %21 to i64
  %23 = add nuw nsw i64 %22, 1
  %24 = zext i32 %5 to i64
  %25 = zext i32 %2 to i64
  %26 = and i64 %25, 4294967288
  %27 = add nsw i64 %26, -8
  %28 = lshr exact i64 %27, 3
  %29 = add nuw nsw i64 %28, 1
  %30 = icmp ult i32 %2, 8
  %31 = and i64 %25, 4294967288
  %32 = and i64 %29, 1
  %33 = icmp eq i64 %27, 0
  %34 = sub nuw nsw i64 %29, %32
  %35 = icmp eq i64 %32, 0
  %36 = icmp eq i64 %31, %25
  br label %37

37:                                               ; preds = %43, %17
  %38 = phi i64 [ 0, %17 ], [ %45, %43 ]
  %39 = phi float* [ %6, %17 ], [ %44, %43 ]
  %40 = phi i8* [ %3, %17 ], [ %46, %43 ]
  %41 = getelementptr inbounds float, float* %4, i64 %38
  %42 = load float, float* %41, align 4, !noalias !32
  br i1 %18, label %48, label %43

43:                                               ; preds = %147, %37
  %44 = phi float* [ %39, %37 ], [ %154, %147 ]
  %45 = add nuw nsw i64 %38, 1
  %46 = getelementptr inbounds i8, i8* %40, i64 %20
  %47 = icmp eq i64 %45, %24
  br i1 %47, label %469, label %37

48:                                               ; preds = %37, %147
  %49 = phi i32 [ %155, %147 ], [ 0, %37 ]
  %50 = phi i8* [ %148, %147 ], [ %0, %37 ]
  %51 = phi float* [ %154, %147 ], [ %39, %37 ]
  tail call void @llvm.prefetch(i8* %50, i32 0, i32 3, i32 1) #9, !noalias !37
  br i1 %19, label %52, label %147

52:                                               ; preds = %48
  br i1 %30, label %53, label %57

53:                                               ; preds = %135, %52
  %54 = phi i64 [ 0, %52 ], [ %31, %135 ]
  %55 = phi i32 [ 0, %52 ], [ %143, %135 ]
  %56 = phi i8* [ %50, %52 ], [ %58, %135 ]
  br label %157

57:                                               ; preds = %52
  %58 = getelementptr i8, i8* %50, i64 %31
  br i1 %33, label %108, label %59

59:                                               ; preds = %57, %59
  %60 = phi i64 [ %105, %59 ], [ 0, %57 ]
  %61 = phi <4 x i32> [ %103, %59 ], [ zeroinitializer, %57 ]
  %62 = phi <4 x i32> [ %104, %59 ], [ zeroinitializer, %57 ]
  %63 = phi i64 [ %106, %59 ], [ %34, %57 ]
  %64 = getelementptr i8, i8* %50, i64 %60
  %65 = bitcast i8* %64 to <4 x i8>*
  %66 = load <4 x i8>, <4 x i8>* %65, align 1, !alias.scope !38, !noalias !37
  %67 = getelementptr i8, i8* %64, i64 4
  %68 = bitcast i8* %67 to <4 x i8>*
  %69 = load <4 x i8>, <4 x i8>* %68, align 1, !alias.scope !38, !noalias !37
  %70 = sext <4 x i8> %66 to <4 x i32>
  %71 = sext <4 x i8> %69 to <4 x i32>
  %72 = getelementptr inbounds i8, i8* %40, i64 %60
  %73 = bitcast i8* %72 to <4 x i8>*
  %74 = load <4 x i8>, <4 x i8>* %73, align 1, !alias.scope !39, !noalias !40
  %75 = getelementptr inbounds i8, i8* %72, i64 4
  %76 = bitcast i8* %75 to <4 x i8>*
  %77 = load <4 x i8>, <4 x i8>* %76, align 1, !alias.scope !39, !noalias !40
  %78 = sext <4 x i8> %74 to <4 x i32>
  %79 = sext <4 x i8> %77 to <4 x i32>
  %80 = mul nsw <4 x i32> %78, %70
  %81 = mul nsw <4 x i32> %79, %71
  %82 = add nsw <4 x i32> %80, %61
  %83 = add nsw <4 x i32> %81, %62
  %84 = or i64 %60, 8
  %85 = getelementptr i8, i8* %50, i64 %84
  %86 = bitcast i8* %85 to <4 x i8>*
  %87 = load <4 x i8>, <4 x i8>* %86, align 1, !alias.scope !38, !noalias !37
  %88 = getelementptr i8, i8* %85, i64 4
  %89 = bitcast i8* %88 to <4 x i8>*
  %90 = load <4 x i8>, <4 x i8>* %89, align 1, !alias.scope !38, !noalias !37
  %91 = sext <4 x i8> %87 to <4 x i32>
  %92 = sext <4 x i8> %90 to <4 x i32>
  %93 = getelementptr inbounds i8, i8* %40, i64 %84
  %94 = bitcast i8* %93 to <4 x i8>*
  %95 = load <4 x i8>, <4 x i8>* %94, align 1, !alias.scope !39, !noalias !40
  %96 = getelementptr inbounds i8, i8* %93, i64 4
  %97 = bitcast i8* %96 to <4 x i8>*
  %98 = load <4 x i8>, <4 x i8>* %97, align 1, !alias.scope !39, !noalias !40
  %99 = sext <4 x i8> %95 to <4 x i32>
  %100 = sext <4 x i8> %98 to <4 x i32>
  %101 = mul nsw <4 x i32> %99, %91
  %102 = mul nsw <4 x i32> %100, %92
  %103 = add nsw <4 x i32> %101, %82
  %104 = add nsw <4 x i32> %102, %83
  %105 = add i64 %60, 16
  %106 = add i64 %63, -2
  %107 = icmp eq i64 %106, 0
  br i1 %107, label %108, label %59, !llvm.loop !41

108:                                              ; preds = %59, %57
  %109 = phi <4 x i32> [ undef, %57 ], [ %103, %59 ]
  %110 = phi <4 x i32> [ undef, %57 ], [ %104, %59 ]
  %111 = phi i64 [ 0, %57 ], [ %105, %59 ]
  %112 = phi <4 x i32> [ zeroinitializer, %57 ], [ %103, %59 ]
  %113 = phi <4 x i32> [ zeroinitializer, %57 ], [ %104, %59 ]
  br i1 %35, label %135, label %114

114:                                              ; preds = %108
  %115 = getelementptr i8, i8* %50, i64 %111
  %116 = getelementptr inbounds i8, i8* %40, i64 %111
  %117 = getelementptr inbounds i8, i8* %116, i64 4
  %118 = bitcast i8* %117 to <4 x i8>*
  %119 = load <4 x i8>, <4 x i8>* %118, align 1, !alias.scope !39, !noalias !40
  %120 = sext <4 x i8> %119 to <4 x i32>
  %121 = getelementptr i8, i8* %115, i64 4
  %122 = bitcast i8* %121 to <4 x i8>*
  %123 = load <4 x i8>, <4 x i8>* %122, align 1, !alias.scope !38, !noalias !37
  %124 = sext <4 x i8> %123 to <4 x i32>
  %125 = mul nsw <4 x i32> %120, %124
  %126 = add nsw <4 x i32> %125, %113
  %127 = bitcast i8* %116 to <4 x i8>*
  %128 = load <4 x i8>, <4 x i8>* %127, align 1, !alias.scope !39, !noalias !40
  %129 = sext <4 x i8> %128 to <4 x i32>
  %130 = bitcast i8* %115 to <4 x i8>*
  %131 = load <4 x i8>, <4 x i8>* %130, align 1, !alias.scope !38, !noalias !37
  %132 = sext <4 x i8> %131 to <4 x i32>
  %133 = mul nsw <4 x i32> %129, %132
  %134 = add nsw <4 x i32> %133, %112
  br label %135

135:                                              ; preds = %108, %114
  %136 = phi <4 x i32> [ %109, %108 ], [ %134, %114 ]
  %137 = phi <4 x i32> [ %110, %108 ], [ %126, %114 ]
  %138 = add <4 x i32> %137, %136
  %139 = shufflevector <4 x i32> %138, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %140 = add <4 x i32> %138, %139
  %141 = shufflevector <4 x i32> %140, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %142 = add <4 x i32> %140, %141
  %143 = extractelement <4 x i32> %142, i32 0
  br i1 %36, label %144, label %53

144:                                              ; preds = %157, %135
  %145 = phi i32 [ %143, %135 ], [ %167, %157 ]
  %146 = getelementptr i8, i8* %50, i64 %23
  br label %147

147:                                              ; preds = %144, %48
  %148 = phi i8* [ %50, %48 ], [ %146, %144 ]
  %149 = phi i32 [ 0, %48 ], [ %145, %144 ]
  %150 = sitofp i32 %149 to float
  %151 = fmul float %42, %150
  %152 = load float, float* %51, align 4, !alias.scope !42, !noalias !43
  %153 = fadd float %152, %151
  store float %153, float* %51, align 4, !alias.scope !42, !noalias !43
  %154 = getelementptr inbounds float, float* %51, i64 1
  %155 = add nuw nsw i32 %49, 1
  %156 = icmp eq i32 %155, %1
  br i1 %156, label %43, label %48

157:                                              ; preds = %53, %157
  %158 = phi i64 [ %168, %157 ], [ %54, %53 ]
  %159 = phi i32 [ %167, %157 ], [ %55, %53 ]
  %160 = phi i8* [ %169, %157 ], [ %56, %53 ]
  %161 = load i8, i8* %160, align 1, !alias.scope !38, !noalias !37
  %162 = sext i8 %161 to i32
  %163 = getelementptr inbounds i8, i8* %40, i64 %158
  %164 = load i8, i8* %163, align 1, !alias.scope !39, !noalias !40
  %165 = sext i8 %164 to i32
  %166 = mul nsw i32 %165, %162
  %167 = add nsw i32 %166, %159
  %168 = add nuw nsw i64 %158, 1
  %169 = getelementptr inbounds i8, i8* %160, i64 1
  %170 = icmp eq i64 %168, %25
  br i1 %170, label %144, label %157, !llvm.loop !44

171:                                              ; preds = %13
  %172 = icmp eq i8* %11, null
  br i1 %172, label %236, label %173

173:                                              ; preds = %171
  %174 = load i8, i8* %11, align 1, !range !45
  %175 = icmp eq i8 %174, 0
  br i1 %175, label %295, label %176

176:                                              ; preds = %173
  %177 = bitcast i32* %10 to i8*
  %178 = sext i32 %1 to i64
  %179 = shl nsw i64 %178, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %177, i8 0, i64 %179, i1 false)
  %180 = icmp sgt i32 %1, 0
  br i1 %180, label %181, label %235

181:                                              ; preds = %176
  %182 = icmp sgt i32 %2, 0
  %183 = zext i32 %1 to i64
  %184 = add i32 %2, -1
  %185 = and i32 %2, 3
  %186 = icmp ult i32 %184, 3
  %187 = sub i32 %2, %185
  %188 = icmp eq i32 %185, 0
  br label %189

189:                                              ; preds = %209, %181
  %190 = phi i64 [ 0, %181 ], [ %211, %209 ]
  %191 = phi i8* [ %0, %181 ], [ %210, %209 ]
  br i1 %182, label %192, label %209

192:                                              ; preds = %189
  %193 = getelementptr inbounds i32, i32* %10, i64 %190
  %194 = load i32, i32* %193, align 4
  br i1 %186, label %195, label %213

195:                                              ; preds = %213, %192
  %196 = phi i8* [ undef, %192 ], [ %229, %213 ]
  %197 = phi i32 [ %194, %192 ], [ %232, %213 ]
  %198 = phi i8* [ %191, %192 ], [ %229, %213 ]
  br i1 %188, label %209, label %199

199:                                              ; preds = %195, %199
  %200 = phi i32 [ %206, %199 ], [ %197, %195 ]
  %201 = phi i8* [ %203, %199 ], [ %198, %195 ]
  %202 = phi i32 [ %207, %199 ], [ %185, %195 ]
  %203 = getelementptr inbounds i8, i8* %201, i64 1
  %204 = load i8, i8* %201, align 1
  %205 = sext i8 %204 to i32
  %206 = add nsw i32 %200, %205
  store i32 %206, i32* %193, align 4
  %207 = add i32 %202, -1
  %208 = icmp eq i32 %207, 0
  br i1 %208, label %209, label %199, !llvm.loop !46

209:                                              ; preds = %195, %199, %189
  %210 = phi i8* [ %191, %189 ], [ %196, %195 ], [ %203, %199 ]
  %211 = add nuw nsw i64 %190, 1
  %212 = icmp eq i64 %211, %183
  br i1 %212, label %235, label %189

213:                                              ; preds = %192, %213
  %214 = phi i32 [ %232, %213 ], [ %194, %192 ]
  %215 = phi i8* [ %229, %213 ], [ %191, %192 ]
  %216 = phi i32 [ %233, %213 ], [ %187, %192 ]
  %217 = getelementptr inbounds i8, i8* %215, i64 1
  %218 = load i8, i8* %215, align 1
  %219 = sext i8 %218 to i32
  %220 = add nsw i32 %214, %219
  store i32 %220, i32* %193, align 4
  %221 = getelementptr inbounds i8, i8* %215, i64 2
  %222 = load i8, i8* %217, align 1
  %223 = sext i8 %222 to i32
  %224 = add nsw i32 %220, %223
  store i32 %224, i32* %193, align 4
  %225 = getelementptr inbounds i8, i8* %215, i64 3
  %226 = load i8, i8* %221, align 1
  %227 = sext i8 %226 to i32
  %228 = add nsw i32 %224, %227
  store i32 %228, i32* %193, align 4
  %229 = getelementptr inbounds i8, i8* %215, i64 4
  %230 = load i8, i8* %225, align 1
  %231 = sext i8 %230 to i32
  %232 = add nsw i32 %228, %231
  store i32 %232, i32* %193, align 4
  %233 = add i32 %216, -4
  %234 = icmp eq i32 %233, 0
  br i1 %234, label %195, label %213

235:                                              ; preds = %209, %176
  store i8 0, i8* %11, align 1
  br label %295

236:                                              ; preds = %171
  %237 = bitcast i32* %10 to i8*
  %238 = sext i32 %1 to i64
  %239 = shl nsw i64 %238, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %237, i8 0, i64 %239, i1 false)
  %240 = icmp sgt i32 %1, 0
  br i1 %240, label %241, label %295

241:                                              ; preds = %236
  %242 = icmp sgt i32 %2, 0
  %243 = zext i32 %1 to i64
  %244 = add i32 %2, -1
  %245 = and i32 %2, 3
  %246 = icmp ult i32 %244, 3
  %247 = sub i32 %2, %245
  %248 = icmp eq i32 %245, 0
  br label %249

249:                                              ; preds = %269, %241
  %250 = phi i64 [ 0, %241 ], [ %271, %269 ]
  %251 = phi i8* [ %0, %241 ], [ %270, %269 ]
  br i1 %242, label %252, label %269

252:                                              ; preds = %249
  %253 = getelementptr inbounds i32, i32* %10, i64 %250
  %254 = load i32, i32* %253, align 4
  br i1 %246, label %255, label %273

255:                                              ; preds = %273, %252
  %256 = phi i8* [ undef, %252 ], [ %289, %273 ]
  %257 = phi i32 [ %254, %252 ], [ %292, %273 ]
  %258 = phi i8* [ %251, %252 ], [ %289, %273 ]
  br i1 %248, label %269, label %259

259:                                              ; preds = %255, %259
  %260 = phi i32 [ %266, %259 ], [ %257, %255 ]
  %261 = phi i8* [ %263, %259 ], [ %258, %255 ]
  %262 = phi i32 [ %267, %259 ], [ %245, %255 ]
  %263 = getelementptr inbounds i8, i8* %261, i64 1
  %264 = load i8, i8* %261, align 1
  %265 = sext i8 %264 to i32
  %266 = add nsw i32 %260, %265
  store i32 %266, i32* %253, align 4
  %267 = add i32 %262, -1
  %268 = icmp eq i32 %267, 0
  br i1 %268, label %269, label %259, !llvm.loop !47

269:                                              ; preds = %255, %259, %249
  %270 = phi i8* [ %251, %249 ], [ %256, %255 ], [ %263, %259 ]
  %271 = add nuw nsw i64 %250, 1
  %272 = icmp eq i64 %271, %243
  br i1 %272, label %295, label %249

273:                                              ; preds = %252, %273
  %274 = phi i32 [ %292, %273 ], [ %254, %252 ]
  %275 = phi i8* [ %289, %273 ], [ %251, %252 ]
  %276 = phi i32 [ %293, %273 ], [ %247, %252 ]
  %277 = getelementptr inbounds i8, i8* %275, i64 1
  %278 = load i8, i8* %275, align 1
  %279 = sext i8 %278 to i32
  %280 = add nsw i32 %274, %279
  store i32 %280, i32* %253, align 4
  %281 = getelementptr inbounds i8, i8* %275, i64 2
  %282 = load i8, i8* %277, align 1
  %283 = sext i8 %282 to i32
  %284 = add nsw i32 %280, %283
  store i32 %284, i32* %253, align 4
  %285 = getelementptr inbounds i8, i8* %275, i64 3
  %286 = load i8, i8* %281, align 1
  %287 = sext i8 %286 to i32
  %288 = add nsw i32 %284, %287
  store i32 %288, i32* %253, align 4
  %289 = getelementptr inbounds i8, i8* %275, i64 4
  %290 = load i8, i8* %285, align 1
  %291 = sext i8 %290 to i32
  %292 = add nsw i32 %288, %291
  store i32 %292, i32* %253, align 4
  %293 = add i32 %276, -4
  %294 = icmp eq i32 %293, 0
  br i1 %294, label %255, label %273

295:                                              ; preds = %269, %236, %173, %235
  %296 = icmp sgt i32 %5, 0
  br i1 %296, label %297, label %469

297:                                              ; preds = %295
  %298 = icmp sgt i32 %1, 0
  %299 = icmp eq float* %7, null
  %300 = icmp sgt i32 %2, 0
  %301 = sext i32 %2 to i64
  %302 = add i32 %2, -1
  %303 = zext i32 %302 to i64
  %304 = add nuw nsw i64 %303, 1
  %305 = zext i32 %5 to i64
  %306 = zext i32 %1 to i64
  %307 = zext i32 %2 to i64
  %308 = and i64 %307, 4294967288
  %309 = add nsw i64 %308, -8
  %310 = lshr exact i64 %309, 3
  %311 = add nuw nsw i64 %310, 1
  %312 = icmp ult i32 %2, 8
  %313 = and i64 %307, 4294967288
  %314 = and i64 %311, 1
  %315 = icmp eq i64 %309, 0
  %316 = sub nuw nsw i64 %311, %314
  %317 = icmp eq i64 %314, 0
  %318 = icmp eq i64 %313, %307
  br label %319

319:                                              ; preds = %328, %297
  %320 = phi i64 [ 0, %297 ], [ %330, %328 ]
  %321 = phi i8* [ %3, %297 ], [ %331, %328 ]
  %322 = phi float* [ %6, %297 ], [ %329, %328 ]
  %323 = getelementptr inbounds float, float* %4, i64 %320
  %324 = load float, float* %323, align 4
  %325 = getelementptr inbounds i32, i32* %8, i64 %320
  %326 = load i32, i32* %325, align 4
  %327 = sitofp i32 %326 to float
  br i1 %298, label %333, label %328

328:                                              ; preds = %438, %319
  %329 = phi float* [ %322, %319 ], [ %452, %438 ]
  %330 = add nuw nsw i64 %320, 1
  %331 = getelementptr inbounds i8, i8* %321, i64 %301
  %332 = icmp eq i64 %330, %305
  br i1 %332, label %469, label %319

333:                                              ; preds = %319, %438
  %334 = phi i64 [ %453, %438 ], [ 0, %319 ]
  %335 = phi i8* [ %439, %438 ], [ %0, %319 ]
  %336 = phi float* [ %452, %438 ], [ %322, %319 ]
  br i1 %299, label %341, label %337

337:                                              ; preds = %333
  %338 = getelementptr inbounds float, float* %7, i64 %334
  %339 = load float, float* %338, align 4
  %340 = fmul float %324, %339
  br label %341

341:                                              ; preds = %333, %337
  %342 = phi float [ %340, %337 ], [ %324, %333 ]
  tail call void @llvm.prefetch(i8* %335, i32 0, i32 3, i32 1)
  br i1 %300, label %343, label %438

343:                                              ; preds = %341
  br i1 %312, label %344, label %348

344:                                              ; preds = %426, %343
  %345 = phi i64 [ 0, %343 ], [ %313, %426 ]
  %346 = phi i32 [ 0, %343 ], [ %434, %426 ]
  %347 = phi i8* [ %335, %343 ], [ %349, %426 ]
  br label %455

348:                                              ; preds = %343
  %349 = getelementptr i8, i8* %335, i64 %313
  br i1 %315, label %399, label %350

350:                                              ; preds = %348, %350
  %351 = phi i64 [ %396, %350 ], [ 0, %348 ]
  %352 = phi <4 x i32> [ %394, %350 ], [ zeroinitializer, %348 ]
  %353 = phi <4 x i32> [ %395, %350 ], [ zeroinitializer, %348 ]
  %354 = phi i64 [ %397, %350 ], [ %316, %348 ]
  %355 = getelementptr i8, i8* %335, i64 %351
  %356 = bitcast i8* %355 to <4 x i8>*
  %357 = load <4 x i8>, <4 x i8>* %356, align 1
  %358 = getelementptr i8, i8* %355, i64 4
  %359 = bitcast i8* %358 to <4 x i8>*
  %360 = load <4 x i8>, <4 x i8>* %359, align 1
  %361 = sext <4 x i8> %357 to <4 x i32>
  %362 = sext <4 x i8> %360 to <4 x i32>
  %363 = getelementptr inbounds i8, i8* %321, i64 %351
  %364 = bitcast i8* %363 to <4 x i8>*
  %365 = load <4 x i8>, <4 x i8>* %364, align 1
  %366 = getelementptr inbounds i8, i8* %363, i64 4
  %367 = bitcast i8* %366 to <4 x i8>*
  %368 = load <4 x i8>, <4 x i8>* %367, align 1
  %369 = sext <4 x i8> %365 to <4 x i32>
  %370 = sext <4 x i8> %368 to <4 x i32>
  %371 = mul nsw <4 x i32> %369, %361
  %372 = mul nsw <4 x i32> %370, %362
  %373 = add nsw <4 x i32> %371, %352
  %374 = add nsw <4 x i32> %372, %353
  %375 = or i64 %351, 8
  %376 = getelementptr i8, i8* %335, i64 %375
  %377 = bitcast i8* %376 to <4 x i8>*
  %378 = load <4 x i8>, <4 x i8>* %377, align 1
  %379 = getelementptr i8, i8* %376, i64 4
  %380 = bitcast i8* %379 to <4 x i8>*
  %381 = load <4 x i8>, <4 x i8>* %380, align 1
  %382 = sext <4 x i8> %378 to <4 x i32>
  %383 = sext <4 x i8> %381 to <4 x i32>
  %384 = getelementptr inbounds i8, i8* %321, i64 %375
  %385 = bitcast i8* %384 to <4 x i8>*
  %386 = load <4 x i8>, <4 x i8>* %385, align 1
  %387 = getelementptr inbounds i8, i8* %384, i64 4
  %388 = bitcast i8* %387 to <4 x i8>*
  %389 = load <4 x i8>, <4 x i8>* %388, align 1
  %390 = sext <4 x i8> %386 to <4 x i32>
  %391 = sext <4 x i8> %389 to <4 x i32>
  %392 = mul nsw <4 x i32> %390, %382
  %393 = mul nsw <4 x i32> %391, %383
  %394 = add nsw <4 x i32> %392, %373
  %395 = add nsw <4 x i32> %393, %374
  %396 = add i64 %351, 16
  %397 = add i64 %354, -2
  %398 = icmp eq i64 %397, 0
  br i1 %398, label %399, label %350, !llvm.loop !48

399:                                              ; preds = %350, %348
  %400 = phi <4 x i32> [ undef, %348 ], [ %394, %350 ]
  %401 = phi <4 x i32> [ undef, %348 ], [ %395, %350 ]
  %402 = phi i64 [ 0, %348 ], [ %396, %350 ]
  %403 = phi <4 x i32> [ zeroinitializer, %348 ], [ %394, %350 ]
  %404 = phi <4 x i32> [ zeroinitializer, %348 ], [ %395, %350 ]
  br i1 %317, label %426, label %405

405:                                              ; preds = %399
  %406 = getelementptr i8, i8* %335, i64 %402
  %407 = getelementptr inbounds i8, i8* %321, i64 %402
  %408 = getelementptr inbounds i8, i8* %407, i64 4
  %409 = bitcast i8* %408 to <4 x i8>*
  %410 = load <4 x i8>, <4 x i8>* %409, align 1
  %411 = sext <4 x i8> %410 to <4 x i32>
  %412 = getelementptr i8, i8* %406, i64 4
  %413 = bitcast i8* %412 to <4 x i8>*
  %414 = load <4 x i8>, <4 x i8>* %413, align 1
  %415 = sext <4 x i8> %414 to <4 x i32>
  %416 = mul nsw <4 x i32> %411, %415
  %417 = add nsw <4 x i32> %416, %404
  %418 = bitcast i8* %407 to <4 x i8>*
  %419 = load <4 x i8>, <4 x i8>* %418, align 1
  %420 = sext <4 x i8> %419 to <4 x i32>
  %421 = bitcast i8* %406 to <4 x i8>*
  %422 = load <4 x i8>, <4 x i8>* %421, align 1
  %423 = sext <4 x i8> %422 to <4 x i32>
  %424 = mul nsw <4 x i32> %420, %423
  %425 = add nsw <4 x i32> %424, %403
  br label %426

426:                                              ; preds = %399, %405
  %427 = phi <4 x i32> [ %400, %399 ], [ %425, %405 ]
  %428 = phi <4 x i32> [ %401, %399 ], [ %417, %405 ]
  %429 = add <4 x i32> %428, %427
  %430 = shufflevector <4 x i32> %429, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %431 = add <4 x i32> %429, %430
  %432 = shufflevector <4 x i32> %431, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %433 = add <4 x i32> %431, %432
  %434 = extractelement <4 x i32> %433, i32 0
  br i1 %318, label %435, label %344

435:                                              ; preds = %455, %426
  %436 = phi i32 [ %434, %426 ], [ %465, %455 ]
  %437 = getelementptr i8, i8* %335, i64 %304
  br label %438

438:                                              ; preds = %435, %341
  %439 = phi i8* [ %335, %341 ], [ %437, %435 ]
  %440 = phi i32 [ 0, %341 ], [ %436, %435 ]
  %441 = getelementptr inbounds i32, i32* %10, i64 %334
  %442 = load i32, i32* %441, align 4
  %443 = sitofp i32 %442 to float
  %444 = fmul float %327, %443
  %445 = sitofp i32 %440 to float
  %446 = fsub float %445, %444
  %447 = fptosi float %446 to i32
  %448 = sitofp i32 %447 to float
  %449 = fmul float %342, %448
  %450 = load float, float* %336, align 4
  %451 = fadd float %450, %449
  store float %451, float* %336, align 4
  %452 = getelementptr inbounds float, float* %336, i64 1
  %453 = add nuw nsw i64 %334, 1
  %454 = icmp eq i64 %453, %306
  br i1 %454, label %328, label %333

455:                                              ; preds = %344, %455
  %456 = phi i64 [ %466, %455 ], [ %345, %344 ]
  %457 = phi i32 [ %465, %455 ], [ %346, %344 ]
  %458 = phi i8* [ %467, %455 ], [ %347, %344 ]
  %459 = load i8, i8* %458, align 1
  %460 = sext i8 %459 to i32
  %461 = getelementptr inbounds i8, i8* %321, i64 %456
  %462 = load i8, i8* %461, align 1
  %463 = sext i8 %462 to i32
  %464 = mul nsw i32 %463, %460
  %465 = add nsw i32 %464, %457
  %466 = add nuw nsw i64 %456, 1
  %467 = getelementptr inbounds i8, i8* %458, i64 1
  %468 = icmp eq i64 %466, %307
  br i1 %468, label %435, label %455, !llvm.loop !49

469:                                              ; preds = %328, %43, %295, %15
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6tflite12tensor_utils26PortableReductionSumVectorEPKaPiii(i8* nocapture readonly, i32* nocapture, i32, i32) local_unnamed_addr #3 {
  %5 = icmp sgt i32 %2, 0
  br i1 %5, label %6, label %20

6:                                                ; preds = %4
  %7 = icmp sgt i32 %3, 0
  %8 = zext i32 %2 to i64
  %9 = add i32 %3, -1
  %10 = and i32 %3, 3
  %11 = icmp ult i32 %9, 3
  %12 = sub i32 %3, %10
  %13 = icmp eq i32 %10, 0
  br label %14

14:                                               ; preds = %35, %6
  %15 = phi i64 [ 0, %6 ], [ %37, %35 ]
  %16 = phi i8* [ %0, %6 ], [ %36, %35 ]
  br i1 %7, label %17, label %35

17:                                               ; preds = %14
  %18 = getelementptr inbounds i32, i32* %1, i64 %15
  %19 = load i32, i32* %18, align 4
  br i1 %11, label %21, label %39

20:                                               ; preds = %35, %4
  ret void

21:                                               ; preds = %39, %17
  %22 = phi i8* [ undef, %17 ], [ %55, %39 ]
  %23 = phi i32 [ %19, %17 ], [ %58, %39 ]
  %24 = phi i8* [ %16, %17 ], [ %55, %39 ]
  br i1 %13, label %35, label %25

25:                                               ; preds = %21, %25
  %26 = phi i32 [ %32, %25 ], [ %23, %21 ]
  %27 = phi i8* [ %29, %25 ], [ %24, %21 ]
  %28 = phi i32 [ %33, %25 ], [ %10, %21 ]
  %29 = getelementptr inbounds i8, i8* %27, i64 1
  %30 = load i8, i8* %27, align 1
  %31 = sext i8 %30 to i32
  %32 = add nsw i32 %26, %31
  store i32 %32, i32* %18, align 4
  %33 = add i32 %28, -1
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %25, !llvm.loop !50

35:                                               ; preds = %21, %25, %14
  %36 = phi i8* [ %16, %14 ], [ %22, %21 ], [ %29, %25 ]
  %37 = add nuw nsw i64 %15, 1
  %38 = icmp eq i64 %37, %8
  br i1 %38, label %20, label %14

39:                                               ; preds = %17, %39
  %40 = phi i32 [ %58, %39 ], [ %19, %17 ]
  %41 = phi i8* [ %55, %39 ], [ %16, %17 ]
  %42 = phi i32 [ %59, %39 ], [ %12, %17 ]
  %43 = getelementptr inbounds i8, i8* %41, i64 1
  %44 = load i8, i8* %41, align 1
  %45 = sext i8 %44 to i32
  %46 = add nsw i32 %40, %45
  store i32 %46, i32* %18, align 4
  %47 = getelementptr inbounds i8, i8* %41, i64 2
  %48 = load i8, i8* %43, align 1
  %49 = sext i8 %48 to i32
  %50 = add nsw i32 %46, %49
  store i32 %50, i32* %18, align 4
  %51 = getelementptr inbounds i8, i8* %41, i64 3
  %52 = load i8, i8* %47, align 1
  %53 = sext i8 %52 to i32
  %54 = add nsw i32 %50, %53
  store i32 %54, i32* %18, align 4
  %55 = getelementptr inbounds i8, i8* %41, i64 4
  %56 = load i8, i8* %51, align 1
  %57 = sext i8 %56 to i32
  %58 = add nsw i32 %54, %57
  store i32 %58, i32* %18, align 4
  %59 = add i32 %42, -4
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %21, label %39
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6tflite12tensor_utils52PortableSparseMatrixBatchVectorMultiplyAccumulate1x4EPKfPKiS4_iiS2_iPf(float* noalias nocapture readonly, i32* noalias nocapture readonly, i32* noalias nocapture readonly, i32, i32, float* noalias nocapture readonly, i32, float* noalias nocapture) local_unnamed_addr #3 {
  %9 = icmp sgt i32 %6, 0
  br i1 %9, label %10, label %23

10:                                               ; preds = %8
  %11 = icmp sgt i32 %3, 0
  %12 = sext i32 %3 to i64
  %13 = sext i32 %4 to i64
  %14 = zext i32 %6 to i64
  %15 = zext i32 %3 to i64
  br label %16

16:                                               ; preds = %24, %10
  %17 = phi i64 [ 0, %10 ], [ %25, %24 ]
  br i1 %11, label %18, label %24

18:                                               ; preds = %16
  %19 = mul nsw i64 %17, %13
  %20 = getelementptr inbounds float, float* %5, i64 %19
  %21 = mul nsw i64 %17, %12
  %22 = load i32, i32* %1, align 4
  br label %27

23:                                               ; preds = %24, %8
  ret void

24:                                               ; preds = %38, %16
  %25 = add nuw nsw i64 %17, 1
  %26 = icmp eq i64 %25, %14
  br i1 %26, label %23, label %16

27:                                               ; preds = %38, %18
  %28 = phi i32 [ %22, %18 ], [ %33, %38 ]
  %29 = phi i64 [ 0, %18 ], [ %31, %38 ]
  %30 = phi float* [ %0, %18 ], [ %39, %38 ]
  %31 = add nuw nsw i64 %29, 1
  %32 = getelementptr inbounds i32, i32* %1, i64 %31
  %33 = load i32, i32* %32, align 4
  %34 = icmp slt i32 %28, %33
  br i1 %34, label %35, label %38

35:                                               ; preds = %27
  %36 = sext i32 %28 to i64
  %37 = sext i32 %33 to i64
  br label %46

38:                                               ; preds = %46, %27
  %39 = phi float* [ %30, %27 ], [ %77, %46 ]
  %40 = phi float [ 0.000000e+00, %27 ], [ %76, %46 ]
  %41 = add nsw i64 %29, %21
  %42 = getelementptr inbounds float, float* %7, i64 %41
  %43 = load float, float* %42, align 4
  %44 = fadd float %40, %43
  store float %44, float* %42, align 4
  %45 = icmp eq i64 %31, %15
  br i1 %45, label %24, label %27

46:                                               ; preds = %35, %46
  %47 = phi i64 [ %36, %35 ], [ %78, %46 ]
  %48 = phi float [ 0.000000e+00, %35 ], [ %76, %46 ]
  %49 = phi float* [ %30, %35 ], [ %77, %46 ]
  %50 = getelementptr inbounds i32, i32* %2, i64 %47
  %51 = load i32, i32* %50, align 4
  %52 = shl nsw i32 %51, 2
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds float, float* %20, i64 %53
  %55 = getelementptr inbounds float, float* %49, i64 1
  %56 = load float, float* %49, align 4
  %57 = getelementptr inbounds float, float* %54, i64 1
  %58 = load float, float* %54, align 4
  %59 = fmul float %56, %58
  %60 = fadd float %48, %59
  %61 = getelementptr inbounds float, float* %57, i64 1
  %62 = bitcast float* %55 to <2 x float>*
  %63 = load <2 x float>, <2 x float>* %62, align 4
  %64 = bitcast float* %57 to <2 x float>*
  %65 = load <2 x float>, <2 x float>* %64, align 4
  %66 = fmul <2 x float> %63, %65
  %67 = extractelement <2 x float> %66, i32 0
  %68 = fadd float %60, %67
  %69 = getelementptr inbounds float, float* %49, i64 3
  %70 = getelementptr inbounds float, float* %61, i64 1
  %71 = extractelement <2 x float> %66, i32 1
  %72 = fadd float %68, %71
  %73 = load float, float* %69, align 4
  %74 = load float, float* %70, align 4
  %75 = fmul float %73, %74
  %76 = fadd float %72, %75
  %77 = getelementptr float, float* %49, i64 4
  %78 = add nsw i64 %47, 1
  %79 = icmp slt i64 %78, %37
  br i1 %79, label %46, label %38
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6tflite12tensor_utils49PortableSparseMatrixBatchVectorMultiplyAccumulateEPKfPKhiiS2_iPf(float* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i32, float* noalias nocapture readonly, i32, float* noalias nocapture) local_unnamed_addr #3 {
  %8 = icmp sgt i32 %5, 0
  br i1 %8, label %9, label %21

9:                                                ; preds = %7
  %10 = icmp sgt i32 %2, 0
  %11 = sext i32 %2 to i64
  %12 = sext i32 %3 to i64
  %13 = zext i32 %5 to i64
  %14 = zext i32 %2 to i64
  br label %15

15:                                               ; preds = %22, %9
  %16 = phi i64 [ 0, %9 ], [ %23, %22 ]
  br i1 %10, label %17, label %22

17:                                               ; preds = %15
  %18 = mul nsw i64 %16, %12
  %19 = getelementptr inbounds float, float* %4, i64 %18
  %20 = mul nsw i64 %16, %11
  br label %25

21:                                               ; preds = %22, %7
  ret void

22:                                               ; preds = %151, %15
  %23 = add nuw nsw i64 %16, 1
  %24 = icmp eq i64 %23, %13
  br i1 %24, label %21, label %15

25:                                               ; preds = %151, %17
  %26 = phi i64 [ 0, %17 ], [ %159, %151 ]
  %27 = phi i8* [ %1, %17 ], [ %153, %151 ]
  %28 = phi float* [ %0, %17 ], [ %152, %151 ]
  %29 = getelementptr inbounds i8, i8* %27, i64 1
  %30 = load i8, i8* %27, align 1
  %31 = zext i8 %30 to i32
  %32 = icmp eq i8 %30, 0
  br i1 %32, label %151, label %33

33:                                               ; preds = %25
  %34 = getelementptr i8, i8* %27, i64 2
  %35 = add nsw i32 %31, -1
  %36 = zext i32 %35 to i64
  %37 = getelementptr i8, i8* %34, i64 %36
  %38 = shl nuw nsw i64 %36, 4
  br label %39

39:                                               ; preds = %39, %33
  %40 = phi i32 [ %146, %39 ], [ 0, %33 ]
  %41 = phi float [ %143, %39 ], [ 0.000000e+00, %33 ]
  %42 = phi i8* [ %144, %39 ], [ %29, %33 ]
  %43 = phi float* [ %145, %39 ], [ %28, %33 ]
  %44 = load i8, i8* %42, align 1
  %45 = zext i8 %44 to i64
  %46 = shl nuw nsw i64 %45, 4
  %47 = getelementptr inbounds float, float* %19, i64 %46
  %48 = getelementptr inbounds float, float* %43, i64 1
  %49 = load float, float* %43, align 4
  %50 = getelementptr inbounds float, float* %47, i64 1
  %51 = load float, float* %47, align 4
  %52 = fmul float %49, %51
  %53 = fadd float %41, %52
  %54 = getelementptr inbounds float, float* %43, i64 2
  %55 = load float, float* %48, align 4
  %56 = getelementptr inbounds float, float* %50, i64 1
  %57 = load float, float* %50, align 4
  %58 = fmul float %55, %57
  %59 = fadd float %53, %58
  %60 = getelementptr inbounds float, float* %43, i64 3
  %61 = load float, float* %54, align 4
  %62 = getelementptr inbounds float, float* %56, i64 1
  %63 = load float, float* %56, align 4
  %64 = fmul float %61, %63
  %65 = fadd float %59, %64
  %66 = getelementptr inbounds float, float* %43, i64 4
  %67 = load float, float* %60, align 4
  %68 = getelementptr inbounds float, float* %62, i64 1
  %69 = load float, float* %62, align 4
  %70 = fmul float %67, %69
  %71 = fadd float %65, %70
  %72 = getelementptr inbounds float, float* %43, i64 5
  %73 = load float, float* %66, align 4
  %74 = getelementptr inbounds float, float* %68, i64 1
  %75 = load float, float* %68, align 4
  %76 = fmul float %73, %75
  %77 = fadd float %71, %76
  %78 = getelementptr inbounds float, float* %43, i64 6
  %79 = load float, float* %72, align 4
  %80 = getelementptr inbounds float, float* %74, i64 1
  %81 = load float, float* %74, align 4
  %82 = fmul float %79, %81
  %83 = fadd float %77, %82
  %84 = getelementptr inbounds float, float* %43, i64 7
  %85 = load float, float* %78, align 4
  %86 = getelementptr inbounds float, float* %80, i64 1
  %87 = load float, float* %80, align 4
  %88 = fmul float %85, %87
  %89 = fadd float %83, %88
  %90 = getelementptr inbounds float, float* %43, i64 8
  %91 = load float, float* %84, align 4
  %92 = getelementptr inbounds float, float* %86, i64 1
  %93 = load float, float* %86, align 4
  %94 = fmul float %91, %93
  %95 = fadd float %89, %94
  %96 = getelementptr inbounds float, float* %43, i64 9
  %97 = load float, float* %90, align 4
  %98 = getelementptr inbounds float, float* %92, i64 1
  %99 = load float, float* %92, align 4
  %100 = fmul float %97, %99
  %101 = fadd float %95, %100
  %102 = getelementptr inbounds float, float* %43, i64 10
  %103 = load float, float* %96, align 4
  %104 = getelementptr inbounds float, float* %98, i64 1
  %105 = load float, float* %98, align 4
  %106 = fmul float %103, %105
  %107 = fadd float %101, %106
  %108 = getelementptr inbounds float, float* %43, i64 11
  %109 = load float, float* %102, align 4
  %110 = getelementptr inbounds float, float* %104, i64 1
  %111 = load float, float* %104, align 4
  %112 = fmul float %109, %111
  %113 = fadd float %107, %112
  %114 = getelementptr inbounds float, float* %43, i64 12
  %115 = load float, float* %108, align 4
  %116 = getelementptr inbounds float, float* %110, i64 1
  %117 = load float, float* %110, align 4
  %118 = fmul float %115, %117
  %119 = fadd float %113, %118
  %120 = getelementptr inbounds float, float* %43, i64 13
  %121 = load float, float* %114, align 4
  %122 = getelementptr inbounds float, float* %116, i64 1
  %123 = load float, float* %116, align 4
  %124 = fmul float %121, %123
  %125 = fadd float %119, %124
  %126 = getelementptr inbounds float, float* %122, i64 1
  %127 = load float, float* %122, align 4
  %128 = bitcast float* %120 to <2 x float>*
  %129 = load <2 x float>, <2 x float>* %128, align 4
  %130 = load float, float* %126, align 4
  %131 = insertelement <2 x float> undef, float %127, i32 0
  %132 = insertelement <2 x float> %131, float %130, i32 1
  %133 = fmul <2 x float> %129, %132
  %134 = extractelement <2 x float> %133, i32 0
  %135 = fadd float %125, %134
  %136 = getelementptr inbounds float, float* %43, i64 15
  %137 = getelementptr inbounds float, float* %126, i64 1
  %138 = extractelement <2 x float> %133, i32 1
  %139 = fadd float %135, %138
  %140 = load float, float* %136, align 4
  %141 = load float, float* %137, align 4
  %142 = fmul float %140, %141
  %143 = fadd float %139, %142
  %144 = getelementptr inbounds i8, i8* %42, i64 1
  %145 = getelementptr float, float* %43, i64 16
  %146 = add nuw nsw i32 %40, 1
  %147 = icmp eq i32 %146, %31
  br i1 %147, label %148, label %39

148:                                              ; preds = %39
  %149 = getelementptr float, float* %28, i64 16
  %150 = getelementptr float, float* %149, i64 %38
  br label %151

151:                                              ; preds = %148, %25
  %152 = phi float* [ %28, %25 ], [ %150, %148 ]
  %153 = phi i8* [ %29, %25 ], [ %37, %148 ]
  %154 = phi float [ 0.000000e+00, %25 ], [ %143, %148 ]
  %155 = add nsw i64 %26, %20
  %156 = getelementptr inbounds float, float* %6, i64 %155
  %157 = load float, float* %156, align 4
  %158 = fadd float %154, %157
  store float %158, float* %156, align 4
  %159 = add nuw nsw i64 %26, 1
  %160 = icmp eq i64 %159, %14
  br i1 %160, label %22, label %25
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6tflite12tensor_utils49PortableSparseMatrixBatchVectorMultiplyAccumulateEPKaPKhiiS2_PKfiPf(i8* noalias nocapture readonly, i8* nocapture readonly, i32, i32, i8* noalias nocapture readonly, float* nocapture readonly, i32, float* noalias nocapture) local_unnamed_addr #0 {
  %9 = icmp sgt i32 %6, 0
  br i1 %9, label %10, label %16

10:                                               ; preds = %8
  %11 = icmp sgt i32 %2, 0
  %12 = sext i32 %3 to i64
  %13 = sext i32 %2 to i64
  %14 = zext i32 %6 to i64
  %15 = zext i32 %2 to i64
  br label %17

16:                                               ; preds = %24, %8
  ret void

17:                                               ; preds = %24, %10
  %18 = phi i64 [ 0, %10 ], [ %25, %24 ]
  %19 = phi i8* [ %4, %10 ], [ %26, %24 ]
  %20 = getelementptr inbounds float, float* %5, i64 %18
  %21 = load float, float* %20, align 4
  br i1 %11, label %22, label %24

22:                                               ; preds = %17
  %23 = mul nsw i64 %18, %13
  br label %28

24:                                               ; preds = %45, %17
  %25 = add nuw nsw i64 %18, 1
  %26 = getelementptr inbounds i8, i8* %19, i64 %12
  %27 = icmp eq i64 %25, %14
  br i1 %27, label %16, label %17

28:                                               ; preds = %45, %22
  %29 = phi i64 [ 0, %22 ], [ %55, %45 ]
  %30 = phi i8* [ %0, %22 ], [ %46, %45 ]
  %31 = phi i8* [ %1, %22 ], [ %48, %45 ]
  tail call void @llvm.prefetch(i8* %30, i32 0, i32 3, i32 1)
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = getelementptr inbounds i8, i8* %31, i64 1
  %35 = icmp eq i8 %32, 0
  br i1 %35, label %45, label %36

36:                                               ; preds = %28
  %37 = getelementptr i8, i8* %31, i64 2
  %38 = add nsw i32 %33, -1
  %39 = zext i32 %38 to i64
  %40 = getelementptr i8, i8* %37, i64 %39
  %41 = shl nuw nsw i64 %39, 4
  br label %57

42:                                               ; preds = %57
  %43 = getelementptr i8, i8* %30, i64 16
  %44 = getelementptr i8, i8* %43, i64 %41
  br label %45

45:                                               ; preds = %42, %28
  %46 = phi i8* [ %30, %28 ], [ %44, %42 ]
  %47 = phi i32 [ 0, %28 ], [ %191, %42 ]
  %48 = phi i8* [ %34, %28 ], [ %40, %42 ]
  %49 = sitofp i32 %47 to float
  %50 = fmul float %21, %49
  %51 = add nsw i64 %29, %23
  %52 = getelementptr inbounds float, float* %7, i64 %51
  %53 = load float, float* %52, align 4
  %54 = fadd float %50, %53
  store float %54, float* %52, align 4
  %55 = add nuw nsw i64 %29, 1
  %56 = icmp eq i64 %55, %15
  br i1 %56, label %24, label %28

57:                                               ; preds = %57, %36
  %58 = phi i8* [ %194, %57 ], [ %34, %36 ]
  %59 = phi i32 [ %193, %57 ], [ 0, %36 ]
  %60 = phi i32 [ %191, %57 ], [ 0, %36 ]
  %61 = phi i8* [ %192, %57 ], [ %30, %36 ]
  %62 = load i8, i8* %58, align 1
  %63 = zext i8 %62 to i64
  %64 = shl nuw nsw i64 %63, 4
  %65 = getelementptr inbounds i8, i8* %19, i64 %64
  %66 = getelementptr inbounds i8, i8* %61, i64 1
  %67 = load i8, i8* %61, align 1
  %68 = sext i8 %67 to i32
  %69 = getelementptr inbounds i8, i8* %65, i64 1
  %70 = load i8, i8* %65, align 1
  %71 = sext i8 %70 to i32
  %72 = mul nsw i32 %71, %68
  %73 = add nsw i32 %72, %60
  %74 = getelementptr inbounds i8, i8* %61, i64 2
  %75 = load i8, i8* %66, align 1
  %76 = sext i8 %75 to i32
  %77 = getelementptr inbounds i8, i8* %69, i64 1
  %78 = load i8, i8* %69, align 1
  %79 = sext i8 %78 to i32
  %80 = mul nsw i32 %79, %76
  %81 = add nsw i32 %80, %73
  %82 = getelementptr inbounds i8, i8* %61, i64 3
  %83 = load i8, i8* %74, align 1
  %84 = sext i8 %83 to i32
  %85 = getelementptr inbounds i8, i8* %77, i64 1
  %86 = load i8, i8* %77, align 1
  %87 = sext i8 %86 to i32
  %88 = mul nsw i32 %87, %84
  %89 = add nsw i32 %88, %81
  %90 = getelementptr inbounds i8, i8* %61, i64 4
  %91 = load i8, i8* %82, align 1
  %92 = sext i8 %91 to i32
  %93 = getelementptr inbounds i8, i8* %85, i64 1
  %94 = load i8, i8* %85, align 1
  %95 = sext i8 %94 to i32
  %96 = mul nsw i32 %95, %92
  %97 = add nsw i32 %96, %89
  %98 = getelementptr inbounds i8, i8* %61, i64 5
  %99 = load i8, i8* %90, align 1
  %100 = sext i8 %99 to i32
  %101 = getelementptr inbounds i8, i8* %93, i64 1
  %102 = load i8, i8* %93, align 1
  %103 = sext i8 %102 to i32
  %104 = mul nsw i32 %103, %100
  %105 = add nsw i32 %104, %97
  %106 = getelementptr inbounds i8, i8* %61, i64 6
  %107 = load i8, i8* %98, align 1
  %108 = sext i8 %107 to i32
  %109 = getelementptr inbounds i8, i8* %101, i64 1
  %110 = load i8, i8* %101, align 1
  %111 = sext i8 %110 to i32
  %112 = mul nsw i32 %111, %108
  %113 = add nsw i32 %112, %105
  %114 = getelementptr inbounds i8, i8* %61, i64 7
  %115 = load i8, i8* %106, align 1
  %116 = sext i8 %115 to i32
  %117 = getelementptr inbounds i8, i8* %109, i64 1
  %118 = load i8, i8* %109, align 1
  %119 = sext i8 %118 to i32
  %120 = mul nsw i32 %119, %116
  %121 = add nsw i32 %120, %113
  %122 = getelementptr inbounds i8, i8* %61, i64 8
  %123 = load i8, i8* %114, align 1
  %124 = sext i8 %123 to i32
  %125 = getelementptr inbounds i8, i8* %117, i64 1
  %126 = load i8, i8* %117, align 1
  %127 = sext i8 %126 to i32
  %128 = mul nsw i32 %127, %124
  %129 = add nsw i32 %128, %121
  %130 = getelementptr inbounds i8, i8* %61, i64 9
  %131 = load i8, i8* %122, align 1
  %132 = sext i8 %131 to i32
  %133 = getelementptr inbounds i8, i8* %125, i64 1
  %134 = load i8, i8* %125, align 1
  %135 = sext i8 %134 to i32
  %136 = mul nsw i32 %135, %132
  %137 = add nsw i32 %136, %129
  %138 = getelementptr inbounds i8, i8* %61, i64 10
  %139 = load i8, i8* %130, align 1
  %140 = sext i8 %139 to i32
  %141 = getelementptr inbounds i8, i8* %133, i64 1
  %142 = load i8, i8* %133, align 1
  %143 = sext i8 %142 to i32
  %144 = mul nsw i32 %143, %140
  %145 = add nsw i32 %144, %137
  %146 = getelementptr inbounds i8, i8* %61, i64 11
  %147 = load i8, i8* %138, align 1
  %148 = sext i8 %147 to i32
  %149 = getelementptr inbounds i8, i8* %141, i64 1
  %150 = load i8, i8* %141, align 1
  %151 = sext i8 %150 to i32
  %152 = mul nsw i32 %151, %148
  %153 = add nsw i32 %152, %145
  %154 = getelementptr inbounds i8, i8* %61, i64 12
  %155 = load i8, i8* %146, align 1
  %156 = sext i8 %155 to i32
  %157 = getelementptr inbounds i8, i8* %149, i64 1
  %158 = load i8, i8* %149, align 1
  %159 = sext i8 %158 to i32
  %160 = mul nsw i32 %159, %156
  %161 = add nsw i32 %160, %153
  %162 = getelementptr inbounds i8, i8* %61, i64 13
  %163 = load i8, i8* %154, align 1
  %164 = sext i8 %163 to i32
  %165 = getelementptr inbounds i8, i8* %157, i64 1
  %166 = load i8, i8* %157, align 1
  %167 = sext i8 %166 to i32
  %168 = mul nsw i32 %167, %164
  %169 = add nsw i32 %168, %161
  %170 = getelementptr inbounds i8, i8* %61, i64 14
  %171 = load i8, i8* %162, align 1
  %172 = sext i8 %171 to i32
  %173 = getelementptr inbounds i8, i8* %165, i64 1
  %174 = load i8, i8* %165, align 1
  %175 = sext i8 %174 to i32
  %176 = mul nsw i32 %175, %172
  %177 = add nsw i32 %176, %169
  %178 = getelementptr inbounds i8, i8* %61, i64 15
  %179 = load i8, i8* %170, align 1
  %180 = sext i8 %179 to i32
  %181 = getelementptr inbounds i8, i8* %173, i64 1
  %182 = load i8, i8* %173, align 1
  %183 = sext i8 %182 to i32
  %184 = mul nsw i32 %183, %180
  %185 = add nsw i32 %184, %177
  %186 = load i8, i8* %178, align 1
  %187 = sext i8 %186 to i32
  %188 = load i8, i8* %181, align 1
  %189 = sext i8 %188 to i32
  %190 = mul nsw i32 %189, %187
  %191 = add nsw i32 %190, %185
  %192 = getelementptr i8, i8* %61, i64 16
  %193 = add nuw nsw i32 %59, 1
  %194 = getelementptr inbounds i8, i8* %58, i64 1
  %195 = icmp eq i32 %193, %33
  br i1 %195, label %42, label %57
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6tflite12tensor_utils43PortableMatrixBatchVectorMultiplyAccumulateEPKaPKiS2_iiiiiiPiPsPNS_17CpuBackendContextE(i8*, i32*, i8*, i32, i32, i32, i32, i32, i32, i32* nocapture readnone, i16*, %"class.tflite::CpuBackendContext"* nocapture readnone) local_unnamed_addr #0 {
  tail call void @_ZN6tflite12tensor_utils47PortableMatrixBatchVectorMultiplyAccumulateImplIsEEvPKaPKiS3_iiiiiiPT_(i8* %0, i32* %1, i8* %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8, i16* %10)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite12tensor_utils47PortableMatrixBatchVectorMultiplyAccumulateImplIsEEvPKaPKiS3_iiiiiiPT_(i8*, i32*, i8*, i32, i32, i32, i32, i32, i32, i16*) local_unnamed_addr #0 comdat {
  %11 = icmp sgt i32 %5, 0
  br i1 %11, label %12, label %40

12:                                               ; preds = %10
  %13 = icmp sgt i32 %7, 0
  %14 = icmp sgt i32 %6, 0
  %15 = icmp sgt i32 %4, 0
  %16 = sub nsw i32 0, %4
  %17 = select i1 %15, i32 0, i32 %16
  %18 = shl i32 1, %4
  %19 = select i1 %15, i32 %18, i32 1
  %20 = sext i32 %3 to i64
  %21 = icmp eq i32 %3, -2147483648
  %22 = zext i32 %17 to i64
  %23 = shl nsw i64 -1, %22
  %24 = trunc i64 %23 to i32
  %25 = xor i32 %24, -1
  %26 = ashr i32 %25, 1
  %27 = sext i32 %6 to i64
  %28 = sext i32 %7 to i64
  %29 = zext i32 %5 to i64
  %30 = zext i32 %7 to i64
  %31 = zext i32 %6 to i64
  %32 = icmp ult i32 %6, 8
  %33 = and i64 %31, 4294967288
  %34 = icmp eq i64 %33, %31
  br label %35

35:                                               ; preds = %41, %12
  %36 = phi i64 [ 0, %12 ], [ %42, %41 ]
  br i1 %13, label %37, label %41

37:                                               ; preds = %35
  %38 = mul nsw i64 %36, %27
  %39 = mul nsw i64 %36, %28
  br label %44

40:                                               ; preds = %41, %10
  ret void

41:                                               ; preds = %105, %35
  %42 = add nuw nsw i64 %36, 1
  %43 = icmp eq i64 %42, %29
  br i1 %43, label %40, label %35

44:                                               ; preds = %105, %37
  %45 = phi i64 [ 0, %37 ], [ %125, %105 ]
  %46 = getelementptr inbounds i32, i32* %1, i64 %45
  %47 = load i32, i32* %46, align 4
  br i1 %14, label %48, label %90

48:                                               ; preds = %44
  %49 = mul nsw i64 %45, %27
  br i1 %32, label %50, label %53

50:                                               ; preds = %83, %48
  %51 = phi i64 [ 0, %48 ], [ %33, %83 ]
  %52 = phi i32 [ %47, %48 ], [ %89, %83 ]
  br label %127

53:                                               ; preds = %48
  %54 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %47, i32 0
  br label %55

55:                                               ; preds = %55, %53
  %56 = phi i64 [ 0, %53 ], [ %81, %55 ]
  %57 = phi <4 x i32> [ %54, %53 ], [ %79, %55 ]
  %58 = phi <4 x i32> [ zeroinitializer, %53 ], [ %80, %55 ]
  %59 = add nsw i64 %56, %38
  %60 = getelementptr inbounds i8, i8* %0, i64 %59
  %61 = bitcast i8* %60 to <4 x i8>*
  %62 = load <4 x i8>, <4 x i8>* %61, align 1
  %63 = getelementptr inbounds i8, i8* %60, i64 4
  %64 = bitcast i8* %63 to <4 x i8>*
  %65 = load <4 x i8>, <4 x i8>* %64, align 1
  %66 = add nsw i64 %56, %49
  %67 = getelementptr inbounds i8, i8* %2, i64 %66
  %68 = bitcast i8* %67 to <4 x i8>*
  %69 = load <4 x i8>, <4 x i8>* %68, align 1
  %70 = getelementptr inbounds i8, i8* %67, i64 4
  %71 = bitcast i8* %70 to <4 x i8>*
  %72 = load <4 x i8>, <4 x i8>* %71, align 1
  %73 = sext <4 x i8> %62 to <4 x i32>
  %74 = sext <4 x i8> %65 to <4 x i32>
  %75 = sext <4 x i8> %69 to <4 x i32>
  %76 = sext <4 x i8> %72 to <4 x i32>
  %77 = mul nsw <4 x i32> %75, %73
  %78 = mul nsw <4 x i32> %76, %74
  %79 = add nsw <4 x i32> %77, %57
  %80 = add nsw <4 x i32> %78, %58
  %81 = add i64 %56, 8
  %82 = icmp eq i64 %81, %33
  br i1 %82, label %83, label %55, !llvm.loop !51

83:                                               ; preds = %55
  %84 = add <4 x i32> %80, %79
  %85 = shufflevector <4 x i32> %84, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %86 = add <4 x i32> %84, %85
  %87 = shufflevector <4 x i32> %86, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %88 = add <4 x i32> %86, %87
  %89 = extractelement <4 x i32> %88, i32 0
  br i1 %34, label %90, label %50

90:                                               ; preds = %127, %83, %44
  %91 = phi i32 [ %47, %44 ], [ %89, %83 ], [ %139, %127 ]
  %92 = mul nsw i32 %91, %19
  %93 = icmp eq i32 %92, %3
  br i1 %93, label %96, label %94

94:                                               ; preds = %90
  %95 = sext i32 %92 to i64
  br label %97

96:                                               ; preds = %90
  br i1 %21, label %105, label %97

97:                                               ; preds = %96, %94
  %98 = phi i64 [ %95, %94 ], [ %20, %96 ]
  %99 = mul nsw i64 %98, %20
  %100 = icmp sgt i64 %99, -1
  %101 = select i1 %100, i64 1073741824, i64 -1073741823
  %102 = add nsw i64 %101, %99
  %103 = sdiv i64 %102, 2147483648
  %104 = trunc i64 %103 to i32
  br label %105

105:                                              ; preds = %96, %97
  %106 = phi i32 [ %104, %97 ], [ 2147483647, %96 ]
  %107 = and i32 %106, %25
  %108 = lshr i32 %106, 31
  %109 = add nsw i32 %108, %26
  %110 = ashr i32 %106, %17
  %111 = icmp sgt i32 %107, %109
  %112 = zext i1 %111 to i32
  %113 = add nsw i64 %45, %39
  %114 = getelementptr inbounds i16, i16* %9, i64 %113
  %115 = load i16, i16* %114, align 2
  %116 = sext i16 %115 to i32
  %117 = add i32 %110, %8
  %118 = add i32 %117, %116
  %119 = add i32 %118, %112
  %120 = icmp slt i32 %119, 32767
  %121 = select i1 %120, i32 %119, i32 32767
  %122 = icmp sgt i32 %121, -32768
  %123 = select i1 %122, i32 %121, i32 -32768
  %124 = trunc i32 %123 to i16
  store i16 %124, i16* %114, align 2
  %125 = add nuw nsw i64 %45, 1
  %126 = icmp eq i64 %125, %30
  br i1 %126, label %41, label %44

127:                                              ; preds = %50, %127
  %128 = phi i64 [ %140, %127 ], [ %51, %50 ]
  %129 = phi i32 [ %139, %127 ], [ %52, %50 ]
  %130 = add nsw i64 %128, %38
  %131 = getelementptr inbounds i8, i8* %0, i64 %130
  %132 = load i8, i8* %131, align 1
  %133 = add nsw i64 %128, %49
  %134 = getelementptr inbounds i8, i8* %2, i64 %133
  %135 = load i8, i8* %134, align 1
  %136 = sext i8 %132 to i32
  %137 = sext i8 %135 to i32
  %138 = mul nsw i32 %137, %136
  %139 = add nsw i32 %138, %129
  %140 = add nuw nsw i64 %128, 1
  %141 = icmp eq i64 %140, %31
  br i1 %141, label %90, label %127, !llvm.loop !52
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6tflite12tensor_utils43PortableMatrixBatchVectorMultiplyAccumulateEPKaPKiS2_iiiiiiPiPaPNS_17CpuBackendContextE(i8*, i32*, i8*, i32, i32, i32, i32, i32, i32, i32* nocapture readnone, i8*, %"class.tflite::CpuBackendContext"* nocapture readnone) local_unnamed_addr #0 {
  tail call void @_ZN6tflite12tensor_utils47PortableMatrixBatchVectorMultiplyAccumulateImplIaEEvPKaPKiS3_iiiiiiPT_(i8* %0, i32* %1, i8* %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8, i8* %10)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite12tensor_utils47PortableMatrixBatchVectorMultiplyAccumulateImplIaEEvPKaPKiS3_iiiiiiPT_(i8*, i32*, i8*, i32, i32, i32, i32, i32, i32, i8*) local_unnamed_addr #0 comdat {
  %11 = icmp sgt i32 %5, 0
  br i1 %11, label %12, label %40

12:                                               ; preds = %10
  %13 = icmp sgt i32 %7, 0
  %14 = icmp sgt i32 %6, 0
  %15 = icmp sgt i32 %4, 0
  %16 = sub nsw i32 0, %4
  %17 = select i1 %15, i32 0, i32 %16
  %18 = shl i32 1, %4
  %19 = select i1 %15, i32 %18, i32 1
  %20 = sext i32 %3 to i64
  %21 = icmp eq i32 %3, -2147483648
  %22 = zext i32 %17 to i64
  %23 = shl nsw i64 -1, %22
  %24 = trunc i64 %23 to i32
  %25 = xor i32 %24, -1
  %26 = ashr i32 %25, 1
  %27 = sext i32 %6 to i64
  %28 = sext i32 %7 to i64
  %29 = zext i32 %5 to i64
  %30 = zext i32 %7 to i64
  %31 = zext i32 %6 to i64
  %32 = icmp ult i32 %6, 8
  %33 = and i64 %31, 4294967288
  %34 = icmp eq i64 %33, %31
  br label %35

35:                                               ; preds = %41, %12
  %36 = phi i64 [ 0, %12 ], [ %42, %41 ]
  br i1 %13, label %37, label %41

37:                                               ; preds = %35
  %38 = mul nsw i64 %36, %27
  %39 = mul nsw i64 %36, %28
  br label %44

40:                                               ; preds = %41, %10
  ret void

41:                                               ; preds = %105, %35
  %42 = add nuw nsw i64 %36, 1
  %43 = icmp eq i64 %42, %29
  br i1 %43, label %40, label %35

44:                                               ; preds = %105, %37
  %45 = phi i64 [ 0, %37 ], [ %125, %105 ]
  %46 = getelementptr inbounds i32, i32* %1, i64 %45
  %47 = load i32, i32* %46, align 4
  br i1 %14, label %48, label %90

48:                                               ; preds = %44
  %49 = mul nsw i64 %45, %27
  br i1 %32, label %50, label %53

50:                                               ; preds = %83, %48
  %51 = phi i64 [ 0, %48 ], [ %33, %83 ]
  %52 = phi i32 [ %47, %48 ], [ %89, %83 ]
  br label %127

53:                                               ; preds = %48
  %54 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %47, i32 0
  br label %55

55:                                               ; preds = %55, %53
  %56 = phi i64 [ 0, %53 ], [ %81, %55 ]
  %57 = phi <4 x i32> [ %54, %53 ], [ %79, %55 ]
  %58 = phi <4 x i32> [ zeroinitializer, %53 ], [ %80, %55 ]
  %59 = add nsw i64 %56, %38
  %60 = getelementptr inbounds i8, i8* %0, i64 %59
  %61 = bitcast i8* %60 to <4 x i8>*
  %62 = load <4 x i8>, <4 x i8>* %61, align 1
  %63 = getelementptr inbounds i8, i8* %60, i64 4
  %64 = bitcast i8* %63 to <4 x i8>*
  %65 = load <4 x i8>, <4 x i8>* %64, align 1
  %66 = add nsw i64 %56, %49
  %67 = getelementptr inbounds i8, i8* %2, i64 %66
  %68 = bitcast i8* %67 to <4 x i8>*
  %69 = load <4 x i8>, <4 x i8>* %68, align 1
  %70 = getelementptr inbounds i8, i8* %67, i64 4
  %71 = bitcast i8* %70 to <4 x i8>*
  %72 = load <4 x i8>, <4 x i8>* %71, align 1
  %73 = sext <4 x i8> %62 to <4 x i32>
  %74 = sext <4 x i8> %65 to <4 x i32>
  %75 = sext <4 x i8> %69 to <4 x i32>
  %76 = sext <4 x i8> %72 to <4 x i32>
  %77 = mul nsw <4 x i32> %75, %73
  %78 = mul nsw <4 x i32> %76, %74
  %79 = add nsw <4 x i32> %77, %57
  %80 = add nsw <4 x i32> %78, %58
  %81 = add i64 %56, 8
  %82 = icmp eq i64 %81, %33
  br i1 %82, label %83, label %55, !llvm.loop !53

83:                                               ; preds = %55
  %84 = add <4 x i32> %80, %79
  %85 = shufflevector <4 x i32> %84, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %86 = add <4 x i32> %84, %85
  %87 = shufflevector <4 x i32> %86, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %88 = add <4 x i32> %86, %87
  %89 = extractelement <4 x i32> %88, i32 0
  br i1 %34, label %90, label %50

90:                                               ; preds = %127, %83, %44
  %91 = phi i32 [ %47, %44 ], [ %89, %83 ], [ %139, %127 ]
  %92 = mul nsw i32 %91, %19
  %93 = icmp eq i32 %92, %3
  br i1 %93, label %96, label %94

94:                                               ; preds = %90
  %95 = sext i32 %92 to i64
  br label %97

96:                                               ; preds = %90
  br i1 %21, label %105, label %97

97:                                               ; preds = %96, %94
  %98 = phi i64 [ %95, %94 ], [ %20, %96 ]
  %99 = mul nsw i64 %98, %20
  %100 = icmp sgt i64 %99, -1
  %101 = select i1 %100, i64 1073741824, i64 -1073741823
  %102 = add nsw i64 %101, %99
  %103 = sdiv i64 %102, 2147483648
  %104 = trunc i64 %103 to i32
  br label %105

105:                                              ; preds = %96, %97
  %106 = phi i32 [ %104, %97 ], [ 2147483647, %96 ]
  %107 = and i32 %106, %25
  %108 = lshr i32 %106, 31
  %109 = add nsw i32 %108, %26
  %110 = ashr i32 %106, %17
  %111 = icmp sgt i32 %107, %109
  %112 = zext i1 %111 to i32
  %113 = add nsw i64 %45, %39
  %114 = getelementptr inbounds i8, i8* %9, i64 %113
  %115 = load i8, i8* %114, align 1
  %116 = sext i8 %115 to i32
  %117 = add i32 %110, %8
  %118 = add i32 %117, %116
  %119 = add i32 %118, %112
  %120 = icmp slt i32 %119, 127
  %121 = select i1 %120, i32 %119, i32 127
  %122 = icmp sgt i32 %121, -128
  %123 = select i1 %122, i32 %121, i32 -128
  %124 = trunc i32 %123 to i8
  store i8 %124, i8* %114, align 1
  %125 = add nuw nsw i64 %45, 1
  %126 = icmp eq i64 %125, %30
  br i1 %126, label %41, label %44

127:                                              ; preds = %50, %127
  %128 = phi i64 [ %140, %127 ], [ %51, %50 ]
  %129 = phi i32 [ %139, %127 ], [ %52, %50 ]
  %130 = add nsw i64 %128, %38
  %131 = getelementptr inbounds i8, i8* %0, i64 %130
  %132 = load i8, i8* %131, align 1
  %133 = add nsw i64 %128, %49
  %134 = getelementptr inbounds i8, i8* %2, i64 %133
  %135 = load i8, i8* %134, align 1
  %136 = sext i8 %132 to i32
  %137 = sext i8 %135 to i32
  %138 = mul nsw i32 %137, %136
  %139 = add nsw i32 %138, %129
  %140 = add nuw nsw i64 %128, 1
  %141 = icmp eq i64 %140, %31
  br i1 %141, label %90, label %127, !llvm.loop !54
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6tflite12tensor_utils33PortableMatrixBatchVectorMultiplyEPKaiS2_iiiiiPaa(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32, i32, i32, i32, i8* nocapture, i8 signext) local_unnamed_addr #3 {
  %11 = icmp sgt i32 %5, 0
  br i1 %11, label %12, label %45

12:                                               ; preds = %10
  %13 = icmp sgt i32 %7, 0
  %14 = icmp sgt i32 %6, 0
  %15 = icmp sgt i32 %4, 0
  %16 = sub nsw i32 0, %4
  %17 = select i1 %15, i32 0, i32 %16
  %18 = shl i32 1, %4
  %19 = select i1 %15, i32 %18, i32 1
  %20 = sext i32 %3 to i64
  %21 = icmp eq i32 %3, -2147483648
  %22 = zext i32 %17 to i64
  %23 = shl nsw i64 -1, %22
  %24 = trunc i64 %23 to i32
  %25 = xor i32 %24, -1
  %26 = ashr i32 %25, 1
  %27 = sext i8 %9 to i32
  %28 = sext i32 %6 to i64
  %29 = sext i32 %7 to i64
  %30 = zext i32 %5 to i64
  %31 = zext i32 %7 to i64
  %32 = zext i32 %6 to i64
  %33 = icmp ult i32 %6, 8
  %34 = and i64 %32, 4294967288
  %35 = insertelement <4 x i32> undef, i32 %1, i32 0
  %36 = shufflevector <4 x i32> %35, <4 x i32> undef, <4 x i32> zeroinitializer
  %37 = insertelement <4 x i32> undef, i32 %1, i32 0
  %38 = shufflevector <4 x i32> %37, <4 x i32> undef, <4 x i32> zeroinitializer
  %39 = icmp eq i64 %34, %32
  br label %40

40:                                               ; preds = %90, %12
  %41 = phi i64 [ 0, %12 ], [ %91, %90 ]
  br i1 %13, label %42, label %90

42:                                               ; preds = %40
  %43 = mul nsw i64 %41, %28
  %44 = mul nsw i64 %41, %29
  br label %46

45:                                               ; preds = %90, %10
  ret void

46:                                               ; preds = %108, %42
  %47 = phi i64 [ 0, %42 ], [ %125, %108 ]
  br i1 %14, label %48, label %93

48:                                               ; preds = %46
  %49 = mul nsw i64 %47, %28
  br i1 %33, label %50, label %53

50:                                               ; preds = %83, %48
  %51 = phi i64 [ 0, %48 ], [ %34, %83 ]
  %52 = phi i32 [ 0, %48 ], [ %89, %83 ]
  br label %127

53:                                               ; preds = %48, %53
  %54 = phi i64 [ %81, %53 ], [ 0, %48 ]
  %55 = phi <4 x i32> [ %79, %53 ], [ zeroinitializer, %48 ]
  %56 = phi <4 x i32> [ %80, %53 ], [ zeroinitializer, %48 ]
  %57 = add nsw i64 %54, %43
  %58 = getelementptr inbounds i8, i8* %0, i64 %57
  %59 = bitcast i8* %58 to <4 x i8>*
  %60 = load <4 x i8>, <4 x i8>* %59, align 1
  %61 = getelementptr inbounds i8, i8* %58, i64 4
  %62 = bitcast i8* %61 to <4 x i8>*
  %63 = load <4 x i8>, <4 x i8>* %62, align 1
  %64 = sext <4 x i8> %60 to <4 x i32>
  %65 = sext <4 x i8> %63 to <4 x i32>
  %66 = add nsw i64 %54, %49
  %67 = getelementptr inbounds i8, i8* %2, i64 %66
  %68 = bitcast i8* %67 to <4 x i8>*
  %69 = load <4 x i8>, <4 x i8>* %68, align 1
  %70 = getelementptr inbounds i8, i8* %67, i64 4
  %71 = bitcast i8* %70 to <4 x i8>*
  %72 = load <4 x i8>, <4 x i8>* %71, align 1
  %73 = sub nsw <4 x i32> %64, %36
  %74 = sub nsw <4 x i32> %65, %38
  %75 = sext <4 x i8> %69 to <4 x i32>
  %76 = sext <4 x i8> %72 to <4 x i32>
  %77 = mul nsw <4 x i32> %73, %75
  %78 = mul nsw <4 x i32> %74, %76
  %79 = add nsw <4 x i32> %77, %55
  %80 = add nsw <4 x i32> %78, %56
  %81 = add i64 %54, 8
  %82 = icmp eq i64 %81, %34
  br i1 %82, label %83, label %53, !llvm.loop !55

83:                                               ; preds = %53
  %84 = add <4 x i32> %80, %79
  %85 = shufflevector <4 x i32> %84, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %86 = add <4 x i32> %84, %85
  %87 = shufflevector <4 x i32> %86, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %88 = add <4 x i32> %86, %87
  %89 = extractelement <4 x i32> %88, i32 0
  br i1 %39, label %93, label %50

90:                                               ; preds = %108, %40
  %91 = add nuw nsw i64 %41, 1
  %92 = icmp eq i64 %91, %30
  br i1 %92, label %45, label %40

93:                                               ; preds = %127, %83, %46
  %94 = phi i32 [ 0, %46 ], [ %89, %83 ], [ %140, %127 ]
  %95 = mul nsw i32 %94, %19
  %96 = icmp eq i32 %95, %3
  br i1 %96, label %99, label %97

97:                                               ; preds = %93
  %98 = sext i32 %95 to i64
  br label %100

99:                                               ; preds = %93
  br i1 %21, label %108, label %100

100:                                              ; preds = %99, %97
  %101 = phi i64 [ %98, %97 ], [ %20, %99 ]
  %102 = mul nsw i64 %101, %20
  %103 = icmp sgt i64 %102, -1
  %104 = select i1 %103, i64 1073741824, i64 -1073741823
  %105 = add nsw i64 %104, %102
  %106 = sdiv i64 %105, 2147483648
  %107 = trunc i64 %106 to i32
  br label %108

108:                                              ; preds = %99, %100
  %109 = phi i32 [ %107, %100 ], [ 2147483647, %99 ]
  %110 = and i32 %109, %25
  %111 = lshr i32 %109, 31
  %112 = add nsw i32 %111, %26
  %113 = ashr i32 %109, %17
  %114 = icmp sgt i32 %110, %112
  %115 = zext i1 %114 to i32
  %116 = add i32 %113, %27
  %117 = add i32 %116, %115
  %118 = icmp slt i32 %117, 127
  %119 = select i1 %118, i32 %117, i32 127
  %120 = icmp sgt i32 %119, -128
  %121 = select i1 %120, i32 %119, i32 -128
  %122 = trunc i32 %121 to i8
  %123 = add nsw i64 %47, %44
  %124 = getelementptr inbounds i8, i8* %8, i64 %123
  store i8 %122, i8* %124, align 1
  %125 = add nuw nsw i64 %47, 1
  %126 = icmp eq i64 %125, %31
  br i1 %126, label %90, label %46

127:                                              ; preds = %50, %127
  %128 = phi i64 [ %141, %127 ], [ %51, %50 ]
  %129 = phi i32 [ %140, %127 ], [ %52, %50 ]
  %130 = add nsw i64 %128, %43
  %131 = getelementptr inbounds i8, i8* %0, i64 %130
  %132 = load i8, i8* %131, align 1
  %133 = sext i8 %132 to i32
  %134 = add nsw i64 %128, %49
  %135 = getelementptr inbounds i8, i8* %2, i64 %134
  %136 = load i8, i8* %135, align 1
  %137 = sub nsw i32 %133, %1
  %138 = sext i8 %136 to i32
  %139 = mul nsw i32 %137, %138
  %140 = add nsw i32 %139, %129
  %141 = add nuw nsw i64 %128, 1
  %142 = icmp eq i64 %141, %32
  br i1 %142, label %93, label %127, !llvm.loop !56
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6tflite12tensor_utils33PortableMatrixBatchVectorMultiplyEPKsPKaiiPKiiiiiPa(i16* nocapture readonly, i8* nocapture readonly, i32, i32, i32* nocapture readonly, i32, i32, i32, i32, i8* nocapture) local_unnamed_addr #3 {
  %11 = icmp sgt i32 %5, 0
  br i1 %11, label %12, label %38

12:                                               ; preds = %10
  %13 = icmp sgt i32 %7, 0
  %14 = icmp sgt i32 %6, 0
  %15 = add nsw i32 %2, 32768
  %16 = ashr i32 %15, 16
  %17 = sub nsw i32 15, %3
  %18 = sext i32 %16 to i64
  %19 = sub i32 14, %3
  %20 = zext i32 %19 to i64
  %21 = shl i64 1, %20
  %22 = zext i32 %17 to i64
  %23 = sext i32 %8 to i64
  %24 = sext i32 %6 to i64
  %25 = sext i32 %7 to i64
  %26 = zext i32 %5 to i64
  %27 = zext i32 %7 to i64
  %28 = zext i32 %6 to i64
  %29 = and i64 %28, 1
  %30 = icmp eq i32 %6, 1
  %31 = sub nsw i64 %28, %29
  %32 = icmp eq i64 %29, 0
  br label %33

33:                                               ; preds = %39, %12
  %34 = phi i64 [ 0, %12 ], [ %40, %39 ]
  br i1 %13, label %35, label %39

35:                                               ; preds = %33
  %36 = mul nsw i64 %34, %24
  %37 = mul nsw i64 %34, %25
  br label %42

38:                                               ; preds = %39, %10
  ret void

39:                                               ; preds = %64, %33
  %40 = add nuw nsw i64 %34, 1
  %41 = icmp eq i64 %40, %26
  br i1 %41, label %38, label %33

42:                                               ; preds = %64, %35
  %43 = phi i64 [ 0, %35 ], [ %79, %64 ]
  %44 = getelementptr inbounds i32, i32* %4, i64 %43
  %45 = load i32, i32* %44, align 4
  %46 = sext i32 %45 to i64
  br i1 %14, label %47, label %64

47:                                               ; preds = %42
  %48 = mul nsw i64 %43, %24
  br i1 %30, label %49, label %81

49:                                               ; preds = %81, %47
  %50 = phi i64 [ undef, %47 ], [ %105, %81 ]
  %51 = phi i64 [ 0, %47 ], [ %106, %81 ]
  %52 = phi i64 [ %46, %47 ], [ %105, %81 ]
  br i1 %32, label %64, label %53

53:                                               ; preds = %49
  %54 = add nsw i64 %51, %48
  %55 = getelementptr inbounds i8, i8* %1, i64 %54
  %56 = load i8, i8* %55, align 1
  %57 = sext i8 %56 to i64
  %58 = add nsw i64 %51, %36
  %59 = getelementptr inbounds i16, i16* %0, i64 %58
  %60 = load i16, i16* %59, align 2
  %61 = sext i16 %60 to i64
  %62 = mul nsw i64 %57, %61
  %63 = add nsw i64 %62, %52
  br label %64

64:                                               ; preds = %53, %49, %42
  %65 = phi i64 [ %46, %42 ], [ %50, %49 ], [ %63, %53 ]
  %66 = mul nsw i64 %65, %18
  %67 = add nsw i64 %66, %21
  %68 = ashr i64 %67, %22
  %69 = shl i64 %68, 32
  %70 = ashr exact i64 %69, 32
  %71 = add nsw i64 %70, %23
  %72 = icmp slt i64 %71, 127
  %73 = select i1 %72, i64 %71, i64 127
  %74 = icmp sgt i64 %73, -128
  %75 = select i1 %74, i64 %73, i64 -128
  %76 = trunc i64 %75 to i8
  %77 = add nsw i64 %43, %37
  %78 = getelementptr inbounds i8, i8* %9, i64 %77
  store i8 %76, i8* %78, align 1
  %79 = add nuw nsw i64 %43, 1
  %80 = icmp eq i64 %79, %27
  br i1 %80, label %39, label %42

81:                                               ; preds = %47, %81
  %82 = phi i64 [ %106, %81 ], [ 0, %47 ]
  %83 = phi i64 [ %105, %81 ], [ %46, %47 ]
  %84 = phi i64 [ %107, %81 ], [ %31, %47 ]
  %85 = add nsw i64 %82, %36
  %86 = getelementptr inbounds i16, i16* %0, i64 %85
  %87 = load i16, i16* %86, align 2
  %88 = add nsw i64 %82, %48
  %89 = getelementptr inbounds i8, i8* %1, i64 %88
  %90 = load i8, i8* %89, align 1
  %91 = sext i16 %87 to i64
  %92 = sext i8 %90 to i64
  %93 = mul nsw i64 %92, %91
  %94 = add nsw i64 %93, %83
  %95 = or i64 %82, 1
  %96 = add nsw i64 %95, %36
  %97 = getelementptr inbounds i16, i16* %0, i64 %96
  %98 = load i16, i16* %97, align 2
  %99 = add nsw i64 %95, %48
  %100 = getelementptr inbounds i8, i8* %1, i64 %99
  %101 = load i8, i8* %100, align 1
  %102 = sext i16 %98 to i64
  %103 = sext i8 %101 to i64
  %104 = mul nsw i64 %103, %102
  %105 = add nsw i64 %104, %94
  %106 = add nuw nsw i64 %82, 2
  %107 = add i64 %84, -2
  %108 = icmp eq i64 %107, 0
  br i1 %108, label %49, label %81
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6tflite12tensor_utils22PortableApplyLayerNormEPKsS2_PKiiiiiiPs(i16* nocapture readonly, i16* nocapture readonly, i32* nocapture readonly, i32, i32, i32, i32, i32, i16* nocapture) local_unnamed_addr #0 {
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = icmp sgt i32 %6, 0
  br i1 %12, label %13, label %45

13:                                               ; preds = %9
  %14 = icmp sgt i32 %7, 0
  %15 = sext i32 %7 to i64
  %16 = sdiv i32 1048576, %7
  %17 = sext i32 %16 to i64
  %18 = bitcast i32* %10 to i8*
  %19 = bitcast i32* %11 to i8*
  %20 = add nsw i32 %4, 12
  %21 = icmp sgt i32 %20, 0
  %22 = sub i32 -12, %4
  %23 = select i1 %21, i32 0, i32 %22
  %24 = shl i32 1, %20
  %25 = select i1 %21, i32 %24, i32 1
  %26 = sext i32 %3 to i64
  %27 = icmp eq i32 %3, -2147483648
  %28 = zext i32 %23 to i64
  %29 = shl nsw i64 -1, %28
  %30 = trunc i64 %29 to i32
  %31 = xor i32 %30, -1
  %32 = ashr i32 %31, 1
  %33 = zext i32 %6 to i64
  %34 = zext i32 %7 to i64
  %35 = zext i32 %7 to i64
  %36 = add nsw i64 %34, -1
  %37 = and i64 %34, 3
  %38 = icmp ult i64 %36, 3
  %39 = sub nsw i64 %34, %37
  %40 = icmp eq i64 %37, 0
  br label %41

41:                                               ; preds = %147, %13
  %42 = phi i64 [ 0, %13 ], [ %148, %147 ]
  br i1 %14, label %43, label %69

43:                                               ; preds = %41
  %44 = mul nsw i64 %42, %15
  br i1 %38, label %46, label %100

45:                                               ; preds = %147, %9
  ret void

46:                                               ; preds = %100, %43
  %47 = phi i64 [ undef, %43 ], [ %140, %100 ]
  %48 = phi i64 [ undef, %43 ], [ %143, %100 ]
  %49 = phi i64 [ 0, %43 ], [ %144, %100 ]
  %50 = phi i64 [ 0, %43 ], [ %140, %100 ]
  %51 = phi i64 [ 0, %43 ], [ %143, %100 ]
  br i1 %40, label %69, label %52

52:                                               ; preds = %46, %52
  %53 = phi i64 [ %66, %52 ], [ %49, %46 ]
  %54 = phi i64 [ %62, %52 ], [ %50, %46 ]
  %55 = phi i64 [ %65, %52 ], [ %51, %46 ]
  %56 = phi i64 [ %67, %52 ], [ %37, %46 ]
  %57 = add nsw i64 %53, %44
  %58 = getelementptr inbounds i16, i16* %0, i64 %57
  %59 = load i16, i16* %58, align 2
  %60 = sext i16 %59 to i32
  %61 = sext i16 %59 to i64
  %62 = add nsw i64 %54, %61
  %63 = mul nsw i32 %60, %60
  %64 = zext i32 %63 to i64
  %65 = add nuw nsw i64 %55, %64
  %66 = add nuw nsw i64 %53, 1
  %67 = add i64 %56, -1
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %69, label %52, !llvm.loop !57

69:                                               ; preds = %46, %52, %41
  %70 = phi i64 [ 0, %41 ], [ %48, %46 ], [ %65, %52 ]
  %71 = phi i64 [ 0, %41 ], [ %47, %46 ], [ %62, %52 ]
  %72 = shl nsw i64 %71, 10
  %73 = sdiv i64 %72, %15
  %74 = trunc i64 %73 to i32
  %75 = mul nsw i64 %70, %17
  %76 = shl i64 %73, 32
  %77 = ashr exact i64 %76, 32
  %78 = mul nsw i64 %77, %77
  %79 = sub nsw i64 %75, %78
  %80 = sdiv i64 %79, 1048576
  %81 = trunc i64 %80 to i32
  %82 = icmp slt i32 %81, 1
  %83 = select i1 %82, i32 %5, i32 %81
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %18) #9
  store i32 -1431655766, i32* %10, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19) #9
  store i32 -1431655766, i32* %11, align 4
  call void @_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_(i32 %83, i32 -1, i32* nonnull %10, i32* nonnull %11)
  br i1 %14, label %84, label %147

84:                                               ; preds = %69
  %85 = mul nsw i64 %42, %15
  %86 = load i32, i32* %10, align 4
  %87 = load i32, i32* %11, align 4
  %88 = icmp sgt i32 %87, 0
  %89 = sub nsw i32 0, %87
  %90 = select i1 %88, i32 0, i32 %89
  %91 = shl i32 1, %87
  %92 = select i1 %88, i32 %91, i32 1
  %93 = sext i32 %86 to i64
  %94 = icmp eq i32 %86, -2147483648
  %95 = zext i32 %90 to i64
  %96 = shl nsw i64 -1, %95
  %97 = trunc i64 %96 to i32
  %98 = xor i32 %97, -1
  %99 = ashr i32 %98, 1
  br label %150

100:                                              ; preds = %43, %100
  %101 = phi i64 [ %144, %100 ], [ 0, %43 ]
  %102 = phi i64 [ %140, %100 ], [ 0, %43 ]
  %103 = phi i64 [ %143, %100 ], [ 0, %43 ]
  %104 = phi i64 [ %145, %100 ], [ %39, %43 ]
  %105 = add nsw i64 %101, %44
  %106 = getelementptr inbounds i16, i16* %0, i64 %105
  %107 = load i16, i16* %106, align 2
  %108 = sext i16 %107 to i32
  %109 = sext i16 %107 to i64
  %110 = add nsw i64 %102, %109
  %111 = mul nsw i32 %108, %108
  %112 = zext i32 %111 to i64
  %113 = add nuw nsw i64 %103, %112
  %114 = or i64 %101, 1
  %115 = add nsw i64 %114, %44
  %116 = getelementptr inbounds i16, i16* %0, i64 %115
  %117 = load i16, i16* %116, align 2
  %118 = sext i16 %117 to i32
  %119 = sext i16 %117 to i64
  %120 = add nsw i64 %110, %119
  %121 = mul nsw i32 %118, %118
  %122 = zext i32 %121 to i64
  %123 = add nuw nsw i64 %113, %122
  %124 = or i64 %101, 2
  %125 = add nsw i64 %124, %44
  %126 = getelementptr inbounds i16, i16* %0, i64 %125
  %127 = load i16, i16* %126, align 2
  %128 = sext i16 %127 to i32
  %129 = sext i16 %127 to i64
  %130 = add nsw i64 %120, %129
  %131 = mul nsw i32 %128, %128
  %132 = zext i32 %131 to i64
  %133 = add nuw nsw i64 %123, %132
  %134 = or i64 %101, 3
  %135 = add nsw i64 %134, %44
  %136 = getelementptr inbounds i16, i16* %0, i64 %135
  %137 = load i16, i16* %136, align 2
  %138 = sext i16 %137 to i32
  %139 = sext i16 %137 to i64
  %140 = add nsw i64 %130, %139
  %141 = mul nsw i32 %138, %138
  %142 = zext i32 %141 to i64
  %143 = add nuw nsw i64 %133, %142
  %144 = add nuw nsw i64 %101, 4
  %145 = add i64 %104, -4
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %46, label %100

147:                                              ; preds = %206, %69
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18) #9
  %148 = add nuw nsw i64 %42, 1
  %149 = icmp eq i64 %148, %33
  br i1 %149, label %45, label %41

150:                                              ; preds = %206, %84
  %151 = phi i64 [ 0, %84 ], [ %221, %206 ]
  %152 = add nsw i64 %151, %85
  %153 = getelementptr inbounds i16, i16* %0, i64 %152
  %154 = load i16, i16* %153, align 2
  %155 = sext i16 %154 to i32
  %156 = shl nsw i32 %155, 10
  %157 = sub nsw i32 %156, %74
  %158 = mul nsw i32 %92, %157
  %159 = icmp eq i32 %158, %86
  br i1 %159, label %162, label %160

160:                                              ; preds = %150
  %161 = sext i32 %158 to i64
  br label %163

162:                                              ; preds = %150
  br i1 %94, label %171, label %163

163:                                              ; preds = %162, %160
  %164 = phi i64 [ %161, %160 ], [ %93, %162 ]
  %165 = mul nsw i64 %164, %93
  %166 = icmp sgt i64 %165, -1
  %167 = select i1 %166, i64 1073741824, i64 -1073741823
  %168 = add nsw i64 %167, %165
  %169 = sdiv i64 %168, 2147483648
  %170 = trunc i64 %169 to i32
  br label %171

171:                                              ; preds = %162, %163
  %172 = phi i32 [ %170, %163 ], [ 2147483647, %162 ]
  %173 = and i32 %172, %98
  %174 = lshr i32 %172, 31
  %175 = add nsw i32 %174, %99
  %176 = ashr i32 %172, %90
  %177 = icmp sgt i32 %173, %175
  %178 = zext i1 %177 to i32
  %179 = add nsw i32 %176, %178
  %180 = getelementptr inbounds i16, i16* %1, i64 %151
  %181 = load i16, i16* %180, align 2
  %182 = sext i16 %181 to i32
  %183 = mul nsw i32 %179, %182
  %184 = getelementptr inbounds i32, i32* %2, i64 %151
  %185 = load i32, i32* %184, align 4
  %186 = add nsw i32 %183, %185
  %187 = sext i32 %186 to i64
  %188 = icmp sgt i32 %186, 0
  %189 = select i1 %188, i64 512, i64 -512
  %190 = add nsw i64 %189, %187
  %191 = sdiv i64 %190, 1024
  %192 = trunc i64 %191 to i32
  %193 = mul nsw i32 %25, %192
  %194 = icmp eq i32 %193, %3
  br i1 %194, label %197, label %195

195:                                              ; preds = %171
  %196 = sext i32 %193 to i64
  br label %198

197:                                              ; preds = %171
  br i1 %27, label %206, label %198

198:                                              ; preds = %197, %195
  %199 = phi i64 [ %196, %195 ], [ %26, %197 ]
  %200 = mul nsw i64 %199, %26
  %201 = icmp sgt i64 %200, -1
  %202 = select i1 %201, i64 1073741824, i64 -1073741823
  %203 = add nsw i64 %202, %200
  %204 = sdiv i64 %203, 2147483648
  %205 = trunc i64 %204 to i32
  br label %206

206:                                              ; preds = %197, %198
  %207 = phi i32 [ %205, %198 ], [ 2147483647, %197 ]
  %208 = and i32 %207, %31
  %209 = lshr i32 %207, 31
  %210 = add nsw i32 %209, %32
  %211 = ashr i32 %207, %23
  %212 = icmp sgt i32 %208, %210
  %213 = zext i1 %212 to i32
  %214 = add nsw i32 %211, %213
  %215 = icmp sgt i32 %214, -32768
  %216 = select i1 %215, i32 %214, i32 -32768
  %217 = icmp slt i32 %216, 32767
  %218 = select i1 %217, i32 %216, i32 32767
  %219 = trunc i32 %218 to i16
  %220 = getelementptr inbounds i16, i16* %8, i64 %152
  store i16 %219, i16* %220, align 2
  %221 = add nuw nsw i64 %151, 1
  %222 = icmp eq i64 %221, %35
  br i1 %222, label %147, label %150
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_(i32, i32, i32*, i32*) local_unnamed_addr #5 comdat {
  %5 = icmp slt i32 %0, 2
  br i1 %5, label %27, label %6

6:                                                ; preds = %4
  %7 = icmp sgt i32 %0, 536870911
  %8 = lshr i32 %0, 2
  %9 = select i1 %7, i32 12, i32 11
  %10 = select i1 %7, i32 %8, i32 %0
  %11 = tail call i32 @llvm.ctlz.i32(i32 %10, i1 false) #9, !range !58
  %12 = add nsw i32 %11, -1
  %13 = lshr i32 %12, 1
  %14 = add nsw i32 %13, -1
  %15 = sub nsw i32 %9, %14
  store i32 %15, i32* %3, align 4
  %16 = shl i32 %14, 1
  %17 = shl i32 %10, %16
  %18 = ashr i32 %17, 1
  %19 = and i32 %18, 1
  %20 = lshr i32 %18, 31
  %21 = ashr i32 %17, 2
  %22 = icmp ugt i32 %19, %20
  %23 = zext i1 %22 to i32
  %24 = add nsw i32 %21, %23
  %25 = sext i32 %24 to i64
  %26 = icmp eq i32 %24, -2147483648
  br label %40

27:                                               ; preds = %4
  store i32 2147483647, i32* %2, align 4
  br label %123

28:                                               ; preds = %101
  %29 = icmp eq i32 %114, 1518500250
  %30 = sext i32 %114 to i64
  %31 = mul nsw i64 %30, 1518500250
  %32 = select i1 %29, i64 2305843009250062500, i64 %31
  %33 = icmp sgt i64 %32, -1
  %34 = select i1 %33, i64 1073741824, i64 -1073741823
  %35 = add nsw i64 %34, %32
  %36 = sdiv i64 %35, 2147483648
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %2, align 4
  %38 = load i32, i32* %3, align 4
  %39 = icmp slt i32 %38, 0
  br i1 %39, label %117, label %120

40:                                               ; preds = %101, %6
  %41 = phi i32 [ 0, %6 ], [ %115, %101 ]
  %42 = phi i32 [ 268435456, %6 ], [ %114, %101 ]
  %43 = icmp eq i32 %42, -2147483648
  %44 = sext i32 %42 to i64
  br i1 %43, label %50, label %45

45:                                               ; preds = %40
  %46 = mul nsw i64 %44, %44
  %47 = add nuw nsw i64 %46, 1073741824
  %48 = lshr i64 %47, 31
  %49 = trunc i64 %48 to i32
  br label %50

50:                                               ; preds = %40, %45
  %51 = phi i32 [ %49, %45 ], [ 2147483647, %40 ]
  %52 = icmp eq i32 %51, %42
  br i1 %52, label %55, label %53

53:                                               ; preds = %50
  %54 = sext i32 %51 to i64
  br label %56

55:                                               ; preds = %50
  br i1 %43, label %64, label %56

56:                                               ; preds = %55, %53
  %57 = phi i64 [ %54, %53 ], [ %44, %55 ]
  %58 = mul nsw i64 %57, %44
  %59 = icmp sgt i64 %58, -1
  %60 = select i1 %59, i64 1073741824, i64 -1073741823
  %61 = add nsw i64 %60, %58
  %62 = sdiv i64 %61, 2147483648
  %63 = trunc i64 %62 to i32
  br label %64

64:                                               ; preds = %55, %56
  %65 = phi i32 [ %63, %56 ], [ 2147483647, %55 ]
  %66 = icmp slt i32 %65, 33554432
  %67 = icmp sgt i32 %65, -33554432
  %68 = sext i32 %65 to i64
  %69 = shl nsw i64 %68, 6
  %70 = icmp slt i64 %69, 2147483647
  %71 = select i1 %70, i64 %69, i64 2147483647
  %72 = icmp sgt i64 %71, -2147483648
  %73 = select i1 %72, i64 %71, i64 -2147483648
  %74 = trunc i64 %73 to i32
  %75 = select i1 %66, i32 %74, i32 2147483647
  %76 = select i1 %67, i32 %75, i32 -2147483648
  %77 = icmp eq i32 %42, 402653184
  br i1 %77, label %81, label %78

78:                                               ; preds = %64
  %79 = mul nsw i64 %44, 402653184
  %80 = icmp sgt i32 %42, -1
  br i1 %80, label %81, label %83

81:                                               ; preds = %64, %78
  %82 = phi i64 [ %79, %78 ], [ 162129586585337856, %64 ]
  br label %83

83:                                               ; preds = %81, %78
  %84 = phi i64 [ %82, %81 ], [ %79, %78 ]
  %85 = phi i64 [ 1073741824, %81 ], [ -1073741823, %78 ]
  %86 = add nsw i64 %85, %84
  %87 = sdiv i64 %86, 2147483648
  %88 = trunc i64 %87 to i32
  %89 = icmp eq i32 %24, %76
  br i1 %89, label %92, label %90

90:                                               ; preds = %83
  %91 = sext i32 %76 to i64
  br label %93

92:                                               ; preds = %83
  br i1 %26, label %101, label %93

93:                                               ; preds = %92, %90
  %94 = phi i64 [ %91, %90 ], [ %25, %92 ]
  %95 = mul nsw i64 %94, %25
  %96 = icmp sgt i64 %95, -1
  %97 = select i1 %96, i64 1073741824, i64 -1073741823
  %98 = add nsw i64 %97, %95
  %99 = sdiv i64 %98, 2147483648
  %100 = trunc i64 %99 to i32
  br label %101

101:                                              ; preds = %92, %93
  %102 = phi i32 [ %100, %93 ], [ 2147483647, %92 ]
  %103 = sub nsw i32 %88, %102
  %104 = icmp slt i32 %103, 268435456
  %105 = icmp sgt i32 %103, -268435456
  %106 = sext i32 %103 to i64
  %107 = shl nsw i64 %106, 3
  %108 = icmp slt i64 %107, 2147483647
  %109 = select i1 %108, i64 %107, i64 2147483647
  %110 = icmp sgt i64 %109, -2147483648
  %111 = select i1 %110, i64 %109, i64 -2147483648
  %112 = trunc i64 %111 to i32
  %113 = select i1 %104, i32 %112, i32 2147483647
  %114 = select i1 %105, i32 %113, i32 -2147483648
  %115 = add nuw nsw i32 %41, 1
  %116 = icmp eq i32 %115, 5
  br i1 %116, label %28, label %40

117:                                              ; preds = %28
  %118 = sub nsw i32 0, %38
  %119 = shl i32 %37, %118
  store i32 %119, i32* %2, align 4
  store i32 0, i32* %3, align 4
  br label %120

120:                                              ; preds = %117, %28
  %121 = phi i32 [ 0, %117 ], [ %38, %28 ]
  %122 = mul nsw i32 %121, %1
  br label %123

123:                                              ; preds = %120, %27
  %124 = phi i32 [ %122, %120 ], [ 0, %27 ]
  store i32 %124, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6tflite12tensor_utils27PortableApplyLayerNormFloatEPKsS2_iiPKiiiPs(i16* nocapture readonly, i16* nocapture readonly, i32, i32, i32* nocapture readonly, i32, i32, i16* nocapture) local_unnamed_addr #0 {
  %9 = sitofp i32 %2 to double
  %10 = add nsw i32 %3, -31
  %11 = tail call double @ldexp(double 1.000000e+00, i32 %10) #9
  %12 = fmul double %11, %9
  %13 = fptrunc double %12 to float
  %14 = fmul float %13, 0x3F50000000000000
  %15 = icmp sgt i32 %5, 0
  br i1 %15, label %16, label %49

16:                                               ; preds = %8
  %17 = icmp sgt i32 %6, 0
  %18 = sitofp i32 %6 to float
  %19 = sext i32 %6 to i64
  %20 = zext i32 %5 to i64
  %21 = zext i32 %6 to i64
  %22 = zext i32 %6 to i64
  %23 = getelementptr i16, i16* %1, i64 %22
  %24 = getelementptr i32, i32* %4, i64 %22
  %25 = insertelement <2 x float> undef, float %18, i32 0
  %26 = shufflevector <2 x float> %25, <2 x float> undef, <2 x i32> zeroinitializer
  %27 = and i64 %21, 1
  %28 = icmp eq i32 %6, 1
  %29 = sub nsw i64 %21, %27
  %30 = icmp eq i64 %27, 0
  %31 = icmp ult i32 %6, 4
  %32 = bitcast i32* %24 to i16*
  %33 = and i64 %22, 4294967292
  %34 = insertelement <4 x float> undef, float %13, i32 0
  %35 = shufflevector <4 x float> %34, <4 x float> undef, <4 x i32> zeroinitializer
  %36 = insertelement <4 x float> undef, float %14, i32 0
  %37 = shufflevector <4 x float> %36, <4 x float> undef, <4 x i32> zeroinitializer
  %38 = icmp eq i64 %33, %22
  br label %39

39:                                               ; preds = %156, %16
  %40 = phi i64 [ 0, %16 ], [ %157, %156 ]
  %41 = mul i64 %40, %19
  %42 = getelementptr i16, i16* %7, i64 %41
  %43 = add i64 %41, %22
  %44 = getelementptr i16, i16* %7, i64 %43
  %45 = getelementptr i16, i16* %0, i64 %41
  %46 = getelementptr i16, i16* %0, i64 %43
  br i1 %17, label %47, label %63

47:                                               ; preds = %39
  %48 = mul nsw i64 %40, %19
  br i1 %28, label %50, label %71

49:                                               ; preds = %156, %8
  ret void

50:                                               ; preds = %71, %47
  %51 = phi <2 x float> [ undef, %47 ], [ %91, %71 ]
  %52 = phi i64 [ 0, %47 ], [ %92, %71 ]
  %53 = phi <2 x float> [ zeroinitializer, %47 ], [ %91, %71 ]
  br i1 %30, label %63, label %54

54:                                               ; preds = %50
  %55 = add nsw i64 %52, %48
  %56 = getelementptr inbounds i16, i16* %0, i64 %55
  %57 = load i16, i16* %56, align 2
  %58 = sitofp i16 %57 to float
  %59 = fmul float %58, %58
  %60 = insertelement <2 x float> undef, float %59, i32 0
  %61 = insertelement <2 x float> %60, float %58, i32 1
  %62 = fadd <2 x float> %53, %61
  br label %63

63:                                               ; preds = %54, %50, %39
  %64 = phi <2 x float> [ zeroinitializer, %39 ], [ %51, %50 ], [ %62, %54 ]
  %65 = fdiv <2 x float> %64, %26
  %66 = extractelement <2 x float> %65, i32 1
  %67 = fmul float %66, %66
  %68 = extractelement <2 x float> %65, i32 0
  %69 = fsub float %68, %67
  %70 = fcmp oeq float %69, 0.000000e+00
  br i1 %70, label %98, label %95

71:                                               ; preds = %47, %71
  %72 = phi i64 [ %92, %71 ], [ 0, %47 ]
  %73 = phi <2 x float> [ %91, %71 ], [ zeroinitializer, %47 ]
  %74 = phi i64 [ %93, %71 ], [ %29, %47 ]
  %75 = add nsw i64 %72, %48
  %76 = getelementptr inbounds i16, i16* %0, i64 %75
  %77 = load i16, i16* %76, align 2
  %78 = sitofp i16 %77 to float
  %79 = fmul float %78, %78
  %80 = insertelement <2 x float> undef, float %79, i32 0
  %81 = insertelement <2 x float> %80, float %78, i32 1
  %82 = fadd <2 x float> %73, %81
  %83 = or i64 %72, 1
  %84 = add nsw i64 %83, %48
  %85 = getelementptr inbounds i16, i16* %0, i64 %84
  %86 = load i16, i16* %85, align 2
  %87 = sitofp i16 %86 to float
  %88 = fmul float %87, %87
  %89 = insertelement <2 x float> undef, float %88, i32 0
  %90 = insertelement <2 x float> %89, float %87, i32 1
  %91 = fadd <2 x float> %82, %90
  %92 = add nuw nsw i64 %72, 2
  %93 = add i64 %74, -2
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %50, label %71

95:                                               ; preds = %63
  %96 = tail call float @sqrtf(float %69) #9
  %97 = fdiv float 1.000000e+00, %96
  br label %98

98:                                               ; preds = %63, %95
  %99 = phi float [ %97, %95 ], [ 1.000000e+04, %63 ]
  br i1 %17, label %100, label %156

100:                                              ; preds = %98
  %101 = mul nsw i64 %40, %19
  br i1 %31, label %102, label %104

102:                                              ; preds = %155, %104, %100
  %103 = phi i64 [ 0, %104 ], [ 0, %100 ], [ %33, %155 ]
  br label %159

104:                                              ; preds = %100
  %105 = icmp ult i16* %42, %46
  %106 = icmp ult i16* %45, %44
  %107 = and i1 %105, %106
  %108 = icmp ult i16* %42, %23
  %109 = icmp ugt i16* %44, %1
  %110 = and i1 %108, %109
  %111 = or i1 %107, %110
  %112 = icmp ult i16* %42, %32
  %113 = bitcast i16* %44 to i32*
  %114 = icmp ugt i32* %113, %4
  %115 = and i1 %112, %114
  %116 = or i1 %111, %115
  br i1 %116, label %102, label %117

117:                                              ; preds = %104
  %118 = shufflevector <2 x float> %65, <2 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %119 = insertelement <4 x float> undef, float %99, i32 0
  %120 = shufflevector <4 x float> %119, <4 x float> undef, <4 x i32> zeroinitializer
  br label %121

121:                                              ; preds = %121, %117
  %122 = phi i64 [ 0, %117 ], [ %153, %121 ]
  %123 = add nsw i64 %122, %101
  %124 = getelementptr inbounds i16, i16* %0, i64 %123
  %125 = bitcast i16* %124 to <4 x i16>*
  %126 = load <4 x i16>, <4 x i16>* %125, align 2, !alias.scope !59
  %127 = sitofp <4 x i16> %126 to <4 x float>
  %128 = fsub <4 x float> %127, %118
  %129 = fmul <4 x float> %120, %128
  %130 = getelementptr inbounds i16, i16* %1, i64 %122
  %131 = bitcast i16* %130 to <4 x i16>*
  %132 = load <4 x i16>, <4 x i16>* %131, align 2, !alias.scope !62
  %133 = sitofp <4 x i16> %132 to <4 x float>
  %134 = fmul <4 x float> %129, %133
  %135 = fmul <4 x float> %134, %35
  %136 = getelementptr inbounds i32, i32* %4, i64 %122
  %137 = bitcast i32* %136 to <4 x i32>*
  %138 = load <4 x i32>, <4 x i32>* %137, align 4, !alias.scope !64
  %139 = sitofp <4 x i32> %138 to <4 x float>
  %140 = fmul <4 x float> %37, %139
  %141 = fadd <4 x float> %140, %135
  %142 = fpext <4 x float> %141 to <4 x double>
  %143 = fmul <4 x double> %142, <double 4.096000e+03, double 4.096000e+03, double 4.096000e+03, double 4.096000e+03>
  %144 = call <4 x double> @llvm.round.v4f64(<4 x double> %143)
  %145 = fptosi <4 x double> %144 to <4 x i32>
  %146 = icmp sgt <4 x i32> %145, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %147 = select <4 x i1> %146, <4 x i32> %145, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %148 = icmp slt <4 x i32> %147, <i32 32767, i32 32767, i32 32767, i32 32767>
  %149 = select <4 x i1> %148, <4 x i32> %147, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %150 = trunc <4 x i32> %149 to <4 x i16>
  %151 = getelementptr inbounds i16, i16* %7, i64 %123
  %152 = bitcast i16* %151 to <4 x i16>*
  store <4 x i16> %150, <4 x i16>* %152, align 2, !alias.scope !66, !noalias !68
  %153 = add i64 %122, 4
  %154 = icmp eq i64 %153, %33
  br i1 %154, label %155, label %121, !llvm.loop !69

155:                                              ; preds = %121
  br i1 %38, label %156, label %102

156:                                              ; preds = %159, %155, %98
  %157 = add nuw nsw i64 %40, 1
  %158 = icmp eq i64 %157, %20
  br i1 %158, label %49, label %39

159:                                              ; preds = %102, %159
  %160 = phi i64 [ %187, %159 ], [ %103, %102 ]
  %161 = add nsw i64 %160, %101
  %162 = getelementptr inbounds i16, i16* %0, i64 %161
  %163 = load i16, i16* %162, align 2
  %164 = sitofp i16 %163 to float
  %165 = fsub float %164, %66
  %166 = fmul float %99, %165
  %167 = getelementptr inbounds i16, i16* %1, i64 %160
  %168 = load i16, i16* %167, align 2
  %169 = sitofp i16 %168 to float
  %170 = fmul float %166, %169
  %171 = fmul float %170, %13
  %172 = getelementptr inbounds i32, i32* %4, i64 %160
  %173 = load i32, i32* %172, align 4
  %174 = sitofp i32 %173 to float
  %175 = fmul float %14, %174
  %176 = fadd float %175, %171
  %177 = fpext float %176 to double
  %178 = fmul double %177, 4.096000e+03
  %179 = tail call double @llvm.round.f64(double %178)
  %180 = fptosi double %179 to i32
  %181 = icmp sgt i32 %180, -32768
  %182 = select i1 %181, i32 %180, i32 -32768
  %183 = icmp slt i32 %182, 32767
  %184 = select i1 %183, i32 %182, i32 32767
  %185 = trunc i32 %184 to i16
  %186 = getelementptr inbounds i16, i16* %7, i64 %161
  store i16 %185, i16* %186, align 2
  %187 = add nuw nsw i64 %160, 1
  %188 = icmp eq i64 %187, %22
  br i1 %188, label %156, label %159, !llvm.loop !70
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6tflite12tensor_utils38PortableMatrixScalarMultiplyAccumulateEPKaiiiPi(i8* nocapture readonly, i32, i32, i32, i32* nocapture) local_unnamed_addr #3 {
  %6 = icmp sgt i32 %2, 0
  br i1 %6, label %7, label %90

7:                                                ; preds = %5
  %8 = icmp sgt i32 %3, 0
  %9 = add i32 %3, -1
  %10 = zext i32 %9 to i64
  %11 = add nuw nsw i64 %10, 1
  %12 = zext i32 %2 to i64
  %13 = and i64 %11, 8589934584
  %14 = add nsw i64 %13, -8
  %15 = lshr exact i64 %14, 3
  %16 = add nuw nsw i64 %15, 1
  %17 = icmp ult i64 %11, 8
  %18 = and i64 %11, 8589934584
  %19 = trunc i64 %18 to i32
  %20 = and i64 %16, 1
  %21 = icmp eq i64 %14, 0
  %22 = sub nuw nsw i64 %16, %20
  %23 = icmp eq i64 %20, 0
  %24 = icmp eq i64 %11, %18
  br label %25

25:                                               ; preds = %94, %7
  %26 = phi i64 [ 0, %7 ], [ %101, %94 ]
  %27 = phi i8* [ %0, %7 ], [ %95, %94 ]
  br i1 %8, label %28, label %94

28:                                               ; preds = %25
  br i1 %17, label %29, label %33

29:                                               ; preds = %81, %28
  %30 = phi i32 [ 0, %28 ], [ %19, %81 ]
  %31 = phi i32 [ 0, %28 ], [ %89, %81 ]
  %32 = phi i8* [ %27, %28 ], [ %34, %81 ]
  br label %103

33:                                               ; preds = %28
  %34 = getelementptr i8, i8* %27, i64 %18
  br i1 %21, label %64, label %35

35:                                               ; preds = %33, %35
  %36 = phi i64 [ %61, %35 ], [ 0, %33 ]
  %37 = phi <4 x i32> [ %59, %35 ], [ zeroinitializer, %33 ]
  %38 = phi <4 x i32> [ %60, %35 ], [ zeroinitializer, %33 ]
  %39 = phi i64 [ %62, %35 ], [ %22, %33 ]
  %40 = getelementptr i8, i8* %27, i64 %36
  %41 = bitcast i8* %40 to <4 x i8>*
  %42 = load <4 x i8>, <4 x i8>* %41, align 1
  %43 = getelementptr i8, i8* %40, i64 4
  %44 = bitcast i8* %43 to <4 x i8>*
  %45 = load <4 x i8>, <4 x i8>* %44, align 1
  %46 = sext <4 x i8> %42 to <4 x i32>
  %47 = sext <4 x i8> %45 to <4 x i32>
  %48 = add nsw <4 x i32> %37, %46
  %49 = add nsw <4 x i32> %38, %47
  %50 = or i64 %36, 8
  %51 = getelementptr i8, i8* %27, i64 %50
  %52 = bitcast i8* %51 to <4 x i8>*
  %53 = load <4 x i8>, <4 x i8>* %52, align 1
  %54 = getelementptr i8, i8* %51, i64 4
  %55 = bitcast i8* %54 to <4 x i8>*
  %56 = load <4 x i8>, <4 x i8>* %55, align 1
  %57 = sext <4 x i8> %53 to <4 x i32>
  %58 = sext <4 x i8> %56 to <4 x i32>
  %59 = add nsw <4 x i32> %48, %57
  %60 = add nsw <4 x i32> %49, %58
  %61 = add i64 %36, 16
  %62 = add i64 %39, -2
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %64, label %35, !llvm.loop !71

64:                                               ; preds = %35, %33
  %65 = phi <4 x i32> [ undef, %33 ], [ %59, %35 ]
  %66 = phi <4 x i32> [ undef, %33 ], [ %60, %35 ]
  %67 = phi i64 [ 0, %33 ], [ %61, %35 ]
  %68 = phi <4 x i32> [ zeroinitializer, %33 ], [ %59, %35 ]
  %69 = phi <4 x i32> [ zeroinitializer, %33 ], [ %60, %35 ]
  br i1 %23, label %81, label %70

70:                                               ; preds = %64
  %71 = getelementptr i8, i8* %27, i64 %67
  %72 = getelementptr i8, i8* %71, i64 4
  %73 = bitcast i8* %72 to <4 x i8>*
  %74 = load <4 x i8>, <4 x i8>* %73, align 1
  %75 = sext <4 x i8> %74 to <4 x i32>
  %76 = add nsw <4 x i32> %69, %75
  %77 = bitcast i8* %71 to <4 x i8>*
  %78 = load <4 x i8>, <4 x i8>* %77, align 1
  %79 = sext <4 x i8> %78 to <4 x i32>
  %80 = add nsw <4 x i32> %68, %79
  br label %81

81:                                               ; preds = %64, %70
  %82 = phi <4 x i32> [ %65, %64 ], [ %80, %70 ]
  %83 = phi <4 x i32> [ %66, %64 ], [ %76, %70 ]
  %84 = add <4 x i32> %83, %82
  %85 = shufflevector <4 x i32> %84, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %86 = add <4 x i32> %84, %85
  %87 = shufflevector <4 x i32> %86, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %88 = add <4 x i32> %86, %87
  %89 = extractelement <4 x i32> %88, i32 0
  br i1 %24, label %91, label %29

90:                                               ; preds = %94, %5
  ret void

91:                                               ; preds = %103, %81
  %92 = phi i32 [ %89, %81 ], [ %110, %103 ]
  %93 = getelementptr i8, i8* %27, i64 %11
  br label %94

94:                                               ; preds = %91, %25
  %95 = phi i8* [ %27, %25 ], [ %93, %91 ]
  %96 = phi i32 [ 0, %25 ], [ %92, %91 ]
  %97 = mul nsw i32 %96, %1
  %98 = getelementptr inbounds i32, i32* %4, i64 %26
  %99 = load i32, i32* %98, align 4
  %100 = add nsw i32 %99, %97
  store i32 %100, i32* %98, align 4
  %101 = add nuw nsw i64 %26, 1
  %102 = icmp eq i64 %101, %12
  br i1 %102, label %90, label %25

103:                                              ; preds = %29, %103
  %104 = phi i32 [ %111, %103 ], [ %30, %29 ]
  %105 = phi i32 [ %110, %103 ], [ %31, %29 ]
  %106 = phi i8* [ %107, %103 ], [ %32, %29 ]
  %107 = getelementptr inbounds i8, i8* %106, i64 1
  %108 = load i8, i8* %106, align 1
  %109 = sext i8 %108 to i32
  %110 = add nsw i32 %105, %109
  %111 = add nuw nsw i32 %104, 1
  %112 = icmp eq i32 %111, %3
  br i1 %112, label %91, label %103, !llvm.loop !72
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6tflite12tensor_utils20PortableApplySigmoidEPKsiiPs(i16* nocapture readonly, i32, i32, i16* nocapture) local_unnamed_addr #0 {
  %5 = icmp sgt i32 %1, 0
  br i1 %5, label %6, label %15

6:                                                ; preds = %4
  %7 = icmp sgt i32 %2, 0
  %8 = sext i32 %2 to i64
  %9 = zext i32 %1 to i64
  %10 = zext i32 %2 to i64
  br label %11

11:                                               ; preds = %16, %6
  %12 = phi i64 [ 0, %6 ], [ %17, %16 ]
  br i1 %7, label %13, label %16

13:                                               ; preds = %11
  %14 = mul nsw i64 %12, %8
  br label %19

15:                                               ; preds = %16, %4
  ret void

16:                                               ; preds = %19, %11
  %17 = add nuw nsw i64 %12, 1
  %18 = icmp eq i64 %17, %9
  br i1 %18, label %15, label %11

19:                                               ; preds = %19, %13
  %20 = phi i64 [ 0, %13 ], [ %34, %19 ]
  %21 = add nsw i64 %20, %14
  %22 = getelementptr inbounds i16, i16* %0, i64 %21
  %23 = load i16, i16* %22, align 2
  %24 = icmp slt i16 %23, 1
  %25 = icmp eq i16 %23, 0
  %26 = sub i16 0, %23
  %27 = select i1 %24, i16 %23, i16 %26
  %28 = tail call i16 @_ZN8gemmlowp22exp_on_negative_valuesIsLi3EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE(i16 %27) #9
  %29 = tail call i16 @_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IsEENS_10FixedPointIT_Li0EEES3_(i16 %28) #9
  %30 = sub i16 32767, %29
  %31 = select i1 %24, i16 %30, i16 %29
  %32 = select i1 %25, i16 16384, i16 %31
  %33 = getelementptr inbounds i16, i16* %3, i64 %21
  store i16 %32, i16* %33, align 2
  %34 = add nuw nsw i64 %20, 1
  %35 = icmp eq i64 %34, %10
  br i1 %35, label %16, label %19
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6tflite12tensor_utils25PortableApplySigmoidFloatEPKsiiPs(i16* nocapture readonly, i32, i32, i16* nocapture) local_unnamed_addr #0 {
  %5 = icmp sgt i32 %1, 0
  br i1 %5, label %6, label %15

6:                                                ; preds = %4
  %7 = icmp sgt i32 %2, 0
  %8 = sext i32 %2 to i64
  %9 = zext i32 %1 to i64
  %10 = zext i32 %2 to i64
  br label %11

11:                                               ; preds = %16, %6
  %12 = phi i64 [ 0, %6 ], [ %17, %16 ]
  br i1 %7, label %13, label %16

13:                                               ; preds = %11
  %14 = mul nsw i64 %12, %8
  br label %19

15:                                               ; preds = %16, %4
  ret void

16:                                               ; preds = %19, %11
  %17 = add nuw nsw i64 %12, 1
  %18 = icmp eq i64 %17, %9
  br i1 %18, label %15, label %11

19:                                               ; preds = %19, %13
  %20 = phi i64 [ 0, %13 ], [ %40, %19 ]
  %21 = add nsw i64 %20, %14
  %22 = getelementptr inbounds i16, i16* %0, i64 %21
  %23 = load i16, i16* %22, align 2
  %24 = sitofp i16 %23 to double
  %25 = fmul double %24, 0x3F30000000000000
  %26 = fptrunc double %25 to float
  %27 = fsub float -0.000000e+00, %26
  %28 = tail call float @expf(float %27) #9
  %29 = fadd float %28, 1.000000e+00
  %30 = fdiv float 1.000000e+00, %29
  %31 = fpext float %30 to double
  %32 = fmul double %31, 3.276800e+04
  %33 = fptosi double %32 to i32
  %34 = icmp sgt i32 %33, -32768
  %35 = select i1 %34, i32 %33, i32 -32768
  %36 = icmp slt i32 %35, 32767
  %37 = select i1 %36, i32 %35, i32 32767
  %38 = trunc i32 %37 to i16
  %39 = getelementptr inbounds i16, i16* %3, i64 %21
  store i16 %38, i16* %39, align 2
  %40 = add nuw nsw i64 %20, 1
  %41 = icmp eq i64 %40, %10
  br i1 %41, label %16, label %19
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6tflite12tensor_utils17PortableApplyTanhEiPKsiiPs(i32, i16* nocapture readonly, i32, i32, i16* nocapture) local_unnamed_addr #0 {
  switch i32 %0, label %223 [
    i32 0, label %6
    i32 1, label %37
    i32 2, label %68
    i32 3, label %99
    i32 4, label %130
    i32 5, label %161
    i32 6, label %192
  ]

6:                                                ; preds = %5
  %7 = icmp sgt i32 %2, 0
  br i1 %7, label %8, label %223

8:                                                ; preds = %6
  %9 = icmp sgt i32 %3, 0
  %10 = sext i32 %3 to i64
  %11 = zext i32 %2 to i64
  %12 = zext i32 %3 to i64
  br label %13

13:                                               ; preds = %17, %8
  %14 = phi i64 [ 0, %8 ], [ %18, %17 ]
  br i1 %9, label %15, label %17

15:                                               ; preds = %13
  %16 = mul nsw i64 %14, %10
  br label %20

17:                                               ; preds = %20, %13
  %18 = add nuw nsw i64 %14, 1
  %19 = icmp eq i64 %18, %11
  br i1 %19, label %223, label %13

20:                                               ; preds = %20, %15
  %21 = phi i64 [ 0, %15 ], [ %35, %20 ]
  %22 = add nsw i64 %21, %16
  %23 = getelementptr inbounds i16, i16* %1, i64 %22
  %24 = load i16, i16* %23, align 2
  %25 = icmp eq i16 %24, 0
  %26 = sub i16 0, %24
  %27 = icmp slt i16 %24, 0
  %28 = select i1 %27, i16 %24, i16 %26
  %29 = tail call i16 @_ZN8gemmlowp22exp_on_negative_valuesIsLi1EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE(i16 %28) #9
  %30 = tail call i16 @_ZN8gemmlowp40one_minus_x_over_one_plus_x_for_x_in_0_1IsEENS_10FixedPointIT_Li0EEES3_(i16 %29) #9
  %31 = sub i16 0, %30
  %32 = select i1 %27, i16 %31, i16 %30
  %33 = select i1 %25, i16 0, i16 %32
  %34 = getelementptr inbounds i16, i16* %4, i64 %22
  store i16 %33, i16* %34, align 2
  %35 = add nuw nsw i64 %21, 1
  %36 = icmp eq i64 %35, %12
  br i1 %36, label %17, label %20

37:                                               ; preds = %5
  %38 = icmp sgt i32 %2, 0
  br i1 %38, label %39, label %223

39:                                               ; preds = %37
  %40 = icmp sgt i32 %3, 0
  %41 = sext i32 %3 to i64
  %42 = zext i32 %2 to i64
  %43 = zext i32 %3 to i64
  br label %44

44:                                               ; preds = %48, %39
  %45 = phi i64 [ 0, %39 ], [ %49, %48 ]
  br i1 %40, label %46, label %48

46:                                               ; preds = %44
  %47 = mul nsw i64 %45, %41
  br label %51

48:                                               ; preds = %51, %44
  %49 = add nuw nsw i64 %45, 1
  %50 = icmp eq i64 %49, %42
  br i1 %50, label %223, label %44

51:                                               ; preds = %51, %46
  %52 = phi i64 [ 0, %46 ], [ %66, %51 ]
  %53 = add nsw i64 %52, %47
  %54 = getelementptr inbounds i16, i16* %1, i64 %53
  %55 = load i16, i16* %54, align 2
  %56 = icmp eq i16 %55, 0
  %57 = sub i16 0, %55
  %58 = icmp slt i16 %55, 0
  %59 = select i1 %58, i16 %55, i16 %57
  %60 = tail call i16 @_ZN8gemmlowp22exp_on_negative_valuesIsLi2EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE(i16 %59) #9
  %61 = tail call i16 @_ZN8gemmlowp40one_minus_x_over_one_plus_x_for_x_in_0_1IsEENS_10FixedPointIT_Li0EEES3_(i16 %60) #9
  %62 = sub i16 0, %61
  %63 = select i1 %58, i16 %62, i16 %61
  %64 = select i1 %56, i16 0, i16 %63
  %65 = getelementptr inbounds i16, i16* %4, i64 %53
  store i16 %64, i16* %65, align 2
  %66 = add nuw nsw i64 %52, 1
  %67 = icmp eq i64 %66, %43
  br i1 %67, label %48, label %51

68:                                               ; preds = %5
  %69 = icmp sgt i32 %2, 0
  br i1 %69, label %70, label %223

70:                                               ; preds = %68
  %71 = icmp sgt i32 %3, 0
  %72 = sext i32 %3 to i64
  %73 = zext i32 %2 to i64
  %74 = zext i32 %3 to i64
  br label %75

75:                                               ; preds = %79, %70
  %76 = phi i64 [ 0, %70 ], [ %80, %79 ]
  br i1 %71, label %77, label %79

77:                                               ; preds = %75
  %78 = mul nsw i64 %76, %72
  br label %82

79:                                               ; preds = %82, %75
  %80 = add nuw nsw i64 %76, 1
  %81 = icmp eq i64 %80, %73
  br i1 %81, label %223, label %75

82:                                               ; preds = %82, %77
  %83 = phi i64 [ 0, %77 ], [ %97, %82 ]
  %84 = add nsw i64 %83, %78
  %85 = getelementptr inbounds i16, i16* %1, i64 %84
  %86 = load i16, i16* %85, align 2
  %87 = icmp eq i16 %86, 0
  %88 = sub i16 0, %86
  %89 = icmp slt i16 %86, 0
  %90 = select i1 %89, i16 %86, i16 %88
  %91 = tail call i16 @_ZN8gemmlowp22exp_on_negative_valuesIsLi3EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE(i16 %90) #9
  %92 = tail call i16 @_ZN8gemmlowp40one_minus_x_over_one_plus_x_for_x_in_0_1IsEENS_10FixedPointIT_Li0EEES3_(i16 %91) #9
  %93 = sub i16 0, %92
  %94 = select i1 %89, i16 %93, i16 %92
  %95 = select i1 %87, i16 0, i16 %94
  %96 = getelementptr inbounds i16, i16* %4, i64 %84
  store i16 %95, i16* %96, align 2
  %97 = add nuw nsw i64 %83, 1
  %98 = icmp eq i64 %97, %74
  br i1 %98, label %79, label %82

99:                                               ; preds = %5
  %100 = icmp sgt i32 %2, 0
  br i1 %100, label %101, label %223

101:                                              ; preds = %99
  %102 = icmp sgt i32 %3, 0
  %103 = sext i32 %3 to i64
  %104 = zext i32 %2 to i64
  %105 = zext i32 %3 to i64
  br label %106

106:                                              ; preds = %110, %101
  %107 = phi i64 [ 0, %101 ], [ %111, %110 ]
  br i1 %102, label %108, label %110

108:                                              ; preds = %106
  %109 = mul nsw i64 %107, %103
  br label %113

110:                                              ; preds = %113, %106
  %111 = add nuw nsw i64 %107, 1
  %112 = icmp eq i64 %111, %104
  br i1 %112, label %223, label %106

113:                                              ; preds = %113, %108
  %114 = phi i64 [ 0, %108 ], [ %128, %113 ]
  %115 = add nsw i64 %114, %109
  %116 = getelementptr inbounds i16, i16* %1, i64 %115
  %117 = load i16, i16* %116, align 2
  %118 = icmp eq i16 %117, 0
  %119 = sub i16 0, %117
  %120 = icmp slt i16 %117, 0
  %121 = select i1 %120, i16 %117, i16 %119
  %122 = tail call i16 @_ZN8gemmlowp22exp_on_negative_valuesIsLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE(i16 %121) #9
  %123 = tail call i16 @_ZN8gemmlowp40one_minus_x_over_one_plus_x_for_x_in_0_1IsEENS_10FixedPointIT_Li0EEES3_(i16 %122) #9
  %124 = sub i16 0, %123
  %125 = select i1 %120, i16 %124, i16 %123
  %126 = select i1 %118, i16 0, i16 %125
  %127 = getelementptr inbounds i16, i16* %4, i64 %115
  store i16 %126, i16* %127, align 2
  %128 = add nuw nsw i64 %114, 1
  %129 = icmp eq i64 %128, %105
  br i1 %129, label %110, label %113

130:                                              ; preds = %5
  %131 = icmp sgt i32 %2, 0
  br i1 %131, label %132, label %223

132:                                              ; preds = %130
  %133 = icmp sgt i32 %3, 0
  %134 = sext i32 %3 to i64
  %135 = zext i32 %2 to i64
  %136 = zext i32 %3 to i64
  br label %137

137:                                              ; preds = %141, %132
  %138 = phi i64 [ 0, %132 ], [ %142, %141 ]
  br i1 %133, label %139, label %141

139:                                              ; preds = %137
  %140 = mul nsw i64 %138, %134
  br label %144

141:                                              ; preds = %144, %137
  %142 = add nuw nsw i64 %138, 1
  %143 = icmp eq i64 %142, %135
  br i1 %143, label %223, label %137

144:                                              ; preds = %144, %139
  %145 = phi i64 [ 0, %139 ], [ %159, %144 ]
  %146 = add nsw i64 %145, %140
  %147 = getelementptr inbounds i16, i16* %1, i64 %146
  %148 = load i16, i16* %147, align 2
  %149 = icmp eq i16 %148, 0
  %150 = sub i16 0, %148
  %151 = icmp slt i16 %148, 0
  %152 = select i1 %151, i16 %148, i16 %150
  %153 = tail call i16 @_ZN8gemmlowp22exp_on_negative_valuesIsLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE(i16 %152) #9
  %154 = tail call i16 @_ZN8gemmlowp40one_minus_x_over_one_plus_x_for_x_in_0_1IsEENS_10FixedPointIT_Li0EEES3_(i16 %153) #9
  %155 = sub i16 0, %154
  %156 = select i1 %151, i16 %155, i16 %154
  %157 = select i1 %149, i16 0, i16 %156
  %158 = getelementptr inbounds i16, i16* %4, i64 %146
  store i16 %157, i16* %158, align 2
  %159 = add nuw nsw i64 %145, 1
  %160 = icmp eq i64 %159, %136
  br i1 %160, label %141, label %144

161:                                              ; preds = %5
  %162 = icmp sgt i32 %2, 0
  br i1 %162, label %163, label %223

163:                                              ; preds = %161
  %164 = icmp sgt i32 %3, 0
  %165 = sext i32 %3 to i64
  %166 = zext i32 %2 to i64
  %167 = zext i32 %3 to i64
  br label %168

168:                                              ; preds = %172, %163
  %169 = phi i64 [ 0, %163 ], [ %173, %172 ]
  br i1 %164, label %170, label %172

170:                                              ; preds = %168
  %171 = mul nsw i64 %169, %165
  br label %175

172:                                              ; preds = %175, %168
  %173 = add nuw nsw i64 %169, 1
  %174 = icmp eq i64 %173, %166
  br i1 %174, label %223, label %168

175:                                              ; preds = %175, %170
  %176 = phi i64 [ 0, %170 ], [ %190, %175 ]
  %177 = add nsw i64 %176, %171
  %178 = getelementptr inbounds i16, i16* %1, i64 %177
  %179 = load i16, i16* %178, align 2
  %180 = icmp eq i16 %179, 0
  %181 = sub i16 0, %179
  %182 = icmp slt i16 %179, 0
  %183 = select i1 %182, i16 %179, i16 %181
  %184 = tail call i16 @_ZN8gemmlowp22exp_on_negative_valuesIsLi6EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE(i16 %183) #9
  %185 = tail call i16 @_ZN8gemmlowp40one_minus_x_over_one_plus_x_for_x_in_0_1IsEENS_10FixedPointIT_Li0EEES3_(i16 %184) #9
  %186 = sub i16 0, %185
  %187 = select i1 %182, i16 %186, i16 %185
  %188 = select i1 %180, i16 0, i16 %187
  %189 = getelementptr inbounds i16, i16* %4, i64 %177
  store i16 %188, i16* %189, align 2
  %190 = add nuw nsw i64 %176, 1
  %191 = icmp eq i64 %190, %167
  br i1 %191, label %172, label %175

192:                                              ; preds = %5
  %193 = icmp sgt i32 %2, 0
  br i1 %193, label %194, label %223

194:                                              ; preds = %192
  %195 = icmp sgt i32 %3, 0
  %196 = sext i32 %3 to i64
  %197 = zext i32 %2 to i64
  %198 = zext i32 %3 to i64
  br label %199

199:                                              ; preds = %203, %194
  %200 = phi i64 [ 0, %194 ], [ %204, %203 ]
  br i1 %195, label %201, label %203

201:                                              ; preds = %199
  %202 = mul nsw i64 %200, %196
  br label %206

203:                                              ; preds = %206, %199
  %204 = add nuw nsw i64 %200, 1
  %205 = icmp eq i64 %204, %197
  br i1 %205, label %223, label %199

206:                                              ; preds = %206, %201
  %207 = phi i64 [ 0, %201 ], [ %221, %206 ]
  %208 = add nsw i64 %207, %202
  %209 = getelementptr inbounds i16, i16* %1, i64 %208
  %210 = load i16, i16* %209, align 2
  %211 = icmp eq i16 %210, 0
  %212 = sub i16 0, %210
  %213 = icmp slt i16 %210, 0
  %214 = select i1 %213, i16 %210, i16 %212
  %215 = tail call i16 @_ZN8gemmlowp22exp_on_negative_valuesIsLi7EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE(i16 %214) #9
  %216 = tail call i16 @_ZN8gemmlowp40one_minus_x_over_one_plus_x_for_x_in_0_1IsEENS_10FixedPointIT_Li0EEES3_(i16 %215) #9
  %217 = sub i16 0, %216
  %218 = select i1 %213, i16 %217, i16 %216
  %219 = select i1 %211, i16 0, i16 %218
  %220 = getelementptr inbounds i16, i16* %4, i64 %208
  store i16 %219, i16* %220, align 2
  %221 = add nuw nsw i64 %207, 1
  %222 = icmp eq i64 %221, %198
  br i1 %222, label %203, label %206

223:                                              ; preds = %203, %172, %141, %110, %79, %48, %17, %192, %161, %130, %99, %68, %37, %6, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6tflite12tensor_utils22PortableApplyTanhFloatEPKsiiiPs(i16* nocapture readonly, i32, i32, i32, i16* nocapture) local_unnamed_addr #0 {
  %6 = icmp sgt i32 %1, 0
  br i1 %6, label %7, label %16

7:                                                ; preds = %5
  %8 = icmp sgt i32 %2, 0
  %9 = sext i32 %2 to i64
  %10 = zext i32 %1 to i64
  %11 = zext i32 %2 to i64
  br label %12

12:                                               ; preds = %17, %7
  %13 = phi i64 [ 0, %7 ], [ %18, %17 ]
  br i1 %8, label %14, label %17

14:                                               ; preds = %12
  %15 = mul nsw i64 %13, %9
  br label %20

16:                                               ; preds = %17, %5
  ret void

17:                                               ; preds = %20, %12
  %18 = add nuw nsw i64 %13, 1
  %19 = icmp eq i64 %18, %10
  br i1 %19, label %16, label %12

20:                                               ; preds = %20, %14
  %21 = phi i64 [ 0, %14 ], [ %39, %20 ]
  %22 = add nsw i64 %21, %15
  %23 = getelementptr inbounds i16, i16* %0, i64 %22
  %24 = load i16, i16* %23, align 2
  %25 = sitofp i16 %24 to double
  %26 = tail call double @ldexp(double 1.000000e+00, i32 %3) #9
  %27 = fmul double %26, %25
  %28 = fptrunc double %27 to float
  %29 = tail call float @tanhf(float %28) #9
  %30 = fpext float %29 to double
  %31 = fmul double %30, 3.276800e+04
  %32 = fptosi double %31 to i32
  %33 = icmp sgt i32 %32, -32768
  %34 = select i1 %33, i32 %32, i32 -32768
  %35 = icmp slt i32 %34, 32767
  %36 = select i1 %35, i32 %34, i32 32767
  %37 = trunc i32 %36 to i16
  %38 = getelementptr inbounds i16, i16* %4, i64 %22
  store i16 %37, i16* %38, align 2
  %39 = add nuw nsw i64 %21, 1
  %40 = icmp eq i64 %39, %11
  br i1 %40, label %17, label %20
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6tflite12tensor_utils16PortableCwiseMulEPKsS2_iiiPs(i16* nocapture readonly, i16* nocapture readonly, i32, i32, i32, i16* nocapture) local_unnamed_addr #3 {
  %7 = icmp sgt i32 %2, 0
  br i1 %7, label %8, label %74

8:                                                ; preds = %6
  %9 = icmp sgt i32 %3, 0
  %10 = zext i32 %4 to i64
  %11 = shl nsw i64 -1, %10
  %12 = trunc i64 %11 to i32
  %13 = xor i32 %12, -1
  %14 = ashr i32 %13, 1
  %15 = sext i32 %3 to i64
  %16 = zext i32 %2 to i64
  %17 = zext i32 %3 to i64
  %18 = icmp ult i32 %3, 8
  %19 = and i64 %17, 4294967288
  %20 = insertelement <8 x i32> undef, i32 %13, i32 0
  %21 = shufflevector <8 x i32> %20, <8 x i32> undef, <8 x i32> zeroinitializer
  %22 = insertelement <8 x i32> undef, i32 %14, i32 0
  %23 = shufflevector <8 x i32> %22, <8 x i32> undef, <8 x i32> zeroinitializer
  %24 = insertelement <8 x i32> undef, i32 %4, i32 0
  %25 = shufflevector <8 x i32> %24, <8 x i32> undef, <8 x i32> zeroinitializer
  %26 = icmp eq i64 %19, %17
  br label %27

27:                                               ; preds = %75, %8
  %28 = phi i64 [ 0, %8 ], [ %76, %75 ]
  %29 = mul i64 %28, %15
  %30 = getelementptr i16, i16* %5, i64 %29
  %31 = add i64 %29, %17
  %32 = getelementptr i16, i16* %5, i64 %31
  %33 = getelementptr i16, i16* %0, i64 %29
  %34 = getelementptr i16, i16* %0, i64 %31
  %35 = getelementptr i16, i16* %1, i64 %29
  %36 = getelementptr i16, i16* %1, i64 %31
  br i1 %9, label %37, label %75

37:                                               ; preds = %27
  %38 = mul nsw i64 %28, %15
  br i1 %18, label %39, label %41

39:                                               ; preds = %73, %41, %37
  %40 = phi i64 [ 0, %41 ], [ 0, %37 ], [ %19, %73 ]
  br label %78

41:                                               ; preds = %37
  %42 = icmp ult i16* %30, %34
  %43 = icmp ult i16* %33, %32
  %44 = and i1 %42, %43
  %45 = icmp ult i16* %30, %36
  %46 = icmp ult i16* %35, %32
  %47 = and i1 %45, %46
  %48 = or i1 %44, %47
  br i1 %48, label %39, label %49

49:                                               ; preds = %41, %49
  %50 = phi i64 [ %71, %49 ], [ 0, %41 ]
  %51 = add nsw i64 %50, %38
  %52 = getelementptr inbounds i16, i16* %0, i64 %51
  %53 = bitcast i16* %52 to <8 x i16>*
  %54 = load <8 x i16>, <8 x i16>* %53, align 2, !alias.scope !73
  %55 = getelementptr inbounds i16, i16* %1, i64 %51
  %56 = bitcast i16* %55 to <8 x i16>*
  %57 = load <8 x i16>, <8 x i16>* %56, align 2, !alias.scope !76
  %58 = sext <8 x i16> %54 to <8 x i32>
  %59 = sext <8 x i16> %57 to <8 x i32>
  %60 = mul nsw <8 x i32> %59, %58
  %61 = and <8 x i32> %60, %21
  %62 = lshr <8 x i32> %60, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %63 = add nsw <8 x i32> %62, %23
  %64 = ashr <8 x i32> %60, %25
  %65 = icmp sgt <8 x i32> %61, %63
  %66 = zext <8 x i1> %65 to <8 x i32>
  %67 = add nsw <8 x i32> %64, %66
  %68 = trunc <8 x i32> %67 to <8 x i16>
  %69 = getelementptr inbounds i16, i16* %5, i64 %51
  %70 = bitcast i16* %69 to <8 x i16>*
  store <8 x i16> %68, <8 x i16>* %70, align 2, !alias.scope !78, !noalias !80
  %71 = add i64 %50, 8
  %72 = icmp eq i64 %71, %19
  br i1 %72, label %73, label %49, !llvm.loop !81

73:                                               ; preds = %49
  br i1 %26, label %75, label %39

74:                                               ; preds = %75, %6
  ret void

75:                                               ; preds = %78, %73, %27
  %76 = add nuw nsw i64 %28, 1
  %77 = icmp eq i64 %76, %16
  br i1 %77, label %74, label %27

78:                                               ; preds = %39, %78
  %79 = phi i64 [ %97, %78 ], [ %40, %39 ]
  %80 = add nsw i64 %79, %38
  %81 = getelementptr inbounds i16, i16* %0, i64 %80
  %82 = load i16, i16* %81, align 2
  %83 = getelementptr inbounds i16, i16* %1, i64 %80
  %84 = load i16, i16* %83, align 2
  %85 = sext i16 %82 to i32
  %86 = sext i16 %84 to i32
  %87 = mul nsw i32 %86, %85
  %88 = and i32 %87, %13
  %89 = lshr i32 %87, 31
  %90 = add nsw i32 %89, %14
  %91 = ashr i32 %87, %4
  %92 = icmp sgt i32 %88, %90
  %93 = zext i1 %92 to i32
  %94 = add nsw i32 %91, %93
  %95 = trunc i32 %94 to i16
  %96 = getelementptr inbounds i16, i16* %5, i64 %80
  store i16 %95, i16* %96, align 2
  %97 = add nuw nsw i64 %79, 1
  %98 = icmp eq i64 %97, %17
  br i1 %98, label %75, label %78, !llvm.loop !82
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6tflite12tensor_utils16PortableCwiseMulEPKsS2_iiiiiPa(i16* nocapture readonly, i16* nocapture readonly, i32, i32, i32, i32, i32, i8* nocapture) local_unnamed_addr #0 {
  %9 = icmp sgt i32 %4, 0
  br i1 %9, label %10, label %31

10:                                               ; preds = %8
  %11 = icmp sgt i32 %5, 0
  %12 = icmp sgt i32 %3, 0
  %13 = sub nsw i32 0, %3
  %14 = select i1 %12, i32 0, i32 %13
  %15 = shl i32 1, %3
  %16 = select i1 %12, i32 %15, i32 1
  %17 = sext i32 %2 to i64
  %18 = icmp eq i32 %2, -2147483648
  %19 = zext i32 %14 to i64
  %20 = shl nsw i64 -1, %19
  %21 = trunc i64 %20 to i32
  %22 = xor i32 %21, -1
  %23 = ashr i32 %22, 1
  %24 = sext i32 %5 to i64
  %25 = zext i32 %4 to i64
  %26 = zext i32 %5 to i64
  br label %27

27:                                               ; preds = %32, %10
  %28 = phi i64 [ 0, %10 ], [ %33, %32 ]
  br i1 %11, label %29, label %32

29:                                               ; preds = %27
  %30 = mul nsw i64 %28, %24
  br label %35

31:                                               ; preds = %32, %8
  ret void

32:                                               ; preds = %58, %27
  %33 = add nuw nsw i64 %28, 1
  %34 = icmp eq i64 %33, %25
  br i1 %34, label %31, label %27

35:                                               ; preds = %58, %29
  %36 = phi i64 [ 0, %29 ], [ %74, %58 ]
  %37 = add nsw i64 %36, %30
  %38 = getelementptr inbounds i16, i16* %0, i64 %37
  %39 = load i16, i16* %38, align 2
  %40 = getelementptr inbounds i16, i16* %1, i64 %37
  %41 = load i16, i16* %40, align 2
  %42 = sext i16 %39 to i32
  %43 = sext i16 %41 to i32
  %44 = mul i32 %16, %42
  %45 = mul i32 %44, %43
  %46 = icmp eq i32 %45, %2
  br i1 %46, label %49, label %47

47:                                               ; preds = %35
  %48 = sext i32 %45 to i64
  br label %50

49:                                               ; preds = %35
  br i1 %18, label %58, label %50

50:                                               ; preds = %49, %47
  %51 = phi i64 [ %48, %47 ], [ %17, %49 ]
  %52 = mul nsw i64 %51, %17
  %53 = icmp sgt i64 %52, -1
  %54 = select i1 %53, i64 1073741824, i64 -1073741823
  %55 = add nsw i64 %54, %52
  %56 = sdiv i64 %55, 2147483648
  %57 = trunc i64 %56 to i32
  br label %58

58:                                               ; preds = %49, %50
  %59 = phi i32 [ %57, %50 ], [ 2147483647, %49 ]
  %60 = and i32 %59, %22
  %61 = lshr i32 %59, 31
  %62 = add nsw i32 %61, %23
  %63 = ashr i32 %59, %14
  %64 = icmp sgt i32 %60, %62
  %65 = zext i1 %64 to i32
  %66 = sub i32 %63, %6
  %67 = add i32 %66, %65
  %68 = icmp sgt i32 %67, -128
  %69 = select i1 %68, i32 %67, i32 -128
  %70 = icmp slt i32 %69, 127
  %71 = select i1 %70, i32 %69, i32 127
  %72 = trunc i32 %71 to i8
  %73 = getelementptr inbounds i8, i8* %7, i64 %37
  store i8 %72, i8* %73, align 1
  %74 = add nuw nsw i64 %36, 1
  %75 = icmp eq i64 %74, %26
  br i1 %75, label %32, label %35
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6tflite12tensor_utils16PortableCwiseAddEPKsS2_iiPs(i16* nocapture readonly, i16* nocapture readonly, i32, i32, i16* nocapture) local_unnamed_addr #0 {
  %6 = icmp sgt i32 %2, 0
  br i1 %6, label %7, label %131

7:                                                ; preds = %5
  %8 = icmp sgt i32 %3, 0
  %9 = sext i32 %3 to i64
  %10 = zext i32 %2 to i64
  %11 = zext i32 %3 to i64
  %12 = and i64 %11, 4294967288
  %13 = add nsw i64 %12, -8
  %14 = lshr exact i64 %13, 3
  %15 = add nuw nsw i64 %14, 1
  %16 = icmp ult i32 %3, 8
  %17 = and i64 %11, 4294967288
  %18 = and i64 %15, 1
  %19 = icmp eq i64 %13, 0
  %20 = sub nuw nsw i64 %15, %18
  %21 = icmp eq i64 %18, 0
  %22 = icmp eq i64 %17, %11
  %23 = and i64 %11, 1
  %24 = icmp eq i64 %23, 0
  %25 = sub nsw i64 0, %11
  br label %26

26:                                               ; preds = %132, %7
  %27 = phi i64 [ 0, %7 ], [ %133, %132 ]
  %28 = mul i64 %27, %9
  %29 = getelementptr i16, i16* %4, i64 %28
  %30 = add i64 %28, %11
  %31 = getelementptr i16, i16* %4, i64 %30
  %32 = getelementptr i16, i16* %0, i64 %28
  %33 = getelementptr i16, i16* %0, i64 %30
  %34 = getelementptr i16, i16* %1, i64 %28
  %35 = getelementptr i16, i16* %1, i64 %30
  br i1 %8, label %36, label %132

36:                                               ; preds = %26
  %37 = mul nsw i64 %27, %9
  br i1 %16, label %38, label %60

38:                                               ; preds = %130, %60, %36
  %39 = phi i64 [ 0, %60 ], [ 0, %36 ], [ %17, %130 ]
  %40 = xor i64 %39, -1
  br i1 %24, label %57, label %41

41:                                               ; preds = %38
  %42 = add nsw i64 %39, %37
  %43 = getelementptr inbounds i16, i16* %0, i64 %42
  %44 = load i16, i16* %43, align 2
  %45 = sext i16 %44 to i32
  %46 = getelementptr inbounds i16, i16* %1, i64 %42
  %47 = load i16, i16* %46, align 2
  %48 = sext i16 %47 to i32
  %49 = add nsw i32 %48, %45
  %50 = icmp sgt i32 %49, -32768
  %51 = select i1 %50, i32 %49, i32 -32768
  %52 = icmp slt i32 %51, 32767
  %53 = select i1 %52, i32 %51, i32 32767
  %54 = trunc i32 %53 to i16
  %55 = getelementptr inbounds i16, i16* %4, i64 %42
  store i16 %54, i16* %55, align 2
  %56 = or i64 %39, 1
  br label %57

57:                                               ; preds = %41, %38
  %58 = phi i64 [ %56, %41 ], [ %39, %38 ]
  %59 = icmp eq i64 %40, %25
  br i1 %59, label %132, label %135

60:                                               ; preds = %36
  %61 = icmp ult i16* %29, %33
  %62 = icmp ult i16* %32, %31
  %63 = and i1 %61, %62
  %64 = icmp ult i16* %29, %35
  %65 = icmp ult i16* %34, %31
  %66 = and i1 %64, %65
  %67 = or i1 %63, %66
  br i1 %67, label %38, label %68

68:                                               ; preds = %60
  br i1 %19, label %110, label %69

69:                                               ; preds = %68, %69
  %70 = phi i64 [ %107, %69 ], [ 0, %68 ]
  %71 = phi i64 [ %108, %69 ], [ %20, %68 ]
  %72 = add nsw i64 %70, %37
  %73 = getelementptr inbounds i16, i16* %0, i64 %72
  %74 = bitcast i16* %73 to <8 x i16>*
  %75 = load <8 x i16>, <8 x i16>* %74, align 2, !alias.scope !83
  %76 = sext <8 x i16> %75 to <8 x i32>
  %77 = getelementptr inbounds i16, i16* %1, i64 %72
  %78 = bitcast i16* %77 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 2, !alias.scope !86
  %80 = sext <8 x i16> %79 to <8 x i32>
  %81 = add nsw <8 x i32> %80, %76
  %82 = icmp sgt <8 x i32> %81, <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %83 = select <8 x i1> %82, <8 x i32> %81, <8 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %84 = icmp slt <8 x i32> %83, <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %85 = select <8 x i1> %84, <8 x i32> %83, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %86 = trunc <8 x i32> %85 to <8 x i16>
  %87 = getelementptr inbounds i16, i16* %4, i64 %72
  %88 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %88, align 2, !alias.scope !88, !noalias !90
  %89 = or i64 %70, 8
  %90 = add nsw i64 %89, %37
  %91 = getelementptr inbounds i16, i16* %0, i64 %90
  %92 = bitcast i16* %91 to <8 x i16>*
  %93 = load <8 x i16>, <8 x i16>* %92, align 2, !alias.scope !83
  %94 = sext <8 x i16> %93 to <8 x i32>
  %95 = getelementptr inbounds i16, i16* %1, i64 %90
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !86
  %98 = sext <8 x i16> %97 to <8 x i32>
  %99 = add nsw <8 x i32> %98, %94
  %100 = icmp sgt <8 x i32> %99, <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %101 = select <8 x i1> %100, <8 x i32> %99, <8 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %102 = icmp slt <8 x i32> %101, <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %103 = select <8 x i1> %102, <8 x i32> %101, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %104 = trunc <8 x i32> %103 to <8 x i16>
  %105 = getelementptr inbounds i16, i16* %4, i64 %90
  %106 = bitcast i16* %105 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %106, align 2, !alias.scope !88, !noalias !90
  %107 = add i64 %70, 16
  %108 = add i64 %71, -2
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %110, label %69, !llvm.loop !91

110:                                              ; preds = %69, %68
  %111 = phi i64 [ 0, %68 ], [ %107, %69 ]
  br i1 %21, label %130, label %112

112:                                              ; preds = %110
  %113 = add nsw i64 %111, %37
  %114 = getelementptr inbounds i16, i16* %0, i64 %113
  %115 = bitcast i16* %114 to <8 x i16>*
  %116 = load <8 x i16>, <8 x i16>* %115, align 2, !alias.scope !83
  %117 = sext <8 x i16> %116 to <8 x i32>
  %118 = getelementptr inbounds i16, i16* %1, i64 %113
  %119 = bitcast i16* %118 to <8 x i16>*
  %120 = load <8 x i16>, <8 x i16>* %119, align 2, !alias.scope !86
  %121 = sext <8 x i16> %120 to <8 x i32>
  %122 = add nsw <8 x i32> %121, %117
  %123 = icmp sgt <8 x i32> %122, <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %124 = select <8 x i1> %123, <8 x i32> %122, <8 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %125 = icmp slt <8 x i32> %124, <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %126 = select <8 x i1> %125, <8 x i32> %124, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %127 = trunc <8 x i32> %126 to <8 x i16>
  %128 = getelementptr inbounds i16, i16* %4, i64 %113
  %129 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %129, align 2, !alias.scope !88, !noalias !90
  br label %130

130:                                              ; preds = %110, %112
  br i1 %22, label %132, label %38

131:                                              ; preds = %132, %5
  ret void

132:                                              ; preds = %57, %135, %130, %26
  %133 = add nuw nsw i64 %27, 1
  %134 = icmp eq i64 %133, %10
  br i1 %134, label %131, label %26

135:                                              ; preds = %57, %135
  %136 = phi i64 [ %166, %135 ], [ %58, %57 ]
  %137 = add nsw i64 %136, %37
  %138 = getelementptr inbounds i16, i16* %0, i64 %137
  %139 = load i16, i16* %138, align 2
  %140 = sext i16 %139 to i32
  %141 = getelementptr inbounds i16, i16* %1, i64 %137
  %142 = load i16, i16* %141, align 2
  %143 = sext i16 %142 to i32
  %144 = add nsw i32 %143, %140
  %145 = icmp sgt i32 %144, -32768
  %146 = select i1 %145, i32 %144, i32 -32768
  %147 = icmp slt i32 %146, 32767
  %148 = select i1 %147, i32 %146, i32 32767
  %149 = trunc i32 %148 to i16
  %150 = getelementptr inbounds i16, i16* %4, i64 %137
  store i16 %149, i16* %150, align 2
  %151 = add nuw nsw i64 %136, 1
  %152 = add nsw i64 %151, %37
  %153 = getelementptr inbounds i16, i16* %0, i64 %152
  %154 = load i16, i16* %153, align 2
  %155 = sext i16 %154 to i32
  %156 = getelementptr inbounds i16, i16* %1, i64 %152
  %157 = load i16, i16* %156, align 2
  %158 = sext i16 %157 to i32
  %159 = add nsw i32 %158, %155
  %160 = icmp sgt i32 %159, -32768
  %161 = select i1 %160, i32 %159, i32 -32768
  %162 = icmp slt i32 %161, 32767
  %163 = select i1 %162, i32 %161, i32 32767
  %164 = trunc i32 %163 to i16
  %165 = getelementptr inbounds i16, i16* %4, i64 %152
  store i16 %164, i16* %165, align 2
  %166 = add nuw nsw i64 %136, 2
  %167 = icmp eq i64 %166, %11
  br i1 %167, label %132, label %135, !llvm.loop !92
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6tflite12tensor_utils21PortableCwiseClippingEPssii(i16* nocapture, i16 signext, i32, i32) local_unnamed_addr #3 {
  %5 = icmp sgt i32 %2, 0
  br i1 %5, label %6, label %18

6:                                                ; preds = %4
  %7 = icmp sgt i32 %3, 0
  %8 = sext i16 %1 to i32
  %9 = sub nsw i32 0, %8
  %10 = trunc i32 %9 to i16
  %11 = sext i32 %3 to i64
  %12 = zext i32 %2 to i64
  %13 = zext i32 %3 to i64
  br label %14

14:                                               ; preds = %19, %6
  %15 = phi i64 [ 0, %6 ], [ %20, %19 ]
  br i1 %7, label %16, label %19

16:                                               ; preds = %14
  %17 = mul nsw i64 %15, %11
  br label %22

18:                                               ; preds = %19, %4
  ret void

19:                                               ; preds = %35, %14
  %20 = add nuw nsw i64 %15, 1
  %21 = icmp eq i64 %20, %12
  br i1 %21, label %18, label %14

22:                                               ; preds = %35, %16
  %23 = phi i64 [ 0, %16 ], [ %36, %35 ]
  %24 = add nsw i64 %23, %17
  %25 = getelementptr inbounds i16, i16* %0, i64 %24
  %26 = load i16, i16* %25, align 2
  %27 = icmp sgt i16 %26, %1
  br i1 %27, label %30, label %28

28:                                               ; preds = %22
  %29 = sext i16 %26 to i32
  br label %31

30:                                               ; preds = %22
  store i16 %1, i16* %25, align 2
  br label %31

31:                                               ; preds = %28, %30
  %32 = phi i32 [ %29, %28 ], [ %8, %30 ]
  %33 = icmp slt i32 %32, %9
  br i1 %33, label %34, label %35

34:                                               ; preds = %31
  store i16 %10, i16* %25, align 2
  br label %35

35:                                               ; preds = %34, %31
  %36 = add nuw nsw i64 %23, 1
  %37 = icmp eq i64 %36, %13
  br i1 %37, label %19, label %22
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6tflite12tensor_utils21PortableCwiseClippingEPaaii(i8* nocapture, i8 signext, i32, i32) local_unnamed_addr #3 {
  %5 = icmp sgt i32 %2, 0
  br i1 %5, label %6, label %18

6:                                                ; preds = %4
  %7 = icmp sgt i32 %3, 0
  %8 = sext i8 %1 to i32
  %9 = sub nsw i32 0, %8
  %10 = trunc i32 %9 to i8
  %11 = sext i32 %3 to i64
  %12 = zext i32 %2 to i64
  %13 = zext i32 %3 to i64
  br label %14

14:                                               ; preds = %19, %6
  %15 = phi i64 [ 0, %6 ], [ %20, %19 ]
  br i1 %7, label %16, label %19

16:                                               ; preds = %14
  %17 = mul nsw i64 %15, %11
  br label %22

18:                                               ; preds = %19, %4
  ret void

19:                                               ; preds = %35, %14
  %20 = add nuw nsw i64 %15, 1
  %21 = icmp eq i64 %20, %12
  br i1 %21, label %18, label %14

22:                                               ; preds = %35, %16
  %23 = phi i64 [ 0, %16 ], [ %36, %35 ]
  %24 = add nsw i64 %23, %17
  %25 = getelementptr inbounds i8, i8* %0, i64 %24
  %26 = load i8, i8* %25, align 1
  %27 = icmp sgt i8 %26, %1
  br i1 %27, label %30, label %28

28:                                               ; preds = %22
  %29 = sext i8 %26 to i32
  br label %31

30:                                               ; preds = %22
  store i8 %1, i8* %25, align 1
  br label %31

31:                                               ; preds = %28, %30
  %32 = phi i32 [ %29, %28 ], [ %8, %30 ]
  %33 = icmp slt i32 %32, %9
  br i1 %33, label %34, label %35

34:                                               ; preds = %31
  store i8 %10, i8* %25, align 1
  br label %35

35:                                               ; preds = %34, %31
  %36 = add nuw nsw i64 %23, 1
  %37 = icmp eq i64 %36, %13
  br i1 %37, label %19, label %22
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden float @_ZN6tflite12tensor_utils30PortableVectorVectorDotProductEPKfS2_i(float* nocapture readonly, float* nocapture readonly, i32) local_unnamed_addr #6 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %30

5:                                                ; preds = %3
  %6 = add i32 %2, -1
  %7 = and i32 %2, 3
  %8 = icmp ult i32 %6, 3
  br i1 %8, label %11, label %9

9:                                                ; preds = %5
  %10 = sub i32 %2, %7
  br label %32

11:                                               ; preds = %32, %5
  %12 = phi float [ undef, %5 ], [ %60, %32 ]
  %13 = phi float [ 0.000000e+00, %5 ], [ %60, %32 ]
  %14 = phi float* [ %0, %5 ], [ %55, %32 ]
  %15 = phi float* [ %1, %5 ], [ %57, %32 ]
  %16 = icmp eq i32 %7, 0
  br i1 %16, label %30, label %17

17:                                               ; preds = %11, %17
  %18 = phi float [ %27, %17 ], [ %13, %11 ]
  %19 = phi float* [ %22, %17 ], [ %14, %11 ]
  %20 = phi float* [ %24, %17 ], [ %15, %11 ]
  %21 = phi i32 [ %28, %17 ], [ %7, %11 ]
  %22 = getelementptr inbounds float, float* %19, i64 1
  %23 = load float, float* %19, align 4
  %24 = getelementptr inbounds float, float* %20, i64 1
  %25 = load float, float* %20, align 4
  %26 = fmul float %23, %25
  %27 = fadd float %18, %26
  %28 = add i32 %21, -1
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %17, !llvm.loop !93

30:                                               ; preds = %11, %17, %3
  %31 = phi float [ 0.000000e+00, %3 ], [ %12, %11 ], [ %27, %17 ]
  ret float %31

32:                                               ; preds = %32, %9
  %33 = phi float [ 0.000000e+00, %9 ], [ %60, %32 ]
  %34 = phi float* [ %0, %9 ], [ %55, %32 ]
  %35 = phi float* [ %1, %9 ], [ %57, %32 ]
  %36 = phi i32 [ %10, %9 ], [ %61, %32 ]
  %37 = getelementptr inbounds float, float* %34, i64 1
  %38 = load float, float* %34, align 4
  %39 = getelementptr inbounds float, float* %35, i64 1
  %40 = load float, float* %35, align 4
  %41 = fmul float %38, %40
  %42 = fadd float %33, %41
  %43 = getelementptr inbounds float, float* %34, i64 2
  %44 = load float, float* %37, align 4
  %45 = getelementptr inbounds float, float* %35, i64 2
  %46 = load float, float* %39, align 4
  %47 = fmul float %44, %46
  %48 = fadd float %42, %47
  %49 = getelementptr inbounds float, float* %34, i64 3
  %50 = load float, float* %43, align 4
  %51 = getelementptr inbounds float, float* %35, i64 3
  %52 = load float, float* %45, align 4
  %53 = fmul float %50, %52
  %54 = fadd float %48, %53
  %55 = getelementptr inbounds float, float* %34, i64 4
  %56 = load float, float* %49, align 4
  %57 = getelementptr inbounds float, float* %35, i64 4
  %58 = load float, float* %51, align 4
  %59 = fmul float %56, %58
  %60 = fadd float %54, %59
  %61 = add i32 %36, -4
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %11, label %32
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6tflite12tensor_utils40PortableBatchVectorBatchVectorDotProductEPKsS2_iiPi(i16* nocapture readonly, i16* nocapture readonly, i32, i32, i32* nocapture) local_unnamed_addr #3 {
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %26

7:                                                ; preds = %5
  %8 = icmp sgt i32 %2, 0
  %9 = sext i32 %2 to i64
  %10 = zext i32 %3 to i64
  %11 = add i32 %2, -1
  %12 = zext i32 %11 to i64
  %13 = add nuw nsw i64 %12, 1
  %14 = and i64 %13, 8589934584
  %15 = add nsw i64 %14, -8
  %16 = lshr exact i64 %15, 3
  %17 = add nuw nsw i64 %16, 1
  %18 = icmp ult i64 %13, 8
  %19 = and i64 %13, 8589934584
  %20 = trunc i64 %19 to i32
  %21 = and i64 %17, 1
  %22 = icmp eq i64 %15, 0
  %23 = sub nuw nsw i64 %17, %21
  %24 = icmp eq i64 %21, 0
  %25 = icmp eq i64 %13, %19
  br label %27

26:                                               ; preds = %140, %5
  ret void

27:                                               ; preds = %140, %7
  %28 = phi i64 [ 0, %7 ], [ %145, %140 ]
  %29 = phi i16* [ %0, %7 ], [ %143, %140 ]
  %30 = phi i16* [ %1, %7 ], [ %144, %140 ]
  br i1 %8, label %31, label %140

31:                                               ; preds = %27
  br i1 %18, label %120, label %32

32:                                               ; preds = %31
  %33 = getelementptr i16, i16* %29, i64 %19
  %34 = getelementptr i16, i16* %30, i64 %19
  br i1 %22, label %84, label %35

35:                                               ; preds = %32, %35
  %36 = phi i64 [ %81, %35 ], [ 0, %32 ]
  %37 = phi <4 x i32> [ %79, %35 ], [ zeroinitializer, %32 ]
  %38 = phi <4 x i32> [ %80, %35 ], [ zeroinitializer, %32 ]
  %39 = phi i64 [ %82, %35 ], [ %23, %32 ]
  %40 = getelementptr i16, i16* %29, i64 %36
  %41 = getelementptr i16, i16* %30, i64 %36
  %42 = bitcast i16* %40 to <4 x i16>*
  %43 = load <4 x i16>, <4 x i16>* %42, align 2
  %44 = getelementptr i16, i16* %40, i64 4
  %45 = bitcast i16* %44 to <4 x i16>*
  %46 = load <4 x i16>, <4 x i16>* %45, align 2
  %47 = sext <4 x i16> %43 to <4 x i32>
  %48 = sext <4 x i16> %46 to <4 x i32>
  %49 = bitcast i16* %41 to <4 x i16>*
  %50 = load <4 x i16>, <4 x i16>* %49, align 2
  %51 = getelementptr i16, i16* %41, i64 4
  %52 = bitcast i16* %51 to <4 x i16>*
  %53 = load <4 x i16>, <4 x i16>* %52, align 2
  %54 = sext <4 x i16> %50 to <4 x i32>
  %55 = sext <4 x i16> %53 to <4 x i32>
  %56 = mul nsw <4 x i32> %54, %47
  %57 = mul nsw <4 x i32> %55, %48
  %58 = add nsw <4 x i32> %56, %37
  %59 = add nsw <4 x i32> %57, %38
  %60 = or i64 %36, 8
  %61 = getelementptr i16, i16* %29, i64 %60
  %62 = getelementptr i16, i16* %30, i64 %60
  %63 = bitcast i16* %61 to <4 x i16>*
  %64 = load <4 x i16>, <4 x i16>* %63, align 2
  %65 = getelementptr i16, i16* %61, i64 4
  %66 = bitcast i16* %65 to <4 x i16>*
  %67 = load <4 x i16>, <4 x i16>* %66, align 2
  %68 = sext <4 x i16> %64 to <4 x i32>
  %69 = sext <4 x i16> %67 to <4 x i32>
  %70 = bitcast i16* %62 to <4 x i16>*
  %71 = load <4 x i16>, <4 x i16>* %70, align 2
  %72 = getelementptr i16, i16* %62, i64 4
  %73 = bitcast i16* %72 to <4 x i16>*
  %74 = load <4 x i16>, <4 x i16>* %73, align 2
  %75 = sext <4 x i16> %71 to <4 x i32>
  %76 = sext <4 x i16> %74 to <4 x i32>
  %77 = mul nsw <4 x i32> %75, %68
  %78 = mul nsw <4 x i32> %76, %69
  %79 = add nsw <4 x i32> %77, %58
  %80 = add nsw <4 x i32> %78, %59
  %81 = add i64 %36, 16
  %82 = add i64 %39, -2
  %83 = icmp eq i64 %82, 0
  br i1 %83, label %84, label %35, !llvm.loop !94

84:                                               ; preds = %35, %32
  %85 = phi <4 x i32> [ undef, %32 ], [ %79, %35 ]
  %86 = phi <4 x i32> [ undef, %32 ], [ %80, %35 ]
  %87 = phi i64 [ 0, %32 ], [ %81, %35 ]
  %88 = phi <4 x i32> [ zeroinitializer, %32 ], [ %79, %35 ]
  %89 = phi <4 x i32> [ zeroinitializer, %32 ], [ %80, %35 ]
  br i1 %24, label %111, label %90

90:                                               ; preds = %84
  %91 = getelementptr i16, i16* %29, i64 %87
  %92 = getelementptr i16, i16* %30, i64 %87
  %93 = getelementptr i16, i16* %92, i64 4
  %94 = bitcast i16* %93 to <4 x i16>*
  %95 = load <4 x i16>, <4 x i16>* %94, align 2
  %96 = sext <4 x i16> %95 to <4 x i32>
  %97 = getelementptr i16, i16* %91, i64 4
  %98 = bitcast i16* %97 to <4 x i16>*
  %99 = load <4 x i16>, <4 x i16>* %98, align 2
  %100 = sext <4 x i16> %99 to <4 x i32>
  %101 = mul nsw <4 x i32> %96, %100
  %102 = add nsw <4 x i32> %101, %89
  %103 = bitcast i16* %92 to <4 x i16>*
  %104 = load <4 x i16>, <4 x i16>* %103, align 2
  %105 = sext <4 x i16> %104 to <4 x i32>
  %106 = bitcast i16* %91 to <4 x i16>*
  %107 = load <4 x i16>, <4 x i16>* %106, align 2
  %108 = sext <4 x i16> %107 to <4 x i32>
  %109 = mul nsw <4 x i32> %105, %108
  %110 = add nsw <4 x i32> %109, %88
  br label %111

111:                                              ; preds = %84, %90
  %112 = phi <4 x i32> [ %85, %84 ], [ %110, %90 ]
  %113 = phi <4 x i32> [ %86, %84 ], [ %102, %90 ]
  %114 = add <4 x i32> %113, %112
  %115 = shufflevector <4 x i32> %114, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %116 = add <4 x i32> %114, %115
  %117 = shufflevector <4 x i32> %116, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %118 = add <4 x i32> %116, %117
  %119 = extractelement <4 x i32> %118, i32 0
  br i1 %25, label %140, label %120

120:                                              ; preds = %111, %31
  %121 = phi i32 [ 0, %31 ], [ %20, %111 ]
  %122 = phi i32 [ 0, %31 ], [ %119, %111 ]
  %123 = phi i16* [ %29, %31 ], [ %33, %111 ]
  %124 = phi i16* [ %30, %31 ], [ %34, %111 ]
  br label %125

125:                                              ; preds = %120, %125
  %126 = phi i32 [ %138, %125 ], [ %121, %120 ]
  %127 = phi i32 [ %137, %125 ], [ %122, %120 ]
  %128 = phi i16* [ %130, %125 ], [ %123, %120 ]
  %129 = phi i16* [ %133, %125 ], [ %124, %120 ]
  %130 = getelementptr inbounds i16, i16* %128, i64 1
  %131 = load i16, i16* %128, align 2
  %132 = sext i16 %131 to i32
  %133 = getelementptr inbounds i16, i16* %129, i64 1
  %134 = load i16, i16* %129, align 2
  %135 = sext i16 %134 to i32
  %136 = mul nsw i32 %135, %132
  %137 = add nsw i32 %136, %127
  %138 = add nuw nsw i32 %126, 1
  %139 = icmp eq i32 %138, %2
  br i1 %139, label %140, label %125, !llvm.loop !95

140:                                              ; preds = %125, %111, %27
  %141 = phi i32 [ 0, %27 ], [ %119, %111 ], [ %137, %125 ]
  %142 = getelementptr inbounds i32, i32* %4, i64 %28
  store i32 %141, i32* %142, align 4
  %143 = getelementptr inbounds i16, i16* %29, i64 %9
  %144 = getelementptr inbounds i16, i16* %30, i64 %9
  %145 = add nuw nsw i64 %28, 1
  %146 = icmp eq i64 %145, %10
  br i1 %146, label %26, label %27
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6tflite12tensor_utils47PortableVectorBatchVectorCwiseProductAccumulateEPKsiS2_iiiPs(i16* nocapture readonly, i32, i16* nocapture readonly, i32, i32, i32, i16* nocapture) local_unnamed_addr #0 {
  %8 = icmp sgt i32 %3, 0
  br i1 %8, label %9, label %28

9:                                                ; preds = %7
  %10 = icmp sgt i32 %1, 0
  %11 = icmp sgt i32 %5, 0
  %12 = sub nsw i32 0, %5
  %13 = select i1 %11, i32 0, i32 %12
  %14 = shl i32 1, %5
  %15 = select i1 %11, i32 %14, i32 1
  %16 = sext i32 %4 to i64
  %17 = icmp eq i32 %4, -2147483648
  %18 = zext i32 %13 to i64
  %19 = shl nsw i64 -1, %18
  %20 = trunc i64 %19 to i32
  %21 = xor i32 %20, -1
  %22 = ashr i32 %21, 1
  %23 = zext i32 %1 to i64
  br label %24

24:                                               ; preds = %29, %9
  %25 = phi i16* [ %2, %9 ], [ %31, %29 ]
  %26 = phi i32 [ 0, %9 ], [ %32, %29 ]
  %27 = phi i16* [ %6, %9 ], [ %30, %29 ]
  br i1 %10, label %34, label %29

28:                                               ; preds = %29, %7
  ret void

29:                                               ; preds = %58, %24
  %30 = phi i16* [ %27, %24 ], [ %75, %58 ]
  %31 = phi i16* [ %25, %24 ], [ %41, %58 ]
  %32 = add nuw nsw i32 %26, 1
  %33 = icmp eq i32 %32, %3
  br i1 %33, label %28, label %24

34:                                               ; preds = %24, %58
  %35 = phi i64 [ %76, %58 ], [ 0, %24 ]
  %36 = phi i16* [ %41, %58 ], [ %25, %24 ]
  %37 = phi i16* [ %75, %58 ], [ %27, %24 ]
  %38 = getelementptr inbounds i16, i16* %0, i64 %35
  %39 = load i16, i16* %38, align 2
  %40 = sext i16 %39 to i32
  %41 = getelementptr inbounds i16, i16* %36, i64 1
  %42 = load i16, i16* %36, align 2
  %43 = sext i16 %42 to i32
  %44 = mul i32 %15, %40
  %45 = mul i32 %44, %43
  %46 = icmp eq i32 %45, %4
  br i1 %46, label %49, label %47

47:                                               ; preds = %34
  %48 = sext i32 %45 to i64
  br label %50

49:                                               ; preds = %34
  br i1 %17, label %58, label %50

50:                                               ; preds = %49, %47
  %51 = phi i64 [ %48, %47 ], [ %16, %49 ]
  %52 = mul nsw i64 %51, %16
  %53 = icmp sgt i64 %52, -1
  %54 = select i1 %53, i64 1073741824, i64 -1073741823
  %55 = add nsw i64 %54, %52
  %56 = sdiv i64 %55, 2147483648
  %57 = trunc i64 %56 to i32
  br label %58

58:                                               ; preds = %49, %50
  %59 = phi i32 [ %57, %50 ], [ 2147483647, %49 ]
  %60 = and i32 %59, %21
  %61 = lshr i32 %59, 31
  %62 = add nsw i32 %61, %22
  %63 = ashr i32 %59, %13
  %64 = icmp sgt i32 %60, %62
  %65 = zext i1 %64 to i32
  %66 = load i16, i16* %37, align 2
  %67 = sext i16 %66 to i32
  %68 = add i32 %63, %67
  %69 = add i32 %68, %65
  %70 = icmp slt i32 %69, 32767
  %71 = select i1 %70, i32 %69, i32 32767
  %72 = icmp sgt i32 %71, -32768
  %73 = select i1 %72, i32 %71, i32 -32768
  %74 = trunc i32 %73 to i16
  %75 = getelementptr inbounds i16, i16* %37, i64 1
  store i16 %74, i16* %37, align 2
  %76 = add nuw nsw i64 %35, 1
  %77 = icmp eq i64 %76, %23
  br i1 %77, label %29, label %34
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6tflite12tensor_utils28PortableVectorBatchVectorAddEPKfiiPf(float* nocapture readonly, i32, i32, float* nocapture) local_unnamed_addr #3 {
  %5 = icmp sgt i32 %2, 0
  br i1 %5, label %6, label %115

6:                                                ; preds = %4
  %7 = icmp sgt i32 %1, 0
  %8 = sext i32 %1 to i64
  %9 = zext i32 %1 to i64
  %10 = getelementptr float, float* %0, i64 %9
  %11 = and i64 %9, 4294967288
  %12 = add nsw i64 %11, -8
  %13 = lshr exact i64 %12, 3
  %14 = add nuw nsw i64 %13, 1
  %15 = icmp ult i32 %1, 8
  %16 = and i64 %9, 4294967288
  %17 = and i64 %14, 1
  %18 = icmp eq i64 %12, 0
  %19 = sub nuw nsw i64 %14, %17
  %20 = icmp eq i64 %17, 0
  %21 = icmp eq i64 %16, %9
  %22 = and i64 %9, 3
  %23 = icmp eq i64 %22, 0
  br label %24

24:                                               ; preds = %116, %6
  %25 = phi i64 [ %120, %116 ], [ 0, %6 ]
  %26 = phi i32 [ %118, %116 ], [ 0, %6 ]
  %27 = phi float* [ %117, %116 ], [ %3, %6 ]
  %28 = mul i64 %25, %8
  %29 = getelementptr float, float* %3, i64 %28
  %30 = add i64 %28, %9
  %31 = getelementptr float, float* %3, i64 %30
  br i1 %7, label %32, label %116

32:                                               ; preds = %24
  br i1 %15, label %33, label %51

33:                                               ; preds = %114, %51, %32
  %34 = phi i64 [ 0, %51 ], [ 0, %32 ], [ %16, %114 ]
  %35 = xor i64 %34, -1
  %36 = add nsw i64 %35, %9
  br i1 %23, label %48, label %37

37:                                               ; preds = %33, %37
  %38 = phi i64 [ %45, %37 ], [ %34, %33 ]
  %39 = phi i64 [ %46, %37 ], [ %22, %33 ]
  %40 = getelementptr inbounds float, float* %0, i64 %38
  %41 = load float, float* %40, align 4
  %42 = getelementptr inbounds float, float* %27, i64 %38
  %43 = load float, float* %42, align 4
  %44 = fadd float %41, %43
  store float %44, float* %42, align 4
  %45 = add nuw nsw i64 %38, 1
  %46 = add i64 %39, -1
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %48, label %37, !llvm.loop !96

48:                                               ; preds = %37, %33
  %49 = phi i64 [ %34, %33 ], [ %45, %37 ]
  %50 = icmp ult i64 %36, 3
  br i1 %50, label %116, label %121

51:                                               ; preds = %32
  %52 = icmp ult float* %29, %10
  %53 = icmp ugt float* %31, %0
  %54 = and i1 %52, %53
  br i1 %54, label %33, label %55

55:                                               ; preds = %51
  br i1 %18, label %95, label %56

56:                                               ; preds = %55, %56
  %57 = phi i64 [ %92, %56 ], [ 0, %55 ]
  %58 = phi i64 [ %93, %56 ], [ %19, %55 ]
  %59 = getelementptr inbounds float, float* %0, i64 %57
  %60 = bitcast float* %59 to <4 x float>*
  %61 = load <4 x float>, <4 x float>* %60, align 4, !alias.scope !97
  %62 = getelementptr inbounds float, float* %59, i64 4
  %63 = bitcast float* %62 to <4 x float>*
  %64 = load <4 x float>, <4 x float>* %63, align 4, !alias.scope !97
  %65 = getelementptr inbounds float, float* %27, i64 %57
  %66 = bitcast float* %65 to <4 x float>*
  %67 = load <4 x float>, <4 x float>* %66, align 4, !alias.scope !100, !noalias !97
  %68 = getelementptr inbounds float, float* %65, i64 4
  %69 = bitcast float* %68 to <4 x float>*
  %70 = load <4 x float>, <4 x float>* %69, align 4, !alias.scope !100, !noalias !97
  %71 = fadd <4 x float> %61, %67
  %72 = fadd <4 x float> %64, %70
  %73 = bitcast float* %65 to <4 x float>*
  store <4 x float> %71, <4 x float>* %73, align 4, !alias.scope !100, !noalias !97
  %74 = bitcast float* %68 to <4 x float>*
  store <4 x float> %72, <4 x float>* %74, align 4, !alias.scope !100, !noalias !97
  %75 = or i64 %57, 8
  %76 = getelementptr inbounds float, float* %0, i64 %75
  %77 = bitcast float* %76 to <4 x float>*
  %78 = load <4 x float>, <4 x float>* %77, align 4, !alias.scope !97
  %79 = getelementptr inbounds float, float* %76, i64 4
  %80 = bitcast float* %79 to <4 x float>*
  %81 = load <4 x float>, <4 x float>* %80, align 4, !alias.scope !97
  %82 = getelementptr inbounds float, float* %27, i64 %75
  %83 = bitcast float* %82 to <4 x float>*
  %84 = load <4 x float>, <4 x float>* %83, align 4, !alias.scope !100, !noalias !97
  %85 = getelementptr inbounds float, float* %82, i64 4
  %86 = bitcast float* %85 to <4 x float>*
  %87 = load <4 x float>, <4 x float>* %86, align 4, !alias.scope !100, !noalias !97
  %88 = fadd <4 x float> %78, %84
  %89 = fadd <4 x float> %81, %87
  %90 = bitcast float* %82 to <4 x float>*
  store <4 x float> %88, <4 x float>* %90, align 4, !alias.scope !100, !noalias !97
  %91 = bitcast float* %85 to <4 x float>*
  store <4 x float> %89, <4 x float>* %91, align 4, !alias.scope !100, !noalias !97
  %92 = add i64 %57, 16
  %93 = add i64 %58, -2
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %95, label %56, !llvm.loop !102

95:                                               ; preds = %56, %55
  %96 = phi i64 [ 0, %55 ], [ %92, %56 ]
  br i1 %20, label %114, label %97

97:                                               ; preds = %95
  %98 = getelementptr inbounds float, float* %0, i64 %96
  %99 = bitcast float* %98 to <4 x float>*
  %100 = load <4 x float>, <4 x float>* %99, align 4, !alias.scope !97
  %101 = getelementptr inbounds float, float* %98, i64 4
  %102 = bitcast float* %101 to <4 x float>*
  %103 = load <4 x float>, <4 x float>* %102, align 4, !alias.scope !97
  %104 = getelementptr inbounds float, float* %27, i64 %96
  %105 = bitcast float* %104 to <4 x float>*
  %106 = load <4 x float>, <4 x float>* %105, align 4, !alias.scope !100, !noalias !97
  %107 = getelementptr inbounds float, float* %104, i64 4
  %108 = bitcast float* %107 to <4 x float>*
  %109 = load <4 x float>, <4 x float>* %108, align 4, !alias.scope !100, !noalias !97
  %110 = fadd <4 x float> %100, %106
  %111 = fadd <4 x float> %103, %109
  %112 = bitcast float* %104 to <4 x float>*
  store <4 x float> %110, <4 x float>* %112, align 4, !alias.scope !100, !noalias !97
  %113 = bitcast float* %107 to <4 x float>*
  store <4 x float> %111, <4 x float>* %113, align 4, !alias.scope !100, !noalias !97
  br label %114

114:                                              ; preds = %95, %97
  br i1 %21, label %116, label %33

115:                                              ; preds = %116, %4
  ret void

116:                                              ; preds = %48, %121, %114, %24
  %117 = getelementptr inbounds float, float* %27, i64 %8
  %118 = add nuw nsw i32 %26, 1
  %119 = icmp eq i32 %118, %2
  %120 = add i64 %25, 1
  br i1 %119, label %115, label %24

121:                                              ; preds = %48, %121
  %122 = phi i64 [ %146, %121 ], [ %49, %48 ]
  %123 = getelementptr inbounds float, float* %0, i64 %122
  %124 = load float, float* %123, align 4
  %125 = getelementptr inbounds float, float* %27, i64 %122
  %126 = load float, float* %125, align 4
  %127 = fadd float %124, %126
  store float %127, float* %125, align 4
  %128 = add nuw nsw i64 %122, 1
  %129 = getelementptr inbounds float, float* %0, i64 %128
  %130 = load float, float* %129, align 4
  %131 = getelementptr inbounds float, float* %27, i64 %128
  %132 = load float, float* %131, align 4
  %133 = fadd float %130, %132
  store float %133, float* %131, align 4
  %134 = add nuw nsw i64 %122, 2
  %135 = getelementptr inbounds float, float* %0, i64 %134
  %136 = load float, float* %135, align 4
  %137 = getelementptr inbounds float, float* %27, i64 %134
  %138 = load float, float* %137, align 4
  %139 = fadd float %136, %138
  store float %139, float* %137, align 4
  %140 = add nuw nsw i64 %122, 3
  %141 = getelementptr inbounds float, float* %0, i64 %140
  %142 = load float, float* %141, align 4
  %143 = getelementptr inbounds float, float* %27, i64 %140
  %144 = load float, float* %143, align 4
  %145 = fadd float %142, %144
  store float %145, float* %143, align 4
  %146 = add nuw nsw i64 %122, 4
  %147 = icmp eq i64 %146, %9
  br i1 %147, label %116, label %121, !llvm.loop !103
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6tflite12tensor_utils18PortableSub1VectorEPKfiPf(float* nocapture readonly, i32, float* nocapture) local_unnamed_addr #3 {
  %4 = icmp sgt i32 %1, 0
  br i1 %4, label %5, label %106

5:                                                ; preds = %3
  %6 = add i32 %1, -1
  %7 = zext i32 %6 to i64
  %8 = add nuw nsw i64 %7, 1
  %9 = icmp ult i64 %8, 8
  br i1 %9, label %10, label %36

10:                                               ; preds = %104, %36, %5
  %11 = phi i32 [ 0, %36 ], [ 0, %5 ], [ %47, %104 ]
  %12 = phi float* [ %2, %36 ], [ %2, %5 ], [ %48, %104 ]
  %13 = phi float* [ %0, %36 ], [ %0, %5 ], [ %49, %104 ]
  %14 = sub i32 %1, %11
  %15 = xor i32 %11, -1
  %16 = add i32 %15, %1
  %17 = and i32 %14, 3
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %31, label %19

19:                                               ; preds = %10, %19
  %20 = phi i32 [ %28, %19 ], [ %11, %10 ]
  %21 = phi float* [ %27, %19 ], [ %12, %10 ]
  %22 = phi float* [ %24, %19 ], [ %13, %10 ]
  %23 = phi i32 [ %29, %19 ], [ %17, %10 ]
  %24 = getelementptr inbounds float, float* %22, i64 1
  %25 = load float, float* %22, align 4
  %26 = fsub float 1.000000e+00, %25
  %27 = getelementptr inbounds float, float* %21, i64 1
  store float %26, float* %21, align 4
  %28 = add nuw nsw i32 %20, 1
  %29 = add i32 %23, -1
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %19, !llvm.loop !104

31:                                               ; preds = %19, %10
  %32 = phi i32 [ %11, %10 ], [ %28, %19 ]
  %33 = phi float* [ %12, %10 ], [ %27, %19 ]
  %34 = phi float* [ %13, %10 ], [ %24, %19 ]
  %35 = icmp ult i32 %16, 3
  br i1 %35, label %106, label %107

36:                                               ; preds = %5
  %37 = add i32 %1, -1
  %38 = zext i32 %37 to i64
  %39 = add nuw nsw i64 %38, 1
  %40 = getelementptr float, float* %2, i64 %39
  %41 = getelementptr float, float* %0, i64 %39
  %42 = icmp ugt float* %41, %2
  %43 = icmp ugt float* %40, %0
  %44 = and i1 %42, %43
  br i1 %44, label %10, label %45

45:                                               ; preds = %36
  %46 = and i64 %8, 8589934584
  %47 = trunc i64 %46 to i32
  %48 = getelementptr float, float* %2, i64 %46
  %49 = getelementptr float, float* %0, i64 %46
  %50 = add nsw i64 %46, -8
  %51 = lshr exact i64 %50, 3
  %52 = add nuw nsw i64 %51, 1
  %53 = and i64 %52, 1
  %54 = icmp eq i64 %50, 0
  br i1 %54, label %88, label %55

55:                                               ; preds = %45
  %56 = sub nuw nsw i64 %52, %53
  br label %57

57:                                               ; preds = %57, %55
  %58 = phi i64 [ 0, %55 ], [ %85, %57 ]
  %59 = phi i64 [ %56, %55 ], [ %86, %57 ]
  %60 = getelementptr float, float* %2, i64 %58
  %61 = getelementptr float, float* %0, i64 %58
  %62 = bitcast float* %61 to <4 x float>*
  %63 = load <4 x float>, <4 x float>* %62, align 4, !alias.scope !105
  %64 = getelementptr float, float* %61, i64 4
  %65 = bitcast float* %64 to <4 x float>*
  %66 = load <4 x float>, <4 x float>* %65, align 4, !alias.scope !105
  %67 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %63
  %68 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %66
  %69 = bitcast float* %60 to <4 x float>*
  store <4 x float> %67, <4 x float>* %69, align 4, !alias.scope !108, !noalias !105
  %70 = getelementptr float, float* %60, i64 4
  %71 = bitcast float* %70 to <4 x float>*
  store <4 x float> %68, <4 x float>* %71, align 4, !alias.scope !108, !noalias !105
  %72 = or i64 %58, 8
  %73 = getelementptr float, float* %2, i64 %72
  %74 = getelementptr float, float* %0, i64 %72
  %75 = bitcast float* %74 to <4 x float>*
  %76 = load <4 x float>, <4 x float>* %75, align 4, !alias.scope !105
  %77 = getelementptr float, float* %74, i64 4
  %78 = bitcast float* %77 to <4 x float>*
  %79 = load <4 x float>, <4 x float>* %78, align 4, !alias.scope !105
  %80 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %76
  %81 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %79
  %82 = bitcast float* %73 to <4 x float>*
  store <4 x float> %80, <4 x float>* %82, align 4, !alias.scope !108, !noalias !105
  %83 = getelementptr float, float* %73, i64 4
  %84 = bitcast float* %83 to <4 x float>*
  store <4 x float> %81, <4 x float>* %84, align 4, !alias.scope !108, !noalias !105
  %85 = add i64 %58, 16
  %86 = add i64 %59, -2
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %88, label %57, !llvm.loop !110

88:                                               ; preds = %57, %45
  %89 = phi i64 [ 0, %45 ], [ %85, %57 ]
  %90 = icmp eq i64 %53, 0
  br i1 %90, label %104, label %91

91:                                               ; preds = %88
  %92 = getelementptr float, float* %2, i64 %89
  %93 = getelementptr float, float* %0, i64 %89
  %94 = bitcast float* %93 to <4 x float>*
  %95 = load <4 x float>, <4 x float>* %94, align 4, !alias.scope !105
  %96 = getelementptr float, float* %93, i64 4
  %97 = bitcast float* %96 to <4 x float>*
  %98 = load <4 x float>, <4 x float>* %97, align 4, !alias.scope !105
  %99 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %95
  %100 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %98
  %101 = bitcast float* %92 to <4 x float>*
  store <4 x float> %99, <4 x float>* %101, align 4, !alias.scope !108, !noalias !105
  %102 = getelementptr float, float* %92, i64 4
  %103 = bitcast float* %102 to <4 x float>*
  store <4 x float> %100, <4 x float>* %103, align 4, !alias.scope !108, !noalias !105
  br label %104

104:                                              ; preds = %88, %91
  %105 = icmp eq i64 %8, %46
  br i1 %105, label %106, label %10

106:                                              ; preds = %31, %107, %104, %3
  ret void

107:                                              ; preds = %31, %107
  %108 = phi i32 [ %127, %107 ], [ %32, %31 ]
  %109 = phi float* [ %126, %107 ], [ %33, %31 ]
  %110 = phi float* [ %123, %107 ], [ %34, %31 ]
  %111 = getelementptr inbounds float, float* %110, i64 1
  %112 = load float, float* %110, align 4
  %113 = fsub float 1.000000e+00, %112
  %114 = getelementptr inbounds float, float* %109, i64 1
  store float %113, float* %109, align 4
  %115 = getelementptr inbounds float, float* %110, i64 2
  %116 = load float, float* %111, align 4
  %117 = fsub float 1.000000e+00, %116
  %118 = getelementptr inbounds float, float* %109, i64 2
  store float %117, float* %114, align 4
  %119 = getelementptr inbounds float, float* %110, i64 3
  %120 = load float, float* %115, align 4
  %121 = fsub float 1.000000e+00, %120
  %122 = getelementptr inbounds float, float* %109, i64 3
  store float %121, float* %118, align 4
  %123 = getelementptr inbounds float, float* %110, i64 4
  %124 = load float, float* %119, align 4
  %125 = fsub float 1.000000e+00, %124
  %126 = getelementptr inbounds float, float* %109, i64 4
  store float %125, float* %122, align 4
  %127 = add nuw nsw i32 %108, 4
  %128 = icmp eq i32 %127, %1
  br i1 %128, label %106, label %107, !llvm.loop !111
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6tflite12tensor_utils18PortableSub1VectorEPKsiPs(i16* nocapture readonly, i32, i16* nocapture) local_unnamed_addr #3 {
  %4 = icmp sgt i32 %1, 0
  br i1 %4, label %5, label %106

5:                                                ; preds = %3
  %6 = add i32 %1, -1
  %7 = zext i32 %6 to i64
  %8 = add nuw nsw i64 %7, 1
  %9 = icmp ult i64 %8, 16
  br i1 %9, label %10, label %36

10:                                               ; preds = %104, %36, %5
  %11 = phi i32 [ 0, %36 ], [ 0, %5 ], [ %47, %104 ]
  %12 = phi i16* [ %2, %36 ], [ %2, %5 ], [ %48, %104 ]
  %13 = phi i16* [ %0, %36 ], [ %0, %5 ], [ %49, %104 ]
  %14 = sub i32 %1, %11
  %15 = xor i32 %11, -1
  %16 = add i32 %15, %1
  %17 = and i32 %14, 3
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %31, label %19

19:                                               ; preds = %10, %19
  %20 = phi i32 [ %28, %19 ], [ %11, %10 ]
  %21 = phi i16* [ %27, %19 ], [ %12, %10 ]
  %22 = phi i16* [ %24, %19 ], [ %13, %10 ]
  %23 = phi i32 [ %29, %19 ], [ %17, %10 ]
  %24 = getelementptr inbounds i16, i16* %22, i64 1
  %25 = load i16, i16* %22, align 2
  %26 = sub i16 32767, %25
  %27 = getelementptr inbounds i16, i16* %21, i64 1
  store i16 %26, i16* %21, align 2
  %28 = add nuw nsw i32 %20, 1
  %29 = add i32 %23, -1
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %19, !llvm.loop !112

31:                                               ; preds = %19, %10
  %32 = phi i32 [ %11, %10 ], [ %28, %19 ]
  %33 = phi i16* [ %12, %10 ], [ %27, %19 ]
  %34 = phi i16* [ %13, %10 ], [ %24, %19 ]
  %35 = icmp ult i32 %16, 3
  br i1 %35, label %106, label %107

36:                                               ; preds = %5
  %37 = add i32 %1, -1
  %38 = zext i32 %37 to i64
  %39 = add nuw nsw i64 %38, 1
  %40 = getelementptr i16, i16* %2, i64 %39
  %41 = getelementptr i16, i16* %0, i64 %39
  %42 = icmp ugt i16* %41, %2
  %43 = icmp ugt i16* %40, %0
  %44 = and i1 %42, %43
  br i1 %44, label %10, label %45

45:                                               ; preds = %36
  %46 = and i64 %8, 8589934576
  %47 = trunc i64 %46 to i32
  %48 = getelementptr i16, i16* %2, i64 %46
  %49 = getelementptr i16, i16* %0, i64 %46
  %50 = add nsw i64 %46, -16
  %51 = lshr exact i64 %50, 4
  %52 = add nuw nsw i64 %51, 1
  %53 = and i64 %52, 1
  %54 = icmp eq i64 %50, 0
  br i1 %54, label %88, label %55

55:                                               ; preds = %45
  %56 = sub nuw nsw i64 %52, %53
  br label %57

57:                                               ; preds = %57, %55
  %58 = phi i64 [ 0, %55 ], [ %85, %57 ]
  %59 = phi i64 [ %56, %55 ], [ %86, %57 ]
  %60 = getelementptr i16, i16* %2, i64 %58
  %61 = getelementptr i16, i16* %0, i64 %58
  %62 = bitcast i16* %61 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 2, !alias.scope !113
  %64 = getelementptr i16, i16* %61, i64 8
  %65 = bitcast i16* %64 to <8 x i16>*
  %66 = load <8 x i16>, <8 x i16>* %65, align 2, !alias.scope !113
  %67 = sub <8 x i16> <i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767>, %63
  %68 = sub <8 x i16> <i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767>, %66
  %69 = bitcast i16* %60 to <8 x i16>*
  store <8 x i16> %67, <8 x i16>* %69, align 2, !alias.scope !116, !noalias !113
  %70 = getelementptr i16, i16* %60, i64 8
  %71 = bitcast i16* %70 to <8 x i16>*
  store <8 x i16> %68, <8 x i16>* %71, align 2, !alias.scope !116, !noalias !113
  %72 = or i64 %58, 16
  %73 = getelementptr i16, i16* %2, i64 %72
  %74 = getelementptr i16, i16* %0, i64 %72
  %75 = bitcast i16* %74 to <8 x i16>*
  %76 = load <8 x i16>, <8 x i16>* %75, align 2, !alias.scope !113
  %77 = getelementptr i16, i16* %74, i64 8
  %78 = bitcast i16* %77 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 2, !alias.scope !113
  %80 = sub <8 x i16> <i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767>, %76
  %81 = sub <8 x i16> <i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767>, %79
  %82 = bitcast i16* %73 to <8 x i16>*
  store <8 x i16> %80, <8 x i16>* %82, align 2, !alias.scope !116, !noalias !113
  %83 = getelementptr i16, i16* %73, i64 8
  %84 = bitcast i16* %83 to <8 x i16>*
  store <8 x i16> %81, <8 x i16>* %84, align 2, !alias.scope !116, !noalias !113
  %85 = add i64 %58, 32
  %86 = add i64 %59, -2
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %88, label %57, !llvm.loop !118

88:                                               ; preds = %57, %45
  %89 = phi i64 [ 0, %45 ], [ %85, %57 ]
  %90 = icmp eq i64 %53, 0
  br i1 %90, label %104, label %91

91:                                               ; preds = %88
  %92 = getelementptr i16, i16* %2, i64 %89
  %93 = getelementptr i16, i16* %0, i64 %89
  %94 = bitcast i16* %93 to <8 x i16>*
  %95 = load <8 x i16>, <8 x i16>* %94, align 2, !alias.scope !113
  %96 = getelementptr i16, i16* %93, i64 8
  %97 = bitcast i16* %96 to <8 x i16>*
  %98 = load <8 x i16>, <8 x i16>* %97, align 2, !alias.scope !113
  %99 = sub <8 x i16> <i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767>, %95
  %100 = sub <8 x i16> <i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767>, %98
  %101 = bitcast i16* %92 to <8 x i16>*
  store <8 x i16> %99, <8 x i16>* %101, align 2, !alias.scope !116, !noalias !113
  %102 = getelementptr i16, i16* %92, i64 8
  %103 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %100, <8 x i16>* %103, align 2, !alias.scope !116, !noalias !113
  br label %104

104:                                              ; preds = %88, %91
  %105 = icmp eq i64 %8, %46
  br i1 %105, label %106, label %10

106:                                              ; preds = %31, %107, %104, %3
  ret void

107:                                              ; preds = %31, %107
  %108 = phi i32 [ %127, %107 ], [ %32, %31 ]
  %109 = phi i16* [ %126, %107 ], [ %33, %31 ]
  %110 = phi i16* [ %123, %107 ], [ %34, %31 ]
  %111 = getelementptr inbounds i16, i16* %110, i64 1
  %112 = load i16, i16* %110, align 2
  %113 = sub i16 32767, %112
  %114 = getelementptr inbounds i16, i16* %109, i64 1
  store i16 %113, i16* %109, align 2
  %115 = getelementptr inbounds i16, i16* %110, i64 2
  %116 = load i16, i16* %111, align 2
  %117 = sub i16 32767, %116
  %118 = getelementptr inbounds i16, i16* %109, i64 2
  store i16 %117, i16* %114, align 2
  %119 = getelementptr inbounds i16, i16* %110, i64 3
  %120 = load i16, i16* %115, align 2
  %121 = sub i16 32767, %120
  %122 = getelementptr inbounds i16, i16* %109, i64 3
  store i16 %121, i16* %118, align 2
  %123 = getelementptr inbounds i16, i16* %110, i64 4
  %124 = load i16, i16* %119, align 2
  %125 = sub i16 32767, %124
  %126 = getelementptr inbounds i16, i16* %109, i64 4
  store i16 %125, i16* %122, align 2
  %127 = add nuw nsw i32 %108, 4
  %128 = icmp eq i32 %127, %1
  br i1 %128, label %106, label %107, !llvm.loop !119
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6tflite12tensor_utils28PortableVectorScalarMultiplyEPKaifPf(i8* nocapture readonly, i32, float, float* nocapture) local_unnamed_addr #3 {
  %5 = bitcast float* %3 to i8*
  %6 = icmp sgt i32 %1, 0
  br i1 %6, label %7, label %120

7:                                                ; preds = %4
  %8 = add i32 %1, -1
  %9 = zext i32 %8 to i64
  %10 = add nuw nsw i64 %9, 1
  %11 = icmp ult i64 %10, 8
  br i1 %11, label %12, label %39

12:                                               ; preds = %118, %39, %7
  %13 = phi i32 [ 0, %39 ], [ 0, %7 ], [ %51, %118 ]
  %14 = phi float* [ %3, %39 ], [ %3, %7 ], [ %52, %118 ]
  %15 = phi i8* [ %0, %39 ], [ %0, %7 ], [ %53, %118 ]
  %16 = sub i32 %1, %13
  %17 = xor i32 %13, -1
  %18 = add i32 %17, %1
  %19 = and i32 %16, 3
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %34, label %21

21:                                               ; preds = %12, %21
  %22 = phi i32 [ %31, %21 ], [ %13, %12 ]
  %23 = phi float* [ %30, %21 ], [ %14, %12 ]
  %24 = phi i8* [ %26, %21 ], [ %15, %12 ]
  %25 = phi i32 [ %32, %21 ], [ %19, %12 ]
  %26 = getelementptr inbounds i8, i8* %24, i64 1
  %27 = load i8, i8* %24, align 1
  %28 = sitofp i8 %27 to float
  %29 = fmul float %28, %2
  %30 = getelementptr inbounds float, float* %23, i64 1
  store float %29, float* %23, align 4
  %31 = add nuw nsw i32 %22, 1
  %32 = add i32 %25, -1
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %21, !llvm.loop !120

34:                                               ; preds = %21, %12
  %35 = phi i32 [ %13, %12 ], [ %31, %21 ]
  %36 = phi float* [ %14, %12 ], [ %30, %21 ]
  %37 = phi i8* [ %15, %12 ], [ %26, %21 ]
  %38 = icmp ult i32 %18, 3
  br i1 %38, label %120, label %121

39:                                               ; preds = %7
  %40 = add i32 %1, -1
  %41 = zext i32 %40 to i64
  %42 = add nuw nsw i64 %41, 1
  %43 = getelementptr float, float* %3, i64 %42
  %44 = bitcast float* %43 to i8*
  %45 = getelementptr i8, i8* %0, i64 %42
  %46 = icmp ugt i8* %45, %5
  %47 = icmp ugt i8* %44, %0
  %48 = and i1 %46, %47
  br i1 %48, label %12, label %49

49:                                               ; preds = %39
  %50 = and i64 %10, 8589934584
  %51 = trunc i64 %50 to i32
  %52 = getelementptr float, float* %3, i64 %50
  %53 = getelementptr i8, i8* %0, i64 %50
  %54 = insertelement <4 x float> undef, float %2, i32 0
  %55 = shufflevector <4 x float> %54, <4 x float> undef, <4 x i32> zeroinitializer
  %56 = insertelement <4 x float> undef, float %2, i32 0
  %57 = shufflevector <4 x float> %56, <4 x float> undef, <4 x i32> zeroinitializer
  %58 = add nsw i64 %50, -8
  %59 = lshr exact i64 %58, 3
  %60 = add nuw nsw i64 %59, 1
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %58, 0
  br i1 %62, label %100, label %63

63:                                               ; preds = %49
  %64 = sub nuw nsw i64 %60, %61
  br label %65

65:                                               ; preds = %65, %63
  %66 = phi i64 [ 0, %63 ], [ %97, %65 ]
  %67 = phi i64 [ %64, %63 ], [ %98, %65 ]
  %68 = getelementptr float, float* %3, i64 %66
  %69 = getelementptr i8, i8* %0, i64 %66
  %70 = bitcast i8* %69 to <4 x i8>*
  %71 = load <4 x i8>, <4 x i8>* %70, align 1, !alias.scope !121
  %72 = getelementptr i8, i8* %69, i64 4
  %73 = bitcast i8* %72 to <4 x i8>*
  %74 = load <4 x i8>, <4 x i8>* %73, align 1, !alias.scope !121
  %75 = sitofp <4 x i8> %71 to <4 x float>
  %76 = sitofp <4 x i8> %74 to <4 x float>
  %77 = fmul <4 x float> %55, %75
  %78 = fmul <4 x float> %57, %76
  %79 = bitcast float* %68 to <4 x float>*
  store <4 x float> %77, <4 x float>* %79, align 4, !alias.scope !124, !noalias !121
  %80 = getelementptr float, float* %68, i64 4
  %81 = bitcast float* %80 to <4 x float>*
  store <4 x float> %78, <4 x float>* %81, align 4, !alias.scope !124, !noalias !121
  %82 = or i64 %66, 8
  %83 = getelementptr float, float* %3, i64 %82
  %84 = getelementptr i8, i8* %0, i64 %82
  %85 = bitcast i8* %84 to <4 x i8>*
  %86 = load <4 x i8>, <4 x i8>* %85, align 1, !alias.scope !121
  %87 = getelementptr i8, i8* %84, i64 4
  %88 = bitcast i8* %87 to <4 x i8>*
  %89 = load <4 x i8>, <4 x i8>* %88, align 1, !alias.scope !121
  %90 = sitofp <4 x i8> %86 to <4 x float>
  %91 = sitofp <4 x i8> %89 to <4 x float>
  %92 = fmul <4 x float> %55, %90
  %93 = fmul <4 x float> %57, %91
  %94 = bitcast float* %83 to <4 x float>*
  store <4 x float> %92, <4 x float>* %94, align 4, !alias.scope !124, !noalias !121
  %95 = getelementptr float, float* %83, i64 4
  %96 = bitcast float* %95 to <4 x float>*
  store <4 x float> %93, <4 x float>* %96, align 4, !alias.scope !124, !noalias !121
  %97 = add i64 %66, 16
  %98 = add i64 %67, -2
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %100, label %65, !llvm.loop !126

100:                                              ; preds = %65, %49
  %101 = phi i64 [ 0, %49 ], [ %97, %65 ]
  %102 = icmp eq i64 %61, 0
  br i1 %102, label %118, label %103

103:                                              ; preds = %100
  %104 = getelementptr float, float* %3, i64 %101
  %105 = getelementptr i8, i8* %0, i64 %101
  %106 = bitcast i8* %105 to <4 x i8>*
  %107 = load <4 x i8>, <4 x i8>* %106, align 1, !alias.scope !121
  %108 = getelementptr i8, i8* %105, i64 4
  %109 = bitcast i8* %108 to <4 x i8>*
  %110 = load <4 x i8>, <4 x i8>* %109, align 1, !alias.scope !121
  %111 = sitofp <4 x i8> %107 to <4 x float>
  %112 = sitofp <4 x i8> %110 to <4 x float>
  %113 = fmul <4 x float> %55, %111
  %114 = fmul <4 x float> %57, %112
  %115 = bitcast float* %104 to <4 x float>*
  store <4 x float> %113, <4 x float>* %115, align 4, !alias.scope !124, !noalias !121
  %116 = getelementptr float, float* %104, i64 4
  %117 = bitcast float* %116 to <4 x float>*
  store <4 x float> %114, <4 x float>* %117, align 4, !alias.scope !124, !noalias !121
  br label %118

118:                                              ; preds = %100, %103
  %119 = icmp eq i64 %10, %50
  br i1 %119, label %120, label %12

120:                                              ; preds = %34, %121, %118, %4
  ret void

121:                                              ; preds = %34, %121
  %122 = phi i32 [ %145, %121 ], [ %35, %34 ]
  %123 = phi float* [ %144, %121 ], [ %36, %34 ]
  %124 = phi i8* [ %140, %121 ], [ %37, %34 ]
  %125 = getelementptr inbounds i8, i8* %124, i64 1
  %126 = load i8, i8* %124, align 1
  %127 = sitofp i8 %126 to float
  %128 = fmul float %127, %2
  %129 = getelementptr inbounds float, float* %123, i64 1
  store float %128, float* %123, align 4
  %130 = getelementptr inbounds i8, i8* %124, i64 2
  %131 = load i8, i8* %125, align 1
  %132 = sitofp i8 %131 to float
  %133 = fmul float %132, %2
  %134 = getelementptr inbounds float, float* %123, i64 2
  store float %133, float* %129, align 4
  %135 = getelementptr inbounds i8, i8* %124, i64 3
  %136 = load i8, i8* %130, align 1
  %137 = sitofp i8 %136 to float
  %138 = fmul float %137, %2
  %139 = getelementptr inbounds float, float* %123, i64 3
  store float %138, float* %134, align 4
  %140 = getelementptr inbounds i8, i8* %124, i64 4
  %141 = load i8, i8* %135, align 1
  %142 = sitofp i8 %141 to float
  %143 = fmul float %142, %2
  %144 = getelementptr inbounds float, float* %123, i64 4
  store float %143, float* %139, align 4
  %145 = add nuw nsw i32 %122, 4
  %146 = icmp eq i32 %145, %1
  br i1 %146, label %120, label %121, !llvm.loop !127
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6tflite12tensor_utils18PortableClipVectorEPKfifPf(float* nocapture readonly, i32, float, float* nocapture) local_unnamed_addr #0 {
  %5 = alloca float, align 4
  %6 = alloca float, align 4
  store float %2, float* %5, align 4
  %7 = icmp sgt i32 %1, 0
  br i1 %7, label %8, label %31

8:                                                ; preds = %4
  %9 = bitcast float* %6 to i8*
  %10 = fsub float -0.000000e+00, %2
  %11 = zext i32 %1 to i64
  %12 = and i64 %11, 1
  %13 = icmp eq i32 %1, 1
  br i1 %13, label %16, label %14

14:                                               ; preds = %8
  %15 = sub nsw i64 %11, %12
  br label %32

16:                                               ; preds = %32, %8
  %17 = phi i64 [ 0, %8 ], [ %58, %32 ]
  %18 = icmp eq i64 %12, 0
  br i1 %18, label %31, label %19

19:                                               ; preds = %16
  %20 = getelementptr inbounds float, float* %0, i64 %17
  %21 = load float, float* %20, align 4
  %22 = fcmp olt float %21, %2
  %23 = select i1 %22, float* %20, float* %5
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9)
  store float %10, float* %6, align 4
  %24 = load float, float* %23, align 4
  %25 = fcmp olt float %24, %10
  %26 = select i1 %25, float* %6, float* %23
  %27 = bitcast float* %26 to i32*
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds float, float* %3, i64 %17
  %30 = bitcast float* %29 to i32*
  store i32 %28, i32* %30, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9)
  br label %31

31:                                               ; preds = %19, %16, %4
  ret void

32:                                               ; preds = %32, %14
  %33 = phi i64 [ 0, %14 ], [ %58, %32 ]
  %34 = phi i64 [ %15, %14 ], [ %59, %32 ]
  %35 = getelementptr inbounds float, float* %0, i64 %33
  %36 = load float, float* %35, align 4
  %37 = fcmp olt float %36, %2
  %38 = select i1 %37, float* %35, float* %5
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9)
  store float %10, float* %6, align 4
  %39 = load float, float* %38, align 4
  %40 = fcmp olt float %39, %10
  %41 = select i1 %40, float* %6, float* %38
  %42 = bitcast float* %41 to i32*
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds float, float* %3, i64 %33
  %45 = bitcast float* %44 to i32*
  store i32 %43, i32* %45, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9)
  %46 = or i64 %33, 1
  %47 = getelementptr inbounds float, float* %0, i64 %46
  %48 = load float, float* %47, align 4
  %49 = fcmp olt float %48, %2
  %50 = select i1 %49, float* %47, float* %5
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9)
  store float %10, float* %6, align 4
  %51 = load float, float* %50, align 4
  %52 = fcmp olt float %51, %10
  %53 = select i1 %52, float* %6, float* %50
  %54 = bitcast float* %53 to i32*
  %55 = load i32, i32* %54, align 4
  %56 = getelementptr inbounds float, float* %3, i64 %46
  %57 = bitcast float* %56 to i32*
  store i32 %55, i32* %57, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9)
  %58 = add nuw nsw i64 %33, 2
  %59 = add i64 %34, -2
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %16, label %32
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6tflite12tensor_utils26PortableReductionSumVectorEPKfPfii(float* nocapture readonly, float* nocapture, i32, i32) local_unnamed_addr #3 {
  %5 = icmp sgt i32 %2, 0
  br i1 %5, label %6, label %20

6:                                                ; preds = %4
  %7 = icmp sgt i32 %3, 0
  %8 = zext i32 %2 to i64
  %9 = add i32 %3, -1
  %10 = and i32 %3, 3
  %11 = icmp ult i32 %9, 3
  %12 = sub i32 %3, %10
  %13 = icmp eq i32 %10, 0
  br label %14

14:                                               ; preds = %34, %6
  %15 = phi i64 [ 0, %6 ], [ %36, %34 ]
  %16 = phi float* [ %0, %6 ], [ %35, %34 ]
  br i1 %7, label %17, label %34

17:                                               ; preds = %14
  %18 = getelementptr inbounds float, float* %1, i64 %15
  %19 = load float, float* %18, align 4
  br i1 %11, label %21, label %38

20:                                               ; preds = %34, %4
  ret void

21:                                               ; preds = %38, %17
  %22 = phi float* [ undef, %17 ], [ %51, %38 ]
  %23 = phi float [ %19, %17 ], [ %53, %38 ]
  %24 = phi float* [ %16, %17 ], [ %51, %38 ]
  br i1 %13, label %34, label %25

25:                                               ; preds = %21, %25
  %26 = phi float [ %31, %25 ], [ %23, %21 ]
  %27 = phi float* [ %29, %25 ], [ %24, %21 ]
  %28 = phi i32 [ %32, %25 ], [ %10, %21 ]
  %29 = getelementptr inbounds float, float* %27, i64 1
  %30 = load float, float* %27, align 4
  %31 = fadd float %30, %26
  store float %31, float* %18, align 4
  %32 = add i32 %28, -1
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %25, !llvm.loop !128

34:                                               ; preds = %21, %25, %14
  %35 = phi float* [ %16, %14 ], [ %22, %21 ], [ %29, %25 ]
  %36 = add nuw nsw i64 %15, 1
  %37 = icmp eq i64 %36, %8
  br i1 %37, label %20, label %14

38:                                               ; preds = %17, %38
  %39 = phi float [ %53, %38 ], [ %19, %17 ]
  %40 = phi float* [ %51, %38 ], [ %16, %17 ]
  %41 = phi i32 [ %54, %38 ], [ %12, %17 ]
  %42 = getelementptr inbounds float, float* %40, i64 1
  %43 = load float, float* %40, align 4
  %44 = fadd float %43, %39
  store float %44, float* %18, align 4
  %45 = getelementptr inbounds float, float* %40, i64 2
  %46 = load float, float* %42, align 4
  %47 = fadd float %46, %44
  store float %47, float* %18, align 4
  %48 = getelementptr inbounds float, float* %40, i64 3
  %49 = load float, float* %45, align 4
  %50 = fadd float %49, %47
  store float %50, float* %18, align 4
  %51 = getelementptr inbounds float, float* %40, i64 4
  %52 = load float, float* %48, align 4
  %53 = fadd float %52, %50
  store float %53, float* %18, align 4
  %54 = add i32 %41, -4
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %21, label %38
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6tflite12tensor_utils26PortableReductionSumVectorEPKiPiii(i32* nocapture readonly, i32* nocapture, i32, i32) local_unnamed_addr #3 {
  %5 = icmp sgt i32 %2, 0
  br i1 %5, label %6, label %20

6:                                                ; preds = %4
  %7 = icmp sgt i32 %3, 0
  %8 = zext i32 %2 to i64
  %9 = add i32 %3, -1
  %10 = and i32 %3, 3
  %11 = icmp ult i32 %9, 3
  %12 = sub i32 %3, %10
  %13 = icmp eq i32 %10, 0
  br label %14

14:                                               ; preds = %34, %6
  %15 = phi i64 [ 0, %6 ], [ %36, %34 ]
  %16 = phi i32* [ %0, %6 ], [ %35, %34 ]
  br i1 %7, label %17, label %34

17:                                               ; preds = %14
  %18 = getelementptr inbounds i32, i32* %1, i64 %15
  %19 = load i32, i32* %18, align 4
  br i1 %11, label %21, label %38

20:                                               ; preds = %34, %4
  ret void

21:                                               ; preds = %38, %17
  %22 = phi i32* [ undef, %17 ], [ %51, %38 ]
  %23 = phi i32 [ %19, %17 ], [ %53, %38 ]
  %24 = phi i32* [ %16, %17 ], [ %51, %38 ]
  br i1 %13, label %34, label %25

25:                                               ; preds = %21, %25
  %26 = phi i32 [ %31, %25 ], [ %23, %21 ]
  %27 = phi i32* [ %29, %25 ], [ %24, %21 ]
  %28 = phi i32 [ %32, %25 ], [ %10, %21 ]
  %29 = getelementptr inbounds i32, i32* %27, i64 1
  %30 = load i32, i32* %27, align 4
  %31 = add nsw i32 %26, %30
  store i32 %31, i32* %18, align 4
  %32 = add i32 %28, -1
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %25, !llvm.loop !129

34:                                               ; preds = %21, %25, %14
  %35 = phi i32* [ %16, %14 ], [ %22, %21 ], [ %29, %25 ]
  %36 = add nuw nsw i64 %15, 1
  %37 = icmp eq i64 %36, %8
  br i1 %37, label %20, label %14

38:                                               ; preds = %17, %38
  %39 = phi i32 [ %53, %38 ], [ %19, %17 ]
  %40 = phi i32* [ %51, %38 ], [ %16, %17 ]
  %41 = phi i32 [ %54, %38 ], [ %12, %17 ]
  %42 = getelementptr inbounds i32, i32* %40, i64 1
  %43 = load i32, i32* %40, align 4
  %44 = add nsw i32 %39, %43
  store i32 %44, i32* %18, align 4
  %45 = getelementptr inbounds i32, i32* %40, i64 2
  %46 = load i32, i32* %42, align 4
  %47 = add nsw i32 %44, %46
  store i32 %47, i32* %18, align 4
  %48 = getelementptr inbounds i32, i32* %40, i64 3
  %49 = load i32, i32* %45, align 4
  %50 = add nsw i32 %47, %49
  store i32 %50, i32* %18, align 4
  %51 = getelementptr inbounds i32, i32* %40, i64 4
  %52 = load i32, i32* %48, align 4
  %53 = add nsw i32 %50, %52
  store i32 %53, i32* %18, align 4
  %54 = add i32 %41, -4
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %21, label %38
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN6tflite12tensor_utils31PortableMeanStddevNormalizationEPKfPfii(float* nocapture readonly, float* nocapture, i32, i32) local_unnamed_addr #7 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %47

6:                                                ; preds = %4
  %7 = icmp sgt i32 %2, 0
  %8 = sitofp i32 %2 to float
  %9 = sext i32 %2 to i64
  %10 = fdiv float 0.000000e+00, %8
  %11 = zext i32 %2 to i64
  %12 = zext i32 %2 to i64
  %13 = add nsw i64 %11, -1
  %14 = and i64 %11, 4294967288
  %15 = add nsw i64 %14, -8
  %16 = lshr exact i64 %15, 3
  %17 = add nuw nsw i64 %16, 1
  %18 = and i64 %11, 7
  %19 = icmp ult i64 %13, 7
  %20 = sub nsw i64 %11, %18
  %21 = icmp eq i64 %18, 0
  %22 = and i64 %11, 3
  %23 = icmp ult i64 %13, 3
  %24 = sub nsw i64 %11, %22
  %25 = icmp eq i64 %22, 0
  %26 = icmp ult i32 %2, 8
  %27 = and i64 %12, 4294967288
  %28 = and i64 %17, 1
  %29 = icmp eq i64 %15, 0
  %30 = sub nuw nsw i64 %17, %28
  %31 = icmp eq i64 %28, 0
  %32 = icmp eq i64 %27, %12
  %33 = and i64 %11, 3
  %34 = icmp eq i64 %33, 0
  br label %35

35:                                               ; preds = %242, %6
  %36 = phi i64 [ %247, %242 ], [ 0, %6 ]
  %37 = phi float* [ %243, %242 ], [ %0, %6 ]
  %38 = phi float* [ %244, %242 ], [ %1, %6 ]
  %39 = phi i32 [ %245, %242 ], [ 0, %6 ]
  %40 = mul i64 %36, %9
  %41 = getelementptr float, float* %1, i64 %40
  %42 = add i64 %40, %12
  %43 = getelementptr float, float* %1, i64 %42
  %44 = getelementptr float, float* %0, i64 %40
  %45 = getelementptr float, float* %0, i64 %42
  br i1 %7, label %46, label %120

46:                                               ; preds = %35
  br i1 %19, label %48, label %66

47:                                               ; preds = %242, %4
  ret void

48:                                               ; preds = %66, %46
  %49 = phi float [ undef, %46 ], [ %100, %66 ]
  %50 = phi i64 [ 0, %46 ], [ %101, %66 ]
  %51 = phi float [ 0.000000e+00, %46 ], [ %100, %66 ]
  br i1 %21, label %62, label %52

52:                                               ; preds = %48, %52
  %53 = phi i64 [ %59, %52 ], [ %50, %48 ]
  %54 = phi float [ %58, %52 ], [ %51, %48 ]
  %55 = phi i64 [ %60, %52 ], [ %18, %48 ]
  %56 = getelementptr inbounds float, float* %37, i64 %53
  %57 = load float, float* %56, align 4
  %58 = fadd float %54, %57
  %59 = add nuw nsw i64 %53, 1
  %60 = add i64 %55, -1
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %62, label %52, !llvm.loop !130

62:                                               ; preds = %52, %48
  %63 = phi float [ %49, %48 ], [ %58, %52 ]
  %64 = fdiv float %63, %8
  br i1 %7, label %65, label %120

65:                                               ; preds = %62
  br i1 %23, label %104, label %212

66:                                               ; preds = %46, %66
  %67 = phi i64 [ %101, %66 ], [ 0, %46 ]
  %68 = phi float [ %100, %66 ], [ 0.000000e+00, %46 ]
  %69 = phi i64 [ %102, %66 ], [ %20, %46 ]
  %70 = getelementptr inbounds float, float* %37, i64 %67
  %71 = load float, float* %70, align 4
  %72 = fadd float %68, %71
  %73 = or i64 %67, 1
  %74 = getelementptr inbounds float, float* %37, i64 %73
  %75 = load float, float* %74, align 4
  %76 = fadd float %72, %75
  %77 = or i64 %67, 2
  %78 = getelementptr inbounds float, float* %37, i64 %77
  %79 = load float, float* %78, align 4
  %80 = fadd float %76, %79
  %81 = or i64 %67, 3
  %82 = getelementptr inbounds float, float* %37, i64 %81
  %83 = load float, float* %82, align 4
  %84 = fadd float %80, %83
  %85 = or i64 %67, 4
  %86 = getelementptr inbounds float, float* %37, i64 %85
  %87 = load float, float* %86, align 4
  %88 = fadd float %84, %87
  %89 = or i64 %67, 5
  %90 = getelementptr inbounds float, float* %37, i64 %89
  %91 = load float, float* %90, align 4
  %92 = fadd float %88, %91
  %93 = or i64 %67, 6
  %94 = getelementptr inbounds float, float* %37, i64 %93
  %95 = load float, float* %94, align 4
  %96 = fadd float %92, %95
  %97 = or i64 %67, 7
  %98 = getelementptr inbounds float, float* %37, i64 %97
  %99 = load float, float* %98, align 4
  %100 = fadd float %96, %99
  %101 = add nuw nsw i64 %67, 8
  %102 = add i64 %69, -8
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %48, label %66

104:                                              ; preds = %212, %65
  %105 = phi float [ undef, %65 ], [ %238, %212 ]
  %106 = phi i64 [ 0, %65 ], [ %239, %212 ]
  %107 = phi float [ 0.000000e+00, %65 ], [ %238, %212 ]
  br i1 %25, label %120, label %108

108:                                              ; preds = %104, %108
  %109 = phi i64 [ %117, %108 ], [ %106, %104 ]
  %110 = phi float [ %116, %108 ], [ %107, %104 ]
  %111 = phi i64 [ %118, %108 ], [ %22, %104 ]
  %112 = getelementptr inbounds float, float* %37, i64 %109
  %113 = load float, float* %112, align 4
  %114 = fsub float %113, %64
  %115 = fmul float %114, %114
  %116 = fadd float %110, %115
  %117 = add nuw nsw i64 %109, 1
  %118 = add i64 %111, -1
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %120, label %108, !llvm.loop !131

120:                                              ; preds = %104, %108, %35, %62
  %121 = phi float [ %64, %62 ], [ %10, %35 ], [ %64, %108 ], [ %64, %104 ]
  %122 = phi float [ 0.000000e+00, %62 ], [ 0.000000e+00, %35 ], [ %105, %104 ], [ %116, %108 ]
  %123 = fdiv float %122, %8
  %124 = fadd float %123, 0x3E45798EE0000000
  %125 = tail call float @sqrtf(float %124) #9
  %126 = fdiv float 1.000000e+00, %125
  br i1 %7, label %127, label %242

127:                                              ; preds = %120
  br i1 %26, label %128, label %146

128:                                              ; preds = %211, %146, %127
  %129 = phi i64 [ 0, %146 ], [ 0, %127 ], [ %27, %211 ]
  %130 = xor i64 %129, -1
  %131 = add nsw i64 %130, %11
  br i1 %34, label %143, label %132

132:                                              ; preds = %128, %132
  %133 = phi i64 [ %140, %132 ], [ %129, %128 ]
  %134 = phi i64 [ %141, %132 ], [ %33, %128 ]
  %135 = getelementptr inbounds float, float* %37, i64 %133
  %136 = load float, float* %135, align 4
  %137 = fsub float %136, %121
  %138 = fmul float %126, %137
  %139 = getelementptr inbounds float, float* %38, i64 %133
  store float %138, float* %139, align 4
  %140 = add nuw nsw i64 %133, 1
  %141 = add i64 %134, -1
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %143, label %132, !llvm.loop !132

143:                                              ; preds = %132, %128
  %144 = phi i64 [ %129, %128 ], [ %140, %132 ]
  %145 = icmp ult i64 %131, 3
  br i1 %145, label %242, label %248

146:                                              ; preds = %127
  %147 = icmp ult float* %41, %45
  %148 = icmp ult float* %44, %43
  %149 = and i1 %147, %148
  br i1 %149, label %128, label %150

150:                                              ; preds = %146
  %151 = insertelement <4 x float> undef, float %121, i32 0
  %152 = shufflevector <4 x float> %151, <4 x float> undef, <4 x i32> zeroinitializer
  %153 = insertelement <4 x float> undef, float %121, i32 0
  %154 = shufflevector <4 x float> %153, <4 x float> undef, <4 x i32> zeroinitializer
  %155 = insertelement <4 x float> undef, float %126, i32 0
  %156 = shufflevector <4 x float> %155, <4 x float> undef, <4 x i32> zeroinitializer
  %157 = insertelement <4 x float> undef, float %126, i32 0
  %158 = shufflevector <4 x float> %157, <4 x float> undef, <4 x i32> zeroinitializer
  br i1 %29, label %194, label %159

159:                                              ; preds = %150, %159
  %160 = phi i64 [ %191, %159 ], [ 0, %150 ]
  %161 = phi i64 [ %192, %159 ], [ %30, %150 ]
  %162 = getelementptr inbounds float, float* %37, i64 %160
  %163 = bitcast float* %162 to <4 x float>*
  %164 = load <4 x float>, <4 x float>* %163, align 4, !alias.scope !133
  %165 = getelementptr inbounds float, float* %162, i64 4
  %166 = bitcast float* %165 to <4 x float>*
  %167 = load <4 x float>, <4 x float>* %166, align 4, !alias.scope !133
  %168 = fsub <4 x float> %164, %152
  %169 = fsub <4 x float> %167, %154
  %170 = fmul <4 x float> %156, %168
  %171 = fmul <4 x float> %158, %169
  %172 = getelementptr inbounds float, float* %38, i64 %160
  %173 = bitcast float* %172 to <4 x float>*
  store <4 x float> %170, <4 x float>* %173, align 4, !alias.scope !136, !noalias !133
  %174 = getelementptr inbounds float, float* %172, i64 4
  %175 = bitcast float* %174 to <4 x float>*
  store <4 x float> %171, <4 x float>* %175, align 4, !alias.scope !136, !noalias !133
  %176 = or i64 %160, 8
  %177 = getelementptr inbounds float, float* %37, i64 %176
  %178 = bitcast float* %177 to <4 x float>*
  %179 = load <4 x float>, <4 x float>* %178, align 4, !alias.scope !133
  %180 = getelementptr inbounds float, float* %177, i64 4
  %181 = bitcast float* %180 to <4 x float>*
  %182 = load <4 x float>, <4 x float>* %181, align 4, !alias.scope !133
  %183 = fsub <4 x float> %179, %152
  %184 = fsub <4 x float> %182, %154
  %185 = fmul <4 x float> %156, %183
  %186 = fmul <4 x float> %158, %184
  %187 = getelementptr inbounds float, float* %38, i64 %176
  %188 = bitcast float* %187 to <4 x float>*
  store <4 x float> %185, <4 x float>* %188, align 4, !alias.scope !136, !noalias !133
  %189 = getelementptr inbounds float, float* %187, i64 4
  %190 = bitcast float* %189 to <4 x float>*
  store <4 x float> %186, <4 x float>* %190, align 4, !alias.scope !136, !noalias !133
  %191 = add i64 %160, 16
  %192 = add i64 %161, -2
  %193 = icmp eq i64 %192, 0
  br i1 %193, label %194, label %159, !llvm.loop !138

194:                                              ; preds = %159, %150
  %195 = phi i64 [ 0, %150 ], [ %191, %159 ]
  br i1 %31, label %211, label %196

196:                                              ; preds = %194
  %197 = getelementptr inbounds float, float* %37, i64 %195
  %198 = bitcast float* %197 to <4 x float>*
  %199 = load <4 x float>, <4 x float>* %198, align 4, !alias.scope !133
  %200 = getelementptr inbounds float, float* %197, i64 4
  %201 = bitcast float* %200 to <4 x float>*
  %202 = load <4 x float>, <4 x float>* %201, align 4, !alias.scope !133
  %203 = fsub <4 x float> %199, %152
  %204 = fsub <4 x float> %202, %154
  %205 = fmul <4 x float> %156, %203
  %206 = fmul <4 x float> %158, %204
  %207 = getelementptr inbounds float, float* %38, i64 %195
  %208 = bitcast float* %207 to <4 x float>*
  store <4 x float> %205, <4 x float>* %208, align 4, !alias.scope !136, !noalias !133
  %209 = getelementptr inbounds float, float* %207, i64 4
  %210 = bitcast float* %209 to <4 x float>*
  store <4 x float> %206, <4 x float>* %210, align 4, !alias.scope !136, !noalias !133
  br label %211

211:                                              ; preds = %194, %196
  br i1 %32, label %242, label %128

212:                                              ; preds = %65, %212
  %213 = phi i64 [ %239, %212 ], [ 0, %65 ]
  %214 = phi float [ %238, %212 ], [ 0.000000e+00, %65 ]
  %215 = phi i64 [ %240, %212 ], [ %24, %65 ]
  %216 = getelementptr inbounds float, float* %37, i64 %213
  %217 = load float, float* %216, align 4
  %218 = fsub float %217, %64
  %219 = fmul float %218, %218
  %220 = fadd float %214, %219
  %221 = or i64 %213, 1
  %222 = getelementptr inbounds float, float* %37, i64 %221
  %223 = load float, float* %222, align 4
  %224 = fsub float %223, %64
  %225 = fmul float %224, %224
  %226 = fadd float %220, %225
  %227 = or i64 %213, 2
  %228 = getelementptr inbounds float, float* %37, i64 %227
  %229 = load float, float* %228, align 4
  %230 = fsub float %229, %64
  %231 = fmul float %230, %230
  %232 = fadd float %226, %231
  %233 = or i64 %213, 3
  %234 = getelementptr inbounds float, float* %37, i64 %233
  %235 = load float, float* %234, align 4
  %236 = fsub float %235, %64
  %237 = fmul float %236, %236
  %238 = fadd float %232, %237
  %239 = add nuw nsw i64 %213, 4
  %240 = add i64 %215, -4
  %241 = icmp eq i64 %240, 0
  br i1 %241, label %104, label %212

242:                                              ; preds = %143, %248, %211, %120
  %243 = getelementptr inbounds float, float* %37, i64 %9
  %244 = getelementptr inbounds float, float* %38, i64 %9
  %245 = add nuw nsw i32 %39, 1
  %246 = icmp eq i32 %245, %3
  %247 = add i64 %36, 1
  br i1 %246, label %47, label %35

248:                                              ; preds = %143, %248
  %249 = phi i64 [ %273, %248 ], [ %144, %143 ]
  %250 = getelementptr inbounds float, float* %37, i64 %249
  %251 = load float, float* %250, align 4
  %252 = fsub float %251, %121
  %253 = fmul float %126, %252
  %254 = getelementptr inbounds float, float* %38, i64 %249
  store float %253, float* %254, align 4
  %255 = add nuw nsw i64 %249, 1
  %256 = getelementptr inbounds float, float* %37, i64 %255
  %257 = load float, float* %256, align 4
  %258 = fsub float %257, %121
  %259 = fmul float %126, %258
  %260 = getelementptr inbounds float, float* %38, i64 %255
  store float %259, float* %260, align 4
  %261 = add nuw nsw i64 %249, 2
  %262 = getelementptr inbounds float, float* %37, i64 %261
  %263 = load float, float* %262, align 4
  %264 = fsub float %263, %121
  %265 = fmul float %126, %264
  %266 = getelementptr inbounds float, float* %38, i64 %261
  store float %265, float* %266, align 4
  %267 = add nuw nsw i64 %249, 3
  %268 = getelementptr inbounds float, float* %37, i64 %267
  %269 = load float, float* %268, align 4
  %270 = fsub float %269, %121
  %271 = fmul float %126, %270
  %272 = getelementptr inbounds float, float* %38, i64 %267
  store float %271, float* %272, align 4
  %273 = add nuw nsw i64 %249, 4
  %274 = icmp eq i64 %273, %12
  br i1 %274, label %242, label %248, !llvm.loop !139
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6tflite12tensor_utils29PortableTwoGateSaturationgAddEPKaaS2_aiiiiiiPs(i8* nocapture readonly, i8 signext, i8* nocapture readonly, i8 signext, i32, i32, i32, i32, i32, i32, i16* nocapture) local_unnamed_addr #3 {
  %12 = mul i32 %9, %8
  %13 = icmp sgt i32 %12, 0
  br i1 %13, label %14, label %42

14:                                               ; preds = %11
  %15 = sext i8 %1 to i32
  %16 = sext i8 %3 to i32
  %17 = icmp sgt i32 %5, 0
  %18 = sub nsw i32 0, %5
  %19 = select i1 %17, i32 0, i32 %18
  %20 = shl i32 1, %5
  %21 = select i1 %17, i32 %20, i32 1
  %22 = sext i32 %4 to i64
  %23 = icmp eq i32 %4, -2147483648
  %24 = zext i32 %19 to i64
  %25 = shl nsw i64 -1, %24
  %26 = trunc i64 %25 to i32
  %27 = xor i32 %26, -1
  %28 = ashr i32 %27, 1
  %29 = icmp sgt i32 %7, 0
  %30 = sub nsw i32 0, %7
  %31 = select i1 %29, i32 0, i32 %30
  %32 = shl i32 1, %7
  %33 = select i1 %29, i32 %32, i32 1
  %34 = sext i32 %6 to i64
  %35 = icmp eq i32 %6, -2147483648
  %36 = zext i32 %31 to i64
  %37 = shl nsw i64 -1, %36
  %38 = trunc i64 %37 to i32
  %39 = xor i32 %38, -1
  %40 = ashr i32 %39, 1
  %41 = zext i32 %12 to i64
  br label %43

42:                                               ; preds = %87, %11
  ret void

43:                                               ; preds = %87, %14
  %44 = phi i64 [ 0, %14 ], [ %104, %87 ]
  %45 = getelementptr inbounds i8, i8* %0, i64 %44
  %46 = load i8, i8* %45, align 1
  %47 = sext i8 %46 to i32
  %48 = sub nsw i32 %47, %15
  %49 = getelementptr inbounds i8, i8* %2, i64 %44
  %50 = load i8, i8* %49, align 1
  %51 = sext i8 %50 to i32
  %52 = sub nsw i32 %51, %16
  %53 = mul nsw i32 %48, %21
  %54 = icmp eq i32 %53, %4
  br i1 %54, label %57, label %55

55:                                               ; preds = %43
  %56 = sext i32 %53 to i64
  br label %58

57:                                               ; preds = %43
  br i1 %23, label %66, label %58

58:                                               ; preds = %57, %55
  %59 = phi i64 [ %56, %55 ], [ %22, %57 ]
  %60 = mul nsw i64 %59, %22
  %61 = icmp sgt i64 %60, -1
  %62 = select i1 %61, i64 1073741824, i64 -1073741823
  %63 = add nsw i64 %62, %60
  %64 = sdiv i64 %63, 2147483648
  %65 = trunc i64 %64 to i32
  br label %66

66:                                               ; preds = %57, %58
  %67 = phi i32 [ %65, %58 ], [ 2147483647, %57 ]
  %68 = and i32 %67, %27
  %69 = lshr i32 %67, 31
  %70 = add nsw i32 %69, %28
  %71 = ashr i32 %67, %19
  %72 = icmp sgt i32 %68, %70
  %73 = zext i1 %72 to i32
  %74 = mul nsw i32 %52, %33
  %75 = icmp eq i32 %74, %6
  br i1 %75, label %78, label %76

76:                                               ; preds = %66
  %77 = sext i32 %74 to i64
  br label %79

78:                                               ; preds = %66
  br i1 %35, label %87, label %79

79:                                               ; preds = %78, %76
  %80 = phi i64 [ %77, %76 ], [ %34, %78 ]
  %81 = mul nsw i64 %80, %34
  %82 = icmp sgt i64 %81, -1
  %83 = select i1 %82, i64 1073741824, i64 -1073741823
  %84 = add nsw i64 %83, %81
  %85 = sdiv i64 %84, 2147483648
  %86 = trunc i64 %85 to i32
  br label %87

87:                                               ; preds = %78, %79
  %88 = phi i32 [ %86, %79 ], [ 2147483647, %78 ]
  %89 = and i32 %88, %39
  %90 = lshr i32 %88, 31
  %91 = add nsw i32 %90, %40
  %92 = ashr i32 %88, %31
  %93 = icmp sgt i32 %89, %91
  %94 = zext i1 %93 to i32
  %95 = add i32 %71, %73
  %96 = add i32 %95, %92
  %97 = add i32 %96, %94
  %98 = icmp slt i32 %97, 32767
  %99 = select i1 %98, i32 %97, i32 32767
  %100 = icmp sgt i32 %99, -32768
  %101 = select i1 %100, i32 %99, i32 -32768
  %102 = trunc i32 %101 to i16
  %103 = getelementptr inbounds i16, i16* %10, i64 %44
  store i16 %102, i16* %103, align 2
  %104 = add nuw nsw i64 %44, 1
  %105 = icmp eq i64 %104, %41
  br i1 %105, label %42, label %43
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #2

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #2

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #8

; Function Attrs: nofree nounwind
declare float @expf(float) local_unnamed_addr #8

; Function Attrs: nofree nounwind
declare float @tanhf(float) local_unnamed_addr #8

; Function Attrs: nounwind readnone speculatable
declare float @llvm.round.f32(float) #2

; Function Attrs: nounwind readnone speculatable
declare double @llvm.minnum.f64(double, double) #2

; Function Attrs: nounwind readnone speculatable
declare double @llvm.maxnum.f64(double, double) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i16 @_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IsEENS_10FixedPointIT_Li0EEES3_(i16) local_unnamed_addr #0 comdat {
  %2 = sext i16 %0 to i32
  %3 = add nsw i32 %2, 32767
  %4 = icmp sgt i32 %3, -1
  %5 = select i1 %4, i32 1, i32 -1
  %6 = add nsw i32 %5, %3
  %7 = sdiv i32 %6, 2
  %8 = trunc i32 %7 to i16
  %9 = icmp eq i16 %8, -32768
  %10 = shl i32 %7, 16
  %11 = ashr exact i32 %10, 16
  %12 = mul nsw i32 %11, -15420
  %13 = icmp slt i32 %10, 65536
  %14 = select i1 %13, i32 16384, i32 -16383
  %15 = add nsw i32 %14, %12
  %16 = sdiv i32 %15, 32768
  %17 = trunc i32 %16 to i16
  %18 = add nsw i16 %17, 23130
  %19 = icmp eq i16 %18, %8
  %20 = and i1 %9, %19
  br i1 %20, label %31, label %21

21:                                               ; preds = %1
  %22 = sext i16 %18 to i32
  %23 = mul nsw i32 %11, %22
  %24 = icmp sgt i32 %23, -1
  %25 = select i1 %24, i32 16384, i32 -16383
  %26 = add nsw i32 %25, %23
  %27 = sdiv i32 %26, 32768
  %28 = shl i32 %27, 16
  %29 = sub i32 536870912, %28
  %30 = ashr exact i32 %29, 16
  br label %31

31:                                               ; preds = %1, %21
  %32 = phi i32 [ %30, %21 ], [ -24575, %1 ]
  %33 = sext i16 %18 to i32
  %34 = mul nsw i32 %32, %33
  %35 = icmp sgt i32 %34, -1
  %36 = select i1 %35, i32 16384, i32 -16383
  %37 = add nsw i32 %36, %34
  %38 = sdiv i32 %37, 32768
  %39 = trunc i32 %38 to i16
  %40 = icmp slt i16 %39, 8192
  %41 = icmp sgt i16 %39, -8192
  %42 = sext i16 %39 to i64
  %43 = shl nsw i64 %42, 2
  %44 = icmp slt i64 %43, 32767
  %45 = select i1 %44, i64 %43, i64 32767
  %46 = icmp sgt i64 %45, -32768
  %47 = select i1 %46, i64 %45, i64 -32768
  %48 = trunc i64 %47 to i16
  %49 = select i1 %40, i16 %48, i16 32767
  %50 = select i1 %41, i16 %49, i16 -32768
  %51 = add i16 %50, %18
  %52 = icmp eq i16 %51, %8
  %53 = and i1 %9, %52
  br i1 %53, label %63, label %54

54:                                               ; preds = %31
  %55 = sext i16 %51 to i32
  %56 = mul nsw i32 %11, %55
  %57 = icmp sgt i32 %56, -1
  %58 = select i1 %57, i32 16384, i32 -16383
  %59 = add nsw i32 %58, %56
  %60 = sdiv i32 %59, 32768
  %61 = trunc i32 %60 to i16
  %62 = sub i16 8192, %61
  br label %63

63:                                               ; preds = %54, %31
  %64 = phi i16 [ %62, %54 ], [ -24575, %31 ]
  %65 = icmp eq i16 %51, %64
  %66 = icmp eq i16 %51, -32768
  %67 = and i1 %66, %65
  br i1 %67, label %77, label %68

68:                                               ; preds = %63
  %69 = sext i16 %64 to i32
  %70 = sext i16 %51 to i32
  %71 = mul nsw i32 %69, %70
  %72 = icmp sgt i32 %71, -1
  %73 = select i1 %72, i32 16384, i32 -16383
  %74 = add nsw i32 %73, %71
  %75 = sdiv i32 %74, 32768
  %76 = trunc i32 %75 to i16
  br label %77

77:                                               ; preds = %68, %63
  %78 = phi i16 [ %76, %68 ], [ 32767, %63 ]
  %79 = icmp slt i16 %78, 8192
  %80 = icmp sgt i16 %78, -8192
  %81 = sext i16 %78 to i64
  %82 = shl nsw i64 %81, 2
  %83 = icmp slt i64 %82, 32767
  %84 = select i1 %83, i64 %82, i64 32767
  %85 = icmp sgt i64 %84, -32768
  %86 = select i1 %85, i64 %84, i64 -32768
  %87 = trunc i64 %86 to i16
  %88 = select i1 %79, i16 %87, i16 32767
  %89 = select i1 %80, i16 %88, i16 -32768
  %90 = add i16 %89, %51
  %91 = icmp eq i16 %90, %8
  %92 = and i1 %9, %91
  br i1 %92, label %102, label %93

93:                                               ; preds = %77
  %94 = sext i16 %90 to i32
  %95 = mul nsw i32 %11, %94
  %96 = icmp sgt i32 %95, -1
  %97 = select i1 %96, i32 16384, i32 -16383
  %98 = add nsw i32 %97, %95
  %99 = sdiv i32 %98, 32768
  %100 = trunc i32 %99 to i16
  %101 = sub i16 8192, %100
  br label %102

102:                                              ; preds = %93, %77
  %103 = phi i16 [ %101, %93 ], [ -24575, %77 ]
  %104 = icmp eq i16 %90, %103
  %105 = icmp eq i16 %90, -32768
  %106 = and i1 %105, %104
  br i1 %106, label %116, label %107

107:                                              ; preds = %102
  %108 = sext i16 %103 to i32
  %109 = sext i16 %90 to i32
  %110 = mul nsw i32 %108, %109
  %111 = icmp sgt i32 %110, -1
  %112 = select i1 %111, i32 16384, i32 -16383
  %113 = add nsw i32 %112, %110
  %114 = sdiv i32 %113, 32768
  %115 = trunc i32 %114 to i16
  br label %116

116:                                              ; preds = %107, %102
  %117 = phi i16 [ %115, %107 ], [ 32767, %102 ]
  %118 = icmp slt i16 %117, 8192
  %119 = icmp sgt i16 %117, -8192
  %120 = sext i16 %117 to i64
  %121 = shl nsw i64 %120, 2
  %122 = icmp slt i64 %121, 32767
  %123 = select i1 %122, i64 %121, i64 32767
  %124 = icmp sgt i64 %123, -32768
  %125 = select i1 %124, i64 %123, i64 -32768
  %126 = trunc i64 %125 to i16
  %127 = select i1 %118, i16 %126, i16 32767
  %128 = select i1 %119, i16 %127, i16 -32768
  %129 = add i16 %128, %90
  %130 = icmp slt i16 %129, 16384
  %131 = icmp sgt i16 %129, -16384
  %132 = sext i16 %129 to i64
  %133 = shl nsw i64 %132, 1
  %134 = icmp slt i64 %133, 32767
  %135 = select i1 %134, i64 %133, i64 32767
  %136 = icmp sgt i64 %135, -32768
  %137 = select i1 %136, i64 %135, i64 -32768
  %138 = trunc i64 %137 to i16
  %139 = select i1 %130, i16 %138, i16 32767
  %140 = select i1 %131, i16 %139, i16 -32768
  ret i16 %140
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i16 @_ZN8gemmlowp22exp_on_negative_valuesIsLi3EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE(i16) local_unnamed_addr #0 comdat {
  %2 = or i16 %0, -1024
  %3 = shl nsw i16 %2, 3
  %4 = add nsw i16 %3, 4096
  %5 = sext i16 %4 to i32
  %6 = mul nsw i32 %5, %5
  %7 = add nuw nsw i32 %6, 16384
  %8 = lshr i32 %7, 15
  %9 = trunc i32 %8 to i16
  %10 = shl nuw i32 %8, 16
  %11 = ashr exact i32 %10, 16
  %12 = mul nsw i32 %11, %5
  %13 = icmp sgt i32 %12, -1
  %14 = select i1 %13, i32 16384, i32 -16383
  %15 = add nsw i32 %14, %12
  %16 = sdiv i32 %15, 32768
  %17 = trunc i32 %16 to i16
  %18 = mul nsw i32 %11, %11
  %19 = add nuw nsw i32 %18, 16384
  %20 = lshr i32 %19, 15
  %21 = trunc i32 %20 to i16
  %22 = and i16 %21, 3
  %23 = lshr i32 %19, 30
  %24 = trunc i32 %23 to i16
  %25 = add nuw nsw i16 %24, 1
  %26 = ashr i16 %21, 2
  %27 = icmp ugt i16 %22, %25
  %28 = zext i1 %27 to i16
  %29 = add i16 %26, %17
  %30 = add i16 %29, %28
  %31 = sext i16 %30 to i32
  %32 = mul nsw i32 %31, 10923
  %33 = icmp sgt i16 %30, -1
  %34 = select i1 %33, i32 16384, i32 -16383
  %35 = add nsw i32 %34, %32
  %36 = sdiv i32 %35, 32768
  %37 = trunc i32 %36 to i16
  %38 = add i16 %37, %9
  %39 = and i16 %38, 1
  %40 = lshr i16 %38, 15
  %41 = ashr i16 %38, 1
  %42 = icmp ugt i16 %39, %40
  %43 = zext i1 %42 to i16
  %44 = add nsw i16 %41, %4
  %45 = add i16 %44, %43
  %46 = sext i16 %45 to i32
  %47 = mul nsw i32 %46, 28918
  %48 = icmp sgt i16 %45, -1
  %49 = select i1 %48, i32 16384, i32 -16383
  %50 = add nsw i32 %49, %47
  %51 = sdiv i32 %50, 32768
  %52 = shl i32 %51, 16
  %53 = ashr exact i32 %52, 16
  %54 = icmp slt i32 %53, 3849
  %55 = select i1 %54, i32 %53, i32 3849
  %56 = trunc i32 %55 to i16
  %57 = add nsw i16 %56, 28918
  %58 = sub i16 %2, %0
  %59 = sext i16 %57 to i32
  %60 = mul nsw i32 %59, 25520
  %61 = icmp sgt i16 %57, -1
  %62 = select i1 %61, i32 16384, i32 -16383
  %63 = add nsw i32 %62, %60
  %64 = sdiv i32 %63, 32768
  %65 = trunc i32 %64 to i16
  %66 = and i16 %58, 1024
  %67 = icmp eq i16 %66, 0
  %68 = select i1 %67, i16 %57, i16 %65
  %69 = sext i16 %68 to i32
  %70 = mul nsw i32 %69, 19875
  %71 = icmp sgt i16 %68, -1
  %72 = select i1 %71, i32 16384, i32 -16383
  %73 = add nsw i32 %72, %70
  %74 = sdiv i32 %73, 32768
  %75 = trunc i32 %74 to i16
  %76 = and i16 %58, 2048
  %77 = icmp eq i16 %76, 0
  %78 = select i1 %77, i16 %68, i16 %75
  %79 = sext i16 %78 to i32
  %80 = mul nsw i32 %79, 12055
  %81 = icmp sgt i16 %78, -1
  %82 = select i1 %81, i32 16384, i32 -16383
  %83 = add nsw i32 %82, %80
  %84 = sdiv i32 %83, 32768
  %85 = trunc i32 %84 to i16
  %86 = and i16 %58, 4096
  %87 = icmp eq i16 %86, 0
  %88 = select i1 %87, i16 %78, i16 %85
  %89 = sext i16 %88 to i32
  %90 = mul nsw i32 %89, 4435
  %91 = icmp sgt i16 %88, -1
  %92 = select i1 %91, i32 16384, i32 -16383
  %93 = add nsw i32 %92, %90
  %94 = sdiv i32 %93, 32768
  %95 = trunc i32 %94 to i16
  %96 = and i16 %58, 8192
  %97 = icmp eq i16 %96, 0
  %98 = select i1 %97, i16 %88, i16 %95
  %99 = sext i16 %98 to i32
  %100 = mul nsw i32 %99, 600
  %101 = icmp sgt i16 %98, -1
  %102 = select i1 %101, i32 16384, i32 -16383
  %103 = add nsw i32 %102, %100
  %104 = sdiv i32 %103, 32768
  %105 = trunc i32 %104 to i16
  %106 = and i16 %58, 16384
  %107 = icmp eq i16 %106, 0
  %108 = select i1 %107, i16 %98, i16 %105
  %109 = icmp eq i16 %0, 0
  %110 = select i1 %109, i16 32767, i16 %108
  ret i16 %110
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i16 @_ZN8gemmlowp40one_minus_x_over_one_plus_x_for_x_in_0_1IsEENS_10FixedPointIT_Li0EEES3_(i16) local_unnamed_addr #0 comdat {
  %2 = sext i16 %0 to i32
  %3 = add nsw i32 %2, 32767
  %4 = icmp sgt i32 %3, -1
  %5 = select i1 %4, i32 1, i32 -1
  %6 = add nsw i32 %5, %3
  %7 = sdiv i32 %6, 2
  %8 = trunc i32 %7 to i16
  %9 = icmp eq i16 %8, -32768
  %10 = shl i32 %7, 16
  %11 = ashr exact i32 %10, 16
  %12 = mul nsw i32 %11, -15420
  %13 = icmp slt i32 %10, 65536
  %14 = select i1 %13, i32 16384, i32 -16383
  %15 = add nsw i32 %14, %12
  %16 = sdiv i32 %15, 32768
  %17 = trunc i32 %16 to i16
  %18 = add nsw i16 %17, 23130
  %19 = icmp eq i16 %18, %8
  %20 = and i1 %9, %19
  br i1 %20, label %31, label %21

21:                                               ; preds = %1
  %22 = sext i16 %18 to i32
  %23 = mul nsw i32 %11, %22
  %24 = icmp sgt i32 %23, -1
  %25 = select i1 %24, i32 16384, i32 -16383
  %26 = add nsw i32 %25, %23
  %27 = sdiv i32 %26, 32768
  %28 = shl i32 %27, 16
  %29 = sub i32 536870912, %28
  %30 = ashr exact i32 %29, 16
  br label %31

31:                                               ; preds = %1, %21
  %32 = phi i32 [ %30, %21 ], [ -24575, %1 ]
  %33 = sext i16 %18 to i32
  %34 = mul nsw i32 %32, %33
  %35 = icmp sgt i32 %34, -1
  %36 = select i1 %35, i32 16384, i32 -16383
  %37 = add nsw i32 %36, %34
  %38 = sdiv i32 %37, 32768
  %39 = trunc i32 %38 to i16
  %40 = icmp slt i16 %39, 8192
  %41 = icmp sgt i16 %39, -8192
  %42 = sext i16 %39 to i64
  %43 = shl nsw i64 %42, 2
  %44 = icmp slt i64 %43, 32767
  %45 = select i1 %44, i64 %43, i64 32767
  %46 = icmp sgt i64 %45, -32768
  %47 = select i1 %46, i64 %45, i64 -32768
  %48 = trunc i64 %47 to i16
  %49 = select i1 %40, i16 %48, i16 32767
  %50 = select i1 %41, i16 %49, i16 -32768
  %51 = add i16 %50, %18
  %52 = icmp eq i16 %51, %8
  %53 = and i1 %9, %52
  br i1 %53, label %63, label %54

54:                                               ; preds = %31
  %55 = sext i16 %51 to i32
  %56 = mul nsw i32 %11, %55
  %57 = icmp sgt i32 %56, -1
  %58 = select i1 %57, i32 16384, i32 -16383
  %59 = add nsw i32 %58, %56
  %60 = sdiv i32 %59, 32768
  %61 = trunc i32 %60 to i16
  %62 = sub i16 8192, %61
  br label %63

63:                                               ; preds = %54, %31
  %64 = phi i16 [ %62, %54 ], [ -24575, %31 ]
  %65 = icmp eq i16 %51, %64
  %66 = icmp eq i16 %51, -32768
  %67 = and i1 %66, %65
  br i1 %67, label %77, label %68

68:                                               ; preds = %63
  %69 = sext i16 %64 to i32
  %70 = sext i16 %51 to i32
  %71 = mul nsw i32 %69, %70
  %72 = icmp sgt i32 %71, -1
  %73 = select i1 %72, i32 16384, i32 -16383
  %74 = add nsw i32 %73, %71
  %75 = sdiv i32 %74, 32768
  %76 = trunc i32 %75 to i16
  br label %77

77:                                               ; preds = %68, %63
  %78 = phi i16 [ %76, %68 ], [ 32767, %63 ]
  %79 = icmp slt i16 %78, 8192
  %80 = icmp sgt i16 %78, -8192
  %81 = sext i16 %78 to i64
  %82 = shl nsw i64 %81, 2
  %83 = icmp slt i64 %82, 32767
  %84 = select i1 %83, i64 %82, i64 32767
  %85 = icmp sgt i64 %84, -32768
  %86 = select i1 %85, i64 %84, i64 -32768
  %87 = trunc i64 %86 to i16
  %88 = select i1 %79, i16 %87, i16 32767
  %89 = select i1 %80, i16 %88, i16 -32768
  %90 = add i16 %89, %51
  %91 = icmp eq i16 %90, %8
  %92 = and i1 %9, %91
  br i1 %92, label %102, label %93

93:                                               ; preds = %77
  %94 = sext i16 %90 to i32
  %95 = mul nsw i32 %11, %94
  %96 = icmp sgt i32 %95, -1
  %97 = select i1 %96, i32 16384, i32 -16383
  %98 = add nsw i32 %97, %95
  %99 = sdiv i32 %98, 32768
  %100 = trunc i32 %99 to i16
  %101 = sub i16 8192, %100
  br label %102

102:                                              ; preds = %93, %77
  %103 = phi i16 [ %101, %93 ], [ -24575, %77 ]
  %104 = icmp eq i16 %90, %103
  %105 = icmp eq i16 %90, -32768
  %106 = and i1 %105, %104
  br i1 %106, label %116, label %107

107:                                              ; preds = %102
  %108 = sext i16 %103 to i32
  %109 = sext i16 %90 to i32
  %110 = mul nsw i32 %108, %109
  %111 = icmp sgt i32 %110, -1
  %112 = select i1 %111, i32 16384, i32 -16383
  %113 = add nsw i32 %112, %110
  %114 = sdiv i32 %113, 32768
  %115 = trunc i32 %114 to i16
  br label %116

116:                                              ; preds = %107, %102
  %117 = phi i16 [ %115, %107 ], [ 32767, %102 ]
  %118 = icmp slt i16 %117, 8192
  %119 = icmp sgt i16 %117, -8192
  %120 = sext i16 %117 to i64
  %121 = shl nsw i64 %120, 2
  %122 = icmp slt i64 %121, 32767
  %123 = select i1 %122, i64 %121, i64 32767
  %124 = icmp sgt i64 %123, -32768
  %125 = select i1 %124, i64 %123, i64 -32768
  %126 = trunc i64 %125 to i16
  %127 = select i1 %118, i16 %126, i16 32767
  %128 = select i1 %119, i16 %127, i16 -32768
  %129 = add i16 %128, %90
  %130 = add i16 %129, -8192
  %131 = icmp slt i16 %130, 8192
  %132 = icmp sgt i16 %130, -8192
  %133 = sext i16 %130 to i64
  %134 = shl nsw i64 %133, 2
  %135 = icmp slt i64 %134, 32767
  %136 = select i1 %135, i64 %134, i64 32767
  %137 = icmp sgt i64 %136, -32768
  %138 = select i1 %137, i64 %136, i64 -32768
  %139 = trunc i64 %138 to i16
  %140 = select i1 %131, i16 %139, i16 32767
  %141 = select i1 %132, i16 %140, i16 -32768
  ret i16 %141
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i16 @_ZN8gemmlowp22exp_on_negative_valuesIsLi1EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE(i16) local_unnamed_addr #0 comdat {
  %2 = or i16 %0, -4096
  %3 = shl nsw i16 %2, 1
  %4 = add nsw i16 %3, 4096
  %5 = sext i16 %4 to i32
  %6 = mul nsw i32 %5, %5
  %7 = add nuw nsw i32 %6, 16384
  %8 = lshr i32 %7, 15
  %9 = trunc i32 %8 to i16
  %10 = shl nuw i32 %8, 16
  %11 = ashr exact i32 %10, 16
  %12 = mul nsw i32 %11, %5
  %13 = icmp sgt i32 %12, -1
  %14 = select i1 %13, i32 16384, i32 -16383
  %15 = add nsw i32 %14, %12
  %16 = sdiv i32 %15, 32768
  %17 = trunc i32 %16 to i16
  %18 = mul nsw i32 %11, %11
  %19 = add nuw nsw i32 %18, 16384
  %20 = lshr i32 %19, 15
  %21 = trunc i32 %20 to i16
  %22 = and i16 %21, 3
  %23 = lshr i32 %19, 30
  %24 = trunc i32 %23 to i16
  %25 = add nuw nsw i16 %24, 1
  %26 = ashr i16 %21, 2
  %27 = icmp ugt i16 %22, %25
  %28 = zext i1 %27 to i16
  %29 = add i16 %26, %17
  %30 = add i16 %29, %28
  %31 = sext i16 %30 to i32
  %32 = mul nsw i32 %31, 10923
  %33 = icmp sgt i16 %30, -1
  %34 = select i1 %33, i32 16384, i32 -16383
  %35 = add nsw i32 %34, %32
  %36 = sdiv i32 %35, 32768
  %37 = trunc i32 %36 to i16
  %38 = add i16 %37, %9
  %39 = and i16 %38, 1
  %40 = lshr i16 %38, 15
  %41 = ashr i16 %38, 1
  %42 = icmp ugt i16 %39, %40
  %43 = zext i1 %42 to i16
  %44 = add nsw i16 %41, %4
  %45 = add i16 %44, %43
  %46 = sext i16 %45 to i32
  %47 = mul nsw i32 %46, 28918
  %48 = icmp sgt i16 %45, -1
  %49 = select i1 %48, i32 16384, i32 -16383
  %50 = add nsw i32 %49, %47
  %51 = sdiv i32 %50, 32768
  %52 = shl i32 %51, 16
  %53 = ashr exact i32 %52, 16
  %54 = icmp slt i32 %53, 3849
  %55 = select i1 %54, i32 %53, i32 3849
  %56 = trunc i32 %55 to i16
  %57 = add nsw i16 %56, 28918
  %58 = sub i16 %2, %0
  %59 = sext i16 %57 to i32
  %60 = mul nsw i32 %59, 25520
  %61 = icmp sgt i16 %57, -1
  %62 = select i1 %61, i32 16384, i32 -16383
  %63 = add nsw i32 %62, %60
  %64 = sdiv i32 %63, 32768
  %65 = trunc i32 %64 to i16
  %66 = and i16 %58, 4096
  %67 = icmp eq i16 %66, 0
  %68 = select i1 %67, i16 %57, i16 %65
  %69 = sext i16 %68 to i32
  %70 = mul nsw i32 %69, 19875
  %71 = icmp sgt i16 %68, -1
  %72 = select i1 %71, i32 16384, i32 -16383
  %73 = add nsw i32 %72, %70
  %74 = sdiv i32 %73, 32768
  %75 = trunc i32 %74 to i16
  %76 = and i16 %58, 8192
  %77 = icmp eq i16 %76, 0
  %78 = select i1 %77, i16 %68, i16 %75
  %79 = sext i16 %78 to i32
  %80 = mul nsw i32 %79, 12055
  %81 = icmp sgt i16 %78, -1
  %82 = select i1 %81, i32 16384, i32 -16383
  %83 = add nsw i32 %82, %80
  %84 = sdiv i32 %83, 32768
  %85 = trunc i32 %84 to i16
  %86 = and i16 %58, 16384
  %87 = icmp eq i16 %86, 0
  %88 = select i1 %87, i16 %78, i16 %85
  %89 = icmp eq i16 %0, 0
  %90 = select i1 %89, i16 32767, i16 %88
  ret i16 %90
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i16 @_ZN8gemmlowp22exp_on_negative_valuesIsLi2EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE(i16) local_unnamed_addr #0 comdat {
  %2 = or i16 %0, -2048
  %3 = shl nsw i16 %2, 2
  %4 = add nsw i16 %3, 4096
  %5 = sext i16 %4 to i32
  %6 = mul nsw i32 %5, %5
  %7 = add nuw nsw i32 %6, 16384
  %8 = lshr i32 %7, 15
  %9 = trunc i32 %8 to i16
  %10 = shl nuw i32 %8, 16
  %11 = ashr exact i32 %10, 16
  %12 = mul nsw i32 %11, %5
  %13 = icmp sgt i32 %12, -1
  %14 = select i1 %13, i32 16384, i32 -16383
  %15 = add nsw i32 %14, %12
  %16 = sdiv i32 %15, 32768
  %17 = trunc i32 %16 to i16
  %18 = mul nsw i32 %11, %11
  %19 = add nuw nsw i32 %18, 16384
  %20 = lshr i32 %19, 15
  %21 = trunc i32 %20 to i16
  %22 = and i16 %21, 3
  %23 = lshr i32 %19, 30
  %24 = trunc i32 %23 to i16
  %25 = add nuw nsw i16 %24, 1
  %26 = ashr i16 %21, 2
  %27 = icmp ugt i16 %22, %25
  %28 = zext i1 %27 to i16
  %29 = add i16 %26, %17
  %30 = add i16 %29, %28
  %31 = sext i16 %30 to i32
  %32 = mul nsw i32 %31, 10923
  %33 = icmp sgt i16 %30, -1
  %34 = select i1 %33, i32 16384, i32 -16383
  %35 = add nsw i32 %34, %32
  %36 = sdiv i32 %35, 32768
  %37 = trunc i32 %36 to i16
  %38 = add i16 %37, %9
  %39 = and i16 %38, 1
  %40 = lshr i16 %38, 15
  %41 = ashr i16 %38, 1
  %42 = icmp ugt i16 %39, %40
  %43 = zext i1 %42 to i16
  %44 = add nsw i16 %41, %4
  %45 = add i16 %44, %43
  %46 = sext i16 %45 to i32
  %47 = mul nsw i32 %46, 28918
  %48 = icmp sgt i16 %45, -1
  %49 = select i1 %48, i32 16384, i32 -16383
  %50 = add nsw i32 %49, %47
  %51 = sdiv i32 %50, 32768
  %52 = shl i32 %51, 16
  %53 = ashr exact i32 %52, 16
  %54 = icmp slt i32 %53, 3849
  %55 = select i1 %54, i32 %53, i32 3849
  %56 = trunc i32 %55 to i16
  %57 = add nsw i16 %56, 28918
  %58 = sub i16 %2, %0
  %59 = sext i16 %57 to i32
  %60 = mul nsw i32 %59, 25520
  %61 = icmp sgt i16 %57, -1
  %62 = select i1 %61, i32 16384, i32 -16383
  %63 = add nsw i32 %62, %60
  %64 = sdiv i32 %63, 32768
  %65 = trunc i32 %64 to i16
  %66 = and i16 %58, 2048
  %67 = icmp eq i16 %66, 0
  %68 = select i1 %67, i16 %57, i16 %65
  %69 = sext i16 %68 to i32
  %70 = mul nsw i32 %69, 19875
  %71 = icmp sgt i16 %68, -1
  %72 = select i1 %71, i32 16384, i32 -16383
  %73 = add nsw i32 %72, %70
  %74 = sdiv i32 %73, 32768
  %75 = trunc i32 %74 to i16
  %76 = and i16 %58, 4096
  %77 = icmp eq i16 %76, 0
  %78 = select i1 %77, i16 %68, i16 %75
  %79 = sext i16 %78 to i32
  %80 = mul nsw i32 %79, 12055
  %81 = icmp sgt i16 %78, -1
  %82 = select i1 %81, i32 16384, i32 -16383
  %83 = add nsw i32 %82, %80
  %84 = sdiv i32 %83, 32768
  %85 = trunc i32 %84 to i16
  %86 = and i16 %58, 8192
  %87 = icmp eq i16 %86, 0
  %88 = select i1 %87, i16 %78, i16 %85
  %89 = sext i16 %88 to i32
  %90 = mul nsw i32 %89, 4435
  %91 = icmp sgt i16 %88, -1
  %92 = select i1 %91, i32 16384, i32 -16383
  %93 = add nsw i32 %92, %90
  %94 = sdiv i32 %93, 32768
  %95 = trunc i32 %94 to i16
  %96 = and i16 %58, 16384
  %97 = icmp eq i16 %96, 0
  %98 = select i1 %97, i16 %88, i16 %95
  %99 = icmp eq i16 %0, 0
  %100 = select i1 %99, i16 32767, i16 %98
  ret i16 %100
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i16 @_ZN8gemmlowp22exp_on_negative_valuesIsLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE(i16) local_unnamed_addr #0 comdat {
  %2 = or i16 %0, -512
  %3 = shl nsw i16 %2, 4
  %4 = add nsw i16 %3, 4096
  %5 = sext i16 %4 to i32
  %6 = mul nsw i32 %5, %5
  %7 = add nuw nsw i32 %6, 16384
  %8 = lshr i32 %7, 15
  %9 = trunc i32 %8 to i16
  %10 = shl nuw i32 %8, 16
  %11 = ashr exact i32 %10, 16
  %12 = mul nsw i32 %11, %5
  %13 = icmp sgt i32 %12, -1
  %14 = select i1 %13, i32 16384, i32 -16383
  %15 = add nsw i32 %14, %12
  %16 = sdiv i32 %15, 32768
  %17 = trunc i32 %16 to i16
  %18 = mul nsw i32 %11, %11
  %19 = add nuw nsw i32 %18, 16384
  %20 = lshr i32 %19, 15
  %21 = trunc i32 %20 to i16
  %22 = and i16 %21, 3
  %23 = lshr i32 %19, 30
  %24 = trunc i32 %23 to i16
  %25 = add nuw nsw i16 %24, 1
  %26 = ashr i16 %21, 2
  %27 = icmp ugt i16 %22, %25
  %28 = zext i1 %27 to i16
  %29 = add i16 %26, %17
  %30 = add i16 %29, %28
  %31 = sext i16 %30 to i32
  %32 = mul nsw i32 %31, 10923
  %33 = icmp sgt i16 %30, -1
  %34 = select i1 %33, i32 16384, i32 -16383
  %35 = add nsw i32 %34, %32
  %36 = sdiv i32 %35, 32768
  %37 = trunc i32 %36 to i16
  %38 = add i16 %37, %9
  %39 = and i16 %38, 1
  %40 = lshr i16 %38, 15
  %41 = ashr i16 %38, 1
  %42 = icmp ugt i16 %39, %40
  %43 = zext i1 %42 to i16
  %44 = add nsw i16 %41, %4
  %45 = add i16 %44, %43
  %46 = sext i16 %45 to i32
  %47 = mul nsw i32 %46, 28918
  %48 = icmp sgt i16 %45, -1
  %49 = select i1 %48, i32 16384, i32 -16383
  %50 = add nsw i32 %49, %47
  %51 = sdiv i32 %50, 32768
  %52 = shl i32 %51, 16
  %53 = ashr exact i32 %52, 16
  %54 = icmp slt i32 %53, 3849
  %55 = select i1 %54, i32 %53, i32 3849
  %56 = trunc i32 %55 to i16
  %57 = add nsw i16 %56, 28918
  %58 = sub i16 %2, %0
  %59 = sext i16 %57 to i32
  %60 = mul nsw i32 %59, 25520
  %61 = icmp sgt i16 %57, -1
  %62 = select i1 %61, i32 16384, i32 -16383
  %63 = add nsw i32 %62, %60
  %64 = sdiv i32 %63, 32768
  %65 = trunc i32 %64 to i16
  %66 = and i16 %58, 512
  %67 = icmp eq i16 %66, 0
  %68 = select i1 %67, i16 %57, i16 %65
  %69 = sext i16 %68 to i32
  %70 = mul nsw i32 %69, 19875
  %71 = icmp sgt i16 %68, -1
  %72 = select i1 %71, i32 16384, i32 -16383
  %73 = add nsw i32 %72, %70
  %74 = sdiv i32 %73, 32768
  %75 = trunc i32 %74 to i16
  %76 = and i16 %58, 1024
  %77 = icmp eq i16 %76, 0
  %78 = select i1 %77, i16 %68, i16 %75
  %79 = sext i16 %78 to i32
  %80 = mul nsw i32 %79, 12055
  %81 = icmp sgt i16 %78, -1
  %82 = select i1 %81, i32 16384, i32 -16383
  %83 = add nsw i32 %82, %80
  %84 = sdiv i32 %83, 32768
  %85 = trunc i32 %84 to i16
  %86 = and i16 %58, 2048
  %87 = icmp eq i16 %86, 0
  %88 = select i1 %87, i16 %78, i16 %85
  %89 = sext i16 %88 to i32
  %90 = mul nsw i32 %89, 4435
  %91 = icmp sgt i16 %88, -1
  %92 = select i1 %91, i32 16384, i32 -16383
  %93 = add nsw i32 %92, %90
  %94 = sdiv i32 %93, 32768
  %95 = trunc i32 %94 to i16
  %96 = and i16 %58, 4096
  %97 = icmp eq i16 %96, 0
  %98 = select i1 %97, i16 %88, i16 %95
  %99 = sext i16 %98 to i32
  %100 = mul nsw i32 %99, 600
  %101 = icmp sgt i16 %98, -1
  %102 = select i1 %101, i32 16384, i32 -16383
  %103 = add nsw i32 %102, %100
  %104 = sdiv i32 %103, 32768
  %105 = trunc i32 %104 to i16
  %106 = and i16 %58, 8192
  %107 = icmp eq i16 %106, 0
  %108 = select i1 %107, i16 %98, i16 %105
  %109 = sext i16 %108 to i32
  %110 = mul nsw i32 %109, 11
  %111 = icmp sgt i16 %108, -1
  %112 = select i1 %111, i32 16384, i32 -16383
  %113 = add nsw i32 %112, %110
  %114 = sdiv i32 %113, 32768
  %115 = trunc i32 %114 to i16
  %116 = and i16 %58, 16384
  %117 = icmp eq i16 %116, 0
  %118 = select i1 %117, i16 %108, i16 %115
  %119 = icmp eq i16 %0, 0
  %120 = select i1 %119, i16 32767, i16 %118
  ret i16 %120
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i16 @_ZN8gemmlowp22exp_on_negative_valuesIsLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE(i16) local_unnamed_addr #0 comdat {
  %2 = or i16 %0, -256
  %3 = shl nsw i16 %2, 5
  %4 = add nsw i16 %3, 4096
  %5 = sext i16 %4 to i32
  %6 = mul nsw i32 %5, %5
  %7 = add nuw nsw i32 %6, 16384
  %8 = lshr i32 %7, 15
  %9 = trunc i32 %8 to i16
  %10 = shl nuw i32 %8, 16
  %11 = ashr exact i32 %10, 16
  %12 = mul nsw i32 %11, %5
  %13 = icmp sgt i32 %12, -1
  %14 = select i1 %13, i32 16384, i32 -16383
  %15 = add nsw i32 %14, %12
  %16 = sdiv i32 %15, 32768
  %17 = trunc i32 %16 to i16
  %18 = mul nsw i32 %11, %11
  %19 = add nuw nsw i32 %18, 16384
  %20 = lshr i32 %19, 15
  %21 = trunc i32 %20 to i16
  %22 = and i16 %21, 3
  %23 = lshr i32 %19, 30
  %24 = trunc i32 %23 to i16
  %25 = add nuw nsw i16 %24, 1
  %26 = ashr i16 %21, 2
  %27 = icmp ugt i16 %22, %25
  %28 = zext i1 %27 to i16
  %29 = add i16 %26, %17
  %30 = add i16 %29, %28
  %31 = sext i16 %30 to i32
  %32 = mul nsw i32 %31, 10923
  %33 = icmp sgt i16 %30, -1
  %34 = select i1 %33, i32 16384, i32 -16383
  %35 = add nsw i32 %34, %32
  %36 = sdiv i32 %35, 32768
  %37 = trunc i32 %36 to i16
  %38 = add i16 %37, %9
  %39 = and i16 %38, 1
  %40 = lshr i16 %38, 15
  %41 = ashr i16 %38, 1
  %42 = icmp ugt i16 %39, %40
  %43 = zext i1 %42 to i16
  %44 = add nsw i16 %41, %4
  %45 = add i16 %44, %43
  %46 = sext i16 %45 to i32
  %47 = mul nsw i32 %46, 28918
  %48 = icmp sgt i16 %45, -1
  %49 = select i1 %48, i32 16384, i32 -16383
  %50 = add nsw i32 %49, %47
  %51 = sdiv i32 %50, 32768
  %52 = shl i32 %51, 16
  %53 = ashr exact i32 %52, 16
  %54 = icmp slt i32 %53, 3849
  %55 = select i1 %54, i32 %53, i32 3849
  %56 = trunc i32 %55 to i16
  %57 = add nsw i16 %56, 28918
  %58 = sub i16 %2, %0
  %59 = sext i16 %57 to i32
  %60 = mul nsw i32 %59, 25520
  %61 = icmp sgt i16 %57, -1
  %62 = select i1 %61, i32 16384, i32 -16383
  %63 = add nsw i32 %62, %60
  %64 = sdiv i32 %63, 32768
  %65 = trunc i32 %64 to i16
  %66 = and i16 %58, 256
  %67 = icmp eq i16 %66, 0
  %68 = select i1 %67, i16 %57, i16 %65
  %69 = sext i16 %68 to i32
  %70 = mul nsw i32 %69, 19875
  %71 = icmp sgt i16 %68, -1
  %72 = select i1 %71, i32 16384, i32 -16383
  %73 = add nsw i32 %72, %70
  %74 = sdiv i32 %73, 32768
  %75 = trunc i32 %74 to i16
  %76 = and i16 %58, 512
  %77 = icmp eq i16 %76, 0
  %78 = select i1 %77, i16 %68, i16 %75
  %79 = sext i16 %78 to i32
  %80 = mul nsw i32 %79, 12055
  %81 = icmp sgt i16 %78, -1
  %82 = select i1 %81, i32 16384, i32 -16383
  %83 = add nsw i32 %82, %80
  %84 = sdiv i32 %83, 32768
  %85 = trunc i32 %84 to i16
  %86 = and i16 %58, 1024
  %87 = icmp eq i16 %86, 0
  %88 = select i1 %87, i16 %78, i16 %85
  %89 = sext i16 %88 to i32
  %90 = mul nsw i32 %89, 4435
  %91 = icmp sgt i16 %88, -1
  %92 = select i1 %91, i32 16384, i32 -16383
  %93 = add nsw i32 %92, %90
  %94 = sdiv i32 %93, 32768
  %95 = trunc i32 %94 to i16
  %96 = and i16 %58, 2048
  %97 = icmp eq i16 %96, 0
  %98 = select i1 %97, i16 %88, i16 %95
  %99 = sext i16 %98 to i32
  %100 = mul nsw i32 %99, 600
  %101 = icmp sgt i16 %98, -1
  %102 = select i1 %101, i32 16384, i32 -16383
  %103 = add nsw i32 %102, %100
  %104 = sdiv i32 %103, 32768
  %105 = trunc i32 %104 to i16
  %106 = and i16 %58, 4096
  %107 = icmp eq i16 %106, 0
  %108 = select i1 %107, i16 %98, i16 %105
  %109 = sext i16 %108 to i32
  %110 = mul nsw i32 %109, 11
  %111 = icmp sgt i16 %108, -1
  %112 = select i1 %111, i32 16384, i32 -16383
  %113 = add nsw i32 %112, %110
  %114 = sdiv i32 %113, 32768
  %115 = trunc i32 %114 to i16
  %116 = and i16 %58, 8192
  %117 = icmp eq i16 %116, 0
  %118 = select i1 %117, i16 %108, i16 %115
  %119 = shl i16 %58, 1
  %120 = ashr i16 %119, 15
  %121 = xor i16 %120, -1
  %122 = and i16 %118, %121
  %123 = icmp eq i16 %0, 0
  %124 = select i1 %123, i16 32767, i16 %122
  ret i16 %124
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i16 @_ZN8gemmlowp22exp_on_negative_valuesIsLi6EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE(i16) local_unnamed_addr #0 comdat {
  %2 = or i16 %0, -128
  %3 = shl nsw i16 %2, 6
  %4 = add nsw i16 %3, 4096
  %5 = sext i16 %4 to i32
  %6 = mul nsw i32 %5, %5
  %7 = add nuw nsw i32 %6, 16384
  %8 = lshr i32 %7, 15
  %9 = trunc i32 %8 to i16
  %10 = shl nuw i32 %8, 16
  %11 = ashr exact i32 %10, 16
  %12 = mul nsw i32 %11, %5
  %13 = icmp sgt i32 %12, -1
  %14 = select i1 %13, i32 16384, i32 -16383
  %15 = add nsw i32 %14, %12
  %16 = sdiv i32 %15, 32768
  %17 = trunc i32 %16 to i16
  %18 = mul nsw i32 %11, %11
  %19 = add nuw nsw i32 %18, 16384
  %20 = lshr i32 %19, 15
  %21 = trunc i32 %20 to i16
  %22 = and i16 %21, 3
  %23 = lshr i32 %19, 30
  %24 = trunc i32 %23 to i16
  %25 = add nuw nsw i16 %24, 1
  %26 = ashr i16 %21, 2
  %27 = icmp ugt i16 %22, %25
  %28 = zext i1 %27 to i16
  %29 = add i16 %26, %17
  %30 = add i16 %29, %28
  %31 = sext i16 %30 to i32
  %32 = mul nsw i32 %31, 10923
  %33 = icmp sgt i16 %30, -1
  %34 = select i1 %33, i32 16384, i32 -16383
  %35 = add nsw i32 %34, %32
  %36 = sdiv i32 %35, 32768
  %37 = trunc i32 %36 to i16
  %38 = add i16 %37, %9
  %39 = and i16 %38, 1
  %40 = lshr i16 %38, 15
  %41 = ashr i16 %38, 1
  %42 = icmp ugt i16 %39, %40
  %43 = zext i1 %42 to i16
  %44 = add nsw i16 %41, %4
  %45 = add i16 %44, %43
  %46 = sext i16 %45 to i32
  %47 = mul nsw i32 %46, 28918
  %48 = icmp sgt i16 %45, -1
  %49 = select i1 %48, i32 16384, i32 -16383
  %50 = add nsw i32 %49, %47
  %51 = sdiv i32 %50, 32768
  %52 = shl i32 %51, 16
  %53 = ashr exact i32 %52, 16
  %54 = icmp slt i32 %53, 3849
  %55 = select i1 %54, i32 %53, i32 3849
  %56 = trunc i32 %55 to i16
  %57 = add nsw i16 %56, 28918
  %58 = sub i16 %2, %0
  %59 = trunc i16 %58 to i8
  %60 = sext i16 %57 to i32
  %61 = mul nsw i32 %60, 25520
  %62 = icmp sgt i16 %57, -1
  %63 = select i1 %62, i32 16384, i32 -16383
  %64 = add nsw i32 %63, %61
  %65 = sdiv i32 %64, 32768
  %66 = trunc i32 %65 to i16
  %67 = icmp slt i8 %59, 0
  %68 = select i1 %67, i16 %66, i16 %57
  %69 = sext i16 %68 to i32
  %70 = mul nsw i32 %69, 19875
  %71 = icmp sgt i16 %68, -1
  %72 = select i1 %71, i32 16384, i32 -16383
  %73 = add nsw i32 %72, %70
  %74 = sdiv i32 %73, 32768
  %75 = trunc i32 %74 to i16
  %76 = and i16 %58, 256
  %77 = icmp eq i16 %76, 0
  %78 = select i1 %77, i16 %68, i16 %75
  %79 = sext i16 %78 to i32
  %80 = mul nsw i32 %79, 12055
  %81 = icmp sgt i16 %78, -1
  %82 = select i1 %81, i32 16384, i32 -16383
  %83 = add nsw i32 %82, %80
  %84 = sdiv i32 %83, 32768
  %85 = trunc i32 %84 to i16
  %86 = and i16 %58, 512
  %87 = icmp eq i16 %86, 0
  %88 = select i1 %87, i16 %78, i16 %85
  %89 = sext i16 %88 to i32
  %90 = mul nsw i32 %89, 4435
  %91 = icmp sgt i16 %88, -1
  %92 = select i1 %91, i32 16384, i32 -16383
  %93 = add nsw i32 %92, %90
  %94 = sdiv i32 %93, 32768
  %95 = trunc i32 %94 to i16
  %96 = and i16 %58, 1024
  %97 = icmp eq i16 %96, 0
  %98 = select i1 %97, i16 %88, i16 %95
  %99 = sext i16 %98 to i32
  %100 = mul nsw i32 %99, 600
  %101 = icmp sgt i16 %98, -1
  %102 = select i1 %101, i32 16384, i32 -16383
  %103 = add nsw i32 %102, %100
  %104 = sdiv i32 %103, 32768
  %105 = trunc i32 %104 to i16
  %106 = and i16 %58, 2048
  %107 = icmp eq i16 %106, 0
  %108 = select i1 %107, i16 %98, i16 %105
  %109 = sext i16 %108 to i32
  %110 = mul nsw i32 %109, 11
  %111 = icmp sgt i16 %108, -1
  %112 = select i1 %111, i32 16384, i32 -16383
  %113 = add nsw i32 %112, %110
  %114 = sdiv i32 %113, 32768
  %115 = trunc i32 %114 to i16
  %116 = and i16 %58, 4096
  %117 = icmp eq i16 %116, 0
  %118 = select i1 %117, i16 %108, i16 %115
  %119 = shl i16 %58, 2
  %120 = ashr i16 %119, 15
  %121 = xor i16 %120, -1
  %122 = and i16 %118, %121
  %123 = icmp sgt i16 %0, -16385
  %124 = select i1 %123, i16 %122, i16 0
  %125 = icmp eq i16 %0, 0
  %126 = select i1 %125, i16 32767, i16 %124
  ret i16 %126
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i16 @_ZN8gemmlowp22exp_on_negative_valuesIsLi7EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE(i16) local_unnamed_addr #0 comdat {
  %2 = or i16 %0, -64
  %3 = shl nsw i16 %2, 7
  %4 = add nsw i16 %3, 4096
  %5 = sext i16 %4 to i32
  %6 = mul nsw i32 %5, %5
  %7 = add nuw nsw i32 %6, 16384
  %8 = lshr i32 %7, 15
  %9 = trunc i32 %8 to i16
  %10 = shl nuw i32 %8, 16
  %11 = ashr exact i32 %10, 16
  %12 = mul nsw i32 %11, %5
  %13 = icmp sgt i32 %12, -1
  %14 = select i1 %13, i32 16384, i32 -16383
  %15 = add nsw i32 %14, %12
  %16 = sdiv i32 %15, 32768
  %17 = trunc i32 %16 to i16
  %18 = mul nsw i32 %11, %11
  %19 = add nuw nsw i32 %18, 16384
  %20 = lshr i32 %19, 15
  %21 = trunc i32 %20 to i16
  %22 = and i16 %21, 3
  %23 = lshr i32 %19, 30
  %24 = trunc i32 %23 to i16
  %25 = add nuw nsw i16 %24, 1
  %26 = ashr i16 %21, 2
  %27 = icmp ugt i16 %22, %25
  %28 = zext i1 %27 to i16
  %29 = add i16 %26, %17
  %30 = add i16 %29, %28
  %31 = sext i16 %30 to i32
  %32 = mul nsw i32 %31, 10923
  %33 = icmp sgt i16 %30, -1
  %34 = select i1 %33, i32 16384, i32 -16383
  %35 = add nsw i32 %34, %32
  %36 = sdiv i32 %35, 32768
  %37 = trunc i32 %36 to i16
  %38 = add i16 %37, %9
  %39 = and i16 %38, 1
  %40 = lshr i16 %38, 15
  %41 = ashr i16 %38, 1
  %42 = icmp ugt i16 %39, %40
  %43 = zext i1 %42 to i16
  %44 = add nsw i16 %41, %4
  %45 = add i16 %44, %43
  %46 = sext i16 %45 to i32
  %47 = mul nsw i32 %46, 28918
  %48 = icmp sgt i16 %45, -1
  %49 = select i1 %48, i32 16384, i32 -16383
  %50 = add nsw i32 %49, %47
  %51 = sdiv i32 %50, 32768
  %52 = shl i32 %51, 16
  %53 = ashr exact i32 %52, 16
  %54 = icmp slt i32 %53, 3849
  %55 = select i1 %54, i32 %53, i32 3849
  %56 = trunc i32 %55 to i16
  %57 = add nsw i16 %56, 28918
  %58 = sub i16 %2, %0
  %59 = sext i16 %57 to i32
  %60 = mul nsw i32 %59, 25520
  %61 = icmp sgt i16 %57, -1
  %62 = select i1 %61, i32 16384, i32 -16383
  %63 = add nsw i32 %62, %60
  %64 = sdiv i32 %63, 32768
  %65 = trunc i32 %64 to i16
  %66 = and i16 %58, 64
  %67 = icmp eq i16 %66, 0
  %68 = select i1 %67, i16 %57, i16 %65
  %69 = trunc i16 %58 to i8
  %70 = sext i16 %68 to i32
  %71 = mul nsw i32 %70, 19875
  %72 = icmp sgt i16 %68, -1
  %73 = select i1 %72, i32 16384, i32 -16383
  %74 = add nsw i32 %73, %71
  %75 = sdiv i32 %74, 32768
  %76 = trunc i32 %75 to i16
  %77 = icmp slt i8 %69, 0
  %78 = select i1 %77, i16 %76, i16 %68
  %79 = sext i16 %78 to i32
  %80 = mul nsw i32 %79, 12055
  %81 = icmp sgt i16 %78, -1
  %82 = select i1 %81, i32 16384, i32 -16383
  %83 = add nsw i32 %82, %80
  %84 = sdiv i32 %83, 32768
  %85 = trunc i32 %84 to i16
  %86 = and i16 %58, 256
  %87 = icmp eq i16 %86, 0
  %88 = select i1 %87, i16 %78, i16 %85
  %89 = sext i16 %88 to i32
  %90 = mul nsw i32 %89, 4435
  %91 = icmp sgt i16 %88, -1
  %92 = select i1 %91, i32 16384, i32 -16383
  %93 = add nsw i32 %92, %90
  %94 = sdiv i32 %93, 32768
  %95 = trunc i32 %94 to i16
  %96 = and i16 %58, 512
  %97 = icmp eq i16 %96, 0
  %98 = select i1 %97, i16 %88, i16 %95
  %99 = sext i16 %98 to i32
  %100 = mul nsw i32 %99, 600
  %101 = icmp sgt i16 %98, -1
  %102 = select i1 %101, i32 16384, i32 -16383
  %103 = add nsw i32 %102, %100
  %104 = sdiv i32 %103, 32768
  %105 = trunc i32 %104 to i16
  %106 = and i16 %58, 1024
  %107 = icmp eq i16 %106, 0
  %108 = select i1 %107, i16 %98, i16 %105
  %109 = sext i16 %108 to i32
  %110 = mul nsw i32 %109, 11
  %111 = icmp sgt i16 %108, -1
  %112 = select i1 %111, i32 16384, i32 -16383
  %113 = add nsw i32 %112, %110
  %114 = sdiv i32 %113, 32768
  %115 = trunc i32 %114 to i16
  %116 = and i16 %58, 2048
  %117 = icmp eq i16 %116, 0
  %118 = select i1 %117, i16 %108, i16 %115
  %119 = shl i16 %58, 3
  %120 = ashr i16 %119, 15
  %121 = xor i16 %120, -1
  %122 = and i16 %118, %121
  %123 = icmp sgt i16 %0, -8193
  %124 = select i1 %123, i16 %122, i16 0
  %125 = icmp eq i16 %0, 0
  %126 = select i1 %125, i16 32767, i16 %124
  ret i16 %126
}

declare double @ldexp(double, i32) local_unnamed_addr

; Function Attrs: nounwind readnone speculatable
declare <4 x float> @llvm.round.v4f32(<4 x float>) #2

; Function Attrs: nounwind readnone speculatable
declare <2 x double> @llvm.fabs.v2f64(<2 x double>) #2

; Function Attrs: nounwind readnone speculatable
declare <4 x double> @llvm.round.v4f64(<4 x double>) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inaccessiblemem_or_argmemonly nounwind }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !8}
!10 = !{!11}
!11 = distinct !{!11, !12}
!12 = distinct !{!12, !"LVerDomain"}
!13 = !{!14}
!14 = distinct !{!14, !12}
!15 = distinct !{!15, !8}
!16 = distinct !{!16, !8}
!17 = !{!18}
!18 = distinct !{!18, !19}
!19 = distinct !{!19, !"LVerDomain"}
!20 = !{!21}
!21 = distinct !{!21, !19}
!22 = !{!23}
!23 = distinct !{!23, !19}
!24 = !{!18, !21}
!25 = distinct !{!25, !8}
!26 = distinct !{!26, !8}
!27 = distinct !{!27, !28}
!28 = !{!"llvm.loop.unroll.disable"}
!29 = distinct !{!29, !8}
!30 = distinct !{!30, !31, !8}
!31 = !{!"llvm.loop.unroll.runtime.disable"}
!32 = !{!33, !35, !36}
!33 = distinct !{!33, !34, !"_ZN6tflite12tensor_utils43PortableMatrixBatchVectorMultiplyAccumulateEPKaiiS2_PKfiPf: argument 0"}
!34 = distinct !{!34, !"_ZN6tflite12tensor_utils43PortableMatrixBatchVectorMultiplyAccumulateEPKaiiS2_PKfiPf"}
!35 = distinct !{!35, !34, !"_ZN6tflite12tensor_utils43PortableMatrixBatchVectorMultiplyAccumulateEPKaiiS2_PKfiPf: argument 1"}
!36 = distinct !{!36, !34, !"_ZN6tflite12tensor_utils43PortableMatrixBatchVectorMultiplyAccumulateEPKaiiS2_PKfiPf: argument 2"}
!37 = !{!35, !36}
!38 = !{!33}
!39 = !{!35}
!40 = !{!33, !36}
!41 = distinct !{!41, !8}
!42 = !{!36}
!43 = !{!33, !35}
!44 = distinct !{!44, !31, !8}
!45 = !{i8 0, i8 2}
!46 = distinct !{!46, !28}
!47 = distinct !{!47, !28}
!48 = distinct !{!48, !8}
!49 = distinct !{!49, !31, !8}
!50 = distinct !{!50, !28}
!51 = distinct !{!51, !8}
!52 = distinct !{!52, !31, !8}
!53 = distinct !{!53, !8}
!54 = distinct !{!54, !31, !8}
!55 = distinct !{!55, !8}
!56 = distinct !{!56, !31, !8}
!57 = distinct !{!57, !28}
!58 = !{i32 0, i32 33}
!59 = !{!60}
!60 = distinct !{!60, !61}
!61 = distinct !{!61, !"LVerDomain"}
!62 = !{!63}
!63 = distinct !{!63, !61}
!64 = !{!65}
!65 = distinct !{!65, !61}
!66 = !{!67}
!67 = distinct !{!67, !61}
!68 = !{!60, !63, !65}
!69 = distinct !{!69, !8}
!70 = distinct !{!70, !8}
!71 = distinct !{!71, !8}
!72 = distinct !{!72, !31, !8}
!73 = !{!74}
!74 = distinct !{!74, !75}
!75 = distinct !{!75, !"LVerDomain"}
!76 = !{!77}
!77 = distinct !{!77, !75}
!78 = !{!79}
!79 = distinct !{!79, !75}
!80 = !{!74, !77}
!81 = distinct !{!81, !8}
!82 = distinct !{!82, !8}
!83 = !{!84}
!84 = distinct !{!84, !85}
!85 = distinct !{!85, !"LVerDomain"}
!86 = !{!87}
!87 = distinct !{!87, !85}
!88 = !{!89}
!89 = distinct !{!89, !85}
!90 = !{!84, !87}
!91 = distinct !{!91, !8}
!92 = distinct !{!92, !8}
!93 = distinct !{!93, !28}
!94 = distinct !{!94, !8}
!95 = distinct !{!95, !31, !8}
!96 = distinct !{!96, !28}
!97 = !{!98}
!98 = distinct !{!98, !99}
!99 = distinct !{!99, !"LVerDomain"}
!100 = !{!101}
!101 = distinct !{!101, !99}
!102 = distinct !{!102, !8}
!103 = distinct !{!103, !8}
!104 = distinct !{!104, !28}
!105 = !{!106}
!106 = distinct !{!106, !107}
!107 = distinct !{!107, !"LVerDomain"}
!108 = !{!109}
!109 = distinct !{!109, !107}
!110 = distinct !{!110, !8}
!111 = distinct !{!111, !8}
!112 = distinct !{!112, !28}
!113 = !{!114}
!114 = distinct !{!114, !115}
!115 = distinct !{!115, !"LVerDomain"}
!116 = !{!117}
!117 = distinct !{!117, !115}
!118 = distinct !{!118, !8}
!119 = distinct !{!119, !8}
!120 = distinct !{!120, !28}
!121 = !{!122}
!122 = distinct !{!122, !123}
!123 = distinct !{!123, !"LVerDomain"}
!124 = !{!125}
!125 = distinct !{!125, !123}
!126 = distinct !{!126, !8}
!127 = distinct !{!127, !8}
!128 = distinct !{!128, !28}
!129 = distinct !{!129, !28}
!130 = distinct !{!130, !28}
!131 = distinct !{!131, !28}
!132 = distinct !{!132, !28}
!133 = !{!134}
!134 = distinct !{!134, !135}
!135 = distinct !{!135, !"LVerDomain"}
!136 = !{!137}
!137 = distinct !{!137, !135}
!138 = distinct !{!138, !8}
!139 = distinct !{!139, !8}
