; ModuleID = '../../ui/gfx/animation/slide_animation.cc'
source_filename = "../../ui/gfx/animation/slide_animation.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.gfx::SlideAnimation" = type { %"class.gfx::LinearAnimation.base", %"class.gfx::AnimationDelegate"*, i32, %"class.absl::optional", double, double, double, %"class.base::TimeDelta", double }
%"class.gfx::LinearAnimation.base" = type <{ %"class.gfx::Animation", %"class.base::TimeDelta", double, i8 }>
%"class.gfx::Animation" = type { %"class.gfx::AnimationContainerElement", %"class.base::TimeDelta", i8, %"class.gfx::AnimationDelegate"*, %class.scoped_refptr, %"class.base::TimeTicks" }
%"class.gfx::AnimationContainerElement" = type { i32 (...)** }
%class.scoped_refptr = type { %"class.gfx::AnimationContainer"* }
%"class.gfx::AnimationContainer" = type opaque
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { i32 }
%"class.base::TimeDelta" = type { i64 }
%"class.gfx::AnimationDelegate" = type { i32 (...)** }
%"class.gfx::LinearAnimation" = type <{ %"class.gfx::Animation", %"class.base::TimeDelta", double, i8, [7 x i8] }>

@_ZN3gfx15LinearAnimation17kDefaultFrameRateE = external local_unnamed_addr constant i32, align 4
@_ZTVN3gfx14SlideAnimationE = hidden unnamed_addr constant { [16 x i8*] } { [16 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.gfx::Animation"*, i64)* @_ZN3gfx9Animation12SetStartTimeEN4base9TimeTicksE to i8*), i8* bitcast (void (%"class.gfx::LinearAnimation"*, i64)* @_ZN3gfx15LinearAnimation4StepEN4base9TimeTicksE to i8*), i8* bitcast (i64 (%"class.gfx::Animation"*)* @_ZNK3gfx9Animation16GetTimerIntervalEv to i8*), i8* bitcast (void (%"class.gfx::SlideAnimation"*)* @_ZN3gfx14SlideAnimationD2Ev to i8*), i8* bitcast (void (%"class.gfx::SlideAnimation"*)* @_ZN3gfx14SlideAnimationD0Ev to i8*), i8* bitcast (double (%"class.gfx::SlideAnimation"*)* @_ZNK3gfx14SlideAnimation15GetCurrentValueEv to i8*), i8* bitcast (void (%"class.gfx::LinearAnimation"*)* @_ZN3gfx15LinearAnimation16AnimationStartedEv to i8*), i8* bitcast (void (%"class.gfx::LinearAnimation"*)* @_ZN3gfx15LinearAnimation16AnimationStoppedEv to i8*), i8* bitcast (i1 (%"class.gfx::LinearAnimation"*)* @_ZN3gfx15LinearAnimation26ShouldSendCanceledFromStopEv to i8*), i8* bitcast (void (%"class.gfx::SlideAnimation"*, double)* @_ZN3gfx14SlideAnimation14AnimateToStateEd to i8*), i8* bitcast (void (%"class.gfx::SlideAnimation"*, double)* @_ZN3gfx14SlideAnimation5ResetEd to i8*), i8* bitcast (void (%"class.gfx::SlideAnimation"*)* @_ZN3gfx14SlideAnimation4ShowEv to i8*), i8* bitcast (void (%"class.gfx::SlideAnimation"*)* @_ZN3gfx14SlideAnimation4HideEv to i8*), i8* bitcast (void (%"class.gfx::SlideAnimation"*, i64)* @_ZN3gfx14SlideAnimation16SetSlideDurationEN4base9TimeDeltaE to i8*)] }, align 8

@_ZN3gfx14SlideAnimationC1EPNS_17AnimationDelegateE = hidden unnamed_addr alias void (%"class.gfx::SlideAnimation"*, %"class.gfx::AnimationDelegate"*), void (%"class.gfx::SlideAnimation"*, %"class.gfx::AnimationDelegate"*)* @_ZN3gfx14SlideAnimationC2EPNS_17AnimationDelegateE
@_ZN3gfx14SlideAnimationD1Ev = hidden unnamed_addr alias void (%"class.gfx::SlideAnimation"*), void (%"class.gfx::SlideAnimation"*)* @_ZN3gfx14SlideAnimationD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx14SlideAnimationC2EPNS_17AnimationDelegateE(%"class.gfx::SlideAnimation"*, %"class.gfx::AnimationDelegate"*) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.gfx::SlideAnimation"* %0 to %"class.gfx::LinearAnimation"*
  %4 = load i32, i32* @_ZN3gfx15LinearAnimation17kDefaultFrameRateE, align 4
  tail call void @_ZN3gfx15LinearAnimationC2EPNS_17AnimationDelegateEi(%"class.gfx::LinearAnimation"* %3, %"class.gfx::AnimationDelegate"* %1, i32 %4) #8
  %5 = getelementptr inbounds %"class.gfx::SlideAnimation", %"class.gfx::SlideAnimation"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVN3gfx14SlideAnimationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.gfx::SlideAnimation", %"class.gfx::SlideAnimation"* %0, i64 0, i32 1
  store %"class.gfx::AnimationDelegate"* %1, %"class.gfx::AnimationDelegate"** %6, align 8
  %7 = getelementptr inbounds %"class.gfx::SlideAnimation", %"class.gfx::SlideAnimation"* %0, i64 0, i32 2
  store i32 1, i32* %7, align 8
  %8 = getelementptr inbounds %"class.gfx::SlideAnimation", %"class.gfx::SlideAnimation"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %8, align 4
  %9 = getelementptr inbounds %"class.gfx::SlideAnimation", %"class.gfx::SlideAnimation"* %0, i64 0, i32 4
  %10 = getelementptr inbounds %"class.gfx::SlideAnimation", %"class.gfx::SlideAnimation"* %0, i64 0, i32 7, i32 0
  %11 = bitcast double* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 24, i1 false)
  store i64 120000, i64* %10, align 8
  %12 = getelementptr inbounds %"class.gfx::SlideAnimation", %"class.gfx::SlideAnimation"* %0, i64 0, i32 8
  store double 1.000000e+00, double* %12, align 8
  ret void
}

declare void @_ZN3gfx15LinearAnimationC2EPNS_17AnimationDelegateEi(%"class.gfx::LinearAnimation"*, %"class.gfx::AnimationDelegate"*, i32) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN3gfx9AnimationD2Ev(%"class.gfx::Animation"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx14SlideAnimationD2Ev(%"class.gfx::SlideAnimation"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.gfx::SlideAnimation", %"class.gfx::SlideAnimation"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN3gfx9AnimationD2Ev(%"class.gfx::Animation"* %2) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx14SlideAnimationD0Ev(%"class.gfx::SlideAnimation"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.gfx::SlideAnimation", %"class.gfx::SlideAnimation"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN3gfx9AnimationD2Ev(%"class.gfx::Animation"* %2) #8
  %3 = bitcast %"class.gfx::SlideAnimation"* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #9
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx14SlideAnimation5ResetEd(%"class.gfx::SlideAnimation"*, double) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.gfx::SlideAnimation", %"class.gfx::SlideAnimation"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %3, align 4
  %4 = getelementptr inbounds %"class.gfx::SlideAnimation", %"class.gfx::SlideAnimation"* %0, i64 0, i32 6
  store double %1, double* %4, align 8
  %5 = getelementptr inbounds %"class.gfx::SlideAnimation", %"class.gfx::SlideAnimation"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN3gfx9Animation4StopEv(%"class.gfx::Animation"* %5) #8
  ret void
}

declare void @_ZN3gfx9Animation4StopEv(%"class.gfx::Animation"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx14SlideAnimation4ShowEv(%"class.gfx::SlideAnimation"*) unnamed_addr #0 align 2 {
  tail call void @_ZN3gfx14SlideAnimation14BeginAnimatingENS0_9DirectionE(%"class.gfx::SlideAnimation"* %0, i32 0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx14SlideAnimation14BeginAnimatingENS0_9DirectionE(%"class.gfx::SlideAnimation"*, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.gfx::SlideAnimation", %"class.gfx::SlideAnimation"* %0, i64 0, i32 3
  %4 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i8, i8* %4, align 4, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %11, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.gfx::SlideAnimation", %"class.gfx::SlideAnimation"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, %1
  br i1 %10, label %75, label %11

11:                                               ; preds = %2, %7
  %12 = bitcast %"class.absl::optional"* %3 to i64*
  %13 = zext i32 %1 to i64
  %14 = shl nuw i64 %13, 32
  %15 = or i64 %14, 1
  store i64 %15, i64* %12, align 4
  %16 = getelementptr inbounds %"class.gfx::SlideAnimation", %"class.gfx::SlideAnimation"* %0, i64 0, i32 6
  %17 = bitcast double* %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %"class.gfx::SlideAnimation", %"class.gfx::SlideAnimation"* %0, i64 0, i32 4
  %20 = bitcast double* %19 to i64*
  store i64 %18, i64* %20, align 8
  %21 = bitcast i64 %18 to double
  %22 = icmp eq i32 %1, 0
  %23 = select i1 %22, double 1.000000e+00, double 0.000000e+00
  %24 = getelementptr inbounds %"class.gfx::SlideAnimation", %"class.gfx::SlideAnimation"* %0, i64 0, i32 5
  store double %23, double* %24, align 8
  %25 = getelementptr inbounds %"class.gfx::SlideAnimation", %"class.gfx::SlideAnimation"* %0, i64 0, i32 7, i32 0
  %26 = load i64, i64* %25, align 8
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %28, label %47

28:                                               ; preds = %11
  %29 = bitcast %"class.gfx::SlideAnimation"* %0 to void (%"class.gfx::SlideAnimation"*, double)***
  %30 = load void (%"class.gfx::SlideAnimation"*, double)**, void (%"class.gfx::SlideAnimation"*, double)*** %29, align 8
  %31 = getelementptr inbounds void (%"class.gfx::SlideAnimation"*, double)*, void (%"class.gfx::SlideAnimation"*, double)** %30, i64 9
  %32 = load void (%"class.gfx::SlideAnimation"*, double)*, void (%"class.gfx::SlideAnimation"*, double)** %31, align 8
  tail call void %32(%"class.gfx::SlideAnimation"* %0, double 1.000000e+00) #8
  %33 = getelementptr inbounds %"class.gfx::SlideAnimation", %"class.gfx::SlideAnimation"* %0, i64 0, i32 0, i32 0
  %34 = getelementptr inbounds %"class.gfx::SlideAnimation", %"class.gfx::SlideAnimation"* %0, i64 0, i32 0, i32 0, i32 3
  %35 = load %"class.gfx::AnimationDelegate"*, %"class.gfx::AnimationDelegate"** %34, align 8
  %36 = icmp eq %"class.gfx::AnimationDelegate"* %35, null
  br i1 %36, label %75, label %37

37:                                               ; preds = %28
  %38 = bitcast %"class.gfx::AnimationDelegate"* %35 to void (%"class.gfx::AnimationDelegate"*, %"class.gfx::Animation"*)***
  %39 = load void (%"class.gfx::AnimationDelegate"*, %"class.gfx::Animation"*)**, void (%"class.gfx::AnimationDelegate"*, %"class.gfx::Animation"*)*** %38, align 8
  %40 = getelementptr inbounds void (%"class.gfx::AnimationDelegate"*, %"class.gfx::Animation"*)*, void (%"class.gfx::AnimationDelegate"*, %"class.gfx::Animation"*)** %39, i64 3
  %41 = load void (%"class.gfx::AnimationDelegate"*, %"class.gfx::Animation"*)*, void (%"class.gfx::AnimationDelegate"*, %"class.gfx::Animation"*)** %40, align 8
  tail call void %41(%"class.gfx::AnimationDelegate"* nonnull %35, %"class.gfx::Animation"* %33) #8
  %42 = load %"class.gfx::AnimationDelegate"*, %"class.gfx::AnimationDelegate"** %34, align 8
  %43 = bitcast %"class.gfx::AnimationDelegate"* %42 to void (%"class.gfx::AnimationDelegate"*, %"class.gfx::Animation"*)***
  %44 = load void (%"class.gfx::AnimationDelegate"*, %"class.gfx::Animation"*)**, void (%"class.gfx::AnimationDelegate"*, %"class.gfx::Animation"*)*** %43, align 8
  %45 = getelementptr inbounds void (%"class.gfx::AnimationDelegate"*, %"class.gfx::Animation"*)*, void (%"class.gfx::AnimationDelegate"*, %"class.gfx::Animation"*)** %44, i64 2
  %46 = load void (%"class.gfx::AnimationDelegate"*, %"class.gfx::Animation"*)*, void (%"class.gfx::AnimationDelegate"*, %"class.gfx::Animation"*)** %45, align 8
  tail call void %46(%"class.gfx::AnimationDelegate"* %42, %"class.gfx::Animation"* %33) #8
  br label %75

47:                                               ; preds = %11
  %48 = fcmp une double %23, %21
  br i1 %48, label %49, label %75

49:                                               ; preds = %47
  %50 = bitcast %"class.gfx::SlideAnimation"* %0 to %"class.gfx::LinearAnimation"*
  %51 = icmp eq i32 %1, 0
  %52 = fsub double 1.000000e+00, %21
  %53 = select i1 %51, double %21, double %52
  %54 = getelementptr inbounds %"class.gfx::SlideAnimation", %"class.gfx::SlideAnimation"* %0, i64 0, i32 8
  %55 = load double, double* %54, align 8
  %56 = tail call double @pow(double %53, double %55) #8
  %57 = fsub double 1.000000e+00, %56
  %58 = load i64, i64* %25, align 8
  %59 = sitofp i64 %58 to double
  %60 = fmul double %57, %59
  %61 = fcmp oge double %60, 0xC3E0000000000000
  %62 = fcmp ole double %60, 0x43DFFFFFFFFFFFFF
  %63 = and i1 %62, %61
  %64 = fptosi double %60 to i64
  br i1 %63, label %72, label %65

65:                                               ; preds = %49
  %66 = lshr i64 %58, 63
  %67 = trunc i64 %66 to i32
  %68 = fcmp olt double %57, 0.000000e+00
  %69 = zext i1 %68 to i32
  %70 = icmp eq i32 %67, %69
  %71 = select i1 %70, i64 9223372036854775807, i64 -9223372036854775808
  br label %72

72:                                               ; preds = %49, %65
  %73 = phi i64 [ %64, %49 ], [ %71, %65 ]
  tail call void @_ZN3gfx15LinearAnimation11SetDurationEN4base9TimeDeltaE(%"class.gfx::LinearAnimation"* %50, i64 %73) #8
  %74 = getelementptr inbounds %"class.gfx::SlideAnimation", %"class.gfx::SlideAnimation"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN3gfx9Animation5StartEv(%"class.gfx::Animation"* %74) #8
  br label %75

75:                                               ; preds = %28, %47, %72, %37, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx14SlideAnimation4HideEv(%"class.gfx::SlideAnimation"*) unnamed_addr #0 align 2 {
  tail call void @_ZN3gfx14SlideAnimation14BeginAnimatingENS0_9DirectionE(%"class.gfx::SlideAnimation"* %0, i32 1)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3gfx14SlideAnimation16SetSlideDurationEN4base9TimeDeltaE(%"class.gfx::SlideAnimation"* nocapture, i64) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.gfx::SlideAnimation", %"class.gfx::SlideAnimation"* %0, i64 0, i32 7, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3gfx14SlideAnimation17SetDampeningValueEd(%"class.gfx::SlideAnimation"* nocapture, double) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.gfx::SlideAnimation", %"class.gfx::SlideAnimation"* %0, i64 0, i32 8
  store double %1, double* %3, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZNK3gfx14SlideAnimation15GetCurrentValueEv(%"class.gfx::SlideAnimation"* nocapture readonly) unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.gfx::SlideAnimation", %"class.gfx::SlideAnimation"* %0, i64 0, i32 6
  %3 = load double, double* %2, align 8
  ret double %3
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN3gfx14SlideAnimation11GetDurationEv(%"class.gfx::SlideAnimation"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.gfx::SlideAnimation", %"class.gfx::SlideAnimation"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %3 = load i8, i8* %2, align 4, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %9

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.gfx::SlideAnimation", %"class.gfx::SlideAnimation"* %0, i64 0, i32 6
  %7 = load double, double* %6, align 8
  %8 = fsub double 1.000000e+00, %7
  br label %17

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.gfx::SlideAnimation", %"class.gfx::SlideAnimation"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  %13 = getelementptr inbounds %"class.gfx::SlideAnimation", %"class.gfx::SlideAnimation"* %0, i64 0, i32 6
  %14 = load double, double* %13, align 8
  %15 = fsub double 1.000000e+00, %14
  %16 = select i1 %12, double %14, double %15
  br label %17

17:                                               ; preds = %9, %5
  %18 = phi double [ %8, %5 ], [ %16, %9 ]
  %19 = getelementptr inbounds %"class.gfx::SlideAnimation", %"class.gfx::SlideAnimation"* %0, i64 0, i32 8
  %20 = load double, double* %19, align 8
  %21 = tail call double @pow(double %18, double %20) #8
  %22 = fsub double 1.000000e+00, %21
  %23 = getelementptr inbounds %"class.gfx::SlideAnimation", %"class.gfx::SlideAnimation"* %0, i64 0, i32 7, i32 0
  %24 = load i64, i64* %23, align 8
  %25 = sitofp i64 %24 to double
  %26 = fmul double %22, %25
  %27 = fcmp oge double %26, 0xC3E0000000000000
  %28 = fcmp ole double %26, 0x43DFFFFFFFFFFFFF
  %29 = and i1 %28, %27
  %30 = fptosi double %26 to i64
  br i1 %29, label %38, label %31

31:                                               ; preds = %17
  %32 = lshr i64 %24, 63
  %33 = trunc i64 %32 to i32
  %34 = fcmp olt double %22, 0.000000e+00
  %35 = zext i1 %34 to i32
  %36 = icmp eq i32 %33, %35
  %37 = select i1 %36, i64 9223372036854775807, i64 -9223372036854775808
  br label %38

38:                                               ; preds = %17, %31
  %39 = phi i64 [ %30, %17 ], [ %37, %31 ]
  ret i64 %39
}

; Function Attrs: nofree nounwind
declare double @pow(double, double) local_unnamed_addr #6

declare void @_ZN3gfx15LinearAnimation11SetDurationEN4base9TimeDeltaE(%"class.gfx::LinearAnimation"*, i64) local_unnamed_addr #1

declare void @_ZN3gfx9Animation5StartEv(%"class.gfx::Animation"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx14SlideAnimation14AnimateToStateEd(%"class.gfx::SlideAnimation"* nocapture, double) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.gfx::SlideAnimation", %"class.gfx::SlideAnimation"* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = fcmp olt double %1, 0.000000e+00
  %6 = select i1 %5, double 0.000000e+00, double %1
  %7 = fcmp ogt double %6, 1.000000e+00
  %8 = select i1 %7, double 1.000000e+00, double %6
  %9 = tail call double @_ZN3gfx5Tween14CalculateValueENS0_4TypeEd(i32 %4, double %8) #8
  %10 = fcmp oeq double %9, 1.000000e+00
  br i1 %10, label %11, label %13

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.gfx::SlideAnimation", %"class.gfx::SlideAnimation"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %12, align 4
  br label %13

13:                                               ; preds = %11, %2
  %14 = getelementptr inbounds %"class.gfx::SlideAnimation", %"class.gfx::SlideAnimation"* %0, i64 0, i32 4
  %15 = load double, double* %14, align 8
  %16 = getelementptr inbounds %"class.gfx::SlideAnimation", %"class.gfx::SlideAnimation"* %0, i64 0, i32 5
  %17 = load double, double* %16, align 8
  %18 = fsub double %17, %15
  %19 = fmul double %9, %18
  %20 = fadd double %15, %19
  %21 = getelementptr inbounds %"class.gfx::SlideAnimation", %"class.gfx::SlideAnimation"* %0, i64 0, i32 6
  store double %20, double* %21, align 8
  %22 = fcmp ult double %17, %15
  br i1 %22, label %25, label %23

23:                                               ; preds = %13
  %24 = fcmp ogt double %20, %17
  br i1 %24, label %27, label %28

25:                                               ; preds = %13
  %26 = fcmp olt double %20, %17
  br i1 %26, label %27, label %28

27:                                               ; preds = %25, %23
  store double %17, double* %21, align 8
  br label %28

28:                                               ; preds = %27, %25, %23
  ret void
}

declare double @_ZN3gfx5Tween14CalculateValueENS0_4TypeEd(i32, double) local_unnamed_addr #1

declare void @_ZN3gfx9Animation12SetStartTimeEN4base9TimeTicksE(%"class.gfx::Animation"*, i64) unnamed_addr #1

declare void @_ZN3gfx15LinearAnimation4StepEN4base9TimeTicksE(%"class.gfx::LinearAnimation"*, i64) unnamed_addr #1

declare i64 @_ZNK3gfx9Animation16GetTimerIntervalEv(%"class.gfx::Animation"*) unnamed_addr #1

declare void @_ZN3gfx15LinearAnimation16AnimationStartedEv(%"class.gfx::LinearAnimation"*) unnamed_addr #1

declare void @_ZN3gfx15LinearAnimation16AnimationStoppedEv(%"class.gfx::LinearAnimation"*) unnamed_addr #1

declare zeroext i1 @_ZN3gfx15LinearAnimation26ShouldSendCanceledFromStopEv(%"class.gfx::LinearAnimation"*) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { argmemonly nounwind }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
