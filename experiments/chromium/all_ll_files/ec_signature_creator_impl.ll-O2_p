; ModuleID = '../../crypto/ec_signature_creator_impl.cc'
source_filename = "../../crypto/ec_signature_creator_impl.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.crypto::ECSignatureCreatorImpl" = type { %"class.crypto::ECSignatureCreator", %"class.crypto::ECPrivateKey"* }
%"class.crypto::ECSignatureCreator" = type { i32 (...)** }
%"class.crypto::ECPrivateKey" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %struct.evp_pkey_st* }
%struct.evp_pkey_st = type { i32, i32, %union.anon, %struct.evp_pkey_asn1_method_st* }
%union.anon = type { i8* }
%struct.evp_pkey_asn1_method_st = type opaque
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i8* }
%"class.crypto::OpenSSLErrStackTracer" = type { %"class.base::Location" }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.bssl::internal::StackAllocated" = type { %struct.env_md_ctx_st }
%struct.env_md_ctx_st = type { %struct.env_md_st*, i8*, %struct.evp_pkey_ctx_st*, %struct.evp_md_pctx_ops* }
%struct.env_md_st = type opaque
%struct.evp_pkey_ctx_st = type opaque
%struct.evp_md_pctx_ops = type opaque
%struct.engine_st = type opaque
%struct.ecdsa_sig_st = type { %struct.bignum_st*, %struct.bignum_st* }
%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm = comdat any

@_ZTVN6crypto22ECSignatureCreatorImplE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.crypto::ECSignatureCreatorImpl"*)* @_ZN6crypto22ECSignatureCreatorImplD2Ev to i8*), i8* bitcast (void (%"class.crypto::ECSignatureCreatorImpl"*)* @_ZN6crypto22ECSignatureCreatorImplD0Ev to i8*), i8* bitcast (i1 (%"class.crypto::ECSignatureCreatorImpl"*, i8*, i32, %"class.std::__1::vector"*)* @_ZN6crypto22ECSignatureCreatorImpl4SignEPKhiPNSt3__16vectorIhNS3_9allocatorIhEEEE to i8*), i8* bitcast (i1 (%"class.crypto::ECSignatureCreatorImpl"*, %"class.std::__1::vector"*, %"class.std::__1::vector"*)* @_ZN6crypto22ECSignatureCreatorImpl15DecodeSignatureERKNSt3__16vectorIhNS1_9allocatorIhEEEEPS5_ to i8*)] }, align 8
@.str = private unnamed_addr constant [5 x i8] c"Sign\00", align 1
@.str.1 = private unnamed_addr constant [42 x i8] c"../../crypto/ec_signature_creator_impl.cc\00", align 1
@.str.2 = private unnamed_addr constant [16 x i8] c"DecodeSignature\00", align 1

@_ZN6crypto22ECSignatureCreatorImplC1EPNS_12ECPrivateKeyE = hidden unnamed_addr alias void (%"class.crypto::ECSignatureCreatorImpl"*, %"class.crypto::ECPrivateKey"*), void (%"class.crypto::ECSignatureCreatorImpl"*, %"class.crypto::ECPrivateKey"*)* @_ZN6crypto22ECSignatureCreatorImplC2EPNS_12ECPrivateKeyE
@_ZN6crypto22ECSignatureCreatorImplD1Ev = hidden unnamed_addr alias void (%"class.crypto::ECSignatureCreatorImpl"*), void (%"class.crypto::ECSignatureCreatorImpl"*)* @_ZN6crypto22ECSignatureCreatorImplD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6crypto22ECSignatureCreatorImplC2EPNS_12ECPrivateKeyE(%"class.crypto::ECSignatureCreatorImpl"* nocapture, %"class.crypto::ECPrivateKey"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.crypto::ECSignatureCreatorImpl", %"class.crypto::ECSignatureCreatorImpl"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6crypto22ECSignatureCreatorImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.crypto::ECSignatureCreatorImpl", %"class.crypto::ECSignatureCreatorImpl"* %0, i64 0, i32 1
  store %"class.crypto::ECPrivateKey"* %1, %"class.crypto::ECPrivateKey"** %4, align 8
  tail call void @_ZN6crypto17EnsureOpenSSLInitEv() #7
  ret void
}

declare void @_ZN6crypto17EnsureOpenSSLInitEv() local_unnamed_addr #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN6crypto22ECSignatureCreatorImplD2Ev(%"class.crypto::ECSignatureCreatorImpl"* nocapture) unnamed_addr #2 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6crypto22ECSignatureCreatorImplD0Ev(%"class.crypto::ECSignatureCreatorImpl"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.crypto::ECSignatureCreatorImpl"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #8
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN6crypto22ECSignatureCreatorImpl4SignEPKhiPNSt3__16vectorIhNS3_9allocatorIhEEEE(%"class.crypto::ECSignatureCreatorImpl"* nocapture readonly, i8*, i32, %"class.std::__1::vector"*) unnamed_addr #0 align 2 {
  %5 = alloca %"class.crypto::OpenSSLErrStackTracer", align 8
  %6 = alloca %"class.base::Location", align 8
  %7 = alloca %"class.bssl::internal::StackAllocated", align 8
  %8 = alloca i64, align 8
  %9 = bitcast %"class.crypto::OpenSSLErrStackTracer"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 32, i1 false)
  %10 = bitcast %"class.base::Location"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #7
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %6, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.1, i64 0, i64 0), i32 30) #7
  %11 = getelementptr inbounds %"class.crypto::OpenSSLErrStackTracer", %"class.crypto::OpenSSLErrStackTracer"* %5, i64 0, i32 0
  call void @_ZN4base8LocationC1ERKS0_(%"class.base::Location"* nonnull %11, %"class.base::Location"* nonnull dereferenceable(32) %6) #7
  call void @_ZN6crypto17EnsureOpenSSLInitEv() #7
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #7
  %12 = bitcast %"class.bssl::internal::StackAllocated"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %12) #7
  %13 = getelementptr inbounds %"class.bssl::internal::StackAllocated", %"class.bssl::internal::StackAllocated"* %7, i64 0, i32 0
  %14 = bitcast %"class.bssl::internal::StackAllocated"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -86, i64 32, i1 false)
  call void @EVP_MD_CTX_init(%struct.env_md_ctx_st* nonnull %13) #7
  %15 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #7
  store i64 0, i64* %8, align 8
  %16 = call %struct.env_md_st* @EVP_sha256() #7
  %17 = getelementptr inbounds %"class.crypto::ECSignatureCreatorImpl", %"class.crypto::ECSignatureCreatorImpl"* %0, i64 0, i32 1
  %18 = load %"class.crypto::ECPrivateKey"*, %"class.crypto::ECPrivateKey"** %17, align 8
  %19 = getelementptr inbounds %"class.crypto::ECPrivateKey", %"class.crypto::ECPrivateKey"* %18, i64 0, i32 0, i32 0, i32 0, i32 0
  %20 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %19, align 8
  %21 = call i32 @EVP_DigestSignInit(%struct.env_md_ctx_st* nonnull %13, %struct.evp_pkey_ctx_st** null, %struct.env_md_st* %16, %struct.engine_st* null, %struct.evp_pkey_st* %20) #7
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %65, label %23

23:                                               ; preds = %4
  %24 = sext i32 %2 to i64
  %25 = call i32 @EVP_DigestSignUpdate(%struct.env_md_ctx_st* nonnull %13, i8* %1, i64 %24) #7
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %65, label %27

27:                                               ; preds = %23
  %28 = call i32 @EVP_DigestSignFinal(%struct.env_md_ctx_st* nonnull %13, i8* null, i64* nonnull %8) #7
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %65, label %30

30:                                               ; preds = %27
  %31 = load i64, i64* %8, align 8
  %32 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 1
  %33 = bitcast i8** %32 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = bitcast %"class.std::__1::vector"* %3 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = sub i64 %34, %36
  %38 = icmp ugt i64 %31, %37
  %39 = inttoptr i64 %36 to i8*
  br i1 %38, label %40, label %44

40:                                               ; preds = %30
  %41 = sub i64 %31, %37
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"* %3, i64 %41) #7
  %42 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  br label %48

44:                                               ; preds = %30
  %45 = icmp ult i64 %31, %37
  br i1 %45, label %46, label %48

46:                                               ; preds = %44
  %47 = getelementptr inbounds i8, i8* %39, i64 %31
  store i8* %47, i8** %32, align 8
  br label %48

48:                                               ; preds = %40, %44, %46
  %49 = phi i8* [ %43, %40 ], [ %39, %44 ], [ %39, %46 ]
  %50 = call i32 @EVP_DigestSignFinal(%struct.env_md_ctx_st* nonnull %13, i8* %49, i64* nonnull %8) #7
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %65, label %52

52:                                               ; preds = %48
  %53 = load i64, i64* %8, align 8
  %54 = load i64, i64* %33, align 8
  %55 = load i64, i64* %35, align 8
  %56 = sub i64 %54, %55
  %57 = icmp ugt i64 %53, %56
  %58 = inttoptr i64 %55 to i8*
  br i1 %57, label %59, label %61

59:                                               ; preds = %52
  %60 = sub i64 %53, %56
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"* %3, i64 %60) #7
  br label %65

61:                                               ; preds = %52
  %62 = icmp ult i64 %53, %56
  br i1 %62, label %63, label %65

63:                                               ; preds = %61
  %64 = getelementptr inbounds i8, i8* %58, i64 %53
  store i8* %64, i8** %32, align 8
  br label %65

65:                                               ; preds = %63, %61, %59, %48, %4, %23, %27
  %66 = phi i1 [ false, %27 ], [ false, %23 ], [ false, %4 ], [ false, %48 ], [ true, %59 ], [ true, %61 ], [ true, %63 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #7
  %67 = call i32 @EVP_MD_CTX_cleanup(%struct.env_md_ctx_st* nonnull %13) #7
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %12) #7
  call void @_ZN6crypto20ClearOpenSSLERRStackERKN4base8LocationE(%"class.base::Location"* nonnull dereferenceable(32) %11) #7
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #7
  ret i1 %66
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

declare void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* sret, i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

declare i32 @EVP_DigestSignInit(%struct.env_md_ctx_st*, %struct.evp_pkey_ctx_st**, %struct.env_md_st*, %struct.engine_st*, %struct.evp_pkey_st*) local_unnamed_addr #1

declare %struct.env_md_st* @EVP_sha256() local_unnamed_addr #1

declare i32 @EVP_DigestSignUpdate(%struct.env_md_ctx_st*, i8*, i64) local_unnamed_addr #1

declare i32 @EVP_DigestSignFinal(%struct.env_md_ctx_st*, i8*, i64*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN6crypto22ECSignatureCreatorImpl15DecodeSignatureERKNSt3__16vectorIhNS1_9allocatorIhEEEEPS5_(%"class.crypto::ECSignatureCreatorImpl"* nocapture readnone, %"class.std::__1::vector"* nocapture readonly dereferenceable(24), %"class.std::__1::vector"* nocapture) unnamed_addr #0 align 2 {
  %4 = alloca %"class.crypto::OpenSSLErrStackTracer", align 8
  %5 = alloca %"class.base::Location", align 8
  %6 = bitcast %"class.crypto::OpenSSLErrStackTracer"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 32, i1 false)
  %7 = bitcast %"class.base::Location"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #7
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %5, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.1, i64 0, i64 0), i32 55) #7
  %8 = getelementptr inbounds %"class.crypto::OpenSSLErrStackTracer", %"class.crypto::OpenSSLErrStackTracer"* %4, i64 0, i32 0
  call void @_ZN4base8LocationC1ERKS0_(%"class.base::Location"* nonnull %8, %"class.base::Location"* nonnull dereferenceable(32) %5) #7
  call void @_ZN6crypto17EnsureOpenSSLInitEv() #7
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #7
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %12 = bitcast i8** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = ptrtoint i8* %10 to i64
  %15 = sub i64 %13, %14
  %16 = call %struct.ecdsa_sig_st* @ECDSA_SIG_from_bytes(i8* %10, i64 %15) #7
  %17 = icmp eq %struct.ecdsa_sig_st* %16, null
  br i1 %17, label %50, label %18

18:                                               ; preds = %3
  %19 = call i8* @_Znwm(i64 64) #8
  %20 = ptrtoint i8* %19 to i64
  %21 = getelementptr inbounds i8, i8* %19, i64 64
  %22 = ptrtoint i8* %21 to i64
  %23 = sub i64 64, %20
  %24 = getelementptr i8, i8* %19, i64 %23
  %25 = ptrtoint i8* %24 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %19, i8 0, i64 %25, i1 false) #7
  %26 = getelementptr inbounds %struct.ecdsa_sig_st, %struct.ecdsa_sig_st* %16, i64 0, i32 0
  %27 = load %struct.bignum_st*, %struct.bignum_st** %26, align 8
  %28 = call i32 @BN_bn2bin_padded(i8* nonnull %19, i64 32, %struct.bignum_st* %27) #7
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %44, label %30

30:                                               ; preds = %18
  %31 = getelementptr inbounds i8, i8* %19, i64 32
  %32 = getelementptr inbounds %struct.ecdsa_sig_st, %struct.ecdsa_sig_st* %16, i64 0, i32 1
  %33 = load %struct.bignum_st*, %struct.bignum_st** %32, align 8
  %34 = call i32 @BN_bn2bin_padded(i8* %31, i64 32, %struct.bignum_st* %33) #7
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %44, label %36

36:                                               ; preds = %30
  %37 = bitcast %"class.std::__1::vector"* %2 to i64*
  %38 = load i64, i64* %37, align 8
  store i64 %20, i64* %37, align 8
  %39 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 1
  %40 = bitcast i8** %39 to i64*
  store i64 %22, i64* %40, align 8
  %41 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 2, i32 0, i32 0
  %42 = bitcast i8** %41 to i64*
  store i64 %22, i64* %42, align 8
  %43 = icmp eq i64 %38, 0
  br i1 %43, label %48, label %44

44:                                               ; preds = %30, %18, %36
  %45 = phi i1 [ true, %36 ], [ false, %18 ], [ false, %30 ]
  %46 = phi i64 [ %38, %36 ], [ %20, %18 ], [ %20, %30 ]
  %47 = inttoptr i64 %46 to i8*
  call void @_ZdlPv(i8* nonnull %47) #8
  br label %48

48:                                               ; preds = %44, %36
  %49 = phi i1 [ %45, %44 ], [ true, %36 ]
  call void @ECDSA_SIG_free(%struct.ecdsa_sig_st* nonnull %16) #7
  br label %50

50:                                               ; preds = %3, %48
  %51 = phi i1 [ %49, %48 ], [ false, %3 ]
  call void @_ZN6crypto20ClearOpenSSLERRStackERKN4base8LocationE(%"class.base::Location"* nonnull dereferenceable(32) %8) #7
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #7
  ret i1 %51
}

declare %struct.ecdsa_sig_st* @ECDSA_SIG_from_bytes(i8*, i64) local_unnamed_addr #1

declare i32 @BN_bn2bin_padded(i8*, i64, %struct.bignum_st*) local_unnamed_addr #1

declare void @_ZN4base8LocationC1ERKS0_(%"class.base::Location"*, %"class.base::Location"* dereferenceable(32)) unnamed_addr #1

declare void @_ZN6crypto20ClearOpenSSLERRStackERKN4base8LocationE(%"class.base::Location"* dereferenceable(32)) local_unnamed_addr #1

declare void @EVP_MD_CTX_init(%struct.env_md_ctx_st*) local_unnamed_addr #1

declare i32 @EVP_MD_CTX_cleanup(%struct.env_md_ctx_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #7
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %68

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #9
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = tail call i8* @_Znwm(i64 %39) #8
  br label %41

41:                                               ; preds = %38, %33
  %42 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %43 = phi i8* [ %40, %38 ], [ null, %33 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %25
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %42
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = sub i64 %1, %45
  %49 = getelementptr i8, i8* %44, i64 %48
  %50 = ptrtoint i8* %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 %50, i1 false) #7
  %51 = ptrtoint i8* %46 to i64
  %52 = ptrtoint i8* %47 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i64, i64* %7, align 8
  %56 = ptrtoint i8* %54 to i64
  %57 = sub i64 %55, %56
  %58 = sub i64 0, %57
  %59 = getelementptr inbounds i8, i8* %44, i64 %58
  %60 = ptrtoint i8* %59 to i64
  %61 = icmp sgt i64 %57, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %54, i64 %57, i1 false) #7
  %63 = load i8*, i8** %53, align 8
  br label %64

64:                                               ; preds = %41, %62
  %65 = phi i8* [ %54, %41 ], [ %63, %62 ]
  store i64 %60, i64* %23, align 8
  store i64 %52, i64* %7, align 8
  store i64 %51, i64* %4, align 8
  %66 = icmp eq i8* %65, null
  br i1 %66, label %68, label %67

67:                                               ; preds = %64
  tail call void @_ZdlPv(i8* nonnull %65) #8
  br label %68

68:                                               ; preds = %67, %64, %20
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

declare void @ECDSA_SIG_free(%struct.ecdsa_sig_st*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
