; ModuleID = '../../ui/display/util/edid_parser.cc'
source_filename = "../../ui/display/util/edid_parser.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.display::EdidParser" = type { i16, i16, %"class.std::__1::basic_string", %"class.gfx::Size", i32, %"class.absl::optional", double, i32, %struct.SkColorSpacePrimaries, %"class.base::internal::flat_tree", %"class.base::internal::flat_tree.7", %"class.absl::optional.15" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.gfx::Size" = type { i32, i32 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.1 }
%union.anon.1 = type { i8 }
%struct.SkColorSpacePrimaries = type { float, float, float, float, float, float, float, float }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { i8* }
%"class.base::internal::flat_tree.7" = type { %"class.std::__1::vector.8" }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { i8*, i8*, %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { i8* }
%"class.absl::optional.15" = type { %"class.absl::optional_internal::optional_data.16" }
%"class.absl::optional_internal::optional_data.16" = type { %"class.absl::optional_internal::optional_data_base.17" }
%"class.absl::optional_internal::optional_data_base.17" = type { %"class.absl::optional_internal::optional_data_dtor_base.18" }
%"class.absl::optional_internal::optional_data_dtor_base.18" = type { i8, %union.anon.19 }
%union.anon.19 = type { %"struct.gfx::HDRStaticMetadata" }
%"struct.gfx::HDRStaticMetadata" = type { double, double, double }
%"class.std::__1::vector.20" = type { %"class.std::__1::__vector_base.21" }
%"class.std::__1::__vector_base.21" = type { i8*, i8*, %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { i8* }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__basic_string_common" = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIN3gfx10ColorSpace9PrimaryIDENS_9allocatorIS3_EEE7emplaceIJRKS3_EEENS_11__wrap_iterIPS3_EENSA_IPS8_EEDpOT_ = comdat any

$_ZNSt3__16vectorIN3gfx10ColorSpace10TransferIDENS_9allocatorIS3_EEE7emplaceIJRKS3_EEENS_11__wrap_iterIPS3_EENSA_IPS8_EEDpOT_ = comdat any

@.str = private unnamed_addr constant [9 x i8] c"%02X%02X\00", align 1
@_ZN7display12_GLOBAL__N_123kParseEdidFailureMetricE = internal constant [25 x i8] c"Display.ParseEdidFailure\00", align 16
@_ZZN7display10EdidParser9ParseEdidERKNSt3__16vectorIhNS1_9allocatorIhEEEEE20kBitsPerChannelTable = internal unnamed_addr constant [8 x i32] [i32 0, i32 6, i32 8, i32 10, i32 12, i32 14, i32 16, i32 0], align 16
@_ZZN7display10EdidParser9ParseEdidERKNSt3__16vectorIhNS1_9allocatorIhEEEEE13kPrimaryIDMap = internal constant [8 x i8] c"\04\01\04\04\04\07\07\07", align 1
@_ZZN7display10EdidParser9ParseEdidERKNSt3__16vectorIhNS1_9allocatorIhEEEEE14kTransferIDMap = internal constant [4 x i8] c"\01\05\11\13", align 1

@_ZN7display10EdidParserC1ERKNSt3__16vectorIhNS1_9allocatorIhEEEE = hidden unnamed_addr alias void (%"class.display::EdidParser"*, %"class.std::__1::vector.20"*), void (%"class.display::EdidParser"*, %"class.std::__1::vector.20"*)* @_ZN7display10EdidParserC2ERKNSt3__16vectorIhNS1_9allocatorIhEEEE
@_ZN7display10EdidParserD1Ev = hidden unnamed_addr alias void (%"class.display::EdidParser"*), void (%"class.display::EdidParser"*)* @_ZN7display10EdidParserD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7display10EdidParserC2ERKNSt3__16vectorIhNS1_9allocatorIhEEEE(%"class.display::EdidParser"*, %"class.std::__1::vector.20"* readonly dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 0
  store i16 0, i16* %3, align 8
  %4 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 1
  store i16 0, i16* %4, align 2
  %5 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 4
  %7 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 32, i1 false)
  store i32 -1, i32* %6, align 8
  %8 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 6
  store double 0.000000e+00, double* %9, align 8
  %10 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 7
  store i32 -1, i32* %10, align 8
  %11 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 8, i32 0
  %12 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 9
  %13 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 11, i32 0, i32 0, i32 0, i32 1
  %14 = bitcast %union.anon.19* %13 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 24, i1 false) #11
  %15 = bitcast float* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %15, i8 0, i64 32, i1 false)
  %16 = bitcast %"class.base::internal::flat_tree"* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 49, i1 false)
  tail call void @_ZN7display10EdidParser9ParseEdidERKNSt3__16vectorIhNS1_9allocatorIhEEEE(%"class.display::EdidParser"* %0, %"class.std::__1::vector.20"* dereferenceable(24) %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7display10EdidParser9ParseEdidERKNSt3__16vectorIhNS1_9allocatorIhEEEE(%"class.display::EdidParser"*, %"class.std::__1::vector.20"* readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca %"class.absl::optional.15", align 8
  %5 = alloca %"struct.gfx::HDRStaticMetadata", align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.20", %"class.std::__1::vector.20"* %1, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %"class.std::__1::vector.20"* %1 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %8, %10
  %12 = icmp ult i64 %11, 10
  %13 = inttoptr i64 %10 to i8*
  br i1 %12, label %14, label %15

14:                                               ; preds = %2
  tail call void @_ZN4base23UmaHistogramExactLinearEPKcii(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @_ZN7display12_GLOBAL__N_123kParseEdidFailureMetricE, i64 0, i64 0), i32 1, i32 9) #11
  br label %579

15:                                               ; preds = %2
  %16 = getelementptr inbounds %"class.std::__1::vector.20", %"class.std::__1::vector.20"* %1, i64 0, i32 0, i32 0
  %17 = getelementptr inbounds i8, i8* %13, i64 8
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i16
  %20 = shl nuw i16 %19, 8
  %21 = getelementptr inbounds i8, i8* %13, i64 9
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i16
  %24 = or i16 %20, %23
  %25 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 0
  store i16 %24, i16* %25, align 8
  %26 = load i64, i64* %7, align 8
  %27 = load i64, i64* %9, align 8
  %28 = sub i64 %26, %27
  %29 = icmp ult i64 %28, 12
  %30 = inttoptr i64 %27 to i8*
  br i1 %29, label %31, label %32

31:                                               ; preds = %15
  tail call void @_ZN4base23UmaHistogramExactLinearEPKcii(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @_ZN7display12_GLOBAL__N_123kParseEdidFailureMetricE, i64 0, i64 0), i32 2, i32 9) #11
  br label %579

32:                                               ; preds = %15
  %33 = getelementptr inbounds i8, i8* %30, i64 10
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i16
  %36 = shl nuw i16 %35, 8
  %37 = getelementptr inbounds i8, i8* %30, i64 11
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i16
  %40 = or i16 %36, %39
  %41 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 1
  store i16 %40, i16* %41, align 2
  %42 = load i64, i64* %7, align 8
  %43 = load i64, i64* %9, align 8
  %44 = sub i64 %42, %43
  %45 = icmp ult i64 %44, 18
  %46 = inttoptr i64 %43 to i8*
  br i1 %45, label %47, label %48

47:                                               ; preds = %32
  tail call void @_ZN4base23UmaHistogramExactLinearEPKcii(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @_ZN7display12_GLOBAL__N_123kParseEdidFailureMetricE, i64 0, i64 0), i32 3, i32 9) #11
  br label %579

48:                                               ; preds = %32
  %49 = getelementptr inbounds i8, i8* %46, i64 17
  %50 = load i8, i8* %49, align 1
  %51 = icmp ugt i8 %50, 15
  br i1 %51, label %52, label %60

52:                                               ; preds = %48
  %53 = zext i8 %50 to i32
  %54 = add nuw nsw i32 %53, 1990
  %55 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 4
  store i32 %54, i32* %55, align 8
  %56 = load i64, i64* %7, align 8
  %57 = load i64, i64* %9, align 8
  %58 = inttoptr i64 %57 to i8*
  %59 = sub i64 %56, %57
  br label %60

60:                                               ; preds = %52, %48
  %61 = phi i64 [ %59, %52 ], [ %44, %48 ]
  %62 = phi i8* [ %58, %52 ], [ %46, %48 ]
  %63 = icmp ult i64 %61, 21
  br i1 %63, label %64, label %65

64:                                               ; preds = %60
  tail call void @_ZN4base23UmaHistogramExactLinearEPKcii(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @_ZN7display12_GLOBAL__N_123kParseEdidFailureMetricE, i64 0, i64 0), i32 4, i32 9) #11
  br label %579

65:                                               ; preds = %60
  %66 = getelementptr inbounds i8, i8* %62, i64 19
  %67 = load i8, i8* %66, align 1
  %68 = icmp ugt i8 %67, 3
  br i1 %68, label %69, label %84

69:                                               ; preds = %65
  %70 = getelementptr inbounds i8, i8* %62, i64 20
  %71 = load i8, i8* %70, align 1
  %72 = icmp slt i8 %71, 0
  br i1 %72, label %73, label %84

73:                                               ; preds = %69
  %74 = lshr i8 %71, 4
  %75 = and i8 %74, 7
  %76 = zext i8 %75 to i64
  %77 = getelementptr inbounds [8 x i32], [8 x i32]* @_ZZN7display10EdidParser9ParseEdidERKNSt3__16vectorIhNS1_9allocatorIhEEEEE20kBitsPerChannelTable, i64 0, i64 %76
  %78 = load i32, i32* %77, align 4
  %79 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 7
  store i32 %78, i32* %79, align 8
  %80 = load i64, i64* %7, align 8
  %81 = load i64, i64* %9, align 8
  %82 = inttoptr i64 %81 to i8*
  %83 = sub i64 %80, %81
  br label %84

84:                                               ; preds = %73, %69, %65
  %85 = phi i64 [ %83, %73 ], [ %61, %69 ], [ %61, %65 ]
  %86 = phi i8* [ %82, %73 ], [ %62, %69 ], [ %62, %65 ]
  %87 = icmp ult i64 %85, 24
  br i1 %87, label %88, label %89

88:                                               ; preds = %84
  tail call void @_ZN4base23UmaHistogramExactLinearEPKcii(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @_ZN7display12_GLOBAL__N_123kParseEdidFailureMetricE, i64 0, i64 0), i32 5, i32 9) #11
  br label %579

89:                                               ; preds = %84
  %90 = getelementptr inbounds i8, i8* %86, i64 23
  %91 = load i8, i8* %90, align 1
  %92 = icmp eq i8 %91, -1
  br i1 %92, label %102, label %93

93:                                               ; preds = %89
  %94 = uitofp i8 %91 to double
  %95 = fadd double %94, 1.000000e+02
  %96 = fdiv double %95, 1.000000e+02
  %97 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 6
  store double %96, double* %97, align 8
  %98 = load i64, i64* %7, align 8
  %99 = load i64, i64* %9, align 8
  %100 = inttoptr i64 %99 to i8*
  %101 = sub i64 %98, %99
  br label %102

102:                                              ; preds = %89, %93
  %103 = phi i64 [ %85, %89 ], [ %101, %93 ]
  %104 = phi i8* [ %86, %89 ], [ %100, %93 ]
  %105 = icmp ult i64 %103, 35
  br i1 %105, label %106, label %107

106:                                              ; preds = %102
  tail call void @_ZN4base23UmaHistogramExactLinearEPKcii(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @_ZN7display12_GLOBAL__N_123kParseEdidFailureMetricE, i64 0, i64 0), i32 6, i32 9) #11
  br label %579

107:                                              ; preds = %102
  %108 = getelementptr inbounds i8, i8* %104, i64 25
  %109 = load i8, i8* %108, align 1
  %110 = getelementptr inbounds i8, i8* %104, i64 26
  %111 = load i8, i8* %110, align 1
  %112 = getelementptr inbounds i8, i8* %104, i64 27
  %113 = load i8, i8* %112, align 1
  %114 = zext i8 %113 to i32
  %115 = shl nuw nsw i32 %114, 2
  %116 = zext i8 %109 to i32
  %117 = lshr i32 %116, 6
  %118 = or i32 %115, %117
  %119 = sitofp i32 %118 to float
  %120 = fmul float %119, 0x3F50000000000000
  %121 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 8, i32 0
  store float %120, float* %121, align 4
  %122 = load i8*, i8** %16, align 8
  %123 = getelementptr inbounds i8, i8* %122, i64 28
  %124 = load i8, i8* %123, align 1
  %125 = zext i8 %124 to i32
  %126 = shl nuw nsw i32 %125, 2
  %127 = lshr i32 %116, 4
  %128 = and i32 %127, 3
  %129 = or i32 %126, %128
  %130 = sitofp i32 %129 to float
  %131 = fmul float %130, 0x3F50000000000000
  %132 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 8, i32 1
  store float %131, float* %132, align 4
  %133 = load i8*, i8** %16, align 8
  %134 = getelementptr inbounds i8, i8* %133, i64 29
  %135 = load i8, i8* %134, align 1
  %136 = zext i8 %135 to i32
  %137 = shl nuw nsw i32 %136, 2
  %138 = lshr i32 %116, 2
  %139 = and i32 %138, 3
  %140 = or i32 %137, %139
  %141 = sitofp i32 %140 to float
  %142 = fmul float %141, 0x3F50000000000000
  %143 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 8, i32 2
  store float %142, float* %143, align 4
  %144 = load i8*, i8** %16, align 8
  %145 = getelementptr inbounds i8, i8* %144, i64 30
  %146 = load i8, i8* %145, align 1
  %147 = zext i8 %146 to i32
  %148 = shl nuw nsw i32 %147, 2
  %149 = and i32 %116, 3
  %150 = or i32 %148, %149
  %151 = sitofp i32 %150 to float
  %152 = fmul float %151, 0x3F50000000000000
  %153 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 8, i32 3
  store float %152, float* %153, align 4
  %154 = load i8*, i8** %16, align 8
  %155 = getelementptr inbounds i8, i8* %154, i64 31
  %156 = load i8, i8* %155, align 1
  %157 = zext i8 %156 to i32
  %158 = shl nuw nsw i32 %157, 2
  %159 = zext i8 %111 to i32
  %160 = lshr i32 %159, 6
  %161 = or i32 %158, %160
  %162 = sitofp i32 %161 to float
  %163 = fmul float %162, 0x3F50000000000000
  %164 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 8, i32 4
  store float %163, float* %164, align 4
  %165 = load i8*, i8** %16, align 8
  %166 = getelementptr inbounds i8, i8* %165, i64 32
  %167 = load i8, i8* %166, align 1
  %168 = zext i8 %167 to i32
  %169 = shl nuw nsw i32 %168, 2
  %170 = lshr i32 %159, 4
  %171 = and i32 %170, 3
  %172 = or i32 %169, %171
  %173 = sitofp i32 %172 to float
  %174 = fmul float %173, 0x3F50000000000000
  %175 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 8, i32 5
  store float %174, float* %175, align 4
  %176 = load i8*, i8** %16, align 8
  %177 = getelementptr inbounds i8, i8* %176, i64 33
  %178 = load i8, i8* %177, align 1
  %179 = zext i8 %178 to i32
  %180 = shl nuw nsw i32 %179, 2
  %181 = lshr i32 %159, 2
  %182 = and i32 %181, 3
  %183 = or i32 %180, %182
  %184 = sitofp i32 %183 to float
  %185 = fmul float %184, 0x3F50000000000000
  %186 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 8, i32 6
  store float %185, float* %186, align 4
  %187 = load i8*, i8** %16, align 8
  %188 = getelementptr inbounds i8, i8* %187, i64 34
  %189 = load i8, i8* %188, align 1
  %190 = zext i8 %189 to i32
  %191 = shl nuw nsw i32 %190, 2
  %192 = and i32 %159, 3
  %193 = or i32 %191, %192
  %194 = sitofp i32 %193 to float
  %195 = fmul float %194, 0x3F50000000000000
  %196 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 8, i32 7
  store float %195, float* %196, align 4
  %197 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 2
  %198 = bitcast %"class.std::__1::basic_string"* %197 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %199 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %198, i64 0, i32 1, i32 0
  %200 = load i8, i8* %199, align 1
  %201 = icmp slt i8 %200, 0
  br i1 %201, label %202, label %206

202:                                              ; preds = %107
  %203 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %197, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %204 = load i8*, i8** %203, align 8
  store i8 0, i8* %204, align 1
  %205 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 0, i64* %205, align 8
  br label %208

206:                                              ; preds = %107
  %207 = bitcast %"class.std::__1::basic_string"* %197 to i8*
  store i8 0, i8* %207, align 1
  store i8 0, i8* %199, align 1
  br label %208

208:                                              ; preds = %202, %206
  %209 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 3, i32 0
  %210 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 3, i32 1
  %211 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  %212 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %213 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %214 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %213, i64 0, i32 1, i32 0
  %215 = getelementptr inbounds i8, i8* %211, i64 13
  %216 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  br label %217

217:                                              ; preds = %292, %208
  %218 = phi i64 [ 0, %208 ], [ %222, %292 ]
  %219 = load i64, i64* %7, align 8
  %220 = load i64, i64* %9, align 8
  %221 = sub i64 %219, %220
  %222 = add nuw nsw i64 %218, 1
  %223 = mul nuw nsw i64 %222, 18
  %224 = add nuw nsw i64 %223, 54
  %225 = icmp ult i64 %221, %224
  %226 = inttoptr i64 %220 to i8*
  br i1 %225, label %294, label %227

227:                                              ; preds = %217
  %228 = mul nuw nsw i64 %218, 18
  %229 = add nuw nsw i64 %228, 54
  %230 = getelementptr inbounds i8, i8* %226, i64 %229
  %231 = load i8, i8* %230, align 1
  %232 = icmp eq i8 %231, 0
  %233 = add nuw nsw i64 %228, 55
  %234 = getelementptr inbounds i8, i8* %226, i64 %233
  %235 = load i8, i8* %234, align 1
  %236 = icmp eq i8 %235, 0
  br i1 %232, label %267, label %237

237:                                              ; preds = %227
  br i1 %236, label %292, label %238

238:                                              ; preds = %237
  %239 = load i32, i32* %209, align 4
  %240 = icmp eq i32 %239, 0
  br i1 %240, label %244, label %241

241:                                              ; preds = %238
  %242 = load i32, i32* %210, align 4
  %243 = icmp eq i32 %242, 0
  br i1 %243, label %244, label %292

244:                                              ; preds = %238, %241
  %245 = add nuw nsw i64 %228, 56
  %246 = getelementptr inbounds i8, i8* %226, i64 %245
  %247 = load i8, i8* %246, align 1
  %248 = add nuw nsw i64 %228, 58
  %249 = getelementptr inbounds i8, i8* %226, i64 %248
  %250 = load i8, i8* %249, align 1
  %251 = zext i8 %247 to i32
  %252 = and i8 %250, -16
  %253 = zext i8 %252 to i32
  %254 = shl nuw nsw i32 %253, 4
  %255 = or i32 %254, %251
  %256 = add nuw nsw i64 %228, 59
  %257 = getelementptr inbounds i8, i8* %226, i64 %256
  %258 = load i8, i8* %257, align 1
  %259 = add nuw nsw i64 %228, 61
  %260 = getelementptr inbounds i8, i8* %226, i64 %259
  %261 = load i8, i8* %260, align 1
  %262 = zext i8 %258 to i32
  %263 = and i8 %261, -16
  %264 = zext i8 %263 to i32
  %265 = shl nuw nsw i32 %264, 4
  %266 = or i32 %265, %262
  store i32 %255, i32* %209, align 4
  store i32 %266, i32* %210, align 4
  br label %292

267:                                              ; preds = %227
  br i1 %236, label %268, label %292

268:                                              ; preds = %267
  %269 = add nuw nsw i64 %228, 56
  %270 = getelementptr inbounds i8, i8* %226, i64 %269
  %271 = load i8, i8* %270, align 1
  %272 = icmp eq i8 %271, 0
  br i1 %272, label %273, label %292

273:                                              ; preds = %268
  %274 = add nuw nsw i64 %228, 57
  %275 = getelementptr inbounds i8, i8* %226, i64 %274
  %276 = load i8, i8* %275, align 1
  %277 = icmp eq i8 %276, -4
  br i1 %277, label %278, label %292

278:                                              ; preds = %273
  %279 = add nuw nsw i64 %228, 58
  %280 = getelementptr inbounds i8, i8* %226, i64 %279
  %281 = load i8, i8* %280, align 1
  %282 = icmp eq i8 %281, 0
  br i1 %282, label %283, label %292

283:                                              ; preds = %278
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %211) #11
  %284 = add nuw nsw i64 %228, 59
  %285 = getelementptr inbounds i8, i8* %226, i64 %284
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %216, i8 -86, i64 24, i1 false)
  store i8 13, i8* %214, align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %211, i8* align 1 %285, i64 13, i1 false) #11
  store i8 0, i8* %215, align 1
  %286 = call i32 @_ZN4base19TrimWhitespaceASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEENS_13TrimPositionsEPNS1_12basic_stringIcS3_NS1_9allocatorIcEEEE(i8* nonnull %211, i64 13, i32 2, %"class.std::__1::basic_string"* %197) #11
  %287 = load i8, i8* %214, align 1
  %288 = icmp slt i8 %287, 0
  br i1 %288, label %289, label %291

289:                                              ; preds = %283
  %290 = load i8*, i8** %212, align 8
  call void @_ZdlPv(i8* %290) #12
  br label %291

291:                                              ; preds = %283, %289
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %211) #11
  br label %292

292:                                              ; preds = %237, %241, %244, %267, %268, %273, %278, %291
  %293 = icmp eq i64 %222, 4
  br i1 %293, label %294, label %217

294:                                              ; preds = %292, %217
  %295 = load i8, i8* %199, align 1
  %296 = icmp slt i8 %295, 0
  br i1 %296, label %297, label %302

297:                                              ; preds = %294
  %298 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %197, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %299 = load i8*, i8** %298, align 8
  %300 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %301 = load i64, i64* %300, align 8
  br label %305

302:                                              ; preds = %294
  %303 = bitcast %"class.std::__1::basic_string"* %197 to i8*
  %304 = zext i8 %295 to i64
  br label %305

305:                                              ; preds = %297, %302
  %306 = phi i8* [ %299, %297 ], [ %303, %302 ]
  %307 = phi i64 [ %301, %297 ], [ %304, %302 ]
  %308 = getelementptr inbounds i8, i8* %306, i64 %307
  %309 = icmp eq i64 %307, 0
  br i1 %309, label %326, label %310

310:                                              ; preds = %305, %323
  %311 = phi i8* [ %324, %323 ], [ %306, %305 ]
  %312 = load i8, i8* %311, align 1
  %313 = icmp sgt i8 %312, -1
  br i1 %313, label %314, label %322

314:                                              ; preds = %310
  %315 = tail call i16** @__ctype_b_loc() #13
  %316 = load i16*, i16** %315, align 8
  %317 = sext i8 %312 to i64
  %318 = getelementptr inbounds i16, i16* %316, i64 %317
  %319 = load i16, i16* %318, align 2
  %320 = and i16 %319, 16384
  %321 = icmp eq i16 %320, 0
  br i1 %321, label %322, label %323

322:                                              ; preds = %314, %310
  store i8 32, i8* %311, align 1
  br label %323

323:                                              ; preds = %322, %314
  %324 = getelementptr inbounds i8, i8* %311, i64 1
  %325 = icmp eq i8* %324, %308
  br i1 %325, label %326, label %310

326:                                              ; preds = %323, %305
  %327 = load i64, i64* %7, align 8
  %328 = load i64, i64* %9, align 8
  %329 = sub i64 %327, %328
  %330 = icmp ult i64 %329, 127
  %331 = inttoptr i64 %328 to i8*
  br i1 %330, label %332, label %333

332:                                              ; preds = %326
  call void @_ZN4base23UmaHistogramExactLinearEPKcii(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @_ZN7display12_GLOBAL__N_123kParseEdidFailureMetricE, i64 0, i64 0), i32 8, i32 9) #11
  br label %579

333:                                              ; preds = %326
  %334 = getelementptr inbounds i8, i8* %331, i64 126
  %335 = load i8, i8* %334, align 1
  %336 = zext i8 %335 to i64
  %337 = icmp eq i8 %335, 0
  br i1 %337, label %578, label %338

338:                                              ; preds = %333
  %339 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 10
  %340 = getelementptr inbounds %"class.base::internal::flat_tree.7", %"class.base::internal::flat_tree.7"* %339, i64 0, i32 0, i32 0, i32 0
  %341 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 10, i32 0, i32 0, i32 1
  %342 = bitcast i8** %341 to i64*
  %343 = getelementptr inbounds %"class.base::internal::flat_tree.7", %"class.base::internal::flat_tree.7"* %339, i64 0, i32 0
  %344 = getelementptr inbounds %"class.absl::optional.15", %"class.absl::optional.15"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  %345 = bitcast %"struct.gfx::HDRStaticMetadata"* %5 to i8*
  %346 = getelementptr inbounds %"class.absl::optional.15", %"class.absl::optional.15"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %347 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 11, i32 0, i32 0, i32 0, i32 0
  %348 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 11, i32 0, i32 0, i32 0, i32 1, i32 0
  %349 = bitcast %"struct.gfx::HDRStaticMetadata"* %348 to i8*
  %350 = bitcast %"struct.gfx::HDRStaticMetadata"* %346 to i8*
  %351 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 11, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %352 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 11, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %353 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 11, i32 0, i32 0, i32 0, i32 1, i32 0, i32 2
  %354 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 9
  %355 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %354, i64 0, i32 0, i32 0, i32 0
  %356 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 9, i32 0, i32 0, i32 1
  %357 = bitcast i8** %356 to i64*
  %358 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %354, i64 0, i32 0
  %359 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %360 = bitcast i8* %359 to i16*
  %361 = sub i64 %327, %328
  %362 = icmp ult i64 %361, 256
  br i1 %362, label %578, label %363

363:                                              ; preds = %338, %569
  %364 = phi i64 [ %574, %569 ], [ 1, %338 ]
  %365 = phi i64 [ %364, %569 ], [ 0, %338 ]
  %366 = phi i64 [ %570, %569 ], [ %327, %338 ]
  %367 = phi i64 [ %571, %569 ], [ %328, %338 ]
  %368 = phi i8* [ %572, %569 ], [ %331, %338 ]
  %369 = shl i64 %365, 7
  %370 = add nuw nsw i64 %369, 128
  %371 = getelementptr inbounds i8, i8* %368, i64 %370
  %372 = load i8, i8* %371, align 1
  %373 = add nuw nsw i64 %369, 129
  %374 = getelementptr inbounds i8, i8* %368, i64 %373
  %375 = icmp eq i8 %372, 2
  %376 = load i8, i8* %374, align 1
  %377 = icmp eq i8 %376, 3
  %378 = and i1 %375, %377
  br i1 %378, label %379, label %567

379:                                              ; preds = %363
  %380 = add nuw nsw i64 %369, 130
  %381 = getelementptr inbounds i8, i8* %368, i64 %380
  %382 = load i8, i8* %381, align 1
  %383 = icmp ult i8 %382, -128
  %384 = select i1 %383, i8 %382, i8 -128
  %385 = add nuw nsw i64 %369, 132
  %386 = zext i8 %384 to i64
  %387 = add i64 %370, %386
  %388 = icmp ult i64 %385, %387
  br i1 %388, label %389, label %567

389:                                              ; preds = %379
  %390 = getelementptr inbounds i8, i8* %368, i64 %385
  %391 = load i8, i8* %390, align 1
  %392 = and i8 %391, 31
  %393 = zext i8 %392 to i64
  %394 = add nuw i64 %369, 133
  %395 = add nuw nsw i64 %394, %393
  %396 = sub i64 %366, %367
  %397 = icmp ugt i64 %395, %396
  br i1 %397, label %567, label %398

398:                                              ; preds = %389, %555
  %399 = phi i64 [ %563, %555 ], [ %394, %389 ]
  %400 = phi i8 [ %561, %555 ], [ %392, %389 ]
  %401 = phi i8 [ %560, %555 ], [ %391, %389 ]
  %402 = phi i64 [ %553, %555 ], [ %385, %389 ]
  %403 = phi i8* [ %556, %555 ], [ %368, %389 ]
  %404 = icmp ult i8 %401, -32
  %405 = icmp ult i8 %400, 2
  %406 = or i1 %404, %405
  br i1 %406, label %550, label %407

407:                                              ; preds = %398
  %408 = getelementptr inbounds i8, i8* %403, i64 %399
  %409 = load i8, i8* %408, align 1
  switch i8 %409, label %550 [
    i8 0, label %410
    i8 5, label %419
    i8 6, label %464
  ]

410:                                              ; preds = %407
  %411 = add i64 %402, 2
  %412 = getelementptr inbounds i8, i8* %403, i64 %411
  %413 = load i8, i8* %412, align 1
  %414 = and i8 %413, 21
  %415 = icmp ne i8 %414, 0
  %416 = zext i1 %415 to i16
  %417 = shl nuw nsw i16 %416, 8
  %418 = or i16 %417, 1
  store i16 %418, i16* %360, align 4
  br label %550

419:                                              ; preds = %407
  %420 = add i64 %402, 2
  %421 = getelementptr inbounds i8, i8* %403, i64 %420
  %422 = load i8, i8* %421, align 1
  %423 = zext i8 %422 to i64
  br label %424

424:                                              ; preds = %461, %419
  %425 = phi i64 [ 0, %419 ], [ %462, %461 ]
  %426 = shl i64 1, %425
  %427 = and i64 %426, %423
  %428 = icmp eq i64 %427, 0
  br i1 %428, label %461, label %429

429:                                              ; preds = %424
  %430 = getelementptr inbounds [8 x i8], [8 x i8]* @_ZZN7display10EdidParser9ParseEdidERKNSt3__16vectorIhNS1_9allocatorIhEEEEE13kPrimaryIDMap, i64 0, i64 %425
  %431 = load i8*, i8** %355, align 8
  %432 = load i64, i64* %357, align 8
  %433 = ptrtoint i8* %431 to i64
  %434 = sub i64 %432, %433
  %435 = icmp eq i64 %434, 0
  %436 = inttoptr i64 %432 to i8*
  br i1 %435, label %452, label %437

437:                                              ; preds = %429
  %438 = load i8, i8* %430, align 1
  br label %439

439:                                              ; preds = %439, %437
  %440 = phi i8* [ %431, %437 ], [ %450, %439 ]
  %441 = phi i64 [ %434, %437 ], [ %449, %439 ]
  %442 = lshr i64 %441, 1
  %443 = getelementptr inbounds i8, i8* %440, i64 %442
  %444 = load i8, i8* %443, align 1
  %445 = icmp ult i8 %444, %438
  %446 = getelementptr inbounds i8, i8* %443, i64 1
  %447 = xor i64 %442, -1
  %448 = add i64 %441, %447
  %449 = select i1 %445, i64 %448, i64 %442
  %450 = select i1 %445, i8* %446, i8* %440
  %451 = icmp eq i64 %449, 0
  br i1 %451, label %452, label %439

452:                                              ; preds = %439, %429
  %453 = phi i8* [ %431, %429 ], [ %450, %439 ]
  %454 = icmp eq i8* %453, %436
  br i1 %454, label %459, label %455

455:                                              ; preds = %452
  %456 = load i8, i8* %430, align 1
  %457 = load i8, i8* %453, align 1
  %458 = icmp ult i8 %456, %457
  br i1 %458, label %459, label %461

459:                                              ; preds = %455, %452
  %460 = call i8* @_ZNSt3__16vectorIN3gfx10ColorSpace9PrimaryIDENS_9allocatorIS3_EEE7emplaceIJRKS3_EEENS_11__wrap_iterIPS3_EENSA_IPS8_EEDpOT_(%"class.std::__1::vector"* %358, i8* %453, i8* dereferenceable(1) %430) #11
  br label %461

461:                                              ; preds = %459, %455, %424
  %462 = add nuw nsw i64 %425, 1
  %463 = icmp eq i64 %462, 8
  br i1 %463, label %550, label %424

464:                                              ; preds = %407
  %465 = add i64 %402, 2
  %466 = getelementptr inbounds i8, i8* %403, i64 %465
  %467 = load i8, i8* %466, align 1
  %468 = and i8 %467, 15
  %469 = zext i8 %468 to i64
  %470 = and i64 %469, 1
  %471 = icmp eq i64 %470, 0
  br i1 %471, label %500, label %472

472:                                              ; preds = %464
  %473 = load i8*, i8** %340, align 8
  %474 = load i64, i64* %342, align 8
  %475 = ptrtoint i8* %473 to i64
  %476 = sub i64 %474, %475
  %477 = icmp eq i64 %476, 0
  %478 = inttoptr i64 %474 to i8*
  br i1 %477, label %492, label %479

479:                                              ; preds = %472, %479
  %480 = phi i8* [ %490, %479 ], [ %473, %472 ]
  %481 = phi i64 [ %489, %479 ], [ %476, %472 ]
  %482 = lshr i64 %481, 1
  %483 = getelementptr inbounds i8, i8* %480, i64 %482
  %484 = load i8, i8* %483, align 1
  %485 = icmp eq i8 %484, 0
  %486 = getelementptr inbounds i8, i8* %483, i64 1
  %487 = xor i64 %482, -1
  %488 = add i64 %481, %487
  %489 = select i1 %485, i64 %488, i64 %482
  %490 = select i1 %485, i8* %486, i8* %480
  %491 = icmp eq i64 %489, 0
  br i1 %491, label %492, label %479

492:                                              ; preds = %479, %472
  %493 = phi i8* [ %473, %472 ], [ %490, %479 ]
  %494 = icmp eq i8* %493, %478
  br i1 %494, label %498, label %495

495:                                              ; preds = %492
  %496 = load i8, i8* %493, align 1
  %497 = icmp ugt i8 %496, 1
  br i1 %497, label %498, label %500

498:                                              ; preds = %495, %492
  %499 = call i8* @_ZNSt3__16vectorIN3gfx10ColorSpace10TransferIDENS_9allocatorIS3_EEE7emplaceIJRKS3_EEENS_11__wrap_iterIPS3_EENSA_IPS8_EEDpOT_(%"class.std::__1::vector.8"* %343, i8* %493, i8* dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @_ZZN7display10EdidParser9ParseEdidERKNSt3__16vectorIhNS1_9allocatorIhEEEEE14kTransferIDMap, i64 0, i64 0)) #11
  br label %500

500:                                              ; preds = %498, %495, %464
  %501 = and i64 %469, 2
  %502 = icmp eq i64 %501, 0
  br i1 %502, label %608, label %580

503:                                              ; preds = %670
  %504 = add i64 %402, 4
  %505 = getelementptr inbounds i8, i8* %671, i64 %504
  %506 = load i8, i8* %505, align 1
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %344) #11
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %345) #11
  call void @_ZN3gfx17HDRStaticMetadataC1Ev(%"struct.gfx::HDRStaticMetadata"* nonnull %5) #11
  store i8 1, i8* %344, align 8, !alias.scope !2
  call void @_ZN3gfx17HDRStaticMetadataC1ERKS0_(%"struct.gfx::HDRStaticMetadata"* %346, %"struct.gfx::HDRStaticMetadata"* nonnull dereferenceable(24) %5) #11
  %507 = load i8, i8* %344, align 8, !range !5
  %508 = icmp eq i8 %507, 0
  br i1 %508, label %514, label %509

509:                                              ; preds = %503
  %510 = load i8, i8* %347, align 8, !range !5
  %511 = icmp eq i8 %510, 0
  br i1 %511, label %513, label %512

512:                                              ; preds = %509
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %349, i8* align 8 %350, i64 24, i1 false) #11
  br label %515

513:                                              ; preds = %509
  call void @_ZN3gfx17HDRStaticMetadataC1ERKS0_(%"struct.gfx::HDRStaticMetadata"* %348, %"struct.gfx::HDRStaticMetadata"* dereferenceable(24) %346) #11
  store i8 1, i8* %347, align 8
  br label %515

514:                                              ; preds = %503
  store i8 0, i8* %347, align 8
  br label %515

515:                                              ; preds = %512, %513, %514
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %345) #11
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %344) #11
  %516 = uitofp i8 %506 to double
  %517 = fmul double %516, 3.125000e-02
  %518 = call double @exp2(double %517) #14
  %519 = load i8, i8* %347, align 8, !range !5
  %520 = icmp eq i8 %519, 0
  br i1 %520, label %521, label %522, !prof !6

521:                                              ; preds = %515
  call void @llvm.trap() #11
  unreachable

522:                                              ; preds = %515
  %523 = fmul double %518, 5.000000e+01
  store double %523, double* %351, align 8
  %524 = icmp eq i8 %674, 4
  br i1 %524, label %550, label %525

525:                                              ; preds = %522
  %526 = add i64 %402, 5
  %527 = load i8*, i8** %16, align 8
  %528 = getelementptr inbounds i8, i8* %527, i64 %526
  %529 = load i8, i8* %528, align 1
  %530 = uitofp i8 %529 to double
  %531 = fmul double %530, 3.125000e-02
  %532 = call double @exp2(double %531) #14
  %533 = load i8, i8* %347, align 8, !range !5
  %534 = icmp eq i8 %533, 0
  br i1 %534, label %535, label %536, !prof !6

535:                                              ; preds = %525
  call void @llvm.trap() #11
  unreachable

536:                                              ; preds = %525
  %537 = fmul double %532, 5.000000e+01
  store double %537, double* %352, align 8
  %538 = icmp ult i8 %674, 6
  br i1 %538, label %550, label %539

539:                                              ; preds = %536
  %540 = add i64 %402, 6
  %541 = load i8*, i8** %16, align 8
  %542 = getelementptr inbounds i8, i8* %541, i64 %540
  %543 = load i8, i8* %542, align 1
  %544 = uitofp i8 %543 to double
  %545 = fdiv double %544, 2.550000e+02
  %546 = load double, double* %351, align 8
  %547 = fmul double %545, %545
  %548 = fmul double %547, %546
  %549 = fdiv double %548, 1.000000e+02
  store double %549, double* %353, align 8
  br label %550

550:                                              ; preds = %461, %670, %539, %536, %522, %410, %407, %398
  %551 = add nuw nsw i8 %400, 1
  %552 = zext i8 %551 to i64
  %553 = add i64 %402, %552
  %554 = icmp ult i64 %553, %387
  br i1 %554, label %555, label %567

555:                                              ; preds = %550
  %556 = load i8*, i8** %16, align 8
  %557 = load i64, i64* %7, align 8
  %558 = ptrtoint i8* %556 to i64
  %559 = getelementptr inbounds i8, i8* %556, i64 %553
  %560 = load i8, i8* %559, align 1
  %561 = and i8 %560, 31
  %562 = zext i8 %561 to i64
  %563 = add nuw i64 %553, 1
  %564 = add i64 %563, %562
  %565 = sub i64 %557, %558
  %566 = icmp ugt i64 %564, %565
  br i1 %566, label %567, label %398

567:                                              ; preds = %555, %550, %389, %379, %363
  %568 = icmp eq i64 %364, %336
  br i1 %568, label %578, label %569

569:                                              ; preds = %567
  %570 = load i64, i64* %7, align 8
  %571 = load i64, i64* %9, align 8
  %572 = inttoptr i64 %571 to i8*
  %573 = sub i64 %570, %571
  %574 = add nuw nsw i64 %364, 1
  %575 = shl i64 %574, 7
  %576 = add nuw nsw i64 %575, 128
  %577 = icmp ult i64 %573, %576
  br i1 %577, label %578, label %363

578:                                              ; preds = %567, %569, %338, %333
  call void @_ZN4base23UmaHistogramExactLinearEPKcii(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @_ZN7display12_GLOBAL__N_123kParseEdidFailureMetricE, i64 0, i64 0), i32 0, i32 9) #11
  br label %579

579:                                              ; preds = %47, %88, %332, %578, %106, %64, %31, %14
  ret void

580:                                              ; preds = %500
  %581 = load i8*, i8** %340, align 8
  %582 = load i64, i64* %342, align 8
  %583 = ptrtoint i8* %581 to i64
  %584 = sub i64 %582, %583
  %585 = icmp eq i64 %584, 0
  %586 = inttoptr i64 %582 to i8*
  br i1 %585, label %600, label %587

587:                                              ; preds = %580, %587
  %588 = phi i8* [ %598, %587 ], [ %581, %580 ]
  %589 = phi i64 [ %597, %587 ], [ %584, %580 ]
  %590 = lshr i64 %589, 1
  %591 = getelementptr inbounds i8, i8* %588, i64 %590
  %592 = load i8, i8* %591, align 1
  %593 = icmp ult i8 %592, 5
  %594 = getelementptr inbounds i8, i8* %591, i64 1
  %595 = xor i64 %590, -1
  %596 = add i64 %589, %595
  %597 = select i1 %593, i64 %596, i64 %590
  %598 = select i1 %593, i8* %594, i8* %588
  %599 = icmp eq i64 %597, 0
  br i1 %599, label %600, label %587

600:                                              ; preds = %587, %580
  %601 = phi i8* [ %581, %580 ], [ %598, %587 ]
  %602 = icmp eq i8* %601, %586
  br i1 %602, label %606, label %603

603:                                              ; preds = %600
  %604 = load i8, i8* %601, align 1
  %605 = icmp ugt i8 %604, 5
  br i1 %605, label %606, label %608

606:                                              ; preds = %603, %600
  %607 = call i8* @_ZNSt3__16vectorIN3gfx10ColorSpace10TransferIDENS_9allocatorIS3_EEE7emplaceIJRKS3_EEENS_11__wrap_iterIPS3_EENSA_IPS8_EEDpOT_(%"class.std::__1::vector.8"* %343, i8* %601, i8* dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @_ZZN7display10EdidParser9ParseEdidERKNSt3__16vectorIhNS1_9allocatorIhEEEEE14kTransferIDMap, i64 0, i64 1)) #11
  br label %608

608:                                              ; preds = %606, %603, %500
  %609 = and i64 %469, 4
  %610 = icmp eq i64 %609, 0
  br i1 %610, label %639, label %611

611:                                              ; preds = %608
  %612 = load i8*, i8** %340, align 8
  %613 = load i64, i64* %342, align 8
  %614 = ptrtoint i8* %612 to i64
  %615 = sub i64 %613, %614
  %616 = icmp eq i64 %615, 0
  %617 = inttoptr i64 %613 to i8*
  br i1 %616, label %631, label %618

618:                                              ; preds = %611, %618
  %619 = phi i8* [ %629, %618 ], [ %612, %611 ]
  %620 = phi i64 [ %628, %618 ], [ %615, %611 ]
  %621 = lshr i64 %620, 1
  %622 = getelementptr inbounds i8, i8* %619, i64 %621
  %623 = load i8, i8* %622, align 1
  %624 = icmp ult i8 %623, 17
  %625 = getelementptr inbounds i8, i8* %622, i64 1
  %626 = xor i64 %621, -1
  %627 = add i64 %620, %626
  %628 = select i1 %624, i64 %627, i64 %621
  %629 = select i1 %624, i8* %625, i8* %619
  %630 = icmp eq i64 %628, 0
  br i1 %630, label %631, label %618

631:                                              ; preds = %618, %611
  %632 = phi i8* [ %612, %611 ], [ %629, %618 ]
  %633 = icmp eq i8* %632, %617
  br i1 %633, label %637, label %634

634:                                              ; preds = %631
  %635 = load i8, i8* %632, align 1
  %636 = icmp ugt i8 %635, 17
  br i1 %636, label %637, label %639

637:                                              ; preds = %634, %631
  %638 = call i8* @_ZNSt3__16vectorIN3gfx10ColorSpace10TransferIDENS_9allocatorIS3_EEE7emplaceIJRKS3_EEENS_11__wrap_iterIPS3_EENSA_IPS8_EEDpOT_(%"class.std::__1::vector.8"* %343, i8* %632, i8* dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @_ZZN7display10EdidParser9ParseEdidERKNSt3__16vectorIhNS1_9allocatorIhEEEEE14kTransferIDMap, i64 0, i64 2)) #11
  br label %639

639:                                              ; preds = %637, %634, %608
  %640 = and i64 %469, 8
  %641 = icmp eq i64 %640, 0
  br i1 %641, label %670, label %642

642:                                              ; preds = %639
  %643 = load i8*, i8** %340, align 8
  %644 = load i64, i64* %342, align 8
  %645 = ptrtoint i8* %643 to i64
  %646 = sub i64 %644, %645
  %647 = icmp eq i64 %646, 0
  %648 = inttoptr i64 %644 to i8*
  br i1 %647, label %662, label %649

649:                                              ; preds = %642, %649
  %650 = phi i8* [ %660, %649 ], [ %643, %642 ]
  %651 = phi i64 [ %659, %649 ], [ %646, %642 ]
  %652 = lshr i64 %651, 1
  %653 = getelementptr inbounds i8, i8* %650, i64 %652
  %654 = load i8, i8* %653, align 1
  %655 = icmp ult i8 %654, 19
  %656 = getelementptr inbounds i8, i8* %653, i64 1
  %657 = xor i64 %652, -1
  %658 = add i64 %651, %657
  %659 = select i1 %655, i64 %658, i64 %652
  %660 = select i1 %655, i8* %656, i8* %650
  %661 = icmp eq i64 %659, 0
  br i1 %661, label %662, label %649

662:                                              ; preds = %649, %642
  %663 = phi i8* [ %643, %642 ], [ %660, %649 ]
  %664 = icmp eq i8* %663, %648
  br i1 %664, label %668, label %665

665:                                              ; preds = %662
  %666 = load i8, i8* %663, align 1
  %667 = icmp ugt i8 %666, 19
  br i1 %667, label %668, label %670

668:                                              ; preds = %665, %662
  %669 = call i8* @_ZNSt3__16vectorIN3gfx10ColorSpace10TransferIDENS_9allocatorIS3_EEE7emplaceIJRKS3_EEENS_11__wrap_iterIPS3_EENSA_IPS8_EEDpOT_(%"class.std::__1::vector.8"* %343, i8* %663, i8* dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @_ZZN7display10EdidParser9ParseEdidERKNSt3__16vectorIhNS1_9allocatorIhEEEEE14kTransferIDMap, i64 0, i64 3)) #11
  br label %670

670:                                              ; preds = %668, %665, %639
  %671 = load i8*, i8** %16, align 8
  %672 = getelementptr inbounds i8, i8* %671, i64 %402
  %673 = load i8, i8* %672, align 1
  %674 = and i8 %673, 31
  %675 = icmp ult i8 %674, 4
  br i1 %675, label %550, label %503
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7display10EdidParserD2Ev(%"class.display::EdidParser"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 10, i32 0, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = ptrtoint i8* %3 to i64
  %7 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 10, i32 0, i32 0, i32 1
  %8 = bitcast i8** %7 to i64*
  store i64 %6, i64* %8, align 8
  tail call void @_ZdlPv(i8* nonnull %3) #12
  br label %9

9:                                                ; preds = %1, %5
  %10 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = icmp eq i8* %11, null
  br i1 %12, label %17, label %13

13:                                               ; preds = %9
  %14 = ptrtoint i8* %11 to i64
  %15 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 9, i32 0, i32 0, i32 1
  %16 = bitcast i8** %15 to i64*
  store i64 %14, i64* %16, align 8
  tail call void @_ZdlPv(i8* nonnull %11) #12
  br label %17

17:                                               ; preds = %9, %13
  %18 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 2
  %19 = bitcast %"class.std::__1::basic_string"* %18 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %20 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %19, i64 0, i32 1, i32 0
  %21 = load i8, i8* %20, align 1
  %22 = icmp slt i8 %21, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %17
  %24 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  tail call void @_ZdlPv(i8* %25) #12
  br label %26

26:                                               ; preds = %17, %23
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK7display10EdidParser14GetProductCodeEv(%"class.display::EdidParser"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 0
  %3 = load i16, i16* %2, align 8
  %4 = zext i16 %3 to i32
  %5 = shl nuw i32 %4, 16
  %6 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 1
  %7 = load i16, i16* %6, align 2
  %8 = zext i16 %7 to i32
  %9 = or i32 %5, %8
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK7display10EdidParser12GetDisplayIdEh(%"class.display::EdidParser"*, i8 zeroext) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 2
  %4 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %5 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %4, i64 0, i32 1, i32 0
  %6 = load i8, i8* %5, align 1
  %7 = icmp slt i8 %6, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %10 = load i64, i64* %9, align 8
  br label %13

11:                                               ; preds = %2
  %12 = zext i8 %6 to i64
  br label %13

13:                                               ; preds = %8, %11
  %14 = phi i64 [ %10, %8 ], [ %12, %11 ]
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %18, label %16

16:                                               ; preds = %13
  %17 = tail call i32 @_ZN4base4HashERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(%"class.std::__1::basic_string"* dereferenceable(24) %3) #11
  br label %18

18:                                               ; preds = %13, %16
  %19 = phi i32 [ %17, %16 ], [ 0, %13 ]
  %20 = getelementptr inbounds %"class.display::EdidParser", %"class.display::EdidParser"* %0, i64 0, i32 0
  %21 = load i16, i16* %20, align 8
  %22 = tail call i64 @_ZN7display17GenerateDisplayIDEtjh(i16 zeroext %21, i32 %19, i8 zeroext %1) #11
  ret i64 %22
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare i32 @_ZN4base4HashERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(%"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #3

declare i64 @_ZN7display17GenerateDisplayIDEtjh(i16 zeroext, i32, i8 zeroext) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN7display10EdidParser44SplitProductCodeInManufacturerIdAndProductIdElPtS1_(i64, i16* nocapture, i16* nocapture) local_unnamed_addr #4 align 2 {
  %4 = trunc i64 %0 to i16
  store i16 %4, i16* %2, align 2
  %5 = lshr i64 %0, 16
  %6 = trunc i64 %5 to i16
  store i16 %6, i16* %1, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7display10EdidParser22ManufacturerIdToStringEt(%"class.std::__1::basic_string"* noalias sret, i16 zeroext) local_unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = bitcast i32* %3 to [4 x i8]*
  %5 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #11
  store i32 0, i32* %3, align 4
  %6 = trunc i16 %1 to i8
  %7 = and i8 %6, 31
  %8 = or i8 %7, 64
  %9 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 2
  store i8 %8, i8* %9, align 2
  %10 = lshr i16 %1, 5
  %11 = trunc i16 %10 to i8
  %12 = and i8 %11, 31
  %13 = or i8 %12, 64
  %14 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 1
  store i8 %13, i8* %14, align 1
  %15 = lshr i16 %1, 10
  %16 = trunc i16 %15 to i8
  %17 = and i8 %16, 31
  %18 = or i8 %17, 64
  store i8 %18, i8* %5, align 4
  %19 = call i64 @strlen(i8* nonnull %5) #11
  %20 = icmp ugt i64 %19, -17
  br i1 %20, label %21, label %23

21:                                               ; preds = %2
  %22 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %22) #15
  unreachable

23:                                               ; preds = %2
  %24 = icmp ult i64 %19, 23
  br i1 %24, label %33, label %25

25:                                               ; preds = %23
  %26 = add nuw i64 %19, 16
  %27 = and i64 %26, -16
  %28 = tail call i8* @_Znwm(i64 %27) #12
  %29 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %28, i8** %29, align 8
  %30 = or i64 %27, -9223372036854775808
  %31 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %30, i64* %31, align 8
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %19, i64* %32, align 8
  br label %39

33:                                               ; preds = %23
  %34 = trunc i64 %19 to i8
  %35 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %36 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %35, i64 0, i32 1, i32 0
  store i8 %34, i8* %36, align 1
  %37 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %38 = icmp eq i64 %19, 0
  br i1 %38, label %41, label %39

39:                                               ; preds = %33, %25
  %40 = phi i8* [ %28, %25 ], [ %37, %33 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %40, i8* nonnull align 4 %5, i64 %19, i1 false) #11
  br label %41

41:                                               ; preds = %33, %39
  %42 = phi i8* [ %37, %33 ], [ %40, %39 ]
  %43 = getelementptr inbounds i8, i8* %42, i64 %19
  store i8 0, i8* %43, align 1
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #11
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7display10EdidParser17ProductIdToStringEt(%"class.std::__1::basic_string"* noalias sret, i16 zeroext) local_unnamed_addr #0 align 2 {
  %3 = lshr i16 %1, 8
  %4 = zext i16 %3 to i32
  %5 = and i16 %1, 255
  %6 = zext i16 %5 to i32
  tail call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret %0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 %6, i32 %4) #11
  ret void
}

declare void @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret, i8*, ...) local_unnamed_addr #3

declare i32 @_ZN4base19TrimWhitespaceASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEENS_13TrimPositionsEPNS1_12basic_stringIcS3_NS1_9allocatorIcEEEE(i8*, i64, i32, %"class.std::__1::basic_string"*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare void @_ZN3gfx17HDRStaticMetadataC1Ev(%"struct.gfx::HDRStaticMetadata"*) unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

declare void @_ZN3gfx17HDRStaticMetadataC1ERKS0_(%"struct.gfx::HDRStaticMetadata"*, %"struct.gfx::HDRStaticMetadata"* dereferenceable(24)) unnamed_addr #3

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #8

declare void @_ZN4base23UmaHistogramExactLinearEPKcii(i8*, i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind readnone
declare i16** @__ctype_b_loc() local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNSt3__16vectorIN3gfx10ColorSpace9PrimaryIDENS_9allocatorIS3_EEE7emplaceIJRKS3_EEENS_11__wrap_iterIPS3_EENSA_IPS8_EEDpOT_(%"class.std::__1::vector"*, i8*, i8* dereferenceable(1)) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint i8* %1 to i64
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = load i8*, i8** %6, align 8
  %8 = ptrtoint i8* %7 to i64
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = icmp ult i8* %7, %10
  %12 = ptrtoint i8* %10 to i64
  br i1 %11, label %13, label %133

13:                                               ; preds = %3
  %14 = icmp eq i8* %7, %1
  %15 = load i8, i8* %2, align 1
  br i1 %14, label %16, label %20

16:                                               ; preds = %13
  store i8 %15, i8* %1, align 1
  %17 = getelementptr inbounds i8, i8* %1, i64 1
  %18 = ptrtoint i8* %17 to i64
  %19 = bitcast i8** %6 to i64*
  store i64 %18, i64* %19, align 8
  br label %311

20:                                               ; preds = %13
  %21 = getelementptr inbounds i8, i8* %1, i64 1
  %22 = ptrtoint i8* %21 to i64
  %23 = sub i64 %8, %22
  %24 = getelementptr inbounds i8, i8* %1, i64 %23
  %25 = icmp ult i8* %24, %7
  br i1 %25, label %26, label %118

26:                                               ; preds = %20
  %27 = sub i64 1, %8
  %28 = getelementptr i8, i8* %7, i64 %27
  %29 = ptrtoint i8* %28 to i64
  %30 = icmp ult i8* %28, inttoptr (i64 32 to i8*)
  br i1 %30, label %31, label %34

31:                                               ; preds = %113, %26
  %32 = phi i8* [ %24, %26 ], [ %36, %113 ]
  %33 = phi i8* [ %7, %26 ], [ %37, %113 ]
  br label %125

34:                                               ; preds = %26
  %35 = and i64 %29, -32
  %36 = getelementptr i8, i8* %24, i64 %35
  %37 = getelementptr i8, i8* %7, i64 %35
  %38 = add i64 %35, -32
  %39 = lshr exact i64 %38, 5
  %40 = add nuw nsw i64 %39, 1
  %41 = and i64 %40, 3
  %42 = icmp ult i64 %38, 96
  br i1 %42, label %94, label %43

43:                                               ; preds = %34
  %44 = sub nsw i64 %40, %41
  br label %45

45:                                               ; preds = %45, %43
  %46 = phi i64 [ 0, %43 ], [ %91, %45 ]
  %47 = phi i64 [ %44, %43 ], [ %92, %45 ]
  %48 = getelementptr i8, i8* %24, i64 %46
  %49 = getelementptr i8, i8* %7, i64 %46
  %50 = bitcast i8* %48 to <16 x i8>*
  %51 = load <16 x i8>, <16 x i8>* %50, align 1, !alias.scope !7
  %52 = getelementptr i8, i8* %48, i64 16
  %53 = bitcast i8* %52 to <16 x i8>*
  %54 = load <16 x i8>, <16 x i8>* %53, align 1, !alias.scope !7
  %55 = bitcast i8* %49 to <16 x i8>*
  store <16 x i8> %51, <16 x i8>* %55, align 1, !alias.scope !10, !noalias !7
  %56 = getelementptr i8, i8* %49, i64 16
  %57 = bitcast i8* %56 to <16 x i8>*
  store <16 x i8> %54, <16 x i8>* %57, align 1, !alias.scope !10, !noalias !7
  %58 = or i64 %46, 32
  %59 = getelementptr i8, i8* %24, i64 %58
  %60 = getelementptr i8, i8* %7, i64 %58
  %61 = bitcast i8* %59 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 1, !alias.scope !7
  %63 = getelementptr i8, i8* %59, i64 16
  %64 = bitcast i8* %63 to <16 x i8>*
  %65 = load <16 x i8>, <16 x i8>* %64, align 1, !alias.scope !7
  %66 = bitcast i8* %60 to <16 x i8>*
  store <16 x i8> %62, <16 x i8>* %66, align 1, !alias.scope !10, !noalias !7
  %67 = getelementptr i8, i8* %60, i64 16
  %68 = bitcast i8* %67 to <16 x i8>*
  store <16 x i8> %65, <16 x i8>* %68, align 1, !alias.scope !10, !noalias !7
  %69 = or i64 %46, 64
  %70 = getelementptr i8, i8* %24, i64 %69
  %71 = getelementptr i8, i8* %7, i64 %69
  %72 = bitcast i8* %70 to <16 x i8>*
  %73 = load <16 x i8>, <16 x i8>* %72, align 1, !alias.scope !7
  %74 = getelementptr i8, i8* %70, i64 16
  %75 = bitcast i8* %74 to <16 x i8>*
  %76 = load <16 x i8>, <16 x i8>* %75, align 1, !alias.scope !7
  %77 = bitcast i8* %71 to <16 x i8>*
  store <16 x i8> %73, <16 x i8>* %77, align 1, !alias.scope !10, !noalias !7
  %78 = getelementptr i8, i8* %71, i64 16
  %79 = bitcast i8* %78 to <16 x i8>*
  store <16 x i8> %76, <16 x i8>* %79, align 1, !alias.scope !10, !noalias !7
  %80 = or i64 %46, 96
  %81 = getelementptr i8, i8* %24, i64 %80
  %82 = getelementptr i8, i8* %7, i64 %80
  %83 = bitcast i8* %81 to <16 x i8>*
  %84 = load <16 x i8>, <16 x i8>* %83, align 1, !alias.scope !7
  %85 = getelementptr i8, i8* %81, i64 16
  %86 = bitcast i8* %85 to <16 x i8>*
  %87 = load <16 x i8>, <16 x i8>* %86, align 1, !alias.scope !7
  %88 = bitcast i8* %82 to <16 x i8>*
  store <16 x i8> %84, <16 x i8>* %88, align 1, !alias.scope !10, !noalias !7
  %89 = getelementptr i8, i8* %82, i64 16
  %90 = bitcast i8* %89 to <16 x i8>*
  store <16 x i8> %87, <16 x i8>* %90, align 1, !alias.scope !10, !noalias !7
  %91 = add i64 %46, 128
  %92 = add i64 %47, -4
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %94, label %45, !llvm.loop !12

94:                                               ; preds = %45, %34
  %95 = phi i64 [ 0, %34 ], [ %91, %45 ]
  %96 = icmp eq i64 %41, 0
  br i1 %96, label %113, label %97

97:                                               ; preds = %94, %97
  %98 = phi i64 [ %110, %97 ], [ %95, %94 ]
  %99 = phi i64 [ %111, %97 ], [ %41, %94 ]
  %100 = getelementptr i8, i8* %24, i64 %98
  %101 = getelementptr i8, i8* %7, i64 %98
  %102 = bitcast i8* %100 to <16 x i8>*
  %103 = load <16 x i8>, <16 x i8>* %102, align 1, !alias.scope !7
  %104 = getelementptr i8, i8* %100, i64 16
  %105 = bitcast i8* %104 to <16 x i8>*
  %106 = load <16 x i8>, <16 x i8>* %105, align 1, !alias.scope !7
  %107 = bitcast i8* %101 to <16 x i8>*
  store <16 x i8> %103, <16 x i8>* %107, align 1, !alias.scope !10, !noalias !7
  %108 = getelementptr i8, i8* %101, i64 16
  %109 = bitcast i8* %108 to <16 x i8>*
  store <16 x i8> %106, <16 x i8>* %109, align 1, !alias.scope !10, !noalias !7
  %110 = add i64 %98, 32
  %111 = add i64 %99, -1
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %113, label %97, !llvm.loop !14

113:                                              ; preds = %97, %94
  %114 = icmp eq i64 %35, %29
  br i1 %114, label %115, label %31

115:                                              ; preds = %125, %113
  %116 = phi i8* [ %37, %113 ], [ %130, %125 ]
  %117 = ptrtoint i8* %116 to i64
  br label %118

118:                                              ; preds = %115, %20
  %119 = phi i64 [ %117, %115 ], [ %8, %20 ]
  %120 = bitcast i8** %6 to i64*
  store i64 %119, i64* %120, align 8
  %121 = icmp eq i64 %23, 0
  br i1 %121, label %132, label %122

122:                                              ; preds = %118
  %123 = sub i64 0, %23
  %124 = getelementptr inbounds i8, i8* %7, i64 %123
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %124, i8* align 1 %1, i64 %23, i1 false) #11
  br label %132

125:                                              ; preds = %31, %125
  %126 = phi i8* [ %129, %125 ], [ %32, %31 ]
  %127 = phi i8* [ %130, %125 ], [ %33, %31 ]
  %128 = load i8, i8* %126, align 1
  store i8 %128, i8* %127, align 1
  %129 = getelementptr inbounds i8, i8* %126, i64 1
  %130 = getelementptr inbounds i8, i8* %127, i64 1
  %131 = icmp eq i8* %129, %7
  br i1 %131, label %115, label %125, !llvm.loop !16

132:                                              ; preds = %118, %122
  store i8 %15, i8* %1, align 1
  br label %311

133:                                              ; preds = %3
  %134 = bitcast i8** %6 to i64*
  %135 = bitcast %"class.std::__1::vector"* %0 to i64*
  %136 = load i64, i64* %135, align 8
  %137 = sub i64 %8, %136
  %138 = add i64 %137, 1
  %139 = icmp slt i64 %138, 0
  br i1 %139, label %140, label %142

140:                                              ; preds = %133
  %141 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %141) #15
  unreachable

142:                                              ; preds = %133
  %143 = bitcast i8** %9 to i64*
  %144 = sub i64 %12, %136
  %145 = icmp ult i64 %144, 4611686018427387903
  br i1 %145, label %148, label %146

146:                                              ; preds = %142
  %147 = sub i64 %4, %136
  br label %154

148:                                              ; preds = %142
  %149 = shl i64 %144, 1
  %150 = icmp ult i64 %149, %138
  %151 = select i1 %150, i64 %138, i64 %149
  %152 = sub i64 %4, %136
  %153 = icmp eq i64 %151, 0
  br i1 %153, label %158, label %154

154:                                              ; preds = %146, %148
  %155 = phi i64 [ %147, %146 ], [ %152, %148 ]
  %156 = phi i64 [ 9223372036854775807, %146 ], [ %151, %148 ]
  %157 = tail call i8* @_Znwm(i64 %156) #12
  br label %158

158:                                              ; preds = %148, %154
  %159 = phi i64 [ %155, %154 ], [ %152, %148 ]
  %160 = phi i64 [ %156, %154 ], [ 0, %148 ]
  %161 = phi i8* [ %157, %154 ], [ null, %148 ]
  %162 = ptrtoint i8* %161 to i64
  %163 = getelementptr inbounds i8, i8* %161, i64 %159
  %164 = ptrtoint i8* %163 to i64
  %165 = getelementptr inbounds i8, i8* %161, i64 %160
  %166 = ptrtoint i8* %165 to i64
  %167 = icmp eq i64 %159, %160
  br i1 %167, label %168, label %186

168:                                              ; preds = %158
  %169 = icmp sgt i64 %159, 0
  br i1 %169, label %170, label %175

170:                                              ; preds = %168
  %171 = sub i64 1, %162
  %172 = add i64 %171, %164
  %173 = sdiv i64 %172, -2
  %174 = getelementptr inbounds i8, i8* %163, i64 %173
  br label %186

175:                                              ; preds = %168
  %176 = shl i64 %159, 1
  %177 = icmp eq i64 %176, 0
  %178 = select i1 %177, i64 1, i64 %176
  %179 = lshr i64 %178, 2
  %180 = tail call i8* @_Znwm(i64 %178) #12
  %181 = getelementptr inbounds i8, i8* %180, i64 %179
  %182 = getelementptr inbounds i8, i8* %180, i64 %178
  %183 = ptrtoint i8* %182 to i64
  %184 = icmp eq i8* %161, null
  br i1 %184, label %186, label %185

185:                                              ; preds = %175
  tail call void @_ZdlPv(i8* nonnull %161) #12
  br label %186

186:                                              ; preds = %158, %170, %175, %185
  %187 = phi i8* [ %174, %170 ], [ %181, %175 ], [ %181, %185 ], [ %163, %158 ]
  %188 = phi i64 [ %166, %170 ], [ %183, %175 ], [ %183, %185 ], [ %166, %158 ]
  %189 = load i8, i8* %2, align 1
  store i8 %189, i8* %187, align 1
  %190 = getelementptr inbounds i8, i8* %187, i64 1
  %191 = load i8*, i8** %5, align 8
  %192 = ptrtoint i8* %191 to i64
  %193 = sub i64 %4, %192
  %194 = sub i64 0, %193
  %195 = getelementptr inbounds i8, i8* %187, i64 %194
  %196 = ptrtoint i8* %195 to i64
  %197 = icmp sgt i64 %193, 0
  br i1 %197, label %198, label %199

198:                                              ; preds = %186
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %195, i8* align 1 %191, i64 %193, i1 false) #11
  br label %199

199:                                              ; preds = %198, %186
  %200 = load i8*, i8** %6, align 8
  %201 = icmp eq i8* %200, %1
  br i1 %201, label %305, label %202

202:                                              ; preds = %199
  %203 = ptrtoint i8* %200 to i64
  %204 = sub i64 %203, %4
  %205 = icmp ult i64 %204, 32
  br i1 %205, label %295, label %206

206:                                              ; preds = %202
  %207 = sub i64 1, %4
  %208 = getelementptr i8, i8* %200, i64 %207
  %209 = ptrtoint i8* %208 to i64
  %210 = getelementptr i8, i8* %187, i64 %209
  %211 = icmp ult i8* %190, %200
  %212 = icmp ugt i8* %210, %1
  %213 = and i1 %211, %212
  br i1 %213, label %295, label %214

214:                                              ; preds = %206
  %215 = and i64 %204, -32
  %216 = getelementptr i8, i8* %190, i64 %215
  %217 = getelementptr i8, i8* %1, i64 %215
  %218 = add i64 %215, -32
  %219 = lshr exact i64 %218, 5
  %220 = add nuw nsw i64 %219, 1
  %221 = and i64 %220, 3
  %222 = icmp ult i64 %218, 96
  br i1 %222, label %274, label %223

223:                                              ; preds = %214
  %224 = sub nsw i64 %220, %221
  br label %225

225:                                              ; preds = %225, %223
  %226 = phi i64 [ 0, %223 ], [ %271, %225 ]
  %227 = phi i64 [ %224, %223 ], [ %272, %225 ]
  %228 = getelementptr i8, i8* %190, i64 %226
  %229 = getelementptr i8, i8* %1, i64 %226
  %230 = bitcast i8* %229 to <16 x i8>*
  %231 = load <16 x i8>, <16 x i8>* %230, align 1, !alias.scope !17
  %232 = getelementptr i8, i8* %229, i64 16
  %233 = bitcast i8* %232 to <16 x i8>*
  %234 = load <16 x i8>, <16 x i8>* %233, align 1, !alias.scope !17
  %235 = bitcast i8* %228 to <16 x i8>*
  store <16 x i8> %231, <16 x i8>* %235, align 1, !alias.scope !20, !noalias !17
  %236 = getelementptr i8, i8* %228, i64 16
  %237 = bitcast i8* %236 to <16 x i8>*
  store <16 x i8> %234, <16 x i8>* %237, align 1, !alias.scope !20, !noalias !17
  %238 = or i64 %226, 32
  %239 = getelementptr i8, i8* %190, i64 %238
  %240 = getelementptr i8, i8* %1, i64 %238
  %241 = bitcast i8* %240 to <16 x i8>*
  %242 = load <16 x i8>, <16 x i8>* %241, align 1, !alias.scope !17
  %243 = getelementptr i8, i8* %240, i64 16
  %244 = bitcast i8* %243 to <16 x i8>*
  %245 = load <16 x i8>, <16 x i8>* %244, align 1, !alias.scope !17
  %246 = bitcast i8* %239 to <16 x i8>*
  store <16 x i8> %242, <16 x i8>* %246, align 1, !alias.scope !20, !noalias !17
  %247 = getelementptr i8, i8* %239, i64 16
  %248 = bitcast i8* %247 to <16 x i8>*
  store <16 x i8> %245, <16 x i8>* %248, align 1, !alias.scope !20, !noalias !17
  %249 = or i64 %226, 64
  %250 = getelementptr i8, i8* %190, i64 %249
  %251 = getelementptr i8, i8* %1, i64 %249
  %252 = bitcast i8* %251 to <16 x i8>*
  %253 = load <16 x i8>, <16 x i8>* %252, align 1, !alias.scope !17
  %254 = getelementptr i8, i8* %251, i64 16
  %255 = bitcast i8* %254 to <16 x i8>*
  %256 = load <16 x i8>, <16 x i8>* %255, align 1, !alias.scope !17
  %257 = bitcast i8* %250 to <16 x i8>*
  store <16 x i8> %253, <16 x i8>* %257, align 1, !alias.scope !20, !noalias !17
  %258 = getelementptr i8, i8* %250, i64 16
  %259 = bitcast i8* %258 to <16 x i8>*
  store <16 x i8> %256, <16 x i8>* %259, align 1, !alias.scope !20, !noalias !17
  %260 = or i64 %226, 96
  %261 = getelementptr i8, i8* %190, i64 %260
  %262 = getelementptr i8, i8* %1, i64 %260
  %263 = bitcast i8* %262 to <16 x i8>*
  %264 = load <16 x i8>, <16 x i8>* %263, align 1, !alias.scope !17
  %265 = getelementptr i8, i8* %262, i64 16
  %266 = bitcast i8* %265 to <16 x i8>*
  %267 = load <16 x i8>, <16 x i8>* %266, align 1, !alias.scope !17
  %268 = bitcast i8* %261 to <16 x i8>*
  store <16 x i8> %264, <16 x i8>* %268, align 1, !alias.scope !20, !noalias !17
  %269 = getelementptr i8, i8* %261, i64 16
  %270 = bitcast i8* %269 to <16 x i8>*
  store <16 x i8> %267, <16 x i8>* %270, align 1, !alias.scope !20, !noalias !17
  %271 = add i64 %226, 128
  %272 = add i64 %227, -4
  %273 = icmp eq i64 %272, 0
  br i1 %273, label %274, label %225, !llvm.loop !22

274:                                              ; preds = %225, %214
  %275 = phi i64 [ 0, %214 ], [ %271, %225 ]
  %276 = icmp eq i64 %221, 0
  br i1 %276, label %293, label %277

277:                                              ; preds = %274, %277
  %278 = phi i64 [ %290, %277 ], [ %275, %274 ]
  %279 = phi i64 [ %291, %277 ], [ %221, %274 ]
  %280 = getelementptr i8, i8* %190, i64 %278
  %281 = getelementptr i8, i8* %1, i64 %278
  %282 = bitcast i8* %281 to <16 x i8>*
  %283 = load <16 x i8>, <16 x i8>* %282, align 1, !alias.scope !17
  %284 = getelementptr i8, i8* %281, i64 16
  %285 = bitcast i8* %284 to <16 x i8>*
  %286 = load <16 x i8>, <16 x i8>* %285, align 1, !alias.scope !17
  %287 = bitcast i8* %280 to <16 x i8>*
  store <16 x i8> %283, <16 x i8>* %287, align 1, !alias.scope !20, !noalias !17
  %288 = getelementptr i8, i8* %280, i64 16
  %289 = bitcast i8* %288 to <16 x i8>*
  store <16 x i8> %286, <16 x i8>* %289, align 1, !alias.scope !20, !noalias !17
  %290 = add i64 %278, 32
  %291 = add i64 %279, -1
  %292 = icmp eq i64 %291, 0
  br i1 %292, label %293, label %277, !llvm.loop !23

293:                                              ; preds = %277, %274
  %294 = icmp eq i64 %204, %215
  br i1 %294, label %305, label %295

295:                                              ; preds = %293, %206, %202
  %296 = phi i8* [ %190, %206 ], [ %190, %202 ], [ %216, %293 ]
  %297 = phi i8* [ %1, %206 ], [ %1, %202 ], [ %217, %293 ]
  br label %298

298:                                              ; preds = %295, %298
  %299 = phi i8* [ %303, %298 ], [ %296, %295 ]
  %300 = phi i8* [ %302, %298 ], [ %297, %295 ]
  %301 = load i8, i8* %300, align 1
  store i8 %301, i8* %299, align 1
  %302 = getelementptr inbounds i8, i8* %300, i64 1
  %303 = getelementptr inbounds i8, i8* %299, i64 1
  %304 = icmp eq i8* %302, %200
  br i1 %304, label %305, label %298, !llvm.loop !24

305:                                              ; preds = %298, %293, %199
  %306 = phi i8* [ %190, %199 ], [ %216, %293 ], [ %303, %298 ]
  %307 = ptrtoint i8* %306 to i64
  %308 = load i8*, i8** %5, align 8
  store i64 %196, i64* %135, align 8
  store i64 %307, i64* %134, align 8
  store i64 %188, i64* %143, align 8
  %309 = icmp eq i8* %308, null
  br i1 %309, label %311, label %310

310:                                              ; preds = %305
  tail call void @_ZdlPv(i8* nonnull %308) #12
  br label %311

311:                                              ; preds = %310, %305, %16, %132
  %312 = phi i8* [ %1, %16 ], [ %1, %132 ], [ %187, %305 ], [ %187, %310 ]
  ret i8* %312
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNSt3__16vectorIN3gfx10ColorSpace10TransferIDENS_9allocatorIS3_EEE7emplaceIJRKS3_EEENS_11__wrap_iterIPS3_EENSA_IPS8_EEDpOT_(%"class.std::__1::vector.8"*, i8*, i8* dereferenceable(1)) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint i8* %1 to i64
  %5 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 1
  %7 = load i8*, i8** %6, align 8
  %8 = ptrtoint i8* %7 to i64
  %9 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = icmp ult i8* %7, %10
  %12 = ptrtoint i8* %10 to i64
  br i1 %11, label %13, label %133

13:                                               ; preds = %3
  %14 = icmp eq i8* %7, %1
  %15 = load i8, i8* %2, align 1
  br i1 %14, label %16, label %20

16:                                               ; preds = %13
  store i8 %15, i8* %1, align 1
  %17 = getelementptr inbounds i8, i8* %1, i64 1
  %18 = ptrtoint i8* %17 to i64
  %19 = bitcast i8** %6 to i64*
  store i64 %18, i64* %19, align 8
  br label %311

20:                                               ; preds = %13
  %21 = getelementptr inbounds i8, i8* %1, i64 1
  %22 = ptrtoint i8* %21 to i64
  %23 = sub i64 %8, %22
  %24 = getelementptr inbounds i8, i8* %1, i64 %23
  %25 = icmp ult i8* %24, %7
  br i1 %25, label %26, label %118

26:                                               ; preds = %20
  %27 = sub i64 1, %8
  %28 = getelementptr i8, i8* %7, i64 %27
  %29 = ptrtoint i8* %28 to i64
  %30 = icmp ult i8* %28, inttoptr (i64 32 to i8*)
  br i1 %30, label %31, label %34

31:                                               ; preds = %113, %26
  %32 = phi i8* [ %24, %26 ], [ %36, %113 ]
  %33 = phi i8* [ %7, %26 ], [ %37, %113 ]
  br label %125

34:                                               ; preds = %26
  %35 = and i64 %29, -32
  %36 = getelementptr i8, i8* %24, i64 %35
  %37 = getelementptr i8, i8* %7, i64 %35
  %38 = add i64 %35, -32
  %39 = lshr exact i64 %38, 5
  %40 = add nuw nsw i64 %39, 1
  %41 = and i64 %40, 3
  %42 = icmp ult i64 %38, 96
  br i1 %42, label %94, label %43

43:                                               ; preds = %34
  %44 = sub nsw i64 %40, %41
  br label %45

45:                                               ; preds = %45, %43
  %46 = phi i64 [ 0, %43 ], [ %91, %45 ]
  %47 = phi i64 [ %44, %43 ], [ %92, %45 ]
  %48 = getelementptr i8, i8* %24, i64 %46
  %49 = getelementptr i8, i8* %7, i64 %46
  %50 = bitcast i8* %48 to <16 x i8>*
  %51 = load <16 x i8>, <16 x i8>* %50, align 1, !alias.scope !25
  %52 = getelementptr i8, i8* %48, i64 16
  %53 = bitcast i8* %52 to <16 x i8>*
  %54 = load <16 x i8>, <16 x i8>* %53, align 1, !alias.scope !25
  %55 = bitcast i8* %49 to <16 x i8>*
  store <16 x i8> %51, <16 x i8>* %55, align 1, !alias.scope !28, !noalias !25
  %56 = getelementptr i8, i8* %49, i64 16
  %57 = bitcast i8* %56 to <16 x i8>*
  store <16 x i8> %54, <16 x i8>* %57, align 1, !alias.scope !28, !noalias !25
  %58 = or i64 %46, 32
  %59 = getelementptr i8, i8* %24, i64 %58
  %60 = getelementptr i8, i8* %7, i64 %58
  %61 = bitcast i8* %59 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 1, !alias.scope !25
  %63 = getelementptr i8, i8* %59, i64 16
  %64 = bitcast i8* %63 to <16 x i8>*
  %65 = load <16 x i8>, <16 x i8>* %64, align 1, !alias.scope !25
  %66 = bitcast i8* %60 to <16 x i8>*
  store <16 x i8> %62, <16 x i8>* %66, align 1, !alias.scope !28, !noalias !25
  %67 = getelementptr i8, i8* %60, i64 16
  %68 = bitcast i8* %67 to <16 x i8>*
  store <16 x i8> %65, <16 x i8>* %68, align 1, !alias.scope !28, !noalias !25
  %69 = or i64 %46, 64
  %70 = getelementptr i8, i8* %24, i64 %69
  %71 = getelementptr i8, i8* %7, i64 %69
  %72 = bitcast i8* %70 to <16 x i8>*
  %73 = load <16 x i8>, <16 x i8>* %72, align 1, !alias.scope !25
  %74 = getelementptr i8, i8* %70, i64 16
  %75 = bitcast i8* %74 to <16 x i8>*
  %76 = load <16 x i8>, <16 x i8>* %75, align 1, !alias.scope !25
  %77 = bitcast i8* %71 to <16 x i8>*
  store <16 x i8> %73, <16 x i8>* %77, align 1, !alias.scope !28, !noalias !25
  %78 = getelementptr i8, i8* %71, i64 16
  %79 = bitcast i8* %78 to <16 x i8>*
  store <16 x i8> %76, <16 x i8>* %79, align 1, !alias.scope !28, !noalias !25
  %80 = or i64 %46, 96
  %81 = getelementptr i8, i8* %24, i64 %80
  %82 = getelementptr i8, i8* %7, i64 %80
  %83 = bitcast i8* %81 to <16 x i8>*
  %84 = load <16 x i8>, <16 x i8>* %83, align 1, !alias.scope !25
  %85 = getelementptr i8, i8* %81, i64 16
  %86 = bitcast i8* %85 to <16 x i8>*
  %87 = load <16 x i8>, <16 x i8>* %86, align 1, !alias.scope !25
  %88 = bitcast i8* %82 to <16 x i8>*
  store <16 x i8> %84, <16 x i8>* %88, align 1, !alias.scope !28, !noalias !25
  %89 = getelementptr i8, i8* %82, i64 16
  %90 = bitcast i8* %89 to <16 x i8>*
  store <16 x i8> %87, <16 x i8>* %90, align 1, !alias.scope !28, !noalias !25
  %91 = add i64 %46, 128
  %92 = add i64 %47, -4
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %94, label %45, !llvm.loop !30

94:                                               ; preds = %45, %34
  %95 = phi i64 [ 0, %34 ], [ %91, %45 ]
  %96 = icmp eq i64 %41, 0
  br i1 %96, label %113, label %97

97:                                               ; preds = %94, %97
  %98 = phi i64 [ %110, %97 ], [ %95, %94 ]
  %99 = phi i64 [ %111, %97 ], [ %41, %94 ]
  %100 = getelementptr i8, i8* %24, i64 %98
  %101 = getelementptr i8, i8* %7, i64 %98
  %102 = bitcast i8* %100 to <16 x i8>*
  %103 = load <16 x i8>, <16 x i8>* %102, align 1, !alias.scope !25
  %104 = getelementptr i8, i8* %100, i64 16
  %105 = bitcast i8* %104 to <16 x i8>*
  %106 = load <16 x i8>, <16 x i8>* %105, align 1, !alias.scope !25
  %107 = bitcast i8* %101 to <16 x i8>*
  store <16 x i8> %103, <16 x i8>* %107, align 1, !alias.scope !28, !noalias !25
  %108 = getelementptr i8, i8* %101, i64 16
  %109 = bitcast i8* %108 to <16 x i8>*
  store <16 x i8> %106, <16 x i8>* %109, align 1, !alias.scope !28, !noalias !25
  %110 = add i64 %98, 32
  %111 = add i64 %99, -1
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %113, label %97, !llvm.loop !31

113:                                              ; preds = %97, %94
  %114 = icmp eq i64 %35, %29
  br i1 %114, label %115, label %31

115:                                              ; preds = %125, %113
  %116 = phi i8* [ %37, %113 ], [ %130, %125 ]
  %117 = ptrtoint i8* %116 to i64
  br label %118

118:                                              ; preds = %115, %20
  %119 = phi i64 [ %117, %115 ], [ %8, %20 ]
  %120 = bitcast i8** %6 to i64*
  store i64 %119, i64* %120, align 8
  %121 = icmp eq i64 %23, 0
  br i1 %121, label %132, label %122

122:                                              ; preds = %118
  %123 = sub i64 0, %23
  %124 = getelementptr inbounds i8, i8* %7, i64 %123
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %124, i8* align 1 %1, i64 %23, i1 false) #11
  br label %132

125:                                              ; preds = %31, %125
  %126 = phi i8* [ %129, %125 ], [ %32, %31 ]
  %127 = phi i8* [ %130, %125 ], [ %33, %31 ]
  %128 = load i8, i8* %126, align 1
  store i8 %128, i8* %127, align 1
  %129 = getelementptr inbounds i8, i8* %126, i64 1
  %130 = getelementptr inbounds i8, i8* %127, i64 1
  %131 = icmp eq i8* %129, %7
  br i1 %131, label %115, label %125, !llvm.loop !32

132:                                              ; preds = %118, %122
  store i8 %15, i8* %1, align 1
  br label %311

133:                                              ; preds = %3
  %134 = bitcast i8** %6 to i64*
  %135 = bitcast %"class.std::__1::vector.8"* %0 to i64*
  %136 = load i64, i64* %135, align 8
  %137 = sub i64 %8, %136
  %138 = add i64 %137, 1
  %139 = icmp slt i64 %138, 0
  br i1 %139, label %140, label %142

140:                                              ; preds = %133
  %141 = bitcast %"class.std::__1::vector.8"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %141) #15
  unreachable

142:                                              ; preds = %133
  %143 = bitcast i8** %9 to i64*
  %144 = sub i64 %12, %136
  %145 = icmp ult i64 %144, 4611686018427387903
  br i1 %145, label %148, label %146

146:                                              ; preds = %142
  %147 = sub i64 %4, %136
  br label %154

148:                                              ; preds = %142
  %149 = shl i64 %144, 1
  %150 = icmp ult i64 %149, %138
  %151 = select i1 %150, i64 %138, i64 %149
  %152 = sub i64 %4, %136
  %153 = icmp eq i64 %151, 0
  br i1 %153, label %158, label %154

154:                                              ; preds = %146, %148
  %155 = phi i64 [ %147, %146 ], [ %152, %148 ]
  %156 = phi i64 [ 9223372036854775807, %146 ], [ %151, %148 ]
  %157 = tail call i8* @_Znwm(i64 %156) #12
  br label %158

158:                                              ; preds = %148, %154
  %159 = phi i64 [ %155, %154 ], [ %152, %148 ]
  %160 = phi i64 [ %156, %154 ], [ 0, %148 ]
  %161 = phi i8* [ %157, %154 ], [ null, %148 ]
  %162 = ptrtoint i8* %161 to i64
  %163 = getelementptr inbounds i8, i8* %161, i64 %159
  %164 = ptrtoint i8* %163 to i64
  %165 = getelementptr inbounds i8, i8* %161, i64 %160
  %166 = ptrtoint i8* %165 to i64
  %167 = icmp eq i64 %159, %160
  br i1 %167, label %168, label %186

168:                                              ; preds = %158
  %169 = icmp sgt i64 %159, 0
  br i1 %169, label %170, label %175

170:                                              ; preds = %168
  %171 = sub i64 1, %162
  %172 = add i64 %171, %164
  %173 = sdiv i64 %172, -2
  %174 = getelementptr inbounds i8, i8* %163, i64 %173
  br label %186

175:                                              ; preds = %168
  %176 = shl i64 %159, 1
  %177 = icmp eq i64 %176, 0
  %178 = select i1 %177, i64 1, i64 %176
  %179 = lshr i64 %178, 2
  %180 = tail call i8* @_Znwm(i64 %178) #12
  %181 = getelementptr inbounds i8, i8* %180, i64 %179
  %182 = getelementptr inbounds i8, i8* %180, i64 %178
  %183 = ptrtoint i8* %182 to i64
  %184 = icmp eq i8* %161, null
  br i1 %184, label %186, label %185

185:                                              ; preds = %175
  tail call void @_ZdlPv(i8* nonnull %161) #12
  br label %186

186:                                              ; preds = %158, %170, %175, %185
  %187 = phi i8* [ %174, %170 ], [ %181, %175 ], [ %181, %185 ], [ %163, %158 ]
  %188 = phi i64 [ %166, %170 ], [ %183, %175 ], [ %183, %185 ], [ %166, %158 ]
  %189 = load i8, i8* %2, align 1
  store i8 %189, i8* %187, align 1
  %190 = getelementptr inbounds i8, i8* %187, i64 1
  %191 = load i8*, i8** %5, align 8
  %192 = ptrtoint i8* %191 to i64
  %193 = sub i64 %4, %192
  %194 = sub i64 0, %193
  %195 = getelementptr inbounds i8, i8* %187, i64 %194
  %196 = ptrtoint i8* %195 to i64
  %197 = icmp sgt i64 %193, 0
  br i1 %197, label %198, label %199

198:                                              ; preds = %186
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %195, i8* align 1 %191, i64 %193, i1 false) #11
  br label %199

199:                                              ; preds = %198, %186
  %200 = load i8*, i8** %6, align 8
  %201 = icmp eq i8* %200, %1
  br i1 %201, label %305, label %202

202:                                              ; preds = %199
  %203 = ptrtoint i8* %200 to i64
  %204 = sub i64 %203, %4
  %205 = icmp ult i64 %204, 32
  br i1 %205, label %295, label %206

206:                                              ; preds = %202
  %207 = sub i64 1, %4
  %208 = getelementptr i8, i8* %200, i64 %207
  %209 = ptrtoint i8* %208 to i64
  %210 = getelementptr i8, i8* %187, i64 %209
  %211 = icmp ult i8* %190, %200
  %212 = icmp ugt i8* %210, %1
  %213 = and i1 %211, %212
  br i1 %213, label %295, label %214

214:                                              ; preds = %206
  %215 = and i64 %204, -32
  %216 = getelementptr i8, i8* %190, i64 %215
  %217 = getelementptr i8, i8* %1, i64 %215
  %218 = add i64 %215, -32
  %219 = lshr exact i64 %218, 5
  %220 = add nuw nsw i64 %219, 1
  %221 = and i64 %220, 3
  %222 = icmp ult i64 %218, 96
  br i1 %222, label %274, label %223

223:                                              ; preds = %214
  %224 = sub nsw i64 %220, %221
  br label %225

225:                                              ; preds = %225, %223
  %226 = phi i64 [ 0, %223 ], [ %271, %225 ]
  %227 = phi i64 [ %224, %223 ], [ %272, %225 ]
  %228 = getelementptr i8, i8* %190, i64 %226
  %229 = getelementptr i8, i8* %1, i64 %226
  %230 = bitcast i8* %229 to <16 x i8>*
  %231 = load <16 x i8>, <16 x i8>* %230, align 1, !alias.scope !33
  %232 = getelementptr i8, i8* %229, i64 16
  %233 = bitcast i8* %232 to <16 x i8>*
  %234 = load <16 x i8>, <16 x i8>* %233, align 1, !alias.scope !33
  %235 = bitcast i8* %228 to <16 x i8>*
  store <16 x i8> %231, <16 x i8>* %235, align 1, !alias.scope !36, !noalias !33
  %236 = getelementptr i8, i8* %228, i64 16
  %237 = bitcast i8* %236 to <16 x i8>*
  store <16 x i8> %234, <16 x i8>* %237, align 1, !alias.scope !36, !noalias !33
  %238 = or i64 %226, 32
  %239 = getelementptr i8, i8* %190, i64 %238
  %240 = getelementptr i8, i8* %1, i64 %238
  %241 = bitcast i8* %240 to <16 x i8>*
  %242 = load <16 x i8>, <16 x i8>* %241, align 1, !alias.scope !33
  %243 = getelementptr i8, i8* %240, i64 16
  %244 = bitcast i8* %243 to <16 x i8>*
  %245 = load <16 x i8>, <16 x i8>* %244, align 1, !alias.scope !33
  %246 = bitcast i8* %239 to <16 x i8>*
  store <16 x i8> %242, <16 x i8>* %246, align 1, !alias.scope !36, !noalias !33
  %247 = getelementptr i8, i8* %239, i64 16
  %248 = bitcast i8* %247 to <16 x i8>*
  store <16 x i8> %245, <16 x i8>* %248, align 1, !alias.scope !36, !noalias !33
  %249 = or i64 %226, 64
  %250 = getelementptr i8, i8* %190, i64 %249
  %251 = getelementptr i8, i8* %1, i64 %249
  %252 = bitcast i8* %251 to <16 x i8>*
  %253 = load <16 x i8>, <16 x i8>* %252, align 1, !alias.scope !33
  %254 = getelementptr i8, i8* %251, i64 16
  %255 = bitcast i8* %254 to <16 x i8>*
  %256 = load <16 x i8>, <16 x i8>* %255, align 1, !alias.scope !33
  %257 = bitcast i8* %250 to <16 x i8>*
  store <16 x i8> %253, <16 x i8>* %257, align 1, !alias.scope !36, !noalias !33
  %258 = getelementptr i8, i8* %250, i64 16
  %259 = bitcast i8* %258 to <16 x i8>*
  store <16 x i8> %256, <16 x i8>* %259, align 1, !alias.scope !36, !noalias !33
  %260 = or i64 %226, 96
  %261 = getelementptr i8, i8* %190, i64 %260
  %262 = getelementptr i8, i8* %1, i64 %260
  %263 = bitcast i8* %262 to <16 x i8>*
  %264 = load <16 x i8>, <16 x i8>* %263, align 1, !alias.scope !33
  %265 = getelementptr i8, i8* %262, i64 16
  %266 = bitcast i8* %265 to <16 x i8>*
  %267 = load <16 x i8>, <16 x i8>* %266, align 1, !alias.scope !33
  %268 = bitcast i8* %261 to <16 x i8>*
  store <16 x i8> %264, <16 x i8>* %268, align 1, !alias.scope !36, !noalias !33
  %269 = getelementptr i8, i8* %261, i64 16
  %270 = bitcast i8* %269 to <16 x i8>*
  store <16 x i8> %267, <16 x i8>* %270, align 1, !alias.scope !36, !noalias !33
  %271 = add i64 %226, 128
  %272 = add i64 %227, -4
  %273 = icmp eq i64 %272, 0
  br i1 %273, label %274, label %225, !llvm.loop !38

274:                                              ; preds = %225, %214
  %275 = phi i64 [ 0, %214 ], [ %271, %225 ]
  %276 = icmp eq i64 %221, 0
  br i1 %276, label %293, label %277

277:                                              ; preds = %274, %277
  %278 = phi i64 [ %290, %277 ], [ %275, %274 ]
  %279 = phi i64 [ %291, %277 ], [ %221, %274 ]
  %280 = getelementptr i8, i8* %190, i64 %278
  %281 = getelementptr i8, i8* %1, i64 %278
  %282 = bitcast i8* %281 to <16 x i8>*
  %283 = load <16 x i8>, <16 x i8>* %282, align 1, !alias.scope !33
  %284 = getelementptr i8, i8* %281, i64 16
  %285 = bitcast i8* %284 to <16 x i8>*
  %286 = load <16 x i8>, <16 x i8>* %285, align 1, !alias.scope !33
  %287 = bitcast i8* %280 to <16 x i8>*
  store <16 x i8> %283, <16 x i8>* %287, align 1, !alias.scope !36, !noalias !33
  %288 = getelementptr i8, i8* %280, i64 16
  %289 = bitcast i8* %288 to <16 x i8>*
  store <16 x i8> %286, <16 x i8>* %289, align 1, !alias.scope !36, !noalias !33
  %290 = add i64 %278, 32
  %291 = add i64 %279, -1
  %292 = icmp eq i64 %291, 0
  br i1 %292, label %293, label %277, !llvm.loop !39

293:                                              ; preds = %277, %274
  %294 = icmp eq i64 %204, %215
  br i1 %294, label %305, label %295

295:                                              ; preds = %293, %206, %202
  %296 = phi i8* [ %190, %206 ], [ %190, %202 ], [ %216, %293 ]
  %297 = phi i8* [ %1, %206 ], [ %1, %202 ], [ %217, %293 ]
  br label %298

298:                                              ; preds = %295, %298
  %299 = phi i8* [ %303, %298 ], [ %296, %295 ]
  %300 = phi i8* [ %302, %298 ], [ %297, %295 ]
  %301 = load i8, i8* %300, align 1
  store i8 %301, i8* %299, align 1
  %302 = getelementptr inbounds i8, i8* %300, i64 1
  %303 = getelementptr inbounds i8, i8* %299, i64 1
  %304 = icmp eq i8* %302, %200
  br i1 %304, label %305, label %298, !llvm.loop !40

305:                                              ; preds = %298, %293, %199
  %306 = phi i8* [ %190, %199 ], [ %216, %293 ], [ %303, %298 ]
  %307 = ptrtoint i8* %306 to i64
  %308 = load i8*, i8** %5, align 8
  store i64 %196, i64* %135, align 8
  store i64 %307, i64* %134, align 8
  store i64 %188, i64* %143, align 8
  %309 = icmp eq i8* %308, null
  br i1 %309, label %311, label %310

310:                                              ; preds = %305
  tail call void @_ZdlPv(i8* nonnull %308) #12
  br label %311

311:                                              ; preds = %310, %305, %16, %132
  %312 = phi i8* [ %1, %16 ], [ %1, %132 ], [ %187, %305 ], [ %187, %310 ]
  ret i8* %312
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #10

declare double @exp2(double) local_unnamed_addr

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { cold noreturn nounwind }
attributes #11 = { nounwind }
attributes #12 = { builtin nounwind }
attributes #13 = { nounwind readnone }
attributes #14 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN4absl13make_optionalIN3gfx17HDRStaticMetadataEEENS_8optionalINSt3__15decayIT_E4typeEEEOS6_: argument 0"}
!4 = distinct !{!4, !"_ZN4absl13make_optionalIN3gfx17HDRStaticMetadataEEENS_8optionalINSt3__15decayIT_E4typeEEEOS6_"}
!5 = !{i8 0, i8 2}
!6 = !{!"branch_weights", i32 1, i32 2000}
!7 = !{!8}
!8 = distinct !{!8, !9}
!9 = distinct !{!9, !"LVerDomain"}
!10 = !{!11}
!11 = distinct !{!11, !9}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.isvectorized", i32 1}
!14 = distinct !{!14, !15}
!15 = !{!"llvm.loop.unroll.disable"}
!16 = distinct !{!16, !13}
!17 = !{!18}
!18 = distinct !{!18, !19}
!19 = distinct !{!19, !"LVerDomain"}
!20 = !{!21}
!21 = distinct !{!21, !19}
!22 = distinct !{!22, !13}
!23 = distinct !{!23, !15}
!24 = distinct !{!24, !13}
!25 = !{!26}
!26 = distinct !{!26, !27}
!27 = distinct !{!27, !"LVerDomain"}
!28 = !{!29}
!29 = distinct !{!29, !27}
!30 = distinct !{!30, !13}
!31 = distinct !{!31, !15}
!32 = distinct !{!32, !13}
!33 = !{!34}
!34 = distinct !{!34, !35}
!35 = distinct !{!35, !"LVerDomain"}
!36 = !{!37}
!37 = distinct !{!37, !35}
!38 = distinct !{!38, !13}
!39 = distinct !{!39, !15}
!40 = distinct !{!40, !13}
