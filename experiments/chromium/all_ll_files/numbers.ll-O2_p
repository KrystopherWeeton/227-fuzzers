; ModuleID = '../../third_party/abseil-cpp/absl/strings/numbers.cc'
source_filename = "../../third_party/abseil-cpp/absl/strings/numbers.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.absl::int128" = type { i128 }
%"class.absl::uint128" = type { i64, i64 }
%"class.absl::string_view" = type { i8*, i64 }

@.str = private unnamed_addr constant [53 x i8] c"../../third_party/abseil-cpp/absl/strings/numbers.cc\00", align 1
@.str.1 = private unnamed_addr constant [20 x i8] c"Check %s failed: %s\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"out != nullptr\00", align 1
@.str.3 = private unnamed_addr constant [36 x i8] c"Output pointer must not be nullptr.\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"true\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"t\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"yes\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"y\00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"false\00", align 1
@.str.10 = private unnamed_addr constant [2 x i8] c"f\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"no\00", align 1
@.str.12 = private unnamed_addr constant [2 x i8] c"n\00", align 1
@.str.13 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@_ZN4absl12_GLOBAL__N_122one_ASCII_final_digitsE = internal unnamed_addr constant [10 x [2 x i8]] [[2 x i8] c"0\00", [2 x i8] c"1\00", [2 x i8] c"2\00", [2 x i8] c"3\00", [2 x i8] c"4\00", [2 x i8] c"5\00", [2 x i8] c"6\00", [2 x i8] c"7\00", [2 x i8] c"8\00", [2 x i8] c"9\00"], align 16
@_ZN4absl16numbers_internal8kHexCharE = hidden local_unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 16
@_ZN4absl16numbers_internal9kHexTableE = hidden local_unnamed_addr constant [513 x i8] c"000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff\00", align 16
@_ZN4absl16numbers_internal16two_ASCII_digitsE = hidden local_unnamed_addr constant [100 x [2 x i8]] [[2 x i8] c"00", [2 x i8] c"01", [2 x i8] c"02", [2 x i8] c"03", [2 x i8] c"04", [2 x i8] c"05", [2 x i8] c"06", [2 x i8] c"07", [2 x i8] c"08", [2 x i8] c"09", [2 x i8] c"10", [2 x i8] c"11", [2 x i8] c"12", [2 x i8] c"13", [2 x i8] c"14", [2 x i8] c"15", [2 x i8] c"16", [2 x i8] c"17", [2 x i8] c"18", [2 x i8] c"19", [2 x i8] c"20", [2 x i8] c"21", [2 x i8] c"22", [2 x i8] c"23", [2 x i8] c"24", [2 x i8] c"25", [2 x i8] c"26", [2 x i8] c"27", [2 x i8] c"28", [2 x i8] c"29", [2 x i8] c"30", [2 x i8] c"31", [2 x i8] c"32", [2 x i8] c"33", [2 x i8] c"34", [2 x i8] c"35", [2 x i8] c"36", [2 x i8] c"37", [2 x i8] c"38", [2 x i8] c"39", [2 x i8] c"40", [2 x i8] c"41", [2 x i8] c"42", [2 x i8] c"43", [2 x i8] c"44", [2 x i8] c"45", [2 x i8] c"46", [2 x i8] c"47", [2 x i8] c"48", [2 x i8] c"49", [2 x i8] c"50", [2 x i8] c"51", [2 x i8] c"52", [2 x i8] c"53", [2 x i8] c"54", [2 x i8] c"55", [2 x i8] c"56", [2 x i8] c"57", [2 x i8] c"58", [2 x i8] c"59", [2 x i8] c"60", [2 x i8] c"61", [2 x i8] c"62", [2 x i8] c"63", [2 x i8] c"64", [2 x i8] c"65", [2 x i8] c"66", [2 x i8] c"67", [2 x i8] c"68", [2 x i8] c"69", [2 x i8] c"70", [2 x i8] c"71", [2 x i8] c"72", [2 x i8] c"73", [2 x i8] c"74", [2 x i8] c"75", [2 x i8] c"76", [2 x i8] c"77", [2 x i8] c"78", [2 x i8] c"79", [2 x i8] c"80", [2 x i8] c"81", [2 x i8] c"82", [2 x i8] c"83", [2 x i8] c"84", [2 x i8] c"85", [2 x i8] c"86", [2 x i8] c"87", [2 x i8] c"88", [2 x i8] c"89", [2 x i8] c"90", [2 x i8] c"91", [2 x i8] c"92", [2 x i8] c"93", [2 x i8] c"94", [2 x i8] c"95", [2 x i8] c"96", [2 x i8] c"97", [2 x i8] c"98", [2 x i8] c"99"], align 16
@_ZN4absl14ascii_internal13kPropertyBitsE = external local_unnamed_addr constant [256 x i8], align 16
@.str.16 = private unnamed_addr constant [26 x i8] c"absl::string_view::substr\00", align 1
@_ZZN4abslL7PowFiveEmiE14powers_of_five = internal unnamed_addr constant [13 x i32] [i32 1, i32 5, i32 25, i32 125, i32 625, i32 3125, i32 15625, i32 78125, i32 390625, i32 1953125, i32 9765625, i32 48828125, i32 244140625], align 16
@_ZN4absl12_GLOBAL__N_111kAsciiToIntE = internal unnamed_addr constant [256 x i8] c"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\00\01\02\03\04\05\06\07\08\09$$$$$$$\0A\0B\0C\0D\0E\0F\10\11\12\13\14\15\16\17\18\19\1A\1B\1C\1D\1E\1F !\22#$$$$$$\0A\0B\0C\0D\0E\0F\10\11\12\13\14\15\16\17\18\19\1A\1B\1C\1D\1E\1F !\22#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$", align 16
@_ZN4absl12_GLOBAL__N_112LookupTablesIiE13kVmaxOverBaseE = internal unnamed_addr constant [37 x i32] [i32 0, i32 0, i32 1073741823, i32 715827882, i32 536870911, i32 429496729, i32 357913941, i32 306783378, i32 268435455, i32 238609294, i32 214748364, i32 195225786, i32 178956970, i32 165191049, i32 153391689, i32 143165576, i32 134217727, i32 126322567, i32 119304647, i32 113025455, i32 107374182, i32 102261126, i32 97612893, i32 93368854, i32 89478485, i32 85899345, i32 82595524, i32 79536431, i32 76695844, i32 74051160, i32 71582788, i32 69273666, i32 67108863, i32 65075262, i32 63161283, i32 61356675, i32 59652323], align 16
@_ZN4absl12_GLOBAL__N_112LookupTablesIiE13kVminOverBaseE = internal unnamed_addr constant [37 x i32] [i32 0, i32 0, i32 -1073741824, i32 -715827882, i32 -536870912, i32 -429496729, i32 -357913941, i32 -306783378, i32 -268435456, i32 -238609294, i32 -214748364, i32 -195225786, i32 -178956970, i32 -165191049, i32 -153391689, i32 -143165576, i32 -134217728, i32 -126322567, i32 -119304647, i32 -113025455, i32 -107374182, i32 -102261126, i32 -97612893, i32 -93368854, i32 -89478485, i32 -85899345, i32 -82595524, i32 -79536431, i32 -76695844, i32 -74051160, i32 -71582788, i32 -69273666, i32 -67108864, i32 -65075262, i32 -63161283, i32 -61356675, i32 -59652323], align 16
@_ZN4absl12_GLOBAL__N_112LookupTablesIlE13kVmaxOverBaseE = internal unnamed_addr constant [37 x i64] [i64 0, i64 0, i64 4611686018427387903, i64 3074457345618258602, i64 2305843009213693951, i64 1844674407370955161, i64 1537228672809129301, i64 1317624576693539401, i64 1152921504606846975, i64 1024819115206086200, i64 922337203685477580, i64 838488366986797800, i64 768614336404564650, i64 709490156681136600, i64 658812288346769700, i64 614891469123651720, i64 576460752303423487, i64 542551296285575047, i64 512409557603043100, i64 485440633518672410, i64 461168601842738790, i64 439208192231179800, i64 419244183493398900, i64 401016175515425035, i64 384307168202282325, i64 368934881474191032, i64 354745078340568300, i64 341606371735362066, i64 329406144173384850, i64 318047311615681924, i64 307445734561825860, i64 297528130221121800, i64 288230376151711743, i64 279496122328932600, i64 271275648142787523, i64 263524915338707880, i64 256204778801521550], align 16
@_ZN4absl12_GLOBAL__N_112LookupTablesIlE13kVminOverBaseE = internal unnamed_addr constant [37 x i64] [i64 0, i64 0, i64 -4611686018427387904, i64 -3074457345618258602, i64 -2305843009213693952, i64 -1844674407370955161, i64 -1537228672809129301, i64 -1317624576693539401, i64 -1152921504606846976, i64 -1024819115206086200, i64 -922337203685477580, i64 -838488366986797800, i64 -768614336404564650, i64 -709490156681136600, i64 -658812288346769700, i64 -614891469123651720, i64 -576460752303423488, i64 -542551296285575047, i64 -512409557603043100, i64 -485440633518672410, i64 -461168601842738790, i64 -439208192231179800, i64 -419244183493398900, i64 -401016175515425035, i64 -384307168202282325, i64 -368934881474191032, i64 -354745078340568300, i64 -341606371735362066, i64 -329406144173384850, i64 -318047311615681924, i64 -307445734561825860, i64 -297528130221121800, i64 -288230376151711744, i64 -279496122328932600, i64 -271275648142787523, i64 -263524915338707880, i64 -256204778801521550], align 16
@_ZZN4absl12_GLOBAL__N_123safe_parse_positive_intINS_6int128EEEbNS_11string_viewEiPT_E4vmax = internal unnamed_addr constant %"class.absl::int128" { i128 170141183460469231731687303715884105727 }, align 16
@_ZN4absl12_GLOBAL__N_112LookupTablesINS_6int128EE13kVmaxOverBaseE = internal unnamed_addr constant [37 x %"class.absl::int128"] [%"class.absl::int128" zeroinitializer, %"class.absl::int128" zeroinitializer, %"class.absl::int128" { i128 85070591730234615865843651857942052863 }, %"class.absl::int128" { i128 56713727820156410577229101238628035242 }, %"class.absl::int128" { i128 42535295865117307932921825928971026431 }, %"class.absl::int128" { i128 34028236692093846346337460743176821145 }, %"class.absl::int128" { i128 28356863910078205288614550619314017621 }, %"class.absl::int128" { i128 24305883351495604533098186245126300818 }, %"class.absl::int128" { i128 21267647932558653966460912964485513215 }, %"class.absl::int128" { i128 18904575940052136859076367079542678414 }, %"class.absl::int128" { i128 17014118346046923173168730371588410572 }, %"class.absl::int128" { i128 15467380314588111975607936701444009611 }, %"class.absl::int128" { i128 14178431955039102644307275309657008810 }, %"class.absl::int128" { i128 13087783343113017825514407978144931209 }, %"class.absl::int128" { i128 12152941675747802266549093122563150409 }, %"class.absl::int128" { i128 11342745564031282115445820247725607048 }, %"class.absl::int128" { i128 10633823966279326983230456482242756607 }, %"class.absl::int128" { i128 10008304909439366572452194336228476807 }, %"class.absl::int128" { i128 9452287970026068429538183539771339207 }, %"class.absl::int128" { i128 8954799129498380617457226511362321354 }, %"class.absl::int128" { i128 8507059173023461586584365185794205286 }, %"class.absl::int128" { i128 8101961117165201511032728748375433606 }, %"class.absl::int128" { i128 7733690157294055987803968350722004805 }, %"class.absl::int128" { i128 7397442759150836162247274074603656770 }, %"class.absl::int128" { i128 7089215977519551322153637654828504405 }, %"class.absl::int128" { i128 6805647338418769269267492148635364229 }, %"class.absl::int128" { i128 6543891671556508912757203989072465604 }, %"class.absl::int128" { i128 6301525313350712286358789026514226138 }, %"class.absl::int128" { i128 6076470837873901133274546561281575204 }, %"class.absl::int128" { i128 5866937360705835576954734610892555369 }, %"class.absl::int128" { i128 5671372782015641057722910123862803524 }, %"class.absl::int128" { i128 5488425272918362313925396894060777604 }, %"class.absl::int128" { i128 5316911983139663491615228241121378303 }, %"class.absl::int128" { i128 5155793438196037325202645567148003203 }, %"class.absl::int128" { i128 5004152454719683286226097168114238403 }, %"class.absl::int128" { i128 4861176670299120906619637249025260163 }, %"class.absl::int128" { i128 4726143985013034214769091769885669603 }], align 16
@_ZZN4absl12_GLOBAL__N_123safe_parse_negative_intINS_6int128EEEbNS_11string_viewEiPT_E4vmin = internal unnamed_addr constant %"class.absl::int128" { i128 -170141183460469231731687303715884105728 }, align 16
@_ZN4absl12_GLOBAL__N_112LookupTablesINS_6int128EE13kVminOverBaseE = internal unnamed_addr constant [37 x %"class.absl::int128"] [%"class.absl::int128" zeroinitializer, %"class.absl::int128" zeroinitializer, %"class.absl::int128" { i128 -85070591730234615865843651857942052864 }, %"class.absl::int128" { i128 -56713727820156410577229101238628035242 }, %"class.absl::int128" { i128 -42535295865117307932921825928971026432 }, %"class.absl::int128" { i128 -34028236692093846346337460743176821145 }, %"class.absl::int128" { i128 -28356863910078205288614550619314017621 }, %"class.absl::int128" { i128 -24305883351495604533098186245126300818 }, %"class.absl::int128" { i128 -21267647932558653966460912964485513216 }, %"class.absl::int128" { i128 -18904575940052136859076367079542678414 }, %"class.absl::int128" { i128 -17014118346046923173168730371588410572 }, %"class.absl::int128" { i128 -15467380314588111975607936701444009611 }, %"class.absl::int128" { i128 -14178431955039102644307275309657008810 }, %"class.absl::int128" { i128 -13087783343113017825514407978144931209 }, %"class.absl::int128" { i128 -12152941675747802266549093122563150409 }, %"class.absl::int128" { i128 -11342745564031282115445820247725607048 }, %"class.absl::int128" { i128 -10633823966279326983230456482242756608 }, %"class.absl::int128" { i128 -10008304909439366572452194336228476807 }, %"class.absl::int128" { i128 -9452287970026068429538183539771339207 }, %"class.absl::int128" { i128 -8954799129498380617457226511362321354 }, %"class.absl::int128" { i128 -8507059173023461586584365185794205286 }, %"class.absl::int128" { i128 -8101961117165201511032728748375433606 }, %"class.absl::int128" { i128 -7733690157294055987803968350722004805 }, %"class.absl::int128" { i128 -7397442759150836162247274074603656770 }, %"class.absl::int128" { i128 -7089215977519551322153637654828504405 }, %"class.absl::int128" { i128 -6805647338418769269267492148635364229 }, %"class.absl::int128" { i128 -6543891671556508912757203989072465604 }, %"class.absl::int128" { i128 -6301525313350712286358789026514226138 }, %"class.absl::int128" { i128 -6076470837873901133274546561281575204 }, %"class.absl::int128" { i128 -5866937360705835576954734610892555369 }, %"class.absl::int128" { i128 -5671372782015641057722910123862803524 }, %"class.absl::int128" { i128 -5488425272918362313925396894060777604 }, %"class.absl::int128" { i128 -5316911983139663491615228241121378304 }, %"class.absl::int128" { i128 -5155793438196037325202645567148003203 }, %"class.absl::int128" { i128 -5004152454719683286226097168114238403 }, %"class.absl::int128" { i128 -4861176670299120906619637249025260163 }, %"class.absl::int128" { i128 -4726143985013034214769091769885669603 }], align 16
@_ZN4absl12_GLOBAL__N_112LookupTablesIjE13kVmaxOverBaseE = internal unnamed_addr constant [37 x i32] [i32 0, i32 0, i32 2147483647, i32 1431655765, i32 1073741823, i32 858993459, i32 715827882, i32 613566756, i32 536870911, i32 477218588, i32 429496729, i32 390451572, i32 357913941, i32 330382099, i32 306783378, i32 286331153, i32 268435455, i32 252645135, i32 238609294, i32 226050910, i32 214748364, i32 204522252, i32 195225786, i32 186737708, i32 178956970, i32 171798691, i32 165191049, i32 159072862, i32 153391689, i32 148102320, i32 143165576, i32 138547332, i32 134217727, i32 130150524, i32 126322567, i32 122713351, i32 119304647], align 16
@_ZN4absl12_GLOBAL__N_112LookupTablesImE13kVmaxOverBaseE = internal unnamed_addr constant [37 x i64] [i64 0, i64 0, i64 9223372036854775807, i64 6148914691236517205, i64 4611686018427387903, i64 3689348814741910323, i64 3074457345618258602, i64 2635249153387078802, i64 2305843009213693951, i64 2049638230412172401, i64 1844674407370955161, i64 1676976733973595601, i64 1537228672809129301, i64 1418980313362273201, i64 1317624576693539401, i64 1229782938247303441, i64 1152921504606846975, i64 1085102592571150095, i64 1024819115206086200, i64 970881267037344821, i64 922337203685477580, i64 878416384462359600, i64 838488366986797800, i64 802032351030850070, i64 768614336404564650, i64 737869762948382064, i64 709490156681136600, i64 683212743470724133, i64 658812288346769700, i64 636094623231363848, i64 614891469123651720, i64 595056260442243600, i64 576460752303423487, i64 558992244657865200, i64 542551296285575047, i64 527049830677415760, i64 512409557603043100], align 16
@_ZN4absl12_GLOBAL__N_112LookupTablesINS_7uint128EE13kVmaxOverBaseE = internal unnamed_addr constant [37 x %"class.absl::uint128"] [%"class.absl::uint128" zeroinitializer, %"class.absl::uint128" zeroinitializer, %"class.absl::uint128" { i64 -1, i64 9223372036854775807 }, %"class.absl::uint128" { i64 6148914691236517205, i64 6148914691236517205 }, %"class.absl::uint128" { i64 -1, i64 4611686018427387903 }, %"class.absl::uint128" { i64 3689348814741910323, i64 3689348814741910323 }, %"class.absl::uint128" { i64 -6148914691236517206, i64 3074457345618258602 }, %"class.absl::uint128" { i64 5270498306774157604, i64 2635249153387078802 }, %"class.absl::uint128" { i64 -1, i64 2305843009213693951 }, %"class.absl::uint128" { i64 -4099276460824344804, i64 2049638230412172401 }, %"class.absl::uint128" { i64 -7378697629483820647, i64 1844674407370955161 }, %"class.absl::uint128" { i64 8384883669867978007, i64 1676976733973595601 }, %"class.absl::uint128" { i64 6148914691236517205, i64 1537228672809129301 }, %"class.absl::uint128" { i64 4256940940086819603, i64 1418980313362273201 }, %"class.absl::uint128" { i64 2635249153387078802, i64 1317624576693539401 }, %"class.absl::uint128" { i64 1229782938247303441, i64 1229782938247303441 }, %"class.absl::uint128" { i64 -1, i64 1152921504606846975 }, %"class.absl::uint128" { i64 1085102592571150095, i64 1085102592571150095 }, %"class.absl::uint128" { i64 -2049638230412172402, i64 1024819115206086200 }, %"class.absl::uint128" { i64 -1941762534074689644, i64 970881267037344821 }, %"class.absl::uint128" { i64 -3689348814741910324, i64 922337203685477580 }, %"class.absl::uint128" { i64 -4392081922311798004, i64 878416384462359600 }, %"class.absl::uint128" { i64 -5030930201920786805, i64 838488366986797800 }, %"class.absl::uint128" { i64 4812194106185100421, i64 802032351030850070 }, %"class.absl::uint128" { i64 -6148914691236517206, i64 768614336404564650 }, %"class.absl::uint128" { i64 -6640827866535438582, i64 737869762948382064 }, %"class.absl::uint128" { i64 -7094901566811366007, i64 709490156681136600 }, %"class.absl::uint128" { i64 -1366425486941448268, i64 683212743470724133 }, %"class.absl::uint128" { i64 -7905747460161236407, i64 658812288346769700 }, %"class.absl::uint128" { i64 -3180473116156819245, i64 636094623231363848 }, %"class.absl::uint128" { i64 -8608480567731124088, i64 614891469123651720 }, %"class.absl::uint128" { i64 -8925843906633654008, i64 595056260442243600 }, %"class.absl::uint128" { i64 -1, i64 576460752303423487 }, %"class.absl::uint128" { i64 8943875914525843207, i64 558992244657865200 }, %"class.absl::uint128" { i64 -8680820740569200761, i64 542551296285575047 }, %"class.absl::uint128" { i64 8432797290838652167, i64 527049830677415760 }, %"class.absl::uint128" { i64 8198552921648689607, i64 512409557603043100 }], align 16

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4absl10SimpleAtofENS_11string_viewEPf(i8*, i64, float*) local_unnamed_addr #0 {
  store float 0.000000e+00, float* %2, align 4
  %4 = getelementptr inbounds i8, i8* %0, i64 %1
  %5 = icmp eq i64 %1, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %3, %14
  %7 = phi i8* [ %15, %14 ], [ %0, %3 ]
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i64
  %10 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN4absl14ascii_internal13kPropertyBitsE, i64 0, i64 %9
  %11 = load i8, i8* %10, align 1
  %12 = and i8 %11, 8
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %17, label %14

14:                                               ; preds = %6
  %15 = getelementptr inbounds i8, i8* %7, i64 1
  %16 = icmp eq i8* %15, %4
  br i1 %16, label %17, label %6

17:                                               ; preds = %14, %6, %3
  %18 = phi i8* [ %0, %3 ], [ %7, %6 ], [ %4, %14 ]
  %19 = ptrtoint i8* %18 to i64
  %20 = ptrtoint i8* %0 to i64
  %21 = sub i64 %19, %20
  %22 = icmp ugt i64 %21, %1
  br i1 %22, label %23, label %24, !prof !2

23:                                               ; preds = %17
  tail call void @_ZN4absl13base_internal18ThrowStdOutOfRangeEPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.16, i64 0, i64 0)) #11
  unreachable

24:                                               ; preds = %17
  %25 = sub i64 %1, %21
  %26 = icmp sgt i64 %25, -1
  br i1 %26, label %28, label %27, !prof !3

27:                                               ; preds = %24
  tail call void @llvm.trap() #12
  unreachable

28:                                               ; preds = %24
  %29 = getelementptr inbounds i8, i8* %18, i64 %25
  br label %30

30:                                               ; preds = %33, %28
  %31 = phi i8* [ %29, %28 ], [ %34, %33 ]
  %32 = icmp eq i8* %31, %18
  br i1 %32, label %43, label %33

33:                                               ; preds = %30
  %34 = getelementptr inbounds i8, i8* %31, i64 -1
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i64
  %37 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN4absl14ascii_internal13kPropertyBitsE, i64 0, i64 %36
  %38 = load i8, i8* %37, align 1
  %39 = and i8 %38, 8
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %41, label %30

41:                                               ; preds = %33
  %42 = ptrtoint i8* %31 to i64
  br label %43

43:                                               ; preds = %30, %41
  %44 = phi i64 [ %42, %41 ], [ %19, %30 ]
  %45 = sub i64 %44, %19
  %46 = icmp ult i64 %45, %25
  %47 = select i1 %46, i64 %45, i64 %25
  %48 = icmp sgt i64 %47, -1
  br i1 %48, label %50, label %49, !prof !3

49:                                               ; preds = %43
  tail call void @llvm.trap() #12
  unreachable

50:                                               ; preds = %43
  %51 = icmp eq i64 %47, 0
  br i1 %51, label %62, label %52

52:                                               ; preds = %50
  %53 = load i8, i8* %18, align 1
  %54 = icmp eq i8 %53, 43
  br i1 %54, label %55, label %62

55:                                               ; preds = %52
  %56 = getelementptr inbounds i8, i8* %18, i64 1
  %57 = add nsw i64 %47, -1
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %62, label %59

59:                                               ; preds = %55
  %60 = load i8, i8* %56, align 1
  %61 = icmp eq i8 %60, 45
  br i1 %61, label %81, label %62

62:                                               ; preds = %55, %59, %52, %50
  %63 = phi i64 [ 0, %50 ], [ 0, %55 ], [ %57, %59 ], [ %47, %52 ]
  %64 = phi i8* [ %18, %50 ], [ %56, %55 ], [ %56, %59 ], [ %18, %52 ]
  %65 = getelementptr inbounds i8, i8* %64, i64 %63
  %66 = tail call { i8*, i32 } @_ZN4absl10from_charsEPKcS1_RfNS_12chars_formatE(i8* %64, i8* %65, float* dereferenceable(4) %2, i32 3) #12
  %67 = extractvalue { i8*, i32 } %66, 1
  %68 = icmp ne i32 %67, 22
  %69 = extractvalue { i8*, i32 } %66, 0
  %70 = icmp eq i8* %69, %65
  %71 = and i1 %68, %70
  br i1 %71, label %72, label %81

72:                                               ; preds = %62
  %73 = icmp eq i32 %67, 34
  br i1 %73, label %74, label %81

74:                                               ; preds = %72
  %75 = load float, float* %2, align 4
  %76 = fcmp ogt float %75, 1.000000e+00
  br i1 %76, label %77, label %78

77:                                               ; preds = %74
  store float 0x7FF0000000000000, float* %2, align 4
  br label %81

78:                                               ; preds = %74
  %79 = fcmp olt float %75, -1.000000e+00
  br i1 %79, label %80, label %81

80:                                               ; preds = %78
  store float 0xFFF0000000000000, float* %2, align 4
  br label %81

81:                                               ; preds = %62, %77, %80, %78, %72, %59
  %82 = phi i1 [ false, %59 ], [ false, %62 ], [ true, %77 ], [ true, %80 ], [ true, %78 ], [ true, %72 ]
  ret i1 %82
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare { i8*, i32 } @_ZN4absl10from_charsEPKcS1_RfNS_12chars_formatE(i8*, i8*, float* dereferenceable(4), i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4absl10SimpleAtodENS_11string_viewEPd(i8*, i64, double*) local_unnamed_addr #0 {
  store double 0.000000e+00, double* %2, align 8
  %4 = getelementptr inbounds i8, i8* %0, i64 %1
  %5 = icmp eq i64 %1, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %3, %14
  %7 = phi i8* [ %15, %14 ], [ %0, %3 ]
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i64
  %10 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN4absl14ascii_internal13kPropertyBitsE, i64 0, i64 %9
  %11 = load i8, i8* %10, align 1
  %12 = and i8 %11, 8
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %17, label %14

14:                                               ; preds = %6
  %15 = getelementptr inbounds i8, i8* %7, i64 1
  %16 = icmp eq i8* %15, %4
  br i1 %16, label %17, label %6

17:                                               ; preds = %14, %6, %3
  %18 = phi i8* [ %0, %3 ], [ %7, %6 ], [ %4, %14 ]
  %19 = ptrtoint i8* %18 to i64
  %20 = ptrtoint i8* %0 to i64
  %21 = sub i64 %19, %20
  %22 = icmp ugt i64 %21, %1
  br i1 %22, label %23, label %24, !prof !2

23:                                               ; preds = %17
  tail call void @_ZN4absl13base_internal18ThrowStdOutOfRangeEPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.16, i64 0, i64 0)) #11
  unreachable

24:                                               ; preds = %17
  %25 = sub i64 %1, %21
  %26 = icmp sgt i64 %25, -1
  br i1 %26, label %28, label %27, !prof !3

27:                                               ; preds = %24
  tail call void @llvm.trap() #12
  unreachable

28:                                               ; preds = %24
  %29 = getelementptr inbounds i8, i8* %18, i64 %25
  br label %30

30:                                               ; preds = %33, %28
  %31 = phi i8* [ %29, %28 ], [ %34, %33 ]
  %32 = icmp eq i8* %31, %18
  br i1 %32, label %43, label %33

33:                                               ; preds = %30
  %34 = getelementptr inbounds i8, i8* %31, i64 -1
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i64
  %37 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN4absl14ascii_internal13kPropertyBitsE, i64 0, i64 %36
  %38 = load i8, i8* %37, align 1
  %39 = and i8 %38, 8
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %41, label %30

41:                                               ; preds = %33
  %42 = ptrtoint i8* %31 to i64
  br label %43

43:                                               ; preds = %30, %41
  %44 = phi i64 [ %42, %41 ], [ %19, %30 ]
  %45 = sub i64 %44, %19
  %46 = icmp ult i64 %45, %25
  %47 = select i1 %46, i64 %45, i64 %25
  %48 = icmp sgt i64 %47, -1
  br i1 %48, label %50, label %49, !prof !3

49:                                               ; preds = %43
  tail call void @llvm.trap() #12
  unreachable

50:                                               ; preds = %43
  %51 = icmp eq i64 %47, 0
  br i1 %51, label %62, label %52

52:                                               ; preds = %50
  %53 = load i8, i8* %18, align 1
  %54 = icmp eq i8 %53, 43
  br i1 %54, label %55, label %62

55:                                               ; preds = %52
  %56 = getelementptr inbounds i8, i8* %18, i64 1
  %57 = add nsw i64 %47, -1
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %62, label %59

59:                                               ; preds = %55
  %60 = load i8, i8* %56, align 1
  %61 = icmp eq i8 %60, 45
  br i1 %61, label %81, label %62

62:                                               ; preds = %55, %59, %52, %50
  %63 = phi i64 [ 0, %50 ], [ 0, %55 ], [ %57, %59 ], [ %47, %52 ]
  %64 = phi i8* [ %18, %50 ], [ %56, %55 ], [ %56, %59 ], [ %18, %52 ]
  %65 = getelementptr inbounds i8, i8* %64, i64 %63
  %66 = tail call { i8*, i32 } @_ZN4absl10from_charsEPKcS1_RdNS_12chars_formatE(i8* %64, i8* %65, double* dereferenceable(8) %2, i32 3) #12
  %67 = extractvalue { i8*, i32 } %66, 1
  %68 = icmp ne i32 %67, 22
  %69 = extractvalue { i8*, i32 } %66, 0
  %70 = icmp eq i8* %69, %65
  %71 = and i1 %68, %70
  br i1 %71, label %72, label %81

72:                                               ; preds = %62
  %73 = icmp eq i32 %67, 34
  br i1 %73, label %74, label %81

74:                                               ; preds = %72
  %75 = load double, double* %2, align 8
  %76 = fcmp ogt double %75, 1.000000e+00
  br i1 %76, label %77, label %78

77:                                               ; preds = %74
  store double 0x7FF0000000000000, double* %2, align 8
  br label %81

78:                                               ; preds = %74
  %79 = fcmp olt double %75, -1.000000e+00
  br i1 %79, label %80, label %81

80:                                               ; preds = %78
  store double 0xFFF0000000000000, double* %2, align 8
  br label %81

81:                                               ; preds = %62, %77, %80, %78, %72, %59
  %82 = phi i1 [ false, %59 ], [ false, %62 ], [ true, %77 ], [ true, %80 ], [ true, %78 ], [ true, %72 ]
  ret i1 %82
}

declare { i8*, i32 } @_ZN4absl10from_charsEPKcS1_RdNS_12chars_formatE(i8*, i8*, double* dereferenceable(8), i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4absl10SimpleAtobENS_11string_viewEPb(i8*, i64, i8*) local_unnamed_addr #0 {
  %4 = icmp eq i8* %2, null
  br i1 %4, label %5, label %6, !prof !2

5:                                                ; preds = %3
  tail call void (i32, i8*, i32, i8*, ...) @_ZN4absl20raw_logging_internal6RawLogENS_11LogSeverityEPKciS3_z(i32 3, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str, i64 0, i64 42), i32 109, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.3, i64 0, i64 0)) #12
  br label %6

6:                                                ; preds = %5, %3
  %7 = tail call zeroext i1 @_ZN4absl16EqualsIgnoreCaseENS_11string_viewES0_(i8* %0, i64 %1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0), i64 4) #12
  br i1 %7, label %26, label %8

8:                                                ; preds = %6
  %9 = tail call zeroext i1 @_ZN4absl16EqualsIgnoreCaseENS_11string_viewES0_(i8* %0, i64 %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i64 1) #12
  br i1 %9, label %26, label %10

10:                                               ; preds = %8
  %11 = tail call zeroext i1 @_ZN4absl16EqualsIgnoreCaseENS_11string_viewES0_(i8* %0, i64 %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i64 0, i64 0), i64 3) #12
  br i1 %11, label %26, label %12

12:                                               ; preds = %10
  %13 = tail call zeroext i1 @_ZN4absl16EqualsIgnoreCaseENS_11string_viewES0_(i8* %0, i64 %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0), i64 1) #12
  br i1 %13, label %26, label %14

14:                                               ; preds = %12
  %15 = tail call zeroext i1 @_ZN4absl16EqualsIgnoreCaseENS_11string_viewES0_(i8* %0, i64 %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0), i64 1) #12
  br i1 %15, label %26, label %16

16:                                               ; preds = %14
  %17 = tail call zeroext i1 @_ZN4absl16EqualsIgnoreCaseENS_11string_viewES0_(i8* %0, i64 %1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i64 0, i64 0), i64 5) #12
  br i1 %17, label %26, label %18

18:                                               ; preds = %16
  %19 = tail call zeroext i1 @_ZN4absl16EqualsIgnoreCaseENS_11string_viewES0_(i8* %0, i64 %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0), i64 1) #12
  br i1 %19, label %26, label %20

20:                                               ; preds = %18
  %21 = tail call zeroext i1 @_ZN4absl16EqualsIgnoreCaseENS_11string_viewES0_(i8* %0, i64 %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i64 0, i64 0), i64 2) #12
  br i1 %21, label %26, label %22

22:                                               ; preds = %20
  %23 = tail call zeroext i1 @_ZN4absl16EqualsIgnoreCaseENS_11string_viewES0_(i8* %0, i64 %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0), i64 1) #12
  br i1 %23, label %26, label %24

24:                                               ; preds = %22
  %25 = tail call zeroext i1 @_ZN4absl16EqualsIgnoreCaseENS_11string_viewES0_(i8* %0, i64 %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0), i64 1) #12
  br i1 %25, label %26, label %28

26:                                               ; preds = %24, %22, %20, %18, %16, %14, %12, %10, %8, %6
  %27 = phi i8 [ 1, %6 ], [ 1, %8 ], [ 1, %10 ], [ 1, %12 ], [ 1, %14 ], [ 0, %16 ], [ 0, %18 ], [ 0, %20 ], [ 0, %22 ], [ 0, %24 ]
  store i8 %27, i8* %2, align 1
  br label %28

28:                                               ; preds = %26, %24
  %29 = phi i1 [ false, %24 ], [ true, %26 ]
  ret i1 %29
}

declare void @_ZN4absl20raw_logging_internal6RawLogENS_11LogSeverityEPKciS3_z(i32, i8*, i32, i8*, ...) local_unnamed_addr #2

; Function Attrs: nounwind
declare zeroext i1 @_ZN4absl16EqualsIgnoreCaseENS_11string_viewES0_(i8*, i64, i8*, i64) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i8* @_ZN4absl16numbers_internal15FastIntToBufferEjPc(i32, i8*) local_unnamed_addr #4 {
  %3 = icmp ugt i32 %0, 999999999
  br i1 %3, label %4, label %59

4:                                                ; preds = %2
  %5 = udiv i32 %0, 100000000
  %6 = mul i32 %5, -100000000
  %7 = add i32 %6, %0
  %8 = zext i32 %5 to i64
  %9 = getelementptr inbounds [100 x [2 x i8]], [100 x [2 x i8]]* @_ZN4absl16numbers_internal16two_ASCII_digitsE, i64 0, i64 %8, i64 0
  %10 = bitcast i8* %9 to i16*
  %11 = bitcast i8* %1 to i16*
  %12 = load i16, i16* %10, align 2
  store i16 %12, i16* %11, align 1
  %13 = getelementptr inbounds i8, i8* %1, i64 2
  br label %14

14:                                               ; preds = %96, %105, %4
  %15 = phi i32 [ %7, %4 ], [ %0, %96 ], [ %108, %105 ]
  %16 = phi i8* [ %13, %4 ], [ %1, %96 ], [ %111, %105 ]
  %17 = udiv i32 %15, 1000000
  %18 = mul i32 %17, -1000000
  %19 = add i32 %18, %15
  %20 = zext i32 %17 to i64
  %21 = getelementptr inbounds [100 x [2 x i8]], [100 x [2 x i8]]* @_ZN4absl16numbers_internal16two_ASCII_digitsE, i64 0, i64 %20, i64 0
  %22 = bitcast i8* %21 to i16*
  %23 = bitcast i8* %16 to i16*
  %24 = load i16, i16* %22, align 2
  store i16 %24, i16* %23, align 1
  %25 = getelementptr inbounds i8, i8* %16, i64 2
  br label %26

26:                                               ; preds = %85, %98, %14
  %27 = phi i32 [ %19, %14 ], [ %0, %85 ], [ %101, %98 ]
  %28 = phi i8* [ %25, %14 ], [ %1, %85 ], [ %104, %98 ]
  %29 = udiv i32 %27, 10000
  %30 = mul i32 %29, -10000
  %31 = add i32 %30, %27
  %32 = zext i32 %29 to i64
  %33 = getelementptr inbounds [100 x [2 x i8]], [100 x [2 x i8]]* @_ZN4absl16numbers_internal16two_ASCII_digitsE, i64 0, i64 %32, i64 0
  %34 = bitcast i8* %33 to i16*
  %35 = bitcast i8* %28 to i16*
  %36 = load i16, i16* %34, align 2
  store i16 %36, i16* %35, align 1
  %37 = getelementptr inbounds i8, i8* %28, i64 2
  br label %38

38:                                               ; preds = %72, %87, %26
  %39 = phi i32 [ %31, %26 ], [ %0, %72 ], [ %90, %87 ]
  %40 = phi i8* [ %37, %26 ], [ %1, %72 ], [ %93, %87 ]
  %41 = udiv i32 %39, 100
  %42 = mul i32 %41, -100
  %43 = add i32 %42, %39
  %44 = zext i32 %41 to i64
  %45 = getelementptr inbounds [100 x [2 x i8]], [100 x [2 x i8]]* @_ZN4absl16numbers_internal16two_ASCII_digitsE, i64 0, i64 %44, i64 0
  %46 = bitcast i8* %45 to i16*
  %47 = bitcast i8* %40 to i16*
  %48 = load i16, i16* %46, align 2
  store i16 %48, i16* %47, align 1
  %49 = getelementptr inbounds i8, i8* %40, i64 2
  br label %50

50:                                               ; preds = %61, %74, %38
  %51 = phi i32 [ %43, %38 ], [ %0, %61 ], [ %79, %74 ]
  %52 = phi i8* [ %49, %38 ], [ %1, %61 ], [ %82, %74 ]
  %53 = zext i32 %51 to i64
  %54 = getelementptr inbounds [100 x [2 x i8]], [100 x [2 x i8]]* @_ZN4absl16numbers_internal16two_ASCII_digitsE, i64 0, i64 %53, i64 0
  %55 = bitcast i8* %54 to i16*
  %56 = bitcast i8* %52 to i16*
  %57 = load i16, i16* %55, align 2
  store i16 %57, i16* %56, align 1
  %58 = getelementptr inbounds i8, i8* %52, i64 2
  store i8 0, i8* %58, align 1
  br label %112

59:                                               ; preds = %2
  %60 = icmp ult i32 %0, 100
  br i1 %60, label %61, label %70

61:                                               ; preds = %59
  %62 = icmp ugt i32 %0, 9
  br i1 %62, label %50, label %63

63:                                               ; preds = %61
  %64 = zext i32 %0 to i64
  %65 = getelementptr inbounds [10 x [2 x i8]], [10 x [2 x i8]]* @_ZN4absl12_GLOBAL__N_122one_ASCII_final_digitsE, i64 0, i64 %64, i64 0
  %66 = bitcast i8* %65 to i16*
  %67 = bitcast i8* %1 to i16*
  %68 = load i16, i16* %66, align 2
  store i16 %68, i16* %67, align 1
  %69 = getelementptr inbounds i8, i8* %1, i64 1
  br label %112

70:                                               ; preds = %59
  %71 = icmp ult i32 %0, 10000
  br i1 %71, label %72, label %83

72:                                               ; preds = %70
  %73 = icmp ugt i32 %0, 999
  br i1 %73, label %38, label %74

74:                                               ; preds = %72
  %75 = trunc i32 %0 to i16
  %76 = udiv i16 %75, 100
  %77 = zext i16 %76 to i32
  %78 = mul nsw i32 %77, -100
  %79 = add nsw i32 %78, %0
  %80 = trunc i16 %76 to i8
  %81 = add nuw nsw i8 %80, 48
  %82 = getelementptr inbounds i8, i8* %1, i64 1
  store i8 %81, i8* %1, align 1
  br label %50

83:                                               ; preds = %70
  %84 = icmp ult i32 %0, 1000000
  br i1 %84, label %85, label %94

85:                                               ; preds = %83
  %86 = icmp ugt i32 %0, 99999
  br i1 %86, label %26, label %87

87:                                               ; preds = %85
  %88 = udiv i32 %0, 10000
  %89 = mul i32 %88, -10000
  %90 = add nsw i32 %89, %0
  %91 = trunc i32 %88 to i8
  %92 = add nuw nsw i8 %91, 48
  %93 = getelementptr inbounds i8, i8* %1, i64 1
  store i8 %92, i8* %1, align 1
  br label %38

94:                                               ; preds = %83
  %95 = icmp ult i32 %0, 100000000
  br i1 %95, label %96, label %105

96:                                               ; preds = %94
  %97 = icmp ugt i32 %0, 9999999
  br i1 %97, label %14, label %98

98:                                               ; preds = %96
  %99 = udiv i32 %0, 1000000
  %100 = mul i32 %99, -1000000
  %101 = add nsw i32 %100, %0
  %102 = trunc i32 %99 to i8
  %103 = add nuw nsw i8 %102, 48
  %104 = getelementptr inbounds i8, i8* %1, i64 1
  store i8 %103, i8* %1, align 1
  br label %26

105:                                              ; preds = %94
  %106 = udiv i32 %0, 100000000
  %107 = mul i32 %106, -100000000
  %108 = add nsw i32 %107, %0
  %109 = trunc i32 %106 to i8
  %110 = add nuw nsw i8 %109, 48
  %111 = getelementptr inbounds i8, i8* %1, i64 1
  store i8 %110, i8* %1, align 1
  br label %14

112:                                              ; preds = %63, %50
  %113 = phi i8* [ %58, %50 ], [ %69, %63 ]
  ret i8* %113
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i8* @_ZN4absl16numbers_internal15FastIntToBufferEiPc(i32, i8*) local_unnamed_addr #4 {
  %3 = icmp slt i32 %0, 0
  br i1 %3, label %4, label %7

4:                                                ; preds = %2
  %5 = getelementptr inbounds i8, i8* %1, i64 1
  store i8 45, i8* %1, align 1
  %6 = sub i32 0, %0
  br label %7

7:                                                ; preds = %4, %2
  %8 = phi i8* [ %5, %4 ], [ %1, %2 ]
  %9 = phi i32 [ %6, %4 ], [ %0, %2 ]
  %10 = tail call i8* @_ZN4absl16numbers_internal15FastIntToBufferEjPc(i32 %9, i8* %8)
  ret i8* %10
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i8* @_ZN4absl16numbers_internal15FastIntToBufferEmPc(i64, i8*) local_unnamed_addr #4 {
  %3 = icmp ult i64 %0, 4294967296
  br i1 %3, label %4, label %7

4:                                                ; preds = %2
  %5 = trunc i64 %0 to i32
  %6 = tail call i8* @_ZN4absl16numbers_internal15FastIntToBufferEjPc(i32 %5, i8* %1)
  br label %72

7:                                                ; preds = %2
  %8 = udiv i64 %0, 1000000000
  %9 = mul i64 %8, -1000000000
  %10 = add i64 %9, %0
  %11 = trunc i64 %10 to i32
  %12 = icmp ult i64 %0, 4294967296000000000
  br i1 %12, label %13, label %16

13:                                               ; preds = %7
  %14 = trunc i64 %8 to i32
  %15 = tail call i8* @_ZN4absl16numbers_internal15FastIntToBufferEjPc(i32 %14, i8* %1)
  br label %28

16:                                               ; preds = %7
  %17 = udiv i64 %0, 100000000000
  %18 = trunc i64 %17 to i32
  %19 = mul nsw i64 %17, -100
  %20 = add nsw i64 %19, %8
  %21 = tail call i8* @_ZN4absl16numbers_internal15FastIntToBufferEjPc(i32 %18, i8* %1)
  %22 = and i64 %20, 4294967295
  %23 = getelementptr inbounds [100 x [2 x i8]], [100 x [2 x i8]]* @_ZN4absl16numbers_internal16two_ASCII_digitsE, i64 0, i64 %22, i64 0
  %24 = bitcast i8* %23 to i16*
  %25 = bitcast i8* %21 to i16*
  %26 = load i16, i16* %24, align 2
  store i16 %26, i16* %25, align 1
  %27 = getelementptr inbounds i8, i8* %21, i64 2
  br label %28

28:                                               ; preds = %16, %13
  %29 = phi i8* [ %15, %13 ], [ %27, %16 ]
  %30 = udiv i32 %11, 10000000
  %31 = mul i32 %30, -10000000
  %32 = add i32 %31, %11
  %33 = zext i32 %30 to i64
  %34 = getelementptr inbounds [100 x [2 x i8]], [100 x [2 x i8]]* @_ZN4absl16numbers_internal16two_ASCII_digitsE, i64 0, i64 %33, i64 0
  %35 = bitcast i8* %34 to i16*
  %36 = bitcast i8* %29 to i16*
  %37 = load i16, i16* %35, align 2
  store i16 %37, i16* %36, align 1
  %38 = getelementptr inbounds i8, i8* %29, i64 2
  %39 = udiv i32 %32, 100000
  %40 = mul i32 %39, -100000
  %41 = add i32 %40, %32
  %42 = zext i32 %39 to i64
  %43 = getelementptr inbounds [100 x [2 x i8]], [100 x [2 x i8]]* @_ZN4absl16numbers_internal16two_ASCII_digitsE, i64 0, i64 %42, i64 0
  %44 = bitcast i8* %43 to i16*
  %45 = bitcast i8* %38 to i16*
  %46 = load i16, i16* %44, align 2
  store i16 %46, i16* %45, align 1
  %47 = getelementptr inbounds i8, i8* %29, i64 4
  %48 = udiv i32 %41, 1000
  %49 = mul i32 %48, -1000
  %50 = add i32 %49, %41
  %51 = zext i32 %48 to i64
  %52 = getelementptr inbounds [100 x [2 x i8]], [100 x [2 x i8]]* @_ZN4absl16numbers_internal16two_ASCII_digitsE, i64 0, i64 %51, i64 0
  %53 = bitcast i8* %52 to i16*
  %54 = bitcast i8* %47 to i16*
  %55 = load i16, i16* %53, align 2
  store i16 %55, i16* %54, align 1
  %56 = getelementptr inbounds i8, i8* %29, i64 6
  %57 = udiv i32 %50, 10
  %58 = mul i32 %57, -10
  %59 = add i32 %58, %50
  %60 = zext i32 %57 to i64
  %61 = getelementptr inbounds [100 x [2 x i8]], [100 x [2 x i8]]* @_ZN4absl16numbers_internal16two_ASCII_digitsE, i64 0, i64 %60, i64 0
  %62 = bitcast i8* %61 to i16*
  %63 = bitcast i8* %56 to i16*
  %64 = load i16, i16* %62, align 2
  store i16 %64, i16* %63, align 1
  %65 = getelementptr inbounds i8, i8* %29, i64 8
  %66 = zext i32 %59 to i64
  %67 = getelementptr inbounds [10 x [2 x i8]], [10 x [2 x i8]]* @_ZN4absl12_GLOBAL__N_122one_ASCII_final_digitsE, i64 0, i64 %66, i64 0
  %68 = bitcast i8* %67 to i16*
  %69 = bitcast i8* %65 to i16*
  %70 = load i16, i16* %68, align 2
  store i16 %70, i16* %69, align 1
  %71 = getelementptr inbounds i8, i8* %29, i64 9
  br label %72

72:                                               ; preds = %28, %4
  %73 = phi i8* [ %6, %4 ], [ %71, %28 ]
  ret i8* %73
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i8* @_ZN4absl16numbers_internal15FastIntToBufferElPc(i64, i8*) local_unnamed_addr #4 {
  %3 = icmp slt i64 %0, 0
  br i1 %3, label %4, label %7

4:                                                ; preds = %2
  %5 = getelementptr inbounds i8, i8* %1, i64 1
  store i8 45, i8* %1, align 1
  %6 = sub i64 0, %0
  br label %7

7:                                                ; preds = %4, %2
  %8 = phi i8* [ %5, %4 ], [ %1, %2 ]
  %9 = phi i64 [ %6, %4 ], [ %0, %2 ]
  %10 = tail call i8* @_ZN4absl16numbers_internal15FastIntToBufferEmPc(i64 %9, i8* %8)
  ret i8* %10
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN4absl16numbers_internal17SixDigitsToBufferEdPc(double, i8*) local_unnamed_addr #0 {
  %3 = alloca i32, align 4
  %4 = fcmp uno double %0, 0.000000e+00
  br i1 %4, label %5, label %7

5:                                                ; preds = %2
  %6 = bitcast i8* %1 to i32*
  store i32 7233902, i32* %6, align 1
  br label %386

7:                                                ; preds = %2
  %8 = fcmp oeq double %0, 0.000000e+00
  br i1 %8, label %9, label %20

9:                                                ; preds = %7
  %10 = bitcast double %0 to i64
  %11 = icmp slt i64 %10, 0
  br i1 %11, label %12, label %14

12:                                               ; preds = %9
  %13 = getelementptr inbounds i8, i8* %1, i64 1
  store i8 45, i8* %1, align 1
  br label %14

14:                                               ; preds = %12, %9
  %15 = phi i8* [ %13, %12 ], [ %1, %9 ]
  %16 = getelementptr inbounds i8, i8* %15, i64 1
  store i8 48, i8* %15, align 1
  store i8 0, i8* %16, align 1
  %17 = ptrtoint i8* %16 to i64
  %18 = ptrtoint i8* %1 to i64
  %19 = sub i64 %17, %18
  br label %386

20:                                               ; preds = %7
  %21 = fcmp olt double %0, 0.000000e+00
  br i1 %21, label %22, label %25

22:                                               ; preds = %20
  %23 = getelementptr inbounds i8, i8* %1, i64 1
  store i8 45, i8* %1, align 1
  %24 = fsub double -0.000000e+00, %0
  br label %25

25:                                               ; preds = %22, %20
  %26 = phi i8* [ %23, %22 ], [ %1, %20 ]
  %27 = phi double [ %24, %22 ], [ %0, %20 ]
  %28 = tail call double @llvm.fabs.f64(double %27) #13
  %29 = fcmp oeq double %28, 0x7FF0000000000000
  br i1 %29, label %30, label %36

30:                                               ; preds = %25
  %31 = bitcast i8* %26 to i32*
  store i32 6712937, i32* %31, align 1
  %32 = getelementptr inbounds i8, i8* %26, i64 3
  %33 = ptrtoint i8* %32 to i64
  %34 = ptrtoint i8* %1 to i64
  %35 = sub i64 %33, %34
  br label %386

36:                                               ; preds = %25
  %37 = fcmp ult double %27, 0x412E847F00000000
  br i1 %37, label %82, label %38

38:                                               ; preds = %36
  %39 = fcmp ult double %27, 0x7620427EAD4CFED6
  %40 = fmul double %27, 0xAC8062864AC6F43
  %41 = select i1 %39, double %27, double %40
  %42 = select i1 %39, i32 5, i32 261
  %43 = fcmp ult double %41, 1.000000e+133
  %44 = or i32 %42, 128
  %45 = fmul double %41, 1.000000e-128
  %46 = select i1 %43, double %41, double %45
  %47 = select i1 %43, i32 %42, i32 %44
  %48 = fcmp ult double %46, 1.000000e+69
  %49 = or i32 %47, 64
  %50 = fmul double %46, 0x32A50FFD44F4A73D
  %51 = select i1 %48, double %46, double %50
  %52 = select i1 %48, i32 %47, i32 %49
  %53 = fcmp ult double %51, 0x479E17B84357691B
  %54 = or i32 %52, 32
  %55 = fmul double %51, 1.000000e-32
  %56 = select i1 %53, double %51, double %55
  %57 = select i1 %53, i32 %52, i32 %54
  %58 = fcmp ult double %56, 1.000000e+21
  %59 = add nsw i32 %57, 16
  %60 = fmul double %56, 0x3C9CD2B297D889BC
  %61 = select i1 %58, double %56, double %60
  %62 = select i1 %58, i32 %57, i32 %59
  %63 = fcmp ult double %61, 1.000000e+13
  %64 = add nsw i32 %62, 8
  %65 = fmul double %61, 1.000000e-08
  %66 = select i1 %63, double %61, double %65
  %67 = select i1 %63, i32 %62, i32 %64
  %68 = fcmp ult double %66, 1.000000e+09
  %69 = add nsw i32 %67, 4
  %70 = fmul double %66, 1.000000e-04
  %71 = select i1 %68, double %66, double %70
  %72 = select i1 %68, i32 %67, i32 %69
  %73 = fcmp ult double %71, 1.000000e+07
  %74 = add nsw i32 %72, 2
  %75 = fmul double %71, 1.000000e-02
  %76 = select i1 %73, double %71, double %75
  %77 = select i1 %73, i32 %72, i32 %74
  %78 = fcmp ult double %76, 1.000000e+06
  br i1 %78, label %126, label %79

79:                                               ; preds = %38
  %80 = add nsw i32 %77, 1
  %81 = fmul double %76, 1.000000e-01
  br label %126

82:                                               ; preds = %36
  %83 = fcmp olt double %27, 1.000000e-250
  %84 = fmul double %27, 1.000000e+256
  %85 = select i1 %83, double %84, double %27
  %86 = select i1 %83, i32 -251, i32 5
  %87 = fcmp olt double %85, 1.000000e-122
  %88 = add nsw i32 %86, -128
  %89 = fmul double %85, 1.000000e+128
  %90 = select i1 %87, double %89, double %85
  %91 = select i1 %87, i32 %88, i32 %86
  %92 = fcmp olt double %90, 1.000000e-58
  %93 = add nsw i32 %91, -64
  %94 = fmul double %90, 1.000000e+64
  %95 = select i1 %92, double %94, double %90
  %96 = select i1 %92, i32 %93, i32 %91
  %97 = fcmp olt double %95, 1.000000e-26
  %98 = add nsw i32 %96, -32
  %99 = fmul double %95, 1.000000e+32
  %100 = select i1 %97, double %99, double %95
  %101 = select i1 %97, i32 %98, i32 %96
  %102 = fcmp olt double %100, 1.000000e-10
  %103 = add nsw i32 %101, -16
  %104 = fmul double %100, 1.000000e+16
  %105 = select i1 %102, double %104, double %100
  %106 = select i1 %102, i32 %103, i32 %101
  %107 = fcmp olt double %105, 1.000000e-02
  %108 = add nsw i32 %106, -8
  %109 = fmul double %105, 1.000000e+08
  %110 = select i1 %107, double %109, double %105
  %111 = select i1 %107, i32 %108, i32 %106
  %112 = fcmp olt double %110, 1.000000e+02
  %113 = add nsw i32 %111, -4
  %114 = fmul double %110, 1.000000e+04
  %115 = select i1 %112, double %114, double %110
  %116 = select i1 %112, i32 %113, i32 %111
  %117 = fcmp olt double %115, 1.000000e+04
  %118 = add nsw i32 %116, -2
  %119 = fmul double %115, 1.000000e+02
  %120 = select i1 %117, double %119, double %115
  %121 = select i1 %117, i32 %118, i32 %116
  %122 = fcmp olt double %120, 1.000000e+05
  br i1 %122, label %123, label %126

123:                                              ; preds = %82
  %124 = add nsw i32 %121, -1
  %125 = fmul double %120, 1.000000e+01
  br label %126

126:                                              ; preds = %123, %82, %79, %38
  %127 = phi double [ %81, %79 ], [ %76, %38 ], [ %125, %123 ], [ %120, %82 ]
  %128 = phi i32 [ %80, %79 ], [ %77, %38 ], [ %124, %123 ], [ %121, %82 ]
  %129 = fmul double %127, 6.553600e+04
  %130 = fptoui double %129 to i64
  %131 = and i64 %130, 65535
  %132 = add nsw i64 %131, -32767
  %133 = icmp ult i64 %132, 2
  br i1 %133, label %134, label %181

134:                                              ; preds = %126
  %135 = lshr i64 %130, 16
  %136 = trunc i64 %135 to i32
  %137 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %137) #12
  store i32 -1431655766, i32* %3, align 4
  %138 = call double @frexp(double %27, i32* nonnull %3) #12
  %139 = fmul double %138, 0x43E0000000000000
  %140 = fptoui double %139 to i64
  %141 = shl i64 %140, 1
  %142 = load i32, i32* %3, align 4
  %143 = add nsw i32 %142, -64
  store i32 %143, i32* %3, align 4
  %144 = icmp sgt i32 %128, 5
  %145 = shl i64 %135, 33
  %146 = ashr exact i64 %145, 32
  %147 = or i64 %146, 1
  br i1 %144, label %148, label %153

148:                                              ; preds = %134
  %149 = add nsw i32 %128, -5
  %150 = tail call fastcc { i64, i64 } @_ZN4abslL7PowFiveEmi(i64 %147, i32 %149) #12
  %151 = extractvalue { i64, i64 } %150, 0
  %152 = extractvalue { i64, i64 } %150, 1
  br label %160

153:                                              ; preds = %134
  %154 = tail call i64 @llvm.ctlz.i64(i64 %147, i1 true) #12, !range !4
  %155 = shl i64 %147, %154
  %156 = sub nsw i32 5, %128
  %157 = tail call fastcc { i64, i64 } @_ZN4abslL7PowFiveEmi(i64 %141, i32 %156) #12
  %158 = extractvalue { i64, i64 } %157, 0
  %159 = extractvalue { i64, i64 } %157, 1
  br label %160

160:                                              ; preds = %153, %148
  %161 = phi i64 [ %141, %148 ], [ %158, %153 ]
  %162 = phi i64 [ 0, %148 ], [ %159, %153 ]
  %163 = phi i64 [ %152, %148 ], [ 0, %153 ]
  %164 = phi i64 [ %151, %148 ], [ %155, %153 ]
  %165 = icmp ult i64 %164, %161
  br i1 %165, label %170, label %166

166:                                              ; preds = %160
  %167 = icmp uge i64 %161, %164
  %168 = icmp ult i64 %163, %162
  %169 = and i1 %168, %167
  br i1 %169, label %170, label %172

170:                                              ; preds = %166, %160
  %171 = add nsw i32 %136, 1
  br label %179

172:                                              ; preds = %166
  %173 = icmp eq i64 %161, %164
  %174 = icmp eq i64 %162, %163
  %175 = and i1 %174, %173
  br i1 %175, label %176, label %179

176:                                              ; preds = %172
  %177 = and i32 %136, 1
  %178 = add nsw i32 %177, %136
  br label %179

179:                                              ; preds = %176, %172, %170
  %180 = phi i32 [ %171, %170 ], [ %178, %176 ], [ %136, %172 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %137) #12
  br label %185

181:                                              ; preds = %126
  %182 = add i64 %130, 32768
  %183 = lshr i64 %182, 16
  %184 = trunc i64 %183 to i32
  br label %185

185:                                              ; preds = %179, %181
  %186 = phi i32 [ %180, %179 ], [ %184, %181 ]
  %187 = icmp eq i32 %186, 1000000
  %188 = select i1 %187, i32 100000, i32 %186
  %189 = zext i1 %187 to i32
  %190 = add nsw i32 %128, %189
  %191 = sdiv i32 %188, 10000
  %192 = mul i32 %191, -10000
  %193 = add i32 %192, %188
  %194 = sext i32 %191 to i64
  %195 = getelementptr inbounds [100 x [2 x i8]], [100 x [2 x i8]]* @_ZN4absl16numbers_internal16two_ASCII_digitsE, i64 0, i64 %194, i64 0
  %196 = bitcast i8* %195 to i16*
  %197 = load i16, i16* %196, align 2
  %198 = sdiv i32 %193, 100
  %199 = mul i32 %198, -100
  %200 = add i32 %199, %193
  %201 = sext i32 %198 to i64
  %202 = getelementptr inbounds [100 x [2 x i8]], [100 x [2 x i8]]* @_ZN4absl16numbers_internal16two_ASCII_digitsE, i64 0, i64 %201, i64 0
  %203 = bitcast i8* %202 to i16*
  %204 = load i16, i16* %203, align 2
  %205 = sext i32 %200 to i64
  %206 = getelementptr inbounds [100 x [2 x i8]], [100 x [2 x i8]]* @_ZN4absl16numbers_internal16two_ASCII_digitsE, i64 0, i64 %205, i64 0
  %207 = bitcast i8* %206 to i16*
  %208 = load i16, i16* %207, align 2
  %209 = zext i16 %208 to i32
  %210 = zext i16 %204 to i64
  %211 = shl nuw i64 %210, 48
  %212 = zext i16 %197 to i64
  %213 = shl nuw nsw i64 %212, 32
  %214 = or i64 %211, %213
  %215 = trunc i16 %197 to i8
  %216 = lshr i64 %214, 40
  %217 = trunc i64 %216 to i24
  store i8 48, i8* %26, align 1
  %218 = getelementptr inbounds i8, i8* %26, i64 1
  store i8 46, i8* %218, align 1
  switch i32 %190, label %345 [
    i32 5, label %219
    i32 4, label %227
    i32 3, label %244
    i32 2, label %264
    i32 1, label %284
    i32 0, label %302
    i32 -4, label %318
    i32 -3, label %320
    i32 -2, label %324
    i32 -1, label %328
  ]

219:                                              ; preds = %185
  store i8 %215, i8* %26, align 1
  %220 = bitcast i8* %218 to i24*
  store i24 %217, i24* %220, align 1
  %221 = getelementptr inbounds i8, i8* %26, i64 4
  %222 = bitcast i8* %221 to i16*
  store i16 %208, i16* %222, align 1
  %223 = getelementptr inbounds i8, i8* %26, i64 6
  store i8 0, i8* %223, align 1
  %224 = ptrtoint i8* %223 to i64
  %225 = ptrtoint i8* %1 to i64
  %226 = sub i64 %224, %225
  br label %386

227:                                              ; preds = %185
  store i8 %215, i8* %26, align 1
  %228 = bitcast i8* %218 to i24*
  store i24 %217, i24* %228, align 1
  %229 = getelementptr inbounds i8, i8* %26, i64 4
  %230 = trunc i16 %208 to i8
  store i8 %230, i8* %229, align 1
  %231 = getelementptr inbounds i8, i8* %26, i64 5
  %232 = and i32 %209, 65280
  %233 = icmp eq i32 %232, 12288
  br i1 %233, label %239, label %234

234:                                              ; preds = %227
  %235 = lshr i16 %208, 8
  %236 = trunc i16 %235 to i8
  %237 = getelementptr inbounds i8, i8* %26, i64 6
  store i8 46, i8* %231, align 1
  %238 = getelementptr inbounds i8, i8* %26, i64 7
  store i8 %236, i8* %237, align 1
  br label %239

239:                                              ; preds = %227, %234
  %240 = phi i8* [ %238, %234 ], [ %231, %227 ]
  store i8 0, i8* %240, align 1
  %241 = ptrtoint i8* %240 to i64
  %242 = ptrtoint i8* %1 to i64
  %243 = sub i64 %241, %242
  br label %386

244:                                              ; preds = %185
  store i8 %215, i8* %26, align 1
  %245 = bitcast i8* %218 to i24*
  store i24 %217, i24* %245, align 1
  %246 = getelementptr inbounds i8, i8* %26, i64 4
  %247 = lshr i32 %209, 8
  %248 = trunc i32 %247 to i8
  %249 = and i32 %209, 255
  %250 = or i32 %247, %249
  %251 = icmp eq i32 %250, 48
  br i1 %251, label %259, label %252

252:                                              ; preds = %244
  %253 = trunc i16 %208 to i8
  %254 = getelementptr inbounds i8, i8* %26, i64 5
  store i8 46, i8* %246, align 1
  %255 = getelementptr inbounds i8, i8* %26, i64 6
  store i8 %253, i8* %254, align 1
  %256 = icmp eq i32 %247, 48
  br i1 %256, label %259, label %257

257:                                              ; preds = %252
  %258 = getelementptr inbounds i8, i8* %26, i64 7
  store i8 %248, i8* %255, align 1
  br label %259

259:                                              ; preds = %252, %244, %257
  %260 = phi i8* [ %258, %257 ], [ %255, %252 ], [ %246, %244 ]
  store i8 0, i8* %260, align 1
  %261 = ptrtoint i8* %260 to i64
  %262 = ptrtoint i8* %1 to i64
  %263 = sub i64 %261, %262
  br label %386

264:                                              ; preds = %185
  store i8 %215, i8* %26, align 1
  %265 = bitcast i8* %218 to i16*
  %266 = trunc i64 %216 to i16
  store i16 %266, i16* %265, align 1
  %267 = getelementptr inbounds i8, i8* %26, i64 3
  store i8 46, i8* %267, align 1
  %268 = getelementptr inbounds i8, i8* %26, i64 4
  %269 = lshr i16 %204, 8
  %270 = trunc i16 %269 to i8
  store i8 %270, i8* %268, align 1
  %271 = getelementptr inbounds i8, i8* %26, i64 5
  %272 = bitcast i8* %271 to i16*
  store i16 %208, i16* %272, align 1
  %273 = getelementptr inbounds i8, i8* %26, i64 7
  br label %274

274:                                              ; preds = %274, %264
  %275 = phi i8* [ %273, %264 ], [ %276, %274 ]
  %276 = getelementptr inbounds i8, i8* %275, i64 -1
  %277 = load i8, i8* %276, align 1
  switch i8 %277, label %278 [
    i8 48, label %274
    i8 46, label %279
  ]

278:                                              ; preds = %274
  br label %279

279:                                              ; preds = %274, %278
  %280 = phi i8* [ %275, %278 ], [ %276, %274 ]
  store i8 0, i8* %280, align 1
  %281 = ptrtoint i8* %280 to i64
  %282 = ptrtoint i8* %1 to i64
  %283 = sub i64 %281, %282
  br label %386

284:                                              ; preds = %185
  store i8 %215, i8* %26, align 1
  %285 = trunc i64 %216 to i8
  store i8 %285, i8* %218, align 1
  %286 = getelementptr inbounds i8, i8* %26, i64 2
  store i8 46, i8* %286, align 1
  %287 = getelementptr inbounds i8, i8* %26, i64 3
  %288 = bitcast i8* %287 to i16*
  store i16 %204, i16* %288, align 1
  %289 = getelementptr inbounds i8, i8* %26, i64 5
  %290 = bitcast i8* %289 to i16*
  store i16 %208, i16* %290, align 1
  %291 = getelementptr inbounds i8, i8* %26, i64 7
  br label %292

292:                                              ; preds = %292, %284
  %293 = phi i8* [ %291, %284 ], [ %294, %292 ]
  %294 = getelementptr inbounds i8, i8* %293, i64 -1
  %295 = load i8, i8* %294, align 1
  switch i8 %295, label %296 [
    i8 48, label %292
    i8 46, label %297
  ]

296:                                              ; preds = %292
  br label %297

297:                                              ; preds = %292, %296
  %298 = phi i8* [ %293, %296 ], [ %294, %292 ]
  store i8 0, i8* %298, align 1
  %299 = ptrtoint i8* %298 to i64
  %300 = ptrtoint i8* %1 to i64
  %301 = sub i64 %299, %300
  br label %386

302:                                              ; preds = %185
  store i8 %215, i8* %26, align 1
  store i8 46, i8* %218, align 1
  %303 = getelementptr inbounds i8, i8* %26, i64 2
  %304 = bitcast i8* %303 to i24*
  store i24 %217, i24* %304, align 1
  %305 = getelementptr inbounds i8, i8* %26, i64 5
  %306 = bitcast i8* %305 to i16*
  store i16 %208, i16* %306, align 1
  %307 = getelementptr inbounds i8, i8* %26, i64 7
  br label %308

308:                                              ; preds = %308, %302
  %309 = phi i8* [ %307, %302 ], [ %310, %308 ]
  %310 = getelementptr inbounds i8, i8* %309, i64 -1
  %311 = load i8, i8* %310, align 1
  switch i8 %311, label %312 [
    i8 48, label %308
    i8 46, label %313
  ]

312:                                              ; preds = %308
  br label %313

313:                                              ; preds = %308, %312
  %314 = phi i8* [ %309, %312 ], [ %310, %308 ]
  store i8 0, i8* %314, align 1
  %315 = ptrtoint i8* %314 to i64
  %316 = ptrtoint i8* %1 to i64
  %317 = sub i64 %315, %316
  br label %386

318:                                              ; preds = %185
  %319 = getelementptr inbounds i8, i8* %26, i64 2
  store i8 48, i8* %319, align 1
  br label %320

320:                                              ; preds = %185, %318
  %321 = phi i8* [ %26, %185 ], [ %218, %318 ]
  %322 = getelementptr inbounds i8, i8* %321, i64 2
  store i8 48, i8* %322, align 1
  %323 = getelementptr inbounds i8, i8* %321, i64 1
  br label %324

324:                                              ; preds = %185, %320
  %325 = phi i8* [ %26, %185 ], [ %323, %320 ]
  %326 = getelementptr inbounds i8, i8* %325, i64 2
  store i8 48, i8* %326, align 1
  %327 = getelementptr inbounds i8, i8* %325, i64 1
  br label %328

328:                                              ; preds = %185, %324
  %329 = phi i8* [ %26, %185 ], [ %327, %324 ]
  %330 = getelementptr inbounds i8, i8* %329, i64 2
  store i8 %215, i8* %330, align 1
  %331 = getelementptr inbounds i8, i8* %329, i64 3
  %332 = bitcast i8* %331 to i24*
  store i24 %217, i24* %332, align 1
  %333 = getelementptr inbounds i8, i8* %329, i64 6
  %334 = bitcast i8* %333 to i16*
  store i16 %208, i16* %334, align 1
  %335 = getelementptr inbounds i8, i8* %329, i64 8
  br label %336

336:                                              ; preds = %336, %328
  %337 = phi i8* [ %335, %328 ], [ %338, %336 ]
  %338 = getelementptr inbounds i8, i8* %337, i64 -1
  %339 = load i8, i8* %338, align 1
  %340 = icmp eq i8 %339, 48
  br i1 %340, label %336, label %341

341:                                              ; preds = %336
  store i8 0, i8* %337, align 1
  %342 = ptrtoint i8* %337 to i64
  %343 = ptrtoint i8* %1 to i64
  %344 = sub i64 %342, %343
  br label %386

345:                                              ; preds = %185
  store i8 %215, i8* %26, align 1
  %346 = getelementptr inbounds i8, i8* %26, i64 2
  %347 = bitcast i8* %346 to i24*
  store i24 %217, i24* %347, align 1
  %348 = getelementptr inbounds i8, i8* %26, i64 5
  %349 = bitcast i8* %348 to i16*
  store i16 %208, i16* %349, align 1
  %350 = getelementptr inbounds i8, i8* %26, i64 7
  br label %351

351:                                              ; preds = %351, %345
  %352 = phi i8* [ %350, %345 ], [ %353, %351 ]
  %353 = getelementptr inbounds i8, i8* %352, i64 -1
  %354 = load i8, i8* %353, align 1
  switch i8 %354, label %355 [
    i8 48, label %351
    i8 46, label %356
  ]

355:                                              ; preds = %351
  br label %356

356:                                              ; preds = %351, %355
  %357 = phi i8* [ %352, %355 ], [ %353, %351 ]
  %358 = getelementptr inbounds i8, i8* %357, i64 1
  store i8 101, i8* %357, align 1
  %359 = icmp sgt i32 %190, 0
  %360 = getelementptr inbounds i8, i8* %357, i64 2
  br i1 %359, label %361, label %362

361:                                              ; preds = %356
  store i8 43, i8* %358, align 1
  br label %364

362:                                              ; preds = %356
  store i8 45, i8* %358, align 1
  %363 = sub nsw i32 0, %190
  br label %364

364:                                              ; preds = %362, %361
  %365 = phi i32 [ %190, %361 ], [ %363, %362 ]
  %366 = icmp sgt i32 %365, 99
  br i1 %366, label %367, label %374

367:                                              ; preds = %364
  %368 = udiv i32 %365, 100
  %369 = mul i32 %368, -100
  %370 = add nsw i32 %369, %365
  %371 = trunc i32 %368 to i8
  %372 = add i8 %371, 48
  %373 = getelementptr inbounds i8, i8* %357, i64 3
  store i8 %372, i8* %360, align 1
  br label %374

374:                                              ; preds = %367, %364
  %375 = phi i8* [ %373, %367 ], [ %360, %364 ]
  %376 = phi i32 [ %370, %367 ], [ %365, %364 ]
  %377 = sext i32 %376 to i64
  %378 = getelementptr inbounds [100 x [2 x i8]], [100 x [2 x i8]]* @_ZN4absl16numbers_internal16two_ASCII_digitsE, i64 0, i64 %377, i64 0
  %379 = bitcast i8* %378 to i16*
  %380 = bitcast i8* %375 to i16*
  %381 = load i16, i16* %379, align 2
  store i16 %381, i16* %380, align 1
  %382 = getelementptr inbounds i8, i8* %375, i64 2
  store i8 0, i8* %382, align 1
  %383 = ptrtoint i8* %382 to i64
  %384 = ptrtoint i8* %1 to i64
  %385 = sub i64 %383, %384
  br label %386

386:                                              ; preds = %219, %239, %259, %279, %297, %313, %341, %374, %30, %14, %5
  %387 = phi i64 [ 3, %5 ], [ %19, %14 ], [ %35, %30 ], [ %385, %374 ], [ %344, %341 ], [ %317, %313 ], [ %301, %297 ], [ %283, %279 ], [ %263, %259 ], [ %243, %239 ], [ %226, %219 ]
  ret i64 %387
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4absl16numbers_internal17safe_strto32_baseENS_11string_viewEPii(i8*, i64, i32* nocapture, i32) local_unnamed_addr #0 {
  %5 = alloca %"class.absl::string_view", align 8
  %6 = alloca i32, align 4
  %7 = alloca i8, align 1
  %8 = bitcast %"class.absl::string_view"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %8)
  %9 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9)
  %10 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %5, i64 0, i32 0
  store i8* %0, i8** %10, align 8
  %11 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %5, i64 0, i32 1
  store i64 %1, i64* %11, align 8
  store i32 %3, i32* %6, align 4
  store i32 0, i32* %2, align 4
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %7) #12
  store i8 -86, i8* %7, align 1
  %12 = call fastcc zeroext i1 @_ZN4absl12_GLOBAL__N_124safe_parse_sign_and_baseEPNS_11string_viewEPiPb(%"class.absl::string_view"* nonnull %5, i32* nonnull %6, i8* nonnull %7) #12
  br i1 %12, label %13, label %75

13:                                               ; preds = %4
  %14 = load i8, i8* %7, align 1, !range !5
  %15 = icmp eq i8 %14, 0
  %16 = load i8*, i8** %10, align 8
  %17 = load i64, i64* %11, align 8
  %18 = load i32, i32* %6, align 4
  %19 = sext i32 %18 to i64
  br i1 %15, label %20, label %44

20:                                               ; preds = %13
  %21 = getelementptr inbounds [37 x i32], [37 x i32]* @_ZN4absl12_GLOBAL__N_112LookupTablesIiE13kVmaxOverBaseE, i64 0, i64 %19
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds i8, i8* %16, i64 %17
  %24 = icmp sgt i64 %17, 0
  br i1 %24, label %25, label %72

25:                                               ; preds = %20, %40
  %26 = phi i8* [ %42, %40 ], [ %16, %20 ]
  %27 = phi i32 [ %41, %40 ], [ 0, %20 ]
  %28 = load i8, i8* %26, align 1
  %29 = zext i8 %28 to i64
  %30 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN4absl12_GLOBAL__N_111kAsciiToIntE, i64 0, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = sext i8 %31 to i32
  %33 = icmp sgt i32 %18, %32
  br i1 %33, label %34, label %72

34:                                               ; preds = %25
  %35 = icmp sgt i32 %27, %22
  br i1 %35, label %72, label %36

36:                                               ; preds = %34
  %37 = mul nsw i32 %27, %18
  %38 = sub nsw i32 2147483647, %32
  %39 = icmp sgt i32 %37, %38
  br i1 %39, label %72, label %40

40:                                               ; preds = %36
  %41 = add nsw i32 %37, %32
  %42 = getelementptr inbounds i8, i8* %26, i64 1
  %43 = icmp ult i8* %42, %23
  br i1 %43, label %25, label %72

44:                                               ; preds = %13
  %45 = getelementptr inbounds [37 x i32], [37 x i32]* @_ZN4absl12_GLOBAL__N_112LookupTablesIiE13kVminOverBaseE, i64 0, i64 %19
  %46 = load i32, i32* %45, align 4
  %47 = srem i32 -2147483648, %18
  %48 = icmp sgt i32 %47, 0
  %49 = zext i1 %48 to i32
  %50 = add nsw i32 %46, %49
  %51 = getelementptr inbounds i8, i8* %16, i64 %17
  %52 = icmp sgt i64 %17, 0
  br i1 %52, label %53, label %72

53:                                               ; preds = %44, %68
  %54 = phi i8* [ %70, %68 ], [ %16, %44 ]
  %55 = phi i32 [ %69, %68 ], [ 0, %44 ]
  %56 = load i8, i8* %54, align 1
  %57 = zext i8 %56 to i64
  %58 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN4absl12_GLOBAL__N_111kAsciiToIntE, i64 0, i64 %57
  %59 = load i8, i8* %58, align 1
  %60 = sext i8 %59 to i32
  %61 = icmp sgt i32 %18, %60
  br i1 %61, label %62, label %72

62:                                               ; preds = %53
  %63 = icmp slt i32 %55, %50
  br i1 %63, label %72, label %64

64:                                               ; preds = %62
  %65 = mul nsw i32 %55, %18
  %66 = or i32 %60, -2147483648
  %67 = icmp slt i32 %65, %66
  br i1 %67, label %72, label %68

68:                                               ; preds = %64
  %69 = sub nsw i32 %65, %60
  %70 = getelementptr inbounds i8, i8* %54, i64 1
  %71 = icmp ult i8* %70, %51
  br i1 %71, label %53, label %72

72:                                               ; preds = %68, %64, %62, %53, %40, %36, %34, %25, %44, %20
  %73 = phi i32 [ 0, %20 ], [ 0, %44 ], [ %41, %40 ], [ 2147483647, %36 ], [ 2147483647, %34 ], [ %27, %25 ], [ %69, %68 ], [ -2147483648, %64 ], [ -2147483648, %62 ], [ %55, %53 ]
  %74 = phi i1 [ true, %20 ], [ true, %44 ], [ true, %40 ], [ false, %36 ], [ false, %34 ], [ false, %25 ], [ true, %68 ], [ false, %64 ], [ false, %62 ], [ false, %53 ]
  store i32 %73, i32* %2, align 4
  br label %75

75:                                               ; preds = %72, %4
  %76 = phi i1 [ false, %4 ], [ %74, %72 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %7) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %8)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9)
  ret i1 %76
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4absl16numbers_internal17safe_strto64_baseENS_11string_viewEPli(i8*, i64, i64* nocapture, i32) local_unnamed_addr #0 {
  %5 = alloca %"class.absl::string_view", align 8
  %6 = alloca i32, align 4
  %7 = alloca i8, align 1
  %8 = bitcast %"class.absl::string_view"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %8)
  %9 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9)
  %10 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %5, i64 0, i32 0
  store i8* %0, i8** %10, align 8
  %11 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %5, i64 0, i32 1
  store i64 %1, i64* %11, align 8
  store i32 %3, i32* %6, align 4
  store i64 0, i64* %2, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %7) #12
  store i8 -86, i8* %7, align 1
  %12 = call fastcc zeroext i1 @_ZN4absl12_GLOBAL__N_124safe_parse_sign_and_baseEPNS_11string_viewEPiPb(%"class.absl::string_view"* nonnull %5, i32* nonnull %6, i8* nonnull %7) #12
  br i1 %12, label %13, label %77

13:                                               ; preds = %4
  %14 = load i8, i8* %7, align 1, !range !5
  %15 = icmp eq i8 %14, 0
  %16 = load i8*, i8** %10, align 8
  %17 = load i64, i64* %11, align 8
  %18 = load i32, i32* %6, align 4
  %19 = sext i32 %18 to i64
  br i1 %15, label %20, label %45

20:                                               ; preds = %13
  %21 = getelementptr inbounds [37 x i64], [37 x i64]* @_ZN4absl12_GLOBAL__N_112LookupTablesIlE13kVmaxOverBaseE, i64 0, i64 %19
  %22 = load i64, i64* %21, align 8
  %23 = getelementptr inbounds i8, i8* %16, i64 %17
  %24 = icmp sgt i64 %17, 0
  br i1 %24, label %25, label %74

25:                                               ; preds = %20, %41
  %26 = phi i8* [ %43, %41 ], [ %16, %20 ]
  %27 = phi i64 [ %42, %41 ], [ 0, %20 ]
  %28 = load i8, i8* %26, align 1
  %29 = zext i8 %28 to i64
  %30 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN4absl12_GLOBAL__N_111kAsciiToIntE, i64 0, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = sext i8 %31 to i32
  %33 = icmp sgt i32 %18, %32
  br i1 %33, label %34, label %74

34:                                               ; preds = %25
  %35 = icmp sgt i64 %27, %22
  br i1 %35, label %74, label %36

36:                                               ; preds = %34
  %37 = mul nsw i64 %27, %19
  %38 = sext i8 %31 to i64
  %39 = sub nsw i64 9223372036854775807, %38
  %40 = icmp sgt i64 %37, %39
  br i1 %40, label %74, label %41

41:                                               ; preds = %36
  %42 = add nsw i64 %37, %38
  %43 = getelementptr inbounds i8, i8* %26, i64 1
  %44 = icmp ult i8* %43, %23
  br i1 %44, label %25, label %74

45:                                               ; preds = %13
  %46 = getelementptr inbounds [37 x i64], [37 x i64]* @_ZN4absl12_GLOBAL__N_112LookupTablesIlE13kVminOverBaseE, i64 0, i64 %19
  %47 = load i64, i64* %46, align 8
  %48 = srem i64 -9223372036854775808, %19
  %49 = icmp sgt i64 %48, 0
  %50 = zext i1 %49 to i64
  %51 = add nsw i64 %47, %50
  %52 = getelementptr inbounds i8, i8* %16, i64 %17
  %53 = icmp sgt i64 %17, 0
  br i1 %53, label %54, label %74

54:                                               ; preds = %45, %70
  %55 = phi i8* [ %72, %70 ], [ %16, %45 ]
  %56 = phi i64 [ %71, %70 ], [ 0, %45 ]
  %57 = load i8, i8* %55, align 1
  %58 = zext i8 %57 to i64
  %59 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN4absl12_GLOBAL__N_111kAsciiToIntE, i64 0, i64 %58
  %60 = load i8, i8* %59, align 1
  %61 = sext i8 %60 to i32
  %62 = icmp sgt i32 %18, %61
  br i1 %62, label %63, label %74

63:                                               ; preds = %54
  %64 = icmp slt i64 %56, %51
  br i1 %64, label %74, label %65

65:                                               ; preds = %63
  %66 = mul nsw i64 %56, %19
  %67 = sext i8 %60 to i64
  %68 = or i64 %67, -9223372036854775808
  %69 = icmp slt i64 %66, %68
  br i1 %69, label %74, label %70

70:                                               ; preds = %65
  %71 = sub nsw i64 %66, %67
  %72 = getelementptr inbounds i8, i8* %55, i64 1
  %73 = icmp ult i8* %72, %52
  br i1 %73, label %54, label %74

74:                                               ; preds = %70, %65, %63, %54, %41, %36, %34, %25, %45, %20
  %75 = phi i64 [ 0, %20 ], [ 0, %45 ], [ %42, %41 ], [ 9223372036854775807, %36 ], [ 9223372036854775807, %34 ], [ %27, %25 ], [ %71, %70 ], [ -9223372036854775808, %65 ], [ -9223372036854775808, %63 ], [ %56, %54 ]
  %76 = phi i1 [ true, %20 ], [ true, %45 ], [ true, %41 ], [ false, %36 ], [ false, %34 ], [ false, %25 ], [ true, %70 ], [ false, %65 ], [ false, %63 ], [ false, %54 ]
  store i64 %75, i64* %2, align 8
  br label %77

77:                                               ; preds = %74, %4
  %78 = phi i1 [ false, %4 ], [ %76, %74 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %7) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %8)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9)
  ret i1 %78
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4absl16numbers_internal18safe_strto128_baseENS_11string_viewEPNS_6int128Ei(i8*, i64, %"class.absl::int128"* nocapture, i32) local_unnamed_addr #0 {
  %5 = alloca %"class.absl::string_view", align 8
  %6 = alloca i32, align 4
  %7 = alloca i8, align 1
  %8 = bitcast %"class.absl::string_view"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %8)
  %9 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9)
  %10 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %5, i64 0, i32 0
  store i8* %0, i8** %10, align 8
  %11 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %5, i64 0, i32 1
  store i64 %1, i64* %11, align 8
  store i32 %3, i32* %6, align 4
  %12 = getelementptr inbounds %"class.absl::int128", %"class.absl::int128"* %2, i64 0, i32 0
  store i128 0, i128* %12, align 16
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %7) #12
  store i8 -86, i8* %7, align 1
  %13 = call fastcc zeroext i1 @_ZN4absl12_GLOBAL__N_124safe_parse_sign_and_baseEPNS_11string_viewEPiPb(%"class.absl::string_view"* nonnull %5, i32* nonnull %6, i8* nonnull %7) #12
  br i1 %13, label %14, label %195

14:                                               ; preds = %4
  %15 = load i8, i8* %7, align 1, !range !5
  %16 = icmp eq i8 %15, 0
  %17 = load i8*, i8** %10, align 8
  %18 = load i64, i64* %11, align 8
  %19 = load i32, i32* %6, align 4
  %20 = sext i32 %19 to i64
  br i1 %16, label %21, label %101

21:                                               ; preds = %14
  %22 = getelementptr inbounds [37 x %"class.absl::int128"], [37 x %"class.absl::int128"]* @_ZN4absl12_GLOBAL__N_112LookupTablesINS_6int128EE13kVmaxOverBaseE, i64 0, i64 %20
  %23 = getelementptr inbounds i8, i8* %17, i64 %18
  %24 = icmp sgt i64 %18, 0
  br i1 %24, label %25, label %94

25:                                               ; preds = %21
  %26 = bitcast %"class.absl::int128"* %22 to i8*
  %27 = getelementptr inbounds i8, i8* %26, i64 8
  %28 = bitcast i8* %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = bitcast %"class.absl::int128"* %22 to i64*
  %31 = load i64, i64* %30, align 16
  %32 = zext i64 %29 to i128
  %33 = shl nuw i128 %32, 64
  %34 = zext i64 %31 to i128
  %35 = or i128 %33, %34
  %36 = ashr i32 %19, 31
  %37 = sext i32 %36 to i64
  %38 = zext i64 %37 to i128
  %39 = shl nuw i128 %38, 64
  %40 = zext i64 %20 to i128
  %41 = or i128 %39, %40
  %42 = load i64, i64* bitcast (%"class.absl::int128"* @_ZZN4absl12_GLOBAL__N_123safe_parse_positive_intINS_6int128EEEbNS_11string_viewEiPT_E4vmax to i64*), align 16
  %43 = load i64, i64* bitcast (i8* getelementptr inbounds (i8, i8* bitcast (%"class.absl::int128"* @_ZZN4absl12_GLOBAL__N_123safe_parse_positive_intINS_6int128EEEbNS_11string_viewEiPT_E4vmax to i8*), i64 8) to i64*), align 8
  %44 = zext i64 %43 to i128
  %45 = shl nuw i128 %44, 64
  %46 = zext i64 %42 to i128
  %47 = or i128 %45, %46
  br label %48

48:                                               ; preds = %84, %25
  %49 = phi i8* [ %17, %25 ], [ %89, %84 ]
  %50 = phi i64 [ 0, %25 ], [ %88, %84 ]
  %51 = phi i64 [ 0, %25 ], [ %87, %84 ]
  %52 = load i8, i8* %49, align 1
  %53 = zext i8 %52 to i64
  %54 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN4absl12_GLOBAL__N_111kAsciiToIntE, i64 0, i64 %53
  %55 = load i8, i8* %54, align 1
  %56 = sext i8 %55 to i32
  %57 = icmp sgt i32 %19, %56
  br i1 %57, label %63, label %58

58:                                               ; preds = %48
  %59 = bitcast %"class.absl::int128"* %2 to i8*
  %60 = bitcast %"class.absl::int128"* %2 to i64*
  store i64 %50, i64* %60, align 16
  %61 = getelementptr inbounds i8, i8* %59, i64 8
  %62 = bitcast i8* %61 to i64*
  store i64 %51, i64* %62, align 8
  br label %195

63:                                               ; preds = %48
  %64 = zext i64 %51 to i128
  %65 = shl nuw i128 %64, 64
  %66 = zext i64 %50 to i128
  %67 = or i128 %65, %66
  %68 = icmp sgt i128 %67, %35
  br i1 %68, label %69, label %71

69:                                               ; preds = %63
  %70 = bitcast %"class.absl::int128"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %70, i8* align 16 bitcast (%"class.absl::int128"* @_ZZN4absl12_GLOBAL__N_123safe_parse_positive_intINS_6int128EEEbNS_11string_viewEiPT_E4vmax to i8*), i64 16, i1 false) #12
  br label %195

71:                                               ; preds = %63
  %72 = mul nsw i128 %67, %41
  %73 = sext i8 %55 to i64
  %74 = ashr i8 %55, 7
  %75 = sext i8 %74 to i64
  %76 = zext i64 %75 to i128
  %77 = shl nuw i128 %76, 64
  %78 = zext i64 %73 to i128
  %79 = or i128 %77, %78
  %80 = sub nsw i128 %47, %79
  %81 = icmp sgt i128 %72, %80
  br i1 %81, label %82, label %84

82:                                               ; preds = %71
  %83 = bitcast %"class.absl::int128"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %83, i8* align 16 bitcast (%"class.absl::int128"* @_ZZN4absl12_GLOBAL__N_123safe_parse_positive_intINS_6int128EEEbNS_11string_viewEiPT_E4vmax to i8*), i64 16, i1 false) #12
  br label %195

84:                                               ; preds = %71
  %85 = add nsw i128 %79, %72
  %86 = lshr i128 %85, 64
  %87 = trunc i128 %86 to i64
  %88 = trunc i128 %85 to i64
  %89 = getelementptr inbounds i8, i8* %49, i64 1
  %90 = icmp ult i8* %89, %23
  br i1 %90, label %48, label %91

91:                                               ; preds = %84
  %92 = trunc i128 %86 to i64
  %93 = trunc i128 %85 to i64
  br label %94

94:                                               ; preds = %91, %21
  %95 = phi i64 [ 0, %21 ], [ %92, %91 ]
  %96 = phi i64 [ 0, %21 ], [ %93, %91 ]
  %97 = bitcast %"class.absl::int128"* %2 to i8*
  %98 = bitcast %"class.absl::int128"* %2 to i64*
  store i64 %96, i64* %98, align 16
  %99 = getelementptr inbounds i8, i8* %97, i64 8
  %100 = bitcast i8* %99 to i64*
  store i64 %95, i64* %100, align 8
  br label %195

101:                                              ; preds = %14
  %102 = getelementptr inbounds [37 x %"class.absl::int128"], [37 x %"class.absl::int128"]* @_ZN4absl12_GLOBAL__N_112LookupTablesINS_6int128EE13kVminOverBaseE, i64 0, i64 %20
  %103 = bitcast %"class.absl::int128"* %102 to i8*
  %104 = bitcast %"class.absl::int128"* %102 to i64*
  %105 = load i64, i64* %104, align 16
  %106 = getelementptr inbounds i8, i8* %103, i64 8
  %107 = bitcast i8* %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = load i64, i64* bitcast (%"class.absl::int128"* @_ZZN4absl12_GLOBAL__N_123safe_parse_negative_intINS_6int128EEEbNS_11string_viewEiPT_E4vmin to i64*), align 16
  %110 = load i64, i64* bitcast (i8* getelementptr inbounds (i8, i8* bitcast (%"class.absl::int128"* @_ZZN4absl12_GLOBAL__N_123safe_parse_negative_intINS_6int128EEEbNS_11string_viewEiPT_E4vmin to i8*), i64 8) to i64*), align 8
  %111 = ashr i32 %19, 31
  %112 = sext i32 %111 to i64
  %113 = zext i64 %110 to i128
  %114 = shl nuw i128 %113, 64
  %115 = zext i64 %109 to i128
  %116 = or i128 %114, %115
  %117 = zext i64 %112 to i128
  %118 = shl nuw i128 %117, 64
  %119 = zext i64 %20 to i128
  %120 = or i128 %118, %119
  %121 = srem i128 %116, %120
  %122 = icmp sgt i128 %121, 0
  br i1 %122, label %123, label %132

123:                                              ; preds = %101
  %124 = zext i64 %108 to i128
  %125 = shl nuw i128 %124, 64
  %126 = zext i64 %105 to i128
  %127 = or i128 %125, %126
  %128 = add nsw i128 %127, 1
  %129 = lshr i128 %128, 64
  %130 = trunc i128 %129 to i64
  %131 = trunc i128 %128 to i64
  br label %132

132:                                              ; preds = %123, %101
  %133 = phi i64 [ %131, %123 ], [ %105, %101 ]
  %134 = phi i64 [ %130, %123 ], [ %108, %101 ]
  %135 = getelementptr inbounds i8, i8* %17, i64 %18
  %136 = icmp sgt i64 %18, 0
  br i1 %136, label %137, label %188

137:                                              ; preds = %132
  %138 = zext i64 %134 to i128
  %139 = shl nuw i128 %138, 64
  %140 = zext i64 %133 to i128
  %141 = or i128 %139, %140
  br label %142

142:                                              ; preds = %178, %137
  %143 = phi i8* [ %17, %137 ], [ %183, %178 ]
  %144 = phi i64 [ 0, %137 ], [ %182, %178 ]
  %145 = phi i64 [ 0, %137 ], [ %181, %178 ]
  %146 = load i8, i8* %143, align 1
  %147 = zext i8 %146 to i64
  %148 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN4absl12_GLOBAL__N_111kAsciiToIntE, i64 0, i64 %147
  %149 = load i8, i8* %148, align 1
  %150 = sext i8 %149 to i32
  %151 = icmp sgt i32 %19, %150
  br i1 %151, label %157, label %152

152:                                              ; preds = %142
  %153 = bitcast %"class.absl::int128"* %2 to i8*
  %154 = bitcast %"class.absl::int128"* %2 to i64*
  store i64 %144, i64* %154, align 16
  %155 = getelementptr inbounds i8, i8* %153, i64 8
  %156 = bitcast i8* %155 to i64*
  store i64 %145, i64* %156, align 8
  br label %195

157:                                              ; preds = %142
  %158 = zext i64 %145 to i128
  %159 = shl nuw i128 %158, 64
  %160 = zext i64 %144 to i128
  %161 = or i128 %159, %160
  %162 = icmp slt i128 %161, %141
  br i1 %162, label %163, label %165

163:                                              ; preds = %157
  %164 = bitcast %"class.absl::int128"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %164, i8* align 16 bitcast (%"class.absl::int128"* @_ZZN4absl12_GLOBAL__N_123safe_parse_negative_intINS_6int128EEEbNS_11string_viewEiPT_E4vmin to i8*), i64 16, i1 false) #12
  br label %195

165:                                              ; preds = %157
  %166 = mul nsw i128 %161, %120
  %167 = sext i8 %149 to i64
  %168 = ashr i8 %149, 7
  %169 = sext i8 %168 to i64
  %170 = zext i64 %169 to i128
  %171 = shl nuw i128 %170, 64
  %172 = zext i64 %167 to i128
  %173 = or i128 %171, %172
  %174 = add nsw i128 %173, %116
  %175 = icmp slt i128 %166, %174
  br i1 %175, label %176, label %178

176:                                              ; preds = %165
  %177 = bitcast %"class.absl::int128"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %177, i8* align 16 bitcast (%"class.absl::int128"* @_ZZN4absl12_GLOBAL__N_123safe_parse_negative_intINS_6int128EEEbNS_11string_viewEiPT_E4vmin to i8*), i64 16, i1 false) #12
  br label %195

178:                                              ; preds = %165
  %179 = sub nsw i128 %166, %173
  %180 = lshr i128 %179, 64
  %181 = trunc i128 %180 to i64
  %182 = trunc i128 %179 to i64
  %183 = getelementptr inbounds i8, i8* %143, i64 1
  %184 = icmp ult i8* %183, %135
  br i1 %184, label %142, label %185

185:                                              ; preds = %178
  %186 = trunc i128 %180 to i64
  %187 = trunc i128 %179 to i64
  br label %188

188:                                              ; preds = %185, %132
  %189 = phi i64 [ 0, %132 ], [ %186, %185 ]
  %190 = phi i64 [ 0, %132 ], [ %187, %185 ]
  %191 = bitcast %"class.absl::int128"* %2 to i8*
  %192 = bitcast %"class.absl::int128"* %2 to i64*
  store i64 %190, i64* %192, align 16
  %193 = getelementptr inbounds i8, i8* %191, i64 8
  %194 = bitcast i8* %193 to i64*
  store i64 %189, i64* %194, align 8
  br label %195

195:                                              ; preds = %4, %58, %69, %82, %94, %152, %163, %176, %188
  %196 = phi i1 [ false, %4 ], [ true, %94 ], [ false, %58 ], [ false, %69 ], [ false, %82 ], [ true, %188 ], [ false, %152 ], [ false, %163 ], [ false, %176 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %7) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %8)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9)
  ret i1 %196
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4absl16numbers_internal18safe_strtou32_baseENS_11string_viewEPji(i8*, i64, i32* nocapture, i32) local_unnamed_addr #0 {
  %5 = alloca %"class.absl::string_view", align 8
  %6 = alloca i32, align 4
  %7 = alloca i8, align 1
  %8 = bitcast %"class.absl::string_view"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %8)
  %9 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9)
  %10 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %5, i64 0, i32 0
  store i8* %0, i8** %10, align 8
  %11 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %5, i64 0, i32 1
  store i64 %1, i64* %11, align 8
  store i32 %3, i32* %6, align 4
  store i32 0, i32* %2, align 4
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %7) #12
  store i8 -86, i8* %7, align 1
  %12 = call fastcc zeroext i1 @_ZN4absl12_GLOBAL__N_124safe_parse_sign_and_baseEPNS_11string_viewEPiPb(%"class.absl::string_view"* nonnull %5, i32* nonnull %6, i8* nonnull %7) #12
  %13 = load i8, i8* %7, align 1
  %14 = icmp eq i8 %13, 0
  %15 = and i1 %12, %14
  br i1 %15, label %16, label %47

16:                                               ; preds = %4
  %17 = load i8*, i8** %10, align 8
  %18 = load i64, i64* %11, align 8
  %19 = load i32, i32* %6, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds [37 x i32], [37 x i32]* @_ZN4absl12_GLOBAL__N_112LookupTablesIjE13kVmaxOverBaseE, i64 0, i64 %20
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds i8, i8* %17, i64 %18
  %24 = icmp sgt i64 %18, 0
  br i1 %24, label %25, label %44

25:                                               ; preds = %16, %40
  %26 = phi i8* [ %42, %40 ], [ %17, %16 ]
  %27 = phi i32 [ %41, %40 ], [ 0, %16 ]
  %28 = load i8, i8* %26, align 1
  %29 = zext i8 %28 to i64
  %30 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN4absl12_GLOBAL__N_111kAsciiToIntE, i64 0, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = sext i8 %31 to i32
  %33 = icmp sgt i32 %19, %32
  br i1 %33, label %34, label %44

34:                                               ; preds = %25
  %35 = icmp ugt i32 %27, %22
  br i1 %35, label %44, label %36

36:                                               ; preds = %34
  %37 = mul i32 %27, %19
  %38 = xor i32 %32, -1
  %39 = icmp ugt i32 %37, %38
  br i1 %39, label %44, label %40

40:                                               ; preds = %36
  %41 = add i32 %37, %32
  %42 = getelementptr inbounds i8, i8* %26, i64 1
  %43 = icmp ult i8* %42, %23
  br i1 %43, label %25, label %44

44:                                               ; preds = %40, %36, %34, %25, %16
  %45 = phi i32 [ 0, %16 ], [ %41, %40 ], [ -1, %36 ], [ -1, %34 ], [ %27, %25 ]
  %46 = phi i1 [ true, %16 ], [ true, %40 ], [ false, %36 ], [ false, %34 ], [ false, %25 ]
  store i32 %45, i32* %2, align 4
  br label %47

47:                                               ; preds = %44, %4
  %48 = phi i1 [ false, %4 ], [ %46, %44 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %7) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %8)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9)
  ret i1 %48
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4absl16numbers_internal18safe_strtou64_baseENS_11string_viewEPmi(i8*, i64, i64* nocapture, i32) local_unnamed_addr #0 {
  %5 = alloca %"class.absl::string_view", align 8
  %6 = alloca i32, align 4
  %7 = alloca i8, align 1
  %8 = bitcast %"class.absl::string_view"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %8)
  %9 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9)
  %10 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %5, i64 0, i32 0
  store i8* %0, i8** %10, align 8
  %11 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %5, i64 0, i32 1
  store i64 %1, i64* %11, align 8
  store i32 %3, i32* %6, align 4
  store i64 0, i64* %2, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %7) #12
  store i8 -86, i8* %7, align 1
  %12 = call fastcc zeroext i1 @_ZN4absl12_GLOBAL__N_124safe_parse_sign_and_baseEPNS_11string_viewEPiPb(%"class.absl::string_view"* nonnull %5, i32* nonnull %6, i8* nonnull %7) #12
  %13 = load i8, i8* %7, align 1
  %14 = icmp eq i8 %13, 0
  %15 = and i1 %12, %14
  br i1 %15, label %16, label %48

16:                                               ; preds = %4
  %17 = load i8*, i8** %10, align 8
  %18 = load i64, i64* %11, align 8
  %19 = load i32, i32* %6, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds [37 x i64], [37 x i64]* @_ZN4absl12_GLOBAL__N_112LookupTablesImE13kVmaxOverBaseE, i64 0, i64 %20
  %22 = load i64, i64* %21, align 8
  %23 = getelementptr inbounds i8, i8* %17, i64 %18
  %24 = icmp sgt i64 %18, 0
  br i1 %24, label %25, label %45

25:                                               ; preds = %16, %41
  %26 = phi i8* [ %43, %41 ], [ %17, %16 ]
  %27 = phi i64 [ %42, %41 ], [ 0, %16 ]
  %28 = load i8, i8* %26, align 1
  %29 = zext i8 %28 to i64
  %30 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN4absl12_GLOBAL__N_111kAsciiToIntE, i64 0, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = sext i8 %31 to i32
  %33 = icmp sgt i32 %19, %32
  br i1 %33, label %34, label %45

34:                                               ; preds = %25
  %35 = icmp ugt i64 %27, %22
  br i1 %35, label %45, label %36

36:                                               ; preds = %34
  %37 = mul i64 %27, %20
  %38 = sext i8 %31 to i64
  %39 = xor i64 %38, -1
  %40 = icmp ugt i64 %37, %39
  br i1 %40, label %45, label %41

41:                                               ; preds = %36
  %42 = add i64 %37, %38
  %43 = getelementptr inbounds i8, i8* %26, i64 1
  %44 = icmp ult i8* %43, %23
  br i1 %44, label %25, label %45

45:                                               ; preds = %41, %36, %34, %25, %16
  %46 = phi i64 [ 0, %16 ], [ %42, %41 ], [ -1, %36 ], [ -1, %34 ], [ %27, %25 ]
  %47 = phi i1 [ true, %16 ], [ true, %41 ], [ false, %36 ], [ false, %34 ], [ false, %25 ]
  store i64 %46, i64* %2, align 8
  br label %48

48:                                               ; preds = %45, %4
  %49 = phi i1 [ false, %4 ], [ %47, %45 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %7) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %8)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9)
  ret i1 %49
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4absl16numbers_internal19safe_strtou128_baseENS_11string_viewEPNS_7uint128Ei(i8*, i64, %"class.absl::uint128"* nocapture, i32) local_unnamed_addr #0 {
  %5 = alloca %"class.absl::string_view", align 8
  %6 = alloca i32, align 4
  %7 = alloca i8, align 1
  %8 = bitcast %"class.absl::string_view"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %8)
  %9 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9)
  %10 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %5, i64 0, i32 0
  store i8* %0, i8** %10, align 8
  %11 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %5, i64 0, i32 1
  store i64 %1, i64* %11, align 8
  store i32 %3, i32* %6, align 4
  %12 = getelementptr inbounds %"class.absl::uint128", %"class.absl::uint128"* %2, i64 0, i32 0
  %13 = getelementptr inbounds %"class.absl::uint128", %"class.absl::uint128"* %2, i64 0, i32 1
  %14 = bitcast %"class.absl::uint128"* %2 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %14, i8 0, i64 16, i1 false) #12
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %7) #12
  store i8 -86, i8* %7, align 1
  %15 = call fastcc zeroext i1 @_ZN4absl12_GLOBAL__N_124safe_parse_sign_and_baseEPNS_11string_viewEPiPb(%"class.absl::string_view"* nonnull %5, i32* nonnull %6, i8* nonnull %7) #12
  %16 = load i8, i8* %7, align 1
  %17 = icmp eq i8 %16, 0
  %18 = and i1 %15, %17
  br i1 %18, label %19, label %86

19:                                               ; preds = %4
  %20 = load i8*, i8** %10, align 8
  %21 = load i64, i64* %11, align 8
  %22 = load i32, i32* %6, align 4
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds i8, i8* %20, i64 %21
  %25 = icmp sgt i64 %21, 0
  br i1 %25, label %26, label %83

26:                                               ; preds = %19
  %27 = getelementptr inbounds [37 x %"class.absl::uint128"], [37 x %"class.absl::uint128"]* @_ZN4absl12_GLOBAL__N_112LookupTablesINS_7uint128EE13kVmaxOverBaseE, i64 0, i64 %23, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds [37 x %"class.absl::uint128"], [37 x %"class.absl::uint128"]* @_ZN4absl12_GLOBAL__N_112LookupTablesINS_7uint128EE13kVmaxOverBaseE, i64 0, i64 %23, i32 0
  %30 = load i64, i64* %29, align 16
  %31 = zext i64 %28 to i128
  %32 = shl nuw i128 %31, 64
  %33 = zext i64 %30 to i128
  %34 = or i128 %32, %33
  %35 = ashr i32 %22, 31
  %36 = sext i32 %35 to i64
  %37 = zext i64 %36 to i128
  %38 = shl nuw i128 %37, 64
  %39 = zext i64 %23 to i128
  %40 = or i128 %38, %39
  br label %41

41:                                               ; preds = %73, %26
  %42 = phi i8* [ %20, %26 ], [ %81, %73 ]
  %43 = phi i64 [ 0, %26 ], [ %77, %73 ]
  %44 = phi i64 [ 0, %26 ], [ %80, %73 ]
  %45 = load i8, i8* %42, align 1
  %46 = zext i8 %45 to i64
  %47 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN4absl12_GLOBAL__N_111kAsciiToIntE, i64 0, i64 %46
  %48 = load i8, i8* %47, align 1
  %49 = sext i8 %48 to i32
  %50 = icmp sgt i32 %22, %49
  br i1 %50, label %52, label %51

51:                                               ; preds = %41
  store i64 %43, i64* %12, align 16
  store i64 %44, i64* %13, align 8
  br label %86

52:                                               ; preds = %41
  %53 = zext i64 %44 to i128
  %54 = shl nuw i128 %53, 64
  %55 = zext i64 %43 to i128
  %56 = or i128 %54, %55
  %57 = icmp ult i128 %34, %56
  br i1 %57, label %58, label %59

58:                                               ; preds = %52
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %14, i8 -1, i64 16, i1 false) #12
  br label %86

59:                                               ; preds = %52
  %60 = mul i128 %56, %40
  %61 = trunc i128 %60 to i64
  %62 = sext i8 %48 to i64
  %63 = ashr i32 %49, 31
  %64 = sext i32 %63 to i64
  %65 = xor i64 %64, -1
  %66 = xor i64 %62, -1
  %67 = zext i64 %65 to i128
  %68 = shl nuw i128 %67, 64
  %69 = zext i64 %66 to i128
  %70 = or i128 %68, %69
  %71 = icmp ult i128 %70, %60
  br i1 %71, label %72, label %73

72:                                               ; preds = %59
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %14, i8 -1, i64 16, i1 false) #12
  br label %86

73:                                               ; preds = %59
  %74 = lshr i128 %60, 64
  %75 = trunc i128 %74 to i64
  %76 = add i64 %75, %64
  %77 = add i64 %61, %62
  %78 = icmp ult i64 %77, %61
  %79 = zext i1 %78 to i64
  %80 = add i64 %76, %79
  %81 = getelementptr inbounds i8, i8* %42, i64 1
  %82 = icmp ult i8* %81, %24
  br i1 %82, label %41, label %83

83:                                               ; preds = %73, %19
  %84 = phi i64 [ 0, %19 ], [ %80, %73 ]
  %85 = phi i64 [ 0, %19 ], [ %77, %73 ]
  store i64 %85, i64* %12, align 16
  store i64 %84, i64* %13, align 8
  br label %86

86:                                               ; preds = %4, %51, %58, %72, %83
  %87 = phi i1 [ false, %4 ], [ true, %83 ], [ false, %51 ], [ false, %58 ], [ false, %72 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %7) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %8)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9)
  ret i1 %87
}

; Function Attrs: noreturn
declare void @_ZN4absl13base_internal18ThrowStdOutOfRangeEPKc(i8*) local_unnamed_addr #5

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #7

; Function Attrs: nofree nounwind
declare double @frexp(double, i32* nocapture) local_unnamed_addr #8

; Function Attrs: nounwind readnone ssp uwtable
define internal fastcc { i64, i64 } @_ZN4abslL7PowFiveEmi(i64, i32) unnamed_addr #9 {
  %3 = icmp sgt i32 %1, 12
  br i1 %3, label %4, label %44

4:                                                ; preds = %2, %39
  %5 = phi i32 [ %42, %39 ], [ %1, %2 ]
  %6 = phi i64 [ %41, %39 ], [ 0, %2 ]
  %7 = phi i64 [ %40, %39 ], [ %0, %2 ]
  %8 = and i64 %6, 4294967295
  %9 = lshr i64 %6, 32
  %10 = and i64 %7, 4294967295
  %11 = lshr i64 %7, 32
  %12 = mul nuw nsw i64 %8, 1220703125
  %13 = mul nuw nsw i64 %9, 1220703125
  %14 = mul nuw nsw i64 %10, 1220703125
  %15 = mul nuw nsw i64 %11, 1220703125
  %16 = mul i64 %9, 5242880000000000000
  %17 = add i64 %16, %12
  %18 = mul i64 %11, 5242880000000000000
  %19 = add i64 %18, %14
  %20 = lshr i64 %13, 32
  %21 = add i64 %19, %20
  %22 = icmp ult i64 %17, %12
  %23 = zext i1 %22 to i64
  %24 = add i64 %21, %23
  %25 = lshr i64 %15, 32
  %26 = icmp ult i64 %24, %14
  %27 = zext i1 %26 to i64
  %28 = add nuw nsw i64 %25, %27
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %39, label %30

30:                                               ; preds = %4
  %31 = tail call i64 @llvm.ctlz.i64(i64 %28, i1 true) #12, !range !4
  %32 = sub nuw nsw i64 64, %31
  %33 = lshr i64 %17, %32
  %34 = shl i64 %24, %31
  %35 = add i64 %33, %34
  %36 = lshr i64 %24, %32
  %37 = shl i64 %28, %31
  %38 = add i64 %36, %37
  br label %39

39:                                               ; preds = %4, %30
  %40 = phi i64 [ %38, %30 ], [ %24, %4 ]
  %41 = phi i64 [ %35, %30 ], [ %17, %4 ]
  %42 = add nsw i32 %5, -13
  %43 = icmp sgt i32 %42, 12
  br i1 %43, label %4, label %44

44:                                               ; preds = %39, %2
  %45 = phi i64 [ %0, %2 ], [ %40, %39 ]
  %46 = phi i64 [ 0, %2 ], [ %41, %39 ]
  %47 = phi i32 [ %1, %2 ], [ %42, %39 ]
  %48 = and i32 %47, 15
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds [13 x i32], [13 x i32]* @_ZZN4abslL7PowFiveEmiE14powers_of_five, i64 0, i64 %49
  %51 = load i32, i32* %50, align 4
  %52 = and i64 %46, 4294967295
  %53 = lshr i64 %46, 32
  %54 = and i64 %45, 4294967295
  %55 = lshr i64 %45, 32
  %56 = zext i32 %51 to i64
  %57 = mul nuw i64 %52, %56
  %58 = mul nuw i64 %53, %56
  %59 = mul nuw i64 %54, %56
  %60 = mul nuw i64 %55, %56
  %61 = shl i64 %58, 32
  %62 = add i64 %61, %57
  %63 = shl i64 %60, 32
  %64 = add i64 %63, %59
  %65 = lshr i64 %58, 32
  %66 = add i64 %64, %65
  %67 = icmp ult i64 %62, %57
  %68 = zext i1 %67 to i64
  %69 = add i64 %66, %68
  %70 = lshr i64 %60, 32
  %71 = icmp ult i64 %69, %59
  %72 = zext i1 %71 to i64
  %73 = add nuw nsw i64 %70, %72
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %84, label %75

75:                                               ; preds = %44
  %76 = tail call i64 @llvm.ctlz.i64(i64 %73, i1 true) #12, !range !4
  %77 = sub nuw nsw i64 64, %76
  %78 = lshr i64 %62, %77
  %79 = shl i64 %69, %76
  %80 = add i64 %78, %79
  %81 = lshr i64 %69, %77
  %82 = shl i64 %73, %76
  %83 = add i64 %81, %82
  br label %84

84:                                               ; preds = %44, %75
  %85 = phi i64 [ %83, %75 ], [ %69, %44 ]
  %86 = phi i64 [ %80, %75 ], [ %62, %44 ]
  %87 = icmp eq i64 %85, 0
  br i1 %87, label %92, label %88

88:                                               ; preds = %84
  %89 = tail call i64 @llvm.ctlz.i64(i64 %85, i1 true) #12, !range !4
  %90 = trunc i64 %89 to i32
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %101, label %92

92:                                               ; preds = %84, %88
  %93 = phi i32 [ %90, %88 ], [ 64, %84 ]
  %94 = zext i32 %93 to i64
  %95 = shl i64 %85, %94
  %96 = sub nsw i32 64, %93
  %97 = zext i32 %96 to i64
  %98 = lshr i64 %86, %97
  %99 = add i64 %98, %95
  %100 = shl i64 %86, %94
  br label %101

101:                                              ; preds = %88, %92
  %102 = phi i64 [ %85, %88 ], [ %99, %92 ]
  %103 = phi i64 [ %86, %88 ], [ %100, %92 ]
  %104 = insertvalue { i64, i64 } undef, i64 %102, 0
  %105 = insertvalue { i64, i64 } %104, i64 %103, 1
  ret { i64, i64 } %105
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #7

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN4absl12_GLOBAL__N_124safe_parse_sign_and_baseEPNS_11string_viewEPiPb(%"class.absl::string_view"* nocapture, i32* nocapture, i8* nocapture) unnamed_addr #10 {
  %4 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %0, i64 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = icmp eq i8* %5, null
  br i1 %6, label %101, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %0, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds i8, i8* %5, i64 %9
  %11 = load i32, i32* %1, align 4
  %12 = icmp sgt i64 %9, 0
  br i1 %12, label %13, label %24

13:                                               ; preds = %7, %21
  %14 = phi i8* [ %22, %21 ], [ %5, %7 ]
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i64
  %17 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN4absl14ascii_internal13kPropertyBitsE, i64 0, i64 %16
  %18 = load i8, i8* %17, align 1
  %19 = and i8 %18, 8
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %24, label %21

21:                                               ; preds = %13
  %22 = getelementptr inbounds i8, i8* %14, i64 1
  %23 = icmp ult i8* %22, %10
  br i1 %23, label %13, label %24

24:                                               ; preds = %21, %13, %7
  %25 = phi i8* [ %5, %7 ], [ %14, %13 ], [ %22, %21 ]
  br label %26

26:                                               ; preds = %29, %24
  %27 = phi i8* [ %10, %24 ], [ %30, %29 ]
  %28 = icmp ult i8* %25, %27
  br i1 %28, label %29, label %101

29:                                               ; preds = %26
  %30 = getelementptr inbounds i8, i8* %27, i64 -1
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i64
  %33 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN4absl14ascii_internal13kPropertyBitsE, i64 0, i64 %32
  %34 = load i8, i8* %33, align 1
  %35 = and i8 %34, 8
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %37, label %26

37:                                               ; preds = %29
  %38 = load i8, i8* %25, align 1
  %39 = icmp eq i8 %38, 45
  %40 = zext i1 %39 to i8
  store i8 %40, i8* %2, align 1
  br i1 %39, label %44, label %41

41:                                               ; preds = %37
  %42 = load i8, i8* %25, align 1
  %43 = icmp eq i8 %42, 43
  br i1 %43, label %44, label %47

44:                                               ; preds = %41, %37
  %45 = getelementptr inbounds i8, i8* %25, i64 1
  %46 = icmp ult i8* %45, %27
  br i1 %46, label %47, label %101

47:                                               ; preds = %44, %41
  %48 = phi i8* [ %45, %44 ], [ %25, %41 ]
  switch i32 %11, label %87 [
    i32 0, label %49
    i32 16, label %73
  ]

49:                                               ; preds = %47
  %50 = ptrtoint i8* %27 to i64
  %51 = ptrtoint i8* %48 to i64
  %52 = sub i64 %50, %51
  %53 = icmp sgt i64 %52, 1
  br i1 %53, label %54, label %63

54:                                               ; preds = %49
  %55 = load i8, i8* %48, align 1
  %56 = icmp eq i8 %55, 48
  br i1 %56, label %57, label %67

57:                                               ; preds = %54
  %58 = getelementptr inbounds i8, i8* %48, i64 1
  %59 = load i8, i8* %58, align 1
  switch i8 %59, label %67 [
    i8 120, label %60
    i8 88, label %60
  ]

60:                                               ; preds = %57, %57
  %61 = getelementptr inbounds i8, i8* %48, i64 2
  %62 = icmp ult i8* %61, %27
  br i1 %62, label %92, label %101

63:                                               ; preds = %49
  %64 = icmp eq i64 %52, 1
  br i1 %64, label %65, label %92

65:                                               ; preds = %63
  %66 = load i8, i8* %48, align 1
  br label %67

67:                                               ; preds = %65, %54, %57
  %68 = phi i8 [ %66, %65 ], [ %55, %54 ], [ 48, %57 ]
  %69 = icmp eq i8 %68, 48
  %70 = getelementptr inbounds i8, i8* %48, i64 1
  %71 = select i1 %69, i8* %70, i8* %48
  %72 = select i1 %69, i32 8, i32 10
  br label %92

73:                                               ; preds = %47
  %74 = ptrtoint i8* %27 to i64
  %75 = ptrtoint i8* %48 to i64
  %76 = sub i64 %74, %75
  %77 = icmp sgt i64 %76, 1
  br i1 %77, label %78, label %92

78:                                               ; preds = %73
  %79 = load i8, i8* %48, align 1
  %80 = icmp eq i8 %79, 48
  br i1 %80, label %81, label %92

81:                                               ; preds = %78
  %82 = getelementptr inbounds i8, i8* %48, i64 1
  %83 = load i8, i8* %82, align 1
  switch i8 %83, label %92 [
    i8 120, label %84
    i8 88, label %84
  ]

84:                                               ; preds = %81, %81
  %85 = getelementptr inbounds i8, i8* %48, i64 2
  %86 = icmp ult i8* %85, %27
  br i1 %86, label %92, label %101

87:                                               ; preds = %47
  %88 = add i32 %11, -2
  %89 = icmp ult i32 %88, 35
  br i1 %89, label %90, label %101

90:                                               ; preds = %87
  %91 = ptrtoint i8* %27 to i64
  br label %92

92:                                               ; preds = %90, %67, %81, %63, %60, %84, %78, %73
  %93 = phi i64 [ %91, %90 ], [ %50, %67 ], [ %74, %81 ], [ %50, %63 ], [ %50, %60 ], [ %74, %84 ], [ %74, %78 ], [ %74, %73 ]
  %94 = phi i8* [ %48, %90 ], [ %71, %67 ], [ %48, %81 ], [ %48, %63 ], [ %61, %60 ], [ %85, %84 ], [ %48, %78 ], [ %48, %73 ]
  %95 = phi i32 [ %11, %90 ], [ %72, %67 ], [ 16, %81 ], [ 10, %63 ], [ 16, %60 ], [ 16, %84 ], [ 16, %78 ], [ 16, %73 ]
  %96 = ptrtoint i8* %94 to i64
  %97 = sub i64 %93, %96
  %98 = icmp sgt i64 %97, -1
  br i1 %98, label %100, label %99, !prof !3

99:                                               ; preds = %92
  tail call void @llvm.trap() #12
  unreachable

100:                                              ; preds = %92
  store i8* %94, i8** %4, align 8
  store i64 %97, i64* %8, align 8
  store i32 %95, i32* %1, align 4
  br label %101

101:                                              ; preds = %26, %100, %44, %60, %84, %87, %3
  %102 = phi i1 [ false, %3 ], [ true, %100 ], [ false, %44 ], [ false, %60 ], [ false, %84 ], [ false, %87 ], [ false, %26 ]
  ret i1 %102
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn nounwind }
attributes #12 = { nounwind }
attributes #13 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = !{i64 0, i64 65}
!5 = !{i8 0, i8 2}
