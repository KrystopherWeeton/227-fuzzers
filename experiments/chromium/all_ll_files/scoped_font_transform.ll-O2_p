; ModuleID = '../../third_party/pdfium/core/fxge/scoped_font_transform.cpp'
source_filename = "../../third_party/pdfium/core/fxge/scoped_font_transform.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.ScopedFontTransform = type { %"class.fxcrt::RetainPtr" }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.CFX_Face* }
%class.CFX_Face = type { %"class.fxcrt::Retainable", %"class.fxcrt::Observable", %"class.std::__1::unique_ptr.6", %"class.fxcrt::RetainPtr.10" }
%"class.fxcrt::Retainable" = type { i32 (...)**, i64 }
%"class.fxcrt::Observable" = type { %"class.std::__1::set" }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.0", %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.0" = type { %"struct.std::__1::__compressed_pair_elem.1" }
%"struct.std::__1::__compressed_pair_elem.1" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { i64 }
%"class.std::__1::unique_ptr.6" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %struct.FT_FaceRec_* }
%struct.FT_FaceRec_ = type { i64, i64, i64, i64, i64, i8*, i8*, i32, %struct.FT_Bitmap_Size_*, i32, %struct.FT_CharMapRec_**, %struct.FT_Generic_, %struct.FT_BBox_, i16, i16, i16, i16, i16, i16, i16, i16, %struct.FT_GlyphSlotRec_*, %struct.FT_SizeRec_*, %struct.FT_CharMapRec_*, %struct.FT_DriverRec_*, %struct.FT_MemoryRec_*, %struct.FT_StreamRec_*, %struct.FT_ListRec_, %struct.FT_Generic_, i8*, %struct.FT_Face_InternalRec_* }
%struct.FT_Bitmap_Size_ = type { i16, i16, i64, i64, i64 }
%struct.FT_BBox_ = type { i64, i64, i64, i64 }
%struct.FT_GlyphSlotRec_ = type { %struct.FT_LibraryRec_*, %struct.FT_FaceRec_*, %struct.FT_GlyphSlotRec_*, i32, %struct.FT_Generic_, %struct.FT_Glyph_Metrics_, i64, i64, %struct.FT_Vector_, i32, %struct.FT_Bitmap_, i32, i32, %struct.FT_Outline_, i32, %struct.FT_SubGlyphRec_*, i8*, i64, i64, i64, i8*, %struct.FT_Slot_InternalRec_* }
%struct.FT_LibraryRec_ = type opaque
%struct.FT_Glyph_Metrics_ = type { i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.FT_Vector_ = type { i64, i64 }
%struct.FT_Bitmap_ = type { i32, i32, i32, i8*, i16, i8, i8, i8* }
%struct.FT_Outline_ = type { i16, i16, %struct.FT_Vector_*, i8*, i16*, i32 }
%struct.FT_SubGlyphRec_ = type opaque
%struct.FT_Slot_InternalRec_ = type opaque
%struct.FT_SizeRec_ = type { %struct.FT_FaceRec_*, %struct.FT_Generic_, %struct.FT_Size_Metrics_, %struct.FT_Size_InternalRec_* }
%struct.FT_Size_Metrics_ = type { i16, i16, i64, i64, i64, i64, i64, i64 }
%struct.FT_Size_InternalRec_ = type opaque
%struct.FT_CharMapRec_ = type { %struct.FT_FaceRec_*, i32, i16, i16 }
%struct.FT_DriverRec_ = type opaque
%struct.FT_MemoryRec_ = type { i8*, i8* (%struct.FT_MemoryRec_*, i64)*, void (%struct.FT_MemoryRec_*, i8*)*, i8* (%struct.FT_MemoryRec_*, i64, i64, i8*)* }
%struct.FT_StreamRec_ = type { i8*, i64, i64, %union.FT_StreamDesc_, %union.FT_StreamDesc_, i64 (%struct.FT_StreamRec_*, i64, i8*, i64)*, void (%struct.FT_StreamRec_*)*, %struct.FT_MemoryRec_*, i8*, i8* }
%union.FT_StreamDesc_ = type { i64 }
%struct.FT_ListRec_ = type { %struct.FT_ListNodeRec_*, %struct.FT_ListNodeRec_* }
%struct.FT_ListNodeRec_ = type { %struct.FT_ListNodeRec_*, %struct.FT_ListNodeRec_*, i8* }
%struct.FT_Generic_ = type { i8*, void (i8*)* }
%struct.FT_Face_InternalRec_ = type opaque
%"class.fxcrt::RetainPtr.10" = type { %"class.std::__1::unique_ptr.11" }
%"class.std::__1::unique_ptr.11" = type { %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"class.fxcrt::Retainable"* }
%struct.FT_Matrix_ = type { i64, i64, i64, i64 }

@_ZN19ScopedFontTransformC1EN5fxcrt9RetainPtrI8CFX_FaceEEP10FT_Matrix_ = hidden unnamed_addr alias void (%class.ScopedFontTransform*, %"class.fxcrt::RetainPtr"*, %struct.FT_Matrix_*), void (%class.ScopedFontTransform*, %"class.fxcrt::RetainPtr"*, %struct.FT_Matrix_*)* @_ZN19ScopedFontTransformC2EN5fxcrt9RetainPtrI8CFX_FaceEEP10FT_Matrix_
@_ZN19ScopedFontTransformD1Ev = hidden unnamed_addr alias void (%class.ScopedFontTransform*), void (%class.ScopedFontTransform*)* @_ZN19ScopedFontTransformD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN19ScopedFontTransformC2EN5fxcrt9RetainPtrI8CFX_FaceEEP10FT_Matrix_(%class.ScopedFontTransform* nocapture, %"class.fxcrt::RetainPtr"* nocapture, %struct.FT_Matrix_*) unnamed_addr #0 align 2 {
  %4 = bitcast %class.ScopedFontTransform* %0 to i64*
  store i64 0, i64* %4, align 8
  %5 = bitcast %"class.fxcrt::RetainPtr"* %1 to i64*
  %6 = load i64, i64* %5, align 8
  store i64 %6, i64* %4, align 8
  store i64 0, i64* %5, align 8
  %7 = getelementptr inbounds %class.ScopedFontTransform, %class.ScopedFontTransform* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = load %class.CFX_Face*, %class.CFX_Face** %7, align 8
  %9 = getelementptr inbounds %class.CFX_Face, %class.CFX_Face* %8, i64 0, i32 2, i32 0, i32 0, i32 0
  %10 = load %struct.FT_FaceRec_*, %struct.FT_FaceRec_** %9, align 8
  tail call void @FT_Set_Transform(%struct.FT_FaceRec_* %10, %struct.FT_Matrix_* %2, %struct.FT_Vector_* null) #3
  ret void
}

declare void @FT_Set_Transform(%struct.FT_FaceRec_*, %struct.FT_Matrix_*, %struct.FT_Vector_*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN19ScopedFontTransformD2Ev(%class.ScopedFontTransform* nocapture) unnamed_addr #0 align 2 {
  %2 = alloca %struct.FT_Matrix_, align 8
  %3 = getelementptr inbounds %class.ScopedFontTransform, %class.ScopedFontTransform* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load %class.CFX_Face*, %class.CFX_Face** %3, align 8
  %5 = getelementptr inbounds %class.CFX_Face, %class.CFX_Face* %4, i64 0, i32 2, i32 0, i32 0, i32 0
  %6 = load %struct.FT_FaceRec_*, %struct.FT_FaceRec_** %5, align 8
  %7 = bitcast %struct.FT_Matrix_* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #3
  %8 = getelementptr inbounds %struct.FT_Matrix_, %struct.FT_Matrix_* %2, i64 0, i32 0
  %9 = getelementptr inbounds %struct.FT_Matrix_, %struct.FT_Matrix_* %2, i64 0, i32 1
  %10 = getelementptr inbounds %struct.FT_Matrix_, %struct.FT_Matrix_* %2, i64 0, i32 3
  store i64 65536, i64* %8, align 8
  %11 = bitcast i64* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 16, i1 false) #3
  store i64 65536, i64* %10, align 8
  call void @FT_Set_Transform(%struct.FT_FaceRec_* %6, %struct.FT_Matrix_* nonnull %2, %struct.FT_Vector_* null) #3
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #3
  %12 = load %class.CFX_Face*, %class.CFX_Face** %3, align 8
  store %class.CFX_Face* null, %class.CFX_Face** %3, align 8
  %13 = icmp eq %class.CFX_Face* %12, null
  br i1 %13, label %25, label %14

14:                                               ; preds = %1
  %15 = getelementptr inbounds %class.CFX_Face, %class.CFX_Face* %12, i64 0, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = add nsw i64 %16, -1
  store i64 %17, i64* %15, align 8
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %19, label %25

19:                                               ; preds = %14
  %20 = getelementptr inbounds %class.CFX_Face, %class.CFX_Face* %12, i64 0, i32 0
  %21 = bitcast %class.CFX_Face* %12 to void (%"class.fxcrt::Retainable"*)***
  %22 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %21, align 8
  %23 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %22, i64 1
  %24 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %23, align 8
  call void %24(%"class.fxcrt::Retainable"* nonnull %20) #3
  br label %25

25:                                               ; preds = %1, %14, %19
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
