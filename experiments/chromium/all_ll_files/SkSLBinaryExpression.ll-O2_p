; ModuleID = '../../third_party/skia/src/sksl/ir/SkSLBinaryExpression.cpp'
source_filename = "../../third_party/skia/src/sksl/ir/SkSLBinaryExpression.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.SkSL::Context" = type { %"class.SkSL::BuiltinTypes", %"class.SkSL::ErrorReporter"*, %class.GrShaderCaps*, %"class.SkSL::ModifiersPool"*, %"struct.SkSL::ProgramConfig"* }
%"class.SkSL::BuiltinTypes" = type { %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16" }
%"class.std::__1::unique_ptr.16" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"class.SkSL::Type"* }
%"class.SkSL::Type" = type { %"class.SkSL::Symbol", i8*, %"class.SkSL::String", i32, i32, i32, %"class.SkSL::Type"*, %"class.std::__1::vector", i32, i32, %"class.std::__1::vector.8", i32, i8, i8, i8, i8, i8, %"class.SkSL::Type"*, %"class.SkSL::Type"* }
%"class.SkSL::Symbol" = type { %"class.SkSL::IRNode", %"struct.SkSL::StringFragment", %"class.SkSL::Type"* }
%"class.SkSL::IRNode" = type { i32 (...)**, i32, i32 }
%"struct.SkSL::StringFragment" = type { i8*, i64 }
%"class.SkSL::String" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.0" }
%"class.std::__1::__compressed_pair.0" = type { %"struct.std::__1::__compressed_pair_elem.1" }
%"struct.std::__1::__compressed_pair_elem.1" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.SkSL::Type"**, %"class.SkSL::Type"**, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.SkSL::Type"** }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { %"struct.SkSL::Type::Field"*, %"struct.SkSL::Type::Field"*, %"class.std::__1::__compressed_pair.10" }
%"struct.SkSL::Type::Field" = type { %"struct.SkSL::Modifiers", %"struct.SkSL::StringFragment", %"class.SkSL::Type"* }
%"struct.SkSL::Modifiers" = type { %"struct.SkSL::Layout", i32, [4 x i8] }
%"struct.SkSL::Layout" = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], %"struct.SkSL::StringFragment", i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.SkSL::Type::Field"* }
%"class.SkSL::ErrorReporter" = type { i32 (...)** }
%class.GrShaderCaps = type <{ %class.SkRefCnt.base, i32, i56, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, [4 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.22" }
%"struct.std::__1::__atomic_base.22" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.SkSL::ModifiersPool" = type { %"class.std::__1::unordered_set" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.23", %"class.std::__1::__compressed_pair.32", %"class.std::__1::__compressed_pair.37", %"class.std::__1::__compressed_pair.39", [4 x i8] }>
%"class.std::__1::unique_ptr.23" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25", %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { i64 }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { float }
%"struct.SkSL::ProgramConfig" = type { i8, %"struct.SkSL::ProgramSettings" }
%"struct.SkSL::ProgramSettings" = type { i8, i8, i8, i8, i8, i32, i32, i32, i32, i32, i8, i8, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, %"class.std::__1::vector.42"* }
%"class.std::__1::vector.42" = type opaque
%"class.SkSL::Expression" = type { %"class.SkSL::IRNode", %"class.SkSL::Type"* }
%"class.SkSL::Operator" = type { i32 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__basic_string_common" = type { i8 }
%class.SkSTArray = type { %class.SkAlignedSTStorage, %class.SkTArray }
%class.SkAlignedSTStorage = type { [4 x i8] }
%class.SkTArray = type { i8*, i64 }
%"class.SkSL::BinaryExpression" = type { %"class.SkSL::Expression", %"class.std::__1::unique_ptr", %"class.SkSL::Operator", %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.SkSL::Expression"* }
%"class.SkSL::Literal.52" = type { %"class.SkSL::Expression", i64 }

$_ZNK4SkSL10Expression4typeEv = comdat any

$_ZN4SkSL16BinaryExpressionD2Ev = comdat any

$_ZN4SkSL16BinaryExpressionD0Ev = comdat any

$_ZNK4SkSL10Expression21isCompileTimeConstantEv = comdat any

$_ZNK4SkSL10Expression15compareConstantERKS0_ = comdat any

$_ZNK4SkSL16BinaryExpression19isConstantOrUniformEv = comdat any

$_ZNK4SkSL16BinaryExpression11hasPropertyENS_10Expression8PropertyE = comdat any

$_ZNK4SkSL10Expression12coercionCostERKNS_4TypeE = comdat any

$_ZNK4SkSL10Expression24getConstantSubexpressionEi = comdat any

$_ZN4SkSL7LiteralIlED0Ev = comdat any

$_ZNK4SkSL7LiteralIlE11descriptionEv = comdat any

$_ZNK4SkSL7LiteralIlE21isCompileTimeConstantEv = comdat any

$_ZNK4SkSL7LiteralIlE15compareConstantERKNS_10ExpressionE = comdat any

$_ZNK4SkSL10Expression19isConstantOrUniformEv = comdat any

$_ZNK4SkSL7LiteralIlE11hasPropertyENS_10Expression8PropertyE = comdat any

$_ZNK4SkSL7LiteralIlE12coercionCostERKNS_4TypeE = comdat any

$_ZNK4SkSL7LiteralIlE24getConstantSubexpressionEi = comdat any

$_ZNK4SkSL7LiteralIlE5cloneEv = comdat any

$_ZN4SkSL6IRNodeD2Ev = comdat any

$_ZTVN4SkSL7LiteralIlEE = comdat any

@.str = private unnamed_addr constant [17 x i8] c"type mismatch: '\00", align 1
@.str.1 = private unnamed_addr constant [22 x i8] c"' cannot operate on '\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"', '\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"'\00", align 1
@.str.4 = private unnamed_addr constant [29 x i8] c"assignments to opaque type '\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"' are not permitted\00", align 1
@.str.6 = private unnamed_addr constant [11 x i8] c"operator '\00", align 1
@.str.7 = private unnamed_addr constant [17 x i8] c"' is not allowed\00", align 1
@.str.8 = private unnamed_addr constant [59 x i8] c"' can not operate on arrays (or structs containing arrays)\00", align 1
@.str.9 = private unnamed_addr constant [28 x i8] c"rewriteMatrixVectorMultiply\00", align 1
@.str.10 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.11 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.12 = private unnamed_addr constant [2 x i8] c")\00", align 1
@_ZTVN4SkSL16BinaryExpressionE = hidden unnamed_addr constant { [13 x i8*] } { [13 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.SkSL::BinaryExpression"*)* @_ZN4SkSL16BinaryExpressionD2Ev to i8*), i8* bitcast (void (%"class.SkSL::BinaryExpression"*)* @_ZN4SkSL16BinaryExpressionD0Ev to i8*), i8* bitcast (void (%"class.SkSL::String"*, %"class.SkSL::BinaryExpression"*)* @_ZNK4SkSL16BinaryExpression11descriptionEv to i8*), i8* bitcast (%"class.SkSL::Type"* (%"class.SkSL::Expression"*)* @_ZNK4SkSL10Expression4typeEv to i8*), i8* bitcast (i1 (%"class.SkSL::Expression"*)* @_ZNK4SkSL10Expression21isCompileTimeConstantEv to i8*), i8* bitcast (i32 (%"class.SkSL::Expression"*, %"class.SkSL::Expression"*)* @_ZNK4SkSL10Expression15compareConstantERKS0_ to i8*), i8* bitcast (i1 (%"class.SkSL::BinaryExpression"*)* @_ZNK4SkSL16BinaryExpression19isConstantOrUniformEv to i8*), i8* bitcast (i1 (%"class.SkSL::BinaryExpression"*, i32)* @_ZNK4SkSL16BinaryExpression11hasPropertyENS_10Expression8PropertyE to i8*), i8* bitcast ({ i64, i8 } (%"class.SkSL::Expression"*, %"class.SkSL::Type"*)* @_ZNK4SkSL10Expression12coercionCostERKNS_4TypeE to i8*), i8* bitcast (%"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)* @_ZNK4SkSL10Expression24getConstantSubexpressionEi to i8*), i8* bitcast (%"class.SkSL::Expression"* (%"class.SkSL::BinaryExpression"*)* @_ZNK4SkSL16BinaryExpression5cloneEv to i8*)] }, align 8
@_ZTVN4SkSL7LiteralIlEE = linkonce_odr hidden unnamed_addr constant { [13 x i8*] } { [13 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.SkSL::IRNode"*)* @_ZN4SkSL6IRNodeD2Ev to i8*), i8* bitcast (void (%"class.SkSL::Literal.52"*)* @_ZN4SkSL7LiteralIlED0Ev to i8*), i8* bitcast (void (%"class.SkSL::String"*, %"class.SkSL::Literal.52"*)* @_ZNK4SkSL7LiteralIlE11descriptionEv to i8*), i8* bitcast (%"class.SkSL::Type"* (%"class.SkSL::Expression"*)* @_ZNK4SkSL10Expression4typeEv to i8*), i8* bitcast (i1 (%"class.SkSL::Literal.52"*)* @_ZNK4SkSL7LiteralIlE21isCompileTimeConstantEv to i8*), i8* bitcast (i32 (%"class.SkSL::Literal.52"*, %"class.SkSL::Expression"*)* @_ZNK4SkSL7LiteralIlE15compareConstantERKNS_10ExpressionE to i8*), i8* bitcast (i1 (%"class.SkSL::Expression"*)* @_ZNK4SkSL10Expression19isConstantOrUniformEv to i8*), i8* bitcast (i1 (%"class.SkSL::Literal.52"*, i32)* @_ZNK4SkSL7LiteralIlE11hasPropertyENS_10Expression8PropertyE to i8*), i8* bitcast ({ i64, i8 } (%"class.SkSL::Literal.52"*, %"class.SkSL::Type"*)* @_ZNK4SkSL7LiteralIlE12coercionCostERKNS_4TypeE to i8*), i8* bitcast (%"class.SkSL::Expression"* (%"class.SkSL::Literal.52"*, i32)* @_ZNK4SkSL7LiteralIlE24getConstantSubexpressionEi to i8*), i8* bitcast (%"class.SkSL::Expression"* (%"class.SkSL::Literal.52"*)* @_ZNK4SkSL7LiteralIlE5cloneEv to i8*)] }, comdat, align 8

; Function Attrs: nounwind ssp uwtable
define hidden %"class.SkSL::Expression"* @_ZN4SkSL16BinaryExpression7ConvertERKNS_7ContextENSt3__110unique_ptrINS_10ExpressionENS4_14default_deleteIS6_EEEENS_8OperatorES9_(%"class.SkSL::Context"* dereferenceable(744), %"class.SkSL::Expression"*, i32, %"class.SkSL::Expression"*) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.SkSL::Operator", align 4
  %6 = alloca %"class.SkSL::Type"*, align 8
  %7 = alloca %"class.SkSL::Type"*, align 8
  %8 = alloca %"class.SkSL::Type"*, align 8
  %9 = alloca %"class.SkSL::String", align 8
  %10 = alloca %"class.SkSL::String", align 8
  %11 = alloca %"class.SkSL::String", align 8
  %12 = alloca %"class.SkSL::String", align 8
  %13 = alloca %"class.SkSL::String", align 8
  %14 = alloca %"class.SkSL::String", align 8
  %15 = alloca %"class.SkSL::String", align 8
  %16 = alloca %"class.SkSL::String", align 8
  %17 = alloca %"class.SkSL::String", align 8
  %18 = alloca %"class.SkSL::String", align 8
  %19 = alloca %"class.SkSL::String", align 8
  %20 = alloca %"class.SkSL::String", align 8
  %21 = alloca %"class.SkSL::String", align 8
  %22 = alloca %"class.SkSL::String", align 8
  %23 = alloca %"class.SkSL::String", align 8
  %24 = alloca %"class.SkSL::String", align 8
  %25 = alloca %"class.SkSL::String", align 8
  %26 = alloca %"class.SkSL::String", align 8
  %27 = ptrtoint %"class.SkSL::Expression"* %1 to i64
  %28 = getelementptr inbounds %"class.SkSL::Operator", %"class.SkSL::Operator"* %5, i64 0, i32 0
  store i32 %2, i32* %28, align 4
  %29 = ptrtoint %"class.SkSL::Expression"* %3 to i64
  %30 = icmp ne %"class.SkSL::Expression"* %1, null
  %31 = icmp ne %"class.SkSL::Expression"* %3, null
  %32 = and i1 %30, %31
  br i1 %32, label %33, label %446

33:                                               ; preds = %4
  %34 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 1
  %35 = load i32, i32* %34, align 8
  %36 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 2
  %37 = load i32, i32* %36, align 4
  %38 = icmp eq i32 %37, 43
  br i1 %38, label %39, label %54

39:                                               ; preds = %33
  %40 = bitcast %"class.SkSL::Expression"* %3 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %41 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %40, align 8
  %42 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %41, i64 3
  %43 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %42, align 8
  %44 = tail call dereferenceable(184) %"class.SkSL::Type"* %43(%"class.SkSL::Expression"* nonnull %3) #8
  %45 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %44, i64 0, i32 4
  %46 = load i32, i32* %45, align 4
  %47 = add i32 %46, -1
  %48 = icmp ult i32 %47, 2
  br i1 %48, label %49, label %54

49:                                               ; preds = %39
  %50 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %40, align 8
  %51 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %50, i64 3
  %52 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %51, align 8
  %53 = tail call dereferenceable(184) %"class.SkSL::Type"* %52(%"class.SkSL::Expression"* nonnull %3) #8
  br label %60

54:                                               ; preds = %39, %33
  %55 = bitcast %"class.SkSL::Expression"* %1 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %56 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %55, align 8
  %57 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %56, i64 3
  %58 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %57, align 8
  %59 = tail call dereferenceable(184) %"class.SkSL::Type"* %58(%"class.SkSL::Expression"* nonnull %1) #8
  br label %60

60:                                               ; preds = %54, %49
  %61 = phi %"class.SkSL::Type"* [ %53, %49 ], [ %59, %54 ]
  %62 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %3, i64 0, i32 0, i32 2
  %63 = load i32, i32* %62, align 4
  %64 = icmp eq i32 %63, 43
  br i1 %64, label %65, label %80

65:                                               ; preds = %60
  %66 = bitcast %"class.SkSL::Expression"* %1 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %67 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %66, align 8
  %68 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %67, i64 3
  %69 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %68, align 8
  %70 = tail call dereferenceable(184) %"class.SkSL::Type"* %69(%"class.SkSL::Expression"* nonnull %1) #8
  %71 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %70, i64 0, i32 4
  %72 = load i32, i32* %71, align 4
  %73 = add i32 %72, -1
  %74 = icmp ult i32 %73, 2
  br i1 %74, label %75, label %80

75:                                               ; preds = %65
  %76 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %66, align 8
  %77 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %76, i64 3
  %78 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %77, align 8
  %79 = tail call dereferenceable(184) %"class.SkSL::Type"* %78(%"class.SkSL::Expression"* nonnull %1) #8
  br label %86

80:                                               ; preds = %65, %60
  %81 = bitcast %"class.SkSL::Expression"* %3 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %82 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %81, align 8
  %83 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %82, i64 3
  %84 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %83, align 8
  %85 = tail call dereferenceable(184) %"class.SkSL::Type"* %84(%"class.SkSL::Expression"* nonnull %3) #8
  br label %86

86:                                               ; preds = %80, %75
  %87 = phi %"class.SkSL::Type"* [ %79, %75 ], [ %85, %80 ]
  %88 = call zeroext i1 @_ZNK4SkSL8Operator12isAssignmentEv(%"class.SkSL::Operator"* nonnull %5) #8
  br i1 %88, label %89, label %96

89:                                               ; preds = %86
  %90 = load i32, i32* %28, align 4
  %91 = icmp eq i32 %90, 64
  %92 = select i1 %91, i8 1, i8 2
  %93 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 1
  %94 = load %"class.SkSL::ErrorReporter"*, %"class.SkSL::ErrorReporter"** %93, align 8
  %95 = call zeroext i1 @_ZN4SkSL8Analysis18MakeAssignmentExprEPNS_10ExpressionENS_15VariableRefKindEPNS_13ErrorReporterE(%"class.SkSL::Expression"* nonnull %1, i8 signext %92, %"class.SkSL::ErrorReporter"* %94) #8
  br i1 %95, label %96, label %446

96:                                               ; preds = %89, %86
  %97 = bitcast %"class.SkSL::Type"** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %97) #8
  store %"class.SkSL::Type"* inttoptr (i64 -6148914691236517206 to %"class.SkSL::Type"*), %"class.SkSL::Type"** %6, align 8
  %98 = bitcast %"class.SkSL::Type"** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %98) #8
  store %"class.SkSL::Type"* inttoptr (i64 -6148914691236517206 to %"class.SkSL::Type"*), %"class.SkSL::Type"** %7, align 8
  %99 = bitcast %"class.SkSL::Type"** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %99) #8
  store %"class.SkSL::Type"* inttoptr (i64 -6148914691236517206 to %"class.SkSL::Type"*), %"class.SkSL::Type"** %8, align 8
  %100 = call zeroext i1 @_ZN4SkSL8Operator19determineBinaryTypeERKNS_7ContextERKNS_4TypeES6_PPS5_S8_S8_(%"class.SkSL::Operator"* nonnull %5, %"class.SkSL::Context"* dereferenceable(744) %0, %"class.SkSL::Type"* dereferenceable(184) %61, %"class.SkSL::Type"* dereferenceable(184) %87, %"class.SkSL::Type"** nonnull %6, %"class.SkSL::Type"** nonnull %7, %"class.SkSL::Type"** nonnull %8) #8
  br i1 %100, label %263, label %101

101:                                              ; preds = %96
  %102 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 1
  %103 = load %"class.SkSL::ErrorReporter"*, %"class.SkSL::ErrorReporter"** %102, align 8
  %104 = bitcast %"class.SkSL::String"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %104) #8
  %105 = bitcast %"class.SkSL::String"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %105) #8
  %106 = bitcast %"class.SkSL::String"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %106) #8
  %107 = bitcast %"class.SkSL::String"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %107) #8
  %108 = bitcast %"class.SkSL::String"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %108) #8
  %109 = bitcast %"class.SkSL::String"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %109) #8
  %110 = bitcast %"class.SkSL::String"* %15 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %111 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %110, i64 0, i32 1, i32 0
  store i8 16, i8* %111, align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %109, i8* align 1 getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0), i64 16, i1 false) #8
  %112 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %113 = bitcast i64* %112 to i8*
  store i8 0, i8* %113, align 8
  %114 = call i8* @_ZNK4SkSL8Operator12operatorNameEv(%"class.SkSL::Operator"* nonnull %5) #8
  call void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* nonnull sret %14, %"class.SkSL::String"* nonnull %15, i8* %114) #8
  call void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* nonnull sret %13, %"class.SkSL::String"* nonnull %14, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0)) #8
  %115 = bitcast %"class.SkSL::String"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %115) #8
  %116 = bitcast %"class.SkSL::Expression"* %1 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %117 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %116, align 8
  %118 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %117, i64 3
  %119 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %118, align 8
  %120 = call dereferenceable(184) %"class.SkSL::Type"* %119(%"class.SkSL::Expression"* nonnull %1) #8
  %121 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %120, i64 0, i32 18
  %122 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %121, align 8, !noalias !2
  %123 = icmp eq %"class.SkSL::Type"* %122, null
  %124 = select i1 %123, %"class.SkSL::Type"* %120, %"class.SkSL::Type"* %122
  %125 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %124, i64 0, i32 0, i32 1, i32 0
  %126 = load i8*, i8** %125, align 8, !noalias !2
  %127 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %124, i64 0, i32 0, i32 1, i32 1
  %128 = load i64, i64* %127, align 8, !noalias !2
  %129 = icmp ugt i64 %128, -17
  br i1 %129, label %130, label %132

130:                                              ; preds = %101
  %131 = bitcast %"class.SkSL::String"* %16 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %131) #9
  unreachable

132:                                              ; preds = %101
  %133 = icmp ult i64 %128, 23
  br i1 %133, label %142, label %134

134:                                              ; preds = %132
  %135 = add nuw i64 %128, 16
  %136 = and i64 %135, -16
  %137 = call i8* @_Znwm(i64 %136) #10
  %138 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %137, i8** %138, align 8, !alias.scope !2
  %139 = or i64 %136, -9223372036854775808
  %140 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %139, i64* %140, align 8, !alias.scope !2
  %141 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %128, i64* %141, align 8, !alias.scope !2
  br label %147

142:                                              ; preds = %132
  %143 = trunc i64 %128 to i8
  %144 = bitcast %"class.SkSL::String"* %16 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %145 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %144, i64 0, i32 1, i32 0
  store i8 %143, i8* %145, align 1, !alias.scope !2
  %146 = icmp eq i64 %128, 0
  br i1 %146, label %149, label %147

147:                                              ; preds = %142, %134
  %148 = phi i8* [ %137, %134 ], [ %115, %142 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %148, i8* align 1 %126, i64 %128, i1 false) #8
  br label %149

149:                                              ; preds = %142, %147
  %150 = phi i8* [ %115, %142 ], [ %148, %147 ]
  %151 = getelementptr inbounds i8, i8* %150, i64 %128
  store i8 0, i8* %151, align 1
  call void @_ZNK4SkSL6StringplERKS0_(%"class.SkSL::String"* nonnull sret %12, %"class.SkSL::String"* nonnull %13, %"class.SkSL::String"* nonnull dereferenceable(24) %16) #8
  call void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* nonnull sret %11, %"class.SkSL::String"* nonnull %12, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0)) #8
  %152 = bitcast %"class.SkSL::String"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %152) #8
  %153 = bitcast %"class.SkSL::Expression"* %3 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %154 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %153, align 8
  %155 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %154, i64 3
  %156 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %155, align 8
  %157 = call dereferenceable(184) %"class.SkSL::Type"* %156(%"class.SkSL::Expression"* nonnull %3) #8
  %158 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %157, i64 0, i32 18
  %159 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %158, align 8, !noalias !5
  %160 = icmp eq %"class.SkSL::Type"* %159, null
  %161 = select i1 %160, %"class.SkSL::Type"* %157, %"class.SkSL::Type"* %159
  %162 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %161, i64 0, i32 0, i32 1, i32 0
  %163 = load i8*, i8** %162, align 8, !noalias !5
  %164 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %161, i64 0, i32 0, i32 1, i32 1
  %165 = load i64, i64* %164, align 8, !noalias !5
  %166 = icmp ugt i64 %165, -17
  br i1 %166, label %167, label %169

167:                                              ; preds = %149
  %168 = bitcast %"class.SkSL::String"* %17 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %168) #9
  unreachable

169:                                              ; preds = %149
  %170 = icmp ult i64 %165, 23
  br i1 %170, label %179, label %171

171:                                              ; preds = %169
  %172 = add nuw i64 %165, 16
  %173 = and i64 %172, -16
  %174 = call i8* @_Znwm(i64 %173) #10
  %175 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %17, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %174, i8** %175, align 8, !alias.scope !5
  %176 = or i64 %173, -9223372036854775808
  %177 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %17, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %176, i64* %177, align 8, !alias.scope !5
  %178 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %17, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %165, i64* %178, align 8, !alias.scope !5
  br label %184

179:                                              ; preds = %169
  %180 = trunc i64 %165 to i8
  %181 = bitcast %"class.SkSL::String"* %17 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %182 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %181, i64 0, i32 1, i32 0
  store i8 %180, i8* %182, align 1, !alias.scope !5
  %183 = icmp eq i64 %165, 0
  br i1 %183, label %186, label %184

184:                                              ; preds = %179, %171
  %185 = phi i8* [ %174, %171 ], [ %152, %179 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %185, i8* align 1 %163, i64 %165, i1 false) #8
  br label %186

186:                                              ; preds = %179, %184
  %187 = phi i8* [ %152, %179 ], [ %185, %184 ]
  %188 = getelementptr inbounds i8, i8* %187, i64 %165
  store i8 0, i8* %188, align 1
  call void @_ZNK4SkSL6StringplERKS0_(%"class.SkSL::String"* nonnull sret %10, %"class.SkSL::String"* nonnull %11, %"class.SkSL::String"* nonnull dereferenceable(24) %17) #8
  call void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* nonnull sret %9, %"class.SkSL::String"* nonnull %10, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)) #8
  %189 = bitcast %"class.SkSL::ErrorReporter"* %103 to void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)***
  %190 = load void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)**, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*** %189, align 8
  %191 = getelementptr inbounds void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)** %190, i64 2
  %192 = load void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)** %191, align 8
  call void %192(%"class.SkSL::ErrorReporter"* %103, i32 %35, %"class.SkSL::String"* nonnull %9) #8
  %193 = bitcast %"class.SkSL::String"* %9 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %194 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %193, i64 0, i32 1, i32 0
  %195 = load i8, i8* %194, align 1
  %196 = icmp slt i8 %195, 0
  br i1 %196, label %197, label %200

197:                                              ; preds = %186
  %198 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %199 = load i8*, i8** %198, align 8
  call void @_ZdlPv(i8* %199) #10
  br label %200

200:                                              ; preds = %186, %197
  %201 = bitcast %"class.SkSL::String"* %10 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %202 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %201, i64 0, i32 1, i32 0
  %203 = load i8, i8* %202, align 1
  %204 = icmp slt i8 %203, 0
  br i1 %204, label %205, label %208

205:                                              ; preds = %200
  %206 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %207 = load i8*, i8** %206, align 8
  call void @_ZdlPv(i8* %207) #10
  br label %208

208:                                              ; preds = %200, %205
  %209 = bitcast %"class.SkSL::String"* %17 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %210 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %209, i64 0, i32 1, i32 0
  %211 = load i8, i8* %210, align 1
  %212 = icmp slt i8 %211, 0
  br i1 %212, label %213, label %216

213:                                              ; preds = %208
  %214 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %17, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %215 = load i8*, i8** %214, align 8
  call void @_ZdlPv(i8* %215) #10
  br label %216

216:                                              ; preds = %208, %213
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %152) #8
  %217 = bitcast %"class.SkSL::String"* %11 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %218 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %217, i64 0, i32 1, i32 0
  %219 = load i8, i8* %218, align 1
  %220 = icmp slt i8 %219, 0
  br i1 %220, label %221, label %224

221:                                              ; preds = %216
  %222 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %223 = load i8*, i8** %222, align 8
  call void @_ZdlPv(i8* %223) #10
  br label %224

224:                                              ; preds = %216, %221
  %225 = bitcast %"class.SkSL::String"* %12 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %226 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %225, i64 0, i32 1, i32 0
  %227 = load i8, i8* %226, align 1
  %228 = icmp slt i8 %227, 0
  br i1 %228, label %229, label %232

229:                                              ; preds = %224
  %230 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %231 = load i8*, i8** %230, align 8
  call void @_ZdlPv(i8* %231) #10
  br label %232

232:                                              ; preds = %224, %229
  %233 = bitcast %"class.SkSL::String"* %16 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %234 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %233, i64 0, i32 1, i32 0
  %235 = load i8, i8* %234, align 1
  %236 = icmp slt i8 %235, 0
  br i1 %236, label %237, label %240

237:                                              ; preds = %232
  %238 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %239 = load i8*, i8** %238, align 8
  call void @_ZdlPv(i8* %239) #10
  br label %240

240:                                              ; preds = %232, %237
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %115) #8
  %241 = bitcast %"class.SkSL::String"* %13 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %242 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %241, i64 0, i32 1, i32 0
  %243 = load i8, i8* %242, align 1
  %244 = icmp slt i8 %243, 0
  br i1 %244, label %245, label %248

245:                                              ; preds = %240
  %246 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %247 = load i8*, i8** %246, align 8
  call void @_ZdlPv(i8* %247) #10
  br label %248

248:                                              ; preds = %240, %245
  %249 = bitcast %"class.SkSL::String"* %14 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %250 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %249, i64 0, i32 1, i32 0
  %251 = load i8, i8* %250, align 1
  %252 = icmp slt i8 %251, 0
  br i1 %252, label %253, label %256

253:                                              ; preds = %248
  %254 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %255 = load i8*, i8** %254, align 8
  call void @_ZdlPv(i8* %255) #10
  br label %256

256:                                              ; preds = %248, %253
  %257 = load i8, i8* %111, align 1
  %258 = icmp slt i8 %257, 0
  br i1 %258, label %259, label %262

259:                                              ; preds = %256
  %260 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %261 = load i8*, i8** %260, align 8
  call void @_ZdlPv(i8* %261) #10
  br label %262

262:                                              ; preds = %256, %259
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %109) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %108) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %107) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %106) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %105) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %104) #8
  br label %442

263:                                              ; preds = %96
  br i1 %88, label %264, label %341

264:                                              ; preds = %263
  %265 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %6, align 8
  %266 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %265, i64 0, i32 6
  %267 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %266, align 8
  %268 = icmp eq %"class.SkSL::Type"* %267, null
  %269 = select i1 %268, %"class.SkSL::Type"* %265, %"class.SkSL::Type"* %267
  %270 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %269, i64 0, i32 3
  %271 = load i32, i32* %270, align 8
  switch i32 %271, label %341 [
    i32 13, label %272
    i32 2, label %272
    i32 5, label %272
    i32 6, label %272
    i32 7, label %272
    i32 14, label %272
    i32 10, label %272
    i32 12, label %272
  ]

272:                                              ; preds = %264, %264, %264, %264, %264, %264, %264, %264
  %273 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 1
  %274 = load %"class.SkSL::ErrorReporter"*, %"class.SkSL::ErrorReporter"** %273, align 8
  %275 = bitcast %"class.SkSL::String"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %275) #8
  %276 = bitcast %"class.SkSL::String"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %276) #8
  %277 = bitcast %"class.SkSL::Expression"* %1 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %278 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %277, align 8
  %279 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %278, i64 3
  %280 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %279, align 8
  %281 = call dereferenceable(184) %"class.SkSL::Type"* %280(%"class.SkSL::Expression"* nonnull %1) #8
  %282 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %281, i64 0, i32 18
  %283 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %282, align 8, !noalias !8
  %284 = icmp eq %"class.SkSL::Type"* %283, null
  %285 = select i1 %284, %"class.SkSL::Type"* %281, %"class.SkSL::Type"* %283
  %286 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %285, i64 0, i32 0, i32 1, i32 0
  %287 = load i8*, i8** %286, align 8, !noalias !8
  %288 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %285, i64 0, i32 0, i32 1, i32 1
  %289 = load i64, i64* %288, align 8, !noalias !8
  %290 = icmp ugt i64 %289, -17
  br i1 %290, label %291, label %293

291:                                              ; preds = %272
  %292 = bitcast %"class.SkSL::String"* %20 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %292) #9
  unreachable

293:                                              ; preds = %272
  %294 = icmp ult i64 %289, 23
  br i1 %294, label %303, label %295

295:                                              ; preds = %293
  %296 = add nuw i64 %289, 16
  %297 = and i64 %296, -16
  %298 = call i8* @_Znwm(i64 %297) #10
  %299 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %20, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %298, i8** %299, align 8, !alias.scope !8
  %300 = or i64 %297, -9223372036854775808
  %301 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %20, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %300, i64* %301, align 8, !alias.scope !8
  %302 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %20, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %289, i64* %302, align 8, !alias.scope !8
  br label %308

303:                                              ; preds = %293
  %304 = trunc i64 %289 to i8
  %305 = bitcast %"class.SkSL::String"* %20 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %306 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %305, i64 0, i32 1, i32 0
  store i8 %304, i8* %306, align 1, !alias.scope !8
  %307 = icmp eq i64 %289, 0
  br i1 %307, label %310, label %308

308:                                              ; preds = %303, %295
  %309 = phi i8* [ %298, %295 ], [ %276, %303 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %309, i8* align 1 %287, i64 %289, i1 false) #8
  br label %310

310:                                              ; preds = %303, %308
  %311 = phi i8* [ %276, %303 ], [ %309, %308 ]
  %312 = getelementptr inbounds i8, i8* %311, i64 %289
  store i8 0, i8* %312, align 1
  call void @_ZN4SkSLplEPKcRKNS_6StringE(%"class.SkSL::String"* nonnull sret %19, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.4, i64 0, i64 0), %"class.SkSL::String"* nonnull dereferenceable(24) %20) #8
  call void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* nonnull sret %18, %"class.SkSL::String"* nonnull %19, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i64 0, i64 0)) #8
  %313 = bitcast %"class.SkSL::ErrorReporter"* %274 to void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)***
  %314 = load void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)**, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*** %313, align 8
  %315 = getelementptr inbounds void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)** %314, i64 2
  %316 = load void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)** %315, align 8
  call void %316(%"class.SkSL::ErrorReporter"* %274, i32 %35, %"class.SkSL::String"* nonnull %18) #8
  %317 = bitcast %"class.SkSL::String"* %18 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %318 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %317, i64 0, i32 1, i32 0
  %319 = load i8, i8* %318, align 1
  %320 = icmp slt i8 %319, 0
  br i1 %320, label %321, label %324

321:                                              ; preds = %310
  %322 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %323 = load i8*, i8** %322, align 8
  call void @_ZdlPv(i8* %323) #10
  br label %324

324:                                              ; preds = %310, %321
  %325 = bitcast %"class.SkSL::String"* %19 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %326 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %325, i64 0, i32 1, i32 0
  %327 = load i8, i8* %326, align 1
  %328 = icmp slt i8 %327, 0
  br i1 %328, label %329, label %332

329:                                              ; preds = %324
  %330 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %19, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %331 = load i8*, i8** %330, align 8
  call void @_ZdlPv(i8* %331) #10
  br label %332

332:                                              ; preds = %324, %329
  %333 = bitcast %"class.SkSL::String"* %20 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %334 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %333, i64 0, i32 1, i32 0
  %335 = load i8, i8* %334, align 1
  %336 = icmp slt i8 %335, 0
  br i1 %336, label %337, label %340

337:                                              ; preds = %332
  %338 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %20, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %339 = load i8*, i8** %338, align 8
  call void @_ZdlPv(i8* %339) #10
  br label %340

340:                                              ; preds = %332, %337
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %276) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %275) #8
  br label %442

341:                                              ; preds = %264, %263
  %342 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 4
  %343 = load %"struct.SkSL::ProgramConfig"*, %"struct.SkSL::ProgramConfig"** %342, align 8
  %344 = getelementptr inbounds %"struct.SkSL::ProgramConfig", %"struct.SkSL::ProgramConfig"* %343, i64 0, i32 1, i32 19
  %345 = load i8, i8* %344, align 1, !range !11
  %346 = icmp eq i8 %345, 0
  br i1 %346, label %427, label %347

347:                                              ; preds = %341
  %348 = getelementptr inbounds %"struct.SkSL::ProgramConfig", %"struct.SkSL::ProgramConfig"* %343, i64 0, i32 0
  %349 = load i8, i8* %348, align 8
  %350 = add i8 %349, -4
  %351 = icmp ult i8 %350, 3
  br i1 %351, label %352, label %427

352:                                              ; preds = %347
  %353 = call zeroext i1 @_ZNK4SkSL8Operator27isOnlyValidForIntegralTypesEv(%"class.SkSL::Operator"* nonnull %5) #8
  br i1 %353, label %354, label %389

354:                                              ; preds = %352
  %355 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 1
  %356 = load %"class.SkSL::ErrorReporter"*, %"class.SkSL::ErrorReporter"** %355, align 8
  %357 = bitcast %"class.SkSL::String"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %357) #8
  %358 = bitcast %"class.SkSL::String"* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %358) #8
  %359 = bitcast %"class.SkSL::String"* %23 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %360 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %359, i64 0, i32 1, i32 0
  store i8 10, i8* %360, align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %358, i8* align 1 getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0), i64 10, i1 false) #8
  %361 = getelementptr inbounds i8, i8* %358, i64 10
  store i8 0, i8* %361, align 2
  %362 = call i8* @_ZNK4SkSL8Operator12operatorNameEv(%"class.SkSL::Operator"* nonnull %5) #8
  call void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* nonnull sret %22, %"class.SkSL::String"* nonnull %23, i8* %362) #8
  call void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* nonnull sret %21, %"class.SkSL::String"* nonnull %22, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.7, i64 0, i64 0)) #8
  %363 = bitcast %"class.SkSL::ErrorReporter"* %356 to void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)***
  %364 = load void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)**, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*** %363, align 8
  %365 = getelementptr inbounds void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)** %364, i64 2
  %366 = load void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)** %365, align 8
  call void %366(%"class.SkSL::ErrorReporter"* %356, i32 %35, %"class.SkSL::String"* nonnull %21) #8
  %367 = bitcast %"class.SkSL::String"* %21 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %368 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %367, i64 0, i32 1, i32 0
  %369 = load i8, i8* %368, align 1
  %370 = icmp slt i8 %369, 0
  br i1 %370, label %371, label %374

371:                                              ; preds = %354
  %372 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %21, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %373 = load i8*, i8** %372, align 8
  call void @_ZdlPv(i8* %373) #10
  br label %374

374:                                              ; preds = %354, %371
  %375 = bitcast %"class.SkSL::String"* %22 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %376 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %375, i64 0, i32 1, i32 0
  %377 = load i8, i8* %376, align 1
  %378 = icmp slt i8 %377, 0
  br i1 %378, label %379, label %382

379:                                              ; preds = %374
  %380 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %22, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %381 = load i8*, i8** %380, align 8
  call void @_ZdlPv(i8* %381) #10
  br label %382

382:                                              ; preds = %374, %379
  %383 = load i8, i8* %360, align 1
  %384 = icmp slt i8 %383, 0
  br i1 %384, label %385, label %388

385:                                              ; preds = %382
  %386 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %23, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %387 = load i8*, i8** %386, align 8
  call void @_ZdlPv(i8* %387) #10
  br label %388

388:                                              ; preds = %382, %385
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %358) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %357) #8
  br label %442

389:                                              ; preds = %352
  %390 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %6, align 8
  %391 = call zeroext i1 @_ZNK4SkSL4Type17isOrContainsArrayEv(%"class.SkSL::Type"* %390) #8
  br i1 %391, label %392, label %427

392:                                              ; preds = %389
  %393 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 1
  %394 = load %"class.SkSL::ErrorReporter"*, %"class.SkSL::ErrorReporter"** %393, align 8
  %395 = bitcast %"class.SkSL::String"* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %395) #8
  %396 = bitcast %"class.SkSL::String"* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %396) #8
  %397 = bitcast %"class.SkSL::String"* %26 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %398 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %397, i64 0, i32 1, i32 0
  store i8 10, i8* %398, align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %396, i8* align 1 getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0), i64 10, i1 false) #8
  %399 = getelementptr inbounds i8, i8* %396, i64 10
  store i8 0, i8* %399, align 2
  %400 = call i8* @_ZNK4SkSL8Operator12operatorNameEv(%"class.SkSL::Operator"* nonnull %5) #8
  call void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* nonnull sret %25, %"class.SkSL::String"* nonnull %26, i8* %400) #8
  call void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* nonnull sret %24, %"class.SkSL::String"* nonnull %25, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.8, i64 0, i64 0)) #8
  %401 = bitcast %"class.SkSL::ErrorReporter"* %394 to void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)***
  %402 = load void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)**, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*** %401, align 8
  %403 = getelementptr inbounds void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)** %402, i64 2
  %404 = load void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)** %403, align 8
  call void %404(%"class.SkSL::ErrorReporter"* %394, i32 %35, %"class.SkSL::String"* nonnull %24) #8
  %405 = bitcast %"class.SkSL::String"* %24 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %406 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %405, i64 0, i32 1, i32 0
  %407 = load i8, i8* %406, align 1
  %408 = icmp slt i8 %407, 0
  br i1 %408, label %409, label %412

409:                                              ; preds = %392
  %410 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %24, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %411 = load i8*, i8** %410, align 8
  call void @_ZdlPv(i8* %411) #10
  br label %412

412:                                              ; preds = %392, %409
  %413 = bitcast %"class.SkSL::String"* %25 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %414 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %413, i64 0, i32 1, i32 0
  %415 = load i8, i8* %414, align 1
  %416 = icmp slt i8 %415, 0
  br i1 %416, label %417, label %420

417:                                              ; preds = %412
  %418 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %25, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %419 = load i8*, i8** %418, align 8
  call void @_ZdlPv(i8* %419) #10
  br label %420

420:                                              ; preds = %412, %417
  %421 = load i8, i8* %398, align 1
  %422 = icmp slt i8 %421, 0
  br i1 %422, label %423, label %426

423:                                              ; preds = %420
  %424 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %26, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %425 = load i8*, i8** %424, align 8
  call void @_ZdlPv(i8* %425) #10
  br label %426

426:                                              ; preds = %420, %423
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %396) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %395) #8
  br label %442

427:                                              ; preds = %341, %389, %347
  %428 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %6, align 8
  %429 = call %"class.SkSL::Expression"* @_ZNK4SkSL4Type16coerceExpressionENSt3__110unique_ptrINS_10ExpressionENS1_14default_deleteIS3_EEEERKNS_7ContextE(%"class.SkSL::Type"* %428, %"class.SkSL::Expression"* nonnull %1, %"class.SkSL::Context"* dereferenceable(744) %0) #8
  %430 = ptrtoint %"class.SkSL::Expression"* %429 to i64
  %431 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %7, align 8
  %432 = call %"class.SkSL::Expression"* @_ZNK4SkSL4Type16coerceExpressionENSt3__110unique_ptrINS_10ExpressionENS1_14default_deleteIS3_EEEERKNS_7ContextE(%"class.SkSL::Type"* %431, %"class.SkSL::Expression"* nonnull %3, %"class.SkSL::Context"* dereferenceable(744) %0) #8
  %433 = ptrtoint %"class.SkSL::Expression"* %432 to i64
  %434 = icmp ne %"class.SkSL::Expression"* %429, null
  %435 = icmp ne %"class.SkSL::Expression"* %432, null
  %436 = and i1 %434, %435
  br i1 %436, label %437, label %442

437:                                              ; preds = %427
  %438 = load i32, i32* %28, align 4
  %439 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %8, align 8
  %440 = call %"class.SkSL::Expression"* @_ZN4SkSL16BinaryExpression4MakeERKNS_7ContextENSt3__110unique_ptrINS_10ExpressionENS4_14default_deleteIS6_EEEENS_8OperatorES9_PKNS_4TypeE(%"class.SkSL::Context"* dereferenceable(744) %0, %"class.SkSL::Expression"* nonnull %429, i32 %438, %"class.SkSL::Expression"* nonnull %432, %"class.SkSL::Type"* %439)
  %441 = ptrtoint %"class.SkSL::Expression"* %440 to i64
  br label %442

442:                                              ; preds = %427, %437, %426, %388, %340, %262
  %443 = phi i64 [ %29, %340 ], [ %29, %426 ], [ 0, %437 ], [ %29, %388 ], [ %29, %262 ], [ %433, %427 ]
  %444 = phi i64 [ %27, %340 ], [ %27, %426 ], [ 0, %437 ], [ %27, %388 ], [ %27, %262 ], [ %430, %427 ]
  %445 = phi i64 [ 0, %340 ], [ 0, %426 ], [ %441, %437 ], [ 0, %388 ], [ 0, %262 ], [ 0, %427 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %99) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %98) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %97) #8
  br label %446

446:                                              ; preds = %89, %4, %442
  %447 = phi i64 [ %443, %442 ], [ %29, %4 ], [ %29, %89 ]
  %448 = phi i64 [ %444, %442 ], [ %27, %4 ], [ %27, %89 ]
  %449 = phi i64 [ %445, %442 ], [ 0, %4 ], [ 0, %89 ]
  %450 = icmp eq i64 %447, 0
  br i1 %450, label %457, label %451

451:                                              ; preds = %446
  %452 = inttoptr i64 %447 to %"class.SkSL::Expression"*
  %453 = inttoptr i64 %447 to void (%"class.SkSL::Expression"*)***
  %454 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %453, align 8
  %455 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %454, i64 1
  %456 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %455, align 8
  call void %456(%"class.SkSL::Expression"* nonnull %452) #8
  br label %457

457:                                              ; preds = %446, %451
  %458 = icmp eq i64 %448, 0
  br i1 %458, label %465, label %459

459:                                              ; preds = %457
  %460 = inttoptr i64 %448 to %"class.SkSL::Expression"*
  %461 = inttoptr i64 %448 to void (%"class.SkSL::Expression"*)***
  %462 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %461, align 8
  %463 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %462, i64 1
  %464 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %463, align 8
  call void %464(%"class.SkSL::Expression"* nonnull %460) #8
  br label %465

465:                                              ; preds = %457, %459
  %466 = inttoptr i64 %449 to %"class.SkSL::Expression"*
  ret %"class.SkSL::Expression"* %466
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare zeroext i1 @_ZNK4SkSL8Operator12isAssignmentEv(%"class.SkSL::Operator"*) local_unnamed_addr #2

declare zeroext i1 @_ZN4SkSL8Analysis18MakeAssignmentExprEPNS_10ExpressionENS_15VariableRefKindEPNS_13ErrorReporterE(%"class.SkSL::Expression"*, i8 signext, %"class.SkSL::ErrorReporter"*) local_unnamed_addr #2

declare zeroext i1 @_ZN4SkSL8Operator19determineBinaryTypeERKNS_7ContextERKNS_4TypeES6_PPS5_S8_S8_(%"class.SkSL::Operator"*, %"class.SkSL::Context"* dereferenceable(744), %"class.SkSL::Type"* dereferenceable(184), %"class.SkSL::Type"* dereferenceable(184), %"class.SkSL::Type"**, %"class.SkSL::Type"**, %"class.SkSL::Type"**) local_unnamed_addr #2

declare void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* sret, %"class.SkSL::String"*, i8*) local_unnamed_addr #2

declare i8* @_ZNK4SkSL8Operator12operatorNameEv(%"class.SkSL::Operator"*) local_unnamed_addr #2

declare void @_ZNK4SkSL6StringplERKS0_(%"class.SkSL::String"* sret, %"class.SkSL::String"*, %"class.SkSL::String"* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN4SkSLplEPKcRKNS_6StringE(%"class.SkSL::String"* sret, i8*, %"class.SkSL::String"* dereferenceable(24)) local_unnamed_addr #2

declare zeroext i1 @_ZNK4SkSL4Type17isOrContainsArrayEv(%"class.SkSL::Type"*) local_unnamed_addr #2

declare %"class.SkSL::Expression"* @_ZNK4SkSL4Type16coerceExpressionENSt3__110unique_ptrINS_10ExpressionENS1_14default_deleteIS3_EEEERKNS_7ContextE(%"class.SkSL::Type"*, %"class.SkSL::Expression"*, %"class.SkSL::Context"* dereferenceable(744)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.SkSL::Expression"* @_ZN4SkSL16BinaryExpression4MakeERKNS_7ContextENSt3__110unique_ptrINS_10ExpressionENS4_14default_deleteIS6_EEEENS_8OperatorES9_PKNS_4TypeE(%"class.SkSL::Context"* dereferenceable(744), %"class.SkSL::Expression"*, i32, %"class.SkSL::Expression"*, %"class.SkSL::Type"*) local_unnamed_addr #0 align 2 {
  %6 = alloca %class.SkSTArray, align 8
  %7 = alloca %"class.SkSL::String", align 8
  %8 = ptrtoint %"class.SkSL::Expression"* %1 to i64
  %9 = ptrtoint %"class.SkSL::Expression"* %3 to i64
  %10 = ptrtoint %"class.SkSL::Type"* %4 to i64
  %11 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 1
  %12 = load i32, i32* %11, align 8
  %13 = tail call %"class.SkSL::Expression"* @_ZN4SkSL14ConstantFolder8SimplifyERKNS_7ContextEiRKNS_10ExpressionENS_8OperatorES6_RKNS_4TypeE(%"class.SkSL::Context"* dereferenceable(744) %0, i32 %12, %"class.SkSL::Expression"* dereferenceable(24) %1, i32 %2, %"class.SkSL::Expression"* dereferenceable(24) %3, %"class.SkSL::Type"* dereferenceable(184) %4) #8
  %14 = ptrtoint %"class.SkSL::Expression"* %13 to i64
  %15 = icmp eq %"class.SkSL::Expression"* %13, null
  br i1 %15, label %16, label %219

16:                                               ; preds = %5
  %17 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 4
  %18 = load %"struct.SkSL::ProgramConfig"*, %"struct.SkSL::ProgramConfig"** %17, align 8
  %19 = getelementptr inbounds %"struct.SkSL::ProgramConfig", %"struct.SkSL::ProgramConfig"* %18, i64 0, i32 1, i32 10
  %20 = load i8, i8* %19, align 4, !range !11
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %203, label %22

22:                                               ; preds = %16, %22
  %23 = phi %"class.SkSL::Type"* [ %25, %22 ], [ %4, %16 ]
  %24 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %23, i64 0, i32 6
  %25 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %24, align 8
  %26 = icmp eq %"class.SkSL::Type"* %25, null
  br i1 %26, label %27, label %22

27:                                               ; preds = %22
  %28 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %23, i64 0, i32 16
  %29 = load i8, i8* %28, align 8, !range !11
  %30 = icmp eq i8 %29, 0
  %31 = icmp eq i32 %2, 48
  %32 = and i1 %31, %30
  br i1 %32, label %33, label %203

33:                                               ; preds = %27
  %34 = bitcast %"class.SkSL::Expression"* %1 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %35 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %34, align 8
  %36 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %35, i64 3
  %37 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %36, align 8
  %38 = tail call dereferenceable(184) %"class.SkSL::Type"* %37(%"class.SkSL::Expression"* %1) #8
  %39 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %38, i64 0, i32 3
  %40 = load i32, i32* %39, align 8
  %41 = icmp eq i32 %40, 4
  br i1 %41, label %42, label %203

42:                                               ; preds = %33
  %43 = bitcast %"class.SkSL::Expression"* %3 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %44 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %43, align 8
  %45 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %44, i64 3
  %46 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %45, align 8
  %47 = tail call dereferenceable(184) %"class.SkSL::Type"* %46(%"class.SkSL::Expression"* %3) #8
  %48 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %47, i64 0, i32 3
  %49 = load i32, i32* %48, align 8
  %50 = icmp eq i32 %49, 11
  br i1 %50, label %51, label %203

51:                                               ; preds = %42
  %52 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %34, align 8
  %53 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %52, i64 3
  %54 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %53, align 8
  %55 = tail call dereferenceable(184) %"class.SkSL::Type"* %54(%"class.SkSL::Expression"* %1) #8
  %56 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %55, i64 0, i32 9
  %57 = load i32, i32* %56, align 4
  %58 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %43, align 8
  %59 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %58, i64 3
  %60 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %59, align 8
  %61 = tail call dereferenceable(184) %"class.SkSL::Type"* %60(%"class.SkSL::Expression"* %3) #8
  %62 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %61, i64 0, i32 8
  %63 = load i32, i32* %62, align 8
  %64 = icmp eq i32 %57, %63
  br i1 %64, label %65, label %203

65:                                               ; preds = %51
  %66 = tail call zeroext i1 @_ZN4SkSL8Analysis19IsTrivialExpressionERKNS_10ExpressionE(%"class.SkSL::Expression"* dereferenceable(24) %1) #8
  br i1 %66, label %67, label %203

67:                                               ; preds = %65
  %68 = tail call zeroext i1 @_ZN4SkSL8Analysis19IsTrivialExpressionERKNS_10ExpressionE(%"class.SkSL::Expression"* dereferenceable(24) %3) #8
  br i1 %68, label %69, label %203

69:                                               ; preds = %67
  %70 = bitcast %"class.SkSL::String"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %70) #8
  %71 = tail call i8* @_Znwm(i64 32) #10
  %72 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %71, i8** %72, align 8
  %73 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %74 = bitcast i64* %73 to <2 x i64>*
  store <2 x i64> <i64 27, i64 -9223372036854775776>, <2 x i64>* %74, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %71, i8* align 1 getelementptr inbounds ([28 x i8], [28 x i8]* @.str.9, i64 0, i64 0), i64 27, i1 false) #8
  %75 = getelementptr inbounds i8, i8* %71, i64 27
  store i8 0, i8* %75, align 1
  %76 = call %"class.SkSL::Expression"* @_ZN4SkSL7Setting7ConvertERKNS_7ContextEiRKNS_6StringE(%"class.SkSL::Context"* dereferenceable(744) %0, i32 %12, %"class.SkSL::String"* nonnull dereferenceable(24) %7) #8
  %77 = bitcast %"class.SkSL::String"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %78 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %77, i64 0, i32 1, i32 0
  %79 = load i8, i8* %78, align 1
  %80 = icmp slt i8 %79, 0
  br i1 %80, label %81, label %83

81:                                               ; preds = %69
  %82 = load i8*, i8** %72, align 8
  call void @_ZdlPv(i8* %82) #10
  br label %83

83:                                               ; preds = %69, %81
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %70) #8
  %84 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %76, i64 0, i32 0, i32 2
  %85 = load i32, i32* %84, align 4
  %86 = icmp eq i32 %85, 31
  br i1 %86, label %87, label %92

87:                                               ; preds = %83
  %88 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %76, i64 1
  %89 = bitcast %"class.SkSL::Expression"* %88 to i8*
  %90 = load i8, i8* %89, align 8, !range !11
  %91 = icmp eq i8 %90, 0
  br i1 %91, label %196, label %92

92:                                               ; preds = %87, %83
  %93 = phi i1 [ true, %87 ], [ false, %83 ]
  %94 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %6, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %94)
  %95 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %34, align 8
  %96 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %95, i64 3
  %97 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %96, align 8
  %98 = call dereferenceable(184) %"class.SkSL::Type"* %97(%"class.SkSL::Expression"* %1) #8
  %99 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %98, i64 0, i32 9
  %100 = load i32, i32* %99, align 4
  %101 = icmp sgt i32 %100, 0
  br i1 %101, label %102, label %168

102:                                              ; preds = %92
  %103 = bitcast %"class.SkSL::Expression"* %1 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)***
  %104 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 0, i32 31, i32 0, i32 0, i32 0
  %105 = bitcast %"class.SkSL::Type"** %104 to i64*
  %106 = bitcast %"class.SkSL::Expression"* %3 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)***
  %107 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %6, i64 0, i32 0, i32 0, i64 8
  %108 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %6, i64 0, i32 0, i32 0, i64 16
  %109 = bitcast i8* %108 to i64*
  %110 = bitcast i8* %107 to i8**
  br label %111

111:                                              ; preds = %102, %154
  %112 = phi i64 [ 0, %102 ], [ %157, %154 ]
  %113 = phi i64 [ 0, %102 ], [ %156, %154 ]
  %114 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*** %103, align 8
  %115 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %114, i64 10
  %116 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %115, align 8
  %117 = call %"class.SkSL::Expression"* %116(%"class.SkSL::Expression"* %1) #8
  %118 = load i32, i32* %11, align 8
  %119 = load i64, i64* %105, align 8
  %120 = call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #8
  %121 = bitcast i8* %120 to i32 (...)***
  %122 = getelementptr inbounds i8, i8* %120, i64 8
  %123 = bitcast i8* %122 to i32*
  store i32 %118, i32* %123, align 8
  %124 = getelementptr inbounds i8, i8* %120, i64 12
  %125 = bitcast i8* %124 to i32*
  store i32 43, i32* %125, align 4
  %126 = getelementptr inbounds i8, i8* %120, i64 16
  %127 = bitcast i8* %126 to i64*
  store i64 %119, i64* %127, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIlEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %121, align 8
  %128 = getelementptr inbounds i8, i8* %120, i64 24
  %129 = bitcast i8* %128 to i64*
  store i64 %112, i64* %129, align 8
  %130 = bitcast i8* %120 to %"class.SkSL::Expression"*
  %131 = call %"class.SkSL::Expression"* @_ZN4SkSL15IndexExpression4MakeERKNS_7ContextENSt3__110unique_ptrINS_10ExpressionENS4_14default_deleteIS6_EEEES9_(%"class.SkSL::Context"* dereferenceable(744) %0, %"class.SkSL::Expression"* %117, %"class.SkSL::Expression"* %130) #8
  %132 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*** %106, align 8
  %133 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %132, i64 10
  %134 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %133, align 8
  %135 = call %"class.SkSL::Expression"* %134(%"class.SkSL::Expression"* %3) #8
  %136 = trunc i64 %112 to i8
  store i8* %94, i8** %110, align 8
  store i64 34359738370, i64* %109, align 8
  store i8 %136, i8* %94, align 8
  %137 = call %"class.SkSL::Expression"* @_ZN4SkSL7Swizzle4MakeERKNS_7ContextENSt3__110unique_ptrINS_10ExpressionENS4_14default_deleteIS6_EEEE9SkSTArrayILi4EaLb0EE(%"class.SkSL::Context"* dereferenceable(744) %0, %"class.SkSL::Expression"* %135, %class.SkSTArray* nonnull %6) #8
  %138 = load i64, i64* %109, align 8
  %139 = and i64 %138, 1
  %140 = icmp eq i64 %139, 0
  br i1 %140, label %143, label %141

141:                                              ; preds = %111
  %142 = load i8*, i8** %110, align 8
  call void @_Z7sk_freePv(i8* %142) #8
  br label %143

143:                                              ; preds = %141, %111
  %144 = bitcast %"class.SkSL::Expression"* %131 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %145 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %144, align 8
  %146 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %145, i64 3
  %147 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %146, align 8
  %148 = call dereferenceable(184) %"class.SkSL::Type"* %147(%"class.SkSL::Expression"* %131) #8
  %149 = call %"class.SkSL::Expression"* @_ZN4SkSL16BinaryExpression4MakeERKNS_7ContextENSt3__110unique_ptrINS_10ExpressionENS4_14default_deleteIS6_EEEENS_8OperatorES9_PKNS_4TypeE(%"class.SkSL::Context"* dereferenceable(744) %0, %"class.SkSL::Expression"* %131, i32 48, %"class.SkSL::Expression"* %137, %"class.SkSL::Type"* %148) #8
  %150 = icmp eq i64 %113, 0
  br i1 %150, label %154, label %151

151:                                              ; preds = %143
  %152 = inttoptr i64 %113 to %"class.SkSL::Expression"*
  %153 = call %"class.SkSL::Expression"* @_ZN4SkSL16BinaryExpression4MakeERKNS_7ContextENSt3__110unique_ptrINS_10ExpressionENS4_14default_deleteIS6_EEEENS_8OperatorES9_PKNS_4TypeE(%"class.SkSL::Context"* dereferenceable(744) %0, %"class.SkSL::Expression"* nonnull %152, i32 46, %"class.SkSL::Expression"* %149, %"class.SkSL::Type"* %148) #8
  br label %154

154:                                              ; preds = %143, %151
  %155 = phi %"class.SkSL::Expression"* [ %153, %151 ], [ %149, %143 ]
  %156 = ptrtoint %"class.SkSL::Expression"* %155 to i64
  %157 = add nuw nsw i64 %112, 1
  %158 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %34, align 8
  %159 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %158, i64 3
  %160 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %159, align 8
  %161 = call dereferenceable(184) %"class.SkSL::Type"* %160(%"class.SkSL::Expression"* %1) #8
  %162 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %161, i64 0, i32 9
  %163 = load i32, i32* %162, align 4
  %164 = sext i32 %163 to i64
  %165 = icmp slt i64 %157, %164
  br i1 %165, label %111, label %166

166:                                              ; preds = %154
  %167 = ptrtoint %"class.SkSL::Expression"* %155 to i64
  br label %168

168:                                              ; preds = %166, %92
  %169 = phi i64 [ 0, %92 ], [ %167, %166 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %94)
  br i1 %93, label %189, label %170

170:                                              ; preds = %168
  %171 = inttoptr i64 %169 to %"class.SkSL::Expression"*
  %172 = call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 48) #8
  %173 = bitcast i8* %172 to i32 (...)***
  %174 = getelementptr inbounds i8, i8* %172, i64 8
  %175 = bitcast i8* %174 to i32*
  store i32 %12, i32* %175, align 8
  %176 = getelementptr inbounds i8, i8* %172, i64 12
  %177 = bitcast i8* %176 to i32*
  store i32 30, i32* %177, align 4
  %178 = getelementptr inbounds i8, i8* %172, i64 16
  %179 = bitcast i8* %178 to i64*
  store i64 %10, i64* %179, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL16BinaryExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %173, align 8
  %180 = getelementptr inbounds i8, i8* %172, i64 24
  %181 = bitcast i8* %180 to i64*
  store i64 %8, i64* %181, align 8
  %182 = getelementptr inbounds i8, i8* %172, i64 32
  %183 = bitcast i8* %182 to i32*
  store i32 48, i32* %183, align 8
  %184 = getelementptr inbounds i8, i8* %172, i64 40
  %185 = bitcast i8* %184 to i64*
  store i64 %9, i64* %185, align 8
  %186 = bitcast i8* %172 to %"class.SkSL::Expression"*
  %187 = call %"class.SkSL::Expression"* @_ZN4SkSL17TernaryExpression4MakeERKNS_7ContextENSt3__110unique_ptrINS_10ExpressionENS4_14default_deleteIS6_EEEES9_S9_(%"class.SkSL::Context"* dereferenceable(744) %0, %"class.SkSL::Expression"* %76, %"class.SkSL::Expression"* %171, %"class.SkSL::Expression"* %186) #8
  %188 = ptrtoint %"class.SkSL::Expression"* %187 to i64
  br label %234

189:                                              ; preds = %168
  %190 = icmp eq %"class.SkSL::Expression"* %76, null
  br i1 %190, label %219, label %191

191:                                              ; preds = %189
  %192 = bitcast %"class.SkSL::Expression"* %76 to void (%"class.SkSL::Expression"*)***
  %193 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %192, align 8
  %194 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %193, i64 1
  %195 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %194, align 8
  call void %195(%"class.SkSL::Expression"* nonnull %76) #8
  br label %219

196:                                              ; preds = %87
  %197 = icmp eq %"class.SkSL::Expression"* %76, null
  br i1 %197, label %203, label %198

198:                                              ; preds = %196
  %199 = bitcast %"class.SkSL::Expression"* %76 to void (%"class.SkSL::Expression"*)***
  %200 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %199, align 8
  %201 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %200, i64 1
  %202 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %201, align 8
  call void %202(%"class.SkSL::Expression"* nonnull %76) #8
  br label %203

203:                                              ; preds = %27, %33, %42, %51, %65, %67, %16, %196, %198
  %204 = call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 48) #8
  %205 = bitcast i8* %204 to i32 (...)***
  %206 = getelementptr inbounds i8, i8* %204, i64 8
  %207 = bitcast i8* %206 to i32*
  store i32 %12, i32* %207, align 8
  %208 = getelementptr inbounds i8, i8* %204, i64 12
  %209 = bitcast i8* %208 to i32*
  store i32 30, i32* %209, align 4
  %210 = getelementptr inbounds i8, i8* %204, i64 16
  %211 = bitcast i8* %210 to i64*
  store i64 %10, i64* %211, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL16BinaryExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %205, align 8
  %212 = getelementptr inbounds i8, i8* %204, i64 24
  %213 = bitcast i8* %212 to i64*
  store i64 %8, i64* %213, align 8
  %214 = getelementptr inbounds i8, i8* %204, i64 32
  %215 = bitcast i8* %214 to i32*
  store i32 %2, i32* %215, align 8
  %216 = getelementptr inbounds i8, i8* %204, i64 40
  %217 = bitcast i8* %216 to i64*
  store i64 %9, i64* %217, align 8
  %218 = ptrtoint i8* %204 to i64
  br label %234

219:                                              ; preds = %5, %191, %189
  %220 = phi i64 [ %14, %5 ], [ %169, %189 ], [ %169, %191 ]
  %221 = icmp eq %"class.SkSL::Expression"* %3, null
  br i1 %221, label %227, label %222

222:                                              ; preds = %219
  %223 = bitcast %"class.SkSL::Expression"* %3 to void (%"class.SkSL::Expression"*)***
  %224 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %223, align 8
  %225 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %224, i64 1
  %226 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %225, align 8
  call void %226(%"class.SkSL::Expression"* nonnull %3) #8
  br label %227

227:                                              ; preds = %219, %222
  %228 = icmp eq %"class.SkSL::Expression"* %1, null
  br i1 %228, label %234, label %229

229:                                              ; preds = %227
  %230 = bitcast %"class.SkSL::Expression"* %1 to void (%"class.SkSL::Expression"*)***
  %231 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %230, align 8
  %232 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %231, i64 1
  %233 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %232, align 8
  call void %233(%"class.SkSL::Expression"* nonnull %1) #8
  br label %234

234:                                              ; preds = %203, %170, %227, %229
  %235 = phi i64 [ %220, %227 ], [ %220, %229 ], [ %188, %170 ], [ %218, %203 ]
  %236 = inttoptr i64 %235 to %"class.SkSL::Expression"*
  ret %"class.SkSL::Expression"* %236
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.SkSL::Expression"* @_ZN4SkSL16BinaryExpression4MakeERKNS_7ContextENSt3__110unique_ptrINS_10ExpressionENS4_14default_deleteIS6_EEEENS_8OperatorES9_(%"class.SkSL::Context"* dereferenceable(744), %"class.SkSL::Expression"*, i32, %"class.SkSL::Expression"*) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.SkSL::Operator", align 4
  %6 = alloca %"class.SkSL::Type"*, align 8
  %7 = alloca %"class.SkSL::Type"*, align 8
  %8 = alloca %"class.SkSL::Type"*, align 8
  %9 = getelementptr inbounds %"class.SkSL::Operator", %"class.SkSL::Operator"* %5, i64 0, i32 0
  store i32 %2, i32* %9, align 4
  %10 = bitcast %"class.SkSL::Type"** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #8
  store %"class.SkSL::Type"* inttoptr (i64 -6148914691236517206 to %"class.SkSL::Type"*), %"class.SkSL::Type"** %6, align 8
  %11 = bitcast %"class.SkSL::Type"** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #8
  store %"class.SkSL::Type"* inttoptr (i64 -6148914691236517206 to %"class.SkSL::Type"*), %"class.SkSL::Type"** %7, align 8
  %12 = bitcast %"class.SkSL::Type"** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #8
  store %"class.SkSL::Type"* inttoptr (i64 -6148914691236517206 to %"class.SkSL::Type"*), %"class.SkSL::Type"** %8, align 8
  %13 = bitcast %"class.SkSL::Expression"* %1 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %14 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %13, align 8
  %15 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %14, i64 3
  %16 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %15, align 8
  %17 = tail call dereferenceable(184) %"class.SkSL::Type"* %16(%"class.SkSL::Expression"* %1) #8
  %18 = bitcast %"class.SkSL::Expression"* %3 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %19 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %18, align 8
  %20 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %19, i64 3
  %21 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %20, align 8
  %22 = tail call dereferenceable(184) %"class.SkSL::Type"* %21(%"class.SkSL::Expression"* %3) #8
  %23 = call zeroext i1 @_ZN4SkSL8Operator19determineBinaryTypeERKNS_7ContextERKNS_4TypeES6_PPS5_S8_S8_(%"class.SkSL::Operator"* nonnull %5, %"class.SkSL::Context"* dereferenceable(744) %0, %"class.SkSL::Type"* dereferenceable(184) %17, %"class.SkSL::Type"* dereferenceable(184) %22, %"class.SkSL::Type"** nonnull %6, %"class.SkSL::Type"** nonnull %7, %"class.SkSL::Type"** nonnull %8) #8
  %24 = load i32, i32* %9, align 4
  %25 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %8, align 8
  %26 = call %"class.SkSL::Expression"* @_ZN4SkSL16BinaryExpression4MakeERKNS_7ContextENSt3__110unique_ptrINS_10ExpressionENS4_14default_deleteIS6_EEEENS_8OperatorES9_PKNS_4TypeE(%"class.SkSL::Context"* dereferenceable(744) %0, %"class.SkSL::Expression"* %1, i32 %24, %"class.SkSL::Expression"* %3, %"class.SkSL::Type"* %25)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #8
  ret %"class.SkSL::Expression"* %26
}

declare %"class.SkSL::Expression"* @_ZN4SkSL14ConstantFolder8SimplifyERKNS_7ContextEiRKNS_10ExpressionENS_8OperatorES6_RKNS_4TypeE(%"class.SkSL::Context"* dereferenceable(744), i32, %"class.SkSL::Expression"* dereferenceable(24), i32, %"class.SkSL::Expression"* dereferenceable(24), %"class.SkSL::Type"* dereferenceable(184)) local_unnamed_addr #2

declare %"class.SkSL::Expression"* @_ZN4SkSL7Setting7ConvertERKNS_7ContextEiRKNS_6StringE(%"class.SkSL::Context"* dereferenceable(744), i32, %"class.SkSL::String"* dereferenceable(24)) local_unnamed_addr #2

declare %"class.SkSL::Expression"* @_ZN4SkSL17TernaryExpression4MakeERKNS_7ContextENSt3__110unique_ptrINS_10ExpressionENS4_14default_deleteIS6_EEEES9_S9_(%"class.SkSL::Context"* dereferenceable(744), %"class.SkSL::Expression"*, %"class.SkSL::Expression"*, %"class.SkSL::Expression"*) local_unnamed_addr #2

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN4SkSL16BinaryExpression8CheckRefERKNS_10ExpressionE(%"class.SkSL::Expression"* nocapture readonly dereferenceable(24)) local_unnamed_addr #3 align 2 {
  br label %2

2:                                                ; preds = %9, %1
  %3 = phi %"class.SkSL::Expression"* [ %0, %1 ], [ %11, %9 ]
  %4 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %3, i64 0, i32 0, i32 2
  %5 = load i32, i32* %4, align 4
  switch i32 %5, label %32 [
    i32 44, label %6
    i32 48, label %12
    i32 52, label %15
    i32 53, label %18
    i32 55, label %26
  ]

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %3, i64 1, i32 0, i32 1
  %8 = bitcast i32* %7 to %"class.SkSL::Expression"**
  br label %9

9:                                                ; preds = %6, %12, %15, %23
  %10 = phi %"class.SkSL::Expression"** [ %8, %6 ], [ %14, %12 ], [ %17, %15 ], [ %25, %23 ]
  %11 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %10, align 8
  br label %2

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %3, i64 1
  %14 = bitcast %"class.SkSL::Expression"* %13 to %"class.SkSL::Expression"**
  br label %9

15:                                               ; preds = %2
  %16 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %3, i64 1
  %17 = bitcast %"class.SkSL::Expression"* %16 to %"class.SkSL::Expression"**
  br label %9

18:                                               ; preds = %2
  %19 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %3, i64 1, i32 0, i32 1
  %20 = bitcast i32* %19 to %"class.SkSL::Expression"**
  %21 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %20, align 8
  %22 = tail call zeroext i1 @_ZN4SkSL16BinaryExpression8CheckRefERKNS_10ExpressionE(%"class.SkSL::Expression"* dereferenceable(24) %21)
  br i1 %22, label %23, label %32

23:                                               ; preds = %18
  %24 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %3, i64 1, i32 1
  %25 = bitcast %"class.SkSL::Type"** %24 to %"class.SkSL::Expression"**
  br label %9

26:                                               ; preds = %2
  %27 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %3, i64 1, i32 0, i32 1
  %28 = bitcast i32* %27 to i8*
  %29 = load i8, i8* %28, align 8
  %30 = add i8 %29, -1
  %31 = icmp ult i8 %30, 2
  ret i1 %31

32:                                               ; preds = %2, %18
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.SkSL::Expression"* @_ZNK4SkSL16BinaryExpression5cloneEv(%"class.SkSL::BinaryExpression"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.SkSL::BinaryExpression", %"class.SkSL::BinaryExpression"* %0, i64 0, i32 0, i32 0, i32 1
  %3 = getelementptr inbounds %"class.SkSL::BinaryExpression", %"class.SkSL::BinaryExpression"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %3, align 8
  %5 = bitcast %"class.SkSL::Expression"* %4 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)***
  %6 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*** %5, align 8
  %7 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %6, i64 10
  %8 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %7, align 8
  %9 = tail call %"class.SkSL::Expression"* %8(%"class.SkSL::Expression"* %4) #8
  %10 = ptrtoint %"class.SkSL::Expression"* %9 to i64
  %11 = getelementptr inbounds %"class.SkSL::BinaryExpression", %"class.SkSL::BinaryExpression"* %0, i64 0, i32 2, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = getelementptr inbounds %"class.SkSL::BinaryExpression", %"class.SkSL::BinaryExpression"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %14 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %13, align 8
  %15 = bitcast %"class.SkSL::Expression"* %14 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)***
  %16 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*** %15, align 8
  %17 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %16, i64 10
  %18 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %17, align 8
  %19 = tail call %"class.SkSL::Expression"* %18(%"class.SkSL::Expression"* %14) #8
  %20 = ptrtoint %"class.SkSL::Expression"* %19 to i64
  %21 = getelementptr inbounds %"class.SkSL::BinaryExpression", %"class.SkSL::BinaryExpression"* %0, i64 0, i32 0, i32 1
  %22 = bitcast %"class.SkSL::Type"** %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 48) #8
  %25 = load i32, i32* %2, align 4
  %26 = bitcast i8* %24 to i32 (...)***
  %27 = getelementptr inbounds i8, i8* %24, i64 8
  %28 = bitcast i8* %27 to i32*
  store i32 %25, i32* %28, align 8
  %29 = getelementptr inbounds i8, i8* %24, i64 12
  %30 = bitcast i8* %29 to i32*
  store i32 30, i32* %30, align 4
  %31 = getelementptr inbounds i8, i8* %24, i64 16
  %32 = bitcast i8* %31 to i64*
  store i64 %23, i64* %32, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL16BinaryExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %26, align 8
  %33 = getelementptr inbounds i8, i8* %24, i64 24
  %34 = bitcast i8* %33 to i64*
  store i64 %10, i64* %34, align 8
  %35 = getelementptr inbounds i8, i8* %24, i64 32
  %36 = bitcast i8* %35 to i32*
  store i32 %12, i32* %36, align 8
  %37 = getelementptr inbounds i8, i8* %24, i64 40
  %38 = bitcast i8* %37 to i64*
  store i64 %20, i64* %38, align 8
  %39 = bitcast i8* %24 to %"class.SkSL::Expression"*
  ret %"class.SkSL::Expression"* %39
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(184) %"class.SkSL::Type"* @_ZNK4SkSL10Expression4typeEv(%"class.SkSL::Expression"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %0, i64 0, i32 1
  %3 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %2, align 8
  ret %"class.SkSL::Type"* %3
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4SkSL16BinaryExpression11descriptionEv(%"class.SkSL::String"* noalias sret, %"class.SkSL::BinaryExpression"* nocapture readonly) unnamed_addr #0 align 2 {
  %3 = alloca %"class.SkSL::String", align 8
  %4 = alloca %"class.SkSL::String", align 8
  %5 = alloca %"class.SkSL::String", align 8
  %6 = alloca %"class.SkSL::String", align 8
  %7 = alloca %"class.SkSL::String", align 8
  %8 = alloca %"class.SkSL::String", align 8
  %9 = alloca %"class.SkSL::Operator", align 4
  %10 = alloca %"class.SkSL::String", align 8
  %11 = bitcast %"class.SkSL::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #8
  %12 = bitcast %"class.SkSL::String"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #8
  %13 = bitcast %"class.SkSL::String"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #8
  %14 = bitcast %"class.SkSL::String"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %14) #8
  %15 = bitcast %"class.SkSL::String"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #8
  %16 = bitcast %"class.SkSL::String"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %16) #8
  %17 = getelementptr inbounds %"class.SkSL::BinaryExpression", %"class.SkSL::BinaryExpression"* %1, i64 0, i32 1, i32 0, i32 0, i32 0
  %18 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %17, align 8
  %19 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %18, i64 0, i32 0
  %20 = bitcast %"class.SkSL::Expression"* %18 to void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)***
  %21 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)**, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*** %20, align 8
  %22 = getelementptr inbounds void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %21, i64 2
  %23 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %22, align 8
  call void %23(%"class.SkSL::String"* nonnull sret %8, %"class.SkSL::IRNode"* %19) #8
  call void @_ZN4SkSLplEPKcRKNS_6StringE(%"class.SkSL::String"* nonnull sret %7, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0), %"class.SkSL::String"* nonnull dereferenceable(24) %8) #8
  call void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* nonnull sret %6, %"class.SkSL::String"* nonnull %7, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i64 0, i64 0)) #8
  %24 = bitcast %"class.SkSL::Operator"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %24) #8
  %25 = getelementptr inbounds %"class.SkSL::BinaryExpression", %"class.SkSL::BinaryExpression"* %1, i64 0, i32 2, i32 0
  %26 = load i32, i32* %25, align 8
  %27 = getelementptr inbounds %"class.SkSL::Operator", %"class.SkSL::Operator"* %9, i64 0, i32 0
  store i32 %26, i32* %27, align 4
  %28 = call i8* @_ZNK4SkSL8Operator12operatorNameEv(%"class.SkSL::Operator"* nonnull %9) #8
  call void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* nonnull sret %5, %"class.SkSL::String"* nonnull %6, i8* %28) #8
  call void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* nonnull sret %4, %"class.SkSL::String"* nonnull %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i64 0, i64 0)) #8
  %29 = bitcast %"class.SkSL::String"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %29) #8
  %30 = getelementptr inbounds %"class.SkSL::BinaryExpression", %"class.SkSL::BinaryExpression"* %1, i64 0, i32 3, i32 0, i32 0, i32 0
  %31 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %30, align 8
  %32 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %31, i64 0, i32 0
  %33 = bitcast %"class.SkSL::Expression"* %31 to void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)***
  %34 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)**, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*** %33, align 8
  %35 = getelementptr inbounds void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %34, i64 2
  %36 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %35, align 8
  call void %36(%"class.SkSL::String"* nonnull sret %10, %"class.SkSL::IRNode"* %32) #8
  call void @_ZNK4SkSL6StringplERKS0_(%"class.SkSL::String"* nonnull sret %3, %"class.SkSL::String"* nonnull %4, %"class.SkSL::String"* nonnull dereferenceable(24) %10) #8
  call void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* sret %0, %"class.SkSL::String"* nonnull %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)) #8
  %37 = bitcast %"class.SkSL::String"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %38 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %37, i64 0, i32 1, i32 0
  %39 = load i8, i8* %38, align 1
  %40 = icmp slt i8 %39, 0
  br i1 %40, label %41, label %44

41:                                               ; preds = %2
  %42 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  call void @_ZdlPv(i8* %43) #10
  br label %44

44:                                               ; preds = %2, %41
  %45 = bitcast %"class.SkSL::String"* %10 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %46 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %45, i64 0, i32 1, i32 0
  %47 = load i8, i8* %46, align 1
  %48 = icmp slt i8 %47, 0
  br i1 %48, label %49, label %52

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %51 = load i8*, i8** %50, align 8
  call void @_ZdlPv(i8* %51) #10
  br label %52

52:                                               ; preds = %44, %49
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %29) #8
  %53 = bitcast %"class.SkSL::String"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %54 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %53, i64 0, i32 1, i32 0
  %55 = load i8, i8* %54, align 1
  %56 = icmp slt i8 %55, 0
  br i1 %56, label %57, label %60

57:                                               ; preds = %52
  %58 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %59 = load i8*, i8** %58, align 8
  call void @_ZdlPv(i8* %59) #10
  br label %60

60:                                               ; preds = %52, %57
  %61 = bitcast %"class.SkSL::String"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %62 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %61, i64 0, i32 1, i32 0
  %63 = load i8, i8* %62, align 1
  %64 = icmp slt i8 %63, 0
  br i1 %64, label %65, label %68

65:                                               ; preds = %60
  %66 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %67 = load i8*, i8** %66, align 8
  call void @_ZdlPv(i8* %67) #10
  br label %68

68:                                               ; preds = %60, %65
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %24) #8
  %69 = bitcast %"class.SkSL::String"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %70 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %69, i64 0, i32 1, i32 0
  %71 = load i8, i8* %70, align 1
  %72 = icmp slt i8 %71, 0
  br i1 %72, label %73, label %76

73:                                               ; preds = %68
  %74 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %75 = load i8*, i8** %74, align 8
  call void @_ZdlPv(i8* %75) #10
  br label %76

76:                                               ; preds = %68, %73
  %77 = bitcast %"class.SkSL::String"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %78 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %77, i64 0, i32 1, i32 0
  %79 = load i8, i8* %78, align 1
  %80 = icmp slt i8 %79, 0
  br i1 %80, label %81, label %84

81:                                               ; preds = %76
  %82 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %83 = load i8*, i8** %82, align 8
  call void @_ZdlPv(i8* %83) #10
  br label %84

84:                                               ; preds = %76, %81
  %85 = bitcast %"class.SkSL::String"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %86 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %85, i64 0, i32 1, i32 0
  %87 = load i8, i8* %86, align 1
  %88 = icmp slt i8 %87, 0
  br i1 %88, label %89, label %92

89:                                               ; preds = %84
  %90 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %91 = load i8*, i8** %90, align 8
  call void @_ZdlPv(i8* %91) #10
  br label %92

92:                                               ; preds = %84, %89
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %16) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #8
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL16BinaryExpressionD2Ev(%"class.SkSL::BinaryExpression"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::BinaryExpression", %"class.SkSL::BinaryExpression"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL16BinaryExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.SkSL::BinaryExpression", %"class.SkSL::BinaryExpression"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %4 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %3, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %3, align 8
  %5 = icmp eq %"class.SkSL::Expression"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.SkSL::Expression"* %4 to void (%"class.SkSL::Expression"*)***
  %8 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %8, i64 1
  %10 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %9, align 8
  tail call void %10(%"class.SkSL::Expression"* nonnull %4) #8
  br label %11

11:                                               ; preds = %1, %6
  %12 = getelementptr inbounds %"class.SkSL::BinaryExpression", %"class.SkSL::BinaryExpression"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %13 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %12, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %12, align 8
  %14 = icmp eq %"class.SkSL::Expression"* %13, null
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = bitcast %"class.SkSL::Expression"* %13 to void (%"class.SkSL::Expression"*)***
  %17 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %16, align 8
  %18 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %17, i64 1
  %19 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %18, align 8
  tail call void %19(%"class.SkSL::Expression"* nonnull %13) #8
  br label %20

20:                                               ; preds = %11, %15
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL16BinaryExpressionD0Ev(%"class.SkSL::BinaryExpression"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::BinaryExpression", %"class.SkSL::BinaryExpression"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL16BinaryExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.SkSL::BinaryExpression", %"class.SkSL::BinaryExpression"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %4 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %3, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %3, align 8
  %5 = icmp eq %"class.SkSL::Expression"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.SkSL::Expression"* %4 to void (%"class.SkSL::Expression"*)***
  %8 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %8, i64 1
  %10 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %9, align 8
  tail call void %10(%"class.SkSL::Expression"* nonnull %4) #8
  br label %11

11:                                               ; preds = %6, %1
  %12 = getelementptr inbounds %"class.SkSL::BinaryExpression", %"class.SkSL::BinaryExpression"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %13 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %12, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %12, align 8
  %14 = icmp eq %"class.SkSL::Expression"* %13, null
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = bitcast %"class.SkSL::Expression"* %13 to void (%"class.SkSL::Expression"*)***
  %17 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %16, align 8
  %18 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %17, i64 1
  %19 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %18, align 8
  tail call void %19(%"class.SkSL::Expression"* nonnull %13) #8
  br label %20

20:                                               ; preds = %11, %15
  %21 = bitcast %"class.SkSL::BinaryExpression"* %0 to i8*
  tail call void @_ZN4SkSL4Pool10FreeMemoryEPv(i8* %21) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL10Expression21isCompileTimeConstantEv(%"class.SkSL::Expression"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK4SkSL10Expression15compareConstantERKS0_(%"class.SkSL::Expression"*, %"class.SkSL::Expression"* dereferenceable(24)) unnamed_addr #0 comdat align 2 {
  ret i32 -1
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL16BinaryExpression19isConstantOrUniformEv(%"class.SkSL::BinaryExpression"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::BinaryExpression", %"class.SkSL::BinaryExpression"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %3 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %2, align 8
  %4 = bitcast %"class.SkSL::Expression"* %3 to i1 (%"class.SkSL::Expression"*)***
  %5 = load i1 (%"class.SkSL::Expression"*)**, i1 (%"class.SkSL::Expression"*)*** %4, align 8
  %6 = getelementptr inbounds i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %5, i64 6
  %7 = load i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %6, align 8
  %8 = tail call zeroext i1 %7(%"class.SkSL::Expression"* %3) #8
  br i1 %8, label %9, label %17

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.SkSL::BinaryExpression", %"class.SkSL::BinaryExpression"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %11 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %10, align 8
  %12 = bitcast %"class.SkSL::Expression"* %11 to i1 (%"class.SkSL::Expression"*)***
  %13 = load i1 (%"class.SkSL::Expression"*)**, i1 (%"class.SkSL::Expression"*)*** %12, align 8
  %14 = getelementptr inbounds i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %13, i64 6
  %15 = load i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %14, align 8
  %16 = tail call zeroext i1 %15(%"class.SkSL::Expression"* %11) #8
  br label %17

17:                                               ; preds = %9, %1
  %18 = phi i1 [ false, %1 ], [ %16, %9 ]
  ret i1 %18
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL16BinaryExpression11hasPropertyENS_10Expression8PropertyE(%"class.SkSL::BinaryExpression"*, i32) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.SkSL::Operator", align 4
  %4 = icmp eq i32 %1, 0
  %5 = bitcast %"class.SkSL::Operator"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #8
  br i1 %4, label %6, label %11

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.SkSL::BinaryExpression", %"class.SkSL::BinaryExpression"* %0, i64 0, i32 2, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %"class.SkSL::Operator", %"class.SkSL::Operator"* %3, i64 0, i32 0
  store i32 %8, i32* %9, align 4
  %10 = call zeroext i1 @_ZNK4SkSL8Operator12isAssignmentEv(%"class.SkSL::Operator"* nonnull %3) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #8
  br i1 %10, label %28, label %12

11:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #8
  br label %12

12:                                               ; preds = %11, %6
  %13 = getelementptr inbounds %"class.SkSL::BinaryExpression", %"class.SkSL::BinaryExpression"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %14 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %13, align 8
  %15 = bitcast %"class.SkSL::Expression"* %14 to i1 (%"class.SkSL::Expression"*, i32)***
  %16 = load i1 (%"class.SkSL::Expression"*, i32)**, i1 (%"class.SkSL::Expression"*, i32)*** %15, align 8
  %17 = getelementptr inbounds i1 (%"class.SkSL::Expression"*, i32)*, i1 (%"class.SkSL::Expression"*, i32)** %16, i64 7
  %18 = load i1 (%"class.SkSL::Expression"*, i32)*, i1 (%"class.SkSL::Expression"*, i32)** %17, align 8
  %19 = call zeroext i1 %18(%"class.SkSL::Expression"* %14, i32 %1) #8
  br i1 %19, label %28, label %20

20:                                               ; preds = %12
  %21 = getelementptr inbounds %"class.SkSL::BinaryExpression", %"class.SkSL::BinaryExpression"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %22 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %21, align 8
  %23 = bitcast %"class.SkSL::Expression"* %22 to i1 (%"class.SkSL::Expression"*, i32)***
  %24 = load i1 (%"class.SkSL::Expression"*, i32)**, i1 (%"class.SkSL::Expression"*, i32)*** %23, align 8
  %25 = getelementptr inbounds i1 (%"class.SkSL::Expression"*, i32)*, i1 (%"class.SkSL::Expression"*, i32)** %24, i64 7
  %26 = load i1 (%"class.SkSL::Expression"*, i32)*, i1 (%"class.SkSL::Expression"*, i32)** %25, align 8
  %27 = call zeroext i1 %26(%"class.SkSL::Expression"* %22, i32 %1) #8
  br label %28

28:                                               ; preds = %12, %20, %6
  %29 = phi i1 [ true, %6 ], [ true, %12 ], [ %27, %20 ]
  ret i1 %29
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i64, i8 } @_ZNK4SkSL10Expression12coercionCostERKNS_4TypeE(%"class.SkSL::Expression"*, %"class.SkSL::Type"* dereferenceable(184)) unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.SkSL::Expression"* %0 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %4 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %3, align 8
  %5 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %4, i64 3
  %6 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %5, align 8
  %7 = tail call dereferenceable(184) %"class.SkSL::Type"* %6(%"class.SkSL::Expression"* %0) #8
  %8 = tail call { i64, i8 } @_ZNK4SkSL4Type12coercionCostERKS0_(%"class.SkSL::Type"* %7, %"class.SkSL::Type"* dereferenceable(184) %1) #8
  ret { i64, i8 } %8
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.SkSL::Expression"* @_ZNK4SkSL10Expression24getConstantSubexpressionEi(%"class.SkSL::Expression"*, i32) unnamed_addr #0 comdat align 2 {
  ret %"class.SkSL::Expression"* null
}

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

declare zeroext i1 @_ZNK4SkSL8Operator27isOnlyValidForIntegralTypesEv(%"class.SkSL::Operator"*) local_unnamed_addr #2

declare zeroext i1 @_ZN4SkSL8Analysis19IsTrivialExpressionERKNS_10ExpressionE(%"class.SkSL::Expression"* dereferenceable(24)) local_unnamed_addr #2

declare %"class.SkSL::Expression"* @_ZN4SkSL15IndexExpression4MakeERKNS_7ContextENSt3__110unique_ptrINS_10ExpressionENS4_14default_deleteIS6_EEEES9_(%"class.SkSL::Context"* dereferenceable(744), %"class.SkSL::Expression"*, %"class.SkSL::Expression"*) local_unnamed_addr #2

declare %"class.SkSL::Expression"* @_ZN4SkSL7Swizzle4MakeERKNS_7ContextENSt3__110unique_ptrINS_10ExpressionENS4_14default_deleteIS6_EEEE9SkSTArrayILi4EaLb0EE(%"class.SkSL::Context"* dereferenceable(744), %"class.SkSL::Expression"*, %class.SkSTArray*) local_unnamed_addr #2

declare i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL7LiteralIlED0Ev(%"class.SkSL::Literal.52"*) unnamed_addr #4 comdat align 2 {
  %2 = bitcast %"class.SkSL::Literal.52"* %0 to i8*
  tail call void @_ZN4SkSL4Pool10FreeMemoryEPv(i8* %2) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK4SkSL7LiteralIlE11descriptionEv(%"class.SkSL::String"* noalias sret, %"class.SkSL::Literal.52"*) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.SkSL::Literal.52", %"class.SkSL::Literal.52"* %1, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  tail call void @_ZN4SkSL9to_stringEl(%"class.SkSL::String"* sret %0, i64 %4) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL7LiteralIlE21isCompileTimeConstantEv(%"class.SkSL::Literal.52"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK4SkSL7LiteralIlE15compareConstantERKNS_10ExpressionE(%"class.SkSL::Literal.52"*, %"class.SkSL::Expression"* dereferenceable(24)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 43
  br i1 %5, label %6, label %14

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.SkSL::Literal.52", %"class.SkSL::Literal.52"* %0, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1
  %10 = bitcast %"class.SkSL::Expression"* %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = icmp eq i64 %8, %11
  %13 = zext i1 %12 to i32
  br label %14

14:                                               ; preds = %2, %6
  %15 = phi i32 [ %13, %6 ], [ -1, %2 ]
  ret i32 %15
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL10Expression19isConstantOrUniformEv(%"class.SkSL::Expression"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.SkSL::Expression"* %0 to i1 (%"class.SkSL::Expression"*)***
  %3 = load i1 (%"class.SkSL::Expression"*)**, i1 (%"class.SkSL::Expression"*)*** %2, align 8
  %4 = getelementptr inbounds i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %3, i64 4
  %5 = load i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %4, align 8
  %6 = tail call zeroext i1 %5(%"class.SkSL::Expression"* %0) #8
  ret i1 %6
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL7LiteralIlE11hasPropertyENS_10Expression8PropertyE(%"class.SkSL::Literal.52"*, i32) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i64, i8 } @_ZNK4SkSL7LiteralIlE12coercionCostERKNS_4TypeE(%"class.SkSL::Literal.52"*, %"class.SkSL::Type"* dereferenceable(184)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %1, i64 0, i32 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp ult i32 %4, 3
  br i1 %5, label %20, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %1, i64 0, i32 3
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %20, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.SkSL::Literal.52", %"class.SkSL::Literal.52"* %0, i64 0, i32 0
  %12 = bitcast %"class.SkSL::Literal.52"* %0 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %13 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %12, align 8
  %14 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %13, i64 3
  %15 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %14, align 8
  %16 = tail call dereferenceable(184) %"class.SkSL::Type"* %15(%"class.SkSL::Expression"* %11) #8
  %17 = tail call { i64, i8 } @_ZNK4SkSL4Type12coercionCostERKS0_(%"class.SkSL::Type"* %16, %"class.SkSL::Type"* dereferenceable(184) %1) #8
  %18 = extractvalue { i64, i8 } %17, 0
  %19 = extractvalue { i64, i8 } %17, 1
  br label %20

20:                                               ; preds = %2, %6, %10
  %21 = phi i64 [ %18, %10 ], [ 0, %6 ], [ 0, %2 ]
  %22 = phi i8 [ %19, %10 ], [ 0, %6 ], [ 0, %2 ]
  %23 = insertvalue { i64, i8 } undef, i64 %21, 0
  %24 = insertvalue { i64, i8 } %23, i8 %22, 1
  ret { i64, i8 } %24
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.SkSL::Expression"* @_ZNK4SkSL7LiteralIlE24getConstantSubexpressionEi(%"class.SkSL::Literal.52"*, i32) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.SkSL::Literal.52", %"class.SkSL::Literal.52"* %0, i64 0, i32 0
  ret %"class.SkSL::Expression"* %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.SkSL::Expression"* @_ZNK4SkSL7LiteralIlE5cloneEv(%"class.SkSL::Literal.52"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::Literal.52", %"class.SkSL::Literal.52"* %0, i64 0, i32 0, i32 0, i32 1
  %3 = getelementptr inbounds %"class.SkSL::Literal.52", %"class.SkSL::Literal.52"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.SkSL::Type"** %3 to <2 x i64>*
  %5 = load <2 x i64>, <2 x i64>* %4, align 8
  %6 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #8
  %7 = load i32, i32* %2, align 4
  %8 = bitcast i8* %6 to i32 (...)***
  %9 = getelementptr inbounds i8, i8* %6, i64 8
  %10 = bitcast i8* %9 to i32*
  store i32 %7, i32* %10, align 8
  %11 = getelementptr inbounds i8, i8* %6, i64 12
  %12 = bitcast i8* %11 to i32*
  store i32 43, i32* %12, align 4
  %13 = getelementptr inbounds i8, i8* %6, i64 16
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIlEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  %14 = bitcast i8* %13 to <2 x i64>*
  store <2 x i64> %5, <2 x i64>* %14, align 8
  %15 = bitcast i8* %6 to %"class.SkSL::Expression"*
  ret %"class.SkSL::Expression"* %15
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL6IRNodeD2Ev(%"class.SkSL::IRNode"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN4SkSL4Pool10FreeMemoryEPv(i8*) local_unnamed_addr #2

declare void @_ZN4SkSL9to_stringEl(%"class.SkSL::String"* sret, i64) local_unnamed_addr #2

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #2

declare { i64, i8 } @_ZNK4SkSL4Type12coercionCostERKS0_(%"class.SkSL::Type"*, %"class.SkSL::Type"* dereferenceable(184)) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK4SkSL4Type11displayNameEv: argument 0"}
!4 = distinct !{!4, !"_ZNK4SkSL4Type11displayNameEv"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZNK4SkSL4Type11displayNameEv: argument 0"}
!7 = distinct !{!7, !"_ZNK4SkSL4Type11displayNameEv"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZNK4SkSL4Type11displayNameEv: argument 0"}
!10 = distinct !{!10, !"_ZNK4SkSL4Type11displayNameEv"}
!11 = !{i8 0, i8 2}
