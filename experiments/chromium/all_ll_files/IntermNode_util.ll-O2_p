; ModuleID = '../../third_party/angle/src/compiler/translator/tree_util/IntermNode_util.cpp'
source_filename = "../../third_party/angle/src/compiler/translator/tree_util/IntermNode_util.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.sh::ImmutableString" = type { i8*, i64 }
%"class.sh::TIntermFunctionPrototype" = type { %"class.sh::TIntermTyped", %"class.sh::TFunction"* }
%"class.sh::TIntermTyped" = type { %"class.sh::TIntermNode" }
%"class.sh::TIntermNode" = type { i32 (...)**, %"struct.sh::TSourceLoc" }
%"struct.sh::TSourceLoc" = type { i32, i32, i32, i32 }
%"class.sh::TFunction" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TVector"*, %"class.sh::TVariable"**, i64, %"class.sh::TType"*, %"class.sh::ImmutableString", i8, i8, i8, i8, [4 x i8] }>
%"class.sh::TSymbol.base" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8 }>
%"class.sh::TSymbolUniqueId" = type { i32 }
%"class.sh::TVector" = type opaque
%"class.sh::TVariable" = type { %"class.sh::TSymbol.base", %"class.sh::TType"*, %"class.sh::TConstantUnion"* }
%"class.sh::TConstantUnion" = type { %union.anon.8, i32 }
%union.anon.8 = type { i32 }
%"class.sh::TType" = type { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", i8, %"struct.sh::TLayoutQualifier", i8, i8, %"class.sh::TSpan", %"class.sh::TVector.0"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }
%"struct.sh::TMemoryQualifier" = type { i8, i8, i8, i8, i8 }
%"struct.sh::TLayoutQualifier" = type <{ i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.sh::TSpan" = type { i32*, i64 }
%"class.sh::TVector.0" = type opaque
%"class.sh::TInterfaceBlock" = type { %"class.sh::TSymbol.base", %"class.sh::TFieldListCollection", i32, i32 }
%"class.sh::TFieldListCollection" = type { %"class.sh::TVector.1"*, i64, i32, %"class.std::__1::basic_string" }
%"class.sh::TVector.1" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.sh::TField"**, %"class.sh::TField"**, %"class.std::__1::__compressed_pair" }
%"class.sh::TField" = type <{ %"class.sh::TType"*, %"class.sh::ImmutableString", %"struct.sh::TSourceLoc", i8, [7 x i8] }>
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.sh::TField"** }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TStructure" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TFieldListCollection", i8, [7 x i8] }>
%"class.angle::PoolAllocator" = type <{ i64, i64, i64, i64, i64, %"struct.angle::PoolAllocator::Header"*, %"struct.angle::PoolAllocator::Header"*, %"class.std::__1::vector.38", i32, [4 x i8], i64, i8, [7 x i8] }>
%"struct.angle::PoolAllocator::Header" = type { %"struct.angle::PoolAllocator::Header"*, i64 }
%"class.std::__1::vector.38" = type { %"class.std::__1::__vector_base.39" }
%"class.std::__1::__vector_base.39" = type { %"struct.angle::PoolAllocator::AllocState"*, %"struct.angle::PoolAllocator::AllocState"*, %"class.std::__1::__compressed_pair.40" }
%"struct.angle::PoolAllocator::AllocState" = type { i64, %"struct.angle::PoolAllocator::Header"* }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"struct.angle::PoolAllocator::AllocState"* }
%"class.sh::TIntermFunctionDefinition" = type { %"class.sh::TIntermNode", %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermBlock" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.9", i8, [7 x i8] }>
%"class.sh::TIntermAggregateBase" = type { i32 (...)** }
%"class.sh::TVector.9" = type { %"class.std::__1::vector.10" }
%"class.std::__1::vector.10" = type { %"class.std::__1::__vector_base.11" }
%"class.std::__1::__vector_base.11" = type { %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"class.sh::TIntermNode"** }
%"class.sh::TIntermExpression" = type { %"class.sh::TIntermTyped", %"class.sh::TType" }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.sh::TIntermAggregate" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.9", i8, i8, %"class.sh::TFunction"* }
%"class.sh::TIntermOperator.base" = type <{ %"class.sh::TIntermExpression", i8 }>
%"class.sh::TIntermConstantUnion" = type { %"class.sh::TIntermExpression", %"class.sh::TConstantUnion"* }
%"class.sh::TSymbolTable" = type { %"class.sh::TSymbolTableBase", %"class.std::__1::vector.17", %"class.std::__1::vector.22", i8, i32, i32, i32, %struct.ShBuiltInResources, %"class.std::__1::map", %"class.sh::TVariable"* }
%"class.sh::TSymbolTableBase" = type { %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"* }
%"class.sh::TSymbol" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8, i8 }>
%"class.std::__1::vector.17" = type { %"class.std::__1::__vector_base.18" }
%"class.std::__1::__vector_base.18" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::unique_ptr" = type opaque
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::vector.22" = type { %"class.std::__1::__vector_base.23" }
%"class.std::__1::__vector_base.23" = type { %"class.std::__1::unique_ptr.24"*, %"class.std::__1::unique_ptr.24"*, %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::unique_ptr.24" = type opaque
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"class.std::__1::unique_ptr.24"* }
%struct.ShBuiltInResources = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 (i8*, i64)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"struct.std::__1::array", %"struct.std::__1::array", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"struct.std::__1::array" = type { [3 x i32] }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.30", %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { i64 }
%"class.sh::TIntermSymbol" = type { %"class.sh::TIntermTyped", %"class.sh::TVariable"* }
%"class.sh::TIntermDeclaration" = type { %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.9" }
%"class.sh::TIntermBinary" = type <{ %"class.sh::TIntermOperator.base", [7 x i8], %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, i8, [7 x i8] }>
%"class.sh::TIntermUnary" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermTyped"*, i8, %"class.sh::TFunction"* }

@_ZN2shL21kEmptyImmutableStringE = internal constant %"class.sh::ImmutableString" { i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i32 0, i32 0), i64 0 }, align 8
@_ZTVN2sh25TIntermFunctionDefinitionE = external unnamed_addr constant { [29 x i8*] }, align 8
@_ZTVN2sh20TIntermConstantUnionE = external unnamed_addr constant { [34 x i8*] }, align 8
@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@_ZTVN2sh18TIntermDeclarationE = external unnamed_addr constant { [31 x i8*], [6 x i8*] }, align 8
@_ZTVN2sh12TIntermBlockE = external unnamed_addr constant { [31 x i8*], [6 x i8*] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermFunctionPrototype"* @_ZN2sh35CreateInternalFunctionPrototypeNodeERKNS_9TFunctionE(%"class.sh::TFunction"* dereferenceable(80)) local_unnamed_addr #0 {
  %2 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %3 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %2, i64 32) #5
  %4 = bitcast i8* %3 to %"class.sh::TIntermFunctionPrototype"*
  tail call void @_ZN2sh24TIntermFunctionPrototypeC1EPKNS_9TFunctionE(%"class.sh::TIntermFunctionPrototype"* %4, %"class.sh::TFunction"* %0) #5
  ret %"class.sh::TIntermFunctionPrototype"* %4
}

declare void @_ZN2sh24TIntermFunctionPrototypeC1EPKNS_9TFunctionE(%"class.sh::TIntermFunctionPrototype"*, %"class.sh::TFunction"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermFunctionDefinition"* @_ZN2sh36CreateInternalFunctionDefinitionNodeERKNS_9TFunctionEPNS_12TIntermBlockE(%"class.sh::TFunction"* dereferenceable(80), %"class.sh::TIntermBlock"*) local_unnamed_addr #0 {
  %3 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %4 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %3, i64 40) #5
  %5 = bitcast i8* %4 to %"class.sh::TIntermFunctionDefinition"*
  %6 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %7 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %6, i64 32) #5
  %8 = bitcast i8* %7 to %"class.sh::TIntermFunctionPrototype"*
  tail call void @_ZN2sh24TIntermFunctionPrototypeC1EPKNS_9TFunctionE(%"class.sh::TIntermFunctionPrototype"* %8, %"class.sh::TFunction"* %0) #5
  %9 = bitcast i8* %4 to i32 (...)***
  %10 = getelementptr inbounds i8, i8* %4, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 16, i1 false) #5
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [29 x i8*] }, { [29 x i8*] }* @_ZTVN2sh25TIntermFunctionDefinitionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %11 = getelementptr inbounds i8, i8* %4, i64 24
  %12 = bitcast i8* %11 to i8**
  store i8* %7, i8** %12, align 8
  %13 = getelementptr inbounds i8, i8* %4, i64 32
  %14 = bitcast i8* %13 to %"class.sh::TIntermBlock"**
  store %"class.sh::TIntermBlock"* %1, %"class.sh::TIntermBlock"** %14, align 8
  ret %"class.sh::TIntermFunctionDefinition"* %5
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermTyped"* @_ZN2sh14CreateZeroNodeERKNS_5TTypeE(%"class.sh::TType"* dereferenceable(184)) local_unnamed_addr #0 {
  %2 = alloca %"class.sh::TType", align 8
  %3 = alloca %"class.sh::TVector.9", align 8
  %4 = alloca %"class.sh::TType", align 8
  %5 = bitcast %"class.sh::TType"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %5) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 184, i1 false)
  call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* nonnull %2, %"class.sh::TType"* dereferenceable(184) %0) #5
  %6 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %2, i64 0, i32 2
  store i32 2, i32* %6, align 8
  %7 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 10, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = icmp ne i64 %8, 0
  br i1 %9, label %59, label %10

10:                                               ; preds = %1
  %11 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 90
  br i1 %13, label %59, label %14

14:                                               ; preds = %10
  %15 = call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* nonnull %2) #5
  %16 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %15, i64 8)
  %17 = extractvalue { i64, i1 } %16, 1
  %18 = extractvalue { i64, i1 } %16, 0
  %19 = select i1 %17, i64 -1, i64 %18
  %20 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %21 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %20, i64 %19) #5
  %22 = bitcast i8* %21 to %"class.sh::TConstantUnion"*
  %23 = icmp eq i64 %15, 0
  br i1 %23, label %31, label %24

24:                                               ; preds = %14
  %25 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %22, i64 %15
  br label %26

26:                                               ; preds = %26, %24
  %27 = phi %"class.sh::TConstantUnion"* [ %22, %24 ], [ %28, %26 ]
  call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %27) #5
  %28 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %27, i64 1
  %29 = icmp eq %"class.sh::TConstantUnion"* %28, %25
  br i1 %29, label %30, label %26

30:                                               ; preds = %26
  br i1 %23, label %31, label %39

31:                                               ; preds = %54, %14, %30
  %32 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %33 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %32, i64 216) #5
  %34 = bitcast i8* %33 to %"class.sh::TIntermExpression"*
  call void @_ZN2sh17TIntermExpressionC2ERKNS_5TTypeE(%"class.sh::TIntermExpression"* %34, %"class.sh::TType"* nonnull dereferenceable(184) %2) #5
  %35 = bitcast i8* %33 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh20TIntermConstantUnionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %35, align 8
  %36 = getelementptr inbounds i8, i8* %33, i64 208
  %37 = bitcast i8* %36 to i8**
  store i8* %21, i8** %37, align 8
  %38 = bitcast i8* %33 to %"class.sh::TIntermTyped"*
  br label %555

39:                                               ; preds = %30, %54
  %40 = phi i64 [ %57, %54 ], [ 0, %30 ]
  %41 = load i32, i32* %11, align 8
  switch i32 %41, label %52 [
    i32 1, label %42
    i32 3, label %45
    i32 4, label %47
    i32 5, label %49
  ]

42:                                               ; preds = %39
  %43 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %22, i64 %40
  %44 = bitcast %"class.sh::TConstantUnion"* %43 to float*
  store float 0.000000e+00, float* %44, align 4
  br label %54

45:                                               ; preds = %39
  %46 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %22, i64 %40, i32 0, i32 0
  store i32 0, i32* %46, align 4
  br label %54

47:                                               ; preds = %39
  %48 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %22, i64 %40, i32 0, i32 0
  store i32 0, i32* %48, align 4
  br label %54

49:                                               ; preds = %39
  %50 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %22, i64 %40
  %51 = bitcast %"class.sh::TConstantUnion"* %50 to i8*
  store i8 0, i8* %51, align 4
  br label %54

52:                                               ; preds = %39
  %53 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %22, i64 %40, i32 0, i32 0
  store i32 42, i32* %53, align 4
  br label %54

54:                                               ; preds = %42, %45, %47, %49, %52
  %55 = phi i32 [ 1, %42 ], [ 3, %45 ], [ 4, %47 ], [ 5, %49 ], [ 3, %52 ]
  %56 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %22, i64 %40, i32 1
  store i32 %55, i32* %56, align 4
  %57 = add nuw i64 %40, 1
  %58 = icmp eq i64 %57, %15
  br i1 %58, label %31, label %39

59:                                               ; preds = %10, %1
  %60 = bitcast %"class.sh::TVector.9"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %60) #5
  %61 = getelementptr inbounds %"class.sh::TVector.9", %"class.sh::TVector.9"* %3, i64 0, i32 0, i32 0, i32 0
  %62 = getelementptr inbounds %"class.sh::TVector.9", %"class.sh::TVector.9"* %3, i64 0, i32 0, i32 0, i32 1
  %63 = getelementptr inbounds %"class.sh::TVector.9", %"class.sh::TVector.9"* %3, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %60, i8 0, i64 24, i1 false) #5
  br i1 %9, label %64, label %304

64:                                               ; preds = %59
  %65 = bitcast %"class.sh::TType"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %65) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %65, i8 -86, i64 184, i1 false)
  call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* nonnull %4, %"class.sh::TType"* dereferenceable(184) %0) #5
  call void @_ZN2sh5TType18toArrayElementTypeEv(%"class.sh::TType"* nonnull %4) #5
  %66 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 10, i32 0
  %67 = load i32*, i32** %66, align 8
  %68 = load i64, i64* %7, align 8
  %69 = add i64 %68, -1
  %70 = getelementptr inbounds i32, i32* %67, i64 %69
  %71 = load i32, i32* %70, align 4
  %72 = zext i32 %71 to i64
  %73 = icmp eq i32 %71, 0
  br i1 %73, label %78, label %74

74:                                               ; preds = %64
  %75 = bitcast %"class.sh::TIntermNode"*** %62 to i64*
  %76 = bitcast %"class.sh::TVector.9"* %3 to i64*
  %77 = bitcast %"class.sh::TIntermNode"*** %63 to i64*
  br label %79

78:                                               ; preds = %301, %64
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %65) #5
  br label %546

79:                                               ; preds = %301, %74
  %80 = phi i64 [ 0, %74 ], [ %302, %301 ]
  %81 = call %"class.sh::TIntermTyped"* @_ZN2sh14CreateZeroNodeERKNS_5TTypeE(%"class.sh::TType"* nonnull dereferenceable(184) %4)
  %82 = ptrtoint %"class.sh::TIntermTyped"* %81 to i64
  %83 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %62, align 8
  %84 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %63, align 8
  %85 = icmp ult %"class.sh::TIntermNode"** %83, %84
  %86 = ptrtoint %"class.sh::TIntermNode"** %84 to i64
  br i1 %85, label %87, label %91

87:                                               ; preds = %79
  %88 = bitcast %"class.sh::TIntermNode"** %83 to i64*
  store i64 %82, i64* %88, align 8
  %89 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %83, i64 1
  %90 = ptrtoint %"class.sh::TIntermNode"** %89 to i64
  store i64 %90, i64* %75, align 8
  br label %301

91:                                               ; preds = %79
  %92 = ptrtoint %"class.sh::TIntermNode"** %83 to i64
  %93 = load i64, i64* %76, align 8
  %94 = sub i64 %92, %93
  %95 = ashr exact i64 %94, 3
  %96 = add nsw i64 %95, 1
  %97 = icmp ugt i64 %96, 2305843009213693951
  br i1 %97, label %98, label %100

98:                                               ; preds = %91
  %99 = bitcast %"class.sh::TVector.9"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %99) #6
  unreachable

100:                                              ; preds = %91
  %101 = sub i64 %86, %93
  %102 = ashr exact i64 %101, 3
  %103 = icmp ult i64 %102, 1152921504606846975
  br i1 %103, label %104, label %109

104:                                              ; preds = %100
  %105 = ashr exact i64 %101, 2
  %106 = icmp ult i64 %105, %96
  %107 = select i1 %106, i64 %96, i64 %105
  %108 = icmp eq i64 %107, 0
  br i1 %108, label %115, label %109

109:                                              ; preds = %104, %100
  %110 = phi i64 [ %107, %104 ], [ 2305843009213693951, %100 ]
  %111 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %112 = shl i64 %110, 3
  %113 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %111, i64 %112) #5
  %114 = bitcast i8* %113 to %"class.sh::TIntermNode"**
  br label %115

115:                                              ; preds = %109, %104
  %116 = phi i64 [ %110, %109 ], [ 0, %104 ]
  %117 = phi %"class.sh::TIntermNode"** [ %114, %109 ], [ null, %104 ]
  %118 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %117, i64 %95
  %119 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %117, i64 %116
  %120 = ptrtoint %"class.sh::TIntermNode"** %119 to i64
  %121 = bitcast %"class.sh::TIntermNode"** %118 to i64*
  store i64 %82, i64* %121, align 8
  %122 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %118, i64 1
  %123 = ptrtoint %"class.sh::TIntermNode"** %122 to i64
  %124 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %61, align 8
  %125 = ptrtoint %"class.sh::TIntermNode"** %124 to i64
  %126 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %62, align 8
  %127 = icmp eq %"class.sh::TIntermNode"** %126, %124
  br i1 %127, label %298, label %128

128:                                              ; preds = %115
  %129 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %126, i64 -1
  %130 = ptrtoint %"class.sh::TIntermNode"** %129 to i64
  %131 = sub i64 %130, %125
  %132 = lshr i64 %131, 3
  %133 = add nuw nsw i64 %132, 1
  %134 = icmp ult i64 %133, 4
  br i1 %134, label %228, label %135

135:                                              ; preds = %128
  %136 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %117, i64 -1
  %137 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %126, i64 -1
  %138 = ptrtoint %"class.sh::TIntermNode"** %137 to i64
  %139 = sub i64 %138, %125
  %140 = lshr i64 %139, 3
  %141 = sub nsw i64 %95, %140
  %142 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %136, i64 %141
  %143 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %126, i64 -1
  %144 = sub nsw i64 0, %140
  %145 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %143, i64 %144
  %146 = icmp ult %"class.sh::TIntermNode"** %142, %126
  %147 = icmp ult %"class.sh::TIntermNode"** %145, %118
  %148 = and i1 %146, %147
  br i1 %148, label %228, label %149

149:                                              ; preds = %135
  %150 = and i64 %133, 4611686018427387900
  %151 = sub nsw i64 0, %150
  %152 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %118, i64 %151
  %153 = sub nsw i64 0, %150
  %154 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %126, i64 %153
  %155 = add nsw i64 %150, -4
  %156 = lshr exact i64 %155, 2
  %157 = add nuw nsw i64 %156, 1
  %158 = and i64 %157, 1
  %159 = icmp eq i64 %155, 0
  br i1 %159, label %204, label %160

160:                                              ; preds = %149
  %161 = sub nuw nsw i64 %157, %158
  %162 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %118, i64 -1
  %163 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %126, i64 -1
  %164 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %118, i64 -1
  %165 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %126, i64 -1
  br label %166

166:                                              ; preds = %166, %160
  %167 = phi i64 [ 0, %160 ], [ %201, %166 ]
  %168 = phi i64 [ %161, %160 ], [ %202, %166 ]
  %169 = sub i64 0, %167
  %170 = sub i64 0, %167
  %171 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 %169
  %172 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 %170
  %173 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %172, i64 -1
  %174 = bitcast %"class.sh::TIntermNode"** %173 to <2 x i64>*
  %175 = load <2 x i64>, <2 x i64>* %174, align 8, !alias.scope !2
  %176 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %172, i64 -2
  %177 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %176, i64 -1
  %178 = bitcast %"class.sh::TIntermNode"** %177 to <2 x i64>*
  %179 = load <2 x i64>, <2 x i64>* %178, align 8, !alias.scope !2
  %180 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %171, i64 -1
  %181 = bitcast %"class.sh::TIntermNode"** %180 to <2 x i64>*
  store <2 x i64> %175, <2 x i64>* %181, align 8, !alias.scope !5, !noalias !2
  %182 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %171, i64 -2
  %183 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %182, i64 -1
  %184 = bitcast %"class.sh::TIntermNode"** %183 to <2 x i64>*
  store <2 x i64> %179, <2 x i64>* %184, align 8, !alias.scope !5, !noalias !2
  %185 = sub nuw nsw i64 -4, %167
  %186 = sub nuw nsw i64 -4, %167
  %187 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %164, i64 %185
  %188 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %165, i64 %186
  %189 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %188, i64 -1
  %190 = bitcast %"class.sh::TIntermNode"** %189 to <2 x i64>*
  %191 = load <2 x i64>, <2 x i64>* %190, align 8, !alias.scope !2
  %192 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %188, i64 -2
  %193 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %192, i64 -1
  %194 = bitcast %"class.sh::TIntermNode"** %193 to <2 x i64>*
  %195 = load <2 x i64>, <2 x i64>* %194, align 8, !alias.scope !2
  %196 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %187, i64 -1
  %197 = bitcast %"class.sh::TIntermNode"** %196 to <2 x i64>*
  store <2 x i64> %191, <2 x i64>* %197, align 8, !alias.scope !5, !noalias !2
  %198 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %187, i64 -2
  %199 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %198, i64 -1
  %200 = bitcast %"class.sh::TIntermNode"** %199 to <2 x i64>*
  store <2 x i64> %195, <2 x i64>* %200, align 8, !alias.scope !5, !noalias !2
  %201 = add i64 %167, 8
  %202 = add i64 %168, -2
  %203 = icmp eq i64 %202, 0
  br i1 %203, label %204, label %166, !llvm.loop !7

204:                                              ; preds = %166, %149
  %205 = phi i64 [ 0, %149 ], [ %201, %166 ]
  %206 = icmp eq i64 %158, 0
  br i1 %206, label %226, label %207

207:                                              ; preds = %204
  %208 = sub i64 0, %205
  %209 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %118, i64 -1
  %210 = sub i64 0, %205
  %211 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %126, i64 -1
  %212 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %209, i64 %208
  %213 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %211, i64 %210
  %214 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %213, i64 -1
  %215 = bitcast %"class.sh::TIntermNode"** %214 to <2 x i64>*
  %216 = load <2 x i64>, <2 x i64>* %215, align 8, !alias.scope !2
  %217 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %213, i64 -2
  %218 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %217, i64 -1
  %219 = bitcast %"class.sh::TIntermNode"** %218 to <2 x i64>*
  %220 = load <2 x i64>, <2 x i64>* %219, align 8, !alias.scope !2
  %221 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %212, i64 -1
  %222 = bitcast %"class.sh::TIntermNode"** %221 to <2 x i64>*
  store <2 x i64> %216, <2 x i64>* %222, align 8, !alias.scope !5, !noalias !2
  %223 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %212, i64 -2
  %224 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %223, i64 -1
  %225 = bitcast %"class.sh::TIntermNode"** %224 to <2 x i64>*
  store <2 x i64> %220, <2 x i64>* %225, align 8, !alias.scope !5, !noalias !2
  br label %226

226:                                              ; preds = %204, %207
  %227 = icmp eq i64 %133, %150
  br i1 %227, label %298, label %228

228:                                              ; preds = %226, %135, %128
  %229 = phi %"class.sh::TIntermNode"** [ %118, %135 ], [ %118, %128 ], [ %152, %226 ]
  %230 = phi %"class.sh::TIntermNode"** [ %126, %135 ], [ %126, %128 ], [ %154, %226 ]
  %231 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %230, i64 -1
  %232 = ptrtoint %"class.sh::TIntermNode"** %231 to i64
  %233 = sub i64 %232, %125
  %234 = lshr i64 %233, 3
  %235 = add nuw nsw i64 %234, 1
  %236 = and i64 %235, 7
  %237 = icmp eq i64 %236, 0
  br i1 %237, label %249, label %238

238:                                              ; preds = %228, %238
  %239 = phi %"class.sh::TIntermNode"** [ %242, %238 ], [ %229, %228 ]
  %240 = phi %"class.sh::TIntermNode"** [ %243, %238 ], [ %230, %228 ]
  %241 = phi i64 [ %247, %238 ], [ %236, %228 ]
  %242 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %239, i64 -1
  %243 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %240, i64 -1
  %244 = bitcast %"class.sh::TIntermNode"** %243 to i64*
  %245 = load i64, i64* %244, align 8
  %246 = bitcast %"class.sh::TIntermNode"** %242 to i64*
  store i64 %245, i64* %246, align 8
  %247 = add i64 %241, -1
  %248 = icmp eq i64 %247, 0
  br i1 %248, label %249, label %238, !llvm.loop !9

249:                                              ; preds = %238, %228
  %250 = phi %"class.sh::TIntermNode"** [ undef, %228 ], [ %242, %238 ]
  %251 = phi %"class.sh::TIntermNode"** [ %229, %228 ], [ %242, %238 ]
  %252 = phi %"class.sh::TIntermNode"** [ %230, %228 ], [ %243, %238 ]
  %253 = icmp ult i64 %233, 56
  br i1 %253, label %298, label %254

254:                                              ; preds = %249, %254
  %255 = phi %"class.sh::TIntermNode"** [ %292, %254 ], [ %251, %249 ]
  %256 = phi %"class.sh::TIntermNode"** [ %293, %254 ], [ %252, %249 ]
  %257 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %255, i64 -1
  %258 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %256, i64 -1
  %259 = bitcast %"class.sh::TIntermNode"** %258 to i64*
  %260 = load i64, i64* %259, align 8
  %261 = bitcast %"class.sh::TIntermNode"** %257 to i64*
  store i64 %260, i64* %261, align 8
  %262 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %255, i64 -2
  %263 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %256, i64 -2
  %264 = bitcast %"class.sh::TIntermNode"** %263 to i64*
  %265 = load i64, i64* %264, align 8
  %266 = bitcast %"class.sh::TIntermNode"** %262 to i64*
  store i64 %265, i64* %266, align 8
  %267 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %255, i64 -3
  %268 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %256, i64 -3
  %269 = bitcast %"class.sh::TIntermNode"** %268 to i64*
  %270 = load i64, i64* %269, align 8
  %271 = bitcast %"class.sh::TIntermNode"** %267 to i64*
  store i64 %270, i64* %271, align 8
  %272 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %255, i64 -4
  %273 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %256, i64 -4
  %274 = bitcast %"class.sh::TIntermNode"** %273 to i64*
  %275 = load i64, i64* %274, align 8
  %276 = bitcast %"class.sh::TIntermNode"** %272 to i64*
  store i64 %275, i64* %276, align 8
  %277 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %255, i64 -5
  %278 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %256, i64 -5
  %279 = bitcast %"class.sh::TIntermNode"** %278 to i64*
  %280 = load i64, i64* %279, align 8
  %281 = bitcast %"class.sh::TIntermNode"** %277 to i64*
  store i64 %280, i64* %281, align 8
  %282 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %255, i64 -6
  %283 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %256, i64 -6
  %284 = bitcast %"class.sh::TIntermNode"** %283 to i64*
  %285 = load i64, i64* %284, align 8
  %286 = bitcast %"class.sh::TIntermNode"** %282 to i64*
  store i64 %285, i64* %286, align 8
  %287 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %255, i64 -7
  %288 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %256, i64 -7
  %289 = bitcast %"class.sh::TIntermNode"** %288 to i64*
  %290 = load i64, i64* %289, align 8
  %291 = bitcast %"class.sh::TIntermNode"** %287 to i64*
  store i64 %290, i64* %291, align 8
  %292 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %255, i64 -8
  %293 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %256, i64 -8
  %294 = bitcast %"class.sh::TIntermNode"** %293 to i64*
  %295 = load i64, i64* %294, align 8
  %296 = bitcast %"class.sh::TIntermNode"** %292 to i64*
  store i64 %295, i64* %296, align 8
  %297 = icmp eq %"class.sh::TIntermNode"** %293, %124
  br i1 %297, label %298, label %254, !llvm.loop !11

298:                                              ; preds = %249, %254, %226, %115
  %299 = phi %"class.sh::TIntermNode"** [ %118, %115 ], [ %152, %226 ], [ %250, %249 ], [ %292, %254 ]
  %300 = ptrtoint %"class.sh::TIntermNode"** %299 to i64
  store i64 %300, i64* %76, align 8
  store i64 %123, i64* %75, align 8
  store i64 %120, i64* %77, align 8
  br label %301

301:                                              ; preds = %87, %298
  %302 = add nuw nsw i64 %80, 1
  %303 = icmp eq i64 %302, %72
  br i1 %303, label %78, label %79

304:                                              ; preds = %59
  %305 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 13
  %306 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %305, align 8
  %307 = getelementptr inbounds %"class.sh::TStructure", %"class.sh::TStructure"* %306, i64 0, i32 2, i32 0
  %308 = load %"class.sh::TVector.1"*, %"class.sh::TVector.1"** %307, align 8
  %309 = getelementptr inbounds %"class.sh::TVector.1", %"class.sh::TVector.1"* %308, i64 0, i32 0, i32 0, i32 0
  %310 = load %"class.sh::TField"**, %"class.sh::TField"*** %309, align 8
  %311 = getelementptr inbounds %"class.sh::TVector.1", %"class.sh::TVector.1"* %308, i64 0, i32 0, i32 0, i32 1
  %312 = load %"class.sh::TField"**, %"class.sh::TField"*** %311, align 8
  %313 = icmp eq %"class.sh::TField"** %310, %312
  br i1 %313, label %546, label %314

314:                                              ; preds = %304
  %315 = bitcast %"class.sh::TIntermNode"*** %62 to i64*
  %316 = bitcast %"class.sh::TVector.9"* %3 to i64*
  %317 = bitcast %"class.sh::TIntermNode"*** %63 to i64*
  br label %318

318:                                              ; preds = %314, %543
  %319 = phi %"class.sh::TField"** [ %310, %314 ], [ %544, %543 ]
  %320 = load %"class.sh::TField"*, %"class.sh::TField"** %319, align 8
  %321 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %320, i64 0, i32 0
  %322 = load %"class.sh::TType"*, %"class.sh::TType"** %321, align 8
  %323 = call %"class.sh::TIntermTyped"* @_ZN2sh14CreateZeroNodeERKNS_5TTypeE(%"class.sh::TType"* dereferenceable(184) %322)
  %324 = ptrtoint %"class.sh::TIntermTyped"* %323 to i64
  %325 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %62, align 8
  %326 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %63, align 8
  %327 = icmp ult %"class.sh::TIntermNode"** %325, %326
  %328 = ptrtoint %"class.sh::TIntermNode"** %326 to i64
  br i1 %327, label %329, label %333

329:                                              ; preds = %318
  %330 = bitcast %"class.sh::TIntermNode"** %325 to i64*
  store i64 %324, i64* %330, align 8
  %331 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %325, i64 1
  %332 = ptrtoint %"class.sh::TIntermNode"** %331 to i64
  store i64 %332, i64* %315, align 8
  br label %543

333:                                              ; preds = %318
  %334 = ptrtoint %"class.sh::TIntermNode"** %325 to i64
  %335 = load i64, i64* %316, align 8
  %336 = sub i64 %334, %335
  %337 = ashr exact i64 %336, 3
  %338 = add nsw i64 %337, 1
  %339 = icmp ugt i64 %338, 2305843009213693951
  br i1 %339, label %340, label %342

340:                                              ; preds = %333
  %341 = bitcast %"class.sh::TVector.9"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %341) #6
  unreachable

342:                                              ; preds = %333
  %343 = sub i64 %328, %335
  %344 = ashr exact i64 %343, 3
  %345 = icmp ult i64 %344, 1152921504606846975
  br i1 %345, label %346, label %351

346:                                              ; preds = %342
  %347 = ashr exact i64 %343, 2
  %348 = icmp ult i64 %347, %338
  %349 = select i1 %348, i64 %338, i64 %347
  %350 = icmp eq i64 %349, 0
  br i1 %350, label %357, label %351

351:                                              ; preds = %346, %342
  %352 = phi i64 [ %349, %346 ], [ 2305843009213693951, %342 ]
  %353 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %354 = shl i64 %352, 3
  %355 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %353, i64 %354) #5
  %356 = bitcast i8* %355 to %"class.sh::TIntermNode"**
  br label %357

357:                                              ; preds = %351, %346
  %358 = phi i64 [ %352, %351 ], [ 0, %346 ]
  %359 = phi %"class.sh::TIntermNode"** [ %356, %351 ], [ null, %346 ]
  %360 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %359, i64 %337
  %361 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %359, i64 %358
  %362 = ptrtoint %"class.sh::TIntermNode"** %361 to i64
  %363 = bitcast %"class.sh::TIntermNode"** %360 to i64*
  store i64 %324, i64* %363, align 8
  %364 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %360, i64 1
  %365 = ptrtoint %"class.sh::TIntermNode"** %364 to i64
  %366 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %61, align 8
  %367 = ptrtoint %"class.sh::TIntermNode"** %366 to i64
  %368 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %62, align 8
  %369 = icmp eq %"class.sh::TIntermNode"** %368, %366
  br i1 %369, label %540, label %370

370:                                              ; preds = %357
  %371 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %368, i64 -1
  %372 = ptrtoint %"class.sh::TIntermNode"** %371 to i64
  %373 = sub i64 %372, %367
  %374 = lshr i64 %373, 3
  %375 = add nuw nsw i64 %374, 1
  %376 = icmp ult i64 %375, 4
  br i1 %376, label %470, label %377

377:                                              ; preds = %370
  %378 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %359, i64 -1
  %379 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %368, i64 -1
  %380 = ptrtoint %"class.sh::TIntermNode"** %379 to i64
  %381 = sub i64 %380, %367
  %382 = lshr i64 %381, 3
  %383 = sub nsw i64 %337, %382
  %384 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %378, i64 %383
  %385 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %368, i64 -1
  %386 = sub nsw i64 0, %382
  %387 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %385, i64 %386
  %388 = icmp ult %"class.sh::TIntermNode"** %384, %368
  %389 = icmp ult %"class.sh::TIntermNode"** %387, %360
  %390 = and i1 %388, %389
  br i1 %390, label %470, label %391

391:                                              ; preds = %377
  %392 = and i64 %375, 4611686018427387900
  %393 = sub nsw i64 0, %392
  %394 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %360, i64 %393
  %395 = sub nsw i64 0, %392
  %396 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %368, i64 %395
  %397 = add nsw i64 %392, -4
  %398 = lshr exact i64 %397, 2
  %399 = add nuw nsw i64 %398, 1
  %400 = and i64 %399, 1
  %401 = icmp eq i64 %397, 0
  br i1 %401, label %446, label %402

402:                                              ; preds = %391
  %403 = sub nuw nsw i64 %399, %400
  %404 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %360, i64 -1
  %405 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %368, i64 -1
  %406 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %360, i64 -1
  %407 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %368, i64 -1
  br label %408

408:                                              ; preds = %408, %402
  %409 = phi i64 [ 0, %402 ], [ %443, %408 ]
  %410 = phi i64 [ %403, %402 ], [ %444, %408 ]
  %411 = sub i64 0, %409
  %412 = sub i64 0, %409
  %413 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %404, i64 %411
  %414 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %405, i64 %412
  %415 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %414, i64 -1
  %416 = bitcast %"class.sh::TIntermNode"** %415 to <2 x i64>*
  %417 = load <2 x i64>, <2 x i64>* %416, align 8, !alias.scope !12
  %418 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %414, i64 -2
  %419 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %418, i64 -1
  %420 = bitcast %"class.sh::TIntermNode"** %419 to <2 x i64>*
  %421 = load <2 x i64>, <2 x i64>* %420, align 8, !alias.scope !12
  %422 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %413, i64 -1
  %423 = bitcast %"class.sh::TIntermNode"** %422 to <2 x i64>*
  store <2 x i64> %417, <2 x i64>* %423, align 8, !alias.scope !15, !noalias !12
  %424 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %413, i64 -2
  %425 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 -1
  %426 = bitcast %"class.sh::TIntermNode"** %425 to <2 x i64>*
  store <2 x i64> %421, <2 x i64>* %426, align 8, !alias.scope !15, !noalias !12
  %427 = sub nuw nsw i64 -4, %409
  %428 = sub nuw nsw i64 -4, %409
  %429 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %406, i64 %427
  %430 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %407, i64 %428
  %431 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %430, i64 -1
  %432 = bitcast %"class.sh::TIntermNode"** %431 to <2 x i64>*
  %433 = load <2 x i64>, <2 x i64>* %432, align 8, !alias.scope !12
  %434 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %430, i64 -2
  %435 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %434, i64 -1
  %436 = bitcast %"class.sh::TIntermNode"** %435 to <2 x i64>*
  %437 = load <2 x i64>, <2 x i64>* %436, align 8, !alias.scope !12
  %438 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %429, i64 -1
  %439 = bitcast %"class.sh::TIntermNode"** %438 to <2 x i64>*
  store <2 x i64> %433, <2 x i64>* %439, align 8, !alias.scope !15, !noalias !12
  %440 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %429, i64 -2
  %441 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %440, i64 -1
  %442 = bitcast %"class.sh::TIntermNode"** %441 to <2 x i64>*
  store <2 x i64> %437, <2 x i64>* %442, align 8, !alias.scope !15, !noalias !12
  %443 = add i64 %409, 8
  %444 = add i64 %410, -2
  %445 = icmp eq i64 %444, 0
  br i1 %445, label %446, label %408, !llvm.loop !17

446:                                              ; preds = %408, %391
  %447 = phi i64 [ 0, %391 ], [ %443, %408 ]
  %448 = icmp eq i64 %400, 0
  br i1 %448, label %468, label %449

449:                                              ; preds = %446
  %450 = sub i64 0, %447
  %451 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %360, i64 -1
  %452 = sub i64 0, %447
  %453 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %368, i64 -1
  %454 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %451, i64 %450
  %455 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %453, i64 %452
  %456 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %455, i64 -1
  %457 = bitcast %"class.sh::TIntermNode"** %456 to <2 x i64>*
  %458 = load <2 x i64>, <2 x i64>* %457, align 8, !alias.scope !12
  %459 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %455, i64 -2
  %460 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %459, i64 -1
  %461 = bitcast %"class.sh::TIntermNode"** %460 to <2 x i64>*
  %462 = load <2 x i64>, <2 x i64>* %461, align 8, !alias.scope !12
  %463 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %454, i64 -1
  %464 = bitcast %"class.sh::TIntermNode"** %463 to <2 x i64>*
  store <2 x i64> %458, <2 x i64>* %464, align 8, !alias.scope !15, !noalias !12
  %465 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %454, i64 -2
  %466 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %465, i64 -1
  %467 = bitcast %"class.sh::TIntermNode"** %466 to <2 x i64>*
  store <2 x i64> %462, <2 x i64>* %467, align 8, !alias.scope !15, !noalias !12
  br label %468

468:                                              ; preds = %446, %449
  %469 = icmp eq i64 %375, %392
  br i1 %469, label %540, label %470

470:                                              ; preds = %468, %377, %370
  %471 = phi %"class.sh::TIntermNode"** [ %360, %377 ], [ %360, %370 ], [ %394, %468 ]
  %472 = phi %"class.sh::TIntermNode"** [ %368, %377 ], [ %368, %370 ], [ %396, %468 ]
  %473 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %472, i64 -1
  %474 = ptrtoint %"class.sh::TIntermNode"** %473 to i64
  %475 = sub i64 %474, %367
  %476 = lshr i64 %475, 3
  %477 = add nuw nsw i64 %476, 1
  %478 = and i64 %477, 7
  %479 = icmp eq i64 %478, 0
  br i1 %479, label %491, label %480

480:                                              ; preds = %470, %480
  %481 = phi %"class.sh::TIntermNode"** [ %484, %480 ], [ %471, %470 ]
  %482 = phi %"class.sh::TIntermNode"** [ %485, %480 ], [ %472, %470 ]
  %483 = phi i64 [ %489, %480 ], [ %478, %470 ]
  %484 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %481, i64 -1
  %485 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %482, i64 -1
  %486 = bitcast %"class.sh::TIntermNode"** %485 to i64*
  %487 = load i64, i64* %486, align 8
  %488 = bitcast %"class.sh::TIntermNode"** %484 to i64*
  store i64 %487, i64* %488, align 8
  %489 = add i64 %483, -1
  %490 = icmp eq i64 %489, 0
  br i1 %490, label %491, label %480, !llvm.loop !18

491:                                              ; preds = %480, %470
  %492 = phi %"class.sh::TIntermNode"** [ undef, %470 ], [ %484, %480 ]
  %493 = phi %"class.sh::TIntermNode"** [ %471, %470 ], [ %484, %480 ]
  %494 = phi %"class.sh::TIntermNode"** [ %472, %470 ], [ %485, %480 ]
  %495 = icmp ult i64 %475, 56
  br i1 %495, label %540, label %496

496:                                              ; preds = %491, %496
  %497 = phi %"class.sh::TIntermNode"** [ %534, %496 ], [ %493, %491 ]
  %498 = phi %"class.sh::TIntermNode"** [ %535, %496 ], [ %494, %491 ]
  %499 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %497, i64 -1
  %500 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %498, i64 -1
  %501 = bitcast %"class.sh::TIntermNode"** %500 to i64*
  %502 = load i64, i64* %501, align 8
  %503 = bitcast %"class.sh::TIntermNode"** %499 to i64*
  store i64 %502, i64* %503, align 8
  %504 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %497, i64 -2
  %505 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %498, i64 -2
  %506 = bitcast %"class.sh::TIntermNode"** %505 to i64*
  %507 = load i64, i64* %506, align 8
  %508 = bitcast %"class.sh::TIntermNode"** %504 to i64*
  store i64 %507, i64* %508, align 8
  %509 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %497, i64 -3
  %510 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %498, i64 -3
  %511 = bitcast %"class.sh::TIntermNode"** %510 to i64*
  %512 = load i64, i64* %511, align 8
  %513 = bitcast %"class.sh::TIntermNode"** %509 to i64*
  store i64 %512, i64* %513, align 8
  %514 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %497, i64 -4
  %515 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %498, i64 -4
  %516 = bitcast %"class.sh::TIntermNode"** %515 to i64*
  %517 = load i64, i64* %516, align 8
  %518 = bitcast %"class.sh::TIntermNode"** %514 to i64*
  store i64 %517, i64* %518, align 8
  %519 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %497, i64 -5
  %520 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %498, i64 -5
  %521 = bitcast %"class.sh::TIntermNode"** %520 to i64*
  %522 = load i64, i64* %521, align 8
  %523 = bitcast %"class.sh::TIntermNode"** %519 to i64*
  store i64 %522, i64* %523, align 8
  %524 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %497, i64 -6
  %525 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %498, i64 -6
  %526 = bitcast %"class.sh::TIntermNode"** %525 to i64*
  %527 = load i64, i64* %526, align 8
  %528 = bitcast %"class.sh::TIntermNode"** %524 to i64*
  store i64 %527, i64* %528, align 8
  %529 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %497, i64 -7
  %530 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %498, i64 -7
  %531 = bitcast %"class.sh::TIntermNode"** %530 to i64*
  %532 = load i64, i64* %531, align 8
  %533 = bitcast %"class.sh::TIntermNode"** %529 to i64*
  store i64 %532, i64* %533, align 8
  %534 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %497, i64 -8
  %535 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %498, i64 -8
  %536 = bitcast %"class.sh::TIntermNode"** %535 to i64*
  %537 = load i64, i64* %536, align 8
  %538 = bitcast %"class.sh::TIntermNode"** %534 to i64*
  store i64 %537, i64* %538, align 8
  %539 = icmp eq %"class.sh::TIntermNode"** %535, %366
  br i1 %539, label %540, label %496, !llvm.loop !19

540:                                              ; preds = %491, %496, %468, %357
  %541 = phi %"class.sh::TIntermNode"** [ %360, %357 ], [ %394, %468 ], [ %492, %491 ], [ %534, %496 ]
  %542 = ptrtoint %"class.sh::TIntermNode"** %541 to i64
  store i64 %542, i64* %316, align 8
  store i64 %365, i64* %315, align 8
  store i64 %362, i64* %317, align 8
  br label %543

543:                                              ; preds = %329, %540
  %544 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %319, i64 1
  %545 = icmp eq %"class.sh::TField"** %544, %312
  br i1 %545, label %546, label %318

546:                                              ; preds = %543, %304, %78
  %547 = call %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate17CreateConstructorERKNS_5TTypeEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TType"* nonnull dereferenceable(184) %2, %"class.sh::TVector.9"* nonnull %3) #5
  %548 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %547, i64 0, i32 0, i32 0, i32 0
  %549 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %61, align 8
  %550 = icmp eq %"class.sh::TIntermNode"** %549, null
  br i1 %550, label %554, label %551

551:                                              ; preds = %546
  %552 = ptrtoint %"class.sh::TIntermNode"** %549 to i64
  %553 = bitcast %"class.sh::TIntermNode"*** %62 to i64*
  store i64 %552, i64* %553, align 8
  br label %554

554:                                              ; preds = %546, %551
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %60) #5
  br label %555

555:                                              ; preds = %554, %31
  %556 = phi %"class.sh::TIntermTyped"* [ %548, %554 ], [ %38, %31 ]
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %5) #5
  ret %"class.sh::TIntermTyped"* %556
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"*, %"class.sh::TType"* dereferenceable(184)) unnamed_addr #1

declare i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"*) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #3

declare void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"*) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN2sh5TType18toArrayElementTypeEv(%"class.sh::TType"*) local_unnamed_addr #1

declare %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate17CreateConstructorERKNS_5TTypeEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TType"* dereferenceable(184), %"class.sh::TVector.9"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateFloatNodeEf(float) local_unnamed_addr #0 {
  %2 = alloca %"class.sh::TType", align 8
  %3 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %4 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %3, i64 8) #5
  %5 = bitcast i8* %4 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %5) #5
  %6 = bitcast i8* %4 to float*
  store float %0, float* %6, align 4
  %7 = getelementptr inbounds i8, i8* %4, i64 4
  %8 = bitcast i8* %7 to i32*
  store i32 1, i32* %8, align 4
  %9 = bitcast %"class.sh::TType"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %9) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 184, i1 false)
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %2, i32 1, i32 0, i32 2, i8 zeroext 1, i8 zeroext 1) #5
  %10 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %11 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %10, i64 216) #5
  %12 = bitcast i8* %11 to %"class.sh::TIntermConstantUnion"*
  %13 = bitcast i8* %11 to %"class.sh::TIntermExpression"*
  call void @_ZN2sh17TIntermExpressionC2ERKNS_5TTypeE(%"class.sh::TIntermExpression"* %13, %"class.sh::TType"* nonnull dereferenceable(184) %2) #5
  %14 = bitcast i8* %11 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh20TIntermConstantUnionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %14, align 8
  %15 = getelementptr inbounds i8, i8* %11, i64 208
  %16 = bitcast i8* %15 to i8**
  store i8* %4, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %9) #5
  ret %"class.sh::TIntermConstantUnion"* %12
}

declare void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"*, i32, i32, i32, i8 zeroext, i8 zeroext) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateIndexNodeEi(i32) local_unnamed_addr #0 {
  %2 = alloca %"class.sh::TType", align 8
  %3 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %4 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %3, i64 8) #5
  %5 = bitcast i8* %4 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %5) #5
  %6 = bitcast i8* %4 to i32*
  store i32 %0, i32* %6, align 4
  %7 = getelementptr inbounds i8, i8* %4, i64 4
  %8 = bitcast i8* %7 to i32*
  store i32 3, i32* %8, align 4
  %9 = bitcast %"class.sh::TType"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %9) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 184, i1 false)
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %2, i32 3, i32 0, i32 2, i8 zeroext 1, i8 zeroext 1) #5
  %10 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %11 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %10, i64 216) #5
  %12 = bitcast i8* %11 to %"class.sh::TIntermConstantUnion"*
  %13 = bitcast i8* %11 to %"class.sh::TIntermExpression"*
  call void @_ZN2sh17TIntermExpressionC2ERKNS_5TTypeE(%"class.sh::TIntermExpression"* %13, %"class.sh::TType"* nonnull dereferenceable(184) %2) #5
  %14 = bitcast i8* %11 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh20TIntermConstantUnionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %14, align 8
  %15 = getelementptr inbounds i8, i8* %11, i64 208
  %16 = bitcast i8* %15 to i8**
  store i8* %4, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %9) #5
  ret %"class.sh::TIntermConstantUnion"* %12
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermConstantUnion"* @_ZN2sh14CreateUIntNodeEj(i32) local_unnamed_addr #0 {
  %2 = alloca %"class.sh::TType", align 8
  %3 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %4 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %3, i64 8) #5
  %5 = bitcast i8* %4 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %5) #5
  %6 = bitcast i8* %4 to i32*
  store i32 %0, i32* %6, align 4
  %7 = getelementptr inbounds i8, i8* %4, i64 4
  %8 = bitcast i8* %7 to i32*
  store i32 4, i32* %8, align 4
  %9 = bitcast %"class.sh::TType"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %9) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 184, i1 false)
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %2, i32 4, i32 0, i32 2, i8 zeroext 1, i8 zeroext 1) #5
  %10 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %11 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %10, i64 216) #5
  %12 = bitcast i8* %11 to %"class.sh::TIntermConstantUnion"*
  %13 = bitcast i8* %11 to %"class.sh::TIntermExpression"*
  call void @_ZN2sh17TIntermExpressionC2ERKNS_5TTypeE(%"class.sh::TIntermExpression"* %13, %"class.sh::TType"* nonnull dereferenceable(184) %2) #5
  %14 = bitcast i8* %11 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh20TIntermConstantUnionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %14, align 8
  %15 = getelementptr inbounds i8, i8* %11, i64 208
  %16 = bitcast i8* %15 to i8**
  store i8* %4, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %9) #5
  ret %"class.sh::TIntermConstantUnion"* %12
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermConstantUnion"* @_ZN2sh14CreateBoolNodeEb(i1 zeroext) local_unnamed_addr #0 {
  %2 = alloca %"class.sh::TType", align 8
  %3 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %4 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %3, i64 8) #5
  %5 = bitcast i8* %4 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %5) #5
  %6 = zext i1 %0 to i8
  store i8 %6, i8* %4, align 4
  %7 = getelementptr inbounds i8, i8* %4, i64 4
  %8 = bitcast i8* %7 to i32*
  store i32 5, i32* %8, align 4
  %9 = bitcast %"class.sh::TType"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %9) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 184, i1 false)
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %2, i32 5, i32 0, i32 2, i8 zeroext 1, i8 zeroext 1) #5
  %10 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %11 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %10, i64 216) #5
  %12 = bitcast i8* %11 to %"class.sh::TIntermConstantUnion"*
  %13 = bitcast i8* %11 to %"class.sh::TIntermExpression"*
  call void @_ZN2sh17TIntermExpressionC2ERKNS_5TTypeE(%"class.sh::TIntermExpression"* %13, %"class.sh::TType"* nonnull dereferenceable(184) %2) #5
  %14 = bitcast i8* %11 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh20TIntermConstantUnionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %14, align 8
  %15 = getelementptr inbounds i8, i8* %11, i64 208
  %16 = bitcast i8* %15 to i8**
  store i8* %4, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %9) #5
  ret %"class.sh::TIntermConstantUnion"* %12
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TVariable"* @_ZN2sh18CreateTempVariableEPNS_12TSymbolTableEPKNS_5TTypeE(%"class.sh::TSymbolTable"*, %"class.sh::TType"*) local_unnamed_addr #0 {
  %3 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %4 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %3, i64 40) #5
  %5 = bitcast i8* %4 to %"class.sh::TVariable"*
  tail call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %5, %"class.sh::TSymbolTable"* %0, %"class.sh::ImmutableString"* nonnull dereferenceable(16) @_ZN2shL21kEmptyImmutableStringE, %"class.sh::TType"* %1, i8 zeroext 2, i8 zeroext 0) #5
  ret %"class.sh::TVariable"* %5
}

declare void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"*, %"class.sh::TSymbolTable"*, %"class.sh::ImmutableString"* dereferenceable(16), %"class.sh::TType"*, i8 zeroext, i8 zeroext) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TVariable"* @_ZN2sh18CreateTempVariableEPNS_12TSymbolTableEPKNS_5TTypeENS_10TQualifierE(%"class.sh::TSymbolTable"*, %"class.sh::TType"*, i32) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 2
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, %2
  %7 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  br i1 %6, label %8, label %11

8:                                                ; preds = %3
  %9 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %7, i64 40) #5
  %10 = bitcast i8* %9 to %"class.sh::TVariable"*
  tail call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %10, %"class.sh::TSymbolTable"* %0, %"class.sh::ImmutableString"* nonnull dereferenceable(16) @_ZN2shL21kEmptyImmutableStringE, %"class.sh::TType"* %1, i8 zeroext 2, i8 zeroext 0) #5
  br label %19

11:                                               ; preds = %3
  %12 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %7, i64 184) #5
  %13 = bitcast i8* %12 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %13, %"class.sh::TType"* dereferenceable(184) %1) #5
  %14 = getelementptr inbounds i8, i8* %12, i64 8
  %15 = bitcast i8* %14 to i32*
  store i32 %2, i32* %15, align 8
  %16 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %17 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %16, i64 40) #5
  %18 = bitcast i8* %17 to %"class.sh::TVariable"*
  tail call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %18, %"class.sh::TSymbolTable"* %0, %"class.sh::ImmutableString"* nonnull dereferenceable(16) @_ZN2shL21kEmptyImmutableStringE, %"class.sh::TType"* %13, i8 zeroext 2, i8 zeroext 0) #5
  br label %19

19:                                               ; preds = %11, %8
  %20 = phi %"class.sh::TVariable"* [ %10, %8 ], [ %18, %11 ]
  ret %"class.sh::TVariable"* %20
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermSymbol"* @_ZN2sh20CreateTempSymbolNodeEPKNS_9TVariableE(%"class.sh::TVariable"*) local_unnamed_addr #0 {
  %2 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %3 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %2, i64 32) #5
  %4 = bitcast i8* %3 to %"class.sh::TIntermSymbol"*
  tail call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %4, %"class.sh::TVariable"* %0) #5
  ret %"class.sh::TIntermSymbol"* %4
}

declare void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"*, %"class.sh::TVariable"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermDeclaration"* @_ZN2sh25CreateTempDeclarationNodeEPKNS_9TVariableE(%"class.sh::TVariable"*) local_unnamed_addr #0 {
  %2 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %3 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %2, i64 56) #5
  %4 = bitcast i8* %3 to %"class.sh::TIntermDeclaration"*
  %5 = bitcast i8* %3 to i32 (...)***
  %6 = getelementptr inbounds i8, i8* %3, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 16, i1 false) #5
  %7 = getelementptr inbounds i8, i8* %3, i64 24
  %8 = bitcast i8* %7 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh18TIntermDeclarationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh18TIntermDeclarationE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  %9 = getelementptr inbounds i8, i8* %3, i64 32
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 24, i1 false) #5
  %10 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %11 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %10, i64 32) #5
  %12 = bitcast i8* %11 to %"class.sh::TIntermSymbol"*
  tail call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %12, %"class.sh::TVariable"* %0) #5
  %13 = bitcast i8* %11 to %"class.sh::TIntermTyped"*
  tail call void @_ZN2sh18TIntermDeclaration16appendDeclaratorEPNS_12TIntermTypedE(%"class.sh::TIntermDeclaration"* %4, %"class.sh::TIntermTyped"* %13) #5
  ret %"class.sh::TIntermDeclaration"* %4
}

declare void @_ZN2sh18TIntermDeclaration16appendDeclaratorEPNS_12TIntermTypedE(%"class.sh::TIntermDeclaration"*, %"class.sh::TIntermTyped"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermDeclaration"* @_ZN2sh29CreateTempInitDeclarationNodeEPKNS_9TVariableEPNS_12TIntermTypedE(%"class.sh::TVariable"*, %"class.sh::TIntermTyped"*) local_unnamed_addr #0 {
  %3 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %4 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %3, i64 32) #5
  %5 = bitcast i8* %4 to %"class.sh::TIntermSymbol"*
  tail call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %5, %"class.sh::TVariable"* %0) #5
  %6 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %7 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %6, i64 56) #5
  %8 = bitcast i8* %7 to %"class.sh::TIntermDeclaration"*
  %9 = bitcast i8* %7 to i32 (...)***
  %10 = getelementptr inbounds i8, i8* %7, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 16, i1 false) #5
  %11 = getelementptr inbounds i8, i8* %7, i64 24
  %12 = bitcast i8* %11 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh18TIntermDeclarationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh18TIntermDeclarationE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %12, align 8
  %13 = getelementptr inbounds i8, i8* %7, i64 32
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 24, i1 false) #5
  %14 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %15 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %14, i64 240) #5
  %16 = bitcast i8* %15 to %"class.sh::TIntermBinary"*
  %17 = bitcast i8* %4 to %"class.sh::TIntermTyped"*
  tail call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %16, i8 zeroext -117, %"class.sh::TIntermTyped"* %17, %"class.sh::TIntermTyped"* %1) #5
  %18 = bitcast i8* %15 to %"class.sh::TIntermTyped"*
  tail call void @_ZN2sh18TIntermDeclaration16appendDeclaratorEPNS_12TIntermTypedE(%"class.sh::TIntermDeclaration"* %8, %"class.sh::TIntermTyped"* %18) #5
  ret %"class.sh::TIntermDeclaration"* %8
}

declare void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"*, i8 zeroext, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermBinary"* @_ZN2sh24CreateTempAssignmentNodeEPKNS_9TVariableEPNS_12TIntermTypedE(%"class.sh::TVariable"*, %"class.sh::TIntermTyped"*) local_unnamed_addr #0 {
  %3 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %4 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %3, i64 32) #5
  %5 = bitcast i8* %4 to %"class.sh::TIntermSymbol"*
  tail call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %5, %"class.sh::TVariable"* %0) #5
  %6 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %7 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %6, i64 240) #5
  %8 = bitcast i8* %7 to %"class.sh::TIntermBinary"*
  %9 = bitcast i8* %4 to %"class.sh::TIntermTyped"*
  tail call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %8, i8 zeroext -118, %"class.sh::TIntermTyped"* %9, %"class.sh::TIntermTyped"* %1) #5
  ret %"class.sh::TIntermBinary"* %8
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TVariable"* @_ZN2sh19DeclareTempVariableEPNS_12TSymbolTableEPKNS_5TTypeENS_10TQualifierEPPNS_18TIntermDeclarationE(%"class.sh::TSymbolTable"*, %"class.sh::TType"*, i32, %"class.sh::TIntermDeclaration"** nocapture) local_unnamed_addr #0 {
  %5 = tail call %"class.sh::TVariable"* @_ZN2sh18CreateTempVariableEPNS_12TSymbolTableEPKNS_5TTypeENS_10TQualifierE(%"class.sh::TSymbolTable"* %0, %"class.sh::TType"* %1, i32 %2)
  %6 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %7 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %6, i64 56) #5
  %8 = bitcast i8* %7 to %"class.sh::TIntermDeclaration"*
  %9 = bitcast i8* %7 to i32 (...)***
  %10 = getelementptr inbounds i8, i8* %7, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 16, i1 false) #5
  %11 = getelementptr inbounds i8, i8* %7, i64 24
  %12 = bitcast i8* %11 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh18TIntermDeclarationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh18TIntermDeclarationE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %12, align 8
  %13 = getelementptr inbounds i8, i8* %7, i64 32
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 24, i1 false) #5
  %14 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %15 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %14, i64 32) #5
  %16 = bitcast i8* %15 to %"class.sh::TIntermSymbol"*
  tail call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %16, %"class.sh::TVariable"* %5) #5
  %17 = bitcast i8* %15 to %"class.sh::TIntermTyped"*
  tail call void @_ZN2sh18TIntermDeclaration16appendDeclaratorEPNS_12TIntermTypedE(%"class.sh::TIntermDeclaration"* %8, %"class.sh::TIntermTyped"* %17) #5
  %18 = bitcast %"class.sh::TIntermDeclaration"** %3 to i8**
  store i8* %7, i8** %18, align 8
  ret %"class.sh::TVariable"* %5
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TVariable"* @_ZN2sh19DeclareTempVariableEPNS_12TSymbolTableEPNS_12TIntermTypedENS_10TQualifierEPPNS_18TIntermDeclarationE(%"class.sh::TSymbolTable"*, %"class.sh::TIntermTyped"*, i32, %"class.sh::TIntermDeclaration"** nocapture) local_unnamed_addr #0 {
  %5 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %6 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %5, i64 184) #5
  %7 = bitcast i8* %6 to %"class.sh::TType"*
  %8 = bitcast %"class.sh::TIntermTyped"* %1 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %9 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %8, align 8
  %10 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %9, i64 31
  %11 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %10, align 8
  %12 = tail call dereferenceable(184) %"class.sh::TType"* %11(%"class.sh::TIntermTyped"* %1) #5
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %7, %"class.sh::TType"* dereferenceable(184) %12) #5
  %13 = tail call %"class.sh::TVariable"* @_ZN2sh18CreateTempVariableEPNS_12TSymbolTableEPKNS_5TTypeENS_10TQualifierE(%"class.sh::TSymbolTable"* %0, %"class.sh::TType"* %7, i32 %2)
  %14 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %15 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %14, i64 32) #5
  %16 = bitcast i8* %15 to %"class.sh::TIntermSymbol"*
  tail call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %16, %"class.sh::TVariable"* %13) #5
  %17 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %18 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %17, i64 56) #5
  %19 = bitcast i8* %18 to %"class.sh::TIntermDeclaration"*
  %20 = bitcast i8* %18 to i32 (...)***
  %21 = getelementptr inbounds i8, i8* %18, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %21, i8 0, i64 16, i1 false) #5
  %22 = getelementptr inbounds i8, i8* %18, i64 24
  %23 = bitcast i8* %22 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh18TIntermDeclarationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %20, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh18TIntermDeclarationE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %23, align 8
  %24 = getelementptr inbounds i8, i8* %18, i64 32
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 24, i1 false) #5
  %25 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %26 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %25, i64 240) #5
  %27 = bitcast i8* %26 to %"class.sh::TIntermBinary"*
  %28 = bitcast i8* %15 to %"class.sh::TIntermTyped"*
  tail call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %27, i8 zeroext -117, %"class.sh::TIntermTyped"* %28, %"class.sh::TIntermTyped"* %1) #5
  %29 = bitcast i8* %26 to %"class.sh::TIntermTyped"*
  tail call void @_ZN2sh18TIntermDeclaration16appendDeclaratorEPNS_12TIntermTypedE(%"class.sh::TIntermDeclaration"* %19, %"class.sh::TIntermTyped"* %29) #5
  %30 = bitcast %"class.sh::TIntermDeclaration"** %3 to i8**
  store i8* %18, i8** %30, align 8
  ret %"class.sh::TVariable"* %13
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TVariable"* @_ZN2sh21DeclareInterfaceBlockEPNS_12TIntermBlockEPNS_12TSymbolTableEPNS_7TVectorIPNS_6TFieldEEENS_10TQualifierERKNS_16TLayoutQualifierERKNS_16TMemoryQualifierEjRKNS_15ImmutableStringESI_(%"class.sh::TIntermBlock"*, %"class.sh::TSymbolTable"*, %"class.sh::TVector.1"*, i32, %"struct.sh::TLayoutQualifier"* dereferenceable(92), %"struct.sh::TMemoryQualifier"* nocapture readonly dereferenceable(5), i32, %"class.sh::ImmutableString"* dereferenceable(16), %"class.sh::ImmutableString"* dereferenceable(16)) local_unnamed_addr #0 {
  %10 = alloca %"struct.sh::TLayoutQualifier", align 8
  %11 = alloca %"class.sh::TVector.9", align 8
  %12 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %13 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %12, i64 80) #5
  %14 = bitcast i8* %13 to %"class.sh::TInterfaceBlock"*
  tail call void @_ZN2sh15TInterfaceBlockC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_7TVectorIPNS_6TFieldEEERKNS_16TLayoutQualifierENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TInterfaceBlock"* %14, %"class.sh::TSymbolTable"* %1, %"class.sh::ImmutableString"* dereferenceable(16) %7, %"class.sh::TVector.1"* %2, %"struct.sh::TLayoutQualifier"* dereferenceable(92) %4, i8 zeroext 2, i8 zeroext 0) #5
  %15 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %16 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %15, i64 184) #5
  %17 = bitcast i8* %16 to %"class.sh::TType"*
  %18 = bitcast %"struct.sh::TLayoutQualifier"* %10 to i8*
  %19 = bitcast %"struct.sh::TLayoutQualifier"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %18, i8* align 4 %19, i64 92, i1 false)
  tail call void @_ZN2sh5TTypeC1EPKNS_15TInterfaceBlockENS_10TQualifierENS_16TLayoutQualifierE(%"class.sh::TType"* %17, %"class.sh::TInterfaceBlock"* %14, i32 %3, %"struct.sh::TLayoutQualifier"* nonnull byval(%"struct.sh::TLayoutQualifier") align 8 %10) #5
  %20 = getelementptr inbounds i8, i8* %16, i64 14
  %21 = getelementptr inbounds %"struct.sh::TMemoryQualifier", %"struct.sh::TMemoryQualifier"* %5, i64 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %20, i8* align 1 %21, i64 5, i1 false) #5
  %22 = icmp eq i32 %6, 0
  br i1 %22, label %24, label %23

23:                                               ; preds = %9
  tail call void @_ZN2sh5TType9makeArrayEj(%"class.sh::TType"* %17, i32 %6) #5
  br label %24

24:                                               ; preds = %23, %9
  %25 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %26 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %25, i64 56) #5
  %27 = bitcast i8* %26 to %"class.sh::TIntermDeclaration"*
  %28 = bitcast i8* %26 to i32 (...)***
  %29 = getelementptr inbounds i8, i8* %26, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %29, i8 0, i64 16, i1 false) #5
  %30 = getelementptr inbounds i8, i8* %26, i64 24
  %31 = bitcast i8* %30 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh18TIntermDeclarationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %28, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh18TIntermDeclarationE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %31, align 8
  %32 = getelementptr inbounds i8, i8* %26, i64 32
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %32, i8 0, i64 24, i1 false) #5
  %33 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %34 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %33, i64 40) #5
  %35 = bitcast i8* %34 to %"class.sh::TVariable"*
  %36 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %8, i64 0, i32 1
  %37 = load i64, i64* %36, align 8
  %38 = icmp eq i64 %37, 0
  %39 = select i1 %38, i8 3, i8 2
  tail call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %35, %"class.sh::TSymbolTable"* %1, %"class.sh::ImmutableString"* dereferenceable(16) %8, %"class.sh::TType"* %17, i8 zeroext %39, i8 zeroext 0) #5
  %40 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %41 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %40, i64 32) #5
  %42 = bitcast i8* %41 to %"class.sh::TIntermSymbol"*
  tail call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %42, %"class.sh::TVariable"* %35) #5
  %43 = bitcast i8* %41 to %"class.sh::TIntermTyped"*
  tail call void @_ZN2sh18TIntermDeclaration16appendDeclaratorEPNS_12TIntermTypedE(%"class.sh::TIntermDeclaration"* %27, %"class.sh::TIntermTyped"* %43) #5
  %44 = bitcast %"class.sh::TVector.9"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %44) #5
  %45 = getelementptr inbounds %"class.sh::TVector.9", %"class.sh::TVector.9"* %11, i64 0, i32 0, i32 0, i32 0
  %46 = getelementptr inbounds %"class.sh::TVector.9", %"class.sh::TVector.9"* %11, i64 0, i32 0, i32 0, i32 1
  %47 = getelementptr inbounds %"class.sh::TVector.9", %"class.sh::TVector.9"* %11, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %44, i8 0, i64 24, i1 false) #5
  %48 = ptrtoint i8* %26 to i64
  %49 = bitcast %"class.sh::TIntermNode"*** %46 to i64*
  %50 = bitcast %"class.sh::TVector.9"* %11 to i64*
  %51 = bitcast %"class.sh::TIntermNode"*** %47 to i64*
  %52 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %53 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %52, i64 8) #5
  %54 = bitcast i8* %53 to %"class.sh::TIntermNode"**
  %55 = getelementptr inbounds i8, i8* %53, i64 8
  %56 = ptrtoint i8* %55 to i64
  %57 = bitcast i8* %53 to i64*
  store i64 %48, i64* %57, align 8
  %58 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %45, align 8
  %59 = ptrtoint %"class.sh::TIntermNode"** %58 to i64
  %60 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %46, align 8
  %61 = bitcast %"class.sh::TIntermNode"** %60 to i8*
  %62 = icmp eq %"class.sh::TIntermNode"** %60, %58
  br i1 %62, label %236, label %63

63:                                               ; preds = %24
  %64 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %60, i64 -1
  %65 = ptrtoint %"class.sh::TIntermNode"** %64 to i64
  %66 = sub i64 %65, %59
  %67 = lshr i64 %66, 3
  %68 = add nuw nsw i64 %67, 1
  %69 = icmp ult i64 %68, 4
  br i1 %69, label %166, label %70

70:                                               ; preds = %63
  %71 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %60, i64 -1
  %72 = ptrtoint %"class.sh::TIntermNode"** %71 to i64
  %73 = sub i64 %72, %59
  %74 = lshr i64 %73, 3
  %75 = and i64 %73, -8
  %76 = xor i64 %75, -8
  %77 = getelementptr i8, i8* %53, i64 %76
  %78 = xor i64 %74, -1
  %79 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %60, i64 %78
  %80 = bitcast %"class.sh::TIntermNode"** %79 to i8*
  %81 = icmp ult i8* %77, %61
  %82 = icmp ugt i8* %53, %80
  %83 = and i1 %81, %82
  br i1 %83, label %166, label %84

84:                                               ; preds = %70
  %85 = and i64 %68, 4611686018427387900
  %86 = sub nsw i64 0, %85
  %87 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %54, i64 %86
  %88 = sub nsw i64 0, %85
  %89 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %60, i64 %88
  %90 = add nsw i64 %85, -4
  %91 = lshr exact i64 %90, 2
  %92 = add nuw nsw i64 %91, 1
  %93 = and i64 %92, 1
  %94 = icmp eq i64 %90, 0
  br i1 %94, label %143, label %95

95:                                               ; preds = %84
  %96 = sub nuw nsw i64 %92, %93
  %97 = getelementptr i8, i8* %53, i64 -8
  %98 = bitcast i8* %97 to %"class.sh::TIntermNode"**
  %99 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %60, i64 -1
  %100 = getelementptr i8, i8* %53, i64 -8
  %101 = bitcast i8* %100 to %"class.sh::TIntermNode"**
  %102 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %60, i64 -1
  br label %103

103:                                              ; preds = %103, %95
  %104 = phi i64 [ 0, %95 ], [ %138, %103 ]
  %105 = phi i64 [ %96, %95 ], [ %139, %103 ]
  %106 = sub i64 0, %104
  %107 = sub i64 0, %104
  %108 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %98, i64 %106
  %109 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %99, i64 %107
  %110 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %109, i64 -1
  %111 = bitcast %"class.sh::TIntermNode"** %110 to <2 x i64>*
  %112 = load <2 x i64>, <2 x i64>* %111, align 8, !alias.scope !20
  %113 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %109, i64 -2
  %114 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %113, i64 -1
  %115 = bitcast %"class.sh::TIntermNode"** %114 to <2 x i64>*
  %116 = load <2 x i64>, <2 x i64>* %115, align 8, !alias.scope !20
  %117 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %108, i64 -1
  %118 = bitcast %"class.sh::TIntermNode"** %117 to <2 x i64>*
  store <2 x i64> %112, <2 x i64>* %118, align 8, !alias.scope !23, !noalias !20
  %119 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %108, i64 -2
  %120 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %119, i64 -1
  %121 = bitcast %"class.sh::TIntermNode"** %120 to <2 x i64>*
  store <2 x i64> %116, <2 x i64>* %121, align 8, !alias.scope !23, !noalias !20
  %122 = sub nuw nsw i64 -4, %104
  %123 = sub nuw nsw i64 -4, %104
  %124 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %101, i64 %122
  %125 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %102, i64 %123
  %126 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %125, i64 -1
  %127 = bitcast %"class.sh::TIntermNode"** %126 to <2 x i64>*
  %128 = load <2 x i64>, <2 x i64>* %127, align 8, !alias.scope !20
  %129 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %125, i64 -2
  %130 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %129, i64 -1
  %131 = bitcast %"class.sh::TIntermNode"** %130 to <2 x i64>*
  %132 = load <2 x i64>, <2 x i64>* %131, align 8, !alias.scope !20
  %133 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %124, i64 -1
  %134 = bitcast %"class.sh::TIntermNode"** %133 to <2 x i64>*
  store <2 x i64> %128, <2 x i64>* %134, align 8, !alias.scope !23, !noalias !20
  %135 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %124, i64 -2
  %136 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %135, i64 -1
  %137 = bitcast %"class.sh::TIntermNode"** %136 to <2 x i64>*
  store <2 x i64> %132, <2 x i64>* %137, align 8, !alias.scope !23, !noalias !20
  %138 = add i64 %104, 8
  %139 = add i64 %105, -2
  %140 = icmp eq i64 %139, 0
  br i1 %140, label %141, label %103, !llvm.loop !25

141:                                              ; preds = %103
  %142 = sub nuw nsw i64 -8, %104
  br label %143

143:                                              ; preds = %141, %84
  %144 = phi i64 [ 0, %84 ], [ %142, %141 ]
  %145 = icmp eq i64 %93, 0
  br i1 %145, label %164, label %146

146:                                              ; preds = %143
  %147 = getelementptr i8, i8* %53, i64 -8
  %148 = bitcast i8* %147 to %"class.sh::TIntermNode"**
  %149 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %60, i64 -1
  %150 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %148, i64 %144
  %151 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %149, i64 %144
  %152 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %151, i64 -1
  %153 = bitcast %"class.sh::TIntermNode"** %152 to <2 x i64>*
  %154 = load <2 x i64>, <2 x i64>* %153, align 8, !alias.scope !20
  %155 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %151, i64 -2
  %156 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %155, i64 -1
  %157 = bitcast %"class.sh::TIntermNode"** %156 to <2 x i64>*
  %158 = load <2 x i64>, <2 x i64>* %157, align 8, !alias.scope !20
  %159 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %150, i64 -1
  %160 = bitcast %"class.sh::TIntermNode"** %159 to <2 x i64>*
  store <2 x i64> %154, <2 x i64>* %160, align 8, !alias.scope !23, !noalias !20
  %161 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %150, i64 -2
  %162 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %161, i64 -1
  %163 = bitcast %"class.sh::TIntermNode"** %162 to <2 x i64>*
  store <2 x i64> %158, <2 x i64>* %163, align 8, !alias.scope !23, !noalias !20
  br label %164

164:                                              ; preds = %143, %146
  %165 = icmp eq i64 %68, %85
  br i1 %165, label %236, label %166

166:                                              ; preds = %164, %70, %63
  %167 = phi %"class.sh::TIntermNode"** [ %54, %70 ], [ %54, %63 ], [ %87, %164 ]
  %168 = phi %"class.sh::TIntermNode"** [ %60, %70 ], [ %60, %63 ], [ %89, %164 ]
  %169 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %168, i64 -1
  %170 = ptrtoint %"class.sh::TIntermNode"** %169 to i64
  %171 = sub i64 %170, %59
  %172 = lshr i64 %171, 3
  %173 = add nuw nsw i64 %172, 1
  %174 = and i64 %173, 7
  %175 = icmp eq i64 %174, 0
  br i1 %175, label %187, label %176

176:                                              ; preds = %166, %176
  %177 = phi %"class.sh::TIntermNode"** [ %180, %176 ], [ %167, %166 ]
  %178 = phi %"class.sh::TIntermNode"** [ %181, %176 ], [ %168, %166 ]
  %179 = phi i64 [ %185, %176 ], [ %174, %166 ]
  %180 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %177, i64 -1
  %181 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %178, i64 -1
  %182 = bitcast %"class.sh::TIntermNode"** %181 to i64*
  %183 = load i64, i64* %182, align 8
  %184 = bitcast %"class.sh::TIntermNode"** %180 to i64*
  store i64 %183, i64* %184, align 8
  %185 = add i64 %179, -1
  %186 = icmp eq i64 %185, 0
  br i1 %186, label %187, label %176, !llvm.loop !26

187:                                              ; preds = %176, %166
  %188 = phi %"class.sh::TIntermNode"** [ undef, %166 ], [ %180, %176 ]
  %189 = phi %"class.sh::TIntermNode"** [ %167, %166 ], [ %180, %176 ]
  %190 = phi %"class.sh::TIntermNode"** [ %168, %166 ], [ %181, %176 ]
  %191 = icmp ult i64 %171, 56
  br i1 %191, label %236, label %192

192:                                              ; preds = %187, %192
  %193 = phi %"class.sh::TIntermNode"** [ %230, %192 ], [ %189, %187 ]
  %194 = phi %"class.sh::TIntermNode"** [ %231, %192 ], [ %190, %187 ]
  %195 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %193, i64 -1
  %196 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %194, i64 -1
  %197 = bitcast %"class.sh::TIntermNode"** %196 to i64*
  %198 = load i64, i64* %197, align 8
  %199 = bitcast %"class.sh::TIntermNode"** %195 to i64*
  store i64 %198, i64* %199, align 8
  %200 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %193, i64 -2
  %201 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %194, i64 -2
  %202 = bitcast %"class.sh::TIntermNode"** %201 to i64*
  %203 = load i64, i64* %202, align 8
  %204 = bitcast %"class.sh::TIntermNode"** %200 to i64*
  store i64 %203, i64* %204, align 8
  %205 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %193, i64 -3
  %206 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %194, i64 -3
  %207 = bitcast %"class.sh::TIntermNode"** %206 to i64*
  %208 = load i64, i64* %207, align 8
  %209 = bitcast %"class.sh::TIntermNode"** %205 to i64*
  store i64 %208, i64* %209, align 8
  %210 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %193, i64 -4
  %211 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %194, i64 -4
  %212 = bitcast %"class.sh::TIntermNode"** %211 to i64*
  %213 = load i64, i64* %212, align 8
  %214 = bitcast %"class.sh::TIntermNode"** %210 to i64*
  store i64 %213, i64* %214, align 8
  %215 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %193, i64 -5
  %216 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %194, i64 -5
  %217 = bitcast %"class.sh::TIntermNode"** %216 to i64*
  %218 = load i64, i64* %217, align 8
  %219 = bitcast %"class.sh::TIntermNode"** %215 to i64*
  store i64 %218, i64* %219, align 8
  %220 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %193, i64 -6
  %221 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %194, i64 -6
  %222 = bitcast %"class.sh::TIntermNode"** %221 to i64*
  %223 = load i64, i64* %222, align 8
  %224 = bitcast %"class.sh::TIntermNode"** %220 to i64*
  store i64 %223, i64* %224, align 8
  %225 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %193, i64 -7
  %226 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %194, i64 -7
  %227 = bitcast %"class.sh::TIntermNode"** %226 to i64*
  %228 = load i64, i64* %227, align 8
  %229 = bitcast %"class.sh::TIntermNode"** %225 to i64*
  store i64 %228, i64* %229, align 8
  %230 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %193, i64 -8
  %231 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %194, i64 -8
  %232 = bitcast %"class.sh::TIntermNode"** %231 to i64*
  %233 = load i64, i64* %232, align 8
  %234 = bitcast %"class.sh::TIntermNode"** %230 to i64*
  store i64 %233, i64* %234, align 8
  %235 = icmp eq %"class.sh::TIntermNode"** %231, %58
  br i1 %235, label %236, label %192, !llvm.loop !27

236:                                              ; preds = %187, %192, %164, %24
  %237 = phi %"class.sh::TIntermNode"** [ %54, %24 ], [ %87, %164 ], [ %188, %187 ], [ %230, %192 ]
  %238 = ptrtoint %"class.sh::TIntermNode"** %237 to i64
  store i64 %238, i64* %50, align 8
  store i64 %56, i64* %49, align 8
  store i64 %56, i64* %51, align 8
  %239 = tail call i64 @_ZN2sh32FindFirstFunctionDefinitionIndexEPNS_12TIntermBlockE(%"class.sh::TIntermBlock"* %0) #5
  %240 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %0, i64 0, i32 1
  %241 = call zeroext i1 @_ZN2sh20TIntermAggregateBase16insertChildNodesEmRKNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TIntermAggregateBase"* %240, i64 %239, %"class.sh::TVector.9"* nonnull dereferenceable(24) %11) #5
  %242 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %45, align 8
  %243 = icmp eq %"class.sh::TIntermNode"** %242, null
  br i1 %243, label %247, label %244

244:                                              ; preds = %236
  %245 = ptrtoint %"class.sh::TIntermNode"** %242 to i64
  %246 = bitcast %"class.sh::TIntermNode"*** %46 to i64*
  store i64 %245, i64* %246, align 8
  br label %247

247:                                              ; preds = %236, %244
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %44) #5
  ret %"class.sh::TVariable"* %35
}

declare void @_ZN2sh15TInterfaceBlockC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_7TVectorIPNS_6TFieldEEERKNS_16TLayoutQualifierENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TInterfaceBlock"*, %"class.sh::TSymbolTable"*, %"class.sh::ImmutableString"* dereferenceable(16), %"class.sh::TVector.1"*, %"struct.sh::TLayoutQualifier"* dereferenceable(92), i8 zeroext, i8 zeroext) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare void @_ZN2sh5TTypeC1EPKNS_15TInterfaceBlockENS_10TQualifierENS_16TLayoutQualifierE(%"class.sh::TType"*, %"class.sh::TInterfaceBlock"*, i32, %"struct.sh::TLayoutQualifier"* byval(%"struct.sh::TLayoutQualifier") align 8) unnamed_addr #1

declare void @_ZN2sh5TType9makeArrayEj(%"class.sh::TType"*, i32) local_unnamed_addr #1

declare i64 @_ZN2sh32FindFirstFunctionDefinitionIndexEPNS_12TIntermBlockE(%"class.sh::TIntermBlock"*) local_unnamed_addr #1

declare zeroext i1 @_ZN2sh20TIntermAggregateBase16insertChildNodesEmRKNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TIntermAggregateBase"*, i64, %"class.sh::TVector.9"* dereferenceable(24)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermBlock"* @_ZN2sh11EnsureBlockEPNS_11TIntermNodeE(%"class.sh::TIntermNode"*) local_unnamed_addr #0 {
  %2 = icmp eq %"class.sh::TIntermNode"* %0, null
  br i1 %2, label %21, label %3

3:                                                ; preds = %1
  %4 = bitcast %"class.sh::TIntermNode"* %0 to %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)***
  %5 = load %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*** %4, align 8
  %6 = getelementptr inbounds %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)** %5, i64 8
  %7 = load %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)** %6, align 8
  %8 = tail call %"class.sh::TIntermBlock"* %7(%"class.sh::TIntermNode"* nonnull %0) #5
  %9 = icmp eq %"class.sh::TIntermBlock"* %8, null
  br i1 %9, label %10, label %21

10:                                               ; preds = %3
  %11 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %12 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %11, i64 64) #5
  %13 = bitcast i8* %12 to %"class.sh::TIntermBlock"*
  %14 = bitcast i8* %12 to i32 (...)***
  %15 = getelementptr inbounds i8, i8* %12, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 16, i1 false) #5
  %16 = getelementptr inbounds i8, i8* %12, i64 24
  %17 = bitcast i8* %16 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %14, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %17, align 8
  %18 = getelementptr inbounds i8, i8* %12, i64 32
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 25, i1 false) #5
  %19 = getelementptr inbounds %"class.sh::TIntermNode", %"class.sh::TIntermNode"* %0, i64 0, i32 1
  %20 = bitcast %"struct.sh::TSourceLoc"* %19 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 4 %20, i64 16, i1 false) #5
  tail call void @_ZN2sh12TIntermBlock15appendStatementEPNS_11TIntermNodeE(%"class.sh::TIntermBlock"* %13, %"class.sh::TIntermNode"* nonnull %0) #5
  br label %21

21:                                               ; preds = %10, %3, %1
  %22 = phi %"class.sh::TIntermBlock"* [ null, %1 ], [ %13, %10 ], [ %8, %3 ]
  ret %"class.sh::TIntermBlock"* %22
}

declare void @_ZN2sh12TIntermBlock15appendStatementEPNS_11TIntermNodeE(%"class.sh::TIntermBlock"*, %"class.sh::TIntermNode"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermSymbol"* @_ZN2sh23ReferenceGlobalVariableERKNS_15ImmutableStringERKNS_12TSymbolTableE(%"class.sh::ImmutableString"* dereferenceable(16), %"class.sh::TSymbolTable"* dereferenceable(1720)) local_unnamed_addr #0 {
  %3 = tail call %"class.sh::TSymbol"* @_ZNK2sh12TSymbolTable10findGlobalERKNS_15ImmutableStringE(%"class.sh::TSymbolTable"* %1, %"class.sh::ImmutableString"* dereferenceable(16) %0) #5
  %4 = bitcast %"class.sh::TSymbol"* %3 to %"class.sh::TVariable"*
  %5 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %6 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %5, i64 32) #5
  %7 = bitcast i8* %6 to %"class.sh::TIntermSymbol"*
  tail call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %7, %"class.sh::TVariable"* %4) #5
  ret %"class.sh::TIntermSymbol"* %7
}

declare %"class.sh::TSymbol"* @_ZNK2sh12TSymbolTable10findGlobalERKNS_15ImmutableStringE(%"class.sh::TSymbolTable"*, %"class.sh::ImmutableString"* dereferenceable(16)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermSymbol"* @_ZN2sh24ReferenceBuiltInVariableERKNS_15ImmutableStringERKNS_12TSymbolTableEi(%"class.sh::ImmutableString"* dereferenceable(16), %"class.sh::TSymbolTable"* dereferenceable(1720), i32) local_unnamed_addr #0 {
  %4 = tail call %"class.sh::TSymbol"* @_ZNK2sh12TSymbolTable11findBuiltInERKNS_15ImmutableStringEi(%"class.sh::TSymbolTable"* %1, %"class.sh::ImmutableString"* dereferenceable(16) %0, i32 %2) #5
  %5 = bitcast %"class.sh::TSymbol"* %4 to %"class.sh::TVariable"*
  %6 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %7 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %6, i64 32) #5
  %8 = bitcast i8* %7 to %"class.sh::TIntermSymbol"*
  tail call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %8, %"class.sh::TVariable"* %5) #5
  ret %"class.sh::TIntermSymbol"* %8
}

declare %"class.sh::TSymbol"* @_ZNK2sh12TSymbolTable11findBuiltInERKNS_15ImmutableStringEi(%"class.sh::TSymbolTable"*, %"class.sh::ImmutableString"* dereferenceable(16), i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermTyped"* @_ZN2sh29CreateBuiltInFunctionCallNodeEPKcPNS_7TVectorIPNS_11TIntermNodeEEERKNS_12TSymbolTableEi(i8*, %"class.sh::TVector.9"*, %"class.sh::TSymbolTable"* dereferenceable(1720), i32) local_unnamed_addr #0 {
  %5 = alloca %"class.sh::ImmutableString", align 8
  %6 = bitcast %"class.sh::ImmutableString"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #5
  %7 = tail call { i8*, i64 } @_ZN2sh15TFunctionLookup14GetMangledNameEPKcRKNS_7TVectorIPNS_11TIntermNodeEEE(i8* %0, %"class.sh::TVector.9"* dereferenceable(24) %1) #5
  %8 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %5, i64 0, i32 0
  %9 = extractvalue { i8*, i64 } %7, 0
  store i8* %9, i8** %8, align 8
  %10 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %5, i64 0, i32 1
  %11 = extractvalue { i8*, i64 } %7, 1
  store i64 %11, i64* %10, align 8
  %12 = call %"class.sh::TSymbol"* @_ZNK2sh12TSymbolTable11findBuiltInERKNS_15ImmutableStringEi(%"class.sh::TSymbolTable"* %2, %"class.sh::ImmutableString"* nonnull dereferenceable(16) %5, i32 %3) #5
  %13 = bitcast %"class.sh::TSymbol"* %12 to %"class.sh::TFunction"*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #5
  %14 = getelementptr inbounds %"class.sh::TSymbol", %"class.sh::TSymbol"* %12, i64 3
  %15 = bitcast %"class.sh::TSymbol"* %14 to i8*
  %16 = load i8, i8* %15, align 8
  %17 = icmp eq i8 %16, 3
  br i1 %17, label %44, label %18

18:                                               ; preds = %4
  %19 = getelementptr inbounds %"class.sh::TVector.9", %"class.sh::TVector.9"* %1, i64 0, i32 0, i32 0, i32 1
  %20 = bitcast %"class.sh::TIntermNode"*** %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = bitcast %"class.sh::TVector.9"* %1 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = sub i64 %21, %23
  %25 = icmp eq i64 %24, 8
  br i1 %25, label %26, label %44

26:                                               ; preds = %18
  %27 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #5
  %28 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %27, i64 240) #5
  %29 = load i64, i64* %20, align 8
  %30 = load i64, i64* %22, align 8
  %31 = icmp eq i64 %29, %30
  br i1 %31, label %32, label %34

32:                                               ; preds = %26
  %33 = bitcast %"class.sh::TVector.9"* %1 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* %33) #6
  unreachable

34:                                               ; preds = %26
  %35 = bitcast i8* %28 to %"class.sh::TIntermUnary"*
  %36 = inttoptr i64 %30 to %"class.sh::TIntermNode"**
  %37 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %36, align 8
  %38 = bitcast %"class.sh::TIntermNode"* %37 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %39 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %38, align 8
  %40 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %39, i64 4
  %41 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %40, align 8
  %42 = call %"class.sh::TIntermTyped"* %41(%"class.sh::TIntermNode"* %37) #5
  call void @_ZN2sh12TIntermUnaryC1E9TOperatorPNS_12TIntermTypedEPKNS_9TFunctionE(%"class.sh::TIntermUnary"* %35, i8 zeroext %16, %"class.sh::TIntermTyped"* %42, %"class.sh::TFunction"* %13) #5
  %43 = bitcast i8* %28 to %"class.sh::TIntermTyped"*
  br label %47

44:                                               ; preds = %4, %18
  %45 = call %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate25CreateBuiltInFunctionCallERKNS_9TFunctionEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TFunction"* dereferenceable(80) %13, %"class.sh::TVector.9"* %1) #5
  %46 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %45, i64 0, i32 0, i32 0, i32 0
  br label %47

47:                                               ; preds = %44, %34
  %48 = phi %"class.sh::TIntermTyped"* [ %43, %34 ], [ %46, %44 ]
  ret %"class.sh::TIntermTyped"* %48
}

declare void @_ZN2sh12TIntermUnaryC1E9TOperatorPNS_12TIntermTypedEPKNS_9TFunctionE(%"class.sh::TIntermUnary"*, i8 zeroext, %"class.sh::TIntermTyped"*, %"class.sh::TFunction"*) unnamed_addr #1

declare %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate25CreateBuiltInFunctionCallERKNS_9TFunctionEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TFunction"* dereferenceable(80), %"class.sh::TVector.9"*) local_unnamed_addr #1

declare %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() local_unnamed_addr #1

declare i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"*, i64) local_unnamed_addr #1

declare void @_ZN2sh17TIntermExpressionC2ERKNS_5TTypeE(%"class.sh::TIntermExpression"*, %"class.sh::TType"* dereferenceable(184)) unnamed_addr #1

declare { i8*, i64 } @_ZN2sh15TFunctionLookup14GetMangledNameEPKcRKNS_7TVectorIPNS_11TIntermNodeEEE(i8*, %"class.sh::TVector.9"* dereferenceable(24)) local_unnamed_addr #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
!12 = !{!13}
!13 = distinct !{!13, !14}
!14 = distinct !{!14, !"LVerDomain"}
!15 = !{!16}
!16 = distinct !{!16, !14}
!17 = distinct !{!17, !8}
!18 = distinct !{!18, !10}
!19 = distinct !{!19, !8}
!20 = !{!21}
!21 = distinct !{!21, !22}
!22 = distinct !{!22, !"LVerDomain"}
!23 = !{!24}
!24 = distinct !{!24, !22}
!25 = distinct !{!25, !8}
!26 = distinct !{!26, !10}
!27 = distinct !{!27, !8}
