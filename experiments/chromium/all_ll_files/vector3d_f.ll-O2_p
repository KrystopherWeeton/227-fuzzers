; ModuleID = '../../ui/gfx/geometry/vector3d_f.cc'
source_filename = "../../ui/gfx/geometry/vector3d_f.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.gfx::Vector3dF" = type { float, float, float }

@.str = private unnamed_addr constant [11 x i8] c"[%f %f %f]\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3gfx9Vector3dF8ToStringEv(%"class.std::__1::basic_string"* noalias sret, %"class.gfx::Vector3dF"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %1, i64 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = fpext float %4 to double
  %6 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %1, i64 0, i32 1
  %7 = load float, float* %6, align 4
  %8 = fpext float %7 to double
  %9 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %1, i64 0, i32 2
  %10 = load float, float* %9, align 4
  %11 = fpext float %10 to double
  tail call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret %0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %5, double %8, double %11) #8
  ret void
}

declare void @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret, i8*, ...) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3gfx9Vector3dF6IsZeroEv(%"class.gfx::Vector3dF"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %0, i64 0, i32 0
  %3 = load float, float* %2, align 4
  %4 = fcmp oeq float %3, 0.000000e+00
  br i1 %4, label %5, label %13

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %0, i64 0, i32 1
  %7 = load float, float* %6, align 4
  %8 = fcmp oeq float %7, 0.000000e+00
  br i1 %8, label %9, label %13

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %0, i64 0, i32 2
  %11 = load float, float* %10, align 4
  %12 = fcmp oeq float %11, 0.000000e+00
  br label %13

13:                                               ; preds = %9, %5, %1
  %14 = phi i1 [ false, %5 ], [ false, %1 ], [ %12, %9 ]
  ret i1 %14
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3gfx9Vector3dF3AddERKS0_(%"class.gfx::Vector3dF"* nocapture, %"class.gfx::Vector3dF"* nocapture readonly dereferenceable(12)) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %1, i64 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %0, i64 0, i32 0
  %6 = load float, float* %5, align 4
  %7 = fadd float %4, %6
  store float %7, float* %5, align 4
  %8 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %1, i64 0, i32 1
  %9 = load float, float* %8, align 4
  %10 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %0, i64 0, i32 1
  %11 = load float, float* %10, align 4
  %12 = fadd float %9, %11
  store float %12, float* %10, align 4
  %13 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %1, i64 0, i32 2
  %14 = load float, float* %13, align 4
  %15 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %0, i64 0, i32 2
  %16 = load float, float* %15, align 4
  %17 = fadd float %14, %16
  store float %17, float* %15, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3gfx9Vector3dF8SubtractERKS0_(%"class.gfx::Vector3dF"* nocapture, %"class.gfx::Vector3dF"* nocapture readonly dereferenceable(12)) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %1, i64 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %0, i64 0, i32 0
  %6 = load float, float* %5, align 4
  %7 = fsub float %6, %4
  store float %7, float* %5, align 4
  %8 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %1, i64 0, i32 1
  %9 = load float, float* %8, align 4
  %10 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %0, i64 0, i32 1
  %11 = load float, float* %10, align 4
  %12 = fsub float %11, %9
  store float %12, float* %10, align 4
  %13 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %1, i64 0, i32 2
  %14 = load float, float* %13, align 4
  %15 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %0, i64 0, i32 2
  %16 = load float, float* %15, align 4
  %17 = fsub float %16, %14
  store float %17, float* %15, align 4
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZNK3gfx9Vector3dF13LengthSquaredEv(%"class.gfx::Vector3dF"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %0, i64 0, i32 0
  %3 = load float, float* %2, align 4
  %4 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %0, i64 0, i32 1
  %5 = load float, float* %4, align 4
  %6 = fpext float %5 to double
  %7 = fmul double %6, %6
  %8 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %0, i64 0, i32 2
  %9 = load float, float* %8, align 4
  %10 = insertelement <2 x float> undef, float %3, i32 0
  %11 = insertelement <2 x float> %10, float %9, i32 1
  %12 = fpext <2 x float> %11 to <2 x double>
  %13 = fmul <2 x double> %12, %12
  %14 = extractelement <2 x double> %13, i32 0
  %15 = fadd double %14, %7
  %16 = extractelement <2 x double> %13, i32 1
  %17 = fadd double %15, %16
  ret double %17
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden float @_ZNK3gfx9Vector3dF6LengthEv(%"class.gfx::Vector3dF"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %0, i64 0, i32 0
  %3 = load float, float* %2, align 4
  %4 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %0, i64 0, i32 1
  %5 = load float, float* %4, align 4
  %6 = fpext float %5 to double
  %7 = fmul double %6, %6
  %8 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %0, i64 0, i32 2
  %9 = load float, float* %8, align 4
  %10 = insertelement <2 x float> undef, float %3, i32 0
  %11 = insertelement <2 x float> %10, float %9, i32 1
  %12 = fpext <2 x float> %11 to <2 x double>
  %13 = fmul <2 x double> %12, %12
  %14 = extractelement <2 x double> %13, i32 0
  %15 = fadd double %14, %7
  %16 = extractelement <2 x double> %13, i32 1
  %17 = fadd double %15, %16
  %18 = tail call double @sqrt(double %17) #8
  %19 = fptrunc double %18 to float
  ret float %19
}

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #5

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3gfx9Vector3dF5ScaleEfff(%"class.gfx::Vector3dF"* nocapture, float, float, float) local_unnamed_addr #3 align 2 {
  %5 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %0, i64 0, i32 0
  %6 = load float, float* %5, align 4
  %7 = fmul float %6, %1
  store float %7, float* %5, align 4
  %8 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %0, i64 0, i32 1
  %9 = load float, float* %8, align 4
  %10 = fmul float %9, %2
  store float %10, float* %8, align 4
  %11 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %0, i64 0, i32 2
  %12 = load float, float* %11, align 4
  %13 = fmul float %12, %3
  store float %13, float* %11, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3gfx9Vector3dF5CrossERKS0_(%"class.gfx::Vector3dF"* nocapture, %"class.gfx::Vector3dF"* nocapture readonly dereferenceable(12)) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %0, i64 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = fpext float %4 to double
  %6 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %0, i64 0, i32 1
  %7 = load float, float* %6, align 4
  %8 = fpext float %7 to double
  %9 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %0, i64 0, i32 2
  %10 = load float, float* %9, align 4
  %11 = fpext float %10 to double
  %12 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %1, i64 0, i32 2
  %13 = load float, float* %12, align 4
  %14 = fpext float %13 to double
  %15 = fmul double %8, %14
  %16 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %1, i64 0, i32 1
  %17 = load float, float* %16, align 4
  %18 = fpext float %17 to double
  %19 = fmul double %11, %18
  %20 = fsub double %15, %19
  %21 = fptrunc double %20 to float
  %22 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %1, i64 0, i32 0
  %23 = load float, float* %22, align 4
  %24 = fpext float %23 to double
  %25 = fmul double %11, %24
  %26 = fmul double %5, %14
  %27 = fsub double %25, %26
  %28 = fptrunc double %27 to float
  %29 = fmul double %5, %18
  %30 = fmul double %8, %24
  %31 = fsub double %29, %30
  %32 = fptrunc double %31 to float
  store float %21, float* %3, align 4
  store float %28, float* %6, align 4
  store float %32, float* %9, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK3gfx9Vector3dF13GetNormalizedEPS0_(%"class.gfx::Vector3dF"* nocapture readonly, %"class.gfx::Vector3dF"* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %0, i64 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %0, i64 0, i32 1
  %6 = load float, float* %5, align 4
  %7 = fpext float %6 to double
  %8 = fmul double %7, %7
  %9 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %0, i64 0, i32 2
  %10 = load float, float* %9, align 4
  %11 = insertelement <2 x float> undef, float %4, i32 0
  %12 = insertelement <2 x float> %11, float %10, i32 1
  %13 = fpext <2 x float> %12 to <2 x double>
  %14 = fmul <2 x double> %13, %13
  %15 = extractelement <2 x double> %14, i32 0
  %16 = fadd double %15, %8
  %17 = extractelement <2 x double> %14, i32 1
  %18 = fadd double %16, %17
  %19 = bitcast %"class.gfx::Vector3dF"* %1 to i8*
  %20 = bitcast %"class.gfx::Vector3dF"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %19, i8* align 4 %20, i64 12, i1 false)
  %21 = fcmp olt double %18, 0x3D719799812DEA11
  br i1 %21, label %35, label %22

22:                                               ; preds = %2
  %23 = tail call double @sqrt(double %18) #8
  %24 = fdiv double 1.000000e+00, %23
  %25 = fptrunc double %24 to float
  %26 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %1, i64 0, i32 0
  %27 = load float, float* %26, align 4
  %28 = fmul float %27, %25
  store float %28, float* %26, align 4
  %29 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %1, i64 0, i32 1
  %30 = load float, float* %29, align 4
  %31 = fmul float %30, %25
  store float %31, float* %29, align 4
  %32 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %1, i64 0, i32 2
  %33 = load float, float* %32, align 4
  %34 = fmul float %33, %25
  store float %34, float* %32, align 4
  br label %35

35:                                               ; preds = %2, %22
  %36 = phi i1 [ true, %22 ], [ false, %2 ]
  ret i1 %36
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden float @_ZN3gfx10DotProductERKNS_9Vector3dFES2_(%"class.gfx::Vector3dF"* nocapture readonly dereferenceable(12), %"class.gfx::Vector3dF"* nocapture readonly dereferenceable(12)) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %0, i64 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %1, i64 0, i32 0
  %6 = load float, float* %5, align 4
  %7 = fmul float %4, %6
  %8 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %0, i64 0, i32 1
  %9 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %1, i64 0, i32 1
  %10 = bitcast float* %8 to <2 x float>*
  %11 = load <2 x float>, <2 x float>* %10, align 4
  %12 = bitcast float* %9 to <2 x float>*
  %13 = load <2 x float>, <2 x float>* %12, align 4
  %14 = fmul <2 x float> %11, %13
  %15 = extractelement <2 x float> %14, i32 0
  %16 = fadd float %7, %15
  %17 = extractelement <2 x float> %14, i32 1
  %18 = fadd float %16, %17
  ret float %18
}

; Function Attrs: nounwind ssp uwtable
define hidden { <2 x float>, float } @_ZN3gfx13ScaleVector3dERKNS_9Vector3dFEfff(%"class.gfx::Vector3dF"* nocapture readonly dereferenceable(12), float, float, float) local_unnamed_addr #0 {
  %5 = bitcast %"class.gfx::Vector3dF"* %0 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 4
  %7 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %0, i64 0, i32 2
  %8 = load float, float* %7, align 4
  %9 = insertelement <2 x float> undef, float %1, i32 0
  %10 = insertelement <2 x float> %9, float %2, i32 1
  %11 = fmul <2 x float> %6, %10
  %12 = fmul float %8, %3
  %13 = insertvalue { <2 x float>, float } undef, <2 x float> %11, 0
  %14 = insertvalue { <2 x float>, float } %13, float %12, 1
  ret { <2 x float>, float } %14
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden float @_ZN3gfx28AngleBetweenVectorsInDegreesERKNS_9Vector3dFES2_(%"class.gfx::Vector3dF"* nocapture readonly dereferenceable(12), %"class.gfx::Vector3dF"* nocapture readonly dereferenceable(12)) local_unnamed_addr #4 {
  %3 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %0, i64 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %1, i64 0, i32 0
  %6 = load float, float* %5, align 4
  %7 = fmul float %4, %6
  %8 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %0, i64 0, i32 1
  %9 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %1, i64 0, i32 1
  %10 = bitcast float* %8 to <2 x float>*
  %11 = load <2 x float>, <2 x float>* %10, align 4
  %12 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %1, i64 0, i32 2
  %13 = bitcast float* %9 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 4
  %15 = fmul <2 x float> %11, %14
  %16 = extractelement <2 x float> %15, i32 0
  %17 = fadd float %7, %16
  %18 = extractelement <2 x float> %15, i32 1
  %19 = fadd float %17, %18
  %20 = extractelement <2 x float> %11, i32 0
  %21 = fpext float %20 to double
  %22 = fmul double %21, %21
  %23 = insertelement <2 x float> %11, float %4, i32 0
  %24 = fpext <2 x float> %23 to <2 x double>
  %25 = fmul <2 x double> %24, %24
  %26 = extractelement <2 x double> %25, i32 0
  %27 = fadd double %26, %22
  %28 = extractelement <2 x double> %25, i32 1
  %29 = fadd double %27, %28
  %30 = tail call double @sqrt(double %29) #8
  %31 = fptrunc double %30 to float
  %32 = fdiv float %19, %31
  %33 = load float, float* %5, align 4
  %34 = load float, float* %9, align 4
  %35 = fpext float %34 to double
  %36 = fmul double %35, %35
  %37 = load float, float* %12, align 4
  %38 = insertelement <2 x float> undef, float %33, i32 0
  %39 = insertelement <2 x float> %38, float %37, i32 1
  %40 = fpext <2 x float> %39 to <2 x double>
  %41 = fmul <2 x double> %40, %40
  %42 = extractelement <2 x double> %41, i32 0
  %43 = fadd double %42, %36
  %44 = extractelement <2 x double> %41, i32 1
  %45 = fadd double %43, %44
  %46 = tail call double @sqrt(double %45) #8
  %47 = fptrunc double %46 to float
  %48 = fdiv float %32, %47
  %49 = tail call float @llvm.minnum.f32(float %48, float 1.000000e+00) #8
  %50 = tail call float @llvm.maxnum.f32(float %49, float -1.000000e+00) #8
  %51 = tail call float @acosf(float %50) #8
  %52 = fmul float %51, 1.800000e+02
  %53 = fdiv float %52, 0x400921FB60000000
  ret float %53
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZN3gfx37ClockwiseAngleBetweenVectorsInDegreesERKNS_9Vector3dFES2_S2_(%"class.gfx::Vector3dF"* nocapture readonly dereferenceable(12), %"class.gfx::Vector3dF"* nocapture readonly dereferenceable(12), %"class.gfx::Vector3dF"* nocapture readonly dereferenceable(12)) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %0, i64 0, i32 0
  %5 = load float, float* %4, align 4
  %6 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %1, i64 0, i32 0
  %7 = load float, float* %6, align 4
  %8 = fmul float %5, %7
  %9 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %0, i64 0, i32 1
  %10 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %1, i64 0, i32 1
  %11 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %0, i64 0, i32 2
  %12 = bitcast float* %9 to <2 x float>*
  %13 = load <2 x float>, <2 x float>* %12, align 4
  %14 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %1, i64 0, i32 2
  %15 = bitcast float* %10 to <2 x float>*
  %16 = load <2 x float>, <2 x float>* %15, align 4
  %17 = fmul <2 x float> %13, %16
  %18 = extractelement <2 x float> %17, i32 0
  %19 = fadd float %8, %18
  %20 = extractelement <2 x float> %17, i32 1
  %21 = fadd float %19, %20
  %22 = extractelement <2 x float> %13, i32 0
  %23 = fpext float %22 to double
  %24 = fmul double %23, %23
  %25 = insertelement <2 x float> %13, float %5, i32 0
  %26 = fpext <2 x float> %25 to <2 x double>
  %27 = fmul <2 x double> %26, %26
  %28 = extractelement <2 x double> %27, i32 0
  %29 = fadd double %28, %24
  %30 = extractelement <2 x double> %27, i32 1
  %31 = fadd double %29, %30
  %32 = tail call double @sqrt(double %31) #8
  %33 = fptrunc double %32 to float
  %34 = fdiv float %21, %33
  %35 = load float, float* %6, align 4
  %36 = load float, float* %10, align 4
  %37 = fpext float %36 to double
  %38 = fmul double %37, %37
  %39 = load float, float* %14, align 4
  %40 = insertelement <2 x float> undef, float %35, i32 0
  %41 = insertelement <2 x float> %40, float %39, i32 1
  %42 = fpext <2 x float> %41 to <2 x double>
  %43 = fmul <2 x double> %42, %42
  %44 = extractelement <2 x double> %43, i32 0
  %45 = fadd double %44, %38
  %46 = extractelement <2 x double> %43, i32 1
  %47 = fadd double %45, %46
  %48 = tail call double @sqrt(double %47) #8
  %49 = fptrunc double %48 to float
  %50 = fdiv float %34, %49
  %51 = tail call float @llvm.minnum.f32(float %50, float 1.000000e+00) #8
  %52 = tail call float @llvm.maxnum.f32(float %51, float -1.000000e+00) #8
  %53 = tail call float @acosf(float %52) #8
  %54 = fmul float %53, 1.800000e+02
  %55 = fdiv float %54, 0x400921FB60000000
  %56 = bitcast %"class.gfx::Vector3dF"* %0 to <2 x float>*
  %57 = load <2 x float>, <2 x float>* %56, align 4
  %58 = load float, float* %11, align 4
  %59 = fpext <2 x float> %57 to <2 x double>
  %60 = fpext float %58 to double
  %61 = bitcast float* %10 to <2 x float>*
  %62 = load <2 x float>, <2 x float>* %61, align 4
  %63 = fpext <2 x float> %62 to <2 x double>
  %64 = load float, float* %6, align 4
  %65 = fpext float %64 to double
  %66 = fmul double %60, %65
  %67 = extractelement <2 x double> %59, i32 0
  %68 = extractelement <2 x double> %63, i32 1
  %69 = fmul double %67, %68
  %70 = fsub double %66, %69
  %71 = fptrunc double %70 to float
  %72 = fmul <2 x double> %59, %63
  %73 = extractelement <2 x double> %59, i32 1
  %74 = insertelement <2 x double> undef, double %73, i32 0
  %75 = insertelement <2 x double> %74, double %60, i32 1
  %76 = insertelement <2 x double> undef, double %65, i32 0
  %77 = shufflevector <2 x double> %76, <2 x double> %63, <2 x i32> <i32 0, i32 2>
  %78 = fmul <2 x double> %75, %77
  %79 = fsub <2 x double> %72, %78
  %80 = fptrunc <2 x double> %79 to <2 x float>
  %81 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %2, i64 0, i32 0
  %82 = load float, float* %81, align 4
  %83 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %2, i64 0, i32 1
  %84 = load float, float* %83, align 4
  %85 = fmul float %84, %71
  %86 = getelementptr inbounds %"class.gfx::Vector3dF", %"class.gfx::Vector3dF"* %2, i64 0, i32 2
  %87 = load float, float* %86, align 4
  %88 = insertelement <2 x float> undef, float %87, i32 0
  %89 = insertelement <2 x float> %88, float %82, i32 1
  %90 = fmul <2 x float> %89, %80
  %91 = extractelement <2 x float> %90, i32 1
  %92 = fadd float %91, %85
  %93 = extractelement <2 x float> %90, i32 0
  %94 = fadd float %93, %92
  %95 = fcmp ogt float %94, 0.000000e+00
  %96 = fsub float 3.600000e+02, %55
  %97 = select i1 %95, float %96, float %55
  ret float %97
}

; Function Attrs: nofree nounwind
declare float @acosf(float) local_unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare float @llvm.maxnum.f32(float, float) #7

; Function Attrs: nounwind readnone speculatable
declare float @llvm.minnum.f32(float, float) #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
