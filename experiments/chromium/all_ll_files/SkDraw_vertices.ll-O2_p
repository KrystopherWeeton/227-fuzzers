; ModuleID = '../../third_party/skia/src/core/SkDraw_vertices.cpp'
source_filename = "../../third_party/skia/src/core/SkDraw_vertices.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkPaint = type <{ %class.sk_sp.8, %class.sk_sp.6, %class.sk_sp.9, %class.sk_sp.10, %class.sk_sp.11, %struct.SkRGBA4f.12, float, float, %union.anon, [4 x i8] }>
%class.sk_sp.8 = type { %class.SkPathEffect* }
%class.SkPathEffect = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.sk_sp.6 = type { %class.SkShader* }
%class.SkShader = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.9 = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.10 = type { %class.SkColorFilter* }
%class.SkColorFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.11 = type { %class.SkImageFilter* }
%class.SkImageFilter = type { %class.SkFlattenable.base, [4 x i8] }
%struct.SkRGBA4f.12 = type { float, float, float, float }
%union.anon = type { %struct.anon }
%struct.anon = type { i32 }
%class.SkTriColorShader = type <{ %class.SkShaderBase.base, %struct.Matrix43, %class.SkMatrix, i8, i8, [2 x i8] }>
%class.SkShaderBase.base = type { %class.SkShader.base, %class.SkMatrix }
%class.SkShader.base = type { %class.SkFlattenable.base }
%struct.Matrix43 = type { [12 x float] }
%class.SkMatrix = type { [9 x float], i32 }
%struct.SkPoint = type { float, float }
%struct.SkRGBA4f = type { float, float, float, float }
%class.SkDraw = type { %"class.SkGlyphRunListPainter::BitmapDevicePainter", %class.SkPixmap, %class.SkMatrixProvider*, %class.SkRasterClip*, %class.SkPixmap* }
%"class.SkGlyphRunListPainter::BitmapDevicePainter" = type { i32 (...)** }
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp, i32, i32 }
%class.sk_sp = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.1" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i8 }
%struct.SkISize = type { i32, i32 }
%class.SkMatrixProvider = type { i32 (...)**, %class.SkM44, %class.SkMatrix }
%class.SkM44 = type { [16 x float] }
%class.SkRasterClip = type { %class.SkRegion, %class.SkAAClip, i8, i8, i8, %struct.SkIRect*, %class.sk_sp.6 }
%class.SkRegion = type { %struct.SkIRect, %"struct.SkRegion::RunHead"* }
%struct.SkIRect = type { i32, i32, i32, i32 }
%"struct.SkRegion::RunHead" = type opaque
%class.SkAAClip = type { %struct.SkIRect, %"struct.SkAAClip::RunHead"* }
%"struct.SkAAClip::RunHead" = type opaque
%class.SkVertices = type <{ %class.SkNVRefCnt.7, i32, %struct.SkPoint*, i16*, %struct.SkPoint*, i32*, %struct.SkRect, i32, i32, i32, [4 x i8] }>
%class.SkNVRefCnt.7 = type { %"struct.std::__1::atomic" }
%struct.SkRect = type { float, float, float, float }
%struct.SkPoint3 = type { float, float, float }
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%class.SkFibBlockSizes = type { i32 }
%struct.VertState = type { i32, i32, i32, i32, i32, i16* }
%class.SkRasterPipeline = type { %class.SkArenaAlloc*, %"struct.SkRasterPipeline::StageList"*, i32, i32 }
%"struct.SkRasterPipeline::StageList" = type { %"struct.SkRasterPipeline::StageList"*, i32, i8* }
%struct.SkStageRec = type { %class.SkRasterPipeline*, %class.SkArenaAlloc*, i32, %class.SkColorSpace*, %class.SkPaint*, %class.SkMatrix*, %class.SkMatrixProvider* }
%class.SkSTArenaAlloc = type { %"struct.std::__1::array", %class.SkArenaAlloc.base, [4 x i8] }
%"struct.std::__1::array" = type { [2048 x i8] }
%class.SkArenaAlloc.base = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes }>
%class.SkTLazy = type { [160 x i8], %class.SkPreConcatMatrixProvider* }
%class.SkPreConcatMatrixProvider = type { %class.SkMatrixProvider, %class.SkMatrixProvider*, %class.SkMatrix }
%class.SkShaderBase = type { %class.SkShader.base, %class.SkMatrix, [4 x i8] }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%class.SkBlitter = type { i32 (...)**, %class.SkAutoMalloc }
%class.SkAutoMalloc = type { %"class.std::__1::unique_ptr", i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%class.SkStageUpdater = type { i32 (...)** }
%class.SkSTArenaAlloc.15 = type { %"struct.std::__1::array.16", %class.SkArenaAlloc.base, [4 x i8] }
%"struct.std::__1::array.16" = type { [736 x i8] }
%class.sk_sp.19 = type { %class.SkFlattenable* }
%class.SkFlattenable = type { %class.SkRefCnt.base, [4 x i8] }
%class.SkReadBuffer = type opaque
%class.SkWriteBuffer = type { i32 (...)**, %struct.SkSerialProcs }
%struct.SkSerialProcs = type { void (%class.sk_sp.24*, %class.SkPicture*, i8*)*, i8*, void (%class.sk_sp.24*, %class.SkImage*, i8*)*, i8*, void (%class.sk_sp.24*, %class.SkTypeface*, i8*)*, i8* }
%class.sk_sp.24 = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt.25, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt.25 = type { %"struct.std::__1::atomic" }
%class.SkPicture = type <{ %class.SkRefCnt.base, i32, %"struct.std::__1::atomic.20", [7 x i8] }>
%"struct.std::__1::atomic.20" = type { %"struct.std::__1::__atomic_base.21" }
%"struct.std::__1::__atomic_base.21" = type { %"struct.std::__1::__cxx_atomic_impl.22" }
%"struct.std::__1::__cxx_atomic_impl.22" = type { %"struct.std::__1::__cxx_atomic_base_impl.23" }
%"struct.std::__1::__cxx_atomic_base_impl.23" = type { i8 }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic" }
%class.SkFontStyle = type { i32 }
%"struct.SkShader::GradientInfo" = type { i32, i32*, float*, [2 x %struct.SkPoint], [2 x float], i32, i32 }
%class.SkRuntimeEffect = type opaque
%"class.SkShaderBase::Context" = type <{ i32 (...)**, %class.SkShaderBase*, %class.SkMatrix, %class.SkMatrix, i8, [7 x i8] }>
%"struct.SkShaderBase::ContextRec" = type <{ %class.SkMatrix*, %class.SkMatrix*, i32, [4 x i8], %class.SkColorSpace*, i8, i8, [6 x i8] }>
%"class.skvm::Builder" = type <{ %class.SkTHashMap, %"class.std::__1::vector", %"class.std::__1::vector.33", %"struct.skvm::Features", [6 x i8] }>
%class.SkTHashMap = type { %class.SkTHashTable }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr.26" }
%"class.std::__1::unique_ptr.26" = type { %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"struct.SkTHashTable<SkTHashMap<skvm::Instruction, int, skvm::InstructionHash>::Pair, skvm::Instruction, SkTHashMap<skvm::Instruction, int, skvm::InstructionHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<skvm::Instruction, int, skvm::InstructionHash>::Pair, skvm::Instruction, SkTHashMap<skvm::Instruction, int, skvm::InstructionHash>::Pair>::Slot" = type opaque
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.skvm::Instruction"*, %"struct.skvm::Instruction"*, %"class.std::__1::__compressed_pair.30" }
%"struct.skvm::Instruction" = type { i32, i32, i32, i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"struct.skvm::Instruction"* }
%"class.std::__1::vector.33" = type { %"class.std::__1::__vector_base.34" }
%"class.std::__1::__vector_base.34" = type { i32*, i32*, %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { i32* }
%"struct.skvm::Features" = type { i8, i8 }
%"struct.skvm::Coord" = type { %"struct.skvm::F32", %"struct.skvm::F32" }
%"struct.skvm::F32" = type <{ %"class.skvm::Builder"*, i32, [4 x i8] }>
%"struct.skvm::Color" = type { %"struct.skvm::F32", %"struct.skvm::F32", %"struct.skvm::F32", %"struct.skvm::F32" }
%"struct.skvm::Uniforms" = type { %"struct.skvm::Ptr", %"class.std::__1::vector.33" }
%"struct.skvm::Ptr" = type { i32 }

$_ZZN12SkArenaAlloc4makeIZNS_4makeI16SkTriColorShaderJbRKbEEEPT_DpOT0_EUlPvE_EEDTclfp_LDnEEEOS5_ENUlPcE_8__invokeESE_ = comdat any

$_ZN16SkTriColorShaderD0Ev = comdat any

$_ZNK12SkRefCntBase16internal_disposeEv = comdat any

$_ZNK16SkTriColorShader10getFactoryEv = comdat any

$_ZNK16SkTriColorShader11getTypeNameEv = comdat any

$_ZNK12SkShaderBase18getFlattenableTypeEv = comdat any

$_ZNK16SkTriColorShader8isOpaqueEv = comdat any

$_ZNK12SkShaderBase10isConstantEv = comdat any

$_ZNK12SkShaderBase10onIsAImageEP8SkMatrixP10SkTileMode = comdat any

$_ZNK12SkShaderBase15asRuntimeEffectEv = comdat any

$_ZNK16SkTriColorShader13onMakeContextERKN12SkShaderBase10ContextRecEP12SkArenaAlloc = comdat any

$_ZNK12SkShaderBase18onAsLuminanceColorEPj = comdat any

$_ZNK16SkTriColorShader14onAppendStagesERK10SkStageRec = comdat any

$_ZNK12SkShaderBase23onAppendUpdatableStagesERK10SkStageRec = comdat any

$_ZNK16SkTriColorShader9onProgramEPN4skvm7BuilderENS0_5CoordES3_NS0_5ColorERK16SkMatrixProviderPK8SkMatrixRK11SkColorInfoPNS0_8UniformsEP12SkArenaAlloc = comdat any

$_ZZN12SkArenaAlloc4makeIZNS_4makeI14SkShader_BlendJR11SkBlendMode5sk_spI16SkTriColorShaderES5_I8SkShaderEEEEPT_DpOT0_EUlPvE_EEDTclfp_LDnEEEOSA_ENUlPcE_8__invokeESJ_ = comdat any

$_ZN16SkMatrixProviderD2Ev = comdat any

$_ZN25SkPreConcatMatrixProviderD0Ev = comdat any

$_ZNK25SkPreConcatMatrixProvider16getLocalToMarkerEjP5SkM44 = comdat any

$_ZNK25SkPreConcatMatrixProvider29localToDeviceHitsPixelCentersEv = comdat any

$_ZTV16SkTriColorShader = comdat any

$_ZTV25SkPreConcatMatrixProvider = comdat any

@__const._ZNK6SkDraw19draw_fixed_verticesEPK10SkVertices11SkBlendModeRK7SkPaintRK8SkMatrixPK7SkPointPK8SkPoint3P12SkArenaAlloc.p = private unnamed_addr constant %class.SkPaint <{ %class.sk_sp.8 { %class.SkPathEffect* inttoptr (i64 -6148914691236517206 to %class.SkPathEffect*) }, %class.sk_sp.6 { %class.SkShader* inttoptr (i64 -6148914691236517206 to %class.SkShader*) }, %class.sk_sp.9 { %class.SkMaskFilter* inttoptr (i64 -6148914691236517206 to %class.SkMaskFilter*) }, %class.sk_sp.10 { %class.SkColorFilter* inttoptr (i64 -6148914691236517206 to %class.SkColorFilter*) }, %class.sk_sp.11 { %class.SkImageFilter* inttoptr (i64 -6148914691236517206 to %class.SkImageFilter*) }, %struct.SkRGBA4f.12 { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, %union.anon { %struct.anon { i32 -1431655766 } }, [4 x i8] c"\AA\AA\AA\AA" }>, align 8
@_ZTV16SkTriColorShader = linkonce_odr hidden unnamed_addr constant { [21 x i8*] } { [21 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkShaderBase*)* @_ZN12SkShaderBaseD2Ev to i8*), i8* bitcast (void (%class.SkTriColorShader*)* @_ZN16SkTriColorShaderD0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%class.sk_sp.19*, %class.SkReadBuffer*)* (%class.SkTriColorShader*)* @_ZNK16SkTriColorShader10getFactoryEv to i8*), i8* bitcast (i8* (%class.SkTriColorShader*)* @_ZNK16SkTriColorShader11getTypeNameEv to i8*), i8* bitcast (void (%class.SkShaderBase*, %class.SkWriteBuffer*)* @_ZNK12SkShaderBase7flattenER13SkWriteBuffer to i8*), i8* bitcast (i32 (%class.SkShaderBase*)* @_ZNK12SkShaderBase18getFlattenableTypeEv to i8*), i8* bitcast (i1 (%class.SkTriColorShader*)* @_ZNK16SkTriColorShader8isOpaqueEv to i8*), i8* bitcast (i32 (%class.SkShader*, %"struct.SkShader::GradientInfo"*)* @_ZNK8SkShader11asAGradientEPNS_12GradientInfoE to i8*), i8* bitcast (i1 (%class.SkShaderBase*)* @_ZNK12SkShaderBase10isConstantEv to i8*), i8* bitcast (void ()* @_ZNK12SkShaderBase19asFragmentProcessorERK8GrFPArgs to i8*), i8* bitcast (%class.SkImage* (%class.SkShaderBase*, %class.SkMatrix*, i32*)* @_ZNK12SkShaderBase10onIsAImageEP8SkMatrixP10SkTileMode to i8*), i8* bitcast (%class.SkRuntimeEffect* (%class.SkShaderBase*)* @_ZNK12SkShaderBase15asRuntimeEffectEv to i8*), i8* bitcast (void (%class.sk_sp.6*, %class.SkShaderBase*, %class.SkMatrix*)* @_ZNK12SkShaderBase24makeAsALocalMatrixShaderEP8SkMatrix to i8*), i8* bitcast (%"class.SkShaderBase::Context"* (%class.SkTriColorShader*, %"struct.SkShaderBase::ContextRec"*, %class.SkArenaAlloc*)* @_ZNK16SkTriColorShader13onMakeContextERKN12SkShaderBase10ContextRecEP12SkArenaAlloc to i8*), i8* bitcast (i1 (%class.SkShaderBase*, i32*)* @_ZNK12SkShaderBase18onAsLuminanceColorEPj to i8*), i8* bitcast (i1 (%class.SkTriColorShader*, %struct.SkStageRec*)* @_ZNK16SkTriColorShader14onAppendStagesERK10SkStageRec to i8*), i8* bitcast (%class.SkStageUpdater* (%class.SkShaderBase*, %struct.SkStageRec*)* @_ZNK12SkShaderBase23onAppendUpdatableStagesERK10SkStageRec to i8*), i8* bitcast (void (%"struct.skvm::Color"*, %class.SkTriColorShader*, %"class.skvm::Builder"*, %"struct.skvm::Coord"*, %"struct.skvm::Coord"*, %"struct.skvm::Color"*, %class.SkMatrixProvider*, %class.SkMatrix*, %class.SkColorInfo*, %"struct.skvm::Uniforms"*, %class.SkArenaAlloc*)* @_ZNK16SkTriColorShader9onProgramEPN4skvm7BuilderENS0_5CoordES3_NS0_5ColorERK16SkMatrixProviderPK8SkMatrixRK11SkColorInfoPNS0_8UniformsEP12SkArenaAlloc to i8*)] }, comdat, align 8
@_ZTV14SkShader_Blend = external unnamed_addr constant { [21 x i8*] }, align 8
@_ZTV25SkPreConcatMatrixProvider = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkMatrixProvider*)* @_ZN16SkMatrixProviderD2Ev to i8*), i8* bitcast (void (%class.SkPreConcatMatrixProvider*)* @_ZN25SkPreConcatMatrixProviderD0Ev to i8*), i8* bitcast (i1 (%class.SkPreConcatMatrixProvider*, i32, %class.SkM44*)* @_ZNK25SkPreConcatMatrixProvider16getLocalToMarkerEjP5SkM44 to i8*), i8* bitcast (i1 (%class.SkPreConcatMatrixProvider*)* @_ZNK25SkPreConcatMatrixProvider29localToDeviceHitsPixelCentersEv to i8*)] }, comdat, align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN16SkTriColorShader6updateERK8SkMatrixPK7SkPointPK8SkRGBA4fIL11SkAlphaType2EEiii(%class.SkTriColorShader*, %class.SkMatrix* dereferenceable(40), %struct.SkPoint* nocapture readonly, %struct.SkRGBA4f* nocapture readonly, i32, i32, i32) local_unnamed_addr #0 align 2 {
  %8 = alloca %class.SkMatrix, align 16
  %9 = alloca %class.SkMatrix, align 16
  %10 = bitcast %class.SkMatrix* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %10) #9
  %11 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %8, i64 0, i32 1
  %12 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %8, i64 0, i32 0, i64 0
  %13 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %8, i64 0, i32 0, i64 1
  %14 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %8, i64 0, i32 0, i64 2
  %15 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %8, i64 0, i32 0, i64 3
  %16 = bitcast %class.SkMatrix* %8 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %16, align 16
  %17 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %8, i64 0, i32 0, i64 4
  %18 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %8, i64 0, i32 0, i64 5
  %19 = bitcast float* %17 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %19, align 16
  %20 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %8, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %20, align 16
  store i32 16, i32* %11, align 4
  %21 = bitcast %class.SkMatrix* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %21) #9
  %22 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %9, i64 0, i32 1
  %23 = bitcast %class.SkMatrix* %9 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %23, align 16
  %24 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %9, i64 0, i32 0, i64 4
  %25 = bitcast float* %24 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %25, align 16
  %26 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %9, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %26, align 16
  store i32 16, i32* %22, align 4
  %27 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix5resetEv(%class.SkMatrix* nonnull %8) #9
  %28 = sext i32 %5 to i64
  %29 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 %28, i32 0
  %30 = load float, float* %29, align 4
  %31 = sext i32 %4 to i64
  %32 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 %31, i32 0
  %33 = load float, float* %32, align 4
  %34 = fsub float %30, %33
  store float %34, float* %12, align 16
  %35 = sext i32 %6 to i64
  %36 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 %35, i32 0
  %37 = load float, float* %36, align 4
  %38 = fsub float %37, %33
  store float %38, float* %13, align 4
  store float %33, float* %14, align 8
  %39 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 %28, i32 1
  %40 = load float, float* %39, align 4
  %41 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 %31, i32 1
  %42 = load float, float* %41, align 4
  %43 = fsub float %40, %42
  store float %43, float* %15, align 4
  %44 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 %35, i32 1
  %45 = load float, float* %44, align 4
  %46 = fsub float %45, %42
  store float %46, float* %17, align 16
  store float %42, float* %18, align 4
  store i32 128, i32* %11, align 4
  %47 = call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* nonnull %8) #9
  %48 = zext i8 %47 to i32
  store i32 %48, i32* %11, align 4
  %49 = and i32 %48, 15
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %53

51:                                               ; preds = %7
  %52 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix5resetEv(%class.SkMatrix* nonnull %9) #9
  br label %55

53:                                               ; preds = %7
  %54 = call zeroext i1 @_ZNK8SkMatrix17invertNonIdentityEPS_(%class.SkMatrix* nonnull %8, %class.SkMatrix* nonnull %9) #9
  br i1 %54, label %55, label %116

55:                                               ; preds = %51, %53
  %56 = getelementptr inbounds %class.SkTriColorShader, %class.SkTriColorShader* %0, i64 0, i32 2
  %57 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9setConcatERKS_S1_(%class.SkMatrix* %56, %class.SkMatrix* nonnull dereferenceable(40) %9, %class.SkMatrix* dereferenceable(40) %1) #9
  %58 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %3, i64 %31, i32 0
  %59 = bitcast float* %58 to <4 x float>*
  %60 = load <4 x float>, <4 x float>* %59, align 1
  %61 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %3, i64 %28, i32 0
  %62 = bitcast float* %61 to <4 x float>*
  %63 = load <4 x float>, <4 x float>* %62, align 1
  %64 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %3, i64 %35, i32 0
  %65 = bitcast float* %64 to <4 x float>*
  %66 = load <4 x float>, <4 x float>* %65, align 1
  %67 = fsub <4 x float> %63, %60
  %68 = getelementptr inbounds %class.SkTriColorShader, %class.SkTriColorShader* %0, i64 0, i32 1
  %69 = bitcast %struct.Matrix43* %68 to <4 x float>*
  store <4 x float> %67, <4 x float>* %69, align 1
  %70 = fsub <4 x float> %66, %60
  %71 = getelementptr inbounds %class.SkTriColorShader, %class.SkTriColorShader* %0, i64 0, i32 1, i32 0, i64 4
  %72 = bitcast float* %71 to <4 x float>*
  store <4 x float> %70, <4 x float>* %72, align 1
  %73 = getelementptr inbounds %class.SkTriColorShader, %class.SkTriColorShader* %0, i64 0, i32 1, i32 0, i64 8
  %74 = bitcast float* %73 to <4 x float>*
  store <4 x float> %60, <4 x float>* %74, align 1
  %75 = getelementptr inbounds %class.SkTriColorShader, %class.SkTriColorShader* %0, i64 0, i32 4
  %76 = load i8, i8* %75, align 1, !range !2
  %77 = icmp eq i8 %76, 0
  br i1 %77, label %78, label %116

78:                                               ; preds = %55
  %79 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %56, i64 0, i32 0, i64 0
  %80 = load float, float* %79, align 4
  %81 = getelementptr inbounds %class.SkTriColorShader, %class.SkTriColorShader* %0, i64 0, i32 2, i32 0, i64 3
  %82 = load float, float* %81, align 4
  %83 = insertelement <4 x float> undef, float %80, i32 0
  %84 = shufflevector <4 x float> %83, <4 x float> undef, <4 x i32> zeroinitializer
  %85 = fmul <4 x float> %84, %67
  %86 = insertelement <4 x float> undef, float %82, i32 0
  %87 = shufflevector <4 x float> %86, <4 x float> undef, <4 x i32> zeroinitializer
  %88 = fmul <4 x float> %87, %70
  %89 = fadd <4 x float> %85, %88
  %90 = bitcast %struct.Matrix43* %68 to <4 x float>*
  store <4 x float> %89, <4 x float>* %90, align 4
  %91 = getelementptr inbounds %class.SkTriColorShader, %class.SkTriColorShader* %0, i64 0, i32 2, i32 0, i64 1
  %92 = load float, float* %91, align 4
  %93 = getelementptr inbounds %class.SkTriColorShader, %class.SkTriColorShader* %0, i64 0, i32 2, i32 0, i64 4
  %94 = load float, float* %93, align 4
  %95 = insertelement <4 x float> undef, float %92, i32 0
  %96 = shufflevector <4 x float> %95, <4 x float> undef, <4 x i32> zeroinitializer
  %97 = fmul <4 x float> %96, %67
  %98 = insertelement <4 x float> undef, float %94, i32 0
  %99 = shufflevector <4 x float> %98, <4 x float> undef, <4 x i32> zeroinitializer
  %100 = fmul <4 x float> %99, %70
  %101 = fadd <4 x float> %97, %100
  %102 = bitcast float* %71 to <4 x float>*
  store <4 x float> %101, <4 x float>* %102, align 4
  %103 = getelementptr inbounds %class.SkTriColorShader, %class.SkTriColorShader* %0, i64 0, i32 2, i32 0, i64 2
  %104 = load float, float* %103, align 4
  %105 = getelementptr inbounds %class.SkTriColorShader, %class.SkTriColorShader* %0, i64 0, i32 2, i32 0, i64 5
  %106 = load float, float* %105, align 4
  %107 = insertelement <4 x float> undef, float %104, i32 0
  %108 = shufflevector <4 x float> %107, <4 x float> undef, <4 x i32> zeroinitializer
  %109 = fmul <4 x float> %108, %67
  %110 = insertelement <4 x float> undef, float %106, i32 0
  %111 = shufflevector <4 x float> %110, <4 x float> undef, <4 x i32> zeroinitializer
  %112 = fmul <4 x float> %111, %70
  %113 = fadd <4 x float> %109, %112
  %114 = fadd <4 x float> %113, %60
  %115 = bitcast float* %73 to <4 x float>*
  store <4 x float> %114, <4 x float>* %115, align 4
  br label %116

116:                                              ; preds = %78, %55, %53
  %117 = phi i1 [ false, %53 ], [ true, %55 ], [ true, %78 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %21) #9
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %10) #9
  ret i1 %117
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix5resetEv(%class.SkMatrix*) local_unnamed_addr #2

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9setConcatERKS_S1_(%class.SkMatrix*, %class.SkMatrix* dereferenceable(40), %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6SkDraw19draw_fixed_verticesEPK10SkVertices11SkBlendModeRK7SkPaintRK8SkMatrixPK7SkPointPK8SkPoint3P12SkArenaAlloc(%class.SkDraw*, %class.SkVertices*, i32, %class.SkPaint* dereferenceable(72), %class.SkMatrix* dereferenceable(40), %struct.SkPoint* nocapture readonly, %struct.SkPoint3* readonly, %class.SkArenaAlloc*) local_unnamed_addr #3 align 2 {
  %9 = alloca %struct.SkImageInfo, align 8
  %10 = alloca %class.sk_sp, align 8
  %11 = alloca %struct.SkImageInfo, align 8
  %12 = alloca [3 x %struct.SkPoint], align 16
  %13 = alloca [3 x %struct.SkPoint], align 16
  %14 = alloca %class.SkM44, align 4
  %15 = alloca %class.SkM44, align 4
  %16 = alloca %class.SkMatrix, align 4
  %17 = alloca %struct.VertState, align 8
  %18 = alloca %class.SkPaint, align 8
  %19 = alloca %class.sk_sp.6, align 8
  %20 = alloca %class.sk_sp.6, align 8
  %21 = alloca %class.SkRasterPipeline, align 8
  %22 = alloca %struct.SkStageRec, align 8
  %23 = alloca %class.SkMatrix, align 16
  %24 = alloca %class.sk_sp.6, align 8
  %25 = alloca %class.SkMatrix, align 16
  %26 = alloca %class.SkSTArenaAlloc, align 8
  %27 = alloca %class.SkTLazy, align 8
  %28 = alloca %class.SkMatrix, align 16
  %29 = alloca %class.sk_sp.6, align 8
  %30 = getelementptr inbounds %class.SkVertices, %class.SkVertices* %1, i64 0, i32 7
  %31 = load i32, i32* %30, align 8
  %32 = getelementptr inbounds %class.SkVertices, %class.SkVertices* %1, i64 0, i32 8
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %class.SkVertices, %class.SkVertices* %1, i64 0, i32 2
  %35 = load %struct.SkPoint*, %struct.SkPoint** %34, align 8
  %36 = getelementptr inbounds %class.SkVertices, %class.SkVertices* %1, i64 0, i32 4
  %37 = load %struct.SkPoint*, %struct.SkPoint** %36, align 8
  %38 = getelementptr inbounds %class.SkVertices, %class.SkVertices* %1, i64 0, i32 3
  %39 = load i16*, i16** %38, align 8
  %40 = getelementptr inbounds %class.SkVertices, %class.SkVertices* %1, i64 0, i32 5
  %41 = load i32*, i32** %40, align 8
  %42 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %3, i64 0, i32 1, i32 0
  %43 = load %class.SkShader*, %class.SkShader** %42, align 8
  %44 = icmp eq %class.SkShader* %43, null
  %45 = icmp eq %struct.SkPoint* %37, null
  %46 = select i1 %45, %struct.SkPoint* %35, %struct.SkPoint* %37
  %47 = select i1 %44, %struct.SkPoint* null, %struct.SkPoint* %46
  %48 = icmp ne i32* %41, null
  %49 = icmp ne %struct.SkPoint* %47, null
  %50 = and i1 %48, %49
  br i1 %50, label %51, label %54

51:                                               ; preds = %8
  switch i32 %2, label %54 [
    i32 1, label %52
    i32 2, label %53
  ]

52:                                               ; preds = %51
  br label %54

53:                                               ; preds = %51
  br label %54

54:                                               ; preds = %52, %53, %51, %8
  %55 = phi %struct.SkPoint* [ %47, %51 ], [ null, %53 ], [ %47, %52 ], [ %47, %8 ]
  %56 = phi i32* [ %41, %51 ], [ %41, %53 ], [ null, %52 ], [ %41, %8 ]
  %57 = icmp ne %struct.SkPoint* %55, null
  %58 = select i1 %57, %class.SkShader* %43, %class.SkShader* null
  %59 = bitcast %class.SkMatrix* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %59) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %59, i8 -1, i64 36, i1 false)
  %60 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %16, i64 0, i32 1
  store i32 -1431655766, i32* %60, align 4
  %61 = getelementptr inbounds %class.SkDraw, %class.SkDraw* %0, i64 0, i32 2
  %62 = load %class.SkMatrixProvider*, %class.SkMatrixProvider** %61, align 8
  %63 = getelementptr inbounds %class.SkMatrixProvider, %class.SkMatrixProvider* %62, i64 0, i32 2
  %64 = bitcast %class.SkMatrix* %63 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %59, i8* align 4 %64, i64 40, i1 false)
  %65 = load i32, i32* %60, align 4
  %66 = and i32 %65, 192
  %67 = icmp eq i32 %66, 128
  br i1 %67, label %68, label %71

68:                                               ; preds = %54
  %69 = call zeroext i8 @_ZNK8SkMatrix26computePerspectiveTypeMaskEv(%class.SkMatrix* nonnull %16) #9
  %70 = zext i8 %69 to i32
  store i32 %70, i32* %60, align 4
  br label %71

71:                                               ; preds = %54, %68
  %72 = phi i32 [ %70, %68 ], [ %65, %54 ]
  %73 = lshr i32 %72, 3
  %74 = trunc i32 %73 to i8
  %75 = and i8 %74, 1
  %76 = bitcast %struct.VertState* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %76) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %76, i8 -86, i64 24, i1 false)
  %77 = getelementptr inbounds %struct.VertState, %struct.VertState* %17, i64 0, i32 5
  store i16* %39, i16** %77, align 8
  %78 = getelementptr inbounds %struct.VertState, %struct.VertState* %17, i64 0, i32 4
  store i32 0, i32* %78, align 8
  %79 = icmp eq i16* %39, null
  %80 = getelementptr inbounds %struct.VertState, %struct.VertState* %17, i64 0, i32 3
  %81 = select i1 %79, i32 %31, i32 %33
  store i32 %81, i32* %80, align 4
  %82 = getelementptr inbounds %class.SkVertices, %class.SkVertices* %1, i64 0, i32 9
  %83 = load i32, i32* %82, align 8
  %84 = call i1 (%struct.VertState*)* @_ZN9VertState10chooseProcEN10SkVertices10VertexModeE(%struct.VertState* nonnull %17, i32 %83) #9
  %85 = icmp eq i32* %56, null
  br i1 %85, label %322, label %86

86:                                               ; preds = %71
  %87 = getelementptr inbounds %class.SkDraw, %class.SkDraw* %0, i64 0, i32 1, i32 2, i32 0, i32 0, i32 0
  %88 = load %class.SkColorSpace*, %class.SkColorSpace** %87, align 8
  %89 = bitcast %class.sk_sp* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %89)
  %90 = sext i32 %31 to i64
  %91 = icmp sgt i32 %31, -1
  br i1 %91, label %93, label %92

92:                                               ; preds = %86
  call void @abort() #10
  unreachable

93:                                               ; preds = %86
  %94 = icmp ult i32 %31, 268435456
  br i1 %94, label %96, label %95

95:                                               ; preds = %93
  call void @abort() #10
  unreachable

96:                                               ; preds = %93
  %97 = shl nsw i64 %90, 4
  %98 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %7, i64 0, i32 1
  %99 = bitcast i8** %98 to i64*
  %100 = load i64, i64* %99, align 8
  %101 = sub i64 0, %100
  %102 = and i64 %101, 3
  %103 = and i64 %97, 4294967280
  %104 = or i64 %102, %103
  %105 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %7, i64 0, i32 2
  %106 = bitcast i8** %105 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = sub i64 %107, %100
  %109 = icmp ugt i64 %104, %108
  br i1 %109, label %110, label %115

110:                                              ; preds = %96
  %111 = trunc i64 %97 to i32
  call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %7, i32 %111, i32 4) #9
  %112 = load i64, i64* %99, align 8
  %113 = sub i64 0, %112
  %114 = and i64 %113, 3
  br label %115

115:                                              ; preds = %110, %96
  %116 = phi i64 [ %112, %110 ], [ %100, %96 ]
  %117 = phi i64 [ %114, %110 ], [ %102, %96 ]
  %118 = inttoptr i64 %116 to i8*
  %119 = getelementptr inbounds i8, i8* %118, i64 %117
  %120 = getelementptr inbounds i8, i8* %119, i64 %103
  store i8* %120, i8** %98, align 8
  %121 = bitcast i8* %119 to %struct.SkRGBA4f*
  %122 = icmp eq i32 %31, 0
  br i1 %122, label %124, label %123

123:                                              ; preds = %115
  call void @llvm.memset.p0i8.i64(i8* align 4 %119, i8 0, i64 %97, i1 false) #9
  br label %124

124:                                              ; preds = %123, %115
  %125 = bitcast %struct.SkImageInfo* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %125) #9
  %126 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %9, i64 0, i32 0, i32 0, i32 0
  %127 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %9, i64 0, i32 0, i32 1
  call void @_ZN12SkColorSpace8MakeSRGBEv(%class.sk_sp* nonnull sret %10) #9
  %128 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %10, i64 0, i32 0
  %129 = bitcast %class.sk_sp* %10 to i64*
  %130 = load i64, i64* %129, align 8, !noalias !3
  store %class.SkColorSpace* null, %class.SkColorSpace** %128, align 8, !noalias !3
  %131 = zext i32 %31 to i64
  %132 = or i64 %131, 4294967296
  %133 = bitcast %struct.SkImageInfo* %9 to i64*
  store i64 %130, i64* %133, align 8, !alias.scope !3
  %134 = bitcast i32* %127 to i64*
  store i64 12884901894, i64* %134, align 8, !alias.scope !3
  %135 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %9, i64 0, i32 1
  %136 = bitcast %struct.SkISize* %135 to i64*
  store i64 %132, i64* %136, align 8, !alias.scope !3
  %137 = bitcast %struct.SkImageInfo* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %137) #9
  %138 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %11, i64 0, i32 0, i32 0, i32 0
  %139 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %11, i64 0, i32 0, i32 1
  %140 = icmp eq %class.SkColorSpace* %88, null
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %137, i8 -86, i64 24, i1 false) #9
  br i1 %140, label %144, label %141

141:                                              ; preds = %124
  %142 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %88, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %143 = atomicrmw add i32* %142, i32 1 monotonic, !noalias !6
  br label %144

144:                                              ; preds = %141, %124
  %145 = ptrtoint %class.SkColorSpace* %88 to i64
  %146 = bitcast %struct.SkImageInfo* %11 to i64*
  store i64 %145, i64* %146, align 8, !alias.scope !9
  %147 = bitcast i32* %139 to i64*
  store i64 8589934606, i64* %147, align 8, !alias.scope !9
  %148 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %11, i64 0, i32 1
  %149 = bitcast %struct.SkISize* %148 to i64*
  store i64 %132, i64* %149, align 8, !alias.scope !9
  %150 = bitcast i32* %56 to i8*
  %151 = call zeroext i1 @_Z15SkConvertPixelsRK11SkImageInfoPvmS1_PKvm(%struct.SkImageInfo* nonnull dereferenceable(24) %11, i8* %119, i64 0, %struct.SkImageInfo* nonnull dereferenceable(24) %9, i8* nonnull %150, i64 0) #9
  %152 = load %class.SkColorSpace*, %class.SkColorSpace** %138, align 8
  %153 = icmp eq %class.SkColorSpace* %152, null
  br i1 %153, label %160, label %154

154:                                              ; preds = %144
  %155 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %152, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %156 = atomicrmw add i32* %155, i32 -1 acq_rel
  %157 = icmp eq i32 %156, 1
  br i1 %157, label %158, label %160

158:                                              ; preds = %154
  %159 = bitcast %class.SkColorSpace* %152 to i8*
  call void @_ZdlPv(i8* %159) #11
  br label %160

160:                                              ; preds = %158, %154, %144
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %137) #9
  %161 = load %class.SkColorSpace*, %class.SkColorSpace** %126, align 8
  %162 = icmp eq %class.SkColorSpace* %161, null
  br i1 %162, label %169, label %163

163:                                              ; preds = %160
  %164 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %161, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %165 = atomicrmw add i32* %164, i32 -1 acq_rel
  %166 = icmp eq i32 %165, 1
  br i1 %166, label %167, label %169

167:                                              ; preds = %163
  %168 = bitcast %class.SkColorSpace* %161 to i8*
  call void @_ZdlPv(i8* %168) #11
  br label %169

169:                                              ; preds = %160, %163, %167
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %125) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %89)
  %170 = icmp sgt i32 %31, 0
  br i1 %170, label %171, label %273

171:                                              ; preds = %169
  %172 = icmp ult i32 %31, 8
  br i1 %172, label %173, label %176

173:                                              ; preds = %251, %171
  %174 = phi i64 [ 0, %171 ], [ %177, %251 ]
  %175 = phi i32 [ -1, %171 ], [ %259, %251 ]
  br label %265

176:                                              ; preds = %171
  %177 = and i64 %131, 4294967288
  %178 = add nsw i64 %177, -8
  %179 = lshr exact i64 %178, 3
  %180 = add nuw nsw i64 %179, 1
  %181 = and i64 %180, 3
  %182 = icmp ult i64 %178, 24
  br i1 %182, label %228, label %183

183:                                              ; preds = %176
  %184 = sub nsw i64 %180, %181
  br label %185

185:                                              ; preds = %185, %183
  %186 = phi i64 [ 0, %183 ], [ %225, %185 ]
  %187 = phi <4 x i32> [ <i32 -1, i32 -1, i32 -1, i32 -1>, %183 ], [ %223, %185 ]
  %188 = phi <4 x i32> [ <i32 -1, i32 -1, i32 -1, i32 -1>, %183 ], [ %224, %185 ]
  %189 = phi i64 [ %184, %183 ], [ %226, %185 ]
  %190 = getelementptr inbounds i32, i32* %56, i64 %186
  %191 = bitcast i32* %190 to <4 x i32>*
  %192 = load <4 x i32>, <4 x i32>* %191, align 4
  %193 = getelementptr inbounds i32, i32* %190, i64 4
  %194 = bitcast i32* %193 to <4 x i32>*
  %195 = load <4 x i32>, <4 x i32>* %194, align 4
  %196 = and <4 x i32> %192, %187
  %197 = and <4 x i32> %195, %188
  %198 = or i64 %186, 8
  %199 = getelementptr inbounds i32, i32* %56, i64 %198
  %200 = bitcast i32* %199 to <4 x i32>*
  %201 = load <4 x i32>, <4 x i32>* %200, align 4
  %202 = getelementptr inbounds i32, i32* %199, i64 4
  %203 = bitcast i32* %202 to <4 x i32>*
  %204 = load <4 x i32>, <4 x i32>* %203, align 4
  %205 = and <4 x i32> %201, %196
  %206 = and <4 x i32> %204, %197
  %207 = or i64 %186, 16
  %208 = getelementptr inbounds i32, i32* %56, i64 %207
  %209 = bitcast i32* %208 to <4 x i32>*
  %210 = load <4 x i32>, <4 x i32>* %209, align 4
  %211 = getelementptr inbounds i32, i32* %208, i64 4
  %212 = bitcast i32* %211 to <4 x i32>*
  %213 = load <4 x i32>, <4 x i32>* %212, align 4
  %214 = and <4 x i32> %210, %205
  %215 = and <4 x i32> %213, %206
  %216 = or i64 %186, 24
  %217 = getelementptr inbounds i32, i32* %56, i64 %216
  %218 = bitcast i32* %217 to <4 x i32>*
  %219 = load <4 x i32>, <4 x i32>* %218, align 4
  %220 = getelementptr inbounds i32, i32* %217, i64 4
  %221 = bitcast i32* %220 to <4 x i32>*
  %222 = load <4 x i32>, <4 x i32>* %221, align 4
  %223 = and <4 x i32> %219, %214
  %224 = and <4 x i32> %222, %215
  %225 = add i64 %186, 32
  %226 = add i64 %189, -4
  %227 = icmp eq i64 %226, 0
  br i1 %227, label %228, label %185, !llvm.loop !12

228:                                              ; preds = %185, %176
  %229 = phi <4 x i32> [ undef, %176 ], [ %223, %185 ]
  %230 = phi <4 x i32> [ undef, %176 ], [ %224, %185 ]
  %231 = phi i64 [ 0, %176 ], [ %225, %185 ]
  %232 = phi <4 x i32> [ <i32 -1, i32 -1, i32 -1, i32 -1>, %176 ], [ %223, %185 ]
  %233 = phi <4 x i32> [ <i32 -1, i32 -1, i32 -1, i32 -1>, %176 ], [ %224, %185 ]
  %234 = icmp eq i64 %181, 0
  br i1 %234, label %251, label %235

235:                                              ; preds = %228, %235
  %236 = phi i64 [ %248, %235 ], [ %231, %228 ]
  %237 = phi <4 x i32> [ %246, %235 ], [ %232, %228 ]
  %238 = phi <4 x i32> [ %247, %235 ], [ %233, %228 ]
  %239 = phi i64 [ %249, %235 ], [ %181, %228 ]
  %240 = getelementptr inbounds i32, i32* %56, i64 %236
  %241 = bitcast i32* %240 to <4 x i32>*
  %242 = load <4 x i32>, <4 x i32>* %241, align 4
  %243 = getelementptr inbounds i32, i32* %240, i64 4
  %244 = bitcast i32* %243 to <4 x i32>*
  %245 = load <4 x i32>, <4 x i32>* %244, align 4
  %246 = and <4 x i32> %242, %237
  %247 = and <4 x i32> %245, %238
  %248 = add i64 %236, 8
  %249 = add i64 %239, -1
  %250 = icmp eq i64 %249, 0
  br i1 %250, label %251, label %235, !llvm.loop !14

251:                                              ; preds = %235, %228
  %252 = phi <4 x i32> [ %229, %228 ], [ %246, %235 ]
  %253 = phi <4 x i32> [ %230, %228 ], [ %247, %235 ]
  %254 = and <4 x i32> %253, %252
  %255 = shufflevector <4 x i32> %254, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %256 = and <4 x i32> %254, %255
  %257 = shufflevector <4 x i32> %256, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %258 = and <4 x i32> %256, %257
  %259 = extractelement <4 x i32> %258, i32 0
  %260 = icmp eq i64 %177, %131
  br i1 %260, label %261, label %173

261:                                              ; preds = %265, %251
  %262 = phi i32 [ %259, %251 ], [ %270, %265 ]
  %263 = icmp ugt i32 %262, -16777217
  %264 = zext i1 %263 to i8
  br label %273

265:                                              ; preds = %173, %265
  %266 = phi i64 [ %271, %265 ], [ %174, %173 ]
  %267 = phi i32 [ %270, %265 ], [ %175, %173 ]
  %268 = getelementptr inbounds i32, i32* %56, i64 %266
  %269 = load i32, i32* %268, align 4
  %270 = and i32 %269, %267
  %271 = add nuw nsw i64 %266, 1
  %272 = icmp eq i64 %271, %131
  br i1 %272, label %261, label %265, !llvm.loop !16

273:                                              ; preds = %169, %261
  %274 = phi i8 [ 1, %169 ], [ %264, %261 ]
  %275 = call i8* @_ZN12SkArenaAlloc21allocObjectWithFooterEjj(%class.SkArenaAlloc* %7, i32 153, i32 8) #9
  %276 = load i64, i64* %99, align 8
  %277 = ptrtoint i8* %275 to i64
  %278 = sub i64 %277, %276
  %279 = trunc i64 %278 to i32
  %280 = getelementptr inbounds i8, i8* %275, i64 144
  store i8* %280, i8** %98, align 8
  call void @_ZN12SkArenaAlloc13installFooterEPFPcS0_Ej(%class.SkArenaAlloc* %7, i8* (i8*)* nonnull @_ZZN12SkArenaAlloc4makeIZNS_4makeI16SkTriColorShaderJbRKbEEEPT_DpOT0_EUlPvE_EEDTclfp_LDnEEEOS5_ENUlPcE_8__invokeESE_, i32 %279) #9
  %281 = bitcast i8* %275 to %class.SkTriColorShader*
  %282 = bitcast i8* %275 to %class.SkShaderBase*
  call void @_ZN12SkShaderBaseC2EPK8SkMatrix(%class.SkShaderBase* %282, %class.SkMatrix* null) #9
  %283 = bitcast i8* %275 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [21 x i8*] }, { [21 x i8*] }* @_ZTV16SkTriColorShader, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %283, align 8
  %284 = getelementptr inbounds i8, i8* %275, i64 100
  %285 = bitcast i8* %284 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %285, align 4
  %286 = getelementptr inbounds i8, i8* %275, i64 116
  %287 = bitcast i8* %286 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %287, align 4
  %288 = getelementptr inbounds i8, i8* %275, i64 132
  %289 = bitcast i8* %288 to float*
  store float 1.000000e+00, float* %289, align 4
  %290 = getelementptr inbounds i8, i8* %275, i64 136
  %291 = bitcast i8* %290 to i32*
  store i32 16, i32* %291, align 4
  %292 = getelementptr inbounds i8, i8* %275, i64 140
  store i8 %274, i8* %292, align 4
  %293 = getelementptr inbounds i8, i8* %275, i64 141
  store i8 %75, i8* %293, align 1
  %294 = icmp eq %class.SkShader* %58, null
  br i1 %294, label %320, label %295

295:                                              ; preds = %273
  %296 = icmp eq i8* %275, null
  br i1 %296, label %301, label %297

297:                                              ; preds = %295
  %298 = getelementptr inbounds i8, i8* %275, i64 8
  %299 = bitcast i8* %298 to i32*
  %300 = atomicrmw add i32* %299, i32 1 monotonic, !noalias !18
  br label %301

301:                                              ; preds = %295, %297
  %302 = getelementptr inbounds %class.SkShader, %class.SkShader* %58, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %303 = atomicrmw add i32* %302, i32 1 monotonic, !noalias !21
  %304 = ptrtoint %class.SkShader* %58 to i64
  %305 = call i8* @_ZN12SkArenaAlloc21allocObjectWithFooterEjj(%class.SkArenaAlloc* %7, i32 89, i32 8) #9
  %306 = load i64, i64* %99, align 8
  %307 = ptrtoint i8* %305 to i64
  %308 = sub i64 %307, %306
  %309 = trunc i64 %308 to i32
  %310 = getelementptr inbounds i8, i8* %305, i64 80
  store i8* %310, i8** %98, align 8
  call void @_ZN12SkArenaAlloc13installFooterEPFPcS0_Ej(%class.SkArenaAlloc* %7, i8* (i8*)* nonnull @_ZZN12SkArenaAlloc4makeIZNS_4makeI14SkShader_BlendJR11SkBlendMode5sk_spI16SkTriColorShaderES5_I8SkShaderEEEEPT_DpOT0_EUlPvE_EEDTclfp_LDnEEEOSA_ENUlPcE_8__invokeESJ_, i32 %309) #9
  %311 = bitcast i8* %305 to %class.SkShaderBase*
  call void @_ZN12SkShaderBaseC2EPK8SkMatrix(%class.SkShaderBase* %311, %class.SkMatrix* null) #9
  %312 = bitcast i8* %305 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [21 x i8*] }, { [21 x i8*] }* @_ZTV14SkShader_Blend, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %312, align 8
  %313 = getelementptr inbounds i8, i8* %305, i64 56
  %314 = bitcast i8* %313 to i64*
  store i64 %277, i64* %314, align 8
  %315 = getelementptr inbounds i8, i8* %305, i64 64
  %316 = bitcast i8* %315 to i64*
  store i64 %304, i64* %316, align 8
  %317 = getelementptr inbounds i8, i8* %305, i64 72
  %318 = bitcast i8* %317 to i32*
  store i32 %2, i32* %318, align 8
  %319 = bitcast i8* %305 to %class.SkShader*
  br label %322

320:                                              ; preds = %273
  %321 = bitcast i8* %275 to %class.SkShader*
  br label %322

322:                                              ; preds = %71, %301, %320
  %323 = phi %class.SkShader* [ %319, %301 ], [ %321, %320 ], [ %58, %71 ]
  %324 = phi %class.SkTriColorShader* [ %281, %301 ], [ %281, %320 ], [ null, %71 ]
  %325 = phi %struct.SkRGBA4f* [ %121, %301 ], [ %121, %320 ], [ null, %71 ]
  %326 = bitcast %class.SkPaint* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %326) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %326, i8* align 8 bitcast (%class.SkPaint* @__const._ZNK6SkDraw19draw_fixed_verticesEPK10SkVertices11SkBlendModeRK7SkPaintRK8SkMatrixPK7SkPointPK8SkPoint3P12SkArenaAlloc.p to i8*), i64 72, i1 false)
  call void @_ZN7SkPaintC1ERKS_(%class.SkPaint* nonnull %18, %class.SkPaint* dereferenceable(72) %3) #9
  %327 = icmp eq %class.SkShader* %323, null
  br i1 %327, label %331, label %328

328:                                              ; preds = %322
  %329 = getelementptr inbounds %class.SkShader, %class.SkShader* %323, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %330 = atomicrmw add i32* %329, i32 1 monotonic, !noalias !24
  br label %331

331:                                              ; preds = %322, %328
  %332 = getelementptr inbounds %class.sk_sp.6, %class.sk_sp.6* %19, i64 0, i32 0
  store %class.SkShader* %323, %class.SkShader** %332, align 8, !alias.scope !24
  call void @_ZN7SkPaint9setShaderE5sk_spI8SkShaderE(%class.SkPaint* nonnull %18, %class.sk_sp.6* nonnull %19) #9
  %333 = load %class.SkShader*, %class.SkShader** %332, align 8
  %334 = icmp eq %class.SkShader* %333, null
  br i1 %334, label %345, label %335

335:                                              ; preds = %331
  %336 = getelementptr inbounds %class.SkShader, %class.SkShader* %333, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %337 = atomicrmw add i32* %336, i32 -1 acq_rel
  %338 = icmp eq i32 %337, 1
  br i1 %338, label %339, label %345

339:                                              ; preds = %335
  %340 = bitcast %class.SkShader* %333 to %class.SkRefCntBase*
  %341 = bitcast %class.SkShader* %333 to void (%class.SkRefCntBase*)***
  %342 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %341, align 8
  %343 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %342, i64 2
  %344 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %343, align 8
  call void %344(%class.SkRefCntBase* nonnull %340) #9
  br label %345

345:                                              ; preds = %331, %335, %339
  br i1 %57, label %391, label %346

346:                                              ; preds = %345
  %347 = getelementptr inbounds %class.SkDraw, %class.SkDraw* %0, i64 0, i32 1
  %348 = load %class.SkMatrixProvider*, %class.SkMatrixProvider** %61, align 8
  %349 = getelementptr inbounds %class.SkDraw, %class.SkDraw* %0, i64 0, i32 3
  %350 = load %class.SkRasterClip*, %class.SkRasterClip** %349, align 8
  %351 = getelementptr inbounds %class.sk_sp.6, %class.sk_sp.6* %20, i64 0, i32 0
  %352 = getelementptr inbounds %class.SkRasterClip, %class.SkRasterClip* %350, i64 0, i32 6, i32 0
  %353 = load %class.SkShader*, %class.SkShader** %352, align 8, !noalias !27
  %354 = icmp eq %class.SkShader* %353, null
  br i1 %354, label %358, label %355

355:                                              ; preds = %346
  %356 = getelementptr inbounds %class.SkShader, %class.SkShader* %353, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %357 = atomicrmw add i32* %356, i32 1 monotonic, !noalias !27
  br label %358

358:                                              ; preds = %346, %355
  store %class.SkShader* %353, %class.SkShader** %351, align 8, !alias.scope !27
  %359 = call %class.SkBlitter* @_Z29SkCreateRasterPipelineBlitterRK8SkPixmapRK7SkPaintRK16SkMatrixProviderP12SkArenaAlloc5sk_spI8SkShaderE(%class.SkPixmap* dereferenceable(40) %347, %class.SkPaint* nonnull dereferenceable(72) %18, %class.SkMatrixProvider* dereferenceable(112) %348, %class.SkArenaAlloc* %7, %class.sk_sp.6* nonnull %20) #9
  %360 = load %class.SkShader*, %class.SkShader** %351, align 8
  %361 = icmp eq %class.SkShader* %360, null
  br i1 %361, label %372, label %362

362:                                              ; preds = %358
  %363 = getelementptr inbounds %class.SkShader, %class.SkShader* %360, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %364 = atomicrmw add i32* %363, i32 -1 acq_rel
  %365 = icmp eq i32 %364, 1
  br i1 %365, label %366, label %372

366:                                              ; preds = %362
  %367 = bitcast %class.SkShader* %360 to %class.SkRefCntBase*
  %368 = bitcast %class.SkShader* %360 to void (%class.SkRefCntBase*)***
  %369 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %368, align 8
  %370 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %369, i64 2
  %371 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %370, align 8
  call void %371(%class.SkRefCntBase* nonnull %367) #9
  br label %372

372:                                              ; preds = %358, %362, %366
  %373 = icmp eq %class.SkBlitter* %359, null
  br i1 %373, label %756, label %374

374:                                              ; preds = %372
  %375 = call zeroext i1 %84(%struct.VertState* nonnull %17) #9
  br i1 %375, label %376, label %756

376:                                              ; preds = %374
  %377 = icmp eq %class.SkTriColorShader* %324, null
  %378 = getelementptr inbounds %struct.VertState, %struct.VertState* %17, i64 0, i32 0
  %379 = getelementptr inbounds %struct.VertState, %struct.VertState* %17, i64 0, i32 1
  %380 = getelementptr inbounds %struct.VertState, %struct.VertState* %17, i64 0, i32 2
  br label %381

381:                                              ; preds = %376, %389
  br i1 %377, label %387, label %382

382:                                              ; preds = %381
  %383 = load i32, i32* %378, align 8
  %384 = load i32, i32* %379, align 4
  %385 = load i32, i32* %380, align 8
  %386 = call zeroext i1 @_ZN16SkTriColorShader6updateERK8SkMatrixPK7SkPointPK8SkRGBA4fIL11SkAlphaType2EEiii(%class.SkTriColorShader* nonnull %324, %class.SkMatrix* dereferenceable(40) %4, %struct.SkPoint* %35, %struct.SkRGBA4f* %325, i32 %383, i32 %384, i32 %385)
  br i1 %386, label %387, label %389

387:                                              ; preds = %381, %382
  %388 = load %class.SkRasterClip*, %class.SkRasterClip** %349, align 8
  call fastcc void @_ZL13fill_triangleRK9VertStateP9SkBlitterRK12SkRasterClipPK7SkPointPK8SkPoint3(%struct.VertState* nonnull dereferenceable(32) %17, %class.SkBlitter* nonnull %359, %class.SkRasterClip* dereferenceable(72) %388, %struct.SkPoint* %5, %struct.SkPoint3* %6)
  br label %389

389:                                              ; preds = %387, %382
  %390 = call zeroext i1 %84(%struct.VertState* nonnull %17) #9
  br i1 %390, label %381, label %756

391:                                              ; preds = %345
  %392 = bitcast %class.SkRasterPipeline* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %392) #9
  %393 = bitcast %class.SkRasterPipeline* %21 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %393, i8 -86, i64 24, i1 false)
  call void @_ZN16SkRasterPipelineC1EP12SkArenaAlloc(%class.SkRasterPipeline* nonnull %21, %class.SkArenaAlloc* %7) #9
  %394 = bitcast %struct.SkStageRec* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %394) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %394, i8 -86, i64 24, i1 false)
  %395 = getelementptr inbounds %struct.SkStageRec, %struct.SkStageRec* %22, i64 0, i32 0
  store %class.SkRasterPipeline* %21, %class.SkRasterPipeline** %395, align 8
  %396 = getelementptr inbounds %struct.SkStageRec, %struct.SkStageRec* %22, i64 0, i32 1
  store %class.SkArenaAlloc* %7, %class.SkArenaAlloc** %396, align 8
  %397 = getelementptr inbounds %struct.SkStageRec, %struct.SkStageRec* %22, i64 0, i32 2
  %398 = getelementptr inbounds %class.SkDraw, %class.SkDraw* %0, i64 0, i32 1
  %399 = getelementptr inbounds %class.SkDraw, %class.SkDraw* %0, i64 0, i32 1, i32 2, i32 0, i32 1
  %400 = load i32, i32* %399, align 8
  store i32 %400, i32* %397, align 8
  %401 = getelementptr inbounds %struct.SkStageRec, %struct.SkStageRec* %22, i64 0, i32 3
  %402 = getelementptr inbounds %class.SkDraw, %class.SkDraw* %0, i64 0, i32 1, i32 2, i32 0, i32 0, i32 0
  %403 = bitcast %class.SkColorSpace** %402 to i64*
  %404 = load i64, i64* %403, align 8
  %405 = bitcast %class.SkColorSpace** %401 to i64*
  store i64 %404, i64* %405, align 8
  %406 = getelementptr inbounds %struct.SkStageRec, %struct.SkStageRec* %22, i64 0, i32 4
  store %class.SkPaint* %18, %class.SkPaint** %406, align 8
  %407 = getelementptr inbounds %struct.SkStageRec, %struct.SkStageRec* %22, i64 0, i32 5
  store %class.SkMatrix* null, %class.SkMatrix** %407, align 8
  %408 = getelementptr inbounds %struct.SkStageRec, %struct.SkStageRec* %22, i64 0, i32 6
  %409 = bitcast %class.SkMatrixProvider** %61 to i64*
  %410 = load i64, i64* %409, align 8
  %411 = bitcast %class.SkMatrixProvider** %408 to i64*
  store i64 %410, i64* %411, align 8
  %412 = bitcast %class.SkShader* %323 to %class.SkShaderBase*
  %413 = bitcast %class.SkShader* %323 to %class.SkStageUpdater* (%class.SkShaderBase*, %struct.SkStageRec*)***
  %414 = load %class.SkStageUpdater* (%class.SkShaderBase*, %struct.SkStageRec*)**, %class.SkStageUpdater* (%class.SkShaderBase*, %struct.SkStageRec*)*** %413, align 8
  %415 = getelementptr inbounds %class.SkStageUpdater* (%class.SkShaderBase*, %struct.SkStageRec*)*, %class.SkStageUpdater* (%class.SkShaderBase*, %struct.SkStageRec*)** %414, i64 17
  %416 = load %class.SkStageUpdater* (%class.SkShaderBase*, %struct.SkStageRec*)*, %class.SkStageUpdater* (%class.SkShaderBase*, %struct.SkStageRec*)** %415, align 8
  %417 = call %class.SkStageUpdater* %416(%class.SkShaderBase* %412, %struct.SkStageRec* nonnull dereferenceable(56) %22) #9
  %418 = icmp eq %class.SkStageUpdater* %417, null
  br i1 %418, label %419, label %537

419:                                              ; preds = %391
  %420 = call zeroext i1 %84(%struct.VertState* nonnull %17) #9
  br i1 %420, label %421, label %755

421:                                              ; preds = %419
  %422 = icmp eq %class.SkTriColorShader* %324, null
  %423 = getelementptr inbounds %struct.VertState, %struct.VertState* %17, i64 0, i32 0
  %424 = getelementptr inbounds %struct.VertState, %struct.VertState* %17, i64 0, i32 1
  %425 = getelementptr inbounds %struct.VertState, %struct.VertState* %17, i64 0, i32 2
  %426 = getelementptr inbounds %class.SkSTArenaAlloc, %class.SkSTArenaAlloc* %26, i64 0, i32 0, i32 0, i64 0
  %427 = getelementptr inbounds %class.SkSTArenaAlloc, %class.SkSTArenaAlloc* %26, i64 0, i32 0, i32 0, i64 2048
  %428 = bitcast i8* %427 to %class.SkArenaAlloc*
  %429 = getelementptr inbounds %class.SkTLazy, %class.SkTLazy* %27, i64 0, i32 0, i64 0
  %430 = getelementptr inbounds %class.SkTLazy, %class.SkTLazy* %27, i64 0, i32 1
  %431 = icmp eq %struct.SkPoint* %55, %35
  %432 = bitcast %class.SkMatrix* %28 to i8*
  %433 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %28, i64 0, i32 1
  %434 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %28, i64 0, i32 0, i64 1
  %435 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %28, i64 0, i32 0, i64 2
  %436 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %28, i64 0, i32 0, i64 3
  %437 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %28, i64 0, i32 0, i64 4
  %438 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %28, i64 0, i32 0, i64 5
  %439 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %28, i64 0, i32 0, i64 6
  %440 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %28, i64 0, i32 0, i64 7
  %441 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %28, i64 0, i32 0, i64 8
  %442 = bitcast [3 x %struct.SkPoint]* %12 to i8*
  %443 = getelementptr inbounds [3 x %struct.SkPoint], [3 x %struct.SkPoint]* %12, i64 0, i64 0
  %444 = getelementptr inbounds [3 x %struct.SkPoint], [3 x %struct.SkPoint]* %12, i64 0, i64 1
  %445 = getelementptr inbounds [3 x %struct.SkPoint], [3 x %struct.SkPoint]* %12, i64 0, i64 2
  %446 = bitcast [3 x %struct.SkPoint]* %13 to i8*
  %447 = getelementptr inbounds [3 x %struct.SkPoint], [3 x %struct.SkPoint]* %13, i64 0, i64 0
  %448 = getelementptr inbounds [3 x %struct.SkPoint], [3 x %struct.SkPoint]* %13, i64 0, i64 1
  %449 = getelementptr inbounds [3 x %struct.SkPoint], [3 x %struct.SkPoint]* %13, i64 0, i64 2
  %450 = bitcast [3 x %struct.SkPoint]* %12 to i64*
  %451 = bitcast %struct.SkPoint* %444 to i64*
  %452 = bitcast %struct.SkPoint* %445 to i64*
  %453 = bitcast [3 x %struct.SkPoint]* %13 to i64*
  %454 = bitcast %struct.SkPoint* %448 to i64*
  %455 = bitcast %struct.SkPoint* %449 to i64*
  %456 = bitcast %class.SkM44* %14 to i8*
  %457 = bitcast %class.SkM44* %15 to i8*
  %458 = bitcast %class.SkMatrix* %28 to i32*
  %459 = bitcast float* %434 to i32*
  %460 = bitcast float* %435 to i32*
  %461 = bitcast float* %436 to i32*
  %462 = bitcast float* %437 to i32*
  %463 = bitcast float* %438 to i32*
  %464 = bitcast float* %439 to i32*
  %465 = bitcast float* %440 to i32*
  %466 = bitcast float* %441 to i32*
  %467 = bitcast %class.SkM44* %15 to i32*
  %468 = getelementptr inbounds %class.SkM44, %class.SkM44* %15, i64 0, i32 0, i64 1
  %469 = bitcast float* %468 to i32*
  %470 = getelementptr inbounds %class.SkM44, %class.SkM44* %15, i64 0, i32 0, i64 2
  %471 = getelementptr inbounds %class.SkM44, %class.SkM44* %15, i64 0, i32 0, i64 3
  %472 = bitcast float* %471 to i32*
  %473 = getelementptr inbounds %class.SkM44, %class.SkM44* %15, i64 0, i32 0, i64 4
  %474 = bitcast float* %473 to i32*
  %475 = getelementptr inbounds %class.SkM44, %class.SkM44* %15, i64 0, i32 0, i64 5
  %476 = bitcast float* %475 to i32*
  %477 = getelementptr inbounds %class.SkM44, %class.SkM44* %15, i64 0, i32 0, i64 6
  %478 = getelementptr inbounds %class.SkM44, %class.SkM44* %15, i64 0, i32 0, i64 7
  %479 = bitcast float* %478 to i32*
  %480 = getelementptr inbounds %class.SkM44, %class.SkM44* %15, i64 0, i32 0, i64 8
  %481 = getelementptr inbounds %class.SkM44, %class.SkM44* %15, i64 0, i32 0, i64 12
  %482 = bitcast float* %481 to i32*
  %483 = getelementptr inbounds %class.SkM44, %class.SkM44* %15, i64 0, i32 0, i64 13
  %484 = bitcast float* %483 to i32*
  %485 = getelementptr inbounds %class.SkM44, %class.SkM44* %15, i64 0, i32 0, i64 14
  %486 = getelementptr inbounds %class.SkM44, %class.SkM44* %15, i64 0, i32 0, i64 15
  %487 = bitcast float* %486 to i32*
  %488 = bitcast %class.SkTLazy* %27 to i32 (...)***
  %489 = getelementptr inbounds %class.SkTLazy, %class.SkTLazy* %27, i64 0, i32 0, i64 8
  %490 = getelementptr inbounds %class.SkTLazy, %class.SkTLazy* %27, i64 0, i32 0, i64 72
  %491 = bitcast %class.SkM44* %14 to i32*
  %492 = getelementptr inbounds %class.SkM44, %class.SkM44* %14, i64 0, i32 0, i64 4
  %493 = bitcast float* %492 to i32*
  %494 = getelementptr inbounds %class.SkM44, %class.SkM44* %14, i64 0, i32 0, i64 12
  %495 = bitcast float* %494 to i32*
  %496 = getelementptr inbounds %class.SkM44, %class.SkM44* %14, i64 0, i32 0, i64 1
  %497 = bitcast float* %496 to i32*
  %498 = getelementptr inbounds %class.SkM44, %class.SkM44* %14, i64 0, i32 0, i64 5
  %499 = bitcast float* %498 to i32*
  %500 = getelementptr inbounds %class.SkM44, %class.SkM44* %14, i64 0, i32 0, i64 13
  %501 = bitcast float* %500 to i32*
  %502 = getelementptr inbounds %class.SkM44, %class.SkM44* %14, i64 0, i32 0, i64 3
  %503 = bitcast float* %502 to i32*
  %504 = getelementptr inbounds %class.SkM44, %class.SkM44* %14, i64 0, i32 0, i64 7
  %505 = bitcast float* %504 to i32*
  %506 = getelementptr inbounds %class.SkM44, %class.SkM44* %14, i64 0, i32 0, i64 15
  %507 = bitcast float* %506 to i32*
  %508 = getelementptr inbounds %class.SkTLazy, %class.SkTLazy* %27, i64 0, i32 0, i64 108
  %509 = bitcast i8* %508 to i32*
  %510 = getelementptr inbounds %class.SkTLazy, %class.SkTLazy* %27, i64 0, i32 0, i64 76
  %511 = getelementptr inbounds %class.SkTLazy, %class.SkTLazy* %27, i64 0, i32 0, i64 80
  %512 = getelementptr inbounds %class.SkTLazy, %class.SkTLazy* %27, i64 0, i32 0, i64 84
  %513 = getelementptr inbounds %class.SkTLazy, %class.SkTLazy* %27, i64 0, i32 0, i64 88
  %514 = getelementptr inbounds %class.SkTLazy, %class.SkTLazy* %27, i64 0, i32 0, i64 92
  %515 = getelementptr inbounds %class.SkTLazy, %class.SkTLazy* %27, i64 0, i32 0, i64 96
  %516 = getelementptr inbounds %class.SkTLazy, %class.SkTLazy* %27, i64 0, i32 0, i64 100
  %517 = getelementptr inbounds %class.SkTLazy, %class.SkTLazy* %27, i64 0, i32 0, i64 104
  %518 = bitcast i8* %490 to i32*
  %519 = bitcast i8* %510 to i32*
  %520 = bitcast i8* %511 to i32*
  %521 = bitcast i8* %512 to i32*
  %522 = bitcast i8* %513 to i32*
  %523 = bitcast i8* %514 to i32*
  %524 = bitcast i8* %515 to i32*
  %525 = bitcast i8* %516 to i32*
  %526 = bitcast i8* %517 to i32*
  %527 = getelementptr inbounds %class.SkTLazy, %class.SkTLazy* %27, i64 0, i32 0, i64 112
  %528 = bitcast i8* %527 to %class.SkMatrixProvider**
  %529 = getelementptr inbounds %class.SkTLazy, %class.SkTLazy* %27, i64 0, i32 0, i64 120
  %530 = bitcast %class.SkPreConcatMatrixProvider** %430 to %class.SkTLazy**
  %531 = bitcast %class.SkTLazy* %27 to %class.SkMatrixProvider*
  %532 = getelementptr inbounds %class.SkDraw, %class.SkDraw* %0, i64 0, i32 3
  %533 = getelementptr inbounds %class.sk_sp.6, %class.sk_sp.6* %29, i64 0, i32 0
  %534 = bitcast %class.SkMatrix* %28 to <4 x float>*
  %535 = bitcast float* %437 to <4 x float>*
  %536 = bitcast float* %480 to <4 x float>*
  br label %655

537:                                              ; preds = %391
  %538 = bitcast %class.SkShader* %323 to i1 (%class.SkShader*)***
  %539 = load i1 (%class.SkShader*)**, i1 (%class.SkShader*)*** %538, align 8
  %540 = getelementptr inbounds i1 (%class.SkShader*)*, i1 (%class.SkShader*)** %539, i64 7
  %541 = load i1 (%class.SkShader*)*, i1 (%class.SkShader*)** %540, align 8
  %542 = call zeroext i1 %541(%class.SkShader* %323) #9
  %543 = icmp ne %class.SkTriColorShader* %324, null
  %544 = xor i1 %543, true
  %545 = and i1 %542, %544
  %546 = icmp eq %struct.SkPoint* %55, %35
  br i1 %546, label %547, label %559

547:                                              ; preds = %537
  %548 = bitcast %class.SkMatrix* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %548) #9
  %549 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %23, i64 0, i32 1
  %550 = bitcast %class.SkMatrix* %23 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %550, align 16
  %551 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %23, i64 0, i32 0, i64 4
  %552 = bitcast float* %551 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %552, align 16
  %553 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %23, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %553, align 16
  store i32 16, i32* %549, align 4
  %554 = bitcast %class.SkStageUpdater* %417 to i1 (%class.SkStageUpdater*, %class.SkMatrix*, %class.SkMatrix*)***
  %555 = load i1 (%class.SkStageUpdater*, %class.SkMatrix*, %class.SkMatrix*)**, i1 (%class.SkStageUpdater*, %class.SkMatrix*, %class.SkMatrix*)*** %554, align 8
  %556 = getelementptr inbounds i1 (%class.SkStageUpdater*, %class.SkMatrix*, %class.SkMatrix*)*, i1 (%class.SkStageUpdater*, %class.SkMatrix*, %class.SkMatrix*)** %555, i64 2
  %557 = load i1 (%class.SkStageUpdater*, %class.SkMatrix*, %class.SkMatrix*)*, i1 (%class.SkStageUpdater*, %class.SkMatrix*, %class.SkMatrix*)** %556, align 8
  %558 = call zeroext i1 %557(%class.SkStageUpdater* nonnull %417, %class.SkMatrix* nonnull dereferenceable(40) %16, %class.SkMatrix* nonnull %23) #9
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %548) #9
  br i1 %558, label %559, label %755

559:                                              ; preds = %547, %537
  %560 = getelementptr inbounds %class.SkDraw, %class.SkDraw* %0, i64 0, i32 3
  %561 = load %class.SkRasterClip*, %class.SkRasterClip** %560, align 8
  %562 = getelementptr inbounds %class.sk_sp.6, %class.sk_sp.6* %24, i64 0, i32 0
  %563 = getelementptr inbounds %class.SkRasterClip, %class.SkRasterClip* %561, i64 0, i32 6, i32 0
  %564 = load %class.SkShader*, %class.SkShader** %563, align 8, !noalias !30
  %565 = icmp eq %class.SkShader* %564, null
  br i1 %565, label %569, label %566

566:                                              ; preds = %559
  %567 = getelementptr inbounds %class.SkShader, %class.SkShader* %564, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %568 = atomicrmw add i32* %567, i32 1 monotonic, !noalias !30
  br label %569

569:                                              ; preds = %559, %566
  store %class.SkShader* %564, %class.SkShader** %562, align 8, !alias.scope !30
  %570 = call %class.SkBlitter* @_Z29SkCreateRasterPipelineBlitterRK8SkPixmapRK7SkPaintRK16SkRasterPipelinebP12SkArenaAlloc5sk_spI8SkShaderE(%class.SkPixmap* dereferenceable(40) %398, %class.SkPaint* nonnull dereferenceable(72) %18, %class.SkRasterPipeline* nonnull dereferenceable(24) %21, i1 zeroext %545, %class.SkArenaAlloc* %7, %class.sk_sp.6* nonnull %24) #9
  %571 = load %class.SkShader*, %class.SkShader** %562, align 8
  %572 = icmp eq %class.SkShader* %571, null
  br i1 %572, label %583, label %573

573:                                              ; preds = %569
  %574 = getelementptr inbounds %class.SkShader, %class.SkShader* %571, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %575 = atomicrmw add i32* %574, i32 -1 acq_rel
  %576 = icmp eq i32 %575, 1
  br i1 %576, label %577, label %583

577:                                              ; preds = %573
  %578 = bitcast %class.SkShader* %571 to %class.SkRefCntBase*
  %579 = bitcast %class.SkShader* %571 to void (%class.SkRefCntBase*)***
  %580 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %579, align 8
  %581 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %580, i64 2
  %582 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %581, align 8
  call void %582(%class.SkRefCntBase* nonnull %578) #9
  br label %583

583:                                              ; preds = %569, %573, %577
  %584 = icmp eq %class.SkBlitter* %570, null
  br i1 %584, label %755, label %585

585:                                              ; preds = %583
  %586 = call zeroext i1 %84(%struct.VertState* nonnull %17) #9
  br i1 %586, label %587, label %755

587:                                              ; preds = %585
  %588 = getelementptr inbounds %struct.VertState, %struct.VertState* %17, i64 0, i32 0
  %589 = getelementptr inbounds %struct.VertState, %struct.VertState* %17, i64 0, i32 1
  %590 = getelementptr inbounds %struct.VertState, %struct.VertState* %17, i64 0, i32 2
  %591 = bitcast %class.SkMatrix* %25 to i8*
  %592 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %25, i64 0, i32 1
  %593 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %25, i64 0, i32 0, i64 4
  %594 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %25, i64 0, i32 0, i64 8
  %595 = bitcast [3 x %struct.SkPoint]* %12 to i8*
  %596 = getelementptr inbounds [3 x %struct.SkPoint], [3 x %struct.SkPoint]* %12, i64 0, i64 0
  %597 = getelementptr inbounds [3 x %struct.SkPoint], [3 x %struct.SkPoint]* %12, i64 0, i64 1
  %598 = getelementptr inbounds [3 x %struct.SkPoint], [3 x %struct.SkPoint]* %12, i64 0, i64 2
  %599 = bitcast [3 x %struct.SkPoint]* %13 to i8*
  %600 = getelementptr inbounds [3 x %struct.SkPoint], [3 x %struct.SkPoint]* %13, i64 0, i64 0
  %601 = getelementptr inbounds [3 x %struct.SkPoint], [3 x %struct.SkPoint]* %13, i64 0, i64 1
  %602 = getelementptr inbounds [3 x %struct.SkPoint], [3 x %struct.SkPoint]* %13, i64 0, i64 2
  %603 = bitcast [3 x %struct.SkPoint]* %12 to i64*
  %604 = bitcast %struct.SkPoint* %597 to i64*
  %605 = bitcast %struct.SkPoint* %598 to i64*
  %606 = bitcast [3 x %struct.SkPoint]* %13 to i64*
  %607 = bitcast %struct.SkPoint* %601 to i64*
  %608 = bitcast %struct.SkPoint* %602 to i64*
  %609 = bitcast %class.SkStageUpdater* %417 to i1 (%class.SkStageUpdater*, %class.SkMatrix*, %class.SkMatrix*)***
  %610 = bitcast %class.SkMatrix* %25 to <4 x float>*
  %611 = bitcast float* %593 to <4 x float>*
  br label %612

612:                                              ; preds = %587, %653
  br i1 %543, label %613, label %618

613:                                              ; preds = %612
  %614 = load i32, i32* %588, align 8
  %615 = load i32, i32* %589, align 4
  %616 = load i32, i32* %590, align 8
  %617 = call zeroext i1 @_ZN16SkTriColorShader6updateERK8SkMatrixPK7SkPointPK8SkRGBA4fIL11SkAlphaType2EEiii(%class.SkTriColorShader* nonnull %324, %class.SkMatrix* dereferenceable(40) %4, %struct.SkPoint* %35, %struct.SkRGBA4f* %325, i32 %614, i32 %615, i32 %616)
  br i1 %617, label %618, label %653

618:                                              ; preds = %613, %612
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %591) #9
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %610, align 16
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %611, align 16
  store float 1.000000e+00, float* %594, align 16
  store i32 16, i32* %592, align 4
  br i1 %546, label %650, label %619

619:                                              ; preds = %618
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %595) #9
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %599) #9
  %620 = load i32, i32* %588, align 8
  %621 = sext i32 %620 to i64
  %622 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %55, i64 %621
  %623 = bitcast %struct.SkPoint* %622 to i64*
  %624 = load i64, i64* %623, align 4
  store i64 %624, i64* %603, align 16
  %625 = load i32, i32* %589, align 4
  %626 = sext i32 %625 to i64
  %627 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %55, i64 %626
  %628 = bitcast %struct.SkPoint* %627 to i64*
  %629 = load i64, i64* %628, align 4
  store i64 %629, i64* %604, align 8
  %630 = load i32, i32* %590, align 8
  %631 = sext i32 %630 to i64
  %632 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %55, i64 %631
  %633 = bitcast %struct.SkPoint* %632 to i64*
  %634 = load i64, i64* %633, align 4
  store i64 %634, i64* %605, align 16
  %635 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %35, i64 %621
  %636 = bitcast %struct.SkPoint* %635 to i64*
  %637 = load i64, i64* %636, align 4
  store i64 %637, i64* %606, align 16
  %638 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %35, i64 %626
  %639 = bitcast %struct.SkPoint* %638 to i64*
  %640 = load i64, i64* %639, align 4
  store i64 %640, i64* %607, align 8
  %641 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %35, i64 %631
  %642 = bitcast %struct.SkPoint* %641 to i64*
  %643 = load i64, i64* %642, align 4
  store i64 %643, i64* %608, align 16
  %644 = call zeroext i1 @_ZN8SkMatrix13setPolyToPolyEPK7SkPointS2_i(%class.SkMatrix* nonnull %25, %struct.SkPoint* nonnull %596, %struct.SkPoint* nonnull %600, i32 3) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %599) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %595) #9
  br i1 %644, label %645, label %652

645:                                              ; preds = %619
  %646 = load i1 (%class.SkStageUpdater*, %class.SkMatrix*, %class.SkMatrix*)**, i1 (%class.SkStageUpdater*, %class.SkMatrix*, %class.SkMatrix*)*** %609, align 8
  %647 = getelementptr inbounds i1 (%class.SkStageUpdater*, %class.SkMatrix*, %class.SkMatrix*)*, i1 (%class.SkStageUpdater*, %class.SkMatrix*, %class.SkMatrix*)** %646, i64 2
  %648 = load i1 (%class.SkStageUpdater*, %class.SkMatrix*, %class.SkMatrix*)*, i1 (%class.SkStageUpdater*, %class.SkMatrix*, %class.SkMatrix*)** %647, align 8
  %649 = call zeroext i1 %648(%class.SkStageUpdater* nonnull %417, %class.SkMatrix* nonnull dereferenceable(40) %16, %class.SkMatrix* nonnull %25) #9
  br i1 %649, label %650, label %652

650:                                              ; preds = %645, %618
  %651 = load %class.SkRasterClip*, %class.SkRasterClip** %560, align 8
  call fastcc void @_ZL13fill_triangleRK9VertStateP9SkBlitterRK12SkRasterClipPK7SkPointPK8SkPoint3(%struct.VertState* nonnull dereferenceable(32) %17, %class.SkBlitter* nonnull %570, %class.SkRasterClip* dereferenceable(72) %651, %struct.SkPoint* %5, %struct.SkPoint3* %6)
  br label %652

652:                                              ; preds = %650, %645, %619
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %591) #9
  br label %653

653:                                              ; preds = %652, %613
  %654 = call zeroext i1 %84(%struct.VertState* nonnull %17) #9
  br i1 %654, label %612, label %755

655:                                              ; preds = %421, %661
  br i1 %422, label %663, label %656

656:                                              ; preds = %655
  %657 = load i32, i32* %423, align 8
  %658 = load i32, i32* %424, align 4
  %659 = load i32, i32* %425, align 8
  %660 = call zeroext i1 @_ZN16SkTriColorShader6updateERK8SkMatrixPK7SkPointPK8SkRGBA4fIL11SkAlphaType2EEiii(%class.SkTriColorShader* nonnull %324, %class.SkMatrix* dereferenceable(40) %4, %struct.SkPoint* %35, %struct.SkRGBA4f* %325, i32 %657, i32 %658, i32 %659)
  br i1 %660, label %663, label %661

661:                                              ; preds = %656, %754
  %662 = call zeroext i1 %84(%struct.VertState* nonnull %17) #9
  br i1 %662, label %655, label %755

663:                                              ; preds = %655, %656
  call void @llvm.lifetime.start.p0i8(i64 2080, i8* nonnull %426) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %426, i8 -86, i64 2080, i1 false)
  call void @_ZN12SkArenaAllocC2EPcmm(%class.SkArenaAlloc* %428, i8* nonnull %426, i64 2048, i64 2048) #9
  %664 = load %class.SkMatrixProvider*, %class.SkMatrixProvider** %61, align 8
  call void @llvm.lifetime.start.p0i8(i64 168, i8* nonnull %429) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %429, i8 -86, i64 160, i1 false)
  store %class.SkPreConcatMatrixProvider* null, %class.SkPreConcatMatrixProvider** %430, align 8
  br i1 %431, label %720, label %665

665:                                              ; preds = %663
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %432) #9
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %534, align 16
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %535, align 16
  store float 1.000000e+00, float* %441, align 16
  store i32 16, i32* %433, align 4
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %442) #9
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %446) #9
  %666 = load i32, i32* %423, align 8
  %667 = sext i32 %666 to i64
  %668 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %55, i64 %667
  %669 = bitcast %struct.SkPoint* %668 to i64*
  %670 = load i64, i64* %669, align 4
  store i64 %670, i64* %450, align 16
  %671 = load i32, i32* %424, align 4
  %672 = sext i32 %671 to i64
  %673 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %55, i64 %672
  %674 = bitcast %struct.SkPoint* %673 to i64*
  %675 = load i64, i64* %674, align 4
  store i64 %675, i64* %451, align 8
  %676 = load i32, i32* %425, align 8
  %677 = sext i32 %676 to i64
  %678 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %55, i64 %677
  %679 = bitcast %struct.SkPoint* %678 to i64*
  %680 = load i64, i64* %679, align 4
  store i64 %680, i64* %452, align 16
  %681 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %35, i64 %667
  %682 = bitcast %struct.SkPoint* %681 to i64*
  %683 = load i64, i64* %682, align 4
  store i64 %683, i64* %453, align 16
  %684 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %35, i64 %672
  %685 = bitcast %struct.SkPoint* %684 to i64*
  %686 = load i64, i64* %685, align 4
  store i64 %686, i64* %454, align 8
  %687 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %35, i64 %677
  %688 = bitcast %struct.SkPoint* %687 to i64*
  %689 = load i64, i64* %688, align 4
  store i64 %689, i64* %455, align 16
  %690 = call zeroext i1 @_ZN8SkMatrix13setPolyToPolyEPK7SkPointS2_i(%class.SkMatrix* nonnull %28, %struct.SkPoint* nonnull %443, %struct.SkPoint* nonnull %447, i32 3) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %446) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %442) #9
  br i1 %690, label %691, label %719

691:                                              ; preds = %665
  %692 = load %class.SkPreConcatMatrixProvider*, %class.SkPreConcatMatrixProvider** %430, align 8
  %693 = icmp eq %class.SkPreConcatMatrixProvider* %692, null
  br i1 %693, label %698, label %694

694:                                              ; preds = %691
  %695 = bitcast %class.SkPreConcatMatrixProvider* %692 to void (%class.SkPreConcatMatrixProvider*)***
  %696 = load void (%class.SkPreConcatMatrixProvider*)**, void (%class.SkPreConcatMatrixProvider*)*** %695, align 8
  %697 = load void (%class.SkPreConcatMatrixProvider*)*, void (%class.SkPreConcatMatrixProvider*)** %696, align 8
  call void %697(%class.SkPreConcatMatrixProvider* nonnull %692) #9
  store %class.SkPreConcatMatrixProvider* null, %class.SkPreConcatMatrixProvider** %430, align 8
  br label %698

698:                                              ; preds = %694, %691
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %456) #9
  %699 = getelementptr inbounds %class.SkMatrixProvider, %class.SkMatrixProvider* %664, i64 0, i32 1
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %457) #9
  %700 = load i32, i32* %458, align 16
  %701 = load i32, i32* %459, align 4
  %702 = load i32, i32* %460, align 8
  %703 = load i32, i32* %461, align 4
  %704 = load i32, i32* %462, align 16
  %705 = load i32, i32* %463, align 4
  %706 = load i32, i32* %464, align 8
  %707 = load i32, i32* %465, align 4
  %708 = load i32, i32* %466, align 16
  store i32 %700, i32* %467, align 4
  store i32 %703, i32* %469, align 4
  store float 0.000000e+00, float* %470, align 4
  store i32 %706, i32* %472, align 4
  store i32 %701, i32* %474, align 4
  store i32 %704, i32* %476, align 4
  store float 0.000000e+00, float* %477, align 4
  store i32 %707, i32* %479, align 4
  store <4 x float> <float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00>, <4 x float>* %536, align 4
  store i32 %702, i32* %482, align 4
  store i32 %705, i32* %484, align 4
  store float 0.000000e+00, float* %485, align 4
  store i32 %708, i32* %487, align 4
  %709 = call dereferenceable(64) %class.SkM44* @_ZN5SkM449setConcatERKS_S1_(%class.SkM44* nonnull %14, %class.SkM44* dereferenceable(64) %699, %class.SkM44* nonnull dereferenceable(64) %15) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %489, i8* nonnull align 4 %456, i64 64, i1 false) #9
  %710 = load i32, i32* %491, align 4, !noalias !33
  %711 = load i32, i32* %493, align 4, !noalias !33
  %712 = load i32, i32* %495, align 4, !noalias !33
  %713 = load i32, i32* %497, align 4, !noalias !33
  %714 = load i32, i32* %499, align 4, !noalias !33
  %715 = load i32, i32* %501, align 4, !noalias !33
  %716 = load i32, i32* %503, align 4, !noalias !33
  %717 = load i32, i32* %505, align 4, !noalias !33
  %718 = load i32, i32* %507, align 4, !noalias !33
  store i32 %710, i32* %518, align 8, !alias.scope !36
  store i32 %711, i32* %519, align 4, !alias.scope !36
  store i32 %712, i32* %520, align 8, !alias.scope !36
  store i32 %713, i32* %521, align 4, !alias.scope !36
  store i32 %714, i32* %522, align 8, !alias.scope !36
  store i32 %715, i32* %523, align 4, !alias.scope !36
  store i32 %716, i32* %524, align 8, !alias.scope !36
  store i32 %717, i32* %525, align 4, !alias.scope !36
  store i32 %718, i32* %526, align 8, !alias.scope !36
  store i32 128, i32* %509, align 4, !alias.scope !36
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %457) #9
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %456) #9
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV25SkPreConcatMatrixProvider, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %488, align 8
  store %class.SkMatrixProvider* %664, %class.SkMatrixProvider** %528, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %529, i8* nonnull align 16 %432, i64 40, i1 false) #9
  store %class.SkTLazy* %27, %class.SkTLazy** %530, align 8
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %432) #9
  br label %720

719:                                              ; preds = %665
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %432) #9
  br label %747

720:                                              ; preds = %698, %663
  %721 = phi %class.SkMatrixProvider* [ %664, %663 ], [ %531, %698 ]
  %722 = load %class.SkRasterClip*, %class.SkRasterClip** %532, align 8
  %723 = getelementptr inbounds %class.SkRasterClip, %class.SkRasterClip* %722, i64 0, i32 6, i32 0
  %724 = load %class.SkShader*, %class.SkShader** %723, align 8, !noalias !39
  %725 = icmp eq %class.SkShader* %724, null
  br i1 %725, label %729, label %726

726:                                              ; preds = %720
  %727 = getelementptr inbounds %class.SkShader, %class.SkShader* %724, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %728 = atomicrmw add i32* %727, i32 1 monotonic, !noalias !39
  br label %729

729:                                              ; preds = %720, %726
  store %class.SkShader* %724, %class.SkShader** %533, align 8, !alias.scope !39
  %730 = call %class.SkBlitter* @_Z29SkCreateRasterPipelineBlitterRK8SkPixmapRK7SkPaintRK16SkMatrixProviderP12SkArenaAlloc5sk_spI8SkShaderE(%class.SkPixmap* dereferenceable(40) %398, %class.SkPaint* nonnull dereferenceable(72) %18, %class.SkMatrixProvider* dereferenceable(112) %721, %class.SkArenaAlloc* %428, %class.sk_sp.6* nonnull %29) #9
  %731 = load %class.SkShader*, %class.SkShader** %533, align 8
  %732 = icmp eq %class.SkShader* %731, null
  br i1 %732, label %743, label %733

733:                                              ; preds = %729
  %734 = getelementptr inbounds %class.SkShader, %class.SkShader* %731, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %735 = atomicrmw add i32* %734, i32 -1 acq_rel
  %736 = icmp eq i32 %735, 1
  br i1 %736, label %737, label %743

737:                                              ; preds = %733
  %738 = bitcast %class.SkShader* %731 to %class.SkRefCntBase*
  %739 = bitcast %class.SkShader* %731 to void (%class.SkRefCntBase*)***
  %740 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %739, align 8
  %741 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %740, i64 2
  %742 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %741, align 8
  call void %742(%class.SkRefCntBase* nonnull %738) #9
  br label %743

743:                                              ; preds = %729, %733, %737
  %744 = icmp eq %class.SkBlitter* %730, null
  br i1 %744, label %747, label %745

745:                                              ; preds = %743
  %746 = load %class.SkRasterClip*, %class.SkRasterClip** %532, align 8
  call fastcc void @_ZL13fill_triangleRK9VertStateP9SkBlitterRK12SkRasterClipPK7SkPointPK8SkPoint3(%struct.VertState* nonnull dereferenceable(32) %17, %class.SkBlitter* nonnull %730, %class.SkRasterClip* dereferenceable(72) %746, %struct.SkPoint* %5, %struct.SkPoint3* %6)
  br label %747

747:                                              ; preds = %719, %745, %743
  %748 = load %class.SkPreConcatMatrixProvider*, %class.SkPreConcatMatrixProvider** %430, align 8
  %749 = icmp eq %class.SkPreConcatMatrixProvider* %748, null
  br i1 %749, label %754, label %750

750:                                              ; preds = %747
  %751 = bitcast %class.SkPreConcatMatrixProvider* %748 to void (%class.SkPreConcatMatrixProvider*)***
  %752 = load void (%class.SkPreConcatMatrixProvider*)**, void (%class.SkPreConcatMatrixProvider*)*** %751, align 8
  %753 = load void (%class.SkPreConcatMatrixProvider*)*, void (%class.SkPreConcatMatrixProvider*)** %752, align 8
  call void %753(%class.SkPreConcatMatrixProvider* nonnull %748) #9
  store %class.SkPreConcatMatrixProvider* null, %class.SkPreConcatMatrixProvider** %430, align 8
  br label %754

754:                                              ; preds = %747, %750
  call void @llvm.lifetime.end.p0i8(i64 168, i8* nonnull %429) #9
  call void @_ZN12SkArenaAllocD2Ev(%class.SkArenaAlloc* %428) #9
  call void @llvm.lifetime.end.p0i8(i64 2080, i8* nonnull %426) #9
  br label %661

755:                                              ; preds = %653, %661, %585, %419, %583, %547
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %394) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %392) #9
  br label %756

756:                                              ; preds = %389, %374, %372, %755
  call void @_ZN7SkPaintD1Ev(%class.SkPaint* nonnull %18) #9
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %326) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %76) #9
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %59) #9
  ret void
}

declare i1 (%struct.VertState*)* @_ZN9VertState10chooseProcEN10SkVertices10VertexModeE(%struct.VertState*, i32) local_unnamed_addr #2

declare void @_ZN7SkPaintC1ERKS_(%class.SkPaint*, %class.SkPaint* dereferenceable(72)) unnamed_addr #2

declare void @_ZN7SkPaint9setShaderE5sk_spI8SkShaderE(%class.SkPaint*, %class.sk_sp.6*) local_unnamed_addr #2

declare %class.SkBlitter* @_Z29SkCreateRasterPipelineBlitterRK8SkPixmapRK7SkPaintRK16SkMatrixProviderP12SkArenaAlloc5sk_spI8SkShaderE(%class.SkPixmap* dereferenceable(40), %class.SkPaint* dereferenceable(72), %class.SkMatrixProvider* dereferenceable(112), %class.SkArenaAlloc*, %class.sk_sp.6*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZL13fill_triangleRK9VertStateP9SkBlitterRK12SkRasterClipPK7SkPointPK8SkPoint3(%struct.VertState* nocapture readonly dereferenceable(32), %class.SkBlitter*, %class.SkRasterClip* dereferenceable(72), %struct.SkPoint* nocapture readonly, %struct.SkPoint3* readonly) unnamed_addr #4 {
  %6 = alloca [3 x %struct.SkPoint], align 16
  %7 = alloca [4 x %struct.SkPoint3], align 16
  %8 = alloca [4 x %struct.SkPoint], align 16
  %9 = alloca [3 x i32], align 4
  %10 = icmp eq %struct.SkPoint3* %4, null
  br i1 %10, label %164, label %11

11:                                               ; preds = %5
  %12 = bitcast [4 x %struct.SkPoint]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %12) #9
  %13 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %8, i64 0, i64 2
  %14 = bitcast [3 x i32]* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -1, i64 32, i1 false) #9
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %14) #9
  %15 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 0
  %16 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 1
  %17 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 2
  %18 = getelementptr inbounds %struct.VertState, %struct.VertState* %0, i64 0, i32 0
  %19 = load i32, i32* %18, align 8
  store i32 %19, i32* %15, align 4
  %20 = getelementptr inbounds %struct.VertState, %struct.VertState* %0, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  store i32 %21, i32* %16, align 4
  %22 = getelementptr inbounds %struct.VertState, %struct.VertState* %0, i64 0, i32 2
  %23 = load i32, i32* %22, align 8
  store i32 %23, i32* %17, align 4
  %24 = bitcast [4 x %struct.SkPoint3]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %24) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %24, i8 -1, i64 48, i1 false) #9
  %25 = getelementptr inbounds [4 x %struct.SkPoint3], [4 x %struct.SkPoint3]* %7, i64 0, i64 0
  br label %63

26:                                               ; preds = %134
  %27 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %8, i64 0, i64 1
  %28 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %8, i64 0, i64 0
  %29 = ptrtoint %struct.SkPoint3* %135 to i64
  %30 = ptrtoint [4 x %struct.SkPoint3]* %7 to i64
  %31 = sub i64 %29, %30
  %32 = sdiv exact i64 %31, 12
  %33 = trunc i64 %32 to i32
  %34 = icmp sgt i32 %33, 0
  br i1 %34, label %35, label %155

35:                                               ; preds = %26
  %36 = and i64 %32, 4294967295
  %37 = icmp ult i64 %36, 4
  br i1 %37, label %38, label %40

38:                                               ; preds = %61, %35
  %39 = phi i64 [ 0, %35 ], [ %42, %61 ]
  br label %140

40:                                               ; preds = %35
  %41 = and i64 %32, 3
  %42 = sub nsw i64 %36, %41
  br label %43

43:                                               ; preds = %43, %40
  %44 = phi i64 [ 0, %40 ], [ %59, %43 ]
  %45 = getelementptr inbounds [4 x %struct.SkPoint3], [4 x %struct.SkPoint3]* %7, i64 0, i64 %44, i32 2
  %46 = getelementptr inbounds float, float* %45, i64 -2
  %47 = bitcast float* %46 to <12 x float>*
  %48 = load <12 x float>, <12 x float>* %47, align 8
  %49 = shufflevector <12 x float> %48, <12 x float> undef, <4 x i32> <i32 0, i32 3, i32 6, i32 9>
  %50 = shufflevector <12 x float> %48, <12 x float> undef, <4 x i32> <i32 1, i32 4, i32 7, i32 10>
  %51 = shufflevector <12 x float> %48, <12 x float> undef, <4 x i32> <i32 2, i32 5, i32 8, i32 11>
  %52 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %51
  %53 = fmul <4 x float> %49, %52
  %54 = fmul <4 x float> %52, %50
  %55 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %8, i64 0, i64 %44, i32 1
  %56 = getelementptr inbounds float, float* %55, i64 -1
  %57 = bitcast float* %56 to <8 x float>*
  %58 = shufflevector <4 x float> %53, <4 x float> %54, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %58, <8 x float>* %57, align 4
  %59 = add i64 %44, 4
  %60 = icmp eq i64 %59, %42
  br i1 %60, label %61, label %43, !llvm.loop !42

61:                                               ; preds = %43
  %62 = icmp eq i64 %41, 0
  br i1 %62, label %155, label %38

63:                                               ; preds = %137, %11
  %64 = phi i32 [ %19, %11 ], [ %139, %137 ]
  %65 = phi i64 [ 0, %11 ], [ %67, %137 ]
  %66 = phi %struct.SkPoint3* [ %25, %11 ], [ %135, %137 ]
  %67 = add nuw nsw i64 %65, 1
  %68 = trunc i64 %67 to i8
  %69 = urem i8 %68, 3
  %70 = zext i8 %69 to i64
  %71 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 %70
  %72 = load i32, i32* %71, align 4
  %73 = sext i32 %64 to i64
  %74 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %4, i64 %73
  %75 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %4, i64 %73, i32 2
  %76 = load float, float* %75, align 4
  %77 = fcmp ogt float %76, 0x3FA99999A0000000
  br i1 %77, label %78, label %108

78:                                               ; preds = %63
  %79 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %66, i64 1
  %80 = bitcast %struct.SkPoint3* %66 to i8*
  %81 = bitcast %struct.SkPoint3* %74 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %80, i8* align 4 %81, i64 12, i1 false) #9
  %82 = sext i32 %72 to i64
  %83 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %4, i64 %82, i32 2
  %84 = load float, float* %83, align 4
  %85 = fcmp ugt float %84, 0x3FA99999A0000000
  br i1 %85, label %134, label %86

86:                                               ; preds = %78
  %87 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %4, i64 %82
  %88 = bitcast %struct.SkPoint3* %74 to <2 x float>*
  %89 = load <2 x float>, <2 x float>* %88, align 4
  %90 = load float, float* %75, align 4
  %91 = bitcast %struct.SkPoint3* %87 to <2 x float>*
  %92 = load <2 x float>, <2 x float>* %91, align 4
  %93 = fadd float %90, 0xBFA99999A0000000
  %94 = fadd float %84, 0xBFA99999A0000000
  %95 = fsub float %93, %94
  %96 = fdiv float %93, %95
  %97 = fsub <2 x float> %92, %89
  %98 = fsub float %84, %90
  %99 = insertelement <2 x float> undef, float %96, i32 0
  %100 = shufflevector <2 x float> %99, <2 x float> undef, <2 x i32> zeroinitializer
  %101 = fmul <2 x float> %97, %100
  %102 = fmul float %98, %96
  %103 = fadd <2 x float> %89, %101
  %104 = fadd float %90, %102
  %105 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %66, i64 2
  %106 = bitcast %struct.SkPoint3* %79 to <2 x float>*
  store <2 x float> %103, <2 x float>* %106, align 4
  %107 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %66, i64 1, i32 2
  store float %104, float* %107, align 4
  br label %134

108:                                              ; preds = %63
  %109 = sext i32 %72 to i64
  %110 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %4, i64 %109, i32 2
  %111 = load float, float* %110, align 4
  %112 = fcmp ogt float %111, 0x3FA99999A0000000
  br i1 %112, label %113, label %134

113:                                              ; preds = %108
  %114 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %4, i64 %109
  %115 = bitcast %struct.SkPoint3* %74 to <2 x float>*
  %116 = load <2 x float>, <2 x float>* %115, align 4
  %117 = bitcast %struct.SkPoint3* %114 to <2 x float>*
  %118 = load <2 x float>, <2 x float>* %117, align 4
  %119 = fadd float %76, 0xBFA99999A0000000
  %120 = fadd float %111, 0xBFA99999A0000000
  %121 = fsub float %119, %120
  %122 = fdiv float %119, %121
  %123 = fsub <2 x float> %118, %116
  %124 = fsub float %111, %76
  %125 = insertelement <2 x float> undef, float %122, i32 0
  %126 = shufflevector <2 x float> %125, <2 x float> undef, <2 x i32> zeroinitializer
  %127 = fmul <2 x float> %126, %123
  %128 = fmul float %124, %122
  %129 = fadd <2 x float> %116, %127
  %130 = fadd float %76, %128
  %131 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %66, i64 1
  %132 = bitcast %struct.SkPoint3* %66 to <2 x float>*
  store <2 x float> %129, <2 x float>* %132, align 4
  %133 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %66, i64 0, i32 2
  store float %130, float* %133, align 4
  br label %134

134:                                              ; preds = %113, %108, %86, %78
  %135 = phi %struct.SkPoint3* [ %105, %86 ], [ %79, %78 ], [ %131, %113 ], [ %66, %108 ]
  %136 = icmp eq i64 %67, 3
  br i1 %136, label %26, label %137

137:                                              ; preds = %134
  %138 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 %67
  %139 = load i32, i32* %138, align 4
  br label %63

140:                                              ; preds = %38, %140
  %141 = phi i64 [ %153, %140 ], [ %39, %38 ]
  %142 = getelementptr inbounds [4 x %struct.SkPoint3], [4 x %struct.SkPoint3]* %7, i64 0, i64 %141, i32 2
  %143 = load float, float* %142, align 4
  %144 = fdiv float 1.000000e+00, %143
  %145 = getelementptr inbounds [4 x %struct.SkPoint3], [4 x %struct.SkPoint3]* %7, i64 0, i64 %141, i32 0
  %146 = load float, float* %145, align 4
  %147 = fmul float %146, %144
  %148 = getelementptr inbounds [4 x %struct.SkPoint3], [4 x %struct.SkPoint3]* %7, i64 0, i64 %141, i32 1
  %149 = load float, float* %148, align 4
  %150 = fmul float %144, %149
  %151 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %8, i64 0, i64 %141, i32 0
  store float %147, float* %151, align 8
  %152 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %8, i64 0, i64 %141, i32 1
  store float %150, float* %152, align 4
  %153 = add nuw nsw i64 %141, 1
  %154 = icmp eq i64 %153, %36
  br i1 %154, label %155, label %140, !llvm.loop !43

155:                                              ; preds = %140, %61, %26
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %24) #9
  %156 = icmp eq i32 %33, 0
  br i1 %156, label %163, label %157

157:                                              ; preds = %155
  call void @_ZN6SkScan12FillTriangleEPK7SkPointRK12SkRasterClipP9SkBlitter(%struct.SkPoint* nonnull %28, %class.SkRasterClip* dereferenceable(72) %2, %class.SkBlitter* %1) #9
  %158 = icmp eq i32 %33, 4
  br i1 %158, label %159, label %163

159:                                              ; preds = %157
  %160 = bitcast %struct.SkPoint* %13 to <2 x i64>*
  %161 = load <2 x i64>, <2 x i64>* %160, align 16
  %162 = bitcast %struct.SkPoint* %27 to <2 x i64>*
  store <2 x i64> %161, <2 x i64>* %162, align 8
  call void @_ZN6SkScan12FillTriangleEPK7SkPointRK12SkRasterClipP9SkBlitter(%struct.SkPoint* nonnull %28, %class.SkRasterClip* dereferenceable(72) %2, %class.SkBlitter* %1) #9
  br label %163

163:                                              ; preds = %155, %157, %159
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %14) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %12) #9
  br label %190

164:                                              ; preds = %5
  %165 = bitcast [3 x %struct.SkPoint]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %165) #9
  %166 = getelementptr inbounds [3 x %struct.SkPoint], [3 x %struct.SkPoint]* %6, i64 0, i64 0
  %167 = getelementptr inbounds %struct.VertState, %struct.VertState* %0, i64 0, i32 0
  %168 = load i32, i32* %167, align 8
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %3, i64 %169
  %171 = bitcast %struct.SkPoint* %170 to i64*
  %172 = bitcast [3 x %struct.SkPoint]* %6 to i64*
  %173 = load i64, i64* %171, align 4
  store i64 %173, i64* %172, align 16
  %174 = getelementptr inbounds [3 x %struct.SkPoint], [3 x %struct.SkPoint]* %6, i64 0, i64 1
  %175 = getelementptr inbounds %struct.VertState, %struct.VertState* %0, i64 0, i32 1
  %176 = load i32, i32* %175, align 4
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %3, i64 %177
  %179 = bitcast %struct.SkPoint* %178 to i64*
  %180 = bitcast %struct.SkPoint* %174 to i64*
  %181 = load i64, i64* %179, align 4
  store i64 %181, i64* %180, align 8
  %182 = getelementptr inbounds [3 x %struct.SkPoint], [3 x %struct.SkPoint]* %6, i64 0, i64 2
  %183 = getelementptr inbounds %struct.VertState, %struct.VertState* %0, i64 0, i32 2
  %184 = load i32, i32* %183, align 8
  %185 = sext i32 %184 to i64
  %186 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %3, i64 %185
  %187 = bitcast %struct.SkPoint* %186 to i64*
  %188 = bitcast %struct.SkPoint* %182 to i64*
  %189 = load i64, i64* %187, align 4
  store i64 %189, i64* %188, align 16
  call void @_ZN6SkScan12FillTriangleEPK7SkPointRK12SkRasterClipP9SkBlitter(%struct.SkPoint* nonnull %166, %class.SkRasterClip* dereferenceable(72) %2, %class.SkBlitter* %1) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %165) #9
  br label %190

190:                                              ; preds = %164, %163
  ret void
}

declare void @_ZN16SkRasterPipelineC1EP12SkArenaAlloc(%class.SkRasterPipeline*, %class.SkArenaAlloc*) unnamed_addr #2

declare %class.SkBlitter* @_Z29SkCreateRasterPipelineBlitterRK8SkPixmapRK7SkPaintRK16SkRasterPipelinebP12SkArenaAlloc5sk_spI8SkShaderE(%class.SkPixmap* dereferenceable(40), %class.SkPaint* dereferenceable(72), %class.SkRasterPipeline* dereferenceable(24), i1 zeroext, %class.SkArenaAlloc*, %class.sk_sp.6*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7SkPaintD1Ev(%class.SkPaint*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6SkDraw12drawVerticesEPK10SkVertices11SkBlendModeRK7SkPaint(%class.SkDraw*, %class.SkVertices*, i32, %class.SkPaint* dereferenceable(72)) local_unnamed_addr #3 align 2 {
  %5 = alloca %class.SkMatrix, align 4
  %6 = alloca %class.SkMatrix, align 16
  %7 = alloca %class.SkSTArenaAlloc.15, align 8
  %8 = alloca %struct.SkRect, align 4
  %9 = getelementptr inbounds %class.SkVertices, %class.SkVertices* %1, i64 0, i32 7
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds %class.SkVertices, %class.SkVertices* %1, i64 0, i32 8
  %12 = load i32, i32* %11, align 4
  %13 = icmp slt i32 %10, 3
  %14 = add i32 %12, -1
  %15 = icmp ult i32 %14, 2
  %16 = or i1 %13, %15
  br i1 %16, label %214, label %17

17:                                               ; preds = %4
  %18 = getelementptr inbounds %class.SkDraw, %class.SkDraw* %0, i64 0, i32 3
  %19 = load %class.SkRasterClip*, %class.SkRasterClip** %18, align 8
  %20 = getelementptr inbounds %class.SkRasterClip, %class.SkRasterClip* %19, i64 0, i32 3
  %21 = load i8, i8* %20, align 1, !range !2
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %23, label %214

23:                                               ; preds = %17
  %24 = bitcast %class.SkMatrix* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %24) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %24, i8 -1, i64 36, i1 false)
  %25 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 1
  store i32 -1431655766, i32* %25, align 4
  %26 = getelementptr inbounds %class.SkDraw, %class.SkDraw* %0, i64 0, i32 2
  %27 = load %class.SkMatrixProvider*, %class.SkMatrixProvider** %26, align 8
  %28 = getelementptr inbounds %class.SkMatrixProvider, %class.SkMatrixProvider* %27, i64 0, i32 2
  %29 = bitcast %class.SkMatrix* %28 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %24, i8* align 4 %29, i64 40, i1 false)
  %30 = bitcast %class.SkMatrix* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %30) #9
  %31 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 1
  %32 = bitcast %class.SkMatrix* %6 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %32, align 16
  %33 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 4
  %34 = bitcast float* %33 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %34, align 16
  %35 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %35, align 16
  store i32 16, i32* %31, align 4
  %36 = load i32, i32* %25, align 4
  %37 = trunc i32 %36 to i8
  %38 = icmp slt i8 %37, 0
  br i1 %38, label %39, label %42

39:                                               ; preds = %23
  %40 = call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* nonnull %5) #9
  %41 = zext i8 %40 to i32
  store i32 %41, i32* %25, align 4
  br label %42

42:                                               ; preds = %39, %23
  %43 = phi i32 [ %41, %39 ], [ %36, %23 ]
  %44 = and i32 %43, 15
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %48

46:                                               ; preds = %42
  %47 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix5resetEv(%class.SkMatrix* nonnull %6) #9
  br label %50

48:                                               ; preds = %42
  %49 = call zeroext i1 @_ZNK8SkMatrix17invertNonIdentityEPS_(%class.SkMatrix* nonnull %5, %class.SkMatrix* nonnull %6) #9
  br i1 %49, label %50, label %213

50:                                               ; preds = %46, %48
  %51 = getelementptr inbounds %class.SkSTArenaAlloc.15, %class.SkSTArenaAlloc.15* %7, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 768, i8* nonnull %51) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %51, i8 -86, i64 768, i1 false)
  %52 = getelementptr inbounds %class.SkSTArenaAlloc.15, %class.SkSTArenaAlloc.15* %7, i64 0, i32 0, i32 0, i64 736
  %53 = bitcast i8* %52 to %class.SkArenaAlloc*
  call void @_ZN12SkArenaAllocC2EPcmm(%class.SkArenaAlloc* %53, i8* nonnull %51, i64 736, i64 736) #9
  %54 = load i32, i32* %25, align 4
  %55 = and i32 %54, 192
  %56 = icmp eq i32 %55, 128
  br i1 %56, label %57, label %60

57:                                               ; preds = %50
  %58 = call zeroext i8 @_ZNK8SkMatrix26computePerspectiveTypeMaskEv(%class.SkMatrix* nonnull %5) #9
  %59 = zext i8 %58 to i32
  store i32 %59, i32* %25, align 4
  br label %60

60:                                               ; preds = %50, %57
  %61 = phi i32 [ %59, %57 ], [ %54, %50 ]
  %62 = and i32 %61, 8
  %63 = icmp eq i32 %62, 0
  %64 = sext i32 %10 to i64
  br i1 %63, label %161, label %65

65:                                               ; preds = %60
  %66 = icmp ult i32 %10, 357913942
  br i1 %66, label %68, label %67

67:                                               ; preds = %65
  call void @abort() #10
  unreachable

68:                                               ; preds = %65
  %69 = mul i32 %10, 12
  %70 = getelementptr inbounds %class.SkSTArenaAlloc.15, %class.SkSTArenaAlloc.15* %7, i64 0, i32 0, i32 0, i64 744
  %71 = bitcast i8* %70 to i8**
  %72 = bitcast i8* %70 to i64*
  %73 = load i64, i64* %72, align 8
  %74 = sub i64 0, %73
  %75 = and i64 %74, 3
  %76 = zext i32 %69 to i64
  %77 = or i64 %75, %76
  %78 = getelementptr inbounds %class.SkSTArenaAlloc.15, %class.SkSTArenaAlloc.15* %7, i64 0, i32 0, i32 0, i64 752
  %79 = bitcast i8* %78 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = sub i64 %80, %73
  %82 = icmp ugt i64 %77, %81
  br i1 %82, label %83, label %87

83:                                               ; preds = %68
  call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %53, i32 %69, i32 4) #9
  %84 = load i64, i64* %72, align 8
  %85 = sub i64 0, %84
  %86 = and i64 %85, 3
  br label %87

87:                                               ; preds = %68, %83
  %88 = phi i64 [ %84, %83 ], [ %73, %68 ]
  %89 = phi i64 [ %86, %83 ], [ %75, %68 ]
  %90 = inttoptr i64 %88 to i8*
  %91 = getelementptr inbounds i8, i8* %90, i64 %89
  %92 = getelementptr inbounds i8, i8* %91, i64 %76
  store i8* %92, i8** %71, align 8
  %93 = bitcast i8* %91 to %struct.SkPoint3*
  %94 = mul nuw nsw i64 %64, 12
  call void @llvm.memset.p0i8.i64(i8* align 4 %91, i8 0, i64 %94, i1 false) #9
  %95 = getelementptr inbounds %class.SkVertices, %class.SkVertices* %1, i64 0, i32 2
  %96 = load %struct.SkPoint*, %struct.SkPoint** %95, align 8
  call void @_ZNK8SkMatrix20mapHomogeneousPointsEP8SkPoint3PK7SkPointi(%class.SkMatrix* nonnull %5, %struct.SkPoint3* %93, %struct.SkPoint* %96, i32 %10) #9
  %97 = bitcast i8* %91 to float*
  %98 = mul nsw i32 %10, 3
  %99 = zext i32 %98 to i64
  %100 = add nsw i64 %99, -1
  %101 = and i64 %99, 7
  %102 = icmp ult i64 %100, 7
  br i1 %102, label %143, label %103

103:                                              ; preds = %87
  %104 = sub nsw i64 %99, %101
  br label %105

105:                                              ; preds = %105, %103
  %106 = phi i64 [ 0, %103 ], [ %140, %105 ]
  %107 = phi float [ 0.000000e+00, %103 ], [ %139, %105 ]
  %108 = phi i64 [ %104, %103 ], [ %141, %105 ]
  %109 = getelementptr inbounds float, float* %97, i64 %106
  %110 = load float, float* %109, align 4
  %111 = fmul float %107, %110
  %112 = or i64 %106, 1
  %113 = getelementptr inbounds float, float* %97, i64 %112
  %114 = load float, float* %113, align 4
  %115 = fmul float %111, %114
  %116 = or i64 %106, 2
  %117 = getelementptr inbounds float, float* %97, i64 %116
  %118 = load float, float* %117, align 4
  %119 = fmul float %115, %118
  %120 = or i64 %106, 3
  %121 = getelementptr inbounds float, float* %97, i64 %120
  %122 = load float, float* %121, align 4
  %123 = fmul float %119, %122
  %124 = or i64 %106, 4
  %125 = getelementptr inbounds float, float* %97, i64 %124
  %126 = load float, float* %125, align 4
  %127 = fmul float %123, %126
  %128 = or i64 %106, 5
  %129 = getelementptr inbounds float, float* %97, i64 %128
  %130 = load float, float* %129, align 4
  %131 = fmul float %127, %130
  %132 = or i64 %106, 6
  %133 = getelementptr inbounds float, float* %97, i64 %132
  %134 = load float, float* %133, align 4
  %135 = fmul float %131, %134
  %136 = or i64 %106, 7
  %137 = getelementptr inbounds float, float* %97, i64 %136
  %138 = load float, float* %137, align 4
  %139 = fmul float %135, %138
  %140 = add nuw nsw i64 %106, 8
  %141 = add i64 %108, -8
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %143, label %105

143:                                              ; preds = %105, %87
  %144 = phi float [ undef, %87 ], [ %139, %105 ]
  %145 = phi i64 [ 0, %87 ], [ %140, %105 ]
  %146 = phi float [ 0.000000e+00, %87 ], [ %139, %105 ]
  %147 = icmp eq i64 %101, 0
  br i1 %147, label %158, label %148

148:                                              ; preds = %143, %148
  %149 = phi i64 [ %155, %148 ], [ %145, %143 ]
  %150 = phi float [ %154, %148 ], [ %146, %143 ]
  %151 = phi i64 [ %156, %148 ], [ %101, %143 ]
  %152 = getelementptr inbounds float, float* %97, i64 %149
  %153 = load float, float* %152, align 4
  %154 = fmul float %150, %153
  %155 = add nuw nsw i64 %149, 1
  %156 = add i64 %151, -1
  %157 = icmp eq i64 %156, 0
  br i1 %157, label %158, label %148, !llvm.loop !44

158:                                              ; preds = %148, %143
  %159 = phi float [ %144, %143 ], [ %154, %148 ]
  %160 = fcmp oeq float %159, 0.000000e+00
  br i1 %160, label %209, label %212

161:                                              ; preds = %60
  %162 = icmp ult i32 %10, 536870912
  br i1 %162, label %164, label %163

163:                                              ; preds = %161
  call void @abort() #10
  unreachable

164:                                              ; preds = %161
  %165 = shl nsw i64 %64, 3
  %166 = getelementptr inbounds %class.SkSTArenaAlloc.15, %class.SkSTArenaAlloc.15* %7, i64 0, i32 0, i32 0, i64 744
  %167 = bitcast i8* %166 to i8**
  %168 = bitcast i8* %166 to i64*
  %169 = load i64, i64* %168, align 8
  %170 = sub i64 0, %169
  %171 = and i64 %170, 3
  %172 = and i64 %165, 4294967288
  %173 = or i64 %171, %172
  %174 = getelementptr inbounds %class.SkSTArenaAlloc.15, %class.SkSTArenaAlloc.15* %7, i64 0, i32 0, i32 0, i64 752
  %175 = bitcast i8* %174 to i64*
  %176 = load i64, i64* %175, align 8
  %177 = sub i64 %176, %169
  %178 = icmp ugt i64 %173, %177
  br i1 %178, label %179, label %184

179:                                              ; preds = %164
  %180 = trunc i64 %165 to i32
  call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %53, i32 %180, i32 4) #9
  %181 = load i64, i64* %168, align 8
  %182 = sub i64 0, %181
  %183 = and i64 %182, 3
  br label %184

184:                                              ; preds = %179, %164
  %185 = phi i64 [ %181, %179 ], [ %169, %164 ]
  %186 = phi i64 [ %183, %179 ], [ %171, %164 ]
  %187 = inttoptr i64 %185 to i8*
  %188 = getelementptr inbounds i8, i8* %187, i64 %186
  %189 = getelementptr inbounds i8, i8* %188, i64 %172
  store i8* %189, i8** %167, align 8
  %190 = bitcast i8* %188 to %struct.SkPoint*
  call void @llvm.memset.p0i8.i64(i8* align 4 %188, i8 0, i64 %165, i1 false) #9
  %191 = getelementptr inbounds %class.SkVertices, %class.SkVertices* %1, i64 0, i32 2
  %192 = load %struct.SkPoint*, %struct.SkPoint** %191, align 8
  call void @_ZNK8SkMatrix9mapPointsEP7SkPointPKS0_i(%class.SkMatrix* nonnull %5, %struct.SkPoint* %190, %struct.SkPoint* %192, i32 %10) #9
  %193 = bitcast %struct.SkRect* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %193) #9
  %194 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %8, i64 0, i32 0
  %195 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %8, i64 0, i32 2
  %196 = bitcast %struct.SkRect* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %196, i8 -1, i64 16, i1 false)
  %197 = call zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect* nonnull %8, %struct.SkPoint* %190, i32 %10) #9
  %198 = load float, float* %194, align 4
  %199 = load float, float* %195, align 4
  %200 = fcmp olt float %198, %199
  br i1 %200, label %201, label %208

201:                                              ; preds = %184
  %202 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %8, i64 0, i32 3
  %203 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %8, i64 0, i32 1
  %204 = load float, float* %203, align 4
  %205 = load float, float* %202, align 4
  %206 = fcmp uge float %204, %205
  br i1 %206, label %208, label %207

207:                                              ; preds = %201
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %193) #9
  br label %209

208:                                              ; preds = %184, %201
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %193) #9
  br label %212

209:                                              ; preds = %207, %158
  %210 = phi %struct.SkPoint* [ null, %158 ], [ %190, %207 ]
  %211 = phi %struct.SkPoint3* [ %93, %158 ], [ null, %207 ]
  call void @_ZNK6SkDraw19draw_fixed_verticesEPK10SkVertices11SkBlendModeRK7SkPaintRK8SkMatrixPK7SkPointPK8SkPoint3P12SkArenaAlloc(%class.SkDraw* %0, %class.SkVertices* %1, i32 %2, %class.SkPaint* dereferenceable(72) %3, %class.SkMatrix* nonnull dereferenceable(40) %6, %struct.SkPoint* %210, %struct.SkPoint3* %211, %class.SkArenaAlloc* %53)
  br label %212

212:                                              ; preds = %208, %158, %209
  call void @_ZN12SkArenaAllocD2Ev(%class.SkArenaAlloc* %53) #9
  call void @llvm.lifetime.end.p0i8(i64 768, i8* nonnull %51) #9
  br label %213

213:                                              ; preds = %48, %212
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %30) #9
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %24) #9
  br label %214

214:                                              ; preds = %17, %4, %213
  ret void
}

declare void @_ZNK8SkMatrix20mapHomogeneousPointsEP8SkPoint3PK7SkPointi(%class.SkMatrix*, %struct.SkPoint3*, %struct.SkPoint*, i32) local_unnamed_addr #2

declare void @_ZNK8SkMatrix9mapPointsEP7SkPointPKS0_i(%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32) local_unnamed_addr #2

declare zeroext i1 @_ZNK8SkMatrix17invertNonIdentityEPS_(%class.SkMatrix*, %class.SkMatrix*) local_unnamed_addr #2

declare zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix*) local_unnamed_addr #2

declare zeroext i8 @_ZNK8SkMatrix26computePerspectiveTypeMaskEv(%class.SkMatrix*) local_unnamed_addr #2

declare void @_ZN12SkColorSpace8MakeSRGBEv(%class.sk_sp* sret) local_unnamed_addr #2

declare zeroext i1 @_Z15SkConvertPixelsRK11SkImageInfoPvmS1_PKvm(%struct.SkImageInfo* dereferenceable(24), i8*, i64, %struct.SkImageInfo* dereferenceable(24), i8*, i64) local_unnamed_addr #2

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

declare void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc*, i32, i32) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

declare void @_ZN6SkScan12FillTriangleEPK7SkPointRK12SkRasterClipP9SkBlitter(%struct.SkPoint*, %class.SkRasterClip* dereferenceable(72), %class.SkBlitter*) local_unnamed_addr #2

declare zeroext i1 @_ZN8SkMatrix13setPolyToPolyEPK7SkPointS2_i(%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN12SkArenaAllocD2Ev(%class.SkArenaAlloc*) unnamed_addr #5

declare zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect*, %struct.SkPoint*, i32) local_unnamed_addr #2

declare i8* @_ZN12SkArenaAlloc21allocObjectWithFooterEjj(%class.SkArenaAlloc*, i32, i32) local_unnamed_addr #2

declare void @_ZN12SkArenaAlloc13installFooterEPFPcS0_Ej(%class.SkArenaAlloc*, i8* (i8*)*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZZN12SkArenaAlloc4makeIZNS_4makeI16SkTriColorShaderJbRKbEEEPT_DpOT0_EUlPvE_EEDTclfp_LDnEEEOS5_ENUlPcE_8__invokeESE_(i8*) #8 comdat align 2 {
  %2 = getelementptr inbounds i8, i8* %0, i64 -153
  %3 = bitcast i8* %2 to %class.SkTriColorShader*
  %4 = bitcast i8* %2 to void (%class.SkTriColorShader*)***
  %5 = load void (%class.SkTriColorShader*)**, void (%class.SkTriColorShader*)*** %4, align 8
  %6 = load void (%class.SkTriColorShader*)*, void (%class.SkTriColorShader*)** %5, align 8
  tail call void %6(%class.SkTriColorShader* %3) #9
  ret i8* %2
}

declare void @_ZN12SkShaderBaseC2EPK8SkMatrix(%class.SkShaderBase*, %class.SkMatrix*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN12SkShaderBaseD2Ev(%class.SkShaderBase*) unnamed_addr #5

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN16SkTriColorShaderD0Ev(%class.SkTriColorShader*) unnamed_addr #8 comdat align 2 {
  %2 = bitcast %class.SkTriColorShader* %0 to %class.SkShaderBase*
  tail call void @_ZN12SkShaderBaseD2Ev(%class.SkShaderBase* %2) #9
  %3 = bitcast %class.SkTriColorShader* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK12SkRefCntBase16internal_disposeEv(%class.SkRefCntBase*) unnamed_addr #3 comdat align 2 {
  %2 = icmp eq %class.SkRefCntBase* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = bitcast %class.SkRefCntBase* %0 to void (%class.SkRefCntBase*)***
  %5 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %4, align 8
  %6 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %5, i64 1
  %7 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %6, align 8
  tail call void %7(%class.SkRefCntBase* nonnull %0) #9
  br label %8

8:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void (%class.sk_sp.19*, %class.SkReadBuffer*)* @_ZNK16SkTriColorShader10getFactoryEv(%class.SkTriColorShader*) unnamed_addr #3 comdat align 2 {
  ret void (%class.sk_sp.19*, %class.SkReadBuffer*)* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK16SkTriColorShader11getTypeNameEv(%class.SkTriColorShader*) unnamed_addr #3 comdat align 2 {
  ret i8* null
}

declare void @_ZNK12SkShaderBase7flattenER13SkWriteBuffer(%class.SkShaderBase*, %class.SkWriteBuffer* dereferenceable(56)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK12SkShaderBase18getFlattenableTypeEv(%class.SkShaderBase*) unnamed_addr #3 comdat align 2 {
  ret i32 8
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK16SkTriColorShader8isOpaqueEv(%class.SkTriColorShader*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %class.SkTriColorShader, %class.SkTriColorShader* %0, i64 0, i32 3
  %3 = load i8, i8* %2, align 4, !range !2
  %4 = icmp ne i8 %3, 0
  ret i1 %4
}

declare i32 @_ZNK8SkShader11asAGradientEPNS_12GradientInfoE(%class.SkShader*, %"struct.SkShader::GradientInfo"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK12SkShaderBase10isConstantEv(%class.SkShaderBase*) unnamed_addr #3 comdat align 2 {
  ret i1 false
}

declare void @_ZNK12SkShaderBase19asFragmentProcessorERK8GrFPArgs() unnamed_addr

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %class.SkImage* @_ZNK12SkShaderBase10onIsAImageEP8SkMatrixP10SkTileMode(%class.SkShaderBase*, %class.SkMatrix*, i32*) unnamed_addr #3 comdat align 2 {
  ret %class.SkImage* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %class.SkRuntimeEffect* @_ZNK12SkShaderBase15asRuntimeEffectEv(%class.SkShaderBase*) unnamed_addr #3 comdat align 2 {
  ret %class.SkRuntimeEffect* null
}

declare void @_ZNK12SkShaderBase24makeAsALocalMatrixShaderEP8SkMatrix(%class.sk_sp.6* sret, %class.SkShaderBase*, %class.SkMatrix*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.SkShaderBase::Context"* @_ZNK16SkTriColorShader13onMakeContextERKN12SkShaderBase10ContextRecEP12SkArenaAlloc(%class.SkTriColorShader*, %"struct.SkShaderBase::ContextRec"* dereferenceable(40), %class.SkArenaAlloc*) unnamed_addr #3 comdat align 2 {
  ret %"class.SkShaderBase::Context"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK12SkShaderBase18onAsLuminanceColorEPj(%class.SkShaderBase*, i32*) unnamed_addr #3 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK16SkTriColorShader14onAppendStagesERK10SkStageRec(%class.SkTriColorShader*, %struct.SkStageRec* dereferenceable(56)) unnamed_addr #3 comdat align 2 {
  %3 = getelementptr inbounds %struct.SkStageRec, %struct.SkStageRec* %1, i64 0, i32 0
  %4 = load %class.SkRasterPipeline*, %class.SkRasterPipeline** %3, align 8
  tail call void @_ZN16SkRasterPipeline6appendENS_10StockStageEPv(%class.SkRasterPipeline* %4, i32 21, i8* null) #9
  %5 = getelementptr inbounds %class.SkTriColorShader, %class.SkTriColorShader* %0, i64 0, i32 4
  %6 = load i8, i8* %5, align 1, !range !2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %12, label %8

8:                                                ; preds = %2
  %9 = load %class.SkRasterPipeline*, %class.SkRasterPipeline** %3, align 8
  %10 = getelementptr inbounds %class.SkTriColorShader, %class.SkTriColorShader* %0, i64 0, i32 2
  %11 = bitcast %class.SkMatrix* %10 to i8*
  tail call void @_ZN16SkRasterPipeline6appendENS_10StockStageEPv(%class.SkRasterPipeline* %9, i32 132, i8* %11) #9
  br label %12

12:                                               ; preds = %2, %8
  %13 = load %class.SkRasterPipeline*, %class.SkRasterPipeline** %3, align 8
  %14 = getelementptr inbounds %class.SkTriColorShader, %class.SkTriColorShader* %0, i64 0, i32 1
  %15 = bitcast %struct.Matrix43* %14 to i8*
  tail call void @_ZN16SkRasterPipeline6appendENS_10StockStageEPv(%class.SkRasterPipeline* %13, i32 131, i8* %15) #9
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %class.SkStageUpdater* @_ZNK12SkShaderBase23onAppendUpdatableStagesERK10SkStageRec(%class.SkShaderBase*, %struct.SkStageRec* dereferenceable(56)) unnamed_addr #3 comdat align 2 {
  ret %class.SkStageUpdater* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK16SkTriColorShader9onProgramEPN4skvm7BuilderENS0_5CoordES3_NS0_5ColorERK16SkMatrixProviderPK8SkMatrixRK11SkColorInfoPNS0_8UniformsEP12SkArenaAlloc(%"struct.skvm::Color"* noalias sret, %class.SkTriColorShader*, %"class.skvm::Builder"*, %"struct.skvm::Coord"* byval(%"struct.skvm::Coord") align 8, %"struct.skvm::Coord"* byval(%"struct.skvm::Coord") align 8, %"struct.skvm::Color"* byval(%"struct.skvm::Color") align 8, %class.SkMatrixProvider* dereferenceable(112), %class.SkMatrix*, %class.SkColorInfo* dereferenceable(16), %"struct.skvm::Uniforms"*, %class.SkArenaAlloc*) unnamed_addr #3 comdat align 2 {
  %12 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 0, i32 0
  store %"class.skvm::Builder"* null, %"class.skvm::Builder"** %12, align 8
  %13 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 0, i32 1
  store i32 -1, i32* %13, align 8
  %14 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 1, i32 0
  store %"class.skvm::Builder"* null, %"class.skvm::Builder"** %14, align 8
  %15 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 1, i32 1
  store i32 -1, i32* %15, align 8
  %16 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 2, i32 0
  store %"class.skvm::Builder"* null, %"class.skvm::Builder"** %16, align 8
  %17 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 2, i32 1
  store i32 -1, i32* %17, align 8
  %18 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 3, i32 0
  store %"class.skvm::Builder"* null, %"class.skvm::Builder"** %18, align 8
  %19 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 3, i32 1
  store i32 -1, i32* %19, align 8
  ret void
}

declare void @_ZN16SkRasterPipeline6appendENS_10StockStageEPv(%class.SkRasterPipeline*, i32, i8*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZZN12SkArenaAlloc4makeIZNS_4makeI14SkShader_BlendJR11SkBlendMode5sk_spI16SkTriColorShaderES5_I8SkShaderEEEEPT_DpOT0_EUlPvE_EEDTclfp_LDnEEEOSA_ENUlPcE_8__invokeESJ_(i8*) #8 comdat align 2 {
  %2 = getelementptr inbounds i8, i8* %0, i64 -89
  %3 = bitcast i8* %2 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [21 x i8*] }, { [21 x i8*] }* @_ZTV14SkShader_Blend, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds i8, i8* %0, i64 -25
  %5 = bitcast i8* %4 to %class.SkShader**
  %6 = load %class.SkShader*, %class.SkShader** %5, align 8
  %7 = icmp eq %class.SkShader* %6, null
  br i1 %7, label %18, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %class.SkShader, %class.SkShader* %6, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = atomicrmw add i32* %9, i32 -1 acq_rel
  %11 = icmp eq i32 %10, 1
  br i1 %11, label %12, label %18

12:                                               ; preds = %8
  %13 = bitcast %class.SkShader* %6 to %class.SkRefCntBase*
  %14 = bitcast %class.SkShader* %6 to void (%class.SkRefCntBase*)***
  %15 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %14, align 8
  %16 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %15, i64 2
  %17 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %16, align 8
  tail call void %17(%class.SkRefCntBase* nonnull %13) #9
  br label %18

18:                                               ; preds = %12, %8, %1
  %19 = getelementptr inbounds i8, i8* %0, i64 -33
  %20 = bitcast i8* %19 to %class.SkShader**
  %21 = load %class.SkShader*, %class.SkShader** %20, align 8
  %22 = icmp eq %class.SkShader* %21, null
  br i1 %22, label %33, label %23

23:                                               ; preds = %18
  %24 = getelementptr inbounds %class.SkShader, %class.SkShader* %21, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = atomicrmw add i32* %24, i32 -1 acq_rel
  %26 = icmp eq i32 %25, 1
  br i1 %26, label %27, label %33

27:                                               ; preds = %23
  %28 = bitcast %class.SkShader* %21 to %class.SkRefCntBase*
  %29 = bitcast %class.SkShader* %21 to void (%class.SkRefCntBase*)***
  %30 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %29, align 8
  %31 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %30, i64 2
  %32 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %31, align 8
  tail call void %32(%class.SkRefCntBase* nonnull %28) #9
  br label %33

33:                                               ; preds = %18, %23, %27
  %34 = bitcast i8* %2 to %class.SkShaderBase*
  tail call void @_ZN12SkShaderBaseD2Ev(%class.SkShaderBase* %34) #9
  ret i8* %2
}

declare void @_ZN12SkArenaAllocC2EPcmm(%class.SkArenaAlloc*, i8*, i64, i64) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN16SkMatrixProviderD2Ev(%class.SkMatrixProvider*) unnamed_addr #3 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN25SkPreConcatMatrixProviderD0Ev(%class.SkPreConcatMatrixProvider*) unnamed_addr #8 comdat align 2 {
  %2 = bitcast %class.SkPreConcatMatrixProvider* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK25SkPreConcatMatrixProvider16getLocalToMarkerEjP5SkM44(%class.SkPreConcatMatrixProvider*, i32, %class.SkM44*) unnamed_addr #3 comdat align 2 {
  %4 = getelementptr inbounds %class.SkPreConcatMatrixProvider, %class.SkPreConcatMatrixProvider* %0, i64 0, i32 1
  %5 = load %class.SkMatrixProvider*, %class.SkMatrixProvider** %4, align 8
  %6 = bitcast %class.SkMatrixProvider* %5 to i1 (%class.SkMatrixProvider*, i32, %class.SkM44*)***
  %7 = load i1 (%class.SkMatrixProvider*, i32, %class.SkM44*)**, i1 (%class.SkMatrixProvider*, i32, %class.SkM44*)*** %6, align 8
  %8 = getelementptr inbounds i1 (%class.SkMatrixProvider*, i32, %class.SkM44*)*, i1 (%class.SkMatrixProvider*, i32, %class.SkM44*)** %7, i64 2
  %9 = load i1 (%class.SkMatrixProvider*, i32, %class.SkM44*)*, i1 (%class.SkMatrixProvider*, i32, %class.SkM44*)** %8, align 8
  %10 = tail call zeroext i1 %9(%class.SkMatrixProvider* %5, i32 %1, %class.SkM44* %2) #9
  br i1 %10, label %11, label %16

11:                                               ; preds = %3
  %12 = icmp eq %class.SkM44* %2, null
  br i1 %12, label %16, label %13

13:                                               ; preds = %11
  %14 = getelementptr inbounds %class.SkPreConcatMatrixProvider, %class.SkPreConcatMatrixProvider* %0, i64 0, i32 2
  %15 = tail call dereferenceable(64) %class.SkM44* @_ZN5SkM449preConcatERK8SkMatrix(%class.SkM44* nonnull %2, %class.SkMatrix* dereferenceable(40) %14) #9
  br label %16

16:                                               ; preds = %3, %13, %11
  %17 = phi i1 [ true, %11 ], [ true, %13 ], [ false, %3 ]
  ret i1 %17
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK25SkPreConcatMatrixProvider29localToDeviceHitsPixelCentersEv(%class.SkPreConcatMatrixProvider*) unnamed_addr #3 comdat align 2 {
  ret i1 true
}

declare dereferenceable(64) %class.SkM44* @_ZN5SkM449setConcatERKS_S1_(%class.SkM44*, %class.SkM44* dereferenceable(64), %class.SkM44* dereferenceable(64)) local_unnamed_addr #2

declare dereferenceable(64) %class.SkM44* @_ZN5SkM449preConcatERK8SkMatrix(%class.SkM44*, %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN11SkImageInfo4MakeEii11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE: argument 0"}
!5 = distinct !{!5, !"_ZN11SkImageInfo4MakeEii11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_Z9sk_ref_spI12SkColorSpaceE5sk_spIT_EPS2_: argument 0"}
!8 = distinct !{!8, !"_Z9sk_ref_spI12SkColorSpaceE5sk_spIT_EPS2_"}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZN11SkImageInfo4MakeEii11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE: argument 0"}
!11 = distinct !{!11, !"_ZN11SkImageInfo4MakeEii11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE"}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.isvectorized", i32 1}
!14 = distinct !{!14, !15}
!15 = !{!"llvm.loop.unroll.disable"}
!16 = distinct !{!16, !17, !13}
!17 = !{!"llvm.loop.unroll.runtime.disable"}
!18 = !{!19}
!19 = distinct !{!19, !20, !"_Z9sk_ref_spI16SkTriColorShaderE5sk_spIT_EPS2_: argument 0"}
!20 = distinct !{!20, !"_Z9sk_ref_spI16SkTriColorShaderE5sk_spIT_EPS2_"}
!21 = !{!22}
!22 = distinct !{!22, !23, !"_Z9sk_ref_spI8SkShaderE5sk_spIT_EPS2_: argument 0"}
!23 = distinct !{!23, !"_Z9sk_ref_spI8SkShaderE5sk_spIT_EPS2_"}
!24 = !{!25}
!25 = distinct !{!25, !26, !"_Z9sk_ref_spI8SkShaderE5sk_spIT_EPS2_: argument 0"}
!26 = distinct !{!26, !"_Z9sk_ref_spI8SkShaderE5sk_spIT_EPS2_"}
!27 = !{!28}
!28 = distinct !{!28, !29, !"_ZNK12SkRasterClip10clipShaderEv: argument 0"}
!29 = distinct !{!29, !"_ZNK12SkRasterClip10clipShaderEv"}
!30 = !{!31}
!31 = distinct !{!31, !32, !"_ZNK12SkRasterClip10clipShaderEv: argument 0"}
!32 = distinct !{!32, !"_ZNK12SkRasterClip10clipShaderEv"}
!33 = !{!34}
!34 = distinct !{!34, !35, !"_ZNK5SkM445asM33Ev: argument 0"}
!35 = distinct !{!35, !"_ZNK5SkM445asM33Ev"}
!36 = !{!37, !34}
!37 = distinct !{!37, !38, !"_ZN8SkMatrix7MakeAllEfffffffff: argument 0"}
!38 = distinct !{!38, !"_ZN8SkMatrix7MakeAllEfffffffff"}
!39 = !{!40}
!40 = distinct !{!40, !41, !"_ZNK12SkRasterClip10clipShaderEv: argument 0"}
!41 = distinct !{!41, !"_ZNK12SkRasterClip10clipShaderEv"}
!42 = distinct !{!42, !13}
!43 = distinct !{!43, !17, !13}
!44 = distinct !{!44, !15}
