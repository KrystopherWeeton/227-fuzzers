; ModuleID = '../../third_party/vulkan-deps/spirv-tools/src/source/opt/instruction_list.cpp'
source_filename = "../../third_party/vulkan-deps/spirv-tools/src/source/opt/instruction_list.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.spvtools::opt::InstructionList::iterator" = type { %"class.spvtools::utils::IntrusiveList<spvtools::opt::Instruction>::iterator_template" }
%"class.spvtools::utils::IntrusiveList<spvtools::opt::Instruction>::iterator_template" = type { %"class.spvtools::opt::Instruction"* }
%"class.spvtools::opt::Instruction" = type { %"class.spvtools::utils::IntrusiveNodeBase.base", %"class.spvtools::opt::IRContext"*, i32, i8, i8, i32, %"class.std::__1::vector", %"class.std::__1::vector.11", %"class.spvtools::opt::DebugScope" }
%"class.spvtools::utils::IntrusiveNodeBase.base" = type <{ i32 (...)**, %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"*, i8 }>
%"class.spvtools::opt::IRContext" = type opaque
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.spvtools::opt::Operand"*, %"struct.spvtools::opt::Operand"*, %"class.std::__1::__compressed_pair.6" }
%"struct.spvtools::opt::Operand" = type { i32, %"class.spvtools::utils::SmallVector" }
%"class.spvtools::utils::SmallVector" = type { i32 (...)**, i64, i32*, [2 x %"struct.std::__1::aligned_storage<4, 4>::type"], %"class.std::__1::unique_ptr" }
%"struct.std::__1::aligned_storage<4, 4>::type" = type { [4 x i8] }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::vector.0"* }
%"class.std::__1::vector.0" = type { %"class.std::__1::__vector_base.1" }
%"class.std::__1::__vector_base.1" = type { i32*, i32*, %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { i32* }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.spvtools::opt::Operand"* }
%"class.std::__1::vector.11" = type { %"class.std::__1::__vector_base.12" }
%"class.std::__1::__vector_base.12" = type { %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"*, %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"class.spvtools::opt::Instruction"* }
%"class.spvtools::opt::DebugScope" = type { i32, i32 }
%"class.std::__1::vector.18" = type { %"class.std::__1::__vector_base.19" }
%"class.std::__1::__vector_base.19" = type { %"class.std::__1::unique_ptr.20"*, %"class.std::__1::unique_ptr.20"*, %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::unique_ptr.20" = type { %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"class.std::__1::unique_ptr.20"* }
%"class.spvtools::utils::IntrusiveNodeBase" = type <{ i32 (...)**, %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"*, i8, [7 x i8] }>

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8spvtools3opt15InstructionList8iterator12InsertBeforeEONSt3__16vectorINS3_10unique_ptrINS0_11InstructionENS3_14default_deleteIS6_EEEENS3_9allocatorIS9_EEEE(%"class.spvtools::opt::InstructionList::iterator"* noalias nocapture sret, %"class.spvtools::opt::InstructionList::iterator"* nocapture readonly, %"class.std::__1::vector.18"* nocapture dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %2, i64 0, i32 0, i32 0
  %5 = load %"class.std::__1::unique_ptr.20"*, %"class.std::__1::unique_ptr.20"** %4, align 8
  %6 = bitcast %"class.std::__1::unique_ptr.20"* %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %2, i64 0, i32 0, i32 1
  %9 = load %"class.std::__1::unique_ptr.20"*, %"class.std::__1::unique_ptr.20"** %8, align 8
  %10 = icmp eq %"class.std::__1::unique_ptr.20"* %5, %9
  br i1 %10, label %30, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.spvtools::opt::InstructionList::iterator", %"class.spvtools::opt::InstructionList::iterator"* %1, i64 0, i32 0, i32 0
  br label %33

13:                                               ; preds = %55
  %14 = load %"class.std::__1::unique_ptr.20"*, %"class.std::__1::unique_ptr.20"** %4, align 8
  %15 = load %"class.std::__1::unique_ptr.20"*, %"class.std::__1::unique_ptr.20"** %8, align 8
  %16 = icmp eq %"class.std::__1::unique_ptr.20"* %15, %14
  br i1 %16, label %30, label %17

17:                                               ; preds = %13, %28
  %18 = phi %"class.std::__1::unique_ptr.20"* [ %19, %28 ], [ %15, %13 ]
  %19 = getelementptr inbounds %"class.std::__1::unique_ptr.20", %"class.std::__1::unique_ptr.20"* %18, i64 -1
  %20 = getelementptr inbounds %"class.std::__1::unique_ptr.20", %"class.std::__1::unique_ptr.20"* %19, i64 0, i32 0, i32 0, i32 0
  %21 = load %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"** %20, align 8
  store %"class.spvtools::opt::Instruction"* null, %"class.spvtools::opt::Instruction"** %20, align 8
  %22 = icmp eq %"class.spvtools::opt::Instruction"* %21, null
  br i1 %22, label %28, label %23

23:                                               ; preds = %17
  %24 = bitcast %"class.spvtools::opt::Instruction"* %21 to void (%"class.spvtools::opt::Instruction"*)***
  %25 = load void (%"class.spvtools::opt::Instruction"*)**, void (%"class.spvtools::opt::Instruction"*)*** %24, align 8
  %26 = getelementptr inbounds void (%"class.spvtools::opt::Instruction"*)*, void (%"class.spvtools::opt::Instruction"*)** %25, i64 1
  %27 = load void (%"class.spvtools::opt::Instruction"*)*, void (%"class.spvtools::opt::Instruction"*)** %26, align 8
  tail call void %27(%"class.spvtools::opt::Instruction"* nonnull %21) #2
  br label %28

28:                                               ; preds = %23, %17
  %29 = icmp eq %"class.std::__1::unique_ptr.20"* %19, %14
  br i1 %29, label %30, label %17

30:                                               ; preds = %28, %3, %13
  %31 = phi %"class.std::__1::unique_ptr.20"* [ %14, %13 ], [ %5, %3 ], [ %14, %28 ]
  store %"class.std::__1::unique_ptr.20"* %31, %"class.std::__1::unique_ptr.20"** %8, align 8
  %32 = bitcast %"class.spvtools::opt::InstructionList::iterator"* %0 to i64*
  store i64 %7, i64* %32, align 8
  ret void

33:                                               ; preds = %11, %55
  %34 = phi %"class.std::__1::unique_ptr.20"* [ %5, %11 ], [ %66, %55 ]
  %35 = getelementptr inbounds %"class.std::__1::unique_ptr.20", %"class.std::__1::unique_ptr.20"* %34, i64 0, i32 0, i32 0, i32 0
  %36 = bitcast %"class.std::__1::unique_ptr.20"* %34 to %"class.spvtools::utils::IntrusiveNodeBase"**
  %37 = load %"class.spvtools::utils::IntrusiveNodeBase"*, %"class.spvtools::utils::IntrusiveNodeBase"** %36, align 8
  store %"class.spvtools::opt::Instruction"* null, %"class.spvtools::opt::Instruction"** %35, align 8
  %38 = load %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"** %12, align 8
  %39 = getelementptr inbounds %"class.spvtools::utils::IntrusiveNodeBase", %"class.spvtools::utils::IntrusiveNodeBase"* %37, i64 0, i32 1
  %40 = load %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"** %39, align 8
  %41 = icmp eq %"class.spvtools::opt::Instruction"* %40, null
  br i1 %41, label %55, label %42

42:                                               ; preds = %33
  %43 = getelementptr inbounds %"class.spvtools::utils::IntrusiveNodeBase", %"class.spvtools::utils::IntrusiveNodeBase"* %37, i64 0, i32 2
  %44 = bitcast %"class.spvtools::opt::Instruction"** %43 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %40, i64 0, i32 0, i32 2
  %47 = bitcast %"class.spvtools::opt::Instruction"** %46 to i64*
  store i64 %45, i64* %47, align 8
  %48 = bitcast %"class.spvtools::opt::Instruction"** %39 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = bitcast %"class.spvtools::opt::Instruction"** %43 to %"class.spvtools::utils::IntrusiveNodeBase"**
  %51 = load %"class.spvtools::utils::IntrusiveNodeBase"*, %"class.spvtools::utils::IntrusiveNodeBase"** %50, align 8
  %52 = getelementptr inbounds %"class.spvtools::utils::IntrusiveNodeBase", %"class.spvtools::utils::IntrusiveNodeBase"* %51, i64 0, i32 1
  %53 = bitcast %"class.spvtools::opt::Instruction"** %52 to i64*
  store i64 %49, i64* %53, align 8
  %54 = bitcast %"class.spvtools::opt::Instruction"** %39 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %54, i8 0, i64 16, i1 false) #2
  br label %55

55:                                               ; preds = %33, %42
  store %"class.spvtools::opt::Instruction"* %38, %"class.spvtools::opt::Instruction"** %39, align 8
  %56 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %38, i64 0, i32 0, i32 2
  %57 = bitcast %"class.spvtools::opt::Instruction"** %56 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = getelementptr inbounds %"class.spvtools::utils::IntrusiveNodeBase", %"class.spvtools::utils::IntrusiveNodeBase"* %37, i64 0, i32 2
  %60 = bitcast %"class.spvtools::opt::Instruction"** %59 to i64*
  store i64 %58, i64* %60, align 8
  %61 = bitcast %"class.spvtools::opt::Instruction"** %56 to %"class.spvtools::utils::IntrusiveNodeBase"**
  store %"class.spvtools::utils::IntrusiveNodeBase"* %37, %"class.spvtools::utils::IntrusiveNodeBase"** %61, align 8
  %62 = bitcast %"class.spvtools::opt::Instruction"** %59 to %"class.spvtools::utils::IntrusiveNodeBase"**
  %63 = load %"class.spvtools::utils::IntrusiveNodeBase"*, %"class.spvtools::utils::IntrusiveNodeBase"** %62, align 8
  %64 = getelementptr inbounds %"class.spvtools::utils::IntrusiveNodeBase", %"class.spvtools::utils::IntrusiveNodeBase"* %63, i64 0, i32 1
  %65 = bitcast %"class.spvtools::opt::Instruction"** %64 to %"class.spvtools::utils::IntrusiveNodeBase"**
  store %"class.spvtools::utils::IntrusiveNodeBase"* %37, %"class.spvtools::utils::IntrusiveNodeBase"** %65, align 8
  %66 = getelementptr inbounds %"class.std::__1::unique_ptr.20", %"class.std::__1::unique_ptr.20"* %34, i64 1
  %67 = icmp eq %"class.std::__1::unique_ptr.20"* %66, %9
  br i1 %67, label %13, label %33
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8spvtools3opt15InstructionList8iterator12InsertBeforeEONSt3__110unique_ptrINS0_11InstructionENS3_14default_deleteIS5_EEEE(%"class.spvtools::opt::InstructionList::iterator"* noalias nocapture sret, %"class.spvtools::opt::InstructionList::iterator"* nocapture readonly, %"class.std::__1::unique_ptr.20"* nocapture dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.std::__1::unique_ptr.20", %"class.std::__1::unique_ptr.20"* %2, i64 0, i32 0, i32 0, i32 0
  %5 = bitcast %"class.std::__1::unique_ptr.20"* %2 to %"class.spvtools::utils::IntrusiveNodeBase"**
  %6 = load %"class.spvtools::utils::IntrusiveNodeBase"*, %"class.spvtools::utils::IntrusiveNodeBase"** %5, align 8
  %7 = getelementptr inbounds %"class.spvtools::opt::InstructionList::iterator", %"class.spvtools::opt::InstructionList::iterator"* %1, i64 0, i32 0, i32 0
  %8 = load %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"** %7, align 8
  %9 = getelementptr inbounds %"class.spvtools::utils::IntrusiveNodeBase", %"class.spvtools::utils::IntrusiveNodeBase"* %6, i64 0, i32 1
  %10 = load %"class.spvtools::opt::Instruction"*, %"class.spvtools::opt::Instruction"** %9, align 8
  %11 = icmp eq %"class.spvtools::opt::Instruction"* %10, null
  br i1 %11, label %25, label %12

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"class.spvtools::utils::IntrusiveNodeBase", %"class.spvtools::utils::IntrusiveNodeBase"* %6, i64 0, i32 2
  %14 = bitcast %"class.spvtools::opt::Instruction"** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %10, i64 0, i32 0, i32 2
  %17 = bitcast %"class.spvtools::opt::Instruction"** %16 to i64*
  store i64 %15, i64* %17, align 8
  %18 = bitcast %"class.spvtools::opt::Instruction"** %9 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.spvtools::opt::Instruction"** %13 to %"class.spvtools::utils::IntrusiveNodeBase"**
  %21 = load %"class.spvtools::utils::IntrusiveNodeBase"*, %"class.spvtools::utils::IntrusiveNodeBase"** %20, align 8
  %22 = getelementptr inbounds %"class.spvtools::utils::IntrusiveNodeBase", %"class.spvtools::utils::IntrusiveNodeBase"* %21, i64 0, i32 1
  %23 = bitcast %"class.spvtools::opt::Instruction"** %22 to i64*
  store i64 %19, i64* %23, align 8
  %24 = bitcast %"class.spvtools::opt::Instruction"** %9 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 16, i1 false) #2
  br label %25

25:                                               ; preds = %3, %12
  store %"class.spvtools::opt::Instruction"* %8, %"class.spvtools::opt::Instruction"** %9, align 8
  %26 = getelementptr inbounds %"class.spvtools::opt::Instruction", %"class.spvtools::opt::Instruction"* %8, i64 0, i32 0, i32 2
  %27 = bitcast %"class.spvtools::opt::Instruction"** %26 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds %"class.spvtools::utils::IntrusiveNodeBase", %"class.spvtools::utils::IntrusiveNodeBase"* %6, i64 0, i32 2
  %30 = bitcast %"class.spvtools::opt::Instruction"** %29 to i64*
  store i64 %28, i64* %30, align 8
  %31 = bitcast %"class.spvtools::opt::Instruction"** %26 to %"class.spvtools::utils::IntrusiveNodeBase"**
  store %"class.spvtools::utils::IntrusiveNodeBase"* %6, %"class.spvtools::utils::IntrusiveNodeBase"** %31, align 8
  %32 = bitcast %"class.spvtools::opt::Instruction"** %29 to %"class.spvtools::utils::IntrusiveNodeBase"**
  %33 = load %"class.spvtools::utils::IntrusiveNodeBase"*, %"class.spvtools::utils::IntrusiveNodeBase"** %32, align 8
  %34 = getelementptr inbounds %"class.spvtools::utils::IntrusiveNodeBase", %"class.spvtools::utils::IntrusiveNodeBase"* %33, i64 0, i32 1
  %35 = bitcast %"class.spvtools::opt::Instruction"** %34 to %"class.spvtools::utils::IntrusiveNodeBase"**
  store %"class.spvtools::utils::IntrusiveNodeBase"* %6, %"class.spvtools::utils::IntrusiveNodeBase"** %35, align 8
  %36 = bitcast %"class.std::__1::unique_ptr.20"* %2 to i64*
  %37 = load i64, i64* %36, align 8
  store %"class.spvtools::opt::Instruction"* null, %"class.spvtools::opt::Instruction"** %4, align 8
  %38 = bitcast %"class.spvtools::opt::InstructionList::iterator"* %0 to i64*
  store i64 %37, i64* %38, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
