; ModuleID = '../../base/synchronization/condition_variable_posix.cc'
source_filename = "../../base/synchronization/condition_variable_posix.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::ConditionVariable" = type <{ %union.pthread_cond_t, %union.pthread_mutex_t*, i8, [7 x i8] }>
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon.0, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon = type { i64 }
%union.anon.0 = type { i64 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_condattr_t = type { i32 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.2 }
%union.anon.2 = type { %"class.base::internal::ScopedBlockingCallWithBaseSyncPrimitives" }
%"class.base::internal::ScopedBlockingCallWithBaseSyncPrimitives" = type { %"class.base::internal::UncheckedScopedBlockingCall" }
%"class.base::internal::UncheckedScopedBlockingCall" = type { %"class.base::internal::BlockingObserver"*, %"class.base::internal::UncheckedScopedBlockingCall"*, i8, [7 x i8], %"class.base::debug::ScopedActivity", %"class.absl::optional.18" }
%"class.base::internal::BlockingObserver" = type { i32 (...)** }
%"class.base::debug::ScopedActivity" = type <{ %"class.base::debug::GlobalActivityTracker::ScopedThreadActivity", i32, [4 x i8] }>
%"class.base::debug::GlobalActivityTracker::ScopedThreadActivity" = type { %"class.base::debug::ThreadActivityTracker::ScopedActivity.base", %"class.std::__1::unique_ptr" }
%"class.base::debug::ThreadActivityTracker::ScopedActivity.base" = type <{ %"class.base::debug::ThreadActivityTracker"*, i32 }>
%"class.base::debug::ThreadActivityTracker" = type <{ i32 (...)**, %"struct.base::debug::ThreadActivityTracker::Header"*, %"struct.base::debug::Activity"*, i32, i8, [3 x i8] }>
%"struct.base::debug::ThreadActivityTracker::Header" = type opaque
%"struct.base::debug::Activity" = type { i64, i64, i64, [10 x i64], i32, i32, i8, [7 x i8], %"union.base::debug::ActivityData" }
%"union.base::debug::ActivityData" = type { %struct.anon.4 }
%struct.anon.4 = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.base::debug::ActivityUserData"* }
%"class.base::debug::ActivityUserData" = type { i32 (...)**, %"class.std::__1::map", i8*, i64, %"struct.base::debug::ActivityUserData::MemoryHeader"*, i32, i64, i64 }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.10", %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { i64 }
%"struct.base::debug::ActivityUserData::MemoryHeader" = type { %"struct.base::debug::OwningProcess" }
%"struct.base::debug::OwningProcess" = type { %"struct.std::__1::atomic", i32, i64, i64 }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.16" }
%"struct.std::__1::__atomic_base.16" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.absl::optional.18" = type { %"class.absl::optional_internal::optional_data.19" }
%"class.absl::optional_internal::optional_data.19" = type { %"class.absl::optional_internal::optional_data_base.20" }
%"class.absl::optional_internal::optional_data_base.20" = type { %"class.absl::optional_internal::optional_data_dtor_base.21" }
%"class.absl::optional_internal::optional_data_dtor_base.21" = type { i8, %union.anon.22 }
%union.anon.22 = type { %"class.base::internal::IOJankMonitoringWindow::ScopedMonitoredCall" }
%"class.base::internal::IOJankMonitoringWindow::ScopedMonitoredCall" = type { %"class.base::TimeTicks", %class.scoped_refptr }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%class.scoped_refptr = type { %"class.base::internal::IOJankMonitoringWindow"* }
%"class.base::internal::IOJankMonitoringWindow" = type <{ %"class.base::RefCountedThreadSafe", [4 x i8], %"class.base::Lock", [60 x i64], %"class.base::TimeTicks", %class.scoped_refptr, i8, [7 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic.23" }
%"struct.std::__1::atomic.23" = type { %"struct.std::__1::__atomic_base.24" }
%"struct.std::__1::__atomic_base.24" = type { %"struct.std::__1::__atomic_base.25" }
%"struct.std::__1::__atomic_base.25" = type { %"struct.std::__1::__cxx_atomic_impl.26" }
%"struct.std::__1::__cxx_atomic_impl.26" = type { %"struct.std::__1::__cxx_atomic_base_impl.27" }
%"struct.std::__1::__cxx_atomic_base_impl.27" = type { i32 }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.base::TimeDelta" = type { i64 }
%struct.timespec = type { i64, i64 }

@.str = private unnamed_addr constant [5 x i8] c"Wait\00", align 1
@.str.1 = private unnamed_addr constant [55 x i8] c"../../base/synchronization/condition_variable_posix.cc\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"TimedWait\00", align 1

@_ZN4base17ConditionVariableC1EPNS_4LockE = hidden unnamed_addr alias void (%"class.base::ConditionVariable"*, %"class.base::Lock"*), void (%"class.base::ConditionVariable"*, %"class.base::Lock"*)* @_ZN4base17ConditionVariableC2EPNS_4LockE
@_ZN4base17ConditionVariableD1Ev = hidden unnamed_addr alias void (%"class.base::ConditionVariable"*), void (%"class.base::ConditionVariable"*)* @_ZN4base17ConditionVariableD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base17ConditionVariableC2EPNS_4LockE(%"class.base::ConditionVariable"*, %"class.base::Lock"*) unnamed_addr #0 align 2 {
  %3 = alloca %union.pthread_condattr_t, align 4
  %4 = getelementptr inbounds %"class.base::ConditionVariable", %"class.base::ConditionVariable"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %1, i64 0, i32 0, i32 0
  store %union.pthread_mutex_t* %5, %union.pthread_mutex_t** %4, align 8
  %6 = getelementptr inbounds %"class.base::ConditionVariable", %"class.base::ConditionVariable"* %0, i64 0, i32 2
  store i8 1, i8* %6, align 8
  %7 = bitcast %union.pthread_condattr_t* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #4
  %8 = getelementptr inbounds %union.pthread_condattr_t, %union.pthread_condattr_t* %3, i64 0, i32 0
  store i32 -1431655766, i32* %8, align 4
  %9 = call i32 @pthread_condattr_init(%union.pthread_condattr_t* nonnull %3) #4
  %10 = call i32 @pthread_condattr_setclock(%union.pthread_condattr_t* nonnull %3, i32 1) #4
  %11 = getelementptr inbounds %"class.base::ConditionVariable", %"class.base::ConditionVariable"* %0, i64 0, i32 0
  %12 = call i32 @pthread_cond_init(%union.pthread_cond_t* %11, %union.pthread_condattr_t* nonnull %3) #4
  %13 = call i32 @pthread_condattr_destroy(%union.pthread_condattr_t* nonnull %3) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind
declare i32 @pthread_condattr_init(%union.pthread_condattr_t*) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @pthread_condattr_setclock(%union.pthread_condattr_t*, i32) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @pthread_cond_init(%union.pthread_cond_t*, %union.pthread_condattr_t*) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @pthread_condattr_destroy(%union.pthread_condattr_t*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base17ConditionVariableD2Ev(%"class.base::ConditionVariable"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::ConditionVariable", %"class.base::ConditionVariable"* %0, i64 0, i32 0
  %3 = tail call i32 @pthread_cond_destroy(%union.pthread_cond_t* %2) #4
  ret void
}

; Function Attrs: nounwind
declare i32 @pthread_cond_destroy(%union.pthread_cond_t*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base17ConditionVariable4WaitEv(%"class.base::ConditionVariable"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.absl::optional", align 8
  %3 = alloca %"class.base::Location", align 8
  %4 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %4) #4
  %5 = bitcast %"class.absl::optional"* %2 to i64*
  store i64 -6148914691236517206, i64* %5, align 8
  store i8 0, i8* %4, align 8
  %6 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %2, i64 0, i32 0, i32 0, i32 0, i32 1
  %7 = bitcast %union.anon.2* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 80, i1 false) #4
  %8 = getelementptr inbounds %"class.base::ConditionVariable", %"class.base::ConditionVariable"* %0, i64 0, i32 2
  %9 = load i8, i8* %8, align 8, !range !2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %19, label %11

11:                                               ; preds = %1
  %12 = bitcast %"class.base::Location"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %12) #4
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 74) #4
  %13 = load i8, i8* %4, align 8, !range !2
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %17, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %2, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  call void @_ZN4base8internal40ScopedBlockingCallWithBaseSyncPrimitivesD1Ev(%"class.base::internal::ScopedBlockingCallWithBaseSyncPrimitives"* %16) #4
  store i8 0, i8* %4, align 8
  br label %17

17:                                               ; preds = %11, %15
  %18 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %2, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  call void @_ZN4base8internal40ScopedBlockingCallWithBaseSyncPrimitivesC1ERKNS_8LocationENS_12BlockingTypeE(%"class.base::internal::ScopedBlockingCallWithBaseSyncPrimitives"* %18, %"class.base::Location"* nonnull dereferenceable(32) %3, i32 0) #4
  store i8 1, i8* %4, align 8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %12) #4
  br label %19

19:                                               ; preds = %1, %17
  %20 = getelementptr inbounds %"class.base::ConditionVariable", %"class.base::ConditionVariable"* %0, i64 0, i32 0
  %21 = getelementptr inbounds %"class.base::ConditionVariable", %"class.base::ConditionVariable"* %0, i64 0, i32 1
  %22 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %21, align 8
  %23 = call i32 @pthread_cond_wait(%union.pthread_cond_t* %20, %union.pthread_mutex_t* %22) #4
  %24 = load i8, i8* %4, align 8, !range !2
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %28, label %26

26:                                               ; preds = %19
  %27 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %2, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  call void @_ZN4base8internal40ScopedBlockingCallWithBaseSyncPrimitivesD1Ev(%"class.base::internal::ScopedBlockingCallWithBaseSyncPrimitives"* %27) #4
  store i8 0, i8* %4, align 8
  br label %28

28:                                               ; preds = %19, %26
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %4) #4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* sret, i8*, i8*, i32) local_unnamed_addr #3

declare i32 @pthread_cond_wait(%union.pthread_cond_t*, %union.pthread_mutex_t*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base17ConditionVariable9TimedWaitERKNS_9TimeDeltaE(%"class.base::ConditionVariable"*, %"class.base::TimeDelta"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.absl::optional", align 8
  %4 = alloca %"class.base::Location", align 8
  %5 = alloca %struct.timespec, align 8
  %6 = alloca %struct.timespec, align 8
  %7 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %7) #4
  %8 = bitcast %"class.absl::optional"* %3 to i64*
  store i64 -6148914691236517206, i64* %8, align 8
  store i8 0, i8* %7, align 8
  %9 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %3, i64 0, i32 0, i32 0, i32 0, i32 1
  %10 = bitcast %union.anon.2* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 80, i1 false) #4
  %11 = getelementptr inbounds %"class.base::ConditionVariable", %"class.base::ConditionVariable"* %0, i64 0, i32 2
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %22, label %14

14:                                               ; preds = %2
  %15 = bitcast %"class.base::Location"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %15) #4
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %4, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 90) #4
  %16 = load i8, i8* %7, align 8, !range !2
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %20, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %3, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  call void @_ZN4base8internal40ScopedBlockingCallWithBaseSyncPrimitivesD1Ev(%"class.base::internal::ScopedBlockingCallWithBaseSyncPrimitives"* %19) #4
  store i8 0, i8* %7, align 8
  br label %20

20:                                               ; preds = %14, %18
  %21 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %3, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  call void @_ZN4base8internal40ScopedBlockingCallWithBaseSyncPrimitivesC1ERKNS_8LocationENS_12BlockingTypeE(%"class.base::internal::ScopedBlockingCallWithBaseSyncPrimitives"* %21, %"class.base::Location"* nonnull dereferenceable(32) %4, i32 0) #4
  store i8 1, i8* %7, align 8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %15) #4
  br label %22

22:                                               ; preds = %2, %20
  %23 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %1, i64 0, i32 0
  %24 = load i64, i64* %23, align 8
  %25 = sdiv i64 %24, 1000000
  %26 = srem i64 %24, 1000000
  %27 = mul nsw i64 %26, 1000
  %28 = bitcast %struct.timespec* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %28) #4
  %29 = getelementptr inbounds %struct.timespec, %struct.timespec* %5, i64 0, i32 0
  %30 = getelementptr inbounds %struct.timespec, %struct.timespec* %5, i64 0, i32 1
  %31 = bitcast %struct.timespec* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %31) #4
  %32 = getelementptr inbounds %struct.timespec, %struct.timespec* %6, i64 0, i32 0
  %33 = getelementptr inbounds %struct.timespec, %struct.timespec* %6, i64 0, i32 1
  %34 = bitcast %struct.timespec* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 -86, i64 16, i1 false)
  %35 = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %6) #4
  %36 = load i64, i64* %32, align 8
  %37 = load i64, i64* %33, align 8
  %38 = add nsw i64 %36, %25
  %39 = add nsw i64 %37, %27
  %40 = sdiv i64 %39, 1000000000
  %41 = add nsw i64 %40, %38
  store i64 %41, i64* %29, align 8
  %42 = srem i64 %39, 1000000000
  store i64 %42, i64* %30, align 8
  %43 = getelementptr inbounds %"class.base::ConditionVariable", %"class.base::ConditionVariable"* %0, i64 0, i32 0
  %44 = getelementptr inbounds %"class.base::ConditionVariable", %"class.base::ConditionVariable"* %0, i64 0, i32 1
  %45 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %44, align 8
  %46 = call i32 @pthread_cond_timedwait(%union.pthread_cond_t* %43, %union.pthread_mutex_t* %45, %struct.timespec* nonnull %5) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %31) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %28) #4
  %47 = load i8, i8* %7, align 8, !range !2
  %48 = icmp eq i8 %47, 0
  br i1 %48, label %51, label %49

49:                                               ; preds = %22
  %50 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %3, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  call void @_ZN4base8internal40ScopedBlockingCallWithBaseSyncPrimitivesD1Ev(%"class.base::internal::ScopedBlockingCallWithBaseSyncPrimitives"* %50) #4
  store i8 0, i8* %7, align 8
  br label %51

51:                                               ; preds = %22, %49
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %7) #4
  ret void
}

; Function Attrs: nounwind
declare i32 @clock_gettime(i32, %struct.timespec*) local_unnamed_addr #2

declare i32 @pthread_cond_timedwait(%union.pthread_cond_t*, %union.pthread_mutex_t*, %struct.timespec*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base17ConditionVariable9BroadcastEv(%"class.base::ConditionVariable"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::ConditionVariable", %"class.base::ConditionVariable"* %0, i64 0, i32 0
  %3 = tail call i32 @pthread_cond_broadcast(%union.pthread_cond_t* %2) #4
  ret void
}

; Function Attrs: nounwind
declare i32 @pthread_cond_broadcast(%union.pthread_cond_t*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base17ConditionVariable6SignalEv(%"class.base::ConditionVariable"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::ConditionVariable", %"class.base::ConditionVariable"* %0, i64 0, i32 0
  %3 = tail call i32 @pthread_cond_signal(%union.pthread_cond_t* %2) #4
  ret void
}

; Function Attrs: nounwind
declare i32 @pthread_cond_signal(%union.pthread_cond_t*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN4base8internal40ScopedBlockingCallWithBaseSyncPrimitivesD1Ev(%"class.base::internal::ScopedBlockingCallWithBaseSyncPrimitives"*) unnamed_addr #2

declare void @_ZN4base8internal40ScopedBlockingCallWithBaseSyncPrimitivesC1ERKNS_8LocationENS_12BlockingTypeE(%"class.base::internal::ScopedBlockingCallWithBaseSyncPrimitives"*, %"class.base::Location"* dereferenceable(32), i32) unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
