; ModuleID = '../../third_party/blink/renderer/modules/bluetooth/bluetooth_manufacturer_data_map.cc'
source_filename = "../../third_party/blink/renderer/modules/bluetooth/bluetooth_manufacturer_data_map.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.blink::WrapperTypeInfo" = type { i16, void (%"class.v8::Isolate"*, %"class.blink::DOMWrapperWorld"*, %"class.v8::Template"*)*, void (%"class.v8::Context"*, %"class.blink::DOMWrapperWorld"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Template"*, i64)*, i8*, %"struct.blink::WrapperTypeInfo"*, i8 }
%"class.v8::Isolate" = type { i8 }
%"class.blink::DOMWrapperWorld" = type { %"class.WTF::RefCounted", i32, i32, %"class.blink::Persistent" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.blink::Persistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::DOMDataStore"*, %"class.blink::PersistentNodePtr" }
%"class.blink::DOMDataStore" = type { i32 (...)**, i8, [7 x i8], %"class.blink::HeapHashMap" }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap.10" }
%"class.WTF::HashMap.10" = type { %"class.WTF::HashTable.11" }
%"class.WTF::HashTable.11" = type <{ %"struct.WTF::KeyValuePair.13"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.13" = type { %"class.blink::WeakMember", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::WeakMember" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr", i32, [4 x i8], %"class.std::__1::unique_ptr.141", %"class.std::__1::unique_ptr.141", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.151", %"class.std::__1::unique_ptr.157", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.169", %"class.std::__1::unique_ptr.175", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.182", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.14", %"class.std::__1::unique_ptr.18", %"class.std::__1::unique_ptr.24", %"class.std::__1::unique_ptr.30", %"class.std::__1::unique_ptr.36", %"class.std::__1::unique_ptr.42", %"class.std::__1::unique_ptr.49", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.63", %"class.std::__1::unique_ptr.70", %"class.std::__1::unique_ptr.77", %"class.std::__1::unique_ptr.77", %"class.std::__1::unique_ptr.84", %"class.std::__1::unique_ptr.91", %"class.std::__1::unique_ptr.98", %"class.std::__1::unique_ptr.121", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.14" = type { %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.18" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.30" = type { %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.36" = type { %"class.std::__1::__compressed_pair.37" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.42" = type { %"class.std::__1::__compressed_pair.43" }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.std::__1::__compressed_pair_elem.44" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.45" }
%"struct.std::__1::__atomic_base.45" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.std::__1::unique_ptr.49" = type { %"class.std::__1::__compressed_pair.50" }
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::__compressed_pair_elem.51" = type { %"class.blink::Worklist.52"* }
%"class.blink::Worklist.52" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.56" = type { %"class.std::__1::__compressed_pair.57" }
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"struct.std::__1::__compressed_pair_elem.58" = type { %"class.blink::Worklist.59"* }
%"class.blink::Worklist.59" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.63" = type { %"class.std::__1::__compressed_pair.64" }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %"class.blink::Worklist.66"* }
%"class.blink::Worklist.66" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.70" = type { %"class.std::__1::__compressed_pair.71" }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.72" }
%"struct.std::__1::__compressed_pair_elem.72" = type { %"class.blink::Worklist.73"* }
%"class.blink::Worklist.73" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.77" = type { %"class.std::__1::__compressed_pair.78" }
%"class.std::__1::__compressed_pair.78" = type { %"struct.std::__1::__compressed_pair_elem.79" }
%"struct.std::__1::__compressed_pair_elem.79" = type { %"class.blink::Worklist.80"* }
%"class.blink::Worklist.80" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.84" = type { %"class.std::__1::__compressed_pair.85" }
%"class.std::__1::__compressed_pair.85" = type { %"struct.std::__1::__compressed_pair_elem.86" }
%"struct.std::__1::__compressed_pair_elem.86" = type { %"class.blink::Worklist.87"* }
%"class.blink::Worklist.87" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.91" = type { %"class.std::__1::__compressed_pair.92" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { %"class.blink::Worklist.94"* }
%"class.blink::Worklist.94" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.98" = type { %"class.std::__1::__compressed_pair.99" }
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.100" }
%"struct.std::__1::__compressed_pair_elem.100" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.101", %"class.std::__1::__compressed_pair.108", %"class.std::__1::__compressed_pair.113", %"class.std::__1::__compressed_pair.115", [4 x i8] }>
%"class.std::__1::unique_ptr.101" = type { %"class.std::__1::__compressed_pair.102" }
%"class.std::__1::__compressed_pair.102" = type { %"struct.std::__1::__compressed_pair_elem.103", %"struct.std::__1::__compressed_pair_elem.104" }
%"struct.std::__1::__compressed_pair_elem.103" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.104" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.105" }
%"class.std::__1::__compressed_pair.105" = type { %"struct.std::__1::__compressed_pair_elem.106" }
%"struct.std::__1::__compressed_pair_elem.106" = type { i64 }
%"class.std::__1::__compressed_pair.108" = type { %"struct.std::__1::__compressed_pair_elem.109" }
%"struct.std::__1::__compressed_pair_elem.109" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.113" = type { %"struct.std::__1::__compressed_pair_elem.106" }
%"class.std::__1::__compressed_pair.115" = type { %"struct.std::__1::__compressed_pair_elem.116" }
%"struct.std::__1::__compressed_pair_elem.116" = type { float }
%"class.std::__1::unique_ptr.121" = type { %"class.std::__1::__compressed_pair.122" }
%"class.std::__1::__compressed_pair.122" = type { %"struct.std::__1::__compressed_pair_elem.123" }
%"struct.std::__1::__compressed_pair_elem.123" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.124", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.124" = type { %"class.std::__1::__compressed_pair.125" }
%"class.std::__1::__compressed_pair.125" = type { %"struct.std::__1::__compressed_pair_elem.126" }
%"struct.std::__1::__compressed_pair_elem.126" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.133" }
%"class.WTF::Vector.133" = type { %"class.WTF::VectorBuffer.134" }
%"class.WTF::VectorBuffer.134" = type { %"class.WTF::VectorBufferBase.135" }
%"class.WTF::VectorBufferBase.135" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.141" = type { %"class.std::__1::__compressed_pair.142" }
%"class.std::__1::__compressed_pair.142" = type { %"struct.std::__1::__compressed_pair_elem.143" }
%"struct.std::__1::__compressed_pair_elem.143" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.149" }
%"class.WTF::VectorBuffer.149" = type { %"class.WTF::VectorBufferBase.150" }
%"class.WTF::VectorBufferBase.150" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.151" = type { %"class.std::__1::__compressed_pair.152" }
%"class.std::__1::__compressed_pair.152" = type { %"struct.std::__1::__compressed_pair_elem.153" }
%"struct.std::__1::__compressed_pair_elem.153" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.157" = type { %"class.std::__1::__compressed_pair.158" }
%"class.std::__1::__compressed_pair.158" = type { %"struct.std::__1::__compressed_pair_elem.159" }
%"struct.std::__1::__compressed_pair_elem.159" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.163" }
%"class.std::__1::unique_ptr.163" = type { %"class.std::__1::__compressed_pair.164" }
%"class.std::__1::__compressed_pair.164" = type { %"struct.std::__1::__compressed_pair_elem.165" }
%"struct.std::__1::__compressed_pair_elem.165" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.52"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.59"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.66"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.73"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.80"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.189" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.189" = type { %"struct.std::__1::__compressed_pair_elem.190" }
%"struct.std::__1::__compressed_pair_elem.190" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.169" = type { %"class.std::__1::__compressed_pair.170" }
%"class.std::__1::__compressed_pair.170" = type { %"struct.std::__1::__compressed_pair_elem.171" }
%"struct.std::__1::__compressed_pair_elem.171" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.175" = type { %"class.std::__1::__compressed_pair.176" }
%"class.std::__1::__compressed_pair.176" = type { %"struct.std::__1::__compressed_pair_elem.177" }
%"struct.std::__1::__compressed_pair_elem.177" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.181 }
%class.scoped_refptr.181 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.182" = type { %"struct.std::__1::__atomic_base.183" }
%"struct.std::__1::__atomic_base.183" = type { %"struct.std::__1::__cxx_atomic_impl.184" }
%"struct.std::__1::__cxx_atomic_impl.184" = type { %"struct.std::__1::__cxx_atomic_base_impl.185" }
%"struct.std::__1::__cxx_atomic_base_impl.185" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.v8::Template" = type { i8 }
%"class.v8::Context" = type { i8 }
%"class.v8::Object" = type { i8 }
%"class.blink::AtomicEntryFlag" = type { %"struct.std::__1::atomic.229" }
%"struct.std::__1::atomic.229" = type { %"struct.std::__1::__atomic_base.230" }
%"struct.std::__1::__atomic_base.230" = type { %"struct.std::__1::__atomic_base.231" }
%"struct.std::__1::__atomic_base.231" = type { %"struct.std::__1::__cxx_atomic_impl.232" }
%"struct.std::__1::__cxx_atomic_impl.232" = type { %"struct.std::__1::__cxx_atomic_base_impl.233" }
%"struct.std::__1::__cxx_atomic_base_impl.233" = type { i32 }
%"class.WTF::ThreadSpecific" = type { %"class.blink::ThreadState"**, %"class.base::ThreadLocalStorage::Slot" }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"struct.blink::GCInfo" = type { void (%"class.blink::Visitor"*, i8*)*, void (i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.blink::GCInfoTable" = type { %"struct.blink::GCInfo"**, i32, i32, %"class.WTF::Mutex" }
%"class.blink::BluetoothManufacturerDataMap" = type { %"class.blink::ScriptWrappable", %"class.blink::Maplike", %"class.WTF::HashMap" }
%"class.blink::Maplike" = type { %"class.blink::PairIterable" }
%"class.blink::PairIterable" = type { %"class.blink::Iterable" }
%"class.blink::Iterable" = type { i32 (...)** }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type { i16, %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { i8*, i32, i32 }
%"class.blink::Iterable<unsigned short, blink::Member<blink::DOMDataView> >::IterationSource" = type { i32 (...)** }
%"class.blink::ScriptState" = type { %"class.v8::Isolate"*, %"class.blink::ScopedPersistent", %class.scoped_refptr, %"class.blink::Member", %"class.blink::SelfKeepAlive", %"class.util::TokenType" }
%"class.blink::ScopedPersistent" = type { %"class.v8::Persistent" }
%"class.v8::Persistent" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Context"* }
%class.scoped_refptr = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::Member" = type { %"class.blink::MemberBase.186" }
%"class.blink::MemberBase.186" = type { %"class.blink::V8PerContextData"* }
%"class.blink::V8PerContextData" = type opaque
%"class.blink::SelfKeepAlive" = type { %"class.blink::Persistent.187" }
%"class.blink::Persistent.187" = type { %"class.blink::PersistentBase.188" }
%"class.blink::PersistentBase.188" = type { %"class.blink::ScriptState"*, %"class.blink::PersistentNodePtr" }
%"class.util::TokenType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.blink::ExceptionState" = type { i32 (...)**, %"class.blink::ExceptionContext", %"class.blink::ExceptionState::ContextScope"*, %"class.v8::Isolate"*, i32, %"class.WTF::String", %"class.blink::TraceWrapperV8Reference.200" }
%"class.blink::ExceptionContext" = type { i16, i16, i8*, i8* }
%"class.blink::ExceptionState::ContextScope" = type { %"class.blink::ExceptionState"*, %"class.blink::ExceptionState::ContextScope"*, %"class.blink::ExceptionContext" }
%"class.WTF::String" = type { %class.scoped_refptr.194 }
%class.scoped_refptr.194 = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic.195" }
%"struct.std::__1::atomic.195" = type { %"struct.std::__1::__atomic_base.196" }
%"struct.std::__1::__atomic_base.196" = type { %"struct.std::__1::__atomic_base.197" }
%"struct.std::__1::__atomic_base.197" = type { %"struct.std::__1::__cxx_atomic_impl.198" }
%"struct.std::__1::__cxx_atomic_impl.198" = type { %"struct.std::__1::__cxx_atomic_base_impl.199" }
%"struct.std::__1::__cxx_atomic_base_impl.199" = type { i32 }
%"class.blink::TraceWrapperV8Reference.200" = type { %"class.v8::TracedReference.201" }
%"class.v8::TracedReference.201" = type { %"class.v8::BasicTracedReference.202" }
%"class.v8::BasicTracedReference.202" = type { %"class.v8::TracedReferenceBase" }
%"class.blink::Member.205" = type { %"class.blink::MemberBase.206" }
%"class.blink::MemberBase.206" = type { %"class.blink::DOMDataView"* }
%"class.blink::DOMDataView" = type { %"class.blink::DOMArrayBufferView", i64 }
%"class.blink::DOMArrayBufferView" = type { %"class.blink::ScriptWrappable", i8*, i64, %"class.blink::Member.207" }
%"class.blink::Member.207" = type { %"class.blink::MemberBase.208" }
%"class.blink::MemberBase.208" = type { %"class.blink::DOMArrayBufferBase"* }
%"class.blink::DOMArrayBufferBase" = type <{ %"class.blink::ScriptWrappable", %"class.blink::ArrayBufferContents", i8, [7 x i8] }>
%"class.blink::ArrayBufferContents" = type { %"class.std::__1::shared_ptr" }
%"class.std::__1::shared_ptr" = type { %"class.v8::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::BackingStore" = type { i8 }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.v8::Value" = type { i8 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.211" }
%"class.std::__1::__compressed_pair.211" = type { %"struct.std::__1::__compressed_pair_elem.212" }
%"struct.std::__1::__compressed_pair_elem.212" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.blink::NormalPageArena" = type { %"class.blink::BaseArena.base", [4 x i8], %"class.blink::FreeList", i8*, i64, i64 }
%"class.blink::BaseArena.base" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32 }>
%"class.blink::FreeList" = type <{ [17 x %"class.blink::FreeListEntry"*], [17 x %"class.blink::FreeListEntry"*], i32, [4 x i8] }>
%"class.blink::FreeListEntry" = type { %"class.blink::HeapObjectHeader", %"class.blink::FreeListEntry"* }
%"class.blink::PlatformAwareObjectStartBitmap" = type { %"class.blink::ObjectStartBitmap" }
%"class.blink::ObjectStartBitmap" = type { i8*, [2048 x i8] }
%"class.blink::BluetoothManufacturerDataMapIterationSource" = type { %"class.blink::Iterable<unsigned short, blink::Member<blink::DOMDataView> >::IterationSource", %"class.blink::Member.203", %"struct.WTF::HashTableConstIteratorAdapter" }
%"class.blink::Member.203" = type { %"class.blink::MemberBase.204" }
%"class.blink::MemberBase.204" = type { %"class.blink::BluetoothManufacturerDataMap"* }
%"struct.WTF::HashTableConstIteratorAdapter" = type { %"class.WTF::HashTableConstIterator" }
%"class.WTF::HashTableConstIterator" = type { %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"* }

$_ZNK5blink15ScriptWrappable18HasPendingActivityEv = comdat any

$_ZNK5blink15ScriptWrappable17HasEventListenersEv = comdat any

$_ZNK5blink28BluetoothManufacturerDataMap18GetWrapperTypeInfoEv = comdat any

$_ZN3WTF9HashTableItNS_12KeyValuePairItNS_6VectorIhLj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_7IntHashItEENS_18HashMapValueTraitsINS_10HashTraitsItEENSA_IS4_EEEESB_S3_E22ReserveCapacityForSizeEj = comdat any

$_ZN3WTF9HashTableItNS_12KeyValuePairItNS_6VectorIhLj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_7IntHashItEENS_18HashMapValueTraitsINS_10HashTraitsItEENSA_IS4_EEEESB_S3_E8RehashToEPS5_jSF_ = comdat any

$_ZN3WTF9HashTableItNS_12KeyValuePairItNS_6VectorIhLj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_7IntHashItEENS_18HashMapValueTraitsINS_10HashTraitsItEENSA_IS4_EEEESB_S3_E6insertINS_22IdentityHashTranslatorIS8_SD_S3_EERKtRKS5_EENS_18HashTableAddResultISE_S5_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableItNS_12KeyValuePairItNS_6VectorIhLj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_7IntHashItEENS_18HashMapValueTraitsINS_10HashTraitsItEENSA_IS4_EEEESB_S3_E6ExpandEPS5_ = comdat any

$_ZN3WTF6VectorIhLj0ENS_18PartitionAllocatorEEaSERKS2_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm = comdat any

$_ZN5blink10ThreadHeap8AllocateINS_8IterableItNS_6MemberINS_11DOMDataViewEEEE15IterationSourceEEEPhm = comdat any

$_ZN5blink10TraceTraitINS_8IterableItNS_6MemberINS_11DOMDataViewEEEE15IterationSourceEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink8internal14FinalizerTraitINS_8IterableItNS_6MemberINS_11DOMDataViewEEEE15IterationSourceEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_8IterableItNS_6MemberINS_11DOMDataViewEEEE15IterationSourceEE7GetNameEPKv = comdat any

$_ZN5blink8IterableItNS_6MemberINS_11DOMDataViewEEEE15IterationSourceD2Ev = comdat any

$_ZN5blink43BluetoothManufacturerDataMapIterationSourceD0Ev = comdat any

$_ZN5blink43BluetoothManufacturerDataMapIterationSource4NextEPNS_11ScriptStateERtRNS_6MemberINS_11DOMDataViewEEERNS_14ExceptionStateE = comdat any

$_ZNK5blink43BluetoothManufacturerDataMapIterationSource5TraceEPNS_7VisitorE = comdat any

$_ZN5blink10TraceTraitINS_28BluetoothManufacturerDataMapEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZZN5blink11GCInfoTraitINS_8IterableItNS_6MemberINS_11DOMDataViewEEEE15IterationSourceEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_8IterableItNS_6MemberINS_11DOMDataViewEEEE15IterationSourceEE5IndexEvE13gc_info_index = comdat any

$_ZTVN5blink43BluetoothManufacturerDataMapIterationSourceE = comdat any

@_ZTVN5blink28BluetoothManufacturerDataMapE = hidden unnamed_addr constant { [13 x i8*], [4 x i8*] } { [13 x i8*] [i8* null, i8* null, i8* bitcast (i8* (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable18NameInHeapSnapshotEv to i8*), i8* bitcast (void (%"class.blink::BluetoothManufacturerDataMap"*)* @_ZN5blink28BluetoothManufacturerDataMapD2Ev to i8*), i8* bitcast (void (%"class.blink::BluetoothManufacturerDataMap"*)* @_ZN5blink28BluetoothManufacturerDataMapD0Ev to i8*), i8* bitcast (i1 (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable18HasPendingActivityEv to i8*), i8* bitcast (i1 (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable17HasEventListenersEv to i8*), i8* bitcast (void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)* @_ZNK5blink15ScriptWrappable5TraceEPNS_7VisitorE to i8*), i8* bitcast (%"struct.blink::WrapperTypeInfo"* (%"class.blink::BluetoothManufacturerDataMap"*)* @_ZNK5blink28BluetoothManufacturerDataMap18GetWrapperTypeInfoEv to i8*), i8* bitcast (%"class.v8::Value"* (%"class.blink::ScriptWrappable"*, %"class.blink::ScriptState"*)* @_ZN5blink15ScriptWrappable4WrapEPNS_11ScriptStateE to i8*), i8* bitcast (%"class.v8::Object"* (%"class.blink::ScriptWrappable"*, %"class.v8::Isolate"*, %"struct.blink::WrapperTypeInfo"*, %"class.v8::Object"*)* @_ZN5blink15ScriptWrappable20AssociateWithWrapperEPN2v87IsolateEPKNS_15WrapperTypeInfoENS1_5LocalINS1_6ObjectEEE to i8*), i8* bitcast (%"class.blink::Iterable<unsigned short, blink::Member<blink::DOMDataView> >::IterationSource"* (%"class.blink::BluetoothManufacturerDataMap"*, %"class.blink::ScriptState"*, %"class.blink::ExceptionState"*)* @_ZN5blink28BluetoothManufacturerDataMap14StartIterationEPNS_11ScriptStateERNS_14ExceptionStateE to i8*), i8* bitcast (i1 (%"class.blink::BluetoothManufacturerDataMap"*, %"class.blink::ScriptState"*, i16*, %"class.blink::Member.205"*, %"class.blink::ExceptionState"*)* @_ZN5blink28BluetoothManufacturerDataMap11GetMapEntryEPNS_11ScriptStateERKtRNS_6MemberINS_11DOMDataViewEEERNS_14ExceptionStateE to i8*)], [4 x i8*] [i8* inttoptr (i64 -16 to i8*), i8* null, i8* bitcast (%"class.blink::Iterable<unsigned short, blink::Member<blink::DOMDataView> >::IterationSource"* (%"class.blink::BluetoothManufacturerDataMap"*, %"class.blink::ScriptState"*, %"class.blink::ExceptionState"*)* @_ZThn16_N5blink28BluetoothManufacturerDataMap14StartIterationEPNS_11ScriptStateERNS_14ExceptionStateE to i8*), i8* bitcast (i1 (%"class.blink::BluetoothManufacturerDataMap"*, %"class.blink::ScriptState"*, i16*, %"class.blink::Member.205"*, %"class.blink::ExceptionState"*)* @_ZThn16_N5blink28BluetoothManufacturerDataMap11GetMapEntryEPNS_11ScriptStateERKtRNS_6MemberINS_11DOMDataViewEEERNS_14ExceptionStateE to i8*)] }, align 8
@.str = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/wtf/hash_table.h\00", align 1
@.str.1 = private unnamed_addr constant [39 x i8] c"!static_cast<int>( new_capacity >> 31)\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairItNS_6VectorIhLj0ENS_18PartitionAllocatorEEEEEEEPKcv = private unnamed_addr constant [138 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::KeyValuePair<unsigned short, WTF::Vector<unsigned char, 0, WTF::PartitionAllocator> >]\00", align 1
@.str.2 = private unnamed_addr constant [23 x i8] c"new_size > table_size_\00", align 1
@.str.3 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.4 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv = private unnamed_addr constant [61 x i8] c"const char *WTF::GetStringWithTypeName() [T = unsigned char]\00", align 1
@_ZN5blink28BluetoothManufacturerDataMap18wrapper_type_info_E = external local_unnamed_addr constant %"struct.blink::WrapperTypeInfo"*, align 8
@_ZN5blink11ThreadState25incremental_marking_flag_E = external local_unnamed_addr global %"class.blink::AtomicEntryFlag", align 4
@_ZN5blink11ThreadState16thread_specific_E = external local_unnamed_addr global %"class.WTF::ThreadSpecific"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ThreadState *]\00", align 1
@.str.7 = private unnamed_addr constant [23 x i8] c"allocation_size > size\00", align 1
@.str.8 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_8IterableItNS_6MemberINS_11DOMDataViewEEEE15IterationSourceEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_8IterableItNS_6MemberINS_11DOMDataViewEEEE15IterationSourceEE5TraceEPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_8IterableItNS_6MemberINS_11DOMDataViewEEEE15IterationSourceEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_8IterableItNS_6MemberINS_11DOMDataViewEEEE15IterationSourceEE7GetNameEPKv, i8 1 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_8IterableItNS_6MemberINS_11DOMDataViewEEEE15IterationSourceEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@.str.9 = private unnamed_addr constant [13 x i8] c"InternalNode\00", align 1
@_ZN5blink11GCInfoTable13global_table_E = external local_unnamed_addr global %"class.blink::GCInfoTable"*, align 8
@_ZTVN5blink43BluetoothManufacturerDataMapIterationSourceE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::Iterable<unsigned short, blink::Member<blink::DOMDataView> >::IterationSource"*)* @_ZN5blink8IterableItNS_6MemberINS_11DOMDataViewEEEE15IterationSourceD2Ev to i8*), i8* bitcast (void (%"class.blink::BluetoothManufacturerDataMapIterationSource"*)* @_ZN5blink43BluetoothManufacturerDataMapIterationSourceD0Ev to i8*), i8* bitcast (i1 (%"class.blink::BluetoothManufacturerDataMapIterationSource"*, %"class.blink::ScriptState"*, i16*, %"class.blink::Member.205"*, %"class.blink::ExceptionState"*)* @_ZN5blink43BluetoothManufacturerDataMapIterationSource4NextEPNS_11ScriptStateERtRNS_6MemberINS_11DOMDataViewEEERNS_14ExceptionStateE to i8*), i8* bitcast (void (%"class.blink::BluetoothManufacturerDataMapIterationSource"*, %"class.blink::Visitor"*)* @_ZNK5blink43BluetoothManufacturerDataMapIterationSource5TraceEPNS_7VisitorE to i8*)] }, comdat, align 8

@_ZN5blink28BluetoothManufacturerDataMapC1ERKN3WTF7HashMapItNS1_6VectorIhLj0ENS1_18PartitionAllocatorEEENS1_7IntHashItEENS1_10HashTraitsItEENS8_IS5_EES4_EE = hidden unnamed_addr alias void (%"class.blink::BluetoothManufacturerDataMap"*, %"class.WTF::HashMap"*), void (%"class.blink::BluetoothManufacturerDataMap"*, %"class.WTF::HashMap"*)* @_ZN5blink28BluetoothManufacturerDataMapC2ERKN3WTF7HashMapItNS1_6VectorIhLj0ENS1_18PartitionAllocatorEEENS1_7IntHashItEENS1_10HashTraitsItEENS8_IS5_EES4_EE
@_ZN5blink28BluetoothManufacturerDataMapD1Ev = hidden unnamed_addr alias void (%"class.blink::BluetoothManufacturerDataMap"*), void (%"class.blink::BluetoothManufacturerDataMap"*)* @_ZN5blink28BluetoothManufacturerDataMapD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink28BluetoothManufacturerDataMapC2ERKN3WTF7HashMapItNS1_6VectorIhLj0ENS1_18PartitionAllocatorEEENS1_7IntHashItEENS1_10HashTraitsItEENS8_IS5_EES4_EE(%"class.blink::BluetoothManufacturerDataMap"*, %"class.WTF::HashMap"* nocapture readonly dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::BluetoothManufacturerDataMap", %"class.blink::BluetoothManufacturerDataMap"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.blink::BluetoothManufacturerDataMap", %"class.blink::BluetoothManufacturerDataMap"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store i64* null, i64** %4, align 8
  %5 = getelementptr inbounds %"class.blink::BluetoothManufacturerDataMap", %"class.blink::BluetoothManufacturerDataMap"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*], [4 x i8*] }, { [13 x i8*], [4 x i8*] }* @_ZTVN5blink28BluetoothManufacturerDataMapE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*], [4 x i8*] }, { [13 x i8*], [4 x i8*] }* @_ZTVN5blink28BluetoothManufacturerDataMapE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.blink::BluetoothManufacturerDataMap", %"class.blink::BluetoothManufacturerDataMap"* %0, i64 0, i32 2
  %7 = getelementptr inbounds %"class.WTF::HashMap", %"class.WTF::HashMap"* %6, i64 0, i32 0
  %8 = getelementptr inbounds %"class.WTF::HashMap", %"class.WTF::HashMap"* %1, i64 0, i32 0, i32 2
  %9 = bitcast %"class.WTF::HashMap"* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 20, i1 false) #5
  %10 = load i32, i32* %8, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %52, label %12

12:                                               ; preds = %2
  tail call void @_ZN3WTF9HashTableItNS_12KeyValuePairItNS_6VectorIhLj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_7IntHashItEENS_18HashMapValueTraitsINS_10HashTraitsItEENSA_IS4_EEEESB_S3_E22ReserveCapacityForSizeEj(%"class.WTF::HashTable"* %7, i32 %10) #5
  %13 = load i32, i32* %8, align 4
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %"class.WTF::HashMap", %"class.WTF::HashMap"* %1, i64 0, i32 0, i32 0
  %16 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %15, align 8
  %17 = getelementptr inbounds %"class.WTF::HashMap", %"class.WTF::HashMap"* %1, i64 0, i32 0, i32 1
  %18 = load i32, i32* %17, align 8
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %16, i64 %19
  br i1 %14, label %52, label %21

21:                                               ; preds = %12
  %22 = icmp eq i32 %18, 0
  br i1 %22, label %32, label %23

23:                                               ; preds = %21, %29
  %24 = phi %"struct.WTF::KeyValuePair"* [ %30, %29 ], [ %16, %21 ]
  %25 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %24, i64 0, i32 0
  %26 = load i16, i16* %25, align 2
  %27 = add i16 %26, 1
  %28 = icmp ult i16 %27, 2
  br i1 %28, label %29, label %32

29:                                               ; preds = %23
  %30 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %24, i64 1
  %31 = icmp eq %"struct.WTF::KeyValuePair"* %30, %20
  br i1 %31, label %52, label %23

32:                                               ; preds = %23, %21
  %33 = phi %"struct.WTF::KeyValuePair"* [ %16, %21 ], [ %24, %23 ]
  %34 = icmp eq %"struct.WTF::KeyValuePair"* %33, %20
  br i1 %34, label %52, label %35

35:                                               ; preds = %32, %50
  %36 = phi %"struct.WTF::KeyValuePair"* [ %42, %50 ], [ %33, %32 ]
  %37 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 0, i32 0
  %38 = tail call { %"struct.WTF::KeyValuePair"*, i8 } @_ZN3WTF9HashTableItNS_12KeyValuePairItNS_6VectorIhLj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_7IntHashItEENS_18HashMapValueTraitsINS_10HashTraitsItEENSA_IS4_EEEESB_S3_E6insertINS_22IdentityHashTranslatorIS8_SD_S3_EERKtRKS5_EENS_18HashTableAddResultISE_S5_EEOT0_OT1_(%"class.WTF::HashTable"* %7, i16* dereferenceable(2) %37, %"struct.WTF::KeyValuePair"* dereferenceable(24) %36) #5
  %39 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 1
  %40 = icmp eq %"struct.WTF::KeyValuePair"* %39, %20
  br i1 %40, label %52, label %41

41:                                               ; preds = %35, %47
  %42 = phi %"struct.WTF::KeyValuePair"* [ %48, %47 ], [ %39, %35 ]
  %43 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %42, i64 0, i32 0
  %44 = load i16, i16* %43, align 2
  %45 = add i16 %44, 1
  %46 = icmp ult i16 %45, 2
  br i1 %46, label %47, label %50

47:                                               ; preds = %41
  %48 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %42, i64 1
  %49 = icmp eq %"struct.WTF::KeyValuePair"* %48, %20
  br i1 %49, label %52, label %41

50:                                               ; preds = %41
  %51 = icmp eq %"struct.WTF::KeyValuePair"* %42, %20
  br i1 %51, label %52, label %35

52:                                               ; preds = %29, %35, %50, %47, %2, %12, %32
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink28BluetoothManufacturerDataMapD2Ev(%"class.blink::BluetoothManufacturerDataMap"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::BluetoothManufacturerDataMap", %"class.blink::BluetoothManufacturerDataMap"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*], [4 x i8*] }, { [13 x i8*], [4 x i8*] }* @_ZTVN5blink28BluetoothManufacturerDataMapE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::BluetoothManufacturerDataMap", %"class.blink::BluetoothManufacturerDataMap"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*], [4 x i8*] }, { [13 x i8*], [4 x i8*] }* @_ZTVN5blink28BluetoothManufacturerDataMapE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.blink::BluetoothManufacturerDataMap", %"class.blink::BluetoothManufacturerDataMap"* %0, i64 0, i32 2, i32 0, i32 0
  %5 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %4, align 8
  %6 = icmp eq %"struct.WTF::KeyValuePair"* %5, null
  br i1 %6, label %33, label %7, !prof !2

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.blink::BluetoothManufacturerDataMap", %"class.blink::BluetoothManufacturerDataMap"* %0, i64 0, i32 2, i32 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %31, label %11

11:                                               ; preds = %7
  %12 = zext i32 %9 to i64
  br label %13

13:                                               ; preds = %28, %11
  %14 = phi i64 [ 0, %11 ], [ %29, %28 ]
  %15 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %5, i64 %14, i32 0
  %16 = load i16, i16* %15, align 2
  %17 = icmp eq i16 %16, -1
  br i1 %17, label %28, label %18

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %5, i64 %14, i32 1, i32 0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = icmp eq i8* %20, null
  br i1 %21, label %28, label %22, !prof !2

22:                                               ; preds = %18
  %23 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %5, i64 %14, i32 1, i32 0, i32 0, i32 2
  %24 = load i32, i32* %23, align 4
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %27, label %26, !prof !3

26:                                               ; preds = %22
  store i32 0, i32* %23, align 4
  br label %27

27:                                               ; preds = %26, %22
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %20) #5
  store i8* null, i8** %19, align 8
  br label %28

28:                                               ; preds = %27, %18, %13
  %29 = add nuw nsw i64 %14, 1
  %30 = icmp eq i64 %29, %12
  br i1 %30, label %31, label %13

31:                                               ; preds = %28, %7
  %32 = bitcast %"struct.WTF::KeyValuePair"* %5 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %32) #5
  store %"struct.WTF::KeyValuePair"* null, %"struct.WTF::KeyValuePair"** %4, align 8
  br label %33

33:                                               ; preds = %1, %31
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink28BluetoothManufacturerDataMapD0Ev(%"class.blink::BluetoothManufacturerDataMap"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::BluetoothManufacturerDataMap", %"class.blink::BluetoothManufacturerDataMap"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*], [4 x i8*] }, { [13 x i8*], [4 x i8*] }* @_ZTVN5blink28BluetoothManufacturerDataMapE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::BluetoothManufacturerDataMap", %"class.blink::BluetoothManufacturerDataMap"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*], [4 x i8*] }, { [13 x i8*], [4 x i8*] }* @_ZTVN5blink28BluetoothManufacturerDataMapE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.blink::BluetoothManufacturerDataMap", %"class.blink::BluetoothManufacturerDataMap"* %0, i64 0, i32 2, i32 0, i32 0
  %5 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %4, align 8
  %6 = icmp eq %"struct.WTF::KeyValuePair"* %5, null
  br i1 %6, label %33, label %7, !prof !2

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.blink::BluetoothManufacturerDataMap", %"class.blink::BluetoothManufacturerDataMap"* %0, i64 0, i32 2, i32 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %31, label %11

11:                                               ; preds = %7
  %12 = zext i32 %9 to i64
  br label %13

13:                                               ; preds = %28, %11
  %14 = phi i64 [ 0, %11 ], [ %29, %28 ]
  %15 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %5, i64 %14, i32 0
  %16 = load i16, i16* %15, align 2
  %17 = icmp eq i16 %16, -1
  br i1 %17, label %28, label %18

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %5, i64 %14, i32 1, i32 0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = icmp eq i8* %20, null
  br i1 %21, label %28, label %22, !prof !2

22:                                               ; preds = %18
  %23 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %5, i64 %14, i32 1, i32 0, i32 0, i32 2
  %24 = load i32, i32* %23, align 4
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %27, label %26, !prof !3

26:                                               ; preds = %22
  store i32 0, i32* %23, align 4
  br label %27

27:                                               ; preds = %26, %22
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %20) #5
  store i8* null, i8** %19, align 8
  br label %28

28:                                               ; preds = %27, %18, %13
  %29 = add nuw nsw i64 %14, 1
  %30 = icmp eq i64 %29, %12
  br i1 %30, label %31, label %13

31:                                               ; preds = %28, %7
  %32 = bitcast %"struct.WTF::KeyValuePair"* %5 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %32) #5
  store %"struct.WTF::KeyValuePair"* null, %"struct.WTF::KeyValuePair"** %4, align 8
  br label %33

33:                                               ; preds = %1, %31
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::Iterable<unsigned short, blink::Member<blink::DOMDataView> >::IterationSource"* @_ZN5blink28BluetoothManufacturerDataMap14StartIterationEPNS_11ScriptStateERNS_14ExceptionStateE(%"class.blink::BluetoothManufacturerDataMap"*, %"class.blink::ScriptState"* nocapture readnone, %"class.blink::ExceptionState"* nocapture readnone dereferenceable(72)) unnamed_addr #0 align 2 {
  %4 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_8IterableItNS_6MemberINS_11DOMDataViewEEEE15IterationSourceEEEPhm(i64 32) #5
  %5 = bitcast i8* %4 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink43BluetoothManufacturerDataMapIterationSourceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds i8, i8* %4, i64 8
  %7 = bitcast i8* %6 to %"class.blink::BluetoothManufacturerDataMap"**
  store %"class.blink::BluetoothManufacturerDataMap"* %0, %"class.blink::BluetoothManufacturerDataMap"** %7, align 8
  %8 = getelementptr inbounds %"class.blink::BluetoothManufacturerDataMap", %"class.blink::BluetoothManufacturerDataMap"* %0, i64 0, i32 2, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  %11 = getelementptr inbounds %"class.blink::BluetoothManufacturerDataMap", %"class.blink::BluetoothManufacturerDataMap"* %0, i64 0, i32 2, i32 0, i32 0
  %12 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %11, align 8
  %13 = getelementptr inbounds %"class.blink::BluetoothManufacturerDataMap", %"class.blink::BluetoothManufacturerDataMap"* %0, i64 0, i32 2, i32 0, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %12, i64 %15
  br i1 %10, label %28, label %17

17:                                               ; preds = %3
  %18 = icmp eq i32 %14, 0
  br i1 %18, label %28, label %19

19:                                               ; preds = %17, %25
  %20 = phi %"struct.WTF::KeyValuePair"* [ %26, %25 ], [ %12, %17 ]
  %21 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %20, i64 0, i32 0
  %22 = load i16, i16* %21, align 2
  %23 = add i16 %22, 1
  %24 = icmp ult i16 %23, 2
  br i1 %24, label %25, label %28

25:                                               ; preds = %19
  %26 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %20, i64 1
  %27 = icmp eq %"struct.WTF::KeyValuePair"* %26, %16
  br i1 %27, label %28, label %19

28:                                               ; preds = %19, %25, %3, %17
  %29 = phi %"struct.WTF::KeyValuePair"* [ %16, %3 ], [ %12, %17 ], [ %20, %19 ], [ %16, %25 ]
  %30 = getelementptr inbounds i8, i8* %4, i64 16
  %31 = bitcast i8* %30 to %"struct.WTF::KeyValuePair"**
  store %"struct.WTF::KeyValuePair"* %29, %"struct.WTF::KeyValuePair"** %31, align 8
  %32 = getelementptr inbounds i8, i8* %4, i64 24
  %33 = bitcast i8* %32 to %"struct.WTF::KeyValuePair"**
  store %"struct.WTF::KeyValuePair"* %16, %"struct.WTF::KeyValuePair"** %33, align 8
  %34 = getelementptr inbounds i8, i8* %4, i64 -4
  %35 = bitcast i8* %34 to i16*
  %36 = load atomic i16, i16* %35 monotonic, align 2
  %37 = or i16 %36, 1
  store atomic i16 %37, i16* %35 release, align 2
  %38 = bitcast i8* %4 to %"class.blink::Iterable<unsigned short, blink::Member<blink::DOMDataView> >::IterationSource"*
  ret %"class.blink::Iterable<unsigned short, blink::Member<blink::DOMDataView> >::IterationSource"* %38
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::Iterable<unsigned short, blink::Member<blink::DOMDataView> >::IterationSource"* @_ZThn16_N5blink28BluetoothManufacturerDataMap14StartIterationEPNS_11ScriptStateERNS_14ExceptionStateE(%"class.blink::BluetoothManufacturerDataMap"*, %"class.blink::ScriptState"* nocapture readnone, %"class.blink::ExceptionState"* nocapture readnone dereferenceable(72)) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::BluetoothManufacturerDataMap", %"class.blink::BluetoothManufacturerDataMap"* %0, i64 -1, i32 2, i32 0, i32 1
  %5 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_8IterableItNS_6MemberINS_11DOMDataViewEEEE15IterationSourceEEEPhm(i64 32) #5
  %6 = bitcast i8* %5 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink43BluetoothManufacturerDataMapIterationSourceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds i8, i8* %5, i64 8
  %8 = bitcast i8* %7 to i32**
  store i32* %4, i32** %8, align 8
  %9 = getelementptr inbounds i32, i32* %4, i64 9
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  %12 = getelementptr inbounds i32, i32* %4, i64 6
  %13 = bitcast i32* %12 to %"struct.WTF::KeyValuePair"**
  %14 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %13, align 8
  %15 = getelementptr inbounds i32, i32* %4, i64 8
  %16 = load i32, i32* %15, align 8
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %14, i64 %17
  br i1 %11, label %30, label %19

19:                                               ; preds = %3
  %20 = icmp eq i32 %16, 0
  br i1 %20, label %30, label %21

21:                                               ; preds = %19, %27
  %22 = phi %"struct.WTF::KeyValuePair"* [ %28, %27 ], [ %14, %19 ]
  %23 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %22, i64 0, i32 0
  %24 = load i16, i16* %23, align 2
  %25 = add i16 %24, 1
  %26 = icmp ult i16 %25, 2
  br i1 %26, label %27, label %30

27:                                               ; preds = %21
  %28 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %22, i64 1
  %29 = icmp eq %"struct.WTF::KeyValuePair"* %28, %18
  br i1 %29, label %30, label %21

30:                                               ; preds = %21, %27, %3, %19
  %31 = phi %"struct.WTF::KeyValuePair"* [ %18, %3 ], [ %14, %19 ], [ %18, %27 ], [ %22, %21 ]
  %32 = getelementptr inbounds i8, i8* %5, i64 16
  %33 = bitcast i8* %32 to %"struct.WTF::KeyValuePair"**
  store %"struct.WTF::KeyValuePair"* %31, %"struct.WTF::KeyValuePair"** %33, align 8
  %34 = getelementptr inbounds i8, i8* %5, i64 24
  %35 = bitcast i8* %34 to %"struct.WTF::KeyValuePair"**
  store %"struct.WTF::KeyValuePair"* %18, %"struct.WTF::KeyValuePair"** %35, align 8
  %36 = getelementptr inbounds i8, i8* %5, i64 -4
  %37 = bitcast i8* %36 to i16*
  %38 = load atomic i16, i16* %37 monotonic, align 2
  %39 = or i16 %38, 1
  store atomic i16 %39, i16* %37 release, align 2
  %40 = bitcast i8* %5 to %"class.blink::Iterable<unsigned short, blink::Member<blink::DOMDataView> >::IterationSource"*
  ret %"class.blink::Iterable<unsigned short, blink::Member<blink::DOMDataView> >::IterationSource"* %40
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink28BluetoothManufacturerDataMap11GetMapEntryEPNS_11ScriptStateERKtRNS_6MemberINS_11DOMDataViewEEERNS_14ExceptionStateE(%"class.blink::BluetoothManufacturerDataMap"* nocapture readonly, %"class.blink::ScriptState"* nocapture readnone, i16* nocapture readonly dereferenceable(2), %"class.blink::Member.205"* nocapture dereferenceable(8), %"class.blink::ExceptionState"* nocapture readnone dereferenceable(72)) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.blink::BluetoothManufacturerDataMap", %"class.blink::BluetoothManufacturerDataMap"* %0, i64 0, i32 2, i32 0, i32 0
  %7 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %6, align 8
  %8 = icmp eq %"struct.WTF::KeyValuePair"* %7, null
  %9 = getelementptr inbounds %"class.blink::BluetoothManufacturerDataMap", %"class.blink::BluetoothManufacturerDataMap"* %0, i64 0, i32 2, i32 0, i32 1
  %10 = load i32, i32* %9, align 8
  br i1 %8, label %68, label %11

11:                                               ; preds = %5
  %12 = add i32 %10, -1
  %13 = zext i32 %12 to i64
  %14 = load i16, i16* %2, align 2
  %15 = zext i16 %14 to i32
  %16 = shl nuw nsw i32 %15, 15
  %17 = xor i32 %16, -1
  %18 = add nsw i32 %17, %15
  %19 = lshr i32 %18, 10
  %20 = xor i32 %19, %18
  %21 = mul i32 %20, 9
  %22 = lshr i32 %21, 6
  %23 = xor i32 %22, %21
  %24 = shl i32 %23, 11
  %25 = xor i32 %24, -1
  %26 = add i32 %23, %25
  %27 = lshr i32 %26, 16
  %28 = xor i32 %27, %26
  %29 = and i32 %28, %12
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %7, i64 %30
  %32 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %31, i64 0, i32 0
  %33 = load i16, i16* %32, align 2
  %34 = icmp eq i16 %33, %14
  br i1 %34, label %63, label %35

35:                                               ; preds = %11
  %36 = xor i32 %28, -1
  %37 = lshr i32 %26, 23
  %38 = add i32 %37, %36
  %39 = shl i32 %38, 12
  %40 = xor i32 %39, %38
  %41 = lshr i32 %40, 7
  %42 = xor i32 %41, %40
  %43 = shl i32 %42, 2
  %44 = xor i32 %43, %42
  %45 = lshr i32 %44, 20
  %46 = xor i32 %45, %44
  %47 = or i32 %46, 1
  %48 = zext i32 %47 to i64
  br label %49

49:                                               ; preds = %54, %35
  %50 = phi i16 [ %33, %35 ], [ %61, %54 ]
  %51 = phi i64 [ %30, %35 ], [ %58, %54 ]
  %52 = phi i64 [ 0, %35 ], [ %56, %54 ]
  %53 = icmp eq i16 %50, 0
  br i1 %53, label %68, label %54

54:                                               ; preds = %49
  %55 = icmp eq i64 %52, 0
  %56 = select i1 %55, i64 %48, i64 %52
  %57 = add i64 %56, %51
  %58 = and i64 %57, %13
  %59 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %7, i64 %58
  %60 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %59, i64 0, i32 0
  %61 = load i16, i16* %60, align 2
  %62 = icmp eq i16 %61, %14
  br i1 %62, label %63, label %49

63:                                               ; preds = %54, %11
  %64 = phi %"struct.WTF::KeyValuePair"* [ %31, %11 ], [ %59, %54 ]
  %65 = icmp eq %"struct.WTF::KeyValuePair"* %64, null
  br i1 %65, label %68, label %66

66:                                               ; preds = %63
  %67 = zext i32 %10 to i64
  br label %71

68:                                               ; preds = %49, %63, %5
  %69 = zext i32 %10 to i64
  %70 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %7, i64 %69
  br label %71

71:                                               ; preds = %66, %68
  %72 = phi i64 [ %67, %66 ], [ %69, %68 ]
  %73 = phi %"struct.WTF::KeyValuePair"* [ %64, %66 ], [ %70, %68 ]
  %74 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %7, i64 %72
  %75 = icmp eq %"struct.WTF::KeyValuePair"* %73, %74
  br i1 %75, label %86, label %76

76:                                               ; preds = %71
  %77 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %73, i64 0, i32 1
  %78 = tail call %"class.blink::DOMDataView"* @_ZN5blink24BluetoothRemoteGATTUtils26ConvertWTFVectorToDataViewERKN3WTF6VectorIhLj0ENS1_18PartitionAllocatorEEE(%"class.WTF::Vector"* dereferenceable(16) %77) #5
  %79 = ptrtoint %"class.blink::DOMDataView"* %78 to i64
  %80 = bitcast %"class.blink::Member.205"* %3 to i64*
  store atomic i64 %79, i64* %80 monotonic, align 8
  %81 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %86, label %83

83:                                               ; preds = %76
  %84 = bitcast %"class.blink::DOMDataView"* %78 to i8*
  %85 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %84) #5
  br label %86

86:                                               ; preds = %83, %76, %71
  %87 = phi i1 [ false, %71 ], [ true, %76 ], [ true, %83 ]
  ret i1 %87
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare %"class.blink::DOMDataView"* @_ZN5blink24BluetoothRemoteGATTUtils26ConvertWTFVectorToDataViewERKN3WTF6VectorIhLj0ENS1_18PartitionAllocatorEEE(%"class.WTF::Vector"* dereferenceable(16)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZThn16_N5blink28BluetoothManufacturerDataMap11GetMapEntryEPNS_11ScriptStateERKtRNS_6MemberINS_11DOMDataViewEEERNS_14ExceptionStateE(%"class.blink::BluetoothManufacturerDataMap"* nocapture readonly, %"class.blink::ScriptState"* nocapture readnone, i16* nocapture readonly dereferenceable(2), %"class.blink::Member.205"* nocapture dereferenceable(8), %"class.blink::ExceptionState"* nocapture readnone dereferenceable(72)) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.blink::BluetoothManufacturerDataMap", %"class.blink::BluetoothManufacturerDataMap"* %0, i64 -1, i32 2, i32 0, i32 1
  %7 = bitcast i32* %6 to %"class.blink::BluetoothManufacturerDataMap"*
  %8 = tail call zeroext i1 @_ZN5blink28BluetoothManufacturerDataMap11GetMapEntryEPNS_11ScriptStateERKtRNS_6MemberINS_11DOMDataViewEEERNS_14ExceptionStateE(%"class.blink::BluetoothManufacturerDataMap"* %7, %"class.blink::ScriptState"* undef, i16* dereferenceable(2) %2, %"class.blink::Member.205"* dereferenceable(8) %3, %"class.blink::ExceptionState"* dereferenceable(72) undef)
  ret i1 %8
}

declare i8* @_ZNK5blink15ScriptWrappable18NameInHeapSnapshotEv(%"class.blink::ScriptWrappable"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink15ScriptWrappable18HasPendingActivityEv(%"class.blink::ScriptWrappable"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink15ScriptWrappable17HasEventListenersEv(%"class.blink::ScriptWrappable"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

declare void @_ZNK5blink15ScriptWrappable5TraceEPNS_7VisitorE(%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.blink::WrapperTypeInfo"* @_ZNK5blink28BluetoothManufacturerDataMap18GetWrapperTypeInfoEv(%"class.blink::BluetoothManufacturerDataMap"*) unnamed_addr #0 comdat align 2 {
  %2 = load %"struct.blink::WrapperTypeInfo"*, %"struct.blink::WrapperTypeInfo"** @_ZN5blink28BluetoothManufacturerDataMap18wrapper_type_info_E, align 8
  ret %"struct.blink::WrapperTypeInfo"* %2
}

declare %"class.v8::Value"* @_ZN5blink15ScriptWrappable4WrapEPNS_11ScriptStateE(%"class.blink::ScriptWrappable"*, %"class.blink::ScriptState"*) unnamed_addr #2

declare %"class.v8::Object"* @_ZN5blink15ScriptWrappable20AssociateWithWrapperEPN2v87IsolateEPKNS_15WrapperTypeInfoENS1_5LocalINS1_6ObjectEEE(%"class.blink::ScriptWrappable"*, %"class.v8::Isolate"*, %"struct.blink::WrapperTypeInfo"*, %"class.v8::Object"*) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF9HashTableItNS_12KeyValuePairItNS_6VectorIhLj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_7IntHashItEENS_18HashMapValueTraitsINS_10HashTraitsItEENSA_IS4_EEEESB_S3_E22ReserveCapacityForSizeEj(%"class.WTF::HashTable"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = icmp eq i32 %1, 0
  br i1 %4, label %16, label %5

5:                                                ; preds = %2, %5
  %6 = phi i32 [ %9, %5 ], [ %1, %2 ]
  %7 = phi i32 [ %8, %5 ], [ %1, %2 ]
  %8 = or i32 %7, %6
  %9 = lshr i32 %6, 1
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %5

11:                                               ; preds = %5
  %12 = shl i32 %8, 1
  %13 = add i32 %12, 2
  %14 = icmp ugt i32 %13, 8
  %15 = select i1 %14, i32 %13, i32 8
  br label %16

16:                                               ; preds = %11, %2
  %17 = phi i32 [ 8, %2 ], [ %15, %11 ]
  %18 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %19 = load i32, i32* %18, align 8
  %20 = icmp ugt i32 %17, %19
  br i1 %20, label %21, label %60

21:                                               ; preds = %16
  %22 = icmp slt i32 %17, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %21
  %24 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #5
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 1094, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i64 0, i64 0)) #5
  %25 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #5
  br label %26

26:                                               ; preds = %21, %23
  %27 = zext i32 %17 to i64
  %28 = mul nuw nsw i64 %27, 24
  %29 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %28, i8* getelementptr inbounds ([138 x i8], [138 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairItNS_6VectorIhLj0ENS_18PartitionAllocatorEEEEEEEPKcv, i64 0, i64 0)) #5
  %30 = bitcast i8* %29 to %"struct.WTF::KeyValuePair"*
  %31 = and i64 %27, 1
  %32 = sub nsw i64 %27, %31
  br label %33

33:                                               ; preds = %33, %26
  %34 = phi i64 [ 0, %26 ], [ %47, %33 ]
  %35 = phi i64 [ %32, %26 ], [ %48, %33 ]
  %36 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %30, i64 %34, i32 0
  store i16 0, i16* %36, align 8
  %37 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %30, i64 %34, i32 1
  %38 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %30, i64 %34, i32 1, i32 0, i32 0, i32 1
  %39 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %30, i64 %34, i32 1, i32 0, i32 0, i32 2
  %40 = bitcast %"class.WTF::Vector"* %37 to i64*
  store atomic i64 0, i64* %40 monotonic, align 8
  store i32 0, i32* %38, align 4
  store i32 0, i32* %39, align 4
  %41 = or i64 %34, 1
  %42 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %30, i64 %41, i32 0
  store i16 0, i16* %42, align 8
  %43 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %30, i64 %41, i32 1
  %44 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %30, i64 %41, i32 1, i32 0, i32 0, i32 1
  %45 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %30, i64 %41, i32 1, i32 0, i32 0, i32 2
  %46 = bitcast %"class.WTF::Vector"* %43 to i64*
  store atomic i64 0, i64* %46 monotonic, align 8
  store i32 0, i32* %44, align 4
  store i32 0, i32* %45, align 4
  %47 = add nuw nsw i64 %34, 2
  %48 = add i64 %35, -2
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %33

50:                                               ; preds = %33
  %51 = icmp eq i64 %31, 0
  br i1 %51, label %58, label %52

52:                                               ; preds = %50
  %53 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %30, i64 %47, i32 0
  store i16 0, i16* %53, align 8
  %54 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %30, i64 %47, i32 1
  %55 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %30, i64 %47, i32 1, i32 0, i32 0, i32 1
  %56 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %30, i64 %47, i32 1, i32 0, i32 0, i32 2
  %57 = bitcast %"class.WTF::Vector"* %54 to i64*
  store atomic i64 0, i64* %57 monotonic, align 8
  store i32 0, i32* %55, align 4
  store i32 0, i32* %56, align 4
  br label %58

58:                                               ; preds = %50, %52
  %59 = call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableItNS_12KeyValuePairItNS_6VectorIhLj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_7IntHashItEENS_18HashMapValueTraitsINS_10HashTraitsItEENSA_IS4_EEEESB_S3_E8RehashToEPS5_jSF_(%"class.WTF::HashTable"* %0, %"struct.WTF::KeyValuePair"* %30, i32 %17, %"struct.WTF::KeyValuePair"* null) #5
  br label %60

60:                                               ; preds = %58, %16
  ret void
}

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableItNS_12KeyValuePairItNS_6VectorIhLj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_7IntHashItEENS_18HashMapValueTraitsINS_10HashTraitsItEENSA_IS4_EEEESB_S3_E8RehashToEPS5_jSF_(%"class.WTF::HashTable"*, %"struct.WTF::KeyValuePair"*, i32, %"struct.WTF::KeyValuePair"*) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint %"struct.WTF::KeyValuePair"* %1 to i64
  %6 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  %9 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  br i1 %8, label %10, label %13

10:                                               ; preds = %4
  %11 = bitcast %"class.WTF::HashTable"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  br label %20

13:                                               ; preds = %4
  %14 = add i32 %2, -1
  %15 = zext i32 %14 to i64
  %16 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %9, align 8
  %17 = ptrtoint %"struct.WTF::KeyValuePair"* %16 to i64
  br label %55

18:                                               ; preds = %166
  %19 = bitcast %"class.WTF::HashTable"* %0 to i64*
  br label %20

20:                                               ; preds = %10, %18
  %21 = phi i64* [ %11, %10 ], [ %19, %18 ]
  %22 = phi i64 [ %12, %10 ], [ %167, %18 ]
  %23 = phi %"struct.WTF::KeyValuePair"* [ null, %10 ], [ %170, %18 ]
  %24 = phi i32 [ 0, %10 ], [ %168, %18 ]
  store atomic i64 %5, i64* %21 monotonic, align 8
  store i32 %2, i32* %6, align 8
  %25 = inttoptr i64 %22 to %"struct.WTF::KeyValuePair"*
  %26 = icmp eq i64 %22, 0
  br i1 %26, label %51, label %27

27:                                               ; preds = %20
  %28 = icmp eq i32 %24, 0
  br i1 %28, label %49, label %29

29:                                               ; preds = %27
  %30 = zext i32 %24 to i64
  br label %31

31:                                               ; preds = %46, %29
  %32 = phi i64 [ 0, %29 ], [ %47, %46 ]
  %33 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %25, i64 %32, i32 0
  %34 = load i16, i16* %33, align 2
  %35 = icmp eq i16 %34, -1
  br i1 %35, label %46, label %36

36:                                               ; preds = %31
  %37 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %25, i64 %32, i32 1, i32 0, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = icmp eq i8* %38, null
  br i1 %39, label %46, label %40, !prof !2

40:                                               ; preds = %36
  %41 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %25, i64 %32, i32 1, i32 0, i32 0, i32 2
  %42 = load i32, i32* %41, align 4
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %45, label %44, !prof !3

44:                                               ; preds = %40
  store i32 0, i32* %41, align 4
  br label %45

45:                                               ; preds = %44, %40
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %38) #5
  store i8* null, i8** %37, align 8
  br label %46

46:                                               ; preds = %45, %36, %31
  %47 = add nuw nsw i64 %32, 1
  %48 = icmp eq i64 %47, %30
  br i1 %48, label %49, label %31

49:                                               ; preds = %46, %27
  %50 = inttoptr i64 %22 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %50) #5
  br label %51

51:                                               ; preds = %20, %49
  %52 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %53 = load i32, i32* %52, align 8
  %54 = and i32 %53, -2147483648
  store i32 %54, i32* %52, align 8
  ret %"struct.WTF::KeyValuePair"* %23

55:                                               ; preds = %13, %166
  %56 = phi i64 [ %17, %13 ], [ %167, %166 ]
  %57 = phi i32 [ %7, %13 ], [ %168, %166 ]
  %58 = phi %"struct.WTF::KeyValuePair"* [ %16, %13 ], [ %169, %166 ]
  %59 = phi %"struct.WTF::KeyValuePair"* [ null, %13 ], [ %170, %166 ]
  %60 = phi i32 [ 0, %13 ], [ %171, %166 ]
  %61 = zext i32 %60 to i64
  %62 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %58, i64 %61, i32 0
  %63 = load i16, i16* %62, align 2
  %64 = add i16 %63, 1
  %65 = icmp ult i16 %64, 2
  br i1 %65, label %166, label %66

66:                                               ; preds = %55
  %67 = zext i16 %63 to i32
  %68 = shl nuw nsw i32 %67, 15
  %69 = xor i32 %68, -1
  %70 = add nsw i32 %69, %67
  %71 = lshr i32 %70, 10
  %72 = xor i32 %71, %70
  %73 = mul i32 %72, 9
  %74 = lshr i32 %73, 6
  %75 = xor i32 %74, %73
  %76 = shl i32 %75, 11
  %77 = xor i32 %76, -1
  %78 = add i32 %75, %77
  %79 = lshr i32 %78, 16
  %80 = xor i32 %79, %78
  %81 = and i32 %80, %14
  %82 = zext i32 %81 to i64
  %83 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %1, i64 %82
  %84 = ptrtoint %"struct.WTF::KeyValuePair"* %83 to i64
  %85 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %83, i64 0, i32 0
  %86 = load i16, i16* %85, align 2
  %87 = icmp eq i16 %86, 0
  br i1 %87, label %105, label %88

88:                                               ; preds = %66
  %89 = xor i32 %80, -1
  %90 = lshr i32 %78, 23
  %91 = add i32 %90, %89
  %92 = shl i32 %91, 12
  %93 = xor i32 %92, %91
  %94 = lshr i32 %93, 7
  %95 = xor i32 %94, %93
  %96 = shl i32 %95, 2
  %97 = xor i32 %96, %95
  %98 = lshr i32 %97, 20
  %99 = xor i32 %98, %97
  %100 = or i32 %99, 1
  %101 = zext i32 %100 to i64
  br label %111

102:                                              ; preds = %118
  %103 = ptrtoint %"struct.WTF::KeyValuePair"* %125 to i64
  %104 = inttoptr i64 %120 to %"struct.WTF::KeyValuePair"*
  br label %105

105:                                              ; preds = %102, %66
  %106 = phi i64 [ %103, %102 ], [ %84, %66 ]
  %107 = phi %"struct.WTF::KeyValuePair"* [ %104, %102 ], [ null, %66 ]
  %108 = icmp eq %"struct.WTF::KeyValuePair"* %107, null
  %109 = ptrtoint %"struct.WTF::KeyValuePair"* %107 to i64
  %110 = select i1 %108, i64 %106, i64 %109
  br label %130

111:                                              ; preds = %118, %88
  %112 = phi i64 [ 0, %88 ], [ %120, %118 ]
  %113 = phi i16 [ %86, %88 ], [ %128, %118 ]
  %114 = phi i64 [ %84, %88 ], [ %126, %118 ]
  %115 = phi i64 [ %82, %88 ], [ %124, %118 ]
  %116 = phi i64 [ 0, %88 ], [ %122, %118 ]
  %117 = icmp eq i16 %113, %63
  br i1 %117, label %130, label %118

118:                                              ; preds = %111
  %119 = icmp eq i16 %113, -1
  %120 = select i1 %119, i64 %114, i64 %112
  %121 = icmp eq i64 %116, 0
  %122 = select i1 %121, i64 %101, i64 %116
  %123 = add i64 %122, %115
  %124 = and i64 %123, %15
  %125 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %1, i64 %124
  %126 = ptrtoint %"struct.WTF::KeyValuePair"* %125 to i64
  %127 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %125, i64 0, i32 0
  %128 = load i16, i16* %127, align 2
  %129 = icmp eq i16 %128, 0
  br i1 %129, label %102, label %111

130:                                              ; preds = %111, %105
  %131 = phi i64 [ %110, %105 ], [ %114, %111 ]
  %132 = inttoptr i64 %131 to %"struct.WTF::KeyValuePair"*
  %133 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %132, i64 0, i32 1, i32 0, i32 0, i32 0
  %134 = load i8*, i8** %133, align 8
  %135 = icmp eq i8* %134, null
  br i1 %135, label %143, label %136, !prof !2

136:                                              ; preds = %130
  %137 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %132, i64 0, i32 1, i32 0, i32 0, i32 2
  %138 = load i32, i32* %137, align 4
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %141, label %140, !prof !3

140:                                              ; preds = %136
  store i32 0, i32* %137, align 4
  br label %141

141:                                              ; preds = %140, %136
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %134) #5
  store i8* null, i8** %133, align 8
  %142 = load i16, i16* %62, align 8
  br label %143

143:                                              ; preds = %130, %141
  %144 = phi i16 [ %63, %130 ], [ %142, %141 ]
  %145 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %132, i64 0, i32 0
  store i16 %144, i16* %145, align 8
  %146 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %132, i64 0, i32 1
  %147 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %58, i64 %61, i32 1
  %148 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %132, i64 0, i32 1, i32 0, i32 0, i32 1
  %149 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %132, i64 0, i32 1, i32 0, i32 0, i32 2
  %150 = bitcast %"class.WTF::Vector"* %147 to i64*
  %151 = bitcast %"class.WTF::Vector"* %146 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %151, i8 0, i64 16, i1 false) #5
  %152 = load i64, i64* %150, align 8
  %153 = bitcast %"class.WTF::Vector"* %146 to i64*
  store atomic i64 0, i64* %150 monotonic, align 8
  store atomic i64 %152, i64* %153 monotonic, align 8
  %154 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %58, i64 %61, i32 1, i32 0, i32 0, i32 1
  %155 = load i32, i32* %148, align 4
  %156 = load i32, i32* %154, align 4
  store i32 %156, i32* %148, align 4
  store i32 %155, i32* %154, align 4
  %157 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %58, i64 %61, i32 1, i32 0, i32 0, i32 2
  %158 = load i32, i32* %149, align 4
  %159 = load i32, i32* %157, align 4
  store i32 %159, i32* %149, align 4
  store i32 %158, i32* %157, align 4
  %160 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %9, align 8
  %161 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %160, i64 %61
  %162 = icmp eq %"struct.WTF::KeyValuePair"* %161, %3
  %163 = select i1 %162, %"struct.WTF::KeyValuePair"* %132, %"struct.WTF::KeyValuePair"* %59
  %164 = load i32, i32* %6, align 8
  %165 = ptrtoint %"struct.WTF::KeyValuePair"* %160 to i64
  br label %166

166:                                              ; preds = %55, %143
  %167 = phi i64 [ %56, %55 ], [ %165, %143 ]
  %168 = phi i32 [ %57, %55 ], [ %164, %143 ]
  %169 = phi %"struct.WTF::KeyValuePair"* [ %58, %55 ], [ %160, %143 ]
  %170 = phi %"struct.WTF::KeyValuePair"* [ %59, %55 ], [ %163, %143 ]
  %171 = add i32 %60, 1
  %172 = icmp eq i32 %171, %168
  br i1 %172, label %18, label %55
}

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #2

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair"*, i8 } @_ZN3WTF9HashTableItNS_12KeyValuePairItNS_6VectorIhLj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_7IntHashItEENS_18HashMapValueTraitsINS_10HashTraitsItEENSA_IS4_EEEESB_S3_E6insertINS_22IdentityHashTranslatorIS8_SD_S3_EERKtRKS5_EENS_18HashTableAddResultISE_S5_EEOT0_OT1_(%"class.WTF::HashTable"*, i16* dereferenceable(2), %"struct.WTF::KeyValuePair"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %5 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %4, align 8
  %6 = icmp eq %"struct.WTF::KeyValuePair"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableItNS_12KeyValuePairItNS_6VectorIhLj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_7IntHashItEENS_18HashMapValueTraitsINS_10HashTraitsItEENSA_IS4_EEEESB_S3_E6ExpandEPS5_(%"class.WTF::HashTable"* %0, %"struct.WTF::KeyValuePair"* null)
  %9 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"struct.WTF::KeyValuePair"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = load i16, i16* %1, align 2
  %17 = zext i16 %16 to i32
  %18 = shl nuw nsw i32 %17, 15
  %19 = xor i32 %18, -1
  %20 = add nsw i32 %19, %17
  %21 = lshr i32 %20, 10
  %22 = xor i32 %21, %20
  %23 = mul i32 %22, 9
  %24 = lshr i32 %23, 6
  %25 = xor i32 %24, %23
  %26 = shl i32 %25, 11
  %27 = xor i32 %26, -1
  %28 = add i32 %25, %27
  %29 = lshr i32 %28, 16
  %30 = xor i32 %29, %28
  %31 = and i32 %30, %14
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %11, i64 %32
  %34 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %33, i64 0, i32 0
  %35 = load i16, i16* %34, align 2
  %36 = icmp eq i16 %35, 0
  br i1 %36, label %83, label %37

37:                                               ; preds = %10
  %38 = xor i32 %30, -1
  %39 = lshr i32 %28, 23
  %40 = add i32 %39, %38
  %41 = shl i32 %40, 12
  %42 = xor i32 %41, %40
  %43 = lshr i32 %42, 7
  %44 = xor i32 %43, %42
  %45 = shl i32 %44, 2
  %46 = xor i32 %45, %44
  %47 = lshr i32 %46, 20
  %48 = xor i32 %47, %46
  %49 = or i32 %48, 1
  %50 = zext i32 %49 to i64
  br label %51

51:                                               ; preds = %37, %58
  %52 = phi i16 [ %35, %37 ], [ %67, %58 ]
  %53 = phi %"struct.WTF::KeyValuePair"* [ %33, %37 ], [ %65, %58 ]
  %54 = phi %"struct.WTF::KeyValuePair"* [ null, %37 ], [ %60, %58 ]
  %55 = phi i64 [ %32, %37 ], [ %64, %58 ]
  %56 = phi i64 [ 0, %37 ], [ %62, %58 ]
  %57 = icmp eq i16 %52, %16
  br i1 %57, label %102, label %58

58:                                               ; preds = %51
  %59 = icmp eq i16 %52, -1
  %60 = select i1 %59, %"struct.WTF::KeyValuePair"* %53, %"struct.WTF::KeyValuePair"* %54
  %61 = icmp eq i64 %56, 0
  %62 = select i1 %61, i64 %50, i64 %56
  %63 = add i64 %62, %55
  %64 = and i64 %63, %15
  %65 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %11, i64 %64
  %66 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %65, i64 0, i32 0
  %67 = load i16, i16* %66, align 2
  %68 = icmp eq i16 %67, 0
  br i1 %68, label %69, label %51

69:                                               ; preds = %58
  %70 = icmp eq %"struct.WTF::KeyValuePair"* %60, null
  br i1 %70, label %83, label %71

71:                                               ; preds = %69
  %72 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %60, i64 0, i32 0
  store i16 0, i16* %72, align 8
  %73 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %60, i64 0, i32 1
  %74 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %60, i64 0, i32 1, i32 0, i32 0, i32 1
  %75 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %60, i64 0, i32 1, i32 0, i32 0, i32 2
  %76 = bitcast %"class.WTF::Vector"* %73 to i64*
  store atomic i64 0, i64* %76 monotonic, align 8
  store i32 0, i32* %74, align 4
  store i32 0, i32* %75, align 4
  %77 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %78 = load i32, i32* %77, align 8
  %79 = add i32 %78, 2147483647
  %80 = and i32 %79, 2147483647
  %81 = and i32 %78, -2147483648
  %82 = or i32 %80, %81
  store i32 %82, i32* %77, align 8
  br label %83

83:                                               ; preds = %10, %69, %71
  %84 = phi %"struct.WTF::KeyValuePair"* [ %60, %71 ], [ %65, %69 ], [ %33, %10 ]
  %85 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %2, i64 0, i32 0
  %86 = load i16, i16* %85, align 8
  %87 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %84, i64 0, i32 0
  store i16 %86, i16* %87, align 8
  %88 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %84, i64 0, i32 1
  %89 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %2, i64 0, i32 1
  %90 = tail call dereferenceable(16) %"class.WTF::Vector"* @_ZN3WTF6VectorIhLj0ENS_18PartitionAllocatorEEaSERKS2_(%"class.WTF::Vector"* %88, %"class.WTF::Vector"* dereferenceable(16) %89) #5
  %91 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %92 = load i32, i32* %91, align 4
  %93 = add i32 %92, 1
  store i32 %93, i32* %91, align 4
  %94 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %95 = load i32, i32* %94, align 8
  %96 = add i32 %95, %93
  %97 = shl i32 %96, 1
  %98 = load i32, i32* %12, align 8
  %99 = icmp ult i32 %97, %98
  br i1 %99, label %102, label %100

100:                                              ; preds = %83
  %101 = tail call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableItNS_12KeyValuePairItNS_6VectorIhLj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_7IntHashItEENS_18HashMapValueTraitsINS_10HashTraitsItEENSA_IS4_EEEESB_S3_E6ExpandEPS5_(%"class.WTF::HashTable"* %0, %"struct.WTF::KeyValuePair"* %84)
  br label %102

102:                                              ; preds = %51, %83, %100
  %103 = phi i8 [ 1, %83 ], [ 1, %100 ], [ 0, %51 ]
  %104 = phi %"struct.WTF::KeyValuePair"* [ %84, %83 ], [ %101, %100 ], [ %53, %51 ]
  %105 = insertvalue { %"struct.WTF::KeyValuePair"*, i8 } undef, %"struct.WTF::KeyValuePair"* %104, 0
  %106 = insertvalue { %"struct.WTF::KeyValuePair"*, i8 } %105, i8 %103, 1
  ret { %"struct.WTF::KeyValuePair"*, i8 } %106
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableItNS_12KeyValuePairItNS_6VectorIhLj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_7IntHashItEENS_18HashMapValueTraitsINS_10HashTraitsItEENSA_IS4_EEEESB_S3_E6ExpandEPS5_(%"class.WTF::HashTable"*, %"struct.WTF::KeyValuePair"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %31, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %11, 6
  %13 = shl i32 %7, 1
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %31, label %15

15:                                               ; preds = %9
  %16 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #5
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %18 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
  %19 = icmp ugt i32 %13, %7
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* null, i8** %17, align 8
  br label %30

21:                                               ; preds = %15
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %13) #5
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #5
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), i8* %22, i8* %23) #5
  %24 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* %25, i8** %17, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %21
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #5
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %4) #5
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #5
  br label %30

30:                                               ; preds = %20, %21, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #5
  br label %31

31:                                               ; preds = %9, %2, %30
  %32 = phi i32 [ %13, %30 ], [ 8, %2 ], [ %7, %9 ]
  %33 = zext i32 %32 to i64
  %34 = mul nuw nsw i64 %33, 24
  %35 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %34, i8* getelementptr inbounds ([138 x i8], [138 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairItNS_6VectorIhLj0ENS_18PartitionAllocatorEEEEEEEPKcv, i64 0, i64 0)) #5
  %36 = bitcast i8* %35 to %"struct.WTF::KeyValuePair"*
  %37 = icmp eq i32 %32, 0
  br i1 %37, label %69, label %38

38:                                               ; preds = %31
  %39 = and i64 %33, 1
  %40 = icmp eq i32 %32, 1
  br i1 %40, label %60, label %41

41:                                               ; preds = %38
  %42 = sub nsw i64 %33, %39
  br label %43

43:                                               ; preds = %43, %41
  %44 = phi i64 [ 0, %41 ], [ %57, %43 ]
  %45 = phi i64 [ %42, %41 ], [ %58, %43 ]
  %46 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 %44, i32 0
  store i16 0, i16* %46, align 8
  %47 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 %44, i32 1
  %48 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 %44, i32 1, i32 0, i32 0, i32 1
  %49 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 %44, i32 1, i32 0, i32 0, i32 2
  %50 = bitcast %"class.WTF::Vector"* %47 to i64*
  store atomic i64 0, i64* %50 monotonic, align 8
  store i32 0, i32* %48, align 4
  store i32 0, i32* %49, align 4
  %51 = or i64 %44, 1
  %52 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 %51, i32 0
  store i16 0, i16* %52, align 8
  %53 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 %51, i32 1
  %54 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 %51, i32 1, i32 0, i32 0, i32 1
  %55 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 %51, i32 1, i32 0, i32 0, i32 2
  %56 = bitcast %"class.WTF::Vector"* %53 to i64*
  store atomic i64 0, i64* %56 monotonic, align 8
  store i32 0, i32* %54, align 4
  store i32 0, i32* %55, align 4
  %57 = add nuw nsw i64 %44, 2
  %58 = add i64 %45, -2
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %60, label %43

60:                                               ; preds = %43, %38
  %61 = phi i64 [ 0, %38 ], [ %57, %43 ]
  %62 = icmp eq i64 %39, 0
  br i1 %62, label %69, label %63

63:                                               ; preds = %60
  %64 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 %61, i32 0
  store i16 0, i16* %64, align 8
  %65 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 %61, i32 1
  %66 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 %61, i32 1, i32 0, i32 0, i32 1
  %67 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 %61, i32 1, i32 0, i32 0, i32 2
  %68 = bitcast %"class.WTF::Vector"* %65 to i64*
  store atomic i64 0, i64* %68 monotonic, align 8
  store i32 0, i32* %66, align 4
  store i32 0, i32* %67, align 4
  br label %69

69:                                               ; preds = %63, %60, %31
  %70 = call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableItNS_12KeyValuePairItNS_6VectorIhLj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_7IntHashItEENS_18HashMapValueTraitsINS_10HashTraitsItEENSA_IS4_EEEESB_S3_E8RehashToEPS5_jSF_(%"class.WTF::HashTable"* %0, %"struct.WTF::KeyValuePair"* %36, i32 %32, %"struct.WTF::KeyValuePair"* %1) #5
  ret %"struct.WTF::KeyValuePair"* %70
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"class.WTF::Vector"* @_ZN3WTF6VectorIhLj0ENS_18PartitionAllocatorEEaSERKS2_(%"class.WTF::Vector"*, %"class.WTF::Vector"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %"class.WTF::Vector"* %1, %0
  br i1 %3, label %79, label %4, !prof !3

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp ugt i32 %6, %8
  br i1 %9, label %10, label %11

10:                                               ; preds = %4
  store i32 %8, i32* %5, align 4
  br label %54

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = icmp ugt i32 %8, %13
  br i1 %14, label %15, label %54

15:                                               ; preds = %11
  %16 = icmp eq i32 %13, 0
  br i1 %16, label %26, label %17

17:                                               ; preds = %15
  %18 = icmp eq i32 %6, 0
  br i1 %18, label %20, label %19

19:                                               ; preds = %17
  store i32 0, i32* %5, align 4
  br label %20

20:                                               ; preds = %19, %17
  %21 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 0, i64* %23 monotonic, align 8
  store i32 0, i32* %12, align 8
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %22) #5
  %24 = load i32, i32* %7, align 4
  %25 = load i32, i32* %12, align 8
  br label %26

26:                                               ; preds = %15, %20
  %27 = phi i32 [ 0, %15 ], [ %25, %20 ]
  %28 = phi i32 [ %8, %15 ], [ %24, %20 ]
  %29 = icmp ult i32 %27, %28
  br i1 %29, label %30, label %54, !prof !2

30:                                               ; preds = %26
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = icmp eq i8* %32, null
  %34 = zext i32 %28 to i64
  %35 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64 %34) #5
  %36 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %35, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv, i64 0, i64 0)) #5
  %37 = ptrtoint i8* %36 to i64
  br i1 %33, label %38, label %41

38:                                               ; preds = %30
  %39 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %37, i64* %39 monotonic, align 8
  %40 = trunc i64 %35 to i32
  store i32 %40, i32* %12, align 8
  br label %54

41:                                               ; preds = %30
  %42 = load i8*, i8** %31, align 8
  %43 = icmp ne i8* %36, null
  %44 = icmp ne i8* %42, null
  %45 = and i1 %43, %44
  br i1 %45, label %46, label %50, !prof !2

46:                                               ; preds = %41
  %47 = load i32, i32* %5, align 4
  %48 = zext i32 %47 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %36, i8* nonnull align 1 %42, i64 %48, i1 false) #5
  %49 = load i8*, i8** %31, align 8
  br label %50

50:                                               ; preds = %46, %41
  %51 = phi i8* [ %42, %41 ], [ %49, %46 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %51) #5
  %52 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %37, i64* %52 monotonic, align 8
  %53 = trunc i64 %35 to i32
  store i32 %53, i32* %12, align 8
  br label %54

54:                                               ; preds = %50, %38, %26, %11, %10
  %55 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 0
  %56 = load i8*, i8** %55, align 8
  %57 = load i32, i32* %5, align 4
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %60 = load i8*, i8** %59, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %60, i8* align 1 %56, i64 %58, i1 false) #5
  %61 = load i8*, i8** %55, align 8
  %62 = load i32, i32* %5, align 4
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds i8, i8* %61, i64 %63
  %65 = load i8*, i8** %59, align 8
  %66 = getelementptr inbounds i8, i8* %65, i64 %63
  %67 = icmp ne i8* %66, null
  %68 = icmp ne i8* %64, null
  %69 = and i1 %68, %67
  br i1 %69, label %70, label %77, !prof !2

70:                                               ; preds = %54
  %71 = load i32, i32* %7, align 4
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds i8, i8* %61, i64 %72
  %74 = ptrtoint i8* %73 to i64
  %75 = ptrtoint i8* %64 to i64
  %76 = sub i64 %74, %75
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %66, i8* nonnull align 1 %64, i64 %76, i1 false) #5
  br label %77

77:                                               ; preds = %54, %70
  %78 = load i32, i32* %7, align 4
  store i32 %78, i32* %5, align 4
  br label %79

79:                                               ; preds = %2, %77
  ret %"class.WTF::Vector"* %0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #5
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 2145386496
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #5
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 2145386496) #5
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0), i8* %11, i8* %12) #5
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #5
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.4, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #5
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #5
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #5
  %20 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %0) #5
  ret i64 %20
}

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap8AllocateINS_8IterableItNS_6MemberINS_11DOMDataViewEEEE15IterationSourceEEEPhm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %6 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %5, i64 0, i32 1
  %7 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %6) #5
  %8 = icmp eq i8* %7, null
  br i1 %8, label %9, label %11, !prof !3

9:                                                ; preds = %1
  %10 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #5
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %6, i8* %10) #5
  br label %11

11:                                               ; preds = %1, %9
  %12 = phi i8* [ %10, %9 ], [ %7, %1 ]
  %13 = bitcast i8* %12 to %"class.blink::ThreadState"**
  %14 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %14, i64 0, i32 0, i32 0, i32 0, i32 0
  %16 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %15, align 8
  %17 = icmp ult i64 %0, 64
  %18 = icmp ugt i64 %0, 31
  %19 = zext i1 %18 to i64
  %20 = icmp ult i64 %0, 128
  %21 = select i1 %20, i64 2, i64 3
  %22 = select i1 %17, i64 %19, i64 %21
  %23 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_8IterableItNS_6MemberINS_11DOMDataViewEEEE15IterationSourceEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %11
  %26 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %27 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %26, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_8IterableItNS_6MemberINS_11DOMDataViewEEEE15IterationSourceEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic.195"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_8IterableItNS_6MemberINS_11DOMDataViewEEEE15IterationSourceEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic.195"*)) #5
  br label %28

28:                                               ; preds = %11, %25
  %29 = phi i32 [ %23, %11 ], [ %27, %25 ]
  %30 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %16, i64 0, i32 19, i64 %22
  %31 = bitcast %"class.blink::BaseArena"** %30 to %"class.blink::NormalPageArena"**
  %32 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %31, align 8
  %33 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #5
  %34 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %34, align 8
  %35 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #5
  %36 = icmp ult i64 %0, -8
  br i1 %36, label %37, label %38

37:                                               ; preds = %28
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #5
  store i8* null, i8** %34, align 8
  br label %48

38:                                               ; preds = %28
  %39 = add nsw i64 %0, 8
  %40 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %39) #5
  %41 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #5
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0), i8* %40, i8* %41) #5
  %42 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #5
  store i8* %43, i8** %34, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %48, label %45

45:                                               ; preds = %38
  %46 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %46) #5
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.8, i64 0, i64 0), i32 246, %"class.logging::CheckOpResult"* nonnull %3) #5
  %47 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %46) #5
  br label %48

48:                                               ; preds = %37, %38, %45
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #5
  %49 = add i64 %0, 15
  %50 = and i64 %49, -8
  %51 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 4
  %52 = load i64, i64* %51, align 8
  %53 = icmp ult i64 %52, %50
  br i1 %53, label %86, label %54, !prof !3

54:                                               ; preds = %48
  %55 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 3
  %56 = load i8*, i8** %55, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 %50
  store i8* %57, i8** %55, align 8
  %58 = sub i64 %52, %50
  store i64 %58, i64* %51, align 8
  %59 = bitcast i8* %56 to i32*
  store i32 0, i32* %59, align 4
  %60 = getelementptr inbounds i8, i8* %56, i64 4
  %61 = bitcast i8* %60 to i16*
  %62 = trunc i32 %29 to i16
  %63 = shl i16 %62, 2
  store atomic i16 %63, i16* %61 monotonic, align 2
  %64 = lshr exact i64 %50, 1
  %65 = trunc i64 %64 to i16
  %66 = getelementptr inbounds i8, i8* %56, i64 6
  %67 = bitcast i8* %66 to i16*
  store i16 %65, i16* %67, align 2
  %68 = ptrtoint i8* %56 to i64
  %69 = and i64 %68, -131072
  %70 = inttoptr i64 %69 to i8*
  %71 = getelementptr inbounds i8, i8* %70, i64 4400
  %72 = bitcast i8* %71 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %73 = bitcast i8* %71 to i64*
  %74 = load i64, i64* %73, align 16
  %75 = sub i64 %68, %74
  %76 = lshr i64 %75, 3
  %77 = lshr i64 %75, 6
  %78 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %72, i64 0, i32 0, i32 1, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = trunc i64 %76 to i32
  %81 = and i32 %80, 7
  %82 = shl i32 1, %81
  %83 = trunc i32 %82 to i8
  %84 = or i8 %79, %83
  store atomic i8 %84, i8* %78 release, align 1
  %85 = getelementptr inbounds i8, i8* %56, i64 8
  br label %89

86:                                               ; preds = %48
  %87 = zext i32 %29 to i64
  %88 = call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %32, i64 %50, i64 %87) #5
  br label %89

89:                                               ; preds = %54, %86
  %90 = phi i8* [ %85, %54 ], [ %88, %86 ]
  ret i8* %90
}

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #2

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #2

declare void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"*, i8*) local_unnamed_addr #2

declare i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"*, i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_8IterableItNS_6MemberINS_11DOMDataViewEEEE15IterationSourceEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::Iterable<unsigned short, blink::Member<blink::DOMDataView> >::IterationSource"*
  %4 = bitcast i8* %1 to void (%"class.blink::Iterable<unsigned short, blink::Member<blink::DOMDataView> >::IterationSource"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::Iterable<unsigned short, blink::Member<blink::DOMDataView> >::IterationSource"*, %"class.blink::Visitor"*)**, void (%"class.blink::Iterable<unsigned short, blink::Member<blink::DOMDataView> >::IterationSource"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::Iterable<unsigned short, blink::Member<blink::DOMDataView> >::IterationSource"*, %"class.blink::Visitor"*)*, void (%"class.blink::Iterable<unsigned short, blink::Member<blink::DOMDataView> >::IterationSource"*, %"class.blink::Visitor"*)** %5, i64 3
  %7 = load void (%"class.blink::Iterable<unsigned short, blink::Member<blink::DOMDataView> >::IterationSource"*, %"class.blink::Visitor"*)*, void (%"class.blink::Iterable<unsigned short, blink::Member<blink::DOMDataView> >::IterationSource"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::Iterable<unsigned short, blink::Member<blink::DOMDataView> >::IterationSource"* %3, %"class.blink::Visitor"* %0) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_8IterableItNS_6MemberINS_11DOMDataViewEEEE15IterationSourceEE8FinalizeEPv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::Iterable<unsigned short, blink::Member<blink::DOMDataView> >::IterationSource"*
  %3 = bitcast i8* %0 to void (%"class.blink::Iterable<unsigned short, blink::Member<blink::DOMDataView> >::IterationSource"*)***
  %4 = load void (%"class.blink::Iterable<unsigned short, blink::Member<blink::DOMDataView> >::IterationSource"*)**, void (%"class.blink::Iterable<unsigned short, blink::Member<blink::DOMDataView> >::IterationSource"*)*** %3, align 8
  %5 = load void (%"class.blink::Iterable<unsigned short, blink::Member<blink::DOMDataView> >::IterationSource"*)*, void (%"class.blink::Iterable<unsigned short, blink::Member<blink::DOMDataView> >::IterationSource"*)** %4, align 8
  tail call void %5(%"class.blink::Iterable<unsigned short, blink::Member<blink::DOMDataView> >::IterationSource"* %2) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_8IterableItNS_6MemberINS_11DOMDataViewEEEE15IterationSourceEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i64 0, i64 0), i8 1 }
}

declare i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"*, %"struct.blink::GCInfo"*, %"struct.std::__1::atomic.195"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8IterableItNS_6MemberINS_11DOMDataViewEEEE15IterationSourceD2Ev(%"class.blink::Iterable<unsigned short, blink::Member<blink::DOMDataView> >::IterationSource"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink43BluetoothManufacturerDataMapIterationSourceD0Ev(%"class.blink::BluetoothManufacturerDataMapIterationSource"*) unnamed_addr #4 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN5blink43BluetoothManufacturerDataMapIterationSource4NextEPNS_11ScriptStateERtRNS_6MemberINS_11DOMDataViewEEERNS_14ExceptionStateE(%"class.blink::BluetoothManufacturerDataMapIterationSource"*, %"class.blink::ScriptState"*, i16* dereferenceable(2), %"class.blink::Member.205"* dereferenceable(8), %"class.blink::ExceptionState"* dereferenceable(72)) unnamed_addr #0 comdat align 2 {
  %6 = getelementptr inbounds %"class.blink::BluetoothManufacturerDataMapIterationSource", %"class.blink::BluetoothManufacturerDataMapIterationSource"* %0, i64 0, i32 1, i32 0, i32 0
  %7 = load %"class.blink::BluetoothManufacturerDataMap"*, %"class.blink::BluetoothManufacturerDataMap"** %6, align 8
  %8 = getelementptr inbounds %"class.blink::BluetoothManufacturerDataMap", %"class.blink::BluetoothManufacturerDataMap"* %7, i64 0, i32 2, i32 0, i32 0
  %9 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %8, align 8
  %10 = getelementptr inbounds %"class.blink::BluetoothManufacturerDataMap", %"class.blink::BluetoothManufacturerDataMap"* %7, i64 0, i32 2, i32 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %9, i64 %12
  %14 = getelementptr inbounds %"class.blink::BluetoothManufacturerDataMapIterationSource", %"class.blink::BluetoothManufacturerDataMapIterationSource"* %0, i64 0, i32 2, i32 0, i32 0
  %15 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %14, align 8
  %16 = icmp eq %"struct.WTF::KeyValuePair"* %15, %13
  br i1 %16, label %45, label %17

17:                                               ; preds = %5
  %18 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %15, i64 0, i32 0
  %19 = load i16, i16* %18, align 8
  store i16 %19, i16* %2, align 2
  %20 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %14, align 8
  %21 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %20, i64 0, i32 1
  %22 = tail call %"class.blink::DOMDataView"* @_ZN5blink24BluetoothRemoteGATTUtils26ConvertWTFVectorToDataViewERKN3WTF6VectorIhLj0ENS1_18PartitionAllocatorEEE(%"class.WTF::Vector"* dereferenceable(16) %21) #5
  %23 = ptrtoint %"class.blink::DOMDataView"* %22 to i64
  %24 = bitcast %"class.blink::Member.205"* %3 to i64*
  store atomic i64 %23, i64* %24 monotonic, align 8
  %25 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %30, label %27

27:                                               ; preds = %17
  %28 = bitcast %"class.blink::DOMDataView"* %22 to i8*
  %29 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %28) #5
  br label %30

30:                                               ; preds = %17, %27
  %31 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %14, align 8
  %32 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %31, i64 1
  store %"struct.WTF::KeyValuePair"* %32, %"struct.WTF::KeyValuePair"** %14, align 8
  %33 = getelementptr inbounds %"class.blink::BluetoothManufacturerDataMapIterationSource", %"class.blink::BluetoothManufacturerDataMapIterationSource"* %0, i64 0, i32 2, i32 0, i32 1
  %34 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %33, align 8
  %35 = icmp eq %"struct.WTF::KeyValuePair"* %32, %34
  br i1 %35, label %45, label %36

36:                                               ; preds = %30, %42
  %37 = phi %"struct.WTF::KeyValuePair"* [ %43, %42 ], [ %32, %30 ]
  %38 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %37, i64 0, i32 0
  %39 = load i16, i16* %38, align 2
  %40 = add i16 %39, 1
  %41 = icmp ult i16 %40, 2
  br i1 %41, label %42, label %45

42:                                               ; preds = %36
  %43 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %37, i64 1
  store %"struct.WTF::KeyValuePair"* %43, %"struct.WTF::KeyValuePair"** %14, align 8
  %44 = icmp eq %"struct.WTF::KeyValuePair"* %43, %34
  br i1 %44, label %45, label %36

45:                                               ; preds = %42, %36, %30, %5
  %46 = phi i1 [ false, %5 ], [ true, %30 ], [ true, %36 ], [ true, %42 ]
  ret i1 %46
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK5blink43BluetoothManufacturerDataMapIterationSource5TraceEPNS_7VisitorE(%"class.blink::BluetoothManufacturerDataMapIterationSource"*, %"class.blink::Visitor"*) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.blink::BluetoothManufacturerDataMapIterationSource", %"class.blink::BluetoothManufacturerDataMapIterationSource"* %0, i64 0, i32 1
  %4 = bitcast %"class.blink::Member.203"* %3 to i64*
  %5 = load atomic i64, i64* %4 monotonic, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %13, label %7

7:                                                ; preds = %2
  %8 = inttoptr i64 %5 to i8*
  %9 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %10 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %9, align 8
  %11 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %10, i64 5
  %12 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %11, align 8
  tail call void %12(%"class.blink::Visitor"* %1, i8* nonnull %8, i8* nonnull %8, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_28BluetoothManufacturerDataMapEE5TraceEPNS_7VisitorEPKv) #5
  br label %13

13:                                               ; preds = %2, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_28BluetoothManufacturerDataMapEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::ScriptWrappable"*
  tail call void @_ZNK5blink15ScriptWrappable5TraceEPNS_7VisitorE(%"class.blink::ScriptWrappable"* %3, %"class.blink::Visitor"* %0) #5
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!"branch_weights", i32 1, i32 2000}
