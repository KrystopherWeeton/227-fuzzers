; ModuleID = '../../third_party/libvpx/source/libvpx/vpx_dsp/x86/vpx_subpixel_4t_intrin_sse2.c'
source_filename = "../../third_party/libvpx/source/libvpx/vpx_dsp/x86/vpx_subpixel_4t_intrin_sse2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_convolve8_horiz_sse2(i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  %12 = sext i32 %5 to i64
  %13 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 0
  %14 = load i16, i16* %13, align 2
  %15 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 1
  %16 = load i16, i16* %15, align 2
  %17 = or i16 %16, %14
  %18 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 6
  %19 = load i16, i16* %18, align 2
  %20 = or i16 %17, %19
  %21 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 7
  %22 = load i16, i16* %21, align 2
  %23 = or i16 %20, %22
  %24 = icmp eq i16 %23, 0
  br i1 %24, label %43, label %25

25:                                               ; preds = %11
  %26 = icmp sgt i32 %9, 15
  br i1 %26, label %27, label %37

27:                                               ; preds = %25, %27
  %28 = phi i8* [ %31, %27 ], [ %0, %25 ]
  %29 = phi i8* [ %32, %27 ], [ %2, %25 ]
  %30 = phi i32 [ %33, %27 ], [ %9, %25 ]
  tail call void @vpx_filter_block1d16_h8_sse2(i8* %28, i64 %1, i8* %29, i64 %3, i32 %10, i16* %13) #6
  %31 = getelementptr inbounds i8, i8* %28, i64 16
  %32 = getelementptr inbounds i8, i8* %29, i64 16
  %33 = add nsw i32 %30, -16
  %34 = icmp sgt i32 %33, 15
  br i1 %34, label %27, label %35

35:                                               ; preds = %27
  %36 = and i32 %9, 15
  br label %37

37:                                               ; preds = %35, %25
  %38 = phi i32 [ %9, %25 ], [ %36, %35 ]
  %39 = phi i8* [ %2, %25 ], [ %32, %35 ]
  %40 = phi i8* [ %0, %25 ], [ %31, %35 ]
  switch i32 %38, label %262 [
    i32 8, label %41
    i32 4, label %42
  ]

41:                                               ; preds = %37
  tail call void @vpx_filter_block1d8_h8_sse2(i8* %40, i64 %1, i8* %39, i64 %3, i32 %10, i16* %13) #6
  br label %262

42:                                               ; preds = %37
  tail call void @vpx_filter_block1d4_h8_sse2(i8* %40, i64 %1, i8* %39, i64 %3, i32 %10, i16* %13) #6
  br label %262

43:                                               ; preds = %11
  %44 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 2
  %45 = load i16, i16* %44, align 2
  %46 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 5
  %47 = load i16, i16* %46, align 2
  %48 = or i16 %47, %45
  %49 = icmp eq i16 %48, 0
  %50 = icmp sgt i32 %9, 15
  br i1 %49, label %55, label %51

51:                                               ; preds = %43
  br i1 %50, label %52, label %139

52:                                               ; preds = %51
  %53 = bitcast i16* %13 to <8 x i16>*
  %54 = icmp sgt i32 %10, 0
  br label %56

55:                                               ; preds = %43
  br i1 %50, label %246, label %256

56:                                               ; preds = %52, %132
  %57 = phi i8* [ %0, %52 ], [ %133, %132 ]
  %58 = phi i8* [ %2, %52 ], [ %134, %132 ]
  %59 = phi i32 [ %9, %52 ], [ %135, %132 ]
  %60 = load <8 x i16>, <8 x i16>* %53, align 1
  %61 = ashr <8 x i16> %60, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %62 = bitcast <8 x i16> %61 to <4 x i32>
  br i1 %54, label %63, label %132

63:                                               ; preds = %56
  %64 = shufflevector <4 x i32> %62, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 undef, i32 undef>
  %65 = bitcast <4 x i32> %64 to <2 x i64>
  %66 = shufflevector <2 x i64> %65, <2 x i64> undef, <2 x i32> zeroinitializer
  %67 = shufflevector <4 x i32> %62, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 1>
  %68 = bitcast <4 x i32> %67 to <2 x i64>
  %69 = shufflevector <2 x i64> %68, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %70 = getelementptr inbounds i8, i8* %57, i64 -1
  %71 = bitcast <2 x i64> %69 to <8 x i16>
  %72 = bitcast <2 x i64> %66 to <8 x i16>
  br label %73

73:                                               ; preds = %73, %63
  %74 = phi i32 [ %10, %63 ], [ %130, %73 ]
  %75 = phi i8* [ %70, %63 ], [ %128, %73 ]
  %76 = phi i8* [ %58, %63 ], [ %129, %73 ]
  %77 = bitcast i8* %75 to <16 x i8>*
  %78 = load <16 x i8>, <16 x i8>* %77, align 1
  %79 = shufflevector <16 x i8> %78, <16 x i8> undef, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %80 = shufflevector <16 x i8> %78, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %81 = shufflevector <16 x i8> %78, <16 x i8> undef, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %82 = shufflevector <16 x i8> %78, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %83 = shufflevector <16 x i8> %80, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %84 = bitcast <16 x i8> %82 to <8 x i16>
  %85 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %84, <8 x i16> %71) #6
  %86 = bitcast <16 x i8> %83 to <8 x i16>
  %87 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %86, <8 x i16> %72) #6
  %88 = add <4 x i32> %87, %85
  %89 = shufflevector <16 x i8> %79, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %90 = shufflevector <16 x i8> %81, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %91 = bitcast <16 x i8> %89 to <8 x i16>
  %92 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %91, <8 x i16> %71) #6
  %93 = bitcast <16 x i8> %90 to <8 x i16>
  %94 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %93, <8 x i16> %72) #6
  %95 = add <4 x i32> %94, %92
  %96 = shufflevector <4 x i32> %88, <4 x i32> %95, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %97 = shufflevector <4 x i32> %88, <4 x i32> %95, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %98 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %96, <4 x i32> %97) #6
  %99 = getelementptr inbounds i8, i8* %75, i64 8
  %100 = bitcast i8* %99 to <16 x i8>*
  %101 = load <16 x i8>, <16 x i8>* %100, align 1
  %102 = shufflevector <16 x i8> %101, <16 x i8> undef, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %103 = shufflevector <16 x i8> %101, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %104 = shufflevector <16 x i8> %101, <16 x i8> undef, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %105 = shufflevector <16 x i8> %101, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %106 = shufflevector <16 x i8> %103, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %107 = bitcast <16 x i8> %105 to <8 x i16>
  %108 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %107, <8 x i16> %71) #6
  %109 = bitcast <16 x i8> %106 to <8 x i16>
  %110 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %109, <8 x i16> %72) #6
  %111 = add <4 x i32> %110, %108
  %112 = shufflevector <16 x i8> %102, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %113 = shufflevector <16 x i8> %104, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %114 = bitcast <16 x i8> %112 to <8 x i16>
  %115 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %114, <8 x i16> %71) #6
  %116 = bitcast <16 x i8> %113 to <8 x i16>
  %117 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %116, <8 x i16> %72) #6
  %118 = add <4 x i32> %117, %115
  %119 = shufflevector <4 x i32> %111, <4 x i32> %118, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %120 = shufflevector <4 x i32> %111, <4 x i32> %118, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %121 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %119, <4 x i32> %120) #6
  %122 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %98, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %123 = ashr <8 x i16> %122, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %124 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %121, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %125 = ashr <8 x i16> %124, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %126 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %123, <8 x i16> %125) #6
  %127 = bitcast i8* %76 to <16 x i8>*
  store <16 x i8> %126, <16 x i8>* %127, align 16
  %128 = getelementptr inbounds i8, i8* %75, i64 %1
  %129 = getelementptr inbounds i8, i8* %76, i64 %3
  %130 = add nsw i32 %74, -1
  %131 = icmp sgt i32 %130, 0
  br i1 %131, label %73, label %132

132:                                              ; preds = %73, %56
  %133 = getelementptr inbounds i8, i8* %57, i64 16
  %134 = getelementptr inbounds i8, i8* %58, i64 16
  %135 = add nsw i32 %59, -16
  %136 = icmp sgt i32 %135, 15
  br i1 %136, label %56, label %137

137:                                              ; preds = %132
  %138 = and i32 %9, 15
  br label %139

139:                                              ; preds = %137, %51
  %140 = phi i32 [ %9, %51 ], [ %138, %137 ]
  %141 = phi i8* [ %2, %51 ], [ %134, %137 ]
  %142 = phi i8* [ %0, %51 ], [ %133, %137 ]
  switch i32 %140, label %262 [
    i32 8, label %143
    i32 4, label %195
  ]

143:                                              ; preds = %139
  %144 = bitcast i16* %13 to <8 x i16>*
  %145 = load <8 x i16>, <8 x i16>* %144, align 1
  %146 = ashr <8 x i16> %145, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %147 = bitcast <8 x i16> %146 to <4 x i32>
  %148 = icmp sgt i32 %10, 0
  br i1 %148, label %149, label %262

149:                                              ; preds = %143
  %150 = shufflevector <4 x i32> %147, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 undef, i32 undef>
  %151 = bitcast <4 x i32> %150 to <2 x i64>
  %152 = shufflevector <2 x i64> %151, <2 x i64> undef, <2 x i32> zeroinitializer
  %153 = shufflevector <4 x i32> %147, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 1>
  %154 = bitcast <4 x i32> %153 to <2 x i64>
  %155 = shufflevector <2 x i64> %154, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %156 = getelementptr inbounds i8, i8* %142, i64 -1
  %157 = bitcast <2 x i64> %155 to <8 x i16>
  %158 = bitcast <2 x i64> %152 to <8 x i16>
  br label %159

159:                                              ; preds = %159, %149
  %160 = phi i32 [ %10, %149 ], [ %193, %159 ]
  %161 = phi i8* [ %156, %149 ], [ %191, %159 ]
  %162 = phi i8* [ %141, %149 ], [ %192, %159 ]
  %163 = bitcast i8* %161 to <16 x i8>*
  %164 = load <16 x i8>, <16 x i8>* %163, align 1
  %165 = shufflevector <16 x i8> %164, <16 x i8> undef, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %166 = shufflevector <16 x i8> %164, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %167 = shufflevector <16 x i8> %164, <16 x i8> undef, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %168 = shufflevector <16 x i8> %164, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %169 = shufflevector <16 x i8> %166, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %170 = bitcast <16 x i8> %168 to <8 x i16>
  %171 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %170, <8 x i16> %157) #6
  %172 = bitcast <16 x i8> %169 to <8 x i16>
  %173 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %172, <8 x i16> %158) #6
  %174 = add <4 x i32> %173, %171
  %175 = shufflevector <16 x i8> %165, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %176 = shufflevector <16 x i8> %167, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %177 = bitcast <16 x i8> %175 to <8 x i16>
  %178 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %177, <8 x i16> %157) #6
  %179 = bitcast <16 x i8> %176 to <8 x i16>
  %180 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %179, <8 x i16> %158) #6
  %181 = add <4 x i32> %180, %178
  %182 = shufflevector <4 x i32> %174, <4 x i32> %181, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %183 = shufflevector <4 x i32> %174, <4 x i32> %181, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %184 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %182, <4 x i32> %183) #6
  %185 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %184, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %186 = ashr <8 x i16> %185, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %187 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %186, <8 x i16> undef) #6
  %188 = bitcast <16 x i8> %187 to <2 x i64>
  %189 = extractelement <2 x i64> %188, i32 0
  %190 = bitcast i8* %162 to i64*
  store i64 %189, i64* %190, align 1
  %191 = getelementptr inbounds i8, i8* %161, i64 %1
  %192 = getelementptr inbounds i8, i8* %162, i64 %3
  %193 = add nsw i32 %160, -1
  %194 = icmp sgt i32 %193, 0
  br i1 %194, label %159, label %262

195:                                              ; preds = %139
  %196 = bitcast i16* %13 to <8 x i16>*
  %197 = load <8 x i16>, <8 x i16>* %196, align 1
  %198 = ashr <8 x i16> %197, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %199 = bitcast <8 x i16> %198 to <4 x i32>
  %200 = icmp sgt i32 %10, 0
  br i1 %200, label %201, label %262

201:                                              ; preds = %195
  %202 = shufflevector <4 x i32> %199, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 undef, i32 undef>
  %203 = bitcast <4 x i32> %202 to <2 x i64>
  %204 = shufflevector <2 x i64> %203, <2 x i64> undef, <2 x i32> zeroinitializer
  %205 = shufflevector <4 x i32> %199, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 1>
  %206 = bitcast <4 x i32> %205 to <2 x i64>
  %207 = shufflevector <2 x i64> %206, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %208 = getelementptr inbounds i8, i8* %142, i64 -1
  %209 = bitcast <2 x i64> %207 to <8 x i16>
  %210 = bitcast <2 x i64> %204 to <8 x i16>
  br label %211

211:                                              ; preds = %211, %201
  %212 = phi i32 [ %10, %201 ], [ %244, %211 ]
  %213 = phi i8* [ %208, %201 ], [ %242, %211 ]
  %214 = phi i8* [ %141, %201 ], [ %243, %211 ]
  %215 = bitcast i8* %213 to <16 x i8>*
  %216 = load <16 x i8>, <16 x i8>* %215, align 1
  %217 = shufflevector <16 x i8> %216, <16 x i8> undef, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %218 = shufflevector <16 x i8> %216, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %219 = shufflevector <16 x i8> %216, <16 x i8> undef, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %220 = shufflevector <16 x i8> %216, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %221 = shufflevector <16 x i8> %217, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %222 = shufflevector <16 x i8> %218, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %223 = shufflevector <16 x i8> %219, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %224 = bitcast <16 x i8> %220 to <4 x i32>
  %225 = bitcast <16 x i8> %221 to <4 x i32>
  %226 = shufflevector <4 x i32> %224, <4 x i32> %225, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %227 = bitcast <16 x i8> %222 to <4 x i32>
  %228 = bitcast <16 x i8> %223 to <4 x i32>
  %229 = shufflevector <4 x i32> %227, <4 x i32> %228, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %230 = bitcast <4 x i32> %226 to <8 x i16>
  %231 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %230, <8 x i16> %209) #6
  %232 = bitcast <4 x i32> %229 to <8 x i16>
  %233 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %232, <8 x i16> %210) #6
  %234 = add <4 x i32> %233, %231
  %235 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %234, <4 x i32> zeroinitializer) #6
  %236 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %235, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %237 = ashr <8 x i16> %236, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %238 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %237, <8 x i16> undef) #6
  %239 = bitcast <16 x i8> %238 to <4 x i32>
  %240 = extractelement <4 x i32> %239, i32 0
  %241 = bitcast i8* %214 to i32*
  store i32 %240, i32* %241, align 4
  %242 = getelementptr inbounds i8, i8* %213, i64 %1
  %243 = getelementptr inbounds i8, i8* %214, i64 %3
  %244 = add nsw i32 %212, -1
  %245 = icmp sgt i32 %244, 0
  br i1 %245, label %211, label %262

246:                                              ; preds = %55, %246
  %247 = phi i8* [ %250, %246 ], [ %0, %55 ]
  %248 = phi i8* [ %251, %246 ], [ %2, %55 ]
  %249 = phi i32 [ %252, %246 ], [ %9, %55 ]
  tail call void @vpx_filter_block1d16_h2_sse2(i8* %247, i64 %1, i8* %248, i64 %3, i32 %10, i16* %13) #6
  %250 = getelementptr inbounds i8, i8* %247, i64 16
  %251 = getelementptr inbounds i8, i8* %248, i64 16
  %252 = add nsw i32 %249, -16
  %253 = icmp sgt i32 %252, 15
  br i1 %253, label %246, label %254

254:                                              ; preds = %246
  %255 = and i32 %9, 15
  br label %256

256:                                              ; preds = %254, %55
  %257 = phi i32 [ %9, %55 ], [ %255, %254 ]
  %258 = phi i8* [ %2, %55 ], [ %251, %254 ]
  %259 = phi i8* [ %0, %55 ], [ %250, %254 ]
  switch i32 %257, label %262 [
    i32 8, label %260
    i32 4, label %261
  ]

260:                                              ; preds = %256
  tail call void @vpx_filter_block1d8_h2_sse2(i8* %259, i64 %1, i8* %258, i64 %3, i32 %10, i16* %13) #6
  br label %262

261:                                              ; preds = %256
  tail call void @vpx_filter_block1d4_h2_sse2(i8* %259, i64 %1, i8* %258, i64 %3, i32 %10, i16* %13) #6
  br label %262

262:                                              ; preds = %211, %159, %195, %143, %260, %261, %256, %139, %41, %42, %37
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @vpx_filter_block1d16_h8_sse2(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

declare void @vpx_filter_block1d8_h8_sse2(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

declare void @vpx_filter_block1d4_h8_sse2(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @vpx_filter_block1d16_h2_sse2(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

declare void @vpx_filter_block1d8_h2_sse2(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

declare void @vpx_filter_block1d4_h2_sse2(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_convolve8_vert_sse2(i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  %12 = sext i32 %7 to i64
  %13 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 0
  %14 = load i16, i16* %13, align 2
  %15 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 1
  %16 = load i16, i16* %15, align 2
  %17 = or i16 %16, %14
  %18 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 6
  %19 = load i16, i16* %18, align 2
  %20 = or i16 %17, %19
  %21 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 7
  %22 = load i16, i16* %21, align 2
  %23 = or i16 %20, %22
  %24 = icmp eq i16 %23, 0
  br i1 %24, label %50, label %25

25:                                               ; preds = %11
  %26 = icmp sgt i32 %9, 15
  br i1 %26, label %27, label %40

27:                                               ; preds = %25
  %28 = mul i64 %1, -3
  br label %29

29:                                               ; preds = %27, %29
  %30 = phi i8* [ %0, %27 ], [ %34, %29 ]
  %31 = phi i8* [ %2, %27 ], [ %35, %29 ]
  %32 = phi i32 [ %9, %27 ], [ %36, %29 ]
  %33 = getelementptr inbounds i8, i8* %30, i64 %28
  tail call void @vpx_filter_block1d16_v8_sse2(i8* %33, i64 %1, i8* %31, i64 %3, i32 %10, i16* %13) #6
  %34 = getelementptr inbounds i8, i8* %30, i64 16
  %35 = getelementptr inbounds i8, i8* %31, i64 16
  %36 = add nsw i32 %32, -16
  %37 = icmp sgt i32 %36, 15
  br i1 %37, label %29, label %38

38:                                               ; preds = %29
  %39 = and i32 %9, 15
  br label %40

40:                                               ; preds = %38, %25
  %41 = phi i32 [ %9, %25 ], [ %39, %38 ]
  %42 = phi i8* [ %2, %25 ], [ %35, %38 ]
  %43 = phi i8* [ %0, %25 ], [ %34, %38 ]
  switch i32 %41, label %408 [
    i32 8, label %44
    i32 4, label %47
  ]

44:                                               ; preds = %40
  %45 = mul i64 %1, -3
  %46 = getelementptr inbounds i8, i8* %43, i64 %45
  tail call void @vpx_filter_block1d8_v8_sse2(i8* %46, i64 %1, i8* %42, i64 %3, i32 %10, i16* %13) #6
  br label %408

47:                                               ; preds = %40
  %48 = mul i64 %1, -3
  %49 = getelementptr inbounds i8, i8* %43, i64 %48
  tail call void @vpx_filter_block1d4_v8_sse2(i8* %49, i64 %1, i8* %42, i64 %3, i32 %10, i16* %13) #6
  br label %408

50:                                               ; preds = %11
  %51 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 2
  %52 = load i16, i16* %51, align 2
  %53 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 5
  %54 = load i16, i16* %53, align 2
  %55 = or i16 %54, %52
  %56 = icmp eq i16 %55, 0
  %57 = icmp sgt i32 %9, 15
  br i1 %56, label %67, label %58

58:                                               ; preds = %50
  br i1 %57, label %59, label %206

59:                                               ; preds = %58
  %60 = sub i64 0, %1
  %61 = shl i64 %1, 1
  %62 = shl i64 %3, 1
  %63 = bitcast i16* %13 to <8 x i16>*
  %64 = icmp sgt i32 %10, 1
  %65 = mul nsw i64 %1, 3
  %66 = shl nsw i64 %1, 2
  br label %68

67:                                               ; preds = %50
  br i1 %57, label %392, label %402

68:                                               ; preds = %59, %199
  %69 = phi i8* [ %0, %59 ], [ %200, %199 ]
  %70 = phi i8* [ %2, %59 ], [ %201, %199 ]
  %71 = phi i32 [ %9, %59 ], [ %202, %199 ]
  %72 = getelementptr inbounds i8, i8* %69, i64 %60
  %73 = load <8 x i16>, <8 x i16>* %63, align 1
  %74 = ashr <8 x i16> %73, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %75 = bitcast <8 x i16> %74 to <4 x i32>
  %76 = bitcast i8* %72 to <16 x i8>*
  %77 = load <16 x i8>, <16 x i8>* %76, align 1
  %78 = bitcast i8* %69 to <16 x i8>*
  %79 = load <16 x i8>, <16 x i8>* %78, align 1
  %80 = shufflevector <16 x i8> %77, <16 x i8> %79, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %81 = shufflevector <16 x i8> %77, <16 x i8> %79, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %82 = getelementptr inbounds i8, i8* %72, i64 %61
  %83 = bitcast i8* %82 to <2 x i64>*
  %84 = load <2 x i64>, <2 x i64>* %83, align 1
  %85 = bitcast <2 x i64> %84 to <16 x i8>
  %86 = shufflevector <16 x i8> %79, <16 x i8> %85, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %87 = shufflevector <16 x i8> %79, <16 x i8> %85, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  br i1 %64, label %88, label %199

88:                                               ; preds = %68
  %89 = shufflevector <16 x i8> %87, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %90 = shufflevector <16 x i8> %87, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %91 = shufflevector <16 x i8> %86, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %92 = shufflevector <16 x i8> %86, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %93 = shufflevector <16 x i8> %81, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %94 = shufflevector <16 x i8> %81, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %95 = shufflevector <16 x i8> %80, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %96 = shufflevector <16 x i8> %80, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %97 = shufflevector <4 x i32> %75, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 undef, i32 undef>
  %98 = bitcast <4 x i32> %97 to <2 x i64>
  %99 = shufflevector <2 x i64> %98, <2 x i64> undef, <2 x i32> zeroinitializer
  %100 = shufflevector <4 x i32> %75, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 1>
  %101 = bitcast <4 x i32> %100 to <2 x i64>
  %102 = shufflevector <2 x i64> %101, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %103 = bitcast <2 x i64> %102 to <8 x i16>
  %104 = bitcast <2 x i64> %99 to <8 x i16>
  br label %105

105:                                              ; preds = %105, %88
  %106 = phi i32 [ %10, %88 ], [ %197, %105 ]
  %107 = phi i8* [ %72, %88 ], [ %195, %105 ]
  %108 = phi i8* [ %70, %88 ], [ %196, %105 ]
  %109 = phi <2 x i64> [ %84, %88 ], [ %126, %105 ]
  %110 = phi <16 x i8> [ %96, %88 ], [ %140, %105 ]
  %111 = phi <16 x i8> [ %89, %88 ], [ %174, %105 ]
  %112 = phi <16 x i8> [ %90, %88 ], [ %173, %105 ]
  %113 = phi <16 x i8> [ %91, %88 ], [ %148, %105 ]
  %114 = phi <16 x i8> [ %92, %88 ], [ %147, %105 ]
  %115 = phi <16 x i8> [ %93, %88 ], [ %167, %105 ]
  %116 = phi <16 x i8> [ %94, %88 ], [ %166, %105 ]
  %117 = phi <16 x i8> [ %95, %88 ], [ %141, %105 ]
  %118 = getelementptr inbounds i8, i8* %107, i64 %65
  %119 = bitcast i8* %118 to <16 x i8>*
  %120 = load <16 x i8>, <16 x i8>* %119, align 1
  %121 = bitcast <2 x i64> %109 to <16 x i8>
  %122 = shufflevector <16 x i8> %121, <16 x i8> %120, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %123 = shufflevector <16 x i8> %121, <16 x i8> %120, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %124 = getelementptr inbounds i8, i8* %107, i64 %66
  %125 = bitcast i8* %124 to <2 x i64>*
  %126 = load <2 x i64>, <2 x i64>* %125, align 1
  %127 = bitcast <2 x i64> %126 to <16 x i8>
  %128 = shufflevector <16 x i8> %120, <16 x i8> %127, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %129 = shufflevector <16 x i8> %120, <16 x i8> %127, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %130 = bitcast <16 x i8> %110 to <8 x i16>
  %131 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %130, <8 x i16> %103) #6
  %132 = bitcast <16 x i8> %117 to <8 x i16>
  %133 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %132, <8 x i16> %103) #6
  %134 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %131, <4 x i32> %133) #6
  %135 = bitcast <16 x i8> %114 to <8 x i16>
  %136 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %135, <8 x i16> %103) #6
  %137 = bitcast <16 x i8> %113 to <8 x i16>
  %138 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %137, <8 x i16> %103) #6
  %139 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %136, <4 x i32> %138) #6
  %140 = shufflevector <16 x i8> %122, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %141 = shufflevector <16 x i8> %122, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %142 = bitcast <16 x i8> %140 to <8 x i16>
  %143 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %142, <8 x i16> %104) #6
  %144 = bitcast <16 x i8> %141 to <8 x i16>
  %145 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %144, <8 x i16> %104) #6
  %146 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %143, <4 x i32> %145) #6
  %147 = shufflevector <16 x i8> %128, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %148 = shufflevector <16 x i8> %128, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %149 = bitcast <16 x i8> %147 to <8 x i16>
  %150 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %149, <8 x i16> %104) #6
  %151 = bitcast <16 x i8> %148 to <8 x i16>
  %152 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %151, <8 x i16> %104) #6
  %153 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %150, <4 x i32> %152) #6
  %154 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %134, <8 x i16> %146) #6
  %155 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %139, <8 x i16> %153) #6
  %156 = bitcast <16 x i8> %116 to <8 x i16>
  %157 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %156, <8 x i16> %103) #6
  %158 = bitcast <16 x i8> %115 to <8 x i16>
  %159 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %158, <8 x i16> %103) #6
  %160 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %157, <4 x i32> %159) #6
  %161 = bitcast <16 x i8> %112 to <8 x i16>
  %162 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %161, <8 x i16> %103) #6
  %163 = bitcast <16 x i8> %111 to <8 x i16>
  %164 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %163, <8 x i16> %103) #6
  %165 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %162, <4 x i32> %164) #6
  %166 = shufflevector <16 x i8> %123, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %167 = shufflevector <16 x i8> %123, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %168 = bitcast <16 x i8> %166 to <8 x i16>
  %169 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %168, <8 x i16> %104) #6
  %170 = bitcast <16 x i8> %167 to <8 x i16>
  %171 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %170, <8 x i16> %104) #6
  %172 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %169, <4 x i32> %171) #6
  %173 = shufflevector <16 x i8> %129, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %174 = shufflevector <16 x i8> %129, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %175 = bitcast <16 x i8> %173 to <8 x i16>
  %176 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %175, <8 x i16> %104) #6
  %177 = bitcast <16 x i8> %174 to <8 x i16>
  %178 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %177, <8 x i16> %104) #6
  %179 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %176, <4 x i32> %178) #6
  %180 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %160, <8 x i16> %172) #6
  %181 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %165, <8 x i16> %179) #6
  %182 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %154, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %183 = ashr <8 x i16> %182, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %184 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %155, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %185 = ashr <8 x i16> %184, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %186 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %180, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %187 = ashr <8 x i16> %186, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %188 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %181, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %189 = ashr <8 x i16> %188, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %190 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %183, <8 x i16> %187) #6
  %191 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %185, <8 x i16> %189) #6
  %192 = bitcast i8* %108 to <16 x i8>*
  store <16 x i8> %190, <16 x i8>* %192, align 16
  %193 = getelementptr inbounds i8, i8* %108, i64 %3
  %194 = bitcast i8* %193 to <16 x i8>*
  store <16 x i8> %191, <16 x i8>* %194, align 16
  %195 = getelementptr inbounds i8, i8* %107, i64 %61
  %196 = getelementptr inbounds i8, i8* %108, i64 %62
  %197 = add nsw i32 %106, -2
  %198 = icmp sgt i32 %197, 1
  br i1 %198, label %105, label %199

199:                                              ; preds = %105, %68
  %200 = getelementptr inbounds i8, i8* %69, i64 16
  %201 = getelementptr inbounds i8, i8* %70, i64 16
  %202 = add nsw i32 %71, -16
  %203 = icmp sgt i32 %202, 15
  br i1 %203, label %68, label %204

204:                                              ; preds = %199
  %205 = and i32 %9, 15
  br label %206

206:                                              ; preds = %204, %58
  %207 = phi i32 [ %9, %58 ], [ %205, %204 ]
  %208 = phi i8* [ %2, %58 ], [ %201, %204 ]
  %209 = phi i8* [ %0, %58 ], [ %200, %204 ]
  switch i32 %207, label %408 [
    i32 8, label %210
    i32 4, label %307
  ]

210:                                              ; preds = %206
  %211 = sub i64 0, %1
  %212 = getelementptr inbounds i8, i8* %209, i64 %211
  %213 = shl i64 %1, 1
  %214 = shl i64 %3, 1
  %215 = bitcast i16* %13 to <8 x i16>*
  %216 = load <8 x i16>, <8 x i16>* %215, align 1
  %217 = ashr <8 x i16> %216, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %218 = bitcast <8 x i16> %217 to <4 x i32>
  %219 = bitcast i8* %212 to <16 x i8>*
  %220 = load <16 x i8>, <16 x i8>* %219, align 1
  %221 = bitcast i8* %209 to <16 x i8>*
  %222 = load <16 x i8>, <16 x i8>* %221, align 1
  %223 = shufflevector <16 x i8> %220, <16 x i8> %222, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %224 = getelementptr inbounds i8, i8* %212, i64 %213
  %225 = bitcast i8* %224 to <2 x i64>*
  %226 = load <2 x i64>, <2 x i64>* %225, align 1
  %227 = bitcast <2 x i64> %226 to <16 x i8>
  %228 = shufflevector <16 x i8> %222, <16 x i8> %227, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %229 = icmp sgt i32 %10, 1
  br i1 %229, label %230, label %408

230:                                              ; preds = %210
  %231 = shufflevector <16 x i8> %228, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %232 = shufflevector <16 x i8> %228, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %233 = shufflevector <16 x i8> %223, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %234 = shufflevector <16 x i8> %223, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %235 = shufflevector <4 x i32> %218, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 undef, i32 undef>
  %236 = bitcast <4 x i32> %235 to <2 x i64>
  %237 = shufflevector <2 x i64> %236, <2 x i64> undef, <2 x i32> zeroinitializer
  %238 = shufflevector <4 x i32> %218, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 1>
  %239 = bitcast <4 x i32> %238 to <2 x i64>
  %240 = shufflevector <2 x i64> %239, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %241 = mul nsw i64 %1, 3
  %242 = shl nsw i64 %1, 2
  %243 = bitcast <2 x i64> %240 to <8 x i16>
  %244 = bitcast <2 x i64> %237 to <8 x i16>
  br label %245

245:                                              ; preds = %245, %230
  %246 = phi i32 [ %10, %230 ], [ %305, %245 ]
  %247 = phi i8* [ %212, %230 ], [ %303, %245 ]
  %248 = phi i8* [ %208, %230 ], [ %304, %245 ]
  %249 = phi <2 x i64> [ %226, %230 ], [ %261, %245 ]
  %250 = phi <16 x i8> [ %234, %230 ], [ %274, %245 ]
  %251 = phi <16 x i8> [ %231, %230 ], [ %282, %245 ]
  %252 = phi <16 x i8> [ %232, %230 ], [ %281, %245 ]
  %253 = phi <16 x i8> [ %233, %230 ], [ %275, %245 ]
  %254 = getelementptr inbounds i8, i8* %247, i64 %241
  %255 = bitcast i8* %254 to <16 x i8>*
  %256 = load <16 x i8>, <16 x i8>* %255, align 1
  %257 = bitcast <2 x i64> %249 to <16 x i8>
  %258 = shufflevector <16 x i8> %257, <16 x i8> %256, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %259 = getelementptr inbounds i8, i8* %247, i64 %242
  %260 = bitcast i8* %259 to <2 x i64>*
  %261 = load <2 x i64>, <2 x i64>* %260, align 1
  %262 = bitcast <2 x i64> %261 to <16 x i8>
  %263 = shufflevector <16 x i8> %256, <16 x i8> %262, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %264 = bitcast <16 x i8> %250 to <8 x i16>
  %265 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %264, <8 x i16> %243) #6
  %266 = bitcast <16 x i8> %253 to <8 x i16>
  %267 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %266, <8 x i16> %243) #6
  %268 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %265, <4 x i32> %267) #6
  %269 = bitcast <16 x i8> %252 to <8 x i16>
  %270 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %269, <8 x i16> %243) #6
  %271 = bitcast <16 x i8> %251 to <8 x i16>
  %272 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %271, <8 x i16> %243) #6
  %273 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %270, <4 x i32> %272) #6
  %274 = shufflevector <16 x i8> %258, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %275 = shufflevector <16 x i8> %258, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %276 = bitcast <16 x i8> %274 to <8 x i16>
  %277 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %276, <8 x i16> %244) #6
  %278 = bitcast <16 x i8> %275 to <8 x i16>
  %279 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %278, <8 x i16> %244) #6
  %280 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %277, <4 x i32> %279) #6
  %281 = shufflevector <16 x i8> %263, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %282 = shufflevector <16 x i8> %263, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %283 = bitcast <16 x i8> %281 to <8 x i16>
  %284 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %283, <8 x i16> %244) #6
  %285 = bitcast <16 x i8> %282 to <8 x i16>
  %286 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %285, <8 x i16> %244) #6
  %287 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %284, <4 x i32> %286) #6
  %288 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %268, <8 x i16> %280) #6
  %289 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %273, <8 x i16> %287) #6
  %290 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %288, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %291 = ashr <8 x i16> %290, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %292 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %289, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %293 = ashr <8 x i16> %292, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %294 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %291, <8 x i16> undef) #6
  %295 = bitcast <16 x i8> %294 to <2 x i64>
  %296 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %293, <8 x i16> undef) #6
  %297 = bitcast <16 x i8> %296 to <2 x i64>
  %298 = extractelement <2 x i64> %295, i32 0
  %299 = bitcast i8* %248 to i64*
  store i64 %298, i64* %299, align 1
  %300 = getelementptr inbounds i8, i8* %248, i64 %3
  %301 = extractelement <2 x i64> %297, i32 0
  %302 = bitcast i8* %300 to i64*
  store i64 %301, i64* %302, align 1
  %303 = getelementptr inbounds i8, i8* %247, i64 %213
  %304 = getelementptr inbounds i8, i8* %248, i64 %214
  %305 = add nsw i32 %246, -2
  %306 = icmp sgt i32 %305, 1
  br i1 %306, label %245, label %408

307:                                              ; preds = %206
  %308 = sub i64 0, %1
  %309 = getelementptr inbounds i8, i8* %209, i64 %308
  %310 = shl i64 %1, 1
  %311 = shl i64 %3, 1
  %312 = bitcast i16* %13 to <8 x i16>*
  %313 = load <8 x i16>, <8 x i16>* %312, align 1
  %314 = ashr <8 x i16> %313, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %315 = bitcast <8 x i16> %314 to <4 x i32>
  %316 = bitcast i8* %209 to <16 x i8>*
  %317 = load <16 x i8>, <16 x i8>* %316, align 1
  %318 = getelementptr inbounds i8, i8* %309, i64 %310
  %319 = bitcast i8* %318 to <2 x i64>*
  %320 = load <2 x i64>, <2 x i64>* %319, align 1
  %321 = icmp sgt i32 %10, 1
  br i1 %321, label %322, label %408

322:                                              ; preds = %307
  %323 = bitcast <2 x i64> %320 to <16 x i8>
  %324 = shufflevector <16 x i8> %317, <16 x i8> %323, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %325 = shufflevector <16 x i8> %324, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %326 = bitcast i8* %309 to <16 x i8>*
  %327 = load <16 x i8>, <16 x i8>* %326, align 1
  %328 = shufflevector <16 x i8> %327, <16 x i8> %317, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %329 = shufflevector <16 x i8> %328, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %330 = shufflevector <4 x i32> %315, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 undef, i32 undef>
  %331 = bitcast <4 x i32> %330 to <2 x i64>
  %332 = shufflevector <2 x i64> %331, <2 x i64> undef, <2 x i32> zeroinitializer
  %333 = shufflevector <4 x i32> %315, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 1>
  %334 = bitcast <4 x i32> %333 to <2 x i64>
  %335 = shufflevector <2 x i64> %334, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %336 = mul nsw i64 %1, 3
  %337 = shl nsw i64 %1, 2
  %338 = bitcast <2 x i64> %335 to <8 x i16>
  %339 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> zeroinitializer, <8 x i16> %338) #6
  %340 = bitcast <2 x i64> %332 to <8 x i16>
  %341 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> zeroinitializer, <8 x i16> %340) #6
  br label %342

342:                                              ; preds = %342, %322
  %343 = phi i32 [ %10, %322 ], [ %390, %342 ]
  %344 = phi i8* [ %309, %322 ], [ %388, %342 ]
  %345 = phi i8* [ %208, %322 ], [ %389, %342 ]
  %346 = phi <2 x i64> [ %320, %322 ], [ %356, %342 ]
  %347 = phi <16 x i8> [ %329, %322 ], [ %365, %342 ]
  %348 = phi <16 x i8> [ %325, %322 ], [ %369, %342 ]
  %349 = getelementptr inbounds i8, i8* %344, i64 %336
  %350 = bitcast i8* %349 to <16 x i8>*
  %351 = load <16 x i8>, <16 x i8>* %350, align 1
  %352 = bitcast <2 x i64> %346 to <16 x i8>
  %353 = shufflevector <16 x i8> %352, <16 x i8> %351, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %354 = getelementptr inbounds i8, i8* %344, i64 %337
  %355 = bitcast i8* %354 to <2 x i64>*
  %356 = load <2 x i64>, <2 x i64>* %355, align 1
  %357 = bitcast <2 x i64> %356 to <16 x i8>
  %358 = shufflevector <16 x i8> %351, <16 x i8> %357, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %359 = bitcast <16 x i8> %347 to <8 x i16>
  %360 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %359, <8 x i16> %338) #6
  %361 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %360, <4 x i32> %339) #6
  %362 = bitcast <16 x i8> %348 to <8 x i16>
  %363 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %362, <8 x i16> %338) #6
  %364 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %363, <4 x i32> %339) #6
  %365 = shufflevector <16 x i8> %353, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %366 = bitcast <16 x i8> %365 to <8 x i16>
  %367 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %366, <8 x i16> %340) #6
  %368 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %367, <4 x i32> %341) #6
  %369 = shufflevector <16 x i8> %358, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %370 = bitcast <16 x i8> %369 to <8 x i16>
  %371 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %370, <8 x i16> %340) #6
  %372 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %371, <4 x i32> %341) #6
  %373 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %361, <8 x i16> %368) #6
  %374 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %364, <8 x i16> %372) #6
  %375 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %373, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %376 = ashr <8 x i16> %375, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %377 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %374, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %378 = ashr <8 x i16> %377, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %379 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %376, <8 x i16> undef) #6
  %380 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %378, <8 x i16> undef) #6
  %381 = bitcast <16 x i8> %379 to <4 x i32>
  %382 = extractelement <4 x i32> %381, i32 0
  %383 = bitcast i8* %345 to i32*
  store i32 %382, i32* %383, align 4
  %384 = bitcast <16 x i8> %380 to <4 x i32>
  %385 = extractelement <4 x i32> %384, i32 0
  %386 = getelementptr inbounds i8, i8* %345, i64 %3
  %387 = bitcast i8* %386 to i32*
  store i32 %385, i32* %387, align 4
  %388 = getelementptr inbounds i8, i8* %344, i64 %310
  %389 = getelementptr inbounds i8, i8* %345, i64 %311
  %390 = add nsw i32 %343, -2
  %391 = icmp sgt i32 %390, 1
  br i1 %391, label %342, label %408

392:                                              ; preds = %67, %392
  %393 = phi i8* [ %396, %392 ], [ %0, %67 ]
  %394 = phi i8* [ %397, %392 ], [ %2, %67 ]
  %395 = phi i32 [ %398, %392 ], [ %9, %67 ]
  tail call void @vpx_filter_block1d16_v2_sse2(i8* %393, i64 %1, i8* %394, i64 %3, i32 %10, i16* %13) #6
  %396 = getelementptr inbounds i8, i8* %393, i64 16
  %397 = getelementptr inbounds i8, i8* %394, i64 16
  %398 = add nsw i32 %395, -16
  %399 = icmp sgt i32 %398, 15
  br i1 %399, label %392, label %400

400:                                              ; preds = %392
  %401 = and i32 %9, 15
  br label %402

402:                                              ; preds = %400, %67
  %403 = phi i32 [ %9, %67 ], [ %401, %400 ]
  %404 = phi i8* [ %2, %67 ], [ %397, %400 ]
  %405 = phi i8* [ %0, %67 ], [ %396, %400 ]
  switch i32 %403, label %408 [
    i32 8, label %406
    i32 4, label %407
  ]

406:                                              ; preds = %402
  tail call void @vpx_filter_block1d8_v2_sse2(i8* %405, i64 %1, i8* %404, i64 %3, i32 %10, i16* %13) #6
  br label %408

407:                                              ; preds = %402
  tail call void @vpx_filter_block1d4_v2_sse2(i8* %405, i64 %1, i8* %404, i64 %3, i32 %10, i16* %13) #6
  br label %408

408:                                              ; preds = %342, %245, %307, %210, %406, %407, %402, %206, %44, %47, %40
  ret void
}

declare void @vpx_filter_block1d16_v8_sse2(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

declare void @vpx_filter_block1d8_v8_sse2(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

declare void @vpx_filter_block1d4_v8_sse2(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

declare void @vpx_filter_block1d16_v2_sse2(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

declare void @vpx_filter_block1d8_v2_sse2(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

declare void @vpx_filter_block1d4_v2_sse2(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_convolve8_avg_horiz_sse2(i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32) local_unnamed_addr #3 {
  %12 = sext i32 %5 to i64
  %13 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 0
  %14 = load i16, i16* %13, align 2
  %15 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 1
  %16 = load i16, i16* %15, align 2
  %17 = or i16 %16, %14
  %18 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 6
  %19 = load i16, i16* %18, align 2
  %20 = or i16 %17, %19
  %21 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 7
  %22 = load i16, i16* %21, align 2
  %23 = or i16 %20, %22
  %24 = icmp eq i16 %23, 0
  br i1 %24, label %43, label %25

25:                                               ; preds = %11
  %26 = icmp sgt i32 %9, 15
  br i1 %26, label %27, label %37

27:                                               ; preds = %25, %27
  %28 = phi i8* [ %31, %27 ], [ %0, %25 ]
  %29 = phi i8* [ %32, %27 ], [ %2, %25 ]
  %30 = phi i32 [ %33, %27 ], [ %9, %25 ]
  tail call void @vpx_filter_block1d16_h8_avg_sse2(i8* %28, i64 %1, i8* %29, i64 %3, i32 %10, i16* %13) #6
  %31 = getelementptr inbounds i8, i8* %28, i64 16
  %32 = getelementptr inbounds i8, i8* %29, i64 16
  %33 = add nsw i32 %30, -16
  %34 = icmp sgt i32 %33, 15
  br i1 %34, label %27, label %35

35:                                               ; preds = %27
  %36 = and i32 %9, 15
  br label %37

37:                                               ; preds = %35, %25
  %38 = phi i32 [ %9, %25 ], [ %36, %35 ]
  %39 = phi i8* [ %2, %25 ], [ %32, %35 ]
  %40 = phi i8* [ %0, %25 ], [ %31, %35 ]
  switch i32 %38, label %85 [
    i32 8, label %41
    i32 4, label %42
  ]

41:                                               ; preds = %37
  tail call void @vpx_filter_block1d8_h8_avg_sse2(i8* %40, i64 %1, i8* %39, i64 %3, i32 %10, i16* %13) #6
  br label %85

42:                                               ; preds = %37
  tail call void @vpx_filter_block1d4_h8_avg_sse2(i8* %40, i64 %1, i8* %39, i64 %3, i32 %10, i16* %13) #6
  br label %85

43:                                               ; preds = %11
  %44 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 2
  %45 = load i16, i16* %44, align 2
  %46 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 5
  %47 = load i16, i16* %46, align 2
  %48 = or i16 %47, %45
  %49 = icmp eq i16 %48, 0
  %50 = icmp sgt i32 %9, 15
  br i1 %49, label %52, label %51

51:                                               ; preds = %43
  br i1 %50, label %53, label %63

52:                                               ; preds = %43
  br i1 %50, label %69, label %79

53:                                               ; preds = %51, %53
  %54 = phi i8* [ %57, %53 ], [ %0, %51 ]
  %55 = phi i8* [ %58, %53 ], [ %2, %51 ]
  %56 = phi i32 [ %59, %53 ], [ %9, %51 ]
  tail call void @vpx_filter_block1d16_h8_avg_sse2(i8* %54, i64 %1, i8* %55, i64 %3, i32 %10, i16* %13) #6
  %57 = getelementptr inbounds i8, i8* %54, i64 16
  %58 = getelementptr inbounds i8, i8* %55, i64 16
  %59 = add nsw i32 %56, -16
  %60 = icmp sgt i32 %59, 15
  br i1 %60, label %53, label %61

61:                                               ; preds = %53
  %62 = and i32 %9, 15
  br label %63

63:                                               ; preds = %61, %51
  %64 = phi i32 [ %9, %51 ], [ %62, %61 ]
  %65 = phi i8* [ %2, %51 ], [ %58, %61 ]
  %66 = phi i8* [ %0, %51 ], [ %57, %61 ]
  switch i32 %64, label %85 [
    i32 8, label %67
    i32 4, label %68
  ]

67:                                               ; preds = %63
  tail call void @vpx_filter_block1d8_h8_avg_sse2(i8* %66, i64 %1, i8* %65, i64 %3, i32 %10, i16* %13) #6
  br label %85

68:                                               ; preds = %63
  tail call void @vpx_filter_block1d4_h8_avg_sse2(i8* %66, i64 %1, i8* %65, i64 %3, i32 %10, i16* %13) #6
  br label %85

69:                                               ; preds = %52, %69
  %70 = phi i8* [ %73, %69 ], [ %0, %52 ]
  %71 = phi i8* [ %74, %69 ], [ %2, %52 ]
  %72 = phi i32 [ %75, %69 ], [ %9, %52 ]
  tail call void @vpx_filter_block1d16_h2_avg_sse2(i8* %70, i64 %1, i8* %71, i64 %3, i32 %10, i16* %13) #6
  %73 = getelementptr inbounds i8, i8* %70, i64 16
  %74 = getelementptr inbounds i8, i8* %71, i64 16
  %75 = add nsw i32 %72, -16
  %76 = icmp sgt i32 %75, 15
  br i1 %76, label %69, label %77

77:                                               ; preds = %69
  %78 = and i32 %9, 15
  br label %79

79:                                               ; preds = %77, %52
  %80 = phi i32 [ %9, %52 ], [ %78, %77 ]
  %81 = phi i8* [ %2, %52 ], [ %74, %77 ]
  %82 = phi i8* [ %0, %52 ], [ %73, %77 ]
  switch i32 %80, label %85 [
    i32 8, label %83
    i32 4, label %84
  ]

83:                                               ; preds = %79
  tail call void @vpx_filter_block1d8_h2_avg_sse2(i8* %82, i64 %1, i8* %81, i64 %3, i32 %10, i16* %13) #6
  br label %85

84:                                               ; preds = %79
  tail call void @vpx_filter_block1d4_h2_avg_sse2(i8* %82, i64 %1, i8* %81, i64 %3, i32 %10, i16* %13) #6
  br label %85

85:                                               ; preds = %83, %84, %79, %67, %68, %63, %41, %42, %37
  ret void
}

declare void @vpx_filter_block1d16_h8_avg_sse2(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

declare void @vpx_filter_block1d8_h8_avg_sse2(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

declare void @vpx_filter_block1d4_h8_avg_sse2(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

declare void @vpx_filter_block1d16_h2_avg_sse2(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

declare void @vpx_filter_block1d8_h2_avg_sse2(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

declare void @vpx_filter_block1d4_h2_avg_sse2(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_convolve8_avg_vert_sse2(i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32) local_unnamed_addr #3 {
  %12 = sext i32 %7 to i64
  %13 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 0
  %14 = load i16, i16* %13, align 2
  %15 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 1
  %16 = load i16, i16* %15, align 2
  %17 = or i16 %16, %14
  %18 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 6
  %19 = load i16, i16* %18, align 2
  %20 = or i16 %17, %19
  %21 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 7
  %22 = load i16, i16* %21, align 2
  %23 = or i16 %20, %22
  %24 = icmp eq i16 %23, 0
  br i1 %24, label %50, label %25

25:                                               ; preds = %11
  %26 = icmp sgt i32 %9, 15
  br i1 %26, label %27, label %40

27:                                               ; preds = %25
  %28 = mul i64 %1, -3
  br label %29

29:                                               ; preds = %27, %29
  %30 = phi i8* [ %0, %27 ], [ %34, %29 ]
  %31 = phi i8* [ %2, %27 ], [ %35, %29 ]
  %32 = phi i32 [ %9, %27 ], [ %36, %29 ]
  %33 = getelementptr inbounds i8, i8* %30, i64 %28
  tail call void @vpx_filter_block1d16_v8_avg_sse2(i8* %33, i64 %1, i8* %31, i64 %3, i32 %10, i16* %13) #6
  %34 = getelementptr inbounds i8, i8* %30, i64 16
  %35 = getelementptr inbounds i8, i8* %31, i64 16
  %36 = add nsw i32 %32, -16
  %37 = icmp sgt i32 %36, 15
  br i1 %37, label %29, label %38

38:                                               ; preds = %29
  %39 = and i32 %9, 15
  br label %40

40:                                               ; preds = %38, %25
  %41 = phi i32 [ %9, %25 ], [ %39, %38 ]
  %42 = phi i8* [ %2, %25 ], [ %35, %38 ]
  %43 = phi i8* [ %0, %25 ], [ %34, %38 ]
  switch i32 %41, label %99 [
    i32 8, label %44
    i32 4, label %47
  ]

44:                                               ; preds = %40
  %45 = mul i64 %1, -3
  %46 = getelementptr inbounds i8, i8* %43, i64 %45
  tail call void @vpx_filter_block1d8_v8_avg_sse2(i8* %46, i64 %1, i8* %42, i64 %3, i32 %10, i16* %13) #6
  br label %99

47:                                               ; preds = %40
  %48 = mul i64 %1, -3
  %49 = getelementptr inbounds i8, i8* %43, i64 %48
  tail call void @vpx_filter_block1d4_v8_avg_sse2(i8* %49, i64 %1, i8* %42, i64 %3, i32 %10, i16* %13) #6
  br label %99

50:                                               ; preds = %11
  %51 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 2
  %52 = load i16, i16* %51, align 2
  %53 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 5
  %54 = load i16, i16* %53, align 2
  %55 = or i16 %54, %52
  %56 = icmp eq i16 %55, 0
  %57 = icmp sgt i32 %9, 15
  br i1 %56, label %61, label %58

58:                                               ; preds = %50
  br i1 %57, label %59, label %73

59:                                               ; preds = %58
  %60 = mul i64 %1, -3
  br label %62

61:                                               ; preds = %50
  br i1 %57, label %83, label %93

62:                                               ; preds = %59, %62
  %63 = phi i8* [ %0, %59 ], [ %67, %62 ]
  %64 = phi i8* [ %2, %59 ], [ %68, %62 ]
  %65 = phi i32 [ %9, %59 ], [ %69, %62 ]
  %66 = getelementptr inbounds i8, i8* %63, i64 %60
  tail call void @vpx_filter_block1d16_v8_avg_sse2(i8* %66, i64 %1, i8* %64, i64 %3, i32 %10, i16* %13) #6
  %67 = getelementptr inbounds i8, i8* %63, i64 16
  %68 = getelementptr inbounds i8, i8* %64, i64 16
  %69 = add nsw i32 %65, -16
  %70 = icmp sgt i32 %69, 15
  br i1 %70, label %62, label %71

71:                                               ; preds = %62
  %72 = and i32 %9, 15
  br label %73

73:                                               ; preds = %71, %58
  %74 = phi i32 [ %9, %58 ], [ %72, %71 ]
  %75 = phi i8* [ %2, %58 ], [ %68, %71 ]
  %76 = phi i8* [ %0, %58 ], [ %67, %71 ]
  switch i32 %74, label %99 [
    i32 8, label %77
    i32 4, label %80
  ]

77:                                               ; preds = %73
  %78 = mul i64 %1, -3
  %79 = getelementptr inbounds i8, i8* %76, i64 %78
  tail call void @vpx_filter_block1d8_v8_avg_sse2(i8* %79, i64 %1, i8* %75, i64 %3, i32 %10, i16* %13) #6
  br label %99

80:                                               ; preds = %73
  %81 = mul i64 %1, -3
  %82 = getelementptr inbounds i8, i8* %76, i64 %81
  tail call void @vpx_filter_block1d4_v8_avg_sse2(i8* %82, i64 %1, i8* %75, i64 %3, i32 %10, i16* %13) #6
  br label %99

83:                                               ; preds = %61, %83
  %84 = phi i8* [ %87, %83 ], [ %0, %61 ]
  %85 = phi i8* [ %88, %83 ], [ %2, %61 ]
  %86 = phi i32 [ %89, %83 ], [ %9, %61 ]
  tail call void @vpx_filter_block1d16_v2_avg_sse2(i8* %84, i64 %1, i8* %85, i64 %3, i32 %10, i16* %13) #6
  %87 = getelementptr inbounds i8, i8* %84, i64 16
  %88 = getelementptr inbounds i8, i8* %85, i64 16
  %89 = add nsw i32 %86, -16
  %90 = icmp sgt i32 %89, 15
  br i1 %90, label %83, label %91

91:                                               ; preds = %83
  %92 = and i32 %9, 15
  br label %93

93:                                               ; preds = %91, %61
  %94 = phi i32 [ %9, %61 ], [ %92, %91 ]
  %95 = phi i8* [ %2, %61 ], [ %88, %91 ]
  %96 = phi i8* [ %0, %61 ], [ %87, %91 ]
  switch i32 %94, label %99 [
    i32 8, label %97
    i32 4, label %98
  ]

97:                                               ; preds = %93
  tail call void @vpx_filter_block1d8_v2_avg_sse2(i8* %96, i64 %1, i8* %95, i64 %3, i32 %10, i16* %13) #6
  br label %99

98:                                               ; preds = %93
  tail call void @vpx_filter_block1d4_v2_avg_sse2(i8* %96, i64 %1, i8* %95, i64 %3, i32 %10, i16* %13) #6
  br label %99

99:                                               ; preds = %97, %98, %93, %77, %80, %73, %44, %47, %40
  ret void
}

declare void @vpx_filter_block1d16_v8_avg_sse2(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

declare void @vpx_filter_block1d8_v8_avg_sse2(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

declare void @vpx_filter_block1d4_v8_avg_sse2(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

declare void @vpx_filter_block1d16_v2_avg_sse2(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

declare void @vpx_filter_block1d8_v2_avg_sse2(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

declare void @vpx_filter_block1d4_v2_avg_sse2(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_convolve8_sse2(i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32) local_unnamed_addr #3 {
  %12 = alloca [4544 x i8], align 16
  %13 = alloca [4544 x i8], align 16
  %14 = alloca [4160 x i8], align 16
  %15 = sext i32 %5 to i64
  %16 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %15, i64 0
  %17 = load i16, i16* %16, align 2
  %18 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %15, i64 1
  %19 = load i16, i16* %18, align 2
  %20 = or i16 %19, %17
  %21 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %15, i64 6
  %22 = load i16, i16* %21, align 2
  %23 = or i16 %20, %22
  %24 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %15, i64 7
  %25 = load i16, i16* %24, align 2
  %26 = or i16 %23, %25
  %27 = icmp eq i16 %26, 0
  br i1 %27, label %34, label %28

28:                                               ; preds = %11
  %29 = getelementptr inbounds [4544 x i8], [4544 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4544, i8* nonnull %29) #6
  %30 = mul i64 %1, -3
  %31 = getelementptr inbounds i8, i8* %0, i64 %30
  %32 = add nsw i32 %10, 7
  call void @vpx_convolve8_horiz_sse2(i8* %31, i64 %1, i8* nonnull %29, i64 64, [8 x i16]* %4, i32 %5, i32 undef, i32 undef, i32 undef, i32 %9, i32 %32)
  %33 = getelementptr inbounds [4544 x i8], [4544 x i8]* %12, i64 0, i64 192
  call void @vpx_convolve8_vert_sse2(i8* %33, i64 64, i8* %2, i64 %3, [8 x i16]* %4, i32 undef, i32 undef, i32 %7, i32 undef, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4544, i8* nonnull %29) #6
  br label %50

34:                                               ; preds = %11
  %35 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %15, i64 2
  %36 = load i16, i16* %35, align 2
  %37 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %15, i64 5
  %38 = load i16, i16* %37, align 2
  %39 = or i16 %38, %36
  %40 = icmp eq i16 %39, 0
  br i1 %40, label %47, label %41

41:                                               ; preds = %34
  %42 = getelementptr inbounds [4544 x i8], [4544 x i8]* %13, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4544, i8* nonnull %42) #6
  %43 = sub i64 0, %1
  %44 = getelementptr inbounds i8, i8* %0, i64 %43
  %45 = add nsw i32 %10, 3
  call void @vpx_convolve8_horiz_sse2(i8* %44, i64 %1, i8* nonnull %42, i64 64, [8 x i16]* %4, i32 %5, i32 undef, i32 undef, i32 undef, i32 %9, i32 %45)
  %46 = getelementptr inbounds [4544 x i8], [4544 x i8]* %13, i64 0, i64 64
  call void @vpx_convolve8_vert_sse2(i8* %46, i64 64, i8* %2, i64 %3, [8 x i16]* %4, i32 undef, i32 undef, i32 %7, i32 undef, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4544, i8* nonnull %42) #6
  br label %50

47:                                               ; preds = %34
  %48 = getelementptr inbounds [4160 x i8], [4160 x i8]* %14, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4160, i8* nonnull %48) #6
  %49 = add nsw i32 %10, 1
  call void @vpx_convolve8_horiz_sse2(i8* %0, i64 %1, i8* nonnull %48, i64 64, [8 x i16]* %4, i32 %5, i32 undef, i32 undef, i32 undef, i32 %9, i32 %49)
  call void @vpx_convolve8_vert_sse2(i8* nonnull %48, i64 64, i8* %2, i64 %3, [8 x i16]* %4, i32 undef, i32 undef, i32 %7, i32 undef, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4160, i8* nonnull %48) #6
  br label %50

50:                                               ; preds = %41, %47, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_convolve8_avg_sse2(i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32) local_unnamed_addr #3 {
  %12 = alloca [4544 x i8], align 16
  %13 = alloca [4544 x i8], align 16
  %14 = alloca [4160 x i8], align 16
  %15 = sext i32 %5 to i64
  %16 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %15, i64 0
  %17 = load i16, i16* %16, align 2
  %18 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %15, i64 1
  %19 = load i16, i16* %18, align 2
  %20 = or i16 %19, %17
  %21 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %15, i64 6
  %22 = load i16, i16* %21, align 2
  %23 = or i16 %20, %22
  %24 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %15, i64 7
  %25 = load i16, i16* %24, align 2
  %26 = or i16 %23, %25
  %27 = icmp eq i16 %26, 0
  br i1 %27, label %34, label %28

28:                                               ; preds = %11
  %29 = getelementptr inbounds [4544 x i8], [4544 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4544, i8* nonnull %29) #6
  %30 = mul i64 %1, -3
  %31 = getelementptr inbounds i8, i8* %0, i64 %30
  %32 = add nsw i32 %10, 7
  call void @vpx_convolve8_horiz_sse2(i8* %31, i64 %1, i8* nonnull %29, i64 64, [8 x i16]* %4, i32 %5, i32 undef, i32 undef, i32 undef, i32 %9, i32 %32)
  %33 = getelementptr inbounds [4544 x i8], [4544 x i8]* %12, i64 0, i64 192
  call void @vpx_convolve8_avg_vert_sse2(i8* %33, i64 64, i8* %2, i64 %3, [8 x i16]* %4, i32 undef, i32 undef, i32 %7, i32 undef, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4544, i8* nonnull %29) #6
  br label %50

34:                                               ; preds = %11
  %35 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %15, i64 2
  %36 = load i16, i16* %35, align 2
  %37 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %15, i64 5
  %38 = load i16, i16* %37, align 2
  %39 = or i16 %38, %36
  %40 = icmp eq i16 %39, 0
  br i1 %40, label %47, label %41

41:                                               ; preds = %34
  %42 = getelementptr inbounds [4544 x i8], [4544 x i8]* %13, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4544, i8* nonnull %42) #6
  %43 = mul i64 %1, -3
  %44 = getelementptr inbounds i8, i8* %0, i64 %43
  %45 = add nsw i32 %10, 7
  call void @vpx_convolve8_horiz_sse2(i8* %44, i64 %1, i8* nonnull %42, i64 64, [8 x i16]* %4, i32 %5, i32 undef, i32 undef, i32 undef, i32 %9, i32 %45)
  %46 = getelementptr inbounds [4544 x i8], [4544 x i8]* %13, i64 0, i64 192
  call void @vpx_convolve8_avg_vert_sse2(i8* %46, i64 64, i8* %2, i64 %3, [8 x i16]* %4, i32 undef, i32 undef, i32 %7, i32 undef, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4544, i8* nonnull %42) #6
  br label %50

47:                                               ; preds = %34
  %48 = getelementptr inbounds [4160 x i8], [4160 x i8]* %14, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4160, i8* nonnull %48) #6
  %49 = add nsw i32 %10, 1
  call void @vpx_convolve8_horiz_sse2(i8* %0, i64 %1, i8* nonnull %48, i64 64, [8 x i16]* %4, i32 %5, i32 undef, i32 undef, i32 undef, i32 %9, i32 %49)
  call void @vpx_convolve8_avg_vert_sse2(i8* nonnull %48, i64 64, i8* %2, i64 %3, [8 x i16]* %4, i32 undef, i32 undef, i32 %7, i32 undef, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4160, i8* nonnull %48) #6
  br label %50

50:                                               ; preds = %41, %47, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_convolve8_horiz_sse2(i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  %13 = sext i32 %5 to i64
  %14 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 0
  %15 = icmp eq i32 %6, 16
  br i1 %15, label %16, label %421

16:                                               ; preds = %12
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 3
  %18 = load i16, i16* %17, align 2
  %19 = icmp eq i16 %18, 128
  br i1 %19, label %421, label %20

20:                                               ; preds = %16
  %21 = load i16, i16* %14, align 2
  %22 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 1
  %23 = load i16, i16* %22, align 2
  %24 = or i16 %23, %21
  %25 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 6
  %26 = load i16, i16* %25, align 2
  %27 = or i16 %24, %26
  %28 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 7
  %29 = load i16, i16* %28, align 2
  %30 = or i16 %27, %29
  %31 = icmp eq i16 %30, 0
  br i1 %31, label %72, label %32

32:                                               ; preds = %20
  %33 = icmp sgt i32 %9, 15
  br i1 %33, label %41, label %36

34:                                               ; preds = %41
  %35 = and i32 %9, 15
  br label %36

36:                                               ; preds = %34, %32
  %37 = phi i32 [ %9, %32 ], [ %35, %34 ]
  %38 = phi i16* [ %2, %32 ], [ %46, %34 ]
  %39 = phi i16* [ %0, %32 ], [ %45, %34 ]
  %40 = icmp sgt i32 %37, 7
  br i1 %40, label %56, label %51

41:                                               ; preds = %32, %41
  %42 = phi i16* [ %45, %41 ], [ %0, %32 ]
  %43 = phi i16* [ %46, %41 ], [ %2, %32 ]
  %44 = phi i32 [ %47, %41 ], [ %9, %32 ]
  tail call void @vpx_highbd_filter_block1d16_h8_sse2(i16* %42, i64 %1, i16* %43, i64 %3, i32 %10, i16* %14, i32 %11) #6
  %45 = getelementptr inbounds i16, i16* %42, i64 16
  %46 = getelementptr inbounds i16, i16* %43, i64 16
  %47 = add nsw i32 %44, -16
  %48 = icmp sgt i32 %47, 15
  br i1 %48, label %41, label %34

49:                                               ; preds = %56
  %50 = and i32 %37, 7
  br label %51

51:                                               ; preds = %49, %36
  %52 = phi i32 [ %37, %36 ], [ %50, %49 ]
  %53 = phi i16* [ %38, %36 ], [ %61, %49 ]
  %54 = phi i16* [ %39, %36 ], [ %60, %49 ]
  %55 = icmp sgt i32 %52, 3
  br i1 %55, label %64, label %421

56:                                               ; preds = %36, %56
  %57 = phi i16* [ %60, %56 ], [ %39, %36 ]
  %58 = phi i16* [ %61, %56 ], [ %38, %36 ]
  %59 = phi i32 [ %62, %56 ], [ %37, %36 ]
  tail call void @vpx_highbd_filter_block1d8_h8_sse2(i16* %57, i64 %1, i16* %58, i64 %3, i32 %10, i16* %14, i32 %11) #6
  %60 = getelementptr inbounds i16, i16* %57, i64 8
  %61 = getelementptr inbounds i16, i16* %58, i64 8
  %62 = add nsw i32 %59, -8
  %63 = icmp sgt i32 %62, 7
  br i1 %63, label %56, label %49

64:                                               ; preds = %51, %64
  %65 = phi i16* [ %68, %64 ], [ %54, %51 ]
  %66 = phi i16* [ %69, %64 ], [ %53, %51 ]
  %67 = phi i32 [ %70, %64 ], [ %52, %51 ]
  tail call void @vpx_highbd_filter_block1d4_h8_sse2(i16* %65, i64 %1, i16* %66, i64 %3, i32 %10, i16* %14, i32 %11) #6
  %68 = getelementptr inbounds i16, i16* %65, i64 4
  %69 = getelementptr inbounds i16, i16* %66, i64 4
  %70 = add nsw i32 %67, -4
  %71 = icmp sgt i32 %70, 3
  br i1 %71, label %64, label %419

72:                                               ; preds = %20
  %73 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 2
  %74 = load i16, i16* %73, align 2
  %75 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 5
  %76 = load i16, i16* %75, align 2
  %77 = or i16 %76, %74
  %78 = icmp eq i16 %77, 0
  %79 = icmp sgt i32 %9, 15
  br i1 %78, label %89, label %80

80:                                               ; preds = %72
  br i1 %79, label %81, label %92

81:                                               ; preds = %80
  %82 = shl nsw i32 -1, %11
  %83 = trunc i32 %82 to i16
  %84 = xor i16 %83, -1
  %85 = insertelement <8 x i16> undef, i16 %84, i32 0
  %86 = shufflevector <8 x i16> %85, <8 x i16> undef, <8 x i32> zeroinitializer
  %87 = bitcast i16* %14 to <4 x i32>*
  %88 = icmp sgt i32 %10, 0
  br label %105

89:                                               ; preds = %72
  br i1 %79, label %384, label %379

90:                                               ; preds = %232
  %91 = and i32 %9, 15
  br label %92

92:                                               ; preds = %90, %80
  %93 = phi i32 [ %9, %80 ], [ %91, %90 ]
  %94 = phi i16* [ %2, %80 ], [ %234, %90 ]
  %95 = phi i16* [ %0, %80 ], [ %233, %90 ]
  %96 = icmp sgt i32 %93, 7
  br i1 %96, label %97, label %239

97:                                               ; preds = %92
  %98 = shl nsw i32 -1, %11
  %99 = trunc i32 %98 to i16
  %100 = xor i16 %99, -1
  %101 = insertelement <8 x i16> undef, i16 %100, i32 0
  %102 = shufflevector <8 x i16> %101, <8 x i16> undef, <8 x i32> zeroinitializer
  %103 = bitcast i16* %14 to <4 x i32>*
  %104 = icmp sgt i32 %10, 0
  br label %252

105:                                              ; preds = %81, %232
  %106 = phi i16* [ %0, %81 ], [ %233, %232 ]
  %107 = phi i16* [ %2, %81 ], [ %234, %232 ]
  %108 = phi i32 [ %9, %81 ], [ %235, %232 ]
  %109 = load <4 x i32>, <4 x i32>* %87, align 1
  br i1 %88, label %110, label %232

110:                                              ; preds = %105
  %111 = shufflevector <4 x i32> %109, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 undef, i32 undef>
  %112 = bitcast <4 x i32> %111 to <2 x i64>
  %113 = shufflevector <2 x i64> %112, <2 x i64> undef, <2 x i32> zeroinitializer
  %114 = shufflevector <4 x i32> %109, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 1>
  %115 = bitcast <4 x i32> %114 to <2 x i64>
  %116 = shufflevector <2 x i64> %115, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %117 = getelementptr inbounds i16, i16* %106, i64 -1
  %118 = bitcast <2 x i64> %116 to <8 x i16>
  %119 = bitcast <2 x i64> %113 to <8 x i16>
  br label %120

120:                                              ; preds = %120, %110
  %121 = phi i32 [ %10, %110 ], [ %168, %120 ]
  %122 = phi i16* [ %117, %110 ], [ %166, %120 ]
  %123 = phi i16* [ %107, %110 ], [ %167, %120 ]
  %124 = bitcast i16* %122 to <2 x i64>*
  %125 = load <2 x i64>, <2 x i64>* %124, align 1
  %126 = getelementptr inbounds i16, i16* %122, i64 5
  %127 = bitcast i16* %126 to <2 x i64>*
  %128 = load <2 x i64>, <2 x i64>* %127, align 1
  %129 = bitcast <2 x i64> %125 to <16 x i8>
  %130 = shufflevector <16 x i8> %129, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %131 = bitcast <16 x i8> %130 to <2 x i64>
  %132 = bitcast <2 x i64> %128 to <16 x i8>
  %133 = shufflevector <16 x i8> %132, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %134 = bitcast <16 x i8> %133 to <2 x i64>
  %135 = shufflevector <2 x i64> %131, <2 x i64> %134, <2 x i32> <i32 0, i32 2>
  %136 = bitcast <2 x i64> %125 to <8 x i16>
  %137 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %136, <8 x i16> %118) #6
  %138 = bitcast <2 x i64> %135 to <8 x i16>
  %139 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %138, <8 x i16> %119) #6
  %140 = shufflevector <16 x i8> %129, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %141 = bitcast <16 x i8> %140 to <2 x i64>
  %142 = shufflevector <2 x i64> %141, <2 x i64> %128, <2 x i32> <i32 0, i32 2>
  %143 = shufflevector <16 x i8> %129, <16 x i8> undef, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %144 = bitcast <16 x i8> %143 to <2 x i64>
  %145 = shufflevector <16 x i8> %132, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %146 = bitcast <16 x i8> %145 to <2 x i64>
  %147 = shufflevector <2 x i64> %144, <2 x i64> %146, <2 x i32> <i32 0, i32 2>
  %148 = bitcast <2 x i64> %142 to <8 x i16>
  %149 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %148, <8 x i16> %118) #6
  %150 = bitcast <2 x i64> %147 to <8 x i16>
  %151 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %150, <8 x i16> %119) #6
  %152 = add <4 x i32> %137, <i32 64, i32 64, i32 64, i32 64>
  %153 = add <4 x i32> %152, %139
  %154 = ashr <4 x i32> %153, <i32 7, i32 7, i32 7, i32 7>
  %155 = add <4 x i32> %149, <i32 64, i32 64, i32 64, i32 64>
  %156 = add <4 x i32> %155, %151
  %157 = ashr <4 x i32> %156, <i32 7, i32 7, i32 7, i32 7>
  %158 = shufflevector <4 x i32> %154, <4 x i32> %157, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %159 = shufflevector <4 x i32> %154, <4 x i32> %157, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %160 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %158, <4 x i32> %159) #6
  %161 = icmp slt <8 x i16> %160, %86
  %162 = select <8 x i1> %161, <8 x i16> %160, <8 x i16> %86
  %163 = icmp sgt <8 x i16> %162, zeroinitializer
  %164 = select <8 x i1> %163, <8 x i16> %162, <8 x i16> zeroinitializer
  %165 = bitcast i16* %123 to <8 x i16>*
  store <8 x i16> %164, <8 x i16>* %165, align 16
  %166 = getelementptr inbounds i16, i16* %122, i64 %1
  %167 = getelementptr inbounds i16, i16* %123, i64 %3
  %168 = add nsw i32 %121, -1
  %169 = icmp sgt i32 %168, 0
  br i1 %169, label %120, label %170

170:                                              ; preds = %120
  %171 = load <4 x i32>, <4 x i32>* %87, align 1
  %172 = getelementptr inbounds i16, i16* %107, i64 8
  %173 = shufflevector <4 x i32> %171, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 undef, i32 undef>
  %174 = bitcast <4 x i32> %173 to <2 x i64>
  %175 = shufflevector <2 x i64> %174, <2 x i64> undef, <2 x i32> zeroinitializer
  %176 = shufflevector <4 x i32> %171, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 1>
  %177 = bitcast <4 x i32> %176 to <2 x i64>
  %178 = shufflevector <2 x i64> %177, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %179 = getelementptr inbounds i16, i16* %106, i64 7
  %180 = bitcast <2 x i64> %178 to <8 x i16>
  %181 = bitcast <2 x i64> %175 to <8 x i16>
  br label %182

182:                                              ; preds = %182, %170
  %183 = phi i32 [ %10, %170 ], [ %230, %182 ]
  %184 = phi i16* [ %179, %170 ], [ %228, %182 ]
  %185 = phi i16* [ %172, %170 ], [ %229, %182 ]
  %186 = bitcast i16* %184 to <2 x i64>*
  %187 = load <2 x i64>, <2 x i64>* %186, align 1
  %188 = getelementptr inbounds i16, i16* %184, i64 5
  %189 = bitcast i16* %188 to <2 x i64>*
  %190 = load <2 x i64>, <2 x i64>* %189, align 1
  %191 = bitcast <2 x i64> %187 to <16 x i8>
  %192 = shufflevector <16 x i8> %191, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %193 = bitcast <16 x i8> %192 to <2 x i64>
  %194 = bitcast <2 x i64> %190 to <16 x i8>
  %195 = shufflevector <16 x i8> %194, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %196 = bitcast <16 x i8> %195 to <2 x i64>
  %197 = shufflevector <2 x i64> %193, <2 x i64> %196, <2 x i32> <i32 0, i32 2>
  %198 = bitcast <2 x i64> %187 to <8 x i16>
  %199 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %198, <8 x i16> %180) #6
  %200 = bitcast <2 x i64> %197 to <8 x i16>
  %201 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %200, <8 x i16> %181) #6
  %202 = shufflevector <16 x i8> %191, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %203 = bitcast <16 x i8> %202 to <2 x i64>
  %204 = shufflevector <2 x i64> %203, <2 x i64> %190, <2 x i32> <i32 0, i32 2>
  %205 = shufflevector <16 x i8> %191, <16 x i8> undef, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %206 = bitcast <16 x i8> %205 to <2 x i64>
  %207 = shufflevector <16 x i8> %194, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %208 = bitcast <16 x i8> %207 to <2 x i64>
  %209 = shufflevector <2 x i64> %206, <2 x i64> %208, <2 x i32> <i32 0, i32 2>
  %210 = bitcast <2 x i64> %204 to <8 x i16>
  %211 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %210, <8 x i16> %180) #6
  %212 = bitcast <2 x i64> %209 to <8 x i16>
  %213 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %212, <8 x i16> %181) #6
  %214 = add <4 x i32> %199, <i32 64, i32 64, i32 64, i32 64>
  %215 = add <4 x i32> %214, %201
  %216 = ashr <4 x i32> %215, <i32 7, i32 7, i32 7, i32 7>
  %217 = add <4 x i32> %211, <i32 64, i32 64, i32 64, i32 64>
  %218 = add <4 x i32> %217, %213
  %219 = ashr <4 x i32> %218, <i32 7, i32 7, i32 7, i32 7>
  %220 = shufflevector <4 x i32> %216, <4 x i32> %219, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %221 = shufflevector <4 x i32> %216, <4 x i32> %219, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %222 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %220, <4 x i32> %221) #6
  %223 = icmp slt <8 x i16> %222, %86
  %224 = select <8 x i1> %223, <8 x i16> %222, <8 x i16> %86
  %225 = icmp sgt <8 x i16> %224, zeroinitializer
  %226 = select <8 x i1> %225, <8 x i16> %224, <8 x i16> zeroinitializer
  %227 = bitcast i16* %185 to <8 x i16>*
  store <8 x i16> %226, <8 x i16>* %227, align 16
  %228 = getelementptr inbounds i16, i16* %184, i64 %1
  %229 = getelementptr inbounds i16, i16* %185, i64 %3
  %230 = add nsw i32 %183, -1
  %231 = icmp sgt i32 %230, 0
  br i1 %231, label %182, label %232

232:                                              ; preds = %182, %105
  %233 = getelementptr inbounds i16, i16* %106, i64 16
  %234 = getelementptr inbounds i16, i16* %107, i64 16
  %235 = add nsw i32 %108, -16
  %236 = icmp sgt i32 %235, 15
  br i1 %236, label %105, label %90

237:                                              ; preds = %317
  %238 = and i32 %93, 7
  br label %239

239:                                              ; preds = %237, %92
  %240 = phi i32 [ %93, %92 ], [ %238, %237 ]
  %241 = phi i16* [ %94, %92 ], [ %319, %237 ]
  %242 = phi i16* [ %95, %92 ], [ %318, %237 ]
  %243 = icmp sgt i32 %240, 3
  br i1 %243, label %244, label %421

244:                                              ; preds = %239
  %245 = shl nsw i32 -1, %11
  %246 = trunc i32 %245 to i16
  %247 = xor i16 %246, -1
  %248 = insertelement <8 x i16> undef, i16 %247, i32 0
  %249 = shufflevector <8 x i16> %248, <8 x i16> undef, <8 x i32> zeroinitializer
  %250 = bitcast i16* %14 to <4 x i32>*
  %251 = icmp sgt i32 %10, 0
  br label %322

252:                                              ; preds = %97, %317
  %253 = phi i16* [ %95, %97 ], [ %318, %317 ]
  %254 = phi i16* [ %94, %97 ], [ %319, %317 ]
  %255 = phi i32 [ %93, %97 ], [ %320, %317 ]
  %256 = load <4 x i32>, <4 x i32>* %103, align 1
  br i1 %104, label %257, label %317

257:                                              ; preds = %252
  %258 = shufflevector <4 x i32> %256, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 undef, i32 undef>
  %259 = bitcast <4 x i32> %258 to <2 x i64>
  %260 = shufflevector <2 x i64> %259, <2 x i64> undef, <2 x i32> zeroinitializer
  %261 = shufflevector <4 x i32> %256, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 1>
  %262 = bitcast <4 x i32> %261 to <2 x i64>
  %263 = shufflevector <2 x i64> %262, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %264 = getelementptr inbounds i16, i16* %253, i64 -1
  %265 = bitcast <2 x i64> %263 to <8 x i16>
  %266 = bitcast <2 x i64> %260 to <8 x i16>
  br label %267

267:                                              ; preds = %267, %257
  %268 = phi i32 [ %10, %257 ], [ %315, %267 ]
  %269 = phi i16* [ %264, %257 ], [ %313, %267 ]
  %270 = phi i16* [ %254, %257 ], [ %314, %267 ]
  %271 = bitcast i16* %269 to <2 x i64>*
  %272 = load <2 x i64>, <2 x i64>* %271, align 1
  %273 = getelementptr inbounds i16, i16* %269, i64 5
  %274 = bitcast i16* %273 to <2 x i64>*
  %275 = load <2 x i64>, <2 x i64>* %274, align 1
  %276 = bitcast <2 x i64> %272 to <16 x i8>
  %277 = shufflevector <16 x i8> %276, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %278 = bitcast <16 x i8> %277 to <2 x i64>
  %279 = bitcast <2 x i64> %275 to <16 x i8>
  %280 = shufflevector <16 x i8> %279, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %281 = bitcast <16 x i8> %280 to <2 x i64>
  %282 = shufflevector <2 x i64> %278, <2 x i64> %281, <2 x i32> <i32 0, i32 2>
  %283 = bitcast <2 x i64> %272 to <8 x i16>
  %284 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %283, <8 x i16> %265) #6
  %285 = bitcast <2 x i64> %282 to <8 x i16>
  %286 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %285, <8 x i16> %266) #6
  %287 = shufflevector <16 x i8> %276, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %288 = bitcast <16 x i8> %287 to <2 x i64>
  %289 = shufflevector <2 x i64> %288, <2 x i64> %275, <2 x i32> <i32 0, i32 2>
  %290 = shufflevector <16 x i8> %276, <16 x i8> undef, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %291 = bitcast <16 x i8> %290 to <2 x i64>
  %292 = shufflevector <16 x i8> %279, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %293 = bitcast <16 x i8> %292 to <2 x i64>
  %294 = shufflevector <2 x i64> %291, <2 x i64> %293, <2 x i32> <i32 0, i32 2>
  %295 = bitcast <2 x i64> %289 to <8 x i16>
  %296 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %295, <8 x i16> %265) #6
  %297 = bitcast <2 x i64> %294 to <8 x i16>
  %298 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %297, <8 x i16> %266) #6
  %299 = add <4 x i32> %284, <i32 64, i32 64, i32 64, i32 64>
  %300 = add <4 x i32> %299, %286
  %301 = ashr <4 x i32> %300, <i32 7, i32 7, i32 7, i32 7>
  %302 = add <4 x i32> %296, <i32 64, i32 64, i32 64, i32 64>
  %303 = add <4 x i32> %302, %298
  %304 = ashr <4 x i32> %303, <i32 7, i32 7, i32 7, i32 7>
  %305 = shufflevector <4 x i32> %301, <4 x i32> %304, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %306 = shufflevector <4 x i32> %301, <4 x i32> %304, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %307 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %305, <4 x i32> %306) #6
  %308 = icmp slt <8 x i16> %307, %102
  %309 = select <8 x i1> %308, <8 x i16> %307, <8 x i16> %102
  %310 = icmp sgt <8 x i16> %309, zeroinitializer
  %311 = select <8 x i1> %310, <8 x i16> %309, <8 x i16> zeroinitializer
  %312 = bitcast i16* %270 to <8 x i16>*
  store <8 x i16> %311, <8 x i16>* %312, align 16
  %313 = getelementptr inbounds i16, i16* %269, i64 %1
  %314 = getelementptr inbounds i16, i16* %270, i64 %3
  %315 = add nsw i32 %268, -1
  %316 = icmp sgt i32 %315, 0
  br i1 %316, label %267, label %317

317:                                              ; preds = %267, %252
  %318 = getelementptr inbounds i16, i16* %253, i64 8
  %319 = getelementptr inbounds i16, i16* %254, i64 8
  %320 = add nsw i32 %255, -8
  %321 = icmp sgt i32 %320, 7
  br i1 %321, label %252, label %237

322:                                              ; preds = %244, %372
  %323 = phi i16* [ %242, %244 ], [ %373, %372 ]
  %324 = phi i16* [ %241, %244 ], [ %374, %372 ]
  %325 = phi i32 [ %240, %244 ], [ %375, %372 ]
  %326 = load <4 x i32>, <4 x i32>* %250, align 1
  br i1 %251, label %327, label %372

327:                                              ; preds = %322
  %328 = shufflevector <4 x i32> %326, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 undef, i32 undef>
  %329 = bitcast <4 x i32> %328 to <2 x i64>
  %330 = shufflevector <2 x i64> %329, <2 x i64> undef, <2 x i32> zeroinitializer
  %331 = shufflevector <4 x i32> %326, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 1>
  %332 = bitcast <4 x i32> %331 to <2 x i64>
  %333 = shufflevector <2 x i64> %332, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %334 = getelementptr inbounds i16, i16* %323, i64 -1
  %335 = bitcast <2 x i64> %333 to <8 x i16>
  %336 = bitcast <2 x i64> %330 to <8 x i16>
  br label %337

337:                                              ; preds = %337, %327
  %338 = phi i32 [ %10, %327 ], [ %370, %337 ]
  %339 = phi i16* [ %334, %327 ], [ %368, %337 ]
  %340 = phi i16* [ %324, %327 ], [ %369, %337 ]
  %341 = bitcast i16* %339 to <2 x i64>*
  %342 = load <2 x i64>, <2 x i64>* %341, align 1
  %343 = bitcast <2 x i64> %342 to <16 x i8>
  %344 = shufflevector <16 x i8> %343, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %345 = shufflevector <16 x i8> %343, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %346 = shufflevector <16 x i8> %343, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %347 = bitcast <2 x i64> %342 to <8 x i16>
  %348 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %347, <8 x i16> %335) #6
  %349 = bitcast <16 x i8> %345 to <8 x i16>
  %350 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %349, <8 x i16> %336) #6
  %351 = add <4 x i32> %350, %348
  %352 = bitcast <16 x i8> %344 to <8 x i16>
  %353 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %352, <8 x i16> %335) #6
  %354 = bitcast <16 x i8> %346 to <8 x i16>
  %355 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %354, <8 x i16> %336) #6
  %356 = add <4 x i32> %355, %353
  %357 = shufflevector <4 x i32> %351, <4 x i32> %356, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %358 = add <4 x i32> %357, <i32 64, i32 64, i32 64, i32 64>
  %359 = ashr <4 x i32> %358, <i32 7, i32 7, i32 7, i32 7>
  %360 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %359, <4 x i32> zeroinitializer) #6
  %361 = icmp slt <8 x i16> %360, %249
  %362 = select <8 x i1> %361, <8 x i16> %360, <8 x i16> %249
  %363 = icmp sgt <8 x i16> %362, zeroinitializer
  %364 = select <8 x i1> %363, <8 x i16> %362, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>
  %365 = bitcast <8 x i16> %364 to <2 x i64>
  %366 = extractelement <2 x i64> %365, i32 0
  %367 = bitcast i16* %340 to i64*
  store i64 %366, i64* %367, align 1
  %368 = getelementptr inbounds i16, i16* %339, i64 %1
  %369 = getelementptr inbounds i16, i16* %340, i64 %3
  %370 = add nsw i32 %338, -1
  %371 = icmp sgt i32 %370, 0
  br i1 %371, label %337, label %372

372:                                              ; preds = %337, %322
  %373 = getelementptr inbounds i16, i16* %323, i64 4
  %374 = getelementptr inbounds i16, i16* %324, i64 4
  %375 = add nsw i32 %325, -4
  %376 = icmp sgt i32 %375, 3
  br i1 %376, label %322, label %417

377:                                              ; preds = %384
  %378 = and i32 %9, 15
  br label %379

379:                                              ; preds = %377, %89
  %380 = phi i32 [ %9, %89 ], [ %378, %377 ]
  %381 = phi i16* [ %2, %89 ], [ %389, %377 ]
  %382 = phi i16* [ %0, %89 ], [ %388, %377 ]
  %383 = icmp sgt i32 %380, 7
  br i1 %383, label %399, label %394

384:                                              ; preds = %89, %384
  %385 = phi i16* [ %388, %384 ], [ %0, %89 ]
  %386 = phi i16* [ %389, %384 ], [ %2, %89 ]
  %387 = phi i32 [ %390, %384 ], [ %9, %89 ]
  tail call void @vpx_highbd_filter_block1d16_h2_sse2(i16* %385, i64 %1, i16* %386, i64 %3, i32 %10, i16* %14, i32 %11) #6
  %388 = getelementptr inbounds i16, i16* %385, i64 16
  %389 = getelementptr inbounds i16, i16* %386, i64 16
  %390 = add nsw i32 %387, -16
  %391 = icmp sgt i32 %390, 15
  br i1 %391, label %384, label %377

392:                                              ; preds = %399
  %393 = and i32 %380, 7
  br label %394

394:                                              ; preds = %392, %379
  %395 = phi i32 [ %380, %379 ], [ %393, %392 ]
  %396 = phi i16* [ %381, %379 ], [ %404, %392 ]
  %397 = phi i16* [ %382, %379 ], [ %403, %392 ]
  %398 = icmp sgt i32 %395, 3
  br i1 %398, label %407, label %421

399:                                              ; preds = %379, %399
  %400 = phi i16* [ %403, %399 ], [ %382, %379 ]
  %401 = phi i16* [ %404, %399 ], [ %381, %379 ]
  %402 = phi i32 [ %405, %399 ], [ %380, %379 ]
  tail call void @vpx_highbd_filter_block1d8_h2_sse2(i16* %400, i64 %1, i16* %401, i64 %3, i32 %10, i16* %14, i32 %11) #6
  %403 = getelementptr inbounds i16, i16* %400, i64 8
  %404 = getelementptr inbounds i16, i16* %401, i64 8
  %405 = add nsw i32 %402, -8
  %406 = icmp sgt i32 %405, 7
  br i1 %406, label %399, label %392

407:                                              ; preds = %394, %407
  %408 = phi i16* [ %411, %407 ], [ %397, %394 ]
  %409 = phi i16* [ %412, %407 ], [ %396, %394 ]
  %410 = phi i32 [ %413, %407 ], [ %395, %394 ]
  tail call void @vpx_highbd_filter_block1d4_h2_sse2(i16* %408, i64 %1, i16* %409, i64 %3, i32 %10, i16* %14, i32 %11) #6
  %411 = getelementptr inbounds i16, i16* %408, i64 4
  %412 = getelementptr inbounds i16, i16* %409, i64 4
  %413 = add nsw i32 %410, -4
  %414 = icmp sgt i32 %413, 3
  br i1 %414, label %407, label %415

415:                                              ; preds = %407
  %416 = and i32 %395, 3
  br label %421

417:                                              ; preds = %372
  %418 = and i32 %240, 3
  br label %421

419:                                              ; preds = %64
  %420 = and i32 %52, 3
  br label %421

421:                                              ; preds = %419, %417, %415, %51, %239, %394, %16, %12
  %422 = phi i32 [ %9, %16 ], [ %9, %12 ], [ %395, %394 ], [ %240, %239 ], [ %52, %51 ], [ %416, %415 ], [ %418, %417 ], [ %420, %419 ]
  %423 = phi i16* [ %2, %16 ], [ %2, %12 ], [ %396, %394 ], [ %241, %239 ], [ %53, %51 ], [ %412, %415 ], [ %374, %417 ], [ %69, %419 ]
  %424 = phi i16* [ %0, %16 ], [ %0, %12 ], [ %397, %394 ], [ %242, %239 ], [ %54, %51 ], [ %411, %415 ], [ %373, %417 ], [ %68, %419 ]
  %425 = icmp eq i32 %422, 0
  br i1 %425, label %427, label %426

426:                                              ; preds = %421
  tail call void @vpx_highbd_convolve8_horiz_c(i16* %424, i64 %1, i16* %423, i64 %3, [8 x i16]* %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 %422, i32 %10, i32 %11) #6
  br label %427

427:                                              ; preds = %421, %426
  ret void
}

declare void @vpx_highbd_filter_block1d16_h8_sse2(i16*, i64, i16*, i64, i32, i16*, i32) local_unnamed_addr #2

declare void @vpx_highbd_filter_block1d8_h8_sse2(i16*, i64, i16*, i64, i32, i16*, i32) local_unnamed_addr #2

declare void @vpx_highbd_filter_block1d4_h8_sse2(i16*, i64, i16*, i64, i32, i16*, i32) local_unnamed_addr #2

declare void @vpx_highbd_filter_block1d16_h2_sse2(i16*, i64, i16*, i64, i32, i16*, i32) local_unnamed_addr #2

declare void @vpx_highbd_filter_block1d8_h2_sse2(i16*, i64, i16*, i64, i32, i16*, i32) local_unnamed_addr #2

declare void @vpx_highbd_filter_block1d4_h2_sse2(i16*, i64, i16*, i64, i32, i16*, i32) local_unnamed_addr #2

declare void @vpx_highbd_convolve8_horiz_c(i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_convolve8_vert_sse2(i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  %13 = sext i32 %7 to i64
  %14 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 0
  %15 = icmp eq i32 %8, 16
  br i1 %15, label %16, label %540

16:                                               ; preds = %12
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 3
  %18 = load i16, i16* %17, align 2
  %19 = icmp eq i16 %18, 128
  br i1 %19, label %540, label %20

20:                                               ; preds = %16
  %21 = load i16, i16* %14, align 2
  %22 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 1
  %23 = load i16, i16* %22, align 2
  %24 = or i16 %23, %21
  %25 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 6
  %26 = load i16, i16* %25, align 2
  %27 = or i16 %24, %26
  %28 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 7
  %29 = load i16, i16* %28, align 2
  %30 = or i16 %27, %29
  %31 = icmp eq i16 %30, 0
  br i1 %31, label %81, label %32

32:                                               ; preds = %20
  %33 = icmp sgt i32 %9, 15
  br i1 %33, label %34, label %38

34:                                               ; preds = %32
  %35 = mul i64 %1, -3
  br label %45

36:                                               ; preds = %45
  %37 = and i32 %9, 15
  br label %38

38:                                               ; preds = %36, %32
  %39 = phi i32 [ %9, %32 ], [ %37, %36 ]
  %40 = phi i16* [ %2, %32 ], [ %51, %36 ]
  %41 = phi i16* [ %0, %32 ], [ %50, %36 ]
  %42 = icmp sgt i32 %39, 7
  br i1 %42, label %43, label %56

43:                                               ; preds = %38
  %44 = mul i64 %1, -3
  br label %63

45:                                               ; preds = %34, %45
  %46 = phi i16* [ %0, %34 ], [ %50, %45 ]
  %47 = phi i16* [ %2, %34 ], [ %51, %45 ]
  %48 = phi i32 [ %9, %34 ], [ %52, %45 ]
  %49 = getelementptr inbounds i16, i16* %46, i64 %35
  tail call void @vpx_highbd_filter_block1d16_v8_sse2(i16* %49, i64 %1, i16* %47, i64 %3, i32 %10, i16* %14, i32 %11) #6
  %50 = getelementptr inbounds i16, i16* %46, i64 16
  %51 = getelementptr inbounds i16, i16* %47, i64 16
  %52 = add nsw i32 %48, -16
  %53 = icmp sgt i32 %52, 15
  br i1 %53, label %45, label %36

54:                                               ; preds = %63
  %55 = and i32 %39, 7
  br label %56

56:                                               ; preds = %54, %38
  %57 = phi i32 [ %39, %38 ], [ %55, %54 ]
  %58 = phi i16* [ %40, %38 ], [ %69, %54 ]
  %59 = phi i16* [ %41, %38 ], [ %68, %54 ]
  %60 = icmp sgt i32 %57, 3
  br i1 %60, label %61, label %540

61:                                               ; preds = %56
  %62 = mul i64 %1, -3
  br label %72

63:                                               ; preds = %43, %63
  %64 = phi i16* [ %41, %43 ], [ %68, %63 ]
  %65 = phi i16* [ %40, %43 ], [ %69, %63 ]
  %66 = phi i32 [ %39, %43 ], [ %70, %63 ]
  %67 = getelementptr inbounds i16, i16* %64, i64 %44
  tail call void @vpx_highbd_filter_block1d8_v8_sse2(i16* %67, i64 %1, i16* %65, i64 %3, i32 %10, i16* %14, i32 %11) #6
  %68 = getelementptr inbounds i16, i16* %64, i64 8
  %69 = getelementptr inbounds i16, i16* %65, i64 8
  %70 = add nsw i32 %66, -8
  %71 = icmp sgt i32 %70, 7
  br i1 %71, label %63, label %54

72:                                               ; preds = %61, %72
  %73 = phi i16* [ %59, %61 ], [ %77, %72 ]
  %74 = phi i16* [ %58, %61 ], [ %78, %72 ]
  %75 = phi i32 [ %57, %61 ], [ %79, %72 ]
  %76 = getelementptr inbounds i16, i16* %73, i64 %62
  tail call void @vpx_highbd_filter_block1d4_v8_sse2(i16* %76, i64 %1, i16* %74, i64 %3, i32 %10, i16* %14, i32 %11) #6
  %77 = getelementptr inbounds i16, i16* %73, i64 4
  %78 = getelementptr inbounds i16, i16* %74, i64 4
  %79 = add nsw i32 %75, -4
  %80 = icmp sgt i32 %79, 3
  br i1 %80, label %72, label %538

81:                                               ; preds = %20
  %82 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 2
  %83 = load i16, i16* %82, align 2
  %84 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 5
  %85 = load i16, i16* %84, align 2
  %86 = or i16 %85, %83
  %87 = icmp eq i16 %86, 0
  %88 = icmp sgt i32 %9, 15
  br i1 %87, label %103, label %89

89:                                               ; preds = %81
  br i1 %88, label %90, label %106

90:                                               ; preds = %89
  %91 = sub i64 0, %1
  %92 = shl nsw i32 -1, %11
  %93 = trunc i32 %92 to i16
  %94 = xor i16 %93, -1
  %95 = insertelement <8 x i16> undef, i16 %94, i32 0
  %96 = shufflevector <8 x i16> %95, <8 x i16> undef, <8 x i32> zeroinitializer
  %97 = shl i64 %1, 1
  %98 = shl i64 %3, 1
  %99 = bitcast i16* %14 to <4 x i32>*
  %100 = icmp sgt i32 %10, 1
  %101 = mul nsw i64 %1, 3
  %102 = shl nsw i64 %1, 2
  br label %124

103:                                              ; preds = %81
  br i1 %88, label %503, label %498

104:                                              ; preds = %295
  %105 = and i32 %9, 15
  br label %106

106:                                              ; preds = %104, %89
  %107 = phi i32 [ %9, %89 ], [ %105, %104 ]
  %108 = phi i16* [ %2, %89 ], [ %297, %104 ]
  %109 = phi i16* [ %0, %89 ], [ %296, %104 ]
  %110 = icmp sgt i32 %107, 7
  br i1 %110, label %111, label %302

111:                                              ; preds = %106
  %112 = sub i64 0, %1
  %113 = shl nsw i32 -1, %11
  %114 = trunc i32 %113 to i16
  %115 = xor i16 %114, -1
  %116 = insertelement <8 x i16> undef, i16 %115, i32 0
  %117 = shufflevector <8 x i16> %116, <8 x i16> undef, <8 x i32> zeroinitializer
  %118 = shl i64 %1, 1
  %119 = shl i64 %3, 1
  %120 = bitcast i16* %14 to <4 x i32>*
  %121 = icmp sgt i32 %10, 1
  %122 = mul nsw i64 %1, 3
  %123 = shl nsw i64 %1, 2
  br label %320

124:                                              ; preds = %90, %295
  %125 = phi i16* [ %0, %90 ], [ %296, %295 ]
  %126 = phi i16* [ %2, %90 ], [ %297, %295 ]
  %127 = phi i32 [ %9, %90 ], [ %298, %295 ]
  %128 = getelementptr inbounds i16, i16* %125, i64 %91
  %129 = load <4 x i32>, <4 x i32>* %99, align 1
  %130 = bitcast i16* %128 to <8 x i16>*
  %131 = load <8 x i16>, <8 x i16>* %130, align 1
  %132 = bitcast i16* %125 to <8 x i16>*
  %133 = load <8 x i16>, <8 x i16>* %132, align 1
  %134 = getelementptr inbounds i16, i16* %128, i64 %97
  %135 = bitcast i16* %134 to <2 x i64>*
  %136 = load <2 x i64>, <2 x i64>* %135, align 1
  %137 = bitcast <2 x i64> %136 to <8 x i16>
  br i1 %100, label %138, label %211

138:                                              ; preds = %124
  %139 = shufflevector <8 x i16> %133, <8 x i16> %137, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %140 = shufflevector <8 x i16> %133, <8 x i16> %137, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %141 = shufflevector <8 x i16> %131, <8 x i16> %133, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %142 = shufflevector <8 x i16> %131, <8 x i16> %133, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %143 = shufflevector <4 x i32> %129, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 undef, i32 undef>
  %144 = bitcast <4 x i32> %143 to <2 x i64>
  %145 = shufflevector <2 x i64> %144, <2 x i64> undef, <2 x i32> zeroinitializer
  %146 = shufflevector <4 x i32> %129, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 1>
  %147 = bitcast <4 x i32> %146 to <2 x i64>
  %148 = shufflevector <2 x i64> %147, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %149 = bitcast <2 x i64> %148 to <8 x i16>
  %150 = bitcast <2 x i64> %145 to <8 x i16>
  br label %151

151:                                              ; preds = %151, %138
  %152 = phi i32 [ %10, %138 ], [ %207, %151 ]
  %153 = phi <8 x i16> [ %139, %138 ], [ %171, %151 ]
  %154 = phi <8 x i16> [ %141, %138 ], [ %165, %151 ]
  %155 = phi <8 x i16> [ %140, %138 ], [ %170, %151 ]
  %156 = phi <8 x i16> [ %142, %138 ], [ %164, %151 ]
  %157 = phi <2 x i64> [ %136, %138 ], [ %168, %151 ]
  %158 = phi i16* [ %128, %138 ], [ %205, %151 ]
  %159 = phi i16* [ %126, %138 ], [ %206, %151 ]
  %160 = getelementptr inbounds i16, i16* %158, i64 %101
  %161 = bitcast i16* %160 to <8 x i16>*
  %162 = load <8 x i16>, <8 x i16>* %161, align 1
  %163 = bitcast <2 x i64> %157 to <8 x i16>
  %164 = shufflevector <8 x i16> %163, <8 x i16> %162, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %165 = shufflevector <8 x i16> %163, <8 x i16> %162, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %166 = getelementptr inbounds i16, i16* %158, i64 %102
  %167 = bitcast i16* %166 to <2 x i64>*
  %168 = load <2 x i64>, <2 x i64>* %167, align 1
  %169 = bitcast <2 x i64> %168 to <8 x i16>
  %170 = shufflevector <8 x i16> %162, <8 x i16> %169, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %171 = shufflevector <8 x i16> %162, <8 x i16> %169, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %172 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %156, <8 x i16> %149) #6
  %173 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %155, <8 x i16> %149) #6
  %174 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %164, <8 x i16> %150) #6
  %175 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %170, <8 x i16> %150) #6
  %176 = add <4 x i32> %172, <i32 64, i32 64, i32 64, i32 64>
  %177 = add <4 x i32> %176, %174
  %178 = ashr <4 x i32> %177, <i32 7, i32 7, i32 7, i32 7>
  %179 = add <4 x i32> %173, <i32 64, i32 64, i32 64, i32 64>
  %180 = add <4 x i32> %179, %175
  %181 = ashr <4 x i32> %180, <i32 7, i32 7, i32 7, i32 7>
  %182 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %154, <8 x i16> %149) #6
  %183 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %153, <8 x i16> %149) #6
  %184 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %165, <8 x i16> %150) #6
  %185 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %171, <8 x i16> %150) #6
  %186 = add <4 x i32> %182, <i32 64, i32 64, i32 64, i32 64>
  %187 = add <4 x i32> %186, %184
  %188 = ashr <4 x i32> %187, <i32 7, i32 7, i32 7, i32 7>
  %189 = add <4 x i32> %183, <i32 64, i32 64, i32 64, i32 64>
  %190 = add <4 x i32> %189, %185
  %191 = ashr <4 x i32> %190, <i32 7, i32 7, i32 7, i32 7>
  %192 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %178, <4 x i32> %188) #6
  %193 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %181, <4 x i32> %191) #6
  %194 = icmp slt <8 x i16> %192, %96
  %195 = select <8 x i1> %194, <8 x i16> %192, <8 x i16> %96
  %196 = icmp slt <8 x i16> %193, %96
  %197 = select <8 x i1> %196, <8 x i16> %193, <8 x i16> %96
  %198 = icmp sgt <8 x i16> %195, zeroinitializer
  %199 = select <8 x i1> %198, <8 x i16> %195, <8 x i16> zeroinitializer
  %200 = icmp sgt <8 x i16> %197, zeroinitializer
  %201 = select <8 x i1> %200, <8 x i16> %197, <8 x i16> zeroinitializer
  %202 = bitcast i16* %159 to <8 x i16>*
  store <8 x i16> %199, <8 x i16>* %202, align 16
  %203 = getelementptr inbounds i16, i16* %159, i64 %3
  %204 = bitcast i16* %203 to <8 x i16>*
  store <8 x i16> %201, <8 x i16>* %204, align 16
  %205 = getelementptr inbounds i16, i16* %158, i64 %97
  %206 = getelementptr inbounds i16, i16* %159, i64 %98
  %207 = add nsw i32 %152, -2
  %208 = icmp sgt i32 %207, 1
  br i1 %208, label %151, label %209

209:                                              ; preds = %151
  %210 = load <4 x i32>, <4 x i32>* %99, align 1
  br label %211

211:                                              ; preds = %209, %124
  %212 = phi <4 x i32> [ %210, %209 ], [ %129, %124 ]
  %213 = getelementptr inbounds i16, i16* %128, i64 8
  %214 = bitcast i16* %213 to <8 x i16>*
  %215 = load <8 x i16>, <8 x i16>* %214, align 1
  %216 = getelementptr inbounds i16, i16* %213, i64 %1
  %217 = bitcast i16* %216 to <8 x i16>*
  %218 = load <8 x i16>, <8 x i16>* %217, align 1
  %219 = getelementptr inbounds i16, i16* %213, i64 %97
  %220 = bitcast i16* %219 to <2 x i64>*
  %221 = load <2 x i64>, <2 x i64>* %220, align 1
  %222 = bitcast <2 x i64> %221 to <8 x i16>
  br i1 %100, label %223, label %295

223:                                              ; preds = %211
  %224 = getelementptr inbounds i16, i16* %126, i64 8
  %225 = shufflevector <8 x i16> %218, <8 x i16> %222, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %226 = shufflevector <8 x i16> %218, <8 x i16> %222, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %227 = shufflevector <8 x i16> %215, <8 x i16> %218, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %228 = shufflevector <8 x i16> %215, <8 x i16> %218, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %229 = shufflevector <4 x i32> %212, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 undef, i32 undef>
  %230 = bitcast <4 x i32> %229 to <2 x i64>
  %231 = shufflevector <2 x i64> %230, <2 x i64> undef, <2 x i32> zeroinitializer
  %232 = shufflevector <4 x i32> %212, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 1>
  %233 = bitcast <4 x i32> %232 to <2 x i64>
  %234 = shufflevector <2 x i64> %233, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %235 = bitcast <2 x i64> %234 to <8 x i16>
  %236 = bitcast <2 x i64> %231 to <8 x i16>
  br label %237

237:                                              ; preds = %237, %223
  %238 = phi i32 [ %10, %223 ], [ %293, %237 ]
  %239 = phi <8 x i16> [ %225, %223 ], [ %257, %237 ]
  %240 = phi <8 x i16> [ %227, %223 ], [ %251, %237 ]
  %241 = phi <8 x i16> [ %226, %223 ], [ %256, %237 ]
  %242 = phi <8 x i16> [ %228, %223 ], [ %250, %237 ]
  %243 = phi <2 x i64> [ %221, %223 ], [ %254, %237 ]
  %244 = phi i16* [ %213, %223 ], [ %291, %237 ]
  %245 = phi i16* [ %224, %223 ], [ %292, %237 ]
  %246 = getelementptr inbounds i16, i16* %244, i64 %101
  %247 = bitcast i16* %246 to <8 x i16>*
  %248 = load <8 x i16>, <8 x i16>* %247, align 1
  %249 = bitcast <2 x i64> %243 to <8 x i16>
  %250 = shufflevector <8 x i16> %249, <8 x i16> %248, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %251 = shufflevector <8 x i16> %249, <8 x i16> %248, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %252 = getelementptr inbounds i16, i16* %244, i64 %102
  %253 = bitcast i16* %252 to <2 x i64>*
  %254 = load <2 x i64>, <2 x i64>* %253, align 1
  %255 = bitcast <2 x i64> %254 to <8 x i16>
  %256 = shufflevector <8 x i16> %248, <8 x i16> %255, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %257 = shufflevector <8 x i16> %248, <8 x i16> %255, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %258 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %242, <8 x i16> %235) #6
  %259 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %241, <8 x i16> %235) #6
  %260 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %250, <8 x i16> %236) #6
  %261 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %256, <8 x i16> %236) #6
  %262 = add <4 x i32> %258, <i32 64, i32 64, i32 64, i32 64>
  %263 = add <4 x i32> %262, %260
  %264 = ashr <4 x i32> %263, <i32 7, i32 7, i32 7, i32 7>
  %265 = add <4 x i32> %259, <i32 64, i32 64, i32 64, i32 64>
  %266 = add <4 x i32> %265, %261
  %267 = ashr <4 x i32> %266, <i32 7, i32 7, i32 7, i32 7>
  %268 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %240, <8 x i16> %235) #6
  %269 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %239, <8 x i16> %235) #6
  %270 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %251, <8 x i16> %236) #6
  %271 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %257, <8 x i16> %236) #6
  %272 = add <4 x i32> %268, <i32 64, i32 64, i32 64, i32 64>
  %273 = add <4 x i32> %272, %270
  %274 = ashr <4 x i32> %273, <i32 7, i32 7, i32 7, i32 7>
  %275 = add <4 x i32> %269, <i32 64, i32 64, i32 64, i32 64>
  %276 = add <4 x i32> %275, %271
  %277 = ashr <4 x i32> %276, <i32 7, i32 7, i32 7, i32 7>
  %278 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %264, <4 x i32> %274) #6
  %279 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %267, <4 x i32> %277) #6
  %280 = icmp slt <8 x i16> %278, %96
  %281 = select <8 x i1> %280, <8 x i16> %278, <8 x i16> %96
  %282 = icmp slt <8 x i16> %279, %96
  %283 = select <8 x i1> %282, <8 x i16> %279, <8 x i16> %96
  %284 = icmp sgt <8 x i16> %281, zeroinitializer
  %285 = select <8 x i1> %284, <8 x i16> %281, <8 x i16> zeroinitializer
  %286 = icmp sgt <8 x i16> %283, zeroinitializer
  %287 = select <8 x i1> %286, <8 x i16> %283, <8 x i16> zeroinitializer
  %288 = bitcast i16* %245 to <8 x i16>*
  store <8 x i16> %285, <8 x i16>* %288, align 16
  %289 = getelementptr inbounds i16, i16* %245, i64 %3
  %290 = bitcast i16* %289 to <8 x i16>*
  store <8 x i16> %287, <8 x i16>* %290, align 16
  %291 = getelementptr inbounds i16, i16* %244, i64 %97
  %292 = getelementptr inbounds i16, i16* %245, i64 %98
  %293 = add nsw i32 %238, -2
  %294 = icmp sgt i32 %293, 1
  br i1 %294, label %237, label %295

295:                                              ; preds = %237, %211
  %296 = getelementptr inbounds i16, i16* %125, i64 16
  %297 = getelementptr inbounds i16, i16* %126, i64 16
  %298 = add nsw i32 %127, -16
  %299 = icmp sgt i32 %298, 15
  br i1 %299, label %124, label %104

300:                                              ; preds = %405
  %301 = and i32 %107, 7
  br label %302

302:                                              ; preds = %300, %106
  %303 = phi i32 [ %107, %106 ], [ %301, %300 ]
  %304 = phi i16* [ %108, %106 ], [ %407, %300 ]
  %305 = phi i16* [ %109, %106 ], [ %406, %300 ]
  %306 = icmp sgt i32 %303, 3
  br i1 %306, label %307, label %540

307:                                              ; preds = %302
  %308 = sub i64 0, %1
  %309 = shl nsw i32 -1, %11
  %310 = trunc i32 %309 to i16
  %311 = xor i16 %310, -1
  %312 = insertelement <8 x i16> undef, i16 %311, i32 0
  %313 = shufflevector <8 x i16> %312, <8 x i16> undef, <8 x i32> zeroinitializer
  %314 = shl i64 %1, 1
  %315 = shl i64 %3, 1
  %316 = bitcast i16* %14 to <4 x i32>*
  %317 = icmp sgt i32 %10, 1
  %318 = mul nsw i64 %1, 3
  %319 = shl nsw i64 %1, 2
  br label %410

320:                                              ; preds = %111, %405
  %321 = phi i16* [ %109, %111 ], [ %406, %405 ]
  %322 = phi i16* [ %108, %111 ], [ %407, %405 ]
  %323 = phi i32 [ %107, %111 ], [ %408, %405 ]
  %324 = getelementptr inbounds i16, i16* %321, i64 %112
  %325 = load <4 x i32>, <4 x i32>* %120, align 1
  %326 = bitcast i16* %324 to <8 x i16>*
  %327 = load <8 x i16>, <8 x i16>* %326, align 1
  %328 = bitcast i16* %321 to <8 x i16>*
  %329 = load <8 x i16>, <8 x i16>* %328, align 1
  %330 = getelementptr inbounds i16, i16* %324, i64 %118
  %331 = bitcast i16* %330 to <2 x i64>*
  %332 = load <2 x i64>, <2 x i64>* %331, align 1
  %333 = bitcast <2 x i64> %332 to <8 x i16>
  br i1 %121, label %334, label %405

334:                                              ; preds = %320
  %335 = shufflevector <8 x i16> %329, <8 x i16> %333, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %336 = shufflevector <8 x i16> %329, <8 x i16> %333, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %337 = shufflevector <8 x i16> %327, <8 x i16> %329, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %338 = shufflevector <8 x i16> %327, <8 x i16> %329, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %339 = shufflevector <4 x i32> %325, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 undef, i32 undef>
  %340 = bitcast <4 x i32> %339 to <2 x i64>
  %341 = shufflevector <2 x i64> %340, <2 x i64> undef, <2 x i32> zeroinitializer
  %342 = shufflevector <4 x i32> %325, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 1>
  %343 = bitcast <4 x i32> %342 to <2 x i64>
  %344 = shufflevector <2 x i64> %343, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %345 = bitcast <2 x i64> %344 to <8 x i16>
  %346 = bitcast <2 x i64> %341 to <8 x i16>
  br label %347

347:                                              ; preds = %347, %334
  %348 = phi i32 [ %10, %334 ], [ %403, %347 ]
  %349 = phi <8 x i16> [ %335, %334 ], [ %367, %347 ]
  %350 = phi <8 x i16> [ %337, %334 ], [ %361, %347 ]
  %351 = phi <8 x i16> [ %336, %334 ], [ %366, %347 ]
  %352 = phi <8 x i16> [ %338, %334 ], [ %360, %347 ]
  %353 = phi <2 x i64> [ %332, %334 ], [ %364, %347 ]
  %354 = phi i16* [ %324, %334 ], [ %401, %347 ]
  %355 = phi i16* [ %322, %334 ], [ %402, %347 ]
  %356 = getelementptr inbounds i16, i16* %354, i64 %122
  %357 = bitcast i16* %356 to <8 x i16>*
  %358 = load <8 x i16>, <8 x i16>* %357, align 1
  %359 = bitcast <2 x i64> %353 to <8 x i16>
  %360 = shufflevector <8 x i16> %359, <8 x i16> %358, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %361 = shufflevector <8 x i16> %359, <8 x i16> %358, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %362 = getelementptr inbounds i16, i16* %354, i64 %123
  %363 = bitcast i16* %362 to <2 x i64>*
  %364 = load <2 x i64>, <2 x i64>* %363, align 1
  %365 = bitcast <2 x i64> %364 to <8 x i16>
  %366 = shufflevector <8 x i16> %358, <8 x i16> %365, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %367 = shufflevector <8 x i16> %358, <8 x i16> %365, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %368 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %352, <8 x i16> %345) #6
  %369 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %351, <8 x i16> %345) #6
  %370 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %360, <8 x i16> %346) #6
  %371 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %366, <8 x i16> %346) #6
  %372 = add <4 x i32> %368, <i32 64, i32 64, i32 64, i32 64>
  %373 = add <4 x i32> %372, %370
  %374 = ashr <4 x i32> %373, <i32 7, i32 7, i32 7, i32 7>
  %375 = add <4 x i32> %369, <i32 64, i32 64, i32 64, i32 64>
  %376 = add <4 x i32> %375, %371
  %377 = ashr <4 x i32> %376, <i32 7, i32 7, i32 7, i32 7>
  %378 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %350, <8 x i16> %345) #6
  %379 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %349, <8 x i16> %345) #6
  %380 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %361, <8 x i16> %346) #6
  %381 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %367, <8 x i16> %346) #6
  %382 = add <4 x i32> %378, <i32 64, i32 64, i32 64, i32 64>
  %383 = add <4 x i32> %382, %380
  %384 = ashr <4 x i32> %383, <i32 7, i32 7, i32 7, i32 7>
  %385 = add <4 x i32> %379, <i32 64, i32 64, i32 64, i32 64>
  %386 = add <4 x i32> %385, %381
  %387 = ashr <4 x i32> %386, <i32 7, i32 7, i32 7, i32 7>
  %388 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %374, <4 x i32> %384) #6
  %389 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %377, <4 x i32> %387) #6
  %390 = icmp slt <8 x i16> %388, %117
  %391 = select <8 x i1> %390, <8 x i16> %388, <8 x i16> %117
  %392 = icmp slt <8 x i16> %389, %117
  %393 = select <8 x i1> %392, <8 x i16> %389, <8 x i16> %117
  %394 = icmp sgt <8 x i16> %391, zeroinitializer
  %395 = select <8 x i1> %394, <8 x i16> %391, <8 x i16> zeroinitializer
  %396 = icmp sgt <8 x i16> %393, zeroinitializer
  %397 = select <8 x i1> %396, <8 x i16> %393, <8 x i16> zeroinitializer
  %398 = bitcast i16* %355 to <8 x i16>*
  store <8 x i16> %395, <8 x i16>* %398, align 16
  %399 = getelementptr inbounds i16, i16* %355, i64 %3
  %400 = bitcast i16* %399 to <8 x i16>*
  store <8 x i16> %397, <8 x i16>* %400, align 16
  %401 = getelementptr inbounds i16, i16* %354, i64 %118
  %402 = getelementptr inbounds i16, i16* %355, i64 %119
  %403 = add nsw i32 %348, -2
  %404 = icmp sgt i32 %403, 1
  br i1 %404, label %347, label %405

405:                                              ; preds = %347, %320
  %406 = getelementptr inbounds i16, i16* %321, i64 8
  %407 = getelementptr inbounds i16, i16* %322, i64 8
  %408 = add nsw i32 %323, -8
  %409 = icmp sgt i32 %408, 7
  br i1 %409, label %320, label %300

410:                                              ; preds = %307, %491
  %411 = phi i16* [ %305, %307 ], [ %492, %491 ]
  %412 = phi i16* [ %304, %307 ], [ %493, %491 ]
  %413 = phi i32 [ %303, %307 ], [ %494, %491 ]
  %414 = getelementptr inbounds i16, i16* %411, i64 %308
  %415 = load <4 x i32>, <4 x i32>* %316, align 1
  %416 = bitcast i16* %411 to i64*
  %417 = load i64, i64* %416, align 1
  %418 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %417, i32 0
  %419 = bitcast <2 x i64> %418 to <8 x i16>
  %420 = getelementptr inbounds i16, i16* %414, i64 %314
  %421 = bitcast i16* %420 to i64*
  %422 = load i64, i64* %421, align 1
  %423 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %422, i32 0
  br i1 %317, label %424, label %491

424:                                              ; preds = %410
  %425 = bitcast <2 x i64> %423 to <8 x i16>
  %426 = shufflevector <8 x i16> %419, <8 x i16> %425, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %427 = bitcast i16* %414 to i64*
  %428 = load i64, i64* %427, align 1
  %429 = insertelement <2 x i64> undef, i64 %428, i32 0
  %430 = bitcast <2 x i64> %429 to <8 x i16>
  %431 = shufflevector <8 x i16> %430, <8 x i16> %419, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %432 = shufflevector <4 x i32> %415, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 undef, i32 undef>
  %433 = bitcast <4 x i32> %432 to <2 x i64>
  %434 = shufflevector <2 x i64> %433, <2 x i64> undef, <2 x i32> zeroinitializer
  %435 = shufflevector <4 x i32> %415, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 1>
  %436 = bitcast <4 x i32> %435 to <2 x i64>
  %437 = shufflevector <2 x i64> %436, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %438 = bitcast <2 x i64> %437 to <8 x i16>
  %439 = bitcast <2 x i64> %434 to <8 x i16>
  br label %440

440:                                              ; preds = %440, %424
  %441 = phi i32 [ %10, %424 ], [ %489, %440 ]
  %442 = phi <8 x i16> [ %426, %424 ], [ %459, %440 ]
  %443 = phi <8 x i16> [ %431, %424 ], [ %453, %440 ]
  %444 = phi <2 x i64> [ %423, %424 ], [ %457, %440 ]
  %445 = phi i16* [ %414, %424 ], [ %487, %440 ]
  %446 = phi i16* [ %412, %424 ], [ %488, %440 ]
  %447 = getelementptr inbounds i16, i16* %445, i64 %318
  %448 = bitcast i16* %447 to i64*
  %449 = load i64, i64* %448, align 1
  %450 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %449, i32 0
  %451 = bitcast <2 x i64> %444 to <8 x i16>
  %452 = bitcast <2 x i64> %450 to <8 x i16>
  %453 = shufflevector <8 x i16> %451, <8 x i16> %452, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %454 = getelementptr inbounds i16, i16* %445, i64 %319
  %455 = bitcast i16* %454 to i64*
  %456 = load i64, i64* %455, align 1
  %457 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %456, i32 0
  %458 = bitcast <2 x i64> %457 to <8 x i16>
  %459 = shufflevector <8 x i16> %452, <8 x i16> %458, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %460 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %443, <8 x i16> %438) #6
  %461 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %442, <8 x i16> %438) #6
  %462 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %453, <8 x i16> %439) #6
  %463 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %459, <8 x i16> %439) #6
  %464 = add <4 x i32> %460, <i32 64, i32 64, i32 64, i32 64>
  %465 = add <4 x i32> %464, %462
  %466 = ashr <4 x i32> %465, <i32 7, i32 7, i32 7, i32 7>
  %467 = add <4 x i32> %461, <i32 64, i32 64, i32 64, i32 64>
  %468 = add <4 x i32> %467, %463
  %469 = ashr <4 x i32> %468, <i32 7, i32 7, i32 7, i32 7>
  %470 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %466, <4 x i32> zeroinitializer) #6
  %471 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %469, <4 x i32> zeroinitializer) #6
  %472 = icmp slt <8 x i16> %470, %313
  %473 = select <8 x i1> %472, <8 x i16> %470, <8 x i16> %313
  %474 = icmp slt <8 x i16> %471, %313
  %475 = select <8 x i1> %474, <8 x i16> %471, <8 x i16> %313
  %476 = icmp sgt <8 x i16> %473, zeroinitializer
  %477 = select <8 x i1> %476, <8 x i16> %473, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>
  %478 = bitcast <8 x i16> %477 to <2 x i64>
  %479 = icmp sgt <8 x i16> %475, zeroinitializer
  %480 = select <8 x i1> %479, <8 x i16> %475, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>
  %481 = bitcast <8 x i16> %480 to <2 x i64>
  %482 = extractelement <2 x i64> %478, i32 0
  %483 = bitcast i16* %446 to i64*
  store i64 %482, i64* %483, align 1
  %484 = getelementptr inbounds i16, i16* %446, i64 %3
  %485 = extractelement <2 x i64> %481, i32 0
  %486 = bitcast i16* %484 to i64*
  store i64 %485, i64* %486, align 1
  %487 = getelementptr inbounds i16, i16* %445, i64 %314
  %488 = getelementptr inbounds i16, i16* %446, i64 %315
  %489 = add nsw i32 %441, -2
  %490 = icmp sgt i32 %489, 1
  br i1 %490, label %440, label %491

491:                                              ; preds = %440, %410
  %492 = getelementptr inbounds i16, i16* %411, i64 4
  %493 = getelementptr inbounds i16, i16* %412, i64 4
  %494 = add nsw i32 %413, -4
  %495 = icmp sgt i32 %494, 3
  br i1 %495, label %410, label %536

496:                                              ; preds = %503
  %497 = and i32 %9, 15
  br label %498

498:                                              ; preds = %496, %103
  %499 = phi i32 [ %9, %103 ], [ %497, %496 ]
  %500 = phi i16* [ %2, %103 ], [ %508, %496 ]
  %501 = phi i16* [ %0, %103 ], [ %507, %496 ]
  %502 = icmp sgt i32 %499, 7
  br i1 %502, label %518, label %513

503:                                              ; preds = %103, %503
  %504 = phi i16* [ %507, %503 ], [ %0, %103 ]
  %505 = phi i16* [ %508, %503 ], [ %2, %103 ]
  %506 = phi i32 [ %509, %503 ], [ %9, %103 ]
  tail call void @vpx_highbd_filter_block1d16_v2_sse2(i16* %504, i64 %1, i16* %505, i64 %3, i32 %10, i16* %14, i32 %11) #6
  %507 = getelementptr inbounds i16, i16* %504, i64 16
  %508 = getelementptr inbounds i16, i16* %505, i64 16
  %509 = add nsw i32 %506, -16
  %510 = icmp sgt i32 %509, 15
  br i1 %510, label %503, label %496

511:                                              ; preds = %518
  %512 = and i32 %499, 7
  br label %513

513:                                              ; preds = %511, %498
  %514 = phi i32 [ %499, %498 ], [ %512, %511 ]
  %515 = phi i16* [ %500, %498 ], [ %523, %511 ]
  %516 = phi i16* [ %501, %498 ], [ %522, %511 ]
  %517 = icmp sgt i32 %514, 3
  br i1 %517, label %526, label %540

518:                                              ; preds = %498, %518
  %519 = phi i16* [ %522, %518 ], [ %501, %498 ]
  %520 = phi i16* [ %523, %518 ], [ %500, %498 ]
  %521 = phi i32 [ %524, %518 ], [ %499, %498 ]
  tail call void @vpx_highbd_filter_block1d8_v2_sse2(i16* %519, i64 %1, i16* %520, i64 %3, i32 %10, i16* %14, i32 %11) #6
  %522 = getelementptr inbounds i16, i16* %519, i64 8
  %523 = getelementptr inbounds i16, i16* %520, i64 8
  %524 = add nsw i32 %521, -8
  %525 = icmp sgt i32 %524, 7
  br i1 %525, label %518, label %511

526:                                              ; preds = %513, %526
  %527 = phi i16* [ %530, %526 ], [ %516, %513 ]
  %528 = phi i16* [ %531, %526 ], [ %515, %513 ]
  %529 = phi i32 [ %532, %526 ], [ %514, %513 ]
  tail call void @vpx_highbd_filter_block1d4_v2_sse2(i16* %527, i64 %1, i16* %528, i64 %3, i32 %10, i16* %14, i32 %11) #6
  %530 = getelementptr inbounds i16, i16* %527, i64 4
  %531 = getelementptr inbounds i16, i16* %528, i64 4
  %532 = add nsw i32 %529, -4
  %533 = icmp sgt i32 %532, 3
  br i1 %533, label %526, label %534

534:                                              ; preds = %526
  %535 = and i32 %514, 3
  br label %540

536:                                              ; preds = %491
  %537 = and i32 %303, 3
  br label %540

538:                                              ; preds = %72
  %539 = and i32 %57, 3
  br label %540

540:                                              ; preds = %538, %536, %534, %56, %302, %513, %16, %12
  %541 = phi i32 [ %9, %16 ], [ %9, %12 ], [ %514, %513 ], [ %303, %302 ], [ %57, %56 ], [ %535, %534 ], [ %537, %536 ], [ %539, %538 ]
  %542 = phi i16* [ %2, %16 ], [ %2, %12 ], [ %515, %513 ], [ %304, %302 ], [ %58, %56 ], [ %531, %534 ], [ %493, %536 ], [ %78, %538 ]
  %543 = phi i16* [ %0, %16 ], [ %0, %12 ], [ %516, %513 ], [ %305, %302 ], [ %59, %56 ], [ %530, %534 ], [ %492, %536 ], [ %77, %538 ]
  %544 = icmp eq i32 %541, 0
  br i1 %544, label %546, label %545

545:                                              ; preds = %540
  tail call void @vpx_highbd_convolve8_vert_c(i16* %543, i64 %1, i16* %542, i64 %3, [8 x i16]* %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 %541, i32 %10, i32 %11) #6
  br label %546

546:                                              ; preds = %540, %545
  ret void
}

declare void @vpx_highbd_filter_block1d16_v8_sse2(i16*, i64, i16*, i64, i32, i16*, i32) local_unnamed_addr #2

declare void @vpx_highbd_filter_block1d8_v8_sse2(i16*, i64, i16*, i64, i32, i16*, i32) local_unnamed_addr #2

declare void @vpx_highbd_filter_block1d4_v8_sse2(i16*, i64, i16*, i64, i32, i16*, i32) local_unnamed_addr #2

declare void @vpx_highbd_filter_block1d16_v2_sse2(i16*, i64, i16*, i64, i32, i16*, i32) local_unnamed_addr #2

declare void @vpx_highbd_filter_block1d8_v2_sse2(i16*, i64, i16*, i64, i32, i16*, i32) local_unnamed_addr #2

declare void @vpx_highbd_filter_block1d4_v2_sse2(i16*, i64, i16*, i64, i32, i16*, i32) local_unnamed_addr #2

declare void @vpx_highbd_convolve8_vert_c(i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_convolve8_avg_horiz_sse2(i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #3 {
  %13 = sext i32 %5 to i64
  %14 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 0
  %15 = icmp eq i32 %6, 16
  br i1 %15, label %16, label %164

16:                                               ; preds = %12
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 3
  %18 = load i16, i16* %17, align 2
  %19 = icmp eq i16 %18, 128
  br i1 %19, label %164, label %20

20:                                               ; preds = %16
  %21 = load i16, i16* %14, align 2
  %22 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 1
  %23 = load i16, i16* %22, align 2
  %24 = or i16 %23, %21
  %25 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 6
  %26 = load i16, i16* %25, align 2
  %27 = or i16 %24, %26
  %28 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 7
  %29 = load i16, i16* %28, align 2
  %30 = or i16 %27, %29
  %31 = icmp eq i16 %30, 0
  br i1 %31, label %72, label %32

32:                                               ; preds = %20
  %33 = icmp sgt i32 %9, 15
  br i1 %33, label %41, label %36

34:                                               ; preds = %41
  %35 = and i32 %9, 15
  br label %36

36:                                               ; preds = %34, %32
  %37 = phi i32 [ %9, %32 ], [ %35, %34 ]
  %38 = phi i16* [ %2, %32 ], [ %46, %34 ]
  %39 = phi i16* [ %0, %32 ], [ %45, %34 ]
  %40 = icmp sgt i32 %37, 7
  br i1 %40, label %56, label %51

41:                                               ; preds = %32, %41
  %42 = phi i16* [ %45, %41 ], [ %0, %32 ]
  %43 = phi i16* [ %46, %41 ], [ %2, %32 ]
  %44 = phi i32 [ %47, %41 ], [ %9, %32 ]
  tail call void @vpx_highbd_filter_block1d16_h8_avg_sse2(i16* %42, i64 %1, i16* %43, i64 %3, i32 %10, i16* %14, i32 %11) #6
  %45 = getelementptr inbounds i16, i16* %42, i64 16
  %46 = getelementptr inbounds i16, i16* %43, i64 16
  %47 = add nsw i32 %44, -16
  %48 = icmp sgt i32 %47, 15
  br i1 %48, label %41, label %34

49:                                               ; preds = %56
  %50 = and i32 %37, 7
  br label %51

51:                                               ; preds = %49, %36
  %52 = phi i32 [ %37, %36 ], [ %50, %49 ]
  %53 = phi i16* [ %38, %36 ], [ %61, %49 ]
  %54 = phi i16* [ %39, %36 ], [ %60, %49 ]
  %55 = icmp sgt i32 %52, 3
  br i1 %55, label %64, label %164

56:                                               ; preds = %36, %56
  %57 = phi i16* [ %60, %56 ], [ %39, %36 ]
  %58 = phi i16* [ %61, %56 ], [ %38, %36 ]
  %59 = phi i32 [ %62, %56 ], [ %37, %36 ]
  tail call void @vpx_highbd_filter_block1d8_h8_avg_sse2(i16* %57, i64 %1, i16* %58, i64 %3, i32 %10, i16* %14, i32 %11) #6
  %60 = getelementptr inbounds i16, i16* %57, i64 8
  %61 = getelementptr inbounds i16, i16* %58, i64 8
  %62 = add nsw i32 %59, -8
  %63 = icmp sgt i32 %62, 7
  br i1 %63, label %56, label %49

64:                                               ; preds = %51, %64
  %65 = phi i16* [ %68, %64 ], [ %54, %51 ]
  %66 = phi i16* [ %69, %64 ], [ %53, %51 ]
  %67 = phi i32 [ %70, %64 ], [ %52, %51 ]
  tail call void @vpx_highbd_filter_block1d4_h8_avg_sse2(i16* %65, i64 %1, i16* %66, i64 %3, i32 %10, i16* %14, i32 %11) #6
  %68 = getelementptr inbounds i16, i16* %65, i64 4
  %69 = getelementptr inbounds i16, i16* %66, i64 4
  %70 = add nsw i32 %67, -4
  %71 = icmp sgt i32 %70, 3
  br i1 %71, label %64, label %162

72:                                               ; preds = %20
  %73 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 2
  %74 = load i16, i16* %73, align 2
  %75 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 5
  %76 = load i16, i16* %75, align 2
  %77 = or i16 %76, %74
  %78 = icmp eq i16 %77, 0
  %79 = icmp sgt i32 %9, 15
  br i1 %78, label %81, label %80

80:                                               ; preds = %72
  br i1 %79, label %89, label %84

81:                                               ; preds = %72
  br i1 %79, label %127, label %122

82:                                               ; preds = %89
  %83 = and i32 %9, 15
  br label %84

84:                                               ; preds = %82, %80
  %85 = phi i32 [ %9, %80 ], [ %83, %82 ]
  %86 = phi i16* [ %2, %80 ], [ %94, %82 ]
  %87 = phi i16* [ %0, %80 ], [ %93, %82 ]
  %88 = icmp sgt i32 %85, 7
  br i1 %88, label %104, label %99

89:                                               ; preds = %80, %89
  %90 = phi i16* [ %93, %89 ], [ %0, %80 ]
  %91 = phi i16* [ %94, %89 ], [ %2, %80 ]
  %92 = phi i32 [ %95, %89 ], [ %9, %80 ]
  tail call void @vpx_highbd_filter_block1d16_h8_avg_sse2(i16* %90, i64 %1, i16* %91, i64 %3, i32 %10, i16* %14, i32 %11) #6
  %93 = getelementptr inbounds i16, i16* %90, i64 16
  %94 = getelementptr inbounds i16, i16* %91, i64 16
  %95 = add nsw i32 %92, -16
  %96 = icmp sgt i32 %95, 15
  br i1 %96, label %89, label %82

97:                                               ; preds = %104
  %98 = and i32 %85, 7
  br label %99

99:                                               ; preds = %97, %84
  %100 = phi i32 [ %85, %84 ], [ %98, %97 ]
  %101 = phi i16* [ %86, %84 ], [ %109, %97 ]
  %102 = phi i16* [ %87, %84 ], [ %108, %97 ]
  %103 = icmp sgt i32 %100, 3
  br i1 %103, label %112, label %164

104:                                              ; preds = %84, %104
  %105 = phi i16* [ %108, %104 ], [ %87, %84 ]
  %106 = phi i16* [ %109, %104 ], [ %86, %84 ]
  %107 = phi i32 [ %110, %104 ], [ %85, %84 ]
  tail call void @vpx_highbd_filter_block1d8_h8_avg_sse2(i16* %105, i64 %1, i16* %106, i64 %3, i32 %10, i16* %14, i32 %11) #6
  %108 = getelementptr inbounds i16, i16* %105, i64 8
  %109 = getelementptr inbounds i16, i16* %106, i64 8
  %110 = add nsw i32 %107, -8
  %111 = icmp sgt i32 %110, 7
  br i1 %111, label %104, label %97

112:                                              ; preds = %99, %112
  %113 = phi i16* [ %116, %112 ], [ %102, %99 ]
  %114 = phi i16* [ %117, %112 ], [ %101, %99 ]
  %115 = phi i32 [ %118, %112 ], [ %100, %99 ]
  tail call void @vpx_highbd_filter_block1d4_h8_avg_sse2(i16* %113, i64 %1, i16* %114, i64 %3, i32 %10, i16* %14, i32 %11) #6
  %116 = getelementptr inbounds i16, i16* %113, i64 4
  %117 = getelementptr inbounds i16, i16* %114, i64 4
  %118 = add nsw i32 %115, -4
  %119 = icmp sgt i32 %118, 3
  br i1 %119, label %112, label %160

120:                                              ; preds = %127
  %121 = and i32 %9, 15
  br label %122

122:                                              ; preds = %120, %81
  %123 = phi i32 [ %9, %81 ], [ %121, %120 ]
  %124 = phi i16* [ %2, %81 ], [ %132, %120 ]
  %125 = phi i16* [ %0, %81 ], [ %131, %120 ]
  %126 = icmp sgt i32 %123, 7
  br i1 %126, label %142, label %137

127:                                              ; preds = %81, %127
  %128 = phi i16* [ %131, %127 ], [ %0, %81 ]
  %129 = phi i16* [ %132, %127 ], [ %2, %81 ]
  %130 = phi i32 [ %133, %127 ], [ %9, %81 ]
  tail call void @vpx_highbd_filter_block1d16_h2_avg_sse2(i16* %128, i64 %1, i16* %129, i64 %3, i32 %10, i16* %14, i32 %11) #6
  %131 = getelementptr inbounds i16, i16* %128, i64 16
  %132 = getelementptr inbounds i16, i16* %129, i64 16
  %133 = add nsw i32 %130, -16
  %134 = icmp sgt i32 %133, 15
  br i1 %134, label %127, label %120

135:                                              ; preds = %142
  %136 = and i32 %123, 7
  br label %137

137:                                              ; preds = %135, %122
  %138 = phi i32 [ %123, %122 ], [ %136, %135 ]
  %139 = phi i16* [ %124, %122 ], [ %147, %135 ]
  %140 = phi i16* [ %125, %122 ], [ %146, %135 ]
  %141 = icmp sgt i32 %138, 3
  br i1 %141, label %150, label %164

142:                                              ; preds = %122, %142
  %143 = phi i16* [ %146, %142 ], [ %125, %122 ]
  %144 = phi i16* [ %147, %142 ], [ %124, %122 ]
  %145 = phi i32 [ %148, %142 ], [ %123, %122 ]
  tail call void @vpx_highbd_filter_block1d8_h2_avg_sse2(i16* %143, i64 %1, i16* %144, i64 %3, i32 %10, i16* %14, i32 %11) #6
  %146 = getelementptr inbounds i16, i16* %143, i64 8
  %147 = getelementptr inbounds i16, i16* %144, i64 8
  %148 = add nsw i32 %145, -8
  %149 = icmp sgt i32 %148, 7
  br i1 %149, label %142, label %135

150:                                              ; preds = %137, %150
  %151 = phi i16* [ %154, %150 ], [ %140, %137 ]
  %152 = phi i16* [ %155, %150 ], [ %139, %137 ]
  %153 = phi i32 [ %156, %150 ], [ %138, %137 ]
  tail call void @vpx_highbd_filter_block1d4_h2_avg_sse2(i16* %151, i64 %1, i16* %152, i64 %3, i32 %10, i16* %14, i32 %11) #6
  %154 = getelementptr inbounds i16, i16* %151, i64 4
  %155 = getelementptr inbounds i16, i16* %152, i64 4
  %156 = add nsw i32 %153, -4
  %157 = icmp sgt i32 %156, 3
  br i1 %157, label %150, label %158

158:                                              ; preds = %150
  %159 = and i32 %138, 3
  br label %164

160:                                              ; preds = %112
  %161 = and i32 %100, 3
  br label %164

162:                                              ; preds = %64
  %163 = and i32 %52, 3
  br label %164

164:                                              ; preds = %162, %160, %158, %51, %99, %137, %16, %12
  %165 = phi i32 [ %9, %16 ], [ %9, %12 ], [ %138, %137 ], [ %100, %99 ], [ %52, %51 ], [ %159, %158 ], [ %161, %160 ], [ %163, %162 ]
  %166 = phi i16* [ %2, %16 ], [ %2, %12 ], [ %139, %137 ], [ %101, %99 ], [ %53, %51 ], [ %155, %158 ], [ %117, %160 ], [ %69, %162 ]
  %167 = phi i16* [ %0, %16 ], [ %0, %12 ], [ %140, %137 ], [ %102, %99 ], [ %54, %51 ], [ %154, %158 ], [ %116, %160 ], [ %68, %162 ]
  %168 = icmp eq i32 %165, 0
  br i1 %168, label %170, label %169

169:                                              ; preds = %164
  tail call void @vpx_highbd_convolve8_avg_horiz_c(i16* %167, i64 %1, i16* %166, i64 %3, [8 x i16]* %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 %165, i32 %10, i32 %11) #6
  br label %170

170:                                              ; preds = %164, %169
  ret void
}

declare void @vpx_highbd_filter_block1d16_h8_avg_sse2(i16*, i64, i16*, i64, i32, i16*, i32) local_unnamed_addr #2

declare void @vpx_highbd_filter_block1d8_h8_avg_sse2(i16*, i64, i16*, i64, i32, i16*, i32) local_unnamed_addr #2

declare void @vpx_highbd_filter_block1d4_h8_avg_sse2(i16*, i64, i16*, i64, i32, i16*, i32) local_unnamed_addr #2

declare void @vpx_highbd_filter_block1d16_h2_avg_sse2(i16*, i64, i16*, i64, i32, i16*, i32) local_unnamed_addr #2

declare void @vpx_highbd_filter_block1d8_h2_avg_sse2(i16*, i64, i16*, i64, i32, i16*, i32) local_unnamed_addr #2

declare void @vpx_highbd_filter_block1d4_h2_avg_sse2(i16*, i64, i16*, i64, i32, i16*, i32) local_unnamed_addr #2

declare void @vpx_highbd_convolve8_avg_horiz_c(i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_convolve8_avg_vert_sse2(i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #3 {
  %13 = sext i32 %7 to i64
  %14 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 0
  %15 = icmp eq i32 %8, 16
  br i1 %15, label %16, label %182

16:                                               ; preds = %12
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 3
  %18 = load i16, i16* %17, align 2
  %19 = icmp eq i16 %18, 128
  br i1 %19, label %182, label %20

20:                                               ; preds = %16
  %21 = load i16, i16* %14, align 2
  %22 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 1
  %23 = load i16, i16* %22, align 2
  %24 = or i16 %23, %21
  %25 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 6
  %26 = load i16, i16* %25, align 2
  %27 = or i16 %24, %26
  %28 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 7
  %29 = load i16, i16* %28, align 2
  %30 = or i16 %27, %29
  %31 = icmp eq i16 %30, 0
  br i1 %31, label %81, label %32

32:                                               ; preds = %20
  %33 = icmp sgt i32 %9, 15
  br i1 %33, label %34, label %38

34:                                               ; preds = %32
  %35 = mul i64 %1, -3
  br label %45

36:                                               ; preds = %45
  %37 = and i32 %9, 15
  br label %38

38:                                               ; preds = %36, %32
  %39 = phi i32 [ %9, %32 ], [ %37, %36 ]
  %40 = phi i16* [ %2, %32 ], [ %51, %36 ]
  %41 = phi i16* [ %0, %32 ], [ %50, %36 ]
  %42 = icmp sgt i32 %39, 7
  br i1 %42, label %43, label %56

43:                                               ; preds = %38
  %44 = mul i64 %1, -3
  br label %63

45:                                               ; preds = %34, %45
  %46 = phi i16* [ %0, %34 ], [ %50, %45 ]
  %47 = phi i16* [ %2, %34 ], [ %51, %45 ]
  %48 = phi i32 [ %9, %34 ], [ %52, %45 ]
  %49 = getelementptr inbounds i16, i16* %46, i64 %35
  tail call void @vpx_highbd_filter_block1d16_v8_avg_sse2(i16* %49, i64 %1, i16* %47, i64 %3, i32 %10, i16* %14, i32 %11) #6
  %50 = getelementptr inbounds i16, i16* %46, i64 16
  %51 = getelementptr inbounds i16, i16* %47, i64 16
  %52 = add nsw i32 %48, -16
  %53 = icmp sgt i32 %52, 15
  br i1 %53, label %45, label %36

54:                                               ; preds = %63
  %55 = and i32 %39, 7
  br label %56

56:                                               ; preds = %54, %38
  %57 = phi i32 [ %39, %38 ], [ %55, %54 ]
  %58 = phi i16* [ %40, %38 ], [ %69, %54 ]
  %59 = phi i16* [ %41, %38 ], [ %68, %54 ]
  %60 = icmp sgt i32 %57, 3
  br i1 %60, label %61, label %182

61:                                               ; preds = %56
  %62 = mul i64 %1, -3
  br label %72

63:                                               ; preds = %43, %63
  %64 = phi i16* [ %41, %43 ], [ %68, %63 ]
  %65 = phi i16* [ %40, %43 ], [ %69, %63 ]
  %66 = phi i32 [ %39, %43 ], [ %70, %63 ]
  %67 = getelementptr inbounds i16, i16* %64, i64 %44
  tail call void @vpx_highbd_filter_block1d8_v8_avg_sse2(i16* %67, i64 %1, i16* %65, i64 %3, i32 %10, i16* %14, i32 %11) #6
  %68 = getelementptr inbounds i16, i16* %64, i64 8
  %69 = getelementptr inbounds i16, i16* %65, i64 8
  %70 = add nsw i32 %66, -8
  %71 = icmp sgt i32 %70, 7
  br i1 %71, label %63, label %54

72:                                               ; preds = %61, %72
  %73 = phi i16* [ %59, %61 ], [ %77, %72 ]
  %74 = phi i16* [ %58, %61 ], [ %78, %72 ]
  %75 = phi i32 [ %57, %61 ], [ %79, %72 ]
  %76 = getelementptr inbounds i16, i16* %73, i64 %62
  tail call void @vpx_highbd_filter_block1d4_v8_avg_sse2(i16* %76, i64 %1, i16* %74, i64 %3, i32 %10, i16* %14, i32 %11) #6
  %77 = getelementptr inbounds i16, i16* %73, i64 4
  %78 = getelementptr inbounds i16, i16* %74, i64 4
  %79 = add nsw i32 %75, -4
  %80 = icmp sgt i32 %79, 3
  br i1 %80, label %72, label %180

81:                                               ; preds = %20
  %82 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 2
  %83 = load i16, i16* %82, align 2
  %84 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 5
  %85 = load i16, i16* %84, align 2
  %86 = or i16 %85, %83
  %87 = icmp eq i16 %86, 0
  %88 = icmp sgt i32 %9, 15
  br i1 %87, label %92, label %89

89:                                               ; preds = %81
  br i1 %88, label %90, label %95

90:                                               ; preds = %89
  %91 = mul i64 %1, -3
  br label %102

92:                                               ; preds = %81
  br i1 %88, label %145, label %140

93:                                               ; preds = %102
  %94 = and i32 %9, 15
  br label %95

95:                                               ; preds = %93, %89
  %96 = phi i32 [ %9, %89 ], [ %94, %93 ]
  %97 = phi i16* [ %2, %89 ], [ %108, %93 ]
  %98 = phi i16* [ %0, %89 ], [ %107, %93 ]
  %99 = icmp sgt i32 %96, 7
  br i1 %99, label %100, label %113

100:                                              ; preds = %95
  %101 = mul i64 %1, -3
  br label %120

102:                                              ; preds = %90, %102
  %103 = phi i16* [ %0, %90 ], [ %107, %102 ]
  %104 = phi i16* [ %2, %90 ], [ %108, %102 ]
  %105 = phi i32 [ %9, %90 ], [ %109, %102 ]
  %106 = getelementptr inbounds i16, i16* %103, i64 %91
  tail call void @vpx_highbd_filter_block1d16_v8_avg_sse2(i16* %106, i64 %1, i16* %104, i64 %3, i32 %10, i16* %14, i32 %11) #6
  %107 = getelementptr inbounds i16, i16* %103, i64 16
  %108 = getelementptr inbounds i16, i16* %104, i64 16
  %109 = add nsw i32 %105, -16
  %110 = icmp sgt i32 %109, 15
  br i1 %110, label %102, label %93

111:                                              ; preds = %120
  %112 = and i32 %96, 7
  br label %113

113:                                              ; preds = %111, %95
  %114 = phi i32 [ %96, %95 ], [ %112, %111 ]
  %115 = phi i16* [ %97, %95 ], [ %126, %111 ]
  %116 = phi i16* [ %98, %95 ], [ %125, %111 ]
  %117 = icmp sgt i32 %114, 3
  br i1 %117, label %118, label %182

118:                                              ; preds = %113
  %119 = mul i64 %1, -3
  br label %129

120:                                              ; preds = %100, %120
  %121 = phi i16* [ %98, %100 ], [ %125, %120 ]
  %122 = phi i16* [ %97, %100 ], [ %126, %120 ]
  %123 = phi i32 [ %96, %100 ], [ %127, %120 ]
  %124 = getelementptr inbounds i16, i16* %121, i64 %101
  tail call void @vpx_highbd_filter_block1d8_v8_avg_sse2(i16* %124, i64 %1, i16* %122, i64 %3, i32 %10, i16* %14, i32 %11) #6
  %125 = getelementptr inbounds i16, i16* %121, i64 8
  %126 = getelementptr inbounds i16, i16* %122, i64 8
  %127 = add nsw i32 %123, -8
  %128 = icmp sgt i32 %127, 7
  br i1 %128, label %120, label %111

129:                                              ; preds = %118, %129
  %130 = phi i16* [ %116, %118 ], [ %134, %129 ]
  %131 = phi i16* [ %115, %118 ], [ %135, %129 ]
  %132 = phi i32 [ %114, %118 ], [ %136, %129 ]
  %133 = getelementptr inbounds i16, i16* %130, i64 %119
  tail call void @vpx_highbd_filter_block1d4_v8_avg_sse2(i16* %133, i64 %1, i16* %131, i64 %3, i32 %10, i16* %14, i32 %11) #6
  %134 = getelementptr inbounds i16, i16* %130, i64 4
  %135 = getelementptr inbounds i16, i16* %131, i64 4
  %136 = add nsw i32 %132, -4
  %137 = icmp sgt i32 %136, 3
  br i1 %137, label %129, label %178

138:                                              ; preds = %145
  %139 = and i32 %9, 15
  br label %140

140:                                              ; preds = %138, %92
  %141 = phi i32 [ %9, %92 ], [ %139, %138 ]
  %142 = phi i16* [ %2, %92 ], [ %150, %138 ]
  %143 = phi i16* [ %0, %92 ], [ %149, %138 ]
  %144 = icmp sgt i32 %141, 7
  br i1 %144, label %160, label %155

145:                                              ; preds = %92, %145
  %146 = phi i16* [ %149, %145 ], [ %0, %92 ]
  %147 = phi i16* [ %150, %145 ], [ %2, %92 ]
  %148 = phi i32 [ %151, %145 ], [ %9, %92 ]
  tail call void @vpx_highbd_filter_block1d16_v2_avg_sse2(i16* %146, i64 %1, i16* %147, i64 %3, i32 %10, i16* %14, i32 %11) #6
  %149 = getelementptr inbounds i16, i16* %146, i64 16
  %150 = getelementptr inbounds i16, i16* %147, i64 16
  %151 = add nsw i32 %148, -16
  %152 = icmp sgt i32 %151, 15
  br i1 %152, label %145, label %138

153:                                              ; preds = %160
  %154 = and i32 %141, 7
  br label %155

155:                                              ; preds = %153, %140
  %156 = phi i32 [ %141, %140 ], [ %154, %153 ]
  %157 = phi i16* [ %142, %140 ], [ %165, %153 ]
  %158 = phi i16* [ %143, %140 ], [ %164, %153 ]
  %159 = icmp sgt i32 %156, 3
  br i1 %159, label %168, label %182

160:                                              ; preds = %140, %160
  %161 = phi i16* [ %164, %160 ], [ %143, %140 ]
  %162 = phi i16* [ %165, %160 ], [ %142, %140 ]
  %163 = phi i32 [ %166, %160 ], [ %141, %140 ]
  tail call void @vpx_highbd_filter_block1d8_v2_avg_sse2(i16* %161, i64 %1, i16* %162, i64 %3, i32 %10, i16* %14, i32 %11) #6
  %164 = getelementptr inbounds i16, i16* %161, i64 8
  %165 = getelementptr inbounds i16, i16* %162, i64 8
  %166 = add nsw i32 %163, -8
  %167 = icmp sgt i32 %166, 7
  br i1 %167, label %160, label %153

168:                                              ; preds = %155, %168
  %169 = phi i16* [ %172, %168 ], [ %158, %155 ]
  %170 = phi i16* [ %173, %168 ], [ %157, %155 ]
  %171 = phi i32 [ %174, %168 ], [ %156, %155 ]
  tail call void @vpx_highbd_filter_block1d4_v2_avg_sse2(i16* %169, i64 %1, i16* %170, i64 %3, i32 %10, i16* %14, i32 %11) #6
  %172 = getelementptr inbounds i16, i16* %169, i64 4
  %173 = getelementptr inbounds i16, i16* %170, i64 4
  %174 = add nsw i32 %171, -4
  %175 = icmp sgt i32 %174, 3
  br i1 %175, label %168, label %176

176:                                              ; preds = %168
  %177 = and i32 %156, 3
  br label %182

178:                                              ; preds = %129
  %179 = and i32 %114, 3
  br label %182

180:                                              ; preds = %72
  %181 = and i32 %57, 3
  br label %182

182:                                              ; preds = %180, %178, %176, %56, %113, %155, %16, %12
  %183 = phi i32 [ %9, %16 ], [ %9, %12 ], [ %156, %155 ], [ %114, %113 ], [ %57, %56 ], [ %177, %176 ], [ %179, %178 ], [ %181, %180 ]
  %184 = phi i16* [ %2, %16 ], [ %2, %12 ], [ %157, %155 ], [ %115, %113 ], [ %58, %56 ], [ %173, %176 ], [ %135, %178 ], [ %78, %180 ]
  %185 = phi i16* [ %0, %16 ], [ %0, %12 ], [ %158, %155 ], [ %116, %113 ], [ %59, %56 ], [ %172, %176 ], [ %134, %178 ], [ %77, %180 ]
  %186 = icmp eq i32 %183, 0
  br i1 %186, label %188, label %187

187:                                              ; preds = %182
  tail call void @vpx_highbd_convolve8_avg_vert_c(i16* %185, i64 %1, i16* %184, i64 %3, [8 x i16]* %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 %183, i32 %10, i32 %11) #6
  br label %188

188:                                              ; preds = %182, %187
  ret void
}

declare void @vpx_highbd_filter_block1d16_v8_avg_sse2(i16*, i64, i16*, i64, i32, i16*, i32) local_unnamed_addr #2

declare void @vpx_highbd_filter_block1d8_v8_avg_sse2(i16*, i64, i16*, i64, i32, i16*, i32) local_unnamed_addr #2

declare void @vpx_highbd_filter_block1d4_v8_avg_sse2(i16*, i64, i16*, i64, i32, i16*, i32) local_unnamed_addr #2

declare void @vpx_highbd_filter_block1d16_v2_avg_sse2(i16*, i64, i16*, i64, i32, i16*, i32) local_unnamed_addr #2

declare void @vpx_highbd_filter_block1d8_v2_avg_sse2(i16*, i64, i16*, i64, i32, i16*, i32) local_unnamed_addr #2

declare void @vpx_highbd_filter_block1d4_v2_avg_sse2(i16*, i64, i16*, i64, i32, i16*, i32) local_unnamed_addr #2

declare void @vpx_highbd_convolve8_avg_vert_c(i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_convolve8_sse2(i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #3 {
  %13 = alloca [4544 x i16], align 16
  %14 = alloca [4544 x i16], align 16
  %15 = alloca [4160 x i16], align 16
  %16 = sext i32 %5 to i64
  %17 = icmp eq i32 %6, 16
  %18 = icmp eq i32 %8, 16
  %19 = and i1 %17, %18
  br i1 %19, label %20, label %62

20:                                               ; preds = %12
  %21 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %16, i64 0
  %22 = load i16, i16* %21, align 2
  %23 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %16, i64 1
  %24 = load i16, i16* %23, align 2
  %25 = or i16 %24, %22
  %26 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %16, i64 6
  %27 = load i16, i16* %26, align 2
  %28 = or i16 %25, %27
  %29 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %16, i64 7
  %30 = load i16, i16* %29, align 2
  %31 = or i16 %28, %30
  %32 = icmp eq i16 %31, 0
  br i1 %32, label %33, label %37

33:                                               ; preds = %20
  %34 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %16, i64 3
  %35 = load i16, i16* %34, align 2
  %36 = icmp eq i16 %35, 128
  br i1 %36, label %37, label %44

37:                                               ; preds = %20, %33
  %38 = bitcast [4544 x i16]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 9088, i8* nonnull %38) #6
  %39 = mul i64 %1, -3
  %40 = getelementptr inbounds i16, i16* %0, i64 %39
  %41 = getelementptr inbounds [4544 x i16], [4544 x i16]* %13, i64 0, i64 0
  %42 = add nsw i32 %10, 7
  call void @vpx_highbd_convolve8_horiz_sse2(i16* %40, i64 %1, i16* nonnull %41, i64 64, [8 x i16]* %4, i32 %5, i32 16, i32 %7, i32 16, i32 %9, i32 %42, i32 %11)
  %43 = getelementptr inbounds [4544 x i16], [4544 x i16]* %13, i64 0, i64 192
  call void @vpx_highbd_convolve8_vert_sse2(i16* %43, i64 64, i16* %2, i64 %3, [8 x i16]* %4, i32 %5, i32 16, i32 %7, i32 16, i32 %9, i32 %10, i32 %11)
  call void @llvm.lifetime.end.p0i8(i64 9088, i8* nonnull %38) #6
  br label %63

44:                                               ; preds = %33
  %45 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %16, i64 2
  %46 = load i16, i16* %45, align 2
  %47 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %16, i64 5
  %48 = load i16, i16* %47, align 2
  %49 = or i16 %48, %46
  %50 = icmp eq i16 %49, 0
  br i1 %50, label %58, label %51

51:                                               ; preds = %44
  %52 = bitcast [4544 x i16]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 9088, i8* nonnull %52) #6
  %53 = sub i64 0, %1
  %54 = getelementptr inbounds i16, i16* %0, i64 %53
  %55 = getelementptr inbounds [4544 x i16], [4544 x i16]* %14, i64 0, i64 0
  %56 = add nsw i32 %10, 3
  call void @vpx_highbd_convolve8_horiz_sse2(i16* %54, i64 %1, i16* nonnull %55, i64 64, [8 x i16]* %4, i32 %5, i32 16, i32 %7, i32 16, i32 %9, i32 %56, i32 %11)
  %57 = getelementptr inbounds [4544 x i16], [4544 x i16]* %14, i64 0, i64 64
  call void @vpx_highbd_convolve8_vert_sse2(i16* %57, i64 64, i16* %2, i64 %3, [8 x i16]* %4, i32 %5, i32 16, i32 %7, i32 16, i32 %9, i32 %10, i32 %11)
  call void @llvm.lifetime.end.p0i8(i64 9088, i8* nonnull %52) #6
  br label %63

58:                                               ; preds = %44
  %59 = bitcast [4160 x i16]* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8320, i8* nonnull %59) #6
  %60 = getelementptr inbounds [4160 x i16], [4160 x i16]* %15, i64 0, i64 0
  %61 = add nsw i32 %10, 1
  call void @vpx_highbd_convolve8_horiz_sse2(i16* %0, i64 %1, i16* nonnull %60, i64 64, [8 x i16]* %4, i32 %5, i32 16, i32 %7, i32 16, i32 %9, i32 %61, i32 %11)
  call void @vpx_highbd_convolve8_vert_sse2(i16* nonnull %60, i64 64, i16* %2, i64 %3, [8 x i16]* %4, i32 %5, i32 16, i32 %7, i32 16, i32 %9, i32 %10, i32 %11)
  call void @llvm.lifetime.end.p0i8(i64 8320, i8* nonnull %59) #6
  br label %63

62:                                               ; preds = %12
  tail call void @vpx_highbd_convolve8_c(i16* %0, i64 %1, i16* %2, i64 %3, [8 x i16]* %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11) #6
  br label %63

63:                                               ; preds = %37, %58, %51, %62
  ret void
}

declare void @vpx_highbd_convolve8_c(i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_convolve8_avg_sse2(i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #3 {
  %13 = alloca [4544 x i16], align 16
  %14 = alloca [4544 x i16], align 16
  %15 = alloca [4160 x i16], align 16
  %16 = sext i32 %5 to i64
  %17 = icmp eq i32 %6, 16
  %18 = icmp eq i32 %8, 16
  %19 = and i1 %17, %18
  br i1 %19, label %20, label %62

20:                                               ; preds = %12
  %21 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %16, i64 0
  %22 = load i16, i16* %21, align 2
  %23 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %16, i64 1
  %24 = load i16, i16* %23, align 2
  %25 = or i16 %24, %22
  %26 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %16, i64 6
  %27 = load i16, i16* %26, align 2
  %28 = or i16 %25, %27
  %29 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %16, i64 7
  %30 = load i16, i16* %29, align 2
  %31 = or i16 %28, %30
  %32 = icmp eq i16 %31, 0
  br i1 %32, label %33, label %37

33:                                               ; preds = %20
  %34 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %16, i64 3
  %35 = load i16, i16* %34, align 2
  %36 = icmp eq i16 %35, 128
  br i1 %36, label %37, label %44

37:                                               ; preds = %20, %33
  %38 = bitcast [4544 x i16]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 9088, i8* nonnull %38) #6
  %39 = mul i64 %1, -3
  %40 = getelementptr inbounds i16, i16* %0, i64 %39
  %41 = getelementptr inbounds [4544 x i16], [4544 x i16]* %13, i64 0, i64 0
  %42 = add nsw i32 %10, 7
  call void @vpx_highbd_convolve8_horiz_sse2(i16* %40, i64 %1, i16* nonnull %41, i64 64, [8 x i16]* %4, i32 %5, i32 16, i32 %7, i32 16, i32 %9, i32 %42, i32 %11)
  %43 = getelementptr inbounds [4544 x i16], [4544 x i16]* %13, i64 0, i64 192
  call void @vpx_highbd_convolve8_avg_vert_sse2(i16* %43, i64 64, i16* %2, i64 %3, [8 x i16]* %4, i32 %5, i32 16, i32 %7, i32 16, i32 %9, i32 %10, i32 %11)
  call void @llvm.lifetime.end.p0i8(i64 9088, i8* nonnull %38) #6
  br label %63

44:                                               ; preds = %33
  %45 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %16, i64 2
  %46 = load i16, i16* %45, align 2
  %47 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %16, i64 5
  %48 = load i16, i16* %47, align 2
  %49 = or i16 %48, %46
  %50 = icmp eq i16 %49, 0
  br i1 %50, label %58, label %51

51:                                               ; preds = %44
  %52 = bitcast [4544 x i16]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 9088, i8* nonnull %52) #6
  %53 = mul i64 %1, -3
  %54 = getelementptr inbounds i16, i16* %0, i64 %53
  %55 = getelementptr inbounds [4544 x i16], [4544 x i16]* %14, i64 0, i64 0
  %56 = add nsw i32 %10, 7
  call void @vpx_highbd_convolve8_horiz_sse2(i16* %54, i64 %1, i16* nonnull %55, i64 64, [8 x i16]* %4, i32 %5, i32 16, i32 %7, i32 16, i32 %9, i32 %56, i32 %11)
  %57 = getelementptr inbounds [4544 x i16], [4544 x i16]* %14, i64 0, i64 192
  call void @vpx_highbd_convolve8_avg_vert_sse2(i16* %57, i64 64, i16* %2, i64 %3, [8 x i16]* %4, i32 %5, i32 16, i32 %7, i32 16, i32 %9, i32 %10, i32 %11)
  call void @llvm.lifetime.end.p0i8(i64 9088, i8* nonnull %52) #6
  br label %63

58:                                               ; preds = %44
  %59 = bitcast [4160 x i16]* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8320, i8* nonnull %59) #6
  %60 = getelementptr inbounds [4160 x i16], [4160 x i16]* %15, i64 0, i64 0
  %61 = add nsw i32 %10, 1
  call void @vpx_highbd_convolve8_horiz_sse2(i16* %0, i64 %1, i16* nonnull %60, i64 64, [8 x i16]* %4, i32 %5, i32 16, i32 %7, i32 16, i32 %9, i32 %61, i32 %11)
  call void @vpx_highbd_convolve8_avg_vert_sse2(i16* nonnull %60, i64 64, i16* %2, i64 %3, [8 x i16]* %4, i32 %5, i32 16, i32 %7, i32 16, i32 %9, i32 %10, i32 %11)
  call void @llvm.lifetime.end.p0i8(i64 8320, i8* nonnull %59) #6
  br label %63

62:                                               ; preds = %12
  tail call void @vpx_highbd_convolve8_avg_c(i16* %0, i64 %1, i16* %2, i64 %3, [8 x i16]* %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11) #6
  br label %63

63:                                               ; preds = %37, %58, %51, %62
  ret void
}

declare void @vpx_highbd_convolve8_avg_c(i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16>, <8 x i16>) #4

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #4

; Function Attrs: nounwind readnone speculatable
declare <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16>, <8 x i16>) #5

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
