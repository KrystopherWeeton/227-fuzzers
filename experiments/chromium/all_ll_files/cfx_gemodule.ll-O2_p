; ModuleID = '../../third_party/pdfium/core/fxge/cfx_gemodule.cpp'
source_filename = "../../third_party/pdfium/core/fxge/cfx_gemodule.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CFX_GEModule = type { %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.77", i8** }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.CFX_GEModule::PlatformIface"* }
%"class.CFX_GEModule::PlatformIface" = type { i32 (...)** }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %class.CFX_FontMgr* }
%class.CFX_FontMgr = type <{ %"class.std::__1::unique_ptr.4", %"class.std::__1::unique_ptr.8", %"class.std::__1::map", i8, [7 x i8] }>
%"class.std::__1::unique_ptr.4" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %struct.FT_LibraryRec_* }
%struct.FT_LibraryRec_ = type opaque
%"class.std::__1::unique_ptr.8" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %class.CFX_FontMapper* }
%class.CFX_FontMapper = type { i8, %"class.fxcrt::ByteString", %"class.std::__1::vector", %"class.std::__1::unique_ptr.18", %"class.fxcrt::UnownedPtr", %"class.std::__1::vector.24", %"class.std::__1::vector.31", [2 x %"class.fxcrt::RetainPtr.38"], [14 x %"class.fxcrt::RetainPtr.38"] }
%"class.fxcrt::ByteString" = type { %"class.fxcrt::RetainPtr" }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr.11" }
%"class.std::__1::unique_ptr.11" = type { %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"class.fxcrt::StringDataTemplate"* }
%"class.fxcrt::StringDataTemplate" = type <{ i64, i64, i64, [1 x i8], [7 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.CFX_FontMapper::FaceData"*, %"struct.CFX_FontMapper::FaceData"*, %"class.std::__1::__compressed_pair.15" }
%"struct.CFX_FontMapper::FaceData" = type <{ %"class.fxcrt::ByteString", i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"struct.CFX_FontMapper::FaceData"* }
%"class.std::__1::unique_ptr.18" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %class.SystemFontInfoIface* }
%class.SystemFontInfoIface = type { i32 (...)** }
%"class.fxcrt::UnownedPtr" = type { %class.CFX_FontMgr* }
%"class.std::__1::vector.24" = type { %"class.std::__1::__vector_base.25" }
%"class.std::__1::__vector_base.25" = type { %"class.fxcrt::ByteString"*, %"class.fxcrt::ByteString"*, %"class.std::__1::__compressed_pair.26" }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"class.fxcrt::ByteString"* }
%"class.std::__1::vector.31" = type { %"class.std::__1::__vector_base.32" }
%"class.std::__1::__vector_base.32" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.33" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %"struct.std::__1::pair"* }
%"class.fxcrt::RetainPtr.38" = type { %"class.std::__1::unique_ptr.39" }
%"class.std::__1::unique_ptr.39" = type { %"class.std::__1::__compressed_pair.40" }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %class.CFX_Face* }
%class.CFX_Face = type { %"class.fxcrt::Retainable", %"class.fxcrt::Observable", %"class.std::__1::unique_ptr.50", %"class.fxcrt::RetainPtr.54" }
%"class.fxcrt::Retainable" = type { i32 (...)**, i64 }
%"class.fxcrt::Observable" = type { %"class.std::__1::set" }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.42", %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { i64 }
%"class.std::__1::unique_ptr.50" = type { %"class.std::__1::__compressed_pair.51" }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { %struct.FT_FaceRec_* }
%struct.FT_FaceRec_ = type { i64, i64, i64, i64, i64, i8*, i8*, i32, %struct.FT_Bitmap_Size_*, i32, %struct.FT_CharMapRec_**, %struct.FT_Generic_, %struct.FT_BBox_, i16, i16, i16, i16, i16, i16, i16, i16, %struct.FT_GlyphSlotRec_*, %struct.FT_SizeRec_*, %struct.FT_CharMapRec_*, %struct.FT_DriverRec_*, %struct.FT_MemoryRec_*, %struct.FT_StreamRec_*, %struct.FT_ListRec_, %struct.FT_Generic_, i8*, %struct.FT_Face_InternalRec_* }
%struct.FT_Bitmap_Size_ = type { i16, i16, i64, i64, i64 }
%struct.FT_BBox_ = type { i64, i64, i64, i64 }
%struct.FT_GlyphSlotRec_ = type { %struct.FT_LibraryRec_*, %struct.FT_FaceRec_*, %struct.FT_GlyphSlotRec_*, i32, %struct.FT_Generic_, %struct.FT_Glyph_Metrics_, i64, i64, %struct.FT_Vector_, i32, %struct.FT_Bitmap_, i32, i32, %struct.FT_Outline_, i32, %struct.FT_SubGlyphRec_*, i8*, i64, i64, i64, i8*, %struct.FT_Slot_InternalRec_* }
%struct.FT_Glyph_Metrics_ = type { i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.FT_Vector_ = type { i64, i64 }
%struct.FT_Bitmap_ = type { i32, i32, i32, i8*, i16, i8, i8, i8* }
%struct.FT_Outline_ = type { i16, i16, %struct.FT_Vector_*, i8*, i16*, i32 }
%struct.FT_SubGlyphRec_ = type opaque
%struct.FT_Slot_InternalRec_ = type opaque
%struct.FT_SizeRec_ = type { %struct.FT_FaceRec_*, %struct.FT_Generic_, %struct.FT_Size_Metrics_, %struct.FT_Size_InternalRec_* }
%struct.FT_Size_Metrics_ = type { i16, i16, i64, i64, i64, i64, i64, i64 }
%struct.FT_Size_InternalRec_ = type opaque
%struct.FT_CharMapRec_ = type { %struct.FT_FaceRec_*, i32, i16, i16 }
%struct.FT_DriverRec_ = type opaque
%struct.FT_MemoryRec_ = type { i8*, i8* (%struct.FT_MemoryRec_*, i64)*, void (%struct.FT_MemoryRec_*, i8*)*, i8* (%struct.FT_MemoryRec_*, i64, i64, i8*)* }
%struct.FT_StreamRec_ = type { i8*, i64, i64, %union.FT_StreamDesc_, %union.FT_StreamDesc_, i64 (%struct.FT_StreamRec_*, i64, i8*, i64)*, void (%struct.FT_StreamRec_*)*, %struct.FT_MemoryRec_*, i8*, i8* }
%union.FT_StreamDesc_ = type { i64 }
%struct.FT_ListRec_ = type { %struct.FT_ListNodeRec_*, %struct.FT_ListNodeRec_* }
%struct.FT_ListNodeRec_ = type { %struct.FT_ListNodeRec_*, %struct.FT_ListNodeRec_*, i8* }
%struct.FT_Generic_ = type { i8*, void (i8*)* }
%struct.FT_Face_InternalRec_ = type opaque
%"class.fxcrt::RetainPtr.54" = type { %"class.std::__1::unique_ptr.55" }
%"class.std::__1::unique_ptr.55" = type { %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { %"class.fxcrt::Retainable"* }
%"class.std::__1::map" = type { %"class.std::__1::__tree.65" }
%"class.std::__1::__tree.65" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.66", %"class.std::__1::__compressed_pair.70" }
%"class.std::__1::__compressed_pair.66" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"class.std::__1::__compressed_pair.70" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"class.std::__1::unique_ptr.77" = type { %"class.std::__1::__compressed_pair.78" }
%"class.std::__1::__compressed_pair.78" = type { %"struct.std::__1::__compressed_pair_elem.79" }
%"struct.std::__1::__compressed_pair_elem.79" = type { %class.CFX_FontCache* }
%class.CFX_FontCache = type { %"class.std::__1::map.80", %"class.std::__1::map.80" }
%"class.std::__1::map.80" = type { %"class.std::__1::__tree.81" }
%"class.std::__1::__tree.81" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.82", %"class.std::__1::__compressed_pair.86" }
%"class.std::__1::__compressed_pair.82" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.48" }

@_ZN12_GLOBAL__N_111g_pGEModuleE = internal unnamed_addr global %class.CFX_GEModule* null, align 8

@_ZN12CFX_GEModuleC1EPPKc = hidden unnamed_addr alias void (%class.CFX_GEModule*, i8**), void (%class.CFX_GEModule*, i8**)* @_ZN12CFX_GEModuleC2EPPKc
@_ZN12CFX_GEModuleD1Ev = hidden unnamed_addr alias void (%class.CFX_GEModule*), void (%class.CFX_GEModule*)* @_ZN12CFX_GEModuleD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CFX_GEModuleC2EPPKc(%class.CFX_GEModule* nocapture, i8**) unnamed_addr #0 align 2 {
  %3 = tail call %"class.CFX_GEModule::PlatformIface"* @_ZN12CFX_GEModule13PlatformIface6CreateEv() #6
  %4 = getelementptr inbounds %class.CFX_GEModule, %class.CFX_GEModule* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.CFX_GEModule::PlatformIface"* %3, %"class.CFX_GEModule::PlatformIface"** %4, align 8
  %5 = tail call i8* @_Znwm(i64 48) #7
  %6 = bitcast i8* %5 to %class.CFX_FontMgr*
  tail call void @_ZN11CFX_FontMgrC1Ev(%class.CFX_FontMgr* nonnull %6) #6
  %7 = getelementptr inbounds %class.CFX_GEModule, %class.CFX_GEModule* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %8 = bitcast %class.CFX_FontMgr** %7 to i8**
  store i8* %5, i8** %8, align 8
  %9 = tail call i8* @_Znwm(i64 48) #7
  %10 = bitcast i8* %9 to %class.CFX_FontCache*
  tail call void @_ZN13CFX_FontCacheC1Ev(%class.CFX_FontCache* nonnull %10) #6
  %11 = getelementptr inbounds %class.CFX_GEModule, %class.CFX_GEModule* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %12 = bitcast %class.CFX_FontCache** %11 to i8**
  store i8* %9, i8** %12, align 8
  %13 = getelementptr inbounds %class.CFX_GEModule, %class.CFX_GEModule* %0, i64 0, i32 3
  store i8** %1, i8*** %13, align 8
  ret void
}

declare %"class.CFX_GEModule::PlatformIface"* @_ZN12CFX_GEModule13PlatformIface6CreateEv() local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CFX_GEModuleD2Ev(%class.CFX_GEModule* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_GEModule, %class.CFX_GEModule* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %3 = load %class.CFX_FontCache*, %class.CFX_FontCache** %2, align 8
  store %class.CFX_FontCache* null, %class.CFX_FontCache** %2, align 8
  %4 = icmp eq %class.CFX_FontCache* %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  tail call void @_ZN13CFX_FontCacheD1Ev(%class.CFX_FontCache* nonnull %3) #6
  %6 = bitcast %class.CFX_FontCache* %3 to i8*
  tail call void @_ZdlPv(i8* %6) #7
  br label %7

7:                                                ; preds = %1, %5
  %8 = getelementptr inbounds %class.CFX_GEModule, %class.CFX_GEModule* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %9 = load %class.CFX_FontMgr*, %class.CFX_FontMgr** %8, align 8
  store %class.CFX_FontMgr* null, %class.CFX_FontMgr** %8, align 8
  %10 = icmp eq %class.CFX_FontMgr* %9, null
  br i1 %10, label %13, label %11

11:                                               ; preds = %7
  tail call void @_ZN11CFX_FontMgrD1Ev(%class.CFX_FontMgr* nonnull %9) #6
  %12 = bitcast %class.CFX_FontMgr* %9 to i8*
  tail call void @_ZdlPv(i8* %12) #7
  br label %13

13:                                               ; preds = %7, %11
  %14 = getelementptr inbounds %class.CFX_GEModule, %class.CFX_GEModule* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %15 = load %"class.CFX_GEModule::PlatformIface"*, %"class.CFX_GEModule::PlatformIface"** %14, align 8
  store %"class.CFX_GEModule::PlatformIface"* null, %"class.CFX_GEModule::PlatformIface"** %14, align 8
  %16 = icmp eq %"class.CFX_GEModule::PlatformIface"* %15, null
  br i1 %16, label %22, label %17

17:                                               ; preds = %13
  %18 = bitcast %"class.CFX_GEModule::PlatformIface"* %15 to void (%"class.CFX_GEModule::PlatformIface"*)***
  %19 = load void (%"class.CFX_GEModule::PlatformIface"*)**, void (%"class.CFX_GEModule::PlatformIface"*)*** %18, align 8
  %20 = getelementptr inbounds void (%"class.CFX_GEModule::PlatformIface"*)*, void (%"class.CFX_GEModule::PlatformIface"*)** %19, i64 1
  %21 = load void (%"class.CFX_GEModule::PlatformIface"*)*, void (%"class.CFX_GEModule::PlatformIface"*)** %20, align 8
  tail call void %21(%"class.CFX_GEModule::PlatformIface"* nonnull %15) #6
  br label %22

22:                                               ; preds = %13, %17
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CFX_GEModule6CreateEPPKc(i8**) local_unnamed_addr #0 align 2 {
  %2 = tail call i8* @_Znwm(i64 32) #7
  %3 = tail call %"class.CFX_GEModule::PlatformIface"* @_ZN12CFX_GEModule13PlatformIface6CreateEv() #6
  %4 = bitcast i8* %2 to %"class.CFX_GEModule::PlatformIface"**
  store %"class.CFX_GEModule::PlatformIface"* %3, %"class.CFX_GEModule::PlatformIface"** %4, align 8
  %5 = tail call i8* @_Znwm(i64 48) #7
  %6 = bitcast i8* %5 to %class.CFX_FontMgr*
  tail call void @_ZN11CFX_FontMgrC1Ev(%class.CFX_FontMgr* nonnull %6) #6
  %7 = getelementptr inbounds i8, i8* %2, i64 8
  %8 = bitcast i8* %7 to i8**
  store i8* %5, i8** %8, align 8
  %9 = tail call i8* @_Znwm(i64 48) #7
  %10 = bitcast i8* %9 to %class.CFX_FontCache*
  tail call void @_ZN13CFX_FontCacheC1Ev(%class.CFX_FontCache* nonnull %10) #6
  %11 = getelementptr inbounds i8, i8* %2, i64 16
  %12 = bitcast i8* %11 to i8**
  store i8* %9, i8** %12, align 8
  %13 = getelementptr inbounds i8, i8* %2, i64 24
  %14 = bitcast i8* %13 to i8***
  store i8** %0, i8*** %14, align 8
  store i8* %2, i8** bitcast (%class.CFX_GEModule** @_ZN12_GLOBAL__N_111g_pGEModuleE to i8**), align 8
  %15 = bitcast %"class.CFX_GEModule::PlatformIface"* %3 to void (%"class.CFX_GEModule::PlatformIface"*)***
  %16 = load void (%"class.CFX_GEModule::PlatformIface"*)**, void (%"class.CFX_GEModule::PlatformIface"*)*** %15, align 8
  %17 = getelementptr inbounds void (%"class.CFX_GEModule::PlatformIface"*)*, void (%"class.CFX_GEModule::PlatformIface"*)** %16, i64 2
  %18 = load void (%"class.CFX_GEModule::PlatformIface"*)*, void (%"class.CFX_GEModule::PlatformIface"*)** %17, align 8
  tail call void %18(%"class.CFX_GEModule::PlatformIface"* %3) #6
  %19 = load %class.CFX_GEModule*, %class.CFX_GEModule** @_ZN12_GLOBAL__N_111g_pGEModuleE, align 8
  %20 = getelementptr inbounds %class.CFX_GEModule, %class.CFX_GEModule* %19, i64 0, i32 1, i32 0, i32 0, i32 0
  %21 = load %class.CFX_FontMgr*, %class.CFX_FontMgr** %20, align 8
  %22 = getelementptr inbounds %class.CFX_GEModule, %class.CFX_GEModule* %19, i64 0, i32 0, i32 0, i32 0, i32 0
  %23 = load %"class.CFX_GEModule::PlatformIface"*, %"class.CFX_GEModule::PlatformIface"** %22, align 8
  %24 = bitcast %"class.CFX_GEModule::PlatformIface"* %23 to %class.SystemFontInfoIface* (%"class.CFX_GEModule::PlatformIface"*)***
  %25 = load %class.SystemFontInfoIface* (%"class.CFX_GEModule::PlatformIface"*)**, %class.SystemFontInfoIface* (%"class.CFX_GEModule::PlatformIface"*)*** %24, align 8
  %26 = getelementptr inbounds %class.SystemFontInfoIface* (%"class.CFX_GEModule::PlatformIface"*)*, %class.SystemFontInfoIface* (%"class.CFX_GEModule::PlatformIface"*)** %25, i64 3
  %27 = load %class.SystemFontInfoIface* (%"class.CFX_GEModule::PlatformIface"*)*, %class.SystemFontInfoIface* (%"class.CFX_GEModule::PlatformIface"*)** %26, align 8
  %28 = tail call %class.SystemFontInfoIface* %27(%"class.CFX_GEModule::PlatformIface"* %23) #6
  tail call void @_ZN11CFX_FontMgr17SetSystemFontInfoENSt3__110unique_ptrI19SystemFontInfoIfaceNS0_14default_deleteIS2_EEEE(%class.CFX_FontMgr* %21, %class.SystemFontInfoIface* %28) #6
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #2

declare void @_ZN11CFX_FontMgr17SetSystemFontInfoENSt3__110unique_ptrI19SystemFontInfoIfaceNS0_14default_deleteIS2_EEEE(%class.CFX_FontMgr*, %class.SystemFontInfoIface*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CFX_GEModule7DestroyEv() local_unnamed_addr #0 align 2 {
  %1 = load %class.CFX_GEModule*, %class.CFX_GEModule** @_ZN12_GLOBAL__N_111g_pGEModuleE, align 8
  %2 = icmp eq %class.CFX_GEModule* %1, null
  br i1 %2, label %26, label %3

3:                                                ; preds = %0
  %4 = getelementptr inbounds %class.CFX_GEModule, %class.CFX_GEModule* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %5 = load %class.CFX_FontCache*, %class.CFX_FontCache** %4, align 8
  store %class.CFX_FontCache* null, %class.CFX_FontCache** %4, align 8
  %6 = icmp eq %class.CFX_FontCache* %5, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  tail call void @_ZN13CFX_FontCacheD1Ev(%class.CFX_FontCache* nonnull %5) #6
  %8 = bitcast %class.CFX_FontCache* %5 to i8*
  tail call void @_ZdlPv(i8* %8) #7
  br label %9

9:                                                ; preds = %7, %3
  %10 = getelementptr inbounds %class.CFX_GEModule, %class.CFX_GEModule* %1, i64 0, i32 1, i32 0, i32 0, i32 0
  %11 = load %class.CFX_FontMgr*, %class.CFX_FontMgr** %10, align 8
  store %class.CFX_FontMgr* null, %class.CFX_FontMgr** %10, align 8
  %12 = icmp eq %class.CFX_FontMgr* %11, null
  br i1 %12, label %15, label %13

13:                                               ; preds = %9
  tail call void @_ZN11CFX_FontMgrD1Ev(%class.CFX_FontMgr* nonnull %11) #6
  %14 = bitcast %class.CFX_FontMgr* %11 to i8*
  tail call void @_ZdlPv(i8* %14) #7
  br label %15

15:                                               ; preds = %13, %9
  %16 = getelementptr inbounds %class.CFX_GEModule, %class.CFX_GEModule* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %17 = load %"class.CFX_GEModule::PlatformIface"*, %"class.CFX_GEModule::PlatformIface"** %16, align 8
  store %"class.CFX_GEModule::PlatformIface"* null, %"class.CFX_GEModule::PlatformIface"** %16, align 8
  %18 = icmp eq %"class.CFX_GEModule::PlatformIface"* %17, null
  br i1 %18, label %24, label %19

19:                                               ; preds = %15
  %20 = bitcast %"class.CFX_GEModule::PlatformIface"* %17 to void (%"class.CFX_GEModule::PlatformIface"*)***
  %21 = load void (%"class.CFX_GEModule::PlatformIface"*)**, void (%"class.CFX_GEModule::PlatformIface"*)*** %20, align 8
  %22 = getelementptr inbounds void (%"class.CFX_GEModule::PlatformIface"*)*, void (%"class.CFX_GEModule::PlatformIface"*)** %21, i64 1
  %23 = load void (%"class.CFX_GEModule::PlatformIface"*)*, void (%"class.CFX_GEModule::PlatformIface"*)** %22, align 8
  tail call void %23(%"class.CFX_GEModule::PlatformIface"* nonnull %17) #6
  br label %24

24:                                               ; preds = %15, %19
  %25 = bitcast %class.CFX_GEModule* %1 to i8*
  tail call void @_ZdlPv(i8* %25) #7
  br label %26

26:                                               ; preds = %24, %0
  store %class.CFX_GEModule* null, %class.CFX_GEModule** @_ZN12_GLOBAL__N_111g_pGEModuleE, align 8
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %class.CFX_GEModule* @_ZN12CFX_GEModule3GetEv() local_unnamed_addr #4 align 2 {
  %1 = load %class.CFX_GEModule*, %class.CFX_GEModule** @_ZN12_GLOBAL__N_111g_pGEModuleE, align 8
  ret %class.CFX_GEModule* %1
}

declare void @_ZN11CFX_FontMgrC1Ev(%class.CFX_FontMgr*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN11CFX_FontMgrD1Ev(%class.CFX_FontMgr*) unnamed_addr #5

declare void @_ZN13CFX_FontCacheC1Ev(%class.CFX_FontCache*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN13CFX_FontCacheD1Ev(%class.CFX_FontCache*) unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
