; ModuleID = '../../components/viz/common/viz_utils.cc'
source_filename = "../../components/viz/common/viz_utils.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%"class.gfx::QuadF" = type { %"class.gfx::PointF", %"class.gfx::PointF", %"class.gfx::PointF", %"class.gfx::PointF" }
%"class.gfx::PointF" = type { float, float }
%"class.gfx::RRectF" = type { %class.SkRRect }
%class.SkRRect = type { %struct.SkRect, [4 x %struct.SkPoint], i32 }
%struct.SkRect = type { float, float, float, float }
%struct.SkPoint = type { float, float }

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN3viz31PreferRGB565ResourcesForDisplayEv() local_unnamed_addr #0 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3viz15GetScaledRegionERKN3gfx4RectEPKNS0_5QuadFEPS4_(%"class.gfx::Rect"* nocapture readonly dereferenceable(16), %"class.gfx::QuadF"* readonly, %"class.gfx::QuadF"* nocapture) local_unnamed_addr #1 {
  %4 = icmp eq %"class.gfx::QuadF"* %1, null
  br i1 %4, label %77, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %1, i64 0, i32 0, i32 0
  %7 = load float, float* %6, align 4
  %8 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = sitofp i32 %9 to float
  %11 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = sitofp i32 %12 to float
  %14 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %1, i64 0, i32 0, i32 1
  %15 = load float, float* %14, align 4
  %16 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = sitofp i32 %17 to float
  %19 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = sitofp i32 %20 to float
  %22 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %1, i64 0, i32 1, i32 0
  %23 = load float, float* %22, align 4
  %24 = insertelement <2 x float> undef, float %7, i32 0
  %25 = insertelement <2 x float> %24, float %23, i32 1
  %26 = insertelement <2 x float> undef, float %10, i32 0
  %27 = shufflevector <2 x float> %26, <2 x float> undef, <2 x i32> zeroinitializer
  %28 = fsub <2 x float> %25, %27
  %29 = insertelement <2 x float> undef, float %13, i32 0
  %30 = shufflevector <2 x float> %29, <2 x float> undef, <2 x i32> zeroinitializer
  %31 = fdiv <2 x float> %28, %30
  %32 = fadd <2 x float> %31, <float -5.000000e-01, float -5.000000e-01>
  %33 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %1, i64 0, i32 1, i32 1
  %34 = load float, float* %33, align 4
  %35 = insertelement <2 x float> undef, float %15, i32 0
  %36 = insertelement <2 x float> %35, float %34, i32 1
  %37 = insertelement <2 x float> undef, float %18, i32 0
  %38 = shufflevector <2 x float> %37, <2 x float> undef, <2 x i32> zeroinitializer
  %39 = fsub <2 x float> %36, %38
  %40 = insertelement <2 x float> undef, float %21, i32 0
  %41 = shufflevector <2 x float> %40, <2 x float> undef, <2 x i32> zeroinitializer
  %42 = fdiv <2 x float> %39, %41
  %43 = fadd <2 x float> %42, <float -5.000000e-01, float -5.000000e-01>
  %44 = bitcast <2 x float> %32 to <2 x i32>
  %45 = bitcast <2 x float> %43 to <2 x i32>
  %46 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %1, i64 0, i32 2, i32 0
  %47 = load float, float* %46, align 4
  %48 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %1, i64 0, i32 2, i32 1
  %49 = load float, float* %48, align 4
  %50 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %1, i64 0, i32 3, i32 0
  %51 = load float, float* %50, align 4
  %52 = insertelement <2 x float> undef, float %47, i32 0
  %53 = insertelement <2 x float> %52, float %51, i32 1
  %54 = fsub <2 x float> %53, %27
  %55 = fdiv <2 x float> %54, %30
  %56 = fadd <2 x float> %55, <float -5.000000e-01, float -5.000000e-01>
  %57 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %1, i64 0, i32 3, i32 1
  %58 = load float, float* %57, align 4
  %59 = insertelement <2 x float> undef, float %49, i32 0
  %60 = insertelement <2 x float> %59, float %58, i32 1
  %61 = fsub <2 x float> %60, %38
  %62 = fdiv <2 x float> %61, %41
  %63 = fadd <2 x float> %62, <float -5.000000e-01, float -5.000000e-01>
  %64 = bitcast <2 x float> %56 to <2 x i32>
  %65 = bitcast <2 x float> %63 to <2 x i32>
  %66 = zext <2 x i32> %45 to <2 x i64>
  %67 = shl nuw <2 x i64> %66, <i64 32, i64 32>
  %68 = zext <2 x i32> %44 to <2 x i64>
  %69 = or <2 x i64> %67, %68
  %70 = bitcast %"class.gfx::QuadF"* %2 to <2 x i64>*
  store <2 x i64> %69, <2 x i64>* %70, align 4
  %71 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %2, i64 0, i32 2
  %72 = zext <2 x i32> %65 to <2 x i64>
  %73 = shl nuw <2 x i64> %72, <i64 32, i64 32>
  %74 = zext <2 x i32> %64 to <2 x i64>
  %75 = or <2 x i64> %73, %74
  %76 = bitcast %"class.gfx::PointF"* %71 to <2 x i64>*
  store <2 x i64> %75, <2 x i64>* %76, align 4
  br label %77

77:                                               ; preds = %3, %5
  %78 = phi i1 [ true, %5 ], [ false, %3 ]
  ret i1 %78
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3viz15GetScaledRRectFERKN3gfx4RectERKNS0_6RRectFEPS4_(%"class.gfx::Rect"* nocapture readonly dereferenceable(16), %"class.gfx::RRectF"* dereferenceable(52), %"class.gfx::RRectF"*) local_unnamed_addr #1 {
  %4 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = sitofp i32 %5 to float
  %7 = fdiv float 1.000000e+00, %6
  %8 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = sitofp i32 %9 to float
  %11 = fdiv float 1.000000e+00, %10
  %12 = getelementptr inbounds %"class.gfx::RRectF", %"class.gfx::RRectF"* %1, i64 0, i32 0, i32 0
  %13 = tail call { <2 x float>, <2 x float> } @_ZN3gfx13SkRectToRectFERK6SkRect(%struct.SkRect* dereferenceable(16) %12) #5
  %14 = extractvalue { <2 x float>, <2 x float> } %13, 0
  %15 = extractelement <2 x float> %14, i32 0
  %16 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = sitofp i32 %17 to float
  %19 = fsub float %15, %18
  %20 = fmul float %7, %19
  %21 = fadd float %20, -5.000000e-01
  %22 = tail call { <2 x float>, <2 x float> } @_ZN3gfx13SkRectToRectFERK6SkRect(%struct.SkRect* dereferenceable(16) %12) #5
  %23 = extractvalue { <2 x float>, <2 x float> } %22, 0
  %24 = extractelement <2 x float> %23, i32 1
  %25 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = sitofp i32 %26 to float
  %28 = fsub float %24, %27
  %29 = fmul float %11, %28
  %30 = fadd float %29, -5.000000e-01
  %31 = bitcast %"class.gfx::RRectF"* %2 to i8*
  %32 = bitcast %"class.gfx::RRectF"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %31, i8* align 4 %32, i64 52, i1 false)
  tail call void @_ZN3gfx6RRectF5ScaleEff(%"class.gfx::RRectF"* %2, float %7, float %11) #5
  %33 = getelementptr inbounds %"class.gfx::RRectF", %"class.gfx::RRectF"* %2, i64 0, i32 0, i32 0
  %34 = tail call { <2 x float>, <2 x float> } @_ZN3gfx13SkRectToRectFERK6SkRect(%struct.SkRect* dereferenceable(16) %33) #5
  %35 = extractvalue { <2 x float>, <2 x float> } %34, 0
  %36 = extractelement <2 x float> %35, i32 0
  %37 = fsub float -0.000000e+00, %36
  %38 = tail call { <2 x float>, <2 x float> } @_ZN3gfx13SkRectToRectFERK6SkRect(%struct.SkRect* dereferenceable(16) %33) #5
  %39 = extractvalue { <2 x float>, <2 x float> } %38, 0
  %40 = extractelement <2 x float> %39, i32 1
  %41 = fsub float -0.000000e+00, %40
  tail call void @_ZN3gfx6RRectF6OffsetEff(%"class.gfx::RRectF"* %2, float %37, float %41) #5
  tail call void @_ZN3gfx6RRectF6OffsetEff(%"class.gfx::RRectF"* %2, float %21, float %30) #5
  ret i1 true
}

declare void @_ZN3gfx6RRectF5ScaleEff(%"class.gfx::RRectF"*, float, float) local_unnamed_addr #3

declare void @_ZN3gfx6RRectF6OffsetEff(%"class.gfx::RRectF"*, float, float) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN3viz12GetScaledUVsERKN3gfx4RectEPKNS0_5QuadFEPf(%"class.gfx::Rect"* nocapture readonly dereferenceable(16), %"class.gfx::QuadF"* readonly, float* nocapture) local_unnamed_addr #4 {
  %4 = icmp eq %"class.gfx::QuadF"* %1, null
  br i1 %4, label %81, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %1, i64 0, i32 0, i32 0
  %7 = load float, float* %6, align 4
  %8 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = sitofp i32 %9 to float
  %11 = fsub float %7, %10
  %12 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = sitofp i32 %13 to float
  %15 = fdiv float %11, %14
  store float %15, float* %2, align 4
  %16 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %1, i64 0, i32 0, i32 1
  %17 = load float, float* %16, align 4
  %18 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = sitofp i32 %19 to float
  %21 = fsub float %17, %20
  %22 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %0, i64 0, i32 1, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %21, %24
  %26 = getelementptr inbounds float, float* %2, i64 1
  store float %25, float* %26, align 4
  %27 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %1, i64 0, i32 1, i32 0
  %28 = load float, float* %27, align 4
  %29 = load i32, i32* %8, align 4
  %30 = sitofp i32 %29 to float
  %31 = fsub float %28, %30
  %32 = load i32, i32* %12, align 4
  %33 = sitofp i32 %32 to float
  %34 = fdiv float %31, %33
  %35 = getelementptr inbounds float, float* %2, i64 2
  store float %34, float* %35, align 4
  %36 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %1, i64 0, i32 1, i32 1
  %37 = load float, float* %36, align 4
  %38 = load i32, i32* %18, align 4
  %39 = sitofp i32 %38 to float
  %40 = fsub float %37, %39
  %41 = load i32, i32* %22, align 4
  %42 = sitofp i32 %41 to float
  %43 = fdiv float %40, %42
  %44 = getelementptr inbounds float, float* %2, i64 3
  store float %43, float* %44, align 4
  %45 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %1, i64 0, i32 2, i32 0
  %46 = load float, float* %45, align 4
  %47 = load i32, i32* %8, align 4
  %48 = sitofp i32 %47 to float
  %49 = fsub float %46, %48
  %50 = load i32, i32* %12, align 4
  %51 = sitofp i32 %50 to float
  %52 = fdiv float %49, %51
  %53 = getelementptr inbounds float, float* %2, i64 4
  store float %52, float* %53, align 4
  %54 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %1, i64 0, i32 2, i32 1
  %55 = load float, float* %54, align 4
  %56 = load i32, i32* %18, align 4
  %57 = sitofp i32 %56 to float
  %58 = fsub float %55, %57
  %59 = load i32, i32* %22, align 4
  %60 = sitofp i32 %59 to float
  %61 = fdiv float %58, %60
  %62 = getelementptr inbounds float, float* %2, i64 5
  store float %61, float* %62, align 4
  %63 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %1, i64 0, i32 3, i32 0
  %64 = load float, float* %63, align 4
  %65 = load i32, i32* %8, align 4
  %66 = sitofp i32 %65 to float
  %67 = fsub float %64, %66
  %68 = load i32, i32* %12, align 4
  %69 = sitofp i32 %68 to float
  %70 = fdiv float %67, %69
  %71 = getelementptr inbounds float, float* %2, i64 6
  store float %70, float* %71, align 4
  %72 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %1, i64 0, i32 3, i32 1
  %73 = load float, float* %72, align 4
  %74 = load i32, i32* %18, align 4
  %75 = sitofp i32 %74 to float
  %76 = fsub float %73, %75
  %77 = load i32, i32* %22, align 4
  %78 = sitofp i32 %77 to float
  %79 = fdiv float %76, %78
  %80 = getelementptr inbounds float, float* %2, i64 7
  store float %79, float* %80, align 4
  br label %81

81:                                               ; preds = %3, %5
  %82 = phi i1 [ true, %5 ], [ false, %3 ]
  ret i1 %82
}

declare { <2 x float>, <2 x float> } @_ZN3gfx13SkRectToRectFERK6SkRect(%struct.SkRect* dereferenceable(16)) local_unnamed_addr #3

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
