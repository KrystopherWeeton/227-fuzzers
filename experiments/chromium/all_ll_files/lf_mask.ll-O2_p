; ModuleID = '../../third_party/dav1d/libdav1d/src/lf_mask.c'
source_filename = "../../third_party/dav1d/libdav1d/src/lf_mask.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TxfmInfo = type { i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Av1Filter = type { [2 x [32 x [3 x [2 x i16]]]], [2 x [32 x [2 x [2 x i16]]]], [4 x i8], [16 x [2 x i16]] }
%struct.Av1FilterLUT = type { [64 x i8], [64 x i8], [2 x i64] }
%struct.Dav1dFrameHeader = type { %struct.anon, i32, [2 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [32 x %struct.Dav1dFrameHeaderOperatingPoint], i32, i32, i32, %struct.anon.0, i32, i32, i32, [7 x i32], i32, i32, i32, i32, i32, %struct.anon.1, %struct.anon.2, %struct.anon.3, %struct.anon.4, i32, %struct.anon.7, %struct.anon.8, %struct.anon.9, i32, i32, i32, i32, [2 x i32], i32, i32, [7 x %struct.Dav1dWarpedMotionParams] }
%struct.anon = type { %struct.Dav1dFilmGrainData, i32, i32 }
%struct.Dav1dFilmGrainData = type { i32, i32, [14 x [2 x i8]], i32, [2 x i32], [2 x [10 x [2 x i8]]], i32, i32, [24 x i8], [2 x [28 x i8]], i64, i32, [2 x i32], [2 x i32], [2 x i32], i32, i32 }
%struct.Dav1dFrameHeaderOperatingPoint = type { i32 }
%struct.anon.0 = type { i32, i32 }
%struct.anon.1 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [65 x i16], [65 x i16], i32 }
%struct.anon.2 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.anon.3 = type { i32, i32, i32, i32, %struct.Dav1dSegmentationDataSet, [8 x i32], [8 x i32] }
%struct.Dav1dSegmentationDataSet = type { [8 x %struct.Dav1dSegmentationData], i32, i32 }
%struct.Dav1dSegmentationData = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.anon.4 = type { %struct.anon.5, %struct.anon.6 }
%struct.anon.5 = type { i32, i32 }
%struct.anon.6 = type { i32, i32, i32 }
%struct.anon.7 = type { [2 x i32], i32, i32, i32, i32, %struct.Dav1dLoopfilterModeRefDeltas, i32 }
%struct.Dav1dLoopfilterModeRefDeltas = type { [2 x i32], [8 x i32] }
%struct.anon.8 = type { i32, i32, [8 x i32], [8 x i32] }
%struct.anon.9 = type { [3 x i32], [2 x i32] }
%struct.Dav1dWarpedMotionParams = type { i32, [6 x i32], %union.anon }
%union.anon = type { %struct.anon.10 }
%struct.anon.10 = type { i16, i16, i16, i16 }

@dav1d_block_dimensions = external local_unnamed_addr constant [22 x [4 x i8]], align 16
@dav1d_txfm_dimensions = external local_unnamed_addr constant [19 x %struct.TxfmInfo], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @dav1d_create_lf_mask_intra(%struct.Av1Filter* nocapture, [4 x i8]* nocapture, i64, [8 x [2 x i8]]* nocapture readonly, i32, i32, i32, i32, i32, i32, i32, i32, i8* nocapture, i8* nocapture, i8*, i8* nocapture) local_unnamed_addr #0 {
  %17 = zext i32 %8 to i64
  %18 = getelementptr inbounds [22 x [4 x i8]], [22 x [4 x i8]]* @dav1d_block_dimensions, i64 0, i64 %17, i64 0
  %19 = sub nsw i32 %6, %4
  %20 = load i8, i8* %18, align 4
  %21 = zext i8 %20 to i32
  %22 = icmp slt i32 %19, %21
  %23 = select i1 %22, i32 %19, i32 %21
  %24 = sub nsw i32 %7, %5
  %25 = getelementptr inbounds [22 x [4 x i8]], [22 x [4 x i8]]* @dav1d_block_dimensions, i64 0, i64 %17, i64 1
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = icmp slt i32 %24, %27
  %29 = select i1 %28, i32 %24, i32 %27
  %30 = and i32 %4, 31
  %31 = and i32 %5, 31
  %32 = icmp ne i32 %23, 0
  %33 = icmp ne i32 %29, 0
  %34 = and i1 %32, %33
  br i1 %34, label %35, label %285

35:                                               ; preds = %16
  %36 = icmp sgt i32 %29, 0
  br i1 %36, label %37, label %55

37:                                               ; preds = %35
  %38 = sext i32 %5 to i64
  %39 = mul nsw i64 %38, %2
  %40 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 %39
  %41 = sext i32 %4 to i64
  %42 = getelementptr inbounds [4 x i8], [4 x i8]* %40, i64 %41
  %43 = icmp sgt i32 %23, 0
  %44 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* %3, i64 0, i64 0, i64 0
  %45 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* %3, i64 1, i64 0, i64 0
  %46 = sext i32 %23 to i64
  %47 = and i64 %46, 1
  %48 = icmp eq i32 %23, 1
  %49 = sub nsw i64 %46, %47
  %50 = icmp eq i64 %47, 0
  br label %51

51:                                               ; preds = %37, %266
  %52 = phi i32 [ 0, %37 ], [ %268, %266 ]
  %53 = phi [4 x i8]* [ %42, %37 ], [ %267, %266 ]
  br i1 %43, label %54, label %266

54:                                               ; preds = %51
  br i1 %48, label %259, label %270

55:                                               ; preds = %266, %35
  %56 = zext i32 %9 to i64
  %57 = getelementptr inbounds [19 x %struct.TxfmInfo], [19 x %struct.TxfmInfo]* @dav1d_txfm_dimensions, i64 0, i64 %56, i32 2
  %58 = load i8, i8* %57, align 2
  %59 = zext i8 %58 to i32
  %60 = getelementptr inbounds [19 x %struct.TxfmInfo], [19 x %struct.TxfmInfo]* @dav1d_txfm_dimensions, i64 0, i64 %56, i32 3
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = icmp ult i32 %59, 2
  %64 = select i1 %63, i32 %59, i32 2
  %65 = icmp ult i32 %62, 2
  %66 = select i1 %65, i32 %62, i32 2
  %67 = shl i32 1, %31
  br i1 %36, label %68, label %92

68:                                               ; preds = %55
  %69 = zext i32 %30 to i64
  %70 = zext i32 %29 to i64
  br label %71

71:                                               ; preds = %71, %68
  %72 = phi i64 [ 0, %68 ], [ %89, %71 ]
  %73 = phi i32 [ %67, %68 ], [ %90, %71 ]
  %74 = icmp ugt i32 %73, 65535
  %75 = zext i1 %74 to i32
  %76 = shl nuw nsw i32 %75, 4
  %77 = lshr i32 %73, %76
  %78 = getelementptr inbounds i8, i8* %13, i64 %72
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = icmp slt i32 %64, %80
  %82 = select i1 %81, i32 %64, i32 %80
  %83 = zext i32 %82 to i64
  %84 = zext i1 %74 to i64
  %85 = getelementptr inbounds %struct.Av1Filter, %struct.Av1Filter* %0, i64 0, i32 0, i64 0, i64 %69, i64 %83, i64 %84
  %86 = load i16, i16* %85, align 2
  %87 = trunc i32 %77 to i16
  %88 = or i16 %86, %87
  store i16 %88, i16* %85, align 2
  %89 = add nuw nsw i64 %72, 1
  %90 = shl i32 %73, 1
  %91 = icmp eq i64 %89, %70
  br i1 %91, label %92, label %71

92:                                               ; preds = %71, %55
  %93 = shl i32 1, %30
  %94 = icmp sgt i32 %23, 0
  br i1 %94, label %95, label %119

95:                                               ; preds = %92
  %96 = zext i32 %31 to i64
  %97 = zext i32 %23 to i64
  br label %98

98:                                               ; preds = %98, %95
  %99 = phi i64 [ 0, %95 ], [ %116, %98 ]
  %100 = phi i32 [ %93, %95 ], [ %117, %98 ]
  %101 = icmp ugt i32 %100, 65535
  %102 = zext i1 %101 to i32
  %103 = shl nuw nsw i32 %102, 4
  %104 = lshr i32 %100, %103
  %105 = getelementptr inbounds i8, i8* %12, i64 %99
  %106 = load i8, i8* %105, align 1
  %107 = zext i8 %106 to i32
  %108 = icmp slt i32 %66, %107
  %109 = select i1 %108, i32 %66, i32 %107
  %110 = zext i32 %109 to i64
  %111 = zext i1 %101 to i64
  %112 = getelementptr inbounds %struct.Av1Filter, %struct.Av1Filter* %0, i64 0, i32 0, i64 1, i64 %96, i64 %110, i64 %111
  %113 = load i16, i16* %112, align 2
  %114 = trunc i32 %104 to i16
  %115 = or i16 %113, %114
  store i16 %115, i16* %112, align 2
  %116 = add nuw nsw i64 %99, 1
  %117 = shl i32 %100, 1
  %118 = icmp eq i64 %116, %97
  br i1 %118, label %119, label %98

119:                                              ; preds = %98, %92
  %120 = getelementptr inbounds [19 x %struct.TxfmInfo], [19 x %struct.TxfmInfo]* @dav1d_txfm_dimensions, i64 0, i64 %56, i32 0
  %121 = load i8, i8* %120, align 8
  %122 = zext i8 %121 to i32
  %123 = zext i32 %67 to i64
  %124 = zext i32 %29 to i64
  %125 = shl i64 %123, %124
  %126 = trunc i64 %125 to i32
  %127 = sub i32 %126, %67
  %128 = lshr i32 %127, 16
  %129 = icmp sgt i32 %23, %122
  br i1 %129, label %130, label %156

130:                                              ; preds = %119
  %131 = and i32 %127, 65535
  %132 = icmp eq i32 %131, 0
  %133 = zext i32 %64 to i64
  %134 = trunc i32 %127 to i16
  %135 = icmp eq i32 %128, 0
  %136 = trunc i32 %128 to i16
  %137 = zext i8 %121 to i64
  %138 = sext i32 %23 to i64
  %139 = zext i32 %30 to i64
  br label %140

140:                                              ; preds = %153, %130
  %141 = phi i64 [ %137, %130 ], [ %154, %153 ]
  br i1 %132, label %147, label %142

142:                                              ; preds = %140
  %143 = add nuw nsw i64 %141, %139
  %144 = getelementptr inbounds %struct.Av1Filter, %struct.Av1Filter* %0, i64 0, i32 0, i64 0, i64 %143, i64 %133, i64 0
  %145 = load i16, i16* %144, align 2
  %146 = or i16 %145, %134
  store i16 %146, i16* %144, align 2
  br label %147

147:                                              ; preds = %142, %140
  br i1 %135, label %153, label %148

148:                                              ; preds = %147
  %149 = add nuw nsw i64 %141, %139
  %150 = getelementptr inbounds %struct.Av1Filter, %struct.Av1Filter* %0, i64 0, i32 0, i64 0, i64 %149, i64 %133, i64 1
  %151 = load i16, i16* %150, align 2
  %152 = or i16 %151, %136
  store i16 %152, i16* %150, align 2
  br label %153

153:                                              ; preds = %148, %147
  %154 = add nuw nsw i64 %141, %137
  %155 = icmp slt i64 %154, %138
  br i1 %155, label %140, label %156

156:                                              ; preds = %153, %119
  %157 = getelementptr inbounds [19 x %struct.TxfmInfo], [19 x %struct.TxfmInfo]* @dav1d_txfm_dimensions, i64 0, i64 %56, i32 1
  %158 = load i8, i8* %157, align 1
  %159 = zext i8 %158 to i32
  %160 = zext i32 %93 to i64
  %161 = zext i32 %23 to i64
  %162 = shl i64 %160, %161
  %163 = trunc i64 %162 to i32
  %164 = sub i32 %163, %93
  %165 = lshr i32 %164, 16
  %166 = icmp sgt i32 %29, %159
  br i1 %166, label %167, label %193

167:                                              ; preds = %156
  %168 = and i32 %164, 65535
  %169 = icmp eq i32 %168, 0
  %170 = zext i32 %66 to i64
  %171 = trunc i32 %164 to i16
  %172 = icmp eq i32 %165, 0
  %173 = trunc i32 %165 to i16
  %174 = zext i8 %158 to i64
  %175 = sext i32 %29 to i64
  %176 = zext i32 %31 to i64
  br label %177

177:                                              ; preds = %190, %167
  %178 = phi i64 [ %174, %167 ], [ %191, %190 ]
  br i1 %169, label %184, label %179

179:                                              ; preds = %177
  %180 = add nuw nsw i64 %178, %176
  %181 = getelementptr inbounds %struct.Av1Filter, %struct.Av1Filter* %0, i64 0, i32 0, i64 1, i64 %180, i64 %170, i64 0
  %182 = load i16, i16* %181, align 2
  %183 = or i16 %182, %171
  store i16 %183, i16* %181, align 2
  br label %184

184:                                              ; preds = %179, %177
  br i1 %172, label %190, label %185

185:                                              ; preds = %184
  %186 = add nuw nsw i64 %178, %176
  %187 = getelementptr inbounds %struct.Av1Filter, %struct.Av1Filter* %0, i64 0, i32 0, i64 1, i64 %186, i64 %170, i64 1
  %188 = load i16, i16* %187, align 2
  %189 = or i16 %188, %173
  store i16 %189, i16* %187, align 2
  br label %190

190:                                              ; preds = %185, %184
  %191 = add nuw nsw i64 %178, %174
  %192 = icmp slt i64 %191, %175
  br i1 %192, label %177, label %193

193:                                              ; preds = %190, %156
  switch i32 %23, label %223 [
    i32 1, label %194
    i32 2, label %196
    i32 4, label %200
    i32 8, label %203
    i32 16, label %207
    i32 32, label %213
  ]

194:                                              ; preds = %193
  %195 = trunc i32 %66 to i8
  store i8 %195, i8* %12, align 1
  br label %226

196:                                              ; preds = %193
  %197 = trunc i32 %66 to i16
  %198 = mul nuw nsw i16 %197, 257
  %199 = bitcast i8* %12 to i16*
  store i16 %198, i16* %199, align 2
  br label %226

200:                                              ; preds = %193
  %201 = mul nuw i32 %66, 16843009
  %202 = bitcast i8* %12 to i32*
  store i32 %201, i32* %202, align 4
  br label %226

203:                                              ; preds = %193
  %204 = zext i32 %66 to i64
  %205 = mul nuw nsw i64 %204, 72340172838076673
  %206 = bitcast i8* %12 to i64*
  store i64 %205, i64* %206, align 8
  br label %226

207:                                              ; preds = %193
  %208 = zext i32 %66 to i64
  %209 = mul nuw nsw i64 %208, 72340172838076673
  %210 = bitcast i8* %12 to i64*
  store i64 %209, i64* %210, align 8
  %211 = getelementptr inbounds i8, i8* %12, i64 8
  %212 = bitcast i8* %211 to i64*
  store i64 %209, i64* %212, align 8
  br label %226

213:                                              ; preds = %193
  %214 = zext i32 %66 to i64
  %215 = mul nuw nsw i64 %214, 72340172838076673
  %216 = bitcast i8* %12 to i64*
  store i64 %215, i64* %216, align 8
  %217 = getelementptr inbounds i8, i8* %12, i64 8
  %218 = bitcast i8* %217 to i64*
  store i64 %215, i64* %218, align 8
  %219 = getelementptr inbounds i8, i8* %12, i64 16
  %220 = bitcast i8* %219 to i64*
  store i64 %215, i64* %220, align 8
  %221 = getelementptr inbounds i8, i8* %12, i64 24
  %222 = bitcast i8* %221 to i64*
  store i64 %215, i64* %222, align 8
  br label %226

223:                                              ; preds = %193
  %224 = trunc i32 %66 to i8
  %225 = sext i32 %23 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 %224, i64 %225, i1 false) #5
  br label %226

226:                                              ; preds = %223, %213, %207, %203, %200, %196, %194
  switch i32 %29, label %256 [
    i32 1, label %227
    i32 2, label %229
    i32 4, label %233
    i32 8, label %236
    i32 16, label %240
    i32 32, label %246
  ]

227:                                              ; preds = %226
  %228 = trunc i32 %64 to i8
  store i8 %228, i8* %13, align 1
  br label %285

229:                                              ; preds = %226
  %230 = trunc i32 %64 to i16
  %231 = mul nuw nsw i16 %230, 257
  %232 = bitcast i8* %13 to i16*
  store i16 %231, i16* %232, align 2
  br label %285

233:                                              ; preds = %226
  %234 = mul nuw i32 %64, 16843009
  %235 = bitcast i8* %13 to i32*
  store i32 %234, i32* %235, align 4
  br label %285

236:                                              ; preds = %226
  %237 = zext i32 %64 to i64
  %238 = mul nuw nsw i64 %237, 72340172838076673
  %239 = bitcast i8* %13 to i64*
  store i64 %238, i64* %239, align 8
  br label %285

240:                                              ; preds = %226
  %241 = zext i32 %64 to i64
  %242 = mul nuw nsw i64 %241, 72340172838076673
  %243 = bitcast i8* %13 to i64*
  store i64 %242, i64* %243, align 8
  %244 = getelementptr inbounds i8, i8* %13, i64 8
  %245 = bitcast i8* %244 to i64*
  store i64 %242, i64* %245, align 8
  br label %285

246:                                              ; preds = %226
  %247 = zext i32 %64 to i64
  %248 = mul nuw nsw i64 %247, 72340172838076673
  %249 = bitcast i8* %13 to i64*
  store i64 %248, i64* %249, align 8
  %250 = getelementptr inbounds i8, i8* %13, i64 8
  %251 = bitcast i8* %250 to i64*
  store i64 %248, i64* %251, align 8
  %252 = getelementptr inbounds i8, i8* %13, i64 16
  %253 = bitcast i8* %252 to i64*
  store i64 %248, i64* %253, align 8
  %254 = getelementptr inbounds i8, i8* %13, i64 24
  %255 = bitcast i8* %254 to i64*
  store i64 %248, i64* %255, align 8
  br label %285

256:                                              ; preds = %226
  %257 = trunc i32 %64 to i8
  %258 = sext i32 %29 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %13, i8 %257, i64 %258, i1 false) #5
  br label %285

259:                                              ; preds = %270, %54
  %260 = phi i64 [ 0, %54 ], [ %282, %270 ]
  br i1 %50, label %266, label %261

261:                                              ; preds = %259
  %262 = load i8, i8* %44, align 1
  %263 = getelementptr inbounds [4 x i8], [4 x i8]* %53, i64 %260, i64 0
  store i8 %262, i8* %263, align 1
  %264 = load i8, i8* %45, align 1
  %265 = getelementptr inbounds [4 x i8], [4 x i8]* %53, i64 %260, i64 1
  store i8 %264, i8* %265, align 1
  br label %266

266:                                              ; preds = %261, %259, %51
  %267 = getelementptr inbounds [4 x i8], [4 x i8]* %53, i64 %2
  %268 = add nuw nsw i32 %52, 1
  %269 = icmp slt i32 %268, %29
  br i1 %269, label %51, label %55

270:                                              ; preds = %54, %270
  %271 = phi i64 [ %282, %270 ], [ 0, %54 ]
  %272 = phi i64 [ %283, %270 ], [ %49, %54 ]
  %273 = load i8, i8* %44, align 1
  %274 = getelementptr inbounds [4 x i8], [4 x i8]* %53, i64 %271, i64 0
  store i8 %273, i8* %274, align 1
  %275 = load i8, i8* %45, align 1
  %276 = getelementptr inbounds [4 x i8], [4 x i8]* %53, i64 %271, i64 1
  store i8 %275, i8* %276, align 1
  %277 = or i64 %271, 1
  %278 = load i8, i8* %44, align 1
  %279 = getelementptr inbounds [4 x i8], [4 x i8]* %53, i64 %277, i64 0
  store i8 %278, i8* %279, align 1
  %280 = load i8, i8* %45, align 1
  %281 = getelementptr inbounds [4 x i8], [4 x i8]* %53, i64 %277, i64 1
  store i8 %280, i8* %281, align 1
  %282 = add nuw nsw i64 %271, 2
  %283 = add i64 %272, -2
  %284 = icmp eq i64 %283, 0
  br i1 %284, label %259, label %270

285:                                              ; preds = %256, %246, %240, %236, %233, %229, %227, %16
  %286 = icmp eq i8* %14, null
  br i1 %286, label %361, label %287

287:                                              ; preds = %285
  %288 = icmp eq i32 %11, 1
  %289 = zext i1 %288 to i32
  %290 = icmp ne i32 %11, 3
  %291 = zext i1 %290 to i32
  %292 = add nsw i32 %291, %6
  %293 = ashr i32 %292, %291
  %294 = ashr i32 %4, %291
  %295 = sub nsw i32 %293, %294
  %296 = add nuw nsw i32 %21, %291
  %297 = lshr i32 %296, %291
  %298 = icmp slt i32 %295, %297
  %299 = select i1 %298, i32 %295, i32 %297
  %300 = add nsw i32 %289, %7
  %301 = ashr i32 %300, %289
  %302 = ashr i32 %5, %289
  %303 = sub nsw i32 %301, %302
  %304 = add nuw nsw i32 %27, %289
  %305 = lshr i32 %304, %289
  %306 = icmp slt i32 %303, %305
  %307 = select i1 %306, i32 %303, i32 %305
  %308 = icmp ne i32 %299, 0
  %309 = icmp ne i32 %307, 0
  %310 = and i1 %308, %309
  br i1 %310, label %311, label %361

311:                                              ; preds = %287
  %312 = lshr i32 %30, %291
  %313 = lshr i32 %31, %289
  %314 = icmp sgt i32 %307, 0
  br i1 %314, label %315, label %333

315:                                              ; preds = %311
  %316 = sext i32 %302 to i64
  %317 = mul nsw i64 %316, %2
  %318 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 %317
  %319 = sext i32 %294 to i64
  %320 = getelementptr inbounds [4 x i8], [4 x i8]* %318, i64 %319
  %321 = icmp sgt i32 %299, 0
  %322 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* %3, i64 2, i64 0, i64 0
  %323 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* %3, i64 3, i64 0, i64 0
  %324 = sext i32 %299 to i64
  %325 = and i64 %324, 1
  %326 = icmp eq i32 %299, 1
  %327 = sub nsw i64 %324, %325
  %328 = icmp eq i64 %325, 0
  br label %329

329:                                              ; preds = %315, %342
  %330 = phi i32 [ 0, %315 ], [ %344, %342 ]
  %331 = phi [4 x i8]* [ %320, %315 ], [ %343, %342 ]
  br i1 %321, label %332, label %342

332:                                              ; preds = %329
  br i1 %326, label %335, label %346

333:                                              ; preds = %342, %311
  %334 = getelementptr inbounds %struct.Av1Filter, %struct.Av1Filter* %0, i64 0, i32 1, i64 0
  tail call fastcc void @mask_edges_chroma([32 x [2 x [2 x i16]]]* %334, i32 %313, i32 %312, i32 %299, i32 %307, i32 0, i32 %10, i8* nonnull %14, i8* %15, i32 %291, i32 %289)
  br label %361

335:                                              ; preds = %346, %332
  %336 = phi i64 [ 0, %332 ], [ %358, %346 ]
  br i1 %328, label %342, label %337

337:                                              ; preds = %335
  %338 = load i8, i8* %322, align 1
  %339 = getelementptr inbounds [4 x i8], [4 x i8]* %331, i64 %336, i64 2
  store i8 %338, i8* %339, align 1
  %340 = load i8, i8* %323, align 1
  %341 = getelementptr inbounds [4 x i8], [4 x i8]* %331, i64 %336, i64 3
  store i8 %340, i8* %341, align 1
  br label %342

342:                                              ; preds = %337, %335, %329
  %343 = getelementptr inbounds [4 x i8], [4 x i8]* %331, i64 %2
  %344 = add nuw nsw i32 %330, 1
  %345 = icmp slt i32 %344, %307
  br i1 %345, label %329, label %333

346:                                              ; preds = %332, %346
  %347 = phi i64 [ %358, %346 ], [ 0, %332 ]
  %348 = phi i64 [ %359, %346 ], [ %327, %332 ]
  %349 = load i8, i8* %322, align 1
  %350 = getelementptr inbounds [4 x i8], [4 x i8]* %331, i64 %347, i64 2
  store i8 %349, i8* %350, align 1
  %351 = load i8, i8* %323, align 1
  %352 = getelementptr inbounds [4 x i8], [4 x i8]* %331, i64 %347, i64 3
  store i8 %351, i8* %352, align 1
  %353 = or i64 %347, 1
  %354 = load i8, i8* %322, align 1
  %355 = getelementptr inbounds [4 x i8], [4 x i8]* %331, i64 %353, i64 2
  store i8 %354, i8* %355, align 1
  %356 = load i8, i8* %323, align 1
  %357 = getelementptr inbounds [4 x i8], [4 x i8]* %331, i64 %353, i64 3
  store i8 %356, i8* %357, align 1
  %358 = add nuw nsw i64 %347, 2
  %359 = add i64 %348, -2
  %360 = icmp eq i64 %359, 0
  br i1 %360, label %335, label %346

361:                                              ; preds = %333, %287, %285
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @mask_edges_chroma([32 x [2 x [2 x i16]]]* nocapture, i32, i32, i32, i32, i32, i32, i8* nocapture, i8* nocapture, i32, i32) unnamed_addr #2 {
  %12 = zext i32 %6 to i64
  %13 = getelementptr inbounds [19 x %struct.TxfmInfo], [19 x %struct.TxfmInfo]* @dav1d_txfm_dimensions, i64 0, i64 %12, i32 2
  %14 = load i8, i8* %13, align 2
  %15 = getelementptr inbounds [19 x %struct.TxfmInfo], [19 x %struct.TxfmInfo]* @dav1d_txfm_dimensions, i64 0, i64 %12, i32 3
  %16 = load i8, i8* %15, align 1
  %17 = icmp ne i8 %14, 0
  %18 = zext i1 %17 to i32
  %19 = icmp ne i8 %16, 0
  %20 = zext i1 %19 to i32
  %21 = sub nsw i32 4, %10
  %22 = sub nsw i32 4, %9
  %23 = lshr i32 16, %10
  %24 = lshr i32 16, %9
  %25 = shl i32 1, %23
  %26 = shl i32 1, %24
  %27 = shl i32 1, %1
  %28 = icmp sgt i32 %4, 0
  br i1 %28, label %29, label %53

29:                                               ; preds = %11
  %30 = sext i32 %2 to i64
  %31 = zext i32 %4 to i64
  br label %32

32:                                               ; preds = %32, %29
  %33 = phi i64 [ 0, %29 ], [ %50, %32 ]
  %34 = phi i32 [ %27, %29 ], [ %51, %32 ]
  %35 = icmp uge i32 %34, %25
  %36 = zext i1 %35 to i32
  %37 = shl i32 %36, %21
  %38 = lshr i32 %34, %37
  %39 = getelementptr inbounds i8, i8* %8, i64 %33
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = icmp ult i32 %18, %41
  %43 = select i1 %42, i32 %18, i32 %41
  %44 = zext i32 %43 to i64
  %45 = zext i1 %35 to i64
  %46 = getelementptr inbounds [32 x [2 x [2 x i16]]], [32 x [2 x [2 x i16]]]* %0, i64 0, i64 %30, i64 %44, i64 %45
  %47 = load i16, i16* %46, align 2
  %48 = trunc i32 %38 to i16
  %49 = or i16 %47, %48
  store i16 %49, i16* %46, align 2
  %50 = add nuw nsw i64 %33, 1
  %51 = shl i32 %34, 1
  %52 = icmp eq i64 %50, %31
  br i1 %52, label %53, label %32

53:                                               ; preds = %32, %11
  %54 = shl i32 1, %2
  %55 = icmp sgt i32 %3, 0
  br i1 %55, label %56, label %80

56:                                               ; preds = %53
  %57 = sext i32 %1 to i64
  %58 = zext i32 %3 to i64
  br label %59

59:                                               ; preds = %59, %56
  %60 = phi i64 [ 0, %56 ], [ %77, %59 ]
  %61 = phi i32 [ %54, %56 ], [ %78, %59 ]
  %62 = icmp uge i32 %61, %26
  %63 = zext i1 %62 to i32
  %64 = shl i32 %63, %22
  %65 = lshr i32 %61, %64
  %66 = getelementptr inbounds i8, i8* %7, i64 %60
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i32
  %69 = icmp ult i32 %20, %68
  %70 = select i1 %69, i32 %20, i32 %68
  %71 = zext i32 %70 to i64
  %72 = zext i1 %62 to i64
  %73 = getelementptr inbounds [32 x [2 x [2 x i16]]], [32 x [2 x [2 x i16]]]* %0, i64 1, i64 %57, i64 %71, i64 %72
  %74 = load i16, i16* %73, align 2
  %75 = trunc i32 %65 to i16
  %76 = or i16 %74, %75
  store i16 %76, i16* %73, align 2
  %77 = add nuw nsw i64 %60, 1
  %78 = shl i32 %61, 1
  %79 = icmp eq i64 %77, %58
  br i1 %79, label %80, label %59

80:                                               ; preds = %59, %53
  %81 = icmp eq i32 %5, 0
  br i1 %81, label %82, label %158

82:                                               ; preds = %80
  %83 = getelementptr inbounds [19 x %struct.TxfmInfo], [19 x %struct.TxfmInfo]* @dav1d_txfm_dimensions, i64 0, i64 %12, i32 0
  %84 = load i8, i8* %83, align 8
  %85 = zext i8 %84 to i32
  %86 = zext i32 %27 to i64
  %87 = zext i32 %4 to i64
  %88 = shl i64 %86, %87
  %89 = trunc i64 %88 to i32
  %90 = sub i32 %89, %27
  %91 = add nsw i32 %25, -1
  %92 = and i32 %91, %90
  %93 = lshr i32 %90, %23
  %94 = icmp slt i32 %85, %3
  br i1 %94, label %95, label %120

95:                                               ; preds = %82
  %96 = icmp eq i32 %92, 0
  %97 = zext i1 %17 to i64
  %98 = trunc i32 %92 to i16
  %99 = icmp eq i32 %93, 0
  %100 = trunc i32 %93 to i16
  %101 = zext i8 %84 to i64
  %102 = sext i32 %3 to i64
  %103 = sext i32 %2 to i64
  br label %104

104:                                              ; preds = %95, %117
  %105 = phi i64 [ %101, %95 ], [ %118, %117 ]
  br i1 %96, label %111, label %106

106:                                              ; preds = %104
  %107 = add nsw i64 %105, %103
  %108 = getelementptr inbounds [32 x [2 x [2 x i16]]], [32 x [2 x [2 x i16]]]* %0, i64 0, i64 %107, i64 %97, i64 0
  %109 = load i16, i16* %108, align 2
  %110 = or i16 %109, %98
  store i16 %110, i16* %108, align 2
  br label %111

111:                                              ; preds = %104, %106
  br i1 %99, label %117, label %112

112:                                              ; preds = %111
  %113 = add nsw i64 %105, %103
  %114 = getelementptr inbounds [32 x [2 x [2 x i16]]], [32 x [2 x [2 x i16]]]* %0, i64 0, i64 %113, i64 %97, i64 1
  %115 = load i16, i16* %114, align 2
  %116 = or i16 %115, %100
  store i16 %116, i16* %114, align 2
  br label %117

117:                                              ; preds = %111, %112
  %118 = add nuw nsw i64 %105, %101
  %119 = icmp slt i64 %118, %102
  br i1 %119, label %104, label %120

120:                                              ; preds = %117, %82
  %121 = getelementptr inbounds [19 x %struct.TxfmInfo], [19 x %struct.TxfmInfo]* @dav1d_txfm_dimensions, i64 0, i64 %12, i32 1
  %122 = load i8, i8* %121, align 1
  %123 = zext i8 %122 to i32
  %124 = zext i32 %54 to i64
  %125 = zext i32 %3 to i64
  %126 = shl i64 %124, %125
  %127 = trunc i64 %126 to i32
  %128 = sub i32 %127, %54
  %129 = add nsw i32 %26, -1
  %130 = and i32 %129, %128
  %131 = lshr i32 %128, %24
  %132 = icmp slt i32 %123, %4
  br i1 %132, label %133, label %158

133:                                              ; preds = %120
  %134 = icmp eq i32 %130, 0
  %135 = zext i1 %19 to i64
  %136 = trunc i32 %130 to i16
  %137 = icmp eq i32 %131, 0
  %138 = trunc i32 %131 to i16
  %139 = zext i8 %122 to i64
  %140 = sext i32 %4 to i64
  %141 = sext i32 %1 to i64
  br label %142

142:                                              ; preds = %133, %155
  %143 = phi i64 [ %139, %133 ], [ %156, %155 ]
  br i1 %134, label %149, label %144

144:                                              ; preds = %142
  %145 = add nsw i64 %143, %141
  %146 = getelementptr inbounds [32 x [2 x [2 x i16]]], [32 x [2 x [2 x i16]]]* %0, i64 1, i64 %145, i64 %135, i64 0
  %147 = load i16, i16* %146, align 2
  %148 = or i16 %147, %136
  store i16 %148, i16* %146, align 2
  br label %149

149:                                              ; preds = %142, %144
  br i1 %137, label %155, label %150

150:                                              ; preds = %149
  %151 = add nsw i64 %143, %141
  %152 = getelementptr inbounds [32 x [2 x [2 x i16]]], [32 x [2 x [2 x i16]]]* %0, i64 1, i64 %151, i64 %135, i64 1
  %153 = load i16, i16* %152, align 2
  %154 = or i16 %153, %138
  store i16 %154, i16* %152, align 2
  br label %155

155:                                              ; preds = %149, %150
  %156 = add nuw nsw i64 %143, %139
  %157 = icmp slt i64 %156, %140
  br i1 %157, label %142, label %158

158:                                              ; preds = %155, %120, %80
  switch i32 %3, label %184 [
    i32 1, label %159
    i32 2, label %161
    i32 4, label %164
    i32 8, label %167
    i32 16, label %170
    i32 32, label %175
  ]

159:                                              ; preds = %158
  %160 = zext i1 %19 to i8
  store i8 %160, i8* %7, align 1
  br label %187

161:                                              ; preds = %158
  %162 = select i1 %19, i16 257, i16 0
  %163 = bitcast i8* %7 to i16*
  store i16 %162, i16* %163, align 2
  br label %187

164:                                              ; preds = %158
  %165 = select i1 %19, i32 16843009, i32 0
  %166 = bitcast i8* %7 to i32*
  store i32 %165, i32* %166, align 4
  br label %187

167:                                              ; preds = %158
  %168 = select i1 %19, i64 72340172838076673, i64 0
  %169 = bitcast i8* %7 to i64*
  store i64 %168, i64* %169, align 8
  br label %187

170:                                              ; preds = %158
  %171 = select i1 %19, i64 72340172838076673, i64 0
  %172 = bitcast i8* %7 to i64*
  store i64 %171, i64* %172, align 8
  %173 = getelementptr inbounds i8, i8* %7, i64 8
  %174 = bitcast i8* %173 to i64*
  store i64 %171, i64* %174, align 8
  br label %187

175:                                              ; preds = %158
  %176 = select i1 %19, i64 72340172838076673, i64 0
  %177 = bitcast i8* %7 to i64*
  store i64 %176, i64* %177, align 8
  %178 = getelementptr inbounds i8, i8* %7, i64 8
  %179 = bitcast i8* %178 to i64*
  store i64 %176, i64* %179, align 8
  %180 = getelementptr inbounds i8, i8* %7, i64 16
  %181 = bitcast i8* %180 to i64*
  store i64 %176, i64* %181, align 8
  %182 = getelementptr inbounds i8, i8* %7, i64 24
  %183 = bitcast i8* %182 to i64*
  store i64 %176, i64* %183, align 8
  br label %187

184:                                              ; preds = %158
  %185 = zext i1 %19 to i8
  %186 = sext i32 %3 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %7, i8 %185, i64 %186, i1 false)
  br label %187

187:                                              ; preds = %184, %175, %170, %167, %164, %161, %159
  switch i32 %4, label %213 [
    i32 1, label %188
    i32 2, label %190
    i32 4, label %193
    i32 8, label %196
    i32 16, label %199
    i32 32, label %204
  ]

188:                                              ; preds = %187
  %189 = zext i1 %17 to i8
  store i8 %189, i8* %8, align 1
  br label %216

190:                                              ; preds = %187
  %191 = select i1 %17, i16 257, i16 0
  %192 = bitcast i8* %8 to i16*
  store i16 %191, i16* %192, align 2
  br label %216

193:                                              ; preds = %187
  %194 = select i1 %17, i32 16843009, i32 0
  %195 = bitcast i8* %8 to i32*
  store i32 %194, i32* %195, align 4
  br label %216

196:                                              ; preds = %187
  %197 = select i1 %17, i64 72340172838076673, i64 0
  %198 = bitcast i8* %8 to i64*
  store i64 %197, i64* %198, align 8
  br label %216

199:                                              ; preds = %187
  %200 = select i1 %17, i64 72340172838076673, i64 0
  %201 = bitcast i8* %8 to i64*
  store i64 %200, i64* %201, align 8
  %202 = getelementptr inbounds i8, i8* %8, i64 8
  %203 = bitcast i8* %202 to i64*
  store i64 %200, i64* %203, align 8
  br label %216

204:                                              ; preds = %187
  %205 = select i1 %17, i64 72340172838076673, i64 0
  %206 = bitcast i8* %8 to i64*
  store i64 %205, i64* %206, align 8
  %207 = getelementptr inbounds i8, i8* %8, i64 8
  %208 = bitcast i8* %207 to i64*
  store i64 %205, i64* %208, align 8
  %209 = getelementptr inbounds i8, i8* %8, i64 16
  %210 = bitcast i8* %209 to i64*
  store i64 %205, i64* %210, align 8
  %211 = getelementptr inbounds i8, i8* %8, i64 24
  %212 = bitcast i8* %211 to i64*
  store i64 %205, i64* %212, align 8
  br label %216

213:                                              ; preds = %187
  %214 = zext i1 %17 to i8
  %215 = sext i32 %4 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %8, i8 %214, i64 %215, i1 false)
  br label %216

216:                                              ; preds = %213, %204, %199, %196, %193, %190, %188
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @dav1d_create_lf_mask_inter(%struct.Av1Filter* nocapture, [4 x i8]* nocapture, i64, [8 x [2 x i8]]* nocapture readonly, i32, i32, i32, i32, i32, i32, i32, i16* readonly, i32, i32, i8* nocapture, i8* nocapture, i8*, i8* nocapture) local_unnamed_addr #0 {
  %19 = alloca [2 x [2 x [32 x [32 x i8]]]], align 16
  %20 = zext i32 %9 to i64
  %21 = getelementptr inbounds [22 x [4 x i8]], [22 x [4 x i8]]* @dav1d_block_dimensions, i64 0, i64 %20, i64 0
  %22 = sub nsw i32 %6, %4
  %23 = load i8, i8* %21, align 4
  %24 = zext i8 %23 to i32
  %25 = icmp slt i32 %22, %24
  %26 = select i1 %25, i32 %22, i32 %24
  %27 = sub nsw i32 %7, %5
  %28 = getelementptr inbounds [22 x [4 x i8]], [22 x [4 x i8]]* @dav1d_block_dimensions, i64 0, i64 %20, i64 1
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = icmp slt i32 %27, %30
  %32 = select i1 %31, i32 %27, i32 %30
  %33 = and i32 %4, 31
  %34 = and i32 %5, 31
  %35 = icmp ne i32 %26, 0
  %36 = icmp ne i32 %32, 0
  %37 = and i1 %35, %36
  br i1 %37, label %38, label %316

38:                                               ; preds = %18
  %39 = icmp sgt i32 %32, 0
  br i1 %39, label %42, label %40

40:                                               ; preds = %38
  %41 = getelementptr inbounds [2 x [2 x [32 x [32 x i8]]]], [2 x [2 x [32 x [32 x i8]]]]* %19, i64 0, i64 0, i64 0, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %41) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %41, i8 -86, i64 4096, i1 false) #5
  br label %63

42:                                               ; preds = %38
  %43 = sext i32 %5 to i64
  %44 = mul nsw i64 %43, %2
  %45 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 %44
  %46 = sext i32 %4 to i64
  %47 = getelementptr inbounds [4 x i8], [4 x i8]* %45, i64 %46
  %48 = icmp sgt i32 %26, 0
  %49 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* %3, i64 0, i64 0, i64 0
  %50 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* %3, i64 1, i64 0, i64 0
  %51 = sext i32 %26 to i64
  %52 = and i64 %51, 1
  %53 = icmp eq i32 %26, 1
  %54 = sub nsw i64 %51, %52
  %55 = icmp eq i64 %52, 0
  br label %56

56:                                               ; preds = %42, %297
  %57 = phi i32 [ 0, %42 ], [ %299, %297 ]
  %58 = phi [4 x i8]* [ %47, %42 ], [ %298, %297 ]
  br i1 %48, label %59, label %297

59:                                               ; preds = %56
  br i1 %53, label %290, label %301

60:                                               ; preds = %297
  %61 = zext i32 %10 to i64
  %62 = getelementptr inbounds [2 x [2 x [32 x [32 x i8]]]], [2 x [2 x [32 x [32 x i8]]]]* %19, i64 0, i64 0, i64 0, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %62) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %62, i8 -86, i64 4096, i1 false) #5
  br i1 %39, label %66, label %63

63:                                               ; preds = %40, %60
  %64 = phi i8* [ %41, %40 ], [ %62, %60 ]
  %65 = shl i32 1, %34
  br label %120

66:                                               ; preds = %60
  %67 = icmp sgt i32 %26, 0
  %68 = getelementptr inbounds [19 x %struct.TxfmInfo], [19 x %struct.TxfmInfo]* @dav1d_txfm_dimensions, i64 0, i64 %61, i32 0
  %69 = getelementptr inbounds [19 x %struct.TxfmInfo], [19 x %struct.TxfmInfo]* @dav1d_txfm_dimensions, i64 0, i64 %61, i32 1
  br label %70

70:                                               ; preds = %79, %66
  %71 = phi i32 [ 0, %66 ], [ %83, %79 ]
  %72 = phi i32 [ 0, %66 ], [ %82, %79 ]
  br i1 %67, label %73, label %79

73:                                               ; preds = %70
  %74 = zext i32 %72 to i64
  br label %85

75:                                               ; preds = %79
  %76 = shl i32 1, %34
  %77 = zext i32 %33 to i64
  %78 = zext i32 %32 to i64
  br label %96

79:                                               ; preds = %85, %70
  %80 = load i8, i8* %69, align 1
  %81 = zext i8 %80 to i32
  %82 = add nuw nsw i32 %72, %81
  %83 = add nuw nsw i32 %71, 1
  %84 = icmp slt i32 %82, %32
  br i1 %84, label %70, label %75

85:                                               ; preds = %85, %73
  %86 = phi i32 [ 0, %73 ], [ %93, %85 ]
  %87 = phi i32 [ 0, %73 ], [ %94, %85 ]
  %88 = zext i32 %86 to i64
  %89 = getelementptr inbounds [2 x [2 x [32 x [32 x i8]]]], [2 x [2 x [32 x [32 x i8]]]]* %19, i64 0, i64 0, i64 0, i64 %74, i64 %88
  %90 = bitcast i8* %89 to [2 x [32 x [32 x i8]]]*
  call fastcc void @decomp_tx([2 x [32 x [32 x i8]]]* %90, i32 %10, i32 0, i32 %71, i32 %87, i16* %11) #5
  %91 = load i8, i8* %68, align 8
  %92 = zext i8 %91 to i32
  %93 = add nuw nsw i32 %86, %92
  %94 = add nuw nsw i32 %87, 1
  %95 = icmp slt i32 %93, %26
  br i1 %95, label %85, label %79

96:                                               ; preds = %96, %75
  %97 = phi i64 [ 0, %75 ], [ %117, %96 ]
  %98 = phi i32 [ %76, %75 ], [ %118, %96 ]
  %99 = icmp ugt i32 %98, 65535
  %100 = zext i1 %99 to i32
  %101 = shl nuw nsw i32 %100, 4
  %102 = lshr i32 %98, %101
  %103 = getelementptr inbounds [2 x [2 x [32 x [32 x i8]]]], [2 x [2 x [32 x [32 x i8]]]]* %19, i64 0, i64 0, i64 0, i64 %97, i64 0
  %104 = load i8, i8* %103, align 16
  %105 = zext i8 %104 to i32
  %106 = getelementptr inbounds i8, i8* %15, i64 %97
  %107 = load i8, i8* %106, align 1
  %108 = zext i8 %107 to i32
  %109 = icmp ult i32 %105, %108
  %110 = select i1 %109, i32 %105, i32 %108
  %111 = zext i32 %110 to i64
  %112 = zext i1 %99 to i64
  %113 = getelementptr inbounds %struct.Av1Filter, %struct.Av1Filter* %0, i64 0, i32 0, i64 0, i64 %77, i64 %111, i64 %112
  %114 = load i16, i16* %113, align 2
  %115 = trunc i32 %102 to i16
  %116 = or i16 %114, %115
  store i16 %116, i16* %113, align 2
  %117 = add nuw nsw i64 %97, 1
  %118 = shl i32 %98, 1
  %119 = icmp eq i64 %117, %78
  br i1 %119, label %120, label %96

120:                                              ; preds = %96, %63
  %121 = phi i8* [ %64, %63 ], [ %62, %96 ]
  %122 = phi i32 [ %65, %63 ], [ %76, %96 ]
  %123 = shl i32 1, %33
  %124 = icmp sgt i32 %26, 0
  br i1 %124, label %125, label %152

125:                                              ; preds = %120
  %126 = zext i32 %34 to i64
  %127 = zext i32 %26 to i64
  br label %128

128:                                              ; preds = %128, %125
  %129 = phi i64 [ 0, %125 ], [ %149, %128 ]
  %130 = phi i32 [ %123, %125 ], [ %150, %128 ]
  %131 = icmp ugt i32 %130, 65535
  %132 = zext i1 %131 to i32
  %133 = shl nuw nsw i32 %132, 4
  %134 = lshr i32 %130, %133
  %135 = getelementptr inbounds [2 x [2 x [32 x [32 x i8]]]], [2 x [2 x [32 x [32 x i8]]]]* %19, i64 0, i64 1, i64 0, i64 0, i64 %129
  %136 = load i8, i8* %135, align 1
  %137 = zext i8 %136 to i32
  %138 = getelementptr inbounds i8, i8* %14, i64 %129
  %139 = load i8, i8* %138, align 1
  %140 = zext i8 %139 to i32
  %141 = icmp ult i32 %137, %140
  %142 = select i1 %141, i32 %137, i32 %140
  %143 = zext i32 %142 to i64
  %144 = zext i1 %131 to i64
  %145 = getelementptr inbounds %struct.Av1Filter, %struct.Av1Filter* %0, i64 0, i32 0, i64 1, i64 %126, i64 %143, i64 %144
  %146 = load i16, i16* %145, align 2
  %147 = trunc i32 %134 to i16
  %148 = or i16 %146, %147
  store i16 %148, i16* %145, align 2
  %149 = add nuw nsw i64 %129, 1
  %150 = shl i32 %130, 1
  %151 = icmp eq i64 %149, %127
  br i1 %151, label %152, label %128

152:                                              ; preds = %128, %120
  %153 = icmp eq i32 %8, 0
  br i1 %153, label %154, label %242

154:                                              ; preds = %152
  br i1 %39, label %155, label %157

155:                                              ; preds = %154
  %156 = zext i32 %32 to i64
  br label %160

157:                                              ; preds = %197, %154
  br i1 %124, label %158, label %242

158:                                              ; preds = %157
  %159 = zext i32 %26 to i64
  br label %201

160:                                              ; preds = %197, %155
  %161 = phi i64 [ 0, %155 ], [ %198, %197 ]
  %162 = phi i32 [ %122, %155 ], [ %199, %197 ]
  %163 = icmp ugt i32 %162, 65535
  %164 = getelementptr inbounds [2 x [2 x [32 x [32 x i8]]]], [2 x [2 x [32 x [32 x i8]]]]* %19, i64 0, i64 0, i64 1, i64 %161, i64 0
  %165 = load i8, i8* %164, align 16
  %166 = zext i8 %165 to i32
  %167 = icmp sgt i32 %26, %166
  br i1 %167, label %168, label %197

168:                                              ; preds = %160
  %169 = getelementptr inbounds [2 x [2 x [32 x [32 x i8]]]], [2 x [2 x [32 x [32 x i8]]]]* %19, i64 0, i64 0, i64 0, i64 %161, i64 0
  %170 = load i8, i8* %169, align 16
  %171 = zext i8 %170 to i32
  %172 = zext i1 %163 to i32
  %173 = shl nuw nsw i32 %172, 4
  %174 = lshr i32 %162, %173
  %175 = zext i1 %163 to i64
  %176 = trunc i32 %174 to i16
  br label %177

177:                                              ; preds = %177, %168
  %178 = phi i32 [ %171, %168 ], [ %183, %177 ]
  %179 = phi i32 [ %166, %168 ], [ %195, %177 ]
  %180 = zext i32 %179 to i64
  %181 = getelementptr inbounds [2 x [2 x [32 x [32 x i8]]]], [2 x [2 x [32 x [32 x i8]]]]* %19, i64 0, i64 0, i64 0, i64 %161, i64 %180
  %182 = load i8, i8* %181, align 1
  %183 = zext i8 %182 to i32
  %184 = add nuw nsw i32 %179, %33
  %185 = zext i32 %184 to i64
  %186 = icmp ugt i32 %178, %183
  %187 = select i1 %186, i32 %183, i32 %178
  %188 = zext i32 %187 to i64
  %189 = getelementptr inbounds %struct.Av1Filter, %struct.Av1Filter* %0, i64 0, i32 0, i64 0, i64 %185, i64 %188, i64 %175
  %190 = load i16, i16* %189, align 2
  %191 = or i16 %190, %176
  store i16 %191, i16* %189, align 2
  %192 = getelementptr inbounds [2 x [2 x [32 x [32 x i8]]]], [2 x [2 x [32 x [32 x i8]]]]* %19, i64 0, i64 0, i64 1, i64 %161, i64 %180
  %193 = load i8, i8* %192, align 1
  %194 = zext i8 %193 to i32
  %195 = add nuw nsw i32 %179, %194
  %196 = icmp slt i32 %195, %26
  br i1 %196, label %177, label %197

197:                                              ; preds = %177, %160
  %198 = add nuw nsw i64 %161, 1
  %199 = shl i32 %162, 1
  %200 = icmp eq i64 %198, %156
  br i1 %200, label %157, label %160

201:                                              ; preds = %238, %158
  %202 = phi i64 [ 0, %158 ], [ %239, %238 ]
  %203 = phi i32 [ %123, %158 ], [ %240, %238 ]
  %204 = icmp ugt i32 %203, 65535
  %205 = getelementptr inbounds [2 x [2 x [32 x [32 x i8]]]], [2 x [2 x [32 x [32 x i8]]]]* %19, i64 0, i64 1, i64 1, i64 0, i64 %202
  %206 = load i8, i8* %205, align 1
  %207 = zext i8 %206 to i32
  %208 = icmp sgt i32 %32, %207
  br i1 %208, label %209, label %238

209:                                              ; preds = %201
  %210 = getelementptr inbounds [2 x [2 x [32 x [32 x i8]]]], [2 x [2 x [32 x [32 x i8]]]]* %19, i64 0, i64 1, i64 0, i64 0, i64 %202
  %211 = load i8, i8* %210, align 1
  %212 = zext i8 %211 to i32
  %213 = zext i1 %204 to i32
  %214 = shl nuw nsw i32 %213, 4
  %215 = lshr i32 %203, %214
  %216 = zext i1 %204 to i64
  %217 = trunc i32 %215 to i16
  br label %218

218:                                              ; preds = %218, %209
  %219 = phi i32 [ %212, %209 ], [ %224, %218 ]
  %220 = phi i32 [ %207, %209 ], [ %236, %218 ]
  %221 = zext i32 %220 to i64
  %222 = getelementptr inbounds [2 x [2 x [32 x [32 x i8]]]], [2 x [2 x [32 x [32 x i8]]]]* %19, i64 0, i64 1, i64 0, i64 %221, i64 %202
  %223 = load i8, i8* %222, align 1
  %224 = zext i8 %223 to i32
  %225 = add nuw nsw i32 %220, %34
  %226 = zext i32 %225 to i64
  %227 = icmp ult i32 %219, %224
  %228 = select i1 %227, i32 %219, i32 %224
  %229 = zext i32 %228 to i64
  %230 = getelementptr inbounds %struct.Av1Filter, %struct.Av1Filter* %0, i64 0, i32 0, i64 1, i64 %226, i64 %229, i64 %216
  %231 = load i16, i16* %230, align 2
  %232 = or i16 %231, %217
  store i16 %232, i16* %230, align 2
  %233 = getelementptr inbounds [2 x [2 x [32 x [32 x i8]]]], [2 x [2 x [32 x [32 x i8]]]]* %19, i64 0, i64 1, i64 1, i64 %221, i64 %202
  %234 = load i8, i8* %233, align 1
  %235 = zext i8 %234 to i32
  %236 = add nuw nsw i32 %220, %235
  %237 = icmp slt i32 %236, %32
  br i1 %237, label %218, label %238

238:                                              ; preds = %218, %201
  %239 = add nuw nsw i64 %202, 1
  %240 = shl i32 %203, 1
  %241 = icmp eq i64 %239, %159
  br i1 %241, label %242, label %201

242:                                              ; preds = %238, %157, %152
  br i1 %39, label %243, label %285

243:                                              ; preds = %242
  %244 = add nsw i32 %26, -1
  %245 = sext i32 %244 to i64
  %246 = zext i32 %32 to i64
  %247 = add nsw i64 %246, -1
  %248 = and i64 %246, 3
  %249 = icmp ult i64 %247, 3
  br i1 %249, label %273, label %250

250:                                              ; preds = %243
  %251 = sub nsw i64 %246, %248
  br label %252

252:                                              ; preds = %252, %250
  %253 = phi i64 [ 0, %250 ], [ %270, %252 ]
  %254 = phi i64 [ %251, %250 ], [ %271, %252 ]
  %255 = getelementptr inbounds [2 x [2 x [32 x [32 x i8]]]], [2 x [2 x [32 x [32 x i8]]]]* %19, i64 0, i64 0, i64 0, i64 %253, i64 %245
  %256 = load i8, i8* %255, align 1
  %257 = getelementptr inbounds i8, i8* %15, i64 %253
  store i8 %256, i8* %257, align 1
  %258 = or i64 %253, 1
  %259 = getelementptr inbounds [2 x [2 x [32 x [32 x i8]]]], [2 x [2 x [32 x [32 x i8]]]]* %19, i64 0, i64 0, i64 0, i64 %258, i64 %245
  %260 = load i8, i8* %259, align 1
  %261 = getelementptr inbounds i8, i8* %15, i64 %258
  store i8 %260, i8* %261, align 1
  %262 = or i64 %253, 2
  %263 = getelementptr inbounds [2 x [2 x [32 x [32 x i8]]]], [2 x [2 x [32 x [32 x i8]]]]* %19, i64 0, i64 0, i64 0, i64 %262, i64 %245
  %264 = load i8, i8* %263, align 1
  %265 = getelementptr inbounds i8, i8* %15, i64 %262
  store i8 %264, i8* %265, align 1
  %266 = or i64 %253, 3
  %267 = getelementptr inbounds [2 x [2 x [32 x [32 x i8]]]], [2 x [2 x [32 x [32 x i8]]]]* %19, i64 0, i64 0, i64 0, i64 %266, i64 %245
  %268 = load i8, i8* %267, align 1
  %269 = getelementptr inbounds i8, i8* %15, i64 %266
  store i8 %268, i8* %269, align 1
  %270 = add nuw nsw i64 %253, 4
  %271 = add i64 %254, -4
  %272 = icmp eq i64 %271, 0
  br i1 %272, label %273, label %252

273:                                              ; preds = %252, %243
  %274 = phi i64 [ 0, %243 ], [ %270, %252 ]
  %275 = icmp eq i64 %248, 0
  br i1 %275, label %285, label %276

276:                                              ; preds = %273, %276
  %277 = phi i64 [ %282, %276 ], [ %274, %273 ]
  %278 = phi i64 [ %283, %276 ], [ %248, %273 ]
  %279 = getelementptr inbounds [2 x [2 x [32 x [32 x i8]]]], [2 x [2 x [32 x [32 x i8]]]]* %19, i64 0, i64 0, i64 0, i64 %277, i64 %245
  %280 = load i8, i8* %279, align 1
  %281 = getelementptr inbounds i8, i8* %15, i64 %277
  store i8 %280, i8* %281, align 1
  %282 = add nuw nsw i64 %277, 1
  %283 = add i64 %278, -1
  %284 = icmp eq i64 %283, 0
  br i1 %284, label %285, label %276, !llvm.loop !2

285:                                              ; preds = %273, %276, %242
  %286 = add nsw i32 %32, -1
  %287 = sext i32 %286 to i64
  %288 = getelementptr inbounds [2 x [2 x [32 x [32 x i8]]]], [2 x [2 x [32 x [32 x i8]]]]* %19, i64 0, i64 1, i64 0, i64 %287, i64 0
  %289 = sext i32 %26 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %14, i8* align 16 %288, i64 %289, i1 false) #5
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %121) #5
  br label %316

290:                                              ; preds = %301, %59
  %291 = phi i64 [ 0, %59 ], [ %313, %301 ]
  br i1 %55, label %297, label %292

292:                                              ; preds = %290
  %293 = load i8, i8* %49, align 1
  %294 = getelementptr inbounds [4 x i8], [4 x i8]* %58, i64 %291, i64 0
  store i8 %293, i8* %294, align 1
  %295 = load i8, i8* %50, align 1
  %296 = getelementptr inbounds [4 x i8], [4 x i8]* %58, i64 %291, i64 1
  store i8 %295, i8* %296, align 1
  br label %297

297:                                              ; preds = %292, %290, %56
  %298 = getelementptr inbounds [4 x i8], [4 x i8]* %58, i64 %2
  %299 = add nuw nsw i32 %57, 1
  %300 = icmp slt i32 %299, %32
  br i1 %300, label %56, label %60

301:                                              ; preds = %59, %301
  %302 = phi i64 [ %313, %301 ], [ 0, %59 ]
  %303 = phi i64 [ %314, %301 ], [ %54, %59 ]
  %304 = load i8, i8* %49, align 1
  %305 = getelementptr inbounds [4 x i8], [4 x i8]* %58, i64 %302, i64 0
  store i8 %304, i8* %305, align 1
  %306 = load i8, i8* %50, align 1
  %307 = getelementptr inbounds [4 x i8], [4 x i8]* %58, i64 %302, i64 1
  store i8 %306, i8* %307, align 1
  %308 = or i64 %302, 1
  %309 = load i8, i8* %49, align 1
  %310 = getelementptr inbounds [4 x i8], [4 x i8]* %58, i64 %308, i64 0
  store i8 %309, i8* %310, align 1
  %311 = load i8, i8* %50, align 1
  %312 = getelementptr inbounds [4 x i8], [4 x i8]* %58, i64 %308, i64 1
  store i8 %311, i8* %312, align 1
  %313 = add nuw nsw i64 %302, 2
  %314 = add i64 %303, -2
  %315 = icmp eq i64 %314, 0
  br i1 %315, label %290, label %301

316:                                              ; preds = %285, %18
  %317 = icmp eq i8* %16, null
  br i1 %317, label %392, label %318

318:                                              ; preds = %316
  %319 = icmp eq i32 %13, 1
  %320 = zext i1 %319 to i32
  %321 = icmp ne i32 %13, 3
  %322 = zext i1 %321 to i32
  %323 = add nsw i32 %322, %6
  %324 = ashr i32 %323, %322
  %325 = ashr i32 %4, %322
  %326 = sub nsw i32 %324, %325
  %327 = add nuw nsw i32 %24, %322
  %328 = lshr i32 %327, %322
  %329 = icmp slt i32 %326, %328
  %330 = select i1 %329, i32 %326, i32 %328
  %331 = add nsw i32 %320, %7
  %332 = ashr i32 %331, %320
  %333 = ashr i32 %5, %320
  %334 = sub nsw i32 %332, %333
  %335 = add nuw nsw i32 %30, %320
  %336 = lshr i32 %335, %320
  %337 = icmp slt i32 %334, %336
  %338 = select i1 %337, i32 %334, i32 %336
  %339 = icmp ne i32 %330, 0
  %340 = icmp ne i32 %338, 0
  %341 = and i1 %339, %340
  br i1 %341, label %342, label %392

342:                                              ; preds = %318
  %343 = lshr i32 %33, %322
  %344 = lshr i32 %34, %320
  %345 = icmp sgt i32 %338, 0
  br i1 %345, label %346, label %364

346:                                              ; preds = %342
  %347 = sext i32 %333 to i64
  %348 = mul nsw i64 %347, %2
  %349 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 %348
  %350 = sext i32 %325 to i64
  %351 = getelementptr inbounds [4 x i8], [4 x i8]* %349, i64 %350
  %352 = icmp sgt i32 %330, 0
  %353 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* %3, i64 2, i64 0, i64 0
  %354 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* %3, i64 3, i64 0, i64 0
  %355 = sext i32 %330 to i64
  %356 = and i64 %355, 1
  %357 = icmp eq i32 %330, 1
  %358 = sub nsw i64 %355, %356
  %359 = icmp eq i64 %356, 0
  br label %360

360:                                              ; preds = %346, %373
  %361 = phi i32 [ 0, %346 ], [ %375, %373 ]
  %362 = phi [4 x i8]* [ %351, %346 ], [ %374, %373 ]
  br i1 %352, label %363, label %373

363:                                              ; preds = %360
  br i1 %357, label %366, label %377

364:                                              ; preds = %373, %342
  %365 = getelementptr inbounds %struct.Av1Filter, %struct.Av1Filter* %0, i64 0, i32 1, i64 0
  call fastcc void @mask_edges_chroma([32 x [2 x [2 x i16]]]* %365, i32 %344, i32 %343, i32 %330, i32 %338, i32 %8, i32 %12, i8* nonnull %16, i8* %17, i32 %322, i32 %320)
  br label %392

366:                                              ; preds = %377, %363
  %367 = phi i64 [ 0, %363 ], [ %389, %377 ]
  br i1 %359, label %373, label %368

368:                                              ; preds = %366
  %369 = load i8, i8* %353, align 1
  %370 = getelementptr inbounds [4 x i8], [4 x i8]* %362, i64 %367, i64 2
  store i8 %369, i8* %370, align 1
  %371 = load i8, i8* %354, align 1
  %372 = getelementptr inbounds [4 x i8], [4 x i8]* %362, i64 %367, i64 3
  store i8 %371, i8* %372, align 1
  br label %373

373:                                              ; preds = %368, %366, %360
  %374 = getelementptr inbounds [4 x i8], [4 x i8]* %362, i64 %2
  %375 = add nuw nsw i32 %361, 1
  %376 = icmp slt i32 %375, %338
  br i1 %376, label %360, label %364

377:                                              ; preds = %363, %377
  %378 = phi i64 [ %389, %377 ], [ 0, %363 ]
  %379 = phi i64 [ %390, %377 ], [ %358, %363 ]
  %380 = load i8, i8* %353, align 1
  %381 = getelementptr inbounds [4 x i8], [4 x i8]* %362, i64 %378, i64 2
  store i8 %380, i8* %381, align 1
  %382 = load i8, i8* %354, align 1
  %383 = getelementptr inbounds [4 x i8], [4 x i8]* %362, i64 %378, i64 3
  store i8 %382, i8* %383, align 1
  %384 = or i64 %378, 1
  %385 = load i8, i8* %353, align 1
  %386 = getelementptr inbounds [4 x i8], [4 x i8]* %362, i64 %384, i64 2
  store i8 %385, i8* %386, align 1
  %387 = load i8, i8* %354, align 1
  %388 = getelementptr inbounds [4 x i8], [4 x i8]* %362, i64 %384, i64 3
  store i8 %387, i8* %388, align 1
  %389 = add nuw nsw i64 %378, 2
  %390 = add i64 %379, -2
  %391 = icmp eq i64 %390, 0
  br i1 %391, label %366, label %377

392:                                              ; preds = %364, %318, %316
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @dav1d_calc_eih(%struct.Av1FilterLUT* nocapture, i32) local_unnamed_addr #3 {
  %3 = icmp sgt i32 %1, 0
  %4 = add nsw i32 %1, 3
  %5 = ashr i32 %4, 2
  %6 = sub nsw i32 9, %1
  %7 = insertelement <16 x i32> undef, i32 %5, i32 0
  %8 = shufflevector <16 x i32> %7, <16 x i32> undef, <16 x i32> zeroinitializer
  %9 = insertelement <16 x i32> undef, i32 %6, i32 0
  %10 = shufflevector <16 x i32> %9, <16 x i32> undef, <16 x i32> zeroinitializer
  %11 = insertelement <16 x i1> undef, i1 %3, i32 0
  %12 = lshr <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, %8
  %13 = icmp slt <16 x i32> %12, %10
  %14 = select <16 x i1> %13, <16 x i32> %12, <16 x i32> %10
  %15 = xor <16 x i1> %11, <i1 true, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef>
  %16 = shufflevector <16 x i1> %15, <16 x i1> undef, <16 x i32> zeroinitializer
  %17 = select <16 x i1> %16, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, <16 x i32> %14
  %18 = icmp sgt <16 x i32> %17, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %19 = select <16 x i1> %18, <16 x i32> %17, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %20 = trunc <16 x i32> %19 to <16 x i8>
  %21 = getelementptr inbounds %struct.Av1FilterLUT, %struct.Av1FilterLUT* %0, i64 0, i32 1, i64 0
  %22 = bitcast i8* %21 to <16 x i8>*
  store <16 x i8> %20, <16 x i8>* %22, align 1
  %23 = trunc <16 x i32> %19 to <16 x i8>
  %24 = add <16 x i8> %23, <i8 4, i8 6, i8 8, i8 10, i8 12, i8 14, i8 16, i8 18, i8 20, i8 22, i8 24, i8 26, i8 28, i8 30, i8 32, i8 34>
  %25 = bitcast %struct.Av1FilterLUT* %0 to <16 x i8>*
  store <16 x i8> %24, <16 x i8>* %25, align 1
  %26 = lshr <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, %8
  %27 = icmp slt <16 x i32> %26, %10
  %28 = select <16 x i1> %27, <16 x i32> %26, <16 x i32> %10
  %29 = xor <16 x i1> %11, <i1 true, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef>
  %30 = shufflevector <16 x i1> %29, <16 x i1> undef, <16 x i32> zeroinitializer
  %31 = select <16 x i1> %30, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, <16 x i32> %28
  %32 = icmp sgt <16 x i32> %31, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %33 = select <16 x i1> %32, <16 x i32> %31, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %34 = trunc <16 x i32> %33 to <16 x i8>
  %35 = getelementptr inbounds %struct.Av1FilterLUT, %struct.Av1FilterLUT* %0, i64 0, i32 1, i64 16
  %36 = bitcast i8* %35 to <16 x i8>*
  store <16 x i8> %34, <16 x i8>* %36, align 1
  %37 = trunc <16 x i32> %33 to <16 x i8>
  %38 = add <16 x i8> %37, <i8 36, i8 38, i8 40, i8 42, i8 44, i8 46, i8 48, i8 50, i8 52, i8 54, i8 56, i8 58, i8 60, i8 62, i8 64, i8 66>
  %39 = getelementptr inbounds %struct.Av1FilterLUT, %struct.Av1FilterLUT* %0, i64 0, i32 0, i64 16
  %40 = bitcast i8* %39 to <16 x i8>*
  store <16 x i8> %38, <16 x i8>* %40, align 1
  %41 = lshr <16 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>, %8
  %42 = icmp slt <16 x i32> %41, %10
  %43 = select <16 x i1> %42, <16 x i32> %41, <16 x i32> %10
  %44 = xor <16 x i1> %11, <i1 true, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef>
  %45 = shufflevector <16 x i1> %44, <16 x i1> undef, <16 x i32> zeroinitializer
  %46 = select <16 x i1> %45, <16 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>, <16 x i32> %43
  %47 = icmp sgt <16 x i32> %46, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %48 = select <16 x i1> %47, <16 x i32> %46, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %49 = trunc <16 x i32> %48 to <16 x i8>
  %50 = getelementptr inbounds %struct.Av1FilterLUT, %struct.Av1FilterLUT* %0, i64 0, i32 1, i64 32
  %51 = bitcast i8* %50 to <16 x i8>*
  store <16 x i8> %49, <16 x i8>* %51, align 1
  %52 = trunc <16 x i32> %48 to <16 x i8>
  %53 = add <16 x i8> %52, <i8 68, i8 70, i8 72, i8 74, i8 76, i8 78, i8 80, i8 82, i8 84, i8 86, i8 88, i8 90, i8 92, i8 94, i8 96, i8 98>
  %54 = getelementptr inbounds %struct.Av1FilterLUT, %struct.Av1FilterLUT* %0, i64 0, i32 0, i64 32
  %55 = bitcast i8* %54 to <16 x i8>*
  store <16 x i8> %53, <16 x i8>* %55, align 1
  %56 = lshr <16 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>, %8
  %57 = icmp slt <16 x i32> %56, %10
  %58 = select <16 x i1> %57, <16 x i32> %56, <16 x i32> %10
  %59 = xor <16 x i1> %11, <i1 true, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef>
  %60 = shufflevector <16 x i1> %59, <16 x i1> undef, <16 x i32> zeroinitializer
  %61 = select <16 x i1> %60, <16 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>, <16 x i32> %58
  %62 = icmp sgt <16 x i32> %61, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %63 = select <16 x i1> %62, <16 x i32> %61, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %64 = trunc <16 x i32> %63 to <16 x i8>
  %65 = getelementptr inbounds %struct.Av1FilterLUT, %struct.Av1FilterLUT* %0, i64 0, i32 1, i64 48
  %66 = bitcast i8* %65 to <16 x i8>*
  store <16 x i8> %64, <16 x i8>* %66, align 1
  %67 = trunc <16 x i32> %63 to <16 x i8>
  %68 = add <16 x i8> %67, <i8 100, i8 102, i8 104, i8 106, i8 108, i8 110, i8 112, i8 114, i8 116, i8 118, i8 120, i8 122, i8 124, i8 126, i8 -128, i8 -126>
  %69 = getelementptr inbounds %struct.Av1FilterLUT, %struct.Av1FilterLUT* %0, i64 0, i32 0, i64 48
  %70 = bitcast i8* %69 to <16 x i8>*
  store <16 x i8> %68, <16 x i8>* %70, align 1
  %71 = sext i32 %5 to i64
  %72 = getelementptr inbounds %struct.Av1FilterLUT, %struct.Av1FilterLUT* %0, i64 0, i32 2, i64 0
  store i64 %71, i64* %72, align 8
  %73 = icmp eq i32 %1, 0
  %74 = select i1 %73, i32 255, i32 %6
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds %struct.Av1FilterLUT, %struct.Av1FilterLUT* %0, i64 0, i32 2, i64 1
  store i64 %75, i64* %76, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @dav1d_calc_lf_values([4 x [8 x [2 x i8]]]* nocapture, %struct.Dav1dFrameHeader* readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.Dav1dFrameHeader, %struct.Dav1dFrameHeader* %1, i64 0, i32 36, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  %7 = select i1 %6, i32 1, i32 8
  %8 = getelementptr inbounds %struct.Dav1dFrameHeader, %struct.Dav1dFrameHeader* %1, i64 0, i32 39, i32 0, i64 0
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %19

11:                                               ; preds = %3
  %12 = getelementptr inbounds %struct.Dav1dFrameHeader, %struct.Dav1dFrameHeader* %1, i64 0, i32 39, i32 0, i64 1
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %19

15:                                               ; preds = %11
  %16 = getelementptr inbounds [4 x [8 x [2 x i8]]], [4 x [8 x [2 x i8]]]* %0, i64 0, i64 0, i64 0, i64 0
  %17 = shl nuw nsw i32 %7, 6
  %18 = zext i32 %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %16, i8 0, i64 %18, i1 false)
  br label %90

19:                                               ; preds = %11, %3
  %20 = getelementptr inbounds %struct.Dav1dFrameHeader, %struct.Dav1dFrameHeader* %1, i64 0, i32 39, i32 3
  %21 = load i32, i32* %20, align 8
  %22 = icmp eq i32 %21, 0
  %23 = getelementptr inbounds %struct.Dav1dFrameHeader, %struct.Dav1dFrameHeader* %1, i64 0, i32 39, i32 5
  %24 = select i1 %22, %struct.Dav1dLoopfilterModeRefDeltas* null, %struct.Dav1dLoopfilterModeRefDeltas* %23
  %25 = getelementptr inbounds %struct.Dav1dFrameHeader, %struct.Dav1dFrameHeader* %1, i64 0, i32 39, i32 0, i64 1
  %26 = getelementptr inbounds %struct.Dav1dFrameHeader, %struct.Dav1dFrameHeader* %1, i64 0, i32 37, i32 1, i32 2
  %27 = getelementptr inbounds %struct.Dav1dFrameHeader, %struct.Dav1dFrameHeader* %1, i64 0, i32 39, i32 1
  %28 = getelementptr inbounds %struct.Dav1dFrameHeader, %struct.Dav1dFrameHeader* %1, i64 0, i32 39, i32 2
  %29 = zext i32 %7 to i64
  br label %30

30:                                               ; preds = %87, %19
  %31 = phi i32 [ %9, %19 ], [ %89, %87 ]
  %32 = phi i32 [ %5, %19 ], [ %88, %87 ]
  %33 = phi i64 [ 0, %19 ], [ %85, %87 ]
  %34 = icmp eq i32 %32, 0
  %35 = getelementptr inbounds %struct.Dav1dFrameHeader, %struct.Dav1dFrameHeader* %1, i64 0, i32 36, i32 4, i32 0, i64 %33
  %36 = select i1 %34, %struct.Dav1dSegmentationData* null, %struct.Dav1dSegmentationData* %35
  %37 = getelementptr inbounds [4 x [8 x [2 x i8]]], [4 x [8 x [2 x i8]]]* %0, i64 %33, i64 0, i64 0
  %38 = load i8, i8* %2, align 1
  %39 = sext i8 %38 to i32
  %40 = icmp ne %struct.Dav1dSegmentationData* %36, null
  br i1 %40, label %41, label %44

41:                                               ; preds = %30
  %42 = getelementptr inbounds %struct.Dav1dSegmentationData, %struct.Dav1dSegmentationData* %36, i64 0, i32 1
  %43 = load i32, i32* %42, align 4
  br label %44

44:                                               ; preds = %30, %41
  %45 = phi i32 [ %43, %41 ], [ 0, %30 ]
  tail call fastcc void @calc_lf_value([2 x i8]* %37, i32 0, i32 %31, i32 %39, i32 %45, %struct.Dav1dLoopfilterModeRefDeltas* %24)
  %46 = getelementptr inbounds [4 x [8 x [2 x i8]]], [4 x [8 x [2 x i8]]]* %0, i64 %33, i64 1, i64 0
  %47 = load i32, i32* %25, align 4
  %48 = load i32, i32* %26, align 8
  %49 = icmp ne i32 %48, 0
  %50 = zext i1 %49 to i64
  %51 = getelementptr inbounds i8, i8* %2, i64 %50
  %52 = load i8, i8* %51, align 1
  %53 = sext i8 %52 to i32
  br i1 %40, label %54, label %57

54:                                               ; preds = %44
  %55 = getelementptr inbounds %struct.Dav1dSegmentationData, %struct.Dav1dSegmentationData* %36, i64 0, i32 2
  %56 = load i32, i32* %55, align 4
  br label %57

57:                                               ; preds = %44, %54
  %58 = phi i32 [ %56, %54 ], [ 0, %44 ]
  tail call fastcc void @calc_lf_value([2 x i8]* %46, i32 0, i32 %47, i32 %53, i32 %58, %struct.Dav1dLoopfilterModeRefDeltas* %24)
  %59 = getelementptr inbounds [4 x [8 x [2 x i8]]], [4 x [8 x [2 x i8]]]* %0, i64 %33, i64 2, i64 0
  %60 = load i32, i32* %27, align 8
  %61 = load i32, i32* %26, align 8
  %62 = icmp eq i32 %61, 0
  %63 = select i1 %62, i64 0, i64 2
  %64 = getelementptr inbounds i8, i8* %2, i64 %63
  %65 = load i8, i8* %64, align 1
  %66 = sext i8 %65 to i32
  br i1 %40, label %67, label %70

67:                                               ; preds = %57
  %68 = getelementptr inbounds %struct.Dav1dSegmentationData, %struct.Dav1dSegmentationData* %36, i64 0, i32 3
  %69 = load i32, i32* %68, align 4
  br label %70

70:                                               ; preds = %57, %67
  %71 = phi i32 [ %69, %67 ], [ 0, %57 ]
  tail call fastcc void @calc_lf_value([2 x i8]* %59, i32 1, i32 %60, i32 %66, i32 %71, %struct.Dav1dLoopfilterModeRefDeltas* %24)
  %72 = getelementptr inbounds [4 x [8 x [2 x i8]]], [4 x [8 x [2 x i8]]]* %0, i64 %33, i64 3, i64 0
  %73 = load i32, i32* %28, align 4
  %74 = load i32, i32* %26, align 8
  %75 = icmp eq i32 %74, 0
  %76 = select i1 %75, i64 0, i64 3
  %77 = getelementptr inbounds i8, i8* %2, i64 %76
  %78 = load i8, i8* %77, align 1
  %79 = sext i8 %78 to i32
  br i1 %40, label %80, label %83

80:                                               ; preds = %70
  %81 = getelementptr inbounds %struct.Dav1dSegmentationData, %struct.Dav1dSegmentationData* %36, i64 0, i32 4
  %82 = load i32, i32* %81, align 4
  br label %83

83:                                               ; preds = %70, %80
  %84 = phi i32 [ %82, %80 ], [ 0, %70 ]
  tail call fastcc void @calc_lf_value([2 x i8]* %72, i32 1, i32 %73, i32 %79, i32 %84, %struct.Dav1dLoopfilterModeRefDeltas* %24)
  %85 = add nuw nsw i64 %33, 1
  %86 = icmp ult i64 %85, %29
  br i1 %86, label %87, label %90

87:                                               ; preds = %83
  %88 = load i32, i32* %4, align 8
  %89 = load i32, i32* %8, align 8
  br label %30

90:                                               ; preds = %83, %15
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @calc_lf_value([2 x i8]* nocapture, i32, i32, i32, i32, %struct.Dav1dLoopfilterModeRefDeltas* readonly) unnamed_addr #2 {
  %7 = add nsw i32 %3, %2
  %8 = icmp slt i32 %7, 63
  %9 = select i1 %8, i32 %7, i32 63
  %10 = icmp sgt i32 %9, 0
  %11 = select i1 %10, i32 %9, i32 0
  %12 = add nsw i32 %11, %4
  %13 = icmp slt i32 %12, 63
  %14 = select i1 %13, i32 %12, i32 63
  %15 = icmp sgt i32 %14, 0
  %16 = select i1 %15, i32 %14, i32 0
  %17 = icmp eq i32 %2, 0
  %18 = icmp ne i32 %1, 0
  %19 = and i1 %18, %17
  br i1 %19, label %20, label %22

20:                                               ; preds = %6
  %21 = getelementptr inbounds [2 x i8], [2 x i8]* %0, i64 0, i64 0
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %21, i8 0, i64 16, i1 false)
  br label %204

22:                                               ; preds = %6
  %23 = icmp eq %struct.Dav1dLoopfilterModeRefDeltas* %5, null
  br i1 %23, label %24, label %27

24:                                               ; preds = %22
  %25 = getelementptr inbounds [2 x i8], [2 x i8]* %0, i64 0, i64 0
  %26 = trunc i32 %16 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %25, i8 %26, i64 16, i1 false)
  br label %204

27:                                               ; preds = %22
  %28 = icmp sgt i32 %16, 31
  %29 = zext i1 %28 to i32
  %30 = getelementptr inbounds %struct.Dav1dLoopfilterModeRefDeltas, %struct.Dav1dLoopfilterModeRefDeltas* %5, i64 0, i32 1, i64 0
  %31 = load i32, i32* %30, align 4
  %32 = shl i32 %31, %29
  %33 = add nsw i32 %32, %16
  %34 = icmp slt i32 %33, 63
  %35 = select i1 %34, i32 %33, i32 63
  %36 = icmp sgt i32 %35, 0
  %37 = select i1 %36, i32 %35, i32 0
  %38 = trunc i32 %37 to i8
  %39 = getelementptr inbounds [2 x i8], [2 x i8]* %0, i64 0, i64 1
  store i8 %38, i8* %39, align 1
  %40 = getelementptr inbounds [2 x i8], [2 x i8]* %0, i64 0, i64 0
  store i8 %38, i8* %40, align 1
  %41 = getelementptr inbounds %struct.Dav1dLoopfilterModeRefDeltas, %struct.Dav1dLoopfilterModeRefDeltas* %5, i64 0, i32 0, i64 0
  %42 = getelementptr inbounds %struct.Dav1dLoopfilterModeRefDeltas, %struct.Dav1dLoopfilterModeRefDeltas* %5, i64 0, i32 1, i64 1
  %43 = load i32, i32* %41, align 4
  %44 = load i32, i32* %42, align 4
  %45 = add nsw i32 %44, %43
  %46 = shl i32 %45, %29
  %47 = add nsw i32 %46, %16
  %48 = icmp slt i32 %47, 63
  %49 = select i1 %48, i32 %47, i32 63
  %50 = icmp sgt i32 %49, 0
  %51 = select i1 %50, i32 %49, i32 0
  %52 = trunc i32 %51 to i8
  %53 = getelementptr inbounds [2 x i8], [2 x i8]* %0, i64 1, i64 0
  store i8 %52, i8* %53, align 1
  %54 = getelementptr inbounds %struct.Dav1dLoopfilterModeRefDeltas, %struct.Dav1dLoopfilterModeRefDeltas* %5, i64 0, i32 0, i64 1
  %55 = load i32, i32* %54, align 4
  %56 = load i32, i32* %42, align 4
  %57 = add nsw i32 %56, %55
  %58 = shl i32 %57, %29
  %59 = add nsw i32 %58, %16
  %60 = icmp slt i32 %59, 63
  %61 = select i1 %60, i32 %59, i32 63
  %62 = icmp sgt i32 %61, 0
  %63 = select i1 %62, i32 %61, i32 0
  %64 = trunc i32 %63 to i8
  %65 = getelementptr inbounds [2 x i8], [2 x i8]* %0, i64 1, i64 1
  store i8 %64, i8* %65, align 1
  %66 = getelementptr inbounds %struct.Dav1dLoopfilterModeRefDeltas, %struct.Dav1dLoopfilterModeRefDeltas* %5, i64 0, i32 1, i64 2
  %67 = load i32, i32* %41, align 4
  %68 = load i32, i32* %66, align 4
  %69 = add nsw i32 %68, %67
  %70 = shl i32 %69, %29
  %71 = add nsw i32 %70, %16
  %72 = icmp slt i32 %71, 63
  %73 = select i1 %72, i32 %71, i32 63
  %74 = icmp sgt i32 %73, 0
  %75 = select i1 %74, i32 %73, i32 0
  %76 = trunc i32 %75 to i8
  %77 = getelementptr inbounds [2 x i8], [2 x i8]* %0, i64 2, i64 0
  store i8 %76, i8* %77, align 1
  %78 = load i32, i32* %54, align 4
  %79 = load i32, i32* %66, align 4
  %80 = add nsw i32 %79, %78
  %81 = shl i32 %80, %29
  %82 = add nsw i32 %81, %16
  %83 = icmp slt i32 %82, 63
  %84 = select i1 %83, i32 %82, i32 63
  %85 = icmp sgt i32 %84, 0
  %86 = select i1 %85, i32 %84, i32 0
  %87 = trunc i32 %86 to i8
  %88 = getelementptr inbounds [2 x i8], [2 x i8]* %0, i64 2, i64 1
  store i8 %87, i8* %88, align 1
  %89 = getelementptr inbounds %struct.Dav1dLoopfilterModeRefDeltas, %struct.Dav1dLoopfilterModeRefDeltas* %5, i64 0, i32 1, i64 3
  %90 = load i32, i32* %41, align 4
  %91 = load i32, i32* %89, align 4
  %92 = add nsw i32 %91, %90
  %93 = shl i32 %92, %29
  %94 = add nsw i32 %93, %16
  %95 = icmp slt i32 %94, 63
  %96 = select i1 %95, i32 %94, i32 63
  %97 = icmp sgt i32 %96, 0
  %98 = select i1 %97, i32 %96, i32 0
  %99 = trunc i32 %98 to i8
  %100 = getelementptr inbounds [2 x i8], [2 x i8]* %0, i64 3, i64 0
  store i8 %99, i8* %100, align 1
  %101 = load i32, i32* %54, align 4
  %102 = load i32, i32* %89, align 4
  %103 = add nsw i32 %102, %101
  %104 = shl i32 %103, %29
  %105 = add nsw i32 %104, %16
  %106 = icmp slt i32 %105, 63
  %107 = select i1 %106, i32 %105, i32 63
  %108 = icmp sgt i32 %107, 0
  %109 = select i1 %108, i32 %107, i32 0
  %110 = trunc i32 %109 to i8
  %111 = getelementptr inbounds [2 x i8], [2 x i8]* %0, i64 3, i64 1
  store i8 %110, i8* %111, align 1
  %112 = getelementptr inbounds %struct.Dav1dLoopfilterModeRefDeltas, %struct.Dav1dLoopfilterModeRefDeltas* %5, i64 0, i32 1, i64 4
  %113 = load i32, i32* %41, align 4
  %114 = load i32, i32* %112, align 4
  %115 = add nsw i32 %114, %113
  %116 = shl i32 %115, %29
  %117 = add nsw i32 %116, %16
  %118 = icmp slt i32 %117, 63
  %119 = select i1 %118, i32 %117, i32 63
  %120 = icmp sgt i32 %119, 0
  %121 = select i1 %120, i32 %119, i32 0
  %122 = trunc i32 %121 to i8
  %123 = getelementptr inbounds [2 x i8], [2 x i8]* %0, i64 4, i64 0
  store i8 %122, i8* %123, align 1
  %124 = load i32, i32* %54, align 4
  %125 = load i32, i32* %112, align 4
  %126 = add nsw i32 %125, %124
  %127 = shl i32 %126, %29
  %128 = add nsw i32 %127, %16
  %129 = icmp slt i32 %128, 63
  %130 = select i1 %129, i32 %128, i32 63
  %131 = icmp sgt i32 %130, 0
  %132 = select i1 %131, i32 %130, i32 0
  %133 = trunc i32 %132 to i8
  %134 = getelementptr inbounds [2 x i8], [2 x i8]* %0, i64 4, i64 1
  store i8 %133, i8* %134, align 1
  %135 = getelementptr inbounds %struct.Dav1dLoopfilterModeRefDeltas, %struct.Dav1dLoopfilterModeRefDeltas* %5, i64 0, i32 1, i64 5
  %136 = load i32, i32* %41, align 4
  %137 = load i32, i32* %135, align 4
  %138 = add nsw i32 %137, %136
  %139 = shl i32 %138, %29
  %140 = add nsw i32 %139, %16
  %141 = icmp slt i32 %140, 63
  %142 = select i1 %141, i32 %140, i32 63
  %143 = icmp sgt i32 %142, 0
  %144 = select i1 %143, i32 %142, i32 0
  %145 = trunc i32 %144 to i8
  %146 = getelementptr inbounds [2 x i8], [2 x i8]* %0, i64 5, i64 0
  store i8 %145, i8* %146, align 1
  %147 = load i32, i32* %54, align 4
  %148 = load i32, i32* %135, align 4
  %149 = add nsw i32 %148, %147
  %150 = shl i32 %149, %29
  %151 = add nsw i32 %150, %16
  %152 = icmp slt i32 %151, 63
  %153 = select i1 %152, i32 %151, i32 63
  %154 = icmp sgt i32 %153, 0
  %155 = select i1 %154, i32 %153, i32 0
  %156 = trunc i32 %155 to i8
  %157 = getelementptr inbounds [2 x i8], [2 x i8]* %0, i64 5, i64 1
  store i8 %156, i8* %157, align 1
  %158 = getelementptr inbounds %struct.Dav1dLoopfilterModeRefDeltas, %struct.Dav1dLoopfilterModeRefDeltas* %5, i64 0, i32 1, i64 6
  %159 = load i32, i32* %41, align 4
  %160 = load i32, i32* %158, align 4
  %161 = add nsw i32 %160, %159
  %162 = shl i32 %161, %29
  %163 = add nsw i32 %162, %16
  %164 = icmp slt i32 %163, 63
  %165 = select i1 %164, i32 %163, i32 63
  %166 = icmp sgt i32 %165, 0
  %167 = select i1 %166, i32 %165, i32 0
  %168 = trunc i32 %167 to i8
  %169 = getelementptr inbounds [2 x i8], [2 x i8]* %0, i64 6, i64 0
  store i8 %168, i8* %169, align 1
  %170 = load i32, i32* %54, align 4
  %171 = load i32, i32* %158, align 4
  %172 = add nsw i32 %171, %170
  %173 = shl i32 %172, %29
  %174 = add nsw i32 %173, %16
  %175 = icmp slt i32 %174, 63
  %176 = select i1 %175, i32 %174, i32 63
  %177 = icmp sgt i32 %176, 0
  %178 = select i1 %177, i32 %176, i32 0
  %179 = trunc i32 %178 to i8
  %180 = getelementptr inbounds [2 x i8], [2 x i8]* %0, i64 6, i64 1
  store i8 %179, i8* %180, align 1
  %181 = getelementptr inbounds %struct.Dav1dLoopfilterModeRefDeltas, %struct.Dav1dLoopfilterModeRefDeltas* %5, i64 0, i32 1, i64 7
  %182 = load i32, i32* %41, align 4
  %183 = load i32, i32* %181, align 4
  %184 = add nsw i32 %183, %182
  %185 = shl i32 %184, %29
  %186 = add nsw i32 %185, %16
  %187 = icmp slt i32 %186, 63
  %188 = select i1 %187, i32 %186, i32 63
  %189 = icmp sgt i32 %188, 0
  %190 = select i1 %189, i32 %188, i32 0
  %191 = trunc i32 %190 to i8
  %192 = getelementptr inbounds [2 x i8], [2 x i8]* %0, i64 7, i64 0
  store i8 %191, i8* %192, align 1
  %193 = load i32, i32* %54, align 4
  %194 = load i32, i32* %181, align 4
  %195 = add nsw i32 %194, %193
  %196 = shl i32 %195, %29
  %197 = add nsw i32 %196, %16
  %198 = icmp slt i32 %197, 63
  %199 = select i1 %198, i32 %197, i32 63
  %200 = icmp sgt i32 %199, 0
  %201 = select i1 %200, i32 %199, i32 0
  %202 = trunc i32 %201 to i8
  %203 = getelementptr inbounds [2 x i8], [2 x i8]* %0, i64 7, i64 1
  store i8 %202, i8* %203, align 1
  br label %204

204:                                              ; preds = %27, %24, %20
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal fastcc void @decomp_tx([2 x [32 x [32 x i8]]]*, i32, i32, i32, i32, i16* readonly) unnamed_addr #4 {
  %7 = zext i32 %1 to i64
  %8 = getelementptr inbounds [19 x %struct.TxfmInfo], [19 x %struct.TxfmInfo]* @dav1d_txfm_dimensions, i64 0, i64 %7
  %9 = icmp eq i32 %1, 0
  %10 = icmp sgt i32 %2, 1
  %11 = or i1 %9, %10
  br i1 %11, label %69, label %12

12:                                               ; preds = %6
  %13 = sext i32 %2 to i64
  br label %14

14:                                               ; preds = %12, %56
  %15 = phi i64 [ %13, %12 ], [ %39, %56 ]
  %16 = phi %struct.TxfmInfo* [ %8, %12 ], [ %62, %56 ]
  %17 = phi i64 [ %7, %12 ], [ %61, %56 ]
  %18 = phi i32 [ %4, %12 ], [ %60, %56 ]
  %19 = phi i32 [ %3, %12 ], [ %55, %56 ]
  %20 = phi [2 x [32 x [32 x i8]]]* [ %0, %12 ], [ %59, %56 ]
  %21 = getelementptr inbounds i16, i16* %5, i64 %15
  %22 = load i16, i16* %21, align 2
  %23 = zext i16 %22 to i32
  %24 = shl i32 %19, 2
  %25 = add nsw i32 %24, %18
  %26 = shl i32 1, %25
  %27 = and i32 %26, %23
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %69, label %29

29:                                               ; preds = %14
  %30 = getelementptr inbounds [19 x %struct.TxfmInfo], [19 x %struct.TxfmInfo]* @dav1d_txfm_dimensions, i64 0, i64 %17, i32 6
  %31 = load i8, i8* %30, align 2
  %32 = zext i8 %31 to i32
  %33 = getelementptr inbounds %struct.TxfmInfo, %struct.TxfmInfo* %16, i64 0, i32 0
  %34 = load i8, i8* %33, align 8
  %35 = lshr i8 %34, 1
  %36 = getelementptr inbounds [19 x %struct.TxfmInfo], [19 x %struct.TxfmInfo]* @dav1d_txfm_dimensions, i64 0, i64 %17, i32 1
  %37 = load i8, i8* %36, align 1
  %38 = lshr i8 %37, 1
  %39 = add nsw i64 %15, 1
  %40 = shl nsw i32 %19, 1
  %41 = shl nsw i32 %18, 1
  %42 = trunc i64 %39 to i32
  tail call fastcc void @decomp_tx([2 x [32 x [32 x i8]]]* %20, i32 %32, i32 %42, i32 %40, i32 %41, i16* %5)
  %43 = icmp ult i8 %34, %37
  br i1 %43, label %49, label %44

44:                                               ; preds = %29
  %45 = zext i8 %35 to i64
  %46 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %20, i64 0, i64 0, i64 0, i64 %45
  %47 = bitcast i8* %46 to [2 x [32 x [32 x i8]]]*
  %48 = or i32 %41, 1
  tail call fastcc void @decomp_tx([2 x [32 x [32 x i8]]]* %47, i32 %32, i32 %42, i32 %40, i32 %48, i16* %5)
  br label %49

49:                                               ; preds = %29, %44
  %50 = icmp ult i8 %37, %34
  br i1 %50, label %318, label %51

51:                                               ; preds = %49
  %52 = zext i8 %38 to i64
  %53 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %20, i64 0, i64 0, i64 %52
  %54 = bitcast [32 x i8]* %53 to [2 x [32 x [32 x i8]]]*
  %55 = or i32 %40, 1
  tail call fastcc void @decomp_tx([2 x [32 x [32 x i8]]]* %54, i32 %32, i32 %42, i32 %55, i32 %41, i16* %5)
  br i1 %43, label %318, label %56

56:                                               ; preds = %51
  %57 = zext i8 %35 to i64
  %58 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %20, i64 0, i64 0, i64 %52, i64 %57
  %59 = bitcast i8* %58 to [2 x [32 x [32 x i8]]]*
  %60 = or i32 %41, 1
  %61 = zext i8 %31 to i64
  %62 = getelementptr inbounds [19 x %struct.TxfmInfo], [19 x %struct.TxfmInfo]* @dav1d_txfm_dimensions, i64 0, i64 %61
  %63 = icmp eq i8 %31, 0
  %64 = icmp sgt i64 %15, 0
  %65 = or i1 %63, %64
  br i1 %65, label %66, label %14

66:                                               ; preds = %56
  %67 = bitcast i8* %58 to [2 x [32 x [32 x i8]]]*
  %68 = zext i8 %31 to i64
  br label %69

69:                                               ; preds = %14, %66, %6
  %70 = phi [2 x [32 x [32 x i8]]]* [ %0, %6 ], [ %67, %66 ], [ %20, %14 ]
  %71 = phi i64 [ %7, %6 ], [ %68, %66 ], [ %17, %14 ]
  %72 = phi %struct.TxfmInfo* [ %8, %6 ], [ %62, %66 ], [ %16, %14 ]
  %73 = getelementptr inbounds [19 x %struct.TxfmInfo], [19 x %struct.TxfmInfo]* @dav1d_txfm_dimensions, i64 0, i64 %71, i32 2
  %74 = load i8, i8* %73, align 2
  %75 = zext i8 %74 to i32
  %76 = icmp ult i32 %75, 2
  %77 = select i1 %76, i32 %75, i32 2
  %78 = getelementptr inbounds [19 x %struct.TxfmInfo], [19 x %struct.TxfmInfo]* @dav1d_txfm_dimensions, i64 0, i64 %71, i32 3
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = icmp ult i32 %80, 2
  %82 = select i1 %81, i32 %80, i32 2
  %83 = getelementptr inbounds %struct.TxfmInfo, %struct.TxfmInfo* %72, i64 0, i32 0
  %84 = load i8, i8* %83, align 8
  switch i8 %84, label %318 [
    i8 1, label %139
    i8 2, label %125
    i8 4, label %113
    i8 8, label %99
    i8 16, label %85
  ]

85:                                               ; preds = %69
  %86 = getelementptr inbounds [19 x %struct.TxfmInfo], [19 x %struct.TxfmInfo]* @dav1d_txfm_dimensions, i64 0, i64 %71, i32 1
  %87 = load i8, i8* %86, align 1
  %88 = icmp eq i8 %87, 0
  br i1 %88, label %310, label %89

89:                                               ; preds = %85
  %90 = zext i32 %77 to i64
  %91 = mul nuw nsw i64 %90, 72340172838076673
  %92 = zext i32 %82 to i64
  %93 = mul nuw nsw i64 %92, 72340172838076673
  %94 = zext i8 %87 to i64
  %95 = and i64 %94, 1
  %96 = icmp eq i8 %87, 1
  br i1 %96, label %274, label %97

97:                                               ; preds = %89
  %98 = sub nsw i64 %94, %95
  br label %215

99:                                               ; preds = %69
  %100 = getelementptr inbounds [19 x %struct.TxfmInfo], [19 x %struct.TxfmInfo]* @dav1d_txfm_dimensions, i64 0, i64 %71, i32 1
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, 0
  br i1 %102, label %304, label %103

103:                                              ; preds = %99
  %104 = zext i32 %77 to i64
  %105 = mul nuw nsw i64 %104, 72340172838076673
  %106 = zext i32 %82 to i64
  %107 = mul nuw nsw i64 %106, 72340172838076673
  %108 = zext i8 %101 to i64
  %109 = and i64 %108, 1
  %110 = icmp eq i8 %101, 1
  br i1 %110, label %265, label %111

111:                                              ; preds = %103
  %112 = sub nsw i64 %108, %109
  br label %198

113:                                              ; preds = %69
  %114 = getelementptr inbounds [19 x %struct.TxfmInfo], [19 x %struct.TxfmInfo]* @dav1d_txfm_dimensions, i64 0, i64 %71, i32 1
  %115 = load i8, i8* %114, align 1
  %116 = icmp eq i8 %115, 0
  br i1 %116, label %298, label %117

117:                                              ; preds = %113
  %118 = mul nuw i32 %77, 16843009
  %119 = mul nuw i32 %82, 16843009
  %120 = zext i8 %115 to i64
  %121 = and i64 %120, 1
  %122 = icmp eq i8 %115, 1
  br i1 %122, label %256, label %123

123:                                              ; preds = %117
  %124 = sub nsw i64 %120, %121
  br label %181

125:                                              ; preds = %69
  %126 = getelementptr inbounds [19 x %struct.TxfmInfo], [19 x %struct.TxfmInfo]* @dav1d_txfm_dimensions, i64 0, i64 %71, i32 1
  %127 = load i8, i8* %126, align 1
  %128 = icmp eq i8 %127, 0
  br i1 %128, label %292, label %129

129:                                              ; preds = %125
  %130 = trunc i32 %77 to i16
  %131 = mul nuw nsw i16 %130, 257
  %132 = trunc i32 %82 to i16
  %133 = mul nuw nsw i16 %132, 257
  %134 = zext i8 %127 to i64
  %135 = and i64 %134, 1
  %136 = icmp eq i8 %127, 1
  br i1 %136, label %247, label %137

137:                                              ; preds = %129
  %138 = sub nsw i64 %134, %135
  br label %164

139:                                              ; preds = %69
  %140 = getelementptr inbounds [19 x %struct.TxfmInfo], [19 x %struct.TxfmInfo]* @dav1d_txfm_dimensions, i64 0, i64 %71, i32 1
  %141 = load i8, i8* %140, align 1
  %142 = icmp eq i8 %141, 0
  br i1 %142, label %289, label %143

143:                                              ; preds = %139
  %144 = trunc i32 %77 to i8
  %145 = trunc i32 %82 to i8
  %146 = zext i8 %141 to i64
  %147 = and i64 %146, 1
  %148 = icmp eq i8 %141, 1
  br i1 %148, label %240, label %149

149:                                              ; preds = %143
  %150 = sub nsw i64 %146, %147
  br label %151

151:                                              ; preds = %151, %149
  %152 = phi i64 [ 0, %149 ], [ %161, %151 ]
  %153 = phi i64 [ %150, %149 ], [ %162, %151 ]
  %154 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 0, i64 0, i64 %152, i64 0
  store i8 %144, i8* %154, align 1
  %155 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 1, i64 0, i64 %152, i64 0
  store i8 %145, i8* %155, align 1
  %156 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 0, i64 1, i64 %152, i64 0
  store i8 1, i8* %156, align 1
  %157 = or i64 %152, 1
  %158 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 0, i64 0, i64 %157, i64 0
  store i8 %144, i8* %158, align 1
  %159 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 1, i64 0, i64 %157, i64 0
  store i8 %145, i8* %159, align 1
  %160 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 0, i64 1, i64 %157, i64 0
  store i8 1, i8* %160, align 1
  %161 = add nuw nsw i64 %152, 2
  %162 = add i64 %153, -2
  %163 = icmp eq i64 %162, 0
  br i1 %163, label %240, label %151

164:                                              ; preds = %164, %137
  %165 = phi i64 [ 0, %137 ], [ %178, %164 ]
  %166 = phi i64 [ %138, %137 ], [ %179, %164 ]
  %167 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 0, i64 0, i64 %165, i64 0
  %168 = bitcast i8* %167 to i16*
  store i16 %131, i16* %168, align 2
  %169 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 1, i64 0, i64 %165, i64 0
  %170 = bitcast i8* %169 to i16*
  store i16 %133, i16* %170, align 2
  %171 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 0, i64 1, i64 %165, i64 0
  store i8 2, i8* %171, align 1
  %172 = or i64 %165, 1
  %173 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 0, i64 0, i64 %172, i64 0
  %174 = bitcast i8* %173 to i16*
  store i16 %131, i16* %174, align 2
  %175 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 1, i64 0, i64 %172, i64 0
  %176 = bitcast i8* %175 to i16*
  store i16 %133, i16* %176, align 2
  %177 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 0, i64 1, i64 %172, i64 0
  store i8 2, i8* %177, align 1
  %178 = add nuw nsw i64 %165, 2
  %179 = add i64 %166, -2
  %180 = icmp eq i64 %179, 0
  br i1 %180, label %247, label %164

181:                                              ; preds = %181, %123
  %182 = phi i64 [ 0, %123 ], [ %195, %181 ]
  %183 = phi i64 [ %124, %123 ], [ %196, %181 ]
  %184 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 0, i64 0, i64 %182, i64 0
  %185 = bitcast i8* %184 to i32*
  store i32 %118, i32* %185, align 4
  %186 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 1, i64 0, i64 %182, i64 0
  %187 = bitcast i8* %186 to i32*
  store i32 %119, i32* %187, align 4
  %188 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 0, i64 1, i64 %182, i64 0
  store i8 4, i8* %188, align 1
  %189 = or i64 %182, 1
  %190 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 0, i64 0, i64 %189, i64 0
  %191 = bitcast i8* %190 to i32*
  store i32 %118, i32* %191, align 4
  %192 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 1, i64 0, i64 %189, i64 0
  %193 = bitcast i8* %192 to i32*
  store i32 %119, i32* %193, align 4
  %194 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 0, i64 1, i64 %189, i64 0
  store i8 4, i8* %194, align 1
  %195 = add nuw nsw i64 %182, 2
  %196 = add i64 %183, -2
  %197 = icmp eq i64 %196, 0
  br i1 %197, label %256, label %181

198:                                              ; preds = %198, %111
  %199 = phi i64 [ 0, %111 ], [ %212, %198 ]
  %200 = phi i64 [ %112, %111 ], [ %213, %198 ]
  %201 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 0, i64 0, i64 %199, i64 0
  %202 = bitcast i8* %201 to i64*
  store i64 %105, i64* %202, align 8
  %203 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 1, i64 0, i64 %199, i64 0
  %204 = bitcast i8* %203 to i64*
  store i64 %107, i64* %204, align 8
  %205 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 0, i64 1, i64 %199, i64 0
  store i8 8, i8* %205, align 1
  %206 = or i64 %199, 1
  %207 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 0, i64 0, i64 %206, i64 0
  %208 = bitcast i8* %207 to i64*
  store i64 %105, i64* %208, align 8
  %209 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 1, i64 0, i64 %206, i64 0
  %210 = bitcast i8* %209 to i64*
  store i64 %107, i64* %210, align 8
  %211 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 0, i64 1, i64 %206, i64 0
  store i8 8, i8* %211, align 1
  %212 = add nuw nsw i64 %199, 2
  %213 = add i64 %200, -2
  %214 = icmp eq i64 %213, 0
  br i1 %214, label %265, label %198

215:                                              ; preds = %215, %97
  %216 = phi i64 [ 0, %97 ], [ %237, %215 ]
  %217 = phi i64 [ %98, %97 ], [ %238, %215 ]
  %218 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 0, i64 0, i64 %216
  %219 = bitcast [32 x i8]* %218 to i64*
  store i64 %91, i64* %219, align 8
  %220 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 0, i64 0, i64 %216, i64 8
  %221 = bitcast i8* %220 to i64*
  store i64 %91, i64* %221, align 8
  %222 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 1, i64 0, i64 %216
  %223 = bitcast [32 x i8]* %222 to i64*
  store i64 %93, i64* %223, align 8
  %224 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 1, i64 0, i64 %216, i64 8
  %225 = bitcast i8* %224 to i64*
  store i64 %93, i64* %225, align 8
  %226 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 0, i64 1, i64 %216, i64 0
  store i8 16, i8* %226, align 1
  %227 = or i64 %216, 1
  %228 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 0, i64 0, i64 %227
  %229 = bitcast [32 x i8]* %228 to i64*
  store i64 %91, i64* %229, align 8
  %230 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 0, i64 0, i64 %227, i64 8
  %231 = bitcast i8* %230 to i64*
  store i64 %91, i64* %231, align 8
  %232 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 1, i64 0, i64 %227
  %233 = bitcast [32 x i8]* %232 to i64*
  store i64 %93, i64* %233, align 8
  %234 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 1, i64 0, i64 %227, i64 8
  %235 = bitcast i8* %234 to i64*
  store i64 %93, i64* %235, align 8
  %236 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 0, i64 1, i64 %227, i64 0
  store i8 16, i8* %236, align 1
  %237 = add nuw nsw i64 %216, 2
  %238 = add i64 %217, -2
  %239 = icmp eq i64 %238, 0
  br i1 %239, label %274, label %215

240:                                              ; preds = %151, %143
  %241 = phi i64 [ 0, %143 ], [ %161, %151 ]
  %242 = icmp eq i64 %147, 0
  br i1 %242, label %287, label %243

243:                                              ; preds = %240
  %244 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 0, i64 0, i64 %241, i64 0
  store i8 %144, i8* %244, align 1
  %245 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 1, i64 0, i64 %241, i64 0
  store i8 %145, i8* %245, align 1
  %246 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 0, i64 1, i64 %241, i64 0
  store i8 1, i8* %246, align 1
  br label %287

247:                                              ; preds = %164, %129
  %248 = phi i64 [ 0, %129 ], [ %178, %164 ]
  %249 = icmp eq i64 %135, 0
  br i1 %249, label %287, label %250

250:                                              ; preds = %247
  %251 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 0, i64 0, i64 %248, i64 0
  %252 = bitcast i8* %251 to i16*
  store i16 %131, i16* %252, align 2
  %253 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 1, i64 0, i64 %248, i64 0
  %254 = bitcast i8* %253 to i16*
  store i16 %133, i16* %254, align 2
  %255 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 0, i64 1, i64 %248, i64 0
  store i8 2, i8* %255, align 1
  br label %287

256:                                              ; preds = %181, %117
  %257 = phi i64 [ 0, %117 ], [ %195, %181 ]
  %258 = icmp eq i64 %121, 0
  br i1 %258, label %287, label %259

259:                                              ; preds = %256
  %260 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 0, i64 0, i64 %257, i64 0
  %261 = bitcast i8* %260 to i32*
  store i32 %118, i32* %261, align 4
  %262 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 1, i64 0, i64 %257, i64 0
  %263 = bitcast i8* %262 to i32*
  store i32 %119, i32* %263, align 4
  %264 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 0, i64 1, i64 %257, i64 0
  store i8 4, i8* %264, align 1
  br label %287

265:                                              ; preds = %198, %103
  %266 = phi i64 [ 0, %103 ], [ %212, %198 ]
  %267 = icmp eq i64 %109, 0
  br i1 %267, label %287, label %268

268:                                              ; preds = %265
  %269 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 0, i64 0, i64 %266, i64 0
  %270 = bitcast i8* %269 to i64*
  store i64 %105, i64* %270, align 8
  %271 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 1, i64 0, i64 %266, i64 0
  %272 = bitcast i8* %271 to i64*
  store i64 %107, i64* %272, align 8
  %273 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 0, i64 1, i64 %266, i64 0
  store i8 8, i8* %273, align 1
  br label %287

274:                                              ; preds = %215, %89
  %275 = phi i64 [ 0, %89 ], [ %237, %215 ]
  %276 = icmp eq i64 %95, 0
  br i1 %276, label %287, label %277

277:                                              ; preds = %274
  %278 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 0, i64 0, i64 %275
  %279 = bitcast [32 x i8]* %278 to i64*
  store i64 %91, i64* %279, align 8
  %280 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 0, i64 0, i64 %275, i64 8
  %281 = bitcast i8* %280 to i64*
  store i64 %91, i64* %281, align 8
  %282 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 1, i64 0, i64 %275
  %283 = bitcast [32 x i8]* %282 to i64*
  store i64 %93, i64* %283, align 8
  %284 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 1, i64 0, i64 %275, i64 8
  %285 = bitcast i8* %284 to i64*
  store i64 %93, i64* %285, align 8
  %286 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 0, i64 1, i64 %275, i64 0
  store i8 16, i8* %286, align 1
  br label %287

287:                                              ; preds = %277, %274, %268, %265, %259, %256, %250, %247, %243, %240
  %288 = phi i8 [ %141, %240 ], [ %141, %243 ], [ %127, %247 ], [ %127, %250 ], [ %115, %256 ], [ %115, %259 ], [ %101, %265 ], [ %101, %268 ], [ %87, %274 ], [ %87, %277 ]
  switch i8 %84, label %318 [
    i8 1, label %289
    i8 2, label %292
    i8 4, label %298
    i8 8, label %304
    i8 16, label %310
  ]

289:                                              ; preds = %139, %287
  %290 = phi i8 [ %288, %287 ], [ 0, %139 ]
  %291 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 1, i64 1, i64 0, i64 0
  store i8 %290, i8* %291, align 1
  br label %318

292:                                              ; preds = %125, %287
  %293 = phi i8 [ %288, %287 ], [ 0, %125 ]
  %294 = zext i8 %293 to i16
  %295 = mul nuw i16 %294, 257
  %296 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 1, i64 1, i64 0, i64 0
  %297 = bitcast i8* %296 to i16*
  store i16 %295, i16* %297, align 2
  br label %318

298:                                              ; preds = %113, %287
  %299 = phi i8 [ %288, %287 ], [ 0, %113 ]
  %300 = zext i8 %299 to i32
  %301 = mul nuw i32 %300, 16843009
  %302 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 1, i64 1, i64 0, i64 0
  %303 = bitcast i8* %302 to i32*
  store i32 %301, i32* %303, align 4
  br label %318

304:                                              ; preds = %99, %287
  %305 = phi i8 [ %288, %287 ], [ 0, %99 ]
  %306 = zext i8 %305 to i64
  %307 = mul nuw i64 %306, 72340172838076673
  %308 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 1, i64 1, i64 0, i64 0
  %309 = bitcast i8* %308 to i64*
  store i64 %307, i64* %309, align 8
  br label %318

310:                                              ; preds = %85, %287
  %311 = phi i8 [ %288, %287 ], [ 0, %85 ]
  %312 = zext i8 %311 to i64
  %313 = mul nuw i64 %312, 72340172838076673
  %314 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 1, i64 1, i64 0
  %315 = bitcast [32 x i8]* %314 to i64*
  store i64 %313, i64* %315, align 8
  %316 = getelementptr inbounds [2 x [32 x [32 x i8]]], [2 x [32 x [32 x i8]]]* %70, i64 1, i64 1, i64 0, i64 8
  %317 = bitcast i8* %316 to i64*
  store i64 %313, i64* %317, align 8
  br label %318

318:                                              ; preds = %49, %51, %69, %289, %292, %298, %304, %310, %287
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
