; ModuleID = '../../third_party/skia/src/sksl/ir/SkSLConstructorArray.cpp'
source_filename = "../../third_party/skia/src/sksl/ir/SkSLConstructorArray.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.SkSL::Expression" = type { %"class.SkSL::IRNode", %"class.SkSL::Type"* }
%"class.SkSL::IRNode" = type { i32 (...)**, i32, i32 }
%"class.SkSL::Context" = type { %"class.SkSL::BuiltinTypes", %"class.SkSL::ErrorReporter"*, %class.GrShaderCaps*, %"class.SkSL::ModifiersPool"*, %"struct.SkSL::ProgramConfig"* }
%"class.SkSL::BuiltinTypes" = type { %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16" }
%"class.std::__1::unique_ptr.16" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"class.SkSL::Type"* }
%"class.SkSL::ErrorReporter" = type { i32 (...)** }
%class.GrShaderCaps = type <{ %class.SkRefCnt.base, i32, i56, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, [4 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.22" }
%"struct.std::__1::__atomic_base.22" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.SkSL::ModifiersPool" = type { %"class.std::__1::unordered_set" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.23", %"class.std::__1::__compressed_pair.32", %"class.std::__1::__compressed_pair.37", %"class.std::__1::__compressed_pair.39", [4 x i8] }>
%"class.std::__1::unique_ptr.23" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25", %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { i64 }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { float }
%"struct.SkSL::ProgramConfig" = type { i8, %"struct.SkSL::ProgramSettings" }
%"struct.SkSL::ProgramSettings" = type { i8, i8, i8, i8, i8, i32, i32, i32, i32, i32, i8, i8, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, %"class.std::__1::vector.42"* }
%"class.std::__1::vector.42" = type opaque
%"class.SkSL::Type" = type { %"class.SkSL::Symbol", i8*, %"class.SkSL::String", i32, i32, i32, %"class.SkSL::Type"*, %"class.std::__1::vector", i32, i32, %"class.std::__1::vector.8", i32, i8, i8, i8, i8, i8, %"class.SkSL::Type"*, %"class.SkSL::Type"* }
%"class.SkSL::Symbol" = type { %"class.SkSL::IRNode", %"struct.SkSL::StringFragment", %"class.SkSL::Type"* }
%"struct.SkSL::StringFragment" = type { i8*, i64 }
%"class.SkSL::String" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.0" }
%"class.std::__1::__compressed_pair.0" = type { %"struct.std::__1::__compressed_pair_elem.1" }
%"struct.std::__1::__compressed_pair_elem.1" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.SkSL::Type"**, %"class.SkSL::Type"**, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.SkSL::Type"** }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { %"struct.SkSL::Type::Field"*, %"struct.SkSL::Type::Field"*, %"class.std::__1::__compressed_pair.10" }
%"struct.SkSL::Type::Field" = type { %"struct.SkSL::Modifiers", %"struct.SkSL::StringFragment", %"class.SkSL::Type"* }
%"struct.SkSL::Modifiers" = type { %"struct.SkSL::Layout", i32, [4 x i8] }
%"struct.SkSL::Layout" = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], %"struct.SkSL::StringFragment", i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.SkSL::Type::Field"* }
%class.SkSTArray = type { %class.SkAlignedSTStorage, %class.SkTArray }
%class.SkAlignedSTStorage = type { [16 x i8] }
%class.SkTArray = type { %"class.std::__1::unique_ptr"*, i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.SkSL::Expression"* }
%"class.std::__1::__basic_string_common" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.SkSL::ConstructorArray" = type { %"class.SkSL::MultiArgumentConstructor" }
%"class.SkSL::MultiArgumentConstructor" = type { %"class.SkSL::AnyConstructor", %class.SkSTArray }
%"class.SkSL::AnyConstructor" = type { %"class.SkSL::Expression", %"class.std::__1::unique_ptr" }

$_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL10ExpressionENS0_14default_deleteIS3_EEEELb0EEaSEOS7_ = comdat any

$_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL10ExpressionENS0_14default_deleteIS3_EEEELb0EE12checkReallocEiNS7_11ReallocTypeE = comdat any

$_ZN4SkSL16ConstructorArrayC2EiRKNS_4TypeE9SkSTArrayILi2ENSt3__110unique_ptrINS_10ExpressionENS5_14default_deleteIS7_EEEELb0EE = comdat any

$_ZN4SkSL16ConstructorArrayD0Ev = comdat any

$_ZNK4SkSL14AnyConstructor11descriptionEv = comdat any

$_ZNK4SkSL10Expression4typeEv = comdat any

$_ZNK4SkSL14AnyConstructor21isCompileTimeConstantEv = comdat any

$_ZNK4SkSL14AnyConstructor19isConstantOrUniformEv = comdat any

$_ZNK4SkSL14AnyConstructor11hasPropertyENS_10Expression8PropertyE = comdat any

$_ZNK4SkSL10Expression12coercionCostERKNS_4TypeE = comdat any

$_ZNK4SkSL16ConstructorArray5cloneEv = comdat any

$_ZN4SkSL24MultiArgumentConstructor12argumentSpanEv = comdat any

$_ZNK4SkSL24MultiArgumentConstructor12argumentSpanEv = comdat any

$_ZN4SkSL24MultiArgumentConstructorD2Ev = comdat any

$_ZN4SkSL24MultiArgumentConstructorD0Ev = comdat any

$_ZNK4SkSL24MultiArgumentConstructor14cloneArgumentsEv = comdat any

$_ZTVN4SkSL16ConstructorArrayE = comdat any

$_ZTVN4SkSL24MultiArgumentConstructorE = comdat any

@.str = private unnamed_addr constant [29 x i8] c"construction of array type '\00", align 1
@.str.1 = private unnamed_addr constant [19 x i8] c"' is not supported\00", align 1
@.str.2 = private unnamed_addr constant [75 x i8] c"invalid arguments to '%s' constructor (expected %d elements, but found %d)\00", align 1
@_ZTVN4SkSL16ConstructorArrayE = linkonce_odr hidden unnamed_addr constant { [15 x i8*] } { [15 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.SkSL::MultiArgumentConstructor"*)* @_ZN4SkSL24MultiArgumentConstructorD2Ev to i8*), i8* bitcast (void (%"class.SkSL::ConstructorArray"*)* @_ZN4SkSL16ConstructorArrayD0Ev to i8*), i8* bitcast (void (%"class.SkSL::String"*, %"class.SkSL::AnyConstructor"*)* @_ZNK4SkSL14AnyConstructor11descriptionEv to i8*), i8* bitcast (%"class.SkSL::Type"* (%"class.SkSL::Expression"*)* @_ZNK4SkSL10Expression4typeEv to i8*), i8* bitcast (i1 (%"class.SkSL::AnyConstructor"*)* @_ZNK4SkSL14AnyConstructor21isCompileTimeConstantEv to i8*), i8* bitcast (i32 (%"class.SkSL::AnyConstructor"*, %"class.SkSL::Expression"*)* @_ZNK4SkSL14AnyConstructor15compareConstantERKNS_10ExpressionE to i8*), i8* bitcast (i1 (%"class.SkSL::AnyConstructor"*)* @_ZNK4SkSL14AnyConstructor19isConstantOrUniformEv to i8*), i8* bitcast (i1 (%"class.SkSL::AnyConstructor"*, i32)* @_ZNK4SkSL14AnyConstructor11hasPropertyENS_10Expression8PropertyE to i8*), i8* bitcast ({ i64, i8 } (%"class.SkSL::Expression"*, %"class.SkSL::Type"*)* @_ZNK4SkSL10Expression12coercionCostERKNS_4TypeE to i8*), i8* bitcast (%"class.SkSL::Expression"* (%"class.SkSL::AnyConstructor"*, i32)* @_ZNK4SkSL14AnyConstructor24getConstantSubexpressionEi to i8*), i8* bitcast (%"class.SkSL::Expression"* (%"class.SkSL::ConstructorArray"*)* @_ZNK4SkSL16ConstructorArray5cloneEv to i8*), i8* bitcast ({ %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::MultiArgumentConstructor"*)* @_ZN4SkSL24MultiArgumentConstructor12argumentSpanEv to i8*), i8* bitcast ({ %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::MultiArgumentConstructor"*)* @_ZNK4SkSL24MultiArgumentConstructor12argumentSpanEv to i8*)] }, comdat, align 8
@_ZTVN4SkSL24MultiArgumentConstructorE = linkonce_odr hidden unnamed_addr constant { [15 x i8*] } { [15 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.SkSL::MultiArgumentConstructor"*)* @_ZN4SkSL24MultiArgumentConstructorD2Ev to i8*), i8* bitcast (void (%"class.SkSL::MultiArgumentConstructor"*)* @_ZN4SkSL24MultiArgumentConstructorD0Ev to i8*), i8* bitcast (void (%"class.SkSL::String"*, %"class.SkSL::AnyConstructor"*)* @_ZNK4SkSL14AnyConstructor11descriptionEv to i8*), i8* bitcast (%"class.SkSL::Type"* (%"class.SkSL::Expression"*)* @_ZNK4SkSL10Expression4typeEv to i8*), i8* bitcast (i1 (%"class.SkSL::AnyConstructor"*)* @_ZNK4SkSL14AnyConstructor21isCompileTimeConstantEv to i8*), i8* bitcast (i32 (%"class.SkSL::AnyConstructor"*, %"class.SkSL::Expression"*)* @_ZNK4SkSL14AnyConstructor15compareConstantERKNS_10ExpressionE to i8*), i8* bitcast (i1 (%"class.SkSL::AnyConstructor"*)* @_ZNK4SkSL14AnyConstructor19isConstantOrUniformEv to i8*), i8* bitcast (i1 (%"class.SkSL::AnyConstructor"*, i32)* @_ZNK4SkSL14AnyConstructor11hasPropertyENS_10Expression8PropertyE to i8*), i8* bitcast ({ i64, i8 } (%"class.SkSL::Expression"*, %"class.SkSL::Type"*)* @_ZNK4SkSL10Expression12coercionCostERKNS_4TypeE to i8*), i8* bitcast (%"class.SkSL::Expression"* (%"class.SkSL::AnyConstructor"*, i32)* @_ZNK4SkSL14AnyConstructor24getConstantSubexpressionEi to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast ({ %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::MultiArgumentConstructor"*)* @_ZN4SkSL24MultiArgumentConstructor12argumentSpanEv to i8*), i8* bitcast ({ %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::MultiArgumentConstructor"*)* @_ZNK4SkSL24MultiArgumentConstructor12argumentSpanEv to i8*)] }, comdat, align 8
@_ZTVN4SkSL14AnyConstructorE = external unnamed_addr constant { [15 x i8*] }, align 8
@.str.4 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.5 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.6 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c")\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.SkSL::Expression"* @_ZN4SkSL16ConstructorArray7ConvertERKNS_7ContextEiRKNS_4TypeE9SkSTArrayILi2ENSt3__110unique_ptrINS_10ExpressionENS8_14default_deleteISA_EEEELb0EE(%"class.SkSL::Context"* dereferenceable(744), i32, %"class.SkSL::Type"* dereferenceable(184), %class.SkSTArray*) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.SkSL::String", align 8
  %6 = alloca %"class.SkSL::String", align 8
  %7 = alloca %"class.SkSL::String", align 8
  %8 = alloca %"class.SkSL::String", align 8
  %9 = alloca %"class.SkSL::String", align 8
  %10 = alloca %class.SkSTArray, align 8
  %11 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 4
  %12 = load %"struct.SkSL::ProgramConfig"*, %"struct.SkSL::ProgramConfig"** %11, align 8
  %13 = getelementptr inbounds %"struct.SkSL::ProgramConfig", %"struct.SkSL::ProgramConfig"* %12, i64 0, i32 1, i32 19
  %14 = load i8, i8* %13, align 1, !range !2
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %85, label %16

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"struct.SkSL::ProgramConfig", %"struct.SkSL::ProgramConfig"* %12, i64 0, i32 0
  %18 = load i8, i8* %17, align 8
  %19 = add i8 %18, -4
  %20 = icmp ult i8 %19, 3
  br i1 %20, label %21, label %85

21:                                               ; preds = %16
  %22 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 1
  %23 = load %"class.SkSL::ErrorReporter"*, %"class.SkSL::ErrorReporter"** %22, align 8
  %24 = bitcast %"class.SkSL::String"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %24) #8
  %25 = bitcast %"class.SkSL::String"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %25) #8
  %26 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %2, i64 0, i32 18
  %27 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %26, align 8, !noalias !3
  %28 = icmp eq %"class.SkSL::Type"* %27, null
  %29 = select i1 %28, %"class.SkSL::Type"* %2, %"class.SkSL::Type"* %27
  %30 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %29, i64 0, i32 0, i32 1, i32 0
  %31 = load i8*, i8** %30, align 8, !noalias !3
  %32 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %29, i64 0, i32 0, i32 1, i32 1
  %33 = load i64, i64* %32, align 8, !noalias !3
  %34 = icmp ugt i64 %33, -17
  br i1 %34, label %35, label %37

35:                                               ; preds = %21
  %36 = bitcast %"class.SkSL::String"* %7 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %36) #9
  unreachable

37:                                               ; preds = %21
  %38 = icmp ult i64 %33, 23
  br i1 %38, label %47, label %39

39:                                               ; preds = %37
  %40 = add nuw i64 %33, 16
  %41 = and i64 %40, -16
  %42 = tail call i8* @_Znwm(i64 %41) #10
  %43 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %42, i8** %43, align 8, !alias.scope !3
  %44 = or i64 %41, -9223372036854775808
  %45 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %44, i64* %45, align 8, !alias.scope !3
  %46 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %33, i64* %46, align 8, !alias.scope !3
  br label %52

47:                                               ; preds = %37
  %48 = trunc i64 %33 to i8
  %49 = bitcast %"class.SkSL::String"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %50 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %49, i64 0, i32 1, i32 0
  store i8 %48, i8* %50, align 1, !alias.scope !3
  %51 = icmp eq i64 %33, 0
  br i1 %51, label %54, label %52

52:                                               ; preds = %47, %39
  %53 = phi i8* [ %42, %39 ], [ %25, %47 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %53, i8* align 1 %31, i64 %33, i1 false) #8
  br label %54

54:                                               ; preds = %47, %52
  %55 = phi i8* [ %25, %47 ], [ %53, %52 ]
  %56 = getelementptr inbounds i8, i8* %55, i64 %33
  store i8 0, i8* %56, align 1
  call void @_ZN4SkSLplEPKcRKNS_6StringE(%"class.SkSL::String"* nonnull sret %6, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i64 0, i64 0), %"class.SkSL::String"* nonnull dereferenceable(24) %7) #8
  call void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* nonnull sret %5, %"class.SkSL::String"* nonnull %6, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0)) #8
  %57 = bitcast %"class.SkSL::ErrorReporter"* %23 to void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)***
  %58 = load void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)**, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*** %57, align 8
  %59 = getelementptr inbounds void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)** %58, i64 2
  %60 = load void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)** %59, align 8
  call void %60(%"class.SkSL::ErrorReporter"* %23, i32 %1, %"class.SkSL::String"* nonnull %5) #8
  %61 = bitcast %"class.SkSL::String"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %62 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %61, i64 0, i32 1, i32 0
  %63 = load i8, i8* %62, align 1
  %64 = icmp slt i8 %63, 0
  br i1 %64, label %65, label %68

65:                                               ; preds = %54
  %66 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %67 = load i8*, i8** %66, align 8
  call void @_ZdlPv(i8* %67) #10
  br label %68

68:                                               ; preds = %54, %65
  %69 = bitcast %"class.SkSL::String"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %70 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %69, i64 0, i32 1, i32 0
  %71 = load i8, i8* %70, align 1
  %72 = icmp slt i8 %71, 0
  br i1 %72, label %73, label %76

73:                                               ; preds = %68
  %74 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %75 = load i8*, i8** %74, align 8
  call void @_ZdlPv(i8* %75) #10
  br label %76

76:                                               ; preds = %68, %73
  %77 = bitcast %"class.SkSL::String"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %78 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %77, i64 0, i32 1, i32 0
  %79 = load i8, i8* %78, align 1
  %80 = icmp slt i8 %79, 0
  br i1 %80, label %81, label %84

81:                                               ; preds = %76
  %82 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %83 = load i8*, i8** %82, align 8
  call void @_ZdlPv(i8* %83) #10
  br label %84

84:                                               ; preds = %76, %81
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %25) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %24) #8
  br label %229

85:                                               ; preds = %4, %16
  %86 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %2, i64 0, i32 8
  %87 = load i32, i32* %86, align 8
  %88 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %3, i64 0, i32 0, i32 0, i64 16
  %89 = bitcast i8* %88 to %class.SkTArray*
  %90 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %3, i64 0, i32 0, i32 0, i64 24
  %91 = bitcast i8* %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = lshr i64 %92, 1
  %94 = trunc i64 %93 to i32
  %95 = and i32 %94, 2147483647
  %96 = icmp eq i32 %87, %95
  br i1 %96, label %158, label %97

97:                                               ; preds = %85
  %98 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 1
  %99 = load %"class.SkSL::ErrorReporter"*, %"class.SkSL::ErrorReporter"** %98, align 8
  %100 = bitcast %"class.SkSL::String"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %100) #8
  %101 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %2, i64 0, i32 18
  %102 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %101, align 8, !noalias !6
  %103 = icmp eq %"class.SkSL::Type"* %102, null
  %104 = select i1 %103, %"class.SkSL::Type"* %2, %"class.SkSL::Type"* %102
  %105 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %104, i64 0, i32 0, i32 1, i32 0
  %106 = load i8*, i8** %105, align 8, !noalias !6
  %107 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %104, i64 0, i32 0, i32 1, i32 1
  %108 = load i64, i64* %107, align 8, !noalias !6
  %109 = icmp ugt i64 %108, -17
  br i1 %109, label %110, label %112

110:                                              ; preds = %97
  %111 = bitcast %"class.SkSL::String"* %9 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %111) #9
  unreachable

112:                                              ; preds = %97
  %113 = icmp ult i64 %108, 23
  br i1 %113, label %123, label %114

114:                                              ; preds = %112
  %115 = add nuw i64 %108, 16
  %116 = and i64 %115, -16
  %117 = tail call i8* @_Znwm(i64 %116) #10
  %118 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %117, i8** %118, align 8, !alias.scope !6
  %119 = or i64 %116, -9223372036854775808
  %120 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %119, i64* %120, align 8, !alias.scope !6
  %121 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %108, i64* %121, align 8, !alias.scope !6
  %122 = bitcast %"class.SkSL::String"* %9 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %128

123:                                              ; preds = %112
  %124 = trunc i64 %108 to i8
  %125 = bitcast %"class.SkSL::String"* %9 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %126 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %125, i64 0, i32 1, i32 0
  store i8 %124, i8* %126, align 1, !alias.scope !6
  %127 = icmp eq i64 %108, 0
  br i1 %127, label %131, label %128

128:                                              ; preds = %123, %114
  %129 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %125, %123 ], [ %122, %114 ]
  %130 = phi i8* [ %100, %123 ], [ %117, %114 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %130, i8* align 1 %106, i64 %108, i1 false) #8
  br label %131

131:                                              ; preds = %123, %128
  %132 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %125, %123 ], [ %129, %128 ]
  %133 = phi i8* [ %100, %123 ], [ %130, %128 ]
  %134 = getelementptr inbounds i8, i8* %133, i64 %108
  store i8 0, i8* %134, align 1
  %135 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %132, i64 0, i32 1, i32 0
  %136 = load i8, i8* %135, align 1
  %137 = icmp slt i8 %136, 0
  %138 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %139 = load i8*, i8** %138, align 8
  %140 = select i1 %137, i8* %139, i8* %100
  call void (%"class.SkSL::String"*, i8*, ...) @_ZN4SkSL6String6printfEPKcz(%"class.SkSL::String"* nonnull sret %8, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.2, i64 0, i64 0), i8* %140, i32 %87, i32 %95) #8
  %141 = bitcast %"class.SkSL::ErrorReporter"* %99 to void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)***
  %142 = load void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)**, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*** %141, align 8
  %143 = getelementptr inbounds void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)** %142, i64 2
  %144 = load void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)** %143, align 8
  call void %144(%"class.SkSL::ErrorReporter"* %99, i32 %1, %"class.SkSL::String"* nonnull %8) #8
  %145 = bitcast %"class.SkSL::String"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %146 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %145, i64 0, i32 1, i32 0
  %147 = load i8, i8* %146, align 1
  %148 = icmp slt i8 %147, 0
  br i1 %148, label %149, label %152

149:                                              ; preds = %131
  %150 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %151 = load i8*, i8** %150, align 8
  call void @_ZdlPv(i8* %151) #10
  br label %152

152:                                              ; preds = %131, %149
  %153 = load i8, i8* %135, align 1
  %154 = icmp slt i8 %153, 0
  br i1 %154, label %155, label %157

155:                                              ; preds = %152
  %156 = load i8*, i8** %138, align 8
  call void @_ZdlPv(i8* %156) #10
  br label %157

157:                                              ; preds = %152, %155
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %100) #8
  br label %229

158:                                              ; preds = %85
  %159 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %2, i64 0, i32 6
  %160 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %159, align 8
  %161 = icmp eq %"class.SkSL::Type"* %160, null
  %162 = select i1 %161, %"class.SkSL::Type"* %2, %"class.SkSL::Type"* %160
  %163 = bitcast i8* %88 to %"class.std::__1::unique_ptr"**
  %164 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %163, align 8
  %165 = icmp eq %"class.std::__1::unique_ptr"* %164, null
  %166 = and i64 %93, 2147483647
  %167 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %164, i64 %166
  %168 = select i1 %165, %"class.std::__1::unique_ptr"* null, %"class.std::__1::unique_ptr"* %167
  %169 = icmp eq %"class.std::__1::unique_ptr"* %164, %168
  br i1 %169, label %191, label %172

170:                                              ; preds = %187
  %171 = icmp eq %"class.std::__1::unique_ptr"* %190, %168
  br i1 %171, label %191, label %172

172:                                              ; preds = %158, %170
  %173 = phi %"class.std::__1::unique_ptr"* [ %190, %170 ], [ %164, %158 ]
  %174 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %173, i64 0, i32 0, i32 0, i32 0
  %175 = bitcast %"class.std::__1::unique_ptr"* %173 to i64*
  %176 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %174, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %174, align 8
  %177 = tail call %"class.SkSL::Expression"* @_ZNK4SkSL4Type16coerceExpressionENSt3__110unique_ptrINS_10ExpressionENS1_14default_deleteIS3_EEEERKNS_7ContextE(%"class.SkSL::Type"* %162, %"class.SkSL::Expression"* %176, %"class.SkSL::Context"* dereferenceable(744) %0) #8
  %178 = ptrtoint %"class.SkSL::Expression"* %177 to i64
  %179 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %174, align 8
  store i64 %178, i64* %175, align 8
  %180 = icmp eq %"class.SkSL::Expression"* %179, null
  br i1 %180, label %187, label %181

181:                                              ; preds = %172
  %182 = bitcast %"class.SkSL::Expression"* %179 to void (%"class.SkSL::Expression"*)***
  %183 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %182, align 8
  %184 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %183, i64 1
  %185 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %184, align 8
  tail call void %185(%"class.SkSL::Expression"* nonnull %179) #8
  %186 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %174, align 8
  br label %187

187:                                              ; preds = %181, %172
  %188 = phi %"class.SkSL::Expression"* [ %186, %181 ], [ %177, %172 ]
  %189 = icmp eq %"class.SkSL::Expression"* %188, null
  %190 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %173, i64 1
  br i1 %189, label %229, label %170

191:                                              ; preds = %170, %158
  %192 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %10, i64 0, i32 0, i32 0, i64 16
  %193 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %10, i64 0, i32 0, i32 0, i64 0
  %194 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %10, i64 0, i32 0, i32 0, i64 24
  %195 = bitcast i8* %194 to i64*
  %196 = bitcast i8* %192 to i8**
  store i8* %193, i8** %196, align 8
  store i64 17179869184, i64* %195, align 8
  %197 = bitcast i8* %192 to %class.SkTArray*
  %198 = call dereferenceable(16) %class.SkTArray* @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL10ExpressionENS0_14default_deleteIS3_EEEELb0EEaSEOS7_(%class.SkTArray* %197, %class.SkTArray* dereferenceable(16) %89) #8
  %199 = call %"class.SkSL::Expression"* @_ZN4SkSL16ConstructorArray4MakeERKNS_7ContextEiRKNS_4TypeE9SkSTArrayILi2ENSt3__110unique_ptrINS_10ExpressionENS8_14default_deleteISA_EEEELb0EE(%"class.SkSL::Context"* dereferenceable(744) undef, i32 %1, %"class.SkSL::Type"* dereferenceable(184) %2, %class.SkSTArray* nonnull %10)
  %200 = ptrtoint %"class.SkSL::Expression"* %199 to i64
  %201 = load i64, i64* %195, align 8
  %202 = and i64 %201, 4294967294
  %203 = icmp eq i64 %202, 0
  br i1 %203, label %206, label %204

204:                                              ; preds = %191
  %205 = bitcast i8* %192 to %"class.std::__1::unique_ptr"**
  br label %210

206:                                              ; preds = %221, %191
  %207 = phi i64 [ %201, %191 ], [ %223, %221 ]
  %208 = and i64 %207, 1
  %209 = icmp eq i64 %208, 0
  br i1 %209, label %229, label %227

210:                                              ; preds = %221, %204
  %211 = phi i64 [ 0, %204 ], [ %222, %221 ]
  %212 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %205, align 8
  %213 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %212, i64 %211, i32 0, i32 0, i32 0
  %214 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %213, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %213, align 8
  %215 = icmp eq %"class.SkSL::Expression"* %214, null
  br i1 %215, label %221, label %216

216:                                              ; preds = %210
  %217 = bitcast %"class.SkSL::Expression"* %214 to void (%"class.SkSL::Expression"*)***
  %218 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %217, align 8
  %219 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %218, i64 1
  %220 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %219, align 8
  call void %220(%"class.SkSL::Expression"* nonnull %214) #8
  br label %221

221:                                              ; preds = %216, %210
  %222 = add nuw nsw i64 %211, 1
  %223 = load i64, i64* %195, align 8
  %224 = lshr i64 %223, 1
  %225 = and i64 %224, 2147483647
  %226 = icmp ult i64 %222, %225
  br i1 %226, label %210, label %206

227:                                              ; preds = %206
  %228 = load i8*, i8** %196, align 8
  call void @_Z7sk_freePv(i8* %228) #8
  br label %229

229:                                              ; preds = %187, %227, %206, %157, %84
  %230 = phi i64 [ 0, %84 ], [ 0, %157 ], [ %200, %206 ], [ %200, %227 ], [ 0, %187 ]
  %231 = inttoptr i64 %230 to %"class.SkSL::Expression"*
  ret %"class.SkSL::Expression"* %231
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN4SkSLplEPKcRKNS_6StringE(%"class.SkSL::String"* sret, i8*, %"class.SkSL::String"* dereferenceable(24)) local_unnamed_addr #2

declare void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* sret, %"class.SkSL::String"*, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN4SkSL6String6printfEPKcz(%"class.SkSL::String"* sret, i8*, ...) local_unnamed_addr #2

declare %"class.SkSL::Expression"* @_ZNK4SkSL4Type16coerceExpressionENSt3__110unique_ptrINS_10ExpressionENS1_14default_deleteIS3_EEEERKNS_7ContextE(%"class.SkSL::Type"*, %"class.SkSL::Expression"*, %"class.SkSL::Context"* dereferenceable(744)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.SkSL::Expression"* @_ZN4SkSL16ConstructorArray4MakeERKNS_7ContextEiRKNS_4TypeE9SkSTArrayILi2ENSt3__110unique_ptrINS_10ExpressionENS8_14default_deleteISA_EEEELb0EE(%"class.SkSL::Context"* nocapture readnone dereferenceable(744), i32, %"class.SkSL::Type"* dereferenceable(184), %class.SkSTArray*) local_unnamed_addr #0 align 2 {
  %5 = alloca %class.SkSTArray, align 8
  %6 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %5, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6)
  %7 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 64) #8
  %8 = bitcast i8* %7 to %"class.SkSL::ConstructorArray"*
  %9 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %5, i64 0, i32 0, i32 0, i64 16
  %10 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %5, i64 0, i32 0, i32 0, i64 24
  %11 = bitcast i8* %10 to i64*
  %12 = bitcast i8* %9 to i8**
  store i8* %6, i8** %12, align 8
  store i64 17179869184, i64* %11, align 8
  %13 = bitcast i8* %9 to %class.SkTArray*
  %14 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %3, i64 0, i32 0, i32 0, i64 16
  %15 = bitcast i8* %14 to %class.SkTArray*
  %16 = call dereferenceable(16) %class.SkTArray* @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL10ExpressionENS0_14default_deleteIS3_EEEELb0EEaSEOS7_(%class.SkTArray* %13, %class.SkTArray* dereferenceable(16) %15) #8
  call void @_ZN4SkSL16ConstructorArrayC2EiRKNS_4TypeE9SkSTArrayILi2ENSt3__110unique_ptrINS_10ExpressionENS5_14default_deleteIS7_EEEELb0EE(%"class.SkSL::ConstructorArray"* %8, i32 %1, %"class.SkSL::Type"* dereferenceable(184) %2, %class.SkSTArray* nonnull %5) #8
  %17 = load i64, i64* %11, align 8
  %18 = and i64 %17, 4294967294
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %22, label %20

20:                                               ; preds = %4
  %21 = bitcast i8* %9 to %"class.std::__1::unique_ptr"**
  br label %26

22:                                               ; preds = %37, %4
  %23 = phi i64 [ %17, %4 ], [ %39, %37 ]
  %24 = and i64 %23, 1
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %45, label %43

26:                                               ; preds = %37, %20
  %27 = phi i64 [ 0, %20 ], [ %38, %37 ]
  %28 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %21, align 8
  %29 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %28, i64 %27, i32 0, i32 0, i32 0
  %30 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %29, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %29, align 8
  %31 = icmp eq %"class.SkSL::Expression"* %30, null
  br i1 %31, label %37, label %32

32:                                               ; preds = %26
  %33 = bitcast %"class.SkSL::Expression"* %30 to void (%"class.SkSL::Expression"*)***
  %34 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %33, align 8
  %35 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %34, i64 1
  %36 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %35, align 8
  call void %36(%"class.SkSL::Expression"* nonnull %30) #8
  br label %37

37:                                               ; preds = %32, %26
  %38 = add nuw nsw i64 %27, 1
  %39 = load i64, i64* %11, align 8
  %40 = lshr i64 %39, 1
  %41 = and i64 %40, 2147483647
  %42 = icmp ult i64 %38, %41
  br i1 %42, label %26, label %22

43:                                               ; preds = %22
  %44 = load i8*, i8** %12, align 8
  call void @_Z7sk_freePv(i8* %44) #8
  br label %45

45:                                               ; preds = %43, %22
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6)
  %46 = bitcast i8* %7 to %"class.SkSL::Expression"*
  ret %"class.SkSL::Expression"* %46
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #2

declare i8* @_Z15sk_malloc_throwmm(i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %class.SkTArray* @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL10ExpressionENS0_14default_deleteIS3_EEEELb0EEaSEOS7_(%class.SkTArray*, %class.SkTArray* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %class.SkTArray* %0, %1
  br i1 %3, label %76, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = and i64 %6, 4294967294
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 0
  br label %59

11:                                               ; preds = %70, %4
  %12 = phi i64 [ %6, %4 ], [ %72, %70 ]
  %13 = and i64 %12, -4294967295
  store i64 %13, i64* %5, align 8
  %14 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %1, i64 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = lshr i64 %15, 1
  %17 = trunc i64 %16 to i32
  %18 = and i32 %17, 2147483647
  tail call void @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL10ExpressionENS0_14default_deleteIS3_EEEELb0EE12checkReallocEiNS7_11ReallocTypeE(%class.SkTArray* %0, i32 %18, i32 0)
  %19 = load i64, i64* %14, align 8
  %20 = and i64 %19, 4294967294
  %21 = load i64, i64* %5, align 8
  %22 = and i64 %21, -4294967295
  %23 = or i64 %22, %20
  store i64 %23, i64* %5, align 8
  %24 = bitcast %class.SkTArray* %0 to i8**
  %25 = load i8*, i8** %24, align 8
  %26 = load i64, i64* %14, align 8
  %27 = and i64 %26, 4294967294
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %56, label %29

29:                                               ; preds = %11
  %30 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %1, i64 0, i32 0
  br label %31

31:                                               ; preds = %50, %29
  %32 = phi i64 [ 0, %29 ], [ %51, %50 ]
  %33 = shl nuw nsw i64 %32, 3
  %34 = getelementptr inbounds i8, i8* %25, i64 %33
  %35 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %30, align 8
  %36 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %35, i64 %32
  %37 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %36, i64 0, i32 0, i32 0, i32 0
  %38 = bitcast %"class.std::__1::unique_ptr"* %36 to i64*
  %39 = load i64, i64* %38, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %37, align 8
  %40 = bitcast i8* %34 to i64*
  store i64 %39, i64* %40, align 8
  %41 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %30, align 8
  %42 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %41, i64 %32, i32 0, i32 0, i32 0
  %43 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %42, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %42, align 8
  %44 = icmp eq %"class.SkSL::Expression"* %43, null
  br i1 %44, label %50, label %45

45:                                               ; preds = %31
  %46 = bitcast %"class.SkSL::Expression"* %43 to void (%"class.SkSL::Expression"*)***
  %47 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %46, align 8
  %48 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %47, i64 1
  %49 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %48, align 8
  tail call void %49(%"class.SkSL::Expression"* nonnull %43) #8
  br label %50

50:                                               ; preds = %45, %31
  %51 = add nuw nsw i64 %32, 1
  %52 = load i64, i64* %14, align 8
  %53 = lshr i64 %52, 1
  %54 = and i64 %53, 2147483647
  %55 = icmp ult i64 %51, %54
  br i1 %55, label %31, label %56

56:                                               ; preds = %50, %11
  %57 = phi i64 [ %26, %11 ], [ %52, %50 ]
  %58 = and i64 %57, -4294967295
  store i64 %58, i64* %14, align 8
  br label %76

59:                                               ; preds = %9, %70
  %60 = phi i64 [ 0, %9 ], [ %71, %70 ]
  %61 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %10, align 8
  %62 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %61, i64 %60, i32 0, i32 0, i32 0
  %63 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %62, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %62, align 8
  %64 = icmp eq %"class.SkSL::Expression"* %63, null
  br i1 %64, label %70, label %65

65:                                               ; preds = %59
  %66 = bitcast %"class.SkSL::Expression"* %63 to void (%"class.SkSL::Expression"*)***
  %67 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %66, align 8
  %68 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %67, i64 1
  %69 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %68, align 8
  tail call void %69(%"class.SkSL::Expression"* nonnull %63) #8
  br label %70

70:                                               ; preds = %59, %65
  %71 = add nuw nsw i64 %60, 1
  %72 = load i64, i64* %5, align 8
  %73 = lshr i64 %72, 1
  %74 = and i64 %73, 2147483647
  %75 = icmp ult i64 %71, %74
  br i1 %75, label %59, label %11

76:                                               ; preds = %2, %56
  ret %class.SkTArray* %0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL10ExpressionENS0_14default_deleteIS3_EEEELb0EE12checkReallocEiNS7_11ReallocTypeE(%class.SkTArray*, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 1
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2147483647
  %9 = add nsw i32 %8, %1
  %10 = sext i32 %9 to i64
  %11 = lshr i64 %5, 33
  %12 = icmp slt i64 %11, %10
  %13 = mul nsw i64 %10, 3
  %14 = icmp sle i64 %11, %13
  %15 = and i64 %5, 1
  %16 = icmp eq i64 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = and i64 %5, 4294967296
  %20 = icmp eq i64 %19, 0
  br label %21

21:                                               ; preds = %3, %18
  %22 = phi i1 [ false, %3 ], [ %20, %18 ]
  %23 = or i1 %12, %22
  br i1 %23, label %24, label %87

24:                                               ; preds = %21
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = add nsw i64 %10, 1
  %28 = ashr i64 %27, 1
  %29 = add nsw i64 %10, 7
  %30 = add nsw i64 %29, %28
  %31 = and i64 %30, -8
  br label %32

32:                                               ; preds = %24, %26
  %33 = phi i64 [ %31, %26 ], [ %10, %24 ]
  %34 = icmp eq i64 %33, %11
  br i1 %34, label %87, label %35

35:                                               ; preds = %32
  %36 = icmp slt i64 %33, 2147483647
  %37 = select i1 %36, i64 %33, i64 2147483647
  %38 = icmp sgt i64 %37, -2147483647
  %39 = select i1 %38, i64 %37, i64 -2147483647
  %40 = shl i64 %39, 33
  %41 = and i64 %5, 8589934591
  %42 = or i64 %40, %41
  store i64 %42, i64* %4, align 8
  %43 = and i64 %39, 2147483647
  %44 = tail call i8* @_Z15sk_malloc_throwmm(i64 %43, i64 8) #8
  %45 = load i64, i64* %4, align 8
  %46 = and i64 %45, 4294967294
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %75, label %48

48:                                               ; preds = %35
  %49 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 0
  br label %50

50:                                               ; preds = %69, %48
  %51 = phi i64 [ 0, %48 ], [ %70, %69 ]
  %52 = shl nuw nsw i64 %51, 3
  %53 = getelementptr inbounds i8, i8* %44, i64 %52
  %54 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %49, align 8
  %55 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %54, i64 %51
  %56 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %55, i64 0, i32 0, i32 0, i32 0
  %57 = bitcast %"class.std::__1::unique_ptr"* %55 to i64*
  %58 = load i64, i64* %57, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %56, align 8
  %59 = bitcast i8* %53 to i64*
  store i64 %58, i64* %59, align 8
  %60 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %49, align 8
  %61 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %60, i64 %51, i32 0, i32 0, i32 0
  %62 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %61, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %61, align 8
  %63 = icmp eq %"class.SkSL::Expression"* %62, null
  br i1 %63, label %69, label %64

64:                                               ; preds = %50
  %65 = bitcast %"class.SkSL::Expression"* %62 to void (%"class.SkSL::Expression"*)***
  %66 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %65, align 8
  %67 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %66, i64 1
  %68 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %67, align 8
  tail call void %68(%"class.SkSL::Expression"* nonnull %62) #8
  br label %69

69:                                               ; preds = %64, %50
  %70 = add nuw nsw i64 %51, 1
  %71 = load i64, i64* %4, align 8
  %72 = lshr i64 %71, 1
  %73 = and i64 %72, 2147483647
  %74 = icmp ult i64 %70, %73
  br i1 %74, label %50, label %75

75:                                               ; preds = %69, %35
  %76 = phi i64 [ %45, %35 ], [ %71, %69 ]
  %77 = and i64 %76, 1
  %78 = icmp eq i64 %77, 0
  %79 = bitcast %class.SkTArray* %0 to i8**
  br i1 %78, label %83, label %80

80:                                               ; preds = %75
  %81 = load i8*, i8** %79, align 8
  tail call void @_Z7sk_freePv(i8* %81) #8
  %82 = load i64, i64* %4, align 8
  br label %83

83:                                               ; preds = %75, %80
  %84 = phi i64 [ %82, %80 ], [ %76, %75 ]
  store i8* %44, i8** %79, align 8
  %85 = and i64 %84, -4294967298
  %86 = or i64 %85, 1
  store i64 %86, i64* %4, align 8
  br label %87

87:                                               ; preds = %83, %32, %21
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL16ConstructorArrayC2EiRKNS_4TypeE9SkSTArrayILi2ENSt3__110unique_ptrINS_10ExpressionENS5_14default_deleteIS7_EEEELb0EE(%"class.SkSL::ConstructorArray"*, i32, %"class.SkSL::Type"* dereferenceable(184), %class.SkSTArray*) unnamed_addr #0 comdat align 2 {
  %5 = alloca %class.SkSTArray, align 8
  %6 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %5, i64 0, i32 0, i32 0, i64 16
  %7 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %5, i64 0, i32 0, i32 0, i64 0
  %8 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %5, i64 0, i32 0, i32 0, i64 24
  %9 = bitcast i8* %8 to i64*
  %10 = bitcast i8* %6 to i8**
  store i8* %7, i8** %10, align 8
  store i64 17179869184, i64* %9, align 8
  %11 = bitcast i8* %6 to %class.SkTArray*
  %12 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %3, i64 0, i32 0, i32 0, i64 16
  %13 = bitcast i8* %12 to %class.SkTArray*
  %14 = call dereferenceable(16) %class.SkTArray* @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL10ExpressionENS0_14default_deleteIS3_EEEELb0EEaSEOS7_(%class.SkTArray* %11, %class.SkTArray* dereferenceable(16) %13) #8
  %15 = getelementptr inbounds %"class.SkSL::ConstructorArray", %"class.SkSL::ConstructorArray"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = getelementptr inbounds %"class.SkSL::ConstructorArray", %"class.SkSL::ConstructorArray"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i32 %1, i32* %16, align 8
  %17 = getelementptr inbounds %"class.SkSL::ConstructorArray", %"class.SkSL::ConstructorArray"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i32 33, i32* %17, align 4
  %18 = getelementptr inbounds %"class.SkSL::ConstructorArray", %"class.SkSL::ConstructorArray"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  store %"class.SkSL::Type"* %2, %"class.SkSL::Type"** %18, align 8
  %19 = getelementptr inbounds %"class.SkSL::ConstructorArray", %"class.SkSL::ConstructorArray"* %0, i64 0, i32 0, i32 0, i32 1
  %20 = bitcast %"class.std::__1::unique_ptr"* %19 to i64*
  store i64 0, i64* %20, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN4SkSL24MultiArgumentConstructorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %15, align 8
  %21 = getelementptr inbounds %"class.SkSL::ConstructorArray", %"class.SkSL::ConstructorArray"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i64 16
  %22 = getelementptr inbounds %"class.SkSL::ConstructorArray", %"class.SkSL::ConstructorArray"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i64 0
  %23 = getelementptr inbounds %"class.SkSL::ConstructorArray", %"class.SkSL::ConstructorArray"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i64 24
  %24 = bitcast i8* %23 to i64*
  %25 = bitcast i8* %21 to i8**
  store i8* %22, i8** %25, align 8
  store i64 17179869184, i64* %24, align 8
  %26 = bitcast i8* %21 to %class.SkTArray*
  %27 = call dereferenceable(16) %class.SkTArray* @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL10ExpressionENS0_14default_deleteIS3_EEEELb0EEaSEOS7_(%class.SkTArray* %26, %class.SkTArray* dereferenceable(16) %11) #8
  %28 = load i64, i64* %9, align 8
  %29 = and i64 %28, 4294967294
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %33, label %31

31:                                               ; preds = %4
  %32 = bitcast i8* %6 to %"class.std::__1::unique_ptr"**
  br label %37

33:                                               ; preds = %48, %4
  %34 = phi i64 [ %28, %4 ], [ %50, %48 ]
  %35 = and i64 %34, 1
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %56, label %54

37:                                               ; preds = %48, %31
  %38 = phi i64 [ 0, %31 ], [ %49, %48 ]
  %39 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %32, align 8
  %40 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %39, i64 %38, i32 0, i32 0, i32 0
  %41 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %40, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %40, align 8
  %42 = icmp eq %"class.SkSL::Expression"* %41, null
  br i1 %42, label %48, label %43

43:                                               ; preds = %37
  %44 = bitcast %"class.SkSL::Expression"* %41 to void (%"class.SkSL::Expression"*)***
  %45 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %44, align 8
  %46 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %45, i64 1
  %47 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %46, align 8
  call void %47(%"class.SkSL::Expression"* nonnull %41) #8
  br label %48

48:                                               ; preds = %43, %37
  %49 = add nuw nsw i64 %38, 1
  %50 = load i64, i64* %9, align 8
  %51 = lshr i64 %50, 1
  %52 = and i64 %51, 2147483647
  %53 = icmp ult i64 %49, %52
  br i1 %53, label %37, label %33

54:                                               ; preds = %33
  %55 = load i8*, i8** %10, align 8
  call void @_Z7sk_freePv(i8* %55) #8
  br label %56

56:                                               ; preds = %33, %54
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN4SkSL16ConstructorArrayE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %15, align 8
  ret void
}

declare i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL16ConstructorArrayD0Ev(%"class.SkSL::ConstructorArray"*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::ConstructorArray", %"class.SkSL::ConstructorArray"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN4SkSL24MultiArgumentConstructorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.SkSL::ConstructorArray", %"class.SkSL::ConstructorArray"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i64 16
  %4 = getelementptr inbounds %"class.SkSL::ConstructorArray", %"class.SkSL::ConstructorArray"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i64 24
  %5 = bitcast i8* %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = and i64 %6, 4294967294
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %1
  %10 = bitcast i8* %3 to %"class.std::__1::unique_ptr"**
  br label %15

11:                                               ; preds = %26, %1
  %12 = phi i64 [ %6, %1 ], [ %28, %26 ]
  %13 = and i64 %12, 1
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %35, label %32

15:                                               ; preds = %26, %9
  %16 = phi i64 [ 0, %9 ], [ %27, %26 ]
  %17 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %10, align 8
  %18 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %17, i64 %16, i32 0, i32 0, i32 0
  %19 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %18, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %18, align 8
  %20 = icmp eq %"class.SkSL::Expression"* %19, null
  br i1 %20, label %26, label %21

21:                                               ; preds = %15
  %22 = bitcast %"class.SkSL::Expression"* %19 to void (%"class.SkSL::Expression"*)***
  %23 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %22, align 8
  %24 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %23, i64 1
  %25 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %24, align 8
  tail call void %25(%"class.SkSL::Expression"* nonnull %19) #8
  br label %26

26:                                               ; preds = %21, %15
  %27 = add nuw nsw i64 %16, 1
  %28 = load i64, i64* %5, align 8
  %29 = lshr i64 %28, 1
  %30 = and i64 %29, 2147483647
  %31 = icmp ult i64 %27, %30
  br i1 %31, label %15, label %11

32:                                               ; preds = %11
  %33 = bitcast i8* %3 to i8**
  %34 = load i8*, i8** %33, align 8
  tail call void @_Z7sk_freePv(i8* %34) #8
  br label %35

35:                                               ; preds = %32, %11
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN4SkSL14AnyConstructorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %36 = getelementptr inbounds %"class.SkSL::ConstructorArray", %"class.SkSL::ConstructorArray"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %37 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %36, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %36, align 8
  %38 = icmp eq %"class.SkSL::Expression"* %37, null
  br i1 %38, label %44, label %39

39:                                               ; preds = %35
  %40 = bitcast %"class.SkSL::Expression"* %37 to void (%"class.SkSL::Expression"*)***
  %41 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %40, align 8
  %42 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %41, i64 1
  %43 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %42, align 8
  tail call void %43(%"class.SkSL::Expression"* nonnull %37) #8
  br label %44

44:                                               ; preds = %35, %39
  %45 = bitcast %"class.SkSL::ConstructorArray"* %0 to i8*
  tail call void @_ZN4SkSL4Pool10FreeMemoryEPv(i8* %45) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK4SkSL14AnyConstructor11descriptionEv(%"class.SkSL::String"* noalias sret, %"class.SkSL::AnyConstructor"*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.SkSL::String", align 8
  %4 = alloca %"class.SkSL::String", align 8
  %5 = bitcast %"class.SkSL::String"* %3 to i8*
  %6 = bitcast %"class.SkSL::String"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 -86, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #8
  %7 = getelementptr inbounds %"class.SkSL::AnyConstructor", %"class.SkSL::AnyConstructor"* %1, i64 0, i32 0
  %8 = bitcast %"class.SkSL::AnyConstructor"* %1 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %9 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %8, align 8
  %10 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %9, i64 3
  %11 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %10, align 8
  %12 = tail call dereferenceable(184) %"class.SkSL::Type"* %11(%"class.SkSL::Expression"* %7) #8
  %13 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %12, i64 0, i32 18
  %14 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %13, align 8, !noalias !9
  %15 = icmp eq %"class.SkSL::Type"* %14, null
  %16 = select i1 %15, %"class.SkSL::Type"* %12, %"class.SkSL::Type"* %14
  %17 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %16, i64 0, i32 0, i32 1, i32 0
  %18 = load i8*, i8** %17, align 8, !noalias !9
  %19 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %16, i64 0, i32 0, i32 1, i32 1
  %20 = load i64, i64* %19, align 8, !noalias !9
  %21 = icmp ugt i64 %20, -17
  br i1 %21, label %22, label %24

22:                                               ; preds = %2
  %23 = bitcast %"class.SkSL::String"* %3 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %23) #9
  unreachable

24:                                               ; preds = %2
  %25 = icmp ult i64 %20, 23
  br i1 %25, label %35, label %26

26:                                               ; preds = %24
  %27 = add nuw i64 %20, 16
  %28 = and i64 %27, -16
  %29 = tail call i8* @_Znwm(i64 %28) #10
  %30 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %29, i8** %30, align 8, !alias.scope !9
  %31 = or i64 %28, -9223372036854775808
  %32 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %31, i64* %32, align 8, !alias.scope !9
  %33 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %20, i64* %33, align 8, !alias.scope !9
  %34 = bitcast %"class.SkSL::String"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %40

35:                                               ; preds = %24
  %36 = trunc i64 %20 to i8
  %37 = bitcast %"class.SkSL::String"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %38 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %37, i64 0, i32 1, i32 0
  store i8 %36, i8* %38, align 1, !alias.scope !9
  %39 = icmp eq i64 %20, 0
  br i1 %39, label %43, label %40

40:                                               ; preds = %35, %26
  %41 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %37, %35 ], [ %34, %26 ]
  %42 = phi i8* [ %5, %35 ], [ %29, %26 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %42, i8* align 1 %18, i64 %20, i1 false) #8
  br label %43

43:                                               ; preds = %35, %40
  %44 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %37, %35 ], [ %41, %40 ]
  %45 = phi i8* [ %5, %35 ], [ %42, %40 ]
  %46 = getelementptr inbounds i8, i8* %45, i64 %20
  store i8 0, i8* %46, align 1
  call void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* sret %0, %"class.SkSL::String"* nonnull %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)) #8
  %47 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %44, i64 0, i32 1, i32 0
  %48 = load i8, i8* %47, align 1
  %49 = icmp slt i8 %48, 0
  br i1 %49, label %50, label %53

50:                                               ; preds = %43
  %51 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  call void @_ZdlPv(i8* %52) #10
  br label %53

53:                                               ; preds = %43, %50
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #8
  %54 = bitcast %"class.SkSL::AnyConstructor"* %1 to { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)***
  %55 = load { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)**, { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)*** %54, align 8
  %56 = getelementptr inbounds { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)** %55, i64 12
  %57 = load { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)** %56, align 8
  %58 = call { %"class.std::__1::unique_ptr"*, i64 } %57(%"class.SkSL::AnyConstructor"* %1) #8
  %59 = extractvalue { %"class.std::__1::unique_ptr"*, i64 } %58, 0
  %60 = extractvalue { %"class.std::__1::unique_ptr"*, i64 } %58, 1
  %61 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %59, i64 %60
  %62 = icmp eq i64 %60, 0
  br i1 %62, label %84, label %63

63:                                               ; preds = %53
  %64 = bitcast %"class.SkSL::String"* %4 to i8*
  %65 = bitcast %"class.SkSL::String"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %66 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %65, i64 0, i32 1, i32 0
  %67 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %68 = call dereferenceable(24) %"class.SkSL::String"* @_ZN4SkSL6StringpLEPKc(%"class.SkSL::String"* %0, i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.5, i64 0, i64 0)) #8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %64) #8
  %69 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %59, i64 0, i32 0, i32 0, i32 0
  %70 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %69, align 8
  %71 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %70, i64 0, i32 0
  %72 = bitcast %"class.SkSL::Expression"* %70 to void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)***
  %73 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)**, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*** %72, align 8
  %74 = getelementptr inbounds void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %73, i64 2
  %75 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %74, align 8
  call void %75(%"class.SkSL::String"* nonnull sret %4, %"class.SkSL::IRNode"* %71) #8
  %76 = call dereferenceable(24) %"class.SkSL::String"* @_ZN4SkSL6StringpLERKS0_(%"class.SkSL::String"* %0, %"class.SkSL::String"* nonnull dereferenceable(24) %4) #8
  %77 = load i8, i8* %66, align 1
  %78 = icmp slt i8 %77, 0
  br i1 %78, label %79, label %81

79:                                               ; preds = %63
  %80 = load i8*, i8** %67, align 8
  call void @_ZdlPv(i8* %80) #10
  br label %81

81:                                               ; preds = %79, %63
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %64) #8
  %82 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %59, i64 1
  %83 = icmp eq i64 %60, 1
  br i1 %83, label %84, label %86

84:                                               ; preds = %81, %101, %53
  %85 = call dereferenceable(24) %"class.SkSL::String"* @_ZN4SkSL6StringpLEPKc(%"class.SkSL::String"* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0)) #8
  ret void

86:                                               ; preds = %81, %101
  %87 = phi %"class.std::__1::unique_ptr"* [ %102, %101 ], [ %82, %81 ]
  %88 = call dereferenceable(24) %"class.SkSL::String"* @_ZN4SkSL6StringpLEPKc(%"class.SkSL::String"* %0, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0)) #8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %64) #8
  %89 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %87, i64 0, i32 0, i32 0, i32 0
  %90 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %89, align 8
  %91 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %90, i64 0, i32 0
  %92 = bitcast %"class.SkSL::Expression"* %90 to void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)***
  %93 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)**, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*** %92, align 8
  %94 = getelementptr inbounds void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %93, i64 2
  %95 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %94, align 8
  call void %95(%"class.SkSL::String"* nonnull sret %4, %"class.SkSL::IRNode"* %91) #8
  %96 = call dereferenceable(24) %"class.SkSL::String"* @_ZN4SkSL6StringpLERKS0_(%"class.SkSL::String"* %0, %"class.SkSL::String"* nonnull dereferenceable(24) %4) #8
  %97 = load i8, i8* %66, align 1
  %98 = icmp slt i8 %97, 0
  br i1 %98, label %99, label %101

99:                                               ; preds = %86
  %100 = load i8*, i8** %67, align 8
  call void @_ZdlPv(i8* %100) #10
  br label %101

101:                                              ; preds = %86, %99
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %64) #8
  %102 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %87, i64 1
  %103 = icmp eq %"class.std::__1::unique_ptr"* %102, %61
  br i1 %103, label %84, label %86, !llvm.loop !14
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(184) %"class.SkSL::Type"* @_ZNK4SkSL10Expression4typeEv(%"class.SkSL::Expression"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %0, i64 0, i32 1
  %3 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %2, align 8
  ret %"class.SkSL::Type"* %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL14AnyConstructor21isCompileTimeConstantEv(%"class.SkSL::AnyConstructor"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.SkSL::AnyConstructor"* %0 to { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)***
  %3 = load { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)**, { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)*** %2, align 8
  %4 = getelementptr inbounds { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)** %3, i64 12
  %5 = load { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)** %4, align 8
  %6 = tail call { %"class.std::__1::unique_ptr"*, i64 } %5(%"class.SkSL::AnyConstructor"* %0) #8
  %7 = extractvalue { %"class.std::__1::unique_ptr"*, i64 } %6, 0
  %8 = extractvalue { %"class.std::__1::unique_ptr"*, i64 } %6, 1
  %9 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %7, i64 %8
  %10 = icmp eq i64 %8, 0
  br i1 %10, label %23, label %13

11:                                               ; preds = %13
  %12 = icmp eq %"class.std::__1::unique_ptr"* %22, %9
  br i1 %12, label %23, label %13

13:                                               ; preds = %1, %11
  %14 = phi %"class.std::__1::unique_ptr"* [ %22, %11 ], [ %7, %1 ]
  %15 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %14, i64 0, i32 0, i32 0, i32 0
  %16 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %15, align 8
  %17 = bitcast %"class.SkSL::Expression"* %16 to i1 (%"class.SkSL::Expression"*)***
  %18 = load i1 (%"class.SkSL::Expression"*)**, i1 (%"class.SkSL::Expression"*)*** %17, align 8
  %19 = getelementptr inbounds i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %18, i64 4
  %20 = load i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %19, align 8
  %21 = tail call zeroext i1 %20(%"class.SkSL::Expression"* %16) #8
  %22 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %14, i64 1
  br i1 %21, label %11, label %23

23:                                               ; preds = %13, %11, %1
  %24 = phi i1 [ true, %1 ], [ true, %11 ], [ false, %13 ]
  ret i1 %24
}

declare i32 @_ZNK4SkSL14AnyConstructor15compareConstantERKNS_10ExpressionE(%"class.SkSL::AnyConstructor"*, %"class.SkSL::Expression"* dereferenceable(24)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL14AnyConstructor19isConstantOrUniformEv(%"class.SkSL::AnyConstructor"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.SkSL::AnyConstructor"* %0 to { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)***
  %3 = load { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)**, { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)*** %2, align 8
  %4 = getelementptr inbounds { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)** %3, i64 12
  %5 = load { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)** %4, align 8
  %6 = tail call { %"class.std::__1::unique_ptr"*, i64 } %5(%"class.SkSL::AnyConstructor"* %0) #8
  %7 = extractvalue { %"class.std::__1::unique_ptr"*, i64 } %6, 0
  %8 = extractvalue { %"class.std::__1::unique_ptr"*, i64 } %6, 1
  %9 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %7, i64 %8
  %10 = icmp eq i64 %8, 0
  br i1 %10, label %23, label %13

11:                                               ; preds = %13
  %12 = icmp eq %"class.std::__1::unique_ptr"* %22, %9
  br i1 %12, label %23, label %13

13:                                               ; preds = %1, %11
  %14 = phi %"class.std::__1::unique_ptr"* [ %22, %11 ], [ %7, %1 ]
  %15 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %14, i64 0, i32 0, i32 0, i32 0
  %16 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %15, align 8
  %17 = bitcast %"class.SkSL::Expression"* %16 to i1 (%"class.SkSL::Expression"*)***
  %18 = load i1 (%"class.SkSL::Expression"*)**, i1 (%"class.SkSL::Expression"*)*** %17, align 8
  %19 = getelementptr inbounds i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %18, i64 6
  %20 = load i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %19, align 8
  %21 = tail call zeroext i1 %20(%"class.SkSL::Expression"* %16) #8
  %22 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %14, i64 1
  br i1 %21, label %11, label %23

23:                                               ; preds = %13, %11, %1
  %24 = phi i1 [ true, %1 ], [ true, %11 ], [ false, %13 ]
  ret i1 %24
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL14AnyConstructor11hasPropertyENS_10Expression8PropertyE(%"class.SkSL::AnyConstructor"*, i32) unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.SkSL::AnyConstructor"* %0 to { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)***
  %4 = load { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)**, { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)*** %3, align 8
  %5 = getelementptr inbounds { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)** %4, i64 12
  %6 = load { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)** %5, align 8
  %7 = tail call { %"class.std::__1::unique_ptr"*, i64 } %6(%"class.SkSL::AnyConstructor"* %0) #8
  %8 = extractvalue { %"class.std::__1::unique_ptr"*, i64 } %7, 0
  %9 = extractvalue { %"class.std::__1::unique_ptr"*, i64 } %7, 1
  %10 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %8, i64 %9
  %11 = icmp eq i64 %9, 0
  br i1 %11, label %24, label %14

12:                                               ; preds = %14
  %13 = icmp eq %"class.std::__1::unique_ptr"* %23, %10
  br i1 %13, label %24, label %14

14:                                               ; preds = %2, %12
  %15 = phi %"class.std::__1::unique_ptr"* [ %23, %12 ], [ %8, %2 ]
  %16 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %15, i64 0, i32 0, i32 0, i32 0
  %17 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %16, align 8
  %18 = bitcast %"class.SkSL::Expression"* %17 to i1 (%"class.SkSL::Expression"*, i32)***
  %19 = load i1 (%"class.SkSL::Expression"*, i32)**, i1 (%"class.SkSL::Expression"*, i32)*** %18, align 8
  %20 = getelementptr inbounds i1 (%"class.SkSL::Expression"*, i32)*, i1 (%"class.SkSL::Expression"*, i32)** %19, i64 7
  %21 = load i1 (%"class.SkSL::Expression"*, i32)*, i1 (%"class.SkSL::Expression"*, i32)** %20, align 8
  %22 = tail call zeroext i1 %21(%"class.SkSL::Expression"* %17, i32 %1) #8
  %23 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %15, i64 1
  br i1 %22, label %24, label %12

24:                                               ; preds = %12, %14, %2
  %25 = phi i1 [ false, %2 ], [ true, %14 ], [ false, %12 ]
  ret i1 %25
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i64, i8 } @_ZNK4SkSL10Expression12coercionCostERKNS_4TypeE(%"class.SkSL::Expression"*, %"class.SkSL::Type"* dereferenceable(184)) unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.SkSL::Expression"* %0 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %4 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %3, align 8
  %5 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %4, i64 3
  %6 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %5, align 8
  %7 = tail call dereferenceable(184) %"class.SkSL::Type"* %6(%"class.SkSL::Expression"* %0) #8
  %8 = tail call { i64, i8 } @_ZNK4SkSL4Type12coercionCostERKS0_(%"class.SkSL::Type"* %7, %"class.SkSL::Type"* dereferenceable(184) %1) #8
  ret { i64, i8 } %8
}

declare %"class.SkSL::Expression"* @_ZNK4SkSL14AnyConstructor24getConstantSubexpressionEi(%"class.SkSL::AnyConstructor"*, i32) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.SkSL::Expression"* @_ZNK4SkSL16ConstructorArray5cloneEv(%"class.SkSL::ConstructorArray"*) unnamed_addr #0 comdat align 2 {
  %2 = alloca %class.SkSTArray, align 8
  %3 = alloca %class.SkSTArray, align 8
  %4 = getelementptr inbounds %"class.SkSL::ConstructorArray", %"class.SkSL::ConstructorArray"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %5 = getelementptr inbounds %"class.SkSL::ConstructorArray", %"class.SkSL::ConstructorArray"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %6 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %5, align 8
  %7 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %3, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #8
  %8 = getelementptr inbounds %"class.SkSL::ConstructorArray", %"class.SkSL::ConstructorArray"* %0, i64 0, i32 0
  call void @_ZNK4SkSL24MultiArgumentConstructor14cloneArgumentsEv(%class.SkSTArray* nonnull sret %3, %"class.SkSL::MultiArgumentConstructor"* %8)
  %9 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %2, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9)
  %10 = call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 64) #8
  %11 = bitcast i8* %10 to %"class.SkSL::ConstructorArray"*
  %12 = load i32, i32* %4, align 4
  %13 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %2, i64 0, i32 0, i32 0, i64 16
  %14 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %2, i64 0, i32 0, i32 0, i64 24
  %15 = bitcast i8* %14 to i64*
  %16 = bitcast i8* %13 to i8**
  store i8* %9, i8** %16, align 8
  store i64 17179869184, i64* %15, align 8
  %17 = bitcast i8* %13 to %class.SkTArray*
  %18 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %3, i64 0, i32 0, i32 0, i64 16
  %19 = bitcast i8* %18 to %class.SkTArray*
  %20 = call dereferenceable(16) %class.SkTArray* @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL10ExpressionENS0_14default_deleteIS3_EEEELb0EEaSEOS7_(%class.SkTArray* %17, %class.SkTArray* dereferenceable(16) %19) #8
  call void @_ZN4SkSL16ConstructorArrayC2EiRKNS_4TypeE9SkSTArrayILi2ENSt3__110unique_ptrINS_10ExpressionENS5_14default_deleteIS7_EEEELb0EE(%"class.SkSL::ConstructorArray"* %11, i32 %12, %"class.SkSL::Type"* dereferenceable(184) %6, %class.SkSTArray* nonnull %2) #8
  %21 = load i64, i64* %15, align 8
  %22 = and i64 %21, 4294967294
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %26, label %24

24:                                               ; preds = %1
  %25 = bitcast i8* %13 to %"class.std::__1::unique_ptr"**
  br label %30

26:                                               ; preds = %41, %1
  %27 = phi i64 [ %21, %1 ], [ %43, %41 ]
  %28 = and i64 %27, 1
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %49, label %47

30:                                               ; preds = %41, %24
  %31 = phi i64 [ 0, %24 ], [ %42, %41 ]
  %32 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %25, align 8
  %33 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %32, i64 %31, i32 0, i32 0, i32 0
  %34 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %33, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %33, align 8
  %35 = icmp eq %"class.SkSL::Expression"* %34, null
  br i1 %35, label %41, label %36

36:                                               ; preds = %30
  %37 = bitcast %"class.SkSL::Expression"* %34 to void (%"class.SkSL::Expression"*)***
  %38 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %37, align 8
  %39 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %38, i64 1
  %40 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %39, align 8
  call void %40(%"class.SkSL::Expression"* nonnull %34) #8
  br label %41

41:                                               ; preds = %36, %30
  %42 = add nuw nsw i64 %31, 1
  %43 = load i64, i64* %15, align 8
  %44 = lshr i64 %43, 1
  %45 = and i64 %44, 2147483647
  %46 = icmp ult i64 %42, %45
  br i1 %46, label %30, label %26

47:                                               ; preds = %26
  %48 = load i8*, i8** %16, align 8
  call void @_Z7sk_freePv(i8* %48) #8
  br label %49

49:                                               ; preds = %47, %26
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9)
  %50 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %3, i64 0, i32 0, i32 0, i64 24
  %51 = bitcast i8* %50 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = and i64 %52, 4294967294
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %57, label %55

55:                                               ; preds = %49
  %56 = bitcast i8* %18 to %"class.std::__1::unique_ptr"**
  br label %61

57:                                               ; preds = %72, %49
  %58 = phi i64 [ %52, %49 ], [ %74, %72 ]
  %59 = and i64 %58, 1
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %81, label %78

61:                                               ; preds = %72, %55
  %62 = phi i64 [ 0, %55 ], [ %73, %72 ]
  %63 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %56, align 8
  %64 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %63, i64 %62, i32 0, i32 0, i32 0
  %65 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %64, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %64, align 8
  %66 = icmp eq %"class.SkSL::Expression"* %65, null
  br i1 %66, label %72, label %67

67:                                               ; preds = %61
  %68 = bitcast %"class.SkSL::Expression"* %65 to void (%"class.SkSL::Expression"*)***
  %69 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %68, align 8
  %70 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %69, i64 1
  %71 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %70, align 8
  call void %71(%"class.SkSL::Expression"* nonnull %65) #8
  br label %72

72:                                               ; preds = %67, %61
  %73 = add nuw nsw i64 %62, 1
  %74 = load i64, i64* %51, align 8
  %75 = lshr i64 %74, 1
  %76 = and i64 %75, 2147483647
  %77 = icmp ult i64 %73, %76
  br i1 %77, label %61, label %57

78:                                               ; preds = %57
  %79 = bitcast i8* %18 to i8**
  %80 = load i8*, i8** %79, align 8
  call void @_Z7sk_freePv(i8* %80) #8
  br label %81

81:                                               ; preds = %57, %78
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #8
  %82 = bitcast i8* %10 to %"class.SkSL::Expression"*
  ret %"class.SkSL::Expression"* %82
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.std::__1::unique_ptr"*, i64 } @_ZN4SkSL24MultiArgumentConstructor12argumentSpanEv(%"class.SkSL::MultiArgumentConstructor"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::MultiArgumentConstructor", %"class.SkSL::MultiArgumentConstructor"* %0, i64 0, i32 1, i32 0, i32 0, i64 16
  %3 = bitcast i8* %2 to %"class.std::__1::unique_ptr"**
  %4 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %3, align 8
  %5 = getelementptr inbounds %"class.SkSL::MultiArgumentConstructor", %"class.SkSL::MultiArgumentConstructor"* %0, i64 0, i32 1, i32 0, i32 0, i64 24
  %6 = bitcast i8* %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = lshr i64 %7, 1
  %9 = and i64 %8, 2147483647
  %10 = insertvalue { %"class.std::__1::unique_ptr"*, i64 } undef, %"class.std::__1::unique_ptr"* %4, 0
  %11 = insertvalue { %"class.std::__1::unique_ptr"*, i64 } %10, i64 %9, 1
  ret { %"class.std::__1::unique_ptr"*, i64 } %11
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.std::__1::unique_ptr"*, i64 } @_ZNK4SkSL24MultiArgumentConstructor12argumentSpanEv(%"class.SkSL::MultiArgumentConstructor"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::MultiArgumentConstructor", %"class.SkSL::MultiArgumentConstructor"* %0, i64 0, i32 1, i32 0, i32 0, i64 16
  %3 = bitcast i8* %2 to %"class.std::__1::unique_ptr"**
  %4 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %3, align 8
  %5 = getelementptr inbounds %"class.SkSL::MultiArgumentConstructor", %"class.SkSL::MultiArgumentConstructor"* %0, i64 0, i32 1, i32 0, i32 0, i64 24
  %6 = bitcast i8* %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = lshr i64 %7, 1
  %9 = and i64 %8, 2147483647
  %10 = insertvalue { %"class.std::__1::unique_ptr"*, i64 } undef, %"class.std::__1::unique_ptr"* %4, 0
  %11 = insertvalue { %"class.std::__1::unique_ptr"*, i64 } %10, i64 %9, 1
  ret { %"class.std::__1::unique_ptr"*, i64 } %11
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL24MultiArgumentConstructorD2Ev(%"class.SkSL::MultiArgumentConstructor"*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::MultiArgumentConstructor", %"class.SkSL::MultiArgumentConstructor"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN4SkSL24MultiArgumentConstructorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.SkSL::MultiArgumentConstructor", %"class.SkSL::MultiArgumentConstructor"* %0, i64 0, i32 1, i32 0, i32 0, i64 16
  %4 = getelementptr inbounds %"class.SkSL::MultiArgumentConstructor", %"class.SkSL::MultiArgumentConstructor"* %0, i64 0, i32 1, i32 0, i32 0, i64 24
  %5 = bitcast i8* %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = and i64 %6, 4294967294
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %1
  %10 = bitcast i8* %3 to %"class.std::__1::unique_ptr"**
  br label %15

11:                                               ; preds = %26, %1
  %12 = phi i64 [ %6, %1 ], [ %28, %26 ]
  %13 = and i64 %12, 1
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %35, label %32

15:                                               ; preds = %26, %9
  %16 = phi i64 [ 0, %9 ], [ %27, %26 ]
  %17 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %10, align 8
  %18 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %17, i64 %16, i32 0, i32 0, i32 0
  %19 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %18, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %18, align 8
  %20 = icmp eq %"class.SkSL::Expression"* %19, null
  br i1 %20, label %26, label %21

21:                                               ; preds = %15
  %22 = bitcast %"class.SkSL::Expression"* %19 to void (%"class.SkSL::Expression"*)***
  %23 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %22, align 8
  %24 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %23, i64 1
  %25 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %24, align 8
  tail call void %25(%"class.SkSL::Expression"* nonnull %19) #8
  br label %26

26:                                               ; preds = %21, %15
  %27 = add nuw nsw i64 %16, 1
  %28 = load i64, i64* %5, align 8
  %29 = lshr i64 %28, 1
  %30 = and i64 %29, 2147483647
  %31 = icmp ult i64 %27, %30
  br i1 %31, label %15, label %11

32:                                               ; preds = %11
  %33 = bitcast i8* %3 to i8**
  %34 = load i8*, i8** %33, align 8
  tail call void @_Z7sk_freePv(i8* %34) #8
  br label %35

35:                                               ; preds = %11, %32
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN4SkSL14AnyConstructorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %36 = getelementptr inbounds %"class.SkSL::MultiArgumentConstructor", %"class.SkSL::MultiArgumentConstructor"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %37 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %36, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %36, align 8
  %38 = icmp eq %"class.SkSL::Expression"* %37, null
  br i1 %38, label %44, label %39

39:                                               ; preds = %35
  %40 = bitcast %"class.SkSL::Expression"* %37 to void (%"class.SkSL::Expression"*)***
  %41 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %40, align 8
  %42 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %41, i64 1
  %43 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %42, align 8
  tail call void %43(%"class.SkSL::Expression"* nonnull %37) #8
  br label %44

44:                                               ; preds = %35, %39
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL24MultiArgumentConstructorD0Ev(%"class.SkSL::MultiArgumentConstructor"*) unnamed_addr #6 comdat align 2 {
  tail call void @llvm.trap() #9
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #7

declare void @_ZN4SkSL4Pool10FreeMemoryEPv(i8*) local_unnamed_addr #2

declare dereferenceable(24) %"class.SkSL::String"* @_ZN4SkSL6StringpLEPKc(%"class.SkSL::String"*, i8*) local_unnamed_addr #2

declare dereferenceable(24) %"class.SkSL::String"* @_ZN4SkSL6StringpLERKS0_(%"class.SkSL::String"*, %"class.SkSL::String"* dereferenceable(24)) local_unnamed_addr #2

declare { i64, i8 } @_ZNK4SkSL4Type12coercionCostERKS0_(%"class.SkSL::Type"*, %"class.SkSL::Type"* dereferenceable(184)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK4SkSL24MultiArgumentConstructor14cloneArgumentsEv(%class.SkSTArray* noalias sret, %"class.SkSL::MultiArgumentConstructor"*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %0, i64 0, i32 0, i32 0, i64 0
  %4 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %0, i64 0, i32 0, i32 0, i64 16
  %5 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %0, i64 0, i32 0, i32 0, i64 24
  %6 = bitcast i8* %5 to i64*
  %7 = bitcast i8* %4 to i8**
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 -86, i64 16, i1 false)
  store i8* %3, i8** %7, align 8
  store i64 17179869184, i64* %6, align 8
  %8 = bitcast i8* %4 to %class.SkTArray*
  %9 = getelementptr inbounds %"class.SkSL::MultiArgumentConstructor", %"class.SkSL::MultiArgumentConstructor"* %1, i64 0, i32 1, i32 0, i32 0, i64 16
  %10 = getelementptr inbounds %"class.SkSL::MultiArgumentConstructor", %"class.SkSL::MultiArgumentConstructor"* %1, i64 0, i32 1, i32 0, i32 0, i64 24
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = lshr i64 %12, 1
  %14 = trunc i64 %13 to i32
  %15 = and i32 %14, 2147483647
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %23, label %17

17:                                               ; preds = %2
  tail call void @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL10ExpressionENS0_14default_deleteIS3_EEEELb0EE12checkReallocEiNS7_11ReallocTypeE(%class.SkTArray* %8, i32 %15, i32 0) #8
  %18 = load i64, i64* %6, align 8
  %19 = shl i64 %18, 32
  %20 = and i64 %19, 4294967296
  %21 = and i64 %18, -4294967297
  %22 = or i64 %20, %21
  br label %23

23:                                               ; preds = %2, %17
  %24 = phi i64 [ %22, %17 ], [ 17179869184, %2 ]
  store i64 %24, i64* %6, align 8
  %25 = bitcast i8* %9 to %"class.std::__1::unique_ptr"**
  %26 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %25, align 8
  %27 = icmp eq %"class.std::__1::unique_ptr"* %26, null
  br i1 %27, label %58, label %28

28:                                               ; preds = %23
  %29 = load i64, i64* %11, align 8
  %30 = lshr i64 %29, 1
  %31 = and i64 %30, 2147483647
  %32 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %26, i64 %31
  %33 = icmp eq i64 %31, 0
  br i1 %33, label %58, label %34

34:                                               ; preds = %28
  %35 = bitcast i8* %4 to %"class.std::__1::unique_ptr"**
  br label %36

36:                                               ; preds = %34, %36
  %37 = phi %"class.std::__1::unique_ptr"* [ %26, %34 ], [ %56, %36 ]
  %38 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %37, i64 0, i32 0, i32 0, i32 0
  %39 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %38, align 8
  %40 = bitcast %"class.SkSL::Expression"* %39 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)***
  %41 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*** %40, align 8
  %42 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %41, i64 10
  %43 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %42, align 8
  %44 = tail call %"class.SkSL::Expression"* %43(%"class.SkSL::Expression"* %39) #8
  %45 = ptrtoint %"class.SkSL::Expression"* %44 to i64
  tail call void @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL10ExpressionENS0_14default_deleteIS3_EEEELb0EE12checkReallocEiNS7_11ReallocTypeE(%class.SkTArray* %8, i32 1, i32 1) #8
  %46 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %35, align 8
  %47 = load i64, i64* %6, align 8
  %48 = lshr i64 %47, 1
  %49 = and i64 %48, 2147483647
  %50 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %46, i64 %49
  %51 = add i64 %47, 2
  %52 = and i64 %51, 4294967294
  %53 = and i64 %47, -4294967295
  %54 = or i64 %52, %53
  store i64 %54, i64* %6, align 8
  %55 = bitcast %"class.std::__1::unique_ptr"* %50 to i64*
  store i64 %45, i64* %55, align 8
  %56 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %37, i64 1
  %57 = icmp eq %"class.std::__1::unique_ptr"* %56, %32
  br i1 %57, label %58, label %36

58:                                               ; preds = %36, %23, %28
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { cold noreturn nounwind }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZNK4SkSL4Type11displayNameEv: argument 0"}
!5 = distinct !{!5, !"_ZNK4SkSL4Type11displayNameEv"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZNK4SkSL4Type11displayNameEv: argument 0"}
!8 = distinct !{!8, !"_ZNK4SkSL4Type11displayNameEv"}
!9 = !{!10, !12}
!10 = distinct !{!10, !11, !"_ZNK4SkSL4Type11displayNameEv: argument 0"}
!11 = distinct !{!11, !"_ZNK4SkSL4Type11displayNameEv"}
!12 = distinct !{!12, !13, !"_ZNK4SkSL4Type11descriptionEv: argument 0"}
!13 = distinct !{!13, !"_ZNK4SkSL4Type11descriptionEv"}
!14 = distinct !{!14, !15}
!15 = !{!"llvm.loop.unroll.disable"}
