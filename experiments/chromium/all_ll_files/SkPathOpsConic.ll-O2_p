; ModuleID = '../../third_party/skia/src/pathops/SkPathOpsConic.cpp'
source_filename = "../../third_party/skia/src/pathops/SkPathOpsConic.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.SkDQuad = type { [3 x %struct.SkDPoint] }
%struct.SkDPoint = type { double, double }
%struct.SkDConic = type { %struct.SkDQuad, float }
%struct.SkDCubic = type { [4 x %struct.SkDPoint] }
%class.SkTConic = type { %class.SkTCurve, %struct.SkDConic }
%class.SkTCurve = type { i32 (...)** }
%class.SkIntersections = type <{ [13 x %struct.SkDPoint], [2 x %struct.SkDPoint], [2 x [13 x double]], [2 x i16], [2 x i8], i8, i8, i8, i8, [6 x i8] }>
%struct.SkDLine = type { [2 x %struct.SkDPoint] }
%struct.SkDRect = type { double, double, double, double }
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%class.SkFibBlockSizes = type { i32 }

$_ZN8SkTCurveD2Ev = comdat any

$_ZN8SkTConicD0Ev = comdat any

$_ZNK8SkTConicixEi = comdat any

$_ZN8SkTConicixEi = comdat any

$_ZNK8SkTConic9collapsedEv = comdat any

$_ZNK8SkTConic14controlsInsideEv = comdat any

$_ZN8SkTConic9debugInitEv = comdat any

$_ZNK8SkTConic7dxdyAtTEd = comdat any

$_ZNK8SkTConic14hullIntersectsERK8SkDConicPb = comdat any

$_ZNK8SkTConic14hullIntersectsERK8SkTCurvePb = comdat any

$_ZNK8SkTConic7IsConicEv = comdat any

$_ZNK8SkTConic4makeER12SkArenaAlloc = comdat any

$_ZNK8SkTConic16maxIntersectionsEv = comdat any

$_ZNK8SkTConic8otherPtsEiPPK8SkDPoint = comdat any

$_ZNK8SkTConic10pointCountEv = comdat any

$_ZNK8SkTConic9pointLastEv = comdat any

$_ZNK8SkTConic5ptAtTEd = comdat any

$_ZNK8SkTConic9subDivideEddP8SkTCurve = comdat any

$_ZNK8SkDPoint18approximatelyEqualERKS_ = comdat any

$_ZZN12SkArenaAlloc4makeIZNS_4makeI8SkTConicJEEEPT_DpOT0_EUlPvE_EEDTclfp_LDnEEEOS3_ENUlPcE_8__invokeESC_ = comdat any

@.str = private unnamed_addr constant [54 x i8] c"../../third_party/skia/src/pathops/SkPathOpsConic.cpp\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"!k\00", align 1
@__const._ZNK8SkDConic9subDivideERK8SkDPointS2_ddPf.chopped = private unnamed_addr constant { %struct.SkDQuad, float, [4 x i8] } { %struct.SkDQuad { [3 x %struct.SkDPoint] [%struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }] }, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }, align 8
@_ZTV8SkTConic = hidden unnamed_addr constant { [24 x i8*] } { [24 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkTCurve*)* @_ZN8SkTCurveD2Ev to i8*), i8* bitcast (void (%class.SkTConic*)* @_ZN8SkTConicD0Ev to i8*), i8* bitcast (%struct.SkDPoint* (%class.SkTConic*, i32)* @_ZNK8SkTConicixEi to i8*), i8* bitcast (%struct.SkDPoint* (%class.SkTConic*, i32)* @_ZN8SkTConicixEi to i8*), i8* bitcast (i1 (%class.SkTConic*)* @_ZNK8SkTConic9collapsedEv to i8*), i8* bitcast (i1 (%class.SkTConic*)* @_ZNK8SkTConic14controlsInsideEv to i8*), i8* bitcast (void (%class.SkTConic*)* @_ZN8SkTConic9debugInitEv to i8*), i8* bitcast ({ double, double } (%class.SkTConic*, double)* @_ZNK8SkTConic7dxdyAtTEd to i8*), i8* bitcast (i1 (%class.SkTConic*, %struct.SkDQuad*, i8*)* @_ZNK8SkTConic14hullIntersectsERK7SkDQuadPb to i8*), i8* bitcast (i1 (%class.SkTConic*, %struct.SkDConic*, i8*)* @_ZNK8SkTConic14hullIntersectsERK8SkDConicPb to i8*), i8* bitcast (i1 (%class.SkTConic*, %struct.SkDCubic*, i8*)* @_ZNK8SkTConic14hullIntersectsERK8SkDCubicPb to i8*), i8* bitcast (i1 (%class.SkTConic*, %class.SkTCurve*, i8*)* @_ZNK8SkTConic14hullIntersectsERK8SkTCurvePb to i8*), i8* bitcast (i32 (%class.SkTConic*, %class.SkIntersections*, %struct.SkDLine*)* @_ZNK8SkTConic12intersectRayEP15SkIntersectionsRK7SkDLine to i8*), i8* bitcast (i1 (%class.SkTConic*)* @_ZNK8SkTConic7IsConicEv to i8*), i8* bitcast (%class.SkTCurve* (%class.SkTConic*, %class.SkArenaAlloc*)* @_ZNK8SkTConic4makeER12SkArenaAlloc to i8*), i8* bitcast (i32 (%class.SkTConic*)* @_ZNK8SkTConic16maxIntersectionsEv to i8*), i8* bitcast (void (%class.SkTConic*, i32, %struct.SkDPoint**)* @_ZNK8SkTConic8otherPtsEiPPK8SkDPoint to i8*), i8* bitcast (i32 (%class.SkTConic*)* @_ZNK8SkTConic10pointCountEv to i8*), i8* bitcast (i32 (%class.SkTConic*)* @_ZNK8SkTConic9pointLastEv to i8*), i8* bitcast ({ double, double } (%class.SkTConic*, double)* @_ZNK8SkTConic5ptAtTEd to i8*), i8* bitcast (void (%class.SkTConic*, %struct.SkDRect*)* @_ZNK8SkTConic9setBoundsEP7SkDRect to i8*), i8* bitcast (void (%class.SkTConic*, double, double, %class.SkTCurve*)* @_ZNK8SkTConic9subDivideEddP8SkTCurve to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN8SkDConic11FindExtremaEPKdfPd(double* nocapture readonly, float, double* nocapture) local_unnamed_addr #0 align 2 {
  %4 = alloca [2 x double], align 16
  %5 = getelementptr inbounds double, double* %0, i64 4
  %6 = load double, double* %5, align 8
  %7 = load double, double* %0, align 8
  %8 = fsub double %6, %7
  %9 = getelementptr inbounds double, double* %0, i64 2
  %10 = load double, double* %9, align 8
  %11 = fsub double %10, %7
  %12 = fpext float %1 to double
  %13 = fmul double %11, %12
  %14 = fmul double %8, %12
  %15 = fsub double %14, %8
  %16 = fmul double %13, 2.000000e+00
  %17 = fsub double %8, %16
  %18 = bitcast [2 x double]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %18) #8
  %19 = getelementptr inbounds [2 x double], [2 x double]* %4, i64 0, i64 0
  %20 = bitcast [2 x double]* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -1, i64 16, i1 false)
  %21 = call i32 @_ZN7SkDQuad11RootsValidTEdddPd(double %15, double %17, double %13, double* nonnull %19) #8
  %22 = icmp eq i32 %21, 1
  br i1 %22, label %23, label %27

23:                                               ; preds = %3
  %24 = bitcast [2 x double]* %4 to i64*
  %25 = load i64, i64* %24, align 16
  %26 = bitcast double* %2 to i64*
  store i64 %25, i64* %26, align 8
  br label %27

27:                                               ; preds = %3, %23
  %28 = phi i32 [ 1, %23 ], [ 0, %3 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %18) #8
  ret i32 %28
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @_ZN7SkDQuad11RootsValidTEdddPd(double, double, double, double*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden { double, double } @_ZNK8SkDConic7dxdyAtTEd(%struct.SkDConic* nocapture readonly, double) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %0, i64 0, i32 0, i32 0, i64 0, i32 0
  %4 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %0, i64 0, i32 1
  %5 = load float, float* %4, align 8
  %6 = getelementptr inbounds double, double* %3, i64 4
  %7 = getelementptr inbounds double, double* %3, i64 2
  %8 = fpext float %5 to double
  %9 = bitcast double* %6 to <2 x double>*
  %10 = load <2 x double>, <2 x double>* %9, align 8
  %11 = bitcast %struct.SkDConic* %0 to <2 x double>*
  %12 = load <2 x double>, <2 x double>* %11, align 8
  %13 = fsub <2 x double> %10, %12
  %14 = bitcast double* %7 to <2 x double>*
  %15 = load <2 x double>, <2 x double>* %14, align 8
  %16 = fsub <2 x double> %15, %12
  %17 = insertelement <2 x double> undef, double %8, i32 0
  %18 = shufflevector <2 x double> %17, <2 x double> undef, <2 x i32> zeroinitializer
  %19 = fmul <2 x double> %16, %18
  %20 = fmul <2 x double> %13, %18
  %21 = fsub <2 x double> %20, %13
  %22 = fmul <2 x double> %19, <double 2.000000e+00, double 2.000000e+00>
  %23 = fsub <2 x double> %13, %22
  %24 = insertelement <2 x double> undef, double %1, i32 0
  %25 = shufflevector <2 x double> %24, <2 x double> undef, <2 x i32> zeroinitializer
  %26 = fmul <2 x double> %21, %25
  %27 = fadd <2 x double> %26, %23
  %28 = fmul <2 x double> %27, %25
  %29 = fadd <2 x double> %19, %28
  %30 = extractelement <2 x double> %29, i32 0
  %31 = fcmp oeq double %30, 0.000000e+00
  %32 = extractelement <2 x double> %29, i32 1
  %33 = fcmp oeq double %32, 0.000000e+00
  %34 = and i1 %31, %33
  br i1 %34, label %35, label %40

35:                                               ; preds = %2
  %36 = fcmp oeq double %1, 0.000000e+00
  %37 = fcmp oeq double %1, 1.000000e+00
  %38 = or i1 %36, %37
  br i1 %38, label %40, label %39

39:                                               ; preds = %35
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str, i64 0, i64 0), i32 60, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0)) #8
  br label %40

40:                                               ; preds = %35, %39, %2
  %41 = phi <2 x double> [ %29, %39 ], [ %29, %2 ], [ %13, %35 ]
  %42 = extractelement <2 x double> %41, i32 0
  %43 = insertvalue { double, double } undef, double %42, 0
  %44 = extractelement <2 x double> %41, i32 1
  %45 = insertvalue { double, double } %43, double %44, 1
  ret { double, double } %45
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_Z17SkDebugf_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8SkDConic14hullIntersectsERK8SkDCubicPb(%struct.SkDConic*, %struct.SkDCubic* dereferenceable(64), i8*) local_unnamed_addr #0 align 2 {
  %4 = tail call zeroext i1 @_ZNK8SkDCubic14hullIntersectsERK8SkDConicPb(%struct.SkDCubic* %1, %struct.SkDConic* dereferenceable(56) %0, i8* %2) #8
  ret i1 %4
}

declare zeroext i1 @_ZNK8SkDCubic14hullIntersectsERK8SkDConicPb(%struct.SkDCubic*, %struct.SkDConic* dereferenceable(56), i8*) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden { double, double } @_ZNK8SkDConic5ptAtTEd(%struct.SkDConic* nocapture readonly, double) local_unnamed_addr #3 align 2 {
  %3 = fcmp oeq double %1, 0.000000e+00
  br i1 %3, label %4, label %7

4:                                                ; preds = %2
  %5 = bitcast %struct.SkDConic* %0 to <2 x double>*
  %6 = load <2 x double>, <2 x double>* %5, align 8
  br label %50

7:                                                ; preds = %2
  %8 = fcmp oeq double %1, 1.000000e+00
  br i1 %8, label %9, label %13

9:                                                ; preds = %7
  %10 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %0, i64 0, i32 0, i32 0, i64 2, i32 0
  %11 = bitcast double* %10 to <2 x double>*
  %12 = load <2 x double>, <2 x double>* %11, align 8
  br label %50

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %0, i64 0, i32 1
  %15 = load float, float* %14, align 8
  %16 = fadd float %15, -1.000000e+00
  %17 = fmul float %16, 2.000000e+00
  %18 = fpext float %17 to double
  %19 = fmul double %18, %1
  %20 = fsub double %18, %19
  %21 = fmul double %20, %1
  %22 = fadd double %21, 1.000000e+00
  %23 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %0, i64 0, i32 0, i32 0, i64 0, i32 0
  %24 = getelementptr inbounds double, double* %23, i64 2
  %25 = fpext float %15 to double
  %26 = getelementptr inbounds double, double* %23, i64 4
  %27 = bitcast double* %24 to <2 x double>*
  %28 = load <2 x double>, <2 x double>* %27, align 8
  %29 = insertelement <2 x double> undef, double %25, i32 0
  %30 = shufflevector <2 x double> %29, <2 x double> undef, <2 x i32> zeroinitializer
  %31 = fmul <2 x double> %28, %30
  %32 = bitcast %struct.SkDConic* %0 to <2 x double>*
  %33 = load <2 x double>, <2 x double>* %32, align 8
  %34 = bitcast double* %26 to <2 x double>*
  %35 = load <2 x double>, <2 x double>* %34, align 8
  %36 = fmul <2 x double> %31, <double 2.000000e+00, double 2.000000e+00>
  %37 = fsub <2 x double> %35, %36
  %38 = fadd <2 x double> %33, %37
  %39 = fsub <2 x double> %31, %33
  %40 = fmul <2 x double> %39, <double 2.000000e+00, double 2.000000e+00>
  %41 = insertelement <2 x double> undef, double %1, i32 0
  %42 = shufflevector <2 x double> %41, <2 x double> undef, <2 x i32> zeroinitializer
  %43 = fmul <2 x double> %38, %42
  %44 = fadd <2 x double> %40, %43
  %45 = fmul <2 x double> %44, %42
  %46 = fadd <2 x double> %33, %45
  %47 = insertelement <2 x double> undef, double %22, i32 0
  %48 = shufflevector <2 x double> %47, <2 x double> undef, <2 x i32> zeroinitializer
  %49 = fdiv <2 x double> %46, %48
  br label %50

50:                                               ; preds = %13, %9, %4
  %51 = phi <2 x double> [ %6, %4 ], [ %12, %9 ], [ %49, %13 ]
  %52 = extractelement <2 x double> %51, i32 0
  %53 = insertvalue { double, double } undef, double %52, 0
  %54 = extractelement <2 x double> %51, i32 1
  %55 = insertvalue { double, double } %53, double %54, 1
  ret { double, double } %55
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8SkDConic9subDivideEdd(%struct.SkDConic* noalias nocapture sret, %struct.SkDConic* nocapture readonly, double, double) local_unnamed_addr #0 align 2 {
  %5 = fcmp oeq double %2, 0.000000e+00
  br i1 %5, label %6, label %13

6:                                                ; preds = %4
  %7 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %1, i64 0, i32 0, i32 0, i64 0, i32 0
  %8 = bitcast %struct.SkDConic* %1 to <2 x double>*
  %9 = load <2 x double>, <2 x double>* %8, align 8
  %10 = getelementptr inbounds double, double* %7, i64 4
  %11 = bitcast double* %10 to <2 x double>*
  %12 = load <2 x double>, <2 x double>* %11, align 8
  br label %55

13:                                               ; preds = %4
  %14 = fcmp une double %2, 1.000000e+00
  br i1 %14, label %15, label %49

15:                                               ; preds = %13
  %16 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %1, i64 0, i32 0, i32 0, i64 0, i32 0
  %17 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %1, i64 0, i32 1
  %18 = load float, float* %17, align 8
  %19 = getelementptr inbounds double, double* %16, i64 2
  %20 = fpext float %18 to double
  %21 = getelementptr inbounds double, double* %16, i64 4
  %22 = bitcast double* %19 to <2 x double>*
  %23 = load <2 x double>, <2 x double>* %22, align 8
  %24 = insertelement <2 x double> undef, double %20, i32 0
  %25 = shufflevector <2 x double> %24, <2 x double> undef, <2 x i32> zeroinitializer
  %26 = fmul <2 x double> %23, %25
  %27 = bitcast %struct.SkDConic* %1 to <2 x double>*
  %28 = load <2 x double>, <2 x double>* %27, align 8
  %29 = bitcast double* %21 to <2 x double>*
  %30 = load <2 x double>, <2 x double>* %29, align 8
  %31 = fmul <2 x double> %26, <double 2.000000e+00, double 2.000000e+00>
  %32 = fsub <2 x double> %30, %31
  %33 = fadd <2 x double> %28, %32
  %34 = fsub <2 x double> %26, %28
  %35 = fmul <2 x double> %34, <double 2.000000e+00, double 2.000000e+00>
  %36 = insertelement <2 x double> undef, double %2, i32 0
  %37 = shufflevector <2 x double> %36, <2 x double> undef, <2 x i32> zeroinitializer
  %38 = fmul <2 x double> %33, %37
  %39 = fadd <2 x double> %35, %38
  %40 = fmul <2 x double> %39, %37
  %41 = fadd <2 x double> %28, %40
  %42 = fadd float %18, -1.000000e+00
  %43 = fmul float %42, 2.000000e+00
  %44 = fpext float %43 to double
  %45 = fmul double %44, %2
  %46 = fsub double %44, %45
  %47 = fmul double %46, %2
  %48 = fadd double %47, 1.000000e+00
  br label %55

49:                                               ; preds = %13
  %50 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %1, i64 0, i32 0, i32 0, i64 2, i32 0
  %51 = bitcast double* %50 to <2 x double>*
  %52 = load <2 x double>, <2 x double>* %51, align 8
  %53 = bitcast %struct.SkDConic* %1 to <2 x double>*
  %54 = load <2 x double>, <2 x double>* %53, align 8
  br label %55

55:                                               ; preds = %15, %49, %6
  %56 = phi double [ 1.000000e+00, %6 ], [ %48, %15 ], [ 1.000000e+00, %49 ]
  %57 = phi <2 x double> [ %9, %6 ], [ %41, %15 ], [ %52, %49 ]
  %58 = phi <2 x double> [ %9, %6 ], [ %28, %15 ], [ %54, %49 ]
  %59 = phi <2 x double> [ %12, %6 ], [ %30, %15 ], [ %52, %49 ]
  %60 = fadd double %2, %3
  %61 = fmul double %60, 5.000000e-01
  %62 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %1, i64 0, i32 0, i32 0, i64 0, i32 0
  %63 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %1, i64 0, i32 1
  %64 = load float, float* %63, align 8
  %65 = getelementptr inbounds double, double* %62, i64 2
  %66 = fpext float %64 to double
  %67 = bitcast double* %65 to <2 x double>*
  %68 = load <2 x double>, <2 x double>* %67, align 8
  %69 = insertelement <2 x double> undef, double %66, i32 0
  %70 = shufflevector <2 x double> %69, <2 x double> undef, <2 x i32> zeroinitializer
  %71 = fmul <2 x double> %68, %70
  %72 = fmul <2 x double> %71, <double 2.000000e+00, double 2.000000e+00>
  %73 = fsub <2 x double> %59, %72
  %74 = fadd <2 x double> %58, %73
  %75 = fsub <2 x double> %71, %58
  %76 = fmul <2 x double> %75, <double 2.000000e+00, double 2.000000e+00>
  %77 = insertelement <2 x double> undef, double %61, i32 0
  %78 = shufflevector <2 x double> %77, <2 x double> undef, <2 x i32> zeroinitializer
  %79 = fmul <2 x double> %78, %74
  %80 = fadd <2 x double> %76, %79
  %81 = fmul <2 x double> %78, %80
  %82 = fadd <2 x double> %58, %81
  %83 = fadd float %64, -1.000000e+00
  %84 = fmul float %83, 2.000000e+00
  %85 = fpext float %84 to double
  %86 = fmul double %61, %85
  %87 = fsub double %85, %86
  %88 = fmul double %61, %87
  %89 = fadd double %88, 1.000000e+00
  %90 = fcmp oeq double %3, 1.000000e+00
  br i1 %90, label %104, label %91

91:                                               ; preds = %55
  %92 = fcmp une double %3, 0.000000e+00
  br i1 %92, label %93, label %104

93:                                               ; preds = %91
  %94 = insertelement <2 x double> undef, double %3, i32 0
  %95 = shufflevector <2 x double> %94, <2 x double> undef, <2 x i32> zeroinitializer
  %96 = fmul <2 x double> %74, %95
  %97 = fadd <2 x double> %76, %96
  %98 = fmul <2 x double> %97, %95
  %99 = fadd <2 x double> %58, %98
  %100 = fmul double %85, %3
  %101 = fsub double %85, %100
  %102 = fmul double %101, %3
  %103 = fadd double %102, 1.000000e+00
  br label %104

104:                                              ; preds = %55, %91, %93
  %105 = phi double [ %103, %93 ], [ 1.000000e+00, %91 ], [ 1.000000e+00, %55 ]
  %106 = phi <2 x double> [ %99, %93 ], [ %58, %91 ], [ %59, %55 ]
  %107 = fmul <2 x double> %82, <double 2.000000e+00, double 2.000000e+00>
  %108 = fadd <2 x double> %57, %106
  %109 = fmul <2 x double> %108, <double 5.000000e-01, double 5.000000e-01>
  %110 = fsub <2 x double> %107, %109
  %111 = fmul double %89, 2.000000e+00
  %112 = fadd double %56, %105
  %113 = fmul double %112, 5.000000e-01
  %114 = fsub double %111, %113
  %115 = fcmp une double %114, 0.000000e+00
  %116 = select i1 %115, double %114, double 1.000000e+00
  %117 = bitcast %struct.SkDConic* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %117, i8* align 8 bitcast ({ %struct.SkDQuad, float, [4 x i8] }* @__const._ZNK8SkDConic9subDivideERK8SkDPointS2_ddPf.chopped to i8*), i64 56, i1 false)
  %118 = insertelement <2 x double> undef, double %56, i32 0
  %119 = shufflevector <2 x double> %118, <2 x double> undef, <2 x i32> zeroinitializer
  %120 = fdiv <2 x double> %57, %119
  %121 = bitcast %struct.SkDConic* %0 to <2 x double>*
  store <2 x double> %120, <2 x double>* %121, align 8
  %122 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %0, i64 0, i32 0, i32 0, i64 1, i32 0
  %123 = insertelement <2 x double> undef, double %116, i32 0
  %124 = shufflevector <2 x double> %123, <2 x double> undef, <2 x i32> zeroinitializer
  %125 = fdiv <2 x double> %110, %124
  %126 = bitcast double* %122 to <2 x double>*
  store <2 x double> %125, <2 x double>* %126, align 8
  %127 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %0, i64 0, i32 0, i32 0, i64 2, i32 0
  %128 = insertelement <2 x double> undef, double %105, i32 0
  %129 = shufflevector <2 x double> %128, <2 x double> undef, <2 x i32> zeroinitializer
  %130 = fdiv <2 x double> %106, %129
  %131 = bitcast double* %127 to <2 x double>*
  store <2 x double> %130, <2 x double>* %131, align 8
  %132 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %0, i64 0, i32 1
  %133 = fmul double %56, %105
  %134 = tail call double @sqrt(double %133) #8
  %135 = fdiv double %116, %134
  %136 = fptrunc double %135 to float
  store float %136, float* %132, align 8
  ret void
}

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden { double, double } @_ZNK8SkDConic9subDivideERK8SkDPointS2_ddPf(%struct.SkDConic* nocapture readonly, %struct.SkDPoint* nocapture readnone dereferenceable(16), %struct.SkDPoint* nocapture readnone dereferenceable(16), double, double, float* nocapture) local_unnamed_addr #0 align 2 {
  %7 = alloca %struct.SkDConic, align 8
  %8 = bitcast %struct.SkDConic* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %8) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %8, i8* align 8 bitcast ({ %struct.SkDQuad, float, [4 x i8] }* @__const._ZNK8SkDConic9subDivideERK8SkDPointS2_ddPf.chopped to i8*), i64 56, i1 false)
  call void @_ZNK8SkDConic9subDivideEdd(%struct.SkDConic* nonnull sret %7, %struct.SkDConic* %0, double %3, double %4)
  %9 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %7, i64 0, i32 1
  %10 = bitcast float* %9 to i32*
  %11 = load i32, i32* %10, align 8
  %12 = bitcast float* %5 to i32*
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %7, i64 0, i32 0, i32 0, i64 1, i32 0
  %14 = load double, double* %13, align 8
  %15 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %7, i64 0, i32 0, i32 0, i64 1, i32 1
  %16 = load double, double* %15, align 8
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %8) #8
  %17 = insertvalue { double, double } undef, double %14, 0
  %18 = insertvalue { double, double } %17, double %16, 1
  ret { double, double } %18
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK8SkTConic12intersectRayEP15SkIntersectionsRK7SkDLine(%class.SkTConic*, %class.SkIntersections*, %struct.SkDLine* dereferenceable(32)) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.SkTConic, %class.SkTConic* %0, i64 0, i32 1
  %5 = tail call i32 @_ZN15SkIntersections12intersectRayERK8SkDConicRK7SkDLine(%class.SkIntersections* %1, %struct.SkDConic* dereferenceable(56) %4, %struct.SkDLine* dereferenceable(32) %2) #8
  ret i32 %5
}

declare i32 @_ZN15SkIntersections12intersectRayERK8SkDConicRK7SkDLine(%class.SkIntersections*, %struct.SkDConic* dereferenceable(56), %struct.SkDLine* dereferenceable(32)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8SkTConic14hullIntersectsERK7SkDQuadPb(%class.SkTConic*, %struct.SkDQuad* dereferenceable(48), i8*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.SkTConic, %class.SkTConic* %0, i64 0, i32 1
  %5 = tail call zeroext i1 @_ZNK7SkDQuad14hullIntersectsERK8SkDConicPb(%struct.SkDQuad* %1, %struct.SkDConic* dereferenceable(56) %4, i8* %2) #8
  ret i1 %5
}

declare zeroext i1 @_ZNK7SkDQuad14hullIntersectsERK8SkDConicPb(%struct.SkDQuad*, %struct.SkDConic* dereferenceable(56), i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8SkTConic14hullIntersectsERK8SkDCubicPb(%class.SkTConic*, %struct.SkDCubic* dereferenceable(64), i8*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.SkTConic, %class.SkTConic* %0, i64 0, i32 1
  %5 = tail call zeroext i1 @_ZNK8SkDCubic14hullIntersectsERK8SkDConicPb(%struct.SkDCubic* %1, %struct.SkDConic* dereferenceable(56) %4, i8* %2) #8
  ret i1 %5
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8SkTConic9setBoundsEP7SkDRect(%class.SkTConic*, %struct.SkDRect*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkTConic, %class.SkTConic* %0, i64 0, i32 1
  tail call void @_ZN7SkDRect9setBoundsERK8SkDConicS2_dd(%struct.SkDRect* %1, %struct.SkDConic* dereferenceable(56) %3, %struct.SkDConic* dereferenceable(56) %3, double 0.000000e+00, double 1.000000e+00) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTCurveD2Ev(%class.SkTCurve*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTConicD0Ev(%class.SkTConic*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.SkTConic* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %struct.SkDPoint* @_ZNK8SkTConicixEi(%class.SkTConic*, i32) unnamed_addr #0 comdat align 2 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %class.SkTConic, %class.SkTConic* %0, i64 0, i32 1, i32 0, i32 0, i64 %3
  ret %struct.SkDPoint* %4
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %struct.SkDPoint* @_ZN8SkTConicixEi(%class.SkTConic*, i32) unnamed_addr #0 comdat align 2 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %class.SkTConic, %class.SkTConic* %0, i64 0, i32 1, i32 0, i32 0, i64 %3
  ret %struct.SkDPoint* %4
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK8SkTConic9collapsedEv(%class.SkTConic*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.SkTConic, %class.SkTConic* %0, i64 0, i32 1, i32 0, i32 0, i64 0
  %3 = getelementptr inbounds %class.SkTConic, %class.SkTConic* %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %4 = tail call zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint* %2, %struct.SkDPoint* dereferenceable(16) %3) #8
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.SkTConic, %class.SkTConic* %0, i64 0, i32 1, i32 0, i32 0, i64 2
  %7 = tail call zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint* %2, %struct.SkDPoint* dereferenceable(16) %6) #8
  br label %8

8:                                                ; preds = %1, %5
  %9 = phi i1 [ false, %1 ], [ %7, %5 ]
  ret i1 %9
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK8SkTConic14controlsInsideEv(%class.SkTConic*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.SkTConic, %class.SkTConic* %0, i64 0, i32 1, i32 0, i32 0, i64 0, i32 0
  %3 = getelementptr inbounds %class.SkTConic, %class.SkTConic* %0, i64 0, i32 1, i32 0, i32 0, i64 1, i32 0
  %4 = bitcast double* %2 to <2 x double>*
  %5 = load <2 x double>, <2 x double>* %4, align 8
  %6 = bitcast double* %3 to <2 x double>*
  %7 = load <2 x double>, <2 x double>* %6, align 8
  %8 = fsub <2 x double> %5, %7
  %9 = getelementptr inbounds %class.SkTConic, %class.SkTConic* %0, i64 0, i32 1, i32 0, i32 0, i64 2, i32 0
  %10 = bitcast double* %9 to <2 x double>*
  %11 = load <2 x double>, <2 x double>* %10, align 8
  %12 = fsub <2 x double> %5, %11
  %13 = fmul <2 x double> %8, %12
  %14 = extractelement <2 x double> %13, i32 0
  %15 = extractelement <2 x double> %13, i32 1
  %16 = fadd double %14, %15
  %17 = fcmp ogt double %16, 0.000000e+00
  br i1 %17, label %18, label %25

18:                                               ; preds = %1
  %19 = fsub <2 x double> %7, %11
  %20 = fmul <2 x double> %12, %19
  %21 = extractelement <2 x double> %20, i32 0
  %22 = extractelement <2 x double> %20, i32 1
  %23 = fadd double %21, %22
  %24 = fcmp ogt double %23, 0.000000e+00
  br label %25

25:                                               ; preds = %1, %18
  %26 = phi i1 [ false, %1 ], [ %24, %18 ]
  ret i1 %26
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTConic9debugInitEv(%class.SkTConic*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.SkTConic, %class.SkTConic* %0, i64 0, i32 1
  %3 = bitcast %struct.SkDConic* %2 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %3, i8 0, i64 52, i1 false) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { double, double } @_ZNK8SkTConic7dxdyAtTEd(%class.SkTConic*, double) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.SkTConic, %class.SkTConic* %0, i64 0, i32 1, i32 0, i32 0, i64 0, i32 0
  %4 = getelementptr inbounds %class.SkTConic, %class.SkTConic* %0, i64 0, i32 1, i32 1
  %5 = load float, float* %4, align 8
  %6 = getelementptr inbounds double, double* %3, i64 4
  %7 = getelementptr inbounds double, double* %3, i64 2
  %8 = fpext float %5 to double
  %9 = bitcast double* %6 to <2 x double>*
  %10 = load <2 x double>, <2 x double>* %9, align 8
  %11 = bitcast double* %3 to <2 x double>*
  %12 = load <2 x double>, <2 x double>* %11, align 8
  %13 = fsub <2 x double> %10, %12
  %14 = bitcast double* %7 to <2 x double>*
  %15 = load <2 x double>, <2 x double>* %14, align 8
  %16 = fsub <2 x double> %15, %12
  %17 = insertelement <2 x double> undef, double %8, i32 0
  %18 = shufflevector <2 x double> %17, <2 x double> undef, <2 x i32> zeroinitializer
  %19 = fmul <2 x double> %16, %18
  %20 = fmul <2 x double> %13, %18
  %21 = fsub <2 x double> %20, %13
  %22 = fmul <2 x double> %19, <double 2.000000e+00, double 2.000000e+00>
  %23 = fsub <2 x double> %13, %22
  %24 = insertelement <2 x double> undef, double %1, i32 0
  %25 = shufflevector <2 x double> %24, <2 x double> undef, <2 x i32> zeroinitializer
  %26 = fmul <2 x double> %21, %25
  %27 = fadd <2 x double> %26, %23
  %28 = fmul <2 x double> %27, %25
  %29 = fadd <2 x double> %19, %28
  %30 = extractelement <2 x double> %29, i32 0
  %31 = fcmp oeq double %30, 0.000000e+00
  %32 = extractelement <2 x double> %29, i32 1
  %33 = fcmp oeq double %32, 0.000000e+00
  %34 = and i1 %31, %33
  br i1 %34, label %35, label %40

35:                                               ; preds = %2
  %36 = fcmp oeq double %1, 0.000000e+00
  %37 = fcmp oeq double %1, 1.000000e+00
  %38 = or i1 %36, %37
  br i1 %38, label %40, label %39

39:                                               ; preds = %35
  tail call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str, i64 0, i64 0), i32 60, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0)) #8
  br label %40

40:                                               ; preds = %2, %35, %39
  %41 = phi <2 x double> [ %29, %39 ], [ %29, %2 ], [ %13, %35 ]
  %42 = extractelement <2 x double> %41, i32 0
  %43 = insertvalue { double, double } undef, double %42, 0
  %44 = extractelement <2 x double> %41, i32 1
  %45 = insertvalue { double, double } %43, double %44, 1
  ret { double, double } %45
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK8SkTConic14hullIntersectsERK8SkDConicPb(%class.SkTConic*, %struct.SkDConic* dereferenceable(56), i8*) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %1, i64 0, i32 0
  %5 = getelementptr inbounds %class.SkTConic, %class.SkTConic* %0, i64 0, i32 1, i32 0
  %6 = tail call zeroext i1 @_ZNK7SkDQuad14hullIntersectsERKS_Pb(%struct.SkDQuad* %4, %struct.SkDQuad* dereferenceable(48) %5, i8* %2) #8
  ret i1 %6
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK8SkTConic14hullIntersectsERK8SkTCurvePb(%class.SkTConic*, %class.SkTCurve* dereferenceable(8), i8*) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTConic, %class.SkTConic* %0, i64 0, i32 1
  %5 = bitcast %class.SkTCurve* %1 to i1 (%class.SkTCurve*, %struct.SkDConic*, i8*)***
  %6 = load i1 (%class.SkTCurve*, %struct.SkDConic*, i8*)**, i1 (%class.SkTCurve*, %struct.SkDConic*, i8*)*** %5, align 8
  %7 = getelementptr inbounds i1 (%class.SkTCurve*, %struct.SkDConic*, i8*)*, i1 (%class.SkTCurve*, %struct.SkDConic*, i8*)** %6, i64 9
  %8 = load i1 (%class.SkTCurve*, %struct.SkDConic*, i8*)*, i1 (%class.SkTCurve*, %struct.SkDConic*, i8*)** %7, align 8
  %9 = tail call zeroext i1 %8(%class.SkTCurve* %1, %struct.SkDConic* dereferenceable(56) %4, i8* %2) #8
  ret i1 %9
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK8SkTConic7IsConicEv(%class.SkTConic*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %class.SkTCurve* @_ZNK8SkTConic4makeER12SkArenaAlloc(%class.SkTConic*, %class.SkArenaAlloc* dereferenceable(32)) unnamed_addr #0 comdat align 2 {
  %3 = tail call i8* @_ZN12SkArenaAlloc21allocObjectWithFooterEjj(%class.SkArenaAlloc* %1, i32 73, i32 8) #8
  %4 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %1, i64 0, i32 1
  %5 = bitcast i8** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = ptrtoint i8* %3 to i64
  %8 = sub i64 %7, %6
  %9 = trunc i64 %8 to i32
  %10 = getelementptr inbounds i8, i8* %3, i64 64
  store i8* %10, i8** %4, align 8
  tail call void @_ZN12SkArenaAlloc13installFooterEPFPcS0_Ej(%class.SkArenaAlloc* %1, i8* (i8*)* nonnull @_ZZN12SkArenaAlloc4makeIZNS_4makeI8SkTConicJEEEPT_DpOT0_EUlPvE_EEDTclfp_LDnEEEOS3_ENUlPcE_8__invokeESC_, i32 %9) #8
  %11 = bitcast i8* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [24 x i8*] }, { [24 x i8*] }* @_ZTV8SkTConic, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8
  %12 = bitcast i8* %3 to %class.SkTCurve*
  ret %class.SkTCurve* %12
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK8SkTConic16maxIntersectionsEv(%class.SkTConic*) unnamed_addr #0 comdat align 2 {
  ret i32 4
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK8SkTConic8otherPtsEiPPK8SkDPoint(%class.SkTConic*, i32, %struct.SkDPoint**) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTConic, %class.SkTConic* %0, i64 0, i32 1, i32 0
  tail call void @_ZNK7SkDQuad8otherPtsEiPPK8SkDPoint(%struct.SkDQuad* %4, i32 %1, %struct.SkDPoint** %2) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK8SkTConic10pointCountEv(%class.SkTConic*) unnamed_addr #0 comdat align 2 {
  ret i32 3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK8SkTConic9pointLastEv(%class.SkTConic*) unnamed_addr #0 comdat align 2 {
  ret i32 2
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { double, double } @_ZNK8SkTConic5ptAtTEd(%class.SkTConic*, double) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.SkTConic, %class.SkTConic* %0, i64 0, i32 1
  %4 = fcmp oeq double %1, 0.000000e+00
  br i1 %4, label %5, label %8

5:                                                ; preds = %2
  %6 = bitcast %struct.SkDConic* %3 to <2 x double>*
  %7 = load <2 x double>, <2 x double>* %6, align 8
  br label %51

8:                                                ; preds = %2
  %9 = fcmp oeq double %1, 1.000000e+00
  br i1 %9, label %10, label %14

10:                                               ; preds = %8
  %11 = getelementptr inbounds %class.SkTConic, %class.SkTConic* %0, i64 0, i32 1, i32 0, i32 0, i64 2, i32 0
  %12 = bitcast double* %11 to <2 x double>*
  %13 = load <2 x double>, <2 x double>* %12, align 8
  br label %51

14:                                               ; preds = %8
  %15 = getelementptr inbounds %class.SkTConic, %class.SkTConic* %0, i64 0, i32 1, i32 1
  %16 = load float, float* %15, align 8
  %17 = fadd float %16, -1.000000e+00
  %18 = fmul float %17, 2.000000e+00
  %19 = fpext float %18 to double
  %20 = fmul double %19, %1
  %21 = fsub double %19, %20
  %22 = fmul double %21, %1
  %23 = fadd double %22, 1.000000e+00
  %24 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %3, i64 0, i32 0, i32 0, i64 0, i32 0
  %25 = getelementptr inbounds double, double* %24, i64 2
  %26 = fpext float %16 to double
  %27 = getelementptr inbounds double, double* %24, i64 4
  %28 = bitcast double* %25 to <2 x double>*
  %29 = load <2 x double>, <2 x double>* %28, align 8
  %30 = insertelement <2 x double> undef, double %26, i32 0
  %31 = shufflevector <2 x double> %30, <2 x double> undef, <2 x i32> zeroinitializer
  %32 = fmul <2 x double> %29, %31
  %33 = bitcast %struct.SkDConic* %3 to <2 x double>*
  %34 = load <2 x double>, <2 x double>* %33, align 8
  %35 = bitcast double* %27 to <2 x double>*
  %36 = load <2 x double>, <2 x double>* %35, align 8
  %37 = fmul <2 x double> %32, <double 2.000000e+00, double 2.000000e+00>
  %38 = fsub <2 x double> %36, %37
  %39 = fadd <2 x double> %34, %38
  %40 = fsub <2 x double> %32, %34
  %41 = fmul <2 x double> %40, <double 2.000000e+00, double 2.000000e+00>
  %42 = insertelement <2 x double> undef, double %1, i32 0
  %43 = shufflevector <2 x double> %42, <2 x double> undef, <2 x i32> zeroinitializer
  %44 = fmul <2 x double> %39, %43
  %45 = fadd <2 x double> %41, %44
  %46 = fmul <2 x double> %45, %43
  %47 = fadd <2 x double> %34, %46
  %48 = insertelement <2 x double> undef, double %23, i32 0
  %49 = shufflevector <2 x double> %48, <2 x double> undef, <2 x i32> zeroinitializer
  %50 = fdiv <2 x double> %47, %49
  br label %51

51:                                               ; preds = %5, %10, %14
  %52 = phi <2 x double> [ %7, %5 ], [ %13, %10 ], [ %50, %14 ]
  %53 = extractelement <2 x double> %52, i32 0
  %54 = insertvalue { double, double } undef, double %53, 0
  %55 = extractelement <2 x double> %52, i32 1
  %56 = insertvalue { double, double } %54, double %55, 1
  ret { double, double } %56
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK8SkTConic9subDivideEddP8SkTCurve(%class.SkTConic*, double, double, %class.SkTCurve*) unnamed_addr #0 comdat align 2 {
  %5 = alloca %struct.SkDConic, align 8
  %6 = bitcast %struct.SkDConic* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %6) #8
  %7 = getelementptr inbounds %class.SkTConic, %class.SkTConic* %0, i64 0, i32 1
  call void @_ZNK8SkDConic9subDivideEdd(%struct.SkDConic* nonnull sret %5, %struct.SkDConic* %7, double %1, double %2)
  %8 = getelementptr inbounds %class.SkTCurve, %class.SkTCurve* %3, i64 1
  %9 = bitcast %class.SkTCurve* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* nonnull align 8 %6, i64 56, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %6) #8
  ret void
}

declare void @_ZN7SkDRect9setBoundsERK8SkDConicS2_dd(%struct.SkDRect*, %struct.SkDConic* dereferenceable(56), %struct.SkDConic* dereferenceable(56), double, double) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint*, %struct.SkDPoint* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %0, i64 0, i32 0
  %4 = load double, double* %3, align 8
  %5 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %1, i64 0, i32 0
  %6 = load double, double* %5, align 8
  %7 = fsub double %4, %6
  %8 = tail call double @llvm.fabs.f64(double %7) #8
  %9 = fcmp olt double %8, 0x3E80000000000000
  br i1 %9, label %10, label %18

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %0, i64 0, i32 1
  %12 = load double, double* %11, align 8
  %13 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %1, i64 0, i32 1
  %14 = load double, double* %13, align 8
  %15 = fsub double %12, %14
  %16 = tail call double @llvm.fabs.f64(double %15) #8
  %17 = fcmp olt double %16, 0x3E80000000000000
  br i1 %17, label %68, label %18

18:                                               ; preds = %10, %2
  %19 = fptrunc double %4 to float
  %20 = fptrunc double %6 to float
  %21 = tail call zeroext i1 @_Z16RoughlyEqualUlpsff(float %19, float %20) #8
  br i1 %21, label %22, label %68

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %0, i64 0, i32 1
  %24 = load double, double* %23, align 8
  %25 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %1, i64 0, i32 1
  %26 = load double, double* %25, align 8
  %27 = fptrunc double %24 to float
  %28 = fptrunc double %26 to float
  %29 = tail call zeroext i1 @_Z16RoughlyEqualUlpsff(float %27, float %28) #8
  br i1 %29, label %30, label %68

30:                                               ; preds = %22
  %31 = load double, double* %3, align 8
  %32 = load double, double* %5, align 8
  %33 = fsub double %31, %32
  %34 = load double, double* %23, align 8
  %35 = load double, double* %25, align 8
  %36 = fsub double %34, %35
  %37 = fmul double %33, %33
  %38 = fmul double %36, %36
  %39 = fadd double %37, %38
  %40 = tail call double @sqrt(double %39) #8
  %41 = load double, double* %5, align 8
  %42 = load double, double* %3, align 8
  %43 = fcmp olt double %41, %42
  %44 = load double, double* %23, align 8
  %45 = select i1 %43, double %41, double %42
  %46 = fcmp olt double %44, %45
  %47 = load double, double* %25, align 8
  %48 = select i1 %46, double %44, double %45
  %49 = fcmp olt double %47, %48
  %50 = select i1 %49, double %47, double %48
  %51 = fcmp olt double %42, %41
  %52 = load double, double* %5, align 8
  %53 = load double, double* %3, align 8
  %54 = select i1 %51, double %52, double %53
  %55 = fcmp olt double %54, %44
  %56 = load double, double* %23, align 8
  %57 = select i1 %55, double %56, double %54
  %58 = fcmp olt double %57, %47
  %59 = load double, double* %25, align 8
  %60 = select i1 %58, double %59, double %57
  %61 = fsub double -0.000000e+00, %50
  %62 = fcmp olt double %60, %61
  %63 = select i1 %62, double %61, double %60
  %64 = fadd double %40, %63
  %65 = fptrunc double %63 to float
  %66 = fptrunc double %64 to float
  %67 = tail call zeroext i1 @_Z16AlmostPequalUlpsff(float %65, float %66) #8
  br label %68

68:                                               ; preds = %18, %22, %10, %30
  %69 = phi i1 [ %67, %30 ], [ true, %10 ], [ false, %22 ], [ false, %18 ]
  ret i1 %69
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #6

declare zeroext i1 @_Z16RoughlyEqualUlpsff(float, float) local_unnamed_addr #2

declare zeroext i1 @_Z16AlmostPequalUlpsff(float, float) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare zeroext i1 @_ZNK7SkDQuad14hullIntersectsERKS_Pb(%struct.SkDQuad*, %struct.SkDQuad* dereferenceable(48), i8*) local_unnamed_addr #2

declare i8* @_ZN12SkArenaAlloc21allocObjectWithFooterEjj(%class.SkArenaAlloc*, i32, i32) local_unnamed_addr #2

declare void @_ZN12SkArenaAlloc13installFooterEPFPcS0_Ej(%class.SkArenaAlloc*, i8* (i8*)*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZZN12SkArenaAlloc4makeIZNS_4makeI8SkTConicJEEEPT_DpOT0_EUlPvE_EEDTclfp_LDnEEEOS3_ENUlPcE_8__invokeESC_(i8*) #7 comdat align 2 {
  %2 = getelementptr inbounds i8, i8* %0, i64 -73
  %3 = bitcast i8* %2 to %class.SkTConic*
  %4 = bitcast i8* %2 to void (%class.SkTConic*)***
  %5 = load void (%class.SkTConic*)**, void (%class.SkTConic*)*** %4, align 8
  %6 = load void (%class.SkTConic*)*, void (%class.SkTConic*)** %5, align 8
  tail call void %6(%class.SkTConic* %3) #8
  ret i8* %2
}

declare void @_ZNK7SkDQuad8otherPtsEiPPK8SkDPoint(%struct.SkDQuad*, i32, %struct.SkDPoint**) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
