; ModuleID = '../../third_party/webrtc/modules/audio_processing/agc2/noise_level_estimator.cc'
source_filename = "../../third_party/webrtc/modules/audio_processing/agc2/noise_level_estimator.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.webrtc::NoiseLevelEstimator" = type { i32 (...)** }
%"class.webrtc::ApmDataDumper" = type { i8 }
%"class.webrtc::SignalClassifier" = type <{ %"class.webrtc::ApmDataDumper"*, %"class.webrtc::DownSampler", %"class.std::__1::unique_ptr.4", %"class.webrtc::NoiseSpectrumEstimator", i32, i32, i32, i32, %"class.webrtc::OouraFft", [7 x i8] }>
%"class.webrtc::DownSampler" = type <{ %"class.webrtc::ApmDataDumper"*, i32, i32, %"class.webrtc::BiQuadFilter", [4 x i8] }>
%"class.webrtc::BiQuadFilter" = type { %"struct.webrtc::BiQuadFilter::BiQuadState", %"struct.webrtc::BiQuadFilter::BiQuadCoefficients" }
%"struct.webrtc::BiQuadFilter::BiQuadState" = type { [2 x float], [2 x float] }
%"struct.webrtc::BiQuadFilter::BiQuadCoefficients" = type { [3 x float], [2 x float] }
%"class.std::__1::unique_ptr.4" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.webrtc::SignalClassifier::FrameExtender"* }
%"class.webrtc::SignalClassifier::FrameExtender" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { float*, float*, %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { float* }
%"class.webrtc::NoiseSpectrumEstimator" = type <{ %"class.webrtc::ApmDataDumper"*, [65 x float], [4 x i8] }>
%"class.webrtc::OouraFft" = type { i8 }
%"class.webrtc::(anonymous namespace)::NoiseLevelEstimatorImpl" = type { %"class.webrtc::NoiseLevelEstimator", %"class.webrtc::ApmDataDumper"*, i32, float, i8, float, i32, [4 x i8], %"class.webrtc::SignalClassifier" }
%"class.webrtc::AudioFrameView" = type { float**, i64, i64 }
%"class.webrtc::(anonymous namespace)::NoiseFloorEstimator" = type { %"class.webrtc::NoiseLevelEstimator", %"class.webrtc::ApmDataDumper"*, i32, float, i8, i8, float, float, i32 }

$_ZN6webrtc19NoiseLevelEstimatorD2Ev = comdat any

@_ZTVN6webrtc12_GLOBAL__N_123NoiseLevelEstimatorImplE = internal unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.webrtc::(anonymous namespace)::NoiseLevelEstimatorImpl"*)* @_ZN6webrtc12_GLOBAL__N_123NoiseLevelEstimatorImplD2Ev to i8*), i8* bitcast (void (%"class.webrtc::(anonymous namespace)::NoiseLevelEstimatorImpl"*)* @_ZN6webrtc12_GLOBAL__N_123NoiseLevelEstimatorImplD0Ev to i8*), i8* bitcast (float (%"class.webrtc::(anonymous namespace)::NoiseLevelEstimatorImpl"*, %"class.webrtc::AudioFrameView"*)* @_ZN6webrtc12_GLOBAL__N_123NoiseLevelEstimatorImpl7AnalyzeERKNS_14AudioFrameViewIKfEE to i8*)] }, align 8
@_ZTVN6webrtc12_GLOBAL__N_119NoiseFloorEstimatorE = internal unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.webrtc::NoiseLevelEstimator"*)* @_ZN6webrtc19NoiseLevelEstimatorD2Ev to i8*), i8* bitcast (void (%"class.webrtc::(anonymous namespace)::NoiseFloorEstimator"*)* @_ZN6webrtc12_GLOBAL__N_119NoiseFloorEstimatorD0Ev to i8*), i8* bitcast (float (%"class.webrtc::(anonymous namespace)::NoiseFloorEstimator"*, %"class.webrtc::AudioFrameView"*)* @_ZN6webrtc12_GLOBAL__N_119NoiseFloorEstimator7AnalyzeERKNS_14AudioFrameViewIKfEE to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden %"class.webrtc::NoiseLevelEstimator"* @_ZN6webrtc30CreateStationaryNoiseEstimatorEPNS_13ApmDataDumperE(%"class.webrtc::ApmDataDumper"*) local_unnamed_addr #0 {
  %2 = tail call i8* @_Znwm(i64 408) #7
  %3 = bitcast i8* %2 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN6webrtc12_GLOBAL__N_123NoiseLevelEstimatorImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds i8, i8* %2, i64 8
  %5 = bitcast i8* %4 to %"class.webrtc::ApmDataDumper"**
  store %"class.webrtc::ApmDataDumper"* %0, %"class.webrtc::ApmDataDumper"** %5, align 8
  %6 = getelementptr inbounds i8, i8* %2, i64 40
  %7 = bitcast i8* %6 to %"class.webrtc::SignalClassifier"*
  tail call void @_ZN6webrtc16SignalClassifierC1EPNS_13ApmDataDumperE(%"class.webrtc::SignalClassifier"* %7, %"class.webrtc::ApmDataDumper"* %0) #8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to i32*
  store i32 48000, i32* %9, align 8
  %10 = getelementptr inbounds i8, i8* %2, i64 28
  %11 = bitcast i8* %10 to float*
  store float 1.000000e+00, float* %11, align 4
  %12 = getelementptr inbounds i8, i8* %2, i64 24
  store i8 1, i8* %12, align 8
  %13 = getelementptr inbounds i8, i8* %2, i64 20
  %14 = bitcast i8* %13 to float*
  store float 1.920000e+03, float* %14, align 4
  %15 = getelementptr inbounds i8, i8* %2, i64 32
  %16 = bitcast i8* %15 to i32*
  store i32 0, i32* %16, align 8
  tail call void @_ZN6webrtc16SignalClassifier10InitializeEi(%"class.webrtc::SignalClassifier"* %7, i32 48000) #8
  %17 = bitcast i8* %2 to %"class.webrtc::NoiseLevelEstimator"*
  ret %"class.webrtc::NoiseLevelEstimator"* %17
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.webrtc::NoiseLevelEstimator"* @_ZN6webrtc25CreateNoiseFloorEstimatorEPNS_13ApmDataDumperE(%"class.webrtc::ApmDataDumper"*) local_unnamed_addr #0 {
  %2 = ptrtoint %"class.webrtc::ApmDataDumper"* %0 to i64
  %3 = tail call i8* @_Znwm(i64 40) #7
  %4 = bitcast i8* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN6webrtc12_GLOBAL__N_119NoiseFloorEstimatorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds i8, i8* %3, i64 8
  %6 = bitcast i8* %5 to i64*
  store i64 %2, i64* %6, align 8
  %7 = getelementptr inbounds i8, i8* %3, i64 16
  %8 = bitcast i8* %7 to i32*
  store i32 48000, i32* %8, align 8
  %9 = getelementptr inbounds i8, i8* %3, i64 24
  store i8 1, i8* %9, align 8
  %10 = getelementptr inbounds i8, i8* %3, i64 25
  store i8 0, i8* %10, align 1
  %11 = getelementptr inbounds i8, i8* %3, i64 20
  %12 = bitcast i8* %11 to float*
  store float 1.920000e+03, float* %12, align 4
  %13 = getelementptr inbounds i8, i8* %3, i64 28
  %14 = bitcast i8* %13 to float*
  store float 1.920000e+03, float* %14, align 4
  %15 = getelementptr inbounds i8, i8* %3, i64 32
  %16 = bitcast i8* %15 to float*
  store float 1.920000e+03, float* %16, align 8
  %17 = getelementptr inbounds i8, i8* %3, i64 36
  %18 = bitcast i8* %17 to i32*
  store i32 500, i32* %18, align 4
  %19 = bitcast i8* %3 to %"class.webrtc::NoiseLevelEstimator"*
  ret %"class.webrtc::NoiseLevelEstimator"* %19
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #2

declare void @_ZN6webrtc16SignalClassifierC1EPNS_13ApmDataDumperE(%"class.webrtc::SignalClassifier"*, %"class.webrtc::ApmDataDumper"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN6webrtc12_GLOBAL__N_123NoiseLevelEstimatorImplD2Ev(%"class.webrtc::(anonymous namespace)::NoiseLevelEstimatorImpl"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::(anonymous namespace)::NoiseLevelEstimatorImpl", %"class.webrtc::(anonymous namespace)::NoiseLevelEstimatorImpl"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN6webrtc12_GLOBAL__N_123NoiseLevelEstimatorImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.webrtc::(anonymous namespace)::NoiseLevelEstimatorImpl", %"class.webrtc::(anonymous namespace)::NoiseLevelEstimatorImpl"* %0, i64 0, i32 8
  tail call void @_ZN6webrtc16SignalClassifierD1Ev(%"class.webrtc::SignalClassifier"* %3) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN6webrtc12_GLOBAL__N_123NoiseLevelEstimatorImplD0Ev(%"class.webrtc::(anonymous namespace)::NoiseLevelEstimatorImpl"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::(anonymous namespace)::NoiseLevelEstimatorImpl", %"class.webrtc::(anonymous namespace)::NoiseLevelEstimatorImpl"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN6webrtc12_GLOBAL__N_123NoiseLevelEstimatorImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.webrtc::(anonymous namespace)::NoiseLevelEstimatorImpl", %"class.webrtc::(anonymous namespace)::NoiseLevelEstimatorImpl"* %0, i64 0, i32 8
  tail call void @_ZN6webrtc16SignalClassifierD1Ev(%"class.webrtc::SignalClassifier"* %3) #8
  %4 = bitcast %"class.webrtc::(anonymous namespace)::NoiseLevelEstimatorImpl"* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal float @_ZN6webrtc12_GLOBAL__N_123NoiseLevelEstimatorImpl7AnalyzeERKNS_14AudioFrameViewIKfEE(%"class.webrtc::(anonymous namespace)::NoiseLevelEstimatorImpl"*, %"class.webrtc::AudioFrameView"* nocapture readonly dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = alloca float, align 4
  %4 = alloca float, align 4
  %5 = alloca float, align 4
  %6 = alloca float, align 4
  %7 = getelementptr inbounds %"class.webrtc::(anonymous namespace)::NoiseLevelEstimatorImpl", %"class.webrtc::(anonymous namespace)::NoiseLevelEstimatorImpl"* %0, i64 0, i32 6
  %8 = getelementptr inbounds %"class.webrtc::AudioFrameView", %"class.webrtc::AudioFrameView"* %1, i64 0, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = trunc i64 %9 to i32
  %11 = mul i32 %10, 100
  %12 = getelementptr inbounds %"class.webrtc::(anonymous namespace)::NoiseLevelEstimatorImpl", %"class.webrtc::(anonymous namespace)::NoiseLevelEstimatorImpl"* %0, i64 0, i32 2
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %11, %13
  br i1 %14, label %24, label %15

15:                                               ; preds = %2
  store i32 %11, i32* %12, align 8
  %16 = getelementptr inbounds %"class.webrtc::(anonymous namespace)::NoiseLevelEstimatorImpl", %"class.webrtc::(anonymous namespace)::NoiseLevelEstimatorImpl"* %0, i64 0, i32 5
  store float 1.000000e+00, float* %16, align 4
  %17 = getelementptr inbounds %"class.webrtc::(anonymous namespace)::NoiseLevelEstimatorImpl", %"class.webrtc::(anonymous namespace)::NoiseLevelEstimatorImpl"* %0, i64 0, i32 4
  store i8 1, i8* %17, align 8
  %18 = sitofp i32 %11 to float
  %19 = fmul float %18, 2.000000e+00
  %20 = fmul float %19, 2.000000e+00
  %21 = fdiv float %20, 1.000000e+02
  %22 = getelementptr inbounds %"class.webrtc::(anonymous namespace)::NoiseLevelEstimatorImpl", %"class.webrtc::(anonymous namespace)::NoiseLevelEstimatorImpl"* %0, i64 0, i32 3
  store float %21, float* %22, align 4
  store i32 0, i32* %7, align 8
  %23 = getelementptr inbounds %"class.webrtc::(anonymous namespace)::NoiseLevelEstimatorImpl", %"class.webrtc::(anonymous namespace)::NoiseLevelEstimatorImpl"* %0, i64 0, i32 8
  tail call void @_ZN6webrtc16SignalClassifier10InitializeEi(%"class.webrtc::SignalClassifier"* %23, i32 %11) #8
  br label %24

24:                                               ; preds = %2, %15
  %25 = bitcast float* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %25)
  store float 0xFFFFFFFFE0000000, float* %3, align 4
  %26 = getelementptr inbounds %"class.webrtc::AudioFrameView", %"class.webrtc::AudioFrameView"* %1, i64 0, i32 1
  %27 = load i64, i64* %26, align 8
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %29, label %31

29:                                               ; preds = %24
  store float 0.000000e+00, float* %3, align 4
  %30 = load i64, i64* %8, align 8
  br label %112

31:                                               ; preds = %24
  %32 = getelementptr inbounds %"class.webrtc::AudioFrameView", %"class.webrtc::AudioFrameView"* %1, i64 0, i32 0
  %33 = load float**, float*** %32, align 8
  %34 = load i64, i64* %8, align 8
  %35 = icmp eq i64 %34, 0
  %36 = add i64 %34, -1
  br label %37

37:                                               ; preds = %104, %31
  %38 = phi float [ 0.000000e+00, %31 ], [ %107, %104 ]
  %39 = phi i64 [ 0, %31 ], [ %108, %104 ]
  %40 = getelementptr inbounds float*, float** %33, i64 %39
  %41 = load float*, float** %40, align 8
  %42 = select i1 %35, float* null, float* %41
  %43 = getelementptr inbounds float, float* %42, i64 %34
  br i1 %35, label %104, label %44

44:                                               ; preds = %37
  %45 = ptrtoint float* %41 to i64
  %46 = getelementptr float, float* %42, i64 %36
  %47 = ptrtoint float* %46 to i64
  %48 = sub i64 %47, %45
  %49 = lshr i64 %48, 2
  %50 = add nuw nsw i64 %49, 1
  %51 = and i64 %50, 7
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %63, label %53

53:                                               ; preds = %44, %53
  %54 = phi float [ %59, %53 ], [ 0.000000e+00, %44 ]
  %55 = phi float* [ %60, %53 ], [ %41, %44 ]
  %56 = phi i64 [ %61, %53 ], [ %51, %44 ]
  %57 = load float, float* %55, align 4
  %58 = fmul float %57, %57
  %59 = fadd float %54, %58
  %60 = getelementptr inbounds float, float* %55, i64 1
  %61 = add i64 %56, -1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %53, !llvm.loop !2

63:                                               ; preds = %53, %44
  %64 = phi float [ undef, %44 ], [ %59, %53 ]
  %65 = phi float [ 0.000000e+00, %44 ], [ %59, %53 ]
  %66 = phi float* [ %41, %44 ], [ %60, %53 ]
  %67 = icmp ult i64 %48, 28
  br i1 %67, label %104, label %68

68:                                               ; preds = %63, %68
  %69 = phi float [ %101, %68 ], [ %65, %63 ]
  %70 = phi float* [ %102, %68 ], [ %66, %63 ]
  %71 = load float, float* %70, align 4
  %72 = fmul float %71, %71
  %73 = fadd float %69, %72
  %74 = getelementptr inbounds float, float* %70, i64 1
  %75 = load float, float* %74, align 4
  %76 = fmul float %75, %75
  %77 = fadd float %73, %76
  %78 = getelementptr inbounds float, float* %70, i64 2
  %79 = load float, float* %78, align 4
  %80 = fmul float %79, %79
  %81 = fadd float %77, %80
  %82 = getelementptr inbounds float, float* %70, i64 3
  %83 = load float, float* %82, align 4
  %84 = fmul float %83, %83
  %85 = fadd float %81, %84
  %86 = getelementptr inbounds float, float* %70, i64 4
  %87 = load float, float* %86, align 4
  %88 = fmul float %87, %87
  %89 = fadd float %85, %88
  %90 = getelementptr inbounds float, float* %70, i64 5
  %91 = load float, float* %90, align 4
  %92 = fmul float %91, %91
  %93 = fadd float %89, %92
  %94 = getelementptr inbounds float, float* %70, i64 6
  %95 = load float, float* %94, align 4
  %96 = fmul float %95, %95
  %97 = fadd float %93, %96
  %98 = getelementptr inbounds float, float* %70, i64 7
  %99 = load float, float* %98, align 4
  %100 = fmul float %99, %99
  %101 = fadd float %97, %100
  %102 = getelementptr inbounds float, float* %70, i64 8
  %103 = icmp eq float* %102, %43
  br i1 %103, label %104, label %68

104:                                              ; preds = %63, %68, %37
  %105 = phi float [ 0.000000e+00, %37 ], [ %64, %63 ], [ %101, %68 ]
  %106 = fcmp olt float %105, %38
  %107 = select i1 %106, float %38, float %105
  %108 = add nuw i64 %39, 1
  %109 = icmp eq i64 %108, %27
  br i1 %109, label %110, label %37

110:                                              ; preds = %104
  store float %107, float* %3, align 4
  %111 = fcmp ugt float %107, 0.000000e+00
  br i1 %111, label %124, label %112

112:                                              ; preds = %29, %110
  %113 = phi i64 [ %30, %29 ], [ %34, %110 ]
  %114 = getelementptr inbounds %"class.webrtc::(anonymous namespace)::NoiseLevelEstimatorImpl", %"class.webrtc::(anonymous namespace)::NoiseLevelEstimatorImpl"* %0, i64 0, i32 5
  %115 = load float, float* %114, align 4
  %116 = uitofp i64 %113 to float
  %117 = fdiv float %115, %116
  %118 = tail call float @sqrtf(float %117) #8
  %119 = fcmp ugt float %118, 1.000000e+00
  br i1 %119, label %120, label %198

120:                                              ; preds = %112
  %121 = tail call float @log10f(float %118) #8
  %122 = fmul float %121, 2.000000e+01
  %123 = fadd float %122, 0xC05693C6A0000000
  br label %198

124:                                              ; preds = %110
  %125 = getelementptr inbounds %"class.webrtc::(anonymous namespace)::NoiseLevelEstimatorImpl", %"class.webrtc::(anonymous namespace)::NoiseLevelEstimatorImpl"* %0, i64 0, i32 4
  %126 = load i8, i8* %125, align 8, !range !4
  %127 = icmp eq i8 %126, 0
  br i1 %127, label %143, label %128

128:                                              ; preds = %124
  store i8 0, i8* %125, align 8
  %129 = getelementptr inbounds %"class.webrtc::(anonymous namespace)::NoiseLevelEstimatorImpl", %"class.webrtc::(anonymous namespace)::NoiseLevelEstimatorImpl"* %0, i64 0, i32 3
  %130 = load float, float* %129, align 4
  %131 = fcmp olt float %107, %130
  %132 = select i1 %131, float %130, float %107
  %133 = getelementptr inbounds %"class.webrtc::(anonymous namespace)::NoiseLevelEstimatorImpl", %"class.webrtc::(anonymous namespace)::NoiseLevelEstimatorImpl"* %0, i64 0, i32 5
  store float %132, float* %133, align 4
  %134 = load i64, i64* %8, align 8
  %135 = uitofp i64 %134 to float
  %136 = fdiv float %132, %135
  %137 = tail call float @sqrtf(float %136) #8
  %138 = fcmp ugt float %137, 1.000000e+00
  br i1 %138, label %139, label %198

139:                                              ; preds = %128
  %140 = tail call float @log10f(float %137) #8
  %141 = fmul float %140, 2.000000e+01
  %142 = fadd float %141, 0xC05693C6A0000000
  br label %198

143:                                              ; preds = %124
  %144 = getelementptr inbounds %"class.webrtc::(anonymous namespace)::NoiseLevelEstimatorImpl", %"class.webrtc::(anonymous namespace)::NoiseLevelEstimatorImpl"* %0, i64 0, i32 8
  %145 = load float*, float** %33, align 8
  %146 = select i1 %35, float* null, float* %145
  %147 = tail call i32 @_ZN6webrtc16SignalClassifier7AnalyzeEN3rtc9ArrayViewIKfLln4711EEE(%"class.webrtc::SignalClassifier"* %144, float* %146, i64 %34) #8
  %148 = icmp eq i32 %147, 1
  %149 = getelementptr inbounds %"class.webrtc::(anonymous namespace)::NoiseLevelEstimatorImpl", %"class.webrtc::(anonymous namespace)::NoiseLevelEstimatorImpl"* %0, i64 0, i32 5
  %150 = load float, float* %149, align 4
  br i1 %148, label %151, label %181

151:                                              ; preds = %143
  %152 = fcmp ogt float %107, %150
  br i1 %152, label %153, label %168

153:                                              ; preds = %151
  %154 = load i32, i32* %7, align 8
  %155 = icmp sgt i32 %154, 1
  %156 = select i1 %155, i32 %154, i32 1
  %157 = add nsw i32 %156, -1
  store i32 %157, i32* %7, align 8
  %158 = icmp slt i32 %154, 2
  br i1 %158, label %159, label %183

159:                                              ; preds = %153
  %160 = bitcast float* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %160)
  %161 = fmul float %150, 0x3FF028F5C0000000
  store float %161, float* %4, align 4
  %162 = fcmp olt float %107, %161
  %163 = select i1 %162, float* %3, float* %4
  %164 = bitcast float* %163 to i32*
  %165 = load i32, i32* %164, align 4
  %166 = bitcast float* %149 to i32*
  store i32 %165, i32* %166, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %160)
  %167 = bitcast i32 %165 to float
  br label %183

168:                                              ; preds = %151
  %169 = bitcast float* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %169)
  %170 = fmul float %150, 0x3FECCCCCC0000000
  store float %170, float* %5, align 4
  %171 = bitcast float* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %171)
  %172 = fsub float %150, %107
  %173 = fmul float %172, 0x3FA99999A0000000
  %174 = fsub float %150, %173
  store float %174, float* %6, align 4
  %175 = fcmp olt float %170, %174
  %176 = select i1 %175, float* %6, float* %5
  %177 = bitcast float* %176 to i32*
  %178 = load i32, i32* %177, align 4
  %179 = bitcast float* %149 to i32*
  store i32 %178, i32* %179, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %171)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %169)
  store i32 1000, i32* %7, align 8
  %180 = bitcast i32 %178 to float
  br label %183

181:                                              ; preds = %143
  %182 = fmul float %150, 0x3FEFAE1480000000
  store float %182, float* %149, align 4
  br label %183

183:                                              ; preds = %168, %159, %153, %181
  %184 = phi float [ %180, %168 ], [ %167, %159 ], [ %150, %153 ], [ %182, %181 ]
  %185 = getelementptr inbounds %"class.webrtc::(anonymous namespace)::NoiseLevelEstimatorImpl", %"class.webrtc::(anonymous namespace)::NoiseLevelEstimatorImpl"* %0, i64 0, i32 3
  %186 = load float, float* %185, align 4
  %187 = fcmp olt float %184, %186
  %188 = select i1 %187, float %186, float %184
  store float %188, float* %149, align 4
  %189 = load i64, i64* %8, align 8
  %190 = uitofp i64 %189 to float
  %191 = fdiv float %188, %190
  %192 = tail call float @sqrtf(float %191) #8
  %193 = fcmp ugt float %192, 1.000000e+00
  br i1 %193, label %194, label %198

194:                                              ; preds = %183
  %195 = tail call float @log10f(float %192) #8
  %196 = fmul float %195, 2.000000e+01
  %197 = fadd float %196, 0xC05693C6A0000000
  br label %198

198:                                              ; preds = %194, %183, %139, %128, %120, %112
  %199 = phi float [ %123, %120 ], [ 0xC05693C6A0000000, %112 ], [ %142, %139 ], [ 0xC05693C6A0000000, %128 ], [ %197, %194 ], [ 0xC05693C6A0000000, %183 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %25)
  ret float %199
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6webrtc19NoiseLevelEstimatorD2Ev(%"class.webrtc::NoiseLevelEstimator"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN6webrtc16SignalClassifier10InitializeEi(%"class.webrtc::SignalClassifier"*, i32) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN6webrtc16SignalClassifierD1Ev(%"class.webrtc::SignalClassifier"*) unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

declare i32 @_ZN6webrtc16SignalClassifier7AnalyzeEN3rtc9ArrayViewIKfLln4711EEE(%"class.webrtc::SignalClassifier"*, float*, i64) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare float @log10f(float) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN6webrtc12_GLOBAL__N_119NoiseFloorEstimatorD0Ev(%"class.webrtc::(anonymous namespace)::NoiseFloorEstimator"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.webrtc::(anonymous namespace)::NoiseFloorEstimator"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal float @_ZN6webrtc12_GLOBAL__N_119NoiseFloorEstimator7AnalyzeERKNS_14AudioFrameViewIKfEE(%"class.webrtc::(anonymous namespace)::NoiseFloorEstimator"*, %"class.webrtc::AudioFrameView"* nocapture readonly dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = alloca float, align 4
  %4 = getelementptr inbounds %"class.webrtc::AudioFrameView", %"class.webrtc::AudioFrameView"* %1, i64 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = trunc i64 %5 to i32
  %7 = mul i32 %6, 100
  %8 = getelementptr inbounds %"class.webrtc::(anonymous namespace)::NoiseFloorEstimator", %"class.webrtc::(anonymous namespace)::NoiseFloorEstimator"* %0, i64 0, i32 2
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %7, %9
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  store i32 %7, i32* %8, align 8
  %12 = getelementptr inbounds %"class.webrtc::(anonymous namespace)::NoiseFloorEstimator", %"class.webrtc::(anonymous namespace)::NoiseFloorEstimator"* %0, i64 0, i32 4
  store i8 1, i8* %12, align 8
  %13 = getelementptr inbounds %"class.webrtc::(anonymous namespace)::NoiseFloorEstimator", %"class.webrtc::(anonymous namespace)::NoiseFloorEstimator"* %0, i64 0, i32 5
  store i8 0, i8* %13, align 1
  %14 = sitofp i32 %7 to float
  %15 = fmul float %14, 2.000000e+00
  %16 = fmul float %15, 2.000000e+00
  %17 = fdiv float %16, 1.000000e+02
  %18 = getelementptr inbounds %"class.webrtc::(anonymous namespace)::NoiseFloorEstimator", %"class.webrtc::(anonymous namespace)::NoiseFloorEstimator"* %0, i64 0, i32 3
  store float %17, float* %18, align 4
  %19 = getelementptr inbounds %"class.webrtc::(anonymous namespace)::NoiseFloorEstimator", %"class.webrtc::(anonymous namespace)::NoiseFloorEstimator"* %0, i64 0, i32 6
  store float %17, float* %19, align 4
  %20 = getelementptr inbounds %"class.webrtc::(anonymous namespace)::NoiseFloorEstimator", %"class.webrtc::(anonymous namespace)::NoiseFloorEstimator"* %0, i64 0, i32 7
  store float %17, float* %20, align 8
  %21 = getelementptr inbounds %"class.webrtc::(anonymous namespace)::NoiseFloorEstimator", %"class.webrtc::(anonymous namespace)::NoiseFloorEstimator"* %0, i64 0, i32 8
  store i32 500, i32* %21, align 4
  br label %22

22:                                               ; preds = %2, %11
  %23 = bitcast float* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %23)
  store float 0xFFFFFFFFE0000000, float* %3, align 4
  %24 = getelementptr inbounds %"class.webrtc::AudioFrameView", %"class.webrtc::AudioFrameView"* %1, i64 0, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %106, label %27

27:                                               ; preds = %22
  %28 = getelementptr inbounds %"class.webrtc::AudioFrameView", %"class.webrtc::AudioFrameView"* %1, i64 0, i32 0
  %29 = load float**, float*** %28, align 8
  %30 = load i64, i64* %4, align 8
  %31 = icmp eq i64 %30, 0
  %32 = add i64 %30, -1
  br label %33

33:                                               ; preds = %100, %27
  %34 = phi float [ 0.000000e+00, %27 ], [ %103, %100 ]
  %35 = phi i64 [ 0, %27 ], [ %104, %100 ]
  %36 = getelementptr inbounds float*, float** %29, i64 %35
  %37 = load float*, float** %36, align 8
  %38 = select i1 %31, float* null, float* %37
  %39 = getelementptr inbounds float, float* %38, i64 %30
  br i1 %31, label %100, label %40

40:                                               ; preds = %33
  %41 = ptrtoint float* %37 to i64
  %42 = getelementptr float, float* %38, i64 %32
  %43 = ptrtoint float* %42 to i64
  %44 = sub i64 %43, %41
  %45 = lshr i64 %44, 2
  %46 = add nuw nsw i64 %45, 1
  %47 = and i64 %46, 7
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %59, label %49

49:                                               ; preds = %40, %49
  %50 = phi float [ %55, %49 ], [ 0.000000e+00, %40 ]
  %51 = phi float* [ %56, %49 ], [ %37, %40 ]
  %52 = phi i64 [ %57, %49 ], [ %47, %40 ]
  %53 = load float, float* %51, align 4
  %54 = fmul float %53, %53
  %55 = fadd float %50, %54
  %56 = getelementptr inbounds float, float* %51, i64 1
  %57 = add i64 %52, -1
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %59, label %49, !llvm.loop !5

59:                                               ; preds = %49, %40
  %60 = phi float [ undef, %40 ], [ %55, %49 ]
  %61 = phi float [ 0.000000e+00, %40 ], [ %55, %49 ]
  %62 = phi float* [ %37, %40 ], [ %56, %49 ]
  %63 = icmp ult i64 %44, 28
  br i1 %63, label %100, label %64

64:                                               ; preds = %59, %64
  %65 = phi float [ %97, %64 ], [ %61, %59 ]
  %66 = phi float* [ %98, %64 ], [ %62, %59 ]
  %67 = load float, float* %66, align 4
  %68 = fmul float %67, %67
  %69 = fadd float %65, %68
  %70 = getelementptr inbounds float, float* %66, i64 1
  %71 = load float, float* %70, align 4
  %72 = fmul float %71, %71
  %73 = fadd float %69, %72
  %74 = getelementptr inbounds float, float* %66, i64 2
  %75 = load float, float* %74, align 4
  %76 = fmul float %75, %75
  %77 = fadd float %73, %76
  %78 = getelementptr inbounds float, float* %66, i64 3
  %79 = load float, float* %78, align 4
  %80 = fmul float %79, %79
  %81 = fadd float %77, %80
  %82 = getelementptr inbounds float, float* %66, i64 4
  %83 = load float, float* %82, align 4
  %84 = fmul float %83, %83
  %85 = fadd float %81, %84
  %86 = getelementptr inbounds float, float* %66, i64 5
  %87 = load float, float* %86, align 4
  %88 = fmul float %87, %87
  %89 = fadd float %85, %88
  %90 = getelementptr inbounds float, float* %66, i64 6
  %91 = load float, float* %90, align 4
  %92 = fmul float %91, %91
  %93 = fadd float %89, %92
  %94 = getelementptr inbounds float, float* %66, i64 7
  %95 = load float, float* %94, align 4
  %96 = fmul float %95, %95
  %97 = fadd float %93, %96
  %98 = getelementptr inbounds float, float* %66, i64 8
  %99 = icmp eq float* %98, %39
  br i1 %99, label %100, label %64

100:                                              ; preds = %59, %64, %33
  %101 = phi float [ 0.000000e+00, %33 ], [ %60, %59 ], [ %97, %64 ]
  %102 = fcmp olt float %101, %34
  %103 = select i1 %102, float %34, float %101
  %104 = add nuw i64 %35, 1
  %105 = icmp eq i64 %104, %25
  br i1 %105, label %106, label %33

106:                                              ; preds = %100, %22
  %107 = phi float [ 0.000000e+00, %22 ], [ %103, %100 ]
  store float %107, float* %3, align 4
  %108 = getelementptr inbounds %"class.webrtc::(anonymous namespace)::NoiseFloorEstimator", %"class.webrtc::(anonymous namespace)::NoiseFloorEstimator"* %0, i64 0, i32 3
  %109 = load float, float* %108, align 4
  %110 = fcmp ugt float %107, %109
  br i1 %110, label %123, label %111

111:                                              ; preds = %106
  %112 = getelementptr inbounds %"class.webrtc::(anonymous namespace)::NoiseFloorEstimator", %"class.webrtc::(anonymous namespace)::NoiseFloorEstimator"* %0, i64 0, i32 7
  %113 = load float, float* %112, align 8
  %114 = load i64, i64* %4, align 8
  %115 = uitofp i64 %114 to float
  %116 = fdiv float %113, %115
  %117 = tail call float @sqrtf(float %116) #8
  %118 = fcmp ugt float %117, 1.000000e+00
  br i1 %118, label %119, label %179

119:                                              ; preds = %111
  %120 = tail call float @log10f(float %117) #8
  %121 = fmul float %120, 2.000000e+01
  %122 = fadd float %121, 0xC05693C6A0000000
  br label %179

123:                                              ; preds = %106
  %124 = getelementptr inbounds %"class.webrtc::(anonymous namespace)::NoiseFloorEstimator", %"class.webrtc::(anonymous namespace)::NoiseFloorEstimator"* %0, i64 0, i32 5
  %125 = load i8, i8* %124, align 1, !range !4
  %126 = icmp eq i8 %125, 0
  %127 = getelementptr inbounds %"class.webrtc::(anonymous namespace)::NoiseFloorEstimator", %"class.webrtc::(anonymous namespace)::NoiseFloorEstimator"* %0, i64 0, i32 6
  br i1 %126, label %136, label %128

128:                                              ; preds = %123
  %129 = load float, float* %127, align 4
  %130 = fcmp olt float %107, %129
  %131 = select i1 %130, float* %3, float* %127
  %132 = bitcast float* %131 to i32*
  %133 = load i32, i32* %132, align 4
  %134 = bitcast float* %127 to i32*
  store i32 %133, i32* %134, align 4
  %135 = bitcast i32 %133 to float
  br label %138

136:                                              ; preds = %123
  store float %107, float* %127, align 4
  store i8 1, i8* %124, align 1
  %137 = bitcast float %107 to i32
  br label %138

138:                                              ; preds = %136, %128
  %139 = phi float [ %107, %136 ], [ %135, %128 ]
  %140 = phi i32 [ %137, %136 ], [ %133, %128 ]
  %141 = getelementptr inbounds %"class.webrtc::(anonymous namespace)::NoiseFloorEstimator", %"class.webrtc::(anonymous namespace)::NoiseFloorEstimator"* %0, i64 0, i32 8
  %142 = load i32, i32* %141, align 4
  %143 = icmp eq i32 %142, 0
  %144 = getelementptr inbounds %"class.webrtc::(anonymous namespace)::NoiseFloorEstimator", %"class.webrtc::(anonymous namespace)::NoiseFloorEstimator"* %0, i64 0, i32 4
  br i1 %143, label %145, label %155

145:                                              ; preds = %138
  store i8 0, i8* %144, align 8
  %146 = getelementptr inbounds %"class.webrtc::(anonymous namespace)::NoiseFloorEstimator", %"class.webrtc::(anonymous namespace)::NoiseFloorEstimator"* %0, i64 0, i32 7
  %147 = load float, float* %146, align 8
  %148 = fcmp olt float %147, %139
  br i1 %148, label %149, label %153

149:                                              ; preds = %145
  %150 = fmul float %139, 5.000000e-01
  %151 = fmul float %147, 5.000000e-01
  %152 = fadd float %151, %150
  br label %153

153:                                              ; preds = %145, %149
  %154 = phi float [ %152, %149 ], [ %139, %145 ]
  store float %154, float* %146, align 8
  store i32 500, i32* %141, align 4
  store i8 0, i8* %124, align 1
  br label %168

155:                                              ; preds = %138
  %156 = load i8, i8* %144, align 8, !range !4
  %157 = icmp eq i8 %156, 0
  %158 = getelementptr inbounds %"class.webrtc::(anonymous namespace)::NoiseFloorEstimator", %"class.webrtc::(anonymous namespace)::NoiseFloorEstimator"* %0, i64 0, i32 7
  br i1 %157, label %163, label %159

159:                                              ; preds = %155
  %160 = bitcast float* %158 to i32*
  store i32 %140, i32* %160, align 8
  %161 = add nsw i32 %142, -1
  store i32 %161, i32* %141, align 4
  %162 = bitcast i32 %140 to float
  br label %168

163:                                              ; preds = %155
  %164 = load float, float* %158, align 4
  %165 = fcmp olt float %139, %164
  %166 = select i1 %165, float %139, float %164
  store float %166, float* %158, align 8
  %167 = add nsw i32 %142, -1
  store i32 %167, i32* %141, align 4
  br label %168

168:                                              ; preds = %159, %163, %153
  %169 = phi float [ %162, %159 ], [ %166, %163 ], [ %154, %153 ]
  %170 = load i64, i64* %4, align 8
  %171 = uitofp i64 %170 to float
  %172 = fdiv float %169, %171
  %173 = tail call float @sqrtf(float %172) #8
  %174 = fcmp ugt float %173, 1.000000e+00
  br i1 %174, label %175, label %179

175:                                              ; preds = %168
  %176 = tail call float @log10f(float %173) #8
  %177 = fmul float %176, 2.000000e+01
  %178 = fadd float %177, 0xC05693C6A0000000
  br label %179

179:                                              ; preds = %175, %168, %119, %111
  %180 = phi float [ %122, %119 ], [ 0xC05693C6A0000000, %111 ], [ %178, %175 ], [ 0xC05693C6A0000000, %168 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %23)
  ret float %180
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { builtin nounwind }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = !{i8 0, i8 2}
!5 = distinct !{!5, !3}
