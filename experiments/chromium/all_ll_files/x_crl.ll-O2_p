; ModuleID = '../../third_party/boringssl/src/crypto/x509/x_crl.c'
source_filename = "../../third_party/boringssl/src/crypto/x509/x_crl.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ASN1_TEMPLATE_st = type { i64, i64, i64, i8*, %struct.ASN1_ITEM_st* }
%struct.ASN1_ITEM_st = type { i8, i64, %struct.ASN1_TEMPLATE_st*, i64, i8*, i64, i8* }
%struct.ASN1_AUX_st = type { i8*, i32, i32, i32 (i32, %struct.ASN1_VALUE_st**, %struct.ASN1_ITEM_st*, i8*)*, i32 }
%struct.ASN1_VALUE_st = type opaque
%struct.x509_crl_method_st = type { i32, i32 (%struct.X509_crl_st*)*, i32 (%struct.X509_crl_st*)*, i32 (%struct.X509_crl_st*, %struct.x509_revoked_st**, %struct.asn1_string_st*, %struct.X509_name_st*)*, i32 (%struct.X509_crl_st*, %struct.evp_pkey_st*)* }
%struct.X509_crl_st = type { %struct.X509_crl_info_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, i32, %struct.AUTHORITY_KEYID_st*, %struct.ISSUING_DIST_POINT_st*, i32, i32, %struct.asn1_string_st*, %struct.asn1_string_st*, [20 x i8], %struct.stack_st_GENERAL_NAMES*, %struct.x509_crl_method_st*, i8* }
%struct.X509_crl_info_st = type { %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_REVOKED*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.X509_name_st = type { %struct.stack_st_X509_NAME_ENTRY*, i32, %struct.buf_mem_st*, i8*, i32 }
%struct.stack_st_X509_NAME_ENTRY = type opaque
%struct.buf_mem_st = type { i64, i8*, i64 }
%struct.stack_st_X509_REVOKED = type opaque
%struct.stack_st_X509_EXTENSION = type opaque
%struct.ASN1_ENCODING_st = type { i8*, i64, i32, i8 }
%struct.X509_algor_st = type { %struct.asn1_object_st*, %struct.asn1_type_st* }
%struct.asn1_object_st = type { i8*, i8*, i32, i32, i8*, i32 }
%struct.asn1_type_st = type { i32, %union.anon }
%union.anon = type { i8* }
%struct.AUTHORITY_KEYID_st = type { %struct.asn1_string_st*, %struct.stack_st_GENERAL_NAME*, %struct.asn1_string_st* }
%struct.stack_st_GENERAL_NAME = type opaque
%struct.ISSUING_DIST_POINT_st = type { %struct.DIST_POINT_NAME_st*, i32, i32, %struct.asn1_string_st*, i32, i32 }
%struct.DIST_POINT_NAME_st = type { i32, %union.anon.0, %struct.X509_name_st* }
%union.anon.0 = type { %struct.stack_st_GENERAL_NAME* }
%struct.asn1_string_st = type { i32, i32, i8*, i64 }
%struct.stack_st_GENERAL_NAMES = type opaque
%struct.x509_revoked_st = type { %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_EXTENSION*, %struct.stack_st_GENERAL_NAME*, i32, i32 }
%struct.evp_pkey_st = type { i32, i32, %union.anon.1, %struct.evp_pkey_asn1_method_st* }
%union.anon.1 = type { i8* }
%struct.evp_pkey_asn1_method_st = type opaque
%struct.CRYPTO_STATIC_MUTEX = type { %union.pthread_rwlock_t }
%union.pthread_rwlock_t = type { %struct.__pthread_rwlock_arch_t }
%struct.__pthread_rwlock_arch_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i8, [7 x i8], i64, i32 }
%struct.stack_st = type { i64, i8**, i32, i64, i32 (i8**, i8**)* }
%struct.x509_st = type { %struct.x509_cinf_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, %struct.crypto_ex_data_st, i64, i64, i64, i64, i64, i64, %struct.asn1_string_st*, %struct.AUTHORITY_KEYID_st*, %struct.X509_POLICY_CACHE_st*, %struct.stack_st_DIST_POINT*, %struct.stack_st_GENERAL_NAME*, %struct.NAME_CONSTRAINTS_st*, [20 x i8], %struct.x509_cert_aux_st*, %struct.crypto_buffer_st*, %union.crypto_mutex_st }
%struct.x509_cinf_st = type { %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.X509_val_st*, %struct.X509_name_st*, %struct.X509_pubkey_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.X509_val_st = type opaque
%struct.X509_pubkey_st = type opaque
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque
%struct.X509_POLICY_CACHE_st = type opaque
%struct.stack_st_DIST_POINT = type opaque
%struct.NAME_CONSTRAINTS_st = type { %struct.stack_st_GENERAL_SUBTREE*, %struct.stack_st_GENERAL_SUBTREE* }
%struct.stack_st_GENERAL_SUBTREE = type opaque
%struct.x509_cert_aux_st = type opaque
%struct.crypto_buffer_st = type opaque
%union.crypto_mutex_st = type { double, [48 x i8] }
%struct.env_md_st = type opaque

@X509_REVOKED_seq_tt = internal constant [3 x %struct.ASN1_TEMPLATE_st] [%struct.ASN1_TEMPLATE_st { i64 0, i64 0, i64 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i32 0, i32 0), %struct.ASN1_ITEM_st* @ASN1_INTEGER_it }, %struct.ASN1_TEMPLATE_st { i64 0, i64 0, i64 8, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i32 0, i32 0), %struct.ASN1_ITEM_st* @ASN1_TIME_it }, %struct.ASN1_TEMPLATE_st { i64 5, i64 0, i64 16, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i32 0, i32 0), %struct.ASN1_ITEM_st* @X509_EXTENSION_it }], align 16
@.str = private unnamed_addr constant [13 x i8] c"X509_REVOKED\00", align 1
@X509_REVOKED_it = hidden constant %struct.ASN1_ITEM_st { i8 1, i64 16, %struct.ASN1_TEMPLATE_st* getelementptr inbounds ([3 x %struct.ASN1_TEMPLATE_st], [3 x %struct.ASN1_TEMPLATE_st]* @X509_REVOKED_seq_tt, i32 0, i32 0), i64 3, i8* null, i64 40, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i32 0, i32 0) }, align 8
@X509_CRL_INFO_seq_tt = internal constant [7 x %struct.ASN1_TEMPLATE_st] [%struct.ASN1_TEMPLATE_st { i64 1, i64 0, i64 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i32 0, i32 0), %struct.ASN1_ITEM_st* @ASN1_INTEGER_it }, %struct.ASN1_TEMPLATE_st { i64 0, i64 0, i64 8, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i32 0, i32 0), %struct.ASN1_ITEM_st* @X509_ALGOR_it }, %struct.ASN1_TEMPLATE_st { i64 0, i64 0, i64 16, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9, i32 0, i32 0), %struct.ASN1_ITEM_st* @X509_NAME_it }, %struct.ASN1_TEMPLATE_st { i64 0, i64 0, i64 24, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.10, i32 0, i32 0), %struct.ASN1_ITEM_st* @ASN1_TIME_it }, %struct.ASN1_TEMPLATE_st { i64 1, i64 0, i64 32, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i32 0, i32 0), %struct.ASN1_ITEM_st* @ASN1_TIME_it }, %struct.ASN1_TEMPLATE_st { i64 5, i64 0, i64 40, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.12, i32 0, i32 0), %struct.ASN1_ITEM_st* @X509_REVOKED_it }, %struct.ASN1_TEMPLATE_st { i64 149, i64 0, i64 48, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i32 0, i32 0), %struct.ASN1_ITEM_st* @X509_EXTENSION_it }], align 16
@X509_CRL_INFO_aux = internal constant %struct.ASN1_AUX_st { i8* null, i32 2, i32 0, i32 (i32, %struct.ASN1_VALUE_st**, %struct.ASN1_ITEM_st*, i8*)* @crl_inf_cb, i32 56 }, align 8
@.str.1 = private unnamed_addr constant [14 x i8] c"X509_CRL_INFO\00", align 1
@X509_CRL_INFO_it = hidden constant %struct.ASN1_ITEM_st { i8 1, i64 16, %struct.ASN1_TEMPLATE_st* getelementptr inbounds ([7 x %struct.ASN1_TEMPLATE_st], [7 x %struct.ASN1_TEMPLATE_st]* @X509_CRL_INFO_seq_tt, i32 0, i32 0), i64 7, i8* bitcast (%struct.ASN1_AUX_st* @X509_CRL_INFO_aux to i8*), i64 80, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0) }, align 8
@X509_CRL_seq_tt = internal constant [3 x %struct.ASN1_TEMPLATE_st] [%struct.ASN1_TEMPLATE_st { i64 0, i64 0, i64 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0), %struct.ASN1_ITEM_st* @X509_CRL_INFO_it }, %struct.ASN1_TEMPLATE_st { i64 0, i64 0, i64 8, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i32 0, i32 0), %struct.ASN1_ITEM_st* @X509_ALGOR_it }, %struct.ASN1_TEMPLATE_st { i64 0, i64 0, i64 16, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.14, i32 0, i32 0), %struct.ASN1_ITEM_st* @ASN1_BIT_STRING_it }], align 16
@X509_CRL_aux = internal constant %struct.ASN1_AUX_st { i8* null, i32 1, i32 24, i32 (i32, %struct.ASN1_VALUE_st**, %struct.ASN1_ITEM_st*, i8*)* @crl_cb, i32 0 }, align 8
@.str.2 = private unnamed_addr constant [9 x i8] c"X509_CRL\00", align 1
@X509_CRL_it = hidden constant %struct.ASN1_ITEM_st { i8 1, i64 16, %struct.ASN1_TEMPLATE_st* getelementptr inbounds ([3 x %struct.ASN1_TEMPLATE_st], [3 x %struct.ASN1_TEMPLATE_st]* @X509_CRL_seq_tt, i32 0, i32 0), i64 3, i8* bitcast (%struct.ASN1_AUX_st* @X509_CRL_aux to i8*), i64 120, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i32 0, i32 0) }, align 8
@.str.3 = private unnamed_addr constant [52 x i8] c"../../third_party/boringssl/src/crypto/x509/x_crl.c\00", align 1
@int_crl_meth = internal constant %struct.x509_crl_method_st { i32 0, i32 (%struct.X509_crl_st*)* null, i32 (%struct.X509_crl_st*)* null, i32 (%struct.X509_crl_st*, %struct.x509_revoked_st**, %struct.asn1_string_st*, %struct.X509_name_st*)* @def_crl_lookup, i32 (%struct.X509_crl_st*, %struct.evp_pkey_st*)* @def_crl_verify }, align 8
@default_crl_method = internal unnamed_addr global %struct.x509_crl_method_st* @int_crl_meth, align 8
@.str.4 = private unnamed_addr constant [13 x i8] c"serialNumber\00", align 1
@ASN1_INTEGER_it = external constant %struct.ASN1_ITEM_st, align 8
@.str.5 = private unnamed_addr constant [15 x i8] c"revocationDate\00", align 1
@ASN1_TIME_it = external constant %struct.ASN1_ITEM_st, align 8
@.str.6 = private unnamed_addr constant [11 x i8] c"extensions\00", align 1
@X509_EXTENSION_it = external constant %struct.ASN1_ITEM_st, align 8
@.str.7 = private unnamed_addr constant [8 x i8] c"version\00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"sig_alg\00", align 1
@X509_ALGOR_it = external constant %struct.ASN1_ITEM_st, align 8
@.str.9 = private unnamed_addr constant [7 x i8] c"issuer\00", align 1
@X509_NAME_it = external constant %struct.ASN1_ITEM_st, align 8
@.str.10 = private unnamed_addr constant [11 x i8] c"lastUpdate\00", align 1
@.str.11 = private unnamed_addr constant [11 x i8] c"nextUpdate\00", align 1
@.str.12 = private unnamed_addr constant [8 x i8] c"revoked\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"crl\00", align 1
@.str.14 = private unnamed_addr constant [10 x i8] c"signature\00", align 1
@ASN1_BIT_STRING_it = external constant %struct.ASN1_ITEM_st, align 8
@g_crl_sort_lock = internal global %struct.CRYPTO_STATIC_MUTEX zeroinitializer, align 8

; Function Attrs: nounwind ssp uwtable
define hidden %struct.x509_revoked_st* @d2i_X509_REVOKED(%struct.x509_revoked_st**, i8**, i64) local_unnamed_addr #0 {
  %4 = bitcast %struct.x509_revoked_st** %0 to %struct.ASN1_VALUE_st**
  %5 = tail call %struct.ASN1_VALUE_st* @ASN1_item_d2i(%struct.ASN1_VALUE_st** %4, i8** %1, i64 %2, %struct.ASN1_ITEM_st* nonnull @X509_REVOKED_it) #6
  %6 = bitcast %struct.ASN1_VALUE_st* %5 to %struct.x509_revoked_st*
  ret %struct.x509_revoked_st* %6
}

declare %struct.ASN1_VALUE_st* @ASN1_item_d2i(%struct.ASN1_VALUE_st**, i8**, i64, %struct.ASN1_ITEM_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @i2d_X509_REVOKED(%struct.x509_revoked_st*, i8**) local_unnamed_addr #0 {
  %3 = bitcast %struct.x509_revoked_st* %0 to %struct.ASN1_VALUE_st*
  %4 = tail call i32 @ASN1_item_i2d(%struct.ASN1_VALUE_st* %3, i8** %1, %struct.ASN1_ITEM_st* nonnull @X509_REVOKED_it) #6
  ret i32 %4
}

declare i32 @ASN1_item_i2d(%struct.ASN1_VALUE_st*, i8**, %struct.ASN1_ITEM_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.x509_revoked_st* @X509_REVOKED_new() local_unnamed_addr #0 {
  %1 = tail call %struct.ASN1_VALUE_st* @ASN1_item_new(%struct.ASN1_ITEM_st* nonnull @X509_REVOKED_it) #6
  %2 = bitcast %struct.ASN1_VALUE_st* %1 to %struct.x509_revoked_st*
  ret %struct.x509_revoked_st* %2
}

declare %struct.ASN1_VALUE_st* @ASN1_item_new(%struct.ASN1_ITEM_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @X509_REVOKED_free(%struct.x509_revoked_st*) local_unnamed_addr #0 {
  %2 = bitcast %struct.x509_revoked_st* %0 to %struct.ASN1_VALUE_st*
  tail call void @ASN1_item_free(%struct.ASN1_VALUE_st* %2, %struct.ASN1_ITEM_st* nonnull @X509_REVOKED_it) #6
  ret void
}

declare void @ASN1_item_free(%struct.ASN1_VALUE_st*, %struct.ASN1_ITEM_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.x509_revoked_st* @X509_REVOKED_dup(%struct.x509_revoked_st*) local_unnamed_addr #0 {
  %2 = bitcast %struct.x509_revoked_st* %0 to i8*
  %3 = tail call i8* @ASN1_item_dup(%struct.ASN1_ITEM_st* nonnull @X509_REVOKED_it, i8* %2) #6
  %4 = bitcast i8* %3 to %struct.x509_revoked_st*
  ret %struct.x509_revoked_st* %4
}

declare i8* @ASN1_item_dup(%struct.ASN1_ITEM_st*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.X509_crl_info_st* @d2i_X509_CRL_INFO(%struct.X509_crl_info_st**, i8**, i64) local_unnamed_addr #0 {
  %4 = bitcast %struct.X509_crl_info_st** %0 to %struct.ASN1_VALUE_st**
  %5 = tail call %struct.ASN1_VALUE_st* @ASN1_item_d2i(%struct.ASN1_VALUE_st** %4, i8** %1, i64 %2, %struct.ASN1_ITEM_st* nonnull @X509_CRL_INFO_it) #6
  %6 = bitcast %struct.ASN1_VALUE_st* %5 to %struct.X509_crl_info_st*
  ret %struct.X509_crl_info_st* %6
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @i2d_X509_CRL_INFO(%struct.X509_crl_info_st*, i8**) local_unnamed_addr #0 {
  %3 = bitcast %struct.X509_crl_info_st* %0 to %struct.ASN1_VALUE_st*
  %4 = tail call i32 @ASN1_item_i2d(%struct.ASN1_VALUE_st* %3, i8** %1, %struct.ASN1_ITEM_st* nonnull @X509_CRL_INFO_it) #6
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.X509_crl_info_st* @X509_CRL_INFO_new() local_unnamed_addr #0 {
  %1 = tail call %struct.ASN1_VALUE_st* @ASN1_item_new(%struct.ASN1_ITEM_st* nonnull @X509_CRL_INFO_it) #6
  %2 = bitcast %struct.ASN1_VALUE_st* %1 to %struct.X509_crl_info_st*
  ret %struct.X509_crl_info_st* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden void @X509_CRL_INFO_free(%struct.X509_crl_info_st*) local_unnamed_addr #0 {
  %2 = bitcast %struct.X509_crl_info_st* %0 to %struct.ASN1_VALUE_st*
  tail call void @ASN1_item_free(%struct.ASN1_VALUE_st* %2, %struct.ASN1_ITEM_st* nonnull @X509_CRL_INFO_it) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.X509_crl_st* @d2i_X509_CRL(%struct.X509_crl_st**, i8**, i64) local_unnamed_addr #0 {
  %4 = bitcast %struct.X509_crl_st** %0 to %struct.ASN1_VALUE_st**
  %5 = tail call %struct.ASN1_VALUE_st* @ASN1_item_d2i(%struct.ASN1_VALUE_st** %4, i8** %1, i64 %2, %struct.ASN1_ITEM_st* nonnull @X509_CRL_it) #6
  %6 = bitcast %struct.ASN1_VALUE_st* %5 to %struct.X509_crl_st*
  ret %struct.X509_crl_st* %6
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @i2d_X509_CRL(%struct.X509_crl_st*, i8**) local_unnamed_addr #0 {
  %3 = bitcast %struct.X509_crl_st* %0 to %struct.ASN1_VALUE_st*
  %4 = tail call i32 @ASN1_item_i2d(%struct.ASN1_VALUE_st* %3, i8** %1, %struct.ASN1_ITEM_st* nonnull @X509_CRL_it) #6
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.X509_crl_st* @X509_CRL_new() local_unnamed_addr #0 {
  %1 = tail call %struct.ASN1_VALUE_st* @ASN1_item_new(%struct.ASN1_ITEM_st* nonnull @X509_CRL_it) #6
  %2 = bitcast %struct.ASN1_VALUE_st* %1 to %struct.X509_crl_st*
  ret %struct.X509_crl_st* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden void @X509_CRL_free(%struct.X509_crl_st*) local_unnamed_addr #0 {
  %2 = bitcast %struct.X509_crl_st* %0 to %struct.ASN1_VALUE_st*
  tail call void @ASN1_item_free(%struct.ASN1_VALUE_st* %2, %struct.ASN1_ITEM_st* nonnull @X509_CRL_it) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.X509_crl_st* @X509_CRL_dup(%struct.X509_crl_st*) local_unnamed_addr #0 {
  %2 = bitcast %struct.X509_crl_st* %0 to i8*
  %3 = tail call i8* @ASN1_item_dup(%struct.ASN1_ITEM_st* nonnull @X509_CRL_it, i8* %2) #6
  %4 = bitcast i8* %3 to %struct.X509_crl_st*
  ret %struct.X509_crl_st* %4
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @X509_CRL_add0_revoked(%struct.X509_crl_st* nocapture readonly, %struct.x509_revoked_st*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %0, i64 0, i32 0
  %4 = load %struct.X509_crl_info_st*, %struct.X509_crl_info_st** %3, align 8
  %5 = getelementptr inbounds %struct.X509_crl_info_st, %struct.X509_crl_info_st* %4, i64 0, i32 5
  %6 = load %struct.stack_st_X509_REVOKED*, %struct.stack_st_X509_REVOKED** %5, align 8
  %7 = icmp eq %struct.stack_st_X509_REVOKED* %6, null
  br i1 %7, label %8, label %13

8:                                                ; preds = %2
  %9 = tail call %struct.stack_st* @sk_new(i32 (i8**, i8**)* bitcast (i32 (%struct.x509_revoked_st**, %struct.x509_revoked_st**)* @X509_REVOKED_cmp to i32 (i8**, i8**)*)) #6
  %10 = bitcast %struct.stack_st* %9 to %struct.stack_st_X509_REVOKED*
  %11 = bitcast %struct.stack_st_X509_REVOKED** %5 to %struct.stack_st**
  store %struct.stack_st* %9, %struct.stack_st** %11, align 8
  %12 = icmp eq %struct.stack_st* %9, null
  br i1 %12, label %19, label %13

13:                                               ; preds = %2, %8
  %14 = phi %struct.stack_st_X509_REVOKED* [ %10, %8 ], [ %6, %2 ]
  %15 = bitcast %struct.stack_st_X509_REVOKED* %14 to %struct.stack_st*
  %16 = bitcast %struct.x509_revoked_st* %1 to i8*
  %17 = tail call i64 @sk_push(%struct.stack_st* %15, i8* %16) #6
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %19, label %20

19:                                               ; preds = %13, %8
  tail call void @ERR_put_error(i32 11, i32 0, i32 65, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.3, i64 0, i64 0), i32 406) #6
  br label %22

20:                                               ; preds = %13
  %21 = getelementptr inbounds %struct.X509_crl_info_st, %struct.X509_crl_info_st* %4, i64 0, i32 7, i32 2
  store i32 1, i32* %21, align 8
  br label %22

22:                                               ; preds = %20, %19
  %23 = phi i32 [ 1, %20 ], [ 0, %19 ]
  ret i32 %23
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define internal i32 @X509_REVOKED_cmp(%struct.x509_revoked_st** nocapture readonly, %struct.x509_revoked_st** nocapture readonly) #0 {
  %3 = load %struct.x509_revoked_st*, %struct.x509_revoked_st** %0, align 8
  %4 = getelementptr inbounds %struct.x509_revoked_st, %struct.x509_revoked_st* %3, i64 0, i32 0
  %5 = load %struct.asn1_string_st*, %struct.asn1_string_st** %4, align 8
  %6 = load %struct.x509_revoked_st*, %struct.x509_revoked_st** %1, align 8
  %7 = getelementptr inbounds %struct.x509_revoked_st, %struct.x509_revoked_st* %6, i64 0, i32 0
  %8 = load %struct.asn1_string_st*, %struct.asn1_string_st** %7, align 8
  %9 = tail call i32 @ASN1_STRING_cmp(%struct.asn1_string_st* %5, %struct.asn1_string_st* %8) #6
  ret i32 %9
}

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @X509_CRL_verify(%struct.X509_crl_st*, %struct.evp_pkey_st*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %0, i64 0, i32 13
  %4 = load %struct.x509_crl_method_st*, %struct.x509_crl_method_st** %3, align 8
  %5 = getelementptr inbounds %struct.x509_crl_method_st, %struct.x509_crl_method_st* %4, i64 0, i32 4
  %6 = load i32 (%struct.X509_crl_st*, %struct.evp_pkey_st*)*, i32 (%struct.X509_crl_st*, %struct.evp_pkey_st*)** %5, align 8
  %7 = icmp eq i32 (%struct.X509_crl_st*, %struct.evp_pkey_st*)* %6, null
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %9 = tail call i32 %6(%struct.X509_crl_st* %0, %struct.evp_pkey_st* %1) #6
  br label %10

10:                                               ; preds = %2, %8
  %11 = phi i32 [ %9, %8 ], [ 0, %2 ]
  ret i32 %11
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @X509_CRL_get0_by_serial(%struct.X509_crl_st*, %struct.x509_revoked_st**, %struct.asn1_string_st*) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %0, i64 0, i32 13
  %5 = load %struct.x509_crl_method_st*, %struct.x509_crl_method_st** %4, align 8
  %6 = getelementptr inbounds %struct.x509_crl_method_st, %struct.x509_crl_method_st* %5, i64 0, i32 3
  %7 = load i32 (%struct.X509_crl_st*, %struct.x509_revoked_st**, %struct.asn1_string_st*, %struct.X509_name_st*)*, i32 (%struct.X509_crl_st*, %struct.x509_revoked_st**, %struct.asn1_string_st*, %struct.X509_name_st*)** %6, align 8
  %8 = icmp eq i32 (%struct.X509_crl_st*, %struct.x509_revoked_st**, %struct.asn1_string_st*, %struct.X509_name_st*)* %7, null
  br i1 %8, label %11, label %9

9:                                                ; preds = %3
  %10 = tail call i32 %7(%struct.X509_crl_st* %0, %struct.x509_revoked_st** %1, %struct.asn1_string_st* %2, %struct.X509_name_st* null) #6
  br label %11

11:                                               ; preds = %3, %9
  %12 = phi i32 [ %10, %9 ], [ 0, %3 ]
  ret i32 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @X509_CRL_get0_by_cert(%struct.X509_crl_st*, %struct.x509_revoked_st**, %struct.x509_st*) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %0, i64 0, i32 13
  %5 = load %struct.x509_crl_method_st*, %struct.x509_crl_method_st** %4, align 8
  %6 = getelementptr inbounds %struct.x509_crl_method_st, %struct.x509_crl_method_st* %5, i64 0, i32 3
  %7 = load i32 (%struct.X509_crl_st*, %struct.x509_revoked_st**, %struct.asn1_string_st*, %struct.X509_name_st*)*, i32 (%struct.X509_crl_st*, %struct.x509_revoked_st**, %struct.asn1_string_st*, %struct.X509_name_st*)** %6, align 8
  %8 = icmp eq i32 (%struct.X509_crl_st*, %struct.x509_revoked_st**, %struct.asn1_string_st*, %struct.X509_name_st*)* %7, null
  br i1 %8, label %13, label %9

9:                                                ; preds = %3
  %10 = tail call %struct.asn1_string_st* @X509_get_serialNumber(%struct.x509_st* %2) #6
  %11 = tail call %struct.X509_name_st* @X509_get_issuer_name(%struct.x509_st* %2) #6
  %12 = tail call i32 %7(%struct.X509_crl_st* %0, %struct.x509_revoked_st** %1, %struct.asn1_string_st* %10, %struct.X509_name_st* %11) #6
  br label %13

13:                                               ; preds = %3, %9
  %14 = phi i32 [ %12, %9 ], [ 0, %3 ]
  ret i32 %14
}

declare %struct.asn1_string_st* @X509_get_serialNumber(%struct.x509_st*) local_unnamed_addr #1

declare %struct.X509_name_st* @X509_get_issuer_name(%struct.x509_st*) local_unnamed_addr #1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @X509_CRL_set_default_method(%struct.x509_crl_method_st*) local_unnamed_addr #3 {
  %2 = icmp eq %struct.x509_crl_method_st* %0, null
  %3 = select i1 %2, %struct.x509_crl_method_st* @int_crl_meth, %struct.x509_crl_method_st* %0
  store %struct.x509_crl_method_st* %3, %struct.x509_crl_method_st** @default_crl_method, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.x509_crl_method_st* @X509_CRL_METHOD_new(i32 (%struct.X509_crl_st*)*, i32 (%struct.X509_crl_st*)*, i32 (%struct.X509_crl_st*, %struct.x509_revoked_st**, %struct.asn1_string_st*, %struct.X509_name_st*)*, i32 (%struct.X509_crl_st*, %struct.evp_pkey_st*)*) local_unnamed_addr #0 {
  %5 = tail call i8* @OPENSSL_malloc(i64 40) #6
  %6 = icmp eq i8* %5, null
  br i1 %6, label %18, label %7

7:                                                ; preds = %4
  %8 = bitcast i8* %5 to %struct.x509_crl_method_st*
  %9 = getelementptr inbounds i8, i8* %5, i64 8
  %10 = bitcast i8* %9 to i32 (%struct.X509_crl_st*)**
  store i32 (%struct.X509_crl_st*)* %0, i32 (%struct.X509_crl_st*)** %10, align 8
  %11 = getelementptr inbounds i8, i8* %5, i64 16
  %12 = bitcast i8* %11 to i32 (%struct.X509_crl_st*)**
  store i32 (%struct.X509_crl_st*)* %1, i32 (%struct.X509_crl_st*)** %12, align 8
  %13 = getelementptr inbounds i8, i8* %5, i64 24
  %14 = bitcast i8* %13 to i32 (%struct.X509_crl_st*, %struct.x509_revoked_st**, %struct.asn1_string_st*, %struct.X509_name_st*)**
  store i32 (%struct.X509_crl_st*, %struct.x509_revoked_st**, %struct.asn1_string_st*, %struct.X509_name_st*)* %2, i32 (%struct.X509_crl_st*, %struct.x509_revoked_st**, %struct.asn1_string_st*, %struct.X509_name_st*)** %14, align 8
  %15 = getelementptr inbounds i8, i8* %5, i64 32
  %16 = bitcast i8* %15 to i32 (%struct.X509_crl_st*, %struct.evp_pkey_st*)**
  store i32 (%struct.X509_crl_st*, %struct.evp_pkey_st*)* %3, i32 (%struct.X509_crl_st*, %struct.evp_pkey_st*)** %16, align 8
  %17 = bitcast i8* %5 to i32*
  store i32 1, i32* %17, align 8
  br label %18

18:                                               ; preds = %4, %7
  %19 = phi %struct.x509_crl_method_st* [ %8, %7 ], [ null, %4 ]
  ret %struct.x509_crl_method_st* %19
}

declare i8* @OPENSSL_malloc(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @X509_CRL_METHOD_free(%struct.x509_crl_method_st*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.x509_crl_method_st, %struct.x509_crl_method_st* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = and i32 %3, 1
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = bitcast %struct.x509_crl_method_st* %0 to i8*
  tail call void @OPENSSL_free(i8* %7) #6
  br label %8

8:                                                ; preds = %1, %6
  ret void
}

declare void @OPENSSL_free(i8*) local_unnamed_addr #1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @X509_CRL_set_meth_data(%struct.X509_crl_st* nocapture, i8*) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %0, i64 0, i32 14
  store i8* %1, i8** %3, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i8* @X509_CRL_get_meth_data(%struct.X509_crl_st* nocapture readonly) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %0, i64 0, i32 14
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @crl_inf_cb(i32, %struct.ASN1_VALUE_st** nocapture readonly, %struct.ASN1_ITEM_st* nocapture readnone, i8* nocapture readnone) #0 {
  %5 = bitcast %struct.ASN1_VALUE_st** %1 to %struct.X509_crl_info_st**
  %6 = load %struct.X509_crl_info_st*, %struct.X509_crl_info_st** %5, align 8
  %7 = icmp eq %struct.X509_crl_info_st* %6, null
  br i1 %7, label %17, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.X509_crl_info_st, %struct.X509_crl_info_st* %6, i64 0, i32 5
  %10 = load %struct.stack_st_X509_REVOKED*, %struct.stack_st_X509_REVOKED** %9, align 8
  %11 = icmp ne %struct.stack_st_X509_REVOKED* %10, null
  %12 = icmp eq i32 %0, 5
  %13 = and i1 %12, %11
  br i1 %13, label %14, label %17

14:                                               ; preds = %8
  %15 = bitcast %struct.stack_st_X509_REVOKED* %10 to %struct.stack_st*
  %16 = tail call i32 (i8**, i8**)* @sk_set_cmp_func(%struct.stack_st* nonnull %15, i32 (i8**, i8**)* bitcast (i32 (%struct.x509_revoked_st**, %struct.x509_revoked_st**)* @X509_REVOKED_cmp to i32 (i8**, i8**)*)) #6
  br label %17

17:                                               ; preds = %8, %14, %4
  ret i32 1
}

declare i32 (i8**, i8**)* @sk_set_cmp_func(%struct.stack_st*, i32 (i8**, i8**)*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal i32 @crl_cb(i32, %struct.ASN1_VALUE_st** nocapture readonly, %struct.ASN1_ITEM_st* nocapture readnone, i8* nocapture readnone) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast %struct.ASN1_VALUE_st** %1 to %struct.X509_crl_st**
  %8 = load %struct.X509_crl_st*, %struct.X509_crl_st** %7, align 8
  %9 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #6
  store i32 -1431655766, i32* %6, align 4
  switch i32 %0, label %308 [
    i32 1, label %10
    i32 5, label %21
    i32 3, label %279
  ]

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %8, i64 0, i32 4
  %12 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %8, i64 0, i32 8
  %13 = bitcast i32* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %13, i8 0, i64 24, i1 false)
  store i32 32895, i32* %12, align 4
  %14 = load i64, i64* bitcast (%struct.x509_crl_method_st** @default_crl_method to i64*), align 8
  %15 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %8, i64 0, i32 13
  %16 = bitcast %struct.x509_crl_method_st** %15 to i64*
  store i64 %14, i64* %16, align 8
  %17 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %8, i64 0, i32 14
  store i8* null, i8** %17, align 8
  %18 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %8, i64 0, i32 12
  store %struct.stack_st_GENERAL_NAMES* null, %struct.stack_st_GENERAL_NAMES** %18, align 8
  %19 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %8, i64 0, i32 9
  %20 = bitcast %struct.asn1_string_st** %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 16, i1 false)
  br label %308

21:                                               ; preds = %4
  %22 = tail call %struct.env_md_st* @EVP_sha1() #6
  %23 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %8, i64 0, i32 11, i64 0
  %24 = tail call i32 @X509_CRL_digest(%struct.X509_crl_st* %8, %struct.env_md_st* %22, i8* %23, i32* null) #6
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %309, label %26

26:                                               ; preds = %21
  %27 = call i8* @X509_CRL_get_ext_d2i(%struct.X509_crl_st* %8, i32 770, i32* nonnull %6, i32* null) #6
  %28 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %8, i64 0, i32 6
  %29 = bitcast %struct.ISSUING_DIST_POINT_st** %28 to i8**
  store i8* %27, i8** %29, align 8
  %30 = icmp eq i8* %27, null
  br i1 %30, label %117, label %31

31:                                               ; preds = %26
  %32 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %8, i64 0, i32 7
  %33 = load i32, i32* %32, align 8
  %34 = or i32 %33, 1
  store i32 %34, i32* %32, align 8
  %35 = getelementptr inbounds i8, i8* %27, i64 8
  %36 = bitcast i8* %35 to i32*
  %37 = load i32, i32* %36, align 8
  %38 = icmp sgt i32 %37, 0
  br i1 %38, label %39, label %41

39:                                               ; preds = %31
  %40 = or i32 %33, 5
  store i32 %40, i32* %32, align 8
  br label %41

41:                                               ; preds = %39, %31
  %42 = phi i32 [ %40, %39 ], [ %34, %31 ]
  %43 = phi i32 [ 1, %39 ], [ 0, %31 ]
  %44 = getelementptr inbounds i8, i8* %27, i64 12
  %45 = bitcast i8* %44 to i32*
  %46 = load i32, i32* %45, align 4
  %47 = icmp sgt i32 %46, 0
  br i1 %47, label %48, label %51

48:                                               ; preds = %41
  %49 = add nuw nsw i32 %43, 1
  %50 = or i32 %42, 8
  store i32 %50, i32* %32, align 8
  br label %51

51:                                               ; preds = %48, %41
  %52 = phi i32 [ %50, %48 ], [ %42, %41 ]
  %53 = phi i32 [ %49, %48 ], [ %43, %41 ]
  %54 = getelementptr inbounds i8, i8* %27, i64 28
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 4
  %57 = icmp sgt i32 %56, 0
  %58 = or i32 %52, 16
  %59 = select i1 %57, i32 %58, i32 %52
  %60 = zext i1 %57 to i32
  %61 = add nuw nsw i32 %53, %60
  %62 = icmp sgt i32 %61, 1
  %63 = or i32 %59, 2
  %64 = select i1 %62, i32 %63, i32 %59
  %65 = or i1 %57, %62
  br i1 %65, label %66, label %67

66:                                               ; preds = %51
  store i32 %64, i32* %32, align 8
  br label %67

67:                                               ; preds = %66, %51
  %68 = getelementptr inbounds i8, i8* %27, i64 24
  %69 = bitcast i8* %68 to i32*
  %70 = load i32, i32* %69, align 8
  %71 = icmp sgt i32 %70, 0
  br i1 %71, label %72, label %74

72:                                               ; preds = %67
  %73 = or i32 %64, 32
  store i32 %73, i32* %32, align 8
  br label %74

74:                                               ; preds = %72, %67
  %75 = phi i32 [ %73, %72 ], [ %64, %67 ]
  %76 = getelementptr inbounds i8, i8* %27, i64 16
  %77 = bitcast i8* %76 to %struct.asn1_string_st**
  %78 = load %struct.asn1_string_st*, %struct.asn1_string_st** %77, align 8
  %79 = icmp eq %struct.asn1_string_st* %78, null
  br i1 %79, label %111, label %80

80:                                               ; preds = %74
  %81 = or i32 %75, 64
  store i32 %81, i32* %32, align 8
  %82 = load %struct.asn1_string_st*, %struct.asn1_string_st** %77, align 8
  %83 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %82, i64 0, i32 0
  %84 = load i32, i32* %83, align 8
  %85 = icmp sgt i32 %84, 0
  br i1 %85, label %89, label %86

86:                                               ; preds = %80
  %87 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %8, i64 0, i32 8
  %88 = load i32, i32* %87, align 4
  br label %107

89:                                               ; preds = %80
  %90 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %82, i64 0, i32 2
  %91 = load i8*, i8** %90, align 8
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i32
  %94 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %8, i64 0, i32 8
  store i32 %93, i32* %94, align 4
  %95 = load %struct.asn1_string_st*, %struct.asn1_string_st** %77, align 8
  %96 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %95, i64 0, i32 0
  %97 = load i32, i32* %96, align 8
  %98 = icmp sgt i32 %97, 1
  br i1 %98, label %99, label %107

99:                                               ; preds = %89
  %100 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %95, i64 0, i32 2
  %101 = load i8*, i8** %100, align 8
  %102 = getelementptr inbounds i8, i8* %101, i64 1
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i32
  %105 = shl nuw nsw i32 %104, 8
  %106 = or i32 %105, %93
  store i32 %106, i32* %94, align 4
  br label %107

107:                                              ; preds = %89, %86, %99
  %108 = phi i32 [ %106, %99 ], [ %88, %86 ], [ %93, %89 ]
  %109 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %8, i64 0, i32 8
  %110 = and i32 %108, 32895
  store i32 %110, i32* %109, align 4
  br label %111

111:                                              ; preds = %74, %107
  %112 = bitcast i8* %27 to %struct.DIST_POINT_NAME_st**
  %113 = load %struct.DIST_POINT_NAME_st*, %struct.DIST_POINT_NAME_st** %112, align 8
  %114 = call %struct.X509_name_st* @X509_CRL_get_issuer(%struct.X509_crl_st* %8) #6
  %115 = call i32 @DIST_POINT_set_dpname(%struct.DIST_POINT_NAME_st* %113, %struct.X509_name_st* %114) #6
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %309, label %120

117:                                              ; preds = %26
  %118 = load i32, i32* %6, align 4
  %119 = icmp eq i32 %118, -1
  br i1 %119, label %120, label %309

120:                                              ; preds = %111, %117
  %121 = call i8* @X509_CRL_get_ext_d2i(%struct.X509_crl_st* %8, i32 90, i32* nonnull %6, i32* null) #6
  %122 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %8, i64 0, i32 5
  %123 = bitcast %struct.AUTHORITY_KEYID_st** %122 to i8**
  store i8* %121, i8** %123, align 8
  %124 = icmp eq i8* %121, null
  %125 = load i32, i32* %6, align 4
  %126 = icmp ne i32 %125, -1
  %127 = and i1 %124, %126
  br i1 %127, label %309, label %128

128:                                              ; preds = %120
  %129 = call i8* @X509_CRL_get_ext_d2i(%struct.X509_crl_st* %8, i32 88, i32* nonnull %6, i32* null) #6
  %130 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %8, i64 0, i32 9
  %131 = bitcast %struct.asn1_string_st** %130 to i8**
  store i8* %129, i8** %131, align 8
  %132 = icmp eq i8* %129, null
  %133 = load i32, i32* %6, align 4
  %134 = icmp ne i32 %133, -1
  %135 = and i1 %132, %134
  br i1 %135, label %309, label %136

136:                                              ; preds = %128
  %137 = call i8* @X509_CRL_get_ext_d2i(%struct.X509_crl_st* %8, i32 140, i32* nonnull %6, i32* null) #6
  %138 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %8, i64 0, i32 10
  %139 = bitcast %struct.asn1_string_st** %138 to i8**
  store i8* %137, i8** %139, align 8
  %140 = icmp eq i8* %137, null
  %141 = load i32, i32* %6, align 4
  %142 = icmp ne i32 %141, -1
  %143 = and i1 %140, %142
  br i1 %143, label %309, label %144

144:                                              ; preds = %136
  br i1 %140, label %149, label %145

145:                                              ; preds = %144
  %146 = load %struct.asn1_string_st*, %struct.asn1_string_st** %130, align 8
  %147 = icmp eq %struct.asn1_string_st* %146, null
  br i1 %147, label %148, label %149

148:                                              ; preds = %145
  call void @ERR_put_error(i32 11, i32 0, i32 138, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.3, i64 0, i64 0), i32 284) #6
  br label %309

149:                                              ; preds = %145, %144
  %150 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %8, i64 0, i32 0
  %151 = load %struct.X509_crl_info_st*, %struct.X509_crl_info_st** %150, align 8
  %152 = getelementptr inbounds %struct.X509_crl_info_st, %struct.X509_crl_info_st* %151, i64 0, i32 6
  %153 = bitcast %struct.stack_st_X509_EXTENSION** %152 to %struct.stack_st**
  %154 = load %struct.stack_st*, %struct.stack_st** %153, align 8
  %155 = call i64 @sk_num(%struct.stack_st* %154) #6
  %156 = icmp eq i64 %155, 0
  br i1 %156, label %182, label %157

157:                                              ; preds = %149
  %158 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %8, i64 0, i32 4
  br label %159

159:                                              ; preds = %157, %178
  %160 = phi i64 [ 0, %157 ], [ %179, %178 ]
  %161 = call i8* @sk_value(%struct.stack_st* %154, i64 %160) #6
  %162 = bitcast i8* %161 to %struct.asn1_object_st**
  %163 = load %struct.asn1_object_st*, %struct.asn1_object_st** %162, align 8
  %164 = call i32 @OBJ_obj2nid(%struct.asn1_object_st* %163) #6
  %165 = icmp eq i32 %164, 857
  br i1 %165, label %166, label %169

166:                                              ; preds = %159
  %167 = load i32, i32* %158, align 4
  %168 = or i32 %167, 4096
  store i32 %168, i32* %158, align 4
  br label %169

169:                                              ; preds = %166, %159
  %170 = getelementptr inbounds i8, i8* %161, i64 8
  %171 = bitcast i8* %170 to i32*
  %172 = load i32, i32* %171, align 8
  %173 = icmp sgt i32 %172, 0
  br i1 %173, label %174, label %178

174:                                              ; preds = %169
  switch i32 %164, label %175 [
    i32 770, label %178
    i32 140, label %178
    i32 90, label %178
  ]

175:                                              ; preds = %174
  %176 = load i32, i32* %158, align 4
  %177 = or i32 %176, 512
  store i32 %177, i32* %158, align 4
  br label %182

178:                                              ; preds = %174, %174, %174, %169
  %179 = add nuw i64 %160, 1
  %180 = call i64 @sk_num(%struct.stack_st* %154) #6
  %181 = icmp ult i64 %179, %180
  br i1 %181, label %159, label %182

182:                                              ; preds = %178, %149, %175
  %183 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %183) #6
  store i32 -1431655766, i32* %5, align 4
  %184 = call %struct.stack_st_X509_REVOKED* @X509_CRL_get_REVOKED(%struct.X509_crl_st* %8) #6
  %185 = bitcast %struct.stack_st_X509_REVOKED* %184 to %struct.stack_st*
  %186 = call i64 @sk_num(%struct.stack_st* %185) #6
  %187 = icmp eq i64 %186, 0
  br i1 %187, label %270, label %188

188:                                              ; preds = %182
  %189 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %8, i64 0, i32 12
  %190 = bitcast %struct.stack_st_GENERAL_NAMES** %189 to %struct.stack_st**
  %191 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %8, i64 0, i32 4
  br label %192

192:                                              ; preds = %265, %188
  %193 = phi %struct.stack_st_GENERAL_NAME* [ null, %188 ], [ %219, %265 ]
  %194 = phi i64 [ 0, %188 ], [ %266, %265 ]
  %195 = call i8* @sk_value(%struct.stack_st* %185, i64 %194) #6
  %196 = bitcast i8* %195 to %struct.x509_revoked_st*
  %197 = call i8* @X509_REVOKED_get_ext_d2i(%struct.x509_revoked_st* %196, i32 771, i32* nonnull %5, i32* null) #6
  %198 = bitcast i8* %197 to %struct.stack_st_GENERAL_NAME*
  %199 = icmp eq i8* %197, null
  %200 = load i32, i32* %5, align 4
  %201 = icmp ne i32 %200, -1
  %202 = and i1 %199, %201
  br i1 %202, label %203, label %206

203:                                              ; preds = %192
  %204 = load i32, i32* %191, align 4
  %205 = or i32 %204, 128
  store i32 %205, i32* %191, align 4
  br label %270

206:                                              ; preds = %192
  br i1 %199, label %218, label %207

207:                                              ; preds = %206
  %208 = load %struct.stack_st_GENERAL_NAMES*, %struct.stack_st_GENERAL_NAMES** %189, align 8
  %209 = icmp eq %struct.stack_st_GENERAL_NAMES* %208, null
  %210 = bitcast %struct.stack_st_GENERAL_NAMES* %208 to %struct.stack_st*
  br i1 %209, label %211, label %214

211:                                              ; preds = %207
  %212 = call %struct.stack_st* @sk_new_null() #6
  store %struct.stack_st* %212, %struct.stack_st** %190, align 8
  %213 = icmp eq %struct.stack_st* %212, null
  br i1 %213, label %269, label %214

214:                                              ; preds = %211, %207
  %215 = phi %struct.stack_st* [ %212, %211 ], [ %210, %207 ]
  %216 = call i64 @sk_push(%struct.stack_st* %215, i8* nonnull %197) #6
  %217 = icmp eq i64 %216, 0
  br i1 %217, label %269, label %218

218:                                              ; preds = %214, %206
  %219 = phi %struct.stack_st_GENERAL_NAME* [ %198, %214 ], [ %193, %206 ]
  %220 = getelementptr inbounds i8, i8* %195, i64 24
  %221 = bitcast i8* %220 to %struct.stack_st_GENERAL_NAME**
  store %struct.stack_st_GENERAL_NAME* %219, %struct.stack_st_GENERAL_NAME** %221, align 8
  %222 = call i8* @X509_REVOKED_get_ext_d2i(%struct.x509_revoked_st* %196, i32 141, i32* nonnull %5, i32* null) #6
  %223 = bitcast i8* %222 to %struct.asn1_string_st*
  %224 = icmp eq i8* %222, null
  %225 = load i32, i32* %5, align 4
  %226 = icmp ne i32 %225, -1
  %227 = and i1 %224, %226
  br i1 %227, label %228, label %231

228:                                              ; preds = %218
  %229 = load i32, i32* %191, align 4
  %230 = or i32 %229, 128
  store i32 %230, i32* %191, align 4
  br label %270

231:                                              ; preds = %218
  br i1 %224, label %237, label %232

232:                                              ; preds = %231
  %233 = call i64 @ASN1_ENUMERATED_get(%struct.asn1_string_st* nonnull %223) #6
  %234 = trunc i64 %233 to i32
  %235 = getelementptr inbounds i8, i8* %195, i64 32
  %236 = bitcast i8* %235 to i32*
  store i32 %234, i32* %236, align 8
  call void @ASN1_ENUMERATED_free(%struct.asn1_string_st* nonnull %223) #6
  br label %240

237:                                              ; preds = %231
  %238 = getelementptr inbounds i8, i8* %195, i64 32
  %239 = bitcast i8* %238 to i32*
  store i32 -1, i32* %239, align 8
  br label %240

240:                                              ; preds = %237, %232
  %241 = getelementptr inbounds i8, i8* %195, i64 16
  %242 = bitcast i8* %241 to %struct.stack_st**
  %243 = load %struct.stack_st*, %struct.stack_st** %242, align 8
  %244 = call i64 @sk_num(%struct.stack_st* %243) #6
  %245 = icmp eq i64 %244, 0
  br i1 %245, label %265, label %246

246:                                              ; preds = %240, %261
  %247 = phi i64 [ %262, %261 ], [ 0, %240 ]
  %248 = call i8* @sk_value(%struct.stack_st* %243, i64 %247) #6
  %249 = getelementptr inbounds i8, i8* %248, i64 8
  %250 = bitcast i8* %249 to i32*
  %251 = load i32, i32* %250, align 8
  %252 = icmp sgt i32 %251, 0
  br i1 %252, label %253, label %261

253:                                              ; preds = %246
  %254 = bitcast i8* %248 to %struct.asn1_object_st**
  %255 = load %struct.asn1_object_st*, %struct.asn1_object_st** %254, align 8
  %256 = call i32 @OBJ_obj2nid(%struct.asn1_object_st* %255) #6
  %257 = icmp eq i32 %256, 771
  br i1 %257, label %261, label %258

258:                                              ; preds = %253
  %259 = load i32, i32* %191, align 4
  %260 = or i32 %259, 512
  store i32 %260, i32* %191, align 4
  br label %265

261:                                              ; preds = %253, %246
  %262 = add nuw i64 %247, 1
  %263 = call i64 @sk_num(%struct.stack_st* %243) #6
  %264 = icmp ult i64 %262, %263
  br i1 %264, label %246, label %265

265:                                              ; preds = %261, %258, %240
  %266 = add nuw i64 %194, 1
  %267 = call i64 @sk_num(%struct.stack_st* %185) #6
  %268 = icmp ult i64 %266, %267
  br i1 %268, label %192, label %270

269:                                              ; preds = %211, %214
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %183) #6
  br label %309

270:                                              ; preds = %265, %228, %203, %182
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %183) #6
  %271 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %8, i64 0, i32 13
  %272 = load %struct.x509_crl_method_st*, %struct.x509_crl_method_st** %271, align 8
  %273 = getelementptr inbounds %struct.x509_crl_method_st, %struct.x509_crl_method_st* %272, i64 0, i32 1
  %274 = load i32 (%struct.X509_crl_st*)*, i32 (%struct.X509_crl_st*)** %273, align 8
  %275 = icmp eq i32 (%struct.X509_crl_st*)* %274, null
  br i1 %275, label %308, label %276

276:                                              ; preds = %270
  %277 = call i32 %274(%struct.X509_crl_st* %8) #6
  %278 = icmp eq i32 %277, 0
  br i1 %278, label %309, label %308

279:                                              ; preds = %4
  %280 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %8, i64 0, i32 13
  %281 = load %struct.x509_crl_method_st*, %struct.x509_crl_method_st** %280, align 8
  %282 = icmp eq %struct.x509_crl_method_st* %281, null
  br i1 %282, label %290, label %283

283:                                              ; preds = %279
  %284 = getelementptr inbounds %struct.x509_crl_method_st, %struct.x509_crl_method_st* %281, i64 0, i32 2
  %285 = load i32 (%struct.X509_crl_st*)*, i32 (%struct.X509_crl_st*)** %284, align 8
  %286 = icmp eq i32 (%struct.X509_crl_st*)* %285, null
  br i1 %286, label %290, label %287

287:                                              ; preds = %283
  %288 = tail call i32 %285(%struct.X509_crl_st* %8) #6
  %289 = icmp eq i32 %288, 0
  br i1 %289, label %309, label %290

290:                                              ; preds = %287, %283, %279
  %291 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %8, i64 0, i32 5
  %292 = load %struct.AUTHORITY_KEYID_st*, %struct.AUTHORITY_KEYID_st** %291, align 8
  %293 = icmp eq %struct.AUTHORITY_KEYID_st* %292, null
  br i1 %293, label %295, label %294

294:                                              ; preds = %290
  tail call void @AUTHORITY_KEYID_free(%struct.AUTHORITY_KEYID_st* nonnull %292) #6
  br label %295

295:                                              ; preds = %290, %294
  %296 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %8, i64 0, i32 6
  %297 = load %struct.ISSUING_DIST_POINT_st*, %struct.ISSUING_DIST_POINT_st** %296, align 8
  %298 = icmp eq %struct.ISSUING_DIST_POINT_st* %297, null
  br i1 %298, label %300, label %299

299:                                              ; preds = %295
  tail call void @ISSUING_DIST_POINT_free(%struct.ISSUING_DIST_POINT_st* nonnull %297) #6
  br label %300

300:                                              ; preds = %295, %299
  %301 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %8, i64 0, i32 9
  %302 = load %struct.asn1_string_st*, %struct.asn1_string_st** %301, align 8
  tail call void @ASN1_INTEGER_free(%struct.asn1_string_st* %302) #6
  %303 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %8, i64 0, i32 10
  %304 = load %struct.asn1_string_st*, %struct.asn1_string_st** %303, align 8
  tail call void @ASN1_INTEGER_free(%struct.asn1_string_st* %304) #6
  %305 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %8, i64 0, i32 12
  %306 = bitcast %struct.stack_st_GENERAL_NAMES** %305 to %struct.stack_st**
  %307 = load %struct.stack_st*, %struct.stack_st** %306, align 8
  tail call void @sk_pop_free_ex(%struct.stack_st* %307, void (void (i8*)*, i8*)* nonnull @sk_GENERAL_NAMES_call_free_func, void (i8*)* bitcast (void (%struct.stack_st_GENERAL_NAME*)* @GENERAL_NAMES_free to void (i8*)*)) #6
  br label %308

308:                                              ; preds = %270, %276, %4, %300, %10
  br label %309

309:                                              ; preds = %269, %287, %276, %136, %128, %120, %117, %111, %21, %308, %148
  %310 = phi i32 [ 1, %308 ], [ 0, %148 ], [ 0, %21 ], [ 0, %111 ], [ 0, %117 ], [ 0, %120 ], [ 0, %128 ], [ 0, %136 ], [ 0, %269 ], [ 0, %276 ], [ 0, %287 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #6
  ret i32 %310
}

declare i32 @X509_CRL_digest(%struct.X509_crl_st*, %struct.env_md_st*, i8*, i32*) local_unnamed_addr #1

declare %struct.env_md_st* @EVP_sha1() local_unnamed_addr #1

declare i8* @X509_CRL_get_ext_d2i(%struct.X509_crl_st*, i32, i32*, i32*) local_unnamed_addr #1

declare i32 @OBJ_obj2nid(%struct.asn1_object_st*) local_unnamed_addr #1

declare void @AUTHORITY_KEYID_free(%struct.AUTHORITY_KEYID_st*) local_unnamed_addr #1

declare void @ISSUING_DIST_POINT_free(%struct.ISSUING_DIST_POINT_st*) local_unnamed_addr #1

declare void @ASN1_INTEGER_free(%struct.asn1_string_st*) local_unnamed_addr #1

declare void @GENERAL_NAMES_free(%struct.stack_st_GENERAL_NAME*) #1

declare i32 @DIST_POINT_set_dpname(%struct.DIST_POINT_NAME_st*, %struct.X509_name_st*) local_unnamed_addr #1

declare %struct.X509_name_st* @X509_CRL_get_issuer(%struct.X509_crl_st*) local_unnamed_addr #1

declare i64 @sk_num(%struct.stack_st*) local_unnamed_addr #1

declare i8* @sk_value(%struct.stack_st*, i64) local_unnamed_addr #1

declare %struct.stack_st_X509_REVOKED* @X509_CRL_get_REVOKED(%struct.X509_crl_st*) local_unnamed_addr #1

declare i8* @X509_REVOKED_get_ext_d2i(%struct.x509_revoked_st*, i32, i32*, i32*) local_unnamed_addr #1

declare i64 @ASN1_ENUMERATED_get(%struct.asn1_string_st*) local_unnamed_addr #1

declare void @ASN1_ENUMERATED_free(%struct.asn1_string_st*) local_unnamed_addr #1

declare %struct.stack_st* @sk_new_null() local_unnamed_addr #1

declare i64 @sk_push(%struct.stack_st*, i8*) local_unnamed_addr #1

declare void @sk_pop_free_ex(%struct.stack_st*, void (void (i8*)*, i8*)*, void (i8*)*) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @sk_GENERAL_NAMES_call_free_func(void (i8*)* nocapture, i8*) #5 {
  %3 = bitcast void (i8*)* %0 to void (%struct.stack_st_GENERAL_NAME*)*
  %4 = bitcast i8* %1 to %struct.stack_st_GENERAL_NAME*
  tail call void %3(%struct.stack_st_GENERAL_NAME* %4) #6
  ret void
}

declare %struct.stack_st* @sk_new(i32 (i8**, i8**)*) local_unnamed_addr #1

declare i32 @ASN1_STRING_cmp(%struct.asn1_string_st*, %struct.asn1_string_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal i32 @def_crl_lookup(%struct.X509_crl_st*, %struct.x509_revoked_st**, %struct.asn1_string_st*, %struct.X509_name_st*) #0 {
  %5 = alloca %struct.x509_revoked_st, align 8
  %6 = alloca i64, align 8
  %7 = bitcast %struct.x509_revoked_st* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %7) #6
  %8 = getelementptr inbounds %struct.x509_revoked_st, %struct.x509_revoked_st* %5, i64 0, i32 0
  %9 = bitcast i64* %6 to i8*
  %10 = getelementptr inbounds %struct.x509_revoked_st, %struct.x509_revoked_st* %5, i64 0, i32 1
  %11 = bitcast %struct.asn1_string_st** %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #6
  store i64 -6148914691236517206, i64* %6, align 8
  store %struct.asn1_string_st* %2, %struct.asn1_string_st** %8, align 8
  tail call void @CRYPTO_STATIC_MUTEX_lock_read(%struct.CRYPTO_STATIC_MUTEX* nonnull @g_crl_sort_lock) #6
  %12 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %0, i64 0, i32 0
  %13 = load %struct.X509_crl_info_st*, %struct.X509_crl_info_st** %12, align 8
  %14 = getelementptr inbounds %struct.X509_crl_info_st, %struct.X509_crl_info_st* %13, i64 0, i32 5
  %15 = bitcast %struct.stack_st_X509_REVOKED** %14 to %struct.stack_st**
  %16 = load %struct.stack_st*, %struct.stack_st** %15, align 8
  %17 = tail call i32 @sk_is_sorted(%struct.stack_st* %16) #6
  tail call void @CRYPTO_STATIC_MUTEX_unlock_read(%struct.CRYPTO_STATIC_MUTEX* nonnull @g_crl_sort_lock) #6
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %32

19:                                               ; preds = %4
  tail call void @CRYPTO_STATIC_MUTEX_lock_write(%struct.CRYPTO_STATIC_MUTEX* nonnull @g_crl_sort_lock) #6
  %20 = load %struct.X509_crl_info_st*, %struct.X509_crl_info_st** %12, align 8
  %21 = getelementptr inbounds %struct.X509_crl_info_st, %struct.X509_crl_info_st* %20, i64 0, i32 5
  %22 = bitcast %struct.stack_st_X509_REVOKED** %21 to %struct.stack_st**
  %23 = load %struct.stack_st*, %struct.stack_st** %22, align 8
  %24 = tail call i32 @sk_is_sorted(%struct.stack_st* %23) #6
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %31

26:                                               ; preds = %19
  %27 = load %struct.X509_crl_info_st*, %struct.X509_crl_info_st** %12, align 8
  %28 = getelementptr inbounds %struct.X509_crl_info_st, %struct.X509_crl_info_st* %27, i64 0, i32 5
  %29 = bitcast %struct.stack_st_X509_REVOKED** %28 to %struct.stack_st**
  %30 = load %struct.stack_st*, %struct.stack_st** %29, align 8
  tail call void @sk_sort(%struct.stack_st* %30) #6
  br label %31

31:                                               ; preds = %19, %26
  tail call void @CRYPTO_STATIC_MUTEX_unlock_write(%struct.CRYPTO_STATIC_MUTEX* nonnull @g_crl_sort_lock) #6
  br label %32

32:                                               ; preds = %4, %31
  %33 = load %struct.X509_crl_info_st*, %struct.X509_crl_info_st** %12, align 8
  %34 = getelementptr inbounds %struct.X509_crl_info_st, %struct.X509_crl_info_st* %33, i64 0, i32 5
  %35 = bitcast %struct.stack_st_X509_REVOKED** %34 to %struct.stack_st**
  %36 = load %struct.stack_st*, %struct.stack_st** %35, align 8
  %37 = call i32 @sk_find(%struct.stack_st* %36, i64* nonnull %6, i8* nonnull %7, i32 (i32 (i8**, i8**)*, i8**, i8**)* nonnull @sk_X509_REVOKED_call_cmp_func) #6
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %121, label %39

39:                                               ; preds = %32
  %40 = load i64, i64* %6, align 8
  %41 = load %struct.X509_crl_info_st*, %struct.X509_crl_info_st** %12, align 8
  %42 = getelementptr inbounds %struct.X509_crl_info_st, %struct.X509_crl_info_st* %41, i64 0, i32 5
  %43 = bitcast %struct.stack_st_X509_REVOKED** %42 to %struct.stack_st**
  %44 = load %struct.stack_st*, %struct.stack_st** %43, align 8
  %45 = call i64 @sk_num(%struct.stack_st* %44) #6
  %46 = icmp ult i64 %40, %45
  br i1 %46, label %47, label %121

47:                                               ; preds = %39
  %48 = icmp ne %struct.X509_name_st* %3, null
  br label %49

49:                                               ; preds = %47, %112
  %50 = load %struct.X509_crl_info_st*, %struct.X509_crl_info_st** %12, align 8
  %51 = getelementptr inbounds %struct.X509_crl_info_st, %struct.X509_crl_info_st* %50, i64 0, i32 5
  %52 = bitcast %struct.stack_st_X509_REVOKED** %51 to %struct.stack_st**
  %53 = load %struct.stack_st*, %struct.stack_st** %52, align 8
  %54 = load i64, i64* %6, align 8
  %55 = call i8* @sk_value(%struct.stack_st* %53, i64 %54) #6
  %56 = bitcast i8* %55 to %struct.asn1_string_st**
  %57 = load %struct.asn1_string_st*, %struct.asn1_string_st** %56, align 8
  %58 = call i32 @ASN1_INTEGER_cmp(%struct.asn1_string_st* %57, %struct.asn1_string_st* %2) #6
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %121

60:                                               ; preds = %49
  %61 = getelementptr inbounds i8, i8* %55, i64 24
  %62 = bitcast i8* %61 to %struct.stack_st_GENERAL_NAME**
  %63 = load %struct.stack_st_GENERAL_NAME*, %struct.stack_st_GENERAL_NAME** %62, align 8
  %64 = icmp eq %struct.stack_st_GENERAL_NAME* %63, null
  %65 = bitcast %struct.stack_st_GENERAL_NAME* %63 to %struct.stack_st*
  br i1 %64, label %66, label %67

66:                                               ; preds = %60
  br i1 %48, label %98, label %102

67:                                               ; preds = %60
  br i1 %48, label %68, label %70

68:                                               ; preds = %67
  %69 = bitcast i8* %61 to %struct.stack_st**
  br label %74

70:                                               ; preds = %67
  %71 = call %struct.X509_name_st* @X509_CRL_get_issuer(%struct.X509_crl_st* %0) #6
  %72 = bitcast i8* %61 to %struct.stack_st**
  %73 = load %struct.stack_st*, %struct.stack_st** %72, align 8
  br label %74

74:                                               ; preds = %70, %68
  %75 = phi %struct.stack_st** [ %69, %68 ], [ %72, %70 ]
  %76 = phi %struct.stack_st* [ %65, %68 ], [ %73, %70 ]
  %77 = phi %struct.X509_name_st* [ %3, %68 ], [ %71, %70 ]
  %78 = call i64 @sk_num(%struct.stack_st* %76) #6
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %112, label %80

80:                                               ; preds = %74, %93
  %81 = phi i64 [ %94, %93 ], [ 0, %74 ]
  %82 = load %struct.stack_st*, %struct.stack_st** %75, align 8
  %83 = call i8* @sk_value(%struct.stack_st* %82, i64 %81) #6
  %84 = bitcast i8* %83 to i32*
  %85 = load i32, i32* %84, align 8
  %86 = icmp eq i32 %85, 4
  br i1 %86, label %87, label %93

87:                                               ; preds = %80
  %88 = getelementptr inbounds i8, i8* %83, i64 8
  %89 = bitcast i8* %88 to %struct.X509_name_st**
  %90 = load %struct.X509_name_st*, %struct.X509_name_st** %89, align 8
  %91 = call i32 @X509_NAME_cmp(%struct.X509_name_st* %77, %struct.X509_name_st* %90) #6
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %102, label %93

93:                                               ; preds = %87, %80
  %94 = add nuw i64 %81, 1
  %95 = load %struct.stack_st*, %struct.stack_st** %75, align 8
  %96 = call i64 @sk_num(%struct.stack_st* %95) #6
  %97 = icmp ult i64 %94, %96
  br i1 %97, label %80, label %112

98:                                               ; preds = %66
  %99 = call %struct.X509_name_st* @X509_CRL_get_issuer(%struct.X509_crl_st* %0) #6
  %100 = call i32 @X509_NAME_cmp(%struct.X509_name_st* nonnull %3, %struct.X509_name_st* %99) #6
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %102, label %112

102:                                              ; preds = %98, %66, %87
  %103 = icmp eq %struct.x509_revoked_st** %1, null
  br i1 %103, label %106, label %104

104:                                              ; preds = %102
  %105 = bitcast %struct.x509_revoked_st** %1 to i8**
  store i8* %55, i8** %105, align 8
  br label %106

106:                                              ; preds = %102, %104
  %107 = getelementptr inbounds i8, i8* %55, i64 32
  %108 = bitcast i8* %107 to i32*
  %109 = load i32, i32* %108, align 8
  %110 = icmp eq i32 %109, 8
  %111 = select i1 %110, i32 2, i32 1
  br label %121

112:                                              ; preds = %93, %98, %74
  %113 = load i64, i64* %6, align 8
  %114 = add i64 %113, 1
  store i64 %114, i64* %6, align 8
  %115 = load %struct.X509_crl_info_st*, %struct.X509_crl_info_st** %12, align 8
  %116 = getelementptr inbounds %struct.X509_crl_info_st, %struct.X509_crl_info_st* %115, i64 0, i32 5
  %117 = bitcast %struct.stack_st_X509_REVOKED** %116 to %struct.stack_st**
  %118 = load %struct.stack_st*, %struct.stack_st** %117, align 8
  %119 = call i64 @sk_num(%struct.stack_st* %118) #6
  %120 = icmp ult i64 %114, %119
  br i1 %120, label %49, label %121

121:                                              ; preds = %49, %112, %39, %106, %32
  %122 = phi i32 [ 0, %32 ], [ %111, %106 ], [ 0, %39 ], [ 0, %112 ], [ 0, %49 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %7) #6
  ret i32 %122
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @def_crl_verify(%struct.X509_crl_st* nocapture readonly, %struct.evp_pkey_st*) #0 {
  %3 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %0, i64 0, i32 1
  %4 = load %struct.X509_algor_st*, %struct.X509_algor_st** %3, align 8
  %5 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %0, i64 0, i32 0
  %6 = load %struct.X509_crl_info_st*, %struct.X509_crl_info_st** %5, align 8
  %7 = getelementptr inbounds %struct.X509_crl_info_st, %struct.X509_crl_info_st* %6, i64 0, i32 1
  %8 = load %struct.X509_algor_st*, %struct.X509_algor_st** %7, align 8
  %9 = tail call i32 @X509_ALGOR_cmp(%struct.X509_algor_st* %4, %struct.X509_algor_st* %8) #6
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %12, label %11

11:                                               ; preds = %2
  tail call void @ERR_put_error(i32 11, i32 0, i32 137, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.3, i64 0, i64 0), i32 440) #6
  br label %19

12:                                               ; preds = %2
  %13 = load %struct.X509_algor_st*, %struct.X509_algor_st** %3, align 8
  %14 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %0, i64 0, i32 2
  %15 = load %struct.asn1_string_st*, %struct.asn1_string_st** %14, align 8
  %16 = bitcast %struct.X509_crl_st* %0 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = tail call i32 @ASN1_item_verify(%struct.ASN1_ITEM_st* nonnull @X509_CRL_INFO_it, %struct.X509_algor_st* %13, %struct.asn1_string_st* %15, i8* %17, %struct.evp_pkey_st* %1) #6
  br label %19

19:                                               ; preds = %12, %11
  %20 = phi i32 [ 0, %11 ], [ %18, %12 ]
  ret i32 %20
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @CRYPTO_STATIC_MUTEX_lock_read(%struct.CRYPTO_STATIC_MUTEX*) local_unnamed_addr #1

declare void @CRYPTO_STATIC_MUTEX_unlock_read(%struct.CRYPTO_STATIC_MUTEX*) local_unnamed_addr #1

declare void @CRYPTO_STATIC_MUTEX_lock_write(%struct.CRYPTO_STATIC_MUTEX*) local_unnamed_addr #1

declare void @CRYPTO_STATIC_MUTEX_unlock_write(%struct.CRYPTO_STATIC_MUTEX*) local_unnamed_addr #1

declare i32 @ASN1_INTEGER_cmp(%struct.asn1_string_st*, %struct.asn1_string_st*) local_unnamed_addr #1

declare i32 @sk_is_sorted(%struct.stack_st*) local_unnamed_addr #1

declare void @sk_sort(%struct.stack_st*) local_unnamed_addr #1

declare i32 @sk_find(%struct.stack_st*, i64*, i8*, i32 (i32 (i8**, i8**)*, i8**, i8**)*) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define internal i32 @sk_X509_REVOKED_call_cmp_func(i32 (i8**, i8**)* nocapture, i8** nocapture readonly, i8** nocapture readonly) #5 {
  %4 = alloca %struct.x509_revoked_st*, align 8
  %5 = alloca %struct.x509_revoked_st*, align 8
  %6 = bitcast %struct.x509_revoked_st** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #6
  %7 = bitcast i8** %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %struct.x509_revoked_st** %4 to i64*
  store i64 %8, i64* %9, align 8
  %10 = bitcast %struct.x509_revoked_st** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #6
  %11 = bitcast i8** %2 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %struct.x509_revoked_st** %5 to i64*
  store i64 %12, i64* %13, align 8
  %14 = bitcast i32 (i8**, i8**)* %0 to i32 (%struct.x509_revoked_st**, %struct.x509_revoked_st**)*
  %15 = call i32 %14(%struct.x509_revoked_st** nonnull %4, %struct.x509_revoked_st** nonnull %5) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #6
  ret i32 %15
}

declare i32 @X509_NAME_cmp(%struct.X509_name_st*, %struct.X509_name_st*) local_unnamed_addr #1

declare i32 @X509_ALGOR_cmp(%struct.X509_algor_st*, %struct.X509_algor_st*) local_unnamed_addr #1

declare i32 @ASN1_item_verify(%struct.ASN1_ITEM_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i8*, %struct.evp_pkey_st*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
