; ModuleID = '../../third_party/libvpx/source/libvpx/vp9/encoder/x86/vp9_quantize_avx2.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp9/encoder/x86/vp9_quantize_avx2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_quantize_fp_avx2(i32* nocapture readonly, i64, i32, i16* nocapture readonly, i16* nocapture readonly, i32* nocapture, i32* nocapture, i16* nocapture readonly, i16* nocapture, i16* nocapture readnone, i16* nocapture readonly) local_unnamed_addr #0 {
  %12 = getelementptr inbounds i32, i32* %0, i64 %1
  %13 = getelementptr inbounds i16, i16* %10, i64 %1
  %14 = getelementptr inbounds i32, i32* %5, i64 %1
  %15 = getelementptr inbounds i32, i32* %6, i64 %1
  %16 = bitcast i16* %3 to <2 x i64>*
  %17 = load <2 x i64>, <2 x i64>* %16, align 16
  %18 = bitcast i16* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 16
  %20 = bitcast i16* %7 to <2 x i64>*
  %21 = load <2 x i64>, <2 x i64>* %20, align 16
  %22 = shufflevector <2 x i64> %17, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 1, i32 1>
  %23 = shufflevector <2 x i64> %19, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 1, i32 1>
  %24 = shufflevector <2 x i64> %21, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 1, i32 1>
  %25 = bitcast i32* %0 to <8 x i32>*
  %26 = load <8 x i32>, <8 x i32>* %25, align 1
  %27 = getelementptr inbounds i32, i32* %0, i64 8
  %28 = bitcast i32* %27 to <8 x i32>*
  %29 = load <8 x i32>, <8 x i32>* %28, align 1
  %30 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %26, <8 x i32> %29) #4
  %31 = sub <16 x i16> zeroinitializer, %30
  %32 = icmp slt <16 x i16> %30, zeroinitializer
  %33 = select <16 x i1> %32, <16 x i16> %31, <16 x i16> %30
  %34 = bitcast <4 x i64> %22 to <16 x i16>
  %35 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %33, <16 x i16> %34) #4
  %36 = bitcast <4 x i64> %23 to <16 x i16>
  %37 = tail call <16 x i16> @llvm.x86.avx2.pmulh.w(<16 x i16> %35, <16 x i16> %36) #4
  %38 = tail call <16 x i16> @llvm.x86.avx2.psign.w(<16 x i16> %37, <16 x i16> %30) #4
  %39 = tail call <16 x i16> @llvm.x86.avx2.pmulh.w(<16 x i16> %38, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %40 = shufflevector <16 x i16> %38, <16 x i16> %39, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %41 = shufflevector <16 x i16> %38, <16 x i16> %39, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %42 = bitcast i32* %5 to <16 x i16>*
  store <16 x i16> %40, <16 x i16>* %42, align 1
  %43 = getelementptr inbounds i32, i32* %5, i64 8
  %44 = bitcast i32* %43 to <16 x i16>*
  store <16 x i16> %41, <16 x i16>* %44, align 1
  %45 = bitcast <4 x i64> %24 to <16 x i16>
  %46 = mul <16 x i16> %38, %45
  %47 = bitcast <16 x i16> %46 to <4 x i64>
  %48 = tail call <16 x i16> @llvm.x86.avx2.pmulh.w(<16 x i16> %46, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %49 = shufflevector <16 x i16> %46, <16 x i16> %48, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %50 = shufflevector <16 x i16> %46, <16 x i16> %48, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %51 = bitcast i32* %6 to <16 x i16>*
  store <16 x i16> %49, <16 x i16>* %51, align 1
  %52 = getelementptr inbounds i32, i32* %6, i64 8
  %53 = bitcast i32* %52 to <16 x i16>*
  store <16 x i16> %50, <16 x i16>* %53, align 1
  %54 = bitcast i16* %10 to <16 x i16>*
  %55 = load <16 x i16>, <16 x i16>* %54, align 1
  %56 = shufflevector <4 x i64> %47, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %57 = bitcast <4 x i64> %56 to <16 x i16>
  %58 = icmp ne <16 x i16> %57, zeroinitializer
  %59 = sext <16 x i1> %58 to <16 x i16>
  %60 = sub <16 x i16> %55, %59
  %61 = and <16 x i16> %60, %59
  %62 = bitcast <16 x i16> %61 to <4 x i64>
  %63 = sub i64 16, %1
  %64 = shufflevector <2 x i64> %21, <2 x i64> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %65 = bitcast <4 x i64> %64 to <16 x i16>
  %66 = ashr <16 x i16> %65, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %67 = icmp slt i64 %63, 0
  br i1 %67, label %68, label %135

68:                                               ; preds = %11
  %69 = shufflevector <2 x i64> %17, <2 x i64> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %70 = shufflevector <2 x i64> %19, <2 x i64> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %71 = bitcast <4 x i64> %69 to <16 x i16>
  %72 = bitcast <4 x i64> %70 to <16 x i16>
  br label %73

73:                                               ; preds = %68, %130
  %74 = phi i64 [ %63, %68 ], [ %133, %130 ]
  %75 = phi <4 x i64> [ %62, %68 ], [ %132, %130 ]
  %76 = phi <16 x i16> [ %61, %68 ], [ %131, %130 ]
  %77 = getelementptr inbounds i32, i32* %12, i64 %74
  %78 = bitcast i32* %77 to <8 x i32>*
  %79 = load <8 x i32>, <8 x i32>* %78, align 1
  %80 = getelementptr inbounds i32, i32* %77, i64 8
  %81 = bitcast i32* %80 to <8 x i32>*
  %82 = load <8 x i32>, <8 x i32>* %81, align 1
  %83 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %79, <8 x i32> %82) #4
  %84 = sub <16 x i16> zeroinitializer, %83
  %85 = icmp slt <16 x i16> %83, zeroinitializer
  %86 = select <16 x i1> %85, <16 x i16> %84, <16 x i16> %83
  %87 = icmp sgt <16 x i16> %86, %66
  %88 = sext <16 x i1> %87 to <16 x i16>
  %89 = bitcast <16 x i16> %88 to <32 x i8>
  %90 = icmp slt <32 x i8> %89, zeroinitializer
  %91 = bitcast <32 x i1> %90 to i32
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %125, label %93

93:                                               ; preds = %73
  %94 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %86, <16 x i16> %71) #4
  %95 = tail call <16 x i16> @llvm.x86.avx2.pmulh.w(<16 x i16> %94, <16 x i16> %72) #4
  %96 = tail call <16 x i16> @llvm.x86.avx2.psign.w(<16 x i16> %95, <16 x i16> %83) #4
  %97 = getelementptr inbounds i32, i32* %14, i64 %74
  %98 = tail call <16 x i16> @llvm.x86.avx2.pmulh.w(<16 x i16> %96, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %99 = shufflevector <16 x i16> %96, <16 x i16> %98, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %100 = shufflevector <16 x i16> %96, <16 x i16> %98, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %101 = bitcast i32* %97 to <16 x i16>*
  store <16 x i16> %99, <16 x i16>* %101, align 1
  %102 = getelementptr inbounds i32, i32* %97, i64 8
  %103 = bitcast i32* %102 to <16 x i16>*
  store <16 x i16> %100, <16 x i16>* %103, align 1
  %104 = mul <16 x i16> %96, %65
  %105 = bitcast <16 x i16> %104 to <4 x i64>
  %106 = getelementptr inbounds i32, i32* %15, i64 %74
  %107 = tail call <16 x i16> @llvm.x86.avx2.pmulh.w(<16 x i16> %104, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %108 = shufflevector <16 x i16> %104, <16 x i16> %107, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %109 = shufflevector <16 x i16> %104, <16 x i16> %107, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %110 = bitcast i32* %106 to <16 x i16>*
  store <16 x i16> %108, <16 x i16>* %110, align 1
  %111 = getelementptr inbounds i32, i32* %106, i64 8
  %112 = bitcast i32* %111 to <16 x i16>*
  store <16 x i16> %109, <16 x i16>* %112, align 1
  %113 = getelementptr inbounds i16, i16* %13, i64 %74
  %114 = bitcast i16* %113 to <16 x i16>*
  %115 = load <16 x i16>, <16 x i16>* %114, align 1
  %116 = shufflevector <4 x i64> %105, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %117 = bitcast <4 x i64> %116 to <16 x i16>
  %118 = icmp ne <16 x i16> %117, zeroinitializer
  %119 = sext <16 x i1> %118 to <16 x i16>
  %120 = sub <16 x i16> %115, %119
  %121 = and <16 x i16> %120, %119
  %122 = icmp sgt <16 x i16> %76, %121
  %123 = select <16 x i1> %122, <16 x i16> %76, <16 x i16> %121
  %124 = bitcast <16 x i16> %123 to <4 x i64>
  br label %130

125:                                              ; preds = %73
  %126 = getelementptr inbounds i32, i32* %14, i64 %74
  %127 = bitcast i32* %126 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %127, i8 0, i64 64, i1 false) #4
  %128 = getelementptr inbounds i32, i32* %15, i64 %74
  %129 = bitcast i32* %128 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %129, i8 0, i64 64, i1 false) #4
  br label %130

130:                                              ; preds = %125, %93
  %131 = phi <16 x i16> [ %123, %93 ], [ %76, %125 ]
  %132 = phi <4 x i64> [ %124, %93 ], [ %75, %125 ]
  %133 = add nsw i64 %74, 16
  %134 = icmp slt i64 %133, 0
  br i1 %134, label %73, label %135

135:                                              ; preds = %130, %11
  %136 = phi <4 x i64> [ %62, %11 ], [ %132, %130 ]
  %137 = shufflevector <4 x i64> %136, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %138 = shufflevector <4 x i64> %136, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %139 = bitcast <2 x i64> %137 to <8 x i16>
  %140 = bitcast <2 x i64> %138 to <8 x i16>
  %141 = icmp sgt <8 x i16> %139, %140
  %142 = select <8 x i1> %141, <8 x i16> %139, <8 x i16> %140
  %143 = bitcast <8 x i16> %142 to <4 x i32>
  %144 = shufflevector <4 x i32> %143, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 0>
  %145 = bitcast <4 x i32> %144 to <8 x i16>
  %146 = icmp sgt <8 x i16> %142, %145
  %147 = select <8 x i1> %146, <8 x i16> %142, <8 x i16> %145
  %148 = shufflevector <8 x i16> %147, <8 x i16> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 0, i32 4, i32 5, i32 6, i32 7>
  %149 = icmp sgt <8 x i16> %147, %148
  %150 = select <8 x i1> %149, <8 x i16> %147, <8 x i16> %148
  %151 = shufflevector <8 x i16> %150, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 0, i32 0, i32 4, i32 5, i32 6, i32 7>
  %152 = icmp sgt <8 x i16> %150, %151
  %153 = select <8 x i1> %152, <8 x i16> %150, <8 x i16> %151
  %154 = extractelement <8 x i16> %153, i64 1
  store i16 %154, i16* %8, align 2
  ret void
}

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32>, <8 x i32>) #1

; Function Attrs: nounwind readnone speculatable
declare <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16>, <16 x i16>) #2

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.pmulh.w(<16 x i16>, <16 x i16>) #1

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.psign.w(<16 x i16>, <16 x i16>) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
