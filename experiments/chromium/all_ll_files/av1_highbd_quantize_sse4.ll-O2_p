; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/x86/av1_highbd_quantize_sse4.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/x86/av1_highbd_quantize_sse4.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_highbd_quantize_fp_sse4_1(i32* nocapture readonly, i64, i16* nocapture readnone, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readnone, i32* nocapture, i32* nocapture, i16* nocapture readonly, i16* nocapture, i16* nocapture readnone, i16* nocapture readonly, i32) local_unnamed_addr #0 {
  %14 = sub nsw i32 16, %12
  %15 = bitcast i32* %6 to i8*
  %16 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %15, i8 0, i64 %16, i1 false)
  %17 = bitcast i32* %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %16, i1 false)
  %18 = bitcast i32* %0 to <4 x i32>*
  %19 = load <4 x i32>, <4 x i32>* %18, align 1
  %20 = getelementptr inbounds i16, i16* %3, i64 1
  %21 = load i16, i16* %20, align 2
  %22 = sext i16 %21 to i32
  %23 = shl i32 1, %12
  %24 = ashr i32 %23, 1
  %25 = add nsw i32 %24, %22
  %26 = ashr i32 %25, %12
  %27 = load i16, i16* %3, align 2
  %28 = sext i16 %27 to i32
  %29 = add nsw i32 %24, %28
  %30 = ashr i32 %29, %12
  %31 = insertelement <4 x i32> undef, i32 %30, i32 0
  %32 = insertelement <4 x i32> %31, i32 %26, i32 1
  %33 = insertelement <4 x i32> %32, i32 %26, i32 2
  %34 = insertelement <4 x i32> %33, i32 %26, i32 3
  %35 = bitcast <4 x i32> %34 to <2 x i64>
  %36 = bitcast i16* %4 to <2 x i16>*
  %37 = load <2 x i16>, <2 x i16>* %36, align 2
  %38 = sext <2 x i16> %37 to <2 x i64>
  %39 = and <2 x i64> %38, <i64 undef, i64 4294967295>
  %40 = getelementptr inbounds i16, i16* %8, i64 1
  %41 = load i16, i16* %40, align 2
  %42 = sext i16 %41 to i32
  %43 = load i16, i16* %8, align 2
  %44 = sext i16 %43 to i32
  %45 = zext i32 %42 to i64
  %46 = zext i32 %44 to i64
  %47 = insertelement <2 x i64> undef, i64 %46, i32 0
  %48 = insertelement <2 x i64> %47, i64 %45, i32 1
  %49 = insertelement <4 x i32> undef, i32 %44, i32 0
  %50 = insertelement <4 x i32> %49, i32 %42, i32 1
  %51 = insertelement <4 x i32> %50, i32 %42, i32 2
  %52 = insertelement <4 x i32> %51, i32 %42, i32 3
  %53 = ashr <4 x i32> %19, <i32 31, i32 31, i32 31, i32 31>
  %54 = sub <4 x i32> zeroinitializer, %19
  %55 = icmp slt <4 x i32> %19, zeroinitializer
  %56 = select <4 x i1> %55, <4 x i32> %54, <4 x i32> %19
  %57 = add <4 x i32> %34, %56
  %58 = shufflevector <4 x i32> %57, <4 x i32> <i32 undef, i32 undef, i32 0, i32 0>, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %59 = bitcast <4 x i32> %58 to <2 x i64>
  %60 = shufflevector <4 x i32> %57, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %61 = bitcast <4 x i32> %60 to <2 x i64>
  %62 = shl <2 x i64> %61, <i64 32, i64 32>
  %63 = ashr exact <2 x i64> %62, <i64 32, i64 32>
  %64 = mul nsw <2 x i64> %63, %38
  %65 = tail call <2 x i64> @llvm.x86.sse2.psrli.q(<2 x i64> %64, i32 %14) #3
  %66 = shl <2 x i64> %65, <i64 32, i64 32>
  %67 = ashr exact <2 x i64> %66, <i64 32, i64 32>
  %68 = shl <2 x i64> %48, <i64 32, i64 32>
  %69 = ashr exact <2 x i64> %68, <i64 32, i64 32>
  %70 = mul nsw <2 x i64> %69, %67
  %71 = tail call <2 x i64> @llvm.x86.sse2.psrli.q(<2 x i64> %70, i32 %12) #3
  %72 = add nsw i32 %12, 1
  %73 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %56, i32 %72) #3
  %74 = icmp sgt <4 x i32> %52, %73
  %75 = sext <4 x i1> %74 to <4 x i32>
  %76 = bitcast <4 x i32> %75 to <2 x i64>
  %77 = shufflevector <2 x i64> %35, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %78 = insertelement <2 x i64> undef, i64 %45, i32 0
  %79 = insertelement <4 x i32> undef, i32 %42, i32 0
  %80 = shufflevector <4 x i32> %79, <4 x i32> undef, <4 x i32> zeroinitializer
  %81 = shl <2 x i64> %59, <i64 32, i64 32>
  %82 = ashr exact <2 x i64> %81, <i64 32, i64 32>
  %83 = shl <2 x i64> %39, <i64 0, i64 32>
  %84 = ashr exact <2 x i64> %83, <i64 0, i64 32>
  %85 = shufflevector <2 x i64> %84, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %86 = mul nsw <2 x i64> %82, %85
  %87 = tail call <2 x i64> @llvm.x86.sse2.psrli.q(<2 x i64> %86, i32 %14) #3
  %88 = shl <2 x i64> %87, <i64 32, i64 32>
  %89 = ashr exact <2 x i64> %88, <i64 32, i64 32>
  %90 = shl <2 x i64> %78, <i64 32, i64 0>
  %91 = ashr exact <2 x i64> %90, <i64 32, i64 0>
  %92 = shufflevector <2 x i64> %91, <2 x i64> undef, <2 x i32> zeroinitializer
  %93 = mul nsw <2 x i64> %89, %92
  %94 = tail call <2 x i64> @llvm.x86.sse2.psrli.q(<2 x i64> %93, i32 %12) #3
  %95 = bitcast <2 x i64> %65 to <4 x i32>
  %96 = shufflevector <4 x i32> %95, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 undef, i32 undef>
  %97 = bitcast <2 x i64> %87 to <4 x i32>
  %98 = shufflevector <4 x i32> %97, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 2>
  %99 = bitcast <4 x i32> %96 to <2 x i64>
  %100 = bitcast <4 x i32> %98 to <2 x i64>
  %101 = bitcast <2 x i64> %71 to <4 x i32>
  %102 = shufflevector <4 x i32> %101, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 undef, i32 undef>
  %103 = bitcast <2 x i64> %94 to <4 x i32>
  %104 = shufflevector <4 x i32> %103, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 2>
  %105 = bitcast <4 x i32> %102 to <2 x i64>
  %106 = bitcast <4 x i32> %104 to <2 x i64>
  %107 = shufflevector <2 x i64> %99, <2 x i64> %100, <2 x i32> <i32 0, i32 3>
  %108 = shufflevector <2 x i64> %105, <2 x i64> %106, <2 x i32> <i32 0, i32 3>
  %109 = bitcast <2 x i64> %107 to <4 x i32>
  %110 = or <4 x i32> %53, <i32 1, i32 1, i32 1, i32 1>
  %111 = tail call <4 x i32> @llvm.x86.ssse3.psign.d.128(<4 x i32> %109, <4 x i32> %110) #3
  %112 = bitcast <4 x i32> %111 to <2 x i64>
  %113 = bitcast <2 x i64> %108 to <4 x i32>
  %114 = tail call <4 x i32> @llvm.x86.ssse3.psign.d.128(<4 x i32> %113, <4 x i32> %110) #3
  %115 = bitcast <4 x i32> %114 to <2 x i64>
  %116 = xor <2 x i64> %76, <i64 -1, i64 -1>
  %117 = and <2 x i64> %116, %112
  %118 = and <2 x i64> %115, %116
  %119 = bitcast i32* %6 to <2 x i64>*
  store <2 x i64> %117, <2 x i64>* %119, align 1
  %120 = bitcast i32* %7 to <2 x i64>*
  store <2 x i64> %118, <2 x i64>* %120, align 1
  %121 = getelementptr inbounds i32, i32* %0, i64 4
  %122 = bitcast i32* %121 to <4 x i32>*
  %123 = load <4 x i32>, <4 x i32>* %122, align 1
  %124 = ashr <4 x i32> %123, <i32 31, i32 31, i32 31, i32 31>
  %125 = sub <4 x i32> zeroinitializer, %123
  %126 = icmp slt <4 x i32> %123, zeroinitializer
  %127 = select <4 x i1> %126, <4 x i32> %125, <4 x i32> %123
  %128 = bitcast <2 x i64> %77 to <4 x i32>
  %129 = add <4 x i32> %127, %128
  %130 = shufflevector <4 x i32> %129, <4 x i32> <i32 undef, i32 undef, i32 0, i32 0>, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %131 = bitcast <4 x i32> %130 to <2 x i64>
  %132 = shufflevector <4 x i32> %129, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %133 = bitcast <4 x i32> %132 to <2 x i64>
  %134 = shl <2 x i64> %133, <i64 32, i64 32>
  %135 = ashr exact <2 x i64> %134, <i64 32, i64 32>
  %136 = mul nsw <2 x i64> %135, %85
  %137 = tail call <2 x i64> @llvm.x86.sse2.psrli.q(<2 x i64> %136, i32 %14) #3
  %138 = shl <2 x i64> %137, <i64 32, i64 32>
  %139 = ashr exact <2 x i64> %138, <i64 32, i64 32>
  %140 = mul nsw <2 x i64> %139, %92
  %141 = tail call <2 x i64> @llvm.x86.sse2.psrli.q(<2 x i64> %140, i32 %12) #3
  %142 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %127, i32 %72) #3
  %143 = icmp sgt <4 x i32> %80, %142
  %144 = sext <4 x i1> %143 to <4 x i32>
  %145 = bitcast <4 x i32> %144 to <2 x i64>
  %146 = getelementptr inbounds i32, i32* %6, i64 4
  %147 = getelementptr inbounds i32, i32* %7, i64 4
  %148 = shl <2 x i64> %131, <i64 32, i64 32>
  %149 = ashr exact <2 x i64> %148, <i64 32, i64 32>
  %150 = mul nsw <2 x i64> %149, %85
  %151 = tail call <2 x i64> @llvm.x86.sse2.psrli.q(<2 x i64> %150, i32 %14) #3
  %152 = shl <2 x i64> %151, <i64 32, i64 32>
  %153 = ashr exact <2 x i64> %152, <i64 32, i64 32>
  %154 = mul nsw <2 x i64> %153, %92
  %155 = tail call <2 x i64> @llvm.x86.sse2.psrli.q(<2 x i64> %154, i32 %12) #3
  %156 = bitcast <2 x i64> %137 to <4 x i32>
  %157 = shufflevector <4 x i32> %156, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 undef, i32 undef>
  %158 = bitcast <2 x i64> %151 to <4 x i32>
  %159 = shufflevector <4 x i32> %158, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 2>
  %160 = bitcast <4 x i32> %157 to <2 x i64>
  %161 = bitcast <4 x i32> %159 to <2 x i64>
  %162 = bitcast <2 x i64> %141 to <4 x i32>
  %163 = shufflevector <4 x i32> %162, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 undef, i32 undef>
  %164 = bitcast <2 x i64> %155 to <4 x i32>
  %165 = shufflevector <4 x i32> %164, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 2>
  %166 = bitcast <4 x i32> %163 to <2 x i64>
  %167 = bitcast <4 x i32> %165 to <2 x i64>
  %168 = shufflevector <2 x i64> %160, <2 x i64> %161, <2 x i32> <i32 0, i32 3>
  %169 = shufflevector <2 x i64> %166, <2 x i64> %167, <2 x i32> <i32 0, i32 3>
  %170 = bitcast <2 x i64> %168 to <4 x i32>
  %171 = or <4 x i32> %124, <i32 1, i32 1, i32 1, i32 1>
  %172 = tail call <4 x i32> @llvm.x86.ssse3.psign.d.128(<4 x i32> %170, <4 x i32> %171) #3
  %173 = bitcast <4 x i32> %172 to <2 x i64>
  %174 = bitcast <2 x i64> %169 to <4 x i32>
  %175 = tail call <4 x i32> @llvm.x86.ssse3.psign.d.128(<4 x i32> %174, <4 x i32> %171) #3
  %176 = bitcast <4 x i32> %175 to <2 x i64>
  %177 = xor <2 x i64> %145, <i64 -1, i64 -1>
  %178 = and <2 x i64> %173, %177
  %179 = and <2 x i64> %176, %177
  %180 = bitcast i32* %146 to <2 x i64>*
  store <2 x i64> %178, <2 x i64>* %180, align 1
  %181 = bitcast i32* %147 to <2 x i64>*
  store <2 x i64> %179, <2 x i64>* %181, align 1
  %182 = bitcast i32* %6 to <4 x i32>*
  %183 = load <4 x i32>, <4 x i32>* %182, align 1
  %184 = bitcast i32* %146 to <4 x i32>*
  %185 = load <4 x i32>, <4 x i32>* %184, align 1
  %186 = icmp ne <4 x i32> %183, zeroinitializer
  %187 = icmp ne <4 x i32> %185, zeroinitializer
  %188 = sext <4 x i1> %186 to <4 x i32>
  %189 = sext <4 x i1> %187 to <4 x i32>
  %190 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %188, <4 x i32> %189) #3
  %191 = bitcast i16* %11 to <8 x i16>*
  %192 = load <8 x i16>, <8 x i16>* %191, align 1
  %193 = sub <8 x i16> %192, %190
  %194 = and <8 x i16> %193, %190
  %195 = icmp sgt <8 x i16> %194, zeroinitializer
  %196 = select <8 x i1> %195, <8 x i16> %194, <8 x i16> zeroinitializer
  %197 = add nsw i64 %1, -8
  %198 = icmp sgt i64 %197, 0
  br i1 %198, label %199, label %344

199:                                              ; preds = %13, %199
  %200 = phi i64 [ %342, %199 ], [ %197, %13 ]
  %201 = phi i16* [ %209, %199 ], [ %11, %13 ]
  %202 = phi i32* [ %206, %199 ], [ %0, %13 ]
  %203 = phi i32* [ %207, %199 ], [ %6, %13 ]
  %204 = phi i32* [ %208, %199 ], [ %7, %13 ]
  %205 = phi <8 x i16> [ %341, %199 ], [ %196, %13 ]
  %206 = getelementptr inbounds i32, i32* %202, i64 8
  %207 = getelementptr inbounds i32, i32* %203, i64 8
  %208 = getelementptr inbounds i32, i32* %204, i64 8
  %209 = getelementptr inbounds i16, i16* %201, i64 8
  %210 = bitcast i32* %206 to <4 x i32>*
  %211 = load <4 x i32>, <4 x i32>* %210, align 1
  %212 = getelementptr inbounds i32, i32* %202, i64 12
  %213 = bitcast i32* %212 to <4 x i32>*
  %214 = load <4 x i32>, <4 x i32>* %213, align 1
  %215 = ashr <4 x i32> %211, <i32 31, i32 31, i32 31, i32 31>
  %216 = sub <4 x i32> zeroinitializer, %211
  %217 = icmp slt <4 x i32> %211, zeroinitializer
  %218 = select <4 x i1> %217, <4 x i32> %216, <4 x i32> %211
  %219 = add <4 x i32> %218, %128
  %220 = shufflevector <4 x i32> %219, <4 x i32> <i32 undef, i32 undef, i32 0, i32 0>, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %221 = bitcast <4 x i32> %220 to <2 x i64>
  %222 = shufflevector <4 x i32> %219, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %223 = bitcast <4 x i32> %222 to <2 x i64>
  %224 = shl <2 x i64> %223, <i64 32, i64 32>
  %225 = ashr exact <2 x i64> %224, <i64 32, i64 32>
  %226 = mul nsw <2 x i64> %225, %85
  %227 = tail call <2 x i64> @llvm.x86.sse2.psrli.q(<2 x i64> %226, i32 %14) #3
  %228 = shl <2 x i64> %227, <i64 32, i64 32>
  %229 = ashr exact <2 x i64> %228, <i64 32, i64 32>
  %230 = mul nsw <2 x i64> %229, %92
  %231 = tail call <2 x i64> @llvm.x86.sse2.psrli.q(<2 x i64> %230, i32 %12) #3
  %232 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %218, i32 %72) #3
  %233 = icmp sgt <4 x i32> %80, %232
  %234 = sext <4 x i1> %233 to <4 x i32>
  %235 = bitcast <4 x i32> %234 to <2 x i64>
  %236 = shl <2 x i64> %221, <i64 32, i64 32>
  %237 = ashr exact <2 x i64> %236, <i64 32, i64 32>
  %238 = mul nsw <2 x i64> %237, %85
  %239 = tail call <2 x i64> @llvm.x86.sse2.psrli.q(<2 x i64> %238, i32 %14) #3
  %240 = shl <2 x i64> %239, <i64 32, i64 32>
  %241 = ashr exact <2 x i64> %240, <i64 32, i64 32>
  %242 = mul nsw <2 x i64> %241, %92
  %243 = tail call <2 x i64> @llvm.x86.sse2.psrli.q(<2 x i64> %242, i32 %12) #3
  %244 = bitcast <2 x i64> %227 to <4 x i32>
  %245 = shufflevector <4 x i32> %244, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 undef, i32 undef>
  %246 = bitcast <2 x i64> %239 to <4 x i32>
  %247 = shufflevector <4 x i32> %246, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 2>
  %248 = bitcast <4 x i32> %245 to <2 x i64>
  %249 = bitcast <4 x i32> %247 to <2 x i64>
  %250 = bitcast <2 x i64> %231 to <4 x i32>
  %251 = shufflevector <4 x i32> %250, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 undef, i32 undef>
  %252 = bitcast <2 x i64> %243 to <4 x i32>
  %253 = shufflevector <4 x i32> %252, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 2>
  %254 = bitcast <4 x i32> %251 to <2 x i64>
  %255 = bitcast <4 x i32> %253 to <2 x i64>
  %256 = shufflevector <2 x i64> %248, <2 x i64> %249, <2 x i32> <i32 0, i32 3>
  %257 = shufflevector <2 x i64> %254, <2 x i64> %255, <2 x i32> <i32 0, i32 3>
  %258 = bitcast <2 x i64> %256 to <4 x i32>
  %259 = or <4 x i32> %215, <i32 1, i32 1, i32 1, i32 1>
  %260 = tail call <4 x i32> @llvm.x86.ssse3.psign.d.128(<4 x i32> %258, <4 x i32> %259) #3
  %261 = bitcast <4 x i32> %260 to <2 x i64>
  %262 = bitcast <2 x i64> %257 to <4 x i32>
  %263 = tail call <4 x i32> @llvm.x86.ssse3.psign.d.128(<4 x i32> %262, <4 x i32> %259) #3
  %264 = bitcast <4 x i32> %263 to <2 x i64>
  %265 = xor <2 x i64> %235, <i64 -1, i64 -1>
  %266 = and <2 x i64> %261, %265
  %267 = and <2 x i64> %264, %265
  %268 = bitcast i32* %207 to <2 x i64>*
  store <2 x i64> %266, <2 x i64>* %268, align 1
  %269 = bitcast i32* %208 to <2 x i64>*
  store <2 x i64> %267, <2 x i64>* %269, align 1
  %270 = ashr <4 x i32> %214, <i32 31, i32 31, i32 31, i32 31>
  %271 = sub <4 x i32> zeroinitializer, %214
  %272 = icmp slt <4 x i32> %214, zeroinitializer
  %273 = select <4 x i1> %272, <4 x i32> %271, <4 x i32> %214
  %274 = add <4 x i32> %273, %128
  %275 = shufflevector <4 x i32> %274, <4 x i32> <i32 undef, i32 undef, i32 0, i32 0>, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %276 = bitcast <4 x i32> %275 to <2 x i64>
  %277 = shufflevector <4 x i32> %274, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %278 = bitcast <4 x i32> %277 to <2 x i64>
  %279 = shl <2 x i64> %278, <i64 32, i64 32>
  %280 = ashr exact <2 x i64> %279, <i64 32, i64 32>
  %281 = mul nsw <2 x i64> %280, %85
  %282 = tail call <2 x i64> @llvm.x86.sse2.psrli.q(<2 x i64> %281, i32 %14) #3
  %283 = shl <2 x i64> %282, <i64 32, i64 32>
  %284 = ashr exact <2 x i64> %283, <i64 32, i64 32>
  %285 = mul nsw <2 x i64> %284, %92
  %286 = tail call <2 x i64> @llvm.x86.sse2.psrli.q(<2 x i64> %285, i32 %12) #3
  %287 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %273, i32 %72) #3
  %288 = icmp sgt <4 x i32> %80, %287
  %289 = sext <4 x i1> %288 to <4 x i32>
  %290 = bitcast <4 x i32> %289 to <2 x i64>
  %291 = getelementptr inbounds i32, i32* %203, i64 12
  %292 = getelementptr inbounds i32, i32* %204, i64 12
  %293 = shl <2 x i64> %276, <i64 32, i64 32>
  %294 = ashr exact <2 x i64> %293, <i64 32, i64 32>
  %295 = mul nsw <2 x i64> %294, %85
  %296 = tail call <2 x i64> @llvm.x86.sse2.psrli.q(<2 x i64> %295, i32 %14) #3
  %297 = shl <2 x i64> %296, <i64 32, i64 32>
  %298 = ashr exact <2 x i64> %297, <i64 32, i64 32>
  %299 = mul nsw <2 x i64> %298, %92
  %300 = tail call <2 x i64> @llvm.x86.sse2.psrli.q(<2 x i64> %299, i32 %12) #3
  %301 = bitcast <2 x i64> %282 to <4 x i32>
  %302 = shufflevector <4 x i32> %301, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 undef, i32 undef>
  %303 = bitcast <2 x i64> %296 to <4 x i32>
  %304 = shufflevector <4 x i32> %303, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 2>
  %305 = bitcast <4 x i32> %302 to <2 x i64>
  %306 = bitcast <4 x i32> %304 to <2 x i64>
  %307 = bitcast <2 x i64> %286 to <4 x i32>
  %308 = shufflevector <4 x i32> %307, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 undef, i32 undef>
  %309 = bitcast <2 x i64> %300 to <4 x i32>
  %310 = shufflevector <4 x i32> %309, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 2>
  %311 = bitcast <4 x i32> %308 to <2 x i64>
  %312 = bitcast <4 x i32> %310 to <2 x i64>
  %313 = shufflevector <2 x i64> %305, <2 x i64> %306, <2 x i32> <i32 0, i32 3>
  %314 = shufflevector <2 x i64> %311, <2 x i64> %312, <2 x i32> <i32 0, i32 3>
  %315 = bitcast <2 x i64> %313 to <4 x i32>
  %316 = or <4 x i32> %270, <i32 1, i32 1, i32 1, i32 1>
  %317 = tail call <4 x i32> @llvm.x86.ssse3.psign.d.128(<4 x i32> %315, <4 x i32> %316) #3
  %318 = bitcast <4 x i32> %317 to <2 x i64>
  %319 = bitcast <2 x i64> %314 to <4 x i32>
  %320 = tail call <4 x i32> @llvm.x86.ssse3.psign.d.128(<4 x i32> %319, <4 x i32> %316) #3
  %321 = bitcast <4 x i32> %320 to <2 x i64>
  %322 = xor <2 x i64> %290, <i64 -1, i64 -1>
  %323 = and <2 x i64> %318, %322
  %324 = and <2 x i64> %321, %322
  %325 = bitcast i32* %291 to <2 x i64>*
  store <2 x i64> %323, <2 x i64>* %325, align 1
  %326 = bitcast i32* %292 to <2 x i64>*
  store <2 x i64> %324, <2 x i64>* %326, align 1
  %327 = bitcast i32* %207 to <4 x i32>*
  %328 = load <4 x i32>, <4 x i32>* %327, align 1
  %329 = bitcast i32* %291 to <4 x i32>*
  %330 = load <4 x i32>, <4 x i32>* %329, align 1
  %331 = icmp ne <4 x i32> %328, zeroinitializer
  %332 = icmp ne <4 x i32> %330, zeroinitializer
  %333 = sext <4 x i1> %331 to <4 x i32>
  %334 = sext <4 x i1> %332 to <4 x i32>
  %335 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %333, <4 x i32> %334) #3
  %336 = bitcast i16* %209 to <8 x i16>*
  %337 = load <8 x i16>, <8 x i16>* %336, align 1
  %338 = sub <8 x i16> %337, %335
  %339 = and <8 x i16> %338, %335
  %340 = icmp sgt <8 x i16> %205, %339
  %341 = select <8 x i1> %340, <8 x i16> %205, <8 x i16> %339
  %342 = add nsw i64 %200, -8
  %343 = icmp sgt i64 %342, 0
  br i1 %343, label %199, label %344

344:                                              ; preds = %199, %13
  %345 = phi <8 x i16> [ %196, %13 ], [ %341, %199 ]
  %346 = bitcast <8 x i16> %345 to <4 x i32>
  %347 = shufflevector <4 x i32> %346, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 0>
  %348 = bitcast <4 x i32> %347 to <8 x i16>
  %349 = icmp sgt <8 x i16> %345, %348
  %350 = select <8 x i1> %349, <8 x i16> %345, <8 x i16> %348
  %351 = shufflevector <8 x i16> %350, <8 x i16> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 0, i32 4, i32 5, i32 6, i32 7>
  %352 = icmp sgt <8 x i16> %350, %351
  %353 = select <8 x i1> %352, <8 x i16> %350, <8 x i16> %351
  %354 = shufflevector <8 x i16> %353, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 0, i32 0, i32 4, i32 5, i32 6, i32 7>
  %355 = icmp sgt <8 x i16> %353, %354
  %356 = select <8 x i1> %355, <8 x i16> %353, <8 x i16> %354
  %357 = extractelement <8 x i16> %356, i64 0
  store i16 %357, i16* %9, align 2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind readnone
declare <2 x i64> @llvm.x86.sse2.psrli.q(<2 x i64>, i32) #2

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32>, i32) #2

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.ssse3.psign.d.128(<4 x i32>, <4 x i32>) #2

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
