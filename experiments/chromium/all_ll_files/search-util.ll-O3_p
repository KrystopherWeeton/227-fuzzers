; ModuleID = '../../v8/src/inspector/search-util.cc'
source_filename = "../../v8/src/inspector/search-util.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.v8_inspector::protocol::Debugger::SearchMatch"* }
%"class.v8_inspector::protocol::Debugger::SearchMatch" = type { %"class.v8_crdtp::ProtocolObject", %"class.v8_inspector::protocol::Debugger::API::SearchMatch", double, %"class.v8_inspector::String16" }
%"class.v8_crdtp::ProtocolObject" = type { %"class.v8_crdtp::Serializable" }
%"class.v8_crdtp::Serializable" = type { i32 (...)** }
%"class.v8_inspector::protocol::Debugger::API::SearchMatch" = type { %"class.v8_inspector::protocol::Exported" }
%"class.v8_inspector::protocol::Exported" = type { i32 (...)** }
%"class.v8_inspector::String16" = type { %"class.std::__1::basic_string", i64 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__rep" }
%"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__long" }
%"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__long" = type { i16*, i64, i64 }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.std::__1::unique_ptr"* }
%"class.v8_inspector::V8InspectorSession" = type { i32 (...)** }
%"struct.std::__1::pair.424" = type { i32, %"class.v8_inspector::String16" }
%"class.v8_inspector::String16Builder" = type { %"class.std::__1::vector.430" }
%"class.std::__1::vector.430" = type { %"class.std::__1::__vector_base.431" }
%"class.std::__1::__vector_base.431" = type { i16*, i16*, %"class.std::__1::__compressed_pair.432" }
%"class.std::__1::__compressed_pair.432" = type { %"struct.std::__1::__compressed_pair_elem.433" }
%"struct.std::__1::__compressed_pair_elem.433" = type { i16* }
%"class.std::__1::vector.422" = type { %"class.std::__1::__vector_base.423" }
%"class.std::__1::__vector_base.423" = type { %"struct.std::__1::pair.424"*, %"struct.std::__1::pair.424"*, %"class.std::__1::__compressed_pair.425" }
%"class.std::__1::__compressed_pair.425" = type { %"struct.std::__1::__compressed_pair_elem.426" }
%"struct.std::__1::__compressed_pair_elem.426" = type { %"struct.std::__1::pair.424"* }
%"class.v8_inspector::V8InspectorImpl" = type { %"class.v8_inspector::V8Inspector", %"class.v8::Isolate"*, %"class.v8_inspector::V8InspectorClient"*, %"class.std::__1::unique_ptr.12", %"class.v8::Global", i32, i32, i32, i32, i64, %"class.std::__1::unordered_map.179", %"class.std::__1::unordered_map.203", %"class.std::__1::unordered_map.227", %"class.std::__1::unordered_map.251", %"class.std::__1::unordered_map.179", %"class.std::__1::map", %"class.std::__1::unique_ptr.283", %"class.v8_inspector::V8Inspector::Counters"* }
%"class.v8_inspector::V8Inspector" = type { i32 (...)** }
%"class.v8::Isolate" = type { i8 }
%"class.v8_inspector::V8InspectorClient" = type { i32 (...)** }
%"class.std::__1::unique_ptr.12" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"class.v8_inspector::V8Debugger"* }
%"class.v8_inspector::V8Debugger" = type { %"class.v8::debug::DebugDelegate", %"class.v8::debug::AsyncEventDelegate", %"class.v8::Isolate"*, %"class.v8_inspector::V8InspectorImpl"*, i32, i32, i32, i64, i8, i8, i32, i32, i32, %"class.v8_inspector::String16", %"class.std::__1::unique_ptr.15", %"class.std::__1::unordered_map", %"class.std::__1::unordered_set", i32, i32, %"class.std::__1::vector.61", %"class.std::__1::vector.68", %"class.std::__1::vector.75", i32, %"class.std::__1::list", %"class.std::__1::unordered_map.86", i8*, i8, i8, i8, i32, i8, [7 x i8], %"class.std::__1::unordered_map.114", i64, %"class.std::__1::unordered_map.142", %"class.std::__1::unique_ptr.170" }
%"class.v8::debug::DebugDelegate" = type { i32 (...)** }
%"class.v8::debug::AsyncEventDelegate" = type { i32 (...)** }
%"class.std::__1::unique_ptr.15" = type { %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"class.v8_inspector::V8StackTraceImpl"* }
%"class.v8_inspector::V8StackTraceImpl" = type opaque
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.21", %"class.std::__1::__compressed_pair.30", %"class.std::__1::__compressed_pair.35", %"class.std::__1::__compressed_pair.37", [4 x i8] }>
%"class.std::__1::unique_ptr.21" = type { %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23", %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { i64 }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { float }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table.40" }
%"class.std::__1::__hash_table.40" = type <{ %"class.std::__1::unique_ptr.41", %"class.std::__1::__compressed_pair.51", %"class.std::__1::__compressed_pair.56", %"class.std::__1::__compressed_pair.58", [4 x i8] }>
%"class.std::__1::unique_ptr.41" = type { %"class.std::__1::__compressed_pair.42" }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43", %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %"struct.std::__1::__hash_node_base.44"** }
%"struct.std::__1::__hash_node_base.44" = type { %"struct.std::__1::__hash_node_base.44"* }
%"struct.std::__1::__compressed_pair_elem.45" = type { %"class.std::__1::__bucket_list_deallocator.46" }
%"class.std::__1::__bucket_list_deallocator.46" = type { %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { %"struct.std::__1::__hash_node_base.44" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"class.std::__1::__compressed_pair.58" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"class.std::__1::vector.61" = type { %"class.std::__1::__vector_base.62" }
%"class.std::__1::__vector_base.62" = type { i8**, i8**, %"class.std::__1::__compressed_pair.63" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"struct.std::__1::__compressed_pair_elem.64" = type { i8** }
%"class.std::__1::vector.68" = type { %"class.std::__1::__vector_base.69" }
%"class.std::__1::__vector_base.69" = type { %"class.std::__1::shared_ptr"*, %"class.std::__1::shared_ptr"*, %"class.std::__1::__compressed_pair.70" }
%"class.std::__1::shared_ptr" = type opaque
%"class.std::__1::__compressed_pair.70" = type { %"struct.std::__1::__compressed_pair_elem.71" }
%"struct.std::__1::__compressed_pair_elem.71" = type { %"class.std::__1::shared_ptr"* }
%"class.std::__1::vector.75" = type { %"class.std::__1::__vector_base.76" }
%"class.std::__1::__vector_base.76" = type { %"struct.v8_inspector::V8StackTraceId"*, %"struct.v8_inspector::V8StackTraceId"*, %"class.std::__1::__compressed_pair.77" }
%"struct.v8_inspector::V8StackTraceId" = type <{ i64, %"struct.std::__1::pair", i8, [7 x i8] }>
%"struct.std::__1::pair" = type { i64, i64 }
%"class.std::__1::__compressed_pair.77" = type { %"struct.std::__1::__compressed_pair_elem.78" }
%"struct.std::__1::__compressed_pair_elem.78" = type { %"struct.v8_inspector::V8StackTraceId"* }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.82" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.82" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"class.std::__1::unordered_map.86" = type { %"class.std::__1::__hash_table.87" }
%"class.std::__1::__hash_table.87" = type <{ %"class.std::__1::unique_ptr.88", %"class.std::__1::__compressed_pair.98", %"class.std::__1::__compressed_pair.103", %"class.std::__1::__compressed_pair.108", [4 x i8] }>
%"class.std::__1::unique_ptr.88" = type { %"class.std::__1::__compressed_pair.89" }
%"class.std::__1::__compressed_pair.89" = type { %"struct.std::__1::__compressed_pair_elem.90", %"struct.std::__1::__compressed_pair_elem.92" }
%"struct.std::__1::__compressed_pair_elem.90" = type { %"struct.std::__1::__hash_node_base.91"** }
%"struct.std::__1::__hash_node_base.91" = type { %"struct.std::__1::__hash_node_base.91"* }
%"struct.std::__1::__compressed_pair_elem.92" = type { %"class.std::__1::__bucket_list_deallocator.93" }
%"class.std::__1::__bucket_list_deallocator.93" = type { %"class.std::__1::__compressed_pair.94" }
%"class.std::__1::__compressed_pair.94" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"class.std::__1::__compressed_pair.98" = type { %"struct.std::__1::__compressed_pair_elem.99" }
%"struct.std::__1::__compressed_pair_elem.99" = type { %"struct.std::__1::__hash_node_base.91" }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"class.std::__1::__compressed_pair.108" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"class.std::__1::unordered_map.114" = type { %"class.std::__1::__hash_table.115" }
%"class.std::__1::__hash_table.115" = type <{ %"class.std::__1::unique_ptr.116", %"class.std::__1::__compressed_pair.126", %"class.std::__1::__compressed_pair.131", %"class.std::__1::__compressed_pair.136", [4 x i8] }>
%"class.std::__1::unique_ptr.116" = type { %"class.std::__1::__compressed_pair.117" }
%"class.std::__1::__compressed_pair.117" = type { %"struct.std::__1::__compressed_pair_elem.118", %"struct.std::__1::__compressed_pair_elem.120" }
%"struct.std::__1::__compressed_pair_elem.118" = type { %"struct.std::__1::__hash_node_base.119"** }
%"struct.std::__1::__hash_node_base.119" = type { %"struct.std::__1::__hash_node_base.119"* }
%"struct.std::__1::__compressed_pair_elem.120" = type { %"class.std::__1::__bucket_list_deallocator.121" }
%"class.std::__1::__bucket_list_deallocator.121" = type { %"class.std::__1::__compressed_pair.122" }
%"class.std::__1::__compressed_pair.122" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"class.std::__1::__compressed_pair.126" = type { %"struct.std::__1::__compressed_pair_elem.127" }
%"struct.std::__1::__compressed_pair_elem.127" = type { %"struct.std::__1::__hash_node_base.119" }
%"class.std::__1::__compressed_pair.131" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"class.std::__1::__compressed_pair.136" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"class.std::__1::unordered_map.142" = type { %"class.std::__1::__hash_table.143" }
%"class.std::__1::__hash_table.143" = type <{ %"class.std::__1::unique_ptr.144", %"class.std::__1::__compressed_pair.154", %"class.std::__1::__compressed_pair.159", %"class.std::__1::__compressed_pair.164", [4 x i8] }>
%"class.std::__1::unique_ptr.144" = type { %"class.std::__1::__compressed_pair.145" }
%"class.std::__1::__compressed_pair.145" = type { %"struct.std::__1::__compressed_pair_elem.146", %"struct.std::__1::__compressed_pair_elem.148" }
%"struct.std::__1::__compressed_pair_elem.146" = type { %"struct.std::__1::__hash_node_base.147"** }
%"struct.std::__1::__hash_node_base.147" = type { %"struct.std::__1::__hash_node_base.147"* }
%"struct.std::__1::__compressed_pair_elem.148" = type { %"class.std::__1::__bucket_list_deallocator.149" }
%"class.std::__1::__bucket_list_deallocator.149" = type { %"class.std::__1::__compressed_pair.150" }
%"class.std::__1::__compressed_pair.150" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"class.std::__1::__compressed_pair.154" = type { %"struct.std::__1::__compressed_pair_elem.155" }
%"struct.std::__1::__compressed_pair_elem.155" = type { %"struct.std::__1::__hash_node_base.147" }
%"class.std::__1::__compressed_pair.159" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"class.std::__1::__compressed_pair.164" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"class.std::__1::unique_ptr.170" = type { %"class.std::__1::__compressed_pair.171" }
%"class.std::__1::__compressed_pair.171" = type { %"struct.std::__1::__compressed_pair_elem.172" }
%"struct.std::__1::__compressed_pair_elem.172" = type { %"class.v8_inspector::protocol::Runtime::Backend::TerminateExecutionCallback"* }
%"class.v8_inspector::protocol::Runtime::Backend::TerminateExecutionCallback" = type { i32 (...)** }
%"class.v8::Global" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Context"* }
%"class.v8::Context" = type { i8 }
%"class.std::__1::unordered_map.203" = type { %"class.std::__1::__hash_table.204" }
%"class.std::__1::__hash_table.204" = type <{ %"class.std::__1::unique_ptr.205", %"class.std::__1::__compressed_pair.215", %"class.std::__1::__compressed_pair.220", %"class.std::__1::__compressed_pair.223", [4 x i8] }>
%"class.std::__1::unique_ptr.205" = type { %"class.std::__1::__compressed_pair.206" }
%"class.std::__1::__compressed_pair.206" = type { %"struct.std::__1::__compressed_pair_elem.207", %"struct.std::__1::__compressed_pair_elem.209" }
%"struct.std::__1::__compressed_pair_elem.207" = type { %"struct.std::__1::__hash_node_base.208"** }
%"struct.std::__1::__hash_node_base.208" = type { %"struct.std::__1::__hash_node_base.208"* }
%"struct.std::__1::__compressed_pair_elem.209" = type { %"class.std::__1::__bucket_list_deallocator.210" }
%"class.std::__1::__bucket_list_deallocator.210" = type { %"class.std::__1::__compressed_pair.211" }
%"class.std::__1::__compressed_pair.211" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"class.std::__1::__compressed_pair.215" = type { %"struct.std::__1::__compressed_pair_elem.216" }
%"struct.std::__1::__compressed_pair_elem.216" = type { %"struct.std::__1::__hash_node_base.208" }
%"class.std::__1::__compressed_pair.220" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"class.std::__1::__compressed_pair.223" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"class.std::__1::unordered_map.227" = type { %"class.std::__1::__hash_table.228" }
%"class.std::__1::__hash_table.228" = type <{ %"class.std::__1::unique_ptr.229", %"class.std::__1::__compressed_pair.239", %"class.std::__1::__compressed_pair.244", %"class.std::__1::__compressed_pair.247", [4 x i8] }>
%"class.std::__1::unique_ptr.229" = type { %"class.std::__1::__compressed_pair.230" }
%"class.std::__1::__compressed_pair.230" = type { %"struct.std::__1::__compressed_pair_elem.231", %"struct.std::__1::__compressed_pair_elem.233" }
%"struct.std::__1::__compressed_pair_elem.231" = type { %"struct.std::__1::__hash_node_base.232"** }
%"struct.std::__1::__hash_node_base.232" = type { %"struct.std::__1::__hash_node_base.232"* }
%"struct.std::__1::__compressed_pair_elem.233" = type { %"class.std::__1::__bucket_list_deallocator.234" }
%"class.std::__1::__bucket_list_deallocator.234" = type { %"class.std::__1::__compressed_pair.235" }
%"class.std::__1::__compressed_pair.235" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"class.std::__1::__compressed_pair.239" = type { %"struct.std::__1::__compressed_pair_elem.240" }
%"struct.std::__1::__compressed_pair_elem.240" = type { %"struct.std::__1::__hash_node_base.232" }
%"class.std::__1::__compressed_pair.244" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"class.std::__1::__compressed_pair.247" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"class.std::__1::unordered_map.251" = type { %"class.std::__1::__hash_table.252" }
%"class.std::__1::__hash_table.252" = type <{ %"class.std::__1::unique_ptr.253", %"class.std::__1::__compressed_pair.263", %"class.std::__1::__compressed_pair.268", %"class.std::__1::__compressed_pair.271", [4 x i8] }>
%"class.std::__1::unique_ptr.253" = type { %"class.std::__1::__compressed_pair.254" }
%"class.std::__1::__compressed_pair.254" = type { %"struct.std::__1::__compressed_pair_elem.255", %"struct.std::__1::__compressed_pair_elem.257" }
%"struct.std::__1::__compressed_pair_elem.255" = type { %"struct.std::__1::__hash_node_base.256"** }
%"struct.std::__1::__hash_node_base.256" = type { %"struct.std::__1::__hash_node_base.256"* }
%"struct.std::__1::__compressed_pair_elem.257" = type { %"class.std::__1::__bucket_list_deallocator.258" }
%"class.std::__1::__bucket_list_deallocator.258" = type { %"class.std::__1::__compressed_pair.259" }
%"class.std::__1::__compressed_pair.259" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"class.std::__1::__compressed_pair.263" = type { %"struct.std::__1::__compressed_pair_elem.264" }
%"struct.std::__1::__compressed_pair_elem.264" = type { %"struct.std::__1::__hash_node_base.256" }
%"class.std::__1::__compressed_pair.268" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"class.std::__1::__compressed_pair.271" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"class.std::__1::unordered_map.179" = type { %"class.std::__1::__hash_table.180" }
%"class.std::__1::__hash_table.180" = type <{ %"class.std::__1::unique_ptr.181", %"class.std::__1::__compressed_pair.191", %"class.std::__1::__compressed_pair.196", %"class.std::__1::__compressed_pair.199", [4 x i8] }>
%"class.std::__1::unique_ptr.181" = type { %"class.std::__1::__compressed_pair.182" }
%"class.std::__1::__compressed_pair.182" = type { %"struct.std::__1::__compressed_pair_elem.183", %"struct.std::__1::__compressed_pair_elem.185" }
%"struct.std::__1::__compressed_pair_elem.183" = type { %"struct.std::__1::__hash_node_base.184"** }
%"struct.std::__1::__hash_node_base.184" = type { %"struct.std::__1::__hash_node_base.184"* }
%"struct.std::__1::__compressed_pair_elem.185" = type { %"class.std::__1::__bucket_list_deallocator.186" }
%"class.std::__1::__bucket_list_deallocator.186" = type { %"class.std::__1::__compressed_pair.187" }
%"class.std::__1::__compressed_pair.187" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"class.std::__1::__compressed_pair.191" = type { %"struct.std::__1::__compressed_pair_elem.192" }
%"struct.std::__1::__compressed_pair_elem.192" = type { %"struct.std::__1::__hash_node_base.184" }
%"class.std::__1::__compressed_pair.196" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"class.std::__1::__compressed_pair.199" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.275", %"class.std::__1::__compressed_pair.280" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.275" = type { %"struct.std::__1::__compressed_pair_elem.276" }
%"struct.std::__1::__compressed_pair_elem.276" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.280" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"class.std::__1::unique_ptr.283" = type { %"class.std::__1::__compressed_pair.284" }
%"class.std::__1::__compressed_pair.284" = type { %"struct.std::__1::__compressed_pair_elem.285" }
%"struct.std::__1::__compressed_pair_elem.285" = type { %"class.v8_inspector::V8Console"* }
%"class.v8_inspector::V8Console" = type { %"class.v8::debug::ConsoleDelegate", %"class.v8_inspector::V8InspectorImpl"* }
%"class.v8::debug::ConsoleDelegate" = type { i32 (...)** }
%"class.v8_inspector::V8Inspector::Counters" = type { %"class.std::__1::enable_shared_from_this", %"class.v8::Isolate"*, %"class.std::__1::unordered_map.289" }
%"class.std::__1::enable_shared_from_this" = type { %"class.std::__1::weak_ptr" }
%"class.std::__1::weak_ptr" = type { %"class.v8_inspector::V8Inspector::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::unordered_map.289" = type { %"class.std::__1::__hash_table.290" }
%"class.std::__1::__hash_table.290" = type <{ %"class.std::__1::unique_ptr.291", %"class.std::__1::__compressed_pair.301", %"class.std::__1::__compressed_pair.306", %"class.std::__1::__compressed_pair.311", [4 x i8] }>
%"class.std::__1::unique_ptr.291" = type { %"class.std::__1::__compressed_pair.292" }
%"class.std::__1::__compressed_pair.292" = type { %"struct.std::__1::__compressed_pair_elem.293", %"struct.std::__1::__compressed_pair_elem.295" }
%"struct.std::__1::__compressed_pair_elem.293" = type { %"struct.std::__1::__hash_node_base.294"** }
%"struct.std::__1::__hash_node_base.294" = type { %"struct.std::__1::__hash_node_base.294"* }
%"struct.std::__1::__compressed_pair_elem.295" = type { %"class.std::__1::__bucket_list_deallocator.296" }
%"class.std::__1::__bucket_list_deallocator.296" = type { %"class.std::__1::__compressed_pair.297" }
%"class.std::__1::__compressed_pair.297" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"class.std::__1::__compressed_pair.301" = type { %"struct.std::__1::__compressed_pair_elem.302" }
%"struct.std::__1::__compressed_pair_elem.302" = type { %"struct.std::__1::__hash_node_base.294" }
%"class.std::__1::__compressed_pair.306" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"class.std::__1::__compressed_pair.311" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short" = type { [11 x i16], %struct.anon }
%struct.anon = type { %"struct.std::__1::__padding", i8 }
%"struct.std::__1::__padding" = type { [1 x i8] }
%"class.std::__1::__basic_string_common" = type { i8 }
%"class.v8_inspector::V8Regex" = type { %"class.v8_inspector::V8InspectorImpl"*, %"class.v8::Global.317", %"class.v8_inspector::String16" }
%"class.v8::Global.317" = type { %"class.v8::PersistentBase.318" }
%"class.v8::PersistentBase.318" = type { %"class.v8::RegExp"* }
%"class.v8::RegExp" = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorINS_10unique_ptrIN12v8_inspector8protocol8Debugger11SearchMatchENS_14default_deleteIS5_EEEENS_9allocatorIS8_EEE7reserveEm = comdat any

$_ZNK12v8_inspector8String169substringEmm = comdat any

$_ZNSt3__16vectorINS_4pairIiN12v8_inspector8String16EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_ = comdat any

$_ZNSt3__112basic_stringItNS_11char_traitsItEENS_9allocatorItEEEaSERKS5_ = comdat any

$_ZNSt3__112basic_stringItNS_11char_traitsItEENS_9allocatorItEEE21__grow_by_and_replaceEmmmmmmPKt = comdat any

$_ZNSt3__16vectorINS_10unique_ptrIN12v8_inspector8protocol8Debugger11SearchMatchENS_14default_deleteIS5_EEEENS_9allocatorIS8_EEE21__push_back_slow_pathIS8_EEvOT_ = comdat any

@.str = private unnamed_addr constant [10 x i8] c"sourceURL\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"sourceMappingURL\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@_ZTVN12v8_inspector8protocol8Debugger11SearchMatchE = external unnamed_addr constant { [5 x i8*], [5 x i8*] }, align 8
@.str.4 = private unnamed_addr constant [3 x i8] c"*/\00", align 1
@.str.5 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12v8_inspector23searchInTextByLinesImplEPNS_18V8InspectorSessionERKNS_8String16ES4_bb(%"class.std::__1::vector"* noalias sret, %"class.v8_inspector::V8InspectorSession"* nocapture readonly, %"class.v8_inspector::String16"* dereferenceable(32), %"class.v8_inspector::String16"* nocapture readonly dereferenceable(32), i1 zeroext, i1 zeroext) local_unnamed_addr #0 {
  %7 = alloca %"class.v8_inspector::String16", align 8
  %8 = alloca %"class.v8_inspector::String16", align 8
  %9 = alloca %"class.v8_inspector::String16", align 8
  %10 = alloca i32, align 4
  %11 = alloca %"struct.std::__1::pair.424", align 8
  %12 = alloca %"class.v8_inspector::String16Builder", align 8
  %13 = alloca %"class.v8_inspector::String16", align 8
  %14 = alloca %"class.std::__1::vector.422", align 8
  %15 = alloca %"class.std::__1::unique_ptr", align 8
  %16 = getelementptr inbounds %"class.v8_inspector::V8InspectorSession", %"class.v8_inspector::V8InspectorSession"* %1, i64 3
  %17 = bitcast %"class.v8_inspector::V8InspectorSession"* %16 to %"class.v8_inspector::V8InspectorImpl"**
  %18 = load %"class.v8_inspector::V8InspectorImpl"*, %"class.v8_inspector::V8InspectorImpl"** %17, align 8
  %19 = bitcast %"class.v8_inspector::String16"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %19) #8
  br i1 %5, label %20, label %206

20:                                               ; preds = %6
  %21 = bitcast %"class.v8_inspector::String16"* %3 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %22 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %21, i64 0, i32 1, i32 1
  %23 = load i8, i8* %22, align 1
  %24 = icmp slt i8 %23, 0
  br i1 %24, label %27, label %25

25:                                               ; preds = %20
  %26 = bitcast %"class.v8_inspector::String16"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %19, i8* align 8 %26, i64 24, i1 false) #8
  br label %202

27:                                               ; preds = %20
  %28 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load i16*, i16** %28, align 8
  %30 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %31 = load i64, i64* %30, align 8
  %32 = icmp ult i64 %31, 11
  br i1 %32, label %33, label %38

33:                                               ; preds = %27
  %34 = bitcast %"class.v8_inspector::String16"* %13 to i16*
  %35 = trunc i64 %31 to i8
  %36 = bitcast %"class.v8_inspector::String16"* %13 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %37 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %36, i64 0, i32 1, i32 1
  store i8 %35, i8* %37, align 1
  br label %55

38:                                               ; preds = %27
  %39 = icmp ugt i64 %31, 9223372036854775791
  br i1 %39, label %40, label %42

40:                                               ; preds = %38
  %41 = bitcast %"class.v8_inspector::String16"* %13 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %41) #9
  unreachable

42:                                               ; preds = %38
  %43 = add nuw nsw i64 %31, 8
  %44 = and i64 %43, -8
  %45 = icmp slt i64 %44, 0
  br i1 %45, label %46, label %47

46:                                               ; preds = %42
  tail call void @abort() #9
  unreachable

47:                                               ; preds = %42
  %48 = shl i64 %44, 1
  %49 = tail call i8* @_Znwm(i64 %48) #10
  %50 = bitcast i8* %49 to i16*
  %51 = bitcast %"class.v8_inspector::String16"* %13 to i8**
  store i8* %49, i8** %51, align 8
  %52 = or i64 %44, -9223372036854775808
  %53 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %52, i64* %53, align 8
  %54 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %31, i64* %54, align 8
  br label %55

55:                                               ; preds = %47, %33
  %56 = phi i16* [ %34, %33 ], [ %50, %47 ]
  %57 = add nuw nsw i64 %31, 1
  %58 = add i64 %31, 1
  %59 = icmp ult i64 %58, 16
  br i1 %59, label %149, label %60

60:                                               ; preds = %55
  %61 = add i64 %31, 1
  %62 = getelementptr i16, i16* %56, i64 %61
  %63 = getelementptr i16, i16* %29, i64 %61
  %64 = icmp ult i16* %56, %63
  %65 = icmp ult i16* %29, %62
  %66 = and i1 %64, %65
  br i1 %66, label %149, label %67

67:                                               ; preds = %60
  %68 = and i64 %58, -16
  %69 = getelementptr i16, i16* %56, i64 %68
  %70 = sub i64 %57, %68
  %71 = getelementptr i16, i16* %29, i64 %68
  %72 = add i64 %68, -16
  %73 = lshr exact i64 %72, 4
  %74 = add nuw nsw i64 %73, 1
  %75 = and i64 %74, 3
  %76 = icmp ult i64 %72, 48
  br i1 %76, label %128, label %77

77:                                               ; preds = %67
  %78 = sub nsw i64 %74, %75
  br label %79

79:                                               ; preds = %79, %77
  %80 = phi i64 [ 0, %77 ], [ %125, %79 ]
  %81 = phi i64 [ %78, %77 ], [ %126, %79 ]
  %82 = getelementptr i16, i16* %56, i64 %80
  %83 = getelementptr i16, i16* %29, i64 %80
  %84 = bitcast i16* %83 to <8 x i16>*
  %85 = load <8 x i16>, <8 x i16>* %84, align 2, !alias.scope !2
  %86 = getelementptr i16, i16* %83, i64 8
  %87 = bitcast i16* %86 to <8 x i16>*
  %88 = load <8 x i16>, <8 x i16>* %87, align 2, !alias.scope !2
  %89 = bitcast i16* %82 to <8 x i16>*
  store <8 x i16> %85, <8 x i16>* %89, align 2, !alias.scope !5, !noalias !2
  %90 = getelementptr i16, i16* %82, i64 8
  %91 = bitcast i16* %90 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %91, align 2, !alias.scope !5, !noalias !2
  %92 = or i64 %80, 16
  %93 = getelementptr i16, i16* %56, i64 %92
  %94 = getelementptr i16, i16* %29, i64 %92
  %95 = bitcast i16* %94 to <8 x i16>*
  %96 = load <8 x i16>, <8 x i16>* %95, align 2, !alias.scope !2
  %97 = getelementptr i16, i16* %94, i64 8
  %98 = bitcast i16* %97 to <8 x i16>*
  %99 = load <8 x i16>, <8 x i16>* %98, align 2, !alias.scope !2
  %100 = bitcast i16* %93 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %100, align 2, !alias.scope !5, !noalias !2
  %101 = getelementptr i16, i16* %93, i64 8
  %102 = bitcast i16* %101 to <8 x i16>*
  store <8 x i16> %99, <8 x i16>* %102, align 2, !alias.scope !5, !noalias !2
  %103 = or i64 %80, 32
  %104 = getelementptr i16, i16* %56, i64 %103
  %105 = getelementptr i16, i16* %29, i64 %103
  %106 = bitcast i16* %105 to <8 x i16>*
  %107 = load <8 x i16>, <8 x i16>* %106, align 2, !alias.scope !2
  %108 = getelementptr i16, i16* %105, i64 8
  %109 = bitcast i16* %108 to <8 x i16>*
  %110 = load <8 x i16>, <8 x i16>* %109, align 2, !alias.scope !2
  %111 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> %107, <8 x i16>* %111, align 2, !alias.scope !5, !noalias !2
  %112 = getelementptr i16, i16* %104, i64 8
  %113 = bitcast i16* %112 to <8 x i16>*
  store <8 x i16> %110, <8 x i16>* %113, align 2, !alias.scope !5, !noalias !2
  %114 = or i64 %80, 48
  %115 = getelementptr i16, i16* %56, i64 %114
  %116 = getelementptr i16, i16* %29, i64 %114
  %117 = bitcast i16* %116 to <8 x i16>*
  %118 = load <8 x i16>, <8 x i16>* %117, align 2, !alias.scope !2
  %119 = getelementptr i16, i16* %116, i64 8
  %120 = bitcast i16* %119 to <8 x i16>*
  %121 = load <8 x i16>, <8 x i16>* %120, align 2, !alias.scope !2
  %122 = bitcast i16* %115 to <8 x i16>*
  store <8 x i16> %118, <8 x i16>* %122, align 2, !alias.scope !5, !noalias !2
  %123 = getelementptr i16, i16* %115, i64 8
  %124 = bitcast i16* %123 to <8 x i16>*
  store <8 x i16> %121, <8 x i16>* %124, align 2, !alias.scope !5, !noalias !2
  %125 = add i64 %80, 64
  %126 = add i64 %81, -4
  %127 = icmp eq i64 %126, 0
  br i1 %127, label %128, label %79, !llvm.loop !7

128:                                              ; preds = %79, %67
  %129 = phi i64 [ 0, %67 ], [ %125, %79 ]
  %130 = icmp eq i64 %75, 0
  br i1 %130, label %147, label %131

131:                                              ; preds = %128, %131
  %132 = phi i64 [ %144, %131 ], [ %129, %128 ]
  %133 = phi i64 [ %145, %131 ], [ %75, %128 ]
  %134 = getelementptr i16, i16* %56, i64 %132
  %135 = getelementptr i16, i16* %29, i64 %132
  %136 = bitcast i16* %135 to <8 x i16>*
  %137 = load <8 x i16>, <8 x i16>* %136, align 2, !alias.scope !2
  %138 = getelementptr i16, i16* %135, i64 8
  %139 = bitcast i16* %138 to <8 x i16>*
  %140 = load <8 x i16>, <8 x i16>* %139, align 2, !alias.scope !2
  %141 = bitcast i16* %134 to <8 x i16>*
  store <8 x i16> %137, <8 x i16>* %141, align 2, !alias.scope !5, !noalias !2
  %142 = getelementptr i16, i16* %134, i64 8
  %143 = bitcast i16* %142 to <8 x i16>*
  store <8 x i16> %140, <8 x i16>* %143, align 2, !alias.scope !5, !noalias !2
  %144 = add i64 %132, 16
  %145 = add i64 %133, -1
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %147, label %131, !llvm.loop !9

147:                                              ; preds = %131, %128
  %148 = icmp eq i64 %58, %68
  br i1 %148, label %202, label %149

149:                                              ; preds = %147, %60, %55
  %150 = phi i16* [ %56, %60 ], [ %56, %55 ], [ %69, %147 ]
  %151 = phi i64 [ %57, %60 ], [ %57, %55 ], [ %70, %147 ]
  %152 = phi i16* [ %29, %60 ], [ %29, %55 ], [ %71, %147 ]
  %153 = add i64 %151, -1
  %154 = and i64 %151, 7
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %167, label %156

156:                                              ; preds = %149, %156
  %157 = phi i16* [ %163, %156 ], [ %150, %149 ]
  %158 = phi i64 [ %162, %156 ], [ %151, %149 ]
  %159 = phi i16* [ %164, %156 ], [ %152, %149 ]
  %160 = phi i64 [ %165, %156 ], [ %154, %149 ]
  %161 = load i16, i16* %159, align 2
  store i16 %161, i16* %157, align 2
  %162 = add i64 %158, -1
  %163 = getelementptr inbounds i16, i16* %157, i64 1
  %164 = getelementptr inbounds i16, i16* %159, i64 1
  %165 = add i64 %160, -1
  %166 = icmp eq i64 %165, 0
  br i1 %166, label %167, label %156, !llvm.loop !11

167:                                              ; preds = %156, %149
  %168 = phi i16* [ %150, %149 ], [ %163, %156 ]
  %169 = phi i64 [ %151, %149 ], [ %162, %156 ]
  %170 = phi i16* [ %152, %149 ], [ %164, %156 ]
  %171 = icmp ult i64 %153, 7
  br i1 %171, label %202, label %172

172:                                              ; preds = %167, %172
  %173 = phi i16* [ %199, %172 ], [ %168, %167 ]
  %174 = phi i64 [ %198, %172 ], [ %169, %167 ]
  %175 = phi i16* [ %200, %172 ], [ %170, %167 ]
  %176 = load i16, i16* %175, align 2
  store i16 %176, i16* %173, align 2
  %177 = getelementptr inbounds i16, i16* %173, i64 1
  %178 = getelementptr inbounds i16, i16* %175, i64 1
  %179 = load i16, i16* %178, align 2
  store i16 %179, i16* %177, align 2
  %180 = getelementptr inbounds i16, i16* %173, i64 2
  %181 = getelementptr inbounds i16, i16* %175, i64 2
  %182 = load i16, i16* %181, align 2
  store i16 %182, i16* %180, align 2
  %183 = getelementptr inbounds i16, i16* %173, i64 3
  %184 = getelementptr inbounds i16, i16* %175, i64 3
  %185 = load i16, i16* %184, align 2
  store i16 %185, i16* %183, align 2
  %186 = getelementptr inbounds i16, i16* %173, i64 4
  %187 = getelementptr inbounds i16, i16* %175, i64 4
  %188 = load i16, i16* %187, align 2
  store i16 %188, i16* %186, align 2
  %189 = getelementptr inbounds i16, i16* %173, i64 5
  %190 = getelementptr inbounds i16, i16* %175, i64 5
  %191 = load i16, i16* %190, align 2
  store i16 %191, i16* %189, align 2
  %192 = getelementptr inbounds i16, i16* %173, i64 6
  %193 = getelementptr inbounds i16, i16* %175, i64 6
  %194 = load i16, i16* %193, align 2
  store i16 %194, i16* %192, align 2
  %195 = getelementptr inbounds i16, i16* %173, i64 7
  %196 = getelementptr inbounds i16, i16* %175, i64 7
  %197 = load i16, i16* %196, align 2
  store i16 %197, i16* %195, align 2
  %198 = add i64 %174, -8
  %199 = getelementptr inbounds i16, i16* %173, i64 8
  %200 = getelementptr inbounds i16, i16* %175, i64 8
  %201 = icmp eq i64 %198, 0
  br i1 %201, label %202, label %172, !llvm.loop !12

202:                                              ; preds = %167, %172, %147, %25
  %203 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %13, i64 0, i32 1
  %204 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %3, i64 0, i32 1
  %205 = load i64, i64* %204, align 8
  store i64 %205, i64* %203, align 8
  br label %246

206:                                              ; preds = %6
  %207 = bitcast %"class.v8_inspector::String16Builder"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %207) #8, !noalias !13
  call void @_ZN12v8_inspector15String16BuilderC1Ev(%"class.v8_inspector::String16Builder"* nonnull %12) #8, !noalias !13
  %208 = bitcast %"class.v8_inspector::String16"* %3 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %209 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %208, i64 0, i32 1, i32 1
  %210 = load i8, i8* %209, align 1, !noalias !13
  %211 = icmp slt i8 %210, 0
  %212 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %213 = load i64, i64* %212, align 8, !noalias !13
  %214 = zext i8 %210 to i64
  %215 = select i1 %211, i64 %213, i64 %214
  %216 = icmp eq i64 %215, 0
  br i1 %216, label %220, label %217

217:                                              ; preds = %206
  %218 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %219 = bitcast %"class.v8_inspector::String16"* %3 to i16*
  br label %229

220:                                              ; preds = %237, %206
  call void @_ZN12v8_inspector15String16Builder8toStringEv(%"class.v8_inspector::String16"* nonnull sret %13, %"class.v8_inspector::String16Builder"* nonnull %12) #8
  %221 = getelementptr inbounds %"class.v8_inspector::String16Builder", %"class.v8_inspector::String16Builder"* %12, i64 0, i32 0, i32 0, i32 0
  %222 = load i16*, i16** %221, align 8, !noalias !13
  %223 = icmp eq i16* %222, null
  br i1 %223, label %245, label %224

224:                                              ; preds = %220
  %225 = ptrtoint i16* %222 to i64
  %226 = getelementptr inbounds %"class.v8_inspector::String16Builder", %"class.v8_inspector::String16Builder"* %12, i64 0, i32 0, i32 0, i32 1
  %227 = bitcast i16** %226 to i64*
  store i64 %225, i64* %227, align 8, !noalias !13
  %228 = bitcast i16* %222 to i8*
  call void @_ZdlPv(i8* %228) #10
  br label %245

229:                                              ; preds = %237, %217
  %230 = phi i1 [ %211, %217 ], [ %240, %237 ]
  %231 = phi i64 [ 0, %217 ], [ %238, %237 ]
  %232 = load i16*, i16** %218, align 8, !noalias !13
  %233 = select i1 %230, i16* %232, i16* %219
  %234 = getelementptr inbounds i16, i16* %233, i64 %231
  %235 = load i16, i16* %234, align 2
  switch i16 %235, label %237 [
    i16 91, label %236
    i16 93, label %236
    i16 40, label %236
    i16 41, label %236
    i16 123, label %236
    i16 125, label %236
    i16 43, label %236
    i16 45, label %236
    i16 42, label %236
    i16 46, label %236
    i16 44, label %236
    i16 63, label %236
    i16 92, label %236
    i16 94, label %236
    i16 36, label %236
    i16 124, label %236
  ]

236:                                              ; preds = %229, %229, %229, %229, %229, %229, %229, %229, %229, %229, %229, %229, %229, %229, %229, %229
  call void @_ZN12v8_inspector15String16Builder6appendEc(%"class.v8_inspector::String16Builder"* nonnull %12, i8 signext 92) #8
  br label %237

237:                                              ; preds = %236, %229
  call void @_ZN12v8_inspector15String16Builder6appendEt(%"class.v8_inspector::String16Builder"* nonnull %12, i16 zeroext %235) #8
  %238 = add nuw i64 %231, 1
  %239 = load i8, i8* %209, align 1, !noalias !13
  %240 = icmp slt i8 %239, 0
  %241 = load i64, i64* %212, align 8, !noalias !13
  %242 = zext i8 %239 to i64
  %243 = select i1 %240, i64 %241, i64 %242
  %244 = icmp ult i64 %238, %243
  br i1 %244, label %229, label %220

245:                                              ; preds = %224, %220
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %207) #8, !noalias !13
  br label %246

246:                                              ; preds = %245, %202
  %247 = call i8* @_Znwm(i64 48) #10
  %248 = bitcast i8* %247 to %"class.v8_inspector::V8Regex"*
  call void @_ZN12v8_inspector7V8RegexC1EPNS_15V8InspectorImplERKNS_8String16Ebb(%"class.v8_inspector::V8Regex"* nonnull %248, %"class.v8_inspector::V8InspectorImpl"* %18, %"class.v8_inspector::String16"* nonnull dereferenceable(32) %13, i1 zeroext %4, i1 zeroext false) #8
  %249 = bitcast %"class.v8_inspector::String16"* %13 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %250 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %249, i64 0, i32 1, i32 1
  %251 = load i8, i8* %250, align 1
  %252 = icmp slt i8 %251, 0
  br i1 %252, label %253, label %256

253:                                              ; preds = %246
  %254 = bitcast %"class.v8_inspector::String16"* %13 to i8**
  %255 = load i8*, i8** %254, align 8
  call void @_ZdlPv(i8* %255) #10
  br label %256

256:                                              ; preds = %246, %253
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %19) #8
  %257 = bitcast %"class.std::__1::vector.422"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %257) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %257, i8 0, i64 24, i1 false) #8, !alias.scope !16
  %258 = bitcast %"class.v8_inspector::String16"* %2 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %259 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %258, i64 0, i32 1, i32 1
  %260 = load i8, i8* %259, align 1, !noalias !16
  %261 = icmp slt i8 %260, 0
  %262 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %263 = load i64, i64* %262, align 8, !noalias !16
  %264 = zext i8 %260 to i64
  %265 = select i1 %261, i64 %263, i64 %264
  %266 = icmp eq i64 %265, 0
  br i1 %266, label %795, label %267

267:                                              ; preds = %256
  %268 = call i8* @_Znwm(i64 24) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %268, i8 0, i64 24, i1 false) #8, !noalias !16
  %269 = bitcast %"class.v8_inspector::String16"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %269) #8, !noalias !16
  call void @_ZN12v8_inspector8String16C1EPKc(%"class.v8_inspector::String16"* nonnull %7, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)) #8
  %270 = load i8, i8* %259, align 1, !noalias !16
  %271 = icmp slt i8 %270, 0
  %272 = load i64, i64* %262, align 8, !noalias !16
  %273 = zext i8 %270 to i64
  %274 = select i1 %271, i64 %272, i64 %273
  %275 = icmp eq i64 %274, 0
  br i1 %275, label %427, label %276

276:                                              ; preds = %267
  %277 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %278 = bitcast %"class.v8_inspector::String16"* %2 to i16*
  %279 = bitcast %"class.v8_inspector::String16"* %7 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %280 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %279, i64 0, i32 1, i32 1
  %281 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %282 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %283 = bitcast %"class.v8_inspector::String16"* %7 to i16*
  %284 = getelementptr inbounds i8, i8* %268, i64 8
  %285 = bitcast i8* %284 to i64**
  %286 = getelementptr inbounds i8, i8* %268, i64 16
  %287 = bitcast i8* %286 to i64**
  %288 = bitcast i8* %284 to i64*
  %289 = bitcast i8* %268 to i64*
  %290 = bitcast i8* %286 to i64*
  br label %291

291:                                              ; preds = %417, %276
  %292 = phi i64 [ %272, %276 ], [ %421, %417 ]
  %293 = phi i1 [ %271, %276 ], [ %420, %417 ]
  %294 = phi i8 [ %270, %276 ], [ %419, %417 ]
  %295 = phi i64 [ 0, %276 ], [ %418, %417 ]
  %296 = load i16*, i16** %277, align 8, !noalias !16
  %297 = zext i8 %294 to i64
  %298 = select i1 %293, i16* %296, i16* %278
  %299 = select i1 %293, i64 %292, i64 %297
  %300 = load i8, i8* %280, align 1, !noalias !16
  %301 = icmp slt i8 %300, 0
  %302 = load i16*, i16** %281, align 8, !noalias !16
  %303 = load i64, i64* %282, align 8, !noalias !16
  %304 = zext i8 %300 to i64
  %305 = select i1 %301, i16* %302, i16* %283
  %306 = select i1 %301, i64 %303, i64 %304
  %307 = icmp ult i64 %299, %295
  br i1 %307, label %427, label %308

308:                                              ; preds = %291
  %309 = icmp eq i64 %306, 0
  br i1 %309, label %365, label %310

310:                                              ; preds = %308
  %311 = getelementptr inbounds i16, i16* %298, i64 %295
  %312 = getelementptr inbounds i16, i16* %298, i64 %299
  %313 = shl nuw i64 %306, 1
  %314 = ashr exact i64 %313, 1
  %315 = ptrtoint i16* %312 to i64
  %316 = ptrtoint i16* %311 to i64
  %317 = sub i64 %315, %316
  %318 = ashr exact i64 %317, 1
  %319 = icmp slt i64 %318, %314
  br i1 %319, label %427, label %320

320:                                              ; preds = %310
  %321 = load i16, i16* %305, align 2
  br label %322

322:                                              ; preds = %351, %320
  %323 = phi i64 [ %355, %351 ], [ %318, %320 ]
  %324 = phi i16* [ %352, %351 ], [ %311, %320 ]
  %325 = sub nsw i64 %323, %314
  %326 = add nsw i64 %325, 1
  %327 = icmp eq i64 %326, 0
  br i1 %327, label %427, label %328

328:                                              ; preds = %322, %333
  %329 = phi i64 [ %335, %333 ], [ %326, %322 ]
  %330 = phi i16* [ %334, %333 ], [ %324, %322 ]
  %331 = load i16, i16* %330, align 2
  %332 = icmp eq i16 %331, %321
  br i1 %332, label %337, label %333

333:                                              ; preds = %328
  %334 = getelementptr inbounds i16, i16* %330, i64 1
  %335 = add i64 %329, -1
  %336 = icmp eq i64 %335, 0
  br i1 %336, label %427, label %328

337:                                              ; preds = %328
  %338 = icmp eq i16* %330, null
  br i1 %338, label %427, label %339

339:                                              ; preds = %337, %346
  %340 = phi i16* [ %344, %346 ], [ %330, %337 ]
  %341 = phi i16* [ %347, %346 ], [ %305, %337 ]
  %342 = phi i64 [ %343, %346 ], [ %314, %337 ]
  %343 = add i64 %342, -1
  %344 = getelementptr inbounds i16, i16* %340, i64 1
  %345 = icmp eq i64 %343, 0
  br i1 %345, label %357, label %346

346:                                              ; preds = %339
  %347 = getelementptr inbounds i16, i16* %341, i64 1
  %348 = load i16, i16* %344, align 2
  %349 = load i16, i16* %347, align 2
  %350 = icmp eq i16 %349, %348
  br i1 %350, label %339, label %351

351:                                              ; preds = %346
  %352 = getelementptr inbounds i16, i16* %330, i64 1
  %353 = ptrtoint i16* %352 to i64
  %354 = sub i64 %315, %353
  %355 = ashr exact i64 %354, 1
  %356 = icmp slt i64 %355, %314
  br i1 %356, label %427, label %322

357:                                              ; preds = %339
  %358 = ptrtoint i16* %330 to i64
  %359 = icmp eq i16* %330, %312
  %360 = ptrtoint i16* %298 to i64
  %361 = sub i64 %358, %360
  %362 = ashr exact i64 %361, 1
  %363 = icmp eq i64 %361, -2
  %364 = or i1 %359, %363
  br i1 %364, label %427, label %365

365:                                              ; preds = %357, %308
  %366 = phi i64 [ %295, %308 ], [ %362, %357 ]
  %367 = load i64*, i64** %285, align 8, !noalias !16
  %368 = load i64*, i64** %287, align 8, !noalias !16
  %369 = icmp eq i64* %367, %368
  %370 = ptrtoint i64* %368 to i64
  br i1 %369, label %374, label %371

371:                                              ; preds = %365
  store i64 %366, i64* %367, align 8
  %372 = getelementptr inbounds i64, i64* %367, i64 1
  %373 = ptrtoint i64* %372 to i64
  store i64 %373, i64* %288, align 8, !noalias !16
  br label %417

374:                                              ; preds = %365
  %375 = ptrtoint i64* %367 to i64
  %376 = load i64, i64* %289, align 8, !noalias !16
  %377 = sub i64 %375, %376
  %378 = ashr exact i64 %377, 3
  %379 = add nsw i64 %378, 1
  %380 = icmp ugt i64 %379, 2305843009213693951
  br i1 %380, label %381, label %383

381:                                              ; preds = %374
  %382 = bitcast i8* %268 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %382) #9
  unreachable

383:                                              ; preds = %374
  %384 = sub i64 %370, %376
  %385 = ashr exact i64 %384, 3
  %386 = icmp ult i64 %385, 1152921504606846975
  br i1 %386, label %387, label %395

387:                                              ; preds = %383
  %388 = ashr exact i64 %384, 2
  %389 = icmp ult i64 %388, %379
  %390 = select i1 %389, i64 %379, i64 %388
  %391 = icmp eq i64 %390, 0
  br i1 %391, label %400, label %392

392:                                              ; preds = %387
  %393 = icmp ugt i64 %390, 2305843009213693951
  br i1 %393, label %394, label %395

394:                                              ; preds = %392
  call void @abort() #9
  unreachable

395:                                              ; preds = %392, %383
  %396 = phi i64 [ %390, %392 ], [ 2305843009213693951, %383 ]
  %397 = shl i64 %396, 3
  %398 = call i8* @_Znwm(i64 %397) #10
  %399 = bitcast i8* %398 to i64*
  br label %400

400:                                              ; preds = %395, %387
  %401 = phi i64 [ %396, %395 ], [ 0, %387 ]
  %402 = phi i8* [ %398, %395 ], [ null, %387 ]
  %403 = phi i64* [ %399, %395 ], [ null, %387 ]
  %404 = getelementptr inbounds i64, i64* %403, i64 %378
  %405 = getelementptr inbounds i64, i64* %403, i64 %401
  %406 = ptrtoint i64* %405 to i64
  store i64 %366, i64* %404, align 8, !noalias !16
  %407 = getelementptr inbounds i64, i64* %404, i64 1
  %408 = ptrtoint i64* %407 to i64
  %409 = ptrtoint i64* %403 to i64
  %410 = icmp sgt i64 %377, 0
  br i1 %410, label %411, label %413

411:                                              ; preds = %400
  %412 = inttoptr i64 %376 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %402, i8* align 8 %412, i64 %377, i1 false) #8
  br label %413

413:                                              ; preds = %411, %400
  store i64 %409, i64* %289, align 8, !noalias !16
  store i64 %408, i64* %288, align 8, !noalias !16
  store i64 %406, i64* %290, align 8, !noalias !16
  %414 = icmp eq i64 %376, 0
  br i1 %414, label %417, label %415

415:                                              ; preds = %413
  %416 = inttoptr i64 %376 to i8*
  call void @_ZdlPv(i8* %416) #10
  br label %417

417:                                              ; preds = %415, %413, %371
  %418 = add i64 %366, 1
  %419 = load i8, i8* %259, align 1, !noalias !16
  %420 = icmp slt i8 %419, 0
  %421 = load i64, i64* %262, align 8, !noalias !16
  %422 = zext i8 %419 to i64
  %423 = select i1 %420, i64 %421, i64 %422
  %424 = icmp ult i64 %418, %423
  br i1 %424, label %291, label %425

425:                                              ; preds = %417
  %426 = zext i8 %419 to i64
  br label %427

427:                                              ; preds = %357, %310, %291, %351, %337, %322, %333, %425, %267
  %428 = phi i64 [ %273, %267 ], [ %426, %425 ], [ %297, %333 ], [ %297, %322 ], [ %297, %337 ], [ %297, %351 ], [ %297, %291 ], [ %297, %310 ], [ %297, %357 ]
  %429 = phi i64 [ %272, %267 ], [ %421, %425 ], [ %292, %333 ], [ %292, %322 ], [ %292, %337 ], [ %292, %351 ], [ %292, %291 ], [ %292, %310 ], [ %292, %357 ]
  %430 = phi i8 [ %270, %267 ], [ %419, %425 ], [ %294, %333 ], [ %294, %322 ], [ %294, %337 ], [ %294, %351 ], [ %294, %291 ], [ %294, %310 ], [ %294, %357 ]
  %431 = icmp slt i8 %430, 0
  %432 = select i1 %431, i64 %429, i64 %428
  %433 = getelementptr inbounds i8, i8* %268, i64 8
  %434 = bitcast i8* %433 to i64**
  %435 = load i64*, i64** %434, align 8, !noalias !16
  %436 = getelementptr inbounds i8, i8* %268, i64 16
  %437 = bitcast i8* %436 to i64**
  %438 = load i64*, i64** %437, align 8, !noalias !16
  %439 = icmp ult i64* %435, %438
  %440 = ptrtoint i64* %438 to i64
  br i1 %439, label %441, label %445

441:                                              ; preds = %427
  store i64 %432, i64* %435, align 8
  %442 = getelementptr inbounds i64, i64* %435, i64 1
  %443 = ptrtoint i64* %442 to i64
  %444 = bitcast i8* %433 to i64*
  store i64 %443, i64* %444, align 8, !noalias !16
  br label %491

445:                                              ; preds = %427
  %446 = ptrtoint i64* %435 to i64
  %447 = bitcast i8* %433 to i64*
  %448 = bitcast i8* %268 to i64*
  %449 = load i64, i64* %448, align 8, !noalias !16
  %450 = sub i64 %446, %449
  %451 = ashr exact i64 %450, 3
  %452 = add nsw i64 %451, 1
  %453 = icmp ugt i64 %452, 2305843009213693951
  br i1 %453, label %454, label %456

454:                                              ; preds = %445
  %455 = bitcast i8* %268 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %455) #9
  unreachable

456:                                              ; preds = %445
  %457 = bitcast i8* %436 to i64*
  %458 = sub i64 %440, %449
  %459 = ashr exact i64 %458, 3
  %460 = icmp ult i64 %459, 1152921504606846975
  br i1 %460, label %461, label %469

461:                                              ; preds = %456
  %462 = ashr exact i64 %458, 2
  %463 = icmp ult i64 %462, %452
  %464 = select i1 %463, i64 %452, i64 %462
  %465 = icmp eq i64 %464, 0
  br i1 %465, label %474, label %466

466:                                              ; preds = %461
  %467 = icmp ugt i64 %464, 2305843009213693951
  br i1 %467, label %468, label %469

468:                                              ; preds = %466
  call void @abort() #9
  unreachable

469:                                              ; preds = %466, %456
  %470 = phi i64 [ %464, %466 ], [ 2305843009213693951, %456 ]
  %471 = shl i64 %470, 3
  %472 = call i8* @_Znwm(i64 %471) #10
  %473 = bitcast i8* %472 to i64*
  br label %474

474:                                              ; preds = %469, %461
  %475 = phi i64 [ %470, %469 ], [ 0, %461 ]
  %476 = phi i8* [ %472, %469 ], [ null, %461 ]
  %477 = phi i64* [ %473, %469 ], [ null, %461 ]
  %478 = getelementptr inbounds i64, i64* %477, i64 %451
  %479 = getelementptr inbounds i64, i64* %477, i64 %475
  %480 = ptrtoint i64* %479 to i64
  store i64 %432, i64* %478, align 8, !noalias !16
  %481 = getelementptr inbounds i64, i64* %478, i64 1
  %482 = ptrtoint i64* %481 to i64
  %483 = ptrtoint i64* %477 to i64
  %484 = icmp sgt i64 %450, 0
  br i1 %484, label %485, label %487

485:                                              ; preds = %474
  %486 = inttoptr i64 %449 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %476, i8* align 8 %486, i64 %450, i1 false) #8
  br label %487

487:                                              ; preds = %485, %474
  store i64 %483, i64* %448, align 8, !noalias !16
  store i64 %482, i64* %447, align 8, !noalias !16
  store i64 %480, i64* %457, align 8, !noalias !16
  %488 = icmp eq i64 %449, 0
  br i1 %488, label %491, label %489

489:                                              ; preds = %487
  %490 = inttoptr i64 %449 to i8*
  call void @_ZdlPv(i8* %490) #10
  br label %491

491:                                              ; preds = %489, %487, %441
  %492 = bitcast %"class.v8_inspector::String16"* %7 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %493 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %492, i64 0, i32 1, i32 1
  %494 = load i8, i8* %493, align 1, !noalias !16
  %495 = icmp slt i8 %494, 0
  br i1 %495, label %496, label %499

496:                                              ; preds = %491
  %497 = bitcast %"class.v8_inspector::String16"* %7 to i8**
  %498 = load i8*, i8** %497, align 8, !noalias !16
  call void @_ZdlPv(i8* %498) #10
  br label %499

499:                                              ; preds = %496, %491
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %269) #8, !noalias !16
  %500 = bitcast i8* %433 to i64*
  %501 = load i64, i64* %500, align 8, !noalias !16
  %502 = bitcast i8* %268 to i64*
  %503 = load i64, i64* %502, align 8, !noalias !16
  %504 = sub i64 %501, %503
  %505 = ashr exact i64 %504, 3
  %506 = icmp eq i64 %504, 0
  br i1 %506, label %507, label %509

507:                                              ; preds = %499
  %508 = inttoptr i64 %503 to i64*
  br label %542

509:                                              ; preds = %499
  %510 = bitcast %"class.v8_inspector::String16"* %8 to i8*
  %511 = bitcast %"class.v8_inspector::String16"* %8 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %512 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %511, i64 0, i32 1, i32 1
  %513 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %514 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %515 = bitcast %"class.v8_inspector::String16"* %8 to i16*
  %516 = bitcast %"class.v8_inspector::String16"* %9 to i8*
  %517 = bitcast %"class.v8_inspector::String16"* %8 to i8**
  %518 = bitcast %"class.v8_inspector::String16"* %9 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %519 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %518, i64 0, i32 1, i32 1
  %520 = bitcast %"class.v8_inspector::String16"* %9 to i16*
  %521 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %9, i64 0, i32 1
  %522 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %8, i64 0, i32 1
  %523 = bitcast i32* %10 to i8*
  %524 = bitcast %"struct.std::__1::pair.424"* %11 to i8*
  %525 = getelementptr inbounds %"struct.std::__1::pair.424", %"struct.std::__1::pair.424"* %11, i64 0, i32 0
  %526 = getelementptr inbounds %"struct.std::__1::pair.424", %"struct.std::__1::pair.424"* %11, i64 0, i32 1
  %527 = bitcast %"class.v8_inspector::String16"* %526 to i8*
  %528 = bitcast %"class.v8_inspector::String16"* %526 to i8**
  %529 = getelementptr inbounds %"struct.std::__1::pair.424", %"struct.std::__1::pair.424"* %11, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %530 = getelementptr inbounds %"struct.std::__1::pair.424", %"struct.std::__1::pair.424"* %11, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %531 = bitcast %"class.v8_inspector::String16"* %526 to i16*
  %532 = bitcast %"class.v8_inspector::String16"* %526 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %533 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %532, i64 0, i32 1, i32 1
  %534 = getelementptr inbounds %"struct.std::__1::pair.424", %"struct.std::__1::pair.424"* %11, i64 0, i32 1, i32 1
  %535 = getelementptr inbounds %"class.std::__1::vector.422", %"class.std::__1::vector.422"* %14, i64 0, i32 0, i32 1
  %536 = getelementptr inbounds %"class.std::__1::vector.422", %"class.std::__1::vector.422"* %14, i64 0, i32 0, i32 2, i32 0, i32 0
  %537 = bitcast %"struct.std::__1::pair.424"** %535 to i64*
  %538 = icmp eq i64 %501, %503
  br i1 %538, label %554, label %556

539:                                              ; preds = %786
  %540 = bitcast i8* %268 to i64**
  %541 = load i64*, i64** %540, align 8, !noalias !16
  br label %542

542:                                              ; preds = %539, %507
  %543 = phi i64* [ %541, %539 ], [ %508, %507 ]
  %544 = icmp eq i64* %543, null
  br i1 %544, label %548, label %545

545:                                              ; preds = %542
  %546 = ptrtoint i64* %543 to i64
  store i64 %546, i64* %500, align 8, !noalias !16
  %547 = bitcast i64* %543 to i8*
  call void @_ZdlPv(i8* %547) #10
  br label %548

548:                                              ; preds = %545, %542
  call void @_ZdlPv(i8* nonnull %268) #10
  %549 = getelementptr inbounds %"class.std::__1::vector.422", %"class.std::__1::vector.422"* %14, i64 0, i32 0, i32 1
  %550 = bitcast %"struct.std::__1::pair.424"** %549 to i64*
  %551 = load i64, i64* %550, align 8
  %552 = bitcast %"class.std::__1::vector.422"* %14 to i64*
  %553 = load i64, i64* %552, align 8
  br label %795

554:                                              ; preds = %789, %509
  %555 = bitcast i8* %268 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* nonnull %555) #9
  unreachable

556:                                              ; preds = %509, %789
  %557 = phi i64 [ %787, %789 ], [ 0, %509 ]
  %558 = phi i64 [ %781, %789 ], [ 0, %509 ]
  %559 = phi i64 [ %791, %789 ], [ %503, %509 ]
  %560 = inttoptr i64 %559 to i64*
  %561 = getelementptr inbounds i64, i64* %560, i64 %557
  %562 = load i64, i64* %561, align 8
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %510) #8, !noalias !16
  %563 = sub i64 %562, %558
  call void @_ZNK12v8_inspector8String169substringEmm(%"class.v8_inspector::String16"* nonnull sret %8, %"class.v8_inspector::String16"* %2, i64 %558, i64 %563) #8
  %564 = load i8, i8* %512, align 1, !noalias !16
  %565 = icmp slt i8 %564, 0
  %566 = load i64, i64* %513, align 8, !noalias !16
  %567 = zext i8 %564 to i64
  %568 = select i1 %565, i64 %566, i64 %567
  %569 = icmp eq i64 %568, 0
  br i1 %569, label %584, label %570

570:                                              ; preds = %556
  %571 = load i16*, i16** %514, align 8, !noalias !16
  %572 = select i1 %565, i16* %571, i16* %515
  %573 = add i64 %568, -1
  %574 = getelementptr inbounds i16, i16* %572, i64 %573
  %575 = load i16, i16* %574, align 2
  %576 = icmp eq i16 %575, 13
  br i1 %576, label %577, label %584

577:                                              ; preds = %570
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %516) #8, !noalias !16
  call void @_ZNK12v8_inspector8String169substringEmm(%"class.v8_inspector::String16"* nonnull sret %9, %"class.v8_inspector::String16"* nonnull %8, i64 0, i64 %573) #8
  %578 = load i8, i8* %512, align 1, !noalias !16
  %579 = icmp slt i8 %578, 0
  br i1 %579, label %580, label %582

580:                                              ; preds = %577
  %581 = load i8*, i8** %517, align 8, !noalias !16
  call void @_ZdlPv(i8* %581) #10
  br label %582

582:                                              ; preds = %580, %577
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %510, i8* nonnull align 8 %516, i64 24, i1 false) #8, !noalias !16
  store i8 0, i8* %519, align 1, !noalias !16
  store i16 0, i16* %520, align 8, !noalias !16
  %583 = load i64, i64* %521, align 8, !noalias !16
  store i64 %583, i64* %522, align 8, !noalias !16
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %516) #8, !noalias !16
  br label %584

584:                                              ; preds = %582, %570, %556
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %523) #8, !noalias !16
  %585 = call i32 @_ZNK12v8_inspector7V8Regex5matchERKNS_8String16EiPi(%"class.v8_inspector::V8Regex"* nonnull %248, %"class.v8_inspector::String16"* nonnull dereferenceable(32) %8, i32 0, i32* nonnull %10) #8
  %586 = icmp eq i32 %585, -1
  br i1 %586, label %780, label %587

587:                                              ; preds = %584
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %524) #8, !noalias !16
  %588 = trunc i64 %557 to i32
  store i32 %588, i32* %525, align 8, !noalias !16
  %589 = load i8, i8* %512, align 1, !noalias !16
  %590 = icmp slt i8 %589, 0
  br i1 %590, label %592, label %591

591:                                              ; preds = %587
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %527, i8* nonnull align 8 %510, i64 24, i1 false) #8, !noalias !16
  br label %760

592:                                              ; preds = %587
  %593 = load i16*, i16** %514, align 8, !noalias !16
  %594 = load i64, i64* %513, align 8, !noalias !16
  %595 = icmp ult i64 %594, 11
  br i1 %595, label %596, label %598

596:                                              ; preds = %592
  %597 = trunc i64 %594 to i8
  store i8 %597, i8* %533, align 1, !noalias !16
  br label %612

598:                                              ; preds = %592
  %599 = icmp ugt i64 %594, 9223372036854775791
  br i1 %599, label %600, label %602

600:                                              ; preds = %598
  %601 = bitcast %"class.v8_inspector::String16"* %526 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %601) #9
  unreachable

602:                                              ; preds = %598
  %603 = add nuw nsw i64 %594, 8
  %604 = and i64 %603, -8
  %605 = icmp slt i64 %604, 0
  br i1 %605, label %606, label %607

606:                                              ; preds = %602
  call void @abort() #9
  unreachable

607:                                              ; preds = %602
  %608 = shl i64 %604, 1
  %609 = call i8* @_Znwm(i64 %608) #10
  %610 = bitcast i8* %609 to i16*
  store i8* %609, i8** %528, align 8, !noalias !16
  %611 = or i64 %604, -9223372036854775808
  store i64 %611, i64* %529, align 8, !noalias !16
  store i64 %594, i64* %530, align 8, !noalias !16
  br label %612

612:                                              ; preds = %607, %596
  %613 = phi i16* [ %531, %596 ], [ %610, %607 ]
  %614 = add nuw nsw i64 %594, 1
  %615 = add i64 %594, 1
  %616 = icmp ult i64 %615, 16
  br i1 %616, label %707, label %617

617:                                              ; preds = %612
  %618 = getelementptr i16, i16* %613, i64 1
  %619 = getelementptr i16, i16* %618, i64 %594
  %620 = getelementptr i16, i16* %593, i64 1
  %621 = getelementptr i16, i16* %620, i64 %594
  %622 = icmp ult i16* %613, %621
  %623 = icmp ult i16* %593, %619
  %624 = and i1 %622, %623
  br i1 %624, label %707, label %625

625:                                              ; preds = %617
  %626 = and i64 %615, -16
  %627 = getelementptr i16, i16* %613, i64 %626
  %628 = sub i64 %614, %626
  %629 = getelementptr i16, i16* %593, i64 %626
  %630 = add i64 %626, -16
  %631 = lshr exact i64 %630, 4
  %632 = add nuw nsw i64 %631, 1
  %633 = and i64 %632, 3
  %634 = icmp ult i64 %630, 48
  br i1 %634, label %686, label %635

635:                                              ; preds = %625
  %636 = sub nsw i64 %632, %633
  br label %637

637:                                              ; preds = %637, %635
  %638 = phi i64 [ 0, %635 ], [ %683, %637 ]
  %639 = phi i64 [ %636, %635 ], [ %684, %637 ]
  %640 = getelementptr i16, i16* %613, i64 %638
  %641 = getelementptr i16, i16* %593, i64 %638
  %642 = bitcast i16* %641 to <8 x i16>*
  %643 = load <8 x i16>, <8 x i16>* %642, align 2, !alias.scope !19
  %644 = getelementptr i16, i16* %641, i64 8
  %645 = bitcast i16* %644 to <8 x i16>*
  %646 = load <8 x i16>, <8 x i16>* %645, align 2, !alias.scope !19
  %647 = bitcast i16* %640 to <8 x i16>*
  store <8 x i16> %643, <8 x i16>* %647, align 2, !alias.scope !22, !noalias !24
  %648 = getelementptr i16, i16* %640, i64 8
  %649 = bitcast i16* %648 to <8 x i16>*
  store <8 x i16> %646, <8 x i16>* %649, align 2, !alias.scope !22, !noalias !24
  %650 = or i64 %638, 16
  %651 = getelementptr i16, i16* %613, i64 %650
  %652 = getelementptr i16, i16* %593, i64 %650
  %653 = bitcast i16* %652 to <8 x i16>*
  %654 = load <8 x i16>, <8 x i16>* %653, align 2, !alias.scope !19
  %655 = getelementptr i16, i16* %652, i64 8
  %656 = bitcast i16* %655 to <8 x i16>*
  %657 = load <8 x i16>, <8 x i16>* %656, align 2, !alias.scope !19
  %658 = bitcast i16* %651 to <8 x i16>*
  store <8 x i16> %654, <8 x i16>* %658, align 2, !alias.scope !22, !noalias !24
  %659 = getelementptr i16, i16* %651, i64 8
  %660 = bitcast i16* %659 to <8 x i16>*
  store <8 x i16> %657, <8 x i16>* %660, align 2, !alias.scope !22, !noalias !24
  %661 = or i64 %638, 32
  %662 = getelementptr i16, i16* %613, i64 %661
  %663 = getelementptr i16, i16* %593, i64 %661
  %664 = bitcast i16* %663 to <8 x i16>*
  %665 = load <8 x i16>, <8 x i16>* %664, align 2, !alias.scope !19
  %666 = getelementptr i16, i16* %663, i64 8
  %667 = bitcast i16* %666 to <8 x i16>*
  %668 = load <8 x i16>, <8 x i16>* %667, align 2, !alias.scope !19
  %669 = bitcast i16* %662 to <8 x i16>*
  store <8 x i16> %665, <8 x i16>* %669, align 2, !alias.scope !22, !noalias !24
  %670 = getelementptr i16, i16* %662, i64 8
  %671 = bitcast i16* %670 to <8 x i16>*
  store <8 x i16> %668, <8 x i16>* %671, align 2, !alias.scope !22, !noalias !24
  %672 = or i64 %638, 48
  %673 = getelementptr i16, i16* %613, i64 %672
  %674 = getelementptr i16, i16* %593, i64 %672
  %675 = bitcast i16* %674 to <8 x i16>*
  %676 = load <8 x i16>, <8 x i16>* %675, align 2, !alias.scope !19
  %677 = getelementptr i16, i16* %674, i64 8
  %678 = bitcast i16* %677 to <8 x i16>*
  %679 = load <8 x i16>, <8 x i16>* %678, align 2, !alias.scope !19
  %680 = bitcast i16* %673 to <8 x i16>*
  store <8 x i16> %676, <8 x i16>* %680, align 2, !alias.scope !22, !noalias !24
  %681 = getelementptr i16, i16* %673, i64 8
  %682 = bitcast i16* %681 to <8 x i16>*
  store <8 x i16> %679, <8 x i16>* %682, align 2, !alias.scope !22, !noalias !24
  %683 = add i64 %638, 64
  %684 = add i64 %639, -4
  %685 = icmp eq i64 %684, 0
  br i1 %685, label %686, label %637, !llvm.loop !25

686:                                              ; preds = %637, %625
  %687 = phi i64 [ 0, %625 ], [ %683, %637 ]
  %688 = icmp eq i64 %633, 0
  br i1 %688, label %705, label %689

689:                                              ; preds = %686, %689
  %690 = phi i64 [ %702, %689 ], [ %687, %686 ]
  %691 = phi i64 [ %703, %689 ], [ %633, %686 ]
  %692 = getelementptr i16, i16* %613, i64 %690
  %693 = getelementptr i16, i16* %593, i64 %690
  %694 = bitcast i16* %693 to <8 x i16>*
  %695 = load <8 x i16>, <8 x i16>* %694, align 2, !alias.scope !19
  %696 = getelementptr i16, i16* %693, i64 8
  %697 = bitcast i16* %696 to <8 x i16>*
  %698 = load <8 x i16>, <8 x i16>* %697, align 2, !alias.scope !19
  %699 = bitcast i16* %692 to <8 x i16>*
  store <8 x i16> %695, <8 x i16>* %699, align 2, !alias.scope !22, !noalias !24
  %700 = getelementptr i16, i16* %692, i64 8
  %701 = bitcast i16* %700 to <8 x i16>*
  store <8 x i16> %698, <8 x i16>* %701, align 2, !alias.scope !22, !noalias !24
  %702 = add i64 %690, 16
  %703 = add i64 %691, -1
  %704 = icmp eq i64 %703, 0
  br i1 %704, label %705, label %689, !llvm.loop !26

705:                                              ; preds = %689, %686
  %706 = icmp eq i64 %615, %626
  br i1 %706, label %760, label %707

707:                                              ; preds = %705, %617, %612
  %708 = phi i16* [ %613, %617 ], [ %613, %612 ], [ %627, %705 ]
  %709 = phi i64 [ %614, %617 ], [ %614, %612 ], [ %628, %705 ]
  %710 = phi i16* [ %593, %617 ], [ %593, %612 ], [ %629, %705 ]
  %711 = add i64 %709, -1
  %712 = and i64 %709, 7
  %713 = icmp eq i64 %712, 0
  br i1 %713, label %725, label %714

714:                                              ; preds = %707, %714
  %715 = phi i16* [ %721, %714 ], [ %708, %707 ]
  %716 = phi i64 [ %720, %714 ], [ %709, %707 ]
  %717 = phi i16* [ %722, %714 ], [ %710, %707 ]
  %718 = phi i64 [ %723, %714 ], [ %712, %707 ]
  %719 = load i16, i16* %717, align 2
  store i16 %719, i16* %715, align 2, !noalias !16
  %720 = add i64 %716, -1
  %721 = getelementptr inbounds i16, i16* %715, i64 1
  %722 = getelementptr inbounds i16, i16* %717, i64 1
  %723 = add i64 %718, -1
  %724 = icmp eq i64 %723, 0
  br i1 %724, label %725, label %714, !llvm.loop !27

725:                                              ; preds = %714, %707
  %726 = phi i16* [ %708, %707 ], [ %721, %714 ]
  %727 = phi i64 [ %709, %707 ], [ %720, %714 ]
  %728 = phi i16* [ %710, %707 ], [ %722, %714 ]
  %729 = icmp ult i64 %711, 7
  br i1 %729, label %760, label %730

730:                                              ; preds = %725, %730
  %731 = phi i16* [ %757, %730 ], [ %726, %725 ]
  %732 = phi i64 [ %756, %730 ], [ %727, %725 ]
  %733 = phi i16* [ %758, %730 ], [ %728, %725 ]
  %734 = load i16, i16* %733, align 2
  store i16 %734, i16* %731, align 2, !noalias !16
  %735 = getelementptr inbounds i16, i16* %731, i64 1
  %736 = getelementptr inbounds i16, i16* %733, i64 1
  %737 = load i16, i16* %736, align 2
  store i16 %737, i16* %735, align 2, !noalias !16
  %738 = getelementptr inbounds i16, i16* %731, i64 2
  %739 = getelementptr inbounds i16, i16* %733, i64 2
  %740 = load i16, i16* %739, align 2
  store i16 %740, i16* %738, align 2, !noalias !16
  %741 = getelementptr inbounds i16, i16* %731, i64 3
  %742 = getelementptr inbounds i16, i16* %733, i64 3
  %743 = load i16, i16* %742, align 2
  store i16 %743, i16* %741, align 2, !noalias !16
  %744 = getelementptr inbounds i16, i16* %731, i64 4
  %745 = getelementptr inbounds i16, i16* %733, i64 4
  %746 = load i16, i16* %745, align 2
  store i16 %746, i16* %744, align 2, !noalias !16
  %747 = getelementptr inbounds i16, i16* %731, i64 5
  %748 = getelementptr inbounds i16, i16* %733, i64 5
  %749 = load i16, i16* %748, align 2
  store i16 %749, i16* %747, align 2, !noalias !16
  %750 = getelementptr inbounds i16, i16* %731, i64 6
  %751 = getelementptr inbounds i16, i16* %733, i64 6
  %752 = load i16, i16* %751, align 2
  store i16 %752, i16* %750, align 2, !noalias !16
  %753 = getelementptr inbounds i16, i16* %731, i64 7
  %754 = getelementptr inbounds i16, i16* %733, i64 7
  %755 = load i16, i16* %754, align 2
  store i16 %755, i16* %753, align 2, !noalias !16
  %756 = add i64 %732, -8
  %757 = getelementptr inbounds i16, i16* %731, i64 8
  %758 = getelementptr inbounds i16, i16* %733, i64 8
  %759 = icmp eq i64 %756, 0
  br i1 %759, label %760, label %730, !llvm.loop !28

760:                                              ; preds = %725, %730, %705, %591
  %761 = load i64, i64* %522, align 8, !noalias !16
  store i64 %761, i64* %534, align 8, !noalias !16
  %762 = load %"struct.std::__1::pair.424"*, %"struct.std::__1::pair.424"** %535, align 8, !alias.scope !16
  %763 = load %"struct.std::__1::pair.424"*, %"struct.std::__1::pair.424"** %536, align 8, !alias.scope !16
  %764 = icmp ult %"struct.std::__1::pair.424"* %762, %763
  br i1 %764, label %765, label %774

765:                                              ; preds = %760
  %766 = getelementptr inbounds %"struct.std::__1::pair.424", %"struct.std::__1::pair.424"* %762, i64 0, i32 0
  %767 = load i32, i32* %525, align 8, !noalias !16
  store i32 %767, i32* %766, align 8
  %768 = getelementptr inbounds %"struct.std::__1::pair.424", %"struct.std::__1::pair.424"* %762, i64 0, i32 1
  %769 = bitcast %"class.v8_inspector::String16"* %768 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %769, i8* align 8 %527, i64 24, i1 false) #8
  call void @llvm.memset.p0i8.i64(i8* align 8 %527, i8 0, i64 24, i1 false) #8, !noalias !16
  %770 = getelementptr inbounds %"struct.std::__1::pair.424", %"struct.std::__1::pair.424"* %762, i64 0, i32 1, i32 1
  %771 = load i64, i64* %534, align 8, !noalias !16
  store i64 %771, i64* %770, align 8
  %772 = getelementptr inbounds %"struct.std::__1::pair.424", %"struct.std::__1::pair.424"* %762, i64 1
  %773 = ptrtoint %"struct.std::__1::pair.424"* %772 to i64
  store i64 %773, i64* %537, align 8, !alias.scope !16
  br label %779

774:                                              ; preds = %760
  call void @_ZNSt3__16vectorINS_4pairIiN12v8_inspector8String16EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(%"class.std::__1::vector.422"* nonnull %14, %"struct.std::__1::pair.424"* nonnull dereferenceable(40) %11) #8
  %775 = load i8, i8* %533, align 1, !noalias !16
  %776 = icmp slt i8 %775, 0
  br i1 %776, label %777, label %779

777:                                              ; preds = %774
  %778 = load i8*, i8** %528, align 8, !noalias !16
  call void @_ZdlPv(i8* %778) #10
  br label %779

779:                                              ; preds = %777, %774, %765
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %524) #8, !noalias !16
  br label %780

780:                                              ; preds = %779, %584
  %781 = add i64 %562, 1
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %523) #8, !noalias !16
  %782 = load i8, i8* %512, align 1, !noalias !16
  %783 = icmp slt i8 %782, 0
  br i1 %783, label %784, label %786

784:                                              ; preds = %780
  %785 = load i8*, i8** %517, align 8, !noalias !16
  call void @_ZdlPv(i8* %785) #10
  br label %786

786:                                              ; preds = %784, %780
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %510) #8, !noalias !16
  %787 = add nuw i64 %557, 1
  %788 = icmp ult i64 %787, %505
  br i1 %788, label %789, label %539

789:                                              ; preds = %786
  %790 = load i64, i64* %500, align 8, !noalias !16
  %791 = load i64, i64* %502, align 8, !noalias !16
  %792 = sub i64 %790, %791
  %793 = ashr exact i64 %792, 3
  %794 = icmp ugt i64 %793, %787
  br i1 %794, label %556, label %554

795:                                              ; preds = %256, %548
  %796 = phi i64 [ %553, %548 ], [ 0, %256 ]
  %797 = phi i64 [ %551, %548 ], [ 0, %256 ]
  %798 = bitcast %"class.std::__1::vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %798, i8 0, i64 24, i1 false) #8
  %799 = getelementptr inbounds %"class.std::__1::vector.422", %"class.std::__1::vector.422"* %14, i64 0, i32 0, i32 1
  %800 = sub i64 %797, %796
  %801 = sdiv exact i64 %800, 40
  call void @_ZNSt3__16vectorINS_10unique_ptrIN12v8_inspector8protocol8Debugger11SearchMatchENS_14default_deleteIS5_EEEENS_9allocatorIS8_EEE7reserveEm(%"class.std::__1::vector"* %0, i64 %801)
  %802 = getelementptr inbounds %"class.std::__1::vector.422", %"class.std::__1::vector.422"* %14, i64 0, i32 0, i32 0
  %803 = load %"struct.std::__1::pair.424"*, %"struct.std::__1::pair.424"** %802, align 8
  %804 = load %"struct.std::__1::pair.424"*, %"struct.std::__1::pair.424"** %799, align 8
  %805 = icmp eq %"struct.std::__1::pair.424"* %803, %804
  br i1 %805, label %815, label %806

806:                                              ; preds = %795
  %807 = bitcast %"class.std::__1::unique_ptr"* %15 to i8*
  %808 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %15, i64 0, i32 0, i32 0, i32 0
  %809 = bitcast %"class.std::__1::unique_ptr"* %15 to i8**
  %810 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %811 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %812 = bitcast %"class.std::__1::unique_ptr"** %810 to i64*
  br label %856

813:                                              ; preds = %890
  %814 = load %"struct.std::__1::pair.424"*, %"struct.std::__1::pair.424"** %802, align 8
  br label %815

815:                                              ; preds = %813, %795
  %816 = phi %"struct.std::__1::pair.424"* [ %814, %813 ], [ %803, %795 ]
  %817 = icmp eq %"struct.std::__1::pair.424"* %816, null
  br i1 %817, label %840, label %818

818:                                              ; preds = %815
  %819 = bitcast %"struct.std::__1::pair.424"* %816 to i8*
  %820 = load %"struct.std::__1::pair.424"*, %"struct.std::__1::pair.424"** %799, align 8
  %821 = icmp eq %"struct.std::__1::pair.424"* %820, %816
  br i1 %821, label %838, label %822

822:                                              ; preds = %818, %833
  %823 = phi %"struct.std::__1::pair.424"* [ %824, %833 ], [ %820, %818 ]
  %824 = getelementptr inbounds %"struct.std::__1::pair.424", %"struct.std::__1::pair.424"* %823, i64 -1
  %825 = getelementptr inbounds %"struct.std::__1::pair.424", %"struct.std::__1::pair.424"* %823, i64 -1, i32 1
  %826 = bitcast %"class.v8_inspector::String16"* %825 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %827 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %826, i64 0, i32 1, i32 1
  %828 = load i8, i8* %827, align 1
  %829 = icmp slt i8 %828, 0
  br i1 %829, label %830, label %833

830:                                              ; preds = %822
  %831 = bitcast %"class.v8_inspector::String16"* %825 to i8**
  %832 = load i8*, i8** %831, align 8
  call void @_ZdlPv(i8* %832) #10
  br label %833

833:                                              ; preds = %830, %822
  %834 = icmp eq %"struct.std::__1::pair.424"* %824, %816
  br i1 %834, label %835, label %822

835:                                              ; preds = %833
  %836 = bitcast %"class.std::__1::vector.422"* %14 to i8**
  %837 = load i8*, i8** %836, align 8
  br label %838

838:                                              ; preds = %835, %818
  %839 = phi i8* [ %837, %835 ], [ %819, %818 ]
  store %"struct.std::__1::pair.424"* %816, %"struct.std::__1::pair.424"** %799, align 8
  call void @_ZdlPv(i8* %839) #10
  br label %840

840:                                              ; preds = %838, %815
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %257) #8
  %841 = getelementptr inbounds i8, i8* %247, i64 39
  %842 = load i8, i8* %841, align 1
  %843 = icmp slt i8 %842, 0
  br i1 %843, label %844, label %848

844:                                              ; preds = %840
  %845 = getelementptr inbounds i8, i8* %247, i64 16
  %846 = bitcast i8* %845 to i8**
  %847 = load i8*, i8** %846, align 8
  call void @_ZdlPv(i8* %847) #10
  br label %848

848:                                              ; preds = %844, %840
  %849 = getelementptr inbounds i8, i8* %247, i64 8
  %850 = bitcast i8* %849 to %"class.v8::RegExp"**
  %851 = load %"class.v8::RegExp"*, %"class.v8::RegExp"** %850, align 8
  %852 = icmp eq %"class.v8::RegExp"* %851, null
  br i1 %852, label %855, label %853

853:                                              ; preds = %848
  %854 = bitcast %"class.v8::RegExp"* %851 to i64*
  call void @_ZN2v82V813DisposeGlobalEPm(i64* nonnull %854) #8
  br label %855

855:                                              ; preds = %848, %853
  call void @_ZdlPv(i8* nonnull %247) #10
  ret void

856:                                              ; preds = %806, %890
  %857 = phi %"struct.std::__1::pair.424"* [ %803, %806 ], [ %891, %890 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %807) #8
  %858 = getelementptr inbounds %"struct.std::__1::pair.424", %"struct.std::__1::pair.424"* %857, i64 0, i32 0
  %859 = load i32, i32* %858, align 8
  %860 = call i8* @_Znwm(i64 56) #10
  %861 = bitcast i8* %860 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN12v8_inspector8protocol8Debugger11SearchMatchE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN12v8_inspector8protocol8Debugger11SearchMatchE, i64 0, inrange i32 1, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %861, align 8
  %862 = getelementptr inbounds i8, i8* %860, i64 16
  %863 = getelementptr inbounds i8, i8* %860, i64 24
  call void @llvm.memset.p0i8.i64(i8* align 8 %863, i8 0, i64 32, i1 false) #8
  %864 = sitofp i32 %859 to double
  %865 = bitcast i8* %862 to double*
  store double %864, double* %865, align 8
  %866 = bitcast i8* %863 to %"class.std::__1::basic_string"*
  %867 = getelementptr inbounds %"struct.std::__1::pair.424", %"struct.std::__1::pair.424"* %857, i64 0, i32 1, i32 0
  %868 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringItNS_11char_traitsItEENS_9allocatorItEEEaSERKS5_(%"class.std::__1::basic_string"* %866, %"class.std::__1::basic_string"* dereferenceable(24) %867) #8
  %869 = getelementptr inbounds %"struct.std::__1::pair.424", %"struct.std::__1::pair.424"* %857, i64 0, i32 1, i32 1
  %870 = load i64, i64* %869, align 8
  %871 = getelementptr inbounds i8, i8* %860, i64 48
  %872 = bitcast i8* %871 to i64*
  store i64 %870, i64* %872, align 8
  store i8* %860, i8** %809, align 8
  %873 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %810, align 8
  %874 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %811, align 8
  %875 = icmp ult %"class.std::__1::unique_ptr"* %873, %874
  br i1 %875, label %876, label %881

876:                                              ; preds = %856
  %877 = ptrtoint i8* %860 to i64
  store %"class.v8_inspector::protocol::Debugger::SearchMatch"* null, %"class.v8_inspector::protocol::Debugger::SearchMatch"** %808, align 8
  %878 = bitcast %"class.std::__1::unique_ptr"* %873 to i64*
  store i64 %877, i64* %878, align 8
  %879 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %873, i64 1
  %880 = ptrtoint %"class.std::__1::unique_ptr"* %879 to i64
  store i64 %880, i64* %812, align 8
  br label %882

881:                                              ; preds = %856
  call void @_ZNSt3__16vectorINS_10unique_ptrIN12v8_inspector8protocol8Debugger11SearchMatchENS_14default_deleteIS5_EEEENS_9allocatorIS8_EEE21__push_back_slow_pathIS8_EEvOT_(%"class.std::__1::vector"* %0, %"class.std::__1::unique_ptr"* nonnull dereferenceable(8) %15) #8
  br label %882

882:                                              ; preds = %876, %881
  %883 = load %"class.v8_inspector::protocol::Debugger::SearchMatch"*, %"class.v8_inspector::protocol::Debugger::SearchMatch"** %808, align 8
  store %"class.v8_inspector::protocol::Debugger::SearchMatch"* null, %"class.v8_inspector::protocol::Debugger::SearchMatch"** %808, align 8
  %884 = icmp eq %"class.v8_inspector::protocol::Debugger::SearchMatch"* %883, null
  br i1 %884, label %890, label %885

885:                                              ; preds = %882
  %886 = bitcast %"class.v8_inspector::protocol::Debugger::SearchMatch"* %883 to void (%"class.v8_inspector::protocol::Debugger::SearchMatch"*)***
  %887 = load void (%"class.v8_inspector::protocol::Debugger::SearchMatch"*)**, void (%"class.v8_inspector::protocol::Debugger::SearchMatch"*)*** %886, align 8
  %888 = getelementptr inbounds void (%"class.v8_inspector::protocol::Debugger::SearchMatch"*)*, void (%"class.v8_inspector::protocol::Debugger::SearchMatch"*)** %887, i64 2
  %889 = load void (%"class.v8_inspector::protocol::Debugger::SearchMatch"*)*, void (%"class.v8_inspector::protocol::Debugger::SearchMatch"*)** %888, align 8
  call void %889(%"class.v8_inspector::protocol::Debugger::SearchMatch"* nonnull %883) #8
  br label %890

890:                                              ; preds = %882, %885
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %807) #8
  %891 = getelementptr inbounds %"struct.std::__1::pair.424", %"struct.std::__1::pair.424"* %857, i64 1
  %892 = icmp eq %"struct.std::__1::pair.424"* %891, %804
  br i1 %892, label %813, label %856
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_10unique_ptrIN12v8_inspector8protocol8Debugger11SearchMatchENS_14default_deleteIS5_EEEENS_9allocatorIS8_EEE7reserveEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.std::__1::unique_ptr"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  %10 = icmp ult i64 %9, %1
  %11 = inttoptr i64 %7 to %"class.std::__1::unique_ptr"*
  br i1 %10, label %12, label %135

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %14 = bitcast %"class.std::__1::unique_ptr"** %13 to i64*
  %15 = icmp ugt i64 %1, 2305843009213693951
  br i1 %15, label %16, label %17

16:                                               ; preds = %12
  tail call void @abort() #9
  unreachable

17:                                               ; preds = %12
  %18 = load i64, i64* %14, align 8
  %19 = sub i64 %18, %7
  %20 = ashr exact i64 %19, 3
  %21 = shl i64 %1, 3
  %22 = tail call i8* @_Znwm(i64 %21) #10
  %23 = bitcast i8* %22 to %"class.std::__1::unique_ptr"*
  %24 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %23, i64 %20
  %25 = ptrtoint %"class.std::__1::unique_ptr"* %24 to i64
  %26 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %23, i64 %1
  %27 = ptrtoint %"class.std::__1::unique_ptr"* %26 to i64
  %28 = inttoptr i64 %18 to %"class.std::__1::unique_ptr"*
  %29 = icmp eq %"class.std::__1::unique_ptr"* %28, %11
  br i1 %29, label %57, label %30

30:                                               ; preds = %17
  %31 = getelementptr %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %28, i64 -1, i32 0, i32 0, i32 0
  %32 = bitcast %"class.v8_inspector::protocol::Debugger::SearchMatch"** %31 to i8*
  %33 = sub i64 0, %7
  %34 = getelementptr i8, i8* %32, i64 %33
  %35 = ptrtoint i8* %34 to i64
  %36 = lshr i64 %35, 3
  %37 = add nuw nsw i64 %36, 1
  %38 = and i64 %37, 7
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %52, label %40

40:                                               ; preds = %30, %40
  %41 = phi %"class.std::__1::unique_ptr"* [ %44, %40 ], [ %24, %30 ]
  %42 = phi %"class.std::__1::unique_ptr"* [ %45, %40 ], [ %28, %30 ]
  %43 = phi i64 [ %50, %40 ], [ %38, %30 ]
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %41, i64 -1
  %45 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %42, i64 -1
  %46 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %45, i64 0, i32 0, i32 0, i32 0
  %47 = bitcast %"class.std::__1::unique_ptr"* %45 to i64*
  %48 = load i64, i64* %47, align 8
  store %"class.v8_inspector::protocol::Debugger::SearchMatch"* null, %"class.v8_inspector::protocol::Debugger::SearchMatch"** %46, align 8
  %49 = bitcast %"class.std::__1::unique_ptr"* %44 to i64*
  store i64 %48, i64* %49, align 8
  %50 = add i64 %43, -1
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %52, label %40, !llvm.loop !29

52:                                               ; preds = %40, %30
  %53 = phi %"class.std::__1::unique_ptr"* [ undef, %30 ], [ %44, %40 ]
  %54 = phi %"class.std::__1::unique_ptr"* [ %24, %30 ], [ %44, %40 ]
  %55 = phi %"class.std::__1::unique_ptr"* [ %28, %30 ], [ %45, %40 ]
  %56 = icmp ult i8* %34, inttoptr (i64 56 to i8*)
  br i1 %56, label %110, label %58

57:                                               ; preds = %17
  store i64 %25, i64* %6, align 8
  store i64 %25, i64* %14, align 8
  store i64 %27, i64* %4, align 8
  br label %130

58:                                               ; preds = %52, %58
  %59 = phi %"class.std::__1::unique_ptr"* [ %103, %58 ], [ %54, %52 ]
  %60 = phi %"class.std::__1::unique_ptr"* [ %104, %58 ], [ %55, %52 ]
  %61 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %59, i64 -1
  %62 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %60, i64 -1
  %63 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %62, i64 0, i32 0, i32 0, i32 0
  %64 = bitcast %"class.std::__1::unique_ptr"* %62 to i64*
  %65 = load i64, i64* %64, align 8
  store %"class.v8_inspector::protocol::Debugger::SearchMatch"* null, %"class.v8_inspector::protocol::Debugger::SearchMatch"** %63, align 8
  %66 = bitcast %"class.std::__1::unique_ptr"* %61 to i64*
  store i64 %65, i64* %66, align 8
  %67 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %59, i64 -2
  %68 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %60, i64 -2
  %69 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %68, i64 0, i32 0, i32 0, i32 0
  %70 = bitcast %"class.std::__1::unique_ptr"* %68 to i64*
  %71 = load i64, i64* %70, align 8
  store %"class.v8_inspector::protocol::Debugger::SearchMatch"* null, %"class.v8_inspector::protocol::Debugger::SearchMatch"** %69, align 8
  %72 = bitcast %"class.std::__1::unique_ptr"* %67 to i64*
  store i64 %71, i64* %72, align 8
  %73 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %59, i64 -3
  %74 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %60, i64 -3
  %75 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %74, i64 0, i32 0, i32 0, i32 0
  %76 = bitcast %"class.std::__1::unique_ptr"* %74 to i64*
  %77 = load i64, i64* %76, align 8
  store %"class.v8_inspector::protocol::Debugger::SearchMatch"* null, %"class.v8_inspector::protocol::Debugger::SearchMatch"** %75, align 8
  %78 = bitcast %"class.std::__1::unique_ptr"* %73 to i64*
  store i64 %77, i64* %78, align 8
  %79 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %59, i64 -4
  %80 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %60, i64 -4
  %81 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %80, i64 0, i32 0, i32 0, i32 0
  %82 = bitcast %"class.std::__1::unique_ptr"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  store %"class.v8_inspector::protocol::Debugger::SearchMatch"* null, %"class.v8_inspector::protocol::Debugger::SearchMatch"** %81, align 8
  %84 = bitcast %"class.std::__1::unique_ptr"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %59, i64 -5
  %86 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %60, i64 -5
  %87 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %86, i64 0, i32 0, i32 0, i32 0
  %88 = bitcast %"class.std::__1::unique_ptr"* %86 to i64*
  %89 = load i64, i64* %88, align 8
  store %"class.v8_inspector::protocol::Debugger::SearchMatch"* null, %"class.v8_inspector::protocol::Debugger::SearchMatch"** %87, align 8
  %90 = bitcast %"class.std::__1::unique_ptr"* %85 to i64*
  store i64 %89, i64* %90, align 8
  %91 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %59, i64 -6
  %92 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %60, i64 -6
  %93 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %92, i64 0, i32 0, i32 0, i32 0
  %94 = bitcast %"class.std::__1::unique_ptr"* %92 to i64*
  %95 = load i64, i64* %94, align 8
  store %"class.v8_inspector::protocol::Debugger::SearchMatch"* null, %"class.v8_inspector::protocol::Debugger::SearchMatch"** %93, align 8
  %96 = bitcast %"class.std::__1::unique_ptr"* %91 to i64*
  store i64 %95, i64* %96, align 8
  %97 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %59, i64 -7
  %98 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %60, i64 -7
  %99 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %98, i64 0, i32 0, i32 0, i32 0
  %100 = bitcast %"class.std::__1::unique_ptr"* %98 to i64*
  %101 = load i64, i64* %100, align 8
  store %"class.v8_inspector::protocol::Debugger::SearchMatch"* null, %"class.v8_inspector::protocol::Debugger::SearchMatch"** %99, align 8
  %102 = bitcast %"class.std::__1::unique_ptr"* %97 to i64*
  store i64 %101, i64* %102, align 8
  %103 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %59, i64 -8
  %104 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %60, i64 -8
  %105 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %104, i64 0, i32 0, i32 0, i32 0
  %106 = bitcast %"class.std::__1::unique_ptr"* %104 to i64*
  %107 = load i64, i64* %106, align 8
  store %"class.v8_inspector::protocol::Debugger::SearchMatch"* null, %"class.v8_inspector::protocol::Debugger::SearchMatch"** %105, align 8
  %108 = bitcast %"class.std::__1::unique_ptr"* %103 to i64*
  store i64 %107, i64* %108, align 8
  %109 = icmp eq %"class.std::__1::unique_ptr"* %104, %11
  br i1 %109, label %110, label %58

110:                                              ; preds = %58, %52
  %111 = phi %"class.std::__1::unique_ptr"* [ %53, %52 ], [ %103, %58 ]
  %112 = ptrtoint %"class.std::__1::unique_ptr"* %111 to i64
  %113 = load i64, i64* %6, align 8
  %114 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %13, align 8
  %115 = inttoptr i64 %113 to %"class.std::__1::unique_ptr"*
  store i64 %112, i64* %6, align 8
  store i64 %25, i64* %14, align 8
  store i64 %27, i64* %4, align 8
  %116 = icmp eq %"class.std::__1::unique_ptr"* %114, %115
  br i1 %116, label %130, label %117

117:                                              ; preds = %110, %128
  %118 = phi %"class.std::__1::unique_ptr"* [ %119, %128 ], [ %114, %110 ]
  %119 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %118, i64 -1
  %120 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %119, i64 0, i32 0, i32 0, i32 0
  %121 = load %"class.v8_inspector::protocol::Debugger::SearchMatch"*, %"class.v8_inspector::protocol::Debugger::SearchMatch"** %120, align 8
  store %"class.v8_inspector::protocol::Debugger::SearchMatch"* null, %"class.v8_inspector::protocol::Debugger::SearchMatch"** %120, align 8
  %122 = icmp eq %"class.v8_inspector::protocol::Debugger::SearchMatch"* %121, null
  br i1 %122, label %128, label %123

123:                                              ; preds = %117
  %124 = bitcast %"class.v8_inspector::protocol::Debugger::SearchMatch"* %121 to void (%"class.v8_inspector::protocol::Debugger::SearchMatch"*)***
  %125 = load void (%"class.v8_inspector::protocol::Debugger::SearchMatch"*)**, void (%"class.v8_inspector::protocol::Debugger::SearchMatch"*)*** %124, align 8
  %126 = getelementptr inbounds void (%"class.v8_inspector::protocol::Debugger::SearchMatch"*)*, void (%"class.v8_inspector::protocol::Debugger::SearchMatch"*)** %125, i64 2
  %127 = load void (%"class.v8_inspector::protocol::Debugger::SearchMatch"*)*, void (%"class.v8_inspector::protocol::Debugger::SearchMatch"*)** %126, align 8
  tail call void %127(%"class.v8_inspector::protocol::Debugger::SearchMatch"* nonnull %121) #8
  br label %128

128:                                              ; preds = %123, %117
  %129 = icmp eq %"class.std::__1::unique_ptr"* %119, %115
  br i1 %129, label %130, label %117

130:                                              ; preds = %128, %57, %110
  %131 = phi i64 [ %7, %57 ], [ %113, %110 ], [ %113, %128 ]
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %135, label %133

133:                                              ; preds = %130
  %134 = inttoptr i64 %131 to i8*
  tail call void @_ZdlPv(i8* %134) #10
  br label %135

135:                                              ; preds = %133, %130, %2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12v8_inspector13findSourceURLERKNS_8String16Eb(%"class.v8_inspector::String16"* noalias sret, %"class.v8_inspector::String16"* dereferenceable(32), i1 zeroext) local_unnamed_addr #0 {
  %4 = alloca %"class.v8_inspector::String16", align 8
  %5 = bitcast %"class.v8_inspector::String16"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #8
  call void @_ZN12v8_inspector8String16C1EPKc(%"class.v8_inspector::String16"* nonnull %4, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0)) #8
  call fastcc void @_ZN12v8_inspector12_GLOBAL__N_116findMagicCommentERKNS_8String16ES3_b(%"class.v8_inspector::String16"* noalias %0, %"class.v8_inspector::String16"* dereferenceable(32) %1, %"class.v8_inspector::String16"* nonnull dereferenceable(32) %4, i1 zeroext %2)
  %6 = bitcast %"class.v8_inspector::String16"* %4 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %6, i64 0, i32 1, i32 1
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  br i1 %9, label %10, label %13

10:                                               ; preds = %3
  %11 = bitcast %"class.v8_inspector::String16"* %4 to i8**
  %12 = load i8*, i8** %11, align 8
  call void @_ZdlPv(i8* %12) #10
  br label %13

13:                                               ; preds = %3, %10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN12v8_inspector12_GLOBAL__N_116findMagicCommentERKNS_8String16ES3_b(%"class.v8_inspector::String16"* noalias, %"class.v8_inspector::String16"* dereferenceable(32), %"class.v8_inspector::String16"* readonly dereferenceable(32), i1 zeroext) unnamed_addr #0 {
  %5 = alloca %"class.v8_inspector::String16", align 8
  %6 = alloca %"class.v8_inspector::String16", align 8
  %7 = alloca %"class.v8_inspector::String16", align 8
  %8 = alloca %"class.v8_inspector::String16", align 8
  %9 = alloca %"class.v8_inspector::String16", align 8
  %10 = bitcast %"class.v8_inspector::String16"* %1 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %11 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %10, i64 0, i32 1, i32 1
  %12 = load i8, i8* %11, align 1
  %13 = icmp slt i8 %12, 0
  %14 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = zext i8 %12 to i64
  %17 = select i1 %13, i64 %15, i64 %16
  %18 = bitcast %"class.v8_inspector::String16"* %2 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %19 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %18, i64 0, i32 1, i32 1
  %20 = load i8, i8* %19, align 1
  %21 = icmp slt i8 %20, 0
  %22 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = zext i8 %20 to i64
  %25 = select i1 %21, i64 %23, i64 %24
  %26 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %27 = load i16*, i16** %26, align 8
  %28 = bitcast %"class.v8_inspector::String16"* %1 to i16*
  %29 = select i1 %13, i16* %27, i16* %28
  %30 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = load i16*, i16** %30, align 8
  %32 = bitcast %"class.v8_inspector::String16"* %2 to i16*
  %33 = select i1 %21, i16* %31, i16* %32
  %34 = getelementptr inbounds i16, i16* %33, i64 -1
  %35 = shl nuw i64 %25, 1
  %36 = ashr exact i64 %35, 1
  %37 = icmp eq i64 %25, 0
  %38 = add nsw i64 %36, -1
  %39 = getelementptr inbounds i16, i16* %29, i64 %38
  %40 = getelementptr inbounds i16, i16* %34, i64 %25
  %41 = ptrtoint i16* %29 to i64
  %42 = xor i1 %3, true
  br i1 %37, label %47, label %43

43:                                               ; preds = %4
  %44 = shl nuw i64 %17, 1
  %45 = ashr exact i64 %44, 1
  %46 = icmp slt i64 %45, %36
  br i1 %46, label %117, label %88

47:                                               ; preds = %4
  %48 = icmp eq i64 %17, 9223372036854775807
  br i1 %48, label %117, label %49

49:                                               ; preds = %47, %82
  %50 = phi i64 [ %86, %82 ], [ %17, %47 ]
  %51 = shl nuw i64 %50, 1
  %52 = ashr exact i64 %51, 1
  %53 = icmp ult i64 %52, 4
  br i1 %53, label %121, label %54

54:                                               ; preds = %49
  %55 = add nsw i64 %52, -4
  %56 = getelementptr inbounds i16, i16* %29, i64 %55
  %57 = load i16, i16* %56, align 2
  %58 = icmp eq i16 %57, 47
  br i1 %58, label %59, label %82

59:                                               ; preds = %54
  %60 = add nsw i64 %52, -3
  %61 = getelementptr inbounds i16, i16* %29, i64 %60
  %62 = load i16, i16* %61, align 2
  %63 = icmp ne i16 %62, 47
  %64 = or i1 %63, %3
  %65 = icmp ne i16 %62, 42
  %66 = or i1 %65, %42
  %67 = and i1 %64, %66
  br i1 %67, label %82, label %68

68:                                               ; preds = %59
  %69 = add nsw i64 %52, -2
  %70 = getelementptr inbounds i16, i16* %29, i64 %69
  %71 = load i16, i16* %70, align 2
  switch i16 %71, label %82 [
    i16 35, label %72
    i16 64, label %72
  ]

72:                                               ; preds = %68, %68
  %73 = add nsw i64 %52, -1
  %74 = getelementptr inbounds i16, i16* %29, i64 %73
  %75 = load i16, i16* %74, align 2
  switch i16 %75, label %82 [
    i16 32, label %76
    i16 9, label %76
  ]

76:                                               ; preds = %72, %72
  %77 = icmp ult i64 %52, %17
  br i1 %77, label %78, label %82

78:                                               ; preds = %76
  %79 = getelementptr inbounds i16, i16* %29, i64 %52
  %80 = load i16, i16* %79, align 2
  %81 = icmp eq i16 %80, 61
  br i1 %81, label %162, label %82

82:                                               ; preds = %72, %68, %59, %78, %76, %54
  %83 = icmp ult i64 %17, %55
  %84 = select i1 %83, i64 %17, i64 %55
  %85 = icmp ugt i64 %17, %55
  %86 = select i1 %85, i64 %84, i64 %17
  %87 = icmp eq i64 %86, 9223372036854775807
  br i1 %87, label %117, label %49

88:                                               ; preds = %43, %128
  %89 = phi i64 [ %134, %128 ], [ %17, %43 ]
  %90 = getelementptr inbounds i16, i16* %29, i64 %89
  br label %91

91:                                               ; preds = %99, %88
  %92 = phi i16* [ %90, %88 ], [ %95, %99 ]
  %93 = icmp eq i16* %39, %92
  br i1 %93, label %117, label %94

94:                                               ; preds = %91
  %95 = getelementptr inbounds i16, i16* %92, i64 -1
  %96 = load i16, i16* %95, align 2
  %97 = load i16, i16* %40, align 2
  %98 = icmp eq i16 %96, %97
  br i1 %98, label %100, label %99

99:                                               ; preds = %104, %94
  br label %91

100:                                              ; preds = %94, %104
  %101 = phi i16* [ %105, %104 ], [ %95, %94 ]
  %102 = phi i16* [ %107, %104 ], [ %40, %94 ]
  %103 = icmp eq i16* %102, %33
  br i1 %103, label %110, label %104

104:                                              ; preds = %100
  %105 = getelementptr inbounds i16, i16* %101, i64 -1
  %106 = load i16, i16* %105, align 2
  %107 = getelementptr inbounds i16, i16* %102, i64 -1
  %108 = load i16, i16* %107, align 2
  %109 = icmp eq i16 %106, %108
  br i1 %109, label %100, label %99

110:                                              ; preds = %100
  %111 = icmp eq i16* %101, %90
  %112 = ptrtoint i16* %101 to i64
  %113 = sub i64 %112, %41
  %114 = ashr exact i64 %113, 1
  %115 = icmp eq i64 %113, -2
  %116 = or i1 %111, %115
  br i1 %116, label %117, label %119

117:                                              ; preds = %110, %128, %91, %82, %43, %47
  %118 = bitcast %"class.v8_inspector::String16"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %118, i8 0, i64 32, i1 false)
  br label %405

119:                                              ; preds = %110
  %120 = icmp ult i64 %114, 4
  br i1 %120, label %121, label %123

121:                                              ; preds = %119, %49
  %122 = bitcast %"class.v8_inspector::String16"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %122, i8 0, i64 32, i1 false)
  br label %405

123:                                              ; preds = %119
  %124 = add nsw i64 %114, -4
  %125 = getelementptr inbounds i16, i16* %29, i64 %124
  %126 = load i16, i16* %125, align 2
  %127 = icmp eq i16 %126, 47
  br i1 %127, label %138, label %128

128:                                              ; preds = %151, %147, %138, %123, %155, %158
  %129 = icmp ult i64 %17, %124
  %130 = select i1 %129, i64 %17, i64 %124
  %131 = sub i64 %17, %130
  %132 = icmp ugt i64 %131, %25
  %133 = add i64 %25, %130
  %134 = select i1 %132, i64 %133, i64 %17
  %135 = shl nuw i64 %134, 1
  %136 = ashr exact i64 %135, 1
  %137 = icmp slt i64 %136, %36
  br i1 %137, label %117, label %88

138:                                              ; preds = %123
  %139 = add nsw i64 %114, -3
  %140 = getelementptr inbounds i16, i16* %29, i64 %139
  %141 = load i16, i16* %140, align 2
  %142 = icmp ne i16 %141, 47
  %143 = or i1 %142, %3
  %144 = icmp ne i16 %141, 42
  %145 = or i1 %144, %42
  %146 = and i1 %143, %145
  br i1 %146, label %128, label %147

147:                                              ; preds = %138
  %148 = add nsw i64 %114, -2
  %149 = getelementptr inbounds i16, i16* %29, i64 %148
  %150 = load i16, i16* %149, align 2
  switch i16 %150, label %128 [
    i16 35, label %151
    i16 64, label %151
  ]

151:                                              ; preds = %147, %147
  %152 = add nsw i64 %114, -1
  %153 = getelementptr inbounds i16, i16* %29, i64 %152
  %154 = load i16, i16* %153, align 2
  switch i16 %154, label %128 [
    i16 32, label %155
    i16 9, label %155
  ]

155:                                              ; preds = %151, %151
  %156 = add i64 %114, %25
  %157 = icmp ult i64 %156, %17
  br i1 %157, label %158, label %128

158:                                              ; preds = %155
  %159 = getelementptr inbounds i16, i16* %29, i64 %156
  %160 = load i16, i16* %159, align 2
  %161 = icmp eq i16 %160, 61
  br i1 %161, label %162, label %128

162:                                              ; preds = %158, %78
  %163 = phi i64 [ %52, %78 ], [ %156, %158 ]
  br i1 %3, label %164, label %257

164:                                              ; preds = %162
  %165 = bitcast %"class.v8_inspector::String16"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %165) #8
  call void @_ZN12v8_inspector8String16C1EPKc(%"class.v8_inspector::String16"* nonnull %5, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0)) #8
  %166 = add i64 %163, 1
  %167 = load i8, i8* %11, align 1
  %168 = icmp slt i8 %167, 0
  %169 = load i16*, i16** %26, align 8
  %170 = load i64, i64* %14, align 8
  %171 = zext i8 %167 to i64
  %172 = select i1 %168, i16* %169, i16* %28
  %173 = select i1 %168, i64 %170, i64 %171
  %174 = bitcast %"class.v8_inspector::String16"* %5 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %175 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %174, i64 0, i32 1, i32 1
  %176 = load i8, i8* %175, align 1
  %177 = icmp slt i8 %176, 0
  %178 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %179 = load i16*, i16** %178, align 8
  %180 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %181 = load i64, i64* %180, align 8
  %182 = bitcast %"class.v8_inspector::String16"* %5 to i16*
  %183 = zext i8 %176 to i64
  %184 = select i1 %177, i16* %179, i16* %182
  %185 = select i1 %177, i64 %181, i64 %183
  %186 = icmp ugt i64 %173, %163
  %187 = bitcast i16* %179 to i8*
  br i1 %186, label %188, label %247

188:                                              ; preds = %164
  %189 = icmp eq i64 %185, 0
  br i1 %189, label %247, label %190

190:                                              ; preds = %188
  %191 = getelementptr inbounds i16, i16* %172, i64 %166
  %192 = getelementptr inbounds i16, i16* %172, i64 %173
  %193 = shl nuw i64 %185, 1
  %194 = ashr exact i64 %193, 1
  %195 = ptrtoint i16* %192 to i64
  %196 = ptrtoint i16* %191 to i64
  %197 = sub i64 %195, %196
  %198 = ashr exact i64 %197, 1
  %199 = icmp slt i64 %198, %194
  br i1 %199, label %239, label %200

200:                                              ; preds = %190
  %201 = load i16, i16* %184, align 2
  br label %202

202:                                              ; preds = %231, %200
  %203 = phi i64 [ %235, %231 ], [ %198, %200 ]
  %204 = phi i16* [ %232, %231 ], [ %191, %200 ]
  %205 = sub nsw i64 %203, %194
  %206 = add nsw i64 %205, 1
  %207 = icmp eq i64 %206, 0
  br i1 %207, label %239, label %208

208:                                              ; preds = %202, %213
  %209 = phi i64 [ %215, %213 ], [ %206, %202 ]
  %210 = phi i16* [ %214, %213 ], [ %204, %202 ]
  %211 = load i16, i16* %210, align 2
  %212 = icmp eq i16 %211, %201
  br i1 %212, label %217, label %213

213:                                              ; preds = %208
  %214 = getelementptr inbounds i16, i16* %210, i64 1
  %215 = add i64 %209, -1
  %216 = icmp eq i64 %215, 0
  br i1 %216, label %239, label %208

217:                                              ; preds = %208
  %218 = icmp eq i16* %210, null
  br i1 %218, label %239, label %219

219:                                              ; preds = %217, %226
  %220 = phi i16* [ %224, %226 ], [ %210, %217 ]
  %221 = phi i16* [ %227, %226 ], [ %184, %217 ]
  %222 = phi i64 [ %223, %226 ], [ %194, %217 ]
  %223 = add i64 %222, -1
  %224 = getelementptr inbounds i16, i16* %220, i64 1
  %225 = icmp eq i64 %223, 0
  br i1 %225, label %237, label %226

226:                                              ; preds = %219
  %227 = getelementptr inbounds i16, i16* %221, i64 1
  %228 = load i16, i16* %224, align 2
  %229 = load i16, i16* %227, align 2
  %230 = icmp eq i16 %229, %228
  br i1 %230, label %219, label %231

231:                                              ; preds = %226
  %232 = getelementptr inbounds i16, i16* %210, i64 1
  %233 = ptrtoint i16* %232 to i64
  %234 = sub i64 %195, %233
  %235 = ashr exact i64 %234, 1
  %236 = icmp slt i64 %235, %194
  br i1 %236, label %239, label %202

237:                                              ; preds = %219
  %238 = ptrtoint i16* %210 to i64
  br label %239

239:                                              ; preds = %231, %217, %202, %213, %237, %190
  %240 = phi i64 [ %238, %237 ], [ %195, %190 ], [ %195, %213 ], [ %195, %202 ], [ %195, %217 ], [ %195, %231 ]
  %241 = phi i16* [ %210, %237 ], [ %192, %190 ], [ %192, %213 ], [ %192, %202 ], [ %192, %217 ], [ %192, %231 ]
  %242 = icmp eq i16* %241, %192
  %243 = ptrtoint i16* %172 to i64
  %244 = sub i64 %240, %243
  %245 = ashr exact i64 %244, 1
  %246 = select i1 %242, i64 -1, i64 %245
  br label %247

247:                                              ; preds = %164, %188, %239
  %248 = phi i64 [ -1, %164 ], [ %166, %188 ], [ %246, %239 ]
  br i1 %177, label %249, label %250

249:                                              ; preds = %247
  call void @_ZdlPv(i8* %187) #10
  br label %250

250:                                              ; preds = %247, %249
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %165) #8
  %251 = icmp eq i64 %248, -1
  br i1 %251, label %252, label %254

252:                                              ; preds = %250
  %253 = bitcast %"class.v8_inspector::String16"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %253, i8 0, i64 32, i1 false)
  br label %405

254:                                              ; preds = %250
  %255 = bitcast %"class.v8_inspector::String16"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %255) #8
  %256 = sub i64 %248, %166
  call void @_ZNK12v8_inspector8String169substringEmm(%"class.v8_inspector::String16"* nonnull sret %6, %"class.v8_inspector::String16"* %1, i64 %166, i64 %256)
  br label %260

257:                                              ; preds = %162
  %258 = add nuw i64 %163, 1
  %259 = bitcast %"class.v8_inspector::String16"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %259) #8
  call void @_ZNK12v8_inspector8String169substringEmm(%"class.v8_inspector::String16"* nonnull sret %6, %"class.v8_inspector::String16"* %1, i64 %258, i64 4294967295)
  br label %260

260:                                              ; preds = %257, %254
  %261 = phi i8* [ %259, %257 ], [ %255, %254 ]
  %262 = bitcast %"class.v8_inspector::String16"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %262) #8
  call void @_ZN12v8_inspector8String16C1EPKc(%"class.v8_inspector::String16"* nonnull %7, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)) #8
  %263 = bitcast %"class.v8_inspector::String16"* %6 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %264 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %263, i64 0, i32 1, i32 1
  %265 = load i8, i8* %264, align 1
  %266 = icmp slt i8 %265, 0
  %267 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %268 = load i16*, i16** %267, align 8
  %269 = bitcast %"class.v8_inspector::String16"* %6 to i16*
  %270 = select i1 %266, i16* %268, i16* %269
  %271 = bitcast %"class.v8_inspector::String16"* %7 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %272 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %271, i64 0, i32 1, i32 1
  %273 = load i8, i8* %272, align 1
  %274 = icmp slt i8 %273, 0
  %275 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %276 = load i16*, i16** %275, align 8
  %277 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %278 = load i64, i64* %277, align 8
  %279 = bitcast %"class.v8_inspector::String16"* %7 to i16*
  %280 = zext i8 %273 to i64
  %281 = select i1 %274, i16* %276, i16* %279
  %282 = select i1 %274, i64 %278, i64 %280
  %283 = icmp eq i64 %282, 0
  %284 = bitcast i16* %276 to i8*
  br i1 %283, label %344, label %285

285:                                              ; preds = %260
  %286 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %287 = load i64, i64* %286, align 8
  %288 = zext i8 %265 to i64
  %289 = select i1 %266, i64 %287, i64 %288
  %290 = getelementptr inbounds i16, i16* %270, i64 %289
  %291 = shl nuw i64 %282, 1
  %292 = ashr exact i64 %291, 1
  %293 = ptrtoint i16* %290 to i64
  %294 = ptrtoint i16* %270 to i64
  %295 = shl nuw i64 %289, 1
  %296 = ashr exact i64 %295, 1
  %297 = icmp slt i64 %296, %292
  br i1 %297, label %337, label %298

298:                                              ; preds = %285
  %299 = load i16, i16* %281, align 2
  br label %300

300:                                              ; preds = %329, %298
  %301 = phi i64 [ %333, %329 ], [ %296, %298 ]
  %302 = phi i16* [ %330, %329 ], [ %270, %298 ]
  %303 = sub nsw i64 %301, %292
  %304 = add nsw i64 %303, 1
  %305 = icmp eq i64 %304, 0
  br i1 %305, label %337, label %306

306:                                              ; preds = %300, %311
  %307 = phi i64 [ %313, %311 ], [ %304, %300 ]
  %308 = phi i16* [ %312, %311 ], [ %302, %300 ]
  %309 = load i16, i16* %308, align 2
  %310 = icmp eq i16 %309, %299
  br i1 %310, label %315, label %311

311:                                              ; preds = %306
  %312 = getelementptr inbounds i16, i16* %308, i64 1
  %313 = add i64 %307, -1
  %314 = icmp eq i64 %313, 0
  br i1 %314, label %337, label %306

315:                                              ; preds = %306
  %316 = icmp eq i16* %308, null
  br i1 %316, label %337, label %317

317:                                              ; preds = %315, %324
  %318 = phi i16* [ %322, %324 ], [ %308, %315 ]
  %319 = phi i16* [ %325, %324 ], [ %281, %315 ]
  %320 = phi i64 [ %321, %324 ], [ %292, %315 ]
  %321 = add i64 %320, -1
  %322 = getelementptr inbounds i16, i16* %318, i64 1
  %323 = icmp eq i64 %321, 0
  br i1 %323, label %335, label %324

324:                                              ; preds = %317
  %325 = getelementptr inbounds i16, i16* %319, i64 1
  %326 = load i16, i16* %322, align 2
  %327 = load i16, i16* %325, align 2
  %328 = icmp eq i16 %327, %326
  br i1 %328, label %317, label %329

329:                                              ; preds = %324
  %330 = getelementptr inbounds i16, i16* %308, i64 1
  %331 = ptrtoint i16* %330 to i64
  %332 = sub i64 %293, %331
  %333 = ashr exact i64 %332, 1
  %334 = icmp slt i64 %333, %292
  br i1 %334, label %337, label %300

335:                                              ; preds = %317
  %336 = ptrtoint i16* %308 to i64
  br label %337

337:                                              ; preds = %329, %315, %300, %311, %335, %285
  %338 = phi i64 [ %336, %335 ], [ %293, %285 ], [ %293, %311 ], [ %293, %300 ], [ %293, %315 ], [ %293, %329 ]
  %339 = phi i16* [ %308, %335 ], [ %290, %285 ], [ %290, %311 ], [ %290, %300 ], [ %290, %315 ], [ %290, %329 ]
  %340 = icmp eq i16* %339, %290
  %341 = sub i64 %338, %294
  %342 = ashr exact i64 %341, 1
  %343 = select i1 %340, i64 -1, i64 %342
  br label %344

344:                                              ; preds = %260, %337
  %345 = phi i64 [ 0, %260 ], [ %343, %337 ]
  br i1 %274, label %346, label %347

346:                                              ; preds = %344
  call void @_ZdlPv(i8* %284) #10
  br label %347

347:                                              ; preds = %344, %346
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %262) #8
  %348 = icmp eq i64 %345, -1
  br i1 %348, label %363, label %349

349:                                              ; preds = %347
  %350 = bitcast %"class.v8_inspector::String16"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %350) #8
  call void @_ZNK12v8_inspector8String169substringEmm(%"class.v8_inspector::String16"* nonnull sret %8, %"class.v8_inspector::String16"* nonnull %6, i64 0, i64 %345)
  %351 = load i8, i8* %264, align 1
  %352 = icmp slt i8 %351, 0
  br i1 %352, label %353, label %356

353:                                              ; preds = %349
  %354 = bitcast %"class.v8_inspector::String16"* %6 to i8**
  %355 = load i8*, i8** %354, align 8
  call void @_ZdlPv(i8* %355) #10
  br label %356

356:                                              ; preds = %353, %349
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %261, i8* nonnull align 8 %350, i64 24, i1 false) #8
  %357 = bitcast %"class.v8_inspector::String16"* %8 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %358 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %357, i64 0, i32 1, i32 1
  store i8 0, i8* %358, align 1
  %359 = bitcast %"class.v8_inspector::String16"* %8 to i16*
  store i16 0, i16* %359, align 8
  %360 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %8, i64 0, i32 1
  %361 = load i64, i64* %360, align 8
  %362 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %6, i64 0, i32 1
  store i64 %361, i64* %362, align 8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %350) #8
  br label %363

363:                                              ; preds = %347, %356
  %364 = bitcast %"class.v8_inspector::String16"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %364) #8
  call void @_ZNK12v8_inspector8String1615stripWhiteSpaceEv(%"class.v8_inspector::String16"* nonnull sret %9, %"class.v8_inspector::String16"* nonnull %6) #8
  %365 = load i8, i8* %264, align 1
  %366 = icmp slt i8 %365, 0
  br i1 %366, label %367, label %370

367:                                              ; preds = %363
  %368 = bitcast %"class.v8_inspector::String16"* %6 to i8**
  %369 = load i8*, i8** %368, align 8
  call void @_ZdlPv(i8* %369) #10
  br label %370

370:                                              ; preds = %367, %363
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %261, i8* nonnull align 8 %364, i64 24, i1 false) #8
  %371 = bitcast %"class.v8_inspector::String16"* %9 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %372 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %371, i64 0, i32 1, i32 1
  store i8 0, i8* %372, align 1
  %373 = bitcast %"class.v8_inspector::String16"* %9 to i16*
  store i16 0, i16* %373, align 8
  %374 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %9, i64 0, i32 1
  %375 = load i64, i64* %374, align 8
  %376 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %6, i64 0, i32 1
  store i64 %375, i64* %376, align 8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %364) #8
  %377 = load i8, i8* %264, align 1
  %378 = icmp slt i8 %377, 0
  %379 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %380 = load i64, i64* %379, align 8
  %381 = zext i8 %377 to i64
  %382 = select i1 %378, i64 %380, i64 %381
  %383 = icmp eq i64 %382, 0
  br i1 %383, label %395, label %384

384:                                              ; preds = %370
  %385 = load i16*, i16** %267, align 8
  %386 = select i1 %378, i16* %385, i16* %269
  br label %387

387:                                              ; preds = %384, %391
  %388 = phi i64 [ 0, %384 ], [ %392, %391 ]
  %389 = getelementptr inbounds i16, i16* %386, i64 %388
  %390 = load i16, i16* %389, align 2
  switch i16 %390, label %391 [
    i16 34, label %394
    i16 39, label %394
    i16 32, label %394
    i16 9, label %394
  ]

391:                                              ; preds = %387
  %392 = add nuw i64 %388, 1
  %393 = icmp ult i64 %392, %382
  br i1 %393, label %387, label %395

394:                                              ; preds = %387, %387, %387, %387
  call void @_ZN12v8_inspector8String16C1EPKc(%"class.v8_inspector::String16"* %0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.5, i64 0, i64 0)) #8
  br label %398

395:                                              ; preds = %391, %370
  %396 = bitcast %"class.v8_inspector::String16"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %396, i8* align 8 %261, i64 24, i1 false) #8
  call void @llvm.memset.p0i8.i64(i8* align 8 %261, i8 0, i64 24, i1 false) #8
  %397 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %0, i64 0, i32 1
  store i64 %375, i64* %397, align 8
  br label %398

398:                                              ; preds = %394, %395
  %399 = load i8, i8* %264, align 1
  %400 = icmp slt i8 %399, 0
  br i1 %400, label %401, label %404

401:                                              ; preds = %398
  %402 = bitcast %"class.v8_inspector::String16"* %6 to i8**
  %403 = load i8*, i8** %402, align 8
  call void @_ZdlPv(i8* %403) #10
  br label %404

404:                                              ; preds = %398, %401
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %261) #8
  br label %405

405:                                              ; preds = %404, %252, %121, %117
  ret void
}

declare void @_ZN12v8_inspector8String16C1EPKc(%"class.v8_inspector::String16"*, i8*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12v8_inspector16findSourceMapURLERKNS_8String16Eb(%"class.v8_inspector::String16"* noalias sret, %"class.v8_inspector::String16"* dereferenceable(32), i1 zeroext) local_unnamed_addr #0 {
  %4 = alloca %"class.v8_inspector::String16", align 8
  %5 = bitcast %"class.v8_inspector::String16"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #8
  call void @_ZN12v8_inspector8String16C1EPKc(%"class.v8_inspector::String16"* nonnull %4, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0)) #8
  call fastcc void @_ZN12v8_inspector12_GLOBAL__N_116findMagicCommentERKNS_8String16ES3_b(%"class.v8_inspector::String16"* noalias %0, %"class.v8_inspector::String16"* dereferenceable(32) %1, %"class.v8_inspector::String16"* nonnull dereferenceable(32) %4, i1 zeroext %2)
  %6 = bitcast %"class.v8_inspector::String16"* %4 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %6, i64 0, i32 1, i32 1
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  br i1 %9, label %10, label %13

10:                                               ; preds = %3
  %11 = bitcast %"class.v8_inspector::String16"* %4 to i8**
  %12 = load i8*, i8** %11, align 8
  call void @_ZdlPv(i8* %12) #10
  br label %13

13:                                               ; preds = %3, %10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #8
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #3

declare void @_ZN12v8_inspector7V8RegexC1EPNS_15V8InspectorImplERKNS_8String16Ebb(%"class.v8_inspector::V8Regex"*, %"class.v8_inspector::V8InspectorImpl"*, %"class.v8_inspector::String16"* dereferenceable(32), i1 zeroext, i1 zeroext) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #4

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

declare void @_ZN12v8_inspector15String16BuilderC1Ev(%"class.v8_inspector::String16Builder"*) unnamed_addr #2

declare void @_ZN12v8_inspector15String16Builder6appendEc(%"class.v8_inspector::String16Builder"*, i8 signext) local_unnamed_addr #2

declare void @_ZN12v8_inspector15String16Builder6appendEt(%"class.v8_inspector::String16Builder"*, i16 zeroext) local_unnamed_addr #2

declare void @_ZN12v8_inspector15String16Builder8toStringEv(%"class.v8_inspector::String16"* sret, %"class.v8_inspector::String16Builder"*) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK12v8_inspector8String169substringEmm(%"class.v8_inspector::String16"* noalias sret, %"class.v8_inspector::String16"*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #8
  %7 = bitcast %"class.v8_inspector::String16"* %1 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %8 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %7, i64 0, i32 1, i32 1
  %9 = load i8, i8* %8, align 1, !noalias !30
  %10 = icmp slt i8 %9, 0
  %11 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %12 = load i64, i64* %11, align 8, !noalias !30
  %13 = zext i8 %9 to i64
  %14 = select i1 %10, i64 %12, i64 %13
  %15 = icmp ult i64 %14, %2
  br i1 %15, label %16, label %18

16:                                               ; preds = %4
  %17 = bitcast %"class.std::__1::basic_string"* %5 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__basic_string_common"* nonnull %17) #9
  unreachable

18:                                               ; preds = %4
  %19 = getelementptr inbounds %"class.v8_inspector::String16", %"class.v8_inspector::String16"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load i16*, i16** %19, align 8, !noalias !30
  %21 = bitcast %"class.v8_inspector::String16"* %1 to i16*
  %22 = select i1 %10, i16* %20, i16* %21
  %23 = getelementptr inbounds i16, i16* %22, i64 %2
  %24 = sub i64 %14, %2
  %25 = icmp ult i64 %24, %3
  %26 = select i1 %25, i64 %24, i64 %3
  %27 = icmp ugt i64 %26, 9223372036854775791
  br i1 %27, label %28, label %30

28:                                               ; preds = %18
  %29 = bitcast %"class.std::__1::basic_string"* %5 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %29) #9
  unreachable

30:                                               ; preds = %18
  %31 = icmp ult i64 %26, 11
  br i1 %31, label %45, label %32

32:                                               ; preds = %30
  %33 = add nuw nsw i64 %26, 8
  %34 = and i64 %33, -8
  %35 = icmp slt i64 %34, 0
  br i1 %35, label %36, label %37

36:                                               ; preds = %32
  tail call void @abort() #9
  unreachable

37:                                               ; preds = %32
  %38 = shl i64 %34, 1
  %39 = tail call i8* @_Znwm(i64 %38) #10
  %40 = bitcast i8* %39 to i16*
  %41 = bitcast %"class.std::__1::basic_string"* %5 to i8**
  store i8* %39, i8** %41, align 8, !alias.scope !30
  %42 = or i64 %34, -9223372036854775808
  %43 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %42, i64* %43, align 8, !alias.scope !30
  %44 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %26, i64* %44, align 8, !alias.scope !30
  br label %51

45:                                               ; preds = %30
  %46 = trunc i64 %26 to i8
  %47 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %48 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %47, i64 0, i32 1, i32 1
  store i8 %46, i8* %48, align 1, !alias.scope !30
  %49 = bitcast %"class.std::__1::basic_string"* %5 to i16*
  %50 = icmp eq i64 %26, 0
  br i1 %50, label %198, label %51

51:                                               ; preds = %45, %37
  %52 = phi i16* [ %40, %37 ], [ %49, %45 ]
  %53 = icmp ult i64 %26, 16
  br i1 %53, label %143, label %54

54:                                               ; preds = %51
  %55 = getelementptr i16, i16* %52, i64 %26
  %56 = add i64 %26, %2
  %57 = getelementptr i16, i16* %22, i64 %56
  %58 = icmp ult i16* %52, %57
  %59 = icmp ult i16* %23, %55
  %60 = and i1 %58, %59
  br i1 %60, label %143, label %61

61:                                               ; preds = %54
  %62 = and i64 %26, -16
  %63 = getelementptr i16, i16* %52, i64 %62
  %64 = sub i64 %26, %62
  %65 = getelementptr i16, i16* %23, i64 %62
  %66 = add i64 %62, -16
  %67 = lshr exact i64 %66, 4
  %68 = add nuw nsw i64 %67, 1
  %69 = and i64 %68, 3
  %70 = icmp ult i64 %66, 48
  br i1 %70, label %122, label %71

71:                                               ; preds = %61
  %72 = sub nsw i64 %68, %69
  br label %73

73:                                               ; preds = %73, %71
  %74 = phi i64 [ 0, %71 ], [ %119, %73 ]
  %75 = phi i64 [ %72, %71 ], [ %120, %73 ]
  %76 = getelementptr i16, i16* %52, i64 %74
  %77 = getelementptr i16, i16* %23, i64 %74
  %78 = bitcast i16* %77 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 2, !alias.scope !33
  %80 = getelementptr i16, i16* %77, i64 8
  %81 = bitcast i16* %80 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 2, !alias.scope !33
  %83 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %79, <8 x i16>* %83, align 2, !alias.scope !36, !noalias !33
  %84 = getelementptr i16, i16* %76, i64 8
  %85 = bitcast i16* %84 to <8 x i16>*
  store <8 x i16> %82, <8 x i16>* %85, align 2, !alias.scope !36, !noalias !33
  %86 = or i64 %74, 16
  %87 = getelementptr i16, i16* %52, i64 %86
  %88 = getelementptr i16, i16* %23, i64 %86
  %89 = bitcast i16* %88 to <8 x i16>*
  %90 = load <8 x i16>, <8 x i16>* %89, align 2, !alias.scope !33
  %91 = getelementptr i16, i16* %88, i64 8
  %92 = bitcast i16* %91 to <8 x i16>*
  %93 = load <8 x i16>, <8 x i16>* %92, align 2, !alias.scope !33
  %94 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %94, align 2, !alias.scope !36, !noalias !33
  %95 = getelementptr i16, i16* %87, i64 8
  %96 = bitcast i16* %95 to <8 x i16>*
  store <8 x i16> %93, <8 x i16>* %96, align 2, !alias.scope !36, !noalias !33
  %97 = or i64 %74, 32
  %98 = getelementptr i16, i16* %52, i64 %97
  %99 = getelementptr i16, i16* %23, i64 %97
  %100 = bitcast i16* %99 to <8 x i16>*
  %101 = load <8 x i16>, <8 x i16>* %100, align 2, !alias.scope !33
  %102 = getelementptr i16, i16* %99, i64 8
  %103 = bitcast i16* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 2, !alias.scope !33
  %105 = bitcast i16* %98 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %105, align 2, !alias.scope !36, !noalias !33
  %106 = getelementptr i16, i16* %98, i64 8
  %107 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %107, align 2, !alias.scope !36, !noalias !33
  %108 = or i64 %74, 48
  %109 = getelementptr i16, i16* %52, i64 %108
  %110 = getelementptr i16, i16* %23, i64 %108
  %111 = bitcast i16* %110 to <8 x i16>*
  %112 = load <8 x i16>, <8 x i16>* %111, align 2, !alias.scope !33
  %113 = getelementptr i16, i16* %110, i64 8
  %114 = bitcast i16* %113 to <8 x i16>*
  %115 = load <8 x i16>, <8 x i16>* %114, align 2, !alias.scope !33
  %116 = bitcast i16* %109 to <8 x i16>*
  store <8 x i16> %112, <8 x i16>* %116, align 2, !alias.scope !36, !noalias !33
  %117 = getelementptr i16, i16* %109, i64 8
  %118 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %115, <8 x i16>* %118, align 2, !alias.scope !36, !noalias !33
  %119 = add i64 %74, 64
  %120 = add i64 %75, -4
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %122, label %73, !llvm.loop !38

122:                                              ; preds = %73, %61
  %123 = phi i64 [ 0, %61 ], [ %119, %73 ]
  %124 = icmp eq i64 %69, 0
  br i1 %124, label %141, label %125

125:                                              ; preds = %122, %125
  %126 = phi i64 [ %138, %125 ], [ %123, %122 ]
  %127 = phi i64 [ %139, %125 ], [ %69, %122 ]
  %128 = getelementptr i16, i16* %52, i64 %126
  %129 = getelementptr i16, i16* %23, i64 %126
  %130 = bitcast i16* %129 to <8 x i16>*
  %131 = load <8 x i16>, <8 x i16>* %130, align 2, !alias.scope !33
  %132 = getelementptr i16, i16* %129, i64 8
  %133 = bitcast i16* %132 to <8 x i16>*
  %134 = load <8 x i16>, <8 x i16>* %133, align 2, !alias.scope !33
  %135 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %131, <8 x i16>* %135, align 2, !alias.scope !36, !noalias !33
  %136 = getelementptr i16, i16* %128, i64 8
  %137 = bitcast i16* %136 to <8 x i16>*
  store <8 x i16> %134, <8 x i16>* %137, align 2, !alias.scope !36, !noalias !33
  %138 = add i64 %126, 16
  %139 = add i64 %127, -1
  %140 = icmp eq i64 %139, 0
  br i1 %140, label %141, label %125, !llvm.loop !39

141:                                              ; preds = %125, %122
  %142 = icmp eq i64 %26, %62
  br i1 %142, label %196, label %143

143:                                              ; preds = %141, %54, %51
  %144 = phi i16* [ %52, %54 ], [ %52, %51 ], [ %63, %141 ]
  %145 = phi i64 [ %26, %54 ], [ %26, %51 ], [ %64, %141 ]
  %146 = phi i16* [ %23, %54 ], [ %23, %51 ], [ %65, %141 ]
  %147 = add i64 %145, -1
  %148 = and i64 %145, 7
  %149 = icmp eq i64 %148, 0
  br i1 %149, label %161, label %150

150:                                              ; preds = %143, %150
  %151 = phi i16* [ %157, %150 ], [ %144, %143 ]
  %152 = phi i64 [ %156, %150 ], [ %145, %143 ]
  %153 = phi i16* [ %158, %150 ], [ %146, %143 ]
  %154 = phi i64 [ %159, %150 ], [ %148, %143 ]
  %155 = load i16, i16* %153, align 2
  store i16 %155, i16* %151, align 2
  %156 = add i64 %152, -1
  %157 = getelementptr inbounds i16, i16* %151, i64 1
  %158 = getelementptr inbounds i16, i16* %153, i64 1
  %159 = add i64 %154, -1
  %160 = icmp eq i64 %159, 0
  br i1 %160, label %161, label %150, !llvm.loop !40

161:                                              ; preds = %150, %143
  %162 = phi i16* [ %144, %143 ], [ %157, %150 ]
  %163 = phi i64 [ %145, %143 ], [ %156, %150 ]
  %164 = phi i16* [ %146, %143 ], [ %158, %150 ]
  %165 = icmp ult i64 %147, 7
  br i1 %165, label %196, label %166

166:                                              ; preds = %161, %166
  %167 = phi i16* [ %193, %166 ], [ %162, %161 ]
  %168 = phi i64 [ %192, %166 ], [ %163, %161 ]
  %169 = phi i16* [ %194, %166 ], [ %164, %161 ]
  %170 = load i16, i16* %169, align 2
  store i16 %170, i16* %167, align 2
  %171 = getelementptr inbounds i16, i16* %167, i64 1
  %172 = getelementptr inbounds i16, i16* %169, i64 1
  %173 = load i16, i16* %172, align 2
  store i16 %173, i16* %171, align 2
  %174 = getelementptr inbounds i16, i16* %167, i64 2
  %175 = getelementptr inbounds i16, i16* %169, i64 2
  %176 = load i16, i16* %175, align 2
  store i16 %176, i16* %174, align 2
  %177 = getelementptr inbounds i16, i16* %167, i64 3
  %178 = getelementptr inbounds i16, i16* %169, i64 3
  %179 = load i16, i16* %178, align 2
  store i16 %179, i16* %177, align 2
  %180 = getelementptr inbounds i16, i16* %167, i64 4
  %181 = getelementptr inbounds i16, i16* %169, i64 4
  %182 = load i16, i16* %181, align 2
  store i16 %182, i16* %180, align 2
  %183 = getelementptr inbounds i16, i16* %167, i64 5
  %184 = getelementptr inbounds i16, i16* %169, i64 5
  %185 = load i16, i16* %184, align 2
  store i16 %185, i16* %183, align 2
  %186 = getelementptr inbounds i16, i16* %167, i64 6
  %187 = getelementptr inbounds i16, i16* %169, i64 6
  %188 = load i16, i16* %187, align 2
  store i16 %188, i16* %186, align 2
  %189 = getelementptr inbounds i16, i16* %167, i64 7
  %190 = getelementptr inbounds i16, i16* %169, i64 7
  %191 = load i16, i16* %190, align 2
  store i16 %191, i16* %189, align 2
  %192 = add i64 %168, -8
  %193 = getelementptr inbounds i16, i16* %167, i64 8
  %194 = getelementptr inbounds i16, i16* %169, i64 8
  %195 = icmp eq i64 %192, 0
  br i1 %195, label %196, label %166, !llvm.loop !41

196:                                              ; preds = %161, %166, %141
  %197 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  br label %198

198:                                              ; preds = %196, %45
  %199 = phi %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* [ %197, %196 ], [ %47, %45 ]
  %200 = phi i16* [ %52, %196 ], [ %49, %45 ]
  %201 = getelementptr inbounds i16, i16* %200, i64 %26
  store i16 0, i16* %201, align 2
  call void @_ZN12v8_inspector8String16C1EONSt3__112basic_stringItNS1_11char_traitsItEENS1_9allocatorItEEEE(%"class.v8_inspector::String16"* %0, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %5) #8
  %202 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %199, i64 0, i32 1, i32 1
  %203 = load i8, i8* %202, align 1
  %204 = icmp slt i8 %203, 0
  br i1 %204, label %205, label %208

205:                                              ; preds = %198
  %206 = bitcast %"class.std::__1::basic_string"* %5 to i8**
  %207 = load i8*, i8** %206, align 8
  call void @_ZdlPv(i8* %207) #10
  br label %208

208:                                              ; preds = %198, %205
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #8
  ret void
}

declare i32 @_ZNK12v8_inspector7V8Regex5matchERKNS_8String16EiPi(%"class.v8_inspector::V8Regex"*, %"class.v8_inspector::String16"* dereferenceable(32), i32, i32*) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

declare void @_ZN12v8_inspector8String16C1EONSt3__112basic_stringItNS1_11char_traitsItEENS1_9allocatorItEEEE(%"class.v8_inspector::String16"*, %"class.std::__1::basic_string"* dereferenceable(24)) unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #4

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_4pairIiN12v8_inspector8String16EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(%"class.std::__1::vector.422"*, %"struct.std::__1::pair.424"* dereferenceable(40)) local_unnamed_addr #7 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.422", %"class.std::__1::vector.422"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"struct.std::__1::pair.424"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.422"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 40
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 461168601842738790
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.422"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #9
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.422", %"class.std::__1::vector.422"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"struct.std::__1::pair.424"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = sdiv exact i64 %18, 40
  %20 = icmp ult i64 %19, 230584300921369395
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = shl nsw i64 %19, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 461168601842738790, %14 ]
  %28 = mul i64 %27, 40
  %29 = tail call i8* @_Znwm(i64 %28) #10
  %30 = bitcast i8* %29 to %"struct.std::__1::pair.424"*
  br label %31

31:                                               ; preds = %21, %26
  %32 = phi i64 [ %27, %26 ], [ 0, %21 ]
  %33 = phi %"struct.std::__1::pair.424"* [ %30, %26 ], [ null, %21 ]
  %34 = getelementptr inbounds %"struct.std::__1::pair.424", %"struct.std::__1::pair.424"* %33, i64 %9
  %35 = getelementptr inbounds %"struct.std::__1::pair.424", %"struct.std::__1::pair.424"* %33, i64 %32
  %36 = ptrtoint %"struct.std::__1::pair.424"* %35 to i64
  %37 = getelementptr inbounds %"struct.std::__1::pair.424", %"struct.std::__1::pair.424"* %34, i64 0, i32 0
  %38 = getelementptr inbounds %"struct.std::__1::pair.424", %"struct.std::__1::pair.424"* %1, i64 0, i32 0
  %39 = load i32, i32* %38, align 8
  store i32 %39, i32* %37, align 8
  %40 = getelementptr inbounds %"struct.std::__1::pair.424", %"struct.std::__1::pair.424"* %33, i64 %9, i32 1
  %41 = getelementptr inbounds %"struct.std::__1::pair.424", %"struct.std::__1::pair.424"* %1, i64 0, i32 1
  %42 = bitcast %"class.v8_inspector::String16"* %40 to i8*
  %43 = bitcast %"class.v8_inspector::String16"* %41 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %42, i8* align 8 %43, i64 24, i1 false) #8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %43, i8 0, i64 24, i1 false) #8
  %44 = getelementptr inbounds %"struct.std::__1::pair.424", %"struct.std::__1::pair.424"* %33, i64 %9, i32 1, i32 1
  %45 = getelementptr inbounds %"struct.std::__1::pair.424", %"struct.std::__1::pair.424"* %1, i64 0, i32 1, i32 1
  %46 = load i64, i64* %45, align 8
  store i64 %46, i64* %44, align 8
  %47 = getelementptr inbounds %"struct.std::__1::pair.424", %"struct.std::__1::pair.424"* %34, i64 1
  %48 = ptrtoint %"struct.std::__1::pair.424"* %47 to i64
  %49 = getelementptr inbounds %"class.std::__1::vector.422", %"class.std::__1::vector.422"* %0, i64 0, i32 0, i32 0
  %50 = load %"struct.std::__1::pair.424"*, %"struct.std::__1::pair.424"** %49, align 8
  %51 = load %"struct.std::__1::pair.424"*, %"struct.std::__1::pair.424"** %3, align 8
  %52 = icmp eq %"struct.std::__1::pair.424"* %51, %50
  br i1 %52, label %53, label %55

53:                                               ; preds = %31
  %54 = ptrtoint %"struct.std::__1::pair.424"* %50 to i64
  br label %74

55:                                               ; preds = %31, %55
  %56 = phi %"struct.std::__1::pair.424"* [ %69, %55 ], [ %34, %31 ]
  %57 = phi %"struct.std::__1::pair.424"* [ %58, %55 ], [ %51, %31 ]
  %58 = getelementptr inbounds %"struct.std::__1::pair.424", %"struct.std::__1::pair.424"* %57, i64 -1
  %59 = getelementptr inbounds %"struct.std::__1::pair.424", %"struct.std::__1::pair.424"* %56, i64 -1, i32 0
  %60 = getelementptr inbounds %"struct.std::__1::pair.424", %"struct.std::__1::pair.424"* %58, i64 0, i32 0
  %61 = load i32, i32* %60, align 8
  store i32 %61, i32* %59, align 8
  %62 = getelementptr inbounds %"struct.std::__1::pair.424", %"struct.std::__1::pair.424"* %56, i64 -1, i32 1
  %63 = getelementptr inbounds %"struct.std::__1::pair.424", %"struct.std::__1::pair.424"* %57, i64 -1, i32 1
  %64 = bitcast %"class.v8_inspector::String16"* %62 to i8*
  %65 = bitcast %"class.v8_inspector::String16"* %63 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %64, i8* align 8 %65, i64 24, i1 false) #8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %65, i8 0, i64 24, i1 false) #8
  %66 = getelementptr inbounds %"struct.std::__1::pair.424", %"struct.std::__1::pair.424"* %56, i64 -1, i32 1, i32 1
  %67 = getelementptr inbounds %"struct.std::__1::pair.424", %"struct.std::__1::pair.424"* %57, i64 -1, i32 1, i32 1
  %68 = load i64, i64* %67, align 8
  store i64 %68, i64* %66, align 8
  %69 = getelementptr inbounds %"struct.std::__1::pair.424", %"struct.std::__1::pair.424"* %56, i64 -1
  %70 = icmp eq %"struct.std::__1::pair.424"* %58, %50
  br i1 %70, label %71, label %55

71:                                               ; preds = %55
  %72 = load i64, i64* %6, align 8
  %73 = load %"struct.std::__1::pair.424"*, %"struct.std::__1::pair.424"** %3, align 8
  br label %74

74:                                               ; preds = %53, %71
  %75 = phi %"struct.std::__1::pair.424"* [ %50, %53 ], [ %73, %71 ]
  %76 = phi %"struct.std::__1::pair.424"* [ %34, %53 ], [ %69, %71 ]
  %77 = phi i64 [ %54, %53 ], [ %72, %71 ]
  %78 = ptrtoint %"struct.std::__1::pair.424"* %76 to i64
  store i64 %78, i64* %6, align 8
  store i64 %48, i64* %4, align 8
  store i64 %36, i64* %16, align 8
  %79 = inttoptr i64 %77 to %"struct.std::__1::pair.424"*
  %80 = icmp eq %"struct.std::__1::pair.424"* %75, %79
  br i1 %80, label %94, label %81

81:                                               ; preds = %74, %92
  %82 = phi %"struct.std::__1::pair.424"* [ %83, %92 ], [ %75, %74 ]
  %83 = getelementptr inbounds %"struct.std::__1::pair.424", %"struct.std::__1::pair.424"* %82, i64 -1
  %84 = getelementptr inbounds %"struct.std::__1::pair.424", %"struct.std::__1::pair.424"* %82, i64 -1, i32 1
  %85 = bitcast %"class.v8_inspector::String16"* %84 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %86 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %85, i64 0, i32 1, i32 1
  %87 = load i8, i8* %86, align 1
  %88 = icmp slt i8 %87, 0
  br i1 %88, label %89, label %92

89:                                               ; preds = %81
  %90 = bitcast %"class.v8_inspector::String16"* %84 to i8**
  %91 = load i8*, i8** %90, align 8
  tail call void @_ZdlPv(i8* %91) #10
  br label %92

92:                                               ; preds = %89, %81
  %93 = icmp eq %"struct.std::__1::pair.424"* %83, %79
  br i1 %93, label %94, label %81

94:                                               ; preds = %92, %74
  %95 = icmp eq i64 %77, 0
  br i1 %95, label %98, label %96

96:                                               ; preds = %94
  %97 = inttoptr i64 %77 to i8*
  tail call void @_ZdlPv(i8* %97) #10
  br label %98

98:                                               ; preds = %94, %96
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringItNS_11char_traitsItEENS_9allocatorItEEEaSERKS5_(%"class.std::__1::basic_string"*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %4 = icmp eq %"class.std::__1::basic_string"* %0, %1
  br i1 %4, label %510, label %5

5:                                                ; preds = %2
  %6 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %6, i64 0, i32 1, i32 1
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  %10 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %11 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %10, i64 0, i32 1, i32 1
  %12 = load i8, i8* %11, align 1
  %13 = icmp slt i8 %12, 0
  br i1 %9, label %341, label %14

14:                                               ; preds = %5
  br i1 %13, label %17, label %15

15:                                               ; preds = %14
  %16 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %16, i64 24, i1 false)
  br label %510

17:                                               ; preds = %14
  %18 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load i16*, i16** %18, align 8
  %20 = bitcast i16* %19 to i8*
  %21 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = icmp ult i64 %22, 11
  br i1 %23, label %24, label %175

24:                                               ; preds = %17
  %25 = bitcast %"class.std::__1::basic_string"* %0 to i16*
  %26 = trunc i64 %22 to i8
  store i8 %26, i8* %7, align 1
  %27 = icmp eq i64 %22, 0
  br i1 %27, label %173, label %28

28:                                               ; preds = %24
  %29 = icmp ult i64 %22, 16
  br i1 %29, label %120, label %30

30:                                               ; preds = %28
  %31 = shl i64 %22, 1
  %32 = getelementptr i8, i8* %3, i64 %31
  %33 = getelementptr i16, i16* %19, i64 %22
  %34 = bitcast i16* %33 to %"class.std::__1::basic_string"*
  %35 = icmp ugt %"class.std::__1::basic_string"* %34, %0
  %36 = icmp ugt i8* %32, %20
  %37 = and i1 %35, %36
  br i1 %37, label %120, label %38

38:                                               ; preds = %30
  %39 = and i64 %22, -16
  %40 = getelementptr i16, i16* %25, i64 %39
  %41 = sub i64 %22, %39
  %42 = getelementptr i16, i16* %19, i64 %39
  %43 = add i64 %39, -16
  %44 = lshr exact i64 %43, 4
  %45 = add nuw nsw i64 %44, 1
  %46 = and i64 %45, 3
  %47 = icmp ult i64 %43, 48
  br i1 %47, label %99, label %48

48:                                               ; preds = %38
  %49 = sub nsw i64 %45, %46
  br label %50

50:                                               ; preds = %50, %48
  %51 = phi i64 [ 0, %48 ], [ %96, %50 ]
  %52 = phi i64 [ %49, %48 ], [ %97, %50 ]
  %53 = getelementptr i16, i16* %25, i64 %51
  %54 = getelementptr i16, i16* %19, i64 %51
  %55 = bitcast i16* %54 to <8 x i16>*
  %56 = load <8 x i16>, <8 x i16>* %55, align 2, !alias.scope !42
  %57 = getelementptr i16, i16* %54, i64 8
  %58 = bitcast i16* %57 to <8 x i16>*
  %59 = load <8 x i16>, <8 x i16>* %58, align 2, !alias.scope !42
  %60 = bitcast i16* %53 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %60, align 2, !alias.scope !45, !noalias !42
  %61 = getelementptr i16, i16* %53, i64 8
  %62 = bitcast i16* %61 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %62, align 2, !alias.scope !45, !noalias !42
  %63 = or i64 %51, 16
  %64 = getelementptr i16, i16* %25, i64 %63
  %65 = getelementptr i16, i16* %19, i64 %63
  %66 = bitcast i16* %65 to <8 x i16>*
  %67 = load <8 x i16>, <8 x i16>* %66, align 2, !alias.scope !42
  %68 = getelementptr i16, i16* %65, i64 8
  %69 = bitcast i16* %68 to <8 x i16>*
  %70 = load <8 x i16>, <8 x i16>* %69, align 2, !alias.scope !42
  %71 = bitcast i16* %64 to <8 x i16>*
  store <8 x i16> %67, <8 x i16>* %71, align 2, !alias.scope !45, !noalias !42
  %72 = getelementptr i16, i16* %64, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %70, <8 x i16>* %73, align 2, !alias.scope !45, !noalias !42
  %74 = or i64 %51, 32
  %75 = getelementptr i16, i16* %25, i64 %74
  %76 = getelementptr i16, i16* %19, i64 %74
  %77 = bitcast i16* %76 to <8 x i16>*
  %78 = load <8 x i16>, <8 x i16>* %77, align 2, !alias.scope !42
  %79 = getelementptr i16, i16* %76, i64 8
  %80 = bitcast i16* %79 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 2, !alias.scope !42
  %82 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> %78, <8 x i16>* %82, align 2, !alias.scope !45, !noalias !42
  %83 = getelementptr i16, i16* %75, i64 8
  %84 = bitcast i16* %83 to <8 x i16>*
  store <8 x i16> %81, <8 x i16>* %84, align 2, !alias.scope !45, !noalias !42
  %85 = or i64 %51, 48
  %86 = getelementptr i16, i16* %25, i64 %85
  %87 = getelementptr i16, i16* %19, i64 %85
  %88 = bitcast i16* %87 to <8 x i16>*
  %89 = load <8 x i16>, <8 x i16>* %88, align 2, !alias.scope !42
  %90 = getelementptr i16, i16* %87, i64 8
  %91 = bitcast i16* %90 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 2, !alias.scope !42
  %93 = bitcast i16* %86 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %93, align 2, !alias.scope !45, !noalias !42
  %94 = getelementptr i16, i16* %86, i64 8
  %95 = bitcast i16* %94 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %95, align 2, !alias.scope !45, !noalias !42
  %96 = add i64 %51, 64
  %97 = add i64 %52, -4
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %99, label %50, !llvm.loop !47

99:                                               ; preds = %50, %38
  %100 = phi i64 [ 0, %38 ], [ %96, %50 ]
  %101 = icmp eq i64 %46, 0
  br i1 %101, label %118, label %102

102:                                              ; preds = %99, %102
  %103 = phi i64 [ %115, %102 ], [ %100, %99 ]
  %104 = phi i64 [ %116, %102 ], [ %46, %99 ]
  %105 = getelementptr i16, i16* %25, i64 %103
  %106 = getelementptr i16, i16* %19, i64 %103
  %107 = bitcast i16* %106 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !42
  %109 = getelementptr i16, i16* %106, i64 8
  %110 = bitcast i16* %109 to <8 x i16>*
  %111 = load <8 x i16>, <8 x i16>* %110, align 2, !alias.scope !42
  %112 = bitcast i16* %105 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %112, align 2, !alias.scope !45, !noalias !42
  %113 = getelementptr i16, i16* %105, i64 8
  %114 = bitcast i16* %113 to <8 x i16>*
  store <8 x i16> %111, <8 x i16>* %114, align 2, !alias.scope !45, !noalias !42
  %115 = add i64 %103, 16
  %116 = add i64 %104, -1
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %118, label %102, !llvm.loop !48

118:                                              ; preds = %102, %99
  %119 = icmp eq i64 %22, %39
  br i1 %119, label %173, label %120

120:                                              ; preds = %118, %30, %28
  %121 = phi i16* [ %25, %30 ], [ %25, %28 ], [ %40, %118 ]
  %122 = phi i64 [ %22, %30 ], [ %22, %28 ], [ %41, %118 ]
  %123 = phi i16* [ %19, %30 ], [ %19, %28 ], [ %42, %118 ]
  %124 = add i64 %122, -1
  %125 = and i64 %122, 7
  %126 = icmp eq i64 %125, 0
  br i1 %126, label %138, label %127

127:                                              ; preds = %120, %127
  %128 = phi i16* [ %134, %127 ], [ %121, %120 ]
  %129 = phi i64 [ %133, %127 ], [ %122, %120 ]
  %130 = phi i16* [ %135, %127 ], [ %123, %120 ]
  %131 = phi i64 [ %136, %127 ], [ %125, %120 ]
  %132 = load i16, i16* %130, align 2
  store i16 %132, i16* %128, align 2
  %133 = add i64 %129, -1
  %134 = getelementptr inbounds i16, i16* %128, i64 1
  %135 = getelementptr inbounds i16, i16* %130, i64 1
  %136 = add i64 %131, -1
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %138, label %127, !llvm.loop !49

138:                                              ; preds = %127, %120
  %139 = phi i16* [ %121, %120 ], [ %134, %127 ]
  %140 = phi i64 [ %122, %120 ], [ %133, %127 ]
  %141 = phi i16* [ %123, %120 ], [ %135, %127 ]
  %142 = icmp ult i64 %124, 7
  br i1 %142, label %173, label %143

143:                                              ; preds = %138, %143
  %144 = phi i16* [ %170, %143 ], [ %139, %138 ]
  %145 = phi i64 [ %169, %143 ], [ %140, %138 ]
  %146 = phi i16* [ %171, %143 ], [ %141, %138 ]
  %147 = load i16, i16* %146, align 2
  store i16 %147, i16* %144, align 2
  %148 = getelementptr inbounds i16, i16* %144, i64 1
  %149 = getelementptr inbounds i16, i16* %146, i64 1
  %150 = load i16, i16* %149, align 2
  store i16 %150, i16* %148, align 2
  %151 = getelementptr inbounds i16, i16* %144, i64 2
  %152 = getelementptr inbounds i16, i16* %146, i64 2
  %153 = load i16, i16* %152, align 2
  store i16 %153, i16* %151, align 2
  %154 = getelementptr inbounds i16, i16* %144, i64 3
  %155 = getelementptr inbounds i16, i16* %146, i64 3
  %156 = load i16, i16* %155, align 2
  store i16 %156, i16* %154, align 2
  %157 = getelementptr inbounds i16, i16* %144, i64 4
  %158 = getelementptr inbounds i16, i16* %146, i64 4
  %159 = load i16, i16* %158, align 2
  store i16 %159, i16* %157, align 2
  %160 = getelementptr inbounds i16, i16* %144, i64 5
  %161 = getelementptr inbounds i16, i16* %146, i64 5
  %162 = load i16, i16* %161, align 2
  store i16 %162, i16* %160, align 2
  %163 = getelementptr inbounds i16, i16* %144, i64 6
  %164 = getelementptr inbounds i16, i16* %146, i64 6
  %165 = load i16, i16* %164, align 2
  store i16 %165, i16* %163, align 2
  %166 = getelementptr inbounds i16, i16* %144, i64 7
  %167 = getelementptr inbounds i16, i16* %146, i64 7
  %168 = load i16, i16* %167, align 2
  store i16 %168, i16* %166, align 2
  %169 = add i64 %145, -8
  %170 = getelementptr inbounds i16, i16* %144, i64 8
  %171 = getelementptr inbounds i16, i16* %146, i64 8
  %172 = icmp eq i64 %169, 0
  br i1 %172, label %173, label %143, !llvm.loop !50

173:                                              ; preds = %138, %143, %118, %24
  %174 = getelementptr inbounds i16, i16* %25, i64 %22
  store i16 0, i16* %174, align 2
  br label %510

175:                                              ; preds = %17
  %176 = add i64 %22, -10
  %177 = icmp ugt i64 %176, 9223372036854775780
  br i1 %177, label %178, label %180

178:                                              ; preds = %175
  %179 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %179) #9
  unreachable

180:                                              ; preds = %175
  %181 = icmp ugt i64 %22, 20
  %182 = select i1 %181, i64 %22, i64 20
  %183 = add nuw nsw i64 %182, 8
  %184 = and i64 %183, -8
  %185 = icmp slt i64 %184, 0
  br i1 %185, label %186, label %187

186:                                              ; preds = %180
  tail call void @abort() #9
  unreachable

187:                                              ; preds = %180
  %188 = shl i64 %184, 1
  %189 = tail call i8* @_Znwm(i64 %188) #10
  %190 = bitcast i8* %189 to i16*
  %191 = icmp ult i64 %22, 16
  br i1 %191, label %282, label %192

192:                                              ; preds = %187
  %193 = shl i64 %22, 1
  %194 = getelementptr i8, i8* %189, i64 %193
  %195 = getelementptr i16, i16* %19, i64 %22
  %196 = bitcast i16* %195 to i8*
  %197 = icmp ult i8* %189, %196
  %198 = icmp ugt i8* %194, %20
  %199 = and i1 %197, %198
  br i1 %199, label %282, label %200

200:                                              ; preds = %192
  %201 = and i64 %22, -16
  %202 = getelementptr i16, i16* %190, i64 %201
  %203 = sub i64 %22, %201
  %204 = getelementptr i16, i16* %19, i64 %201
  %205 = add i64 %201, -16
  %206 = lshr exact i64 %205, 4
  %207 = add nuw nsw i64 %206, 1
  %208 = and i64 %207, 3
  %209 = icmp ult i64 %205, 48
  br i1 %209, label %261, label %210

210:                                              ; preds = %200
  %211 = sub nsw i64 %207, %208
  br label %212

212:                                              ; preds = %212, %210
  %213 = phi i64 [ 0, %210 ], [ %258, %212 ]
  %214 = phi i64 [ %211, %210 ], [ %259, %212 ]
  %215 = getelementptr i16, i16* %190, i64 %213
  %216 = getelementptr i16, i16* %19, i64 %213
  %217 = bitcast i16* %216 to <8 x i16>*
  %218 = load <8 x i16>, <8 x i16>* %217, align 2, !alias.scope !51
  %219 = getelementptr i16, i16* %216, i64 8
  %220 = bitcast i16* %219 to <8 x i16>*
  %221 = load <8 x i16>, <8 x i16>* %220, align 2, !alias.scope !51
  %222 = bitcast i16* %215 to <8 x i16>*
  store <8 x i16> %218, <8 x i16>* %222, align 2, !alias.scope !54, !noalias !51
  %223 = getelementptr i16, i16* %215, i64 8
  %224 = bitcast i16* %223 to <8 x i16>*
  store <8 x i16> %221, <8 x i16>* %224, align 2, !alias.scope !54, !noalias !51
  %225 = or i64 %213, 16
  %226 = getelementptr i16, i16* %190, i64 %225
  %227 = getelementptr i16, i16* %19, i64 %225
  %228 = bitcast i16* %227 to <8 x i16>*
  %229 = load <8 x i16>, <8 x i16>* %228, align 2, !alias.scope !51
  %230 = getelementptr i16, i16* %227, i64 8
  %231 = bitcast i16* %230 to <8 x i16>*
  %232 = load <8 x i16>, <8 x i16>* %231, align 2, !alias.scope !51
  %233 = bitcast i16* %226 to <8 x i16>*
  store <8 x i16> %229, <8 x i16>* %233, align 2, !alias.scope !54, !noalias !51
  %234 = getelementptr i16, i16* %226, i64 8
  %235 = bitcast i16* %234 to <8 x i16>*
  store <8 x i16> %232, <8 x i16>* %235, align 2, !alias.scope !54, !noalias !51
  %236 = or i64 %213, 32
  %237 = getelementptr i16, i16* %190, i64 %236
  %238 = getelementptr i16, i16* %19, i64 %236
  %239 = bitcast i16* %238 to <8 x i16>*
  %240 = load <8 x i16>, <8 x i16>* %239, align 2, !alias.scope !51
  %241 = getelementptr i16, i16* %238, i64 8
  %242 = bitcast i16* %241 to <8 x i16>*
  %243 = load <8 x i16>, <8 x i16>* %242, align 2, !alias.scope !51
  %244 = bitcast i16* %237 to <8 x i16>*
  store <8 x i16> %240, <8 x i16>* %244, align 2, !alias.scope !54, !noalias !51
  %245 = getelementptr i16, i16* %237, i64 8
  %246 = bitcast i16* %245 to <8 x i16>*
  store <8 x i16> %243, <8 x i16>* %246, align 2, !alias.scope !54, !noalias !51
  %247 = or i64 %213, 48
  %248 = getelementptr i16, i16* %190, i64 %247
  %249 = getelementptr i16, i16* %19, i64 %247
  %250 = bitcast i16* %249 to <8 x i16>*
  %251 = load <8 x i16>, <8 x i16>* %250, align 2, !alias.scope !51
  %252 = getelementptr i16, i16* %249, i64 8
  %253 = bitcast i16* %252 to <8 x i16>*
  %254 = load <8 x i16>, <8 x i16>* %253, align 2, !alias.scope !51
  %255 = bitcast i16* %248 to <8 x i16>*
  store <8 x i16> %251, <8 x i16>* %255, align 2, !alias.scope !54, !noalias !51
  %256 = getelementptr i16, i16* %248, i64 8
  %257 = bitcast i16* %256 to <8 x i16>*
  store <8 x i16> %254, <8 x i16>* %257, align 2, !alias.scope !54, !noalias !51
  %258 = add i64 %213, 64
  %259 = add i64 %214, -4
  %260 = icmp eq i64 %259, 0
  br i1 %260, label %261, label %212, !llvm.loop !56

261:                                              ; preds = %212, %200
  %262 = phi i64 [ 0, %200 ], [ %258, %212 ]
  %263 = icmp eq i64 %208, 0
  br i1 %263, label %280, label %264

264:                                              ; preds = %261, %264
  %265 = phi i64 [ %277, %264 ], [ %262, %261 ]
  %266 = phi i64 [ %278, %264 ], [ %208, %261 ]
  %267 = getelementptr i16, i16* %190, i64 %265
  %268 = getelementptr i16, i16* %19, i64 %265
  %269 = bitcast i16* %268 to <8 x i16>*
  %270 = load <8 x i16>, <8 x i16>* %269, align 2, !alias.scope !51
  %271 = getelementptr i16, i16* %268, i64 8
  %272 = bitcast i16* %271 to <8 x i16>*
  %273 = load <8 x i16>, <8 x i16>* %272, align 2, !alias.scope !51
  %274 = bitcast i16* %267 to <8 x i16>*
  store <8 x i16> %270, <8 x i16>* %274, align 2, !alias.scope !54, !noalias !51
  %275 = getelementptr i16, i16* %267, i64 8
  %276 = bitcast i16* %275 to <8 x i16>*
  store <8 x i16> %273, <8 x i16>* %276, align 2, !alias.scope !54, !noalias !51
  %277 = add i64 %265, 16
  %278 = add i64 %266, -1
  %279 = icmp eq i64 %278, 0
  br i1 %279, label %280, label %264, !llvm.loop !57

280:                                              ; preds = %264, %261
  %281 = icmp eq i64 %22, %201
  br i1 %281, label %335, label %282

282:                                              ; preds = %280, %192, %187
  %283 = phi i16* [ %190, %192 ], [ %190, %187 ], [ %202, %280 ]
  %284 = phi i64 [ %22, %192 ], [ %22, %187 ], [ %203, %280 ]
  %285 = phi i16* [ %19, %192 ], [ %19, %187 ], [ %204, %280 ]
  %286 = add i64 %284, -1
  %287 = and i64 %284, 7
  %288 = icmp eq i64 %287, 0
  br i1 %288, label %300, label %289

289:                                              ; preds = %282, %289
  %290 = phi i16* [ %296, %289 ], [ %283, %282 ]
  %291 = phi i64 [ %295, %289 ], [ %284, %282 ]
  %292 = phi i16* [ %297, %289 ], [ %285, %282 ]
  %293 = phi i64 [ %298, %289 ], [ %287, %282 ]
  %294 = load i16, i16* %292, align 2
  store i16 %294, i16* %290, align 2
  %295 = add i64 %291, -1
  %296 = getelementptr inbounds i16, i16* %290, i64 1
  %297 = getelementptr inbounds i16, i16* %292, i64 1
  %298 = add i64 %293, -1
  %299 = icmp eq i64 %298, 0
  br i1 %299, label %300, label %289, !llvm.loop !58

300:                                              ; preds = %289, %282
  %301 = phi i16* [ %283, %282 ], [ %296, %289 ]
  %302 = phi i64 [ %284, %282 ], [ %295, %289 ]
  %303 = phi i16* [ %285, %282 ], [ %297, %289 ]
  %304 = icmp ult i64 %286, 7
  br i1 %304, label %335, label %305

305:                                              ; preds = %300, %305
  %306 = phi i16* [ %332, %305 ], [ %301, %300 ]
  %307 = phi i64 [ %331, %305 ], [ %302, %300 ]
  %308 = phi i16* [ %333, %305 ], [ %303, %300 ]
  %309 = load i16, i16* %308, align 2
  store i16 %309, i16* %306, align 2
  %310 = getelementptr inbounds i16, i16* %306, i64 1
  %311 = getelementptr inbounds i16, i16* %308, i64 1
  %312 = load i16, i16* %311, align 2
  store i16 %312, i16* %310, align 2
  %313 = getelementptr inbounds i16, i16* %306, i64 2
  %314 = getelementptr inbounds i16, i16* %308, i64 2
  %315 = load i16, i16* %314, align 2
  store i16 %315, i16* %313, align 2
  %316 = getelementptr inbounds i16, i16* %306, i64 3
  %317 = getelementptr inbounds i16, i16* %308, i64 3
  %318 = load i16, i16* %317, align 2
  store i16 %318, i16* %316, align 2
  %319 = getelementptr inbounds i16, i16* %306, i64 4
  %320 = getelementptr inbounds i16, i16* %308, i64 4
  %321 = load i16, i16* %320, align 2
  store i16 %321, i16* %319, align 2
  %322 = getelementptr inbounds i16, i16* %306, i64 5
  %323 = getelementptr inbounds i16, i16* %308, i64 5
  %324 = load i16, i16* %323, align 2
  store i16 %324, i16* %322, align 2
  %325 = getelementptr inbounds i16, i16* %306, i64 6
  %326 = getelementptr inbounds i16, i16* %308, i64 6
  %327 = load i16, i16* %326, align 2
  store i16 %327, i16* %325, align 2
  %328 = getelementptr inbounds i16, i16* %306, i64 7
  %329 = getelementptr inbounds i16, i16* %308, i64 7
  %330 = load i16, i16* %329, align 2
  store i16 %330, i16* %328, align 2
  %331 = add i64 %307, -8
  %332 = getelementptr inbounds i16, i16* %306, i64 8
  %333 = getelementptr inbounds i16, i16* %308, i64 8
  %334 = icmp eq i64 %331, 0
  br i1 %334, label %335, label %305, !llvm.loop !59

335:                                              ; preds = %300, %305, %280
  %336 = bitcast %"class.std::__1::basic_string"* %0 to i8**
  store i8* %189, i8** %336, align 8
  %337 = or i64 %184, -9223372036854775808
  %338 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %337, i64* %338, align 8
  %339 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %22, i64* %339, align 8
  %340 = getelementptr inbounds i16, i16* %190, i64 %22
  store i16 0, i16* %340, align 2
  br label %510

341:                                              ; preds = %5
  %342 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %343 = load i16*, i16** %342, align 8
  %344 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %345 = load i64, i64* %344, align 8
  %346 = bitcast %"class.std::__1::basic_string"* %1 to i16*
  %347 = zext i8 %12 to i64
  %348 = select i1 %13, i16* %343, i16* %346
  %349 = select i1 %13, i64 %345, i64 %347
  %350 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %351 = load i64, i64* %350, align 8
  %352 = and i64 %351, 9223372036854775807
  %353 = icmp ugt i64 %352, %349
  br i1 %353, label %354, label %504

354:                                              ; preds = %341
  %355 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %356 = load i16*, i16** %355, align 8
  %357 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %349, i64* %357, align 8
  %358 = icmp eq i64 %349, 0
  br i1 %358, label %502, label %359

359:                                              ; preds = %354
  %360 = icmp ult i64 %349, 16
  br i1 %360, label %449, label %361

361:                                              ; preds = %359
  %362 = getelementptr i16, i16* %356, i64 %349
  %363 = getelementptr i16, i16* %348, i64 %349
  %364 = icmp ult i16* %356, %363
  %365 = icmp ult i16* %348, %362
  %366 = and i1 %364, %365
  br i1 %366, label %449, label %367

367:                                              ; preds = %361
  %368 = and i64 %349, -16
  %369 = getelementptr i16, i16* %356, i64 %368
  %370 = sub i64 %349, %368
  %371 = getelementptr i16, i16* %348, i64 %368
  %372 = add i64 %368, -16
  %373 = lshr exact i64 %372, 4
  %374 = add nuw nsw i64 %373, 1
  %375 = and i64 %374, 3
  %376 = icmp ult i64 %372, 48
  br i1 %376, label %428, label %377

377:                                              ; preds = %367
  %378 = sub nsw i64 %374, %375
  br label %379

379:                                              ; preds = %379, %377
  %380 = phi i64 [ 0, %377 ], [ %425, %379 ]
  %381 = phi i64 [ %378, %377 ], [ %426, %379 ]
  %382 = getelementptr i16, i16* %356, i64 %380
  %383 = getelementptr i16, i16* %348, i64 %380
  %384 = bitcast i16* %383 to <8 x i16>*
  %385 = load <8 x i16>, <8 x i16>* %384, align 2, !alias.scope !60
  %386 = getelementptr i16, i16* %383, i64 8
  %387 = bitcast i16* %386 to <8 x i16>*
  %388 = load <8 x i16>, <8 x i16>* %387, align 2, !alias.scope !60
  %389 = bitcast i16* %382 to <8 x i16>*
  store <8 x i16> %385, <8 x i16>* %389, align 2, !alias.scope !63, !noalias !60
  %390 = getelementptr i16, i16* %382, i64 8
  %391 = bitcast i16* %390 to <8 x i16>*
  store <8 x i16> %388, <8 x i16>* %391, align 2, !alias.scope !63, !noalias !60
  %392 = or i64 %380, 16
  %393 = getelementptr i16, i16* %356, i64 %392
  %394 = getelementptr i16, i16* %348, i64 %392
  %395 = bitcast i16* %394 to <8 x i16>*
  %396 = load <8 x i16>, <8 x i16>* %395, align 2, !alias.scope !60
  %397 = getelementptr i16, i16* %394, i64 8
  %398 = bitcast i16* %397 to <8 x i16>*
  %399 = load <8 x i16>, <8 x i16>* %398, align 2, !alias.scope !60
  %400 = bitcast i16* %393 to <8 x i16>*
  store <8 x i16> %396, <8 x i16>* %400, align 2, !alias.scope !63, !noalias !60
  %401 = getelementptr i16, i16* %393, i64 8
  %402 = bitcast i16* %401 to <8 x i16>*
  store <8 x i16> %399, <8 x i16>* %402, align 2, !alias.scope !63, !noalias !60
  %403 = or i64 %380, 32
  %404 = getelementptr i16, i16* %356, i64 %403
  %405 = getelementptr i16, i16* %348, i64 %403
  %406 = bitcast i16* %405 to <8 x i16>*
  %407 = load <8 x i16>, <8 x i16>* %406, align 2, !alias.scope !60
  %408 = getelementptr i16, i16* %405, i64 8
  %409 = bitcast i16* %408 to <8 x i16>*
  %410 = load <8 x i16>, <8 x i16>* %409, align 2, !alias.scope !60
  %411 = bitcast i16* %404 to <8 x i16>*
  store <8 x i16> %407, <8 x i16>* %411, align 2, !alias.scope !63, !noalias !60
  %412 = getelementptr i16, i16* %404, i64 8
  %413 = bitcast i16* %412 to <8 x i16>*
  store <8 x i16> %410, <8 x i16>* %413, align 2, !alias.scope !63, !noalias !60
  %414 = or i64 %380, 48
  %415 = getelementptr i16, i16* %356, i64 %414
  %416 = getelementptr i16, i16* %348, i64 %414
  %417 = bitcast i16* %416 to <8 x i16>*
  %418 = load <8 x i16>, <8 x i16>* %417, align 2, !alias.scope !60
  %419 = getelementptr i16, i16* %416, i64 8
  %420 = bitcast i16* %419 to <8 x i16>*
  %421 = load <8 x i16>, <8 x i16>* %420, align 2, !alias.scope !60
  %422 = bitcast i16* %415 to <8 x i16>*
  store <8 x i16> %418, <8 x i16>* %422, align 2, !alias.scope !63, !noalias !60
  %423 = getelementptr i16, i16* %415, i64 8
  %424 = bitcast i16* %423 to <8 x i16>*
  store <8 x i16> %421, <8 x i16>* %424, align 2, !alias.scope !63, !noalias !60
  %425 = add i64 %380, 64
  %426 = add i64 %381, -4
  %427 = icmp eq i64 %426, 0
  br i1 %427, label %428, label %379, !llvm.loop !65

428:                                              ; preds = %379, %367
  %429 = phi i64 [ 0, %367 ], [ %425, %379 ]
  %430 = icmp eq i64 %375, 0
  br i1 %430, label %447, label %431

431:                                              ; preds = %428, %431
  %432 = phi i64 [ %444, %431 ], [ %429, %428 ]
  %433 = phi i64 [ %445, %431 ], [ %375, %428 ]
  %434 = getelementptr i16, i16* %356, i64 %432
  %435 = getelementptr i16, i16* %348, i64 %432
  %436 = bitcast i16* %435 to <8 x i16>*
  %437 = load <8 x i16>, <8 x i16>* %436, align 2, !alias.scope !60
  %438 = getelementptr i16, i16* %435, i64 8
  %439 = bitcast i16* %438 to <8 x i16>*
  %440 = load <8 x i16>, <8 x i16>* %439, align 2, !alias.scope !60
  %441 = bitcast i16* %434 to <8 x i16>*
  store <8 x i16> %437, <8 x i16>* %441, align 2, !alias.scope !63, !noalias !60
  %442 = getelementptr i16, i16* %434, i64 8
  %443 = bitcast i16* %442 to <8 x i16>*
  store <8 x i16> %440, <8 x i16>* %443, align 2, !alias.scope !63, !noalias !60
  %444 = add i64 %432, 16
  %445 = add i64 %433, -1
  %446 = icmp eq i64 %445, 0
  br i1 %446, label %447, label %431, !llvm.loop !66

447:                                              ; preds = %431, %428
  %448 = icmp eq i64 %349, %368
  br i1 %448, label %502, label %449

449:                                              ; preds = %447, %361, %359
  %450 = phi i16* [ %356, %361 ], [ %356, %359 ], [ %369, %447 ]
  %451 = phi i64 [ %349, %361 ], [ %349, %359 ], [ %370, %447 ]
  %452 = phi i16* [ %348, %361 ], [ %348, %359 ], [ %371, %447 ]
  %453 = add i64 %451, -1
  %454 = and i64 %451, 7
  %455 = icmp eq i64 %454, 0
  br i1 %455, label %467, label %456

456:                                              ; preds = %449, %456
  %457 = phi i16* [ %463, %456 ], [ %450, %449 ]
  %458 = phi i64 [ %462, %456 ], [ %451, %449 ]
  %459 = phi i16* [ %464, %456 ], [ %452, %449 ]
  %460 = phi i64 [ %465, %456 ], [ %454, %449 ]
  %461 = load i16, i16* %459, align 2
  store i16 %461, i16* %457, align 2
  %462 = add i64 %458, -1
  %463 = getelementptr inbounds i16, i16* %457, i64 1
  %464 = getelementptr inbounds i16, i16* %459, i64 1
  %465 = add i64 %460, -1
  %466 = icmp eq i64 %465, 0
  br i1 %466, label %467, label %456, !llvm.loop !67

467:                                              ; preds = %456, %449
  %468 = phi i16* [ %450, %449 ], [ %463, %456 ]
  %469 = phi i64 [ %451, %449 ], [ %462, %456 ]
  %470 = phi i16* [ %452, %449 ], [ %464, %456 ]
  %471 = icmp ult i64 %453, 7
  br i1 %471, label %502, label %472

472:                                              ; preds = %467, %472
  %473 = phi i16* [ %499, %472 ], [ %468, %467 ]
  %474 = phi i64 [ %498, %472 ], [ %469, %467 ]
  %475 = phi i16* [ %500, %472 ], [ %470, %467 ]
  %476 = load i16, i16* %475, align 2
  store i16 %476, i16* %473, align 2
  %477 = getelementptr inbounds i16, i16* %473, i64 1
  %478 = getelementptr inbounds i16, i16* %475, i64 1
  %479 = load i16, i16* %478, align 2
  store i16 %479, i16* %477, align 2
  %480 = getelementptr inbounds i16, i16* %473, i64 2
  %481 = getelementptr inbounds i16, i16* %475, i64 2
  %482 = load i16, i16* %481, align 2
  store i16 %482, i16* %480, align 2
  %483 = getelementptr inbounds i16, i16* %473, i64 3
  %484 = getelementptr inbounds i16, i16* %475, i64 3
  %485 = load i16, i16* %484, align 2
  store i16 %485, i16* %483, align 2
  %486 = getelementptr inbounds i16, i16* %473, i64 4
  %487 = getelementptr inbounds i16, i16* %475, i64 4
  %488 = load i16, i16* %487, align 2
  store i16 %488, i16* %486, align 2
  %489 = getelementptr inbounds i16, i16* %473, i64 5
  %490 = getelementptr inbounds i16, i16* %475, i64 5
  %491 = load i16, i16* %490, align 2
  store i16 %491, i16* %489, align 2
  %492 = getelementptr inbounds i16, i16* %473, i64 6
  %493 = getelementptr inbounds i16, i16* %475, i64 6
  %494 = load i16, i16* %493, align 2
  store i16 %494, i16* %492, align 2
  %495 = getelementptr inbounds i16, i16* %473, i64 7
  %496 = getelementptr inbounds i16, i16* %475, i64 7
  %497 = load i16, i16* %496, align 2
  store i16 %497, i16* %495, align 2
  %498 = add i64 %474, -8
  %499 = getelementptr inbounds i16, i16* %473, i64 8
  %500 = getelementptr inbounds i16, i16* %475, i64 8
  %501 = icmp eq i64 %498, 0
  br i1 %501, label %502, label %472, !llvm.loop !68

502:                                              ; preds = %467, %472, %447, %354
  %503 = getelementptr inbounds i16, i16* %356, i64 %349
  store i16 0, i16* %503, align 2
  br label %510

504:                                              ; preds = %341
  %505 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %506 = load i64, i64* %505, align 8
  %507 = add nsw i64 %352, -1
  %508 = add i64 %349, 1
  %509 = sub i64 %508, %352
  tail call void @_ZNSt3__112basic_stringItNS_11char_traitsItEENS_9allocatorItEEE21__grow_by_and_replaceEmmmmmmPKt(%"class.std::__1::basic_string"* %0, i64 %507, i64 %509, i64 %506, i64 0, i64 %506, i64 %349, i16* %348) #8
  br label %510

510:                                              ; preds = %504, %502, %335, %173, %15, %2
  ret %"class.std::__1::basic_string"* %0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112basic_stringItNS_11char_traitsItEENS_9allocatorItEEE21__grow_by_and_replaceEmmmmmmPKt(%"class.std::__1::basic_string"*, i64, i64, i64, i64, i64, i64, i16*) local_unnamed_addr #0 comdat align 2 {
  %9 = sub i64 9223372036854775790, %1
  %10 = icmp ult i64 %9, %2
  br i1 %10, label %11, label %13

11:                                               ; preds = %8
  %12 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %12) #9
  unreachable

13:                                               ; preds = %8
  %14 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %15 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %14, i64 0, i32 1, i32 1
  %16 = load i8, i8* %15, align 1
  %17 = icmp slt i8 %16, 0
  br i1 %17, label %18, label %21

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load i16*, i16** %19, align 8
  br label %23

21:                                               ; preds = %13
  %22 = bitcast %"class.std::__1::basic_string"* %0 to i16*
  br label %23

23:                                               ; preds = %18, %21
  %24 = phi i16* [ %20, %18 ], [ %22, %21 ]
  %25 = bitcast i16* %24 to i8*
  %26 = icmp ult i64 %1, 4611686018427387879
  br i1 %26, label %27, label %38

27:                                               ; preds = %23
  %28 = add i64 %2, %1
  %29 = shl i64 %1, 1
  %30 = icmp ult i64 %28, %29
  %31 = select i1 %30, i64 %29, i64 %28
  %32 = icmp ult i64 %31, 11
  br i1 %32, label %38, label %33

33:                                               ; preds = %27
  %34 = add i64 %31, 8
  %35 = and i64 %34, -8
  %36 = icmp slt i64 %35, 0
  br i1 %36, label %37, label %38

37:                                               ; preds = %33
  tail call void @abort() #9
  unreachable

38:                                               ; preds = %23, %27, %33
  %39 = phi i64 [ %35, %33 ], [ 9223372036854775791, %23 ], [ 11, %27 ]
  %40 = shl i64 %39, 1
  %41 = tail call i8* @_Znwm(i64 %40) #10
  %42 = bitcast i8* %41 to i16*
  %43 = icmp eq i64 %4, 0
  br i1 %43, label %189, label %44

44:                                               ; preds = %38
  %45 = icmp ult i64 %4, 16
  br i1 %45, label %136, label %46

46:                                               ; preds = %44
  %47 = shl i64 %4, 1
  %48 = getelementptr i8, i8* %41, i64 %47
  %49 = getelementptr i16, i16* %24, i64 %4
  %50 = bitcast i16* %49 to i8*
  %51 = icmp ult i8* %41, %50
  %52 = icmp ugt i8* %48, %25
  %53 = and i1 %51, %52
  br i1 %53, label %136, label %54

54:                                               ; preds = %46
  %55 = and i64 %4, -16
  %56 = getelementptr i16, i16* %42, i64 %55
  %57 = sub i64 %4, %55
  %58 = getelementptr i16, i16* %24, i64 %55
  %59 = add i64 %55, -16
  %60 = lshr exact i64 %59, 4
  %61 = add nuw nsw i64 %60, 1
  %62 = and i64 %61, 3
  %63 = icmp ult i64 %59, 48
  br i1 %63, label %115, label %64

64:                                               ; preds = %54
  %65 = sub nsw i64 %61, %62
  br label %66

66:                                               ; preds = %66, %64
  %67 = phi i64 [ 0, %64 ], [ %112, %66 ]
  %68 = phi i64 [ %65, %64 ], [ %113, %66 ]
  %69 = getelementptr i16, i16* %42, i64 %67
  %70 = getelementptr i16, i16* %24, i64 %67
  %71 = bitcast i16* %70 to <8 x i16>*
  %72 = load <8 x i16>, <8 x i16>* %71, align 2, !alias.scope !69
  %73 = getelementptr i16, i16* %70, i64 8
  %74 = bitcast i16* %73 to <8 x i16>*
  %75 = load <8 x i16>, <8 x i16>* %74, align 2, !alias.scope !69
  %76 = bitcast i16* %69 to <8 x i16>*
  store <8 x i16> %72, <8 x i16>* %76, align 2, !alias.scope !72, !noalias !69
  %77 = getelementptr i16, i16* %69, i64 8
  %78 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %78, align 2, !alias.scope !72, !noalias !69
  %79 = or i64 %67, 16
  %80 = getelementptr i16, i16* %42, i64 %79
  %81 = getelementptr i16, i16* %24, i64 %79
  %82 = bitcast i16* %81 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 2, !alias.scope !69
  %84 = getelementptr i16, i16* %81, i64 8
  %85 = bitcast i16* %84 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 2, !alias.scope !69
  %87 = bitcast i16* %80 to <8 x i16>*
  store <8 x i16> %83, <8 x i16>* %87, align 2, !alias.scope !72, !noalias !69
  %88 = getelementptr i16, i16* %80, i64 8
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %89, align 2, !alias.scope !72, !noalias !69
  %90 = or i64 %67, 32
  %91 = getelementptr i16, i16* %42, i64 %90
  %92 = getelementptr i16, i16* %24, i64 %90
  %93 = bitcast i16* %92 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2, !alias.scope !69
  %95 = getelementptr i16, i16* %92, i64 8
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !69
  %98 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %98, align 2, !alias.scope !72, !noalias !69
  %99 = getelementptr i16, i16* %91, i64 8
  %100 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %100, align 2, !alias.scope !72, !noalias !69
  %101 = or i64 %67, 48
  %102 = getelementptr i16, i16* %42, i64 %101
  %103 = getelementptr i16, i16* %24, i64 %101
  %104 = bitcast i16* %103 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2, !alias.scope !69
  %106 = getelementptr i16, i16* %103, i64 8
  %107 = bitcast i16* %106 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !69
  %109 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %109, align 2, !alias.scope !72, !noalias !69
  %110 = getelementptr i16, i16* %102, i64 8
  %111 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %111, align 2, !alias.scope !72, !noalias !69
  %112 = add i64 %67, 64
  %113 = add i64 %68, -4
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %115, label %66, !llvm.loop !74

115:                                              ; preds = %66, %54
  %116 = phi i64 [ 0, %54 ], [ %112, %66 ]
  %117 = icmp eq i64 %62, 0
  br i1 %117, label %134, label %118

118:                                              ; preds = %115, %118
  %119 = phi i64 [ %131, %118 ], [ %116, %115 ]
  %120 = phi i64 [ %132, %118 ], [ %62, %115 ]
  %121 = getelementptr i16, i16* %42, i64 %119
  %122 = getelementptr i16, i16* %24, i64 %119
  %123 = bitcast i16* %122 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 2, !alias.scope !69
  %125 = getelementptr i16, i16* %122, i64 8
  %126 = bitcast i16* %125 to <8 x i16>*
  %127 = load <8 x i16>, <8 x i16>* %126, align 2, !alias.scope !69
  %128 = bitcast i16* %121 to <8 x i16>*
  store <8 x i16> %124, <8 x i16>* %128, align 2, !alias.scope !72, !noalias !69
  %129 = getelementptr i16, i16* %121, i64 8
  %130 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %130, align 2, !alias.scope !72, !noalias !69
  %131 = add i64 %119, 16
  %132 = add i64 %120, -1
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %134, label %118, !llvm.loop !75

134:                                              ; preds = %118, %115
  %135 = icmp eq i64 %55, %4
  br i1 %135, label %189, label %136

136:                                              ; preds = %134, %46, %44
  %137 = phi i16* [ %42, %46 ], [ %42, %44 ], [ %56, %134 ]
  %138 = phi i64 [ %4, %46 ], [ %4, %44 ], [ %57, %134 ]
  %139 = phi i16* [ %24, %46 ], [ %24, %44 ], [ %58, %134 ]
  %140 = add i64 %138, -1
  %141 = and i64 %138, 7
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %154, label %143

143:                                              ; preds = %136, %143
  %144 = phi i16* [ %150, %143 ], [ %137, %136 ]
  %145 = phi i64 [ %149, %143 ], [ %138, %136 ]
  %146 = phi i16* [ %151, %143 ], [ %139, %136 ]
  %147 = phi i64 [ %152, %143 ], [ %141, %136 ]
  %148 = load i16, i16* %146, align 2
  store i16 %148, i16* %144, align 2
  %149 = add i64 %145, -1
  %150 = getelementptr inbounds i16, i16* %144, i64 1
  %151 = getelementptr inbounds i16, i16* %146, i64 1
  %152 = add i64 %147, -1
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %154, label %143, !llvm.loop !76

154:                                              ; preds = %143, %136
  %155 = phi i16* [ %137, %136 ], [ %150, %143 ]
  %156 = phi i64 [ %138, %136 ], [ %149, %143 ]
  %157 = phi i16* [ %139, %136 ], [ %151, %143 ]
  %158 = icmp ult i64 %140, 7
  br i1 %158, label %189, label %159

159:                                              ; preds = %154, %159
  %160 = phi i16* [ %186, %159 ], [ %155, %154 ]
  %161 = phi i64 [ %185, %159 ], [ %156, %154 ]
  %162 = phi i16* [ %187, %159 ], [ %157, %154 ]
  %163 = load i16, i16* %162, align 2
  store i16 %163, i16* %160, align 2
  %164 = getelementptr inbounds i16, i16* %160, i64 1
  %165 = getelementptr inbounds i16, i16* %162, i64 1
  %166 = load i16, i16* %165, align 2
  store i16 %166, i16* %164, align 2
  %167 = getelementptr inbounds i16, i16* %160, i64 2
  %168 = getelementptr inbounds i16, i16* %162, i64 2
  %169 = load i16, i16* %168, align 2
  store i16 %169, i16* %167, align 2
  %170 = getelementptr inbounds i16, i16* %160, i64 3
  %171 = getelementptr inbounds i16, i16* %162, i64 3
  %172 = load i16, i16* %171, align 2
  store i16 %172, i16* %170, align 2
  %173 = getelementptr inbounds i16, i16* %160, i64 4
  %174 = getelementptr inbounds i16, i16* %162, i64 4
  %175 = load i16, i16* %174, align 2
  store i16 %175, i16* %173, align 2
  %176 = getelementptr inbounds i16, i16* %160, i64 5
  %177 = getelementptr inbounds i16, i16* %162, i64 5
  %178 = load i16, i16* %177, align 2
  store i16 %178, i16* %176, align 2
  %179 = getelementptr inbounds i16, i16* %160, i64 6
  %180 = getelementptr inbounds i16, i16* %162, i64 6
  %181 = load i16, i16* %180, align 2
  store i16 %181, i16* %179, align 2
  %182 = getelementptr inbounds i16, i16* %160, i64 7
  %183 = getelementptr inbounds i16, i16* %162, i64 7
  %184 = load i16, i16* %183, align 2
  store i16 %184, i16* %182, align 2
  %185 = add i64 %161, -8
  %186 = getelementptr inbounds i16, i16* %160, i64 8
  %187 = getelementptr inbounds i16, i16* %162, i64 8
  %188 = icmp eq i64 %185, 0
  br i1 %188, label %189, label %159, !llvm.loop !77

189:                                              ; preds = %154, %159, %134, %38
  %190 = icmp eq i64 %6, 0
  br i1 %190, label %289, label %191

191:                                              ; preds = %189
  %192 = getelementptr inbounds i16, i16* %42, i64 %4
  %193 = icmp ult i64 %6, 16
  br i1 %193, label %276, label %194

194:                                              ; preds = %191
  %195 = and i64 %6, -16
  %196 = getelementptr i16, i16* %192, i64 %195
  %197 = sub i64 %6, %195
  %198 = getelementptr i16, i16* %7, i64 %195
  %199 = add i64 %195, -16
  %200 = lshr exact i64 %199, 4
  %201 = add nuw nsw i64 %200, 1
  %202 = and i64 %201, 3
  %203 = icmp ult i64 %199, 48
  br i1 %203, label %255, label %204

204:                                              ; preds = %194
  %205 = sub nsw i64 %201, %202
  br label %206

206:                                              ; preds = %206, %204
  %207 = phi i64 [ 0, %204 ], [ %252, %206 ]
  %208 = phi i64 [ %205, %204 ], [ %253, %206 ]
  %209 = getelementptr i16, i16* %192, i64 %207
  %210 = getelementptr i16, i16* %7, i64 %207
  %211 = bitcast i16* %210 to <8 x i16>*
  %212 = load <8 x i16>, <8 x i16>* %211, align 2
  %213 = getelementptr i16, i16* %210, i64 8
  %214 = bitcast i16* %213 to <8 x i16>*
  %215 = load <8 x i16>, <8 x i16>* %214, align 2
  %216 = bitcast i16* %209 to <8 x i16>*
  store <8 x i16> %212, <8 x i16>* %216, align 2
  %217 = getelementptr i16, i16* %209, i64 8
  %218 = bitcast i16* %217 to <8 x i16>*
  store <8 x i16> %215, <8 x i16>* %218, align 2
  %219 = or i64 %207, 16
  %220 = getelementptr i16, i16* %192, i64 %219
  %221 = getelementptr i16, i16* %7, i64 %219
  %222 = bitcast i16* %221 to <8 x i16>*
  %223 = load <8 x i16>, <8 x i16>* %222, align 2
  %224 = getelementptr i16, i16* %221, i64 8
  %225 = bitcast i16* %224 to <8 x i16>*
  %226 = load <8 x i16>, <8 x i16>* %225, align 2
  %227 = bitcast i16* %220 to <8 x i16>*
  store <8 x i16> %223, <8 x i16>* %227, align 2
  %228 = getelementptr i16, i16* %220, i64 8
  %229 = bitcast i16* %228 to <8 x i16>*
  store <8 x i16> %226, <8 x i16>* %229, align 2
  %230 = or i64 %207, 32
  %231 = getelementptr i16, i16* %192, i64 %230
  %232 = getelementptr i16, i16* %7, i64 %230
  %233 = bitcast i16* %232 to <8 x i16>*
  %234 = load <8 x i16>, <8 x i16>* %233, align 2
  %235 = getelementptr i16, i16* %232, i64 8
  %236 = bitcast i16* %235 to <8 x i16>*
  %237 = load <8 x i16>, <8 x i16>* %236, align 2
  %238 = bitcast i16* %231 to <8 x i16>*
  store <8 x i16> %234, <8 x i16>* %238, align 2
  %239 = getelementptr i16, i16* %231, i64 8
  %240 = bitcast i16* %239 to <8 x i16>*
  store <8 x i16> %237, <8 x i16>* %240, align 2
  %241 = or i64 %207, 48
  %242 = getelementptr i16, i16* %192, i64 %241
  %243 = getelementptr i16, i16* %7, i64 %241
  %244 = bitcast i16* %243 to <8 x i16>*
  %245 = load <8 x i16>, <8 x i16>* %244, align 2
  %246 = getelementptr i16, i16* %243, i64 8
  %247 = bitcast i16* %246 to <8 x i16>*
  %248 = load <8 x i16>, <8 x i16>* %247, align 2
  %249 = bitcast i16* %242 to <8 x i16>*
  store <8 x i16> %245, <8 x i16>* %249, align 2
  %250 = getelementptr i16, i16* %242, i64 8
  %251 = bitcast i16* %250 to <8 x i16>*
  store <8 x i16> %248, <8 x i16>* %251, align 2
  %252 = add i64 %207, 64
  %253 = add i64 %208, -4
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %255, label %206, !llvm.loop !78

255:                                              ; preds = %206, %194
  %256 = phi i64 [ 0, %194 ], [ %252, %206 ]
  %257 = icmp eq i64 %202, 0
  br i1 %257, label %274, label %258

258:                                              ; preds = %255, %258
  %259 = phi i64 [ %271, %258 ], [ %256, %255 ]
  %260 = phi i64 [ %272, %258 ], [ %202, %255 ]
  %261 = getelementptr i16, i16* %192, i64 %259
  %262 = getelementptr i16, i16* %7, i64 %259
  %263 = bitcast i16* %262 to <8 x i16>*
  %264 = load <8 x i16>, <8 x i16>* %263, align 2
  %265 = getelementptr i16, i16* %262, i64 8
  %266 = bitcast i16* %265 to <8 x i16>*
  %267 = load <8 x i16>, <8 x i16>* %266, align 2
  %268 = bitcast i16* %261 to <8 x i16>*
  store <8 x i16> %264, <8 x i16>* %268, align 2
  %269 = getelementptr i16, i16* %261, i64 8
  %270 = bitcast i16* %269 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %270, align 2
  %271 = add i64 %259, 16
  %272 = add i64 %260, -1
  %273 = icmp eq i64 %272, 0
  br i1 %273, label %274, label %258, !llvm.loop !79

274:                                              ; preds = %258, %255
  %275 = icmp eq i64 %195, %6
  br i1 %275, label %289, label %276

276:                                              ; preds = %274, %191
  %277 = phi i16* [ %192, %191 ], [ %196, %274 ]
  %278 = phi i64 [ %6, %191 ], [ %197, %274 ]
  %279 = phi i16* [ %7, %191 ], [ %198, %274 ]
  br label %280

280:                                              ; preds = %276, %280
  %281 = phi i16* [ %286, %280 ], [ %277, %276 ]
  %282 = phi i64 [ %285, %280 ], [ %278, %276 ]
  %283 = phi i16* [ %287, %280 ], [ %279, %276 ]
  %284 = load i16, i16* %283, align 2
  store i16 %284, i16* %281, align 2
  %285 = add i64 %282, -1
  %286 = getelementptr inbounds i16, i16* %281, i64 1
  %287 = getelementptr inbounds i16, i16* %283, i64 1
  %288 = icmp eq i64 %285, 0
  br i1 %288, label %289, label %280, !llvm.loop !80

289:                                              ; preds = %280, %274, %189
  %290 = sub i64 %3, %5
  %291 = sub i64 %290, %4
  %292 = icmp eq i64 %291, 0
  br i1 %292, label %448, label %293

293:                                              ; preds = %289
  %294 = getelementptr inbounds i16, i16* %42, i64 %4
  %295 = getelementptr inbounds i16, i16* %294, i64 %6
  %296 = getelementptr inbounds i16, i16* %24, i64 %4
  %297 = getelementptr inbounds i16, i16* %296, i64 %5
  %298 = icmp ult i64 %291, 16
  br i1 %298, label %395, label %299

299:                                              ; preds = %293
  %300 = bitcast i16* %297 to i8*
  %301 = add i64 %6, %4
  %302 = shl i64 %301, 1
  %303 = getelementptr i8, i8* %41, i64 %302
  %304 = add i64 %6, %3
  %305 = sub i64 %304, %5
  %306 = shl i64 %305, 1
  %307 = getelementptr i8, i8* %41, i64 %306
  %308 = getelementptr i16, i16* %24, i64 %3
  %309 = bitcast i16* %308 to i8*
  %310 = icmp ult i8* %303, %309
  %311 = icmp ugt i8* %307, %300
  %312 = and i1 %310, %311
  br i1 %312, label %395, label %313

313:                                              ; preds = %299
  %314 = and i64 %291, -16
  %315 = getelementptr i16, i16* %295, i64 %314
  %316 = sub i64 %291, %314
  %317 = getelementptr i16, i16* %297, i64 %314
  %318 = add i64 %314, -16
  %319 = lshr exact i64 %318, 4
  %320 = add nuw nsw i64 %319, 1
  %321 = and i64 %320, 3
  %322 = icmp ult i64 %318, 48
  br i1 %322, label %374, label %323

323:                                              ; preds = %313
  %324 = sub nsw i64 %320, %321
  br label %325

325:                                              ; preds = %325, %323
  %326 = phi i64 [ 0, %323 ], [ %371, %325 ]
  %327 = phi i64 [ %324, %323 ], [ %372, %325 ]
  %328 = getelementptr i16, i16* %295, i64 %326
  %329 = getelementptr i16, i16* %297, i64 %326
  %330 = bitcast i16* %329 to <8 x i16>*
  %331 = load <8 x i16>, <8 x i16>* %330, align 2, !alias.scope !82
  %332 = getelementptr i16, i16* %329, i64 8
  %333 = bitcast i16* %332 to <8 x i16>*
  %334 = load <8 x i16>, <8 x i16>* %333, align 2, !alias.scope !82
  %335 = bitcast i16* %328 to <8 x i16>*
  store <8 x i16> %331, <8 x i16>* %335, align 2, !alias.scope !85, !noalias !82
  %336 = getelementptr i16, i16* %328, i64 8
  %337 = bitcast i16* %336 to <8 x i16>*
  store <8 x i16> %334, <8 x i16>* %337, align 2, !alias.scope !85, !noalias !82
  %338 = or i64 %326, 16
  %339 = getelementptr i16, i16* %295, i64 %338
  %340 = getelementptr i16, i16* %297, i64 %338
  %341 = bitcast i16* %340 to <8 x i16>*
  %342 = load <8 x i16>, <8 x i16>* %341, align 2, !alias.scope !82
  %343 = getelementptr i16, i16* %340, i64 8
  %344 = bitcast i16* %343 to <8 x i16>*
  %345 = load <8 x i16>, <8 x i16>* %344, align 2, !alias.scope !82
  %346 = bitcast i16* %339 to <8 x i16>*
  store <8 x i16> %342, <8 x i16>* %346, align 2, !alias.scope !85, !noalias !82
  %347 = getelementptr i16, i16* %339, i64 8
  %348 = bitcast i16* %347 to <8 x i16>*
  store <8 x i16> %345, <8 x i16>* %348, align 2, !alias.scope !85, !noalias !82
  %349 = or i64 %326, 32
  %350 = getelementptr i16, i16* %295, i64 %349
  %351 = getelementptr i16, i16* %297, i64 %349
  %352 = bitcast i16* %351 to <8 x i16>*
  %353 = load <8 x i16>, <8 x i16>* %352, align 2, !alias.scope !82
  %354 = getelementptr i16, i16* %351, i64 8
  %355 = bitcast i16* %354 to <8 x i16>*
  %356 = load <8 x i16>, <8 x i16>* %355, align 2, !alias.scope !82
  %357 = bitcast i16* %350 to <8 x i16>*
  store <8 x i16> %353, <8 x i16>* %357, align 2, !alias.scope !85, !noalias !82
  %358 = getelementptr i16, i16* %350, i64 8
  %359 = bitcast i16* %358 to <8 x i16>*
  store <8 x i16> %356, <8 x i16>* %359, align 2, !alias.scope !85, !noalias !82
  %360 = or i64 %326, 48
  %361 = getelementptr i16, i16* %295, i64 %360
  %362 = getelementptr i16, i16* %297, i64 %360
  %363 = bitcast i16* %362 to <8 x i16>*
  %364 = load <8 x i16>, <8 x i16>* %363, align 2, !alias.scope !82
  %365 = getelementptr i16, i16* %362, i64 8
  %366 = bitcast i16* %365 to <8 x i16>*
  %367 = load <8 x i16>, <8 x i16>* %366, align 2, !alias.scope !82
  %368 = bitcast i16* %361 to <8 x i16>*
  store <8 x i16> %364, <8 x i16>* %368, align 2, !alias.scope !85, !noalias !82
  %369 = getelementptr i16, i16* %361, i64 8
  %370 = bitcast i16* %369 to <8 x i16>*
  store <8 x i16> %367, <8 x i16>* %370, align 2, !alias.scope !85, !noalias !82
  %371 = add i64 %326, 64
  %372 = add i64 %327, -4
  %373 = icmp eq i64 %372, 0
  br i1 %373, label %374, label %325, !llvm.loop !87

374:                                              ; preds = %325, %313
  %375 = phi i64 [ 0, %313 ], [ %371, %325 ]
  %376 = icmp eq i64 %321, 0
  br i1 %376, label %393, label %377

377:                                              ; preds = %374, %377
  %378 = phi i64 [ %390, %377 ], [ %375, %374 ]
  %379 = phi i64 [ %391, %377 ], [ %321, %374 ]
  %380 = getelementptr i16, i16* %295, i64 %378
  %381 = getelementptr i16, i16* %297, i64 %378
  %382 = bitcast i16* %381 to <8 x i16>*
  %383 = load <8 x i16>, <8 x i16>* %382, align 2, !alias.scope !82
  %384 = getelementptr i16, i16* %381, i64 8
  %385 = bitcast i16* %384 to <8 x i16>*
  %386 = load <8 x i16>, <8 x i16>* %385, align 2, !alias.scope !82
  %387 = bitcast i16* %380 to <8 x i16>*
  store <8 x i16> %383, <8 x i16>* %387, align 2, !alias.scope !85, !noalias !82
  %388 = getelementptr i16, i16* %380, i64 8
  %389 = bitcast i16* %388 to <8 x i16>*
  store <8 x i16> %386, <8 x i16>* %389, align 2, !alias.scope !85, !noalias !82
  %390 = add i64 %378, 16
  %391 = add i64 %379, -1
  %392 = icmp eq i64 %391, 0
  br i1 %392, label %393, label %377, !llvm.loop !88

393:                                              ; preds = %377, %374
  %394 = icmp eq i64 %291, %314
  br i1 %394, label %448, label %395

395:                                              ; preds = %393, %299, %293
  %396 = phi i16* [ %295, %299 ], [ %295, %293 ], [ %315, %393 ]
  %397 = phi i64 [ %291, %299 ], [ %291, %293 ], [ %316, %393 ]
  %398 = phi i16* [ %297, %299 ], [ %297, %293 ], [ %317, %393 ]
  %399 = add i64 %397, -1
  %400 = and i64 %397, 7
  %401 = icmp eq i64 %400, 0
  br i1 %401, label %413, label %402

402:                                              ; preds = %395, %402
  %403 = phi i16* [ %409, %402 ], [ %396, %395 ]
  %404 = phi i64 [ %408, %402 ], [ %397, %395 ]
  %405 = phi i16* [ %410, %402 ], [ %398, %395 ]
  %406 = phi i64 [ %411, %402 ], [ %400, %395 ]
  %407 = load i16, i16* %405, align 2
  store i16 %407, i16* %403, align 2
  %408 = add i64 %404, -1
  %409 = getelementptr inbounds i16, i16* %403, i64 1
  %410 = getelementptr inbounds i16, i16* %405, i64 1
  %411 = add i64 %406, -1
  %412 = icmp eq i64 %411, 0
  br i1 %412, label %413, label %402, !llvm.loop !89

413:                                              ; preds = %402, %395
  %414 = phi i16* [ %396, %395 ], [ %409, %402 ]
  %415 = phi i64 [ %397, %395 ], [ %408, %402 ]
  %416 = phi i16* [ %398, %395 ], [ %410, %402 ]
  %417 = icmp ult i64 %399, 7
  br i1 %417, label %448, label %418

418:                                              ; preds = %413, %418
  %419 = phi i16* [ %445, %418 ], [ %414, %413 ]
  %420 = phi i64 [ %444, %418 ], [ %415, %413 ]
  %421 = phi i16* [ %446, %418 ], [ %416, %413 ]
  %422 = load i16, i16* %421, align 2
  store i16 %422, i16* %419, align 2
  %423 = getelementptr inbounds i16, i16* %419, i64 1
  %424 = getelementptr inbounds i16, i16* %421, i64 1
  %425 = load i16, i16* %424, align 2
  store i16 %425, i16* %423, align 2
  %426 = getelementptr inbounds i16, i16* %419, i64 2
  %427 = getelementptr inbounds i16, i16* %421, i64 2
  %428 = load i16, i16* %427, align 2
  store i16 %428, i16* %426, align 2
  %429 = getelementptr inbounds i16, i16* %419, i64 3
  %430 = getelementptr inbounds i16, i16* %421, i64 3
  %431 = load i16, i16* %430, align 2
  store i16 %431, i16* %429, align 2
  %432 = getelementptr inbounds i16, i16* %419, i64 4
  %433 = getelementptr inbounds i16, i16* %421, i64 4
  %434 = load i16, i16* %433, align 2
  store i16 %434, i16* %432, align 2
  %435 = getelementptr inbounds i16, i16* %419, i64 5
  %436 = getelementptr inbounds i16, i16* %421, i64 5
  %437 = load i16, i16* %436, align 2
  store i16 %437, i16* %435, align 2
  %438 = getelementptr inbounds i16, i16* %419, i64 6
  %439 = getelementptr inbounds i16, i16* %421, i64 6
  %440 = load i16, i16* %439, align 2
  store i16 %440, i16* %438, align 2
  %441 = getelementptr inbounds i16, i16* %419, i64 7
  %442 = getelementptr inbounds i16, i16* %421, i64 7
  %443 = load i16, i16* %442, align 2
  store i16 %443, i16* %441, align 2
  %444 = add i64 %420, -8
  %445 = getelementptr inbounds i16, i16* %419, i64 8
  %446 = getelementptr inbounds i16, i16* %421, i64 8
  %447 = icmp eq i64 %444, 0
  br i1 %447, label %448, label %418, !llvm.loop !90

448:                                              ; preds = %413, %418, %393, %289
  %449 = icmp eq i64 %1, 10
  br i1 %449, label %451, label %450

450:                                              ; preds = %448
  tail call void @_ZdlPv(i8* %25) #10
  br label %451

451:                                              ; preds = %448, %450
  %452 = bitcast %"class.std::__1::basic_string"* %0 to i8**
  store i8* %41, i8** %452, align 8
  %453 = or i64 %39, -9223372036854775808
  %454 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %453, i64* %454, align 8
  %455 = add i64 %290, %6
  %456 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %455, i64* %456, align 8
  %457 = getelementptr inbounds i16, i16* %42, i64 %455
  store i16 0, i16* %457, align 2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZNK12v8_inspector8String1615stripWhiteSpaceEv(%"class.v8_inspector::String16"* sret, %"class.v8_inspector::String16"*) local_unnamed_addr #2

declare void @_ZN2v82V813DisposeGlobalEPm(i64*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_10unique_ptrIN12v8_inspector8protocol8Debugger11SearchMatchENS_14default_deleteIS5_EEEENS_9allocatorIS8_EEE21__push_back_slow_pathIS8_EEvOT_(%"class.std::__1::vector"*, %"class.std::__1::unique_ptr"* dereferenceable(8)) local_unnamed_addr #7 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.std::__1::unique_ptr"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 2305843009213693951
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #9
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.std::__1::unique_ptr"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 3
  %20 = icmp ult i64 %19, 1152921504606846975
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 2
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 2305843009213693951
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #9
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 2305843009213693951, %14 ]
  %31 = shl i64 %30, 3
  %32 = tail call i8* @_Znwm(i64 %31) #10
  %33 = bitcast i8* %32 to %"class.std::__1::unique_ptr"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"class.std::__1::unique_ptr"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %36, i64 %9
  %38 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %36, i64 %35
  %39 = ptrtoint %"class.std::__1::unique_ptr"* %38 to i64
  %40 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %1, i64 0, i32 0, i32 0, i32 0
  %41 = bitcast %"class.std::__1::unique_ptr"* %1 to i64*
  %42 = load i64, i64* %41, align 8
  store %"class.v8_inspector::protocol::Debugger::SearchMatch"* null, %"class.v8_inspector::protocol::Debugger::SearchMatch"** %40, align 8
  %43 = bitcast %"class.std::__1::unique_ptr"* %37 to i64*
  store i64 %42, i64* %43, align 8
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %37, i64 1
  %45 = ptrtoint %"class.std::__1::unique_ptr"* %44 to i64
  %46 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %47 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %46, align 8
  %48 = ptrtoint %"class.std::__1::unique_ptr"* %47 to i64
  %49 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %3, align 8
  %50 = icmp eq %"class.std::__1::unique_ptr"* %49, %47
  br i1 %50, label %132, label %51

51:                                               ; preds = %34
  %52 = getelementptr %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %49, i64 -1, i32 0, i32 0, i32 0
  %53 = ptrtoint %"class.v8_inspector::protocol::Debugger::SearchMatch"** %52 to i64
  %54 = sub i64 %53, %48
  %55 = lshr i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = and i64 %56, 7
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %71, label %59

59:                                               ; preds = %51, %59
  %60 = phi %"class.std::__1::unique_ptr"* [ %63, %59 ], [ %37, %51 ]
  %61 = phi %"class.std::__1::unique_ptr"* [ %64, %59 ], [ %49, %51 ]
  %62 = phi i64 [ %69, %59 ], [ %57, %51 ]
  %63 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %60, i64 -1
  %64 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %61, i64 -1
  %65 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %64, i64 0, i32 0, i32 0, i32 0
  %66 = bitcast %"class.std::__1::unique_ptr"* %64 to i64*
  %67 = load i64, i64* %66, align 8
  store %"class.v8_inspector::protocol::Debugger::SearchMatch"* null, %"class.v8_inspector::protocol::Debugger::SearchMatch"** %65, align 8
  %68 = bitcast %"class.std::__1::unique_ptr"* %63 to i64*
  store i64 %67, i64* %68, align 8
  %69 = add i64 %62, -1
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %59, !llvm.loop !91

71:                                               ; preds = %59, %51
  %72 = phi %"class.std::__1::unique_ptr"* [ undef, %51 ], [ %63, %59 ]
  %73 = phi %"class.std::__1::unique_ptr"* [ %37, %51 ], [ %63, %59 ]
  %74 = phi %"class.std::__1::unique_ptr"* [ %49, %51 ], [ %64, %59 ]
  %75 = icmp ult i64 %54, 56
  br i1 %75, label %128, label %76

76:                                               ; preds = %71, %76
  %77 = phi %"class.std::__1::unique_ptr"* [ %121, %76 ], [ %73, %71 ]
  %78 = phi %"class.std::__1::unique_ptr"* [ %122, %76 ], [ %74, %71 ]
  %79 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -1
  %80 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -1
  %81 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %80, i64 0, i32 0, i32 0, i32 0
  %82 = bitcast %"class.std::__1::unique_ptr"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  store %"class.v8_inspector::protocol::Debugger::SearchMatch"* null, %"class.v8_inspector::protocol::Debugger::SearchMatch"** %81, align 8
  %84 = bitcast %"class.std::__1::unique_ptr"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -2
  %86 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -2
  %87 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %86, i64 0, i32 0, i32 0, i32 0
  %88 = bitcast %"class.std::__1::unique_ptr"* %86 to i64*
  %89 = load i64, i64* %88, align 8
  store %"class.v8_inspector::protocol::Debugger::SearchMatch"* null, %"class.v8_inspector::protocol::Debugger::SearchMatch"** %87, align 8
  %90 = bitcast %"class.std::__1::unique_ptr"* %85 to i64*
  store i64 %89, i64* %90, align 8
  %91 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -3
  %92 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -3
  %93 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %92, i64 0, i32 0, i32 0, i32 0
  %94 = bitcast %"class.std::__1::unique_ptr"* %92 to i64*
  %95 = load i64, i64* %94, align 8
  store %"class.v8_inspector::protocol::Debugger::SearchMatch"* null, %"class.v8_inspector::protocol::Debugger::SearchMatch"** %93, align 8
  %96 = bitcast %"class.std::__1::unique_ptr"* %91 to i64*
  store i64 %95, i64* %96, align 8
  %97 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -4
  %98 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -4
  %99 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %98, i64 0, i32 0, i32 0, i32 0
  %100 = bitcast %"class.std::__1::unique_ptr"* %98 to i64*
  %101 = load i64, i64* %100, align 8
  store %"class.v8_inspector::protocol::Debugger::SearchMatch"* null, %"class.v8_inspector::protocol::Debugger::SearchMatch"** %99, align 8
  %102 = bitcast %"class.std::__1::unique_ptr"* %97 to i64*
  store i64 %101, i64* %102, align 8
  %103 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -5
  %104 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -5
  %105 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %104, i64 0, i32 0, i32 0, i32 0
  %106 = bitcast %"class.std::__1::unique_ptr"* %104 to i64*
  %107 = load i64, i64* %106, align 8
  store %"class.v8_inspector::protocol::Debugger::SearchMatch"* null, %"class.v8_inspector::protocol::Debugger::SearchMatch"** %105, align 8
  %108 = bitcast %"class.std::__1::unique_ptr"* %103 to i64*
  store i64 %107, i64* %108, align 8
  %109 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -6
  %110 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -6
  %111 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %110, i64 0, i32 0, i32 0, i32 0
  %112 = bitcast %"class.std::__1::unique_ptr"* %110 to i64*
  %113 = load i64, i64* %112, align 8
  store %"class.v8_inspector::protocol::Debugger::SearchMatch"* null, %"class.v8_inspector::protocol::Debugger::SearchMatch"** %111, align 8
  %114 = bitcast %"class.std::__1::unique_ptr"* %109 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -7
  %116 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -7
  %117 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %116, i64 0, i32 0, i32 0, i32 0
  %118 = bitcast %"class.std::__1::unique_ptr"* %116 to i64*
  %119 = load i64, i64* %118, align 8
  store %"class.v8_inspector::protocol::Debugger::SearchMatch"* null, %"class.v8_inspector::protocol::Debugger::SearchMatch"** %117, align 8
  %120 = bitcast %"class.std::__1::unique_ptr"* %115 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -8
  %122 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -8
  %123 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %122, i64 0, i32 0, i32 0, i32 0
  %124 = bitcast %"class.std::__1::unique_ptr"* %122 to i64*
  %125 = load i64, i64* %124, align 8
  store %"class.v8_inspector::protocol::Debugger::SearchMatch"* null, %"class.v8_inspector::protocol::Debugger::SearchMatch"** %123, align 8
  %126 = bitcast %"class.std::__1::unique_ptr"* %121 to i64*
  store i64 %125, i64* %126, align 8
  %127 = icmp eq %"class.std::__1::unique_ptr"* %122, %47
  br i1 %127, label %128, label %76

128:                                              ; preds = %76, %71
  %129 = phi %"class.std::__1::unique_ptr"* [ %72, %71 ], [ %121, %76 ]
  %130 = load i64, i64* %6, align 8
  %131 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %3, align 8
  br label %132

132:                                              ; preds = %34, %128
  %133 = phi %"class.std::__1::unique_ptr"* [ %131, %128 ], [ %47, %34 ]
  %134 = phi %"class.std::__1::unique_ptr"* [ %129, %128 ], [ %37, %34 ]
  %135 = phi i64 [ %130, %128 ], [ %48, %34 ]
  %136 = ptrtoint %"class.std::__1::unique_ptr"* %134 to i64
  store i64 %136, i64* %6, align 8
  store i64 %45, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %137 = inttoptr i64 %135 to %"class.std::__1::unique_ptr"*
  %138 = icmp eq %"class.std::__1::unique_ptr"* %133, %137
  br i1 %138, label %152, label %139

139:                                              ; preds = %132, %150
  %140 = phi %"class.std::__1::unique_ptr"* [ %141, %150 ], [ %133, %132 ]
  %141 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %140, i64 -1
  %142 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %141, i64 0, i32 0, i32 0, i32 0
  %143 = load %"class.v8_inspector::protocol::Debugger::SearchMatch"*, %"class.v8_inspector::protocol::Debugger::SearchMatch"** %142, align 8
  store %"class.v8_inspector::protocol::Debugger::SearchMatch"* null, %"class.v8_inspector::protocol::Debugger::SearchMatch"** %142, align 8
  %144 = icmp eq %"class.v8_inspector::protocol::Debugger::SearchMatch"* %143, null
  br i1 %144, label %150, label %145

145:                                              ; preds = %139
  %146 = bitcast %"class.v8_inspector::protocol::Debugger::SearchMatch"* %143 to void (%"class.v8_inspector::protocol::Debugger::SearchMatch"*)***
  %147 = load void (%"class.v8_inspector::protocol::Debugger::SearchMatch"*)**, void (%"class.v8_inspector::protocol::Debugger::SearchMatch"*)*** %146, align 8
  %148 = getelementptr inbounds void (%"class.v8_inspector::protocol::Debugger::SearchMatch"*)*, void (%"class.v8_inspector::protocol::Debugger::SearchMatch"*)** %147, i64 2
  %149 = load void (%"class.v8_inspector::protocol::Debugger::SearchMatch"*)*, void (%"class.v8_inspector::protocol::Debugger::SearchMatch"*)** %148, align 8
  tail call void %149(%"class.v8_inspector::protocol::Debugger::SearchMatch"* nonnull %143) #8
  br label %150

150:                                              ; preds = %145, %139
  %151 = icmp eq %"class.std::__1::unique_ptr"* %141, %137
  br i1 %151, label %152, label %139

152:                                              ; preds = %150, %132
  %153 = icmp eq i64 %135, 0
  br i1 %153, label %156, label %154

154:                                              ; preds = %152
  %155 = inttoptr i64 %135 to i8*
  tail call void @_ZdlPv(i8* %155) #10
  br label %156

156:                                              ; preds = %152, %154
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !10}
!12 = distinct !{!12, !8}
!13 = !{!14}
!14 = distinct !{!14, !15, !"_ZN12v8_inspector12_GLOBAL__N_123createSearchRegexSourceERKNS_8String16E: argument 0"}
!15 = distinct !{!15, !"_ZN12v8_inspector12_GLOBAL__N_123createSearchRegexSourceERKNS_8String16E"}
!16 = !{!17}
!17 = distinct !{!17, !18, !"_ZN12v8_inspector12_GLOBAL__N_126scriptRegexpMatchesByLinesERKNS_7V8RegexERKNS_8String16E: argument 0"}
!18 = distinct !{!18, !"_ZN12v8_inspector12_GLOBAL__N_126scriptRegexpMatchesByLinesERKNS_7V8RegexERKNS_8String16E"}
!19 = !{!20}
!20 = distinct !{!20, !21}
!21 = distinct !{!21, !"LVerDomain"}
!22 = !{!23}
!23 = distinct !{!23, !21}
!24 = !{!17, !20}
!25 = distinct !{!25, !8}
!26 = distinct !{!26, !10}
!27 = distinct !{!27, !10}
!28 = distinct !{!28, !8}
!29 = distinct !{!29, !10}
!30 = !{!31}
!31 = distinct !{!31, !32, !"_ZNKSt3__112basic_stringItNS_11char_traitsItEENS_9allocatorItEEE6substrEmm: argument 0"}
!32 = distinct !{!32, !"_ZNKSt3__112basic_stringItNS_11char_traitsItEENS_9allocatorItEEE6substrEmm"}
!33 = !{!34}
!34 = distinct !{!34, !35}
!35 = distinct !{!35, !"LVerDomain"}
!36 = !{!37}
!37 = distinct !{!37, !35}
!38 = distinct !{!38, !8}
!39 = distinct !{!39, !10}
!40 = distinct !{!40, !10}
!41 = distinct !{!41, !8}
!42 = !{!43}
!43 = distinct !{!43, !44}
!44 = distinct !{!44, !"LVerDomain"}
!45 = !{!46}
!46 = distinct !{!46, !44}
!47 = distinct !{!47, !8}
!48 = distinct !{!48, !10}
!49 = distinct !{!49, !10}
!50 = distinct !{!50, !8}
!51 = !{!52}
!52 = distinct !{!52, !53}
!53 = distinct !{!53, !"LVerDomain"}
!54 = !{!55}
!55 = distinct !{!55, !53}
!56 = distinct !{!56, !8}
!57 = distinct !{!57, !10}
!58 = distinct !{!58, !10}
!59 = distinct !{!59, !8}
!60 = !{!61}
!61 = distinct !{!61, !62}
!62 = distinct !{!62, !"LVerDomain"}
!63 = !{!64}
!64 = distinct !{!64, !62}
!65 = distinct !{!65, !8}
!66 = distinct !{!66, !10}
!67 = distinct !{!67, !10}
!68 = distinct !{!68, !8}
!69 = !{!70}
!70 = distinct !{!70, !71}
!71 = distinct !{!71, !"LVerDomain"}
!72 = !{!73}
!73 = distinct !{!73, !71}
!74 = distinct !{!74, !8}
!75 = distinct !{!75, !10}
!76 = distinct !{!76, !10}
!77 = distinct !{!77, !8}
!78 = distinct !{!78, !8}
!79 = distinct !{!79, !10}
!80 = distinct !{!80, !81, !8}
!81 = !{!"llvm.loop.unroll.runtime.disable"}
!82 = !{!83}
!83 = distinct !{!83, !84}
!84 = distinct !{!84, !"LVerDomain"}
!85 = !{!86}
!86 = distinct !{!86, !84}
!87 = distinct !{!87, !8}
!88 = distinct !{!88, !10}
!89 = distinct !{!89, !10}
!90 = distinct !{!90, !8}
!91 = distinct !{!91, !10}
