; ModuleID = '../../third_party/pdfium/fxbarcode/cbc_ean13.cpp'
source_filename = "../../third_party/pdfium/fxbarcode/cbc_ean13.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CBC_EAN13 = type { %class.CBC_EANCode }
%class.CBC_EANCode = type { %class.CBC_OneCode, %"class.fxcrt::WideString" }
%class.CBC_OneCode = type { %class.CBC_CodeBase }
%class.CBC_CodeBase = type { i32 (...)**, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.CBC_Writer* }
%class.CBC_Writer = type <{ i32 (...)**, i32, i32, i32, i32, i32, i16, [2 x i8] }>
%"class.fxcrt::WideString" = type { %"class.fxcrt::RetainPtr" }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr.1" }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.fxcrt::StringDataTemplate"* }
%"class.fxcrt::StringDataTemplate" = type <{ i64, i64, i64, [1 x i32], [4 x i8] }>
%class.CBC_OnedEAN13Writer = type { %class.CBC_OneDimEANWriter.base, i32 }
%class.CBC_OneDimEANWriter.base = type { %class.CBC_OneDimWriter.base }
%class.CBC_OneDimWriter.base = type <{ %class.CBC_Writer.base, i8, i8, i8, i8, [6 x i8], %"class.fxcrt::UnownedPtr", float, i32, i32, i8, [3 x i8], i32, [4 x i8], i64, %"class.std::__1::vector", i32, i32, float }>
%class.CBC_Writer.base = type <{ i32 (...)**, i32, i32, i32, i32, i32, i16 }>
%"class.fxcrt::UnownedPtr" = type { %class.CFX_Font* }
%class.CFX_Font = type opaque
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %class.CFX_PathData*, %class.CFX_PathData*, %"class.std::__1::__compressed_pair.8" }
%class.CFX_PathData = type opaque
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %class.CFX_PathData* }
%class.CBC_OneDimEANWriter = type { %class.CBC_OneDimWriter.base, [4 x i8] }
%"class.fxcrt::StringViewTemplate" = type { %"class.pdfium::span" }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr.20", i64 }
%"class.fxcrt::UnownedPtr.20" = type { i32* }
%class.CFX_RenderDevice = type opaque
%class.CFX_Matrix = type { float, float, float, float, float, float }

@_ZTV9CBC_EAN13 = hidden unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.CBC_EAN13*)* @_ZN9CBC_EAN13D2Ev to i8*), i8* bitcast (void (%class.CBC_EAN13*)* @_ZN9CBC_EAN13D0Ev to i8*), i8* bitcast (i8 (%class.CBC_EAN13*)* @_ZN9CBC_EAN137GetTypeEv to i8*), i8* bitcast (i1 (%class.CBC_EANCode*, %"class.fxcrt::StringViewTemplate"*)* @_ZN11CBC_EANCode6EncodeEN5fxcrt18StringViewTemplateIwEE to i8*), i8* bitcast (i1 (%class.CBC_EANCode*, %class.CFX_RenderDevice*, %class.CFX_Matrix*)* @_ZN11CBC_EANCode12RenderDeviceEP16CFX_RenderDeviceRK10CFX_Matrix to i8*), i8* bitcast (i32 (%class.CBC_EAN13*)* @_ZNK9CBC_EAN139GetFormatEv to i8*), i8* bitcast (i64 (%class.CBC_EAN13*)* @_ZNK9CBC_EAN1312GetMaxLengthEv to i8*)] }, align 8

@_ZN9CBC_EAN13C1Ev = hidden unnamed_addr alias void (%class.CBC_EAN13*), void (%class.CBC_EAN13*)* @_ZN9CBC_EAN13C2Ev
@_ZN9CBC_EAN13D1Ev = hidden unnamed_addr alias void (%class.CBC_EAN13*), void (%class.CBC_EAN13*)* @_ZN9CBC_EAN13D2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9CBC_EAN13C2Ev(%class.CBC_EAN13*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CBC_EAN13, %class.CBC_EAN13* %0, i64 0, i32 0
  %3 = tail call i8* @_Znwm(i64 120) #6
  %4 = bitcast i8* %3 to %class.CBC_OnedEAN13Writer*
  tail call void @_ZN19CBC_OnedEAN13WriterC1Ev(%class.CBC_OnedEAN13Writer* nonnull %4) #7
  %5 = bitcast i8* %3 to %class.CBC_OneDimEANWriter*
  tail call void @_ZN11CBC_EANCodeC2ENSt3__110unique_ptrI19CBC_OneDimEANWriterNS0_14default_deleteIS2_EEEE(%class.CBC_EANCode* %2, %class.CBC_OneDimEANWriter* nonnull %5) #7
  %6 = getelementptr inbounds %class.CBC_EAN13, %class.CBC_EAN13* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTV9CBC_EAN13, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  ret void
}

declare void @_ZN11CBC_EANCodeC2ENSt3__110unique_ptrI19CBC_OneDimEANWriterNS0_14default_deleteIS2_EEEE(%class.CBC_EANCode*, %class.CBC_OneDimEANWriter*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN11CBC_EANCodeD2Ev(%class.CBC_EANCode*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9CBC_EAN13D2Ev(%class.CBC_EAN13*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CBC_EAN13, %class.CBC_EAN13* %0, i64 0, i32 0
  tail call void @_ZN11CBC_EANCodeD2Ev(%class.CBC_EANCode* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9CBC_EAN13D0Ev(%class.CBC_EAN13*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CBC_EAN13, %class.CBC_EAN13* %0, i64 0, i32 0
  tail call void @_ZN11CBC_EANCodeD2Ev(%class.CBC_EANCode* %2) #7
  %3 = bitcast %class.CBC_EAN13* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #6
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden signext i8 @_ZN9CBC_EAN137GetTypeEv(%class.CBC_EAN13* nocapture readnone) unnamed_addr #4 align 2 {
  ret i8 7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZNK9CBC_EAN139GetFormatEv(%class.CBC_EAN13* nocapture readnone) unnamed_addr #4 align 2 {
  ret i32 7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZNK9CBC_EAN1312GetMaxLengthEv(%class.CBC_EAN13* nocapture readnone) unnamed_addr #4 align 2 {
  ret i64 12
}

declare zeroext i1 @_ZN11CBC_EANCode6EncodeEN5fxcrt18StringViewTemplateIwEE(%class.CBC_EANCode*, %"class.fxcrt::StringViewTemplate"*) unnamed_addr #1

declare zeroext i1 @_ZN11CBC_EANCode12RenderDeviceEP16CFX_RenderDeviceRK10CFX_Matrix(%class.CBC_EANCode*, %class.CFX_RenderDevice*, %class.CFX_Matrix* dereferenceable(24)) unnamed_addr #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

declare void @_ZN19CBC_OnedEAN13WriterC1Ev(%class.CBC_OnedEAN13Writer*) unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { builtin nounwind }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
