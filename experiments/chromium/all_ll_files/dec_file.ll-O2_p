; ModuleID = '../../third_party/libjxl/src/lib/jxl/dec_file.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/dec_file.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.jxl::CodecMetadata" = type { %"struct.jxl::ImageMetadata", %"class.jxl::SizeHeader", %"struct.jxl::CustomTransformData" }
%"struct.jxl::ImageMetadata" = type <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], %"struct.jxl::ColorEncoding", i32, i8, i8, i8, i8, %"class.jxl::SizeHeader", %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector", %"struct.jxl::CustomTransformData", %"class.jxl::PreviewHeader", %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>
%"class.jxl::Fields" = type { i32 (...)** }
%"struct.jxl::BitDepth" = type <{ %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8] }>
%"struct.jxl::ColorEncoding" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::CustomTransferFunction", i32, i8, i8, %"class.jxl::PaddedBytes", i32, %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }
%"struct.jxl::CustomTransferFunction" = type { %"class.jxl::Fields", i32, i8, i32, i32 }
%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"struct.jxl::Customxy" = type { %"class.jxl::Fields", i32, i32 }
%"struct.jxl::ToneMapping" = type <{ %"class.jxl::Fields", i8, [3 x i8], float, float, i8, [3 x i8], float, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"*, %"class.std::__1::__compressed_pair.4" }
%"struct.jxl::ExtraChannelInfo" = type { %"class.jxl::Fields", i8, i32, %"struct.jxl::BitDepth", i32, %"class.std::__1::basic_string", i8, [4 x float], i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"struct.jxl::ExtraChannelInfo"* }
%"class.jxl::PreviewHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::AnimationHeader" = type <{ %"class.jxl::Fields", i32, i32, i32, i8, [3 x i8] }>
%"class.jxl::SizeHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::CustomTransformData" = type <{ %"class.jxl::Fields", i8, i8, [6 x i8], %"struct.jxl::OpsinInverseMatrix", i32, [15 x float], [55 x float], [210 x float], [4 x i8] }>
%"struct.jxl::OpsinInverseMatrix" = type <{ %"class.jxl::Fields", i8, [3 x i8], [9 x float], [3 x float], [4 x float], [4 x i8] }>
%"struct.jxl::YCbCrChromaSubsampling" = type <{ %"class.jxl::Fields", [3 x i32], i8, i8, [2 x i8] }>
%"struct.jxl::Passes" = type <{ %"class.jxl::Fields", i32, i32, [11 x i32], [11 x i32], [11 x i32], [4 x i8] }>
%"struct.jxl::FrameSize" = type { i32, i32 }
%"struct.jxl::FrameOrigin" = type { i32, i32 }
%"struct.jxl::BlendingInfo" = type <{ %"class.jxl::Fields", i32, i32, i8, [3 x i8], i32, i64, i8, [7 x i8] }>
%"class.std::__1::vector.92" = type { %"class.std::__1::__vector_base.93" }
%"class.std::__1::__vector_base.93" = type { %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"*, %"class.std::__1::__compressed_pair.94" }
%"class.std::__1::__compressed_pair.94" = type { %"struct.std::__1::__compressed_pair_elem.95" }
%"struct.std::__1::__compressed_pair_elem.95" = type { %"struct.jxl::BlendingInfo"* }
%"struct.jxl::AnimationFrame" = type { %"class.jxl::Fields", i32, i32, %"struct.jxl::CodecMetadata"* }
%"struct.jxl::LoopFilter" = type <{ %"class.jxl::Fields", i8, i8, i8, i8, float, float, float, float, float, float, i32, i8, [3 x i8], [8 x float], i8, [3 x i8], [3 x float], float, float, i8, [3 x i8], float, float, float, float, float, [4 x i8], i64, i8, [7 x i8] }>
%"struct.jxl::FrameDimensions" = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%"class.jxl::AcStrategyImage" = type { %"class.jxl::Plane.99", i8*, i64 }
%"class.jxl::DequantMatrices" = type { %"class.std::__1::unique_ptr.100", float*, float*, [3 x float], [3 x float], [81 x i64], %"class.std::__1::vector.104" }
%"class.std::__1::unique_ptr.100" = type { %"class.std::__1::__compressed_pair.101" }
%"class.std::__1::__compressed_pair.101" = type { %"struct.std::__1::__compressed_pair_elem.102", %"struct.std::__1::__compressed_pair_elem.103" }
%"struct.std::__1::__compressed_pair_elem.102" = type { float* }
%"struct.std::__1::__compressed_pair_elem.103" = type { %"class.hwy::AlignedFreer" }
%"class.hwy::AlignedFreer" = type { void (i8*, i8*)*, i8* }
%"class.std::__1::vector.104" = type { %"class.std::__1::__vector_base.105" }
%"class.std::__1::__vector_base.105" = type { %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"*, %"class.std::__1::__compressed_pair.126" }
%"class.jxl::QuantEncoding" = type { %"struct.jxl::QuantEncodingInternal.base", [7 x i8] }
%"struct.jxl::QuantEncodingInternal.base" = type <{ i32, [4 x i8], %"struct.jxl::DctQuantWeightParams", %union.anon.108, %"struct.jxl::DctQuantWeightParams", %union.anon.125 }>
%union.anon.108 = type { %"struct.std::__1::array.115", [4 x i8] }
%"struct.std::__1::array.115" = type { [3 x %"struct.std::__1::array.116"] }
%"struct.std::__1::array.116" = type { [9 x float] }
%"struct.jxl::DctQuantWeightParams" = type <{ i64, %"struct.std::__1::array.106", [4 x i8] }>
%"struct.std::__1::array.106" = type { [3 x %"struct.std::__1::array.107"] }
%"struct.std::__1::array.107" = type { [17 x float] }
%union.anon.125 = type { i8 }
%"class.std::__1::__compressed_pair.126" = type { %"struct.std::__1::__compressed_pair_elem.127" }
%"struct.std::__1::__compressed_pair_elem.127" = type { %"class.jxl::QuantEncoding"* }
%"class.jxl::Quantizer" = type { [4 x float], [4 x float], i32, i32, float, float, float, [3 x float], %"class.jxl::DequantMatrices"* }
%"class.jxl::Plane.131" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr" }
%"struct.jxl::ColorCorrelationMap" = type { %"class.jxl::Plane.132", %"class.jxl::Plane.132", [4 x float], i32, float, float, float, i32, i32 }
%"class.jxl::Plane.132" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::NoiseParams" = type { [8 x float] }
%"class.jxl::PatchDictionary" = type { %"struct.jxl::PassesSharedState"*, %"class.std::__1::vector.133", %"class.std::__1::vector.147", %"class.std::__1::vector.147" }
%"class.std::__1::vector.133" = type { %"class.std::__1::__vector_base.134" }
%"class.std::__1::__vector_base.134" = type { %"struct.jxl::PatchPosition"*, %"struct.jxl::PatchPosition"*, %"class.std::__1::__compressed_pair.142" }
%"struct.jxl::PatchPosition" = type { i64, i64, %"class.std::__1::vector.135", %"struct.jxl::PatchReferencePosition" }
%"class.std::__1::vector.135" = type { %"class.std::__1::__vector_base.136" }
%"class.std::__1::__vector_base.136" = type { %"struct.jxl::PatchBlending"*, %"struct.jxl::PatchBlending"*, %"class.std::__1::__compressed_pair.137" }
%"struct.jxl::PatchBlending" = type { i8, i32, i8 }
%"class.std::__1::__compressed_pair.137" = type { %"struct.std::__1::__compressed_pair_elem.138" }
%"struct.std::__1::__compressed_pair_elem.138" = type { %"struct.jxl::PatchBlending"* }
%"struct.jxl::PatchReferencePosition" = type { i64, i64, i64, i64, i64 }
%"class.std::__1::__compressed_pair.142" = type { %"struct.std::__1::__compressed_pair_elem.143" }
%"struct.std::__1::__compressed_pair_elem.143" = type { %"struct.jxl::PatchPosition"* }
%"class.std::__1::vector.147" = type { %"class.std::__1::__vector_base.148" }
%"class.std::__1::__vector_base.148" = type { i64*, i64*, %"class.std::__1::__compressed_pair.149" }
%"class.std::__1::__compressed_pair.149" = type { %"struct.std::__1::__compressed_pair_elem.150" }
%"struct.std::__1::__compressed_pair_elem.150" = type { i64* }
%"class.std::__1::vector.154" = type { %"class.std::__1::__vector_base.155" }
%"class.std::__1::__vector_base.155" = type { %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"*, %"class.std::__1::__compressed_pair.163" }
%"class.jxl::QuantizedSpline" = type { %"class.std::__1::vector.156", [3 x [32 x i32]], [32 x i32] }
%"class.std::__1::vector.156" = type { %"class.std::__1::__vector_base.157" }
%"class.std::__1::__vector_base.157" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.158" }
%"struct.std::__1::pair" = type { i64, i64 }
%"class.std::__1::__compressed_pair.158" = type { %"struct.std::__1::__compressed_pair_elem.159" }
%"struct.std::__1::__compressed_pair_elem.159" = type { %"struct.std::__1::pair"* }
%"class.std::__1::__compressed_pair.163" = type { %"struct.std::__1::__compressed_pair_elem.164" }
%"struct.std::__1::__compressed_pair_elem.164" = type { %"class.jxl::QuantizedSpline"* }
%"class.std::__1::vector.168" = type { %"class.std::__1::__vector_base.169" }
%"class.std::__1::__vector_base.169" = type { %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"*, %"class.std::__1::__compressed_pair.170" }
%"struct.jxl::Spline::Point" = type { float, float }
%"class.std::__1::__compressed_pair.170" = type { %"struct.std::__1::__compressed_pair_elem.171" }
%"struct.std::__1::__compressed_pair_elem.171" = type { %"struct.jxl::Spline::Point"* }
%"class.std::__1::vector.65" = type { %"class.std::__1::__vector_base.66" }
%"class.std::__1::__vector_base.66" = type { i32*, i32*, %"class.std::__1::__compressed_pair.67" }
%"class.std::__1::__compressed_pair.67" = type { %"struct.std::__1::__compressed_pair_elem.68" }
%"struct.std::__1::__compressed_pair_elem.68" = type { i32* }
%"class.jxl::Plane.99" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::BlockCtxMap" = type { [3 x %"class.std::__1::vector.118"], %"class.std::__1::vector.65", %"class.std::__1::vector.14", i64, i64 }
%"class.std::__1::vector.118" = type { %"class.std::__1::__vector_base.119" }
%"class.std::__1::__vector_base.119" = type { i32*, i32*, %"class.std::__1::__compressed_pair.120" }
%"class.std::__1::__compressed_pair.120" = type { %"struct.std::__1::__compressed_pair_elem.121" }
%"struct.std::__1::__compressed_pair_elem.121" = type { i32* }
%"class.std::__1::vector.14" = type { %"class.std::__1::__vector_base.15" }
%"class.std::__1::__vector_base.15" = type { i8*, i8*, %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::unique_ptr.9" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.jxl::jpeg::JPEGData"* }
%"struct.jxl::jpeg::JPEGData" = type { %"class.jxl::Fields", i32, i32, i32, %"class.std::__1::vector.12", %"class.std::__1::vector.25", %"class.std::__1::vector.12", %"class.std::__1::vector.32", %"class.std::__1::vector.39", %"class.std::__1::vector.48", %"class.std::__1::vector.62", %"class.std::__1::vector.14", %"class.std::__1::vector.12", %"class.std::__1::vector.14", i32, i8, %"class.std::__1::vector.14" }
%"class.std::__1::vector.25" = type { %"class.std::__1::__vector_base.26" }
%"class.std::__1::__vector_base.26" = type { i32*, i32*, %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { i32* }
%"class.std::__1::vector.32" = type { %"class.std::__1::__vector_base.33" }
%"class.std::__1::__vector_base.33" = type { %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"*, %"class.std::__1::__compressed_pair.34" }
%"struct.jxl::jpeg::JPEGQuantTable" = type <{ %"struct.std::__1::array", i32, i32, i8, [3 x i8] }>
%"struct.std::__1::array" = type { [64 x i32] }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"struct.jxl::jpeg::JPEGQuantTable"* }
%"class.std::__1::vector.39" = type { %"class.std::__1::__vector_base.40" }
%"class.std::__1::__vector_base.40" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"class.std::__1::__compressed_pair.43" }
%"struct.jxl::jpeg::JPEGHuffmanCode" = type <{ %"struct.std::__1::array.41", %"struct.std::__1::array.42", i32, i8, [3 x i8] }>
%"struct.std::__1::array.41" = type { [17 x i32] }
%"struct.std::__1::array.42" = type { [257 x i32] }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.std::__1::__compressed_pair_elem.44" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"* }
%"class.std::__1::vector.48" = type { %"class.std::__1::__vector_base.49" }
%"class.std::__1::__vector_base.49" = type { %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"*, %"class.std::__1::__compressed_pair.57" }
%"struct.jxl::jpeg::JPEGComponent" = type { i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.50" }
%"class.std::__1::vector.50" = type { %"class.std::__1::__vector_base.51" }
%"class.std::__1::__vector_base.51" = type { i16*, i16*, %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"struct.std::__1::__compressed_pair_elem.53" = type { i16* }
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"struct.std::__1::__compressed_pair_elem.58" = type { %"struct.jxl::jpeg::JPEGComponent"* }
%"class.std::__1::vector.62" = type { %"class.std::__1::__vector_base.63" }
%"class.std::__1::__vector_base.63" = type { %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"*, %"class.std::__1::__compressed_pair.79" }
%"struct.jxl::jpeg::JPEGScanInfo" = type { i32, i32, i32, i32, i32, %"struct.std::__1::array.64", i32, %"class.std::__1::vector.65", %"class.std::__1::vector.72" }
%"struct.std::__1::array.64" = type { [4 x %"struct.jxl::jpeg::JPEGComponentScanInfo"] }
%"struct.jxl::jpeg::JPEGComponentScanInfo" = type { i32, i32, i32 }
%"class.std::__1::vector.72" = type { %"class.std::__1::__vector_base.73" }
%"class.std::__1::__vector_base.73" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"class.std::__1::__compressed_pair.74" }
%"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo" = type { i32, i32 }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* }
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"struct.std::__1::__compressed_pair_elem.80" = type { %"struct.jxl::jpeg::JPEGScanInfo"* }
%"class.jxl::ImageBundle" = type { %"class.std::__1::unique_ptr.9", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", %"struct.jxl::ColorEncoding", %"class.std::__1::vector.85", i64 }
%"struct.jxl::PassesSharedState" = type { %"struct.jxl::CodecMetadata"*, %"struct.jxl::FrameHeader", %"struct.jxl::FrameDimensions", %"class.jxl::AcStrategyImage", %"class.jxl::DequantMatrices", %"class.jxl::Quantizer", %"class.jxl::Plane.131", %"class.jxl::Plane.99", %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ImageFeatures", i64, %"class.std::__1::vector.65", %"class.jxl::Plane.99", %"class.jxl::Image3", %"class.jxl::Image3"*, %"struct.jxl::BlockCtxMap", [4 x %"class.jxl::Image3"], [4 x %struct.anon.175], i64 }
%"struct.jxl::FrameHeader" = type { %"class.jxl::Fields", i8, i32, i32, i64, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i32, i32, i32, %"class.std::__1::basic_string", %"struct.jxl::Passes", i8, %"struct.jxl::FrameSize", i32, %"class.std::__1::vector.65", %"struct.jxl::FrameOrigin", %"struct.jxl::BlendingInfo", %"class.std::__1::vector.92", %"struct.jxl::AnimationFrame", i8, i32, i8, i32, %"struct.jxl::CodecMetadata"*, %"struct.jxl::LoopFilter", i8, i64 }
%"struct.jxl::ImageFeatures" = type { %"struct.jxl::NoiseParams", %"class.jxl::PatchDictionary", %"class.jxl::Splines" }
%"class.jxl::Splines" = type { i32, %"class.std::__1::vector.154", %"class.std::__1::vector.168" }
%struct.anon.175 = type <{ %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"*, i8, [7 x i8] }>
%"struct.jxl::Upsampler" = type { i64, [4 x [4 x [5 x [5 x float]]]] }
%"class.std::__1::vector.177" = type { %"class.std::__1::__vector_base.178" }
%"class.std::__1::__vector_base.178" = type { %"struct.jxl::ANSCode"*, %"struct.jxl::ANSCode"*, %"class.std::__1::__compressed_pair.200" }
%"struct.jxl::ANSCode" = type { %"class.std::__1::unique_ptr", %"class.std::__1::vector.179", %"class.std::__1::vector.193", %"class.std::__1::vector.118", i8, i8, %"struct.jxl::LZ77Params", i64 }
%"class.std::__1::vector.179" = type { %"class.std::__1::__vector_base.180" }
%"class.std::__1::__vector_base.180" = type { %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"*, %"class.std::__1::__compressed_pair.188" }
%"struct.jxl::HuffmanDecodingData" = type { %"class.std::__1::vector.181" }
%"class.std::__1::vector.181" = type { %"class.std::__1::__vector_base.182" }
%"class.std::__1::__vector_base.182" = type { %"struct.jxl::HuffmanCode"*, %"struct.jxl::HuffmanCode"*, %"class.std::__1::__compressed_pair.183" }
%"struct.jxl::HuffmanCode" = type { i8, i16 }
%"class.std::__1::__compressed_pair.183" = type { %"struct.std::__1::__compressed_pair_elem.184" }
%"struct.std::__1::__compressed_pair_elem.184" = type { %"struct.jxl::HuffmanCode"* }
%"class.std::__1::__compressed_pair.188" = type { %"struct.std::__1::__compressed_pair_elem.189" }
%"struct.std::__1::__compressed_pair_elem.189" = type { %"struct.jxl::HuffmanDecodingData"* }
%"class.std::__1::vector.193" = type { %"class.std::__1::__vector_base.194" }
%"class.std::__1::__vector_base.194" = type { %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"*, %"class.std::__1::__compressed_pair.195" }
%"struct.jxl::HybridUintConfig" = type { i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.195" = type { %"struct.std::__1::__compressed_pair_elem.196" }
%"struct.std::__1::__compressed_pair_elem.196" = type { %"struct.jxl::HybridUintConfig"* }
%"struct.jxl::LZ77Params" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::HybridUintConfig", i64 }
%"class.std::__1::__compressed_pair.200" = type { %"struct.std::__1::__compressed_pair_elem.201" }
%"struct.std::__1::__compressed_pair_elem.201" = type { %"struct.jxl::ANSCode"* }
%"class.std::__1::vector.12" = type { %"class.std::__1::__vector_base.13" }
%"class.std::__1::__vector_base.13" = type { %"class.std::__1::vector.14"*, %"class.std::__1::vector.14"*, %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"class.std::__1::vector.14"* }
%"class.jxl::Image3" = type { [3 x %"class.jxl::Plane"] }
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { void (%"union.std::__1::__function::__policy_storage"*, float*, i64, i64, i64)* }
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"class.std::__1::vector.205" = type { %"class.std::__1::__vector_base.206" }
%"class.std::__1::__vector_base.206" = type { float*, float*, %"class.std::__1::__compressed_pair.207" }
%"class.std::__1::__compressed_pair.207" = type { %"struct.std::__1::__compressed_pair_elem.102" }
%"class.std::__1::vector.211" = type { %"class.std::__1::__vector_base.212" }
%"class.std::__1::__vector_base.212" = type { %"class.std::__1::vector.205"*, %"class.std::__1::vector.205"*, %"class.std::__1::__compressed_pair.213" }
%"class.std::__1::__compressed_pair.213" = type { %"struct.std::__1::__compressed_pair_elem.214" }
%"struct.std::__1::__compressed_pair_elem.214" = type { %"class.std::__1::vector.205"* }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.218" }
%"struct.std::__1::__atomic_base.218" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::unique_ptr.219" = type { %"class.std::__1::__compressed_pair.220" }
%"class.std::__1::__compressed_pair.220" = type { %"struct.std::__1::__compressed_pair_elem.221" }
%"struct.std::__1::__compressed_pair_elem.221" = type { %"class.jxl::ACImage"* }
%"class.jxl::ACImage" = type { i32 (...)** }
%"class.std::__1::vector.225" = type { %"class.std::__1::__vector_base.226" }
%"class.std::__1::__vector_base.226" = type { %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"*, %"class.std::__1::__compressed_pair.227" }
%"class.jxl::FilterPipeline" = type { %"class.jxl::Image3", i64, [4 x %"struct.jxl::FilterPipeline::FilterStep"], i64, i8, i64 }
%"struct.jxl::FilterPipeline::FilterStep" = type { %"class.jxl::Image3"*, i64, %"class.jxl::Image3"*, i64, %"class.jxl::Rect", %"class.jxl::Rect", %"class.jxl::Rect", i64, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)*, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)*, %"struct.jxl::FilterDefinition", i64 }
%"class.jxl::Rect" = type { i64, i64, i64, i64 }
%"struct.jxl::FilterRows" = type <{ [3 x float*], [7 x i64], [3 x float*], float*, i32, [4 x i8] }>
%"struct.jxl::FilterDefinition" = type { void (%"struct.jxl::FilterRows"*, %"struct.jxl::LoopFilter"*, %"struct.jxl::FilterWeights"*, i64, i64, i64, i64)*, i64 }
%"struct.jxl::FilterWeights" = type { [9 x float], %"class.jxl::Plane" }
%"class.std::__1::__compressed_pair.227" = type { %"struct.std::__1::__compressed_pair_elem.228" }
%"struct.std::__1::__compressed_pair_elem.228" = type { %"class.jxl::FilterPipeline"* }
%"class.jxl::GroupBorderAssigner" = type { %"struct.jxl::FrameDimensions", %"class.std::__1::unique_ptr.232" }
%"class.std::__1::unique_ptr.232" = type { %"class.std::__1::__compressed_pair.233" }
%"class.std::__1::__compressed_pair.233" = type { %"struct.std::__1::__compressed_pair_elem.234" }
%"struct.std::__1::__compressed_pair_elem.234" = type { %"struct.std::__1::atomic.235"* }
%"struct.std::__1::atomic.235" = type { %"struct.std::__1::__atomic_base.260" }
%"struct.std::__1::__atomic_base.260" = type { %"struct.std::__1::__atomic_base.261" }
%"struct.std::__1::__atomic_base.261" = type { %"struct.std::__1::__cxx_atomic_impl.262" }
%"struct.std::__1::__cxx_atomic_impl.262" = type { %"struct.std::__1::__cxx_atomic_base_impl.263" }
%"struct.std::__1::__cxx_atomic_base_impl.263" = type { i8 }
%"class.std::__1::vector.85" = type { %"class.std::__1::__vector_base.86" }
%"class.std::__1::__vector_base.86" = type { %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %"class.jxl::Plane"* }
%"class.std::__1::vector.239" = type { %"class.std::__1::__vector_base.240" }
%"class.std::__1::__vector_base.240" = type { %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.std::__1::__compressed_pair.241" }
%"class.std::__1::__compressed_pair.241" = type { %"struct.std::__1::__compressed_pair_elem.242" }
%"struct.std::__1::__compressed_pair_elem.242" = type { %"class.jxl::Image3"* }
%"struct.jxl::OpsinParams" = type { [36 x float], [4 x float], [4 x float], [4 x float] }
%"struct.jxl::DecompressParams" = type <{ i8, i8, i8, i8, i32, i32, [4 x i8], i64, i8, i8, [6 x i8] }>
%"class.jxl::BitReader" = type { i64, i64, i8*, i8*, i8*, i64, i8, i64 }
%"class.jxl::ThreadPool" = type { i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i8* }
%"struct.jxl::SizeConstraints" = type { i32, i32, i64 }
%"struct.jxl::PassesDecoderState" = type { %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"*, [3 x %"struct.jxl::Upsampler"], %"class.jxl::Image3", %"class.jxl::Image3", %"class.std::__1::vector.85", %"class.std::__1::vector.177", %"class.std::__1::vector.12", float, float, %"class.jxl::Image3", %"class.std::__1::vector.85", %"class.jxl::Image3", %"class.jxl::Image3", i8*, i64, i8, i8, %"class.std::__1::function", %"class.std::__1::vector.205", %"class.std::__1::vector.211", i64, %"struct.std::__1::atomic", %"class.std::__1::unique_ptr.219", %"class.std::__1::vector.225", %"struct.jxl::FilterWeights", %"class.jxl::GroupBorderAssigner", %"class.std::__1::vector.239", %"class.std::__1::vector.239", %"class.std::__1::vector.239", [4 x %"class.std::__1::vector.239"], %"class.std::__1::vector.85", %"class.std::__1::vector.239", %"struct.jxl::OutputEncodingInfo" }
%"struct.jxl::OutputEncodingInfo" = type <{ %"struct.jxl::ColorEncoding", float, %"struct.jxl::OpsinParams", i8, i8, [2 x i8] }>
%"class.jxl::ACImageT" = type { %"class.jxl::ACImage", %"class.jxl::Image3.267" }
%"class.jxl::Image3.267" = type { [3 x %"class.jxl::Plane.131"] }
%"class.std::__1::allocator.203" = type { i8 }
%"class.jxl::CodecInOut" = type { %"struct.jxl::SizeConstraints", %"class.jxl::DecoderHints", i32, float, i64, %"struct.jxl::Blobs", %"struct.jxl::CodecMetadata", %"class.jxl::ImageBundle", %"class.std::__1::vector.253", i8, i64 }
%"class.jxl::DecoderHints" = type { %"class.std::__1::vector.246" }
%"class.std::__1::vector.246" = type { %"class.std::__1::__vector_base.247" }
%"class.std::__1::__vector_base.247" = type { %"struct.jxl::DecoderHints::KeyValue"*, %"struct.jxl::DecoderHints::KeyValue"*, %"class.std::__1::__compressed_pair.248" }
%"struct.jxl::DecoderHints::KeyValue" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.248" = type { %"struct.std::__1::__compressed_pair_elem.249" }
%"struct.std::__1::__compressed_pair_elem.249" = type { %"struct.jxl::DecoderHints::KeyValue"* }
%"struct.jxl::Blobs" = type { %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes" }
%"class.std::__1::vector.253" = type { %"class.std::__1::__vector_base.254" }
%"class.std::__1::__vector_base.254" = type { %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"*, %"class.std::__1::__compressed_pair.255" }
%"class.std::__1::__compressed_pair.255" = type { %"struct.std::__1::__compressed_pair_elem.256" }
%"struct.std::__1::__compressed_pair_elem.256" = type { %"class.jxl::ImageBundle"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.jxl::Visitor" = type { i32 (...)** }

$_ZN3jxl18PassesDecoderStateD2Ev = comdat any

$_ZNK3jxl10CodecInOut13CheckMetadataEv = comdat any

$_ZN3jxl9BitReader19BoundsCheckedRefillEv = comdat any

$_ZN3jxl17PassesSharedStateC2Ev = comdat any

$_ZN3jxl15DequantMatricesC2Ev = comdat any

$_ZN3jxl13QuantEncodingaSERKS0_ = comdat any

$_ZNSt3__16vectorIN3jxl13QuantEncodingENS_9allocatorIS2_EEE8__appendEmRKS2_ = comdat any

$_ZNSt3__110__function16__policy_invokerIFvPKfmmmEE12__call_emptyEPKNS0_16__policy_storageES3_mmm = comdat any

$_ZNSt3__125__throw_bad_function_callEv = comdat any

$_ZN3jxl8ACImageTIiEC2Emm = comdat any

$_ZN3jxl8ACImageTIiED2Ev = comdat any

$_ZN3jxl8ACImageTIiED0Ev = comdat any

$_ZNK3jxl8ACImageTIiE4TypeEv = comdat any

$_ZN3jxl8ACImageTIiE8PlaneRowEmmm = comdat any

$_ZNK3jxl8ACImageTIiE8PlaneRowEmmm = comdat any

$_ZNK3jxl8ACImageTIiE12PixelsPerRowEv = comdat any

$_ZN3jxl8ACImageTIiE8ZeroFillEv = comdat any

$_ZN3jxl8ACImageTIiE13ZeroFillPlaneEm = comdat any

$_ZNK3jxl8ACImageTIiE7IsEmptyEv = comdat any

$_ZN3jxl17PassesSharedStateD2Ev = comdat any

$_ZN3jxl6FieldsD2Ev = comdat any

$_ZNSt3__19allocatorIN3jxl7ANSCodeEE7destroyEPS2_ = comdat any

$_ZN3jxl11ImageBundleD2Ev = comdat any

$_ZNSt3__16vectorIN3jxl11ImageBundleENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJPNS1_13ImageMetadataEEEEvDpOT_ = comdat any

$_ZN3jxl11ImageBundleC2EOS0_ = comdat any

$_ZN3jxl22YCbCrChromaSubsamplingD0Ev = comdat any

$_ZNK3jxl22YCbCrChromaSubsampling4NameEv = comdat any

$_ZN3jxl22YCbCrChromaSubsampling11VisitFieldsEPNS_7VisitorE = comdat any

$_ZZNSt3__110__function8__policy14__create_emptyEvE9__policy_ = comdat any

$_ZTVN3jxl8ACImageTIiEE = comdat any

$_ZTVN3jxl22YCbCrChromaSubsamplingE = comdat any

@__const._ZN3jxl10DecodeFileERKNS_16DecompressParamsENS_4SpanIKhEEPNS_10CodecInOutEPNS_10ThreadPoolE.dec_state = private unnamed_addr constant { { %"struct.jxl::CodecMetadata"*, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], i64, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i32, i32, i32, [4 x i8], %"class.std::__1::basic_string", %"struct.jxl::Passes", i8, [3 x i8], %"struct.jxl::FrameSize", i32, %"class.std::__1::vector.65", %"struct.jxl::FrameOrigin", %"struct.jxl::BlendingInfo", %"class.std::__1::vector.92", %"struct.jxl::AnimationFrame", i8, [3 x i8], i32, i8, [3 x i8], i32, %"struct.jxl::CodecMetadata"*, %"struct.jxl::LoopFilter", i8, [7 x i8], i64 }, %"struct.jxl::FrameDimensions", %"class.jxl::AcStrategyImage", %"class.jxl::DequantMatrices", %"class.jxl::Quantizer", %"class.jxl::Plane.131", %"class.jxl::Plane.99", %"struct.jxl::ColorCorrelationMap", { %"struct.jxl::NoiseParams", %"class.jxl::PatchDictionary", { i32, [4 x i8], %"class.std::__1::vector.154", %"class.std::__1::vector.168" } }, i64, %"class.std::__1::vector.65", %"class.jxl::Plane.99", %"class.jxl::Image3", %"class.jxl::Image3"*, %"struct.jxl::BlockCtxMap", [4 x %"class.jxl::Image3"], [4 x <{ { %"class.std::__1::unique_ptr.9", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, [2 x i8], %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, %"class.std::__1::vector.85", i64 }, %"class.jxl::ImageBundle"*, i8, [7 x i8] }>], i64 }, %"struct.jxl::PassesSharedState"*, [3 x %"struct.jxl::Upsampler"], %"class.jxl::Image3", %"class.jxl::Image3", %"class.std::__1::vector.85", %"class.std::__1::vector.177", %"class.std::__1::vector.12", float, float, %"class.jxl::Image3", %"class.std::__1::vector.85", %"class.jxl::Image3", %"class.jxl::Image3", i8*, i64, i8, i8, [6 x i8], %"class.std::__1::function", %"class.std::__1::vector.205", %"class.std::__1::vector.211", i64, %"struct.std::__1::atomic", [4 x i8], %"class.std::__1::unique_ptr.219", %"class.std::__1::vector.225", { [9 x float], [4 x i8], %"class.jxl::Plane" }, %"class.jxl::GroupBorderAssigner", %"class.std::__1::vector.239", %"class.std::__1::vector.239", %"class.std::__1::vector.239", [4 x %"class.std::__1::vector.239"], %"class.std::__1::vector.85", %"class.std::__1::vector.239", <{ { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, float, %"struct.jxl::OpsinParams", i8, i8, [2 x i8] }> } { { %"struct.jxl::CodecMetadata"*, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], i64, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i32, i32, i32, [4 x i8], %"class.std::__1::basic_string", %"struct.jxl::Passes", i8, [3 x i8], %"struct.jxl::FrameSize", i32, %"class.std::__1::vector.65", %"struct.jxl::FrameOrigin", %"struct.jxl::BlendingInfo", %"class.std::__1::vector.92", %"struct.jxl::AnimationFrame", i8, [3 x i8], i32, i8, [3 x i8], i32, %"struct.jxl::CodecMetadata"*, %"struct.jxl::LoopFilter", i8, [7 x i8], i64 }, %"struct.jxl::FrameDimensions", %"class.jxl::AcStrategyImage", %"class.jxl::DequantMatrices", %"class.jxl::Quantizer", %"class.jxl::Plane.131", %"class.jxl::Plane.99", %"struct.jxl::ColorCorrelationMap", { %"struct.jxl::NoiseParams", %"class.jxl::PatchDictionary", { i32, [4 x i8], %"class.std::__1::vector.154", %"class.std::__1::vector.168" } }, i64, %"class.std::__1::vector.65", %"class.jxl::Plane.99", %"class.jxl::Image3", %"class.jxl::Image3"*, %"struct.jxl::BlockCtxMap", [4 x %"class.jxl::Image3"], [4 x <{ { %"class.std::__1::unique_ptr.9", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, [2 x i8], %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, %"class.std::__1::vector.85", i64 }, %"class.jxl::ImageBundle"*, i8, [7 x i8] }>], i64 } { %"struct.jxl::CodecMetadata"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::CodecMetadata"*), { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], i64, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i32, i32, i32, [4 x i8], %"class.std::__1::basic_string", %"struct.jxl::Passes", i8, [3 x i8], %"struct.jxl::FrameSize", i32, %"class.std::__1::vector.65", %"struct.jxl::FrameOrigin", %"struct.jxl::BlendingInfo", %"class.std::__1::vector.92", %"struct.jxl::AnimationFrame", i8, [3 x i8], i32, i8, [3 x i8], i32, %"struct.jxl::CodecMetadata"*, %"struct.jxl::LoopFilter", i8, [7 x i8], i64 } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i64 -6148914691236517206, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"struct.jxl::YCbCrChromaSubsampling" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, [3 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766], i8 -86, i8 -86, [2 x i8] c"\AA\AA" }>, i32 -1431655766, i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"class.std::__1::basic_string" { %"class.std::__1::__compressed_pair.1" { %"struct.std::__1::__compressed_pair_elem.2" { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" { %union.anon { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" { i8* inttoptr (i64 -6148914691236517206 to i8*), i64 -6148914691236517206, i64 -6148914691236517206 } } } } } }, %"struct.jxl::Passes" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766, [11 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], [11 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], [11 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], [4 x i8] c"\AA\AA\AA\AA" }>, i8 -86, [3 x i8] c"\AA\AA\AA", %"struct.jxl::FrameSize" { i32 -1431655766, i32 -1431655766 }, i32 -1431655766, %"class.std::__1::vector.65" { %"class.std::__1::__vector_base.66" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.67" { %"struct.std::__1::__compressed_pair_elem.68" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, %"struct.jxl::FrameOrigin" { i32 -1431655766, i32 -1431655766 }, %"struct.jxl::BlendingInfo" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i64 -6148914691236517206, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" }>, %"class.std::__1::vector.92" { %"class.std::__1::__vector_base.93" { %"struct.jxl::BlendingInfo"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::BlendingInfo"*), %"struct.jxl::BlendingInfo"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::BlendingInfo"*), %"class.std::__1::__compressed_pair.94" { %"struct.std::__1::__compressed_pair_elem.95" { %"struct.jxl::BlendingInfo"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::BlendingInfo"*) } } } }, %"struct.jxl::AnimationFrame" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766, %"struct.jxl::CodecMetadata"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::CodecMetadata"*) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, %"struct.jxl::CodecMetadata"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::CodecMetadata"*), %"struct.jxl::LoopFilter" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, i8 -86, i8 -86, i8 -86, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", [8 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], i8 -86, [3 x i8] c"\AA\AA\AA", [3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i8 -86, [3 x i8] c"\AA\AA\AA", float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA", i64 -6148914691236517206, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" }>, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", i64 -6148914691236517206 }, %"struct.jxl::FrameDimensions" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206 }, %"class.jxl::AcStrategyImage" { %"class.jxl::Plane.99" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, i8* inttoptr (i64 -6148914691236517206 to i8*), i64 -6148914691236517206 }, %"class.jxl::DequantMatrices" { %"class.std::__1::unique_ptr.100" { %"class.std::__1::__compressed_pair.101" { %"struct.std::__1::__compressed_pair_elem.102" { float* inttoptr (i64 -6148914691236517206 to float*) }, %"struct.std::__1::__compressed_pair_elem.103" { %"class.hwy::AlignedFreer" { void (i8*, i8*)* inttoptr (i64 -6148914691236517206 to void (i8*, i8*)*), i8* inttoptr (i64 -6148914691236517206 to i8*) } } } }, float* inttoptr (i64 -6148914691236517206 to float*), float* inttoptr (i64 -6148914691236517206 to float*), [3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [81 x i64] [i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206], %"class.std::__1::vector.104" { %"class.std::__1::__vector_base.105" { %"class.jxl::QuantEncoding"* inttoptr (i64 -6148914691236517206 to %"class.jxl::QuantEncoding"*), %"class.jxl::QuantEncoding"* inttoptr (i64 -6148914691236517206 to %"class.jxl::QuantEncoding"*), %"class.std::__1::__compressed_pair.126" { %"struct.std::__1::__compressed_pair_elem.127" { %"class.jxl::QuantEncoding"* inttoptr (i64 -6148914691236517206 to %"class.jxl::QuantEncoding"*) } } } } }, %"class.jxl::Quantizer" { [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], i32 -1431655766, i32 -1431655766, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, [3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], %"class.jxl::DequantMatrices"* inttoptr (i64 -6148914691236517206 to %"class.jxl::DequantMatrices"*) }, %"class.jxl::Plane.131" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane.99" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"struct.jxl::ColorCorrelationMap" { %"class.jxl::Plane.132" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane.132" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], i32 -1431655766, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i32 -1431655766, i32 -1431655766 }, { %"struct.jxl::NoiseParams", %"class.jxl::PatchDictionary", { i32, [4 x i8], %"class.std::__1::vector.154", %"class.std::__1::vector.168" } } { %"struct.jxl::NoiseParams" { [8 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000] }, %"class.jxl::PatchDictionary" { %"struct.jxl::PassesSharedState"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::PassesSharedState"*), %"class.std::__1::vector.133" { %"class.std::__1::__vector_base.134" { %"struct.jxl::PatchPosition"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::PatchPosition"*), %"struct.jxl::PatchPosition"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::PatchPosition"*), %"class.std::__1::__compressed_pair.142" { %"struct.std::__1::__compressed_pair_elem.143" { %"struct.jxl::PatchPosition"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::PatchPosition"*) } } } }, %"class.std::__1::vector.147" { %"class.std::__1::__vector_base.148" { i64* inttoptr (i64 -6148914691236517206 to i64*), i64* inttoptr (i64 -6148914691236517206 to i64*), %"class.std::__1::__compressed_pair.149" { %"struct.std::__1::__compressed_pair_elem.150" { i64* inttoptr (i64 -6148914691236517206 to i64*) } } } }, %"class.std::__1::vector.147" { %"class.std::__1::__vector_base.148" { i64* inttoptr (i64 -6148914691236517206 to i64*), i64* inttoptr (i64 -6148914691236517206 to i64*), %"class.std::__1::__compressed_pair.149" { %"struct.std::__1::__compressed_pair_elem.150" { i64* inttoptr (i64 -6148914691236517206 to i64*) } } } } }, { i32, [4 x i8], %"class.std::__1::vector.154", %"class.std::__1::vector.168" } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"class.std::__1::vector.154" { %"class.std::__1::__vector_base.155" { %"class.jxl::QuantizedSpline"* inttoptr (i64 -6148914691236517206 to %"class.jxl::QuantizedSpline"*), %"class.jxl::QuantizedSpline"* inttoptr (i64 -6148914691236517206 to %"class.jxl::QuantizedSpline"*), %"class.std::__1::__compressed_pair.163" { %"struct.std::__1::__compressed_pair_elem.164" { %"class.jxl::QuantizedSpline"* inttoptr (i64 -6148914691236517206 to %"class.jxl::QuantizedSpline"*) } } } }, %"class.std::__1::vector.168" { %"class.std::__1::__vector_base.169" { %"struct.jxl::Spline::Point"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::Spline::Point"*), %"struct.jxl::Spline::Point"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::Spline::Point"*), %"class.std::__1::__compressed_pair.170" { %"struct.std::__1::__compressed_pair_elem.171" { %"struct.jxl::Spline::Point"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::Spline::Point"*) } } } } } }, i64 -6148914691236517206, %"class.std::__1::vector.65" { %"class.std::__1::__vector_base.66" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.67" { %"struct.std::__1::__compressed_pair_elem.68" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, %"class.jxl::Plane.99" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Image3" { [3 x %"class.jxl::Plane"] [%"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }] }, %"class.jxl::Image3"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Image3"*), %"struct.jxl::BlockCtxMap" { [3 x %"class.std::__1::vector.118"] [%"class.std::__1::vector.118" { %"class.std::__1::__vector_base.119" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.120" { %"struct.std::__1::__compressed_pair_elem.121" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, %"class.std::__1::vector.118" { %"class.std::__1::__vector_base.119" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.120" { %"struct.std::__1::__compressed_pair_elem.121" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, %"class.std::__1::vector.118" { %"class.std::__1::__vector_base.119" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.120" { %"struct.std::__1::__compressed_pair_elem.121" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }], %"class.std::__1::vector.65" { %"class.std::__1::__vector_base.66" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.67" { %"struct.std::__1::__compressed_pair_elem.68" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, %"class.std::__1::vector.14" { %"class.std::__1::__vector_base.15" { i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*), %"class.std::__1::__compressed_pair.16" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } }, i64 -6148914691236517206, i64 -6148914691236517206 }, [4 x %"class.jxl::Image3"] [%"class.jxl::Image3" { [3 x %"class.jxl::Plane"] [%"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }] }, %"class.jxl::Image3" { [3 x %"class.jxl::Plane"] [%"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }] }, %"class.jxl::Image3" { [3 x %"class.jxl::Plane"] [%"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }] }, %"class.jxl::Image3" { [3 x %"class.jxl::Plane"] [%"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }] }], [4 x <{ { %"class.std::__1::unique_ptr.9", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, [2 x i8], %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, %"class.std::__1::vector.85", i64 }, %"class.jxl::ImageBundle"*, i8, [7 x i8] }>] [<{ { %"class.std::__1::unique_ptr.9", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, [2 x i8], %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, %"class.std::__1::vector.85", i64 }, %"class.jxl::ImageBundle"*, i8, [7 x i8] }> <{ { %"class.std::__1::unique_ptr.9", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, [2 x i8], %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, %"class.std::__1::vector.85", i64 } { %"class.std::__1::unique_ptr.9" { %"class.std::__1::__compressed_pair.10" { %"struct.std::__1::__compressed_pair_elem.11" { %"struct.jxl::jpeg::JPEGData"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::jpeg::JPEGData"*) } } }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"struct.jxl::YCbCrChromaSubsampling" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, [3 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766], i8 -86, i8 -86, [2 x i8] c"\AA\AA" }>, %"struct.jxl::FrameOrigin" { i32 -1431655766, i32 -1431655766 }, i32 -1431655766, i8 -86, i8 -86, [2 x i8] c"\AA\AA", %"class.std::__1::basic_string" { %"class.std::__1::__compressed_pair.1" { %"struct.std::__1::__compressed_pair_elem.2" { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" { %union.anon { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" { i8* inttoptr (i64 -6148914691236517206 to i8*), i64 -6148914691236517206, i64 -6148914691236517206 } } } } } }, %"struct.jxl::ImageMetadata"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::ImageMetadata"*), %"class.jxl::Image3" { [3 x %"class.jxl::Plane"] [%"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }] }, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766 }, i32 -1431655766, i8 -86, i8 -86, [2 x i8] c"\AA\AA", %"class.jxl::PaddedBytes" { i64 -6148914691236517206, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 } }, %"class.std::__1::vector.85" { %"class.std::__1::__vector_base.86" { %"class.jxl::Plane"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane"*), %"class.jxl::Plane"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane"*), %"class.std::__1::__compressed_pair.87" { %"struct.std::__1::__compressed_pair_elem.88" { %"class.jxl::Plane"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane"*) } } } }, i64 -6148914691236517206 }, %"class.jxl::ImageBundle"* inttoptr (i64 -6148914691236517206 to %"class.jxl::ImageBundle"*), i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" }>, <{ { %"class.std::__1::unique_ptr.9", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, [2 x i8], %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, %"class.std::__1::vector.85", i64 }, %"class.jxl::ImageBundle"*, i8, [7 x i8] }> <{ { %"class.std::__1::unique_ptr.9", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, [2 x i8], %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, %"class.std::__1::vector.85", i64 } { %"class.std::__1::unique_ptr.9" { %"class.std::__1::__compressed_pair.10" { %"struct.std::__1::__compressed_pair_elem.11" { %"struct.jxl::jpeg::JPEGData"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::jpeg::JPEGData"*) } } }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"struct.jxl::YCbCrChromaSubsampling" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, [3 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766], i8 -86, i8 -86, [2 x i8] c"\AA\AA" }>, %"struct.jxl::FrameOrigin" { i32 -1431655766, i32 -1431655766 }, i32 -1431655766, i8 -86, i8 -86, [2 x i8] c"\AA\AA", %"class.std::__1::basic_string" { %"class.std::__1::__compressed_pair.1" { %"struct.std::__1::__compressed_pair_elem.2" { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" { %union.anon { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" { i8* inttoptr (i64 -6148914691236517206 to i8*), i64 -6148914691236517206, i64 -6148914691236517206 } } } } } }, %"struct.jxl::ImageMetadata"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::ImageMetadata"*), %"class.jxl::Image3" { [3 x %"class.jxl::Plane"] [%"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }] }, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766 }, i32 -1431655766, i8 -86, i8 -86, [2 x i8] c"\AA\AA", %"class.jxl::PaddedBytes" { i64 -6148914691236517206, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 } }, %"class.std::__1::vector.85" { %"class.std::__1::__vector_base.86" { %"class.jxl::Plane"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane"*), %"class.jxl::Plane"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane"*), %"class.std::__1::__compressed_pair.87" { %"struct.std::__1::__compressed_pair_elem.88" { %"class.jxl::Plane"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane"*) } } } }, i64 -6148914691236517206 }, %"class.jxl::ImageBundle"* inttoptr (i64 -6148914691236517206 to %"class.jxl::ImageBundle"*), i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" }>, <{ { %"class.std::__1::unique_ptr.9", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, [2 x i8], %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, %"class.std::__1::vector.85", i64 }, %"class.jxl::ImageBundle"*, i8, [7 x i8] }> <{ { %"class.std::__1::unique_ptr.9", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, [2 x i8], %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, %"class.std::__1::vector.85", i64 } { %"class.std::__1::unique_ptr.9" { %"class.std::__1::__compressed_pair.10" { %"struct.std::__1::__compressed_pair_elem.11" { %"struct.jxl::jpeg::JPEGData"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::jpeg::JPEGData"*) } } }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"struct.jxl::YCbCrChromaSubsampling" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, [3 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766], i8 -86, i8 -86, [2 x i8] c"\AA\AA" }>, %"struct.jxl::FrameOrigin" { i32 -1431655766, i32 -1431655766 }, i32 -1431655766, i8 -86, i8 -86, [2 x i8] c"\AA\AA", %"class.std::__1::basic_string" { %"class.std::__1::__compressed_pair.1" { %"struct.std::__1::__compressed_pair_elem.2" { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" { %union.anon { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" { i8* inttoptr (i64 -6148914691236517206 to i8*), i64 -6148914691236517206, i64 -6148914691236517206 } } } } } }, %"struct.jxl::ImageMetadata"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::ImageMetadata"*), %"class.jxl::Image3" { [3 x %"class.jxl::Plane"] [%"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }] }, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766 }, i32 -1431655766, i8 -86, i8 -86, [2 x i8] c"\AA\AA", %"class.jxl::PaddedBytes" { i64 -6148914691236517206, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 } }, %"class.std::__1::vector.85" { %"class.std::__1::__vector_base.86" { %"class.jxl::Plane"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane"*), %"class.jxl::Plane"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane"*), %"class.std::__1::__compressed_pair.87" { %"struct.std::__1::__compressed_pair_elem.88" { %"class.jxl::Plane"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane"*) } } } }, i64 -6148914691236517206 }, %"class.jxl::ImageBundle"* inttoptr (i64 -6148914691236517206 to %"class.jxl::ImageBundle"*), i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" }>, <{ { %"class.std::__1::unique_ptr.9", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, [2 x i8], %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, %"class.std::__1::vector.85", i64 }, %"class.jxl::ImageBundle"*, i8, [7 x i8] }> <{ { %"class.std::__1::unique_ptr.9", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, [2 x i8], %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, %"class.std::__1::vector.85", i64 } { %"class.std::__1::unique_ptr.9" { %"class.std::__1::__compressed_pair.10" { %"struct.std::__1::__compressed_pair_elem.11" { %"struct.jxl::jpeg::JPEGData"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::jpeg::JPEGData"*) } } }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"struct.jxl::YCbCrChromaSubsampling" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, [3 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766], i8 -86, i8 -86, [2 x i8] c"\AA\AA" }>, %"struct.jxl::FrameOrigin" { i32 -1431655766, i32 -1431655766 }, i32 -1431655766, i8 -86, i8 -86, [2 x i8] c"\AA\AA", %"class.std::__1::basic_string" { %"class.std::__1::__compressed_pair.1" { %"struct.std::__1::__compressed_pair_elem.2" { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" { %union.anon { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" { i8* inttoptr (i64 -6148914691236517206 to i8*), i64 -6148914691236517206, i64 -6148914691236517206 } } } } } }, %"struct.jxl::ImageMetadata"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::ImageMetadata"*), %"class.jxl::Image3" { [3 x %"class.jxl::Plane"] [%"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }] }, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766 }, i32 -1431655766, i8 -86, i8 -86, [2 x i8] c"\AA\AA", %"class.jxl::PaddedBytes" { i64 -6148914691236517206, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 } }, %"class.std::__1::vector.85" { %"class.std::__1::__vector_base.86" { %"class.jxl::Plane"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane"*), %"class.jxl::Plane"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane"*), %"class.std::__1::__compressed_pair.87" { %"struct.std::__1::__compressed_pair_elem.88" { %"class.jxl::Plane"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane"*) } } } }, i64 -6148914691236517206 }, %"class.jxl::ImageBundle"* inttoptr (i64 -6148914691236517206 to %"class.jxl::ImageBundle"*), i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" }>], i64 -6148914691236517206 }, %"struct.jxl::PassesSharedState"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::PassesSharedState"*), [3 x %"struct.jxl::Upsampler"] [%"struct.jxl::Upsampler" { i64 -6148914691236517206, [4 x [4 x [5 x [5 x float]]]] [[4 x [5 x [5 x float]]] [[5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], [5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], [5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], [5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]]], [4 x [5 x [5 x float]]] [[5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], [5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], [5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], [5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]]], [4 x [5 x [5 x float]]] [[5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], [5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], [5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], [5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]]], [4 x [5 x [5 x float]]] [[5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], [5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], [5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], [5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]]]] }, %"struct.jxl::Upsampler" { i64 -6148914691236517206, [4 x [4 x [5 x [5 x float]]]] [[4 x [5 x [5 x float]]] [[5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], [5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], [5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], [5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]]], [4 x [5 x [5 x float]]] [[5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], [5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], [5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], [5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]]], [4 x [5 x [5 x float]]] [[5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], [5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], [5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], [5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]]], [4 x [5 x [5 x float]]] [[5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], [5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], [5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], [5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]]]] }, %"struct.jxl::Upsampler" { i64 -6148914691236517206, [4 x [4 x [5 x [5 x float]]]] [[4 x [5 x [5 x float]]] [[5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], [5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], [5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], [5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]]], [4 x [5 x [5 x float]]] [[5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], [5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], [5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], [5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]]], [4 x [5 x [5 x float]]] [[5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], [5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], [5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], [5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]]], [4 x [5 x [5 x float]]] [[5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], [5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], [5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], [5 x [5 x float]] [[5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [5 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]]]] }], %"class.jxl::Image3" { [3 x %"class.jxl::Plane"] [%"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }] }, %"class.jxl::Image3" { [3 x %"class.jxl::Plane"] [%"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }] }, %"class.std::__1::vector.85" { %"class.std::__1::__vector_base.86" { %"class.jxl::Plane"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane"*), %"class.jxl::Plane"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane"*), %"class.std::__1::__compressed_pair.87" { %"struct.std::__1::__compressed_pair_elem.88" { %"class.jxl::Plane"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane"*) } } } }, %"class.std::__1::vector.177" { %"class.std::__1::__vector_base.178" { %"struct.jxl::ANSCode"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::ANSCode"*), %"struct.jxl::ANSCode"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::ANSCode"*), %"class.std::__1::__compressed_pair.200" { %"struct.std::__1::__compressed_pair_elem.201" { %"struct.jxl::ANSCode"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::ANSCode"*) } } } }, %"class.std::__1::vector.12" { %"class.std::__1::__vector_base.13" { %"class.std::__1::vector.14"* inttoptr (i64 -6148914691236517206 to %"class.std::__1::vector.14"*), %"class.std::__1::vector.14"* inttoptr (i64 -6148914691236517206 to %"class.std::__1::vector.14"*), %"class.std::__1::__compressed_pair.20" { %"struct.std::__1::__compressed_pair_elem.21" { %"class.std::__1::vector.14"* inttoptr (i64 -6148914691236517206 to %"class.std::__1::vector.14"*) } } } }, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, %"class.jxl::Image3" { [3 x %"class.jxl::Plane"] [%"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }] }, %"class.std::__1::vector.85" { %"class.std::__1::__vector_base.86" { %"class.jxl::Plane"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane"*), %"class.jxl::Plane"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane"*), %"class.std::__1::__compressed_pair.87" { %"struct.std::__1::__compressed_pair_elem.88" { %"class.jxl::Plane"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane"*) } } } }, %"class.jxl::Image3" { [3 x %"class.jxl::Plane"] [%"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }] }, %"class.jxl::Image3" { [3 x %"class.jxl::Plane"] [%"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }] }, i8* inttoptr (i64 -6148914691236517206 to i8*), i64 -6148914691236517206, i8 -86, i8 -86, [6 x i8] c"\AA\AA\AA\AA\AA\AA", %"class.std::__1::function" { %"class.std::__1::__function::__policy_func" { %"union.std::__1::__function::__policy_storage" { i8* inttoptr (i64 -6148914691236517206 to i8*), [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, %"struct.std::__1::__function::__policy_invoker" { void (%"union.std::__1::__function::__policy_storage"*, float*, i64, i64, i64)* inttoptr (i64 -6148914691236517206 to void (%"union.std::__1::__function::__policy_storage"*, float*, i64, i64, i64)*) }, %"struct.std::__1::__function::__policy"* inttoptr (i64 -6148914691236517206 to %"struct.std::__1::__function::__policy"*) } }, %"class.std::__1::vector.205" { %"class.std::__1::__vector_base.206" { float* inttoptr (i64 -6148914691236517206 to float*), float* inttoptr (i64 -6148914691236517206 to float*), %"class.std::__1::__compressed_pair.207" { %"struct.std::__1::__compressed_pair_elem.102" { float* inttoptr (i64 -6148914691236517206 to float*) } } } }, %"class.std::__1::vector.211" { %"class.std::__1::__vector_base.212" { %"class.std::__1::vector.205"* inttoptr (i64 -6148914691236517206 to %"class.std::__1::vector.205"*), %"class.std::__1::vector.205"* inttoptr (i64 -6148914691236517206 to %"class.std::__1::vector.205"*), %"class.std::__1::__compressed_pair.213" { %"struct.std::__1::__compressed_pair_elem.214" { %"class.std::__1::vector.205"* inttoptr (i64 -6148914691236517206 to %"class.std::__1::vector.205"*) } } } }, i64 -6148914691236517206, %"struct.std::__1::atomic" { %"struct.std::__1::__atomic_base" { %"struct.std::__1::__atomic_base.218" { %"struct.std::__1::__cxx_atomic_impl" { %"struct.std::__1::__cxx_atomic_base_impl" { i32 -1431655766 } } } } }, [4 x i8] c"\AA\AA\AA\AA", %"class.std::__1::unique_ptr.219" { %"class.std::__1::__compressed_pair.220" { %"struct.std::__1::__compressed_pair_elem.221" { %"class.jxl::ACImage"* inttoptr (i64 -6148914691236517206 to %"class.jxl::ACImage"*) } } }, %"class.std::__1::vector.225" { %"class.std::__1::__vector_base.226" { %"class.jxl::FilterPipeline"* inttoptr (i64 -6148914691236517206 to %"class.jxl::FilterPipeline"*), %"class.jxl::FilterPipeline"* inttoptr (i64 -6148914691236517206 to %"class.jxl::FilterPipeline"*), %"class.std::__1::__compressed_pair.227" { %"struct.std::__1::__compressed_pair_elem.228" { %"class.jxl::FilterPipeline"* inttoptr (i64 -6148914691236517206 to %"class.jxl::FilterPipeline"*) } } } }, { [9 x float], [4 x i8], %"class.jxl::Plane" } { [9 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x i8] c"\AA\AA\AA\AA", %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } } }, %"class.jxl::GroupBorderAssigner" { %"struct.jxl::FrameDimensions" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206 }, %"class.std::__1::unique_ptr.232" { %"class.std::__1::__compressed_pair.233" { %"struct.std::__1::__compressed_pair_elem.234" { %"struct.std::__1::atomic.235"* inttoptr (i64 -6148914691236517206 to %"struct.std::__1::atomic.235"*) } } } }, %"class.std::__1::vector.239" { %"class.std::__1::__vector_base.240" { %"class.jxl::Image3"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Image3"*), %"class.jxl::Image3"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Image3"*), %"class.std::__1::__compressed_pair.241" { %"struct.std::__1::__compressed_pair_elem.242" { %"class.jxl::Image3"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Image3"*) } } } }, %"class.std::__1::vector.239" { %"class.std::__1::__vector_base.240" { %"class.jxl::Image3"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Image3"*), %"class.jxl::Image3"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Image3"*), %"class.std::__1::__compressed_pair.241" { %"struct.std::__1::__compressed_pair_elem.242" { %"class.jxl::Image3"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Image3"*) } } } }, %"class.std::__1::vector.239" { %"class.std::__1::__vector_base.240" { %"class.jxl::Image3"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Image3"*), %"class.jxl::Image3"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Image3"*), %"class.std::__1::__compressed_pair.241" { %"struct.std::__1::__compressed_pair_elem.242" { %"class.jxl::Image3"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Image3"*) } } } }, [4 x %"class.std::__1::vector.239"] [%"class.std::__1::vector.239" { %"class.std::__1::__vector_base.240" { %"class.jxl::Image3"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Image3"*), %"class.jxl::Image3"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Image3"*), %"class.std::__1::__compressed_pair.241" { %"struct.std::__1::__compressed_pair_elem.242" { %"class.jxl::Image3"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Image3"*) } } } }, %"class.std::__1::vector.239" { %"class.std::__1::__vector_base.240" { %"class.jxl::Image3"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Image3"*), %"class.jxl::Image3"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Image3"*), %"class.std::__1::__compressed_pair.241" { %"struct.std::__1::__compressed_pair_elem.242" { %"class.jxl::Image3"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Image3"*) } } } }, %"class.std::__1::vector.239" { %"class.std::__1::__vector_base.240" { %"class.jxl::Image3"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Image3"*), %"class.jxl::Image3"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Image3"*), %"class.std::__1::__compressed_pair.241" { %"struct.std::__1::__compressed_pair_elem.242" { %"class.jxl::Image3"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Image3"*) } } } }, %"class.std::__1::vector.239" { %"class.std::__1::__vector_base.240" { %"class.jxl::Image3"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Image3"*), %"class.jxl::Image3"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Image3"*), %"class.std::__1::__compressed_pair.241" { %"struct.std::__1::__compressed_pair_elem.242" { %"class.jxl::Image3"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Image3"*) } } } }], %"class.std::__1::vector.85" { %"class.std::__1::__vector_base.86" { %"class.jxl::Plane"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane"*), %"class.jxl::Plane"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane"*), %"class.std::__1::__compressed_pair.87" { %"struct.std::__1::__compressed_pair_elem.88" { %"class.jxl::Plane"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane"*) } } } }, %"class.std::__1::vector.239" { %"class.std::__1::__vector_base.240" { %"class.jxl::Image3"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Image3"*), %"class.jxl::Image3"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Image3"*), %"class.std::__1::__compressed_pair.241" { %"struct.std::__1::__compressed_pair_elem.242" { %"class.jxl::Image3"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Image3"*) } } } }, <{ { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, float, %"struct.jxl::OpsinParams", i8, i8, [2 x i8] }> <{ { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766 }, i32 -1431655766, i8 -86, i8 -86, [2 x i8] c"\AA\AA", %"class.jxl::PaddedBytes" { i64 -6148914691236517206, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 } }, float 0xFFFFFFFFE0000000, %"struct.jxl::OpsinParams" { [36 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000] }, i8 -86, i8 -86, [2 x i8] c"\AA\AA" }> }, align 8
@_ZN3jxl15DequantMatrices14required_size_E.const = private unnamed_addr constant [17 x i64] [i64 1, i64 1, i64 1, i64 1, i64 4, i64 16, i64 2, i64 4, i64 8, i64 1, i64 1, i64 64, i64 32, i64 256, i64 128, i64 1024, i64 512], align 16
@_ZN3jxl15DequantMatrices11kQuantTableE.const = private unnamed_addr constant [27 x i64] [i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 12, i64 12, i64 13, i64 14, i64 14, i64 15, i64 16, i64 16], align 16
@.str.22 = private unnamed_addr constant [22 x i8] c"%s:%d: JXL_CHECK: %s\0A\00", align 1
@.str.23 = private unnamed_addr constant [53 x i8] c"../../third_party/libjxl/src/lib/jxl/quant_weights.h\00", align 1
@.str.24 = private unnamed_addr constant [10 x i8] c"Compute()\00", align 1
@_ZN3jxl11BlockCtxMap14kDefaultCtxMapE = external local_unnamed_addr constant [39 x i8], align 16
@_ZZNSt3__110__function8__policy14__create_emptyEvE9__policy_ = linkonce_odr hidden constant %"struct.std::__1::__function::__policy" { i8* (i8*)* null, void (i8*)* null, i8 1, %"class.std::type_info"* null }, comdat, align 8
@_ZTVN3jxl8ACImageTIiEE = linkonce_odr hidden unnamed_addr constant { [11 x i8*] } { [11 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::ACImageT"*)* @_ZN3jxl8ACImageTIiED2Ev to i8*), i8* bitcast (void (%"class.jxl::ACImageT"*)* @_ZN3jxl8ACImageTIiED0Ev to i8*), i8* bitcast (i32 (%"class.jxl::ACImageT"*)* @_ZNK3jxl8ACImageTIiE4TypeEv to i8*), i8* bitcast (i32* (%"class.jxl::ACImageT"*, i64, i64, i64)* @_ZN3jxl8ACImageTIiE8PlaneRowEmmm to i8*), i8* bitcast (i32* (%"class.jxl::ACImageT"*, i64, i64, i64)* @_ZNK3jxl8ACImageTIiE8PlaneRowEmmm to i8*), i8* bitcast (i64 (%"class.jxl::ACImageT"*)* @_ZNK3jxl8ACImageTIiE12PixelsPerRowEv to i8*), i8* bitcast (void (%"class.jxl::ACImageT"*)* @_ZN3jxl8ACImageTIiE8ZeroFillEv to i8*), i8* bitcast (void (%"class.jxl::ACImageT"*, i64)* @_ZN3jxl8ACImageTIiE13ZeroFillPlaneEm to i8*), i8* bitcast (i1 (%"class.jxl::ACImageT"*)* @_ZNK3jxl8ACImageTIiE7IsEmptyEv to i8*)] }, comdat, align 8
@_ZTVN3jxl13ColorEncodingE = external unnamed_addr constant { [6 x i8*] }, align 8
@_ZTVN3jxl11FrameHeaderE = external unnamed_addr constant { [6 x i8*] }, align 8
@.str.31 = private unnamed_addr constant [52 x i8] c"../../third_party/libjxl/src/lib/jxl/codec_in_out.h\00", align 1
@.str.32 = private unnamed_addr constant [42 x i8] c"metadata.m.bit_depth.bits_per_sample != 0\00", align 1
@.str.33 = private unnamed_addr constant [41 x i8] c"!metadata.m.color_encoding.ICC().empty()\00", align 1
@.str.34 = private unnamed_addr constant [40 x i8] c"preview_frame.metadata() == &metadata.m\00", align 1
@.str.35 = private unnamed_addr constant [29 x i8] c"ib.metadata() == &metadata.m\00", align 1
@_ZTVN3jxl22YCbCrChromaSubsamplingE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::Fields"*)* @_ZN3jxl6FieldsD2Ev to i8*), i8* bitcast (void (%"struct.jxl::YCbCrChromaSubsampling"*)* @_ZN3jxl22YCbCrChromaSubsamplingD0Ev to i8*), i8* bitcast (i8* (%"struct.jxl::YCbCrChromaSubsampling"*)* @_ZNK3jxl22YCbCrChromaSubsampling4NameEv to i8*), i8* bitcast (i32 (%"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Visitor"*)* @_ZN3jxl22YCbCrChromaSubsampling11VisitFieldsEPNS_7VisitorE to i8*)] }, comdat, align 8
@.str.38 = private unnamed_addr constant [23 x i8] c"YCbCrChromaSubsampling\00", align 1
@_ZN3jxl22YCbCrChromaSubsampling7kHShiftE = external local_unnamed_addr constant [4 x i8], align 1
@_ZN3jxl22YCbCrChromaSubsampling7kVShiftE = external local_unnamed_addr constant [4 x i8], align 1
@_ZTVN3jxl22CustomTransferFunctionE = external unnamed_addr constant { [6 x i8*] }, align 8
@_ZTVN3jxl8CustomxyE = external unnamed_addr constant { [6 x i8*] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl13DecodePreviewERKNS_16DecompressParamsERKNS_13CodecMetadataEPNS_9BitReaderEPNS_10ThreadPoolEPNS_11ImageBundleEPmPKNS_15SizeConstraintsE(%"struct.jxl::DecompressParams"* dereferenceable(32), %"struct.jxl::CodecMetadata"* dereferenceable(2856), %"class.jxl::BitReader"* noalias, %"class.jxl::ThreadPool"*, %"class.jxl::ImageBundle"* noalias, i64*, %"struct.jxl::SizeConstraints"*) local_unnamed_addr #0 {
  %8 = alloca %"struct.jxl::PassesDecoderState", align 8
  %9 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %1, i64 0, i32 0
  %10 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %1, i64 0, i32 0, i32 9
  %11 = load i8, i8* %10, align 4, !range !2
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %13, label %18

13:                                               ; preds = %7
  %14 = getelementptr inbounds %"struct.jxl::DecompressParams", %"struct.jxl::DecompressParams"* %0, i64 0, i32 4
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 1
  %17 = zext i1 %16 to i32
  ret i32 %17

18:                                               ; preds = %7
  %19 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 2
  %20 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 0, %21
  %23 = and i64 %22, 7
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %56, label %25

25:                                               ; preds = %18
  %26 = sub nuw nsw i64 8, %23
  %27 = load i8*, i8** %19, align 8
  %28 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 3
  %29 = load i8*, i8** %28, align 8
  %30 = icmp ugt i8* %27, %29
  br i1 %30, label %31, label %35, !prof !3

31:                                               ; preds = %25
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #10
  %32 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %33 = load i64, i64* %32, align 8
  %34 = load i64, i64* %20, align 8
  br label %46

35:                                               ; preds = %25
  %36 = bitcast i8* %27 to i64*
  %37 = load i64, i64* %36, align 1
  %38 = shl i64 %37, %21
  %39 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %40 = load i64, i64* %39, align 8
  %41 = or i64 %40, %38
  store i64 %41, i64* %39, align 8
  %42 = sub i64 63, %21
  %43 = lshr i64 %42, 3
  %44 = getelementptr inbounds i8, i8* %27, i64 %43
  store i8* %44, i8** %19, align 8
  %45 = or i64 %21, 56
  store i64 %45, i64* %20, align 8
  br label %46

46:                                               ; preds = %31, %35
  %47 = phi i64 [ %34, %31 ], [ %45, %35 ]
  %48 = phi i64 [ %33, %31 ], [ %41, %35 ]
  %49 = shl nsw i64 -1, %26
  %50 = xor i64 %49, -1
  %51 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %52 = and i64 %48, %50
  %53 = sub i64 %47, %26
  store i64 %53, i64* %20, align 8
  %54 = lshr i64 %48, %26
  store i64 %54, i64* %51, align 8
  %55 = icmp eq i64 %52, 0
  br i1 %55, label %56, label %111

56:                                               ; preds = %18, %46
  %57 = getelementptr inbounds %"struct.jxl::DecompressParams", %"struct.jxl::DecompressParams"* %0, i64 0, i32 4
  %58 = load i32, i32* %57, align 4
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %62

60:                                               ; preds = %56
  %61 = tail call i32 @_ZN3jxl9SkipFrameERKNS_13CodecMetadataEPNS_9BitReaderEb(%"struct.jxl::CodecMetadata"* dereferenceable(2856) %1, %"class.jxl::BitReader"* %2, i1 zeroext true) #10
  br label %111

62:                                               ; preds = %56
  %63 = bitcast %"struct.jxl::PassesDecoderState"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 10512, i8* nonnull %63) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %63, i8* align 8 bitcast ({ { %"struct.jxl::CodecMetadata"*, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], i64, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i32, i32, i32, [4 x i8], %"class.std::__1::basic_string", %"struct.jxl::Passes", i8, [3 x i8], %"struct.jxl::FrameSize", i32, %"class.std::__1::vector.65", %"struct.jxl::FrameOrigin", %"struct.jxl::BlendingInfo", %"class.std::__1::vector.92", %"struct.jxl::AnimationFrame", i8, [3 x i8], i32, i8, [3 x i8], i32, %"struct.jxl::CodecMetadata"*, %"struct.jxl::LoopFilter", i8, [7 x i8], i64 }, %"struct.jxl::FrameDimensions", %"class.jxl::AcStrategyImage", %"class.jxl::DequantMatrices", %"class.jxl::Quantizer", %"class.jxl::Plane.131", %"class.jxl::Plane.99", %"struct.jxl::ColorCorrelationMap", { %"struct.jxl::NoiseParams", %"class.jxl::PatchDictionary", { i32, [4 x i8], %"class.std::__1::vector.154", %"class.std::__1::vector.168" } }, i64, %"class.std::__1::vector.65", %"class.jxl::Plane.99", %"class.jxl::Image3", %"class.jxl::Image3"*, %"struct.jxl::BlockCtxMap", [4 x %"class.jxl::Image3"], [4 x <{ { %"class.std::__1::unique_ptr.9", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, [2 x i8], %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, %"class.std::__1::vector.85", i64 }, %"class.jxl::ImageBundle"*, i8, [7 x i8] }>], i64 }, %"struct.jxl::PassesSharedState"*, [3 x %"struct.jxl::Upsampler"], %"class.jxl::Image3", %"class.jxl::Image3", %"class.std::__1::vector.85", %"class.std::__1::vector.177", %"class.std::__1::vector.12", float, float, %"class.jxl::Image3", %"class.std::__1::vector.85", %"class.jxl::Image3", %"class.jxl::Image3", i8*, i64, i8, i8, [6 x i8], %"class.std::__1::function", %"class.std::__1::vector.205", %"class.std::__1::vector.211", i64, %"struct.std::__1::atomic", [4 x i8], %"class.std::__1::unique_ptr.219", %"class.std::__1::vector.225", { [9 x float], [4 x i8], %"class.jxl::Plane" }, %"class.jxl::GroupBorderAssigner", %"class.std::__1::vector.239", %"class.std::__1::vector.239", %"class.std::__1::vector.239", [4 x %"class.std::__1::vector.239"], %"class.std::__1::vector.85", %"class.std::__1::vector.239", <{ { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, float, %"struct.jxl::OpsinParams", i8, i8, [2 x i8] }> }* @__const._ZN3jxl10DecodeFileERKNS_16DecompressParamsENS_4SpanIKhEEPNS_10CodecInOutEPNS_10ThreadPoolE.dec_state to i8*), i64 10512, i1 false)
  %64 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %8, i64 0, i32 0
  call void @_ZN3jxl17PassesSharedStateC2Ev(%"struct.jxl::PassesSharedState"* nonnull %64) #10
  %65 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %8, i64 0, i32 1
  store %"struct.jxl::PassesSharedState"* %64, %"struct.jxl::PassesSharedState"** %65, align 8
  %66 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %8, i64 0, i32 2, i64 0, i32 0
  store i64 1, i64* %66, align 8
  %67 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %8, i64 0, i32 2, i64 1, i32 0
  store i64 1, i64* %67, align 8
  %68 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %8, i64 0, i32 2, i64 2, i32 0
  store i64 1, i64* %68, align 8
  %69 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %8, i64 0, i32 3
  %70 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %8, i64 0, i32 10
  %71 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %8, i64 0, i32 15
  store i64 0, i64* %71, align 8
  %72 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %8, i64 0, i32 18, i32 0, i32 1, i32 0
  %73 = bitcast %"class.jxl::Image3"* %69 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %73, i8 0, i64 264, i1 false) #10
  %74 = bitcast %"class.jxl::Image3"* %70 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %74, i8 0, i64 312, i1 false) #10
  store void (%"union.std::__1::__function::__policy_storage"*, float*, i64, i64, i64)* @_ZNSt3__110__function16__policy_invokerIFvPKfmmmEE12__call_emptyEPKNS0_16__policy_storageES3_mmm, void (%"union.std::__1::__function::__policy_storage"*, float*, i64, i64, i64)** %72, align 8
  %75 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %8, i64 0, i32 18, i32 0, i32 2
  store %"struct.std::__1::__function::__policy"* @_ZZNSt3__110__function8__policy14__create_emptyEvE9__policy_, %"struct.std::__1::__function::__policy"** %75, align 8
  %76 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %8, i64 0, i32 19
  %77 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %8, i64 0, i32 23
  %78 = bitcast %"class.std::__1::vector.205"* %76 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %78, i8 0, i64 60, i1 false) #10
  %79 = call i8* @_Znwm(i64 104) #11
  %80 = bitcast i8* %79 to %"class.jxl::ACImageT"*
  call void @_ZN3jxl8ACImageTIiEC2Emm(%"class.jxl::ACImageT"* nonnull %80, i64 0, i64 0) #10
  %81 = ptrtoint i8* %79 to i64
  %82 = bitcast %"class.std::__1::unique_ptr.219"* %77 to i64*
  store i64 %81, i64* %82, align 8
  %83 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %8, i64 0, i32 24
  %84 = bitcast %"class.std::__1::vector.225"* %83 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %84, i8 0, i64 24, i1 false) #10
  %85 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %8, i64 0, i32 25, i32 1
  %86 = bitcast %"class.jxl::Plane"* %85 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %86, i8 0, i64 32, i1 false) #10
  %87 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %8, i64 0, i32 26, i32 1
  %88 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %8, i64 0, i32 33, i32 0
  %89 = bitcast %"class.std::__1::unique_ptr.232"* %87 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %89, i8 0, i64 224, i1 false) #10
  call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %88) #10
  %90 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %8, i64 0, i32 33, i32 3
  store i8 1, i8* %90, align 4
  %91 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %8, i64 0, i32 33, i32 4
  store i8 0, i8* %91, align 1
  %92 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %8, i64 0, i32 33
  %93 = call i32 @_ZN3jxl18OutputEncodingInfo3SetERKNS_13ImageMetadataE(%"struct.jxl::OutputEncodingInfo"* %92, %"struct.jxl::ImageMetadata"* dereferenceable(1600) %9) #10
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %109

95:                                               ; preds = %62
  %96 = call i32 @_ZN3jxl11DecodeFrameERKNS_16DecompressParamsEPNS_18PassesDecoderStateEPNS_10ThreadPoolEPNS_9BitReaderEPNS_11ImageBundleERKNS_13CodecMetadataEPKNS_15SizeConstraintsEb(%"struct.jxl::DecompressParams"* dereferenceable(32) %0, %"struct.jxl::PassesDecoderState"* nonnull %8, %"class.jxl::ThreadPool"* %3, %"class.jxl::BitReader"* %2, %"class.jxl::ImageBundle"* %4, %"struct.jxl::CodecMetadata"* dereferenceable(2856) %1, %"struct.jxl::SizeConstraints"* %6, i1 zeroext true) #10
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %98, label %109

98:                                               ; preds = %95
  %99 = icmp eq i64* %5, null
  br i1 %99, label %109, label %100

100:                                              ; preds = %98
  %101 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %65, align 8
  %102 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %101, i64 0, i32 2, i32 2
  %103 = load i64, i64* %102, align 8
  %104 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %101, i64 0, i32 2, i32 3
  %105 = load i64, i64* %104, align 8
  %106 = mul i64 %105, %103
  %107 = load i64, i64* %5, align 8
  %108 = add i64 %107, %106
  store i64 %108, i64* %5, align 8
  br label %109

109:                                              ; preds = %100, %98, %95, %62
  %110 = phi i32 [ %93, %62 ], [ %96, %95 ], [ 0, %98 ], [ 0, %100 ]
  call void @_ZN3jxl18PassesDecoderStateD2Ev(%"struct.jxl::PassesDecoderState"* nonnull %8) #10
  call void @llvm.lifetime.end.p0i8(i64 10512, i8* nonnull %63) #10
  br label %111

111:                                              ; preds = %60, %46, %109
  %112 = phi i32 [ %110, %109 ], [ 1, %46 ], [ %61, %60 ]
  ret i32 %112
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare i32 @_ZN3jxl9SkipFrameERKNS_13CodecMetadataEPNS_9BitReaderEb(%"struct.jxl::CodecMetadata"* dereferenceable(2856), %"class.jxl::BitReader"*, i1 zeroext) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @_ZN3jxl18OutputEncodingInfo3SetERKNS_13ImageMetadataE(%"struct.jxl::OutputEncodingInfo"*, %"struct.jxl::ImageMetadata"* dereferenceable(1600)) local_unnamed_addr #2

declare i32 @_ZN3jxl11DecodeFrameERKNS_16DecompressParamsEPNS_18PassesDecoderStateEPNS_10ThreadPoolEPNS_9BitReaderEPNS_11ImageBundleERKNS_13CodecMetadataEPKNS_15SizeConstraintsEb(%"struct.jxl::DecompressParams"* dereferenceable(32), %"struct.jxl::PassesDecoderState"*, %"class.jxl::ThreadPool"*, %"class.jxl::BitReader"*, %"class.jxl::ImageBundle"*, %"struct.jxl::CodecMetadata"* dereferenceable(2856), %"struct.jxl::SizeConstraints"*, i1 zeroext) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl18PassesDecoderStateD2Ev(%"struct.jxl::PassesDecoderState"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 33, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ColorEncodingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 33, i32 0, i32 8, i32 2, i32 0, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  store i8* null, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %4) #10
  br label %7

7:                                                ; preds = %1, %6
  %8 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 32
  %9 = getelementptr inbounds %"class.std::__1::vector.239", %"class.std::__1::vector.239"* %8, i64 0, i32 0, i32 0
  %10 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %9, align 8
  %11 = icmp eq %"class.jxl::Image3"* %10, null
  br i1 %11, label %41, label %12

12:                                               ; preds = %7
  %13 = bitcast %"class.jxl::Image3"* %10 to i8*
  %14 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 32, i32 0, i32 1
  %15 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %14, align 8
  %16 = icmp eq %"class.jxl::Image3"* %15, %10
  br i1 %16, label %39, label %17

17:                                               ; preds = %12, %34
  %18 = phi %"class.jxl::Image3"* [ %19, %34 ], [ %15, %12 ]
  %19 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %18, i64 -1
  %20 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %18, i64 -1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8
  store i8* null, i8** %20, align 8
  %22 = icmp eq i8* %21, null
  br i1 %22, label %24, label %23

23:                                               ; preds = %17
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %21) #10
  br label %24

24:                                               ; preds = %23, %17
  %25 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %18, i64 -1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %26 = load i8*, i8** %25, align 8
  store i8* null, i8** %25, align 8
  %27 = icmp eq i8* %26, null
  br i1 %27, label %29, label %28

28:                                               ; preds = %24
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %26) #10
  br label %29

29:                                               ; preds = %28, %24
  %30 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %18, i64 -1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  store i8* null, i8** %30, align 8
  %32 = icmp eq i8* %31, null
  br i1 %32, label %34, label %33

33:                                               ; preds = %29
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %31) #10
  br label %34

34:                                               ; preds = %33, %29
  %35 = icmp eq %"class.jxl::Image3"* %19, %10
  br i1 %35, label %36, label %17

36:                                               ; preds = %34
  %37 = bitcast %"class.std::__1::vector.239"* %8 to i8**
  %38 = load i8*, i8** %37, align 8
  br label %39

39:                                               ; preds = %36, %12
  %40 = phi i8* [ %38, %36 ], [ %13, %12 ]
  store %"class.jxl::Image3"* %10, %"class.jxl::Image3"** %14, align 8
  tail call void @_ZdlPv(i8* %40) #11
  br label %41

41:                                               ; preds = %7, %39
  %42 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 31
  %43 = getelementptr inbounds %"class.std::__1::vector.85", %"class.std::__1::vector.85"* %42, i64 0, i32 0, i32 0
  %44 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %43, align 8
  %45 = icmp eq %"class.jxl::Plane"* %44, null
  br i1 %45, label %65, label %46

46:                                               ; preds = %41
  %47 = bitcast %"class.jxl::Plane"* %44 to i8*
  %48 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 31, i32 0, i32 1
  %49 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %48, align 8
  %50 = icmp eq %"class.jxl::Plane"* %49, %44
  br i1 %50, label %63, label %51

51:                                               ; preds = %46, %58
  %52 = phi %"class.jxl::Plane"* [ %53, %58 ], [ %49, %46 ]
  %53 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %52, i64 -1
  %54 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %52, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %55 = load i8*, i8** %54, align 8
  store i8* null, i8** %54, align 8
  %56 = icmp eq i8* %55, null
  br i1 %56, label %58, label %57

57:                                               ; preds = %51
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %55) #10
  br label %58

58:                                               ; preds = %57, %51
  %59 = icmp eq %"class.jxl::Plane"* %53, %44
  br i1 %59, label %60, label %51

60:                                               ; preds = %58
  %61 = bitcast %"class.std::__1::vector.85"* %42 to i8**
  %62 = load i8*, i8** %61, align 8
  br label %63

63:                                               ; preds = %60, %46
  %64 = phi i8* [ %62, %60 ], [ %47, %46 ]
  store %"class.jxl::Plane"* %44, %"class.jxl::Plane"** %48, align 8
  tail call void @_ZdlPv(i8* %64) #11
  br label %65

65:                                               ; preds = %41, %63
  %66 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 30, i64 3
  %67 = getelementptr inbounds %"class.std::__1::vector.239", %"class.std::__1::vector.239"* %66, i64 0, i32 0, i32 0
  %68 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %67, align 8
  %69 = icmp eq %"class.jxl::Image3"* %68, null
  br i1 %69, label %99, label %70

70:                                               ; preds = %65
  %71 = bitcast %"class.jxl::Image3"* %68 to i8*
  %72 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 30, i64 3, i32 0, i32 1
  %73 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %72, align 8
  %74 = icmp eq %"class.jxl::Image3"* %73, %68
  br i1 %74, label %97, label %75

75:                                               ; preds = %70, %92
  %76 = phi %"class.jxl::Image3"* [ %77, %92 ], [ %73, %70 ]
  %77 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %76, i64 -1
  %78 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %76, i64 -1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %79 = load i8*, i8** %78, align 8
  store i8* null, i8** %78, align 8
  %80 = icmp eq i8* %79, null
  br i1 %80, label %82, label %81

81:                                               ; preds = %75
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %79) #10
  br label %82

82:                                               ; preds = %81, %75
  %83 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %76, i64 -1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %84 = load i8*, i8** %83, align 8
  store i8* null, i8** %83, align 8
  %85 = icmp eq i8* %84, null
  br i1 %85, label %87, label %86

86:                                               ; preds = %82
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %84) #10
  br label %87

87:                                               ; preds = %86, %82
  %88 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %76, i64 -1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %89 = load i8*, i8** %88, align 8
  store i8* null, i8** %88, align 8
  %90 = icmp eq i8* %89, null
  br i1 %90, label %92, label %91

91:                                               ; preds = %87
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %89) #10
  br label %92

92:                                               ; preds = %91, %87
  %93 = icmp eq %"class.jxl::Image3"* %77, %68
  br i1 %93, label %94, label %75

94:                                               ; preds = %92
  %95 = bitcast %"class.std::__1::vector.239"* %66 to i8**
  %96 = load i8*, i8** %95, align 8
  br label %97

97:                                               ; preds = %94, %70
  %98 = phi i8* [ %96, %94 ], [ %71, %70 ]
  store %"class.jxl::Image3"* %68, %"class.jxl::Image3"** %72, align 8
  tail call void @_ZdlPv(i8* %98) #11
  br label %99

99:                                               ; preds = %65, %97
  %100 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 30, i64 2
  %101 = getelementptr inbounds %"class.std::__1::vector.239", %"class.std::__1::vector.239"* %100, i64 0, i32 0, i32 0
  %102 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %101, align 8
  %103 = icmp eq %"class.jxl::Image3"* %102, null
  br i1 %103, label %504, label %475

104:                                              ; preds = %572
  %105 = bitcast %"class.jxl::Image3"* %575 to i8*
  %106 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 29, i32 0, i32 1
  %107 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %106, align 8
  %108 = icmp eq %"class.jxl::Image3"* %107, %575
  br i1 %108, label %131, label %109

109:                                              ; preds = %104, %126
  %110 = phi %"class.jxl::Image3"* [ %111, %126 ], [ %107, %104 ]
  %111 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %110, i64 -1
  %112 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %110, i64 -1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %113 = load i8*, i8** %112, align 8
  store i8* null, i8** %112, align 8
  %114 = icmp eq i8* %113, null
  br i1 %114, label %116, label %115

115:                                              ; preds = %109
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %113) #10
  br label %116

116:                                              ; preds = %115, %109
  %117 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %110, i64 -1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %118 = load i8*, i8** %117, align 8
  store i8* null, i8** %117, align 8
  %119 = icmp eq i8* %118, null
  br i1 %119, label %121, label %120

120:                                              ; preds = %116
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %118) #10
  br label %121

121:                                              ; preds = %120, %116
  %122 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %110, i64 -1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %123 = load i8*, i8** %122, align 8
  store i8* null, i8** %122, align 8
  %124 = icmp eq i8* %123, null
  br i1 %124, label %126, label %125

125:                                              ; preds = %121
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %123) #10
  br label %126

126:                                              ; preds = %125, %121
  %127 = icmp eq %"class.jxl::Image3"* %111, %575
  br i1 %127, label %128, label %109

128:                                              ; preds = %126
  %129 = bitcast %"class.std::__1::vector.239"* %573 to i8**
  %130 = load i8*, i8** %129, align 8
  br label %131

131:                                              ; preds = %128, %104
  %132 = phi i8* [ %130, %128 ], [ %105, %104 ]
  store %"class.jxl::Image3"* %575, %"class.jxl::Image3"** %106, align 8
  tail call void @_ZdlPv(i8* %132) #11
  br label %133

133:                                              ; preds = %572, %131
  %134 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 28
  %135 = getelementptr inbounds %"class.std::__1::vector.239", %"class.std::__1::vector.239"* %134, i64 0, i32 0, i32 0
  %136 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %135, align 8
  %137 = icmp eq %"class.jxl::Image3"* %136, null
  br i1 %137, label %167, label %138

138:                                              ; preds = %133
  %139 = bitcast %"class.jxl::Image3"* %136 to i8*
  %140 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 28, i32 0, i32 1
  %141 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %140, align 8
  %142 = icmp eq %"class.jxl::Image3"* %141, %136
  br i1 %142, label %165, label %143

143:                                              ; preds = %138, %160
  %144 = phi %"class.jxl::Image3"* [ %145, %160 ], [ %141, %138 ]
  %145 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %144, i64 -1
  %146 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %144, i64 -1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %147 = load i8*, i8** %146, align 8
  store i8* null, i8** %146, align 8
  %148 = icmp eq i8* %147, null
  br i1 %148, label %150, label %149

149:                                              ; preds = %143
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %147) #10
  br label %150

150:                                              ; preds = %149, %143
  %151 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %144, i64 -1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %152 = load i8*, i8** %151, align 8
  store i8* null, i8** %151, align 8
  %153 = icmp eq i8* %152, null
  br i1 %153, label %155, label %154

154:                                              ; preds = %150
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %152) #10
  br label %155

155:                                              ; preds = %154, %150
  %156 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %144, i64 -1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %157 = load i8*, i8** %156, align 8
  store i8* null, i8** %156, align 8
  %158 = icmp eq i8* %157, null
  br i1 %158, label %160, label %159

159:                                              ; preds = %155
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %157) #10
  br label %160

160:                                              ; preds = %159, %155
  %161 = icmp eq %"class.jxl::Image3"* %145, %136
  br i1 %161, label %162, label %143

162:                                              ; preds = %160
  %163 = bitcast %"class.std::__1::vector.239"* %134 to i8**
  %164 = load i8*, i8** %163, align 8
  br label %165

165:                                              ; preds = %162, %138
  %166 = phi i8* [ %164, %162 ], [ %139, %138 ]
  store %"class.jxl::Image3"* %136, %"class.jxl::Image3"** %140, align 8
  tail call void @_ZdlPv(i8* %166) #11
  br label %167

167:                                              ; preds = %133, %165
  %168 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 27
  %169 = getelementptr inbounds %"class.std::__1::vector.239", %"class.std::__1::vector.239"* %168, i64 0, i32 0, i32 0
  %170 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %169, align 8
  %171 = icmp eq %"class.jxl::Image3"* %170, null
  br i1 %171, label %201, label %172

172:                                              ; preds = %167
  %173 = bitcast %"class.jxl::Image3"* %170 to i8*
  %174 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 27, i32 0, i32 1
  %175 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %174, align 8
  %176 = icmp eq %"class.jxl::Image3"* %175, %170
  br i1 %176, label %199, label %177

177:                                              ; preds = %172, %194
  %178 = phi %"class.jxl::Image3"* [ %179, %194 ], [ %175, %172 ]
  %179 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %178, i64 -1
  %180 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %178, i64 -1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %181 = load i8*, i8** %180, align 8
  store i8* null, i8** %180, align 8
  %182 = icmp eq i8* %181, null
  br i1 %182, label %184, label %183

183:                                              ; preds = %177
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %181) #10
  br label %184

184:                                              ; preds = %183, %177
  %185 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %178, i64 -1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %186 = load i8*, i8** %185, align 8
  store i8* null, i8** %185, align 8
  %187 = icmp eq i8* %186, null
  br i1 %187, label %189, label %188

188:                                              ; preds = %184
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %186) #10
  br label %189

189:                                              ; preds = %188, %184
  %190 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %178, i64 -1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %191 = load i8*, i8** %190, align 8
  store i8* null, i8** %190, align 8
  %192 = icmp eq i8* %191, null
  br i1 %192, label %194, label %193

193:                                              ; preds = %189
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %191) #10
  br label %194

194:                                              ; preds = %193, %189
  %195 = icmp eq %"class.jxl::Image3"* %179, %170
  br i1 %195, label %196, label %177

196:                                              ; preds = %194
  %197 = bitcast %"class.std::__1::vector.239"* %168 to i8**
  %198 = load i8*, i8** %197, align 8
  br label %199

199:                                              ; preds = %196, %172
  %200 = phi i8* [ %198, %196 ], [ %173, %172 ]
  store %"class.jxl::Image3"* %170, %"class.jxl::Image3"** %174, align 8
  tail call void @_ZdlPv(i8* %200) #11
  br label %201

201:                                              ; preds = %167, %199
  %202 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 26, i32 1, i32 0, i32 0, i32 0
  %203 = load %"struct.std::__1::atomic.235"*, %"struct.std::__1::atomic.235"** %202, align 8
  store %"struct.std::__1::atomic.235"* null, %"struct.std::__1::atomic.235"** %202, align 8
  %204 = icmp eq %"struct.std::__1::atomic.235"* %203, null
  br i1 %204, label %207, label %205

205:                                              ; preds = %201
  %206 = getelementptr inbounds %"struct.std::__1::atomic.235", %"struct.std::__1::atomic.235"* %203, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  tail call void @_ZdaPv(i8* %206) #11
  br label %207

207:                                              ; preds = %201, %205
  %208 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 25, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %209 = load i8*, i8** %208, align 8
  store i8* null, i8** %208, align 8
  %210 = icmp eq i8* %209, null
  br i1 %210, label %212, label %211

211:                                              ; preds = %207
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %209) #10
  br label %212

212:                                              ; preds = %207, %211
  %213 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 24
  %214 = getelementptr inbounds %"class.std::__1::vector.225", %"class.std::__1::vector.225"* %213, i64 0, i32 0, i32 0
  %215 = load %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"** %214, align 8
  %216 = icmp eq %"class.jxl::FilterPipeline"* %215, null
  br i1 %216, label %246, label %217

217:                                              ; preds = %212
  %218 = bitcast %"class.jxl::FilterPipeline"* %215 to i8*
  %219 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 24, i32 0, i32 1
  %220 = load %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"** %219, align 8
  %221 = icmp eq %"class.jxl::FilterPipeline"* %220, %215
  br i1 %221, label %244, label %222

222:                                              ; preds = %217, %239
  %223 = phi %"class.jxl::FilterPipeline"* [ %224, %239 ], [ %220, %217 ]
  %224 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %223, i64 -1
  %225 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %223, i64 -1, i32 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %226 = load i8*, i8** %225, align 8
  store i8* null, i8** %225, align 8
  %227 = icmp eq i8* %226, null
  br i1 %227, label %229, label %228

228:                                              ; preds = %222
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %226) #10
  br label %229

229:                                              ; preds = %228, %222
  %230 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %223, i64 -1, i32 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %231 = load i8*, i8** %230, align 8
  store i8* null, i8** %230, align 8
  %232 = icmp eq i8* %231, null
  br i1 %232, label %234, label %233

233:                                              ; preds = %229
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %231) #10
  br label %234

234:                                              ; preds = %233, %229
  %235 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %223, i64 -1, i32 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %236 = load i8*, i8** %235, align 8
  store i8* null, i8** %235, align 8
  %237 = icmp eq i8* %236, null
  br i1 %237, label %239, label %238

238:                                              ; preds = %234
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %236) #10
  br label %239

239:                                              ; preds = %238, %234
  %240 = icmp eq %"class.jxl::FilterPipeline"* %224, %215
  br i1 %240, label %241, label %222

241:                                              ; preds = %239
  %242 = bitcast %"class.std::__1::vector.225"* %213 to i8**
  %243 = load i8*, i8** %242, align 8
  br label %244

244:                                              ; preds = %241, %217
  %245 = phi i8* [ %243, %241 ], [ %218, %217 ]
  store %"class.jxl::FilterPipeline"* %215, %"class.jxl::FilterPipeline"** %219, align 8
  tail call void @_ZdlPv(i8* %245) #11
  br label %246

246:                                              ; preds = %212, %244
  %247 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 23, i32 0, i32 0, i32 0
  %248 = load %"class.jxl::ACImage"*, %"class.jxl::ACImage"** %247, align 8
  store %"class.jxl::ACImage"* null, %"class.jxl::ACImage"** %247, align 8
  %249 = icmp eq %"class.jxl::ACImage"* %248, null
  br i1 %249, label %255, label %250

250:                                              ; preds = %246
  %251 = bitcast %"class.jxl::ACImage"* %248 to void (%"class.jxl::ACImage"*)***
  %252 = load void (%"class.jxl::ACImage"*)**, void (%"class.jxl::ACImage"*)*** %251, align 8
  %253 = getelementptr inbounds void (%"class.jxl::ACImage"*)*, void (%"class.jxl::ACImage"*)** %252, i64 1
  %254 = load void (%"class.jxl::ACImage"*)*, void (%"class.jxl::ACImage"*)** %253, align 8
  tail call void %254(%"class.jxl::ACImage"* nonnull %248) #10
  br label %255

255:                                              ; preds = %246, %250
  %256 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 20
  %257 = getelementptr inbounds %"class.std::__1::vector.211", %"class.std::__1::vector.211"* %256, i64 0, i32 0, i32 0
  %258 = load %"class.std::__1::vector.205"*, %"class.std::__1::vector.205"** %257, align 8
  %259 = icmp eq %"class.std::__1::vector.205"* %258, null
  br i1 %259, label %283, label %260

260:                                              ; preds = %255
  %261 = bitcast %"class.std::__1::vector.205"* %258 to i8*
  %262 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 20, i32 0, i32 1
  %263 = load %"class.std::__1::vector.205"*, %"class.std::__1::vector.205"** %262, align 8
  %264 = icmp eq %"class.std::__1::vector.205"* %263, %258
  br i1 %264, label %281, label %265

265:                                              ; preds = %260, %276
  %266 = phi %"class.std::__1::vector.205"* [ %267, %276 ], [ %263, %260 ]
  %267 = getelementptr inbounds %"class.std::__1::vector.205", %"class.std::__1::vector.205"* %266, i64 -1
  %268 = getelementptr inbounds %"class.std::__1::vector.205", %"class.std::__1::vector.205"* %267, i64 0, i32 0, i32 0
  %269 = load float*, float** %268, align 8
  %270 = icmp eq float* %269, null
  br i1 %270, label %276, label %271

271:                                              ; preds = %265
  %272 = ptrtoint float* %269 to i64
  %273 = getelementptr inbounds %"class.std::__1::vector.205", %"class.std::__1::vector.205"* %266, i64 -1, i32 0, i32 1
  %274 = bitcast float** %273 to i64*
  store i64 %272, i64* %274, align 8
  %275 = bitcast float* %269 to i8*
  tail call void @_ZdlPv(i8* %275) #11
  br label %276

276:                                              ; preds = %271, %265
  %277 = icmp eq %"class.std::__1::vector.205"* %267, %258
  br i1 %277, label %278, label %265

278:                                              ; preds = %276
  %279 = bitcast %"class.std::__1::vector.211"* %256 to i8**
  %280 = load i8*, i8** %279, align 8
  br label %281

281:                                              ; preds = %278, %260
  %282 = phi i8* [ %280, %278 ], [ %261, %260 ]
  store %"class.std::__1::vector.205"* %258, %"class.std::__1::vector.205"** %262, align 8
  tail call void @_ZdlPv(i8* %282) #11
  br label %283

283:                                              ; preds = %255, %281
  %284 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 19, i32 0, i32 0
  %285 = load float*, float** %284, align 8
  %286 = icmp eq float* %285, null
  br i1 %286, label %292, label %287

287:                                              ; preds = %283
  %288 = ptrtoint float* %285 to i64
  %289 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 19, i32 0, i32 1
  %290 = bitcast float** %289 to i64*
  store i64 %288, i64* %290, align 8
  %291 = bitcast float* %285 to i8*
  tail call void @_ZdlPv(i8* %291) #11
  br label %292

292:                                              ; preds = %283, %287
  %293 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 18, i32 0, i32 2
  %294 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %293, align 8
  %295 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %294, i64 0, i32 1
  %296 = load void (i8*)*, void (i8*)** %295, align 8
  %297 = icmp eq void (i8*)* %296, null
  br i1 %297, label %301, label %298

298:                                              ; preds = %292
  %299 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 18, i32 0, i32 0, i32 0
  %300 = load i8*, i8** %299, align 8
  tail call void %296(i8* %300) #10
  br label %301

301:                                              ; preds = %292, %298
  %302 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 13, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %303 = load i8*, i8** %302, align 8
  store i8* null, i8** %302, align 8
  %304 = icmp eq i8* %303, null
  br i1 %304, label %306, label %305

305:                                              ; preds = %301
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %303) #10
  br label %306

306:                                              ; preds = %305, %301
  %307 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 13, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %308 = load i8*, i8** %307, align 8
  store i8* null, i8** %307, align 8
  %309 = icmp eq i8* %308, null
  br i1 %309, label %311, label %310

310:                                              ; preds = %306
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %308) #10
  br label %311

311:                                              ; preds = %310, %306
  %312 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 13, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %313 = load i8*, i8** %312, align 8
  store i8* null, i8** %312, align 8
  %314 = icmp eq i8* %313, null
  br i1 %314, label %316, label %315

315:                                              ; preds = %311
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %313) #10
  br label %316

316:                                              ; preds = %311, %315
  %317 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 12, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %318 = load i8*, i8** %317, align 8
  store i8* null, i8** %317, align 8
  %319 = icmp eq i8* %318, null
  br i1 %319, label %321, label %320

320:                                              ; preds = %316
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %318) #10
  br label %321

321:                                              ; preds = %320, %316
  %322 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 12, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %323 = load i8*, i8** %322, align 8
  store i8* null, i8** %322, align 8
  %324 = icmp eq i8* %323, null
  br i1 %324, label %326, label %325

325:                                              ; preds = %321
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %323) #10
  br label %326

326:                                              ; preds = %325, %321
  %327 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 12, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %328 = load i8*, i8** %327, align 8
  store i8* null, i8** %327, align 8
  %329 = icmp eq i8* %328, null
  br i1 %329, label %331, label %330

330:                                              ; preds = %326
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %328) #10
  br label %331

331:                                              ; preds = %326, %330
  %332 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 11
  %333 = getelementptr inbounds %"class.std::__1::vector.85", %"class.std::__1::vector.85"* %332, i64 0, i32 0, i32 0
  %334 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %333, align 8
  %335 = icmp eq %"class.jxl::Plane"* %334, null
  br i1 %335, label %355, label %336

336:                                              ; preds = %331
  %337 = bitcast %"class.jxl::Plane"* %334 to i8*
  %338 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 11, i32 0, i32 1
  %339 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %338, align 8
  %340 = icmp eq %"class.jxl::Plane"* %339, %334
  br i1 %340, label %353, label %341

341:                                              ; preds = %336, %348
  %342 = phi %"class.jxl::Plane"* [ %343, %348 ], [ %339, %336 ]
  %343 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %342, i64 -1
  %344 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %342, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %345 = load i8*, i8** %344, align 8
  store i8* null, i8** %344, align 8
  %346 = icmp eq i8* %345, null
  br i1 %346, label %348, label %347

347:                                              ; preds = %341
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %345) #10
  br label %348

348:                                              ; preds = %347, %341
  %349 = icmp eq %"class.jxl::Plane"* %343, %334
  br i1 %349, label %350, label %341

350:                                              ; preds = %348
  %351 = bitcast %"class.std::__1::vector.85"* %332 to i8**
  %352 = load i8*, i8** %351, align 8
  br label %353

353:                                              ; preds = %350, %336
  %354 = phi i8* [ %352, %350 ], [ %337, %336 ]
  store %"class.jxl::Plane"* %334, %"class.jxl::Plane"** %338, align 8
  tail call void @_ZdlPv(i8* %354) #11
  br label %355

355:                                              ; preds = %331, %353
  %356 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %357 = load i8*, i8** %356, align 8
  store i8* null, i8** %356, align 8
  %358 = icmp eq i8* %357, null
  br i1 %358, label %360, label %359

359:                                              ; preds = %355
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %357) #10
  br label %360

360:                                              ; preds = %359, %355
  %361 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %362 = load i8*, i8** %361, align 8
  store i8* null, i8** %361, align 8
  %363 = icmp eq i8* %362, null
  br i1 %363, label %365, label %364

364:                                              ; preds = %360
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %362) #10
  br label %365

365:                                              ; preds = %364, %360
  %366 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %367 = load i8*, i8** %366, align 8
  store i8* null, i8** %366, align 8
  %368 = icmp eq i8* %367, null
  br i1 %368, label %370, label %369

369:                                              ; preds = %365
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %367) #10
  br label %370

370:                                              ; preds = %365, %369
  %371 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 7
  %372 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %371, i64 0, i32 0, i32 0
  %373 = load %"class.std::__1::vector.14"*, %"class.std::__1::vector.14"** %372, align 8
  %374 = icmp eq %"class.std::__1::vector.14"* %373, null
  br i1 %374, label %397, label %375

375:                                              ; preds = %370
  %376 = bitcast %"class.std::__1::vector.14"* %373 to i8*
  %377 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 7, i32 0, i32 1
  %378 = load %"class.std::__1::vector.14"*, %"class.std::__1::vector.14"** %377, align 8
  %379 = icmp eq %"class.std::__1::vector.14"* %378, %373
  br i1 %379, label %395, label %380

380:                                              ; preds = %375, %390
  %381 = phi %"class.std::__1::vector.14"* [ %382, %390 ], [ %378, %375 ]
  %382 = getelementptr inbounds %"class.std::__1::vector.14", %"class.std::__1::vector.14"* %381, i64 -1
  %383 = getelementptr inbounds %"class.std::__1::vector.14", %"class.std::__1::vector.14"* %382, i64 0, i32 0, i32 0
  %384 = load i8*, i8** %383, align 8
  %385 = icmp eq i8* %384, null
  br i1 %385, label %390, label %386

386:                                              ; preds = %380
  %387 = ptrtoint i8* %384 to i64
  %388 = getelementptr inbounds %"class.std::__1::vector.14", %"class.std::__1::vector.14"* %381, i64 -1, i32 0, i32 1
  %389 = bitcast i8** %388 to i64*
  store i64 %387, i64* %389, align 8
  tail call void @_ZdlPv(i8* nonnull %384) #11
  br label %390

390:                                              ; preds = %386, %380
  %391 = icmp eq %"class.std::__1::vector.14"* %382, %373
  br i1 %391, label %392, label %380

392:                                              ; preds = %390
  %393 = bitcast %"class.std::__1::vector.12"* %371 to i8**
  %394 = load i8*, i8** %393, align 8
  br label %395

395:                                              ; preds = %392, %375
  %396 = phi i8* [ %394, %392 ], [ %376, %375 ]
  store %"class.std::__1::vector.14"* %373, %"class.std::__1::vector.14"** %377, align 8
  tail call void @_ZdlPv(i8* %396) #11
  br label %397

397:                                              ; preds = %370, %395
  %398 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 6
  %399 = getelementptr inbounds %"class.std::__1::vector.177", %"class.std::__1::vector.177"* %398, i64 0, i32 0, i32 0
  %400 = load %"struct.jxl::ANSCode"*, %"struct.jxl::ANSCode"** %399, align 8
  %401 = icmp eq %"struct.jxl::ANSCode"* %400, null
  br i1 %401, label %419, label %402

402:                                              ; preds = %397
  %403 = bitcast %"struct.jxl::ANSCode"* %400 to i8*
  %404 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 6, i32 0, i32 1
  %405 = load %"struct.jxl::ANSCode"*, %"struct.jxl::ANSCode"** %404, align 8
  %406 = icmp eq %"struct.jxl::ANSCode"* %405, %400
  br i1 %406, label %417, label %407

407:                                              ; preds = %402
  %408 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 6, i32 0, i32 2
  %409 = bitcast %"class.std::__1::__compressed_pair.200"* %408 to %"class.std::__1::allocator.203"*
  br label %410

410:                                              ; preds = %410, %407
  %411 = phi %"struct.jxl::ANSCode"* [ %405, %407 ], [ %412, %410 ]
  %412 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %411, i64 -1
  tail call void @_ZNSt3__19allocatorIN3jxl7ANSCodeEE7destroyEPS2_(%"class.std::__1::allocator.203"* %409, %"struct.jxl::ANSCode"* %412) #10
  %413 = icmp eq %"struct.jxl::ANSCode"* %412, %400
  br i1 %413, label %414, label %410

414:                                              ; preds = %410
  %415 = bitcast %"class.std::__1::vector.177"* %398 to i8**
  %416 = load i8*, i8** %415, align 8
  br label %417

417:                                              ; preds = %414, %402
  %418 = phi i8* [ %416, %414 ], [ %403, %402 ]
  store %"struct.jxl::ANSCode"* %400, %"struct.jxl::ANSCode"** %404, align 8
  tail call void @_ZdlPv(i8* %418) #11
  br label %419

419:                                              ; preds = %397, %417
  %420 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 5
  %421 = getelementptr inbounds %"class.std::__1::vector.85", %"class.std::__1::vector.85"* %420, i64 0, i32 0, i32 0
  %422 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %421, align 8
  %423 = icmp eq %"class.jxl::Plane"* %422, null
  br i1 %423, label %443, label %424

424:                                              ; preds = %419
  %425 = bitcast %"class.jxl::Plane"* %422 to i8*
  %426 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 5, i32 0, i32 1
  %427 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %426, align 8
  %428 = icmp eq %"class.jxl::Plane"* %427, %422
  br i1 %428, label %441, label %429

429:                                              ; preds = %424, %436
  %430 = phi %"class.jxl::Plane"* [ %431, %436 ], [ %427, %424 ]
  %431 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %430, i64 -1
  %432 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %430, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %433 = load i8*, i8** %432, align 8
  store i8* null, i8** %432, align 8
  %434 = icmp eq i8* %433, null
  br i1 %434, label %436, label %435

435:                                              ; preds = %429
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %433) #10
  br label %436

436:                                              ; preds = %435, %429
  %437 = icmp eq %"class.jxl::Plane"* %431, %422
  br i1 %437, label %438, label %429

438:                                              ; preds = %436
  %439 = bitcast %"class.std::__1::vector.85"* %420 to i8**
  %440 = load i8*, i8** %439, align 8
  br label %441

441:                                              ; preds = %438, %424
  %442 = phi i8* [ %440, %438 ], [ %425, %424 ]
  store %"class.jxl::Plane"* %422, %"class.jxl::Plane"** %426, align 8
  tail call void @_ZdlPv(i8* %442) #11
  br label %443

443:                                              ; preds = %419, %441
  %444 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 4, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %445 = load i8*, i8** %444, align 8
  store i8* null, i8** %444, align 8
  %446 = icmp eq i8* %445, null
  br i1 %446, label %448, label %447

447:                                              ; preds = %443
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %445) #10
  br label %448

448:                                              ; preds = %447, %443
  %449 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 4, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %450 = load i8*, i8** %449, align 8
  store i8* null, i8** %449, align 8
  %451 = icmp eq i8* %450, null
  br i1 %451, label %453, label %452

452:                                              ; preds = %448
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %450) #10
  br label %453

453:                                              ; preds = %452, %448
  %454 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 4, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %455 = load i8*, i8** %454, align 8
  store i8* null, i8** %454, align 8
  %456 = icmp eq i8* %455, null
  br i1 %456, label %458, label %457

457:                                              ; preds = %453
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %455) #10
  br label %458

458:                                              ; preds = %453, %457
  %459 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 3, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %460 = load i8*, i8** %459, align 8
  store i8* null, i8** %459, align 8
  %461 = icmp eq i8* %460, null
  br i1 %461, label %463, label %462

462:                                              ; preds = %458
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %460) #10
  br label %463

463:                                              ; preds = %462, %458
  %464 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 3, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %465 = load i8*, i8** %464, align 8
  store i8* null, i8** %464, align 8
  %466 = icmp eq i8* %465, null
  br i1 %466, label %468, label %467

467:                                              ; preds = %463
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %465) #10
  br label %468

468:                                              ; preds = %467, %463
  %469 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 3, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %470 = load i8*, i8** %469, align 8
  store i8* null, i8** %469, align 8
  %471 = icmp eq i8* %470, null
  br i1 %471, label %473, label %472

472:                                              ; preds = %468
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %470) #10
  br label %473

473:                                              ; preds = %468, %472
  %474 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 0
  tail call void @_ZN3jxl17PassesSharedStateD2Ev(%"struct.jxl::PassesSharedState"* %474) #10
  ret void

475:                                              ; preds = %99
  %476 = bitcast %"class.jxl::Image3"* %102 to i8*
  %477 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 30, i64 2, i32 0, i32 1
  %478 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %477, align 8
  %479 = icmp eq %"class.jxl::Image3"* %478, %102
  br i1 %479, label %502, label %480

480:                                              ; preds = %475, %497
  %481 = phi %"class.jxl::Image3"* [ %482, %497 ], [ %478, %475 ]
  %482 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %481, i64 -1
  %483 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %481, i64 -1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %484 = load i8*, i8** %483, align 8
  store i8* null, i8** %483, align 8
  %485 = icmp eq i8* %484, null
  br i1 %485, label %487, label %486

486:                                              ; preds = %480
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %484) #10
  br label %487

487:                                              ; preds = %486, %480
  %488 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %481, i64 -1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %489 = load i8*, i8** %488, align 8
  store i8* null, i8** %488, align 8
  %490 = icmp eq i8* %489, null
  br i1 %490, label %492, label %491

491:                                              ; preds = %487
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %489) #10
  br label %492

492:                                              ; preds = %491, %487
  %493 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %481, i64 -1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %494 = load i8*, i8** %493, align 8
  store i8* null, i8** %493, align 8
  %495 = icmp eq i8* %494, null
  br i1 %495, label %497, label %496

496:                                              ; preds = %492
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %494) #10
  br label %497

497:                                              ; preds = %496, %492
  %498 = icmp eq %"class.jxl::Image3"* %482, %102
  br i1 %498, label %499, label %480

499:                                              ; preds = %497
  %500 = bitcast %"class.std::__1::vector.239"* %100 to i8**
  %501 = load i8*, i8** %500, align 8
  br label %502

502:                                              ; preds = %499, %475
  %503 = phi i8* [ %501, %499 ], [ %476, %475 ]
  store %"class.jxl::Image3"* %102, %"class.jxl::Image3"** %477, align 8
  tail call void @_ZdlPv(i8* %503) #11
  br label %504

504:                                              ; preds = %502, %99
  %505 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 30, i64 1
  %506 = getelementptr inbounds %"class.std::__1::vector.239", %"class.std::__1::vector.239"* %505, i64 0, i32 0, i32 0
  %507 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %506, align 8
  %508 = icmp eq %"class.jxl::Image3"* %507, null
  br i1 %508, label %538, label %509

509:                                              ; preds = %504
  %510 = bitcast %"class.jxl::Image3"* %507 to i8*
  %511 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 30, i64 1, i32 0, i32 1
  %512 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %511, align 8
  %513 = icmp eq %"class.jxl::Image3"* %512, %507
  br i1 %513, label %536, label %514

514:                                              ; preds = %509, %531
  %515 = phi %"class.jxl::Image3"* [ %516, %531 ], [ %512, %509 ]
  %516 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %515, i64 -1
  %517 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %515, i64 -1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %518 = load i8*, i8** %517, align 8
  store i8* null, i8** %517, align 8
  %519 = icmp eq i8* %518, null
  br i1 %519, label %521, label %520

520:                                              ; preds = %514
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %518) #10
  br label %521

521:                                              ; preds = %520, %514
  %522 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %515, i64 -1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %523 = load i8*, i8** %522, align 8
  store i8* null, i8** %522, align 8
  %524 = icmp eq i8* %523, null
  br i1 %524, label %526, label %525

525:                                              ; preds = %521
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %523) #10
  br label %526

526:                                              ; preds = %525, %521
  %527 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %515, i64 -1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %528 = load i8*, i8** %527, align 8
  store i8* null, i8** %527, align 8
  %529 = icmp eq i8* %528, null
  br i1 %529, label %531, label %530

530:                                              ; preds = %526
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %528) #10
  br label %531

531:                                              ; preds = %530, %526
  %532 = icmp eq %"class.jxl::Image3"* %516, %507
  br i1 %532, label %533, label %514

533:                                              ; preds = %531
  %534 = bitcast %"class.std::__1::vector.239"* %505 to i8**
  %535 = load i8*, i8** %534, align 8
  br label %536

536:                                              ; preds = %533, %509
  %537 = phi i8* [ %535, %533 ], [ %510, %509 ]
  store %"class.jxl::Image3"* %507, %"class.jxl::Image3"** %511, align 8
  tail call void @_ZdlPv(i8* %537) #11
  br label %538

538:                                              ; preds = %536, %504
  %539 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 30, i64 0
  %540 = getelementptr inbounds %"class.std::__1::vector.239", %"class.std::__1::vector.239"* %539, i64 0, i32 0, i32 0
  %541 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %540, align 8
  %542 = icmp eq %"class.jxl::Image3"* %541, null
  br i1 %542, label %572, label %543

543:                                              ; preds = %538
  %544 = bitcast %"class.jxl::Image3"* %541 to i8*
  %545 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 30, i64 0, i32 0, i32 1
  %546 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %545, align 8
  %547 = icmp eq %"class.jxl::Image3"* %546, %541
  br i1 %547, label %570, label %548

548:                                              ; preds = %543, %565
  %549 = phi %"class.jxl::Image3"* [ %550, %565 ], [ %546, %543 ]
  %550 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %549, i64 -1
  %551 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %549, i64 -1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %552 = load i8*, i8** %551, align 8
  store i8* null, i8** %551, align 8
  %553 = icmp eq i8* %552, null
  br i1 %553, label %555, label %554

554:                                              ; preds = %548
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %552) #10
  br label %555

555:                                              ; preds = %554, %548
  %556 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %549, i64 -1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %557 = load i8*, i8** %556, align 8
  store i8* null, i8** %556, align 8
  %558 = icmp eq i8* %557, null
  br i1 %558, label %560, label %559

559:                                              ; preds = %555
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %557) #10
  br label %560

560:                                              ; preds = %559, %555
  %561 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %549, i64 -1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %562 = load i8*, i8** %561, align 8
  store i8* null, i8** %561, align 8
  %563 = icmp eq i8* %562, null
  br i1 %563, label %565, label %564

564:                                              ; preds = %560
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %562) #10
  br label %565

565:                                              ; preds = %564, %560
  %566 = icmp eq %"class.jxl::Image3"* %550, %541
  br i1 %566, label %567, label %548

567:                                              ; preds = %565
  %568 = bitcast %"class.std::__1::vector.239"* %539 to i8**
  %569 = load i8*, i8** %568, align 8
  br label %570

570:                                              ; preds = %567, %543
  %571 = phi i8* [ %569, %567 ], [ %544, %543 ]
  store %"class.jxl::Image3"* %541, %"class.jxl::Image3"** %545, align 8
  tail call void @_ZdlPv(i8* %571) #11
  br label %572

572:                                              ; preds = %570, %538
  %573 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 29
  %574 = getelementptr inbounds %"class.std::__1::vector.239", %"class.std::__1::vector.239"* %573, i64 0, i32 0, i32 0
  %575 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %574, align 8
  %576 = icmp eq %"class.jxl::Image3"* %575, null
  br i1 %576, label %133, label %104
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl10DecodeFileERKNS_16DecompressParamsENS_4SpanIKhEEPNS_10CodecInOutEPNS_10ThreadPoolE(%"struct.jxl::DecompressParams"* dereferenceable(32), i8*, i64, %"class.jxl::CodecInOut"* noalias, %"class.jxl::ThreadPool"*) local_unnamed_addr #0 {
  %6 = alloca %"class.jxl::BitReader", align 8
  %7 = alloca %"class.jxl::PaddedBytes", align 8
  %8 = alloca %"struct.jxl::PassesDecoderState", align 8
  %9 = alloca %"struct.jxl::ImageMetadata"*, align 8
  %10 = ptrtoint i8* %1 to i64
  %11 = tail call i32 @JxlSignatureCheck(i8* %1, i64 %2) #10
  %12 = icmp ult i32 %11, 2
  br i1 %12, label %505, label %13

13:                                               ; preds = %5
  %14 = getelementptr inbounds %"struct.jxl::DecompressParams", %"struct.jxl::DecompressParams"* %0, i64 0, i32 1
  %15 = load i8, i8* %14, align 1, !range !2
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %60, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %3, i64 0, i32 8
  %19 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %3, i64 0, i32 8, i32 0, i32 1
  %20 = bitcast %"class.jxl::ImageBundle"** %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = bitcast %"class.std::__1::vector.253"* %18 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = icmp eq i64 %21, %23
  %25 = inttoptr i64 %23 to %"class.jxl::ImageBundle"*
  br i1 %24, label %37, label %26

26:                                               ; preds = %17
  %27 = sub i64 %21, %23
  %28 = sdiv exact i64 %27, 368
  br label %29

29:                                               ; preds = %34, %26
  %30 = phi i64 [ 0, %26 ], [ %35, %34 ]
  %31 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %25, i64 %30, i32 5
  %32 = load i32, i32* %31, align 8
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %37

34:                                               ; preds = %29
  %35 = add nuw i64 %30, 1
  %36 = icmp ult i64 %35, %28
  br i1 %36, label %29, label %37

37:                                               ; preds = %29, %34, %17
  %38 = phi i64 [ 0, %17 ], [ %30, %34 ], [ %30, %29 ]
  %39 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %25, i64 %38, i32 0, i32 0, i32 0, i32 0
  %40 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %39, align 8
  %41 = icmp eq %"struct.jxl::jpeg::JPEGData"* %40, null
  br i1 %41, label %505, label %42

42:                                               ; preds = %37
  br i1 %24, label %54, label %43

43:                                               ; preds = %42
  %44 = sub i64 %21, %23
  %45 = sdiv exact i64 %44, 368
  br label %46

46:                                               ; preds = %51, %43
  %47 = phi i64 [ 0, %43 ], [ %52, %51 ]
  %48 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %25, i64 %47, i32 5
  %49 = load i32, i32* %48, align 8
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %54

51:                                               ; preds = %46
  %52 = add nuw i64 %47, 1
  %53 = icmp ult i64 %52, %45
  br i1 %53, label %46, label %54

54:                                               ; preds = %51, %46, %42
  %55 = phi i64 [ 0, %42 ], [ %47, %46 ], [ %47, %51 ]
  %56 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %25, i64 %55, i32 0
  %57 = getelementptr inbounds %"class.std::__1::unique_ptr.9", %"class.std::__1::unique_ptr.9"* %56, i64 0, i32 0, i32 0, i32 0
  %58 = bitcast %"class.std::__1::unique_ptr.9"* %56 to i64*
  %59 = load i64, i64* %58, align 8
  store %"struct.jxl::jpeg::JPEGData"* null, %"struct.jxl::jpeg::JPEGData"** %57, align 8
  br label %60

60:                                               ; preds = %13, %54
  %61 = phi i64 [ 0, %13 ], [ %59, %54 ]
  %62 = bitcast %"class.jxl::BitReader"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %62) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %62, i8 -86, i64 56, i1 false)
  %63 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %6, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %62, i8 0, i64 16, i1 false) #10
  store i8* %1, i8** %63, align 8
  %64 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %6, i64 0, i32 3
  %65 = getelementptr inbounds i8, i8* %1, i64 -8
  %66 = getelementptr inbounds i8, i8* %65, i64 %2
  store i8* %66, i8** %64, align 8
  %67 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %6, i64 0, i32 4
  %68 = bitcast i8** %67 to i64*
  store i64 %10, i64* %68, align 8
  %69 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %6, i64 0, i32 5
  store i64 0, i64* %69, align 8
  %70 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %6, i64 0, i32 6
  store i8 0, i8* %70, align 8
  %71 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %6, i64 0, i32 7
  store i64 0, i64* %71, align 8
  %72 = icmp ult i8* %66, %1
  br i1 %72, label %73, label %76, !prof !3

73:                                               ; preds = %60
  call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* nonnull %6) #10
  %74 = load i8*, i8** %63, align 8
  %75 = load i8*, i8** %64, align 8
  br label %82

76:                                               ; preds = %60
  %77 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %6, i64 0, i32 0
  %78 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %6, i64 0, i32 1
  %79 = bitcast i8* %1 to i64*
  %80 = load i64, i64* %79, align 1
  store i64 %80, i64* %77, align 8
  %81 = getelementptr inbounds i8, i8* %1, i64 7
  store i8* %81, i8** %63, align 8
  store i64 56, i64* %78, align 8
  br label %82

82:                                               ; preds = %73, %76
  %83 = phi i8* [ %75, %73 ], [ %66, %76 ]
  %84 = phi i8* [ %74, %73 ], [ %81, %76 ]
  %85 = icmp ugt i8* %84, %83
  br i1 %85, label %86, label %91, !prof !3

86:                                               ; preds = %82
  call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* nonnull %6) #10
  %87 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %6, i64 0, i32 0
  %88 = load i64, i64* %87, align 8
  %89 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %6, i64 0, i32 1
  %90 = load i64, i64* %89, align 8
  br label %104

91:                                               ; preds = %82
  %92 = bitcast i8* %84 to i64*
  %93 = load i64, i64* %92, align 1
  %94 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %6, i64 0, i32 1
  %95 = load i64, i64* %94, align 8
  %96 = shl i64 %93, %95
  %97 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %6, i64 0, i32 0
  %98 = load i64, i64* %97, align 8
  %99 = or i64 %98, %96
  store i64 %99, i64* %97, align 8
  %100 = sub i64 63, %95
  %101 = lshr i64 %100, 3
  %102 = getelementptr inbounds i8, i8* %84, i64 %101
  store i8* %102, i8** %63, align 8
  %103 = or i64 %95, 56
  store i64 %103, i64* %94, align 8
  br label %104

104:                                              ; preds = %86, %91
  %105 = phi i64 [ %90, %86 ], [ %103, %91 ]
  %106 = phi i64 [ %88, %86 ], [ %99, %91 ]
  %107 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %6, i64 0, i32 0
  %108 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %6, i64 0, i32 1
  %109 = add i64 %105, -16
  store i64 %109, i64* %108, align 8
  %110 = lshr i64 %106, 16
  store i64 %110, i64* %107, align 8
  %111 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %3, i64 0, i32 6, i32 1
  %112 = call i32 @_ZN3jxl14ReadSizeHeaderEPNS_9BitReaderEPNS_10SizeHeaderE(%"class.jxl::BitReader"* nonnull %6, %"class.jxl::SizeHeader"* %111) #10
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %114, label %468

114:                                              ; preds = %104
  %115 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %3, i64 0, i32 6, i32 0
  %116 = call i32 @_ZN3jxl17ReadImageMetadataEPNS_9BitReaderEPNS_13ImageMetadataE(%"class.jxl::BitReader"* nonnull %6, %"struct.jxl::ImageMetadata"* %115) #10
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %118, label %468

118:                                              ; preds = %114
  %119 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %3, i64 0, i32 6, i32 0, i32 5
  %120 = load i8, i8* %119, align 1, !range !2
  %121 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %3, i64 0, i32 6, i32 2, i32 1
  store i8 %120, i8* %121, align 8
  %122 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %3, i64 0, i32 6, i32 2, i32 0
  %123 = call i32 @_ZN3jxl6Bundle4ReadEPNS_9BitReaderEPNS_6FieldsE(%"class.jxl::BitReader"* nonnull %6, %"class.jxl::Fields"* %122) #10
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %125, label %468

125:                                              ; preds = %118
  %126 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %3, i64 0, i32 6
  %127 = call i64 @_ZNK3jxl10SizeHeader5xsizeEv(%"class.jxl::SizeHeader"* %111) #10
  %128 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %3, i64 0, i32 6, i32 1, i32 1
  %129 = load i8, i8* %128, align 8, !range !2
  %130 = icmp eq i8 %129, 0
  br i1 %130, label %136, label %131

131:                                              ; preds = %125
  %132 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %3, i64 0, i32 6, i32 1, i32 2
  %133 = load i32, i32* %132, align 4
  %134 = shl i32 %133, 3
  %135 = add i32 %134, 8
  br label %139

136:                                              ; preds = %125
  %137 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %3, i64 0, i32 6, i32 1, i32 3
  %138 = load i32, i32* %137, align 8
  br label %139

139:                                              ; preds = %131, %136
  %140 = phi i32 [ %135, %131 ], [ %138, %136 ]
  %141 = zext i32 %140 to i64
  %142 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %3, i64 0, i32 0
  %143 = icmp eq %"class.jxl::CodecInOut"* %3, null
  br i1 %143, label %162, label %144

144:                                              ; preds = %139
  %145 = icmp eq i64 %127, 0
  %146 = icmp eq i32 %140, 0
  %147 = or i1 %145, %146
  br i1 %147, label %468, label %148

148:                                              ; preds = %144
  %149 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %3, i64 0, i32 0, i32 0
  %150 = load i32, i32* %149, align 8
  %151 = zext i32 %150 to i64
  %152 = icmp ugt i64 %127, %151
  br i1 %152, label %468, label %153

153:                                              ; preds = %148
  %154 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %3, i64 0, i32 0, i32 1
  %155 = load i32, i32* %154, align 4
  %156 = icmp ult i32 %155, %140
  br i1 %156, label %468, label %157

157:                                              ; preds = %153
  %158 = mul i64 %127, %141
  %159 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %3, i64 0, i32 0, i32 2
  %160 = load i64, i64* %159, align 8
  %161 = icmp ugt i64 %158, %160
  br i1 %161, label %468, label %162

162:                                              ; preds = %157, %139
  %163 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %126, i64 0, i32 0
  %164 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %3, i64 0, i32 6, i32 0, i32 7
  %165 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %3, i64 0, i32 6, i32 0, i32 7, i32 6
  %166 = load i8, i8* %165, align 4, !range !2
  %167 = icmp eq i8 %166, 0
  br i1 %167, label %207, label %168

168:                                              ; preds = %162
  %169 = bitcast %"class.jxl::PaddedBytes"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %169) #10
  %170 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %7, i64 0, i32 1
  %171 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %7, i64 0, i32 2, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %169, i8 0, i64 24, i1 false) #10
  %172 = call i32 @_ZN3jxl7ReadICCEPNS_9BitReaderEPNS_11PaddedBytesEm(%"class.jxl::BitReader"* nonnull %6, %"class.jxl::PaddedBytes"* nonnull %7, i64 0) #10
  %173 = icmp eq i32 %172, 0
  br i1 %173, label %174, label %199

174:                                              ; preds = %168
  %175 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %7, i64 0, i32 0
  %176 = load i64, i64* %175, align 8
  %177 = icmp eq i64 %176, 0
  br i1 %177, label %199, label %178

178:                                              ; preds = %174
  %179 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %3, i64 0, i32 6, i32 0, i32 7, i32 8
  %180 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %179, i64 0, i32 0
  store i64 %176, i64* %180, align 8
  %181 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %3, i64 0, i32 6, i32 0, i32 7, i32 8, i32 1
  %182 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %7, i64 0, i32 2, i32 0, i32 0, i32 0
  %183 = bitcast i64* %170 to <2 x i64>*
  %184 = load <2 x i64>, <2 x i64>* %183, align 8
  store i8* null, i8** %182, align 8
  %185 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %3, i64 0, i32 6, i32 0, i32 7, i32 8, i32 2, i32 0, i32 0, i32 0
  %186 = load i8*, i8** %185, align 8
  %187 = bitcast i64* %181 to <2 x i64>*
  store <2 x i64> %184, <2 x i64>* %187, align 8
  %188 = icmp eq i8* %186, null
  br i1 %188, label %190, label %189

189:                                              ; preds = %178
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %186) #10
  br label %190

190:                                              ; preds = %189, %178
  %191 = icmp eq %"class.jxl::PaddedBytes"* %179, %7
  br i1 %191, label %193, label %192

192:                                              ; preds = %190
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %169, i8 0, i64 16, i1 false) #10
  br label %193

193:                                              ; preds = %192, %190
  %194 = call i32 @_ZN3jxl13ColorEncoding16SetFieldsFromICCEv(%"struct.jxl::ColorEncoding"* %164) #10
  %195 = icmp eq i32 %194, 0
  br i1 %195, label %198, label %196

196:                                              ; preds = %193
  %197 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %3, i64 0, i32 6, i32 0, i32 7, i32 8, i32 0
  store i64 0, i64* %197, align 8
  br label %199

198:                                              ; preds = %193
  store i8 1, i8* %165, align 4
  br label %199

199:                                              ; preds = %174, %196, %198, %168
  %200 = phi i32 [ 0, %198 ], [ %172, %168 ], [ 1, %196 ], [ 1, %174 ]
  %201 = phi i32 [ 0, %198 ], [ 1, %168 ], [ 1, %196 ], [ 1, %174 ]
  %202 = load i8*, i8** %171, align 8
  store i8* null, i8** %171, align 8
  %203 = icmp eq i8* %202, null
  br i1 %203, label %205, label %204

204:                                              ; preds = %199
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %202) #10
  br label %205

205:                                              ; preds = %199, %204
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %169) #10
  %206 = icmp eq i32 %201, 0
  br i1 %206, label %207, label %468

207:                                              ; preds = %162, %205
  %208 = icmp eq i64 %61, 0
  br i1 %208, label %214, label %209

209:                                              ; preds = %207
  %210 = inttoptr i64 %61 to %"struct.jxl::jpeg::JPEGData"*
  %211 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %3, i64 0, i32 6, i32 0, i32 7, i32 8
  %212 = call i32 @_ZN3jxl4jpeg18SetJPEGDataFromICCERKNS_11PaddedBytesEPNS0_8JPEGDataE(%"class.jxl::PaddedBytes"* dereferenceable(24) %211, %"struct.jxl::jpeg::JPEGData"* nonnull %210) #10
  %213 = icmp eq i32 %212, 0
  br i1 %213, label %214, label %468

214:                                              ; preds = %207, %209
  %215 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %3, i64 0, i32 7
  %216 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %3, i64 0, i32 4
  %217 = call i32 @_ZN3jxl13DecodePreviewERKNS_16DecompressParamsERKNS_13CodecMetadataEPNS_9BitReaderEPNS_10ThreadPoolEPNS_11ImageBundleEPmPKNS_15SizeConstraintsE(%"struct.jxl::DecompressParams"* dereferenceable(32) %0, %"struct.jxl::CodecMetadata"* dereferenceable(2856) %126, %"class.jxl::BitReader"* nonnull %6, %"class.jxl::ThreadPool"* %4, %"class.jxl::ImageBundle"* %215, i64* %216, %"struct.jxl::SizeConstraints"* %142)
  %218 = icmp eq i32 %217, 0
  br i1 %218, label %219, label %468

219:                                              ; preds = %214
  %220 = load i64, i64* %108, align 8
  %221 = sub i64 0, %220
  %222 = and i64 %221, 7
  %223 = icmp eq i64 %222, 0
  br i1 %223, label %251, label %224

224:                                              ; preds = %219
  %225 = sub nuw nsw i64 8, %222
  %226 = load i8*, i8** %63, align 8
  %227 = load i8*, i8** %64, align 8
  %228 = icmp ugt i8* %226, %227
  br i1 %228, label %229, label %232, !prof !3

229:                                              ; preds = %224
  call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* nonnull %6) #10
  %230 = load i64, i64* %107, align 8
  %231 = load i64, i64* %108, align 8
  br label %242

232:                                              ; preds = %224
  %233 = bitcast i8* %226 to i64*
  %234 = load i64, i64* %233, align 1
  %235 = shl i64 %234, %220
  %236 = load i64, i64* %107, align 8
  %237 = or i64 %236, %235
  store i64 %237, i64* %107, align 8
  %238 = sub i64 63, %220
  %239 = lshr i64 %238, 3
  %240 = getelementptr inbounds i8, i8* %226, i64 %239
  store i8* %240, i8** %63, align 8
  %241 = or i64 %220, 56
  store i64 %241, i64* %108, align 8
  br label %242

242:                                              ; preds = %229, %232
  %243 = phi i64 [ %231, %229 ], [ %241, %232 ]
  %244 = phi i64 [ %230, %229 ], [ %237, %232 ]
  %245 = shl nsw i64 -1, %225
  %246 = xor i64 %245, -1
  %247 = and i64 %244, %246
  %248 = sub i64 %243, %225
  store i64 %248, i64* %108, align 8
  %249 = lshr i64 %244, %225
  store i64 %249, i64* %107, align 8
  %250 = icmp eq i64 %247, 0
  br i1 %250, label %251, label %468

251:                                              ; preds = %219, %242
  %252 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %3, i64 0, i32 6, i32 0, i32 10
  %253 = load i8, i8* %252, align 1, !range !2
  %254 = icmp eq i8 %253, 0
  %255 = load i8, i8* %14, align 1
  %256 = icmp eq i8 %255, 0
  %257 = or i1 %254, %256
  br i1 %257, label %258, label %468

258:                                              ; preds = %251
  %259 = bitcast %"struct.jxl::PassesDecoderState"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 10512, i8* nonnull %259) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %259, i8* align 8 bitcast ({ { %"struct.jxl::CodecMetadata"*, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], i64, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i32, i32, i32, [4 x i8], %"class.std::__1::basic_string", %"struct.jxl::Passes", i8, [3 x i8], %"struct.jxl::FrameSize", i32, %"class.std::__1::vector.65", %"struct.jxl::FrameOrigin", %"struct.jxl::BlendingInfo", %"class.std::__1::vector.92", %"struct.jxl::AnimationFrame", i8, [3 x i8], i32, i8, [3 x i8], i32, %"struct.jxl::CodecMetadata"*, %"struct.jxl::LoopFilter", i8, [7 x i8], i64 }, %"struct.jxl::FrameDimensions", %"class.jxl::AcStrategyImage", %"class.jxl::DequantMatrices", %"class.jxl::Quantizer", %"class.jxl::Plane.131", %"class.jxl::Plane.99", %"struct.jxl::ColorCorrelationMap", { %"struct.jxl::NoiseParams", %"class.jxl::PatchDictionary", { i32, [4 x i8], %"class.std::__1::vector.154", %"class.std::__1::vector.168" } }, i64, %"class.std::__1::vector.65", %"class.jxl::Plane.99", %"class.jxl::Image3", %"class.jxl::Image3"*, %"struct.jxl::BlockCtxMap", [4 x %"class.jxl::Image3"], [4 x <{ { %"class.std::__1::unique_ptr.9", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, [2 x i8], %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, %"class.std::__1::vector.85", i64 }, %"class.jxl::ImageBundle"*, i8, [7 x i8] }>], i64 }, %"struct.jxl::PassesSharedState"*, [3 x %"struct.jxl::Upsampler"], %"class.jxl::Image3", %"class.jxl::Image3", %"class.std::__1::vector.85", %"class.std::__1::vector.177", %"class.std::__1::vector.12", float, float, %"class.jxl::Image3", %"class.std::__1::vector.85", %"class.jxl::Image3", %"class.jxl::Image3", i8*, i64, i8, i8, [6 x i8], %"class.std::__1::function", %"class.std::__1::vector.205", %"class.std::__1::vector.211", i64, %"struct.std::__1::atomic", [4 x i8], %"class.std::__1::unique_ptr.219", %"class.std::__1::vector.225", { [9 x float], [4 x i8], %"class.jxl::Plane" }, %"class.jxl::GroupBorderAssigner", %"class.std::__1::vector.239", %"class.std::__1::vector.239", %"class.std::__1::vector.239", [4 x %"class.std::__1::vector.239"], %"class.std::__1::vector.85", %"class.std::__1::vector.239", <{ { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, float, %"struct.jxl::OpsinParams", i8, i8, [2 x i8] }> }* @__const._ZN3jxl10DecodeFileERKNS_16DecompressParamsENS_4SpanIKhEEPNS_10CodecInOutEPNS_10ThreadPoolE.dec_state to i8*), i64 10512, i1 false)
  %260 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %8, i64 0, i32 0
  call void @_ZN3jxl17PassesSharedStateC2Ev(%"struct.jxl::PassesSharedState"* nonnull %260) #10
  %261 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %8, i64 0, i32 1
  store %"struct.jxl::PassesSharedState"* %260, %"struct.jxl::PassesSharedState"** %261, align 8
  %262 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %8, i64 0, i32 2, i64 0, i32 0
  store i64 1, i64* %262, align 8
  %263 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %8, i64 0, i32 2, i64 1, i32 0
  store i64 1, i64* %263, align 8
  %264 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %8, i64 0, i32 2, i64 2, i32 0
  store i64 1, i64* %264, align 8
  %265 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %8, i64 0, i32 3
  %266 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %8, i64 0, i32 10
  %267 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %8, i64 0, i32 15
  store i64 0, i64* %267, align 8
  %268 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %8, i64 0, i32 18, i32 0, i32 1, i32 0
  %269 = bitcast %"class.jxl::Image3"* %265 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %269, i8 0, i64 264, i1 false) #10
  %270 = bitcast %"class.jxl::Image3"* %266 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %270, i8 0, i64 312, i1 false) #10
  store void (%"union.std::__1::__function::__policy_storage"*, float*, i64, i64, i64)* @_ZNSt3__110__function16__policy_invokerIFvPKfmmmEE12__call_emptyEPKNS0_16__policy_storageES3_mmm, void (%"union.std::__1::__function::__policy_storage"*, float*, i64, i64, i64)** %268, align 8
  %271 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %8, i64 0, i32 18, i32 0, i32 2
  store %"struct.std::__1::__function::__policy"* @_ZZNSt3__110__function8__policy14__create_emptyEvE9__policy_, %"struct.std::__1::__function::__policy"** %271, align 8
  %272 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %8, i64 0, i32 19
  %273 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %8, i64 0, i32 23
  %274 = bitcast %"class.std::__1::vector.205"* %272 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %274, i8 0, i64 60, i1 false) #10
  %275 = call i8* @_Znwm(i64 104) #11
  %276 = bitcast i8* %275 to %"class.jxl::ACImageT"*
  call void @_ZN3jxl8ACImageTIiEC2Emm(%"class.jxl::ACImageT"* nonnull %276, i64 0, i64 0) #10
  %277 = ptrtoint i8* %275 to i64
  %278 = bitcast %"class.std::__1::unique_ptr.219"* %273 to i64*
  store i64 %277, i64* %278, align 8
  %279 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %8, i64 0, i32 24
  %280 = bitcast %"class.std::__1::vector.225"* %279 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %280, i8 0, i64 24, i1 false) #10
  %281 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %8, i64 0, i32 25, i32 1
  %282 = bitcast %"class.jxl::Plane"* %281 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %282, i8 0, i64 32, i1 false) #10
  %283 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %8, i64 0, i32 26, i32 1
  %284 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %8, i64 0, i32 33, i32 0
  %285 = bitcast %"class.std::__1::unique_ptr.232"* %283 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %285, i8 0, i64 224, i1 false) #10
  call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %284) #10
  %286 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %8, i64 0, i32 33, i32 3
  store i8 1, i8* %286, align 4
  %287 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %8, i64 0, i32 33, i32 4
  store i8 0, i8* %287, align 1
  %288 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %8, i64 0, i32 33
  %289 = call i32 @_ZN3jxl18OutputEncodingInfo3SetERKNS_13ImageMetadataE(%"struct.jxl::OutputEncodingInfo"* %288, %"struct.jxl::ImageMetadata"* dereferenceable(1600) %163) #10
  %290 = icmp eq i32 %289, 0
  br i1 %290, label %291, label %464

291:                                              ; preds = %258
  %292 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %3, i64 0, i32 8
  %293 = getelementptr inbounds %"class.std::__1::vector.253", %"class.std::__1::vector.253"* %292, i64 0, i32 0, i32 0
  %294 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %293, align 8
  %295 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %3, i64 0, i32 8, i32 0, i32 1
  %296 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %295, align 8
  %297 = icmp eq %"class.jxl::ImageBundle"* %296, %294
  br i1 %297, label %302, label %298

298:                                              ; preds = %291, %298
  %299 = phi %"class.jxl::ImageBundle"* [ %300, %298 ], [ %296, %291 ]
  %300 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %299, i64 -1
  call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* %300) #10
  %301 = icmp eq %"class.jxl::ImageBundle"* %300, %294
  br i1 %301, label %302, label %298

302:                                              ; preds = %298, %291
  store %"class.jxl::ImageBundle"* %294, %"class.jxl::ImageBundle"** %295, align 8
  %303 = bitcast %"struct.jxl::ImageMetadata"** %9 to i8*
  %304 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %3, i64 0, i32 8, i32 0, i32 2, i32 0, i32 0
  %305 = bitcast %"class.jxl::ImageBundle"** %295 to i64*
  %306 = getelementptr inbounds %"struct.jxl::DecompressParams", %"struct.jxl::DecompressParams"* %0, i64 0, i32 8
  %307 = ptrtoint %"struct.jxl::CodecMetadata"* %126 to i64
  br label %308

308:                                              ; preds = %406, %302
  %309 = phi %"class.jxl::ImageBundle"* [ %294, %302 ], [ %365, %406 ]
  %310 = phi i64 [ %61, %302 ], [ 0, %406 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %303) #10
  store %"struct.jxl::ImageMetadata"* %163, %"struct.jxl::ImageMetadata"** %9, align 8
  %311 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %304, align 8
  %312 = icmp ult %"class.jxl::ImageBundle"* %309, %311
  br i1 %312, label %313, label %330

313:                                              ; preds = %308
  %314 = bitcast %"class.jxl::ImageBundle"* %309 to i64*
  store i64 0, i64* %314, align 8
  %315 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %309, i64 0, i32 1
  store i32 1, i32* %315, align 8
  %316 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %309, i64 0, i32 3
  call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %316) #10
  %317 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %309, i64 0, i32 4, i32 0
  %318 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %309, i64 0, i32 8
  %319 = bitcast %"class.std::__1::basic_string"* %318 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %319, i8 0, i64 24, i1 false) #10
  %320 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %309, i64 0, i32 9
  %321 = bitcast i32* %317 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %321, i8 0, i64 14, i1 false) #10
  %322 = bitcast %"struct.jxl::ImageMetadata"** %320 to i64*
  store i64 %307, i64* %322, align 8
  %323 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %309, i64 0, i32 10
  %324 = bitcast %"class.jxl::Image3"* %323 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %324, i8 0, i64 96, i1 false) #10
  %325 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %309, i64 0, i32 11
  call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %325) #10
  %326 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %309, i64 0, i32 12
  %327 = bitcast %"class.std::__1::vector.85"* %326 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %327, i8 0, i64 32, i1 false) #10
  %328 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %309, i64 1
  %329 = ptrtoint %"class.jxl::ImageBundle"* %328 to i64
  store i64 %329, i64* %305, align 8
  br label %331

330:                                              ; preds = %308
  call void @_ZNSt3__16vectorIN3jxl11ImageBundleENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJPNS1_13ImageMetadataEEEEvDpOT_(%"class.std::__1::vector.253"* %292, %"struct.jxl::ImageMetadata"** nonnull dereferenceable(8) %9) #10
  br label %331

331:                                              ; preds = %313, %330
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %303) #10
  %332 = icmp eq i64 %310, 0
  br i1 %332, label %345, label %333

333:                                              ; preds = %331
  %334 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %295, align 8
  %335 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %334, i64 -1, i32 0
  %336 = getelementptr inbounds %"class.std::__1::unique_ptr.9", %"class.std::__1::unique_ptr.9"* %335, i64 0, i32 0, i32 0, i32 0
  %337 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %336, align 8
  %338 = bitcast %"class.std::__1::unique_ptr.9"* %335 to i64*
  store i64 %310, i64* %338, align 8
  %339 = icmp eq %"struct.jxl::jpeg::JPEGData"* %337, null
  br i1 %339, label %345, label %340

340:                                              ; preds = %333
  %341 = bitcast %"struct.jxl::jpeg::JPEGData"* %337 to void (%"struct.jxl::jpeg::JPEGData"*)***
  %342 = load void (%"struct.jxl::jpeg::JPEGData"*)**, void (%"struct.jxl::jpeg::JPEGData"*)*** %341, align 8
  %343 = getelementptr inbounds void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %342, i64 1
  %344 = load void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %343, align 8
  call void %344(%"struct.jxl::jpeg::JPEGData"* nonnull %337) #10
  br label %345

345:                                              ; preds = %331, %340, %333
  br label %346

346:                                              ; preds = %345, %358
  %347 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %295, align 8
  %348 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %347, i64 -1
  %349 = call i32 @_ZN3jxl11DecodeFrameERKNS_16DecompressParamsEPNS_18PassesDecoderStateEPNS_10ThreadPoolEPNS_9BitReaderEPNS_11ImageBundleERKNS_13CodecMetadataEPKNS_15SizeConstraintsEb(%"struct.jxl::DecompressParams"* dereferenceable(32) %0, %"struct.jxl::PassesDecoderState"* nonnull %8, %"class.jxl::ThreadPool"* %4, %"class.jxl::BitReader"* nonnull %6, %"class.jxl::ImageBundle"* %348, %"struct.jxl::CodecMetadata"* dereferenceable(2856) %126, %"struct.jxl::SizeConstraints"* %142, i1 zeroext false) #10
  %350 = load i8, i8* %306, align 8, !range !2
  %351 = icmp eq i8 %350, 0
  %352 = icmp eq i32 %349, 0
  br i1 %351, label %353, label %354

353:                                              ; preds = %346
  br i1 %352, label %358, label %464

354:                                              ; preds = %346
  br i1 %352, label %358, label %355

355:                                              ; preds = %354
  %356 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %295, align 8
  %357 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %356, i64 -1
  call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* %357) #10
  store %"class.jxl::ImageBundle"* %357, %"class.jxl::ImageBundle"** %295, align 8
  br label %364

358:                                              ; preds = %353, %354
  %359 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %261, align 8
  %360 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %359, i64 0, i32 1, i32 3
  %361 = load i32, i32* %360, align 8
  switch i32 %361, label %346 [
    i32 0, label %362
    i32 3, label %362
  ]

362:                                              ; preds = %358, %358
  %363 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %295, align 8
  br label %364

364:                                              ; preds = %362, %355
  %365 = phi %"class.jxl::ImageBundle"* [ %357, %355 ], [ %363, %362 ]
  %366 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %365, i64 -1, i32 0, i32 0, i32 0, i32 0
  %367 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %366, align 8
  %368 = icmp eq %"struct.jxl::jpeg::JPEGData"* %367, null
  br i1 %368, label %369, label %382

369:                                              ; preds = %364
  %370 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %365, i64 -1, i32 10, i32 0, i64 0, i32 0, i32 0
  %371 = load i32, i32* %370, align 8
  %372 = icmp eq i32 %371, 0
  br i1 %372, label %373, label %389

373:                                              ; preds = %369
  %374 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %365, i64 -1, i32 12, i32 0, i32 0
  %375 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %374, align 8
  %376 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %365, i64 -1, i32 12, i32 0, i32 1
  %377 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %376, align 8
  %378 = icmp eq %"class.jxl::Plane"* %375, %377
  br i1 %378, label %389, label %379

379:                                              ; preds = %373
  %380 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %375, i64 0, i32 0, i32 0
  %381 = load i32, i32* %380, align 8
  br label %389

382:                                              ; preds = %364
  %383 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %367, i64 0, i32 1
  %384 = load i32, i32* %383, align 8
  %385 = sext i32 %384 to i64
  %386 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %367, i64 0, i32 2
  %387 = load i32, i32* %386, align 4
  %388 = sext i32 %387 to i64
  br label %406

389:                                              ; preds = %369, %373, %379
  %390 = phi i32 [ %371, %369 ], [ 0, %373 ], [ %381, %379 ]
  %391 = zext i32 %390 to i64
  %392 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %365, i64 -1, i32 10, i32 0, i64 0, i32 0, i32 1
  %393 = load i32, i32* %392, align 4
  %394 = zext i32 %393 to i64
  %395 = icmp eq i32 %393, 0
  br i1 %395, label %396, label %406

396:                                              ; preds = %389
  %397 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %365, i64 -1, i32 12, i32 0, i32 0
  %398 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %397, align 8
  %399 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %365, i64 -1, i32 12, i32 0, i32 1
  %400 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %399, align 8
  %401 = icmp eq %"class.jxl::Plane"* %398, %400
  br i1 %401, label %406, label %402

402:                                              ; preds = %396
  %403 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %398, i64 0, i32 0, i32 1
  %404 = load i32, i32* %403, align 4
  %405 = zext i32 %404 to i64
  br label %406

406:                                              ; preds = %382, %389, %396, %402
  %407 = phi i64 [ %385, %382 ], [ %391, %402 ], [ %391, %396 ], [ %391, %389 ]
  %408 = phi i64 [ %388, %382 ], [ %405, %402 ], [ 0, %396 ], [ %394, %389 ]
  %409 = mul i64 %408, %407
  %410 = load i64, i64* %216, align 8
  %411 = add i64 %410, %409
  store i64 %411, i64* %216, align 8
  %412 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %261, align 8
  %413 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %412, i64 0, i32 1, i32 21
  %414 = load i8, i8* %413, align 8, !range !2
  %415 = icmp eq i8 %414, 0
  %416 = and i1 %352, %415
  br i1 %416, label %308, label %417

417:                                              ; preds = %406
  %418 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %293, align 8
  %419 = icmp eq %"class.jxl::ImageBundle"* %418, %365
  br i1 %419, label %464, label %420

420:                                              ; preds = %417
  %421 = getelementptr inbounds %"struct.jxl::DecompressParams", %"struct.jxl::DecompressParams"* %0, i64 0, i32 0
  %422 = load i8, i8* %421, align 8, !range !2
  %423 = icmp eq i8 %422, 0
  br i1 %423, label %443, label %424

424:                                              ; preds = %420
  %425 = load i8, i8* %306, align 8, !range !2
  %426 = icmp eq i8 %425, 0
  br i1 %426, label %427, label %443

427:                                              ; preds = %424
  %428 = getelementptr inbounds %"struct.jxl::DecompressParams", %"struct.jxl::DecompressParams"* %0, i64 0, i32 7
  %429 = load i64, i64* %428, align 8
  %430 = icmp eq i64 %429, 1
  br i1 %430, label %431, label %443

431:                                              ; preds = %427
  %432 = bitcast i8** %63 to i64*
  %433 = load i64, i64* %432, align 8
  %434 = load i64, i64* %68, align 8
  %435 = sub i64 %433, %434
  %436 = load i64, i64* %69, align 8
  %437 = add i64 %435, %436
  %438 = shl i64 %437, 3
  %439 = load i64, i64* %108, align 8
  %440 = sub i64 %438, %439
  %441 = shl i64 %2, 3
  %442 = icmp eq i64 %440, %441
  br i1 %442, label %443, label %464

443:                                              ; preds = %431, %424, %420, %427
  %444 = bitcast i8** %63 to i64*
  %445 = load i64, i64* %444, align 8
  %446 = load i64, i64* %68, align 8
  %447 = sub i64 %445, %446
  %448 = load i64, i64* %69, align 8
  %449 = add i64 %447, %448
  %450 = shl i64 %449, 3
  %451 = load i64, i64* %108, align 8
  %452 = sub i64 %450, %451
  store i64 %452, i64* %71, align 8
  %453 = load i8*, i8** %64, align 8
  %454 = getelementptr inbounds i8, i8* %453, i64 8
  %455 = ptrtoint i8* %454 to i64
  %456 = sub i64 %455, %446
  %457 = shl i64 %456, 3
  %458 = icmp ugt i64 %452, %457
  br i1 %458, label %459, label %463

459:                                              ; preds = %443
  %460 = load i8, i8* %306, align 8, !range !2
  %461 = icmp eq i8 %460, 0
  br i1 %461, label %463, label %462

462:                                              ; preds = %459
  store i8 1, i8* %70, align 8
  br label %463

463:                                              ; preds = %443, %462, %459
  call void @_ZNK3jxl10CodecInOut13CheckMetadataEv(%"class.jxl::CodecInOut"* %3)
  br label %464

464:                                              ; preds = %353, %463, %417, %431, %258
  %465 = phi i64 [ %61, %258 ], [ 0, %431 ], [ 0, %417 ], [ 0, %463 ], [ 0, %353 ]
  %466 = phi i32 [ %289, %258 ], [ 1, %431 ], [ 1, %417 ], [ 0, %463 ], [ %349, %353 ]
  %467 = phi i32 [ 1, %258 ], [ 1, %431 ], [ 1, %417 ], [ 0, %463 ], [ 1, %353 ]
  call void @_ZN3jxl18PassesDecoderStateD2Ev(%"struct.jxl::PassesDecoderState"* nonnull %8) #10
  call void @llvm.lifetime.end.p0i8(i64 10512, i8* nonnull %259) #10
  br label %468

468:                                              ; preds = %157, %153, %148, %144, %114, %104, %251, %242, %214, %118, %209, %205, %464
  %469 = phi i64 [ %465, %464 ], [ %61, %209 ], [ %61, %205 ], [ %61, %118 ], [ %61, %157 ], [ %61, %214 ], [ %61, %242 ], [ %61, %251 ], [ %61, %104 ], [ %61, %114 ], [ %61, %144 ], [ %61, %148 ], [ %61, %153 ]
  %470 = phi i32 [ %466, %464 ], [ %212, %209 ], [ %200, %205 ], [ %123, %118 ], [ 1, %157 ], [ %217, %214 ], [ 1, %242 ], [ 1, %251 ], [ %112, %104 ], [ %116, %114 ], [ 1, %144 ], [ 1, %148 ], [ 1, %153 ]
  %471 = phi i32 [ %467, %464 ], [ 1, %209 ], [ 1, %205 ], [ 1, %118 ], [ 1, %157 ], [ 1, %214 ], [ 1, %242 ], [ 1, %251 ], [ 1, %104 ], [ 1, %114 ], [ 1, %144 ], [ 1, %148 ], [ 1, %153 ]
  store i8 1, i8* %70, align 8
  %472 = load i8*, i8** %67, align 8
  %473 = icmp eq i8* %472, null
  %474 = ptrtoint i8* %472 to i64
  br i1 %473, label %494, label %475

475:                                              ; preds = %468
  %476 = bitcast i8** %63 to i64*
  %477 = load i64, i64* %476, align 8
  %478 = sub i64 %477, %474
  %479 = load i64, i64* %69, align 8
  %480 = add i64 %478, %479
  %481 = shl i64 %480, 3
  %482 = load i64, i64* %108, align 8
  %483 = sub i64 %481, %482
  %484 = load i64, i64* %71, align 8
  %485 = icmp ugt i64 %483, %484
  br i1 %485, label %486, label %494

486:                                              ; preds = %475
  %487 = load i8*, i8** %64, align 8
  %488 = getelementptr inbounds i8, i8* %487, i64 8
  %489 = ptrtoint i8* %488 to i64
  %490 = sub i64 %489, %474
  %491 = shl i64 %490, 3
  %492 = icmp ugt i64 %483, %491
  %493 = zext i1 %492 to i32
  br label %494

494:                                              ; preds = %486, %475, %468
  %495 = phi i32 [ 0, %468 ], [ 0, %475 ], [ %493, %486 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %62) #10
  %496 = icmp eq i32 %471, 0
  %497 = select i1 %496, i32 %495, i32 %470
  %498 = icmp eq i64 %469, 0
  br i1 %498, label %505, label %499

499:                                              ; preds = %494
  %500 = inttoptr i64 %469 to %"struct.jxl::jpeg::JPEGData"*
  %501 = inttoptr i64 %469 to void (%"struct.jxl::jpeg::JPEGData"*)***
  %502 = load void (%"struct.jxl::jpeg::JPEGData"*)**, void (%"struct.jxl::jpeg::JPEGData"*)*** %501, align 8
  %503 = getelementptr inbounds void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %502, i64 1
  %504 = load void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %503, align 8
  call void %504(%"struct.jxl::jpeg::JPEGData"* nonnull %500) #10
  br label %505

505:                                              ; preds = %37, %499, %494, %5
  %506 = phi i32 [ 1, %5 ], [ %497, %494 ], [ %497, %499 ], [ 1, %37 ]
  ret i32 %506
}

declare i32 @JxlSignatureCheck(i8*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @_ZN3jxl7ReadICCEPNS_9BitReaderEPNS_11PaddedBytesEm(%"class.jxl::BitReader"*, %"class.jxl::PaddedBytes"*, i64) local_unnamed_addr #2

declare i32 @_ZN3jxl4jpeg18SetJPEGDataFromICCERKNS_11PaddedBytesEPNS0_8JPEGDataE(%"class.jxl::PaddedBytes"* dereferenceable(24), %"struct.jxl::jpeg::JPEGData"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3jxl10CodecInOut13CheckMetadataEv(%"class.jxl::CodecInOut"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 6, i32 0
  %3 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 6, i32 0, i32 3, i32 3
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %1
  %7 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.31, i64 0, i64 0), i32 162, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.32, i64 0, i64 0)) #10
  %8 = tail call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 6, i32 0, i32 7, i32 8, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %13, label %16

13:                                               ; preds = %9
  %14 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.31, i64 0, i64 0), i32 163, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.33, i64 0, i64 0)) #10
  %15 = tail call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

16:                                               ; preds = %9
  %17 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 7
  %18 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %17, i64 0, i32 0, i32 0, i32 0, i32 0
  %19 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %18, align 8
  %20 = icmp eq %"struct.jxl::jpeg::JPEGData"* %19, null
  br i1 %20, label %25, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %19, i64 0, i32 1
  %23 = load i32, i32* %22, align 8
  %24 = sext i32 %23 to i64
  br label %40

25:                                               ; preds = %16
  %26 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 7, i32 10, i32 0, i64 0, i32 0, i32 0
  %27 = load i32, i32* %26, align 8
  %28 = zext i32 %27 to i64
  %29 = icmp eq i32 %27, 0
  br i1 %29, label %30, label %40

30:                                               ; preds = %25
  %31 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 7, i32 12, i32 0, i32 0
  %32 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %31, align 8
  %33 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 7, i32 12, i32 0, i32 1
  %34 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %33, align 8
  %35 = icmp eq %"class.jxl::Plane"* %32, %34
  br i1 %35, label %44, label %36

36:                                               ; preds = %30
  %37 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %32, i64 0, i32 0, i32 0
  %38 = load i32, i32* %37, align 8
  %39 = zext i32 %38 to i64
  br label %40

40:                                               ; preds = %21, %25, %36
  %41 = phi i64 [ %24, %21 ], [ %39, %36 ], [ %28, %25 ]
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %44, label %43

43:                                               ; preds = %40
  tail call void @_ZNK3jxl11ImageBundle14VerifyMetadataEv(%"class.jxl::ImageBundle"* %17) #10
  br label %44

44:                                               ; preds = %30, %40, %43
  %45 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 7, i32 9
  %46 = load %"struct.jxl::ImageMetadata"*, %"struct.jxl::ImageMetadata"** %45, align 8
  %47 = icmp eq %"struct.jxl::ImageMetadata"* %46, %2
  br i1 %47, label %51, label %48

48:                                               ; preds = %44
  %49 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.31, i64 0, i64 0), i32 166, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.34, i64 0, i64 0)) #10
  %50 = tail call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

51:                                               ; preds = %44
  %52 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 8, i32 0, i32 0
  %53 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %52, align 8
  %54 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 8, i32 0, i32 1
  %55 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %54, align 8
  %56 = icmp eq %"class.jxl::ImageBundle"* %53, %55
  br i1 %56, label %59, label %60

57:                                               ; preds = %60
  %58 = icmp eq %"class.jxl::ImageBundle"* %65, %55
  br i1 %58, label %59, label %60

59:                                               ; preds = %57, %51
  ret void

60:                                               ; preds = %51, %57
  %61 = phi %"class.jxl::ImageBundle"* [ %65, %57 ], [ %53, %51 ]
  tail call void @_ZNK3jxl11ImageBundle14VerifyMetadataEv(%"class.jxl::ImageBundle"* %61) #10
  %62 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %61, i64 0, i32 9
  %63 = load %"struct.jxl::ImageMetadata"*, %"struct.jxl::ImageMetadata"** %62, align 8
  %64 = icmp eq %"struct.jxl::ImageMetadata"* %63, %2
  %65 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %61, i64 1
  br i1 %64, label %57, label %66

66:                                               ; preds = %60
  %67 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.31, i64 0, i64 0), i32 170, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.35, i64 0, i64 0)) #10
  %68 = tail call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"*) local_unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 3
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds i8, i8* %3, i64 8
  %5 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = icmp ult i64 %7, 56
  br i1 %8, label %9, label %24

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 0
  %11 = load i8*, i8** %5, align 8
  %12 = icmp ult i8* %11, %4
  br i1 %12, label %13, label %24

13:                                               ; preds = %9
  %14 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %14, i8** %5, align 8
  %15 = load i8, i8* %11, align 1
  %16 = zext i8 %15 to i64
  %17 = shl i64 %16, %7
  %18 = load i64, i64* %10, align 8
  %19 = or i64 %17, %18
  store i64 %19, i64* %10, align 8
  %20 = add nuw nsw i64 %7, 8
  store i64 %20, i64* %6, align 8
  %21 = icmp ult i64 %20, 56
  %22 = icmp ult i8* %14, %4
  %23 = and i1 %21, %22
  br i1 %23, label %33, label %24

24:                                               ; preds = %13, %9, %33, %44, %55, %66, %77, %88, %1
  %25 = phi i64 [ %7, %1 ], [ %7, %9 ], [ %20, %13 ], [ %40, %33 ], [ %51, %44 ], [ %62, %55 ], [ %73, %66 ], [ %84, %77 ], [ %95, %88 ]
  %26 = sub i64 63, %25
  %27 = lshr i64 %26, 3
  %28 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 5
  %29 = load i64, i64* %28, align 8
  %30 = add i64 %29, %27
  store i64 %30, i64* %28, align 8
  %31 = and i64 %26, -8
  %32 = add i64 %31, %25
  store i64 %32, i64* %6, align 8
  ret void

33:                                               ; preds = %13
  %34 = getelementptr inbounds i8, i8* %11, i64 2
  store i8* %34, i8** %5, align 8
  %35 = load i8, i8* %14, align 1
  %36 = zext i8 %35 to i64
  %37 = shl i64 %36, %20
  %38 = load i64, i64* %10, align 8
  %39 = or i64 %37, %38
  store i64 %39, i64* %10, align 8
  %40 = add nuw nsw i64 %7, 16
  store i64 %40, i64* %6, align 8
  %41 = icmp ult i64 %40, 56
  %42 = icmp ult i8* %34, %4
  %43 = and i1 %41, %42
  br i1 %43, label %44, label %24

44:                                               ; preds = %33
  %45 = getelementptr inbounds i8, i8* %11, i64 3
  store i8* %45, i8** %5, align 8
  %46 = load i8, i8* %34, align 1
  %47 = zext i8 %46 to i64
  %48 = shl i64 %47, %40
  %49 = load i64, i64* %10, align 8
  %50 = or i64 %48, %49
  store i64 %50, i64* %10, align 8
  %51 = add nuw nsw i64 %7, 24
  store i64 %51, i64* %6, align 8
  %52 = icmp ult i64 %51, 56
  %53 = icmp ult i8* %45, %4
  %54 = and i1 %52, %53
  br i1 %54, label %55, label %24

55:                                               ; preds = %44
  %56 = getelementptr inbounds i8, i8* %11, i64 4
  store i8* %56, i8** %5, align 8
  %57 = load i8, i8* %45, align 1
  %58 = zext i8 %57 to i64
  %59 = shl i64 %58, %51
  %60 = load i64, i64* %10, align 8
  %61 = or i64 %59, %60
  store i64 %61, i64* %10, align 8
  %62 = add nuw nsw i64 %7, 32
  store i64 %62, i64* %6, align 8
  %63 = icmp ult i64 %62, 56
  %64 = icmp ult i8* %56, %4
  %65 = and i1 %63, %64
  br i1 %65, label %66, label %24

66:                                               ; preds = %55
  %67 = getelementptr inbounds i8, i8* %11, i64 5
  store i8* %67, i8** %5, align 8
  %68 = load i8, i8* %56, align 1
  %69 = zext i8 %68 to i64
  %70 = shl i64 %69, %62
  %71 = load i64, i64* %10, align 8
  %72 = or i64 %70, %71
  store i64 %72, i64* %10, align 8
  %73 = add nuw nsw i64 %7, 40
  store i64 %73, i64* %6, align 8
  %74 = icmp ult i64 %73, 56
  %75 = icmp ult i8* %67, %4
  %76 = and i1 %74, %75
  br i1 %76, label %77, label %24

77:                                               ; preds = %66
  %78 = getelementptr inbounds i8, i8* %11, i64 6
  store i8* %78, i8** %5, align 8
  %79 = load i8, i8* %67, align 1
  %80 = zext i8 %79 to i64
  %81 = shl i64 %80, %73
  %82 = load i64, i64* %10, align 8
  %83 = or i64 %81, %82
  store i64 %83, i64* %10, align 8
  %84 = add nuw nsw i64 %7, 48
  store i64 %84, i64* %6, align 8
  %85 = icmp ult i64 %84, 56
  %86 = icmp ult i8* %78, %4
  %87 = and i1 %85, %86
  br i1 %87, label %88, label %24

88:                                               ; preds = %77
  %89 = getelementptr inbounds i8, i8* %11, i64 7
  store i8* %89, i8** %5, align 8
  %90 = load i8, i8* %78, align 1
  %91 = zext i8 %90 to i64
  %92 = shl i64 %91, %84
  %93 = load i64, i64* %10, align 8
  %94 = or i64 %92, %93
  store i64 %94, i64* %10, align 8
  %95 = add nuw nsw i64 %7, 56
  store i64 %95, i64* %6, align 8
  br label %24
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl17PassesSharedStateC2Ev(%"struct.jxl::PassesSharedState"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 1
  tail call void @_ZN3jxl11FrameHeaderC1EPKNS_13CodecMetadataE(%"struct.jxl::FrameHeader"* %2, %"struct.jxl::CodecMetadata"* null) #10
  %3 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 3
  %4 = bitcast %"class.jxl::AcStrategyImage"* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 32, i1 false) #10
  %5 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 4
  tail call void @_ZN3jxl15DequantMatricesC2Ev(%"class.jxl::DequantMatrices"* %5)
  %6 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 5
  tail call void @_ZN3jxl9QuantizerC1EPKNS_15DequantMatricesE(%"class.jxl::Quantizer"* %6, %"class.jxl::DequantMatrices"* %5) #10
  %7 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 6
  %8 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 8, i32 3
  %9 = bitcast %"class.jxl::Plane.131"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 144, i1 false)
  store i32 84, i32* %8, align 8
  %10 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 8, i32 4
  store float 0x3F88618620000000, float* %10, align 4
  %11 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 8, i32 5
  store float 0.000000e+00, float* %11, align 8
  %12 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 8, i32 6
  store float 1.000000e+00, float* %12, align 4
  %13 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 8, i32 7
  store i32 0, i32* %13, align 8
  %14 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 8, i32 8
  store i32 0, i32* %14, align 4
  %15 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 1, i32 1
  %16 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 2, i32 1
  %17 = bitcast %"class.std::__1::vector.133"* %15 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 76, i1 false) #10
  %18 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 13
  %19 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 14
  %20 = bitcast %"class.std::__1::vector.154"* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 208, i1 false)
  store %"class.jxl::Image3"* %18, %"class.jxl::Image3"** %19, align 8
  %21 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15
  %22 = bitcast %"struct.jxl::BlockCtxMap"* %21 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 96, i1 false) #10
  %23 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 2, i32 0, i32 2, i32 0, i32 0
  %24 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 2, i32 0, i32 0
  %25 = tail call i8* @_Znwm(i64 39) #11
  %26 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 2, i32 0, i32 1
  store i8* %25, i8** %24, align 8
  %27 = getelementptr inbounds i8, i8* %25, i64 39
  store i8* %27, i8** %23, align 8
  %28 = bitcast i8** %26 to i64*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %25, i8* align 16 getelementptr inbounds ([39 x i8], [39 x i8]* @_ZN3jxl11BlockCtxMap14kDefaultCtxMapE, i64 0, i64 0), i64 39, i1 false) #10
  %29 = ptrtoint i8* %27 to i64
  store i64 %29, i64* %28, align 8
  %30 = ptrtoint i8* %25 to i64
  br label %31

31:                                               ; preds = %31, %1
  %32 = phi i64 [ 1, %1 ], [ %49, %31 ]
  %33 = phi i64 [ %30, %1 ], [ %48, %31 ]
  %34 = getelementptr inbounds i8, i8* %25, i64 %32
  %35 = ptrtoint i8* %34 to i64
  %36 = inttoptr i64 %33 to i8*
  %37 = load i8, i8* %36, align 1
  %38 = load i8, i8* %34, align 1
  %39 = icmp ult i8 %37, %38
  %40 = select i1 %39, i64 %35, i64 %33
  %41 = add nuw nsw i64 %32, 1
  %42 = getelementptr inbounds i8, i8* %25, i64 %41
  %43 = ptrtoint i8* %42 to i64
  %44 = inttoptr i64 %40 to i8*
  %45 = load i8, i8* %44, align 1
  %46 = load i8, i8* %42, align 1
  %47 = icmp ult i8 %45, %46
  %48 = select i1 %47, i64 %43, i64 %40
  %49 = add nuw nsw i64 %32, 2
  %50 = icmp eq i64 %49, 39
  br i1 %50, label %51, label %31

51:                                               ; preds = %31
  %52 = inttoptr i64 %48 to i8*
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i64
  %55 = add nuw nsw i64 %54, 1
  %56 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 3
  store i64 %55, i64* %56, align 8
  %57 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 4
  store i64 1, i64* %57, align 8
  %58 = getelementptr %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 0
  %59 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 0, i32 0
  %60 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 0, i32 0, i32 1
  %61 = bitcast %"class.jxl::Image3"* %58 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %61, i8 0, i64 392, i1 false)
  store i32 1, i32* %60, align 8
  %62 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 0, i32 0, i32 3
  tail call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %62) #10
  %63 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 0, i32 0, i32 4, i32 0
  %64 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 0, i32 0, i32 8
  %65 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 0, i32 0, i32 11
  %66 = bitcast i32* %63 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %66, i8 0, i64 14, i1 false) #10
  %67 = bitcast %"class.std::__1::basic_string"* %64 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %67, i8 0, i64 128, i1 false) #10
  tail call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %65) #10
  %68 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 0, i32 0, i32 12
  %69 = bitcast %"class.std::__1::vector.85"* %68 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %69, i8 0, i64 32, i1 false) #10
  %70 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 0, i32 1
  store %"class.jxl::ImageBundle"* %59, %"class.jxl::ImageBundle"** %70, align 8
  %71 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 0, i32 2
  store i8 0, i8* %71, align 8
  %72 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 1
  %73 = getelementptr inbounds %struct.anon.175, %struct.anon.175* %72, i64 0, i32 0
  %74 = bitcast %struct.anon.175* %72 to i64*
  store i64 0, i64* %74, align 8
  %75 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 1, i32 0, i32 1
  store i32 1, i32* %75, align 8
  %76 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 1, i32 0, i32 3
  tail call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %76) #10
  %77 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 1, i32 0, i32 4, i32 0
  %78 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 1, i32 0, i32 8
  %79 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 1, i32 0, i32 11
  %80 = bitcast i32* %77 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %80, i8 0, i64 14, i1 false) #10
  %81 = bitcast %"class.std::__1::basic_string"* %78 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 128, i1 false) #10
  tail call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %79) #10
  %82 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 1, i32 0, i32 12
  %83 = bitcast %"class.std::__1::vector.85"* %82 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %83, i8 0, i64 32, i1 false) #10
  %84 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 1, i32 1
  store %"class.jxl::ImageBundle"* %73, %"class.jxl::ImageBundle"** %84, align 8
  %85 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 1, i32 2
  store i8 0, i8* %85, align 8
  %86 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 2
  %87 = getelementptr inbounds %struct.anon.175, %struct.anon.175* %86, i64 0, i32 0
  %88 = bitcast %struct.anon.175* %86 to i64*
  store i64 0, i64* %88, align 8
  %89 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 2, i32 0, i32 1
  store i32 1, i32* %89, align 8
  %90 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 2, i32 0, i32 3
  tail call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %90) #10
  %91 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 2, i32 0, i32 4, i32 0
  %92 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 2, i32 0, i32 8
  %93 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 2, i32 0, i32 11
  %94 = bitcast i32* %91 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %94, i8 0, i64 14, i1 false) #10
  %95 = bitcast %"class.std::__1::basic_string"* %92 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 128, i1 false) #10
  tail call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %93) #10
  %96 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 2, i32 0, i32 12
  %97 = bitcast %"class.std::__1::vector.85"* %96 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %97, i8 0, i64 32, i1 false) #10
  %98 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 2, i32 1
  store %"class.jxl::ImageBundle"* %87, %"class.jxl::ImageBundle"** %98, align 8
  %99 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 2, i32 2
  store i8 0, i8* %99, align 8
  %100 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 3
  %101 = getelementptr inbounds %struct.anon.175, %struct.anon.175* %100, i64 0, i32 0
  %102 = bitcast %struct.anon.175* %100 to i64*
  store i64 0, i64* %102, align 8
  %103 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 3, i32 0, i32 1
  store i32 1, i32* %103, align 8
  %104 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 3, i32 0, i32 3
  tail call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %104) #10
  %105 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 3, i32 0, i32 4, i32 0
  %106 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 3, i32 0, i32 8
  %107 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 3, i32 0, i32 11
  %108 = bitcast i32* %105 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %108, i8 0, i64 14, i1 false) #10
  %109 = bitcast %"class.std::__1::basic_string"* %106 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %109, i8 0, i64 128, i1 false) #10
  tail call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %107) #10
  %110 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 3, i32 0, i32 12
  %111 = bitcast %"class.std::__1::vector.85"* %110 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %111, i8 0, i64 32, i1 false) #10
  %112 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 3, i32 1
  store %"class.jxl::ImageBundle"* %101, %"class.jxl::ImageBundle"** %112, align 8
  %113 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 3, i32 2
  store i8 0, i8* %113, align 8
  %114 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 18
  store i64 0, i64* %114, align 8
  ret void
}

declare void @_ZN3jxl11FrameHeaderC1EPKNS_13CodecMetadataE(%"struct.jxl::FrameHeader"*, %"struct.jxl::CodecMetadata"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl15DequantMatricesC2Ev(%"class.jxl::DequantMatrices"*) unnamed_addr #0 comdat align 2 {
  %2 = alloca [216 x i8], align 4
  %3 = alloca [112 x i8], align 4
  %4 = alloca [216 x i8], align 4
  %5 = alloca %"class.jxl::QuantEncoding", align 8
  %6 = alloca [51 x i64], align 16
  %7 = alloca %"class.jxl::QuantEncoding", align 8
  %8 = bitcast %"class.jxl::DequantMatrices"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #10
  %9 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 3, i64 0
  %10 = bitcast float* %9 to <4 x float>*
  store <4 x float> <float 0x3F30000000000000, float 0x3F60000000000000, float 3.906250e-03, float 4.096000e+03>, <4 x float>* %10, align 4
  %11 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 4, i64 1
  store float 5.120000e+02, float* %11, align 4
  %12 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 4, i64 2
  store float 2.560000e+02, float* %12, align 4
  %13 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 6
  %14 = bitcast %"class.std::__1::vector.104"* %13 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 24, i1 false) #10
  %15 = bitcast %"class.jxl::QuantEncoding"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 560, i8* nonnull %15) #10
  %16 = getelementptr inbounds [216 x i8], [216 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %16)
  %17 = getelementptr inbounds [112 x i8], [112 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %17)
  %18 = getelementptr inbounds [216 x i8], [216 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %18)
  %19 = getelementptr inbounds [216 x i8], [216 x i8]* %2, i64 0, i64 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %19, i8 0, i64 212, i1 false), !alias.scope !4, !noalias !7
  %20 = getelementptr inbounds [112 x i8], [112 x i8]* %3, i64 0, i64 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %20, i8 0, i64 108, i1 false), !alias.scope !4, !noalias !7
  %21 = getelementptr inbounds [216 x i8], [216 x i8]* %4, i64 0, i64 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %21, i8 0, i64 212, i1 false), !alias.scope !4, !noalias !7
  %22 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %5, i64 0, i32 0, i32 0
  store i32 0, i32* %22, align 8, !alias.scope !7
  %23 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %5, i64 0, i32 0, i32 1, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %23, i8* nonnull align 4 %16, i64 216, i1 false) #10
  %24 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %5, i64 0, i32 0, i32 2, i32 2, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %24, i8* nonnull align 4 %17, i64 112, i1 false) #10
  %25 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %5, i64 0, i32 0, i32 3, i32 1, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %25, i8* nonnull align 4 %18, i64 216, i1 false) #10
  %26 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %5, i64 0, i32 0, i32 5, i32 0
  store i8 0, i8* %26, align 8, !alias.scope !7
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %16)
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %17)
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %18)
  call void @_ZNSt3__16vectorIN3jxl13QuantEncodingENS_9allocatorIS2_EEE8__appendEmRKS2_(%"class.std::__1::vector.104"* %13, i64 17, %"class.jxl::QuantEncoding"* nonnull dereferenceable(560) %5) #10
  %27 = load i32, i32* %22, align 8
  %28 = icmp eq i32 %27, 7
  br i1 %28, label %29, label %45

29:                                               ; preds = %1
  %30 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %5, i64 0, i32 0, i32 3
  %31 = bitcast %union.anon.108* %30 to %"class.std::__1::vector.118"**
  %32 = load %"class.std::__1::vector.118"*, %"class.std::__1::vector.118"** %31, align 8
  %33 = icmp eq %"class.std::__1::vector.118"* %32, null
  br i1 %33, label %45, label %34

34:                                               ; preds = %29
  %35 = getelementptr inbounds %"class.std::__1::vector.118", %"class.std::__1::vector.118"* %32, i64 0, i32 0, i32 0
  %36 = load i32*, i32** %35, align 8
  %37 = icmp eq i32* %36, null
  br i1 %37, label %43, label %38

38:                                               ; preds = %34
  %39 = ptrtoint i32* %36 to i64
  %40 = getelementptr inbounds %"class.std::__1::vector.118", %"class.std::__1::vector.118"* %32, i64 0, i32 0, i32 1
  %41 = bitcast i32** %40 to i64*
  store i64 %39, i64* %41, align 8
  %42 = bitcast i32* %36 to i8*
  call void @_ZdlPv(i8* %42) #11
  br label %43

43:                                               ; preds = %38, %34
  %44 = bitcast %"class.std::__1::vector.118"* %32 to i8*
  call void @_ZdlPv(i8* %44) #11
  br label %45

45:                                               ; preds = %1, %29, %43
  call void @llvm.lifetime.end.p0i8(i64 560, i8* nonnull %15) #10
  %46 = bitcast [51 x i64]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 408, i8* nonnull %46) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %46, i8 -86, i64 408, i1 false)
  %47 = bitcast %"class.jxl::QuantEncoding"* %7 to i8*
  %48 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %7, i64 0, i32 0, i32 0
  %49 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %7, i64 0, i32 0, i32 1, i64 0
  %50 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %7, i64 0, i32 0, i32 2, i32 2, i64 0
  %51 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %7, i64 0, i32 0, i32 3, i32 1, i64 0
  %52 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %7, i64 0, i32 0, i32 5, i32 0
  %53 = getelementptr inbounds %"class.std::__1::vector.104", %"class.std::__1::vector.104"* %13, i64 0, i32 0, i32 0
  %54 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %7, i64 0, i32 0, i32 3
  %55 = bitcast %union.anon.108* %54 to %"class.std::__1::vector.118"**
  br label %56

56:                                               ; preds = %78, %45
  %57 = phi i64 [ 0, %45 ], [ %93, %78 ]
  %58 = phi i64 [ 0, %45 ], [ %92, %78 ]
  call void @llvm.lifetime.start.p0i8(i64 560, i8* nonnull %47) #10
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %16)
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %17)
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %18)
  call void @llvm.memset.p0i8.i64(i8* align 4 %19, i8 0, i64 212, i1 false), !alias.scope !10, !noalias !13
  call void @llvm.memset.p0i8.i64(i8* align 4 %20, i8 0, i64 108, i1 false), !alias.scope !10, !noalias !13
  call void @llvm.memset.p0i8.i64(i8* align 4 %21, i8 0, i64 212, i1 false), !alias.scope !10, !noalias !13
  store i32 0, i32* %48, align 8, !alias.scope !13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %49, i8* nonnull align 4 %16, i64 216, i1 false) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %50, i8* nonnull align 4 %17, i64 112, i1 false) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %51, i8* nonnull align 4 %18, i64 216, i1 false) #10
  store i8 0, i8* %52, align 8, !alias.scope !13
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %16)
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %17)
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %18)
  %59 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %53, align 8
  %60 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %59, i64 %57
  %61 = call dereferenceable(560) %"class.jxl::QuantEncoding"* @_ZN3jxl13QuantEncodingaSERKS0_(%"class.jxl::QuantEncoding"* %60, %"class.jxl::QuantEncoding"* nonnull dereferenceable(560) %7)
  %62 = load i32, i32* %48, align 8
  %63 = icmp eq i32 %62, 7
  br i1 %63, label %64, label %78

64:                                               ; preds = %56
  %65 = load %"class.std::__1::vector.118"*, %"class.std::__1::vector.118"** %55, align 8
  %66 = icmp eq %"class.std::__1::vector.118"* %65, null
  br i1 %66, label %78, label %67

67:                                               ; preds = %64
  %68 = getelementptr inbounds %"class.std::__1::vector.118", %"class.std::__1::vector.118"* %65, i64 0, i32 0, i32 0
  %69 = load i32*, i32** %68, align 8
  %70 = icmp eq i32* %69, null
  br i1 %70, label %76, label %71

71:                                               ; preds = %67
  %72 = ptrtoint i32* %69 to i64
  %73 = getelementptr inbounds %"class.std::__1::vector.118", %"class.std::__1::vector.118"* %65, i64 0, i32 0, i32 1
  %74 = bitcast i32** %73 to i64*
  store i64 %72, i64* %74, align 8
  %75 = bitcast i32* %69 to i8*
  call void @_ZdlPv(i8* %75) #11
  br label %76

76:                                               ; preds = %71, %67
  %77 = bitcast %"class.std::__1::vector.118"* %65 to i8*
  call void @_ZdlPv(i8* %77) #11
  br label %78

78:                                               ; preds = %56, %64, %76
  call void @llvm.lifetime.end.p0i8(i64 560, i8* nonnull %47) #10
  %79 = getelementptr inbounds [17 x i64], [17 x i64]* @_ZN3jxl15DequantMatrices14required_size_E.const, i64 0, i64 %57
  %80 = load i64, i64* %79, align 8
  %81 = shl i64 %80, 6
  %82 = mul nuw nsw i64 %57, 3
  %83 = getelementptr inbounds [51 x i64], [51 x i64]* %6, i64 0, i64 %82
  store i64 %58, i64* %83, align 8
  %84 = add i64 %81, %58
  %85 = add nuw nsw i64 %82, 1
  %86 = getelementptr inbounds [51 x i64], [51 x i64]* %6, i64 0, i64 %85
  store i64 %84, i64* %86, align 8
  %87 = shl i64 %80, 7
  %88 = add i64 %87, %58
  %89 = add nuw nsw i64 %82, 2
  %90 = getelementptr inbounds [51 x i64], [51 x i64]* %6, i64 0, i64 %89
  store i64 %88, i64* %90, align 8
  %91 = mul i64 %80, 192
  %92 = add i64 %91, %58
  %93 = add nuw nsw i64 %57, 1
  %94 = icmp eq i64 %93, 17
  br i1 %94, label %95, label %56

95:                                               ; preds = %78, %114
  %96 = phi i64 [ %123, %114 ], [ 0, %78 ]
  %97 = mul nuw nsw i64 %96, 3
  %98 = getelementptr %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 5, i64 %97
  %99 = bitcast i64* %98 to i8*
  %100 = getelementptr inbounds [27 x i64], [27 x i64]* @_ZN3jxl15DequantMatrices11kQuantTableE.const, i64 0, i64 %96
  %101 = load i64, i64* %100, align 16
  %102 = mul i64 %101, 3
  %103 = getelementptr [51 x i64], [51 x i64]* %6, i64 0, i64 %102
  %104 = bitcast i64* %103 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %99, i8* align 8 %104, i64 24, i1 false)
  %105 = or i64 %96, 1
  %106 = icmp eq i64 %105, 27
  br i1 %106, label %107, label %114

107:                                              ; preds = %95
  %108 = call i32 @_ZN3jxl15DequantMatrices7ComputeEv(%"class.jxl::DequantMatrices"* %0) #10
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %113, label %110

110:                                              ; preds = %107
  %111 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.23, i64 0, i64 0), i32 393, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24, i64 0, i64 0)) #10
  %112 = call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

113:                                              ; preds = %107
  call void @llvm.lifetime.end.p0i8(i64 408, i8* nonnull %46) #10
  ret void

114:                                              ; preds = %95
  %115 = mul nuw nsw i64 %105, 3
  %116 = getelementptr %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 5, i64 %115
  %117 = bitcast i64* %116 to i8*
  %118 = getelementptr inbounds [27 x i64], [27 x i64]* @_ZN3jxl15DequantMatrices11kQuantTableE.const, i64 0, i64 %105
  %119 = load i64, i64* %118, align 8
  %120 = mul i64 %119, 3
  %121 = getelementptr [51 x i64], [51 x i64]* %6, i64 0, i64 %120
  %122 = bitcast i64* %121 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %117, i8* align 8 %122, i64 24, i1 false)
  %123 = add nuw nsw i64 %96, 2
  br label %95
}

declare void @_ZN3jxl9QuantizerC1EPKNS_15DequantMatricesE(%"class.jxl::Quantizer"*, %"class.jxl::DequantMatrices"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(560) %"class.jxl::QuantEncoding"* @_ZN3jxl13QuantEncodingaSERKS0_(%"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"* dereferenceable(560)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 7
  br i1 %5, label %6, label %22

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3
  %8 = bitcast %union.anon.108* %7 to %"class.std::__1::vector.118"**
  %9 = load %"class.std::__1::vector.118"*, %"class.std::__1::vector.118"** %8, align 8
  %10 = icmp eq %"class.std::__1::vector.118"* %9, null
  br i1 %10, label %22, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.std::__1::vector.118", %"class.std::__1::vector.118"* %9, i64 0, i32 0, i32 0
  %13 = load i32*, i32** %12, align 8
  %14 = icmp eq i32* %13, null
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = ptrtoint i32* %13 to i64
  %17 = getelementptr inbounds %"class.std::__1::vector.118", %"class.std::__1::vector.118"* %9, i64 0, i32 0, i32 1
  %18 = bitcast i32** %17 to i64*
  store i64 %16, i64* %18, align 8
  %19 = bitcast i32* %13 to i8*
  tail call void @_ZdlPv(i8* %19) #11
  br label %20

20:                                               ; preds = %11, %15
  %21 = bitcast %"class.std::__1::vector.118"* %9 to i8*
  tail call void @_ZdlPv(i8* %21) #11
  br label %22

22:                                               ; preds = %6, %20, %2
  %23 = bitcast %"class.jxl::QuantEncoding"* %1 to i8*
  %24 = bitcast %"class.jxl::QuantEncoding"* %0 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %23, i64 553, i1 false)
  %25 = load i32, i32* %3, align 8
  %26 = icmp eq i32 %25, 7
  br i1 %26, label %27, label %75

27:                                               ; preds = %22
  %28 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3
  %29 = bitcast %union.anon.108* %28 to %"class.std::__1::vector.118"**
  %30 = load %"class.std::__1::vector.118"*, %"class.std::__1::vector.118"** %29, align 8
  %31 = icmp eq %"class.std::__1::vector.118"* %30, null
  br i1 %31, label %75, label %32

32:                                               ; preds = %27
  %33 = tail call i8* @_Znwm(i64 24) #11
  %34 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %1, i64 0, i32 0, i32 3
  %35 = bitcast %union.anon.108* %34 to %"class.std::__1::vector.118"**
  %36 = load %"class.std::__1::vector.118"*, %"class.std::__1::vector.118"** %35, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %33, i8 0, i64 24, i1 false) #10
  %37 = getelementptr inbounds %"class.std::__1::vector.118", %"class.std::__1::vector.118"* %36, i64 0, i32 0, i32 1
  %38 = bitcast i32** %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %"class.std::__1::vector.118"* %36 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = sub i64 %39, %41
  %43 = ashr exact i64 %42, 2
  %44 = icmp eq i64 %42, 0
  br i1 %44, label %73, label %45

45:                                               ; preds = %32
  %46 = icmp ugt i64 %43, 4611686018427387903
  br i1 %46, label %47, label %49

47:                                               ; preds = %45
  %48 = bitcast i8* %33 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %48) #12
  unreachable

49:                                               ; preds = %45
  %50 = tail call i8* @_Znwm(i64 %42) #11
  %51 = bitcast i8* %50 to i32*
  %52 = getelementptr inbounds i8, i8* %33, i64 8
  %53 = bitcast i8* %52 to i8**
  store i8* %50, i8** %53, align 8
  %54 = bitcast i8* %33 to i8**
  store i8* %50, i8** %54, align 8
  %55 = getelementptr inbounds i32, i32* %51, i64 %43
  %56 = getelementptr inbounds i8, i8* %33, i64 16
  %57 = bitcast i8* %56 to i32**
  store i32* %55, i32** %57, align 8
  %58 = getelementptr inbounds %"class.std::__1::vector.118", %"class.std::__1::vector.118"* %36, i64 0, i32 0, i32 0
  %59 = load i32*, i32** %58, align 8
  %60 = load i64, i64* %38, align 8
  %61 = bitcast i8* %52 to i64*
  %62 = ptrtoint i8* %50 to i64
  %63 = ptrtoint i32* %59 to i64
  %64 = sub i64 %60, %63
  %65 = icmp sgt i64 %64, 0
  br i1 %65, label %66, label %71

66:                                               ; preds = %49
  %67 = lshr exact i64 %64, 2
  %68 = bitcast i32* %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %50, i8* align 4 %68, i64 %64, i1 false) #10
  %69 = getelementptr inbounds i32, i32* %51, i64 %67
  %70 = ptrtoint i32* %69 to i64
  br label %71

71:                                               ; preds = %66, %49
  %72 = phi i64 [ %70, %66 ], [ %62, %49 ]
  store i64 %72, i64* %61, align 8
  br label %73

73:                                               ; preds = %32, %71
  %74 = bitcast %union.anon.108* %28 to i8**
  store i8* %33, i8** %74, align 8
  br label %75

75:                                               ; preds = %27, %73, %22
  ret %"class.jxl::QuantEncoding"* %0
}

declare i32 @_ZN3jxl15DequantMatrices7ComputeEv(%"class.jxl::DequantMatrices"*) local_unnamed_addr #2

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #2

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl13QuantEncodingENS_9allocatorIS2_EEE8__appendEmRKS2_(%"class.std::__1::vector.104"*, i64, %"class.jxl::QuantEncoding"* dereferenceable(560)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.std::__1::vector.104", %"class.std::__1::vector.104"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %5 = bitcast %"class.jxl::QuantEncoding"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::vector.104", %"class.std::__1::vector.104"* %0, i64 0, i32 0, i32 1
  %8 = bitcast %"class.jxl::QuantEncoding"** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %6, %9
  %11 = sdiv exact i64 %10, 560
  %12 = icmp ult i64 %11, %1
  br i1 %12, label %80, label %13

13:                                               ; preds = %3
  %14 = inttoptr i64 %9 to %"class.jxl::QuantEncoding"*
  %15 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %14, i64 %1
  %16 = icmp eq i64 %1, 0
  br i1 %16, label %78, label %17

17:                                               ; preds = %13
  %18 = bitcast %"class.jxl::QuantEncoding"* %2 to i8*
  %19 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %2, i64 0, i32 0, i32 3
  %20 = bitcast %union.anon.108* %19 to %"class.std::__1::vector.118"**
  br label %23

21:                                               ; preds = %75
  %22 = ptrtoint %"class.jxl::QuantEncoding"* %15 to i64
  br label %78

23:                                               ; preds = %75, %17
  %24 = phi %"class.jxl::QuantEncoding"* [ %14, %17 ], [ %76, %75 ]
  %25 = bitcast %"class.jxl::QuantEncoding"* %24 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %18, i64 553, i1 false) #10
  %26 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %24, i64 0, i32 0, i32 0
  %27 = load i32, i32* %26, align 8
  %28 = icmp eq i32 %27, 7
  br i1 %28, label %29, label %75

29:                                               ; preds = %23
  %30 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %24, i64 0, i32 0, i32 3
  %31 = bitcast %union.anon.108* %30 to %"class.std::__1::vector.118"**
  %32 = load %"class.std::__1::vector.118"*, %"class.std::__1::vector.118"** %31, align 8
  %33 = icmp eq %"class.std::__1::vector.118"* %32, null
  br i1 %33, label %75, label %34

34:                                               ; preds = %29
  %35 = tail call i8* @_Znwm(i64 24) #11
  %36 = load %"class.std::__1::vector.118"*, %"class.std::__1::vector.118"** %20, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %35, i8 0, i64 24, i1 false) #10
  %37 = getelementptr inbounds %"class.std::__1::vector.118", %"class.std::__1::vector.118"* %36, i64 0, i32 0, i32 1
  %38 = bitcast i32** %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %"class.std::__1::vector.118"* %36 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = sub i64 %39, %41
  %43 = ashr exact i64 %42, 2
  %44 = icmp eq i64 %42, 0
  br i1 %44, label %73, label %45

45:                                               ; preds = %34
  %46 = icmp ugt i64 %43, 4611686018427387903
  br i1 %46, label %47, label %49

47:                                               ; preds = %45
  %48 = bitcast i8* %35 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %48) #12
  unreachable

49:                                               ; preds = %45
  %50 = tail call i8* @_Znwm(i64 %42) #11
  %51 = bitcast i8* %50 to i32*
  %52 = getelementptr inbounds i8, i8* %35, i64 8
  %53 = bitcast i8* %52 to i8**
  store i8* %50, i8** %53, align 8
  %54 = bitcast i8* %35 to i8**
  store i8* %50, i8** %54, align 8
  %55 = getelementptr inbounds i32, i32* %51, i64 %43
  %56 = getelementptr inbounds i8, i8* %35, i64 16
  %57 = bitcast i8* %56 to i32**
  store i32* %55, i32** %57, align 8
  %58 = getelementptr inbounds %"class.std::__1::vector.118", %"class.std::__1::vector.118"* %36, i64 0, i32 0, i32 0
  %59 = load i32*, i32** %58, align 8
  %60 = load i64, i64* %38, align 8
  %61 = bitcast i8* %52 to i64*
  %62 = ptrtoint i8* %50 to i64
  %63 = ptrtoint i32* %59 to i64
  %64 = sub i64 %60, %63
  %65 = icmp sgt i64 %64, 0
  br i1 %65, label %66, label %71

66:                                               ; preds = %49
  %67 = lshr exact i64 %64, 2
  %68 = bitcast i32* %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %50, i8* align 4 %68, i64 %64, i1 false) #10
  %69 = getelementptr inbounds i32, i32* %51, i64 %67
  %70 = ptrtoint i32* %69 to i64
  br label %71

71:                                               ; preds = %66, %49
  %72 = phi i64 [ %70, %66 ], [ %62, %49 ]
  store i64 %72, i64* %61, align 8
  br label %73

73:                                               ; preds = %71, %34
  %74 = bitcast %union.anon.108* %30 to i8**
  store i8* %35, i8** %74, align 8
  br label %75

75:                                               ; preds = %73, %29, %23
  %76 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %24, i64 1
  %77 = icmp eq %"class.jxl::QuantEncoding"* %76, %15
  br i1 %77, label %21, label %23

78:                                               ; preds = %13, %21
  %79 = phi i64 [ %22, %21 ], [ %9, %13 ]
  store i64 %79, i64* %8, align 8
  br label %229

80:                                               ; preds = %3
  %81 = bitcast %"class.std::__1::vector.104"* %0 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = sub i64 %9, %82
  %84 = sdiv exact i64 %83, 560
  %85 = add i64 %84, %1
  %86 = icmp ugt i64 %85, 32940614417338485
  br i1 %86, label %87, label %89

87:                                               ; preds = %80
  %88 = bitcast %"class.std::__1::vector.104"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %88) #12
  unreachable

89:                                               ; preds = %80
  %90 = sub i64 %6, %82
  %91 = sdiv exact i64 %90, 560
  %92 = icmp ult i64 %91, 16470307208669242
  br i1 %92, label %93, label %98

93:                                               ; preds = %89
  %94 = shl nsw i64 %91, 1
  %95 = icmp ult i64 %94, %85
  %96 = select i1 %95, i64 %85, i64 %94
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %103, label %98

98:                                               ; preds = %89, %93
  %99 = phi i64 [ %96, %93 ], [ 32940614417338485, %89 ]
  %100 = mul i64 %99, 560
  %101 = tail call i8* @_Znwm(i64 %100) #11
  %102 = bitcast i8* %101 to %"class.jxl::QuantEncoding"*
  br label %103

103:                                              ; preds = %98, %93
  %104 = phi i64 [ %99, %98 ], [ 0, %93 ]
  %105 = phi %"class.jxl::QuantEncoding"* [ %102, %98 ], [ null, %93 ]
  %106 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %105, i64 %84
  %107 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %105, i64 %104
  %108 = ptrtoint %"class.jxl::QuantEncoding"* %107 to i64
  %109 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %106, i64 %1
  %110 = bitcast %"class.jxl::QuantEncoding"* %2 to i8*
  %111 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %2, i64 0, i32 0, i32 3
  %112 = bitcast %union.anon.108* %111 to %"class.std::__1::vector.118"**
  br label %113

113:                                              ; preds = %165, %103
  %114 = phi %"class.jxl::QuantEncoding"* [ %106, %103 ], [ %166, %165 ]
  %115 = bitcast %"class.jxl::QuantEncoding"* %114 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %115, i8* align 8 %110, i64 553, i1 false) #10
  %116 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %114, i64 0, i32 0, i32 0
  %117 = load i32, i32* %116, align 8
  %118 = icmp eq i32 %117, 7
  br i1 %118, label %119, label %165

119:                                              ; preds = %113
  %120 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %114, i64 0, i32 0, i32 3
  %121 = bitcast %union.anon.108* %120 to %"class.std::__1::vector.118"**
  %122 = load %"class.std::__1::vector.118"*, %"class.std::__1::vector.118"** %121, align 8
  %123 = icmp eq %"class.std::__1::vector.118"* %122, null
  br i1 %123, label %165, label %124

124:                                              ; preds = %119
  %125 = tail call i8* @_Znwm(i64 24) #11
  %126 = load %"class.std::__1::vector.118"*, %"class.std::__1::vector.118"** %112, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %125, i8 0, i64 24, i1 false) #10
  %127 = getelementptr inbounds %"class.std::__1::vector.118", %"class.std::__1::vector.118"* %126, i64 0, i32 0, i32 1
  %128 = bitcast i32** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast %"class.std::__1::vector.118"* %126 to i64*
  %131 = load i64, i64* %130, align 8
  %132 = sub i64 %129, %131
  %133 = ashr exact i64 %132, 2
  %134 = icmp eq i64 %132, 0
  br i1 %134, label %163, label %135

135:                                              ; preds = %124
  %136 = icmp ugt i64 %133, 4611686018427387903
  br i1 %136, label %137, label %139

137:                                              ; preds = %135
  %138 = bitcast i8* %125 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %138) #12
  unreachable

139:                                              ; preds = %135
  %140 = tail call i8* @_Znwm(i64 %132) #11
  %141 = bitcast i8* %140 to i32*
  %142 = getelementptr inbounds i8, i8* %125, i64 8
  %143 = bitcast i8* %142 to i8**
  store i8* %140, i8** %143, align 8
  %144 = bitcast i8* %125 to i8**
  store i8* %140, i8** %144, align 8
  %145 = getelementptr inbounds i32, i32* %141, i64 %133
  %146 = getelementptr inbounds i8, i8* %125, i64 16
  %147 = bitcast i8* %146 to i32**
  store i32* %145, i32** %147, align 8
  %148 = getelementptr inbounds %"class.std::__1::vector.118", %"class.std::__1::vector.118"* %126, i64 0, i32 0, i32 0
  %149 = load i32*, i32** %148, align 8
  %150 = load i64, i64* %128, align 8
  %151 = bitcast i8* %142 to i64*
  %152 = ptrtoint i8* %140 to i64
  %153 = ptrtoint i32* %149 to i64
  %154 = sub i64 %150, %153
  %155 = icmp sgt i64 %154, 0
  br i1 %155, label %156, label %161

156:                                              ; preds = %139
  %157 = lshr exact i64 %154, 2
  %158 = bitcast i32* %149 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %140, i8* align 4 %158, i64 %154, i1 false) #10
  %159 = getelementptr inbounds i32, i32* %141, i64 %157
  %160 = ptrtoint i32* %159 to i64
  br label %161

161:                                              ; preds = %156, %139
  %162 = phi i64 [ %160, %156 ], [ %152, %139 ]
  store i64 %162, i64* %151, align 8
  br label %163

163:                                              ; preds = %161, %124
  %164 = bitcast %union.anon.108* %120 to i8**
  store i8* %125, i8** %164, align 8
  br label %165

165:                                              ; preds = %113, %119, %163
  %166 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %114, i64 1
  %167 = icmp eq %"class.jxl::QuantEncoding"* %109, %166
  br i1 %167, label %168, label %113

168:                                              ; preds = %165
  %169 = ptrtoint %"class.jxl::QuantEncoding"* %109 to i64
  %170 = getelementptr inbounds %"class.std::__1::vector.104", %"class.std::__1::vector.104"* %0, i64 0, i32 0, i32 0
  %171 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %170, align 8
  %172 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %7, align 8
  %173 = icmp eq %"class.jxl::QuantEncoding"* %172, %171
  br i1 %173, label %174, label %176

174:                                              ; preds = %168
  %175 = ptrtoint %"class.jxl::QuantEncoding"* %171 to i64
  br label %194

176:                                              ; preds = %168, %189
  %177 = phi %"class.jxl::QuantEncoding"* [ %179, %189 ], [ %106, %168 ]
  %178 = phi %"class.jxl::QuantEncoding"* [ %180, %189 ], [ %172, %168 ]
  %179 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %177, i64 -1
  %180 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %178, i64 -1
  %181 = bitcast %"class.jxl::QuantEncoding"* %179 to i8*
  %182 = bitcast %"class.jxl::QuantEncoding"* %180 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %181, i8* align 8 %182, i64 553, i1 false) #10
  %183 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %179, i64 0, i32 0, i32 0
  %184 = load i32, i32* %183, align 8
  %185 = icmp eq i32 %184, 7
  br i1 %185, label %186, label %189

186:                                              ; preds = %176
  %187 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %178, i64 -1, i32 0, i32 3
  %188 = bitcast %union.anon.108* %187 to %"class.std::__1::vector.118"**
  store %"class.std::__1::vector.118"* null, %"class.std::__1::vector.118"** %188, align 8
  br label %189

189:                                              ; preds = %186, %176
  %190 = icmp eq %"class.jxl::QuantEncoding"* %180, %171
  br i1 %190, label %191, label %176

191:                                              ; preds = %189
  %192 = load i64, i64* %81, align 8
  %193 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %7, align 8
  br label %194

194:                                              ; preds = %174, %191
  %195 = phi %"class.jxl::QuantEncoding"* [ %171, %174 ], [ %193, %191 ]
  %196 = phi %"class.jxl::QuantEncoding"* [ %106, %174 ], [ %179, %191 ]
  %197 = phi i64 [ %175, %174 ], [ %192, %191 ]
  %198 = ptrtoint %"class.jxl::QuantEncoding"* %196 to i64
  store i64 %198, i64* %81, align 8
  store i64 %169, i64* %8, align 8
  store i64 %108, i64* %5, align 8
  %199 = inttoptr i64 %197 to %"class.jxl::QuantEncoding"*
  %200 = icmp eq %"class.jxl::QuantEncoding"* %195, %199
  br i1 %200, label %225, label %201

201:                                              ; preds = %194, %223
  %202 = phi %"class.jxl::QuantEncoding"* [ %203, %223 ], [ %195, %194 ]
  %203 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %202, i64 -1
  %204 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %203, i64 0, i32 0, i32 0
  %205 = load i32, i32* %204, align 8
  %206 = icmp eq i32 %205, 7
  br i1 %206, label %207, label %223

207:                                              ; preds = %201
  %208 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %202, i64 -1, i32 0, i32 3
  %209 = bitcast %union.anon.108* %208 to %"class.std::__1::vector.118"**
  %210 = load %"class.std::__1::vector.118"*, %"class.std::__1::vector.118"** %209, align 8
  %211 = icmp eq %"class.std::__1::vector.118"* %210, null
  br i1 %211, label %223, label %212

212:                                              ; preds = %207
  %213 = getelementptr inbounds %"class.std::__1::vector.118", %"class.std::__1::vector.118"* %210, i64 0, i32 0, i32 0
  %214 = load i32*, i32** %213, align 8
  %215 = icmp eq i32* %214, null
  br i1 %215, label %221, label %216

216:                                              ; preds = %212
  %217 = ptrtoint i32* %214 to i64
  %218 = getelementptr inbounds %"class.std::__1::vector.118", %"class.std::__1::vector.118"* %210, i64 0, i32 0, i32 1
  %219 = bitcast i32** %218 to i64*
  store i64 %217, i64* %219, align 8
  %220 = bitcast i32* %214 to i8*
  tail call void @_ZdlPv(i8* %220) #11
  br label %221

221:                                              ; preds = %216, %212
  %222 = bitcast %"class.std::__1::vector.118"* %210 to i8*
  tail call void @_ZdlPv(i8* %222) #11
  br label %223

223:                                              ; preds = %221, %207, %201
  %224 = icmp eq %"class.jxl::QuantEncoding"* %203, %199
  br i1 %224, label %225, label %201

225:                                              ; preds = %223, %194
  %226 = icmp eq i64 %197, 0
  br i1 %226, label %229, label %227

227:                                              ; preds = %225
  %228 = inttoptr i64 %197 to i8*
  tail call void @_ZdlPv(i8* %228) #11
  br label %229

229:                                              ; preds = %227, %225, %78
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"*) unnamed_addr #2

declare void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__110__function16__policy_invokerIFvPKfmmmEE12__call_emptyEPKNS0_16__policy_storageES3_mmm(%"union.std::__1::__function::__policy_storage"*, float*, i64, i64, i64) #0 comdat align 2 {
  tail call void @_ZNSt3__125__throw_bad_function_callEv() #13
  unreachable
}

; Function Attrs: inlinehint noreturn nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__125__throw_bad_function_callEv() local_unnamed_addr #9 comdat {
  tail call void @abort() #12
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl8ACImageTIiEC2Emm(%"class.jxl::ACImageT"*, i64, i64) unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.jxl::Image3.267", align 8
  %5 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN3jxl8ACImageTIiEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1
  %7 = bitcast %"class.jxl::Image3.267"* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 96, i1 false) #10
  %8 = bitcast %"class.jxl::Image3.267"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %8) #10
  %9 = getelementptr inbounds %"class.jxl::Image3.267", %"class.jxl::Image3.267"* %4, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %9, i64 %1, i64 %2, i64 4) #10
  %10 = getelementptr inbounds %"class.jxl::Image3.267", %"class.jxl::Image3.267"* %4, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %10, i64 %1, i64 %2, i64 4) #10
  %11 = getelementptr inbounds %"class.jxl::Image3.267", %"class.jxl::Image3.267"* %4, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %11, i64 %1, i64 %2, i64 4) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* nonnull align 8 %8, i64 24, i1 false) #10
  %12 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 5
  %13 = getelementptr inbounds %"class.jxl::Image3.267", %"class.jxl::Image3.267"* %4, i64 0, i32 0, i64 0, i32 0, i32 5
  %14 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %13, i64 0, i32 0, i32 0, i32 0
  %15 = bitcast %"class.std::__1::unique_ptr"* %13 to i64*
  %16 = load i64, i64* %15, align 8
  store i8* null, i8** %14, align 8
  %17 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %12, i64 0, i32 0, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = bitcast %"class.std::__1::unique_ptr"* %12 to i64*
  store i64 %16, i64* %19, align 8
  %20 = icmp eq i8* %18, null
  br i1 %20, label %22, label %21

21:                                               ; preds = %3
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %18) #10
  br label %22

22:                                               ; preds = %21, %3
  %23 = getelementptr inbounds %"class.jxl::Image3.267", %"class.jxl::Image3.267"* %4, i64 0, i32 0, i64 1
  %24 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 1
  %25 = bitcast %"class.jxl::Plane.131"* %24 to i8*
  %26 = bitcast %"class.jxl::Plane.131"* %23 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %26, i64 24, i1 false) #10
  %27 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 1, i32 0, i32 5
  %28 = getelementptr inbounds %"class.jxl::Image3.267", %"class.jxl::Image3.267"* %4, i64 0, i32 0, i64 1, i32 0, i32 5
  %29 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %28, i64 0, i32 0, i32 0, i32 0
  %30 = bitcast %"class.std::__1::unique_ptr"* %28 to i64*
  %31 = load i64, i64* %30, align 8
  store i8* null, i8** %29, align 8
  %32 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %27, i64 0, i32 0, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = bitcast %"class.std::__1::unique_ptr"* %27 to i64*
  store i64 %31, i64* %34, align 8
  %35 = icmp eq i8* %33, null
  br i1 %35, label %37, label %36

36:                                               ; preds = %22
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %33) #10
  br label %37

37:                                               ; preds = %36, %22
  %38 = getelementptr inbounds %"class.jxl::Image3.267", %"class.jxl::Image3.267"* %4, i64 0, i32 0, i64 2
  %39 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 2
  %40 = bitcast %"class.jxl::Plane.131"* %39 to i8*
  %41 = bitcast %"class.jxl::Plane.131"* %38 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 24, i1 false) #10
  %42 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 2, i32 0, i32 5
  %43 = getelementptr inbounds %"class.jxl::Image3.267", %"class.jxl::Image3.267"* %4, i64 0, i32 0, i64 2, i32 0, i32 5
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %43, i64 0, i32 0, i32 0, i32 0
  %45 = bitcast %"class.std::__1::unique_ptr"* %43 to i64*
  %46 = load i64, i64* %45, align 8
  store i8* null, i8** %44, align 8
  %47 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %42, i64 0, i32 0, i32 0, i32 0
  %48 = load i8*, i8** %47, align 8
  %49 = bitcast %"class.std::__1::unique_ptr"* %42 to i64*
  store i64 %46, i64* %49, align 8
  %50 = icmp eq i8* %48, null
  br i1 %50, label %51, label %53

51:                                               ; preds = %37
  %52 = getelementptr inbounds %"class.jxl::Image3.267", %"class.jxl::Image3.267"* %4, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %52, align 8
  br label %59

53:                                               ; preds = %37
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %48) #10
  %54 = getelementptr inbounds %"class.jxl::Image3.267", %"class.jxl::Image3.267"* %4, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = getelementptr inbounds %"class.jxl::Image3.267", %"class.jxl::Image3.267"* %4, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %56, align 8
  %57 = icmp eq i8* %55, null
  br i1 %57, label %59, label %58

58:                                               ; preds = %53
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %55) #10
  br label %59

59:                                               ; preds = %51, %58, %53
  %60 = getelementptr inbounds %"class.jxl::Image3.267", %"class.jxl::Image3.267"* %4, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %61 = load i8*, i8** %60, align 8
  store i8* null, i8** %60, align 8
  %62 = icmp eq i8* %61, null
  br i1 %62, label %64, label %63

63:                                               ; preds = %59
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %61) #10
  br label %64

64:                                               ; preds = %63, %59
  %65 = getelementptr inbounds %"class.jxl::Image3.267", %"class.jxl::Image3.267"* %4, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  store i8* null, i8** %65, align 8
  %67 = icmp eq i8* %66, null
  br i1 %67, label %69, label %68

68:                                               ; preds = %64
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %66) #10
  br label %69

69:                                               ; preds = %64, %68
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %8) #10
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl8ACImageTIiED2Ev(%"class.jxl::ACImageT"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN3jxl8ACImageTIiEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  store i8* null, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %4) #10
  br label %7

7:                                                ; preds = %6, %1
  %8 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  store i8* null, i8** %8, align 8
  %10 = icmp eq i8* %9, null
  br i1 %10, label %12, label %11

11:                                               ; preds = %7
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %9) #10
  br label %12

12:                                               ; preds = %11, %7
  %13 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  store i8* null, i8** %13, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %17, label %16

16:                                               ; preds = %12
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %14) #10
  br label %17

17:                                               ; preds = %12, %16
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl8ACImageTIiED0Ev(%"class.jxl::ACImageT"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN3jxl8ACImageTIiEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  store i8* null, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %4) #10
  br label %7

7:                                                ; preds = %6, %1
  %8 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  store i8* null, i8** %8, align 8
  %10 = icmp eq i8* %9, null
  br i1 %10, label %12, label %11

11:                                               ; preds = %7
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %9) #10
  br label %12

12:                                               ; preds = %11, %7
  %13 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  store i8* null, i8** %13, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %17, label %16

16:                                               ; preds = %12
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %14) #10
  br label %17

17:                                               ; preds = %12, %16
  %18 = bitcast %"class.jxl::ACImageT"* %0 to i8*
  tail call void @_ZdlPv(i8* %18) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3jxl8ACImageTIiE4TypeEv(%"class.jxl::ACImageT"*) unnamed_addr #0 comdat align 2 {
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32* @_ZN3jxl8ACImageTIiE8PlaneRowEmmm(%"class.jxl::ACImageT"*, i64, i64, i64) unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 4
  %6 = load i64, i64* %5, align 8
  %7 = mul i64 %6, %2
  %8 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 %1, i32 0, i32 5, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = ptrtoint i8* %9 to i64
  %11 = and i64 %10, 63
  %12 = icmp eq i64 %11, 0
  tail call void @llvm.assume(i1 %12) #10
  %13 = getelementptr inbounds i8, i8* %9, i64 %7
  %14 = ptrtoint i8* %13 to i64
  %15 = and i64 %14, 63
  %16 = icmp eq i64 %15, 0
  tail call void @llvm.assume(i1 %16) #10
  %17 = bitcast i8* %13 to i32*
  %18 = getelementptr inbounds i32, i32* %17, i64 %3
  ret i32* %18
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32* @_ZNK3jxl8ACImageTIiE8PlaneRowEmmm(%"class.jxl::ACImageT"*, i64, i64, i64) unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 4
  %6 = load i64, i64* %5, align 8
  %7 = mul i64 %6, %2
  %8 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 %1, i32 0, i32 5, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = ptrtoint i8* %9 to i64
  %11 = and i64 %10, 63
  %12 = icmp eq i64 %11, 0
  tail call void @llvm.assume(i1 %12) #10
  %13 = getelementptr inbounds i8, i8* %9, i64 %7
  %14 = ptrtoint i8* %13 to i64
  %15 = and i64 %14, 63
  %16 = icmp eq i64 %15, 0
  tail call void @llvm.assume(i1 %16) #10
  %17 = bitcast i8* %13 to i32*
  %18 = getelementptr inbounds i32, i32* %17, i64 %3
  ret i32* %18
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK3jxl8ACImageTIiE12PixelsPerRowEv(%"class.jxl::ACImageT"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 4
  %3 = load i64, i64* %2, align 8
  %4 = lshr i64 %3, 2
  ret i64 %4
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl8ACImageTIiE8ZeroFillEv(%"class.jxl::ACImageT"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 1
  %3 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 4
  %4 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 0
  %5 = load i32, i32* %2, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %74, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %11

9:                                                ; preds = %11
  %10 = icmp eq i32 %27, 0
  br i1 %10, label %74, label %30

11:                                               ; preds = %11, %7
  %12 = phi i64 [ 0, %7 ], [ %26, %11 ]
  %13 = load i64, i64* %3, align 8
  %14 = mul i64 %13, %12
  %15 = load i8*, i8** %8, align 8
  %16 = ptrtoint i8* %15 to i64
  %17 = and i64 %16, 63
  %18 = icmp eq i64 %17, 0
  tail call void @llvm.assume(i1 %18) #10
  %19 = getelementptr inbounds i8, i8* %15, i64 %14
  %20 = ptrtoint i8* %19 to i64
  %21 = and i64 %20, 63
  %22 = icmp eq i64 %21, 0
  tail call void @llvm.assume(i1 %22) #10
  %23 = load i32, i32* %4, align 8
  %24 = zext i32 %23 to i64
  %25 = shl nuw nsw i64 %24, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 64 %19, i8 0, i64 %25, i1 false) #10
  %26 = add nuw nsw i64 %12, 1
  %27 = load i32, i32* %2, align 4
  %28 = zext i32 %27 to i64
  %29 = icmp ult i64 %26, %28
  br i1 %29, label %11, label %9

30:                                               ; preds = %9
  %31 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %32

32:                                               ; preds = %32, %30
  %33 = phi i64 [ 0, %30 ], [ %47, %32 ]
  %34 = load i64, i64* %3, align 8
  %35 = mul i64 %34, %33
  %36 = load i8*, i8** %31, align 8
  %37 = ptrtoint i8* %36 to i64
  %38 = and i64 %37, 63
  %39 = icmp eq i64 %38, 0
  tail call void @llvm.assume(i1 %39) #10
  %40 = getelementptr inbounds i8, i8* %36, i64 %35
  %41 = ptrtoint i8* %40 to i64
  %42 = and i64 %41, 63
  %43 = icmp eq i64 %42, 0
  tail call void @llvm.assume(i1 %43) #10
  %44 = load i32, i32* %4, align 8
  %45 = zext i32 %44 to i64
  %46 = shl nuw nsw i64 %45, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 64 %40, i8 0, i64 %46, i1 false) #10
  %47 = add nuw nsw i64 %33, 1
  %48 = load i32, i32* %2, align 4
  %49 = zext i32 %48 to i64
  %50 = icmp ult i64 %47, %49
  br i1 %50, label %32, label %51

51:                                               ; preds = %32
  %52 = icmp eq i32 %48, 0
  br i1 %52, label %74, label %53

53:                                               ; preds = %51
  %54 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %55

55:                                               ; preds = %55, %53
  %56 = phi i64 [ 0, %53 ], [ %70, %55 ]
  %57 = load i64, i64* %3, align 8
  %58 = mul i64 %57, %56
  %59 = load i8*, i8** %54, align 8
  %60 = ptrtoint i8* %59 to i64
  %61 = and i64 %60, 63
  %62 = icmp eq i64 %61, 0
  tail call void @llvm.assume(i1 %62) #10
  %63 = getelementptr inbounds i8, i8* %59, i64 %58
  %64 = ptrtoint i8* %63 to i64
  %65 = and i64 %64, 63
  %66 = icmp eq i64 %65, 0
  tail call void @llvm.assume(i1 %66) #10
  %67 = load i32, i32* %4, align 8
  %68 = zext i32 %67 to i64
  %69 = shl nuw nsw i64 %68, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 64 %63, i8 0, i64 %69, i1 false) #10
  %70 = add nuw nsw i64 %56, 1
  %71 = load i32, i32* %2, align 4
  %72 = zext i32 %71 to i64
  %73 = icmp ult i64 %70, %72
  br i1 %73, label %55, label %74

74:                                               ; preds = %55, %1, %9, %51
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl8ACImageTIiE13ZeroFillPlaneEm(%"class.jxl::ACImageT"*, i64) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 %1, i32 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %37, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 %1, i32 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %37, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 %1, i32 0, i32 5, i32 0, i32 0, i32 0
  %12 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 %1, i32 0, i32 4
  %13 = load i8*, i8** %11, align 8
  %14 = ptrtoint i8* %13 to i64
  %15 = and i64 %14, 63
  %16 = icmp eq i64 %15, 0
  tail call void @llvm.assume(i1 %16) #10
  %17 = zext i32 %4 to i64
  %18 = shl nuw nsw i64 %17, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 64 %13, i8 0, i64 %18, i1 false) #10
  %19 = load i32, i32* %7, align 4
  %20 = icmp ugt i32 %19, 1
  br i1 %20, label %21, label %37

21:                                               ; preds = %10, %21
  %22 = phi i64 [ %33, %21 ], [ 1, %10 ]
  %23 = load i32, i32* %3, align 8
  %24 = load i8*, i8** %11, align 8
  %25 = load i64, i64* %12, align 8
  %26 = mul i64 %25, %22
  %27 = getelementptr inbounds i8, i8* %24, i64 %26
  %28 = ptrtoint i8* %27 to i64
  %29 = and i64 %28, 63
  %30 = icmp eq i64 %29, 0
  tail call void @llvm.assume(i1 %30) #10
  %31 = zext i32 %23 to i64
  %32 = shl nuw nsw i64 %31, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 64 %27, i8 0, i64 %32, i1 false) #10
  %33 = add nuw nsw i64 %22, 1
  %34 = load i32, i32* %7, align 4
  %35 = zext i32 %34 to i64
  %36 = icmp ult i64 %33, %35
  br i1 %36, label %21, label %37

37:                                               ; preds = %21, %10, %2, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK3jxl8ACImageTIiE7IsEmptyEv(%"class.jxl::ACImageT"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br label %9

9:                                                ; preds = %5, %1
  %10 = phi i1 [ true, %1 ], [ %8, %5 ]
  ret i1 %10
}

declare void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"*, i64, i64, i64) unnamed_addr #2

declare void @_ZN3jxl12CacheAligned4FreeEPKv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @llvm.assume(i1) #10

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl17PassesSharedStateD2Ev(%"struct.jxl::PassesSharedState"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 3, i32 0
  tail call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* %2) #10
  %3 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 2, i32 0
  tail call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* %3) #10
  %4 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 1, i32 0
  tail call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* %4) #10
  %5 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 0, i32 0
  tail call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* %5) #10
  %6 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 3, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  store i8* null, i8** %6, align 8
  %8 = icmp eq i8* %7, null
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %7) #10
  br label %10

10:                                               ; preds = %9, %1
  %11 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 3, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  store i8* null, i8** %11, align 8
  %13 = icmp eq i8* %12, null
  br i1 %13, label %15, label %14

14:                                               ; preds = %10
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %12) #10
  br label %15

15:                                               ; preds = %14, %10
  %16 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 3, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  store i8* null, i8** %16, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %20, label %19

19:                                               ; preds = %15
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %17) #10
  br label %20

20:                                               ; preds = %15, %19
  %21 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 2, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  store i8* null, i8** %21, align 8
  %23 = icmp eq i8* %22, null
  br i1 %23, label %293, label %292

24:                                               ; preds = %333
  %25 = ptrtoint i8* %335 to i64
  %26 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 2, i32 0, i32 1
  %27 = bitcast i8** %26 to i64*
  store i64 %25, i64* %27, align 8
  tail call void @_ZdlPv(i8* nonnull %335) #11
  br label %28

28:                                               ; preds = %24, %333
  %29 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 1, i32 0, i32 0
  %30 = load i32*, i32** %29, align 8
  %31 = icmp eq i32* %30, null
  br i1 %31, label %37, label %32

32:                                               ; preds = %28
  %33 = ptrtoint i32* %30 to i64
  %34 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 1, i32 0, i32 1
  %35 = bitcast i32** %34 to i64*
  store i64 %33, i64* %35, align 8
  %36 = bitcast i32* %30 to i8*
  tail call void @_ZdlPv(i8* %36) #11
  br label %37

37:                                               ; preds = %32, %28
  %38 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 0, i64 2, i32 0, i32 0
  %39 = load i32*, i32** %38, align 8
  %40 = icmp eq i32* %39, null
  br i1 %40, label %46, label %41

41:                                               ; preds = %37
  %42 = ptrtoint i32* %39 to i64
  %43 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 0, i64 2, i32 0, i32 1
  %44 = bitcast i32** %43 to i64*
  store i64 %42, i64* %44, align 8
  %45 = bitcast i32* %39 to i8*
  tail call void @_ZdlPv(i8* %45) #11
  br label %46

46:                                               ; preds = %41, %37
  %47 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 0, i64 1, i32 0, i32 0
  %48 = load i32*, i32** %47, align 8
  %49 = icmp eq i32* %48, null
  br i1 %49, label %55, label %50

50:                                               ; preds = %46
  %51 = ptrtoint i32* %48 to i64
  %52 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 0, i64 1, i32 0, i32 1
  %53 = bitcast i32** %52 to i64*
  store i64 %51, i64* %53, align 8
  %54 = bitcast i32* %48 to i8*
  tail call void @_ZdlPv(i8* %54) #11
  br label %55

55:                                               ; preds = %50, %46
  %56 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 0, i64 0, i32 0, i32 0
  %57 = load i32*, i32** %56, align 8
  %58 = icmp eq i32* %57, null
  br i1 %58, label %64, label %59

59:                                               ; preds = %55
  %60 = ptrtoint i32* %57 to i64
  %61 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 0, i64 0, i32 0, i32 1
  %62 = bitcast i32** %61 to i64*
  store i64 %60, i64* %62, align 8
  %63 = bitcast i32* %57 to i8*
  tail call void @_ZdlPv(i8* %63) #11
  br label %64

64:                                               ; preds = %55, %59
  %65 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 13, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  store i8* null, i8** %65, align 8
  %67 = icmp eq i8* %66, null
  br i1 %67, label %69, label %68

68:                                               ; preds = %64
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %66) #10
  br label %69

69:                                               ; preds = %68, %64
  %70 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 13, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %71 = load i8*, i8** %70, align 8
  store i8* null, i8** %70, align 8
  %72 = icmp eq i8* %71, null
  br i1 %72, label %74, label %73

73:                                               ; preds = %69
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %71) #10
  br label %74

74:                                               ; preds = %73, %69
  %75 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 13, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %76 = load i8*, i8** %75, align 8
  store i8* null, i8** %75, align 8
  %77 = icmp eq i8* %76, null
  br i1 %77, label %79, label %78

78:                                               ; preds = %74
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %76) #10
  br label %79

79:                                               ; preds = %74, %78
  %80 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 12, i32 0, i32 5, i32 0, i32 0, i32 0
  %81 = load i8*, i8** %80, align 8
  store i8* null, i8** %80, align 8
  %82 = icmp eq i8* %81, null
  br i1 %82, label %84, label %83

83:                                               ; preds = %79
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %81) #10
  br label %84

84:                                               ; preds = %79, %83
  %85 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 11, i32 0, i32 0
  %86 = load i32*, i32** %85, align 8
  %87 = icmp eq i32* %86, null
  br i1 %87, label %93, label %88

88:                                               ; preds = %84
  %89 = ptrtoint i32* %86 to i64
  %90 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 11, i32 0, i32 1
  %91 = bitcast i32** %90 to i64*
  store i64 %89, i64* %91, align 8
  %92 = bitcast i32* %86 to i8*
  tail call void @_ZdlPv(i8* %92) #11
  br label %93

93:                                               ; preds = %84, %88
  %94 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 2, i32 2, i32 0, i32 0
  %95 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %94, align 8
  %96 = icmp eq %"struct.jxl::Spline::Point"* %95, null
  br i1 %96, label %102, label %97

97:                                               ; preds = %93
  %98 = ptrtoint %"struct.jxl::Spline::Point"* %95 to i64
  %99 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 2, i32 2, i32 0, i32 1
  %100 = bitcast %"struct.jxl::Spline::Point"** %99 to i64*
  store i64 %98, i64* %100, align 8
  %101 = bitcast %"struct.jxl::Spline::Point"* %95 to i8*
  tail call void @_ZdlPv(i8* %101) #11
  br label %102

102:                                              ; preds = %97, %93
  %103 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 2, i32 1
  %104 = getelementptr inbounds %"class.std::__1::vector.154", %"class.std::__1::vector.154"* %103, i64 0, i32 0, i32 0
  %105 = load %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"** %104, align 8
  %106 = icmp eq %"class.jxl::QuantizedSpline"* %105, null
  br i1 %106, label %130, label %107

107:                                              ; preds = %102
  %108 = bitcast %"class.jxl::QuantizedSpline"* %105 to i8*
  %109 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 2, i32 1, i32 0, i32 1
  %110 = load %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"** %109, align 8
  %111 = icmp eq %"class.jxl::QuantizedSpline"* %110, %105
  br i1 %111, label %128, label %112

112:                                              ; preds = %107, %123
  %113 = phi %"class.jxl::QuantizedSpline"* [ %114, %123 ], [ %110, %107 ]
  %114 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %113, i64 -1
  %115 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %114, i64 0, i32 0, i32 0, i32 0
  %116 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %115, align 8
  %117 = icmp eq %"struct.std::__1::pair"* %116, null
  br i1 %117, label %123, label %118

118:                                              ; preds = %112
  %119 = ptrtoint %"struct.std::__1::pair"* %116 to i64
  %120 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %113, i64 -1, i32 0, i32 0, i32 1
  %121 = bitcast %"struct.std::__1::pair"** %120 to i64*
  store i64 %119, i64* %121, align 8
  %122 = bitcast %"struct.std::__1::pair"* %116 to i8*
  tail call void @_ZdlPv(i8* %122) #11
  br label %123

123:                                              ; preds = %118, %112
  %124 = icmp eq %"class.jxl::QuantizedSpline"* %114, %105
  br i1 %124, label %125, label %112

125:                                              ; preds = %123
  %126 = bitcast %"class.std::__1::vector.154"* %103 to i8**
  %127 = load i8*, i8** %126, align 8
  br label %128

128:                                              ; preds = %125, %107
  %129 = phi i8* [ %127, %125 ], [ %108, %107 ]
  store %"class.jxl::QuantizedSpline"* %105, %"class.jxl::QuantizedSpline"** %109, align 8
  tail call void @_ZdlPv(i8* %129) #11
  br label %130

130:                                              ; preds = %102, %128
  %131 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 1, i32 3, i32 0, i32 0
  %132 = load i64*, i64** %131, align 8
  %133 = icmp eq i64* %132, null
  br i1 %133, label %139, label %134

134:                                              ; preds = %130
  %135 = ptrtoint i64* %132 to i64
  %136 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 1, i32 3, i32 0, i32 1
  %137 = bitcast i64** %136 to i64*
  store i64 %135, i64* %137, align 8
  %138 = bitcast i64* %132 to i8*
  tail call void @_ZdlPv(i8* %138) #11
  br label %139

139:                                              ; preds = %134, %130
  %140 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 1, i32 2, i32 0, i32 0
  %141 = load i64*, i64** %140, align 8
  %142 = icmp eq i64* %141, null
  br i1 %142, label %148, label %143

143:                                              ; preds = %139
  %144 = ptrtoint i64* %141 to i64
  %145 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 1, i32 2, i32 0, i32 1
  %146 = bitcast i64** %145 to i64*
  store i64 %144, i64* %146, align 8
  %147 = bitcast i64* %141 to i8*
  tail call void @_ZdlPv(i8* %147) #11
  br label %148

148:                                              ; preds = %143, %139
  %149 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 1, i32 1
  %150 = getelementptr inbounds %"class.std::__1::vector.133", %"class.std::__1::vector.133"* %149, i64 0, i32 0, i32 0
  %151 = load %"struct.jxl::PatchPosition"*, %"struct.jxl::PatchPosition"** %150, align 8
  %152 = icmp eq %"struct.jxl::PatchPosition"* %151, null
  br i1 %152, label %176, label %153

153:                                              ; preds = %148
  %154 = bitcast %"struct.jxl::PatchPosition"* %151 to i8*
  %155 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 1, i32 1, i32 0, i32 1
  %156 = load %"struct.jxl::PatchPosition"*, %"struct.jxl::PatchPosition"** %155, align 8
  %157 = icmp eq %"struct.jxl::PatchPosition"* %156, %151
  br i1 %157, label %174, label %158

158:                                              ; preds = %153, %169
  %159 = phi %"struct.jxl::PatchPosition"* [ %160, %169 ], [ %156, %153 ]
  %160 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %159, i64 -1
  %161 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %159, i64 -1, i32 2, i32 0, i32 0
  %162 = load %"struct.jxl::PatchBlending"*, %"struct.jxl::PatchBlending"** %161, align 8
  %163 = icmp eq %"struct.jxl::PatchBlending"* %162, null
  br i1 %163, label %169, label %164

164:                                              ; preds = %158
  %165 = ptrtoint %"struct.jxl::PatchBlending"* %162 to i64
  %166 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %159, i64 -1, i32 2, i32 0, i32 1
  %167 = bitcast %"struct.jxl::PatchBlending"** %166 to i64*
  store i64 %165, i64* %167, align 8
  %168 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %162, i64 0, i32 0
  tail call void @_ZdlPv(i8* %168) #11
  br label %169

169:                                              ; preds = %164, %158
  %170 = icmp eq %"struct.jxl::PatchPosition"* %160, %151
  br i1 %170, label %171, label %158

171:                                              ; preds = %169
  %172 = bitcast %"class.std::__1::vector.133"* %149 to i8**
  %173 = load i8*, i8** %172, align 8
  br label %174

174:                                              ; preds = %171, %153
  %175 = phi i8* [ %173, %171 ], [ %154, %153 ]
  store %"struct.jxl::PatchPosition"* %151, %"struct.jxl::PatchPosition"** %155, align 8
  tail call void @_ZdlPv(i8* %175) #11
  br label %176

176:                                              ; preds = %148, %174
  %177 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 8, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %178 = load i8*, i8** %177, align 8
  store i8* null, i8** %177, align 8
  %179 = icmp eq i8* %178, null
  br i1 %179, label %181, label %180

180:                                              ; preds = %176
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %178) #10
  br label %181

181:                                              ; preds = %180, %176
  %182 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 8, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %183 = load i8*, i8** %182, align 8
  store i8* null, i8** %182, align 8
  %184 = icmp eq i8* %183, null
  br i1 %184, label %186, label %185

185:                                              ; preds = %181
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %183) #10
  br label %186

186:                                              ; preds = %181, %185
  %187 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 7, i32 0, i32 5, i32 0, i32 0, i32 0
  %188 = load i8*, i8** %187, align 8
  store i8* null, i8** %187, align 8
  %189 = icmp eq i8* %188, null
  br i1 %189, label %191, label %190

190:                                              ; preds = %186
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %188) #10
  br label %191

191:                                              ; preds = %186, %190
  %192 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 6, i32 0, i32 5, i32 0, i32 0, i32 0
  %193 = load i8*, i8** %192, align 8
  store i8* null, i8** %192, align 8
  %194 = icmp eq i8* %193, null
  br i1 %194, label %196, label %195

195:                                              ; preds = %191
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %193) #10
  br label %196

196:                                              ; preds = %191, %195
  %197 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 4, i32 6
  %198 = getelementptr inbounds %"class.std::__1::vector.104", %"class.std::__1::vector.104"* %197, i64 0, i32 0, i32 0
  %199 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %198, align 8
  %200 = icmp eq %"class.jxl::QuantEncoding"* %199, null
  br i1 %200, label %235, label %201

201:                                              ; preds = %196
  %202 = bitcast %"class.jxl::QuantEncoding"* %199 to i8*
  %203 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 4, i32 6, i32 0, i32 1
  %204 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %203, align 8
  %205 = icmp eq %"class.jxl::QuantEncoding"* %204, %199
  br i1 %205, label %233, label %206

206:                                              ; preds = %201, %228
  %207 = phi %"class.jxl::QuantEncoding"* [ %208, %228 ], [ %204, %201 ]
  %208 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %207, i64 -1
  %209 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %208, i64 0, i32 0, i32 0
  %210 = load i32, i32* %209, align 8
  %211 = icmp eq i32 %210, 7
  br i1 %211, label %212, label %228

212:                                              ; preds = %206
  %213 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %207, i64 -1, i32 0, i32 3
  %214 = bitcast %union.anon.108* %213 to %"class.std::__1::vector.118"**
  %215 = load %"class.std::__1::vector.118"*, %"class.std::__1::vector.118"** %214, align 8
  %216 = icmp eq %"class.std::__1::vector.118"* %215, null
  br i1 %216, label %228, label %217

217:                                              ; preds = %212
  %218 = getelementptr inbounds %"class.std::__1::vector.118", %"class.std::__1::vector.118"* %215, i64 0, i32 0, i32 0
  %219 = load i32*, i32** %218, align 8
  %220 = icmp eq i32* %219, null
  br i1 %220, label %226, label %221

221:                                              ; preds = %217
  %222 = ptrtoint i32* %219 to i64
  %223 = getelementptr inbounds %"class.std::__1::vector.118", %"class.std::__1::vector.118"* %215, i64 0, i32 0, i32 1
  %224 = bitcast i32** %223 to i64*
  store i64 %222, i64* %224, align 8
  %225 = bitcast i32* %219 to i8*
  tail call void @_ZdlPv(i8* %225) #11
  br label %226

226:                                              ; preds = %221, %217
  %227 = bitcast %"class.std::__1::vector.118"* %215 to i8*
  tail call void @_ZdlPv(i8* %227) #11
  br label %228

228:                                              ; preds = %226, %212, %206
  %229 = icmp eq %"class.jxl::QuantEncoding"* %208, %199
  br i1 %229, label %230, label %206

230:                                              ; preds = %228
  %231 = bitcast %"class.std::__1::vector.104"* %197 to i8**
  %232 = load i8*, i8** %231, align 8
  br label %233

233:                                              ; preds = %230, %201
  %234 = phi i8* [ %232, %230 ], [ %202, %201 ]
  store %"class.jxl::QuantEncoding"* %199, %"class.jxl::QuantEncoding"** %203, align 8
  tail call void @_ZdlPv(i8* %234) #11
  br label %235

235:                                              ; preds = %233, %196
  %236 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %237 = load float*, float** %236, align 8
  store float* null, float** %236, align 8
  %238 = icmp eq float* %237, null
  br i1 %238, label %245, label %239

239:                                              ; preds = %235
  %240 = bitcast float* %237 to i8*
  %241 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 4, i32 0, i32 0, i32 1, i32 0, i32 0
  %242 = load void (i8*, i8*)*, void (i8*, i8*)** %241, align 8
  %243 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 4, i32 0, i32 0, i32 1, i32 0, i32 1
  %244 = load i8*, i8** %243, align 8
  tail call void @_ZN3hwy16FreeAlignedBytesEPKvPFvPvS2_ES2_(i8* nonnull %240, void (i8*, i8*)* %242, i8* %244) #10
  br label %245

245:                                              ; preds = %235, %239
  %246 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 3, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %247 = load i8*, i8** %246, align 8
  store i8* null, i8** %246, align 8
  %248 = icmp eq i8* %247, null
  br i1 %248, label %250, label %249

249:                                              ; preds = %245
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %247) #10
  br label %250

250:                                              ; preds = %245, %249
  %251 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 1, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl11FrameHeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %251, align 8
  %252 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 1, i32 19
  %253 = getelementptr inbounds %"class.std::__1::vector.92", %"class.std::__1::vector.92"* %252, i64 0, i32 0, i32 0
  %254 = load %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"** %253, align 8
  %255 = icmp eq %"struct.jxl::BlendingInfo"* %254, null
  br i1 %255, label %273, label %256

256:                                              ; preds = %250
  %257 = bitcast %"struct.jxl::BlendingInfo"* %254 to i8*
  %258 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 1, i32 19, i32 0, i32 1
  %259 = load %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"** %258, align 8
  %260 = icmp eq %"struct.jxl::BlendingInfo"* %259, %254
  br i1 %260, label %271, label %261

261:                                              ; preds = %256, %261
  %262 = phi %"struct.jxl::BlendingInfo"* [ %263, %261 ], [ %259, %256 ]
  %263 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %262, i64 -1
  %264 = bitcast %"struct.jxl::BlendingInfo"* %263 to void (%"struct.jxl::BlendingInfo"*)***
  %265 = load void (%"struct.jxl::BlendingInfo"*)**, void (%"struct.jxl::BlendingInfo"*)*** %264, align 8
  %266 = load void (%"struct.jxl::BlendingInfo"*)*, void (%"struct.jxl::BlendingInfo"*)** %265, align 8
  tail call void %266(%"struct.jxl::BlendingInfo"* %263) #10
  %267 = icmp eq %"struct.jxl::BlendingInfo"* %263, %254
  br i1 %267, label %268, label %261

268:                                              ; preds = %261
  %269 = bitcast %"class.std::__1::vector.92"* %252 to i8**
  %270 = load i8*, i8** %269, align 8
  br label %271

271:                                              ; preds = %268, %256
  %272 = phi i8* [ %270, %268 ], [ %257, %256 ]
  store %"struct.jxl::BlendingInfo"* %254, %"struct.jxl::BlendingInfo"** %258, align 8
  tail call void @_ZdlPv(i8* %272) #11
  br label %273

273:                                              ; preds = %271, %250
  %274 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 1, i32 16, i32 0, i32 0
  %275 = load i32*, i32** %274, align 8
  %276 = icmp eq i32* %275, null
  br i1 %276, label %282, label %277

277:                                              ; preds = %273
  %278 = ptrtoint i32* %275 to i64
  %279 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 1, i32 16, i32 0, i32 1
  %280 = bitcast i32** %279 to i64*
  store i64 %278, i64* %280, align 8
  %281 = bitcast i32* %275 to i8*
  tail call void @_ZdlPv(i8* %281) #11
  br label %282

282:                                              ; preds = %277, %273
  %283 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 1, i32 11
  %284 = bitcast %"class.std::__1::basic_string"* %283 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %285 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %284, i64 0, i32 1, i32 0
  %286 = load i8, i8* %285, align 1
  %287 = icmp slt i8 %286, 0
  br i1 %287, label %288, label %291

288:                                              ; preds = %282
  %289 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %283, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %290 = load i8*, i8** %289, align 8
  tail call void @_ZdlPv(i8* %290) #11
  br label %291

291:                                              ; preds = %282, %288
  ret void

292:                                              ; preds = %20
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %22) #10
  br label %293

293:                                              ; preds = %292, %20
  %294 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 2, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %295 = load i8*, i8** %294, align 8
  store i8* null, i8** %294, align 8
  %296 = icmp eq i8* %295, null
  br i1 %296, label %298, label %297

297:                                              ; preds = %293
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %295) #10
  br label %298

298:                                              ; preds = %297, %293
  %299 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 2, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %300 = load i8*, i8** %299, align 8
  store i8* null, i8** %299, align 8
  %301 = icmp eq i8* %300, null
  br i1 %301, label %303, label %302

302:                                              ; preds = %298
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %300) #10
  br label %303

303:                                              ; preds = %302, %298
  %304 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %305 = load i8*, i8** %304, align 8
  store i8* null, i8** %304, align 8
  %306 = icmp eq i8* %305, null
  br i1 %306, label %308, label %307

307:                                              ; preds = %303
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %305) #10
  br label %308

308:                                              ; preds = %307, %303
  %309 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %310 = load i8*, i8** %309, align 8
  store i8* null, i8** %309, align 8
  %311 = icmp eq i8* %310, null
  br i1 %311, label %313, label %312

312:                                              ; preds = %308
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %310) #10
  br label %313

313:                                              ; preds = %312, %308
  %314 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %315 = load i8*, i8** %314, align 8
  store i8* null, i8** %314, align 8
  %316 = icmp eq i8* %315, null
  br i1 %316, label %318, label %317

317:                                              ; preds = %313
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %315) #10
  br label %318

318:                                              ; preds = %317, %313
  %319 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %320 = load i8*, i8** %319, align 8
  store i8* null, i8** %319, align 8
  %321 = icmp eq i8* %320, null
  br i1 %321, label %323, label %322

322:                                              ; preds = %318
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %320) #10
  br label %323

323:                                              ; preds = %322, %318
  %324 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %325 = load i8*, i8** %324, align 8
  store i8* null, i8** %324, align 8
  %326 = icmp eq i8* %325, null
  br i1 %326, label %328, label %327

327:                                              ; preds = %323
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %325) #10
  br label %328

328:                                              ; preds = %327, %323
  %329 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %330 = load i8*, i8** %329, align 8
  store i8* null, i8** %329, align 8
  %331 = icmp eq i8* %330, null
  br i1 %331, label %333, label %332

332:                                              ; preds = %328
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %330) #10
  br label %333

333:                                              ; preds = %332, %328
  %334 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 2, i32 0, i32 0
  %335 = load i8*, i8** %334, align 8
  %336 = icmp eq i8* %335, null
  br i1 %336, label %28, label %24
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl6FieldsD2Ev(%"class.jxl::Fields"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__19allocatorIN3jxl7ANSCodeEE7destroyEPS2_(%"class.std::__1::allocator.203"*, %"struct.jxl::ANSCode"*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 3, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = icmp eq i32* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %2
  %7 = ptrtoint i32* %4 to i64
  %8 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 3, i32 0, i32 1
  %9 = bitcast i32** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast i32* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #11
  br label %11

11:                                               ; preds = %6, %2
  %12 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 2, i32 0, i32 0
  %13 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %12, align 8
  %14 = icmp eq %"struct.jxl::HybridUintConfig"* %13, null
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = ptrtoint %"struct.jxl::HybridUintConfig"* %13 to i64
  %17 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 2, i32 0, i32 1
  %18 = bitcast %"struct.jxl::HybridUintConfig"** %17 to i64*
  store i64 %16, i64* %18, align 8
  %19 = bitcast %"struct.jxl::HybridUintConfig"* %13 to i8*
  tail call void @_ZdlPv(i8* %19) #11
  br label %20

20:                                               ; preds = %15, %11
  %21 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 1
  %22 = getelementptr inbounds %"class.std::__1::vector.179", %"class.std::__1::vector.179"* %21, i64 0, i32 0, i32 0
  %23 = load %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"** %22, align 8
  %24 = icmp eq %"struct.jxl::HuffmanDecodingData"* %23, null
  br i1 %24, label %48, label %25

25:                                               ; preds = %20
  %26 = bitcast %"struct.jxl::HuffmanDecodingData"* %23 to i8*
  %27 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 1, i32 0, i32 1
  %28 = load %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"** %27, align 8
  %29 = icmp eq %"struct.jxl::HuffmanDecodingData"* %28, %23
  br i1 %29, label %46, label %30

30:                                               ; preds = %25, %41
  %31 = phi %"struct.jxl::HuffmanDecodingData"* [ %32, %41 ], [ %28, %25 ]
  %32 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %31, i64 -1
  %33 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %32, i64 0, i32 0, i32 0, i32 0
  %34 = load %"struct.jxl::HuffmanCode"*, %"struct.jxl::HuffmanCode"** %33, align 8
  %35 = icmp eq %"struct.jxl::HuffmanCode"* %34, null
  br i1 %35, label %41, label %36

36:                                               ; preds = %30
  %37 = ptrtoint %"struct.jxl::HuffmanCode"* %34 to i64
  %38 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %31, i64 -1, i32 0, i32 0, i32 1
  %39 = bitcast %"struct.jxl::HuffmanCode"** %38 to i64*
  store i64 %37, i64* %39, align 8
  %40 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %34, i64 0, i32 0
  tail call void @_ZdlPv(i8* %40) #11
  br label %41

41:                                               ; preds = %36, %30
  %42 = icmp eq %"struct.jxl::HuffmanDecodingData"* %32, %23
  br i1 %42, label %43, label %30

43:                                               ; preds = %41
  %44 = bitcast %"class.std::__1::vector.179"* %21 to i8**
  %45 = load i8*, i8** %44, align 8
  br label %46

46:                                               ; preds = %43, %25
  %47 = phi i8* [ %45, %43 ], [ %26, %25 ]
  store %"struct.jxl::HuffmanDecodingData"* %23, %"struct.jxl::HuffmanDecodingData"** %27, align 8
  tail call void @_ZdlPv(i8* %47) #11
  br label %48

48:                                               ; preds = %46, %20
  %49 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %50 = load i8*, i8** %49, align 8
  store i8* null, i8** %49, align 8
  %51 = icmp eq i8* %50, null
  br i1 %51, label %53, label %52

52:                                               ; preds = %48
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %50) #10
  br label %53

53:                                               ; preds = %48, %52
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12
  %3 = getelementptr inbounds %"class.std::__1::vector.85", %"class.std::__1::vector.85"* %2, i64 0, i32 0, i32 0
  %4 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %3, align 8
  %5 = icmp eq %"class.jxl::Plane"* %4, null
  br i1 %5, label %25, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.jxl::Plane"* %4 to i8*
  %8 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %9 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %8, align 8
  %10 = icmp eq %"class.jxl::Plane"* %9, %4
  br i1 %10, label %23, label %11

11:                                               ; preds = %6, %18
  %12 = phi %"class.jxl::Plane"* [ %13, %18 ], [ %9, %6 ]
  %13 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %12, i64 -1
  %14 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %12, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  store i8* null, i8** %14, align 8
  %16 = icmp eq i8* %15, null
  br i1 %16, label %18, label %17

17:                                               ; preds = %11
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %15) #10
  br label %18

18:                                               ; preds = %17, %11
  %19 = icmp eq %"class.jxl::Plane"* %13, %4
  br i1 %19, label %20, label %11

20:                                               ; preds = %18
  %21 = bitcast %"class.std::__1::vector.85"* %2 to i8**
  %22 = load i8*, i8** %21, align 8
  br label %23

23:                                               ; preds = %20, %6
  %24 = phi i8* [ %22, %20 ], [ %7, %6 ]
  store %"class.jxl::Plane"* %4, %"class.jxl::Plane"** %8, align 8
  tail call void @_ZdlPv(i8* %24) #11
  br label %25

25:                                               ; preds = %1, %23
  %26 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ColorEncodingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %26, align 8
  %27 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 2, i32 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  store i8* null, i8** %27, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %31, label %30

30:                                               ; preds = %25
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %28) #10
  br label %31

31:                                               ; preds = %25, %30
  %32 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  store i8* null, i8** %32, align 8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %36, label %35

35:                                               ; preds = %31
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %33) #10
  br label %36

36:                                               ; preds = %35, %31
  %37 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  store i8* null, i8** %37, align 8
  %39 = icmp eq i8* %38, null
  br i1 %39, label %41, label %40

40:                                               ; preds = %36
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %38) #10
  br label %41

41:                                               ; preds = %40, %36
  %42 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  store i8* null, i8** %42, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %46, label %45

45:                                               ; preds = %41
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %43) #10
  br label %46

46:                                               ; preds = %41, %45
  %47 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 8
  %48 = bitcast %"class.std::__1::basic_string"* %47 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %49 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %50 = load i8, i8* %49, align 1
  %51 = icmp slt i8 %50, 0
  br i1 %51, label %52, label %55

52:                                               ; preds = %46
  %53 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %47, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  tail call void @_ZdlPv(i8* %54) #11
  br label %55

55:                                               ; preds = %46, %52
  %56 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %57 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %56, align 8
  store %"struct.jxl::jpeg::JPEGData"* null, %"struct.jxl::jpeg::JPEGData"** %56, align 8
  %58 = icmp eq %"struct.jxl::jpeg::JPEGData"* %57, null
  br i1 %58, label %64, label %59

59:                                               ; preds = %55
  %60 = bitcast %"struct.jxl::jpeg::JPEGData"* %57 to void (%"struct.jxl::jpeg::JPEGData"*)***
  %61 = load void (%"struct.jxl::jpeg::JPEGData"*)**, void (%"struct.jxl::jpeg::JPEGData"*)*** %60, align 8
  %62 = getelementptr inbounds void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %61, i64 1
  %63 = load void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %62, align 8
  tail call void %63(%"struct.jxl::jpeg::JPEGData"* nonnull %57) #10
  br label %64

64:                                               ; preds = %55, %59
  ret void
}

declare void @_ZN3hwy16FreeAlignedBytesEPKvPFvPvS2_ES2_(i8*, void (i8*, i8*)*, i8*) local_unnamed_addr #2

declare i32 @_ZN3jxl14ReadSizeHeaderEPNS_9BitReaderEPNS_10SizeHeaderE(%"class.jxl::BitReader"*, %"class.jxl::SizeHeader"*) local_unnamed_addr #2

declare i32 @_ZN3jxl17ReadImageMetadataEPNS_9BitReaderEPNS_13ImageMetadataE(%"class.jxl::BitReader"*, %"struct.jxl::ImageMetadata"*) local_unnamed_addr #2

declare i32 @_ZN3jxl6Bundle4ReadEPNS_9BitReaderEPNS_6FieldsE(%"class.jxl::BitReader"*, %"class.jxl::Fields"*) local_unnamed_addr #2

declare i64 @_ZNK3jxl10SizeHeader5xsizeEv(%"class.jxl::SizeHeader"*) local_unnamed_addr #2

declare i32 @_ZN3jxl13ColorEncoding16SetFieldsFromICCEv(%"struct.jxl::ColorEncoding"*) local_unnamed_addr #2

declare void @_ZNK3jxl11ImageBundle14VerifyMetadataEv(%"class.jxl::ImageBundle"*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl11ImageBundleENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJPNS1_13ImageMetadataEEEEvDpOT_(%"class.std::__1::vector.253"*, %"struct.jxl::ImageMetadata"** dereferenceable(8)) local_unnamed_addr #3 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.253", %"class.std::__1::vector.253"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.jxl::ImageBundle"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.253"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 368
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 50127021939428129
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.253"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #12
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.253", %"class.std::__1::vector.253"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.jxl::ImageBundle"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = sdiv exact i64 %18, 368
  %20 = icmp ult i64 %19, 25063510969714064
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = shl nsw i64 %19, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 50127021939428129, %14 ]
  %28 = mul i64 %27, 368
  %29 = tail call i8* @_Znwm(i64 %28) #11
  %30 = bitcast i8* %29 to %"class.jxl::ImageBundle"*
  br label %31

31:                                               ; preds = %21, %26
  %32 = phi i64 [ %27, %26 ], [ 0, %21 ]
  %33 = phi %"class.jxl::ImageBundle"* [ %30, %26 ], [ null, %21 ]
  %34 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9
  %35 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %32
  %36 = ptrtoint %"class.jxl::ImageBundle"* %35 to i64
  %37 = bitcast %"struct.jxl::ImageMetadata"** %1 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = bitcast %"class.jxl::ImageBundle"* %34 to i64*
  store i64 0, i64* %39, align 8
  %40 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9, i32 1
  store i32 1, i32* %40, align 8
  %41 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9, i32 3
  tail call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %41) #10
  %42 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9, i32 4, i32 0
  %43 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9, i32 8
  %44 = bitcast %"class.std::__1::basic_string"* %43 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %44, i8 0, i64 24, i1 false) #10
  %45 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9, i32 9
  %46 = bitcast i32* %42 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %46, i8 0, i64 14, i1 false) #10
  %47 = bitcast %"struct.jxl::ImageMetadata"** %45 to i64*
  store i64 %38, i64* %47, align 8
  %48 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9, i32 10
  %49 = bitcast %"class.jxl::Image3"* %48 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %49, i8 0, i64 96, i1 false) #10
  %50 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9, i32 11
  tail call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %50) #10
  %51 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %33, i64 %9, i32 12
  %52 = bitcast %"class.std::__1::vector.85"* %51 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %52, i8 0, i64 32, i1 false) #10
  %53 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %34, i64 1
  %54 = ptrtoint %"class.jxl::ImageBundle"* %53 to i64
  %55 = getelementptr inbounds %"class.std::__1::vector.253", %"class.std::__1::vector.253"* %0, i64 0, i32 0, i32 0
  %56 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %55, align 8
  %57 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %3, align 8
  %58 = icmp eq %"class.jxl::ImageBundle"* %57, %56
  br i1 %58, label %59, label %61

59:                                               ; preds = %31
  %60 = ptrtoint %"class.jxl::ImageBundle"* %56 to i64
  br label %70

61:                                               ; preds = %31, %61
  %62 = phi %"class.jxl::ImageBundle"* [ %64, %61 ], [ %34, %31 ]
  %63 = phi %"class.jxl::ImageBundle"* [ %65, %61 ], [ %57, %31 ]
  %64 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %62, i64 -1
  %65 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %63, i64 -1
  tail call void @_ZN3jxl11ImageBundleC2EOS0_(%"class.jxl::ImageBundle"* %64, %"class.jxl::ImageBundle"* dereferenceable(368) %65) #10
  %66 = icmp eq %"class.jxl::ImageBundle"* %65, %56
  br i1 %66, label %67, label %61

67:                                               ; preds = %61
  %68 = load i64, i64* %6, align 8
  %69 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %3, align 8
  br label %70

70:                                               ; preds = %59, %67
  %71 = phi %"class.jxl::ImageBundle"* [ %56, %59 ], [ %69, %67 ]
  %72 = phi %"class.jxl::ImageBundle"* [ %34, %59 ], [ %64, %67 ]
  %73 = phi i64 [ %60, %59 ], [ %68, %67 ]
  %74 = ptrtoint %"class.jxl::ImageBundle"* %72 to i64
  store i64 %74, i64* %6, align 8
  store i64 %54, i64* %4, align 8
  store i64 %36, i64* %16, align 8
  %75 = inttoptr i64 %73 to %"class.jxl::ImageBundle"*
  %76 = icmp eq %"class.jxl::ImageBundle"* %71, %75
  br i1 %76, label %81, label %77

77:                                               ; preds = %70, %77
  %78 = phi %"class.jxl::ImageBundle"* [ %79, %77 ], [ %71, %70 ]
  %79 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %78, i64 -1
  tail call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* %79) #10
  %80 = icmp eq %"class.jxl::ImageBundle"* %79, %75
  br i1 %80, label %81, label %77

81:                                               ; preds = %77, %70
  %82 = icmp eq i64 %73, 0
  br i1 %82, label %85, label %83

83:                                               ; preds = %81
  %84 = inttoptr i64 %73 to i8*
  tail call void @_ZdlPv(i8* %84) #11
  br label %85

85:                                               ; preds = %81, %83
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11ImageBundleC2EOS0_(%"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"* dereferenceable(368)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = bitcast %"class.jxl::ImageBundle"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  store %"struct.jxl::jpeg::JPEGData"* null, %"struct.jxl::jpeg::JPEGData"** %3, align 8
  %6 = bitcast %"class.jxl::ImageBundle"* %0 to i64*
  store i64 %5, i64* %6, align 8
  %7 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 1
  %8 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 8
  store i32 %9, i32* %7, align 8
  %10 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 3, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl22YCbCrChromaSubsamplingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %10, align 8
  %11 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 3, i32 1
  %12 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 3, i32 1
  %13 = bitcast [3 x i32]* %11 to i8*
  %14 = bitcast [3 x i32]* %12 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 14, i1 false) #10
  %15 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 4
  %16 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 4
  %17 = bitcast %"struct.jxl::FrameOrigin"* %15 to i8*
  %18 = bitcast %"struct.jxl::FrameOrigin"* %16 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 8 %18, i64 14, i1 false)
  %19 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 8
  %20 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 8
  %21 = bitcast %"class.std::__1::basic_string"* %19 to i8*
  %22 = bitcast %"class.std::__1::basic_string"* %20 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 24, i1 false) #10
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 24, i1 false) #10
  %23 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 9
  %24 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 9
  %25 = bitcast %"struct.jxl::ImageMetadata"** %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"struct.jxl::ImageMetadata"** %23 to i64*
  store i64 %26, i64* %27, align 8
  %28 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10
  %29 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10
  %30 = bitcast %"class.jxl::Image3"* %28 to i8*
  %31 = bitcast %"class.jxl::Image3"* %29 to i8*
  %32 = getelementptr %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5
  %33 = bitcast %"class.std::__1::unique_ptr"* %32 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %33, i8 0, i64 72, i1 false) #10
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %30, i8* align 8 %31, i64 24, i1 false) #10
  %34 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5
  %35 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %34, i64 0, i32 0, i32 0, i32 0
  %36 = bitcast %"class.std::__1::unique_ptr"* %34 to i64*
  %37 = load i64, i64* %36, align 8
  store i8* null, i8** %35, align 8
  %38 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %32, i64 0, i32 0, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = bitcast %"class.std::__1::unique_ptr"* %32 to i64*
  store i64 %37, i64* %40, align 8
  %41 = icmp eq i8* %39, null
  br i1 %41, label %43, label %42

42:                                               ; preds = %2
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %39) #10
  br label %43

43:                                               ; preds = %42, %2
  %44 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 1
  %45 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1
  %46 = bitcast %"class.jxl::Plane"* %45 to i8*
  %47 = bitcast %"class.jxl::Plane"* %44 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %46, i8* align 8 %47, i64 24, i1 false) #10
  %48 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5
  %49 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5
  %50 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %49, i64 0, i32 0, i32 0, i32 0
  %51 = bitcast %"class.std::__1::unique_ptr"* %49 to i64*
  %52 = load i64, i64* %51, align 8
  store i8* null, i8** %50, align 8
  %53 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %48, i64 0, i32 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = bitcast %"class.std::__1::unique_ptr"* %48 to i64*
  store i64 %52, i64* %55, align 8
  %56 = icmp eq i8* %54, null
  br i1 %56, label %58, label %57

57:                                               ; preds = %43
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %54) #10
  br label %58

58:                                               ; preds = %57, %43
  %59 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 2
  %60 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2
  %61 = bitcast %"class.jxl::Plane"* %60 to i8*
  %62 = bitcast %"class.jxl::Plane"* %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %61, i8* align 8 %62, i64 24, i1 false) #10
  %63 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5
  %64 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5
  %65 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %64, i64 0, i32 0, i32 0, i32 0
  %66 = bitcast %"class.std::__1::unique_ptr"* %64 to i64*
  %67 = load i64, i64* %66, align 8
  store i8* null, i8** %65, align 8
  %68 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %63, i64 0, i32 0, i32 0, i32 0
  %69 = load i8*, i8** %68, align 8
  %70 = bitcast %"class.std::__1::unique_ptr"* %63 to i64*
  store i64 %67, i64* %70, align 8
  %71 = icmp eq i8* %69, null
  br i1 %71, label %73, label %72

72:                                               ; preds = %58
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %69) #10
  br label %73

73:                                               ; preds = %58, %72
  %74 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ColorEncodingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %74, align 8
  %75 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 1
  %76 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %75, i8* align 8 %76, i64 12, i1 false) #10
  %77 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 4, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl22CustomTransferFunctionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %77, align 8
  %78 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 4, i32 1
  %79 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 4, i32 1
  %80 = bitcast i32* %78 to i8*
  %81 = bitcast i32* %79 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %80, i8* align 8 %81, i64 16, i1 false) #10
  %82 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 5
  %83 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 5
  %84 = bitcast i32* %82 to i8*
  %85 = bitcast i32* %83 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %84, i8* align 8 %85, i64 6, i1 false) #10
  %86 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 8
  %87 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 0
  %88 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %86, i64 0, i32 0
  %89 = load i64, i64* %88, align 8
  store i64 %89, i64* %87, align 8
  %90 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 1
  %91 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 8, i32 1
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %90, align 8
  %93 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 2
  %94 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 8, i32 2
  %95 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %94, i64 0, i32 0, i32 0, i32 0
  %96 = bitcast %"class.std::__1::unique_ptr"* %94 to i64*
  %97 = load i64, i64* %96, align 8
  store i8* null, i8** %95, align 8
  %98 = bitcast %"class.std::__1::unique_ptr"* %93 to i64*
  store i64 %97, i64* %98, align 8
  %99 = bitcast %"class.jxl::PaddedBytes"* %86 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %99, i8 0, i64 16, i1 false) #10
  %100 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 9
  %101 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 9
  %102 = load i32, i32* %101, align 8
  store i32 %102, i32* %100, align 8
  %103 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 10, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8CustomxyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %103, align 8
  %104 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 10, i32 1
  %105 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 10, i32 1
  %106 = bitcast i32* %105 to i64*
  %107 = bitcast i32* %104 to i64*
  %108 = load i64, i64* %106, align 8
  store i64 %108, i64* %107, align 8
  %109 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 11, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8CustomxyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %109, align 8
  %110 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 11, i32 1
  %111 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 11, i32 1
  %112 = bitcast i32* %111 to i64*
  %113 = bitcast i32* %110 to i64*
  %114 = load i64, i64* %112, align 8
  store i64 %114, i64* %113, align 8
  %115 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 12, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8CustomxyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %115, align 8
  %116 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 12, i32 1
  %117 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 12, i32 1
  %118 = bitcast i32* %117 to i64*
  %119 = bitcast i32* %116 to i64*
  %120 = load i64, i64* %118, align 8
  store i64 %120, i64* %119, align 8
  %121 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 13, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8CustomxyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %121, align 8
  %122 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 13, i32 1
  %123 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 13, i32 1
  %124 = bitcast i32* %123 to i64*
  %125 = bitcast i32* %122 to i64*
  %126 = load i64, i64* %124, align 8
  store i64 %126, i64* %125, align 8
  %127 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12
  %128 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12
  %129 = bitcast %"class.std::__1::vector.85"* %127 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %129, i8 0, i64 24, i1 false) #10
  %130 = bitcast %"class.std::__1::vector.85"* %128 to i64*
  %131 = load i64, i64* %130, align 8
  %132 = bitcast %"class.std::__1::vector.85"* %127 to i64*
  store i64 %131, i64* %132, align 8
  %133 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12, i32 0, i32 1
  %134 = bitcast %"class.jxl::Plane"** %133 to i64*
  %135 = load i64, i64* %134, align 8
  %136 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %137 = bitcast %"class.jxl::Plane"** %136 to i64*
  store i64 %135, i64* %137, align 8
  %138 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12, i32 0, i32 2, i32 0, i32 0
  %139 = bitcast %"class.jxl::Plane"** %138 to i64*
  %140 = load i64, i64* %139, align 8
  %141 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 2, i32 0, i32 0
  %142 = bitcast %"class.jxl::Plane"** %141 to i64*
  store i64 %140, i64* %142, align 8
  %143 = bitcast %"class.std::__1::vector.85"* %128 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %143, i8 0, i64 24, i1 false) #10
  %144 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 13
  %145 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 13
  %146 = load i64, i64* %145, align 8
  store i64 %146, i64* %144, align 8
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl22YCbCrChromaSubsamplingD0Ev(%"struct.jxl::YCbCrChromaSubsampling"*) unnamed_addr #3 comdat align 2 {
  %2 = bitcast %"struct.jxl::YCbCrChromaSubsampling"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK3jxl22YCbCrChromaSubsampling4NameEv(%"struct.jxl::YCbCrChromaSubsampling"*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.38, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl22YCbCrChromaSubsampling11VisitFieldsEPNS_7VisitorE(%"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Visitor"* noalias) unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i32, i32*)***
  %4 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 1, i64 0
  %5 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %3, align 8
  %6 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %5, i64 5
  %7 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %6, align 8
  %8 = tail call i32 %7(%"class.jxl::Visitor"* %1, i64 2, i32 0, i32* %4) #10
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %17

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 1, i64 1
  %12 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %3, align 8
  %13 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %12, i64 5
  %14 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %13, align 8
  %15 = tail call i32 %14(%"class.jxl::Visitor"* %1, i64 2, i32 0, i32* %11) #10
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %19, label %17

17:                                               ; preds = %2, %10, %19, %26
  %18 = phi i32 [ 0, %26 ], [ %8, %2 ], [ %15, %10 ], [ %24, %19 ]
  ret i32 %18

19:                                               ; preds = %10
  %20 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 1, i64 2
  %21 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %3, align 8
  %22 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %21, i64 5
  %23 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %22, align 8
  %24 = tail call i32 %23(%"class.jxl::Visitor"* %1, i64 2, i32 0, i32* %20) #10
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %17

26:                                               ; preds = %19
  %27 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 2
  %28 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 3
  %29 = load i32, i32* %4, align 4
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE, i64 0, i64 %30
  %32 = load i8, i8* %31, align 1
  %33 = add nsw i64 %30, -1
  %34 = icmp ult i64 %33, 2
  %35 = select i1 %34, i8 %32, i8 0
  %36 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE, i64 0, i64 %30
  %37 = load i8, i8* %36, align 1
  %38 = or i64 %30, 2
  %39 = icmp eq i64 %38, 3
  %40 = select i1 %39, i8 %37, i8 0
  %41 = load i32, i32* %11, align 4
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE, i64 0, i64 %42
  %44 = load i8, i8* %43, align 1
  %45 = icmp ult i8 %35, %44
  %46 = select i1 %45, i8 %44, i8 %35
  %47 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE, i64 0, i64 %42
  %48 = load i8, i8* %47, align 1
  %49 = icmp ult i8 %40, %48
  %50 = select i1 %49, i8 %48, i8 %40
  %51 = load i32, i32* %20, align 4
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE, i64 0, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = icmp ult i8 %46, %54
  %56 = select i1 %55, i8 %54, i8 %46
  store i8 %56, i8* %27, align 4
  %57 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE, i64 0, i64 %52
  %58 = load i8, i8* %57, align 1
  %59 = icmp ult i8 %50, %58
  %60 = select i1 %59, i8 %58, i8 %50
  store i8 %60, i8* %28, align 1
  br label %17
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { inlinehint noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }
attributes #12 = { noreturn nounwind }
attributes #13 = { noreturn }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{!5}
!5 = distinct !{!5, !6, !"_ZN3jxl21QuantEncodingInternal7LibraryEh: argument 0"}
!6 = distinct !{!6, !"_ZN3jxl21QuantEncodingInternal7LibraryEh"}
!7 = !{!8}
!8 = distinct !{!8, !9, !"_ZN3jxl13QuantEncoding7LibraryEh: argument 0"}
!9 = distinct !{!9, !"_ZN3jxl13QuantEncoding7LibraryEh"}
!10 = !{!11}
!11 = distinct !{!11, !12, !"_ZN3jxl21QuantEncodingInternal7LibraryEh: argument 0"}
!12 = distinct !{!12, !"_ZN3jxl21QuantEncodingInternal7LibraryEh"}
!13 = !{!14}
!14 = distinct !{!14, !15, !"_ZN3jxl13QuantEncoding7LibraryEh: argument 0"}
!15 = distinct !{!15, !"_ZN3jxl13QuantEncoding7LibraryEh"}
