; ModuleID = '../../net/third_party/quiche/src/quic/core/quic_transmission_info.cc'
source_filename = "../../net/third_party/quiche/src/quic/core/quic_transmission_info.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.quic::QuicTransmissionInfo" = type { %"class.std::__1::vector", %"class.quic::QuicTime", i16, i8, i8, i8, i8, i8, i8, %"class.quic::QuicPacketNumber", %"class.quic::QuicPacketNumber" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.quic::QuicFrame"*, %"struct.quic::QuicFrame"*, %"class.std::__1::__compressed_pair.41" }
%"struct.quic::QuicFrame" = type { %union.anon }
%union.anon = type { %"struct.quic::QuicStreamFrame" }
%"struct.quic::QuicStreamFrame" = type { i8, i8, i16, i32, i8*, i64 }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { %"struct.quic::QuicFrame"* }
%"class.quic::QuicTime" = type { i64 }
%"class.quic::QuicPacketNumber" = type { i64 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.24 }
%union.anon.24 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.absl::AlphaNum" = type { %"class.absl::string_view", [32 x i8] }
%"class.absl::string_view" = type { i8*, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon.25 }
%struct.anon.25 = type { i8 }

$_ZN4absl6StrCatIJNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEA22_cS7_A14_cbA10_cN4quic15SentPacketStateEA25_cbS8_bA26_cS7_A18_cS7_A27_cS7_A2_cEEES7_RKNS_8AlphaNumESK_SK_SK_SK_DpRKT_ = comdat any

@.str = private unnamed_addr constant [13 x i8] c"{sent_time: \00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c", bytes_sent: \00", align 1
@.str.2 = private unnamed_addr constant [21 x i8] c", encryption_level: \00", align 1
@.str.3 = private unnamed_addr constant [22 x i8] c", transmission_type: \00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c", in_flight: \00", align 1
@.str.5 = private unnamed_addr constant [10 x i8] c", state: \00", align 1
@.str.6 = private unnamed_addr constant [25 x i8] c", has_crypto_handshake: \00", align 1
@.str.7 = private unnamed_addr constant [22 x i8] c", has_ack_frequency: \00", align 1
@.str.8 = private unnamed_addr constant [26 x i8] c", first_sent_after_loss: \00", align 1
@.str.9 = private unnamed_addr constant [18 x i8] c", largest_acked: \00", align 1
@.str.10 = private unnamed_addr constant [27 x i8] c", retransmittable_frames: \00", align 1
@.str.11 = private unnamed_addr constant [2 x i8] c"}\00", align 1

@_ZN4quic20QuicTransmissionInfoC1Ev = hidden unnamed_addr alias void (%"struct.quic::QuicTransmissionInfo"*), void (%"struct.quic::QuicTransmissionInfo"*)* @_ZN4quic20QuicTransmissionInfoC2Ev
@_ZN4quic20QuicTransmissionInfoC1ENS_15EncryptionLevelENS_16TransmissionTypeENS_8QuicTimeEtbb = hidden unnamed_addr alias void (%"struct.quic::QuicTransmissionInfo"*, i8, i8, i64, i16, i1, i1), void (%"struct.quic::QuicTransmissionInfo"*, i8, i8, i64, i16, i1, i1)* @_ZN4quic20QuicTransmissionInfoC2ENS_15EncryptionLevelENS_16TransmissionTypeENS_8QuicTimeEtbb
@_ZN4quic20QuicTransmissionInfoC1ERKS0_ = hidden unnamed_addr alias void (%"struct.quic::QuicTransmissionInfo"*, %"struct.quic::QuicTransmissionInfo"*), void (%"struct.quic::QuicTransmissionInfo"*, %"struct.quic::QuicTransmissionInfo"*)* @_ZN4quic20QuicTransmissionInfoC2ERKS0_
@_ZN4quic20QuicTransmissionInfoD1Ev = hidden unnamed_addr alias void (%"struct.quic::QuicTransmissionInfo"*), void (%"struct.quic::QuicTransmissionInfo"*)* @_ZN4quic20QuicTransmissionInfoD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic20QuicTransmissionInfoC2Ev(%"struct.quic::QuicTransmissionInfo"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.quic::QuicTransmissionInfo", %"struct.quic::QuicTransmissionInfo"* %0, i64 0, i32 9, i32 0
  %3 = bitcast %"struct.quic::QuicTransmissionInfo"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 40, i1 false)
  %4 = bitcast i64* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 -1, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic20QuicTransmissionInfoC2ENS_15EncryptionLevelENS_16TransmissionTypeENS_8QuicTimeEtbb(%"struct.quic::QuicTransmissionInfo"* nocapture, i8 signext, i8 signext, i64, i16 zeroext, i1 zeroext, i1 zeroext) unnamed_addr #0 align 2 {
  %8 = zext i1 %5 to i8
  %9 = zext i1 %6 to i8
  %10 = bitcast %"struct.quic::QuicTransmissionInfo"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 24, i1 false) #9
  %11 = getelementptr inbounds %"struct.quic::QuicTransmissionInfo", %"struct.quic::QuicTransmissionInfo"* %0, i64 0, i32 1, i32 0
  store i64 %3, i64* %11, align 8
  %12 = getelementptr inbounds %"struct.quic::QuicTransmissionInfo", %"struct.quic::QuicTransmissionInfo"* %0, i64 0, i32 2
  store i16 %4, i16* %12, align 8
  %13 = getelementptr inbounds %"struct.quic::QuicTransmissionInfo", %"struct.quic::QuicTransmissionInfo"* %0, i64 0, i32 3
  store i8 %1, i8* %13, align 2
  %14 = getelementptr inbounds %"struct.quic::QuicTransmissionInfo", %"struct.quic::QuicTransmissionInfo"* %0, i64 0, i32 4
  store i8 %2, i8* %14, align 1
  %15 = getelementptr inbounds %"struct.quic::QuicTransmissionInfo", %"struct.quic::QuicTransmissionInfo"* %0, i64 0, i32 5
  store i8 0, i8* %15, align 4
  %16 = getelementptr inbounds %"struct.quic::QuicTransmissionInfo", %"struct.quic::QuicTransmissionInfo"* %0, i64 0, i32 6
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds %"struct.quic::QuicTransmissionInfo", %"struct.quic::QuicTransmissionInfo"* %0, i64 0, i32 7
  store i8 %8, i8* %17, align 2
  %18 = getelementptr inbounds %"struct.quic::QuicTransmissionInfo", %"struct.quic::QuicTransmissionInfo"* %0, i64 0, i32 8
  store i8 %9, i8* %18, align 1
  %19 = getelementptr inbounds %"struct.quic::QuicTransmissionInfo", %"struct.quic::QuicTransmissionInfo"* %0, i64 0, i32 9, i32 0
  %20 = bitcast i64* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 -1, i64 16, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic20QuicTransmissionInfoC2ERKS0_(%"struct.quic::QuicTransmissionInfo"*, %"struct.quic::QuicTransmissionInfo"* nocapture readonly dereferenceable(56)) unnamed_addr #0 align 2 {
  %3 = bitcast %"struct.quic::QuicTransmissionInfo"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 24, i1 false) #9
  %4 = getelementptr inbounds %"struct.quic::QuicTransmissionInfo", %"struct.quic::QuicTransmissionInfo"* %1, i64 0, i32 0, i32 0, i32 1
  %5 = bitcast %"struct.quic::QuicFrame"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"struct.quic::QuicTransmissionInfo"* %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = sdiv exact i64 %9, 24
  %11 = icmp eq i64 %9, 0
  br i1 %11, label %39, label %12

12:                                               ; preds = %2
  %13 = icmp ugt i64 %10, 768614336404564650
  br i1 %13, label %14, label %16

14:                                               ; preds = %12
  %15 = bitcast %"struct.quic::QuicTransmissionInfo"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %15) #10
  unreachable

16:                                               ; preds = %12
  %17 = tail call i8* @_Znwm(i64 %9) #11
  %18 = bitcast i8* %17 to %"struct.quic::QuicFrame"*
  %19 = getelementptr inbounds %"struct.quic::QuicTransmissionInfo", %"struct.quic::QuicTransmissionInfo"* %0, i64 0, i32 0, i32 0, i32 1
  %20 = bitcast %"struct.quic::QuicFrame"** %19 to i8**
  store i8* %17, i8** %20, align 8
  %21 = bitcast %"struct.quic::QuicTransmissionInfo"* %0 to i8**
  store i8* %17, i8** %21, align 8
  %22 = getelementptr inbounds %"struct.quic::QuicFrame", %"struct.quic::QuicFrame"* %18, i64 %10
  %23 = getelementptr inbounds %"struct.quic::QuicTransmissionInfo", %"struct.quic::QuicTransmissionInfo"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  store %"struct.quic::QuicFrame"* %22, %"struct.quic::QuicFrame"** %23, align 8
  %24 = getelementptr inbounds %"struct.quic::QuicTransmissionInfo", %"struct.quic::QuicTransmissionInfo"* %1, i64 0, i32 0, i32 0, i32 0
  %25 = load %"struct.quic::QuicFrame"*, %"struct.quic::QuicFrame"** %24, align 8
  %26 = load i64, i64* %5, align 8
  %27 = bitcast %"struct.quic::QuicFrame"** %19 to i64*
  %28 = ptrtoint i8* %17 to i64
  %29 = ptrtoint %"struct.quic::QuicFrame"* %25 to i64
  %30 = sub i64 %26, %29
  %31 = icmp sgt i64 %30, 0
  br i1 %31, label %32, label %37

32:                                               ; preds = %16
  %33 = udiv exact i64 %30, 24
  %34 = getelementptr inbounds %"struct.quic::QuicFrame", %"struct.quic::QuicFrame"* %25, i64 0, i32 0, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %17, i8* align 8 %34, i64 %30, i1 false) #9
  %35 = getelementptr inbounds %"struct.quic::QuicFrame", %"struct.quic::QuicFrame"* %18, i64 %33
  %36 = ptrtoint %"struct.quic::QuicFrame"* %35 to i64
  br label %37

37:                                               ; preds = %32, %16
  %38 = phi i64 [ %36, %32 ], [ %28, %16 ]
  store i64 %38, i64* %27, align 8
  br label %39

39:                                               ; preds = %2, %37
  %40 = getelementptr inbounds %"struct.quic::QuicTransmissionInfo", %"struct.quic::QuicTransmissionInfo"* %0, i64 0, i32 1
  %41 = getelementptr inbounds %"struct.quic::QuicTransmissionInfo", %"struct.quic::QuicTransmissionInfo"* %1, i64 0, i32 1
  %42 = bitcast %"class.quic::QuicTime"* %40 to i8*
  %43 = bitcast %"class.quic::QuicTime"* %41 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %42, i8* align 8 %43, i64 32, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic20QuicTransmissionInfoD2Ev(%"struct.quic::QuicTransmissionInfo"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.quic::QuicTransmissionInfo", %"struct.quic::QuicTransmissionInfo"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load %"struct.quic::QuicFrame"*, %"struct.quic::QuicFrame"** %2, align 8
  %4 = icmp eq %"struct.quic::QuicFrame"* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint %"struct.quic::QuicFrame"* %3 to i64
  %7 = getelementptr inbounds %"struct.quic::QuicTransmissionInfo", %"struct.quic::QuicTransmissionInfo"* %0, i64 0, i32 0, i32 0, i32 1
  %8 = bitcast %"struct.quic::QuicFrame"** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = getelementptr inbounds %"struct.quic::QuicFrame", %"struct.quic::QuicFrame"* %3, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZdlPv(i8* %9) #11
  br label %10

10:                                               ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4quic20QuicTransmissionInfo11DebugStringEv(%"class.std::__1::basic_string"* noalias sret, %"struct.quic::QuicTransmissionInfo"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.absl::AlphaNum", align 8
  %4 = alloca %"class.absl::AlphaNum", align 8
  %5 = alloca %"class.absl::AlphaNum", align 8
  %6 = alloca %"class.absl::AlphaNum", align 8
  %7 = alloca %"class.absl::AlphaNum", align 8
  %8 = alloca %"class.std::__1::basic_string", align 8
  %9 = alloca %"class.std::__1::basic_string", align 8
  %10 = alloca %"class.std::__1::basic_string", align 8
  %11 = alloca %"class.std::__1::basic_string", align 8
  %12 = alloca %"class.std::__1::basic_string", align 8
  %13 = bitcast %"class.absl::AlphaNum"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %13) #9
  %14 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %3, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i8** %14, align 8
  %15 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %3, i64 0, i32 0, i32 1
  store i64 12, i64* %15, align 8
  %16 = bitcast %"class.absl::AlphaNum"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %16) #9
  %17 = getelementptr inbounds %"struct.quic::QuicTransmissionInfo", %"struct.quic::QuicTransmissionInfo"* %1, i64 0, i32 1, i32 0
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %4, i64 0, i32 1, i64 0
  %20 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferElPc(i64 %18, i8* %19) #9
  %21 = ptrtoint i8* %20 to i64
  %22 = ptrtoint i8* %19 to i64
  %23 = sub i64 %21, %22
  %24 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %4, i64 0, i32 0, i32 0
  store i8* %19, i8** %24, align 8
  %25 = icmp sgt i64 %23, -1
  br i1 %25, label %27, label %26, !prof !2

26:                                               ; preds = %2
  call void @llvm.trap() #9
  unreachable

27:                                               ; preds = %2
  %28 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %4, i64 0, i32 0, i32 1
  store i64 %23, i64* %28, align 8
  %29 = bitcast %"class.absl::AlphaNum"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %29) #9
  %30 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %5, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0), i8** %30, align 8
  %31 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %5, i64 0, i32 0, i32 1
  store i64 14, i64* %31, align 8
  %32 = bitcast %"class.absl::AlphaNum"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %32) #9
  %33 = getelementptr inbounds %"struct.quic::QuicTransmissionInfo", %"struct.quic::QuicTransmissionInfo"* %1, i64 0, i32 2
  %34 = load i16, i16* %33, align 8
  %35 = zext i16 %34 to i32
  %36 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %6, i64 0, i32 1, i64 0
  %37 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferEiPc(i32 %35, i8* %36) #9
  %38 = ptrtoint i8* %37 to i64
  %39 = ptrtoint i8* %36 to i64
  %40 = sub i64 %38, %39
  %41 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %6, i64 0, i32 0, i32 0
  store i8* %36, i8** %41, align 8
  %42 = icmp sgt i64 %40, -1
  br i1 %42, label %44, label %43, !prof !2

43:                                               ; preds = %27
  call void @llvm.trap() #9
  unreachable

44:                                               ; preds = %27
  %45 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %6, i64 0, i32 0, i32 1
  store i64 %40, i64* %45, align 8
  %46 = bitcast %"class.absl::AlphaNum"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %46) #9
  %47 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %7, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0), i8** %47, align 8
  %48 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %7, i64 0, i32 0, i32 1
  store i64 20, i64* %48, align 8
  %49 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %49) #9
  %50 = getelementptr inbounds %"struct.quic::QuicTransmissionInfo", %"struct.quic::QuicTransmissionInfo"* %1, i64 0, i32 3
  %51 = load i8, i8* %50, align 2
  call void @_ZN4quic23EncryptionLevelToStringENS_15EncryptionLevelE(%"class.std::__1::basic_string"* nonnull sret %8, i8 signext %51) #9
  %52 = bitcast %"class.std::__1::basic_string"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %52) #9
  %53 = getelementptr inbounds %"struct.quic::QuicTransmissionInfo", %"struct.quic::QuicTransmissionInfo"* %1, i64 0, i32 4
  %54 = load i8, i8* %53, align 1
  call void @_ZN4quic24TransmissionTypeToStringENS_16TransmissionTypeE(%"class.std::__1::basic_string"* nonnull sret %9, i8 signext %54) #9
  %55 = getelementptr inbounds %"struct.quic::QuicTransmissionInfo", %"struct.quic::QuicTransmissionInfo"* %1, i64 0, i32 5
  %56 = getelementptr inbounds %"struct.quic::QuicTransmissionInfo", %"struct.quic::QuicTransmissionInfo"* %1, i64 0, i32 6
  %57 = getelementptr inbounds %"struct.quic::QuicTransmissionInfo", %"struct.quic::QuicTransmissionInfo"* %1, i64 0, i32 7
  %58 = getelementptr inbounds %"struct.quic::QuicTransmissionInfo", %"struct.quic::QuicTransmissionInfo"* %1, i64 0, i32 8
  %59 = bitcast %"class.std::__1::basic_string"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %59) #9
  %60 = getelementptr inbounds %"struct.quic::QuicTransmissionInfo", %"struct.quic::QuicTransmissionInfo"* %1, i64 0, i32 9
  call void @_ZNK4quic16QuicPacketNumber8ToStringEv(%"class.std::__1::basic_string"* nonnull sret %10, %"class.quic::QuicPacketNumber"* %60) #9
  %61 = bitcast %"class.std::__1::basic_string"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %61) #9
  %62 = getelementptr inbounds %"struct.quic::QuicTransmissionInfo", %"struct.quic::QuicTransmissionInfo"* %1, i64 0, i32 10
  call void @_ZNK4quic16QuicPacketNumber8ToStringEv(%"class.std::__1::basic_string"* nonnull sret %11, %"class.quic::QuicPacketNumber"* %62) #9
  %63 = bitcast %"class.std::__1::basic_string"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %63) #9
  %64 = getelementptr inbounds %"struct.quic::QuicTransmissionInfo", %"struct.quic::QuicTransmissionInfo"* %1, i64 0, i32 0
  call void @_ZN4quic18QuicFramesToStringERKNSt3__16vectorINS_9QuicFrameENS0_9allocatorIS2_EEEE(%"class.std::__1::basic_string"* nonnull sret %12, %"class.std::__1::vector"* dereferenceable(24) %64) #9
  call void @_ZN4absl6StrCatIJNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEA22_cS7_A14_cbA10_cN4quic15SentPacketStateEA25_cbS8_bA26_cS7_A18_cS7_A27_cS7_A2_cEEES7_RKNS_8AlphaNumESK_SK_SK_SK_DpRKT_(%"class.std::__1::basic_string"* sret %0, %"class.absl::AlphaNum"* nonnull dereferenceable(48) %3, %"class.absl::AlphaNum"* nonnull dereferenceable(48) %4, %"class.absl::AlphaNum"* nonnull dereferenceable(48) %5, %"class.absl::AlphaNum"* nonnull dereferenceable(48) %6, %"class.absl::AlphaNum"* nonnull dereferenceable(48) %7, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %8, [22 x i8]* nonnull dereferenceable(22) @.str.3, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %9, [14 x i8]* nonnull dereferenceable(14) @.str.4, i8* dereferenceable(1) %55, [10 x i8]* nonnull dereferenceable(10) @.str.5, i8* dereferenceable(1) %56, [25 x i8]* nonnull dereferenceable(25) @.str.6, i8* dereferenceable(1) %57, [22 x i8]* nonnull dereferenceable(22) @.str.7, i8* dereferenceable(1) %58, [26 x i8]* nonnull dereferenceable(26) @.str.8, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %10, [18 x i8]* nonnull dereferenceable(18) @.str.9, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %11, [27 x i8]* nonnull dereferenceable(27) @.str.10, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %12, [2 x i8]* nonnull dereferenceable(2) @.str.11)
  %65 = bitcast %"class.std::__1::basic_string"* %12 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %66 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %65, i64 0, i32 1, i32 0
  %67 = load i8, i8* %66, align 1
  %68 = icmp slt i8 %67, 0
  br i1 %68, label %69, label %72

69:                                               ; preds = %44
  %70 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %71 = load i8*, i8** %70, align 8
  call void @_ZdlPv(i8* %71) #11
  br label %72

72:                                               ; preds = %44, %69
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %63) #9
  %73 = bitcast %"class.std::__1::basic_string"* %11 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %74 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %73, i64 0, i32 1, i32 0
  %75 = load i8, i8* %74, align 1
  %76 = icmp slt i8 %75, 0
  br i1 %76, label %77, label %80

77:                                               ; preds = %72
  %78 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %79 = load i8*, i8** %78, align 8
  call void @_ZdlPv(i8* %79) #11
  br label %80

80:                                               ; preds = %72, %77
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %61) #9
  %81 = bitcast %"class.std::__1::basic_string"* %10 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %82 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %81, i64 0, i32 1, i32 0
  %83 = load i8, i8* %82, align 1
  %84 = icmp slt i8 %83, 0
  br i1 %84, label %85, label %88

85:                                               ; preds = %80
  %86 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %87 = load i8*, i8** %86, align 8
  call void @_ZdlPv(i8* %87) #11
  br label %88

88:                                               ; preds = %80, %85
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %59) #9
  %89 = bitcast %"class.std::__1::basic_string"* %9 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %90 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %89, i64 0, i32 1, i32 0
  %91 = load i8, i8* %90, align 1
  %92 = icmp slt i8 %91, 0
  br i1 %92, label %93, label %96

93:                                               ; preds = %88
  %94 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %95 = load i8*, i8** %94, align 8
  call void @_ZdlPv(i8* %95) #11
  br label %96

96:                                               ; preds = %88, %93
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %52) #9
  %97 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %98 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %97, i64 0, i32 1, i32 0
  %99 = load i8, i8* %98, align 1
  %100 = icmp slt i8 %99, 0
  br i1 %100, label %101, label %104

101:                                              ; preds = %96
  %102 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %103 = load i8*, i8** %102, align 8
  call void @_ZdlPv(i8* %103) #11
  br label %104

104:                                              ; preds = %96, %101
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %49) #9
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %46) #9
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %32) #9
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %29) #9
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %16) #9
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %13) #9
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl6StrCatIJNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEA22_cS7_A14_cbA10_cN4quic15SentPacketStateEA25_cbS8_bA26_cS7_A18_cS7_A27_cS7_A2_cEEES7_RKNS_8AlphaNumESK_SK_SK_SK_DpRKT_(%"class.std::__1::basic_string"* noalias sret, %"class.absl::AlphaNum"* dereferenceable(48), %"class.absl::AlphaNum"* dereferenceable(48), %"class.absl::AlphaNum"* dereferenceable(48), %"class.absl::AlphaNum"* dereferenceable(48), %"class.absl::AlphaNum"* dereferenceable(48), %"class.std::__1::basic_string"* dereferenceable(24), [22 x i8]* dereferenceable(22), %"class.std::__1::basic_string"* dereferenceable(24), [14 x i8]* dereferenceable(14), i8* dereferenceable(1), [10 x i8]* dereferenceable(10), i8* dereferenceable(1), [25 x i8]* dereferenceable(25), i8* dereferenceable(1), [22 x i8]* dereferenceable(22), i8* dereferenceable(1), [26 x i8]* dereferenceable(26), %"class.std::__1::basic_string"* dereferenceable(24), [18 x i8]* dereferenceable(18), %"class.std::__1::basic_string"* dereferenceable(24), [27 x i8]* dereferenceable(27), %"class.std::__1::basic_string"* dereferenceable(24), [2 x i8]* dereferenceable(2)) local_unnamed_addr #2 comdat {
  %25 = alloca [23 x %"class.absl::string_view"], align 16
  %26 = alloca %"class.absl::AlphaNum", align 8
  %27 = alloca %"class.absl::AlphaNum", align 8
  %28 = alloca %"class.absl::AlphaNum", align 8
  %29 = alloca %"class.absl::AlphaNum", align 8
  %30 = bitcast [23 x %"class.absl::string_view"]* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 368, i8* nonnull %30) #9
  %31 = getelementptr inbounds [23 x %"class.absl::string_view"], [23 x %"class.absl::string_view"]* %25, i64 0, i64 0
  %32 = bitcast %"class.absl::AlphaNum"* %1 to <2 x i64>*
  %33 = load <2 x i64>, <2 x i64>* %32, align 8
  %34 = bitcast [23 x %"class.absl::string_view"]* %25 to <2 x i64>*
  store <2 x i64> %33, <2 x i64>* %34, align 16
  %35 = bitcast %"class.absl::AlphaNum"* %2 to <2 x i64>*
  %36 = load <2 x i64>, <2 x i64>* %35, align 8
  %37 = getelementptr inbounds [23 x %"class.absl::string_view"], [23 x %"class.absl::string_view"]* %25, i64 0, i64 1, i32 0
  %38 = bitcast i8** %37 to <2 x i64>*
  store <2 x i64> %36, <2 x i64>* %38, align 16
  %39 = bitcast %"class.absl::AlphaNum"* %3 to <2 x i64>*
  %40 = load <2 x i64>, <2 x i64>* %39, align 8
  %41 = getelementptr inbounds [23 x %"class.absl::string_view"], [23 x %"class.absl::string_view"]* %25, i64 0, i64 2, i32 0
  %42 = bitcast i8** %41 to <2 x i64>*
  store <2 x i64> %40, <2 x i64>* %42, align 16
  %43 = bitcast %"class.absl::AlphaNum"* %4 to <2 x i64>*
  %44 = load <2 x i64>, <2 x i64>* %43, align 8
  %45 = getelementptr inbounds [23 x %"class.absl::string_view"], [23 x %"class.absl::string_view"]* %25, i64 0, i64 3, i32 0
  %46 = bitcast i8** %45 to <2 x i64>*
  store <2 x i64> %44, <2 x i64>* %46, align 16
  %47 = bitcast %"class.absl::AlphaNum"* %5 to <2 x i64>*
  %48 = load <2 x i64>, <2 x i64>* %47, align 8
  %49 = getelementptr inbounds [23 x %"class.absl::string_view"], [23 x %"class.absl::string_view"]* %25, i64 0, i64 4, i32 0
  %50 = bitcast i8** %49 to <2 x i64>*
  store <2 x i64> %48, <2 x i64>* %50, align 16
  %51 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %52 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %51, i64 0, i32 1, i32 0
  %53 = load i8, i8* %52, align 1
  %54 = icmp slt i8 %53, 0
  br i1 %54, label %58, label %55

55:                                               ; preds = %24
  %56 = zext i8 %53 to i64
  %57 = ptrtoint %"class.std::__1::basic_string"* %6 to i64
  br label %65

58:                                               ; preds = %24
  %59 = bitcast %"class.std::__1::basic_string"* %6 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %62 = load i64, i64* %61, align 8
  %63 = icmp sgt i64 %62, -1
  br i1 %63, label %65, label %64, !prof !2

64:                                               ; preds = %58
  tail call void @llvm.trap() #9
  unreachable

65:                                               ; preds = %55, %58
  %66 = phi i64 [ %60, %58 ], [ %57, %55 ]
  %67 = phi i64 [ %62, %58 ], [ %56, %55 ]
  %68 = inttoptr i64 %66 to i8*
  %69 = getelementptr inbounds [23 x %"class.absl::string_view"], [23 x %"class.absl::string_view"]* %25, i64 0, i64 5, i32 0
  store i8* %68, i8** %69, align 16
  %70 = getelementptr inbounds [23 x %"class.absl::string_view"], [23 x %"class.absl::string_view"]* %25, i64 0, i64 5, i32 1
  store i64 %67, i64* %70, align 8
  %71 = getelementptr inbounds [22 x i8], [22 x i8]* %7, i64 0, i64 0
  %72 = icmp eq [22 x i8]* %7, null
  br i1 %72, label %77, label %73

73:                                               ; preds = %65
  %74 = tail call i64 @strlen(i8* nonnull %71) #9
  %75 = icmp sgt i64 %74, -1
  br i1 %75, label %77, label %76, !prof !2

76:                                               ; preds = %73
  tail call void @llvm.trap() #9
  unreachable

77:                                               ; preds = %65, %73
  %78 = phi i64 [ 0, %65 ], [ %74, %73 ]
  %79 = getelementptr inbounds [23 x %"class.absl::string_view"], [23 x %"class.absl::string_view"]* %25, i64 0, i64 6, i32 0
  store i8* %71, i8** %79, align 16
  %80 = getelementptr inbounds [23 x %"class.absl::string_view"], [23 x %"class.absl::string_view"]* %25, i64 0, i64 6, i32 1
  store i64 %78, i64* %80, align 8
  %81 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %82 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %81, i64 0, i32 1, i32 0
  %83 = load i8, i8* %82, align 1
  %84 = icmp slt i8 %83, 0
  br i1 %84, label %88, label %85

85:                                               ; preds = %77
  %86 = zext i8 %83 to i64
  %87 = ptrtoint %"class.std::__1::basic_string"* %8 to i64
  br label %95

88:                                               ; preds = %77
  %89 = bitcast %"class.std::__1::basic_string"* %8 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %92 = load i64, i64* %91, align 8
  %93 = icmp sgt i64 %92, -1
  br i1 %93, label %95, label %94, !prof !2

94:                                               ; preds = %88
  tail call void @llvm.trap() #9
  unreachable

95:                                               ; preds = %85, %88
  %96 = phi i64 [ %90, %88 ], [ %87, %85 ]
  %97 = phi i64 [ %92, %88 ], [ %86, %85 ]
  %98 = inttoptr i64 %96 to i8*
  %99 = getelementptr inbounds [23 x %"class.absl::string_view"], [23 x %"class.absl::string_view"]* %25, i64 0, i64 7, i32 0
  store i8* %98, i8** %99, align 16
  %100 = getelementptr inbounds [23 x %"class.absl::string_view"], [23 x %"class.absl::string_view"]* %25, i64 0, i64 7, i32 1
  store i64 %97, i64* %100, align 8
  %101 = getelementptr inbounds [14 x i8], [14 x i8]* %9, i64 0, i64 0
  %102 = icmp eq [14 x i8]* %9, null
  br i1 %102, label %107, label %103

103:                                              ; preds = %95
  %104 = tail call i64 @strlen(i8* nonnull %101) #9
  %105 = icmp sgt i64 %104, -1
  br i1 %105, label %107, label %106, !prof !2

106:                                              ; preds = %103
  tail call void @llvm.trap() #9
  unreachable

107:                                              ; preds = %95, %103
  %108 = phi i64 [ 0, %95 ], [ %104, %103 ]
  %109 = getelementptr inbounds [23 x %"class.absl::string_view"], [23 x %"class.absl::string_view"]* %25, i64 0, i64 8, i32 0
  store i8* %101, i8** %109, align 16
  %110 = getelementptr inbounds [23 x %"class.absl::string_view"], [23 x %"class.absl::string_view"]* %25, i64 0, i64 8, i32 1
  store i64 %108, i64* %110, align 8
  %111 = bitcast %"class.absl::AlphaNum"* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %111) #9
  %112 = load i8, i8* %10, align 1, !range !3
  %113 = zext i8 %112 to i32
  %114 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %26, i64 0, i32 1, i64 0
  %115 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferEiPc(i32 %113, i8* %114) #9
  %116 = ptrtoint i8* %115 to i64
  %117 = ptrtoint i8* %114 to i64
  %118 = sub i64 %116, %117
  %119 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %26, i64 0, i32 0, i32 0
  store i8* %114, i8** %119, align 8
  %120 = icmp sgt i64 %118, -1
  br i1 %120, label %122, label %121, !prof !2

121:                                              ; preds = %107
  call void @llvm.trap() #9
  unreachable

122:                                              ; preds = %107
  %123 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %26, i64 0, i32 0, i32 1
  store i64 %118, i64* %123, align 8
  %124 = getelementptr inbounds [23 x %"class.absl::string_view"], [23 x %"class.absl::string_view"]* %25, i64 0, i64 9, i32 0
  store i8* %114, i8** %124, align 16
  %125 = getelementptr inbounds [23 x %"class.absl::string_view"], [23 x %"class.absl::string_view"]* %25, i64 0, i64 9, i32 1
  store i64 %118, i64* %125, align 8
  %126 = getelementptr inbounds [10 x i8], [10 x i8]* %11, i64 0, i64 0
  %127 = icmp eq [10 x i8]* %11, null
  br i1 %127, label %132, label %128

128:                                              ; preds = %122
  %129 = call i64 @strlen(i8* nonnull %126) #9
  %130 = icmp sgt i64 %129, -1
  br i1 %130, label %132, label %131, !prof !2

131:                                              ; preds = %128
  call void @llvm.trap() #9
  unreachable

132:                                              ; preds = %122, %128
  %133 = phi i64 [ 0, %122 ], [ %129, %128 ]
  %134 = getelementptr inbounds [23 x %"class.absl::string_view"], [23 x %"class.absl::string_view"]* %25, i64 0, i64 10, i32 0
  store i8* %126, i8** %134, align 16
  %135 = getelementptr inbounds [23 x %"class.absl::string_view"], [23 x %"class.absl::string_view"]* %25, i64 0, i64 10, i32 1
  store i64 %133, i64* %135, align 8
  %136 = bitcast %"class.absl::AlphaNum"* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %136) #9
  %137 = load i8, i8* %12, align 1
  %138 = zext i8 %137 to i32
  %139 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %27, i64 0, i32 1, i64 0
  %140 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferEiPc(i32 %138, i8* %139) #9
  %141 = ptrtoint i8* %140 to i64
  %142 = ptrtoint i8* %139 to i64
  %143 = sub i64 %141, %142
  %144 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %27, i64 0, i32 0, i32 0
  store i8* %139, i8** %144, align 8
  %145 = icmp sgt i64 %143, -1
  br i1 %145, label %147, label %146, !prof !2

146:                                              ; preds = %132
  call void @llvm.trap() #9
  unreachable

147:                                              ; preds = %132
  %148 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %27, i64 0, i32 0, i32 1
  store i64 %143, i64* %148, align 8
  %149 = getelementptr inbounds [23 x %"class.absl::string_view"], [23 x %"class.absl::string_view"]* %25, i64 0, i64 11, i32 0
  store i8* %139, i8** %149, align 16
  %150 = getelementptr inbounds [23 x %"class.absl::string_view"], [23 x %"class.absl::string_view"]* %25, i64 0, i64 11, i32 1
  store i64 %143, i64* %150, align 8
  %151 = getelementptr inbounds [25 x i8], [25 x i8]* %13, i64 0, i64 0
  %152 = icmp eq [25 x i8]* %13, null
  br i1 %152, label %157, label %153

153:                                              ; preds = %147
  %154 = call i64 @strlen(i8* nonnull %151) #9
  %155 = icmp sgt i64 %154, -1
  br i1 %155, label %157, label %156, !prof !2

156:                                              ; preds = %153
  call void @llvm.trap() #9
  unreachable

157:                                              ; preds = %147, %153
  %158 = phi i64 [ 0, %147 ], [ %154, %153 ]
  %159 = getelementptr inbounds [23 x %"class.absl::string_view"], [23 x %"class.absl::string_view"]* %25, i64 0, i64 12, i32 0
  store i8* %151, i8** %159, align 16
  %160 = getelementptr inbounds [23 x %"class.absl::string_view"], [23 x %"class.absl::string_view"]* %25, i64 0, i64 12, i32 1
  store i64 %158, i64* %160, align 8
  %161 = bitcast %"class.absl::AlphaNum"* %28 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %161) #9
  %162 = load i8, i8* %14, align 1, !range !3
  %163 = zext i8 %162 to i32
  %164 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %28, i64 0, i32 1, i64 0
  %165 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferEiPc(i32 %163, i8* %164) #9
  %166 = ptrtoint i8* %165 to i64
  %167 = ptrtoint i8* %164 to i64
  %168 = sub i64 %166, %167
  %169 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %28, i64 0, i32 0, i32 0
  store i8* %164, i8** %169, align 8
  %170 = icmp sgt i64 %168, -1
  br i1 %170, label %172, label %171, !prof !2

171:                                              ; preds = %157
  call void @llvm.trap() #9
  unreachable

172:                                              ; preds = %157
  %173 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %28, i64 0, i32 0, i32 1
  store i64 %168, i64* %173, align 8
  %174 = getelementptr inbounds [23 x %"class.absl::string_view"], [23 x %"class.absl::string_view"]* %25, i64 0, i64 13, i32 0
  store i8* %164, i8** %174, align 16
  %175 = getelementptr inbounds [23 x %"class.absl::string_view"], [23 x %"class.absl::string_view"]* %25, i64 0, i64 13, i32 1
  store i64 %168, i64* %175, align 8
  %176 = getelementptr inbounds [22 x i8], [22 x i8]* %15, i64 0, i64 0
  %177 = icmp eq [22 x i8]* %15, null
  br i1 %177, label %182, label %178

178:                                              ; preds = %172
  %179 = call i64 @strlen(i8* nonnull %176) #9
  %180 = icmp sgt i64 %179, -1
  br i1 %180, label %182, label %181, !prof !2

181:                                              ; preds = %178
  call void @llvm.trap() #9
  unreachable

182:                                              ; preds = %172, %178
  %183 = phi i64 [ 0, %172 ], [ %179, %178 ]
  %184 = getelementptr inbounds [23 x %"class.absl::string_view"], [23 x %"class.absl::string_view"]* %25, i64 0, i64 14, i32 0
  store i8* %176, i8** %184, align 16
  %185 = getelementptr inbounds [23 x %"class.absl::string_view"], [23 x %"class.absl::string_view"]* %25, i64 0, i64 14, i32 1
  store i64 %183, i64* %185, align 8
  %186 = bitcast %"class.absl::AlphaNum"* %29 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %186) #9
  %187 = load i8, i8* %16, align 1, !range !3
  %188 = zext i8 %187 to i32
  %189 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %29, i64 0, i32 1, i64 0
  %190 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferEiPc(i32 %188, i8* %189) #9
  %191 = ptrtoint i8* %190 to i64
  %192 = ptrtoint i8* %189 to i64
  %193 = sub i64 %191, %192
  %194 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %29, i64 0, i32 0, i32 0
  store i8* %189, i8** %194, align 8
  %195 = icmp sgt i64 %193, -1
  br i1 %195, label %197, label %196, !prof !2

196:                                              ; preds = %182
  call void @llvm.trap() #9
  unreachable

197:                                              ; preds = %182
  %198 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %29, i64 0, i32 0, i32 1
  store i64 %193, i64* %198, align 8
  %199 = getelementptr inbounds [23 x %"class.absl::string_view"], [23 x %"class.absl::string_view"]* %25, i64 0, i64 15, i32 0
  store i8* %189, i8** %199, align 16
  %200 = getelementptr inbounds [23 x %"class.absl::string_view"], [23 x %"class.absl::string_view"]* %25, i64 0, i64 15, i32 1
  store i64 %193, i64* %200, align 8
  %201 = getelementptr inbounds [26 x i8], [26 x i8]* %17, i64 0, i64 0
  %202 = icmp eq [26 x i8]* %17, null
  br i1 %202, label %207, label %203

203:                                              ; preds = %197
  %204 = call i64 @strlen(i8* nonnull %201) #9
  %205 = icmp sgt i64 %204, -1
  br i1 %205, label %207, label %206, !prof !2

206:                                              ; preds = %203
  call void @llvm.trap() #9
  unreachable

207:                                              ; preds = %197, %203
  %208 = phi i64 [ 0, %197 ], [ %204, %203 ]
  %209 = getelementptr inbounds [23 x %"class.absl::string_view"], [23 x %"class.absl::string_view"]* %25, i64 0, i64 16, i32 0
  store i8* %201, i8** %209, align 16
  %210 = getelementptr inbounds [23 x %"class.absl::string_view"], [23 x %"class.absl::string_view"]* %25, i64 0, i64 16, i32 1
  store i64 %208, i64* %210, align 8
  %211 = bitcast %"class.std::__1::basic_string"* %18 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %212 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %211, i64 0, i32 1, i32 0
  %213 = load i8, i8* %212, align 1
  %214 = icmp slt i8 %213, 0
  br i1 %214, label %218, label %215

215:                                              ; preds = %207
  %216 = zext i8 %213 to i64
  %217 = ptrtoint %"class.std::__1::basic_string"* %18 to i64
  br label %225

218:                                              ; preds = %207
  %219 = bitcast %"class.std::__1::basic_string"* %18 to i64*
  %220 = load i64, i64* %219, align 8
  %221 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %222 = load i64, i64* %221, align 8
  %223 = icmp sgt i64 %222, -1
  br i1 %223, label %225, label %224, !prof !2

224:                                              ; preds = %218
  call void @llvm.trap() #9
  unreachable

225:                                              ; preds = %215, %218
  %226 = phi i64 [ %220, %218 ], [ %217, %215 ]
  %227 = phi i64 [ %222, %218 ], [ %216, %215 ]
  %228 = inttoptr i64 %226 to i8*
  %229 = getelementptr inbounds [23 x %"class.absl::string_view"], [23 x %"class.absl::string_view"]* %25, i64 0, i64 17, i32 0
  store i8* %228, i8** %229, align 16
  %230 = getelementptr inbounds [23 x %"class.absl::string_view"], [23 x %"class.absl::string_view"]* %25, i64 0, i64 17, i32 1
  store i64 %227, i64* %230, align 8
  %231 = getelementptr inbounds [18 x i8], [18 x i8]* %19, i64 0, i64 0
  %232 = icmp eq [18 x i8]* %19, null
  br i1 %232, label %237, label %233

233:                                              ; preds = %225
  %234 = call i64 @strlen(i8* nonnull %231) #9
  %235 = icmp sgt i64 %234, -1
  br i1 %235, label %237, label %236, !prof !2

236:                                              ; preds = %233
  call void @llvm.trap() #9
  unreachable

237:                                              ; preds = %225, %233
  %238 = phi i64 [ 0, %225 ], [ %234, %233 ]
  %239 = getelementptr inbounds [23 x %"class.absl::string_view"], [23 x %"class.absl::string_view"]* %25, i64 0, i64 18, i32 0
  store i8* %231, i8** %239, align 16
  %240 = getelementptr inbounds [23 x %"class.absl::string_view"], [23 x %"class.absl::string_view"]* %25, i64 0, i64 18, i32 1
  store i64 %238, i64* %240, align 8
  %241 = bitcast %"class.std::__1::basic_string"* %20 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %242 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %241, i64 0, i32 1, i32 0
  %243 = load i8, i8* %242, align 1
  %244 = icmp slt i8 %243, 0
  br i1 %244, label %248, label %245

245:                                              ; preds = %237
  %246 = zext i8 %243 to i64
  %247 = ptrtoint %"class.std::__1::basic_string"* %20 to i64
  br label %255

248:                                              ; preds = %237
  %249 = bitcast %"class.std::__1::basic_string"* %20 to i64*
  %250 = load i64, i64* %249, align 8
  %251 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %20, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %252 = load i64, i64* %251, align 8
  %253 = icmp sgt i64 %252, -1
  br i1 %253, label %255, label %254, !prof !2

254:                                              ; preds = %248
  call void @llvm.trap() #9
  unreachable

255:                                              ; preds = %245, %248
  %256 = phi i64 [ %250, %248 ], [ %247, %245 ]
  %257 = phi i64 [ %252, %248 ], [ %246, %245 ]
  %258 = inttoptr i64 %256 to i8*
  %259 = getelementptr inbounds [23 x %"class.absl::string_view"], [23 x %"class.absl::string_view"]* %25, i64 0, i64 19, i32 0
  store i8* %258, i8** %259, align 16
  %260 = getelementptr inbounds [23 x %"class.absl::string_view"], [23 x %"class.absl::string_view"]* %25, i64 0, i64 19, i32 1
  store i64 %257, i64* %260, align 8
  %261 = getelementptr inbounds [27 x i8], [27 x i8]* %21, i64 0, i64 0
  %262 = icmp eq [27 x i8]* %21, null
  br i1 %262, label %267, label %263

263:                                              ; preds = %255
  %264 = call i64 @strlen(i8* nonnull %261) #9
  %265 = icmp sgt i64 %264, -1
  br i1 %265, label %267, label %266, !prof !2

266:                                              ; preds = %263
  call void @llvm.trap() #9
  unreachable

267:                                              ; preds = %255, %263
  %268 = phi i64 [ 0, %255 ], [ %264, %263 ]
  %269 = getelementptr inbounds [23 x %"class.absl::string_view"], [23 x %"class.absl::string_view"]* %25, i64 0, i64 20, i32 0
  store i8* %261, i8** %269, align 16
  %270 = getelementptr inbounds [23 x %"class.absl::string_view"], [23 x %"class.absl::string_view"]* %25, i64 0, i64 20, i32 1
  store i64 %268, i64* %270, align 8
  %271 = bitcast %"class.std::__1::basic_string"* %22 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %272 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %271, i64 0, i32 1, i32 0
  %273 = load i8, i8* %272, align 1
  %274 = icmp slt i8 %273, 0
  br i1 %274, label %278, label %275

275:                                              ; preds = %267
  %276 = zext i8 %273 to i64
  %277 = ptrtoint %"class.std::__1::basic_string"* %22 to i64
  br label %285

278:                                              ; preds = %267
  %279 = bitcast %"class.std::__1::basic_string"* %22 to i64*
  %280 = load i64, i64* %279, align 8
  %281 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %22, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %282 = load i64, i64* %281, align 8
  %283 = icmp sgt i64 %282, -1
  br i1 %283, label %285, label %284, !prof !2

284:                                              ; preds = %278
  call void @llvm.trap() #9
  unreachable

285:                                              ; preds = %275, %278
  %286 = phi i64 [ %280, %278 ], [ %277, %275 ]
  %287 = phi i64 [ %282, %278 ], [ %276, %275 ]
  %288 = inttoptr i64 %286 to i8*
  %289 = getelementptr inbounds [23 x %"class.absl::string_view"], [23 x %"class.absl::string_view"]* %25, i64 0, i64 21, i32 0
  store i8* %288, i8** %289, align 16
  %290 = getelementptr inbounds [23 x %"class.absl::string_view"], [23 x %"class.absl::string_view"]* %25, i64 0, i64 21, i32 1
  store i64 %287, i64* %290, align 8
  %291 = getelementptr inbounds [2 x i8], [2 x i8]* %23, i64 0, i64 0
  %292 = icmp eq [2 x i8]* %23, null
  br i1 %292, label %297, label %293

293:                                              ; preds = %285
  %294 = call i64 @strlen(i8* nonnull %291) #9
  %295 = icmp sgt i64 %294, -1
  br i1 %295, label %297, label %296, !prof !2

296:                                              ; preds = %293
  call void @llvm.trap() #9
  unreachable

297:                                              ; preds = %285, %293
  %298 = phi i64 [ 0, %285 ], [ %294, %293 ]
  %299 = getelementptr inbounds [23 x %"class.absl::string_view"], [23 x %"class.absl::string_view"]* %25, i64 0, i64 22, i32 0
  store i8* %291, i8** %299, align 16
  %300 = getelementptr inbounds [23 x %"class.absl::string_view"], [23 x %"class.absl::string_view"]* %25, i64 0, i64 22, i32 1
  store i64 %298, i64* %300, align 8
  call void @_ZN4absl16strings_internal9CatPiecesESt16initializer_listINS_11string_viewEE(%"class.std::__1::basic_string"* sret %0, %"class.absl::string_view"* nonnull %31, i64 23) #9
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %186) #9
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %161) #9
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %136) #9
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %111) #9
  call void @llvm.lifetime.end.p0i8(i64 368, i8* nonnull %30) #9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN4quic23EncryptionLevelToStringENS_15EncryptionLevelE(%"class.std::__1::basic_string"* sret, i8 signext) local_unnamed_addr #3

declare void @_ZN4quic24TransmissionTypeToStringENS_16TransmissionTypeE(%"class.std::__1::basic_string"* sret, i8 signext) local_unnamed_addr #3

declare void @_ZNK4quic16QuicPacketNumber8ToStringEv(%"class.std::__1::basic_string"* sret, %"class.quic::QuicPacketNumber"*) local_unnamed_addr #3

declare void @_ZN4quic18QuicFramesToStringERKNSt3__16vectorINS_9QuicFrameENS0_9allocatorIS2_EEEE(%"class.std::__1::basic_string"* sret, %"class.std::__1::vector"* dereferenceable(24)) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #5

declare i8* @_ZN4absl16numbers_internal15FastIntToBufferElPc(i64, i8*) local_unnamed_addr #3

declare i8* @_ZN4absl16numbers_internal15FastIntToBufferEiPc(i32, i8*) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

declare void @_ZN4absl16strings_internal9CatPiecesESt16initializer_listINS_11string_viewEE(%"class.std::__1::basic_string"* sret, %"class.absl::string_view"*, i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{i8 0, i8 2}
