; ModuleID = '../../third_party/skia/src/shaders/gradients/Sk4fLinearGradient.cpp'
source_filename = "../../third_party/skia/src/shaders/gradients/Sk4fLinearGradient.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.SkLinearGradient::LinearGradient4fContext" = type { %"class.SkGradientShaderBase::GradientShaderBase4fContext.base", %struct.Sk4fGradientInterval* }
%"class.SkGradientShaderBase::GradientShaderBase4fContext.base" = type <{ %"class.SkShaderBase::Context.base", [7 x i8], %class.Sk4fGradientIntervalBuffer, %class.SkMatrix, void (%class.SkMatrix*, float, float, %struct.SkPoint*)*, i8, i8, i8 }>
%"class.SkShaderBase::Context.base" = type <{ i32 (...)**, %class.SkShaderBase*, %class.SkMatrix, %class.SkMatrix, i8 }>
%class.SkShaderBase = type { %class.SkShader.base, %class.SkMatrix, [4 x i8] }
%class.SkShader.base = type { %class.SkFlattenable.base }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.Sk4fGradientIntervalBuffer = type { %class.SkSTArray }
%class.SkSTArray = type { %class.SkAlignedSTStorage, %class.SkTArray }
%class.SkAlignedSTStorage = type { [320 x i8] }
%class.SkTArray = type { %struct.Sk4fGradientInterval*, i64 }
%class.SkMatrix = type { [9 x float], i32 }
%struct.SkPoint = type { float, float }
%struct.Sk4fGradientInterval = type { %struct.SkRGBA4f, %struct.SkRGBA4f, float, float }
%struct.SkRGBA4f = type { float, float, float, float }
%class.SkLinearGradient = type { %class.SkGradientShaderBase.base, %struct.SkPoint, %struct.SkPoint, [4 x i8] }
%class.SkGradientShaderBase.base = type <{ %class.SkShaderBase.base, %class.SkMatrix, i32, i8, [7 x i8], %struct.SkRGBA4f.1*, float*, i32, [4 x i8], %class.sk_sp, %class.SkAutoSTMalloc, i8 }>
%class.SkShaderBase.base = type { %class.SkShader.base, %class.SkMatrix }
%struct.SkRGBA4f.1 = type { float, float, float, float }
%class.sk_sp = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.2" }
%"struct.std::__1::atomic.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl.5" }
%"struct.std::__1::__cxx_atomic_impl.5" = type { %"struct.std::__1::__cxx_atomic_base_impl.6" }
%"struct.std::__1::__cxx_atomic_base_impl.6" = type { i8 }
%class.SkAutoSTMalloc = type { i8*, %union.anon }
%union.anon = type { [20 x i32] }
%"struct.SkShaderBase::ContextRec" = type <{ %class.SkMatrix*, %class.SkMatrix*, i32, [4 x i8], %class.SkColorSpace*, i8, i8, [6 x i8] }>
%"class.SkGradientShaderBase::GradientShaderBase4fContext" = type <{ %"class.SkShaderBase::Context.base", [7 x i8], %class.Sk4fGradientIntervalBuffer, %class.SkMatrix, void (%class.SkMatrix*, float, float, %struct.SkPoint*)*, i8, i8, i8, [5 x i8] }>
%class.SkGradientShaderBase = type <{ %class.SkShaderBase.base, %class.SkMatrix, i32, i8, [7 x i8], %struct.SkRGBA4f.1*, float*, i32, [4 x i8], %class.sk_sp, %class.SkAutoSTMalloc, i8, [7 x i8] }>
%"class.SkShaderBase::Context" = type <{ i32 (...)**, %class.SkShaderBase*, %class.SkMatrix, %class.SkMatrix, i8, [7 x i8] }>

$_ZN20SkGradientShaderBase27GradientShaderBase4fContextD2Ev = comdat any

$_ZN16SkLinearGradient23LinearGradient4fContextD0Ev = comdat any

$_ZNK20SkGradientShaderBase27GradientShaderBase4fContext8getFlagsEv = comdat any

$_ZN20SkGradientShaderBase27GradientShaderBase4fContextD0Ev = comdat any

$_ZTVN20SkGradientShaderBase27GradientShaderBase4fContextE = comdat any

@_ZTVN16SkLinearGradient23LinearGradient4fContextE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.SkGradientShaderBase::GradientShaderBase4fContext"*)* @_ZN20SkGradientShaderBase27GradientShaderBase4fContextD2Ev to i8*), i8* bitcast (void (%"class.SkLinearGradient::LinearGradient4fContext"*)* @_ZN16SkLinearGradient23LinearGradient4fContextD0Ev to i8*), i8* bitcast (i32 (%"class.SkGradientShaderBase::GradientShaderBase4fContext"*)* @_ZNK20SkGradientShaderBase27GradientShaderBase4fContext8getFlagsEv to i8*), i8* bitcast (void (%"class.SkLinearGradient::LinearGradient4fContext"*, i32, i32, i32*, i32)* @_ZN16SkLinearGradient23LinearGradient4fContext9shadeSpanEiiPji to i8*)] }, align 8
@_ZZN16SkLinearGradient23LinearGradient4fContext9shadeSpanEiiPjiE11dither_cell = internal unnamed_addr constant [4 x float] [float -3.750000e-01, float 1.250000e-01, float 3.750000e-01, float -1.250000e-01], align 16
@_ZTVN20SkGradientShaderBase27GradientShaderBase4fContextE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.SkGradientShaderBase::GradientShaderBase4fContext"*)* @_ZN20SkGradientShaderBase27GradientShaderBase4fContextD2Ev to i8*), i8* bitcast (void (%"class.SkGradientShaderBase::GradientShaderBase4fContext"*)* @_ZN20SkGradientShaderBase27GradientShaderBase4fContextD0Ev to i8*), i8* bitcast (i32 (%"class.SkGradientShaderBase::GradientShaderBase4fContext"*)* @_ZNK20SkGradientShaderBase27GradientShaderBase4fContext8getFlagsEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, comdat, align 8
@_ZN6SkOpts8memset32E = external local_unnamed_addr global void (i32*, i32, i32)*, align 8

@_ZN16SkLinearGradient23LinearGradient4fContextC1ERKS_RKN12SkShaderBase10ContextRecE = hidden unnamed_addr alias void (%"class.SkLinearGradient::LinearGradient4fContext"*, %class.SkLinearGradient*, %"struct.SkShaderBase::ContextRec"*), void (%"class.SkLinearGradient::LinearGradient4fContext"*, %class.SkLinearGradient*, %"struct.SkShaderBase::ContextRec"*)* @_ZN16SkLinearGradient23LinearGradient4fContextC2ERKS_RKN12SkShaderBase10ContextRecE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16SkLinearGradient23LinearGradient4fContextC2ERKS_RKN12SkShaderBase10ContextRecE(%"class.SkLinearGradient::LinearGradient4fContext"*, %class.SkLinearGradient* dereferenceable(248), %"struct.SkShaderBase::ContextRec"* dereferenceable(40)) unnamed_addr #0 align 2 {
  %4 = bitcast %"class.SkLinearGradient::LinearGradient4fContext"* %0 to %"class.SkGradientShaderBase::GradientShaderBase4fContext"*
  %5 = bitcast %class.SkLinearGradient* %1 to %class.SkGradientShaderBase*
  tail call void @_ZN20SkGradientShaderBase27GradientShaderBase4fContextC2ERKS_RKN12SkShaderBase10ContextRecE(%"class.SkGradientShaderBase::GradientShaderBase4fContext"* %4, %class.SkGradientShaderBase* dereferenceable(232) %5, %"struct.SkShaderBase::ContextRec"* dereferenceable(40) %2) #12
  %6 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN16SkLinearGradient23LinearGradient4fContextE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 0, i32 3, i32 0, i64 0
  %8 = bitcast float* %7 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = icmp slt i32 %9, 0
  %11 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 0, i32 2
  %12 = getelementptr inbounds %"struct.SkShaderBase::ContextRec", %"struct.SkShaderBase::ContextRec"* %2, i64 0, i32 4
  %13 = load %class.SkColorSpace*, %class.SkColorSpace** %12, align 8
  %14 = getelementptr inbounds %class.SkLinearGradient, %class.SkLinearGradient* %1, i64 0, i32 0, i32 2
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 0, i32 6
  %17 = load i8, i8* %16, align 1, !range !2
  %18 = icmp ne i8 %17, 0
  %19 = getelementptr inbounds %"struct.SkShaderBase::ContextRec", %"struct.SkShaderBase::ContextRec"* %2, i64 0, i32 5
  %20 = load i8, i8* %19, align 8
  %21 = uitofp i8 %20 to float
  %22 = fmul float %21, 0x3F70101020000000
  tail call void @_ZN26Sk4fGradientIntervalBuffer4initERK20SkGradientShaderBaseP12SkColorSpace10SkTileModebfb(%class.Sk4fGradientIntervalBuffer* %11, %class.SkGradientShaderBase* dereferenceable(232) %5, %class.SkColorSpace* %13, i32 %15, i1 zeroext %18, float %22, i1 zeroext %10) #12
  %23 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i64 320
  %24 = bitcast i8* %23 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 1
  %27 = bitcast %struct.Sk4fGradientInterval** %26 to i64*
  store i64 %25, i64* %27, align 8
  ret void
}

declare void @_ZN20SkGradientShaderBase27GradientShaderBase4fContextC2ERKS_RKN12SkShaderBase10ContextRecE(%"class.SkGradientShaderBase::GradientShaderBase4fContext"*, %class.SkGradientShaderBase* dereferenceable(232), %"struct.SkShaderBase::ContextRec"* dereferenceable(40)) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN26Sk4fGradientIntervalBuffer4initERK20SkGradientShaderBaseP12SkColorSpace10SkTileModebfb(%class.Sk4fGradientIntervalBuffer*, %class.SkGradientShaderBase* dereferenceable(232), %class.SkColorSpace*, i32, i1 zeroext, float, i1 zeroext) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden %struct.Sk4fGradientInterval* @_ZNK16SkLinearGradient23LinearGradient4fContext12findIntervalEf(%"class.SkLinearGradient::LinearGradient4fContext"* nocapture, float) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 0, i32 3, i32 0, i64 0
  %4 = load float, float* %3, align 4
  %5 = fcmp oge float %4, 0.000000e+00
  %6 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 1
  %7 = select i1 %5, i64 1, i64 -1
  %8 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i64 320
  %9 = bitcast i8* %8 to %struct.Sk4fGradientInterval**
  %10 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i64 328
  %11 = bitcast i8* %10 to i64*
  %12 = load %struct.Sk4fGradientInterval*, %struct.Sk4fGradientInterval** %6, align 8
  br label %13

13:                                               ; preds = %45, %2
  %14 = phi %struct.Sk4fGradientInterval* [ %12, %2 ], [ %46, %45 ]
  %15 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %14, i64 0, i32 2
  %16 = load float, float* %15, align 4
  %17 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %14, i64 0, i32 3
  %18 = load float, float* %17, align 4
  %19 = fcmp olt float %16, %18
  br i1 %19, label %20, label %24

20:                                               ; preds = %13
  %21 = fcmp ole float %16, %1
  %22 = fcmp oge float %18, %1
  %23 = and i1 %21, %22
  br i1 %23, label %47, label %28

24:                                               ; preds = %13
  %25 = fcmp ole float %18, %1
  %26 = fcmp oge float %16, %1
  %27 = and i1 %26, %25
  br i1 %27, label %47, label %28

28:                                               ; preds = %24, %20
  %29 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %14, i64 %7
  store %struct.Sk4fGradientInterval* %29, %struct.Sk4fGradientInterval** %6, align 8
  %30 = load %struct.Sk4fGradientInterval*, %struct.Sk4fGradientInterval** %9, align 8
  %31 = icmp eq %struct.Sk4fGradientInterval* %30, null
  br i1 %31, label %43, label %32

32:                                               ; preds = %28
  %33 = load i64, i64* %11, align 8
  %34 = lshr i64 %33, 1
  %35 = and i64 %34, 2147483647
  %36 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %30, i64 %35
  %37 = icmp ult %struct.Sk4fGradientInterval* %29, %36
  br i1 %37, label %38, label %43

38:                                               ; preds = %32
  %39 = icmp ult %struct.Sk4fGradientInterval* %29, %30
  br i1 %39, label %40, label %45

40:                                               ; preds = %38
  %41 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %30, i64 -1
  %42 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %41, i64 %35
  br label %43

43:                                               ; preds = %32, %28, %40
  %44 = phi %struct.Sk4fGradientInterval* [ %42, %40 ], [ %30, %28 ], [ %30, %32 ]
  store %struct.Sk4fGradientInterval* %44, %struct.Sk4fGradientInterval** %6, align 8
  br label %45

45:                                               ; preds = %43, %38
  %46 = phi %struct.Sk4fGradientInterval* [ %29, %38 ], [ %44, %43 ]
  br label %13

47:                                               ; preds = %24, %20
  ret %struct.Sk4fGradientInterval* %14
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16SkLinearGradient23LinearGradient4fContext9shadeSpanEiiPji(%"class.SkLinearGradient::LinearGradient4fContext"*, i32, i32, i32*, i32) unnamed_addr #4 align 2 {
  %6 = alloca %struct.SkPoint, align 4
  %7 = alloca %struct.SkPoint, align 4
  %8 = alloca %struct.SkPoint, align 4
  %9 = alloca %struct.SkPoint, align 4
  %10 = alloca %struct.SkPoint, align 4
  %11 = alloca %struct.SkPoint, align 4
  %12 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 0, i32 7
  %13 = load i8, i8* %12, align 2, !range !2
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %31, label %15

15:                                               ; preds = %5
  %16 = shl i32 %2, 1
  %17 = and i32 %16, 2
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds [4 x float], [4 x float]* @_ZZN16SkLinearGradient23LinearGradient4fContext9shadeSpanEiiPjiE11dither_cell, i64 0, i64 %18
  %20 = bitcast float* %19 to i32*
  %21 = load i32, i32* %20, align 8
  %22 = or i32 %17, 1
  %23 = zext i32 %22 to i64
  %24 = getelementptr inbounds [4 x float], [4 x float]* @_ZZN16SkLinearGradient23LinearGradient4fContext9shadeSpanEiiPjiE11dither_cell, i64 0, i64 %23
  %25 = bitcast float* %24 to i32*
  %26 = load i32, i32* %25, align 4
  %27 = and i32 %1, 1
  %28 = icmp eq i32 %27, 0
  %29 = select i1 %28, i32 %21, i32 %26
  %30 = select i1 %28, i32 %26, i32 %21
  br label %31

31:                                               ; preds = %15, %5
  %32 = phi i32 [ 0, %5 ], [ %29, %15 ]
  %33 = phi i32 [ 0, %5 ], [ %30, %15 ]
  %34 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 0, i32 6
  %35 = load i8, i8* %34, align 1, !range !2
  %36 = icmp eq i8 %35, 0
  %37 = bitcast i32 %32 to float
  br i1 %36, label %962, label %38

38:                                               ; preds = %31
  %39 = fadd float %37, 5.000000e-01
  %40 = bitcast i32 %33 to float
  %41 = fadd float %40, 5.000000e-01
  %42 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 0, i32 0, i32 1
  %43 = bitcast %class.SkShaderBase** %42 to %class.SkGradientShaderBase**
  %44 = load %class.SkGradientShaderBase*, %class.SkGradientShaderBase** %43, align 8
  %45 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %44, i64 0, i32 2
  %46 = load i32, i32* %45, align 4
  switch i32 %46, label %2065 [
    i32 3, label %47
    i32 0, label %47
    i32 1, label %305
    i32 2, label %634
  ]

47:                                               ; preds = %38, %38
  %48 = bitcast %struct.SkPoint* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %48) #12
  %49 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %8, i64 0, i32 0
  store float 0xFFFFFFFFE0000000, float* %49, align 4
  %50 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %8, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %50, align 4
  %51 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 0, i32 4
  %52 = load void (%class.SkMatrix*, float, float, %struct.SkPoint*)*, void (%class.SkMatrix*, float, float, %struct.SkPoint*)** %51, align 8
  %53 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 0, i32 3
  %54 = sitofp i32 %1 to float
  %55 = fadd float %54, 5.000000e-01
  %56 = sitofp i32 %2 to float
  %57 = fadd float %56, 5.000000e-01
  call void %52(%class.SkMatrix* dereferenceable(40) %53, float %55, float %57, %struct.SkPoint* nonnull %8) #12
  %58 = load float, float* %49, align 4
  %59 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %53, i64 0, i32 0, i64 0
  %60 = load float, float* %59, align 4
  %61 = fcmp oge float %60, 0.000000e+00
  %62 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 1
  %63 = select i1 %61, i64 1, i64 -1
  %64 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i64 320
  %65 = bitcast i8* %64 to %struct.Sk4fGradientInterval**
  %66 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i64 328
  %67 = bitcast i8* %66 to i64*
  %68 = load %struct.Sk4fGradientInterval*, %struct.Sk4fGradientInterval** %62, align 8
  br label %69

69:                                               ; preds = %101, %47
  %70 = phi %struct.Sk4fGradientInterval* [ %68, %47 ], [ %102, %101 ]
  %71 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %70, i64 0, i32 2
  %72 = load float, float* %71, align 4
  %73 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %70, i64 0, i32 3
  %74 = load float, float* %73, align 4
  %75 = fcmp olt float %72, %74
  br i1 %75, label %76, label %80

76:                                               ; preds = %69
  %77 = fcmp ole float %72, %58
  %78 = fcmp oge float %74, %58
  %79 = and i1 %77, %78
  br i1 %79, label %103, label %84

80:                                               ; preds = %69
  %81 = fcmp ole float %74, %58
  %82 = fcmp oge float %72, %58
  %83 = and i1 %82, %81
  br i1 %83, label %103, label %84

84:                                               ; preds = %80, %76
  %85 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %70, i64 %63
  store %struct.Sk4fGradientInterval* %85, %struct.Sk4fGradientInterval** %62, align 8
  %86 = load %struct.Sk4fGradientInterval*, %struct.Sk4fGradientInterval** %65, align 8
  %87 = icmp eq %struct.Sk4fGradientInterval* %86, null
  br i1 %87, label %99, label %88

88:                                               ; preds = %84
  %89 = load i64, i64* %67, align 8
  %90 = lshr i64 %89, 1
  %91 = and i64 %90, 2147483647
  %92 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %86, i64 %91
  %93 = icmp ult %struct.Sk4fGradientInterval* %85, %92
  br i1 %93, label %94, label %99

94:                                               ; preds = %88
  %95 = icmp ult %struct.Sk4fGradientInterval* %85, %86
  br i1 %95, label %96, label %101

96:                                               ; preds = %94
  %97 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %86, i64 -1
  %98 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %97, i64 %91
  br label %99

99:                                               ; preds = %84, %88, %96
  %100 = phi %struct.Sk4fGradientInterval* [ %98, %96 ], [ %86, %88 ], [ %86, %84 ]
  store %struct.Sk4fGradientInterval* %100, %struct.Sk4fGradientInterval** %62, align 8
  br label %101

101:                                              ; preds = %99, %94
  %102 = phi %struct.Sk4fGradientInterval* [ %85, %94 ], [ %100, %99 ]
  br label %69

103:                                              ; preds = %80, %76
  %104 = sitofp i32 %4 to float
  %105 = fmul float %60, %104
  %106 = call float @llvm.fabs.f32(float %105) #12
  %107 = fcmp ole float %106, 0x3F30000000000000
  br i1 %107, label %111, label %108

108:                                              ; preds = %103
  %109 = fsub float %74, %58
  %110 = fdiv float %109, %60
  br label %111

111:                                              ; preds = %108, %103
  %112 = phi float [ %110, %108 ], [ 0x7FF0000000000000, %103 ]
  %113 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %70, i64 0, i32 1
  %114 = bitcast %struct.SkRGBA4f* %113 to <4 x float>*
  %115 = load <4 x float>, <4 x float>* %114, align 1
  %116 = fmul <4 x float> %115, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %117 = shufflevector <4 x float> %116, <4 x float> undef, <4 x i32> <i32 2, i32 1, i32 0, i32 3>
  %118 = bitcast %struct.Sk4fGradientInterval* %70 to <4 x float>*
  %119 = load <4 x float>, <4 x float>* %118, align 1
  %120 = fmul <4 x float> %119, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %121 = shufflevector <4 x float> %120, <4 x float> undef, <4 x i32> <i32 2, i32 1, i32 0, i32 3>
  %122 = insertelement <4 x float> undef, float %58, i32 0
  %123 = shufflevector <4 x float> %122, <4 x float> undef, <4 x i32> zeroinitializer
  %124 = fmul <4 x float> %123, %117
  %125 = fadd <4 x float> %121, %124
  %126 = insertelement <4 x float> undef, float %60, i32 0
  %127 = shufflevector <4 x float> %126, <4 x float> undef, <4 x i32> zeroinitializer
  %128 = fmul <4 x float> %127, %117
  br i1 %107, label %134, label %129

129:                                              ; preds = %111
  %130 = fcmp oeq <4 x float> %117, zeroinitializer
  %131 = bitcast <4 x i1> %130 to i4
  %132 = icmp eq i4 %131, -1
  %133 = zext i1 %132 to i8
  br label %134

134:                                              ; preds = %129, %111
  %135 = phi i8 [ 1, %111 ], [ %133, %129 ]
  %136 = icmp sgt i32 %4, 0
  br i1 %136, label %137, label %304

137:                                              ; preds = %134
  %138 = insertelement <4 x float> undef, float %41, i32 0
  %139 = shufflevector <4 x float> %138, <4 x float> undef, <4 x i32> zeroinitializer
  %140 = insertelement <4 x float> undef, float %39, i32 0
  %141 = shufflevector <4 x float> %140, <4 x float> undef, <4 x i32> zeroinitializer
  br label %142

142:                                              ; preds = %284, %137
  %143 = phi i32* [ %298, %284 ], [ %3, %137 ]
  %144 = phi i32 [ %296, %284 ], [ %4, %137 ]
  %145 = phi <4 x float> [ %302, %284 ], [ %139, %137 ]
  %146 = phi <4 x float> [ %301, %284 ], [ %141, %137 ]
  %147 = phi <4 x float> [ %287, %284 ], [ %128, %137 ]
  %148 = phi <4 x float> [ %294, %284 ], [ %125, %137 ]
  %149 = phi float [ %295, %284 ], [ %112, %137 ]
  %150 = phi i8 [ %286, %284 ], [ %135, %137 ]
  %151 = phi %struct.Sk4fGradientInterval* [ %285, %284 ], [ %70, %137 ]
  %152 = fadd float %149, 1.000000e+00
  %153 = fcmp olt float %152, 0x41DFFFFFE0000000
  %154 = select i1 %153, float %152, float 0x41DFFFFFE0000000
  %155 = fcmp ogt float %154, 0xC1DFFFFFE0000000
  %156 = select i1 %155, float %154, float 0xC1DFFFFFE0000000
  %157 = fptosi float %156 to i32
  %158 = icmp slt i32 %144, %157
  %159 = select i1 %158, i32 %144, i32 %157
  %160 = icmp eq i8 %150, 0
  br i1 %160, label %170, label %161

161:                                              ; preds = %142
  %162 = call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %148) #12
  %163 = bitcast <4 x i32> %162 to <8 x i16>
  %164 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %163, <8 x i16> undef) #12
  %165 = bitcast <16 x i8> %164 to <8 x i16>
  %166 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %165, <8 x i16> undef) #12
  %167 = bitcast <16 x i8> %166 to <4 x i32>
  %168 = extractelement <4 x i32> %167, i32 0
  %169 = load void (i32*, i32, i32)*, void (i32*, i32, i32)** @_ZN6SkOpts8memset32E, align 8
  call void %169(i32* %143, i32 %168, i32 %159) #12
  br label %248

170:                                              ; preds = %142
  %171 = fadd <4 x float> %147, %147
  %172 = fadd <4 x float> %171, %171
  %173 = fadd <4 x float> %146, %148
  %174 = fadd <4 x float> %147, %148
  %175 = fadd <4 x float> %145, %174
  %176 = icmp sgt i32 %159, 3
  br i1 %176, label %177, label %210

177:                                              ; preds = %170
  %178 = fadd <4 x float> %171, %175
  %179 = fadd <4 x float> %171, %173
  br label %180

180:                                              ; preds = %180, %177
  %181 = phi i32* [ %201, %180 ], [ %143, %177 ]
  %182 = phi i32 [ %206, %180 ], [ %159, %177 ]
  %183 = phi <4 x float> [ %205, %180 ], [ %178, %177 ]
  %184 = phi <4 x float> [ %204, %180 ], [ %179, %177 ]
  %185 = phi <4 x float> [ %203, %180 ], [ %175, %177 ]
  %186 = phi <4 x float> [ %202, %180 ], [ %173, %177 ]
  %187 = call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %186) #12
  %188 = call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %185) #12
  %189 = bitcast <4 x i32> %187 to <8 x i16>
  %190 = bitcast <4 x i32> %188 to <8 x i16>
  %191 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %189, <8 x i16> %190) #12
  %192 = call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %184) #12
  %193 = call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %183) #12
  %194 = bitcast <4 x i32> %192 to <8 x i16>
  %195 = bitcast <4 x i32> %193 to <8 x i16>
  %196 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %194, <8 x i16> %195) #12
  %197 = bitcast <16 x i8> %191 to <8 x i16>
  %198 = bitcast <16 x i8> %196 to <8 x i16>
  %199 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %197, <8 x i16> %198) #12
  %200 = bitcast i32* %181 to <16 x i8>*
  store <16 x i8> %199, <16 x i8>* %200, align 1
  %201 = getelementptr inbounds i32, i32* %181, i64 4
  %202 = fadd <4 x float> %172, %186
  %203 = fadd <4 x float> %172, %185
  %204 = fadd <4 x float> %172, %184
  %205 = fadd <4 x float> %172, %183
  %206 = add nsw i32 %182, -4
  %207 = icmp sgt i32 %206, 3
  br i1 %207, label %180, label %208

208:                                              ; preds = %180
  %209 = add nsw i32 %159, -4
  br label %210

210:                                              ; preds = %208, %170
  %211 = phi <4 x float> [ %173, %170 ], [ %202, %208 ]
  %212 = phi <4 x float> [ %175, %170 ], [ %203, %208 ]
  %213 = phi i32 [ %159, %170 ], [ %209, %208 ]
  %214 = phi i32* [ %143, %170 ], [ %201, %208 ]
  %215 = and i32 %213, 2
  %216 = icmp eq i32 %215, 0
  br i1 %216, label %235, label %217

217:                                              ; preds = %210
  %218 = getelementptr inbounds i32, i32* %214, i64 1
  %219 = call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %211) #12
  %220 = bitcast <4 x i32> %219 to <8 x i16>
  %221 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %220, <8 x i16> undef) #12
  %222 = bitcast <16 x i8> %221 to <8 x i16>
  %223 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %222, <8 x i16> undef) #12
  %224 = bitcast <16 x i8> %223 to <4 x i32>
  %225 = extractelement <4 x i32> %224, i32 0
  store i32 %225, i32* %214, align 4
  %226 = getelementptr inbounds i32, i32* %214, i64 2
  %227 = call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %212) #12
  %228 = bitcast <4 x i32> %227 to <8 x i16>
  %229 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %228, <8 x i16> undef) #12
  %230 = bitcast <16 x i8> %229 to <8 x i16>
  %231 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %230, <8 x i16> undef) #12
  %232 = bitcast <16 x i8> %231 to <4 x i32>
  %233 = extractelement <4 x i32> %232, i32 0
  store i32 %233, i32* %218, align 4
  %234 = fadd <4 x float> %171, %211
  br label %235

235:                                              ; preds = %217, %210
  %236 = phi <4 x float> [ %211, %210 ], [ %234, %217 ]
  %237 = phi i32* [ %214, %210 ], [ %226, %217 ]
  %238 = and i32 %213, 1
  %239 = icmp eq i32 %238, 0
  br i1 %239, label %248, label %240

240:                                              ; preds = %235
  %241 = call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %236) #12
  %242 = bitcast <4 x i32> %241 to <8 x i16>
  %243 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %242, <8 x i16> undef) #12
  %244 = bitcast <16 x i8> %243 to <8 x i16>
  %245 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %244, <8 x i16> undef) #12
  %246 = bitcast <16 x i8> %245 to <4 x i32>
  %247 = extractelement <4 x i32> %246, i32 0
  store i32 %247, i32* %237, align 4
  br label %248

248:                                              ; preds = %240, %235, %161
  %249 = sitofp i32 %159 to float
  %250 = fcmp ugt float %149, %249
  br i1 %250, label %284, label %251

251:                                              ; preds = %248, %251
  %252 = phi %struct.Sk4fGradientInterval* [ %256, %251 ], [ %151, %248 ]
  %253 = phi float [ %262, %251 ], [ %149, %248 ]
  %254 = phi float [ %255, %251 ], [ %249, %248 ]
  %255 = fsub float %254, %253
  %256 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %252, i64 1
  %257 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %252, i64 1, i32 3
  %258 = load float, float* %257, align 4
  %259 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %252, i64 1, i32 2
  %260 = load float, float* %259, align 4
  %261 = fsub float %258, %260
  %262 = fdiv float %261, %60
  %263 = fcmp ult float %255, %262
  br i1 %263, label %264, label %251

264:                                              ; preds = %251
  %265 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %252, i64 1, i32 1
  %266 = bitcast %struct.SkRGBA4f* %265 to <4 x float>*
  %267 = load <4 x float>, <4 x float>* %266, align 1
  %268 = fmul <4 x float> %267, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %269 = shufflevector <4 x float> %268, <4 x float> undef, <4 x i32> <i32 2, i32 1, i32 0, i32 3>
  %270 = bitcast %struct.Sk4fGradientInterval* %256 to <4 x float>*
  %271 = load <4 x float>, <4 x float>* %270, align 1
  %272 = fmul <4 x float> %271, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %273 = shufflevector <4 x float> %272, <4 x float> undef, <4 x i32> <i32 2, i32 1, i32 0, i32 3>
  %274 = insertelement <4 x float> undef, float %260, i32 0
  %275 = shufflevector <4 x float> %274, <4 x float> undef, <4 x i32> zeroinitializer
  %276 = fmul <4 x float> %275, %269
  %277 = fadd <4 x float> %273, %276
  %278 = fmul <4 x float> %127, %269
  br i1 %107, label %284, label %279

279:                                              ; preds = %264
  %280 = fcmp oeq <4 x float> %269, zeroinitializer
  %281 = bitcast <4 x i1> %280 to i4
  %282 = icmp eq i4 %281, -1
  %283 = zext i1 %282 to i8
  br label %284

284:                                              ; preds = %279, %264, %248
  %285 = phi %struct.Sk4fGradientInterval* [ %151, %248 ], [ %256, %279 ], [ %256, %264 ]
  %286 = phi i8 [ %150, %248 ], [ %283, %279 ], [ 1, %264 ]
  %287 = phi <4 x float> [ %147, %248 ], [ %278, %279 ], [ %278, %264 ]
  %288 = phi float [ %149, %248 ], [ %262, %279 ], [ %262, %264 ]
  %289 = phi <4 x float> [ %148, %248 ], [ %277, %279 ], [ %277, %264 ]
  %290 = phi float [ %249, %248 ], [ %255, %279 ], [ %255, %264 ]
  %291 = insertelement <4 x float> undef, float %290, i32 0
  %292 = shufflevector <4 x float> %291, <4 x float> undef, <4 x i32> zeroinitializer
  %293 = fmul <4 x float> %287, %292
  %294 = fadd <4 x float> %289, %293
  %295 = fsub float %288, %290
  %296 = sub nsw i32 %144, %159
  %297 = sext i32 %159 to i64
  %298 = getelementptr inbounds i32, i32* %143, i64 %297
  %299 = and i32 %159, 1
  %300 = icmp eq i32 %299, 0
  %301 = select i1 %300, <4 x float> %146, <4 x float> %145
  %302 = select i1 %300, <4 x float> %145, <4 x float> %146
  %303 = icmp sgt i32 %296, 0
  br i1 %303, label %142, label %304

304:                                              ; preds = %284, %134
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %48) #12
  br label %2065

305:                                              ; preds = %38
  %306 = bitcast %struct.SkPoint* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %306) #12
  %307 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %7, i64 0, i32 0
  store float 0xFFFFFFFFE0000000, float* %307, align 4
  %308 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %7, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %308, align 4
  %309 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 0, i32 4
  %310 = load void (%class.SkMatrix*, float, float, %struct.SkPoint*)*, void (%class.SkMatrix*, float, float, %struct.SkPoint*)** %309, align 8
  %311 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 0, i32 3
  %312 = sitofp i32 %1 to float
  %313 = fadd float %312, 5.000000e-01
  %314 = sitofp i32 %2 to float
  %315 = fadd float %314, 5.000000e-01
  call void %310(%class.SkMatrix* dereferenceable(40) %311, float %313, float %315, %struct.SkPoint* nonnull %7) #12
  %316 = load float, float* %307, align 4
  %317 = bitcast float %316 to i32
  %318 = and i32 %317, 2139095040
  %319 = icmp eq i32 %318, 2139095040
  br i1 %319, label %329, label %320

320:                                              ; preds = %305
  %321 = call float @llvm.trunc.f32(float %316) #12
  %322 = fsub float %316, %321
  %323 = fcmp olt float %322, 0.000000e+00
  br i1 %323, label %324, label %329

324:                                              ; preds = %320
  %325 = fadd float %322, 1.000000e+00
  %326 = call float @nextafterf(float 1.000000e+00, float 0.000000e+00) #12
  %327 = fcmp olt float %326, %325
  %328 = select i1 %327, float %326, float %325
  br label %329

329:                                              ; preds = %324, %320, %305
  %330 = phi float [ %328, %324 ], [ %322, %320 ], [ 0.000000e+00, %305 ]
  %331 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %311, i64 0, i32 0, i64 0
  %332 = load float, float* %331, align 4
  %333 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i64 320
  %334 = bitcast i8* %333 to %struct.Sk4fGradientInterval**
  %335 = load %struct.Sk4fGradientInterval*, %struct.Sk4fGradientInterval** %334, align 8
  %336 = icmp eq %struct.Sk4fGradientInterval* %335, null
  br i1 %336, label %344, label %337

337:                                              ; preds = %329
  %338 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i64 328
  %339 = bitcast i8* %338 to i64*
  %340 = load i64, i64* %339, align 8
  %341 = lshr i64 %340, 1
  %342 = and i64 %341, 2147483647
  %343 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %335, i64 %342
  br label %344

344:                                              ; preds = %329, %337
  %345 = phi %struct.Sk4fGradientInterval* [ %343, %337 ], [ null, %329 ]
  %346 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %345, i64 -1
  %347 = fcmp oge float %332, 0.000000e+00
  %348 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 1
  %349 = select i1 %347, i64 1, i64 -1
  %350 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i64 328
  %351 = bitcast i8* %350 to i64*
  %352 = load %struct.Sk4fGradientInterval*, %struct.Sk4fGradientInterval** %348, align 8
  %353 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %335, i64 -1
  br label %354

354:                                              ; preds = %383, %344
  %355 = phi %struct.Sk4fGradientInterval* [ %352, %344 ], [ %384, %383 ]
  %356 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %355, i64 0, i32 2
  %357 = load float, float* %356, align 4
  %358 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %355, i64 0, i32 3
  %359 = load float, float* %358, align 4
  %360 = fcmp olt float %357, %359
  br i1 %360, label %361, label %365

361:                                              ; preds = %354
  %362 = fcmp ole float %357, %330
  %363 = fcmp oge float %359, %330
  %364 = and i1 %362, %363
  br i1 %364, label %385, label %369

365:                                              ; preds = %354
  %366 = fcmp ole float %359, %330
  %367 = fcmp oge float %357, %330
  %368 = and i1 %367, %366
  br i1 %368, label %385, label %369

369:                                              ; preds = %365, %361
  %370 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %355, i64 %349
  store %struct.Sk4fGradientInterval* %370, %struct.Sk4fGradientInterval** %348, align 8
  br i1 %336, label %381, label %371

371:                                              ; preds = %369
  %372 = load i64, i64* %351, align 8
  %373 = lshr i64 %372, 1
  %374 = and i64 %373, 2147483647
  %375 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %335, i64 %374
  %376 = icmp ult %struct.Sk4fGradientInterval* %370, %375
  br i1 %376, label %377, label %381

377:                                              ; preds = %371
  %378 = icmp ult %struct.Sk4fGradientInterval* %370, %335
  br i1 %378, label %379, label %383

379:                                              ; preds = %377
  %380 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %353, i64 %374
  br label %381

381:                                              ; preds = %369, %371, %379
  %382 = phi %struct.Sk4fGradientInterval* [ %380, %379 ], [ %335, %371 ], [ %335, %369 ]
  store %struct.Sk4fGradientInterval* %382, %struct.Sk4fGradientInterval** %348, align 8
  br label %383

383:                                              ; preds = %381, %377
  %384 = phi %struct.Sk4fGradientInterval* [ %370, %377 ], [ %382, %381 ]
  br label %354

385:                                              ; preds = %365, %361
  %386 = sitofp i32 %4 to float
  %387 = fmul float %332, %386
  %388 = call float @llvm.fabs.f32(float %387) #12
  %389 = fcmp ole float %388, 0x3F30000000000000
  br i1 %389, label %433, label %390

390:                                              ; preds = %385
  %391 = fsub float %359, %330
  %392 = fdiv float %391, %332
  %393 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %345, i64 -1, i32 3
  %394 = load float, float* %393, align 4
  %395 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %335, i64 0, i32 2
  %396 = load float, float* %395, align 4
  %397 = fsub float %394, %396
  %398 = fdiv float %397, %332
  %399 = fcmp olt float %398, 2.500000e-01
  br i1 %399, label %400, label %433

400:                                              ; preds = %390
  %401 = icmp ugt %struct.Sk4fGradientInterval* %335, %346
  br i1 %401, label %456, label %402

402:                                              ; preds = %400, %430
  %403 = phi float [ %432, %430 ], [ %396, %400 ]
  %404 = phi <4 x float> [ %427, %430 ], [ zeroinitializer, %400 ]
  %405 = phi %struct.Sk4fGradientInterval* [ %428, %430 ], [ %335, %400 ]
  %406 = bitcast %struct.Sk4fGradientInterval* %405 to <4 x float>*
  %407 = load <4 x float>, <4 x float>* %406, align 1
  %408 = fmul <4 x float> %407, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %409 = shufflevector <4 x float> %408, <4 x float> undef, <4 x i32> <i32 2, i32 1, i32 0, i32 3>
  %410 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %405, i64 0, i32 1
  %411 = bitcast %struct.SkRGBA4f* %410 to <4 x float>*
  %412 = load <4 x float>, <4 x float>* %411, align 1
  %413 = fmul <4 x float> %412, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %414 = shufflevector <4 x float> %413, <4 x float> undef, <4 x i32> <i32 2, i32 1, i32 0, i32 3>
  %415 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %405, i64 0, i32 3
  %416 = load float, float* %415, align 4
  %417 = fadd float %403, %416
  %418 = insertelement <4 x float> undef, float %417, i32 0
  %419 = shufflevector <4 x float> %418, <4 x float> undef, <4 x i32> zeroinitializer
  %420 = fmul <4 x float> %414, %419
  %421 = fmul <4 x float> %420, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %422 = fadd <4 x float> %409, %421
  %423 = fsub float %416, %403
  %424 = insertelement <4 x float> undef, float %423, i32 0
  %425 = shufflevector <4 x float> %424, <4 x float> undef, <4 x i32> zeroinitializer
  %426 = fmul <4 x float> %425, %422
  %427 = fadd <4 x float> %404, %426
  %428 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %405, i64 1
  %429 = icmp ugt %struct.Sk4fGradientInterval* %428, %346
  br i1 %429, label %456, label %430

430:                                              ; preds = %402
  %431 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %405, i64 1, i32 2
  %432 = load float, float* %431, align 4
  br label %402

433:                                              ; preds = %390, %385
  %434 = phi float [ %392, %390 ], [ 0x7FF0000000000000, %385 ]
  %435 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %355, i64 0, i32 1
  %436 = bitcast %struct.SkRGBA4f* %435 to <4 x float>*
  %437 = load <4 x float>, <4 x float>* %436, align 1
  %438 = fmul <4 x float> %437, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %439 = shufflevector <4 x float> %438, <4 x float> undef, <4 x i32> <i32 2, i32 1, i32 0, i32 3>
  %440 = bitcast %struct.Sk4fGradientInterval* %355 to <4 x float>*
  %441 = load <4 x float>, <4 x float>* %440, align 1
  %442 = fmul <4 x float> %441, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %443 = shufflevector <4 x float> %442, <4 x float> undef, <4 x i32> <i32 2, i32 1, i32 0, i32 3>
  %444 = insertelement <4 x float> undef, float %330, i32 0
  %445 = shufflevector <4 x float> %444, <4 x float> undef, <4 x i32> zeroinitializer
  %446 = fmul <4 x float> %445, %439
  %447 = fadd <4 x float> %443, %446
  %448 = insertelement <4 x float> undef, float %332, i32 0
  %449 = shufflevector <4 x float> %448, <4 x float> undef, <4 x i32> zeroinitializer
  %450 = fmul <4 x float> %449, %439
  br i1 %389, label %456, label %451

451:                                              ; preds = %433
  %452 = fcmp oeq <4 x float> %439, zeroinitializer
  %453 = bitcast <4 x i1> %452 to i4
  %454 = icmp eq i4 %453, -1
  %455 = zext i1 %454 to i8
  br label %456

456:                                              ; preds = %402, %451, %433, %400
  %457 = phi i8 [ 1, %400 ], [ 1, %433 ], [ %455, %451 ], [ 1, %402 ]
  %458 = phi float [ 0x7FF0000000000000, %400 ], [ %434, %433 ], [ %434, %451 ], [ 0x7FF0000000000000, %402 ]
  %459 = phi <4 x float> [ zeroinitializer, %400 ], [ %447, %433 ], [ %447, %451 ], [ %427, %402 ]
  %460 = phi <4 x float> [ zeroinitializer, %400 ], [ %450, %433 ], [ %450, %451 ], [ zeroinitializer, %402 ]
  %461 = icmp sgt i32 %4, 0
  br i1 %461, label %462, label %633

462:                                              ; preds = %456
  %463 = insertelement <4 x float> undef, float %41, i32 0
  %464 = shufflevector <4 x float> %463, <4 x float> undef, <4 x i32> zeroinitializer
  %465 = insertelement <4 x float> undef, float %39, i32 0
  %466 = shufflevector <4 x float> %465, <4 x float> undef, <4 x i32> zeroinitializer
  %467 = insertelement <4 x float> undef, float %332, i32 0
  %468 = shufflevector <4 x float> %467, <4 x float> undef, <4 x i32> zeroinitializer
  br label %469

469:                                              ; preds = %613, %462
  %470 = phi i32* [ %3, %462 ], [ %627, %613 ]
  %471 = phi i32 [ %4, %462 ], [ %625, %613 ]
  %472 = phi <4 x float> [ %464, %462 ], [ %631, %613 ]
  %473 = phi <4 x float> [ %466, %462 ], [ %630, %613 ]
  %474 = phi <4 x float> [ %460, %462 ], [ %616, %613 ]
  %475 = phi <4 x float> [ %459, %462 ], [ %623, %613 ]
  %476 = phi float [ %458, %462 ], [ %624, %613 ]
  %477 = phi i8 [ %457, %462 ], [ %615, %613 ]
  %478 = phi %struct.Sk4fGradientInterval* [ %355, %462 ], [ %614, %613 ]
  %479 = fadd float %476, 1.000000e+00
  %480 = fcmp olt float %479, 0x41DFFFFFE0000000
  %481 = select i1 %480, float %479, float 0x41DFFFFFE0000000
  %482 = fcmp ogt float %481, 0xC1DFFFFFE0000000
  %483 = select i1 %482, float %481, float 0xC1DFFFFFE0000000
  %484 = fptosi float %483 to i32
  %485 = icmp slt i32 %471, %484
  %486 = select i1 %485, i32 %471, i32 %484
  %487 = icmp eq i8 %477, 0
  br i1 %487, label %497, label %488

488:                                              ; preds = %469
  %489 = call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %475) #12
  %490 = bitcast <4 x i32> %489 to <8 x i16>
  %491 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %490, <8 x i16> undef) #12
  %492 = bitcast <16 x i8> %491 to <8 x i16>
  %493 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %492, <8 x i16> undef) #12
  %494 = bitcast <16 x i8> %493 to <4 x i32>
  %495 = extractelement <4 x i32> %494, i32 0
  %496 = load void (i32*, i32, i32)*, void (i32*, i32, i32)** @_ZN6SkOpts8memset32E, align 8
  call void %496(i32* %470, i32 %495, i32 %486) #12
  br label %575

497:                                              ; preds = %469
  %498 = fadd <4 x float> %474, %474
  %499 = fadd <4 x float> %498, %498
  %500 = fadd <4 x float> %473, %475
  %501 = fadd <4 x float> %474, %475
  %502 = fadd <4 x float> %472, %501
  %503 = icmp sgt i32 %486, 3
  br i1 %503, label %504, label %537

504:                                              ; preds = %497
  %505 = fadd <4 x float> %498, %502
  %506 = fadd <4 x float> %498, %500
  br label %507

507:                                              ; preds = %507, %504
  %508 = phi i32* [ %528, %507 ], [ %470, %504 ]
  %509 = phi i32 [ %533, %507 ], [ %486, %504 ]
  %510 = phi <4 x float> [ %532, %507 ], [ %505, %504 ]
  %511 = phi <4 x float> [ %531, %507 ], [ %506, %504 ]
  %512 = phi <4 x float> [ %530, %507 ], [ %502, %504 ]
  %513 = phi <4 x float> [ %529, %507 ], [ %500, %504 ]
  %514 = call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %513) #12
  %515 = call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %512) #12
  %516 = bitcast <4 x i32> %514 to <8 x i16>
  %517 = bitcast <4 x i32> %515 to <8 x i16>
  %518 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %516, <8 x i16> %517) #12
  %519 = call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %511) #12
  %520 = call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %510) #12
  %521 = bitcast <4 x i32> %519 to <8 x i16>
  %522 = bitcast <4 x i32> %520 to <8 x i16>
  %523 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %521, <8 x i16> %522) #12
  %524 = bitcast <16 x i8> %518 to <8 x i16>
  %525 = bitcast <16 x i8> %523 to <8 x i16>
  %526 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %524, <8 x i16> %525) #12
  %527 = bitcast i32* %508 to <16 x i8>*
  store <16 x i8> %526, <16 x i8>* %527, align 1
  %528 = getelementptr inbounds i32, i32* %508, i64 4
  %529 = fadd <4 x float> %499, %513
  %530 = fadd <4 x float> %499, %512
  %531 = fadd <4 x float> %499, %511
  %532 = fadd <4 x float> %499, %510
  %533 = add nsw i32 %509, -4
  %534 = icmp sgt i32 %533, 3
  br i1 %534, label %507, label %535

535:                                              ; preds = %507
  %536 = add nsw i32 %486, -4
  br label %537

537:                                              ; preds = %535, %497
  %538 = phi <4 x float> [ %500, %497 ], [ %529, %535 ]
  %539 = phi <4 x float> [ %502, %497 ], [ %530, %535 ]
  %540 = phi i32 [ %486, %497 ], [ %536, %535 ]
  %541 = phi i32* [ %470, %497 ], [ %528, %535 ]
  %542 = and i32 %540, 2
  %543 = icmp eq i32 %542, 0
  br i1 %543, label %562, label %544

544:                                              ; preds = %537
  %545 = getelementptr inbounds i32, i32* %541, i64 1
  %546 = call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %538) #12
  %547 = bitcast <4 x i32> %546 to <8 x i16>
  %548 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %547, <8 x i16> undef) #12
  %549 = bitcast <16 x i8> %548 to <8 x i16>
  %550 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %549, <8 x i16> undef) #12
  %551 = bitcast <16 x i8> %550 to <4 x i32>
  %552 = extractelement <4 x i32> %551, i32 0
  store i32 %552, i32* %541, align 4
  %553 = getelementptr inbounds i32, i32* %541, i64 2
  %554 = call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %539) #12
  %555 = bitcast <4 x i32> %554 to <8 x i16>
  %556 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %555, <8 x i16> undef) #12
  %557 = bitcast <16 x i8> %556 to <8 x i16>
  %558 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %557, <8 x i16> undef) #12
  %559 = bitcast <16 x i8> %558 to <4 x i32>
  %560 = extractelement <4 x i32> %559, i32 0
  store i32 %560, i32* %545, align 4
  %561 = fadd <4 x float> %498, %538
  br label %562

562:                                              ; preds = %544, %537
  %563 = phi <4 x float> [ %538, %537 ], [ %561, %544 ]
  %564 = phi i32* [ %541, %537 ], [ %553, %544 ]
  %565 = and i32 %540, 1
  %566 = icmp eq i32 %565, 0
  br i1 %566, label %575, label %567

567:                                              ; preds = %562
  %568 = call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %563) #12
  %569 = bitcast <4 x i32> %568 to <8 x i16>
  %570 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %569, <8 x i16> undef) #12
  %571 = bitcast <16 x i8> %570 to <8 x i16>
  %572 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %571, <8 x i16> undef) #12
  %573 = bitcast <16 x i8> %572 to <4 x i32>
  %574 = extractelement <4 x i32> %573, i32 0
  store i32 %574, i32* %564, align 4
  br label %575

575:                                              ; preds = %567, %562, %488
  %576 = sitofp i32 %486 to float
  %577 = fcmp ugt float %476, %576
  br i1 %577, label %613, label %578

578:                                              ; preds = %575, %578
  %579 = phi %struct.Sk4fGradientInterval* [ %585, %578 ], [ %478, %575 ]
  %580 = phi float [ %591, %578 ], [ %476, %575 ]
  %581 = phi float [ %582, %578 ], [ %576, %575 ]
  %582 = fsub float %581, %580
  %583 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %579, i64 1
  %584 = icmp ugt %struct.Sk4fGradientInterval* %583, %346
  %585 = select i1 %584, %struct.Sk4fGradientInterval* %335, %struct.Sk4fGradientInterval* %583
  %586 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %585, i64 0, i32 3
  %587 = load float, float* %586, align 4
  %588 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %585, i64 0, i32 2
  %589 = load float, float* %588, align 4
  %590 = fsub float %587, %589
  %591 = fdiv float %590, %332
  %592 = fcmp ult float %582, %591
  br i1 %592, label %593, label %578

593:                                              ; preds = %578
  %594 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %585, i64 0, i32 1
  %595 = bitcast %struct.SkRGBA4f* %594 to <4 x float>*
  %596 = load <4 x float>, <4 x float>* %595, align 1
  %597 = fmul <4 x float> %596, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %598 = shufflevector <4 x float> %597, <4 x float> undef, <4 x i32> <i32 2, i32 1, i32 0, i32 3>
  %599 = bitcast %struct.Sk4fGradientInterval* %585 to <4 x float>*
  %600 = load <4 x float>, <4 x float>* %599, align 1
  %601 = fmul <4 x float> %600, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %602 = shufflevector <4 x float> %601, <4 x float> undef, <4 x i32> <i32 2, i32 1, i32 0, i32 3>
  %603 = insertelement <4 x float> undef, float %589, i32 0
  %604 = shufflevector <4 x float> %603, <4 x float> undef, <4 x i32> zeroinitializer
  %605 = fmul <4 x float> %604, %598
  %606 = fadd <4 x float> %602, %605
  %607 = fmul <4 x float> %468, %598
  br i1 %389, label %613, label %608

608:                                              ; preds = %593
  %609 = fcmp oeq <4 x float> %598, zeroinitializer
  %610 = bitcast <4 x i1> %609 to i4
  %611 = icmp eq i4 %610, -1
  %612 = zext i1 %611 to i8
  br label %613

613:                                              ; preds = %608, %593, %575
  %614 = phi %struct.Sk4fGradientInterval* [ %478, %575 ], [ %585, %608 ], [ %585, %593 ]
  %615 = phi i8 [ %477, %575 ], [ %612, %608 ], [ 1, %593 ]
  %616 = phi <4 x float> [ %474, %575 ], [ %607, %608 ], [ %607, %593 ]
  %617 = phi float [ %476, %575 ], [ %591, %608 ], [ %591, %593 ]
  %618 = phi <4 x float> [ %475, %575 ], [ %606, %608 ], [ %606, %593 ]
  %619 = phi float [ %576, %575 ], [ %582, %608 ], [ %582, %593 ]
  %620 = insertelement <4 x float> undef, float %619, i32 0
  %621 = shufflevector <4 x float> %620, <4 x float> undef, <4 x i32> zeroinitializer
  %622 = fmul <4 x float> %616, %621
  %623 = fadd <4 x float> %618, %622
  %624 = fsub float %617, %619
  %625 = sub nsw i32 %471, %486
  %626 = sext i32 %486 to i64
  %627 = getelementptr inbounds i32, i32* %470, i64 %626
  %628 = and i32 %486, 1
  %629 = icmp eq i32 %628, 0
  %630 = select i1 %629, <4 x float> %473, <4 x float> %472
  %631 = select i1 %629, <4 x float> %472, <4 x float> %473
  %632 = icmp sgt i32 %625, 0
  br i1 %632, label %469, label %633

633:                                              ; preds = %613, %456
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %306) #12
  br label %2065

634:                                              ; preds = %38
  %635 = bitcast %struct.SkPoint* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %635) #12
  %636 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %6, i64 0, i32 0
  store float 0xFFFFFFFFE0000000, float* %636, align 4
  %637 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %6, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %637, align 4
  %638 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 0, i32 4
  %639 = load void (%class.SkMatrix*, float, float, %struct.SkPoint*)*, void (%class.SkMatrix*, float, float, %struct.SkPoint*)** %638, align 8
  %640 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 0, i32 3
  %641 = sitofp i32 %1 to float
  %642 = fadd float %641, 5.000000e-01
  %643 = sitofp i32 %2 to float
  %644 = fadd float %643, 5.000000e-01
  call void %639(%class.SkMatrix* dereferenceable(40) %640, float %642, float %644, %struct.SkPoint* nonnull %6) #12
  %645 = load float, float* %636, align 4
  %646 = bitcast float %645 to i32
  %647 = and i32 %646, 2139095040
  %648 = icmp eq i32 %647, 2139095040
  br i1 %648, label %657, label %649

649:                                              ; preds = %634
  %650 = call float @fmodf(float %645, float 2.000000e+00) #12
  %651 = fcmp olt float %650, 0.000000e+00
  br i1 %651, label %652, label %657

652:                                              ; preds = %649
  %653 = fadd float %650, 2.000000e+00
  %654 = call float @nextafterf(float 2.000000e+00, float 0.000000e+00) #12
  %655 = fcmp olt float %654, %653
  %656 = select i1 %655, float %654, float %653
  br label %657

657:                                              ; preds = %652, %649, %634
  %658 = phi float [ %656, %652 ], [ %650, %649 ], [ 0.000000e+00, %634 ]
  %659 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %640, i64 0, i32 0, i64 0
  %660 = load float, float* %659, align 4
  %661 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i64 320
  %662 = bitcast i8* %661 to %struct.Sk4fGradientInterval**
  %663 = load %struct.Sk4fGradientInterval*, %struct.Sk4fGradientInterval** %662, align 8
  %664 = icmp eq %struct.Sk4fGradientInterval* %663, null
  br i1 %664, label %672, label %665

665:                                              ; preds = %657
  %666 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i64 328
  %667 = bitcast i8* %666 to i64*
  %668 = load i64, i64* %667, align 8
  %669 = lshr i64 %668, 1
  %670 = and i64 %669, 2147483647
  %671 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %663, i64 %670
  br label %672

672:                                              ; preds = %657, %665
  %673 = phi %struct.Sk4fGradientInterval* [ %671, %665 ], [ null, %657 ]
  %674 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %673, i64 -1
  %675 = fcmp oge float %660, 0.000000e+00
  %676 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 1
  %677 = select i1 %675, i64 1, i64 -1
  %678 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i64 328
  %679 = bitcast i8* %678 to i64*
  %680 = load %struct.Sk4fGradientInterval*, %struct.Sk4fGradientInterval** %676, align 8
  %681 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %663, i64 -1
  br label %682

682:                                              ; preds = %711, %672
  %683 = phi %struct.Sk4fGradientInterval* [ %680, %672 ], [ %712, %711 ]
  %684 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %683, i64 0, i32 2
  %685 = load float, float* %684, align 4
  %686 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %683, i64 0, i32 3
  %687 = load float, float* %686, align 4
  %688 = fcmp olt float %685, %687
  br i1 %688, label %689, label %693

689:                                              ; preds = %682
  %690 = fcmp ole float %685, %658
  %691 = fcmp oge float %687, %658
  %692 = and i1 %690, %691
  br i1 %692, label %713, label %697

693:                                              ; preds = %682
  %694 = fcmp ole float %687, %658
  %695 = fcmp oge float %685, %658
  %696 = and i1 %695, %694
  br i1 %696, label %713, label %697

697:                                              ; preds = %693, %689
  %698 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %683, i64 %677
  store %struct.Sk4fGradientInterval* %698, %struct.Sk4fGradientInterval** %676, align 8
  br i1 %664, label %709, label %699

699:                                              ; preds = %697
  %700 = load i64, i64* %679, align 8
  %701 = lshr i64 %700, 1
  %702 = and i64 %701, 2147483647
  %703 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %663, i64 %702
  %704 = icmp ult %struct.Sk4fGradientInterval* %698, %703
  br i1 %704, label %705, label %709

705:                                              ; preds = %699
  %706 = icmp ult %struct.Sk4fGradientInterval* %698, %663
  br i1 %706, label %707, label %711

707:                                              ; preds = %705
  %708 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %681, i64 %702
  br label %709

709:                                              ; preds = %697, %699, %707
  %710 = phi %struct.Sk4fGradientInterval* [ %708, %707 ], [ %663, %699 ], [ %663, %697 ]
  store %struct.Sk4fGradientInterval* %710, %struct.Sk4fGradientInterval** %676, align 8
  br label %711

711:                                              ; preds = %709, %705
  %712 = phi %struct.Sk4fGradientInterval* [ %698, %705 ], [ %710, %709 ]
  br label %682

713:                                              ; preds = %693, %689
  %714 = sitofp i32 %4 to float
  %715 = fmul float %660, %714
  %716 = call float @llvm.fabs.f32(float %715) #12
  %717 = fcmp ole float %716, 0x3F30000000000000
  br i1 %717, label %761, label %718

718:                                              ; preds = %713
  %719 = fsub float %687, %658
  %720 = fdiv float %719, %660
  %721 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %673, i64 -1, i32 3
  %722 = load float, float* %721, align 4
  %723 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %663, i64 0, i32 2
  %724 = load float, float* %723, align 4
  %725 = fsub float %722, %724
  %726 = fdiv float %725, %660
  %727 = fcmp olt float %726, 2.500000e-01
  br i1 %727, label %728, label %761

728:                                              ; preds = %718
  %729 = icmp ugt %struct.Sk4fGradientInterval* %663, %674
  br i1 %729, label %784, label %730

730:                                              ; preds = %728, %758
  %731 = phi float [ %760, %758 ], [ %724, %728 ]
  %732 = phi <4 x float> [ %755, %758 ], [ zeroinitializer, %728 ]
  %733 = phi %struct.Sk4fGradientInterval* [ %756, %758 ], [ %663, %728 ]
  %734 = bitcast %struct.Sk4fGradientInterval* %733 to <4 x float>*
  %735 = load <4 x float>, <4 x float>* %734, align 1
  %736 = fmul <4 x float> %735, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %737 = shufflevector <4 x float> %736, <4 x float> undef, <4 x i32> <i32 2, i32 1, i32 0, i32 3>
  %738 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %733, i64 0, i32 1
  %739 = bitcast %struct.SkRGBA4f* %738 to <4 x float>*
  %740 = load <4 x float>, <4 x float>* %739, align 1
  %741 = fmul <4 x float> %740, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %742 = shufflevector <4 x float> %741, <4 x float> undef, <4 x i32> <i32 2, i32 1, i32 0, i32 3>
  %743 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %733, i64 0, i32 3
  %744 = load float, float* %743, align 4
  %745 = fadd float %731, %744
  %746 = insertelement <4 x float> undef, float %745, i32 0
  %747 = shufflevector <4 x float> %746, <4 x float> undef, <4 x i32> zeroinitializer
  %748 = fmul <4 x float> %742, %747
  %749 = fmul <4 x float> %748, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %750 = fadd <4 x float> %737, %749
  %751 = fsub float %744, %731
  %752 = insertelement <4 x float> undef, float %751, i32 0
  %753 = shufflevector <4 x float> %752, <4 x float> undef, <4 x i32> zeroinitializer
  %754 = fmul <4 x float> %753, %750
  %755 = fadd <4 x float> %732, %754
  %756 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %733, i64 1
  %757 = icmp ugt %struct.Sk4fGradientInterval* %756, %674
  br i1 %757, label %784, label %758

758:                                              ; preds = %730
  %759 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %733, i64 1, i32 2
  %760 = load float, float* %759, align 4
  br label %730

761:                                              ; preds = %718, %713
  %762 = phi float [ %720, %718 ], [ 0x7FF0000000000000, %713 ]
  %763 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %683, i64 0, i32 1
  %764 = bitcast %struct.SkRGBA4f* %763 to <4 x float>*
  %765 = load <4 x float>, <4 x float>* %764, align 1
  %766 = fmul <4 x float> %765, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %767 = shufflevector <4 x float> %766, <4 x float> undef, <4 x i32> <i32 2, i32 1, i32 0, i32 3>
  %768 = bitcast %struct.Sk4fGradientInterval* %683 to <4 x float>*
  %769 = load <4 x float>, <4 x float>* %768, align 1
  %770 = fmul <4 x float> %769, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %771 = shufflevector <4 x float> %770, <4 x float> undef, <4 x i32> <i32 2, i32 1, i32 0, i32 3>
  %772 = insertelement <4 x float> undef, float %658, i32 0
  %773 = shufflevector <4 x float> %772, <4 x float> undef, <4 x i32> zeroinitializer
  %774 = fmul <4 x float> %773, %767
  %775 = fadd <4 x float> %771, %774
  %776 = insertelement <4 x float> undef, float %660, i32 0
  %777 = shufflevector <4 x float> %776, <4 x float> undef, <4 x i32> zeroinitializer
  %778 = fmul <4 x float> %777, %767
  br i1 %717, label %784, label %779

779:                                              ; preds = %761
  %780 = fcmp oeq <4 x float> %767, zeroinitializer
  %781 = bitcast <4 x i1> %780 to i4
  %782 = icmp eq i4 %781, -1
  %783 = zext i1 %782 to i8
  br label %784

784:                                              ; preds = %730, %779, %761, %728
  %785 = phi i8 [ 1, %728 ], [ 1, %761 ], [ %783, %779 ], [ 1, %730 ]
  %786 = phi float [ 0x7FF0000000000000, %728 ], [ %762, %761 ], [ %762, %779 ], [ 0x7FF0000000000000, %730 ]
  %787 = phi <4 x float> [ zeroinitializer, %728 ], [ %775, %761 ], [ %775, %779 ], [ %755, %730 ]
  %788 = phi <4 x float> [ zeroinitializer, %728 ], [ %778, %761 ], [ %778, %779 ], [ zeroinitializer, %730 ]
  %789 = icmp sgt i32 %4, 0
  br i1 %789, label %790, label %961

790:                                              ; preds = %784
  %791 = insertelement <4 x float> undef, float %41, i32 0
  %792 = shufflevector <4 x float> %791, <4 x float> undef, <4 x i32> zeroinitializer
  %793 = insertelement <4 x float> undef, float %39, i32 0
  %794 = shufflevector <4 x float> %793, <4 x float> undef, <4 x i32> zeroinitializer
  %795 = insertelement <4 x float> undef, float %660, i32 0
  %796 = shufflevector <4 x float> %795, <4 x float> undef, <4 x i32> zeroinitializer
  br label %797

797:                                              ; preds = %941, %790
  %798 = phi i32* [ %3, %790 ], [ %955, %941 ]
  %799 = phi i32 [ %4, %790 ], [ %953, %941 ]
  %800 = phi <4 x float> [ %792, %790 ], [ %959, %941 ]
  %801 = phi <4 x float> [ %794, %790 ], [ %958, %941 ]
  %802 = phi <4 x float> [ %788, %790 ], [ %944, %941 ]
  %803 = phi <4 x float> [ %787, %790 ], [ %951, %941 ]
  %804 = phi float [ %786, %790 ], [ %952, %941 ]
  %805 = phi i8 [ %785, %790 ], [ %943, %941 ]
  %806 = phi %struct.Sk4fGradientInterval* [ %683, %790 ], [ %942, %941 ]
  %807 = fadd float %804, 1.000000e+00
  %808 = fcmp olt float %807, 0x41DFFFFFE0000000
  %809 = select i1 %808, float %807, float 0x41DFFFFFE0000000
  %810 = fcmp ogt float %809, 0xC1DFFFFFE0000000
  %811 = select i1 %810, float %809, float 0xC1DFFFFFE0000000
  %812 = fptosi float %811 to i32
  %813 = icmp slt i32 %799, %812
  %814 = select i1 %813, i32 %799, i32 %812
  %815 = icmp eq i8 %805, 0
  br i1 %815, label %825, label %816

816:                                              ; preds = %797
  %817 = call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %803) #12
  %818 = bitcast <4 x i32> %817 to <8 x i16>
  %819 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %818, <8 x i16> undef) #12
  %820 = bitcast <16 x i8> %819 to <8 x i16>
  %821 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %820, <8 x i16> undef) #12
  %822 = bitcast <16 x i8> %821 to <4 x i32>
  %823 = extractelement <4 x i32> %822, i32 0
  %824 = load void (i32*, i32, i32)*, void (i32*, i32, i32)** @_ZN6SkOpts8memset32E, align 8
  call void %824(i32* %798, i32 %823, i32 %814) #12
  br label %903

825:                                              ; preds = %797
  %826 = fadd <4 x float> %802, %802
  %827 = fadd <4 x float> %826, %826
  %828 = fadd <4 x float> %801, %803
  %829 = fadd <4 x float> %802, %803
  %830 = fadd <4 x float> %800, %829
  %831 = icmp sgt i32 %814, 3
  br i1 %831, label %832, label %865

832:                                              ; preds = %825
  %833 = fadd <4 x float> %826, %830
  %834 = fadd <4 x float> %826, %828
  br label %835

835:                                              ; preds = %835, %832
  %836 = phi i32* [ %856, %835 ], [ %798, %832 ]
  %837 = phi i32 [ %861, %835 ], [ %814, %832 ]
  %838 = phi <4 x float> [ %860, %835 ], [ %833, %832 ]
  %839 = phi <4 x float> [ %859, %835 ], [ %834, %832 ]
  %840 = phi <4 x float> [ %858, %835 ], [ %830, %832 ]
  %841 = phi <4 x float> [ %857, %835 ], [ %828, %832 ]
  %842 = call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %841) #12
  %843 = call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %840) #12
  %844 = bitcast <4 x i32> %842 to <8 x i16>
  %845 = bitcast <4 x i32> %843 to <8 x i16>
  %846 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %844, <8 x i16> %845) #12
  %847 = call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %839) #12
  %848 = call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %838) #12
  %849 = bitcast <4 x i32> %847 to <8 x i16>
  %850 = bitcast <4 x i32> %848 to <8 x i16>
  %851 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %849, <8 x i16> %850) #12
  %852 = bitcast <16 x i8> %846 to <8 x i16>
  %853 = bitcast <16 x i8> %851 to <8 x i16>
  %854 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %852, <8 x i16> %853) #12
  %855 = bitcast i32* %836 to <16 x i8>*
  store <16 x i8> %854, <16 x i8>* %855, align 1
  %856 = getelementptr inbounds i32, i32* %836, i64 4
  %857 = fadd <4 x float> %827, %841
  %858 = fadd <4 x float> %827, %840
  %859 = fadd <4 x float> %827, %839
  %860 = fadd <4 x float> %827, %838
  %861 = add nsw i32 %837, -4
  %862 = icmp sgt i32 %861, 3
  br i1 %862, label %835, label %863

863:                                              ; preds = %835
  %864 = add nsw i32 %814, -4
  br label %865

865:                                              ; preds = %863, %825
  %866 = phi <4 x float> [ %828, %825 ], [ %857, %863 ]
  %867 = phi <4 x float> [ %830, %825 ], [ %858, %863 ]
  %868 = phi i32 [ %814, %825 ], [ %864, %863 ]
  %869 = phi i32* [ %798, %825 ], [ %856, %863 ]
  %870 = and i32 %868, 2
  %871 = icmp eq i32 %870, 0
  br i1 %871, label %890, label %872

872:                                              ; preds = %865
  %873 = getelementptr inbounds i32, i32* %869, i64 1
  %874 = call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %866) #12
  %875 = bitcast <4 x i32> %874 to <8 x i16>
  %876 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %875, <8 x i16> undef) #12
  %877 = bitcast <16 x i8> %876 to <8 x i16>
  %878 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %877, <8 x i16> undef) #12
  %879 = bitcast <16 x i8> %878 to <4 x i32>
  %880 = extractelement <4 x i32> %879, i32 0
  store i32 %880, i32* %869, align 4
  %881 = getelementptr inbounds i32, i32* %869, i64 2
  %882 = call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %867) #12
  %883 = bitcast <4 x i32> %882 to <8 x i16>
  %884 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %883, <8 x i16> undef) #12
  %885 = bitcast <16 x i8> %884 to <8 x i16>
  %886 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %885, <8 x i16> undef) #12
  %887 = bitcast <16 x i8> %886 to <4 x i32>
  %888 = extractelement <4 x i32> %887, i32 0
  store i32 %888, i32* %873, align 4
  %889 = fadd <4 x float> %826, %866
  br label %890

890:                                              ; preds = %872, %865
  %891 = phi <4 x float> [ %866, %865 ], [ %889, %872 ]
  %892 = phi i32* [ %869, %865 ], [ %881, %872 ]
  %893 = and i32 %868, 1
  %894 = icmp eq i32 %893, 0
  br i1 %894, label %903, label %895

895:                                              ; preds = %890
  %896 = call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %891) #12
  %897 = bitcast <4 x i32> %896 to <8 x i16>
  %898 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %897, <8 x i16> undef) #12
  %899 = bitcast <16 x i8> %898 to <8 x i16>
  %900 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %899, <8 x i16> undef) #12
  %901 = bitcast <16 x i8> %900 to <4 x i32>
  %902 = extractelement <4 x i32> %901, i32 0
  store i32 %902, i32* %892, align 4
  br label %903

903:                                              ; preds = %895, %890, %816
  %904 = sitofp i32 %814 to float
  %905 = fcmp ugt float %804, %904
  br i1 %905, label %941, label %906

906:                                              ; preds = %903, %906
  %907 = phi %struct.Sk4fGradientInterval* [ %913, %906 ], [ %806, %903 ]
  %908 = phi float [ %919, %906 ], [ %804, %903 ]
  %909 = phi float [ %910, %906 ], [ %904, %903 ]
  %910 = fsub float %909, %908
  %911 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %907, i64 1
  %912 = icmp ugt %struct.Sk4fGradientInterval* %911, %674
  %913 = select i1 %912, %struct.Sk4fGradientInterval* %663, %struct.Sk4fGradientInterval* %911
  %914 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %913, i64 0, i32 3
  %915 = load float, float* %914, align 4
  %916 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %913, i64 0, i32 2
  %917 = load float, float* %916, align 4
  %918 = fsub float %915, %917
  %919 = fdiv float %918, %660
  %920 = fcmp ult float %910, %919
  br i1 %920, label %921, label %906

921:                                              ; preds = %906
  %922 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %913, i64 0, i32 1
  %923 = bitcast %struct.SkRGBA4f* %922 to <4 x float>*
  %924 = load <4 x float>, <4 x float>* %923, align 1
  %925 = fmul <4 x float> %924, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %926 = shufflevector <4 x float> %925, <4 x float> undef, <4 x i32> <i32 2, i32 1, i32 0, i32 3>
  %927 = bitcast %struct.Sk4fGradientInterval* %913 to <4 x float>*
  %928 = load <4 x float>, <4 x float>* %927, align 1
  %929 = fmul <4 x float> %928, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %930 = shufflevector <4 x float> %929, <4 x float> undef, <4 x i32> <i32 2, i32 1, i32 0, i32 3>
  %931 = insertelement <4 x float> undef, float %917, i32 0
  %932 = shufflevector <4 x float> %931, <4 x float> undef, <4 x i32> zeroinitializer
  %933 = fmul <4 x float> %932, %926
  %934 = fadd <4 x float> %930, %933
  %935 = fmul <4 x float> %796, %926
  br i1 %717, label %941, label %936

936:                                              ; preds = %921
  %937 = fcmp oeq <4 x float> %926, zeroinitializer
  %938 = bitcast <4 x i1> %937 to i4
  %939 = icmp eq i4 %938, -1
  %940 = zext i1 %939 to i8
  br label %941

941:                                              ; preds = %936, %921, %903
  %942 = phi %struct.Sk4fGradientInterval* [ %806, %903 ], [ %913, %936 ], [ %913, %921 ]
  %943 = phi i8 [ %805, %903 ], [ %940, %936 ], [ 1, %921 ]
  %944 = phi <4 x float> [ %802, %903 ], [ %935, %936 ], [ %935, %921 ]
  %945 = phi float [ %804, %903 ], [ %919, %936 ], [ %919, %921 ]
  %946 = phi <4 x float> [ %803, %903 ], [ %934, %936 ], [ %934, %921 ]
  %947 = phi float [ %904, %903 ], [ %910, %936 ], [ %910, %921 ]
  %948 = insertelement <4 x float> undef, float %947, i32 0
  %949 = shufflevector <4 x float> %948, <4 x float> undef, <4 x i32> zeroinitializer
  %950 = fmul <4 x float> %944, %949
  %951 = fadd <4 x float> %946, %950
  %952 = fsub float %945, %947
  %953 = sub nsw i32 %799, %814
  %954 = sext i32 %814 to i64
  %955 = getelementptr inbounds i32, i32* %798, i64 %954
  %956 = and i32 %814, 1
  %957 = icmp eq i32 %956, 0
  %958 = select i1 %957, <4 x float> %801, <4 x float> %800
  %959 = select i1 %957, <4 x float> %800, <4 x float> %801
  %960 = icmp sgt i32 %953, 0
  br i1 %960, label %797, label %961

961:                                              ; preds = %941, %784
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %635) #12
  br label %2065

962:                                              ; preds = %31
  %963 = fmul float %37, 0x3F70101020000000
  %964 = bitcast i32 %33 to float
  %965 = fmul float %964, 0x3F70101020000000
  %966 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 0, i32 0, i32 1
  %967 = bitcast %class.SkShaderBase** %966 to %class.SkGradientShaderBase**
  %968 = load %class.SkGradientShaderBase*, %class.SkGradientShaderBase** %967, align 8
  %969 = getelementptr inbounds %class.SkGradientShaderBase, %class.SkGradientShaderBase* %968, i64 0, i32 2
  %970 = load i32, i32* %969, align 4
  switch i32 %970, label %2065 [
    i32 3, label %971
    i32 0, label %971
    i32 1, label %1290
    i32 2, label %1678
  ]

971:                                              ; preds = %962, %962
  %972 = bitcast %struct.SkPoint* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %972) #12
  %973 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %11, i64 0, i32 0
  store float 0xFFFFFFFFE0000000, float* %973, align 4
  %974 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %11, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %974, align 4
  %975 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 0, i32 4
  %976 = load void (%class.SkMatrix*, float, float, %struct.SkPoint*)*, void (%class.SkMatrix*, float, float, %struct.SkPoint*)** %975, align 8
  %977 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 0, i32 3
  %978 = sitofp i32 %1 to float
  %979 = fadd float %978, 5.000000e-01
  %980 = sitofp i32 %2 to float
  %981 = fadd float %980, 5.000000e-01
  call void %976(%class.SkMatrix* dereferenceable(40) %977, float %979, float %981, %struct.SkPoint* nonnull %11) #12
  %982 = load float, float* %973, align 4
  %983 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %977, i64 0, i32 0, i64 0
  %984 = load float, float* %983, align 4
  %985 = fcmp oge float %984, 0.000000e+00
  %986 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 1
  %987 = select i1 %985, i64 1, i64 -1
  %988 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i64 320
  %989 = bitcast i8* %988 to %struct.Sk4fGradientInterval**
  %990 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i64 328
  %991 = bitcast i8* %990 to i64*
  %992 = load %struct.Sk4fGradientInterval*, %struct.Sk4fGradientInterval** %986, align 8
  br label %993

993:                                              ; preds = %1025, %971
  %994 = phi %struct.Sk4fGradientInterval* [ %992, %971 ], [ %1026, %1025 ]
  %995 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %994, i64 0, i32 2
  %996 = load float, float* %995, align 4
  %997 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %994, i64 0, i32 3
  %998 = load float, float* %997, align 4
  %999 = fcmp olt float %996, %998
  br i1 %999, label %1000, label %1004

1000:                                             ; preds = %993
  %1001 = fcmp ole float %996, %982
  %1002 = fcmp oge float %998, %982
  %1003 = and i1 %1001, %1002
  br i1 %1003, label %1027, label %1008

1004:                                             ; preds = %993
  %1005 = fcmp ole float %998, %982
  %1006 = fcmp oge float %996, %982
  %1007 = and i1 %1006, %1005
  br i1 %1007, label %1027, label %1008

1008:                                             ; preds = %1004, %1000
  %1009 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %994, i64 %987
  store %struct.Sk4fGradientInterval* %1009, %struct.Sk4fGradientInterval** %986, align 8
  %1010 = load %struct.Sk4fGradientInterval*, %struct.Sk4fGradientInterval** %989, align 8
  %1011 = icmp eq %struct.Sk4fGradientInterval* %1010, null
  br i1 %1011, label %1023, label %1012

1012:                                             ; preds = %1008
  %1013 = load i64, i64* %991, align 8
  %1014 = lshr i64 %1013, 1
  %1015 = and i64 %1014, 2147483647
  %1016 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %1010, i64 %1015
  %1017 = icmp ult %struct.Sk4fGradientInterval* %1009, %1016
  br i1 %1017, label %1018, label %1023

1018:                                             ; preds = %1012
  %1019 = icmp ult %struct.Sk4fGradientInterval* %1009, %1010
  br i1 %1019, label %1020, label %1025

1020:                                             ; preds = %1018
  %1021 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %1010, i64 -1
  %1022 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %1021, i64 %1015
  br label %1023

1023:                                             ; preds = %1008, %1012, %1020
  %1024 = phi %struct.Sk4fGradientInterval* [ %1022, %1020 ], [ %1010, %1012 ], [ %1010, %1008 ]
  store %struct.Sk4fGradientInterval* %1024, %struct.Sk4fGradientInterval** %986, align 8
  br label %1025

1025:                                             ; preds = %1023, %1018
  %1026 = phi %struct.Sk4fGradientInterval* [ %1009, %1018 ], [ %1024, %1023 ]
  br label %993

1027:                                             ; preds = %1004, %1000
  %1028 = sitofp i32 %4 to float
  %1029 = fmul float %984, %1028
  %1030 = call float @llvm.fabs.f32(float %1029) #12
  %1031 = fcmp ole float %1030, 0x3F30000000000000
  br i1 %1031, label %1035, label %1032

1032:                                             ; preds = %1027
  %1033 = fsub float %998, %982
  %1034 = fdiv float %1033, %984
  br label %1035

1035:                                             ; preds = %1032, %1027
  %1036 = phi float [ %1034, %1032 ], [ 0x7FF0000000000000, %1027 ]
  %1037 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %994, i64 0, i32 1
  %1038 = bitcast %struct.SkRGBA4f* %1037 to <4 x float>*
  %1039 = load <4 x float>, <4 x float>* %1038, align 1
  %1040 = shufflevector <4 x float> %1039, <4 x float> undef, <4 x i32> <i32 2, i32 1, i32 0, i32 3>
  %1041 = bitcast %struct.Sk4fGradientInterval* %994 to <4 x float>*
  %1042 = load <4 x float>, <4 x float>* %1041, align 1
  %1043 = shufflevector <4 x float> %1042, <4 x float> undef, <4 x i32> <i32 2, i32 1, i32 0, i32 3>
  %1044 = insertelement <4 x float> undef, float %982, i32 0
  %1045 = shufflevector <4 x float> %1044, <4 x float> undef, <4 x i32> zeroinitializer
  %1046 = fmul <4 x float> %1045, %1040
  %1047 = fadd <4 x float> %1043, %1046
  %1048 = insertelement <4 x float> undef, float %984, i32 0
  %1049 = shufflevector <4 x float> %1048, <4 x float> undef, <4 x i32> zeroinitializer
  %1050 = fmul <4 x float> %1049, %1040
  br i1 %1031, label %1056, label %1051

1051:                                             ; preds = %1035
  %1052 = fcmp oeq <4 x float> %1040, zeroinitializer
  %1053 = bitcast <4 x i1> %1052 to i4
  %1054 = icmp eq i4 %1053, -1
  %1055 = zext i1 %1054 to i8
  br label %1056

1056:                                             ; preds = %1051, %1035
  %1057 = phi i8 [ 1, %1035 ], [ %1055, %1051 ]
  %1058 = icmp sgt i32 %4, 0
  br i1 %1058, label %1059, label %1289

1059:                                             ; preds = %1056
  %1060 = insertelement <4 x float> undef, float %965, i32 0
  %1061 = shufflevector <4 x float> %1060, <4 x float> undef, <4 x i32> zeroinitializer
  %1062 = insertelement <4 x float> undef, float %963, i32 0
  %1063 = shufflevector <4 x float> %1062, <4 x float> undef, <4 x i32> zeroinitializer
  br label %1064

1064:                                             ; preds = %1269, %1059
  %1065 = phi i32* [ %1283, %1269 ], [ %3, %1059 ]
  %1066 = phi i32 [ %1281, %1269 ], [ %4, %1059 ]
  %1067 = phi <4 x float> [ %1287, %1269 ], [ %1061, %1059 ]
  %1068 = phi <4 x float> [ %1286, %1269 ], [ %1063, %1059 ]
  %1069 = phi <4 x float> [ %1272, %1269 ], [ %1050, %1059 ]
  %1070 = phi <4 x float> [ %1279, %1269 ], [ %1047, %1059 ]
  %1071 = phi float [ %1280, %1269 ], [ %1036, %1059 ]
  %1072 = phi i8 [ %1271, %1269 ], [ %1057, %1059 ]
  %1073 = phi %struct.Sk4fGradientInterval* [ %1270, %1269 ], [ %994, %1059 ]
  %1074 = fadd float %1071, 1.000000e+00
  %1075 = fcmp olt float %1074, 0x41DFFFFFE0000000
  %1076 = select i1 %1075, float %1074, float 0x41DFFFFFE0000000
  %1077 = fcmp ogt float %1076, 0xC1DFFFFFE0000000
  %1078 = select i1 %1077, float %1076, float 0xC1DFFFFFE0000000
  %1079 = fptosi float %1078 to i32
  %1080 = icmp slt i32 %1066, %1079
  %1081 = select i1 %1080, i32 %1066, i32 %1079
  %1082 = icmp eq i8 %1072, 0
  br i1 %1082, label %1098, label %1083

1083:                                             ; preds = %1064
  %1084 = shufflevector <4 x float> <float undef, float undef, float undef, float 1.000000e+00>, <4 x float> %1070, <4 x i32> <i32 7, i32 undef, i32 undef, i32 3>
  %1085 = shufflevector <4 x float> %1084, <4 x float> %1070, <4 x i32> <i32 0, i32 7, i32 undef, i32 3>
  %1086 = shufflevector <4 x float> %1085, <4 x float> %1070, <4 x i32> <i32 0, i32 1, i32 7, i32 3>
  %1087 = fmul <4 x float> %1070, %1086
  %1088 = fadd <4 x float> %1087, zeroinitializer
  %1089 = fmul <4 x float> %1088, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %1090 = call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %1089) #12
  %1091 = bitcast <4 x i32> %1090 to <8 x i16>
  %1092 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1091, <8 x i16> undef) #12
  %1093 = bitcast <16 x i8> %1092 to <8 x i16>
  %1094 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1093, <8 x i16> undef) #12
  %1095 = bitcast <16 x i8> %1094 to <4 x i32>
  %1096 = extractelement <4 x i32> %1095, i32 0
  %1097 = load void (i32*, i32, i32)*, void (i32*, i32, i32)** @_ZN6SkOpts8memset32E, align 8
  call void %1097(i32* %1065, i32 %1096, i32 %1081) #12
  br label %1235

1098:                                             ; preds = %1064
  %1099 = fadd <4 x float> %1069, %1069
  %1100 = fadd <4 x float> %1099, %1099
  %1101 = fadd <4 x float> %1070, zeroinitializer
  %1102 = fadd <4 x float> %1069, %1070
  %1103 = fadd <4 x float> %1102, zeroinitializer
  %1104 = icmp sgt i32 %1081, 3
  br i1 %1104, label %1105, label %1179

1105:                                             ; preds = %1098
  %1106 = fadd <4 x float> %1099, %1103
  %1107 = fadd <4 x float> %1099, %1101
  br label %1108

1108:                                             ; preds = %1108, %1105
  %1109 = phi i32* [ %1065, %1105 ], [ %1170, %1108 ]
  %1110 = phi i32 [ %1081, %1105 ], [ %1175, %1108 ]
  %1111 = phi <4 x float> [ %1106, %1105 ], [ %1174, %1108 ]
  %1112 = phi <4 x float> [ %1107, %1105 ], [ %1173, %1108 ]
  %1113 = phi <4 x float> [ %1103, %1105 ], [ %1172, %1108 ]
  %1114 = phi <4 x float> [ %1101, %1105 ], [ %1171, %1108 ]
  %1115 = shufflevector <4 x float> <float undef, float undef, float undef, float 1.000000e+00>, <4 x float> %1114, <4 x i32> <i32 7, i32 undef, i32 undef, i32 3>
  %1116 = shufflevector <4 x float> %1115, <4 x float> %1114, <4 x i32> <i32 0, i32 7, i32 undef, i32 3>
  %1117 = shufflevector <4 x float> %1116, <4 x float> %1114, <4 x i32> <i32 0, i32 1, i32 7, i32 3>
  %1118 = fmul <4 x float> %1114, %1117
  %1119 = fadd <4 x float> %1068, %1118
  %1120 = fmul <4 x float> %1119, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %1121 = call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %1120) #12
  %1122 = bitcast <4 x i32> %1121 to <8 x i16>
  %1123 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1122, <8 x i16> undef) #12
  %1124 = bitcast <16 x i8> %1123 to <8 x i16>
  %1125 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1124, <8 x i16> undef) #12
  %1126 = bitcast <16 x i8> %1125 to <4 x i32>
  %1127 = extractelement <4 x i32> %1126, i32 0
  store i32 %1127, i32* %1109, align 4
  %1128 = getelementptr inbounds i32, i32* %1109, i64 1
  %1129 = shufflevector <4 x float> <float undef, float undef, float undef, float 1.000000e+00>, <4 x float> %1113, <4 x i32> <i32 7, i32 undef, i32 undef, i32 3>
  %1130 = shufflevector <4 x float> %1129, <4 x float> %1113, <4 x i32> <i32 0, i32 7, i32 undef, i32 3>
  %1131 = shufflevector <4 x float> %1130, <4 x float> %1113, <4 x i32> <i32 0, i32 1, i32 7, i32 3>
  %1132 = fmul <4 x float> %1113, %1131
  %1133 = fadd <4 x float> %1067, %1132
  %1134 = fmul <4 x float> %1133, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %1135 = call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %1134) #12
  %1136 = bitcast <4 x i32> %1135 to <8 x i16>
  %1137 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1136, <8 x i16> undef) #12
  %1138 = bitcast <16 x i8> %1137 to <8 x i16>
  %1139 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1138, <8 x i16> undef) #12
  %1140 = bitcast <16 x i8> %1139 to <4 x i32>
  %1141 = extractelement <4 x i32> %1140, i32 0
  store i32 %1141, i32* %1128, align 4
  %1142 = getelementptr inbounds i32, i32* %1109, i64 2
  %1143 = shufflevector <4 x float> <float undef, float undef, float undef, float 1.000000e+00>, <4 x float> %1112, <4 x i32> <i32 7, i32 undef, i32 undef, i32 3>
  %1144 = shufflevector <4 x float> %1143, <4 x float> %1112, <4 x i32> <i32 0, i32 7, i32 undef, i32 3>
  %1145 = shufflevector <4 x float> %1144, <4 x float> %1112, <4 x i32> <i32 0, i32 1, i32 7, i32 3>
  %1146 = fmul <4 x float> %1112, %1145
  %1147 = fadd <4 x float> %1068, %1146
  %1148 = fmul <4 x float> %1147, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %1149 = call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %1148) #12
  %1150 = bitcast <4 x i32> %1149 to <8 x i16>
  %1151 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1150, <8 x i16> undef) #12
  %1152 = bitcast <16 x i8> %1151 to <8 x i16>
  %1153 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1152, <8 x i16> undef) #12
  %1154 = bitcast <16 x i8> %1153 to <4 x i32>
  %1155 = extractelement <4 x i32> %1154, i32 0
  store i32 %1155, i32* %1142, align 4
  %1156 = getelementptr inbounds i32, i32* %1109, i64 3
  %1157 = shufflevector <4 x float> <float undef, float undef, float undef, float 1.000000e+00>, <4 x float> %1111, <4 x i32> <i32 7, i32 undef, i32 undef, i32 3>
  %1158 = shufflevector <4 x float> %1157, <4 x float> %1111, <4 x i32> <i32 0, i32 7, i32 undef, i32 3>
  %1159 = shufflevector <4 x float> %1158, <4 x float> %1111, <4 x i32> <i32 0, i32 1, i32 7, i32 3>
  %1160 = fmul <4 x float> %1111, %1159
  %1161 = fadd <4 x float> %1067, %1160
  %1162 = fmul <4 x float> %1161, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %1163 = call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %1162) #12
  %1164 = bitcast <4 x i32> %1163 to <8 x i16>
  %1165 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1164, <8 x i16> undef) #12
  %1166 = bitcast <16 x i8> %1165 to <8 x i16>
  %1167 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1166, <8 x i16> undef) #12
  %1168 = bitcast <16 x i8> %1167 to <4 x i32>
  %1169 = extractelement <4 x i32> %1168, i32 0
  store i32 %1169, i32* %1156, align 4
  %1170 = getelementptr inbounds i32, i32* %1109, i64 4
  %1171 = fadd <4 x float> %1100, %1114
  %1172 = fadd <4 x float> %1100, %1113
  %1173 = fadd <4 x float> %1100, %1112
  %1174 = fadd <4 x float> %1100, %1111
  %1175 = add nsw i32 %1110, -4
  %1176 = icmp sgt i32 %1175, 3
  br i1 %1176, label %1108, label %1177

1177:                                             ; preds = %1108
  %1178 = add nsw i32 %1081, -4
  br label %1179

1179:                                             ; preds = %1177, %1098
  %1180 = phi <4 x float> [ %1101, %1098 ], [ %1171, %1177 ]
  %1181 = phi <4 x float> [ %1103, %1098 ], [ %1172, %1177 ]
  %1182 = phi i32 [ %1081, %1098 ], [ %1178, %1177 ]
  %1183 = phi i32* [ %1065, %1098 ], [ %1170, %1177 ]
  %1184 = and i32 %1182, 2
  %1185 = icmp eq i32 %1184, 0
  br i1 %1185, label %1216, label %1186

1186:                                             ; preds = %1179
  %1187 = getelementptr inbounds i32, i32* %1183, i64 1
  %1188 = shufflevector <4 x float> <float undef, float undef, float undef, float 1.000000e+00>, <4 x float> %1180, <4 x i32> <i32 7, i32 undef, i32 undef, i32 3>
  %1189 = shufflevector <4 x float> %1188, <4 x float> %1180, <4 x i32> <i32 0, i32 7, i32 undef, i32 3>
  %1190 = shufflevector <4 x float> %1189, <4 x float> %1180, <4 x i32> <i32 0, i32 1, i32 7, i32 3>
  %1191 = fmul <4 x float> %1180, %1190
  %1192 = fadd <4 x float> %1068, %1191
  %1193 = fmul <4 x float> %1192, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %1194 = call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %1193) #12
  %1195 = bitcast <4 x i32> %1194 to <8 x i16>
  %1196 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1195, <8 x i16> undef) #12
  %1197 = bitcast <16 x i8> %1196 to <8 x i16>
  %1198 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1197, <8 x i16> undef) #12
  %1199 = bitcast <16 x i8> %1198 to <4 x i32>
  %1200 = extractelement <4 x i32> %1199, i32 0
  store i32 %1200, i32* %1183, align 4
  %1201 = getelementptr inbounds i32, i32* %1183, i64 2
  %1202 = shufflevector <4 x float> <float undef, float undef, float undef, float 1.000000e+00>, <4 x float> %1181, <4 x i32> <i32 7, i32 undef, i32 undef, i32 3>
  %1203 = shufflevector <4 x float> %1202, <4 x float> %1181, <4 x i32> <i32 0, i32 7, i32 undef, i32 3>
  %1204 = shufflevector <4 x float> %1203, <4 x float> %1181, <4 x i32> <i32 0, i32 1, i32 7, i32 3>
  %1205 = fmul <4 x float> %1181, %1204
  %1206 = fadd <4 x float> %1067, %1205
  %1207 = fmul <4 x float> %1206, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %1208 = call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %1207) #12
  %1209 = bitcast <4 x i32> %1208 to <8 x i16>
  %1210 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1209, <8 x i16> undef) #12
  %1211 = bitcast <16 x i8> %1210 to <8 x i16>
  %1212 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1211, <8 x i16> undef) #12
  %1213 = bitcast <16 x i8> %1212 to <4 x i32>
  %1214 = extractelement <4 x i32> %1213, i32 0
  store i32 %1214, i32* %1187, align 4
  %1215 = fadd <4 x float> %1099, %1180
  br label %1216

1216:                                             ; preds = %1186, %1179
  %1217 = phi <4 x float> [ %1180, %1179 ], [ %1215, %1186 ]
  %1218 = phi i32* [ %1183, %1179 ], [ %1201, %1186 ]
  %1219 = and i32 %1182, 1
  %1220 = icmp eq i32 %1219, 0
  br i1 %1220, label %1235, label %1221

1221:                                             ; preds = %1216
  %1222 = shufflevector <4 x float> <float undef, float undef, float undef, float 1.000000e+00>, <4 x float> %1217, <4 x i32> <i32 7, i32 undef, i32 undef, i32 3>
  %1223 = shufflevector <4 x float> %1222, <4 x float> %1217, <4 x i32> <i32 0, i32 7, i32 undef, i32 3>
  %1224 = shufflevector <4 x float> %1223, <4 x float> %1217, <4 x i32> <i32 0, i32 1, i32 7, i32 3>
  %1225 = fmul <4 x float> %1217, %1224
  %1226 = fadd <4 x float> %1068, %1225
  %1227 = fmul <4 x float> %1226, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %1228 = call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %1227) #12
  %1229 = bitcast <4 x i32> %1228 to <8 x i16>
  %1230 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1229, <8 x i16> undef) #12
  %1231 = bitcast <16 x i8> %1230 to <8 x i16>
  %1232 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1231, <8 x i16> undef) #12
  %1233 = bitcast <16 x i8> %1232 to <4 x i32>
  %1234 = extractelement <4 x i32> %1233, i32 0
  store i32 %1234, i32* %1218, align 4
  br label %1235

1235:                                             ; preds = %1221, %1216, %1083
  %1236 = sitofp i32 %1081 to float
  %1237 = fcmp ugt float %1071, %1236
  br i1 %1237, label %1269, label %1238

1238:                                             ; preds = %1235, %1238
  %1239 = phi %struct.Sk4fGradientInterval* [ %1243, %1238 ], [ %1073, %1235 ]
  %1240 = phi float [ %1249, %1238 ], [ %1071, %1235 ]
  %1241 = phi float [ %1242, %1238 ], [ %1236, %1235 ]
  %1242 = fsub float %1241, %1240
  %1243 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %1239, i64 1
  %1244 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %1239, i64 1, i32 3
  %1245 = load float, float* %1244, align 4
  %1246 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %1239, i64 1, i32 2
  %1247 = load float, float* %1246, align 4
  %1248 = fsub float %1245, %1247
  %1249 = fdiv float %1248, %984
  %1250 = fcmp ult float %1242, %1249
  br i1 %1250, label %1251, label %1238

1251:                                             ; preds = %1238
  %1252 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %1239, i64 1, i32 1
  %1253 = bitcast %struct.SkRGBA4f* %1252 to <4 x float>*
  %1254 = load <4 x float>, <4 x float>* %1253, align 1
  %1255 = shufflevector <4 x float> %1254, <4 x float> undef, <4 x i32> <i32 2, i32 1, i32 0, i32 3>
  %1256 = bitcast %struct.Sk4fGradientInterval* %1243 to <4 x float>*
  %1257 = load <4 x float>, <4 x float>* %1256, align 1
  %1258 = shufflevector <4 x float> %1257, <4 x float> undef, <4 x i32> <i32 2, i32 1, i32 0, i32 3>
  %1259 = insertelement <4 x float> undef, float %1247, i32 0
  %1260 = shufflevector <4 x float> %1259, <4 x float> undef, <4 x i32> zeroinitializer
  %1261 = fmul <4 x float> %1260, %1255
  %1262 = fadd <4 x float> %1258, %1261
  %1263 = fmul <4 x float> %1049, %1255
  br i1 %1031, label %1269, label %1264

1264:                                             ; preds = %1251
  %1265 = fcmp oeq <4 x float> %1255, zeroinitializer
  %1266 = bitcast <4 x i1> %1265 to i4
  %1267 = icmp eq i4 %1266, -1
  %1268 = zext i1 %1267 to i8
  br label %1269

1269:                                             ; preds = %1264, %1251, %1235
  %1270 = phi %struct.Sk4fGradientInterval* [ %1073, %1235 ], [ %1243, %1264 ], [ %1243, %1251 ]
  %1271 = phi i8 [ %1072, %1235 ], [ %1268, %1264 ], [ 1, %1251 ]
  %1272 = phi <4 x float> [ %1069, %1235 ], [ %1263, %1264 ], [ %1263, %1251 ]
  %1273 = phi float [ %1071, %1235 ], [ %1249, %1264 ], [ %1249, %1251 ]
  %1274 = phi <4 x float> [ %1070, %1235 ], [ %1262, %1264 ], [ %1262, %1251 ]
  %1275 = phi float [ %1236, %1235 ], [ %1242, %1264 ], [ %1242, %1251 ]
  %1276 = insertelement <4 x float> undef, float %1275, i32 0
  %1277 = shufflevector <4 x float> %1276, <4 x float> undef, <4 x i32> zeroinitializer
  %1278 = fmul <4 x float> %1272, %1277
  %1279 = fadd <4 x float> %1274, %1278
  %1280 = fsub float %1273, %1275
  %1281 = sub nsw i32 %1066, %1081
  %1282 = sext i32 %1081 to i64
  %1283 = getelementptr inbounds i32, i32* %1065, i64 %1282
  %1284 = and i32 %1081, 1
  %1285 = icmp eq i32 %1284, 0
  %1286 = select i1 %1285, <4 x float> %1068, <4 x float> %1067
  %1287 = select i1 %1285, <4 x float> %1067, <4 x float> %1068
  %1288 = icmp sgt i32 %1281, 0
  br i1 %1288, label %1064, label %1289

1289:                                             ; preds = %1269, %1056
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %972) #12
  br label %2065

1290:                                             ; preds = %962
  %1291 = bitcast %struct.SkPoint* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1291) #12
  %1292 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %10, i64 0, i32 0
  store float 0xFFFFFFFFE0000000, float* %1292, align 4
  %1293 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %10, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %1293, align 4
  %1294 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 0, i32 4
  %1295 = load void (%class.SkMatrix*, float, float, %struct.SkPoint*)*, void (%class.SkMatrix*, float, float, %struct.SkPoint*)** %1294, align 8
  %1296 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 0, i32 3
  %1297 = sitofp i32 %1 to float
  %1298 = fadd float %1297, 5.000000e-01
  %1299 = sitofp i32 %2 to float
  %1300 = fadd float %1299, 5.000000e-01
  call void %1295(%class.SkMatrix* dereferenceable(40) %1296, float %1298, float %1300, %struct.SkPoint* nonnull %10) #12
  %1301 = load float, float* %1292, align 4
  %1302 = bitcast float %1301 to i32
  %1303 = and i32 %1302, 2139095040
  %1304 = icmp eq i32 %1303, 2139095040
  br i1 %1304, label %1314, label %1305

1305:                                             ; preds = %1290
  %1306 = call float @llvm.trunc.f32(float %1301) #12
  %1307 = fsub float %1301, %1306
  %1308 = fcmp olt float %1307, 0.000000e+00
  br i1 %1308, label %1309, label %1314

1309:                                             ; preds = %1305
  %1310 = fadd float %1307, 1.000000e+00
  %1311 = call float @nextafterf(float 1.000000e+00, float 0.000000e+00) #12
  %1312 = fcmp olt float %1311, %1310
  %1313 = select i1 %1312, float %1311, float %1310
  br label %1314

1314:                                             ; preds = %1309, %1305, %1290
  %1315 = phi float [ %1313, %1309 ], [ %1307, %1305 ], [ 0.000000e+00, %1290 ]
  %1316 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1296, i64 0, i32 0, i64 0
  %1317 = load float, float* %1316, align 4
  %1318 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i64 320
  %1319 = bitcast i8* %1318 to %struct.Sk4fGradientInterval**
  %1320 = load %struct.Sk4fGradientInterval*, %struct.Sk4fGradientInterval** %1319, align 8
  %1321 = icmp eq %struct.Sk4fGradientInterval* %1320, null
  br i1 %1321, label %1329, label %1322

1322:                                             ; preds = %1314
  %1323 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i64 328
  %1324 = bitcast i8* %1323 to i64*
  %1325 = load i64, i64* %1324, align 8
  %1326 = lshr i64 %1325, 1
  %1327 = and i64 %1326, 2147483647
  %1328 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %1320, i64 %1327
  br label %1329

1329:                                             ; preds = %1314, %1322
  %1330 = phi %struct.Sk4fGradientInterval* [ %1328, %1322 ], [ null, %1314 ]
  %1331 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %1330, i64 -1
  %1332 = fcmp oge float %1317, 0.000000e+00
  %1333 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 1
  %1334 = select i1 %1332, i64 1, i64 -1
  %1335 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i64 328
  %1336 = bitcast i8* %1335 to i64*
  %1337 = load %struct.Sk4fGradientInterval*, %struct.Sk4fGradientInterval** %1333, align 8
  %1338 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %1320, i64 -1
  br label %1339

1339:                                             ; preds = %1368, %1329
  %1340 = phi %struct.Sk4fGradientInterval* [ %1337, %1329 ], [ %1369, %1368 ]
  %1341 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %1340, i64 0, i32 2
  %1342 = load float, float* %1341, align 4
  %1343 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %1340, i64 0, i32 3
  %1344 = load float, float* %1343, align 4
  %1345 = fcmp olt float %1342, %1344
  br i1 %1345, label %1346, label %1350

1346:                                             ; preds = %1339
  %1347 = fcmp ole float %1342, %1315
  %1348 = fcmp oge float %1344, %1315
  %1349 = and i1 %1347, %1348
  br i1 %1349, label %1370, label %1354

1350:                                             ; preds = %1339
  %1351 = fcmp ole float %1344, %1315
  %1352 = fcmp oge float %1342, %1315
  %1353 = and i1 %1352, %1351
  br i1 %1353, label %1370, label %1354

1354:                                             ; preds = %1350, %1346
  %1355 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %1340, i64 %1334
  store %struct.Sk4fGradientInterval* %1355, %struct.Sk4fGradientInterval** %1333, align 8
  br i1 %1321, label %1366, label %1356

1356:                                             ; preds = %1354
  %1357 = load i64, i64* %1336, align 8
  %1358 = lshr i64 %1357, 1
  %1359 = and i64 %1358, 2147483647
  %1360 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %1320, i64 %1359
  %1361 = icmp ult %struct.Sk4fGradientInterval* %1355, %1360
  br i1 %1361, label %1362, label %1366

1362:                                             ; preds = %1356
  %1363 = icmp ult %struct.Sk4fGradientInterval* %1355, %1320
  br i1 %1363, label %1364, label %1368

1364:                                             ; preds = %1362
  %1365 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %1338, i64 %1359
  br label %1366

1366:                                             ; preds = %1354, %1356, %1364
  %1367 = phi %struct.Sk4fGradientInterval* [ %1365, %1364 ], [ %1320, %1356 ], [ %1320, %1354 ]
  store %struct.Sk4fGradientInterval* %1367, %struct.Sk4fGradientInterval** %1333, align 8
  br label %1368

1368:                                             ; preds = %1366, %1362
  %1369 = phi %struct.Sk4fGradientInterval* [ %1355, %1362 ], [ %1367, %1366 ]
  br label %1339

1370:                                             ; preds = %1350, %1346
  %1371 = sitofp i32 %4 to float
  %1372 = fmul float %1317, %1371
  %1373 = call float @llvm.fabs.f32(float %1372) #12
  %1374 = fcmp ole float %1373, 0x3F30000000000000
  br i1 %1374, label %1416, label %1375

1375:                                             ; preds = %1370
  %1376 = fsub float %1344, %1315
  %1377 = fdiv float %1376, %1317
  %1378 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %1330, i64 -1, i32 3
  %1379 = load float, float* %1378, align 4
  %1380 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %1320, i64 0, i32 2
  %1381 = load float, float* %1380, align 4
  %1382 = fsub float %1379, %1381
  %1383 = fdiv float %1382, %1317
  %1384 = fcmp olt float %1383, 2.500000e-01
  br i1 %1384, label %1385, label %1416

1385:                                             ; preds = %1375
  %1386 = icmp ugt %struct.Sk4fGradientInterval* %1320, %1331
  br i1 %1386, label %1437, label %1387

1387:                                             ; preds = %1385, %1413
  %1388 = phi float [ %1415, %1413 ], [ %1381, %1385 ]
  %1389 = phi <4 x float> [ %1410, %1413 ], [ zeroinitializer, %1385 ]
  %1390 = phi %struct.Sk4fGradientInterval* [ %1411, %1413 ], [ %1320, %1385 ]
  %1391 = bitcast %struct.Sk4fGradientInterval* %1390 to <4 x float>*
  %1392 = load <4 x float>, <4 x float>* %1391, align 1
  %1393 = shufflevector <4 x float> %1392, <4 x float> undef, <4 x i32> <i32 2, i32 1, i32 0, i32 3>
  %1394 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %1390, i64 0, i32 1
  %1395 = bitcast %struct.SkRGBA4f* %1394 to <4 x float>*
  %1396 = load <4 x float>, <4 x float>* %1395, align 1
  %1397 = shufflevector <4 x float> %1396, <4 x float> undef, <4 x i32> <i32 2, i32 1, i32 0, i32 3>
  %1398 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %1390, i64 0, i32 3
  %1399 = load float, float* %1398, align 4
  %1400 = fadd float %1388, %1399
  %1401 = insertelement <4 x float> undef, float %1400, i32 0
  %1402 = shufflevector <4 x float> %1401, <4 x float> undef, <4 x i32> zeroinitializer
  %1403 = fmul <4 x float> %1397, %1402
  %1404 = fmul <4 x float> %1403, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %1405 = fadd <4 x float> %1393, %1404
  %1406 = fsub float %1399, %1388
  %1407 = insertelement <4 x float> undef, float %1406, i32 0
  %1408 = shufflevector <4 x float> %1407, <4 x float> undef, <4 x i32> zeroinitializer
  %1409 = fmul <4 x float> %1408, %1405
  %1410 = fadd <4 x float> %1389, %1409
  %1411 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %1390, i64 1
  %1412 = icmp ugt %struct.Sk4fGradientInterval* %1411, %1331
  br i1 %1412, label %1437, label %1413

1413:                                             ; preds = %1387
  %1414 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %1390, i64 1, i32 2
  %1415 = load float, float* %1414, align 4
  br label %1387

1416:                                             ; preds = %1375, %1370
  %1417 = phi float [ %1377, %1375 ], [ 0x7FF0000000000000, %1370 ]
  %1418 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %1340, i64 0, i32 1
  %1419 = bitcast %struct.SkRGBA4f* %1418 to <4 x float>*
  %1420 = load <4 x float>, <4 x float>* %1419, align 1
  %1421 = shufflevector <4 x float> %1420, <4 x float> undef, <4 x i32> <i32 2, i32 1, i32 0, i32 3>
  %1422 = bitcast %struct.Sk4fGradientInterval* %1340 to <4 x float>*
  %1423 = load <4 x float>, <4 x float>* %1422, align 1
  %1424 = shufflevector <4 x float> %1423, <4 x float> undef, <4 x i32> <i32 2, i32 1, i32 0, i32 3>
  %1425 = insertelement <4 x float> undef, float %1315, i32 0
  %1426 = shufflevector <4 x float> %1425, <4 x float> undef, <4 x i32> zeroinitializer
  %1427 = fmul <4 x float> %1426, %1421
  %1428 = fadd <4 x float> %1424, %1427
  %1429 = insertelement <4 x float> undef, float %1317, i32 0
  %1430 = shufflevector <4 x float> %1429, <4 x float> undef, <4 x i32> zeroinitializer
  %1431 = fmul <4 x float> %1430, %1421
  br i1 %1374, label %1437, label %1432

1432:                                             ; preds = %1416
  %1433 = fcmp oeq <4 x float> %1421, zeroinitializer
  %1434 = bitcast <4 x i1> %1433 to i4
  %1435 = icmp eq i4 %1434, -1
  %1436 = zext i1 %1435 to i8
  br label %1437

1437:                                             ; preds = %1387, %1432, %1416, %1385
  %1438 = phi i8 [ 1, %1385 ], [ 1, %1416 ], [ %1436, %1432 ], [ 1, %1387 ]
  %1439 = phi float [ 0x7FF0000000000000, %1385 ], [ %1417, %1416 ], [ %1417, %1432 ], [ 0x7FF0000000000000, %1387 ]
  %1440 = phi <4 x float> [ zeroinitializer, %1385 ], [ %1428, %1416 ], [ %1428, %1432 ], [ %1410, %1387 ]
  %1441 = phi <4 x float> [ zeroinitializer, %1385 ], [ %1431, %1416 ], [ %1431, %1432 ], [ zeroinitializer, %1387 ]
  %1442 = icmp sgt i32 %4, 0
  br i1 %1442, label %1443, label %1677

1443:                                             ; preds = %1437
  %1444 = insertelement <4 x float> undef, float %965, i32 0
  %1445 = shufflevector <4 x float> %1444, <4 x float> undef, <4 x i32> zeroinitializer
  %1446 = insertelement <4 x float> undef, float %963, i32 0
  %1447 = shufflevector <4 x float> %1446, <4 x float> undef, <4 x i32> zeroinitializer
  %1448 = insertelement <4 x float> undef, float %1317, i32 0
  %1449 = shufflevector <4 x float> %1448, <4 x float> undef, <4 x i32> zeroinitializer
  br label %1450

1450:                                             ; preds = %1657, %1443
  %1451 = phi i32* [ %3, %1443 ], [ %1671, %1657 ]
  %1452 = phi i32 [ %4, %1443 ], [ %1669, %1657 ]
  %1453 = phi <4 x float> [ %1445, %1443 ], [ %1675, %1657 ]
  %1454 = phi <4 x float> [ %1447, %1443 ], [ %1674, %1657 ]
  %1455 = phi <4 x float> [ %1441, %1443 ], [ %1660, %1657 ]
  %1456 = phi <4 x float> [ %1440, %1443 ], [ %1667, %1657 ]
  %1457 = phi float [ %1439, %1443 ], [ %1668, %1657 ]
  %1458 = phi i8 [ %1438, %1443 ], [ %1659, %1657 ]
  %1459 = phi %struct.Sk4fGradientInterval* [ %1340, %1443 ], [ %1658, %1657 ]
  %1460 = fadd float %1457, 1.000000e+00
  %1461 = fcmp olt float %1460, 0x41DFFFFFE0000000
  %1462 = select i1 %1461, float %1460, float 0x41DFFFFFE0000000
  %1463 = fcmp ogt float %1462, 0xC1DFFFFFE0000000
  %1464 = select i1 %1463, float %1462, float 0xC1DFFFFFE0000000
  %1465 = fptosi float %1464 to i32
  %1466 = icmp slt i32 %1452, %1465
  %1467 = select i1 %1466, i32 %1452, i32 %1465
  %1468 = icmp eq i8 %1458, 0
  br i1 %1468, label %1484, label %1469

1469:                                             ; preds = %1450
  %1470 = shufflevector <4 x float> <float undef, float undef, float undef, float 1.000000e+00>, <4 x float> %1456, <4 x i32> <i32 7, i32 undef, i32 undef, i32 3>
  %1471 = shufflevector <4 x float> %1470, <4 x float> %1456, <4 x i32> <i32 0, i32 7, i32 undef, i32 3>
  %1472 = shufflevector <4 x float> %1471, <4 x float> %1456, <4 x i32> <i32 0, i32 1, i32 7, i32 3>
  %1473 = fmul <4 x float> %1456, %1472
  %1474 = fadd <4 x float> %1473, zeroinitializer
  %1475 = fmul <4 x float> %1474, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %1476 = call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %1475) #12
  %1477 = bitcast <4 x i32> %1476 to <8 x i16>
  %1478 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1477, <8 x i16> undef) #12
  %1479 = bitcast <16 x i8> %1478 to <8 x i16>
  %1480 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1479, <8 x i16> undef) #12
  %1481 = bitcast <16 x i8> %1480 to <4 x i32>
  %1482 = extractelement <4 x i32> %1481, i32 0
  %1483 = load void (i32*, i32, i32)*, void (i32*, i32, i32)** @_ZN6SkOpts8memset32E, align 8
  call void %1483(i32* %1451, i32 %1482, i32 %1467) #12
  br label %1621

1484:                                             ; preds = %1450
  %1485 = fadd <4 x float> %1455, %1455
  %1486 = fadd <4 x float> %1485, %1485
  %1487 = fadd <4 x float> %1456, zeroinitializer
  %1488 = fadd <4 x float> %1455, %1456
  %1489 = fadd <4 x float> %1488, zeroinitializer
  %1490 = icmp sgt i32 %1467, 3
  br i1 %1490, label %1491, label %1565

1491:                                             ; preds = %1484
  %1492 = fadd <4 x float> %1485, %1489
  %1493 = fadd <4 x float> %1485, %1487
  br label %1494

1494:                                             ; preds = %1494, %1491
  %1495 = phi i32* [ %1451, %1491 ], [ %1556, %1494 ]
  %1496 = phi i32 [ %1467, %1491 ], [ %1561, %1494 ]
  %1497 = phi <4 x float> [ %1492, %1491 ], [ %1560, %1494 ]
  %1498 = phi <4 x float> [ %1493, %1491 ], [ %1559, %1494 ]
  %1499 = phi <4 x float> [ %1489, %1491 ], [ %1558, %1494 ]
  %1500 = phi <4 x float> [ %1487, %1491 ], [ %1557, %1494 ]
  %1501 = shufflevector <4 x float> <float undef, float undef, float undef, float 1.000000e+00>, <4 x float> %1500, <4 x i32> <i32 7, i32 undef, i32 undef, i32 3>
  %1502 = shufflevector <4 x float> %1501, <4 x float> %1500, <4 x i32> <i32 0, i32 7, i32 undef, i32 3>
  %1503 = shufflevector <4 x float> %1502, <4 x float> %1500, <4 x i32> <i32 0, i32 1, i32 7, i32 3>
  %1504 = fmul <4 x float> %1500, %1503
  %1505 = fadd <4 x float> %1454, %1504
  %1506 = fmul <4 x float> %1505, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %1507 = call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %1506) #12
  %1508 = bitcast <4 x i32> %1507 to <8 x i16>
  %1509 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1508, <8 x i16> undef) #12
  %1510 = bitcast <16 x i8> %1509 to <8 x i16>
  %1511 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1510, <8 x i16> undef) #12
  %1512 = bitcast <16 x i8> %1511 to <4 x i32>
  %1513 = extractelement <4 x i32> %1512, i32 0
  store i32 %1513, i32* %1495, align 4
  %1514 = getelementptr inbounds i32, i32* %1495, i64 1
  %1515 = shufflevector <4 x float> <float undef, float undef, float undef, float 1.000000e+00>, <4 x float> %1499, <4 x i32> <i32 7, i32 undef, i32 undef, i32 3>
  %1516 = shufflevector <4 x float> %1515, <4 x float> %1499, <4 x i32> <i32 0, i32 7, i32 undef, i32 3>
  %1517 = shufflevector <4 x float> %1516, <4 x float> %1499, <4 x i32> <i32 0, i32 1, i32 7, i32 3>
  %1518 = fmul <4 x float> %1499, %1517
  %1519 = fadd <4 x float> %1453, %1518
  %1520 = fmul <4 x float> %1519, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %1521 = call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %1520) #12
  %1522 = bitcast <4 x i32> %1521 to <8 x i16>
  %1523 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1522, <8 x i16> undef) #12
  %1524 = bitcast <16 x i8> %1523 to <8 x i16>
  %1525 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1524, <8 x i16> undef) #12
  %1526 = bitcast <16 x i8> %1525 to <4 x i32>
  %1527 = extractelement <4 x i32> %1526, i32 0
  store i32 %1527, i32* %1514, align 4
  %1528 = getelementptr inbounds i32, i32* %1495, i64 2
  %1529 = shufflevector <4 x float> <float undef, float undef, float undef, float 1.000000e+00>, <4 x float> %1498, <4 x i32> <i32 7, i32 undef, i32 undef, i32 3>
  %1530 = shufflevector <4 x float> %1529, <4 x float> %1498, <4 x i32> <i32 0, i32 7, i32 undef, i32 3>
  %1531 = shufflevector <4 x float> %1530, <4 x float> %1498, <4 x i32> <i32 0, i32 1, i32 7, i32 3>
  %1532 = fmul <4 x float> %1498, %1531
  %1533 = fadd <4 x float> %1454, %1532
  %1534 = fmul <4 x float> %1533, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %1535 = call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %1534) #12
  %1536 = bitcast <4 x i32> %1535 to <8 x i16>
  %1537 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1536, <8 x i16> undef) #12
  %1538 = bitcast <16 x i8> %1537 to <8 x i16>
  %1539 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1538, <8 x i16> undef) #12
  %1540 = bitcast <16 x i8> %1539 to <4 x i32>
  %1541 = extractelement <4 x i32> %1540, i32 0
  store i32 %1541, i32* %1528, align 4
  %1542 = getelementptr inbounds i32, i32* %1495, i64 3
  %1543 = shufflevector <4 x float> <float undef, float undef, float undef, float 1.000000e+00>, <4 x float> %1497, <4 x i32> <i32 7, i32 undef, i32 undef, i32 3>
  %1544 = shufflevector <4 x float> %1543, <4 x float> %1497, <4 x i32> <i32 0, i32 7, i32 undef, i32 3>
  %1545 = shufflevector <4 x float> %1544, <4 x float> %1497, <4 x i32> <i32 0, i32 1, i32 7, i32 3>
  %1546 = fmul <4 x float> %1497, %1545
  %1547 = fadd <4 x float> %1453, %1546
  %1548 = fmul <4 x float> %1547, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %1549 = call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %1548) #12
  %1550 = bitcast <4 x i32> %1549 to <8 x i16>
  %1551 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1550, <8 x i16> undef) #12
  %1552 = bitcast <16 x i8> %1551 to <8 x i16>
  %1553 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1552, <8 x i16> undef) #12
  %1554 = bitcast <16 x i8> %1553 to <4 x i32>
  %1555 = extractelement <4 x i32> %1554, i32 0
  store i32 %1555, i32* %1542, align 4
  %1556 = getelementptr inbounds i32, i32* %1495, i64 4
  %1557 = fadd <4 x float> %1486, %1500
  %1558 = fadd <4 x float> %1486, %1499
  %1559 = fadd <4 x float> %1486, %1498
  %1560 = fadd <4 x float> %1486, %1497
  %1561 = add nsw i32 %1496, -4
  %1562 = icmp sgt i32 %1561, 3
  br i1 %1562, label %1494, label %1563

1563:                                             ; preds = %1494
  %1564 = add nsw i32 %1467, -4
  br label %1565

1565:                                             ; preds = %1563, %1484
  %1566 = phi <4 x float> [ %1487, %1484 ], [ %1557, %1563 ]
  %1567 = phi <4 x float> [ %1489, %1484 ], [ %1558, %1563 ]
  %1568 = phi i32 [ %1467, %1484 ], [ %1564, %1563 ]
  %1569 = phi i32* [ %1451, %1484 ], [ %1556, %1563 ]
  %1570 = and i32 %1568, 2
  %1571 = icmp eq i32 %1570, 0
  br i1 %1571, label %1602, label %1572

1572:                                             ; preds = %1565
  %1573 = getelementptr inbounds i32, i32* %1569, i64 1
  %1574 = shufflevector <4 x float> <float undef, float undef, float undef, float 1.000000e+00>, <4 x float> %1566, <4 x i32> <i32 7, i32 undef, i32 undef, i32 3>
  %1575 = shufflevector <4 x float> %1574, <4 x float> %1566, <4 x i32> <i32 0, i32 7, i32 undef, i32 3>
  %1576 = shufflevector <4 x float> %1575, <4 x float> %1566, <4 x i32> <i32 0, i32 1, i32 7, i32 3>
  %1577 = fmul <4 x float> %1566, %1576
  %1578 = fadd <4 x float> %1454, %1577
  %1579 = fmul <4 x float> %1578, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %1580 = call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %1579) #12
  %1581 = bitcast <4 x i32> %1580 to <8 x i16>
  %1582 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1581, <8 x i16> undef) #12
  %1583 = bitcast <16 x i8> %1582 to <8 x i16>
  %1584 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1583, <8 x i16> undef) #12
  %1585 = bitcast <16 x i8> %1584 to <4 x i32>
  %1586 = extractelement <4 x i32> %1585, i32 0
  store i32 %1586, i32* %1569, align 4
  %1587 = getelementptr inbounds i32, i32* %1569, i64 2
  %1588 = shufflevector <4 x float> <float undef, float undef, float undef, float 1.000000e+00>, <4 x float> %1567, <4 x i32> <i32 7, i32 undef, i32 undef, i32 3>
  %1589 = shufflevector <4 x float> %1588, <4 x float> %1567, <4 x i32> <i32 0, i32 7, i32 undef, i32 3>
  %1590 = shufflevector <4 x float> %1589, <4 x float> %1567, <4 x i32> <i32 0, i32 1, i32 7, i32 3>
  %1591 = fmul <4 x float> %1567, %1590
  %1592 = fadd <4 x float> %1453, %1591
  %1593 = fmul <4 x float> %1592, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %1594 = call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %1593) #12
  %1595 = bitcast <4 x i32> %1594 to <8 x i16>
  %1596 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1595, <8 x i16> undef) #12
  %1597 = bitcast <16 x i8> %1596 to <8 x i16>
  %1598 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1597, <8 x i16> undef) #12
  %1599 = bitcast <16 x i8> %1598 to <4 x i32>
  %1600 = extractelement <4 x i32> %1599, i32 0
  store i32 %1600, i32* %1573, align 4
  %1601 = fadd <4 x float> %1485, %1566
  br label %1602

1602:                                             ; preds = %1572, %1565
  %1603 = phi <4 x float> [ %1566, %1565 ], [ %1601, %1572 ]
  %1604 = phi i32* [ %1569, %1565 ], [ %1587, %1572 ]
  %1605 = and i32 %1568, 1
  %1606 = icmp eq i32 %1605, 0
  br i1 %1606, label %1621, label %1607

1607:                                             ; preds = %1602
  %1608 = shufflevector <4 x float> <float undef, float undef, float undef, float 1.000000e+00>, <4 x float> %1603, <4 x i32> <i32 7, i32 undef, i32 undef, i32 3>
  %1609 = shufflevector <4 x float> %1608, <4 x float> %1603, <4 x i32> <i32 0, i32 7, i32 undef, i32 3>
  %1610 = shufflevector <4 x float> %1609, <4 x float> %1603, <4 x i32> <i32 0, i32 1, i32 7, i32 3>
  %1611 = fmul <4 x float> %1603, %1610
  %1612 = fadd <4 x float> %1454, %1611
  %1613 = fmul <4 x float> %1612, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %1614 = call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %1613) #12
  %1615 = bitcast <4 x i32> %1614 to <8 x i16>
  %1616 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1615, <8 x i16> undef) #12
  %1617 = bitcast <16 x i8> %1616 to <8 x i16>
  %1618 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1617, <8 x i16> undef) #12
  %1619 = bitcast <16 x i8> %1618 to <4 x i32>
  %1620 = extractelement <4 x i32> %1619, i32 0
  store i32 %1620, i32* %1604, align 4
  br label %1621

1621:                                             ; preds = %1607, %1602, %1469
  %1622 = sitofp i32 %1467 to float
  %1623 = fcmp ugt float %1457, %1622
  br i1 %1623, label %1657, label %1624

1624:                                             ; preds = %1621, %1624
  %1625 = phi %struct.Sk4fGradientInterval* [ %1631, %1624 ], [ %1459, %1621 ]
  %1626 = phi float [ %1637, %1624 ], [ %1457, %1621 ]
  %1627 = phi float [ %1628, %1624 ], [ %1622, %1621 ]
  %1628 = fsub float %1627, %1626
  %1629 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %1625, i64 1
  %1630 = icmp ugt %struct.Sk4fGradientInterval* %1629, %1331
  %1631 = select i1 %1630, %struct.Sk4fGradientInterval* %1320, %struct.Sk4fGradientInterval* %1629
  %1632 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %1631, i64 0, i32 3
  %1633 = load float, float* %1632, align 4
  %1634 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %1631, i64 0, i32 2
  %1635 = load float, float* %1634, align 4
  %1636 = fsub float %1633, %1635
  %1637 = fdiv float %1636, %1317
  %1638 = fcmp ult float %1628, %1637
  br i1 %1638, label %1639, label %1624

1639:                                             ; preds = %1624
  %1640 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %1631, i64 0, i32 1
  %1641 = bitcast %struct.SkRGBA4f* %1640 to <4 x float>*
  %1642 = load <4 x float>, <4 x float>* %1641, align 1
  %1643 = shufflevector <4 x float> %1642, <4 x float> undef, <4 x i32> <i32 2, i32 1, i32 0, i32 3>
  %1644 = bitcast %struct.Sk4fGradientInterval* %1631 to <4 x float>*
  %1645 = load <4 x float>, <4 x float>* %1644, align 1
  %1646 = shufflevector <4 x float> %1645, <4 x float> undef, <4 x i32> <i32 2, i32 1, i32 0, i32 3>
  %1647 = insertelement <4 x float> undef, float %1635, i32 0
  %1648 = shufflevector <4 x float> %1647, <4 x float> undef, <4 x i32> zeroinitializer
  %1649 = fmul <4 x float> %1648, %1643
  %1650 = fadd <4 x float> %1646, %1649
  %1651 = fmul <4 x float> %1449, %1643
  br i1 %1374, label %1657, label %1652

1652:                                             ; preds = %1639
  %1653 = fcmp oeq <4 x float> %1643, zeroinitializer
  %1654 = bitcast <4 x i1> %1653 to i4
  %1655 = icmp eq i4 %1654, -1
  %1656 = zext i1 %1655 to i8
  br label %1657

1657:                                             ; preds = %1652, %1639, %1621
  %1658 = phi %struct.Sk4fGradientInterval* [ %1459, %1621 ], [ %1631, %1652 ], [ %1631, %1639 ]
  %1659 = phi i8 [ %1458, %1621 ], [ %1656, %1652 ], [ 1, %1639 ]
  %1660 = phi <4 x float> [ %1455, %1621 ], [ %1651, %1652 ], [ %1651, %1639 ]
  %1661 = phi float [ %1457, %1621 ], [ %1637, %1652 ], [ %1637, %1639 ]
  %1662 = phi <4 x float> [ %1456, %1621 ], [ %1650, %1652 ], [ %1650, %1639 ]
  %1663 = phi float [ %1622, %1621 ], [ %1628, %1652 ], [ %1628, %1639 ]
  %1664 = insertelement <4 x float> undef, float %1663, i32 0
  %1665 = shufflevector <4 x float> %1664, <4 x float> undef, <4 x i32> zeroinitializer
  %1666 = fmul <4 x float> %1660, %1665
  %1667 = fadd <4 x float> %1662, %1666
  %1668 = fsub float %1661, %1663
  %1669 = sub nsw i32 %1452, %1467
  %1670 = sext i32 %1467 to i64
  %1671 = getelementptr inbounds i32, i32* %1451, i64 %1670
  %1672 = and i32 %1467, 1
  %1673 = icmp eq i32 %1672, 0
  %1674 = select i1 %1673, <4 x float> %1454, <4 x float> %1453
  %1675 = select i1 %1673, <4 x float> %1453, <4 x float> %1454
  %1676 = icmp sgt i32 %1669, 0
  br i1 %1676, label %1450, label %1677

1677:                                             ; preds = %1657, %1437
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1291) #12
  br label %2065

1678:                                             ; preds = %962
  %1679 = bitcast %struct.SkPoint* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1679) #12
  %1680 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %9, i64 0, i32 0
  store float 0xFFFFFFFFE0000000, float* %1680, align 4
  %1681 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %9, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %1681, align 4
  %1682 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 0, i32 4
  %1683 = load void (%class.SkMatrix*, float, float, %struct.SkPoint*)*, void (%class.SkMatrix*, float, float, %struct.SkPoint*)** %1682, align 8
  %1684 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 0, i32 3
  %1685 = sitofp i32 %1 to float
  %1686 = fadd float %1685, 5.000000e-01
  %1687 = sitofp i32 %2 to float
  %1688 = fadd float %1687, 5.000000e-01
  call void %1683(%class.SkMatrix* dereferenceable(40) %1684, float %1686, float %1688, %struct.SkPoint* nonnull %9) #12
  %1689 = load float, float* %1680, align 4
  %1690 = bitcast float %1689 to i32
  %1691 = and i32 %1690, 2139095040
  %1692 = icmp eq i32 %1691, 2139095040
  br i1 %1692, label %1701, label %1693

1693:                                             ; preds = %1678
  %1694 = call float @fmodf(float %1689, float 2.000000e+00) #12
  %1695 = fcmp olt float %1694, 0.000000e+00
  br i1 %1695, label %1696, label %1701

1696:                                             ; preds = %1693
  %1697 = fadd float %1694, 2.000000e+00
  %1698 = call float @nextafterf(float 2.000000e+00, float 0.000000e+00) #12
  %1699 = fcmp olt float %1698, %1697
  %1700 = select i1 %1699, float %1698, float %1697
  br label %1701

1701:                                             ; preds = %1696, %1693, %1678
  %1702 = phi float [ %1700, %1696 ], [ %1694, %1693 ], [ 0.000000e+00, %1678 ]
  %1703 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1684, i64 0, i32 0, i64 0
  %1704 = load float, float* %1703, align 4
  %1705 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i64 320
  %1706 = bitcast i8* %1705 to %struct.Sk4fGradientInterval**
  %1707 = load %struct.Sk4fGradientInterval*, %struct.Sk4fGradientInterval** %1706, align 8
  %1708 = icmp eq %struct.Sk4fGradientInterval* %1707, null
  br i1 %1708, label %1716, label %1709

1709:                                             ; preds = %1701
  %1710 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i64 328
  %1711 = bitcast i8* %1710 to i64*
  %1712 = load i64, i64* %1711, align 8
  %1713 = lshr i64 %1712, 1
  %1714 = and i64 %1713, 2147483647
  %1715 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %1707, i64 %1714
  br label %1716

1716:                                             ; preds = %1701, %1709
  %1717 = phi %struct.Sk4fGradientInterval* [ %1715, %1709 ], [ null, %1701 ]
  %1718 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %1717, i64 -1
  %1719 = fcmp oge float %1704, 0.000000e+00
  %1720 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 1
  %1721 = select i1 %1719, i64 1, i64 -1
  %1722 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0, i64 328
  %1723 = bitcast i8* %1722 to i64*
  %1724 = load %struct.Sk4fGradientInterval*, %struct.Sk4fGradientInterval** %1720, align 8
  %1725 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %1707, i64 -1
  br label %1726

1726:                                             ; preds = %1755, %1716
  %1727 = phi %struct.Sk4fGradientInterval* [ %1724, %1716 ], [ %1756, %1755 ]
  %1728 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %1727, i64 0, i32 2
  %1729 = load float, float* %1728, align 4
  %1730 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %1727, i64 0, i32 3
  %1731 = load float, float* %1730, align 4
  %1732 = fcmp olt float %1729, %1731
  br i1 %1732, label %1733, label %1737

1733:                                             ; preds = %1726
  %1734 = fcmp ole float %1729, %1702
  %1735 = fcmp oge float %1731, %1702
  %1736 = and i1 %1734, %1735
  br i1 %1736, label %1757, label %1741

1737:                                             ; preds = %1726
  %1738 = fcmp ole float %1731, %1702
  %1739 = fcmp oge float %1729, %1702
  %1740 = and i1 %1739, %1738
  br i1 %1740, label %1757, label %1741

1741:                                             ; preds = %1737, %1733
  %1742 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %1727, i64 %1721
  store %struct.Sk4fGradientInterval* %1742, %struct.Sk4fGradientInterval** %1720, align 8
  br i1 %1708, label %1753, label %1743

1743:                                             ; preds = %1741
  %1744 = load i64, i64* %1723, align 8
  %1745 = lshr i64 %1744, 1
  %1746 = and i64 %1745, 2147483647
  %1747 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %1707, i64 %1746
  %1748 = icmp ult %struct.Sk4fGradientInterval* %1742, %1747
  br i1 %1748, label %1749, label %1753

1749:                                             ; preds = %1743
  %1750 = icmp ult %struct.Sk4fGradientInterval* %1742, %1707
  br i1 %1750, label %1751, label %1755

1751:                                             ; preds = %1749
  %1752 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %1725, i64 %1746
  br label %1753

1753:                                             ; preds = %1741, %1743, %1751
  %1754 = phi %struct.Sk4fGradientInterval* [ %1752, %1751 ], [ %1707, %1743 ], [ %1707, %1741 ]
  store %struct.Sk4fGradientInterval* %1754, %struct.Sk4fGradientInterval** %1720, align 8
  br label %1755

1755:                                             ; preds = %1753, %1749
  %1756 = phi %struct.Sk4fGradientInterval* [ %1742, %1749 ], [ %1754, %1753 ]
  br label %1726

1757:                                             ; preds = %1737, %1733
  %1758 = sitofp i32 %4 to float
  %1759 = fmul float %1704, %1758
  %1760 = call float @llvm.fabs.f32(float %1759) #12
  %1761 = fcmp ole float %1760, 0x3F30000000000000
  br i1 %1761, label %1803, label %1762

1762:                                             ; preds = %1757
  %1763 = fsub float %1731, %1702
  %1764 = fdiv float %1763, %1704
  %1765 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %1717, i64 -1, i32 3
  %1766 = load float, float* %1765, align 4
  %1767 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %1707, i64 0, i32 2
  %1768 = load float, float* %1767, align 4
  %1769 = fsub float %1766, %1768
  %1770 = fdiv float %1769, %1704
  %1771 = fcmp olt float %1770, 2.500000e-01
  br i1 %1771, label %1772, label %1803

1772:                                             ; preds = %1762
  %1773 = icmp ugt %struct.Sk4fGradientInterval* %1707, %1718
  br i1 %1773, label %1824, label %1774

1774:                                             ; preds = %1772, %1800
  %1775 = phi float [ %1802, %1800 ], [ %1768, %1772 ]
  %1776 = phi <4 x float> [ %1797, %1800 ], [ zeroinitializer, %1772 ]
  %1777 = phi %struct.Sk4fGradientInterval* [ %1798, %1800 ], [ %1707, %1772 ]
  %1778 = bitcast %struct.Sk4fGradientInterval* %1777 to <4 x float>*
  %1779 = load <4 x float>, <4 x float>* %1778, align 1
  %1780 = shufflevector <4 x float> %1779, <4 x float> undef, <4 x i32> <i32 2, i32 1, i32 0, i32 3>
  %1781 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %1777, i64 0, i32 1
  %1782 = bitcast %struct.SkRGBA4f* %1781 to <4 x float>*
  %1783 = load <4 x float>, <4 x float>* %1782, align 1
  %1784 = shufflevector <4 x float> %1783, <4 x float> undef, <4 x i32> <i32 2, i32 1, i32 0, i32 3>
  %1785 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %1777, i64 0, i32 3
  %1786 = load float, float* %1785, align 4
  %1787 = fadd float %1775, %1786
  %1788 = insertelement <4 x float> undef, float %1787, i32 0
  %1789 = shufflevector <4 x float> %1788, <4 x float> undef, <4 x i32> zeroinitializer
  %1790 = fmul <4 x float> %1784, %1789
  %1791 = fmul <4 x float> %1790, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %1792 = fadd <4 x float> %1780, %1791
  %1793 = fsub float %1786, %1775
  %1794 = insertelement <4 x float> undef, float %1793, i32 0
  %1795 = shufflevector <4 x float> %1794, <4 x float> undef, <4 x i32> zeroinitializer
  %1796 = fmul <4 x float> %1795, %1792
  %1797 = fadd <4 x float> %1776, %1796
  %1798 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %1777, i64 1
  %1799 = icmp ugt %struct.Sk4fGradientInterval* %1798, %1718
  br i1 %1799, label %1824, label %1800

1800:                                             ; preds = %1774
  %1801 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %1777, i64 1, i32 2
  %1802 = load float, float* %1801, align 4
  br label %1774

1803:                                             ; preds = %1762, %1757
  %1804 = phi float [ %1764, %1762 ], [ 0x7FF0000000000000, %1757 ]
  %1805 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %1727, i64 0, i32 1
  %1806 = bitcast %struct.SkRGBA4f* %1805 to <4 x float>*
  %1807 = load <4 x float>, <4 x float>* %1806, align 1
  %1808 = shufflevector <4 x float> %1807, <4 x float> undef, <4 x i32> <i32 2, i32 1, i32 0, i32 3>
  %1809 = bitcast %struct.Sk4fGradientInterval* %1727 to <4 x float>*
  %1810 = load <4 x float>, <4 x float>* %1809, align 1
  %1811 = shufflevector <4 x float> %1810, <4 x float> undef, <4 x i32> <i32 2, i32 1, i32 0, i32 3>
  %1812 = insertelement <4 x float> undef, float %1702, i32 0
  %1813 = shufflevector <4 x float> %1812, <4 x float> undef, <4 x i32> zeroinitializer
  %1814 = fmul <4 x float> %1813, %1808
  %1815 = fadd <4 x float> %1811, %1814
  %1816 = insertelement <4 x float> undef, float %1704, i32 0
  %1817 = shufflevector <4 x float> %1816, <4 x float> undef, <4 x i32> zeroinitializer
  %1818 = fmul <4 x float> %1817, %1808
  br i1 %1761, label %1824, label %1819

1819:                                             ; preds = %1803
  %1820 = fcmp oeq <4 x float> %1808, zeroinitializer
  %1821 = bitcast <4 x i1> %1820 to i4
  %1822 = icmp eq i4 %1821, -1
  %1823 = zext i1 %1822 to i8
  br label %1824

1824:                                             ; preds = %1774, %1819, %1803, %1772
  %1825 = phi i8 [ 1, %1772 ], [ 1, %1803 ], [ %1823, %1819 ], [ 1, %1774 ]
  %1826 = phi float [ 0x7FF0000000000000, %1772 ], [ %1804, %1803 ], [ %1804, %1819 ], [ 0x7FF0000000000000, %1774 ]
  %1827 = phi <4 x float> [ zeroinitializer, %1772 ], [ %1815, %1803 ], [ %1815, %1819 ], [ %1797, %1774 ]
  %1828 = phi <4 x float> [ zeroinitializer, %1772 ], [ %1818, %1803 ], [ %1818, %1819 ], [ zeroinitializer, %1774 ]
  %1829 = icmp sgt i32 %4, 0
  br i1 %1829, label %1830, label %2064

1830:                                             ; preds = %1824
  %1831 = insertelement <4 x float> undef, float %965, i32 0
  %1832 = shufflevector <4 x float> %1831, <4 x float> undef, <4 x i32> zeroinitializer
  %1833 = insertelement <4 x float> undef, float %963, i32 0
  %1834 = shufflevector <4 x float> %1833, <4 x float> undef, <4 x i32> zeroinitializer
  %1835 = insertelement <4 x float> undef, float %1704, i32 0
  %1836 = shufflevector <4 x float> %1835, <4 x float> undef, <4 x i32> zeroinitializer
  br label %1837

1837:                                             ; preds = %2044, %1830
  %1838 = phi i32* [ %3, %1830 ], [ %2058, %2044 ]
  %1839 = phi i32 [ %4, %1830 ], [ %2056, %2044 ]
  %1840 = phi <4 x float> [ %1832, %1830 ], [ %2062, %2044 ]
  %1841 = phi <4 x float> [ %1834, %1830 ], [ %2061, %2044 ]
  %1842 = phi <4 x float> [ %1828, %1830 ], [ %2047, %2044 ]
  %1843 = phi <4 x float> [ %1827, %1830 ], [ %2054, %2044 ]
  %1844 = phi float [ %1826, %1830 ], [ %2055, %2044 ]
  %1845 = phi i8 [ %1825, %1830 ], [ %2046, %2044 ]
  %1846 = phi %struct.Sk4fGradientInterval* [ %1727, %1830 ], [ %2045, %2044 ]
  %1847 = fadd float %1844, 1.000000e+00
  %1848 = fcmp olt float %1847, 0x41DFFFFFE0000000
  %1849 = select i1 %1848, float %1847, float 0x41DFFFFFE0000000
  %1850 = fcmp ogt float %1849, 0xC1DFFFFFE0000000
  %1851 = select i1 %1850, float %1849, float 0xC1DFFFFFE0000000
  %1852 = fptosi float %1851 to i32
  %1853 = icmp slt i32 %1839, %1852
  %1854 = select i1 %1853, i32 %1839, i32 %1852
  %1855 = icmp eq i8 %1845, 0
  br i1 %1855, label %1871, label %1856

1856:                                             ; preds = %1837
  %1857 = shufflevector <4 x float> <float undef, float undef, float undef, float 1.000000e+00>, <4 x float> %1843, <4 x i32> <i32 7, i32 undef, i32 undef, i32 3>
  %1858 = shufflevector <4 x float> %1857, <4 x float> %1843, <4 x i32> <i32 0, i32 7, i32 undef, i32 3>
  %1859 = shufflevector <4 x float> %1858, <4 x float> %1843, <4 x i32> <i32 0, i32 1, i32 7, i32 3>
  %1860 = fmul <4 x float> %1843, %1859
  %1861 = fadd <4 x float> %1860, zeroinitializer
  %1862 = fmul <4 x float> %1861, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %1863 = call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %1862) #12
  %1864 = bitcast <4 x i32> %1863 to <8 x i16>
  %1865 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1864, <8 x i16> undef) #12
  %1866 = bitcast <16 x i8> %1865 to <8 x i16>
  %1867 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1866, <8 x i16> undef) #12
  %1868 = bitcast <16 x i8> %1867 to <4 x i32>
  %1869 = extractelement <4 x i32> %1868, i32 0
  %1870 = load void (i32*, i32, i32)*, void (i32*, i32, i32)** @_ZN6SkOpts8memset32E, align 8
  call void %1870(i32* %1838, i32 %1869, i32 %1854) #12
  br label %2008

1871:                                             ; preds = %1837
  %1872 = fadd <4 x float> %1842, %1842
  %1873 = fadd <4 x float> %1872, %1872
  %1874 = fadd <4 x float> %1843, zeroinitializer
  %1875 = fadd <4 x float> %1842, %1843
  %1876 = fadd <4 x float> %1875, zeroinitializer
  %1877 = icmp sgt i32 %1854, 3
  br i1 %1877, label %1878, label %1952

1878:                                             ; preds = %1871
  %1879 = fadd <4 x float> %1872, %1876
  %1880 = fadd <4 x float> %1872, %1874
  br label %1881

1881:                                             ; preds = %1881, %1878
  %1882 = phi i32* [ %1838, %1878 ], [ %1943, %1881 ]
  %1883 = phi i32 [ %1854, %1878 ], [ %1948, %1881 ]
  %1884 = phi <4 x float> [ %1879, %1878 ], [ %1947, %1881 ]
  %1885 = phi <4 x float> [ %1880, %1878 ], [ %1946, %1881 ]
  %1886 = phi <4 x float> [ %1876, %1878 ], [ %1945, %1881 ]
  %1887 = phi <4 x float> [ %1874, %1878 ], [ %1944, %1881 ]
  %1888 = shufflevector <4 x float> <float undef, float undef, float undef, float 1.000000e+00>, <4 x float> %1887, <4 x i32> <i32 7, i32 undef, i32 undef, i32 3>
  %1889 = shufflevector <4 x float> %1888, <4 x float> %1887, <4 x i32> <i32 0, i32 7, i32 undef, i32 3>
  %1890 = shufflevector <4 x float> %1889, <4 x float> %1887, <4 x i32> <i32 0, i32 1, i32 7, i32 3>
  %1891 = fmul <4 x float> %1887, %1890
  %1892 = fadd <4 x float> %1841, %1891
  %1893 = fmul <4 x float> %1892, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %1894 = call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %1893) #12
  %1895 = bitcast <4 x i32> %1894 to <8 x i16>
  %1896 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1895, <8 x i16> undef) #12
  %1897 = bitcast <16 x i8> %1896 to <8 x i16>
  %1898 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1897, <8 x i16> undef) #12
  %1899 = bitcast <16 x i8> %1898 to <4 x i32>
  %1900 = extractelement <4 x i32> %1899, i32 0
  store i32 %1900, i32* %1882, align 4
  %1901 = getelementptr inbounds i32, i32* %1882, i64 1
  %1902 = shufflevector <4 x float> <float undef, float undef, float undef, float 1.000000e+00>, <4 x float> %1886, <4 x i32> <i32 7, i32 undef, i32 undef, i32 3>
  %1903 = shufflevector <4 x float> %1902, <4 x float> %1886, <4 x i32> <i32 0, i32 7, i32 undef, i32 3>
  %1904 = shufflevector <4 x float> %1903, <4 x float> %1886, <4 x i32> <i32 0, i32 1, i32 7, i32 3>
  %1905 = fmul <4 x float> %1886, %1904
  %1906 = fadd <4 x float> %1840, %1905
  %1907 = fmul <4 x float> %1906, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %1908 = call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %1907) #12
  %1909 = bitcast <4 x i32> %1908 to <8 x i16>
  %1910 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1909, <8 x i16> undef) #12
  %1911 = bitcast <16 x i8> %1910 to <8 x i16>
  %1912 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1911, <8 x i16> undef) #12
  %1913 = bitcast <16 x i8> %1912 to <4 x i32>
  %1914 = extractelement <4 x i32> %1913, i32 0
  store i32 %1914, i32* %1901, align 4
  %1915 = getelementptr inbounds i32, i32* %1882, i64 2
  %1916 = shufflevector <4 x float> <float undef, float undef, float undef, float 1.000000e+00>, <4 x float> %1885, <4 x i32> <i32 7, i32 undef, i32 undef, i32 3>
  %1917 = shufflevector <4 x float> %1916, <4 x float> %1885, <4 x i32> <i32 0, i32 7, i32 undef, i32 3>
  %1918 = shufflevector <4 x float> %1917, <4 x float> %1885, <4 x i32> <i32 0, i32 1, i32 7, i32 3>
  %1919 = fmul <4 x float> %1885, %1918
  %1920 = fadd <4 x float> %1841, %1919
  %1921 = fmul <4 x float> %1920, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %1922 = call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %1921) #12
  %1923 = bitcast <4 x i32> %1922 to <8 x i16>
  %1924 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1923, <8 x i16> undef) #12
  %1925 = bitcast <16 x i8> %1924 to <8 x i16>
  %1926 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1925, <8 x i16> undef) #12
  %1927 = bitcast <16 x i8> %1926 to <4 x i32>
  %1928 = extractelement <4 x i32> %1927, i32 0
  store i32 %1928, i32* %1915, align 4
  %1929 = getelementptr inbounds i32, i32* %1882, i64 3
  %1930 = shufflevector <4 x float> <float undef, float undef, float undef, float 1.000000e+00>, <4 x float> %1884, <4 x i32> <i32 7, i32 undef, i32 undef, i32 3>
  %1931 = shufflevector <4 x float> %1930, <4 x float> %1884, <4 x i32> <i32 0, i32 7, i32 undef, i32 3>
  %1932 = shufflevector <4 x float> %1931, <4 x float> %1884, <4 x i32> <i32 0, i32 1, i32 7, i32 3>
  %1933 = fmul <4 x float> %1884, %1932
  %1934 = fadd <4 x float> %1840, %1933
  %1935 = fmul <4 x float> %1934, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %1936 = call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %1935) #12
  %1937 = bitcast <4 x i32> %1936 to <8 x i16>
  %1938 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1937, <8 x i16> undef) #12
  %1939 = bitcast <16 x i8> %1938 to <8 x i16>
  %1940 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1939, <8 x i16> undef) #12
  %1941 = bitcast <16 x i8> %1940 to <4 x i32>
  %1942 = extractelement <4 x i32> %1941, i32 0
  store i32 %1942, i32* %1929, align 4
  %1943 = getelementptr inbounds i32, i32* %1882, i64 4
  %1944 = fadd <4 x float> %1873, %1887
  %1945 = fadd <4 x float> %1873, %1886
  %1946 = fadd <4 x float> %1873, %1885
  %1947 = fadd <4 x float> %1873, %1884
  %1948 = add nsw i32 %1883, -4
  %1949 = icmp sgt i32 %1948, 3
  br i1 %1949, label %1881, label %1950

1950:                                             ; preds = %1881
  %1951 = add nsw i32 %1854, -4
  br label %1952

1952:                                             ; preds = %1950, %1871
  %1953 = phi <4 x float> [ %1874, %1871 ], [ %1944, %1950 ]
  %1954 = phi <4 x float> [ %1876, %1871 ], [ %1945, %1950 ]
  %1955 = phi i32 [ %1854, %1871 ], [ %1951, %1950 ]
  %1956 = phi i32* [ %1838, %1871 ], [ %1943, %1950 ]
  %1957 = and i32 %1955, 2
  %1958 = icmp eq i32 %1957, 0
  br i1 %1958, label %1989, label %1959

1959:                                             ; preds = %1952
  %1960 = getelementptr inbounds i32, i32* %1956, i64 1
  %1961 = shufflevector <4 x float> <float undef, float undef, float undef, float 1.000000e+00>, <4 x float> %1953, <4 x i32> <i32 7, i32 undef, i32 undef, i32 3>
  %1962 = shufflevector <4 x float> %1961, <4 x float> %1953, <4 x i32> <i32 0, i32 7, i32 undef, i32 3>
  %1963 = shufflevector <4 x float> %1962, <4 x float> %1953, <4 x i32> <i32 0, i32 1, i32 7, i32 3>
  %1964 = fmul <4 x float> %1953, %1963
  %1965 = fadd <4 x float> %1841, %1964
  %1966 = fmul <4 x float> %1965, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %1967 = call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %1966) #12
  %1968 = bitcast <4 x i32> %1967 to <8 x i16>
  %1969 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1968, <8 x i16> undef) #12
  %1970 = bitcast <16 x i8> %1969 to <8 x i16>
  %1971 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1970, <8 x i16> undef) #12
  %1972 = bitcast <16 x i8> %1971 to <4 x i32>
  %1973 = extractelement <4 x i32> %1972, i32 0
  store i32 %1973, i32* %1956, align 4
  %1974 = getelementptr inbounds i32, i32* %1956, i64 2
  %1975 = shufflevector <4 x float> <float undef, float undef, float undef, float 1.000000e+00>, <4 x float> %1954, <4 x i32> <i32 7, i32 undef, i32 undef, i32 3>
  %1976 = shufflevector <4 x float> %1975, <4 x float> %1954, <4 x i32> <i32 0, i32 7, i32 undef, i32 3>
  %1977 = shufflevector <4 x float> %1976, <4 x float> %1954, <4 x i32> <i32 0, i32 1, i32 7, i32 3>
  %1978 = fmul <4 x float> %1954, %1977
  %1979 = fadd <4 x float> %1840, %1978
  %1980 = fmul <4 x float> %1979, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %1981 = call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %1980) #12
  %1982 = bitcast <4 x i32> %1981 to <8 x i16>
  %1983 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1982, <8 x i16> undef) #12
  %1984 = bitcast <16 x i8> %1983 to <8 x i16>
  %1985 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1984, <8 x i16> undef) #12
  %1986 = bitcast <16 x i8> %1985 to <4 x i32>
  %1987 = extractelement <4 x i32> %1986, i32 0
  store i32 %1987, i32* %1960, align 4
  %1988 = fadd <4 x float> %1872, %1953
  br label %1989

1989:                                             ; preds = %1959, %1952
  %1990 = phi <4 x float> [ %1953, %1952 ], [ %1988, %1959 ]
  %1991 = phi i32* [ %1956, %1952 ], [ %1974, %1959 ]
  %1992 = and i32 %1955, 1
  %1993 = icmp eq i32 %1992, 0
  br i1 %1993, label %2008, label %1994

1994:                                             ; preds = %1989
  %1995 = shufflevector <4 x float> <float undef, float undef, float undef, float 1.000000e+00>, <4 x float> %1990, <4 x i32> <i32 7, i32 undef, i32 undef, i32 3>
  %1996 = shufflevector <4 x float> %1995, <4 x float> %1990, <4 x i32> <i32 0, i32 7, i32 undef, i32 3>
  %1997 = shufflevector <4 x float> %1996, <4 x float> %1990, <4 x i32> <i32 0, i32 1, i32 7, i32 3>
  %1998 = fmul <4 x float> %1990, %1997
  %1999 = fadd <4 x float> %1841, %1998
  %2000 = fmul <4 x float> %1999, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %2001 = call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %2000) #12
  %2002 = bitcast <4 x i32> %2001 to <8 x i16>
  %2003 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %2002, <8 x i16> undef) #12
  %2004 = bitcast <16 x i8> %2003 to <8 x i16>
  %2005 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %2004, <8 x i16> undef) #12
  %2006 = bitcast <16 x i8> %2005 to <4 x i32>
  %2007 = extractelement <4 x i32> %2006, i32 0
  store i32 %2007, i32* %1991, align 4
  br label %2008

2008:                                             ; preds = %1994, %1989, %1856
  %2009 = sitofp i32 %1854 to float
  %2010 = fcmp ugt float %1844, %2009
  br i1 %2010, label %2044, label %2011

2011:                                             ; preds = %2008, %2011
  %2012 = phi %struct.Sk4fGradientInterval* [ %2018, %2011 ], [ %1846, %2008 ]
  %2013 = phi float [ %2024, %2011 ], [ %1844, %2008 ]
  %2014 = phi float [ %2015, %2011 ], [ %2009, %2008 ]
  %2015 = fsub float %2014, %2013
  %2016 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %2012, i64 1
  %2017 = icmp ugt %struct.Sk4fGradientInterval* %2016, %1718
  %2018 = select i1 %2017, %struct.Sk4fGradientInterval* %1707, %struct.Sk4fGradientInterval* %2016
  %2019 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %2018, i64 0, i32 3
  %2020 = load float, float* %2019, align 4
  %2021 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %2018, i64 0, i32 2
  %2022 = load float, float* %2021, align 4
  %2023 = fsub float %2020, %2022
  %2024 = fdiv float %2023, %1704
  %2025 = fcmp ult float %2015, %2024
  br i1 %2025, label %2026, label %2011

2026:                                             ; preds = %2011
  %2027 = getelementptr inbounds %struct.Sk4fGradientInterval, %struct.Sk4fGradientInterval* %2018, i64 0, i32 1
  %2028 = bitcast %struct.SkRGBA4f* %2027 to <4 x float>*
  %2029 = load <4 x float>, <4 x float>* %2028, align 1
  %2030 = shufflevector <4 x float> %2029, <4 x float> undef, <4 x i32> <i32 2, i32 1, i32 0, i32 3>
  %2031 = bitcast %struct.Sk4fGradientInterval* %2018 to <4 x float>*
  %2032 = load <4 x float>, <4 x float>* %2031, align 1
  %2033 = shufflevector <4 x float> %2032, <4 x float> undef, <4 x i32> <i32 2, i32 1, i32 0, i32 3>
  %2034 = insertelement <4 x float> undef, float %2022, i32 0
  %2035 = shufflevector <4 x float> %2034, <4 x float> undef, <4 x i32> zeroinitializer
  %2036 = fmul <4 x float> %2035, %2030
  %2037 = fadd <4 x float> %2033, %2036
  %2038 = fmul <4 x float> %1836, %2030
  br i1 %1761, label %2044, label %2039

2039:                                             ; preds = %2026
  %2040 = fcmp oeq <4 x float> %2030, zeroinitializer
  %2041 = bitcast <4 x i1> %2040 to i4
  %2042 = icmp eq i4 %2041, -1
  %2043 = zext i1 %2042 to i8
  br label %2044

2044:                                             ; preds = %2039, %2026, %2008
  %2045 = phi %struct.Sk4fGradientInterval* [ %1846, %2008 ], [ %2018, %2039 ], [ %2018, %2026 ]
  %2046 = phi i8 [ %1845, %2008 ], [ %2043, %2039 ], [ 1, %2026 ]
  %2047 = phi <4 x float> [ %1842, %2008 ], [ %2038, %2039 ], [ %2038, %2026 ]
  %2048 = phi float [ %1844, %2008 ], [ %2024, %2039 ], [ %2024, %2026 ]
  %2049 = phi <4 x float> [ %1843, %2008 ], [ %2037, %2039 ], [ %2037, %2026 ]
  %2050 = phi float [ %2009, %2008 ], [ %2015, %2039 ], [ %2015, %2026 ]
  %2051 = insertelement <4 x float> undef, float %2050, i32 0
  %2052 = shufflevector <4 x float> %2051, <4 x float> undef, <4 x i32> zeroinitializer
  %2053 = fmul <4 x float> %2047, %2052
  %2054 = fadd <4 x float> %2049, %2053
  %2055 = fsub float %2048, %2050
  %2056 = sub nsw i32 %1839, %1854
  %2057 = sext i32 %1854 to i64
  %2058 = getelementptr inbounds i32, i32* %1838, i64 %2057
  %2059 = and i32 %1854, 1
  %2060 = icmp eq i32 %2059, 0
  %2061 = select i1 %2060, <4 x float> %1841, <4 x float> %1840
  %2062 = select i1 %2060, <4 x float> %1840, <4 x float> %1841
  %2063 = icmp sgt i32 %2056, 0
  br i1 %2063, label %1837, label %2064

2064:                                             ; preds = %2044, %1824
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1679) #12
  br label %2065

2065:                                             ; preds = %2064, %1677, %1289, %962, %961, %633, %304, %38
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN20SkGradientShaderBase27GradientShaderBase4fContextD2Ev(%"class.SkGradientShaderBase::GradientShaderBase4fContext"*) unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkGradientShaderBase::GradientShaderBase4fContext", %"class.SkGradientShaderBase::GradientShaderBase4fContext"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN20SkGradientShaderBase27GradientShaderBase4fContextE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.SkGradientShaderBase::GradientShaderBase4fContext", %"class.SkGradientShaderBase::GradientShaderBase4fContext"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i64 328
  %4 = bitcast i8* %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = and i64 %5, 1
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %12, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.SkGradientShaderBase::GradientShaderBase4fContext", %"class.SkGradientShaderBase::GradientShaderBase4fContext"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i64 320
  %10 = bitcast i8* %9 to i8**
  %11 = load i8*, i8** %10, align 8
  tail call void @_Z7sk_freePv(i8* %11) #12
  br label %12

12:                                               ; preds = %1, %8
  %13 = bitcast %"class.SkGradientShaderBase::GradientShaderBase4fContext"* %0 to %"class.SkShaderBase::Context"*
  tail call void @_ZN12SkShaderBase7ContextD2Ev(%"class.SkShaderBase::Context"* %13) #12
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN16SkLinearGradient23LinearGradient4fContextD0Ev(%"class.SkLinearGradient::LinearGradient4fContext"*) unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN20SkGradientShaderBase27GradientShaderBase4fContextE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 0, i32 2, i32 0, i32 1, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = and i64 %4, 1
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %11, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.SkLinearGradient::LinearGradient4fContext", %"class.SkLinearGradient::LinearGradient4fContext"* %0, i64 0, i32 0, i32 2, i32 0, i32 1
  %9 = bitcast %class.SkTArray* %8 to i8**
  %10 = load i8*, i8** %9, align 8
  tail call void @_Z7sk_freePv(i8* %10) #12
  br label %11

11:                                               ; preds = %1, %7
  %12 = bitcast %"class.SkLinearGradient::LinearGradient4fContext"* %0 to %"class.SkShaderBase::Context"*
  tail call void @_ZN12SkShaderBase7ContextD2Ev(%"class.SkShaderBase::Context"* %12) #12
  %13 = bitcast %"class.SkLinearGradient::LinearGradient4fContext"* %0 to i8*
  tail call void @_ZdlPv(i8* %13) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK20SkGradientShaderBase27GradientShaderBase4fContext8getFlagsEv(%"class.SkGradientShaderBase::GradientShaderBase4fContext"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkGradientShaderBase::GradientShaderBase4fContext", %"class.SkGradientShaderBase::GradientShaderBase4fContext"* %0, i64 0, i32 5
  %3 = load i8, i8* %2, align 8
  %4 = zext i8 %3 to i32
  ret i32 %4
}

; Function Attrs: nounwind
declare void @_ZN12SkShaderBase7ContextD2Ev(%"class.SkShaderBase::Context"*) unnamed_addr #6

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN20SkGradientShaderBase27GradientShaderBase4fContextD0Ev(%"class.SkGradientShaderBase::GradientShaderBase4fContext"*) unnamed_addr #5 comdat align 2 {
  tail call void @llvm.trap() #14
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #1

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #9

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float>) #10

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #10

; Function Attrs: nounwind
declare float @nextafterf(float, float) local_unnamed_addr #6

; Function Attrs: nounwind readnone speculatable
declare float @llvm.trunc.f32(float) #9

; Function Attrs: nofree nounwind
declare float @fmodf(float, float) local_unnamed_addr #11

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float>) #10

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { cold noreturn nounwind }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { nounwind readnone }
attributes #11 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { builtin nounwind }
attributes #14 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
