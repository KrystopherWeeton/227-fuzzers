; ModuleID = '../../content/browser/conversions/conversion_storage_delegate_impl.cc'
source_filename = "../../content/browser/conversions/conversion_storage_delegate_impl.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::TimeDelta" = type { i64 }
%"class.content::ConversionStorageDelegateImpl" = type <{ %"class.content::ConversionStorage::Delegate", i8, [7 x i8] }>
%"class.content::ConversionStorage::Delegate" = type { i32 (...)** }
%"class.content::StorableImpression" = type { i64, %"class.url::Origin", %"class.url::Origin", %"class.url::Origin", %"class.base::Time", %"class.base::Time", i32, i64, %"class.absl::optional.2" }
%"class.url::Origin" = type { %"class.url::SchemeHostPort", %"class.absl::optional" }
%"class.url::SchemeHostPort" = type <{ %"class.std::__1::basic_string", %"class.std::__1::basic_string", i16, [6 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.1 }
%union.anon.1 = type { %"class.url::Origin::Nonce" }
%"class.url::Origin::Nonce" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.base::Time" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.absl::optional.2" = type { %"class.absl::optional_internal::optional_data.3" }
%"class.absl::optional_internal::optional_data.3" = type { %"class.absl::optional_internal::optional_data_base.4" }
%"class.absl::optional_internal::optional_data_base.4" = type { %"class.absl::optional_internal::optional_data_dtor_base.5" }
%"class.absl::optional_internal::optional_data_dtor_base.5" = type { i8, %union.anon.6 }
%union.anon.6 = type { i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.content::StorableImpression"*, %"class.content::StorableImpression"*, %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"class.content::StorableImpression"* }
%"struct.content::ConversionReport" = type { %"class.content::StorableImpression", i64, %"class.base::Time", %"class.base::Time", %"class.base::TimeDelta", %"class.absl::optional.2" }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.std::__1::vector.12" = type { %"class.std::__1::__vector_base.13" }
%"class.std::__1::__vector_base.13" = type { %"class.base::TimeDelta"*, %"class.base::TimeDelta"*, %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"class.base::TimeDelta"* }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN7content17ConversionStorage8DelegateD2Ev = comdat any

$_ZN7content29ConversionStorageDelegateImplD0Ev = comdat any

$_ZNSt3__16vectorIN4base9TimeDeltaENS_9allocatorIS2_EEE6assignIPKS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_ = comdat any

@_ZTVN7content29ConversionStorageDelegateImplE = hidden unnamed_addr constant { [11 x i8*] } { [11 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.content::ConversionStorage::Delegate"*)* @_ZN7content17ConversionStorage8DelegateD2Ev to i8*), i8* bitcast (void (%"class.content::ConversionStorageDelegateImpl"*)* @_ZN7content29ConversionStorageDelegateImplD0Ev to i8*), i8* bitcast (%"class.content::StorableImpression"* (%"class.content::ConversionStorageDelegateImpl"*, %"class.std::__1::vector"*)* @_ZN7content29ConversionStorageDelegateImpl24GetImpressionToAttributeERKNSt3__16vectorINS_18StorableImpressionENS1_9allocatorIS3_EEEE to i8*), i8* bitcast (void (%"class.content::ConversionStorageDelegateImpl"*, %"struct.content::ConversionReport"*)* @_ZN7content29ConversionStorageDelegateImpl26ProcessNewConversionReportERNS_16ConversionReportE to i8*), i8* bitcast (i32 (%"class.content::ConversionStorageDelegateImpl"*, i32)* @_ZNK7content29ConversionStorageDelegateImpl30GetMaxConversionsPerImpressionENS_18StorableImpression10SourceTypeE to i8*), i8* bitcast (i32 (%"class.content::ConversionStorageDelegateImpl"*)* @_ZNK7content29ConversionStorageDelegateImpl26GetMaxImpressionsPerOriginEv to i8*), i8* bitcast (i32 (%"class.content::ConversionStorageDelegateImpl"*)* @_ZNK7content29ConversionStorageDelegateImpl26GetMaxConversionsPerOriginEv to i8*), i8* bitcast ({ i64, i32 } (%"class.content::ConversionStorageDelegateImpl"*)* @_ZNK7content29ConversionStorageDelegateImpl13GetRateLimitsEv to i8*), i8* bitcast (i32 (%"class.content::ConversionStorageDelegateImpl"*, %"class.content::StorableImpression"*)* @_ZNK7content29ConversionStorageDelegateImpl22SelectAttributionLogicERKNS_18StorableImpressionE to i8*)] }, align 8
@.ref.tmp = private constant [2 x %"class.base::TimeDelta"] [%"class.base::TimeDelta" { i64 169200000000 }, %"class.base::TimeDelta" { i64 601200000000 }], align 8
@.str = private unnamed_addr constant [23 x i8] c"../../base/time/time.h\00", align 1
@.str.1 = private unnamed_addr constant [38 x i8] c"!is_inf() || (delta_ == other.delta_)\00", align 1

@_ZN7content29ConversionStorageDelegateImplC1Eb = hidden unnamed_addr alias void (%"class.content::ConversionStorageDelegateImpl"*, i1), void (%"class.content::ConversionStorageDelegateImpl"*, i1)* @_ZN7content29ConversionStorageDelegateImplC2Eb

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN7content29ConversionStorageDelegateImplC2Eb(%"class.content::ConversionStorageDelegateImpl"* nocapture, i1 zeroext) unnamed_addr #0 align 2 {
  %3 = zext i1 %1 to i8
  %4 = getelementptr inbounds %"class.content::ConversionStorageDelegateImpl", %"class.content::ConversionStorageDelegateImpl"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN7content29ConversionStorageDelegateImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.content::ConversionStorageDelegateImpl", %"class.content::ConversionStorageDelegateImpl"* %0, i64 0, i32 1
  store i8 %3, i8* %5, align 8
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden dereferenceable(296) %"class.content::StorableImpression"* @_ZN7content29ConversionStorageDelegateImpl24GetImpressionToAttributeERKNSt3__16vectorINS_18StorableImpressionENS1_9allocatorIS3_EEEE(%"class.content::ConversionStorageDelegateImpl"* nocapture readnone, %"class.std::__1::vector"* nocapture readonly dereferenceable(24)) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %4 = load %"class.content::StorableImpression"*, %"class.content::StorableImpression"** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %6 = load %"class.content::StorableImpression"*, %"class.content::StorableImpression"** %5, align 8
  %7 = ptrtoint %"class.content::StorableImpression"* %4 to i64
  %8 = icmp eq %"class.content::StorableImpression"* %4, %6
  br i1 %8, label %36, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.content::StorableImpression", %"class.content::StorableImpression"* %4, i64 1
  %11 = icmp eq %"class.content::StorableImpression"* %10, %6
  br i1 %11, label %36, label %12

12:                                               ; preds = %9, %32
  %13 = phi %"class.content::StorableImpression"* [ %34, %32 ], [ %10, %9 ]
  %14 = phi %"class.content::StorableImpression"* [ %13, %32 ], [ %4, %9 ]
  %15 = phi i64 [ %33, %32 ], [ %7, %9 ]
  %16 = ptrtoint %"class.content::StorableImpression"* %13 to i64
  %17 = inttoptr i64 %15 to %"class.content::StorableImpression"*
  %18 = getelementptr inbounds %"class.content::StorableImpression", %"class.content::StorableImpression"* %17, i64 0, i32 7
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds %"class.content::StorableImpression", %"class.content::StorableImpression"* %14, i64 1, i32 7
  %21 = load i64, i64* %20, align 8
  %22 = icmp slt i64 %19, %21
  br i1 %22, label %31, label %23

23:                                               ; preds = %12
  %24 = icmp sgt i64 %19, %21
  br i1 %24, label %32, label %25

25:                                               ; preds = %23
  %26 = getelementptr inbounds %"class.content::StorableImpression", %"class.content::StorableImpression"* %17, i64 0, i32 4, i32 0, i32 0
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %"class.content::StorableImpression", %"class.content::StorableImpression"* %14, i64 1, i32 4, i32 0, i32 0
  %29 = load i64, i64* %28, align 8
  %30 = icmp slt i64 %27, %29
  br i1 %30, label %31, label %32

31:                                               ; preds = %25, %12
  br label %32

32:                                               ; preds = %31, %25, %23
  %33 = phi i64 [ %16, %31 ], [ %15, %25 ], [ %15, %23 ]
  %34 = getelementptr inbounds %"class.content::StorableImpression", %"class.content::StorableImpression"* %13, i64 1
  %35 = icmp eq %"class.content::StorableImpression"* %34, %6
  br i1 %35, label %36, label %12

36:                                               ; preds = %32, %2, %9
  %37 = phi i64 [ %7, %2 ], [ %7, %9 ], [ %33, %32 ]
  %38 = inttoptr i64 %37 to %"class.content::StorableImpression"*
  ret %"class.content::StorableImpression"* %38
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7content29ConversionStorageDelegateImpl26ProcessNewConversionReportERNS_16ConversionReportE(%"class.content::ConversionStorageDelegateImpl"* nocapture readonly, %"struct.content::ConversionReport"* nocapture dereferenceable(344)) unnamed_addr #3 align 2 {
  %3 = tail call i64 @_ZNK7content29ConversionStorageDelegateImpl26GetReportTimeForConversionERKNS_16ConversionReportE(%"class.content::ConversionStorageDelegateImpl"* %0, %"struct.content::ConversionReport"* dereferenceable(344) %1)
  %4 = getelementptr inbounds %"struct.content::ConversionReport", %"struct.content::ConversionReport"* %1, i64 0, i32 3, i32 0, i32 0
  store i64 %3, i64* %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK7content29ConversionStorageDelegateImpl26GetReportTimeForConversionERKNS_16ConversionReportE(%"class.content::ConversionStorageDelegateImpl"* nocapture readonly, %"struct.content::ConversionReport"* nocapture readonly dereferenceable(344)) local_unnamed_addr #3 align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = alloca %"class.std::__1::vector.12", align 8
  %6 = getelementptr inbounds %"class.content::ConversionStorageDelegateImpl", %"class.content::ConversionStorageDelegateImpl"* %0, i64 0, i32 1
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %12, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.content::ConversionReport", %"struct.content::ConversionReport"* %1, i64 0, i32 3, i32 0, i32 0
  %11 = load i64, i64* %10, align 8
  br label %97

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"struct.content::ConversionReport", %"struct.content::ConversionReport"* %1, i64 0, i32 0, i32 5, i32 0, i32 0
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"struct.content::ConversionReport", %"struct.content::ConversionReport"* %1, i64 0, i32 0, i32 4, i32 0, i32 0
  %16 = load i64, i64* %15, align 8
  %17 = sub nsw i64 %14, %16
  %18 = icmp sgt i64 %17, 172800000000
  %19 = select i1 %18, i64 %17, i64 172800000000
  %20 = bitcast %"class.std::__1::vector.12"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %20) #11
  %21 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %5, i64 0, i32 0, i32 0
  %22 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %5, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 0, i64 24, i1 false) #11
  %23 = getelementptr inbounds %"struct.content::ConversionReport", %"struct.content::ConversionReport"* %1, i64 0, i32 0, i32 6
  %24 = load i32, i32* %23, align 8
  switch i32 %24, label %27 [
    i32 0, label %25
    i32 1, label %26
  ]

25:                                               ; preds = %12
  call void @_ZNSt3__16vectorIN4base9TimeDeltaENS_9allocatorIS2_EEE6assignIPKS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_(%"class.std::__1::vector.12"* nonnull %5, %"class.base::TimeDelta"* getelementptr inbounds ([2 x %"class.base::TimeDelta"], [2 x %"class.base::TimeDelta"]* @.ref.tmp, i64 0, i64 0), %"class.base::TimeDelta"* getelementptr inbounds ([2 x %"class.base::TimeDelta"], [2 x %"class.base::TimeDelta"]* @.ref.tmp, i64 1, i64 0)) #11
  br label %27

26:                                               ; preds = %12
  call void @_ZNSt3__16vectorIN4base9TimeDeltaENS_9allocatorIS2_EEE6assignIPKS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_(%"class.std::__1::vector.12"* nonnull %5, %"class.base::TimeDelta"* null, %"class.base::TimeDelta"* null) #11
  br label %27

27:                                               ; preds = %12, %26, %25
  %28 = load %"class.base::TimeDelta"*, %"class.base::TimeDelta"** %21, align 8
  %29 = load %"class.base::TimeDelta"*, %"class.base::TimeDelta"** %22, align 8
  %30 = icmp eq %"class.base::TimeDelta"* %28, %29
  br i1 %30, label %64, label %31

31:                                               ; preds = %27
  %32 = bitcast %"class.logging::CheckError"* %3 to i8*
  %33 = getelementptr inbounds %"struct.content::ConversionReport", %"struct.content::ConversionReport"* %1, i64 0, i32 3, i32 0, i32 0
  br label %34

34:                                               ; preds = %31, %61
  %35 = phi %"class.base::TimeDelta"* [ %28, %31 ], [ %62, %61 ]
  %36 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %35, i64 0, i32 0
  %37 = load i64, i64* %36, align 8
  %38 = load i64, i64* %15, align 8
  %39 = add i64 %37, -9223372036854775807
  %40 = icmp ult i64 %39, 2
  br i1 %40, label %48, label %41

41:                                               ; preds = %34
  %42 = icmp slt i64 %37, 0
  %43 = select i1 %42, i64 -9223372036854775808, i64 9223372036854775807
  %44 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %38, i64 %37) #11
  %45 = extractvalue { i64, i1 } %44, 1
  %46 = extractvalue { i64, i1 } %44, 0
  %47 = select i1 %45, i64 %43, i64 %46, !prof !3
  br label %55

48:                                               ; preds = %34
  %49 = add i64 %38, -9223372036854775807
  %50 = icmp ugt i64 %49, 1
  %51 = icmp eq i64 %38, %37
  %52 = or i1 %51, %50
  br i1 %52, label %55, label %53

53:                                               ; preds = %48
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #11
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 378, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0)) #11
  %54 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #11
  br label %55

55:                                               ; preds = %41, %48, %53
  %56 = phi i64 [ %47, %41 ], [ %37, %48 ], [ %37, %53 ]
  %57 = load i64, i64* %33, align 8
  %58 = icmp sge i64 %56, %57
  %59 = icmp slt i64 %37, %19
  %60 = and i1 %58, %59
  br i1 %60, label %64, label %61

61:                                               ; preds = %55
  %62 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %35, i64 1
  %63 = icmp eq %"class.base::TimeDelta"* %62, %29
  br i1 %63, label %64, label %34

64:                                               ; preds = %61, %55, %27
  %65 = phi i64 [ %19, %27 ], [ %19, %61 ], [ %37, %55 ]
  %66 = load i64, i64* %15, align 8
  %67 = add i64 %65, -9223372036854775807
  %68 = icmp ult i64 %67, 2
  br i1 %68, label %76, label %69

69:                                               ; preds = %64
  %70 = icmp slt i64 %65, 0
  %71 = select i1 %70, i64 -9223372036854775808, i64 9223372036854775807
  %72 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %66, i64 %65) #11
  %73 = extractvalue { i64, i1 } %72, 1
  %74 = extractvalue { i64, i1 } %72, 0
  %75 = select i1 %73, i64 %71, i64 %74, !prof !3
  br label %84

76:                                               ; preds = %64
  %77 = add i64 %66, -9223372036854775807
  %78 = icmp ugt i64 %77, 1
  %79 = icmp eq i64 %66, %65
  %80 = or i1 %79, %78
  br i1 %80, label %84, label %81

81:                                               ; preds = %76
  %82 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %82) #11
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 378, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0)) #11
  %83 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %82) #11
  br label %84

84:                                               ; preds = %69, %76, %81
  %85 = phi i64 [ %75, %69 ], [ %65, %76 ], [ %65, %81 ]
  %86 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %85, i64 3600000000) #11
  %87 = extractvalue { i64, i1 } %86, 1
  %88 = extractvalue { i64, i1 } %86, 0
  %89 = select i1 %87, i64 9223372036854775807, i64 %88, !prof !3
  %90 = load %"class.base::TimeDelta"*, %"class.base::TimeDelta"** %21, align 8
  %91 = icmp eq %"class.base::TimeDelta"* %90, null
  br i1 %91, label %96, label %92

92:                                               ; preds = %84
  %93 = ptrtoint %"class.base::TimeDelta"* %90 to i64
  %94 = bitcast %"class.base::TimeDelta"** %22 to i64*
  store i64 %93, i64* %94, align 8
  %95 = bitcast %"class.base::TimeDelta"* %90 to i8*
  call void @_ZdlPv(i8* %95) #12
  br label %96

96:                                               ; preds = %84, %92
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %20) #11
  br label %97

97:                                               ; preds = %96, %9
  %98 = phi i64 [ %11, %9 ], [ %89, %96 ]
  ret i64 %98
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZNK7content29ConversionStorageDelegateImpl30GetMaxConversionsPerImpressionENS_18StorableImpression10SourceTypeE(%"class.content::ConversionStorageDelegateImpl"* nocapture readnone, i32) unnamed_addr #4 align 2 {
  %3 = icmp eq i32 %1, 0
  %4 = select i1 %3, i32 3, i32 1
  ret i32 %4
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZNK7content29ConversionStorageDelegateImpl26GetMaxImpressionsPerOriginEv(%"class.content::ConversionStorageDelegateImpl"* nocapture readnone) unnamed_addr #4 align 2 {
  ret i32 1024
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZNK7content29ConversionStorageDelegateImpl26GetMaxConversionsPerOriginEv(%"class.content::ConversionStorageDelegateImpl"* nocapture readnone) unnamed_addr #4 align 2 {
  ret i32 1024
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden { i64, i32 } @_ZNK7content29ConversionStorageDelegateImpl13GetRateLimitsEv(%"class.content::ConversionStorageDelegateImpl"* nocapture readnone) unnamed_addr #4 align 2 {
  ret { i64, i32 } { i64 2592000000000, i32 100 }
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZNK7content29ConversionStorageDelegateImpl22SelectAttributionLogicERKNS_18StorableImpressionE(%"class.content::ConversionStorageDelegateImpl"* nocapture readnone, %"class.content::StorableImpression"* nocapture readnone dereferenceable(296)) unnamed_addr #4 align 2 {
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN7content17ConversionStorage8DelegateD2Ev(%"class.content::ConversionStorage::Delegate"*) unnamed_addr #3 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN7content29ConversionStorageDelegateImplD0Ev(%"class.content::ConversionStorageDelegateImpl"*) unnamed_addr #3 comdat align 2 {
  %2 = bitcast %"class.content::ConversionStorageDelegateImpl"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #12
  ret void
}

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #5

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #6

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN4base9TimeDeltaENS_9allocatorIS2_EEE6assignIPKS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_(%"class.std::__1::vector.12"*, %"class.base::TimeDelta"*, %"class.base::TimeDelta"*) local_unnamed_addr #3 comdat align 2 {
  %4 = ptrtoint %"class.base::TimeDelta"* %2 to i64
  %5 = ptrtoint %"class.base::TimeDelta"* %1 to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 3
  %8 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast %"class.base::TimeDelta"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector.12"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 3
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to %"class.base::TimeDelta"*
  br i1 %15, label %49, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %0, i64 0, i32 0, i32 1
  %19 = bitcast %"class.base::TimeDelta"** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = ashr exact i64 %21, 3
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %1, i64 %22
  %25 = select i1 %23, %"class.base::TimeDelta"* %24, %"class.base::TimeDelta"* %2
  %26 = ptrtoint %"class.base::TimeDelta"* %25 to i64
  %27 = sub i64 %26, %5
  %28 = ashr exact i64 %27, 3
  %29 = icmp eq i64 %27, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %17
  %31 = inttoptr i64 %12 to i8*
  %32 = bitcast %"class.base::TimeDelta"* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %27, i1 false) #11
  br label %33

33:                                               ; preds = %17, %30
  br i1 %23, label %34, label %47

34:                                               ; preds = %33
  %35 = load i64, i64* %19, align 8
  %36 = sub i64 %4, %26
  %37 = icmp sgt i64 %36, 0
  br i1 %37, label %38, label %45

38:                                               ; preds = %34
  %39 = lshr exact i64 %36, 3
  %40 = inttoptr i64 %35 to i8*
  %41 = bitcast %"class.base::TimeDelta"* %25 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 %36, i1 false) #11
  %42 = inttoptr i64 %35 to %"class.base::TimeDelta"*
  %43 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %42, i64 %39
  %44 = ptrtoint %"class.base::TimeDelta"* %43 to i64
  br label %45

45:                                               ; preds = %34, %38
  %46 = phi i64 [ %44, %38 ], [ %35, %34 ]
  store i64 %46, i64* %19, align 8
  br label %90

47:                                               ; preds = %33
  %48 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %16, i64 %28
  store %"class.base::TimeDelta"* %48, %"class.base::TimeDelta"** %18, align 8
  br label %90

49:                                               ; preds = %3
  %50 = icmp eq i64 %12, 0
  br i1 %50, label %56, label %51

51:                                               ; preds = %49
  %52 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %0, i64 0, i32 0, i32 1
  %53 = bitcast %"class.base::TimeDelta"** %52 to i64*
  store i64 %12, i64* %53, align 8
  %54 = inttoptr i64 %12 to i8*
  tail call void @_ZdlPv(i8* %54) #12
  %55 = bitcast %"class.std::__1::vector.12"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %55, i8 0, i64 24, i1 false) #11
  br label %56

56:                                               ; preds = %49, %51
  %57 = phi i64 [ %10, %49 ], [ 0, %51 ]
  %58 = icmp ugt i64 %7, 2305843009213693951
  br i1 %58, label %59, label %61

59:                                               ; preds = %56
  %60 = bitcast %"class.std::__1::vector.12"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %60) #13
  unreachable

61:                                               ; preds = %56
  %62 = ashr exact i64 %57, 3
  %63 = icmp ult i64 %62, 1152921504606846975
  br i1 %63, label %64, label %71

64:                                               ; preds = %61
  %65 = ashr exact i64 %57, 2
  %66 = icmp ult i64 %65, %7
  br i1 %66, label %71, label %67

67:                                               ; preds = %64
  %68 = icmp ugt i64 %65, 2305843009213693951
  br i1 %68, label %69, label %71

69:                                               ; preds = %67
  %70 = bitcast %"class.std::__1::vector.12"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %70) #13
  unreachable

71:                                               ; preds = %64, %61, %67
  %72 = phi i64 [ %65, %67 ], [ 2305843009213693951, %61 ], [ %7, %64 ]
  %73 = shl i64 %72, 3
  %74 = tail call i8* @_Znwm(i64 %73) #12
  %75 = bitcast i8* %74 to %"class.base::TimeDelta"*
  %76 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %0, i64 0, i32 0, i32 1
  %77 = bitcast %"class.base::TimeDelta"** %76 to i8**
  store i8* %74, i8** %77, align 8
  %78 = bitcast %"class.std::__1::vector.12"* %0 to i8**
  store i8* %74, i8** %78, align 8
  %79 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %75, i64 %72
  store %"class.base::TimeDelta"* %79, %"class.base::TimeDelta"** %8, align 8
  %80 = bitcast %"class.base::TimeDelta"** %76 to i64*
  %81 = ptrtoint i8* %74 to i64
  %82 = icmp sgt i64 %6, 0
  br i1 %82, label %83, label %88

83:                                               ; preds = %71
  %84 = lshr exact i64 %6, 3
  %85 = bitcast %"class.base::TimeDelta"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %74, i8* align 8 %85, i64 %6, i1 false) #11
  %86 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %75, i64 %84
  %87 = ptrtoint %"class.base::TimeDelta"* %86 to i64
  br label %88

88:                                               ; preds = %71, %83
  %89 = phi i64 [ %87, %83 ], [ %81, %71 ]
  store i64 %89, i64* %80, align 8
  br label %90

90:                                               ; preds = %45, %47, %88
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #9

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #10

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }
attributes #12 = { builtin nounwind }
attributes #13 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
