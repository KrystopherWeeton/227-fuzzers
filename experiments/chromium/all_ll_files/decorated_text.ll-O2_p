; ModuleID = '../../ui/gfx/decorated_text.cc'
source_filename = "../../ui/gfx/decorated_text.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.gfx::DecoratedText::RangedAttribute" = type <{ %"class.gfx::Range", %"class.gfx::Font", i8, [7 x i8] }>
%"class.gfx::Range" = type { i32, i32 }
%"class.gfx::Font" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.gfx::PlatformFont"* }
%"class.gfx::PlatformFont" = type opaque
%"struct.gfx::DecoratedText" = type { %"class.std::__1::basic_string", %"class.std::__1::vector" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.gfx::DecoratedText::RangedAttribute"*, %"struct.gfx::DecoratedText::RangedAttribute"*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.gfx::DecoratedText::RangedAttribute"* }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short" = type { [11 x i16], %struct.anon }
%struct.anon = type { %"struct.std::__1::__padding", i8 }
%"struct.std::__1::__padding" = type { [1 x i8] }

@_ZN3gfx13DecoratedText15RangedAttributeC1ERKNS_5RangeERKNS_4FontE = hidden unnamed_addr alias void (%"struct.gfx::DecoratedText::RangedAttribute"*, %"class.gfx::Range"*, %"class.gfx::Font"*), void (%"struct.gfx::DecoratedText::RangedAttribute"*, %"class.gfx::Range"*, %"class.gfx::Font"*)* @_ZN3gfx13DecoratedText15RangedAttributeC2ERKNS_5RangeERKNS_4FontE
@_ZN3gfx13DecoratedTextC1Ev = hidden unnamed_addr alias void (%"struct.gfx::DecoratedText"*), void (%"struct.gfx::DecoratedText"*)* @_ZN3gfx13DecoratedTextC2Ev
@_ZN3gfx13DecoratedTextD1Ev = hidden unnamed_addr alias void (%"struct.gfx::DecoratedText"*), void (%"struct.gfx::DecoratedText"*)* @_ZN3gfx13DecoratedTextD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx13DecoratedText15RangedAttributeC2ERKNS_5RangeERKNS_4FontE(%"struct.gfx::DecoratedText::RangedAttribute"*, %"class.gfx::Range"* nocapture readonly dereferenceable(8), %"class.gfx::Font"* dereferenceable(8)) unnamed_addr #0 align 2 {
  %4 = bitcast %"class.gfx::Range"* %1 to i64*
  %5 = bitcast %"struct.gfx::DecoratedText::RangedAttribute"* %0 to i64*
  %6 = load i64, i64* %4, align 4
  store i64 %6, i64* %5, align 8
  %7 = getelementptr inbounds %"struct.gfx::DecoratedText::RangedAttribute", %"struct.gfx::DecoratedText::RangedAttribute"* %0, i64 0, i32 1
  tail call void @_ZN3gfx4FontC1ERKS0_(%"class.gfx::Font"* %7, %"class.gfx::Font"* dereferenceable(8) %2) #5
  %8 = getelementptr inbounds %"struct.gfx::DecoratedText::RangedAttribute", %"struct.gfx::DecoratedText::RangedAttribute"* %0, i64 0, i32 2
  store i8 0, i8* %8, align 8
  ret void
}

declare void @_ZN3gfx4FontC1ERKS0_(%"class.gfx::Font"*, %"class.gfx::Font"* dereferenceable(8)) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx13DecoratedTextC2Ev(%"struct.gfx::DecoratedText"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"struct.gfx::DecoratedText"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 48, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx13DecoratedTextD2Ev(%"struct.gfx::DecoratedText"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.gfx::DecoratedText", %"struct.gfx::DecoratedText"* %0, i64 0, i32 1
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0
  %4 = load %"struct.gfx::DecoratedText::RangedAttribute"*, %"struct.gfx::DecoratedText::RangedAttribute"** %3, align 8
  %5 = icmp eq %"struct.gfx::DecoratedText::RangedAttribute"* %4, null
  br i1 %5, label %21, label %6

6:                                                ; preds = %1
  %7 = bitcast %"struct.gfx::DecoratedText::RangedAttribute"* %4 to i8*
  %8 = getelementptr inbounds %"struct.gfx::DecoratedText", %"struct.gfx::DecoratedText"* %0, i64 0, i32 1, i32 0, i32 1
  %9 = load %"struct.gfx::DecoratedText::RangedAttribute"*, %"struct.gfx::DecoratedText::RangedAttribute"** %8, align 8
  %10 = icmp eq %"struct.gfx::DecoratedText::RangedAttribute"* %9, %4
  br i1 %10, label %19, label %11

11:                                               ; preds = %6, %11
  %12 = phi %"struct.gfx::DecoratedText::RangedAttribute"* [ %13, %11 ], [ %9, %6 ]
  %13 = getelementptr inbounds %"struct.gfx::DecoratedText::RangedAttribute", %"struct.gfx::DecoratedText::RangedAttribute"* %12, i64 -1
  %14 = getelementptr inbounds %"struct.gfx::DecoratedText::RangedAttribute", %"struct.gfx::DecoratedText::RangedAttribute"* %12, i64 -1, i32 1
  tail call void @_ZN3gfx4FontD1Ev(%"class.gfx::Font"* %14) #5
  %15 = icmp eq %"struct.gfx::DecoratedText::RangedAttribute"* %13, %4
  br i1 %15, label %16, label %11

16:                                               ; preds = %11
  %17 = bitcast %"class.std::__1::vector"* %2 to i8**
  %18 = load i8*, i8** %17, align 8
  br label %19

19:                                               ; preds = %16, %6
  %20 = phi i8* [ %18, %16 ], [ %7, %6 ]
  store %"struct.gfx::DecoratedText::RangedAttribute"* %4, %"struct.gfx::DecoratedText::RangedAttribute"** %8, align 8
  tail call void @_ZdlPv(i8* %20) #6
  br label %21

21:                                               ; preds = %1, %19
  %22 = bitcast %"struct.gfx::DecoratedText"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %23 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %22, i64 0, i32 1, i32 1
  %24 = load i8, i8* %23, align 1
  %25 = icmp slt i8 %24, 0
  br i1 %25, label %26, label %29

26:                                               ; preds = %21
  %27 = bitcast %"struct.gfx::DecoratedText"* %0 to i8**
  %28 = load i8*, i8** %27, align 8
  tail call void @_ZdlPv(i8* %28) #6
  br label %29

29:                                               ; preds = %21, %26
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN3gfx4FontD1Ev(%"class.gfx::Font"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
