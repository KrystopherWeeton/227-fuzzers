; ModuleID = '../../third_party/libzip/src/lib/zip_hash.c'
source_filename = "../../third_party/libzip/src/lib/zip_hash.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.zip_hash = type { i32, i64, %struct.zip_hash_entry** }
%struct.zip_hash_entry = type { i8*, i64, i64, %struct.zip_hash_entry*, i32 }
%struct.zip_error = type { i32, i32, i8* }

; Function Attrs: nounwind ssp uwtable
define hidden noalias %struct.zip_hash* @_zip_hash_new(%struct.zip_error*) local_unnamed_addr #0 {
  %2 = tail call noalias i8* @malloc(i64 24) #6
  %3 = icmp eq i8* %2, null
  br i1 %3, label %4, label %5

4:                                                ; preds = %1
  tail call void @zip_error_set(%struct.zip_error* %0, i32 14, i32 0) #6
  br label %9

5:                                                ; preds = %1
  %6 = bitcast i8* %2 to %struct.zip_hash*
  %7 = bitcast i8* %2 to i32*
  store i32 0, i32* %7, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 16, i1 false)
  br label %9

9:                                                ; preds = %5, %4
  %10 = phi %struct.zip_hash* [ null, %4 ], [ %6, %5 ]
  ret %struct.zip_hash* %10
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #1

declare void @zip_error_set(%struct.zip_error*, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_zip_hash_free(%struct.zip_hash*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.zip_hash* %0, null
  br i1 %2, label %38, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.zip_hash, %struct.zip_hash* %0, i64 0, i32 2
  %5 = load %struct.zip_hash_entry**, %struct.zip_hash_entry*** %4, align 8
  %6 = icmp eq %struct.zip_hash_entry** %5, null
  br i1 %6, label %36, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.zip_hash, %struct.zip_hash* %0, i64 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %33, label %11

11:                                               ; preds = %7, %27
  %12 = phi %struct.zip_hash_entry** [ %28, %27 ], [ %5, %7 ]
  %13 = phi i32 [ %29, %27 ], [ %9, %7 ]
  %14 = phi i64 [ %30, %27 ], [ 0, %7 ]
  %15 = getelementptr inbounds %struct.zip_hash_entry*, %struct.zip_hash_entry** %12, i64 %14
  %16 = load %struct.zip_hash_entry*, %struct.zip_hash_entry** %15, align 8
  %17 = icmp eq %struct.zip_hash_entry* %16, null
  br i1 %17, label %27, label %18

18:                                               ; preds = %11, %18
  %19 = phi %struct.zip_hash_entry* [ %21, %18 ], [ %16, %11 ]
  %20 = getelementptr inbounds %struct.zip_hash_entry, %struct.zip_hash_entry* %19, i64 0, i32 3
  %21 = load %struct.zip_hash_entry*, %struct.zip_hash_entry** %20, align 8
  %22 = bitcast %struct.zip_hash_entry* %19 to i8*
  tail call void @free(i8* %22) #6
  %23 = icmp eq %struct.zip_hash_entry* %21, null
  br i1 %23, label %24, label %18

24:                                               ; preds = %18
  %25 = load i32, i32* %8, align 8
  %26 = load %struct.zip_hash_entry**, %struct.zip_hash_entry*** %4, align 8
  br label %27

27:                                               ; preds = %24, %11
  %28 = phi %struct.zip_hash_entry** [ %26, %24 ], [ %12, %11 ]
  %29 = phi i32 [ %25, %24 ], [ %13, %11 ]
  %30 = add nuw nsw i64 %14, 1
  %31 = zext i32 %29 to i64
  %32 = icmp ult i64 %30, %31
  br i1 %32, label %11, label %33

33:                                               ; preds = %27, %7
  %34 = phi %struct.zip_hash_entry** [ %5, %7 ], [ %28, %27 ]
  %35 = bitcast %struct.zip_hash_entry** %34 to i8*
  tail call void @free(i8* %35) #6
  br label %36

36:                                               ; preds = %3, %33
  %37 = bitcast %struct.zip_hash* %0 to i8*
  tail call void @free(i8* %37) #6
  br label %38

38:                                               ; preds = %1, %36
  ret void
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_zip_hash_add(%struct.zip_hash*, i8*, i64, i32, %struct.zip_error*) local_unnamed_addr #0 {
  %6 = icmp eq %struct.zip_hash* %0, null
  %7 = icmp eq i8* %1, null
  %8 = or i1 %6, %7
  %9 = icmp slt i64 %2, 0
  %10 = or i1 %8, %9
  br i1 %10, label %11, label %12

11:                                               ; preds = %5
  tail call void @zip_error_set(%struct.zip_error* %4, i32 18, i32 0) #6
  br label %153

12:                                               ; preds = %5
  %13 = getelementptr inbounds %struct.zip_hash, %struct.zip_hash* %0, i64 0, i32 0
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %24

16:                                               ; preds = %12
  %17 = tail call noalias i8* @calloc(i64 256, i64 8) #6
  %18 = icmp eq i8* %17, null
  br i1 %18, label %23, label %19

19:                                               ; preds = %16
  %20 = getelementptr inbounds %struct.zip_hash, %struct.zip_hash* %0, i64 0, i32 2
  %21 = bitcast %struct.zip_hash_entry*** %20 to i8**
  %22 = load i8*, i8** %21, align 8
  tail call void @free(i8* %22) #6
  store i8* %17, i8** %21, align 8
  store i32 256, i32* %13, align 8
  br label %24

23:                                               ; preds = %16
  tail call void @zip_error_set(%struct.zip_error* %4, i32 14, i32 0) #6
  br label %153

24:                                               ; preds = %12, %19
  %25 = phi i32 [ %14, %12 ], [ 256, %19 ]
  %26 = load i8, i8* %1, align 1
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %41, label %28

28:                                               ; preds = %24, %28
  %29 = phi i8 [ %37, %28 ], [ %26, %24 ]
  %30 = phi i64 [ %35, %28 ], [ 5381, %24 ]
  %31 = phi i8* [ %36, %28 ], [ %1, %24 ]
  %32 = mul nuw nsw i64 %30, 33
  %33 = zext i8 %29 to i64
  %34 = add nuw nsw i64 %32, %33
  %35 = and i64 %34, 4294967295
  %36 = getelementptr inbounds i8, i8* %31, i64 1
  %37 = load i8, i8* %36, align 1
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %39, label %28

39:                                               ; preds = %28
  %40 = trunc i64 %34 to i32
  br label %41

41:                                               ; preds = %24, %39
  %42 = phi i32 [ 5381, %24 ], [ %40, %39 ]
  %43 = urem i32 %42, %25
  %44 = getelementptr inbounds %struct.zip_hash, %struct.zip_hash* %0, i64 0, i32 2
  %45 = load %struct.zip_hash_entry**, %struct.zip_hash_entry*** %44, align 8
  %46 = zext i32 %43 to i64
  %47 = getelementptr inbounds %struct.zip_hash_entry*, %struct.zip_hash_entry** %45, i64 %46
  %48 = load %struct.zip_hash_entry*, %struct.zip_hash_entry** %47, align 8
  %49 = icmp eq %struct.zip_hash_entry* %48, null
  br i1 %49, label %76, label %50

50:                                               ; preds = %41, %72
  %51 = phi %struct.zip_hash_entry* [ %74, %72 ], [ %48, %41 ]
  %52 = getelementptr inbounds %struct.zip_hash_entry, %struct.zip_hash_entry* %51, i64 0, i32 4
  %53 = load i32, i32* %52, align 8
  %54 = icmp eq i32 %53, %42
  br i1 %54, label %55, label %72

55:                                               ; preds = %50
  %56 = getelementptr inbounds %struct.zip_hash_entry, %struct.zip_hash_entry* %51, i64 0, i32 0
  %57 = load i8*, i8** %56, align 8
  %58 = tail call i32 @strcmp(i8* %1, i8* %57) #7
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %72

60:                                               ; preds = %55
  %61 = and i32 %3, 8
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %67, label %63

63:                                               ; preds = %60
  %64 = getelementptr inbounds %struct.zip_hash_entry, %struct.zip_hash_entry* %51, i64 0, i32 1
  %65 = load i64, i64* %64, align 8
  %66 = icmp eq i64 %65, -1
  br i1 %66, label %67, label %71

67:                                               ; preds = %63, %60
  %68 = getelementptr inbounds %struct.zip_hash_entry, %struct.zip_hash_entry* %51, i64 0, i32 2
  %69 = load i64, i64* %68, align 8
  %70 = icmp eq i64 %69, -1
  br i1 %70, label %145, label %71

71:                                               ; preds = %63, %67
  tail call void @zip_error_set(%struct.zip_error* %4, i32 10, i32 0) #6
  br label %153

72:                                               ; preds = %50, %55
  %73 = getelementptr inbounds %struct.zip_hash_entry, %struct.zip_hash_entry* %51, i64 0, i32 3
  %74 = load %struct.zip_hash_entry*, %struct.zip_hash_entry** %73, align 8
  %75 = icmp eq %struct.zip_hash_entry* %74, null
  br i1 %75, label %76, label %50

76:                                               ; preds = %72, %41
  %77 = tail call noalias i8* @malloc(i64 40) #6
  %78 = bitcast i8* %77 to %struct.zip_hash_entry*
  %79 = icmp eq i8* %77, null
  br i1 %79, label %80, label %81

80:                                               ; preds = %76
  tail call void @zip_error_set(%struct.zip_error* %4, i32 14, i32 0) #6
  br label %153

81:                                               ; preds = %76
  %82 = bitcast i8* %77 to i8**
  store i8* %1, i8** %82, align 8
  %83 = bitcast %struct.zip_hash_entry** %47 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = getelementptr inbounds i8, i8* %77, i64 24
  %86 = bitcast i8* %85 to i64*
  store i64 %84, i64* %86, align 8
  %87 = bitcast %struct.zip_hash_entry** %47 to i8**
  store i8* %77, i8** %87, align 8
  %88 = getelementptr inbounds i8, i8* %77, i64 32
  %89 = bitcast i8* %88 to i32*
  store i32 %42, i32* %89, align 8
  %90 = getelementptr inbounds i8, i8* %77, i64 8
  %91 = bitcast i8* %90 to i64*
  store i64 -1, i64* %91, align 8
  %92 = getelementptr inbounds %struct.zip_hash, %struct.zip_hash* %0, i64 0, i32 1
  %93 = load i64, i64* %92, align 8
  %94 = add i64 %93, 1
  store i64 %94, i64* %92, align 8
  %95 = uitofp i64 %94 to double
  %96 = load i32, i32* %13, align 8
  %97 = uitofp i32 %96 to double
  %98 = fmul double %97, 7.500000e-01
  %99 = fcmp olt double %98, %95
  %100 = icmp sgt i32 %96, -1
  %101 = and i1 %100, %99
  br i1 %101, label %102, label %145

102:                                              ; preds = %81
  %103 = shl i32 %96, 1
  %104 = icmp eq i32 %96, %103
  br i1 %104, label %145, label %105

105:                                              ; preds = %102
  %106 = zext i32 %103 to i64
  %107 = tail call noalias i8* @calloc(i64 %106, i64 8) #6
  %108 = bitcast i8* %107 to %struct.zip_hash_entry**
  %109 = icmp eq i8* %107, null
  br i1 %109, label %144, label %110

110:                                              ; preds = %105
  %111 = icmp eq i64 %94, 0
  %112 = icmp eq i32 %96, 0
  %113 = or i1 %111, %112
  br i1 %113, label %141, label %114

114:                                              ; preds = %110, %136
  %115 = phi i32 [ %137, %136 ], [ %96, %110 ]
  %116 = phi i64 [ %138, %136 ], [ 0, %110 ]
  %117 = load %struct.zip_hash_entry**, %struct.zip_hash_entry*** %44, align 8
  %118 = getelementptr inbounds %struct.zip_hash_entry*, %struct.zip_hash_entry** %117, i64 %116
  %119 = load %struct.zip_hash_entry*, %struct.zip_hash_entry** %118, align 8
  %120 = icmp eq %struct.zip_hash_entry* %119, null
  br i1 %120, label %136, label %121

121:                                              ; preds = %114, %121
  %122 = phi %struct.zip_hash_entry* [ %124, %121 ], [ %119, %114 ]
  %123 = getelementptr inbounds %struct.zip_hash_entry, %struct.zip_hash_entry* %122, i64 0, i32 3
  %124 = load %struct.zip_hash_entry*, %struct.zip_hash_entry** %123, align 8
  %125 = getelementptr inbounds %struct.zip_hash_entry, %struct.zip_hash_entry* %122, i64 0, i32 4
  %126 = load i32, i32* %125, align 8
  %127 = urem i32 %126, %103
  %128 = zext i32 %127 to i64
  %129 = getelementptr inbounds %struct.zip_hash_entry*, %struct.zip_hash_entry** %108, i64 %128
  %130 = bitcast %struct.zip_hash_entry** %129 to i64*
  %131 = load i64, i64* %130, align 8
  %132 = bitcast %struct.zip_hash_entry** %123 to i64*
  store i64 %131, i64* %132, align 8
  store %struct.zip_hash_entry* %122, %struct.zip_hash_entry** %129, align 8
  %133 = icmp eq %struct.zip_hash_entry* %124, null
  br i1 %133, label %134, label %121

134:                                              ; preds = %121
  %135 = load i32, i32* %13, align 8
  br label %136

136:                                              ; preds = %134, %114
  %137 = phi i32 [ %135, %134 ], [ %115, %114 ]
  %138 = add nuw nsw i64 %116, 1
  %139 = zext i32 %137 to i64
  %140 = icmp ult i64 %138, %139
  br i1 %140, label %114, label %141

141:                                              ; preds = %136, %110
  %142 = bitcast %struct.zip_hash_entry*** %44 to i8**
  %143 = load i8*, i8** %142, align 8
  tail call void @free(i8* %143) #6
  store i8* %107, i8** %142, align 8
  store i32 %103, i32* %13, align 8
  br label %145

144:                                              ; preds = %105
  tail call void @zip_error_set(%struct.zip_error* %4, i32 14, i32 0) #6
  br label %153

145:                                              ; preds = %67, %102, %141, %81
  %146 = phi %struct.zip_hash_entry* [ %78, %81 ], [ %78, %141 ], [ %78, %102 ], [ %51, %67 ]
  %147 = and i32 %3, 8
  %148 = icmp eq i32 %147, 0
  br i1 %148, label %151, label %149

149:                                              ; preds = %145
  %150 = getelementptr inbounds %struct.zip_hash_entry, %struct.zip_hash_entry* %146, i64 0, i32 1
  store i64 %2, i64* %150, align 8
  br label %151

151:                                              ; preds = %145, %149
  %152 = getelementptr inbounds %struct.zip_hash_entry, %struct.zip_hash_entry* %146, i64 0, i32 2
  store i64 %2, i64* %152, align 8
  br label %153

153:                                              ; preds = %144, %23, %151, %80, %71, %11
  %154 = phi i1 [ false, %11 ], [ false, %71 ], [ false, %80 ], [ true, %151 ], [ false, %23 ], [ false, %144 ]
  ret i1 %154
}

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_zip_hash_delete(%struct.zip_hash*, i8* readonly, %struct.zip_error*) local_unnamed_addr #0 {
  %4 = icmp eq %struct.zip_hash* %0, null
  %5 = icmp eq i8* %1, null
  %6 = or i1 %4, %5
  br i1 %6, label %7, label %8

7:                                                ; preds = %3
  tail call void @zip_error_set(%struct.zip_error* %2, i32 18, i32 0) #6
  br label %120

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.zip_hash, %struct.zip_hash* %0, i64 0, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %119, label %12

12:                                               ; preds = %8
  %13 = load i8, i8* %1, align 1
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %28, label %15

15:                                               ; preds = %12, %15
  %16 = phi i8 [ %24, %15 ], [ %13, %12 ]
  %17 = phi i64 [ %22, %15 ], [ 5381, %12 ]
  %18 = phi i8* [ %23, %15 ], [ %1, %12 ]
  %19 = mul nuw nsw i64 %17, 33
  %20 = zext i8 %16 to i64
  %21 = add nuw nsw i64 %19, %20
  %22 = and i64 %21, 4294967295
  %23 = getelementptr inbounds i8, i8* %18, i64 1
  %24 = load i8, i8* %23, align 1
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %26, label %15

26:                                               ; preds = %15
  %27 = trunc i64 %21 to i32
  br label %28

28:                                               ; preds = %12, %26
  %29 = phi i32 [ 5381, %12 ], [ %27, %26 ]
  %30 = getelementptr inbounds %struct.zip_hash, %struct.zip_hash* %0, i64 0, i32 0
  %31 = load i32, i32* %30, align 8
  %32 = urem i32 %29, %31
  %33 = getelementptr inbounds %struct.zip_hash, %struct.zip_hash* %0, i64 0, i32 2
  %34 = load %struct.zip_hash_entry**, %struct.zip_hash_entry*** %33, align 8
  %35 = zext i32 %32 to i64
  %36 = getelementptr inbounds %struct.zip_hash_entry*, %struct.zip_hash_entry** %34, i64 %35
  %37 = load %struct.zip_hash_entry*, %struct.zip_hash_entry** %36, align 8
  %38 = icmp eq %struct.zip_hash_entry* %37, null
  br i1 %38, label %119, label %39

39:                                               ; preds = %28, %115
  %40 = phi %struct.zip_hash_entry* [ %117, %115 ], [ %37, %28 ]
  %41 = phi %struct.zip_hash_entry* [ %40, %115 ], [ null, %28 ]
  %42 = getelementptr inbounds %struct.zip_hash_entry, %struct.zip_hash_entry* %40, i64 0, i32 4
  %43 = load i32, i32* %42, align 8
  %44 = icmp eq i32 %43, %29
  br i1 %44, label %45, label %115

45:                                               ; preds = %39
  %46 = getelementptr inbounds %struct.zip_hash_entry, %struct.zip_hash_entry* %40, i64 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = tail call i32 @strcmp(i8* %1, i8* %47) #7
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %115

50:                                               ; preds = %45
  %51 = getelementptr inbounds %struct.zip_hash_entry, %struct.zip_hash_entry* %40, i64 0, i32 1
  %52 = load i64, i64* %51, align 8
  %53 = icmp eq i64 %52, -1
  br i1 %53, label %54, label %113

54:                                               ; preds = %50
  %55 = icmp eq %struct.zip_hash_entry* %41, null
  %56 = getelementptr inbounds %struct.zip_hash_entry, %struct.zip_hash_entry* %40, i64 0, i32 3
  %57 = bitcast %struct.zip_hash_entry** %56 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = getelementptr inbounds %struct.zip_hash_entry, %struct.zip_hash_entry* %41, i64 0, i32 3
  %60 = select i1 %55, %struct.zip_hash_entry** %36, %struct.zip_hash_entry** %59
  %61 = bitcast %struct.zip_hash_entry** %60 to i64*
  store i64 %58, i64* %61, align 8
  %62 = bitcast %struct.zip_hash_entry* %40 to i8*
  tail call void @free(i8* %62) #6
  %63 = load i64, i64* %9, align 8
  %64 = add i64 %63, -1
  store i64 %64, i64* %9, align 8
  %65 = uitofp i64 %64 to double
  %66 = load i32, i32* %30, align 8
  %67 = uitofp i32 %66 to double
  %68 = fmul double %67, 1.000000e-02
  %69 = fcmp ogt double %68, %65
  %70 = icmp ugt i32 %66, 256
  %71 = and i1 %70, %69
  br i1 %71, label %72, label %120

72:                                               ; preds = %54
  %73 = lshr i32 %66, 1
  %74 = icmp eq i32 %66, %73
  br i1 %74, label %120, label %75

75:                                               ; preds = %72
  %76 = zext i32 %73 to i64
  %77 = tail call noalias i8* @calloc(i64 %76, i64 8) #6
  %78 = bitcast i8* %77 to %struct.zip_hash_entry**
  %79 = icmp eq i8* %77, null
  br i1 %79, label %112, label %80

80:                                               ; preds = %75
  %81 = icmp eq i64 %64, 0
  br i1 %81, label %109, label %82

82:                                               ; preds = %80, %104
  %83 = phi i32 [ %105, %104 ], [ %66, %80 ]
  %84 = phi i64 [ %106, %104 ], [ 0, %80 ]
  %85 = load %struct.zip_hash_entry**, %struct.zip_hash_entry*** %33, align 8
  %86 = getelementptr inbounds %struct.zip_hash_entry*, %struct.zip_hash_entry** %85, i64 %84
  %87 = load %struct.zip_hash_entry*, %struct.zip_hash_entry** %86, align 8
  %88 = icmp eq %struct.zip_hash_entry* %87, null
  br i1 %88, label %104, label %89

89:                                               ; preds = %82, %89
  %90 = phi %struct.zip_hash_entry* [ %92, %89 ], [ %87, %82 ]
  %91 = getelementptr inbounds %struct.zip_hash_entry, %struct.zip_hash_entry* %90, i64 0, i32 3
  %92 = load %struct.zip_hash_entry*, %struct.zip_hash_entry** %91, align 8
  %93 = getelementptr inbounds %struct.zip_hash_entry, %struct.zip_hash_entry* %90, i64 0, i32 4
  %94 = load i32, i32* %93, align 8
  %95 = urem i32 %94, %73
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds %struct.zip_hash_entry*, %struct.zip_hash_entry** %78, i64 %96
  %98 = bitcast %struct.zip_hash_entry** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast %struct.zip_hash_entry** %91 to i64*
  store i64 %99, i64* %100, align 8
  store %struct.zip_hash_entry* %90, %struct.zip_hash_entry** %97, align 8
  %101 = icmp eq %struct.zip_hash_entry* %92, null
  br i1 %101, label %102, label %89

102:                                              ; preds = %89
  %103 = load i32, i32* %30, align 8
  br label %104

104:                                              ; preds = %102, %82
  %105 = phi i32 [ %103, %102 ], [ %83, %82 ]
  %106 = add nuw nsw i64 %84, 1
  %107 = zext i32 %105 to i64
  %108 = icmp ult i64 %106, %107
  br i1 %108, label %82, label %109

109:                                              ; preds = %104, %80
  %110 = bitcast %struct.zip_hash_entry*** %33 to i8**
  %111 = load i8*, i8** %110, align 8
  tail call void @free(i8* %111) #6
  store i8* %77, i8** %110, align 8
  store i32 %73, i32* %30, align 8
  br label %120

112:                                              ; preds = %75
  tail call void @zip_error_set(%struct.zip_error* %2, i32 14, i32 0) #6
  br label %120

113:                                              ; preds = %50
  %114 = getelementptr inbounds %struct.zip_hash_entry, %struct.zip_hash_entry* %40, i64 0, i32 2
  store i64 -1, i64* %114, align 8
  br label %120

115:                                              ; preds = %45, %39
  %116 = getelementptr inbounds %struct.zip_hash_entry, %struct.zip_hash_entry* %40, i64 0, i32 3
  %117 = load %struct.zip_hash_entry*, %struct.zip_hash_entry** %116, align 8
  %118 = icmp eq %struct.zip_hash_entry* %117, null
  br i1 %118, label %119, label %39

119:                                              ; preds = %115, %28, %8
  tail call void @zip_error_set(%struct.zip_error* %2, i32 9, i32 0) #6
  br label %120

120:                                              ; preds = %72, %109, %113, %54, %112, %119, %7
  %121 = phi i1 [ false, %7 ], [ false, %119 ], [ false, %112 ], [ true, %54 ], [ true, %113 ], [ true, %109 ], [ true, %72 ]
  ret i1 %121
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_zip_hash_lookup(%struct.zip_hash* readonly, i8* readonly, i32, %struct.zip_error*) local_unnamed_addr #0 {
  %5 = icmp eq %struct.zip_hash* %0, null
  %6 = icmp eq i8* %1, null
  %7 = or i1 %5, %6
  br i1 %7, label %8, label %9

8:                                                ; preds = %4
  tail call void @zip_error_set(%struct.zip_error* %3, i32 18, i32 0) #6
  br label %62

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.zip_hash, %struct.zip_hash* %0, i64 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %61, label %13

13:                                               ; preds = %9
  %14 = load i8, i8* %1, align 1
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %29, label %16

16:                                               ; preds = %13, %16
  %17 = phi i8 [ %25, %16 ], [ %14, %13 ]
  %18 = phi i64 [ %23, %16 ], [ 5381, %13 ]
  %19 = phi i8* [ %24, %16 ], [ %1, %13 ]
  %20 = mul nuw nsw i64 %18, 33
  %21 = zext i8 %17 to i64
  %22 = add nuw nsw i64 %20, %21
  %23 = and i64 %22, 4294967295
  %24 = getelementptr inbounds i8, i8* %19, i64 1
  %25 = load i8, i8* %24, align 1
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %27, label %16

27:                                               ; preds = %16
  %28 = trunc i64 %22 to i32
  br label %29

29:                                               ; preds = %13, %27
  %30 = phi i32 [ 5381, %13 ], [ %28, %27 ]
  %31 = getelementptr inbounds %struct.zip_hash, %struct.zip_hash* %0, i64 0, i32 0
  %32 = load i32, i32* %31, align 8
  %33 = urem i32 %30, %32
  %34 = getelementptr inbounds %struct.zip_hash, %struct.zip_hash* %0, i64 0, i32 2
  %35 = load %struct.zip_hash_entry**, %struct.zip_hash_entry*** %34, align 8
  %36 = zext i32 %33 to i64
  %37 = getelementptr inbounds %struct.zip_hash_entry*, %struct.zip_hash_entry** %35, i64 %36
  %38 = load %struct.zip_hash_entry*, %struct.zip_hash_entry** %37, align 8
  %39 = icmp eq %struct.zip_hash_entry* %38, null
  br i1 %39, label %61, label %40

40:                                               ; preds = %29, %57
  %41 = phi %struct.zip_hash_entry* [ %59, %57 ], [ %38, %29 ]
  %42 = getelementptr inbounds %struct.zip_hash_entry, %struct.zip_hash_entry* %41, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  %44 = tail call i32 @strcmp(i8* %1, i8* %43) #7
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %57

46:                                               ; preds = %40
  %47 = and i32 %2, 8
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %53, label %49

49:                                               ; preds = %46
  %50 = getelementptr inbounds %struct.zip_hash_entry, %struct.zip_hash_entry* %41, i64 0, i32 1
  %51 = load i64, i64* %50, align 8
  %52 = icmp eq i64 %51, -1
  br i1 %52, label %61, label %62

53:                                               ; preds = %46
  %54 = getelementptr inbounds %struct.zip_hash_entry, %struct.zip_hash_entry* %41, i64 0, i32 2
  %55 = load i64, i64* %54, align 8
  %56 = icmp eq i64 %55, -1
  br i1 %56, label %61, label %62

57:                                               ; preds = %40
  %58 = getelementptr inbounds %struct.zip_hash_entry, %struct.zip_hash_entry* %41, i64 0, i32 3
  %59 = load %struct.zip_hash_entry*, %struct.zip_hash_entry** %58, align 8
  %60 = icmp eq %struct.zip_hash_entry* %59, null
  br i1 %60, label %61, label %40

61:                                               ; preds = %57, %29, %49, %53, %9
  tail call void @zip_error_set(%struct.zip_error* %3, i32 9, i32 0) #6
  br label %62

62:                                               ; preds = %53, %49, %61, %8
  %63 = phi i64 [ -1, %8 ], [ -1, %61 ], [ %51, %49 ], [ %55, %53 ]
  ret i64 %63
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_zip_hash_reserve_capacity(%struct.zip_hash* nocapture, i64, %struct.zip_error*) local_unnamed_addr #0 {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %75, label %5

5:                                                ; preds = %3
  %6 = uitofp i64 %1 to double
  %7 = fdiv double %6, 7.500000e-01
  %8 = fcmp oge double %7, 0x41EFFFFFFFE00000
  %9 = select i1 %8, double 0x41EFFFFFFFE00000, double %7
  %10 = fptoui double %9 to i32
  %11 = icmp ugt i32 %10, -2147483648
  br i1 %11, label %25, label %12

12:                                               ; preds = %5
  %13 = add i32 %10, -1
  %14 = lshr i32 %13, 1
  %15 = or i32 %14, %13
  %16 = lshr i32 %15, 2
  %17 = or i32 %16, %15
  %18 = lshr i32 %17, 4
  %19 = or i32 %18, %17
  %20 = lshr i32 %19, 8
  %21 = or i32 %20, %19
  %22 = lshr i32 %21, 16
  %23 = or i32 %22, %21
  %24 = add i32 %23, 1
  br label %25

25:                                               ; preds = %5, %12
  %26 = phi i32 [ %24, %12 ], [ -2147483648, %5 ]
  %27 = getelementptr inbounds %struct.zip_hash, %struct.zip_hash* %0, i64 0, i32 0
  %28 = load i32, i32* %27, align 8
  %29 = icmp ugt i32 %26, %28
  br i1 %29, label %30, label %75

30:                                               ; preds = %25
  %31 = zext i32 %26 to i64
  %32 = tail call noalias i8* @calloc(i64 %31, i64 8) #6
  %33 = bitcast i8* %32 to %struct.zip_hash_entry**
  %34 = icmp eq i8* %32, null
  br i1 %34, label %70, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %struct.zip_hash, %struct.zip_hash* %0, i64 0, i32 1
  %37 = load i64, i64* %36, align 8
  %38 = icmp eq i64 %37, 0
  %39 = icmp eq i32 %28, 0
  %40 = or i1 %39, %38
  br i1 %40, label %71, label %41

41:                                               ; preds = %35
  %42 = getelementptr inbounds %struct.zip_hash, %struct.zip_hash* %0, i64 0, i32 2
  br label %43

43:                                               ; preds = %65, %41
  %44 = phi i32 [ %28, %41 ], [ %66, %65 ]
  %45 = phi i64 [ 0, %41 ], [ %67, %65 ]
  %46 = load %struct.zip_hash_entry**, %struct.zip_hash_entry*** %42, align 8
  %47 = getelementptr inbounds %struct.zip_hash_entry*, %struct.zip_hash_entry** %46, i64 %45
  %48 = load %struct.zip_hash_entry*, %struct.zip_hash_entry** %47, align 8
  %49 = icmp eq %struct.zip_hash_entry* %48, null
  br i1 %49, label %65, label %50

50:                                               ; preds = %43, %50
  %51 = phi %struct.zip_hash_entry* [ %53, %50 ], [ %48, %43 ]
  %52 = getelementptr inbounds %struct.zip_hash_entry, %struct.zip_hash_entry* %51, i64 0, i32 3
  %53 = load %struct.zip_hash_entry*, %struct.zip_hash_entry** %52, align 8
  %54 = getelementptr inbounds %struct.zip_hash_entry, %struct.zip_hash_entry* %51, i64 0, i32 4
  %55 = load i32, i32* %54, align 8
  %56 = urem i32 %55, %26
  %57 = zext i32 %56 to i64
  %58 = getelementptr inbounds %struct.zip_hash_entry*, %struct.zip_hash_entry** %33, i64 %57
  %59 = bitcast %struct.zip_hash_entry** %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = bitcast %struct.zip_hash_entry** %52 to i64*
  store i64 %60, i64* %61, align 8
  store %struct.zip_hash_entry* %51, %struct.zip_hash_entry** %58, align 8
  %62 = icmp eq %struct.zip_hash_entry* %53, null
  br i1 %62, label %63, label %50

63:                                               ; preds = %50
  %64 = load i32, i32* %27, align 8
  br label %65

65:                                               ; preds = %63, %43
  %66 = phi i32 [ %64, %63 ], [ %44, %43 ]
  %67 = add nuw nsw i64 %45, 1
  %68 = zext i32 %66 to i64
  %69 = icmp ult i64 %67, %68
  br i1 %69, label %43, label %71

70:                                               ; preds = %30
  tail call void @zip_error_set(%struct.zip_error* %2, i32 14, i32 0) #6
  br label %75

71:                                               ; preds = %65, %35
  %72 = getelementptr inbounds %struct.zip_hash, %struct.zip_hash* %0, i64 0, i32 2
  %73 = bitcast %struct.zip_hash_entry*** %72 to i8**
  %74 = load i8*, i8** %73, align 8
  tail call void @free(i8* %74) #6
  store i8* %32, i8** %73, align 8
  store i32 %26, i32* %27, align 8
  br label %75

75:                                               ; preds = %71, %70, %25, %3
  %76 = phi i1 [ true, %3 ], [ true, %25 ], [ true, %71 ], [ false, %70 ]
  ret i1 %76
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_zip_hash_revert(%struct.zip_hash* nocapture, %struct.zip_error*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.zip_hash, %struct.zip_hash* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %54, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.zip_hash, %struct.zip_hash* %0, i64 0, i32 2
  %8 = getelementptr inbounds %struct.zip_hash, %struct.zip_hash* %0, i64 0, i32 1
  br label %9

9:                                                ; preds = %6, %49
  %10 = phi i32 [ %4, %6 ], [ %50, %49 ]
  %11 = phi i64 [ 0, %6 ], [ %51, %49 ]
  %12 = load %struct.zip_hash_entry**, %struct.zip_hash_entry*** %7, align 8
  %13 = getelementptr inbounds %struct.zip_hash_entry*, %struct.zip_hash_entry** %12, i64 %11
  %14 = load %struct.zip_hash_entry*, %struct.zip_hash_entry** %13, align 8
  %15 = icmp eq %struct.zip_hash_entry* %14, null
  br i1 %15, label %49, label %16

16:                                               ; preds = %9, %43
  %17 = phi %struct.zip_hash_entry* [ %44, %43 ], [ %14, %9 ]
  %18 = phi %struct.zip_hash_entry* [ %45, %43 ], [ null, %9 ]
  %19 = bitcast %struct.zip_hash_entry* %17 to i8*
  %20 = getelementptr inbounds %struct.zip_hash_entry, %struct.zip_hash_entry* %17, i64 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = icmp eq i64 %21, -1
  br i1 %22, label %23, label %39

23:                                               ; preds = %16
  %24 = icmp eq %struct.zip_hash_entry* %18, null
  %25 = getelementptr inbounds %struct.zip_hash_entry, %struct.zip_hash_entry* %17, i64 0, i32 3
  %26 = bitcast %struct.zip_hash_entry** %25 to i64*
  %27 = load i64, i64* %26, align 8
  br i1 %24, label %30, label %28

28:                                               ; preds = %23
  %29 = getelementptr inbounds %struct.zip_hash_entry, %struct.zip_hash_entry* %18, i64 0, i32 3
  br label %33

30:                                               ; preds = %23
  %31 = load %struct.zip_hash_entry**, %struct.zip_hash_entry*** %7, align 8
  %32 = getelementptr inbounds %struct.zip_hash_entry*, %struct.zip_hash_entry** %31, i64 %11
  br label %33

33:                                               ; preds = %30, %28
  %34 = phi %struct.zip_hash_entry** [ %32, %30 ], [ %29, %28 ]
  %35 = bitcast %struct.zip_hash_entry** %34 to i64*
  store i64 %27, i64* %35, align 8
  %36 = load %struct.zip_hash_entry*, %struct.zip_hash_entry** %25, align 8
  tail call void @free(i8* %19) #6
  %37 = load i64, i64* %8, align 8
  %38 = add i64 %37, -1
  store i64 %38, i64* %8, align 8
  br label %43

39:                                               ; preds = %16
  %40 = getelementptr inbounds %struct.zip_hash_entry, %struct.zip_hash_entry* %17, i64 0, i32 2
  store i64 %21, i64* %40, align 8
  %41 = getelementptr inbounds %struct.zip_hash_entry, %struct.zip_hash_entry* %17, i64 0, i32 3
  %42 = load %struct.zip_hash_entry*, %struct.zip_hash_entry** %41, align 8
  br label %43

43:                                               ; preds = %39, %33
  %44 = phi %struct.zip_hash_entry* [ %36, %33 ], [ %42, %39 ]
  %45 = phi %struct.zip_hash_entry* [ %18, %33 ], [ %17, %39 ]
  %46 = icmp eq %struct.zip_hash_entry* %44, null
  br i1 %46, label %47, label %16

47:                                               ; preds = %43
  %48 = load i32, i32* %3, align 8
  br label %49

49:                                               ; preds = %47, %9
  %50 = phi i32 [ %48, %47 ], [ %10, %9 ]
  %51 = add nuw nsw i64 %11, 1
  %52 = zext i32 %50 to i64
  %53 = icmp ult i64 %51, %52
  br i1 %53, label %9, label %54

54:                                               ; preds = %49, %2
  %55 = phi i32 [ 0, %2 ], [ %50, %49 ]
  %56 = getelementptr inbounds %struct.zip_hash, %struct.zip_hash* %0, i64 0, i32 1
  %57 = load i64, i64* %56, align 8
  %58 = uitofp i64 %57 to double
  %59 = uitofp i32 %55 to double
  %60 = fmul double %59, 1.000000e-02
  %61 = fcmp ogt double %60, %58
  %62 = icmp ugt i32 %55, 256
  %63 = and i1 %62, %61
  br i1 %63, label %64, label %117

64:                                               ; preds = %54, %64
  %65 = phi i32 [ %66, %64 ], [ %55, %54 ]
  %66 = lshr i32 %65, 1
  %67 = uitofp i32 %66 to double
  %68 = fmul double %67, 1.000000e-02
  %69 = fcmp ogt double %68, %58
  %70 = icmp ugt i32 %65, 513
  %71 = and i1 %70, %69
  br i1 %71, label %64, label %72

72:                                               ; preds = %64
  %73 = icmp eq i32 %55, %66
  br i1 %73, label %117, label %74

74:                                               ; preds = %72
  %75 = zext i32 %66 to i64
  %76 = tail call noalias i8* @calloc(i64 %75, i64 8) #6
  %77 = bitcast i8* %76 to %struct.zip_hash_entry**
  %78 = icmp eq i8* %76, null
  br i1 %78, label %116, label %79

79:                                               ; preds = %74
  %80 = icmp eq i64 %57, 0
  %81 = icmp eq i32 %55, 0
  %82 = or i1 %81, %80
  br i1 %82, label %112, label %83

83:                                               ; preds = %79
  %84 = getelementptr inbounds %struct.zip_hash, %struct.zip_hash* %0, i64 0, i32 2
  br label %85

85:                                               ; preds = %107, %83
  %86 = phi i32 [ %55, %83 ], [ %108, %107 ]
  %87 = phi i64 [ 0, %83 ], [ %109, %107 ]
  %88 = load %struct.zip_hash_entry**, %struct.zip_hash_entry*** %84, align 8
  %89 = getelementptr inbounds %struct.zip_hash_entry*, %struct.zip_hash_entry** %88, i64 %87
  %90 = load %struct.zip_hash_entry*, %struct.zip_hash_entry** %89, align 8
  %91 = icmp eq %struct.zip_hash_entry* %90, null
  br i1 %91, label %107, label %92

92:                                               ; preds = %85, %92
  %93 = phi %struct.zip_hash_entry* [ %95, %92 ], [ %90, %85 ]
  %94 = getelementptr inbounds %struct.zip_hash_entry, %struct.zip_hash_entry* %93, i64 0, i32 3
  %95 = load %struct.zip_hash_entry*, %struct.zip_hash_entry** %94, align 8
  %96 = getelementptr inbounds %struct.zip_hash_entry, %struct.zip_hash_entry* %93, i64 0, i32 4
  %97 = load i32, i32* %96, align 8
  %98 = urem i32 %97, %66
  %99 = zext i32 %98 to i64
  %100 = getelementptr inbounds %struct.zip_hash_entry*, %struct.zip_hash_entry** %77, i64 %99
  %101 = bitcast %struct.zip_hash_entry** %100 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = bitcast %struct.zip_hash_entry** %94 to i64*
  store i64 %102, i64* %103, align 8
  store %struct.zip_hash_entry* %93, %struct.zip_hash_entry** %100, align 8
  %104 = icmp eq %struct.zip_hash_entry* %95, null
  br i1 %104, label %105, label %92

105:                                              ; preds = %92
  %106 = load i32, i32* %3, align 8
  br label %107

107:                                              ; preds = %105, %85
  %108 = phi i32 [ %106, %105 ], [ %86, %85 ]
  %109 = add nuw nsw i64 %87, 1
  %110 = zext i32 %108 to i64
  %111 = icmp ult i64 %109, %110
  br i1 %111, label %85, label %112

112:                                              ; preds = %107, %79
  %113 = getelementptr inbounds %struct.zip_hash, %struct.zip_hash* %0, i64 0, i32 2
  %114 = bitcast %struct.zip_hash_entry*** %113 to i8**
  %115 = load i8*, i8** %114, align 8
  tail call void @free(i8* %115) #6
  store i8* %76, i8** %114, align 8
  store i32 %66, i32* %3, align 8
  br label %117

116:                                              ; preds = %74
  tail call void @zip_error_set(%struct.zip_error* %1, i32 14, i32 0) #6
  br label %117

117:                                              ; preds = %72, %112, %54, %116
  %118 = phi i1 [ false, %116 ], [ true, %54 ], [ true, %112 ], [ true, %72 ]
  ret i1 %118
}

; Function Attrs: nofree nounwind
declare noalias i8* @calloc(i64, i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nounwind }
attributes #7 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
