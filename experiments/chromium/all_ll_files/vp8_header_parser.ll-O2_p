; ModuleID = '../../third_party/webrtc/modules/video_coding/utility/vp8_header_parser.cc'
source_filename = "../../third_party/webrtc/modules/video_coding/utility/vp8_header_parser.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::__1::locale::id" = type <{ %"struct.std::__1::once_flag", i32, [4 x i8] }>
%"struct.std::__1::once_flag" = type { i64 }
%"struct.webrtc::vp8::VP8BitReader" = type { i32, i32, i32, i8*, i8* }
%"class.rtc::DiagnosticLogMessage" = type { i8*, i32, i32, i32, i32, i8*, i8, %"class.std::__1::basic_ostringstream" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry" = type { i8, %"class.std::__1::basic_ostream"* }
%"class.std::__1::locale::facet" = type { %"class.std::__1::__shared_count" }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::ctype" = type <{ %"class.std::__1::locale::facet", i16*, i8, [7 x i8] }>
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

$_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m = comdat any

$_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = comdat any

@.str = private unnamed_addr constant [75 x i8] c"../../third_party/webrtc/modules/video_coding/utility/vp8_header_parser.cc\00", align 1
@.str.1 = private unnamed_addr constant [34 x i8] c"Failed to get QP, invalid length.\00", align 1
@.str.2 = private unnamed_addr constant [35 x i8] c"Failed to get QP, invalid length: \00", align 1
@.str.3 = private unnamed_addr constant [55 x i8] c"Failed to get QP, bitstream is truncated or corrupted.\00", align 1
@_ZNSt3__15ctypeIcE2idE = external global %"class.std::__1::locale::id", align 8

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6webrtc3vp816VP8InitBitReaderEPNS0_12VP8BitReaderEPKhS4_(%"struct.webrtc::vp8::VP8BitReader"* nocapture, i8*, i8*) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %"struct.webrtc::vp8::VP8BitReader", %"struct.webrtc::vp8::VP8BitReader"* %0, i64 0, i32 1
  store i32 255, i32* %4, align 4
  %5 = getelementptr inbounds %"struct.webrtc::vp8::VP8BitReader", %"struct.webrtc::vp8::VP8BitReader"* %0, i64 0, i32 3
  store i8* %1, i8** %5, align 8
  %6 = getelementptr inbounds %"struct.webrtc::vp8::VP8BitReader", %"struct.webrtc::vp8::VP8BitReader"* %0, i64 0, i32 4
  store i8* %2, i8** %6, align 8
  %7 = getelementptr inbounds %"struct.webrtc::vp8::VP8BitReader", %"struct.webrtc::vp8::VP8BitReader"* %0, i64 0, i32 0
  store i32 0, i32* %7, align 8
  %8 = getelementptr inbounds %"struct.webrtc::vp8::VP8BitReader", %"struct.webrtc::vp8::VP8BitReader"* %0, i64 0, i32 2
  store i32 0, i32* %8, align 8
  %9 = icmp eq i8* %1, %2
  br i1 %9, label %14, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds i8, i8* %1, i64 1
  store i8* %11, i8** %5, align 8
  %12 = load i8, i8* %1, align 1
  %13 = zext i8 %12 to i32
  br label %14

14:                                               ; preds = %3, %10
  %15 = phi i8* [ %11, %10 ], [ %1, %3 ]
  %16 = phi i32 [ %13, %10 ], [ 0, %3 ]
  store i32 %16, i32* %7, align 8
  %17 = icmp eq i8* %15, %2
  %18 = shl nuw nsw i32 %16, 8
  br i1 %17, label %24, label %19

19:                                               ; preds = %14
  %20 = getelementptr inbounds i8, i8* %15, i64 1
  store i8* %20, i8** %5, align 8
  %21 = load i8, i8* %15, align 1
  %22 = zext i8 %21 to i32
  %23 = or i32 %18, %22
  br label %24

24:                                               ; preds = %19, %14
  %25 = phi i32 [ %23, %19 ], [ %18, %14 ]
  store i32 %25, i32* %7, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZN6webrtc3vp819Vp8BitReaderGetBoolEPNS0_12VP8BitReaderEi(%"struct.webrtc::vp8::VP8BitReader"* nocapture, i32) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"struct.webrtc::vp8::VP8BitReader", %"struct.webrtc::vp8::VP8BitReader"* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, -1
  %6 = mul i32 %5, %1
  %7 = lshr i32 %6, 8
  %8 = add nuw nsw i32 %7, 1
  %9 = shl i32 %8, 8
  %10 = getelementptr inbounds %"struct.webrtc::vp8::VP8BitReader", %"struct.webrtc::vp8::VP8BitReader"* %0, i64 0, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = icmp ult i32 %11, %9
  br i1 %12, label %16, label %13

13:                                               ; preds = %2
  %14 = sub i32 %4, %8
  store i32 %14, i32* %3, align 4
  %15 = sub i32 %11, %9
  store i32 %15, i32* %10, align 8
  br label %17

16:                                               ; preds = %2
  store i32 %8, i32* %3, align 4
  br label %17

17:                                               ; preds = %16, %13
  %18 = phi i32 [ %15, %13 ], [ %11, %16 ]
  %19 = phi i32 [ %14, %13 ], [ %8, %16 ]
  %20 = phi i32 [ 1, %13 ], [ 0, %16 ]
  %21 = icmp ult i32 %19, 128
  br i1 %21, label %22, label %48

22:                                               ; preds = %17
  %23 = getelementptr inbounds %"struct.webrtc::vp8::VP8BitReader", %"struct.webrtc::vp8::VP8BitReader"* %0, i64 0, i32 2
  %24 = getelementptr inbounds %"struct.webrtc::vp8::VP8BitReader", %"struct.webrtc::vp8::VP8BitReader"* %0, i64 0, i32 3
  %25 = getelementptr inbounds %"struct.webrtc::vp8::VP8BitReader", %"struct.webrtc::vp8::VP8BitReader"* %0, i64 0, i32 4
  %26 = load i32, i32* %23, align 8
  br label %27

27:                                               ; preds = %22, %44
  %28 = phi i32 [ %26, %22 ], [ %45, %44 ]
  %29 = phi i32 [ %18, %22 ], [ %46, %44 ]
  %30 = phi i32 [ %19, %22 ], [ %32, %44 ]
  %31 = shl i32 %29, 1
  store i32 %31, i32* %10, align 8
  %32 = shl i32 %30, 1
  store i32 %32, i32* %3, align 4
  %33 = add nsw i32 %28, 1
  store i32 %33, i32* %23, align 8
  %34 = icmp eq i32 %33, 8
  br i1 %34, label %35, label %44

35:                                               ; preds = %27
  store i32 0, i32* %23, align 8
  %36 = load i8*, i8** %24, align 8
  %37 = load i8*, i8** %25, align 8
  %38 = icmp eq i8* %36, %37
  br i1 %38, label %44, label %39

39:                                               ; preds = %35
  %40 = getelementptr inbounds i8, i8* %36, i64 1
  store i8* %40, i8** %24, align 8
  %41 = load i8, i8* %36, align 1
  %42 = zext i8 %41 to i32
  %43 = or i32 %31, %42
  store i32 %43, i32* %10, align 8
  br label %44

44:                                               ; preds = %35, %39, %27
  %45 = phi i32 [ 0, %35 ], [ 0, %39 ], [ %33, %27 ]
  %46 = phi i32 [ %31, %35 ], [ %43, %39 ], [ %31, %27 ]
  %47 = icmp ult i32 %32, 128
  br i1 %47, label %27, label %48

48:                                               ; preds = %44, %17
  ret i32 %20
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZN6webrtc3vp811VP8GetValueEPNS0_12VP8BitReaderEi(%"struct.webrtc::vp8::VP8BitReader"* nocapture, i32) local_unnamed_addr #0 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %62, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"struct.webrtc::vp8::VP8BitReader", %"struct.webrtc::vp8::VP8BitReader"* %0, i64 0, i32 1
  %6 = getelementptr inbounds %"struct.webrtc::vp8::VP8BitReader", %"struct.webrtc::vp8::VP8BitReader"* %0, i64 0, i32 0
  %7 = getelementptr inbounds %"struct.webrtc::vp8::VP8BitReader", %"struct.webrtc::vp8::VP8BitReader"* %0, i64 0, i32 2
  %8 = getelementptr inbounds %"struct.webrtc::vp8::VP8BitReader", %"struct.webrtc::vp8::VP8BitReader"* %0, i64 0, i32 3
  %9 = getelementptr inbounds %"struct.webrtc::vp8::VP8BitReader", %"struct.webrtc::vp8::VP8BitReader"* %0, i64 0, i32 4
  %10 = load i32, i32* %5, align 4
  %11 = load i32, i32* %6, align 8
  br label %12

12:                                               ; preds = %4, %57
  %13 = phi i32 [ %11, %4 ], [ %58, %57 ]
  %14 = phi i32 [ %10, %4 ], [ %59, %57 ]
  %15 = phi i32 [ 0, %4 ], [ %60, %57 ]
  %16 = phi i32 [ %1, %4 ], [ %17, %57 ]
  %17 = add nsw i32 %16, -1
  %18 = shl i32 %15, 1
  %19 = shl i32 %14, 7
  %20 = add i32 %19, -128
  %21 = lshr i32 %20, 8
  %22 = add nuw nsw i32 %21, 1
  %23 = shl i32 %22, 8
  %24 = icmp ult i32 %13, %23
  br i1 %24, label %28, label %25

25:                                               ; preds = %12
  %26 = sub i32 %14, %22
  store i32 %26, i32* %5, align 4
  %27 = sub i32 %13, %23
  store i32 %27, i32* %6, align 8
  br label %29

28:                                               ; preds = %12
  store i32 %22, i32* %5, align 4
  br label %29

29:                                               ; preds = %28, %25
  %30 = phi i32 [ %27, %25 ], [ %13, %28 ]
  %31 = phi i32 [ %26, %25 ], [ %22, %28 ]
  %32 = phi i32 [ 1, %25 ], [ 0, %28 ]
  %33 = icmp ult i32 %31, 128
  br i1 %33, label %34, label %57

34:                                               ; preds = %29
  %35 = load i32, i32* %7, align 8
  br label %36

36:                                               ; preds = %53, %34
  %37 = phi i32 [ %35, %34 ], [ %54, %53 ]
  %38 = phi i32 [ %30, %34 ], [ %55, %53 ]
  %39 = phi i32 [ %31, %34 ], [ %41, %53 ]
  %40 = shl i32 %38, 1
  store i32 %40, i32* %6, align 8
  %41 = shl i32 %39, 1
  store i32 %41, i32* %5, align 4
  %42 = add nsw i32 %37, 1
  store i32 %42, i32* %7, align 8
  %43 = icmp eq i32 %42, 8
  br i1 %43, label %44, label %53

44:                                               ; preds = %36
  store i32 0, i32* %7, align 8
  %45 = load i8*, i8** %8, align 8
  %46 = load i8*, i8** %9, align 8
  %47 = icmp eq i8* %45, %46
  br i1 %47, label %53, label %48

48:                                               ; preds = %44
  %49 = getelementptr inbounds i8, i8* %45, i64 1
  store i8* %49, i8** %8, align 8
  %50 = load i8, i8* %45, align 1
  %51 = zext i8 %50 to i32
  %52 = or i32 %40, %51
  store i32 %52, i32* %6, align 8
  br label %53

53:                                               ; preds = %48, %44, %36
  %54 = phi i32 [ 0, %44 ], [ 0, %48 ], [ %42, %36 ]
  %55 = phi i32 [ %40, %44 ], [ %52, %48 ], [ %40, %36 ]
  %56 = icmp ult i32 %41, 128
  br i1 %56, label %36, label %57

57:                                               ; preds = %53, %29
  %58 = phi i32 [ %30, %29 ], [ %55, %53 ]
  %59 = phi i32 [ %31, %29 ], [ %41, %53 ]
  %60 = or i32 %32, %18
  %61 = icmp eq i32 %17, 0
  br i1 %61, label %62, label %12

62:                                               ; preds = %57, %2
  %63 = phi i32 [ 0, %2 ], [ %60, %57 ]
  ret i32 %63
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZN6webrtc3vp817VP8GetSignedValueEPNS0_12VP8BitReaderEi(%"struct.webrtc::vp8::VP8BitReader"* nocapture, i32) local_unnamed_addr #0 {
  %3 = icmp eq i32 %1, 0
  %4 = getelementptr inbounds %"struct.webrtc::vp8::VP8BitReader", %"struct.webrtc::vp8::VP8BitReader"* %0, i64 0, i32 1
  br i1 %3, label %5, label %9

5:                                                ; preds = %2
  %6 = load i32, i32* %4, align 4
  %7 = getelementptr inbounds %"struct.webrtc::vp8::VP8BitReader", %"struct.webrtc::vp8::VP8BitReader"* %0, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  br label %66

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.webrtc::vp8::VP8BitReader", %"struct.webrtc::vp8::VP8BitReader"* %0, i64 0, i32 0
  %11 = getelementptr inbounds %"struct.webrtc::vp8::VP8BitReader", %"struct.webrtc::vp8::VP8BitReader"* %0, i64 0, i32 2
  %12 = getelementptr inbounds %"struct.webrtc::vp8::VP8BitReader", %"struct.webrtc::vp8::VP8BitReader"* %0, i64 0, i32 3
  %13 = getelementptr inbounds %"struct.webrtc::vp8::VP8BitReader", %"struct.webrtc::vp8::VP8BitReader"* %0, i64 0, i32 4
  %14 = load i32, i32* %4, align 4
  %15 = load i32, i32* %10, align 8
  br label %16

16:                                               ; preds = %61, %9
  %17 = phi i32 [ %15, %9 ], [ %62, %61 ]
  %18 = phi i32 [ %14, %9 ], [ %63, %61 ]
  %19 = phi i32 [ 0, %9 ], [ %64, %61 ]
  %20 = phi i32 [ %1, %9 ], [ %21, %61 ]
  %21 = add nsw i32 %20, -1
  %22 = shl i32 %19, 1
  %23 = shl i32 %18, 7
  %24 = add i32 %23, -128
  %25 = lshr i32 %24, 8
  %26 = add nuw nsw i32 %25, 1
  %27 = shl i32 %26, 8
  %28 = icmp ult i32 %17, %27
  br i1 %28, label %32, label %29

29:                                               ; preds = %16
  %30 = sub i32 %18, %26
  store i32 %30, i32* %4, align 4
  %31 = sub i32 %17, %27
  store i32 %31, i32* %10, align 8
  br label %33

32:                                               ; preds = %16
  store i32 %26, i32* %4, align 4
  br label %33

33:                                               ; preds = %32, %29
  %34 = phi i32 [ %31, %29 ], [ %17, %32 ]
  %35 = phi i32 [ %30, %29 ], [ %26, %32 ]
  %36 = phi i32 [ 1, %29 ], [ 0, %32 ]
  %37 = icmp ult i32 %35, 128
  br i1 %37, label %38, label %61

38:                                               ; preds = %33
  %39 = load i32, i32* %11, align 8
  br label %40

40:                                               ; preds = %57, %38
  %41 = phi i32 [ %39, %38 ], [ %58, %57 ]
  %42 = phi i32 [ %34, %38 ], [ %59, %57 ]
  %43 = phi i32 [ %35, %38 ], [ %45, %57 ]
  %44 = shl i32 %42, 1
  store i32 %44, i32* %10, align 8
  %45 = shl i32 %43, 1
  store i32 %45, i32* %4, align 4
  %46 = add nsw i32 %41, 1
  store i32 %46, i32* %11, align 8
  %47 = icmp eq i32 %46, 8
  br i1 %47, label %48, label %57

48:                                               ; preds = %40
  store i32 0, i32* %11, align 8
  %49 = load i8*, i8** %12, align 8
  %50 = load i8*, i8** %13, align 8
  %51 = icmp eq i8* %49, %50
  br i1 %51, label %57, label %52

52:                                               ; preds = %48
  %53 = getelementptr inbounds i8, i8* %49, i64 1
  store i8* %53, i8** %12, align 8
  %54 = load i8, i8* %49, align 1
  %55 = zext i8 %54 to i32
  %56 = or i32 %44, %55
  store i32 %56, i32* %10, align 8
  br label %57

57:                                               ; preds = %52, %48, %40
  %58 = phi i32 [ 0, %48 ], [ 0, %52 ], [ %46, %40 ]
  %59 = phi i32 [ %44, %48 ], [ %56, %52 ], [ %44, %40 ]
  %60 = icmp ult i32 %45, 128
  br i1 %60, label %40, label %61

61:                                               ; preds = %57, %33
  %62 = phi i32 [ %34, %33 ], [ %59, %57 ]
  %63 = phi i32 [ %35, %33 ], [ %45, %57 ]
  %64 = or i32 %36, %22
  %65 = icmp eq i32 %21, 0
  br i1 %65, label %66, label %16

66:                                               ; preds = %61, %5
  %67 = phi i32 [ %8, %5 ], [ %62, %61 ]
  %68 = phi i32 [ %6, %5 ], [ %63, %61 ]
  %69 = phi i32 [ 0, %5 ], [ %64, %61 ]
  %70 = getelementptr inbounds %"struct.webrtc::vp8::VP8BitReader", %"struct.webrtc::vp8::VP8BitReader"* %0, i64 0, i32 1
  %71 = getelementptr inbounds %"struct.webrtc::vp8::VP8BitReader", %"struct.webrtc::vp8::VP8BitReader"* %0, i64 0, i32 0
  %72 = getelementptr inbounds %"struct.webrtc::vp8::VP8BitReader", %"struct.webrtc::vp8::VP8BitReader"* %0, i64 0, i32 2
  %73 = getelementptr inbounds %"struct.webrtc::vp8::VP8BitReader", %"struct.webrtc::vp8::VP8BitReader"* %0, i64 0, i32 3
  %74 = getelementptr inbounds %"struct.webrtc::vp8::VP8BitReader", %"struct.webrtc::vp8::VP8BitReader"* %0, i64 0, i32 4
  %75 = shl i32 %68, 7
  %76 = add i32 %75, -128
  %77 = lshr i32 %76, 8
  %78 = add nuw nsw i32 %77, 1
  %79 = shl i32 %78, 8
  %80 = icmp ult i32 %67, %79
  br i1 %80, label %84, label %81

81:                                               ; preds = %66
  %82 = sub i32 %68, %78
  store i32 %82, i32* %70, align 4
  %83 = sub i32 %67, %79
  store i32 %83, i32* %71, align 8
  br label %85

84:                                               ; preds = %66
  store i32 %78, i32* %70, align 4
  br label %85

85:                                               ; preds = %84, %81
  %86 = phi i32 [ %83, %81 ], [ %67, %84 ]
  %87 = phi i32 [ %82, %81 ], [ %78, %84 ]
  %88 = phi i32 [ 1, %81 ], [ 0, %84 ]
  %89 = icmp ult i32 %87, 128
  br i1 %89, label %90, label %113

90:                                               ; preds = %85
  %91 = load i32, i32* %72, align 8
  br label %92

92:                                               ; preds = %109, %90
  %93 = phi i32 [ %91, %90 ], [ %110, %109 ]
  %94 = phi i32 [ %86, %90 ], [ %111, %109 ]
  %95 = phi i32 [ %87, %90 ], [ %97, %109 ]
  %96 = shl i32 %94, 1
  store i32 %96, i32* %71, align 8
  %97 = shl i32 %95, 1
  store i32 %97, i32* %70, align 4
  %98 = add nsw i32 %93, 1
  store i32 %98, i32* %72, align 8
  %99 = icmp eq i32 %98, 8
  br i1 %99, label %100, label %109

100:                                              ; preds = %92
  store i32 0, i32* %72, align 8
  %101 = load i8*, i8** %73, align 8
  %102 = load i8*, i8** %74, align 8
  %103 = icmp eq i8* %101, %102
  br i1 %103, label %109, label %104

104:                                              ; preds = %100
  %105 = getelementptr inbounds i8, i8* %101, i64 1
  store i8* %105, i8** %73, align 8
  %106 = load i8, i8* %101, align 1
  %107 = zext i8 %106 to i32
  %108 = or i32 %96, %107
  store i32 %108, i32* %71, align 8
  br label %109

109:                                              ; preds = %104, %100, %92
  %110 = phi i32 [ 0, %100 ], [ 0, %104 ], [ %98, %92 ]
  %111 = phi i32 [ %96, %100 ], [ %108, %104 ], [ %96, %92 ]
  %112 = icmp ult i32 %97, 128
  br i1 %112, label %92, label %113

113:                                              ; preds = %109, %85
  %114 = icmp eq i32 %88, 0
  %115 = sub nsw i32 0, %69
  %116 = select i1 %114, i32 %69, i32 %115
  ret i32 %116
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN6webrtc3vp85GetQpEPKhmPi(i8*, i64, i32* nocapture) local_unnamed_addr #2 {
  %4 = alloca %"class.rtc::DiagnosticLogMessage", align 8
  %5 = alloca %"class.rtc::DiagnosticLogMessage", align 8
  %6 = alloca %"class.rtc::DiagnosticLogMessage", align 8
  %7 = icmp ult i64 %1, 3
  br i1 %7, label %8, label %13

8:                                                ; preds = %3
  %9 = bitcast %"class.rtc::DiagnosticLogMessage"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 304, i8* nonnull %9) #7
  call void @_ZN3rtc20DiagnosticLogMessageC1EPKciNS_15LoggingSeverityENS_15LogErrorContextEi(%"class.rtc::DiagnosticLogMessage"* nonnull %4, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str, i64 0, i64 0), i32 159, i32 2, i32 0, i32 0) #7
  %10 = getelementptr inbounds %"class.rtc::DiagnosticLogMessage", %"class.rtc::DiagnosticLogMessage"* %4, i64 0, i32 7
  %11 = bitcast %"class.std::__1::basic_ostringstream"* %10 to %"class.std::__1::basic_ostream"*
  %12 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %11, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.1, i64 0, i64 0), i64 33) #7
  call void @_ZN3rtc20DiagnosticLogMessageD1Ev(%"class.rtc::DiagnosticLogMessage"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 304, i8* nonnull %9) #7
  br label %1329

13:                                               ; preds = %3
  %14 = load i8, i8* %0, align 1
  %15 = zext i8 %14 to i32
  %16 = getelementptr inbounds i8, i8* %0, i64 1
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = shl nuw nsw i32 %18, 8
  %20 = or i32 %19, %15
  %21 = getelementptr inbounds i8, i8* %0, i64 2
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = shl nuw nsw i32 %23, 16
  %25 = or i32 %20, %24
  %26 = and i32 %15, 1
  %27 = icmp eq i32 %26, 0
  %28 = lshr i32 %25, 5
  %29 = select i1 %27, i64 10, i64 3
  %30 = zext i32 %28 to i64
  %31 = add nuw nsw i64 %29, %30
  %32 = icmp ugt i64 %31, %1
  br i1 %32, label %33, label %39

33:                                               ; preds = %13
  %34 = bitcast %"class.rtc::DiagnosticLogMessage"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 304, i8* nonnull %34) #7
  call void @_ZN3rtc20DiagnosticLogMessageC1EPKciNS_15LoggingSeverityENS_15LogErrorContextEi(%"class.rtc::DiagnosticLogMessage"* nonnull %5, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str, i64 0, i64 0), i32 172, i32 2, i32 0, i32 0) #7
  %35 = getelementptr inbounds %"class.rtc::DiagnosticLogMessage", %"class.rtc::DiagnosticLogMessage"* %5, i64 0, i32 7
  %36 = bitcast %"class.std::__1::basic_ostringstream"* %35 to %"class.std::__1::basic_ostream"*
  %37 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %36, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i64 0, i64 0), i64 34) #7
  %38 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEm(%"class.std::__1::basic_ostream"* %37, i64 %1) #7
  call void @_ZN3rtc20DiagnosticLogMessageD1Ev(%"class.rtc::DiagnosticLogMessage"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 304, i8* nonnull %34) #7
  br label %1329

39:                                               ; preds = %13
  %40 = getelementptr inbounds i8, i8* %0, i64 %29
  %41 = getelementptr inbounds i8, i8* %40, i64 %30
  %42 = icmp eq i32 %28, 0
  br i1 %42, label %47, label %43

43:                                               ; preds = %39
  %44 = getelementptr inbounds i8, i8* %40, i64 1
  %45 = load i8, i8* %40, align 1
  %46 = zext i8 %45 to i32
  br label %47

47:                                               ; preds = %43, %39
  %48 = phi i8* [ %40, %39 ], [ %44, %43 ]
  %49 = phi i32 [ 0, %39 ], [ %46, %43 ]
  %50 = icmp eq i8* %48, %41
  %51 = shl nuw nsw i32 %49, 8
  br i1 %50, label %57, label %52

52:                                               ; preds = %47
  %53 = getelementptr inbounds i8, i8* %48, i64 1
  %54 = load i8, i8* %48, align 1
  %55 = zext i8 %54 to i32
  %56 = or i32 %51, %55
  br label %57

57:                                               ; preds = %47, %52
  %58 = phi i8* [ %41, %47 ], [ %53, %52 ]
  %59 = phi i32 [ %51, %47 ], [ %56, %52 ]
  br i1 %27, label %60, label %102

60:                                               ; preds = %57
  %61 = icmp ult i32 %59, 32768
  br i1 %61, label %65, label %62

62:                                               ; preds = %60
  %63 = shl nsw i32 %59, 1
  %64 = add nsw i32 %63, -65536
  br label %65

65:                                               ; preds = %62, %60
  %66 = phi i32 [ 0, %60 ], [ 1, %62 ]
  %67 = phi i32 [ 128, %60 ], [ 254, %62 ]
  %68 = phi i32 [ %59, %60 ], [ %64, %62 ]
  %69 = phi i8* [ %58, %60 ], [ %58, %62 ]
  %70 = shl nuw nsw i32 %67, 7
  %71 = add nsw i32 %70, -128
  %72 = lshr i32 %71, 8
  %73 = add nuw nsw i32 %72, 1
  %74 = shl nuw nsw i32 %73, 8
  %75 = icmp ult i32 %68, %74
  %76 = sub nsw i32 %67, %73
  %77 = select i1 %75, i32 %73, i32 %76
  %78 = select i1 %75, i32 0, i32 %74
  %79 = sub i32 %68, %78
  %80 = icmp ult i32 %77, 128
  br i1 %80, label %81, label %102

81:                                               ; preds = %65, %97
  %82 = phi i8* [ %100, %97 ], [ %69, %65 ]
  %83 = phi i32 [ %98, %97 ], [ %66, %65 ]
  %84 = phi i32 [ %99, %97 ], [ %79, %65 ]
  %85 = phi i32 [ %87, %97 ], [ %77, %65 ]
  %86 = shl i32 %84, 1
  %87 = shl i32 %85, 1
  %88 = add nsw i32 %83, 1
  %89 = icmp eq i32 %88, 8
  br i1 %89, label %90, label %97

90:                                               ; preds = %81
  %91 = icmp eq i8* %82, %41
  br i1 %91, label %97, label %92

92:                                               ; preds = %90
  %93 = getelementptr inbounds i8, i8* %82, i64 1
  %94 = load i8, i8* %82, align 1
  %95 = zext i8 %94 to i32
  %96 = or i32 %86, %95
  br label %97

97:                                               ; preds = %92, %90, %81
  %98 = phi i32 [ 0, %90 ], [ 0, %92 ], [ %88, %81 ]
  %99 = phi i32 [ %86, %90 ], [ %96, %92 ], [ %86, %81 ]
  %100 = phi i8* [ %41, %90 ], [ %93, %92 ], [ %82, %81 ]
  %101 = icmp ult i32 %87, 128
  br i1 %101, label %81, label %102

102:                                              ; preds = %97, %65, %57
  %103 = phi i32 [ 0, %57 ], [ %66, %65 ], [ %98, %97 ]
  %104 = phi i32 [ 255, %57 ], [ %77, %65 ], [ %87, %97 ]
  %105 = phi i32 [ %59, %57 ], [ %79, %65 ], [ %99, %97 ]
  %106 = phi i8* [ %58, %57 ], [ %69, %65 ], [ %100, %97 ]
  %107 = shl i32 %104, 7
  %108 = add i32 %107, -128
  %109 = lshr i32 %108, 8
  %110 = add nuw nsw i32 %109, 1
  %111 = shl i32 %110, 8
  %112 = icmp ult i32 %105, %111
  %113 = sub i32 %104, %110
  %114 = select i1 %112, i32 %110, i32 %113
  %115 = select i1 %112, i32 0, i32 %111
  %116 = sub i32 %105, %115
  %117 = icmp ult i32 %114, 128
  br i1 %117, label %118, label %139

118:                                              ; preds = %102, %134
  %119 = phi i8* [ %137, %134 ], [ %106, %102 ]
  %120 = phi i32 [ %135, %134 ], [ %103, %102 ]
  %121 = phi i32 [ %136, %134 ], [ %116, %102 ]
  %122 = phi i32 [ %124, %134 ], [ %114, %102 ]
  %123 = shl i32 %121, 1
  %124 = shl i32 %122, 1
  %125 = add nsw i32 %120, 1
  %126 = icmp eq i32 %125, 8
  br i1 %126, label %127, label %134

127:                                              ; preds = %118
  %128 = icmp eq i8* %119, %41
  br i1 %128, label %134, label %129

129:                                              ; preds = %127
  %130 = getelementptr inbounds i8, i8* %119, i64 1
  %131 = load i8, i8* %119, align 1
  %132 = zext i8 %131 to i32
  %133 = or i32 %123, %132
  br label %134

134:                                              ; preds = %129, %127, %118
  %135 = phi i32 [ 0, %127 ], [ 0, %129 ], [ %125, %118 ]
  %136 = phi i32 [ %123, %127 ], [ %133, %129 ], [ %123, %118 ]
  %137 = phi i8* [ %41, %127 ], [ %130, %129 ], [ %119, %118 ]
  %138 = icmp ult i32 %124, 128
  br i1 %138, label %118, label %139

139:                                              ; preds = %134, %102
  %140 = phi i32 [ %103, %102 ], [ %135, %134 ]
  %141 = phi i32 [ %114, %102 ], [ %124, %134 ]
  %142 = phi i32 [ %116, %102 ], [ %136, %134 ]
  %143 = phi i8* [ %106, %102 ], [ %137, %134 ]
  br i1 %112, label %646, label %144

144:                                              ; preds = %139
  %145 = shl i32 %141, 7
  %146 = add i32 %145, -128
  %147 = lshr i32 %146, 8
  %148 = add nuw nsw i32 %147, 1
  %149 = shl i32 %148, 8
  %150 = icmp ult i32 %142, %149
  %151 = sub i32 %141, %148
  %152 = select i1 %150, i32 0, i32 %149
  %153 = sub i32 %142, %152
  %154 = select i1 %150, i32 %148, i32 %151
  %155 = icmp ult i32 %154, 128
  br i1 %155, label %156, label %177

156:                                              ; preds = %144, %172
  %157 = phi i8* [ %175, %172 ], [ %143, %144 ]
  %158 = phi i32 [ %173, %172 ], [ %140, %144 ]
  %159 = phi i32 [ %174, %172 ], [ %153, %144 ]
  %160 = phi i32 [ %162, %172 ], [ %154, %144 ]
  %161 = shl i32 %159, 1
  %162 = shl i32 %160, 1
  %163 = add nsw i32 %158, 1
  %164 = icmp eq i32 %163, 8
  br i1 %164, label %165, label %172

165:                                              ; preds = %156
  %166 = icmp eq i8* %157, %41
  br i1 %166, label %172, label %167

167:                                              ; preds = %165
  %168 = getelementptr inbounds i8, i8* %157, i64 1
  %169 = load i8, i8* %157, align 1
  %170 = zext i8 %169 to i32
  %171 = or i32 %161, %170
  br label %172

172:                                              ; preds = %167, %165, %156
  %173 = phi i32 [ 0, %165 ], [ 0, %167 ], [ %163, %156 ]
  %174 = phi i32 [ %161, %165 ], [ %171, %167 ], [ %161, %156 ]
  %175 = phi i8* [ %41, %165 ], [ %168, %167 ], [ %157, %156 ]
  %176 = icmp ult i32 %162, 128
  br i1 %176, label %156, label %177

177:                                              ; preds = %172, %144
  %178 = phi i32 [ %140, %144 ], [ %173, %172 ]
  %179 = phi i32 [ %153, %144 ], [ %174, %172 ]
  %180 = phi i8* [ %143, %144 ], [ %175, %172 ]
  %181 = phi i32 [ %154, %144 ], [ %162, %172 ]
  %182 = shl i32 %181, 7
  %183 = add i32 %182, -128
  %184 = lshr i32 %183, 8
  %185 = add nuw nsw i32 %184, 1
  %186 = shl i32 %185, 8
  %187 = icmp ult i32 %179, %186
  %188 = sub i32 %181, %185
  %189 = select i1 %187, i32 %185, i32 %188
  %190 = select i1 %187, i32 0, i32 %186
  %191 = sub i32 %179, %190
  %192 = icmp ult i32 %189, 128
  br i1 %192, label %193, label %214

193:                                              ; preds = %177, %209
  %194 = phi i8* [ %212, %209 ], [ %180, %177 ]
  %195 = phi i32 [ %210, %209 ], [ %178, %177 ]
  %196 = phi i32 [ %211, %209 ], [ %191, %177 ]
  %197 = phi i32 [ %199, %209 ], [ %189, %177 ]
  %198 = shl i32 %196, 1
  %199 = shl i32 %197, 1
  %200 = add nsw i32 %195, 1
  %201 = icmp eq i32 %200, 8
  br i1 %201, label %202, label %209

202:                                              ; preds = %193
  %203 = icmp eq i8* %194, %41
  br i1 %203, label %209, label %204

204:                                              ; preds = %202
  %205 = getelementptr inbounds i8, i8* %194, i64 1
  %206 = load i8, i8* %194, align 1
  %207 = zext i8 %206 to i32
  %208 = or i32 %198, %207
  br label %209

209:                                              ; preds = %204, %202, %193
  %210 = phi i32 [ 0, %202 ], [ 0, %204 ], [ %200, %193 ]
  %211 = phi i32 [ %198, %202 ], [ %208, %204 ], [ %198, %193 ]
  %212 = phi i8* [ %41, %202 ], [ %205, %204 ], [ %194, %193 ]
  %213 = icmp ult i32 %199, 128
  br i1 %213, label %193, label %214

214:                                              ; preds = %209, %177
  %215 = phi i32 [ %178, %177 ], [ %210, %209 ]
  %216 = phi i32 [ %189, %177 ], [ %199, %209 ]
  %217 = phi i32 [ %191, %177 ], [ %211, %209 ]
  %218 = phi i8* [ %180, %177 ], [ %212, %209 ]
  br i1 %187, label %523, label %219

219:                                              ; preds = %214
  %220 = shl i32 %216, 7
  %221 = add i32 %220, -128
  %222 = lshr i32 %221, 8
  %223 = add nuw nsw i32 %222, 1
  %224 = shl i32 %223, 8
  %225 = icmp ult i32 %217, %224
  %226 = sub i32 %216, %223
  %227 = select i1 %225, i32 0, i32 %224
  %228 = sub i32 %217, %227
  %229 = select i1 %225, i32 %223, i32 %226
  %230 = icmp ult i32 %229, 128
  br i1 %230, label %231, label %252

231:                                              ; preds = %219, %247
  %232 = phi i8* [ %250, %247 ], [ %218, %219 ]
  %233 = phi i32 [ %248, %247 ], [ %215, %219 ]
  %234 = phi i32 [ %249, %247 ], [ %228, %219 ]
  %235 = phi i32 [ %237, %247 ], [ %229, %219 ]
  %236 = shl i32 %234, 1
  %237 = shl i32 %235, 1
  %238 = add nsw i32 %233, 1
  %239 = icmp eq i32 %238, 8
  br i1 %239, label %240, label %247

240:                                              ; preds = %231
  %241 = icmp eq i8* %232, %41
  br i1 %241, label %247, label %242

242:                                              ; preds = %240
  %243 = getelementptr inbounds i8, i8* %232, i64 1
  %244 = load i8, i8* %232, align 1
  %245 = zext i8 %244 to i32
  %246 = or i32 %236, %245
  br label %247

247:                                              ; preds = %242, %240, %231
  %248 = phi i32 [ 0, %240 ], [ 0, %242 ], [ %238, %231 ]
  %249 = phi i32 [ %236, %240 ], [ %246, %242 ], [ %236, %231 ]
  %250 = phi i8* [ %41, %240 ], [ %243, %242 ], [ %232, %231 ]
  %251 = icmp ult i32 %237, 128
  br i1 %251, label %231, label %252

252:                                              ; preds = %247, %219
  %253 = phi i32 [ %215, %219 ], [ %248, %247 ]
  %254 = phi i32 [ %228, %219 ], [ %249, %247 ]
  %255 = phi i8* [ %218, %219 ], [ %250, %247 ]
  %256 = phi i32 [ %229, %219 ], [ %237, %247 ]
  br label %257

257:                                              ; preds = %252, %383
  %258 = phi i32 [ %384, %383 ], [ %253, %252 ]
  %259 = phi i32 [ %386, %383 ], [ %254, %252 ]
  %260 = phi i8* [ %387, %383 ], [ %255, %252 ]
  %261 = phi i32 [ %385, %383 ], [ %256, %252 ]
  %262 = phi i32 [ %388, %383 ], [ 0, %252 ]
  %263 = shl i32 %261, 7
  %264 = add i32 %263, -128
  %265 = lshr i32 %264, 8
  %266 = add nuw nsw i32 %265, 1
  %267 = shl i32 %266, 8
  %268 = icmp ult i32 %259, %267
  %269 = sub i32 %261, %266
  %270 = select i1 %268, i32 %266, i32 %269
  %271 = select i1 %268, i32 0, i32 %267
  %272 = sub i32 %259, %271
  %273 = icmp ult i32 %270, 128
  br i1 %273, label %274, label %295

274:                                              ; preds = %257, %290
  %275 = phi i8* [ %293, %290 ], [ %260, %257 ]
  %276 = phi i32 [ %291, %290 ], [ %258, %257 ]
  %277 = phi i32 [ %292, %290 ], [ %272, %257 ]
  %278 = phi i32 [ %280, %290 ], [ %270, %257 ]
  %279 = shl i32 %277, 1
  %280 = shl i32 %278, 1
  %281 = add nsw i32 %276, 1
  %282 = icmp eq i32 %281, 8
  br i1 %282, label %283, label %290

283:                                              ; preds = %274
  %284 = icmp eq i8* %275, %41
  br i1 %284, label %290, label %285

285:                                              ; preds = %283
  %286 = getelementptr inbounds i8, i8* %275, i64 1
  %287 = load i8, i8* %275, align 1
  %288 = zext i8 %287 to i32
  %289 = or i32 %279, %288
  br label %290

290:                                              ; preds = %285, %283, %274
  %291 = phi i32 [ 0, %283 ], [ 0, %285 ], [ %281, %274 ]
  %292 = phi i32 [ %279, %283 ], [ %289, %285 ], [ %279, %274 ]
  %293 = phi i8* [ %41, %283 ], [ %286, %285 ], [ %275, %274 ]
  %294 = icmp ult i32 %280, 128
  br i1 %294, label %274, label %295

295:                                              ; preds = %290, %257
  %296 = phi i32 [ %258, %257 ], [ %291, %290 ]
  %297 = phi i32 [ %270, %257 ], [ %280, %290 ]
  %298 = phi i32 [ %272, %257 ], [ %292, %290 ]
  %299 = phi i8* [ %260, %257 ], [ %293, %290 ]
  br i1 %268, label %383, label %300

300:                                              ; preds = %295, %341
  %301 = phi i32 [ %342, %341 ], [ %296, %295 ]
  %302 = phi i32 [ %343, %341 ], [ %298, %295 ]
  %303 = phi i8* [ %344, %341 ], [ %299, %295 ]
  %304 = phi i32 [ %345, %341 ], [ %298, %295 ]
  %305 = phi i32 [ %346, %341 ], [ %297, %295 ]
  %306 = phi i32 [ %307, %341 ], [ 7, %295 ]
  %307 = add nsw i32 %306, -1
  %308 = shl i32 %305, 7
  %309 = add i32 %308, -128
  %310 = lshr i32 %309, 8
  %311 = add nuw nsw i32 %310, 1
  %312 = shl i32 %311, 8
  %313 = icmp ult i32 %304, %312
  %314 = sub i32 %305, %311
  %315 = sub i32 %304, %312
  %316 = select i1 %313, i32 %302, i32 %315
  %317 = select i1 %313, i32 %304, i32 %315
  %318 = select i1 %313, i32 %311, i32 %314
  %319 = icmp ult i32 %318, 128
  br i1 %319, label %320, label %341

320:                                              ; preds = %300, %336
  %321 = phi i8* [ %339, %336 ], [ %303, %300 ]
  %322 = phi i32 [ %337, %336 ], [ %301, %300 ]
  %323 = phi i32 [ %338, %336 ], [ %317, %300 ]
  %324 = phi i32 [ %326, %336 ], [ %318, %300 ]
  %325 = shl i32 %323, 1
  %326 = shl i32 %324, 1
  %327 = add nsw i32 %322, 1
  %328 = icmp eq i32 %327, 8
  br i1 %328, label %329, label %336

329:                                              ; preds = %320
  %330 = icmp eq i8* %321, %41
  br i1 %330, label %336, label %331

331:                                              ; preds = %329
  %332 = getelementptr inbounds i8, i8* %321, i64 1
  %333 = load i8, i8* %321, align 1
  %334 = zext i8 %333 to i32
  %335 = or i32 %325, %334
  br label %336

336:                                              ; preds = %331, %329, %320
  %337 = phi i32 [ 0, %329 ], [ 0, %331 ], [ %327, %320 ]
  %338 = phi i32 [ %325, %329 ], [ %335, %331 ], [ %325, %320 ]
  %339 = phi i8* [ %41, %329 ], [ %332, %331 ], [ %321, %320 ]
  %340 = icmp ult i32 %326, 128
  br i1 %340, label %320, label %341

341:                                              ; preds = %336, %300
  %342 = phi i32 [ %301, %300 ], [ %337, %336 ]
  %343 = phi i32 [ %316, %300 ], [ %338, %336 ]
  %344 = phi i8* [ %303, %300 ], [ %339, %336 ]
  %345 = phi i32 [ %317, %300 ], [ %338, %336 ]
  %346 = phi i32 [ %318, %300 ], [ %326, %336 ]
  %347 = icmp eq i32 %307, 0
  br i1 %347, label %348, label %300

348:                                              ; preds = %341
  %349 = shl i32 %346, 7
  %350 = add i32 %349, -128
  %351 = lshr i32 %350, 8
  %352 = add nuw nsw i32 %351, 1
  %353 = shl i32 %352, 8
  %354 = icmp ult i32 %345, %353
  %355 = sub i32 %346, %352
  %356 = sub i32 %345, %353
  %357 = select i1 %354, i32 %352, i32 %355
  %358 = select i1 %354, i32 %343, i32 %356
  %359 = icmp ult i32 %357, 128
  br i1 %359, label %360, label %383

360:                                              ; preds = %348
  %361 = select i1 %354, i32 %345, i32 %356
  br label %362

362:                                              ; preds = %360, %378
  %363 = phi i8* [ %381, %378 ], [ %344, %360 ]
  %364 = phi i32 [ %379, %378 ], [ %342, %360 ]
  %365 = phi i32 [ %380, %378 ], [ %361, %360 ]
  %366 = phi i32 [ %368, %378 ], [ %357, %360 ]
  %367 = shl i32 %365, 1
  %368 = shl i32 %366, 1
  %369 = add nsw i32 %364, 1
  %370 = icmp eq i32 %369, 8
  br i1 %370, label %371, label %378

371:                                              ; preds = %362
  %372 = icmp eq i8* %363, %41
  br i1 %372, label %378, label %373

373:                                              ; preds = %371
  %374 = getelementptr inbounds i8, i8* %363, i64 1
  %375 = load i8, i8* %363, align 1
  %376 = zext i8 %375 to i32
  %377 = or i32 %367, %376
  br label %378

378:                                              ; preds = %373, %371, %362
  %379 = phi i32 [ 0, %371 ], [ 0, %373 ], [ %369, %362 ]
  %380 = phi i32 [ %367, %371 ], [ %377, %373 ], [ %367, %362 ]
  %381 = phi i8* [ %41, %371 ], [ %374, %373 ], [ %363, %362 ]
  %382 = icmp ult i32 %368, 128
  br i1 %382, label %362, label %383

383:                                              ; preds = %378, %348, %295
  %384 = phi i32 [ %296, %295 ], [ %342, %348 ], [ %379, %378 ]
  %385 = phi i32 [ %297, %295 ], [ %357, %348 ], [ %368, %378 ]
  %386 = phi i32 [ %298, %295 ], [ %358, %348 ], [ %380, %378 ]
  %387 = phi i8* [ %299, %295 ], [ %344, %348 ], [ %381, %378 ]
  %388 = add nuw nsw i32 %262, 1
  %389 = icmp eq i32 %388, 4
  br i1 %389, label %390, label %257

390:                                              ; preds = %383, %516
  %391 = phi i32 [ %517, %516 ], [ %384, %383 ]
  %392 = phi i32 [ %518, %516 ], [ %385, %383 ]
  %393 = phi i32 [ %519, %516 ], [ %386, %383 ]
  %394 = phi i8* [ %520, %516 ], [ %387, %383 ]
  %395 = phi i32 [ %521, %516 ], [ 0, %383 ]
  %396 = shl i32 %392, 7
  %397 = add i32 %396, -128
  %398 = lshr i32 %397, 8
  %399 = add nuw nsw i32 %398, 1
  %400 = shl i32 %399, 8
  %401 = icmp ult i32 %393, %400
  %402 = sub i32 %392, %399
  %403 = select i1 %401, i32 %399, i32 %402
  %404 = select i1 %401, i32 0, i32 %400
  %405 = sub i32 %393, %404
  %406 = icmp ult i32 %403, 128
  br i1 %406, label %407, label %428

407:                                              ; preds = %390, %423
  %408 = phi i8* [ %426, %423 ], [ %394, %390 ]
  %409 = phi i32 [ %424, %423 ], [ %391, %390 ]
  %410 = phi i32 [ %425, %423 ], [ %405, %390 ]
  %411 = phi i32 [ %413, %423 ], [ %403, %390 ]
  %412 = shl i32 %410, 1
  %413 = shl i32 %411, 1
  %414 = add nsw i32 %409, 1
  %415 = icmp eq i32 %414, 8
  br i1 %415, label %416, label %423

416:                                              ; preds = %407
  %417 = icmp eq i8* %408, %41
  br i1 %417, label %423, label %418

418:                                              ; preds = %416
  %419 = getelementptr inbounds i8, i8* %408, i64 1
  %420 = load i8, i8* %408, align 1
  %421 = zext i8 %420 to i32
  %422 = or i32 %412, %421
  br label %423

423:                                              ; preds = %418, %416, %407
  %424 = phi i32 [ 0, %416 ], [ 0, %418 ], [ %414, %407 ]
  %425 = phi i32 [ %412, %416 ], [ %422, %418 ], [ %412, %407 ]
  %426 = phi i8* [ %41, %416 ], [ %419, %418 ], [ %408, %407 ]
  %427 = icmp ult i32 %413, 128
  br i1 %427, label %407, label %428

428:                                              ; preds = %423, %390
  %429 = phi i32 [ %391, %390 ], [ %424, %423 ]
  %430 = phi i32 [ %403, %390 ], [ %413, %423 ]
  %431 = phi i32 [ %405, %390 ], [ %425, %423 ]
  %432 = phi i8* [ %394, %390 ], [ %426, %423 ]
  br i1 %401, label %516, label %433

433:                                              ; preds = %428, %474
  %434 = phi i32 [ %475, %474 ], [ %429, %428 ]
  %435 = phi i32 [ %476, %474 ], [ %431, %428 ]
  %436 = phi i8* [ %477, %474 ], [ %432, %428 ]
  %437 = phi i32 [ %478, %474 ], [ %431, %428 ]
  %438 = phi i32 [ %479, %474 ], [ %430, %428 ]
  %439 = phi i32 [ %440, %474 ], [ 6, %428 ]
  %440 = add nsw i32 %439, -1
  %441 = shl i32 %438, 7
  %442 = add i32 %441, -128
  %443 = lshr i32 %442, 8
  %444 = add nuw nsw i32 %443, 1
  %445 = shl i32 %444, 8
  %446 = icmp ult i32 %437, %445
  %447 = sub i32 %438, %444
  %448 = sub i32 %437, %445
  %449 = select i1 %446, i32 %435, i32 %448
  %450 = select i1 %446, i32 %437, i32 %448
  %451 = select i1 %446, i32 %444, i32 %447
  %452 = icmp ult i32 %451, 128
  br i1 %452, label %453, label %474

453:                                              ; preds = %433, %469
  %454 = phi i8* [ %472, %469 ], [ %436, %433 ]
  %455 = phi i32 [ %470, %469 ], [ %434, %433 ]
  %456 = phi i32 [ %471, %469 ], [ %450, %433 ]
  %457 = phi i32 [ %459, %469 ], [ %451, %433 ]
  %458 = shl i32 %456, 1
  %459 = shl i32 %457, 1
  %460 = add nsw i32 %455, 1
  %461 = icmp eq i32 %460, 8
  br i1 %461, label %462, label %469

462:                                              ; preds = %453
  %463 = icmp eq i8* %454, %41
  br i1 %463, label %469, label %464

464:                                              ; preds = %462
  %465 = getelementptr inbounds i8, i8* %454, i64 1
  %466 = load i8, i8* %454, align 1
  %467 = zext i8 %466 to i32
  %468 = or i32 %458, %467
  br label %469

469:                                              ; preds = %464, %462, %453
  %470 = phi i32 [ 0, %462 ], [ 0, %464 ], [ %460, %453 ]
  %471 = phi i32 [ %458, %462 ], [ %468, %464 ], [ %458, %453 ]
  %472 = phi i8* [ %41, %462 ], [ %465, %464 ], [ %454, %453 ]
  %473 = icmp ult i32 %459, 128
  br i1 %473, label %453, label %474

474:                                              ; preds = %469, %433
  %475 = phi i32 [ %434, %433 ], [ %470, %469 ]
  %476 = phi i32 [ %449, %433 ], [ %471, %469 ]
  %477 = phi i8* [ %436, %433 ], [ %472, %469 ]
  %478 = phi i32 [ %450, %433 ], [ %471, %469 ]
  %479 = phi i32 [ %451, %433 ], [ %459, %469 ]
  %480 = icmp eq i32 %440, 0
  br i1 %480, label %481, label %433

481:                                              ; preds = %474
  %482 = shl i32 %479, 7
  %483 = add i32 %482, -128
  %484 = lshr i32 %483, 8
  %485 = add nuw nsw i32 %484, 1
  %486 = shl i32 %485, 8
  %487 = icmp ult i32 %478, %486
  %488 = sub i32 %479, %485
  %489 = sub i32 %478, %486
  %490 = select i1 %487, i32 %485, i32 %488
  %491 = select i1 %487, i32 %476, i32 %489
  %492 = icmp ult i32 %490, 128
  br i1 %492, label %493, label %516

493:                                              ; preds = %481
  %494 = select i1 %487, i32 %478, i32 %489
  br label %495

495:                                              ; preds = %493, %511
  %496 = phi i8* [ %514, %511 ], [ %477, %493 ]
  %497 = phi i32 [ %512, %511 ], [ %475, %493 ]
  %498 = phi i32 [ %513, %511 ], [ %494, %493 ]
  %499 = phi i32 [ %501, %511 ], [ %490, %493 ]
  %500 = shl i32 %498, 1
  %501 = shl i32 %499, 1
  %502 = add nsw i32 %497, 1
  %503 = icmp eq i32 %502, 8
  br i1 %503, label %504, label %511

504:                                              ; preds = %495
  %505 = icmp eq i8* %496, %41
  br i1 %505, label %511, label %506

506:                                              ; preds = %504
  %507 = getelementptr inbounds i8, i8* %496, i64 1
  %508 = load i8, i8* %496, align 1
  %509 = zext i8 %508 to i32
  %510 = or i32 %500, %509
  br label %511

511:                                              ; preds = %506, %504, %495
  %512 = phi i32 [ 0, %504 ], [ 0, %506 ], [ %502, %495 ]
  %513 = phi i32 [ %500, %504 ], [ %510, %506 ], [ %500, %495 ]
  %514 = phi i8* [ %41, %504 ], [ %507, %506 ], [ %496, %495 ]
  %515 = icmp ult i32 %501, 128
  br i1 %515, label %495, label %516

516:                                              ; preds = %511, %481, %428
  %517 = phi i32 [ %429, %428 ], [ %475, %481 ], [ %512, %511 ]
  %518 = phi i32 [ %430, %428 ], [ %490, %481 ], [ %501, %511 ]
  %519 = phi i32 [ %431, %428 ], [ %491, %481 ], [ %513, %511 ]
  %520 = phi i8* [ %432, %428 ], [ %477, %481 ], [ %514, %511 ]
  %521 = add nuw nsw i32 %395, 1
  %522 = icmp eq i32 %521, 4
  br i1 %522, label %523, label %390

523:                                              ; preds = %516, %214
  %524 = phi i32 [ %215, %214 ], [ %517, %516 ]
  %525 = phi i32 [ %216, %214 ], [ %518, %516 ]
  %526 = phi i32 [ %217, %214 ], [ %519, %516 ]
  %527 = phi i8* [ %218, %214 ], [ %520, %516 ]
  br i1 %150, label %646, label %528

528:                                              ; preds = %523, %637
  %529 = phi i32 [ %638, %637 ], [ %524, %523 ]
  %530 = phi i32 [ %640, %637 ], [ %526, %523 ]
  %531 = phi i8* [ %641, %637 ], [ %527, %523 ]
  %532 = phi i32 [ %642, %637 ], [ %526, %523 ]
  %533 = phi i32 [ %643, %637 ], [ %526, %523 ]
  %534 = phi i32 [ %639, %637 ], [ %525, %523 ]
  %535 = phi i32 [ %644, %637 ], [ 0, %523 ]
  %536 = shl i32 %534, 7
  %537 = add i32 %536, -128
  %538 = lshr i32 %537, 8
  %539 = add nuw nsw i32 %538, 1
  %540 = shl i32 %539, 8
  %541 = icmp ult i32 %533, %540
  br i1 %541, label %545, label %542

542:                                              ; preds = %528
  %543 = sub i32 %534, %539
  %544 = sub i32 %533, %540
  br label %545

545:                                              ; preds = %528, %542
  %546 = phi i32 [ %543, %542 ], [ %539, %528 ]
  %547 = phi i32 [ %544, %542 ], [ %530, %528 ]
  %548 = phi i32 [ %544, %542 ], [ %532, %528 ]
  %549 = phi i32 [ %544, %542 ], [ %533, %528 ]
  %550 = phi i32 [ 1, %542 ], [ 0, %528 ]
  %551 = icmp ult i32 %546, 128
  br i1 %551, label %552, label %573

552:                                              ; preds = %545, %568
  %553 = phi i8* [ %571, %568 ], [ %531, %545 ]
  %554 = phi i32 [ %569, %568 ], [ %529, %545 ]
  %555 = phi i32 [ %570, %568 ], [ %549, %545 ]
  %556 = phi i32 [ %558, %568 ], [ %546, %545 ]
  %557 = shl i32 %555, 1
  %558 = shl i32 %556, 1
  %559 = add nsw i32 %554, 1
  %560 = icmp eq i32 %559, 8
  br i1 %560, label %561, label %568

561:                                              ; preds = %552
  %562 = icmp eq i8* %553, %41
  br i1 %562, label %568, label %563

563:                                              ; preds = %561
  %564 = getelementptr inbounds i8, i8* %553, i64 1
  %565 = load i8, i8* %553, align 1
  %566 = zext i8 %565 to i32
  %567 = or i32 %557, %566
  br label %568

568:                                              ; preds = %563, %561, %552
  %569 = phi i32 [ 0, %561 ], [ 0, %563 ], [ %559, %552 ]
  %570 = phi i32 [ %557, %561 ], [ %567, %563 ], [ %557, %552 ]
  %571 = phi i8* [ %41, %561 ], [ %564, %563 ], [ %553, %552 ]
  %572 = icmp ult i32 %558, 128
  br i1 %572, label %552, label %573

573:                                              ; preds = %568, %545
  %574 = phi i32 [ %529, %545 ], [ %569, %568 ]
  %575 = phi i32 [ %546, %545 ], [ %558, %568 ]
  %576 = phi i32 [ %547, %545 ], [ %570, %568 ]
  %577 = phi i8* [ %531, %545 ], [ %571, %568 ]
  %578 = phi i32 [ %548, %545 ], [ %570, %568 ]
  %579 = phi i32 [ %549, %545 ], [ %570, %568 ]
  %580 = icmp eq i32 %550, 0
  br i1 %580, label %637, label %581

581:                                              ; preds = %573, %628
  %582 = phi i32 [ %629, %628 ], [ %574, %573 ]
  %583 = phi i32 [ %631, %628 ], [ %576, %573 ]
  %584 = phi i8* [ %632, %628 ], [ %577, %573 ]
  %585 = phi i32 [ %633, %628 ], [ %578, %573 ]
  %586 = phi i32 [ %634, %628 ], [ %578, %573 ]
  %587 = phi i32 [ %635, %628 ], [ %578, %573 ]
  %588 = phi i32 [ %630, %628 ], [ %575, %573 ]
  %589 = phi i32 [ %590, %628 ], [ 8, %573 ]
  %590 = add nsw i32 %589, -1
  %591 = shl i32 %588, 7
  %592 = add i32 %591, -128
  %593 = lshr i32 %592, 8
  %594 = add nuw nsw i32 %593, 1
  %595 = shl i32 %594, 8
  %596 = icmp ult i32 %587, %595
  br i1 %596, label %600, label %597

597:                                              ; preds = %581
  %598 = sub i32 %588, %594
  %599 = sub i32 %587, %595
  br label %600

600:                                              ; preds = %581, %597
  %601 = phi i32 [ %598, %597 ], [ %594, %581 ]
  %602 = phi i32 [ %599, %597 ], [ %583, %581 ]
  %603 = phi i32 [ %599, %597 ], [ %585, %581 ]
  %604 = phi i32 [ %599, %597 ], [ %586, %581 ]
  %605 = phi i32 [ %599, %597 ], [ %587, %581 ]
  %606 = icmp ult i32 %601, 128
  br i1 %606, label %607, label %628

607:                                              ; preds = %600, %623
  %608 = phi i8* [ %626, %623 ], [ %584, %600 ]
  %609 = phi i32 [ %624, %623 ], [ %582, %600 ]
  %610 = phi i32 [ %625, %623 ], [ %605, %600 ]
  %611 = phi i32 [ %613, %623 ], [ %601, %600 ]
  %612 = shl i32 %610, 1
  %613 = shl i32 %611, 1
  %614 = add nsw i32 %609, 1
  %615 = icmp eq i32 %614, 8
  br i1 %615, label %616, label %623

616:                                              ; preds = %607
  %617 = icmp eq i8* %608, %41
  br i1 %617, label %623, label %618

618:                                              ; preds = %616
  %619 = getelementptr inbounds i8, i8* %608, i64 1
  %620 = load i8, i8* %608, align 1
  %621 = zext i8 %620 to i32
  %622 = or i32 %612, %621
  br label %623

623:                                              ; preds = %618, %616, %607
  %624 = phi i32 [ 0, %616 ], [ 0, %618 ], [ %614, %607 ]
  %625 = phi i32 [ %612, %616 ], [ %622, %618 ], [ %612, %607 ]
  %626 = phi i8* [ %41, %616 ], [ %619, %618 ], [ %608, %607 ]
  %627 = icmp ult i32 %613, 128
  br i1 %627, label %607, label %628

628:                                              ; preds = %623, %600
  %629 = phi i32 [ %582, %600 ], [ %624, %623 ]
  %630 = phi i32 [ %601, %600 ], [ %613, %623 ]
  %631 = phi i32 [ %602, %600 ], [ %625, %623 ]
  %632 = phi i8* [ %584, %600 ], [ %626, %623 ]
  %633 = phi i32 [ %603, %600 ], [ %625, %623 ]
  %634 = phi i32 [ %604, %600 ], [ %625, %623 ]
  %635 = phi i32 [ %605, %600 ], [ %625, %623 ]
  %636 = icmp eq i32 %590, 0
  br i1 %636, label %637, label %581

637:                                              ; preds = %628, %573
  %638 = phi i32 [ %574, %573 ], [ %629, %628 ]
  %639 = phi i32 [ %575, %573 ], [ %630, %628 ]
  %640 = phi i32 [ %576, %573 ], [ %631, %628 ]
  %641 = phi i8* [ %577, %573 ], [ %632, %628 ]
  %642 = phi i32 [ %578, %573 ], [ %633, %628 ]
  %643 = phi i32 [ %579, %573 ], [ %634, %628 ]
  %644 = add nuw nsw i32 %535, 1
  %645 = icmp eq i32 %644, 3
  br i1 %645, label %646, label %528

646:                                              ; preds = %637, %139, %523
  %647 = phi i32 [ %140, %139 ], [ %524, %523 ], [ %638, %637 ]
  %648 = phi i32 [ %141, %139 ], [ %525, %523 ], [ %639, %637 ]
  %649 = phi i32 [ %142, %139 ], [ %526, %523 ], [ %640, %637 ]
  %650 = phi i8* [ %143, %139 ], [ %527, %523 ], [ %641, %637 ]
  %651 = shl i32 %648, 7
  %652 = add i32 %651, -128
  %653 = lshr i32 %652, 8
  %654 = add nuw nsw i32 %653, 1
  %655 = shl i32 %654, 8
  %656 = icmp ult i32 %649, %655
  %657 = sub i32 %648, %654
  %658 = select i1 %656, i32 0, i32 %655
  %659 = sub i32 %649, %658
  %660 = select i1 %656, i32 %654, i32 %657
  %661 = icmp ult i32 %660, 128
  br i1 %661, label %662, label %683

662:                                              ; preds = %646, %678
  %663 = phi i8* [ %681, %678 ], [ %650, %646 ]
  %664 = phi i32 [ %679, %678 ], [ %647, %646 ]
  %665 = phi i32 [ %680, %678 ], [ %659, %646 ]
  %666 = phi i32 [ %668, %678 ], [ %660, %646 ]
  %667 = shl i32 %665, 1
  %668 = shl i32 %666, 1
  %669 = add nsw i32 %664, 1
  %670 = icmp eq i32 %669, 8
  br i1 %670, label %671, label %678

671:                                              ; preds = %662
  %672 = icmp eq i8* %663, %41
  br i1 %672, label %678, label %673

673:                                              ; preds = %671
  %674 = getelementptr inbounds i8, i8* %663, i64 1
  %675 = load i8, i8* %663, align 1
  %676 = zext i8 %675 to i32
  %677 = or i32 %667, %676
  br label %678

678:                                              ; preds = %673, %671, %662
  %679 = phi i32 [ 0, %671 ], [ 0, %673 ], [ %669, %662 ]
  %680 = phi i32 [ %667, %671 ], [ %677, %673 ], [ %667, %662 ]
  %681 = phi i8* [ %41, %671 ], [ %674, %673 ], [ %663, %662 ]
  %682 = icmp ult i32 %668, 128
  br i1 %682, label %662, label %683

683:                                              ; preds = %678, %646
  %684 = phi i32 [ %647, %646 ], [ %679, %678 ]
  %685 = phi i32 [ %659, %646 ], [ %680, %678 ]
  %686 = phi i8* [ %650, %646 ], [ %681, %678 ]
  %687 = phi i32 [ %660, %646 ], [ %668, %678 ]
  br label %688

688:                                              ; preds = %683, %729
  %689 = phi i32 [ %730, %729 ], [ %684, %683 ]
  %690 = phi i32 [ %731, %729 ], [ %685, %683 ]
  %691 = phi i8* [ %732, %729 ], [ %686, %683 ]
  %692 = phi i32 [ %733, %729 ], [ %685, %683 ]
  %693 = phi i32 [ %734, %729 ], [ %687, %683 ]
  %694 = phi i32 [ %695, %729 ], [ 6, %683 ]
  %695 = add nsw i32 %694, -1
  %696 = shl i32 %693, 7
  %697 = add i32 %696, -128
  %698 = lshr i32 %697, 8
  %699 = add nuw nsw i32 %698, 1
  %700 = shl i32 %699, 8
  %701 = icmp ult i32 %692, %700
  %702 = sub i32 %693, %699
  %703 = sub i32 %692, %700
  %704 = select i1 %701, i32 %690, i32 %703
  %705 = select i1 %701, i32 %692, i32 %703
  %706 = select i1 %701, i32 %699, i32 %702
  %707 = icmp ult i32 %706, 128
  br i1 %707, label %708, label %729

708:                                              ; preds = %688, %724
  %709 = phi i8* [ %727, %724 ], [ %691, %688 ]
  %710 = phi i32 [ %725, %724 ], [ %689, %688 ]
  %711 = phi i32 [ %726, %724 ], [ %705, %688 ]
  %712 = phi i32 [ %714, %724 ], [ %706, %688 ]
  %713 = shl i32 %711, 1
  %714 = shl i32 %712, 1
  %715 = add nsw i32 %710, 1
  %716 = icmp eq i32 %715, 8
  br i1 %716, label %717, label %724

717:                                              ; preds = %708
  %718 = icmp eq i8* %709, %41
  br i1 %718, label %724, label %719

719:                                              ; preds = %717
  %720 = getelementptr inbounds i8, i8* %709, i64 1
  %721 = load i8, i8* %709, align 1
  %722 = zext i8 %721 to i32
  %723 = or i32 %713, %722
  br label %724

724:                                              ; preds = %719, %717, %708
  %725 = phi i32 [ 0, %717 ], [ 0, %719 ], [ %715, %708 ]
  %726 = phi i32 [ %713, %717 ], [ %723, %719 ], [ %713, %708 ]
  %727 = phi i8* [ %41, %717 ], [ %720, %719 ], [ %709, %708 ]
  %728 = icmp ult i32 %714, 128
  br i1 %728, label %708, label %729

729:                                              ; preds = %724, %688
  %730 = phi i32 [ %689, %688 ], [ %725, %724 ]
  %731 = phi i32 [ %704, %688 ], [ %726, %724 ]
  %732 = phi i8* [ %691, %688 ], [ %727, %724 ]
  %733 = phi i32 [ %705, %688 ], [ %726, %724 ]
  %734 = phi i32 [ %706, %688 ], [ %714, %724 ]
  %735 = icmp eq i32 %695, 0
  br i1 %735, label %736, label %688

736:                                              ; preds = %729
  %737 = shl i32 %734, 7
  %738 = add i32 %737, -128
  %739 = lshr i32 %738, 8
  %740 = add nuw nsw i32 %739, 1
  %741 = shl i32 %740, 8
  %742 = icmp ult i32 %733, %741
  %743 = sub i32 %734, %740
  %744 = sub i32 %733, %741
  %745 = select i1 %742, i32 %731, i32 %744
  %746 = select i1 %742, i32 %733, i32 %744
  %747 = select i1 %742, i32 %740, i32 %743
  %748 = icmp ult i32 %747, 128
  br i1 %748, label %749, label %770

749:                                              ; preds = %736, %765
  %750 = phi i8* [ %768, %765 ], [ %732, %736 ]
  %751 = phi i32 [ %766, %765 ], [ %730, %736 ]
  %752 = phi i32 [ %767, %765 ], [ %746, %736 ]
  %753 = phi i32 [ %755, %765 ], [ %747, %736 ]
  %754 = shl i32 %752, 1
  %755 = shl i32 %753, 1
  %756 = add nsw i32 %751, 1
  %757 = icmp eq i32 %756, 8
  br i1 %757, label %758, label %765

758:                                              ; preds = %749
  %759 = icmp eq i8* %750, %41
  br i1 %759, label %765, label %760

760:                                              ; preds = %758
  %761 = getelementptr inbounds i8, i8* %750, i64 1
  %762 = load i8, i8* %750, align 1
  %763 = zext i8 %762 to i32
  %764 = or i32 %754, %763
  br label %765

765:                                              ; preds = %760, %758, %749
  %766 = phi i32 [ 0, %758 ], [ 0, %760 ], [ %756, %749 ]
  %767 = phi i32 [ %754, %758 ], [ %764, %760 ], [ %754, %749 ]
  %768 = phi i8* [ %41, %758 ], [ %761, %760 ], [ %750, %749 ]
  %769 = icmp ult i32 %755, 128
  br i1 %769, label %749, label %770

770:                                              ; preds = %765, %736
  %771 = phi i32 [ %730, %736 ], [ %766, %765 ]
  %772 = phi i32 [ %745, %736 ], [ %767, %765 ]
  %773 = phi i8* [ %732, %736 ], [ %768, %765 ]
  %774 = phi i32 [ %746, %736 ], [ %767, %765 ]
  %775 = phi i32 [ %747, %736 ], [ %755, %765 ]
  %776 = shl i32 %775, 7
  %777 = add i32 %776, -128
  %778 = lshr i32 %777, 8
  %779 = add nuw nsw i32 %778, 1
  %780 = shl i32 %779, 8
  %781 = icmp ult i32 %774, %780
  %782 = sub i32 %775, %779
  %783 = sub i32 %774, %780
  %784 = select i1 %781, i32 %772, i32 %783
  %785 = select i1 %781, i32 %774, i32 %783
  %786 = select i1 %781, i32 %779, i32 %782
  %787 = icmp ult i32 %786, 128
  br i1 %787, label %1141, label %1162

788:                                              ; preds = %1201
  %789 = sub i32 %1206, %1210
  %790 = sub i32 %1205, %1211
  br label %791

791:                                              ; preds = %1201, %788
  %792 = phi i32 [ %789, %788 ], [ %1210, %1201 ]
  %793 = phi i32 [ %790, %788 ], [ %1203, %1201 ]
  %794 = phi i32 [ %790, %788 ], [ %1205, %1201 ]
  %795 = phi i32 [ 1, %788 ], [ 0, %1201 ]
  %796 = icmp ult i32 %792, 128
  br i1 %796, label %797, label %818

797:                                              ; preds = %791, %813
  %798 = phi i8* [ %816, %813 ], [ %1204, %791 ]
  %799 = phi i32 [ %814, %813 ], [ %1202, %791 ]
  %800 = phi i32 [ %815, %813 ], [ %794, %791 ]
  %801 = phi i32 [ %803, %813 ], [ %792, %791 ]
  %802 = shl i32 %800, 1
  %803 = shl i32 %801, 1
  %804 = add nsw i32 %799, 1
  %805 = icmp eq i32 %804, 8
  br i1 %805, label %806, label %813

806:                                              ; preds = %797
  %807 = icmp eq i8* %798, %41
  br i1 %807, label %813, label %808

808:                                              ; preds = %806
  %809 = getelementptr inbounds i8, i8* %798, i64 1
  %810 = load i8, i8* %798, align 1
  %811 = zext i8 %810 to i32
  %812 = or i32 %802, %811
  br label %813

813:                                              ; preds = %808, %806, %797
  %814 = phi i32 [ 0, %806 ], [ 0, %808 ], [ %804, %797 ]
  %815 = phi i32 [ %802, %806 ], [ %812, %808 ], [ %802, %797 ]
  %816 = phi i8* [ %41, %806 ], [ %809, %808 ], [ %798, %797 ]
  %817 = icmp ult i32 %803, 128
  br i1 %817, label %797, label %818

818:                                              ; preds = %813, %791
  %819 = phi i32 [ %1202, %791 ], [ %814, %813 ]
  %820 = phi i32 [ %792, %791 ], [ %803, %813 ]
  %821 = phi i32 [ %793, %791 ], [ %815, %813 ]
  %822 = phi i8* [ %1204, %791 ], [ %816, %813 ]
  %823 = phi i32 [ %794, %791 ], [ %815, %813 ]
  %824 = icmp eq i32 %795, 0
  br i1 %824, label %1213, label %825

825:                                              ; preds = %818
  %826 = shl i32 %820, 7
  %827 = add i32 %826, -128
  %828 = lshr i32 %827, 8
  %829 = add nuw nsw i32 %828, 1
  %830 = shl i32 %829, 8
  %831 = icmp ult i32 %823, %830
  br i1 %831, label %835, label %832

832:                                              ; preds = %825
  %833 = sub i32 %820, %829
  %834 = sub i32 %823, %830
  br label %835

835:                                              ; preds = %825, %832
  %836 = phi i32 [ %833, %832 ], [ %829, %825 ]
  %837 = phi i32 [ %834, %832 ], [ %821, %825 ]
  %838 = phi i32 [ %834, %832 ], [ %823, %825 ]
  %839 = phi i32 [ 1, %832 ], [ 0, %825 ]
  %840 = icmp ult i32 %836, 128
  br i1 %840, label %841, label %862

841:                                              ; preds = %835, %857
  %842 = phi i8* [ %860, %857 ], [ %822, %835 ]
  %843 = phi i32 [ %858, %857 ], [ %819, %835 ]
  %844 = phi i32 [ %859, %857 ], [ %838, %835 ]
  %845 = phi i32 [ %847, %857 ], [ %836, %835 ]
  %846 = shl i32 %844, 1
  %847 = shl i32 %845, 1
  %848 = add nsw i32 %843, 1
  %849 = icmp eq i32 %848, 8
  br i1 %849, label %850, label %857

850:                                              ; preds = %841
  %851 = icmp eq i8* %842, %41
  br i1 %851, label %857, label %852

852:                                              ; preds = %850
  %853 = getelementptr inbounds i8, i8* %842, i64 1
  %854 = load i8, i8* %842, align 1
  %855 = zext i8 %854 to i32
  %856 = or i32 %846, %855
  br label %857

857:                                              ; preds = %852, %850, %841
  %858 = phi i32 [ 0, %850 ], [ 0, %852 ], [ %848, %841 ]
  %859 = phi i32 [ %846, %850 ], [ %856, %852 ], [ %846, %841 ]
  %860 = phi i8* [ %41, %850 ], [ %853, %852 ], [ %842, %841 ]
  %861 = icmp ult i32 %847, 128
  br i1 %861, label %841, label %862

862:                                              ; preds = %857, %835
  %863 = phi i32 [ %819, %835 ], [ %858, %857 ]
  %864 = phi i32 [ %836, %835 ], [ %847, %857 ]
  %865 = phi i32 [ %837, %835 ], [ %859, %857 ]
  %866 = phi i8* [ %822, %835 ], [ %860, %857 ]
  %867 = phi i32 [ %838, %835 ], [ %859, %857 ]
  %868 = icmp eq i32 %839, 0
  br i1 %868, label %1213, label %869

869:                                              ; preds = %862, %1001
  %870 = phi i32 [ %1002, %1001 ], [ %863, %862 ]
  %871 = phi i32 [ %1004, %1001 ], [ %865, %862 ]
  %872 = phi i8* [ %1005, %1001 ], [ %866, %862 ]
  %873 = phi i32 [ %1004, %1001 ], [ %867, %862 ]
  %874 = phi i32 [ %1003, %1001 ], [ %864, %862 ]
  %875 = phi i32 [ %1006, %1001 ], [ 0, %862 ]
  %876 = shl i32 %874, 7
  %877 = add i32 %876, -128
  %878 = lshr i32 %877, 8
  %879 = add nuw nsw i32 %878, 1
  %880 = shl i32 %879, 8
  %881 = icmp ult i32 %873, %880
  br i1 %881, label %885, label %882

882:                                              ; preds = %869
  %883 = sub i32 %874, %879
  %884 = sub i32 %873, %880
  br label %885

885:                                              ; preds = %869, %882
  %886 = phi i32 [ %883, %882 ], [ %879, %869 ]
  %887 = phi i32 [ %884, %882 ], [ %871, %869 ]
  %888 = phi i32 [ %884, %882 ], [ %873, %869 ]
  %889 = phi i32 [ 1, %882 ], [ 0, %869 ]
  %890 = icmp ult i32 %886, 128
  br i1 %890, label %891, label %912

891:                                              ; preds = %885, %907
  %892 = phi i8* [ %910, %907 ], [ %872, %885 ]
  %893 = phi i32 [ %908, %907 ], [ %870, %885 ]
  %894 = phi i32 [ %909, %907 ], [ %888, %885 ]
  %895 = phi i32 [ %897, %907 ], [ %886, %885 ]
  %896 = shl i32 %894, 1
  %897 = shl i32 %895, 1
  %898 = add nsw i32 %893, 1
  %899 = icmp eq i32 %898, 8
  br i1 %899, label %900, label %907

900:                                              ; preds = %891
  %901 = icmp eq i8* %892, %41
  br i1 %901, label %907, label %902

902:                                              ; preds = %900
  %903 = getelementptr inbounds i8, i8* %892, i64 1
  %904 = load i8, i8* %892, align 1
  %905 = zext i8 %904 to i32
  %906 = or i32 %896, %905
  br label %907

907:                                              ; preds = %902, %900, %891
  %908 = phi i32 [ 0, %900 ], [ 0, %902 ], [ %898, %891 ]
  %909 = phi i32 [ %896, %900 ], [ %906, %902 ], [ %896, %891 ]
  %910 = phi i8* [ %41, %900 ], [ %903, %902 ], [ %892, %891 ]
  %911 = icmp ult i32 %897, 128
  br i1 %911, label %891, label %912

912:                                              ; preds = %907, %885
  %913 = phi i32 [ %870, %885 ], [ %908, %907 ]
  %914 = phi i32 [ %886, %885 ], [ %897, %907 ]
  %915 = phi i32 [ %887, %885 ], [ %909, %907 ]
  %916 = phi i8* [ %872, %885 ], [ %910, %907 ]
  %917 = icmp eq i32 %889, 0
  br i1 %917, label %1001, label %918

918:                                              ; preds = %912, %959
  %919 = phi i32 [ %960, %959 ], [ %913, %912 ]
  %920 = phi i32 [ %961, %959 ], [ %915, %912 ]
  %921 = phi i8* [ %962, %959 ], [ %916, %912 ]
  %922 = phi i32 [ %963, %959 ], [ %915, %912 ]
  %923 = phi i32 [ %964, %959 ], [ %914, %912 ]
  %924 = phi i32 [ %925, %959 ], [ 6, %912 ]
  %925 = add nsw i32 %924, -1
  %926 = shl i32 %923, 7
  %927 = add i32 %926, -128
  %928 = lshr i32 %927, 8
  %929 = add nuw nsw i32 %928, 1
  %930 = shl i32 %929, 8
  %931 = icmp ult i32 %922, %930
  %932 = sub i32 %923, %929
  %933 = sub i32 %922, %930
  %934 = select i1 %931, i32 %920, i32 %933
  %935 = select i1 %931, i32 %922, i32 %933
  %936 = select i1 %931, i32 %929, i32 %932
  %937 = icmp ult i32 %936, 128
  br i1 %937, label %938, label %959

938:                                              ; preds = %918, %954
  %939 = phi i8* [ %957, %954 ], [ %921, %918 ]
  %940 = phi i32 [ %955, %954 ], [ %919, %918 ]
  %941 = phi i32 [ %956, %954 ], [ %935, %918 ]
  %942 = phi i32 [ %944, %954 ], [ %936, %918 ]
  %943 = shl i32 %941, 1
  %944 = shl i32 %942, 1
  %945 = add nsw i32 %940, 1
  %946 = icmp eq i32 %945, 8
  br i1 %946, label %947, label %954

947:                                              ; preds = %938
  %948 = icmp eq i8* %939, %41
  br i1 %948, label %954, label %949

949:                                              ; preds = %947
  %950 = getelementptr inbounds i8, i8* %939, i64 1
  %951 = load i8, i8* %939, align 1
  %952 = zext i8 %951 to i32
  %953 = or i32 %943, %952
  br label %954

954:                                              ; preds = %949, %947, %938
  %955 = phi i32 [ 0, %947 ], [ 0, %949 ], [ %945, %938 ]
  %956 = phi i32 [ %943, %947 ], [ %953, %949 ], [ %943, %938 ]
  %957 = phi i8* [ %41, %947 ], [ %950, %949 ], [ %939, %938 ]
  %958 = icmp ult i32 %944, 128
  br i1 %958, label %938, label %959

959:                                              ; preds = %954, %918
  %960 = phi i32 [ %919, %918 ], [ %955, %954 ]
  %961 = phi i32 [ %934, %918 ], [ %956, %954 ]
  %962 = phi i8* [ %921, %918 ], [ %957, %954 ]
  %963 = phi i32 [ %935, %918 ], [ %956, %954 ]
  %964 = phi i32 [ %936, %918 ], [ %944, %954 ]
  %965 = icmp eq i32 %925, 0
  br i1 %965, label %966, label %918

966:                                              ; preds = %959
  %967 = shl i32 %964, 7
  %968 = add i32 %967, -128
  %969 = lshr i32 %968, 8
  %970 = add nuw nsw i32 %969, 1
  %971 = shl i32 %970, 8
  %972 = icmp ult i32 %963, %971
  %973 = sub i32 %964, %970
  %974 = sub i32 %963, %971
  %975 = select i1 %972, i32 %970, i32 %973
  %976 = select i1 %972, i32 %961, i32 %974
  %977 = icmp ult i32 %975, 128
  br i1 %977, label %978, label %1001

978:                                              ; preds = %966
  %979 = select i1 %972, i32 %963, i32 %974
  br label %980

980:                                              ; preds = %978, %996
  %981 = phi i8* [ %999, %996 ], [ %962, %978 ]
  %982 = phi i32 [ %997, %996 ], [ %960, %978 ]
  %983 = phi i32 [ %998, %996 ], [ %979, %978 ]
  %984 = phi i32 [ %986, %996 ], [ %975, %978 ]
  %985 = shl i32 %983, 1
  %986 = shl i32 %984, 1
  %987 = add nsw i32 %982, 1
  %988 = icmp eq i32 %987, 8
  br i1 %988, label %989, label %996

989:                                              ; preds = %980
  %990 = icmp eq i8* %981, %41
  br i1 %990, label %996, label %991

991:                                              ; preds = %989
  %992 = getelementptr inbounds i8, i8* %981, i64 1
  %993 = load i8, i8* %981, align 1
  %994 = zext i8 %993 to i32
  %995 = or i32 %985, %994
  br label %996

996:                                              ; preds = %991, %989, %980
  %997 = phi i32 [ 0, %989 ], [ 0, %991 ], [ %987, %980 ]
  %998 = phi i32 [ %985, %989 ], [ %995, %991 ], [ %985, %980 ]
  %999 = phi i8* [ %41, %989 ], [ %992, %991 ], [ %981, %980 ]
  %1000 = icmp ult i32 %986, 128
  br i1 %1000, label %980, label %1001

1001:                                             ; preds = %996, %966, %912
  %1002 = phi i32 [ %913, %912 ], [ %960, %966 ], [ %997, %996 ]
  %1003 = phi i32 [ %914, %912 ], [ %975, %966 ], [ %986, %996 ]
  %1004 = phi i32 [ %915, %912 ], [ %976, %966 ], [ %998, %996 ]
  %1005 = phi i8* [ %916, %912 ], [ %962, %966 ], [ %999, %996 ]
  %1006 = add nuw nsw i32 %875, 1
  %1007 = icmp eq i32 %1006, 4
  br i1 %1007, label %1008, label %869

1008:                                             ; preds = %1001, %1134
  %1009 = phi i32 [ %1135, %1134 ], [ %1002, %1001 ]
  %1010 = phi i32 [ %1136, %1134 ], [ %1003, %1001 ]
  %1011 = phi i32 [ %1137, %1134 ], [ %1004, %1001 ]
  %1012 = phi i8* [ %1138, %1134 ], [ %1005, %1001 ]
  %1013 = phi i32 [ %1139, %1134 ], [ 0, %1001 ]
  %1014 = shl i32 %1010, 7
  %1015 = add i32 %1014, -128
  %1016 = lshr i32 %1015, 8
  %1017 = add nuw nsw i32 %1016, 1
  %1018 = shl i32 %1017, 8
  %1019 = icmp ult i32 %1011, %1018
  %1020 = sub i32 %1010, %1017
  %1021 = select i1 %1019, i32 %1017, i32 %1020
  %1022 = select i1 %1019, i32 0, i32 %1018
  %1023 = sub i32 %1011, %1022
  %1024 = icmp ult i32 %1021, 128
  br i1 %1024, label %1025, label %1046

1025:                                             ; preds = %1008, %1041
  %1026 = phi i8* [ %1044, %1041 ], [ %1012, %1008 ]
  %1027 = phi i32 [ %1042, %1041 ], [ %1009, %1008 ]
  %1028 = phi i32 [ %1043, %1041 ], [ %1023, %1008 ]
  %1029 = phi i32 [ %1031, %1041 ], [ %1021, %1008 ]
  %1030 = shl i32 %1028, 1
  %1031 = shl i32 %1029, 1
  %1032 = add nsw i32 %1027, 1
  %1033 = icmp eq i32 %1032, 8
  br i1 %1033, label %1034, label %1041

1034:                                             ; preds = %1025
  %1035 = icmp eq i8* %1026, %41
  br i1 %1035, label %1041, label %1036

1036:                                             ; preds = %1034
  %1037 = getelementptr inbounds i8, i8* %1026, i64 1
  %1038 = load i8, i8* %1026, align 1
  %1039 = zext i8 %1038 to i32
  %1040 = or i32 %1030, %1039
  br label %1041

1041:                                             ; preds = %1036, %1034, %1025
  %1042 = phi i32 [ 0, %1034 ], [ 0, %1036 ], [ %1032, %1025 ]
  %1043 = phi i32 [ %1030, %1034 ], [ %1040, %1036 ], [ %1030, %1025 ]
  %1044 = phi i8* [ %41, %1034 ], [ %1037, %1036 ], [ %1026, %1025 ]
  %1045 = icmp ult i32 %1031, 128
  br i1 %1045, label %1025, label %1046

1046:                                             ; preds = %1041, %1008
  %1047 = phi i32 [ %1009, %1008 ], [ %1042, %1041 ]
  %1048 = phi i32 [ %1021, %1008 ], [ %1031, %1041 ]
  %1049 = phi i32 [ %1023, %1008 ], [ %1043, %1041 ]
  %1050 = phi i8* [ %1012, %1008 ], [ %1044, %1041 ]
  br i1 %1019, label %1134, label %1051

1051:                                             ; preds = %1046, %1092
  %1052 = phi i32 [ %1093, %1092 ], [ %1047, %1046 ]
  %1053 = phi i32 [ %1094, %1092 ], [ %1049, %1046 ]
  %1054 = phi i8* [ %1095, %1092 ], [ %1050, %1046 ]
  %1055 = phi i32 [ %1096, %1092 ], [ %1049, %1046 ]
  %1056 = phi i32 [ %1097, %1092 ], [ %1048, %1046 ]
  %1057 = phi i32 [ %1058, %1092 ], [ 6, %1046 ]
  %1058 = add nsw i32 %1057, -1
  %1059 = shl i32 %1056, 7
  %1060 = add i32 %1059, -128
  %1061 = lshr i32 %1060, 8
  %1062 = add nuw nsw i32 %1061, 1
  %1063 = shl i32 %1062, 8
  %1064 = icmp ult i32 %1055, %1063
  %1065 = sub i32 %1056, %1062
  %1066 = sub i32 %1055, %1063
  %1067 = select i1 %1064, i32 %1053, i32 %1066
  %1068 = select i1 %1064, i32 %1055, i32 %1066
  %1069 = select i1 %1064, i32 %1062, i32 %1065
  %1070 = icmp ult i32 %1069, 128
  br i1 %1070, label %1071, label %1092

1071:                                             ; preds = %1051, %1087
  %1072 = phi i8* [ %1090, %1087 ], [ %1054, %1051 ]
  %1073 = phi i32 [ %1088, %1087 ], [ %1052, %1051 ]
  %1074 = phi i32 [ %1089, %1087 ], [ %1068, %1051 ]
  %1075 = phi i32 [ %1077, %1087 ], [ %1069, %1051 ]
  %1076 = shl i32 %1074, 1
  %1077 = shl i32 %1075, 1
  %1078 = add nsw i32 %1073, 1
  %1079 = icmp eq i32 %1078, 8
  br i1 %1079, label %1080, label %1087

1080:                                             ; preds = %1071
  %1081 = icmp eq i8* %1072, %41
  br i1 %1081, label %1087, label %1082

1082:                                             ; preds = %1080
  %1083 = getelementptr inbounds i8, i8* %1072, i64 1
  %1084 = load i8, i8* %1072, align 1
  %1085 = zext i8 %1084 to i32
  %1086 = or i32 %1076, %1085
  br label %1087

1087:                                             ; preds = %1082, %1080, %1071
  %1088 = phi i32 [ 0, %1080 ], [ 0, %1082 ], [ %1078, %1071 ]
  %1089 = phi i32 [ %1076, %1080 ], [ %1086, %1082 ], [ %1076, %1071 ]
  %1090 = phi i8* [ %41, %1080 ], [ %1083, %1082 ], [ %1072, %1071 ]
  %1091 = icmp ult i32 %1077, 128
  br i1 %1091, label %1071, label %1092

1092:                                             ; preds = %1087, %1051
  %1093 = phi i32 [ %1052, %1051 ], [ %1088, %1087 ]
  %1094 = phi i32 [ %1067, %1051 ], [ %1089, %1087 ]
  %1095 = phi i8* [ %1054, %1051 ], [ %1090, %1087 ]
  %1096 = phi i32 [ %1068, %1051 ], [ %1089, %1087 ]
  %1097 = phi i32 [ %1069, %1051 ], [ %1077, %1087 ]
  %1098 = icmp eq i32 %1058, 0
  br i1 %1098, label %1099, label %1051

1099:                                             ; preds = %1092
  %1100 = shl i32 %1097, 7
  %1101 = add i32 %1100, -128
  %1102 = lshr i32 %1101, 8
  %1103 = add nuw nsw i32 %1102, 1
  %1104 = shl i32 %1103, 8
  %1105 = icmp ult i32 %1096, %1104
  %1106 = sub i32 %1097, %1103
  %1107 = sub i32 %1096, %1104
  %1108 = select i1 %1105, i32 %1103, i32 %1106
  %1109 = select i1 %1105, i32 %1094, i32 %1107
  %1110 = icmp ult i32 %1108, 128
  br i1 %1110, label %1111, label %1134

1111:                                             ; preds = %1099
  %1112 = select i1 %1105, i32 %1096, i32 %1107
  br label %1113

1113:                                             ; preds = %1111, %1129
  %1114 = phi i8* [ %1132, %1129 ], [ %1095, %1111 ]
  %1115 = phi i32 [ %1130, %1129 ], [ %1093, %1111 ]
  %1116 = phi i32 [ %1131, %1129 ], [ %1112, %1111 ]
  %1117 = phi i32 [ %1119, %1129 ], [ %1108, %1111 ]
  %1118 = shl i32 %1116, 1
  %1119 = shl i32 %1117, 1
  %1120 = add nsw i32 %1115, 1
  %1121 = icmp eq i32 %1120, 8
  br i1 %1121, label %1122, label %1129

1122:                                             ; preds = %1113
  %1123 = icmp eq i8* %1114, %41
  br i1 %1123, label %1129, label %1124

1124:                                             ; preds = %1122
  %1125 = getelementptr inbounds i8, i8* %1114, i64 1
  %1126 = load i8, i8* %1114, align 1
  %1127 = zext i8 %1126 to i32
  %1128 = or i32 %1118, %1127
  br label %1129

1129:                                             ; preds = %1124, %1122, %1113
  %1130 = phi i32 [ 0, %1122 ], [ 0, %1124 ], [ %1120, %1113 ]
  %1131 = phi i32 [ %1118, %1122 ], [ %1128, %1124 ], [ %1118, %1113 ]
  %1132 = phi i8* [ %41, %1122 ], [ %1125, %1124 ], [ %1114, %1113 ]
  %1133 = icmp ult i32 %1119, 128
  br i1 %1133, label %1113, label %1134

1134:                                             ; preds = %1129, %1099, %1046
  %1135 = phi i32 [ %1047, %1046 ], [ %1093, %1099 ], [ %1130, %1129 ]
  %1136 = phi i32 [ %1048, %1046 ], [ %1108, %1099 ], [ %1119, %1129 ]
  %1137 = phi i32 [ %1049, %1046 ], [ %1109, %1099 ], [ %1131, %1129 ]
  %1138 = phi i8* [ %1050, %1046 ], [ %1095, %1099 ], [ %1132, %1129 ]
  %1139 = add nuw nsw i32 %1013, 1
  %1140 = icmp eq i32 %1139, 4
  br i1 %1140, label %1213, label %1008

1141:                                             ; preds = %770, %1157
  %1142 = phi i8* [ %1160, %1157 ], [ %773, %770 ]
  %1143 = phi i32 [ %1158, %1157 ], [ %771, %770 ]
  %1144 = phi i32 [ %1159, %1157 ], [ %785, %770 ]
  %1145 = phi i32 [ %1147, %1157 ], [ %786, %770 ]
  %1146 = shl i32 %1144, 1
  %1147 = shl i32 %1145, 1
  %1148 = add nsw i32 %1143, 1
  %1149 = icmp eq i32 %1148, 8
  br i1 %1149, label %1150, label %1157

1150:                                             ; preds = %1141
  %1151 = icmp eq i8* %1142, %41
  br i1 %1151, label %1157, label %1152

1152:                                             ; preds = %1150
  %1153 = getelementptr inbounds i8, i8* %1142, i64 1
  %1154 = load i8, i8* %1142, align 1
  %1155 = zext i8 %1154 to i32
  %1156 = or i32 %1146, %1155
  br label %1157

1157:                                             ; preds = %1152, %1150, %1141
  %1158 = phi i32 [ 0, %1150 ], [ 0, %1152 ], [ %1148, %1141 ]
  %1159 = phi i32 [ %1146, %1150 ], [ %1156, %1152 ], [ %1146, %1141 ]
  %1160 = phi i8* [ %41, %1150 ], [ %1153, %1152 ], [ %1142, %1141 ]
  %1161 = icmp ult i32 %1147, 128
  br i1 %1161, label %1141, label %1162

1162:                                             ; preds = %1157, %770
  %1163 = phi i32 [ %771, %770 ], [ %1158, %1157 ]
  %1164 = phi i32 [ %784, %770 ], [ %1159, %1157 ]
  %1165 = phi i8* [ %773, %770 ], [ %1160, %1157 ]
  %1166 = phi i32 [ %785, %770 ], [ %1159, %1157 ]
  %1167 = phi i32 [ %786, %770 ], [ %1147, %1157 ]
  %1168 = shl i32 %1167, 7
  %1169 = add i32 %1168, -128
  %1170 = lshr i32 %1169, 8
  %1171 = add nuw nsw i32 %1170, 1
  %1172 = shl i32 %1171, 8
  %1173 = icmp ult i32 %1166, %1172
  %1174 = sub i32 %1167, %1171
  %1175 = sub i32 %1166, %1172
  %1176 = select i1 %1173, i32 %1164, i32 %1175
  %1177 = select i1 %1173, i32 %1166, i32 %1175
  %1178 = select i1 %1173, i32 %1171, i32 %1174
  %1179 = icmp ult i32 %1178, 128
  br i1 %1179, label %1180, label %1201

1180:                                             ; preds = %1162, %1196
  %1181 = phi i8* [ %1199, %1196 ], [ %1165, %1162 ]
  %1182 = phi i32 [ %1197, %1196 ], [ %1163, %1162 ]
  %1183 = phi i32 [ %1198, %1196 ], [ %1177, %1162 ]
  %1184 = phi i32 [ %1186, %1196 ], [ %1178, %1162 ]
  %1185 = shl i32 %1183, 1
  %1186 = shl i32 %1184, 1
  %1187 = add nsw i32 %1182, 1
  %1188 = icmp eq i32 %1187, 8
  br i1 %1188, label %1189, label %1196

1189:                                             ; preds = %1180
  %1190 = icmp eq i8* %1181, %41
  br i1 %1190, label %1196, label %1191

1191:                                             ; preds = %1189
  %1192 = getelementptr inbounds i8, i8* %1181, i64 1
  %1193 = load i8, i8* %1181, align 1
  %1194 = zext i8 %1193 to i32
  %1195 = or i32 %1185, %1194
  br label %1196

1196:                                             ; preds = %1191, %1189, %1180
  %1197 = phi i32 [ 0, %1189 ], [ 0, %1191 ], [ %1187, %1180 ]
  %1198 = phi i32 [ %1185, %1189 ], [ %1195, %1191 ], [ %1185, %1180 ]
  %1199 = phi i8* [ %41, %1189 ], [ %1192, %1191 ], [ %1181, %1180 ]
  %1200 = icmp ult i32 %1186, 128
  br i1 %1200, label %1180, label %1201

1201:                                             ; preds = %1196, %1162
  %1202 = phi i32 [ %1163, %1162 ], [ %1197, %1196 ]
  %1203 = phi i32 [ %1176, %1162 ], [ %1198, %1196 ]
  %1204 = phi i8* [ %1165, %1162 ], [ %1199, %1196 ]
  %1205 = phi i32 [ %1177, %1162 ], [ %1198, %1196 ]
  %1206 = phi i32 [ %1178, %1162 ], [ %1186, %1196 ]
  %1207 = shl i32 %1206, 7
  %1208 = add i32 %1207, -128
  %1209 = lshr i32 %1208, 8
  %1210 = add nuw nsw i32 %1209, 1
  %1211 = shl i32 %1210, 8
  %1212 = icmp ult i32 %1205, %1211
  br i1 %1212, label %791, label %788

1213:                                             ; preds = %1134, %818, %862
  %1214 = phi i32 [ %819, %818 ], [ %863, %862 ], [ %1135, %1134 ]
  %1215 = phi i32 [ %820, %818 ], [ %864, %862 ], [ %1136, %1134 ]
  %1216 = phi i32 [ %821, %818 ], [ %865, %862 ], [ %1137, %1134 ]
  %1217 = phi i8* [ %822, %818 ], [ %866, %862 ], [ %1138, %1134 ]
  %1218 = shl i32 %1215, 7
  %1219 = add i32 %1218, -128
  %1220 = lshr i32 %1219, 8
  %1221 = add nuw nsw i32 %1220, 1
  %1222 = shl i32 %1221, 8
  %1223 = icmp ult i32 %1216, %1222
  %1224 = sub i32 %1215, %1221
  %1225 = select i1 %1223, i32 %1221, i32 %1224
  %1226 = select i1 %1223, i32 0, i32 %1222
  %1227 = sub i32 %1216, %1226
  %1228 = icmp ult i32 %1225, 128
  br i1 %1228, label %1229, label %1250

1229:                                             ; preds = %1213, %1245
  %1230 = phi i8* [ %1248, %1245 ], [ %1217, %1213 ]
  %1231 = phi i32 [ %1246, %1245 ], [ %1214, %1213 ]
  %1232 = phi i32 [ %1247, %1245 ], [ %1227, %1213 ]
  %1233 = phi i32 [ %1235, %1245 ], [ %1225, %1213 ]
  %1234 = shl i32 %1232, 1
  %1235 = shl i32 %1233, 1
  %1236 = add nsw i32 %1231, 1
  %1237 = icmp eq i32 %1236, 8
  br i1 %1237, label %1238, label %1245

1238:                                             ; preds = %1229
  %1239 = icmp eq i8* %1230, %41
  br i1 %1239, label %1245, label %1240

1240:                                             ; preds = %1238
  %1241 = getelementptr inbounds i8, i8* %1230, i64 1
  %1242 = load i8, i8* %1230, align 1
  %1243 = zext i8 %1242 to i32
  %1244 = or i32 %1234, %1243
  br label %1245

1245:                                             ; preds = %1240, %1238, %1229
  %1246 = phi i32 [ 0, %1238 ], [ 0, %1240 ], [ %1236, %1229 ]
  %1247 = phi i32 [ %1234, %1238 ], [ %1244, %1240 ], [ %1234, %1229 ]
  %1248 = phi i8* [ %41, %1238 ], [ %1241, %1240 ], [ %1230, %1229 ]
  %1249 = icmp ult i32 %1235, 128
  br i1 %1249, label %1229, label %1250

1250:                                             ; preds = %1245, %1213
  %1251 = phi i32 [ %1214, %1213 ], [ %1246, %1245 ]
  %1252 = phi i32 [ %1225, %1213 ], [ %1235, %1245 ]
  %1253 = phi i32 [ %1227, %1213 ], [ %1247, %1245 ]
  %1254 = phi i8* [ %1217, %1213 ], [ %1248, %1245 ]
  %1255 = shl i32 %1252, 7
  %1256 = add i32 %1255, -128
  %1257 = lshr i32 %1256, 8
  %1258 = add nuw nsw i32 %1257, 1
  %1259 = shl i32 %1258, 8
  %1260 = icmp ult i32 %1253, %1259
  %1261 = sub i32 %1252, %1258
  %1262 = sub i32 %1253, %1259
  %1263 = select i1 %1260, i32 %1258, i32 %1261
  %1264 = select i1 %1260, i32 %1253, i32 %1262
  %1265 = icmp ult i32 %1263, 128
  br i1 %1265, label %1331, label %1266

1266:                                             ; preds = %1349, %1250
  %1267 = phi i32 [ %1251, %1250 ], [ %1350, %1349 ]
  %1268 = phi i8* [ %1254, %1250 ], [ %1352, %1349 ]
  %1269 = phi i32 [ %1264, %1250 ], [ %1351, %1349 ]
  %1270 = phi i32 [ %1263, %1250 ], [ %1339, %1349 ]
  br label %1271

1271:                                             ; preds = %1266, %1314
  %1272 = phi i32 [ %1315, %1314 ], [ %1267, %1266 ]
  %1273 = phi i8* [ %1316, %1314 ], [ %1268, %1266 ]
  %1274 = phi i32 [ %1317, %1314 ], [ %1269, %1266 ]
  %1275 = phi i32 [ %1318, %1314 ], [ %1270, %1266 ]
  %1276 = phi i32 [ %1319, %1314 ], [ 0, %1266 ]
  %1277 = phi i32 [ %1278, %1314 ], [ 7, %1266 ]
  %1278 = add nsw i32 %1277, -1
  %1279 = shl i32 %1276, 1
  %1280 = shl i32 %1275, 7
  %1281 = add i32 %1280, -128
  %1282 = lshr i32 %1281, 8
  %1283 = add nuw nsw i32 %1282, 1
  %1284 = shl i32 %1283, 8
  %1285 = icmp ult i32 %1274, %1284
  %1286 = sub i32 %1275, %1283
  %1287 = select i1 %1285, i32 0, i32 %1284
  %1288 = sub i32 %1274, %1287
  %1289 = select i1 %1285, i32 %1283, i32 %1286
  %1290 = xor i1 %1285, true
  %1291 = zext i1 %1290 to i32
  %1292 = icmp ult i32 %1289, 128
  br i1 %1292, label %1293, label %1314

1293:                                             ; preds = %1271, %1309
  %1294 = phi i8* [ %1311, %1309 ], [ %1273, %1271 ]
  %1295 = phi i32 [ %1310, %1309 ], [ %1272, %1271 ]
  %1296 = phi i32 [ %1312, %1309 ], [ %1288, %1271 ]
  %1297 = phi i32 [ %1299, %1309 ], [ %1289, %1271 ]
  %1298 = shl i32 %1296, 1
  %1299 = shl i32 %1297, 1
  %1300 = add nsw i32 %1295, 1
  %1301 = icmp eq i32 %1300, 8
  br i1 %1301, label %1302, label %1309

1302:                                             ; preds = %1293
  %1303 = icmp eq i8* %1294, %41
  br i1 %1303, label %1309, label %1304

1304:                                             ; preds = %1302
  %1305 = getelementptr inbounds i8, i8* %1294, i64 1
  %1306 = load i8, i8* %1294, align 1
  %1307 = zext i8 %1306 to i32
  %1308 = or i32 %1298, %1307
  br label %1309

1309:                                             ; preds = %1304, %1302, %1293
  %1310 = phi i32 [ 0, %1302 ], [ 0, %1304 ], [ %1300, %1293 ]
  %1311 = phi i8* [ %41, %1302 ], [ %1305, %1304 ], [ %1294, %1293 ]
  %1312 = phi i32 [ %1298, %1302 ], [ %1308, %1304 ], [ %1298, %1293 ]
  %1313 = icmp ult i32 %1299, 128
  br i1 %1313, label %1293, label %1314

1314:                                             ; preds = %1309, %1271
  %1315 = phi i32 [ %1272, %1271 ], [ %1310, %1309 ]
  %1316 = phi i8* [ %1273, %1271 ], [ %1311, %1309 ]
  %1317 = phi i32 [ %1288, %1271 ], [ %1312, %1309 ]
  %1318 = phi i32 [ %1289, %1271 ], [ %1299, %1309 ]
  %1319 = or i32 %1279, %1291
  %1320 = icmp eq i32 %1278, 0
  br i1 %1320, label %1321, label %1271

1321:                                             ; preds = %1314
  %1322 = icmp eq i8* %1316, %41
  br i1 %1322, label %1323, label %1328

1323:                                             ; preds = %1321
  %1324 = bitcast %"class.rtc::DiagnosticLogMessage"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 304, i8* nonnull %1324) #7
  call void @_ZN3rtc20DiagnosticLogMessageC1EPKciNS_15LoggingSeverityENS_15LogErrorContextEi(%"class.rtc::DiagnosticLogMessage"* nonnull %6, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str, i64 0, i64 0), i32 190, i32 2, i32 0, i32 0) #7
  %1325 = getelementptr inbounds %"class.rtc::DiagnosticLogMessage", %"class.rtc::DiagnosticLogMessage"* %6, i64 0, i32 7
  %1326 = bitcast %"class.std::__1::basic_ostringstream"* %1325 to %"class.std::__1::basic_ostream"*
  %1327 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %1326, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0), i64 54) #7
  call void @_ZN3rtc20DiagnosticLogMessageD1Ev(%"class.rtc::DiagnosticLogMessage"* nonnull %6) #7
  call void @llvm.lifetime.end.p0i8(i64 304, i8* nonnull %1324) #7
  br label %1329

1328:                                             ; preds = %1321
  store i32 %1319, i32* %2, align 4
  br label %1329

1329:                                             ; preds = %33, %1328, %1323, %8
  %1330 = phi i1 [ false, %8 ], [ false, %33 ], [ false, %1323 ], [ true, %1328 ]
  ret i1 %1330

1331:                                             ; preds = %1250
  %1332 = select i1 %1260, i32 %1253, i32 %1262
  br label %1333

1333:                                             ; preds = %1349, %1331
  %1334 = phi i8* [ %1352, %1349 ], [ %1254, %1331 ]
  %1335 = phi i32 [ %1350, %1349 ], [ %1251, %1331 ]
  %1336 = phi i32 [ %1351, %1349 ], [ %1332, %1331 ]
  %1337 = phi i32 [ %1339, %1349 ], [ %1263, %1331 ]
  %1338 = shl i32 %1336, 1
  %1339 = shl i32 %1337, 1
  %1340 = add nsw i32 %1335, 1
  %1341 = icmp eq i32 %1340, 8
  br i1 %1341, label %1342, label %1349

1342:                                             ; preds = %1333
  %1343 = icmp eq i8* %1334, %41
  br i1 %1343, label %1349, label %1344

1344:                                             ; preds = %1342
  %1345 = getelementptr inbounds i8, i8* %1334, i64 1
  %1346 = load i8, i8* %1334, align 1
  %1347 = zext i8 %1346 to i32
  %1348 = or i32 %1338, %1347
  br label %1349

1349:                                             ; preds = %1344, %1342, %1333
  %1350 = phi i32 [ 0, %1342 ], [ 0, %1344 ], [ %1340, %1333 ]
  %1351 = phi i32 [ %1338, %1342 ], [ %1348, %1344 ], [ %1338, %1333 ]
  %1352 = phi i8* [ %41, %1342 ], [ %1345, %1344 ], [ %1334, %1333 ]
  %1353 = icmp ult i32 %1339, 128
  br i1 %1353, label %1333, label %1266
}

declare void @_ZN3rtc20DiagnosticLogMessageC1EPKciNS_15LoggingSeverityENS_15LogErrorContextEi(%"class.rtc::DiagnosticLogMessage"*, i8*, i32, i32, i32, i32) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN3rtc20DiagnosticLogMessageD1Ev(%"class.rtc::DiagnosticLogMessage"*) unnamed_addr #4

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEm(%"class.std::__1::basic_ostream"*, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*, i64) local_unnamed_addr #2 comdat {
  %4 = alloca %"class.std::__1::locale", align 8
  %5 = alloca %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", align 8
  %6 = getelementptr inbounds %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5, %"class.std::__1::basic_ostream"* dereferenceable(160) %0) #7
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %58, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.std::__1::basic_ostream"* %0 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8, i8* %11, i64 -24
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::basic_ostream"* %0 to i8*
  %16 = getelementptr inbounds i8, i8* %15, i64 %14
  %17 = getelementptr inbounds i8, i8* %16, i64 40
  %18 = bitcast i8* %17 to %"class.std::__1::basic_streambuf"**
  %19 = load %"class.std::__1::basic_streambuf"*, %"class.std::__1::basic_streambuf"** %18, align 8
  %20 = bitcast i8* %16 to %"class.std::__1::ios_base"*
  %21 = getelementptr inbounds i8, i8* %16, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 176
  %25 = icmp eq i32 %24, 32
  %26 = getelementptr inbounds i8, i8* %1, i64 %2
  %27 = select i1 %25, i8* %26, i8* %1
  %28 = getelementptr inbounds i8, i8* %16, i64 144
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %42

32:                                               ; preds = %9
  %33 = bitcast %"class.std::__1::locale"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #7
  call void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* nonnull sret %4, %"class.std::__1::ios_base"* %20) #7
  %34 = call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* nonnull %4, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #7
  %35 = bitcast %"class.std::__1::locale::facet"* %34 to %"class.std::__1::ctype"*
  %36 = bitcast %"class.std::__1::locale::facet"* %34 to i8 (%"class.std::__1::ctype"*, i8)***
  %37 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %36, align 8
  %38 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %37, i64 7
  %39 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %38, align 8
  %40 = call signext i8 %39(%"class.std::__1::ctype"* %35, i8 signext 32) #7
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #7
  %41 = sext i8 %40 to i32
  store i32 %41, i32* %29, align 8
  br label %42

42:                                               ; preds = %9, %32
  %43 = phi i32 [ %41, %32 ], [ %30, %9 ]
  %44 = trunc i32 %43 to i8
  %45 = call %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"* %19, i8* %1, i8* %27, i8* %26, %"class.std::__1::ios_base"* dereferenceable(136) %20, i8 signext %44)
  %46 = icmp eq %"class.std::__1::basic_streambuf"* %45, null
  br i1 %46, label %47, label %58

47:                                               ; preds = %42
  %48 = load i8*, i8** %10, align 8
  %49 = getelementptr i8, i8* %48, i64 -24
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds i8, i8* %15, i64 %51
  %53 = bitcast i8* %52 to %"class.std::__1::ios_base"*
  %54 = getelementptr inbounds i8, i8* %52, i64 32
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 8
  %57 = or i32 %56, 5
  call void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"* %53, i32 %57) #7
  br label %58

58:                                               ; preds = %3, %42, %47
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #7
  ret %"class.std::__1::basic_ostream"* %0
}

declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*, %"class.std::__1::basic_ostream"* dereferenceable(160)) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"*, i8*, i8*, i8*, %"class.std::__1::ios_base"* dereferenceable(136), i8 signext) local_unnamed_addr #2 comdat {
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = icmp eq %"class.std::__1::basic_streambuf"* %0, null
  br i1 %8, label %78, label %9

9:                                                ; preds = %6
  %10 = ptrtoint i8* %3 to i64
  %11 = ptrtoint i8* %1 to i64
  %12 = sub i64 %10, %11
  %13 = getelementptr inbounds %"class.std::__1::ios_base", %"class.std::__1::ios_base"* %4, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i64 %14, %12
  %16 = sub nsw i64 %14, %12
  %17 = select i1 %15, i64 %16, i64 0
  %18 = ptrtoint i8* %2 to i64
  %19 = sub i64 %18, %11
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %9
  %22 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %23 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %22, align 8
  %24 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %23, i64 12
  %25 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %24, align 8
  %26 = tail call i64 %25(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %1, i64 %19) #7
  %27 = icmp eq i64 %26, %19
  br i1 %27, label %28, label %78

28:                                               ; preds = %21, %9
  %29 = icmp sgt i64 %17, 0
  br i1 %29, label %30, label %67

30:                                               ; preds = %28
  %31 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #7
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = icmp ult i64 %17, 23
  %34 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 -86, i64 24, i1 false)
  br i1 %33, label %43, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %38 = add nuw i64 %17, 16
  %39 = and i64 %38, -16
  %40 = tail call i8* @_Znwm(i64 %39) #8
  store i8* %40, i8** %32, align 8
  %41 = or i64 %39, -9223372036854775808
  store i64 %41, i64* %36, align 8
  store i64 %17, i64* %37, align 8
  %42 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %47

43:                                               ; preds = %30
  %44 = trunc i64 %17 to i8
  %45 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %46 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %45, i64 0, i32 1, i32 0
  store i8 %44, i8* %46, align 1
  br label %47

47:                                               ; preds = %35, %43
  %48 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %42, %35 ], [ %45, %43 ]
  %49 = phi i8* [ %40, %35 ], [ %31, %43 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %49, i8 %5, i64 %17, i1 false) #7
  %50 = getelementptr inbounds i8, i8* %49, i64 %17
  store i8 0, i8* %50, align 1
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %52 = load i8, i8* %51, align 1
  %53 = icmp slt i8 %52, 0
  %54 = load i8*, i8** %32, align 8
  %55 = select i1 %53, i8* %54, i8* %31
  %56 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %57 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %56, align 8
  %58 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %57, i64 12
  %59 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %58, align 8
  %60 = call i64 %59(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %55, i64 %17) #7
  %61 = icmp eq i64 %60, %17
  %62 = load i8, i8* %51, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %47
  %65 = load i8*, i8** %32, align 8
  call void @_ZdlPv(i8* %65) #8
  br label %66

66:                                               ; preds = %47, %64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #7
  br i1 %61, label %67, label %78

67:                                               ; preds = %66, %28
  %68 = sub i64 %10, %18
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %70, label %77

70:                                               ; preds = %67
  %71 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %72 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %71, align 8
  %73 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %72, i64 12
  %74 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %73, align 8
  %75 = call i64 %74(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %2, i64 %68) #7
  %76 = icmp eq i64 %75, %68
  br i1 %76, label %77, label %78

77:                                               ; preds = %70, %67
  store i64 0, i64* %13, align 8
  br label %78

78:                                               ; preds = %77, %66, %21, %70, %6
  %79 = phi %"class.std::__1::basic_streambuf"* [ null, %6 ], [ %0, %77 ], [ null, %66 ], [ null, %21 ], [ null, %70 ]
  ret %"class.std::__1::basic_streambuf"* %79
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*) unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

declare void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"*) unnamed_addr #4

declare %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"*, %"class.std::__1::locale::id"* dereferenceable(16)) local_unnamed_addr #3

declare void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"*, i32) local_unnamed_addr #3

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
