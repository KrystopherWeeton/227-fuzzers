; ModuleID = '../../components/viz/client/frame_evictor.cc'
source_filename = "../../components/viz/client/frame_evictor.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.viz::FrameEvictor" = type <{ %"class.viz::FrameEvictionManagerClient", %"class.viz::FrameEvictorClient"*, i8, i8, [6 x i8] }>
%"class.viz::FrameEvictionManagerClient" = type { i32 (...)** }
%"class.viz::FrameEvictorClient" = type { i32 (...)** }
%"class.viz::FrameEvictionManager" = type { %"class.std::__1::unique_ptr", %"class.std::__1::map", %"class.std::__1::list", i64, i32, %"class.absl::optional" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.base::MemoryPressureListener"* }
%"class.base::MemoryPressureListener" = type { %"class.base::RepeatingCallback", %"class.base::RepeatingCallback", %"class.base::Location" }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.2", %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { i64 }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.8" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { i64 }

@_ZTVN3viz12FrameEvictorE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.viz::FrameEvictor"*)* @_ZN3viz12FrameEvictorD2Ev to i8*), i8* bitcast (void (%"class.viz::FrameEvictor"*)* @_ZN3viz12FrameEvictorD0Ev to i8*), i8* bitcast (void (%"class.viz::FrameEvictor"*)* @_ZN3viz12FrameEvictor17EvictCurrentFrameEv to i8*)] }, align 8

@_ZN3viz12FrameEvictorC1EPNS_18FrameEvictorClientE = hidden unnamed_addr alias void (%"class.viz::FrameEvictor"*, %"class.viz::FrameEvictorClient"*), void (%"class.viz::FrameEvictor"*, %"class.viz::FrameEvictorClient"*)* @_ZN3viz12FrameEvictorC2EPNS_18FrameEvictorClientE
@_ZN3viz12FrameEvictorD1Ev = hidden unnamed_addr alias void (%"class.viz::FrameEvictor"*), void (%"class.viz::FrameEvictor"*)* @_ZN3viz12FrameEvictorD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3viz12FrameEvictorC2EPNS_18FrameEvictorClientE(%"class.viz::FrameEvictor"* nocapture, %"class.viz::FrameEvictorClient"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.viz::FrameEvictor", %"class.viz::FrameEvictor"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN3viz12FrameEvictorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.viz::FrameEvictor", %"class.viz::FrameEvictor"* %0, i64 0, i32 1
  store %"class.viz::FrameEvictorClient"* %1, %"class.viz::FrameEvictorClient"** %4, align 8
  %5 = getelementptr inbounds %"class.viz::FrameEvictor", %"class.viz::FrameEvictor"* %0, i64 0, i32 2
  store i8 0, i8* %5, align 8
  %6 = getelementptr inbounds %"class.viz::FrameEvictor", %"class.viz::FrameEvictor"* %0, i64 0, i32 3
  store i8 0, i8* %6, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz12FrameEvictorD2Ev(%"class.viz::FrameEvictor"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.viz::FrameEvictor", %"class.viz::FrameEvictor"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN3viz12FrameEvictorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = tail call %"class.viz::FrameEvictionManager"* @_ZN3viz20FrameEvictionManager11GetInstanceEv() #4
  %4 = getelementptr inbounds %"class.viz::FrameEvictor", %"class.viz::FrameEvictor"* %0, i64 0, i32 0
  tail call void @_ZN3viz20FrameEvictionManager11RemoveFrameEPNS_26FrameEvictionManagerClientE(%"class.viz::FrameEvictionManager"* %3, %"class.viz::FrameEvictionManagerClient"* %4) #4
  %5 = getelementptr inbounds %"class.viz::FrameEvictor", %"class.viz::FrameEvictor"* %0, i64 0, i32 2
  store i8 0, i8* %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz12FrameEvictor18OnSurfaceDiscardedEv(%"class.viz::FrameEvictor"*) local_unnamed_addr #1 align 2 {
  %2 = tail call %"class.viz::FrameEvictionManager"* @_ZN3viz20FrameEvictionManager11GetInstanceEv() #4
  %3 = getelementptr inbounds %"class.viz::FrameEvictor", %"class.viz::FrameEvictor"* %0, i64 0, i32 0
  tail call void @_ZN3viz20FrameEvictionManager11RemoveFrameEPNS_26FrameEvictionManagerClientE(%"class.viz::FrameEvictionManager"* %2, %"class.viz::FrameEvictionManagerClient"* %3) #4
  %4 = getelementptr inbounds %"class.viz::FrameEvictor", %"class.viz::FrameEvictor"* %0, i64 0, i32 2
  store i8 0, i8* %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz12FrameEvictorD0Ev(%"class.viz::FrameEvictor"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.viz::FrameEvictor", %"class.viz::FrameEvictor"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN3viz12FrameEvictorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = tail call %"class.viz::FrameEvictionManager"* @_ZN3viz20FrameEvictionManager11GetInstanceEv() #4
  %4 = getelementptr inbounds %"class.viz::FrameEvictor", %"class.viz::FrameEvictor"* %0, i64 0, i32 0
  tail call void @_ZN3viz20FrameEvictionManager11RemoveFrameEPNS_26FrameEvictionManagerClientE(%"class.viz::FrameEvictionManager"* %3, %"class.viz::FrameEvictionManagerClient"* %4) #4
  %5 = bitcast %"class.viz::FrameEvictor"* %0 to i8*
  tail call void @_ZdlPv(i8* %5) #5
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz12FrameEvictor20OnNewSurfaceEmbeddedEv(%"class.viz::FrameEvictor"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.viz::FrameEvictor", %"class.viz::FrameEvictor"* %0, i64 0, i32 2
  store i8 1, i8* %2, align 8
  %3 = tail call %"class.viz::FrameEvictionManager"* @_ZN3viz20FrameEvictionManager11GetInstanceEv() #4
  %4 = getelementptr inbounds %"class.viz::FrameEvictor", %"class.viz::FrameEvictor"* %0, i64 0, i32 0
  %5 = getelementptr inbounds %"class.viz::FrameEvictor", %"class.viz::FrameEvictor"* %0, i64 0, i32 3
  %6 = load i8, i8* %5, align 1, !range !2
  %7 = icmp ne i8 %6, 0
  tail call void @_ZN3viz20FrameEvictionManager8AddFrameEPNS_26FrameEvictionManagerClientEb(%"class.viz::FrameEvictionManager"* %3, %"class.viz::FrameEvictionManagerClient"* %4, i1 zeroext %7) #4
  ret void
}

declare %"class.viz::FrameEvictionManager"* @_ZN3viz20FrameEvictionManager11GetInstanceEv() local_unnamed_addr #3

declare void @_ZN3viz20FrameEvictionManager8AddFrameEPNS_26FrameEvictionManagerClientEb(%"class.viz::FrameEvictionManager"*, %"class.viz::FrameEvictionManagerClient"*, i1 zeroext) local_unnamed_addr #3

declare void @_ZN3viz20FrameEvictionManager11RemoveFrameEPNS_26FrameEvictionManagerClientE(%"class.viz::FrameEvictionManager"*, %"class.viz::FrameEvictionManagerClient"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz12FrameEvictor10SetVisibleEb(%"class.viz::FrameEvictor"*, i1 zeroext) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.viz::FrameEvictor", %"class.viz::FrameEvictor"* %0, i64 0, i32 3
  %4 = load i8, i8* %3, align 1, !range !2
  %5 = zext i8 %4 to i32
  %6 = zext i1 %1 to i32
  %7 = icmp eq i32 %5, %6
  br i1 %7, label %18, label %8

8:                                                ; preds = %2
  %9 = zext i1 %1 to i8
  store i8 %9, i8* %3, align 1
  %10 = getelementptr inbounds %"class.viz::FrameEvictor", %"class.viz::FrameEvictor"* %0, i64 0, i32 2
  %11 = load i8, i8* %10, align 8, !range !2
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %18, label %13

13:                                               ; preds = %8
  %14 = tail call %"class.viz::FrameEvictionManager"* @_ZN3viz20FrameEvictionManager11GetInstanceEv() #4
  %15 = getelementptr inbounds %"class.viz::FrameEvictor", %"class.viz::FrameEvictor"* %0, i64 0, i32 0
  br i1 %1, label %16, label %17

16:                                               ; preds = %13
  tail call void @_ZN3viz20FrameEvictionManager9LockFrameEPNS_26FrameEvictionManagerClientE(%"class.viz::FrameEvictionManager"* %14, %"class.viz::FrameEvictionManagerClient"* %15) #4
  br label %18

17:                                               ; preds = %13
  tail call void @_ZN3viz20FrameEvictionManager11UnlockFrameEPNS_26FrameEvictionManagerClientE(%"class.viz::FrameEvictionManager"* %14, %"class.viz::FrameEvictionManagerClient"* %15) #4
  br label %18

18:                                               ; preds = %8, %16, %17, %2
  ret void
}

declare void @_ZN3viz20FrameEvictionManager9LockFrameEPNS_26FrameEvictionManagerClientE(%"class.viz::FrameEvictionManager"*, %"class.viz::FrameEvictionManagerClient"*) local_unnamed_addr #3

declare void @_ZN3viz20FrameEvictionManager11UnlockFrameEPNS_26FrameEvictionManagerClientE(%"class.viz::FrameEvictionManager"*, %"class.viz::FrameEvictionManagerClient"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz12FrameEvictor17EvictCurrentFrameEv(%"class.viz::FrameEvictor"* nocapture readonly) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.viz::FrameEvictor", %"class.viz::FrameEvictor"* %0, i64 0, i32 1
  %3 = load %"class.viz::FrameEvictorClient"*, %"class.viz::FrameEvictorClient"** %2, align 8
  %4 = bitcast %"class.viz::FrameEvictorClient"* %3 to void (%"class.viz::FrameEvictorClient"*)***
  %5 = load void (%"class.viz::FrameEvictorClient"*)**, void (%"class.viz::FrameEvictorClient"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.viz::FrameEvictorClient"*)*, void (%"class.viz::FrameEvictorClient"*)** %5, i64 2
  %7 = load void (%"class.viz::FrameEvictorClient"*)*, void (%"class.viz::FrameEvictorClient"*)** %6, align 8
  tail call void %7(%"class.viz::FrameEvictorClient"* %3) #4
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
