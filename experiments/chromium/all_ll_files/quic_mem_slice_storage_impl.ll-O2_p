; ModuleID = '../../net/quic/platform/impl/quic_mem_slice_storage_impl.cc'
source_filename = "../../net/quic/platform/impl/quic_mem_slice_storage_impl.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.quic::QuicMemSliceStorageImpl" = type { %"class.std::__1::vector", %"class.std::__1::vector.2" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %class.scoped_refptr*, %class.scoped_refptr*, %"class.std::__1::__compressed_pair" }
%class.scoped_refptr = type { %"class.net::IOBuffer"* }
%"class.net::IOBuffer" = type { i32 (...)**, %"class.base::RefCountedThreadSafe", i8* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.scoped_refptr* }
%"class.std::__1::vector.2" = type { %"class.std::__1::__vector_base.3" }
%"class.std::__1::__vector_base.3" = type { i64*, i64*, %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { i64* }
%struct.iovec = type { i8*, i64 }
%"class.quic::QuicBufferAllocator" = type { i32 (...)** }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.quic::QuicMemSliceImpl" = type { %class.scoped_refptr, i64 }

$_ZNSt3__16vectorI13scoped_refptrIN3net8IOBufferEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_ = comdat any

$_ZNSt3__16vectorI13scoped_refptrIN3net8IOBufferEENS_9allocatorIS4_EEE21__push_back_slow_pathIRKS4_EEvOT_ = comdat any

$_ZNSt3__16vectorI13scoped_refptrIN3net8IOBufferEENS_9allocatorIS4_EEE6assignIPS4_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS4_NS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_ = comdat any

$_ZNSt3__16vectorImNS_9allocatorImEEE6assignIPmEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleImNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_ = comdat any

@_ZN4quic23QuicMemSliceStorageImplC1EPK5ioveciPNS_19QuicBufferAllocatorEm = hidden unnamed_addr alias void (%"class.quic::QuicMemSliceStorageImpl"*, %struct.iovec*, i32, %"class.quic::QuicBufferAllocator"*, i64), void (%"class.quic::QuicMemSliceStorageImpl"*, %struct.iovec*, i32, %"class.quic::QuicBufferAllocator"*, i64)* @_ZN4quic23QuicMemSliceStorageImplC2EPK5ioveciPNS_19QuicBufferAllocatorEm
@_ZN4quic23QuicMemSliceStorageImplC1ERKS0_ = hidden unnamed_addr alias void (%"class.quic::QuicMemSliceStorageImpl"*, %"class.quic::QuicMemSliceStorageImpl"*), void (%"class.quic::QuicMemSliceStorageImpl"*, %"class.quic::QuicMemSliceStorageImpl"*)* @_ZN4quic23QuicMemSliceStorageImplC2ERKS0_
@_ZN4quic23QuicMemSliceStorageImplC1EOS0_ = hidden unnamed_addr alias void (%"class.quic::QuicMemSliceStorageImpl"*, %"class.quic::QuicMemSliceStorageImpl"*), void (%"class.quic::QuicMemSliceStorageImpl"*, %"class.quic::QuicMemSliceStorageImpl"*)* @_ZN4quic23QuicMemSliceStorageImplC2EOS0_
@_ZN4quic23QuicMemSliceStorageImplD1Ev = hidden unnamed_addr alias void (%"class.quic::QuicMemSliceStorageImpl"*), void (%"class.quic::QuicMemSliceStorageImpl"*)* @_ZN4quic23QuicMemSliceStorageImplD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic23QuicMemSliceStorageImplC2EPK5ioveciPNS_19QuicBufferAllocatorEm(%"class.quic::QuicMemSliceStorageImpl"*, %struct.iovec*, i32, %"class.quic::QuicBufferAllocator"* nocapture readnone, i64) unnamed_addr #0 align 2 {
  %6 = alloca %class.scoped_refptr, align 8
  %7 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %0, i64 0, i32 0
  %8 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %0, i64 0, i32 1
  %9 = icmp ne %struct.iovec* %1, null
  %10 = bitcast %"class.quic::QuicMemSliceStorageImpl"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 48, i1 false)
  %11 = icmp sgt i32 %2, 0
  %12 = and i1 %9, %11
  br i1 %12, label %13, label %175

13:                                               ; preds = %5
  %14 = zext i32 %2 to i64
  %15 = add nsw i64 %14, -1
  %16 = and i64 %14, 3
  %17 = icmp ult i64 %15, 3
  br i1 %17, label %20, label %18

18:                                               ; preds = %13
  %19 = sub nsw i64 %14, %16
  br label %52

20:                                               ; preds = %52, %13
  %21 = phi i64 [ undef, %13 ], [ %70, %52 ]
  %22 = phi i64 [ 0, %13 ], [ %71, %52 ]
  %23 = phi i64 [ 0, %13 ], [ %70, %52 ]
  %24 = icmp eq i64 %16, 0
  br i1 %24, label %35, label %25

25:                                               ; preds = %20, %25
  %26 = phi i64 [ %32, %25 ], [ %22, %20 ]
  %27 = phi i64 [ %31, %25 ], [ %23, %20 ]
  %28 = phi i64 [ %33, %25 ], [ %16, %20 ]
  %29 = getelementptr inbounds %struct.iovec, %struct.iovec* %1, i64 %26, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = add i64 %30, %27
  %32 = add nuw nsw i64 %26, 1
  %33 = add i64 %28, -1
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %35, label %25, !llvm.loop !2

35:                                               ; preds = %25, %20
  %36 = phi i64 [ %21, %20 ], [ %31, %25 ]
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %175, label %38

38:                                               ; preds = %35
  %39 = bitcast %class.scoped_refptr* %6 to i8*
  %40 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %6, i64 0, i32 0
  %41 = bitcast %class.scoped_refptr* %6 to i8**
  %42 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %0, i64 0, i32 0, i32 0, i32 1
  %43 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %44 = bitcast %class.scoped_refptr* %6 to i64*
  %45 = bitcast %class.scoped_refptr** %42 to i64*
  %46 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %0, i64 0, i32 1, i32 0, i32 1
  %47 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %48 = bitcast i64** %46 to i64*
  %49 = bitcast %"class.std::__1::vector.2"* %8 to i64*
  %50 = bitcast i64** %47 to i64*
  %51 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %8, i64 0, i32 0, i32 0
  br label %74

52:                                               ; preds = %52, %18
  %53 = phi i64 [ 0, %18 ], [ %71, %52 ]
  %54 = phi i64 [ 0, %18 ], [ %70, %52 ]
  %55 = phi i64 [ %19, %18 ], [ %72, %52 ]
  %56 = getelementptr inbounds %struct.iovec, %struct.iovec* %1, i64 %53, i32 1
  %57 = load i64, i64* %56, align 8
  %58 = add i64 %57, %54
  %59 = or i64 %53, 1
  %60 = getelementptr inbounds %struct.iovec, %struct.iovec* %1, i64 %59, i32 1
  %61 = load i64, i64* %60, align 8
  %62 = add i64 %61, %58
  %63 = or i64 %53, 2
  %64 = getelementptr inbounds %struct.iovec, %struct.iovec* %1, i64 %63, i32 1
  %65 = load i64, i64* %64, align 8
  %66 = add i64 %65, %62
  %67 = or i64 %53, 3
  %68 = getelementptr inbounds %struct.iovec, %struct.iovec* %1, i64 %67, i32 1
  %69 = load i64, i64* %68, align 8
  %70 = add i64 %69, %66
  %71 = add nuw nsw i64 %53, 4
  %72 = add i64 %55, -4
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %20, label %52

74:                                               ; preds = %38, %173
  %75 = phi i64 [ 0, %38 ], [ %158, %173 ]
  %76 = phi i64 [ %36, %38 ], [ %157, %173 ]
  %77 = icmp ugt i64 %76, %4
  %78 = select i1 %77, i64 %4, i64 %76
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #8
  store %"class.net::IOBuffer"* inttoptr (i64 -6148914691236517206 to %"class.net::IOBuffer"*), %"class.net::IOBuffer"** %40, align 8
  %79 = call i8* @_Znwm(i64 24) #9
  %80 = bitcast i8* %79 to %"class.net::IOBuffer"*
  call void @_ZN3net8IOBufferC1Em(%"class.net::IOBuffer"* nonnull %80, i64 %78) #8
  %81 = getelementptr inbounds i8, i8* %79, i64 8
  %82 = bitcast i8* %81 to i32*
  %83 = atomicrmw add i32* %82, i32 1 monotonic
  store i8* %79, i8** %41, align 8
  %84 = getelementptr inbounds i8, i8* %79, i64 16
  %85 = bitcast i8* %84 to i8**
  %86 = load i8*, i8** %85, align 8
  call void @_ZN4quic9QuicUtils12CopyToBufferEPK5iovecimmPc(%struct.iovec* nonnull %1, i32 %2, i64 %75, i64 %78, i8* %86) #8
  %87 = load %class.scoped_refptr*, %class.scoped_refptr** %42, align 8
  %88 = load %class.scoped_refptr*, %class.scoped_refptr** %43, align 8
  %89 = icmp ult %class.scoped_refptr* %87, %88
  br i1 %89, label %90, label %95

90:                                               ; preds = %74
  %91 = load i64, i64* %44, align 8
  %92 = bitcast %class.scoped_refptr* %87 to i64*
  store i64 %91, i64* %92, align 8
  store %"class.net::IOBuffer"* null, %"class.net::IOBuffer"** %40, align 8
  %93 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %87, i64 1
  %94 = ptrtoint %class.scoped_refptr* %93 to i64
  store i64 %94, i64* %45, align 8
  br label %96

95:                                               ; preds = %74
  call void @_ZNSt3__16vectorI13scoped_refptrIN3net8IOBufferEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(%"class.std::__1::vector"* %7, %class.scoped_refptr* nonnull dereferenceable(8) %6) #8
  br label %96

96:                                               ; preds = %90, %95
  %97 = load i64*, i64** %46, align 8
  %98 = load i64*, i64** %47, align 8
  %99 = icmp eq i64* %97, %98
  %100 = ptrtoint i64* %98 to i64
  br i1 %99, label %104, label %101

101:                                              ; preds = %96
  store i64 %78, i64* %97, align 8
  %102 = getelementptr inbounds i64, i64* %97, i64 1
  %103 = ptrtoint i64* %102 to i64
  store i64 %103, i64* %48, align 8
  br label %156

104:                                              ; preds = %96
  %105 = ptrtoint i64* %97 to i64
  %106 = load i64, i64* %49, align 8
  %107 = sub i64 %105, %106
  %108 = ashr exact i64 %107, 3
  %109 = add nsw i64 %108, 1
  %110 = icmp ugt i64 %109, 2305843009213693951
  br i1 %110, label %111, label %113

111:                                              ; preds = %104
  %112 = bitcast %"class.std::__1::vector.2"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %112) #10
  unreachable

113:                                              ; preds = %104
  %114 = sub i64 %100, %106
  %115 = ashr exact i64 %114, 3
  %116 = icmp ult i64 %115, 1152921504606846975
  br i1 %116, label %117, label %125

117:                                              ; preds = %113
  %118 = ashr exact i64 %114, 2
  %119 = icmp ult i64 %118, %109
  %120 = select i1 %119, i64 %109, i64 %118
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %130, label %122

122:                                              ; preds = %117
  %123 = icmp ugt i64 %120, 2305843009213693951
  br i1 %123, label %124, label %125

124:                                              ; preds = %122
  call void @abort() #10
  unreachable

125:                                              ; preds = %122, %113
  %126 = phi i64 [ %120, %122 ], [ 2305843009213693951, %113 ]
  %127 = shl i64 %126, 3
  %128 = call i8* @_Znwm(i64 %127) #9
  %129 = bitcast i8* %128 to i64*
  br label %130

130:                                              ; preds = %125, %117
  %131 = phi i64 [ %126, %125 ], [ 0, %117 ]
  %132 = phi i64* [ %129, %125 ], [ null, %117 ]
  %133 = getelementptr inbounds i64, i64* %132, i64 %108
  %134 = getelementptr inbounds i64, i64* %132, i64 %131
  %135 = ptrtoint i64* %134 to i64
  store i64 %78, i64* %133, align 8
  %136 = getelementptr inbounds i64, i64* %133, i64 1
  %137 = ptrtoint i64* %136 to i64
  %138 = load i64*, i64** %51, align 8
  %139 = load i64, i64* %48, align 8
  %140 = ptrtoint i64* %138 to i64
  %141 = sub i64 %139, %140
  %142 = ashr exact i64 %141, 3
  %143 = sub nsw i64 0, %142
  %144 = getelementptr inbounds i64, i64* %133, i64 %143
  %145 = ptrtoint i64* %144 to i64
  %146 = icmp sgt i64 %141, 0
  br i1 %146, label %147, label %151

147:                                              ; preds = %130
  %148 = bitcast i64* %144 to i8*
  %149 = bitcast i64* %138 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %148, i8* align 8 %149, i64 %141, i1 false) #8
  %150 = load i64*, i64** %51, align 8
  br label %151

151:                                              ; preds = %147, %130
  %152 = phi i64* [ %138, %130 ], [ %150, %147 ]
  store i64 %145, i64* %49, align 8
  store i64 %137, i64* %48, align 8
  store i64 %135, i64* %50, align 8
  %153 = icmp eq i64* %152, null
  br i1 %153, label %156, label %154

154:                                              ; preds = %151
  %155 = bitcast i64* %152 to i8*
  call void @_ZdlPv(i8* %155) #9
  br label %156

156:                                              ; preds = %101, %151, %154
  %157 = sub i64 %76, %78
  %158 = add i64 %78, %75
  %159 = load %"class.net::IOBuffer"*, %"class.net::IOBuffer"** %40, align 8
  %160 = icmp eq %"class.net::IOBuffer"* %159, null
  br i1 %160, label %173, label %161

161:                                              ; preds = %156
  %162 = getelementptr inbounds %"class.net::IOBuffer", %"class.net::IOBuffer"* %159, i64 0, i32 1
  %163 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %162, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %164 = atomicrmw sub i32* %163, i32 1 acq_rel
  %165 = icmp eq i32 %164, 1
  br i1 %165, label %166, label %173

166:                                              ; preds = %161
  %167 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %162, i64 -2
  %168 = bitcast %"class.base::RefCountedThreadSafe"* %167 to %"class.net::IOBuffer"*
  %169 = bitcast %"class.base::RefCountedThreadSafe"* %167 to void (%"class.net::IOBuffer"*)***
  %170 = load void (%"class.net::IOBuffer"*)**, void (%"class.net::IOBuffer"*)*** %169, align 8
  %171 = getelementptr inbounds void (%"class.net::IOBuffer"*)*, void (%"class.net::IOBuffer"*)** %170, i64 1
  %172 = load void (%"class.net::IOBuffer"*)*, void (%"class.net::IOBuffer"*)** %171, align 8
  call void %172(%"class.net::IOBuffer"* nonnull %168) #8
  br label %173

173:                                              ; preds = %156, %161, %166
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #8
  %174 = icmp eq i64 %157, 0
  br i1 %174, label %175, label %74

175:                                              ; preds = %173, %5, %35
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN4quic9QuicUtils12CopyToBufferEPK5iovecimmPc(%struct.iovec*, i32, i64, i64, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic23QuicMemSliceStorageImpl6AppendENS_16QuicMemSliceImplE(%"class.quic::QuicMemSliceStorageImpl"*, %"class.quic::QuicMemSliceImpl"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %0, i64 0, i32 0, i32 0, i32 1
  %4 = load %class.scoped_refptr*, %class.scoped_refptr** %3, align 8
  %5 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %6 = load %class.scoped_refptr*, %class.scoped_refptr** %5, align 8
  %7 = icmp eq %class.scoped_refptr* %4, %6
  br i1 %7, label %20, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.quic::QuicMemSliceImpl", %"class.quic::QuicMemSliceImpl"* %1, i64 0, i32 0, i32 0
  %10 = load %"class.net::IOBuffer"*, %"class.net::IOBuffer"** %9, align 8
  %11 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %4, i64 0, i32 0
  store %"class.net::IOBuffer"* %10, %"class.net::IOBuffer"** %11, align 8
  %12 = icmp eq %"class.net::IOBuffer"* %10, null
  br i1 %12, label %16, label %13

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.net::IOBuffer", %"class.net::IOBuffer"* %10, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = atomicrmw add i32* %14, i32 1 monotonic
  br label %16

16:                                               ; preds = %13, %8
  %17 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %4, i64 1
  %18 = ptrtoint %class.scoped_refptr* %17 to i64
  %19 = bitcast %class.scoped_refptr** %3 to i64*
  store i64 %18, i64* %19, align 8
  br label %23

20:                                               ; preds = %2
  %21 = getelementptr inbounds %"class.quic::QuicMemSliceImpl", %"class.quic::QuicMemSliceImpl"* %1, i64 0, i32 0
  %22 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %0, i64 0, i32 0
  tail call void @_ZNSt3__16vectorI13scoped_refptrIN3net8IOBufferEENS_9allocatorIS4_EEE21__push_back_slow_pathIRKS4_EEvOT_(%"class.std::__1::vector"* %22, %class.scoped_refptr* dereferenceable(8) %21) #8
  br label %23

23:                                               ; preds = %16, %20
  %24 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %0, i64 0, i32 1
  %25 = getelementptr inbounds %"class.quic::QuicMemSliceImpl", %"class.quic::QuicMemSliceImpl"* %1, i64 0, i32 1
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %0, i64 0, i32 1, i32 0, i32 1
  %28 = load i64*, i64** %27, align 8
  %29 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %30 = load i64*, i64** %29, align 8
  %31 = icmp ult i64* %28, %30
  %32 = ptrtoint i64* %30 to i64
  br i1 %31, label %33, label %37

33:                                               ; preds = %23
  store i64 %26, i64* %28, align 8
  %34 = getelementptr inbounds i64, i64* %28, i64 1
  %35 = ptrtoint i64* %34 to i64
  %36 = bitcast i64** %27 to i64*
  store i64 %35, i64* %36, align 8
  br label %93

37:                                               ; preds = %23
  %38 = ptrtoint i64* %28 to i64
  %39 = bitcast i64** %27 to i64*
  %40 = bitcast %"class.std::__1::vector.2"* %24 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = sub i64 %38, %41
  %43 = ashr exact i64 %42, 3
  %44 = add nsw i64 %43, 1
  %45 = icmp ugt i64 %44, 2305843009213693951
  br i1 %45, label %46, label %48

46:                                               ; preds = %37
  %47 = bitcast %"class.std::__1::vector.2"* %24 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %47) #10
  unreachable

48:                                               ; preds = %37
  %49 = bitcast i64** %29 to i64*
  %50 = sub i64 %32, %41
  %51 = ashr exact i64 %50, 3
  %52 = icmp ult i64 %51, 1152921504606846975
  br i1 %52, label %53, label %61

53:                                               ; preds = %48
  %54 = ashr exact i64 %50, 2
  %55 = icmp ult i64 %54, %44
  %56 = select i1 %55, i64 %44, i64 %54
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %66, label %58

58:                                               ; preds = %53
  %59 = icmp ugt i64 %56, 2305843009213693951
  br i1 %59, label %60, label %61

60:                                               ; preds = %58
  tail call void @abort() #10
  unreachable

61:                                               ; preds = %58, %48
  %62 = phi i64 [ %56, %58 ], [ 2305843009213693951, %48 ]
  %63 = shl i64 %62, 3
  %64 = tail call i8* @_Znwm(i64 %63) #9
  %65 = bitcast i8* %64 to i64*
  br label %66

66:                                               ; preds = %61, %53
  %67 = phi i64 [ %62, %61 ], [ 0, %53 ]
  %68 = phi i64* [ %65, %61 ], [ null, %53 ]
  %69 = getelementptr inbounds i64, i64* %68, i64 %43
  %70 = getelementptr inbounds i64, i64* %68, i64 %67
  %71 = ptrtoint i64* %70 to i64
  store i64 %26, i64* %69, align 8
  %72 = getelementptr inbounds i64, i64* %69, i64 1
  %73 = ptrtoint i64* %72 to i64
  %74 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %24, i64 0, i32 0, i32 0
  %75 = load i64*, i64** %74, align 8
  %76 = load i64, i64* %39, align 8
  %77 = ptrtoint i64* %75 to i64
  %78 = sub i64 %76, %77
  %79 = ashr exact i64 %78, 3
  %80 = sub nsw i64 0, %79
  %81 = getelementptr inbounds i64, i64* %69, i64 %80
  %82 = ptrtoint i64* %81 to i64
  %83 = icmp sgt i64 %78, 0
  br i1 %83, label %84, label %88

84:                                               ; preds = %66
  %85 = bitcast i64* %81 to i8*
  %86 = bitcast i64* %75 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %85, i8* align 8 %86, i64 %78, i1 false) #8
  %87 = load i64*, i64** %74, align 8
  br label %88

88:                                               ; preds = %84, %66
  %89 = phi i64* [ %75, %66 ], [ %87, %84 ]
  store i64 %82, i64* %40, align 8
  store i64 %73, i64* %39, align 8
  store i64 %71, i64* %49, align 8
  %90 = icmp eq i64* %89, null
  br i1 %90, label %93, label %91

91:                                               ; preds = %88
  %92 = bitcast i64* %89 to i8*
  tail call void @_ZdlPv(i8* %92) #9
  br label %93

93:                                               ; preds = %33, %88, %91
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic23QuicMemSliceStorageImplC2ERKS0_(%"class.quic::QuicMemSliceStorageImpl"*, %"class.quic::QuicMemSliceStorageImpl"* nocapture readonly dereferenceable(48)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.quic::QuicMemSliceStorageImpl"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 24, i1 false) #8
  %4 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %1, i64 0, i32 0, i32 0, i32 1
  %5 = bitcast %class.scoped_refptr** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.quic::QuicMemSliceStorageImpl"* %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = ashr exact i64 %9, 3
  %11 = icmp eq i64 %9, 0
  br i1 %11, label %80, label %12

12:                                               ; preds = %2
  %13 = icmp ugt i64 %10, 2305843009213693951
  br i1 %13, label %14, label %16

14:                                               ; preds = %12
  %15 = bitcast %"class.quic::QuicMemSliceStorageImpl"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %15) #10
  unreachable

16:                                               ; preds = %12
  %17 = tail call i8* @_Znwm(i64 %9) #9
  %18 = bitcast i8* %17 to %class.scoped_refptr*
  %19 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %0, i64 0, i32 0, i32 0, i32 1
  %20 = bitcast %class.scoped_refptr** %19 to i8**
  store i8* %17, i8** %20, align 8
  %21 = bitcast %"class.quic::QuicMemSliceStorageImpl"* %0 to i8**
  store i8* %17, i8** %21, align 8
  %22 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %18, i64 %10
  %23 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  store %class.scoped_refptr* %22, %class.scoped_refptr** %23, align 8
  %24 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %1, i64 0, i32 0, i32 0, i32 0
  %25 = load %class.scoped_refptr*, %class.scoped_refptr** %24, align 8
  %26 = load %class.scoped_refptr*, %class.scoped_refptr** %4, align 8
  %27 = bitcast %class.scoped_refptr** %19 to i64*
  %28 = ptrtoint i8* %17 to i64
  %29 = icmp eq %class.scoped_refptr* %25, %26
  br i1 %29, label %78, label %30

30:                                               ; preds = %16
  %31 = ptrtoint %class.scoped_refptr* %25 to i64
  %32 = getelementptr %class.scoped_refptr, %class.scoped_refptr* %26, i64 -1, i32 0
  %33 = ptrtoint %"class.net::IOBuffer"** %32 to i64
  %34 = sub i64 %33, %31
  %35 = lshr i64 %34, 3
  %36 = add nuw nsw i64 %35, 1
  %37 = and i64 %36, 3
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %55, label %39

39:                                               ; preds = %30, %50
  %40 = phi %class.scoped_refptr* [ %52, %50 ], [ %18, %30 ]
  %41 = phi %class.scoped_refptr* [ %51, %50 ], [ %25, %30 ]
  %42 = phi i64 [ %53, %50 ], [ %37, %30 ]
  %43 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %41, i64 0, i32 0
  %44 = load %"class.net::IOBuffer"*, %"class.net::IOBuffer"** %43, align 8
  %45 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %40, i64 0, i32 0
  store %"class.net::IOBuffer"* %44, %"class.net::IOBuffer"** %45, align 8
  %46 = icmp eq %"class.net::IOBuffer"* %44, null
  br i1 %46, label %50, label %47

47:                                               ; preds = %39
  %48 = getelementptr inbounds %"class.net::IOBuffer", %"class.net::IOBuffer"* %44, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %49 = atomicrmw add i32* %48, i32 1 monotonic
  br label %50

50:                                               ; preds = %47, %39
  %51 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %41, i64 1
  %52 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %40, i64 1
  %53 = add i64 %42, -1
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %55, label %39, !llvm.loop !4

55:                                               ; preds = %50, %30
  %56 = phi %class.scoped_refptr* [ undef, %30 ], [ %52, %50 ]
  %57 = phi %class.scoped_refptr* [ %18, %30 ], [ %52, %50 ]
  %58 = phi %class.scoped_refptr* [ %25, %30 ], [ %51, %50 ]
  %59 = icmp ult i64 %34, 24
  br i1 %59, label %75, label %60

60:                                               ; preds = %55, %139
  %61 = phi %class.scoped_refptr* [ %141, %139 ], [ %57, %55 ]
  %62 = phi %class.scoped_refptr* [ %140, %139 ], [ %58, %55 ]
  %63 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %62, i64 0, i32 0
  %64 = load %"class.net::IOBuffer"*, %"class.net::IOBuffer"** %63, align 8
  %65 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %61, i64 0, i32 0
  store %"class.net::IOBuffer"* %64, %"class.net::IOBuffer"** %65, align 8
  %66 = icmp eq %"class.net::IOBuffer"* %64, null
  br i1 %66, label %70, label %67

67:                                               ; preds = %60
  %68 = getelementptr inbounds %"class.net::IOBuffer", %"class.net::IOBuffer"* %64, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = atomicrmw add i32* %68, i32 1 monotonic
  br label %70

70:                                               ; preds = %67, %60
  %71 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %62, i64 1, i32 0
  %72 = load %"class.net::IOBuffer"*, %"class.net::IOBuffer"** %71, align 8
  %73 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %61, i64 1, i32 0
  store %"class.net::IOBuffer"* %72, %"class.net::IOBuffer"** %73, align 8
  %74 = icmp eq %"class.net::IOBuffer"* %72, null
  br i1 %74, label %123, label %120

75:                                               ; preds = %139, %55
  %76 = phi %class.scoped_refptr* [ %56, %55 ], [ %141, %139 ]
  %77 = ptrtoint %class.scoped_refptr* %76 to i64
  br label %78

78:                                               ; preds = %75, %16
  %79 = phi i64 [ %28, %16 ], [ %77, %75 ]
  store i64 %79, i64* %27, align 8
  br label %80

80:                                               ; preds = %2, %78
  %81 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %0, i64 0, i32 1
  %82 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %1, i64 0, i32 1
  %83 = bitcast %"class.std::__1::vector.2"* %81 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %83, i8 0, i64 24, i1 false) #8
  %84 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %1, i64 0, i32 1, i32 0, i32 1
  %85 = bitcast i64** %84 to i64*
  %86 = load i64, i64* %85, align 8
  %87 = bitcast %"class.std::__1::vector.2"* %82 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = sub i64 %86, %88
  %90 = ashr exact i64 %89, 3
  %91 = icmp eq i64 %89, 0
  br i1 %91, label %119, label %92

92:                                               ; preds = %80
  %93 = icmp ugt i64 %90, 2305843009213693951
  br i1 %93, label %94, label %96

94:                                               ; preds = %92
  %95 = bitcast %"class.std::__1::vector.2"* %81 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %95) #10
  unreachable

96:                                               ; preds = %92
  %97 = tail call i8* @_Znwm(i64 %89) #9
  %98 = bitcast i8* %97 to i64*
  %99 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %0, i64 0, i32 1, i32 0, i32 1
  %100 = bitcast i64** %99 to i8**
  store i8* %97, i8** %100, align 8
  %101 = bitcast %"class.std::__1::vector.2"* %81 to i8**
  store i8* %97, i8** %101, align 8
  %102 = getelementptr inbounds i64, i64* %98, i64 %90
  %103 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  store i64* %102, i64** %103, align 8
  %104 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %82, i64 0, i32 0, i32 0
  %105 = load i64*, i64** %104, align 8
  %106 = load i64, i64* %85, align 8
  %107 = bitcast i64** %99 to i64*
  %108 = ptrtoint i8* %97 to i64
  %109 = ptrtoint i64* %105 to i64
  %110 = sub i64 %106, %109
  %111 = icmp sgt i64 %110, 0
  br i1 %111, label %112, label %117

112:                                              ; preds = %96
  %113 = lshr exact i64 %110, 3
  %114 = bitcast i64* %105 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %97, i8* align 8 %114, i64 %110, i1 false) #8
  %115 = getelementptr inbounds i64, i64* %98, i64 %113
  %116 = ptrtoint i64* %115 to i64
  br label %117

117:                                              ; preds = %112, %96
  %118 = phi i64 [ %116, %112 ], [ %108, %96 ]
  store i64 %118, i64* %107, align 8
  br label %119

119:                                              ; preds = %80, %117
  ret void

120:                                              ; preds = %70
  %121 = getelementptr inbounds %"class.net::IOBuffer", %"class.net::IOBuffer"* %72, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %122 = atomicrmw add i32* %121, i32 1 monotonic
  br label %123

123:                                              ; preds = %120, %70
  %124 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %62, i64 2, i32 0
  %125 = load %"class.net::IOBuffer"*, %"class.net::IOBuffer"** %124, align 8
  %126 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %61, i64 2, i32 0
  store %"class.net::IOBuffer"* %125, %"class.net::IOBuffer"** %126, align 8
  %127 = icmp eq %"class.net::IOBuffer"* %125, null
  br i1 %127, label %131, label %128

128:                                              ; preds = %123
  %129 = getelementptr inbounds %"class.net::IOBuffer", %"class.net::IOBuffer"* %125, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %130 = atomicrmw add i32* %129, i32 1 monotonic
  br label %131

131:                                              ; preds = %128, %123
  %132 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %62, i64 3, i32 0
  %133 = load %"class.net::IOBuffer"*, %"class.net::IOBuffer"** %132, align 8
  %134 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %61, i64 3, i32 0
  store %"class.net::IOBuffer"* %133, %"class.net::IOBuffer"** %134, align 8
  %135 = icmp eq %"class.net::IOBuffer"* %133, null
  br i1 %135, label %139, label %136

136:                                              ; preds = %131
  %137 = getelementptr inbounds %"class.net::IOBuffer", %"class.net::IOBuffer"* %133, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %138 = atomicrmw add i32* %137, i32 1 monotonic
  br label %139

139:                                              ; preds = %136, %131
  %140 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %62, i64 4
  %141 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %61, i64 4
  %142 = icmp eq %class.scoped_refptr* %140, %26
  br i1 %142, label %75, label %60
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic23QuicMemSliceStorageImplC2EOS0_(%"class.quic::QuicMemSliceStorageImpl"* nocapture, %"class.quic::QuicMemSliceStorageImpl"* nocapture dereferenceable(48)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.quic::QuicMemSliceStorageImpl"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 24, i1 false) #8
  %4 = bitcast %"class.quic::QuicMemSliceStorageImpl"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.quic::QuicMemSliceStorageImpl"* %0 to i64*
  store i64 %5, i64* %6, align 8
  %7 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %1, i64 0, i32 0, i32 0, i32 1
  %8 = bitcast %class.scoped_refptr** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = bitcast %class.scoped_refptr** %10 to i64*
  store i64 %9, i64* %11, align 8
  %12 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %13 = bitcast %class.scoped_refptr** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %class.scoped_refptr** %15 to i64*
  store i64 %14, i64* %16, align 8
  %17 = bitcast %"class.quic::QuicMemSliceStorageImpl"* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 24, i1 false) #8
  %18 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %0, i64 0, i32 1
  %19 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %1, i64 0, i32 1
  %20 = bitcast %"class.std::__1::vector.2"* %18 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 24, i1 false) #8
  %21 = bitcast %"class.std::__1::vector.2"* %19 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = bitcast %"class.std::__1::vector.2"* %18 to i64*
  store i64 %22, i64* %23, align 8
  %24 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %1, i64 0, i32 1, i32 0, i32 1
  %25 = bitcast i64** %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %0, i64 0, i32 1, i32 0, i32 1
  %28 = bitcast i64** %27 to i64*
  store i64 %26, i64* %28, align 8
  %29 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %1, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %30 = bitcast i64** %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %33 = bitcast i64** %32 to i64*
  store i64 %31, i64* %33, align 8
  %34 = bitcast %"class.std::__1::vector.2"* %19 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %34, i8 0, i64 24, i1 false) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(48) %"class.quic::QuicMemSliceStorageImpl"* @_ZN4quic23QuicMemSliceStorageImplaSERKS0_(%"class.quic::QuicMemSliceStorageImpl"* returned, %"class.quic::QuicMemSliceStorageImpl"* readonly dereferenceable(48)) local_unnamed_addr #0 align 2 {
  %3 = icmp eq %"class.quic::QuicMemSliceStorageImpl"* %0, %1
  br i1 %3, label %15, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %0, i64 0, i32 0
  %6 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %1, i64 0, i32 0, i32 0, i32 0
  %7 = load %class.scoped_refptr*, %class.scoped_refptr** %6, align 8
  %8 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %1, i64 0, i32 0, i32 0, i32 1
  %9 = load %class.scoped_refptr*, %class.scoped_refptr** %8, align 8
  tail call void @_ZNSt3__16vectorI13scoped_refptrIN3net8IOBufferEENS_9allocatorIS4_EEE6assignIPS4_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS4_NS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_(%"class.std::__1::vector"* %5, %class.scoped_refptr* %7, %class.scoped_refptr* %9) #8
  %10 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %0, i64 0, i32 1
  %11 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %1, i64 0, i32 1, i32 0, i32 0
  %12 = load i64*, i64** %11, align 8
  %13 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %1, i64 0, i32 1, i32 0, i32 1
  %14 = load i64*, i64** %13, align 8
  tail call void @_ZNSt3__16vectorImNS_9allocatorImEEE6assignIPmEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleImNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector.2"* %10, i64* %12, i64* %14) #8
  br label %15

15:                                               ; preds = %2, %4
  ret %"class.quic::QuicMemSliceStorageImpl"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(48) %"class.quic::QuicMemSliceStorageImpl"* @_ZN4quic23QuicMemSliceStorageImplaSEOS0_(%"class.quic::QuicMemSliceStorageImpl"* returned, %"class.quic::QuicMemSliceStorageImpl"* nocapture dereferenceable(48)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load %class.scoped_refptr*, %class.scoped_refptr** %3, align 8
  %5 = icmp eq %class.scoped_refptr* %4, null
  br i1 %5, label %37, label %6

6:                                                ; preds = %2
  %7 = bitcast %class.scoped_refptr* %4 to i8*
  %8 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %0, i64 0, i32 0, i32 0, i32 1
  %9 = load %class.scoped_refptr*, %class.scoped_refptr** %8, align 8
  %10 = icmp eq %class.scoped_refptr* %9, %4
  br i1 %10, label %34, label %11

11:                                               ; preds = %6, %29
  %12 = phi %class.scoped_refptr* [ %13, %29 ], [ %9, %6 ]
  %13 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %12, i64 -1
  %14 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %13, i64 0, i32 0
  %15 = load %"class.net::IOBuffer"*, %"class.net::IOBuffer"** %14, align 8
  %16 = icmp eq %"class.net::IOBuffer"* %15, null
  br i1 %16, label %29, label %17

17:                                               ; preds = %11
  %18 = getelementptr inbounds %"class.net::IOBuffer", %"class.net::IOBuffer"* %15, i64 0, i32 1
  %19 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = atomicrmw sub i32* %19, i32 1 acq_rel
  %21 = icmp eq i32 %20, 1
  br i1 %21, label %22, label %29

22:                                               ; preds = %17
  %23 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %18, i64 -2
  %24 = bitcast %"class.base::RefCountedThreadSafe"* %23 to %"class.net::IOBuffer"*
  %25 = bitcast %"class.base::RefCountedThreadSafe"* %23 to void (%"class.net::IOBuffer"*)***
  %26 = load void (%"class.net::IOBuffer"*)**, void (%"class.net::IOBuffer"*)*** %25, align 8
  %27 = getelementptr inbounds void (%"class.net::IOBuffer"*)*, void (%"class.net::IOBuffer"*)** %26, i64 1
  %28 = load void (%"class.net::IOBuffer"*)*, void (%"class.net::IOBuffer"*)** %27, align 8
  tail call void %28(%"class.net::IOBuffer"* nonnull %24) #8
  br label %29

29:                                               ; preds = %22, %17, %11
  %30 = icmp eq %class.scoped_refptr* %13, %4
  br i1 %30, label %31, label %11

31:                                               ; preds = %29
  %32 = bitcast %"class.quic::QuicMemSliceStorageImpl"* %0 to i8**
  %33 = load i8*, i8** %32, align 8
  br label %34

34:                                               ; preds = %31, %6
  %35 = phi i8* [ %33, %31 ], [ %7, %6 ]
  store %class.scoped_refptr* %4, %class.scoped_refptr** %8, align 8
  tail call void @_ZdlPv(i8* %35) #9
  %36 = bitcast %"class.quic::QuicMemSliceStorageImpl"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %36, i8 0, i64 24, i1 false) #8
  br label %37

37:                                               ; preds = %2, %34
  %38 = bitcast %"class.quic::QuicMemSliceStorageImpl"* %1 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %"class.quic::QuicMemSliceStorageImpl"* %0 to i64*
  store i64 %39, i64* %40, align 8
  %41 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %1, i64 0, i32 0, i32 0, i32 1
  %42 = bitcast %class.scoped_refptr** %41 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %0, i64 0, i32 0, i32 0, i32 1
  %45 = bitcast %class.scoped_refptr** %44 to i64*
  store i64 %43, i64* %45, align 8
  %46 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %47 = bitcast %class.scoped_refptr** %46 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %50 = bitcast %class.scoped_refptr** %49 to i64*
  store i64 %48, i64* %50, align 8
  %51 = bitcast %"class.quic::QuicMemSliceStorageImpl"* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %51, i8 0, i64 24, i1 false) #8
  %52 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %0, i64 0, i32 1
  %53 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %1, i64 0, i32 1
  %54 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %52, i64 0, i32 0, i32 0
  %55 = load i64*, i64** %54, align 8
  %56 = icmp eq i64* %55, null
  br i1 %56, label %63, label %57

57:                                               ; preds = %37
  %58 = ptrtoint i64* %55 to i64
  %59 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %0, i64 0, i32 1, i32 0, i32 1
  %60 = bitcast i64** %59 to i64*
  store i64 %58, i64* %60, align 8
  %61 = bitcast i64* %55 to i8*
  tail call void @_ZdlPv(i8* %61) #9
  %62 = bitcast %"class.std::__1::vector.2"* %52 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %62, i8 0, i64 24, i1 false) #8
  br label %63

63:                                               ; preds = %37, %57
  %64 = bitcast %"class.std::__1::vector.2"* %53 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = bitcast %"class.std::__1::vector.2"* %52 to i64*
  store i64 %65, i64* %66, align 8
  %67 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %1, i64 0, i32 1, i32 0, i32 1
  %68 = bitcast i64** %67 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %0, i64 0, i32 1, i32 0, i32 1
  %71 = bitcast i64** %70 to i64*
  store i64 %69, i64* %71, align 8
  %72 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %1, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %73 = bitcast i64** %72 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %76 = bitcast i64** %75 to i64*
  store i64 %74, i64* %76, align 8
  %77 = bitcast %"class.std::__1::vector.2"* %53 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %77, i8 0, i64 24, i1 false) #8
  ret %"class.quic::QuicMemSliceStorageImpl"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic23QuicMemSliceStorageImplD2Ev(%"class.quic::QuicMemSliceStorageImpl"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %0, i64 0, i32 1, i32 0, i32 0
  %3 = load i64*, i64** %2, align 8
  %4 = icmp eq i64* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint i64* %3 to i64
  %7 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %0, i64 0, i32 1, i32 0, i32 1
  %8 = bitcast i64** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast i64* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #9
  br label %10

10:                                               ; preds = %1, %5
  %11 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %0, i64 0, i32 0, i32 0, i32 0
  %12 = load %class.scoped_refptr*, %class.scoped_refptr** %11, align 8
  %13 = icmp eq %class.scoped_refptr* %12, null
  br i1 %13, label %44, label %14

14:                                               ; preds = %10
  %15 = bitcast %class.scoped_refptr* %12 to i8*
  %16 = getelementptr inbounds %"class.quic::QuicMemSliceStorageImpl", %"class.quic::QuicMemSliceStorageImpl"* %0, i64 0, i32 0, i32 0, i32 1
  %17 = load %class.scoped_refptr*, %class.scoped_refptr** %16, align 8
  %18 = icmp eq %class.scoped_refptr* %17, %12
  br i1 %18, label %42, label %19

19:                                               ; preds = %14, %37
  %20 = phi %class.scoped_refptr* [ %21, %37 ], [ %17, %14 ]
  %21 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %20, i64 -1
  %22 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %21, i64 0, i32 0
  %23 = load %"class.net::IOBuffer"*, %"class.net::IOBuffer"** %22, align 8
  %24 = icmp eq %"class.net::IOBuffer"* %23, null
  br i1 %24, label %37, label %25

25:                                               ; preds = %19
  %26 = getelementptr inbounds %"class.net::IOBuffer", %"class.net::IOBuffer"* %23, i64 0, i32 1
  %27 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %26, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = atomicrmw sub i32* %27, i32 1 acq_rel
  %29 = icmp eq i32 %28, 1
  br i1 %29, label %30, label %37

30:                                               ; preds = %25
  %31 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %26, i64 -2
  %32 = bitcast %"class.base::RefCountedThreadSafe"* %31 to %"class.net::IOBuffer"*
  %33 = bitcast %"class.base::RefCountedThreadSafe"* %31 to void (%"class.net::IOBuffer"*)***
  %34 = load void (%"class.net::IOBuffer"*)**, void (%"class.net::IOBuffer"*)*** %33, align 8
  %35 = getelementptr inbounds void (%"class.net::IOBuffer"*)*, void (%"class.net::IOBuffer"*)** %34, i64 1
  %36 = load void (%"class.net::IOBuffer"*)*, void (%"class.net::IOBuffer"*)** %35, align 8
  tail call void %36(%"class.net::IOBuffer"* nonnull %32) #8
  br label %37

37:                                               ; preds = %30, %25, %19
  %38 = icmp eq %class.scoped_refptr* %21, %12
  br i1 %38, label %39, label %19

39:                                               ; preds = %37
  %40 = bitcast %"class.quic::QuicMemSliceStorageImpl"* %0 to i8**
  %41 = load i8*, i8** %40, align 8
  br label %42

42:                                               ; preds = %39, %14
  %43 = phi i8* [ %41, %39 ], [ %15, %14 ]
  store %class.scoped_refptr* %12, %class.scoped_refptr** %16, align 8
  tail call void @_ZdlPv(i8* %43) #9
  br label %44

44:                                               ; preds = %10, %42
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

declare void @_ZN3net8IOBufferC1Em(%"class.net::IOBuffer"*, i64) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorI13scoped_refptrIN3net8IOBufferEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(%"class.std::__1::vector"*, %class.scoped_refptr* dereferenceable(8)) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %class.scoped_refptr** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 2305843009213693951
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #10
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %class.scoped_refptr** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 3
  %20 = icmp ult i64 %19, 1152921504606846975
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 2
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 2305843009213693951
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #10
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 2305843009213693951, %14 ]
  %31 = shl i64 %30, 3
  %32 = tail call i8* @_Znwm(i64 %31) #9
  %33 = bitcast i8* %32 to %class.scoped_refptr*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %class.scoped_refptr* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %36, i64 %9
  %38 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %36, i64 %35
  %39 = ptrtoint %class.scoped_refptr* %38 to i64
  %40 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %1, i64 0, i32 0
  %41 = bitcast %class.scoped_refptr* %1 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = bitcast %class.scoped_refptr* %37 to i64*
  store i64 %42, i64* %43, align 8
  store %"class.net::IOBuffer"* null, %"class.net::IOBuffer"** %40, align 8
  %44 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %37, i64 1
  %45 = ptrtoint %class.scoped_refptr* %44 to i64
  %46 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %47 = load %class.scoped_refptr*, %class.scoped_refptr** %46, align 8
  %48 = ptrtoint %class.scoped_refptr* %47 to i64
  %49 = load %class.scoped_refptr*, %class.scoped_refptr** %3, align 8
  %50 = icmp eq %class.scoped_refptr* %49, %47
  br i1 %50, label %132, label %51

51:                                               ; preds = %34
  %52 = getelementptr %class.scoped_refptr, %class.scoped_refptr* %49, i64 -1, i32 0
  %53 = ptrtoint %"class.net::IOBuffer"** %52 to i64
  %54 = sub i64 %53, %48
  %55 = lshr i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = and i64 %56, 7
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %71, label %59

59:                                               ; preds = %51, %59
  %60 = phi %class.scoped_refptr* [ %63, %59 ], [ %37, %51 ]
  %61 = phi %class.scoped_refptr* [ %64, %59 ], [ %49, %51 ]
  %62 = phi i64 [ %69, %59 ], [ %57, %51 ]
  %63 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %60, i64 -1
  %64 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %61, i64 -1
  %65 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %64, i64 0, i32 0
  %66 = bitcast %class.scoped_refptr* %64 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = bitcast %class.scoped_refptr* %63 to i64*
  store i64 %67, i64* %68, align 8
  store %"class.net::IOBuffer"* null, %"class.net::IOBuffer"** %65, align 8
  %69 = add i64 %62, -1
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %59, !llvm.loop !5

71:                                               ; preds = %59, %51
  %72 = phi %class.scoped_refptr* [ undef, %51 ], [ %63, %59 ]
  %73 = phi %class.scoped_refptr* [ %37, %51 ], [ %63, %59 ]
  %74 = phi %class.scoped_refptr* [ %49, %51 ], [ %64, %59 ]
  %75 = icmp ult i64 %54, 56
  br i1 %75, label %128, label %76

76:                                               ; preds = %71, %76
  %77 = phi %class.scoped_refptr* [ %121, %76 ], [ %73, %71 ]
  %78 = phi %class.scoped_refptr* [ %122, %76 ], [ %74, %71 ]
  %79 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %77, i64 -1
  %80 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %78, i64 -1
  %81 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %80, i64 0, i32 0
  %82 = bitcast %class.scoped_refptr* %80 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast %class.scoped_refptr* %79 to i64*
  store i64 %83, i64* %84, align 8
  store %"class.net::IOBuffer"* null, %"class.net::IOBuffer"** %81, align 8
  %85 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %77, i64 -2
  %86 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %78, i64 -2
  %87 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %86, i64 0, i32 0
  %88 = bitcast %class.scoped_refptr* %86 to i64*
  %89 = load i64, i64* %88, align 8
  %90 = bitcast %class.scoped_refptr* %85 to i64*
  store i64 %89, i64* %90, align 8
  store %"class.net::IOBuffer"* null, %"class.net::IOBuffer"** %87, align 8
  %91 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %77, i64 -3
  %92 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %78, i64 -3
  %93 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %92, i64 0, i32 0
  %94 = bitcast %class.scoped_refptr* %92 to i64*
  %95 = load i64, i64* %94, align 8
  %96 = bitcast %class.scoped_refptr* %91 to i64*
  store i64 %95, i64* %96, align 8
  store %"class.net::IOBuffer"* null, %"class.net::IOBuffer"** %93, align 8
  %97 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %77, i64 -4
  %98 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %78, i64 -4
  %99 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %98, i64 0, i32 0
  %100 = bitcast %class.scoped_refptr* %98 to i64*
  %101 = load i64, i64* %100, align 8
  %102 = bitcast %class.scoped_refptr* %97 to i64*
  store i64 %101, i64* %102, align 8
  store %"class.net::IOBuffer"* null, %"class.net::IOBuffer"** %99, align 8
  %103 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %77, i64 -5
  %104 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %78, i64 -5
  %105 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %104, i64 0, i32 0
  %106 = bitcast %class.scoped_refptr* %104 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = bitcast %class.scoped_refptr* %103 to i64*
  store i64 %107, i64* %108, align 8
  store %"class.net::IOBuffer"* null, %"class.net::IOBuffer"** %105, align 8
  %109 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %77, i64 -6
  %110 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %78, i64 -6
  %111 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %110, i64 0, i32 0
  %112 = bitcast %class.scoped_refptr* %110 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast %class.scoped_refptr* %109 to i64*
  store i64 %113, i64* %114, align 8
  store %"class.net::IOBuffer"* null, %"class.net::IOBuffer"** %111, align 8
  %115 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %77, i64 -7
  %116 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %78, i64 -7
  %117 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %116, i64 0, i32 0
  %118 = bitcast %class.scoped_refptr* %116 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast %class.scoped_refptr* %115 to i64*
  store i64 %119, i64* %120, align 8
  store %"class.net::IOBuffer"* null, %"class.net::IOBuffer"** %117, align 8
  %121 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %77, i64 -8
  %122 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %78, i64 -8
  %123 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %122, i64 0, i32 0
  %124 = bitcast %class.scoped_refptr* %122 to i64*
  %125 = load i64, i64* %124, align 8
  %126 = bitcast %class.scoped_refptr* %121 to i64*
  store i64 %125, i64* %126, align 8
  store %"class.net::IOBuffer"* null, %"class.net::IOBuffer"** %123, align 8
  %127 = icmp eq %class.scoped_refptr* %122, %47
  br i1 %127, label %128, label %76

128:                                              ; preds = %76, %71
  %129 = phi %class.scoped_refptr* [ %72, %71 ], [ %121, %76 ]
  %130 = load i64, i64* %6, align 8
  %131 = load %class.scoped_refptr*, %class.scoped_refptr** %3, align 8
  br label %132

132:                                              ; preds = %34, %128
  %133 = phi %class.scoped_refptr* [ %131, %128 ], [ %47, %34 ]
  %134 = phi %class.scoped_refptr* [ %129, %128 ], [ %37, %34 ]
  %135 = phi i64 [ %130, %128 ], [ %48, %34 ]
  %136 = ptrtoint %class.scoped_refptr* %134 to i64
  store i64 %136, i64* %6, align 8
  store i64 %45, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %137 = inttoptr i64 %135 to %class.scoped_refptr*
  %138 = icmp eq %class.scoped_refptr* %133, %137
  br i1 %138, label %159, label %139

139:                                              ; preds = %132, %157
  %140 = phi %class.scoped_refptr* [ %141, %157 ], [ %133, %132 ]
  %141 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %140, i64 -1
  %142 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %141, i64 0, i32 0
  %143 = load %"class.net::IOBuffer"*, %"class.net::IOBuffer"** %142, align 8
  %144 = icmp eq %"class.net::IOBuffer"* %143, null
  br i1 %144, label %157, label %145

145:                                              ; preds = %139
  %146 = getelementptr inbounds %"class.net::IOBuffer", %"class.net::IOBuffer"* %143, i64 0, i32 1
  %147 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %146, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %148 = atomicrmw sub i32* %147, i32 1 acq_rel
  %149 = icmp eq i32 %148, 1
  br i1 %149, label %150, label %157

150:                                              ; preds = %145
  %151 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %146, i64 -2
  %152 = bitcast %"class.base::RefCountedThreadSafe"* %151 to %"class.net::IOBuffer"*
  %153 = bitcast %"class.base::RefCountedThreadSafe"* %151 to void (%"class.net::IOBuffer"*)***
  %154 = load void (%"class.net::IOBuffer"*)**, void (%"class.net::IOBuffer"*)*** %153, align 8
  %155 = getelementptr inbounds void (%"class.net::IOBuffer"*)*, void (%"class.net::IOBuffer"*)** %154, i64 1
  %156 = load void (%"class.net::IOBuffer"*)*, void (%"class.net::IOBuffer"*)** %155, align 8
  tail call void %156(%"class.net::IOBuffer"* nonnull %152) #8
  br label %157

157:                                              ; preds = %150, %145, %139
  %158 = icmp eq %class.scoped_refptr* %141, %137
  br i1 %158, label %159, label %139

159:                                              ; preds = %157, %132
  %160 = icmp eq i64 %135, 0
  br i1 %160, label %163, label %161

161:                                              ; preds = %159
  %162 = inttoptr i64 %135 to i8*
  tail call void @_ZdlPv(i8* %162) #9
  br label %163

163:                                              ; preds = %159, %161
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorI13scoped_refptrIN3net8IOBufferEENS_9allocatorIS4_EEE21__push_back_slow_pathIRKS4_EEvOT_(%"class.std::__1::vector"*, %class.scoped_refptr* dereferenceable(8)) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %class.scoped_refptr** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 2305843009213693951
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #10
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %class.scoped_refptr** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 3
  %20 = icmp ult i64 %19, 1152921504606846975
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 2
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 2305843009213693951
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #10
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 2305843009213693951, %14 ]
  %31 = shl i64 %30, 3
  %32 = tail call i8* @_Znwm(i64 %31) #9
  %33 = bitcast i8* %32 to %class.scoped_refptr*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %class.scoped_refptr* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %36, i64 %9
  %38 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %36, i64 %35
  %39 = ptrtoint %class.scoped_refptr* %38 to i64
  %40 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %1, i64 0, i32 0
  %41 = load %"class.net::IOBuffer"*, %"class.net::IOBuffer"** %40, align 8
  %42 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %37, i64 0, i32 0
  store %"class.net::IOBuffer"* %41, %"class.net::IOBuffer"** %42, align 8
  %43 = icmp eq %"class.net::IOBuffer"* %41, null
  br i1 %43, label %47, label %44

44:                                               ; preds = %34
  %45 = getelementptr inbounds %"class.net::IOBuffer", %"class.net::IOBuffer"* %41, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = atomicrmw add i32* %45, i32 1 monotonic
  br label %47

47:                                               ; preds = %34, %44
  %48 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %37, i64 1
  %49 = ptrtoint %class.scoped_refptr* %48 to i64
  %50 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %51 = load %class.scoped_refptr*, %class.scoped_refptr** %50, align 8
  %52 = ptrtoint %class.scoped_refptr* %51 to i64
  %53 = load %class.scoped_refptr*, %class.scoped_refptr** %3, align 8
  %54 = icmp eq %class.scoped_refptr* %53, %51
  br i1 %54, label %136, label %55

55:                                               ; preds = %47
  %56 = getelementptr %class.scoped_refptr, %class.scoped_refptr* %53, i64 -1, i32 0
  %57 = ptrtoint %"class.net::IOBuffer"** %56 to i64
  %58 = sub i64 %57, %52
  %59 = lshr i64 %58, 3
  %60 = add nuw nsw i64 %59, 1
  %61 = and i64 %60, 7
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %75, label %63

63:                                               ; preds = %55, %63
  %64 = phi %class.scoped_refptr* [ %67, %63 ], [ %37, %55 ]
  %65 = phi %class.scoped_refptr* [ %68, %63 ], [ %53, %55 ]
  %66 = phi i64 [ %73, %63 ], [ %61, %55 ]
  %67 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %64, i64 -1
  %68 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %65, i64 -1
  %69 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %68, i64 0, i32 0
  %70 = bitcast %class.scoped_refptr* %68 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = bitcast %class.scoped_refptr* %67 to i64*
  store i64 %71, i64* %72, align 8
  store %"class.net::IOBuffer"* null, %"class.net::IOBuffer"** %69, align 8
  %73 = add i64 %66, -1
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %75, label %63, !llvm.loop !6

75:                                               ; preds = %63, %55
  %76 = phi %class.scoped_refptr* [ undef, %55 ], [ %67, %63 ]
  %77 = phi %class.scoped_refptr* [ %37, %55 ], [ %67, %63 ]
  %78 = phi %class.scoped_refptr* [ %53, %55 ], [ %68, %63 ]
  %79 = icmp ult i64 %58, 56
  br i1 %79, label %132, label %80

80:                                               ; preds = %75, %80
  %81 = phi %class.scoped_refptr* [ %125, %80 ], [ %77, %75 ]
  %82 = phi %class.scoped_refptr* [ %126, %80 ], [ %78, %75 ]
  %83 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %81, i64 -1
  %84 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %82, i64 -1
  %85 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %84, i64 0, i32 0
  %86 = bitcast %class.scoped_refptr* %84 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = bitcast %class.scoped_refptr* %83 to i64*
  store i64 %87, i64* %88, align 8
  store %"class.net::IOBuffer"* null, %"class.net::IOBuffer"** %85, align 8
  %89 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %81, i64 -2
  %90 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %82, i64 -2
  %91 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %90, i64 0, i32 0
  %92 = bitcast %class.scoped_refptr* %90 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = bitcast %class.scoped_refptr* %89 to i64*
  store i64 %93, i64* %94, align 8
  store %"class.net::IOBuffer"* null, %"class.net::IOBuffer"** %91, align 8
  %95 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %81, i64 -3
  %96 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %82, i64 -3
  %97 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %96, i64 0, i32 0
  %98 = bitcast %class.scoped_refptr* %96 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast %class.scoped_refptr* %95 to i64*
  store i64 %99, i64* %100, align 8
  store %"class.net::IOBuffer"* null, %"class.net::IOBuffer"** %97, align 8
  %101 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %81, i64 -4
  %102 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %82, i64 -4
  %103 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %102, i64 0, i32 0
  %104 = bitcast %class.scoped_refptr* %102 to i64*
  %105 = load i64, i64* %104, align 8
  %106 = bitcast %class.scoped_refptr* %101 to i64*
  store i64 %105, i64* %106, align 8
  store %"class.net::IOBuffer"* null, %"class.net::IOBuffer"** %103, align 8
  %107 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %81, i64 -5
  %108 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %82, i64 -5
  %109 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %108, i64 0, i32 0
  %110 = bitcast %class.scoped_refptr* %108 to i64*
  %111 = load i64, i64* %110, align 8
  %112 = bitcast %class.scoped_refptr* %107 to i64*
  store i64 %111, i64* %112, align 8
  store %"class.net::IOBuffer"* null, %"class.net::IOBuffer"** %109, align 8
  %113 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %81, i64 -6
  %114 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %82, i64 -6
  %115 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %114, i64 0, i32 0
  %116 = bitcast %class.scoped_refptr* %114 to i64*
  %117 = load i64, i64* %116, align 8
  %118 = bitcast %class.scoped_refptr* %113 to i64*
  store i64 %117, i64* %118, align 8
  store %"class.net::IOBuffer"* null, %"class.net::IOBuffer"** %115, align 8
  %119 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %81, i64 -7
  %120 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %82, i64 -7
  %121 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %120, i64 0, i32 0
  %122 = bitcast %class.scoped_refptr* %120 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast %class.scoped_refptr* %119 to i64*
  store i64 %123, i64* %124, align 8
  store %"class.net::IOBuffer"* null, %"class.net::IOBuffer"** %121, align 8
  %125 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %81, i64 -8
  %126 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %82, i64 -8
  %127 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %126, i64 0, i32 0
  %128 = bitcast %class.scoped_refptr* %126 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast %class.scoped_refptr* %125 to i64*
  store i64 %129, i64* %130, align 8
  store %"class.net::IOBuffer"* null, %"class.net::IOBuffer"** %127, align 8
  %131 = icmp eq %class.scoped_refptr* %126, %51
  br i1 %131, label %132, label %80

132:                                              ; preds = %80, %75
  %133 = phi %class.scoped_refptr* [ %76, %75 ], [ %125, %80 ]
  %134 = load i64, i64* %6, align 8
  %135 = load %class.scoped_refptr*, %class.scoped_refptr** %3, align 8
  br label %136

136:                                              ; preds = %47, %132
  %137 = phi %class.scoped_refptr* [ %135, %132 ], [ %51, %47 ]
  %138 = phi %class.scoped_refptr* [ %133, %132 ], [ %37, %47 ]
  %139 = phi i64 [ %134, %132 ], [ %52, %47 ]
  %140 = ptrtoint %class.scoped_refptr* %138 to i64
  store i64 %140, i64* %6, align 8
  store i64 %49, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %141 = inttoptr i64 %139 to %class.scoped_refptr*
  %142 = icmp eq %class.scoped_refptr* %137, %141
  br i1 %142, label %163, label %143

143:                                              ; preds = %136, %161
  %144 = phi %class.scoped_refptr* [ %145, %161 ], [ %137, %136 ]
  %145 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %144, i64 -1
  %146 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %145, i64 0, i32 0
  %147 = load %"class.net::IOBuffer"*, %"class.net::IOBuffer"** %146, align 8
  %148 = icmp eq %"class.net::IOBuffer"* %147, null
  br i1 %148, label %161, label %149

149:                                              ; preds = %143
  %150 = getelementptr inbounds %"class.net::IOBuffer", %"class.net::IOBuffer"* %147, i64 0, i32 1
  %151 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %150, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %152 = atomicrmw sub i32* %151, i32 1 acq_rel
  %153 = icmp eq i32 %152, 1
  br i1 %153, label %154, label %161

154:                                              ; preds = %149
  %155 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %150, i64 -2
  %156 = bitcast %"class.base::RefCountedThreadSafe"* %155 to %"class.net::IOBuffer"*
  %157 = bitcast %"class.base::RefCountedThreadSafe"* %155 to void (%"class.net::IOBuffer"*)***
  %158 = load void (%"class.net::IOBuffer"*)**, void (%"class.net::IOBuffer"*)*** %157, align 8
  %159 = getelementptr inbounds void (%"class.net::IOBuffer"*)*, void (%"class.net::IOBuffer"*)** %158, i64 1
  %160 = load void (%"class.net::IOBuffer"*)*, void (%"class.net::IOBuffer"*)** %159, align 8
  tail call void %160(%"class.net::IOBuffer"* nonnull %156) #8
  br label %161

161:                                              ; preds = %154, %149, %143
  %162 = icmp eq %class.scoped_refptr* %145, %141
  br i1 %162, label %163, label %143

163:                                              ; preds = %161, %136
  %164 = icmp eq i64 %139, 0
  br i1 %164, label %167, label %165

165:                                              ; preds = %163
  %166 = inttoptr i64 %139 to i8*
  tail call void @_ZdlPv(i8* %166) #9
  br label %167

167:                                              ; preds = %163, %165
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorI13scoped_refptrIN3net8IOBufferEENS_9allocatorIS4_EEE6assignIPS4_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS4_NS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_(%"class.std::__1::vector"*, %class.scoped_refptr*, %class.scoped_refptr*) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint %class.scoped_refptr* %1 to i64
  %5 = ptrtoint %class.scoped_refptr* %2 to i64
  %6 = sub i64 %5, %4
  %7 = ashr exact i64 %6, 3
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast %class.scoped_refptr** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 3
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to %class.scoped_refptr*
  br i1 %15, label %138, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %19 = bitcast %class.scoped_refptr** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = ashr exact i64 %21, 3
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %1, i64 %22
  %25 = select i1 %23, %class.scoped_refptr* %24, %class.scoped_refptr* %2
  %26 = icmp eq %class.scoped_refptr* %25, %1
  br i1 %26, label %58, label %27

27:                                               ; preds = %17, %54
  %28 = phi %class.scoped_refptr* [ %56, %54 ], [ %16, %17 ]
  %29 = phi %class.scoped_refptr* [ %55, %54 ], [ %1, %17 ]
  %30 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %29, i64 0, i32 0
  %31 = load %"class.net::IOBuffer"*, %"class.net::IOBuffer"** %30, align 8
  %32 = icmp eq %"class.net::IOBuffer"* %31, null
  br i1 %32, label %36, label %33

33:                                               ; preds = %27
  %34 = getelementptr inbounds %"class.net::IOBuffer", %"class.net::IOBuffer"* %31, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = atomicrmw add i32* %34, i32 1 monotonic
  br label %36

36:                                               ; preds = %33, %27
  %37 = ptrtoint %"class.net::IOBuffer"* %31 to i64
  %38 = bitcast %class.scoped_refptr* %28 to i64*
  %39 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %28, i64 0, i32 0
  %40 = load %"class.net::IOBuffer"*, %"class.net::IOBuffer"** %39, align 8
  store i64 %37, i64* %38, align 8
  %41 = icmp eq %"class.net::IOBuffer"* %40, null
  br i1 %41, label %54, label %42

42:                                               ; preds = %36
  %43 = getelementptr inbounds %"class.net::IOBuffer", %"class.net::IOBuffer"* %40, i64 0, i32 1
  %44 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %43, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %45 = atomicrmw sub i32* %44, i32 1 acq_rel
  %46 = icmp eq i32 %45, 1
  br i1 %46, label %47, label %54

47:                                               ; preds = %42
  %48 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %43, i64 -2
  %49 = bitcast %"class.base::RefCountedThreadSafe"* %48 to %"class.net::IOBuffer"*
  %50 = bitcast %"class.base::RefCountedThreadSafe"* %48 to void (%"class.net::IOBuffer"*)***
  %51 = load void (%"class.net::IOBuffer"*)**, void (%"class.net::IOBuffer"*)*** %50, align 8
  %52 = getelementptr inbounds void (%"class.net::IOBuffer"*)*, void (%"class.net::IOBuffer"*)** %51, i64 1
  %53 = load void (%"class.net::IOBuffer"*)*, void (%"class.net::IOBuffer"*)** %52, align 8
  tail call void %53(%"class.net::IOBuffer"* nonnull %49) #8
  br label %54

54:                                               ; preds = %47, %42, %36
  %55 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %29, i64 1
  %56 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %28, i64 1
  %57 = icmp eq %class.scoped_refptr* %55, %25
  br i1 %57, label %58, label %27

58:                                               ; preds = %54, %17
  %59 = phi %class.scoped_refptr* [ %16, %17 ], [ %56, %54 ]
  br i1 %23, label %60, label %114

60:                                               ; preds = %58
  %61 = load i64, i64* %19, align 8
  %62 = icmp eq %class.scoped_refptr* %25, %2
  br i1 %62, label %112, label %63

63:                                               ; preds = %60
  %64 = inttoptr i64 %61 to %class.scoped_refptr*
  %65 = xor i64 %22, -1
  %66 = getelementptr %class.scoped_refptr, %class.scoped_refptr* %2, i64 %65, i32 0
  %67 = ptrtoint %"class.net::IOBuffer"** %66 to i64
  %68 = sub i64 %67, %4
  %69 = lshr i64 %68, 3
  %70 = add nuw nsw i64 %69, 1
  %71 = and i64 %70, 3
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %89, label %73

73:                                               ; preds = %63, %84
  %74 = phi %class.scoped_refptr* [ %86, %84 ], [ %64, %63 ]
  %75 = phi %class.scoped_refptr* [ %85, %84 ], [ %24, %63 ]
  %76 = phi i64 [ %87, %84 ], [ %71, %63 ]
  %77 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %75, i64 0, i32 0
  %78 = load %"class.net::IOBuffer"*, %"class.net::IOBuffer"** %77, align 8
  %79 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %74, i64 0, i32 0
  store %"class.net::IOBuffer"* %78, %"class.net::IOBuffer"** %79, align 8
  %80 = icmp eq %"class.net::IOBuffer"* %78, null
  br i1 %80, label %84, label %81

81:                                               ; preds = %73
  %82 = getelementptr inbounds %"class.net::IOBuffer", %"class.net::IOBuffer"* %78, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %83 = atomicrmw add i32* %82, i32 1 monotonic
  br label %84

84:                                               ; preds = %81, %73
  %85 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %75, i64 1
  %86 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %74, i64 1
  %87 = add i64 %76, -1
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %89, label %73, !llvm.loop !7

89:                                               ; preds = %84, %63
  %90 = phi %class.scoped_refptr* [ undef, %63 ], [ %86, %84 ]
  %91 = phi %class.scoped_refptr* [ %64, %63 ], [ %86, %84 ]
  %92 = phi %class.scoped_refptr* [ %24, %63 ], [ %85, %84 ]
  %93 = icmp ult i64 %68, 24
  br i1 %93, label %109, label %94

94:                                               ; preds = %89, %290
  %95 = phi %class.scoped_refptr* [ %292, %290 ], [ %91, %89 ]
  %96 = phi %class.scoped_refptr* [ %291, %290 ], [ %92, %89 ]
  %97 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %96, i64 0, i32 0
  %98 = load %"class.net::IOBuffer"*, %"class.net::IOBuffer"** %97, align 8
  %99 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %95, i64 0, i32 0
  store %"class.net::IOBuffer"* %98, %"class.net::IOBuffer"** %99, align 8
  %100 = icmp eq %"class.net::IOBuffer"* %98, null
  br i1 %100, label %104, label %101

101:                                              ; preds = %94
  %102 = getelementptr inbounds %"class.net::IOBuffer", %"class.net::IOBuffer"* %98, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %103 = atomicrmw add i32* %102, i32 1 monotonic
  br label %104

104:                                              ; preds = %101, %94
  %105 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %96, i64 1, i32 0
  %106 = load %"class.net::IOBuffer"*, %"class.net::IOBuffer"** %105, align 8
  %107 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %95, i64 1, i32 0
  store %"class.net::IOBuffer"* %106, %"class.net::IOBuffer"** %107, align 8
  %108 = icmp eq %"class.net::IOBuffer"* %106, null
  br i1 %108, label %274, label %271

109:                                              ; preds = %290, %89
  %110 = phi %class.scoped_refptr* [ %90, %89 ], [ %292, %290 ]
  %111 = ptrtoint %class.scoped_refptr* %110 to i64
  br label %112

112:                                              ; preds = %60, %109
  %113 = phi i64 [ %61, %60 ], [ %111, %109 ]
  store i64 %113, i64* %19, align 8
  br label %247

114:                                              ; preds = %58
  %115 = load %class.scoped_refptr*, %class.scoped_refptr** %18, align 8
  %116 = icmp eq %class.scoped_refptr* %115, %59
  br i1 %116, label %137, label %117

117:                                              ; preds = %114, %135
  %118 = phi %class.scoped_refptr* [ %119, %135 ], [ %115, %114 ]
  %119 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %118, i64 -1
  %120 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %119, i64 0, i32 0
  %121 = load %"class.net::IOBuffer"*, %"class.net::IOBuffer"** %120, align 8
  %122 = icmp eq %"class.net::IOBuffer"* %121, null
  br i1 %122, label %135, label %123

123:                                              ; preds = %117
  %124 = getelementptr inbounds %"class.net::IOBuffer", %"class.net::IOBuffer"* %121, i64 0, i32 1
  %125 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %124, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %126 = atomicrmw sub i32* %125, i32 1 acq_rel
  %127 = icmp eq i32 %126, 1
  br i1 %127, label %128, label %135

128:                                              ; preds = %123
  %129 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %124, i64 -2
  %130 = bitcast %"class.base::RefCountedThreadSafe"* %129 to %"class.net::IOBuffer"*
  %131 = bitcast %"class.base::RefCountedThreadSafe"* %129 to void (%"class.net::IOBuffer"*)***
  %132 = load void (%"class.net::IOBuffer"*)**, void (%"class.net::IOBuffer"*)*** %131, align 8
  %133 = getelementptr inbounds void (%"class.net::IOBuffer"*)*, void (%"class.net::IOBuffer"*)** %132, i64 1
  %134 = load void (%"class.net::IOBuffer"*)*, void (%"class.net::IOBuffer"*)** %133, align 8
  tail call void %134(%"class.net::IOBuffer"* nonnull %130) #8
  br label %135

135:                                              ; preds = %128, %123, %117
  %136 = icmp eq %class.scoped_refptr* %119, %59
  br i1 %136, label %137, label %117

137:                                              ; preds = %135, %114
  store %class.scoped_refptr* %59, %class.scoped_refptr** %18, align 8
  br label %247

138:                                              ; preds = %3
  %139 = icmp eq i64 %12, 0
  br i1 %139, label %171, label %140

140:                                              ; preds = %138
  %141 = inttoptr i64 %12 to i8*
  %142 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %143 = load %class.scoped_refptr*, %class.scoped_refptr** %142, align 8
  %144 = icmp eq %class.scoped_refptr* %143, %16
  br i1 %144, label %168, label %145

145:                                              ; preds = %140, %163
  %146 = phi %class.scoped_refptr* [ %147, %163 ], [ %143, %140 ]
  %147 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %146, i64 -1
  %148 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %147, i64 0, i32 0
  %149 = load %"class.net::IOBuffer"*, %"class.net::IOBuffer"** %148, align 8
  %150 = icmp eq %"class.net::IOBuffer"* %149, null
  br i1 %150, label %163, label %151

151:                                              ; preds = %145
  %152 = getelementptr inbounds %"class.net::IOBuffer", %"class.net::IOBuffer"* %149, i64 0, i32 1
  %153 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %152, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %154 = atomicrmw sub i32* %153, i32 1 acq_rel
  %155 = icmp eq i32 %154, 1
  br i1 %155, label %156, label %163

156:                                              ; preds = %151
  %157 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %152, i64 -2
  %158 = bitcast %"class.base::RefCountedThreadSafe"* %157 to %"class.net::IOBuffer"*
  %159 = bitcast %"class.base::RefCountedThreadSafe"* %157 to void (%"class.net::IOBuffer"*)***
  %160 = load void (%"class.net::IOBuffer"*)**, void (%"class.net::IOBuffer"*)*** %159, align 8
  %161 = getelementptr inbounds void (%"class.net::IOBuffer"*)*, void (%"class.net::IOBuffer"*)** %160, i64 1
  %162 = load void (%"class.net::IOBuffer"*)*, void (%"class.net::IOBuffer"*)** %161, align 8
  tail call void %162(%"class.net::IOBuffer"* nonnull %158) #8
  br label %163

163:                                              ; preds = %156, %151, %145
  %164 = icmp eq %class.scoped_refptr* %147, %16
  br i1 %164, label %165, label %145

165:                                              ; preds = %163
  %166 = bitcast %"class.std::__1::vector"* %0 to i8**
  %167 = load i8*, i8** %166, align 8
  br label %168

168:                                              ; preds = %165, %140
  %169 = phi i8* [ %167, %165 ], [ %141, %140 ]
  store %class.scoped_refptr* %16, %class.scoped_refptr** %142, align 8
  tail call void @_ZdlPv(i8* %169) #9
  %170 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %170, i8 0, i64 24, i1 false) #8
  br label %171

171:                                              ; preds = %138, %168
  %172 = phi i64 [ %10, %138 ], [ 0, %168 ]
  %173 = icmp ugt i64 %7, 2305843009213693951
  br i1 %173, label %174, label %176

174:                                              ; preds = %171
  %175 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %175) #10
  unreachable

176:                                              ; preds = %171
  %177 = ashr exact i64 %172, 3
  %178 = icmp ult i64 %177, 1152921504606846975
  br i1 %178, label %179, label %186

179:                                              ; preds = %176
  %180 = ashr exact i64 %172, 2
  %181 = icmp ult i64 %180, %7
  br i1 %181, label %186, label %182

182:                                              ; preds = %179
  %183 = icmp ugt i64 %180, 2305843009213693951
  br i1 %183, label %184, label %186

184:                                              ; preds = %182
  %185 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %185) #10
  unreachable

186:                                              ; preds = %179, %176, %182
  %187 = phi i64 [ %180, %182 ], [ 2305843009213693951, %176 ], [ %7, %179 ]
  %188 = shl i64 %187, 3
  %189 = tail call i8* @_Znwm(i64 %188) #9
  %190 = bitcast i8* %189 to %class.scoped_refptr*
  %191 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %192 = bitcast %class.scoped_refptr** %191 to i8**
  store i8* %189, i8** %192, align 8
  %193 = bitcast %"class.std::__1::vector"* %0 to i8**
  store i8* %189, i8** %193, align 8
  %194 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %190, i64 %187
  store %class.scoped_refptr* %194, %class.scoped_refptr** %8, align 8
  %195 = bitcast %class.scoped_refptr** %191 to i64*
  %196 = ptrtoint i8* %189 to i64
  %197 = icmp eq %class.scoped_refptr* %1, %2
  br i1 %197, label %245, label %198

198:                                              ; preds = %186
  %199 = getelementptr %class.scoped_refptr, %class.scoped_refptr* %2, i64 -1, i32 0
  %200 = ptrtoint %"class.net::IOBuffer"** %199 to i64
  %201 = sub i64 %200, %4
  %202 = lshr i64 %201, 3
  %203 = add nuw nsw i64 %202, 1
  %204 = and i64 %203, 3
  %205 = icmp eq i64 %204, 0
  br i1 %205, label %222, label %206

206:                                              ; preds = %198, %217
  %207 = phi %class.scoped_refptr* [ %219, %217 ], [ %190, %198 ]
  %208 = phi %class.scoped_refptr* [ %218, %217 ], [ %1, %198 ]
  %209 = phi i64 [ %220, %217 ], [ %204, %198 ]
  %210 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %208, i64 0, i32 0
  %211 = load %"class.net::IOBuffer"*, %"class.net::IOBuffer"** %210, align 8
  %212 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %207, i64 0, i32 0
  store %"class.net::IOBuffer"* %211, %"class.net::IOBuffer"** %212, align 8
  %213 = icmp eq %"class.net::IOBuffer"* %211, null
  br i1 %213, label %217, label %214

214:                                              ; preds = %206
  %215 = getelementptr inbounds %"class.net::IOBuffer", %"class.net::IOBuffer"* %211, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %216 = atomicrmw add i32* %215, i32 1 monotonic
  br label %217

217:                                              ; preds = %214, %206
  %218 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %208, i64 1
  %219 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %207, i64 1
  %220 = add i64 %209, -1
  %221 = icmp eq i64 %220, 0
  br i1 %221, label %222, label %206, !llvm.loop !8

222:                                              ; preds = %217, %198
  %223 = phi %class.scoped_refptr* [ undef, %198 ], [ %219, %217 ]
  %224 = phi %class.scoped_refptr* [ %190, %198 ], [ %219, %217 ]
  %225 = phi %class.scoped_refptr* [ %1, %198 ], [ %218, %217 ]
  %226 = icmp ult i64 %201, 24
  br i1 %226, label %242, label %227

227:                                              ; preds = %222, %267
  %228 = phi %class.scoped_refptr* [ %269, %267 ], [ %224, %222 ]
  %229 = phi %class.scoped_refptr* [ %268, %267 ], [ %225, %222 ]
  %230 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %229, i64 0, i32 0
  %231 = load %"class.net::IOBuffer"*, %"class.net::IOBuffer"** %230, align 8
  %232 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %228, i64 0, i32 0
  store %"class.net::IOBuffer"* %231, %"class.net::IOBuffer"** %232, align 8
  %233 = icmp eq %"class.net::IOBuffer"* %231, null
  br i1 %233, label %237, label %234

234:                                              ; preds = %227
  %235 = getelementptr inbounds %"class.net::IOBuffer", %"class.net::IOBuffer"* %231, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %236 = atomicrmw add i32* %235, i32 1 monotonic
  br label %237

237:                                              ; preds = %234, %227
  %238 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %229, i64 1, i32 0
  %239 = load %"class.net::IOBuffer"*, %"class.net::IOBuffer"** %238, align 8
  %240 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %228, i64 1, i32 0
  store %"class.net::IOBuffer"* %239, %"class.net::IOBuffer"** %240, align 8
  %241 = icmp eq %"class.net::IOBuffer"* %239, null
  br i1 %241, label %251, label %248

242:                                              ; preds = %267, %222
  %243 = phi %class.scoped_refptr* [ %223, %222 ], [ %269, %267 ]
  %244 = ptrtoint %class.scoped_refptr* %243 to i64
  br label %245

245:                                              ; preds = %186, %242
  %246 = phi i64 [ %196, %186 ], [ %244, %242 ]
  store i64 %246, i64* %195, align 8
  br label %247

247:                                              ; preds = %112, %137, %245
  ret void

248:                                              ; preds = %237
  %249 = getelementptr inbounds %"class.net::IOBuffer", %"class.net::IOBuffer"* %239, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %250 = atomicrmw add i32* %249, i32 1 monotonic
  br label %251

251:                                              ; preds = %248, %237
  %252 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %229, i64 2, i32 0
  %253 = load %"class.net::IOBuffer"*, %"class.net::IOBuffer"** %252, align 8
  %254 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %228, i64 2, i32 0
  store %"class.net::IOBuffer"* %253, %"class.net::IOBuffer"** %254, align 8
  %255 = icmp eq %"class.net::IOBuffer"* %253, null
  br i1 %255, label %259, label %256

256:                                              ; preds = %251
  %257 = getelementptr inbounds %"class.net::IOBuffer", %"class.net::IOBuffer"* %253, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %258 = atomicrmw add i32* %257, i32 1 monotonic
  br label %259

259:                                              ; preds = %256, %251
  %260 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %229, i64 3, i32 0
  %261 = load %"class.net::IOBuffer"*, %"class.net::IOBuffer"** %260, align 8
  %262 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %228, i64 3, i32 0
  store %"class.net::IOBuffer"* %261, %"class.net::IOBuffer"** %262, align 8
  %263 = icmp eq %"class.net::IOBuffer"* %261, null
  br i1 %263, label %267, label %264

264:                                              ; preds = %259
  %265 = getelementptr inbounds %"class.net::IOBuffer", %"class.net::IOBuffer"* %261, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %266 = atomicrmw add i32* %265, i32 1 monotonic
  br label %267

267:                                              ; preds = %264, %259
  %268 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %229, i64 4
  %269 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %228, i64 4
  %270 = icmp eq %class.scoped_refptr* %268, %2
  br i1 %270, label %242, label %227

271:                                              ; preds = %104
  %272 = getelementptr inbounds %"class.net::IOBuffer", %"class.net::IOBuffer"* %106, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %273 = atomicrmw add i32* %272, i32 1 monotonic
  br label %274

274:                                              ; preds = %271, %104
  %275 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %96, i64 2, i32 0
  %276 = load %"class.net::IOBuffer"*, %"class.net::IOBuffer"** %275, align 8
  %277 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %95, i64 2, i32 0
  store %"class.net::IOBuffer"* %276, %"class.net::IOBuffer"** %277, align 8
  %278 = icmp eq %"class.net::IOBuffer"* %276, null
  br i1 %278, label %282, label %279

279:                                              ; preds = %274
  %280 = getelementptr inbounds %"class.net::IOBuffer", %"class.net::IOBuffer"* %276, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %281 = atomicrmw add i32* %280, i32 1 monotonic
  br label %282

282:                                              ; preds = %279, %274
  %283 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %96, i64 3, i32 0
  %284 = load %"class.net::IOBuffer"*, %"class.net::IOBuffer"** %283, align 8
  %285 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %95, i64 3, i32 0
  store %"class.net::IOBuffer"* %284, %"class.net::IOBuffer"** %285, align 8
  %286 = icmp eq %"class.net::IOBuffer"* %284, null
  br i1 %286, label %290, label %287

287:                                              ; preds = %282
  %288 = getelementptr inbounds %"class.net::IOBuffer", %"class.net::IOBuffer"* %284, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %289 = atomicrmw add i32* %288, i32 1 monotonic
  br label %290

290:                                              ; preds = %287, %282
  %291 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %96, i64 4
  %292 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %95, i64 4
  %293 = icmp eq %class.scoped_refptr* %291, %2
  br i1 %293, label %109, label %94
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorImNS_9allocatorImEEE6assignIPmEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleImNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector.2"*, i64*, i64*) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint i64* %2 to i64
  %5 = ptrtoint i64* %1 to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 3
  %8 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast i64** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector.2"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 3
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to i64*
  br i1 %15, label %49, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %0, i64 0, i32 0, i32 1
  %19 = bitcast i64** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = ashr exact i64 %21, 3
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds i64, i64* %1, i64 %22
  %25 = select i1 %23, i64* %24, i64* %2
  %26 = ptrtoint i64* %25 to i64
  %27 = sub i64 %26, %5
  %28 = ashr exact i64 %27, 3
  %29 = icmp eq i64 %27, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %17
  %31 = inttoptr i64 %12 to i8*
  %32 = bitcast i64* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %27, i1 false) #8
  br label %33

33:                                               ; preds = %17, %30
  br i1 %23, label %34, label %47

34:                                               ; preds = %33
  %35 = load i64, i64* %19, align 8
  %36 = sub i64 %4, %26
  %37 = icmp sgt i64 %36, 0
  br i1 %37, label %38, label %45

38:                                               ; preds = %34
  %39 = lshr exact i64 %36, 3
  %40 = inttoptr i64 %35 to i8*
  %41 = bitcast i64* %25 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 %36, i1 false) #8
  %42 = inttoptr i64 %35 to i64*
  %43 = getelementptr inbounds i64, i64* %42, i64 %39
  %44 = ptrtoint i64* %43 to i64
  br label %45

45:                                               ; preds = %34, %38
  %46 = phi i64 [ %44, %38 ], [ %35, %34 ]
  store i64 %46, i64* %19, align 8
  br label %90

47:                                               ; preds = %33
  %48 = getelementptr inbounds i64, i64* %16, i64 %28
  store i64* %48, i64** %18, align 8
  br label %90

49:                                               ; preds = %3
  %50 = icmp eq i64 %12, 0
  br i1 %50, label %56, label %51

51:                                               ; preds = %49
  %52 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %0, i64 0, i32 0, i32 1
  %53 = bitcast i64** %52 to i64*
  store i64 %12, i64* %53, align 8
  %54 = inttoptr i64 %12 to i8*
  tail call void @_ZdlPv(i8* %54) #9
  %55 = bitcast %"class.std::__1::vector.2"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %55, i8 0, i64 24, i1 false) #8
  br label %56

56:                                               ; preds = %49, %51
  %57 = phi i64 [ %10, %49 ], [ 0, %51 ]
  %58 = icmp ugt i64 %7, 2305843009213693951
  br i1 %58, label %59, label %61

59:                                               ; preds = %56
  %60 = bitcast %"class.std::__1::vector.2"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %60) #10
  unreachable

61:                                               ; preds = %56
  %62 = ashr exact i64 %57, 3
  %63 = icmp ult i64 %62, 1152921504606846975
  br i1 %63, label %64, label %71

64:                                               ; preds = %61
  %65 = ashr exact i64 %57, 2
  %66 = icmp ult i64 %65, %7
  br i1 %66, label %71, label %67

67:                                               ; preds = %64
  %68 = icmp ugt i64 %65, 2305843009213693951
  br i1 %68, label %69, label %71

69:                                               ; preds = %67
  %70 = bitcast %"class.std::__1::vector.2"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %70) #10
  unreachable

71:                                               ; preds = %64, %61, %67
  %72 = phi i64 [ %65, %67 ], [ 2305843009213693951, %61 ], [ %7, %64 ]
  %73 = shl i64 %72, 3
  %74 = tail call i8* @_Znwm(i64 %73) #9
  %75 = bitcast i8* %74 to i64*
  %76 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %0, i64 0, i32 0, i32 1
  %77 = bitcast i64** %76 to i8**
  store i8* %74, i8** %77, align 8
  %78 = bitcast %"class.std::__1::vector.2"* %0 to i8**
  store i8* %74, i8** %78, align 8
  %79 = getelementptr inbounds i64, i64* %75, i64 %72
  store i64* %79, i64** %8, align 8
  %80 = bitcast i64** %76 to i64*
  %81 = ptrtoint i8* %74 to i64
  %82 = icmp sgt i64 %6, 0
  br i1 %82, label %83, label %88

83:                                               ; preds = %71
  %84 = lshr exact i64 %6, 3
  %85 = bitcast i64* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %74, i8* align 8 %85, i64 %6, i1 false) #8
  %86 = getelementptr inbounds i64, i64* %75, i64 %84
  %87 = ptrtoint i64* %86 to i64
  br label %88

88:                                               ; preds = %71, %83
  %89 = phi i64 [ %87, %83 ], [ %81, %71 ]
  store i64 %89, i64* %80, align 8
  br label %90

90:                                               ; preds = %45, %47, %88
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !3}
!8 = distinct !{!8, !3}
