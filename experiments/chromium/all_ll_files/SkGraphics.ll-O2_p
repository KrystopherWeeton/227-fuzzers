; ModuleID = '../../third_party/skia/src/core/SkGraphics.cpp'
source_filename = "../../third_party/skia/src/core/SkGraphics.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkTraceMemoryDump = type opaque
%class.SkStrikeCache = type { %class.SkStrikeForGPUCacheInterface, %class.SkMutex, %"class.SkStrikeCache::Strike"*, %"class.SkStrikeCache::Strike"*, %class.SkTHashTable.33, i64, i64, i32, i32 }
%class.SkStrikeForGPUCacheInterface = type { i32 (...)** }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.SkOnce = type { %"struct.std::__1::atomic.1" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i8 }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%"class.SkStrikeCache::Strike" = type <{ %class.SkRefCnt.base, [4 x i8], %class.SkStrikeForGPU, %class.SkStrikeCache*, %"class.SkStrikeCache::Strike"*, %"class.SkStrikeCache::Strike"*, %class.SkScalerCache, %"class.std::__1::unique_ptr.27", i64, i8, [7 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%class.SkStrikeForGPU = type { i32 (...)** }
%class.SkScalerCache = type { %class.SkAutoDescriptor, %"class.std::__1::unique_ptr", %struct.SkFontMetrics, %struct.SkGlyphPositionRoundingSpec, %class.SkMutex, %class.SkTHashMap, %"class.std::__1::vector", %class.SkArenaAlloc }
%class.SkAutoDescriptor = type { %class.SkDescriptor*, [120 x i8] }
%class.SkDescriptor = type { i32, i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.SkScalerContext* }
%class.SkScalerContext = type { i32 (...)**, %struct.SkScalerContextRec, %class.sk_sp, %class.sk_sp.6, %class.sk_sp.7, i8, %class.SkTMaskPreBlend }
%struct.SkScalerContextRec = type { i32, float, float, float, [2 x [2 x float]], float, float, i32, i8, i8, i8, i8, i8, i8, i16 }
%class.sk_sp = type { %class.SkTypeface* }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic" }
%class.SkFontStyle = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.sk_sp.6 = type { %class.SkPathEffect* }
%class.SkPathEffect = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.sk_sp.7 = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkTMaskPreBlend = type { %class.sk_sp.8, i8*, i8*, i8* }
%class.sk_sp.8 = type { %class.SkTMaskGamma* }
%class.SkTMaskGamma = type { %class.SkRefCnt.base, [8 x [256 x i8]], i8, [3 x i8] }
%struct.SkFontMetrics = type { i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float }
%struct.SkGlyphPositionRoundingSpec = type { %struct.SkPoint, %struct.SkIPoint, %struct.SkIPoint }
%struct.SkPoint = type { float, float }
%struct.SkIPoint = type { i32, i32 }
%class.SkTHashMap = type { %class.SkTHashTable }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr.10" }
%"class.std::__1::unique_ptr.10" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"struct.SkTHashTable<SkTHashMap<SkPackedGlyphID, SkGlyphDigest, SkGoodHash>::Pair, SkPackedGlyphID, SkTHashMap<SkPackedGlyphID, SkGlyphDigest, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<SkPackedGlyphID, SkGlyphDigest, SkGoodHash>::Pair, SkPackedGlyphID, SkTHashMap<SkPackedGlyphID, SkGlyphDigest, SkGoodHash>::Pair>::Slot" = type { %"struct.SkTHashMap<SkPackedGlyphID, SkGlyphDigest, SkGoodHash>::Pair", i32 }
%"struct.SkTHashMap<SkPackedGlyphID, SkGlyphDigest, SkGoodHash>::Pair" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { %struct.SkPackedGlyphID, %class.SkGlyphDigest }
%struct.SkPackedGlyphID = type { i32 }
%class.SkGlyphDigest = type { [3 x i8], i8 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %class.SkGlyph**, %class.SkGlyph**, %"class.std::__1::__compressed_pair.24" }
%class.SkGlyph = type { i16, i16, i16, i16, i8*, %"struct.SkGlyph::PathData"*, float, float, i8, i8, %struct.SkPackedGlyphID }
%"struct.SkGlyph::PathData" = type <{ %"struct.SkGlyph::Intercept"*, %class.SkPath, i8, [7 x i8] }>
%"struct.SkGlyph::Intercept" = type { %"struct.SkGlyph::Intercept"*, [2 x float], [2 x float] }
%class.SkPath = type <{ %class.sk_sp.16, i32, %"struct.std::__1::atomic.1", %"struct.std::__1::atomic.1", i8, i8 }>
%class.sk_sp.16 = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.17, %class.SkTDArray.18, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%class.SkTDArray.17 = type { i8*, i32, i32 }
%class.SkTDArray.18 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.19 }
%class.SkTDArray.19 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.20", [3 x i8] }
%"struct.std::__1::atomic.20" = type { %"struct.std::__1::__atomic_base.21" }
%"struct.std::__1::__atomic_base.21" = type { %"struct.std::__1::__cxx_atomic_impl.22" }
%"struct.std::__1::__cxx_atomic_impl.22" = type { %"struct.std::__1::__cxx_atomic_base_impl.23" }
%"struct.std::__1::__cxx_atomic_base_impl.23" = type { i8 }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %class.SkGlyph** }
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%class.SkFibBlockSizes = type { i32 }
%"class.std::__1::unique_ptr.27" = type { %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %class.SkStrikePinner* }
%class.SkStrikePinner = type { i32 (...)** }
%class.SkTHashTable.33 = type { i32, i32, %class.SkAutoTArray.34 }
%class.SkAutoTArray.34 = type { %"class.std::__1::unique_ptr.35" }
%"class.std::__1::unique_ptr.35" = type { %"class.std::__1::__compressed_pair.36" }
%"class.std::__1::__compressed_pair.36" = type { %"struct.std::__1::__compressed_pair_elem.37" }
%"struct.std::__1::__compressed_pair_elem.37" = type { %"struct.SkTHashTable<sk_sp<SkStrikeCache::Strike>, SkDescriptor, SkStrikeCache::StrikeTraits>::Slot"* }
%"struct.SkTHashTable<sk_sp<SkStrikeCache::Strike>, SkDescriptor, SkStrikeCache::StrikeTraits>::Slot" = type opaque

@gSkVMAllowJIT = external local_unnamed_addr global i8, align 1
@_ZL18kFontCacheLimitStr = internal constant [17 x i8] c"font-cache-limit\00", align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10SkGraphics4InitEv() local_unnamed_addr #0 align 2 {
  tail call void @_ZN5SkCpu20CacheRuntimeFeaturesEv() #6
  tail call void @_ZN6SkOpts4InitEv() #6
  ret void
}

declare void @_ZN5SkCpu20CacheRuntimeFeaturesEv() local_unnamed_addr #1

declare void @_ZN6SkOpts4InitEv() local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10SkGraphics20DumpMemoryStatisticsEP17SkTraceMemoryDump(%class.SkTraceMemoryDump*) local_unnamed_addr #0 align 2 {
  tail call void @_ZN15SkResourceCache20DumpMemoryStatisticsEP17SkTraceMemoryDump(%class.SkTraceMemoryDump* %0) #6
  tail call void @_ZN13SkStrikeCache20DumpMemoryStatisticsEP17SkTraceMemoryDump(%class.SkTraceMemoryDump* %0) #6
  ret void
}

declare void @_ZN15SkResourceCache20DumpMemoryStatisticsEP17SkTraceMemoryDump(%class.SkTraceMemoryDump*) local_unnamed_addr #1

declare void @_ZN13SkStrikeCache20DumpMemoryStatisticsEP17SkTraceMemoryDump(%class.SkTraceMemoryDump*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10SkGraphics14PurgeAllCachesEv() local_unnamed_addr #0 align 2 {
  %1 = tail call %class.SkStrikeCache* @_ZN13SkStrikeCache17GlobalStrikeCacheEv() #6
  tail call void @_ZN13SkStrikeCache8purgeAllEv(%class.SkStrikeCache* %1) #6
  tail call void @_ZN15SkTypefaceCache8PurgeAllEv() #6
  tail call void @_ZN10SkGraphics18PurgeResourceCacheEv() #6
  tail call void @_ZN18SkImageFilter_Base10PurgeCacheEv() #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10SkGraphics14PurgeFontCacheEv() local_unnamed_addr #0 align 2 {
  %1 = tail call %class.SkStrikeCache* @_ZN13SkStrikeCache17GlobalStrikeCacheEv() #6
  tail call void @_ZN13SkStrikeCache8purgeAllEv(%class.SkStrikeCache* %1) #6
  tail call void @_ZN15SkTypefaceCache8PurgeAllEv() #6
  ret void
}

declare void @_ZN10SkGraphics18PurgeResourceCacheEv() local_unnamed_addr #1

declare void @_ZN18SkImageFilter_Base10PurgeCacheEv() local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10SkGraphics8SetFlagsEPKc(i8*) local_unnamed_addr #0 align 2 {
  %2 = icmp eq i8* %0, null
  br i1 %2, label %36, label %3

3:                                                ; preds = %1, %34
  %4 = phi i8* [ %35, %34 ], [ %0, %1 ]
  %5 = tail call i64 @strlen(i8* %4) #7
  %6 = getelementptr inbounds i8, i8* %4, i64 %5
  %7 = tail call i8* @strchr(i8* %4, i32 61) #7
  %8 = icmp ne i8* %7, null
  %9 = icmp ugt i8* %6, %7
  %10 = and i1 %8, %9
  %11 = select i1 %10, i8* %7, i8* %6
  %12 = tail call i8* @strchr(i8* %4, i32 59) #7
  %13 = icmp ne i8* %12, null
  %14 = icmp ugt i8* %11, %12
  %15 = and i1 %13, %14
  %16 = select i1 %15, i8* %12, i8* %11
  %17 = ptrtoint i8* %16 to i64
  %18 = ptrtoint i8* %4 to i64
  %19 = sub i64 %17, %18
  %20 = icmp eq i64 %19, 16
  br i1 %20, label %21, label %34

21:                                               ; preds = %3
  %22 = tail call i32 @strncmp(i8* %4, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @_ZL18kFontCacheLimitStr, i64 0, i64 0), i64 16) #7
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %34

24:                                               ; preds = %21
  br i1 %8, label %25, label %30

25:                                               ; preds = %24
  %26 = getelementptr inbounds i8, i8* %7, i64 1
  %27 = tail call i64 @strtol(i8* nocapture %26, i8** null, i32 10) #6
  %28 = shl i64 %27, 32
  %29 = ashr exact i64 %28, 32
  br label %30

30:                                               ; preds = %25, %24
  %31 = phi i64 [ %29, %25 ], [ 0, %24 ]
  %32 = tail call %class.SkStrikeCache* @_ZN13SkStrikeCache17GlobalStrikeCacheEv() #6
  %33 = tail call i64 @_ZN13SkStrikeCache17setCacheSizeLimitEm(%class.SkStrikeCache* %32, i64 %31) #6
  br label %34

34:                                               ; preds = %21, %3, %30
  %35 = getelementptr inbounds i8, i8* %12, i64 1
  br i1 %13, label %3, label %36

36:                                               ; preds = %34, %1
  ret void
}

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i8* @strchr(i8*, i32) local_unnamed_addr #3

; Function Attrs: nofree nounwind readonly
declare i32 @strncmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN10SkGraphics17GetFontCacheLimitEv() local_unnamed_addr #0 align 2 {
  %1 = tail call %class.SkStrikeCache* @_ZN13SkStrikeCache17GlobalStrikeCacheEv() #6
  %2 = tail call i64 @_ZNK13SkStrikeCache17getCacheSizeLimitEv(%class.SkStrikeCache* %1) #6
  ret i64 %2
}

declare %class.SkStrikeCache* @_ZN13SkStrikeCache17GlobalStrikeCacheEv() local_unnamed_addr #1

declare i64 @_ZNK13SkStrikeCache17getCacheSizeLimitEv(%class.SkStrikeCache*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN10SkGraphics17SetFontCacheLimitEm(i64) local_unnamed_addr #0 align 2 {
  %2 = tail call %class.SkStrikeCache* @_ZN13SkStrikeCache17GlobalStrikeCacheEv() #6
  %3 = tail call i64 @_ZN13SkStrikeCache17setCacheSizeLimitEm(%class.SkStrikeCache* %2, i64 %0) #6
  ret i64 %3
}

declare i64 @_ZN13SkStrikeCache17setCacheSizeLimitEm(%class.SkStrikeCache*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN10SkGraphics16GetFontCacheUsedEv() local_unnamed_addr #0 align 2 {
  %1 = tail call %class.SkStrikeCache* @_ZN13SkStrikeCache17GlobalStrikeCacheEv() #6
  %2 = tail call i64 @_ZNK13SkStrikeCache18getTotalMemoryUsedEv(%class.SkStrikeCache* %1) #6
  ret i64 %2
}

declare i64 @_ZNK13SkStrikeCache18getTotalMemoryUsedEv(%class.SkStrikeCache*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN10SkGraphics22GetFontCacheCountLimitEv() local_unnamed_addr #0 align 2 {
  %1 = tail call %class.SkStrikeCache* @_ZN13SkStrikeCache17GlobalStrikeCacheEv() #6
  %2 = tail call i32 @_ZNK13SkStrikeCache18getCacheCountLimitEv(%class.SkStrikeCache* %1) #6
  ret i32 %2
}

declare i32 @_ZNK13SkStrikeCache18getCacheCountLimitEv(%class.SkStrikeCache*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN10SkGraphics22SetFontCacheCountLimitEi(i32) local_unnamed_addr #0 align 2 {
  %2 = tail call %class.SkStrikeCache* @_ZN13SkStrikeCache17GlobalStrikeCacheEv() #6
  %3 = tail call i32 @_ZN13SkStrikeCache18setCacheCountLimitEi(%class.SkStrikeCache* %2, i32 %0) #6
  ret i32 %3
}

declare i32 @_ZN13SkStrikeCache18setCacheCountLimitEi(%class.SkStrikeCache*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN10SkGraphics21GetFontCacheCountUsedEv() local_unnamed_addr #0 align 2 {
  %1 = tail call %class.SkStrikeCache* @_ZN13SkStrikeCache17GlobalStrikeCacheEv() #6
  %2 = tail call i32 @_ZNK13SkStrikeCache17getCacheCountUsedEv(%class.SkStrikeCache* %1) #6
  ret i32 %2
}

declare i32 @_ZNK13SkStrikeCache17getCacheCountUsedEv(%class.SkStrikeCache*) local_unnamed_addr #1

declare void @_ZN13SkStrikeCache8purgeAllEv(%class.SkStrikeCache*) local_unnamed_addr #1

declare void @_ZN15SkTypefaceCache8PurgeAllEv() local_unnamed_addr #1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN10SkGraphics8AllowJITEv() local_unnamed_addr #4 align 2 {
  store i8 1, i8* @gSkVMAllowJIT, align 1
  ret void
}

; Function Attrs: nofree nounwind
declare i64 @strtol(i8* readonly, i8** nocapture, i32) local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
