; ModuleID = '../../third_party/dawn/src/dawn_native/opengl/QueueGL.cpp'
source_filename = "../../third_party/dawn/src/dawn_native/opengl/QueueGL.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.dawn_native::opengl::Queue" = type { %"class.dawn_native::QueueBase" }
%"class.dawn_native::QueueBase" = type { %"class.dawn_native::ObjectBase", %class.SerialQueue }
%"class.dawn_native::ObjectBase" = type { %class.RefCounted, %"class.dawn_native::DeviceBase"* }
%class.RefCounted = type { i32 (...)**, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.dawn_native::DeviceBase" = type { %class.RefCounted, i64, i64, i64, void (i32, i8*, i8*)*, i8*, void (i8*, i8*)*, i8*, %"class.std::__1::unique_ptr", %class.Ref, %"class.dawn_native::AdapterBase"*, %"class.std::__1::unique_ptr.2", %class.Ref.8, %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.16", %class.Ref.22, %"class.std::__1::unique_ptr.24", i32, %"struct.std::__1::array", %"struct.dawn_native::TogglesSet", %"struct.dawn_native::TogglesSet", i64, %"struct.dawn_native::ExtensionsSet", %"class.std::__1::unique_ptr.33", %"class.std::__1::unique_ptr.39" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.dawn_native::ErrorScopeStack"* }
%"class.dawn_native::ErrorScopeStack" = type opaque
%class.Ref = type { %class.RefBase }
%class.RefBase = type { %"class.dawn_native::InstanceBase"* }
%"class.dawn_native::InstanceBase" = type opaque
%"class.dawn_native::AdapterBase" = type opaque
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.dawn_native::DeviceBase::Caches"* }
%"struct.dawn_native::DeviceBase::Caches" = type opaque
%class.Ref.8 = type { %class.RefBase.9 }
%class.RefBase.9 = type { %"class.dawn_native::BindGroupLayoutBase"* }
%"class.dawn_native::BindGroupLayoutBase" = type opaque
%"class.std::__1::unique_ptr.10" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"class.dawn_native::DynamicUploader"* }
%"class.dawn_native::DynamicUploader" = type opaque
%"class.std::__1::unique_ptr.16" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"class.dawn_native::CallbackTaskManager"* }
%"class.dawn_native::CallbackTaskManager" = type opaque
%class.Ref.22 = type { %class.RefBase.23 }
%class.RefBase.23 = type { %"class.dawn_native::QueueBase"* }
%"class.std::__1::unique_ptr.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"struct.dawn_native::DeviceBase::DeprecationWarnings"* }
%"struct.dawn_native::DeviceBase::DeprecationWarnings" = type opaque
%"struct.std::__1::array" = type { [55 x %"struct.dawn_native::Format"] }
%"struct.dawn_native::Format" = type { i32, i8, i8, i8, i8, i8, %"struct.std::__1::array.30" }
%"struct.std::__1::array.30" = type { [3 x %"struct.dawn_native::AspectInfo"] }
%"struct.dawn_native::AspectInfo" = type { %"struct.dawn_native::TexelBlockInfo", i32, i8, i32 }
%"struct.dawn_native::TexelBlockInfo" = type { i32, i32, i32 }
%"struct.dawn_native::TogglesSet" = type { %"class.std::__1::bitset" }
%"class.std::__1::bitset" = type { %"class.std::__1::__bitset" }
%"class.std::__1::__bitset" = type { i64 }
%"struct.dawn_native::ExtensionsSet" = type { %"class.std::__1::bitset.31" }
%"class.std::__1::bitset.31" = type { %"class.std::__1::__bitset.32" }
%"class.std::__1::__bitset.32" = type { i64 }
%"class.std::__1::unique_ptr.33" = type { %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"struct.dawn_native::InternalPipelineStore"* }
%"struct.dawn_native::InternalPipelineStore" = type opaque
%"class.std::__1::unique_ptr.39" = type { %"class.std::__1::__compressed_pair.40" }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"class.dawn_native::PersistentCache"* }
%"class.dawn_native::PersistentCache" = type opaque
%class.SerialQueue = type { %class.SerialStorage }
%class.SerialStorage = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.45" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::__compressed_pair_elem.46" = type { %"struct.std::__1::pair"* }
%"class.dawn_native::opengl::Device" = type <{ %"class.dawn_native::DeviceBase", %"struct.dawn_native::opengl::OpenGLFunctions", %"class.std::__1::queue", %"struct.std::__1::array.77", [4 x i8] }>
%"struct.dawn_native::opengl::OpenGLFunctions" = type { %"struct.dawn_native::opengl::OpenGLFunctionsBase", %"struct.dawn_native::opengl::OpenGLVersion", [4 x i8], %"class.std::__1::unordered_set" }
%"struct.dawn_native::opengl::OpenGLFunctionsBase" = type { void (i32)*, void (i32, i32)*, void (i32, i32, i8*)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32)*, void (float, float, float, float)*, void (i32)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i64, i8*, i32)*, void (i32, i64, i64, i8*)*, i32 (i32)*, void (i32)*, void (float, float, float, float)*, void (float)*, void (i32)*, void (i8, i8, i8, i8)*, void (i32)*, void (i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, i32 ()*, i32 (i32)*, void (i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32)*, void (i32, i32*)*, void (i32)*, void (i32, i32*)*, void (i32)*, void (i8)*, void (float, float)*, void (i32, i32)*, void (i32)*, void (i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i8*)*, void (i32)*, void (i32)*, void ()*, void ()*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32)*, void (i32, i32*)*, void (i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32*, i32*)*, i32 (i32, i8*)*, void (i32, i8*)*, void (i32, i32, i32*)*, i32 ()*, void (i32, float*)*, void (i32, i32, i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32*, i32*)*, void (i32, i32, i32*, i8*)*, i8* (i32)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, i32 (i32, i8*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, i8**)*, void (i32, i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, void (float)*, void (i32)*, void (i32, i32)*, void (float, float)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void ()*, void (i32, i32, i32, i32)*, void (float, i8)*, void (i32, i32, i32, i32)*, void (i32, i32*, i32, i8*, i32)*, void (i32, i32, i8**, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, float)*, void (i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, float)*, void (i32, i32, float*)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32)*, void (i32)*, void (i32, float)*, void (i32, float*)*, void (i32, float, float)*, void (i32, float*)*, void (i32, float, float, float)*, void (i32, float*)*, void (i32, float, float, float, float)*, void (i32, float*)*, void (i32, i32, i32, i8, i32, i8*)*, void (i32, i32, i32, i32)*, void (i32)*, void (i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32*)*, void (i32, i32*)*, i8 (i32)*, void (i32, i32)*, void (i32)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, i8 (i32)*, void (i32, i32, i8**)*, void (i32, i32*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, i8* (i32, i64, i64, i32)*, void (i32, i64, i64)*, void (i32)*, void (i32, i32*)*, void (i32, i32*)*, i8 (i32)*, void (i32, i32, i32*)*, void (i32)*, void ()*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i32)*, void (i32, i32, i8**, i32)*, void (i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32*)*, i32 (i32, i8*)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, float*)*, void (i32, i32, float, i32)*, i8* (i32, i32)*, void (i32, i32, i64, i64, i64)*, void (i32, i32, i8**, i32*)*, void (i32, i32, i32*, i32, i32*)*, i32 (i32, i8*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*, i8*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i8*, i32)*, %struct.__GLsync* (i32, i32)*, i8 (%struct.__GLsync*)*, void (%struct.__GLsync*)*, i32 (%struct.__GLsync*, i32, i64)*, void (%struct.__GLsync*, i32, i64)*, void (i32, i64*)*, void (%struct.__GLsync*, i32, i32, i32*, i32*)*, void (i32, i32, i64*)*, void (i32, i32, i64*)*, void (i32, i32*)*, void (i32, i32*)*, i8 (i32)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, float)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, float*)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32*)*, i8 (i32)*, void ()*, void ()*, void (i32, i32, i32*, i32*, i8*)*, void (i32, i32, i8*, i32)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32*)*, void (i32, i32, i32)*, void (i64)*, void (i32, i8*)*, void (i32, i32, i8*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*)*, i32 (i32, i32, i8*)*, void (i32, i32, i32, i32, i32*, i8*)*, void (i32, i32, i32, i32, i32*, i32, i32*, i32*)*, i32 (i32, i32, i8*)*, void (i32, i32, i32)*, void (i32, i32)*, i32 (i32, i32, i8**)*, void (i32)*, void (i32, i32*)*, void (i32, i32*)*, i8 (i32)*, void (i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, float)*, void (i32, i32, float, float)*, void (i32, i32, float, float, float)*, void (i32, i32, float, float, float, float)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32, i8, i32, i32, i32)*, void (i32, i32, i8*)*, void (i32)*, void (i32)*, void (i32, i32, i32, i32, i32, i8)*, void (i32, i32, float*)*, void (i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, float*)*, void (i32, i32, i64, i32)*, void (i32, i32, i32, i8, i32)*, void (i32, i32, i32, i32)*, void (i32, i32)*, void (i32, i32)*, void ()*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32*, i8)*, void (i32, i32, i32, i32, i32, i8*)*, void (void (i32, i32, i32, i32, i32, i8*, i8*)*, i8*)*, i32 (i32, i32, i32*, i32*, i32*, i32*, i32*, i8*)*, void (i32, i32, i32, i8*)*, void ()*, void (i32, i32, i32, i8*)*, void (i32, i32, i32, i32*, i8*)*, void (i8*, i32, i8*)*, void (i8*, i32, i32*, i8*)*, void (i32, i8**)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i8, i8, i8, i8)*, i8 (i32, i32)*, void (i32, i32, i32, i8*, i32)*, void (i32, i32, i32, i32, i32, i8*, i32)*, void (i32, i32, i32, i8*, i32, i32)*, void (i32, i32, i32, i32)*, void (float, float, float, float, float, float, float, float)*, i32 ()*, void (i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (float)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i32, i32, i32, i32, i8)*, void (float)*, void (i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32)*, void (double)*, void (i32)*, void (i32, float)*, void (i32, double*)*, void (i32, i32, i32, i32, i8*)*, void (double, double)*, void (i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i8*)*, void (i32, i32*, i32*, i32)*, void (i32, i32*, i32, i8**, i32)*, void (i32, float)*, void (i32, float*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32, i32*)*, void (i32, i64, i64, i8*)*, i8* (i32, i32)*, void (i32, i32, double*)*, void (i32, double)*, void (i32, double*)*, void (i32, i16)*, void (i32, i16*)*, void (i32, double, double)*, void (i32, double*)*, void (i32, i16, i16)*, void (i32, i16*)*, void (i32, double, double, double)*, void (i32, double*)*, void (i32, i16, i16, i16)*, void (i32, i16*)*, void (i32, i8*)*, void (i32, i32*)*, void (i32, i16*)*, void (i32, i8, i8, i8, i8)*, void (i32, i8*)*, void (i32, i32*)*, void (i32, i16*)*, void (i32, i8*)*, void (i32, double, double, double, double)*, void (i32, double*)*, void (i32, i32*)*, void (i32, i16, i16, i16, i16)*, void (i32, i16*)*, void (i32, i8*)*, void (i32, i32*)*, void (i32, i16*)*, void (i32, i32)*, void (i32, i32)*, void ()*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i8*)*, void (i32, i16*)*, void (i32, i8*)*, void (i32, i16*)*, void (i32, i32, i8*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32)*, void (i32, i32, i32, i32*, i8*)*, void (i32, i32*, i32, i8**, i32, i32*)*, void (i32)*, void (i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i8*)*, i32 (i32, i8*)*, void (i32, i32)*, void (i32, i32, i64*)*, void (i32, i32, i64*)*, void (i32, i32, i8, i32)*, void (i32, i32, i8, i32*)*, void (i32, i32, i8, i32)*, void (i32, i32, i8, i32*)*, void (i32, i32, i8, i32)*, void (i32, i32, i8, i32*)*, void (i32, i32, i8, i32)*, void (i32, i32, i8, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, double)*, void (i32, double, double)*, void (i32, double, double, double)*, void (i32, double, double, double, double)*, void (i32, i32, double*)*, void (i32, i32, double*)*, void (i32, i32, double*)*, void (i32, i32, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, double*)*, i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)*, void (i32, i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32*, i8*)*, void (i32, i32, i32, i32, i32*, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, float*)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, double)*, void (i32, i32, i32, double*)*, void (i32, i32, double, double)*, void (i32, i32, i32, double*)*, void (i32, i32, double, double, double)*, void (i32, i32, i32, double*)*, void (i32, i32, double, double, double, double)*, void (i32, i32, i32, double*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, double*)*, void (i32, double)*, void (i32, double, double)*, void (i32, double, double, double)*, void (i32, double, double, double, double)*, void (i32, double*)*, void (i32, double*)*, void (i32, double*)*, void (i32, double*)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, double*)*, void (i32, i32, float*)*, void (i32, float, float, float, float)*, void (i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32, double*)*, void (i32, double, double)*, void (i32, i32, float*)*, void (i32, i32, double*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i8*, i32, i32)*, void (i32, i32, i32, i8*, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i64, i64, i32, i32, i8*)*, void (i32, i32, i32, i32, i64*)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32)*, void (i32, i64, i64)*, void (i32)*, void (i32, i8*, i32, i32)*, void (i32, i32, i8*, i32, i32)*, i32 (i32, i32, i8*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i64, i8*, i32)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*, i64*, i64*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i64*, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i64*)*, void (i32, i32*)*, void (i32, i64, i8*, i32)*, void (i32, i64, i8*, i32)*, void (i32, i64, i64, i8*)*, void (i32, i32, i64, i64, i64)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i64, i64, i32, i32, i8*)*, i8* (i32, i32)*, i8* (i32, i64, i64, i32)*, i8 (i32)*, void (i32, i64, i64)*, void (i32, i32, i32*)*, void (i32, i32, i64*)*, void (i32, i32, i8**)*, void (i32, i64, i64, i8*)*, void (i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, float, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, i32 (i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, float)*, void (i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32)*, void (i32, i32)*, void (i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i8*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i64, i32)*, void (i32, i32, i32, i32*, i64*, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32, i8, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i64*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i64)*, void (i32, i32, i32, i64)*, void (i32, i32, i32, i64)*, void (i32, i32, i32, i64)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, double*)*, void (i32, i32, i32, double*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, i16*)*, void (i32, i8*)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i8*, i32, i8*, i8*)*, void (i32, i8, i32, i32, i32, i8*)*, void (i32, i8, i32, i32, i32, i8*)*, void ()*, void (i32, i8*, i32, i32*, i32*)*, void (i32, i8*, i64, i32, i32)*, void (i32, i32, i8*, i64, i32, i32)*, void (float, float, float)* }
%struct.__GLsync = type opaque
%"struct.dawn_native::opengl::OpenGLVersion" = type { i32, i32, i32 }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.48", %"class.std::__1::__compressed_pair.57", %"class.std::__1::__compressed_pair.62", %"class.std::__1::__compressed_pair.64", [4 x i8] }>
%"class.std::__1::unique_ptr.48" = type { %"class.std::__1::__compressed_pair.49" }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.50", %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::__compressed_pair_elem.50" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.51" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"struct.std::__1::__compressed_pair_elem.53" = type { i64 }
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"struct.std::__1::__compressed_pair_elem.58" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { float }
%"class.std::__1::queue" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.73" }
%"struct.std::__1::__split_buffer" = type { %"struct.std::__1::pair.67"**, %"struct.std::__1::pair.67"**, %"struct.std::__1::pair.67"**, %"class.std::__1::__compressed_pair.68" }
%"struct.std::__1::pair.67" = type opaque
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %"struct.std::__1::pair.67"** }
%"class.std::__1::__compressed_pair.73" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"struct.std::__1::array.77" = type { [55 x %"struct.dawn_native::opengl::GLFormat"] }
%"struct.dawn_native::opengl::GLFormat" = type { i32, i32, i32, i8, i32 }
%class.Result = type { %"class.std::__1::unique_ptr.194" }
%"class.std::__1::unique_ptr.194" = type { %"class.std::__1::__compressed_pair.195" }
%"class.std::__1::__compressed_pair.195" = type { %"struct.std::__1::__compressed_pair_elem.196" }
%"struct.std::__1::__compressed_pair_elem.196" = type { %"class.dawn_native::ErrorData"* }
%"class.dawn_native::ErrorData" = type { i32, %"class.std::__1::basic_string", %"class.std::__1::vector.202" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.197" }
%"class.std::__1::__compressed_pair.197" = type { %"struct.std::__1::__compressed_pair_elem.198" }
%"struct.std::__1::__compressed_pair_elem.198" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector.202" = type { %"class.std::__1::__vector_base.203" }
%"class.std::__1::__vector_base.203" = type { %"struct.dawn_native::ErrorData::BacktraceRecord"*, %"struct.dawn_native::ErrorData::BacktraceRecord"*, %"class.std::__1::__compressed_pair.204" }
%"struct.dawn_native::ErrorData::BacktraceRecord" = type { i8*, i8*, i32 }
%"class.std::__1::__compressed_pair.204" = type { %"struct.std::__1::__compressed_pair_elem.205" }
%"struct.std::__1::__compressed_pair_elem.205" = type { %"struct.dawn_native::ErrorData::BacktraceRecord"* }
%"class.dawn_native::CommandBufferBase" = type <{ %"class.dawn_native::ObjectBase", %"class.dawn_native::CommandIterator", %"struct.dawn_native::CommandBufferResourceUsage", i8, [7 x i8] }>
%"class.dawn_native::CommandIterator" = type <{ %"class.std::__1::vector.78", i8*, i64, i32, [4 x i8] }>
%"class.std::__1::vector.78" = type { %"class.std::__1::__vector_base.79" }
%"class.std::__1::__vector_base.79" = type { %"struct.dawn_native::BlockDef"*, %"struct.dawn_native::BlockDef"*, %"class.std::__1::__compressed_pair.80" }
%"struct.dawn_native::BlockDef" = type { i64, i8* }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"struct.dawn_native::BlockDef"* }
%"struct.dawn_native::CommandBufferResourceUsage" = type { %"class.std::__1::vector.85", %"class.std::__1::vector.152", %"class.std::__1::set", %"class.std::__1::set.169", %"class.std::__1::set.184" }
%"class.std::__1::vector.85" = type { %"class.std::__1::__vector_base.86" }
%"class.std::__1::__vector_base.86" = type { %"struct.dawn_native::RenderPassResourceUsage"*, %"struct.dawn_native::RenderPassResourceUsage"*, %"class.std::__1::__compressed_pair.147" }
%"struct.dawn_native::RenderPassResourceUsage" = type { %"struct.dawn_native::SyncScopeResourceUsage", %"class.std::__1::vector.126", %"class.std::__1::vector.140" }
%"struct.dawn_native::SyncScopeResourceUsage" = type { %"class.std::__1::vector.87", %"class.std::__1::vector.100", %"class.std::__1::vector.107", %"class.std::__1::vector.119" }
%"class.std::__1::vector.87" = type { %"class.std::__1::__vector_base.88" }
%"class.std::__1::__vector_base.88" = type { %"class.dawn_native::BufferBase"**, %"class.dawn_native::BufferBase"**, %"class.std::__1::__compressed_pair.95" }
%"class.dawn_native::BufferBase" = type { %"class.dawn_native::ObjectBase", i64, i32, i32, i8, %"class.std::__1::unique_ptr.89", void (i32, i8*)*, i8*, i64, i32, i64, i64 }
%"class.std::__1::unique_ptr.89" = type { %"class.std::__1::__compressed_pair.90" }
%"class.std::__1::__compressed_pair.90" = type { %"struct.std::__1::__compressed_pair_elem.91" }
%"struct.std::__1::__compressed_pair_elem.91" = type { %"class.dawn_native::StagingBufferBase"* }
%"class.dawn_native::StagingBufferBase" = type opaque
%"class.std::__1::__compressed_pair.95" = type { %"struct.std::__1::__compressed_pair_elem.96" }
%"struct.std::__1::__compressed_pair_elem.96" = type { %"class.dawn_native::BufferBase"** }
%"class.std::__1::vector.100" = type { %"class.std::__1::__vector_base.101" }
%"class.std::__1::__vector_base.101" = type { i32*, i32*, %"class.std::__1::__compressed_pair.102" }
%"class.std::__1::__compressed_pair.102" = type { %"struct.std::__1::__compressed_pair_elem.103" }
%"struct.std::__1::__compressed_pair_elem.103" = type { i32* }
%"class.std::__1::vector.107" = type { %"class.std::__1::__vector_base.108" }
%"class.std::__1::__vector_base.108" = type { %"class.dawn_native::TextureBase"**, %"class.dawn_native::TextureBase"**, %"class.std::__1::__compressed_pair.114" }
%"class.dawn_native::TextureBase" = type { %"class.dawn_native::ObjectBase", i32, %"struct.dawn_native::Format"*, %"struct.dawn_native::Extent3D", i32, i32, i32, i32, %"class.std::__1::vector.109" }
%"struct.dawn_native::Extent3D" = type { i32, i32, i32 }
%"class.std::__1::vector.109" = type { i64*, i64, %"class.std::__1::__compressed_pair.110" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"class.std::__1::__compressed_pair.114" = type { %"struct.std::__1::__compressed_pair_elem.115" }
%"struct.std::__1::__compressed_pair_elem.115" = type { %"class.dawn_native::TextureBase"** }
%"class.std::__1::vector.119" = type { %"class.std::__1::__vector_base.120" }
%"class.std::__1::__vector_base.120" = type { %"class.dawn_native::SubresourceStorage"*, %"class.dawn_native::SubresourceStorage"*, %"class.std::__1::__compressed_pair.121" }
%"class.dawn_native::SubresourceStorage" = type opaque
%"class.std::__1::__compressed_pair.121" = type { %"struct.std::__1::__compressed_pair_elem.122" }
%"struct.std::__1::__compressed_pair_elem.122" = type { %"class.dawn_native::SubresourceStorage"* }
%"class.std::__1::vector.126" = type { %"class.std::__1::__vector_base.127" }
%"class.std::__1::__vector_base.127" = type { %"class.dawn_native::QuerySetBase"**, %"class.dawn_native::QuerySetBase"**, %"class.std::__1::__compressed_pair.135" }
%"class.dawn_native::QuerySetBase" = type { %"class.dawn_native::ObjectBase", i32, i32, %"class.std::__1::vector.128", i32, %"class.std::__1::vector.109" }
%"class.std::__1::vector.128" = type { %"class.std::__1::__vector_base.129" }
%"class.std::__1::__vector_base.129" = type { i32*, i32*, %"class.std::__1::__compressed_pair.130" }
%"class.std::__1::__compressed_pair.130" = type { %"struct.std::__1::__compressed_pair_elem.131" }
%"struct.std::__1::__compressed_pair_elem.131" = type { i32* }
%"class.std::__1::__compressed_pair.135" = type { %"struct.std::__1::__compressed_pair_elem.136" }
%"struct.std::__1::__compressed_pair_elem.136" = type { %"class.dawn_native::QuerySetBase"** }
%"class.std::__1::vector.140" = type { %"class.std::__1::__vector_base.141" }
%"class.std::__1::__vector_base.141" = type { %"class.std::__1::vector.109"*, %"class.std::__1::vector.109"*, %"class.std::__1::__compressed_pair.142" }
%"class.std::__1::__compressed_pair.142" = type { %"struct.std::__1::__compressed_pair_elem.143" }
%"struct.std::__1::__compressed_pair_elem.143" = type { %"class.std::__1::vector.109"* }
%"class.std::__1::__compressed_pair.147" = type { %"struct.std::__1::__compressed_pair_elem.148" }
%"struct.std::__1::__compressed_pair_elem.148" = type { %"struct.dawn_native::RenderPassResourceUsage"* }
%"class.std::__1::vector.152" = type { %"class.std::__1::__vector_base.153" }
%"class.std::__1::__vector_base.153" = type { %"struct.dawn_native::ComputePassResourceUsage"*, %"struct.dawn_native::ComputePassResourceUsage"*, %"class.std::__1::__compressed_pair.179" }
%"struct.dawn_native::ComputePassResourceUsage" = type { %"class.std::__1::vector.154", %"class.std::__1::set", %"class.std::__1::set.169" }
%"class.std::__1::vector.154" = type { %"class.std::__1::__vector_base.155" }
%"class.std::__1::__vector_base.155" = type { %"struct.dawn_native::SyncScopeResourceUsage"*, %"struct.dawn_native::SyncScopeResourceUsage"*, %"class.std::__1::__compressed_pair.156" }
%"class.std::__1::__compressed_pair.156" = type { %"struct.std::__1::__compressed_pair_elem.157" }
%"struct.std::__1::__compressed_pair_elem.157" = type { %"struct.dawn_native::SyncScopeResourceUsage"* }
%"class.std::__1::__compressed_pair.179" = type { %"struct.std::__1::__compressed_pair_elem.180" }
%"struct.std::__1::__compressed_pair_elem.180" = type { %"struct.dawn_native::ComputePassResourceUsage"* }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.161", %"class.std::__1::__compressed_pair.166" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.161" = type { %"struct.std::__1::__compressed_pair_elem.162" }
%"struct.std::__1::__compressed_pair_elem.162" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.166" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"class.std::__1::set.169" = type { %"class.std::__1::__tree.170" }
%"class.std::__1::__tree.170" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.171", %"class.std::__1::__compressed_pair.175" }
%"class.std::__1::__compressed_pair.171" = type { %"struct.std::__1::__compressed_pair_elem.162" }
%"class.std::__1::__compressed_pair.175" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"class.std::__1::set.184" = type { %"class.std::__1::__tree.185" }
%"class.std::__1::__tree.185" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.186", %"class.std::__1::__compressed_pair.190" }
%"class.std::__1::__compressed_pair.186" = type { %"struct.std::__1::__compressed_pair_elem.162" }
%"class.std::__1::__compressed_pair.190" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"class.dawn_platform::Platform" = type { i32 (...)** }
%"class.dawn_native::opengl::CommandBuffer" = type { %"class.dawn_native::CommandBufferBase.base", [7 x i8] }
%"class.dawn_native::CommandBufferBase.base" = type <{ %"class.dawn_native::ObjectBase", %"class.dawn_native::CommandIterator", %"struct.dawn_native::CommandBufferResourceUsage", i8 }>
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.dawn_native::opengl::Buffer" = type { %"class.dawn_native::BufferBase", i32, i8* }
%"struct.dawn_native::ImageCopyTexture" = type <{ %"struct.dawn_native::ChainedStruct"*, %"class.dawn_native::TextureBase"*, i32, %"struct.dawn_native::Origin3D", i32, [4 x i8] }>
%"struct.dawn_native::ChainedStruct" = type <{ %"struct.dawn_native::ChainedStruct"*, i32, [4 x i8] }>
%"struct.dawn_native::Origin3D" = type { i32, i32, i32 }
%"struct.dawn_native::TextureDataLayout" = type { %"struct.dawn_native::ChainedStruct"*, i64, i32, i32 }
%"struct.dawn_native::TextureCopy" = type <{ %class.Ref.212, i32, %"struct.dawn_native::Origin3D", i8, [7 x i8] }>
%class.Ref.212 = type { %class.RefBase.213 }
%class.RefBase.213 = type { %"class.dawn_native::TextureBase"* }
%"struct.dawn_native::SubresourceRange" = type { i8, i32, i32, i32, i32 }
%"class.dawn_native::opengl::Texture" = type { %"class.dawn_native::TextureBase", i32, i32 }

$_ZN11dawn_native6opengl5QueueD0Ev = comdat any

@_ZTVN11dawn_native6opengl5QueueE = hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.dawn_native::QueueBase"*)* @_ZN11dawn_native9QueueBaseD2Ev to i8*), i8* bitcast (void (%"class.dawn_native::opengl::Queue"*)* @_ZN11dawn_native6opengl5QueueD0Ev to i8*), i8* bitcast (void (%class.RefCounted*)* @_ZN10RefCounted10DeleteThisEv to i8*), i8* bitcast (void (%class.Result*, %"class.dawn_native::opengl::Queue"*, i32, %"class.dawn_native::CommandBufferBase"**)* @_ZN11dawn_native6opengl5Queue10SubmitImplEjPKPNS_17CommandBufferBaseE to i8*), i8* bitcast (void (%class.Result*, %"class.dawn_native::opengl::Queue"*, %"class.dawn_native::BufferBase"*, i64, i8*, i64)* @_ZN11dawn_native6opengl5Queue15WriteBufferImplEPNS_10BufferBaseEmPKvm to i8*), i8* bitcast (void (%class.Result*, %"class.dawn_native::opengl::Queue"*, %"struct.dawn_native::ImageCopyTexture"*, i8*, %"struct.dawn_native::TextureDataLayout"*, %"struct.dawn_native::Extent3D"*)* @_ZN11dawn_native6opengl5Queue16WriteTextureImplERKNS_16ImageCopyTextureEPKvRKNS_17TextureDataLayoutERKNS_8Extent3DE to i8*)] }, align 8
@_ZZN11dawn_native6opengl5Queue10SubmitImplEjPKPNS_17CommandBufferBaseEE30trace_event_unique_catstatic32 = internal unnamed_addr global i8* null, align 8
@.str = private unnamed_addr constant [25 x i8] c"CommandBufferGL::Execute\00", align 1
@.str.1 = private unnamed_addr constant [58 x i8] c"../../third_party/dawn/src/dawn_native/opengl/QueueGL.cpp\00", align 1
@__func__._ZN11dawn_native6opengl5Queue10SubmitImplEjPKPNS_17CommandBufferBaseE = private unnamed_addr constant [11 x i8] c"SubmitImpl\00", align 1
@_ZZN11dawn_native6opengl5Queue10SubmitImplEjPKPNS_17CommandBufferBaseEE30trace_event_unique_catstatic36 = internal unnamed_addr global i8* null, align 8

@_ZN11dawn_native6opengl5QueueC1EPNS0_6DeviceE = hidden unnamed_addr alias void (%"class.dawn_native::opengl::Queue"*, %"class.dawn_native::opengl::Device"*), void (%"class.dawn_native::opengl::Queue"*, %"class.dawn_native::opengl::Device"*)* @_ZN11dawn_native6opengl5QueueC2EPNS0_6DeviceE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11dawn_native6opengl5QueueC2EPNS0_6DeviceE(%"class.dawn_native::opengl::Queue"*, %"class.dawn_native::opengl::Device"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.dawn_native::opengl::Queue", %"class.dawn_native::opengl::Queue"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.dawn_native::opengl::Device", %"class.dawn_native::opengl::Device"* %1, i64 0, i32 0
  tail call void @_ZN11dawn_native9QueueBaseC2EPNS_10DeviceBaseE(%"class.dawn_native::QueueBase"* %3, %"class.dawn_native::DeviceBase"* %4) #6
  %5 = getelementptr inbounds %"class.dawn_native::opengl::Queue", %"class.dawn_native::opengl::Queue"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN11dawn_native6opengl5QueueE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  ret void
}

declare void @_ZN11dawn_native9QueueBaseC2EPNS_10DeviceBaseE(%"class.dawn_native::QueueBase"*, %"class.dawn_native::DeviceBase"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11dawn_native6opengl5Queue10SubmitImplEjPKPNS_17CommandBufferBaseE(%class.Result* noalias nocapture sret, %"class.dawn_native::opengl::Queue"*, i32, %"class.dawn_native::CommandBufferBase"** nocapture readonly) unnamed_addr #0 align 2 {
  %5 = alloca %class.Result, align 8
  %6 = getelementptr inbounds %"class.dawn_native::opengl::Queue", %"class.dawn_native::opengl::Queue"* %1, i64 0, i32 0, i32 0
  %7 = tail call %"class.dawn_native::DeviceBase"* @_ZNK11dawn_native10ObjectBase9GetDeviceEv(%"class.dawn_native::ObjectBase"* %6) #6
  %8 = bitcast %"class.dawn_native::DeviceBase"* %7 to %"class.dawn_native::opengl::Device"*
  %9 = load i8*, i8** @_ZZN11dawn_native6opengl5Queue10SubmitImplEjPKPNS_17CommandBufferBaseEE30trace_event_unique_catstatic32, align 8
  %10 = icmp eq i8* %9, null
  br i1 %10, label %11, label %15

11:                                               ; preds = %4
  %12 = tail call %"class.dawn_native::DeviceBase"* @_ZNK11dawn_native10ObjectBase9GetDeviceEv(%"class.dawn_native::ObjectBase"* %6) #6
  %13 = tail call %"class.dawn_platform::Platform"* @_ZNK11dawn_native10DeviceBase11GetPlatformEv(%"class.dawn_native::DeviceBase"* %12) #6
  %14 = tail call i8* @_ZN13dawn_platform7tracing27GetTraceCategoryEnabledFlagEPNS_8PlatformENS_13TraceCategoryE(%"class.dawn_platform::Platform"* %13, i32 2) #6
  store i8* %14, i8** @_ZZN11dawn_native6opengl5Queue10SubmitImplEjPKPNS_17CommandBufferBaseEE30trace_event_unique_catstatic32, align 8
  br label %15

15:                                               ; preds = %4, %11
  %16 = phi i8* [ %9, %4 ], [ %14, %11 ]
  %17 = load i8, i8* %16, align 1
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %24, label %19

19:                                               ; preds = %15
  %20 = tail call %"class.dawn_native::DeviceBase"* @_ZNK11dawn_native10ObjectBase9GetDeviceEv(%"class.dawn_native::ObjectBase"* %6) #6
  %21 = tail call %"class.dawn_platform::Platform"* @_ZNK11dawn_native10DeviceBase11GetPlatformEv(%"class.dawn_native::DeviceBase"* %20) #6
  %22 = load i8*, i8** @_ZZN11dawn_native6opengl5Queue10SubmitImplEjPKPNS_17CommandBufferBaseEE30trace_event_unique_catstatic32, align 8
  %23 = tail call i64 @_ZN13dawn_platform7tracing13AddTraceEventEPNS_8PlatformEcPKhPKcmiPS6_S4_PKmh(%"class.dawn_platform::Platform"* %21, i8 signext 66, i8* %22, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i64 0, i64 0), i64 0, i32 0, i8** null, i8* null, i64* null, i8 zeroext 0) #6
  br label %24

24:                                               ; preds = %15, %19
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %66, label %26

26:                                               ; preds = %24
  %27 = bitcast %class.Result* %5 to i8*
  %28 = getelementptr inbounds %class.Result, %class.Result* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  %29 = zext i32 %2 to i64
  br label %30

30:                                               ; preds = %62, %26
  %31 = phi i64 [ 0, %26 ], [ %63, %62 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #6
  store %"class.dawn_native::ErrorData"* inttoptr (i64 -6148914691236517206 to %"class.dawn_native::ErrorData"*), %"class.dawn_native::ErrorData"** %28, align 8
  %32 = getelementptr inbounds %"class.dawn_native::CommandBufferBase"*, %"class.dawn_native::CommandBufferBase"** %3, i64 %31
  %33 = bitcast %"class.dawn_native::CommandBufferBase"** %32 to %"class.dawn_native::opengl::CommandBuffer"**
  %34 = load %"class.dawn_native::opengl::CommandBuffer"*, %"class.dawn_native::opengl::CommandBuffer"** %33, align 8
  call void @_ZN11dawn_native6opengl13CommandBuffer7ExecuteEv(%class.Result* nonnull sret %5, %"class.dawn_native::opengl::CommandBuffer"* %34) #6
  %35 = load %"class.dawn_native::ErrorData"*, %"class.dawn_native::ErrorData"** %28, align 8
  %36 = icmp eq %"class.dawn_native::ErrorData"* %35, null
  store %"class.dawn_native::ErrorData"* null, %"class.dawn_native::ErrorData"** %28, align 8
  br i1 %36, label %62, label %37, !prof !2

37:                                               ; preds = %30
  %38 = ptrtoint %"class.dawn_native::ErrorData"* %35 to i64
  call void @_ZN11dawn_native9ErrorData15AppendBacktraceEPKcS2_i(%"class.dawn_native::ErrorData"* nonnull %35, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__func__._ZN11dawn_native6opengl5Queue10SubmitImplEjPKPNS_17CommandBufferBaseE, i64 0, i64 0), i32 34) #6
  %39 = bitcast %class.Result* %0 to i64*
  store i64 %38, i64* %39, align 8
  %40 = load %"class.dawn_native::ErrorData"*, %"class.dawn_native::ErrorData"** %28, align 8
  store %"class.dawn_native::ErrorData"* null, %"class.dawn_native::ErrorData"** %28, align 8
  %41 = icmp eq %"class.dawn_native::ErrorData"* %40, null
  br i1 %41, label %65, label %42

42:                                               ; preds = %37
  %43 = getelementptr inbounds %"class.dawn_native::ErrorData", %"class.dawn_native::ErrorData"* %40, i64 0, i32 2, i32 0, i32 0
  %44 = load %"struct.dawn_native::ErrorData::BacktraceRecord"*, %"struct.dawn_native::ErrorData::BacktraceRecord"** %43, align 8
  %45 = icmp eq %"struct.dawn_native::ErrorData::BacktraceRecord"* %44, null
  br i1 %45, label %51, label %46

46:                                               ; preds = %42
  %47 = ptrtoint %"struct.dawn_native::ErrorData::BacktraceRecord"* %44 to i64
  %48 = getelementptr inbounds %"class.dawn_native::ErrorData", %"class.dawn_native::ErrorData"* %40, i64 0, i32 2, i32 0, i32 1
  %49 = bitcast %"struct.dawn_native::ErrorData::BacktraceRecord"** %48 to i64*
  store i64 %47, i64* %49, align 8
  %50 = bitcast %"struct.dawn_native::ErrorData::BacktraceRecord"* %44 to i8*
  call void @_ZdlPv(i8* %50) #7
  br label %51

51:                                               ; preds = %46, %42
  %52 = getelementptr inbounds %"class.dawn_native::ErrorData", %"class.dawn_native::ErrorData"* %40, i64 0, i32 1
  %53 = bitcast %"class.std::__1::basic_string"* %52 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %54 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %53, i64 0, i32 1, i32 0
  %55 = load i8, i8* %54, align 1
  %56 = icmp slt i8 %55, 0
  br i1 %56, label %57, label %60

57:                                               ; preds = %51
  %58 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %52, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %59 = load i8*, i8** %58, align 8
  call void @_ZdlPv(i8* %59) #7
  br label %60

60:                                               ; preds = %57, %51
  %61 = bitcast %"class.dawn_native::ErrorData"* %40 to i8*
  call void @_ZdlPv(i8* %61) #7
  br label %65

62:                                               ; preds = %30
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #6
  %63 = add nuw nsw i64 %31, 1
  %64 = icmp eq i64 %63, %29
  br i1 %64, label %66, label %30

65:                                               ; preds = %37, %60
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #6
  br label %84

66:                                               ; preds = %62, %24
  %67 = load i8*, i8** @_ZZN11dawn_native6opengl5Queue10SubmitImplEjPKPNS_17CommandBufferBaseEE30trace_event_unique_catstatic36, align 8
  %68 = icmp eq i8* %67, null
  br i1 %68, label %69, label %73

69:                                               ; preds = %66
  %70 = call %"class.dawn_native::DeviceBase"* @_ZNK11dawn_native10ObjectBase9GetDeviceEv(%"class.dawn_native::ObjectBase"* %6) #6
  %71 = call %"class.dawn_platform::Platform"* @_ZNK11dawn_native10DeviceBase11GetPlatformEv(%"class.dawn_native::DeviceBase"* %70) #6
  %72 = call i8* @_ZN13dawn_platform7tracing27GetTraceCategoryEnabledFlagEPNS_8PlatformENS_13TraceCategoryE(%"class.dawn_platform::Platform"* %71, i32 2) #6
  store i8* %72, i8** @_ZZN11dawn_native6opengl5Queue10SubmitImplEjPKPNS_17CommandBufferBaseEE30trace_event_unique_catstatic36, align 8
  br label %73

73:                                               ; preds = %66, %69
  %74 = phi i8* [ %67, %66 ], [ %72, %69 ]
  %75 = load i8, i8* %74, align 1
  %76 = icmp eq i8 %75, 0
  br i1 %76, label %82, label %77

77:                                               ; preds = %73
  %78 = call %"class.dawn_native::DeviceBase"* @_ZNK11dawn_native10ObjectBase9GetDeviceEv(%"class.dawn_native::ObjectBase"* %6) #6
  %79 = call %"class.dawn_platform::Platform"* @_ZNK11dawn_native10DeviceBase11GetPlatformEv(%"class.dawn_native::DeviceBase"* %78) #6
  %80 = load i8*, i8** @_ZZN11dawn_native6opengl5Queue10SubmitImplEjPKPNS_17CommandBufferBaseEE30trace_event_unique_catstatic36, align 8
  %81 = call i64 @_ZN13dawn_platform7tracing13AddTraceEventEPNS_8PlatformEcPKhPKcmiPS6_S4_PKmh(%"class.dawn_platform::Platform"* %79, i8 signext 69, i8* %80, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i64 0, i64 0), i64 0, i32 0, i8** null, i8* null, i64* null, i8 zeroext 0) #6
  br label %82

82:                                               ; preds = %73, %77
  call void @_ZN11dawn_native6opengl6Device15SubmitFenceSyncEv(%"class.dawn_native::opengl::Device"* %8) #6
  %83 = bitcast %class.Result* %0 to i64*
  store i64 0, i64* %83, align 8
  br label %84

84:                                               ; preds = %65, %82
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare %"class.dawn_native::DeviceBase"* @_ZNK11dawn_native10ObjectBase9GetDeviceEv(%"class.dawn_native::ObjectBase"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare i8* @_ZN13dawn_platform7tracing27GetTraceCategoryEnabledFlagEPNS_8PlatformENS_13TraceCategoryE(%"class.dawn_platform::Platform"*, i32) local_unnamed_addr #1

declare %"class.dawn_platform::Platform"* @_ZNK11dawn_native10DeviceBase11GetPlatformEv(%"class.dawn_native::DeviceBase"*) local_unnamed_addr #1

declare void @_ZN11dawn_native6opengl13CommandBuffer7ExecuteEv(%class.Result* sret, %"class.dawn_native::opengl::CommandBuffer"*) local_unnamed_addr #1

declare void @_ZN11dawn_native9ErrorData15AppendBacktraceEPKcS2_i(%"class.dawn_native::ErrorData"*, i8*, i8*, i32) local_unnamed_addr #1

declare void @_ZN11dawn_native6opengl6Device15SubmitFenceSyncEv(%"class.dawn_native::opengl::Device"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11dawn_native6opengl5Queue15WriteBufferImplEPNS_10BufferBaseEmPKvm(%class.Result* noalias nocapture sret, %"class.dawn_native::opengl::Queue"*, %"class.dawn_native::BufferBase"*, i64, i8*, i64) unnamed_addr #0 align 2 {
  %7 = getelementptr inbounds %"class.dawn_native::opengl::Queue", %"class.dawn_native::opengl::Queue"* %1, i64 0, i32 0, i32 0
  %8 = tail call %"class.dawn_native::DeviceBase"* @_ZNK11dawn_native10ObjectBase9GetDeviceEv(%"class.dawn_native::ObjectBase"* %7) #6
  %9 = bitcast %"class.dawn_native::BufferBase"* %2 to %"class.dawn_native::opengl::Buffer"*
  tail call void @_ZN11dawn_native6opengl6Buffer34EnsureDataInitializedAsDestinationEmm(%"class.dawn_native::opengl::Buffer"* %9, i64 %3, i64 %5) #6
  %10 = getelementptr inbounds %"class.dawn_native::DeviceBase", %"class.dawn_native::DeviceBase"* %8, i64 1, i32 2
  %11 = bitcast i64* %10 to void (i32, i32)**
  %12 = load void (i32, i32)*, void (i32, i32)** %11, align 8
  %13 = tail call i32 @_ZNK11dawn_native6opengl6Buffer9GetHandleEv(%"class.dawn_native::opengl::Buffer"* %9) #6
  tail call void %12(i32 34962, i32 %13) #6
  %14 = getelementptr inbounds %"class.dawn_native::DeviceBase", %"class.dawn_native::DeviceBase"* %8, i64 1, i32 12
  %15 = bitcast %class.Ref.8* %14 to void (i32, i64, i64, i8*)**
  %16 = load void (i32, i64, i64, i8*)*, void (i32, i64, i64, i8*)** %15, align 8
  tail call void %16(i32 34962, i64 %3, i64 %5, i8* %4) #6
  %17 = bitcast %class.Result* %0 to i64*
  store i64 0, i64* %17, align 8
  ret void
}

declare void @_ZN11dawn_native6opengl6Buffer34EnsureDataInitializedAsDestinationEmm(%"class.dawn_native::opengl::Buffer"*, i64, i64) local_unnamed_addr #1

declare i32 @_ZNK11dawn_native6opengl6Buffer9GetHandleEv(%"class.dawn_native::opengl::Buffer"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11dawn_native6opengl5Queue16WriteTextureImplERKNS_16ImageCopyTextureEPKvRKNS_17TextureDataLayoutERKNS_8Extent3DE(%class.Result* noalias nocapture sret, %"class.dawn_native::opengl::Queue"*, %"struct.dawn_native::ImageCopyTexture"* nocapture readonly dereferenceable(40), i8*, %"struct.dawn_native::TextureDataLayout"* dereferenceable(24), %"struct.dawn_native::Extent3D"* dereferenceable(12)) unnamed_addr #0 align 2 {
  %7 = alloca %"struct.dawn_native::TextureCopy", align 8
  %8 = alloca %"struct.dawn_native::SubresourceRange", align 4
  %9 = bitcast %"struct.dawn_native::TextureCopy"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #6
  %10 = getelementptr inbounds %"struct.dawn_native::TextureCopy", %"struct.dawn_native::TextureCopy"* %7, i64 0, i32 0, i32 0, i32 0
  %11 = getelementptr inbounds %"struct.dawn_native::TextureCopy", %"struct.dawn_native::TextureCopy"* %7, i64 0, i32 1
  %12 = getelementptr inbounds %"struct.dawn_native::TextureCopy", %"struct.dawn_native::TextureCopy"* %7, i64 0, i32 2
  %13 = getelementptr inbounds %"struct.dawn_native::TextureCopy", %"struct.dawn_native::TextureCopy"* %7, i64 0, i32 2, i32 1
  %14 = getelementptr inbounds %"struct.dawn_native::TextureCopy", %"struct.dawn_native::TextureCopy"* %7, i64 0, i32 2, i32 2
  %15 = getelementptr inbounds %"struct.dawn_native::TextureCopy", %"struct.dawn_native::TextureCopy"* %7, i64 0, i32 3
  %16 = getelementptr inbounds %"struct.dawn_native::TextureCopy", %"struct.dawn_native::TextureCopy"* %7, i64 0, i32 1
  %17 = bitcast i32* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 -86, i64 24, i1 false)
  store %"class.dawn_native::TextureBase"* null, %"class.dawn_native::TextureBase"** %10, align 8
  %18 = getelementptr inbounds %"struct.dawn_native::TextureCopy", %"struct.dawn_native::TextureCopy"* %7, i64 0, i32 2, i32 0
  store i32 0, i32* %18, align 4
  store i32 0, i32* %13, align 4
  store i32 0, i32* %14, align 4
  %19 = getelementptr inbounds %"struct.dawn_native::ImageCopyTexture", %"struct.dawn_native::ImageCopyTexture"* %2, i64 0, i32 1
  %20 = load %"class.dawn_native::TextureBase"*, %"class.dawn_native::TextureBase"** %19, align 8
  %21 = ptrtoint %"class.dawn_native::TextureBase"* %20 to i64
  %22 = icmp eq %"class.dawn_native::TextureBase"* %20, null
  br i1 %22, label %25, label %23

23:                                               ; preds = %6
  %24 = getelementptr inbounds %"class.dawn_native::TextureBase", %"class.dawn_native::TextureBase"* %20, i64 0, i32 0, i32 0
  tail call void @_ZN10RefCounted9ReferenceEv(%class.RefCounted* %24) #6
  br label %25

25:                                               ; preds = %6, %23
  %26 = getelementptr inbounds %"struct.dawn_native::ImageCopyTexture", %"struct.dawn_native::ImageCopyTexture"* %2, i64 0, i32 2
  %27 = load i32, i32* %26, align 8
  %28 = load %"class.dawn_native::TextureBase"*, %"class.dawn_native::TextureBase"** %19, align 8
  %29 = bitcast %"struct.dawn_native::TextureCopy"* %7 to i64*
  store i64 %21, i64* %29, align 8
  %30 = getelementptr inbounds %"struct.dawn_native::ImageCopyTexture", %"struct.dawn_native::ImageCopyTexture"* %2, i64 0, i32 2
  store i32 %27, i32* %11, align 8
  %31 = getelementptr inbounds %"struct.dawn_native::ImageCopyTexture", %"struct.dawn_native::ImageCopyTexture"* %2, i64 0, i32 3
  %32 = bitcast %"struct.dawn_native::Origin3D"* %12 to i8*
  %33 = bitcast %"struct.dawn_native::Origin3D"* %31 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %32, i8* align 4 %33, i64 12, i1 false)
  %34 = tail call dereferenceable(84) %"struct.dawn_native::Format"* @_ZNK11dawn_native11TextureBase9GetFormatEv(%"class.dawn_native::TextureBase"* %28) #6
  %35 = getelementptr inbounds %"struct.dawn_native::ImageCopyTexture", %"struct.dawn_native::ImageCopyTexture"* %2, i64 0, i32 4
  %36 = load i32, i32* %35, align 8
  %37 = tail call zeroext i8 @_ZN11dawn_native19SelectFormatAspectsERKNS_6FormatEN4wgpu13TextureAspectE(%"struct.dawn_native::Format"* dereferenceable(84) %34, i32 %36) #6
  store i8 %37, i8* %15, align 8
  %38 = getelementptr inbounds %"struct.dawn_native::SubresourceRange", %"struct.dawn_native::SubresourceRange"* %8, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %38) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %38, i8 -86, i64 20, i1 false)
  call void @_ZN11dawn_native29GetSubresourcesAffectedByCopyERKNS_11TextureCopyERKNS_8Extent3DE(%"struct.dawn_native::SubresourceRange"* nonnull sret %8, %"struct.dawn_native::TextureCopy"* nonnull dereferenceable(32) %7, %"struct.dawn_native::Extent3D"* dereferenceable(12) %5) #6
  %39 = load %"class.dawn_native::TextureBase"*, %"class.dawn_native::TextureBase"** %19, align 8
  %40 = bitcast %"struct.dawn_native::Extent3D"* %5 to i64*
  %41 = load i64, i64* %40, align 4
  %42 = getelementptr inbounds %"struct.dawn_native::Extent3D", %"struct.dawn_native::Extent3D"* %5, i64 0, i32 2
  %43 = load i32, i32* %42, align 4
  %44 = load i32, i32* %30, align 8
  %45 = call zeroext i1 @_ZN11dawn_native29IsCompleteSubresourceCopiedToEPKNS_11TextureBaseENS_8Extent3DEj(%"class.dawn_native::TextureBase"* %39, i64 %41, i32 %43, i32 %44) #6
  br i1 %45, label %46, label %48

46:                                               ; preds = %25
  %47 = load %"class.dawn_native::TextureBase"*, %"class.dawn_native::TextureBase"** %19, align 8
  call void @_ZN11dawn_native11TextureBase34SetIsSubresourceContentInitializedEbRKNS_16SubresourceRangeE(%"class.dawn_native::TextureBase"* %47, i1 zeroext true, %"struct.dawn_native::SubresourceRange"* nonnull dereferenceable(20) %8) #6
  br label %51

48:                                               ; preds = %25
  %49 = bitcast %"class.dawn_native::TextureBase"** %19 to %"class.dawn_native::opengl::Texture"**
  %50 = load %"class.dawn_native::opengl::Texture"*, %"class.dawn_native::opengl::Texture"** %49, align 8
  call void @_ZN11dawn_native6opengl7Texture35EnsureSubresourceContentInitializedERKNS_16SubresourceRangeE(%"class.dawn_native::opengl::Texture"* %50, %"struct.dawn_native::SubresourceRange"* nonnull dereferenceable(20) %8) #6
  br label %51

51:                                               ; preds = %48, %46
  %52 = getelementptr inbounds %"class.dawn_native::opengl::Queue", %"class.dawn_native::opengl::Queue"* %1, i64 0, i32 0, i32 0
  %53 = call %"class.dawn_native::DeviceBase"* @_ZNK11dawn_native10ObjectBase9GetDeviceEv(%"class.dawn_native::ObjectBase"* %52) #6
  %54 = getelementptr inbounds %"class.dawn_native::DeviceBase", %"class.dawn_native::DeviceBase"* %53, i64 1
  %55 = bitcast %"class.dawn_native::DeviceBase"* %54 to %"struct.dawn_native::opengl::OpenGLFunctions"*
  call void @_ZN11dawn_native6opengl13DoTexSubImageERKNS0_15OpenGLFunctionsERKNS_11TextureCopyEPKvRKNS_17TextureDataLayoutERKNS_8Extent3DE(%"struct.dawn_native::opengl::OpenGLFunctions"* dereferenceable(5664) %55, %"struct.dawn_native::TextureCopy"* nonnull dereferenceable(32) %7, i8* %3, %"struct.dawn_native::TextureDataLayout"* dereferenceable(24) %4, %"struct.dawn_native::Extent3D"* dereferenceable(12) %5) #6
  %56 = bitcast %class.Result* %0 to i64*
  store i64 0, i64* %56, align 8
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %38) #6
  %57 = load %"class.dawn_native::TextureBase"*, %"class.dawn_native::TextureBase"** %10, align 8
  %58 = icmp eq %"class.dawn_native::TextureBase"* %57, null
  br i1 %58, label %61, label %59

59:                                               ; preds = %51
  %60 = getelementptr inbounds %"class.dawn_native::TextureBase", %"class.dawn_native::TextureBase"* %57, i64 0, i32 0, i32 0
  call void @_ZN10RefCounted7ReleaseEv(%class.RefCounted* %60) #6
  br label %61

61:                                               ; preds = %51, %59
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare zeroext i8 @_ZN11dawn_native19SelectFormatAspectsERKNS_6FormatEN4wgpu13TextureAspectE(%"struct.dawn_native::Format"* dereferenceable(84), i32) local_unnamed_addr #1

declare dereferenceable(84) %"struct.dawn_native::Format"* @_ZNK11dawn_native11TextureBase9GetFormatEv(%"class.dawn_native::TextureBase"*) local_unnamed_addr #1

declare void @_ZN11dawn_native29GetSubresourcesAffectedByCopyERKNS_11TextureCopyERKNS_8Extent3DE(%"struct.dawn_native::SubresourceRange"* sret, %"struct.dawn_native::TextureCopy"* dereferenceable(32), %"struct.dawn_native::Extent3D"* dereferenceable(12)) local_unnamed_addr #1

declare zeroext i1 @_ZN11dawn_native29IsCompleteSubresourceCopiedToEPKNS_11TextureBaseENS_8Extent3DEj(%"class.dawn_native::TextureBase"*, i64, i32, i32) local_unnamed_addr #1

declare void @_ZN11dawn_native11TextureBase34SetIsSubresourceContentInitializedEbRKNS_16SubresourceRangeE(%"class.dawn_native::TextureBase"*, i1 zeroext, %"struct.dawn_native::SubresourceRange"* dereferenceable(20)) local_unnamed_addr #1

declare void @_ZN11dawn_native6opengl7Texture35EnsureSubresourceContentInitializedERKNS_16SubresourceRangeE(%"class.dawn_native::opengl::Texture"*, %"struct.dawn_native::SubresourceRange"* dereferenceable(20)) local_unnamed_addr #1

declare void @_ZN11dawn_native6opengl13DoTexSubImageERKNS0_15OpenGLFunctionsERKNS_11TextureCopyEPKvRKNS_17TextureDataLayoutERKNS_8Extent3DE(%"struct.dawn_native::opengl::OpenGLFunctions"* dereferenceable(5664), %"struct.dawn_native::TextureCopy"* dereferenceable(32), i8*, %"struct.dawn_native::TextureDataLayout"* dereferenceable(24), %"struct.dawn_native::Extent3D"* dereferenceable(12)) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN11dawn_native9QueueBaseD2Ev(%"class.dawn_native::QueueBase"*) unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN11dawn_native6opengl5QueueD0Ev(%"class.dawn_native::opengl::Queue"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.dawn_native::opengl::Queue", %"class.dawn_native::opengl::Queue"* %0, i64 0, i32 0
  tail call void @_ZN11dawn_native9QueueBaseD2Ev(%"class.dawn_native::QueueBase"* %2) #6
  %3 = bitcast %"class.dawn_native::opengl::Queue"* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #7
  ret void
}

declare void @_ZN10RefCounted10DeleteThisEv(%class.RefCounted*) unnamed_addr #1

declare i64 @_ZN13dawn_platform7tracing13AddTraceEventEPNS_8PlatformEcPKhPKcmiPS6_S4_PKmh(%"class.dawn_platform::Platform"*, i8 signext, i8*, i8*, i64, i32, i8**, i8*, i64*, i8 zeroext) local_unnamed_addr #1

declare void @_ZN10RefCounted9ReferenceEv(%class.RefCounted*) local_unnamed_addr #1

declare void @_ZN10RefCounted7ReleaseEv(%class.RefCounted*) local_unnamed_addr #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
