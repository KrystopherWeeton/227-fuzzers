; ModuleID = '../../third_party/webrtc/modules/third_party/fft/fft.c'
source_filename = "../../third_party/webrtc/modules/third_party/fft/fft.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.FFTstr = type { i32, i32, [2048 x double], [2048 x double], [2048 x double], [2048 x double], [2048 x i32], [11 x i32] }

; Function Attrs: nofree nounwind ssp uwtable
define hidden i32 @WebRtcIsac_Fftns(i32, i32* nocapture readonly, double*, double*, i32, double, %struct.FFTstr*) local_unnamed_addr #0 {
  %8 = icmp eq i32 %0, 0
  %9 = load i32, i32* %1, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %8, label %27, label %11

11:                                               ; preds = %7
  br i1 %10, label %1380, label %12

12:                                               ; preds = %11
  %13 = zext i32 %0 to i64
  %14 = icmp slt i32 %9, 1
  br i1 %14, label %1406, label %15

15:                                               ; preds = %12, %23
  %16 = phi i64 [ %20, %23 ], [ 1, %12 ]
  %17 = phi i64 [ %21, %23 ], [ 0, %12 ]
  %18 = phi i32 [ %25, %23 ], [ %9, %12 ]
  %19 = sext i32 %18 to i64
  %20 = mul i64 %16, %19
  %21 = add nuw nsw i64 %17, 1
  %22 = icmp eq i64 %21, %13
  br i1 %22, label %41, label %23

23:                                               ; preds = %15
  %24 = getelementptr inbounds i32, i32* %1, i64 %21
  %25 = load i32, i32* %24, align 4
  %26 = icmp slt i32 %25, 1
  br i1 %26, label %1406, label %15

27:                                               ; preds = %7
  br i1 %10, label %1380, label %28

28:                                               ; preds = %27, %33
  %29 = phi i32 [ %39, %33 ], [ %9, %27 ]
  %30 = phi i32 [ %36, %33 ], [ 0, %27 ]
  %31 = phi i64 [ %35, %33 ], [ 1, %27 ]
  %32 = icmp slt i32 %29, 1
  br i1 %32, label %1406, label %33

33:                                               ; preds = %28
  %34 = sext i32 %29 to i64
  %35 = mul i64 %31, %34
  %36 = add i32 %30, 1
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds i32, i32* %1, i64 %37
  %39 = load i32, i32* %38, align 4
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %28

41:                                               ; preds = %15, %33
  %42 = phi i32 [ %36, %33 ], [ %0, %15 ]
  %43 = phi i64 [ %35, %33 ], [ %20, %15 ]
  %44 = icmp eq i32 %42, 0
  br i1 %44, label %1380, label %45

45:                                               ; preds = %41
  %46 = zext i32 %42 to i64
  %47 = icmp sgt i32 %9, 1
  %48 = select i1 %47, i32 %9, i32 1
  %49 = icmp sgt i32 %9, 1
  %50 = select i1 %49, i32 %9, i32 1
  %51 = icmp eq i32 %42, 1
  br i1 %51, label %165, label %52

52:                                               ; preds = %45
  %53 = add nsw i64 %46, -1
  %54 = icmp ult i64 %53, 8
  br i1 %54, label %55, label %59

55:                                               ; preds = %141, %52
  %56 = phi i64 [ 1, %52 ], [ %61, %141 ]
  %57 = phi i32 [ %50, %52 ], [ %163, %141 ]
  %58 = phi i32 [ %48, %52 ], [ %154, %141 ]
  br label %196

59:                                               ; preds = %52
  %60 = and i64 %53, -8
  %61 = or i64 %60, 1
  %62 = insertelement <4 x i32> undef, i32 %50, i32 0
  %63 = shufflevector <4 x i32> %62, <4 x i32> undef, <4 x i32> zeroinitializer
  %64 = insertelement <4 x i32> undef, i32 %48, i32 0
  %65 = shufflevector <4 x i32> %64, <4 x i32> undef, <4 x i32> zeroinitializer
  %66 = add nsw i64 %60, -8
  %67 = lshr exact i64 %66, 3
  %68 = add nuw nsw i64 %67, 1
  %69 = and i64 %68, 1
  %70 = icmp eq i64 %66, 0
  br i1 %70, label %115, label %71

71:                                               ; preds = %59
  %72 = sub nuw nsw i64 %68, %69
  br label %73

73:                                               ; preds = %73, %71
  %74 = phi i64 [ 0, %71 ], [ %110, %73 ]
  %75 = phi <4 x i32> [ %63, %71 ], [ %108, %73 ]
  %76 = phi <4 x i32> [ %63, %71 ], [ %109, %73 ]
  %77 = phi <4 x i32> [ %65, %71 ], [ %104, %73 ]
  %78 = phi <4 x i32> [ %65, %71 ], [ %105, %73 ]
  %79 = phi i64 [ %72, %71 ], [ %111, %73 ]
  %80 = or i64 %74, 1
  %81 = getelementptr inbounds i32, i32* %1, i64 %80
  %82 = bitcast i32* %81 to <4 x i32>*
  %83 = load <4 x i32>, <4 x i32>* %82, align 4
  %84 = getelementptr inbounds i32, i32* %81, i64 4
  %85 = bitcast i32* %84 to <4 x i32>*
  %86 = load <4 x i32>, <4 x i32>* %85, align 4
  %87 = icmp sgt <4 x i32> %83, %77
  %88 = icmp sgt <4 x i32> %86, %78
  %89 = select <4 x i1> %87, <4 x i32> %83, <4 x i32> %77
  %90 = select <4 x i1> %88, <4 x i32> %86, <4 x i32> %78
  %91 = icmp sgt <4 x i32> %83, %75
  %92 = icmp sgt <4 x i32> %86, %76
  %93 = select <4 x i1> %91, <4 x i32> %83, <4 x i32> %75
  %94 = select <4 x i1> %92, <4 x i32> %86, <4 x i32> %76
  %95 = or i64 %74, 9
  %96 = getelementptr inbounds i32, i32* %1, i64 %95
  %97 = bitcast i32* %96 to <4 x i32>*
  %98 = load <4 x i32>, <4 x i32>* %97, align 4
  %99 = getelementptr inbounds i32, i32* %96, i64 4
  %100 = bitcast i32* %99 to <4 x i32>*
  %101 = load <4 x i32>, <4 x i32>* %100, align 4
  %102 = icmp sgt <4 x i32> %98, %89
  %103 = icmp sgt <4 x i32> %101, %90
  %104 = select <4 x i1> %102, <4 x i32> %98, <4 x i32> %89
  %105 = select <4 x i1> %103, <4 x i32> %101, <4 x i32> %90
  %106 = icmp sgt <4 x i32> %98, %93
  %107 = icmp sgt <4 x i32> %101, %94
  %108 = select <4 x i1> %106, <4 x i32> %98, <4 x i32> %93
  %109 = select <4 x i1> %107, <4 x i32> %101, <4 x i32> %94
  %110 = add i64 %74, 16
  %111 = add i64 %79, -2
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %113, label %73, !llvm.loop !2

113:                                              ; preds = %73
  %114 = or i64 %110, 1
  br label %115

115:                                              ; preds = %113, %59
  %116 = phi <4 x i32> [ undef, %59 ], [ %104, %113 ]
  %117 = phi <4 x i32> [ undef, %59 ], [ %105, %113 ]
  %118 = phi <4 x i32> [ undef, %59 ], [ %108, %113 ]
  %119 = phi <4 x i32> [ undef, %59 ], [ %109, %113 ]
  %120 = phi i64 [ 1, %59 ], [ %114, %113 ]
  %121 = phi <4 x i32> [ %63, %59 ], [ %108, %113 ]
  %122 = phi <4 x i32> [ %63, %59 ], [ %109, %113 ]
  %123 = phi <4 x i32> [ %65, %59 ], [ %104, %113 ]
  %124 = phi <4 x i32> [ %65, %59 ], [ %105, %113 ]
  %125 = icmp eq i64 %69, 0
  br i1 %125, label %141, label %126

126:                                              ; preds = %115
  %127 = getelementptr inbounds i32, i32* %1, i64 %120
  %128 = bitcast i32* %127 to <4 x i32>*
  %129 = load <4 x i32>, <4 x i32>* %128, align 4
  %130 = getelementptr inbounds i32, i32* %127, i64 4
  %131 = bitcast i32* %130 to <4 x i32>*
  %132 = load <4 x i32>, <4 x i32>* %131, align 4
  %133 = icmp sgt <4 x i32> %132, %122
  %134 = select <4 x i1> %133, <4 x i32> %132, <4 x i32> %122
  %135 = icmp sgt <4 x i32> %129, %121
  %136 = select <4 x i1> %135, <4 x i32> %129, <4 x i32> %121
  %137 = icmp sgt <4 x i32> %132, %124
  %138 = select <4 x i1> %137, <4 x i32> %132, <4 x i32> %124
  %139 = icmp sgt <4 x i32> %129, %123
  %140 = select <4 x i1> %139, <4 x i32> %129, <4 x i32> %123
  br label %141

141:                                              ; preds = %115, %126
  %142 = phi <4 x i32> [ %116, %115 ], [ %140, %126 ]
  %143 = phi <4 x i32> [ %117, %115 ], [ %138, %126 ]
  %144 = phi <4 x i32> [ %118, %115 ], [ %136, %126 ]
  %145 = phi <4 x i32> [ %119, %115 ], [ %134, %126 ]
  %146 = icmp sgt <4 x i32> %142, %143
  %147 = select <4 x i1> %146, <4 x i32> %142, <4 x i32> %143
  %148 = shufflevector <4 x i32> %147, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %149 = icmp sgt <4 x i32> %147, %148
  %150 = select <4 x i1> %149, <4 x i32> %147, <4 x i32> %148
  %151 = shufflevector <4 x i32> %150, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %152 = icmp sgt <4 x i32> %150, %151
  %153 = select <4 x i1> %152, <4 x i32> %150, <4 x i32> %151
  %154 = extractelement <4 x i32> %153, i32 0
  %155 = icmp sgt <4 x i32> %144, %145
  %156 = select <4 x i1> %155, <4 x i32> %144, <4 x i32> %145
  %157 = shufflevector <4 x i32> %156, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %158 = icmp sgt <4 x i32> %156, %157
  %159 = select <4 x i1> %158, <4 x i32> %156, <4 x i32> %157
  %160 = shufflevector <4 x i32> %159, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %161 = icmp sgt <4 x i32> %159, %160
  %162 = select <4 x i1> %161, <4 x i32> %159, <4 x i32> %160
  %163 = extractelement <4 x i32> %162, i32 0
  %164 = icmp eq i64 %53, %60
  br i1 %164, label %165, label %55

165:                                              ; preds = %196, %141, %45
  %166 = phi i32 [ %48, %45 ], [ %154, %141 ], [ %203, %196 ]
  %167 = phi i32 [ %50, %45 ], [ %163, %141 ], [ %205, %196 ]
  br i1 %44, label %1380, label %168

168:                                              ; preds = %165
  %169 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 0
  %170 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 1
  %171 = icmp eq i32 %166, 0
  %172 = shl i32 %166, 3
  %173 = icmp eq i32 %167, 0
  %174 = icmp slt i32 %4, 0
  %175 = sub nsw i32 0, %4
  %176 = select i1 %174, i32 %175, i32 %4
  %177 = select i1 %174, double 0xBFEBB67AE8584CAA, double 0x3FEBB67AE8584CAA
  %178 = select i1 %174, double 0xBFEE6F0E134454FF, double 0x3FEE6F0E134454FF
  %179 = select i1 %174, double 0xC00921FB54442D18, double 0x400921FB54442D18
  %180 = trunc i64 %43 to i32
  %181 = mul nsw i32 %176, %180
  %182 = sub nsw i32 %181, %176
  %183 = fmul double %179, 2.000000e+00
  %184 = shl nuw nsw i32 %176, 1
  %185 = add nsw i32 %181, -1
  %186 = fmul double %178, 0x3FE3C6EF372FE94F
  %187 = add nsw i32 %182, -1
  %188 = sext i32 %182 to i64
  %189 = sext i32 %181 to i64
  %190 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 6, i64 0
  %191 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 6, i64 1
  %192 = zext i32 %176 to i64
  %193 = mul nsw i32 %166, %176
  %194 = sub nsw i32 1, %176
  %195 = zext i32 %42 to i64
  br label %208

196:                                              ; preds = %55, %196
  %197 = phi i64 [ %206, %196 ], [ %56, %55 ]
  %198 = phi i32 [ %205, %196 ], [ %57, %55 ]
  %199 = phi i32 [ %203, %196 ], [ %58, %55 ]
  %200 = getelementptr inbounds i32, i32* %1, i64 %197
  %201 = load i32, i32* %200, align 4
  %202 = icmp sgt i32 %201, %199
  %203 = select i1 %202, i32 %201, i32 %199
  %204 = icmp sgt i32 %201, %198
  %205 = select i1 %204, i32 %201, i32 %198
  %206 = add nuw nsw i64 %197, 1
  %207 = icmp eq i64 %206, %46
  br i1 %207, label %165, label %196, !llvm.loop !4

208:                                              ; preds = %1377, %168
  %209 = phi i32 [ %9, %168 ], [ %1379, %1377 ]
  %210 = phi i64 [ 0, %168 ], [ %1375, %1377 ]
  %211 = phi i64 [ 1, %168 ], [ %213, %1377 ]
  %212 = sext i32 %209 to i64
  %213 = mul i64 %211, %212
  store i32 0, i32* %169, align 8
  store i32 0, i32* %170, align 4
  %214 = icmp ult i32 %209, 2
  br i1 %214, label %1374, label %215

215:                                              ; preds = %208
  br i1 %171, label %217, label %216

216:                                              ; preds = %215
  store i32 %172, i32* %169, align 8
  br label %217

217:                                              ; preds = %216, %215
  br i1 %173, label %219, label %218

218:                                              ; preds = %217
  store i32 %167, i32* %170, align 4
  br label %219

219:                                              ; preds = %218, %217
  %220 = trunc i64 %213 to i32
  %221 = mul nsw i32 %176, %220
  %222 = sdiv i32 %221, %209
  %223 = sitofp i32 %222 to double
  %224 = fmul double %179, %223
  %225 = and i32 %209, 15
  %226 = icmp eq i32 %225, 0
  br i1 %226, label %232, label %227

227:                                              ; preds = %230, %219
  %228 = phi i32 [ %231, %230 ], [ 0, %219 ]
  %229 = phi i32 [ %237, %230 ], [ %209, %219 ]
  br label %240

230:                                              ; preds = %232
  %231 = trunc i64 %235 to i32
  br label %227

232:                                              ; preds = %219, %232
  %233 = phi i64 [ %235, %232 ], [ 0, %219 ]
  %234 = phi i32 [ %237, %232 ], [ %209, %219 ]
  %235 = add nuw i64 %233, 1
  %236 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 7, i64 %233
  store i32 4, i32* %236, align 4
  %237 = sdiv i32 %234, 16
  %238 = and i32 %237, 15
  %239 = icmp eq i32 %238, 0
  br i1 %239, label %232, label %230

240:                                              ; preds = %227, %259
  %241 = phi i32 [ %260, %259 ], [ %228, %227 ]
  %242 = phi i32 [ %262, %259 ], [ 3, %227 ]
  %243 = phi i32 [ %263, %259 ], [ 9, %227 ]
  %244 = phi i32 [ %261, %259 ], [ %229, %227 ]
  %245 = srem i32 %244, %243
  %246 = icmp eq i32 %245, 0
  br i1 %246, label %247, label %259

247:                                              ; preds = %240
  %248 = sext i32 %241 to i64
  br label %249

249:                                              ; preds = %249, %247
  %250 = phi i64 [ %248, %247 ], [ %252, %249 ]
  %251 = phi i32 [ %244, %247 ], [ %254, %249 ]
  %252 = add i64 %250, 1
  %253 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 7, i64 %250
  store i32 %242, i32* %253, align 4
  %254 = sdiv i32 %251, %243
  %255 = srem i32 %254, %243
  %256 = icmp eq i32 %255, 0
  br i1 %256, label %249, label %257

257:                                              ; preds = %249
  %258 = trunc i64 %252 to i32
  br label %259

259:                                              ; preds = %257, %240
  %260 = phi i32 [ %241, %240 ], [ %258, %257 ]
  %261 = phi i32 [ %244, %240 ], [ %254, %257 ]
  %262 = add nuw nsw i32 %242, 2
  %263 = mul nsw i32 %262, %262
  %264 = icmp sgt i32 %263, %261
  br i1 %264, label %265, label %240

265:                                              ; preds = %259
  %266 = icmp slt i32 %261, 5
  br i1 %266, label %267, label %273

267:                                              ; preds = %265
  %268 = sext i32 %260 to i64
  %269 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 7, i64 %268
  store i32 %261, i32* %269, align 4
  %270 = icmp ne i32 %261, 1
  %271 = zext i1 %270 to i32
  %272 = add nsw i32 %260, %271
  br label %303

273:                                              ; preds = %265
  %274 = and i32 %261, -4
  %275 = icmp eq i32 %261, %274
  br i1 %275, label %276, label %281

276:                                              ; preds = %273
  %277 = lshr i32 %261, 2
  %278 = add nsw i32 %260, 1
  %279 = sext i32 %260 to i64
  %280 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 7, i64 %279
  store i32 2, i32* %280, align 4
  br label %281

281:                                              ; preds = %276, %273
  %282 = phi i32 [ %278, %276 ], [ %260, %273 ]
  %283 = phi i32 [ %277, %276 ], [ %261, %273 ]
  br label %284

284:                                              ; preds = %295, %281
  %285 = phi i32 [ %282, %281 ], [ %296, %295 ]
  %286 = phi i32 [ 2, %281 ], [ %301, %295 ]
  %287 = phi i32 [ %283, %281 ], [ %297, %295 ]
  %288 = srem i32 %287, %286
  %289 = sdiv i32 %287, %286
  %290 = icmp eq i32 %288, 0
  br i1 %290, label %291, label %295

291:                                              ; preds = %284
  %292 = add nsw i32 %285, 1
  %293 = sext i32 %285 to i64
  %294 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 7, i64 %293
  store i32 %286, i32* %294, align 4
  br label %295

295:                                              ; preds = %291, %284
  %296 = phi i32 [ %292, %291 ], [ %285, %284 ]
  %297 = phi i32 [ %289, %291 ], [ %287, %284 ]
  %298 = add nsw i32 %286, 1
  %299 = sdiv i32 %298, 2
  %300 = shl nsw i32 %299, 1
  %301 = or i32 %300, 1
  %302 = icmp sgt i32 %301, %297
  br i1 %302, label %303, label %284

303:                                              ; preds = %295, %267
  %304 = phi i32 [ %272, %267 ], [ %296, %295 ]
  %305 = phi i32 [ %260, %267 ], [ %282, %295 ]
  %306 = icmp ne i32 %305, 0
  br i1 %306, label %307, label %356

307:                                              ; preds = %303
  %308 = sext i32 %304 to i64
  %309 = sext i32 %305 to i64
  %310 = add nsw i64 %309, -1
  %311 = and i64 %309, 3
  %312 = icmp eq i64 %311, 0
  br i1 %312, label %324, label %313

313:                                              ; preds = %307, %313
  %314 = phi i64 [ %318, %313 ], [ %309, %307 ]
  %315 = phi i64 [ %317, %313 ], [ %308, %307 ]
  %316 = phi i64 [ %322, %313 ], [ %311, %307 ]
  %317 = add nsw i64 %315, 1
  %318 = add nsw i64 %314, -1
  %319 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 7, i64 %318
  %320 = load i32, i32* %319, align 4
  %321 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 7, i64 %315
  store i32 %320, i32* %321, align 4
  %322 = add i64 %316, -1
  %323 = icmp eq i64 %322, 0
  br i1 %323, label %324, label %313, !llvm.loop !6

324:                                              ; preds = %313, %307
  %325 = phi i64 [ undef, %307 ], [ %317, %313 ]
  %326 = phi i64 [ %309, %307 ], [ %318, %313 ]
  %327 = phi i64 [ %308, %307 ], [ %317, %313 ]
  %328 = icmp ult i64 %310, 3
  br i1 %328, label %353, label %329

329:                                              ; preds = %324, %329
  %330 = phi i64 [ %348, %329 ], [ %326, %324 ]
  %331 = phi i64 [ %347, %329 ], [ %327, %324 ]
  %332 = add nsw i64 %331, 1
  %333 = add nsw i64 %330, -1
  %334 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 7, i64 %333
  %335 = load i32, i32* %334, align 4
  %336 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 7, i64 %331
  store i32 %335, i32* %336, align 4
  %337 = add nsw i64 %331, 2
  %338 = add nsw i64 %330, -2
  %339 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 7, i64 %338
  %340 = load i32, i32* %339, align 4
  %341 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 7, i64 %332
  store i32 %340, i32* %341, align 4
  %342 = add nsw i64 %331, 3
  %343 = add nsw i64 %330, -3
  %344 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 7, i64 %343
  %345 = load i32, i32* %344, align 4
  %346 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 7, i64 %337
  store i32 %345, i32* %346, align 4
  %347 = add nsw i64 %331, 4
  %348 = add nsw i64 %330, -4
  %349 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 7, i64 %348
  %350 = load i32, i32* %349, align 4
  %351 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 7, i64 %342
  store i32 %350, i32* %351, align 4
  %352 = icmp eq i64 %348, 0
  br i1 %352, label %353, label %329

353:                                              ; preds = %329, %324
  %354 = phi i64 [ %325, %324 ], [ %347, %329 ]
  %355 = trunc i64 %354 to i32
  br label %356

356:                                              ; preds = %353, %303
  %357 = phi i32 [ %304, %303 ], [ %355, %353 ]
  %358 = icmp sgt i32 %357, 11
  br i1 %358, label %1406, label %359

359:                                              ; preds = %356
  %360 = shl nsw i32 %222, 1
  %361 = add i32 %222, %176
  %362 = zext i32 %357 to i64
  br label %363

363:                                              ; preds = %978, %359
  %364 = phi i64 [ 0, %359 ], [ %382, %978 ]
  %365 = phi i32 [ %221, %359 ], [ %620, %978 ]
  %366 = phi i32 [ 0, %359 ], [ %913, %978 ]
  %367 = phi i32 [ 0, %359 ], [ %914, %978 ]
  %368 = phi double [ 0.000000e+00, %359 ], [ %970, %978 ]
  %369 = phi double [ 0.000000e+00, %359 ], [ %616, %978 ]
  %370 = phi double [ 0.000000e+00, %359 ], [ %950, %978 ]
  %371 = phi double [ 0.000000e+00, %359 ], [ %618, %978 ]
  br label %611

372:                                              ; preds = %478, %611
  %373 = phi i64 [ %612, %611 ], [ %382, %478 ]
  %374 = phi i32 [ %613, %611 ], [ %386, %478 ]
  %375 = sitofp i32 %374 to double
  %376 = fdiv double %224, %375
  %377 = tail call double @sin(double %376) #2
  %378 = fmul double %377, 2.000000e+00
  %379 = fmul double %377, %378
  %380 = fadd double %376, %376
  %381 = tail call double @sin(double %380) #2
  %382 = add nuw i64 %373, 1
  %383 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 7, i64 %373
  %384 = load i32, i32* %383, align 4
  switch i32 %384, label %619 [
    i32 2, label %385
    i32 4, label %485
  ]

385:                                              ; preds = %372
  %386 = sdiv i32 %374, 2
  br label %387

387:                                              ; preds = %408, %385
  %388 = phi i32 [ 0, %385 ], [ %409, %408 ]
  %389 = add nsw i32 %388, %386
  %390 = sext i32 %389 to i64
  %391 = getelementptr inbounds double, double* %2, i64 %390
  %392 = load double, double* %391, align 8
  %393 = getelementptr inbounds double, double* %3, i64 %390
  %394 = load double, double* %393, align 8
  %395 = sext i32 %388 to i64
  %396 = getelementptr inbounds double, double* %2, i64 %395
  %397 = load double, double* %396, align 8
  %398 = fsub double %397, %392
  store double %398, double* %391, align 8
  %399 = getelementptr inbounds double, double* %3, i64 %395
  %400 = load double, double* %399, align 8
  %401 = fsub double %400, %394
  store double %401, double* %393, align 8
  %402 = load double, double* %396, align 8
  %403 = fadd double %392, %402
  store double %403, double* %396, align 8
  %404 = load double, double* %399, align 8
  %405 = fadd double %394, %404
  store double %405, double* %399, align 8
  %406 = add nsw i32 %389, %386
  %407 = icmp slt i32 %406, %182
  br i1 %407, label %408, label %410

408:                                              ; preds = %387, %410
  %409 = phi i32 [ %406, %387 ], [ %411, %410 ]
  br label %387

410:                                              ; preds = %387
  %411 = sub nsw i32 %406, %182
  %412 = icmp slt i32 %411, %222
  br i1 %412, label %408, label %413

413:                                              ; preds = %410
  %414 = icmp slt i32 %411, %386
  br i1 %414, label %415, label %981

415:                                              ; preds = %413
  %416 = add nsw i32 %386, 2
  %417 = fsub double 1.000000e+00, %379
  %418 = sub nsw i32 1, %386
  br label %419

419:                                              ; preds = %478, %415
  %420 = phi i32 [ %479, %478 ], [ %416, %415 ]
  %421 = phi i32 [ %483, %478 ], [ %411, %415 ]
  br label %422

422:                                              ; preds = %461, %419
  %423 = phi i32 [ %421, %419 ], [ %476, %461 ]
  %424 = phi double [ %417, %419 ], [ %475, %461 ]
  %425 = phi double [ %381, %419 ], [ %474, %461 ]
  br label %426

426:                                              ; preds = %456, %422
  %427 = phi i32 [ %423, %422 ], [ %459, %456 ]
  %428 = phi double [ %424, %422 ], [ %458, %456 ]
  br label %429

429:                                              ; preds = %429, %426
  %430 = phi i32 [ %427, %426 ], [ %454, %429 ]
  %431 = add nsw i32 %430, %386
  %432 = sext i32 %430 to i64
  %433 = getelementptr inbounds double, double* %2, i64 %432
  %434 = load double, double* %433, align 8
  %435 = sext i32 %431 to i64
  %436 = getelementptr inbounds double, double* %2, i64 %435
  %437 = load double, double* %436, align 8
  %438 = fsub double %434, %437
  %439 = getelementptr inbounds double, double* %3, i64 %432
  %440 = load double, double* %439, align 8
  %441 = getelementptr inbounds double, double* %3, i64 %435
  %442 = load double, double* %441, align 8
  %443 = fsub double %440, %442
  %444 = fadd double %434, %437
  store double %444, double* %433, align 8
  %445 = load double, double* %441, align 8
  %446 = load double, double* %439, align 8
  %447 = fadd double %445, %446
  store double %447, double* %439, align 8
  %448 = fmul double %428, %438
  %449 = fmul double %425, %443
  %450 = fsub double %448, %449
  store double %450, double* %436, align 8
  %451 = fmul double %425, %438
  %452 = fmul double %428, %443
  %453 = fadd double %451, %452
  store double %453, double* %441, align 8
  %454 = add nsw i32 %431, %386
  %455 = icmp slt i32 %454, %185
  br i1 %455, label %429, label %456

456:                                              ; preds = %429
  %457 = sub nsw i32 %454, %181
  %458 = fsub double -0.000000e+00, %428
  %459 = sub nsw i32 %420, %457
  %460 = icmp sgt i32 %459, %457
  br i1 %460, label %426, label %461

461:                                              ; preds = %456
  %462 = fmul double %379, %458
  %463 = fmul double %381, %425
  %464 = fadd double %463, %462
  %465 = fsub double %458, %464
  %466 = fmul double %381, %458
  %467 = fmul double %379, %425
  %468 = fsub double %466, %467
  %469 = fadd double %425, %468
  %470 = fmul double %465, %465
  %471 = fmul double %469, %469
  %472 = fadd double %470, %471
  %473 = fsub double 2.000000e+00, %472
  %474 = fmul double %469, %473
  %475 = fmul double %465, %473
  %476 = add nsw i32 %459, %222
  %477 = icmp slt i32 %476, %457
  br i1 %477, label %422, label %478

478:                                              ; preds = %461
  %479 = add nsw i32 %420, %184
  %480 = add i32 %418, %479
  %481 = sdiv i32 %480, 2
  %482 = add nsw i32 %481, %222
  %483 = add nsw i32 %482, -1
  %484 = icmp sgt i32 %482, %360
  br i1 %484, label %372, label %419

485:                                              ; preds = %372
  %486 = sdiv i32 %374, 4
  br label %487

487:                                              ; preds = %601, %485
  %488 = phi i32 [ 0, %485 ], [ %602, %601 ]
  %489 = phi double [ 1.000000e+00, %485 ], [ %603, %601 ]
  %490 = phi double [ %615, %485 ], [ %589, %601 ]
  %491 = phi double [ %616, %485 ], [ %594, %601 ]
  %492 = phi double [ 0.000000e+00, %485 ], [ %604, %601 ]
  %493 = phi double [ %617, %485 ], [ %591, %601 ]
  %494 = phi double [ %618, %485 ], [ %597, %601 ]
  %495 = fcmp oeq double %492, 0.000000e+00
  br label %496

496:                                              ; preds = %568, %487
  %497 = phi i32 [ %488, %487 ], [ %570, %568 ]
  %498 = add nsw i32 %497, %486
  %499 = add nsw i32 %498, %486
  %500 = add nsw i32 %499, %486
  %501 = sext i32 %497 to i64
  %502 = getelementptr inbounds double, double* %2, i64 %501
  %503 = load double, double* %502, align 8
  %504 = sext i32 %499 to i64
  %505 = getelementptr inbounds double, double* %2, i64 %504
  %506 = load double, double* %505, align 8
  %507 = fadd double %503, %506
  %508 = fsub double %503, %506
  %509 = sext i32 %498 to i64
  %510 = getelementptr inbounds double, double* %2, i64 %509
  %511 = load double, double* %510, align 8
  %512 = sext i32 %500 to i64
  %513 = getelementptr inbounds double, double* %2, i64 %512
  %514 = load double, double* %513, align 8
  %515 = fadd double %511, %514
  %516 = fsub double %511, %514
  %517 = getelementptr inbounds double, double* %3, i64 %501
  %518 = load double, double* %517, align 8
  %519 = getelementptr inbounds double, double* %3, i64 %504
  %520 = load double, double* %519, align 8
  %521 = fadd double %518, %520
  %522 = fsub double %518, %520
  %523 = getelementptr inbounds double, double* %3, i64 %509
  %524 = load double, double* %523, align 8
  %525 = getelementptr inbounds double, double* %3, i64 %512
  %526 = load double, double* %525, align 8
  %527 = fadd double %524, %526
  %528 = fsub double %524, %526
  %529 = fadd double %507, %515
  store double %529, double* %502, align 8
  %530 = fadd double %521, %527
  store double %530, double* %517, align 8
  %531 = fsub double %507, %515
  %532 = fsub double %521, %527
  br i1 %174, label %533, label %538

533:                                              ; preds = %496
  %534 = fadd double %508, %528
  %535 = fsub double %522, %516
  %536 = fsub double %508, %528
  %537 = fadd double %516, %522
  br label %543

538:                                              ; preds = %496
  %539 = fsub double %508, %528
  %540 = fadd double %516, %522
  %541 = fadd double %508, %528
  %542 = fsub double %522, %516
  br label %543

543:                                              ; preds = %538, %533
  %544 = phi double [ %536, %533 ], [ %541, %538 ]
  %545 = phi double [ %534, %533 ], [ %539, %538 ]
  %546 = phi double [ %537, %533 ], [ %542, %538 ]
  %547 = phi double [ %535, %533 ], [ %540, %538 ]
  br i1 %495, label %548, label %549

548:                                              ; preds = %543
  store double %545, double* %510, align 8
  store double %531, double* %505, align 8
  store double %544, double* %513, align 8
  store double %547, double* %523, align 8
  store double %532, double* %519, align 8
  br label %568

549:                                              ; preds = %543
  %550 = fmul double %489, %545
  %551 = fmul double %492, %547
  %552 = fsub double %550, %551
  store double %552, double* %510, align 8
  %553 = fmul double %490, %531
  %554 = fmul double %493, %532
  %555 = fsub double %553, %554
  store double %555, double* %505, align 8
  %556 = fmul double %491, %544
  %557 = fmul double %494, %546
  %558 = fsub double %556, %557
  store double %558, double* %513, align 8
  %559 = fmul double %492, %545
  %560 = fmul double %489, %547
  %561 = fadd double %559, %560
  store double %561, double* %523, align 8
  %562 = fmul double %493, %531
  %563 = fmul double %490, %532
  %564 = fadd double %562, %563
  store double %564, double* %519, align 8
  %565 = fmul double %494, %544
  %566 = fmul double %491, %546
  %567 = fadd double %565, %566
  br label %568

568:                                              ; preds = %549, %548
  %569 = phi double [ %567, %549 ], [ %546, %548 ]
  store double %569, double* %525, align 8
  %570 = add nsw i32 %500, %486
  %571 = icmp slt i32 %570, %181
  br i1 %571, label %496, label %572

572:                                              ; preds = %568
  %573 = fmul double %379, %489
  %574 = fmul double %381, %492
  %575 = fadd double %573, %574
  %576 = fsub double %489, %575
  %577 = fmul double %381, %489
  %578 = fmul double %379, %492
  %579 = fsub double %577, %578
  %580 = fadd double %492, %579
  %581 = fmul double %576, %576
  %582 = fmul double %580, %580
  %583 = fadd double %581, %582
  %584 = fsub double 2.000000e+00, %583
  %585 = fmul double %580, %584
  %586 = fmul double %576, %584
  %587 = fmul double %586, %586
  %588 = fmul double %585, %585
  %589 = fsub double %587, %588
  %590 = fmul double %586, 2.000000e+00
  %591 = fmul double %585, %590
  %592 = fmul double %586, %589
  %593 = fmul double %585, %591
  %594 = fsub double %592, %593
  %595 = fmul double %585, %589
  %596 = fmul double %586, %591
  %597 = fadd double %595, %596
  %598 = sub nsw i32 %570, %181
  %599 = add nsw i32 %598, %222
  %600 = icmp slt i32 %599, %486
  br i1 %600, label %601, label %605

601:                                              ; preds = %572, %605
  %602 = phi i32 [ %599, %572 ], [ %607, %605 ]
  %603 = phi double [ %586, %572 ], [ 1.000000e+00, %605 ]
  %604 = phi double [ %585, %572 ], [ 0.000000e+00, %605 ]
  br label %487

605:                                              ; preds = %572
  %606 = sub nsw i32 %599, %486
  %607 = add nsw i32 %606, %176
  %608 = icmp slt i32 %607, %222
  br i1 %608, label %601, label %609

609:                                              ; preds = %605
  %610 = icmp eq i32 %486, %222
  br i1 %610, label %981, label %611

611:                                              ; preds = %363, %609
  %612 = phi i64 [ %364, %363 ], [ %382, %609 ]
  %613 = phi i32 [ %365, %363 ], [ %486, %609 ]
  %614 = phi i32 [ %367, %363 ], [ %500, %609 ]
  %615 = phi double [ %368, %363 ], [ %589, %609 ]
  %616 = phi double [ %369, %363 ], [ %594, %609 ]
  %617 = phi double [ %370, %363 ], [ %591, %609 ]
  %618 = phi double [ %371, %363 ], [ %597, %609 ]
  br label %372

619:                                              ; preds = %372
  %620 = sdiv i32 %374, %384
  switch i32 %384, label %753 [
    i32 3, label %621
    i32 5, label %667
  ]

621:                                              ; preds = %619, %662
  %622 = phi i32 [ %663, %662 ], [ 0, %619 ]
  %623 = add nsw i32 %622, %620
  %624 = add nsw i32 %623, %620
  %625 = sext i32 %622 to i64
  %626 = getelementptr inbounds double, double* %2, i64 %625
  %627 = load double, double* %626, align 8
  %628 = getelementptr inbounds double, double* %3, i64 %625
  %629 = load double, double* %628, align 8
  %630 = sext i32 %623 to i64
  %631 = getelementptr inbounds double, double* %2, i64 %630
  %632 = load double, double* %631, align 8
  %633 = sext i32 %624 to i64
  %634 = getelementptr inbounds double, double* %2, i64 %633
  %635 = load double, double* %634, align 8
  %636 = fadd double %632, %635
  %637 = getelementptr inbounds double, double* %3, i64 %630
  %638 = load double, double* %637, align 8
  %639 = getelementptr inbounds double, double* %3, i64 %633
  %640 = load double, double* %639, align 8
  %641 = fadd double %638, %640
  %642 = fadd double %627, %636
  store double %642, double* %626, align 8
  %643 = fadd double %629, %641
  store double %643, double* %628, align 8
  %644 = fmul double %636, 5.000000e-01
  %645 = fsub double %627, %644
  %646 = fmul double %641, 5.000000e-01
  %647 = fsub double %629, %646
  %648 = load double, double* %631, align 8
  %649 = load double, double* %634, align 8
  %650 = fsub double %648, %649
  %651 = fmul double %177, %650
  %652 = load double, double* %637, align 8
  %653 = load double, double* %639, align 8
  %654 = fsub double %652, %653
  %655 = fmul double %177, %654
  %656 = fsub double %645, %655
  store double %656, double* %631, align 8
  %657 = fadd double %645, %655
  store double %657, double* %634, align 8
  %658 = fadd double %647, %651
  store double %658, double* %637, align 8
  %659 = fsub double %647, %651
  store double %659, double* %639, align 8
  %660 = add nsw i32 %624, %620
  %661 = icmp slt i32 %660, %187
  br i1 %661, label %662, label %664

662:                                              ; preds = %621, %664
  %663 = phi i32 [ %660, %621 ], [ %665, %664 ]
  br label %621

664:                                              ; preds = %621
  %665 = sub nsw i32 %660, %182
  %666 = icmp slt i32 %665, %620
  br i1 %666, label %662, label %912

667:                                              ; preds = %619, %748
  %668 = phi i32 [ %749, %748 ], [ 0, %619 ]
  %669 = add nsw i32 %668, %620
  %670 = add nsw i32 %669, %620
  %671 = add nsw i32 %670, %620
  %672 = add nsw i32 %671, %620
  %673 = sext i32 %669 to i64
  %674 = getelementptr inbounds double, double* %2, i64 %673
  %675 = load double, double* %674, align 8
  %676 = sext i32 %672 to i64
  %677 = getelementptr inbounds double, double* %2, i64 %676
  %678 = load double, double* %677, align 8
  %679 = fadd double %675, %678
  %680 = fsub double %675, %678
  %681 = getelementptr inbounds double, double* %3, i64 %673
  %682 = load double, double* %681, align 8
  %683 = getelementptr inbounds double, double* %3, i64 %676
  %684 = load double, double* %683, align 8
  %685 = fadd double %682, %684
  %686 = fsub double %682, %684
  %687 = sext i32 %670 to i64
  %688 = getelementptr inbounds double, double* %2, i64 %687
  %689 = load double, double* %688, align 8
  %690 = sext i32 %671 to i64
  %691 = getelementptr inbounds double, double* %2, i64 %690
  %692 = load double, double* %691, align 8
  %693 = fadd double %689, %692
  %694 = fsub double %689, %692
  %695 = getelementptr inbounds double, double* %3, i64 %687
  %696 = load double, double* %695, align 8
  %697 = getelementptr inbounds double, double* %3, i64 %690
  %698 = load double, double* %697, align 8
  %699 = fadd double %696, %698
  %700 = fsub double %696, %698
  %701 = sext i32 %668 to i64
  %702 = getelementptr inbounds double, double* %2, i64 %701
  %703 = load double, double* %702, align 8
  %704 = getelementptr inbounds double, double* %3, i64 %701
  %705 = load double, double* %704, align 8
  %706 = fadd double %679, %703
  %707 = fadd double %693, %706
  store double %707, double* %702, align 8
  %708 = fadd double %685, %705
  %709 = fadd double %699, %708
  store double %709, double* %704, align 8
  %710 = fmul double %679, 0x3FD3C6EF372FE94F
  %711 = fmul double %693, 0x3FE9E3779B97F4A7
  %712 = fsub double %710, %711
  %713 = fadd double %712, %703
  %714 = fmul double %685, 0x3FD3C6EF372FE94F
  %715 = fmul double %699, 0x3FE9E3779B97F4A7
  %716 = fsub double %714, %715
  %717 = fadd double %705, %716
  %718 = fmul double %178, %680
  %719 = fmul double %186, %694
  %720 = fadd double %718, %719
  %721 = fmul double %178, %686
  %722 = fmul double %186, %700
  %723 = fadd double %721, %722
  %724 = fsub double %713, %723
  store double %724, double* %674, align 8
  %725 = fadd double %713, %723
  store double %725, double* %677, align 8
  %726 = fadd double %720, %717
  store double %726, double* %681, align 8
  %727 = fsub double %717, %720
  store double %727, double* %683, align 8
  %728 = fmul double %679, 0x3FE9E3779B97F4A7
  %729 = fmul double %693, 0x3FD3C6EF372FE94F
  %730 = fsub double %729, %728
  %731 = fadd double %730, %703
  %732 = fmul double %685, 0x3FE9E3779B97F4A7
  %733 = fmul double %699, 0x3FD3C6EF372FE94F
  %734 = fsub double %733, %732
  %735 = fadd double %705, %734
  %736 = fmul double %186, %680
  %737 = fmul double %178, %694
  %738 = fsub double %736, %737
  %739 = fmul double %186, %686
  %740 = fmul double %178, %700
  %741 = fsub double %739, %740
  %742 = fsub double %731, %741
  store double %742, double* %688, align 8
  %743 = fadd double %731, %741
  store double %743, double* %691, align 8
  %744 = fadd double %738, %735
  store double %744, double* %695, align 8
  %745 = fsub double %735, %738
  store double %745, double* %697, align 8
  %746 = add nsw i32 %672, %620
  %747 = icmp slt i32 %746, %187
  br i1 %747, label %748, label %750

748:                                              ; preds = %667, %750
  %749 = phi i32 [ %746, %667 ], [ %751, %750 ]
  br label %667

750:                                              ; preds = %667
  %751 = sub nsw i32 %746, %182
  %752 = icmp slt i32 %751, %620
  br i1 %752, label %748, label %912

753:                                              ; preds = %619
  %754 = icmp eq i32 %384, %366
  br i1 %754, label %755, label %757

755:                                              ; preds = %753
  %756 = sext i32 %366 to i64
  br label %795

757:                                              ; preds = %753
  %758 = sitofp i32 %384 to double
  %759 = fdiv double %183, %758
  %760 = tail call double @cos(double %759) #2
  %761 = tail call double @sin(double %759) #2
  %762 = icmp sgt i32 %384, %166
  br i1 %762, label %1406, label %763

763:                                              ; preds = %757
  %764 = add nsw i32 %384, -1
  %765 = sext i32 %764 to i64
  %766 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 4, i64 %765
  store double 1.000000e+00, double* %766, align 8
  %767 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 5, i64 %765
  store double 0.000000e+00, double* %767, align 8
  %768 = sext i32 %384 to i64
  br label %769

769:                                              ; preds = %769, %763
  %770 = phi i64 [ %772, %769 ], [ %768, %763 ]
  %771 = phi i64 [ %793, %769 ], [ 1, %763 ]
  %772 = add nsw i64 %770, -1
  %773 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 4, i64 %772
  %774 = load double, double* %773, align 8
  %775 = fmul double %760, %774
  %776 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 5, i64 %772
  %777 = load double, double* %776, align 8
  %778 = fmul double %761, %777
  %779 = fadd double %775, %778
  %780 = add nsw i64 %771, -1
  %781 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 4, i64 %780
  store double %779, double* %781, align 8
  %782 = load double, double* %773, align 8
  %783 = fmul double %761, %782
  %784 = load double, double* %776, align 8
  %785 = fmul double %760, %784
  %786 = fsub double %783, %785
  %787 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 5, i64 %780
  store double %786, double* %787, align 8
  %788 = add nsw i64 %770, -2
  %789 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 4, i64 %788
  store double %779, double* %789, align 8
  %790 = load double, double* %787, align 8
  %791 = fsub double -0.000000e+00, %790
  %792 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 5, i64 %788
  store double %791, double* %792, align 8
  %793 = add nuw nsw i64 %771, 1
  %794 = icmp slt i64 %793, %772
  br i1 %794, label %769, label %795

795:                                              ; preds = %769, %755
  %796 = phi i64 [ %756, %755 ], [ %768, %769 ]
  %797 = phi i32 [ %366, %755 ], [ %384, %769 ]
  %798 = sext i32 %620 to i64
  %799 = sext i32 %374 to i64
  br label %800

800:                                              ; preds = %908, %795
  %801 = phi i32 [ 0, %795 ], [ %910, %908 ]
  %802 = add i32 %801, %620
  %803 = sext i32 %801 to i64
  br label %804

804:                                              ; preds = %905, %800
  %805 = phi i64 [ %808, %905 ], [ %803, %800 ]
  %806 = phi i32 [ %907, %905 ], [ %802, %800 ]
  %807 = sext i32 %806 to i64
  %808 = add nsw i64 %805, %799
  %809 = getelementptr inbounds double, double* %2, i64 %805
  %810 = load double, double* %809, align 8
  %811 = getelementptr inbounds double, double* %3, i64 %805
  %812 = load double, double* %811, align 8
  %813 = trunc i64 %808 to i32
  br label %814

814:                                              ; preds = %814, %804
  %815 = phi i64 [ %846, %814 ], [ %807, %804 ]
  %816 = phi i64 [ %837, %814 ], [ 1, %804 ]
  %817 = phi i32 [ %820, %814 ], [ %813, %804 ]
  %818 = phi double [ %829, %814 ], [ %810, %804 ]
  %819 = phi double [ %836, %814 ], [ %812, %804 ]
  %820 = sub nsw i32 %817, %620
  %821 = add nuw nsw i64 %816, 1
  %822 = getelementptr inbounds double, double* %2, i64 %815
  %823 = load double, double* %822, align 8
  %824 = sext i32 %820 to i64
  %825 = getelementptr inbounds double, double* %2, i64 %824
  %826 = load double, double* %825, align 8
  %827 = fadd double %823, %826
  %828 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 2, i64 %816
  store double %827, double* %828, align 8
  %829 = fadd double %818, %827
  %830 = getelementptr inbounds double, double* %3, i64 %815
  %831 = load double, double* %830, align 8
  %832 = getelementptr inbounds double, double* %3, i64 %824
  %833 = load double, double* %832, align 8
  %834 = fadd double %831, %833
  %835 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 3, i64 %816
  store double %834, double* %835, align 8
  %836 = fadd double %819, %834
  %837 = add nuw nsw i64 %816, 2
  %838 = load double, double* %822, align 8
  %839 = load double, double* %825, align 8
  %840 = fsub double %838, %839
  %841 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 2, i64 %821
  store double %840, double* %841, align 8
  %842 = load double, double* %830, align 8
  %843 = load double, double* %832, align 8
  %844 = fsub double %842, %843
  %845 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 3, i64 %821
  store double %844, double* %845, align 8
  %846 = add i64 %815, %798
  %847 = icmp slt i64 %846, %824
  br i1 %847, label %814, label %848

848:                                              ; preds = %814
  store double %829, double* %809, align 8
  store double %836, double* %811, align 8
  %849 = insertelement <2 x double> <double 0.000000e+00, double undef>, double %810, i32 1
  %850 = insertelement <2 x double> <double 0.000000e+00, double undef>, double %812, i32 1
  br label %851

851:                                              ; preds = %886, %848
  %852 = phi i64 [ %887, %886 ], [ %805, %848 ]
  %853 = phi i32 [ %903, %886 ], [ 1, %848 ]
  %854 = phi i32 [ %888, %886 ], [ %813, %848 ]
  br label %855

855:                                              ; preds = %855, %851
  %856 = phi i64 [ %866, %855 ], [ 1, %851 ]
  %857 = phi i32 [ %884, %855 ], [ %853, %851 ]
  %858 = phi <2 x double> [ %875, %855 ], [ %849, %851 ]
  %859 = phi <2 x double> [ %880, %855 ], [ %850, %851 ]
  %860 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 2, i64 %856
  %861 = add nsw i32 %857, -1
  %862 = sext i32 %861 to i64
  %863 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 4, i64 %862
  %864 = load double, double* %863, align 8
  %865 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 3, i64 %856
  %866 = add nuw nsw i64 %856, 2
  %867 = bitcast double* %860 to <2 x double>*
  %868 = load <2 x double>, <2 x double>* %867, align 8
  %869 = shufflevector <2 x double> %868, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %870 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 5, i64 %862
  %871 = load double, double* %870, align 8
  %872 = insertelement <2 x double> undef, double %871, i32 0
  %873 = insertelement <2 x double> %872, double %864, i32 1
  %874 = fmul <2 x double> %869, %873
  %875 = fadd <2 x double> %858, %874
  %876 = bitcast double* %865 to <2 x double>*
  %877 = load <2 x double>, <2 x double>* %876, align 8
  %878 = shufflevector <2 x double> %877, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %879 = fmul <2 x double> %873, %878
  %880 = fadd <2 x double> %859, %879
  %881 = add nsw i32 %857, %853
  %882 = icmp sgt i32 %881, %797
  %883 = select i1 %882, i32 %797, i32 0
  %884 = sub nsw i32 %881, %883
  %885 = icmp slt i64 %866, %796
  br i1 %885, label %855, label %886

886:                                              ; preds = %855
  %887 = add i64 %852, %798
  %888 = sub nsw i32 %854, %620
  %889 = sub nsw i32 %797, %853
  %890 = extractelement <2 x double> %875, i32 1
  %891 = extractelement <2 x double> %880, i32 0
  %892 = fsub double %890, %891
  %893 = getelementptr inbounds double, double* %2, i64 %887
  store double %892, double* %893, align 8
  %894 = extractelement <2 x double> %875, i32 0
  %895 = extractelement <2 x double> %880, i32 1
  %896 = fadd double %895, %894
  %897 = getelementptr inbounds double, double* %3, i64 %887
  store double %896, double* %897, align 8
  %898 = fadd double %890, %891
  %899 = sext i32 %888 to i64
  %900 = getelementptr inbounds double, double* %2, i64 %899
  store double %898, double* %900, align 8
  %901 = fsub double %895, %894
  %902 = getelementptr inbounds double, double* %3, i64 %899
  store double %901, double* %902, align 8
  %903 = add nuw nsw i32 %853, 1
  %904 = icmp slt i32 %903, %889
  br i1 %904, label %851, label %905

905:                                              ; preds = %886
  %906 = icmp slt i64 %808, %188
  %907 = add i32 %806, %374
  br i1 %906, label %804, label %908

908:                                              ; preds = %905
  %909 = trunc i64 %808 to i32
  %910 = sub nsw i32 %909, %182
  %911 = icmp slt i32 %910, %620
  br i1 %911, label %800, label %912

912:                                              ; preds = %750, %664, %908
  %913 = phi i32 [ %797, %908 ], [ %366, %664 ], [ %366, %750 ]
  %914 = phi i32 [ %614, %908 ], [ %614, %664 ], [ %671, %750 ]
  %915 = icmp eq i64 %382, %362
  br i1 %915, label %981, label %916

916:                                              ; preds = %912
  %917 = sub i32 %361, %620
  %918 = fsub double 1.000000e+00, %379
  %919 = sext i32 %374 to i64
  br label %920

920:                                              ; preds = %974, %916
  %921 = phi i32 [ %222, %916 ], [ %975, %974 ]
  %922 = phi double [ %918, %916 ], [ %976, %974 ]
  %923 = phi double [ %381, %916 ], [ %977, %974 ]
  %924 = add nsw i32 %921, %620
  br label %925

925:                                              ; preds = %945, %920
  %926 = phi i32 [ %924, %920 ], [ %954, %945 ]
  %927 = phi double [ %922, %920 ], [ %952, %945 ]
  %928 = phi double [ %923, %920 ], [ %950, %945 ]
  %929 = sext i32 %926 to i64
  br label %930

930:                                              ; preds = %930, %925
  %931 = phi i64 [ %943, %930 ], [ %929, %925 ]
  %932 = getelementptr inbounds double, double* %2, i64 %931
  %933 = load double, double* %932, align 8
  %934 = fmul double %927, %933
  %935 = getelementptr inbounds double, double* %3, i64 %931
  %936 = load double, double* %935, align 8
  %937 = fmul double %928, %936
  %938 = fsub double %934, %937
  store double %938, double* %932, align 8
  %939 = fmul double %928, %933
  %940 = load double, double* %935, align 8
  %941 = fmul double %927, %940
  %942 = fadd double %939, %941
  store double %942, double* %935, align 8
  %943 = add i64 %931, %919
  %944 = icmp slt i64 %943, %189
  br i1 %944, label %930, label %945

945:                                              ; preds = %930
  %946 = trunc i64 %943 to i32
  %947 = fmul double %923, %928
  %948 = fmul double %923, %927
  %949 = fmul double %922, %928
  %950 = fadd double %948, %949
  %951 = fmul double %922, %927
  %952 = fsub double %951, %947
  %953 = sub nsw i32 %946, %181
  %954 = add nsw i32 %953, %620
  %955 = icmp slt i32 %954, %374
  br i1 %955, label %925, label %956

956:                                              ; preds = %945
  %957 = fmul double %379, %922
  %958 = fmul double %381, %923
  %959 = fadd double %957, %958
  %960 = fsub double %922, %959
  %961 = fmul double %381, %922
  %962 = fmul double %379, %923
  %963 = fsub double %961, %962
  %964 = fadd double %923, %963
  %965 = fmul double %960, %960
  %966 = fmul double %964, %964
  %967 = fadd double %965, %966
  %968 = fsub double 2.000000e+00, %967
  %969 = fmul double %964, %968
  %970 = fmul double %960, %968
  %971 = sub nsw i32 %954, %374
  %972 = add nsw i32 %971, %222
  %973 = icmp slt i32 %972, %620
  br i1 %973, label %974, label %978

974:                                              ; preds = %956, %978
  %975 = phi i32 [ %972, %956 ], [ %979, %978 ]
  %976 = phi double [ %970, %956 ], [ %918, %978 ]
  %977 = phi double [ %969, %956 ], [ %381, %978 ]
  br label %920

978:                                              ; preds = %956
  %979 = add i32 %917, %972
  %980 = icmp slt i32 %979, %360
  br i1 %980, label %974, label %363

981:                                              ; preds = %912, %413, %609
  %982 = phi i32 [ %614, %413 ], [ %500, %609 ], [ %914, %912 ]
  store i32 %221, i32* %190, align 8
  %983 = shl i32 %305, 1
  %984 = or i32 %983, 1
  br i1 %306, label %985, label %1138

985:                                              ; preds = %981
  %986 = icmp slt i32 %357, %984
  %987 = select i1 %986, i32 %983, i32 %984
  %988 = sext i32 %987 to i64
  %989 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 6, i64 %988
  store i32 %222, i32* %989, align 4
  br label %990

990:                                              ; preds = %990, %985
  %991 = phi i64 [ %1003, %990 ], [ %988, %985 ]
  %992 = phi i64 [ %1005, %990 ], [ 1, %985 ]
  %993 = add nsw i64 %992, -1
  %994 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 6, i64 %993
  %995 = load i32, i32* %994, align 4
  %996 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 7, i64 %993
  %997 = load i32, i32* %996, align 4
  %998 = sdiv i32 %995, %997
  %999 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 6, i64 %992
  store i32 %998, i32* %999, align 4
  %1000 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 6, i64 %991
  %1001 = load i32, i32* %1000, align 4
  %1002 = mul nsw i32 %1001, %997
  %1003 = add nsw i64 %991, -1
  %1004 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 6, i64 %1003
  store i32 %1002, i32* %1004, align 4
  %1005 = add nuw nsw i64 %992, 1
  %1006 = icmp slt i64 %1005, %1003
  br i1 %1006, label %990, label %1007

1007:                                             ; preds = %990
  %1008 = load i32, i32* %191, align 4
  %1009 = icmp eq i64 %43, %212
  br i1 %1009, label %1014, label %1010

1010:                                             ; preds = %1007
  %1011 = sub nsw i32 %221, %222
  %1012 = add i32 %222, -1
  %1013 = add nsw i32 %221, -1
  br label %1018

1014:                                             ; preds = %1007
  %1015 = add nsw i32 %221, -1
  %1016 = sext i32 %1008 to i64
  %1017 = sext i32 %1015 to i64
  br label %1086

1018:                                             ; preds = %1049, %1010
  %1019 = phi i32 [ %1008, %1010 ], [ %1050, %1049 ]
  %1020 = phi i32 [ %222, %1010 ], [ %1051, %1049 ]
  %1021 = add i32 %1012, %1020
  %1022 = sext i32 %1019 to i64
  %1023 = sext i32 %1020 to i64
  %1024 = sext i32 %1021 to i64
  br label %1025

1025:                                             ; preds = %1025, %1018
  %1026 = phi i64 [ %1040, %1025 ], [ %1023, %1018 ]
  %1027 = phi i64 [ %1041, %1025 ], [ %1022, %1018 ]
  %1028 = getelementptr inbounds double, double* %2, i64 %1026
  %1029 = bitcast double* %1028 to i64*
  %1030 = load i64, i64* %1029, align 8
  %1031 = getelementptr inbounds double, double* %2, i64 %1027
  %1032 = bitcast double* %1031 to i64*
  %1033 = load i64, i64* %1032, align 8
  store i64 %1033, i64* %1029, align 8
  store i64 %1030, i64* %1032, align 8
  %1034 = getelementptr inbounds double, double* %3, i64 %1026
  %1035 = bitcast double* %1034 to i64*
  %1036 = load i64, i64* %1035, align 8
  %1037 = getelementptr inbounds double, double* %3, i64 %1027
  %1038 = bitcast double* %1037 to i64*
  %1039 = load i64, i64* %1038, align 8
  store i64 %1039, i64* %1035, align 8
  store i64 %1036, i64* %1038, align 8
  %1040 = add nsw i64 %1026, %192
  %1041 = add i64 %1027, %192
  %1042 = icmp slt i64 %1040, %1024
  br i1 %1042, label %1025, label %1043

1043:                                             ; preds = %1025
  %1044 = trunc i64 %1040 to i32
  %1045 = trunc i64 %1041 to i32
  %1046 = add nsw i32 %1011, %1044
  %1047 = add nsw i32 %1011, %1045
  %1048 = icmp slt i32 %1046, %185
  br i1 %1048, label %1049, label %1052

1049:                                             ; preds = %1075, %1043, %1052
  %1050 = phi i32 [ %1047, %1043 ], [ %1054, %1052 ], [ %1076, %1075 ]
  %1051 = phi i32 [ %1046, %1043 ], [ %1056, %1052 ], [ %1077, %1075 ]
  br label %1018

1052:                                             ; preds = %1043
  %1053 = sub nsw i32 %1047, %181
  %1054 = add nsw i32 %1053, %1008
  %1055 = sub nsw i32 %1046, %181
  %1056 = add nsw i32 %1055, %222
  %1057 = icmp slt i32 %1054, %1013
  br i1 %1057, label %1049, label %1058

1058:                                             ; preds = %1052
  %1059 = load i32, i32* %190, align 4
  %1060 = load i32, i32* %191, align 4
  br label %1061

1061:                                             ; preds = %1084, %1058
  %1062 = phi i32 [ %1082, %1084 ], [ %1054, %1058 ]
  %1063 = phi i32 [ %1081, %1084 ], [ %1056, %1058 ]
  br label %1064

1064:                                             ; preds = %1064, %1061
  %1065 = phi i32 [ %1072, %1064 ], [ %1060, %1061 ]
  %1066 = phi i32 [ %1065, %1064 ], [ %1059, %1061 ]
  %1067 = phi i64 [ %1070, %1064 ], [ 1, %1061 ]
  %1068 = phi i32 [ %1073, %1064 ], [ %1062, %1061 ]
  %1069 = sub nsw i32 %1068, %1066
  %1070 = add nuw i64 %1067, 1
  %1071 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 6, i64 %1070
  %1072 = load i32, i32* %1071, align 4
  %1073 = add nsw i32 %1072, %1069
  %1074 = icmp sgt i32 %1073, %1065
  br i1 %1074, label %1064, label %1075

1075:                                             ; preds = %1064, %1080
  %1076 = phi i32 [ %1082, %1080 ], [ %1073, %1064 ]
  %1077 = phi i32 [ %1081, %1080 ], [ %1063, %1064 ]
  %1078 = add nsw i32 %1076, -1
  %1079 = icmp slt i32 %1077, %1078
  br i1 %1079, label %1049, label %1080

1080:                                             ; preds = %1075
  %1081 = add nsw i32 %1077, %222
  %1082 = add nsw i32 %1076, %1008
  %1083 = icmp slt i32 %1082, %1013
  br i1 %1083, label %1075, label %1084

1084:                                             ; preds = %1080
  %1085 = icmp slt i32 %1081, %1013
  br i1 %1085, label %1061, label %1138

1086:                                             ; preds = %1128, %1014
  %1087 = phi i32 [ %1008, %1014 ], [ %1129, %1128 ]
  %1088 = phi i32 [ %222, %1014 ], [ %1130, %1128 ]
  %1089 = sext i32 %1087 to i64
  %1090 = sext i32 %1088 to i64
  br label %1091

1091:                                             ; preds = %1091, %1086
  %1092 = phi i64 [ %1106, %1091 ], [ %1090, %1086 ]
  %1093 = phi i64 [ %1107, %1091 ], [ %1089, %1086 ]
  %1094 = getelementptr inbounds double, double* %2, i64 %1092
  %1095 = bitcast double* %1094 to i64*
  %1096 = load i64, i64* %1095, align 8
  %1097 = getelementptr inbounds double, double* %2, i64 %1093
  %1098 = bitcast double* %1097 to i64*
  %1099 = load i64, i64* %1098, align 8
  store i64 %1099, i64* %1095, align 8
  store i64 %1096, i64* %1098, align 8
  %1100 = getelementptr inbounds double, double* %3, i64 %1092
  %1101 = bitcast double* %1100 to i64*
  %1102 = load i64, i64* %1101, align 8
  %1103 = getelementptr inbounds double, double* %3, i64 %1093
  %1104 = bitcast double* %1103 to i64*
  %1105 = load i64, i64* %1104, align 8
  store i64 %1105, i64* %1101, align 8
  store i64 %1102, i64* %1104, align 8
  %1106 = add i64 %1092, %192
  %1107 = add i64 %1093, %1016
  %1108 = icmp slt i64 %1107, %1017
  br i1 %1108, label %1091, label %1109

1109:                                             ; preds = %1091
  %1110 = trunc i64 %1106 to i32
  %1111 = trunc i64 %1107 to i32
  %1112 = load i32, i32* %190, align 4
  %1113 = load i32, i32* %191, align 4
  br label %1114

1114:                                             ; preds = %1136, %1109
  %1115 = phi i32 [ %1134, %1136 ], [ %1111, %1109 ]
  %1116 = phi i32 [ %1133, %1136 ], [ %1110, %1109 ]
  br label %1117

1117:                                             ; preds = %1117, %1114
  %1118 = phi i32 [ %1125, %1117 ], [ %1113, %1114 ]
  %1119 = phi i32 [ %1118, %1117 ], [ %1112, %1114 ]
  %1120 = phi i64 [ %1123, %1117 ], [ 1, %1114 ]
  %1121 = phi i32 [ %1126, %1117 ], [ %1115, %1114 ]
  %1122 = sub nsw i32 %1121, %1119
  %1123 = add nuw i64 %1120, 1
  %1124 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 6, i64 %1123
  %1125 = load i32, i32* %1124, align 4
  %1126 = add nsw i32 %1125, %1122
  %1127 = icmp slt i32 %1126, %1118
  br i1 %1127, label %1128, label %1117

1128:                                             ; preds = %1117, %1132
  %1129 = phi i32 [ %1134, %1132 ], [ %1126, %1117 ]
  %1130 = phi i32 [ %1133, %1132 ], [ %1116, %1117 ]
  %1131 = icmp slt i32 %1130, %1129
  br i1 %1131, label %1086, label %1132

1132:                                             ; preds = %1128
  %1133 = add nsw i32 %1130, %176
  %1134 = add nsw i32 %1129, %1008
  %1135 = icmp slt i32 %1134, %1015
  br i1 %1135, label %1128, label %1136

1136:                                             ; preds = %1132
  %1137 = icmp slt i32 %1133, %1015
  br i1 %1137, label %1114, label %1138

1138:                                             ; preds = %1084, %1136, %981
  %1139 = phi i32 [ %222, %981 ], [ %1002, %1136 ], [ %1002, %1084 ]
  %1140 = phi i32 [ %982, %981 ], [ %1002, %1136 ], [ %1002, %1084 ]
  %1141 = icmp slt i32 %984, %357
  br i1 %1141, label %1142, label %1374

1142:                                             ; preds = %1138
  %1143 = sext i32 %305 to i64
  %1144 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 6, i64 %1143
  %1145 = load i32, i32* %1144, align 4
  %1146 = sub i32 %357, %305
  %1147 = sext i32 %1146 to i64
  %1148 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 7, i64 %1147
  store i32 1, i32* %1148, align 4
  %1149 = sub i32 %357, %983
  %1150 = xor i32 %983, -1
  %1151 = add i32 %357, %1150
  %1152 = and i32 %1149, 3
  %1153 = icmp ult i32 %1151, 3
  br i1 %1153, label %1178, label %1154

1154:                                             ; preds = %1142
  %1155 = sub i32 %1149, %1152
  br label %1156

1156:                                             ; preds = %1156, %1154
  %1157 = phi i32 [ 1, %1154 ], [ %1175, %1156 ]
  %1158 = phi i64 [ %1147, %1154 ], [ %1172, %1156 ]
  %1159 = phi i32 [ %1155, %1154 ], [ %1176, %1156 ]
  %1160 = add nsw i64 %1158, -1
  %1161 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 7, i64 %1160
  %1162 = load i32, i32* %1161, align 4
  %1163 = mul nsw i32 %1162, %1157
  store i32 %1163, i32* %1161, align 4
  %1164 = add nsw i64 %1158, -2
  %1165 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 7, i64 %1164
  %1166 = load i32, i32* %1165, align 4
  %1167 = mul nsw i32 %1166, %1163
  store i32 %1167, i32* %1165, align 4
  %1168 = add nsw i64 %1158, -3
  %1169 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 7, i64 %1168
  %1170 = load i32, i32* %1169, align 4
  %1171 = mul nsw i32 %1170, %1167
  store i32 %1171, i32* %1169, align 4
  %1172 = add nsw i64 %1158, -4
  %1173 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 7, i64 %1172
  %1174 = load i32, i32* %1173, align 4
  %1175 = mul nsw i32 %1174, %1171
  store i32 %1175, i32* %1173, align 4
  %1176 = add i32 %1159, -4
  %1177 = icmp eq i32 %1176, 0
  br i1 %1177, label %1178, label %1156

1178:                                             ; preds = %1156, %1142
  %1179 = phi i32 [ 1, %1142 ], [ %1175, %1156 ]
  %1180 = phi i64 [ %1147, %1142 ], [ %1172, %1156 ]
  %1181 = icmp eq i32 %1152, 0
  br i1 %1181, label %1192, label %1182

1182:                                             ; preds = %1178, %1182
  %1183 = phi i32 [ %1189, %1182 ], [ %1179, %1178 ]
  %1184 = phi i64 [ %1186, %1182 ], [ %1180, %1178 ]
  %1185 = phi i32 [ %1190, %1182 ], [ %1152, %1178 ]
  %1186 = add nsw i64 %1184, -1
  %1187 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 7, i64 %1186
  %1188 = load i32, i32* %1187, align 4
  %1189 = mul nsw i32 %1188, %1183
  store i32 %1189, i32* %1187, align 4
  %1190 = add i32 %1185, -1
  %1191 = icmp eq i32 %1190, 0
  br i1 %1191, label %1192, label %1182, !llvm.loop !8

1192:                                             ; preds = %1182, %1178
  %1193 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 7, i64 %1143
  %1194 = load i32, i32* %1193, align 4
  %1195 = add i32 %1194, -1
  %1196 = icmp sgt i32 %1195, %167
  br i1 %1196, label %1406, label %1197

1197:                                             ; preds = %1192
  %1198 = add nsw i32 %305, 1
  %1199 = sext i32 %1198 to i64
  %1200 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 7, i64 %1199
  %1201 = icmp sgt i32 %1195, 0
  br i1 %1201, label %1203, label %1202

1202:                                             ; preds = %1225, %1197
  br label %1232

1203:                                             ; preds = %1197
  %1204 = add i32 %305, 2
  %1205 = sext i32 %1204 to i64
  %1206 = zext i32 %1195 to i64
  br label %1207

1207:                                             ; preds = %1230, %1203
  %1208 = phi i32 [ %1194, %1203 ], [ %1231, %1230 ]
  %1209 = phi i64 [ 0, %1203 ], [ %1228, %1230 ]
  %1210 = phi i32 [ 0, %1203 ], [ %1226, %1230 ]
  %1211 = load i32, i32* %1200, align 4
  %1212 = add nsw i32 %1211, %1210
  %1213 = icmp slt i32 %1212, %1208
  br i1 %1213, label %1225, label %1214

1214:                                             ; preds = %1207, %1214
  %1215 = phi i64 [ %1220, %1214 ], [ %1205, %1207 ]
  %1216 = phi i32 [ %1222, %1214 ], [ %1211, %1207 ]
  %1217 = phi i32 [ %1216, %1214 ], [ %1208, %1207 ]
  %1218 = phi i32 [ %1223, %1214 ], [ %1212, %1207 ]
  %1219 = sub i32 %1218, %1217
  %1220 = add i64 %1215, 1
  %1221 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 7, i64 %1215
  %1222 = load i32, i32* %1221, align 4
  %1223 = add nsw i32 %1219, %1222
  %1224 = icmp slt i32 %1223, %1216
  br i1 %1224, label %1225, label %1214

1225:                                             ; preds = %1214, %1207
  %1226 = phi i32 [ %1212, %1207 ], [ %1223, %1214 ]
  %1227 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 6, i64 %1209
  store i32 %1226, i32* %1227, align 4
  %1228 = add nuw nsw i64 %1209, 1
  %1229 = icmp eq i64 %1228, %1206
  br i1 %1229, label %1202, label %1230

1230:                                             ; preds = %1225
  %1231 = load i32, i32* %1193, align 4
  br label %1207

1232:                                             ; preds = %1250, %1202
  %1233 = phi i64 [ 0, %1202 ], [ %1241, %1250 ]
  %1234 = phi i32 [ %1140, %1202 ], [ %1249, %1250 ]
  br label %1235

1235:                                             ; preds = %1232, %1258
  %1236 = phi i64 [ %1241, %1258 ], [ %1233, %1232 ]
  %1237 = shl i64 %1236, 32
  %1238 = ashr exact i64 %1237, 32
  br label %1239

1239:                                             ; preds = %1239, %1235
  %1240 = phi i64 [ %1241, %1239 ], [ %1238, %1235 ]
  %1241 = add i64 %1240, 1
  %1242 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 6, i64 %1240
  %1243 = load i32, i32* %1242, align 4
  %1244 = icmp slt i32 %1243, 0
  br i1 %1244, label %1239, label %1245

1245:                                             ; preds = %1239
  %1246 = trunc i64 %1241 to i32
  %1247 = icmp eq i32 %1243, %1246
  br i1 %1247, label %1258, label %1248

1248:                                             ; preds = %1245
  %1249 = trunc i64 %1241 to i32
  br label %1250

1250:                                             ; preds = %1248, %1250
  %1251 = phi i32 [ %1255, %1250 ], [ %1243, %1248 ]
  %1252 = add nsw i32 %1251, -1
  %1253 = sext i32 %1252 to i64
  %1254 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 6, i64 %1253
  %1255 = load i32, i32* %1254, align 4
  %1256 = sub nsw i32 0, %1255
  store i32 %1256, i32* %1254, align 4
  %1257 = icmp eq i32 %1255, %1249
  br i1 %1257, label %1232, label %1250

1258:                                             ; preds = %1245
  %1259 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 6, i64 %1240
  %1260 = trunc i64 %1240 to i32
  %1261 = xor i32 %1260, -1
  store i32 %1261, i32* %1259, align 4
  %1262 = icmp eq i32 %1243, %1195
  br i1 %1262, label %1263, label %1235

1263:                                             ; preds = %1258
  %1264 = add nsw i32 %1234, 1
  %1265 = sub nsw i32 %181, %1145
  %1266 = icmp slt i32 %1265, 0
  br i1 %1266, label %1374, label %1270

1267:                                             ; preds = %1372
  %1268 = sub nsw i32 %1271, %1145
  %1269 = icmp slt i32 %1268, 0
  br i1 %1269, label %1374, label %1270

1270:                                             ; preds = %1263, %1267
  %1271 = phi i32 [ %1268, %1267 ], [ %1265, %1263 ]
  %1272 = add i32 %194, %1271
  br label %1273

1273:                                             ; preds = %1372, %1270
  %1274 = phi i32 [ %1285, %1372 ], [ %1264, %1270 ]
  %1275 = sext i32 %1274 to i64
  br label %1276

1276:                                             ; preds = %1276, %1273
  %1277 = phi i64 [ %1278, %1276 ], [ %1275, %1273 ]
  %1278 = add i64 %1277, -1
  %1279 = add nsw i64 %1277, -2
  %1280 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 6, i64 %1279
  %1281 = load i32, i32* %1280, align 4
  %1282 = icmp slt i32 %1281, 0
  br i1 %1282, label %1276, label %1283

1283:                                             ; preds = %1276
  %1284 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 6, i64 %1279
  %1285 = trunc i64 %1278 to i32
  br label %1286

1286:                                             ; preds = %1370, %1283
  %1287 = phi i32 [ %1371, %1370 ], [ %1281, %1283 ]
  %1288 = phi i32 [ %1291, %1370 ], [ %1139, %1283 ]
  %1289 = icmp sgt i32 %1288, %193
  %1290 = select i1 %1289, i32 %193, i32 %1288
  %1291 = sub nsw i32 %1288, %1290
  %1292 = mul nsw i32 %1287, %1139
  %1293 = add i32 %1272, %1292
  %1294 = add nsw i32 %1291, %1293
  %1295 = add i32 %1288, -1
  %1296 = add i32 %1295, %1293
  %1297 = add nsw i32 %1294, -1
  br label %1298

1298:                                             ; preds = %1298, %1286
  %1299 = phi i64 [ %1301, %1298 ], [ 0, %1286 ]
  %1300 = phi i32 [ %1313, %1298 ], [ %1296, %1286 ]
  %1301 = add nuw i64 %1299, 1
  %1302 = sext i32 %1300 to i64
  %1303 = getelementptr inbounds double, double* %2, i64 %1302
  %1304 = bitcast double* %1303 to i64*
  %1305 = load i64, i64* %1304, align 8
  %1306 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 2, i64 %1299
  %1307 = bitcast double* %1306 to i64*
  store i64 %1305, i64* %1307, align 8
  %1308 = getelementptr inbounds double, double* %3, i64 %1302
  %1309 = bitcast double* %1308 to i64*
  %1310 = load i64, i64* %1309, align 8
  %1311 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 3, i64 %1299
  %1312 = bitcast double* %1311 to i64*
  store i64 %1310, i64* %1312, align 8
  %1313 = sub nsw i32 %1300, %176
  %1314 = icmp eq i32 %1313, %1297
  br i1 %1314, label %1315, label %1298

1315:                                             ; preds = %1298, %1345
  %1316 = phi i32 [ %1346, %1345 ], [ %1287, %1298 ]
  %1317 = phi i32 [ %1347, %1345 ], [ %1294, %1298 ]
  %1318 = add i32 %1317, -1
  %1319 = add i32 %1318, %1290
  %1320 = add nsw i32 %1316, -1
  %1321 = sext i32 %1320 to i64
  %1322 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 6, i64 %1321
  %1323 = load i32, i32* %1322, align 4
  %1324 = add nsw i32 %1323, %1316
  %1325 = mul nsw i32 %1324, %1139
  %1326 = sub nsw i32 %1319, %1325
  br label %1327

1327:                                             ; preds = %1327, %1315
  %1328 = phi i32 [ %1319, %1315 ], [ %1342, %1327 ]
  %1329 = phi i32 [ %1326, %1315 ], [ %1343, %1327 ]
  %1330 = sext i32 %1329 to i64
  %1331 = getelementptr inbounds double, double* %2, i64 %1330
  %1332 = bitcast double* %1331 to i64*
  %1333 = load i64, i64* %1332, align 8
  %1334 = sext i32 %1328 to i64
  %1335 = getelementptr inbounds double, double* %2, i64 %1334
  %1336 = bitcast double* %1335 to i64*
  store i64 %1333, i64* %1336, align 8
  %1337 = getelementptr inbounds double, double* %3, i64 %1330
  %1338 = bitcast double* %1337 to i64*
  %1339 = load i64, i64* %1338, align 8
  %1340 = getelementptr inbounds double, double* %3, i64 %1334
  %1341 = bitcast double* %1340 to i64*
  store i64 %1339, i64* %1341, align 8
  %1342 = sub nsw i32 %1328, %176
  %1343 = sub nsw i32 %1329, %176
  %1344 = icmp eq i32 %1342, %1318
  br i1 %1344, label %1345, label %1327

1345:                                             ; preds = %1327
  %1346 = sub nsw i32 0, %1323
  %1347 = add nsw i32 %1343, 1
  %1348 = icmp eq i32 %1285, %1346
  br i1 %1348, label %1349, label %1315

1349:                                             ; preds = %1345
  %1350 = add i32 %1343, %1290
  br label %1351

1351:                                             ; preds = %1351, %1349
  %1352 = phi i64 [ %1354, %1351 ], [ 0, %1349 ]
  %1353 = phi i32 [ %1366, %1351 ], [ %1350, %1349 ]
  %1354 = add nuw i64 %1352, 1
  %1355 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 2, i64 %1352
  %1356 = bitcast double* %1355 to i64*
  %1357 = load i64, i64* %1356, align 8
  %1358 = sext i32 %1353 to i64
  %1359 = getelementptr inbounds double, double* %2, i64 %1358
  %1360 = bitcast double* %1359 to i64*
  store i64 %1357, i64* %1360, align 8
  %1361 = getelementptr inbounds %struct.FFTstr, %struct.FFTstr* %6, i64 0, i32 3, i64 %1352
  %1362 = bitcast double* %1361 to i64*
  %1363 = load i64, i64* %1362, align 8
  %1364 = getelementptr inbounds double, double* %3, i64 %1358
  %1365 = bitcast double* %1364 to i64*
  store i64 %1363, i64* %1365, align 8
  %1366 = sub nsw i32 %1353, %176
  %1367 = icmp eq i32 %1366, %1343
  br i1 %1367, label %1368, label %1351

1368:                                             ; preds = %1351
  %1369 = icmp eq i32 %1291, 0
  br i1 %1369, label %1372, label %1370

1370:                                             ; preds = %1368
  %1371 = load i32, i32* %1284, align 4
  br label %1286

1372:                                             ; preds = %1368
  %1373 = icmp eq i32 %1285, 1
  br i1 %1373, label %1267, label %1273

1374:                                             ; preds = %1267, %208, %1138, %1263
  %1375 = add nuw nsw i64 %210, 1
  %1376 = icmp eq i64 %1375, %195
  br i1 %1376, label %1380, label %1377

1377:                                             ; preds = %1374
  %1378 = getelementptr inbounds i32, i32* %1, i64 %1375
  %1379 = load i32, i32* %1378, align 4
  br label %208

1380:                                             ; preds = %1374, %11, %27, %41, %165
  %1381 = phi i64 [ %43, %165 ], [ %43, %41 ], [ 1, %27 ], [ 1, %11 ], [ %43, %1374 ]
  %1382 = fcmp une double %5, 0.000000e+00
  %1383 = fcmp une double %5, 1.000000e+00
  %1384 = and i1 %1382, %1383
  br i1 %1384, label %1385, label %1406

1385:                                             ; preds = %1380
  %1386 = icmp slt i32 %4, 0
  %1387 = sub nsw i32 0, %4
  %1388 = select i1 %1386, i32 %1387, i32 %4
  %1389 = fcmp olt double %5, 0.000000e+00
  %1390 = uitofp i64 %1381 to double
  %1391 = select i1 %1389, double %1390, double %5
  %1392 = fdiv double 1.000000e+00, %1391
  %1393 = icmp eq i64 %1381, 0
  br i1 %1393, label %1406, label %1394

1394:                                             ; preds = %1385, %1394
  %1395 = phi i64 [ %1404, %1394 ], [ 0, %1385 ]
  %1396 = phi i32 [ %1403, %1394 ], [ 0, %1385 ]
  %1397 = getelementptr inbounds double, double* %2, i64 %1395
  %1398 = load double, double* %1397, align 8
  %1399 = fmul double %1392, %1398
  store double %1399, double* %1397, align 8
  %1400 = getelementptr inbounds double, double* %3, i64 %1395
  %1401 = load double, double* %1400, align 8
  %1402 = fmul double %1392, %1401
  store double %1402, double* %1400, align 8
  %1403 = add i32 %1396, %1388
  %1404 = zext i32 %1403 to i64
  %1405 = icmp ugt i64 %1381, %1404
  br i1 %1405, label %1394, label %1406

1406:                                             ; preds = %23, %28, %1192, %356, %757, %1394, %12, %1385, %1380
  %1407 = phi i32 [ 0, %1380 ], [ 0, %1385 ], [ -1, %12 ], [ 0, %1394 ], [ -1, %757 ], [ -1, %356 ], [ -1, %1192 ], [ -1, %28 ], [ -1, %23 ]
  ret i32 %1407
}

; Function Attrs: nofree nounwind
declare double @sin(double) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare double @cos(double) local_unnamed_addr #1

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.unroll.disable"}
!8 = distinct !{!8, !7}
