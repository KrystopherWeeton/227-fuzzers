; ModuleID = '../../third_party/boringssl/src/ssl/ssl_key_share.cc'
source_filename = "../../third_party/boringssl/src/ssl/ssl_key_share.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.bssl::NamedGroup" = type { i32, i16, [8 x i8], [11 x i8] }
%"class.bssl::SSLKeyShare" = type { i32 (...)** }
%struct.cbs_st = type { i8*, i64 }
%struct.cbb_st = type { %struct.cbb_buffer_st*, %struct.cbb_st*, i64, i8, i8, i8 }
%struct.cbb_buffer_st = type { i8*, i64, i64, i8, i8 }
%"class.bssl::Array" = type { i8*, i64 }
%"class.bssl::(anonymous namespace)::ECKeyShare" = type <{ %"class.bssl::SSLKeyShare", %"class.std::__1::unique_ptr.1", i32, i16, [2 x i8] }>
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %struct.bignum_st* }
%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
%struct.bignum_ctx = type opaque
%struct.ec_group_st = type opaque
%struct.ec_point_st = type opaque
%"class.bssl::(anonymous namespace)::X25519KeyShare" = type { %"class.bssl::SSLKeyShare", [32 x i8] }
%"class.bssl::(anonymous namespace)::CECPQ2KeyShare" = type { %"class.bssl::SSLKeyShare", [32 x i8], %struct.HRSS_private_key }
%struct.HRSS_private_key = type { [1808 x i8] }
%struct.HRSS_public_key = type { [1424 x i8] }

$_ZN4bssl11SSLKeyShareD0Ev = comdat any

$_ZN4bssl11SSLKeyShare19SerializePrivateKeyEP6cbb_st = comdat any

$_ZN4bssl11SSLKeyShare21DeserializePrivateKeyEP6cbs_st = comdat any

$_ZN4bssl11SSLKeyShareD2Ev = comdat any

@_ZN4bssl12_GLOBAL__N_112kNamedGroupsE = internal constant [6 x %"struct.bssl::NamedGroup"] [%"struct.bssl::NamedGroup" { i32 713, i16 21, [8 x i8] c"P-224\00\00\00", [11 x i8] c"secp224r1\00\00" }, %"struct.bssl::NamedGroup" { i32 415, i16 23, [8 x i8] c"P-256\00\00\00", [11 x i8] c"prime256v1\00" }, %"struct.bssl::NamedGroup" { i32 715, i16 24, [8 x i8] c"P-384\00\00\00", [11 x i8] c"secp384r1\00\00" }, %"struct.bssl::NamedGroup" { i32 716, i16 25, [8 x i8] c"P-521\00\00\00", [11 x i8] c"secp521r1\00\00" }, %"struct.bssl::NamedGroup" { i32 948, i16 29, [8 x i8] c"X25519\00\00", [11 x i8] c"x25519\00\00\00\00\00" }, %"struct.bssl::NamedGroup" { i32 959, i16 16696, [8 x i8] c"CECPQ2\00\00", [11 x i8] c"CECPQ2\00\00\00\00\00" }], align 16
@_ZTVN4bssl11SSLKeyShareE = hidden unnamed_addr constant { [10 x i8*] } { [10 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.bssl::SSLKeyShare"*)* @_ZN4bssl11SSLKeyShareD2Ev to i8*), i8* bitcast (void (%"class.bssl::SSLKeyShare"*)* @_ZN4bssl11SSLKeyShareD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (i1 (%"class.bssl::SSLKeyShare"*, %struct.cbb_st*, %"class.bssl::Array"*, i8*, i8*, i64)* @_ZN4bssl11SSLKeyShare6AcceptEP6cbb_stPNS_5ArrayIhEEPhNS_4SpanIKhEE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (i1 (%"class.bssl::SSLKeyShare"*, %struct.cbb_st*)* @_ZN4bssl11SSLKeyShare19SerializePrivateKeyEP6cbb_st to i8*), i8* bitcast (i1 (%"class.bssl::SSLKeyShare"*, %struct.cbs_st*)* @_ZN4bssl11SSLKeyShare21DeserializePrivateKeyEP6cbs_st to i8*)] }, align 8
@.str = private unnamed_addr constant [47 x i8] c"../../third_party/boringssl/src/ssl/internal.h\00", align 1
@_ZTVN4bssl12_GLOBAL__N_110ECKeyShareE = internal unnamed_addr constant { [10 x i8*] } { [10 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.bssl::(anonymous namespace)::ECKeyShare"*)* @_ZN4bssl12_GLOBAL__N_110ECKeyShareD2Ev to i8*), i8* bitcast (void (%"class.bssl::(anonymous namespace)::ECKeyShare"*)* @_ZN4bssl12_GLOBAL__N_110ECKeyShareD0Ev to i8*), i8* bitcast (i16 (%"class.bssl::(anonymous namespace)::ECKeyShare"*)* @_ZNK4bssl12_GLOBAL__N_110ECKeyShare7GroupIDEv to i8*), i8* bitcast (i1 (%"class.bssl::(anonymous namespace)::ECKeyShare"*, %struct.cbb_st*)* @_ZN4bssl12_GLOBAL__N_110ECKeyShare5OfferEP6cbb_st to i8*), i8* bitcast (i1 (%"class.bssl::SSLKeyShare"*, %struct.cbb_st*, %"class.bssl::Array"*, i8*, i8*, i64)* @_ZN4bssl11SSLKeyShare6AcceptEP6cbb_stPNS_5ArrayIhEEPhNS_4SpanIKhEE to i8*), i8* bitcast (i1 (%"class.bssl::(anonymous namespace)::ECKeyShare"*, %"class.bssl::Array"*, i8*, i8*, i64)* @_ZN4bssl12_GLOBAL__N_110ECKeyShare6FinishEPNS_5ArrayIhEEPhNS_4SpanIKhEE to i8*), i8* bitcast (i1 (%"class.bssl::(anonymous namespace)::ECKeyShare"*, %struct.cbb_st*)* @_ZN4bssl12_GLOBAL__N_110ECKeyShare19SerializePrivateKeyEP6cbb_st to i8*), i8* bitcast (i1 (%"class.bssl::(anonymous namespace)::ECKeyShare"*, %struct.cbs_st*)* @_ZN4bssl12_GLOBAL__N_110ECKeyShare21DeserializePrivateKeyEP6cbs_st to i8*)] }, align 8
@.str.1 = private unnamed_addr constant [53 x i8] c"../../third_party/boringssl/src/ssl/ssl_key_share.cc\00", align 1
@_ZTVN4bssl12_GLOBAL__N_114X25519KeyShareE = internal unnamed_addr constant { [10 x i8*] } { [10 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.bssl::SSLKeyShare"*)* @_ZN4bssl11SSLKeyShareD2Ev to i8*), i8* bitcast (void (%"class.bssl::(anonymous namespace)::X25519KeyShare"*)* @_ZN4bssl12_GLOBAL__N_114X25519KeyShareD0Ev to i8*), i8* bitcast (i16 (%"class.bssl::(anonymous namespace)::X25519KeyShare"*)* @_ZNK4bssl12_GLOBAL__N_114X25519KeyShare7GroupIDEv to i8*), i8* bitcast (i1 (%"class.bssl::(anonymous namespace)::X25519KeyShare"*, %struct.cbb_st*)* @_ZN4bssl12_GLOBAL__N_114X25519KeyShare5OfferEP6cbb_st to i8*), i8* bitcast (i1 (%"class.bssl::SSLKeyShare"*, %struct.cbb_st*, %"class.bssl::Array"*, i8*, i8*, i64)* @_ZN4bssl11SSLKeyShare6AcceptEP6cbb_stPNS_5ArrayIhEEPhNS_4SpanIKhEE to i8*), i8* bitcast (i1 (%"class.bssl::(anonymous namespace)::X25519KeyShare"*, %"class.bssl::Array"*, i8*, i8*, i64)* @_ZN4bssl12_GLOBAL__N_114X25519KeyShare6FinishEPNS_5ArrayIhEEPhNS_4SpanIKhEE to i8*), i8* bitcast (i1 (%"class.bssl::(anonymous namespace)::X25519KeyShare"*, %struct.cbb_st*)* @_ZN4bssl12_GLOBAL__N_114X25519KeyShare19SerializePrivateKeyEP6cbb_st to i8*), i8* bitcast (i1 (%"class.bssl::(anonymous namespace)::X25519KeyShare"*, %struct.cbs_st*)* @_ZN4bssl12_GLOBAL__N_114X25519KeyShare21DeserializePrivateKeyEP6cbs_st to i8*)] }, align 8
@_ZTVN4bssl12_GLOBAL__N_114CECPQ2KeyShareE = internal unnamed_addr constant { [10 x i8*] } { [10 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.bssl::SSLKeyShare"*)* @_ZN4bssl11SSLKeyShareD2Ev to i8*), i8* bitcast (void (%"class.bssl::(anonymous namespace)::CECPQ2KeyShare"*)* @_ZN4bssl12_GLOBAL__N_114CECPQ2KeyShareD0Ev to i8*), i8* bitcast (i16 (%"class.bssl::(anonymous namespace)::CECPQ2KeyShare"*)* @_ZNK4bssl12_GLOBAL__N_114CECPQ2KeyShare7GroupIDEv to i8*), i8* bitcast (i1 (%"class.bssl::(anonymous namespace)::CECPQ2KeyShare"*, %struct.cbb_st*)* @_ZN4bssl12_GLOBAL__N_114CECPQ2KeyShare5OfferEP6cbb_st to i8*), i8* bitcast (i1 (%"class.bssl::(anonymous namespace)::CECPQ2KeyShare"*, %struct.cbb_st*, %"class.bssl::Array"*, i8*, i8*, i64)* @_ZN4bssl12_GLOBAL__N_114CECPQ2KeyShare6AcceptEP6cbb_stPNS_5ArrayIhEEPhNS_4SpanIKhEE to i8*), i8* bitcast (i1 (%"class.bssl::(anonymous namespace)::CECPQ2KeyShare"*, %"class.bssl::Array"*, i8*, i8*, i64)* @_ZN4bssl12_GLOBAL__N_114CECPQ2KeyShare6FinishEPNS_5ArrayIhEEPhNS_4SpanIKhEE to i8*), i8* bitcast (i1 (%"class.bssl::SSLKeyShare"*, %struct.cbb_st*)* @_ZN4bssl11SSLKeyShare19SerializePrivateKeyEP6cbb_st to i8*), i8* bitcast (i1 (%"class.bssl::SSLKeyShare"*, %struct.cbs_st*)* @_ZN4bssl11SSLKeyShare21DeserializePrivateKeyEP6cbs_st to i8*)] }, align 8

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden { %"struct.bssl::NamedGroup"*, i64 } @_ZN4bssl11NamedGroupsEv() local_unnamed_addr #0 {
  ret { %"struct.bssl::NamedGroup"*, i64 } { %"struct.bssl::NamedGroup"* getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 0), i64 6 }
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.bssl::SSLKeyShare"* @_ZN4bssl11SSLKeyShare6CreateEt(i16 zeroext) local_unnamed_addr #1 align 2 {
  switch i16 %0, label %68 [
    i16 21, label %2
    i16 23, label %15
    i16 24, label %28
    i16 25, label %41
    i16 29, label %54
    i16 16696, label %61
  ]

2:                                                ; preds = %1
  %3 = tail call i8* @OPENSSL_malloc(i64 24) #12
  %4 = icmp eq i8* %3, null
  br i1 %4, label %5, label %6

5:                                                ; preds = %2
  tail call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i32 196) #12
  br label %68

6:                                                ; preds = %2
  %7 = bitcast i8* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN4bssl12_GLOBAL__N_110ECKeyShareE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  store i64 0, i64* %9, align 8
  %10 = getelementptr inbounds i8, i8* %3, i64 16
  %11 = bitcast i8* %10 to i32*
  store i32 713, i32* %11, align 8
  %12 = getelementptr inbounds i8, i8* %3, i64 20
  %13 = bitcast i8* %12 to i16*
  store i16 21, i16* %13, align 4
  %14 = ptrtoint i8* %3 to i64
  br label %68

15:                                               ; preds = %1
  %16 = tail call i8* @OPENSSL_malloc(i64 24) #12
  %17 = icmp eq i8* %16, null
  br i1 %17, label %18, label %19

18:                                               ; preds = %15
  tail call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i32 196) #12
  br label %68

19:                                               ; preds = %15
  %20 = bitcast i8* %16 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN4bssl12_GLOBAL__N_110ECKeyShareE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %20, align 8
  %21 = getelementptr inbounds i8, i8* %16, i64 8
  %22 = bitcast i8* %21 to i64*
  store i64 0, i64* %22, align 8
  %23 = getelementptr inbounds i8, i8* %16, i64 16
  %24 = bitcast i8* %23 to i32*
  store i32 415, i32* %24, align 8
  %25 = getelementptr inbounds i8, i8* %16, i64 20
  %26 = bitcast i8* %25 to i16*
  store i16 23, i16* %26, align 4
  %27 = ptrtoint i8* %16 to i64
  br label %68

28:                                               ; preds = %1
  %29 = tail call i8* @OPENSSL_malloc(i64 24) #12
  %30 = icmp eq i8* %29, null
  br i1 %30, label %31, label %32

31:                                               ; preds = %28
  tail call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i32 196) #12
  br label %68

32:                                               ; preds = %28
  %33 = bitcast i8* %29 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN4bssl12_GLOBAL__N_110ECKeyShareE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %33, align 8
  %34 = getelementptr inbounds i8, i8* %29, i64 8
  %35 = bitcast i8* %34 to i64*
  store i64 0, i64* %35, align 8
  %36 = getelementptr inbounds i8, i8* %29, i64 16
  %37 = bitcast i8* %36 to i32*
  store i32 715, i32* %37, align 8
  %38 = getelementptr inbounds i8, i8* %29, i64 20
  %39 = bitcast i8* %38 to i16*
  store i16 24, i16* %39, align 4
  %40 = ptrtoint i8* %29 to i64
  br label %68

41:                                               ; preds = %1
  %42 = tail call i8* @OPENSSL_malloc(i64 24) #12
  %43 = icmp eq i8* %42, null
  br i1 %43, label %44, label %45

44:                                               ; preds = %41
  tail call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i32 196) #12
  br label %68

45:                                               ; preds = %41
  %46 = bitcast i8* %42 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN4bssl12_GLOBAL__N_110ECKeyShareE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %46, align 8
  %47 = getelementptr inbounds i8, i8* %42, i64 8
  %48 = bitcast i8* %47 to i64*
  store i64 0, i64* %48, align 8
  %49 = getelementptr inbounds i8, i8* %42, i64 16
  %50 = bitcast i8* %49 to i32*
  store i32 716, i32* %50, align 8
  %51 = getelementptr inbounds i8, i8* %42, i64 20
  %52 = bitcast i8* %51 to i16*
  store i16 25, i16* %52, align 4
  %53 = ptrtoint i8* %42 to i64
  br label %68

54:                                               ; preds = %1
  %55 = tail call i8* @OPENSSL_malloc(i64 40) #12
  %56 = icmp eq i8* %55, null
  br i1 %56, label %57, label %58

57:                                               ; preds = %54
  tail call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i32 196) #12
  br label %68

58:                                               ; preds = %54
  %59 = bitcast i8* %55 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN4bssl12_GLOBAL__N_114X25519KeyShareE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %59, align 8
  %60 = ptrtoint i8* %55 to i64
  br label %68

61:                                               ; preds = %1
  %62 = tail call i8* @OPENSSL_malloc(i64 1848) #12
  %63 = icmp eq i8* %62, null
  br i1 %63, label %64, label %65

64:                                               ; preds = %61
  tail call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i32 196) #12
  br label %68

65:                                               ; preds = %61
  %66 = bitcast i8* %62 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN4bssl12_GLOBAL__N_114CECPQ2KeyShareE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %66, align 8
  %67 = ptrtoint i8* %62 to i64
  br label %68

68:                                               ; preds = %65, %64, %58, %57, %45, %44, %32, %31, %19, %18, %6, %5, %1
  %69 = phi i64 [ 0, %1 ], [ 0, %5 ], [ %14, %6 ], [ 0, %18 ], [ %27, %19 ], [ 0, %31 ], [ %40, %32 ], [ 0, %44 ], [ %53, %45 ], [ 0, %57 ], [ %60, %58 ], [ 0, %64 ], [ %67, %65 ]
  %70 = inttoptr i64 %69 to %"class.bssl::SSLKeyShare"*
  ret %"class.bssl::SSLKeyShare"* %70
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.bssl::SSLKeyShare"* @_ZN4bssl11SSLKeyShare6CreateEP6cbs_st(%struct.cbs_st*) local_unnamed_addr #1 align 2 {
  %2 = alloca i64, align 8
  %3 = alloca %struct.cbs_st, align 8
  %4 = bitcast i64* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #12
  store i64 -6148914691236517206, i64* %2, align 8
  %5 = bitcast %struct.cbs_st* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #12
  %6 = bitcast %struct.cbs_st* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  %7 = call i32 @CBS_get_asn1_uint64(%struct.cbs_st* %0, i64* nonnull %2) #12
  %8 = icmp eq i32 %7, 0
  %9 = load i64, i64* %2, align 8
  %10 = icmp ugt i64 %9, 65535
  %11 = or i1 %8, %10
  br i1 %11, label %32, label %12

12:                                               ; preds = %1
  %13 = call i32 @CBS_get_asn1(%struct.cbs_st* %0, %struct.cbs_st* nonnull %3, i32 4) #12
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %32, label %15

15:                                               ; preds = %12
  %16 = load i64, i64* %2, align 8
  %17 = trunc i64 %16 to i16
  %18 = call %"class.bssl::SSLKeyShare"* @_ZN4bssl11SSLKeyShare6CreateEt(i16 zeroext %17)
  %19 = icmp eq %"class.bssl::SSLKeyShare"* %18, null
  br i1 %19, label %32, label %20

20:                                               ; preds = %15
  %21 = ptrtoint %"class.bssl::SSLKeyShare"* %18 to i64
  %22 = bitcast %"class.bssl::SSLKeyShare"* %18 to i1 (%"class.bssl::SSLKeyShare"*, %struct.cbs_st*)***
  %23 = load i1 (%"class.bssl::SSLKeyShare"*, %struct.cbs_st*)**, i1 (%"class.bssl::SSLKeyShare"*, %struct.cbs_st*)*** %22, align 8
  %24 = getelementptr inbounds i1 (%"class.bssl::SSLKeyShare"*, %struct.cbs_st*)*, i1 (%"class.bssl::SSLKeyShare"*, %struct.cbs_st*)** %23, i64 7
  %25 = load i1 (%"class.bssl::SSLKeyShare"*, %struct.cbs_st*)*, i1 (%"class.bssl::SSLKeyShare"*, %struct.cbs_st*)** %24, align 8
  %26 = call zeroext i1 %25(%"class.bssl::SSLKeyShare"* nonnull %18, %struct.cbs_st* nonnull %3) #12
  br i1 %26, label %32, label %27

27:                                               ; preds = %20
  %28 = bitcast %"class.bssl::SSLKeyShare"* %18 to void (%"class.bssl::SSLKeyShare"*)***
  %29 = load void (%"class.bssl::SSLKeyShare"*)**, void (%"class.bssl::SSLKeyShare"*)*** %28, align 8
  %30 = load void (%"class.bssl::SSLKeyShare"*)*, void (%"class.bssl::SSLKeyShare"*)** %29, align 8
  call void %30(%"class.bssl::SSLKeyShare"* nonnull %18) #12
  %31 = bitcast %"class.bssl::SSLKeyShare"* %18 to i8*
  call void @OPENSSL_free(i8* nonnull %31) #12
  br label %32

32:                                               ; preds = %15, %20, %27, %1, %12
  %33 = phi i64 [ 0, %12 ], [ 0, %1 ], [ 0, %27 ], [ %21, %20 ], [ 0, %15 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #12
  %34 = inttoptr i64 %33 to %"class.bssl::SSLKeyShare"*
  ret %"class.bssl::SSLKeyShare"* %34
}

declare i32 @CBS_get_asn1_uint64(%struct.cbs_st*, i64*) local_unnamed_addr #3

declare i32 @CBS_get_asn1(%struct.cbs_st*, %struct.cbs_st*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl11SSLKeyShare9SerializeEP6cbb_st(%"class.bssl::SSLKeyShare"*, %struct.cbb_st*) local_unnamed_addr #1 align 2 {
  %3 = alloca %struct.cbb_st, align 8
  %4 = bitcast %struct.cbb_st* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -86, i64 32, i1 false)
  %5 = bitcast %"class.bssl::SSLKeyShare"* %0 to i16 (%"class.bssl::SSLKeyShare"*)***
  %6 = load i16 (%"class.bssl::SSLKeyShare"*)**, i16 (%"class.bssl::SSLKeyShare"*)*** %5, align 8
  %7 = getelementptr inbounds i16 (%"class.bssl::SSLKeyShare"*)*, i16 (%"class.bssl::SSLKeyShare"*)** %6, i64 2
  %8 = load i16 (%"class.bssl::SSLKeyShare"*)*, i16 (%"class.bssl::SSLKeyShare"*)** %7, align 8
  %9 = tail call zeroext i16 %8(%"class.bssl::SSLKeyShare"* %0) #12
  %10 = zext i16 %9 to i64
  %11 = tail call i32 @CBB_add_asn1_uint64(%struct.cbb_st* %1, i64 %10) #12
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %25, label %13

13:                                               ; preds = %2
  %14 = call i32 @CBB_add_asn1(%struct.cbb_st* %1, %struct.cbb_st* nonnull %3, i32 4) #12
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %25, label %16

16:                                               ; preds = %13
  %17 = bitcast %"class.bssl::SSLKeyShare"* %0 to i1 (%"class.bssl::SSLKeyShare"*, %struct.cbb_st*)***
  %18 = load i1 (%"class.bssl::SSLKeyShare"*, %struct.cbb_st*)**, i1 (%"class.bssl::SSLKeyShare"*, %struct.cbb_st*)*** %17, align 8
  %19 = getelementptr inbounds i1 (%"class.bssl::SSLKeyShare"*, %struct.cbb_st*)*, i1 (%"class.bssl::SSLKeyShare"*, %struct.cbb_st*)** %18, i64 6
  %20 = load i1 (%"class.bssl::SSLKeyShare"*, %struct.cbb_st*)*, i1 (%"class.bssl::SSLKeyShare"*, %struct.cbb_st*)** %19, align 8
  %21 = call zeroext i1 %20(%"class.bssl::SSLKeyShare"* %0, %struct.cbb_st* nonnull %3) #12
  br i1 %21, label %22, label %25

22:                                               ; preds = %16
  %23 = call i32 @CBB_flush(%struct.cbb_st* %1) #12
  %24 = icmp ne i32 %23, 0
  br label %25

25:                                               ; preds = %22, %16, %2, %13
  %26 = phi i1 [ false, %13 ], [ false, %2 ], [ false, %16 ], [ %24, %22 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4) #12
  ret i1 %26
}

declare i32 @CBB_add_asn1_uint64(%struct.cbb_st*, i64) local_unnamed_addr #3

declare i32 @CBB_add_asn1(%struct.cbb_st*, %struct.cbb_st*, i32) local_unnamed_addr #3

declare i32 @CBB_flush(%struct.cbb_st*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl11SSLKeyShare6AcceptEP6cbb_stPNS_5ArrayIhEEPhNS_4SpanIKhEE(%"class.bssl::SSLKeyShare"*, %struct.cbb_st*, %"class.bssl::Array"*, i8*, i8*, i64) unnamed_addr #1 align 2 {
  store i8 80, i8* %3, align 1
  %7 = bitcast %"class.bssl::SSLKeyShare"* %0 to i1 (%"class.bssl::SSLKeyShare"*, %struct.cbb_st*)***
  %8 = load i1 (%"class.bssl::SSLKeyShare"*, %struct.cbb_st*)**, i1 (%"class.bssl::SSLKeyShare"*, %struct.cbb_st*)*** %7, align 8
  %9 = getelementptr inbounds i1 (%"class.bssl::SSLKeyShare"*, %struct.cbb_st*)*, i1 (%"class.bssl::SSLKeyShare"*, %struct.cbb_st*)** %8, i64 3
  %10 = load i1 (%"class.bssl::SSLKeyShare"*, %struct.cbb_st*)*, i1 (%"class.bssl::SSLKeyShare"*, %struct.cbb_st*)** %9, align 8
  %11 = tail call zeroext i1 %10(%"class.bssl::SSLKeyShare"* %0, %struct.cbb_st* %1) #12
  br i1 %11, label %12, label %18

12:                                               ; preds = %6
  %13 = bitcast %"class.bssl::SSLKeyShare"* %0 to i1 (%"class.bssl::SSLKeyShare"*, %"class.bssl::Array"*, i8*, i8*, i64)***
  %14 = load i1 (%"class.bssl::SSLKeyShare"*, %"class.bssl::Array"*, i8*, i8*, i64)**, i1 (%"class.bssl::SSLKeyShare"*, %"class.bssl::Array"*, i8*, i8*, i64)*** %13, align 8
  %15 = getelementptr inbounds i1 (%"class.bssl::SSLKeyShare"*, %"class.bssl::Array"*, i8*, i8*, i64)*, i1 (%"class.bssl::SSLKeyShare"*, %"class.bssl::Array"*, i8*, i8*, i64)** %14, i64 5
  %16 = load i1 (%"class.bssl::SSLKeyShare"*, %"class.bssl::Array"*, i8*, i8*, i64)*, i1 (%"class.bssl::SSLKeyShare"*, %"class.bssl::Array"*, i8*, i8*, i64)** %15, align 8
  %17 = tail call zeroext i1 %16(%"class.bssl::SSLKeyShare"* %0, %"class.bssl::Array"* %2, i8* %3, i8* %4, i64 %5) #12
  br label %18

18:                                               ; preds = %12, %6
  %19 = phi i1 [ false, %6 ], [ %17, %12 ]
  ret i1 %19
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl19ssl_nid_to_group_idEPti(i16* nocapture, i32) local_unnamed_addr #4 {
  switch i32 %1, label %12 [
    i32 713, label %8
    i32 415, label %3
    i32 715, label %4
    i32 716, label %5
    i32 948, label %6
    i32 959, label %7
  ]

3:                                                ; preds = %2
  br label %8

4:                                                ; preds = %2
  br label %8

5:                                                ; preds = %2
  br label %8

6:                                                ; preds = %2
  br label %8

7:                                                ; preds = %2
  br label %8

8:                                                ; preds = %2, %7, %6, %5, %4, %3
  %9 = phi %"struct.bssl::NamedGroup"* [ getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 0), %2 ], [ getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 1), %3 ], [ getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 2), %4 ], [ getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 3), %5 ], [ getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 4), %6 ], [ getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 5), %7 ]
  %10 = getelementptr inbounds %"struct.bssl::NamedGroup", %"struct.bssl::NamedGroup"* %9, i64 0, i32 1
  %11 = load i16, i16* %10, align 4
  store i16 %11, i16* %0, align 2
  br label %12

12:                                               ; preds = %2, %8
  %13 = phi i1 [ true, %8 ], [ false, %2 ]
  ret i1 %13
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl20ssl_name_to_group_idEPtPKcm(i16* nocapture, i8* nocapture readonly, i64) local_unnamed_addr #5 {
  %4 = tail call i64 @strlen(i8* getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 0, i32 2, i64 0)) #13
  %5 = icmp eq i64 %4, %2
  br i1 %5, label %6, label %13

6:                                                ; preds = %3
  %7 = tail call i32 @strncmp(i8* getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 0, i32 2, i64 0), i8* %1, i64 %2) #13
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %13

9:                                                ; preds = %76, %64, %52, %40, %28, %6
  %10 = phi %"struct.bssl::NamedGroup"* [ getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 0), %6 ], [ getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 1), %28 ], [ getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 2), %40 ], [ getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 3), %52 ], [ getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 4), %64 ], [ getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 5), %76 ]
  %11 = getelementptr inbounds %"struct.bssl::NamedGroup", %"struct.bssl::NamedGroup"* %10, i64 0, i32 1
  %12 = load i16, i16* %11, align 4
  store i16 %12, i16* %0, align 2
  br label %26

13:                                               ; preds = %6, %3
  %14 = tail call i64 @strlen(i8* getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 0, i32 3, i64 0)) #13
  %15 = icmp eq i64 %14, %2
  br i1 %15, label %16, label %23

16:                                               ; preds = %13
  %17 = tail call i32 @strncmp(i8* getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 0, i32 3, i64 0), i8* %1, i64 %2) #13
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %23

19:                                               ; preds = %82, %70, %58, %46, %34, %16
  %20 = phi %"struct.bssl::NamedGroup"* [ getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 0), %16 ], [ getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 1), %34 ], [ getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 2), %46 ], [ getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 3), %58 ], [ getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 4), %70 ], [ getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 5), %82 ]
  %21 = getelementptr inbounds %"struct.bssl::NamedGroup", %"struct.bssl::NamedGroup"* %20, i64 0, i32 1
  %22 = load i16, i16* %21, align 4
  store i16 %22, i16* %0, align 2
  br label %26

23:                                               ; preds = %16, %13
  %24 = tail call i64 @strlen(i8* getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 1, i32 2, i64 0)) #13
  %25 = icmp eq i64 %24, %2
  br i1 %25, label %28, label %31

26:                                               ; preds = %79, %82, %9, %19
  %27 = phi i1 [ true, %19 ], [ true, %9 ], [ false, %82 ], [ false, %79 ]
  ret i1 %27

28:                                               ; preds = %23
  %29 = tail call i32 @strncmp(i8* getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 1, i32 2, i64 0), i8* %1, i64 %2) #13
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %9, label %31

31:                                               ; preds = %28, %23
  %32 = tail call i64 @strlen(i8* getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 1, i32 3, i64 0)) #13
  %33 = icmp eq i64 %32, %2
  br i1 %33, label %34, label %37

34:                                               ; preds = %31
  %35 = tail call i32 @strncmp(i8* getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 1, i32 3, i64 0), i8* %1, i64 %2) #13
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %19, label %37

37:                                               ; preds = %34, %31
  %38 = tail call i64 @strlen(i8* getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 2, i32 2, i64 0)) #13
  %39 = icmp eq i64 %38, %2
  br i1 %39, label %40, label %43

40:                                               ; preds = %37
  %41 = tail call i32 @strncmp(i8* getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 2, i32 2, i64 0), i8* %1, i64 %2) #13
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %9, label %43

43:                                               ; preds = %40, %37
  %44 = tail call i64 @strlen(i8* getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 2, i32 3, i64 0)) #13
  %45 = icmp eq i64 %44, %2
  br i1 %45, label %46, label %49

46:                                               ; preds = %43
  %47 = tail call i32 @strncmp(i8* getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 2, i32 3, i64 0), i8* %1, i64 %2) #13
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %19, label %49

49:                                               ; preds = %46, %43
  %50 = tail call i64 @strlen(i8* getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 3, i32 2, i64 0)) #13
  %51 = icmp eq i64 %50, %2
  br i1 %51, label %52, label %55

52:                                               ; preds = %49
  %53 = tail call i32 @strncmp(i8* getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 3, i32 2, i64 0), i8* %1, i64 %2) #13
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %9, label %55

55:                                               ; preds = %52, %49
  %56 = tail call i64 @strlen(i8* getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 3, i32 3, i64 0)) #13
  %57 = icmp eq i64 %56, %2
  br i1 %57, label %58, label %61

58:                                               ; preds = %55
  %59 = tail call i32 @strncmp(i8* getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 3, i32 3, i64 0), i8* %1, i64 %2) #13
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %19, label %61

61:                                               ; preds = %58, %55
  %62 = tail call i64 @strlen(i8* getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 4, i32 2, i64 0)) #13
  %63 = icmp eq i64 %62, %2
  br i1 %63, label %64, label %67

64:                                               ; preds = %61
  %65 = tail call i32 @strncmp(i8* getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 4, i32 2, i64 0), i8* %1, i64 %2) #13
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %9, label %67

67:                                               ; preds = %64, %61
  %68 = tail call i64 @strlen(i8* getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 4, i32 3, i64 0)) #13
  %69 = icmp eq i64 %68, %2
  br i1 %69, label %70, label %73

70:                                               ; preds = %67
  %71 = tail call i32 @strncmp(i8* getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 4, i32 3, i64 0), i8* %1, i64 %2) #13
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %19, label %73

73:                                               ; preds = %70, %67
  %74 = tail call i64 @strlen(i8* getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 5, i32 2, i64 0)) #13
  %75 = icmp eq i64 %74, %2
  br i1 %75, label %76, label %79

76:                                               ; preds = %73
  %77 = tail call i32 @strncmp(i8* getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 5, i32 2, i64 0), i8* %1, i64 %2) #13
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %9, label %79

79:                                               ; preds = %76, %73
  %80 = tail call i64 @strlen(i8* getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 5, i32 3, i64 0)) #13
  %81 = icmp eq i64 %80, %2
  br i1 %81, label %82, label %26

82:                                               ; preds = %79
  %83 = tail call i32 @strncmp(i8* getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 5, i32 3, i64 0), i8* %1, i64 %2) #13
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %19, label %26
}

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #6

; Function Attrs: nofree nounwind readonly
declare i32 @strncmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #7

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i8* @SSL_get_curve_name(i16 zeroext) local_unnamed_addr #8 {
  switch i16 %0, label %9 [
    i16 21, label %7
    i16 23, label %2
    i16 24, label %3
    i16 25, label %4
    i16 29, label %5
    i16 16696, label %6
  ]

2:                                                ; preds = %1
  br label %7

3:                                                ; preds = %1
  br label %7

4:                                                ; preds = %1
  br label %7

5:                                                ; preds = %1
  br label %7

6:                                                ; preds = %1
  br label %7

7:                                                ; preds = %1, %6, %5, %4, %3, %2, %9
  %8 = phi i8* [ getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 0, i32 2, i64 0), %1 ], [ null, %9 ], [ getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 1, i32 2, i64 0), %2 ], [ getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 2, i32 2, i64 0), %3 ], [ getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 3, i32 2, i64 0), %4 ], [ getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 4, i32 2, i64 0), %5 ], [ getelementptr inbounds ([6 x %"struct.bssl::NamedGroup"], [6 x %"struct.bssl::NamedGroup"]* @_ZN4bssl12_GLOBAL__N_112kNamedGroupsE, i64 0, i64 5, i32 2, i64 0), %6 ]
  ret i8* %8

9:                                                ; preds = %1
  br label %7
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4bssl11SSLKeyShareD0Ev(%"class.bssl::SSLKeyShare"*) unnamed_addr #1 comdat align 2 {
  tail call void @llvm.trap() #14
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN4bssl11SSLKeyShare19SerializePrivateKeyEP6cbb_st(%"class.bssl::SSLKeyShare"*, %struct.cbb_st*) unnamed_addr #1 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN4bssl11SSLKeyShare21DeserializePrivateKeyEP6cbs_st(%"class.bssl::SSLKeyShare"*, %struct.cbs_st*) unnamed_addr #1 comdat align 2 {
  ret i1 false
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #9

declare i8* @OPENSSL_malloc(i64) local_unnamed_addr #3

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN4bssl12_GLOBAL__N_110ECKeyShareD2Ev(%"class.bssl::(anonymous namespace)::ECKeyShare"* nocapture) unnamed_addr #10 align 2 {
  %2 = getelementptr inbounds %"class.bssl::(anonymous namespace)::ECKeyShare", %"class.bssl::(anonymous namespace)::ECKeyShare"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN4bssl12_GLOBAL__N_110ECKeyShareE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.bssl::(anonymous namespace)::ECKeyShare", %"class.bssl::(anonymous namespace)::ECKeyShare"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %struct.bignum_st*, %struct.bignum_st** %3, align 8
  store %struct.bignum_st* null, %struct.bignum_st** %3, align 8
  %5 = icmp eq %struct.bignum_st* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @BN_free(%struct.bignum_st* nonnull %4) #12
  br label %7

7:                                                ; preds = %1, %6
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN4bssl12_GLOBAL__N_110ECKeyShareD0Ev(%"class.bssl::(anonymous namespace)::ECKeyShare"*) unnamed_addr #10 align 2 {
  %2 = getelementptr inbounds %"class.bssl::(anonymous namespace)::ECKeyShare", %"class.bssl::(anonymous namespace)::ECKeyShare"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN4bssl12_GLOBAL__N_110ECKeyShareE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.bssl::(anonymous namespace)::ECKeyShare", %"class.bssl::(anonymous namespace)::ECKeyShare"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %struct.bignum_st*, %struct.bignum_st** %3, align 8
  store %struct.bignum_st* null, %struct.bignum_st** %3, align 8
  %5 = icmp eq %struct.bignum_st* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @BN_free(%struct.bignum_st* nonnull %4) #12
  br label %7

7:                                                ; preds = %1, %6
  %8 = bitcast %"class.bssl::(anonymous namespace)::ECKeyShare"* %0 to i8*
  tail call void @_ZdlPv(i8* %8) #15
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal zeroext i16 @_ZNK4bssl12_GLOBAL__N_110ECKeyShare7GroupIDEv(%"class.bssl::(anonymous namespace)::ECKeyShare"* nocapture readonly) unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %"class.bssl::(anonymous namespace)::ECKeyShare", %"class.bssl::(anonymous namespace)::ECKeyShare"* %0, i64 0, i32 3
  %3 = load i16, i16* %2, align 4
  ret i16 %3
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN4bssl12_GLOBAL__N_110ECKeyShare5OfferEP6cbb_st(%"class.bssl::(anonymous namespace)::ECKeyShare"* nocapture, %struct.cbb_st*) unnamed_addr #1 align 2 {
  %3 = tail call %struct.bignum_ctx* @BN_CTX_new() #12
  %4 = icmp eq %struct.bignum_ctx* %3, null
  br i1 %4, label %39, label %5

5:                                                ; preds = %2
  tail call void @BN_CTX_start(%struct.bignum_ctx* nonnull %3) #12
  %6 = getelementptr inbounds %"class.bssl::(anonymous namespace)::ECKeyShare", %"class.bssl::(anonymous namespace)::ECKeyShare"* %0, i64 0, i32 2
  %7 = load i32, i32* %6, align 8
  %8 = tail call %struct.ec_group_st* @EC_GROUP_new_by_curve_name(i32 %7) #12
  %9 = tail call %struct.bignum_st* @BN_new() #12
  %10 = getelementptr inbounds %"class.bssl::(anonymous namespace)::ECKeyShare", %"class.bssl::(anonymous namespace)::ECKeyShare"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %11 = load %struct.bignum_st*, %struct.bignum_st** %10, align 8
  store %struct.bignum_st* %9, %struct.bignum_st** %10, align 8
  %12 = icmp eq %struct.bignum_st* %11, null
  br i1 %12, label %14, label %13

13:                                               ; preds = %5
  tail call void @BN_free(%struct.bignum_st* nonnull %11) #12
  br label %14

14:                                               ; preds = %5, %13
  %15 = icmp eq %struct.ec_group_st* %8, null
  br i1 %15, label %37, label %16

16:                                               ; preds = %14
  %17 = load %struct.bignum_st*, %struct.bignum_st** %10, align 8
  %18 = icmp eq %struct.bignum_st* %17, null
  br i1 %18, label %35, label %19

19:                                               ; preds = %16
  %20 = tail call %struct.bignum_st* @EC_GROUP_get0_order(%struct.ec_group_st* nonnull %8) #12
  %21 = tail call i32 @BN_rand_range_ex(%struct.bignum_st* nonnull %17, i64 1, %struct.bignum_st* %20) #12
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %35, label %23

23:                                               ; preds = %19
  %24 = tail call %struct.ec_point_st* @EC_POINT_new(%struct.ec_group_st* nonnull %8) #12
  %25 = icmp eq %struct.ec_point_st* %24, null
  br i1 %25, label %35, label %26

26:                                               ; preds = %23
  %27 = load %struct.bignum_st*, %struct.bignum_st** %10, align 8
  %28 = tail call i32 @EC_POINT_mul(%struct.ec_group_st* nonnull %8, %struct.ec_point_st* nonnull %24, %struct.bignum_st* %27, %struct.ec_point_st* null, %struct.bignum_st* null, %struct.bignum_ctx* nonnull %3) #12
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %26
  %31 = tail call i32 @EC_POINT_point2cbb(%struct.cbb_st* %1, %struct.ec_group_st* nonnull %8, %struct.ec_point_st* nonnull %24, i32 4, %struct.bignum_ctx* nonnull %3) #12
  %32 = icmp ne i32 %31, 0
  br label %33

33:                                               ; preds = %30, %26
  %34 = phi i1 [ %32, %30 ], [ false, %26 ]
  tail call void @EC_POINT_free(%struct.ec_point_st* nonnull %24) #12
  br label %35

35:                                               ; preds = %23, %16, %33, %19
  %36 = phi i1 [ false, %23 ], [ %34, %33 ], [ false, %16 ], [ false, %19 ]
  tail call void @EC_GROUP_free(%struct.ec_group_st* nonnull %8) #12
  br label %37

37:                                               ; preds = %14, %35
  %38 = phi i1 [ %36, %35 ], [ false, %14 ]
  tail call void @BN_CTX_end(%struct.bignum_ctx* nonnull %3) #12
  tail call void @BN_CTX_free(%struct.bignum_ctx* nonnull %3) #12
  br label %39

39:                                               ; preds = %2, %37
  %40 = phi i1 [ %38, %37 ], [ false, %2 ]
  ret i1 %40
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN4bssl12_GLOBAL__N_110ECKeyShare6FinishEPNS_5ArrayIhEEPhNS_4SpanIKhEE(%"class.bssl::(anonymous namespace)::ECKeyShare"* nocapture readonly, %"class.bssl::Array"* nocapture, i8* nocapture, i8*, i64) unnamed_addr #1 align 2 {
  store i8 80, i8* %2, align 1
  %6 = tail call %struct.bignum_ctx* @BN_CTX_new() #12
  %7 = icmp eq %struct.bignum_ctx* %6, null
  br i1 %7, label %74, label %8

8:                                                ; preds = %5
  tail call void @BN_CTX_start(%struct.bignum_ctx* nonnull %6) #12
  %9 = getelementptr inbounds %"class.bssl::(anonymous namespace)::ECKeyShare", %"class.bssl::(anonymous namespace)::ECKeyShare"* %0, i64 0, i32 2
  %10 = load i32, i32* %9, align 8
  %11 = tail call %struct.ec_group_st* @EC_GROUP_new_by_curve_name(i32 %10) #12
  %12 = icmp eq %struct.ec_group_st* %11, null
  br i1 %12, label %72, label %13

13:                                               ; preds = %8
  %14 = tail call %struct.ec_point_st* @EC_POINT_new(%struct.ec_group_st* nonnull %11) #12
  %15 = tail call %struct.ec_point_st* @EC_POINT_new(%struct.ec_group_st* nonnull %11) #12
  %16 = tail call %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx* nonnull %6) #12
  %17 = icmp eq %struct.ec_point_st* %14, null
  br i1 %17, label %64, label %18

18:                                               ; preds = %13
  %19 = icmp ne %struct.ec_point_st* %15, null
  %20 = icmp ne %struct.bignum_st* %16, null
  %21 = and i1 %19, %20
  br i1 %21, label %22, label %64

22:                                               ; preds = %18
  %23 = icmp eq i64 %4, 0
  br i1 %23, label %30, label %24

24:                                               ; preds = %22
  %25 = load i8, i8* %3, align 1
  %26 = icmp eq i8 %25, 4
  br i1 %26, label %27, label %30

27:                                               ; preds = %24
  %28 = tail call i32 @EC_POINT_oct2point(%struct.ec_group_st* nonnull %11, %struct.ec_point_st* nonnull %14, i8* %3, i64 %4, %struct.bignum_ctx* nonnull %6) #12
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %31

30:                                               ; preds = %27, %24, %22
  tail call void @ERR_put_error(i32 16, i32 0, i32 108, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 103) #12
  store i8 50, i8* %2, align 1
  br label %66

31:                                               ; preds = %27
  %32 = getelementptr inbounds %"class.bssl::(anonymous namespace)::ECKeyShare", %"class.bssl::(anonymous namespace)::ECKeyShare"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %33 = load %struct.bignum_st*, %struct.bignum_st** %32, align 8
  %34 = tail call i32 @EC_POINT_mul(%struct.ec_group_st* nonnull %11, %struct.ec_point_st* nonnull %15, %struct.bignum_st* null, %struct.ec_point_st* nonnull %14, %struct.bignum_st* %33, %struct.bignum_ctx* nonnull %6) #12
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %66, label %36

36:                                               ; preds = %31
  %37 = tail call i32 @EC_POINT_get_affine_coordinates_GFp(%struct.ec_group_st* nonnull %11, %struct.ec_point_st* nonnull %15, %struct.bignum_st* nonnull %16, %struct.bignum_st* null, %struct.bignum_ctx* nonnull %6) #12
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %66, label %39

39:                                               ; preds = %36
  %40 = tail call i32 @EC_GROUP_get_degree(%struct.ec_group_st* nonnull %11) #12
  %41 = add i32 %40, 7
  %42 = lshr i32 %41, 3
  %43 = zext i32 %42 to i64
  tail call void @OPENSSL_free(i8* null) #12
  %44 = icmp eq i32 %42, 0
  br i1 %44, label %50, label %45

45:                                               ; preds = %39
  %46 = tail call i8* @OPENSSL_malloc(i64 %43) #12
  %47 = ptrtoint i8* %46 to i64
  %48 = icmp eq i8* %46, null
  br i1 %48, label %49, label %50

49:                                               ; preds = %45
  tail call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i32 324) #12
  br label %60

50:                                               ; preds = %39, %45
  %51 = phi i64 [ %47, %45 ], [ 0, %39 ]
  %52 = inttoptr i64 %51 to i8*
  %53 = tail call i32 @BN_bn2bin_padded(i8* %52, i64 %43, %struct.bignum_st* nonnull %16) #12
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %60, label %55

55:                                               ; preds = %50
  %56 = getelementptr inbounds %"class.bssl::Array", %"class.bssl::Array"* %1, i64 0, i32 0
  %57 = load i8*, i8** %56, align 8
  tail call void @OPENSSL_free(i8* %57) #12
  %58 = getelementptr inbounds %"class.bssl::Array", %"class.bssl::Array"* %1, i64 0, i32 1
  %59 = bitcast %"class.bssl::Array"* %1 to i64*
  store i64 %51, i64* %59, align 8
  store i64 %43, i64* %58, align 8
  br label %60

60:                                               ; preds = %49, %50, %55
  %61 = phi i64 [ %51, %50 ], [ 0, %55 ], [ %47, %49 ]
  %62 = phi i1 [ false, %50 ], [ true, %55 ], [ false, %49 ]
  %63 = inttoptr i64 %61 to i8*
  tail call void @OPENSSL_free(i8* %63) #12
  br label %66

64:                                               ; preds = %13, %18
  %65 = icmp eq %struct.ec_point_st* %15, null
  br i1 %65, label %68, label %66

66:                                               ; preds = %30, %60, %36, %31, %64
  %67 = phi i1 [ false, %64 ], [ false, %31 ], [ false, %36 ], [ %62, %60 ], [ false, %30 ]
  tail call void @EC_POINT_free(%struct.ec_point_st* nonnull %15) #12
  br label %68

68:                                               ; preds = %64, %66
  %69 = phi i1 [ false, %64 ], [ %67, %66 ]
  br i1 %17, label %71, label %70

70:                                               ; preds = %68
  tail call void @EC_POINT_free(%struct.ec_point_st* nonnull %14) #12
  br label %71

71:                                               ; preds = %70, %68
  tail call void @EC_GROUP_free(%struct.ec_group_st* nonnull %11) #12
  br label %72

72:                                               ; preds = %8, %71
  %73 = phi i1 [ %69, %71 ], [ false, %8 ]
  tail call void @BN_CTX_end(%struct.bignum_ctx* nonnull %6) #12
  tail call void @BN_CTX_free(%struct.bignum_ctx* nonnull %6) #12
  br label %74

74:                                               ; preds = %5, %72
  %75 = phi i1 [ %73, %72 ], [ false, %5 ]
  ret i1 %75
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN4bssl12_GLOBAL__N_110ECKeyShare19SerializePrivateKeyEP6cbb_st(%"class.bssl::(anonymous namespace)::ECKeyShare"* nocapture readonly, %struct.cbb_st*) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.bssl::(anonymous namespace)::ECKeyShare", %"class.bssl::(anonymous namespace)::ECKeyShare"* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = tail call %struct.ec_group_st* @EC_GROUP_new_by_curve_name(i32 %4) #12
  %6 = tail call %struct.bignum_st* @EC_GROUP_get0_order(%struct.ec_group_st* %5) #12
  %7 = tail call i32 @BN_num_bytes(%struct.bignum_st* %6) #12
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds %"class.bssl::(anonymous namespace)::ECKeyShare", %"class.bssl::(anonymous namespace)::ECKeyShare"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %10 = load %struct.bignum_st*, %struct.bignum_st** %9, align 8
  %11 = tail call i32 @BN_bn2cbb_padded(%struct.cbb_st* %1, i64 %8, %struct.bignum_st* %10) #12
  %12 = icmp ne i32 %11, 0
  %13 = icmp eq %struct.ec_group_st* %5, null
  br i1 %13, label %15, label %14

14:                                               ; preds = %2
  tail call void @EC_GROUP_free(%struct.ec_group_st* nonnull %5) #12
  br label %15

15:                                               ; preds = %2, %14
  ret i1 %12
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN4bssl12_GLOBAL__N_110ECKeyShare21DeserializePrivateKeyEP6cbs_st(%"class.bssl::(anonymous namespace)::ECKeyShare"* nocapture, %struct.cbs_st*) unnamed_addr #1 align 2 {
  %3 = tail call i8* @CBS_data(%struct.cbs_st* %1) #12
  %4 = tail call i64 @CBS_len(%struct.cbs_st* %1) #12
  %5 = tail call %struct.bignum_st* @BN_bin2bn(i8* %3, i64 %4, %struct.bignum_st* null) #12
  %6 = getelementptr inbounds %"class.bssl::(anonymous namespace)::ECKeyShare", %"class.bssl::(anonymous namespace)::ECKeyShare"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %7 = load %struct.bignum_st*, %struct.bignum_st** %6, align 8
  store %struct.bignum_st* %5, %struct.bignum_st** %6, align 8
  %8 = icmp eq %struct.bignum_st* %7, null
  br i1 %8, label %11, label %9

9:                                                ; preds = %2
  tail call void @BN_free(%struct.bignum_st* nonnull %7) #12
  %10 = load %struct.bignum_st*, %struct.bignum_st** %6, align 8
  br label %11

11:                                               ; preds = %2, %9
  %12 = phi %struct.bignum_st* [ %5, %2 ], [ %10, %9 ]
  %13 = icmp ne %struct.bignum_st* %12, null
  ret i1 %13
}

declare void @BN_free(%struct.bignum_st*) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #11

declare %struct.bignum_ctx* @BN_CTX_new() local_unnamed_addr #3

declare %struct.ec_group_st* @EC_GROUP_new_by_curve_name(i32) local_unnamed_addr #3

declare %struct.bignum_st* @BN_new() local_unnamed_addr #3

declare i32 @BN_rand_range_ex(%struct.bignum_st*, i64, %struct.bignum_st*) local_unnamed_addr #3

declare %struct.bignum_st* @EC_GROUP_get0_order(%struct.ec_group_st*) local_unnamed_addr #3

declare %struct.ec_point_st* @EC_POINT_new(%struct.ec_group_st*) local_unnamed_addr #3

declare i32 @EC_POINT_mul(%struct.ec_group_st*, %struct.ec_point_st*, %struct.bignum_st*, %struct.ec_point_st*, %struct.bignum_st*, %struct.bignum_ctx*) local_unnamed_addr #3

declare i32 @EC_POINT_point2cbb(%struct.cbb_st*, %struct.ec_group_st*, %struct.ec_point_st*, i32, %struct.bignum_ctx*) local_unnamed_addr #3

declare void @BN_CTX_start(%struct.bignum_ctx*) local_unnamed_addr #3

declare void @EC_POINT_free(%struct.ec_point_st*) local_unnamed_addr #3

declare void @EC_GROUP_free(%struct.ec_group_st*) local_unnamed_addr #3

declare void @BN_CTX_end(%struct.bignum_ctx*) local_unnamed_addr #3

declare void @BN_CTX_free(%struct.bignum_ctx*) local_unnamed_addr #3

declare %struct.bignum_st* @BN_CTX_get(%struct.bignum_ctx*) local_unnamed_addr #3

declare i32 @EC_POINT_oct2point(%struct.ec_group_st*, %struct.ec_point_st*, i8*, i64, %struct.bignum_ctx*) local_unnamed_addr #3

declare i32 @EC_POINT_get_affine_coordinates_GFp(%struct.ec_group_st*, %struct.ec_point_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_ctx*) local_unnamed_addr #3

declare i32 @EC_GROUP_get_degree(%struct.ec_group_st*) local_unnamed_addr #3

declare i32 @BN_bn2bin_padded(i8*, i64, %struct.bignum_st*) local_unnamed_addr #3

declare void @OPENSSL_free(i8*) local_unnamed_addr #3

declare i32 @BN_num_bytes(%struct.bignum_st*) local_unnamed_addr #3

declare i32 @BN_bn2cbb_padded(%struct.cbb_st*, i64, %struct.bignum_st*) local_unnamed_addr #3

declare %struct.bignum_st* @BN_bin2bn(i8*, i64, %struct.bignum_st*) local_unnamed_addr #3

declare i8* @CBS_data(%struct.cbs_st*) local_unnamed_addr #3

declare i64 @CBS_len(%struct.cbs_st*) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN4bssl12_GLOBAL__N_114X25519KeyShareD0Ev(%"class.bssl::(anonymous namespace)::X25519KeyShare"*) unnamed_addr #10 align 2 {
  %2 = bitcast %"class.bssl::(anonymous namespace)::X25519KeyShare"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #15
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal zeroext i16 @_ZNK4bssl12_GLOBAL__N_114X25519KeyShare7GroupIDEv(%"class.bssl::(anonymous namespace)::X25519KeyShare"* nocapture readnone) unnamed_addr #0 align 2 {
  ret i16 29
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN4bssl12_GLOBAL__N_114X25519KeyShare5OfferEP6cbb_st(%"class.bssl::(anonymous namespace)::X25519KeyShare"*, %struct.cbb_st*) unnamed_addr #1 align 2 {
  %3 = alloca [32 x i8], align 16
  %4 = getelementptr inbounds [32 x i8], [32 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4) #12
  %5 = getelementptr inbounds %"class.bssl::(anonymous namespace)::X25519KeyShare", %"class.bssl::(anonymous namespace)::X25519KeyShare"* %0, i64 0, i32 1, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 -86, i64 32, i1 false)
  call void @X25519_keypair(i8* nonnull %4, i8* %5) #12
  %6 = call i32 @CBB_add_bytes(%struct.cbb_st* %1, i8* nonnull %4, i64 32) #12
  %7 = icmp ne i32 %6, 0
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4) #12
  ret i1 %7
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN4bssl12_GLOBAL__N_114X25519KeyShare6FinishEPNS_5ArrayIhEEPhNS_4SpanIKhEE(%"class.bssl::(anonymous namespace)::X25519KeyShare"*, %"class.bssl::Array"* nocapture, i8* nocapture, i8*, i64) unnamed_addr #1 align 2 {
  store i8 80, i8* %2, align 1
  tail call void @OPENSSL_free(i8* null) #12
  %6 = tail call i8* @OPENSSL_malloc(i64 32) #12
  %7 = ptrtoint i8* %6 to i64
  %8 = icmp eq i8* %6, null
  br i1 %8, label %9, label %10

9:                                                ; preds = %5
  tail call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i32 324) #12
  tail call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 165) #12
  br label %22

10:                                               ; preds = %5
  %11 = icmp eq i64 %4, 32
  br i1 %11, label %12, label %16

12:                                               ; preds = %10
  %13 = getelementptr inbounds %"class.bssl::(anonymous namespace)::X25519KeyShare", %"class.bssl::(anonymous namespace)::X25519KeyShare"* %0, i64 0, i32 1, i64 0
  %14 = tail call i32 @X25519(i8* nonnull %6, i8* %13, i8* %3) #12
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %17

16:                                               ; preds = %12, %10
  store i8 50, i8* %2, align 1
  tail call void @ERR_put_error(i32 16, i32 0, i32 108, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 172) #12
  br label %22

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.bssl::Array", %"class.bssl::Array"* %1, i64 0, i32 0
  %19 = load i8*, i8** %18, align 8
  tail call void @OPENSSL_free(i8* %19) #12
  %20 = getelementptr inbounds %"class.bssl::Array", %"class.bssl::Array"* %1, i64 0, i32 1
  %21 = bitcast %"class.bssl::Array"* %1 to i64*
  store i64 %7, i64* %21, align 8
  store i64 32, i64* %20, align 8
  br label %22

22:                                               ; preds = %17, %16, %9
  %23 = phi i64 [ %7, %16 ], [ 0, %17 ], [ %7, %9 ]
  %24 = phi i1 [ false, %16 ], [ true, %17 ], [ false, %9 ]
  %25 = inttoptr i64 %23 to i8*
  tail call void @OPENSSL_free(i8* %25) #12
  ret i1 %24
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN4bssl12_GLOBAL__N_114X25519KeyShare19SerializePrivateKeyEP6cbb_st(%"class.bssl::(anonymous namespace)::X25519KeyShare"*, %struct.cbb_st*) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.bssl::(anonymous namespace)::X25519KeyShare", %"class.bssl::(anonymous namespace)::X25519KeyShare"* %0, i64 0, i32 1, i64 0
  %4 = tail call i32 @CBB_add_bytes(%struct.cbb_st* %1, i8* %3, i64 32) #12
  %5 = icmp ne i32 %4, 0
  ret i1 %5
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN4bssl12_GLOBAL__N_114X25519KeyShare21DeserializePrivateKeyEP6cbs_st(%"class.bssl::(anonymous namespace)::X25519KeyShare"*, %struct.cbs_st*) unnamed_addr #1 align 2 {
  %3 = tail call i64 @CBS_len(%struct.cbs_st* %1) #12
  %4 = icmp eq i64 %3, 32
  br i1 %4, label %5, label %9

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.bssl::(anonymous namespace)::X25519KeyShare", %"class.bssl::(anonymous namespace)::X25519KeyShare"* %0, i64 0, i32 1, i64 0
  %7 = tail call i32 @CBS_copy_bytes(%struct.cbs_st* %1, i8* %6, i64 32) #12
  %8 = icmp ne i32 %7, 0
  ret i1 %8

9:                                                ; preds = %2
  ret i1 false
}

declare void @X25519_keypair(i8*, i8*) local_unnamed_addr #3

declare i32 @CBB_add_bytes(%struct.cbb_st*, i8*, i64) local_unnamed_addr #3

declare i32 @X25519(i8*, i8*, i8*) local_unnamed_addr #3

declare i32 @CBS_copy_bytes(%struct.cbs_st*, i8*, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4bssl11SSLKeyShareD2Ev(%"class.bssl::SSLKeyShare"*) unnamed_addr #1 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN4bssl12_GLOBAL__N_114CECPQ2KeyShareD0Ev(%"class.bssl::(anonymous namespace)::CECPQ2KeyShare"*) unnamed_addr #10 align 2 {
  %2 = bitcast %"class.bssl::(anonymous namespace)::CECPQ2KeyShare"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #15
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal zeroext i16 @_ZNK4bssl12_GLOBAL__N_114CECPQ2KeyShare7GroupIDEv(%"class.bssl::(anonymous namespace)::CECPQ2KeyShare"* nocapture readnone) unnamed_addr #0 align 2 {
  ret i16 16696
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN4bssl12_GLOBAL__N_114CECPQ2KeyShare5OfferEP6cbb_st(%"class.bssl::(anonymous namespace)::CECPQ2KeyShare"*, %struct.cbb_st*) unnamed_addr #1 align 2 {
  %3 = alloca [32 x i8], align 16
  %4 = alloca [1432 x i8], align 16
  %5 = alloca %struct.HRSS_public_key, align 1
  %6 = alloca [1138 x i8], align 16
  %7 = getelementptr inbounds [32 x i8], [32 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #12
  %8 = getelementptr inbounds %"class.bssl::(anonymous namespace)::CECPQ2KeyShare", %"class.bssl::(anonymous namespace)::CECPQ2KeyShare"* %0, i64 0, i32 1, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 32, i1 false)
  call void @X25519_keypair(i8* nonnull %7, i8* %8) #12
  %9 = getelementptr inbounds [1432 x i8], [1432 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1432, i8* nonnull %9) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 1432, i1 false)
  %10 = getelementptr inbounds %struct.HRSS_public_key, %struct.HRSS_public_key* %5, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1424, i8* nonnull %10) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %10, i8 -86, i64 1424, i1 false)
  %11 = call i32 @RAND_bytes(i8* nonnull %9, i64 1432) #12
  %12 = getelementptr inbounds %"class.bssl::(anonymous namespace)::CECPQ2KeyShare", %"class.bssl::(anonymous namespace)::CECPQ2KeyShare"* %0, i64 0, i32 2
  call void @HRSS_generate_key(%struct.HRSS_public_key* nonnull %5, %struct.HRSS_private_key* %12, i8* nonnull %9) #12
  %13 = getelementptr inbounds [1138 x i8], [1138 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1138, i8* nonnull %13) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 1138, i1 false)
  call void @HRSS_marshal_public_key(i8* nonnull %13, %struct.HRSS_public_key* nonnull %5) #12
  %14 = call i32 @CBB_add_bytes(%struct.cbb_st* %1, i8* nonnull %7, i64 32) #12
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %19, label %16

16:                                               ; preds = %2
  %17 = call i32 @CBB_add_bytes(%struct.cbb_st* %1, i8* nonnull %13, i64 1138) #12
  %18 = icmp ne i32 %17, 0
  br label %19

19:                                               ; preds = %16, %2
  %20 = phi i1 [ false, %2 ], [ %18, %16 ]
  call void @llvm.lifetime.end.p0i8(i64 1138, i8* nonnull %13) #12
  call void @llvm.lifetime.end.p0i8(i64 1424, i8* nonnull %10) #12
  call void @llvm.lifetime.end.p0i8(i64 1432, i8* nonnull %9) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #12
  ret i1 %20
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN4bssl12_GLOBAL__N_114CECPQ2KeyShare6AcceptEP6cbb_stPNS_5ArrayIhEEPhNS_4SpanIKhEE(%"class.bssl::(anonymous namespace)::CECPQ2KeyShare"*, %struct.cbb_st*, %"class.bssl::Array"* nocapture, i8* nocapture, i8*, i64) unnamed_addr #1 align 2 {
  %7 = alloca [32 x i8], align 16
  %8 = alloca %struct.HRSS_public_key, align 1
  %9 = alloca [1138 x i8], align 16
  %10 = alloca [1400 x i8], align 16
  tail call void @OPENSSL_free(i8* null) #12
  %11 = tail call i8* @OPENSSL_malloc(i64 64) #12
  %12 = ptrtoint i8* %11 to i64
  %13 = icmp eq i8* %11, null
  br i1 %13, label %14, label %15

14:                                               ; preds = %6
  tail call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i32 324) #12
  tail call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 227) #12
  br label %49

15:                                               ; preds = %6
  %16 = getelementptr inbounds [32 x i8], [32 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %16) #12
  %17 = getelementptr inbounds %"class.bssl::(anonymous namespace)::CECPQ2KeyShare", %"class.bssl::(anonymous namespace)::CECPQ2KeyShare"* %0, i64 0, i32 1, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %16, i8 -86, i64 32, i1 false)
  call void @X25519_keypair(i8* nonnull %16, i8* %17) #12
  %18 = getelementptr inbounds %struct.HRSS_public_key, %struct.HRSS_public_key* %8, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1424, i8* nonnull %18) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %18, i8 -86, i64 1424, i1 false)
  %19 = icmp eq i64 %5, 1170
  br i1 %19, label %20, label %27

20:                                               ; preds = %15
  %21 = getelementptr inbounds i8, i8* %4, i64 32
  %22 = call i32 @HRSS_parse_public_key(%struct.HRSS_public_key* nonnull %8, i8* %21) #12
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %27, label %24

24:                                               ; preds = %20
  %25 = call i32 @X25519(i8* nonnull %11, i8* %17, i8* %4) #12
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %28

27:                                               ; preds = %24, %20, %15
  store i8 50, i8* %3, align 1
  call void @ERR_put_error(i32 16, i32 0, i32 108, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 239) #12
  br label %46

28:                                               ; preds = %24
  %29 = getelementptr inbounds [1138 x i8], [1138 x i8]* %9, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1138, i8* nonnull %29) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %29, i8 -86, i64 1138, i1 false)
  %30 = getelementptr inbounds [1400 x i8], [1400 x i8]* %10, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1400, i8* nonnull %30) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %30, i8 -86, i64 1400, i1 false)
  %31 = call i32 @RAND_bytes(i8* nonnull %30, i64 1400) #12
  %32 = getelementptr inbounds i8, i8* %11, i64 32
  call void @HRSS_encap(i8* nonnull %29, i8* %32, %struct.HRSS_public_key* nonnull %8, i8* nonnull %30) #12
  %33 = call i32 @CBB_add_bytes(%struct.cbb_st* %1, i8* nonnull %16, i64 32) #12
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %43, label %35

35:                                               ; preds = %28
  %36 = call i32 @CBB_add_bytes(%struct.cbb_st* %1, i8* nonnull %29, i64 1138) #12
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %43, label %38

38:                                               ; preds = %35
  %39 = getelementptr inbounds %"class.bssl::Array", %"class.bssl::Array"* %2, i64 0, i32 0
  %40 = load i8*, i8** %39, align 8
  call void @OPENSSL_free(i8* %40) #12
  %41 = getelementptr inbounds %"class.bssl::Array", %"class.bssl::Array"* %2, i64 0, i32 1
  %42 = bitcast %"class.bssl::Array"* %2 to i64*
  store i64 %12, i64* %42, align 8
  store i64 64, i64* %41, align 8
  br label %43

43:                                               ; preds = %28, %35, %38
  %44 = phi i64 [ %12, %28 ], [ %12, %35 ], [ 0, %38 ]
  %45 = phi i1 [ false, %28 ], [ false, %35 ], [ true, %38 ]
  call void @llvm.lifetime.end.p0i8(i64 1400, i8* nonnull %30) #12
  call void @llvm.lifetime.end.p0i8(i64 1138, i8* nonnull %29) #12
  br label %46

46:                                               ; preds = %43, %27
  %47 = phi i64 [ %12, %27 ], [ %44, %43 ]
  %48 = phi i1 [ false, %27 ], [ %45, %43 ]
  call void @llvm.lifetime.end.p0i8(i64 1424, i8* nonnull %18) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %16) #12
  br label %49

49:                                               ; preds = %46, %14
  %50 = phi i64 [ %47, %46 ], [ %12, %14 ]
  %51 = phi i1 [ %48, %46 ], [ false, %14 ]
  %52 = inttoptr i64 %50 to i8*
  call void @OPENSSL_free(i8* %52) #12
  ret i1 %51
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN4bssl12_GLOBAL__N_114CECPQ2KeyShare6FinishEPNS_5ArrayIhEEPhNS_4SpanIKhEE(%"class.bssl::(anonymous namespace)::CECPQ2KeyShare"*, %"class.bssl::Array"* nocapture, i8* nocapture, i8*, i64) unnamed_addr #1 align 2 {
  store i8 80, i8* %2, align 1
  tail call void @OPENSSL_free(i8* null) #12
  %6 = tail call i8* @OPENSSL_malloc(i64 64) #12
  %7 = ptrtoint i8* %6 to i64
  %8 = icmp eq i8* %6, null
  br i1 %8, label %9, label %10

9:                                                ; preds = %5
  tail call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i32 324) #12
  tail call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 264) #12
  br label %25

10:                                               ; preds = %5
  %11 = icmp eq i64 %4, 1170
  br i1 %11, label %12, label %16

12:                                               ; preds = %10
  %13 = getelementptr inbounds %"class.bssl::(anonymous namespace)::CECPQ2KeyShare", %"class.bssl::(anonymous namespace)::CECPQ2KeyShare"* %0, i64 0, i32 1, i64 0
  %14 = tail call i32 @X25519(i8* nonnull %6, i8* %13, i8* %3) #12
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %17

16:                                               ; preds = %12, %10
  store i8 50, i8* %2, align 1
  tail call void @ERR_put_error(i32 16, i32 0, i32 108, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 271) #12
  br label %25

17:                                               ; preds = %12
  %18 = getelementptr inbounds i8, i8* %6, i64 32
  %19 = getelementptr inbounds %"class.bssl::(anonymous namespace)::CECPQ2KeyShare", %"class.bssl::(anonymous namespace)::CECPQ2KeyShare"* %0, i64 0, i32 2
  %20 = getelementptr inbounds i8, i8* %3, i64 32
  tail call void @HRSS_decap(i8* %18, %struct.HRSS_private_key* %19, i8* %20, i64 1138) #12
  %21 = getelementptr inbounds %"class.bssl::Array", %"class.bssl::Array"* %1, i64 0, i32 0
  %22 = load i8*, i8** %21, align 8
  tail call void @OPENSSL_free(i8* %22) #12
  %23 = getelementptr inbounds %"class.bssl::Array", %"class.bssl::Array"* %1, i64 0, i32 1
  %24 = bitcast %"class.bssl::Array"* %1 to i64*
  store i64 %7, i64* %24, align 8
  store i64 64, i64* %23, align 8
  br label %25

25:                                               ; preds = %17, %16, %9
  %26 = phi i64 [ %7, %16 ], [ 0, %17 ], [ %7, %9 ]
  %27 = phi i1 [ false, %16 ], [ true, %17 ], [ false, %9 ]
  %28 = inttoptr i64 %26 to i8*
  tail call void @OPENSSL_free(i8* %28) #12
  ret i1 %27
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare i32 @RAND_bytes(i8*, i64) local_unnamed_addr #3

declare void @HRSS_generate_key(%struct.HRSS_public_key*, %struct.HRSS_private_key*, i8*) local_unnamed_addr #3

declare void @HRSS_marshal_public_key(i8*, %struct.HRSS_public_key*) local_unnamed_addr #3

declare i32 @HRSS_parse_public_key(%struct.HRSS_public_key*, i8*) local_unnamed_addr #3

declare void @HRSS_encap(i8*, i8*, %struct.HRSS_public_key*, i8*) local_unnamed_addr #3

declare void @HRSS_decap(i8*, %struct.HRSS_private_key*, i8*, i64) local_unnamed_addr #3

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { cold noreturn nounwind }
attributes #10 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { nounwind readonly }
attributes #14 = { noreturn nounwind }
attributes #15 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
