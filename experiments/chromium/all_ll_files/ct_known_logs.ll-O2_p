; ModuleID = '../../components/certificate_transparency/ct_known_logs.cc'
source_filename = "../../components/certificate_transparency/ct_known_logs.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.certificate_transparency::CTLogInfo" = type { i8*, i64, i8* }
%"struct.certificate_transparency::(anonymous namespace)::DisqualifiedCTLogInfo" = type { [33 x i8], %"struct.certificate_transparency::CTLogInfo", %"class.base::TimeDelta" }
%"class.base::TimeDelta" = type { i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.certificate_transparency::CTLogInfo"*, %"struct.certificate_transparency::CTLogInfo"*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.certificate_transparency::CTLogInfo"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"class.std::__1::basic_string"* }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::vector.13" = type { %"class.std::__1::__vector_base.14" }
%"class.std::__1::__vector_base.14" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.15" }
%"struct.std::__1::pair" = type { %"class.std::__1::basic_string", %"class.base::TimeDelta" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"struct.std::__1::pair"* }

$_ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_ = comdat any

$_ZNSt3__16vectorINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4base9TimeDeltaEEENS5_ISA_EEE21__push_back_slow_pathISA_EEvOT_ = comdat any

@_ZN24certificate_transparency12_GLOBAL__N_110kCTLogListE = internal unnamed_addr constant [29 x %"struct.certificate_transparency::CTLogInfo"] [%"struct.certificate_transparency::CTLogInfo" { i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str, i32 0, i32 0), i64 91, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i32 0, i32 0) }, %"struct.certificate_transparency::CTLogInfo" { i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.2, i32 0, i32 0), i64 91, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i32 0, i32 0) }, %"struct.certificate_transparency::CTLogInfo" { i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.4, i32 0, i32 0), i64 91, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i32 0, i32 0) }, %"struct.certificate_transparency::CTLogInfo" { i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.6, i32 0, i32 0), i64 91, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i32 0, i32 0) }, %"struct.certificate_transparency::CTLogInfo" { i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.8, i32 0, i32 0), i64 91, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.9, i32 0, i32 0) }, %"struct.certificate_transparency::CTLogInfo" { i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.10, i32 0, i32 0), i64 91, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i32 0, i32 0) }, %"struct.certificate_transparency::CTLogInfo" { i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.12, i32 0, i32 0), i64 91, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.13, i32 0, i32 0) }, %"struct.certificate_transparency::CTLogInfo" { i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.14, i32 0, i32 0), i64 91, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.15, i32 0, i32 0) }, %"struct.certificate_transparency::CTLogInfo" { i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.16, i32 0, i32 0), i64 91, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.17, i32 0, i32 0) }, %"struct.certificate_transparency::CTLogInfo" { i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.18, i32 0, i32 0), i64 91, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.19, i32 0, i32 0) }, %"struct.certificate_transparency::CTLogInfo" { i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.20, i32 0, i32 0), i64 91, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.21, i32 0, i32 0) }, %"struct.certificate_transparency::CTLogInfo" { i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.22, i32 0, i32 0), i64 91, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.23, i32 0, i32 0) }, %"struct.certificate_transparency::CTLogInfo" { i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.24, i32 0, i32 0), i64 91, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.25, i32 0, i32 0) }, %"struct.certificate_transparency::CTLogInfo" { i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.26, i32 0, i32 0), i64 91, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.27, i32 0, i32 0) }, %"struct.certificate_transparency::CTLogInfo" { i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.28, i32 0, i32 0), i64 91, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.29, i32 0, i32 0) }, %"struct.certificate_transparency::CTLogInfo" { i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.30, i32 0, i32 0), i64 91, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31, i32 0, i32 0) }, %"struct.certificate_transparency::CTLogInfo" { i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.32, i32 0, i32 0), i64 91, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.33, i32 0, i32 0) }, %"struct.certificate_transparency::CTLogInfo" { i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.34, i32 0, i32 0), i64 91, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.35, i32 0, i32 0) }, %"struct.certificate_transparency::CTLogInfo" { i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.36, i32 0, i32 0), i64 91, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.37, i32 0, i32 0) }, %"struct.certificate_transparency::CTLogInfo" { i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.38, i32 0, i32 0), i64 91, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.39, i32 0, i32 0) }, %"struct.certificate_transparency::CTLogInfo" { i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.40, i32 0, i32 0), i64 91, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.41, i32 0, i32 0) }, %"struct.certificate_transparency::CTLogInfo" { i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.42, i32 0, i32 0), i64 91, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.43, i32 0, i32 0) }, %"struct.certificate_transparency::CTLogInfo" { i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.44, i32 0, i32 0), i64 91, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.45, i32 0, i32 0) }, %"struct.certificate_transparency::CTLogInfo" { i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.46, i32 0, i32 0), i64 91, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.47, i32 0, i32 0) }, %"struct.certificate_transparency::CTLogInfo" { i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.48, i32 0, i32 0), i64 91, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.49, i32 0, i32 0) }, %"struct.certificate_transparency::CTLogInfo" { i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.50, i32 0, i32 0), i64 91, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.51, i32 0, i32 0) }, %"struct.certificate_transparency::CTLogInfo" { i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.52, i32 0, i32 0), i64 91, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.53, i32 0, i32 0) }, %"struct.certificate_transparency::CTLogInfo" { i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.54, i32 0, i32 0), i64 91, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.55, i32 0, i32 0) }, %"struct.certificate_transparency::CTLogInfo" { i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.56, i32 0, i32 0), i64 91, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.57, i32 0, i32 0) }], align 16
@_ZN24certificate_transparency12_GLOBAL__N_122kDisqualifiedCTLogListE = internal constant [11 x %"struct.certificate_transparency::(anonymous namespace)::DisqualifiedCTLogInfo"] [%"struct.certificate_transparency::(anonymous namespace)::DisqualifiedCTLogInfo" { [33 x i8] c"\15\97\04\88\D7\B9\97\A0[\EBRQ*\DE\E8\D2\E8\B4\A3\16Rd\12\1A\9F\AB\FB\D5\F8Z\D9?\00", %"struct.certificate_transparency::CTLogInfo" { i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.58, i32 0, i32 0), i64 91, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.59, i32 0, i32 0) }, %"class.base::TimeDelta" { i64 1550275200000000 } }, %"struct.certificate_transparency::(anonymous namespace)::DisqualifiedCTLogInfo" { [33 x i8] c"4\BBj\D6\C3\DF\9C\03\EE\A8\A4\99\FFx\91Hl\9D^\5C\AC\92\D0\1F{\FD\1B\CE\19\DBH\EF\00", %"struct.certificate_transparency::CTLogInfo" { i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.60, i32 0, i32 0), i64 91, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.61, i32 0, i32 0) }, %"class.base::TimeDelta" { i64 1518479999000000 } }, %"struct.certificate_transparency::(anonymous namespace)::DisqualifiedCTLogInfo" { [33 x i8] c"A\B2\DC.\89\E6<\E4\AF\1B\A7\BB)\BFh\C6\DE\E6\F9\F1\CC\04~0\DF\FA\E3\B3\BA%\92c\00", %"struct.certificate_transparency::CTLogInfo" { i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.62, i32 0, i32 0), i64 91, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.63, i32 0, i32 0) }, %"class.base::TimeDelta" { i64 1518479999000000 } }, %"struct.certificate_transparency::(anonymous namespace)::DisqualifiedCTLogInfo" { [33 x i8] c"g\8D\B6[>tC\B6\F3\A3p\D5\E1:\B1\B4;\E0\A0\D3Q\F7\CAt\22P\C7\C6\FAQ\A8\8A\00", %"struct.certificate_transparency::CTLogInfo" { i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.64, i32 0, i32 0), i64 91, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.65, i32 0, i32 0) }, %"class.base::TimeDelta" { i64 1606780800000000 } }, %"struct.certificate_transparency::(anonymous namespace)::DisqualifiedCTLogInfo" { [33 x i8] c"ta\B4\A0\9C\FB=A\D7QYW[.vI\A4E\A8\D2w\09\B0\CCVJd\82\B7\EBA\A3\00", %"struct.certificate_transparency::CTLogInfo" { i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.66, i32 0, i32 0), i64 91, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.67, i32 0, i32 0) }, %"class.base::TimeDelta" { i64 1464566400000000 } }, %"struct.certificate_transparency::(anonymous namespace)::DisqualifiedCTLogInfo" { [33 x i8] c"\87u\BF\E7Y|\F8\8CC\99_\BD\F3n\FFV\8DGV6\FFJ\B5`\C1\B4\EA\FF^\A0\83\0F\00", %"struct.certificate_transparency::CTLogInfo" { i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.68, i32 0, i32 0), i64 91, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.69, i32 0, i32 0) }, %"class.base::TimeDelta" { i64 1588550440000000 } }, %"struct.certificate_transparency::(anonymous namespace)::DisqualifiedCTLogInfo" { [33 x i8] c"\A5w\AC\9C\EDuH\DD\8F\02[g\A2A\08\9D\F8n\0FGn\C2\03\C2\EC\BE\DB\18_(&8\00", %"struct.certificate_transparency::CTLogInfo" { i8* getelementptr inbounds ([295 x i8], [295 x i8]* @.str.70, i32 0, i32 0), i64 294, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.71, i32 0, i32 0) }, %"class.base::TimeDelta" { i64 1537228800000000 } }, %"struct.certificate_transparency::(anonymous namespace)::DisqualifiedCTLogInfo" { [33 x i8] c"\AC;\9A\ED\7F\A9gGW\15\9Em}WVr\F9\D9\81\00\94\1E\9B\DE\FF\EC\A11;ux-\00", %"struct.certificate_transparency::CTLogInfo" { i8* getelementptr inbounds ([295 x i8], [295 x i8]* @.str.72, i32 0, i32 0), i64 294, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.73, i32 0, i32 0) }, %"class.base::TimeDelta" { i64 1488307346000000 } }, %"struct.certificate_transparency::(anonymous namespace)::DisqualifiedCTLogInfo" { [33 x i8] c"\BCx\E1\DF\C5\F6<hFI3M\A1\0F\A1_\09yi \09\C0\81\B4\F3\F6\91\7F>\D9\B8\A5\00", %"struct.certificate_transparency::CTLogInfo" { i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.74, i32 0, i32 0), i64 91, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.75, i32 0, i32 0) }, %"class.base::TimeDelta" { i64 1550275200000000 } }, %"struct.certificate_transparency::(anonymous namespace)::DisqualifiedCTLogInfo" { [33 x i8] c"\CD\B5\17\9B\7F\C1\C0F\FE\EA1\13j?\8F\00.a\82\FA\F8\89o\EC\C8\B2\F5\B5\AB`I\00\00", %"struct.certificate_transparency::CTLogInfo" { i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.76, i32 0, i32 0), i64 91, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.77, i32 0, i32 0) }, %"class.base::TimeDelta" { i64 1460678400000000 } }, %"struct.certificate_transparency::(anonymous namespace)::DisqualifiedCTLogInfo" { [33 x i8] c"\DD\EB\1D+z\0DO\A6 \8B\81\AD\81hp~.\8E\9D\01\D5\5C\88\8D=\11\C4\CD\B6\EC\BE\CC\00", %"struct.certificate_transparency::CTLogInfo" { i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.78, i32 0, i32 0), i64 91, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.79, i32 0, i32 0) }, %"class.base::TimeDelta" { i64 1550275200000000 } }], align 16
@_ZN24certificate_transparency12_GLOBAL__N_113kGoogleLogIDsE = internal constant [11 x [33 x i8]] [[33 x i8] c")<Q\96T\C89e\BA\AAP\FCX\07\D4\B7o\BFXz)r\DC\A4\C3\0C\F4\E5EG\F4x\00", [33 x i8] c")y\BE\F0\9E99!\F0Vs\9Fc\A5w\E5\BEW}\9C`\0A\F8\F9M]&\5C%]\C7\84\00", [33 x i8] c"F\A5U\EBu\FA\91 0\B5\A2\89i\F4\F3}\11,At\BE\FDI\B8\85\AB\F2\FCp\FEmG\00", [33 x i8] c"h\F6\98\F8\1Fd\82\BE:\8C\EE\B9(\1DL\FCqQ]g\93\D4D\D1\0Ag\AC\BBOO\FB\C4\00", [33 x i8] c"}>\F2\F8\8F\FF\88Uh$\C2\C0\CA\9ER\89y+\C5\0Ex\09\7F.j\97h\99~\22\F0\D7\00", [33 x i8] c"\A4\B9\09\90\B4\18X\14\87\BB\13\A2\CCgp\0A<5\98\04\F9\1B\DF\B8\E3w\CD\0E\C8\0D\DC\10\00", [33 x i8] c"\AD\F7\BE\FA|\FF\10\C8\8B\9D=\9C\1E>\18j\B4g)]\CF\B1\0C$\CA\85\864\EB\DC\82\8A\00", [33 x i8] c"\BB\D9\DF\BC\1F\8Aq\B5\93\94#\97\AA\92{G8W\95\0A\ABR\E8\1A\90\96d6\8E\1E\D1\85\00", [33 x i8] c"\E8>\D0\DA>\F5\0652\E7W(\BC\89k\C9\03\D3\CB\D1\11k\EC\EBi\E1w}m\06\BDn\00", [33 x i8] c"\EEK\BD\B7u\CE`\BA\E1Bi\1F\AB\E1\9Ef\A3\0F~_\B0r\D8\83\00\C4{\89z\A8\FD\CB\00", [33 x i8] c"\F6\5C\94/\D1w0\22\14T\18\080\94V\8E\E3M\13\193\BF\DF\0C/ \0B\CCN\F1d\E3\00"], align 16
@.str = private unnamed_addr constant [92 x i8] c"0Y0\13\06\07*\86H\CE=\02\01\06\08*\86H\CE=\03\01\07\03B\00\04M\E0fd\EA\F3d\AA8\C5\89-\C7\D8\08\D9\C8Dq\ED\DC\C3\FB[\AF\9Cd\A1\09f\84\1D|h\A7\EC\C4?\8C\9C\82\E0\18\D9t\14\E9\B4y\81\A2\94Ub\F3\9C\0BD\83\A1+\C9q+\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"Google 'Argon2021' log\00", align 1
@.str.2 = private unnamed_addr constant [92 x i8] c"0Y0\13\06\07*\86H\CE=\02\01\06\08*\86H\CE=\03\01\07\03B\00\04x\83\DC\E9\F1\A6\B8\18:\00\99/\FF>\CD\15\C9&\1E\F7\FF:\A9\A3r\16I\EB\09\B6\A8\DD\B4\D2G\91\0E\0D\F9\D9\D5\A9\8B\B0\87\9D%y\D4\1AP`\08\F5\09\069&\E4@\C2\BA\C3\C2\00", align 1
@.str.3 = private unnamed_addr constant [23 x i8] c"Google 'Argon2022' log\00", align 1
@.str.4 = private unnamed_addr constant [92 x i8] c"0Y0\13\06\07*\86H\CE=\02\01\06\08*\86H\CE=\03\01\07\03B\00\04\D0\90\8FdRNB\AC\84\B6.L\F2=w\00\B3w\08\05G\AAEL\E3,\8Ep\A5\82\BBl\B2{\9C\98z\A0\E9\11v(\00\B2 \B4\CD\D3\98{M\96'\E6\B7\EE\22j\D1\B0.\91wx\00", align 1
@.str.5 = private unnamed_addr constant [23 x i8] c"Google 'Argon2023' log\00", align 1
@.str.6 = private unnamed_addr constant [92 x i8] c"0Y0\13\06\07*\86H\CE=\02\01\06\08*\86H\CE=\03\01\07\03B\00\04G\EDL\22{\BCC\7FA\C06yF\9FS\C1xp\9By-\BE\02s\A6O\EB\ED\D0\E0\1AN\D9i\C3&\DEX\DFr\82/?Q;\D9?#\BF\22\D3\D5\BB\DDj\9C\A5j6\5CL~\96\E6\00", align 1
@.str.7 = private unnamed_addr constant [23 x i8] c"Google 'Xenon2021' log\00", align 1
@.str.8 = private unnamed_addr constant [92 x i8] c"0Y0\13\06\07*\86H\CE=\02\01\06\08*\86H\CE=\03\01\07\03B\00\04\F9d\BD\15,@bP\95\138<\C7!\B0:\B9\8F\A2z\15\D7\89\D6\8E1\13\00\87Y\BC\BB\EE\90\FC\C8X\13\0A\BF\ABC6T#\A4\81\CD\ADG\14\B7X\A0D\FAj\A0\A0\D7\C3c\1E+\00", align 1
@.str.9 = private unnamed_addr constant [23 x i8] c"Google 'Xenon2022' log\00", align 1
@.str.10 = private unnamed_addr constant [92 x i8] c"0Y0\13\06\07*\86H\CE=\02\01\06\08*\86H\CE=\03\01\07\03B\00\04r\16>\0B\EF\EF\CE>`\DD\95\CBcz\B9\A9\8DJol\DCa\80\A6E^/\83\AC\94\F3\85\88\D0\A5t\D0{\8E\FF\C5\EEB\A2\F0-\93\E3\C2\D0\B2\99\E2\E1B\E9\D2\C6\00'it\AE\CE\00", align 1
@.str.11 = private unnamed_addr constant [23 x i8] c"Google 'Xenon2023' log\00", align 1
@.str.12 = private unnamed_addr constant [92 x i8] c"0Y0\13\06\07*\86H\CE=\02\01\06\08*\86H\CE=\03\01\07\03B\00\04\D7\F4\CCi\B2\E4\0E\90\A3\8A\EAZp\09O\EF\13b\D0\8DI`\FF\1B@P\07\0Cmq\86\DA%I\8De\E1\08\0DG4k\BD'\BC\96!>4\F5\87v1\B1\7F\1D\C9\85;\0D\F7\1F?\E9\00", align 1
@.str.13 = private unnamed_addr constant [21 x i8] c"Google 'Aviator' log\00", align 1
@.str.14 = private unnamed_addr constant [92 x i8] c"0Y0\13\06\07*\86H\CE=\02\01\06\08*\86H\CE=\03\01\07\03B\00\04N\D2\BC\BF\B3\08\0A\F7\B9\EA\A4\C7\1C8a\04\EB\95\E0\89ThD\B1f\BC\82~OPlo\5C\A3\F0\AA>\F4\EC\80\F0\DB\0A\9Az\A0[r\00|%\0E\19\EF\AF\B2b\8DtC\F4&\F6\14\00", align 1
@.str.15 = private unnamed_addr constant [20 x i8] c"Google 'Icarus' log\00", align 1
@.str.16 = private unnamed_addr constant [92 x i8] c"0Y0\13\06\07*\86H\CE=\02\01\06\08*\86H\CE=\03\01\07\03B\00\04}\A8K\12)\80\A3=\AD\D3Zw\B8\CC\E2\88\B3\A5\FD\F1\D3\0C\CD\18\0C\E8AF\E8\81\01\1B\15\E1K\F1\1Bb\DD6\0A\08\18\BA\ED\0B5\84\D0\9E@<-\9E\9B\82e\BD\1F\04\10AL\A0\00", align 1
@.str.17 = private unnamed_addr constant [19 x i8] c"Google 'Pilot' log\00", align 1
@.str.18 = private unnamed_addr constant [92 x i8] c"0Y0\13\06\07*\86H\CE=\02\01\06\08*\86H\CE=\03\01\07\03B\00\04 [\18\C8<\C1\8B\B31\08\00\BF\A0\90W+\B7G\8Co\B5h\B0\8E\90x\E9\A0s\EAO(!.\9C\C0\F4\16\1B\AA\F9\D5\D7\A9\80\C3N/R<\98\01%F$%(#w-\05\C2@z\00", align 1
@.str.19 = private unnamed_addr constant [23 x i8] c"Google 'Rocketeer' log\00", align 1
@.str.20 = private unnamed_addr constant [92 x i8] c"0Y0\13\06\07*\86H\CE=\02\01\06\08*\86H\CE=\03\01\07\03B\00\04\12l\86\0E\F6\17\B1\12l7%\D2\AD\87=\0E1\EC!\AD\B1\CD\BE\14G\B6qV\85z\9A\B7=\89\90{\C62:\F8\DA\CE\8B\01\FE?\FCq\91\19\8E\14n\89z]\B4\AB~\E1N\1E|\AC\00", align 1
@.str.21 = private unnamed_addr constant [22 x i8] c"Google 'Skydiver' log\00", align 1
@.str.22 = private unnamed_addr constant [92 x i8] c"0Y0\13\06\07*\86H\CE=\02\01\06\08*\86H\CE=\03\01\07\03B\00\04\C6\9A'\EE*l\A9\E8HyM[\9A\9A \F51h\E0\F9<\FB\DA\0D\F0\E6\07\97T6$eW\9EEE\9E\EB\AF>\04\A8\D8J~\EA\F2\DF|\D2\DC\98F\F1:\E73\D3{\05\89\E9\9A\B6\00", align 1
@.str.23 = private unnamed_addr constant [28 x i8] c"Cloudflare 'Nimbus2021' Log\00", align 1
@.str.24 = private unnamed_addr constant [92 x i8] c"0Y0\13\06\07*\86H\CE=\02\01\06\08*\86H\CE=\03\01\07\03B\00\04H\B2GNP2rbJ\0D\0CH\BF\AD)do \DFyRc\16)\0A.`\B5\E2:\1C\B7\AFY\B1U\09\DBY\C7\E9\BDo\ED\0B\AF\05\96\97\FF;\9ACM\EB\1143\8A\E7\AC\83\C0\FF\00", align 1
@.str.25 = private unnamed_addr constant [28 x i8] c"Cloudflare 'Nimbus2022' Log\00", align 1
@.str.26 = private unnamed_addr constant [92 x i8] c"0Y0\13\06\07*\86H\CE=\02\01\06\08*\86H\CE=\03\01\07\03B\00\04\8B\FF-\92\18\CBF\9D\12^\B9Yu<\CD\917z\1E\A9\9C\99x\83'=\DF\01\D5\8B\80\E8c\9A\FE&\A2\1B\D1\87\05\EE\97\D6\E0[C\83\81\1C\02\F5A\80\80\7F\EF\A4a\CF\BC\84\B5\A8\00", align 1
@.str.27 = private unnamed_addr constant [28 x i8] c"Cloudflare 'Nimbus2023' Log\00", align 1
@.str.28 = private unnamed_addr constant [92 x i8] c"0Y0\13\06\07*\86H\CE=\02\01\06\08*\86H\CE=\03\01\07\03B\00\04\02F\C5\BE\1B\BB\82@\16\E8\C1\D2\AC\19i\13Y\F8\F8p\85F@\B98\B0#\82\A8dL\7F\BF\BB4\9FJ_(\8A\CF\19\C4\00\F66\06\93e\EDL\F5\A9!bZ\D8\91\EB8$@\AC\E8\00", align 1
@.str.29 = private unnamed_addr constant [20 x i8] c"DigiCert Log Server\00", align 1
@.str.30 = private unnamed_addr constant [92 x i8] c"0Y0\13\06\07*\86H\CE=\02\01\06\08*\86H\CE=\03\01\07\03B\00\04\E8\9E\04m\CAH\02]~\02D\91\B1\B8hc\9A\11N=\D5\A0W\DA\7FP\E5BG\E2\ED\16\DE\FCw#}[k\C0\DF#h/\AD@1\A3\17\E7j\BC\A8V$\04:C\A7\AF\EA\AFL{\00", align 1
@.str.31 = private unnamed_addr constant [22 x i8] c"DigiCert Yeti2021 Log\00", align 1
@.str.32 = private unnamed_addr constant [92 x i8] c"0Y0\13\06\07*\86H\CE=\02\01\06\08*\86H\CE=\03\01\07\03B\00\04\9F\F8\D8\1D\DE\FB[Q\B5\FB]\F5\B5\DEf\11\B0\9D_\FDo\FC\A8\98[\98O-\C3\91:\FB\FE\C4\0F\0D\C3`C\8C\1E\F2\F9\11\B2\BA\D0\F6\BC\A5\D2\B6\9F\F9\5C\87\A2}\FC\D4}\D6\13&\00", align 1
@.str.33 = private unnamed_addr constant [22 x i8] c"DigiCert Yeti2022 Log\00", align 1
@.str.34 = private unnamed_addr constant [92 x i8] c"0Y0\13\06\07*\86H\CE=\02\01\06\08*\86H\CE=\03\01\07\03B\00\04}\0D\03\B1\D5\98\8A\DC\F0\15;\C6\DC^\0Dn?\0D\BF\95\C8U\8C\D0\A6L\96\B1N'\B9&%\99\CC+\02\9E\A6\D3\DD\9F\B1\D5\C4\C3\AC5\04\07\87\976\AA\AD(\0D\7F+\D9h\9Fr\D1\00", align 1
@.str.35 = private unnamed_addr constant [22 x i8] c"DigiCert Yeti2023 Log\00", align 1
@.str.36 = private unnamed_addr constant [92 x i8] c"0Y0\13\06\07*\86H\CE=\02\01\06\08*\86H\CE=\03\01\07\03B\00\04\F6\8E\C0\8B\0A\DB\18\12\17\E8\B9\DC\E3\B2:9\F2\CCu\99\D1\CC\AA\0F\E6\ED;\DApb\EA\FAH8J(\92\D4\E2\D6\03p\95\13\F3\18-\B2Hg\EEs\5CK\0D\E6\80\FF\04\85\1A\0AX\16\00", align 1
@.str.37 = private unnamed_addr constant [24 x i8] c"DigiCert Nessie2021 Log\00", align 1
@.str.38 = private unnamed_addr constant [92 x i8] c"0Y0\13\06\07*\86H\CE=\02\01\06\08*\86H\CE=\03\01\07\03B\00\04'$\DDh\03(\CB\FEc\BE\0E\11GM}\17h\A1\11]Lq\C9A(\C7\B6\A2K\97\EC\C0\AF\FC/;\BF\E9\F1\B1\FC\F5\01\FF\A9\FBI@\0Cc$\98\D7y.\A6U\AB\16\C6\BEQ\D8q\00", align 1
@.str.39 = private unnamed_addr constant [24 x i8] c"DigiCert Nessie2022 Log\00", align 1
@.str.40 = private unnamed_addr constant [92 x i8] c"0Y0\13\06\07*\86H\CE=\02\01\06\08*\86H\CE=\03\01\07\03B\00\04\11{\BC\89\0C\12\09\14\9F\D8&\C8LjT\A4\1BEV\DF>#B\14\D1\DDB\DF\A2\DF{_\9Fo\07Z#Fy\16K_3g\C1\A0\8D[\5C\17u\F2M\A0\80\A1\98\1A\07Y\06\02\CAN\00", align 1
@.str.41 = private unnamed_addr constant [24 x i8] c"DigiCert Nessie2023 Log\00", align 1
@.str.42 = private unnamed_addr constant [92 x i8] c"0Y0\13\06\07*\86H\CE=\02\01\06\08*\86H\CE=\03\01\07\03B\00\04\F2o\D2\89\0F?\C5\F8\87\1E\ABe\B3\D9\BB\17#\8C\06\0E\09U\96=\0A\08\A2\C5q\B3\D1\A9/(>\83\10\BF\12\D0Df\15\EFT\E1\98\80\D0\CE$m>g\9A\E97#\CER\93\86\DA\80\00", align 1
@.str.43 = private unnamed_addr constant [23 x i8] c"Sectigo 'Sabre' CT log\00", align 1
@.str.44 = private unnamed_addr constant [92 x i8] c"0Y0\13\06\07*\86H\CE=\02\01\06\08*\86H\CE=\03\01\07\03B\00\04\EF\E4}t.\15\15\B6\E9\BB#\8B\FB,\B5\E1\C7\80\98G\FB@ih\FCI\ADaN\83G<\1A\B7\8D\DF\FF{0\B4\BA\FF/\CB\A0\14\E3\AD\D5\85?DY\8C\8C`\8B\D7\B8\B1\BF\AE\8Cg\00", align 1
@.str.45 = private unnamed_addr constant [25 x i8] c"Sectigo 'Mammoth' CT log\00", align 1
@.str.46 = private unnamed_addr constant [92 x i8] c"0Y0\13\06\07*\86H\CE=\02\01\06\08*\86H\CE=\03\01\07\03B\00\04.\C63\18\C3p\A3\CA\C1\22V\A4\94\12\1D\98=\8E~~\87\91\FA\E3+E$\CF[\8E!@\BA.m#L\84\C2^\1A\08v;;&L\97\9F\0B\B0b\22X\88~\EC\13V\1E*\EF$\F7\00", align 1
@.str.47 = private unnamed_addr constant [28 x i8] c"Let's Encrypt 'Oak2021' log\00", align 1
@.str.48 = private unnamed_addr constant [92 x i8] c"0Y0\13\06\07*\86H\CE=\02\01\06\08*\86H\CE=\03\01\07\03B\00\04\86<\B1\0DR#Z\DEn\F6\C0\7F\A3d\BC\AD\C1\89\DA\97YL`<\F8\8AW\84\8F\ED\BC\A0c\12Q\84\E6\BD\DD{\8C\80}\E3\8F\86\A4\EA\A9\CF\A8\EE\F3\E0^p\E0\BB\F6\BD\FC\1F\91.\00", align 1
@.str.49 = private unnamed_addr constant [28 x i8] c"Let's Encrypt 'Oak2022' log\00", align 1
@.str.50 = private unnamed_addr constant [92 x i8] c"0Y0\13\06\07*\86H\CE=\02\01\06\08*\86H\CE=\03\01\07\03B\00\04\B3=\0Ex\BE\E3\AD\5CD\5C\9B\BE\A3\84\16A\82\CA\CA\89\17\1E#\CE8\A5T/\7F\D34Qj\B9\5C\C3I\EA\FB\91\9D\E0\8A<s\06\9F|e8\11\80\C4\9AZ\00\A6g\C3\83\EF\89\85Q\00", align 1
@.str.51 = private unnamed_addr constant [28 x i8] c"Let's Encrypt 'Oak2023' log\00", align 1
@.str.52 = private unnamed_addr constant [92 x i8] c"0Y0\13\06\07*\86H\CE=\02\01\06\08*\86H\CE=\03\01\07\03B\00\04I\D0\1F\0B\E8uI\93lH\04l\D7\CF'\FD\D0\A25\88\C6J\09\13\ED\AB\CBa\EDf\99rs\CCxl\9B\19\80\A2\B1\ED;8C\90X\1A\09 \ABP\FA\D7v\E9\CA\F7\8E\9E\C8\87\92\98\00", align 1
@.str.53 = private unnamed_addr constant [18 x i8] c"Trust Asia CT2021\00", align 1
@.str.54 = private unnamed_addr constant [92 x i8] c"0Y0\13\06\07*\86H\CE=\02\01\06\08*\86H\CE=\03\01\07\03B\00\04\BBR\F2\16\CF\92\0B\CEy\E6Tm\C27S\A4\F5\F9:\A9\B3\05\EC\1D\BD\16\EC0\AC.\F8yb5\15\8E\1A\D8\16.\E4Hk\F6\C6\13\F1\96.\5C\10\FE\19\1E\A8\18\B8\0F-\C3\A4\86Q\97\00", align 1
@.str.55 = private unnamed_addr constant [19 x i8] c"Trust Asia Log2022\00", align 1
@.str.56 = private unnamed_addr constant [92 x i8] c"0Y0\13\06\07*\86H\CE=\02\01\06\08*\86H\CE=\03\01\07\03B\00\04\A4\11R\DB\17AN\90\D4VQ\120R\F8\9B\03\CFL\9F\F8.8\B5\F1Z\BA\FA8\B9\D2\8F\1A\81\DA\95\CC3\EC!(f\C6V>`6! \D9\D4\AC]\FA\5C\19\A1\05}\FE #\FC\F5\00", align 1
@.str.57 = private unnamed_addr constant [19 x i8] c"Trust Asia Log2023\00", align 1
@.str.58 = private unnamed_addr constant [92 x i8] c"0Y0\13\06\07*\86H\CE=\02\01\06\08*\86H\CE=\03\01\07\03B\00\04\A3\02d\84\22\BB%\EC\0D\E3\BC\C2\C9\89}\DDE\D0\EE\E6\15\85\8F\D9\E7\17\1B\13\80\EA\ED\B2\857\ADj\C5\D8%\9D\FA\F4\B4\F3n\16(%7\EA\A37d\B2\C7\0B\FDQ\E5\C1\05\F4\0E\B5\00", align 1
@.str.59 = private unnamed_addr constant [22 x i8] c"Symantec 'Sirius' log\00", align 1
@.str.60 = private unnamed_addr constant [92 x i8] c"0Y0\13\06\07*\86H\CE=\02\01\06\08*\86H\CE=\03\01\07\03B\00\04H\F3Y\F3\F6\05\18\D3\DB\B2\EDF~\CF\C8\11\B5W\B1\A8\D6L\E6\9F\B7J\1A\14\86C\A9H\B0\CBZ?<J\CA\DF\C4\82\14U\9A\F8\F7\8E@U\DC\F4\D2\AF\EAut\FBN\7F`\86.Q\00", align 1
@.str.61 = private unnamed_addr constant [13 x i8] c"StartCom log\00", align 1
@.str.62 = private unnamed_addr constant [92 x i8] c"0Y0\13\06\07*\86H\CE=\02\01\06\08*\86H\CE=\03\01\07\03B\00\04\CC\11\88{-f\CB\AE\8FM0f'\19%\22\93!F\B4/\01\D3\C6\F9+\D5\C8\BAs\9B\06\A2\F0\8A\02\9C\D0kF\180\85\BA\E9$\8B\0E\D1[p(\0C~\F1:E\7FZ\F3\82B`1\00", align 1
@.str.63 = private unnamed_addr constant [11 x i8] c"WoSign log\00", align 1
@.str.64 = private unnamed_addr constant [92 x i8] c"0Y0\13\06\07*\86H\CE=\02\01\06\08*\86H\CE=\03\01\07\03B\00\04\8F\09sc;,\0CA\B8\0E\93\E89.\F7\13\0B\1D\A2\17436\A8\874fS?]\8A\1E\D9\F1!\F2\CA\F8\8A\9At\0B\D4\A2\9Fc\A5F\16{t\BAV\D5\BA\9C\C6]&\98P\0A.\A4\00", align 1
@.str.65 = private unnamed_addr constant [19 x i8] c"Trust Asia Log2021\00", align 1
@.str.66 = private unnamed_addr constant [92 x i8] c"0Y0\13\06\07*\86H\CE=\02\01\06\08*\86H\CE=\03\01\07\03B\00\04'd9\0C-\DCP\18\F8!\00\A2\0E\ED,\EA>u\BA\9F\93d\09\00\11\C4\11\17\AB\5C\CF\0Ft\AC\B5\97\90\93\00[\B8\EB\F7'=\D9\B2\0A\81_/\0Du8\947\99\1E\F6\07v\E0\EE\BE\00", align 1
@.str.67 = private unnamed_addr constant [11 x i8] c"Izenpe log\00", align 1
@.str.68 = private unnamed_addr constant [92 x i8] c"0Y0\13\06\07*\86H\CE=\02\01\06\08*\86H\CE=\03\01\07\03B\00\04\CC]9/f\B8L\7F\C1.\03\A14\A3\E8\8A\86\02\AEJ\11\C6\F7&j7\9B\F08\F8]\09\8Dc\E81k\86f\CFy\B3%<\1E\DFx\B4\A8\C5i\FA\B7\F0\82ybC\F6\CC\FE\81f\84\00", align 1
@.str.69 = private unnamed_addr constant [22 x i8] c"DigiCert Log Server 2\00", align 1
@.str.70 = private unnamed_addr constant [295 x i8] c"0\82\01\220\0D\06\09*\86H\86\F7\0D\01\01\01\05\00\03\82\01\0F\000\82\01\0A\02\82\01\01\00\BF\B5\08a\9A)2\04\D3%c\E9\D8\85\E1\86\E0\1F\D6^\9A\F73;\80\1B\E7\B6>_-\A1f\F6\95J\84\A6!Vy\E8\F7\85\EE]\E3|\12\C0\E0\89\22\09\22>\BA\16\95\06\BD\A8\B9\B1\A9\B2z\D6a.\87\11\B9x@\89u\DB\0C\DC\90\E0\A4y\D6\D5^n\D1*\DB4\F4\99?e\89;F\C2),\15\07\1C\C9K\1AT\F8l\1E\AF`'b\0Ae\D5\9A\B9P6\16nq\F6\1F\01\F7\12\A7\FC\BF\F6!\A3)\90\86-w\DE\BBL\D4\CF\FD\D2\CF\82,M\D4\F2\C2-\AC\A9\BE\EA\C3\19%C\B2\E5\9Al\0D\C5\1C\A5\8B\F7?0\AF\B9\01\91\B7i\12\12\E5\83a\FE4\00\BE\F6q\8A\C7\EBP\92\E8Y\FE\15\91\EB\96\97\F8#T?-\8E\07\DF\EE\DA\B3O\C8<\9Do\DF<,CW\A1G\0C\91\04\F4uM\DA\89\81\A4\14\064\B9\98\C3\DA\F1\FD\ED36\D3\16-5\02\03\01\00\01\00", align 1
@.str.71 = private unnamed_addr constant [13 x i8] c"CNNIC CT log\00", align 1
@.str.72 = private unnamed_addr constant [295 x i8] c"0\82\01\220\0D\06\09*\86H\86\F7\0D\01\01\01\05\00\03\82\01\0F\000\82\01\0A\02\82\01\01\00\A2ZH\1F\17R\955\CB\A3[:\1FS\82v\94\A3\FF\80\F2\1C7<\C0\B1\BD\C1Y\8B\AB-e\93\D7\F3\E0\04\D5\9Ao\BF\D6#v6O#\99\CBT(\AD\8C\15KeYvAJ\9C\A6\F7\B3;~\B1\A5I\A4\17Ql\80\DC*\90PK\88$\E9\A5\122\93\04H\90\02\FA_\0E0\87\8EUv\05\EE*L\CE\A3ji\09n%\AD\82v\0F\84\92\FA8\D6\86N$\8F\9B\B0r\CB\9E\E2k?\E1m\C9%u#\88\A1\18X\06#3x\DA\00\D08\91g\D2\A6}'\97gZ\C1\F3/\17\E6\EA\D2[\E8\81\CD\FD\92h\E7\F3\06\F0\E9r\84\EE\01\A5\B1\D83\DA\CE\83\A5\DB\C7\CF\D6\16~\90u\18\BF\16\DC2;m\8D\AB\82\17\1F\89 \8D\1D\9A\E6M#\08\DFxo\C6\05\BF_\AE\94\97\DB_d\D4\EE\16\8B\A3\84lq+\F1\AB\7F]\0D2\EE\04\E2\90\ECA\9F\FB9\C1\02\03\01\00\01\00", align 1
@.str.73 = private unnamed_addr constant [11 x i8] c"Venafi log\00", align 1
@.str.74 = private unnamed_addr constant [92 x i8] c"0Y0\13\06\07*\86H\CE=\02\01\06\08*\86H\CE=\03\01\07\03B\00\04\EA\95\9E\02\FF\EE\F13mK\87\BC\CD\FD\19\17b\FF\94\D3\D0Y\07?\02-\1C\90\FE\C8G0;\F1\DD\0D\B8\11\0C]\1D\86\DD\AB\D3+Ff\FBne\B7;\FDYh\AC\DF\A6\F8\CE\D2\18M\00", align 1
@.str.75 = private unnamed_addr constant [20 x i8] c"Symantec 'Vega' log\00", align 1
@.str.76 = private unnamed_addr constant [92 x i8] c"0Y0\13\06\07*\86H\CE=\02\01\06\08*\86H\CE=\03\01\07\03B\00\04\0B#\CB\85b\98aH\04s\EBT]\F3\D0\07\8C-\19-\8C6\F5\EB\8F\01B\0A|\98&'\C1\B5\DD\92\93\B0\AE\F8\9B=\0C\D8LN\1D\F9\15\FBGh{\BAf\B7%\9C\D0J\C2f\DBH\00", align 1
@.str.77 = private unnamed_addr constant [14 x i8] c"Certly.IO log\00", align 1
@.str.78 = private unnamed_addr constant [92 x i8] c"0Y0\13\06\07*\86H\CE=\02\01\06\08*\86H\CE=\03\01\07\03B\00\04\96\EA\AC\1CF\0C\1BU\DC\0D\FC\B5\94'FWBp:i\18\E2\BF;\C4\DB\AB\A0\F4\B6l\C0S?MB\103\F0X\97\8Fk\BEr\F4*\EC\1CB\AA\03/\1A~(5v\99\08=!\14\86\00", align 1
@.str.79 = private unnamed_addr constant [13 x i8] c"Symantec log\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24certificate_transparency12GetKnownLogsEv(%"class.std::__1::vector"* noalias sret) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = tail call i8* @_Znwm(i64 696) #7
  %5 = bitcast %"class.std::__1::vector"* %0 to i8**
  store i8* %4, i8** %5, align 8
  %6 = getelementptr inbounds i8, i8* %4, i64 696
  %7 = bitcast %"struct.certificate_transparency::CTLogInfo"** %3 to i8**
  store i8* %6, i8** %7, align 8
  %8 = bitcast %"struct.certificate_transparency::CTLogInfo"** %2 to i64*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* align 16 bitcast ([29 x %"struct.certificate_transparency::CTLogInfo"]* @_ZN24certificate_transparency12_GLOBAL__N_110kCTLogListE to i8*), i64 696, i1 false) #8
  %9 = ptrtoint i8* %6 to i64
  store i64 %9, i64* %8, align 8
  %10 = bitcast %"class.std::__1::vector"* %0 to i64*
  %11 = bitcast %"struct.certificate_transparency::CTLogInfo"** %3 to i64*
  %12 = bitcast i8* %6 to %"struct.certificate_transparency::CTLogInfo"*
  %13 = bitcast i8* %6 to %"struct.certificate_transparency::CTLogInfo"*
  br label %14

14:                                               ; preds = %72, %1
  %15 = phi i64 [ %9, %1 ], [ %75, %72 ]
  %16 = phi %"struct.certificate_transparency::CTLogInfo"* [ %13, %1 ], [ %74, %72 ]
  %17 = phi %"struct.certificate_transparency::CTLogInfo"* [ %12, %1 ], [ %73, %72 ]
  %18 = phi %"struct.certificate_transparency::(anonymous namespace)::DisqualifiedCTLogInfo"* [ getelementptr inbounds ([11 x %"struct.certificate_transparency::(anonymous namespace)::DisqualifiedCTLogInfo"], [11 x %"struct.certificate_transparency::(anonymous namespace)::DisqualifiedCTLogInfo"]* @_ZN24certificate_transparency12_GLOBAL__N_122kDisqualifiedCTLogListE, i64 0, i64 0), %1 ], [ %70, %72 ]
  %19 = getelementptr inbounds %"struct.certificate_transparency::(anonymous namespace)::DisqualifiedCTLogInfo", %"struct.certificate_transparency::(anonymous namespace)::DisqualifiedCTLogInfo"* %18, i64 0, i32 1
  %20 = icmp eq %"struct.certificate_transparency::CTLogInfo"* %17, %16
  br i1 %20, label %26, label %21

21:                                               ; preds = %14
  %22 = bitcast %"struct.certificate_transparency::CTLogInfo"* %17 to i8*
  %23 = bitcast %"struct.certificate_transparency::CTLogInfo"* %19 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %22, i8* align 8 %23, i64 24, i1 false) #8
  %24 = getelementptr inbounds %"struct.certificate_transparency::CTLogInfo", %"struct.certificate_transparency::CTLogInfo"* %17, i64 1
  %25 = ptrtoint %"struct.certificate_transparency::CTLogInfo"* %24 to i64
  store i64 %25, i64* %8, align 8
  br label %69

26:                                               ; preds = %14
  %27 = ptrtoint %"struct.certificate_transparency::CTLogInfo"* %16 to i64
  %28 = load i64, i64* %10, align 8
  %29 = sub i64 %27, %28
  %30 = sdiv exact i64 %29, 24
  %31 = add nsw i64 %30, 1
  %32 = icmp ugt i64 %31, 768614336404564650
  br i1 %32, label %33, label %35

33:                                               ; preds = %26
  %34 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %34) #9
  unreachable

35:                                               ; preds = %26
  %36 = icmp ult i64 %30, 384307168202282325
  br i1 %36, label %37, label %42

37:                                               ; preds = %35
  %38 = shl nsw i64 %30, 1
  %39 = icmp ult i64 %38, %31
  %40 = select i1 %39, i64 %31, i64 %38
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %47, label %42

42:                                               ; preds = %37, %35
  %43 = phi i64 [ %40, %37 ], [ 768614336404564650, %35 ]
  %44 = mul i64 %43, 24
  %45 = tail call i8* @_Znwm(i64 %44) #7
  %46 = bitcast i8* %45 to %"struct.certificate_transparency::CTLogInfo"*
  br label %47

47:                                               ; preds = %42, %37
  %48 = phi i64 [ %43, %42 ], [ 0, %37 ]
  %49 = phi %"struct.certificate_transparency::CTLogInfo"* [ %46, %42 ], [ null, %37 ]
  %50 = getelementptr inbounds %"struct.certificate_transparency::CTLogInfo", %"struct.certificate_transparency::CTLogInfo"* %49, i64 %30
  %51 = getelementptr inbounds %"struct.certificate_transparency::CTLogInfo", %"struct.certificate_transparency::CTLogInfo"* %49, i64 %48
  %52 = ptrtoint %"struct.certificate_transparency::CTLogInfo"* %51 to i64
  %53 = bitcast %"struct.certificate_transparency::CTLogInfo"* %50 to i8*
  %54 = bitcast %"struct.certificate_transparency::CTLogInfo"* %19 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %53, i8* align 8 %54, i64 24, i1 false) #8
  %55 = getelementptr inbounds %"struct.certificate_transparency::CTLogInfo", %"struct.certificate_transparency::CTLogInfo"* %50, i64 1
  %56 = ptrtoint %"struct.certificate_transparency::CTLogInfo"* %55 to i64
  %57 = sub i64 %15, %28
  %58 = sdiv exact i64 %57, -24
  %59 = getelementptr inbounds %"struct.certificate_transparency::CTLogInfo", %"struct.certificate_transparency::CTLogInfo"* %50, i64 %58
  %60 = ptrtoint %"struct.certificate_transparency::CTLogInfo"* %59 to i64
  %61 = icmp sgt i64 %57, 0
  br i1 %61, label %62, label %65

62:                                               ; preds = %47
  %63 = bitcast %"struct.certificate_transparency::CTLogInfo"* %59 to i8*
  %64 = inttoptr i64 %28 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %63, i8* align 8 %64, i64 %57, i1 false) #8
  br label %65

65:                                               ; preds = %62, %47
  store i64 %60, i64* %10, align 8
  store i64 %56, i64* %8, align 8
  store i64 %52, i64* %11, align 8
  %66 = icmp eq i64 %28, 0
  br i1 %66, label %69, label %67

67:                                               ; preds = %65
  %68 = inttoptr i64 %28 to i8*
  tail call void @_ZdlPv(i8* %68) #7
  br label %69

69:                                               ; preds = %21, %65, %67
  %70 = getelementptr inbounds %"struct.certificate_transparency::(anonymous namespace)::DisqualifiedCTLogInfo", %"struct.certificate_transparency::(anonymous namespace)::DisqualifiedCTLogInfo"* %18, i64 1
  %71 = icmp eq %"struct.certificate_transparency::(anonymous namespace)::DisqualifiedCTLogInfo"* %70, getelementptr inbounds ([11 x %"struct.certificate_transparency::(anonymous namespace)::DisqualifiedCTLogInfo"], [11 x %"struct.certificate_transparency::(anonymous namespace)::DisqualifiedCTLogInfo"]* @_ZN24certificate_transparency12_GLOBAL__N_122kDisqualifiedCTLogListE, i64 1, i64 0)
  br i1 %71, label %76, label %72

72:                                               ; preds = %69
  %73 = load %"struct.certificate_transparency::CTLogInfo"*, %"struct.certificate_transparency::CTLogInfo"** %2, align 8
  %74 = load %"struct.certificate_transparency::CTLogInfo"*, %"struct.certificate_transparency::CTLogInfo"** %3, align 8
  %75 = ptrtoint %"struct.certificate_transparency::CTLogInfo"* %73 to i64
  br label %14

76:                                               ; preds = %69
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24certificate_transparency23GetLogsOperatedByGoogleEv(%"class.std::__1::vector.1"* noalias sret) local_unnamed_addr #0 {
  %2 = alloca %"class.std::__1::basic_string", align 8
  %3 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 1
  %4 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %5 = bitcast %"class.std::__1::vector.1"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 24, i1 false) #8
  %6 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  %7 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %9 = bitcast %"class.std::__1::basic_string"** %3 to i64*
  %10 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %11 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %10, i64 0, i32 1, i32 0
  %12 = bitcast i64* %8 to <2 x i64>*
  br label %13

13:                                               ; preds = %33, %1
  %14 = phi %"class.std::__1::basic_string"* [ null, %1 ], [ %36, %33 ]
  %15 = phi i8* [ null, %1 ], [ %35, %33 ]
  %16 = phi %"class.std::__1::basic_string"* [ null, %1 ], [ %34, %33 ]
  %17 = phi [33 x i8]* [ getelementptr inbounds ([11 x [33 x i8]], [11 x [33 x i8]]* @_ZN24certificate_transparency12_GLOBAL__N_113kGoogleLogIDsE, i64 0, i64 0), %1 ], [ %31, %33 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #8
  %18 = getelementptr inbounds [33 x i8], [33 x i8]* %17, i64 0, i64 0
  %19 = call i8* @_Znwm(i64 48) #7
  store i8* %19, i8** %7, align 8
  store <2 x i64> <i64 32, i64 -9223372036854775760>, <2 x i64>* %12, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %19, i8* align 1 %18, i64 32, i1 false) #8
  %20 = getelementptr inbounds i8, i8* %19, i64 32
  store i8 0, i8* %20, align 1
  %21 = icmp ult %"class.std::__1::basic_string"* %16, %14
  br i1 %21, label %22, label %25

22:                                               ; preds = %13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* nonnull align 8 %6, i64 24, i1 false) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 24, i1 false) #8
  %23 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %16, i64 1
  %24 = ptrtoint %"class.std::__1::basic_string"* %23 to i64
  store i64 %24, i64* %9, align 8
  br label %30

25:                                               ; preds = %13
  call void @_ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_(%"class.std::__1::vector.1"* %0, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %2) #8
  %26 = load i8, i8* %11, align 1
  %27 = icmp slt i8 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %25
  %29 = load i8*, i8** %7, align 8
  call void @_ZdlPv(i8* %29) #7
  br label %30

30:                                               ; preds = %22, %25, %28
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #8
  %31 = getelementptr inbounds [33 x i8], [33 x i8]* %17, i64 1
  %32 = icmp eq [33 x i8]* %31, getelementptr inbounds ([11 x [33 x i8]], [11 x [33 x i8]]* @_ZN24certificate_transparency12_GLOBAL__N_113kGoogleLogIDsE, i64 1, i64 0)
  br i1 %32, label %37, label %33

33:                                               ; preds = %30
  %34 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %3, align 8
  %35 = bitcast %"class.std::__1::basic_string"* %34 to i8*
  %36 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %4, align 8
  br label %13

37:                                               ; preds = %30
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24certificate_transparency19GetDisqualifiedLogsEv(%"class.std::__1::vector.13"* noalias sret) local_unnamed_addr #0 {
  %2 = alloca %"struct.std::__1::pair", align 8
  %3 = getelementptr inbounds %"class.std::__1::vector.13", %"class.std::__1::vector.13"* %0, i64 0, i32 0, i32 1
  %4 = getelementptr inbounds %"class.std::__1::vector.13", %"class.std::__1::vector.13"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %5 = bitcast %"class.std::__1::vector.13"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 24, i1 false) #8
  %6 = bitcast %"struct.std::__1::pair"* %2 to i8*
  %7 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %9 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %2, i64 0, i32 1, i32 0
  %10 = bitcast %"struct.std::__1::pair"** %3 to i64*
  %11 = bitcast %"struct.std::__1::pair"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %12 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %11, i64 0, i32 1, i32 0
  %13 = bitcast i64* %8 to <2 x i64>*
  br label %14

14:                                               ; preds = %38, %1
  %15 = phi %"struct.std::__1::pair"* [ null, %1 ], [ %41, %38 ]
  %16 = phi i8* [ null, %1 ], [ %40, %38 ]
  %17 = phi %"struct.std::__1::pair"* [ null, %1 ], [ %39, %38 ]
  %18 = phi %"struct.certificate_transparency::(anonymous namespace)::DisqualifiedCTLogInfo"* [ getelementptr inbounds ([11 x %"struct.certificate_transparency::(anonymous namespace)::DisqualifiedCTLogInfo"], [11 x %"struct.certificate_transparency::(anonymous namespace)::DisqualifiedCTLogInfo"]* @_ZN24certificate_transparency12_GLOBAL__N_122kDisqualifiedCTLogListE, i64 0, i64 0), %1 ], [ %36, %38 ]
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #8
  %19 = getelementptr inbounds %"struct.certificate_transparency::(anonymous namespace)::DisqualifiedCTLogInfo", %"struct.certificate_transparency::(anonymous namespace)::DisqualifiedCTLogInfo"* %18, i64 0, i32 0, i64 0
  %20 = call i8* @_Znwm(i64 48) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %20, i8* align 1 %19, i64 32, i1 false) #8
  %21 = getelementptr inbounds i8, i8* %20, i64 32
  store i8 0, i8* %21, align 1
  store i8* %20, i8** %7, align 8
  store <2 x i64> <i64 32, i64 -9223372036854775760>, <2 x i64>* %13, align 8
  %22 = getelementptr inbounds %"struct.certificate_transparency::(anonymous namespace)::DisqualifiedCTLogInfo", %"struct.certificate_transparency::(anonymous namespace)::DisqualifiedCTLogInfo"* %18, i64 0, i32 2, i32 0
  %23 = load i64, i64* %22, align 8, !noalias !2
  store i64 %23, i64* %9, align 8, !alias.scope !2
  %24 = icmp ult %"struct.std::__1::pair"* %17, %15
  br i1 %24, label %25, label %30

25:                                               ; preds = %14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* nonnull align 8 %6, i64 24, i1 false) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 24, i1 false) #8
  %26 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %17, i64 0, i32 1, i32 0
  %27 = load i64, i64* %9, align 8
  store i64 %27, i64* %26, align 8
  %28 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %17, i64 1
  %29 = ptrtoint %"struct.std::__1::pair"* %28 to i64
  store i64 %29, i64* %10, align 8
  br label %35

30:                                               ; preds = %14
  call void @_ZNSt3__16vectorINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4base9TimeDeltaEEENS5_ISA_EEE21__push_back_slow_pathISA_EEvOT_(%"class.std::__1::vector.13"* %0, %"struct.std::__1::pair"* nonnull dereferenceable(32) %2) #8
  %31 = load i8, i8* %12, align 1
  %32 = icmp slt i8 %31, 0
  br i1 %32, label %33, label %35

33:                                               ; preds = %30
  %34 = load i8*, i8** %7, align 8
  call void @_ZdlPv(i8* %34) #7
  br label %35

35:                                               ; preds = %25, %33, %30
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #8
  %36 = getelementptr inbounds %"struct.certificate_transparency::(anonymous namespace)::DisqualifiedCTLogInfo", %"struct.certificate_transparency::(anonymous namespace)::DisqualifiedCTLogInfo"* %18, i64 1
  %37 = icmp eq %"struct.certificate_transparency::(anonymous namespace)::DisqualifiedCTLogInfo"* %36, getelementptr inbounds ([11 x %"struct.certificate_transparency::(anonymous namespace)::DisqualifiedCTLogInfo"], [11 x %"struct.certificate_transparency::(anonymous namespace)::DisqualifiedCTLogInfo"]* @_ZN24certificate_transparency12_GLOBAL__N_122kDisqualifiedCTLogListE, i64 1, i64 0)
  br i1 %37, label %42, label %38

38:                                               ; preds = %35
  %39 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %3, align 8
  %40 = bitcast %"struct.std::__1::pair"* %39 to i8*
  %41 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %4, align 8
  br label %14

42:                                               ; preds = %35
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_(%"class.std::__1::vector.1"*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.std::__1::basic_string"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.1"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 24
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 768614336404564650
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.1"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #9
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.std::__1::basic_string"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = sdiv exact i64 %18, 24
  %20 = icmp ult i64 %19, 384307168202282325
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = shl nsw i64 %19, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 768614336404564650, %14 ]
  %28 = mul i64 %27, 24
  %29 = tail call i8* @_Znwm(i64 %28) #7
  %30 = bitcast i8* %29 to %"class.std::__1::basic_string"*
  br label %31

31:                                               ; preds = %21, %26
  %32 = phi i64 [ %27, %26 ], [ 0, %21 ]
  %33 = phi %"class.std::__1::basic_string"* [ %30, %26 ], [ null, %21 ]
  %34 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %33, i64 %9
  %35 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %33, i64 %32
  %36 = ptrtoint %"class.std::__1::basic_string"* %35 to i64
  %37 = bitcast %"class.std::__1::basic_string"* %34 to i8*
  %38 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %38, i64 24, i1 false) #8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %38, i8 0, i64 24, i1 false) #8
  %39 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %34, i64 1
  %40 = ptrtoint %"class.std::__1::basic_string"* %39 to i64
  %41 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 0
  %42 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %41, align 8
  %43 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %3, align 8
  %44 = icmp eq %"class.std::__1::basic_string"* %43, %42
  br i1 %44, label %45, label %47

45:                                               ; preds = %31
  %46 = ptrtoint %"class.std::__1::basic_string"* %42 to i64
  br label %58

47:                                               ; preds = %31, %47
  %48 = phi %"class.std::__1::basic_string"* [ %50, %47 ], [ %34, %31 ]
  %49 = phi %"class.std::__1::basic_string"* [ %51, %47 ], [ %43, %31 ]
  %50 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %48, i64 -1
  %51 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %49, i64 -1
  %52 = bitcast %"class.std::__1::basic_string"* %50 to i8*
  %53 = bitcast %"class.std::__1::basic_string"* %51 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* align 8 %53, i64 24, i1 false) #8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %53, i8 0, i64 24, i1 false) #8
  %54 = icmp eq %"class.std::__1::basic_string"* %51, %42
  br i1 %54, label %55, label %47

55:                                               ; preds = %47
  %56 = load i64, i64* %6, align 8
  %57 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %3, align 8
  br label %58

58:                                               ; preds = %45, %55
  %59 = phi %"class.std::__1::basic_string"* [ %42, %45 ], [ %57, %55 ]
  %60 = phi %"class.std::__1::basic_string"* [ %34, %45 ], [ %50, %55 ]
  %61 = phi i64 [ %46, %45 ], [ %56, %55 ]
  %62 = ptrtoint %"class.std::__1::basic_string"* %60 to i64
  store i64 %62, i64* %6, align 8
  store i64 %40, i64* %4, align 8
  store i64 %36, i64* %16, align 8
  %63 = inttoptr i64 %61 to %"class.std::__1::basic_string"*
  %64 = icmp eq %"class.std::__1::basic_string"* %59, %63
  br i1 %64, label %77, label %65

65:                                               ; preds = %58, %75
  %66 = phi %"class.std::__1::basic_string"* [ %67, %75 ], [ %59, %58 ]
  %67 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %66, i64 -1
  %68 = bitcast %"class.std::__1::basic_string"* %67 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %69 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %68, i64 0, i32 1, i32 0
  %70 = load i8, i8* %69, align 1
  %71 = icmp slt i8 %70, 0
  br i1 %71, label %72, label %75

72:                                               ; preds = %65
  %73 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %67, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %74 = load i8*, i8** %73, align 8
  tail call void @_ZdlPv(i8* %74) #7
  br label %75

75:                                               ; preds = %72, %65
  %76 = icmp eq %"class.std::__1::basic_string"* %67, %63
  br i1 %76, label %77, label %65

77:                                               ; preds = %75, %58
  %78 = icmp eq i64 %61, 0
  br i1 %78, label %81, label %79

79:                                               ; preds = %77
  %80 = inttoptr i64 %61 to i8*
  tail call void @_ZdlPv(i8* %80) #7
  br label %81

81:                                               ; preds = %77, %79
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4base9TimeDeltaEEENS5_ISA_EEE21__push_back_slow_pathISA_EEvOT_(%"class.std::__1::vector.13"*, %"struct.std::__1::pair"* dereferenceable(32)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.13", %"class.std::__1::vector.13"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"struct.std::__1::pair"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.13"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 5
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 576460752303423487
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.13"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #9
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.13", %"class.std::__1::vector.13"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"struct.std::__1::pair"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 5
  %20 = icmp ult i64 %19, 288230376151711743
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 4
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 576460752303423487
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #9
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 576460752303423487, %14 ]
  %31 = shl i64 %30, 5
  %32 = tail call i8* @_Znwm(i64 %31) #7
  %33 = bitcast i8* %32 to %"struct.std::__1::pair"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"struct.std::__1::pair"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %36, i64 %9
  %38 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %36, i64 %35
  %39 = ptrtoint %"struct.std::__1::pair"* %38 to i64
  %40 = bitcast %"struct.std::__1::pair"* %37 to i8*
  %41 = bitcast %"struct.std::__1::pair"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 24, i1 false) #8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %41, i8 0, i64 24, i1 false) #8
  %42 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %1, i64 0, i32 1, i32 0
  %43 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %36, i64 %9, i32 1, i32 0
  %44 = load i64, i64* %42, align 8
  store i64 %44, i64* %43, align 8
  %45 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %37, i64 1
  %46 = ptrtoint %"struct.std::__1::pair"* %45 to i64
  %47 = getelementptr inbounds %"class.std::__1::vector.13", %"class.std::__1::vector.13"* %0, i64 0, i32 0, i32 0
  %48 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %47, align 8
  %49 = ptrtoint %"struct.std::__1::pair"* %48 to i64
  %50 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %3, align 8
  %51 = icmp eq %"struct.std::__1::pair"* %50, %48
  br i1 %51, label %93, label %52

52:                                               ; preds = %34
  %53 = getelementptr %"struct.std::__1::pair", %"struct.std::__1::pair"* %50, i64 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = ptrtoint i8** %53 to i64
  %55 = sub i64 %54, %49
  %56 = and i64 %55, 32
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %66

58:                                               ; preds = %52
  %59 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %37, i64 -1
  %60 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %50, i64 -1
  %61 = bitcast %"struct.std::__1::pair"* %59 to i8*
  %62 = bitcast %"struct.std::__1::pair"* %60 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %61, i8* align 8 %62, i64 24, i1 false) #8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %62, i8 0, i64 24, i1 false) #8
  %63 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %50, i64 -1, i32 1, i32 0
  %64 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %37, i64 -1, i32 1, i32 0
  %65 = load i64, i64* %63, align 8
  store i64 %65, i64* %64, align 8
  br label %66

66:                                               ; preds = %58, %52
  %67 = phi %"struct.std::__1::pair"* [ undef, %52 ], [ %59, %58 ]
  %68 = phi %"struct.std::__1::pair"* [ %37, %52 ], [ %59, %58 ]
  %69 = phi %"struct.std::__1::pair"* [ %50, %52 ], [ %60, %58 ]
  %70 = icmp ult i64 %55, 32
  br i1 %70, label %89, label %71

71:                                               ; preds = %66, %71
  %72 = phi %"struct.std::__1::pair"* [ %81, %71 ], [ %68, %66 ]
  %73 = phi %"struct.std::__1::pair"* [ %82, %71 ], [ %69, %66 ]
  %74 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %72, i64 -1
  %75 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %73, i64 -1
  %76 = bitcast %"struct.std::__1::pair"* %74 to i8*
  %77 = bitcast %"struct.std::__1::pair"* %75 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %76, i8* align 8 %77, i64 24, i1 false) #8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %77, i8 0, i64 24, i1 false) #8
  %78 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %73, i64 -1, i32 1, i32 0
  %79 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %72, i64 -1, i32 1, i32 0
  %80 = load i64, i64* %78, align 8
  store i64 %80, i64* %79, align 8
  %81 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %72, i64 -2
  %82 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %73, i64 -2
  %83 = bitcast %"struct.std::__1::pair"* %81 to i8*
  %84 = bitcast %"struct.std::__1::pair"* %82 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %83, i8* align 8 %84, i64 24, i1 false) #8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %84, i8 0, i64 24, i1 false) #8
  %85 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %73, i64 -2, i32 1, i32 0
  %86 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %72, i64 -2, i32 1, i32 0
  %87 = load i64, i64* %85, align 8
  store i64 %87, i64* %86, align 8
  %88 = icmp eq %"struct.std::__1::pair"* %82, %48
  br i1 %88, label %89, label %71

89:                                               ; preds = %71, %66
  %90 = phi %"struct.std::__1::pair"* [ %67, %66 ], [ %81, %71 ]
  %91 = load i64, i64* %6, align 8
  %92 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %3, align 8
  br label %93

93:                                               ; preds = %34, %89
  %94 = phi %"struct.std::__1::pair"* [ %92, %89 ], [ %48, %34 ]
  %95 = phi %"struct.std::__1::pair"* [ %90, %89 ], [ %37, %34 ]
  %96 = phi i64 [ %91, %89 ], [ %49, %34 ]
  %97 = ptrtoint %"struct.std::__1::pair"* %95 to i64
  store i64 %97, i64* %6, align 8
  store i64 %46, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %98 = inttoptr i64 %96 to %"struct.std::__1::pair"*
  %99 = icmp eq %"struct.std::__1::pair"* %94, %98
  br i1 %99, label %112, label %100

100:                                              ; preds = %93, %110
  %101 = phi %"struct.std::__1::pair"* [ %102, %110 ], [ %94, %93 ]
  %102 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %101, i64 -1
  %103 = bitcast %"struct.std::__1::pair"* %102 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %104 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %103, i64 0, i32 1, i32 0
  %105 = load i8, i8* %104, align 1
  %106 = icmp slt i8 %105, 0
  br i1 %106, label %107, label %110

107:                                              ; preds = %100
  %108 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %102, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %109 = load i8*, i8** %108, align 8
  tail call void @_ZdlPv(i8* %109) #7
  br label %110

110:                                              ; preds = %107, %100
  %111 = icmp eq %"struct.std::__1::pair"* %102, %98
  br i1 %111, label %112, label %100

112:                                              ; preds = %110, %93
  %113 = icmp eq i64 %96, 0
  br i1 %113, label %116, label %114

114:                                              ; preds = %112
  %115 = inttoptr i64 %96 to i8*
  tail call void @_ZdlPv(i8* %115) #7
  br label %116

116:                                              ; preds = %112, %114
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { builtin nounwind }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNSt3__19make_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKN4base9TimeDeltaEEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENSC_IT0_E4typeEEEOSD_OSG_: argument 0"}
!4 = distinct !{!4, !"_ZNSt3__19make_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKN4base9TimeDeltaEEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENSC_IT0_E4typeEEEOSD_OSG_"}
