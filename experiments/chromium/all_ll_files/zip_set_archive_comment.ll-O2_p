; ModuleID = '../../third_party/libzip/src/lib/zip_set_archive_comment.c'
source_filename = "../../third_party/libzip/src/lib/zip_set_archive_comment.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.zip = type { %struct.zip_source*, i32, %struct.zip_error, i32, i32, i8*, %struct.zip_string*, %struct.zip_string*, i8, i64, i64, %struct.zip_entry*, i32, i32, %struct.zip_source**, %struct.zip_hash*, %struct.zip_progress* }
%struct.zip_source = type { %struct.zip_source*, %union.anon, i8*, %struct.zip_error, i64, i32, i32, i8, %struct.zip*, i32, i8, i8 }
%union.anon = type { i64 (i8*, i8*, i64, i32)* }
%struct.zip_error = type { i32, i32, i8* }
%struct.zip_string = type { i8*, i16, i32, i8*, i32 }
%struct.zip_entry = type { %struct.zip_dirent*, %struct.zip_dirent*, %struct.zip_source*, i8 }
%struct.zip_dirent = type { i32, i8, i8, i8, i16, i16, i16, i32, i64, i32, i64, i64, %struct.zip_string*, %struct.zip_extra_field*, %struct.zip_string*, i32, i16, i32, i64, i16, i16, i8* }
%struct.zip_extra_field = type { %struct.zip_extra_field*, i32, i16, i16, i8* }
%struct.zip_hash = type opaque
%struct.zip_progress = type opaque

; Function Attrs: nounwind ssp uwtable
define hidden i32 @zip_set_archive_comment(%struct.zip*, i8*, i16 zeroext) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 4
  %5 = load i32, i32* %4, align 4
  %6 = and i32 %5, 2
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %10, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %9, i32 25, i32 0) #2
  br label %46

10:                                               ; preds = %3
  %11 = icmp ne i16 %2, 0
  %12 = icmp eq i8* %1, null
  %13 = and i1 %12, %11
  br i1 %13, label %14, label %16

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %15, i32 18, i32 0) #2
  br label %46

16:                                               ; preds = %10
  br i1 %11, label %17, label %25

17:                                               ; preds = %16
  %18 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  %19 = tail call %struct.zip_string* @_zip_string_new(i8* %1, i16 zeroext %2, i32 0, %struct.zip_error* %18) #2
  %20 = icmp eq %struct.zip_string* %19, null
  br i1 %20, label %46, label %21

21:                                               ; preds = %17
  %22 = tail call i32 @_zip_guess_encoding(%struct.zip_string* nonnull %19, i32 0) #2
  %23 = icmp eq i32 %22, 4
  br i1 %23, label %24, label %25

24:                                               ; preds = %21
  tail call void @_zip_string_free(%struct.zip_string* nonnull %19) #2
  tail call void @zip_error_set(%struct.zip_error* %18, i32 18, i32 0) #2
  br label %46

25:                                               ; preds = %16, %21
  %26 = phi %struct.zip_string* [ %19, %21 ], [ null, %16 ]
  %27 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 7
  %28 = load %struct.zip_string*, %struct.zip_string** %27, align 8
  tail call void @_zip_string_free(%struct.zip_string* %28) #2
  store %struct.zip_string* null, %struct.zip_string** %27, align 8
  %29 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 6
  %30 = load %struct.zip_string*, %struct.zip_string** %29, align 8
  %31 = icmp eq %struct.zip_string* %30, null
  br i1 %31, label %38, label %32

32:                                               ; preds = %25
  %33 = tail call i32 @_zip_string_equal(%struct.zip_string* nonnull %30, %struct.zip_string* %26) #2
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %42

35:                                               ; preds = %32
  %36 = load %struct.zip_string*, %struct.zip_string** %29, align 8
  %37 = icmp eq %struct.zip_string* %36, null
  br label %38

38:                                               ; preds = %35, %25
  %39 = phi i1 [ %37, %35 ], [ true, %25 ]
  %40 = icmp eq %struct.zip_string* %26, null
  %41 = and i1 %40, %39
  br i1 %41, label %42, label %44

42:                                               ; preds = %32, %38
  tail call void @_zip_string_free(%struct.zip_string* %26) #2
  %43 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 8
  store i8 0, i8* %43, align 8
  br label %46

44:                                               ; preds = %38
  store %struct.zip_string* %26, %struct.zip_string** %27, align 8
  %45 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 8
  store i8 1, i8* %45, align 8
  br label %46

46:                                               ; preds = %42, %44, %17, %24, %14, %8
  %47 = phi i32 [ -1, %8 ], [ -1, %14 ], [ -1, %24 ], [ -1, %17 ], [ 0, %44 ], [ 0, %42 ]
  ret i32 %47
}

declare void @zip_error_set(%struct.zip_error*, i32, i32) local_unnamed_addr #1

declare %struct.zip_string* @_zip_string_new(i8*, i16 zeroext, i32, %struct.zip_error*) local_unnamed_addr #1

declare i32 @_zip_guess_encoding(%struct.zip_string*, i32) local_unnamed_addr #1

declare void @_zip_string_free(%struct.zip_string*) local_unnamed_addr #1

declare i32 @_zip_string_equal(%struct.zip_string*, %struct.zip_string*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
