; ModuleID = '../../third_party/ffmpeg/libavcodec/dct.c'
source_filename = "../../third_party/ffmpeg/libavcodec/dct.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.DCTContext = type { i32, i32, %struct.RDFTContext, float*, float*, void (%struct.DCTContext*, float*)*, void (float*, float*)* }
%struct.RDFTContext = type { i32, i32, i32, float*, float*, i32, %struct.FFTContext, void (%struct.RDFTContext*, float*)* }
%struct.FFTContext = type { i32, i32, i16*, %struct.FFTComplex*, i32, i32, float*, float*, void (%struct.FFTContext*, %struct.FFTComplex*)*, void (%struct.FFTContext*, %struct.FFTComplex*)*, void (%struct.FFTContext*, float*, float*)*, void (%struct.FFTContext*, float*, float*)*, void (%struct.FFTContext*, float*, float*)*, i32, i32, i32* }
%struct.FFTComplex = type { float, float }

@ff_cos_tabs = external local_unnamed_addr constant [18 x float*], align 16
@switch.table.ff_dct_init = private unnamed_addr constant [4 x void (%struct.DCTContext*, float*)*] [void (%struct.DCTContext*, float*)* @dct_calc_II_c, void (%struct.DCTContext*, float*)* @dct_calc_III_c, void (%struct.DCTContext*, float*)* @dct_calc_I_c, void (%struct.DCTContext*, float*)* @dst_calc_I_c], align 8

; Function Attrs: cold nounwind optsize ssp uwtable
define hidden i32 @ff_dct_init(%struct.DCTContext*, i32, i32) local_unnamed_addr #0 {
  %4 = shl i32 1, %1
  %5 = getelementptr inbounds %struct.DCTContext, %struct.DCTContext* %0, i64 0, i32 2
  %6 = bitcast %struct.RDFTContext* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 184, i1 false)
  %7 = getelementptr inbounds %struct.DCTContext, %struct.DCTContext* %0, i64 0, i32 0
  store i32 %1, i32* %7, align 8
  %8 = getelementptr inbounds %struct.DCTContext, %struct.DCTContext* %0, i64 0, i32 1
  store i32 %2, i32* %8, align 4
  %9 = icmp eq i32 %2, 0
  %10 = icmp eq i32 %1, 5
  %11 = and i1 %10, %9
  br i1 %11, label %61, label %12

12:                                               ; preds = %3
  %13 = add nsw i32 %1, 2
  tail call void @ff_init_ff_cos_tabs(i32 %13) #5
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds [18 x float*], [18 x float*]* @ff_cos_tabs, i64 0, i64 %14
  %16 = bitcast float** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %struct.DCTContext, %struct.DCTContext* %0, i64 0, i32 3
  %19 = bitcast float** %18 to i64*
  store i64 %17, i64* %19, align 8
  %20 = sdiv i32 %4, 2
  %21 = sext i32 %20 to i64
  %22 = tail call i8* @av_malloc_array(i64 %21, i64 4) #5
  %23 = getelementptr inbounds %struct.DCTContext, %struct.DCTContext* %0, i64 0, i32 4
  %24 = bitcast float** %23 to i8**
  store i8* %22, i8** %24, align 8
  %25 = icmp eq i8* %22, null
  br i1 %25, label %66, label %26

26:                                               ; preds = %12
  %27 = getelementptr inbounds %struct.DCTContext, %struct.DCTContext* %0, i64 0, i32 2
  %28 = icmp eq i32 %2, 1
  %29 = zext i1 %28 to i32
  %30 = tail call i32 @ff_rdft_init(%struct.RDFTContext* %27, i32 %1, i32 %29) #5
  %31 = icmp slt i32 %30, 0
  br i1 %31, label %39, label %32

32:                                               ; preds = %26
  %33 = icmp sgt i32 %4, 1
  br i1 %33, label %34, label %55

34:                                               ; preds = %32
  %35 = shl nsw i32 %4, 1
  %36 = sitofp i32 %35 to double
  %37 = fdiv nsz double 0x400921FB54442D18, %36
  %38 = zext i32 %20 to i64
  br label %41

39:                                               ; preds = %26
  %40 = bitcast float** %23 to i8*
  tail call void @av_freep(i8* %40) #5
  br label %66

41:                                               ; preds = %41, %34
  %42 = phi i64 [ 0, %34 ], [ %53, %41 ]
  %43 = trunc i64 %42 to i32
  %44 = shl i32 %43, 1
  %45 = or i32 %44, 1
  %46 = sitofp i32 %45 to double
  %47 = fmul nsz double %37, %46
  %48 = tail call nsz double @llvm.sin.f64(double %47)
  %49 = fdiv nsz double 5.000000e-01, %48
  %50 = fptrunc double %49 to float
  %51 = load float*, float** %23, align 8
  %52 = getelementptr inbounds float, float* %51, i64 %42
  store float %50, float* %52, align 4
  %53 = add nuw nsw i64 %42, 1
  %54 = icmp eq i64 %53, %38
  br i1 %54, label %55, label %41

55:                                               ; preds = %41, %32
  %56 = icmp ult i32 %2, 4
  br i1 %56, label %57, label %64

57:                                               ; preds = %55
  %58 = sext i32 %2 to i64
  %59 = getelementptr inbounds [4 x void (%struct.DCTContext*, float*)*], [4 x void (%struct.DCTContext*, float*)*]* @switch.table.ff_dct_init, i64 0, i64 %58
  %60 = load void (%struct.DCTContext*, float*)*, void (%struct.DCTContext*, float*)** %59, align 8
  br label %61

61:                                               ; preds = %57, %3
  %62 = phi void (%struct.DCTContext*, float*)* [ @dct32_func, %3 ], [ %60, %57 ]
  %63 = getelementptr inbounds %struct.DCTContext, %struct.DCTContext* %0, i64 0, i32 5
  store void (%struct.DCTContext*, float*)* %62, void (%struct.DCTContext*, float*)** %63, align 8
  br label %64

64:                                               ; preds = %55, %61
  %65 = getelementptr inbounds %struct.DCTContext, %struct.DCTContext* %0, i64 0, i32 6
  store void (float*, float*)* @ff_dct32_float, void (float*, float*)** %65, align 8
  tail call void @ff_dct_init_x86(%struct.DCTContext* %0) #5
  br label %66

66:                                               ; preds = %12, %64, %39
  %67 = phi i32 [ 0, %64 ], [ %30, %39 ], [ -12, %12 ]
  ret i32 %67
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal void @dct32_func(%struct.DCTContext* nocapture readonly, float*) #2 {
  %3 = getelementptr inbounds %struct.DCTContext, %struct.DCTContext* %0, i64 0, i32 6
  %4 = load void (float*, float*)*, void (float*, float*)** %3, align 8
  tail call void %4(float* %1, float* %1) #5
  ret void
}

declare void @ff_init_ff_cos_tabs(i32) local_unnamed_addr #3

declare i8* @av_malloc_array(i64, i64) local_unnamed_addr #3

declare i32 @ff_rdft_init(%struct.RDFTContext*, i32, i32) local_unnamed_addr #3

declare void @av_freep(i8*) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare double @llvm.sin.f64(double) #4

; Function Attrs: nounwind ssp uwtable
define internal void @dct_calc_I_c(%struct.DCTContext*, float*) #2 {
  %3 = getelementptr inbounds %struct.DCTContext, %struct.DCTContext* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = shl i32 1, %4
  %6 = load float, float* %1, align 4
  %7 = sext i32 %5 to i64
  %8 = getelementptr inbounds float, float* %1, i64 %7
  %9 = load float, float* %8, align 4
  %10 = fsub nsz float %6, %9
  %11 = fmul nsz float %10, -5.000000e-01
  %12 = icmp sgt i32 %5, 1
  br i1 %12, label %13, label %45

13:                                               ; preds = %2
  %14 = lshr i32 %5, 1
  %15 = getelementptr inbounds %struct.DCTContext, %struct.DCTContext* %0, i64 0, i32 3
  %16 = zext i32 %14 to i64
  br label %17

17:                                               ; preds = %42, %13
  %18 = phi float [ %6, %13 ], [ %44, %42 ]
  %19 = phi i64 [ 0, %13 ], [ %40, %42 ]
  %20 = phi float [ %11, %13 ], [ %35, %42 ]
  %21 = getelementptr inbounds float, float* %1, i64 %19
  %22 = sub nsw i64 %7, %19
  %23 = getelementptr inbounds float, float* %1, i64 %22
  %24 = load float, float* %23, align 4
  %25 = load float*, float** %15, align 8
  %26 = shl nuw nsw i64 %19, 1
  %27 = sub nsw i64 %7, %26
  %28 = getelementptr inbounds float, float* %25, i64 %27
  %29 = load float, float* %28, align 4
  %30 = getelementptr inbounds float, float* %25, i64 %26
  %31 = load float, float* %30, align 4
  %32 = fsub nsz float %18, %24
  %33 = fmul nsz float %32, %31
  %34 = fmul nsz float %32, %29
  %35 = fadd nsz float %20, %33
  %36 = fadd nsz float %18, %24
  %37 = fmul nsz float %36, 5.000000e-01
  %38 = fsub nsz float %37, %34
  store float %38, float* %21, align 4
  %39 = fadd nsz float %37, %34
  store float %39, float* %23, align 4
  %40 = add nuw nsw i64 %19, 1
  %41 = icmp eq i64 %40, %16
  br i1 %41, label %45, label %42

42:                                               ; preds = %17
  %43 = getelementptr inbounds float, float* %1, i64 %40
  %44 = load float, float* %43, align 4
  br label %17

45:                                               ; preds = %17, %2
  %46 = phi float [ %11, %2 ], [ %35, %17 ]
  %47 = getelementptr inbounds %struct.DCTContext, %struct.DCTContext* %0, i64 0, i32 2
  %48 = getelementptr inbounds %struct.DCTContext, %struct.DCTContext* %0, i64 0, i32 2, i32 7
  %49 = load void (%struct.RDFTContext*, float*)*, void (%struct.RDFTContext*, float*)** %48, align 8
  tail call void %49(%struct.RDFTContext* %47, float* %1) #5
  %50 = getelementptr inbounds float, float* %1, i64 1
  %51 = bitcast float* %50 to i32*
  %52 = load i32, i32* %51, align 4
  %53 = bitcast float* %8 to i32*
  store i32 %52, i32* %53, align 4
  store float %46, float* %50, align 4
  %54 = icmp slt i32 %5, 3
  br i1 %54, label %63, label %55

55:                                               ; preds = %45, %55
  %56 = phi float [ %60, %55 ], [ %46, %45 ]
  %57 = phi i64 [ %61, %55 ], [ 3, %45 ]
  %58 = getelementptr inbounds float, float* %1, i64 %57
  %59 = load float, float* %58, align 4
  %60 = fsub nsz float %56, %59
  store float %60, float* %58, align 4
  %61 = add nuw nsw i64 %57, 2
  %62 = icmp sgt i64 %61, %7
  br i1 %62, label %63, label %55

63:                                               ; preds = %55, %45
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @dct_calc_II_c(%struct.DCTContext*, float*) #2 {
  %3 = getelementptr inbounds %struct.DCTContext, %struct.DCTContext* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = shl i32 1, %4
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %7, label %36

7:                                                ; preds = %2
  %8 = lshr i32 %5, 1
  %9 = getelementptr inbounds %struct.DCTContext, %struct.DCTContext* %0, i64 0, i32 3
  %10 = sext i32 %5 to i64
  %11 = zext i32 %8 to i64
  br label %12

12:                                               ; preds = %12, %7
  %13 = phi i64 [ 0, %7 ], [ %34, %12 ]
  %14 = getelementptr inbounds float, float* %1, i64 %13
  %15 = load float, float* %14, align 4
  %16 = trunc i64 %13 to i32
  %17 = xor i32 %16, -1
  %18 = add i32 %5, %17
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds float, float* %1, i64 %19
  %21 = load float, float* %20, align 4
  %22 = load float*, float** %9, align 8
  %23 = shl nuw nsw i64 %13, 1
  %24 = or i64 %23, 1
  %25 = sub nsw i64 %10, %24
  %26 = getelementptr inbounds float, float* %22, i64 %25
  %27 = load float, float* %26, align 4
  %28 = fsub nsz float %15, %21
  %29 = fmul nsz float %28, %27
  %30 = fadd nsz float %15, %21
  %31 = fmul nsz float %30, 5.000000e-01
  %32 = fadd nsz float %31, %29
  store float %32, float* %14, align 4
  %33 = fsub nsz float %31, %29
  store float %33, float* %20, align 4
  %34 = add nuw nsw i64 %13, 1
  %35 = icmp eq i64 %34, %11
  br i1 %35, label %36, label %12

36:                                               ; preds = %12, %2
  %37 = getelementptr inbounds %struct.DCTContext, %struct.DCTContext* %0, i64 0, i32 2
  %38 = getelementptr inbounds %struct.DCTContext, %struct.DCTContext* %0, i64 0, i32 2, i32 7
  %39 = load void (%struct.RDFTContext*, float*)*, void (%struct.RDFTContext*, float*)** %38, align 8
  tail call void %39(%struct.RDFTContext* %37, float* %1) #5
  %40 = getelementptr inbounds float, float* %1, i64 1
  %41 = load float, float* %40, align 4
  %42 = fsub nsz float -0.000000e+00, %41
  store float %42, float* %40, align 4
  %43 = add i32 %5, -2
  %44 = icmp sgt i32 %43, -1
  br i1 %44, label %45, label %76

45:                                               ; preds = %36
  %46 = fmul nsz float %41, 5.000000e-01
  %47 = getelementptr inbounds %struct.DCTContext, %struct.DCTContext* %0, i64 0, i32 3
  %48 = sext i32 %43 to i64
  %49 = sext i32 %5 to i64
  br label %50

50:                                               ; preds = %45, %50
  %51 = phi i64 [ %48, %45 ], [ %73, %50 ]
  %52 = phi i32 [ %5, %45 ], [ %75, %50 ]
  %53 = phi float [ %46, %45 ], [ %72, %50 ]
  %54 = getelementptr inbounds float, float* %1, i64 %51
  %55 = load float, float* %54, align 4
  %56 = add nsw i32 %52, -1
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds float, float* %1, i64 %57
  %59 = load float, float* %58, align 4
  %60 = load float*, float** %47, align 8
  %61 = getelementptr inbounds float, float* %60, i64 %51
  %62 = load float, float* %61, align 4
  %63 = sub nsw i64 %49, %51
  %64 = getelementptr inbounds float, float* %60, i64 %63
  %65 = load float, float* %64, align 4
  %66 = fmul nsz float %55, %62
  %67 = fmul nsz float %59, %65
  %68 = fadd nsz float %66, %67
  store float %68, float* %54, align 4
  store float %53, float* %58, align 4
  %69 = fmul nsz float %55, %65
  %70 = fmul nsz float %59, %62
  %71 = fsub nsz float %69, %70
  %72 = fadd nsz float %53, %71
  %73 = add nsw i64 %51, -2
  %74 = icmp sgt i64 %73, -1
  %75 = trunc i64 %51 to i32
  br i1 %74, label %50, label %76

76:                                               ; preds = %50, %36
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @dct_calc_III_c(%struct.DCTContext*, float*) #2 {
  %3 = getelementptr inbounds %struct.DCTContext, %struct.DCTContext* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = shl i32 1, %4
  %6 = add nsw i32 %5, -1
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds float, float* %1, i64 %7
  %9 = load float, float* %8, align 4
  %10 = sitofp i32 %5 to float
  %11 = fdiv nsz float 1.000000e+00, %10
  %12 = add i32 %5, -2
  %13 = icmp sgt i32 %12, 1
  br i1 %13, label %14, label %47

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.DCTContext, %struct.DCTContext* %0, i64 0, i32 3
  %16 = sext i32 %12 to i64
  %17 = sext i32 %5 to i64
  br label %18

18:                                               ; preds = %18, %14
  %19 = phi i64 [ %16, %14 ], [ %44, %18 ]
  %20 = phi i32 [ %5, %14 ], [ %46, %18 ]
  %21 = getelementptr inbounds float, float* %1, i64 %19
  %22 = load float, float* %21, align 4
  %23 = add nsw i32 %20, -3
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds float, float* %1, i64 %24
  %26 = load float, float* %25, align 4
  %27 = add nsw i32 %20, -1
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds float, float* %1, i64 %28
  %30 = load float, float* %29, align 4
  %31 = fsub nsz float %26, %30
  %32 = load float*, float** %15, align 8
  %33 = getelementptr inbounds float, float* %32, i64 %19
  %34 = load float, float* %33, align 4
  %35 = sub nsw i64 %17, %19
  %36 = getelementptr inbounds float, float* %32, i64 %35
  %37 = load float, float* %36, align 4
  %38 = fmul nsz float %22, %34
  %39 = fmul nsz float %31, %37
  %40 = fadd nsz float %38, %39
  store float %40, float* %21, align 4
  %41 = fmul nsz float %22, %37
  %42 = fmul nsz float %31, %34
  %43 = fsub nsz float %41, %42
  store float %43, float* %29, align 4
  %44 = add nsw i64 %19, -2
  %45 = icmp sgt i64 %44, 1
  %46 = trunc i64 %19 to i32
  br i1 %45, label %18, label %47

47:                                               ; preds = %18, %2
  %48 = fmul nsz float %9, 2.000000e+00
  %49 = getelementptr inbounds float, float* %1, i64 1
  store float %48, float* %49, align 4
  %50 = getelementptr inbounds %struct.DCTContext, %struct.DCTContext* %0, i64 0, i32 2
  %51 = getelementptr inbounds %struct.DCTContext, %struct.DCTContext* %0, i64 0, i32 2, i32 7
  %52 = load void (%struct.RDFTContext*, float*)*, void (%struct.RDFTContext*, float*)** %51, align 8
  tail call void %52(%struct.RDFTContext* %50, float* %1) #5
  %53 = icmp sgt i32 %5, 1
  br i1 %53, label %54, label %80

54:                                               ; preds = %47
  %55 = lshr i32 %5, 1
  %56 = getelementptr inbounds %struct.DCTContext, %struct.DCTContext* %0, i64 0, i32 4
  %57 = zext i32 %55 to i64
  br label %58

58:                                               ; preds = %58, %54
  %59 = phi i64 [ 0, %54 ], [ %78, %58 ]
  %60 = getelementptr inbounds float, float* %1, i64 %59
  %61 = load float, float* %60, align 4
  %62 = fmul nsz float %11, %61
  %63 = trunc i64 %59 to i32
  %64 = xor i32 %63, -1
  %65 = add i32 %5, %64
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds float, float* %1, i64 %66
  %68 = load float, float* %67, align 4
  %69 = fmul nsz float %11, %68
  %70 = load float*, float** %56, align 8
  %71 = getelementptr inbounds float, float* %70, i64 %59
  %72 = load float, float* %71, align 4
  %73 = fsub nsz float %62, %69
  %74 = fmul nsz float %72, %73
  %75 = fadd nsz float %62, %69
  %76 = fadd nsz float %75, %74
  store float %76, float* %60, align 4
  %77 = fsub nsz float %75, %74
  store float %77, float* %67, align 4
  %78 = add nuw nsw i64 %59, 1
  %79 = icmp eq i64 %78, %57
  br i1 %79, label %80, label %58

80:                                               ; preds = %58, %47
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @dst_calc_I_c(%struct.DCTContext*, float*) #2 {
  %3 = getelementptr inbounds %struct.DCTContext, %struct.DCTContext* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = shl i32 1, %4
  store float 0.000000e+00, float* %1, align 4
  %6 = sdiv i32 %5, 2
  %7 = icmp sgt i32 %5, 3
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %9 = sext i32 %6 to i64
  br label %34

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.DCTContext, %struct.DCTContext* %0, i64 0, i32 3
  %12 = sext i32 %5 to i64
  %13 = sext i32 %6 to i64
  br label %14

14:                                               ; preds = %10, %14
  %15 = phi i64 [ 1, %10 ], [ %32, %14 ]
  %16 = getelementptr inbounds float, float* %1, i64 %15
  %17 = load float, float* %16, align 4
  %18 = sub nsw i64 %12, %15
  %19 = getelementptr inbounds float, float* %1, i64 %18
  %20 = load float, float* %19, align 4
  %21 = load float*, float** %11, align 8
  %22 = shl nuw nsw i64 %15, 1
  %23 = sub nsw i64 %12, %22
  %24 = getelementptr inbounds float, float* %21, i64 %23
  %25 = load float, float* %24, align 4
  %26 = fadd nsz float %17, %20
  %27 = fmul nsz float %26, %25
  %28 = fsub nsz float %17, %20
  %29 = fmul nsz float %28, 5.000000e-01
  %30 = fadd nsz float %29, %27
  store float %30, float* %16, align 4
  %31 = fsub nsz float %27, %29
  store float %31, float* %19, align 4
  %32 = add nuw nsw i64 %15, 1
  %33 = icmp slt i64 %32, %13
  br i1 %33, label %14, label %34

34:                                               ; preds = %14, %8
  %35 = phi i64 [ %9, %8 ], [ %13, %14 ]
  %36 = getelementptr inbounds float, float* %1, i64 %35
  %37 = load float, float* %36, align 4
  %38 = fmul nsz float %37, 2.000000e+00
  store float %38, float* %36, align 4
  %39 = getelementptr inbounds %struct.DCTContext, %struct.DCTContext* %0, i64 0, i32 2
  %40 = getelementptr inbounds %struct.DCTContext, %struct.DCTContext* %0, i64 0, i32 2, i32 7
  %41 = load void (%struct.RDFTContext*, float*)*, void (%struct.RDFTContext*, float*)** %40, align 8
  tail call void %41(%struct.RDFTContext* %39, float* %1) #5
  %42 = load float, float* %1, align 4
  %43 = fmul nsz float %42, 5.000000e-01
  store float %43, float* %1, align 4
  %44 = icmp sgt i32 %5, 3
  br i1 %44, label %45, label %92

45:                                               ; preds = %34
  %46 = sext i32 %5 to i64
  %47 = add nsw i64 %46, -4
  %48 = lshr i64 %47, 1
  %49 = add nuw i64 %48, 1
  %50 = and i64 %49, 1
  %51 = icmp eq i64 %48, 0
  br i1 %51, label %78, label %52

52:                                               ; preds = %45
  %53 = sub nuw i64 %49, %50
  br label %54

54:                                               ; preds = %54, %52
  %55 = phi float [ %43, %52 ], [ %70, %54 ]
  %56 = phi i64 [ 1, %52 ], [ %71, %54 ]
  %57 = phi i64 [ %53, %52 ], [ %76, %54 ]
  %58 = add nuw nsw i64 %56, 1
  %59 = getelementptr inbounds float, float* %1, i64 %58
  %60 = load float, float* %59, align 4
  %61 = fadd nsz float %55, %60
  store float %61, float* %59, align 4
  %62 = add nuw nsw i64 %56, 2
  %63 = getelementptr inbounds float, float* %1, i64 %62
  %64 = load float, float* %63, align 4
  %65 = fsub nsz float -0.000000e+00, %64
  %66 = getelementptr inbounds float, float* %1, i64 %56
  store float %65, float* %66, align 4
  %67 = add nuw nsw i64 %56, 3
  %68 = getelementptr inbounds float, float* %1, i64 %67
  %69 = load float, float* %68, align 4
  %70 = fadd nsz float %61, %69
  store float %70, float* %68, align 4
  %71 = add nuw nsw i64 %56, 4
  %72 = getelementptr inbounds float, float* %1, i64 %71
  %73 = load float, float* %72, align 4
  %74 = fsub nsz float -0.000000e+00, %73
  %75 = getelementptr inbounds float, float* %1, i64 %62
  store float %74, float* %75, align 4
  %76 = add i64 %57, -2
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %78, label %54

78:                                               ; preds = %54, %45
  %79 = phi float [ %43, %45 ], [ %70, %54 ]
  %80 = phi i64 [ 1, %45 ], [ %71, %54 ]
  %81 = icmp eq i64 %50, 0
  br i1 %81, label %92, label %82

82:                                               ; preds = %78
  %83 = add nuw nsw i64 %80, 1
  %84 = getelementptr inbounds float, float* %1, i64 %83
  %85 = load float, float* %84, align 4
  %86 = fadd nsz float %79, %85
  store float %86, float* %84, align 4
  %87 = add nuw nsw i64 %80, 2
  %88 = getelementptr inbounds float, float* %1, i64 %87
  %89 = load float, float* %88, align 4
  %90 = fsub nsz float -0.000000e+00, %89
  %91 = getelementptr inbounds float, float* %1, i64 %80
  store float %90, float* %91, align 4
  br label %92

92:                                               ; preds = %82, %78, %34
  %93 = add nsw i32 %5, -1
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds float, float* %1, i64 %94
  store float 0.000000e+00, float* %95, align 4
  ret void
}

declare void @ff_dct32_float(float*, float*) #3

declare void @ff_dct_init_x86(%struct.DCTContext*) local_unnamed_addr #3

; Function Attrs: cold nounwind optsize ssp uwtable
define hidden void @ff_dct_end(%struct.DCTContext*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.DCTContext, %struct.DCTContext* %0, i64 0, i32 2
  tail call void @ff_rdft_end(%struct.RDFTContext* %2) #5
  %3 = getelementptr inbounds %struct.DCTContext, %struct.DCTContext* %0, i64 0, i32 4
  %4 = bitcast float** %3 to i8*
  tail call void @av_freep(i8* %4) #5
  ret void
}

declare void @ff_rdft_end(%struct.RDFTContext*) local_unnamed_addr #3

attributes #0 = { cold nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
