; ModuleID = '../../net/third_party/quiche/src/quic/core/crypto/quic_hkdf.cc'
source_filename = "../../net/third_party/quiche/src/quic/core/crypto/quic_hkdf.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.quic::QuicHKDF" = type { %"class.std::__1::vector", %"class.absl::string_view", %"class.absl::string_view", %"class.absl::string_view", %"class.absl::string_view", %"class.absl::string_view", %"class.absl::string_view", %"class.absl::string_view" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.absl::string_view" = type { i8*, i64 }
%struct.env_md_st = type opaque
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm = comdat any

@_ZN4quic8QuicHKDFC1EN4absl11string_viewES2_S2_mmm = hidden unnamed_addr alias void (%"class.quic::QuicHKDF"*, i8*, i64, i8*, i64, %"class.absl::string_view"*, i64, i64, i64), void (%"class.quic::QuicHKDF"*, i8*, i64, i8*, i64, %"class.absl::string_view"*, i64, i64, i64)* @_ZN4quic8QuicHKDFC2EN4absl11string_viewES2_S2_mmm
@_ZN4quic8QuicHKDFC1EN4absl11string_viewES2_S2_mmmmm = hidden unnamed_addr alias void (%"class.quic::QuicHKDF"*, i8*, i64, i8*, i64, %"class.absl::string_view"*, i64, i64, i64, i64, i64), void (%"class.quic::QuicHKDF"*, i8*, i64, i8*, i64, %"class.absl::string_view"*, i64, i64, i64, i64, i64)* @_ZN4quic8QuicHKDFC2EN4absl11string_viewES2_S2_mmmmm
@_ZN4quic8QuicHKDFD1Ev = hidden unnamed_addr alias void (%"class.quic::QuicHKDF"*), void (%"class.quic::QuicHKDF"*)* @_ZN4quic8QuicHKDFD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic8QuicHKDFC2EN4absl11string_viewES2_S2_mmm(%"class.quic::QuicHKDF"*, i8*, i64, i8*, i64, %"class.absl::string_view"* nocapture readonly byval(%"class.absl::string_view") align 8, i64, i64, i64) unnamed_addr #0 align 2 {
  tail call void @_ZN4quic8QuicHKDFC2EN4absl11string_viewES2_S2_mmmmm(%"class.quic::QuicHKDF"* %0, i8* %1, i64 %2, i8* %3, i64 %4, %"class.absl::string_view"* nonnull byval(%"class.absl::string_view") align 8 %5, i64 %6, i64 %6, i64 %7, i64 %7, i64 %8)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic8QuicHKDFC2EN4absl11string_viewES2_S2_mmmmm(%"class.quic::QuicHKDF"*, i8*, i64, i8*, i64, %"class.absl::string_view"* nocapture readonly byval(%"class.absl::string_view") align 8, i64, i64, i64, i64, i64) unnamed_addr #0 align 2 {
  %12 = add i64 %7, %6
  %13 = shl i64 %12, 1
  %14 = add i64 %9, %8
  %15 = add i64 %14, %13
  %16 = add i64 %15, %10
  %17 = bitcast %"class.quic::QuicHKDF"* %0 to i64*
  %18 = icmp eq i64 %16, 0
  %19 = bitcast %"class.quic::QuicHKDF"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 136, i1 false)
  br i1 %18, label %108, label %20

20:                                               ; preds = %11
  %21 = getelementptr inbounds %"class.quic::QuicHKDF", %"class.quic::QuicHKDF"* %0, i64 0, i32 0, i32 0, i32 1
  %22 = getelementptr inbounds %"class.quic::QuicHKDF", %"class.quic::QuicHKDF"* %0, i64 0, i32 0
  tail call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"* %22, i64 %16) #7
  %23 = getelementptr inbounds %"class.quic::QuicHKDF", %"class.quic::QuicHKDF"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = load i8*, i8** %21, align 8
  %26 = getelementptr inbounds %"class.quic::QuicHKDF", %"class.quic::QuicHKDF"* %0, i64 0, i32 0, i32 0, i32 0
  %27 = icmp eq i8* %24, %25
  br i1 %27, label %108, label %28

28:                                               ; preds = %20
  %29 = ptrtoint i8* %24 to i64
  %30 = ptrtoint i8* %25 to i64
  %31 = sub i64 %30, %29
  %32 = tail call %struct.env_md_st* @EVP_sha256() #7
  %33 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %5, i64 0, i32 0
  %34 = load i8*, i8** %33, align 8
  %35 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %5, i64 0, i32 1
  %36 = load i64, i64* %35, align 8
  %37 = tail call i32 @HKDF(i8* %24, i64 %31, %struct.env_md_st* %32, i8* %1, i64 %2, i8* %3, i64 %4, i8* %34, i64 %36) #7
  %38 = icmp ne i64 %6, 0
  br i1 %38, label %39, label %47

39:                                               ; preds = %28
  %40 = icmp sgt i64 %6, -1
  br i1 %40, label %42, label %41, !prof !2

41:                                               ; preds = %39
  tail call void @llvm.trap() #7
  unreachable

42:                                               ; preds = %39
  %43 = load i64, i64* %17, align 8
  %44 = getelementptr inbounds %"class.quic::QuicHKDF", %"class.quic::QuicHKDF"* %0, i64 0, i32 1, i32 0
  %45 = bitcast i8** %44 to i64*
  store i64 %43, i64* %45, align 8
  %46 = getelementptr inbounds %"class.quic::QuicHKDF", %"class.quic::QuicHKDF"* %0, i64 0, i32 1, i32 1
  store i64 %6, i64* %46, align 8
  br label %47

47:                                               ; preds = %42, %28
  %48 = icmp ne i64 %7, 0
  br i1 %48, label %49, label %57

49:                                               ; preds = %47
  %50 = icmp sgt i64 %7, -1
  br i1 %50, label %52, label %51, !prof !2

51:                                               ; preds = %49
  tail call void @llvm.trap() #7
  unreachable

52:                                               ; preds = %49
  %53 = load i8*, i8** %26, align 8
  %54 = getelementptr inbounds i8, i8* %53, i64 %6
  %55 = getelementptr inbounds %"class.quic::QuicHKDF", %"class.quic::QuicHKDF"* %0, i64 0, i32 2, i32 0
  store i8* %54, i8** %55, align 8
  %56 = getelementptr inbounds %"class.quic::QuicHKDF", %"class.quic::QuicHKDF"* %0, i64 0, i32 2, i32 1
  store i64 %7, i64* %56, align 8
  br label %57

57:                                               ; preds = %52, %47
  %58 = phi i64 [ %12, %52 ], [ %6, %47 ]
  %59 = icmp eq i64 %8, 0
  br i1 %59, label %69, label %60

60:                                               ; preds = %57
  %61 = icmp sgt i64 %8, -1
  br i1 %61, label %63, label %62, !prof !2

62:                                               ; preds = %60
  tail call void @llvm.trap() #7
  unreachable

63:                                               ; preds = %60
  %64 = load i8*, i8** %26, align 8
  %65 = getelementptr inbounds i8, i8* %64, i64 %58
  %66 = getelementptr inbounds %"class.quic::QuicHKDF", %"class.quic::QuicHKDF"* %0, i64 0, i32 3, i32 0
  store i8* %65, i8** %66, align 8
  %67 = getelementptr inbounds %"class.quic::QuicHKDF", %"class.quic::QuicHKDF"* %0, i64 0, i32 3, i32 1
  store i64 %8, i64* %67, align 8
  %68 = add i64 %58, %8
  br label %69

69:                                               ; preds = %57, %63
  %70 = phi i64 [ %68, %63 ], [ %58, %57 ]
  %71 = icmp eq i64 %9, 0
  br i1 %71, label %81, label %72

72:                                               ; preds = %69
  %73 = icmp sgt i64 %9, -1
  br i1 %73, label %75, label %74, !prof !2

74:                                               ; preds = %72
  tail call void @llvm.trap() #7
  unreachable

75:                                               ; preds = %72
  %76 = load i8*, i8** %26, align 8
  %77 = getelementptr inbounds i8, i8* %76, i64 %70
  %78 = getelementptr inbounds %"class.quic::QuicHKDF", %"class.quic::QuicHKDF"* %0, i64 0, i32 4, i32 0
  store i8* %77, i8** %78, align 8
  %79 = getelementptr inbounds %"class.quic::QuicHKDF", %"class.quic::QuicHKDF"* %0, i64 0, i32 4, i32 1
  store i64 %9, i64* %79, align 8
  %80 = add i64 %70, %9
  br label %81

81:                                               ; preds = %69, %75
  %82 = phi i64 [ %80, %75 ], [ %70, %69 ]
  %83 = icmp eq i64 %10, 0
  br i1 %83, label %93, label %84

84:                                               ; preds = %81
  %85 = icmp sgt i64 %10, -1
  br i1 %85, label %87, label %86, !prof !2

86:                                               ; preds = %84
  tail call void @llvm.trap() #7
  unreachable

87:                                               ; preds = %84
  %88 = load i8*, i8** %26, align 8
  %89 = getelementptr inbounds i8, i8* %88, i64 %82
  %90 = getelementptr inbounds %"class.quic::QuicHKDF", %"class.quic::QuicHKDF"* %0, i64 0, i32 5, i32 0
  store i8* %89, i8** %90, align 8
  %91 = getelementptr inbounds %"class.quic::QuicHKDF", %"class.quic::QuicHKDF"* %0, i64 0, i32 5, i32 1
  store i64 %10, i64* %91, align 8
  %92 = add i64 %82, %10
  br label %93

93:                                               ; preds = %81, %87
  %94 = phi i64 [ %92, %87 ], [ %82, %81 ]
  br i1 %38, label %95, label %101

95:                                               ; preds = %93
  %96 = load i8*, i8** %26, align 8
  %97 = getelementptr inbounds i8, i8* %96, i64 %94
  %98 = getelementptr inbounds %"class.quic::QuicHKDF", %"class.quic::QuicHKDF"* %0, i64 0, i32 6, i32 0
  store i8* %97, i8** %98, align 8
  %99 = getelementptr inbounds %"class.quic::QuicHKDF", %"class.quic::QuicHKDF"* %0, i64 0, i32 6, i32 1
  store i64 %6, i64* %99, align 8
  %100 = add i64 %94, %6
  br label %101

101:                                              ; preds = %95, %93
  %102 = phi i64 [ %100, %95 ], [ %94, %93 ]
  br i1 %48, label %103, label %108

103:                                              ; preds = %101
  %104 = load i8*, i8** %26, align 8
  %105 = getelementptr inbounds i8, i8* %104, i64 %102
  %106 = getelementptr inbounds %"class.quic::QuicHKDF", %"class.quic::QuicHKDF"* %0, i64 0, i32 7, i32 0
  store i8* %105, i8** %106, align 8
  %107 = getelementptr inbounds %"class.quic::QuicHKDF", %"class.quic::QuicHKDF"* %0, i64 0, i32 7, i32 1
  store i64 %7, i64* %107, align 8
  br label %108

108:                                              ; preds = %11, %101, %103, %20
  ret void
}

declare i32 @HKDF(i8*, i64, %struct.env_md_st*, i8*, i64, i8*, i64, i8*, i64) local_unnamed_addr #2

declare %struct.env_md_st* @EVP_sha256() local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic8QuicHKDFD2Ev(%"class.quic::QuicHKDF"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.quic::QuicHKDF", %"class.quic::QuicHKDF"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = ptrtoint i8* %3 to i64
  %7 = getelementptr inbounds %"class.quic::QuicHKDF", %"class.quic::QuicHKDF"* %0, i64 0, i32 0, i32 0, i32 1
  %8 = bitcast i8** %7 to i64*
  store i64 %6, i64* %8, align 8
  tail call void @_ZdlPv(i8* nonnull %3) #8
  br label %9

9:                                                ; preds = %1, %5
  ret void
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #7
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %68

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #9
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = tail call i8* @_Znwm(i64 %39) #8
  br label %41

41:                                               ; preds = %38, %33
  %42 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %43 = phi i8* [ %40, %38 ], [ null, %33 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %25
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %42
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = sub i64 %1, %45
  %49 = getelementptr i8, i8* %44, i64 %48
  %50 = ptrtoint i8* %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 %50, i1 false) #7
  %51 = ptrtoint i8* %46 to i64
  %52 = ptrtoint i8* %47 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i64, i64* %7, align 8
  %56 = ptrtoint i8* %54 to i64
  %57 = sub i64 %55, %56
  %58 = sub i64 0, %57
  %59 = getelementptr inbounds i8, i8* %44, i64 %58
  %60 = ptrtoint i8* %59 to i64
  %61 = icmp sgt i64 %57, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %54, i64 %57, i1 false) #7
  %63 = load i8*, i8** %53, align 8
  br label %64

64:                                               ; preds = %41, %62
  %65 = phi i8* [ %54, %41 ], [ %63, %62 ]
  store i64 %60, i64* %23, align 8
  store i64 %52, i64* %7, align 8
  store i64 %51, i64* %4, align 8
  %66 = icmp eq i8* %65, null
  br i1 %66, label %68, label %67

67:                                               ; preds = %64
  tail call void @_ZdlPv(i8* nonnull %65) #8
  br label %68

68:                                               ; preds = %67, %64, %20
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { cold noreturn nounwind }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
