; ModuleID = '../../base/memory/madv_free_discardable_memory_allocator_posix.cc'
source_filename = "../../base/memory/madv_free_discardable_memory_allocator_posix.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::MadvFreeDiscardableMemoryAllocatorPosix" = type { %"class.base::DiscardableMemoryAllocator", %"class.base::trace_event::MemoryDumpProvider", %"struct.std::__1::atomic" }
%"class.base::DiscardableMemoryAllocator" = type { i32 (...)** }
%"class.base::trace_event::MemoryDumpProvider" = type { i32 (...)** }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.base::trace_event::MemoryDumpManager" = type <{ i32 (...)**, %"class.std::__1::set", %"class.base::RepeatingCallback", i8, [7 x i8], %"class.base::Lock", %"class.std::__1::unique_ptr", i64, i8, [7 x i8] }>
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair", %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { i64 }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic.5" }
%"struct.std::__1::atomic.5" = type { %"struct.std::__1::__atomic_base.6" }
%"struct.std::__1::__atomic_base.6" = type { %"struct.std::__1::__atomic_base.7" }
%"struct.std::__1::__atomic_base.7" = type { %"struct.std::__1::__cxx_atomic_impl.8" }
%"struct.std::__1::__cxx_atomic_impl.8" = type { %"struct.std::__1::__cxx_atomic_base_impl.9" }
%"struct.std::__1::__cxx_atomic_base_impl.9" = type { i32 }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"class.base::Thread"* }
%"class.base::Thread" = type opaque
%class.scoped_refptr.13 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.14" }>
%"class.base::RefCountedThreadSafe.14" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::DiscardableMemory" = type { i32 (...)** }
%"class.base::MadvFreeDiscardableMemoryPosix" = type { %"class.base::DiscardableMemory", i64, i64, %"struct.std::__1::atomic"*, i8*, i8, i8, %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::atomic.24"*, %"struct.std::__1::atomic.24"*, %"class.std::__1::__compressed_pair.29" }
%"struct.std::__1::atomic.24" = type { %"struct.std::__1::__atomic_base.25" }
%"struct.std::__1::__atomic_base.25" = type { %"struct.std::__1::__atomic_base.26" }
%"struct.std::__1::__atomic_base.26" = type { %"struct.std::__1::__cxx_atomic_impl.27" }
%"struct.std::__1::__cxx_atomic_impl.27" = type { %"struct.std::__1::__cxx_atomic_base_impl.28" }
%"struct.std::__1::__cxx_atomic_base_impl.28" = type { i64 }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"struct.std::__1::atomic.24"* }
%"struct.base::trace_event::MemoryDumpArgs" = type { i32, i32, i64 }
%"class.base::trace_event::ProcessMemoryDump" = type { %"class.base::UnguessableToken", %"class.std::__1::map", %"class.std::__1::map.44", %"struct.base::trace_event::MemoryDumpArgs", %"class.std::__1::unique_ptr.55" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.std::__1::map" = type { %"class.std::__1::__tree.37" }
%"class.std::__1::__tree.37" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.38", %"class.std::__1::__compressed_pair.42" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"class.std::__1::map.44" = type { %"class.std::__1::__tree.45" }
%"class.std::__1::__tree.45" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.46", %"class.std::__1::__compressed_pair.50" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"class.std::__1::unique_ptr.55" = type { %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { %"class.base::trace_event::MemoryAllocatorDump"* }
%"class.base::trace_event::MemoryAllocatorDump" = type { %"class.std::__1::basic_string", %"class.base::trace_event::MemoryAllocatorDumpGuid", i32, i32, %"class.absl::optional", %"class.std::__1::vector.64" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.58" }
%"class.std::__1::__compressed_pair.58" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"struct.std::__1::__compressed_pair_elem.59" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::trace_event::MemoryAllocatorDumpGuid" = type { i64 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.63 }
%union.anon.63 = type { i64 }
%"class.std::__1::vector.64" = type { %"class.std::__1::__vector_base.65" }
%"class.std::__1::__vector_base.65" = type { %"struct.base::trace_event::MemoryAllocatorDump::Entry"*, %"struct.base::trace_event::MemoryAllocatorDump::Entry"*, %"class.std::__1::__compressed_pair.66" }
%"struct.base::trace_event::MemoryAllocatorDump::Entry" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, i64, %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.66" = type { %"struct.std::__1::__compressed_pair_elem.67" }
%"struct.std::__1::__compressed_pair_elem.67" = type { %"struct.base::trace_event::MemoryAllocatorDump::Entry"* }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

$_ZN4base39MadvFreeDiscardableMemoryAllocatorPosix17ReleaseFreeMemoryEv = comdat any

@_ZTVN4base39MadvFreeDiscardableMemoryAllocatorPosixE = hidden unnamed_addr constant { [8 x i8*], [5 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.base::MadvFreeDiscardableMemoryAllocatorPosix"*)* @_ZN4base39MadvFreeDiscardableMemoryAllocatorPosixD2Ev to i8*), i8* bitcast (void (%"class.base::MadvFreeDiscardableMemoryAllocatorPosix"*)* @_ZN4base39MadvFreeDiscardableMemoryAllocatorPosixD0Ev to i8*), i8* bitcast (%"class.base::DiscardableMemory"* (%"class.base::MadvFreeDiscardableMemoryAllocatorPosix"*, i64)* @_ZN4base39MadvFreeDiscardableMemoryAllocatorPosix31AllocateLockedDiscardableMemoryEm to i8*), i8* bitcast (i64 (%"class.base::MadvFreeDiscardableMemoryAllocatorPosix"*)* @_ZNK4base39MadvFreeDiscardableMemoryAllocatorPosix17GetBytesAllocatedEv to i8*), i8* bitcast (void (%"class.base::MadvFreeDiscardableMemoryAllocatorPosix"*)* @_ZN4base39MadvFreeDiscardableMemoryAllocatorPosix17ReleaseFreeMemoryEv to i8*), i8* bitcast (i1 (%"class.base::MadvFreeDiscardableMemoryAllocatorPosix"*, %"struct.base::trace_event::MemoryDumpArgs"*, %"class.base::trace_event::ProcessMemoryDump"*)* @_ZN4base39MadvFreeDiscardableMemoryAllocatorPosix12OnMemoryDumpERKNS_11trace_event14MemoryDumpArgsEPNS1_17ProcessMemoryDumpE to i8*)], [5 x i8*] [i8* inttoptr (i64 -8 to i8*), i8* null, i8* bitcast (void (%"class.base::MadvFreeDiscardableMemoryAllocatorPosix"*)* @_ZThn8_N4base39MadvFreeDiscardableMemoryAllocatorPosixD1Ev to i8*), i8* bitcast (void (%"class.base::MadvFreeDiscardableMemoryAllocatorPosix"*)* @_ZThn8_N4base39MadvFreeDiscardableMemoryAllocatorPosixD0Ev to i8*), i8* bitcast (i1 (%"class.base::MadvFreeDiscardableMemoryAllocatorPosix"*, %"struct.base::trace_event::MemoryDumpArgs"*, %"class.base::trace_event::ProcessMemoryDump"*)* @_ZThn8_N4base39MadvFreeDiscardableMemoryAllocatorPosix12OnMemoryDumpERKNS_11trace_event14MemoryDumpArgsEPNS1_17ProcessMemoryDumpE to i8*)] }, align 8
@.str = private unnamed_addr constant [35 x i8] c"MadvFreeDiscardableMemoryAllocator\00", align 1
@.str.1 = private unnamed_addr constant [32 x i8] c"discardable/madv_free_allocated\00", align 1
@_ZN4base11trace_event19MemoryAllocatorDump9kNameSizeE = external constant [0 x i8], align 1
@_ZN4base11trace_event19MemoryAllocatorDump11kUnitsBytesE = external constant [0 x i8], align 1

@_ZN4base39MadvFreeDiscardableMemoryAllocatorPosixC1Ev = hidden unnamed_addr alias void (%"class.base::MadvFreeDiscardableMemoryAllocatorPosix"*), void (%"class.base::MadvFreeDiscardableMemoryAllocatorPosix"*)* @_ZN4base39MadvFreeDiscardableMemoryAllocatorPosixC2Ev
@_ZN4base39MadvFreeDiscardableMemoryAllocatorPosixD1Ev = hidden unnamed_addr alias void (%"class.base::MadvFreeDiscardableMemoryAllocatorPosix"*), void (%"class.base::MadvFreeDiscardableMemoryAllocatorPosix"*)* @_ZN4base39MadvFreeDiscardableMemoryAllocatorPosixD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base39MadvFreeDiscardableMemoryAllocatorPosixC2Ev(%"class.base::MadvFreeDiscardableMemoryAllocatorPosix"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryAllocatorPosix", %"class.base::MadvFreeDiscardableMemoryAllocatorPosix"* %0, i64 0, i32 1
  %3 = bitcast %"class.base::MadvFreeDiscardableMemoryAllocatorPosix"* %0 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [5 x i8*] }, { [8 x i8*], [5 x i8*] }* @_ZTVN4base39MadvFreeDiscardableMemoryAllocatorPosixE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [5 x i8*] }, { [8 x i8*], [5 x i8*] }* @_ZTVN4base39MadvFreeDiscardableMemoryAllocatorPosixE, i64 0, inrange i32 1, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %3, align 8
  %4 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryAllocatorPosix", %"class.base::MadvFreeDiscardableMemoryAllocatorPosix"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %4, align 8
  %5 = tail call zeroext i1 @_ZN4base22ThreadTaskRunnerHandle5IsSetEv() #6
  br i1 %5, label %6, label %16

6:                                                ; preds = %1
  %7 = tail call %"class.base::trace_event::MemoryDumpManager"* @_ZN4base11trace_event17MemoryDumpManager11GetInstanceEv() #6
  %8 = tail call dereferenceable(8) %class.scoped_refptr.13* @_ZN4base22ThreadTaskRunnerHandle3GetEv() #6
  %9 = getelementptr inbounds %class.scoped_refptr.13, %class.scoped_refptr.13* %8, i64 0, i32 0
  %10 = load %"class.base::SingleThreadTaskRunner"*, %"class.base::SingleThreadTaskRunner"** %9, align 8
  %11 = icmp eq %"class.base::SingleThreadTaskRunner"* %10, null
  br i1 %11, label %15, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %10, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = atomicrmw add i32* %13, i32 1 monotonic
  br label %15

15:                                               ; preds = %6, %12
  tail call void @_ZN4base11trace_event17MemoryDumpManager20RegisterDumpProviderEPNS0_18MemoryDumpProviderEPKc13scoped_refptrINS_22SingleThreadTaskRunnerEE(%"class.base::trace_event::MemoryDumpManager"* %7, %"class.base::trace_event::MemoryDumpProvider"* %2, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0), %"class.base::SingleThreadTaskRunner"* %10) #6
  br label %16

16:                                               ; preds = %15, %1
  ret void
}

declare zeroext i1 @_ZN4base22ThreadTaskRunnerHandle5IsSetEv() local_unnamed_addr #1

declare %"class.base::trace_event::MemoryDumpManager"* @_ZN4base11trace_event17MemoryDumpManager11GetInstanceEv() local_unnamed_addr #1

declare void @_ZN4base11trace_event17MemoryDumpManager20RegisterDumpProviderEPNS0_18MemoryDumpProviderEPKc13scoped_refptrINS_22SingleThreadTaskRunnerEE(%"class.base::trace_event::MemoryDumpManager"*, %"class.base::trace_event::MemoryDumpProvider"*, i8*, %"class.base::SingleThreadTaskRunner"*) local_unnamed_addr #1

declare dereferenceable(8) %class.scoped_refptr.13* @_ZN4base22ThreadTaskRunnerHandle3GetEv() local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base39MadvFreeDiscardableMemoryAllocatorPosixD2Ev(%"class.base::MadvFreeDiscardableMemoryAllocatorPosix"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryAllocatorPosix", %"class.base::MadvFreeDiscardableMemoryAllocatorPosix"* %0, i64 0, i32 1
  %3 = bitcast %"class.base::MadvFreeDiscardableMemoryAllocatorPosix"* %0 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [5 x i8*] }, { [8 x i8*], [5 x i8*] }* @_ZTVN4base39MadvFreeDiscardableMemoryAllocatorPosixE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [5 x i8*] }, { [8 x i8*], [5 x i8*] }* @_ZTVN4base39MadvFreeDiscardableMemoryAllocatorPosixE, i64 0, inrange i32 1, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %3, align 8
  %4 = tail call %"class.base::trace_event::MemoryDumpManager"* @_ZN4base11trace_event17MemoryDumpManager11GetInstanceEv() #6
  tail call void @_ZN4base11trace_event17MemoryDumpManager22UnregisterDumpProviderEPNS0_18MemoryDumpProviderE(%"class.base::trace_event::MemoryDumpManager"* %4, %"class.base::trace_event::MemoryDumpProvider"* %2) #6
  ret void
}

declare void @_ZN4base11trace_event17MemoryDumpManager22UnregisterDumpProviderEPNS0_18MemoryDumpProviderE(%"class.base::trace_event::MemoryDumpManager"*, %"class.base::trace_event::MemoryDumpProvider"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZThn8_N4base39MadvFreeDiscardableMemoryAllocatorPosixD1Ev(%"class.base::MadvFreeDiscardableMemoryAllocatorPosix"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryAllocatorPosix", %"class.base::MadvFreeDiscardableMemoryAllocatorPosix"* %0, i64 -1, i32 2
  %3 = getelementptr inbounds %"struct.std::__1::atomic", %"struct.std::__1::atomic"* %2, i64 1
  %4 = bitcast %"struct.std::__1::atomic"* %3 to %"class.base::trace_event::MemoryDumpProvider"*
  %5 = bitcast %"struct.std::__1::atomic"* %2 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [5 x i8*] }, { [8 x i8*], [5 x i8*] }* @_ZTVN4base39MadvFreeDiscardableMemoryAllocatorPosixE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [5 x i8*] }, { [8 x i8*], [5 x i8*] }* @_ZTVN4base39MadvFreeDiscardableMemoryAllocatorPosixE, i64 0, inrange i32 1, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %5, align 8
  %6 = tail call %"class.base::trace_event::MemoryDumpManager"* @_ZN4base11trace_event17MemoryDumpManager11GetInstanceEv() #6
  tail call void @_ZN4base11trace_event17MemoryDumpManager22UnregisterDumpProviderEPNS0_18MemoryDumpProviderE(%"class.base::trace_event::MemoryDumpManager"* %6, %"class.base::trace_event::MemoryDumpProvider"* %4) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base39MadvFreeDiscardableMemoryAllocatorPosixD0Ev(%"class.base::MadvFreeDiscardableMemoryAllocatorPosix"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryAllocatorPosix", %"class.base::MadvFreeDiscardableMemoryAllocatorPosix"* %0, i64 0, i32 1
  %3 = bitcast %"class.base::MadvFreeDiscardableMemoryAllocatorPosix"* %0 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [5 x i8*] }, { [8 x i8*], [5 x i8*] }* @_ZTVN4base39MadvFreeDiscardableMemoryAllocatorPosixE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [5 x i8*] }, { [8 x i8*], [5 x i8*] }* @_ZTVN4base39MadvFreeDiscardableMemoryAllocatorPosixE, i64 0, inrange i32 1, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %3, align 8
  %4 = tail call %"class.base::trace_event::MemoryDumpManager"* @_ZN4base11trace_event17MemoryDumpManager11GetInstanceEv() #6
  tail call void @_ZN4base11trace_event17MemoryDumpManager22UnregisterDumpProviderEPNS0_18MemoryDumpProviderE(%"class.base::trace_event::MemoryDumpManager"* %4, %"class.base::trace_event::MemoryDumpProvider"* %2) #6
  %5 = bitcast %"class.base::MadvFreeDiscardableMemoryAllocatorPosix"* %0 to i8*
  tail call void @_ZdlPv(i8* %5) #7
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZThn8_N4base39MadvFreeDiscardableMemoryAllocatorPosixD0Ev(%"class.base::MadvFreeDiscardableMemoryAllocatorPosix"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryAllocatorPosix", %"class.base::MadvFreeDiscardableMemoryAllocatorPosix"* %0, i64 -1, i32 2
  %3 = getelementptr inbounds %"struct.std::__1::atomic", %"struct.std::__1::atomic"* %2, i64 1
  %4 = bitcast %"struct.std::__1::atomic"* %3 to %"class.base::trace_event::MemoryDumpProvider"*
  %5 = bitcast %"struct.std::__1::atomic"* %2 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [5 x i8*] }, { [8 x i8*], [5 x i8*] }* @_ZTVN4base39MadvFreeDiscardableMemoryAllocatorPosixE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [5 x i8*] }, { [8 x i8*], [5 x i8*] }* @_ZTVN4base39MadvFreeDiscardableMemoryAllocatorPosixE, i64 0, inrange i32 1, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %5, align 8
  %6 = tail call %"class.base::trace_event::MemoryDumpManager"* @_ZN4base11trace_event17MemoryDumpManager11GetInstanceEv() #6
  tail call void @_ZN4base11trace_event17MemoryDumpManager22UnregisterDumpProviderEPNS0_18MemoryDumpProviderE(%"class.base::trace_event::MemoryDumpManager"* %6, %"class.base::trace_event::MemoryDumpProvider"* %4) #6
  %7 = bitcast %"struct.std::__1::atomic"* %2 to i8*
  tail call void @_ZdlPv(i8* %7) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.base::DiscardableMemory"* @_ZN4base39MadvFreeDiscardableMemoryAllocatorPosix31AllocateLockedDiscardableMemoryEm(%"class.base::MadvFreeDiscardableMemoryAllocatorPosix"*, i64) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryAllocatorPosix", %"class.base::MadvFreeDiscardableMemoryAllocatorPosix"* %0, i64 0, i32 2
  %4 = tail call i8* @_Znwm(i64 72) #7
  %5 = bitcast i8* %4 to %"class.base::MadvFreeDiscardableMemoryPosix"*
  tail call void @_ZN4base30MadvFreeDiscardableMemoryPosixC1EmPNSt3__16atomicImEE(%"class.base::MadvFreeDiscardableMemoryPosix"* nonnull %5, i64 %1, %"struct.std::__1::atomic"* %3) #6
  %6 = bitcast i8* %4 to %"class.base::DiscardableMemory"*
  ret %"class.base::DiscardableMemory"* %6
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i64 @_ZNK4base39MadvFreeDiscardableMemoryAllocatorPosix17GetBytesAllocatedEv(%"class.base::MadvFreeDiscardableMemoryAllocatorPosix"* nocapture readonly) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryAllocatorPosix", %"class.base::MadvFreeDiscardableMemoryAllocatorPosix"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load atomic i64, i64* %2 seq_cst, align 8
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base39MadvFreeDiscardableMemoryAllocatorPosix12OnMemoryDumpERKNS_11trace_event14MemoryDumpArgsEPNS1_17ProcessMemoryDumpE(%"class.base::MadvFreeDiscardableMemoryAllocatorPosix"*, %"struct.base::trace_event::MemoryDumpArgs"* nocapture readonly dereferenceable(16), %"class.base::trace_event::ProcessMemoryDump"*) unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpArgs", %"struct.base::trace_event::MemoryDumpArgs"* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %28

8:                                                ; preds = %3
  %9 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #6
  %10 = tail call i8* @_Znwm(i64 32) #7
  %11 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %10, i8** %11, align 8
  %12 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %13 = bitcast i64* %12 to <2 x i64>*
  store <2 x i64> <i64 31, i64 -9223372036854775776>, <2 x i64>* %13, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %10, i8* align 1 getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1, i64 0, i64 0), i64 31, i1 false) #6
  %14 = getelementptr inbounds i8, i8* %10, i64 31
  store i8 0, i8* %14, align 1
  %15 = call %"class.base::trace_event::MemoryAllocatorDump"* @_ZN4base11trace_event17ProcessMemoryDump19CreateAllocatorDumpERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(%"class.base::trace_event::ProcessMemoryDump"* %2, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %4) #6
  %16 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %17 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %16, i64 0, i32 1, i32 0
  %18 = load i8, i8* %17, align 1
  %19 = icmp slt i8 %18, 0
  br i1 %19, label %20, label %22

20:                                               ; preds = %8
  %21 = load i8*, i8** %11, align 8
  call void @_ZdlPv(i8* %21) #7
  br label %22

22:                                               ; preds = %8, %20
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #6
  %23 = bitcast %"class.base::MadvFreeDiscardableMemoryAllocatorPosix"* %0 to i64 (%"class.base::MadvFreeDiscardableMemoryAllocatorPosix"*)***
  %24 = load i64 (%"class.base::MadvFreeDiscardableMemoryAllocatorPosix"*)**, i64 (%"class.base::MadvFreeDiscardableMemoryAllocatorPosix"*)*** %23, align 8
  %25 = getelementptr inbounds i64 (%"class.base::MadvFreeDiscardableMemoryAllocatorPosix"*)*, i64 (%"class.base::MadvFreeDiscardableMemoryAllocatorPosix"*)** %24, i64 3
  %26 = load i64 (%"class.base::MadvFreeDiscardableMemoryAllocatorPosix"*)*, i64 (%"class.base::MadvFreeDiscardableMemoryAllocatorPosix"*)** %25, align 8
  %27 = call i64 %26(%"class.base::MadvFreeDiscardableMemoryAllocatorPosix"* %0) #6
  call void @_ZN4base11trace_event19MemoryAllocatorDump9AddScalarEPKcS3_m(%"class.base::trace_event::MemoryAllocatorDump"* %15, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN4base11trace_event19MemoryAllocatorDump9kNameSizeE, i64 0, i64 0), i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN4base11trace_event19MemoryAllocatorDump11kUnitsBytesE, i64 0, i64 0), i64 %27) #6
  br label %28

28:                                               ; preds = %3, %22
  ret i1 true
}

declare %"class.base::trace_event::MemoryAllocatorDump"* @_ZN4base11trace_event17ProcessMemoryDump19CreateAllocatorDumpERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(%"class.base::trace_event::ProcessMemoryDump"*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #1

declare void @_ZN4base11trace_event19MemoryAllocatorDump9AddScalarEPKcS3_m(%"class.base::trace_event::MemoryAllocatorDump"*, i8*, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZThn8_N4base39MadvFreeDiscardableMemoryAllocatorPosix12OnMemoryDumpERKNS_11trace_event14MemoryDumpArgsEPNS1_17ProcessMemoryDumpE(%"class.base::MadvFreeDiscardableMemoryAllocatorPosix"*, %"struct.base::trace_event::MemoryDumpArgs"* nocapture readonly dereferenceable(16), %"class.base::trace_event::ProcessMemoryDump"*) unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = getelementptr inbounds %"class.base::MadvFreeDiscardableMemoryAllocatorPosix", %"class.base::MadvFreeDiscardableMemoryAllocatorPosix"* %0, i64 -1, i32 2
  %6 = bitcast %"struct.std::__1::atomic"* %5 to %"class.base::MadvFreeDiscardableMemoryAllocatorPosix"*
  %7 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpArgs", %"struct.base::trace_event::MemoryDumpArgs"* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %30

10:                                               ; preds = %3
  %11 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #6
  %12 = tail call i8* @_Znwm(i64 32) #7
  %13 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %12, i8** %13, align 8
  %14 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %15 = bitcast i64* %14 to <2 x i64>*
  store <2 x i64> <i64 31, i64 -9223372036854775776>, <2 x i64>* %15, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %12, i8* align 1 getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1, i64 0, i64 0), i64 31, i1 false) #6
  %16 = getelementptr inbounds i8, i8* %12, i64 31
  store i8 0, i8* %16, align 1
  %17 = call %"class.base::trace_event::MemoryAllocatorDump"* @_ZN4base11trace_event17ProcessMemoryDump19CreateAllocatorDumpERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(%"class.base::trace_event::ProcessMemoryDump"* %2, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %4) #6
  %18 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %19 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %18, i64 0, i32 1, i32 0
  %20 = load i8, i8* %19, align 1
  %21 = icmp slt i8 %20, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %10
  %23 = load i8*, i8** %13, align 8
  call void @_ZdlPv(i8* %23) #7
  br label %24

24:                                               ; preds = %22, %10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #6
  %25 = bitcast %"struct.std::__1::atomic"* %5 to i64 (%"class.base::MadvFreeDiscardableMemoryAllocatorPosix"*)***
  %26 = load i64 (%"class.base::MadvFreeDiscardableMemoryAllocatorPosix"*)**, i64 (%"class.base::MadvFreeDiscardableMemoryAllocatorPosix"*)*** %25, align 8
  %27 = getelementptr inbounds i64 (%"class.base::MadvFreeDiscardableMemoryAllocatorPosix"*)*, i64 (%"class.base::MadvFreeDiscardableMemoryAllocatorPosix"*)** %26, i64 3
  %28 = load i64 (%"class.base::MadvFreeDiscardableMemoryAllocatorPosix"*)*, i64 (%"class.base::MadvFreeDiscardableMemoryAllocatorPosix"*)** %27, align 8
  %29 = call i64 %28(%"class.base::MadvFreeDiscardableMemoryAllocatorPosix"* %6) #6
  call void @_ZN4base11trace_event19MemoryAllocatorDump9AddScalarEPKcS3_m(%"class.base::trace_event::MemoryAllocatorDump"* %17, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN4base11trace_event19MemoryAllocatorDump9kNameSizeE, i64 0, i64 0), i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN4base11trace_event19MemoryAllocatorDump11kUnitsBytesE, i64 0, i64 0), i64 %29) #6
  br label %30

30:                                               ; preds = %3, %24
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base39MadvFreeDiscardableMemoryAllocatorPosix17ReleaseFreeMemoryEv(%"class.base::MadvFreeDiscardableMemoryAllocatorPosix"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

declare void @_ZN4base30MadvFreeDiscardableMemoryPosixC1EmPNSt3__16atomicImEE(%"class.base::MadvFreeDiscardableMemoryPosix"*, i64, %"struct.std::__1::atomic"*) unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
