; ModuleID = '../../third_party/opus/src/silk/float/noise_shape_analysis_FLP.c'
source_filename = "../../third_party/opus/src/silk/float/noise_shape_analysis_FLP.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.silk_encoder_state_FLP = type { %struct.silk_encoder_state, %struct.silk_shape_state_FLP, [720 x float], float }
%struct.silk_encoder_state = type { [2 x i32], i32, i32, %struct.silk_LP_state, %struct.silk_VAD_state, %struct.silk_nsq_state, [16 x i16], i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, %struct.silk_NLSF_CB_struct*, [4 x i32], i32, i32, [3 x i8], i8, [3 x i32], %struct.SideInfoIndices, [320 x i8], i32, [322 x i16], i32, i32, i32, i32, i32, i32, i32, i32, i16, %struct._silk_resampler_state_struct, i32, i32, i32, i32, i32, i32, [3 x %struct.SideInfoIndices], [3 x [320 x i8]] }
%struct.silk_LP_state = type { [2 x i32], i32, i32, i32 }
%struct.silk_VAD_state = type { [2 x i32], [2 x i32], [2 x i32], [4 x i32], [4 x i32], i16, [4 x i32], [4 x i32], [4 x i32], i32 }
%struct.silk_nsq_state = type { [640 x i16], [640 x i32], [96 x i32], [24 x i32], i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.silk_NLSF_CB_struct = type { i16, i16, i16, i16, i8*, i16*, i8*, i8*, i8*, i8*, i8*, i16* }
%struct.SideInfoIndices = type { [4 x i8], [4 x i8], [17 x i8], i16, i8, i8, i8, i8, i8, i8, i8 }
%struct._silk_resampler_state_struct = type { [6 x i32], %union.anon, [48 x i16], i32, i32, i32, i32, i32, i32, i32, i32, i16* }
%union.anon = type { [36 x i32] }
%struct.silk_shape_state_FLP = type { i8, float, float }
%struct.silk_encoder_control_FLP = type { [4 x float], [2 x [16 x float]], [20 x float], float, [4 x i32], [96 x float], [4 x float], [4 x float], [4 x float], [4 x float], float, float, float, float, float, [4 x float], [4 x i32], i8 }

; Function Attrs: nounwind ssp uwtable
define hidden void @silk_noise_shape_analysis_FLP(%struct.silk_encoder_state_FLP*, %struct.silk_encoder_control_FLP*, float*, float*) local_unnamed_addr #0 {
  %5 = alloca [240 x float], align 16
  %6 = alloca [25 x float], align 16
  %7 = alloca [25 x float], align 16
  %8 = bitcast [240 x float]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 960, i8* nonnull %8) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -1, i64 960, i1 false)
  %9 = bitcast [25 x float]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 100, i8* nonnull %9) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -1, i64 100, i1 false)
  %10 = bitcast [25 x float]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 100, i8* nonnull %10) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -1, i64 100, i1 false)
  %11 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 25
  %12 = load i32, i32* %11, align 8
  %13 = sext i32 %12 to i64
  %14 = sub nsw i64 0, %13
  %15 = getelementptr inbounds float, float* %3, i64 %14
  %16 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 51
  %17 = load i32, i32* %16, align 4
  %18 = sitofp i32 %17 to float
  %19 = fmul float %18, 7.812500e-03
  %20 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 49, i64 0
  %21 = load i32, i32* %20, align 8
  %22 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 49, i64 1
  %23 = load i32, i32* %22, align 4
  %24 = add nsw i32 %23, %21
  %25 = sitofp i32 %24 to float
  %26 = fmul float %25, 5.000000e-01
  %27 = fmul float %26, 0x3F00000000000000
  %28 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 11
  store float %27, float* %28, align 4
  %29 = fadd float %19, -2.000000e+01
  %30 = fmul float %29, -2.500000e-01
  %31 = fpext float %30 to double
  %32 = tail call double @exp(double %31) #5
  %33 = fadd double %32, 1.000000e+00
  %34 = fdiv double 1.000000e+00, %33
  %35 = fptrunc double %34 to float
  %36 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 12
  store float %35, float* %36, align 4
  %37 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 44
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %54

40:                                               ; preds = %4
  %41 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 7
  %42 = load i32, i32* %41, align 4
  %43 = sitofp i32 %42 to float
  %44 = fmul float %43, 3.906250e-03
  %45 = fsub float 1.000000e+00, %44
  %46 = fmul float %35, 2.000000e+00
  %47 = load float, float* %28, align 4
  %48 = fmul float %47, 5.000000e-01
  %49 = fadd float %48, 5.000000e-01
  %50 = fmul float %46, %49
  %51 = fmul float %45, %50
  %52 = fmul float %45, %51
  %53 = fsub float %19, %52
  br label %54

54:                                               ; preds = %40, %4
  %55 = phi float [ %53, %40 ], [ %19, %4 ]
  %56 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 55, i32 5
  %57 = load i8, i8* %56, align 1
  %58 = icmp eq i8 %57, 2
  br i1 %58, label %59, label %65

59:                                               ; preds = %54
  %60 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 3
  %61 = load float, float* %60, align 4
  %62 = fmul float %61, 2.000000e+00
  %63 = fadd float %55, %62
  %64 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 55, i32 6
  store i8 0, i8* %64, align 2
  br label %119

65:                                               ; preds = %54
  %66 = load i32, i32* %16, align 4
  %67 = sitofp i32 %66 to float
  %68 = fmul float %67, 0xBFD99999A0000000
  %69 = fmul float %68, 7.812500e-03
  %70 = fadd float %69, 6.000000e+00
  %71 = load float, float* %28, align 4
  %72 = fsub float 1.000000e+00, %71
  %73 = fmul float %72, %70
  %74 = fadd float %55, %73
  %75 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 19
  %76 = load i32, i32* %75, align 8
  %77 = shl nsw i32 %76, 1
  %78 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 20
  %79 = load i32, i32* %78, align 4
  %80 = shl i32 %79, 16
  %81 = ashr exact i32 %80, 16
  %82 = mul nsw i32 %81, 5
  %83 = sdiv i32 %82, 2
  %84 = icmp sgt i32 %82, 1
  br i1 %84, label %85, label %110

85:                                               ; preds = %65
  %86 = sitofp i32 %77 to float
  %87 = sext i32 %77 to i64
  br label %88

88:                                               ; preds = %105, %85
  %89 = phi i32 [ 0, %85 ], [ %108, %105 ]
  %90 = phi float* [ %2, %85 ], [ %107, %105 ]
  %91 = phi float [ 0.000000e+00, %85 ], [ %106, %105 ]
  %92 = phi float [ 0.000000e+00, %85 ], [ %99, %105 ]
  %93 = tail call double @silk_energy_FLP(float* %90, i32 %77) #5
  %94 = fptrunc double %93 to float
  %95 = fadd float %86, %94
  %96 = fpext float %95 to double
  %97 = tail call double @log10(double %96) #5
  %98 = fmul double %97, 0x400A934F0979A36C
  %99 = fptrunc double %98 to float
  %100 = icmp eq i32 %89, 0
  br i1 %100, label %105, label %101

101:                                              ; preds = %88
  %102 = fsub float %99, %92
  %103 = tail call float @llvm.fabs.f32(float %102)
  %104 = fadd float %91, %103
  br label %105

105:                                              ; preds = %88, %101
  %106 = phi float [ %104, %101 ], [ %91, %88 ]
  %107 = getelementptr inbounds float, float* %90, i64 %87
  %108 = add nuw nsw i32 %89, 1
  %109 = icmp eq i32 %108, %83
  br i1 %109, label %110, label %88

110:                                              ; preds = %105, %65
  %111 = phi float [ 0.000000e+00, %65 ], [ %106, %105 ]
  %112 = add nsw i32 %83, -1
  %113 = sitofp i32 %112 to float
  %114 = fmul float %113, 0x3FE3333340000000
  %115 = fcmp ogt float %111, %114
  %116 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 55, i32 6
  br i1 %115, label %117, label %118

117:                                              ; preds = %110
  store i8 0, i8* %116, align 2
  br label %119

118:                                              ; preds = %110
  store i8 1, i8* %116, align 2
  br label %119

119:                                              ; preds = %117, %118, %59
  %120 = phi float [ %74, %117 ], [ %74, %118 ], [ %63, %59 ]
  %121 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 13
  %122 = load float, float* %121, align 4
  %123 = fmul float %122, 0x3F50624DE0000000
  %124 = fmul float %123, %123
  %125 = fadd float %124, 1.000000e+00
  %126 = fdiv float 0x3FEE147AE0000000, %125
  %127 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 43
  %128 = load i32, i32* %127, align 8
  %129 = sitofp i32 %128 to float
  %130 = fmul float %129, 0x3EF0000000000000
  %131 = load float, float* %36, align 4
  %132 = fmul float %131, 0x3F847AE140000000
  %133 = fadd float %130, %132
  %134 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 20
  %135 = load i32, i32* %134, align 4
  %136 = icmp sgt i32 %135, 0
  br i1 %136, label %137, label %1757

137:                                              ; preds = %119
  %138 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 19
  %139 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 26
  %140 = getelementptr inbounds [240 x float], [240 x float]* %5, i64 0, i64 0
  %141 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 22
  %142 = getelementptr inbounds [25 x float], [25 x float]* %6, i64 0, i64 0
  %143 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 34
  %144 = getelementptr inbounds [25 x float], [25 x float]* %7, i64 0, i64 0
  %145 = fmul float %133, %133
  %146 = fsub float 1.000000e+00, %145
  %147 = insertelement <4 x float> undef, float %133, i32 0
  %148 = shufflevector <4 x float> %147, <4 x float> undef, <4 x i32> zeroinitializer
  %149 = insertelement <4 x float> undef, float %133, i32 0
  %150 = shufflevector <4 x float> %149, <4 x float> undef, <4 x i32> zeroinitializer
  br label %151

151:                                              ; preds = %137, %1752
  %152 = phi i64 [ 0, %137 ], [ %1753, %1752 ]
  %153 = phi float* [ %15, %137 ], [ %172, %1752 ]
  %154 = load i32, i32* %138, align 8
  %155 = mul nsw i32 %154, 3
  %156 = load i32, i32* %139, align 4
  %157 = sub nsw i32 %156, %155
  %158 = sdiv i32 %157, 2
  call void @silk_apply_sine_window_FLP(float* nonnull %140, float* %153, i32 1, i32 %158) #5
  %159 = sext i32 %158 to i64
  %160 = getelementptr inbounds [240 x float], [240 x float]* %5, i64 0, i64 %159
  %161 = bitcast float* %160 to i8*
  %162 = getelementptr inbounds float, float* %153, i64 %159
  %163 = bitcast float* %162 to i8*
  %164 = sext i32 %155 to i64
  %165 = shl nsw i64 %164, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %161, i8* align 4 %163, i64 %165, i1 false)
  %166 = add nsw i32 %158, %155
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds [240 x float], [240 x float]* %5, i64 0, i64 %167
  %169 = getelementptr inbounds float, float* %153, i64 %167
  call void @silk_apply_sine_window_FLP(float* %168, float* %169, i32 2, i32 %158) #5
  %170 = load i32, i32* %141, align 4
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds float, float* %153, i64 %171
  %173 = load i32, i32* %127, align 8
  %174 = icmp sgt i32 %173, 0
  %175 = load i32, i32* %139, align 4
  %176 = load i32, i32* %143, align 4
  br i1 %174, label %177, label %178

177:                                              ; preds = %151
  call void @silk_warped_autocorrelation_FLP(float* nonnull %142, float* nonnull %140, float %133, i32 %175, i32 %176) #5
  br label %180

178:                                              ; preds = %151
  %179 = add nsw i32 %176, 1
  call void @silk_autocorrelation_FLP(float* nonnull %142, float* nonnull %140, i32 %175, i32 %179) #5
  br label %180

180:                                              ; preds = %178, %177
  %181 = load float, float* %142, align 16
  %182 = fmul float %181, 0x3EFF751040000000
  %183 = fadd float %182, 1.000000e+00
  %184 = fadd float %181, %183
  store float %184, float* %142, align 16
  %185 = load i32, i32* %143, align 4
  %186 = call float @silk_schur_FLP(float* nonnull %144, float* nonnull %142, i32 %185) #5
  %187 = mul i64 %152, 24
  %188 = and i64 %187, 4294967288
  %189 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 5, i64 %188
  %190 = load i32, i32* %143, align 4
  call void @silk_k2a_FLP(float* %189, float* nonnull %144, i32 %190) #5
  %191 = call float @sqrtf(float %186) #3
  %192 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 0, i64 %152
  store float %191, float* %192, align 4
  %193 = load i32, i32* %127, align 8
  %194 = icmp sgt i32 %193, 0
  br i1 %194, label %195, label %220

195:                                              ; preds = %180
  %196 = load i32, i32* %143, align 4
  %197 = add nsw i32 %196, -1
  %198 = sext i32 %197 to i64
  %199 = getelementptr inbounds float, float* %189, i64 %198
  %200 = load float, float* %199, align 4
  %201 = add i32 %196, -2
  %202 = icmp sgt i32 %201, -1
  %203 = fmul float %133, %200
  br i1 %202, label %204, label %215

204:                                              ; preds = %195
  %205 = sext i32 %201 to i64
  br label %206

206:                                              ; preds = %206, %204
  %207 = phi i64 [ %205, %204 ], [ %212, %206 ]
  %208 = phi float [ %203, %204 ], [ %214, %206 ]
  %209 = getelementptr inbounds float, float* %189, i64 %207
  %210 = load float, float* %209, align 4
  %211 = fsub float %210, %208
  %212 = add nsw i64 %207, -1
  %213 = icmp sgt i64 %207, 0
  %214 = fmul float %133, %211
  br i1 %213, label %206, label %215

215:                                              ; preds = %206, %195
  %216 = phi float [ %203, %195 ], [ %214, %206 ]
  %217 = fadd float %216, 1.000000e+00
  %218 = fdiv float 1.000000e+00, %217
  %219 = fmul float %191, %218
  store float %219, float* %192, align 4
  br label %220

220:                                              ; preds = %215, %180
  %221 = load i32, i32* %143, align 4
  call void @silk_bwexpander_FLP(float* %189, i32 %221, float %126) #5
  %222 = load i32, i32* %127, align 8
  %223 = icmp sgt i32 %222, 0
  %224 = load i32, i32* %143, align 4
  br i1 %223, label %225, label %978

225:                                              ; preds = %220
  %226 = add i32 %224, -1
  %227 = icmp sgt i32 %226, 0
  br i1 %227, label %228, label %274

228:                                              ; preds = %225
  %229 = sext i32 %226 to i64
  %230 = getelementptr inbounds float, float* %189, i64 %229
  %231 = load float, float* %230, align 4
  %232 = add nsw i64 %229, -1
  %233 = and i64 %229, 3
  %234 = icmp eq i64 %233, 0
  br i1 %234, label %246, label %235

235:                                              ; preds = %228, %235
  %236 = phi float [ %243, %235 ], [ %231, %228 ]
  %237 = phi i64 [ %240, %235 ], [ %229, %228 ]
  %238 = phi i64 [ %244, %235 ], [ %233, %228 ]
  %239 = fmul float %133, %236
  %240 = add nsw i64 %237, -1
  %241 = getelementptr inbounds float, float* %189, i64 %240
  %242 = load float, float* %241, align 4
  %243 = fsub float %242, %239
  store float %243, float* %241, align 4
  %244 = add i64 %238, -1
  %245 = icmp eq i64 %244, 0
  br i1 %245, label %246, label %235, !llvm.loop !2

246:                                              ; preds = %235, %228
  %247 = phi float [ %231, %228 ], [ %243, %235 ]
  %248 = phi i64 [ %229, %228 ], [ %240, %235 ]
  %249 = icmp ult i64 %232, 3
  br i1 %249, label %274, label %250

250:                                              ; preds = %246, %250
  %251 = phi float [ %272, %250 ], [ %247, %246 ]
  %252 = phi i64 [ %269, %250 ], [ %248, %246 ]
  %253 = fmul float %133, %251
  %254 = add nsw i64 %252, -1
  %255 = getelementptr inbounds float, float* %189, i64 %254
  %256 = load float, float* %255, align 4
  %257 = fsub float %256, %253
  store float %257, float* %255, align 4
  %258 = fmul float %133, %257
  %259 = add nsw i64 %252, -2
  %260 = getelementptr inbounds float, float* %189, i64 %259
  %261 = load float, float* %260, align 4
  %262 = fsub float %261, %258
  store float %262, float* %260, align 4
  %263 = fmul float %133, %262
  %264 = add nsw i64 %252, -3
  %265 = getelementptr inbounds float, float* %189, i64 %264
  %266 = load float, float* %265, align 4
  %267 = fsub float %266, %263
  store float %267, float* %265, align 4
  %268 = fmul float %133, %267
  %269 = add nsw i64 %252, -4
  %270 = getelementptr inbounds float, float* %189, i64 %269
  %271 = load float, float* %270, align 4
  %272 = fsub float %271, %268
  store float %272, float* %270, align 4
  %273 = icmp sgt i64 %269, 0
  br i1 %273, label %250, label %274

274:                                              ; preds = %246, %250, %225
  %275 = load float, float* %189, align 4
  %276 = fmul float %133, %275
  %277 = fadd float %276, 1.000000e+00
  %278 = fdiv float %146, %277
  %279 = icmp sgt i32 %224, 0
  br i1 %279, label %280, label %1752

280:                                              ; preds = %274
  %281 = zext i32 %224 to i64
  %282 = fmul float %278, %275
  store float %282, float* %189, align 4
  %283 = icmp eq i32 %224, 1
  br i1 %283, label %348, label %284

284:                                              ; preds = %280
  %285 = add nsw i64 %281, -1
  %286 = icmp ult i64 %285, 8
  br i1 %286, label %287, label %289

287:                                              ; preds = %346, %284
  %288 = phi i64 [ 1, %284 ], [ %291, %346 ]
  br label %971

289:                                              ; preds = %284
  %290 = and i64 %285, -8
  %291 = or i64 %290, 1
  %292 = insertelement <4 x float> undef, float %278, i32 0
  %293 = shufflevector <4 x float> %292, <4 x float> undef, <4 x i32> zeroinitializer
  %294 = insertelement <4 x float> undef, float %278, i32 0
  %295 = shufflevector <4 x float> %294, <4 x float> undef, <4 x i32> zeroinitializer
  %296 = add nsw i64 %290, -8
  %297 = lshr exact i64 %296, 3
  %298 = add nuw nsw i64 %297, 1
  %299 = and i64 %298, 1
  %300 = icmp eq i64 %296, 0
  br i1 %300, label %331, label %301

301:                                              ; preds = %289
  %302 = sub nuw nsw i64 %298, %299
  br label %303

303:                                              ; preds = %303, %301
  %304 = phi i64 [ 0, %301 ], [ %328, %303 ]
  %305 = phi i64 [ %302, %301 ], [ %329, %303 ]
  %306 = or i64 %304, 1
  %307 = getelementptr inbounds float, float* %189, i64 %306
  %308 = bitcast float* %307 to <4 x float>*
  %309 = load <4 x float>, <4 x float>* %308, align 4
  %310 = getelementptr inbounds float, float* %307, i64 4
  %311 = bitcast float* %310 to <4 x float>*
  %312 = load <4 x float>, <4 x float>* %311, align 4
  %313 = fmul <4 x float> %293, %309
  %314 = fmul <4 x float> %295, %312
  %315 = bitcast float* %307 to <4 x float>*
  store <4 x float> %313, <4 x float>* %315, align 4
  %316 = bitcast float* %310 to <4 x float>*
  store <4 x float> %314, <4 x float>* %316, align 4
  %317 = or i64 %304, 9
  %318 = getelementptr inbounds float, float* %189, i64 %317
  %319 = bitcast float* %318 to <4 x float>*
  %320 = load <4 x float>, <4 x float>* %319, align 4
  %321 = getelementptr inbounds float, float* %318, i64 4
  %322 = bitcast float* %321 to <4 x float>*
  %323 = load <4 x float>, <4 x float>* %322, align 4
  %324 = fmul <4 x float> %293, %320
  %325 = fmul <4 x float> %295, %323
  %326 = bitcast float* %318 to <4 x float>*
  store <4 x float> %324, <4 x float>* %326, align 4
  %327 = bitcast float* %321 to <4 x float>*
  store <4 x float> %325, <4 x float>* %327, align 4
  %328 = add i64 %304, 16
  %329 = add i64 %305, -2
  %330 = icmp eq i64 %329, 0
  br i1 %330, label %331, label %303, !llvm.loop !4

331:                                              ; preds = %303, %289
  %332 = phi i64 [ 0, %289 ], [ %328, %303 ]
  %333 = icmp eq i64 %299, 0
  br i1 %333, label %346, label %334

334:                                              ; preds = %331
  %335 = or i64 %332, 1
  %336 = getelementptr inbounds float, float* %189, i64 %335
  %337 = bitcast float* %336 to <4 x float>*
  %338 = load <4 x float>, <4 x float>* %337, align 4
  %339 = getelementptr inbounds float, float* %336, i64 4
  %340 = bitcast float* %339 to <4 x float>*
  %341 = load <4 x float>, <4 x float>* %340, align 4
  %342 = fmul <4 x float> %293, %338
  %343 = fmul <4 x float> %295, %341
  %344 = bitcast float* %336 to <4 x float>*
  store <4 x float> %342, <4 x float>* %344, align 4
  %345 = bitcast float* %339 to <4 x float>*
  store <4 x float> %343, <4 x float>* %345, align 4
  br label %346

346:                                              ; preds = %331, %334
  %347 = icmp eq i64 %285, %290
  br i1 %347, label %352, label %287

348:                                              ; preds = %280
  %349 = sext i32 %224 to i64
  %350 = add nsw i64 %349, -1
  %351 = getelementptr inbounds float, float* %189, i64 %350
  br label %398

352:                                              ; preds = %971, %346
  %353 = icmp sgt i32 %224, 1
  %354 = sext i32 %224 to i64
  %355 = add nsw i64 %354, -1
  %356 = getelementptr inbounds float, float* %189, i64 %355
  br i1 %353, label %357, label %398

357:                                              ; preds = %352
  %358 = add nsw i64 %281, -1
  %359 = add nsw i64 %281, -1
  %360 = add nsw i64 %281, -9
  %361 = lshr i64 %360, 3
  %362 = add nuw nsw i64 %361, 1
  %363 = and i64 %281, 4294967288
  %364 = add nsw i64 %363, -8
  %365 = lshr exact i64 %364, 3
  %366 = add nuw nsw i64 %365, 1
  %367 = add nsw i64 %354, -2
  %368 = and i64 %281, 3
  %369 = icmp ult i64 %285, 3
  %370 = sub nsw i64 %281, %368
  %371 = icmp eq i64 %368, 0
  %372 = icmp ult i64 %359, 8
  %373 = and i64 %359, -8
  %374 = or i64 %373, 1
  %375 = and i64 %362, 1
  %376 = icmp eq i64 %361, 0
  %377 = sub nuw nsw i64 %362, %375
  %378 = icmp eq i64 %375, 0
  %379 = icmp eq i64 %359, %373
  %380 = icmp ult i32 %224, 8
  %381 = and i64 %281, 4294967288
  %382 = and i64 %366, 1
  %383 = icmp eq i64 %364, 0
  %384 = sub nuw nsw i64 %366, %382
  %385 = icmp eq i64 %382, 0
  %386 = icmp eq i64 %381, %281
  %387 = and i64 %355, 3
  %388 = icmp eq i64 %387, 0
  %389 = icmp ult i64 %367, 3
  %390 = icmp ult i64 %358, 8
  %391 = and i64 %358, -8
  %392 = or i64 %391, 1
  %393 = and i64 %362, 1
  %394 = icmp eq i64 %361, 0
  %395 = sub nuw nsw i64 %362, %393
  %396 = icmp eq i64 %393, 0
  %397 = icmp eq i64 %358, %391
  br label %429

398:                                              ; preds = %348, %352
  %399 = phi float* [ %351, %348 ], [ %356, %352 ]
  %400 = phi i64 [ 0, %348 ], [ %355, %352 ]
  %401 = add nsw i64 %281, -1
  %402 = add nsw i64 %281, -1
  %403 = and i64 %281, 4294967288
  %404 = add nsw i64 %403, -8
  %405 = lshr exact i64 %404, 3
  %406 = add nuw nsw i64 %405, 1
  %407 = add nsw i64 %281, -9
  %408 = lshr i64 %407, 3
  %409 = add nuw nsw i64 %408, 1
  %410 = and i64 %281, 3
  %411 = icmp ult i64 %402, 3
  %412 = sub nsw i64 %281, %410
  %413 = icmp eq i64 %410, 0
  %414 = icmp ult i32 %224, 8
  %415 = and i64 %281, 4294967288
  %416 = and i64 %406, 1
  %417 = icmp eq i64 %404, 0
  %418 = sub nuw nsw i64 %406, %416
  %419 = icmp eq i64 %416, 0
  %420 = icmp eq i64 %415, %281
  %421 = icmp ult i64 %401, 8
  %422 = and i64 %401, -8
  %423 = or i64 %422, 1
  %424 = and i64 %409, 1
  %425 = icmp eq i64 %408, 0
  %426 = sub nuw nsw i64 %409, %424
  %427 = icmp eq i64 %424, 0
  %428 = icmp eq i64 %401, %422
  br label %757

429:                                              ; preds = %357, %704
  %430 = phi float [ %644, %704 ], [ %278, %357 ]
  %431 = phi i32 [ %494, %704 ], [ 0, %357 ]
  %432 = phi i32 [ %705, %704 ], [ 0, %357 ]
  br i1 %369, label %472, label %433

433:                                              ; preds = %429, %433
  %434 = phi i64 [ %469, %433 ], [ 0, %429 ]
  %435 = phi float [ %468, %433 ], [ -1.000000e+00, %429 ]
  %436 = phi i32 [ %467, %433 ], [ %431, %429 ]
  %437 = phi i64 [ %470, %433 ], [ %370, %429 ]
  %438 = getelementptr inbounds float, float* %189, i64 %434
  %439 = load float, float* %438, align 4
  %440 = call float @llvm.fabs.f32(float %439) #5
  %441 = fcmp ogt float %440, %435
  %442 = trunc i64 %434 to i32
  %443 = select i1 %441, i32 %442, i32 %436
  %444 = select i1 %441, float %440, float %435
  %445 = or i64 %434, 1
  %446 = getelementptr inbounds float, float* %189, i64 %445
  %447 = load float, float* %446, align 4
  %448 = call float @llvm.fabs.f32(float %447) #5
  %449 = fcmp ogt float %448, %444
  %450 = trunc i64 %445 to i32
  %451 = select i1 %449, i32 %450, i32 %443
  %452 = select i1 %449, float %448, float %444
  %453 = or i64 %434, 2
  %454 = getelementptr inbounds float, float* %189, i64 %453
  %455 = load float, float* %454, align 4
  %456 = call float @llvm.fabs.f32(float %455) #5
  %457 = fcmp ogt float %456, %452
  %458 = trunc i64 %453 to i32
  %459 = select i1 %457, i32 %458, i32 %451
  %460 = select i1 %457, float %456, float %452
  %461 = or i64 %434, 3
  %462 = getelementptr inbounds float, float* %189, i64 %461
  %463 = load float, float* %462, align 4
  %464 = call float @llvm.fabs.f32(float %463) #5
  %465 = fcmp ogt float %464, %460
  %466 = trunc i64 %461 to i32
  %467 = select i1 %465, i32 %466, i32 %459
  %468 = select i1 %465, float %464, float %460
  %469 = add nuw nsw i64 %434, 4
  %470 = add i64 %437, -4
  %471 = icmp eq i64 %470, 0
  br i1 %471, label %472, label %433

472:                                              ; preds = %433, %429
  %473 = phi i32 [ undef, %429 ], [ %467, %433 ]
  %474 = phi float [ undef, %429 ], [ %468, %433 ]
  %475 = phi i64 [ 0, %429 ], [ %469, %433 ]
  %476 = phi float [ -1.000000e+00, %429 ], [ %468, %433 ]
  %477 = phi i32 [ %431, %429 ], [ %467, %433 ]
  br i1 %371, label %493, label %478

478:                                              ; preds = %472, %478
  %479 = phi i64 [ %490, %478 ], [ %475, %472 ]
  %480 = phi float [ %489, %478 ], [ %476, %472 ]
  %481 = phi i32 [ %488, %478 ], [ %477, %472 ]
  %482 = phi i64 [ %491, %478 ], [ %368, %472 ]
  %483 = getelementptr inbounds float, float* %189, i64 %479
  %484 = load float, float* %483, align 4
  %485 = call float @llvm.fabs.f32(float %484) #5
  %486 = fcmp ogt float %485, %480
  %487 = trunc i64 %479 to i32
  %488 = select i1 %486, i32 %487, i32 %481
  %489 = select i1 %486, float %485, float %480
  %490 = add nuw nsw i64 %479, 1
  %491 = add i64 %482, -1
  %492 = icmp eq i64 %491, 0
  br i1 %492, label %493, label %478, !llvm.loop !6

493:                                              ; preds = %478, %472
  %494 = phi i32 [ %473, %472 ], [ %488, %478 ]
  %495 = phi float [ %474, %472 ], [ %489, %478 ]
  %496 = fcmp ugt float %495, 0x400FFDF3C0000000
  br i1 %496, label %497, label %1752

497:                                              ; preds = %493
  %498 = load float, float* %189, align 4
  br i1 %372, label %568, label %499

499:                                              ; preds = %497
  %500 = insertelement <4 x float> undef, float %498, i32 3
  br i1 %376, label %543, label %501

501:                                              ; preds = %499, %501
  %502 = phi i64 [ %540, %501 ], [ 0, %499 ]
  %503 = phi <4 x float> [ %529, %501 ], [ %500, %499 ]
  %504 = phi i64 [ %541, %501 ], [ %377, %499 ]
  %505 = or i64 %502, 1
  %506 = getelementptr inbounds float, float* %189, i64 %505
  %507 = bitcast float* %506 to <4 x float>*
  %508 = load <4 x float>, <4 x float>* %507, align 4
  %509 = getelementptr inbounds float, float* %506, i64 4
  %510 = bitcast float* %509 to <4 x float>*
  %511 = load <4 x float>, <4 x float>* %510, align 4
  %512 = shufflevector <4 x float> %503, <4 x float> %508, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %513 = shufflevector <4 x float> %508, <4 x float> %511, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %514 = fmul <4 x float> %148, %508
  %515 = fmul <4 x float> %150, %511
  %516 = getelementptr inbounds float, float* %189, i64 %502
  %517 = fadd <4 x float> %512, %514
  %518 = fadd <4 x float> %513, %515
  %519 = bitcast float* %516 to <4 x float>*
  store <4 x float> %517, <4 x float>* %519, align 4
  %520 = getelementptr inbounds float, float* %516, i64 4
  %521 = bitcast float* %520 to <4 x float>*
  store <4 x float> %518, <4 x float>* %521, align 4
  %522 = or i64 %502, 8
  %523 = or i64 %502, 9
  %524 = getelementptr inbounds float, float* %189, i64 %523
  %525 = bitcast float* %524 to <4 x float>*
  %526 = load <4 x float>, <4 x float>* %525, align 4
  %527 = getelementptr inbounds float, float* %524, i64 4
  %528 = bitcast float* %527 to <4 x float>*
  %529 = load <4 x float>, <4 x float>* %528, align 4
  %530 = shufflevector <4 x float> %511, <4 x float> %526, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %531 = shufflevector <4 x float> %526, <4 x float> %529, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %532 = fmul <4 x float> %148, %526
  %533 = fmul <4 x float> %150, %529
  %534 = getelementptr inbounds float, float* %189, i64 %522
  %535 = fadd <4 x float> %530, %532
  %536 = fadd <4 x float> %531, %533
  %537 = bitcast float* %534 to <4 x float>*
  store <4 x float> %535, <4 x float>* %537, align 4
  %538 = getelementptr inbounds float, float* %534, i64 4
  %539 = bitcast float* %538 to <4 x float>*
  store <4 x float> %536, <4 x float>* %539, align 4
  %540 = add i64 %502, 16
  %541 = add i64 %504, -2
  %542 = icmp eq i64 %541, 0
  br i1 %542, label %543, label %501, !llvm.loop !7

543:                                              ; preds = %501, %499
  %544 = phi <4 x float> [ undef, %499 ], [ %529, %501 ]
  %545 = phi i64 [ 0, %499 ], [ %540, %501 ]
  %546 = phi <4 x float> [ %500, %499 ], [ %529, %501 ]
  br i1 %378, label %565, label %547

547:                                              ; preds = %543
  %548 = or i64 %545, 1
  %549 = getelementptr inbounds float, float* %189, i64 %548
  %550 = bitcast float* %549 to <4 x float>*
  %551 = load <4 x float>, <4 x float>* %550, align 4
  %552 = getelementptr inbounds float, float* %549, i64 4
  %553 = bitcast float* %552 to <4 x float>*
  %554 = load <4 x float>, <4 x float>* %553, align 4
  %555 = shufflevector <4 x float> %546, <4 x float> %551, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %556 = shufflevector <4 x float> %551, <4 x float> %554, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %557 = fmul <4 x float> %148, %551
  %558 = fmul <4 x float> %150, %554
  %559 = getelementptr inbounds float, float* %189, i64 %545
  %560 = fadd <4 x float> %555, %557
  %561 = fadd <4 x float> %556, %558
  %562 = bitcast float* %559 to <4 x float>*
  store <4 x float> %560, <4 x float>* %562, align 4
  %563 = getelementptr inbounds float, float* %559, i64 4
  %564 = bitcast float* %563 to <4 x float>*
  store <4 x float> %561, <4 x float>* %564, align 4
  br label %565

565:                                              ; preds = %543, %547
  %566 = phi <4 x float> [ %544, %543 ], [ %554, %547 ]
  %567 = extractelement <4 x float> %566, i32 3
  br i1 %379, label %707, label %568

568:                                              ; preds = %565, %497
  %569 = phi float [ %498, %497 ], [ %567, %565 ]
  %570 = phi i64 [ 1, %497 ], [ %374, %565 ]
  br label %571

571:                                              ; preds = %568, %571
  %572 = phi float [ %575, %571 ], [ %569, %568 ]
  %573 = phi i64 [ %580, %571 ], [ %570, %568 ]
  %574 = getelementptr inbounds float, float* %189, i64 %573
  %575 = load float, float* %574, align 4
  %576 = fmul float %133, %575
  %577 = add nsw i64 %573, -1
  %578 = getelementptr inbounds float, float* %189, i64 %577
  %579 = fadd float %572, %576
  store float %579, float* %578, align 4
  %580 = add nuw nsw i64 %573, 1
  %581 = icmp eq i64 %580, %281
  br i1 %581, label %707, label %571, !llvm.loop !8

582:                                              ; preds = %709, %582
  %583 = phi i64 [ %587, %582 ], [ %710, %709 ]
  %584 = getelementptr inbounds float, float* %189, i64 %583
  %585 = load float, float* %584, align 4
  %586 = fmul float %708, %585
  store float %586, float* %584, align 4
  %587 = add nuw nsw i64 %583, 1
  %588 = icmp eq i64 %587, %281
  br i1 %588, label %589, label %582, !llvm.loop !10

589:                                              ; preds = %582, %756
  %590 = sitofp i32 %432 to float
  %591 = fmul float %590, 0x3FB99999A0000000
  %592 = fadd float %591, 0x3FE99999A0000000
  %593 = fadd float %495, 0xC00FFDF3C0000000
  %594 = fmul float %592, %593
  %595 = add nsw i32 %494, 1
  %596 = sitofp i32 %595 to float
  %597 = fmul float %495, %596
  %598 = fdiv float %594, %597
  %599 = fsub float 0x3FEFAE1480000000, %598
  call void @silk_bwexpander_FLP(float* %189, i32 %224, float %599) #5
  br i1 %227, label %600, label %640

600:                                              ; preds = %589
  %601 = load float, float* %356, align 4
  br i1 %388, label %613, label %602

602:                                              ; preds = %600, %602
  %603 = phi float [ %610, %602 ], [ %601, %600 ]
  %604 = phi i64 [ %607, %602 ], [ %355, %600 ]
  %605 = phi i64 [ %611, %602 ], [ %387, %600 ]
  %606 = fmul float %133, %603
  %607 = add i64 %604, -1
  %608 = getelementptr inbounds float, float* %189, i64 %607
  %609 = load float, float* %608, align 4
  %610 = fsub float %609, %606
  store float %610, float* %608, align 4
  %611 = add i64 %605, -1
  %612 = icmp eq i64 %611, 0
  br i1 %612, label %613, label %602, !llvm.loop !11

613:                                              ; preds = %602, %600
  %614 = phi float [ %601, %600 ], [ %610, %602 ]
  %615 = phi i64 [ %355, %600 ], [ %607, %602 ]
  br i1 %389, label %640, label %616

616:                                              ; preds = %613, %616
  %617 = phi float [ %638, %616 ], [ %614, %613 ]
  %618 = phi i64 [ %635, %616 ], [ %615, %613 ]
  %619 = fmul float %133, %617
  %620 = add nsw i64 %618, -1
  %621 = getelementptr inbounds float, float* %189, i64 %620
  %622 = load float, float* %621, align 4
  %623 = fsub float %622, %619
  store float %623, float* %621, align 4
  %624 = fmul float %133, %623
  %625 = add i64 %618, -2
  %626 = getelementptr inbounds float, float* %189, i64 %625
  %627 = load float, float* %626, align 4
  %628 = fsub float %627, %624
  store float %628, float* %626, align 4
  %629 = fmul float %133, %628
  %630 = add i64 %618, -3
  %631 = getelementptr inbounds float, float* %189, i64 %630
  %632 = load float, float* %631, align 4
  %633 = fsub float %632, %629
  store float %633, float* %631, align 4
  %634 = fmul float %133, %633
  %635 = add i64 %618, -4
  %636 = getelementptr inbounds float, float* %189, i64 %635
  %637 = load float, float* %636, align 4
  %638 = fsub float %637, %634
  store float %638, float* %636, align 4
  %639 = icmp sgt i64 %635, 0
  br i1 %639, label %616, label %640

640:                                              ; preds = %613, %616, %589
  %641 = load float, float* %189, align 4
  %642 = fmul float %133, %641
  %643 = fadd float %642, 1.000000e+00
  %644 = fdiv float %146, %643
  %645 = fmul float %644, %641
  store float %645, float* %189, align 4
  br i1 %283, label %704, label %646

646:                                              ; preds = %640
  br i1 %390, label %695, label %647

647:                                              ; preds = %646
  %648 = insertelement <4 x float> undef, float %644, i32 0
  %649 = shufflevector <4 x float> %648, <4 x float> undef, <4 x i32> zeroinitializer
  %650 = insertelement <4 x float> undef, float %644, i32 0
  %651 = shufflevector <4 x float> %650, <4 x float> undef, <4 x i32> zeroinitializer
  br i1 %394, label %680, label %652

652:                                              ; preds = %647, %652
  %653 = phi i64 [ %677, %652 ], [ 0, %647 ]
  %654 = phi i64 [ %678, %652 ], [ %395, %647 ]
  %655 = or i64 %653, 1
  %656 = getelementptr inbounds float, float* %189, i64 %655
  %657 = bitcast float* %656 to <4 x float>*
  %658 = load <4 x float>, <4 x float>* %657, align 4
  %659 = getelementptr inbounds float, float* %656, i64 4
  %660 = bitcast float* %659 to <4 x float>*
  %661 = load <4 x float>, <4 x float>* %660, align 4
  %662 = fmul <4 x float> %649, %658
  %663 = fmul <4 x float> %651, %661
  %664 = bitcast float* %656 to <4 x float>*
  store <4 x float> %662, <4 x float>* %664, align 4
  %665 = bitcast float* %659 to <4 x float>*
  store <4 x float> %663, <4 x float>* %665, align 4
  %666 = or i64 %653, 9
  %667 = getelementptr inbounds float, float* %189, i64 %666
  %668 = bitcast float* %667 to <4 x float>*
  %669 = load <4 x float>, <4 x float>* %668, align 4
  %670 = getelementptr inbounds float, float* %667, i64 4
  %671 = bitcast float* %670 to <4 x float>*
  %672 = load <4 x float>, <4 x float>* %671, align 4
  %673 = fmul <4 x float> %649, %669
  %674 = fmul <4 x float> %651, %672
  %675 = bitcast float* %667 to <4 x float>*
  store <4 x float> %673, <4 x float>* %675, align 4
  %676 = bitcast float* %670 to <4 x float>*
  store <4 x float> %674, <4 x float>* %676, align 4
  %677 = add i64 %653, 16
  %678 = add i64 %654, -2
  %679 = icmp eq i64 %678, 0
  br i1 %679, label %680, label %652, !llvm.loop !12

680:                                              ; preds = %652, %647
  %681 = phi i64 [ 0, %647 ], [ %677, %652 ]
  br i1 %396, label %694, label %682

682:                                              ; preds = %680
  %683 = or i64 %681, 1
  %684 = getelementptr inbounds float, float* %189, i64 %683
  %685 = bitcast float* %684 to <4 x float>*
  %686 = load <4 x float>, <4 x float>* %685, align 4
  %687 = getelementptr inbounds float, float* %684, i64 4
  %688 = bitcast float* %687 to <4 x float>*
  %689 = load <4 x float>, <4 x float>* %688, align 4
  %690 = fmul <4 x float> %649, %686
  %691 = fmul <4 x float> %651, %689
  %692 = bitcast float* %684 to <4 x float>*
  store <4 x float> %690, <4 x float>* %692, align 4
  %693 = bitcast float* %687 to <4 x float>*
  store <4 x float> %691, <4 x float>* %693, align 4
  br label %694

694:                                              ; preds = %680, %682
  br i1 %397, label %704, label %695

695:                                              ; preds = %694, %646
  %696 = phi i64 [ 1, %646 ], [ %392, %694 ]
  br label %697

697:                                              ; preds = %695, %697
  %698 = phi i64 [ %702, %697 ], [ %696, %695 ]
  %699 = getelementptr inbounds float, float* %189, i64 %698
  %700 = load float, float* %699, align 4
  %701 = fmul float %644, %700
  store float %701, float* %699, align 4
  %702 = add nuw nsw i64 %698, 1
  %703 = icmp eq i64 %702, %281
  br i1 %703, label %704, label %697, !llvm.loop !13

704:                                              ; preds = %697, %694, %640
  %705 = add nuw nsw i32 %432, 1
  %706 = icmp eq i32 %705, 10
  br i1 %706, label %1752, label %429

707:                                              ; preds = %571, %565
  %708 = fdiv float 1.000000e+00, %430
  br i1 %380, label %709, label %711

709:                                              ; preds = %756, %707
  %710 = phi i64 [ 0, %707 ], [ %381, %756 ]
  br label %582

711:                                              ; preds = %707
  %712 = insertelement <4 x float> undef, float %708, i32 0
  %713 = shufflevector <4 x float> %712, <4 x float> undef, <4 x i32> zeroinitializer
  %714 = insertelement <4 x float> undef, float %708, i32 0
  %715 = shufflevector <4 x float> %714, <4 x float> undef, <4 x i32> zeroinitializer
  br i1 %383, label %743, label %716

716:                                              ; preds = %711, %716
  %717 = phi i64 [ %740, %716 ], [ 0, %711 ]
  %718 = phi i64 [ %741, %716 ], [ %384, %711 ]
  %719 = getelementptr inbounds float, float* %189, i64 %717
  %720 = bitcast float* %719 to <4 x float>*
  %721 = load <4 x float>, <4 x float>* %720, align 4
  %722 = getelementptr inbounds float, float* %719, i64 4
  %723 = bitcast float* %722 to <4 x float>*
  %724 = load <4 x float>, <4 x float>* %723, align 4
  %725 = fmul <4 x float> %713, %721
  %726 = fmul <4 x float> %715, %724
  %727 = bitcast float* %719 to <4 x float>*
  store <4 x float> %725, <4 x float>* %727, align 4
  %728 = bitcast float* %722 to <4 x float>*
  store <4 x float> %726, <4 x float>* %728, align 4
  %729 = or i64 %717, 8
  %730 = getelementptr inbounds float, float* %189, i64 %729
  %731 = bitcast float* %730 to <4 x float>*
  %732 = load <4 x float>, <4 x float>* %731, align 4
  %733 = getelementptr inbounds float, float* %730, i64 4
  %734 = bitcast float* %733 to <4 x float>*
  %735 = load <4 x float>, <4 x float>* %734, align 4
  %736 = fmul <4 x float> %713, %732
  %737 = fmul <4 x float> %715, %735
  %738 = bitcast float* %730 to <4 x float>*
  store <4 x float> %736, <4 x float>* %738, align 4
  %739 = bitcast float* %733 to <4 x float>*
  store <4 x float> %737, <4 x float>* %739, align 4
  %740 = add i64 %717, 16
  %741 = add i64 %718, -2
  %742 = icmp eq i64 %741, 0
  br i1 %742, label %743, label %716, !llvm.loop !14

743:                                              ; preds = %716, %711
  %744 = phi i64 [ 0, %711 ], [ %740, %716 ]
  br i1 %385, label %756, label %745

745:                                              ; preds = %743
  %746 = getelementptr inbounds float, float* %189, i64 %744
  %747 = bitcast float* %746 to <4 x float>*
  %748 = load <4 x float>, <4 x float>* %747, align 4
  %749 = getelementptr inbounds float, float* %746, i64 4
  %750 = bitcast float* %749 to <4 x float>*
  %751 = load <4 x float>, <4 x float>* %750, align 4
  %752 = fmul <4 x float> %713, %748
  %753 = fmul <4 x float> %715, %751
  %754 = bitcast float* %746 to <4 x float>*
  store <4 x float> %752, <4 x float>* %754, align 4
  %755 = bitcast float* %749 to <4 x float>*
  store <4 x float> %753, <4 x float>* %755, align 4
  br label %756

756:                                              ; preds = %743, %745
  br i1 %386, label %589, label %709

757:                                              ; preds = %398, %831
  %758 = phi float [ %778, %831 ], [ %278, %398 ]
  %759 = phi i32 [ %968, %831 ], [ 0, %398 ]
  %760 = phi i32 [ %832, %831 ], [ 0, %398 ]
  br i1 %411, label %946, label %857

761:                                              ; preds = %850, %945
  %762 = sitofp i32 %760 to float
  %763 = fmul float %762, 0x3FB99999A0000000
  %764 = fadd float %763, 0x3FE99999A0000000
  %765 = fadd float %969, 0xC00FFDF3C0000000
  %766 = fmul float %764, %765
  %767 = add nsw i32 %968, 1
  %768 = sitofp i32 %767 to float
  %769 = fmul float %969, %768
  %770 = fdiv float %766, %769
  %771 = fsub float 0x3FEFAE1480000000, %770
  call void @silk_bwexpander_FLP(float* %189, i32 %224, float %771) #5
  br i1 %227, label %772, label %774

772:                                              ; preds = %761
  %773 = load float, float* %399, align 4
  br label %841

774:                                              ; preds = %841, %761
  %775 = load float, float* %189, align 4
  %776 = fmul float %133, %775
  %777 = fadd float %776, 1.000000e+00
  %778 = fdiv float %146, %777
  %779 = fmul float %778, %775
  store float %779, float* %189, align 4
  br i1 %283, label %831, label %780

780:                                              ; preds = %774
  br i1 %421, label %781, label %783

781:                                              ; preds = %830, %780
  %782 = phi i64 [ 1, %780 ], [ %423, %830 ]
  br label %834

783:                                              ; preds = %780
  %784 = insertelement <4 x float> undef, float %778, i32 0
  %785 = shufflevector <4 x float> %784, <4 x float> undef, <4 x i32> zeroinitializer
  %786 = insertelement <4 x float> undef, float %778, i32 0
  %787 = shufflevector <4 x float> %786, <4 x float> undef, <4 x i32> zeroinitializer
  br i1 %425, label %816, label %788

788:                                              ; preds = %783, %788
  %789 = phi i64 [ %813, %788 ], [ 0, %783 ]
  %790 = phi i64 [ %814, %788 ], [ %426, %783 ]
  %791 = or i64 %789, 1
  %792 = getelementptr inbounds float, float* %189, i64 %791
  %793 = bitcast float* %792 to <4 x float>*
  %794 = load <4 x float>, <4 x float>* %793, align 4
  %795 = getelementptr inbounds float, float* %792, i64 4
  %796 = bitcast float* %795 to <4 x float>*
  %797 = load <4 x float>, <4 x float>* %796, align 4
  %798 = fmul <4 x float> %785, %794
  %799 = fmul <4 x float> %787, %797
  %800 = bitcast float* %792 to <4 x float>*
  store <4 x float> %798, <4 x float>* %800, align 4
  %801 = bitcast float* %795 to <4 x float>*
  store <4 x float> %799, <4 x float>* %801, align 4
  %802 = or i64 %789, 9
  %803 = getelementptr inbounds float, float* %189, i64 %802
  %804 = bitcast float* %803 to <4 x float>*
  %805 = load <4 x float>, <4 x float>* %804, align 4
  %806 = getelementptr inbounds float, float* %803, i64 4
  %807 = bitcast float* %806 to <4 x float>*
  %808 = load <4 x float>, <4 x float>* %807, align 4
  %809 = fmul <4 x float> %785, %805
  %810 = fmul <4 x float> %787, %808
  %811 = bitcast float* %803 to <4 x float>*
  store <4 x float> %809, <4 x float>* %811, align 4
  %812 = bitcast float* %806 to <4 x float>*
  store <4 x float> %810, <4 x float>* %812, align 4
  %813 = add i64 %789, 16
  %814 = add i64 %790, -2
  %815 = icmp eq i64 %814, 0
  br i1 %815, label %816, label %788, !llvm.loop !15

816:                                              ; preds = %788, %783
  %817 = phi i64 [ 0, %783 ], [ %813, %788 ]
  br i1 %427, label %830, label %818

818:                                              ; preds = %816
  %819 = or i64 %817, 1
  %820 = getelementptr inbounds float, float* %189, i64 %819
  %821 = bitcast float* %820 to <4 x float>*
  %822 = load <4 x float>, <4 x float>* %821, align 4
  %823 = getelementptr inbounds float, float* %820, i64 4
  %824 = bitcast float* %823 to <4 x float>*
  %825 = load <4 x float>, <4 x float>* %824, align 4
  %826 = fmul <4 x float> %785, %822
  %827 = fmul <4 x float> %787, %825
  %828 = bitcast float* %820 to <4 x float>*
  store <4 x float> %826, <4 x float>* %828, align 4
  %829 = bitcast float* %823 to <4 x float>*
  store <4 x float> %827, <4 x float>* %829, align 4
  br label %830

830:                                              ; preds = %816, %818
  br i1 %428, label %831, label %781

831:                                              ; preds = %834, %830, %774
  %832 = add nuw nsw i32 %760, 1
  %833 = icmp eq i32 %832, 10
  br i1 %833, label %1752, label %757

834:                                              ; preds = %781, %834
  %835 = phi i64 [ %839, %834 ], [ %782, %781 ]
  %836 = getelementptr inbounds float, float* %189, i64 %835
  %837 = load float, float* %836, align 4
  %838 = fmul float %778, %837
  store float %838, float* %836, align 4
  %839 = add nuw nsw i64 %835, 1
  %840 = icmp eq i64 %839, %281
  br i1 %840, label %831, label %834, !llvm.loop !16

841:                                              ; preds = %841, %772
  %842 = phi float [ %773, %772 ], [ %848, %841 ]
  %843 = phi i64 [ %400, %772 ], [ %845, %841 ]
  %844 = fmul float %133, %842
  %845 = add i64 %843, -1
  %846 = getelementptr inbounds float, float* %189, i64 %845
  %847 = load float, float* %846, align 4
  %848 = fsub float %847, %844
  store float %848, float* %846, align 4
  %849 = icmp sgt i64 %845, 0
  br i1 %849, label %841, label %774

850:                                              ; preds = %898, %850
  %851 = phi i64 [ %855, %850 ], [ %899, %898 ]
  %852 = getelementptr inbounds float, float* %189, i64 %851
  %853 = load float, float* %852, align 4
  %854 = fmul float %897, %853
  store float %854, float* %852, align 4
  %855 = add nuw nsw i64 %851, 1
  %856 = icmp eq i64 %855, %281
  br i1 %856, label %761, label %850, !llvm.loop !17

857:                                              ; preds = %757, %857
  %858 = phi i64 [ %893, %857 ], [ 0, %757 ]
  %859 = phi float [ %892, %857 ], [ -1.000000e+00, %757 ]
  %860 = phi i32 [ %891, %857 ], [ %759, %757 ]
  %861 = phi i64 [ %894, %857 ], [ %412, %757 ]
  %862 = getelementptr inbounds float, float* %189, i64 %858
  %863 = load float, float* %862, align 4
  %864 = call float @llvm.fabs.f32(float %863) #5
  %865 = fcmp ogt float %864, %859
  %866 = trunc i64 %858 to i32
  %867 = select i1 %865, i32 %866, i32 %860
  %868 = select i1 %865, float %864, float %859
  %869 = or i64 %858, 1
  %870 = getelementptr inbounds float, float* %189, i64 %869
  %871 = load float, float* %870, align 4
  %872 = call float @llvm.fabs.f32(float %871) #5
  %873 = fcmp ogt float %872, %868
  %874 = trunc i64 %869 to i32
  %875 = select i1 %873, i32 %874, i32 %867
  %876 = select i1 %873, float %872, float %868
  %877 = or i64 %858, 2
  %878 = getelementptr inbounds float, float* %189, i64 %877
  %879 = load float, float* %878, align 4
  %880 = call float @llvm.fabs.f32(float %879) #5
  %881 = fcmp ogt float %880, %876
  %882 = trunc i64 %877 to i32
  %883 = select i1 %881, i32 %882, i32 %875
  %884 = select i1 %881, float %880, float %876
  %885 = or i64 %858, 3
  %886 = getelementptr inbounds float, float* %189, i64 %885
  %887 = load float, float* %886, align 4
  %888 = call float @llvm.fabs.f32(float %887) #5
  %889 = fcmp ogt float %888, %884
  %890 = trunc i64 %885 to i32
  %891 = select i1 %889, i32 %890, i32 %883
  %892 = select i1 %889, float %888, float %884
  %893 = add nuw nsw i64 %858, 4
  %894 = add i64 %861, -4
  %895 = icmp eq i64 %894, 0
  br i1 %895, label %946, label %857

896:                                              ; preds = %967
  %897 = fdiv float 1.000000e+00, %758
  br i1 %414, label %898, label %900

898:                                              ; preds = %945, %896
  %899 = phi i64 [ 0, %896 ], [ %415, %945 ]
  br label %850

900:                                              ; preds = %896
  %901 = insertelement <4 x float> undef, float %897, i32 0
  %902 = shufflevector <4 x float> %901, <4 x float> undef, <4 x i32> zeroinitializer
  %903 = insertelement <4 x float> undef, float %897, i32 0
  %904 = shufflevector <4 x float> %903, <4 x float> undef, <4 x i32> zeroinitializer
  br i1 %417, label %932, label %905

905:                                              ; preds = %900, %905
  %906 = phi i64 [ %929, %905 ], [ 0, %900 ]
  %907 = phi i64 [ %930, %905 ], [ %418, %900 ]
  %908 = getelementptr inbounds float, float* %189, i64 %906
  %909 = bitcast float* %908 to <4 x float>*
  %910 = load <4 x float>, <4 x float>* %909, align 4
  %911 = getelementptr inbounds float, float* %908, i64 4
  %912 = bitcast float* %911 to <4 x float>*
  %913 = load <4 x float>, <4 x float>* %912, align 4
  %914 = fmul <4 x float> %902, %910
  %915 = fmul <4 x float> %904, %913
  %916 = bitcast float* %908 to <4 x float>*
  store <4 x float> %914, <4 x float>* %916, align 4
  %917 = bitcast float* %911 to <4 x float>*
  store <4 x float> %915, <4 x float>* %917, align 4
  %918 = or i64 %906, 8
  %919 = getelementptr inbounds float, float* %189, i64 %918
  %920 = bitcast float* %919 to <4 x float>*
  %921 = load <4 x float>, <4 x float>* %920, align 4
  %922 = getelementptr inbounds float, float* %919, i64 4
  %923 = bitcast float* %922 to <4 x float>*
  %924 = load <4 x float>, <4 x float>* %923, align 4
  %925 = fmul <4 x float> %902, %921
  %926 = fmul <4 x float> %904, %924
  %927 = bitcast float* %919 to <4 x float>*
  store <4 x float> %925, <4 x float>* %927, align 4
  %928 = bitcast float* %922 to <4 x float>*
  store <4 x float> %926, <4 x float>* %928, align 4
  %929 = add i64 %906, 16
  %930 = add i64 %907, -2
  %931 = icmp eq i64 %930, 0
  br i1 %931, label %932, label %905, !llvm.loop !18

932:                                              ; preds = %905, %900
  %933 = phi i64 [ 0, %900 ], [ %929, %905 ]
  br i1 %419, label %945, label %934

934:                                              ; preds = %932
  %935 = getelementptr inbounds float, float* %189, i64 %933
  %936 = bitcast float* %935 to <4 x float>*
  %937 = load <4 x float>, <4 x float>* %936, align 4
  %938 = getelementptr inbounds float, float* %935, i64 4
  %939 = bitcast float* %938 to <4 x float>*
  %940 = load <4 x float>, <4 x float>* %939, align 4
  %941 = fmul <4 x float> %902, %937
  %942 = fmul <4 x float> %904, %940
  %943 = bitcast float* %935 to <4 x float>*
  store <4 x float> %941, <4 x float>* %943, align 4
  %944 = bitcast float* %938 to <4 x float>*
  store <4 x float> %942, <4 x float>* %944, align 4
  br label %945

945:                                              ; preds = %932, %934
  br i1 %420, label %761, label %898

946:                                              ; preds = %857, %757
  %947 = phi i32 [ undef, %757 ], [ %891, %857 ]
  %948 = phi float [ undef, %757 ], [ %892, %857 ]
  %949 = phi i64 [ 0, %757 ], [ %893, %857 ]
  %950 = phi float [ -1.000000e+00, %757 ], [ %892, %857 ]
  %951 = phi i32 [ %759, %757 ], [ %891, %857 ]
  br i1 %413, label %967, label %952

952:                                              ; preds = %946, %952
  %953 = phi i64 [ %964, %952 ], [ %949, %946 ]
  %954 = phi float [ %963, %952 ], [ %950, %946 ]
  %955 = phi i32 [ %962, %952 ], [ %951, %946 ]
  %956 = phi i64 [ %965, %952 ], [ %410, %946 ]
  %957 = getelementptr inbounds float, float* %189, i64 %953
  %958 = load float, float* %957, align 4
  %959 = call float @llvm.fabs.f32(float %958) #5
  %960 = fcmp ogt float %959, %954
  %961 = trunc i64 %953 to i32
  %962 = select i1 %960, i32 %961, i32 %955
  %963 = select i1 %960, float %959, float %954
  %964 = add nuw nsw i64 %953, 1
  %965 = add i64 %956, -1
  %966 = icmp eq i64 %965, 0
  br i1 %966, label %967, label %952, !llvm.loop !19

967:                                              ; preds = %952, %946
  %968 = phi i32 [ %947, %946 ], [ %962, %952 ]
  %969 = phi float [ %948, %946 ], [ %963, %952 ]
  %970 = fcmp ugt float %969, 0x400FFDF3C0000000
  br i1 %970, label %896, label %1752

971:                                              ; preds = %287, %971
  %972 = phi i64 [ %976, %971 ], [ %288, %287 ]
  %973 = getelementptr inbounds float, float* %189, i64 %972
  %974 = load float, float* %973, align 4
  %975 = fmul float %278, %974
  store float %975, float* %973, align 4
  %976 = add nuw nsw i64 %972, 1
  %977 = icmp eq i64 %976, %281
  br i1 %977, label %352, label %971, !llvm.loop !20

978:                                              ; preds = %220
  %979 = icmp sgt i32 %224, 0
  br i1 %979, label %980, label %1752

980:                                              ; preds = %978
  %981 = zext i32 %224 to i64
  %982 = add nsw i64 %981, -1
  %983 = and i64 %981, 3
  %984 = icmp ult i64 %982, 3
  br i1 %984, label %1038, label %985

985:                                              ; preds = %980
  %986 = sub nsw i64 %981, %983
  br label %999

987:                                              ; preds = %1060
  %988 = fadd float %1062, 0xC00FFDF3C0000000
  %989 = fmul float %988, 0x3FE99999A0000000
  %990 = add nsw i32 %1061, 1
  %991 = sitofp i32 %990 to float
  %992 = fmul float %1062, %991
  %993 = fdiv float %989, %992
  %994 = fsub float 0x3FEFAE1480000000, %993
  call void @silk_bwexpander_FLP(float* %189, i32 %224, float %994) #5
  %995 = and i64 %981, 3
  %996 = icmp ult i64 %982, 3
  br i1 %996, label %1103, label %997

997:                                              ; preds = %987
  %998 = sub nsw i64 %981, %995
  br label %1064

999:                                              ; preds = %999, %985
  %1000 = phi i64 [ 0, %985 ], [ %1035, %999 ]
  %1001 = phi float [ -1.000000e+00, %985 ], [ %1034, %999 ]
  %1002 = phi i32 [ 0, %985 ], [ %1033, %999 ]
  %1003 = phi i64 [ %986, %985 ], [ %1036, %999 ]
  %1004 = getelementptr inbounds float, float* %189, i64 %1000
  %1005 = load float, float* %1004, align 4
  %1006 = call float @llvm.fabs.f32(float %1005) #5
  %1007 = fcmp ogt float %1006, %1001
  %1008 = trunc i64 %1000 to i32
  %1009 = select i1 %1007, i32 %1008, i32 %1002
  %1010 = select i1 %1007, float %1006, float %1001
  %1011 = or i64 %1000, 1
  %1012 = getelementptr inbounds float, float* %189, i64 %1011
  %1013 = load float, float* %1012, align 4
  %1014 = call float @llvm.fabs.f32(float %1013) #5
  %1015 = fcmp ogt float %1014, %1010
  %1016 = trunc i64 %1011 to i32
  %1017 = select i1 %1015, i32 %1016, i32 %1009
  %1018 = select i1 %1015, float %1014, float %1010
  %1019 = or i64 %1000, 2
  %1020 = getelementptr inbounds float, float* %189, i64 %1019
  %1021 = load float, float* %1020, align 4
  %1022 = call float @llvm.fabs.f32(float %1021) #5
  %1023 = fcmp ogt float %1022, %1018
  %1024 = trunc i64 %1019 to i32
  %1025 = select i1 %1023, i32 %1024, i32 %1017
  %1026 = select i1 %1023, float %1022, float %1018
  %1027 = or i64 %1000, 3
  %1028 = getelementptr inbounds float, float* %189, i64 %1027
  %1029 = load float, float* %1028, align 4
  %1030 = call float @llvm.fabs.f32(float %1029) #5
  %1031 = fcmp ogt float %1030, %1026
  %1032 = trunc i64 %1027 to i32
  %1033 = select i1 %1031, i32 %1032, i32 %1025
  %1034 = select i1 %1031, float %1030, float %1026
  %1035 = add nuw nsw i64 %1000, 4
  %1036 = add i64 %1003, -4
  %1037 = icmp eq i64 %1036, 0
  br i1 %1037, label %1038, label %999

1038:                                             ; preds = %999, %980
  %1039 = phi i32 [ undef, %980 ], [ %1033, %999 ]
  %1040 = phi float [ undef, %980 ], [ %1034, %999 ]
  %1041 = phi i64 [ 0, %980 ], [ %1035, %999 ]
  %1042 = phi float [ -1.000000e+00, %980 ], [ %1034, %999 ]
  %1043 = phi i32 [ 0, %980 ], [ %1033, %999 ]
  %1044 = icmp eq i64 %983, 0
  br i1 %1044, label %1060, label %1045

1045:                                             ; preds = %1038, %1045
  %1046 = phi i64 [ %1057, %1045 ], [ %1041, %1038 ]
  %1047 = phi float [ %1056, %1045 ], [ %1042, %1038 ]
  %1048 = phi i32 [ %1055, %1045 ], [ %1043, %1038 ]
  %1049 = phi i64 [ %1058, %1045 ], [ %983, %1038 ]
  %1050 = getelementptr inbounds float, float* %189, i64 %1046
  %1051 = load float, float* %1050, align 4
  %1052 = call float @llvm.fabs.f32(float %1051) #5
  %1053 = fcmp ogt float %1052, %1047
  %1054 = trunc i64 %1046 to i32
  %1055 = select i1 %1053, i32 %1054, i32 %1048
  %1056 = select i1 %1053, float %1052, float %1047
  %1057 = add nuw nsw i64 %1046, 1
  %1058 = add i64 %1049, -1
  %1059 = icmp eq i64 %1058, 0
  br i1 %1059, label %1060, label %1045, !llvm.loop !21

1060:                                             ; preds = %1045, %1038
  %1061 = phi i32 [ %1039, %1038 ], [ %1055, %1045 ]
  %1062 = phi float [ %1040, %1038 ], [ %1056, %1045 ]
  %1063 = fcmp ugt float %1062, 0x400FFDF3C0000000
  br i1 %1063, label %987, label %1752

1064:                                             ; preds = %1064, %997
  %1065 = phi i64 [ 0, %997 ], [ %1100, %1064 ]
  %1066 = phi float [ -1.000000e+00, %997 ], [ %1099, %1064 ]
  %1067 = phi i32 [ %1061, %997 ], [ %1098, %1064 ]
  %1068 = phi i64 [ %998, %997 ], [ %1101, %1064 ]
  %1069 = getelementptr inbounds float, float* %189, i64 %1065
  %1070 = load float, float* %1069, align 4
  %1071 = call float @llvm.fabs.f32(float %1070) #5
  %1072 = fcmp ogt float %1071, %1066
  %1073 = trunc i64 %1065 to i32
  %1074 = select i1 %1072, i32 %1073, i32 %1067
  %1075 = select i1 %1072, float %1071, float %1066
  %1076 = or i64 %1065, 1
  %1077 = getelementptr inbounds float, float* %189, i64 %1076
  %1078 = load float, float* %1077, align 4
  %1079 = call float @llvm.fabs.f32(float %1078) #5
  %1080 = fcmp ogt float %1079, %1075
  %1081 = trunc i64 %1076 to i32
  %1082 = select i1 %1080, i32 %1081, i32 %1074
  %1083 = select i1 %1080, float %1079, float %1075
  %1084 = or i64 %1065, 2
  %1085 = getelementptr inbounds float, float* %189, i64 %1084
  %1086 = load float, float* %1085, align 4
  %1087 = call float @llvm.fabs.f32(float %1086) #5
  %1088 = fcmp ogt float %1087, %1083
  %1089 = trunc i64 %1084 to i32
  %1090 = select i1 %1088, i32 %1089, i32 %1082
  %1091 = select i1 %1088, float %1087, float %1083
  %1092 = or i64 %1065, 3
  %1093 = getelementptr inbounds float, float* %189, i64 %1092
  %1094 = load float, float* %1093, align 4
  %1095 = call float @llvm.fabs.f32(float %1094) #5
  %1096 = fcmp ogt float %1095, %1091
  %1097 = trunc i64 %1092 to i32
  %1098 = select i1 %1096, i32 %1097, i32 %1090
  %1099 = select i1 %1096, float %1095, float %1091
  %1100 = add nuw nsw i64 %1065, 4
  %1101 = add i64 %1068, -4
  %1102 = icmp eq i64 %1101, 0
  br i1 %1102, label %1103, label %1064

1103:                                             ; preds = %1064, %987
  %1104 = phi i32 [ undef, %987 ], [ %1098, %1064 ]
  %1105 = phi float [ undef, %987 ], [ %1099, %1064 ]
  %1106 = phi i64 [ 0, %987 ], [ %1100, %1064 ]
  %1107 = phi float [ -1.000000e+00, %987 ], [ %1099, %1064 ]
  %1108 = phi i32 [ %1061, %987 ], [ %1098, %1064 ]
  %1109 = icmp eq i64 %995, 0
  br i1 %1109, label %1125, label %1110

1110:                                             ; preds = %1103, %1110
  %1111 = phi i64 [ %1122, %1110 ], [ %1106, %1103 ]
  %1112 = phi float [ %1121, %1110 ], [ %1107, %1103 ]
  %1113 = phi i32 [ %1120, %1110 ], [ %1108, %1103 ]
  %1114 = phi i64 [ %1123, %1110 ], [ %995, %1103 ]
  %1115 = getelementptr inbounds float, float* %189, i64 %1111
  %1116 = load float, float* %1115, align 4
  %1117 = call float @llvm.fabs.f32(float %1116) #5
  %1118 = fcmp ogt float %1117, %1112
  %1119 = trunc i64 %1111 to i32
  %1120 = select i1 %1118, i32 %1119, i32 %1113
  %1121 = select i1 %1118, float %1117, float %1112
  %1122 = add nuw nsw i64 %1111, 1
  %1123 = add i64 %1114, -1
  %1124 = icmp eq i64 %1123, 0
  br i1 %1124, label %1125, label %1110, !llvm.loop !22

1125:                                             ; preds = %1110, %1103
  %1126 = phi i32 [ %1104, %1103 ], [ %1120, %1110 ]
  %1127 = phi float [ %1105, %1103 ], [ %1121, %1110 ]
  %1128 = fcmp ugt float %1127, 0x400FFDF3C0000000
  br i1 %1128, label %1129, label %1752

1129:                                             ; preds = %1125
  %1130 = fadd float %1127, 0xC00FFDF3C0000000
  %1131 = fmul float %1130, 0x3FECCCCCE0000000
  %1132 = add nsw i32 %1126, 1
  %1133 = sitofp i32 %1132 to float
  %1134 = fmul float %1127, %1133
  %1135 = fdiv float %1131, %1134
  %1136 = fsub float 0x3FEFAE1480000000, %1135
  call void @silk_bwexpander_FLP(float* %189, i32 %224, float %1136) #5
  %1137 = and i64 %981, 3
  %1138 = icmp ult i64 %982, 3
  br i1 %1138, label %1180, label %1139

1139:                                             ; preds = %1129
  %1140 = sub nsw i64 %981, %1137
  br label %1141

1141:                                             ; preds = %1141, %1139
  %1142 = phi i64 [ 0, %1139 ], [ %1177, %1141 ]
  %1143 = phi float [ -1.000000e+00, %1139 ], [ %1176, %1141 ]
  %1144 = phi i32 [ %1126, %1139 ], [ %1175, %1141 ]
  %1145 = phi i64 [ %1140, %1139 ], [ %1178, %1141 ]
  %1146 = getelementptr inbounds float, float* %189, i64 %1142
  %1147 = load float, float* %1146, align 4
  %1148 = call float @llvm.fabs.f32(float %1147) #5
  %1149 = fcmp ogt float %1148, %1143
  %1150 = trunc i64 %1142 to i32
  %1151 = select i1 %1149, i32 %1150, i32 %1144
  %1152 = select i1 %1149, float %1148, float %1143
  %1153 = or i64 %1142, 1
  %1154 = getelementptr inbounds float, float* %189, i64 %1153
  %1155 = load float, float* %1154, align 4
  %1156 = call float @llvm.fabs.f32(float %1155) #5
  %1157 = fcmp ogt float %1156, %1152
  %1158 = trunc i64 %1153 to i32
  %1159 = select i1 %1157, i32 %1158, i32 %1151
  %1160 = select i1 %1157, float %1156, float %1152
  %1161 = or i64 %1142, 2
  %1162 = getelementptr inbounds float, float* %189, i64 %1161
  %1163 = load float, float* %1162, align 4
  %1164 = call float @llvm.fabs.f32(float %1163) #5
  %1165 = fcmp ogt float %1164, %1160
  %1166 = trunc i64 %1161 to i32
  %1167 = select i1 %1165, i32 %1166, i32 %1159
  %1168 = select i1 %1165, float %1164, float %1160
  %1169 = or i64 %1142, 3
  %1170 = getelementptr inbounds float, float* %189, i64 %1169
  %1171 = load float, float* %1170, align 4
  %1172 = call float @llvm.fabs.f32(float %1171) #5
  %1173 = fcmp ogt float %1172, %1168
  %1174 = trunc i64 %1169 to i32
  %1175 = select i1 %1173, i32 %1174, i32 %1167
  %1176 = select i1 %1173, float %1172, float %1168
  %1177 = add nuw nsw i64 %1142, 4
  %1178 = add i64 %1145, -4
  %1179 = icmp eq i64 %1178, 0
  br i1 %1179, label %1180, label %1141

1180:                                             ; preds = %1141, %1129
  %1181 = phi i32 [ undef, %1129 ], [ %1175, %1141 ]
  %1182 = phi float [ undef, %1129 ], [ %1176, %1141 ]
  %1183 = phi i64 [ 0, %1129 ], [ %1177, %1141 ]
  %1184 = phi float [ -1.000000e+00, %1129 ], [ %1176, %1141 ]
  %1185 = phi i32 [ %1126, %1129 ], [ %1175, %1141 ]
  %1186 = icmp eq i64 %1137, 0
  br i1 %1186, label %1202, label %1187

1187:                                             ; preds = %1180, %1187
  %1188 = phi i64 [ %1199, %1187 ], [ %1183, %1180 ]
  %1189 = phi float [ %1198, %1187 ], [ %1184, %1180 ]
  %1190 = phi i32 [ %1197, %1187 ], [ %1185, %1180 ]
  %1191 = phi i64 [ %1200, %1187 ], [ %1137, %1180 ]
  %1192 = getelementptr inbounds float, float* %189, i64 %1188
  %1193 = load float, float* %1192, align 4
  %1194 = call float @llvm.fabs.f32(float %1193) #5
  %1195 = fcmp ogt float %1194, %1189
  %1196 = trunc i64 %1188 to i32
  %1197 = select i1 %1195, i32 %1196, i32 %1190
  %1198 = select i1 %1195, float %1194, float %1189
  %1199 = add nuw nsw i64 %1188, 1
  %1200 = add i64 %1191, -1
  %1201 = icmp eq i64 %1200, 0
  br i1 %1201, label %1202, label %1187, !llvm.loop !23

1202:                                             ; preds = %1187, %1180
  %1203 = phi i32 [ %1181, %1180 ], [ %1197, %1187 ]
  %1204 = phi float [ %1182, %1180 ], [ %1198, %1187 ]
  %1205 = fcmp ugt float %1204, 0x400FFDF3C0000000
  br i1 %1205, label %1206, label %1752

1206:                                             ; preds = %1202
  %1207 = fadd float %1204, 0xC00FFDF3C0000000
  %1208 = add nsw i32 %1203, 1
  %1209 = sitofp i32 %1208 to float
  %1210 = fmul float %1204, %1209
  %1211 = fdiv float %1207, %1210
  %1212 = fsub float 0x3FEFAE1480000000, %1211
  call void @silk_bwexpander_FLP(float* %189, i32 %224, float %1212) #5
  %1213 = and i64 %981, 3
  %1214 = icmp ult i64 %982, 3
  br i1 %1214, label %1256, label %1215

1215:                                             ; preds = %1206
  %1216 = sub nsw i64 %981, %1213
  br label %1217

1217:                                             ; preds = %1217, %1215
  %1218 = phi i64 [ 0, %1215 ], [ %1253, %1217 ]
  %1219 = phi float [ -1.000000e+00, %1215 ], [ %1252, %1217 ]
  %1220 = phi i32 [ %1203, %1215 ], [ %1251, %1217 ]
  %1221 = phi i64 [ %1216, %1215 ], [ %1254, %1217 ]
  %1222 = getelementptr inbounds float, float* %189, i64 %1218
  %1223 = load float, float* %1222, align 4
  %1224 = call float @llvm.fabs.f32(float %1223) #5
  %1225 = fcmp ogt float %1224, %1219
  %1226 = trunc i64 %1218 to i32
  %1227 = select i1 %1225, i32 %1226, i32 %1220
  %1228 = select i1 %1225, float %1224, float %1219
  %1229 = or i64 %1218, 1
  %1230 = getelementptr inbounds float, float* %189, i64 %1229
  %1231 = load float, float* %1230, align 4
  %1232 = call float @llvm.fabs.f32(float %1231) #5
  %1233 = fcmp ogt float %1232, %1228
  %1234 = trunc i64 %1229 to i32
  %1235 = select i1 %1233, i32 %1234, i32 %1227
  %1236 = select i1 %1233, float %1232, float %1228
  %1237 = or i64 %1218, 2
  %1238 = getelementptr inbounds float, float* %189, i64 %1237
  %1239 = load float, float* %1238, align 4
  %1240 = call float @llvm.fabs.f32(float %1239) #5
  %1241 = fcmp ogt float %1240, %1236
  %1242 = trunc i64 %1237 to i32
  %1243 = select i1 %1241, i32 %1242, i32 %1235
  %1244 = select i1 %1241, float %1240, float %1236
  %1245 = or i64 %1218, 3
  %1246 = getelementptr inbounds float, float* %189, i64 %1245
  %1247 = load float, float* %1246, align 4
  %1248 = call float @llvm.fabs.f32(float %1247) #5
  %1249 = fcmp ogt float %1248, %1244
  %1250 = trunc i64 %1245 to i32
  %1251 = select i1 %1249, i32 %1250, i32 %1243
  %1252 = select i1 %1249, float %1248, float %1244
  %1253 = add nuw nsw i64 %1218, 4
  %1254 = add i64 %1221, -4
  %1255 = icmp eq i64 %1254, 0
  br i1 %1255, label %1256, label %1217

1256:                                             ; preds = %1217, %1206
  %1257 = phi i32 [ undef, %1206 ], [ %1251, %1217 ]
  %1258 = phi float [ undef, %1206 ], [ %1252, %1217 ]
  %1259 = phi i64 [ 0, %1206 ], [ %1253, %1217 ]
  %1260 = phi float [ -1.000000e+00, %1206 ], [ %1252, %1217 ]
  %1261 = phi i32 [ %1203, %1206 ], [ %1251, %1217 ]
  %1262 = icmp eq i64 %1213, 0
  br i1 %1262, label %1278, label %1263

1263:                                             ; preds = %1256, %1263
  %1264 = phi i64 [ %1275, %1263 ], [ %1259, %1256 ]
  %1265 = phi float [ %1274, %1263 ], [ %1260, %1256 ]
  %1266 = phi i32 [ %1273, %1263 ], [ %1261, %1256 ]
  %1267 = phi i64 [ %1276, %1263 ], [ %1213, %1256 ]
  %1268 = getelementptr inbounds float, float* %189, i64 %1264
  %1269 = load float, float* %1268, align 4
  %1270 = call float @llvm.fabs.f32(float %1269) #5
  %1271 = fcmp ogt float %1270, %1265
  %1272 = trunc i64 %1264 to i32
  %1273 = select i1 %1271, i32 %1272, i32 %1266
  %1274 = select i1 %1271, float %1270, float %1265
  %1275 = add nuw nsw i64 %1264, 1
  %1276 = add i64 %1267, -1
  %1277 = icmp eq i64 %1276, 0
  br i1 %1277, label %1278, label %1263, !llvm.loop !24

1278:                                             ; preds = %1263, %1256
  %1279 = phi i32 [ %1257, %1256 ], [ %1273, %1263 ]
  %1280 = phi float [ %1258, %1256 ], [ %1274, %1263 ]
  %1281 = fcmp ugt float %1280, 0x400FFDF3C0000000
  br i1 %1281, label %1282, label %1752

1282:                                             ; preds = %1278
  %1283 = fadd float %1280, 0xC00FFDF3C0000000
  %1284 = fmul float %1283, 0x3FF19999A0000000
  %1285 = add nsw i32 %1279, 1
  %1286 = sitofp i32 %1285 to float
  %1287 = fmul float %1280, %1286
  %1288 = fdiv float %1284, %1287
  %1289 = fsub float 0x3FEFAE1480000000, %1288
  call void @silk_bwexpander_FLP(float* %189, i32 %224, float %1289) #5
  %1290 = and i64 %981, 3
  %1291 = icmp ult i64 %982, 3
  br i1 %1291, label %1333, label %1292

1292:                                             ; preds = %1282
  %1293 = sub nsw i64 %981, %1290
  br label %1294

1294:                                             ; preds = %1294, %1292
  %1295 = phi i64 [ 0, %1292 ], [ %1330, %1294 ]
  %1296 = phi float [ -1.000000e+00, %1292 ], [ %1329, %1294 ]
  %1297 = phi i32 [ %1279, %1292 ], [ %1328, %1294 ]
  %1298 = phi i64 [ %1293, %1292 ], [ %1331, %1294 ]
  %1299 = getelementptr inbounds float, float* %189, i64 %1295
  %1300 = load float, float* %1299, align 4
  %1301 = call float @llvm.fabs.f32(float %1300) #5
  %1302 = fcmp ogt float %1301, %1296
  %1303 = trunc i64 %1295 to i32
  %1304 = select i1 %1302, i32 %1303, i32 %1297
  %1305 = select i1 %1302, float %1301, float %1296
  %1306 = or i64 %1295, 1
  %1307 = getelementptr inbounds float, float* %189, i64 %1306
  %1308 = load float, float* %1307, align 4
  %1309 = call float @llvm.fabs.f32(float %1308) #5
  %1310 = fcmp ogt float %1309, %1305
  %1311 = trunc i64 %1306 to i32
  %1312 = select i1 %1310, i32 %1311, i32 %1304
  %1313 = select i1 %1310, float %1309, float %1305
  %1314 = or i64 %1295, 2
  %1315 = getelementptr inbounds float, float* %189, i64 %1314
  %1316 = load float, float* %1315, align 4
  %1317 = call float @llvm.fabs.f32(float %1316) #5
  %1318 = fcmp ogt float %1317, %1313
  %1319 = trunc i64 %1314 to i32
  %1320 = select i1 %1318, i32 %1319, i32 %1312
  %1321 = select i1 %1318, float %1317, float %1313
  %1322 = or i64 %1295, 3
  %1323 = getelementptr inbounds float, float* %189, i64 %1322
  %1324 = load float, float* %1323, align 4
  %1325 = call float @llvm.fabs.f32(float %1324) #5
  %1326 = fcmp ogt float %1325, %1321
  %1327 = trunc i64 %1322 to i32
  %1328 = select i1 %1326, i32 %1327, i32 %1320
  %1329 = select i1 %1326, float %1325, float %1321
  %1330 = add nuw nsw i64 %1295, 4
  %1331 = add i64 %1298, -4
  %1332 = icmp eq i64 %1331, 0
  br i1 %1332, label %1333, label %1294

1333:                                             ; preds = %1294, %1282
  %1334 = phi i32 [ undef, %1282 ], [ %1328, %1294 ]
  %1335 = phi float [ undef, %1282 ], [ %1329, %1294 ]
  %1336 = phi i64 [ 0, %1282 ], [ %1330, %1294 ]
  %1337 = phi float [ -1.000000e+00, %1282 ], [ %1329, %1294 ]
  %1338 = phi i32 [ %1279, %1282 ], [ %1328, %1294 ]
  %1339 = icmp eq i64 %1290, 0
  br i1 %1339, label %1355, label %1340

1340:                                             ; preds = %1333, %1340
  %1341 = phi i64 [ %1352, %1340 ], [ %1336, %1333 ]
  %1342 = phi float [ %1351, %1340 ], [ %1337, %1333 ]
  %1343 = phi i32 [ %1350, %1340 ], [ %1338, %1333 ]
  %1344 = phi i64 [ %1353, %1340 ], [ %1290, %1333 ]
  %1345 = getelementptr inbounds float, float* %189, i64 %1341
  %1346 = load float, float* %1345, align 4
  %1347 = call float @llvm.fabs.f32(float %1346) #5
  %1348 = fcmp ogt float %1347, %1342
  %1349 = trunc i64 %1341 to i32
  %1350 = select i1 %1348, i32 %1349, i32 %1343
  %1351 = select i1 %1348, float %1347, float %1342
  %1352 = add nuw nsw i64 %1341, 1
  %1353 = add i64 %1344, -1
  %1354 = icmp eq i64 %1353, 0
  br i1 %1354, label %1355, label %1340, !llvm.loop !25

1355:                                             ; preds = %1340, %1333
  %1356 = phi i32 [ %1334, %1333 ], [ %1350, %1340 ]
  %1357 = phi float [ %1335, %1333 ], [ %1351, %1340 ]
  %1358 = fcmp ugt float %1357, 0x400FFDF3C0000000
  br i1 %1358, label %1359, label %1752

1359:                                             ; preds = %1355
  %1360 = fadd float %1357, 0xC00FFDF3C0000000
  %1361 = fmul float %1360, 0x3FF3333340000000
  %1362 = add nsw i32 %1356, 1
  %1363 = sitofp i32 %1362 to float
  %1364 = fmul float %1357, %1363
  %1365 = fdiv float %1361, %1364
  %1366 = fsub float 0x3FEFAE1480000000, %1365
  call void @silk_bwexpander_FLP(float* %189, i32 %224, float %1366) #5
  %1367 = and i64 %981, 3
  %1368 = icmp ult i64 %982, 3
  br i1 %1368, label %1410, label %1369

1369:                                             ; preds = %1359
  %1370 = sub nsw i64 %981, %1367
  br label %1371

1371:                                             ; preds = %1371, %1369
  %1372 = phi i64 [ 0, %1369 ], [ %1407, %1371 ]
  %1373 = phi float [ -1.000000e+00, %1369 ], [ %1406, %1371 ]
  %1374 = phi i32 [ %1356, %1369 ], [ %1405, %1371 ]
  %1375 = phi i64 [ %1370, %1369 ], [ %1408, %1371 ]
  %1376 = getelementptr inbounds float, float* %189, i64 %1372
  %1377 = load float, float* %1376, align 4
  %1378 = call float @llvm.fabs.f32(float %1377) #5
  %1379 = fcmp ogt float %1378, %1373
  %1380 = trunc i64 %1372 to i32
  %1381 = select i1 %1379, i32 %1380, i32 %1374
  %1382 = select i1 %1379, float %1378, float %1373
  %1383 = or i64 %1372, 1
  %1384 = getelementptr inbounds float, float* %189, i64 %1383
  %1385 = load float, float* %1384, align 4
  %1386 = call float @llvm.fabs.f32(float %1385) #5
  %1387 = fcmp ogt float %1386, %1382
  %1388 = trunc i64 %1383 to i32
  %1389 = select i1 %1387, i32 %1388, i32 %1381
  %1390 = select i1 %1387, float %1386, float %1382
  %1391 = or i64 %1372, 2
  %1392 = getelementptr inbounds float, float* %189, i64 %1391
  %1393 = load float, float* %1392, align 4
  %1394 = call float @llvm.fabs.f32(float %1393) #5
  %1395 = fcmp ogt float %1394, %1390
  %1396 = trunc i64 %1391 to i32
  %1397 = select i1 %1395, i32 %1396, i32 %1389
  %1398 = select i1 %1395, float %1394, float %1390
  %1399 = or i64 %1372, 3
  %1400 = getelementptr inbounds float, float* %189, i64 %1399
  %1401 = load float, float* %1400, align 4
  %1402 = call float @llvm.fabs.f32(float %1401) #5
  %1403 = fcmp ogt float %1402, %1398
  %1404 = trunc i64 %1399 to i32
  %1405 = select i1 %1403, i32 %1404, i32 %1397
  %1406 = select i1 %1403, float %1402, float %1398
  %1407 = add nuw nsw i64 %1372, 4
  %1408 = add i64 %1375, -4
  %1409 = icmp eq i64 %1408, 0
  br i1 %1409, label %1410, label %1371

1410:                                             ; preds = %1371, %1359
  %1411 = phi i32 [ undef, %1359 ], [ %1405, %1371 ]
  %1412 = phi float [ undef, %1359 ], [ %1406, %1371 ]
  %1413 = phi i64 [ 0, %1359 ], [ %1407, %1371 ]
  %1414 = phi float [ -1.000000e+00, %1359 ], [ %1406, %1371 ]
  %1415 = phi i32 [ %1356, %1359 ], [ %1405, %1371 ]
  %1416 = icmp eq i64 %1367, 0
  br i1 %1416, label %1432, label %1417

1417:                                             ; preds = %1410, %1417
  %1418 = phi i64 [ %1429, %1417 ], [ %1413, %1410 ]
  %1419 = phi float [ %1428, %1417 ], [ %1414, %1410 ]
  %1420 = phi i32 [ %1427, %1417 ], [ %1415, %1410 ]
  %1421 = phi i64 [ %1430, %1417 ], [ %1367, %1410 ]
  %1422 = getelementptr inbounds float, float* %189, i64 %1418
  %1423 = load float, float* %1422, align 4
  %1424 = call float @llvm.fabs.f32(float %1423) #5
  %1425 = fcmp ogt float %1424, %1419
  %1426 = trunc i64 %1418 to i32
  %1427 = select i1 %1425, i32 %1426, i32 %1420
  %1428 = select i1 %1425, float %1424, float %1419
  %1429 = add nuw nsw i64 %1418, 1
  %1430 = add i64 %1421, -1
  %1431 = icmp eq i64 %1430, 0
  br i1 %1431, label %1432, label %1417, !llvm.loop !26

1432:                                             ; preds = %1417, %1410
  %1433 = phi i32 [ %1411, %1410 ], [ %1427, %1417 ]
  %1434 = phi float [ %1412, %1410 ], [ %1428, %1417 ]
  %1435 = fcmp ugt float %1434, 0x400FFDF3C0000000
  br i1 %1435, label %1436, label %1752

1436:                                             ; preds = %1432
  %1437 = fadd float %1434, 0xC00FFDF3C0000000
  %1438 = fmul float %1437, 0x3FF4CCCCC0000000
  %1439 = add nsw i32 %1433, 1
  %1440 = sitofp i32 %1439 to float
  %1441 = fmul float %1434, %1440
  %1442 = fdiv float %1438, %1441
  %1443 = fsub float 0x3FEFAE1480000000, %1442
  call void @silk_bwexpander_FLP(float* %189, i32 %224, float %1443) #5
  %1444 = and i64 %981, 3
  %1445 = icmp ult i64 %982, 3
  br i1 %1445, label %1487, label %1446

1446:                                             ; preds = %1436
  %1447 = sub nsw i64 %981, %1444
  br label %1448

1448:                                             ; preds = %1448, %1446
  %1449 = phi i64 [ 0, %1446 ], [ %1484, %1448 ]
  %1450 = phi float [ -1.000000e+00, %1446 ], [ %1483, %1448 ]
  %1451 = phi i32 [ %1433, %1446 ], [ %1482, %1448 ]
  %1452 = phi i64 [ %1447, %1446 ], [ %1485, %1448 ]
  %1453 = getelementptr inbounds float, float* %189, i64 %1449
  %1454 = load float, float* %1453, align 4
  %1455 = call float @llvm.fabs.f32(float %1454) #5
  %1456 = fcmp ogt float %1455, %1450
  %1457 = trunc i64 %1449 to i32
  %1458 = select i1 %1456, i32 %1457, i32 %1451
  %1459 = select i1 %1456, float %1455, float %1450
  %1460 = or i64 %1449, 1
  %1461 = getelementptr inbounds float, float* %189, i64 %1460
  %1462 = load float, float* %1461, align 4
  %1463 = call float @llvm.fabs.f32(float %1462) #5
  %1464 = fcmp ogt float %1463, %1459
  %1465 = trunc i64 %1460 to i32
  %1466 = select i1 %1464, i32 %1465, i32 %1458
  %1467 = select i1 %1464, float %1463, float %1459
  %1468 = or i64 %1449, 2
  %1469 = getelementptr inbounds float, float* %189, i64 %1468
  %1470 = load float, float* %1469, align 4
  %1471 = call float @llvm.fabs.f32(float %1470) #5
  %1472 = fcmp ogt float %1471, %1467
  %1473 = trunc i64 %1468 to i32
  %1474 = select i1 %1472, i32 %1473, i32 %1466
  %1475 = select i1 %1472, float %1471, float %1467
  %1476 = or i64 %1449, 3
  %1477 = getelementptr inbounds float, float* %189, i64 %1476
  %1478 = load float, float* %1477, align 4
  %1479 = call float @llvm.fabs.f32(float %1478) #5
  %1480 = fcmp ogt float %1479, %1475
  %1481 = trunc i64 %1476 to i32
  %1482 = select i1 %1480, i32 %1481, i32 %1474
  %1483 = select i1 %1480, float %1479, float %1475
  %1484 = add nuw nsw i64 %1449, 4
  %1485 = add i64 %1452, -4
  %1486 = icmp eq i64 %1485, 0
  br i1 %1486, label %1487, label %1448

1487:                                             ; preds = %1448, %1436
  %1488 = phi i32 [ undef, %1436 ], [ %1482, %1448 ]
  %1489 = phi float [ undef, %1436 ], [ %1483, %1448 ]
  %1490 = phi i64 [ 0, %1436 ], [ %1484, %1448 ]
  %1491 = phi float [ -1.000000e+00, %1436 ], [ %1483, %1448 ]
  %1492 = phi i32 [ %1433, %1436 ], [ %1482, %1448 ]
  %1493 = icmp eq i64 %1444, 0
  br i1 %1493, label %1509, label %1494

1494:                                             ; preds = %1487, %1494
  %1495 = phi i64 [ %1506, %1494 ], [ %1490, %1487 ]
  %1496 = phi float [ %1505, %1494 ], [ %1491, %1487 ]
  %1497 = phi i32 [ %1504, %1494 ], [ %1492, %1487 ]
  %1498 = phi i64 [ %1507, %1494 ], [ %1444, %1487 ]
  %1499 = getelementptr inbounds float, float* %189, i64 %1495
  %1500 = load float, float* %1499, align 4
  %1501 = call float @llvm.fabs.f32(float %1500) #5
  %1502 = fcmp ogt float %1501, %1496
  %1503 = trunc i64 %1495 to i32
  %1504 = select i1 %1502, i32 %1503, i32 %1497
  %1505 = select i1 %1502, float %1501, float %1496
  %1506 = add nuw nsw i64 %1495, 1
  %1507 = add i64 %1498, -1
  %1508 = icmp eq i64 %1507, 0
  br i1 %1508, label %1509, label %1494, !llvm.loop !27

1509:                                             ; preds = %1494, %1487
  %1510 = phi i32 [ %1488, %1487 ], [ %1504, %1494 ]
  %1511 = phi float [ %1489, %1487 ], [ %1505, %1494 ]
  %1512 = fcmp ugt float %1511, 0x400FFDF3C0000000
  br i1 %1512, label %1513, label %1752

1513:                                             ; preds = %1509
  %1514 = fadd float %1511, 0xC00FFDF3C0000000
  %1515 = fmul float %1514, 0x3FF6666680000000
  %1516 = add nsw i32 %1510, 1
  %1517 = sitofp i32 %1516 to float
  %1518 = fmul float %1511, %1517
  %1519 = fdiv float %1515, %1518
  %1520 = fsub float 0x3FEFAE1480000000, %1519
  call void @silk_bwexpander_FLP(float* %189, i32 %224, float %1520) #5
  %1521 = and i64 %981, 3
  %1522 = icmp ult i64 %982, 3
  br i1 %1522, label %1564, label %1523

1523:                                             ; preds = %1513
  %1524 = sub nsw i64 %981, %1521
  br label %1525

1525:                                             ; preds = %1525, %1523
  %1526 = phi i64 [ 0, %1523 ], [ %1561, %1525 ]
  %1527 = phi float [ -1.000000e+00, %1523 ], [ %1560, %1525 ]
  %1528 = phi i32 [ %1510, %1523 ], [ %1559, %1525 ]
  %1529 = phi i64 [ %1524, %1523 ], [ %1562, %1525 ]
  %1530 = getelementptr inbounds float, float* %189, i64 %1526
  %1531 = load float, float* %1530, align 4
  %1532 = call float @llvm.fabs.f32(float %1531) #5
  %1533 = fcmp ogt float %1532, %1527
  %1534 = trunc i64 %1526 to i32
  %1535 = select i1 %1533, i32 %1534, i32 %1528
  %1536 = select i1 %1533, float %1532, float %1527
  %1537 = or i64 %1526, 1
  %1538 = getelementptr inbounds float, float* %189, i64 %1537
  %1539 = load float, float* %1538, align 4
  %1540 = call float @llvm.fabs.f32(float %1539) #5
  %1541 = fcmp ogt float %1540, %1536
  %1542 = trunc i64 %1537 to i32
  %1543 = select i1 %1541, i32 %1542, i32 %1535
  %1544 = select i1 %1541, float %1540, float %1536
  %1545 = or i64 %1526, 2
  %1546 = getelementptr inbounds float, float* %189, i64 %1545
  %1547 = load float, float* %1546, align 4
  %1548 = call float @llvm.fabs.f32(float %1547) #5
  %1549 = fcmp ogt float %1548, %1544
  %1550 = trunc i64 %1545 to i32
  %1551 = select i1 %1549, i32 %1550, i32 %1543
  %1552 = select i1 %1549, float %1548, float %1544
  %1553 = or i64 %1526, 3
  %1554 = getelementptr inbounds float, float* %189, i64 %1553
  %1555 = load float, float* %1554, align 4
  %1556 = call float @llvm.fabs.f32(float %1555) #5
  %1557 = fcmp ogt float %1556, %1552
  %1558 = trunc i64 %1553 to i32
  %1559 = select i1 %1557, i32 %1558, i32 %1551
  %1560 = select i1 %1557, float %1556, float %1552
  %1561 = add nuw nsw i64 %1526, 4
  %1562 = add i64 %1529, -4
  %1563 = icmp eq i64 %1562, 0
  br i1 %1563, label %1564, label %1525

1564:                                             ; preds = %1525, %1513
  %1565 = phi i32 [ undef, %1513 ], [ %1559, %1525 ]
  %1566 = phi float [ undef, %1513 ], [ %1560, %1525 ]
  %1567 = phi i64 [ 0, %1513 ], [ %1561, %1525 ]
  %1568 = phi float [ -1.000000e+00, %1513 ], [ %1560, %1525 ]
  %1569 = phi i32 [ %1510, %1513 ], [ %1559, %1525 ]
  %1570 = icmp eq i64 %1521, 0
  br i1 %1570, label %1586, label %1571

1571:                                             ; preds = %1564, %1571
  %1572 = phi i64 [ %1583, %1571 ], [ %1567, %1564 ]
  %1573 = phi float [ %1582, %1571 ], [ %1568, %1564 ]
  %1574 = phi i32 [ %1581, %1571 ], [ %1569, %1564 ]
  %1575 = phi i64 [ %1584, %1571 ], [ %1521, %1564 ]
  %1576 = getelementptr inbounds float, float* %189, i64 %1572
  %1577 = load float, float* %1576, align 4
  %1578 = call float @llvm.fabs.f32(float %1577) #5
  %1579 = fcmp ogt float %1578, %1573
  %1580 = trunc i64 %1572 to i32
  %1581 = select i1 %1579, i32 %1580, i32 %1574
  %1582 = select i1 %1579, float %1578, float %1573
  %1583 = add nuw nsw i64 %1572, 1
  %1584 = add i64 %1575, -1
  %1585 = icmp eq i64 %1584, 0
  br i1 %1585, label %1586, label %1571, !llvm.loop !28

1586:                                             ; preds = %1571, %1564
  %1587 = phi i32 [ %1565, %1564 ], [ %1581, %1571 ]
  %1588 = phi float [ %1566, %1564 ], [ %1582, %1571 ]
  %1589 = fcmp ugt float %1588, 0x400FFDF3C0000000
  br i1 %1589, label %1590, label %1752

1590:                                             ; preds = %1586
  %1591 = fadd float %1588, 0xC00FFDF3C0000000
  %1592 = fmul float %1591, 1.500000e+00
  %1593 = add nsw i32 %1587, 1
  %1594 = sitofp i32 %1593 to float
  %1595 = fmul float %1588, %1594
  %1596 = fdiv float %1592, %1595
  %1597 = fsub float 0x3FEFAE1480000000, %1596
  call void @silk_bwexpander_FLP(float* %189, i32 %224, float %1597) #5
  %1598 = and i64 %981, 3
  %1599 = icmp ult i64 %982, 3
  br i1 %1599, label %1641, label %1600

1600:                                             ; preds = %1590
  %1601 = sub nsw i64 %981, %1598
  br label %1602

1602:                                             ; preds = %1602, %1600
  %1603 = phi i64 [ 0, %1600 ], [ %1638, %1602 ]
  %1604 = phi float [ -1.000000e+00, %1600 ], [ %1637, %1602 ]
  %1605 = phi i32 [ %1587, %1600 ], [ %1636, %1602 ]
  %1606 = phi i64 [ %1601, %1600 ], [ %1639, %1602 ]
  %1607 = getelementptr inbounds float, float* %189, i64 %1603
  %1608 = load float, float* %1607, align 4
  %1609 = call float @llvm.fabs.f32(float %1608) #5
  %1610 = fcmp ogt float %1609, %1604
  %1611 = trunc i64 %1603 to i32
  %1612 = select i1 %1610, i32 %1611, i32 %1605
  %1613 = select i1 %1610, float %1609, float %1604
  %1614 = or i64 %1603, 1
  %1615 = getelementptr inbounds float, float* %189, i64 %1614
  %1616 = load float, float* %1615, align 4
  %1617 = call float @llvm.fabs.f32(float %1616) #5
  %1618 = fcmp ogt float %1617, %1613
  %1619 = trunc i64 %1614 to i32
  %1620 = select i1 %1618, i32 %1619, i32 %1612
  %1621 = select i1 %1618, float %1617, float %1613
  %1622 = or i64 %1603, 2
  %1623 = getelementptr inbounds float, float* %189, i64 %1622
  %1624 = load float, float* %1623, align 4
  %1625 = call float @llvm.fabs.f32(float %1624) #5
  %1626 = fcmp ogt float %1625, %1621
  %1627 = trunc i64 %1622 to i32
  %1628 = select i1 %1626, i32 %1627, i32 %1620
  %1629 = select i1 %1626, float %1625, float %1621
  %1630 = or i64 %1603, 3
  %1631 = getelementptr inbounds float, float* %189, i64 %1630
  %1632 = load float, float* %1631, align 4
  %1633 = call float @llvm.fabs.f32(float %1632) #5
  %1634 = fcmp ogt float %1633, %1629
  %1635 = trunc i64 %1630 to i32
  %1636 = select i1 %1634, i32 %1635, i32 %1628
  %1637 = select i1 %1634, float %1633, float %1629
  %1638 = add nuw nsw i64 %1603, 4
  %1639 = add i64 %1606, -4
  %1640 = icmp eq i64 %1639, 0
  br i1 %1640, label %1641, label %1602

1641:                                             ; preds = %1602, %1590
  %1642 = phi i32 [ undef, %1590 ], [ %1636, %1602 ]
  %1643 = phi float [ undef, %1590 ], [ %1637, %1602 ]
  %1644 = phi i64 [ 0, %1590 ], [ %1638, %1602 ]
  %1645 = phi float [ -1.000000e+00, %1590 ], [ %1637, %1602 ]
  %1646 = phi i32 [ %1587, %1590 ], [ %1636, %1602 ]
  %1647 = icmp eq i64 %1598, 0
  br i1 %1647, label %1663, label %1648

1648:                                             ; preds = %1641, %1648
  %1649 = phi i64 [ %1660, %1648 ], [ %1644, %1641 ]
  %1650 = phi float [ %1659, %1648 ], [ %1645, %1641 ]
  %1651 = phi i32 [ %1658, %1648 ], [ %1646, %1641 ]
  %1652 = phi i64 [ %1661, %1648 ], [ %1598, %1641 ]
  %1653 = getelementptr inbounds float, float* %189, i64 %1649
  %1654 = load float, float* %1653, align 4
  %1655 = call float @llvm.fabs.f32(float %1654) #5
  %1656 = fcmp ogt float %1655, %1650
  %1657 = trunc i64 %1649 to i32
  %1658 = select i1 %1656, i32 %1657, i32 %1651
  %1659 = select i1 %1656, float %1655, float %1650
  %1660 = add nuw nsw i64 %1649, 1
  %1661 = add i64 %1652, -1
  %1662 = icmp eq i64 %1661, 0
  br i1 %1662, label %1663, label %1648, !llvm.loop !29

1663:                                             ; preds = %1648, %1641
  %1664 = phi i32 [ %1642, %1641 ], [ %1658, %1648 ]
  %1665 = phi float [ %1643, %1641 ], [ %1659, %1648 ]
  %1666 = fcmp ugt float %1665, 0x400FFDF3C0000000
  br i1 %1666, label %1667, label %1752

1667:                                             ; preds = %1663
  %1668 = fadd float %1665, 0xC00FFDF3C0000000
  %1669 = fmul float %1668, 0x3FF99999A0000000
  %1670 = add nsw i32 %1664, 1
  %1671 = sitofp i32 %1670 to float
  %1672 = fmul float %1665, %1671
  %1673 = fdiv float %1669, %1672
  %1674 = fsub float 0x3FEFAE1480000000, %1673
  call void @silk_bwexpander_FLP(float* %189, i32 %224, float %1674) #5
  %1675 = and i64 %981, 3
  %1676 = icmp ult i64 %982, 3
  br i1 %1676, label %1718, label %1677

1677:                                             ; preds = %1667
  %1678 = sub nsw i64 %981, %1675
  br label %1679

1679:                                             ; preds = %1679, %1677
  %1680 = phi i64 [ 0, %1677 ], [ %1715, %1679 ]
  %1681 = phi float [ -1.000000e+00, %1677 ], [ %1714, %1679 ]
  %1682 = phi i32 [ %1664, %1677 ], [ %1713, %1679 ]
  %1683 = phi i64 [ %1678, %1677 ], [ %1716, %1679 ]
  %1684 = getelementptr inbounds float, float* %189, i64 %1680
  %1685 = load float, float* %1684, align 4
  %1686 = call float @llvm.fabs.f32(float %1685) #5
  %1687 = fcmp ogt float %1686, %1681
  %1688 = trunc i64 %1680 to i32
  %1689 = select i1 %1687, i32 %1688, i32 %1682
  %1690 = select i1 %1687, float %1686, float %1681
  %1691 = or i64 %1680, 1
  %1692 = getelementptr inbounds float, float* %189, i64 %1691
  %1693 = load float, float* %1692, align 4
  %1694 = call float @llvm.fabs.f32(float %1693) #5
  %1695 = fcmp ogt float %1694, %1690
  %1696 = trunc i64 %1691 to i32
  %1697 = select i1 %1695, i32 %1696, i32 %1689
  %1698 = select i1 %1695, float %1694, float %1690
  %1699 = or i64 %1680, 2
  %1700 = getelementptr inbounds float, float* %189, i64 %1699
  %1701 = load float, float* %1700, align 4
  %1702 = call float @llvm.fabs.f32(float %1701) #5
  %1703 = fcmp ogt float %1702, %1698
  %1704 = trunc i64 %1699 to i32
  %1705 = select i1 %1703, i32 %1704, i32 %1697
  %1706 = select i1 %1703, float %1702, float %1698
  %1707 = or i64 %1680, 3
  %1708 = getelementptr inbounds float, float* %189, i64 %1707
  %1709 = load float, float* %1708, align 4
  %1710 = call float @llvm.fabs.f32(float %1709) #5
  %1711 = fcmp ogt float %1710, %1706
  %1712 = trunc i64 %1707 to i32
  %1713 = select i1 %1711, i32 %1712, i32 %1705
  %1714 = select i1 %1711, float %1710, float %1706
  %1715 = add nuw nsw i64 %1680, 4
  %1716 = add i64 %1683, -4
  %1717 = icmp eq i64 %1716, 0
  br i1 %1717, label %1718, label %1679

1718:                                             ; preds = %1679, %1667
  %1719 = phi i32 [ undef, %1667 ], [ %1713, %1679 ]
  %1720 = phi float [ undef, %1667 ], [ %1714, %1679 ]
  %1721 = phi i64 [ 0, %1667 ], [ %1715, %1679 ]
  %1722 = phi float [ -1.000000e+00, %1667 ], [ %1714, %1679 ]
  %1723 = phi i32 [ %1664, %1667 ], [ %1713, %1679 ]
  %1724 = icmp eq i64 %1675, 0
  br i1 %1724, label %1740, label %1725

1725:                                             ; preds = %1718, %1725
  %1726 = phi i64 [ %1737, %1725 ], [ %1721, %1718 ]
  %1727 = phi float [ %1736, %1725 ], [ %1722, %1718 ]
  %1728 = phi i32 [ %1735, %1725 ], [ %1723, %1718 ]
  %1729 = phi i64 [ %1738, %1725 ], [ %1675, %1718 ]
  %1730 = getelementptr inbounds float, float* %189, i64 %1726
  %1731 = load float, float* %1730, align 4
  %1732 = call float @llvm.fabs.f32(float %1731) #5
  %1733 = fcmp ogt float %1732, %1727
  %1734 = trunc i64 %1726 to i32
  %1735 = select i1 %1733, i32 %1734, i32 %1728
  %1736 = select i1 %1733, float %1732, float %1727
  %1737 = add nuw nsw i64 %1726, 1
  %1738 = add i64 %1729, -1
  %1739 = icmp eq i64 %1738, 0
  br i1 %1739, label %1740, label %1725, !llvm.loop !30

1740:                                             ; preds = %1725, %1718
  %1741 = phi i32 [ %1719, %1718 ], [ %1735, %1725 ]
  %1742 = phi float [ %1720, %1718 ], [ %1736, %1725 ]
  %1743 = fcmp ugt float %1742, 0x400FFDF3C0000000
  br i1 %1743, label %1744, label %1752

1744:                                             ; preds = %1740
  %1745 = fadd float %1742, 0xC00FFDF3C0000000
  %1746 = fmul float %1745, 0x3FFB333340000000
  %1747 = add nsw i32 %1741, 1
  %1748 = sitofp i32 %1747 to float
  %1749 = fmul float %1742, %1748
  %1750 = fdiv float %1746, %1749
  %1751 = fsub float 0x3FEFAE1480000000, %1750
  call void @silk_bwexpander_FLP(float* %189, i32 %224, float %1751) #5
  br label %1752

1752:                                             ; preds = %704, %493, %967, %831, %1744, %1740, %1663, %1586, %1509, %1432, %1355, %1278, %1202, %1125, %1060, %978, %274
  %1753 = add nuw nsw i64 %152, 1
  %1754 = load i32, i32* %134, align 4
  %1755 = sext i32 %1754 to i64
  %1756 = icmp slt i64 %1753, %1755
  br i1 %1756, label %151, label %1757

1757:                                             ; preds = %1752, %119
  %1758 = fmul float %120, 0xBFC47AE140000000
  %1759 = fpext float %1758 to double
  %1760 = call double @exp2(double %1759) #3
  %1761 = fptrunc double %1760 to float
  %1762 = load i32, i32* %134, align 4
  %1763 = icmp sgt i32 %1762, 0
  br i1 %1763, label %1764, label %1774

1764:                                             ; preds = %1757, %1764
  %1765 = phi i64 [ %1770, %1764 ], [ 0, %1757 ]
  %1766 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 0, i64 %1765
  %1767 = load float, float* %1766, align 4
  %1768 = fmul float %1767, %1761
  %1769 = fadd float %1768, 0x3FF3F92980000000
  store float %1769, float* %1766, align 4
  %1770 = add nuw nsw i64 %1765, 1
  %1771 = load i32, i32* %134, align 4
  %1772 = sext i32 %1771 to i64
  %1773 = icmp slt i64 %1770, %1772
  br i1 %1773, label %1764, label %1774

1774:                                             ; preds = %1764, %1757
  %1775 = phi i32 [ %1762, %1757 ], [ %1771, %1764 ]
  %1776 = load i32, i32* %20, align 8
  %1777 = sitofp i32 %1776 to float
  %1778 = fmul float %1777, 0x3F00000000000000
  %1779 = fadd float %1778, -1.000000e+00
  %1780 = fmul float %1779, 5.000000e-01
  %1781 = fadd float %1780, 1.000000e+00
  %1782 = fmul float %1781, 4.000000e+00
  %1783 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 7
  %1784 = load i32, i32* %1783, align 4
  %1785 = sitofp i32 %1784 to float
  %1786 = fmul float %1785, 3.906250e-03
  %1787 = fmul float %1786, %1782
  %1788 = load i8, i8* %56, align 1
  %1789 = icmp eq i8 %1788, 2
  br i1 %1789, label %1790, label %1823

1790:                                             ; preds = %1774
  %1791 = icmp sgt i32 %1775, 0
  br i1 %1791, label %1792, label %1817

1792:                                             ; preds = %1790
  %1793 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 19
  br label %1794

1794:                                             ; preds = %1792, %1794
  %1795 = phi i64 [ 0, %1792 ], [ %1810, %1794 ]
  %1796 = load i32, i32* %1793, align 8
  %1797 = sitofp i32 %1796 to float
  %1798 = fdiv float 0x3FC99999A0000000, %1797
  %1799 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 4, i64 %1795
  %1800 = load i32, i32* %1799, align 4
  %1801 = sitofp i32 %1800 to float
  %1802 = fdiv float 3.000000e+00, %1801
  %1803 = fadd float %1798, %1802
  %1804 = fadd float %1803, -1.000000e+00
  %1805 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 6, i64 %1795
  store float %1804, float* %1805, align 4
  %1806 = fsub float 1.000000e+00, %1803
  %1807 = fmul float %1787, %1803
  %1808 = fsub float %1806, %1807
  %1809 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 7, i64 %1795
  store float %1808, float* %1809, align 4
  %1810 = add nuw nsw i64 %1795, 1
  %1811 = load i32, i32* %134, align 4
  %1812 = sext i32 %1811 to i64
  %1813 = icmp slt i64 %1810, %1812
  br i1 %1813, label %1794, label %1814

1814:                                             ; preds = %1794
  %1815 = load i32, i32* %1783, align 4
  %1816 = sitofp i32 %1815 to float
  br label %1817

1817:                                             ; preds = %1814, %1790
  %1818 = phi float [ %1816, %1814 ], [ %1785, %1790 ]
  %1819 = phi i32 [ %1811, %1814 ], [ %1775, %1790 ]
  %1820 = fmul float %1818, 0x3FD0CCCCC0000000
  %1821 = fmul float %1820, 3.906250e-03
  %1822 = fsub float -2.500000e-01, %1821
  br label %1860

1823:                                             ; preds = %1774
  %1824 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 19
  %1825 = load i32, i32* %1824, align 8
  %1826 = sitofp i32 %1825 to float
  %1827 = fdiv float 0x3FF4CCCCC0000000, %1826
  %1828 = fadd float %1827, -1.000000e+00
  %1829 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 6
  %1830 = getelementptr inbounds [4 x float], [4 x float]* %1829, i64 0, i64 0
  store float %1828, float* %1830, align 4
  %1831 = fsub float 1.000000e+00, %1827
  %1832 = fmul float %1787, %1827
  %1833 = fmul float %1832, 0x3FE3333340000000
  %1834 = fsub float %1831, %1833
  %1835 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 7
  %1836 = getelementptr inbounds [4 x float], [4 x float]* %1835, i64 0, i64 0
  store float %1834, float* %1836, align 4
  %1837 = load i32, i32* %134, align 4
  %1838 = icmp sgt i32 %1837, 1
  br i1 %1838, label %1839, label %1860

1839:                                             ; preds = %1823
  %1840 = bitcast [4 x float]* %1829 to i32*
  %1841 = bitcast [4 x float]* %1835 to i32*
  %1842 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 6, i64 1
  store float %1828, float* %1842, align 4
  %1843 = load i32, i32* %1841, align 4
  %1844 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 7, i64 1
  %1845 = bitcast float* %1844 to i32*
  store i32 %1843, i32* %1845, align 4
  %1846 = load i32, i32* %134, align 4
  %1847 = icmp sgt i32 %1846, 2
  br i1 %1847, label %1848, label %1860

1848:                                             ; preds = %1839, %1848
  %1849 = phi i64 [ %1856, %1848 ], [ 2, %1839 ]
  %1850 = load i32, i32* %1840, align 4
  %1851 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 6, i64 %1849
  %1852 = bitcast float* %1851 to i32*
  store i32 %1850, i32* %1852, align 4
  %1853 = load i32, i32* %1841, align 4
  %1854 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 7, i64 %1849
  %1855 = bitcast float* %1854 to i32*
  store i32 %1853, i32* %1855, align 4
  %1856 = add nuw nsw i64 %1849, 1
  %1857 = load i32, i32* %134, align 4
  %1858 = sext i32 %1857 to i64
  %1859 = icmp slt i64 %1856, %1858
  br i1 %1859, label %1848, label %1860

1860:                                             ; preds = %1848, %1839, %1823, %1817
  %1861 = phi i32 [ %1819, %1817 ], [ %1837, %1823 ], [ %1846, %1839 ], [ %1857, %1848 ]
  %1862 = phi float [ %1822, %1817 ], [ -2.500000e-01, %1823 ], [ -2.500000e-01, %1839 ], [ -2.500000e-01, %1848 ]
  %1863 = load i8, i8* %56, align 1
  %1864 = icmp eq i8 %1863, 2
  br i1 %1864, label %1865, label %1878

1865:                                             ; preds = %1860
  %1866 = load float, float* %36, align 4
  %1867 = fsub float 1.000000e+00, %1866
  %1868 = load float, float* %28, align 4
  %1869 = fmul float %1867, %1868
  %1870 = fsub float 1.000000e+00, %1869
  %1871 = fmul float %1870, 0x3FC99999A0000000
  %1872 = fadd float %1871, 0x3FD3333340000000
  %1873 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 3
  %1874 = load float, float* %1873, align 4
  %1875 = call float @sqrtf(float %1874) #3
  %1876 = fmul float %1875, %1872
  %1877 = load i32, i32* %134, align 4
  br label %1878

1878:                                             ; preds = %1860, %1865
  %1879 = phi i32 [ %1877, %1865 ], [ %1861, %1860 ]
  %1880 = phi float [ %1876, %1865 ], [ 0.000000e+00, %1860 ]
  %1881 = icmp sgt i32 %1879, 0
  br i1 %1881, label %1882, label %1901

1882:                                             ; preds = %1878
  %1883 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 1, i32 1
  %1884 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 1, i32 2
  br label %1885

1885:                                             ; preds = %1882, %1885
  %1886 = phi i64 [ 0, %1882 ], [ %1897, %1885 ]
  %1887 = load float, float* %1883, align 4
  %1888 = fsub float %1880, %1887
  %1889 = fmul float %1888, 0x3FD99999A0000000
  %1890 = fadd float %1887, %1889
  store float %1890, float* %1883, align 4
  %1891 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 9, i64 %1886
  store float %1890, float* %1891, align 4
  %1892 = load float, float* %1884, align 4
  %1893 = fsub float %1862, %1892
  %1894 = fmul float %1893, 0x3FD99999A0000000
  %1895 = fadd float %1892, %1894
  store float %1895, float* %1884, align 4
  %1896 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 8, i64 %1886
  store float %1895, float* %1896, align 4
  %1897 = add nuw nsw i64 %1886, 1
  %1898 = load i32, i32* %134, align 4
  %1899 = sext i32 %1898 to i64
  %1900 = icmp slt i64 %1897, %1899
  br i1 %1900, label %1885, label %1901

1901:                                             ; preds = %1885, %1878
  call void @llvm.lifetime.end.p0i8(i64 100, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 100, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 960, i8* nonnull %8) #5
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare double @silk_energy_FLP(float*, i32) local_unnamed_addr #2

declare void @silk_apply_sine_window_FLP(float*, float*, i32, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @silk_warped_autocorrelation_FLP(float*, float*, float, i32, i32) local_unnamed_addr #2

declare void @silk_autocorrelation_FLP(float*, float*, i32, i32) local_unnamed_addr #2

declare float @silk_schur_FLP(float*, float*, i32) local_unnamed_addr #2

declare void @silk_k2a_FLP(float*, float*, i32) local_unnamed_addr #2

declare void @silk_bwexpander_FLP(float*, i32, float) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare double @exp(double) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare double @log10(double) local_unnamed_addr #3

declare double @exp2(double) local_unnamed_addr

declare float @sqrtf(float) local_unnamed_addr

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.isvectorized", i32 1}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !9, !5}
!9 = !{!"llvm.loop.unroll.runtime.disable"}
!10 = distinct !{!10, !9, !5}
!11 = distinct !{!11, !3}
!12 = distinct !{!12, !5}
!13 = distinct !{!13, !9, !5}
!14 = distinct !{!14, !5}
!15 = distinct !{!15, !5}
!16 = distinct !{!16, !9, !5}
!17 = distinct !{!17, !9, !5}
!18 = distinct !{!18, !5}
!19 = distinct !{!19, !3}
!20 = distinct !{!20, !9, !5}
!21 = distinct !{!21, !3}
!22 = distinct !{!22, !3}
!23 = distinct !{!23, !3}
!24 = distinct !{!24, !3}
!25 = distinct !{!25, !3}
!26 = distinct !{!26, !3}
!27 = distinct !{!27, !3}
!28 = distinct !{!28, !3}
!29 = distinct !{!29, !3}
!30 = distinct !{!30, !3}
