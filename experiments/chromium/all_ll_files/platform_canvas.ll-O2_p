; ModuleID = '../../skia/ext/platform_canvas.cc'
source_filename = "../../skia/ext/platform_canvas.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkBitmap = type { %class.sk_sp.8, %class.SkPixmap, %class.sk_sp.16 }
%class.sk_sp.8 = type { %class.SkPixelRef* }
%class.SkPixelRef = type opaque
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.9, i32, i32 }
%class.sk_sp.9 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.11" }
%"struct.std::__1::atomic.11" = type { %"struct.std::__1::__atomic_base.12" }
%"struct.std::__1::__atomic_base.12" = type { %"struct.std::__1::__atomic_base.13" }
%"struct.std::__1::__atomic_base.13" = type { %"struct.std::__1::__cxx_atomic_impl.14" }
%"struct.std::__1::__cxx_atomic_impl.14" = type { %"struct.std::__1::__cxx_atomic_base_impl.15" }
%"struct.std::__1::__cxx_atomic_base_impl.15" = type { i8 }
%struct.SkISize = type { i32, i32 }
%class.sk_sp.16 = type { %class.SkMipmap* }
%class.SkMipmap = type opaque
%class.SkCanvas = type { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp, [384 x i64], %class.sk_sp.0, %class.SkSurfaceProps, i32, %"class.std::__1::unique_ptr", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.2" }
%class.SkDeque = type { i8*, i8*, %"struct.SkDeque::Block"*, %"struct.SkDeque::Block"*, i64, i8*, i32, i32 }
%"struct.SkDeque::Block" = type opaque
%"class.SkCanvas::MCRec" = type opaque
%class.sk_sp = type { %class.SkMarkerStack* }
%class.SkMarkerStack = type opaque
%class.sk_sp.0 = type { %class.SkBaseDevice* }
%class.SkBaseDevice = type opaque
%class.SkSurfaceProps = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.SkRasterHandleAllocator* }
%class.SkRasterHandleAllocator = type { i32 (...)** }
%class.SkSurface_Base = type opaque
%struct.SkIRect = type { i32, i32, i32, i32 }
%struct.SkRect = type { float, float, float, float }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %class.SkGlyphRunBuilder* }
%class.SkGlyphRunBuilder = type opaque
%struct.SkIPoint = type { i32, i32 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.SkBitmap::Allocator" = type { %class.SkRefCnt.base, [4 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"class.std::__1::basic_ostream" = type opaque

@.str = private unnamed_addr constant [34 x i8] c"../../skia/ext/platform_canvas.cc\00", align 1
@.str.1 = private unnamed_addr constant [32 x i8] c"failureType != CRASH_ON_FAILURE\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4skia10ReadPixelsEP8SkCanvas(%class.SkBitmap* noalias sret, %class.SkCanvas*) local_unnamed_addr #0 {
  %3 = alloca %struct.SkImageInfo, align 8
  %4 = bitcast %class.SkBitmap* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 -86, i64 56, i1 false)
  tail call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* %0) #6
  %5 = bitcast %struct.SkImageInfo* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #6
  call void @_ZNK8SkCanvas9imageInfoEv(%struct.SkImageInfo* nonnull sret %3, %class.SkCanvas* %1) #6
  call void @_ZN8SkBitmap11allocPixelsERK11SkImageInfo(%class.SkBitmap* %0, %struct.SkImageInfo* nonnull dereferenceable(24) %3) #6
  %6 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %3, i64 0, i32 0, i32 0, i32 0
  %7 = load %class.SkColorSpace*, %class.SkColorSpace** %6, align 8
  %8 = icmp eq %class.SkColorSpace* %7, null
  br i1 %8, label %15, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = atomicrmw add i32* %10, i32 -1 acq_rel
  %12 = icmp eq i32 %11, 1
  br i1 %12, label %13, label %15

13:                                               ; preds = %9
  %14 = bitcast %class.SkColorSpace* %7 to i8*
  call void @_ZdlPv(i8* %14) #7
  br label %15

15:                                               ; preds = %2, %9, %13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #6
  %16 = call zeroext i1 @_ZN8SkCanvas10readPixelsERK8SkBitmapii(%class.SkCanvas* %1, %class.SkBitmap* dereferenceable(56) %0, i32 0, i32 0) #6
  br i1 %16, label %18, label %17

17:                                               ; preds = %15
  call void @_ZN8SkBitmap5resetEv(%class.SkBitmap* %0) #6
  br label %18

18:                                               ; preds = %15, %17
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN8SkBitmapC1Ev(%class.SkBitmap*) unnamed_addr #2

declare void @_ZN8SkBitmap11allocPixelsERK11SkImageInfo(%class.SkBitmap*, %struct.SkImageInfo* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZNK8SkCanvas9imageInfoEv(%struct.SkImageInfo* sret, %class.SkCanvas*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare zeroext i1 @_ZN8SkCanvas10readPixelsERK8SkBitmapii(%class.SkCanvas*, %class.SkBitmap* dereferenceable(56), i32, i32) local_unnamed_addr #2

declare void @_ZN8SkBitmap5resetEv(%class.SkBitmap*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN8SkBitmapD1Ev(%class.SkBitmap*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4skia17GetWritablePixelsEP8SkCanvasP8SkPixmap(%class.SkCanvas*, %class.SkPixmap*) local_unnamed_addr #0 {
  %3 = alloca %struct.SkImageInfo, align 8
  %4 = alloca i64, align 8
  %5 = icmp ne %class.SkCanvas* %0, null
  %6 = icmp ne %class.SkPixmap* %1, null
  %7 = and i1 %5, %6
  br i1 %7, label %8, label %28

8:                                                ; preds = %2
  %9 = bitcast %struct.SkImageInfo* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #6
  %10 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %3, i64 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 0, i64 24, i1 false) #6
  %11 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #6
  store i64 -6148914691236517206, i64* %4, align 8
  %12 = call i8* @_ZN8SkCanvas20accessTopLayerPixelsEP11SkImageInfoPmP8SkIPoint(%class.SkCanvas* nonnull %0, %struct.SkImageInfo* nonnull %3, i64* nonnull %4, %struct.SkIPoint* null) #6
  %13 = icmp eq i8* %12, null
  br i1 %13, label %14, label %15

14:                                               ; preds = %8
  call void @_ZN8SkPixmap5resetEv(%class.SkPixmap* nonnull %1) #6
  br label %17

15:                                               ; preds = %8
  %16 = load i64, i64* %4, align 8
  call void @_ZN8SkPixmap5resetERK11SkImageInfoPKvm(%class.SkPixmap* nonnull %1, %struct.SkImageInfo* nonnull dereferenceable(24) %3, i8* nonnull %12, i64 %16) #6
  br label %17

17:                                               ; preds = %15, %14
  %18 = phi i1 [ true, %15 ], [ false, %14 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #6
  %19 = load %class.SkColorSpace*, %class.SkColorSpace** %10, align 8
  %20 = icmp eq %class.SkColorSpace* %19, null
  br i1 %20, label %27, label %21

21:                                               ; preds = %17
  %22 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %19, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = atomicrmw add i32* %22, i32 -1 acq_rel
  %24 = icmp eq i32 %23, 1
  br i1 %24, label %25, label %27

25:                                               ; preds = %21
  %26 = bitcast %class.SkColorSpace* %19 to i8*
  call void @_ZdlPv(i8* %26) #7
  br label %27

27:                                               ; preds = %17, %21, %25
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #6
  br label %28

28:                                               ; preds = %2, %27
  %29 = phi i1 [ %18, %27 ], [ false, %2 ]
  ret i1 %29
}

declare i8* @_ZN8SkCanvas20accessTopLayerPixelsEP11SkImageInfoPmP8SkIPoint(%class.SkCanvas*, %struct.SkImageInfo*, i64*, %struct.SkIPoint*) local_unnamed_addr #2

declare void @_ZN8SkPixmap5resetEv(%class.SkPixmap*) local_unnamed_addr #2

declare void @_ZN8SkPixmap5resetERK11SkImageInfoPKvm(%class.SkPixmap*, %struct.SkImageInfo* dereferenceable(24), i8*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkCanvas* @_ZN4skia30CreatePlatformCanvasWithPixelsEiibPhNS_13OnFailureTypeE(i32, i32, i1 zeroext, i8*, i32) local_unnamed_addr #0 {
  %6 = alloca %class.SkBitmap, align 8
  %7 = alloca %struct.SkImageInfo, align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = bitcast %class.SkBitmap* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %9) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 56, i1 false)
  call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* nonnull %6) #6
  %10 = bitcast %struct.SkImageInfo* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #6
  %11 = zext i32 %1 to i64
  %12 = shl nuw i64 %11, 32
  %13 = zext i32 %0 to i64
  %14 = or i64 %12, %13
  %15 = select i1 %2, i64 4294967302, i64 8589934598
  %16 = bitcast %struct.SkImageInfo* %7 to i64*
  store i64 0, i64* %16, align 8, !alias.scope !2
  %17 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %7, i64 0, i32 0, i32 1
  %18 = bitcast i32* %17 to i64*
  store i64 %15, i64* %18, align 8, !alias.scope !2
  %19 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %7, i64 0, i32 1
  %20 = bitcast %struct.SkISize* %19 to i64*
  store i64 %14, i64* %20, align 8, !alias.scope !2
  %21 = call zeroext i1 @_ZN8SkBitmap7setInfoERK11SkImageInfom(%class.SkBitmap* nonnull %6, %struct.SkImageInfo* nonnull dereferenceable(24) %7, i64 0) #6
  %22 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %7, i64 0, i32 0, i32 0, i32 0
  %23 = load %class.SkColorSpace*, %class.SkColorSpace** %22, align 8
  %24 = icmp eq %class.SkColorSpace* %23, null
  br i1 %24, label %31, label %25

25:                                               ; preds = %5
  %26 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %23, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %27 = atomicrmw add i32* %26, i32 -1 acq_rel
  %28 = icmp eq i32 %27, 1
  br i1 %28, label %29, label %31

29:                                               ; preds = %25
  %30 = bitcast %class.SkColorSpace* %23 to i8*
  call void @_ZdlPv(i8* %30) #7
  br label %31

31:                                               ; preds = %29, %25, %5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #6
  %32 = icmp eq i8* %3, null
  br i1 %32, label %34, label %33

33:                                               ; preds = %31
  call void @_ZN8SkBitmap9setPixelsEPv(%class.SkBitmap* nonnull %6, i8* nonnull %3) #6
  br label %43

34:                                               ; preds = %31
  %35 = call zeroext i1 @_ZN8SkBitmap14tryAllocPixelsEPNS_9AllocatorE(%class.SkBitmap* nonnull %6, %"class.SkBitmap::Allocator"* null) #6
  br i1 %35, label %41, label %36

36:                                               ; preds = %34
  %37 = icmp eq i32 %4, 0
  br i1 %37, label %38, label %46

38:                                               ; preds = %36
  %39 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #6
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 56, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1, i64 0, i64 0)) #6
  %40 = call %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #6
  br label %46

41:                                               ; preds = %34
  br i1 %2, label %43, label %42

42:                                               ; preds = %41
  call void @_ZNK8SkBitmap10eraseColorEj(%class.SkBitmap* nonnull %6, i32 0) #6
  br label %43

43:                                               ; preds = %41, %42, %33
  %44 = call i8* @_Znwm(i64 3232) #7
  %45 = bitcast i8* %44 to %class.SkCanvas*
  call void @_ZN8SkCanvasC1ERK8SkBitmap(%class.SkCanvas* nonnull %45, %class.SkBitmap* nonnull dereferenceable(56) %6) #6
  br label %46

46:                                               ; preds = %38, %36, %43
  %47 = phi %class.SkCanvas* [ %45, %43 ], [ null, %36 ], [ null, %38 ]
  call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* nonnull %6) #6
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %9) #6
  ret %class.SkCanvas* %47
}

declare zeroext i1 @_ZN8SkBitmap7setInfoERK11SkImageInfom(%class.SkBitmap*, %struct.SkImageInfo* dereferenceable(24), i64) local_unnamed_addr #2

declare void @_ZN8SkBitmap9setPixelsEPv(%class.SkBitmap*, i8*) local_unnamed_addr #2

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #2

declare %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

declare zeroext i1 @_ZN8SkBitmap14tryAllocPixelsEPNS_9AllocatorE(%class.SkBitmap*, %"class.SkBitmap::Allocator"*) local_unnamed_addr #2

declare void @_ZNK8SkBitmap10eraseColorEj(%class.SkBitmap*, i32) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

declare void @_ZN8SkCanvasC1ERK8SkBitmap(%class.SkCanvas*, %class.SkBitmap* dereferenceable(56)) unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3, !5}
!3 = distinct !{!3, !4, !"_ZN11SkImageInfo4MakeE7SkISize11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE: argument 0"}
!4 = distinct !{!4, !"_ZN11SkImageInfo4MakeE7SkISize11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE"}
!5 = distinct !{!5, !6, !"_ZN11SkImageInfo7MakeN32Eii11SkAlphaType5sk_spI12SkColorSpaceE: argument 0"}
!6 = distinct !{!6, !"_ZN11SkImageInfo7MakeN32Eii11SkAlphaType5sk_spI12SkColorSpaceE"}
