; ModuleID = '../../third_party/webrtc/common_audio/signal_processing/filter_ar.c'
source_filename = "../../third_party/webrtc/common_audio/signal_processing/filter_ar.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind ssp uwtable
define hidden i64 @WebRtcSpl_FilterAR(i16* nocapture readonly, i64, i16* nocapture readonly, i64 returned, i16*, i64, i16*, i64, i16*, i16*, i64) local_unnamed_addr #0 {
  %12 = icmp eq i64 %3, 0
  br i1 %12, label %197, label %13

13:                                               ; preds = %11
  %14 = add i64 %5, -1
  %15 = getelementptr inbounds i16, i16* %4, i64 %14
  %16 = getelementptr inbounds i16, i16* %6, i64 %14
  %17 = getelementptr inbounds i16, i16* %0, i64 1
  %18 = add i64 %1, -2
  %19 = getelementptr inbounds i16, i16* %15, i64 -1
  %20 = getelementptr inbounds i16, i16* %16, i64 -1
  br label %21

21:                                               ; preds = %180, %13
  %22 = phi i64 [ %196, %180 ], [ 0, %13 ]
  %23 = phi i32 [ %194, %180 ], [ 0, %13 ]
  %24 = phi i16* [ %193, %180 ], [ %9, %13 ]
  %25 = phi i16* [ %189, %180 ], [ %8, %13 ]
  %26 = phi i16* [ %30, %180 ], [ %2, %13 ]
  %27 = phi i64 [ %36, %180 ], [ 0, %13 ]
  %28 = xor i64 %22, 1
  %29 = add i64 %28, %1
  %30 = getelementptr inbounds i16, i16* %26, i64 1
  %31 = load i16, i16* %26, align 2
  %32 = sext i16 %31 to i32
  %33 = shl nsw i32 %32, 12
  %34 = sext i32 %33 to i64
  %35 = icmp ult i64 %27, %1
  %36 = add nuw i64 %27, 1
  %37 = select i1 %35, i64 %36, i64 %1
  %38 = icmp ugt i64 %37, 1
  br i1 %38, label %39, label %73

39:                                               ; preds = %21
  %40 = sext i32 %23 to i64
  %41 = add i64 %37, -1
  %42 = and i64 %41, 1
  %43 = icmp eq i64 %37, 2
  br i1 %43, label %46, label %44

44:                                               ; preds = %39
  %45 = sub i64 %41, %42
  br label %105

46:                                               ; preds = %105, %39
  %47 = phi i64 [ undef, %39 ], [ %134, %105 ]
  %48 = phi i32 [ undef, %39 ], [ %139, %105 ]
  %49 = phi i64 [ %40, %39 ], [ %126, %105 ]
  %50 = phi i16* [ %17, %39 ], [ %140, %105 ]
  %51 = phi i32 [ 0, %39 ], [ %139, %105 ]
  %52 = phi i64 [ %34, %39 ], [ %134, %105 ]
  %53 = icmp eq i64 %42, 0
  br i1 %53, label %69, label %54

54:                                               ; preds = %46
  %55 = add i64 %49, -1
  %56 = load i16, i16* %50, align 2
  %57 = sext i16 %56 to i32
  %58 = getelementptr inbounds i16, i16* %9, i64 %55
  %59 = load i16, i16* %58, align 2
  %60 = sext i16 %59 to i32
  %61 = mul nsw i32 %60, %57
  %62 = sub nsw i32 %51, %61
  %63 = getelementptr inbounds i16, i16* %8, i64 %55
  %64 = load i16, i16* %63, align 2
  %65 = sext i16 %64 to i32
  %66 = mul nsw i32 %65, %57
  %67 = sext i32 %66 to i64
  %68 = sub nsw i64 %52, %67
  br label %69

69:                                               ; preds = %46, %54
  %70 = phi i64 [ %47, %46 ], [ %68, %54 ]
  %71 = phi i32 [ %48, %46 ], [ %62, %54 ]
  %72 = getelementptr i16, i16* %0, i64 %37
  br label %73

73:                                               ; preds = %69, %21
  %74 = phi i64 [ %34, %21 ], [ %70, %69 ]
  %75 = phi i32 [ 0, %21 ], [ %71, %69 ]
  %76 = phi i16* [ %17, %21 ], [ %72, %69 ]
  %77 = icmp ult i64 %36, %1
  br i1 %77, label %78, label %180

78:                                               ; preds = %73
  %79 = and i64 %29, 1
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %95, label %81

81:                                               ; preds = %78
  %82 = load i16, i16* %76, align 2
  %83 = sext i16 %82 to i32
  %84 = load i16, i16* %15, align 2
  %85 = sext i16 %84 to i32
  %86 = mul nsw i32 %85, %83
  %87 = sext i32 %86 to i64
  %88 = sub nsw i64 %74, %87
  %89 = getelementptr inbounds i16, i16* %76, i64 1
  %90 = load i16, i16* %16, align 2
  %91 = sext i16 %90 to i32
  %92 = mul nsw i32 %91, %83
  %93 = sub nsw i32 %75, %92
  %94 = add nuw i64 %27, 2
  br label %95

95:                                               ; preds = %81, %78
  %96 = phi i64 [ %88, %81 ], [ undef, %78 ]
  %97 = phi i32 [ %93, %81 ], [ undef, %78 ]
  %98 = phi i16* [ %20, %81 ], [ %16, %78 ]
  %99 = phi i16* [ %19, %81 ], [ %15, %78 ]
  %100 = phi i16* [ %89, %81 ], [ %76, %78 ]
  %101 = phi i64 [ %94, %81 ], [ %36, %78 ]
  %102 = phi i32 [ %93, %81 ], [ %75, %78 ]
  %103 = phi i64 [ %88, %81 ], [ %74, %78 ]
  %104 = icmp eq i64 %18, %22
  br i1 %104, label %180, label %143

105:                                              ; preds = %105, %44
  %106 = phi i64 [ %40, %44 ], [ %126, %105 ]
  %107 = phi i16* [ %17, %44 ], [ %140, %105 ]
  %108 = phi i32 [ 0, %44 ], [ %139, %105 ]
  %109 = phi i64 [ %34, %44 ], [ %134, %105 ]
  %110 = phi i64 [ %45, %44 ], [ %141, %105 ]
  %111 = add i64 %106, -1
  %112 = load i16, i16* %107, align 2
  %113 = sext i16 %112 to i32
  %114 = getelementptr inbounds i16, i16* %8, i64 %111
  %115 = load i16, i16* %114, align 2
  %116 = sext i16 %115 to i32
  %117 = mul nsw i32 %116, %113
  %118 = sext i32 %117 to i64
  %119 = sub nsw i64 %109, %118
  %120 = getelementptr inbounds i16, i16* %9, i64 %111
  %121 = load i16, i16* %120, align 2
  %122 = sext i16 %121 to i32
  %123 = mul nsw i32 %122, %113
  %124 = sub nsw i32 %108, %123
  %125 = getelementptr inbounds i16, i16* %107, i64 1
  %126 = add i64 %106, -2
  %127 = load i16, i16* %125, align 2
  %128 = sext i16 %127 to i32
  %129 = getelementptr inbounds i16, i16* %8, i64 %126
  %130 = load i16, i16* %129, align 2
  %131 = sext i16 %130 to i32
  %132 = mul nsw i32 %131, %128
  %133 = sext i32 %132 to i64
  %134 = sub nsw i64 %119, %133
  %135 = getelementptr inbounds i16, i16* %9, i64 %126
  %136 = load i16, i16* %135, align 2
  %137 = sext i16 %136 to i32
  %138 = mul nsw i32 %137, %128
  %139 = sub nsw i32 %124, %138
  %140 = getelementptr inbounds i16, i16* %107, i64 2
  %141 = add i64 %110, -2
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %46, label %105

143:                                              ; preds = %95, %143
  %144 = phi i16* [ %173, %143 ], [ %98, %95 ]
  %145 = phi i16* [ %166, %143 ], [ %99, %95 ]
  %146 = phi i16* [ %172, %143 ], [ %100, %95 ]
  %147 = phi i64 [ %178, %143 ], [ %101, %95 ]
  %148 = phi i32 [ %177, %143 ], [ %102, %95 ]
  %149 = phi i64 [ %171, %143 ], [ %103, %95 ]
  %150 = load i16, i16* %146, align 2
  %151 = sext i16 %150 to i32
  %152 = getelementptr inbounds i16, i16* %145, i64 -1
  %153 = load i16, i16* %145, align 2
  %154 = sext i16 %153 to i32
  %155 = mul nsw i32 %154, %151
  %156 = sext i32 %155 to i64
  %157 = sub nsw i64 %149, %156
  %158 = getelementptr inbounds i16, i16* %146, i64 1
  %159 = getelementptr inbounds i16, i16* %144, i64 -1
  %160 = load i16, i16* %144, align 2
  %161 = sext i16 %160 to i32
  %162 = mul nsw i32 %161, %151
  %163 = sub nsw i32 %148, %162
  %164 = load i16, i16* %158, align 2
  %165 = sext i16 %164 to i32
  %166 = getelementptr inbounds i16, i16* %145, i64 -2
  %167 = load i16, i16* %152, align 2
  %168 = sext i16 %167 to i32
  %169 = mul nsw i32 %168, %165
  %170 = sext i32 %169 to i64
  %171 = sub nsw i64 %157, %170
  %172 = getelementptr inbounds i16, i16* %146, i64 2
  %173 = getelementptr inbounds i16, i16* %144, i64 -2
  %174 = load i16, i16* %159, align 2
  %175 = sext i16 %174 to i32
  %176 = mul nsw i32 %175, %165
  %177 = sub nsw i32 %163, %176
  %178 = add nuw i64 %147, 2
  %179 = icmp eq i64 %178, %1
  br i1 %179, label %180, label %143

180:                                              ; preds = %95, %143, %73
  %181 = phi i64 [ %74, %73 ], [ %96, %95 ], [ %171, %143 ]
  %182 = phi i32 [ %75, %73 ], [ %97, %95 ], [ %177, %143 ]
  %183 = ashr i32 %182, 12
  %184 = sext i32 %183 to i64
  %185 = add nsw i64 %181, %184
  %186 = add nsw i64 %185, 2048
  %187 = lshr i64 %186, 12
  %188 = trunc i64 %187 to i16
  store i16 %188, i16* %25, align 2
  %189 = getelementptr inbounds i16, i16* %25, i64 1
  %190 = and i64 %186, 61440
  %191 = sub i64 %185, %190
  %192 = trunc i64 %191 to i16
  %193 = getelementptr inbounds i16, i16* %24, i64 1
  store i16 %192, i16* %24, align 2
  %194 = add i32 %23, 1
  %195 = icmp eq i64 %36, %3
  %196 = add i64 %22, 1
  br i1 %195, label %197, label %21

197:                                              ; preds = %180, %11
  %198 = icmp ugt i64 %5, %3
  br i1 %198, label %199, label %334

199:                                              ; preds = %197
  %200 = sub i64 %5, %3
  %201 = icmp eq i64 %200, 0
  br i1 %201, label %336, label %202

202:                                              ; preds = %199
  %203 = icmp ult i64 %200, 16
  br i1 %203, label %204, label %223

204:                                              ; preds = %332, %223, %202
  %205 = phi i64 [ 0, %223 ], [ 0, %202 ], [ %250, %332 ]
  %206 = sub i64 %5, %3
  %207 = xor i64 %205, -1
  %208 = add i64 %207, %5
  %209 = and i64 %206, 1
  %210 = icmp eq i64 %209, 0
  br i1 %210, label %220, label %211

211:                                              ; preds = %204
  %212 = add i64 %205, %3
  %213 = getelementptr inbounds i16, i16* %4, i64 %212
  %214 = load i16, i16* %213, align 2
  %215 = getelementptr inbounds i16, i16* %4, i64 %205
  store i16 %214, i16* %215, align 2
  %216 = getelementptr inbounds i16, i16* %6, i64 %212
  %217 = load i16, i16* %216, align 2
  %218 = getelementptr inbounds i16, i16* %6, i64 %205
  store i16 %217, i16* %218, align 2
  %219 = or i64 %205, 1
  br label %220

220:                                              ; preds = %204, %211
  %221 = phi i64 [ %205, %204 ], [ %219, %211 ]
  %222 = icmp eq i64 %208, %3
  br i1 %222, label %336, label %468

223:                                              ; preds = %202
  %224 = getelementptr i16, i16* %4, i64 %200
  %225 = getelementptr i16, i16* %6, i64 %200
  %226 = getelementptr i16, i16* %4, i64 %3
  %227 = getelementptr i16, i16* %4, i64 %5
  %228 = getelementptr i16, i16* %6, i64 %3
  %229 = getelementptr i16, i16* %6, i64 %5
  %230 = icmp ugt i16* %225, %4
  %231 = icmp ugt i16* %224, %6
  %232 = and i1 %230, %231
  %233 = icmp ugt i16* %227, %4
  %234 = icmp ult i16* %226, %224
  %235 = and i1 %233, %234
  %236 = or i1 %232, %235
  %237 = icmp ugt i16* %229, %4
  %238 = icmp ult i16* %228, %224
  %239 = and i1 %237, %238
  %240 = or i1 %236, %239
  %241 = icmp ugt i16* %227, %6
  %242 = icmp ult i16* %226, %225
  %243 = and i1 %241, %242
  %244 = or i1 %240, %243
  %245 = icmp ugt i16* %229, %6
  %246 = icmp ult i16* %228, %225
  %247 = and i1 %245, %246
  %248 = or i1 %244, %247
  br i1 %248, label %204, label %249

249:                                              ; preds = %223
  %250 = and i64 %200, -16
  %251 = add i64 %250, -16
  %252 = lshr exact i64 %251, 4
  %253 = add nuw nsw i64 %252, 1
  %254 = and i64 %253, 1
  %255 = icmp eq i64 %251, 0
  br i1 %255, label %307, label %256

256:                                              ; preds = %249
  %257 = sub nuw nsw i64 %253, %254
  br label %258

258:                                              ; preds = %258, %256
  %259 = phi i64 [ 0, %256 ], [ %304, %258 ]
  %260 = phi i64 [ %257, %256 ], [ %305, %258 ]
  %261 = add i64 %259, %3
  %262 = getelementptr inbounds i16, i16* %4, i64 %261
  %263 = bitcast i16* %262 to <8 x i16>*
  %264 = load <8 x i16>, <8 x i16>* %263, align 2, !alias.scope !2
  %265 = getelementptr inbounds i16, i16* %262, i64 8
  %266 = bitcast i16* %265 to <8 x i16>*
  %267 = load <8 x i16>, <8 x i16>* %266, align 2, !alias.scope !2
  %268 = getelementptr inbounds i16, i16* %4, i64 %259
  %269 = bitcast i16* %268 to <8 x i16>*
  store <8 x i16> %264, <8 x i16>* %269, align 2, !alias.scope !5, !noalias !7
  %270 = getelementptr inbounds i16, i16* %268, i64 8
  %271 = bitcast i16* %270 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %271, align 2, !alias.scope !5, !noalias !7
  %272 = getelementptr inbounds i16, i16* %6, i64 %261
  %273 = bitcast i16* %272 to <8 x i16>*
  %274 = load <8 x i16>, <8 x i16>* %273, align 2, !alias.scope !10
  %275 = getelementptr inbounds i16, i16* %272, i64 8
  %276 = bitcast i16* %275 to <8 x i16>*
  %277 = load <8 x i16>, <8 x i16>* %276, align 2, !alias.scope !10
  %278 = getelementptr inbounds i16, i16* %6, i64 %259
  %279 = bitcast i16* %278 to <8 x i16>*
  store <8 x i16> %274, <8 x i16>* %279, align 2, !alias.scope !11, !noalias !12
  %280 = getelementptr inbounds i16, i16* %278, i64 8
  %281 = bitcast i16* %280 to <8 x i16>*
  store <8 x i16> %277, <8 x i16>* %281, align 2, !alias.scope !11, !noalias !12
  %282 = or i64 %259, 16
  %283 = add i64 %282, %3
  %284 = getelementptr inbounds i16, i16* %4, i64 %283
  %285 = bitcast i16* %284 to <8 x i16>*
  %286 = load <8 x i16>, <8 x i16>* %285, align 2, !alias.scope !2
  %287 = getelementptr inbounds i16, i16* %284, i64 8
  %288 = bitcast i16* %287 to <8 x i16>*
  %289 = load <8 x i16>, <8 x i16>* %288, align 2, !alias.scope !2
  %290 = getelementptr inbounds i16, i16* %4, i64 %282
  %291 = bitcast i16* %290 to <8 x i16>*
  store <8 x i16> %286, <8 x i16>* %291, align 2, !alias.scope !5, !noalias !7
  %292 = getelementptr inbounds i16, i16* %290, i64 8
  %293 = bitcast i16* %292 to <8 x i16>*
  store <8 x i16> %289, <8 x i16>* %293, align 2, !alias.scope !5, !noalias !7
  %294 = getelementptr inbounds i16, i16* %6, i64 %283
  %295 = bitcast i16* %294 to <8 x i16>*
  %296 = load <8 x i16>, <8 x i16>* %295, align 2, !alias.scope !10
  %297 = getelementptr inbounds i16, i16* %294, i64 8
  %298 = bitcast i16* %297 to <8 x i16>*
  %299 = load <8 x i16>, <8 x i16>* %298, align 2, !alias.scope !10
  %300 = getelementptr inbounds i16, i16* %6, i64 %282
  %301 = bitcast i16* %300 to <8 x i16>*
  store <8 x i16> %296, <8 x i16>* %301, align 2, !alias.scope !11, !noalias !12
  %302 = getelementptr inbounds i16, i16* %300, i64 8
  %303 = bitcast i16* %302 to <8 x i16>*
  store <8 x i16> %299, <8 x i16>* %303, align 2, !alias.scope !11, !noalias !12
  %304 = add i64 %259, 32
  %305 = add i64 %260, -2
  %306 = icmp eq i64 %305, 0
  br i1 %306, label %307, label %258, !llvm.loop !13

307:                                              ; preds = %258, %249
  %308 = phi i64 [ 0, %249 ], [ %304, %258 ]
  %309 = icmp eq i64 %254, 0
  br i1 %309, label %332, label %310

310:                                              ; preds = %307
  %311 = add i64 %308, %3
  %312 = getelementptr inbounds i16, i16* %4, i64 %311
  %313 = bitcast i16* %312 to <8 x i16>*
  %314 = load <8 x i16>, <8 x i16>* %313, align 2, !alias.scope !2
  %315 = getelementptr inbounds i16, i16* %312, i64 8
  %316 = bitcast i16* %315 to <8 x i16>*
  %317 = load <8 x i16>, <8 x i16>* %316, align 2, !alias.scope !2
  %318 = getelementptr inbounds i16, i16* %4, i64 %308
  %319 = bitcast i16* %318 to <8 x i16>*
  store <8 x i16> %314, <8 x i16>* %319, align 2, !alias.scope !5, !noalias !7
  %320 = getelementptr inbounds i16, i16* %318, i64 8
  %321 = bitcast i16* %320 to <8 x i16>*
  store <8 x i16> %317, <8 x i16>* %321, align 2, !alias.scope !5, !noalias !7
  %322 = getelementptr inbounds i16, i16* %6, i64 %311
  %323 = bitcast i16* %322 to <8 x i16>*
  %324 = load <8 x i16>, <8 x i16>* %323, align 2, !alias.scope !10
  %325 = getelementptr inbounds i16, i16* %322, i64 8
  %326 = bitcast i16* %325 to <8 x i16>*
  %327 = load <8 x i16>, <8 x i16>* %326, align 2, !alias.scope !10
  %328 = getelementptr inbounds i16, i16* %6, i64 %308
  %329 = bitcast i16* %328 to <8 x i16>*
  store <8 x i16> %324, <8 x i16>* %329, align 2, !alias.scope !11, !noalias !12
  %330 = getelementptr inbounds i16, i16* %328, i64 8
  %331 = bitcast i16* %330 to <8 x i16>*
  store <8 x i16> %327, <8 x i16>* %331, align 2, !alias.scope !11, !noalias !12
  br label %332

332:                                              ; preds = %307, %310
  %333 = icmp eq i64 %200, %250
  br i1 %333, label %336, label %204

334:                                              ; preds = %197
  %335 = add i64 %1, -1
  tail call void @WebRtcSpl_CopyFromEndW16(i16* %8, i64 %3, i64 %335, i16* %4) #2
  tail call void @WebRtcSpl_CopyFromEndW16(i16* %9, i64 %3, i64 %335, i16* %6) #2
  br label %506

336:                                              ; preds = %220, %468, %332, %199
  br i1 %12, label %506, label %337

337:                                              ; preds = %336
  %338 = icmp ult i64 %3, 16
  br i1 %338, label %339, label %357

339:                                              ; preds = %466, %357, %337
  %340 = phi i64 [ 0, %357 ], [ 0, %337 ], [ %384, %466 ]
  %341 = xor i64 %340, -1
  %342 = and i64 %3, 1
  %343 = icmp eq i64 %342, 0
  br i1 %343, label %353, label %344

344:                                              ; preds = %339
  %345 = getelementptr inbounds i16, i16* %8, i64 %340
  %346 = load i16, i16* %345, align 2
  %347 = add i64 %340, %200
  %348 = getelementptr inbounds i16, i16* %4, i64 %347
  store i16 %346, i16* %348, align 2
  %349 = getelementptr inbounds i16, i16* %9, i64 %340
  %350 = load i16, i16* %349, align 2
  %351 = getelementptr inbounds i16, i16* %6, i64 %347
  store i16 %350, i16* %351, align 2
  %352 = or i64 %340, 1
  br label %353

353:                                              ; preds = %339, %344
  %354 = phi i64 [ %340, %339 ], [ %352, %344 ]
  %355 = sub i64 0, %3
  %356 = icmp eq i64 %341, %355
  br i1 %356, label %506, label %487

357:                                              ; preds = %337
  %358 = getelementptr i16, i16* %4, i64 %200
  %359 = getelementptr i16, i16* %4, i64 %5
  %360 = getelementptr i16, i16* %6, i64 %200
  %361 = getelementptr i16, i16* %6, i64 %5
  %362 = getelementptr i16, i16* %8, i64 %3
  %363 = getelementptr i16, i16* %9, i64 %3
  %364 = icmp ult i16* %358, %361
  %365 = icmp ult i16* %360, %359
  %366 = and i1 %364, %365
  %367 = icmp ult i16* %358, %362
  %368 = icmp ugt i16* %359, %8
  %369 = and i1 %367, %368
  %370 = or i1 %366, %369
  %371 = icmp ult i16* %358, %363
  %372 = icmp ugt i16* %359, %9
  %373 = and i1 %371, %372
  %374 = or i1 %370, %373
  %375 = icmp ult i16* %360, %362
  %376 = icmp ugt i16* %361, %8
  %377 = and i1 %375, %376
  %378 = or i1 %374, %377
  %379 = icmp ult i16* %360, %363
  %380 = icmp ugt i16* %361, %9
  %381 = and i1 %379, %380
  %382 = or i1 %378, %381
  br i1 %382, label %339, label %383

383:                                              ; preds = %357
  %384 = and i64 %3, -16
  %385 = add i64 %384, -16
  %386 = lshr exact i64 %385, 4
  %387 = add nuw nsw i64 %386, 1
  %388 = and i64 %387, 1
  %389 = icmp eq i64 %385, 0
  br i1 %389, label %441, label %390

390:                                              ; preds = %383
  %391 = sub nuw nsw i64 %387, %388
  br label %392

392:                                              ; preds = %392, %390
  %393 = phi i64 [ 0, %390 ], [ %438, %392 ]
  %394 = phi i64 [ %391, %390 ], [ %439, %392 ]
  %395 = getelementptr inbounds i16, i16* %8, i64 %393
  %396 = bitcast i16* %395 to <8 x i16>*
  %397 = load <8 x i16>, <8 x i16>* %396, align 2, !alias.scope !15
  %398 = getelementptr inbounds i16, i16* %395, i64 8
  %399 = bitcast i16* %398 to <8 x i16>*
  %400 = load <8 x i16>, <8 x i16>* %399, align 2, !alias.scope !15
  %401 = add i64 %393, %200
  %402 = getelementptr inbounds i16, i16* %4, i64 %401
  %403 = bitcast i16* %402 to <8 x i16>*
  store <8 x i16> %397, <8 x i16>* %403, align 2, !alias.scope !18, !noalias !20
  %404 = getelementptr inbounds i16, i16* %402, i64 8
  %405 = bitcast i16* %404 to <8 x i16>*
  store <8 x i16> %400, <8 x i16>* %405, align 2, !alias.scope !18, !noalias !20
  %406 = getelementptr inbounds i16, i16* %9, i64 %393
  %407 = bitcast i16* %406 to <8 x i16>*
  %408 = load <8 x i16>, <8 x i16>* %407, align 2, !alias.scope !23
  %409 = getelementptr inbounds i16, i16* %406, i64 8
  %410 = bitcast i16* %409 to <8 x i16>*
  %411 = load <8 x i16>, <8 x i16>* %410, align 2, !alias.scope !23
  %412 = getelementptr inbounds i16, i16* %6, i64 %401
  %413 = bitcast i16* %412 to <8 x i16>*
  store <8 x i16> %408, <8 x i16>* %413, align 2, !alias.scope !24, !noalias !25
  %414 = getelementptr inbounds i16, i16* %412, i64 8
  %415 = bitcast i16* %414 to <8 x i16>*
  store <8 x i16> %411, <8 x i16>* %415, align 2, !alias.scope !24, !noalias !25
  %416 = or i64 %393, 16
  %417 = getelementptr inbounds i16, i16* %8, i64 %416
  %418 = bitcast i16* %417 to <8 x i16>*
  %419 = load <8 x i16>, <8 x i16>* %418, align 2, !alias.scope !15
  %420 = getelementptr inbounds i16, i16* %417, i64 8
  %421 = bitcast i16* %420 to <8 x i16>*
  %422 = load <8 x i16>, <8 x i16>* %421, align 2, !alias.scope !15
  %423 = add i64 %416, %200
  %424 = getelementptr inbounds i16, i16* %4, i64 %423
  %425 = bitcast i16* %424 to <8 x i16>*
  store <8 x i16> %419, <8 x i16>* %425, align 2, !alias.scope !18, !noalias !20
  %426 = getelementptr inbounds i16, i16* %424, i64 8
  %427 = bitcast i16* %426 to <8 x i16>*
  store <8 x i16> %422, <8 x i16>* %427, align 2, !alias.scope !18, !noalias !20
  %428 = getelementptr inbounds i16, i16* %9, i64 %416
  %429 = bitcast i16* %428 to <8 x i16>*
  %430 = load <8 x i16>, <8 x i16>* %429, align 2, !alias.scope !23
  %431 = getelementptr inbounds i16, i16* %428, i64 8
  %432 = bitcast i16* %431 to <8 x i16>*
  %433 = load <8 x i16>, <8 x i16>* %432, align 2, !alias.scope !23
  %434 = getelementptr inbounds i16, i16* %6, i64 %423
  %435 = bitcast i16* %434 to <8 x i16>*
  store <8 x i16> %430, <8 x i16>* %435, align 2, !alias.scope !24, !noalias !25
  %436 = getelementptr inbounds i16, i16* %434, i64 8
  %437 = bitcast i16* %436 to <8 x i16>*
  store <8 x i16> %433, <8 x i16>* %437, align 2, !alias.scope !24, !noalias !25
  %438 = add i64 %393, 32
  %439 = add i64 %394, -2
  %440 = icmp eq i64 %439, 0
  br i1 %440, label %441, label %392, !llvm.loop !26

441:                                              ; preds = %392, %383
  %442 = phi i64 [ 0, %383 ], [ %438, %392 ]
  %443 = icmp eq i64 %388, 0
  br i1 %443, label %466, label %444

444:                                              ; preds = %441
  %445 = getelementptr inbounds i16, i16* %8, i64 %442
  %446 = bitcast i16* %445 to <8 x i16>*
  %447 = load <8 x i16>, <8 x i16>* %446, align 2, !alias.scope !15
  %448 = getelementptr inbounds i16, i16* %445, i64 8
  %449 = bitcast i16* %448 to <8 x i16>*
  %450 = load <8 x i16>, <8 x i16>* %449, align 2, !alias.scope !15
  %451 = add i64 %442, %200
  %452 = getelementptr inbounds i16, i16* %4, i64 %451
  %453 = bitcast i16* %452 to <8 x i16>*
  store <8 x i16> %447, <8 x i16>* %453, align 2, !alias.scope !18, !noalias !20
  %454 = getelementptr inbounds i16, i16* %452, i64 8
  %455 = bitcast i16* %454 to <8 x i16>*
  store <8 x i16> %450, <8 x i16>* %455, align 2, !alias.scope !18, !noalias !20
  %456 = getelementptr inbounds i16, i16* %9, i64 %442
  %457 = bitcast i16* %456 to <8 x i16>*
  %458 = load <8 x i16>, <8 x i16>* %457, align 2, !alias.scope !23
  %459 = getelementptr inbounds i16, i16* %456, i64 8
  %460 = bitcast i16* %459 to <8 x i16>*
  %461 = load <8 x i16>, <8 x i16>* %460, align 2, !alias.scope !23
  %462 = getelementptr inbounds i16, i16* %6, i64 %451
  %463 = bitcast i16* %462 to <8 x i16>*
  store <8 x i16> %458, <8 x i16>* %463, align 2, !alias.scope !24, !noalias !25
  %464 = getelementptr inbounds i16, i16* %462, i64 8
  %465 = bitcast i16* %464 to <8 x i16>*
  store <8 x i16> %461, <8 x i16>* %465, align 2, !alias.scope !24, !noalias !25
  br label %466

466:                                              ; preds = %441, %444
  %467 = icmp eq i64 %384, %3
  br i1 %467, label %506, label %339

468:                                              ; preds = %220, %468
  %469 = phi i64 [ %485, %468 ], [ %221, %220 ]
  %470 = add i64 %469, %3
  %471 = getelementptr inbounds i16, i16* %4, i64 %470
  %472 = load i16, i16* %471, align 2
  %473 = getelementptr inbounds i16, i16* %4, i64 %469
  store i16 %472, i16* %473, align 2
  %474 = getelementptr inbounds i16, i16* %6, i64 %470
  %475 = load i16, i16* %474, align 2
  %476 = getelementptr inbounds i16, i16* %6, i64 %469
  store i16 %475, i16* %476, align 2
  %477 = add nuw i64 %469, 1
  %478 = add i64 %477, %3
  %479 = getelementptr inbounds i16, i16* %4, i64 %478
  %480 = load i16, i16* %479, align 2
  %481 = getelementptr inbounds i16, i16* %4, i64 %477
  store i16 %480, i16* %481, align 2
  %482 = getelementptr inbounds i16, i16* %6, i64 %478
  %483 = load i16, i16* %482, align 2
  %484 = getelementptr inbounds i16, i16* %6, i64 %477
  store i16 %483, i16* %484, align 2
  %485 = add nuw i64 %469, 2
  %486 = icmp eq i64 %485, %200
  br i1 %486, label %336, label %468, !llvm.loop !27

487:                                              ; preds = %353, %487
  %488 = phi i64 [ %504, %487 ], [ %354, %353 ]
  %489 = getelementptr inbounds i16, i16* %8, i64 %488
  %490 = load i16, i16* %489, align 2
  %491 = add i64 %488, %200
  %492 = getelementptr inbounds i16, i16* %4, i64 %491
  store i16 %490, i16* %492, align 2
  %493 = getelementptr inbounds i16, i16* %9, i64 %488
  %494 = load i16, i16* %493, align 2
  %495 = getelementptr inbounds i16, i16* %6, i64 %491
  store i16 %494, i16* %495, align 2
  %496 = add nuw i64 %488, 1
  %497 = getelementptr inbounds i16, i16* %8, i64 %496
  %498 = load i16, i16* %497, align 2
  %499 = add i64 %496, %200
  %500 = getelementptr inbounds i16, i16* %4, i64 %499
  store i16 %498, i16* %500, align 2
  %501 = getelementptr inbounds i16, i16* %9, i64 %496
  %502 = load i16, i16* %501, align 2
  %503 = getelementptr inbounds i16, i16* %6, i64 %499
  store i16 %502, i16* %503, align 2
  %504 = add nuw i64 %488, 2
  %505 = icmp eq i64 %504, %3
  br i1 %505, label %506, label %487, !llvm.loop !28

506:                                              ; preds = %353, %487, %466, %336, %334
  ret i64 %3
}

declare void @WebRtcSpl_CopyFromEndW16(i16*, i64, i64, i16*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = !{!8, !3, !9}
!8 = distinct !{!8, !4}
!9 = distinct !{!9, !4}
!10 = !{!9}
!11 = !{!8}
!12 = !{!3, !9}
!13 = distinct !{!13, !14}
!14 = !{!"llvm.loop.isvectorized", i32 1}
!15 = !{!16}
!16 = distinct !{!16, !17}
!17 = distinct !{!17, !"LVerDomain"}
!18 = !{!19}
!19 = distinct !{!19, !17}
!20 = !{!21, !16, !22}
!21 = distinct !{!21, !17}
!22 = distinct !{!22, !17}
!23 = !{!22}
!24 = !{!21}
!25 = !{!16, !22}
!26 = distinct !{!26, !14}
!27 = distinct !{!27, !14}
!28 = distinct !{!28, !14}
