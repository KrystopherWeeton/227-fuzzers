; ModuleID = '../../third_party/skia/src/core/SkCompressedDataUtils.cpp'
source_filename = "../../third_party/skia/src/core/SkCompressedDataUtils.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.sk_sp.8 = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt.9, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt.9 = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.SkBitmap = type { %class.sk_sp, %class.SkPixmap, %class.sk_sp.7 }
%class.sk_sp = type { %class.SkPixelRef* }
%class.SkPixelRef = type opaque
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.0, i32, i32 }
%class.sk_sp.0 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.2" }
%"struct.std::__1::atomic.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl.5" }
%"struct.std::__1::__cxx_atomic_impl.5" = type { %"struct.std::__1::__cxx_atomic_base_impl.6" }
%"struct.std::__1::__cxx_atomic_base_impl.6" = type { i8 }
%struct.SkISize = type { i32, i32 }
%class.sk_sp.7 = type { %class.SkMipmap* }
%class.SkMipmap = type <{ %class.SkCachedData.base, [6 x i8], %class.sk_sp.0, %"struct.SkMipmap::Level"*, i32, [4 x i8] }>
%class.SkCachedData.base = type <{ i32 (...)**, %class.SkMutex, %union.anon, i8*, i64, i32, i32, i8, i8 }>
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%union.anon = type { %class.SkDiscardableMemory* }
%class.SkDiscardableMemory = type opaque
%"struct.SkMipmap::Level" = type { %class.SkPixmap, %struct.SkSize }
%struct.SkSize = type { float, float }
%struct.IColor = type { i32, i32, i32 }
%struct.ETC1Block = type { i32, i32 }
%struct.BC1Block = type { i16, i16, i32 }
%class.SkTArray = type { i64*, i64 }

$_ZN8SkTArrayImLb0EE12checkReallocEiNS0_11ReallocTypeE = comdat any

@_ZL19kETC1ModifierTables = internal constant [8 x [4 x i32]] [[4 x i32] [i32 2, i32 8, i32 -2, i32 -8], [4 x i32] [i32 5, i32 17, i32 -5, i32 -17], [4 x i32] [i32 9, i32 29, i32 -9, i32 -29], [4 x i32] [i32 13, i32 42, i32 -13, i32 -42], [4 x i32] [i32 18, i32 60, i32 -18, i32 -60], [4 x i32] [i32 24, i32 80, i32 -24, i32 -80], [4 x i32] [i32 33, i32 106, i32 -33, i32 -106], [4 x i32] [i32 47, i32 183, i32 -47, i32 -183]], align 16
@_ZZL20extend_5plus3To8BitsiiE7kLookup = internal unnamed_addr constant [8 x i32] [i32 0, i32 1, i32 2, i32 3, i32 -4, i32 -3, i32 -2, i32 -1], align 16
@switch.table._Z21SkCompressedBlockSizeN7SkImage15CompressionTypeE = private unnamed_addr constant [4 x i64] [i64 0, i64 8, i64 8, i64 8], align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_Z12SkDecompress5sk_spI6SkDataE7SkISizeN7SkImage15CompressionTypeEP8SkBitmap(%class.sk_sp.8* nocapture readonly, i64, i32, %class.SkBitmap* nocapture readonly) local_unnamed_addr #0 {
  %5 = alloca [2 x %struct.IColor], align 16
  %6 = alloca [2 x i32*], align 16
  %7 = getelementptr inbounds %class.sk_sp.8, %class.sk_sp.8* %0, i64 0, i32 0
  %8 = load %class.SkData*, %class.SkData** %7, align 8
  %9 = getelementptr inbounds %class.SkData, %class.SkData* %8, i64 0, i32 3
  %10 = load i8*, i8** %9, align 8
  switch i32 %2, label %214 [
    i32 0, label %215
    i32 1, label %11
    i32 2, label %212
    i32 3, label %213
  ]

11:                                               ; preds = %4
  %12 = trunc i64 %1 to i32
  %13 = lshr i64 %1, 32
  %14 = trunc i64 %13 to i32
  %15 = bitcast i8* %10 to %struct.ETC1Block*
  %16 = icmp sgt i32 %14, 0
  br i1 %16, label %17, label %215

17:                                               ; preds = %11
  %18 = add nuw nsw i32 %14, 3
  %19 = ashr i32 %18, 2
  %20 = add nsw i32 %12, 3
  %21 = ashr i32 %20, 2
  %22 = icmp sgt i32 %12, 0
  %23 = bitcast [2 x %struct.IColor]* %5 to i8*
  %24 = getelementptr inbounds [2 x %struct.IColor], [2 x %struct.IColor]* %5, i64 0, i64 0, i32 0
  %25 = getelementptr inbounds [2 x %struct.IColor], [2 x %struct.IColor]* %5, i64 0, i64 0, i32 1
  %26 = getelementptr inbounds [2 x %struct.IColor], [2 x %struct.IColor]* %5, i64 0, i64 0, i32 2
  %27 = getelementptr inbounds [2 x %struct.IColor], [2 x %struct.IColor]* %5, i64 0, i64 1, i32 0
  %28 = getelementptr inbounds [2 x %struct.IColor], [2 x %struct.IColor]* %5, i64 0, i64 1, i32 1
  %29 = getelementptr inbounds [2 x %struct.IColor], [2 x %struct.IColor]* %5, i64 0, i64 1, i32 2
  %30 = bitcast [2 x i32*]* %6 to i8*
  %31 = getelementptr inbounds [2 x i32*], [2 x i32*]* %6, i64 0, i64 0
  %32 = getelementptr inbounds [2 x i32*], [2 x i32*]* %6, i64 0, i64 1
  %33 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %3, i64 0, i32 1, i32 2, i32 1, i32 0
  %34 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %3, i64 0, i32 1, i32 2, i32 1, i32 1
  %35 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %3, i64 0, i32 1, i32 0
  %36 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %3, i64 0, i32 1, i32 1
  %37 = sext i32 %21 to i64
  %38 = sext i32 %19 to i64
  %39 = bitcast i32* %25 to <4 x i32>*
  br label %40

40:                                               ; preds = %45, %17
  %41 = phi i64 [ 0, %17 ], [ %46, %45 ]
  br i1 %22, label %42, label %45

42:                                               ; preds = %40
  %43 = mul nsw i64 %41, %37
  %44 = shl nsw i64 %41, 2
  br label %48

45:                                               ; preds = %137, %40
  %46 = add nuw nsw i64 %41, 1
  %47 = icmp slt i64 %46, %38
  br i1 %47, label %40, label %215

48:                                               ; preds = %137, %42
  %49 = phi i64 [ 0, %42 ], [ %138, %137 ]
  %50 = add nsw i64 %49, %43
  %51 = getelementptr inbounds %struct.ETC1Block, %struct.ETC1Block* %15, i64 %50, i32 0
  %52 = load i32, i32* %51, align 4
  %53 = tail call i32 @llvm.bswap.i32(i32 %52) #5
  %54 = getelementptr inbounds %struct.ETC1Block, %struct.ETC1Block* %15, i64 %50, i32 1
  %55 = load i32, i32* %54, align 4
  %56 = tail call i32 @llvm.bswap.i32(i32 %55) #5
  %57 = and i32 %53, 1
  %58 = icmp eq i32 %57, 0
  %59 = and i32 %53, 2
  %60 = icmp eq i32 %59, 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %23) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 -86, i64 24, i1 false) #5
  br i1 %60, label %98, label %61

61:                                               ; preds = %48
  %62 = lshr i32 %53, 27
  %63 = shl nuw nsw i32 %62, 3
  %64 = lshr i32 %53, 29
  %65 = or i32 %63, %64
  store i32 %65, i32* %24, align 16
  %66 = lshr i32 %53, 24
  %67 = and i32 %66, 7
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds [8 x i32], [8 x i32]* @_ZZL20extend_5plus3To8BitsiiE7kLookup, i64 0, i64 %68
  %70 = load i32, i32* %69, align 4
  %71 = add i32 %70, %62
  %72 = lshr i32 %53, 19
  %73 = lshr i32 %53, 16
  %74 = and i32 %73, 7
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds [8 x i32], [8 x i32]* @_ZZL20extend_5plus3To8BitsiiE7kLookup, i64 0, i64 %75
  %77 = load i32, i32* %76, align 4
  %78 = add i32 %77, %72
  %79 = lshr i32 %53, 11
  %80 = insertelement <4 x i32> undef, i32 %72, i32 0
  %81 = insertelement <4 x i32> %80, i32 %79, i32 1
  %82 = insertelement <4 x i32> %81, i32 %71, i32 2
  %83 = insertelement <4 x i32> %82, i32 %78, i32 3
  %84 = and <4 x i32> %83, <i32 31, i32 31, i32 31, i32 31>
  %85 = shl nuw nsw <4 x i32> %84, <i32 3, i32 3, i32 3, i32 3>
  %86 = lshr <4 x i32> %84, <i32 2, i32 2, i32 2, i32 2>
  %87 = or <4 x i32> %85, %86
  store <4 x i32> %87, <4 x i32>* %39, align 4
  %88 = lshr i32 %53, 8
  %89 = and i32 %88, 7
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds [8 x i32], [8 x i32]* @_ZZL20extend_5plus3To8BitsiiE7kLookup, i64 0, i64 %90
  %92 = load i32, i32* %91, align 4
  %93 = add i32 %92, %79
  %94 = and i32 %93, 31
  %95 = shl nuw nsw i32 %94, 3
  %96 = lshr i32 %94, 2
  %97 = or i32 %95, %96
  br label %122

98:                                               ; preds = %48
  %99 = lshr i32 %53, 28
  %100 = shl nuw nsw i32 %99, 4
  %101 = or i32 %100, %99
  store i32 %101, i32* %24, align 16
  %102 = lshr i32 %53, 24
  %103 = and i32 %102, 15
  %104 = shl nuw nsw i32 %103, 4
  %105 = or i32 %104, %103
  store i32 %105, i32* %27, align 4
  %106 = lshr i32 %53, 20
  %107 = and i32 %106, 15
  %108 = shl nuw nsw i32 %107, 4
  %109 = or i32 %108, %107
  store i32 %109, i32* %25, align 4
  %110 = lshr i32 %53, 16
  %111 = and i32 %110, 15
  %112 = shl nuw nsw i32 %111, 4
  %113 = or i32 %112, %111
  store i32 %113, i32* %28, align 4
  %114 = lshr i32 %53, 12
  %115 = and i32 %114, 15
  %116 = shl nuw nsw i32 %115, 4
  %117 = or i32 %116, %115
  store i32 %117, i32* %26, align 8
  %118 = lshr i32 %53, 8
  %119 = and i32 %118, 15
  %120 = shl nuw nsw i32 %119, 4
  %121 = or i32 %120, %119
  br label %122

122:                                              ; preds = %98, %61
  %123 = phi i32 [ %121, %98 ], [ %97, %61 ]
  store i32 %123, i32* %29, align 4
  %124 = lshr i32 %53, 5
  %125 = and i32 %124, 7
  %126 = lshr i32 %53, 2
  %127 = and i32 %126, 7
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %30) #5
  %128 = zext i32 %125 to i64
  %129 = getelementptr inbounds [8 x [4 x i32]], [8 x [4 x i32]]* @_ZL19kETC1ModifierTables, i64 0, i64 %128, i64 0
  store i32* %129, i32** %31, align 16
  %130 = zext i32 %127 to i64
  %131 = getelementptr inbounds [8 x [4 x i32]], [8 x [4 x i32]]* @_ZL19kETC1ModifierTables, i64 0, i64 %130, i64 0
  store i32* %131, i32** %32, align 8
  %132 = shl nsw i64 %49, 2
  %133 = trunc i64 %132 to i32
  br label %134

134:                                              ; preds = %140, %122
  %135 = phi i64 [ 0, %122 ], [ %141, %140 ]
  %136 = add nuw nsw i64 %135, %44
  br label %143

137:                                              ; preds = %140
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %30) #5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %23) #5
  %138 = add nuw nsw i64 %49, 1
  %139 = icmp slt i64 %138, %37
  br i1 %139, label %48, label %45

140:                                              ; preds = %208
  %141 = add nuw nsw i64 %135, 1
  %142 = icmp eq i64 %141, 4
  br i1 %142, label %137, label %134

143:                                              ; preds = %208, %134
  %144 = phi i64 [ 0, %134 ], [ %209, %208 ]
  %145 = phi i32 [ 0, %134 ], [ %210, %208 ]
  %146 = add nuw nsw i64 %144, %132
  %147 = add nuw nsw i32 %145, %133
  %148 = load i32, i32* %33, align 4
  %149 = sext i32 %148 to i64
  %150 = icmp slt i64 %146, %149
  br i1 %150, label %151, label %208

151:                                              ; preds = %143
  %152 = load i32, i32* %34, align 4
  %153 = sext i32 %152 to i64
  %154 = icmp slt i64 %136, %153
  br i1 %154, label %155, label %208

155:                                              ; preds = %151
  %156 = select i1 %58, i64 %144, i64 %135
  %157 = trunc i64 %156 to i32
  %158 = icmp ugt i32 %157, 1
  %159 = shl i64 %144, 2
  %160 = add nuw nsw i64 %159, %135
  %161 = trunc i64 %160 to i32
  %162 = lshr i32 %56, %161
  %163 = and i32 %162, 1
  %164 = add i32 %161, 15
  %165 = lshr i32 %56, %164
  %166 = and i32 %165, 2
  %167 = or i32 %166, %163
  %168 = zext i1 %158 to i64
  %169 = getelementptr inbounds [2 x i32*], [2 x i32*]* %6, i64 0, i64 %168
  %170 = load i32*, i32** %169, align 8
  %171 = zext i32 %167 to i64
  %172 = getelementptr inbounds i32, i32* %170, i64 %171
  %173 = load i32, i32* %172, align 4
  %174 = getelementptr inbounds [2 x %struct.IColor], [2 x %struct.IColor]* %5, i64 0, i64 %168, i32 0
  %175 = load i32, i32* %174, align 4
  %176 = add nsw i32 %175, %173
  %177 = icmp slt i32 %176, 255
  %178 = select i1 %177, i32 %176, i32 255
  %179 = icmp sgt i32 %178, 0
  %180 = select i1 %179, i32 %178, i32 0
  %181 = getelementptr inbounds [2 x %struct.IColor], [2 x %struct.IColor]* %5, i64 0, i64 %168, i32 1
  %182 = load i32, i32* %181, align 4
  %183 = add nsw i32 %182, %173
  %184 = icmp slt i32 %183, 255
  %185 = select i1 %184, i32 %183, i32 255
  %186 = icmp sgt i32 %185, 0
  %187 = select i1 %186, i32 %185, i32 0
  %188 = getelementptr inbounds [2 x %struct.IColor], [2 x %struct.IColor]* %5, i64 0, i64 %168, i32 2
  %189 = load i32, i32* %188, align 4
  %190 = add nsw i32 %189, %173
  %191 = icmp slt i32 %190, 255
  %192 = select i1 %191, i32 %190, i32 255
  %193 = icmp sgt i32 %192, 0
  %194 = select i1 %193, i32 %192, i32 0
  %195 = shl nsw i32 %180, 16
  %196 = shl nsw i32 %187, 8
  %197 = or i32 %195, %196
  %198 = or i32 %197, %194
  %199 = or i32 %198, -16777216
  %200 = load i8*, i8** %35, align 8
  %201 = load i64, i64* %36, align 8
  %202 = mul i64 %201, %136
  %203 = getelementptr inbounds i8, i8* %200, i64 %202
  %204 = shl i32 %147, 2
  %205 = sext i32 %204 to i64
  %206 = getelementptr inbounds i8, i8* %203, i64 %205
  %207 = bitcast i8* %206 to i32*
  store i32 %199, i32* %207, align 4
  br label %208

208:                                              ; preds = %155, %151, %143
  %209 = add nuw nsw i64 %144, 1
  %210 = add nuw nsw i32 %145, 1
  %211 = icmp eq i64 %209, 4
  br i1 %211, label %140, label %143

212:                                              ; preds = %4
  tail call fastcc void @_ZL14decompress_bc17SkISizePKhbP8SkBitmap(i64 %1, i8* %10, i1 zeroext true, %class.SkBitmap* %3)
  br label %215

213:                                              ; preds = %4
  tail call fastcc void @_ZL14decompress_bc17SkISizePKhbP8SkBitmap(i64 %1, i8* %10, i1 zeroext false, %class.SkBitmap* %3)
  br label %215

214:                                              ; preds = %4
  tail call void @llvm.trap()
  unreachable

215:                                              ; preds = %45, %11, %4, %213, %212
  %216 = phi i1 [ true, %213 ], [ true, %212 ], [ false, %4 ], [ true, %11 ], [ true, %45 ]
  ret i1 %216
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZL14decompress_bc17SkISizePKhbP8SkBitmap(i64, i8* nocapture readonly, i1 zeroext, %class.SkBitmap* nocapture readonly) unnamed_addr #0 {
  %5 = alloca [4 x i32], align 16
  %6 = trunc i64 %0 to i32
  %7 = lshr i64 %0, 32
  %8 = trunc i64 %7 to i32
  %9 = bitcast i8* %1 to %struct.BC1Block*
  %10 = bitcast [4 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #5
  %11 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 0
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 1
  %13 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 2
  %14 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 3
  %15 = icmp sgt i32 %8, 0
  %16 = bitcast [4 x i32]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %16, i8 -86, i64 16, i1 false)
  br i1 %15, label %17, label %35

17:                                               ; preds = %4
  %18 = add nuw nsw i32 %8, 3
  %19 = ashr i32 %18, 2
  %20 = add nsw i32 %6, 3
  %21 = ashr i32 %20, 2
  %22 = icmp sgt i32 %6, 0
  %23 = select i1 %2, i32 -16777216, i32 0
  %24 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %3, i64 0, i32 1, i32 2, i32 1, i32 0
  %25 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %3, i64 0, i32 1, i32 2, i32 1, i32 1
  %26 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %3, i64 0, i32 1, i32 0
  %27 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %3, i64 0, i32 1, i32 1
  %28 = sext i32 %21 to i64
  %29 = sext i32 %19 to i64
  br label %30

30:                                               ; preds = %17, %36
  %31 = phi i64 [ 0, %17 ], [ %37, %36 ]
  br i1 %22, label %32, label %36

32:                                               ; preds = %30
  %33 = mul nsw i64 %31, %28
  %34 = shl nsw i64 %31, 2
  br label %39

35:                                               ; preds = %36, %4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #5
  ret void

36:                                               ; preds = %206, %30
  %37 = add nuw nsw i64 %31, 1
  %38 = icmp slt i64 %37, %29
  br i1 %38, label %30, label %35

39:                                               ; preds = %32, %206
  %40 = phi i64 [ 0, %32 ], [ %207, %206 ]
  %41 = add nsw i64 %40, %33
  %42 = getelementptr inbounds %struct.BC1Block, %struct.BC1Block* %9, i64 %41, i32 0
  %43 = load i16, i16* %42, align 4
  %44 = zext i16 %43 to i32
  %45 = lshr i32 %44, 11
  %46 = shl nuw nsw i32 %45, 3
  %47 = lshr i32 %44, 13
  %48 = or i32 %46, %47
  %49 = lshr i32 %44, 3
  %50 = lshr i32 %44, 9
  %51 = and i32 %50, 3
  %52 = shl nuw nsw i32 %44, 3
  %53 = lshr i32 %44, 2
  %54 = and i32 %53, 7
  %55 = and i32 %49, 252
  %56 = or i32 %55, %51
  %57 = and i32 %52, 248
  %58 = shl nuw nsw i32 %48, 16
  %59 = shl nuw nsw i32 %56, 8
  %60 = or i32 %54, %57
  %61 = or i32 %60, %59
  %62 = or i32 %61, %58
  %63 = or i32 %62, -16777216
  store i32 %63, i32* %11, align 16
  %64 = getelementptr inbounds %struct.BC1Block, %struct.BC1Block* %9, i64 %41, i32 1
  %65 = load i16, i16* %64, align 2
  %66 = zext i16 %65 to i32
  %67 = lshr i32 %66, 11
  %68 = shl nuw nsw i32 %67, 3
  %69 = lshr i32 %66, 13
  %70 = or i32 %68, %69
  %71 = lshr i32 %66, 3
  %72 = lshr i32 %66, 9
  %73 = and i32 %72, 3
  %74 = shl nuw nsw i32 %66, 3
  %75 = lshr i32 %66, 2
  %76 = and i32 %75, 7
  %77 = and i32 %71, 252
  %78 = or i32 %77, %73
  %79 = and i32 %74, 248
  %80 = shl nuw nsw i32 %70, 16
  %81 = shl nuw nsw i32 %78, 8
  %82 = or i32 %76, %79
  %83 = or i32 %82, %81
  %84 = or i32 %83, %80
  %85 = or i32 %84, -16777216
  store i32 %85, i32* %12, align 4
  %86 = icmp ugt i16 %43, %65
  br i1 %86, label %99, label %87

87:                                               ; preds = %39
  %88 = add nuw nsw i32 %70, %48
  %89 = lshr i32 %88, 1
  %90 = add nuw nsw i32 %78, %56
  %91 = lshr i32 %90, 1
  %92 = add nuw nsw i32 %82, %60
  %93 = lshr i32 %92, 1
  %94 = shl nuw nsw i32 %89, 16
  %95 = shl nuw nsw i32 %91, 8
  %96 = or i32 %93, %95
  %97 = or i32 %96, %94
  %98 = or i32 %97, -16777216
  store i32 %98, i32* %13, align 8
  br label %180

99:                                               ; preds = %39
  %100 = uitofp i32 %48 to float
  %101 = fmul float %100, 0x3FE5555560000000
  %102 = uitofp i32 %70 to float
  %103 = fmul float %102, 0x3FD5555540000000
  %104 = fadd float %101, %103
  %105 = fadd float %104, 5.000000e-01
  %106 = tail call float @llvm.floor.f32(float %105) #5
  %107 = fcmp olt float %106, 0x41DFFFFFE0000000
  %108 = select i1 %107, float %106, float 0x41DFFFFFE0000000
  %109 = fcmp ogt float %108, 0xC1DFFFFFE0000000
  %110 = select i1 %109, float %108, float 0xC1DFFFFFE0000000
  %111 = fptosi float %110 to i32
  %112 = uitofp i32 %56 to float
  %113 = fmul float %112, 0x3FE5555560000000
  %114 = uitofp i32 %78 to float
  %115 = fmul float %114, 0x3FD5555540000000
  %116 = fadd float %113, %115
  %117 = fadd float %116, 5.000000e-01
  %118 = tail call float @llvm.floor.f32(float %117) #5
  %119 = fcmp olt float %118, 0x41DFFFFFE0000000
  %120 = select i1 %119, float %118, float 0x41DFFFFFE0000000
  %121 = fcmp ogt float %120, 0xC1DFFFFFE0000000
  %122 = select i1 %121, float %120, float 0xC1DFFFFFE0000000
  %123 = fptosi float %122 to i32
  %124 = uitofp i32 %60 to float
  %125 = fmul float %124, 0x3FE5555560000000
  %126 = uitofp i32 %82 to float
  %127 = fmul float %126, 0x3FD5555540000000
  %128 = fadd float %125, %127
  %129 = fadd float %128, 5.000000e-01
  %130 = tail call float @llvm.floor.f32(float %129) #5
  %131 = fcmp olt float %130, 0x41DFFFFFE0000000
  %132 = select i1 %131, float %130, float 0x41DFFFFFE0000000
  %133 = fcmp ogt float %132, 0xC1DFFFFFE0000000
  %134 = select i1 %133, float %132, float 0xC1DFFFFFE0000000
  %135 = fptosi float %134 to i32
  %136 = and i32 %135, 255
  %137 = shl i32 %111, 16
  %138 = shl i32 %123, 8
  %139 = and i32 %138, 65280
  %140 = or i32 %137, %136
  %141 = or i32 %140, %139
  %142 = or i32 %141, -16777216
  store i32 %142, i32* %13, align 8
  %143 = fmul float %100, 0x3FD5555560000000
  %144 = fmul float %102, 0x3FE5555540000000
  %145 = fadd float %143, %144
  %146 = fadd float %145, 5.000000e-01
  %147 = tail call float @llvm.floor.f32(float %146) #5
  %148 = fcmp olt float %147, 0x41DFFFFFE0000000
  %149 = select i1 %148, float %147, float 0x41DFFFFFE0000000
  %150 = fcmp ogt float %149, 0xC1DFFFFFE0000000
  %151 = select i1 %150, float %149, float 0xC1DFFFFFE0000000
  %152 = fptosi float %151 to i32
  %153 = fmul float %112, 0x3FD5555560000000
  %154 = fmul float %114, 0x3FE5555540000000
  %155 = fadd float %153, %154
  %156 = fadd float %155, 5.000000e-01
  %157 = tail call float @llvm.floor.f32(float %156) #5
  %158 = fcmp olt float %157, 0x41DFFFFFE0000000
  %159 = select i1 %158, float %157, float 0x41DFFFFFE0000000
  %160 = fcmp ogt float %159, 0xC1DFFFFFE0000000
  %161 = select i1 %160, float %159, float 0xC1DFFFFFE0000000
  %162 = fptosi float %161 to i32
  %163 = fmul float %124, 0x3FD5555560000000
  %164 = fmul float %126, 0x3FE5555540000000
  %165 = fadd float %163, %164
  %166 = fadd float %165, 5.000000e-01
  %167 = tail call float @llvm.floor.f32(float %166) #5
  %168 = fcmp olt float %167, 0x41DFFFFFE0000000
  %169 = select i1 %168, float %167, float 0x41DFFFFFE0000000
  %170 = fcmp ogt float %169, 0xC1DFFFFFE0000000
  %171 = select i1 %170, float %169, float 0xC1DFFFFFE0000000
  %172 = fptosi float %171 to i32
  %173 = and i32 %172, 255
  %174 = shl i32 %152, 16
  %175 = shl i32 %162, 8
  %176 = and i32 %175, 65280
  %177 = or i32 %174, %173
  %178 = or i32 %177, %176
  %179 = or i32 %178, -16777216
  br label %180

180:                                              ; preds = %99, %87
  %181 = phi i32 [ %179, %99 ], [ %23, %87 ]
  store i32 %181, i32* %14, align 4
  %182 = shl nsw i64 %40, 2
  %183 = getelementptr inbounds %struct.BC1Block, %struct.BC1Block* %9, i64 %41, i32 2
  %184 = trunc i64 %40 to i32
  %185 = shl i32 %184, 4
  %186 = sext i32 %185 to i64
  %187 = or i64 %182, 1
  %188 = trunc i64 %187 to i32
  %189 = shl i32 %188, 2
  %190 = sext i32 %189 to i64
  %191 = or i64 %182, 2
  %192 = trunc i64 %191 to i32
  %193 = shl i32 %192, 2
  %194 = sext i32 %193 to i64
  %195 = or i64 %182, 3
  %196 = trunc i64 %195 to i32
  %197 = shl i32 %196, 2
  %198 = sext i32 %197 to i64
  br label %199

199:                                              ; preds = %295, %180
  %200 = phi i64 [ 0, %180 ], [ %297, %295 ]
  %201 = phi i32 [ 0, %180 ], [ %296, %295 ]
  %202 = add nuw nsw i64 %200, %34
  %203 = load i32, i32* %24, align 4
  %204 = sext i32 %203 to i64
  %205 = icmp slt i64 %182, %204
  br i1 %205, label %209, label %228

206:                                              ; preds = %295
  %207 = add nuw nsw i64 %40, 1
  %208 = icmp slt i64 %207, %28
  br i1 %208, label %39, label %36

209:                                              ; preds = %199
  %210 = load i32, i32* %25, align 4
  %211 = sext i32 %210 to i64
  %212 = icmp slt i64 %202, %211
  br i1 %212, label %213, label %228

213:                                              ; preds = %209
  %214 = load i32, i32* %183, align 4
  %215 = lshr i32 %214, %201
  %216 = and i32 %215, 3
  %217 = zext i32 %216 to i64
  %218 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 %217
  %219 = load i32, i32* %218, align 4
  %220 = load i8*, i8** %26, align 8
  %221 = load i64, i64* %27, align 8
  %222 = mul i64 %221, %202
  %223 = getelementptr inbounds i8, i8* %220, i64 %186
  %224 = getelementptr inbounds i8, i8* %223, i64 %222
  %225 = bitcast i8* %224 to i32*
  store i32 %219, i32* %225, align 4
  %226 = load i32, i32* %24, align 4
  %227 = sext i32 %226 to i64
  br label %228

228:                                              ; preds = %209, %199, %213
  %229 = phi i64 [ %204, %209 ], [ %204, %199 ], [ %227, %213 ]
  %230 = or i32 %201, 2
  %231 = icmp slt i64 %187, %229
  br i1 %231, label %232, label %251

232:                                              ; preds = %228
  %233 = load i32, i32* %25, align 4
  %234 = sext i32 %233 to i64
  %235 = icmp slt i64 %202, %234
  br i1 %235, label %236, label %251

236:                                              ; preds = %232
  %237 = load i32, i32* %183, align 4
  %238 = lshr i32 %237, %230
  %239 = and i32 %238, 3
  %240 = zext i32 %239 to i64
  %241 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 %240
  %242 = load i32, i32* %241, align 4
  %243 = load i8*, i8** %26, align 8
  %244 = load i64, i64* %27, align 8
  %245 = mul i64 %244, %202
  %246 = getelementptr inbounds i8, i8* %243, i64 %190
  %247 = getelementptr inbounds i8, i8* %246, i64 %245
  %248 = bitcast i8* %247 to i32*
  store i32 %242, i32* %248, align 4
  %249 = load i32, i32* %24, align 4
  %250 = sext i32 %249 to i64
  br label %251

251:                                              ; preds = %236, %232, %228
  %252 = phi i64 [ %250, %236 ], [ %229, %232 ], [ %229, %228 ]
  %253 = or i32 %201, 4
  %254 = icmp slt i64 %191, %252
  br i1 %254, label %255, label %274

255:                                              ; preds = %251
  %256 = load i32, i32* %25, align 4
  %257 = sext i32 %256 to i64
  %258 = icmp slt i64 %202, %257
  br i1 %258, label %259, label %274

259:                                              ; preds = %255
  %260 = load i32, i32* %183, align 4
  %261 = lshr i32 %260, %253
  %262 = and i32 %261, 3
  %263 = zext i32 %262 to i64
  %264 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 %263
  %265 = load i32, i32* %264, align 4
  %266 = load i8*, i8** %26, align 8
  %267 = load i64, i64* %27, align 8
  %268 = mul i64 %267, %202
  %269 = getelementptr inbounds i8, i8* %266, i64 %194
  %270 = getelementptr inbounds i8, i8* %269, i64 %268
  %271 = bitcast i8* %270 to i32*
  store i32 %265, i32* %271, align 4
  %272 = load i32, i32* %24, align 4
  %273 = sext i32 %272 to i64
  br label %274

274:                                              ; preds = %259, %255, %251
  %275 = phi i64 [ %273, %259 ], [ %252, %255 ], [ %252, %251 ]
  %276 = or i32 %201, 6
  %277 = icmp slt i64 %195, %275
  br i1 %277, label %278, label %295

278:                                              ; preds = %274
  %279 = load i32, i32* %25, align 4
  %280 = sext i32 %279 to i64
  %281 = icmp slt i64 %202, %280
  br i1 %281, label %282, label %295

282:                                              ; preds = %278
  %283 = load i32, i32* %183, align 4
  %284 = lshr i32 %283, %276
  %285 = and i32 %284, 3
  %286 = zext i32 %285 to i64
  %287 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 %286
  %288 = load i32, i32* %287, align 4
  %289 = load i8*, i8** %26, align 8
  %290 = load i64, i64* %27, align 8
  %291 = mul i64 %290, %202
  %292 = getelementptr inbounds i8, i8* %289, i64 %198
  %293 = getelementptr inbounds i8, i8* %292, i64 %291
  %294 = bitcast i8* %293 to i32*
  store i32 %288, i32* %294, align 4
  br label %295

295:                                              ; preds = %282, %278, %274
  %296 = add nuw nsw i32 %201, 8
  %297 = add nuw nsw i64 %200, 1
  %298 = icmp eq i64 %297, 4
  br i1 %298, label %206, label %199
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_Z20SkCompressedDataSizeN7SkImage15CompressionTypeE7SkISizeP8SkTArrayImLb0EEb(i32, i64, %class.SkTArray*, i1 zeroext) local_unnamed_addr #0 {
  %5 = trunc i64 %1 to i32
  %6 = lshr i64 %1, 32
  %7 = trunc i64 %6 to i32
  br i1 %3, label %8, label %11

8:                                                ; preds = %4
  %9 = tail call i32 @_ZN8SkMipmap17ComputeLevelCountEii(i32 %5, i32 %7) #5
  %10 = add nsw i32 %9, 1
  br label %11

11:                                               ; preds = %8, %4
  %12 = phi i32 [ %10, %8 ], [ 1, %4 ]
  %13 = add i32 %0, -1
  %14 = icmp ult i32 %13, 3
  %15 = icmp sgt i32 %12, 0
  %16 = and i1 %14, %15
  br i1 %16, label %17, label %53

17:                                               ; preds = %11
  %18 = icmp eq %class.SkTArray* %2, null
  %19 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %2, i64 0, i32 0
  %20 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %2, i64 0, i32 1
  br label %21

21:                                               ; preds = %41, %17
  %22 = phi i32 [ 0, %17 ], [ %51, %41 ]
  %23 = phi i32 [ %7, %17 ], [ %50, %41 ]
  %24 = phi i32 [ %5, %17 ], [ %47, %41 ]
  %25 = phi i64 [ 0, %17 ], [ %44, %41 ]
  %26 = add nsw i32 %24, 3
  %27 = ashr i32 %26, 2
  %28 = add nsw i32 %23, 3
  %29 = ashr i32 %28, 2
  %30 = mul nsw i32 %29, %27
  br i1 %18, label %41, label %31

31:                                               ; preds = %21
  tail call void @_ZN8SkTArrayImLb0EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray* nonnull %2, i32 1, i32 1) #5
  %32 = load i64*, i64** %19, align 8
  %33 = load i64, i64* %20, align 8
  %34 = lshr i64 %33, 1
  %35 = and i64 %34, 2147483647
  %36 = getelementptr inbounds i64, i64* %32, i64 %35
  %37 = add i64 %33, 2
  %38 = and i64 %37, 4294967294
  %39 = and i64 %33, -4294967295
  %40 = or i64 %38, %39
  store i64 %40, i64* %20, align 8
  store i64 %25, i64* %36, align 8
  br label %41

41:                                               ; preds = %21, %31
  %42 = sext i32 %30 to i64
  %43 = shl nsw i64 %42, 3
  %44 = add i64 %43, %25
  %45 = sdiv i32 %24, 2
  %46 = icmp sgt i32 %45, 1
  %47 = select i1 %46, i32 %45, i32 1
  %48 = sdiv i32 %23, 2
  %49 = icmp sgt i32 %48, 1
  %50 = select i1 %49, i32 %48, i32 1
  %51 = add nuw nsw i32 %22, 1
  %52 = icmp eq i32 %51, %12
  br i1 %52, label %53, label %21

53:                                               ; preds = %41, %11
  %54 = phi i64 [ 0, %11 ], [ %44, %41 ]
  ret i64 %54
}

declare i32 @_ZN8SkMipmap17ComputeLevelCountEii(i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_Z21SkCompressedBlockSizeN7SkImage15CompressionTypeE(i32) local_unnamed_addr #0 {
  %2 = icmp ult i32 %0, 4
  br i1 %2, label %4, label %3

3:                                                ; preds = %1
  tail call void @llvm.trap()
  unreachable

4:                                                ; preds = %1
  %5 = sext i32 %0 to i64
  %6 = getelementptr inbounds [4 x i64], [4 x i64]* @switch.table._Z21SkCompressedBlockSizeN7SkImage15CompressionTypeE, i64 0, i64 %5
  %7 = load i64, i64* %6, align 8
  ret i64 %7
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_Z26SkCompressedFormatDataSizeN7SkImage15CompressionTypeE7SkISizeb(i32, i64, i1 zeroext) local_unnamed_addr #0 {
  %4 = trunc i64 %1 to i32
  %5 = lshr i64 %1, 32
  %6 = trunc i64 %5 to i32
  br i1 %2, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call i32 @_ZN8SkMipmap17ComputeLevelCountEii(i32 %4, i32 %6) #5
  %9 = add nsw i32 %8, 1
  br label %10

10:                                               ; preds = %7, %3
  %11 = phi i32 [ %9, %7 ], [ 1, %3 ]
  %12 = add i32 %0, -1
  %13 = icmp ult i32 %12, 3
  %14 = icmp sgt i32 %11, 0
  %15 = and i1 %13, %14
  br i1 %15, label %16, label %37

16:                                               ; preds = %10, %16
  %17 = phi i32 [ %35, %16 ], [ 0, %10 ]
  %18 = phi i32 [ %34, %16 ], [ %6, %10 ]
  %19 = phi i32 [ %31, %16 ], [ %4, %10 ]
  %20 = phi i64 [ %28, %16 ], [ 0, %10 ]
  %21 = add nsw i32 %19, 3
  %22 = ashr i32 %21, 2
  %23 = add nsw i32 %18, 3
  %24 = ashr i32 %23, 2
  %25 = mul nsw i32 %22, %24
  %26 = sext i32 %25 to i64
  %27 = shl nsw i64 %26, 3
  %28 = add i64 %27, %20
  %29 = sdiv i32 %19, 2
  %30 = icmp sgt i32 %29, 1
  %31 = select i1 %30, i32 %29, i32 1
  %32 = sdiv i32 %18, 2
  %33 = icmp sgt i32 %32, 1
  %34 = select i1 %33, i32 %32, i32 1
  %35 = add nuw nsw i32 %17, 1
  %36 = icmp eq i32 %35, %11
  br i1 %36, label %37, label %16

37:                                               ; preds = %16, %10
  %38 = phi i64 [ 0, %10 ], [ %28, %16 ]
  ret i64 %38
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bswap.i32(i32) #4

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTArrayImLb0EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray*, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 1
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2147483647
  %9 = add nsw i32 %8, %1
  %10 = sext i32 %9 to i64
  %11 = lshr i64 %5, 33
  %12 = icmp slt i64 %11, %10
  %13 = mul nsw i64 %10, 3
  %14 = icmp sle i64 %11, %13
  %15 = and i64 %5, 1
  %16 = icmp eq i64 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = and i64 %5, 4294967296
  %20 = icmp eq i64 %19, 0
  br label %21

21:                                               ; preds = %3, %18
  %22 = phi i1 [ false, %3 ], [ %20, %18 ]
  %23 = or i1 %12, %22
  br i1 %23, label %24, label %75

24:                                               ; preds = %21
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = add nsw i64 %10, 1
  %28 = ashr i64 %27, 1
  %29 = add nsw i64 %10, 7
  %30 = add nsw i64 %29, %28
  %31 = and i64 %30, -8
  br label %32

32:                                               ; preds = %24, %26
  %33 = phi i64 [ %31, %26 ], [ %10, %24 ]
  %34 = icmp eq i64 %33, %11
  br i1 %34, label %75, label %35

35:                                               ; preds = %32
  %36 = icmp slt i64 %33, 2147483647
  %37 = select i1 %36, i64 %33, i64 2147483647
  %38 = icmp sgt i64 %37, -2147483647
  %39 = select i1 %38, i64 %37, i64 -2147483647
  %40 = shl i64 %39, 33
  %41 = and i64 %5, 8589934591
  %42 = or i64 %40, %41
  store i64 %42, i64* %4, align 8
  %43 = and i64 %39, 2147483647
  %44 = tail call i8* @_Z15sk_malloc_throwmm(i64 %43, i64 8) #5
  %45 = load i64, i64* %4, align 8
  %46 = and i64 %45, 4294967294
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %63, label %48

48:                                               ; preds = %35
  %49 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 0
  br label %50

50:                                               ; preds = %50, %48
  %51 = phi i64 [ 0, %48 ], [ %58, %50 ]
  %52 = shl nuw nsw i64 %51, 3
  %53 = getelementptr inbounds i8, i8* %44, i64 %52
  %54 = bitcast i8* %53 to i64*
  %55 = load i64*, i64** %49, align 8
  %56 = getelementptr inbounds i64, i64* %55, i64 %51
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %54, align 8
  %58 = add nuw nsw i64 %51, 1
  %59 = load i64, i64* %4, align 8
  %60 = lshr i64 %59, 1
  %61 = and i64 %60, 2147483647
  %62 = icmp ult i64 %58, %61
  br i1 %62, label %50, label %63

63:                                               ; preds = %50, %35
  %64 = phi i64 [ %45, %35 ], [ %59, %50 ]
  %65 = and i64 %64, 1
  %66 = icmp eq i64 %65, 0
  %67 = bitcast %class.SkTArray* %0 to i8**
  br i1 %66, label %71, label %68

68:                                               ; preds = %63
  %69 = load i8*, i8** %67, align 8
  tail call void @_Z7sk_freePv(i8* %69) #5
  %70 = load i64, i64* %4, align 8
  br label %71

71:                                               ; preds = %63, %68
  %72 = phi i64 [ %70, %68 ], [ %64, %63 ]
  store i8* %44, i8** %67, align 8
  %73 = and i64 %72, -4294967298
  %74 = or i64 %73, 1
  store i64 %74, i64* %4, align 8
  br label %75

75:                                               ; preds = %71, %32, %21
  ret void
}

declare i8* @_Z15sk_malloc_throwmm(i64, i64) local_unnamed_addr #3

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { cold noreturn nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
