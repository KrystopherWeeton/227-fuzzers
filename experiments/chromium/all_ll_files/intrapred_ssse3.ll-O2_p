; ModuleID = '../../third_party/libaom/source/libaom/aom_dsp/x86/intrapred_ssse3.c'
source_filename = "../../third_party/libaom/source/libaom/aom_dsp/x86/intrapred_ssse3.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@sm_weight_arrays = internal unnamed_addr constant [128 x i8] c"\00\00\FF\80\FF\95U@\FF\C5\92iI2% \FF\E1\C4\AA\91{fTD6+!\1A\14\11\10\FF\F0\E1\D2\C4\B6\A9\9D\91\85zoe\5CSJB;4-'\22\1D\19\15\11\0E\0C\0A\09\08\08\FF\F8\F0\E9\E1\DA\D2\CB\C4\BD\B6\B0\A9\A3\9C\96\90\8A\85\7Fytoje`[VRMIEA=962/,)&# \1D\1B\19\16\14\12\10\0F\0D\0C\0A\09\08\07\06\06\05\05\04\04\04", align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_paeth_predictor_4x4_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %3 to i64*
  %6 = load i64, i64* %5, align 1
  %7 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %6, i32 0
  %8 = bitcast i8* %2 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = insertelement <2 x i64> undef, i64 %9, i32 0
  %11 = bitcast <2 x i64> %10 to <16 x i8>
  %12 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %13 = bitcast <16 x i8> %12 to <2 x i64>
  %14 = getelementptr inbounds i8, i8* %2, i64 -1
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i16
  %17 = insertelement <8 x i16> undef, i16 %16, i32 0
  %18 = shufflevector <8 x i16> %17, <8 x i16> undef, <8 x i32> zeroinitializer
  %19 = bitcast <2 x i64> %7 to <16 x i8>
  %20 = bitcast <16 x i8> %12 to <8 x i16>
  %21 = sub <8 x i16> %20, %18
  %22 = shufflevector <16 x i8> %19, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 0, i32 16>
  %23 = bitcast <16 x i8> %22 to <2 x i64>
  %24 = bitcast <16 x i8> %22 to <8 x i16>
  %25 = add <8 x i16> %21, %24
  %26 = sub <8 x i16> zeroinitializer, %21
  %27 = icmp slt <8 x i16> %21, zeroinitializer
  %28 = select <8 x i1> %27, <8 x i16> %26, <8 x i16> %21
  %29 = sub <8 x i16> %25, %20
  %30 = sub <8 x i16> zeroinitializer, %29
  %31 = icmp slt <8 x i16> %29, zeroinitializer
  %32 = select <8 x i1> %31, <8 x i16> %30, <8 x i16> %29
  %33 = sub <8 x i16> %25, %18
  %34 = sub <8 x i16> zeroinitializer, %33
  %35 = icmp slt <8 x i16> %33, zeroinitializer
  %36 = select <8 x i1> %35, <8 x i16> %34, <8 x i16> %33
  %37 = icmp sgt <8 x i16> %28, %32
  %38 = icmp sgt <8 x i16> %28, %36
  %39 = or <8 x i1> %38, %37
  %40 = sext <8 x i1> %39 to <8 x i16>
  %41 = bitcast <8 x i16> %40 to <2 x i64>
  %42 = icmp sgt <8 x i16> %32, %36
  %43 = sext <8 x i1> %42 to <8 x i16>
  %44 = bitcast <8 x i16> %43 to <2 x i64>
  %45 = xor <2 x i64> %41, <i64 -1, i64 undef>
  %46 = and <2 x i64> %45, %23
  %47 = and <8 x i16> %18, %43
  %48 = bitcast <8 x i16> %47 to <2 x i64>
  %49 = xor <2 x i64> %44, <i64 -1, i64 undef>
  %50 = and <2 x i64> %49, %13
  %51 = or <2 x i64> %50, %48
  %52 = and <2 x i64> %51, %41
  %53 = or <2 x i64> %52, %46
  %54 = bitcast <2 x i64> %53 to <8 x i16>
  %55 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %54, <8 x i16> undef) #3
  %56 = bitcast <16 x i8> %55 to <4 x i32>
  %57 = extractelement <4 x i32> %56, i32 0
  %58 = bitcast i8* %0 to i32*
  store i32 %57, i32* %58, align 4
  %59 = getelementptr inbounds i8, i8* %0, i64 %1
  %60 = shufflevector <16 x i8> %19, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 1, i32 16>
  %61 = bitcast <16 x i8> %60 to <2 x i64>
  %62 = bitcast <16 x i8> %60 to <8 x i16>
  %63 = add <8 x i16> %21, %62
  %64 = sub <8 x i16> %63, %20
  %65 = sub <8 x i16> zeroinitializer, %64
  %66 = icmp slt <8 x i16> %64, zeroinitializer
  %67 = select <8 x i1> %66, <8 x i16> %65, <8 x i16> %64
  %68 = sub <8 x i16> %63, %18
  %69 = sub <8 x i16> zeroinitializer, %68
  %70 = icmp slt <8 x i16> %68, zeroinitializer
  %71 = select <8 x i1> %70, <8 x i16> %69, <8 x i16> %68
  %72 = icmp sgt <8 x i16> %28, %67
  %73 = icmp sgt <8 x i16> %28, %71
  %74 = or <8 x i1> %73, %72
  %75 = sext <8 x i1> %74 to <8 x i16>
  %76 = bitcast <8 x i16> %75 to <2 x i64>
  %77 = icmp sgt <8 x i16> %67, %71
  %78 = sext <8 x i1> %77 to <8 x i16>
  %79 = bitcast <8 x i16> %78 to <2 x i64>
  %80 = xor <2 x i64> %76, <i64 -1, i64 undef>
  %81 = and <2 x i64> %80, %61
  %82 = and <8 x i16> %18, %78
  %83 = bitcast <8 x i16> %82 to <2 x i64>
  %84 = xor <2 x i64> %79, <i64 -1, i64 undef>
  %85 = and <2 x i64> %84, %13
  %86 = or <2 x i64> %85, %83
  %87 = and <2 x i64> %86, %76
  %88 = or <2 x i64> %87, %81
  %89 = bitcast <2 x i64> %88 to <8 x i16>
  %90 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %89, <8 x i16> undef) #3
  %91 = bitcast <16 x i8> %90 to <4 x i32>
  %92 = extractelement <4 x i32> %91, i32 0
  %93 = bitcast i8* %59 to i32*
  store i32 %92, i32* %93, align 4
  %94 = getelementptr inbounds i8, i8* %59, i64 %1
  %95 = shufflevector <16 x i8> %19, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 2, i32 16>
  %96 = bitcast <16 x i8> %95 to <2 x i64>
  %97 = bitcast <16 x i8> %95 to <8 x i16>
  %98 = add <8 x i16> %21, %97
  %99 = sub <8 x i16> %98, %20
  %100 = sub <8 x i16> zeroinitializer, %99
  %101 = icmp slt <8 x i16> %99, zeroinitializer
  %102 = select <8 x i1> %101, <8 x i16> %100, <8 x i16> %99
  %103 = sub <8 x i16> %98, %18
  %104 = sub <8 x i16> zeroinitializer, %103
  %105 = icmp slt <8 x i16> %103, zeroinitializer
  %106 = select <8 x i1> %105, <8 x i16> %104, <8 x i16> %103
  %107 = icmp sgt <8 x i16> %28, %102
  %108 = icmp sgt <8 x i16> %28, %106
  %109 = or <8 x i1> %108, %107
  %110 = sext <8 x i1> %109 to <8 x i16>
  %111 = bitcast <8 x i16> %110 to <2 x i64>
  %112 = icmp sgt <8 x i16> %102, %106
  %113 = sext <8 x i1> %112 to <8 x i16>
  %114 = bitcast <8 x i16> %113 to <2 x i64>
  %115 = xor <2 x i64> %111, <i64 -1, i64 undef>
  %116 = and <2 x i64> %115, %96
  %117 = and <8 x i16> %18, %113
  %118 = bitcast <8 x i16> %117 to <2 x i64>
  %119 = xor <2 x i64> %114, <i64 -1, i64 undef>
  %120 = and <2 x i64> %119, %13
  %121 = or <2 x i64> %120, %118
  %122 = and <2 x i64> %121, %111
  %123 = or <2 x i64> %122, %116
  %124 = bitcast <2 x i64> %123 to <8 x i16>
  %125 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %124, <8 x i16> undef) #3
  %126 = bitcast <16 x i8> %125 to <4 x i32>
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = bitcast i8* %94 to i32*
  store i32 %127, i32* %128, align 4
  %129 = getelementptr inbounds i8, i8* %94, i64 %1
  %130 = shufflevector <16 x i8> %19, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 3, i32 16>
  %131 = bitcast <16 x i8> %130 to <2 x i64>
  %132 = bitcast <16 x i8> %130 to <8 x i16>
  %133 = add <8 x i16> %21, %132
  %134 = sub <8 x i16> %133, %20
  %135 = sub <8 x i16> zeroinitializer, %134
  %136 = icmp slt <8 x i16> %134, zeroinitializer
  %137 = select <8 x i1> %136, <8 x i16> %135, <8 x i16> %134
  %138 = sub <8 x i16> %133, %18
  %139 = sub <8 x i16> zeroinitializer, %138
  %140 = icmp slt <8 x i16> %138, zeroinitializer
  %141 = select <8 x i1> %140, <8 x i16> %139, <8 x i16> %138
  %142 = icmp sgt <8 x i16> %28, %137
  %143 = icmp sgt <8 x i16> %28, %141
  %144 = or <8 x i1> %143, %142
  %145 = sext <8 x i1> %144 to <8 x i16>
  %146 = bitcast <8 x i16> %145 to <2 x i64>
  %147 = icmp sgt <8 x i16> %137, %141
  %148 = sext <8 x i1> %147 to <8 x i16>
  %149 = bitcast <8 x i16> %148 to <2 x i64>
  %150 = xor <2 x i64> %146, <i64 -1, i64 undef>
  %151 = and <2 x i64> %150, %131
  %152 = and <8 x i16> %18, %148
  %153 = bitcast <8 x i16> %152 to <2 x i64>
  %154 = xor <2 x i64> %149, <i64 -1, i64 undef>
  %155 = and <2 x i64> %154, %13
  %156 = or <2 x i64> %155, %153
  %157 = and <2 x i64> %156, %146
  %158 = or <2 x i64> %157, %151
  %159 = bitcast <2 x i64> %158 to <8 x i16>
  %160 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %159, <8 x i16> undef) #3
  %161 = bitcast <16 x i8> %160 to <4 x i32>
  %162 = extractelement <4 x i32> %161, i32 0
  %163 = bitcast i8* %129 to i32*
  store i32 %162, i32* %163, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_paeth_predictor_4x8_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %3 to i64*
  %6 = load i64, i64* %5, align 1
  %7 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %6, i32 0
  %8 = bitcast i8* %2 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = insertelement <2 x i64> undef, i64 %9, i32 0
  %11 = bitcast <2 x i64> %10 to <16 x i8>
  %12 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %13 = bitcast <16 x i8> %12 to <2 x i64>
  %14 = getelementptr inbounds i8, i8* %2, i64 -1
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i16
  %17 = insertelement <8 x i16> undef, i16 %16, i32 0
  %18 = shufflevector <8 x i16> %17, <8 x i16> undef, <8 x i32> zeroinitializer
  %19 = bitcast <2 x i64> %7 to <16 x i8>
  %20 = bitcast <16 x i8> %12 to <8 x i16>
  %21 = sub <8 x i16> %20, %18
  %22 = sub <8 x i16> zeroinitializer, %21
  %23 = icmp slt <8 x i16> %21, zeroinitializer
  %24 = select <8 x i1> %23, <8 x i16> %22, <8 x i16> %21
  br label %25

25:                                               ; preds = %25, %4
  %26 = phi i8* [ %0, %4 ], [ %65, %25 ]
  %27 = phi i32 [ 0, %4 ], [ %68, %25 ]
  %28 = phi <2 x i64> [ <i64 -9223231297218904064, i64 -9223231297218904064>, %4 ], [ %67, %25 ]
  %29 = phi <8 x i16> [ <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, %4 ], [ %66, %25 ]
  %30 = bitcast <2 x i64> %28 to <16 x i8>
  %31 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %19, <16 x i8> %30) #3
  %32 = bitcast <16 x i8> %31 to <2 x i64>
  %33 = bitcast <16 x i8> %31 to <8 x i16>
  %34 = add <8 x i16> %21, %33
  %35 = sub <8 x i16> %34, %20
  %36 = sub <8 x i16> zeroinitializer, %35
  %37 = icmp slt <8 x i16> %35, zeroinitializer
  %38 = select <8 x i1> %37, <8 x i16> %36, <8 x i16> %35
  %39 = sub <8 x i16> %34, %18
  %40 = sub <8 x i16> zeroinitializer, %39
  %41 = icmp slt <8 x i16> %39, zeroinitializer
  %42 = select <8 x i1> %41, <8 x i16> %40, <8 x i16> %39
  %43 = icmp sgt <8 x i16> %24, %38
  %44 = icmp sgt <8 x i16> %24, %42
  %45 = or <8 x i1> %44, %43
  %46 = sext <8 x i1> %45 to <8 x i16>
  %47 = bitcast <8 x i16> %46 to <2 x i64>
  %48 = icmp sgt <8 x i16> %38, %42
  %49 = sext <8 x i1> %48 to <8 x i16>
  %50 = bitcast <8 x i16> %49 to <2 x i64>
  %51 = xor <2 x i64> %47, <i64 -1, i64 undef>
  %52 = and <2 x i64> %51, %32
  %53 = and <8 x i16> %18, %49
  %54 = bitcast <8 x i16> %53 to <2 x i64>
  %55 = xor <2 x i64> %50, <i64 -1, i64 undef>
  %56 = and <2 x i64> %55, %13
  %57 = or <2 x i64> %56, %54
  %58 = and <2 x i64> %57, %47
  %59 = or <2 x i64> %58, %52
  %60 = bitcast <2 x i64> %59 to <8 x i16>
  %61 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %60, <8 x i16> undef) #3
  %62 = bitcast <16 x i8> %61 to <4 x i32>
  %63 = extractelement <4 x i32> %62, i32 0
  %64 = bitcast i8* %26 to i32*
  store i32 %63, i32* %64, align 4
  %65 = getelementptr inbounds i8, i8* %26, i64 %1
  %66 = add <8 x i16> %29, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %67 = bitcast <8 x i16> %66 to <2 x i64>
  %68 = add nuw nsw i32 %27, 1
  %69 = icmp eq i32 %68, 8
  br i1 %69, label %70, label %25

70:                                               ; preds = %25
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_paeth_predictor_4x16_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %3 to <16 x i8>*
  %6 = load <16 x i8>, <16 x i8>* %5, align 16
  %7 = bitcast i8* %2 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %8, i32 0
  %10 = bitcast <4 x i32> %9 to <16 x i8>
  %11 = shufflevector <16 x i8> %10, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %12 = bitcast <16 x i8> %11 to <2 x i64>
  %13 = getelementptr inbounds i8, i8* %2, i64 -1
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i16
  %16 = insertelement <8 x i16> undef, i16 %15, i32 0
  %17 = shufflevector <8 x i16> %16, <8 x i16> undef, <8 x i32> zeroinitializer
  %18 = bitcast <16 x i8> %11 to <8 x i16>
  %19 = sub <8 x i16> %18, %17
  %20 = sub <8 x i16> zeroinitializer, %19
  %21 = icmp slt <8 x i16> %19, zeroinitializer
  %22 = select <8 x i1> %21, <8 x i16> %20, <8 x i16> %19
  br label %24

23:                                               ; preds = %24
  ret void

24:                                               ; preds = %24, %4
  %25 = phi i8* [ %0, %4 ], [ %64, %24 ]
  %26 = phi i32 [ 0, %4 ], [ %67, %24 ]
  %27 = phi <2 x i64> [ <i64 -9223231297218904064, i64 -9223231297218904064>, %4 ], [ %66, %24 ]
  %28 = phi <8 x i16> [ <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, %4 ], [ %65, %24 ]
  %29 = bitcast <2 x i64> %27 to <16 x i8>
  %30 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %6, <16 x i8> %29) #3
  %31 = bitcast <16 x i8> %30 to <2 x i64>
  %32 = bitcast <16 x i8> %30 to <8 x i16>
  %33 = add <8 x i16> %19, %32
  %34 = sub <8 x i16> %33, %18
  %35 = sub <8 x i16> zeroinitializer, %34
  %36 = icmp slt <8 x i16> %34, zeroinitializer
  %37 = select <8 x i1> %36, <8 x i16> %35, <8 x i16> %34
  %38 = sub <8 x i16> %33, %17
  %39 = sub <8 x i16> zeroinitializer, %38
  %40 = icmp slt <8 x i16> %38, zeroinitializer
  %41 = select <8 x i1> %40, <8 x i16> %39, <8 x i16> %38
  %42 = icmp sgt <8 x i16> %22, %37
  %43 = icmp sgt <8 x i16> %22, %41
  %44 = or <8 x i1> %43, %42
  %45 = sext <8 x i1> %44 to <8 x i16>
  %46 = bitcast <8 x i16> %45 to <2 x i64>
  %47 = icmp sgt <8 x i16> %37, %41
  %48 = sext <8 x i1> %47 to <8 x i16>
  %49 = bitcast <8 x i16> %48 to <2 x i64>
  %50 = xor <2 x i64> %46, <i64 -1, i64 undef>
  %51 = and <2 x i64> %50, %31
  %52 = and <8 x i16> %17, %48
  %53 = bitcast <8 x i16> %52 to <2 x i64>
  %54 = xor <2 x i64> %49, <i64 -1, i64 undef>
  %55 = and <2 x i64> %54, %12
  %56 = or <2 x i64> %55, %53
  %57 = and <2 x i64> %56, %46
  %58 = or <2 x i64> %57, %51
  %59 = bitcast <2 x i64> %58 to <8 x i16>
  %60 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %59, <8 x i16> undef) #3
  %61 = bitcast <16 x i8> %60 to <4 x i32>
  %62 = extractelement <4 x i32> %61, i32 0
  %63 = bitcast i8* %25 to i32*
  store i32 %62, i32* %63, align 4
  %64 = getelementptr inbounds i8, i8* %25, i64 %1
  %65 = add <8 x i16> %28, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %66 = bitcast <8 x i16> %65 to <2 x i64>
  %67 = add nuw nsw i32 %26, 1
  %68 = icmp eq i32 %67, 16
  br i1 %68, label %23, label %24
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_paeth_predictor_8x4_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %3 to i64*
  %6 = load i64, i64* %5, align 1
  %7 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %6, i32 0
  %8 = bitcast i8* %2 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = insertelement <2 x i64> undef, i64 %9, i32 0
  %11 = bitcast <2 x i64> %10 to <16 x i8>
  %12 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %13 = bitcast <16 x i8> %12 to <2 x i64>
  %14 = getelementptr inbounds i8, i8* %2, i64 -1
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i16
  %17 = insertelement <8 x i16> undef, i16 %16, i32 0
  %18 = shufflevector <8 x i16> %17, <8 x i16> undef, <8 x i32> zeroinitializer
  %19 = bitcast <2 x i64> %7 to <16 x i8>
  %20 = bitcast <16 x i8> %12 to <8 x i16>
  %21 = sub <8 x i16> %20, %18
  %22 = shufflevector <16 x i8> %19, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 0, i32 16>
  %23 = bitcast <16 x i8> %22 to <2 x i64>
  %24 = bitcast <16 x i8> %22 to <8 x i16>
  %25 = add <8 x i16> %21, %24
  %26 = sub <8 x i16> zeroinitializer, %21
  %27 = icmp slt <8 x i16> %21, zeroinitializer
  %28 = select <8 x i1> %27, <8 x i16> %26, <8 x i16> %21
  %29 = sub <8 x i16> %25, %20
  %30 = sub <8 x i16> zeroinitializer, %29
  %31 = icmp slt <8 x i16> %29, zeroinitializer
  %32 = select <8 x i1> %31, <8 x i16> %30, <8 x i16> %29
  %33 = sub <8 x i16> %25, %18
  %34 = sub <8 x i16> zeroinitializer, %33
  %35 = icmp slt <8 x i16> %33, zeroinitializer
  %36 = select <8 x i1> %35, <8 x i16> %34, <8 x i16> %33
  %37 = icmp sgt <8 x i16> %28, %32
  %38 = icmp sgt <8 x i16> %28, %36
  %39 = or <8 x i1> %38, %37
  %40 = sext <8 x i1> %39 to <8 x i16>
  %41 = bitcast <8 x i16> %40 to <2 x i64>
  %42 = icmp sgt <8 x i16> %32, %36
  %43 = sext <8 x i1> %42 to <8 x i16>
  %44 = bitcast <8 x i16> %43 to <2 x i64>
  %45 = xor <2 x i64> %41, <i64 -1, i64 -1>
  %46 = and <2 x i64> %45, %23
  %47 = and <8 x i16> %18, %43
  %48 = bitcast <8 x i16> %47 to <2 x i64>
  %49 = xor <2 x i64> %44, <i64 -1, i64 -1>
  %50 = and <2 x i64> %49, %13
  %51 = or <2 x i64> %50, %48
  %52 = and <2 x i64> %51, %41
  %53 = or <2 x i64> %52, %46
  %54 = bitcast <2 x i64> %53 to <8 x i16>
  %55 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %54, <8 x i16> undef) #3
  %56 = bitcast <16 x i8> %55 to <2 x i64>
  %57 = extractelement <2 x i64> %56, i32 0
  %58 = bitcast i8* %0 to i64*
  store i64 %57, i64* %58, align 1
  %59 = getelementptr inbounds i8, i8* %0, i64 %1
  %60 = shufflevector <16 x i8> %19, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 1, i32 16>
  %61 = bitcast <16 x i8> %60 to <2 x i64>
  %62 = bitcast <16 x i8> %60 to <8 x i16>
  %63 = add <8 x i16> %21, %62
  %64 = sub <8 x i16> %63, %20
  %65 = sub <8 x i16> zeroinitializer, %64
  %66 = icmp slt <8 x i16> %64, zeroinitializer
  %67 = select <8 x i1> %66, <8 x i16> %65, <8 x i16> %64
  %68 = sub <8 x i16> %63, %18
  %69 = sub <8 x i16> zeroinitializer, %68
  %70 = icmp slt <8 x i16> %68, zeroinitializer
  %71 = select <8 x i1> %70, <8 x i16> %69, <8 x i16> %68
  %72 = icmp sgt <8 x i16> %28, %67
  %73 = icmp sgt <8 x i16> %28, %71
  %74 = or <8 x i1> %73, %72
  %75 = sext <8 x i1> %74 to <8 x i16>
  %76 = bitcast <8 x i16> %75 to <2 x i64>
  %77 = icmp sgt <8 x i16> %67, %71
  %78 = sext <8 x i1> %77 to <8 x i16>
  %79 = bitcast <8 x i16> %78 to <2 x i64>
  %80 = xor <2 x i64> %76, <i64 -1, i64 -1>
  %81 = and <2 x i64> %80, %61
  %82 = and <8 x i16> %18, %78
  %83 = bitcast <8 x i16> %82 to <2 x i64>
  %84 = xor <2 x i64> %79, <i64 -1, i64 -1>
  %85 = and <2 x i64> %84, %13
  %86 = or <2 x i64> %85, %83
  %87 = and <2 x i64> %86, %76
  %88 = or <2 x i64> %87, %81
  %89 = bitcast <2 x i64> %88 to <8 x i16>
  %90 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %89, <8 x i16> undef) #3
  %91 = bitcast <16 x i8> %90 to <2 x i64>
  %92 = extractelement <2 x i64> %91, i32 0
  %93 = bitcast i8* %59 to i64*
  store i64 %92, i64* %93, align 1
  %94 = getelementptr inbounds i8, i8* %59, i64 %1
  %95 = shufflevector <16 x i8> %19, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 2, i32 16>
  %96 = bitcast <16 x i8> %95 to <2 x i64>
  %97 = bitcast <16 x i8> %95 to <8 x i16>
  %98 = add <8 x i16> %21, %97
  %99 = sub <8 x i16> %98, %20
  %100 = sub <8 x i16> zeroinitializer, %99
  %101 = icmp slt <8 x i16> %99, zeroinitializer
  %102 = select <8 x i1> %101, <8 x i16> %100, <8 x i16> %99
  %103 = sub <8 x i16> %98, %18
  %104 = sub <8 x i16> zeroinitializer, %103
  %105 = icmp slt <8 x i16> %103, zeroinitializer
  %106 = select <8 x i1> %105, <8 x i16> %104, <8 x i16> %103
  %107 = icmp sgt <8 x i16> %28, %102
  %108 = icmp sgt <8 x i16> %28, %106
  %109 = or <8 x i1> %108, %107
  %110 = sext <8 x i1> %109 to <8 x i16>
  %111 = bitcast <8 x i16> %110 to <2 x i64>
  %112 = icmp sgt <8 x i16> %102, %106
  %113 = sext <8 x i1> %112 to <8 x i16>
  %114 = bitcast <8 x i16> %113 to <2 x i64>
  %115 = xor <2 x i64> %111, <i64 -1, i64 -1>
  %116 = and <2 x i64> %115, %96
  %117 = and <8 x i16> %18, %113
  %118 = bitcast <8 x i16> %117 to <2 x i64>
  %119 = xor <2 x i64> %114, <i64 -1, i64 -1>
  %120 = and <2 x i64> %119, %13
  %121 = or <2 x i64> %120, %118
  %122 = and <2 x i64> %121, %111
  %123 = or <2 x i64> %122, %116
  %124 = bitcast <2 x i64> %123 to <8 x i16>
  %125 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %124, <8 x i16> undef) #3
  %126 = bitcast <16 x i8> %125 to <2 x i64>
  %127 = extractelement <2 x i64> %126, i32 0
  %128 = bitcast i8* %94 to i64*
  store i64 %127, i64* %128, align 1
  %129 = getelementptr inbounds i8, i8* %94, i64 %1
  %130 = shufflevector <16 x i8> %19, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 3, i32 16>
  %131 = bitcast <16 x i8> %130 to <2 x i64>
  %132 = bitcast <16 x i8> %130 to <8 x i16>
  %133 = add <8 x i16> %21, %132
  %134 = sub <8 x i16> %133, %20
  %135 = sub <8 x i16> zeroinitializer, %134
  %136 = icmp slt <8 x i16> %134, zeroinitializer
  %137 = select <8 x i1> %136, <8 x i16> %135, <8 x i16> %134
  %138 = sub <8 x i16> %133, %18
  %139 = sub <8 x i16> zeroinitializer, %138
  %140 = icmp slt <8 x i16> %138, zeroinitializer
  %141 = select <8 x i1> %140, <8 x i16> %139, <8 x i16> %138
  %142 = icmp sgt <8 x i16> %28, %137
  %143 = icmp sgt <8 x i16> %28, %141
  %144 = or <8 x i1> %143, %142
  %145 = sext <8 x i1> %144 to <8 x i16>
  %146 = bitcast <8 x i16> %145 to <2 x i64>
  %147 = icmp sgt <8 x i16> %137, %141
  %148 = sext <8 x i1> %147 to <8 x i16>
  %149 = bitcast <8 x i16> %148 to <2 x i64>
  %150 = xor <2 x i64> %146, <i64 -1, i64 -1>
  %151 = and <2 x i64> %150, %131
  %152 = and <8 x i16> %18, %148
  %153 = bitcast <8 x i16> %152 to <2 x i64>
  %154 = xor <2 x i64> %149, <i64 -1, i64 -1>
  %155 = and <2 x i64> %154, %13
  %156 = or <2 x i64> %155, %153
  %157 = and <2 x i64> %156, %146
  %158 = or <2 x i64> %157, %151
  %159 = bitcast <2 x i64> %158 to <8 x i16>
  %160 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %159, <8 x i16> undef) #3
  %161 = bitcast <16 x i8> %160 to <2 x i64>
  %162 = extractelement <2 x i64> %161, i32 0
  %163 = bitcast i8* %129 to i64*
  store i64 %162, i64* %163, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_paeth_predictor_8x8_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %3 to i64*
  %6 = load i64, i64* %5, align 1
  %7 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %6, i32 0
  %8 = bitcast i8* %2 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = insertelement <2 x i64> undef, i64 %9, i32 0
  %11 = bitcast <2 x i64> %10 to <16 x i8>
  %12 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %13 = bitcast <16 x i8> %12 to <2 x i64>
  %14 = getelementptr inbounds i8, i8* %2, i64 -1
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i16
  %17 = insertelement <8 x i16> undef, i16 %16, i32 0
  %18 = shufflevector <8 x i16> %17, <8 x i16> undef, <8 x i32> zeroinitializer
  %19 = bitcast <2 x i64> %7 to <16 x i8>
  %20 = bitcast <16 x i8> %12 to <8 x i16>
  %21 = sub <8 x i16> %20, %18
  %22 = sub <8 x i16> zeroinitializer, %21
  %23 = icmp slt <8 x i16> %21, zeroinitializer
  %24 = select <8 x i1> %23, <8 x i16> %22, <8 x i16> %21
  br label %25

25:                                               ; preds = %25, %4
  %26 = phi i8* [ %0, %4 ], [ %65, %25 ]
  %27 = phi i32 [ 0, %4 ], [ %68, %25 ]
  %28 = phi <2 x i64> [ <i64 -9223231297218904064, i64 -9223231297218904064>, %4 ], [ %67, %25 ]
  %29 = phi <8 x i16> [ <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, %4 ], [ %66, %25 ]
  %30 = bitcast <2 x i64> %28 to <16 x i8>
  %31 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %19, <16 x i8> %30) #3
  %32 = bitcast <16 x i8> %31 to <2 x i64>
  %33 = bitcast <16 x i8> %31 to <8 x i16>
  %34 = add <8 x i16> %21, %33
  %35 = sub <8 x i16> %34, %20
  %36 = sub <8 x i16> zeroinitializer, %35
  %37 = icmp slt <8 x i16> %35, zeroinitializer
  %38 = select <8 x i1> %37, <8 x i16> %36, <8 x i16> %35
  %39 = sub <8 x i16> %34, %18
  %40 = sub <8 x i16> zeroinitializer, %39
  %41 = icmp slt <8 x i16> %39, zeroinitializer
  %42 = select <8 x i1> %41, <8 x i16> %40, <8 x i16> %39
  %43 = icmp sgt <8 x i16> %24, %38
  %44 = icmp sgt <8 x i16> %24, %42
  %45 = or <8 x i1> %44, %43
  %46 = sext <8 x i1> %45 to <8 x i16>
  %47 = bitcast <8 x i16> %46 to <2 x i64>
  %48 = icmp sgt <8 x i16> %38, %42
  %49 = sext <8 x i1> %48 to <8 x i16>
  %50 = bitcast <8 x i16> %49 to <2 x i64>
  %51 = xor <2 x i64> %47, <i64 -1, i64 -1>
  %52 = and <2 x i64> %51, %32
  %53 = and <8 x i16> %18, %49
  %54 = bitcast <8 x i16> %53 to <2 x i64>
  %55 = xor <2 x i64> %50, <i64 -1, i64 -1>
  %56 = and <2 x i64> %55, %13
  %57 = or <2 x i64> %56, %54
  %58 = and <2 x i64> %57, %47
  %59 = or <2 x i64> %58, %52
  %60 = bitcast <2 x i64> %59 to <8 x i16>
  %61 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %60, <8 x i16> undef) #3
  %62 = bitcast <16 x i8> %61 to <2 x i64>
  %63 = extractelement <2 x i64> %62, i32 0
  %64 = bitcast i8* %26 to i64*
  store i64 %63, i64* %64, align 1
  %65 = getelementptr inbounds i8, i8* %26, i64 %1
  %66 = add <8 x i16> %29, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %67 = bitcast <8 x i16> %66 to <2 x i64>
  %68 = add nuw nsw i32 %27, 1
  %69 = icmp eq i32 %68, 8
  br i1 %69, label %70, label %25

70:                                               ; preds = %25
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_paeth_predictor_8x16_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %3 to <16 x i8>*
  %6 = load <16 x i8>, <16 x i8>* %5, align 16
  %7 = bitcast i8* %2 to i64*
  %8 = load i64, i64* %7, align 1
  %9 = insertelement <2 x i64> undef, i64 %8, i32 0
  %10 = bitcast <2 x i64> %9 to <16 x i8>
  %11 = shufflevector <16 x i8> %10, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %12 = bitcast <16 x i8> %11 to <2 x i64>
  %13 = getelementptr inbounds i8, i8* %2, i64 -1
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i16
  %16 = insertelement <8 x i16> undef, i16 %15, i32 0
  %17 = shufflevector <8 x i16> %16, <8 x i16> undef, <8 x i32> zeroinitializer
  %18 = bitcast <16 x i8> %11 to <8 x i16>
  %19 = sub <8 x i16> %18, %17
  %20 = sub <8 x i16> zeroinitializer, %19
  %21 = icmp slt <8 x i16> %19, zeroinitializer
  %22 = select <8 x i1> %21, <8 x i16> %20, <8 x i16> %19
  br label %23

23:                                               ; preds = %23, %4
  %24 = phi i8* [ %0, %4 ], [ %63, %23 ]
  %25 = phi i32 [ 0, %4 ], [ %66, %23 ]
  %26 = phi <2 x i64> [ <i64 -9223231297218904064, i64 -9223231297218904064>, %4 ], [ %65, %23 ]
  %27 = phi <8 x i16> [ <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, %4 ], [ %64, %23 ]
  %28 = bitcast <2 x i64> %26 to <16 x i8>
  %29 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %6, <16 x i8> %28) #3
  %30 = bitcast <16 x i8> %29 to <2 x i64>
  %31 = bitcast <16 x i8> %29 to <8 x i16>
  %32 = add <8 x i16> %19, %31
  %33 = sub <8 x i16> %32, %18
  %34 = sub <8 x i16> zeroinitializer, %33
  %35 = icmp slt <8 x i16> %33, zeroinitializer
  %36 = select <8 x i1> %35, <8 x i16> %34, <8 x i16> %33
  %37 = sub <8 x i16> %32, %17
  %38 = sub <8 x i16> zeroinitializer, %37
  %39 = icmp slt <8 x i16> %37, zeroinitializer
  %40 = select <8 x i1> %39, <8 x i16> %38, <8 x i16> %37
  %41 = icmp sgt <8 x i16> %22, %36
  %42 = icmp sgt <8 x i16> %22, %40
  %43 = or <8 x i1> %42, %41
  %44 = sext <8 x i1> %43 to <8 x i16>
  %45 = bitcast <8 x i16> %44 to <2 x i64>
  %46 = icmp sgt <8 x i16> %36, %40
  %47 = sext <8 x i1> %46 to <8 x i16>
  %48 = bitcast <8 x i16> %47 to <2 x i64>
  %49 = xor <2 x i64> %45, <i64 -1, i64 -1>
  %50 = and <2 x i64> %49, %30
  %51 = and <8 x i16> %17, %47
  %52 = bitcast <8 x i16> %51 to <2 x i64>
  %53 = xor <2 x i64> %48, <i64 -1, i64 -1>
  %54 = and <2 x i64> %53, %12
  %55 = or <2 x i64> %54, %52
  %56 = and <2 x i64> %55, %45
  %57 = or <2 x i64> %56, %50
  %58 = bitcast <2 x i64> %57 to <8 x i16>
  %59 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %58, <8 x i16> undef) #3
  %60 = bitcast <16 x i8> %59 to <2 x i64>
  %61 = extractelement <2 x i64> %60, i32 0
  %62 = bitcast i8* %24 to i64*
  store i64 %61, i64* %62, align 1
  %63 = getelementptr inbounds i8, i8* %24, i64 %1
  %64 = add <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %65 = bitcast <8 x i16> %64 to <2 x i64>
  %66 = add nuw nsw i32 %25, 1
  %67 = icmp eq i32 %66, 16
  br i1 %67, label %68, label %23

68:                                               ; preds = %23
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_paeth_predictor_8x32_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %2 to i64*
  %6 = load i64, i64* %5, align 1
  %7 = insertelement <2 x i64> undef, i64 %6, i32 0
  %8 = bitcast <2 x i64> %7 to <16 x i8>
  %9 = shufflevector <16 x i8> %8, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %10 = bitcast <16 x i8> %9 to <2 x i64>
  %11 = getelementptr inbounds i8, i8* %2, i64 -1
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i16
  %14 = insertelement <8 x i16> undef, i16 %13, i32 0
  %15 = shufflevector <8 x i16> %14, <8 x i16> undef, <8 x i32> zeroinitializer
  %16 = bitcast <16 x i8> %9 to <8 x i16>
  %17 = sub <8 x i16> %16, %15
  %18 = bitcast i8* %3 to <16 x i8>*
  %19 = load <16 x i8>, <16 x i8>* %18, align 16
  %20 = sub <8 x i16> zeroinitializer, %17
  %21 = icmp slt <8 x i16> %17, zeroinitializer
  %22 = select <8 x i1> %21, <8 x i16> %20, <8 x i16> %17
  br label %27

23:                                               ; preds = %27
  %24 = getelementptr inbounds i8, i8* %3, i64 16
  %25 = bitcast i8* %24 to <16 x i8>*
  %26 = load <16 x i8>, <16 x i8>* %25, align 16
  br label %72

27:                                               ; preds = %27, %4
  %28 = phi i8* [ %0, %4 ], [ %67, %27 ]
  %29 = phi i32 [ 0, %4 ], [ %70, %27 ]
  %30 = phi <2 x i64> [ <i64 -9223231297218904064, i64 -9223231297218904064>, %4 ], [ %69, %27 ]
  %31 = phi <8 x i16> [ <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, %4 ], [ %68, %27 ]
  %32 = bitcast <2 x i64> %30 to <16 x i8>
  %33 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %19, <16 x i8> %32) #3
  %34 = bitcast <16 x i8> %33 to <2 x i64>
  %35 = bitcast <16 x i8> %33 to <8 x i16>
  %36 = add <8 x i16> %17, %35
  %37 = sub <8 x i16> %36, %16
  %38 = sub <8 x i16> zeroinitializer, %37
  %39 = icmp slt <8 x i16> %37, zeroinitializer
  %40 = select <8 x i1> %39, <8 x i16> %38, <8 x i16> %37
  %41 = sub <8 x i16> %36, %15
  %42 = sub <8 x i16> zeroinitializer, %41
  %43 = icmp slt <8 x i16> %41, zeroinitializer
  %44 = select <8 x i1> %43, <8 x i16> %42, <8 x i16> %41
  %45 = icmp sgt <8 x i16> %22, %40
  %46 = icmp sgt <8 x i16> %22, %44
  %47 = or <8 x i1> %46, %45
  %48 = sext <8 x i1> %47 to <8 x i16>
  %49 = bitcast <8 x i16> %48 to <2 x i64>
  %50 = icmp sgt <8 x i16> %40, %44
  %51 = sext <8 x i1> %50 to <8 x i16>
  %52 = bitcast <8 x i16> %51 to <2 x i64>
  %53 = xor <2 x i64> %49, <i64 -1, i64 -1>
  %54 = and <2 x i64> %53, %34
  %55 = and <8 x i16> %15, %51
  %56 = bitcast <8 x i16> %55 to <2 x i64>
  %57 = xor <2 x i64> %52, <i64 -1, i64 -1>
  %58 = and <2 x i64> %57, %10
  %59 = or <2 x i64> %58, %56
  %60 = and <2 x i64> %59, %49
  %61 = or <2 x i64> %60, %54
  %62 = bitcast <2 x i64> %61 to <8 x i16>
  %63 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %62, <8 x i16> undef) #3
  %64 = bitcast <16 x i8> %63 to <2 x i64>
  %65 = extractelement <2 x i64> %64, i32 0
  %66 = bitcast i8* %28 to i64*
  store i64 %65, i64* %66, align 1
  %67 = getelementptr inbounds i8, i8* %28, i64 %1
  %68 = add <8 x i16> %31, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %69 = bitcast <8 x i16> %68 to <2 x i64>
  %70 = add nuw nsw i32 %29, 1
  %71 = icmp eq i32 %70, 16
  br i1 %71, label %23, label %27

72:                                               ; preds = %72, %23
  %73 = phi i8* [ %67, %23 ], [ %112, %72 ]
  %74 = phi i32 [ 0, %23 ], [ %115, %72 ]
  %75 = phi <2 x i64> [ <i64 -9223231297218904064, i64 -9223231297218904064>, %23 ], [ %114, %72 ]
  %76 = phi <8 x i16> [ <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, %23 ], [ %113, %72 ]
  %77 = bitcast <2 x i64> %75 to <16 x i8>
  %78 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %26, <16 x i8> %77) #3
  %79 = bitcast <16 x i8> %78 to <2 x i64>
  %80 = bitcast <16 x i8> %78 to <8 x i16>
  %81 = add <8 x i16> %17, %80
  %82 = sub <8 x i16> %81, %16
  %83 = sub <8 x i16> zeroinitializer, %82
  %84 = icmp slt <8 x i16> %82, zeroinitializer
  %85 = select <8 x i1> %84, <8 x i16> %83, <8 x i16> %82
  %86 = sub <8 x i16> %81, %15
  %87 = sub <8 x i16> zeroinitializer, %86
  %88 = icmp slt <8 x i16> %86, zeroinitializer
  %89 = select <8 x i1> %88, <8 x i16> %87, <8 x i16> %86
  %90 = icmp sgt <8 x i16> %22, %85
  %91 = icmp sgt <8 x i16> %22, %89
  %92 = or <8 x i1> %91, %90
  %93 = sext <8 x i1> %92 to <8 x i16>
  %94 = bitcast <8 x i16> %93 to <2 x i64>
  %95 = icmp sgt <8 x i16> %85, %89
  %96 = sext <8 x i1> %95 to <8 x i16>
  %97 = bitcast <8 x i16> %96 to <2 x i64>
  %98 = xor <2 x i64> %94, <i64 -1, i64 -1>
  %99 = and <2 x i64> %98, %79
  %100 = and <8 x i16> %15, %96
  %101 = bitcast <8 x i16> %100 to <2 x i64>
  %102 = xor <2 x i64> %97, <i64 -1, i64 -1>
  %103 = and <2 x i64> %102, %10
  %104 = or <2 x i64> %103, %101
  %105 = and <2 x i64> %104, %94
  %106 = or <2 x i64> %105, %99
  %107 = bitcast <2 x i64> %106 to <8 x i16>
  %108 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %107, <8 x i16> undef) #3
  %109 = bitcast <16 x i8> %108 to <2 x i64>
  %110 = extractelement <2 x i64> %109, i32 0
  %111 = bitcast i8* %73 to i64*
  store i64 %110, i64* %111, align 1
  %112 = getelementptr inbounds i8, i8* %73, i64 %1
  %113 = add <8 x i16> %76, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %114 = bitcast <8 x i16> %113 to <2 x i64>
  %115 = add nuw nsw i32 %74, 1
  %116 = icmp eq i32 %115, 16
  br i1 %116, label %117, label %72

117:                                              ; preds = %72
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_paeth_predictor_16x4_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %3 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %6, i32 0
  %8 = bitcast i8* %2 to <16 x i8>*
  %9 = load <16 x i8>, <16 x i8>* %8, align 16
  %10 = shufflevector <16 x i8> %9, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %11 = bitcast <16 x i8> %10 to <2 x i64>
  %12 = shufflevector <16 x i8> %9, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %13 = bitcast <16 x i8> %12 to <2 x i64>
  %14 = getelementptr inbounds i8, i8* %2, i64 -1
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i16
  %17 = insertelement <8 x i16> undef, i16 %16, i32 0
  %18 = shufflevector <8 x i16> %17, <8 x i16> undef, <8 x i32> zeroinitializer
  %19 = bitcast <4 x i32> %7 to <16 x i8>
  %20 = bitcast <16 x i8> %10 to <8 x i16>
  %21 = sub <8 x i16> %20, %18
  %22 = bitcast <16 x i8> %12 to <8 x i16>
  %23 = sub <8 x i16> zeroinitializer, %21
  %24 = icmp slt <8 x i16> %21, zeroinitializer
  %25 = select <8 x i1> %24, <8 x i16> %23, <8 x i16> %21
  br label %27

26:                                               ; preds = %27
  ret void

27:                                               ; preds = %27, %4
  %28 = phi i8* [ %0, %4 ], [ %96, %27 ]
  %29 = phi i32 [ 0, %4 ], [ %99, %27 ]
  %30 = phi <2 x i64> [ <i64 -9223231297218904064, i64 -9223231297218904064>, %4 ], [ %98, %27 ]
  %31 = phi <8 x i16> [ <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, %4 ], [ %97, %27 ]
  %32 = bitcast <2 x i64> %30 to <16 x i8>
  %33 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %19, <16 x i8> %32) #3
  %34 = bitcast <16 x i8> %33 to <2 x i64>
  %35 = bitcast <16 x i8> %33 to <8 x i16>
  %36 = add <8 x i16> %21, %35
  %37 = sub <8 x i16> %36, %20
  %38 = sub <8 x i16> zeroinitializer, %37
  %39 = icmp slt <8 x i16> %37, zeroinitializer
  %40 = select <8 x i1> %39, <8 x i16> %38, <8 x i16> %37
  %41 = sub <8 x i16> %36, %18
  %42 = sub <8 x i16> zeroinitializer, %41
  %43 = icmp slt <8 x i16> %41, zeroinitializer
  %44 = select <8 x i1> %43, <8 x i16> %42, <8 x i16> %41
  %45 = icmp sgt <8 x i16> %25, %40
  %46 = icmp sgt <8 x i16> %25, %44
  %47 = or <8 x i1> %46, %45
  %48 = sext <8 x i1> %47 to <8 x i16>
  %49 = bitcast <8 x i16> %48 to <2 x i64>
  %50 = icmp sgt <8 x i16> %40, %44
  %51 = sext <8 x i1> %50 to <8 x i16>
  %52 = bitcast <8 x i16> %51 to <2 x i64>
  %53 = xor <2 x i64> %49, <i64 -1, i64 -1>
  %54 = and <2 x i64> %53, %34
  %55 = and <8 x i16> %18, %51
  %56 = bitcast <8 x i16> %55 to <2 x i64>
  %57 = xor <2 x i64> %52, <i64 -1, i64 -1>
  %58 = and <2 x i64> %57, %11
  %59 = or <2 x i64> %58, %56
  %60 = and <2 x i64> %59, %49
  %61 = or <2 x i64> %60, %54
  %62 = sub <8 x i16> %35, %18
  %63 = add <8 x i16> %62, %22
  %64 = sub <8 x i16> %63, %35
  %65 = sub <8 x i16> zeroinitializer, %64
  %66 = icmp slt <8 x i16> %64, zeroinitializer
  %67 = select <8 x i1> %66, <8 x i16> %65, <8 x i16> %64
  %68 = sub <8 x i16> zeroinitializer, %62
  %69 = icmp slt <8 x i16> %62, zeroinitializer
  %70 = select <8 x i1> %69, <8 x i16> %68, <8 x i16> %62
  %71 = sub <8 x i16> %63, %18
  %72 = sub <8 x i16> zeroinitializer, %71
  %73 = icmp slt <8 x i16> %71, zeroinitializer
  %74 = select <8 x i1> %73, <8 x i16> %72, <8 x i16> %71
  %75 = icmp sgt <8 x i16> %67, %70
  %76 = icmp sgt <8 x i16> %67, %74
  %77 = or <8 x i1> %76, %75
  %78 = sext <8 x i1> %77 to <8 x i16>
  %79 = bitcast <8 x i16> %78 to <2 x i64>
  %80 = icmp sgt <8 x i16> %70, %74
  %81 = sext <8 x i1> %80 to <8 x i16>
  %82 = bitcast <8 x i16> %81 to <2 x i64>
  %83 = xor <2 x i64> %79, <i64 -1, i64 -1>
  %84 = and <2 x i64> %83, %34
  %85 = and <8 x i16> %18, %81
  %86 = bitcast <8 x i16> %85 to <2 x i64>
  %87 = xor <2 x i64> %82, <i64 -1, i64 -1>
  %88 = and <2 x i64> %87, %13
  %89 = or <2 x i64> %88, %86
  %90 = and <2 x i64> %89, %79
  %91 = or <2 x i64> %90, %84
  %92 = bitcast <2 x i64> %61 to <8 x i16>
  %93 = bitcast <2 x i64> %91 to <8 x i16>
  %94 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %92, <8 x i16> %93) #3
  %95 = bitcast i8* %28 to <16 x i8>*
  store <16 x i8> %94, <16 x i8>* %95, align 16
  %96 = getelementptr inbounds i8, i8* %28, i64 %1
  %97 = add <8 x i16> %31, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %98 = bitcast <8 x i16> %97 to <2 x i64>
  %99 = add nuw nsw i32 %29, 1
  %100 = icmp eq i32 %99, 4
  br i1 %100, label %26, label %27
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_paeth_predictor_16x8_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %3 to i64*
  %6 = load i64, i64* %5, align 1
  %7 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %6, i32 0
  %8 = bitcast i8* %2 to <16 x i8>*
  %9 = load <16 x i8>, <16 x i8>* %8, align 16
  %10 = shufflevector <16 x i8> %9, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %11 = bitcast <16 x i8> %10 to <2 x i64>
  %12 = shufflevector <16 x i8> %9, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %13 = bitcast <16 x i8> %12 to <2 x i64>
  %14 = getelementptr inbounds i8, i8* %2, i64 -1
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i16
  %17 = insertelement <8 x i16> undef, i16 %16, i32 0
  %18 = shufflevector <8 x i16> %17, <8 x i16> undef, <8 x i32> zeroinitializer
  %19 = bitcast <2 x i64> %7 to <16 x i8>
  %20 = bitcast <16 x i8> %10 to <8 x i16>
  %21 = sub <8 x i16> %20, %18
  %22 = bitcast <16 x i8> %12 to <8 x i16>
  %23 = sub <8 x i16> zeroinitializer, %21
  %24 = icmp slt <8 x i16> %21, zeroinitializer
  %25 = select <8 x i1> %24, <8 x i16> %23, <8 x i16> %21
  br label %26

26:                                               ; preds = %26, %4
  %27 = phi i8* [ %0, %4 ], [ %95, %26 ]
  %28 = phi i32 [ 0, %4 ], [ %98, %26 ]
  %29 = phi <2 x i64> [ <i64 -9223231297218904064, i64 -9223231297218904064>, %4 ], [ %97, %26 ]
  %30 = phi <8 x i16> [ <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, %4 ], [ %96, %26 ]
  %31 = bitcast <2 x i64> %29 to <16 x i8>
  %32 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %19, <16 x i8> %31) #3
  %33 = bitcast <16 x i8> %32 to <2 x i64>
  %34 = bitcast <16 x i8> %32 to <8 x i16>
  %35 = add <8 x i16> %21, %34
  %36 = sub <8 x i16> %35, %20
  %37 = sub <8 x i16> zeroinitializer, %36
  %38 = icmp slt <8 x i16> %36, zeroinitializer
  %39 = select <8 x i1> %38, <8 x i16> %37, <8 x i16> %36
  %40 = sub <8 x i16> %35, %18
  %41 = sub <8 x i16> zeroinitializer, %40
  %42 = icmp slt <8 x i16> %40, zeroinitializer
  %43 = select <8 x i1> %42, <8 x i16> %41, <8 x i16> %40
  %44 = icmp sgt <8 x i16> %25, %39
  %45 = icmp sgt <8 x i16> %25, %43
  %46 = or <8 x i1> %45, %44
  %47 = sext <8 x i1> %46 to <8 x i16>
  %48 = bitcast <8 x i16> %47 to <2 x i64>
  %49 = icmp sgt <8 x i16> %39, %43
  %50 = sext <8 x i1> %49 to <8 x i16>
  %51 = bitcast <8 x i16> %50 to <2 x i64>
  %52 = xor <2 x i64> %48, <i64 -1, i64 -1>
  %53 = and <2 x i64> %52, %33
  %54 = and <8 x i16> %18, %50
  %55 = bitcast <8 x i16> %54 to <2 x i64>
  %56 = xor <2 x i64> %51, <i64 -1, i64 -1>
  %57 = and <2 x i64> %56, %11
  %58 = or <2 x i64> %57, %55
  %59 = and <2 x i64> %58, %48
  %60 = or <2 x i64> %59, %53
  %61 = sub <8 x i16> %34, %18
  %62 = add <8 x i16> %61, %22
  %63 = sub <8 x i16> %62, %34
  %64 = sub <8 x i16> zeroinitializer, %63
  %65 = icmp slt <8 x i16> %63, zeroinitializer
  %66 = select <8 x i1> %65, <8 x i16> %64, <8 x i16> %63
  %67 = sub <8 x i16> zeroinitializer, %61
  %68 = icmp slt <8 x i16> %61, zeroinitializer
  %69 = select <8 x i1> %68, <8 x i16> %67, <8 x i16> %61
  %70 = sub <8 x i16> %62, %18
  %71 = sub <8 x i16> zeroinitializer, %70
  %72 = icmp slt <8 x i16> %70, zeroinitializer
  %73 = select <8 x i1> %72, <8 x i16> %71, <8 x i16> %70
  %74 = icmp sgt <8 x i16> %66, %69
  %75 = icmp sgt <8 x i16> %66, %73
  %76 = or <8 x i1> %75, %74
  %77 = sext <8 x i1> %76 to <8 x i16>
  %78 = bitcast <8 x i16> %77 to <2 x i64>
  %79 = icmp sgt <8 x i16> %69, %73
  %80 = sext <8 x i1> %79 to <8 x i16>
  %81 = bitcast <8 x i16> %80 to <2 x i64>
  %82 = xor <2 x i64> %78, <i64 -1, i64 -1>
  %83 = and <2 x i64> %82, %33
  %84 = and <8 x i16> %18, %80
  %85 = bitcast <8 x i16> %84 to <2 x i64>
  %86 = xor <2 x i64> %81, <i64 -1, i64 -1>
  %87 = and <2 x i64> %86, %13
  %88 = or <2 x i64> %87, %85
  %89 = and <2 x i64> %88, %78
  %90 = or <2 x i64> %89, %83
  %91 = bitcast <2 x i64> %60 to <8 x i16>
  %92 = bitcast <2 x i64> %90 to <8 x i16>
  %93 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %91, <8 x i16> %92) #3
  %94 = bitcast i8* %27 to <16 x i8>*
  store <16 x i8> %93, <16 x i8>* %94, align 16
  %95 = getelementptr inbounds i8, i8* %27, i64 %1
  %96 = add <8 x i16> %30, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %97 = bitcast <8 x i16> %96 to <2 x i64>
  %98 = add nuw nsw i32 %28, 1
  %99 = icmp eq i32 %98, 8
  br i1 %99, label %100, label %26

100:                                              ; preds = %26
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_paeth_predictor_16x16_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %3 to <16 x i8>*
  %6 = load <16 x i8>, <16 x i8>* %5, align 16
  %7 = bitcast i8* %2 to <16 x i8>*
  %8 = load <16 x i8>, <16 x i8>* %7, align 16
  %9 = shufflevector <16 x i8> %8, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %10 = bitcast <16 x i8> %9 to <2 x i64>
  %11 = shufflevector <16 x i8> %8, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %12 = bitcast <16 x i8> %11 to <2 x i64>
  %13 = getelementptr inbounds i8, i8* %2, i64 -1
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i16
  %16 = insertelement <8 x i16> undef, i16 %15, i32 0
  %17 = shufflevector <8 x i16> %16, <8 x i16> undef, <8 x i32> zeroinitializer
  %18 = bitcast <16 x i8> %9 to <8 x i16>
  %19 = sub <8 x i16> %18, %17
  %20 = bitcast <16 x i8> %11 to <8 x i16>
  %21 = sub <8 x i16> zeroinitializer, %19
  %22 = icmp slt <8 x i16> %19, zeroinitializer
  %23 = select <8 x i1> %22, <8 x i16> %21, <8 x i16> %19
  br label %24

24:                                               ; preds = %24, %4
  %25 = phi i8* [ %0, %4 ], [ %93, %24 ]
  %26 = phi i32 [ 0, %4 ], [ %96, %24 ]
  %27 = phi <2 x i64> [ <i64 -9223231297218904064, i64 -9223231297218904064>, %4 ], [ %95, %24 ]
  %28 = phi <8 x i16> [ <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, %4 ], [ %94, %24 ]
  %29 = bitcast <2 x i64> %27 to <16 x i8>
  %30 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %6, <16 x i8> %29) #3
  %31 = bitcast <16 x i8> %30 to <2 x i64>
  %32 = bitcast <16 x i8> %30 to <8 x i16>
  %33 = add <8 x i16> %19, %32
  %34 = sub <8 x i16> %33, %18
  %35 = sub <8 x i16> zeroinitializer, %34
  %36 = icmp slt <8 x i16> %34, zeroinitializer
  %37 = select <8 x i1> %36, <8 x i16> %35, <8 x i16> %34
  %38 = sub <8 x i16> %33, %17
  %39 = sub <8 x i16> zeroinitializer, %38
  %40 = icmp slt <8 x i16> %38, zeroinitializer
  %41 = select <8 x i1> %40, <8 x i16> %39, <8 x i16> %38
  %42 = icmp sgt <8 x i16> %23, %37
  %43 = icmp sgt <8 x i16> %23, %41
  %44 = or <8 x i1> %43, %42
  %45 = sext <8 x i1> %44 to <8 x i16>
  %46 = bitcast <8 x i16> %45 to <2 x i64>
  %47 = icmp sgt <8 x i16> %37, %41
  %48 = sext <8 x i1> %47 to <8 x i16>
  %49 = bitcast <8 x i16> %48 to <2 x i64>
  %50 = xor <2 x i64> %46, <i64 -1, i64 -1>
  %51 = and <2 x i64> %50, %31
  %52 = and <8 x i16> %17, %48
  %53 = bitcast <8 x i16> %52 to <2 x i64>
  %54 = xor <2 x i64> %49, <i64 -1, i64 -1>
  %55 = and <2 x i64> %54, %10
  %56 = or <2 x i64> %55, %53
  %57 = and <2 x i64> %56, %46
  %58 = or <2 x i64> %57, %51
  %59 = sub <8 x i16> %32, %17
  %60 = add <8 x i16> %59, %20
  %61 = sub <8 x i16> %60, %32
  %62 = sub <8 x i16> zeroinitializer, %61
  %63 = icmp slt <8 x i16> %61, zeroinitializer
  %64 = select <8 x i1> %63, <8 x i16> %62, <8 x i16> %61
  %65 = sub <8 x i16> zeroinitializer, %59
  %66 = icmp slt <8 x i16> %59, zeroinitializer
  %67 = select <8 x i1> %66, <8 x i16> %65, <8 x i16> %59
  %68 = sub <8 x i16> %60, %17
  %69 = sub <8 x i16> zeroinitializer, %68
  %70 = icmp slt <8 x i16> %68, zeroinitializer
  %71 = select <8 x i1> %70, <8 x i16> %69, <8 x i16> %68
  %72 = icmp sgt <8 x i16> %64, %67
  %73 = icmp sgt <8 x i16> %64, %71
  %74 = or <8 x i1> %73, %72
  %75 = sext <8 x i1> %74 to <8 x i16>
  %76 = bitcast <8 x i16> %75 to <2 x i64>
  %77 = icmp sgt <8 x i16> %67, %71
  %78 = sext <8 x i1> %77 to <8 x i16>
  %79 = bitcast <8 x i16> %78 to <2 x i64>
  %80 = xor <2 x i64> %76, <i64 -1, i64 -1>
  %81 = and <2 x i64> %80, %31
  %82 = and <8 x i16> %17, %78
  %83 = bitcast <8 x i16> %82 to <2 x i64>
  %84 = xor <2 x i64> %79, <i64 -1, i64 -1>
  %85 = and <2 x i64> %84, %12
  %86 = or <2 x i64> %85, %83
  %87 = and <2 x i64> %86, %76
  %88 = or <2 x i64> %87, %81
  %89 = bitcast <2 x i64> %58 to <8 x i16>
  %90 = bitcast <2 x i64> %88 to <8 x i16>
  %91 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %89, <8 x i16> %90) #3
  %92 = bitcast i8* %25 to <16 x i8>*
  store <16 x i8> %91, <16 x i8>* %92, align 16
  %93 = getelementptr inbounds i8, i8* %25, i64 %1
  %94 = add <8 x i16> %28, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %95 = bitcast <8 x i16> %94 to <2 x i64>
  %96 = add nuw nsw i32 %26, 1
  %97 = icmp eq i32 %96, 16
  br i1 %97, label %98, label %24

98:                                               ; preds = %24
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_paeth_predictor_16x32_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %3 to <16 x i8>*
  %6 = load <16 x i8>, <16 x i8>* %5, align 16
  %7 = bitcast i8* %2 to <16 x i8>*
  %8 = load <16 x i8>, <16 x i8>* %7, align 16
  %9 = shufflevector <16 x i8> %8, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %10 = bitcast <16 x i8> %9 to <2 x i64>
  %11 = shufflevector <16 x i8> %8, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %12 = bitcast <16 x i8> %11 to <2 x i64>
  %13 = getelementptr inbounds i8, i8* %2, i64 -1
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i16
  %16 = insertelement <8 x i16> undef, i16 %15, i32 0
  %17 = shufflevector <8 x i16> %16, <8 x i16> undef, <8 x i32> zeroinitializer
  %18 = bitcast <16 x i8> %9 to <8 x i16>
  %19 = sub <8 x i16> %18, %17
  %20 = bitcast <16 x i8> %11 to <8 x i16>
  %21 = sub <8 x i16> zeroinitializer, %19
  %22 = icmp slt <8 x i16> %19, zeroinitializer
  %23 = select <8 x i1> %22, <8 x i16> %21, <8 x i16> %19
  br label %24

24:                                               ; preds = %24, %4
  %25 = phi i8* [ %0, %4 ], [ %93, %24 ]
  %26 = phi i32 [ 0, %4 ], [ %96, %24 ]
  %27 = phi <2 x i64> [ <i64 -9223231297218904064, i64 -9223231297218904064>, %4 ], [ %95, %24 ]
  %28 = phi <8 x i16> [ <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, %4 ], [ %94, %24 ]
  %29 = bitcast <2 x i64> %27 to <16 x i8>
  %30 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %6, <16 x i8> %29) #3
  %31 = bitcast <16 x i8> %30 to <2 x i64>
  %32 = bitcast <16 x i8> %30 to <8 x i16>
  %33 = add <8 x i16> %19, %32
  %34 = sub <8 x i16> %33, %18
  %35 = sub <8 x i16> zeroinitializer, %34
  %36 = icmp slt <8 x i16> %34, zeroinitializer
  %37 = select <8 x i1> %36, <8 x i16> %35, <8 x i16> %34
  %38 = sub <8 x i16> %33, %17
  %39 = sub <8 x i16> zeroinitializer, %38
  %40 = icmp slt <8 x i16> %38, zeroinitializer
  %41 = select <8 x i1> %40, <8 x i16> %39, <8 x i16> %38
  %42 = icmp sgt <8 x i16> %23, %37
  %43 = icmp sgt <8 x i16> %23, %41
  %44 = or <8 x i1> %43, %42
  %45 = sext <8 x i1> %44 to <8 x i16>
  %46 = bitcast <8 x i16> %45 to <2 x i64>
  %47 = icmp sgt <8 x i16> %37, %41
  %48 = sext <8 x i1> %47 to <8 x i16>
  %49 = bitcast <8 x i16> %48 to <2 x i64>
  %50 = xor <2 x i64> %46, <i64 -1, i64 -1>
  %51 = and <2 x i64> %50, %31
  %52 = and <8 x i16> %17, %48
  %53 = bitcast <8 x i16> %52 to <2 x i64>
  %54 = xor <2 x i64> %49, <i64 -1, i64 -1>
  %55 = and <2 x i64> %54, %10
  %56 = or <2 x i64> %55, %53
  %57 = and <2 x i64> %56, %46
  %58 = or <2 x i64> %57, %51
  %59 = sub <8 x i16> %32, %17
  %60 = add <8 x i16> %59, %20
  %61 = sub <8 x i16> %60, %32
  %62 = sub <8 x i16> zeroinitializer, %61
  %63 = icmp slt <8 x i16> %61, zeroinitializer
  %64 = select <8 x i1> %63, <8 x i16> %62, <8 x i16> %61
  %65 = sub <8 x i16> zeroinitializer, %59
  %66 = icmp slt <8 x i16> %59, zeroinitializer
  %67 = select <8 x i1> %66, <8 x i16> %65, <8 x i16> %59
  %68 = sub <8 x i16> %60, %17
  %69 = sub <8 x i16> zeroinitializer, %68
  %70 = icmp slt <8 x i16> %68, zeroinitializer
  %71 = select <8 x i1> %70, <8 x i16> %69, <8 x i16> %68
  %72 = icmp sgt <8 x i16> %64, %67
  %73 = icmp sgt <8 x i16> %64, %71
  %74 = or <8 x i1> %73, %72
  %75 = sext <8 x i1> %74 to <8 x i16>
  %76 = bitcast <8 x i16> %75 to <2 x i64>
  %77 = icmp sgt <8 x i16> %67, %71
  %78 = sext <8 x i1> %77 to <8 x i16>
  %79 = bitcast <8 x i16> %78 to <2 x i64>
  %80 = xor <2 x i64> %76, <i64 -1, i64 -1>
  %81 = and <2 x i64> %80, %31
  %82 = and <8 x i16> %17, %78
  %83 = bitcast <8 x i16> %82 to <2 x i64>
  %84 = xor <2 x i64> %79, <i64 -1, i64 -1>
  %85 = and <2 x i64> %84, %12
  %86 = or <2 x i64> %85, %83
  %87 = and <2 x i64> %86, %76
  %88 = or <2 x i64> %87, %81
  %89 = bitcast <2 x i64> %58 to <8 x i16>
  %90 = bitcast <2 x i64> %88 to <8 x i16>
  %91 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %89, <8 x i16> %90) #3
  %92 = bitcast i8* %25 to <16 x i8>*
  store <16 x i8> %91, <16 x i8>* %92, align 16
  %93 = getelementptr inbounds i8, i8* %25, i64 %1
  %94 = add <8 x i16> %28, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %95 = bitcast <8 x i16> %94 to <2 x i64>
  %96 = add nuw nsw i32 %26, 1
  %97 = icmp eq i32 %96, 16
  br i1 %97, label %98, label %24

98:                                               ; preds = %24
  %99 = getelementptr inbounds i8, i8* %3, i64 16
  %100 = bitcast i8* %99 to <16 x i8>*
  %101 = load <16 x i8>, <16 x i8>* %100, align 16
  br label %102

102:                                              ; preds = %102, %98
  %103 = phi i8* [ %93, %98 ], [ %171, %102 ]
  %104 = phi i32 [ 0, %98 ], [ %174, %102 ]
  %105 = phi <2 x i64> [ <i64 -9223231297218904064, i64 -9223231297218904064>, %98 ], [ %173, %102 ]
  %106 = phi <8 x i16> [ <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, %98 ], [ %172, %102 ]
  %107 = bitcast <2 x i64> %105 to <16 x i8>
  %108 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %101, <16 x i8> %107) #3
  %109 = bitcast <16 x i8> %108 to <2 x i64>
  %110 = bitcast <16 x i8> %108 to <8 x i16>
  %111 = add <8 x i16> %19, %110
  %112 = sub <8 x i16> %111, %18
  %113 = sub <8 x i16> zeroinitializer, %112
  %114 = icmp slt <8 x i16> %112, zeroinitializer
  %115 = select <8 x i1> %114, <8 x i16> %113, <8 x i16> %112
  %116 = sub <8 x i16> %111, %17
  %117 = sub <8 x i16> zeroinitializer, %116
  %118 = icmp slt <8 x i16> %116, zeroinitializer
  %119 = select <8 x i1> %118, <8 x i16> %117, <8 x i16> %116
  %120 = icmp sgt <8 x i16> %23, %115
  %121 = icmp sgt <8 x i16> %23, %119
  %122 = or <8 x i1> %121, %120
  %123 = sext <8 x i1> %122 to <8 x i16>
  %124 = bitcast <8 x i16> %123 to <2 x i64>
  %125 = icmp sgt <8 x i16> %115, %119
  %126 = sext <8 x i1> %125 to <8 x i16>
  %127 = bitcast <8 x i16> %126 to <2 x i64>
  %128 = xor <2 x i64> %124, <i64 -1, i64 -1>
  %129 = and <2 x i64> %128, %109
  %130 = and <8 x i16> %17, %126
  %131 = bitcast <8 x i16> %130 to <2 x i64>
  %132 = xor <2 x i64> %127, <i64 -1, i64 -1>
  %133 = and <2 x i64> %132, %10
  %134 = or <2 x i64> %133, %131
  %135 = and <2 x i64> %134, %124
  %136 = or <2 x i64> %135, %129
  %137 = sub <8 x i16> %110, %17
  %138 = add <8 x i16> %137, %20
  %139 = sub <8 x i16> %138, %110
  %140 = sub <8 x i16> zeroinitializer, %139
  %141 = icmp slt <8 x i16> %139, zeroinitializer
  %142 = select <8 x i1> %141, <8 x i16> %140, <8 x i16> %139
  %143 = sub <8 x i16> zeroinitializer, %137
  %144 = icmp slt <8 x i16> %137, zeroinitializer
  %145 = select <8 x i1> %144, <8 x i16> %143, <8 x i16> %137
  %146 = sub <8 x i16> %138, %17
  %147 = sub <8 x i16> zeroinitializer, %146
  %148 = icmp slt <8 x i16> %146, zeroinitializer
  %149 = select <8 x i1> %148, <8 x i16> %147, <8 x i16> %146
  %150 = icmp sgt <8 x i16> %142, %145
  %151 = icmp sgt <8 x i16> %142, %149
  %152 = or <8 x i1> %151, %150
  %153 = sext <8 x i1> %152 to <8 x i16>
  %154 = bitcast <8 x i16> %153 to <2 x i64>
  %155 = icmp sgt <8 x i16> %145, %149
  %156 = sext <8 x i1> %155 to <8 x i16>
  %157 = bitcast <8 x i16> %156 to <2 x i64>
  %158 = xor <2 x i64> %154, <i64 -1, i64 -1>
  %159 = and <2 x i64> %158, %109
  %160 = and <8 x i16> %17, %156
  %161 = bitcast <8 x i16> %160 to <2 x i64>
  %162 = xor <2 x i64> %157, <i64 -1, i64 -1>
  %163 = and <2 x i64> %162, %12
  %164 = or <2 x i64> %163, %161
  %165 = and <2 x i64> %164, %154
  %166 = or <2 x i64> %165, %159
  %167 = bitcast <2 x i64> %136 to <8 x i16>
  %168 = bitcast <2 x i64> %166 to <8 x i16>
  %169 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %167, <8 x i16> %168) #3
  %170 = bitcast i8* %103 to <16 x i8>*
  store <16 x i8> %169, <16 x i8>* %170, align 16
  %171 = getelementptr inbounds i8, i8* %103, i64 %1
  %172 = add <8 x i16> %106, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %173 = bitcast <8 x i16> %172 to <2 x i64>
  %174 = add nuw nsw i32 %104, 1
  %175 = icmp eq i32 %174, 16
  br i1 %175, label %176, label %102

176:                                              ; preds = %102
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_paeth_predictor_16x64_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %2 to <16 x i8>*
  %6 = load <16 x i8>, <16 x i8>* %5, align 16
  %7 = shufflevector <16 x i8> %6, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %8 = bitcast <16 x i8> %7 to <2 x i64>
  %9 = shufflevector <16 x i8> %6, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %10 = bitcast <16 x i8> %9 to <2 x i64>
  %11 = getelementptr inbounds i8, i8* %2, i64 -1
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i16
  %14 = insertelement <8 x i16> undef, i16 %13, i32 0
  %15 = shufflevector <8 x i16> %14, <8 x i16> undef, <8 x i32> zeroinitializer
  %16 = bitcast <16 x i8> %7 to <8 x i16>
  %17 = sub <8 x i16> %16, %15
  %18 = bitcast <16 x i8> %9 to <8 x i16>
  %19 = sub <8 x i16> zeroinitializer, %17
  %20 = icmp slt <8 x i16> %17, zeroinitializer
  %21 = select <8 x i1> %20, <8 x i16> %19, <8 x i16> %17
  br label %23

22:                                               ; preds = %30
  ret void

23:                                               ; preds = %30, %4
  %24 = phi i64 [ 0, %4 ], [ %31, %30 ]
  %25 = phi i8* [ %0, %4 ], [ %102, %30 ]
  %26 = shl nsw i64 %24, 4
  %27 = getelementptr inbounds i8, i8* %3, i64 %26
  %28 = bitcast i8* %27 to <16 x i8>*
  %29 = load <16 x i8>, <16 x i8>* %28, align 16
  br label %33

30:                                               ; preds = %33
  %31 = add nuw nsw i64 %24, 1
  %32 = icmp eq i64 %31, 4
  br i1 %32, label %22, label %23

33:                                               ; preds = %33, %23
  %34 = phi i8* [ %25, %23 ], [ %102, %33 ]
  %35 = phi i32 [ 0, %23 ], [ %105, %33 ]
  %36 = phi <2 x i64> [ <i64 -9223231297218904064, i64 -9223231297218904064>, %23 ], [ %104, %33 ]
  %37 = phi <8 x i16> [ <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, %23 ], [ %103, %33 ]
  %38 = bitcast <2 x i64> %36 to <16 x i8>
  %39 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %29, <16 x i8> %38) #3
  %40 = bitcast <16 x i8> %39 to <2 x i64>
  %41 = bitcast <16 x i8> %39 to <8 x i16>
  %42 = add <8 x i16> %17, %41
  %43 = sub <8 x i16> %42, %16
  %44 = sub <8 x i16> zeroinitializer, %43
  %45 = icmp slt <8 x i16> %43, zeroinitializer
  %46 = select <8 x i1> %45, <8 x i16> %44, <8 x i16> %43
  %47 = sub <8 x i16> %42, %15
  %48 = sub <8 x i16> zeroinitializer, %47
  %49 = icmp slt <8 x i16> %47, zeroinitializer
  %50 = select <8 x i1> %49, <8 x i16> %48, <8 x i16> %47
  %51 = icmp sgt <8 x i16> %21, %46
  %52 = icmp sgt <8 x i16> %21, %50
  %53 = or <8 x i1> %52, %51
  %54 = sext <8 x i1> %53 to <8 x i16>
  %55 = bitcast <8 x i16> %54 to <2 x i64>
  %56 = icmp sgt <8 x i16> %46, %50
  %57 = sext <8 x i1> %56 to <8 x i16>
  %58 = bitcast <8 x i16> %57 to <2 x i64>
  %59 = xor <2 x i64> %55, <i64 -1, i64 -1>
  %60 = and <2 x i64> %59, %40
  %61 = and <8 x i16> %15, %57
  %62 = bitcast <8 x i16> %61 to <2 x i64>
  %63 = xor <2 x i64> %58, <i64 -1, i64 -1>
  %64 = and <2 x i64> %63, %8
  %65 = or <2 x i64> %64, %62
  %66 = and <2 x i64> %65, %55
  %67 = or <2 x i64> %66, %60
  %68 = sub <8 x i16> %41, %15
  %69 = add <8 x i16> %68, %18
  %70 = sub <8 x i16> %69, %41
  %71 = sub <8 x i16> zeroinitializer, %70
  %72 = icmp slt <8 x i16> %70, zeroinitializer
  %73 = select <8 x i1> %72, <8 x i16> %71, <8 x i16> %70
  %74 = sub <8 x i16> zeroinitializer, %68
  %75 = icmp slt <8 x i16> %68, zeroinitializer
  %76 = select <8 x i1> %75, <8 x i16> %74, <8 x i16> %68
  %77 = sub <8 x i16> %69, %15
  %78 = sub <8 x i16> zeroinitializer, %77
  %79 = icmp slt <8 x i16> %77, zeroinitializer
  %80 = select <8 x i1> %79, <8 x i16> %78, <8 x i16> %77
  %81 = icmp sgt <8 x i16> %73, %76
  %82 = icmp sgt <8 x i16> %73, %80
  %83 = or <8 x i1> %82, %81
  %84 = sext <8 x i1> %83 to <8 x i16>
  %85 = bitcast <8 x i16> %84 to <2 x i64>
  %86 = icmp sgt <8 x i16> %76, %80
  %87 = sext <8 x i1> %86 to <8 x i16>
  %88 = bitcast <8 x i16> %87 to <2 x i64>
  %89 = xor <2 x i64> %85, <i64 -1, i64 -1>
  %90 = and <2 x i64> %89, %40
  %91 = and <8 x i16> %15, %87
  %92 = bitcast <8 x i16> %91 to <2 x i64>
  %93 = xor <2 x i64> %88, <i64 -1, i64 -1>
  %94 = and <2 x i64> %93, %10
  %95 = or <2 x i64> %94, %92
  %96 = and <2 x i64> %95, %85
  %97 = or <2 x i64> %96, %90
  %98 = bitcast <2 x i64> %67 to <8 x i16>
  %99 = bitcast <2 x i64> %97 to <8 x i16>
  %100 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %98, <8 x i16> %99) #3
  %101 = bitcast i8* %34 to <16 x i8>*
  store <16 x i8> %100, <16 x i8>* %101, align 16
  %102 = getelementptr inbounds i8, i8* %34, i64 %1
  %103 = add <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %104 = bitcast <8 x i16> %103 to <2 x i64>
  %105 = add nuw nsw i32 %35, 1
  %106 = icmp eq i32 %105, 16
  br i1 %106, label %30, label %33
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_paeth_predictor_32x8_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %2 to <16 x i8>*
  %6 = load <16 x i8>, <16 x i8>* %5, align 16
  %7 = getelementptr inbounds i8, i8* %2, i64 16
  %8 = bitcast i8* %7 to <16 x i8>*
  %9 = load <16 x i8>, <16 x i8>* %8, align 16
  %10 = shufflevector <16 x i8> %6, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %11 = bitcast <16 x i8> %10 to <2 x i64>
  %12 = shufflevector <16 x i8> %6, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %13 = bitcast <16 x i8> %12 to <2 x i64>
  %14 = shufflevector <16 x i8> %9, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %15 = bitcast <16 x i8> %14 to <2 x i64>
  %16 = shufflevector <16 x i8> %9, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %17 = bitcast <16 x i8> %16 to <2 x i64>
  %18 = getelementptr inbounds i8, i8* %2, i64 -1
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i16
  %21 = insertelement <8 x i16> undef, i16 %20, i32 0
  %22 = shufflevector <8 x i16> %21, <8 x i16> undef, <8 x i32> zeroinitializer
  %23 = bitcast i8* %3 to i64*
  %24 = load i64, i64* %23, align 1
  %25 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %24, i32 0
  %26 = bitcast <2 x i64> %25 to <16 x i8>
  %27 = bitcast <16 x i8> %10 to <8 x i16>
  %28 = sub <8 x i16> %27, %22
  %29 = bitcast <16 x i8> %12 to <8 x i16>
  %30 = bitcast <16 x i8> %14 to <8 x i16>
  %31 = sub <8 x i16> %30, %22
  %32 = bitcast <16 x i8> %16 to <8 x i16>
  %33 = sub <8 x i16> zeroinitializer, %28
  %34 = icmp slt <8 x i16> %28, zeroinitializer
  %35 = select <8 x i1> %34, <8 x i16> %33, <8 x i16> %28
  %36 = sub <8 x i16> zeroinitializer, %31
  %37 = icmp slt <8 x i16> %31, zeroinitializer
  %38 = select <8 x i1> %37, <8 x i16> %36, <8 x i16> %31
  br label %40

39:                                               ; preds = %40
  ret void

40:                                               ; preds = %40, %4
  %41 = phi i8* [ %0, %4 ], [ %166, %40 ]
  %42 = phi <2 x i64> [ <i64 -9223231297218904064, i64 -9223231297218904064>, %4 ], [ %168, %40 ]
  %43 = phi <8 x i16> [ <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, %4 ], [ %167, %40 ]
  %44 = phi i32 [ 0, %4 ], [ %169, %40 ]
  %45 = bitcast <2 x i64> %42 to <16 x i8>
  %46 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %26, <16 x i8> %45) #3
  %47 = bitcast <16 x i8> %46 to <2 x i64>
  %48 = bitcast <16 x i8> %46 to <8 x i16>
  %49 = add <8 x i16> %28, %48
  %50 = sub <8 x i16> %49, %27
  %51 = sub <8 x i16> zeroinitializer, %50
  %52 = icmp slt <8 x i16> %50, zeroinitializer
  %53 = select <8 x i1> %52, <8 x i16> %51, <8 x i16> %50
  %54 = sub <8 x i16> %49, %22
  %55 = sub <8 x i16> zeroinitializer, %54
  %56 = icmp slt <8 x i16> %54, zeroinitializer
  %57 = select <8 x i1> %56, <8 x i16> %55, <8 x i16> %54
  %58 = icmp sgt <8 x i16> %35, %53
  %59 = icmp sgt <8 x i16> %35, %57
  %60 = or <8 x i1> %59, %58
  %61 = sext <8 x i1> %60 to <8 x i16>
  %62 = bitcast <8 x i16> %61 to <2 x i64>
  %63 = icmp sgt <8 x i16> %53, %57
  %64 = sext <8 x i1> %63 to <8 x i16>
  %65 = bitcast <8 x i16> %64 to <2 x i64>
  %66 = xor <2 x i64> %62, <i64 -1, i64 -1>
  %67 = and <2 x i64> %66, %47
  %68 = and <8 x i16> %22, %64
  %69 = bitcast <8 x i16> %68 to <2 x i64>
  %70 = xor <2 x i64> %65, <i64 -1, i64 -1>
  %71 = and <2 x i64> %70, %11
  %72 = or <2 x i64> %71, %69
  %73 = and <2 x i64> %72, %62
  %74 = or <2 x i64> %73, %67
  %75 = sub <8 x i16> %48, %22
  %76 = add <8 x i16> %75, %29
  %77 = sub <8 x i16> %76, %48
  %78 = sub <8 x i16> zeroinitializer, %77
  %79 = icmp slt <8 x i16> %77, zeroinitializer
  %80 = select <8 x i1> %79, <8 x i16> %78, <8 x i16> %77
  %81 = sub <8 x i16> zeroinitializer, %75
  %82 = icmp slt <8 x i16> %75, zeroinitializer
  %83 = select <8 x i1> %82, <8 x i16> %81, <8 x i16> %75
  %84 = sub <8 x i16> %76, %22
  %85 = sub <8 x i16> zeroinitializer, %84
  %86 = icmp slt <8 x i16> %84, zeroinitializer
  %87 = select <8 x i1> %86, <8 x i16> %85, <8 x i16> %84
  %88 = icmp sgt <8 x i16> %80, %83
  %89 = icmp sgt <8 x i16> %80, %87
  %90 = or <8 x i1> %89, %88
  %91 = sext <8 x i1> %90 to <8 x i16>
  %92 = bitcast <8 x i16> %91 to <2 x i64>
  %93 = icmp sgt <8 x i16> %83, %87
  %94 = sext <8 x i1> %93 to <8 x i16>
  %95 = bitcast <8 x i16> %94 to <2 x i64>
  %96 = xor <2 x i64> %92, <i64 -1, i64 -1>
  %97 = and <2 x i64> %96, %47
  %98 = and <8 x i16> %22, %94
  %99 = bitcast <8 x i16> %98 to <2 x i64>
  %100 = xor <2 x i64> %95, <i64 -1, i64 -1>
  %101 = and <2 x i64> %100, %13
  %102 = or <2 x i64> %101, %99
  %103 = and <2 x i64> %102, %92
  %104 = or <2 x i64> %103, %97
  %105 = bitcast <2 x i64> %74 to <8 x i16>
  %106 = bitcast <2 x i64> %104 to <8 x i16>
  %107 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %105, <8 x i16> %106) #3
  %108 = add <8 x i16> %31, %48
  %109 = sub <8 x i16> %108, %30
  %110 = sub <8 x i16> zeroinitializer, %109
  %111 = icmp slt <8 x i16> %109, zeroinitializer
  %112 = select <8 x i1> %111, <8 x i16> %110, <8 x i16> %109
  %113 = sub <8 x i16> %108, %22
  %114 = sub <8 x i16> zeroinitializer, %113
  %115 = icmp slt <8 x i16> %113, zeroinitializer
  %116 = select <8 x i1> %115, <8 x i16> %114, <8 x i16> %113
  %117 = icmp sgt <8 x i16> %38, %112
  %118 = icmp sgt <8 x i16> %38, %116
  %119 = or <8 x i1> %118, %117
  %120 = sext <8 x i1> %119 to <8 x i16>
  %121 = bitcast <8 x i16> %120 to <2 x i64>
  %122 = icmp sgt <8 x i16> %112, %116
  %123 = sext <8 x i1> %122 to <8 x i16>
  %124 = bitcast <8 x i16> %123 to <2 x i64>
  %125 = xor <2 x i64> %121, <i64 -1, i64 -1>
  %126 = and <2 x i64> %125, %47
  %127 = and <8 x i16> %22, %123
  %128 = bitcast <8 x i16> %127 to <2 x i64>
  %129 = xor <2 x i64> %124, <i64 -1, i64 -1>
  %130 = and <2 x i64> %129, %15
  %131 = or <2 x i64> %130, %128
  %132 = and <2 x i64> %131, %121
  %133 = or <2 x i64> %132, %126
  %134 = add <8 x i16> %75, %32
  %135 = sub <8 x i16> %134, %48
  %136 = sub <8 x i16> zeroinitializer, %135
  %137 = icmp slt <8 x i16> %135, zeroinitializer
  %138 = select <8 x i1> %137, <8 x i16> %136, <8 x i16> %135
  %139 = sub <8 x i16> %134, %22
  %140 = sub <8 x i16> zeroinitializer, %139
  %141 = icmp slt <8 x i16> %139, zeroinitializer
  %142 = select <8 x i1> %141, <8 x i16> %140, <8 x i16> %139
  %143 = icmp sgt <8 x i16> %138, %83
  %144 = icmp sgt <8 x i16> %138, %142
  %145 = or <8 x i1> %144, %143
  %146 = sext <8 x i1> %145 to <8 x i16>
  %147 = bitcast <8 x i16> %146 to <2 x i64>
  %148 = icmp sgt <8 x i16> %83, %142
  %149 = sext <8 x i1> %148 to <8 x i16>
  %150 = bitcast <8 x i16> %149 to <2 x i64>
  %151 = xor <2 x i64> %147, <i64 -1, i64 -1>
  %152 = and <2 x i64> %151, %47
  %153 = and <8 x i16> %22, %149
  %154 = bitcast <8 x i16> %153 to <2 x i64>
  %155 = xor <2 x i64> %150, <i64 -1, i64 -1>
  %156 = and <2 x i64> %155, %17
  %157 = or <2 x i64> %156, %154
  %158 = and <2 x i64> %157, %147
  %159 = or <2 x i64> %158, %152
  %160 = bitcast <2 x i64> %133 to <8 x i16>
  %161 = bitcast <2 x i64> %159 to <8 x i16>
  %162 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %160, <8 x i16> %161) #3
  %163 = bitcast i8* %41 to <16 x i8>*
  store <16 x i8> %107, <16 x i8>* %163, align 16
  %164 = getelementptr inbounds i8, i8* %41, i64 16
  %165 = bitcast i8* %164 to <16 x i8>*
  store <16 x i8> %162, <16 x i8>* %165, align 16
  %166 = getelementptr inbounds i8, i8* %41, i64 %1
  %167 = add <8 x i16> %43, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %168 = bitcast <8 x i16> %167 to <2 x i64>
  %169 = add nuw nsw i32 %44, 1
  %170 = icmp eq i32 %169, 8
  br i1 %170, label %39, label %40
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_paeth_predictor_32x16_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %2 to <16 x i8>*
  %6 = load <16 x i8>, <16 x i8>* %5, align 16
  %7 = getelementptr inbounds i8, i8* %2, i64 16
  %8 = bitcast i8* %7 to <16 x i8>*
  %9 = load <16 x i8>, <16 x i8>* %8, align 16
  %10 = shufflevector <16 x i8> %6, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %11 = bitcast <16 x i8> %10 to <2 x i64>
  %12 = shufflevector <16 x i8> %6, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %13 = bitcast <16 x i8> %12 to <2 x i64>
  %14 = shufflevector <16 x i8> %9, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %15 = bitcast <16 x i8> %14 to <2 x i64>
  %16 = shufflevector <16 x i8> %9, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %17 = bitcast <16 x i8> %16 to <2 x i64>
  %18 = getelementptr inbounds i8, i8* %2, i64 -1
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i16
  %21 = insertelement <8 x i16> undef, i16 %20, i32 0
  %22 = shufflevector <8 x i16> %21, <8 x i16> undef, <8 x i32> zeroinitializer
  %23 = bitcast i8* %3 to <16 x i8>*
  %24 = load <16 x i8>, <16 x i8>* %23, align 16
  %25 = bitcast <16 x i8> %10 to <8 x i16>
  %26 = sub <8 x i16> %25, %22
  %27 = bitcast <16 x i8> %12 to <8 x i16>
  %28 = bitcast <16 x i8> %14 to <8 x i16>
  %29 = sub <8 x i16> %28, %22
  %30 = bitcast <16 x i8> %16 to <8 x i16>
  %31 = sub <8 x i16> zeroinitializer, %26
  %32 = icmp slt <8 x i16> %26, zeroinitializer
  %33 = select <8 x i1> %32, <8 x i16> %31, <8 x i16> %26
  %34 = sub <8 x i16> zeroinitializer, %29
  %35 = icmp slt <8 x i16> %29, zeroinitializer
  %36 = select <8 x i1> %35, <8 x i16> %34, <8 x i16> %29
  br label %37

37:                                               ; preds = %37, %4
  %38 = phi i8* [ %0, %4 ], [ %163, %37 ]
  %39 = phi <2 x i64> [ <i64 -9223231297218904064, i64 -9223231297218904064>, %4 ], [ %165, %37 ]
  %40 = phi <8 x i16> [ <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, %4 ], [ %164, %37 ]
  %41 = phi i32 [ 0, %4 ], [ %166, %37 ]
  %42 = bitcast <2 x i64> %39 to <16 x i8>
  %43 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %24, <16 x i8> %42) #3
  %44 = bitcast <16 x i8> %43 to <2 x i64>
  %45 = bitcast <16 x i8> %43 to <8 x i16>
  %46 = add <8 x i16> %26, %45
  %47 = sub <8 x i16> %46, %25
  %48 = sub <8 x i16> zeroinitializer, %47
  %49 = icmp slt <8 x i16> %47, zeroinitializer
  %50 = select <8 x i1> %49, <8 x i16> %48, <8 x i16> %47
  %51 = sub <8 x i16> %46, %22
  %52 = sub <8 x i16> zeroinitializer, %51
  %53 = icmp slt <8 x i16> %51, zeroinitializer
  %54 = select <8 x i1> %53, <8 x i16> %52, <8 x i16> %51
  %55 = icmp sgt <8 x i16> %33, %50
  %56 = icmp sgt <8 x i16> %33, %54
  %57 = or <8 x i1> %56, %55
  %58 = sext <8 x i1> %57 to <8 x i16>
  %59 = bitcast <8 x i16> %58 to <2 x i64>
  %60 = icmp sgt <8 x i16> %50, %54
  %61 = sext <8 x i1> %60 to <8 x i16>
  %62 = bitcast <8 x i16> %61 to <2 x i64>
  %63 = xor <2 x i64> %59, <i64 -1, i64 -1>
  %64 = and <2 x i64> %63, %44
  %65 = and <8 x i16> %22, %61
  %66 = bitcast <8 x i16> %65 to <2 x i64>
  %67 = xor <2 x i64> %62, <i64 -1, i64 -1>
  %68 = and <2 x i64> %67, %11
  %69 = or <2 x i64> %68, %66
  %70 = and <2 x i64> %69, %59
  %71 = or <2 x i64> %70, %64
  %72 = sub <8 x i16> %45, %22
  %73 = add <8 x i16> %72, %27
  %74 = sub <8 x i16> %73, %45
  %75 = sub <8 x i16> zeroinitializer, %74
  %76 = icmp slt <8 x i16> %74, zeroinitializer
  %77 = select <8 x i1> %76, <8 x i16> %75, <8 x i16> %74
  %78 = sub <8 x i16> zeroinitializer, %72
  %79 = icmp slt <8 x i16> %72, zeroinitializer
  %80 = select <8 x i1> %79, <8 x i16> %78, <8 x i16> %72
  %81 = sub <8 x i16> %73, %22
  %82 = sub <8 x i16> zeroinitializer, %81
  %83 = icmp slt <8 x i16> %81, zeroinitializer
  %84 = select <8 x i1> %83, <8 x i16> %82, <8 x i16> %81
  %85 = icmp sgt <8 x i16> %77, %80
  %86 = icmp sgt <8 x i16> %77, %84
  %87 = or <8 x i1> %86, %85
  %88 = sext <8 x i1> %87 to <8 x i16>
  %89 = bitcast <8 x i16> %88 to <2 x i64>
  %90 = icmp sgt <8 x i16> %80, %84
  %91 = sext <8 x i1> %90 to <8 x i16>
  %92 = bitcast <8 x i16> %91 to <2 x i64>
  %93 = xor <2 x i64> %89, <i64 -1, i64 -1>
  %94 = and <2 x i64> %93, %44
  %95 = and <8 x i16> %22, %91
  %96 = bitcast <8 x i16> %95 to <2 x i64>
  %97 = xor <2 x i64> %92, <i64 -1, i64 -1>
  %98 = and <2 x i64> %97, %13
  %99 = or <2 x i64> %98, %96
  %100 = and <2 x i64> %99, %89
  %101 = or <2 x i64> %100, %94
  %102 = bitcast <2 x i64> %71 to <8 x i16>
  %103 = bitcast <2 x i64> %101 to <8 x i16>
  %104 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %102, <8 x i16> %103) #3
  %105 = add <8 x i16> %29, %45
  %106 = sub <8 x i16> %105, %28
  %107 = sub <8 x i16> zeroinitializer, %106
  %108 = icmp slt <8 x i16> %106, zeroinitializer
  %109 = select <8 x i1> %108, <8 x i16> %107, <8 x i16> %106
  %110 = sub <8 x i16> %105, %22
  %111 = sub <8 x i16> zeroinitializer, %110
  %112 = icmp slt <8 x i16> %110, zeroinitializer
  %113 = select <8 x i1> %112, <8 x i16> %111, <8 x i16> %110
  %114 = icmp sgt <8 x i16> %36, %109
  %115 = icmp sgt <8 x i16> %36, %113
  %116 = or <8 x i1> %115, %114
  %117 = sext <8 x i1> %116 to <8 x i16>
  %118 = bitcast <8 x i16> %117 to <2 x i64>
  %119 = icmp sgt <8 x i16> %109, %113
  %120 = sext <8 x i1> %119 to <8 x i16>
  %121 = bitcast <8 x i16> %120 to <2 x i64>
  %122 = xor <2 x i64> %118, <i64 -1, i64 -1>
  %123 = and <2 x i64> %122, %44
  %124 = and <8 x i16> %22, %120
  %125 = bitcast <8 x i16> %124 to <2 x i64>
  %126 = xor <2 x i64> %121, <i64 -1, i64 -1>
  %127 = and <2 x i64> %126, %15
  %128 = or <2 x i64> %127, %125
  %129 = and <2 x i64> %128, %118
  %130 = or <2 x i64> %129, %123
  %131 = add <8 x i16> %72, %30
  %132 = sub <8 x i16> %131, %45
  %133 = sub <8 x i16> zeroinitializer, %132
  %134 = icmp slt <8 x i16> %132, zeroinitializer
  %135 = select <8 x i1> %134, <8 x i16> %133, <8 x i16> %132
  %136 = sub <8 x i16> %131, %22
  %137 = sub <8 x i16> zeroinitializer, %136
  %138 = icmp slt <8 x i16> %136, zeroinitializer
  %139 = select <8 x i1> %138, <8 x i16> %137, <8 x i16> %136
  %140 = icmp sgt <8 x i16> %135, %80
  %141 = icmp sgt <8 x i16> %135, %139
  %142 = or <8 x i1> %141, %140
  %143 = sext <8 x i1> %142 to <8 x i16>
  %144 = bitcast <8 x i16> %143 to <2 x i64>
  %145 = icmp sgt <8 x i16> %80, %139
  %146 = sext <8 x i1> %145 to <8 x i16>
  %147 = bitcast <8 x i16> %146 to <2 x i64>
  %148 = xor <2 x i64> %144, <i64 -1, i64 -1>
  %149 = and <2 x i64> %148, %44
  %150 = and <8 x i16> %22, %146
  %151 = bitcast <8 x i16> %150 to <2 x i64>
  %152 = xor <2 x i64> %147, <i64 -1, i64 -1>
  %153 = and <2 x i64> %152, %17
  %154 = or <2 x i64> %153, %151
  %155 = and <2 x i64> %154, %144
  %156 = or <2 x i64> %155, %149
  %157 = bitcast <2 x i64> %130 to <8 x i16>
  %158 = bitcast <2 x i64> %156 to <8 x i16>
  %159 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %157, <8 x i16> %158) #3
  %160 = bitcast i8* %38 to <16 x i8>*
  store <16 x i8> %104, <16 x i8>* %160, align 16
  %161 = getelementptr inbounds i8, i8* %38, i64 16
  %162 = bitcast i8* %161 to <16 x i8>*
  store <16 x i8> %159, <16 x i8>* %162, align 16
  %163 = getelementptr inbounds i8, i8* %38, i64 %1
  %164 = add <8 x i16> %40, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %165 = bitcast <8 x i16> %164 to <2 x i64>
  %166 = add nuw nsw i32 %41, 1
  %167 = icmp eq i32 %166, 16
  br i1 %167, label %168, label %37

168:                                              ; preds = %37
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_paeth_predictor_32x32_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %2 to <16 x i8>*
  %6 = load <16 x i8>, <16 x i8>* %5, align 16
  %7 = getelementptr inbounds i8, i8* %2, i64 16
  %8 = bitcast i8* %7 to <16 x i8>*
  %9 = load <16 x i8>, <16 x i8>* %8, align 16
  %10 = shufflevector <16 x i8> %6, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %11 = bitcast <16 x i8> %10 to <2 x i64>
  %12 = shufflevector <16 x i8> %6, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %13 = bitcast <16 x i8> %12 to <2 x i64>
  %14 = shufflevector <16 x i8> %9, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %15 = bitcast <16 x i8> %14 to <2 x i64>
  %16 = shufflevector <16 x i8> %9, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %17 = bitcast <16 x i8> %16 to <2 x i64>
  %18 = getelementptr inbounds i8, i8* %2, i64 -1
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i16
  %21 = insertelement <8 x i16> undef, i16 %20, i32 0
  %22 = shufflevector <8 x i16> %21, <8 x i16> undef, <8 x i32> zeroinitializer
  %23 = bitcast i8* %3 to <16 x i8>*
  %24 = load <16 x i8>, <16 x i8>* %23, align 16
  %25 = bitcast <16 x i8> %10 to <8 x i16>
  %26 = sub <8 x i16> %25, %22
  %27 = bitcast <16 x i8> %12 to <8 x i16>
  %28 = bitcast <16 x i8> %14 to <8 x i16>
  %29 = sub <8 x i16> %28, %22
  %30 = bitcast <16 x i8> %16 to <8 x i16>
  %31 = sub <8 x i16> zeroinitializer, %26
  %32 = icmp slt <8 x i16> %26, zeroinitializer
  %33 = select <8 x i1> %32, <8 x i16> %31, <8 x i16> %26
  %34 = sub <8 x i16> zeroinitializer, %29
  %35 = icmp slt <8 x i16> %29, zeroinitializer
  %36 = select <8 x i1> %35, <8 x i16> %34, <8 x i16> %29
  br label %37

37:                                               ; preds = %37, %4
  %38 = phi i8* [ %0, %4 ], [ %163, %37 ]
  %39 = phi <2 x i64> [ <i64 -9223231297218904064, i64 -9223231297218904064>, %4 ], [ %165, %37 ]
  %40 = phi <8 x i16> [ <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, %4 ], [ %164, %37 ]
  %41 = phi i32 [ 0, %4 ], [ %166, %37 ]
  %42 = bitcast <2 x i64> %39 to <16 x i8>
  %43 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %24, <16 x i8> %42) #3
  %44 = bitcast <16 x i8> %43 to <2 x i64>
  %45 = bitcast <16 x i8> %43 to <8 x i16>
  %46 = add <8 x i16> %26, %45
  %47 = sub <8 x i16> %46, %25
  %48 = sub <8 x i16> zeroinitializer, %47
  %49 = icmp slt <8 x i16> %47, zeroinitializer
  %50 = select <8 x i1> %49, <8 x i16> %48, <8 x i16> %47
  %51 = sub <8 x i16> %46, %22
  %52 = sub <8 x i16> zeroinitializer, %51
  %53 = icmp slt <8 x i16> %51, zeroinitializer
  %54 = select <8 x i1> %53, <8 x i16> %52, <8 x i16> %51
  %55 = icmp sgt <8 x i16> %33, %50
  %56 = icmp sgt <8 x i16> %33, %54
  %57 = or <8 x i1> %56, %55
  %58 = sext <8 x i1> %57 to <8 x i16>
  %59 = bitcast <8 x i16> %58 to <2 x i64>
  %60 = icmp sgt <8 x i16> %50, %54
  %61 = sext <8 x i1> %60 to <8 x i16>
  %62 = bitcast <8 x i16> %61 to <2 x i64>
  %63 = xor <2 x i64> %59, <i64 -1, i64 -1>
  %64 = and <2 x i64> %63, %44
  %65 = and <8 x i16> %22, %61
  %66 = bitcast <8 x i16> %65 to <2 x i64>
  %67 = xor <2 x i64> %62, <i64 -1, i64 -1>
  %68 = and <2 x i64> %67, %11
  %69 = or <2 x i64> %68, %66
  %70 = and <2 x i64> %69, %59
  %71 = or <2 x i64> %70, %64
  %72 = sub <8 x i16> %45, %22
  %73 = add <8 x i16> %72, %27
  %74 = sub <8 x i16> %73, %45
  %75 = sub <8 x i16> zeroinitializer, %74
  %76 = icmp slt <8 x i16> %74, zeroinitializer
  %77 = select <8 x i1> %76, <8 x i16> %75, <8 x i16> %74
  %78 = sub <8 x i16> zeroinitializer, %72
  %79 = icmp slt <8 x i16> %72, zeroinitializer
  %80 = select <8 x i1> %79, <8 x i16> %78, <8 x i16> %72
  %81 = sub <8 x i16> %73, %22
  %82 = sub <8 x i16> zeroinitializer, %81
  %83 = icmp slt <8 x i16> %81, zeroinitializer
  %84 = select <8 x i1> %83, <8 x i16> %82, <8 x i16> %81
  %85 = icmp sgt <8 x i16> %77, %80
  %86 = icmp sgt <8 x i16> %77, %84
  %87 = or <8 x i1> %86, %85
  %88 = sext <8 x i1> %87 to <8 x i16>
  %89 = bitcast <8 x i16> %88 to <2 x i64>
  %90 = icmp sgt <8 x i16> %80, %84
  %91 = sext <8 x i1> %90 to <8 x i16>
  %92 = bitcast <8 x i16> %91 to <2 x i64>
  %93 = xor <2 x i64> %89, <i64 -1, i64 -1>
  %94 = and <2 x i64> %93, %44
  %95 = and <8 x i16> %22, %91
  %96 = bitcast <8 x i16> %95 to <2 x i64>
  %97 = xor <2 x i64> %92, <i64 -1, i64 -1>
  %98 = and <2 x i64> %97, %13
  %99 = or <2 x i64> %98, %96
  %100 = and <2 x i64> %99, %89
  %101 = or <2 x i64> %100, %94
  %102 = bitcast <2 x i64> %71 to <8 x i16>
  %103 = bitcast <2 x i64> %101 to <8 x i16>
  %104 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %102, <8 x i16> %103) #3
  %105 = add <8 x i16> %29, %45
  %106 = sub <8 x i16> %105, %28
  %107 = sub <8 x i16> zeroinitializer, %106
  %108 = icmp slt <8 x i16> %106, zeroinitializer
  %109 = select <8 x i1> %108, <8 x i16> %107, <8 x i16> %106
  %110 = sub <8 x i16> %105, %22
  %111 = sub <8 x i16> zeroinitializer, %110
  %112 = icmp slt <8 x i16> %110, zeroinitializer
  %113 = select <8 x i1> %112, <8 x i16> %111, <8 x i16> %110
  %114 = icmp sgt <8 x i16> %36, %109
  %115 = icmp sgt <8 x i16> %36, %113
  %116 = or <8 x i1> %115, %114
  %117 = sext <8 x i1> %116 to <8 x i16>
  %118 = bitcast <8 x i16> %117 to <2 x i64>
  %119 = icmp sgt <8 x i16> %109, %113
  %120 = sext <8 x i1> %119 to <8 x i16>
  %121 = bitcast <8 x i16> %120 to <2 x i64>
  %122 = xor <2 x i64> %118, <i64 -1, i64 -1>
  %123 = and <2 x i64> %122, %44
  %124 = and <8 x i16> %22, %120
  %125 = bitcast <8 x i16> %124 to <2 x i64>
  %126 = xor <2 x i64> %121, <i64 -1, i64 -1>
  %127 = and <2 x i64> %126, %15
  %128 = or <2 x i64> %127, %125
  %129 = and <2 x i64> %128, %118
  %130 = or <2 x i64> %129, %123
  %131 = add <8 x i16> %72, %30
  %132 = sub <8 x i16> %131, %45
  %133 = sub <8 x i16> zeroinitializer, %132
  %134 = icmp slt <8 x i16> %132, zeroinitializer
  %135 = select <8 x i1> %134, <8 x i16> %133, <8 x i16> %132
  %136 = sub <8 x i16> %131, %22
  %137 = sub <8 x i16> zeroinitializer, %136
  %138 = icmp slt <8 x i16> %136, zeroinitializer
  %139 = select <8 x i1> %138, <8 x i16> %137, <8 x i16> %136
  %140 = icmp sgt <8 x i16> %135, %80
  %141 = icmp sgt <8 x i16> %135, %139
  %142 = or <8 x i1> %141, %140
  %143 = sext <8 x i1> %142 to <8 x i16>
  %144 = bitcast <8 x i16> %143 to <2 x i64>
  %145 = icmp sgt <8 x i16> %80, %139
  %146 = sext <8 x i1> %145 to <8 x i16>
  %147 = bitcast <8 x i16> %146 to <2 x i64>
  %148 = xor <2 x i64> %144, <i64 -1, i64 -1>
  %149 = and <2 x i64> %148, %44
  %150 = and <8 x i16> %22, %146
  %151 = bitcast <8 x i16> %150 to <2 x i64>
  %152 = xor <2 x i64> %147, <i64 -1, i64 -1>
  %153 = and <2 x i64> %152, %17
  %154 = or <2 x i64> %153, %151
  %155 = and <2 x i64> %154, %144
  %156 = or <2 x i64> %155, %149
  %157 = bitcast <2 x i64> %130 to <8 x i16>
  %158 = bitcast <2 x i64> %156 to <8 x i16>
  %159 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %157, <8 x i16> %158) #3
  %160 = bitcast i8* %38 to <16 x i8>*
  store <16 x i8> %104, <16 x i8>* %160, align 16
  %161 = getelementptr inbounds i8, i8* %38, i64 16
  %162 = bitcast i8* %161 to <16 x i8>*
  store <16 x i8> %159, <16 x i8>* %162, align 16
  %163 = getelementptr inbounds i8, i8* %38, i64 %1
  %164 = add <8 x i16> %40, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %165 = bitcast <8 x i16> %164 to <2 x i64>
  %166 = add nuw nsw i32 %41, 1
  %167 = icmp eq i32 %166, 16
  br i1 %167, label %168, label %37

168:                                              ; preds = %37
  %169 = getelementptr inbounds i8, i8* %3, i64 16
  %170 = bitcast i8* %169 to <16 x i8>*
  %171 = load <16 x i8>, <16 x i8>* %170, align 16
  br label %172

172:                                              ; preds = %172, %168
  %173 = phi i8* [ %163, %168 ], [ %298, %172 ]
  %174 = phi <2 x i64> [ <i64 -9223231297218904064, i64 -9223231297218904064>, %168 ], [ %300, %172 ]
  %175 = phi <8 x i16> [ <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, %168 ], [ %299, %172 ]
  %176 = phi i32 [ 0, %168 ], [ %301, %172 ]
  %177 = bitcast <2 x i64> %174 to <16 x i8>
  %178 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %171, <16 x i8> %177) #3
  %179 = bitcast <16 x i8> %178 to <2 x i64>
  %180 = bitcast <16 x i8> %178 to <8 x i16>
  %181 = add <8 x i16> %26, %180
  %182 = sub <8 x i16> %181, %25
  %183 = sub <8 x i16> zeroinitializer, %182
  %184 = icmp slt <8 x i16> %182, zeroinitializer
  %185 = select <8 x i1> %184, <8 x i16> %183, <8 x i16> %182
  %186 = sub <8 x i16> %181, %22
  %187 = sub <8 x i16> zeroinitializer, %186
  %188 = icmp slt <8 x i16> %186, zeroinitializer
  %189 = select <8 x i1> %188, <8 x i16> %187, <8 x i16> %186
  %190 = icmp sgt <8 x i16> %33, %185
  %191 = icmp sgt <8 x i16> %33, %189
  %192 = or <8 x i1> %191, %190
  %193 = sext <8 x i1> %192 to <8 x i16>
  %194 = bitcast <8 x i16> %193 to <2 x i64>
  %195 = icmp sgt <8 x i16> %185, %189
  %196 = sext <8 x i1> %195 to <8 x i16>
  %197 = bitcast <8 x i16> %196 to <2 x i64>
  %198 = xor <2 x i64> %194, <i64 -1, i64 -1>
  %199 = and <2 x i64> %198, %179
  %200 = and <8 x i16> %22, %196
  %201 = bitcast <8 x i16> %200 to <2 x i64>
  %202 = xor <2 x i64> %197, <i64 -1, i64 -1>
  %203 = and <2 x i64> %202, %11
  %204 = or <2 x i64> %203, %201
  %205 = and <2 x i64> %204, %194
  %206 = or <2 x i64> %205, %199
  %207 = sub <8 x i16> %180, %22
  %208 = add <8 x i16> %207, %27
  %209 = sub <8 x i16> %208, %180
  %210 = sub <8 x i16> zeroinitializer, %209
  %211 = icmp slt <8 x i16> %209, zeroinitializer
  %212 = select <8 x i1> %211, <8 x i16> %210, <8 x i16> %209
  %213 = sub <8 x i16> zeroinitializer, %207
  %214 = icmp slt <8 x i16> %207, zeroinitializer
  %215 = select <8 x i1> %214, <8 x i16> %213, <8 x i16> %207
  %216 = sub <8 x i16> %208, %22
  %217 = sub <8 x i16> zeroinitializer, %216
  %218 = icmp slt <8 x i16> %216, zeroinitializer
  %219 = select <8 x i1> %218, <8 x i16> %217, <8 x i16> %216
  %220 = icmp sgt <8 x i16> %212, %215
  %221 = icmp sgt <8 x i16> %212, %219
  %222 = or <8 x i1> %221, %220
  %223 = sext <8 x i1> %222 to <8 x i16>
  %224 = bitcast <8 x i16> %223 to <2 x i64>
  %225 = icmp sgt <8 x i16> %215, %219
  %226 = sext <8 x i1> %225 to <8 x i16>
  %227 = bitcast <8 x i16> %226 to <2 x i64>
  %228 = xor <2 x i64> %224, <i64 -1, i64 -1>
  %229 = and <2 x i64> %228, %179
  %230 = and <8 x i16> %22, %226
  %231 = bitcast <8 x i16> %230 to <2 x i64>
  %232 = xor <2 x i64> %227, <i64 -1, i64 -1>
  %233 = and <2 x i64> %232, %13
  %234 = or <2 x i64> %233, %231
  %235 = and <2 x i64> %234, %224
  %236 = or <2 x i64> %235, %229
  %237 = bitcast <2 x i64> %206 to <8 x i16>
  %238 = bitcast <2 x i64> %236 to <8 x i16>
  %239 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %237, <8 x i16> %238) #3
  %240 = add <8 x i16> %29, %180
  %241 = sub <8 x i16> %240, %28
  %242 = sub <8 x i16> zeroinitializer, %241
  %243 = icmp slt <8 x i16> %241, zeroinitializer
  %244 = select <8 x i1> %243, <8 x i16> %242, <8 x i16> %241
  %245 = sub <8 x i16> %240, %22
  %246 = sub <8 x i16> zeroinitializer, %245
  %247 = icmp slt <8 x i16> %245, zeroinitializer
  %248 = select <8 x i1> %247, <8 x i16> %246, <8 x i16> %245
  %249 = icmp sgt <8 x i16> %36, %244
  %250 = icmp sgt <8 x i16> %36, %248
  %251 = or <8 x i1> %250, %249
  %252 = sext <8 x i1> %251 to <8 x i16>
  %253 = bitcast <8 x i16> %252 to <2 x i64>
  %254 = icmp sgt <8 x i16> %244, %248
  %255 = sext <8 x i1> %254 to <8 x i16>
  %256 = bitcast <8 x i16> %255 to <2 x i64>
  %257 = xor <2 x i64> %253, <i64 -1, i64 -1>
  %258 = and <2 x i64> %257, %179
  %259 = and <8 x i16> %22, %255
  %260 = bitcast <8 x i16> %259 to <2 x i64>
  %261 = xor <2 x i64> %256, <i64 -1, i64 -1>
  %262 = and <2 x i64> %261, %15
  %263 = or <2 x i64> %262, %260
  %264 = and <2 x i64> %263, %253
  %265 = or <2 x i64> %264, %258
  %266 = add <8 x i16> %207, %30
  %267 = sub <8 x i16> %266, %180
  %268 = sub <8 x i16> zeroinitializer, %267
  %269 = icmp slt <8 x i16> %267, zeroinitializer
  %270 = select <8 x i1> %269, <8 x i16> %268, <8 x i16> %267
  %271 = sub <8 x i16> %266, %22
  %272 = sub <8 x i16> zeroinitializer, %271
  %273 = icmp slt <8 x i16> %271, zeroinitializer
  %274 = select <8 x i1> %273, <8 x i16> %272, <8 x i16> %271
  %275 = icmp sgt <8 x i16> %270, %215
  %276 = icmp sgt <8 x i16> %270, %274
  %277 = or <8 x i1> %276, %275
  %278 = sext <8 x i1> %277 to <8 x i16>
  %279 = bitcast <8 x i16> %278 to <2 x i64>
  %280 = icmp sgt <8 x i16> %215, %274
  %281 = sext <8 x i1> %280 to <8 x i16>
  %282 = bitcast <8 x i16> %281 to <2 x i64>
  %283 = xor <2 x i64> %279, <i64 -1, i64 -1>
  %284 = and <2 x i64> %283, %179
  %285 = and <8 x i16> %22, %281
  %286 = bitcast <8 x i16> %285 to <2 x i64>
  %287 = xor <2 x i64> %282, <i64 -1, i64 -1>
  %288 = and <2 x i64> %287, %17
  %289 = or <2 x i64> %288, %286
  %290 = and <2 x i64> %289, %279
  %291 = or <2 x i64> %290, %284
  %292 = bitcast <2 x i64> %265 to <8 x i16>
  %293 = bitcast <2 x i64> %291 to <8 x i16>
  %294 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %292, <8 x i16> %293) #3
  %295 = bitcast i8* %173 to <16 x i8>*
  store <16 x i8> %239, <16 x i8>* %295, align 16
  %296 = getelementptr inbounds i8, i8* %173, i64 16
  %297 = bitcast i8* %296 to <16 x i8>*
  store <16 x i8> %294, <16 x i8>* %297, align 16
  %298 = getelementptr inbounds i8, i8* %173, i64 %1
  %299 = add <8 x i16> %175, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %300 = bitcast <8 x i16> %299 to <2 x i64>
  %301 = add nuw nsw i32 %176, 1
  %302 = icmp eq i32 %301, 16
  br i1 %302, label %303, label %172

303:                                              ; preds = %172
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_paeth_predictor_32x64_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %2 to <16 x i8>*
  %6 = load <16 x i8>, <16 x i8>* %5, align 16
  %7 = getelementptr inbounds i8, i8* %2, i64 16
  %8 = bitcast i8* %7 to <16 x i8>*
  %9 = load <16 x i8>, <16 x i8>* %8, align 16
  %10 = shufflevector <16 x i8> %6, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %11 = bitcast <16 x i8> %10 to <2 x i64>
  %12 = shufflevector <16 x i8> %6, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %13 = bitcast <16 x i8> %12 to <2 x i64>
  %14 = shufflevector <16 x i8> %9, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %15 = bitcast <16 x i8> %14 to <2 x i64>
  %16 = shufflevector <16 x i8> %9, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %17 = bitcast <16 x i8> %16 to <2 x i64>
  %18 = getelementptr inbounds i8, i8* %2, i64 -1
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i16
  %21 = insertelement <8 x i16> undef, i16 %20, i32 0
  %22 = shufflevector <8 x i16> %21, <8 x i16> undef, <8 x i32> zeroinitializer
  %23 = bitcast <16 x i8> %10 to <8 x i16>
  %24 = sub <8 x i16> %23, %22
  %25 = bitcast <16 x i8> %12 to <8 x i16>
  %26 = bitcast <16 x i8> %14 to <8 x i16>
  %27 = sub <8 x i16> %26, %22
  %28 = bitcast <16 x i8> %16 to <8 x i16>
  %29 = sub <8 x i16> zeroinitializer, %24
  %30 = icmp slt <8 x i16> %24, zeroinitializer
  %31 = select <8 x i1> %30, <8 x i16> %29, <8 x i16> %24
  %32 = sub <8 x i16> zeroinitializer, %27
  %33 = icmp slt <8 x i16> %27, zeroinitializer
  %34 = select <8 x i1> %33, <8 x i16> %32, <8 x i16> %27
  br label %35

35:                                               ; preds = %173, %4
  %36 = phi i64 [ 0, %4 ], [ %174, %173 ]
  %37 = phi i8* [ %0, %4 ], [ %168, %173 ]
  %38 = shl nsw i64 %36, 4
  %39 = getelementptr inbounds i8, i8* %3, i64 %38
  %40 = bitcast i8* %39 to <16 x i8>*
  %41 = load <16 x i8>, <16 x i8>* %40, align 16
  br label %42

42:                                               ; preds = %42, %35
  %43 = phi i8* [ %37, %35 ], [ %168, %42 ]
  %44 = phi <2 x i64> [ <i64 -9223231297218904064, i64 -9223231297218904064>, %35 ], [ %170, %42 ]
  %45 = phi <8 x i16> [ <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, %35 ], [ %169, %42 ]
  %46 = phi i32 [ 0, %35 ], [ %171, %42 ]
  %47 = bitcast <2 x i64> %44 to <16 x i8>
  %48 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %41, <16 x i8> %47) #3
  %49 = bitcast <16 x i8> %48 to <2 x i64>
  %50 = bitcast <16 x i8> %48 to <8 x i16>
  %51 = add <8 x i16> %24, %50
  %52 = sub <8 x i16> %51, %23
  %53 = sub <8 x i16> zeroinitializer, %52
  %54 = icmp slt <8 x i16> %52, zeroinitializer
  %55 = select <8 x i1> %54, <8 x i16> %53, <8 x i16> %52
  %56 = sub <8 x i16> %51, %22
  %57 = sub <8 x i16> zeroinitializer, %56
  %58 = icmp slt <8 x i16> %56, zeroinitializer
  %59 = select <8 x i1> %58, <8 x i16> %57, <8 x i16> %56
  %60 = icmp sgt <8 x i16> %31, %55
  %61 = icmp sgt <8 x i16> %31, %59
  %62 = or <8 x i1> %61, %60
  %63 = sext <8 x i1> %62 to <8 x i16>
  %64 = bitcast <8 x i16> %63 to <2 x i64>
  %65 = icmp sgt <8 x i16> %55, %59
  %66 = sext <8 x i1> %65 to <8 x i16>
  %67 = bitcast <8 x i16> %66 to <2 x i64>
  %68 = xor <2 x i64> %64, <i64 -1, i64 -1>
  %69 = and <2 x i64> %68, %49
  %70 = and <8 x i16> %22, %66
  %71 = bitcast <8 x i16> %70 to <2 x i64>
  %72 = xor <2 x i64> %67, <i64 -1, i64 -1>
  %73 = and <2 x i64> %72, %11
  %74 = or <2 x i64> %73, %71
  %75 = and <2 x i64> %74, %64
  %76 = or <2 x i64> %75, %69
  %77 = sub <8 x i16> %50, %22
  %78 = add <8 x i16> %77, %25
  %79 = sub <8 x i16> %78, %50
  %80 = sub <8 x i16> zeroinitializer, %79
  %81 = icmp slt <8 x i16> %79, zeroinitializer
  %82 = select <8 x i1> %81, <8 x i16> %80, <8 x i16> %79
  %83 = sub <8 x i16> zeroinitializer, %77
  %84 = icmp slt <8 x i16> %77, zeroinitializer
  %85 = select <8 x i1> %84, <8 x i16> %83, <8 x i16> %77
  %86 = sub <8 x i16> %78, %22
  %87 = sub <8 x i16> zeroinitializer, %86
  %88 = icmp slt <8 x i16> %86, zeroinitializer
  %89 = select <8 x i1> %88, <8 x i16> %87, <8 x i16> %86
  %90 = icmp sgt <8 x i16> %82, %85
  %91 = icmp sgt <8 x i16> %82, %89
  %92 = or <8 x i1> %91, %90
  %93 = sext <8 x i1> %92 to <8 x i16>
  %94 = bitcast <8 x i16> %93 to <2 x i64>
  %95 = icmp sgt <8 x i16> %85, %89
  %96 = sext <8 x i1> %95 to <8 x i16>
  %97 = bitcast <8 x i16> %96 to <2 x i64>
  %98 = xor <2 x i64> %94, <i64 -1, i64 -1>
  %99 = and <2 x i64> %98, %49
  %100 = and <8 x i16> %22, %96
  %101 = bitcast <8 x i16> %100 to <2 x i64>
  %102 = xor <2 x i64> %97, <i64 -1, i64 -1>
  %103 = and <2 x i64> %102, %13
  %104 = or <2 x i64> %103, %101
  %105 = and <2 x i64> %104, %94
  %106 = or <2 x i64> %105, %99
  %107 = bitcast <2 x i64> %76 to <8 x i16>
  %108 = bitcast <2 x i64> %106 to <8 x i16>
  %109 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %107, <8 x i16> %108) #3
  %110 = add <8 x i16> %27, %50
  %111 = sub <8 x i16> %110, %26
  %112 = sub <8 x i16> zeroinitializer, %111
  %113 = icmp slt <8 x i16> %111, zeroinitializer
  %114 = select <8 x i1> %113, <8 x i16> %112, <8 x i16> %111
  %115 = sub <8 x i16> %110, %22
  %116 = sub <8 x i16> zeroinitializer, %115
  %117 = icmp slt <8 x i16> %115, zeroinitializer
  %118 = select <8 x i1> %117, <8 x i16> %116, <8 x i16> %115
  %119 = icmp sgt <8 x i16> %34, %114
  %120 = icmp sgt <8 x i16> %34, %118
  %121 = or <8 x i1> %120, %119
  %122 = sext <8 x i1> %121 to <8 x i16>
  %123 = bitcast <8 x i16> %122 to <2 x i64>
  %124 = icmp sgt <8 x i16> %114, %118
  %125 = sext <8 x i1> %124 to <8 x i16>
  %126 = bitcast <8 x i16> %125 to <2 x i64>
  %127 = xor <2 x i64> %123, <i64 -1, i64 -1>
  %128 = and <2 x i64> %127, %49
  %129 = and <8 x i16> %22, %125
  %130 = bitcast <8 x i16> %129 to <2 x i64>
  %131 = xor <2 x i64> %126, <i64 -1, i64 -1>
  %132 = and <2 x i64> %131, %15
  %133 = or <2 x i64> %132, %130
  %134 = and <2 x i64> %133, %123
  %135 = or <2 x i64> %134, %128
  %136 = add <8 x i16> %77, %28
  %137 = sub <8 x i16> %136, %50
  %138 = sub <8 x i16> zeroinitializer, %137
  %139 = icmp slt <8 x i16> %137, zeroinitializer
  %140 = select <8 x i1> %139, <8 x i16> %138, <8 x i16> %137
  %141 = sub <8 x i16> %136, %22
  %142 = sub <8 x i16> zeroinitializer, %141
  %143 = icmp slt <8 x i16> %141, zeroinitializer
  %144 = select <8 x i1> %143, <8 x i16> %142, <8 x i16> %141
  %145 = icmp sgt <8 x i16> %140, %85
  %146 = icmp sgt <8 x i16> %140, %144
  %147 = or <8 x i1> %146, %145
  %148 = sext <8 x i1> %147 to <8 x i16>
  %149 = bitcast <8 x i16> %148 to <2 x i64>
  %150 = icmp sgt <8 x i16> %85, %144
  %151 = sext <8 x i1> %150 to <8 x i16>
  %152 = bitcast <8 x i16> %151 to <2 x i64>
  %153 = xor <2 x i64> %149, <i64 -1, i64 -1>
  %154 = and <2 x i64> %153, %49
  %155 = and <8 x i16> %22, %151
  %156 = bitcast <8 x i16> %155 to <2 x i64>
  %157 = xor <2 x i64> %152, <i64 -1, i64 -1>
  %158 = and <2 x i64> %157, %17
  %159 = or <2 x i64> %158, %156
  %160 = and <2 x i64> %159, %149
  %161 = or <2 x i64> %160, %154
  %162 = bitcast <2 x i64> %135 to <8 x i16>
  %163 = bitcast <2 x i64> %161 to <8 x i16>
  %164 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %162, <8 x i16> %163) #3
  %165 = bitcast i8* %43 to <16 x i8>*
  store <16 x i8> %109, <16 x i8>* %165, align 16
  %166 = getelementptr inbounds i8, i8* %43, i64 16
  %167 = bitcast i8* %166 to <16 x i8>*
  store <16 x i8> %164, <16 x i8>* %167, align 16
  %168 = getelementptr inbounds i8, i8* %43, i64 %1
  %169 = add <8 x i16> %45, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %170 = bitcast <8 x i16> %169 to <2 x i64>
  %171 = add nuw nsw i32 %46, 1
  %172 = icmp eq i32 %171, 16
  br i1 %172, label %173, label %42

173:                                              ; preds = %42
  %174 = add nuw nsw i64 %36, 1
  %175 = icmp eq i64 %174, 4
  br i1 %175, label %176, label %35

176:                                              ; preds = %173
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_paeth_predictor_64x32_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %2 to <16 x i8>*
  %6 = load <16 x i8>, <16 x i8>* %5, align 16
  %7 = getelementptr inbounds i8, i8* %2, i64 16
  %8 = bitcast i8* %7 to <16 x i8>*
  %9 = load <16 x i8>, <16 x i8>* %8, align 16
  %10 = getelementptr inbounds i8, i8* %2, i64 32
  %11 = bitcast i8* %10 to <16 x i8>*
  %12 = load <16 x i8>, <16 x i8>* %11, align 16
  %13 = getelementptr inbounds i8, i8* %2, i64 48
  %14 = bitcast i8* %13 to <16 x i8>*
  %15 = load <16 x i8>, <16 x i8>* %14, align 16
  %16 = shufflevector <16 x i8> %6, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %17 = bitcast <16 x i8> %16 to <2 x i64>
  %18 = shufflevector <16 x i8> %6, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %19 = bitcast <16 x i8> %18 to <2 x i64>
  %20 = shufflevector <16 x i8> %9, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %21 = bitcast <16 x i8> %20 to <2 x i64>
  %22 = shufflevector <16 x i8> %9, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %23 = bitcast <16 x i8> %22 to <2 x i64>
  %24 = shufflevector <16 x i8> %12, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %25 = bitcast <16 x i8> %24 to <2 x i64>
  %26 = shufflevector <16 x i8> %12, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %27 = bitcast <16 x i8> %26 to <2 x i64>
  %28 = shufflevector <16 x i8> %15, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %29 = bitcast <16 x i8> %28 to <2 x i64>
  %30 = shufflevector <16 x i8> %15, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %31 = bitcast <16 x i8> %30 to <2 x i64>
  %32 = getelementptr inbounds i8, i8* %2, i64 -1
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i16
  %35 = insertelement <8 x i16> undef, i16 %34, i32 0
  %36 = shufflevector <8 x i16> %35, <8 x i16> undef, <8 x i32> zeroinitializer
  %37 = bitcast <16 x i8> %16 to <8 x i16>
  %38 = sub <8 x i16> %37, %36
  %39 = bitcast <16 x i8> %18 to <8 x i16>
  %40 = bitcast <16 x i8> %20 to <8 x i16>
  %41 = sub <8 x i16> %40, %36
  %42 = bitcast <16 x i8> %22 to <8 x i16>
  %43 = bitcast <16 x i8> %24 to <8 x i16>
  %44 = sub <8 x i16> %43, %36
  %45 = bitcast <16 x i8> %26 to <8 x i16>
  %46 = bitcast <16 x i8> %28 to <8 x i16>
  %47 = sub <8 x i16> %46, %36
  %48 = bitcast <16 x i8> %30 to <8 x i16>
  %49 = sub <8 x i16> zeroinitializer, %38
  %50 = icmp slt <8 x i16> %38, zeroinitializer
  %51 = select <8 x i1> %50, <8 x i16> %49, <8 x i16> %38
  %52 = sub <8 x i16> zeroinitializer, %41
  %53 = icmp slt <8 x i16> %41, zeroinitializer
  %54 = select <8 x i1> %53, <8 x i16> %52, <8 x i16> %41
  %55 = sub <8 x i16> zeroinitializer, %44
  %56 = icmp slt <8 x i16> %44, zeroinitializer
  %57 = select <8 x i1> %56, <8 x i16> %55, <8 x i16> %44
  %58 = sub <8 x i16> zeroinitializer, %47
  %59 = icmp slt <8 x i16> %47, zeroinitializer
  %60 = select <8 x i1> %59, <8 x i16> %58, <8 x i16> %47
  br label %61

61:                                               ; preds = %313, %4
  %62 = phi i64 [ 0, %4 ], [ %314, %313 ]
  %63 = phi i8* [ %0, %4 ], [ %308, %313 ]
  %64 = shl nsw i64 %62, 4
  %65 = getelementptr inbounds i8, i8* %3, i64 %64
  %66 = bitcast i8* %65 to <16 x i8>*
  %67 = load <16 x i8>, <16 x i8>* %66, align 16
  br label %68

68:                                               ; preds = %68, %61
  %69 = phi i8* [ %63, %61 ], [ %308, %68 ]
  %70 = phi i32 [ 0, %61 ], [ %311, %68 ]
  %71 = phi <2 x i64> [ <i64 -9223231297218904064, i64 -9223231297218904064>, %61 ], [ %310, %68 ]
  %72 = phi <8 x i16> [ <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, %61 ], [ %309, %68 ]
  %73 = bitcast <2 x i64> %71 to <16 x i8>
  %74 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %67, <16 x i8> %73) #3
  %75 = bitcast <16 x i8> %74 to <2 x i64>
  %76 = bitcast <16 x i8> %74 to <8 x i16>
  %77 = add <8 x i16> %38, %76
  %78 = sub <8 x i16> %77, %37
  %79 = sub <8 x i16> zeroinitializer, %78
  %80 = icmp slt <8 x i16> %78, zeroinitializer
  %81 = select <8 x i1> %80, <8 x i16> %79, <8 x i16> %78
  %82 = sub <8 x i16> %77, %36
  %83 = sub <8 x i16> zeroinitializer, %82
  %84 = icmp slt <8 x i16> %82, zeroinitializer
  %85 = select <8 x i1> %84, <8 x i16> %83, <8 x i16> %82
  %86 = icmp sgt <8 x i16> %51, %81
  %87 = icmp sgt <8 x i16> %51, %85
  %88 = or <8 x i1> %87, %86
  %89 = sext <8 x i1> %88 to <8 x i16>
  %90 = bitcast <8 x i16> %89 to <2 x i64>
  %91 = icmp sgt <8 x i16> %81, %85
  %92 = sext <8 x i1> %91 to <8 x i16>
  %93 = bitcast <8 x i16> %92 to <2 x i64>
  %94 = xor <2 x i64> %90, <i64 -1, i64 -1>
  %95 = and <2 x i64> %94, %75
  %96 = and <8 x i16> %36, %92
  %97 = bitcast <8 x i16> %96 to <2 x i64>
  %98 = xor <2 x i64> %93, <i64 -1, i64 -1>
  %99 = and <2 x i64> %98, %17
  %100 = or <2 x i64> %99, %97
  %101 = and <2 x i64> %100, %90
  %102 = or <2 x i64> %101, %95
  %103 = sub <8 x i16> %76, %36
  %104 = add <8 x i16> %103, %39
  %105 = sub <8 x i16> %104, %76
  %106 = sub <8 x i16> zeroinitializer, %105
  %107 = icmp slt <8 x i16> %105, zeroinitializer
  %108 = select <8 x i1> %107, <8 x i16> %106, <8 x i16> %105
  %109 = sub <8 x i16> zeroinitializer, %103
  %110 = icmp slt <8 x i16> %103, zeroinitializer
  %111 = select <8 x i1> %110, <8 x i16> %109, <8 x i16> %103
  %112 = sub <8 x i16> %104, %36
  %113 = sub <8 x i16> zeroinitializer, %112
  %114 = icmp slt <8 x i16> %112, zeroinitializer
  %115 = select <8 x i1> %114, <8 x i16> %113, <8 x i16> %112
  %116 = icmp sgt <8 x i16> %108, %111
  %117 = icmp sgt <8 x i16> %108, %115
  %118 = or <8 x i1> %117, %116
  %119 = sext <8 x i1> %118 to <8 x i16>
  %120 = bitcast <8 x i16> %119 to <2 x i64>
  %121 = icmp sgt <8 x i16> %111, %115
  %122 = sext <8 x i1> %121 to <8 x i16>
  %123 = bitcast <8 x i16> %122 to <2 x i64>
  %124 = xor <2 x i64> %120, <i64 -1, i64 -1>
  %125 = and <2 x i64> %124, %75
  %126 = and <8 x i16> %36, %122
  %127 = bitcast <8 x i16> %126 to <2 x i64>
  %128 = xor <2 x i64> %123, <i64 -1, i64 -1>
  %129 = and <2 x i64> %128, %19
  %130 = or <2 x i64> %129, %127
  %131 = and <2 x i64> %130, %120
  %132 = or <2 x i64> %131, %125
  %133 = bitcast <2 x i64> %102 to <8 x i16>
  %134 = bitcast <2 x i64> %132 to <8 x i16>
  %135 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %133, <8 x i16> %134) #3
  %136 = add <8 x i16> %41, %76
  %137 = sub <8 x i16> %136, %40
  %138 = sub <8 x i16> zeroinitializer, %137
  %139 = icmp slt <8 x i16> %137, zeroinitializer
  %140 = select <8 x i1> %139, <8 x i16> %138, <8 x i16> %137
  %141 = sub <8 x i16> %136, %36
  %142 = sub <8 x i16> zeroinitializer, %141
  %143 = icmp slt <8 x i16> %141, zeroinitializer
  %144 = select <8 x i1> %143, <8 x i16> %142, <8 x i16> %141
  %145 = icmp sgt <8 x i16> %54, %140
  %146 = icmp sgt <8 x i16> %54, %144
  %147 = or <8 x i1> %146, %145
  %148 = sext <8 x i1> %147 to <8 x i16>
  %149 = bitcast <8 x i16> %148 to <2 x i64>
  %150 = icmp sgt <8 x i16> %140, %144
  %151 = sext <8 x i1> %150 to <8 x i16>
  %152 = bitcast <8 x i16> %151 to <2 x i64>
  %153 = xor <2 x i64> %149, <i64 -1, i64 -1>
  %154 = and <2 x i64> %153, %75
  %155 = and <8 x i16> %36, %151
  %156 = bitcast <8 x i16> %155 to <2 x i64>
  %157 = xor <2 x i64> %152, <i64 -1, i64 -1>
  %158 = and <2 x i64> %157, %21
  %159 = or <2 x i64> %158, %156
  %160 = and <2 x i64> %159, %149
  %161 = or <2 x i64> %160, %154
  %162 = add <8 x i16> %103, %42
  %163 = sub <8 x i16> %162, %76
  %164 = sub <8 x i16> zeroinitializer, %163
  %165 = icmp slt <8 x i16> %163, zeroinitializer
  %166 = select <8 x i1> %165, <8 x i16> %164, <8 x i16> %163
  %167 = sub <8 x i16> %162, %36
  %168 = sub <8 x i16> zeroinitializer, %167
  %169 = icmp slt <8 x i16> %167, zeroinitializer
  %170 = select <8 x i1> %169, <8 x i16> %168, <8 x i16> %167
  %171 = icmp sgt <8 x i16> %166, %111
  %172 = icmp sgt <8 x i16> %166, %170
  %173 = or <8 x i1> %172, %171
  %174 = sext <8 x i1> %173 to <8 x i16>
  %175 = bitcast <8 x i16> %174 to <2 x i64>
  %176 = icmp sgt <8 x i16> %111, %170
  %177 = sext <8 x i1> %176 to <8 x i16>
  %178 = bitcast <8 x i16> %177 to <2 x i64>
  %179 = xor <2 x i64> %175, <i64 -1, i64 -1>
  %180 = and <2 x i64> %179, %75
  %181 = and <8 x i16> %36, %177
  %182 = bitcast <8 x i16> %181 to <2 x i64>
  %183 = xor <2 x i64> %178, <i64 -1, i64 -1>
  %184 = and <2 x i64> %183, %23
  %185 = or <2 x i64> %184, %182
  %186 = and <2 x i64> %185, %175
  %187 = or <2 x i64> %186, %180
  %188 = bitcast <2 x i64> %161 to <8 x i16>
  %189 = bitcast <2 x i64> %187 to <8 x i16>
  %190 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %188, <8 x i16> %189) #3
  %191 = add <8 x i16> %44, %76
  %192 = sub <8 x i16> %191, %43
  %193 = sub <8 x i16> zeroinitializer, %192
  %194 = icmp slt <8 x i16> %192, zeroinitializer
  %195 = select <8 x i1> %194, <8 x i16> %193, <8 x i16> %192
  %196 = sub <8 x i16> %191, %36
  %197 = sub <8 x i16> zeroinitializer, %196
  %198 = icmp slt <8 x i16> %196, zeroinitializer
  %199 = select <8 x i1> %198, <8 x i16> %197, <8 x i16> %196
  %200 = icmp sgt <8 x i16> %57, %195
  %201 = icmp sgt <8 x i16> %57, %199
  %202 = or <8 x i1> %201, %200
  %203 = sext <8 x i1> %202 to <8 x i16>
  %204 = bitcast <8 x i16> %203 to <2 x i64>
  %205 = icmp sgt <8 x i16> %195, %199
  %206 = sext <8 x i1> %205 to <8 x i16>
  %207 = bitcast <8 x i16> %206 to <2 x i64>
  %208 = xor <2 x i64> %204, <i64 -1, i64 -1>
  %209 = and <2 x i64> %208, %75
  %210 = and <8 x i16> %36, %206
  %211 = bitcast <8 x i16> %210 to <2 x i64>
  %212 = xor <2 x i64> %207, <i64 -1, i64 -1>
  %213 = and <2 x i64> %212, %25
  %214 = or <2 x i64> %213, %211
  %215 = and <2 x i64> %214, %204
  %216 = or <2 x i64> %215, %209
  %217 = add <8 x i16> %103, %45
  %218 = sub <8 x i16> %217, %76
  %219 = sub <8 x i16> zeroinitializer, %218
  %220 = icmp slt <8 x i16> %218, zeroinitializer
  %221 = select <8 x i1> %220, <8 x i16> %219, <8 x i16> %218
  %222 = sub <8 x i16> %217, %36
  %223 = sub <8 x i16> zeroinitializer, %222
  %224 = icmp slt <8 x i16> %222, zeroinitializer
  %225 = select <8 x i1> %224, <8 x i16> %223, <8 x i16> %222
  %226 = icmp sgt <8 x i16> %221, %111
  %227 = icmp sgt <8 x i16> %221, %225
  %228 = or <8 x i1> %227, %226
  %229 = sext <8 x i1> %228 to <8 x i16>
  %230 = bitcast <8 x i16> %229 to <2 x i64>
  %231 = icmp sgt <8 x i16> %111, %225
  %232 = sext <8 x i1> %231 to <8 x i16>
  %233 = bitcast <8 x i16> %232 to <2 x i64>
  %234 = xor <2 x i64> %230, <i64 -1, i64 -1>
  %235 = and <2 x i64> %234, %75
  %236 = and <8 x i16> %36, %232
  %237 = bitcast <8 x i16> %236 to <2 x i64>
  %238 = xor <2 x i64> %233, <i64 -1, i64 -1>
  %239 = and <2 x i64> %238, %27
  %240 = or <2 x i64> %239, %237
  %241 = and <2 x i64> %240, %230
  %242 = or <2 x i64> %241, %235
  %243 = bitcast <2 x i64> %216 to <8 x i16>
  %244 = bitcast <2 x i64> %242 to <8 x i16>
  %245 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %243, <8 x i16> %244) #3
  %246 = add <8 x i16> %47, %76
  %247 = sub <8 x i16> %246, %46
  %248 = sub <8 x i16> zeroinitializer, %247
  %249 = icmp slt <8 x i16> %247, zeroinitializer
  %250 = select <8 x i1> %249, <8 x i16> %248, <8 x i16> %247
  %251 = sub <8 x i16> %246, %36
  %252 = sub <8 x i16> zeroinitializer, %251
  %253 = icmp slt <8 x i16> %251, zeroinitializer
  %254 = select <8 x i1> %253, <8 x i16> %252, <8 x i16> %251
  %255 = icmp sgt <8 x i16> %60, %250
  %256 = icmp sgt <8 x i16> %60, %254
  %257 = or <8 x i1> %256, %255
  %258 = sext <8 x i1> %257 to <8 x i16>
  %259 = bitcast <8 x i16> %258 to <2 x i64>
  %260 = icmp sgt <8 x i16> %250, %254
  %261 = sext <8 x i1> %260 to <8 x i16>
  %262 = bitcast <8 x i16> %261 to <2 x i64>
  %263 = xor <2 x i64> %259, <i64 -1, i64 -1>
  %264 = and <2 x i64> %263, %75
  %265 = and <8 x i16> %36, %261
  %266 = bitcast <8 x i16> %265 to <2 x i64>
  %267 = xor <2 x i64> %262, <i64 -1, i64 -1>
  %268 = and <2 x i64> %267, %29
  %269 = or <2 x i64> %268, %266
  %270 = and <2 x i64> %269, %259
  %271 = or <2 x i64> %270, %264
  %272 = add <8 x i16> %103, %48
  %273 = sub <8 x i16> %272, %76
  %274 = sub <8 x i16> zeroinitializer, %273
  %275 = icmp slt <8 x i16> %273, zeroinitializer
  %276 = select <8 x i1> %275, <8 x i16> %274, <8 x i16> %273
  %277 = sub <8 x i16> %272, %36
  %278 = sub <8 x i16> zeroinitializer, %277
  %279 = icmp slt <8 x i16> %277, zeroinitializer
  %280 = select <8 x i1> %279, <8 x i16> %278, <8 x i16> %277
  %281 = icmp sgt <8 x i16> %276, %111
  %282 = icmp sgt <8 x i16> %276, %280
  %283 = or <8 x i1> %282, %281
  %284 = sext <8 x i1> %283 to <8 x i16>
  %285 = bitcast <8 x i16> %284 to <2 x i64>
  %286 = icmp sgt <8 x i16> %111, %280
  %287 = sext <8 x i1> %286 to <8 x i16>
  %288 = bitcast <8 x i16> %287 to <2 x i64>
  %289 = xor <2 x i64> %285, <i64 -1, i64 -1>
  %290 = and <2 x i64> %289, %75
  %291 = and <8 x i16> %36, %287
  %292 = bitcast <8 x i16> %291 to <2 x i64>
  %293 = xor <2 x i64> %288, <i64 -1, i64 -1>
  %294 = and <2 x i64> %293, %31
  %295 = or <2 x i64> %294, %292
  %296 = and <2 x i64> %295, %285
  %297 = or <2 x i64> %296, %290
  %298 = bitcast <2 x i64> %271 to <8 x i16>
  %299 = bitcast <2 x i64> %297 to <8 x i16>
  %300 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %298, <8 x i16> %299) #3
  %301 = bitcast i8* %69 to <16 x i8>*
  store <16 x i8> %135, <16 x i8>* %301, align 16
  %302 = getelementptr inbounds i8, i8* %69, i64 16
  %303 = bitcast i8* %302 to <16 x i8>*
  store <16 x i8> %190, <16 x i8>* %303, align 16
  %304 = getelementptr inbounds i8, i8* %69, i64 32
  %305 = bitcast i8* %304 to <16 x i8>*
  store <16 x i8> %245, <16 x i8>* %305, align 16
  %306 = getelementptr inbounds i8, i8* %69, i64 48
  %307 = bitcast i8* %306 to <16 x i8>*
  store <16 x i8> %300, <16 x i8>* %307, align 16
  %308 = getelementptr inbounds i8, i8* %69, i64 %1
  %309 = add <8 x i16> %72, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %310 = bitcast <8 x i16> %309 to <2 x i64>
  %311 = add nuw nsw i32 %70, 1
  %312 = icmp eq i32 %311, 16
  br i1 %312, label %313, label %68

313:                                              ; preds = %68
  %314 = add nuw nsw i64 %62, 1
  %315 = icmp eq i64 %314, 2
  br i1 %315, label %316, label %61

316:                                              ; preds = %313
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_paeth_predictor_64x64_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %2 to <16 x i8>*
  %6 = load <16 x i8>, <16 x i8>* %5, align 16
  %7 = getelementptr inbounds i8, i8* %2, i64 16
  %8 = bitcast i8* %7 to <16 x i8>*
  %9 = load <16 x i8>, <16 x i8>* %8, align 16
  %10 = getelementptr inbounds i8, i8* %2, i64 32
  %11 = bitcast i8* %10 to <16 x i8>*
  %12 = load <16 x i8>, <16 x i8>* %11, align 16
  %13 = getelementptr inbounds i8, i8* %2, i64 48
  %14 = bitcast i8* %13 to <16 x i8>*
  %15 = load <16 x i8>, <16 x i8>* %14, align 16
  %16 = shufflevector <16 x i8> %6, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %17 = bitcast <16 x i8> %16 to <2 x i64>
  %18 = shufflevector <16 x i8> %6, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %19 = bitcast <16 x i8> %18 to <2 x i64>
  %20 = shufflevector <16 x i8> %9, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %21 = bitcast <16 x i8> %20 to <2 x i64>
  %22 = shufflevector <16 x i8> %9, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %23 = bitcast <16 x i8> %22 to <2 x i64>
  %24 = shufflevector <16 x i8> %12, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %25 = bitcast <16 x i8> %24 to <2 x i64>
  %26 = shufflevector <16 x i8> %12, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %27 = bitcast <16 x i8> %26 to <2 x i64>
  %28 = shufflevector <16 x i8> %15, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %29 = bitcast <16 x i8> %28 to <2 x i64>
  %30 = shufflevector <16 x i8> %15, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %31 = bitcast <16 x i8> %30 to <2 x i64>
  %32 = getelementptr inbounds i8, i8* %2, i64 -1
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i16
  %35 = insertelement <8 x i16> undef, i16 %34, i32 0
  %36 = shufflevector <8 x i16> %35, <8 x i16> undef, <8 x i32> zeroinitializer
  %37 = bitcast <16 x i8> %16 to <8 x i16>
  %38 = sub <8 x i16> %37, %36
  %39 = bitcast <16 x i8> %18 to <8 x i16>
  %40 = bitcast <16 x i8> %20 to <8 x i16>
  %41 = sub <8 x i16> %40, %36
  %42 = bitcast <16 x i8> %22 to <8 x i16>
  %43 = bitcast <16 x i8> %24 to <8 x i16>
  %44 = sub <8 x i16> %43, %36
  %45 = bitcast <16 x i8> %26 to <8 x i16>
  %46 = bitcast <16 x i8> %28 to <8 x i16>
  %47 = sub <8 x i16> %46, %36
  %48 = bitcast <16 x i8> %30 to <8 x i16>
  %49 = sub <8 x i16> zeroinitializer, %38
  %50 = icmp slt <8 x i16> %38, zeroinitializer
  %51 = select <8 x i1> %50, <8 x i16> %49, <8 x i16> %38
  %52 = sub <8 x i16> zeroinitializer, %41
  %53 = icmp slt <8 x i16> %41, zeroinitializer
  %54 = select <8 x i1> %53, <8 x i16> %52, <8 x i16> %41
  %55 = sub <8 x i16> zeroinitializer, %44
  %56 = icmp slt <8 x i16> %44, zeroinitializer
  %57 = select <8 x i1> %56, <8 x i16> %55, <8 x i16> %44
  %58 = sub <8 x i16> zeroinitializer, %47
  %59 = icmp slt <8 x i16> %47, zeroinitializer
  %60 = select <8 x i1> %59, <8 x i16> %58, <8 x i16> %47
  br label %61

61:                                               ; preds = %313, %4
  %62 = phi i64 [ 0, %4 ], [ %314, %313 ]
  %63 = phi i8* [ %0, %4 ], [ %308, %313 ]
  %64 = shl nsw i64 %62, 4
  %65 = getelementptr inbounds i8, i8* %3, i64 %64
  %66 = bitcast i8* %65 to <16 x i8>*
  %67 = load <16 x i8>, <16 x i8>* %66, align 16
  br label %68

68:                                               ; preds = %68, %61
  %69 = phi i8* [ %63, %61 ], [ %308, %68 ]
  %70 = phi i32 [ 0, %61 ], [ %311, %68 ]
  %71 = phi <2 x i64> [ <i64 -9223231297218904064, i64 -9223231297218904064>, %61 ], [ %310, %68 ]
  %72 = phi <8 x i16> [ <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, %61 ], [ %309, %68 ]
  %73 = bitcast <2 x i64> %71 to <16 x i8>
  %74 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %67, <16 x i8> %73) #3
  %75 = bitcast <16 x i8> %74 to <2 x i64>
  %76 = bitcast <16 x i8> %74 to <8 x i16>
  %77 = add <8 x i16> %38, %76
  %78 = sub <8 x i16> %77, %37
  %79 = sub <8 x i16> zeroinitializer, %78
  %80 = icmp slt <8 x i16> %78, zeroinitializer
  %81 = select <8 x i1> %80, <8 x i16> %79, <8 x i16> %78
  %82 = sub <8 x i16> %77, %36
  %83 = sub <8 x i16> zeroinitializer, %82
  %84 = icmp slt <8 x i16> %82, zeroinitializer
  %85 = select <8 x i1> %84, <8 x i16> %83, <8 x i16> %82
  %86 = icmp sgt <8 x i16> %51, %81
  %87 = icmp sgt <8 x i16> %51, %85
  %88 = or <8 x i1> %87, %86
  %89 = sext <8 x i1> %88 to <8 x i16>
  %90 = bitcast <8 x i16> %89 to <2 x i64>
  %91 = icmp sgt <8 x i16> %81, %85
  %92 = sext <8 x i1> %91 to <8 x i16>
  %93 = bitcast <8 x i16> %92 to <2 x i64>
  %94 = xor <2 x i64> %90, <i64 -1, i64 -1>
  %95 = and <2 x i64> %94, %75
  %96 = and <8 x i16> %36, %92
  %97 = bitcast <8 x i16> %96 to <2 x i64>
  %98 = xor <2 x i64> %93, <i64 -1, i64 -1>
  %99 = and <2 x i64> %98, %17
  %100 = or <2 x i64> %99, %97
  %101 = and <2 x i64> %100, %90
  %102 = or <2 x i64> %101, %95
  %103 = sub <8 x i16> %76, %36
  %104 = add <8 x i16> %103, %39
  %105 = sub <8 x i16> %104, %76
  %106 = sub <8 x i16> zeroinitializer, %105
  %107 = icmp slt <8 x i16> %105, zeroinitializer
  %108 = select <8 x i1> %107, <8 x i16> %106, <8 x i16> %105
  %109 = sub <8 x i16> zeroinitializer, %103
  %110 = icmp slt <8 x i16> %103, zeroinitializer
  %111 = select <8 x i1> %110, <8 x i16> %109, <8 x i16> %103
  %112 = sub <8 x i16> %104, %36
  %113 = sub <8 x i16> zeroinitializer, %112
  %114 = icmp slt <8 x i16> %112, zeroinitializer
  %115 = select <8 x i1> %114, <8 x i16> %113, <8 x i16> %112
  %116 = icmp sgt <8 x i16> %108, %111
  %117 = icmp sgt <8 x i16> %108, %115
  %118 = or <8 x i1> %117, %116
  %119 = sext <8 x i1> %118 to <8 x i16>
  %120 = bitcast <8 x i16> %119 to <2 x i64>
  %121 = icmp sgt <8 x i16> %111, %115
  %122 = sext <8 x i1> %121 to <8 x i16>
  %123 = bitcast <8 x i16> %122 to <2 x i64>
  %124 = xor <2 x i64> %120, <i64 -1, i64 -1>
  %125 = and <2 x i64> %124, %75
  %126 = and <8 x i16> %36, %122
  %127 = bitcast <8 x i16> %126 to <2 x i64>
  %128 = xor <2 x i64> %123, <i64 -1, i64 -1>
  %129 = and <2 x i64> %128, %19
  %130 = or <2 x i64> %129, %127
  %131 = and <2 x i64> %130, %120
  %132 = or <2 x i64> %131, %125
  %133 = bitcast <2 x i64> %102 to <8 x i16>
  %134 = bitcast <2 x i64> %132 to <8 x i16>
  %135 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %133, <8 x i16> %134) #3
  %136 = add <8 x i16> %41, %76
  %137 = sub <8 x i16> %136, %40
  %138 = sub <8 x i16> zeroinitializer, %137
  %139 = icmp slt <8 x i16> %137, zeroinitializer
  %140 = select <8 x i1> %139, <8 x i16> %138, <8 x i16> %137
  %141 = sub <8 x i16> %136, %36
  %142 = sub <8 x i16> zeroinitializer, %141
  %143 = icmp slt <8 x i16> %141, zeroinitializer
  %144 = select <8 x i1> %143, <8 x i16> %142, <8 x i16> %141
  %145 = icmp sgt <8 x i16> %54, %140
  %146 = icmp sgt <8 x i16> %54, %144
  %147 = or <8 x i1> %146, %145
  %148 = sext <8 x i1> %147 to <8 x i16>
  %149 = bitcast <8 x i16> %148 to <2 x i64>
  %150 = icmp sgt <8 x i16> %140, %144
  %151 = sext <8 x i1> %150 to <8 x i16>
  %152 = bitcast <8 x i16> %151 to <2 x i64>
  %153 = xor <2 x i64> %149, <i64 -1, i64 -1>
  %154 = and <2 x i64> %153, %75
  %155 = and <8 x i16> %36, %151
  %156 = bitcast <8 x i16> %155 to <2 x i64>
  %157 = xor <2 x i64> %152, <i64 -1, i64 -1>
  %158 = and <2 x i64> %157, %21
  %159 = or <2 x i64> %158, %156
  %160 = and <2 x i64> %159, %149
  %161 = or <2 x i64> %160, %154
  %162 = add <8 x i16> %103, %42
  %163 = sub <8 x i16> %162, %76
  %164 = sub <8 x i16> zeroinitializer, %163
  %165 = icmp slt <8 x i16> %163, zeroinitializer
  %166 = select <8 x i1> %165, <8 x i16> %164, <8 x i16> %163
  %167 = sub <8 x i16> %162, %36
  %168 = sub <8 x i16> zeroinitializer, %167
  %169 = icmp slt <8 x i16> %167, zeroinitializer
  %170 = select <8 x i1> %169, <8 x i16> %168, <8 x i16> %167
  %171 = icmp sgt <8 x i16> %166, %111
  %172 = icmp sgt <8 x i16> %166, %170
  %173 = or <8 x i1> %172, %171
  %174 = sext <8 x i1> %173 to <8 x i16>
  %175 = bitcast <8 x i16> %174 to <2 x i64>
  %176 = icmp sgt <8 x i16> %111, %170
  %177 = sext <8 x i1> %176 to <8 x i16>
  %178 = bitcast <8 x i16> %177 to <2 x i64>
  %179 = xor <2 x i64> %175, <i64 -1, i64 -1>
  %180 = and <2 x i64> %179, %75
  %181 = and <8 x i16> %36, %177
  %182 = bitcast <8 x i16> %181 to <2 x i64>
  %183 = xor <2 x i64> %178, <i64 -1, i64 -1>
  %184 = and <2 x i64> %183, %23
  %185 = or <2 x i64> %184, %182
  %186 = and <2 x i64> %185, %175
  %187 = or <2 x i64> %186, %180
  %188 = bitcast <2 x i64> %161 to <8 x i16>
  %189 = bitcast <2 x i64> %187 to <8 x i16>
  %190 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %188, <8 x i16> %189) #3
  %191 = add <8 x i16> %44, %76
  %192 = sub <8 x i16> %191, %43
  %193 = sub <8 x i16> zeroinitializer, %192
  %194 = icmp slt <8 x i16> %192, zeroinitializer
  %195 = select <8 x i1> %194, <8 x i16> %193, <8 x i16> %192
  %196 = sub <8 x i16> %191, %36
  %197 = sub <8 x i16> zeroinitializer, %196
  %198 = icmp slt <8 x i16> %196, zeroinitializer
  %199 = select <8 x i1> %198, <8 x i16> %197, <8 x i16> %196
  %200 = icmp sgt <8 x i16> %57, %195
  %201 = icmp sgt <8 x i16> %57, %199
  %202 = or <8 x i1> %201, %200
  %203 = sext <8 x i1> %202 to <8 x i16>
  %204 = bitcast <8 x i16> %203 to <2 x i64>
  %205 = icmp sgt <8 x i16> %195, %199
  %206 = sext <8 x i1> %205 to <8 x i16>
  %207 = bitcast <8 x i16> %206 to <2 x i64>
  %208 = xor <2 x i64> %204, <i64 -1, i64 -1>
  %209 = and <2 x i64> %208, %75
  %210 = and <8 x i16> %36, %206
  %211 = bitcast <8 x i16> %210 to <2 x i64>
  %212 = xor <2 x i64> %207, <i64 -1, i64 -1>
  %213 = and <2 x i64> %212, %25
  %214 = or <2 x i64> %213, %211
  %215 = and <2 x i64> %214, %204
  %216 = or <2 x i64> %215, %209
  %217 = add <8 x i16> %103, %45
  %218 = sub <8 x i16> %217, %76
  %219 = sub <8 x i16> zeroinitializer, %218
  %220 = icmp slt <8 x i16> %218, zeroinitializer
  %221 = select <8 x i1> %220, <8 x i16> %219, <8 x i16> %218
  %222 = sub <8 x i16> %217, %36
  %223 = sub <8 x i16> zeroinitializer, %222
  %224 = icmp slt <8 x i16> %222, zeroinitializer
  %225 = select <8 x i1> %224, <8 x i16> %223, <8 x i16> %222
  %226 = icmp sgt <8 x i16> %221, %111
  %227 = icmp sgt <8 x i16> %221, %225
  %228 = or <8 x i1> %227, %226
  %229 = sext <8 x i1> %228 to <8 x i16>
  %230 = bitcast <8 x i16> %229 to <2 x i64>
  %231 = icmp sgt <8 x i16> %111, %225
  %232 = sext <8 x i1> %231 to <8 x i16>
  %233 = bitcast <8 x i16> %232 to <2 x i64>
  %234 = xor <2 x i64> %230, <i64 -1, i64 -1>
  %235 = and <2 x i64> %234, %75
  %236 = and <8 x i16> %36, %232
  %237 = bitcast <8 x i16> %236 to <2 x i64>
  %238 = xor <2 x i64> %233, <i64 -1, i64 -1>
  %239 = and <2 x i64> %238, %27
  %240 = or <2 x i64> %239, %237
  %241 = and <2 x i64> %240, %230
  %242 = or <2 x i64> %241, %235
  %243 = bitcast <2 x i64> %216 to <8 x i16>
  %244 = bitcast <2 x i64> %242 to <8 x i16>
  %245 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %243, <8 x i16> %244) #3
  %246 = add <8 x i16> %47, %76
  %247 = sub <8 x i16> %246, %46
  %248 = sub <8 x i16> zeroinitializer, %247
  %249 = icmp slt <8 x i16> %247, zeroinitializer
  %250 = select <8 x i1> %249, <8 x i16> %248, <8 x i16> %247
  %251 = sub <8 x i16> %246, %36
  %252 = sub <8 x i16> zeroinitializer, %251
  %253 = icmp slt <8 x i16> %251, zeroinitializer
  %254 = select <8 x i1> %253, <8 x i16> %252, <8 x i16> %251
  %255 = icmp sgt <8 x i16> %60, %250
  %256 = icmp sgt <8 x i16> %60, %254
  %257 = or <8 x i1> %256, %255
  %258 = sext <8 x i1> %257 to <8 x i16>
  %259 = bitcast <8 x i16> %258 to <2 x i64>
  %260 = icmp sgt <8 x i16> %250, %254
  %261 = sext <8 x i1> %260 to <8 x i16>
  %262 = bitcast <8 x i16> %261 to <2 x i64>
  %263 = xor <2 x i64> %259, <i64 -1, i64 -1>
  %264 = and <2 x i64> %263, %75
  %265 = and <8 x i16> %36, %261
  %266 = bitcast <8 x i16> %265 to <2 x i64>
  %267 = xor <2 x i64> %262, <i64 -1, i64 -1>
  %268 = and <2 x i64> %267, %29
  %269 = or <2 x i64> %268, %266
  %270 = and <2 x i64> %269, %259
  %271 = or <2 x i64> %270, %264
  %272 = add <8 x i16> %103, %48
  %273 = sub <8 x i16> %272, %76
  %274 = sub <8 x i16> zeroinitializer, %273
  %275 = icmp slt <8 x i16> %273, zeroinitializer
  %276 = select <8 x i1> %275, <8 x i16> %274, <8 x i16> %273
  %277 = sub <8 x i16> %272, %36
  %278 = sub <8 x i16> zeroinitializer, %277
  %279 = icmp slt <8 x i16> %277, zeroinitializer
  %280 = select <8 x i1> %279, <8 x i16> %278, <8 x i16> %277
  %281 = icmp sgt <8 x i16> %276, %111
  %282 = icmp sgt <8 x i16> %276, %280
  %283 = or <8 x i1> %282, %281
  %284 = sext <8 x i1> %283 to <8 x i16>
  %285 = bitcast <8 x i16> %284 to <2 x i64>
  %286 = icmp sgt <8 x i16> %111, %280
  %287 = sext <8 x i1> %286 to <8 x i16>
  %288 = bitcast <8 x i16> %287 to <2 x i64>
  %289 = xor <2 x i64> %285, <i64 -1, i64 -1>
  %290 = and <2 x i64> %289, %75
  %291 = and <8 x i16> %36, %287
  %292 = bitcast <8 x i16> %291 to <2 x i64>
  %293 = xor <2 x i64> %288, <i64 -1, i64 -1>
  %294 = and <2 x i64> %293, %31
  %295 = or <2 x i64> %294, %292
  %296 = and <2 x i64> %295, %285
  %297 = or <2 x i64> %296, %290
  %298 = bitcast <2 x i64> %271 to <8 x i16>
  %299 = bitcast <2 x i64> %297 to <8 x i16>
  %300 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %298, <8 x i16> %299) #3
  %301 = bitcast i8* %69 to <16 x i8>*
  store <16 x i8> %135, <16 x i8>* %301, align 16
  %302 = getelementptr inbounds i8, i8* %69, i64 16
  %303 = bitcast i8* %302 to <16 x i8>*
  store <16 x i8> %190, <16 x i8>* %303, align 16
  %304 = getelementptr inbounds i8, i8* %69, i64 32
  %305 = bitcast i8* %304 to <16 x i8>*
  store <16 x i8> %245, <16 x i8>* %305, align 16
  %306 = getelementptr inbounds i8, i8* %69, i64 48
  %307 = bitcast i8* %306 to <16 x i8>*
  store <16 x i8> %300, <16 x i8>* %307, align 16
  %308 = getelementptr inbounds i8, i8* %69, i64 %1
  %309 = add <8 x i16> %72, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %310 = bitcast <8 x i16> %309 to <2 x i64>
  %311 = add nuw nsw i32 %70, 1
  %312 = icmp eq i32 %311, 16
  br i1 %312, label %313, label %68

313:                                              ; preds = %68
  %314 = add nuw nsw i64 %62, 1
  %315 = icmp eq i64 %314, 4
  br i1 %315, label %316, label %61

316:                                              ; preds = %313
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_paeth_predictor_64x16_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %2 to <16 x i8>*
  %6 = load <16 x i8>, <16 x i8>* %5, align 16
  %7 = getelementptr inbounds i8, i8* %2, i64 16
  %8 = bitcast i8* %7 to <16 x i8>*
  %9 = load <16 x i8>, <16 x i8>* %8, align 16
  %10 = getelementptr inbounds i8, i8* %2, i64 32
  %11 = bitcast i8* %10 to <16 x i8>*
  %12 = load <16 x i8>, <16 x i8>* %11, align 16
  %13 = getelementptr inbounds i8, i8* %2, i64 48
  %14 = bitcast i8* %13 to <16 x i8>*
  %15 = load <16 x i8>, <16 x i8>* %14, align 16
  %16 = shufflevector <16 x i8> %6, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %17 = bitcast <16 x i8> %16 to <2 x i64>
  %18 = shufflevector <16 x i8> %6, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %19 = bitcast <16 x i8> %18 to <2 x i64>
  %20 = shufflevector <16 x i8> %9, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %21 = bitcast <16 x i8> %20 to <2 x i64>
  %22 = shufflevector <16 x i8> %9, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %23 = bitcast <16 x i8> %22 to <2 x i64>
  %24 = shufflevector <16 x i8> %12, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %25 = bitcast <16 x i8> %24 to <2 x i64>
  %26 = shufflevector <16 x i8> %12, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %27 = bitcast <16 x i8> %26 to <2 x i64>
  %28 = shufflevector <16 x i8> %15, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %29 = bitcast <16 x i8> %28 to <2 x i64>
  %30 = shufflevector <16 x i8> %15, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %31 = bitcast <16 x i8> %30 to <2 x i64>
  %32 = getelementptr inbounds i8, i8* %2, i64 -1
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i16
  %35 = insertelement <8 x i16> undef, i16 %34, i32 0
  %36 = shufflevector <8 x i16> %35, <8 x i16> undef, <8 x i32> zeroinitializer
  %37 = bitcast i8* %3 to <16 x i8>*
  %38 = load <16 x i8>, <16 x i8>* %37, align 16
  %39 = bitcast <16 x i8> %16 to <8 x i16>
  %40 = sub <8 x i16> %39, %36
  %41 = bitcast <16 x i8> %18 to <8 x i16>
  %42 = bitcast <16 x i8> %20 to <8 x i16>
  %43 = sub <8 x i16> %42, %36
  %44 = bitcast <16 x i8> %22 to <8 x i16>
  %45 = bitcast <16 x i8> %24 to <8 x i16>
  %46 = sub <8 x i16> %45, %36
  %47 = bitcast <16 x i8> %26 to <8 x i16>
  %48 = bitcast <16 x i8> %28 to <8 x i16>
  %49 = sub <8 x i16> %48, %36
  %50 = bitcast <16 x i8> %30 to <8 x i16>
  %51 = sub <8 x i16> zeroinitializer, %40
  %52 = icmp slt <8 x i16> %40, zeroinitializer
  %53 = select <8 x i1> %52, <8 x i16> %51, <8 x i16> %40
  %54 = sub <8 x i16> zeroinitializer, %43
  %55 = icmp slt <8 x i16> %43, zeroinitializer
  %56 = select <8 x i1> %55, <8 x i16> %54, <8 x i16> %43
  %57 = sub <8 x i16> zeroinitializer, %46
  %58 = icmp slt <8 x i16> %46, zeroinitializer
  %59 = select <8 x i1> %58, <8 x i16> %57, <8 x i16> %46
  %60 = sub <8 x i16> zeroinitializer, %49
  %61 = icmp slt <8 x i16> %49, zeroinitializer
  %62 = select <8 x i1> %61, <8 x i16> %60, <8 x i16> %49
  br label %63

63:                                               ; preds = %63, %4
  %64 = phi i8* [ %0, %4 ], [ %303, %63 ]
  %65 = phi i32 [ 0, %4 ], [ %306, %63 ]
  %66 = phi <2 x i64> [ <i64 -9223231297218904064, i64 -9223231297218904064>, %4 ], [ %305, %63 ]
  %67 = phi <8 x i16> [ <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, %4 ], [ %304, %63 ]
  %68 = bitcast <2 x i64> %66 to <16 x i8>
  %69 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %38, <16 x i8> %68) #3
  %70 = bitcast <16 x i8> %69 to <2 x i64>
  %71 = bitcast <16 x i8> %69 to <8 x i16>
  %72 = add <8 x i16> %40, %71
  %73 = sub <8 x i16> %72, %39
  %74 = sub <8 x i16> zeroinitializer, %73
  %75 = icmp slt <8 x i16> %73, zeroinitializer
  %76 = select <8 x i1> %75, <8 x i16> %74, <8 x i16> %73
  %77 = sub <8 x i16> %72, %36
  %78 = sub <8 x i16> zeroinitializer, %77
  %79 = icmp slt <8 x i16> %77, zeroinitializer
  %80 = select <8 x i1> %79, <8 x i16> %78, <8 x i16> %77
  %81 = icmp sgt <8 x i16> %53, %76
  %82 = icmp sgt <8 x i16> %53, %80
  %83 = or <8 x i1> %82, %81
  %84 = sext <8 x i1> %83 to <8 x i16>
  %85 = bitcast <8 x i16> %84 to <2 x i64>
  %86 = icmp sgt <8 x i16> %76, %80
  %87 = sext <8 x i1> %86 to <8 x i16>
  %88 = bitcast <8 x i16> %87 to <2 x i64>
  %89 = xor <2 x i64> %85, <i64 -1, i64 -1>
  %90 = and <2 x i64> %89, %70
  %91 = and <8 x i16> %36, %87
  %92 = bitcast <8 x i16> %91 to <2 x i64>
  %93 = xor <2 x i64> %88, <i64 -1, i64 -1>
  %94 = and <2 x i64> %93, %17
  %95 = or <2 x i64> %94, %92
  %96 = and <2 x i64> %95, %85
  %97 = or <2 x i64> %96, %90
  %98 = sub <8 x i16> %71, %36
  %99 = add <8 x i16> %98, %41
  %100 = sub <8 x i16> %99, %71
  %101 = sub <8 x i16> zeroinitializer, %100
  %102 = icmp slt <8 x i16> %100, zeroinitializer
  %103 = select <8 x i1> %102, <8 x i16> %101, <8 x i16> %100
  %104 = sub <8 x i16> zeroinitializer, %98
  %105 = icmp slt <8 x i16> %98, zeroinitializer
  %106 = select <8 x i1> %105, <8 x i16> %104, <8 x i16> %98
  %107 = sub <8 x i16> %99, %36
  %108 = sub <8 x i16> zeroinitializer, %107
  %109 = icmp slt <8 x i16> %107, zeroinitializer
  %110 = select <8 x i1> %109, <8 x i16> %108, <8 x i16> %107
  %111 = icmp sgt <8 x i16> %103, %106
  %112 = icmp sgt <8 x i16> %103, %110
  %113 = or <8 x i1> %112, %111
  %114 = sext <8 x i1> %113 to <8 x i16>
  %115 = bitcast <8 x i16> %114 to <2 x i64>
  %116 = icmp sgt <8 x i16> %106, %110
  %117 = sext <8 x i1> %116 to <8 x i16>
  %118 = bitcast <8 x i16> %117 to <2 x i64>
  %119 = xor <2 x i64> %115, <i64 -1, i64 -1>
  %120 = and <2 x i64> %119, %70
  %121 = and <8 x i16> %36, %117
  %122 = bitcast <8 x i16> %121 to <2 x i64>
  %123 = xor <2 x i64> %118, <i64 -1, i64 -1>
  %124 = and <2 x i64> %123, %19
  %125 = or <2 x i64> %124, %122
  %126 = and <2 x i64> %125, %115
  %127 = or <2 x i64> %126, %120
  %128 = bitcast <2 x i64> %97 to <8 x i16>
  %129 = bitcast <2 x i64> %127 to <8 x i16>
  %130 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %128, <8 x i16> %129) #3
  %131 = add <8 x i16> %43, %71
  %132 = sub <8 x i16> %131, %42
  %133 = sub <8 x i16> zeroinitializer, %132
  %134 = icmp slt <8 x i16> %132, zeroinitializer
  %135 = select <8 x i1> %134, <8 x i16> %133, <8 x i16> %132
  %136 = sub <8 x i16> %131, %36
  %137 = sub <8 x i16> zeroinitializer, %136
  %138 = icmp slt <8 x i16> %136, zeroinitializer
  %139 = select <8 x i1> %138, <8 x i16> %137, <8 x i16> %136
  %140 = icmp sgt <8 x i16> %56, %135
  %141 = icmp sgt <8 x i16> %56, %139
  %142 = or <8 x i1> %141, %140
  %143 = sext <8 x i1> %142 to <8 x i16>
  %144 = bitcast <8 x i16> %143 to <2 x i64>
  %145 = icmp sgt <8 x i16> %135, %139
  %146 = sext <8 x i1> %145 to <8 x i16>
  %147 = bitcast <8 x i16> %146 to <2 x i64>
  %148 = xor <2 x i64> %144, <i64 -1, i64 -1>
  %149 = and <2 x i64> %148, %70
  %150 = and <8 x i16> %36, %146
  %151 = bitcast <8 x i16> %150 to <2 x i64>
  %152 = xor <2 x i64> %147, <i64 -1, i64 -1>
  %153 = and <2 x i64> %152, %21
  %154 = or <2 x i64> %153, %151
  %155 = and <2 x i64> %154, %144
  %156 = or <2 x i64> %155, %149
  %157 = add <8 x i16> %98, %44
  %158 = sub <8 x i16> %157, %71
  %159 = sub <8 x i16> zeroinitializer, %158
  %160 = icmp slt <8 x i16> %158, zeroinitializer
  %161 = select <8 x i1> %160, <8 x i16> %159, <8 x i16> %158
  %162 = sub <8 x i16> %157, %36
  %163 = sub <8 x i16> zeroinitializer, %162
  %164 = icmp slt <8 x i16> %162, zeroinitializer
  %165 = select <8 x i1> %164, <8 x i16> %163, <8 x i16> %162
  %166 = icmp sgt <8 x i16> %161, %106
  %167 = icmp sgt <8 x i16> %161, %165
  %168 = or <8 x i1> %167, %166
  %169 = sext <8 x i1> %168 to <8 x i16>
  %170 = bitcast <8 x i16> %169 to <2 x i64>
  %171 = icmp sgt <8 x i16> %106, %165
  %172 = sext <8 x i1> %171 to <8 x i16>
  %173 = bitcast <8 x i16> %172 to <2 x i64>
  %174 = xor <2 x i64> %170, <i64 -1, i64 -1>
  %175 = and <2 x i64> %174, %70
  %176 = and <8 x i16> %36, %172
  %177 = bitcast <8 x i16> %176 to <2 x i64>
  %178 = xor <2 x i64> %173, <i64 -1, i64 -1>
  %179 = and <2 x i64> %178, %23
  %180 = or <2 x i64> %179, %177
  %181 = and <2 x i64> %180, %170
  %182 = or <2 x i64> %181, %175
  %183 = bitcast <2 x i64> %156 to <8 x i16>
  %184 = bitcast <2 x i64> %182 to <8 x i16>
  %185 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %183, <8 x i16> %184) #3
  %186 = add <8 x i16> %46, %71
  %187 = sub <8 x i16> %186, %45
  %188 = sub <8 x i16> zeroinitializer, %187
  %189 = icmp slt <8 x i16> %187, zeroinitializer
  %190 = select <8 x i1> %189, <8 x i16> %188, <8 x i16> %187
  %191 = sub <8 x i16> %186, %36
  %192 = sub <8 x i16> zeroinitializer, %191
  %193 = icmp slt <8 x i16> %191, zeroinitializer
  %194 = select <8 x i1> %193, <8 x i16> %192, <8 x i16> %191
  %195 = icmp sgt <8 x i16> %59, %190
  %196 = icmp sgt <8 x i16> %59, %194
  %197 = or <8 x i1> %196, %195
  %198 = sext <8 x i1> %197 to <8 x i16>
  %199 = bitcast <8 x i16> %198 to <2 x i64>
  %200 = icmp sgt <8 x i16> %190, %194
  %201 = sext <8 x i1> %200 to <8 x i16>
  %202 = bitcast <8 x i16> %201 to <2 x i64>
  %203 = xor <2 x i64> %199, <i64 -1, i64 -1>
  %204 = and <2 x i64> %203, %70
  %205 = and <8 x i16> %36, %201
  %206 = bitcast <8 x i16> %205 to <2 x i64>
  %207 = xor <2 x i64> %202, <i64 -1, i64 -1>
  %208 = and <2 x i64> %207, %25
  %209 = or <2 x i64> %208, %206
  %210 = and <2 x i64> %209, %199
  %211 = or <2 x i64> %210, %204
  %212 = add <8 x i16> %98, %47
  %213 = sub <8 x i16> %212, %71
  %214 = sub <8 x i16> zeroinitializer, %213
  %215 = icmp slt <8 x i16> %213, zeroinitializer
  %216 = select <8 x i1> %215, <8 x i16> %214, <8 x i16> %213
  %217 = sub <8 x i16> %212, %36
  %218 = sub <8 x i16> zeroinitializer, %217
  %219 = icmp slt <8 x i16> %217, zeroinitializer
  %220 = select <8 x i1> %219, <8 x i16> %218, <8 x i16> %217
  %221 = icmp sgt <8 x i16> %216, %106
  %222 = icmp sgt <8 x i16> %216, %220
  %223 = or <8 x i1> %222, %221
  %224 = sext <8 x i1> %223 to <8 x i16>
  %225 = bitcast <8 x i16> %224 to <2 x i64>
  %226 = icmp sgt <8 x i16> %106, %220
  %227 = sext <8 x i1> %226 to <8 x i16>
  %228 = bitcast <8 x i16> %227 to <2 x i64>
  %229 = xor <2 x i64> %225, <i64 -1, i64 -1>
  %230 = and <2 x i64> %229, %70
  %231 = and <8 x i16> %36, %227
  %232 = bitcast <8 x i16> %231 to <2 x i64>
  %233 = xor <2 x i64> %228, <i64 -1, i64 -1>
  %234 = and <2 x i64> %233, %27
  %235 = or <2 x i64> %234, %232
  %236 = and <2 x i64> %235, %225
  %237 = or <2 x i64> %236, %230
  %238 = bitcast <2 x i64> %211 to <8 x i16>
  %239 = bitcast <2 x i64> %237 to <8 x i16>
  %240 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %238, <8 x i16> %239) #3
  %241 = add <8 x i16> %49, %71
  %242 = sub <8 x i16> %241, %48
  %243 = sub <8 x i16> zeroinitializer, %242
  %244 = icmp slt <8 x i16> %242, zeroinitializer
  %245 = select <8 x i1> %244, <8 x i16> %243, <8 x i16> %242
  %246 = sub <8 x i16> %241, %36
  %247 = sub <8 x i16> zeroinitializer, %246
  %248 = icmp slt <8 x i16> %246, zeroinitializer
  %249 = select <8 x i1> %248, <8 x i16> %247, <8 x i16> %246
  %250 = icmp sgt <8 x i16> %62, %245
  %251 = icmp sgt <8 x i16> %62, %249
  %252 = or <8 x i1> %251, %250
  %253 = sext <8 x i1> %252 to <8 x i16>
  %254 = bitcast <8 x i16> %253 to <2 x i64>
  %255 = icmp sgt <8 x i16> %245, %249
  %256 = sext <8 x i1> %255 to <8 x i16>
  %257 = bitcast <8 x i16> %256 to <2 x i64>
  %258 = xor <2 x i64> %254, <i64 -1, i64 -1>
  %259 = and <2 x i64> %258, %70
  %260 = and <8 x i16> %36, %256
  %261 = bitcast <8 x i16> %260 to <2 x i64>
  %262 = xor <2 x i64> %257, <i64 -1, i64 -1>
  %263 = and <2 x i64> %262, %29
  %264 = or <2 x i64> %263, %261
  %265 = and <2 x i64> %264, %254
  %266 = or <2 x i64> %265, %259
  %267 = add <8 x i16> %98, %50
  %268 = sub <8 x i16> %267, %71
  %269 = sub <8 x i16> zeroinitializer, %268
  %270 = icmp slt <8 x i16> %268, zeroinitializer
  %271 = select <8 x i1> %270, <8 x i16> %269, <8 x i16> %268
  %272 = sub <8 x i16> %267, %36
  %273 = sub <8 x i16> zeroinitializer, %272
  %274 = icmp slt <8 x i16> %272, zeroinitializer
  %275 = select <8 x i1> %274, <8 x i16> %273, <8 x i16> %272
  %276 = icmp sgt <8 x i16> %271, %106
  %277 = icmp sgt <8 x i16> %271, %275
  %278 = or <8 x i1> %277, %276
  %279 = sext <8 x i1> %278 to <8 x i16>
  %280 = bitcast <8 x i16> %279 to <2 x i64>
  %281 = icmp sgt <8 x i16> %106, %275
  %282 = sext <8 x i1> %281 to <8 x i16>
  %283 = bitcast <8 x i16> %282 to <2 x i64>
  %284 = xor <2 x i64> %280, <i64 -1, i64 -1>
  %285 = and <2 x i64> %284, %70
  %286 = and <8 x i16> %36, %282
  %287 = bitcast <8 x i16> %286 to <2 x i64>
  %288 = xor <2 x i64> %283, <i64 -1, i64 -1>
  %289 = and <2 x i64> %288, %31
  %290 = or <2 x i64> %289, %287
  %291 = and <2 x i64> %290, %280
  %292 = or <2 x i64> %291, %285
  %293 = bitcast <2 x i64> %266 to <8 x i16>
  %294 = bitcast <2 x i64> %292 to <8 x i16>
  %295 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %293, <8 x i16> %294) #3
  %296 = bitcast i8* %64 to <16 x i8>*
  store <16 x i8> %130, <16 x i8>* %296, align 16
  %297 = getelementptr inbounds i8, i8* %64, i64 16
  %298 = bitcast i8* %297 to <16 x i8>*
  store <16 x i8> %185, <16 x i8>* %298, align 16
  %299 = getelementptr inbounds i8, i8* %64, i64 32
  %300 = bitcast i8* %299 to <16 x i8>*
  store <16 x i8> %240, <16 x i8>* %300, align 16
  %301 = getelementptr inbounds i8, i8* %64, i64 48
  %302 = bitcast i8* %301 to <16 x i8>*
  store <16 x i8> %295, <16 x i8>* %302, align 16
  %303 = getelementptr inbounds i8, i8* %64, i64 %1
  %304 = add <8 x i16> %67, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %305 = bitcast <8 x i16> %304 to <2 x i64>
  %306 = add nuw nsw i32 %65, 1
  %307 = icmp eq i32 %306, 16
  br i1 %307, label %308, label %63

308:                                              ; preds = %63
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_smooth_predictor_4x4_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %2 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = insertelement <4 x i32> undef, i32 %6, i32 0
  %8 = bitcast i8* %3 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %9, i32 0
  %11 = getelementptr inbounds i8, i8* %2, i64 3
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i16
  %14 = insertelement <8 x i16> undef, i16 %13, i32 0
  %15 = shufflevector <8 x i16> %14, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = getelementptr inbounds i8, i8* %3, i64 3
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i16
  %19 = insertelement <8 x i16> undef, i16 %18, i32 0
  %20 = shufflevector <8 x i16> %19, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %21 = bitcast <4 x i32> %7 to <16 x i8>
  %22 = shufflevector <16 x i8> %21, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %23 = bitcast <16 x i8> %22 to <8 x i16>
  %24 = shufflevector <8 x i16> %23, <8 x i16> %20, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %25 = bitcast <4 x i32> %10 to <16 x i8>
  %26 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %24, <8 x i16> <i16 255, i16 1, i16 255, i16 1, i16 255, i16 1, i16 255, i16 1>) #3
  %27 = shufflevector <16 x i8> %25, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %28 = bitcast <16 x i8> %27 to <8 x i16>
  %29 = shufflevector <8 x i16> %28, <8 x i16> %15, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %30 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %29, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %31 = add <4 x i32> %26, <i32 256, i32 256, i32 256, i32 256>
  %32 = add <4 x i32> %31, %30
  %33 = ashr <4 x i32> %32, <i32 9, i32 9, i32 9, i32 9>
  %34 = bitcast <4 x i32> %33 to <16 x i8>
  %35 = shufflevector <16 x i8> %34, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %36 = bitcast <16 x i8> %35 to <4 x i32>
  %37 = extractelement <4 x i32> %36, i32 0
  %38 = bitcast i8* %0 to i32*
  store i32 %37, i32* %38, align 4
  %39 = getelementptr inbounds i8, i8* %0, i64 %1
  %40 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %24, <8 x i16> <i16 149, i16 107, i16 149, i16 107, i16 149, i16 107, i16 149, i16 107>) #3
  %41 = shufflevector <16 x i8> %25, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %42 = bitcast <16 x i8> %41 to <8 x i16>
  %43 = shufflevector <8 x i16> %42, <8 x i16> %15, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %44 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %43, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %45 = add <4 x i32> %40, <i32 256, i32 256, i32 256, i32 256>
  %46 = add <4 x i32> %45, %44
  %47 = ashr <4 x i32> %46, <i32 9, i32 9, i32 9, i32 9>
  %48 = bitcast <4 x i32> %47 to <16 x i8>
  %49 = shufflevector <16 x i8> %48, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %50 = bitcast <16 x i8> %49 to <4 x i32>
  %51 = extractelement <4 x i32> %50, i32 0
  %52 = bitcast i8* %39 to i32*
  store i32 %51, i32* %52, align 4
  %53 = getelementptr inbounds i8, i8* %39, i64 %1
  %54 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %24, <8 x i16> <i16 85, i16 171, i16 85, i16 171, i16 85, i16 171, i16 85, i16 171>) #3
  %55 = shufflevector <16 x i8> %25, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %56 = bitcast <16 x i8> %55 to <8 x i16>
  %57 = shufflevector <8 x i16> %56, <8 x i16> %15, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %58 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %57, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %59 = add <4 x i32> %54, <i32 256, i32 256, i32 256, i32 256>
  %60 = add <4 x i32> %59, %58
  %61 = ashr <4 x i32> %60, <i32 9, i32 9, i32 9, i32 9>
  %62 = bitcast <4 x i32> %61 to <16 x i8>
  %63 = shufflevector <16 x i8> %62, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %64 = bitcast <16 x i8> %63 to <4 x i32>
  %65 = extractelement <4 x i32> %64, i32 0
  %66 = bitcast i8* %53 to i32*
  store i32 %65, i32* %66, align 4
  %67 = getelementptr inbounds i8, i8* %53, i64 %1
  %68 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %24, <8 x i16> <i16 64, i16 192, i16 64, i16 192, i16 64, i16 192, i16 64, i16 192>) #3
  %69 = shufflevector <16 x i8> %25, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %70 = bitcast <16 x i8> %69 to <8 x i16>
  %71 = shufflevector <8 x i16> %70, <8 x i16> %15, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %72 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %71, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %73 = add <4 x i32> %68, <i32 256, i32 256, i32 256, i32 256>
  %74 = add <4 x i32> %73, %72
  %75 = ashr <4 x i32> %74, <i32 9, i32 9, i32 9, i32 9>
  %76 = bitcast <4 x i32> %75 to <16 x i8>
  %77 = shufflevector <16 x i8> %76, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %78 = bitcast <16 x i8> %77 to <4 x i32>
  %79 = extractelement <4 x i32> %78, i32 0
  %80 = bitcast i8* %67 to i32*
  store i32 %79, i32* %80, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_smooth_predictor_4x8_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %2 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = insertelement <4 x i32> undef, i32 %6, i32 0
  %8 = bitcast i8* %3 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %9, i32 0
  %11 = getelementptr inbounds i8, i8* %2, i64 3
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i16
  %14 = insertelement <8 x i16> undef, i16 %13, i32 0
  %15 = shufflevector <8 x i16> %14, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = getelementptr inbounds i8, i8* %3, i64 7
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i16
  %19 = insertelement <8 x i16> undef, i16 %18, i32 0
  %20 = shufflevector <8 x i16> %19, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %21 = bitcast <4 x i32> %7 to <16 x i8>
  %22 = shufflevector <16 x i8> %21, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %23 = bitcast <16 x i8> %22 to <8 x i16>
  %24 = shufflevector <8 x i16> %23, <8 x i16> %20, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %25 = bitcast <2 x i64> %10 to <16 x i8>
  %26 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %24, <8 x i16> <i16 255, i16 1, i16 255, i16 1, i16 255, i16 1, i16 255, i16 1>) #3
  %27 = shufflevector <16 x i8> %25, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %28 = bitcast <16 x i8> %27 to <8 x i16>
  %29 = shufflevector <8 x i16> %28, <8 x i16> %15, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %30 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %29, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %31 = add <4 x i32> %26, <i32 256, i32 256, i32 256, i32 256>
  %32 = add <4 x i32> %31, %30
  %33 = ashr <4 x i32> %32, <i32 9, i32 9, i32 9, i32 9>
  %34 = bitcast <4 x i32> %33 to <16 x i8>
  %35 = shufflevector <16 x i8> %34, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %36 = bitcast <16 x i8> %35 to <4 x i32>
  %37 = extractelement <4 x i32> %36, i32 0
  %38 = bitcast i8* %0 to i32*
  store i32 %37, i32* %38, align 4
  %39 = getelementptr inbounds i8, i8* %0, i64 %1
  %40 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %24, <8 x i16> <i16 197, i16 59, i16 197, i16 59, i16 197, i16 59, i16 197, i16 59>) #3
  %41 = shufflevector <16 x i8> %25, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %42 = bitcast <16 x i8> %41 to <8 x i16>
  %43 = shufflevector <8 x i16> %42, <8 x i16> %15, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %44 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %43, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %45 = add <4 x i32> %40, <i32 256, i32 256, i32 256, i32 256>
  %46 = add <4 x i32> %45, %44
  %47 = ashr <4 x i32> %46, <i32 9, i32 9, i32 9, i32 9>
  %48 = bitcast <4 x i32> %47 to <16 x i8>
  %49 = shufflevector <16 x i8> %48, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %50 = bitcast <16 x i8> %49 to <4 x i32>
  %51 = extractelement <4 x i32> %50, i32 0
  %52 = bitcast i8* %39 to i32*
  store i32 %51, i32* %52, align 4
  %53 = getelementptr inbounds i8, i8* %39, i64 %1
  %54 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %24, <8 x i16> <i16 146, i16 110, i16 146, i16 110, i16 146, i16 110, i16 146, i16 110>) #3
  %55 = shufflevector <16 x i8> %25, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %56 = bitcast <16 x i8> %55 to <8 x i16>
  %57 = shufflevector <8 x i16> %56, <8 x i16> %15, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %58 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %57, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %59 = add <4 x i32> %54, <i32 256, i32 256, i32 256, i32 256>
  %60 = add <4 x i32> %59, %58
  %61 = ashr <4 x i32> %60, <i32 9, i32 9, i32 9, i32 9>
  %62 = bitcast <4 x i32> %61 to <16 x i8>
  %63 = shufflevector <16 x i8> %62, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %64 = bitcast <16 x i8> %63 to <4 x i32>
  %65 = extractelement <4 x i32> %64, i32 0
  %66 = bitcast i8* %53 to i32*
  store i32 %65, i32* %66, align 4
  %67 = getelementptr inbounds i8, i8* %53, i64 %1
  %68 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %24, <8 x i16> <i16 105, i16 151, i16 105, i16 151, i16 105, i16 151, i16 105, i16 151>) #3
  %69 = shufflevector <16 x i8> %25, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %70 = bitcast <16 x i8> %69 to <8 x i16>
  %71 = shufflevector <8 x i16> %70, <8 x i16> %15, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %72 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %71, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %73 = add <4 x i32> %68, <i32 256, i32 256, i32 256, i32 256>
  %74 = add <4 x i32> %73, %72
  %75 = ashr <4 x i32> %74, <i32 9, i32 9, i32 9, i32 9>
  %76 = bitcast <4 x i32> %75 to <16 x i8>
  %77 = shufflevector <16 x i8> %76, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %78 = bitcast <16 x i8> %77 to <4 x i32>
  %79 = extractelement <4 x i32> %78, i32 0
  %80 = bitcast i8* %67 to i32*
  store i32 %79, i32* %80, align 4
  %81 = getelementptr inbounds i8, i8* %67, i64 %1
  %82 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %24, <8 x i16> <i16 73, i16 183, i16 73, i16 183, i16 73, i16 183, i16 73, i16 183>) #3
  %83 = shufflevector <16 x i8> %25, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 16, i32 4, i32 16, i32 4, i32 16, i32 4, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %84 = bitcast <16 x i8> %83 to <8 x i16>
  %85 = shufflevector <8 x i16> %84, <8 x i16> %15, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %86 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %85, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %87 = add <4 x i32> %82, <i32 256, i32 256, i32 256, i32 256>
  %88 = add <4 x i32> %87, %86
  %89 = ashr <4 x i32> %88, <i32 9, i32 9, i32 9, i32 9>
  %90 = bitcast <4 x i32> %89 to <16 x i8>
  %91 = shufflevector <16 x i8> %90, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %92 = bitcast <16 x i8> %91 to <4 x i32>
  %93 = extractelement <4 x i32> %92, i32 0
  %94 = bitcast i8* %81 to i32*
  store i32 %93, i32* %94, align 4
  %95 = getelementptr inbounds i8, i8* %81, i64 %1
  %96 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %24, <8 x i16> <i16 50, i16 206, i16 50, i16 206, i16 50, i16 206, i16 50, i16 206>) #3
  %97 = shufflevector <16 x i8> %25, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 5, i32 16, i32 5, i32 16, i32 5, i32 16, i32 5, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %98 = bitcast <16 x i8> %97 to <8 x i16>
  %99 = shufflevector <8 x i16> %98, <8 x i16> %15, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %100 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %99, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %101 = add <4 x i32> %96, <i32 256, i32 256, i32 256, i32 256>
  %102 = add <4 x i32> %101, %100
  %103 = ashr <4 x i32> %102, <i32 9, i32 9, i32 9, i32 9>
  %104 = bitcast <4 x i32> %103 to <16 x i8>
  %105 = shufflevector <16 x i8> %104, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %106 = bitcast <16 x i8> %105 to <4 x i32>
  %107 = extractelement <4 x i32> %106, i32 0
  %108 = bitcast i8* %95 to i32*
  store i32 %107, i32* %108, align 4
  %109 = getelementptr inbounds i8, i8* %95, i64 %1
  %110 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %24, <8 x i16> <i16 37, i16 219, i16 37, i16 219, i16 37, i16 219, i16 37, i16 219>) #3
  %111 = shufflevector <16 x i8> %25, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 6, i32 16, i32 6, i32 16, i32 6, i32 16, i32 6, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %112 = bitcast <16 x i8> %111 to <8 x i16>
  %113 = shufflevector <8 x i16> %112, <8 x i16> %15, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %114 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %113, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %115 = add <4 x i32> %110, <i32 256, i32 256, i32 256, i32 256>
  %116 = add <4 x i32> %115, %114
  %117 = ashr <4 x i32> %116, <i32 9, i32 9, i32 9, i32 9>
  %118 = bitcast <4 x i32> %117 to <16 x i8>
  %119 = shufflevector <16 x i8> %118, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %120 = bitcast <16 x i8> %119 to <4 x i32>
  %121 = extractelement <4 x i32> %120, i32 0
  %122 = bitcast i8* %109 to i32*
  store i32 %121, i32* %122, align 4
  %123 = getelementptr inbounds i8, i8* %109, i64 %1
  %124 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %24, <8 x i16> <i16 32, i16 224, i16 32, i16 224, i16 32, i16 224, i16 32, i16 224>) #3
  %125 = shufflevector <16 x i8> %25, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 7, i32 16, i32 7, i32 16, i32 7, i32 16, i32 7, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %126 = bitcast <16 x i8> %125 to <8 x i16>
  %127 = shufflevector <8 x i16> %126, <8 x i16> %15, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %128 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %127, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %129 = add <4 x i32> %124, <i32 256, i32 256, i32 256, i32 256>
  %130 = add <4 x i32> %129, %128
  %131 = ashr <4 x i32> %130, <i32 9, i32 9, i32 9, i32 9>
  %132 = bitcast <4 x i32> %131 to <16 x i8>
  %133 = shufflevector <16 x i8> %132, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %134 = bitcast <16 x i8> %133 to <4 x i32>
  %135 = extractelement <4 x i32> %134, i32 0
  %136 = bitcast i8* %123 to i32*
  store i32 %135, i32* %136, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_smooth_predictor_4x16_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %2 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = insertelement <4 x i32> undef, i32 %6, i32 0
  %8 = bitcast i8* %3 to <16 x i8>*
  %9 = load <16 x i8>, <16 x i8>* %8, align 1
  %10 = getelementptr inbounds i8, i8* %2, i64 3
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i16
  %13 = insertelement <8 x i16> undef, i16 %12, i32 0
  %14 = shufflevector <8 x i16> %13, <8 x i16> undef, <8 x i32> zeroinitializer
  %15 = getelementptr inbounds i8, i8* %3, i64 15
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i16
  %18 = insertelement <8 x i16> undef, i16 %17, i32 0
  %19 = shufflevector <8 x i16> %18, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %20 = bitcast <4 x i32> %7 to <16 x i8>
  %21 = shufflevector <16 x i8> %20, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %22 = bitcast <16 x i8> %21 to <8 x i16>
  %23 = shufflevector <8 x i16> %22, <8 x i16> %19, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %24 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %23, <8 x i16> <i16 255, i16 1, i16 255, i16 1, i16 255, i16 1, i16 255, i16 1>) #3
  %25 = shufflevector <16 x i8> %9, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %26 = bitcast <16 x i8> %25 to <8 x i16>
  %27 = shufflevector <8 x i16> %26, <8 x i16> %14, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %28 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %27, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %29 = add <4 x i32> %24, <i32 256, i32 256, i32 256, i32 256>
  %30 = add <4 x i32> %29, %28
  %31 = ashr <4 x i32> %30, <i32 9, i32 9, i32 9, i32 9>
  %32 = bitcast <4 x i32> %31 to <16 x i8>
  %33 = shufflevector <16 x i8> %32, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %34 = bitcast <16 x i8> %33 to <4 x i32>
  %35 = extractelement <4 x i32> %34, i32 0
  %36 = bitcast i8* %0 to i32*
  store i32 %35, i32* %36, align 4
  %37 = getelementptr inbounds i8, i8* %0, i64 %1
  %38 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %23, <8 x i16> <i16 225, i16 31, i16 225, i16 31, i16 225, i16 31, i16 225, i16 31>) #3
  %39 = shufflevector <16 x i8> %9, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %40 = bitcast <16 x i8> %39 to <8 x i16>
  %41 = shufflevector <8 x i16> %40, <8 x i16> %14, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %42 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %41, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %43 = add <4 x i32> %38, <i32 256, i32 256, i32 256, i32 256>
  %44 = add <4 x i32> %43, %42
  %45 = ashr <4 x i32> %44, <i32 9, i32 9, i32 9, i32 9>
  %46 = bitcast <4 x i32> %45 to <16 x i8>
  %47 = shufflevector <16 x i8> %46, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %48 = bitcast <16 x i8> %47 to <4 x i32>
  %49 = extractelement <4 x i32> %48, i32 0
  %50 = bitcast i8* %37 to i32*
  store i32 %49, i32* %50, align 4
  %51 = getelementptr inbounds i8, i8* %37, i64 %1
  %52 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %23, <8 x i16> <i16 196, i16 60, i16 196, i16 60, i16 196, i16 60, i16 196, i16 60>) #3
  %53 = shufflevector <16 x i8> %9, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %54 = bitcast <16 x i8> %53 to <8 x i16>
  %55 = shufflevector <8 x i16> %54, <8 x i16> %14, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %56 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %55, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %57 = add <4 x i32> %52, <i32 256, i32 256, i32 256, i32 256>
  %58 = add <4 x i32> %57, %56
  %59 = ashr <4 x i32> %58, <i32 9, i32 9, i32 9, i32 9>
  %60 = bitcast <4 x i32> %59 to <16 x i8>
  %61 = shufflevector <16 x i8> %60, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %62 = bitcast <16 x i8> %61 to <4 x i32>
  %63 = extractelement <4 x i32> %62, i32 0
  %64 = bitcast i8* %51 to i32*
  store i32 %63, i32* %64, align 4
  %65 = getelementptr inbounds i8, i8* %51, i64 %1
  %66 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %23, <8 x i16> <i16 170, i16 86, i16 170, i16 86, i16 170, i16 86, i16 170, i16 86>) #3
  %67 = shufflevector <16 x i8> %9, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %68 = bitcast <16 x i8> %67 to <8 x i16>
  %69 = shufflevector <8 x i16> %68, <8 x i16> %14, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %70 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %69, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %71 = add <4 x i32> %66, <i32 256, i32 256, i32 256, i32 256>
  %72 = add <4 x i32> %71, %70
  %73 = ashr <4 x i32> %72, <i32 9, i32 9, i32 9, i32 9>
  %74 = bitcast <4 x i32> %73 to <16 x i8>
  %75 = shufflevector <16 x i8> %74, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %76 = bitcast <16 x i8> %75 to <4 x i32>
  %77 = extractelement <4 x i32> %76, i32 0
  %78 = bitcast i8* %65 to i32*
  store i32 %77, i32* %78, align 4
  %79 = getelementptr inbounds i8, i8* %65, i64 %1
  %80 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %23, <8 x i16> <i16 145, i16 111, i16 145, i16 111, i16 145, i16 111, i16 145, i16 111>) #3
  %81 = shufflevector <16 x i8> %9, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 16, i32 4, i32 16, i32 4, i32 16, i32 4, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %82 = bitcast <16 x i8> %81 to <8 x i16>
  %83 = shufflevector <8 x i16> %82, <8 x i16> %14, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %84 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %83, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %85 = add <4 x i32> %80, <i32 256, i32 256, i32 256, i32 256>
  %86 = add <4 x i32> %85, %84
  %87 = ashr <4 x i32> %86, <i32 9, i32 9, i32 9, i32 9>
  %88 = bitcast <4 x i32> %87 to <16 x i8>
  %89 = shufflevector <16 x i8> %88, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %90 = bitcast <16 x i8> %89 to <4 x i32>
  %91 = extractelement <4 x i32> %90, i32 0
  %92 = bitcast i8* %79 to i32*
  store i32 %91, i32* %92, align 4
  %93 = getelementptr inbounds i8, i8* %79, i64 %1
  %94 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %23, <8 x i16> <i16 123, i16 133, i16 123, i16 133, i16 123, i16 133, i16 123, i16 133>) #3
  %95 = shufflevector <16 x i8> %9, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 5, i32 16, i32 5, i32 16, i32 5, i32 16, i32 5, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %96 = bitcast <16 x i8> %95 to <8 x i16>
  %97 = shufflevector <8 x i16> %96, <8 x i16> %14, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %98 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %97, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %99 = add <4 x i32> %94, <i32 256, i32 256, i32 256, i32 256>
  %100 = add <4 x i32> %99, %98
  %101 = ashr <4 x i32> %100, <i32 9, i32 9, i32 9, i32 9>
  %102 = bitcast <4 x i32> %101 to <16 x i8>
  %103 = shufflevector <16 x i8> %102, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %104 = bitcast <16 x i8> %103 to <4 x i32>
  %105 = extractelement <4 x i32> %104, i32 0
  %106 = bitcast i8* %93 to i32*
  store i32 %105, i32* %106, align 4
  %107 = getelementptr inbounds i8, i8* %93, i64 %1
  %108 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %23, <8 x i16> <i16 102, i16 154, i16 102, i16 154, i16 102, i16 154, i16 102, i16 154>) #3
  %109 = shufflevector <16 x i8> %9, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 6, i32 16, i32 6, i32 16, i32 6, i32 16, i32 6, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %110 = bitcast <16 x i8> %109 to <8 x i16>
  %111 = shufflevector <8 x i16> %110, <8 x i16> %14, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %112 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %111, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %113 = add <4 x i32> %108, <i32 256, i32 256, i32 256, i32 256>
  %114 = add <4 x i32> %113, %112
  %115 = ashr <4 x i32> %114, <i32 9, i32 9, i32 9, i32 9>
  %116 = bitcast <4 x i32> %115 to <16 x i8>
  %117 = shufflevector <16 x i8> %116, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %118 = bitcast <16 x i8> %117 to <4 x i32>
  %119 = extractelement <4 x i32> %118, i32 0
  %120 = bitcast i8* %107 to i32*
  store i32 %119, i32* %120, align 4
  %121 = getelementptr inbounds i8, i8* %107, i64 %1
  %122 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %23, <8 x i16> <i16 84, i16 172, i16 84, i16 172, i16 84, i16 172, i16 84, i16 172>) #3
  %123 = shufflevector <16 x i8> %9, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 7, i32 16, i32 7, i32 16, i32 7, i32 16, i32 7, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %124 = bitcast <16 x i8> %123 to <8 x i16>
  %125 = shufflevector <8 x i16> %124, <8 x i16> %14, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %126 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %125, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %127 = add <4 x i32> %122, <i32 256, i32 256, i32 256, i32 256>
  %128 = add <4 x i32> %127, %126
  %129 = ashr <4 x i32> %128, <i32 9, i32 9, i32 9, i32 9>
  %130 = bitcast <4 x i32> %129 to <16 x i8>
  %131 = shufflevector <16 x i8> %130, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %132 = bitcast <16 x i8> %131 to <4 x i32>
  %133 = extractelement <4 x i32> %132, i32 0
  %134 = bitcast i8* %121 to i32*
  store i32 %133, i32* %134, align 4
  %135 = shl i64 %1, 3
  %136 = getelementptr inbounds i8, i8* %0, i64 %135
  %137 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %23, <8 x i16> <i16 68, i16 188, i16 68, i16 188, i16 68, i16 188, i16 68, i16 188>) #3
  %138 = shufflevector <16 x i8> %9, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 16, i32 8, i32 16, i32 8, i32 16, i32 8, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %139 = bitcast <16 x i8> %138 to <8 x i16>
  %140 = shufflevector <8 x i16> %139, <8 x i16> %14, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %141 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %140, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %142 = add <4 x i32> %137, <i32 256, i32 256, i32 256, i32 256>
  %143 = add <4 x i32> %142, %141
  %144 = ashr <4 x i32> %143, <i32 9, i32 9, i32 9, i32 9>
  %145 = bitcast <4 x i32> %144 to <16 x i8>
  %146 = shufflevector <16 x i8> %145, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %147 = bitcast <16 x i8> %146 to <4 x i32>
  %148 = extractelement <4 x i32> %147, i32 0
  %149 = bitcast i8* %136 to i32*
  store i32 %148, i32* %149, align 4
  %150 = getelementptr inbounds i8, i8* %136, i64 %1
  %151 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %23, <8 x i16> <i16 54, i16 202, i16 54, i16 202, i16 54, i16 202, i16 54, i16 202>) #3
  %152 = shufflevector <16 x i8> %9, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 9, i32 16, i32 9, i32 16, i32 9, i32 16, i32 9, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %153 = bitcast <16 x i8> %152 to <8 x i16>
  %154 = shufflevector <8 x i16> %153, <8 x i16> %14, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %155 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %154, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %156 = add <4 x i32> %151, <i32 256, i32 256, i32 256, i32 256>
  %157 = add <4 x i32> %156, %155
  %158 = ashr <4 x i32> %157, <i32 9, i32 9, i32 9, i32 9>
  %159 = bitcast <4 x i32> %158 to <16 x i8>
  %160 = shufflevector <16 x i8> %159, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %161 = bitcast <16 x i8> %160 to <4 x i32>
  %162 = extractelement <4 x i32> %161, i32 0
  %163 = bitcast i8* %150 to i32*
  store i32 %162, i32* %163, align 4
  %164 = getelementptr inbounds i8, i8* %150, i64 %1
  %165 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %23, <8 x i16> <i16 43, i16 213, i16 43, i16 213, i16 43, i16 213, i16 43, i16 213>) #3
  %166 = shufflevector <16 x i8> %9, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 10, i32 16, i32 10, i32 16, i32 10, i32 16, i32 10, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %167 = bitcast <16 x i8> %166 to <8 x i16>
  %168 = shufflevector <8 x i16> %167, <8 x i16> %14, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %169 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %168, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %170 = add <4 x i32> %165, <i32 256, i32 256, i32 256, i32 256>
  %171 = add <4 x i32> %170, %169
  %172 = ashr <4 x i32> %171, <i32 9, i32 9, i32 9, i32 9>
  %173 = bitcast <4 x i32> %172 to <16 x i8>
  %174 = shufflevector <16 x i8> %173, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %175 = bitcast <16 x i8> %174 to <4 x i32>
  %176 = extractelement <4 x i32> %175, i32 0
  %177 = bitcast i8* %164 to i32*
  store i32 %176, i32* %177, align 4
  %178 = getelementptr inbounds i8, i8* %164, i64 %1
  %179 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %23, <8 x i16> <i16 33, i16 223, i16 33, i16 223, i16 33, i16 223, i16 33, i16 223>) #3
  %180 = shufflevector <16 x i8> %9, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 11, i32 16, i32 11, i32 16, i32 11, i32 16, i32 11, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %181 = bitcast <16 x i8> %180 to <8 x i16>
  %182 = shufflevector <8 x i16> %181, <8 x i16> %14, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %183 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %182, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %184 = add <4 x i32> %179, <i32 256, i32 256, i32 256, i32 256>
  %185 = add <4 x i32> %184, %183
  %186 = ashr <4 x i32> %185, <i32 9, i32 9, i32 9, i32 9>
  %187 = bitcast <4 x i32> %186 to <16 x i8>
  %188 = shufflevector <16 x i8> %187, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %189 = bitcast <16 x i8> %188 to <4 x i32>
  %190 = extractelement <4 x i32> %189, i32 0
  %191 = bitcast i8* %178 to i32*
  store i32 %190, i32* %191, align 4
  %192 = getelementptr inbounds i8, i8* %178, i64 %1
  %193 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %23, <8 x i16> <i16 26, i16 230, i16 26, i16 230, i16 26, i16 230, i16 26, i16 230>) #3
  %194 = shufflevector <16 x i8> %9, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 12, i32 16, i32 12, i32 16, i32 12, i32 16, i32 12, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %195 = bitcast <16 x i8> %194 to <8 x i16>
  %196 = shufflevector <8 x i16> %195, <8 x i16> %14, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %197 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %196, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %198 = add <4 x i32> %193, <i32 256, i32 256, i32 256, i32 256>
  %199 = add <4 x i32> %198, %197
  %200 = ashr <4 x i32> %199, <i32 9, i32 9, i32 9, i32 9>
  %201 = bitcast <4 x i32> %200 to <16 x i8>
  %202 = shufflevector <16 x i8> %201, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %203 = bitcast <16 x i8> %202 to <4 x i32>
  %204 = extractelement <4 x i32> %203, i32 0
  %205 = bitcast i8* %192 to i32*
  store i32 %204, i32* %205, align 4
  %206 = getelementptr inbounds i8, i8* %192, i64 %1
  %207 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %23, <8 x i16> <i16 20, i16 236, i16 20, i16 236, i16 20, i16 236, i16 20, i16 236>) #3
  %208 = shufflevector <16 x i8> %9, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 13, i32 16, i32 13, i32 16, i32 13, i32 16, i32 13, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %209 = bitcast <16 x i8> %208 to <8 x i16>
  %210 = shufflevector <8 x i16> %209, <8 x i16> %14, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %211 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %210, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %212 = add <4 x i32> %207, <i32 256, i32 256, i32 256, i32 256>
  %213 = add <4 x i32> %212, %211
  %214 = ashr <4 x i32> %213, <i32 9, i32 9, i32 9, i32 9>
  %215 = bitcast <4 x i32> %214 to <16 x i8>
  %216 = shufflevector <16 x i8> %215, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %217 = bitcast <16 x i8> %216 to <4 x i32>
  %218 = extractelement <4 x i32> %217, i32 0
  %219 = bitcast i8* %206 to i32*
  store i32 %218, i32* %219, align 4
  %220 = getelementptr inbounds i8, i8* %206, i64 %1
  %221 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %23, <8 x i16> <i16 17, i16 239, i16 17, i16 239, i16 17, i16 239, i16 17, i16 239>) #3
  %222 = shufflevector <16 x i8> %9, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 14, i32 16, i32 14, i32 16, i32 14, i32 16, i32 14, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %223 = bitcast <16 x i8> %222 to <8 x i16>
  %224 = shufflevector <8 x i16> %223, <8 x i16> %14, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %225 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %224, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %226 = add <4 x i32> %221, <i32 256, i32 256, i32 256, i32 256>
  %227 = add <4 x i32> %226, %225
  %228 = ashr <4 x i32> %227, <i32 9, i32 9, i32 9, i32 9>
  %229 = bitcast <4 x i32> %228 to <16 x i8>
  %230 = shufflevector <16 x i8> %229, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %231 = bitcast <16 x i8> %230 to <4 x i32>
  %232 = extractelement <4 x i32> %231, i32 0
  %233 = bitcast i8* %220 to i32*
  store i32 %232, i32* %233, align 4
  %234 = getelementptr inbounds i8, i8* %220, i64 %1
  %235 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %23, <8 x i16> <i16 16, i16 240, i16 16, i16 240, i16 16, i16 240, i16 16, i16 240>) #3
  %236 = shufflevector <16 x i8> %9, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 15, i32 16, i32 15, i32 16, i32 15, i32 16, i32 15, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %237 = bitcast <16 x i8> %236 to <8 x i16>
  %238 = shufflevector <8 x i16> %237, <8 x i16> %14, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %239 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %238, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %240 = add <4 x i32> %235, <i32 256, i32 256, i32 256, i32 256>
  %241 = add <4 x i32> %240, %239
  %242 = ashr <4 x i32> %241, <i32 9, i32 9, i32 9, i32 9>
  %243 = bitcast <4 x i32> %242 to <16 x i8>
  %244 = shufflevector <16 x i8> %243, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %245 = bitcast <16 x i8> %244 to <4 x i32>
  %246 = extractelement <4 x i32> %245, i32 0
  %247 = bitcast i8* %234 to i32*
  store i32 %246, i32* %247, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_smooth_predictor_8x4_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = getelementptr inbounds i8, i8* %3, i64 3
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i16
  %8 = insertelement <8 x i16> undef, i16 %7, i32 0
  %9 = shufflevector <8 x i16> %8, <8 x i16> undef, <8 x i32> zeroinitializer
  %10 = bitcast i8* %2 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = insertelement <2 x i64> undef, i64 %11, i32 0
  %13 = bitcast <2 x i64> %12 to <16 x i8>
  %14 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %15 = bitcast <16 x i8> %14 to <8 x i16>
  %16 = shufflevector <8 x i16> %15, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %17 = shufflevector <8 x i16> %15, <8 x i16> %9, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %18 = getelementptr inbounds i8, i8* %2, i64 7
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i16
  %21 = insertelement <8 x i16> undef, i16 %20, i32 0
  %22 = shufflevector <8 x i16> %21, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %23 = bitcast i8* %3 to i32*
  %24 = load i32, i32* %23, align 4
  %25 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %24, i32 0
  %26 = bitcast <4 x i32> %25 to <16 x i8>
  %27 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 255, i16 1, i16 255, i16 1, i16 255, i16 1, i16 255, i16 1>) #3
  %28 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 255, i16 1, i16 255, i16 1, i16 255, i16 1, i16 255, i16 1>) #3
  %29 = shufflevector <16 x i8> %26, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %30 = bitcast <16 x i8> %29 to <8 x i16>
  %31 = shufflevector <8 x i16> %30, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %32 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %31, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %33 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %31, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %34 = add <4 x i32> %27, <i32 256, i32 256, i32 256, i32 256>
  %35 = add <4 x i32> %34, %32
  %36 = ashr <4 x i32> %35, <i32 9, i32 9, i32 9, i32 9>
  %37 = add <4 x i32> %28, <i32 256, i32 256, i32 256, i32 256>
  %38 = add <4 x i32> %37, %33
  %39 = ashr <4 x i32> %38, <i32 9, i32 9, i32 9, i32 9>
  %40 = bitcast <4 x i32> %36 to <8 x i16>
  %41 = bitcast <4 x i32> %39 to <8 x i16>
  %42 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %40, <8 x i16> %41) #3
  %43 = shufflevector <16 x i8> %42, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %44 = bitcast <16 x i8> %43 to <2 x i64>
  %45 = extractelement <2 x i64> %44, i32 0
  %46 = bitcast i8* %0 to i64*
  store i64 %45, i64* %46, align 1
  %47 = getelementptr inbounds i8, i8* %0, i64 %1
  %48 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 149, i16 107, i16 149, i16 107, i16 149, i16 107, i16 149, i16 107>) #3
  %49 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 149, i16 107, i16 149, i16 107, i16 149, i16 107, i16 149, i16 107>) #3
  %50 = shufflevector <16 x i8> %26, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %51 = bitcast <16 x i8> %50 to <8 x i16>
  %52 = shufflevector <8 x i16> %51, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %53 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %52, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %54 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %52, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %55 = add <4 x i32> %48, <i32 256, i32 256, i32 256, i32 256>
  %56 = add <4 x i32> %55, %53
  %57 = ashr <4 x i32> %56, <i32 9, i32 9, i32 9, i32 9>
  %58 = add <4 x i32> %49, <i32 256, i32 256, i32 256, i32 256>
  %59 = add <4 x i32> %58, %54
  %60 = ashr <4 x i32> %59, <i32 9, i32 9, i32 9, i32 9>
  %61 = bitcast <4 x i32> %57 to <8 x i16>
  %62 = bitcast <4 x i32> %60 to <8 x i16>
  %63 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %61, <8 x i16> %62) #3
  %64 = shufflevector <16 x i8> %63, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %65 = bitcast <16 x i8> %64 to <2 x i64>
  %66 = extractelement <2 x i64> %65, i32 0
  %67 = bitcast i8* %47 to i64*
  store i64 %66, i64* %67, align 1
  %68 = getelementptr inbounds i8, i8* %47, i64 %1
  %69 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 85, i16 171, i16 85, i16 171, i16 85, i16 171, i16 85, i16 171>) #3
  %70 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 85, i16 171, i16 85, i16 171, i16 85, i16 171, i16 85, i16 171>) #3
  %71 = shufflevector <16 x i8> %26, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %72 = bitcast <16 x i8> %71 to <8 x i16>
  %73 = shufflevector <8 x i16> %72, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %74 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %73, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %75 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %73, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %76 = add <4 x i32> %69, <i32 256, i32 256, i32 256, i32 256>
  %77 = add <4 x i32> %76, %74
  %78 = ashr <4 x i32> %77, <i32 9, i32 9, i32 9, i32 9>
  %79 = add <4 x i32> %70, <i32 256, i32 256, i32 256, i32 256>
  %80 = add <4 x i32> %79, %75
  %81 = ashr <4 x i32> %80, <i32 9, i32 9, i32 9, i32 9>
  %82 = bitcast <4 x i32> %78 to <8 x i16>
  %83 = bitcast <4 x i32> %81 to <8 x i16>
  %84 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %82, <8 x i16> %83) #3
  %85 = shufflevector <16 x i8> %84, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %86 = bitcast <16 x i8> %85 to <2 x i64>
  %87 = extractelement <2 x i64> %86, i32 0
  %88 = bitcast i8* %68 to i64*
  store i64 %87, i64* %88, align 1
  %89 = getelementptr inbounds i8, i8* %68, i64 %1
  %90 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 64, i16 192, i16 64, i16 192, i16 64, i16 192, i16 64, i16 192>) #3
  %91 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 64, i16 192, i16 64, i16 192, i16 64, i16 192, i16 64, i16 192>) #3
  %92 = shufflevector <16 x i8> %26, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %93 = bitcast <16 x i8> %92 to <8 x i16>
  %94 = shufflevector <8 x i16> %93, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %95 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %94, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %96 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %94, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %97 = add <4 x i32> %90, <i32 256, i32 256, i32 256, i32 256>
  %98 = add <4 x i32> %97, %95
  %99 = ashr <4 x i32> %98, <i32 9, i32 9, i32 9, i32 9>
  %100 = add <4 x i32> %91, <i32 256, i32 256, i32 256, i32 256>
  %101 = add <4 x i32> %100, %96
  %102 = ashr <4 x i32> %101, <i32 9, i32 9, i32 9, i32 9>
  %103 = bitcast <4 x i32> %99 to <8 x i16>
  %104 = bitcast <4 x i32> %102 to <8 x i16>
  %105 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %103, <8 x i16> %104) #3
  %106 = shufflevector <16 x i8> %105, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %107 = bitcast <16 x i8> %106 to <2 x i64>
  %108 = extractelement <2 x i64> %107, i32 0
  %109 = bitcast i8* %89 to i64*
  store i64 %108, i64* %109, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_smooth_predictor_8x8_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = getelementptr inbounds i8, i8* %3, i64 7
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i16
  %8 = insertelement <8 x i16> undef, i16 %7, i32 0
  %9 = shufflevector <8 x i16> %8, <8 x i16> undef, <8 x i32> zeroinitializer
  %10 = bitcast i8* %2 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = insertelement <2 x i64> undef, i64 %11, i32 0
  %13 = bitcast <2 x i64> %12 to <16 x i8>
  %14 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %15 = bitcast <16 x i8> %14 to <8 x i16>
  %16 = shufflevector <8 x i16> %15, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %17 = shufflevector <8 x i16> %15, <8 x i16> %9, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %18 = getelementptr inbounds i8, i8* %2, i64 7
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i16
  %21 = insertelement <8 x i16> undef, i16 %20, i32 0
  %22 = shufflevector <8 x i16> %21, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %23 = bitcast i8* %3 to i64*
  %24 = load i64, i64* %23, align 1
  %25 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %24, i32 0
  %26 = bitcast <2 x i64> %25 to <16 x i8>
  %27 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 255, i16 1, i16 255, i16 1, i16 255, i16 1, i16 255, i16 1>) #3
  %28 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 255, i16 1, i16 255, i16 1, i16 255, i16 1, i16 255, i16 1>) #3
  %29 = shufflevector <16 x i8> %26, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %30 = bitcast <16 x i8> %29 to <8 x i16>
  %31 = shufflevector <8 x i16> %30, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %32 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %31, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %33 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %31, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %34 = add <4 x i32> %27, <i32 256, i32 256, i32 256, i32 256>
  %35 = add <4 x i32> %34, %32
  %36 = ashr <4 x i32> %35, <i32 9, i32 9, i32 9, i32 9>
  %37 = add <4 x i32> %28, <i32 256, i32 256, i32 256, i32 256>
  %38 = add <4 x i32> %37, %33
  %39 = ashr <4 x i32> %38, <i32 9, i32 9, i32 9, i32 9>
  %40 = bitcast <4 x i32> %36 to <8 x i16>
  %41 = bitcast <4 x i32> %39 to <8 x i16>
  %42 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %40, <8 x i16> %41) #3
  %43 = shufflevector <16 x i8> %42, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %44 = bitcast <16 x i8> %43 to <2 x i64>
  %45 = extractelement <2 x i64> %44, i32 0
  %46 = bitcast i8* %0 to i64*
  store i64 %45, i64* %46, align 1
  %47 = getelementptr inbounds i8, i8* %0, i64 %1
  %48 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 197, i16 59, i16 197, i16 59, i16 197, i16 59, i16 197, i16 59>) #3
  %49 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 197, i16 59, i16 197, i16 59, i16 197, i16 59, i16 197, i16 59>) #3
  %50 = shufflevector <16 x i8> %26, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %51 = bitcast <16 x i8> %50 to <8 x i16>
  %52 = shufflevector <8 x i16> %51, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %53 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %52, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %54 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %52, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %55 = add <4 x i32> %48, <i32 256, i32 256, i32 256, i32 256>
  %56 = add <4 x i32> %55, %53
  %57 = ashr <4 x i32> %56, <i32 9, i32 9, i32 9, i32 9>
  %58 = add <4 x i32> %49, <i32 256, i32 256, i32 256, i32 256>
  %59 = add <4 x i32> %58, %54
  %60 = ashr <4 x i32> %59, <i32 9, i32 9, i32 9, i32 9>
  %61 = bitcast <4 x i32> %57 to <8 x i16>
  %62 = bitcast <4 x i32> %60 to <8 x i16>
  %63 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %61, <8 x i16> %62) #3
  %64 = shufflevector <16 x i8> %63, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %65 = bitcast <16 x i8> %64 to <2 x i64>
  %66 = extractelement <2 x i64> %65, i32 0
  %67 = bitcast i8* %47 to i64*
  store i64 %66, i64* %67, align 1
  %68 = getelementptr inbounds i8, i8* %47, i64 %1
  %69 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 146, i16 110, i16 146, i16 110, i16 146, i16 110, i16 146, i16 110>) #3
  %70 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 146, i16 110, i16 146, i16 110, i16 146, i16 110, i16 146, i16 110>) #3
  %71 = shufflevector <16 x i8> %26, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %72 = bitcast <16 x i8> %71 to <8 x i16>
  %73 = shufflevector <8 x i16> %72, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %74 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %73, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %75 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %73, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %76 = add <4 x i32> %69, <i32 256, i32 256, i32 256, i32 256>
  %77 = add <4 x i32> %76, %74
  %78 = ashr <4 x i32> %77, <i32 9, i32 9, i32 9, i32 9>
  %79 = add <4 x i32> %70, <i32 256, i32 256, i32 256, i32 256>
  %80 = add <4 x i32> %79, %75
  %81 = ashr <4 x i32> %80, <i32 9, i32 9, i32 9, i32 9>
  %82 = bitcast <4 x i32> %78 to <8 x i16>
  %83 = bitcast <4 x i32> %81 to <8 x i16>
  %84 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %82, <8 x i16> %83) #3
  %85 = shufflevector <16 x i8> %84, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %86 = bitcast <16 x i8> %85 to <2 x i64>
  %87 = extractelement <2 x i64> %86, i32 0
  %88 = bitcast i8* %68 to i64*
  store i64 %87, i64* %88, align 1
  %89 = getelementptr inbounds i8, i8* %68, i64 %1
  %90 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 105, i16 151, i16 105, i16 151, i16 105, i16 151, i16 105, i16 151>) #3
  %91 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 105, i16 151, i16 105, i16 151, i16 105, i16 151, i16 105, i16 151>) #3
  %92 = shufflevector <16 x i8> %26, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %93 = bitcast <16 x i8> %92 to <8 x i16>
  %94 = shufflevector <8 x i16> %93, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %95 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %94, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %96 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %94, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %97 = add <4 x i32> %90, <i32 256, i32 256, i32 256, i32 256>
  %98 = add <4 x i32> %97, %95
  %99 = ashr <4 x i32> %98, <i32 9, i32 9, i32 9, i32 9>
  %100 = add <4 x i32> %91, <i32 256, i32 256, i32 256, i32 256>
  %101 = add <4 x i32> %100, %96
  %102 = ashr <4 x i32> %101, <i32 9, i32 9, i32 9, i32 9>
  %103 = bitcast <4 x i32> %99 to <8 x i16>
  %104 = bitcast <4 x i32> %102 to <8 x i16>
  %105 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %103, <8 x i16> %104) #3
  %106 = shufflevector <16 x i8> %105, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %107 = bitcast <16 x i8> %106 to <2 x i64>
  %108 = extractelement <2 x i64> %107, i32 0
  %109 = bitcast i8* %89 to i64*
  store i64 %108, i64* %109, align 1
  %110 = getelementptr inbounds i8, i8* %89, i64 %1
  %111 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 73, i16 183, i16 73, i16 183, i16 73, i16 183, i16 73, i16 183>) #3
  %112 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 73, i16 183, i16 73, i16 183, i16 73, i16 183, i16 73, i16 183>) #3
  %113 = shufflevector <16 x i8> %26, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 16, i32 4, i32 16, i32 4, i32 16, i32 4, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %114 = bitcast <16 x i8> %113 to <8 x i16>
  %115 = shufflevector <8 x i16> %114, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %116 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %115, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %117 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %115, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %118 = add <4 x i32> %111, <i32 256, i32 256, i32 256, i32 256>
  %119 = add <4 x i32> %118, %116
  %120 = ashr <4 x i32> %119, <i32 9, i32 9, i32 9, i32 9>
  %121 = add <4 x i32> %112, <i32 256, i32 256, i32 256, i32 256>
  %122 = add <4 x i32> %121, %117
  %123 = ashr <4 x i32> %122, <i32 9, i32 9, i32 9, i32 9>
  %124 = bitcast <4 x i32> %120 to <8 x i16>
  %125 = bitcast <4 x i32> %123 to <8 x i16>
  %126 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %124, <8 x i16> %125) #3
  %127 = shufflevector <16 x i8> %126, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %128 = bitcast <16 x i8> %127 to <2 x i64>
  %129 = extractelement <2 x i64> %128, i32 0
  %130 = bitcast i8* %110 to i64*
  store i64 %129, i64* %130, align 1
  %131 = getelementptr inbounds i8, i8* %110, i64 %1
  %132 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 50, i16 206, i16 50, i16 206, i16 50, i16 206, i16 50, i16 206>) #3
  %133 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 50, i16 206, i16 50, i16 206, i16 50, i16 206, i16 50, i16 206>) #3
  %134 = shufflevector <16 x i8> %26, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 5, i32 16, i32 5, i32 16, i32 5, i32 16, i32 5, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %135 = bitcast <16 x i8> %134 to <8 x i16>
  %136 = shufflevector <8 x i16> %135, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %137 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %136, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %138 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %136, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %139 = add <4 x i32> %132, <i32 256, i32 256, i32 256, i32 256>
  %140 = add <4 x i32> %139, %137
  %141 = ashr <4 x i32> %140, <i32 9, i32 9, i32 9, i32 9>
  %142 = add <4 x i32> %133, <i32 256, i32 256, i32 256, i32 256>
  %143 = add <4 x i32> %142, %138
  %144 = ashr <4 x i32> %143, <i32 9, i32 9, i32 9, i32 9>
  %145 = bitcast <4 x i32> %141 to <8 x i16>
  %146 = bitcast <4 x i32> %144 to <8 x i16>
  %147 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %145, <8 x i16> %146) #3
  %148 = shufflevector <16 x i8> %147, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %149 = bitcast <16 x i8> %148 to <2 x i64>
  %150 = extractelement <2 x i64> %149, i32 0
  %151 = bitcast i8* %131 to i64*
  store i64 %150, i64* %151, align 1
  %152 = getelementptr inbounds i8, i8* %131, i64 %1
  %153 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 37, i16 219, i16 37, i16 219, i16 37, i16 219, i16 37, i16 219>) #3
  %154 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 37, i16 219, i16 37, i16 219, i16 37, i16 219, i16 37, i16 219>) #3
  %155 = shufflevector <16 x i8> %26, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 6, i32 16, i32 6, i32 16, i32 6, i32 16, i32 6, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %156 = bitcast <16 x i8> %155 to <8 x i16>
  %157 = shufflevector <8 x i16> %156, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %158 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %157, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %159 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %157, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %160 = add <4 x i32> %153, <i32 256, i32 256, i32 256, i32 256>
  %161 = add <4 x i32> %160, %158
  %162 = ashr <4 x i32> %161, <i32 9, i32 9, i32 9, i32 9>
  %163 = add <4 x i32> %154, <i32 256, i32 256, i32 256, i32 256>
  %164 = add <4 x i32> %163, %159
  %165 = ashr <4 x i32> %164, <i32 9, i32 9, i32 9, i32 9>
  %166 = bitcast <4 x i32> %162 to <8 x i16>
  %167 = bitcast <4 x i32> %165 to <8 x i16>
  %168 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %166, <8 x i16> %167) #3
  %169 = shufflevector <16 x i8> %168, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %170 = bitcast <16 x i8> %169 to <2 x i64>
  %171 = extractelement <2 x i64> %170, i32 0
  %172 = bitcast i8* %152 to i64*
  store i64 %171, i64* %172, align 1
  %173 = getelementptr inbounds i8, i8* %152, i64 %1
  %174 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 32, i16 224, i16 32, i16 224, i16 32, i16 224, i16 32, i16 224>) #3
  %175 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 32, i16 224, i16 32, i16 224, i16 32, i16 224, i16 32, i16 224>) #3
  %176 = shufflevector <16 x i8> %26, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 7, i32 16, i32 7, i32 16, i32 7, i32 16, i32 7, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %177 = bitcast <16 x i8> %176 to <8 x i16>
  %178 = shufflevector <8 x i16> %177, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %179 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %178, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %180 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %178, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %181 = add <4 x i32> %174, <i32 256, i32 256, i32 256, i32 256>
  %182 = add <4 x i32> %181, %179
  %183 = ashr <4 x i32> %182, <i32 9, i32 9, i32 9, i32 9>
  %184 = add <4 x i32> %175, <i32 256, i32 256, i32 256, i32 256>
  %185 = add <4 x i32> %184, %180
  %186 = ashr <4 x i32> %185, <i32 9, i32 9, i32 9, i32 9>
  %187 = bitcast <4 x i32> %183 to <8 x i16>
  %188 = bitcast <4 x i32> %186 to <8 x i16>
  %189 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %187, <8 x i16> %188) #3
  %190 = shufflevector <16 x i8> %189, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %191 = bitcast <16 x i8> %190 to <2 x i64>
  %192 = extractelement <2 x i64> %191, i32 0
  %193 = bitcast i8* %173 to i64*
  store i64 %192, i64* %193, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_smooth_predictor_8x16_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = getelementptr inbounds i8, i8* %3, i64 15
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i16
  %8 = insertelement <8 x i16> undef, i16 %7, i32 0
  %9 = shufflevector <8 x i16> %8, <8 x i16> undef, <8 x i32> zeroinitializer
  %10 = bitcast i8* %2 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = insertelement <2 x i64> undef, i64 %11, i32 0
  %13 = bitcast <2 x i64> %12 to <16 x i8>
  %14 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %15 = bitcast <16 x i8> %14 to <8 x i16>
  %16 = shufflevector <8 x i16> %15, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %17 = shufflevector <8 x i16> %15, <8 x i16> %9, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %18 = getelementptr inbounds i8, i8* %2, i64 7
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i16
  %21 = insertelement <8 x i16> undef, i16 %20, i32 0
  %22 = shufflevector <8 x i16> %21, <8 x i16> undef, <8 x i32> zeroinitializer
  %23 = bitcast i8* %3 to <16 x i8>*
  %24 = load <16 x i8>, <16 x i8>* %23, align 16
  %25 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 255, i16 1, i16 255, i16 1, i16 255, i16 1, i16 255, i16 1>) #3
  %26 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 255, i16 1, i16 255, i16 1, i16 255, i16 1, i16 255, i16 1>) #3
  %27 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %28 = bitcast <16 x i8> %27 to <8 x i16>
  %29 = shufflevector <8 x i16> %28, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %30 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %29, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %31 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %29, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %32 = add <4 x i32> %25, <i32 256, i32 256, i32 256, i32 256>
  %33 = add <4 x i32> %32, %30
  %34 = ashr <4 x i32> %33, <i32 9, i32 9, i32 9, i32 9>
  %35 = add <4 x i32> %26, <i32 256, i32 256, i32 256, i32 256>
  %36 = add <4 x i32> %35, %31
  %37 = ashr <4 x i32> %36, <i32 9, i32 9, i32 9, i32 9>
  %38 = bitcast <4 x i32> %34 to <8 x i16>
  %39 = bitcast <4 x i32> %37 to <8 x i16>
  %40 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %38, <8 x i16> %39) #3
  %41 = shufflevector <16 x i8> %40, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %42 = bitcast <16 x i8> %41 to <2 x i64>
  %43 = extractelement <2 x i64> %42, i32 0
  %44 = bitcast i8* %0 to i64*
  store i64 %43, i64* %44, align 1
  %45 = getelementptr inbounds i8, i8* %0, i64 %1
  %46 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 225, i16 31, i16 225, i16 31, i16 225, i16 31, i16 225, i16 31>) #3
  %47 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 225, i16 31, i16 225, i16 31, i16 225, i16 31, i16 225, i16 31>) #3
  %48 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %49 = bitcast <16 x i8> %48 to <8 x i16>
  %50 = shufflevector <8 x i16> %49, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %51 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %50, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %52 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %50, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %53 = add <4 x i32> %46, <i32 256, i32 256, i32 256, i32 256>
  %54 = add <4 x i32> %53, %51
  %55 = ashr <4 x i32> %54, <i32 9, i32 9, i32 9, i32 9>
  %56 = add <4 x i32> %47, <i32 256, i32 256, i32 256, i32 256>
  %57 = add <4 x i32> %56, %52
  %58 = ashr <4 x i32> %57, <i32 9, i32 9, i32 9, i32 9>
  %59 = bitcast <4 x i32> %55 to <8 x i16>
  %60 = bitcast <4 x i32> %58 to <8 x i16>
  %61 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %59, <8 x i16> %60) #3
  %62 = shufflevector <16 x i8> %61, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %63 = bitcast <16 x i8> %62 to <2 x i64>
  %64 = extractelement <2 x i64> %63, i32 0
  %65 = bitcast i8* %45 to i64*
  store i64 %64, i64* %65, align 1
  %66 = getelementptr inbounds i8, i8* %45, i64 %1
  %67 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 196, i16 60, i16 196, i16 60, i16 196, i16 60, i16 196, i16 60>) #3
  %68 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 196, i16 60, i16 196, i16 60, i16 196, i16 60, i16 196, i16 60>) #3
  %69 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %70 = bitcast <16 x i8> %69 to <8 x i16>
  %71 = shufflevector <8 x i16> %70, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %72 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %71, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %73 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %71, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %74 = add <4 x i32> %67, <i32 256, i32 256, i32 256, i32 256>
  %75 = add <4 x i32> %74, %72
  %76 = ashr <4 x i32> %75, <i32 9, i32 9, i32 9, i32 9>
  %77 = add <4 x i32> %68, <i32 256, i32 256, i32 256, i32 256>
  %78 = add <4 x i32> %77, %73
  %79 = ashr <4 x i32> %78, <i32 9, i32 9, i32 9, i32 9>
  %80 = bitcast <4 x i32> %76 to <8 x i16>
  %81 = bitcast <4 x i32> %79 to <8 x i16>
  %82 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %80, <8 x i16> %81) #3
  %83 = shufflevector <16 x i8> %82, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %84 = bitcast <16 x i8> %83 to <2 x i64>
  %85 = extractelement <2 x i64> %84, i32 0
  %86 = bitcast i8* %66 to i64*
  store i64 %85, i64* %86, align 1
  %87 = getelementptr inbounds i8, i8* %66, i64 %1
  %88 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 170, i16 86, i16 170, i16 86, i16 170, i16 86, i16 170, i16 86>) #3
  %89 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 170, i16 86, i16 170, i16 86, i16 170, i16 86, i16 170, i16 86>) #3
  %90 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %91 = bitcast <16 x i8> %90 to <8 x i16>
  %92 = shufflevector <8 x i16> %91, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %93 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %92, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %94 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %92, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %95 = add <4 x i32> %88, <i32 256, i32 256, i32 256, i32 256>
  %96 = add <4 x i32> %95, %93
  %97 = ashr <4 x i32> %96, <i32 9, i32 9, i32 9, i32 9>
  %98 = add <4 x i32> %89, <i32 256, i32 256, i32 256, i32 256>
  %99 = add <4 x i32> %98, %94
  %100 = ashr <4 x i32> %99, <i32 9, i32 9, i32 9, i32 9>
  %101 = bitcast <4 x i32> %97 to <8 x i16>
  %102 = bitcast <4 x i32> %100 to <8 x i16>
  %103 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %101, <8 x i16> %102) #3
  %104 = shufflevector <16 x i8> %103, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %105 = bitcast <16 x i8> %104 to <2 x i64>
  %106 = extractelement <2 x i64> %105, i32 0
  %107 = bitcast i8* %87 to i64*
  store i64 %106, i64* %107, align 1
  %108 = getelementptr inbounds i8, i8* %87, i64 %1
  %109 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 145, i16 111, i16 145, i16 111, i16 145, i16 111, i16 145, i16 111>) #3
  %110 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 145, i16 111, i16 145, i16 111, i16 145, i16 111, i16 145, i16 111>) #3
  %111 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 16, i32 4, i32 16, i32 4, i32 16, i32 4, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %112 = bitcast <16 x i8> %111 to <8 x i16>
  %113 = shufflevector <8 x i16> %112, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %114 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %113, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %115 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %113, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %116 = add <4 x i32> %109, <i32 256, i32 256, i32 256, i32 256>
  %117 = add <4 x i32> %116, %114
  %118 = ashr <4 x i32> %117, <i32 9, i32 9, i32 9, i32 9>
  %119 = add <4 x i32> %110, <i32 256, i32 256, i32 256, i32 256>
  %120 = add <4 x i32> %119, %115
  %121 = ashr <4 x i32> %120, <i32 9, i32 9, i32 9, i32 9>
  %122 = bitcast <4 x i32> %118 to <8 x i16>
  %123 = bitcast <4 x i32> %121 to <8 x i16>
  %124 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %122, <8 x i16> %123) #3
  %125 = shufflevector <16 x i8> %124, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %126 = bitcast <16 x i8> %125 to <2 x i64>
  %127 = extractelement <2 x i64> %126, i32 0
  %128 = bitcast i8* %108 to i64*
  store i64 %127, i64* %128, align 1
  %129 = getelementptr inbounds i8, i8* %108, i64 %1
  %130 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 123, i16 133, i16 123, i16 133, i16 123, i16 133, i16 123, i16 133>) #3
  %131 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 123, i16 133, i16 123, i16 133, i16 123, i16 133, i16 123, i16 133>) #3
  %132 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 5, i32 16, i32 5, i32 16, i32 5, i32 16, i32 5, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %133 = bitcast <16 x i8> %132 to <8 x i16>
  %134 = shufflevector <8 x i16> %133, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %135 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %134, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %136 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %134, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %137 = add <4 x i32> %130, <i32 256, i32 256, i32 256, i32 256>
  %138 = add <4 x i32> %137, %135
  %139 = ashr <4 x i32> %138, <i32 9, i32 9, i32 9, i32 9>
  %140 = add <4 x i32> %131, <i32 256, i32 256, i32 256, i32 256>
  %141 = add <4 x i32> %140, %136
  %142 = ashr <4 x i32> %141, <i32 9, i32 9, i32 9, i32 9>
  %143 = bitcast <4 x i32> %139 to <8 x i16>
  %144 = bitcast <4 x i32> %142 to <8 x i16>
  %145 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %143, <8 x i16> %144) #3
  %146 = shufflevector <16 x i8> %145, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %147 = bitcast <16 x i8> %146 to <2 x i64>
  %148 = extractelement <2 x i64> %147, i32 0
  %149 = bitcast i8* %129 to i64*
  store i64 %148, i64* %149, align 1
  %150 = getelementptr inbounds i8, i8* %129, i64 %1
  %151 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 102, i16 154, i16 102, i16 154, i16 102, i16 154, i16 102, i16 154>) #3
  %152 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 102, i16 154, i16 102, i16 154, i16 102, i16 154, i16 102, i16 154>) #3
  %153 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 6, i32 16, i32 6, i32 16, i32 6, i32 16, i32 6, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %154 = bitcast <16 x i8> %153 to <8 x i16>
  %155 = shufflevector <8 x i16> %154, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %156 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %155, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %157 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %155, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %158 = add <4 x i32> %151, <i32 256, i32 256, i32 256, i32 256>
  %159 = add <4 x i32> %158, %156
  %160 = ashr <4 x i32> %159, <i32 9, i32 9, i32 9, i32 9>
  %161 = add <4 x i32> %152, <i32 256, i32 256, i32 256, i32 256>
  %162 = add <4 x i32> %161, %157
  %163 = ashr <4 x i32> %162, <i32 9, i32 9, i32 9, i32 9>
  %164 = bitcast <4 x i32> %160 to <8 x i16>
  %165 = bitcast <4 x i32> %163 to <8 x i16>
  %166 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %164, <8 x i16> %165) #3
  %167 = shufflevector <16 x i8> %166, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %168 = bitcast <16 x i8> %167 to <2 x i64>
  %169 = extractelement <2 x i64> %168, i32 0
  %170 = bitcast i8* %150 to i64*
  store i64 %169, i64* %170, align 1
  %171 = getelementptr inbounds i8, i8* %150, i64 %1
  %172 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 84, i16 172, i16 84, i16 172, i16 84, i16 172, i16 84, i16 172>) #3
  %173 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 84, i16 172, i16 84, i16 172, i16 84, i16 172, i16 84, i16 172>) #3
  %174 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 7, i32 16, i32 7, i32 16, i32 7, i32 16, i32 7, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %175 = bitcast <16 x i8> %174 to <8 x i16>
  %176 = shufflevector <8 x i16> %175, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %177 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %176, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %178 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %176, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %179 = add <4 x i32> %172, <i32 256, i32 256, i32 256, i32 256>
  %180 = add <4 x i32> %179, %177
  %181 = ashr <4 x i32> %180, <i32 9, i32 9, i32 9, i32 9>
  %182 = add <4 x i32> %173, <i32 256, i32 256, i32 256, i32 256>
  %183 = add <4 x i32> %182, %178
  %184 = ashr <4 x i32> %183, <i32 9, i32 9, i32 9, i32 9>
  %185 = bitcast <4 x i32> %181 to <8 x i16>
  %186 = bitcast <4 x i32> %184 to <8 x i16>
  %187 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %185, <8 x i16> %186) #3
  %188 = shufflevector <16 x i8> %187, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %189 = bitcast <16 x i8> %188 to <2 x i64>
  %190 = extractelement <2 x i64> %189, i32 0
  %191 = bitcast i8* %171 to i64*
  store i64 %190, i64* %191, align 1
  %192 = shl i64 %1, 3
  %193 = getelementptr inbounds i8, i8* %0, i64 %192
  %194 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 68, i16 188, i16 68, i16 188, i16 68, i16 188, i16 68, i16 188>) #3
  %195 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 68, i16 188, i16 68, i16 188, i16 68, i16 188, i16 68, i16 188>) #3
  %196 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 16, i32 8, i32 16, i32 8, i32 16, i32 8, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %197 = bitcast <16 x i8> %196 to <8 x i16>
  %198 = shufflevector <8 x i16> %197, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %199 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %198, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %200 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %198, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %201 = add <4 x i32> %194, <i32 256, i32 256, i32 256, i32 256>
  %202 = add <4 x i32> %201, %199
  %203 = ashr <4 x i32> %202, <i32 9, i32 9, i32 9, i32 9>
  %204 = add <4 x i32> %195, <i32 256, i32 256, i32 256, i32 256>
  %205 = add <4 x i32> %204, %200
  %206 = ashr <4 x i32> %205, <i32 9, i32 9, i32 9, i32 9>
  %207 = bitcast <4 x i32> %203 to <8 x i16>
  %208 = bitcast <4 x i32> %206 to <8 x i16>
  %209 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %207, <8 x i16> %208) #3
  %210 = shufflevector <16 x i8> %209, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %211 = bitcast <16 x i8> %210 to <2 x i64>
  %212 = extractelement <2 x i64> %211, i32 0
  %213 = bitcast i8* %193 to i64*
  store i64 %212, i64* %213, align 1
  %214 = getelementptr inbounds i8, i8* %193, i64 %1
  %215 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 54, i16 202, i16 54, i16 202, i16 54, i16 202, i16 54, i16 202>) #3
  %216 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 54, i16 202, i16 54, i16 202, i16 54, i16 202, i16 54, i16 202>) #3
  %217 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 9, i32 16, i32 9, i32 16, i32 9, i32 16, i32 9, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %218 = bitcast <16 x i8> %217 to <8 x i16>
  %219 = shufflevector <8 x i16> %218, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %220 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %219, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %221 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %219, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %222 = add <4 x i32> %215, <i32 256, i32 256, i32 256, i32 256>
  %223 = add <4 x i32> %222, %220
  %224 = ashr <4 x i32> %223, <i32 9, i32 9, i32 9, i32 9>
  %225 = add <4 x i32> %216, <i32 256, i32 256, i32 256, i32 256>
  %226 = add <4 x i32> %225, %221
  %227 = ashr <4 x i32> %226, <i32 9, i32 9, i32 9, i32 9>
  %228 = bitcast <4 x i32> %224 to <8 x i16>
  %229 = bitcast <4 x i32> %227 to <8 x i16>
  %230 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %228, <8 x i16> %229) #3
  %231 = shufflevector <16 x i8> %230, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %232 = bitcast <16 x i8> %231 to <2 x i64>
  %233 = extractelement <2 x i64> %232, i32 0
  %234 = bitcast i8* %214 to i64*
  store i64 %233, i64* %234, align 1
  %235 = getelementptr inbounds i8, i8* %214, i64 %1
  %236 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 43, i16 213, i16 43, i16 213, i16 43, i16 213, i16 43, i16 213>) #3
  %237 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 43, i16 213, i16 43, i16 213, i16 43, i16 213, i16 43, i16 213>) #3
  %238 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 10, i32 16, i32 10, i32 16, i32 10, i32 16, i32 10, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %239 = bitcast <16 x i8> %238 to <8 x i16>
  %240 = shufflevector <8 x i16> %239, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %241 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %240, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %242 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %240, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %243 = add <4 x i32> %236, <i32 256, i32 256, i32 256, i32 256>
  %244 = add <4 x i32> %243, %241
  %245 = ashr <4 x i32> %244, <i32 9, i32 9, i32 9, i32 9>
  %246 = add <4 x i32> %237, <i32 256, i32 256, i32 256, i32 256>
  %247 = add <4 x i32> %246, %242
  %248 = ashr <4 x i32> %247, <i32 9, i32 9, i32 9, i32 9>
  %249 = bitcast <4 x i32> %245 to <8 x i16>
  %250 = bitcast <4 x i32> %248 to <8 x i16>
  %251 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %249, <8 x i16> %250) #3
  %252 = shufflevector <16 x i8> %251, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %253 = bitcast <16 x i8> %252 to <2 x i64>
  %254 = extractelement <2 x i64> %253, i32 0
  %255 = bitcast i8* %235 to i64*
  store i64 %254, i64* %255, align 1
  %256 = getelementptr inbounds i8, i8* %235, i64 %1
  %257 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 33, i16 223, i16 33, i16 223, i16 33, i16 223, i16 33, i16 223>) #3
  %258 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 33, i16 223, i16 33, i16 223, i16 33, i16 223, i16 33, i16 223>) #3
  %259 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 11, i32 16, i32 11, i32 16, i32 11, i32 16, i32 11, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %260 = bitcast <16 x i8> %259 to <8 x i16>
  %261 = shufflevector <8 x i16> %260, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %262 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %261, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %263 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %261, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %264 = add <4 x i32> %257, <i32 256, i32 256, i32 256, i32 256>
  %265 = add <4 x i32> %264, %262
  %266 = ashr <4 x i32> %265, <i32 9, i32 9, i32 9, i32 9>
  %267 = add <4 x i32> %258, <i32 256, i32 256, i32 256, i32 256>
  %268 = add <4 x i32> %267, %263
  %269 = ashr <4 x i32> %268, <i32 9, i32 9, i32 9, i32 9>
  %270 = bitcast <4 x i32> %266 to <8 x i16>
  %271 = bitcast <4 x i32> %269 to <8 x i16>
  %272 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %270, <8 x i16> %271) #3
  %273 = shufflevector <16 x i8> %272, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %274 = bitcast <16 x i8> %273 to <2 x i64>
  %275 = extractelement <2 x i64> %274, i32 0
  %276 = bitcast i8* %256 to i64*
  store i64 %275, i64* %276, align 1
  %277 = getelementptr inbounds i8, i8* %256, i64 %1
  %278 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 26, i16 230, i16 26, i16 230, i16 26, i16 230, i16 26, i16 230>) #3
  %279 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 26, i16 230, i16 26, i16 230, i16 26, i16 230, i16 26, i16 230>) #3
  %280 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 12, i32 16, i32 12, i32 16, i32 12, i32 16, i32 12, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %281 = bitcast <16 x i8> %280 to <8 x i16>
  %282 = shufflevector <8 x i16> %281, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %283 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %282, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %284 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %282, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %285 = add <4 x i32> %278, <i32 256, i32 256, i32 256, i32 256>
  %286 = add <4 x i32> %285, %283
  %287 = ashr <4 x i32> %286, <i32 9, i32 9, i32 9, i32 9>
  %288 = add <4 x i32> %279, <i32 256, i32 256, i32 256, i32 256>
  %289 = add <4 x i32> %288, %284
  %290 = ashr <4 x i32> %289, <i32 9, i32 9, i32 9, i32 9>
  %291 = bitcast <4 x i32> %287 to <8 x i16>
  %292 = bitcast <4 x i32> %290 to <8 x i16>
  %293 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %291, <8 x i16> %292) #3
  %294 = shufflevector <16 x i8> %293, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %295 = bitcast <16 x i8> %294 to <2 x i64>
  %296 = extractelement <2 x i64> %295, i32 0
  %297 = bitcast i8* %277 to i64*
  store i64 %296, i64* %297, align 1
  %298 = getelementptr inbounds i8, i8* %277, i64 %1
  %299 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 20, i16 236, i16 20, i16 236, i16 20, i16 236, i16 20, i16 236>) #3
  %300 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 20, i16 236, i16 20, i16 236, i16 20, i16 236, i16 20, i16 236>) #3
  %301 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 13, i32 16, i32 13, i32 16, i32 13, i32 16, i32 13, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %302 = bitcast <16 x i8> %301 to <8 x i16>
  %303 = shufflevector <8 x i16> %302, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %304 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %303, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %305 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %303, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %306 = add <4 x i32> %299, <i32 256, i32 256, i32 256, i32 256>
  %307 = add <4 x i32> %306, %304
  %308 = ashr <4 x i32> %307, <i32 9, i32 9, i32 9, i32 9>
  %309 = add <4 x i32> %300, <i32 256, i32 256, i32 256, i32 256>
  %310 = add <4 x i32> %309, %305
  %311 = ashr <4 x i32> %310, <i32 9, i32 9, i32 9, i32 9>
  %312 = bitcast <4 x i32> %308 to <8 x i16>
  %313 = bitcast <4 x i32> %311 to <8 x i16>
  %314 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %312, <8 x i16> %313) #3
  %315 = shufflevector <16 x i8> %314, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %316 = bitcast <16 x i8> %315 to <2 x i64>
  %317 = extractelement <2 x i64> %316, i32 0
  %318 = bitcast i8* %298 to i64*
  store i64 %317, i64* %318, align 1
  %319 = getelementptr inbounds i8, i8* %298, i64 %1
  %320 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 17, i16 239, i16 17, i16 239, i16 17, i16 239, i16 17, i16 239>) #3
  %321 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 17, i16 239, i16 17, i16 239, i16 17, i16 239, i16 17, i16 239>) #3
  %322 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 14, i32 16, i32 14, i32 16, i32 14, i32 16, i32 14, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %323 = bitcast <16 x i8> %322 to <8 x i16>
  %324 = shufflevector <8 x i16> %323, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %325 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %324, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %326 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %324, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %327 = add <4 x i32> %320, <i32 256, i32 256, i32 256, i32 256>
  %328 = add <4 x i32> %327, %325
  %329 = ashr <4 x i32> %328, <i32 9, i32 9, i32 9, i32 9>
  %330 = add <4 x i32> %321, <i32 256, i32 256, i32 256, i32 256>
  %331 = add <4 x i32> %330, %326
  %332 = ashr <4 x i32> %331, <i32 9, i32 9, i32 9, i32 9>
  %333 = bitcast <4 x i32> %329 to <8 x i16>
  %334 = bitcast <4 x i32> %332 to <8 x i16>
  %335 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %333, <8 x i16> %334) #3
  %336 = shufflevector <16 x i8> %335, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %337 = bitcast <16 x i8> %336 to <2 x i64>
  %338 = extractelement <2 x i64> %337, i32 0
  %339 = bitcast i8* %319 to i64*
  store i64 %338, i64* %339, align 1
  %340 = getelementptr inbounds i8, i8* %319, i64 %1
  %341 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 16, i16 240, i16 16, i16 240, i16 16, i16 240, i16 16, i16 240>) #3
  %342 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 16, i16 240, i16 16, i16 240, i16 16, i16 240, i16 16, i16 240>) #3
  %343 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 15, i32 16, i32 15, i32 16, i32 15, i32 16, i32 15, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %344 = bitcast <16 x i8> %343 to <8 x i16>
  %345 = shufflevector <8 x i16> %344, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %346 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %345, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %347 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %345, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %348 = add <4 x i32> %341, <i32 256, i32 256, i32 256, i32 256>
  %349 = add <4 x i32> %348, %346
  %350 = ashr <4 x i32> %349, <i32 9, i32 9, i32 9, i32 9>
  %351 = add <4 x i32> %342, <i32 256, i32 256, i32 256, i32 256>
  %352 = add <4 x i32> %351, %347
  %353 = ashr <4 x i32> %352, <i32 9, i32 9, i32 9, i32 9>
  %354 = bitcast <4 x i32> %350 to <8 x i16>
  %355 = bitcast <4 x i32> %353 to <8 x i16>
  %356 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %354, <8 x i16> %355) #3
  %357 = shufflevector <16 x i8> %356, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %358 = bitcast <16 x i8> %357 to <2 x i64>
  %359 = extractelement <2 x i64> %358, i32 0
  %360 = bitcast i8* %340 to i64*
  store i64 %359, i64* %360, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_smooth_predictor_8x32_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = getelementptr inbounds i8, i8* %3, i64 31
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i16
  %8 = insertelement <8 x i16> undef, i16 %7, i32 0
  %9 = shufflevector <8 x i16> %8, <8 x i16> undef, <8 x i32> zeroinitializer
  %10 = bitcast i8* %2 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = insertelement <2 x i64> undef, i64 %11, i32 0
  %13 = bitcast <2 x i64> %12 to <16 x i8>
  %14 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %15 = bitcast <16 x i8> %14 to <8 x i16>
  %16 = shufflevector <8 x i16> %15, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %17 = shufflevector <8 x i16> %15, <8 x i16> %9, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %18 = getelementptr inbounds i8, i8* %2, i64 7
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i16
  %21 = insertelement <8 x i16> undef, i16 %20, i32 0
  %22 = shufflevector <8 x i16> %21, <8 x i16> undef, <8 x i32> zeroinitializer
  %23 = bitcast i8* %3 to <16 x i8>*
  %24 = load <16 x i8>, <16 x i8>* %23, align 16
  %25 = getelementptr inbounds i8, i8* %3, i64 16
  %26 = bitcast i8* %25 to <16 x i8>*
  %27 = load <16 x i8>, <16 x i8>* %26, align 16
  %28 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 255, i16 1, i16 255, i16 1, i16 255, i16 1, i16 255, i16 1>) #3
  %29 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 255, i16 1, i16 255, i16 1, i16 255, i16 1, i16 255, i16 1>) #3
  %30 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %31 = bitcast <16 x i8> %30 to <8 x i16>
  %32 = shufflevector <8 x i16> %31, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %33 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %32, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %34 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %32, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %35 = add <4 x i32> %28, <i32 256, i32 256, i32 256, i32 256>
  %36 = add <4 x i32> %35, %33
  %37 = ashr <4 x i32> %36, <i32 9, i32 9, i32 9, i32 9>
  %38 = add <4 x i32> %29, <i32 256, i32 256, i32 256, i32 256>
  %39 = add <4 x i32> %38, %34
  %40 = ashr <4 x i32> %39, <i32 9, i32 9, i32 9, i32 9>
  %41 = bitcast <4 x i32> %37 to <8 x i16>
  %42 = bitcast <4 x i32> %40 to <8 x i16>
  %43 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %41, <8 x i16> %42) #3
  %44 = shufflevector <16 x i8> %43, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = bitcast <16 x i8> %44 to <2 x i64>
  %46 = extractelement <2 x i64> %45, i32 0
  %47 = bitcast i8* %0 to i64*
  store i64 %46, i64* %47, align 1
  %48 = getelementptr inbounds i8, i8* %0, i64 %1
  %49 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 240, i16 16, i16 240, i16 16, i16 240, i16 16, i16 240, i16 16>) #3
  %50 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 240, i16 16, i16 240, i16 16, i16 240, i16 16, i16 240, i16 16>) #3
  %51 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %52 = bitcast <16 x i8> %51 to <8 x i16>
  %53 = shufflevector <8 x i16> %52, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %54 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %53, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %55 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %53, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %56 = add <4 x i32> %49, <i32 256, i32 256, i32 256, i32 256>
  %57 = add <4 x i32> %56, %54
  %58 = ashr <4 x i32> %57, <i32 9, i32 9, i32 9, i32 9>
  %59 = add <4 x i32> %50, <i32 256, i32 256, i32 256, i32 256>
  %60 = add <4 x i32> %59, %55
  %61 = ashr <4 x i32> %60, <i32 9, i32 9, i32 9, i32 9>
  %62 = bitcast <4 x i32> %58 to <8 x i16>
  %63 = bitcast <4 x i32> %61 to <8 x i16>
  %64 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %62, <8 x i16> %63) #3
  %65 = shufflevector <16 x i8> %64, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %66 = bitcast <16 x i8> %65 to <2 x i64>
  %67 = extractelement <2 x i64> %66, i32 0
  %68 = bitcast i8* %48 to i64*
  store i64 %67, i64* %68, align 1
  %69 = getelementptr inbounds i8, i8* %48, i64 %1
  %70 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 225, i16 31, i16 225, i16 31, i16 225, i16 31, i16 225, i16 31>) #3
  %71 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 225, i16 31, i16 225, i16 31, i16 225, i16 31, i16 225, i16 31>) #3
  %72 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %73 = bitcast <16 x i8> %72 to <8 x i16>
  %74 = shufflevector <8 x i16> %73, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %75 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %74, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %76 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %74, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %77 = add <4 x i32> %70, <i32 256, i32 256, i32 256, i32 256>
  %78 = add <4 x i32> %77, %75
  %79 = ashr <4 x i32> %78, <i32 9, i32 9, i32 9, i32 9>
  %80 = add <4 x i32> %71, <i32 256, i32 256, i32 256, i32 256>
  %81 = add <4 x i32> %80, %76
  %82 = ashr <4 x i32> %81, <i32 9, i32 9, i32 9, i32 9>
  %83 = bitcast <4 x i32> %79 to <8 x i16>
  %84 = bitcast <4 x i32> %82 to <8 x i16>
  %85 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %83, <8 x i16> %84) #3
  %86 = shufflevector <16 x i8> %85, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %87 = bitcast <16 x i8> %86 to <2 x i64>
  %88 = extractelement <2 x i64> %87, i32 0
  %89 = bitcast i8* %69 to i64*
  store i64 %88, i64* %89, align 1
  %90 = getelementptr inbounds i8, i8* %69, i64 %1
  %91 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 210, i16 46, i16 210, i16 46, i16 210, i16 46, i16 210, i16 46>) #3
  %92 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 210, i16 46, i16 210, i16 46, i16 210, i16 46, i16 210, i16 46>) #3
  %93 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %94 = bitcast <16 x i8> %93 to <8 x i16>
  %95 = shufflevector <8 x i16> %94, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %96 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %95, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %97 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %95, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %98 = add <4 x i32> %91, <i32 256, i32 256, i32 256, i32 256>
  %99 = add <4 x i32> %98, %96
  %100 = ashr <4 x i32> %99, <i32 9, i32 9, i32 9, i32 9>
  %101 = add <4 x i32> %92, <i32 256, i32 256, i32 256, i32 256>
  %102 = add <4 x i32> %101, %97
  %103 = ashr <4 x i32> %102, <i32 9, i32 9, i32 9, i32 9>
  %104 = bitcast <4 x i32> %100 to <8 x i16>
  %105 = bitcast <4 x i32> %103 to <8 x i16>
  %106 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %104, <8 x i16> %105) #3
  %107 = shufflevector <16 x i8> %106, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %108 = bitcast <16 x i8> %107 to <2 x i64>
  %109 = extractelement <2 x i64> %108, i32 0
  %110 = bitcast i8* %90 to i64*
  store i64 %109, i64* %110, align 1
  %111 = getelementptr inbounds i8, i8* %90, i64 %1
  %112 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 196, i16 60, i16 196, i16 60, i16 196, i16 60, i16 196, i16 60>) #3
  %113 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 196, i16 60, i16 196, i16 60, i16 196, i16 60, i16 196, i16 60>) #3
  %114 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 16, i32 4, i32 16, i32 4, i32 16, i32 4, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %115 = bitcast <16 x i8> %114 to <8 x i16>
  %116 = shufflevector <8 x i16> %115, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %117 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %116, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %118 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %116, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %119 = add <4 x i32> %112, <i32 256, i32 256, i32 256, i32 256>
  %120 = add <4 x i32> %119, %117
  %121 = ashr <4 x i32> %120, <i32 9, i32 9, i32 9, i32 9>
  %122 = add <4 x i32> %113, <i32 256, i32 256, i32 256, i32 256>
  %123 = add <4 x i32> %122, %118
  %124 = ashr <4 x i32> %123, <i32 9, i32 9, i32 9, i32 9>
  %125 = bitcast <4 x i32> %121 to <8 x i16>
  %126 = bitcast <4 x i32> %124 to <8 x i16>
  %127 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %125, <8 x i16> %126) #3
  %128 = shufflevector <16 x i8> %127, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %129 = bitcast <16 x i8> %128 to <2 x i64>
  %130 = extractelement <2 x i64> %129, i32 0
  %131 = bitcast i8* %111 to i64*
  store i64 %130, i64* %131, align 1
  %132 = getelementptr inbounds i8, i8* %111, i64 %1
  %133 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 182, i16 74, i16 182, i16 74, i16 182, i16 74, i16 182, i16 74>) #3
  %134 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 182, i16 74, i16 182, i16 74, i16 182, i16 74, i16 182, i16 74>) #3
  %135 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 5, i32 16, i32 5, i32 16, i32 5, i32 16, i32 5, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %136 = bitcast <16 x i8> %135 to <8 x i16>
  %137 = shufflevector <8 x i16> %136, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %138 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %137, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %139 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %137, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %140 = add <4 x i32> %133, <i32 256, i32 256, i32 256, i32 256>
  %141 = add <4 x i32> %140, %138
  %142 = ashr <4 x i32> %141, <i32 9, i32 9, i32 9, i32 9>
  %143 = add <4 x i32> %134, <i32 256, i32 256, i32 256, i32 256>
  %144 = add <4 x i32> %143, %139
  %145 = ashr <4 x i32> %144, <i32 9, i32 9, i32 9, i32 9>
  %146 = bitcast <4 x i32> %142 to <8 x i16>
  %147 = bitcast <4 x i32> %145 to <8 x i16>
  %148 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %146, <8 x i16> %147) #3
  %149 = shufflevector <16 x i8> %148, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %150 = bitcast <16 x i8> %149 to <2 x i64>
  %151 = extractelement <2 x i64> %150, i32 0
  %152 = bitcast i8* %132 to i64*
  store i64 %151, i64* %152, align 1
  %153 = getelementptr inbounds i8, i8* %132, i64 %1
  %154 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 169, i16 87, i16 169, i16 87, i16 169, i16 87, i16 169, i16 87>) #3
  %155 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 169, i16 87, i16 169, i16 87, i16 169, i16 87, i16 169, i16 87>) #3
  %156 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 6, i32 16, i32 6, i32 16, i32 6, i32 16, i32 6, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %157 = bitcast <16 x i8> %156 to <8 x i16>
  %158 = shufflevector <8 x i16> %157, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %159 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %158, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %160 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %158, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %161 = add <4 x i32> %154, <i32 256, i32 256, i32 256, i32 256>
  %162 = add <4 x i32> %161, %159
  %163 = ashr <4 x i32> %162, <i32 9, i32 9, i32 9, i32 9>
  %164 = add <4 x i32> %155, <i32 256, i32 256, i32 256, i32 256>
  %165 = add <4 x i32> %164, %160
  %166 = ashr <4 x i32> %165, <i32 9, i32 9, i32 9, i32 9>
  %167 = bitcast <4 x i32> %163 to <8 x i16>
  %168 = bitcast <4 x i32> %166 to <8 x i16>
  %169 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %167, <8 x i16> %168) #3
  %170 = shufflevector <16 x i8> %169, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %171 = bitcast <16 x i8> %170 to <2 x i64>
  %172 = extractelement <2 x i64> %171, i32 0
  %173 = bitcast i8* %153 to i64*
  store i64 %172, i64* %173, align 1
  %174 = getelementptr inbounds i8, i8* %153, i64 %1
  %175 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 157, i16 99, i16 157, i16 99, i16 157, i16 99, i16 157, i16 99>) #3
  %176 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 157, i16 99, i16 157, i16 99, i16 157, i16 99, i16 157, i16 99>) #3
  %177 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 7, i32 16, i32 7, i32 16, i32 7, i32 16, i32 7, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %178 = bitcast <16 x i8> %177 to <8 x i16>
  %179 = shufflevector <8 x i16> %178, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %180 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %179, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %181 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %179, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %182 = add <4 x i32> %175, <i32 256, i32 256, i32 256, i32 256>
  %183 = add <4 x i32> %182, %180
  %184 = ashr <4 x i32> %183, <i32 9, i32 9, i32 9, i32 9>
  %185 = add <4 x i32> %176, <i32 256, i32 256, i32 256, i32 256>
  %186 = add <4 x i32> %185, %181
  %187 = ashr <4 x i32> %186, <i32 9, i32 9, i32 9, i32 9>
  %188 = bitcast <4 x i32> %184 to <8 x i16>
  %189 = bitcast <4 x i32> %187 to <8 x i16>
  %190 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %188, <8 x i16> %189) #3
  %191 = shufflevector <16 x i8> %190, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %192 = bitcast <16 x i8> %191 to <2 x i64>
  %193 = extractelement <2 x i64> %192, i32 0
  %194 = bitcast i8* %174 to i64*
  store i64 %193, i64* %194, align 1
  %195 = shl i64 %1, 3
  %196 = getelementptr inbounds i8, i8* %0, i64 %195
  %197 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 145, i16 111, i16 145, i16 111, i16 145, i16 111, i16 145, i16 111>) #3
  %198 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 145, i16 111, i16 145, i16 111, i16 145, i16 111, i16 145, i16 111>) #3
  %199 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 16, i32 8, i32 16, i32 8, i32 16, i32 8, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %200 = bitcast <16 x i8> %199 to <8 x i16>
  %201 = shufflevector <8 x i16> %200, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %202 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %201, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %203 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %201, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %204 = add <4 x i32> %197, <i32 256, i32 256, i32 256, i32 256>
  %205 = add <4 x i32> %204, %202
  %206 = ashr <4 x i32> %205, <i32 9, i32 9, i32 9, i32 9>
  %207 = add <4 x i32> %198, <i32 256, i32 256, i32 256, i32 256>
  %208 = add <4 x i32> %207, %203
  %209 = ashr <4 x i32> %208, <i32 9, i32 9, i32 9, i32 9>
  %210 = bitcast <4 x i32> %206 to <8 x i16>
  %211 = bitcast <4 x i32> %209 to <8 x i16>
  %212 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %210, <8 x i16> %211) #3
  %213 = shufflevector <16 x i8> %212, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %214 = bitcast <16 x i8> %213 to <2 x i64>
  %215 = extractelement <2 x i64> %214, i32 0
  %216 = bitcast i8* %196 to i64*
  store i64 %215, i64* %216, align 1
  %217 = getelementptr inbounds i8, i8* %196, i64 %1
  %218 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 133, i16 123, i16 133, i16 123, i16 133, i16 123, i16 133, i16 123>) #3
  %219 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 133, i16 123, i16 133, i16 123, i16 133, i16 123, i16 133, i16 123>) #3
  %220 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 9, i32 16, i32 9, i32 16, i32 9, i32 16, i32 9, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %221 = bitcast <16 x i8> %220 to <8 x i16>
  %222 = shufflevector <8 x i16> %221, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %223 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %222, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %224 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %222, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %225 = add <4 x i32> %218, <i32 256, i32 256, i32 256, i32 256>
  %226 = add <4 x i32> %225, %223
  %227 = ashr <4 x i32> %226, <i32 9, i32 9, i32 9, i32 9>
  %228 = add <4 x i32> %219, <i32 256, i32 256, i32 256, i32 256>
  %229 = add <4 x i32> %228, %224
  %230 = ashr <4 x i32> %229, <i32 9, i32 9, i32 9, i32 9>
  %231 = bitcast <4 x i32> %227 to <8 x i16>
  %232 = bitcast <4 x i32> %230 to <8 x i16>
  %233 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %231, <8 x i16> %232) #3
  %234 = shufflevector <16 x i8> %233, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %235 = bitcast <16 x i8> %234 to <2 x i64>
  %236 = extractelement <2 x i64> %235, i32 0
  %237 = bitcast i8* %217 to i64*
  store i64 %236, i64* %237, align 1
  %238 = getelementptr inbounds i8, i8* %217, i64 %1
  %239 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 122, i16 134, i16 122, i16 134, i16 122, i16 134, i16 122, i16 134>) #3
  %240 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 122, i16 134, i16 122, i16 134, i16 122, i16 134, i16 122, i16 134>) #3
  %241 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 10, i32 16, i32 10, i32 16, i32 10, i32 16, i32 10, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %242 = bitcast <16 x i8> %241 to <8 x i16>
  %243 = shufflevector <8 x i16> %242, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %244 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %243, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %245 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %243, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %246 = add <4 x i32> %239, <i32 256, i32 256, i32 256, i32 256>
  %247 = add <4 x i32> %246, %244
  %248 = ashr <4 x i32> %247, <i32 9, i32 9, i32 9, i32 9>
  %249 = add <4 x i32> %240, <i32 256, i32 256, i32 256, i32 256>
  %250 = add <4 x i32> %249, %245
  %251 = ashr <4 x i32> %250, <i32 9, i32 9, i32 9, i32 9>
  %252 = bitcast <4 x i32> %248 to <8 x i16>
  %253 = bitcast <4 x i32> %251 to <8 x i16>
  %254 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %252, <8 x i16> %253) #3
  %255 = shufflevector <16 x i8> %254, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %256 = bitcast <16 x i8> %255 to <2 x i64>
  %257 = extractelement <2 x i64> %256, i32 0
  %258 = bitcast i8* %238 to i64*
  store i64 %257, i64* %258, align 1
  %259 = getelementptr inbounds i8, i8* %238, i64 %1
  %260 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 111, i16 145, i16 111, i16 145, i16 111, i16 145, i16 111, i16 145>) #3
  %261 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 111, i16 145, i16 111, i16 145, i16 111, i16 145, i16 111, i16 145>) #3
  %262 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 11, i32 16, i32 11, i32 16, i32 11, i32 16, i32 11, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %263 = bitcast <16 x i8> %262 to <8 x i16>
  %264 = shufflevector <8 x i16> %263, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %265 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %264, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %266 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %264, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %267 = add <4 x i32> %260, <i32 256, i32 256, i32 256, i32 256>
  %268 = add <4 x i32> %267, %265
  %269 = ashr <4 x i32> %268, <i32 9, i32 9, i32 9, i32 9>
  %270 = add <4 x i32> %261, <i32 256, i32 256, i32 256, i32 256>
  %271 = add <4 x i32> %270, %266
  %272 = ashr <4 x i32> %271, <i32 9, i32 9, i32 9, i32 9>
  %273 = bitcast <4 x i32> %269 to <8 x i16>
  %274 = bitcast <4 x i32> %272 to <8 x i16>
  %275 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %273, <8 x i16> %274) #3
  %276 = shufflevector <16 x i8> %275, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %277 = bitcast <16 x i8> %276 to <2 x i64>
  %278 = extractelement <2 x i64> %277, i32 0
  %279 = bitcast i8* %259 to i64*
  store i64 %278, i64* %279, align 1
  %280 = getelementptr inbounds i8, i8* %259, i64 %1
  %281 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 101, i16 155, i16 101, i16 155, i16 101, i16 155, i16 101, i16 155>) #3
  %282 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 101, i16 155, i16 101, i16 155, i16 101, i16 155, i16 101, i16 155>) #3
  %283 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 12, i32 16, i32 12, i32 16, i32 12, i32 16, i32 12, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %284 = bitcast <16 x i8> %283 to <8 x i16>
  %285 = shufflevector <8 x i16> %284, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %286 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %285, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %287 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %285, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %288 = add <4 x i32> %281, <i32 256, i32 256, i32 256, i32 256>
  %289 = add <4 x i32> %288, %286
  %290 = ashr <4 x i32> %289, <i32 9, i32 9, i32 9, i32 9>
  %291 = add <4 x i32> %282, <i32 256, i32 256, i32 256, i32 256>
  %292 = add <4 x i32> %291, %287
  %293 = ashr <4 x i32> %292, <i32 9, i32 9, i32 9, i32 9>
  %294 = bitcast <4 x i32> %290 to <8 x i16>
  %295 = bitcast <4 x i32> %293 to <8 x i16>
  %296 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %294, <8 x i16> %295) #3
  %297 = shufflevector <16 x i8> %296, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %298 = bitcast <16 x i8> %297 to <2 x i64>
  %299 = extractelement <2 x i64> %298, i32 0
  %300 = bitcast i8* %280 to i64*
  store i64 %299, i64* %300, align 1
  %301 = getelementptr inbounds i8, i8* %280, i64 %1
  %302 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 92, i16 164, i16 92, i16 164, i16 92, i16 164, i16 92, i16 164>) #3
  %303 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 92, i16 164, i16 92, i16 164, i16 92, i16 164, i16 92, i16 164>) #3
  %304 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 13, i32 16, i32 13, i32 16, i32 13, i32 16, i32 13, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %305 = bitcast <16 x i8> %304 to <8 x i16>
  %306 = shufflevector <8 x i16> %305, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %307 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %306, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %308 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %306, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %309 = add <4 x i32> %302, <i32 256, i32 256, i32 256, i32 256>
  %310 = add <4 x i32> %309, %307
  %311 = ashr <4 x i32> %310, <i32 9, i32 9, i32 9, i32 9>
  %312 = add <4 x i32> %303, <i32 256, i32 256, i32 256, i32 256>
  %313 = add <4 x i32> %312, %308
  %314 = ashr <4 x i32> %313, <i32 9, i32 9, i32 9, i32 9>
  %315 = bitcast <4 x i32> %311 to <8 x i16>
  %316 = bitcast <4 x i32> %314 to <8 x i16>
  %317 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %315, <8 x i16> %316) #3
  %318 = shufflevector <16 x i8> %317, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %319 = bitcast <16 x i8> %318 to <2 x i64>
  %320 = extractelement <2 x i64> %319, i32 0
  %321 = bitcast i8* %301 to i64*
  store i64 %320, i64* %321, align 1
  %322 = getelementptr inbounds i8, i8* %301, i64 %1
  %323 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 83, i16 173, i16 83, i16 173, i16 83, i16 173, i16 83, i16 173>) #3
  %324 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 83, i16 173, i16 83, i16 173, i16 83, i16 173, i16 83, i16 173>) #3
  %325 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 14, i32 16, i32 14, i32 16, i32 14, i32 16, i32 14, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %326 = bitcast <16 x i8> %325 to <8 x i16>
  %327 = shufflevector <8 x i16> %326, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %328 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %327, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %329 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %327, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %330 = add <4 x i32> %323, <i32 256, i32 256, i32 256, i32 256>
  %331 = add <4 x i32> %330, %328
  %332 = ashr <4 x i32> %331, <i32 9, i32 9, i32 9, i32 9>
  %333 = add <4 x i32> %324, <i32 256, i32 256, i32 256, i32 256>
  %334 = add <4 x i32> %333, %329
  %335 = ashr <4 x i32> %334, <i32 9, i32 9, i32 9, i32 9>
  %336 = bitcast <4 x i32> %332 to <8 x i16>
  %337 = bitcast <4 x i32> %335 to <8 x i16>
  %338 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %336, <8 x i16> %337) #3
  %339 = shufflevector <16 x i8> %338, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %340 = bitcast <16 x i8> %339 to <2 x i64>
  %341 = extractelement <2 x i64> %340, i32 0
  %342 = bitcast i8* %322 to i64*
  store i64 %341, i64* %342, align 1
  %343 = getelementptr inbounds i8, i8* %322, i64 %1
  %344 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 74, i16 182, i16 74, i16 182, i16 74, i16 182, i16 74, i16 182>) #3
  %345 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 74, i16 182, i16 74, i16 182, i16 74, i16 182, i16 74, i16 182>) #3
  %346 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 15, i32 16, i32 15, i32 16, i32 15, i32 16, i32 15, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %347 = bitcast <16 x i8> %346 to <8 x i16>
  %348 = shufflevector <8 x i16> %347, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %349 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %348, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %350 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %348, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %351 = add <4 x i32> %344, <i32 256, i32 256, i32 256, i32 256>
  %352 = add <4 x i32> %351, %349
  %353 = ashr <4 x i32> %352, <i32 9, i32 9, i32 9, i32 9>
  %354 = add <4 x i32> %345, <i32 256, i32 256, i32 256, i32 256>
  %355 = add <4 x i32> %354, %350
  %356 = ashr <4 x i32> %355, <i32 9, i32 9, i32 9, i32 9>
  %357 = bitcast <4 x i32> %353 to <8 x i16>
  %358 = bitcast <4 x i32> %356 to <8 x i16>
  %359 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %357, <8 x i16> %358) #3
  %360 = shufflevector <16 x i8> %359, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %361 = bitcast <16 x i8> %360 to <2 x i64>
  %362 = extractelement <2 x i64> %361, i32 0
  %363 = bitcast i8* %343 to i64*
  store i64 %362, i64* %363, align 1
  %364 = getelementptr inbounds i8, i8* %196, i64 %195
  %365 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 66, i16 190, i16 66, i16 190, i16 66, i16 190, i16 66, i16 190>) #3
  %366 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 66, i16 190, i16 66, i16 190, i16 66, i16 190, i16 66, i16 190>) #3
  %367 = shufflevector <16 x i8> %27, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %368 = bitcast <16 x i8> %367 to <8 x i16>
  %369 = shufflevector <8 x i16> %368, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %370 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %369, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %371 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %369, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %372 = add <4 x i32> %365, <i32 256, i32 256, i32 256, i32 256>
  %373 = add <4 x i32> %372, %370
  %374 = ashr <4 x i32> %373, <i32 9, i32 9, i32 9, i32 9>
  %375 = add <4 x i32> %366, <i32 256, i32 256, i32 256, i32 256>
  %376 = add <4 x i32> %375, %371
  %377 = ashr <4 x i32> %376, <i32 9, i32 9, i32 9, i32 9>
  %378 = bitcast <4 x i32> %374 to <8 x i16>
  %379 = bitcast <4 x i32> %377 to <8 x i16>
  %380 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %378, <8 x i16> %379) #3
  %381 = shufflevector <16 x i8> %380, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %382 = bitcast <16 x i8> %381 to <2 x i64>
  %383 = extractelement <2 x i64> %382, i32 0
  %384 = bitcast i8* %364 to i64*
  store i64 %383, i64* %384, align 1
  %385 = getelementptr inbounds i8, i8* %364, i64 %1
  %386 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 59, i16 197, i16 59, i16 197, i16 59, i16 197, i16 59, i16 197>) #3
  %387 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 59, i16 197, i16 59, i16 197, i16 59, i16 197, i16 59, i16 197>) #3
  %388 = shufflevector <16 x i8> %27, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %389 = bitcast <16 x i8> %388 to <8 x i16>
  %390 = shufflevector <8 x i16> %389, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %391 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %390, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %392 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %390, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %393 = add <4 x i32> %386, <i32 256, i32 256, i32 256, i32 256>
  %394 = add <4 x i32> %393, %391
  %395 = ashr <4 x i32> %394, <i32 9, i32 9, i32 9, i32 9>
  %396 = add <4 x i32> %387, <i32 256, i32 256, i32 256, i32 256>
  %397 = add <4 x i32> %396, %392
  %398 = ashr <4 x i32> %397, <i32 9, i32 9, i32 9, i32 9>
  %399 = bitcast <4 x i32> %395 to <8 x i16>
  %400 = bitcast <4 x i32> %398 to <8 x i16>
  %401 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %399, <8 x i16> %400) #3
  %402 = shufflevector <16 x i8> %401, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %403 = bitcast <16 x i8> %402 to <2 x i64>
  %404 = extractelement <2 x i64> %403, i32 0
  %405 = bitcast i8* %385 to i64*
  store i64 %404, i64* %405, align 1
  %406 = getelementptr inbounds i8, i8* %385, i64 %1
  %407 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 52, i16 204, i16 52, i16 204, i16 52, i16 204, i16 52, i16 204>) #3
  %408 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 52, i16 204, i16 52, i16 204, i16 52, i16 204, i16 52, i16 204>) #3
  %409 = shufflevector <16 x i8> %27, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %410 = bitcast <16 x i8> %409 to <8 x i16>
  %411 = shufflevector <8 x i16> %410, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %412 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %411, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %413 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %411, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %414 = add <4 x i32> %407, <i32 256, i32 256, i32 256, i32 256>
  %415 = add <4 x i32> %414, %412
  %416 = ashr <4 x i32> %415, <i32 9, i32 9, i32 9, i32 9>
  %417 = add <4 x i32> %408, <i32 256, i32 256, i32 256, i32 256>
  %418 = add <4 x i32> %417, %413
  %419 = ashr <4 x i32> %418, <i32 9, i32 9, i32 9, i32 9>
  %420 = bitcast <4 x i32> %416 to <8 x i16>
  %421 = bitcast <4 x i32> %419 to <8 x i16>
  %422 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %420, <8 x i16> %421) #3
  %423 = shufflevector <16 x i8> %422, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %424 = bitcast <16 x i8> %423 to <2 x i64>
  %425 = extractelement <2 x i64> %424, i32 0
  %426 = bitcast i8* %406 to i64*
  store i64 %425, i64* %426, align 1
  %427 = getelementptr inbounds i8, i8* %406, i64 %1
  %428 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 45, i16 211, i16 45, i16 211, i16 45, i16 211, i16 45, i16 211>) #3
  %429 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 45, i16 211, i16 45, i16 211, i16 45, i16 211, i16 45, i16 211>) #3
  %430 = shufflevector <16 x i8> %27, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %431 = bitcast <16 x i8> %430 to <8 x i16>
  %432 = shufflevector <8 x i16> %431, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %433 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %432, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %434 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %432, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %435 = add <4 x i32> %428, <i32 256, i32 256, i32 256, i32 256>
  %436 = add <4 x i32> %435, %433
  %437 = ashr <4 x i32> %436, <i32 9, i32 9, i32 9, i32 9>
  %438 = add <4 x i32> %429, <i32 256, i32 256, i32 256, i32 256>
  %439 = add <4 x i32> %438, %434
  %440 = ashr <4 x i32> %439, <i32 9, i32 9, i32 9, i32 9>
  %441 = bitcast <4 x i32> %437 to <8 x i16>
  %442 = bitcast <4 x i32> %440 to <8 x i16>
  %443 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %441, <8 x i16> %442) #3
  %444 = shufflevector <16 x i8> %443, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %445 = bitcast <16 x i8> %444 to <2 x i64>
  %446 = extractelement <2 x i64> %445, i32 0
  %447 = bitcast i8* %427 to i64*
  store i64 %446, i64* %447, align 1
  %448 = getelementptr inbounds i8, i8* %427, i64 %1
  %449 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 39, i16 217, i16 39, i16 217, i16 39, i16 217, i16 39, i16 217>) #3
  %450 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 39, i16 217, i16 39, i16 217, i16 39, i16 217, i16 39, i16 217>) #3
  %451 = shufflevector <16 x i8> %27, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 16, i32 4, i32 16, i32 4, i32 16, i32 4, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %452 = bitcast <16 x i8> %451 to <8 x i16>
  %453 = shufflevector <8 x i16> %452, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %454 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %453, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %455 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %453, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %456 = add <4 x i32> %449, <i32 256, i32 256, i32 256, i32 256>
  %457 = add <4 x i32> %456, %454
  %458 = ashr <4 x i32> %457, <i32 9, i32 9, i32 9, i32 9>
  %459 = add <4 x i32> %450, <i32 256, i32 256, i32 256, i32 256>
  %460 = add <4 x i32> %459, %455
  %461 = ashr <4 x i32> %460, <i32 9, i32 9, i32 9, i32 9>
  %462 = bitcast <4 x i32> %458 to <8 x i16>
  %463 = bitcast <4 x i32> %461 to <8 x i16>
  %464 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %462, <8 x i16> %463) #3
  %465 = shufflevector <16 x i8> %464, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %466 = bitcast <16 x i8> %465 to <2 x i64>
  %467 = extractelement <2 x i64> %466, i32 0
  %468 = bitcast i8* %448 to i64*
  store i64 %467, i64* %468, align 1
  %469 = getelementptr inbounds i8, i8* %448, i64 %1
  %470 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 34, i16 222, i16 34, i16 222, i16 34, i16 222, i16 34, i16 222>) #3
  %471 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 34, i16 222, i16 34, i16 222, i16 34, i16 222, i16 34, i16 222>) #3
  %472 = shufflevector <16 x i8> %27, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 5, i32 16, i32 5, i32 16, i32 5, i32 16, i32 5, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %473 = bitcast <16 x i8> %472 to <8 x i16>
  %474 = shufflevector <8 x i16> %473, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %475 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %474, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %476 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %474, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %477 = add <4 x i32> %470, <i32 256, i32 256, i32 256, i32 256>
  %478 = add <4 x i32> %477, %475
  %479 = ashr <4 x i32> %478, <i32 9, i32 9, i32 9, i32 9>
  %480 = add <4 x i32> %471, <i32 256, i32 256, i32 256, i32 256>
  %481 = add <4 x i32> %480, %476
  %482 = ashr <4 x i32> %481, <i32 9, i32 9, i32 9, i32 9>
  %483 = bitcast <4 x i32> %479 to <8 x i16>
  %484 = bitcast <4 x i32> %482 to <8 x i16>
  %485 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %483, <8 x i16> %484) #3
  %486 = shufflevector <16 x i8> %485, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %487 = bitcast <16 x i8> %486 to <2 x i64>
  %488 = extractelement <2 x i64> %487, i32 0
  %489 = bitcast i8* %469 to i64*
  store i64 %488, i64* %489, align 1
  %490 = getelementptr inbounds i8, i8* %469, i64 %1
  %491 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 29, i16 227, i16 29, i16 227, i16 29, i16 227, i16 29, i16 227>) #3
  %492 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 29, i16 227, i16 29, i16 227, i16 29, i16 227, i16 29, i16 227>) #3
  %493 = shufflevector <16 x i8> %27, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 6, i32 16, i32 6, i32 16, i32 6, i32 16, i32 6, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %494 = bitcast <16 x i8> %493 to <8 x i16>
  %495 = shufflevector <8 x i16> %494, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %496 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %495, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %497 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %495, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %498 = add <4 x i32> %491, <i32 256, i32 256, i32 256, i32 256>
  %499 = add <4 x i32> %498, %496
  %500 = ashr <4 x i32> %499, <i32 9, i32 9, i32 9, i32 9>
  %501 = add <4 x i32> %492, <i32 256, i32 256, i32 256, i32 256>
  %502 = add <4 x i32> %501, %497
  %503 = ashr <4 x i32> %502, <i32 9, i32 9, i32 9, i32 9>
  %504 = bitcast <4 x i32> %500 to <8 x i16>
  %505 = bitcast <4 x i32> %503 to <8 x i16>
  %506 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %504, <8 x i16> %505) #3
  %507 = shufflevector <16 x i8> %506, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %508 = bitcast <16 x i8> %507 to <2 x i64>
  %509 = extractelement <2 x i64> %508, i32 0
  %510 = bitcast i8* %490 to i64*
  store i64 %509, i64* %510, align 1
  %511 = getelementptr inbounds i8, i8* %490, i64 %1
  %512 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 25, i16 231, i16 25, i16 231, i16 25, i16 231, i16 25, i16 231>) #3
  %513 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 25, i16 231, i16 25, i16 231, i16 25, i16 231, i16 25, i16 231>) #3
  %514 = shufflevector <16 x i8> %27, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 7, i32 16, i32 7, i32 16, i32 7, i32 16, i32 7, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %515 = bitcast <16 x i8> %514 to <8 x i16>
  %516 = shufflevector <8 x i16> %515, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %517 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %516, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %518 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %516, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %519 = add <4 x i32> %512, <i32 256, i32 256, i32 256, i32 256>
  %520 = add <4 x i32> %519, %517
  %521 = ashr <4 x i32> %520, <i32 9, i32 9, i32 9, i32 9>
  %522 = add <4 x i32> %513, <i32 256, i32 256, i32 256, i32 256>
  %523 = add <4 x i32> %522, %518
  %524 = ashr <4 x i32> %523, <i32 9, i32 9, i32 9, i32 9>
  %525 = bitcast <4 x i32> %521 to <8 x i16>
  %526 = bitcast <4 x i32> %524 to <8 x i16>
  %527 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %525, <8 x i16> %526) #3
  %528 = shufflevector <16 x i8> %527, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %529 = bitcast <16 x i8> %528 to <2 x i64>
  %530 = extractelement <2 x i64> %529, i32 0
  %531 = bitcast i8* %511 to i64*
  store i64 %530, i64* %531, align 1
  %532 = getelementptr inbounds i8, i8* %364, i64 %195
  %533 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 21, i16 235, i16 21, i16 235, i16 21, i16 235, i16 21, i16 235>) #3
  %534 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 21, i16 235, i16 21, i16 235, i16 21, i16 235, i16 21, i16 235>) #3
  %535 = shufflevector <16 x i8> %27, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 16, i32 8, i32 16, i32 8, i32 16, i32 8, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %536 = bitcast <16 x i8> %535 to <8 x i16>
  %537 = shufflevector <8 x i16> %536, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %538 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %537, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %539 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %537, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %540 = add <4 x i32> %533, <i32 256, i32 256, i32 256, i32 256>
  %541 = add <4 x i32> %540, %538
  %542 = ashr <4 x i32> %541, <i32 9, i32 9, i32 9, i32 9>
  %543 = add <4 x i32> %534, <i32 256, i32 256, i32 256, i32 256>
  %544 = add <4 x i32> %543, %539
  %545 = ashr <4 x i32> %544, <i32 9, i32 9, i32 9, i32 9>
  %546 = bitcast <4 x i32> %542 to <8 x i16>
  %547 = bitcast <4 x i32> %545 to <8 x i16>
  %548 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %546, <8 x i16> %547) #3
  %549 = shufflevector <16 x i8> %548, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %550 = bitcast <16 x i8> %549 to <2 x i64>
  %551 = extractelement <2 x i64> %550, i32 0
  %552 = bitcast i8* %532 to i64*
  store i64 %551, i64* %552, align 1
  %553 = getelementptr inbounds i8, i8* %532, i64 %1
  %554 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 17, i16 239, i16 17, i16 239, i16 17, i16 239, i16 17, i16 239>) #3
  %555 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 17, i16 239, i16 17, i16 239, i16 17, i16 239, i16 17, i16 239>) #3
  %556 = shufflevector <16 x i8> %27, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 9, i32 16, i32 9, i32 16, i32 9, i32 16, i32 9, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %557 = bitcast <16 x i8> %556 to <8 x i16>
  %558 = shufflevector <8 x i16> %557, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %559 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %558, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %560 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %558, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %561 = add <4 x i32> %554, <i32 256, i32 256, i32 256, i32 256>
  %562 = add <4 x i32> %561, %559
  %563 = ashr <4 x i32> %562, <i32 9, i32 9, i32 9, i32 9>
  %564 = add <4 x i32> %555, <i32 256, i32 256, i32 256, i32 256>
  %565 = add <4 x i32> %564, %560
  %566 = ashr <4 x i32> %565, <i32 9, i32 9, i32 9, i32 9>
  %567 = bitcast <4 x i32> %563 to <8 x i16>
  %568 = bitcast <4 x i32> %566 to <8 x i16>
  %569 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %567, <8 x i16> %568) #3
  %570 = shufflevector <16 x i8> %569, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %571 = bitcast <16 x i8> %570 to <2 x i64>
  %572 = extractelement <2 x i64> %571, i32 0
  %573 = bitcast i8* %553 to i64*
  store i64 %572, i64* %573, align 1
  %574 = getelementptr inbounds i8, i8* %553, i64 %1
  %575 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 14, i16 242, i16 14, i16 242, i16 14, i16 242, i16 14, i16 242>) #3
  %576 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 14, i16 242, i16 14, i16 242, i16 14, i16 242, i16 14, i16 242>) #3
  %577 = shufflevector <16 x i8> %27, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 10, i32 16, i32 10, i32 16, i32 10, i32 16, i32 10, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %578 = bitcast <16 x i8> %577 to <8 x i16>
  %579 = shufflevector <8 x i16> %578, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %580 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %579, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %581 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %579, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %582 = add <4 x i32> %575, <i32 256, i32 256, i32 256, i32 256>
  %583 = add <4 x i32> %582, %580
  %584 = ashr <4 x i32> %583, <i32 9, i32 9, i32 9, i32 9>
  %585 = add <4 x i32> %576, <i32 256, i32 256, i32 256, i32 256>
  %586 = add <4 x i32> %585, %581
  %587 = ashr <4 x i32> %586, <i32 9, i32 9, i32 9, i32 9>
  %588 = bitcast <4 x i32> %584 to <8 x i16>
  %589 = bitcast <4 x i32> %587 to <8 x i16>
  %590 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %588, <8 x i16> %589) #3
  %591 = shufflevector <16 x i8> %590, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %592 = bitcast <16 x i8> %591 to <2 x i64>
  %593 = extractelement <2 x i64> %592, i32 0
  %594 = bitcast i8* %574 to i64*
  store i64 %593, i64* %594, align 1
  %595 = getelementptr inbounds i8, i8* %574, i64 %1
  %596 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 12, i16 244, i16 12, i16 244, i16 12, i16 244, i16 12, i16 244>) #3
  %597 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 12, i16 244, i16 12, i16 244, i16 12, i16 244, i16 12, i16 244>) #3
  %598 = shufflevector <16 x i8> %27, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 11, i32 16, i32 11, i32 16, i32 11, i32 16, i32 11, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %599 = bitcast <16 x i8> %598 to <8 x i16>
  %600 = shufflevector <8 x i16> %599, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %601 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %600, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %602 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %600, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %603 = add <4 x i32> %596, <i32 256, i32 256, i32 256, i32 256>
  %604 = add <4 x i32> %603, %601
  %605 = ashr <4 x i32> %604, <i32 9, i32 9, i32 9, i32 9>
  %606 = add <4 x i32> %597, <i32 256, i32 256, i32 256, i32 256>
  %607 = add <4 x i32> %606, %602
  %608 = ashr <4 x i32> %607, <i32 9, i32 9, i32 9, i32 9>
  %609 = bitcast <4 x i32> %605 to <8 x i16>
  %610 = bitcast <4 x i32> %608 to <8 x i16>
  %611 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %609, <8 x i16> %610) #3
  %612 = shufflevector <16 x i8> %611, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %613 = bitcast <16 x i8> %612 to <2 x i64>
  %614 = extractelement <2 x i64> %613, i32 0
  %615 = bitcast i8* %595 to i64*
  store i64 %614, i64* %615, align 1
  %616 = getelementptr inbounds i8, i8* %595, i64 %1
  %617 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 10, i16 246, i16 10, i16 246, i16 10, i16 246, i16 10, i16 246>) #3
  %618 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 10, i16 246, i16 10, i16 246, i16 10, i16 246, i16 10, i16 246>) #3
  %619 = shufflevector <16 x i8> %27, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 12, i32 16, i32 12, i32 16, i32 12, i32 16, i32 12, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %620 = bitcast <16 x i8> %619 to <8 x i16>
  %621 = shufflevector <8 x i16> %620, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %622 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %621, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %623 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %621, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %624 = add <4 x i32> %617, <i32 256, i32 256, i32 256, i32 256>
  %625 = add <4 x i32> %624, %622
  %626 = ashr <4 x i32> %625, <i32 9, i32 9, i32 9, i32 9>
  %627 = add <4 x i32> %618, <i32 256, i32 256, i32 256, i32 256>
  %628 = add <4 x i32> %627, %623
  %629 = ashr <4 x i32> %628, <i32 9, i32 9, i32 9, i32 9>
  %630 = bitcast <4 x i32> %626 to <8 x i16>
  %631 = bitcast <4 x i32> %629 to <8 x i16>
  %632 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %630, <8 x i16> %631) #3
  %633 = shufflevector <16 x i8> %632, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %634 = bitcast <16 x i8> %633 to <2 x i64>
  %635 = extractelement <2 x i64> %634, i32 0
  %636 = bitcast i8* %616 to i64*
  store i64 %635, i64* %636, align 1
  %637 = getelementptr inbounds i8, i8* %616, i64 %1
  %638 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 9, i16 247, i16 9, i16 247, i16 9, i16 247, i16 9, i16 247>) #3
  %639 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 9, i16 247, i16 9, i16 247, i16 9, i16 247, i16 9, i16 247>) #3
  %640 = shufflevector <16 x i8> %27, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 13, i32 16, i32 13, i32 16, i32 13, i32 16, i32 13, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %641 = bitcast <16 x i8> %640 to <8 x i16>
  %642 = shufflevector <8 x i16> %641, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %643 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %642, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %644 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %642, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %645 = add <4 x i32> %638, <i32 256, i32 256, i32 256, i32 256>
  %646 = add <4 x i32> %645, %643
  %647 = ashr <4 x i32> %646, <i32 9, i32 9, i32 9, i32 9>
  %648 = add <4 x i32> %639, <i32 256, i32 256, i32 256, i32 256>
  %649 = add <4 x i32> %648, %644
  %650 = ashr <4 x i32> %649, <i32 9, i32 9, i32 9, i32 9>
  %651 = bitcast <4 x i32> %647 to <8 x i16>
  %652 = bitcast <4 x i32> %650 to <8 x i16>
  %653 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %651, <8 x i16> %652) #3
  %654 = shufflevector <16 x i8> %653, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %655 = bitcast <16 x i8> %654 to <2 x i64>
  %656 = extractelement <2 x i64> %655, i32 0
  %657 = bitcast i8* %637 to i64*
  store i64 %656, i64* %657, align 1
  %658 = getelementptr inbounds i8, i8* %637, i64 %1
  %659 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 8, i16 248, i16 8, i16 248, i16 8, i16 248, i16 8, i16 248>) #3
  %660 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 8, i16 248, i16 8, i16 248, i16 8, i16 248, i16 8, i16 248>) #3
  %661 = shufflevector <16 x i8> %27, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 14, i32 16, i32 14, i32 16, i32 14, i32 16, i32 14, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %662 = bitcast <16 x i8> %661 to <8 x i16>
  %663 = shufflevector <8 x i16> %662, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %664 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %663, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %665 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %663, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %666 = add <4 x i32> %659, <i32 256, i32 256, i32 256, i32 256>
  %667 = add <4 x i32> %666, %664
  %668 = ashr <4 x i32> %667, <i32 9, i32 9, i32 9, i32 9>
  %669 = add <4 x i32> %660, <i32 256, i32 256, i32 256, i32 256>
  %670 = add <4 x i32> %669, %665
  %671 = ashr <4 x i32> %670, <i32 9, i32 9, i32 9, i32 9>
  %672 = bitcast <4 x i32> %668 to <8 x i16>
  %673 = bitcast <4 x i32> %671 to <8 x i16>
  %674 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %672, <8 x i16> %673) #3
  %675 = shufflevector <16 x i8> %674, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %676 = bitcast <16 x i8> %675 to <2 x i64>
  %677 = extractelement <2 x i64> %676, i32 0
  %678 = bitcast i8* %658 to i64*
  store i64 %677, i64* %678, align 1
  %679 = getelementptr inbounds i8, i8* %658, i64 %1
  %680 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 8, i16 248, i16 8, i16 248, i16 8, i16 248, i16 8, i16 248>) #3
  %681 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 8, i16 248, i16 8, i16 248, i16 8, i16 248, i16 8, i16 248>) #3
  %682 = shufflevector <16 x i8> %27, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 15, i32 16, i32 15, i32 16, i32 15, i32 16, i32 15, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %683 = bitcast <16 x i8> %682 to <8 x i16>
  %684 = shufflevector <8 x i16> %683, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %685 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %684, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %686 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %684, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %687 = add <4 x i32> %680, <i32 256, i32 256, i32 256, i32 256>
  %688 = add <4 x i32> %687, %685
  %689 = ashr <4 x i32> %688, <i32 9, i32 9, i32 9, i32 9>
  %690 = add <4 x i32> %681, <i32 256, i32 256, i32 256, i32 256>
  %691 = add <4 x i32> %690, %686
  %692 = ashr <4 x i32> %691, <i32 9, i32 9, i32 9, i32 9>
  %693 = bitcast <4 x i32> %689 to <8 x i16>
  %694 = bitcast <4 x i32> %692 to <8 x i16>
  %695 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %693, <8 x i16> %694) #3
  %696 = shufflevector <16 x i8> %695, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %697 = bitcast <16 x i8> %696 to <2 x i64>
  %698 = extractelement <2 x i64> %697, i32 0
  %699 = bitcast i8* %679 to i64*
  store i64 %698, i64* %699, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_smooth_predictor_16x4_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i8, i8* %2, i64 15
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <4 x i32> undef, i32 %7, i32 0
  %9 = bitcast <4 x i32> %8 to <16 x i8>
  %10 = shufflevector <16 x i8> %9, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %11 = getelementptr inbounds i8, i8* %3, i64 3
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = insertelement <4 x i32> undef, i32 %13, i32 0
  %15 = bitcast <4 x i32> %14 to <8 x i16>
  %16 = bitcast <16 x i8> %10 to <8 x i16>
  %17 = bitcast i8* %2 to i64*
  %18 = mul <8 x i16> %16, <i16 1, i16 31, i16 60, i16 86, i16 111, i16 133, i16 154, i16 172>
  %19 = shufflevector <8 x i16> %18, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %20 = shufflevector <8 x i16> %18, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %21 = bitcast <8 x i16> %19 to <4 x i32>
  %22 = bitcast <8 x i16> %20 to <4 x i32>
  %23 = getelementptr inbounds i8, i8* %2, i64 8
  %24 = bitcast i8* %23 to i64*
  %25 = mul <8 x i16> %16, <i16 188, i16 202, i16 213, i16 223, i16 230, i16 236, i16 239, i16 240>
  %26 = shufflevector <8 x i16> %25, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %27 = shufflevector <8 x i16> %25, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %28 = bitcast <8 x i16> %26 to <4 x i32>
  %29 = bitcast <8 x i16> %27 to <4 x i32>
  br label %30

30:                                               ; preds = %30, %4
  %31 = phi i64 [ 0, %4 ], [ %100, %30 ]
  %32 = phi i8* [ %0, %4 ], [ %99, %30 ]
  %33 = getelementptr inbounds i8, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @sm_weight_arrays, i64 0, i64 4), i64 %31
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %35, i32 0
  %37 = bitcast <4 x i32> %36 to <8 x i16>
  %38 = sub <8 x i16> <i16 256, i16 256, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>, %37
  %39 = mul <8 x i16> %38, %15
  %40 = bitcast <8 x i16> %39 to <4 x i32>
  %41 = add <4 x i32> %40, <i32 256, i32 undef, i32 undef, i32 undef>
  %42 = shufflevector <4 x i32> %41, <4 x i32> undef, <4 x i32> zeroinitializer
  %43 = getelementptr inbounds i8, i8* %3, i64 %31
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = insertelement <4 x i32> undef, i32 %45, i32 0
  %47 = bitcast <4 x i32> %46 to <8 x i16>
  %48 = shufflevector <8 x i16> %37, <8 x i16> %47, <8 x i32> <i32 0, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %49 = bitcast <8 x i16> %48 to <4 x i32>
  %50 = shufflevector <4 x i32> %49, <4 x i32> undef, <4 x i32> zeroinitializer
  %51 = bitcast <4 x i32> %50 to <8 x i16>
  %52 = load i64, i64* %17, align 1
  %53 = insertelement <2 x i64> undef, i64 %52, i32 0
  %54 = bitcast <2 x i64> %53 to <16 x i8>
  %55 = shufflevector <16 x i8> %54, <16 x i8> <i8 -1, i8 -31, i8 -60, i8 -86, i8 -111, i8 123, i8 102, i8 84, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %56 = shufflevector <16 x i8> %55, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %57 = shufflevector <16 x i8> %55, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %58 = bitcast <16 x i8> %56 to <8 x i16>
  %59 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %58, <8 x i16> %51) #3
  %60 = bitcast <16 x i8> %57 to <8 x i16>
  %61 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %60, <8 x i16> %51) #3
  %62 = add <4 x i32> %59, %42
  %63 = add <4 x i32> %61, %42
  %64 = add <4 x i32> %62, %21
  %65 = add <4 x i32> %63, %22
  %66 = ashr <4 x i32> %64, <i32 9, i32 9, i32 9, i32 9>
  %67 = ashr <4 x i32> %65, <i32 9, i32 9, i32 9, i32 9>
  %68 = bitcast <4 x i32> %66 to <8 x i16>
  %69 = bitcast <4 x i32> %67 to <8 x i16>
  %70 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %68, <8 x i16> %69) #3
  %71 = shufflevector <16 x i8> %70, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %72 = bitcast <16 x i8> %71 to <2 x i64>
  %73 = extractelement <2 x i64> %72, i32 0
  %74 = bitcast i8* %32 to i64*
  store i64 %73, i64* %74, align 1
  %75 = load i64, i64* %24, align 1
  %76 = insertelement <2 x i64> undef, i64 %75, i32 0
  %77 = bitcast <2 x i64> %76 to <16 x i8>
  %78 = shufflevector <16 x i8> %77, <16 x i8> <i8 68, i8 54, i8 43, i8 33, i8 26, i8 20, i8 17, i8 16, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %79 = shufflevector <16 x i8> %78, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %80 = shufflevector <16 x i8> %78, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %81 = bitcast <16 x i8> %79 to <8 x i16>
  %82 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %81, <8 x i16> %51) #3
  %83 = bitcast <16 x i8> %80 to <8 x i16>
  %84 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %83, <8 x i16> %51) #3
  %85 = add <4 x i32> %82, %42
  %86 = add <4 x i32> %84, %42
  %87 = add <4 x i32> %85, %28
  %88 = add <4 x i32> %86, %29
  %89 = ashr <4 x i32> %87, <i32 9, i32 9, i32 9, i32 9>
  %90 = ashr <4 x i32> %88, <i32 9, i32 9, i32 9, i32 9>
  %91 = bitcast <4 x i32> %89 to <8 x i16>
  %92 = bitcast <4 x i32> %90 to <8 x i16>
  %93 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %91, <8 x i16> %92) #3
  %94 = shufflevector <16 x i8> %93, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %95 = bitcast <16 x i8> %94 to <2 x i64>
  %96 = getelementptr inbounds i8, i8* %32, i64 8
  %97 = extractelement <2 x i64> %95, i32 0
  %98 = bitcast i8* %96 to i64*
  store i64 %97, i64* %98, align 1
  %99 = getelementptr inbounds i8, i8* %32, i64 %1
  %100 = add nuw nsw i64 %31, 1
  %101 = icmp eq i64 %100, 4
  br i1 %101, label %102, label %30

102:                                              ; preds = %30
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_smooth_predictor_16x8_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i8, i8* %2, i64 15
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <4 x i32> undef, i32 %7, i32 0
  %9 = bitcast <4 x i32> %8 to <16 x i8>
  %10 = shufflevector <16 x i8> %9, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %11 = getelementptr inbounds i8, i8* %3, i64 7
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = insertelement <4 x i32> undef, i32 %13, i32 0
  %15 = bitcast <4 x i32> %14 to <8 x i16>
  %16 = bitcast <16 x i8> %10 to <8 x i16>
  %17 = bitcast i8* %2 to i64*
  %18 = mul <8 x i16> %16, <i16 1, i16 31, i16 60, i16 86, i16 111, i16 133, i16 154, i16 172>
  %19 = shufflevector <8 x i16> %18, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %20 = shufflevector <8 x i16> %18, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %21 = bitcast <8 x i16> %19 to <4 x i32>
  %22 = bitcast <8 x i16> %20 to <4 x i32>
  %23 = getelementptr inbounds i8, i8* %2, i64 8
  %24 = bitcast i8* %23 to i64*
  %25 = mul <8 x i16> %16, <i16 188, i16 202, i16 213, i16 223, i16 230, i16 236, i16 239, i16 240>
  %26 = shufflevector <8 x i16> %25, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %27 = shufflevector <8 x i16> %25, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %28 = bitcast <8 x i16> %26 to <4 x i32>
  %29 = bitcast <8 x i16> %27 to <4 x i32>
  br label %30

30:                                               ; preds = %30, %4
  %31 = phi i64 [ 0, %4 ], [ %100, %30 ]
  %32 = phi i8* [ %0, %4 ], [ %99, %30 ]
  %33 = getelementptr inbounds i8, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @sm_weight_arrays, i64 0, i64 8), i64 %31
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %35, i32 0
  %37 = bitcast <4 x i32> %36 to <8 x i16>
  %38 = sub <8 x i16> <i16 256, i16 256, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>, %37
  %39 = mul <8 x i16> %38, %15
  %40 = bitcast <8 x i16> %39 to <4 x i32>
  %41 = add <4 x i32> %40, <i32 256, i32 undef, i32 undef, i32 undef>
  %42 = shufflevector <4 x i32> %41, <4 x i32> undef, <4 x i32> zeroinitializer
  %43 = getelementptr inbounds i8, i8* %3, i64 %31
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = insertelement <4 x i32> undef, i32 %45, i32 0
  %47 = bitcast <4 x i32> %46 to <8 x i16>
  %48 = shufflevector <8 x i16> %37, <8 x i16> %47, <8 x i32> <i32 0, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %49 = bitcast <8 x i16> %48 to <4 x i32>
  %50 = shufflevector <4 x i32> %49, <4 x i32> undef, <4 x i32> zeroinitializer
  %51 = bitcast <4 x i32> %50 to <8 x i16>
  %52 = load i64, i64* %17, align 1
  %53 = insertelement <2 x i64> undef, i64 %52, i32 0
  %54 = bitcast <2 x i64> %53 to <16 x i8>
  %55 = shufflevector <16 x i8> %54, <16 x i8> <i8 -1, i8 -31, i8 -60, i8 -86, i8 -111, i8 123, i8 102, i8 84, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %56 = shufflevector <16 x i8> %55, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %57 = shufflevector <16 x i8> %55, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %58 = bitcast <16 x i8> %56 to <8 x i16>
  %59 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %58, <8 x i16> %51) #3
  %60 = bitcast <16 x i8> %57 to <8 x i16>
  %61 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %60, <8 x i16> %51) #3
  %62 = add <4 x i32> %59, %42
  %63 = add <4 x i32> %61, %42
  %64 = add <4 x i32> %62, %21
  %65 = add <4 x i32> %63, %22
  %66 = ashr <4 x i32> %64, <i32 9, i32 9, i32 9, i32 9>
  %67 = ashr <4 x i32> %65, <i32 9, i32 9, i32 9, i32 9>
  %68 = bitcast <4 x i32> %66 to <8 x i16>
  %69 = bitcast <4 x i32> %67 to <8 x i16>
  %70 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %68, <8 x i16> %69) #3
  %71 = shufflevector <16 x i8> %70, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %72 = bitcast <16 x i8> %71 to <2 x i64>
  %73 = extractelement <2 x i64> %72, i32 0
  %74 = bitcast i8* %32 to i64*
  store i64 %73, i64* %74, align 1
  %75 = load i64, i64* %24, align 1
  %76 = insertelement <2 x i64> undef, i64 %75, i32 0
  %77 = bitcast <2 x i64> %76 to <16 x i8>
  %78 = shufflevector <16 x i8> %77, <16 x i8> <i8 68, i8 54, i8 43, i8 33, i8 26, i8 20, i8 17, i8 16, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %79 = shufflevector <16 x i8> %78, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %80 = shufflevector <16 x i8> %78, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %81 = bitcast <16 x i8> %79 to <8 x i16>
  %82 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %81, <8 x i16> %51) #3
  %83 = bitcast <16 x i8> %80 to <8 x i16>
  %84 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %83, <8 x i16> %51) #3
  %85 = add <4 x i32> %82, %42
  %86 = add <4 x i32> %84, %42
  %87 = add <4 x i32> %85, %28
  %88 = add <4 x i32> %86, %29
  %89 = ashr <4 x i32> %87, <i32 9, i32 9, i32 9, i32 9>
  %90 = ashr <4 x i32> %88, <i32 9, i32 9, i32 9, i32 9>
  %91 = bitcast <4 x i32> %89 to <8 x i16>
  %92 = bitcast <4 x i32> %90 to <8 x i16>
  %93 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %91, <8 x i16> %92) #3
  %94 = shufflevector <16 x i8> %93, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %95 = bitcast <16 x i8> %94 to <2 x i64>
  %96 = getelementptr inbounds i8, i8* %32, i64 8
  %97 = extractelement <2 x i64> %95, i32 0
  %98 = bitcast i8* %96 to i64*
  store i64 %97, i64* %98, align 1
  %99 = getelementptr inbounds i8, i8* %32, i64 %1
  %100 = add nuw nsw i64 %31, 1
  %101 = icmp eq i64 %100, 8
  br i1 %101, label %102, label %30

102:                                              ; preds = %30
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_smooth_predictor_16x16_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i8, i8* %2, i64 15
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <4 x i32> undef, i32 %7, i32 0
  %9 = bitcast <4 x i32> %8 to <16 x i8>
  %10 = shufflevector <16 x i8> %9, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %11 = getelementptr inbounds i8, i8* %3, i64 15
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = insertelement <4 x i32> undef, i32 %13, i32 0
  %15 = bitcast <4 x i32> %14 to <8 x i16>
  %16 = bitcast <16 x i8> %10 to <8 x i16>
  %17 = bitcast i8* %2 to i64*
  %18 = mul <8 x i16> %16, <i16 1, i16 31, i16 60, i16 86, i16 111, i16 133, i16 154, i16 172>
  %19 = shufflevector <8 x i16> %18, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %20 = shufflevector <8 x i16> %18, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %21 = bitcast <8 x i16> %19 to <4 x i32>
  %22 = bitcast <8 x i16> %20 to <4 x i32>
  %23 = getelementptr inbounds i8, i8* %2, i64 8
  %24 = bitcast i8* %23 to i64*
  %25 = mul <8 x i16> %16, <i16 188, i16 202, i16 213, i16 223, i16 230, i16 236, i16 239, i16 240>
  %26 = shufflevector <8 x i16> %25, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %27 = shufflevector <8 x i16> %25, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %28 = bitcast <8 x i16> %26 to <4 x i32>
  %29 = bitcast <8 x i16> %27 to <4 x i32>
  br label %30

30:                                               ; preds = %30, %4
  %31 = phi i64 [ 0, %4 ], [ %100, %30 ]
  %32 = phi i8* [ %0, %4 ], [ %99, %30 ]
  %33 = getelementptr inbounds i8, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @sm_weight_arrays, i64 0, i64 16), i64 %31
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %35, i32 0
  %37 = bitcast <4 x i32> %36 to <8 x i16>
  %38 = sub <8 x i16> <i16 256, i16 256, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>, %37
  %39 = mul <8 x i16> %38, %15
  %40 = bitcast <8 x i16> %39 to <4 x i32>
  %41 = add <4 x i32> %40, <i32 256, i32 undef, i32 undef, i32 undef>
  %42 = shufflevector <4 x i32> %41, <4 x i32> undef, <4 x i32> zeroinitializer
  %43 = getelementptr inbounds i8, i8* %3, i64 %31
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = insertelement <4 x i32> undef, i32 %45, i32 0
  %47 = bitcast <4 x i32> %46 to <8 x i16>
  %48 = shufflevector <8 x i16> %37, <8 x i16> %47, <8 x i32> <i32 0, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %49 = bitcast <8 x i16> %48 to <4 x i32>
  %50 = shufflevector <4 x i32> %49, <4 x i32> undef, <4 x i32> zeroinitializer
  %51 = bitcast <4 x i32> %50 to <8 x i16>
  %52 = load i64, i64* %17, align 1
  %53 = insertelement <2 x i64> undef, i64 %52, i32 0
  %54 = bitcast <2 x i64> %53 to <16 x i8>
  %55 = shufflevector <16 x i8> %54, <16 x i8> <i8 -1, i8 -31, i8 -60, i8 -86, i8 -111, i8 123, i8 102, i8 84, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %56 = shufflevector <16 x i8> %55, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %57 = shufflevector <16 x i8> %55, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %58 = bitcast <16 x i8> %56 to <8 x i16>
  %59 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %58, <8 x i16> %51) #3
  %60 = bitcast <16 x i8> %57 to <8 x i16>
  %61 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %60, <8 x i16> %51) #3
  %62 = add <4 x i32> %59, %42
  %63 = add <4 x i32> %61, %42
  %64 = add <4 x i32> %62, %21
  %65 = add <4 x i32> %63, %22
  %66 = ashr <4 x i32> %64, <i32 9, i32 9, i32 9, i32 9>
  %67 = ashr <4 x i32> %65, <i32 9, i32 9, i32 9, i32 9>
  %68 = bitcast <4 x i32> %66 to <8 x i16>
  %69 = bitcast <4 x i32> %67 to <8 x i16>
  %70 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %68, <8 x i16> %69) #3
  %71 = shufflevector <16 x i8> %70, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %72 = bitcast <16 x i8> %71 to <2 x i64>
  %73 = extractelement <2 x i64> %72, i32 0
  %74 = bitcast i8* %32 to i64*
  store i64 %73, i64* %74, align 1
  %75 = load i64, i64* %24, align 1
  %76 = insertelement <2 x i64> undef, i64 %75, i32 0
  %77 = bitcast <2 x i64> %76 to <16 x i8>
  %78 = shufflevector <16 x i8> %77, <16 x i8> <i8 68, i8 54, i8 43, i8 33, i8 26, i8 20, i8 17, i8 16, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %79 = shufflevector <16 x i8> %78, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %80 = shufflevector <16 x i8> %78, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %81 = bitcast <16 x i8> %79 to <8 x i16>
  %82 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %81, <8 x i16> %51) #3
  %83 = bitcast <16 x i8> %80 to <8 x i16>
  %84 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %83, <8 x i16> %51) #3
  %85 = add <4 x i32> %82, %42
  %86 = add <4 x i32> %84, %42
  %87 = add <4 x i32> %85, %28
  %88 = add <4 x i32> %86, %29
  %89 = ashr <4 x i32> %87, <i32 9, i32 9, i32 9, i32 9>
  %90 = ashr <4 x i32> %88, <i32 9, i32 9, i32 9, i32 9>
  %91 = bitcast <4 x i32> %89 to <8 x i16>
  %92 = bitcast <4 x i32> %90 to <8 x i16>
  %93 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %91, <8 x i16> %92) #3
  %94 = shufflevector <16 x i8> %93, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %95 = bitcast <16 x i8> %94 to <2 x i64>
  %96 = getelementptr inbounds i8, i8* %32, i64 8
  %97 = extractelement <2 x i64> %95, i32 0
  %98 = bitcast i8* %96 to i64*
  store i64 %97, i64* %98, align 1
  %99 = getelementptr inbounds i8, i8* %32, i64 %1
  %100 = add nuw nsw i64 %31, 1
  %101 = icmp eq i64 %100, 16
  br i1 %101, label %102, label %30

102:                                              ; preds = %30
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_smooth_predictor_16x32_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i8, i8* %2, i64 15
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <4 x i32> undef, i32 %7, i32 0
  %9 = bitcast <4 x i32> %8 to <16 x i8>
  %10 = shufflevector <16 x i8> %9, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %11 = getelementptr inbounds i8, i8* %3, i64 31
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = insertelement <4 x i32> undef, i32 %13, i32 0
  %15 = bitcast <4 x i32> %14 to <8 x i16>
  %16 = bitcast <16 x i8> %10 to <8 x i16>
  %17 = bitcast i8* %2 to i64*
  %18 = mul <8 x i16> %16, <i16 1, i16 31, i16 60, i16 86, i16 111, i16 133, i16 154, i16 172>
  %19 = shufflevector <8 x i16> %18, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %20 = shufflevector <8 x i16> %18, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %21 = bitcast <8 x i16> %19 to <4 x i32>
  %22 = bitcast <8 x i16> %20 to <4 x i32>
  %23 = getelementptr inbounds i8, i8* %2, i64 8
  %24 = bitcast i8* %23 to i64*
  %25 = mul <8 x i16> %16, <i16 188, i16 202, i16 213, i16 223, i16 230, i16 236, i16 239, i16 240>
  %26 = shufflevector <8 x i16> %25, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %27 = shufflevector <8 x i16> %25, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %28 = bitcast <8 x i16> %26 to <4 x i32>
  %29 = bitcast <8 x i16> %27 to <4 x i32>
  br label %30

30:                                               ; preds = %30, %4
  %31 = phi i64 [ 0, %4 ], [ %100, %30 ]
  %32 = phi i8* [ %0, %4 ], [ %99, %30 ]
  %33 = getelementptr inbounds i8, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @sm_weight_arrays, i64 0, i64 32), i64 %31
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %35, i32 0
  %37 = bitcast <4 x i32> %36 to <8 x i16>
  %38 = sub <8 x i16> <i16 256, i16 256, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>, %37
  %39 = mul <8 x i16> %38, %15
  %40 = bitcast <8 x i16> %39 to <4 x i32>
  %41 = add <4 x i32> %40, <i32 256, i32 undef, i32 undef, i32 undef>
  %42 = shufflevector <4 x i32> %41, <4 x i32> undef, <4 x i32> zeroinitializer
  %43 = getelementptr inbounds i8, i8* %3, i64 %31
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = insertelement <4 x i32> undef, i32 %45, i32 0
  %47 = bitcast <4 x i32> %46 to <8 x i16>
  %48 = shufflevector <8 x i16> %37, <8 x i16> %47, <8 x i32> <i32 0, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %49 = bitcast <8 x i16> %48 to <4 x i32>
  %50 = shufflevector <4 x i32> %49, <4 x i32> undef, <4 x i32> zeroinitializer
  %51 = bitcast <4 x i32> %50 to <8 x i16>
  %52 = load i64, i64* %17, align 1
  %53 = insertelement <2 x i64> undef, i64 %52, i32 0
  %54 = bitcast <2 x i64> %53 to <16 x i8>
  %55 = shufflevector <16 x i8> %54, <16 x i8> <i8 -1, i8 -31, i8 -60, i8 -86, i8 -111, i8 123, i8 102, i8 84, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %56 = shufflevector <16 x i8> %55, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %57 = shufflevector <16 x i8> %55, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %58 = bitcast <16 x i8> %56 to <8 x i16>
  %59 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %58, <8 x i16> %51) #3
  %60 = bitcast <16 x i8> %57 to <8 x i16>
  %61 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %60, <8 x i16> %51) #3
  %62 = add <4 x i32> %59, %42
  %63 = add <4 x i32> %61, %42
  %64 = add <4 x i32> %62, %21
  %65 = add <4 x i32> %63, %22
  %66 = ashr <4 x i32> %64, <i32 9, i32 9, i32 9, i32 9>
  %67 = ashr <4 x i32> %65, <i32 9, i32 9, i32 9, i32 9>
  %68 = bitcast <4 x i32> %66 to <8 x i16>
  %69 = bitcast <4 x i32> %67 to <8 x i16>
  %70 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %68, <8 x i16> %69) #3
  %71 = shufflevector <16 x i8> %70, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %72 = bitcast <16 x i8> %71 to <2 x i64>
  %73 = extractelement <2 x i64> %72, i32 0
  %74 = bitcast i8* %32 to i64*
  store i64 %73, i64* %74, align 1
  %75 = load i64, i64* %24, align 1
  %76 = insertelement <2 x i64> undef, i64 %75, i32 0
  %77 = bitcast <2 x i64> %76 to <16 x i8>
  %78 = shufflevector <16 x i8> %77, <16 x i8> <i8 68, i8 54, i8 43, i8 33, i8 26, i8 20, i8 17, i8 16, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %79 = shufflevector <16 x i8> %78, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %80 = shufflevector <16 x i8> %78, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %81 = bitcast <16 x i8> %79 to <8 x i16>
  %82 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %81, <8 x i16> %51) #3
  %83 = bitcast <16 x i8> %80 to <8 x i16>
  %84 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %83, <8 x i16> %51) #3
  %85 = add <4 x i32> %82, %42
  %86 = add <4 x i32> %84, %42
  %87 = add <4 x i32> %85, %28
  %88 = add <4 x i32> %86, %29
  %89 = ashr <4 x i32> %87, <i32 9, i32 9, i32 9, i32 9>
  %90 = ashr <4 x i32> %88, <i32 9, i32 9, i32 9, i32 9>
  %91 = bitcast <4 x i32> %89 to <8 x i16>
  %92 = bitcast <4 x i32> %90 to <8 x i16>
  %93 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %91, <8 x i16> %92) #3
  %94 = shufflevector <16 x i8> %93, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %95 = bitcast <16 x i8> %94 to <2 x i64>
  %96 = getelementptr inbounds i8, i8* %32, i64 8
  %97 = extractelement <2 x i64> %95, i32 0
  %98 = bitcast i8* %96 to i64*
  store i64 %97, i64* %98, align 1
  %99 = getelementptr inbounds i8, i8* %32, i64 %1
  %100 = add nuw nsw i64 %31, 1
  %101 = icmp eq i64 %100, 32
  br i1 %101, label %102, label %30

102:                                              ; preds = %30
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_smooth_predictor_32x8_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i8, i8* %2, i64 31
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <4 x i32> undef, i32 %7, i32 0
  %9 = bitcast <4 x i32> %8 to <16 x i8>
  %10 = shufflevector <16 x i8> %9, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %11 = getelementptr inbounds i8, i8* %3, i64 7
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = insertelement <4 x i32> undef, i32 %13, i32 0
  %15 = bitcast <4 x i32> %14 to <8 x i16>
  %16 = bitcast <16 x i8> %10 to <8 x i16>
  %17 = bitcast i8* %2 to i64*
  %18 = mul <8 x i16> %16, <i16 1, i16 16, i16 31, i16 46, i16 60, i16 74, i16 87, i16 99>
  %19 = shufflevector <8 x i16> %18, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %20 = shufflevector <8 x i16> %18, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %21 = bitcast <8 x i16> %19 to <4 x i32>
  %22 = bitcast <8 x i16> %20 to <4 x i32>
  %23 = getelementptr inbounds i8, i8* %2, i64 8
  %24 = bitcast i8* %23 to i64*
  %25 = mul <8 x i16> %16, <i16 111, i16 123, i16 134, i16 145, i16 155, i16 164, i16 173, i16 182>
  %26 = shufflevector <8 x i16> %25, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %27 = shufflevector <8 x i16> %25, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %28 = bitcast <8 x i16> %26 to <4 x i32>
  %29 = bitcast <8 x i16> %27 to <4 x i32>
  %30 = getelementptr inbounds i8, i8* %2, i64 16
  %31 = bitcast i8* %30 to i64*
  %32 = mul <8 x i16> %16, <i16 190, i16 197, i16 204, i16 211, i16 217, i16 222, i16 227, i16 231>
  %33 = shufflevector <8 x i16> %32, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %34 = shufflevector <8 x i16> %32, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %35 = bitcast <8 x i16> %33 to <4 x i32>
  %36 = bitcast <8 x i16> %34 to <4 x i32>
  %37 = getelementptr inbounds i8, i8* %2, i64 24
  %38 = bitcast i8* %37 to i64*
  %39 = mul <8 x i16> %16, <i16 235, i16 239, i16 242, i16 244, i16 246, i16 247, i16 248, i16 248>
  %40 = shufflevector <8 x i16> %39, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %41 = shufflevector <8 x i16> %39, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %42 = bitcast <8 x i16> %40 to <4 x i32>
  %43 = bitcast <8 x i16> %41 to <4 x i32>
  br label %44

44:                                               ; preds = %44, %4
  %45 = phi i64 [ 0, %4 ], [ %162, %44 ]
  %46 = phi i8* [ %0, %4 ], [ %161, %44 ]
  %47 = getelementptr inbounds i8, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @sm_weight_arrays, i64 0, i64 8), i64 %45
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %49, i32 0
  %51 = bitcast <4 x i32> %50 to <8 x i16>
  %52 = sub <8 x i16> <i16 256, i16 256, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>, %51
  %53 = mul <8 x i16> %52, %15
  %54 = bitcast <8 x i16> %53 to <4 x i32>
  %55 = add <4 x i32> %54, <i32 256, i32 undef, i32 undef, i32 undef>
  %56 = shufflevector <4 x i32> %55, <4 x i32> undef, <4 x i32> zeroinitializer
  %57 = getelementptr inbounds i8, i8* %3, i64 %45
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i32
  %60 = insertelement <4 x i32> undef, i32 %59, i32 0
  %61 = bitcast <4 x i32> %60 to <8 x i16>
  %62 = shufflevector <8 x i16> %51, <8 x i16> %61, <8 x i32> <i32 0, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %63 = bitcast <8 x i16> %62 to <4 x i32>
  %64 = shufflevector <4 x i32> %63, <4 x i32> undef, <4 x i32> zeroinitializer
  %65 = bitcast <4 x i32> %64 to <8 x i16>
  %66 = load i64, i64* %17, align 1
  %67 = insertelement <2 x i64> undef, i64 %66, i32 0
  %68 = bitcast <2 x i64> %67 to <16 x i8>
  %69 = shufflevector <16 x i8> %68, <16 x i8> <i8 -1, i8 -16, i8 -31, i8 -46, i8 -60, i8 -74, i8 -87, i8 -99, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %70 = shufflevector <16 x i8> %69, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %71 = shufflevector <16 x i8> %69, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %72 = bitcast <16 x i8> %70 to <8 x i16>
  %73 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %72, <8 x i16> %65) #3
  %74 = bitcast <16 x i8> %71 to <8 x i16>
  %75 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %74, <8 x i16> %65) #3
  %76 = add <4 x i32> %73, %56
  %77 = add <4 x i32> %75, %56
  %78 = add <4 x i32> %76, %21
  %79 = add <4 x i32> %77, %22
  %80 = ashr <4 x i32> %78, <i32 9, i32 9, i32 9, i32 9>
  %81 = ashr <4 x i32> %79, <i32 9, i32 9, i32 9, i32 9>
  %82 = bitcast <4 x i32> %80 to <8 x i16>
  %83 = bitcast <4 x i32> %81 to <8 x i16>
  %84 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %82, <8 x i16> %83) #3
  %85 = shufflevector <16 x i8> %84, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %86 = bitcast <16 x i8> %85 to <2 x i64>
  %87 = extractelement <2 x i64> %86, i32 0
  %88 = bitcast i8* %46 to i64*
  store i64 %87, i64* %88, align 1
  %89 = load i64, i64* %24, align 1
  %90 = insertelement <2 x i64> undef, i64 %89, i32 0
  %91 = bitcast <2 x i64> %90 to <16 x i8>
  %92 = shufflevector <16 x i8> %91, <16 x i8> <i8 -111, i8 -123, i8 122, i8 111, i8 101, i8 92, i8 83, i8 74, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %93 = shufflevector <16 x i8> %92, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %94 = shufflevector <16 x i8> %92, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %95 = bitcast <16 x i8> %93 to <8 x i16>
  %96 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %95, <8 x i16> %65) #3
  %97 = bitcast <16 x i8> %94 to <8 x i16>
  %98 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %97, <8 x i16> %65) #3
  %99 = add <4 x i32> %96, %56
  %100 = add <4 x i32> %98, %56
  %101 = add <4 x i32> %99, %28
  %102 = add <4 x i32> %100, %29
  %103 = ashr <4 x i32> %101, <i32 9, i32 9, i32 9, i32 9>
  %104 = ashr <4 x i32> %102, <i32 9, i32 9, i32 9, i32 9>
  %105 = bitcast <4 x i32> %103 to <8 x i16>
  %106 = bitcast <4 x i32> %104 to <8 x i16>
  %107 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %105, <8 x i16> %106) #3
  %108 = shufflevector <16 x i8> %107, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %109 = bitcast <16 x i8> %108 to <2 x i64>
  %110 = getelementptr inbounds i8, i8* %46, i64 8
  %111 = extractelement <2 x i64> %109, i32 0
  %112 = bitcast i8* %110 to i64*
  store i64 %111, i64* %112, align 1
  %113 = load i64, i64* %31, align 1
  %114 = insertelement <2 x i64> undef, i64 %113, i32 0
  %115 = bitcast <2 x i64> %114 to <16 x i8>
  %116 = shufflevector <16 x i8> %115, <16 x i8> <i8 66, i8 59, i8 52, i8 45, i8 39, i8 34, i8 29, i8 25, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %117 = shufflevector <16 x i8> %116, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %118 = shufflevector <16 x i8> %116, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %119 = bitcast <16 x i8> %117 to <8 x i16>
  %120 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %119, <8 x i16> %65) #3
  %121 = bitcast <16 x i8> %118 to <8 x i16>
  %122 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %121, <8 x i16> %65) #3
  %123 = add <4 x i32> %120, %56
  %124 = add <4 x i32> %122, %56
  %125 = add <4 x i32> %123, %35
  %126 = add <4 x i32> %124, %36
  %127 = ashr <4 x i32> %125, <i32 9, i32 9, i32 9, i32 9>
  %128 = ashr <4 x i32> %126, <i32 9, i32 9, i32 9, i32 9>
  %129 = bitcast <4 x i32> %127 to <8 x i16>
  %130 = bitcast <4 x i32> %128 to <8 x i16>
  %131 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %129, <8 x i16> %130) #3
  %132 = shufflevector <16 x i8> %131, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %133 = bitcast <16 x i8> %132 to <2 x i64>
  %134 = getelementptr inbounds i8, i8* %46, i64 16
  %135 = extractelement <2 x i64> %133, i32 0
  %136 = bitcast i8* %134 to i64*
  store i64 %135, i64* %136, align 1
  %137 = load i64, i64* %38, align 1
  %138 = insertelement <2 x i64> undef, i64 %137, i32 0
  %139 = bitcast <2 x i64> %138 to <16 x i8>
  %140 = shufflevector <16 x i8> %139, <16 x i8> <i8 21, i8 17, i8 14, i8 12, i8 10, i8 9, i8 8, i8 8, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %141 = shufflevector <16 x i8> %140, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %142 = shufflevector <16 x i8> %140, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %143 = bitcast <16 x i8> %141 to <8 x i16>
  %144 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %143, <8 x i16> %65) #3
  %145 = bitcast <16 x i8> %142 to <8 x i16>
  %146 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %145, <8 x i16> %65) #3
  %147 = add <4 x i32> %144, %56
  %148 = add <4 x i32> %146, %56
  %149 = add <4 x i32> %147, %42
  %150 = add <4 x i32> %148, %43
  %151 = ashr <4 x i32> %149, <i32 9, i32 9, i32 9, i32 9>
  %152 = ashr <4 x i32> %150, <i32 9, i32 9, i32 9, i32 9>
  %153 = bitcast <4 x i32> %151 to <8 x i16>
  %154 = bitcast <4 x i32> %152 to <8 x i16>
  %155 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %153, <8 x i16> %154) #3
  %156 = shufflevector <16 x i8> %155, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %157 = bitcast <16 x i8> %156 to <2 x i64>
  %158 = getelementptr inbounds i8, i8* %46, i64 24
  %159 = extractelement <2 x i64> %157, i32 0
  %160 = bitcast i8* %158 to i64*
  store i64 %159, i64* %160, align 1
  %161 = getelementptr inbounds i8, i8* %46, i64 %1
  %162 = add nuw nsw i64 %45, 1
  %163 = icmp eq i64 %162, 8
  br i1 %163, label %164, label %44

164:                                              ; preds = %44
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_smooth_predictor_32x16_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i8, i8* %2, i64 31
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <4 x i32> undef, i32 %7, i32 0
  %9 = bitcast <4 x i32> %8 to <16 x i8>
  %10 = shufflevector <16 x i8> %9, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %11 = getelementptr inbounds i8, i8* %3, i64 15
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = insertelement <4 x i32> undef, i32 %13, i32 0
  %15 = bitcast <4 x i32> %14 to <8 x i16>
  %16 = bitcast <16 x i8> %10 to <8 x i16>
  %17 = bitcast i8* %2 to i64*
  %18 = mul <8 x i16> %16, <i16 1, i16 16, i16 31, i16 46, i16 60, i16 74, i16 87, i16 99>
  %19 = shufflevector <8 x i16> %18, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %20 = shufflevector <8 x i16> %18, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %21 = bitcast <8 x i16> %19 to <4 x i32>
  %22 = bitcast <8 x i16> %20 to <4 x i32>
  %23 = getelementptr inbounds i8, i8* %2, i64 8
  %24 = bitcast i8* %23 to i64*
  %25 = mul <8 x i16> %16, <i16 111, i16 123, i16 134, i16 145, i16 155, i16 164, i16 173, i16 182>
  %26 = shufflevector <8 x i16> %25, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %27 = shufflevector <8 x i16> %25, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %28 = bitcast <8 x i16> %26 to <4 x i32>
  %29 = bitcast <8 x i16> %27 to <4 x i32>
  %30 = getelementptr inbounds i8, i8* %2, i64 16
  %31 = bitcast i8* %30 to i64*
  %32 = mul <8 x i16> %16, <i16 190, i16 197, i16 204, i16 211, i16 217, i16 222, i16 227, i16 231>
  %33 = shufflevector <8 x i16> %32, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %34 = shufflevector <8 x i16> %32, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %35 = bitcast <8 x i16> %33 to <4 x i32>
  %36 = bitcast <8 x i16> %34 to <4 x i32>
  %37 = getelementptr inbounds i8, i8* %2, i64 24
  %38 = bitcast i8* %37 to i64*
  %39 = mul <8 x i16> %16, <i16 235, i16 239, i16 242, i16 244, i16 246, i16 247, i16 248, i16 248>
  %40 = shufflevector <8 x i16> %39, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %41 = shufflevector <8 x i16> %39, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %42 = bitcast <8 x i16> %40 to <4 x i32>
  %43 = bitcast <8 x i16> %41 to <4 x i32>
  br label %44

44:                                               ; preds = %44, %4
  %45 = phi i64 [ 0, %4 ], [ %162, %44 ]
  %46 = phi i8* [ %0, %4 ], [ %161, %44 ]
  %47 = getelementptr inbounds i8, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @sm_weight_arrays, i64 0, i64 16), i64 %45
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %49, i32 0
  %51 = bitcast <4 x i32> %50 to <8 x i16>
  %52 = sub <8 x i16> <i16 256, i16 256, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>, %51
  %53 = mul <8 x i16> %52, %15
  %54 = bitcast <8 x i16> %53 to <4 x i32>
  %55 = add <4 x i32> %54, <i32 256, i32 undef, i32 undef, i32 undef>
  %56 = shufflevector <4 x i32> %55, <4 x i32> undef, <4 x i32> zeroinitializer
  %57 = getelementptr inbounds i8, i8* %3, i64 %45
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i32
  %60 = insertelement <4 x i32> undef, i32 %59, i32 0
  %61 = bitcast <4 x i32> %60 to <8 x i16>
  %62 = shufflevector <8 x i16> %51, <8 x i16> %61, <8 x i32> <i32 0, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %63 = bitcast <8 x i16> %62 to <4 x i32>
  %64 = shufflevector <4 x i32> %63, <4 x i32> undef, <4 x i32> zeroinitializer
  %65 = bitcast <4 x i32> %64 to <8 x i16>
  %66 = load i64, i64* %17, align 1
  %67 = insertelement <2 x i64> undef, i64 %66, i32 0
  %68 = bitcast <2 x i64> %67 to <16 x i8>
  %69 = shufflevector <16 x i8> %68, <16 x i8> <i8 -1, i8 -16, i8 -31, i8 -46, i8 -60, i8 -74, i8 -87, i8 -99, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %70 = shufflevector <16 x i8> %69, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %71 = shufflevector <16 x i8> %69, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %72 = bitcast <16 x i8> %70 to <8 x i16>
  %73 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %72, <8 x i16> %65) #3
  %74 = bitcast <16 x i8> %71 to <8 x i16>
  %75 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %74, <8 x i16> %65) #3
  %76 = add <4 x i32> %73, %56
  %77 = add <4 x i32> %75, %56
  %78 = add <4 x i32> %76, %21
  %79 = add <4 x i32> %77, %22
  %80 = ashr <4 x i32> %78, <i32 9, i32 9, i32 9, i32 9>
  %81 = ashr <4 x i32> %79, <i32 9, i32 9, i32 9, i32 9>
  %82 = bitcast <4 x i32> %80 to <8 x i16>
  %83 = bitcast <4 x i32> %81 to <8 x i16>
  %84 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %82, <8 x i16> %83) #3
  %85 = shufflevector <16 x i8> %84, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %86 = bitcast <16 x i8> %85 to <2 x i64>
  %87 = extractelement <2 x i64> %86, i32 0
  %88 = bitcast i8* %46 to i64*
  store i64 %87, i64* %88, align 1
  %89 = load i64, i64* %24, align 1
  %90 = insertelement <2 x i64> undef, i64 %89, i32 0
  %91 = bitcast <2 x i64> %90 to <16 x i8>
  %92 = shufflevector <16 x i8> %91, <16 x i8> <i8 -111, i8 -123, i8 122, i8 111, i8 101, i8 92, i8 83, i8 74, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %93 = shufflevector <16 x i8> %92, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %94 = shufflevector <16 x i8> %92, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %95 = bitcast <16 x i8> %93 to <8 x i16>
  %96 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %95, <8 x i16> %65) #3
  %97 = bitcast <16 x i8> %94 to <8 x i16>
  %98 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %97, <8 x i16> %65) #3
  %99 = add <4 x i32> %96, %56
  %100 = add <4 x i32> %98, %56
  %101 = add <4 x i32> %99, %28
  %102 = add <4 x i32> %100, %29
  %103 = ashr <4 x i32> %101, <i32 9, i32 9, i32 9, i32 9>
  %104 = ashr <4 x i32> %102, <i32 9, i32 9, i32 9, i32 9>
  %105 = bitcast <4 x i32> %103 to <8 x i16>
  %106 = bitcast <4 x i32> %104 to <8 x i16>
  %107 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %105, <8 x i16> %106) #3
  %108 = shufflevector <16 x i8> %107, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %109 = bitcast <16 x i8> %108 to <2 x i64>
  %110 = getelementptr inbounds i8, i8* %46, i64 8
  %111 = extractelement <2 x i64> %109, i32 0
  %112 = bitcast i8* %110 to i64*
  store i64 %111, i64* %112, align 1
  %113 = load i64, i64* %31, align 1
  %114 = insertelement <2 x i64> undef, i64 %113, i32 0
  %115 = bitcast <2 x i64> %114 to <16 x i8>
  %116 = shufflevector <16 x i8> %115, <16 x i8> <i8 66, i8 59, i8 52, i8 45, i8 39, i8 34, i8 29, i8 25, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %117 = shufflevector <16 x i8> %116, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %118 = shufflevector <16 x i8> %116, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %119 = bitcast <16 x i8> %117 to <8 x i16>
  %120 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %119, <8 x i16> %65) #3
  %121 = bitcast <16 x i8> %118 to <8 x i16>
  %122 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %121, <8 x i16> %65) #3
  %123 = add <4 x i32> %120, %56
  %124 = add <4 x i32> %122, %56
  %125 = add <4 x i32> %123, %35
  %126 = add <4 x i32> %124, %36
  %127 = ashr <4 x i32> %125, <i32 9, i32 9, i32 9, i32 9>
  %128 = ashr <4 x i32> %126, <i32 9, i32 9, i32 9, i32 9>
  %129 = bitcast <4 x i32> %127 to <8 x i16>
  %130 = bitcast <4 x i32> %128 to <8 x i16>
  %131 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %129, <8 x i16> %130) #3
  %132 = shufflevector <16 x i8> %131, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %133 = bitcast <16 x i8> %132 to <2 x i64>
  %134 = getelementptr inbounds i8, i8* %46, i64 16
  %135 = extractelement <2 x i64> %133, i32 0
  %136 = bitcast i8* %134 to i64*
  store i64 %135, i64* %136, align 1
  %137 = load i64, i64* %38, align 1
  %138 = insertelement <2 x i64> undef, i64 %137, i32 0
  %139 = bitcast <2 x i64> %138 to <16 x i8>
  %140 = shufflevector <16 x i8> %139, <16 x i8> <i8 21, i8 17, i8 14, i8 12, i8 10, i8 9, i8 8, i8 8, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %141 = shufflevector <16 x i8> %140, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %142 = shufflevector <16 x i8> %140, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %143 = bitcast <16 x i8> %141 to <8 x i16>
  %144 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %143, <8 x i16> %65) #3
  %145 = bitcast <16 x i8> %142 to <8 x i16>
  %146 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %145, <8 x i16> %65) #3
  %147 = add <4 x i32> %144, %56
  %148 = add <4 x i32> %146, %56
  %149 = add <4 x i32> %147, %42
  %150 = add <4 x i32> %148, %43
  %151 = ashr <4 x i32> %149, <i32 9, i32 9, i32 9, i32 9>
  %152 = ashr <4 x i32> %150, <i32 9, i32 9, i32 9, i32 9>
  %153 = bitcast <4 x i32> %151 to <8 x i16>
  %154 = bitcast <4 x i32> %152 to <8 x i16>
  %155 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %153, <8 x i16> %154) #3
  %156 = shufflevector <16 x i8> %155, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %157 = bitcast <16 x i8> %156 to <2 x i64>
  %158 = getelementptr inbounds i8, i8* %46, i64 24
  %159 = extractelement <2 x i64> %157, i32 0
  %160 = bitcast i8* %158 to i64*
  store i64 %159, i64* %160, align 1
  %161 = getelementptr inbounds i8, i8* %46, i64 %1
  %162 = add nuw nsw i64 %45, 1
  %163 = icmp eq i64 %162, 16
  br i1 %163, label %164, label %44

164:                                              ; preds = %44
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_smooth_predictor_32x32_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i8, i8* %2, i64 31
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <4 x i32> undef, i32 %7, i32 0
  %9 = bitcast <4 x i32> %8 to <16 x i8>
  %10 = shufflevector <16 x i8> %9, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %11 = getelementptr inbounds i8, i8* %3, i64 31
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = insertelement <4 x i32> undef, i32 %13, i32 0
  %15 = bitcast <4 x i32> %14 to <8 x i16>
  %16 = bitcast <16 x i8> %10 to <8 x i16>
  %17 = bitcast i8* %2 to i64*
  %18 = mul <8 x i16> %16, <i16 1, i16 16, i16 31, i16 46, i16 60, i16 74, i16 87, i16 99>
  %19 = shufflevector <8 x i16> %18, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %20 = shufflevector <8 x i16> %18, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %21 = bitcast <8 x i16> %19 to <4 x i32>
  %22 = bitcast <8 x i16> %20 to <4 x i32>
  %23 = getelementptr inbounds i8, i8* %2, i64 8
  %24 = bitcast i8* %23 to i64*
  %25 = mul <8 x i16> %16, <i16 111, i16 123, i16 134, i16 145, i16 155, i16 164, i16 173, i16 182>
  %26 = shufflevector <8 x i16> %25, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %27 = shufflevector <8 x i16> %25, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %28 = bitcast <8 x i16> %26 to <4 x i32>
  %29 = bitcast <8 x i16> %27 to <4 x i32>
  %30 = getelementptr inbounds i8, i8* %2, i64 16
  %31 = bitcast i8* %30 to i64*
  %32 = mul <8 x i16> %16, <i16 190, i16 197, i16 204, i16 211, i16 217, i16 222, i16 227, i16 231>
  %33 = shufflevector <8 x i16> %32, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %34 = shufflevector <8 x i16> %32, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %35 = bitcast <8 x i16> %33 to <4 x i32>
  %36 = bitcast <8 x i16> %34 to <4 x i32>
  %37 = getelementptr inbounds i8, i8* %2, i64 24
  %38 = bitcast i8* %37 to i64*
  %39 = mul <8 x i16> %16, <i16 235, i16 239, i16 242, i16 244, i16 246, i16 247, i16 248, i16 248>
  %40 = shufflevector <8 x i16> %39, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %41 = shufflevector <8 x i16> %39, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %42 = bitcast <8 x i16> %40 to <4 x i32>
  %43 = bitcast <8 x i16> %41 to <4 x i32>
  br label %44

44:                                               ; preds = %44, %4
  %45 = phi i64 [ 0, %4 ], [ %162, %44 ]
  %46 = phi i8* [ %0, %4 ], [ %161, %44 ]
  %47 = getelementptr inbounds i8, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @sm_weight_arrays, i64 0, i64 32), i64 %45
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %49, i32 0
  %51 = bitcast <4 x i32> %50 to <8 x i16>
  %52 = sub <8 x i16> <i16 256, i16 256, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>, %51
  %53 = mul <8 x i16> %52, %15
  %54 = bitcast <8 x i16> %53 to <4 x i32>
  %55 = add <4 x i32> %54, <i32 256, i32 undef, i32 undef, i32 undef>
  %56 = shufflevector <4 x i32> %55, <4 x i32> undef, <4 x i32> zeroinitializer
  %57 = getelementptr inbounds i8, i8* %3, i64 %45
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i32
  %60 = insertelement <4 x i32> undef, i32 %59, i32 0
  %61 = bitcast <4 x i32> %60 to <8 x i16>
  %62 = shufflevector <8 x i16> %51, <8 x i16> %61, <8 x i32> <i32 0, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %63 = bitcast <8 x i16> %62 to <4 x i32>
  %64 = shufflevector <4 x i32> %63, <4 x i32> undef, <4 x i32> zeroinitializer
  %65 = bitcast <4 x i32> %64 to <8 x i16>
  %66 = load i64, i64* %17, align 1
  %67 = insertelement <2 x i64> undef, i64 %66, i32 0
  %68 = bitcast <2 x i64> %67 to <16 x i8>
  %69 = shufflevector <16 x i8> %68, <16 x i8> <i8 -1, i8 -16, i8 -31, i8 -46, i8 -60, i8 -74, i8 -87, i8 -99, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %70 = shufflevector <16 x i8> %69, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %71 = shufflevector <16 x i8> %69, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %72 = bitcast <16 x i8> %70 to <8 x i16>
  %73 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %72, <8 x i16> %65) #3
  %74 = bitcast <16 x i8> %71 to <8 x i16>
  %75 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %74, <8 x i16> %65) #3
  %76 = add <4 x i32> %73, %56
  %77 = add <4 x i32> %75, %56
  %78 = add <4 x i32> %76, %21
  %79 = add <4 x i32> %77, %22
  %80 = ashr <4 x i32> %78, <i32 9, i32 9, i32 9, i32 9>
  %81 = ashr <4 x i32> %79, <i32 9, i32 9, i32 9, i32 9>
  %82 = bitcast <4 x i32> %80 to <8 x i16>
  %83 = bitcast <4 x i32> %81 to <8 x i16>
  %84 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %82, <8 x i16> %83) #3
  %85 = shufflevector <16 x i8> %84, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %86 = bitcast <16 x i8> %85 to <2 x i64>
  %87 = extractelement <2 x i64> %86, i32 0
  %88 = bitcast i8* %46 to i64*
  store i64 %87, i64* %88, align 1
  %89 = load i64, i64* %24, align 1
  %90 = insertelement <2 x i64> undef, i64 %89, i32 0
  %91 = bitcast <2 x i64> %90 to <16 x i8>
  %92 = shufflevector <16 x i8> %91, <16 x i8> <i8 -111, i8 -123, i8 122, i8 111, i8 101, i8 92, i8 83, i8 74, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %93 = shufflevector <16 x i8> %92, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %94 = shufflevector <16 x i8> %92, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %95 = bitcast <16 x i8> %93 to <8 x i16>
  %96 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %95, <8 x i16> %65) #3
  %97 = bitcast <16 x i8> %94 to <8 x i16>
  %98 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %97, <8 x i16> %65) #3
  %99 = add <4 x i32> %96, %56
  %100 = add <4 x i32> %98, %56
  %101 = add <4 x i32> %99, %28
  %102 = add <4 x i32> %100, %29
  %103 = ashr <4 x i32> %101, <i32 9, i32 9, i32 9, i32 9>
  %104 = ashr <4 x i32> %102, <i32 9, i32 9, i32 9, i32 9>
  %105 = bitcast <4 x i32> %103 to <8 x i16>
  %106 = bitcast <4 x i32> %104 to <8 x i16>
  %107 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %105, <8 x i16> %106) #3
  %108 = shufflevector <16 x i8> %107, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %109 = bitcast <16 x i8> %108 to <2 x i64>
  %110 = getelementptr inbounds i8, i8* %46, i64 8
  %111 = extractelement <2 x i64> %109, i32 0
  %112 = bitcast i8* %110 to i64*
  store i64 %111, i64* %112, align 1
  %113 = load i64, i64* %31, align 1
  %114 = insertelement <2 x i64> undef, i64 %113, i32 0
  %115 = bitcast <2 x i64> %114 to <16 x i8>
  %116 = shufflevector <16 x i8> %115, <16 x i8> <i8 66, i8 59, i8 52, i8 45, i8 39, i8 34, i8 29, i8 25, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %117 = shufflevector <16 x i8> %116, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %118 = shufflevector <16 x i8> %116, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %119 = bitcast <16 x i8> %117 to <8 x i16>
  %120 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %119, <8 x i16> %65) #3
  %121 = bitcast <16 x i8> %118 to <8 x i16>
  %122 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %121, <8 x i16> %65) #3
  %123 = add <4 x i32> %120, %56
  %124 = add <4 x i32> %122, %56
  %125 = add <4 x i32> %123, %35
  %126 = add <4 x i32> %124, %36
  %127 = ashr <4 x i32> %125, <i32 9, i32 9, i32 9, i32 9>
  %128 = ashr <4 x i32> %126, <i32 9, i32 9, i32 9, i32 9>
  %129 = bitcast <4 x i32> %127 to <8 x i16>
  %130 = bitcast <4 x i32> %128 to <8 x i16>
  %131 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %129, <8 x i16> %130) #3
  %132 = shufflevector <16 x i8> %131, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %133 = bitcast <16 x i8> %132 to <2 x i64>
  %134 = getelementptr inbounds i8, i8* %46, i64 16
  %135 = extractelement <2 x i64> %133, i32 0
  %136 = bitcast i8* %134 to i64*
  store i64 %135, i64* %136, align 1
  %137 = load i64, i64* %38, align 1
  %138 = insertelement <2 x i64> undef, i64 %137, i32 0
  %139 = bitcast <2 x i64> %138 to <16 x i8>
  %140 = shufflevector <16 x i8> %139, <16 x i8> <i8 21, i8 17, i8 14, i8 12, i8 10, i8 9, i8 8, i8 8, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %141 = shufflevector <16 x i8> %140, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %142 = shufflevector <16 x i8> %140, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %143 = bitcast <16 x i8> %141 to <8 x i16>
  %144 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %143, <8 x i16> %65) #3
  %145 = bitcast <16 x i8> %142 to <8 x i16>
  %146 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %145, <8 x i16> %65) #3
  %147 = add <4 x i32> %144, %56
  %148 = add <4 x i32> %146, %56
  %149 = add <4 x i32> %147, %42
  %150 = add <4 x i32> %148, %43
  %151 = ashr <4 x i32> %149, <i32 9, i32 9, i32 9, i32 9>
  %152 = ashr <4 x i32> %150, <i32 9, i32 9, i32 9, i32 9>
  %153 = bitcast <4 x i32> %151 to <8 x i16>
  %154 = bitcast <4 x i32> %152 to <8 x i16>
  %155 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %153, <8 x i16> %154) #3
  %156 = shufflevector <16 x i8> %155, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %157 = bitcast <16 x i8> %156 to <2 x i64>
  %158 = getelementptr inbounds i8, i8* %46, i64 24
  %159 = extractelement <2 x i64> %157, i32 0
  %160 = bitcast i8* %158 to i64*
  store i64 %159, i64* %160, align 1
  %161 = getelementptr inbounds i8, i8* %46, i64 %1
  %162 = add nuw nsw i64 %45, 1
  %163 = icmp eq i64 %162, 32
  br i1 %163, label %164, label %44

164:                                              ; preds = %44
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_smooth_predictor_32x64_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i8, i8* %2, i64 31
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <4 x i32> undef, i32 %7, i32 0
  %9 = bitcast <4 x i32> %8 to <16 x i8>
  %10 = shufflevector <16 x i8> %9, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %11 = getelementptr inbounds i8, i8* %3, i64 63
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = insertelement <4 x i32> undef, i32 %13, i32 0
  %15 = bitcast <4 x i32> %14 to <8 x i16>
  %16 = bitcast <16 x i8> %10 to <8 x i16>
  %17 = bitcast i8* %2 to i64*
  %18 = mul <8 x i16> %16, <i16 1, i16 16, i16 31, i16 46, i16 60, i16 74, i16 87, i16 99>
  %19 = shufflevector <8 x i16> %18, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %20 = shufflevector <8 x i16> %18, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %21 = bitcast <8 x i16> %19 to <4 x i32>
  %22 = bitcast <8 x i16> %20 to <4 x i32>
  %23 = getelementptr inbounds i8, i8* %2, i64 8
  %24 = bitcast i8* %23 to i64*
  %25 = mul <8 x i16> %16, <i16 111, i16 123, i16 134, i16 145, i16 155, i16 164, i16 173, i16 182>
  %26 = shufflevector <8 x i16> %25, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %27 = shufflevector <8 x i16> %25, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %28 = bitcast <8 x i16> %26 to <4 x i32>
  %29 = bitcast <8 x i16> %27 to <4 x i32>
  %30 = getelementptr inbounds i8, i8* %2, i64 16
  %31 = bitcast i8* %30 to i64*
  %32 = mul <8 x i16> %16, <i16 190, i16 197, i16 204, i16 211, i16 217, i16 222, i16 227, i16 231>
  %33 = shufflevector <8 x i16> %32, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %34 = shufflevector <8 x i16> %32, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %35 = bitcast <8 x i16> %33 to <4 x i32>
  %36 = bitcast <8 x i16> %34 to <4 x i32>
  %37 = getelementptr inbounds i8, i8* %2, i64 24
  %38 = bitcast i8* %37 to i64*
  %39 = mul <8 x i16> %16, <i16 235, i16 239, i16 242, i16 244, i16 246, i16 247, i16 248, i16 248>
  %40 = shufflevector <8 x i16> %39, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %41 = shufflevector <8 x i16> %39, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %42 = bitcast <8 x i16> %40 to <4 x i32>
  %43 = bitcast <8 x i16> %41 to <4 x i32>
  br label %44

44:                                               ; preds = %44, %4
  %45 = phi i64 [ 0, %4 ], [ %162, %44 ]
  %46 = phi i8* [ %0, %4 ], [ %161, %44 ]
  %47 = getelementptr inbounds i8, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @sm_weight_arrays, i64 0, i64 64), i64 %45
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %49, i32 0
  %51 = bitcast <4 x i32> %50 to <8 x i16>
  %52 = sub <8 x i16> <i16 256, i16 256, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>, %51
  %53 = mul <8 x i16> %52, %15
  %54 = bitcast <8 x i16> %53 to <4 x i32>
  %55 = add <4 x i32> %54, <i32 256, i32 undef, i32 undef, i32 undef>
  %56 = shufflevector <4 x i32> %55, <4 x i32> undef, <4 x i32> zeroinitializer
  %57 = getelementptr inbounds i8, i8* %3, i64 %45
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i32
  %60 = insertelement <4 x i32> undef, i32 %59, i32 0
  %61 = bitcast <4 x i32> %60 to <8 x i16>
  %62 = shufflevector <8 x i16> %51, <8 x i16> %61, <8 x i32> <i32 0, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %63 = bitcast <8 x i16> %62 to <4 x i32>
  %64 = shufflevector <4 x i32> %63, <4 x i32> undef, <4 x i32> zeroinitializer
  %65 = bitcast <4 x i32> %64 to <8 x i16>
  %66 = load i64, i64* %17, align 1
  %67 = insertelement <2 x i64> undef, i64 %66, i32 0
  %68 = bitcast <2 x i64> %67 to <16 x i8>
  %69 = shufflevector <16 x i8> %68, <16 x i8> <i8 -1, i8 -16, i8 -31, i8 -46, i8 -60, i8 -74, i8 -87, i8 -99, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %70 = shufflevector <16 x i8> %69, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %71 = shufflevector <16 x i8> %69, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %72 = bitcast <16 x i8> %70 to <8 x i16>
  %73 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %72, <8 x i16> %65) #3
  %74 = bitcast <16 x i8> %71 to <8 x i16>
  %75 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %74, <8 x i16> %65) #3
  %76 = add <4 x i32> %73, %56
  %77 = add <4 x i32> %75, %56
  %78 = add <4 x i32> %76, %21
  %79 = add <4 x i32> %77, %22
  %80 = ashr <4 x i32> %78, <i32 9, i32 9, i32 9, i32 9>
  %81 = ashr <4 x i32> %79, <i32 9, i32 9, i32 9, i32 9>
  %82 = bitcast <4 x i32> %80 to <8 x i16>
  %83 = bitcast <4 x i32> %81 to <8 x i16>
  %84 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %82, <8 x i16> %83) #3
  %85 = shufflevector <16 x i8> %84, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %86 = bitcast <16 x i8> %85 to <2 x i64>
  %87 = extractelement <2 x i64> %86, i32 0
  %88 = bitcast i8* %46 to i64*
  store i64 %87, i64* %88, align 1
  %89 = load i64, i64* %24, align 1
  %90 = insertelement <2 x i64> undef, i64 %89, i32 0
  %91 = bitcast <2 x i64> %90 to <16 x i8>
  %92 = shufflevector <16 x i8> %91, <16 x i8> <i8 -111, i8 -123, i8 122, i8 111, i8 101, i8 92, i8 83, i8 74, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %93 = shufflevector <16 x i8> %92, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %94 = shufflevector <16 x i8> %92, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %95 = bitcast <16 x i8> %93 to <8 x i16>
  %96 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %95, <8 x i16> %65) #3
  %97 = bitcast <16 x i8> %94 to <8 x i16>
  %98 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %97, <8 x i16> %65) #3
  %99 = add <4 x i32> %96, %56
  %100 = add <4 x i32> %98, %56
  %101 = add <4 x i32> %99, %28
  %102 = add <4 x i32> %100, %29
  %103 = ashr <4 x i32> %101, <i32 9, i32 9, i32 9, i32 9>
  %104 = ashr <4 x i32> %102, <i32 9, i32 9, i32 9, i32 9>
  %105 = bitcast <4 x i32> %103 to <8 x i16>
  %106 = bitcast <4 x i32> %104 to <8 x i16>
  %107 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %105, <8 x i16> %106) #3
  %108 = shufflevector <16 x i8> %107, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %109 = bitcast <16 x i8> %108 to <2 x i64>
  %110 = getelementptr inbounds i8, i8* %46, i64 8
  %111 = extractelement <2 x i64> %109, i32 0
  %112 = bitcast i8* %110 to i64*
  store i64 %111, i64* %112, align 1
  %113 = load i64, i64* %31, align 1
  %114 = insertelement <2 x i64> undef, i64 %113, i32 0
  %115 = bitcast <2 x i64> %114 to <16 x i8>
  %116 = shufflevector <16 x i8> %115, <16 x i8> <i8 66, i8 59, i8 52, i8 45, i8 39, i8 34, i8 29, i8 25, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %117 = shufflevector <16 x i8> %116, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %118 = shufflevector <16 x i8> %116, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %119 = bitcast <16 x i8> %117 to <8 x i16>
  %120 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %119, <8 x i16> %65) #3
  %121 = bitcast <16 x i8> %118 to <8 x i16>
  %122 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %121, <8 x i16> %65) #3
  %123 = add <4 x i32> %120, %56
  %124 = add <4 x i32> %122, %56
  %125 = add <4 x i32> %123, %35
  %126 = add <4 x i32> %124, %36
  %127 = ashr <4 x i32> %125, <i32 9, i32 9, i32 9, i32 9>
  %128 = ashr <4 x i32> %126, <i32 9, i32 9, i32 9, i32 9>
  %129 = bitcast <4 x i32> %127 to <8 x i16>
  %130 = bitcast <4 x i32> %128 to <8 x i16>
  %131 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %129, <8 x i16> %130) #3
  %132 = shufflevector <16 x i8> %131, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %133 = bitcast <16 x i8> %132 to <2 x i64>
  %134 = getelementptr inbounds i8, i8* %46, i64 16
  %135 = extractelement <2 x i64> %133, i32 0
  %136 = bitcast i8* %134 to i64*
  store i64 %135, i64* %136, align 1
  %137 = load i64, i64* %38, align 1
  %138 = insertelement <2 x i64> undef, i64 %137, i32 0
  %139 = bitcast <2 x i64> %138 to <16 x i8>
  %140 = shufflevector <16 x i8> %139, <16 x i8> <i8 21, i8 17, i8 14, i8 12, i8 10, i8 9, i8 8, i8 8, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %141 = shufflevector <16 x i8> %140, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %142 = shufflevector <16 x i8> %140, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %143 = bitcast <16 x i8> %141 to <8 x i16>
  %144 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %143, <8 x i16> %65) #3
  %145 = bitcast <16 x i8> %142 to <8 x i16>
  %146 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %145, <8 x i16> %65) #3
  %147 = add <4 x i32> %144, %56
  %148 = add <4 x i32> %146, %56
  %149 = add <4 x i32> %147, %42
  %150 = add <4 x i32> %148, %43
  %151 = ashr <4 x i32> %149, <i32 9, i32 9, i32 9, i32 9>
  %152 = ashr <4 x i32> %150, <i32 9, i32 9, i32 9, i32 9>
  %153 = bitcast <4 x i32> %151 to <8 x i16>
  %154 = bitcast <4 x i32> %152 to <8 x i16>
  %155 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %153, <8 x i16> %154) #3
  %156 = shufflevector <16 x i8> %155, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %157 = bitcast <16 x i8> %156 to <2 x i64>
  %158 = getelementptr inbounds i8, i8* %46, i64 24
  %159 = extractelement <2 x i64> %157, i32 0
  %160 = bitcast i8* %158 to i64*
  store i64 %159, i64* %160, align 1
  %161 = getelementptr inbounds i8, i8* %46, i64 %1
  %162 = add nuw nsw i64 %45, 1
  %163 = icmp eq i64 %162, 64
  br i1 %163, label %164, label %44

164:                                              ; preds = %44
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_smooth_predictor_64x64_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i8, i8* %2, i64 63
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <4 x i32> undef, i32 %7, i32 0
  %9 = bitcast <4 x i32> %8 to <16 x i8>
  %10 = shufflevector <16 x i8> %9, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %11 = getelementptr inbounds i8, i8* %3, i64 63
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = insertelement <4 x i32> undef, i32 %13, i32 0
  %15 = bitcast <4 x i32> %14 to <8 x i16>
  %16 = bitcast <16 x i8> %10 to <8 x i16>
  br label %17

17:                                               ; preds = %39, %4
  %18 = phi i64 [ 0, %4 ], [ %41, %39 ]
  %19 = phi i8* [ %0, %4 ], [ %40, %39 ]
  %20 = getelementptr inbounds i8, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @sm_weight_arrays, i64 0, i64 64), i64 %18
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %22, i32 0
  %24 = bitcast <4 x i32> %23 to <8 x i16>
  %25 = sub <8 x i16> <i16 256, i16 256, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>, %24
  %26 = mul <8 x i16> %25, %15
  %27 = bitcast <8 x i16> %26 to <4 x i32>
  %28 = add <4 x i32> %27, <i32 256, i32 undef, i32 undef, i32 undef>
  %29 = shufflevector <4 x i32> %28, <4 x i32> undef, <4 x i32> zeroinitializer
  %30 = getelementptr inbounds i8, i8* %3, i64 %18
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = insertelement <4 x i32> undef, i32 %32, i32 0
  %34 = bitcast <4 x i32> %33 to <8 x i16>
  %35 = shufflevector <8 x i16> %24, <8 x i16> %34, <8 x i32> <i32 0, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %36 = bitcast <8 x i16> %35 to <4 x i32>
  %37 = shufflevector <4 x i32> %36, <4 x i32> undef, <4 x i32> zeroinitializer
  %38 = bitcast <4 x i32> %37 to <8 x i16>
  br label %43

39:                                               ; preds = %43
  %40 = getelementptr inbounds i8, i8* %19, i64 %1
  %41 = add nuw nsw i64 %18, 1
  %42 = icmp eq i64 %41, 64
  br i1 %42, label %86, label %17

43:                                               ; preds = %43, %17
  %44 = phi i64 [ %84, %43 ], [ 0, %17 ]
  %45 = getelementptr inbounds i8, i8* %2, i64 %44
  %46 = bitcast i8* %45 to i64*
  %47 = load i64, i64* %46, align 1
  %48 = insertelement <2 x i64> undef, i64 %47, i32 0
  %49 = getelementptr inbounds i8, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @sm_weight_arrays, i64 0, i64 64), i64 %44
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %51, i32 0
  %53 = bitcast <2 x i64> %48 to <16 x i8>
  %54 = bitcast <2 x i64> %52 to <16 x i8>
  %55 = shufflevector <16 x i8> %53, <16 x i8> %54, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %56 = shufflevector <16 x i8> %55, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %57 = shufflevector <16 x i8> %55, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %58 = bitcast <16 x i8> %56 to <8 x i16>
  %59 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %58, <8 x i16> %38) #3
  %60 = bitcast <16 x i8> %57 to <8 x i16>
  %61 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %60, <8 x i16> %38) #3
  %62 = shufflevector <16 x i8> %54, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %63 = bitcast <16 x i8> %62 to <8 x i16>
  %64 = sub <8 x i16> <i16 256, i16 256, i16 256, i16 256, i16 256, i16 256, i16 256, i16 256>, %63
  %65 = mul <8 x i16> %64, %16
  %66 = shufflevector <8 x i16> %65, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %67 = shufflevector <8 x i16> %65, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %68 = add <4 x i32> %59, %29
  %69 = add <4 x i32> %61, %29
  %70 = bitcast <8 x i16> %66 to <4 x i32>
  %71 = add <4 x i32> %68, %70
  %72 = bitcast <8 x i16> %67 to <4 x i32>
  %73 = add <4 x i32> %69, %72
  %74 = ashr <4 x i32> %71, <i32 9, i32 9, i32 9, i32 9>
  %75 = ashr <4 x i32> %73, <i32 9, i32 9, i32 9, i32 9>
  %76 = bitcast <4 x i32> %74 to <8 x i16>
  %77 = bitcast <4 x i32> %75 to <8 x i16>
  %78 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %76, <8 x i16> %77) #3
  %79 = shufflevector <16 x i8> %78, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %80 = bitcast <16 x i8> %79 to <2 x i64>
  %81 = getelementptr inbounds i8, i8* %19, i64 %44
  %82 = extractelement <2 x i64> %80, i32 0
  %83 = bitcast i8* %81 to i64*
  store i64 %82, i64* %83, align 1
  %84 = add nuw nsw i64 %44, 8
  %85 = icmp ult i64 %84, 64
  br i1 %85, label %43, label %39

86:                                               ; preds = %39
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_smooth_predictor_64x32_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i8, i8* %2, i64 63
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <4 x i32> undef, i32 %7, i32 0
  %9 = bitcast <4 x i32> %8 to <16 x i8>
  %10 = shufflevector <16 x i8> %9, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %11 = getelementptr inbounds i8, i8* %3, i64 31
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = insertelement <4 x i32> undef, i32 %13, i32 0
  %15 = bitcast <4 x i32> %14 to <8 x i16>
  %16 = bitcast <16 x i8> %10 to <8 x i16>
  br label %17

17:                                               ; preds = %39, %4
  %18 = phi i64 [ 0, %4 ], [ %41, %39 ]
  %19 = phi i8* [ %0, %4 ], [ %40, %39 ]
  %20 = getelementptr inbounds i8, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @sm_weight_arrays, i64 0, i64 32), i64 %18
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %22, i32 0
  %24 = bitcast <4 x i32> %23 to <8 x i16>
  %25 = sub <8 x i16> <i16 256, i16 256, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>, %24
  %26 = mul <8 x i16> %25, %15
  %27 = bitcast <8 x i16> %26 to <4 x i32>
  %28 = add <4 x i32> %27, <i32 256, i32 undef, i32 undef, i32 undef>
  %29 = shufflevector <4 x i32> %28, <4 x i32> undef, <4 x i32> zeroinitializer
  %30 = getelementptr inbounds i8, i8* %3, i64 %18
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = insertelement <4 x i32> undef, i32 %32, i32 0
  %34 = bitcast <4 x i32> %33 to <8 x i16>
  %35 = shufflevector <8 x i16> %24, <8 x i16> %34, <8 x i32> <i32 0, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %36 = bitcast <8 x i16> %35 to <4 x i32>
  %37 = shufflevector <4 x i32> %36, <4 x i32> undef, <4 x i32> zeroinitializer
  %38 = bitcast <4 x i32> %37 to <8 x i16>
  br label %43

39:                                               ; preds = %43
  %40 = getelementptr inbounds i8, i8* %19, i64 %1
  %41 = add nuw nsw i64 %18, 1
  %42 = icmp eq i64 %41, 32
  br i1 %42, label %86, label %17

43:                                               ; preds = %43, %17
  %44 = phi i64 [ %84, %43 ], [ 0, %17 ]
  %45 = getelementptr inbounds i8, i8* %2, i64 %44
  %46 = bitcast i8* %45 to i64*
  %47 = load i64, i64* %46, align 1
  %48 = insertelement <2 x i64> undef, i64 %47, i32 0
  %49 = getelementptr inbounds i8, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @sm_weight_arrays, i64 0, i64 64), i64 %44
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %51, i32 0
  %53 = bitcast <2 x i64> %48 to <16 x i8>
  %54 = bitcast <2 x i64> %52 to <16 x i8>
  %55 = shufflevector <16 x i8> %53, <16 x i8> %54, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %56 = shufflevector <16 x i8> %55, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %57 = shufflevector <16 x i8> %55, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %58 = bitcast <16 x i8> %56 to <8 x i16>
  %59 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %58, <8 x i16> %38) #3
  %60 = bitcast <16 x i8> %57 to <8 x i16>
  %61 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %60, <8 x i16> %38) #3
  %62 = shufflevector <16 x i8> %54, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %63 = bitcast <16 x i8> %62 to <8 x i16>
  %64 = sub <8 x i16> <i16 256, i16 256, i16 256, i16 256, i16 256, i16 256, i16 256, i16 256>, %63
  %65 = mul <8 x i16> %64, %16
  %66 = shufflevector <8 x i16> %65, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %67 = shufflevector <8 x i16> %65, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %68 = add <4 x i32> %59, %29
  %69 = add <4 x i32> %61, %29
  %70 = bitcast <8 x i16> %66 to <4 x i32>
  %71 = add <4 x i32> %68, %70
  %72 = bitcast <8 x i16> %67 to <4 x i32>
  %73 = add <4 x i32> %69, %72
  %74 = ashr <4 x i32> %71, <i32 9, i32 9, i32 9, i32 9>
  %75 = ashr <4 x i32> %73, <i32 9, i32 9, i32 9, i32 9>
  %76 = bitcast <4 x i32> %74 to <8 x i16>
  %77 = bitcast <4 x i32> %75 to <8 x i16>
  %78 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %76, <8 x i16> %77) #3
  %79 = shufflevector <16 x i8> %78, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %80 = bitcast <16 x i8> %79 to <2 x i64>
  %81 = getelementptr inbounds i8, i8* %19, i64 %44
  %82 = extractelement <2 x i64> %80, i32 0
  %83 = bitcast i8* %81 to i64*
  store i64 %82, i64* %83, align 1
  %84 = add nuw nsw i64 %44, 8
  %85 = icmp ult i64 %84, 64
  br i1 %85, label %43, label %39

86:                                               ; preds = %39
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_smooth_predictor_64x16_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i8, i8* %2, i64 63
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <4 x i32> undef, i32 %7, i32 0
  %9 = bitcast <4 x i32> %8 to <16 x i8>
  %10 = shufflevector <16 x i8> %9, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %11 = getelementptr inbounds i8, i8* %3, i64 15
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = insertelement <4 x i32> undef, i32 %13, i32 0
  %15 = bitcast <4 x i32> %14 to <8 x i16>
  %16 = bitcast <16 x i8> %10 to <8 x i16>
  br label %17

17:                                               ; preds = %39, %4
  %18 = phi i64 [ 0, %4 ], [ %41, %39 ]
  %19 = phi i8* [ %0, %4 ], [ %40, %39 ]
  %20 = getelementptr inbounds i8, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @sm_weight_arrays, i64 0, i64 16), i64 %18
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %22, i32 0
  %24 = bitcast <4 x i32> %23 to <8 x i16>
  %25 = sub <8 x i16> <i16 256, i16 256, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>, %24
  %26 = mul <8 x i16> %25, %15
  %27 = bitcast <8 x i16> %26 to <4 x i32>
  %28 = add <4 x i32> %27, <i32 256, i32 undef, i32 undef, i32 undef>
  %29 = shufflevector <4 x i32> %28, <4 x i32> undef, <4 x i32> zeroinitializer
  %30 = getelementptr inbounds i8, i8* %3, i64 %18
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = insertelement <4 x i32> undef, i32 %32, i32 0
  %34 = bitcast <4 x i32> %33 to <8 x i16>
  %35 = shufflevector <8 x i16> %24, <8 x i16> %34, <8 x i32> <i32 0, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %36 = bitcast <8 x i16> %35 to <4 x i32>
  %37 = shufflevector <4 x i32> %36, <4 x i32> undef, <4 x i32> zeroinitializer
  %38 = bitcast <4 x i32> %37 to <8 x i16>
  br label %43

39:                                               ; preds = %43
  %40 = getelementptr inbounds i8, i8* %19, i64 %1
  %41 = add nuw nsw i64 %18, 1
  %42 = icmp eq i64 %41, 16
  br i1 %42, label %86, label %17

43:                                               ; preds = %43, %17
  %44 = phi i64 [ %84, %43 ], [ 0, %17 ]
  %45 = getelementptr inbounds i8, i8* %2, i64 %44
  %46 = bitcast i8* %45 to i64*
  %47 = load i64, i64* %46, align 1
  %48 = insertelement <2 x i64> undef, i64 %47, i32 0
  %49 = getelementptr inbounds i8, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @sm_weight_arrays, i64 0, i64 64), i64 %44
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %51, i32 0
  %53 = bitcast <2 x i64> %48 to <16 x i8>
  %54 = bitcast <2 x i64> %52 to <16 x i8>
  %55 = shufflevector <16 x i8> %53, <16 x i8> %54, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %56 = shufflevector <16 x i8> %55, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %57 = shufflevector <16 x i8> %55, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %58 = bitcast <16 x i8> %56 to <8 x i16>
  %59 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %58, <8 x i16> %38) #3
  %60 = bitcast <16 x i8> %57 to <8 x i16>
  %61 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %60, <8 x i16> %38) #3
  %62 = shufflevector <16 x i8> %54, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %63 = bitcast <16 x i8> %62 to <8 x i16>
  %64 = sub <8 x i16> <i16 256, i16 256, i16 256, i16 256, i16 256, i16 256, i16 256, i16 256>, %63
  %65 = mul <8 x i16> %64, %16
  %66 = shufflevector <8 x i16> %65, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %67 = shufflevector <8 x i16> %65, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %68 = add <4 x i32> %59, %29
  %69 = add <4 x i32> %61, %29
  %70 = bitcast <8 x i16> %66 to <4 x i32>
  %71 = add <4 x i32> %68, %70
  %72 = bitcast <8 x i16> %67 to <4 x i32>
  %73 = add <4 x i32> %69, %72
  %74 = ashr <4 x i32> %71, <i32 9, i32 9, i32 9, i32 9>
  %75 = ashr <4 x i32> %73, <i32 9, i32 9, i32 9, i32 9>
  %76 = bitcast <4 x i32> %74 to <8 x i16>
  %77 = bitcast <4 x i32> %75 to <8 x i16>
  %78 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %76, <8 x i16> %77) #3
  %79 = shufflevector <16 x i8> %78, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %80 = bitcast <16 x i8> %79 to <2 x i64>
  %81 = getelementptr inbounds i8, i8* %19, i64 %44
  %82 = extractelement <2 x i64> %80, i32 0
  %83 = bitcast i8* %81 to i64*
  store i64 %82, i64* %83, align 1
  %84 = add nuw nsw i64 %44, 8
  %85 = icmp ult i64 %84, 64
  br i1 %85, label %43, label %39

86:                                               ; preds = %39
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_smooth_predictor_16x64_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i8, i8* %2, i64 15
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <4 x i32> undef, i32 %7, i32 0
  %9 = bitcast <4 x i32> %8 to <16 x i8>
  %10 = shufflevector <16 x i8> %9, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %11 = getelementptr inbounds i8, i8* %3, i64 63
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = insertelement <4 x i32> undef, i32 %13, i32 0
  %15 = bitcast <4 x i32> %14 to <8 x i16>
  %16 = bitcast <16 x i8> %10 to <8 x i16>
  %17 = bitcast i8* %2 to i64*
  %18 = mul <8 x i16> %16, <i16 1, i16 31, i16 60, i16 86, i16 111, i16 133, i16 154, i16 172>
  %19 = shufflevector <8 x i16> %18, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %20 = shufflevector <8 x i16> %18, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %21 = bitcast <8 x i16> %19 to <4 x i32>
  %22 = bitcast <8 x i16> %20 to <4 x i32>
  %23 = getelementptr inbounds i8, i8* %2, i64 8
  %24 = bitcast i8* %23 to i64*
  %25 = mul <8 x i16> %16, <i16 188, i16 202, i16 213, i16 223, i16 230, i16 236, i16 239, i16 240>
  %26 = shufflevector <8 x i16> %25, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %27 = shufflevector <8 x i16> %25, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %28 = bitcast <8 x i16> %26 to <4 x i32>
  %29 = bitcast <8 x i16> %27 to <4 x i32>
  br label %30

30:                                               ; preds = %30, %4
  %31 = phi i64 [ 0, %4 ], [ %100, %30 ]
  %32 = phi i8* [ %0, %4 ], [ %99, %30 ]
  %33 = getelementptr inbounds i8, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @sm_weight_arrays, i64 0, i64 64), i64 %31
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %35, i32 0
  %37 = bitcast <4 x i32> %36 to <8 x i16>
  %38 = sub <8 x i16> <i16 256, i16 256, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>, %37
  %39 = mul <8 x i16> %38, %15
  %40 = bitcast <8 x i16> %39 to <4 x i32>
  %41 = add <4 x i32> %40, <i32 256, i32 undef, i32 undef, i32 undef>
  %42 = shufflevector <4 x i32> %41, <4 x i32> undef, <4 x i32> zeroinitializer
  %43 = getelementptr inbounds i8, i8* %3, i64 %31
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = insertelement <4 x i32> undef, i32 %45, i32 0
  %47 = bitcast <4 x i32> %46 to <8 x i16>
  %48 = shufflevector <8 x i16> %37, <8 x i16> %47, <8 x i32> <i32 0, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %49 = bitcast <8 x i16> %48 to <4 x i32>
  %50 = shufflevector <4 x i32> %49, <4 x i32> undef, <4 x i32> zeroinitializer
  %51 = bitcast <4 x i32> %50 to <8 x i16>
  %52 = load i64, i64* %17, align 1
  %53 = insertelement <2 x i64> undef, i64 %52, i32 0
  %54 = bitcast <2 x i64> %53 to <16 x i8>
  %55 = shufflevector <16 x i8> %54, <16 x i8> <i8 -1, i8 -31, i8 -60, i8 -86, i8 -111, i8 123, i8 102, i8 84, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %56 = shufflevector <16 x i8> %55, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %57 = shufflevector <16 x i8> %55, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %58 = bitcast <16 x i8> %56 to <8 x i16>
  %59 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %58, <8 x i16> %51) #3
  %60 = bitcast <16 x i8> %57 to <8 x i16>
  %61 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %60, <8 x i16> %51) #3
  %62 = add <4 x i32> %59, %42
  %63 = add <4 x i32> %61, %42
  %64 = add <4 x i32> %62, %21
  %65 = add <4 x i32> %63, %22
  %66 = ashr <4 x i32> %64, <i32 9, i32 9, i32 9, i32 9>
  %67 = ashr <4 x i32> %65, <i32 9, i32 9, i32 9, i32 9>
  %68 = bitcast <4 x i32> %66 to <8 x i16>
  %69 = bitcast <4 x i32> %67 to <8 x i16>
  %70 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %68, <8 x i16> %69) #3
  %71 = shufflevector <16 x i8> %70, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %72 = bitcast <16 x i8> %71 to <2 x i64>
  %73 = extractelement <2 x i64> %72, i32 0
  %74 = bitcast i8* %32 to i64*
  store i64 %73, i64* %74, align 1
  %75 = load i64, i64* %24, align 1
  %76 = insertelement <2 x i64> undef, i64 %75, i32 0
  %77 = bitcast <2 x i64> %76 to <16 x i8>
  %78 = shufflevector <16 x i8> %77, <16 x i8> <i8 68, i8 54, i8 43, i8 33, i8 26, i8 20, i8 17, i8 16, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %79 = shufflevector <16 x i8> %78, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %80 = shufflevector <16 x i8> %78, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %81 = bitcast <16 x i8> %79 to <8 x i16>
  %82 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %81, <8 x i16> %51) #3
  %83 = bitcast <16 x i8> %80 to <8 x i16>
  %84 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %83, <8 x i16> %51) #3
  %85 = add <4 x i32> %82, %42
  %86 = add <4 x i32> %84, %42
  %87 = add <4 x i32> %85, %28
  %88 = add <4 x i32> %86, %29
  %89 = ashr <4 x i32> %87, <i32 9, i32 9, i32 9, i32 9>
  %90 = ashr <4 x i32> %88, <i32 9, i32 9, i32 9, i32 9>
  %91 = bitcast <4 x i32> %89 to <8 x i16>
  %92 = bitcast <4 x i32> %90 to <8 x i16>
  %93 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %91, <8 x i16> %92) #3
  %94 = shufflevector <16 x i8> %93, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %95 = bitcast <16 x i8> %94 to <2 x i64>
  %96 = getelementptr inbounds i8, i8* %32, i64 8
  %97 = extractelement <2 x i64> %95, i32 0
  %98 = bitcast i8* %96 to i64*
  store i64 %97, i64* %98, align 1
  %99 = getelementptr inbounds i8, i8* %32, i64 %1
  %100 = add nuw nsw i64 %31, 1
  %101 = icmp eq i64 %100, 64
  br i1 %101, label %102, label %30

102:                                              ; preds = %30
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_smooth_v_predictor_4x4_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %2 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = insertelement <4 x i32> undef, i32 %6, i32 0
  %8 = getelementptr inbounds i8, i8* %3, i64 3
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i16
  %11 = insertelement <8 x i16> undef, i16 %10, i32 0
  %12 = shufflevector <8 x i16> %11, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %13 = bitcast <4 x i32> %7 to <16 x i8>
  %14 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <16 x i8> %14 to <8 x i16>
  %16 = shufflevector <8 x i16> %15, <8 x i16> %12, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %17 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 255, i16 1, i16 255, i16 1, i16 255, i16 1, i16 255, i16 1>) #3
  %18 = add <4 x i32> %17, <i32 128, i32 128, i32 128, i32 128>
  %19 = ashr <4 x i32> %18, <i32 8, i32 8, i32 8, i32 8>
  %20 = bitcast <4 x i32> %19 to <16 x i8>
  %21 = shufflevector <16 x i8> %20, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %22 = bitcast <16 x i8> %21 to <4 x i32>
  %23 = extractelement <4 x i32> %22, i32 0
  %24 = bitcast i8* %0 to i32*
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds i8, i8* %0, i64 %1
  %26 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 149, i16 107, i16 149, i16 107, i16 149, i16 107, i16 149, i16 107>) #3
  %27 = add <4 x i32> %26, <i32 128, i32 128, i32 128, i32 128>
  %28 = ashr <4 x i32> %27, <i32 8, i32 8, i32 8, i32 8>
  %29 = bitcast <4 x i32> %28 to <16 x i8>
  %30 = shufflevector <16 x i8> %29, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %31 = bitcast <16 x i8> %30 to <4 x i32>
  %32 = extractelement <4 x i32> %31, i32 0
  %33 = bitcast i8* %25 to i32*
  store i32 %32, i32* %33, align 4
  %34 = getelementptr inbounds i8, i8* %25, i64 %1
  %35 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 85, i16 171, i16 85, i16 171, i16 85, i16 171, i16 85, i16 171>) #3
  %36 = add <4 x i32> %35, <i32 128, i32 128, i32 128, i32 128>
  %37 = ashr <4 x i32> %36, <i32 8, i32 8, i32 8, i32 8>
  %38 = bitcast <4 x i32> %37 to <16 x i8>
  %39 = shufflevector <16 x i8> %38, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %40 = bitcast <16 x i8> %39 to <4 x i32>
  %41 = extractelement <4 x i32> %40, i32 0
  %42 = bitcast i8* %34 to i32*
  store i32 %41, i32* %42, align 4
  %43 = getelementptr inbounds i8, i8* %34, i64 %1
  %44 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 64, i16 192, i16 64, i16 192, i16 64, i16 192, i16 64, i16 192>) #3
  %45 = add <4 x i32> %44, <i32 128, i32 128, i32 128, i32 128>
  %46 = ashr <4 x i32> %45, <i32 8, i32 8, i32 8, i32 8>
  %47 = bitcast <4 x i32> %46 to <16 x i8>
  %48 = shufflevector <16 x i8> %47, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %49 = bitcast <16 x i8> %48 to <4 x i32>
  %50 = extractelement <4 x i32> %49, i32 0
  %51 = bitcast i8* %43 to i32*
  store i32 %50, i32* %51, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_smooth_v_predictor_4x8_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %2 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = insertelement <4 x i32> undef, i32 %6, i32 0
  %8 = getelementptr inbounds i8, i8* %3, i64 7
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i16
  %11 = insertelement <8 x i16> undef, i16 %10, i32 0
  %12 = shufflevector <8 x i16> %11, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %13 = bitcast <4 x i32> %7 to <16 x i8>
  %14 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <16 x i8> %14 to <8 x i16>
  %16 = shufflevector <8 x i16> %15, <8 x i16> %12, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %17 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 255, i16 1, i16 255, i16 1, i16 255, i16 1, i16 255, i16 1>) #3
  %18 = add <4 x i32> %17, <i32 128, i32 128, i32 128, i32 128>
  %19 = ashr <4 x i32> %18, <i32 8, i32 8, i32 8, i32 8>
  %20 = bitcast <4 x i32> %19 to <16 x i8>
  %21 = shufflevector <16 x i8> %20, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %22 = bitcast <16 x i8> %21 to <4 x i32>
  %23 = extractelement <4 x i32> %22, i32 0
  %24 = bitcast i8* %0 to i32*
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds i8, i8* %0, i64 %1
  %26 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 197, i16 59, i16 197, i16 59, i16 197, i16 59, i16 197, i16 59>) #3
  %27 = add <4 x i32> %26, <i32 128, i32 128, i32 128, i32 128>
  %28 = ashr <4 x i32> %27, <i32 8, i32 8, i32 8, i32 8>
  %29 = bitcast <4 x i32> %28 to <16 x i8>
  %30 = shufflevector <16 x i8> %29, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %31 = bitcast <16 x i8> %30 to <4 x i32>
  %32 = extractelement <4 x i32> %31, i32 0
  %33 = bitcast i8* %25 to i32*
  store i32 %32, i32* %33, align 4
  %34 = getelementptr inbounds i8, i8* %25, i64 %1
  %35 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 146, i16 110, i16 146, i16 110, i16 146, i16 110, i16 146, i16 110>) #3
  %36 = add <4 x i32> %35, <i32 128, i32 128, i32 128, i32 128>
  %37 = ashr <4 x i32> %36, <i32 8, i32 8, i32 8, i32 8>
  %38 = bitcast <4 x i32> %37 to <16 x i8>
  %39 = shufflevector <16 x i8> %38, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %40 = bitcast <16 x i8> %39 to <4 x i32>
  %41 = extractelement <4 x i32> %40, i32 0
  %42 = bitcast i8* %34 to i32*
  store i32 %41, i32* %42, align 4
  %43 = getelementptr inbounds i8, i8* %34, i64 %1
  %44 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 105, i16 151, i16 105, i16 151, i16 105, i16 151, i16 105, i16 151>) #3
  %45 = add <4 x i32> %44, <i32 128, i32 128, i32 128, i32 128>
  %46 = ashr <4 x i32> %45, <i32 8, i32 8, i32 8, i32 8>
  %47 = bitcast <4 x i32> %46 to <16 x i8>
  %48 = shufflevector <16 x i8> %47, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %49 = bitcast <16 x i8> %48 to <4 x i32>
  %50 = extractelement <4 x i32> %49, i32 0
  %51 = bitcast i8* %43 to i32*
  store i32 %50, i32* %51, align 4
  %52 = getelementptr inbounds i8, i8* %43, i64 %1
  %53 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 73, i16 183, i16 73, i16 183, i16 73, i16 183, i16 73, i16 183>) #3
  %54 = add <4 x i32> %53, <i32 128, i32 128, i32 128, i32 128>
  %55 = ashr <4 x i32> %54, <i32 8, i32 8, i32 8, i32 8>
  %56 = bitcast <4 x i32> %55 to <16 x i8>
  %57 = shufflevector <16 x i8> %56, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %58 = bitcast <16 x i8> %57 to <4 x i32>
  %59 = extractelement <4 x i32> %58, i32 0
  %60 = bitcast i8* %52 to i32*
  store i32 %59, i32* %60, align 4
  %61 = getelementptr inbounds i8, i8* %52, i64 %1
  %62 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 50, i16 206, i16 50, i16 206, i16 50, i16 206, i16 50, i16 206>) #3
  %63 = add <4 x i32> %62, <i32 128, i32 128, i32 128, i32 128>
  %64 = ashr <4 x i32> %63, <i32 8, i32 8, i32 8, i32 8>
  %65 = bitcast <4 x i32> %64 to <16 x i8>
  %66 = shufflevector <16 x i8> %65, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %67 = bitcast <16 x i8> %66 to <4 x i32>
  %68 = extractelement <4 x i32> %67, i32 0
  %69 = bitcast i8* %61 to i32*
  store i32 %68, i32* %69, align 4
  %70 = getelementptr inbounds i8, i8* %61, i64 %1
  %71 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 37, i16 219, i16 37, i16 219, i16 37, i16 219, i16 37, i16 219>) #3
  %72 = add <4 x i32> %71, <i32 128, i32 128, i32 128, i32 128>
  %73 = ashr <4 x i32> %72, <i32 8, i32 8, i32 8, i32 8>
  %74 = bitcast <4 x i32> %73 to <16 x i8>
  %75 = shufflevector <16 x i8> %74, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %76 = bitcast <16 x i8> %75 to <4 x i32>
  %77 = extractelement <4 x i32> %76, i32 0
  %78 = bitcast i8* %70 to i32*
  store i32 %77, i32* %78, align 4
  %79 = getelementptr inbounds i8, i8* %70, i64 %1
  %80 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 32, i16 224, i16 32, i16 224, i16 32, i16 224, i16 32, i16 224>) #3
  %81 = add <4 x i32> %80, <i32 128, i32 128, i32 128, i32 128>
  %82 = ashr <4 x i32> %81, <i32 8, i32 8, i32 8, i32 8>
  %83 = bitcast <4 x i32> %82 to <16 x i8>
  %84 = shufflevector <16 x i8> %83, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %85 = bitcast <16 x i8> %84 to <4 x i32>
  %86 = extractelement <4 x i32> %85, i32 0
  %87 = bitcast i8* %79 to i32*
  store i32 %86, i32* %87, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_smooth_v_predictor_4x16_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %2 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = insertelement <4 x i32> undef, i32 %6, i32 0
  %8 = getelementptr inbounds i8, i8* %3, i64 15
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i16
  %11 = insertelement <8 x i16> undef, i16 %10, i32 0
  %12 = shufflevector <8 x i16> %11, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %13 = bitcast <4 x i32> %7 to <16 x i8>
  %14 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <16 x i8> %14 to <8 x i16>
  %16 = shufflevector <8 x i16> %15, <8 x i16> %12, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %17 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 255, i16 1, i16 255, i16 1, i16 255, i16 1, i16 255, i16 1>) #3
  %18 = add <4 x i32> %17, <i32 128, i32 128, i32 128, i32 128>
  %19 = ashr <4 x i32> %18, <i32 8, i32 8, i32 8, i32 8>
  %20 = bitcast <4 x i32> %19 to <16 x i8>
  %21 = shufflevector <16 x i8> %20, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %22 = bitcast <16 x i8> %21 to <4 x i32>
  %23 = extractelement <4 x i32> %22, i32 0
  %24 = bitcast i8* %0 to i32*
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds i8, i8* %0, i64 %1
  %26 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 225, i16 31, i16 225, i16 31, i16 225, i16 31, i16 225, i16 31>) #3
  %27 = add <4 x i32> %26, <i32 128, i32 128, i32 128, i32 128>
  %28 = ashr <4 x i32> %27, <i32 8, i32 8, i32 8, i32 8>
  %29 = bitcast <4 x i32> %28 to <16 x i8>
  %30 = shufflevector <16 x i8> %29, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %31 = bitcast <16 x i8> %30 to <4 x i32>
  %32 = extractelement <4 x i32> %31, i32 0
  %33 = bitcast i8* %25 to i32*
  store i32 %32, i32* %33, align 4
  %34 = getelementptr inbounds i8, i8* %25, i64 %1
  %35 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 196, i16 60, i16 196, i16 60, i16 196, i16 60, i16 196, i16 60>) #3
  %36 = add <4 x i32> %35, <i32 128, i32 128, i32 128, i32 128>
  %37 = ashr <4 x i32> %36, <i32 8, i32 8, i32 8, i32 8>
  %38 = bitcast <4 x i32> %37 to <16 x i8>
  %39 = shufflevector <16 x i8> %38, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %40 = bitcast <16 x i8> %39 to <4 x i32>
  %41 = extractelement <4 x i32> %40, i32 0
  %42 = bitcast i8* %34 to i32*
  store i32 %41, i32* %42, align 4
  %43 = getelementptr inbounds i8, i8* %34, i64 %1
  %44 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 170, i16 86, i16 170, i16 86, i16 170, i16 86, i16 170, i16 86>) #3
  %45 = add <4 x i32> %44, <i32 128, i32 128, i32 128, i32 128>
  %46 = ashr <4 x i32> %45, <i32 8, i32 8, i32 8, i32 8>
  %47 = bitcast <4 x i32> %46 to <16 x i8>
  %48 = shufflevector <16 x i8> %47, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %49 = bitcast <16 x i8> %48 to <4 x i32>
  %50 = extractelement <4 x i32> %49, i32 0
  %51 = bitcast i8* %43 to i32*
  store i32 %50, i32* %51, align 4
  %52 = getelementptr inbounds i8, i8* %43, i64 %1
  %53 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 145, i16 111, i16 145, i16 111, i16 145, i16 111, i16 145, i16 111>) #3
  %54 = add <4 x i32> %53, <i32 128, i32 128, i32 128, i32 128>
  %55 = ashr <4 x i32> %54, <i32 8, i32 8, i32 8, i32 8>
  %56 = bitcast <4 x i32> %55 to <16 x i8>
  %57 = shufflevector <16 x i8> %56, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %58 = bitcast <16 x i8> %57 to <4 x i32>
  %59 = extractelement <4 x i32> %58, i32 0
  %60 = bitcast i8* %52 to i32*
  store i32 %59, i32* %60, align 4
  %61 = getelementptr inbounds i8, i8* %52, i64 %1
  %62 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 123, i16 133, i16 123, i16 133, i16 123, i16 133, i16 123, i16 133>) #3
  %63 = add <4 x i32> %62, <i32 128, i32 128, i32 128, i32 128>
  %64 = ashr <4 x i32> %63, <i32 8, i32 8, i32 8, i32 8>
  %65 = bitcast <4 x i32> %64 to <16 x i8>
  %66 = shufflevector <16 x i8> %65, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %67 = bitcast <16 x i8> %66 to <4 x i32>
  %68 = extractelement <4 x i32> %67, i32 0
  %69 = bitcast i8* %61 to i32*
  store i32 %68, i32* %69, align 4
  %70 = getelementptr inbounds i8, i8* %61, i64 %1
  %71 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 102, i16 154, i16 102, i16 154, i16 102, i16 154, i16 102, i16 154>) #3
  %72 = add <4 x i32> %71, <i32 128, i32 128, i32 128, i32 128>
  %73 = ashr <4 x i32> %72, <i32 8, i32 8, i32 8, i32 8>
  %74 = bitcast <4 x i32> %73 to <16 x i8>
  %75 = shufflevector <16 x i8> %74, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %76 = bitcast <16 x i8> %75 to <4 x i32>
  %77 = extractelement <4 x i32> %76, i32 0
  %78 = bitcast i8* %70 to i32*
  store i32 %77, i32* %78, align 4
  %79 = getelementptr inbounds i8, i8* %70, i64 %1
  %80 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 84, i16 172, i16 84, i16 172, i16 84, i16 172, i16 84, i16 172>) #3
  %81 = add <4 x i32> %80, <i32 128, i32 128, i32 128, i32 128>
  %82 = ashr <4 x i32> %81, <i32 8, i32 8, i32 8, i32 8>
  %83 = bitcast <4 x i32> %82 to <16 x i8>
  %84 = shufflevector <16 x i8> %83, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %85 = bitcast <16 x i8> %84 to <4 x i32>
  %86 = extractelement <4 x i32> %85, i32 0
  %87 = bitcast i8* %79 to i32*
  store i32 %86, i32* %87, align 4
  %88 = shl i64 %1, 3
  %89 = getelementptr inbounds i8, i8* %0, i64 %88
  %90 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 68, i16 188, i16 68, i16 188, i16 68, i16 188, i16 68, i16 188>) #3
  %91 = add <4 x i32> %90, <i32 128, i32 128, i32 128, i32 128>
  %92 = ashr <4 x i32> %91, <i32 8, i32 8, i32 8, i32 8>
  %93 = bitcast <4 x i32> %92 to <16 x i8>
  %94 = shufflevector <16 x i8> %93, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %95 = bitcast <16 x i8> %94 to <4 x i32>
  %96 = extractelement <4 x i32> %95, i32 0
  %97 = bitcast i8* %89 to i32*
  store i32 %96, i32* %97, align 4
  %98 = getelementptr inbounds i8, i8* %89, i64 %1
  %99 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 54, i16 202, i16 54, i16 202, i16 54, i16 202, i16 54, i16 202>) #3
  %100 = add <4 x i32> %99, <i32 128, i32 128, i32 128, i32 128>
  %101 = ashr <4 x i32> %100, <i32 8, i32 8, i32 8, i32 8>
  %102 = bitcast <4 x i32> %101 to <16 x i8>
  %103 = shufflevector <16 x i8> %102, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %104 = bitcast <16 x i8> %103 to <4 x i32>
  %105 = extractelement <4 x i32> %104, i32 0
  %106 = bitcast i8* %98 to i32*
  store i32 %105, i32* %106, align 4
  %107 = getelementptr inbounds i8, i8* %98, i64 %1
  %108 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 43, i16 213, i16 43, i16 213, i16 43, i16 213, i16 43, i16 213>) #3
  %109 = add <4 x i32> %108, <i32 128, i32 128, i32 128, i32 128>
  %110 = ashr <4 x i32> %109, <i32 8, i32 8, i32 8, i32 8>
  %111 = bitcast <4 x i32> %110 to <16 x i8>
  %112 = shufflevector <16 x i8> %111, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %113 = bitcast <16 x i8> %112 to <4 x i32>
  %114 = extractelement <4 x i32> %113, i32 0
  %115 = bitcast i8* %107 to i32*
  store i32 %114, i32* %115, align 4
  %116 = getelementptr inbounds i8, i8* %107, i64 %1
  %117 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 33, i16 223, i16 33, i16 223, i16 33, i16 223, i16 33, i16 223>) #3
  %118 = add <4 x i32> %117, <i32 128, i32 128, i32 128, i32 128>
  %119 = ashr <4 x i32> %118, <i32 8, i32 8, i32 8, i32 8>
  %120 = bitcast <4 x i32> %119 to <16 x i8>
  %121 = shufflevector <16 x i8> %120, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %122 = bitcast <16 x i8> %121 to <4 x i32>
  %123 = extractelement <4 x i32> %122, i32 0
  %124 = bitcast i8* %116 to i32*
  store i32 %123, i32* %124, align 4
  %125 = getelementptr inbounds i8, i8* %116, i64 %1
  %126 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 26, i16 230, i16 26, i16 230, i16 26, i16 230, i16 26, i16 230>) #3
  %127 = add <4 x i32> %126, <i32 128, i32 128, i32 128, i32 128>
  %128 = ashr <4 x i32> %127, <i32 8, i32 8, i32 8, i32 8>
  %129 = bitcast <4 x i32> %128 to <16 x i8>
  %130 = shufflevector <16 x i8> %129, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %131 = bitcast <16 x i8> %130 to <4 x i32>
  %132 = extractelement <4 x i32> %131, i32 0
  %133 = bitcast i8* %125 to i32*
  store i32 %132, i32* %133, align 4
  %134 = getelementptr inbounds i8, i8* %125, i64 %1
  %135 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 20, i16 236, i16 20, i16 236, i16 20, i16 236, i16 20, i16 236>) #3
  %136 = add <4 x i32> %135, <i32 128, i32 128, i32 128, i32 128>
  %137 = ashr <4 x i32> %136, <i32 8, i32 8, i32 8, i32 8>
  %138 = bitcast <4 x i32> %137 to <16 x i8>
  %139 = shufflevector <16 x i8> %138, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %140 = bitcast <16 x i8> %139 to <4 x i32>
  %141 = extractelement <4 x i32> %140, i32 0
  %142 = bitcast i8* %134 to i32*
  store i32 %141, i32* %142, align 4
  %143 = getelementptr inbounds i8, i8* %134, i64 %1
  %144 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 17, i16 239, i16 17, i16 239, i16 17, i16 239, i16 17, i16 239>) #3
  %145 = add <4 x i32> %144, <i32 128, i32 128, i32 128, i32 128>
  %146 = ashr <4 x i32> %145, <i32 8, i32 8, i32 8, i32 8>
  %147 = bitcast <4 x i32> %146 to <16 x i8>
  %148 = shufflevector <16 x i8> %147, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %149 = bitcast <16 x i8> %148 to <4 x i32>
  %150 = extractelement <4 x i32> %149, i32 0
  %151 = bitcast i8* %143 to i32*
  store i32 %150, i32* %151, align 4
  %152 = getelementptr inbounds i8, i8* %143, i64 %1
  %153 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 16, i16 240, i16 16, i16 240, i16 16, i16 240, i16 16, i16 240>) #3
  %154 = add <4 x i32> %153, <i32 128, i32 128, i32 128, i32 128>
  %155 = ashr <4 x i32> %154, <i32 8, i32 8, i32 8, i32 8>
  %156 = bitcast <4 x i32> %155 to <16 x i8>
  %157 = shufflevector <16 x i8> %156, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %158 = bitcast <16 x i8> %157 to <4 x i32>
  %159 = extractelement <4 x i32> %158, i32 0
  %160 = bitcast i8* %152 to i32*
  store i32 %159, i32* %160, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_smooth_v_predictor_8x4_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %2 to i64*
  %6 = load i64, i64* %5, align 1
  %7 = insertelement <2 x i64> undef, i64 %6, i32 0
  %8 = getelementptr inbounds i8, i8* %3, i64 3
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i16
  %11 = insertelement <8 x i16> undef, i16 %10, i32 0
  %12 = shufflevector <8 x i16> %11, <8 x i16> undef, <8 x i32> zeroinitializer
  %13 = bitcast <2 x i64> %7 to <16 x i8>
  %14 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %15 = bitcast <16 x i8> %14 to <8 x i16>
  %16 = shufflevector <8 x i16> %15, <8 x i16> %12, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %17 = shufflevector <8 x i16> %15, <8 x i16> %12, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %18 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 255, i16 1, i16 255, i16 1, i16 255, i16 1, i16 255, i16 1>) #3
  %19 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 255, i16 1, i16 255, i16 1, i16 255, i16 1, i16 255, i16 1>) #3
  %20 = add <4 x i32> %18, <i32 128, i32 128, i32 128, i32 128>
  %21 = ashr <4 x i32> %20, <i32 8, i32 8, i32 8, i32 8>
  %22 = add <4 x i32> %19, <i32 128, i32 128, i32 128, i32 128>
  %23 = ashr <4 x i32> %22, <i32 8, i32 8, i32 8, i32 8>
  %24 = bitcast <4 x i32> %21 to <8 x i16>
  %25 = bitcast <4 x i32> %23 to <8 x i16>
  %26 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %24, <8 x i16> %25) #3
  %27 = shufflevector <16 x i8> %26, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %28 = bitcast <16 x i8> %27 to <2 x i64>
  %29 = extractelement <2 x i64> %28, i32 0
  %30 = bitcast i8* %0 to i64*
  store i64 %29, i64* %30, align 1
  %31 = getelementptr inbounds i8, i8* %0, i64 %1
  %32 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 149, i16 107, i16 149, i16 107, i16 149, i16 107, i16 149, i16 107>) #3
  %33 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 149, i16 107, i16 149, i16 107, i16 149, i16 107, i16 149, i16 107>) #3
  %34 = add <4 x i32> %32, <i32 128, i32 128, i32 128, i32 128>
  %35 = ashr <4 x i32> %34, <i32 8, i32 8, i32 8, i32 8>
  %36 = add <4 x i32> %33, <i32 128, i32 128, i32 128, i32 128>
  %37 = ashr <4 x i32> %36, <i32 8, i32 8, i32 8, i32 8>
  %38 = bitcast <4 x i32> %35 to <8 x i16>
  %39 = bitcast <4 x i32> %37 to <8 x i16>
  %40 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %38, <8 x i16> %39) #3
  %41 = shufflevector <16 x i8> %40, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %42 = bitcast <16 x i8> %41 to <2 x i64>
  %43 = extractelement <2 x i64> %42, i32 0
  %44 = bitcast i8* %31 to i64*
  store i64 %43, i64* %44, align 1
  %45 = getelementptr inbounds i8, i8* %31, i64 %1
  %46 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 85, i16 171, i16 85, i16 171, i16 85, i16 171, i16 85, i16 171>) #3
  %47 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 85, i16 171, i16 85, i16 171, i16 85, i16 171, i16 85, i16 171>) #3
  %48 = add <4 x i32> %46, <i32 128, i32 128, i32 128, i32 128>
  %49 = ashr <4 x i32> %48, <i32 8, i32 8, i32 8, i32 8>
  %50 = add <4 x i32> %47, <i32 128, i32 128, i32 128, i32 128>
  %51 = ashr <4 x i32> %50, <i32 8, i32 8, i32 8, i32 8>
  %52 = bitcast <4 x i32> %49 to <8 x i16>
  %53 = bitcast <4 x i32> %51 to <8 x i16>
  %54 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %52, <8 x i16> %53) #3
  %55 = shufflevector <16 x i8> %54, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %56 = bitcast <16 x i8> %55 to <2 x i64>
  %57 = extractelement <2 x i64> %56, i32 0
  %58 = bitcast i8* %45 to i64*
  store i64 %57, i64* %58, align 1
  %59 = getelementptr inbounds i8, i8* %45, i64 %1
  %60 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 64, i16 192, i16 64, i16 192, i16 64, i16 192, i16 64, i16 192>) #3
  %61 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 64, i16 192, i16 64, i16 192, i16 64, i16 192, i16 64, i16 192>) #3
  %62 = add <4 x i32> %60, <i32 128, i32 128, i32 128, i32 128>
  %63 = ashr <4 x i32> %62, <i32 8, i32 8, i32 8, i32 8>
  %64 = add <4 x i32> %61, <i32 128, i32 128, i32 128, i32 128>
  %65 = ashr <4 x i32> %64, <i32 8, i32 8, i32 8, i32 8>
  %66 = bitcast <4 x i32> %63 to <8 x i16>
  %67 = bitcast <4 x i32> %65 to <8 x i16>
  %68 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %66, <8 x i16> %67) #3
  %69 = shufflevector <16 x i8> %68, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %70 = bitcast <16 x i8> %69 to <2 x i64>
  %71 = extractelement <2 x i64> %70, i32 0
  %72 = bitcast i8* %59 to i64*
  store i64 %71, i64* %72, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_smooth_v_predictor_8x8_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %2 to i64*
  %6 = load i64, i64* %5, align 1
  %7 = insertelement <2 x i64> undef, i64 %6, i32 0
  %8 = getelementptr inbounds i8, i8* %3, i64 7
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i16
  %11 = insertelement <8 x i16> undef, i16 %10, i32 0
  %12 = shufflevector <8 x i16> %11, <8 x i16> undef, <8 x i32> zeroinitializer
  %13 = bitcast <2 x i64> %7 to <16 x i8>
  %14 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %15 = bitcast <16 x i8> %14 to <8 x i16>
  %16 = shufflevector <8 x i16> %15, <8 x i16> %12, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %17 = shufflevector <8 x i16> %15, <8 x i16> %12, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %18 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 255, i16 1, i16 255, i16 1, i16 255, i16 1, i16 255, i16 1>) #3
  %19 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 255, i16 1, i16 255, i16 1, i16 255, i16 1, i16 255, i16 1>) #3
  %20 = add <4 x i32> %18, <i32 128, i32 128, i32 128, i32 128>
  %21 = ashr <4 x i32> %20, <i32 8, i32 8, i32 8, i32 8>
  %22 = add <4 x i32> %19, <i32 128, i32 128, i32 128, i32 128>
  %23 = ashr <4 x i32> %22, <i32 8, i32 8, i32 8, i32 8>
  %24 = bitcast <4 x i32> %21 to <8 x i16>
  %25 = bitcast <4 x i32> %23 to <8 x i16>
  %26 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %24, <8 x i16> %25) #3
  %27 = shufflevector <16 x i8> %26, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %28 = bitcast <16 x i8> %27 to <2 x i64>
  %29 = extractelement <2 x i64> %28, i32 0
  %30 = bitcast i8* %0 to i64*
  store i64 %29, i64* %30, align 1
  %31 = getelementptr inbounds i8, i8* %0, i64 %1
  %32 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 197, i16 59, i16 197, i16 59, i16 197, i16 59, i16 197, i16 59>) #3
  %33 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 197, i16 59, i16 197, i16 59, i16 197, i16 59, i16 197, i16 59>) #3
  %34 = add <4 x i32> %32, <i32 128, i32 128, i32 128, i32 128>
  %35 = ashr <4 x i32> %34, <i32 8, i32 8, i32 8, i32 8>
  %36 = add <4 x i32> %33, <i32 128, i32 128, i32 128, i32 128>
  %37 = ashr <4 x i32> %36, <i32 8, i32 8, i32 8, i32 8>
  %38 = bitcast <4 x i32> %35 to <8 x i16>
  %39 = bitcast <4 x i32> %37 to <8 x i16>
  %40 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %38, <8 x i16> %39) #3
  %41 = shufflevector <16 x i8> %40, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %42 = bitcast <16 x i8> %41 to <2 x i64>
  %43 = extractelement <2 x i64> %42, i32 0
  %44 = bitcast i8* %31 to i64*
  store i64 %43, i64* %44, align 1
  %45 = getelementptr inbounds i8, i8* %31, i64 %1
  %46 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 146, i16 110, i16 146, i16 110, i16 146, i16 110, i16 146, i16 110>) #3
  %47 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 146, i16 110, i16 146, i16 110, i16 146, i16 110, i16 146, i16 110>) #3
  %48 = add <4 x i32> %46, <i32 128, i32 128, i32 128, i32 128>
  %49 = ashr <4 x i32> %48, <i32 8, i32 8, i32 8, i32 8>
  %50 = add <4 x i32> %47, <i32 128, i32 128, i32 128, i32 128>
  %51 = ashr <4 x i32> %50, <i32 8, i32 8, i32 8, i32 8>
  %52 = bitcast <4 x i32> %49 to <8 x i16>
  %53 = bitcast <4 x i32> %51 to <8 x i16>
  %54 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %52, <8 x i16> %53) #3
  %55 = shufflevector <16 x i8> %54, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %56 = bitcast <16 x i8> %55 to <2 x i64>
  %57 = extractelement <2 x i64> %56, i32 0
  %58 = bitcast i8* %45 to i64*
  store i64 %57, i64* %58, align 1
  %59 = getelementptr inbounds i8, i8* %45, i64 %1
  %60 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 105, i16 151, i16 105, i16 151, i16 105, i16 151, i16 105, i16 151>) #3
  %61 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 105, i16 151, i16 105, i16 151, i16 105, i16 151, i16 105, i16 151>) #3
  %62 = add <4 x i32> %60, <i32 128, i32 128, i32 128, i32 128>
  %63 = ashr <4 x i32> %62, <i32 8, i32 8, i32 8, i32 8>
  %64 = add <4 x i32> %61, <i32 128, i32 128, i32 128, i32 128>
  %65 = ashr <4 x i32> %64, <i32 8, i32 8, i32 8, i32 8>
  %66 = bitcast <4 x i32> %63 to <8 x i16>
  %67 = bitcast <4 x i32> %65 to <8 x i16>
  %68 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %66, <8 x i16> %67) #3
  %69 = shufflevector <16 x i8> %68, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %70 = bitcast <16 x i8> %69 to <2 x i64>
  %71 = extractelement <2 x i64> %70, i32 0
  %72 = bitcast i8* %59 to i64*
  store i64 %71, i64* %72, align 1
  %73 = getelementptr inbounds i8, i8* %59, i64 %1
  %74 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 73, i16 183, i16 73, i16 183, i16 73, i16 183, i16 73, i16 183>) #3
  %75 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 73, i16 183, i16 73, i16 183, i16 73, i16 183, i16 73, i16 183>) #3
  %76 = add <4 x i32> %74, <i32 128, i32 128, i32 128, i32 128>
  %77 = ashr <4 x i32> %76, <i32 8, i32 8, i32 8, i32 8>
  %78 = add <4 x i32> %75, <i32 128, i32 128, i32 128, i32 128>
  %79 = ashr <4 x i32> %78, <i32 8, i32 8, i32 8, i32 8>
  %80 = bitcast <4 x i32> %77 to <8 x i16>
  %81 = bitcast <4 x i32> %79 to <8 x i16>
  %82 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %80, <8 x i16> %81) #3
  %83 = shufflevector <16 x i8> %82, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %84 = bitcast <16 x i8> %83 to <2 x i64>
  %85 = extractelement <2 x i64> %84, i32 0
  %86 = bitcast i8* %73 to i64*
  store i64 %85, i64* %86, align 1
  %87 = getelementptr inbounds i8, i8* %73, i64 %1
  %88 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 50, i16 206, i16 50, i16 206, i16 50, i16 206, i16 50, i16 206>) #3
  %89 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 50, i16 206, i16 50, i16 206, i16 50, i16 206, i16 50, i16 206>) #3
  %90 = add <4 x i32> %88, <i32 128, i32 128, i32 128, i32 128>
  %91 = ashr <4 x i32> %90, <i32 8, i32 8, i32 8, i32 8>
  %92 = add <4 x i32> %89, <i32 128, i32 128, i32 128, i32 128>
  %93 = ashr <4 x i32> %92, <i32 8, i32 8, i32 8, i32 8>
  %94 = bitcast <4 x i32> %91 to <8 x i16>
  %95 = bitcast <4 x i32> %93 to <8 x i16>
  %96 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %94, <8 x i16> %95) #3
  %97 = shufflevector <16 x i8> %96, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %98 = bitcast <16 x i8> %97 to <2 x i64>
  %99 = extractelement <2 x i64> %98, i32 0
  %100 = bitcast i8* %87 to i64*
  store i64 %99, i64* %100, align 1
  %101 = getelementptr inbounds i8, i8* %87, i64 %1
  %102 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 37, i16 219, i16 37, i16 219, i16 37, i16 219, i16 37, i16 219>) #3
  %103 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 37, i16 219, i16 37, i16 219, i16 37, i16 219, i16 37, i16 219>) #3
  %104 = add <4 x i32> %102, <i32 128, i32 128, i32 128, i32 128>
  %105 = ashr <4 x i32> %104, <i32 8, i32 8, i32 8, i32 8>
  %106 = add <4 x i32> %103, <i32 128, i32 128, i32 128, i32 128>
  %107 = ashr <4 x i32> %106, <i32 8, i32 8, i32 8, i32 8>
  %108 = bitcast <4 x i32> %105 to <8 x i16>
  %109 = bitcast <4 x i32> %107 to <8 x i16>
  %110 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %108, <8 x i16> %109) #3
  %111 = shufflevector <16 x i8> %110, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %112 = bitcast <16 x i8> %111 to <2 x i64>
  %113 = extractelement <2 x i64> %112, i32 0
  %114 = bitcast i8* %101 to i64*
  store i64 %113, i64* %114, align 1
  %115 = getelementptr inbounds i8, i8* %101, i64 %1
  %116 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 32, i16 224, i16 32, i16 224, i16 32, i16 224, i16 32, i16 224>) #3
  %117 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 32, i16 224, i16 32, i16 224, i16 32, i16 224, i16 32, i16 224>) #3
  %118 = add <4 x i32> %116, <i32 128, i32 128, i32 128, i32 128>
  %119 = ashr <4 x i32> %118, <i32 8, i32 8, i32 8, i32 8>
  %120 = add <4 x i32> %117, <i32 128, i32 128, i32 128, i32 128>
  %121 = ashr <4 x i32> %120, <i32 8, i32 8, i32 8, i32 8>
  %122 = bitcast <4 x i32> %119 to <8 x i16>
  %123 = bitcast <4 x i32> %121 to <8 x i16>
  %124 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %122, <8 x i16> %123) #3
  %125 = shufflevector <16 x i8> %124, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %126 = bitcast <16 x i8> %125 to <2 x i64>
  %127 = extractelement <2 x i64> %126, i32 0
  %128 = bitcast i8* %115 to i64*
  store i64 %127, i64* %128, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_smooth_v_predictor_8x16_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %2 to i64*
  %6 = load i64, i64* %5, align 1
  %7 = insertelement <2 x i64> undef, i64 %6, i32 0
  %8 = getelementptr inbounds i8, i8* %3, i64 15
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i16
  %11 = insertelement <8 x i16> undef, i16 %10, i32 0
  %12 = shufflevector <8 x i16> %11, <8 x i16> undef, <8 x i32> zeroinitializer
  %13 = bitcast <2 x i64> %7 to <16 x i8>
  %14 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %15 = bitcast <16 x i8> %14 to <8 x i16>
  %16 = shufflevector <8 x i16> %15, <8 x i16> %12, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %17 = shufflevector <8 x i16> %15, <8 x i16> %12, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %18 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 255, i16 1, i16 255, i16 1, i16 255, i16 1, i16 255, i16 1>) #3
  %19 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 255, i16 1, i16 255, i16 1, i16 255, i16 1, i16 255, i16 1>) #3
  %20 = add <4 x i32> %18, <i32 128, i32 128, i32 128, i32 128>
  %21 = ashr <4 x i32> %20, <i32 8, i32 8, i32 8, i32 8>
  %22 = add <4 x i32> %19, <i32 128, i32 128, i32 128, i32 128>
  %23 = ashr <4 x i32> %22, <i32 8, i32 8, i32 8, i32 8>
  %24 = bitcast <4 x i32> %21 to <8 x i16>
  %25 = bitcast <4 x i32> %23 to <8 x i16>
  %26 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %24, <8 x i16> %25) #3
  %27 = shufflevector <16 x i8> %26, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %28 = bitcast <16 x i8> %27 to <2 x i64>
  %29 = extractelement <2 x i64> %28, i32 0
  %30 = bitcast i8* %0 to i64*
  store i64 %29, i64* %30, align 1
  %31 = getelementptr inbounds i8, i8* %0, i64 %1
  %32 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 225, i16 31, i16 225, i16 31, i16 225, i16 31, i16 225, i16 31>) #3
  %33 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 225, i16 31, i16 225, i16 31, i16 225, i16 31, i16 225, i16 31>) #3
  %34 = add <4 x i32> %32, <i32 128, i32 128, i32 128, i32 128>
  %35 = ashr <4 x i32> %34, <i32 8, i32 8, i32 8, i32 8>
  %36 = add <4 x i32> %33, <i32 128, i32 128, i32 128, i32 128>
  %37 = ashr <4 x i32> %36, <i32 8, i32 8, i32 8, i32 8>
  %38 = bitcast <4 x i32> %35 to <8 x i16>
  %39 = bitcast <4 x i32> %37 to <8 x i16>
  %40 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %38, <8 x i16> %39) #3
  %41 = shufflevector <16 x i8> %40, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %42 = bitcast <16 x i8> %41 to <2 x i64>
  %43 = extractelement <2 x i64> %42, i32 0
  %44 = bitcast i8* %31 to i64*
  store i64 %43, i64* %44, align 1
  %45 = getelementptr inbounds i8, i8* %31, i64 %1
  %46 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 196, i16 60, i16 196, i16 60, i16 196, i16 60, i16 196, i16 60>) #3
  %47 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 196, i16 60, i16 196, i16 60, i16 196, i16 60, i16 196, i16 60>) #3
  %48 = add <4 x i32> %46, <i32 128, i32 128, i32 128, i32 128>
  %49 = ashr <4 x i32> %48, <i32 8, i32 8, i32 8, i32 8>
  %50 = add <4 x i32> %47, <i32 128, i32 128, i32 128, i32 128>
  %51 = ashr <4 x i32> %50, <i32 8, i32 8, i32 8, i32 8>
  %52 = bitcast <4 x i32> %49 to <8 x i16>
  %53 = bitcast <4 x i32> %51 to <8 x i16>
  %54 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %52, <8 x i16> %53) #3
  %55 = shufflevector <16 x i8> %54, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %56 = bitcast <16 x i8> %55 to <2 x i64>
  %57 = extractelement <2 x i64> %56, i32 0
  %58 = bitcast i8* %45 to i64*
  store i64 %57, i64* %58, align 1
  %59 = getelementptr inbounds i8, i8* %45, i64 %1
  %60 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 170, i16 86, i16 170, i16 86, i16 170, i16 86, i16 170, i16 86>) #3
  %61 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 170, i16 86, i16 170, i16 86, i16 170, i16 86, i16 170, i16 86>) #3
  %62 = add <4 x i32> %60, <i32 128, i32 128, i32 128, i32 128>
  %63 = ashr <4 x i32> %62, <i32 8, i32 8, i32 8, i32 8>
  %64 = add <4 x i32> %61, <i32 128, i32 128, i32 128, i32 128>
  %65 = ashr <4 x i32> %64, <i32 8, i32 8, i32 8, i32 8>
  %66 = bitcast <4 x i32> %63 to <8 x i16>
  %67 = bitcast <4 x i32> %65 to <8 x i16>
  %68 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %66, <8 x i16> %67) #3
  %69 = shufflevector <16 x i8> %68, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %70 = bitcast <16 x i8> %69 to <2 x i64>
  %71 = extractelement <2 x i64> %70, i32 0
  %72 = bitcast i8* %59 to i64*
  store i64 %71, i64* %72, align 1
  %73 = getelementptr inbounds i8, i8* %59, i64 %1
  %74 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 145, i16 111, i16 145, i16 111, i16 145, i16 111, i16 145, i16 111>) #3
  %75 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 145, i16 111, i16 145, i16 111, i16 145, i16 111, i16 145, i16 111>) #3
  %76 = add <4 x i32> %74, <i32 128, i32 128, i32 128, i32 128>
  %77 = ashr <4 x i32> %76, <i32 8, i32 8, i32 8, i32 8>
  %78 = add <4 x i32> %75, <i32 128, i32 128, i32 128, i32 128>
  %79 = ashr <4 x i32> %78, <i32 8, i32 8, i32 8, i32 8>
  %80 = bitcast <4 x i32> %77 to <8 x i16>
  %81 = bitcast <4 x i32> %79 to <8 x i16>
  %82 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %80, <8 x i16> %81) #3
  %83 = shufflevector <16 x i8> %82, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %84 = bitcast <16 x i8> %83 to <2 x i64>
  %85 = extractelement <2 x i64> %84, i32 0
  %86 = bitcast i8* %73 to i64*
  store i64 %85, i64* %86, align 1
  %87 = getelementptr inbounds i8, i8* %73, i64 %1
  %88 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 123, i16 133, i16 123, i16 133, i16 123, i16 133, i16 123, i16 133>) #3
  %89 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 123, i16 133, i16 123, i16 133, i16 123, i16 133, i16 123, i16 133>) #3
  %90 = add <4 x i32> %88, <i32 128, i32 128, i32 128, i32 128>
  %91 = ashr <4 x i32> %90, <i32 8, i32 8, i32 8, i32 8>
  %92 = add <4 x i32> %89, <i32 128, i32 128, i32 128, i32 128>
  %93 = ashr <4 x i32> %92, <i32 8, i32 8, i32 8, i32 8>
  %94 = bitcast <4 x i32> %91 to <8 x i16>
  %95 = bitcast <4 x i32> %93 to <8 x i16>
  %96 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %94, <8 x i16> %95) #3
  %97 = shufflevector <16 x i8> %96, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %98 = bitcast <16 x i8> %97 to <2 x i64>
  %99 = extractelement <2 x i64> %98, i32 0
  %100 = bitcast i8* %87 to i64*
  store i64 %99, i64* %100, align 1
  %101 = getelementptr inbounds i8, i8* %87, i64 %1
  %102 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 102, i16 154, i16 102, i16 154, i16 102, i16 154, i16 102, i16 154>) #3
  %103 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 102, i16 154, i16 102, i16 154, i16 102, i16 154, i16 102, i16 154>) #3
  %104 = add <4 x i32> %102, <i32 128, i32 128, i32 128, i32 128>
  %105 = ashr <4 x i32> %104, <i32 8, i32 8, i32 8, i32 8>
  %106 = add <4 x i32> %103, <i32 128, i32 128, i32 128, i32 128>
  %107 = ashr <4 x i32> %106, <i32 8, i32 8, i32 8, i32 8>
  %108 = bitcast <4 x i32> %105 to <8 x i16>
  %109 = bitcast <4 x i32> %107 to <8 x i16>
  %110 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %108, <8 x i16> %109) #3
  %111 = shufflevector <16 x i8> %110, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %112 = bitcast <16 x i8> %111 to <2 x i64>
  %113 = extractelement <2 x i64> %112, i32 0
  %114 = bitcast i8* %101 to i64*
  store i64 %113, i64* %114, align 1
  %115 = getelementptr inbounds i8, i8* %101, i64 %1
  %116 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 84, i16 172, i16 84, i16 172, i16 84, i16 172, i16 84, i16 172>) #3
  %117 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 84, i16 172, i16 84, i16 172, i16 84, i16 172, i16 84, i16 172>) #3
  %118 = add <4 x i32> %116, <i32 128, i32 128, i32 128, i32 128>
  %119 = ashr <4 x i32> %118, <i32 8, i32 8, i32 8, i32 8>
  %120 = add <4 x i32> %117, <i32 128, i32 128, i32 128, i32 128>
  %121 = ashr <4 x i32> %120, <i32 8, i32 8, i32 8, i32 8>
  %122 = bitcast <4 x i32> %119 to <8 x i16>
  %123 = bitcast <4 x i32> %121 to <8 x i16>
  %124 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %122, <8 x i16> %123) #3
  %125 = shufflevector <16 x i8> %124, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %126 = bitcast <16 x i8> %125 to <2 x i64>
  %127 = extractelement <2 x i64> %126, i32 0
  %128 = bitcast i8* %115 to i64*
  store i64 %127, i64* %128, align 1
  %129 = shl i64 %1, 3
  %130 = getelementptr inbounds i8, i8* %0, i64 %129
  %131 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 68, i16 188, i16 68, i16 188, i16 68, i16 188, i16 68, i16 188>) #3
  %132 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 68, i16 188, i16 68, i16 188, i16 68, i16 188, i16 68, i16 188>) #3
  %133 = add <4 x i32> %131, <i32 128, i32 128, i32 128, i32 128>
  %134 = ashr <4 x i32> %133, <i32 8, i32 8, i32 8, i32 8>
  %135 = add <4 x i32> %132, <i32 128, i32 128, i32 128, i32 128>
  %136 = ashr <4 x i32> %135, <i32 8, i32 8, i32 8, i32 8>
  %137 = bitcast <4 x i32> %134 to <8 x i16>
  %138 = bitcast <4 x i32> %136 to <8 x i16>
  %139 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %137, <8 x i16> %138) #3
  %140 = shufflevector <16 x i8> %139, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %141 = bitcast <16 x i8> %140 to <2 x i64>
  %142 = extractelement <2 x i64> %141, i32 0
  %143 = bitcast i8* %130 to i64*
  store i64 %142, i64* %143, align 1
  %144 = getelementptr inbounds i8, i8* %130, i64 %1
  %145 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 54, i16 202, i16 54, i16 202, i16 54, i16 202, i16 54, i16 202>) #3
  %146 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 54, i16 202, i16 54, i16 202, i16 54, i16 202, i16 54, i16 202>) #3
  %147 = add <4 x i32> %145, <i32 128, i32 128, i32 128, i32 128>
  %148 = ashr <4 x i32> %147, <i32 8, i32 8, i32 8, i32 8>
  %149 = add <4 x i32> %146, <i32 128, i32 128, i32 128, i32 128>
  %150 = ashr <4 x i32> %149, <i32 8, i32 8, i32 8, i32 8>
  %151 = bitcast <4 x i32> %148 to <8 x i16>
  %152 = bitcast <4 x i32> %150 to <8 x i16>
  %153 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %151, <8 x i16> %152) #3
  %154 = shufflevector <16 x i8> %153, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %155 = bitcast <16 x i8> %154 to <2 x i64>
  %156 = extractelement <2 x i64> %155, i32 0
  %157 = bitcast i8* %144 to i64*
  store i64 %156, i64* %157, align 1
  %158 = getelementptr inbounds i8, i8* %144, i64 %1
  %159 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 43, i16 213, i16 43, i16 213, i16 43, i16 213, i16 43, i16 213>) #3
  %160 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 43, i16 213, i16 43, i16 213, i16 43, i16 213, i16 43, i16 213>) #3
  %161 = add <4 x i32> %159, <i32 128, i32 128, i32 128, i32 128>
  %162 = ashr <4 x i32> %161, <i32 8, i32 8, i32 8, i32 8>
  %163 = add <4 x i32> %160, <i32 128, i32 128, i32 128, i32 128>
  %164 = ashr <4 x i32> %163, <i32 8, i32 8, i32 8, i32 8>
  %165 = bitcast <4 x i32> %162 to <8 x i16>
  %166 = bitcast <4 x i32> %164 to <8 x i16>
  %167 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %165, <8 x i16> %166) #3
  %168 = shufflevector <16 x i8> %167, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %169 = bitcast <16 x i8> %168 to <2 x i64>
  %170 = extractelement <2 x i64> %169, i32 0
  %171 = bitcast i8* %158 to i64*
  store i64 %170, i64* %171, align 1
  %172 = getelementptr inbounds i8, i8* %158, i64 %1
  %173 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 33, i16 223, i16 33, i16 223, i16 33, i16 223, i16 33, i16 223>) #3
  %174 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 33, i16 223, i16 33, i16 223, i16 33, i16 223, i16 33, i16 223>) #3
  %175 = add <4 x i32> %173, <i32 128, i32 128, i32 128, i32 128>
  %176 = ashr <4 x i32> %175, <i32 8, i32 8, i32 8, i32 8>
  %177 = add <4 x i32> %174, <i32 128, i32 128, i32 128, i32 128>
  %178 = ashr <4 x i32> %177, <i32 8, i32 8, i32 8, i32 8>
  %179 = bitcast <4 x i32> %176 to <8 x i16>
  %180 = bitcast <4 x i32> %178 to <8 x i16>
  %181 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %179, <8 x i16> %180) #3
  %182 = shufflevector <16 x i8> %181, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %183 = bitcast <16 x i8> %182 to <2 x i64>
  %184 = extractelement <2 x i64> %183, i32 0
  %185 = bitcast i8* %172 to i64*
  store i64 %184, i64* %185, align 1
  %186 = getelementptr inbounds i8, i8* %172, i64 %1
  %187 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 26, i16 230, i16 26, i16 230, i16 26, i16 230, i16 26, i16 230>) #3
  %188 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 26, i16 230, i16 26, i16 230, i16 26, i16 230, i16 26, i16 230>) #3
  %189 = add <4 x i32> %187, <i32 128, i32 128, i32 128, i32 128>
  %190 = ashr <4 x i32> %189, <i32 8, i32 8, i32 8, i32 8>
  %191 = add <4 x i32> %188, <i32 128, i32 128, i32 128, i32 128>
  %192 = ashr <4 x i32> %191, <i32 8, i32 8, i32 8, i32 8>
  %193 = bitcast <4 x i32> %190 to <8 x i16>
  %194 = bitcast <4 x i32> %192 to <8 x i16>
  %195 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %193, <8 x i16> %194) #3
  %196 = shufflevector <16 x i8> %195, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %197 = bitcast <16 x i8> %196 to <2 x i64>
  %198 = extractelement <2 x i64> %197, i32 0
  %199 = bitcast i8* %186 to i64*
  store i64 %198, i64* %199, align 1
  %200 = getelementptr inbounds i8, i8* %186, i64 %1
  %201 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 20, i16 236, i16 20, i16 236, i16 20, i16 236, i16 20, i16 236>) #3
  %202 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 20, i16 236, i16 20, i16 236, i16 20, i16 236, i16 20, i16 236>) #3
  %203 = add <4 x i32> %201, <i32 128, i32 128, i32 128, i32 128>
  %204 = ashr <4 x i32> %203, <i32 8, i32 8, i32 8, i32 8>
  %205 = add <4 x i32> %202, <i32 128, i32 128, i32 128, i32 128>
  %206 = ashr <4 x i32> %205, <i32 8, i32 8, i32 8, i32 8>
  %207 = bitcast <4 x i32> %204 to <8 x i16>
  %208 = bitcast <4 x i32> %206 to <8 x i16>
  %209 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %207, <8 x i16> %208) #3
  %210 = shufflevector <16 x i8> %209, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %211 = bitcast <16 x i8> %210 to <2 x i64>
  %212 = extractelement <2 x i64> %211, i32 0
  %213 = bitcast i8* %200 to i64*
  store i64 %212, i64* %213, align 1
  %214 = getelementptr inbounds i8, i8* %200, i64 %1
  %215 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 17, i16 239, i16 17, i16 239, i16 17, i16 239, i16 17, i16 239>) #3
  %216 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 17, i16 239, i16 17, i16 239, i16 17, i16 239, i16 17, i16 239>) #3
  %217 = add <4 x i32> %215, <i32 128, i32 128, i32 128, i32 128>
  %218 = ashr <4 x i32> %217, <i32 8, i32 8, i32 8, i32 8>
  %219 = add <4 x i32> %216, <i32 128, i32 128, i32 128, i32 128>
  %220 = ashr <4 x i32> %219, <i32 8, i32 8, i32 8, i32 8>
  %221 = bitcast <4 x i32> %218 to <8 x i16>
  %222 = bitcast <4 x i32> %220 to <8 x i16>
  %223 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %221, <8 x i16> %222) #3
  %224 = shufflevector <16 x i8> %223, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %225 = bitcast <16 x i8> %224 to <2 x i64>
  %226 = extractelement <2 x i64> %225, i32 0
  %227 = bitcast i8* %214 to i64*
  store i64 %226, i64* %227, align 1
  %228 = getelementptr inbounds i8, i8* %214, i64 %1
  %229 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 16, i16 240, i16 16, i16 240, i16 16, i16 240, i16 16, i16 240>) #3
  %230 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 16, i16 240, i16 16, i16 240, i16 16, i16 240, i16 16, i16 240>) #3
  %231 = add <4 x i32> %229, <i32 128, i32 128, i32 128, i32 128>
  %232 = ashr <4 x i32> %231, <i32 8, i32 8, i32 8, i32 8>
  %233 = add <4 x i32> %230, <i32 128, i32 128, i32 128, i32 128>
  %234 = ashr <4 x i32> %233, <i32 8, i32 8, i32 8, i32 8>
  %235 = bitcast <4 x i32> %232 to <8 x i16>
  %236 = bitcast <4 x i32> %234 to <8 x i16>
  %237 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %235, <8 x i16> %236) #3
  %238 = shufflevector <16 x i8> %237, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %239 = bitcast <16 x i8> %238 to <2 x i64>
  %240 = extractelement <2 x i64> %239, i32 0
  %241 = bitcast i8* %228 to i64*
  store i64 %240, i64* %241, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_smooth_v_predictor_8x32_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %2 to i64*
  %6 = load i64, i64* %5, align 1
  %7 = insertelement <2 x i64> undef, i64 %6, i32 0
  %8 = getelementptr inbounds i8, i8* %3, i64 31
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i16
  %11 = insertelement <8 x i16> undef, i16 %10, i32 0
  %12 = shufflevector <8 x i16> %11, <8 x i16> undef, <8 x i32> zeroinitializer
  %13 = bitcast <2 x i64> %7 to <16 x i8>
  %14 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %15 = bitcast <16 x i8> %14 to <8 x i16>
  %16 = shufflevector <8 x i16> %15, <8 x i16> %12, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %17 = shufflevector <8 x i16> %15, <8 x i16> %12, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %18 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 255, i16 1, i16 255, i16 1, i16 255, i16 1, i16 255, i16 1>) #3
  %19 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 255, i16 1, i16 255, i16 1, i16 255, i16 1, i16 255, i16 1>) #3
  %20 = add <4 x i32> %18, <i32 128, i32 128, i32 128, i32 128>
  %21 = ashr <4 x i32> %20, <i32 8, i32 8, i32 8, i32 8>
  %22 = add <4 x i32> %19, <i32 128, i32 128, i32 128, i32 128>
  %23 = ashr <4 x i32> %22, <i32 8, i32 8, i32 8, i32 8>
  %24 = bitcast <4 x i32> %21 to <8 x i16>
  %25 = bitcast <4 x i32> %23 to <8 x i16>
  %26 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %24, <8 x i16> %25) #3
  %27 = shufflevector <16 x i8> %26, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %28 = bitcast <16 x i8> %27 to <2 x i64>
  %29 = extractelement <2 x i64> %28, i32 0
  %30 = bitcast i8* %0 to i64*
  store i64 %29, i64* %30, align 1
  %31 = getelementptr inbounds i8, i8* %0, i64 %1
  %32 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 240, i16 16, i16 240, i16 16, i16 240, i16 16, i16 240, i16 16>) #3
  %33 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 240, i16 16, i16 240, i16 16, i16 240, i16 16, i16 240, i16 16>) #3
  %34 = add <4 x i32> %32, <i32 128, i32 128, i32 128, i32 128>
  %35 = ashr <4 x i32> %34, <i32 8, i32 8, i32 8, i32 8>
  %36 = add <4 x i32> %33, <i32 128, i32 128, i32 128, i32 128>
  %37 = ashr <4 x i32> %36, <i32 8, i32 8, i32 8, i32 8>
  %38 = bitcast <4 x i32> %35 to <8 x i16>
  %39 = bitcast <4 x i32> %37 to <8 x i16>
  %40 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %38, <8 x i16> %39) #3
  %41 = shufflevector <16 x i8> %40, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %42 = bitcast <16 x i8> %41 to <2 x i64>
  %43 = extractelement <2 x i64> %42, i32 0
  %44 = bitcast i8* %31 to i64*
  store i64 %43, i64* %44, align 1
  %45 = getelementptr inbounds i8, i8* %31, i64 %1
  %46 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 225, i16 31, i16 225, i16 31, i16 225, i16 31, i16 225, i16 31>) #3
  %47 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 225, i16 31, i16 225, i16 31, i16 225, i16 31, i16 225, i16 31>) #3
  %48 = add <4 x i32> %46, <i32 128, i32 128, i32 128, i32 128>
  %49 = ashr <4 x i32> %48, <i32 8, i32 8, i32 8, i32 8>
  %50 = add <4 x i32> %47, <i32 128, i32 128, i32 128, i32 128>
  %51 = ashr <4 x i32> %50, <i32 8, i32 8, i32 8, i32 8>
  %52 = bitcast <4 x i32> %49 to <8 x i16>
  %53 = bitcast <4 x i32> %51 to <8 x i16>
  %54 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %52, <8 x i16> %53) #3
  %55 = shufflevector <16 x i8> %54, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %56 = bitcast <16 x i8> %55 to <2 x i64>
  %57 = extractelement <2 x i64> %56, i32 0
  %58 = bitcast i8* %45 to i64*
  store i64 %57, i64* %58, align 1
  %59 = getelementptr inbounds i8, i8* %45, i64 %1
  %60 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 210, i16 46, i16 210, i16 46, i16 210, i16 46, i16 210, i16 46>) #3
  %61 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 210, i16 46, i16 210, i16 46, i16 210, i16 46, i16 210, i16 46>) #3
  %62 = add <4 x i32> %60, <i32 128, i32 128, i32 128, i32 128>
  %63 = ashr <4 x i32> %62, <i32 8, i32 8, i32 8, i32 8>
  %64 = add <4 x i32> %61, <i32 128, i32 128, i32 128, i32 128>
  %65 = ashr <4 x i32> %64, <i32 8, i32 8, i32 8, i32 8>
  %66 = bitcast <4 x i32> %63 to <8 x i16>
  %67 = bitcast <4 x i32> %65 to <8 x i16>
  %68 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %66, <8 x i16> %67) #3
  %69 = shufflevector <16 x i8> %68, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %70 = bitcast <16 x i8> %69 to <2 x i64>
  %71 = extractelement <2 x i64> %70, i32 0
  %72 = bitcast i8* %59 to i64*
  store i64 %71, i64* %72, align 1
  %73 = getelementptr inbounds i8, i8* %59, i64 %1
  %74 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 196, i16 60, i16 196, i16 60, i16 196, i16 60, i16 196, i16 60>) #3
  %75 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 196, i16 60, i16 196, i16 60, i16 196, i16 60, i16 196, i16 60>) #3
  %76 = add <4 x i32> %74, <i32 128, i32 128, i32 128, i32 128>
  %77 = ashr <4 x i32> %76, <i32 8, i32 8, i32 8, i32 8>
  %78 = add <4 x i32> %75, <i32 128, i32 128, i32 128, i32 128>
  %79 = ashr <4 x i32> %78, <i32 8, i32 8, i32 8, i32 8>
  %80 = bitcast <4 x i32> %77 to <8 x i16>
  %81 = bitcast <4 x i32> %79 to <8 x i16>
  %82 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %80, <8 x i16> %81) #3
  %83 = shufflevector <16 x i8> %82, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %84 = bitcast <16 x i8> %83 to <2 x i64>
  %85 = extractelement <2 x i64> %84, i32 0
  %86 = bitcast i8* %73 to i64*
  store i64 %85, i64* %86, align 1
  %87 = getelementptr inbounds i8, i8* %73, i64 %1
  %88 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 182, i16 74, i16 182, i16 74, i16 182, i16 74, i16 182, i16 74>) #3
  %89 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 182, i16 74, i16 182, i16 74, i16 182, i16 74, i16 182, i16 74>) #3
  %90 = add <4 x i32> %88, <i32 128, i32 128, i32 128, i32 128>
  %91 = ashr <4 x i32> %90, <i32 8, i32 8, i32 8, i32 8>
  %92 = add <4 x i32> %89, <i32 128, i32 128, i32 128, i32 128>
  %93 = ashr <4 x i32> %92, <i32 8, i32 8, i32 8, i32 8>
  %94 = bitcast <4 x i32> %91 to <8 x i16>
  %95 = bitcast <4 x i32> %93 to <8 x i16>
  %96 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %94, <8 x i16> %95) #3
  %97 = shufflevector <16 x i8> %96, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %98 = bitcast <16 x i8> %97 to <2 x i64>
  %99 = extractelement <2 x i64> %98, i32 0
  %100 = bitcast i8* %87 to i64*
  store i64 %99, i64* %100, align 1
  %101 = getelementptr inbounds i8, i8* %87, i64 %1
  %102 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 169, i16 87, i16 169, i16 87, i16 169, i16 87, i16 169, i16 87>) #3
  %103 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 169, i16 87, i16 169, i16 87, i16 169, i16 87, i16 169, i16 87>) #3
  %104 = add <4 x i32> %102, <i32 128, i32 128, i32 128, i32 128>
  %105 = ashr <4 x i32> %104, <i32 8, i32 8, i32 8, i32 8>
  %106 = add <4 x i32> %103, <i32 128, i32 128, i32 128, i32 128>
  %107 = ashr <4 x i32> %106, <i32 8, i32 8, i32 8, i32 8>
  %108 = bitcast <4 x i32> %105 to <8 x i16>
  %109 = bitcast <4 x i32> %107 to <8 x i16>
  %110 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %108, <8 x i16> %109) #3
  %111 = shufflevector <16 x i8> %110, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %112 = bitcast <16 x i8> %111 to <2 x i64>
  %113 = extractelement <2 x i64> %112, i32 0
  %114 = bitcast i8* %101 to i64*
  store i64 %113, i64* %114, align 1
  %115 = getelementptr inbounds i8, i8* %101, i64 %1
  %116 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 157, i16 99, i16 157, i16 99, i16 157, i16 99, i16 157, i16 99>) #3
  %117 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 157, i16 99, i16 157, i16 99, i16 157, i16 99, i16 157, i16 99>) #3
  %118 = add <4 x i32> %116, <i32 128, i32 128, i32 128, i32 128>
  %119 = ashr <4 x i32> %118, <i32 8, i32 8, i32 8, i32 8>
  %120 = add <4 x i32> %117, <i32 128, i32 128, i32 128, i32 128>
  %121 = ashr <4 x i32> %120, <i32 8, i32 8, i32 8, i32 8>
  %122 = bitcast <4 x i32> %119 to <8 x i16>
  %123 = bitcast <4 x i32> %121 to <8 x i16>
  %124 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %122, <8 x i16> %123) #3
  %125 = shufflevector <16 x i8> %124, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %126 = bitcast <16 x i8> %125 to <2 x i64>
  %127 = extractelement <2 x i64> %126, i32 0
  %128 = bitcast i8* %115 to i64*
  store i64 %127, i64* %128, align 1
  %129 = shl i64 %1, 3
  %130 = getelementptr inbounds i8, i8* %0, i64 %129
  %131 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 145, i16 111, i16 145, i16 111, i16 145, i16 111, i16 145, i16 111>) #3
  %132 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 145, i16 111, i16 145, i16 111, i16 145, i16 111, i16 145, i16 111>) #3
  %133 = add <4 x i32> %131, <i32 128, i32 128, i32 128, i32 128>
  %134 = ashr <4 x i32> %133, <i32 8, i32 8, i32 8, i32 8>
  %135 = add <4 x i32> %132, <i32 128, i32 128, i32 128, i32 128>
  %136 = ashr <4 x i32> %135, <i32 8, i32 8, i32 8, i32 8>
  %137 = bitcast <4 x i32> %134 to <8 x i16>
  %138 = bitcast <4 x i32> %136 to <8 x i16>
  %139 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %137, <8 x i16> %138) #3
  %140 = shufflevector <16 x i8> %139, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %141 = bitcast <16 x i8> %140 to <2 x i64>
  %142 = extractelement <2 x i64> %141, i32 0
  %143 = bitcast i8* %130 to i64*
  store i64 %142, i64* %143, align 1
  %144 = getelementptr inbounds i8, i8* %130, i64 %1
  %145 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 133, i16 123, i16 133, i16 123, i16 133, i16 123, i16 133, i16 123>) #3
  %146 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 133, i16 123, i16 133, i16 123, i16 133, i16 123, i16 133, i16 123>) #3
  %147 = add <4 x i32> %145, <i32 128, i32 128, i32 128, i32 128>
  %148 = ashr <4 x i32> %147, <i32 8, i32 8, i32 8, i32 8>
  %149 = add <4 x i32> %146, <i32 128, i32 128, i32 128, i32 128>
  %150 = ashr <4 x i32> %149, <i32 8, i32 8, i32 8, i32 8>
  %151 = bitcast <4 x i32> %148 to <8 x i16>
  %152 = bitcast <4 x i32> %150 to <8 x i16>
  %153 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %151, <8 x i16> %152) #3
  %154 = shufflevector <16 x i8> %153, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %155 = bitcast <16 x i8> %154 to <2 x i64>
  %156 = extractelement <2 x i64> %155, i32 0
  %157 = bitcast i8* %144 to i64*
  store i64 %156, i64* %157, align 1
  %158 = getelementptr inbounds i8, i8* %144, i64 %1
  %159 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 122, i16 134, i16 122, i16 134, i16 122, i16 134, i16 122, i16 134>) #3
  %160 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 122, i16 134, i16 122, i16 134, i16 122, i16 134, i16 122, i16 134>) #3
  %161 = add <4 x i32> %159, <i32 128, i32 128, i32 128, i32 128>
  %162 = ashr <4 x i32> %161, <i32 8, i32 8, i32 8, i32 8>
  %163 = add <4 x i32> %160, <i32 128, i32 128, i32 128, i32 128>
  %164 = ashr <4 x i32> %163, <i32 8, i32 8, i32 8, i32 8>
  %165 = bitcast <4 x i32> %162 to <8 x i16>
  %166 = bitcast <4 x i32> %164 to <8 x i16>
  %167 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %165, <8 x i16> %166) #3
  %168 = shufflevector <16 x i8> %167, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %169 = bitcast <16 x i8> %168 to <2 x i64>
  %170 = extractelement <2 x i64> %169, i32 0
  %171 = bitcast i8* %158 to i64*
  store i64 %170, i64* %171, align 1
  %172 = getelementptr inbounds i8, i8* %158, i64 %1
  %173 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 111, i16 145, i16 111, i16 145, i16 111, i16 145, i16 111, i16 145>) #3
  %174 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 111, i16 145, i16 111, i16 145, i16 111, i16 145, i16 111, i16 145>) #3
  %175 = add <4 x i32> %173, <i32 128, i32 128, i32 128, i32 128>
  %176 = ashr <4 x i32> %175, <i32 8, i32 8, i32 8, i32 8>
  %177 = add <4 x i32> %174, <i32 128, i32 128, i32 128, i32 128>
  %178 = ashr <4 x i32> %177, <i32 8, i32 8, i32 8, i32 8>
  %179 = bitcast <4 x i32> %176 to <8 x i16>
  %180 = bitcast <4 x i32> %178 to <8 x i16>
  %181 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %179, <8 x i16> %180) #3
  %182 = shufflevector <16 x i8> %181, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %183 = bitcast <16 x i8> %182 to <2 x i64>
  %184 = extractelement <2 x i64> %183, i32 0
  %185 = bitcast i8* %172 to i64*
  store i64 %184, i64* %185, align 1
  %186 = getelementptr inbounds i8, i8* %172, i64 %1
  %187 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 101, i16 155, i16 101, i16 155, i16 101, i16 155, i16 101, i16 155>) #3
  %188 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 101, i16 155, i16 101, i16 155, i16 101, i16 155, i16 101, i16 155>) #3
  %189 = add <4 x i32> %187, <i32 128, i32 128, i32 128, i32 128>
  %190 = ashr <4 x i32> %189, <i32 8, i32 8, i32 8, i32 8>
  %191 = add <4 x i32> %188, <i32 128, i32 128, i32 128, i32 128>
  %192 = ashr <4 x i32> %191, <i32 8, i32 8, i32 8, i32 8>
  %193 = bitcast <4 x i32> %190 to <8 x i16>
  %194 = bitcast <4 x i32> %192 to <8 x i16>
  %195 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %193, <8 x i16> %194) #3
  %196 = shufflevector <16 x i8> %195, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %197 = bitcast <16 x i8> %196 to <2 x i64>
  %198 = extractelement <2 x i64> %197, i32 0
  %199 = bitcast i8* %186 to i64*
  store i64 %198, i64* %199, align 1
  %200 = getelementptr inbounds i8, i8* %186, i64 %1
  %201 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 92, i16 164, i16 92, i16 164, i16 92, i16 164, i16 92, i16 164>) #3
  %202 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 92, i16 164, i16 92, i16 164, i16 92, i16 164, i16 92, i16 164>) #3
  %203 = add <4 x i32> %201, <i32 128, i32 128, i32 128, i32 128>
  %204 = ashr <4 x i32> %203, <i32 8, i32 8, i32 8, i32 8>
  %205 = add <4 x i32> %202, <i32 128, i32 128, i32 128, i32 128>
  %206 = ashr <4 x i32> %205, <i32 8, i32 8, i32 8, i32 8>
  %207 = bitcast <4 x i32> %204 to <8 x i16>
  %208 = bitcast <4 x i32> %206 to <8 x i16>
  %209 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %207, <8 x i16> %208) #3
  %210 = shufflevector <16 x i8> %209, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %211 = bitcast <16 x i8> %210 to <2 x i64>
  %212 = extractelement <2 x i64> %211, i32 0
  %213 = bitcast i8* %200 to i64*
  store i64 %212, i64* %213, align 1
  %214 = getelementptr inbounds i8, i8* %200, i64 %1
  %215 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 83, i16 173, i16 83, i16 173, i16 83, i16 173, i16 83, i16 173>) #3
  %216 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 83, i16 173, i16 83, i16 173, i16 83, i16 173, i16 83, i16 173>) #3
  %217 = add <4 x i32> %215, <i32 128, i32 128, i32 128, i32 128>
  %218 = ashr <4 x i32> %217, <i32 8, i32 8, i32 8, i32 8>
  %219 = add <4 x i32> %216, <i32 128, i32 128, i32 128, i32 128>
  %220 = ashr <4 x i32> %219, <i32 8, i32 8, i32 8, i32 8>
  %221 = bitcast <4 x i32> %218 to <8 x i16>
  %222 = bitcast <4 x i32> %220 to <8 x i16>
  %223 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %221, <8 x i16> %222) #3
  %224 = shufflevector <16 x i8> %223, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %225 = bitcast <16 x i8> %224 to <2 x i64>
  %226 = extractelement <2 x i64> %225, i32 0
  %227 = bitcast i8* %214 to i64*
  store i64 %226, i64* %227, align 1
  %228 = getelementptr inbounds i8, i8* %214, i64 %1
  %229 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 74, i16 182, i16 74, i16 182, i16 74, i16 182, i16 74, i16 182>) #3
  %230 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 74, i16 182, i16 74, i16 182, i16 74, i16 182, i16 74, i16 182>) #3
  %231 = add <4 x i32> %229, <i32 128, i32 128, i32 128, i32 128>
  %232 = ashr <4 x i32> %231, <i32 8, i32 8, i32 8, i32 8>
  %233 = add <4 x i32> %230, <i32 128, i32 128, i32 128, i32 128>
  %234 = ashr <4 x i32> %233, <i32 8, i32 8, i32 8, i32 8>
  %235 = bitcast <4 x i32> %232 to <8 x i16>
  %236 = bitcast <4 x i32> %234 to <8 x i16>
  %237 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %235, <8 x i16> %236) #3
  %238 = shufflevector <16 x i8> %237, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %239 = bitcast <16 x i8> %238 to <2 x i64>
  %240 = extractelement <2 x i64> %239, i32 0
  %241 = bitcast i8* %228 to i64*
  store i64 %240, i64* %241, align 1
  %242 = getelementptr inbounds i8, i8* %130, i64 %129
  %243 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 66, i16 190, i16 66, i16 190, i16 66, i16 190, i16 66, i16 190>) #3
  %244 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 66, i16 190, i16 66, i16 190, i16 66, i16 190, i16 66, i16 190>) #3
  %245 = add <4 x i32> %243, <i32 128, i32 128, i32 128, i32 128>
  %246 = ashr <4 x i32> %245, <i32 8, i32 8, i32 8, i32 8>
  %247 = add <4 x i32> %244, <i32 128, i32 128, i32 128, i32 128>
  %248 = ashr <4 x i32> %247, <i32 8, i32 8, i32 8, i32 8>
  %249 = bitcast <4 x i32> %246 to <8 x i16>
  %250 = bitcast <4 x i32> %248 to <8 x i16>
  %251 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %249, <8 x i16> %250) #3
  %252 = shufflevector <16 x i8> %251, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %253 = bitcast <16 x i8> %252 to <2 x i64>
  %254 = extractelement <2 x i64> %253, i32 0
  %255 = bitcast i8* %242 to i64*
  store i64 %254, i64* %255, align 1
  %256 = getelementptr inbounds i8, i8* %242, i64 %1
  %257 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 59, i16 197, i16 59, i16 197, i16 59, i16 197, i16 59, i16 197>) #3
  %258 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 59, i16 197, i16 59, i16 197, i16 59, i16 197, i16 59, i16 197>) #3
  %259 = add <4 x i32> %257, <i32 128, i32 128, i32 128, i32 128>
  %260 = ashr <4 x i32> %259, <i32 8, i32 8, i32 8, i32 8>
  %261 = add <4 x i32> %258, <i32 128, i32 128, i32 128, i32 128>
  %262 = ashr <4 x i32> %261, <i32 8, i32 8, i32 8, i32 8>
  %263 = bitcast <4 x i32> %260 to <8 x i16>
  %264 = bitcast <4 x i32> %262 to <8 x i16>
  %265 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %263, <8 x i16> %264) #3
  %266 = shufflevector <16 x i8> %265, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %267 = bitcast <16 x i8> %266 to <2 x i64>
  %268 = extractelement <2 x i64> %267, i32 0
  %269 = bitcast i8* %256 to i64*
  store i64 %268, i64* %269, align 1
  %270 = getelementptr inbounds i8, i8* %256, i64 %1
  %271 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 52, i16 204, i16 52, i16 204, i16 52, i16 204, i16 52, i16 204>) #3
  %272 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 52, i16 204, i16 52, i16 204, i16 52, i16 204, i16 52, i16 204>) #3
  %273 = add <4 x i32> %271, <i32 128, i32 128, i32 128, i32 128>
  %274 = ashr <4 x i32> %273, <i32 8, i32 8, i32 8, i32 8>
  %275 = add <4 x i32> %272, <i32 128, i32 128, i32 128, i32 128>
  %276 = ashr <4 x i32> %275, <i32 8, i32 8, i32 8, i32 8>
  %277 = bitcast <4 x i32> %274 to <8 x i16>
  %278 = bitcast <4 x i32> %276 to <8 x i16>
  %279 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %277, <8 x i16> %278) #3
  %280 = shufflevector <16 x i8> %279, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %281 = bitcast <16 x i8> %280 to <2 x i64>
  %282 = extractelement <2 x i64> %281, i32 0
  %283 = bitcast i8* %270 to i64*
  store i64 %282, i64* %283, align 1
  %284 = getelementptr inbounds i8, i8* %270, i64 %1
  %285 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 45, i16 211, i16 45, i16 211, i16 45, i16 211, i16 45, i16 211>) #3
  %286 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 45, i16 211, i16 45, i16 211, i16 45, i16 211, i16 45, i16 211>) #3
  %287 = add <4 x i32> %285, <i32 128, i32 128, i32 128, i32 128>
  %288 = ashr <4 x i32> %287, <i32 8, i32 8, i32 8, i32 8>
  %289 = add <4 x i32> %286, <i32 128, i32 128, i32 128, i32 128>
  %290 = ashr <4 x i32> %289, <i32 8, i32 8, i32 8, i32 8>
  %291 = bitcast <4 x i32> %288 to <8 x i16>
  %292 = bitcast <4 x i32> %290 to <8 x i16>
  %293 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %291, <8 x i16> %292) #3
  %294 = shufflevector <16 x i8> %293, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %295 = bitcast <16 x i8> %294 to <2 x i64>
  %296 = extractelement <2 x i64> %295, i32 0
  %297 = bitcast i8* %284 to i64*
  store i64 %296, i64* %297, align 1
  %298 = getelementptr inbounds i8, i8* %284, i64 %1
  %299 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 39, i16 217, i16 39, i16 217, i16 39, i16 217, i16 39, i16 217>) #3
  %300 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 39, i16 217, i16 39, i16 217, i16 39, i16 217, i16 39, i16 217>) #3
  %301 = add <4 x i32> %299, <i32 128, i32 128, i32 128, i32 128>
  %302 = ashr <4 x i32> %301, <i32 8, i32 8, i32 8, i32 8>
  %303 = add <4 x i32> %300, <i32 128, i32 128, i32 128, i32 128>
  %304 = ashr <4 x i32> %303, <i32 8, i32 8, i32 8, i32 8>
  %305 = bitcast <4 x i32> %302 to <8 x i16>
  %306 = bitcast <4 x i32> %304 to <8 x i16>
  %307 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %305, <8 x i16> %306) #3
  %308 = shufflevector <16 x i8> %307, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %309 = bitcast <16 x i8> %308 to <2 x i64>
  %310 = extractelement <2 x i64> %309, i32 0
  %311 = bitcast i8* %298 to i64*
  store i64 %310, i64* %311, align 1
  %312 = getelementptr inbounds i8, i8* %298, i64 %1
  %313 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 34, i16 222, i16 34, i16 222, i16 34, i16 222, i16 34, i16 222>) #3
  %314 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 34, i16 222, i16 34, i16 222, i16 34, i16 222, i16 34, i16 222>) #3
  %315 = add <4 x i32> %313, <i32 128, i32 128, i32 128, i32 128>
  %316 = ashr <4 x i32> %315, <i32 8, i32 8, i32 8, i32 8>
  %317 = add <4 x i32> %314, <i32 128, i32 128, i32 128, i32 128>
  %318 = ashr <4 x i32> %317, <i32 8, i32 8, i32 8, i32 8>
  %319 = bitcast <4 x i32> %316 to <8 x i16>
  %320 = bitcast <4 x i32> %318 to <8 x i16>
  %321 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %319, <8 x i16> %320) #3
  %322 = shufflevector <16 x i8> %321, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %323 = bitcast <16 x i8> %322 to <2 x i64>
  %324 = extractelement <2 x i64> %323, i32 0
  %325 = bitcast i8* %312 to i64*
  store i64 %324, i64* %325, align 1
  %326 = getelementptr inbounds i8, i8* %312, i64 %1
  %327 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 29, i16 227, i16 29, i16 227, i16 29, i16 227, i16 29, i16 227>) #3
  %328 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 29, i16 227, i16 29, i16 227, i16 29, i16 227, i16 29, i16 227>) #3
  %329 = add <4 x i32> %327, <i32 128, i32 128, i32 128, i32 128>
  %330 = ashr <4 x i32> %329, <i32 8, i32 8, i32 8, i32 8>
  %331 = add <4 x i32> %328, <i32 128, i32 128, i32 128, i32 128>
  %332 = ashr <4 x i32> %331, <i32 8, i32 8, i32 8, i32 8>
  %333 = bitcast <4 x i32> %330 to <8 x i16>
  %334 = bitcast <4 x i32> %332 to <8 x i16>
  %335 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %333, <8 x i16> %334) #3
  %336 = shufflevector <16 x i8> %335, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %337 = bitcast <16 x i8> %336 to <2 x i64>
  %338 = extractelement <2 x i64> %337, i32 0
  %339 = bitcast i8* %326 to i64*
  store i64 %338, i64* %339, align 1
  %340 = getelementptr inbounds i8, i8* %326, i64 %1
  %341 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 25, i16 231, i16 25, i16 231, i16 25, i16 231, i16 25, i16 231>) #3
  %342 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 25, i16 231, i16 25, i16 231, i16 25, i16 231, i16 25, i16 231>) #3
  %343 = add <4 x i32> %341, <i32 128, i32 128, i32 128, i32 128>
  %344 = ashr <4 x i32> %343, <i32 8, i32 8, i32 8, i32 8>
  %345 = add <4 x i32> %342, <i32 128, i32 128, i32 128, i32 128>
  %346 = ashr <4 x i32> %345, <i32 8, i32 8, i32 8, i32 8>
  %347 = bitcast <4 x i32> %344 to <8 x i16>
  %348 = bitcast <4 x i32> %346 to <8 x i16>
  %349 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %347, <8 x i16> %348) #3
  %350 = shufflevector <16 x i8> %349, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %351 = bitcast <16 x i8> %350 to <2 x i64>
  %352 = extractelement <2 x i64> %351, i32 0
  %353 = bitcast i8* %340 to i64*
  store i64 %352, i64* %353, align 1
  %354 = getelementptr inbounds i8, i8* %242, i64 %129
  %355 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 21, i16 235, i16 21, i16 235, i16 21, i16 235, i16 21, i16 235>) #3
  %356 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 21, i16 235, i16 21, i16 235, i16 21, i16 235, i16 21, i16 235>) #3
  %357 = add <4 x i32> %355, <i32 128, i32 128, i32 128, i32 128>
  %358 = ashr <4 x i32> %357, <i32 8, i32 8, i32 8, i32 8>
  %359 = add <4 x i32> %356, <i32 128, i32 128, i32 128, i32 128>
  %360 = ashr <4 x i32> %359, <i32 8, i32 8, i32 8, i32 8>
  %361 = bitcast <4 x i32> %358 to <8 x i16>
  %362 = bitcast <4 x i32> %360 to <8 x i16>
  %363 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %361, <8 x i16> %362) #3
  %364 = shufflevector <16 x i8> %363, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %365 = bitcast <16 x i8> %364 to <2 x i64>
  %366 = extractelement <2 x i64> %365, i32 0
  %367 = bitcast i8* %354 to i64*
  store i64 %366, i64* %367, align 1
  %368 = getelementptr inbounds i8, i8* %354, i64 %1
  %369 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 17, i16 239, i16 17, i16 239, i16 17, i16 239, i16 17, i16 239>) #3
  %370 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 17, i16 239, i16 17, i16 239, i16 17, i16 239, i16 17, i16 239>) #3
  %371 = add <4 x i32> %369, <i32 128, i32 128, i32 128, i32 128>
  %372 = ashr <4 x i32> %371, <i32 8, i32 8, i32 8, i32 8>
  %373 = add <4 x i32> %370, <i32 128, i32 128, i32 128, i32 128>
  %374 = ashr <4 x i32> %373, <i32 8, i32 8, i32 8, i32 8>
  %375 = bitcast <4 x i32> %372 to <8 x i16>
  %376 = bitcast <4 x i32> %374 to <8 x i16>
  %377 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %375, <8 x i16> %376) #3
  %378 = shufflevector <16 x i8> %377, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %379 = bitcast <16 x i8> %378 to <2 x i64>
  %380 = extractelement <2 x i64> %379, i32 0
  %381 = bitcast i8* %368 to i64*
  store i64 %380, i64* %381, align 1
  %382 = getelementptr inbounds i8, i8* %368, i64 %1
  %383 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 14, i16 242, i16 14, i16 242, i16 14, i16 242, i16 14, i16 242>) #3
  %384 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 14, i16 242, i16 14, i16 242, i16 14, i16 242, i16 14, i16 242>) #3
  %385 = add <4 x i32> %383, <i32 128, i32 128, i32 128, i32 128>
  %386 = ashr <4 x i32> %385, <i32 8, i32 8, i32 8, i32 8>
  %387 = add <4 x i32> %384, <i32 128, i32 128, i32 128, i32 128>
  %388 = ashr <4 x i32> %387, <i32 8, i32 8, i32 8, i32 8>
  %389 = bitcast <4 x i32> %386 to <8 x i16>
  %390 = bitcast <4 x i32> %388 to <8 x i16>
  %391 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %389, <8 x i16> %390) #3
  %392 = shufflevector <16 x i8> %391, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %393 = bitcast <16 x i8> %392 to <2 x i64>
  %394 = extractelement <2 x i64> %393, i32 0
  %395 = bitcast i8* %382 to i64*
  store i64 %394, i64* %395, align 1
  %396 = getelementptr inbounds i8, i8* %382, i64 %1
  %397 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 12, i16 244, i16 12, i16 244, i16 12, i16 244, i16 12, i16 244>) #3
  %398 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 12, i16 244, i16 12, i16 244, i16 12, i16 244, i16 12, i16 244>) #3
  %399 = add <4 x i32> %397, <i32 128, i32 128, i32 128, i32 128>
  %400 = ashr <4 x i32> %399, <i32 8, i32 8, i32 8, i32 8>
  %401 = add <4 x i32> %398, <i32 128, i32 128, i32 128, i32 128>
  %402 = ashr <4 x i32> %401, <i32 8, i32 8, i32 8, i32 8>
  %403 = bitcast <4 x i32> %400 to <8 x i16>
  %404 = bitcast <4 x i32> %402 to <8 x i16>
  %405 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %403, <8 x i16> %404) #3
  %406 = shufflevector <16 x i8> %405, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %407 = bitcast <16 x i8> %406 to <2 x i64>
  %408 = extractelement <2 x i64> %407, i32 0
  %409 = bitcast i8* %396 to i64*
  store i64 %408, i64* %409, align 1
  %410 = getelementptr inbounds i8, i8* %396, i64 %1
  %411 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 10, i16 246, i16 10, i16 246, i16 10, i16 246, i16 10, i16 246>) #3
  %412 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 10, i16 246, i16 10, i16 246, i16 10, i16 246, i16 10, i16 246>) #3
  %413 = add <4 x i32> %411, <i32 128, i32 128, i32 128, i32 128>
  %414 = ashr <4 x i32> %413, <i32 8, i32 8, i32 8, i32 8>
  %415 = add <4 x i32> %412, <i32 128, i32 128, i32 128, i32 128>
  %416 = ashr <4 x i32> %415, <i32 8, i32 8, i32 8, i32 8>
  %417 = bitcast <4 x i32> %414 to <8 x i16>
  %418 = bitcast <4 x i32> %416 to <8 x i16>
  %419 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %417, <8 x i16> %418) #3
  %420 = shufflevector <16 x i8> %419, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %421 = bitcast <16 x i8> %420 to <2 x i64>
  %422 = extractelement <2 x i64> %421, i32 0
  %423 = bitcast i8* %410 to i64*
  store i64 %422, i64* %423, align 1
  %424 = getelementptr inbounds i8, i8* %410, i64 %1
  %425 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 9, i16 247, i16 9, i16 247, i16 9, i16 247, i16 9, i16 247>) #3
  %426 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 9, i16 247, i16 9, i16 247, i16 9, i16 247, i16 9, i16 247>) #3
  %427 = add <4 x i32> %425, <i32 128, i32 128, i32 128, i32 128>
  %428 = ashr <4 x i32> %427, <i32 8, i32 8, i32 8, i32 8>
  %429 = add <4 x i32> %426, <i32 128, i32 128, i32 128, i32 128>
  %430 = ashr <4 x i32> %429, <i32 8, i32 8, i32 8, i32 8>
  %431 = bitcast <4 x i32> %428 to <8 x i16>
  %432 = bitcast <4 x i32> %430 to <8 x i16>
  %433 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %431, <8 x i16> %432) #3
  %434 = shufflevector <16 x i8> %433, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %435 = bitcast <16 x i8> %434 to <2 x i64>
  %436 = extractelement <2 x i64> %435, i32 0
  %437 = bitcast i8* %424 to i64*
  store i64 %436, i64* %437, align 1
  %438 = getelementptr inbounds i8, i8* %424, i64 %1
  %439 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 8, i16 248, i16 8, i16 248, i16 8, i16 248, i16 8, i16 248>) #3
  %440 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 8, i16 248, i16 8, i16 248, i16 8, i16 248, i16 8, i16 248>) #3
  %441 = add <4 x i32> %439, <i32 128, i32 128, i32 128, i32 128>
  %442 = ashr <4 x i32> %441, <i32 8, i32 8, i32 8, i32 8>
  %443 = add <4 x i32> %440, <i32 128, i32 128, i32 128, i32 128>
  %444 = ashr <4 x i32> %443, <i32 8, i32 8, i32 8, i32 8>
  %445 = bitcast <4 x i32> %442 to <8 x i16>
  %446 = bitcast <4 x i32> %444 to <8 x i16>
  %447 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %445, <8 x i16> %446) #3
  %448 = shufflevector <16 x i8> %447, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %449 = bitcast <16 x i8> %448 to <2 x i64>
  %450 = extractelement <2 x i64> %449, i32 0
  %451 = bitcast i8* %438 to i64*
  store i64 %450, i64* %451, align 1
  %452 = getelementptr inbounds i8, i8* %438, i64 %1
  %453 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 8, i16 248, i16 8, i16 248, i16 8, i16 248, i16 8, i16 248>) #3
  %454 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 8, i16 248, i16 8, i16 248, i16 8, i16 248, i16 8, i16 248>) #3
  %455 = add <4 x i32> %453, <i32 128, i32 128, i32 128, i32 128>
  %456 = ashr <4 x i32> %455, <i32 8, i32 8, i32 8, i32 8>
  %457 = add <4 x i32> %454, <i32 128, i32 128, i32 128, i32 128>
  %458 = ashr <4 x i32> %457, <i32 8, i32 8, i32 8, i32 8>
  %459 = bitcast <4 x i32> %456 to <8 x i16>
  %460 = bitcast <4 x i32> %458 to <8 x i16>
  %461 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %459, <8 x i16> %460) #3
  %462 = shufflevector <16 x i8> %461, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %463 = bitcast <16 x i8> %462 to <2 x i64>
  %464 = extractelement <2 x i64> %463, i32 0
  %465 = bitcast i8* %452 to i64*
  store i64 %464, i64* %465, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_smooth_v_predictor_16x4_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i8, i8* %3, i64 3
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <4 x i32> undef, i32 %7, i32 0
  %9 = bitcast <4 x i32> %8 to <8 x i16>
  %10 = bitcast i8* %2 to i64*
  %11 = getelementptr inbounds i8, i8* %2, i64 8
  %12 = bitcast i8* %11 to i64*
  br label %13

13:                                               ; preds = %13, %4
  %14 = phi i64 [ 0, %4 ], [ %71, %13 ]
  %15 = phi i8* [ %0, %4 ], [ %70, %13 ]
  %16 = getelementptr inbounds i8, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @sm_weight_arrays, i64 0, i64 4), i64 %14
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %18, i32 0
  %20 = bitcast <4 x i32> %19 to <8 x i16>
  %21 = shufflevector <8 x i16> %20, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %22 = bitcast <8 x i16> %21 to <4 x i32>
  %23 = shufflevector <4 x i32> %22, <4 x i32> undef, <4 x i32> zeroinitializer
  %24 = sub <8 x i16> <i16 256, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>, %20
  %25 = bitcast <8 x i16> %24 to <16 x i8>
  %26 = shufflevector <16 x i8> %25, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %27 = bitcast <16 x i8> %26 to <8 x i16>
  %28 = bitcast <4 x i32> %23 to <8 x i16>
  %29 = load i64, i64* %10, align 1
  %30 = insertelement <2 x i64> undef, i64 %29, i32 0
  %31 = bitcast <2 x i64> %30 to <16 x i8>
  %32 = shufflevector <16 x i8> %31, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %33 = bitcast <16 x i8> %32 to <8 x i16>
  %34 = shufflevector <8 x i16> %33, <8 x i16> %27, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %35 = shufflevector <8 x i16> %33, <8 x i16> %27, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %36 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %34, <8 x i16> %28) #3
  %37 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %35, <8 x i16> %28) #3
  %38 = add <4 x i32> %36, <i32 128, i32 128, i32 128, i32 128>
  %39 = add <4 x i32> %37, <i32 128, i32 128, i32 128, i32 128>
  %40 = ashr <4 x i32> %38, <i32 8, i32 8, i32 8, i32 8>
  %41 = ashr <4 x i32> %39, <i32 8, i32 8, i32 8, i32 8>
  %42 = bitcast <4 x i32> %40 to <8 x i16>
  %43 = bitcast <4 x i32> %41 to <8 x i16>
  %44 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %42, <8 x i16> %43) #3
  %45 = shufflevector <16 x i8> %44, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %46 = bitcast <16 x i8> %45 to <2 x i64>
  %47 = extractelement <2 x i64> %46, i32 0
  %48 = bitcast i8* %15 to i64*
  store i64 %47, i64* %48, align 1
  %49 = load i64, i64* %12, align 1
  %50 = insertelement <2 x i64> undef, i64 %49, i32 0
  %51 = bitcast <2 x i64> %50 to <16 x i8>
  %52 = shufflevector <16 x i8> %51, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %53 = bitcast <16 x i8> %52 to <8 x i16>
  %54 = shufflevector <8 x i16> %53, <8 x i16> %27, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %55 = shufflevector <8 x i16> %53, <8 x i16> %27, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %56 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %54, <8 x i16> %28) #3
  %57 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %55, <8 x i16> %28) #3
  %58 = add <4 x i32> %56, <i32 128, i32 128, i32 128, i32 128>
  %59 = add <4 x i32> %57, <i32 128, i32 128, i32 128, i32 128>
  %60 = ashr <4 x i32> %58, <i32 8, i32 8, i32 8, i32 8>
  %61 = ashr <4 x i32> %59, <i32 8, i32 8, i32 8, i32 8>
  %62 = bitcast <4 x i32> %60 to <8 x i16>
  %63 = bitcast <4 x i32> %61 to <8 x i16>
  %64 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %62, <8 x i16> %63) #3
  %65 = shufflevector <16 x i8> %64, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %66 = bitcast <16 x i8> %65 to <2 x i64>
  %67 = getelementptr inbounds i8, i8* %15, i64 8
  %68 = extractelement <2 x i64> %66, i32 0
  %69 = bitcast i8* %67 to i64*
  store i64 %68, i64* %69, align 1
  %70 = getelementptr inbounds i8, i8* %15, i64 %1
  %71 = add nuw nsw i64 %14, 1
  %72 = icmp eq i64 %71, 4
  br i1 %72, label %73, label %13

73:                                               ; preds = %13
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_smooth_v_predictor_16x8_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i8, i8* %3, i64 7
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <4 x i32> undef, i32 %7, i32 0
  %9 = bitcast <4 x i32> %8 to <8 x i16>
  %10 = bitcast i8* %2 to i64*
  %11 = getelementptr inbounds i8, i8* %2, i64 8
  %12 = bitcast i8* %11 to i64*
  br label %13

13:                                               ; preds = %13, %4
  %14 = phi i64 [ 0, %4 ], [ %71, %13 ]
  %15 = phi i8* [ %0, %4 ], [ %70, %13 ]
  %16 = getelementptr inbounds i8, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @sm_weight_arrays, i64 0, i64 8), i64 %14
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %18, i32 0
  %20 = bitcast <4 x i32> %19 to <8 x i16>
  %21 = shufflevector <8 x i16> %20, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %22 = bitcast <8 x i16> %21 to <4 x i32>
  %23 = shufflevector <4 x i32> %22, <4 x i32> undef, <4 x i32> zeroinitializer
  %24 = sub <8 x i16> <i16 256, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>, %20
  %25 = bitcast <8 x i16> %24 to <16 x i8>
  %26 = shufflevector <16 x i8> %25, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %27 = bitcast <16 x i8> %26 to <8 x i16>
  %28 = bitcast <4 x i32> %23 to <8 x i16>
  %29 = load i64, i64* %10, align 1
  %30 = insertelement <2 x i64> undef, i64 %29, i32 0
  %31 = bitcast <2 x i64> %30 to <16 x i8>
  %32 = shufflevector <16 x i8> %31, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %33 = bitcast <16 x i8> %32 to <8 x i16>
  %34 = shufflevector <8 x i16> %33, <8 x i16> %27, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %35 = shufflevector <8 x i16> %33, <8 x i16> %27, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %36 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %34, <8 x i16> %28) #3
  %37 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %35, <8 x i16> %28) #3
  %38 = add <4 x i32> %36, <i32 128, i32 128, i32 128, i32 128>
  %39 = add <4 x i32> %37, <i32 128, i32 128, i32 128, i32 128>
  %40 = ashr <4 x i32> %38, <i32 8, i32 8, i32 8, i32 8>
  %41 = ashr <4 x i32> %39, <i32 8, i32 8, i32 8, i32 8>
  %42 = bitcast <4 x i32> %40 to <8 x i16>
  %43 = bitcast <4 x i32> %41 to <8 x i16>
  %44 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %42, <8 x i16> %43) #3
  %45 = shufflevector <16 x i8> %44, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %46 = bitcast <16 x i8> %45 to <2 x i64>
  %47 = extractelement <2 x i64> %46, i32 0
  %48 = bitcast i8* %15 to i64*
  store i64 %47, i64* %48, align 1
  %49 = load i64, i64* %12, align 1
  %50 = insertelement <2 x i64> undef, i64 %49, i32 0
  %51 = bitcast <2 x i64> %50 to <16 x i8>
  %52 = shufflevector <16 x i8> %51, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %53 = bitcast <16 x i8> %52 to <8 x i16>
  %54 = shufflevector <8 x i16> %53, <8 x i16> %27, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %55 = shufflevector <8 x i16> %53, <8 x i16> %27, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %56 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %54, <8 x i16> %28) #3
  %57 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %55, <8 x i16> %28) #3
  %58 = add <4 x i32> %56, <i32 128, i32 128, i32 128, i32 128>
  %59 = add <4 x i32> %57, <i32 128, i32 128, i32 128, i32 128>
  %60 = ashr <4 x i32> %58, <i32 8, i32 8, i32 8, i32 8>
  %61 = ashr <4 x i32> %59, <i32 8, i32 8, i32 8, i32 8>
  %62 = bitcast <4 x i32> %60 to <8 x i16>
  %63 = bitcast <4 x i32> %61 to <8 x i16>
  %64 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %62, <8 x i16> %63) #3
  %65 = shufflevector <16 x i8> %64, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %66 = bitcast <16 x i8> %65 to <2 x i64>
  %67 = getelementptr inbounds i8, i8* %15, i64 8
  %68 = extractelement <2 x i64> %66, i32 0
  %69 = bitcast i8* %67 to i64*
  store i64 %68, i64* %69, align 1
  %70 = getelementptr inbounds i8, i8* %15, i64 %1
  %71 = add nuw nsw i64 %14, 1
  %72 = icmp eq i64 %71, 8
  br i1 %72, label %73, label %13

73:                                               ; preds = %13
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_smooth_v_predictor_16x16_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i8, i8* %3, i64 15
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <4 x i32> undef, i32 %7, i32 0
  %9 = bitcast <4 x i32> %8 to <8 x i16>
  %10 = bitcast i8* %2 to i64*
  %11 = getelementptr inbounds i8, i8* %2, i64 8
  %12 = bitcast i8* %11 to i64*
  br label %13

13:                                               ; preds = %13, %4
  %14 = phi i64 [ 0, %4 ], [ %71, %13 ]
  %15 = phi i8* [ %0, %4 ], [ %70, %13 ]
  %16 = getelementptr inbounds i8, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @sm_weight_arrays, i64 0, i64 16), i64 %14
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %18, i32 0
  %20 = bitcast <4 x i32> %19 to <8 x i16>
  %21 = shufflevector <8 x i16> %20, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %22 = bitcast <8 x i16> %21 to <4 x i32>
  %23 = shufflevector <4 x i32> %22, <4 x i32> undef, <4 x i32> zeroinitializer
  %24 = sub <8 x i16> <i16 256, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>, %20
  %25 = bitcast <8 x i16> %24 to <16 x i8>
  %26 = shufflevector <16 x i8> %25, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %27 = bitcast <16 x i8> %26 to <8 x i16>
  %28 = bitcast <4 x i32> %23 to <8 x i16>
  %29 = load i64, i64* %10, align 1
  %30 = insertelement <2 x i64> undef, i64 %29, i32 0
  %31 = bitcast <2 x i64> %30 to <16 x i8>
  %32 = shufflevector <16 x i8> %31, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %33 = bitcast <16 x i8> %32 to <8 x i16>
  %34 = shufflevector <8 x i16> %33, <8 x i16> %27, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %35 = shufflevector <8 x i16> %33, <8 x i16> %27, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %36 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %34, <8 x i16> %28) #3
  %37 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %35, <8 x i16> %28) #3
  %38 = add <4 x i32> %36, <i32 128, i32 128, i32 128, i32 128>
  %39 = add <4 x i32> %37, <i32 128, i32 128, i32 128, i32 128>
  %40 = ashr <4 x i32> %38, <i32 8, i32 8, i32 8, i32 8>
  %41 = ashr <4 x i32> %39, <i32 8, i32 8, i32 8, i32 8>
  %42 = bitcast <4 x i32> %40 to <8 x i16>
  %43 = bitcast <4 x i32> %41 to <8 x i16>
  %44 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %42, <8 x i16> %43) #3
  %45 = shufflevector <16 x i8> %44, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %46 = bitcast <16 x i8> %45 to <2 x i64>
  %47 = extractelement <2 x i64> %46, i32 0
  %48 = bitcast i8* %15 to i64*
  store i64 %47, i64* %48, align 1
  %49 = load i64, i64* %12, align 1
  %50 = insertelement <2 x i64> undef, i64 %49, i32 0
  %51 = bitcast <2 x i64> %50 to <16 x i8>
  %52 = shufflevector <16 x i8> %51, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %53 = bitcast <16 x i8> %52 to <8 x i16>
  %54 = shufflevector <8 x i16> %53, <8 x i16> %27, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %55 = shufflevector <8 x i16> %53, <8 x i16> %27, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %56 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %54, <8 x i16> %28) #3
  %57 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %55, <8 x i16> %28) #3
  %58 = add <4 x i32> %56, <i32 128, i32 128, i32 128, i32 128>
  %59 = add <4 x i32> %57, <i32 128, i32 128, i32 128, i32 128>
  %60 = ashr <4 x i32> %58, <i32 8, i32 8, i32 8, i32 8>
  %61 = ashr <4 x i32> %59, <i32 8, i32 8, i32 8, i32 8>
  %62 = bitcast <4 x i32> %60 to <8 x i16>
  %63 = bitcast <4 x i32> %61 to <8 x i16>
  %64 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %62, <8 x i16> %63) #3
  %65 = shufflevector <16 x i8> %64, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %66 = bitcast <16 x i8> %65 to <2 x i64>
  %67 = getelementptr inbounds i8, i8* %15, i64 8
  %68 = extractelement <2 x i64> %66, i32 0
  %69 = bitcast i8* %67 to i64*
  store i64 %68, i64* %69, align 1
  %70 = getelementptr inbounds i8, i8* %15, i64 %1
  %71 = add nuw nsw i64 %14, 1
  %72 = icmp eq i64 %71, 16
  br i1 %72, label %73, label %13

73:                                               ; preds = %13
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_smooth_v_predictor_16x32_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i8, i8* %3, i64 31
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <4 x i32> undef, i32 %7, i32 0
  %9 = bitcast <4 x i32> %8 to <8 x i16>
  %10 = bitcast i8* %2 to i64*
  %11 = getelementptr inbounds i8, i8* %2, i64 8
  %12 = bitcast i8* %11 to i64*
  br label %13

13:                                               ; preds = %13, %4
  %14 = phi i64 [ 0, %4 ], [ %71, %13 ]
  %15 = phi i8* [ %0, %4 ], [ %70, %13 ]
  %16 = getelementptr inbounds i8, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @sm_weight_arrays, i64 0, i64 32), i64 %14
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %18, i32 0
  %20 = bitcast <4 x i32> %19 to <8 x i16>
  %21 = shufflevector <8 x i16> %20, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %22 = bitcast <8 x i16> %21 to <4 x i32>
  %23 = shufflevector <4 x i32> %22, <4 x i32> undef, <4 x i32> zeroinitializer
  %24 = sub <8 x i16> <i16 256, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>, %20
  %25 = bitcast <8 x i16> %24 to <16 x i8>
  %26 = shufflevector <16 x i8> %25, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %27 = bitcast <16 x i8> %26 to <8 x i16>
  %28 = bitcast <4 x i32> %23 to <8 x i16>
  %29 = load i64, i64* %10, align 1
  %30 = insertelement <2 x i64> undef, i64 %29, i32 0
  %31 = bitcast <2 x i64> %30 to <16 x i8>
  %32 = shufflevector <16 x i8> %31, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %33 = bitcast <16 x i8> %32 to <8 x i16>
  %34 = shufflevector <8 x i16> %33, <8 x i16> %27, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %35 = shufflevector <8 x i16> %33, <8 x i16> %27, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %36 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %34, <8 x i16> %28) #3
  %37 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %35, <8 x i16> %28) #3
  %38 = add <4 x i32> %36, <i32 128, i32 128, i32 128, i32 128>
  %39 = add <4 x i32> %37, <i32 128, i32 128, i32 128, i32 128>
  %40 = ashr <4 x i32> %38, <i32 8, i32 8, i32 8, i32 8>
  %41 = ashr <4 x i32> %39, <i32 8, i32 8, i32 8, i32 8>
  %42 = bitcast <4 x i32> %40 to <8 x i16>
  %43 = bitcast <4 x i32> %41 to <8 x i16>
  %44 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %42, <8 x i16> %43) #3
  %45 = shufflevector <16 x i8> %44, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %46 = bitcast <16 x i8> %45 to <2 x i64>
  %47 = extractelement <2 x i64> %46, i32 0
  %48 = bitcast i8* %15 to i64*
  store i64 %47, i64* %48, align 1
  %49 = load i64, i64* %12, align 1
  %50 = insertelement <2 x i64> undef, i64 %49, i32 0
  %51 = bitcast <2 x i64> %50 to <16 x i8>
  %52 = shufflevector <16 x i8> %51, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %53 = bitcast <16 x i8> %52 to <8 x i16>
  %54 = shufflevector <8 x i16> %53, <8 x i16> %27, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %55 = shufflevector <8 x i16> %53, <8 x i16> %27, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %56 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %54, <8 x i16> %28) #3
  %57 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %55, <8 x i16> %28) #3
  %58 = add <4 x i32> %56, <i32 128, i32 128, i32 128, i32 128>
  %59 = add <4 x i32> %57, <i32 128, i32 128, i32 128, i32 128>
  %60 = ashr <4 x i32> %58, <i32 8, i32 8, i32 8, i32 8>
  %61 = ashr <4 x i32> %59, <i32 8, i32 8, i32 8, i32 8>
  %62 = bitcast <4 x i32> %60 to <8 x i16>
  %63 = bitcast <4 x i32> %61 to <8 x i16>
  %64 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %62, <8 x i16> %63) #3
  %65 = shufflevector <16 x i8> %64, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %66 = bitcast <16 x i8> %65 to <2 x i64>
  %67 = getelementptr inbounds i8, i8* %15, i64 8
  %68 = extractelement <2 x i64> %66, i32 0
  %69 = bitcast i8* %67 to i64*
  store i64 %68, i64* %69, align 1
  %70 = getelementptr inbounds i8, i8* %15, i64 %1
  %71 = add nuw nsw i64 %14, 1
  %72 = icmp eq i64 %71, 32
  br i1 %72, label %73, label %13

73:                                               ; preds = %13
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_smooth_v_predictor_32x8_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i8, i8* %3, i64 7
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <4 x i32> undef, i32 %7, i32 0
  %9 = bitcast <4 x i32> %8 to <8 x i16>
  %10 = bitcast i8* %2 to i64*
  %11 = getelementptr inbounds i8, i8* %2, i64 8
  %12 = bitcast i8* %11 to i64*
  %13 = getelementptr inbounds i8, i8* %2, i64 16
  %14 = bitcast i8* %13 to i64*
  %15 = getelementptr inbounds i8, i8* %2, i64 24
  %16 = bitcast i8* %15 to i64*
  br label %17

17:                                               ; preds = %17, %4
  %18 = phi i64 [ 0, %4 ], [ %117, %17 ]
  %19 = phi i8* [ %0, %4 ], [ %116, %17 ]
  %20 = getelementptr inbounds i8, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @sm_weight_arrays, i64 0, i64 8), i64 %18
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %22, i32 0
  %24 = bitcast <4 x i32> %23 to <8 x i16>
  %25 = shufflevector <8 x i16> %24, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %26 = bitcast <8 x i16> %25 to <4 x i32>
  %27 = shufflevector <4 x i32> %26, <4 x i32> undef, <4 x i32> zeroinitializer
  %28 = sub <8 x i16> <i16 256, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>, %24
  %29 = bitcast <8 x i16> %28 to <16 x i8>
  %30 = shufflevector <16 x i8> %29, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %31 = bitcast <16 x i8> %30 to <8 x i16>
  %32 = bitcast <4 x i32> %27 to <8 x i16>
  %33 = load i64, i64* %10, align 1
  %34 = insertelement <2 x i64> undef, i64 %33, i32 0
  %35 = bitcast <2 x i64> %34 to <16 x i8>
  %36 = shufflevector <16 x i8> %35, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %37 = bitcast <16 x i8> %36 to <8 x i16>
  %38 = shufflevector <8 x i16> %37, <8 x i16> %31, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %39 = shufflevector <8 x i16> %37, <8 x i16> %31, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %40 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %38, <8 x i16> %32) #3
  %41 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %39, <8 x i16> %32) #3
  %42 = add <4 x i32> %40, <i32 128, i32 128, i32 128, i32 128>
  %43 = add <4 x i32> %41, <i32 128, i32 128, i32 128, i32 128>
  %44 = ashr <4 x i32> %42, <i32 8, i32 8, i32 8, i32 8>
  %45 = ashr <4 x i32> %43, <i32 8, i32 8, i32 8, i32 8>
  %46 = bitcast <4 x i32> %44 to <8 x i16>
  %47 = bitcast <4 x i32> %45 to <8 x i16>
  %48 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %46, <8 x i16> %47) #3
  %49 = shufflevector <16 x i8> %48, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %50 = bitcast <16 x i8> %49 to <2 x i64>
  %51 = extractelement <2 x i64> %50, i32 0
  %52 = bitcast i8* %19 to i64*
  store i64 %51, i64* %52, align 1
  %53 = load i64, i64* %12, align 1
  %54 = insertelement <2 x i64> undef, i64 %53, i32 0
  %55 = bitcast <2 x i64> %54 to <16 x i8>
  %56 = shufflevector <16 x i8> %55, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %57 = bitcast <16 x i8> %56 to <8 x i16>
  %58 = shufflevector <8 x i16> %57, <8 x i16> %31, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %59 = shufflevector <8 x i16> %57, <8 x i16> %31, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %60 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %58, <8 x i16> %32) #3
  %61 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %59, <8 x i16> %32) #3
  %62 = add <4 x i32> %60, <i32 128, i32 128, i32 128, i32 128>
  %63 = add <4 x i32> %61, <i32 128, i32 128, i32 128, i32 128>
  %64 = ashr <4 x i32> %62, <i32 8, i32 8, i32 8, i32 8>
  %65 = ashr <4 x i32> %63, <i32 8, i32 8, i32 8, i32 8>
  %66 = bitcast <4 x i32> %64 to <8 x i16>
  %67 = bitcast <4 x i32> %65 to <8 x i16>
  %68 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %66, <8 x i16> %67) #3
  %69 = shufflevector <16 x i8> %68, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %70 = bitcast <16 x i8> %69 to <2 x i64>
  %71 = getelementptr inbounds i8, i8* %19, i64 8
  %72 = extractelement <2 x i64> %70, i32 0
  %73 = bitcast i8* %71 to i64*
  store i64 %72, i64* %73, align 1
  %74 = load i64, i64* %14, align 1
  %75 = insertelement <2 x i64> undef, i64 %74, i32 0
  %76 = bitcast <2 x i64> %75 to <16 x i8>
  %77 = shufflevector <16 x i8> %76, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %78 = bitcast <16 x i8> %77 to <8 x i16>
  %79 = shufflevector <8 x i16> %78, <8 x i16> %31, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %80 = shufflevector <8 x i16> %78, <8 x i16> %31, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %81 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %79, <8 x i16> %32) #3
  %82 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %80, <8 x i16> %32) #3
  %83 = add <4 x i32> %81, <i32 128, i32 128, i32 128, i32 128>
  %84 = add <4 x i32> %82, <i32 128, i32 128, i32 128, i32 128>
  %85 = ashr <4 x i32> %83, <i32 8, i32 8, i32 8, i32 8>
  %86 = ashr <4 x i32> %84, <i32 8, i32 8, i32 8, i32 8>
  %87 = bitcast <4 x i32> %85 to <8 x i16>
  %88 = bitcast <4 x i32> %86 to <8 x i16>
  %89 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %87, <8 x i16> %88) #3
  %90 = shufflevector <16 x i8> %89, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %91 = bitcast <16 x i8> %90 to <2 x i64>
  %92 = getelementptr inbounds i8, i8* %19, i64 16
  %93 = extractelement <2 x i64> %91, i32 0
  %94 = bitcast i8* %92 to i64*
  store i64 %93, i64* %94, align 1
  %95 = load i64, i64* %16, align 1
  %96 = insertelement <2 x i64> undef, i64 %95, i32 0
  %97 = bitcast <2 x i64> %96 to <16 x i8>
  %98 = shufflevector <16 x i8> %97, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %99 = bitcast <16 x i8> %98 to <8 x i16>
  %100 = shufflevector <8 x i16> %99, <8 x i16> %31, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %101 = shufflevector <8 x i16> %99, <8 x i16> %31, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %102 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %100, <8 x i16> %32) #3
  %103 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %101, <8 x i16> %32) #3
  %104 = add <4 x i32> %102, <i32 128, i32 128, i32 128, i32 128>
  %105 = add <4 x i32> %103, <i32 128, i32 128, i32 128, i32 128>
  %106 = ashr <4 x i32> %104, <i32 8, i32 8, i32 8, i32 8>
  %107 = ashr <4 x i32> %105, <i32 8, i32 8, i32 8, i32 8>
  %108 = bitcast <4 x i32> %106 to <8 x i16>
  %109 = bitcast <4 x i32> %107 to <8 x i16>
  %110 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %108, <8 x i16> %109) #3
  %111 = shufflevector <16 x i8> %110, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %112 = bitcast <16 x i8> %111 to <2 x i64>
  %113 = getelementptr inbounds i8, i8* %19, i64 24
  %114 = extractelement <2 x i64> %112, i32 0
  %115 = bitcast i8* %113 to i64*
  store i64 %114, i64* %115, align 1
  %116 = getelementptr inbounds i8, i8* %19, i64 %1
  %117 = add nuw nsw i64 %18, 1
  %118 = icmp eq i64 %117, 8
  br i1 %118, label %119, label %17

119:                                              ; preds = %17
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_smooth_v_predictor_32x16_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i8, i8* %3, i64 15
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <4 x i32> undef, i32 %7, i32 0
  %9 = bitcast <4 x i32> %8 to <8 x i16>
  %10 = bitcast i8* %2 to i64*
  %11 = getelementptr inbounds i8, i8* %2, i64 8
  %12 = bitcast i8* %11 to i64*
  %13 = getelementptr inbounds i8, i8* %2, i64 16
  %14 = bitcast i8* %13 to i64*
  %15 = getelementptr inbounds i8, i8* %2, i64 24
  %16 = bitcast i8* %15 to i64*
  br label %17

17:                                               ; preds = %17, %4
  %18 = phi i64 [ 0, %4 ], [ %117, %17 ]
  %19 = phi i8* [ %0, %4 ], [ %116, %17 ]
  %20 = getelementptr inbounds i8, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @sm_weight_arrays, i64 0, i64 16), i64 %18
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %22, i32 0
  %24 = bitcast <4 x i32> %23 to <8 x i16>
  %25 = shufflevector <8 x i16> %24, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %26 = bitcast <8 x i16> %25 to <4 x i32>
  %27 = shufflevector <4 x i32> %26, <4 x i32> undef, <4 x i32> zeroinitializer
  %28 = sub <8 x i16> <i16 256, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>, %24
  %29 = bitcast <8 x i16> %28 to <16 x i8>
  %30 = shufflevector <16 x i8> %29, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %31 = bitcast <16 x i8> %30 to <8 x i16>
  %32 = bitcast <4 x i32> %27 to <8 x i16>
  %33 = load i64, i64* %10, align 1
  %34 = insertelement <2 x i64> undef, i64 %33, i32 0
  %35 = bitcast <2 x i64> %34 to <16 x i8>
  %36 = shufflevector <16 x i8> %35, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %37 = bitcast <16 x i8> %36 to <8 x i16>
  %38 = shufflevector <8 x i16> %37, <8 x i16> %31, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %39 = shufflevector <8 x i16> %37, <8 x i16> %31, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %40 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %38, <8 x i16> %32) #3
  %41 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %39, <8 x i16> %32) #3
  %42 = add <4 x i32> %40, <i32 128, i32 128, i32 128, i32 128>
  %43 = add <4 x i32> %41, <i32 128, i32 128, i32 128, i32 128>
  %44 = ashr <4 x i32> %42, <i32 8, i32 8, i32 8, i32 8>
  %45 = ashr <4 x i32> %43, <i32 8, i32 8, i32 8, i32 8>
  %46 = bitcast <4 x i32> %44 to <8 x i16>
  %47 = bitcast <4 x i32> %45 to <8 x i16>
  %48 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %46, <8 x i16> %47) #3
  %49 = shufflevector <16 x i8> %48, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %50 = bitcast <16 x i8> %49 to <2 x i64>
  %51 = extractelement <2 x i64> %50, i32 0
  %52 = bitcast i8* %19 to i64*
  store i64 %51, i64* %52, align 1
  %53 = load i64, i64* %12, align 1
  %54 = insertelement <2 x i64> undef, i64 %53, i32 0
  %55 = bitcast <2 x i64> %54 to <16 x i8>
  %56 = shufflevector <16 x i8> %55, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %57 = bitcast <16 x i8> %56 to <8 x i16>
  %58 = shufflevector <8 x i16> %57, <8 x i16> %31, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %59 = shufflevector <8 x i16> %57, <8 x i16> %31, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %60 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %58, <8 x i16> %32) #3
  %61 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %59, <8 x i16> %32) #3
  %62 = add <4 x i32> %60, <i32 128, i32 128, i32 128, i32 128>
  %63 = add <4 x i32> %61, <i32 128, i32 128, i32 128, i32 128>
  %64 = ashr <4 x i32> %62, <i32 8, i32 8, i32 8, i32 8>
  %65 = ashr <4 x i32> %63, <i32 8, i32 8, i32 8, i32 8>
  %66 = bitcast <4 x i32> %64 to <8 x i16>
  %67 = bitcast <4 x i32> %65 to <8 x i16>
  %68 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %66, <8 x i16> %67) #3
  %69 = shufflevector <16 x i8> %68, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %70 = bitcast <16 x i8> %69 to <2 x i64>
  %71 = getelementptr inbounds i8, i8* %19, i64 8
  %72 = extractelement <2 x i64> %70, i32 0
  %73 = bitcast i8* %71 to i64*
  store i64 %72, i64* %73, align 1
  %74 = load i64, i64* %14, align 1
  %75 = insertelement <2 x i64> undef, i64 %74, i32 0
  %76 = bitcast <2 x i64> %75 to <16 x i8>
  %77 = shufflevector <16 x i8> %76, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %78 = bitcast <16 x i8> %77 to <8 x i16>
  %79 = shufflevector <8 x i16> %78, <8 x i16> %31, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %80 = shufflevector <8 x i16> %78, <8 x i16> %31, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %81 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %79, <8 x i16> %32) #3
  %82 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %80, <8 x i16> %32) #3
  %83 = add <4 x i32> %81, <i32 128, i32 128, i32 128, i32 128>
  %84 = add <4 x i32> %82, <i32 128, i32 128, i32 128, i32 128>
  %85 = ashr <4 x i32> %83, <i32 8, i32 8, i32 8, i32 8>
  %86 = ashr <4 x i32> %84, <i32 8, i32 8, i32 8, i32 8>
  %87 = bitcast <4 x i32> %85 to <8 x i16>
  %88 = bitcast <4 x i32> %86 to <8 x i16>
  %89 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %87, <8 x i16> %88) #3
  %90 = shufflevector <16 x i8> %89, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %91 = bitcast <16 x i8> %90 to <2 x i64>
  %92 = getelementptr inbounds i8, i8* %19, i64 16
  %93 = extractelement <2 x i64> %91, i32 0
  %94 = bitcast i8* %92 to i64*
  store i64 %93, i64* %94, align 1
  %95 = load i64, i64* %16, align 1
  %96 = insertelement <2 x i64> undef, i64 %95, i32 0
  %97 = bitcast <2 x i64> %96 to <16 x i8>
  %98 = shufflevector <16 x i8> %97, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %99 = bitcast <16 x i8> %98 to <8 x i16>
  %100 = shufflevector <8 x i16> %99, <8 x i16> %31, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %101 = shufflevector <8 x i16> %99, <8 x i16> %31, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %102 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %100, <8 x i16> %32) #3
  %103 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %101, <8 x i16> %32) #3
  %104 = add <4 x i32> %102, <i32 128, i32 128, i32 128, i32 128>
  %105 = add <4 x i32> %103, <i32 128, i32 128, i32 128, i32 128>
  %106 = ashr <4 x i32> %104, <i32 8, i32 8, i32 8, i32 8>
  %107 = ashr <4 x i32> %105, <i32 8, i32 8, i32 8, i32 8>
  %108 = bitcast <4 x i32> %106 to <8 x i16>
  %109 = bitcast <4 x i32> %107 to <8 x i16>
  %110 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %108, <8 x i16> %109) #3
  %111 = shufflevector <16 x i8> %110, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %112 = bitcast <16 x i8> %111 to <2 x i64>
  %113 = getelementptr inbounds i8, i8* %19, i64 24
  %114 = extractelement <2 x i64> %112, i32 0
  %115 = bitcast i8* %113 to i64*
  store i64 %114, i64* %115, align 1
  %116 = getelementptr inbounds i8, i8* %19, i64 %1
  %117 = add nuw nsw i64 %18, 1
  %118 = icmp eq i64 %117, 16
  br i1 %118, label %119, label %17

119:                                              ; preds = %17
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_smooth_v_predictor_32x32_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i8, i8* %3, i64 31
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <4 x i32> undef, i32 %7, i32 0
  %9 = bitcast <4 x i32> %8 to <8 x i16>
  %10 = bitcast i8* %2 to i64*
  %11 = getelementptr inbounds i8, i8* %2, i64 8
  %12 = bitcast i8* %11 to i64*
  %13 = getelementptr inbounds i8, i8* %2, i64 16
  %14 = bitcast i8* %13 to i64*
  %15 = getelementptr inbounds i8, i8* %2, i64 24
  %16 = bitcast i8* %15 to i64*
  br label %17

17:                                               ; preds = %17, %4
  %18 = phi i64 [ 0, %4 ], [ %117, %17 ]
  %19 = phi i8* [ %0, %4 ], [ %116, %17 ]
  %20 = getelementptr inbounds i8, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @sm_weight_arrays, i64 0, i64 32), i64 %18
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %22, i32 0
  %24 = bitcast <4 x i32> %23 to <8 x i16>
  %25 = shufflevector <8 x i16> %24, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %26 = bitcast <8 x i16> %25 to <4 x i32>
  %27 = shufflevector <4 x i32> %26, <4 x i32> undef, <4 x i32> zeroinitializer
  %28 = sub <8 x i16> <i16 256, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>, %24
  %29 = bitcast <8 x i16> %28 to <16 x i8>
  %30 = shufflevector <16 x i8> %29, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %31 = bitcast <16 x i8> %30 to <8 x i16>
  %32 = bitcast <4 x i32> %27 to <8 x i16>
  %33 = load i64, i64* %10, align 1
  %34 = insertelement <2 x i64> undef, i64 %33, i32 0
  %35 = bitcast <2 x i64> %34 to <16 x i8>
  %36 = shufflevector <16 x i8> %35, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %37 = bitcast <16 x i8> %36 to <8 x i16>
  %38 = shufflevector <8 x i16> %37, <8 x i16> %31, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %39 = shufflevector <8 x i16> %37, <8 x i16> %31, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %40 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %38, <8 x i16> %32) #3
  %41 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %39, <8 x i16> %32) #3
  %42 = add <4 x i32> %40, <i32 128, i32 128, i32 128, i32 128>
  %43 = add <4 x i32> %41, <i32 128, i32 128, i32 128, i32 128>
  %44 = ashr <4 x i32> %42, <i32 8, i32 8, i32 8, i32 8>
  %45 = ashr <4 x i32> %43, <i32 8, i32 8, i32 8, i32 8>
  %46 = bitcast <4 x i32> %44 to <8 x i16>
  %47 = bitcast <4 x i32> %45 to <8 x i16>
  %48 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %46, <8 x i16> %47) #3
  %49 = shufflevector <16 x i8> %48, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %50 = bitcast <16 x i8> %49 to <2 x i64>
  %51 = extractelement <2 x i64> %50, i32 0
  %52 = bitcast i8* %19 to i64*
  store i64 %51, i64* %52, align 1
  %53 = load i64, i64* %12, align 1
  %54 = insertelement <2 x i64> undef, i64 %53, i32 0
  %55 = bitcast <2 x i64> %54 to <16 x i8>
  %56 = shufflevector <16 x i8> %55, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %57 = bitcast <16 x i8> %56 to <8 x i16>
  %58 = shufflevector <8 x i16> %57, <8 x i16> %31, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %59 = shufflevector <8 x i16> %57, <8 x i16> %31, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %60 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %58, <8 x i16> %32) #3
  %61 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %59, <8 x i16> %32) #3
  %62 = add <4 x i32> %60, <i32 128, i32 128, i32 128, i32 128>
  %63 = add <4 x i32> %61, <i32 128, i32 128, i32 128, i32 128>
  %64 = ashr <4 x i32> %62, <i32 8, i32 8, i32 8, i32 8>
  %65 = ashr <4 x i32> %63, <i32 8, i32 8, i32 8, i32 8>
  %66 = bitcast <4 x i32> %64 to <8 x i16>
  %67 = bitcast <4 x i32> %65 to <8 x i16>
  %68 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %66, <8 x i16> %67) #3
  %69 = shufflevector <16 x i8> %68, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %70 = bitcast <16 x i8> %69 to <2 x i64>
  %71 = getelementptr inbounds i8, i8* %19, i64 8
  %72 = extractelement <2 x i64> %70, i32 0
  %73 = bitcast i8* %71 to i64*
  store i64 %72, i64* %73, align 1
  %74 = load i64, i64* %14, align 1
  %75 = insertelement <2 x i64> undef, i64 %74, i32 0
  %76 = bitcast <2 x i64> %75 to <16 x i8>
  %77 = shufflevector <16 x i8> %76, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %78 = bitcast <16 x i8> %77 to <8 x i16>
  %79 = shufflevector <8 x i16> %78, <8 x i16> %31, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %80 = shufflevector <8 x i16> %78, <8 x i16> %31, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %81 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %79, <8 x i16> %32) #3
  %82 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %80, <8 x i16> %32) #3
  %83 = add <4 x i32> %81, <i32 128, i32 128, i32 128, i32 128>
  %84 = add <4 x i32> %82, <i32 128, i32 128, i32 128, i32 128>
  %85 = ashr <4 x i32> %83, <i32 8, i32 8, i32 8, i32 8>
  %86 = ashr <4 x i32> %84, <i32 8, i32 8, i32 8, i32 8>
  %87 = bitcast <4 x i32> %85 to <8 x i16>
  %88 = bitcast <4 x i32> %86 to <8 x i16>
  %89 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %87, <8 x i16> %88) #3
  %90 = shufflevector <16 x i8> %89, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %91 = bitcast <16 x i8> %90 to <2 x i64>
  %92 = getelementptr inbounds i8, i8* %19, i64 16
  %93 = extractelement <2 x i64> %91, i32 0
  %94 = bitcast i8* %92 to i64*
  store i64 %93, i64* %94, align 1
  %95 = load i64, i64* %16, align 1
  %96 = insertelement <2 x i64> undef, i64 %95, i32 0
  %97 = bitcast <2 x i64> %96 to <16 x i8>
  %98 = shufflevector <16 x i8> %97, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %99 = bitcast <16 x i8> %98 to <8 x i16>
  %100 = shufflevector <8 x i16> %99, <8 x i16> %31, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %101 = shufflevector <8 x i16> %99, <8 x i16> %31, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %102 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %100, <8 x i16> %32) #3
  %103 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %101, <8 x i16> %32) #3
  %104 = add <4 x i32> %102, <i32 128, i32 128, i32 128, i32 128>
  %105 = add <4 x i32> %103, <i32 128, i32 128, i32 128, i32 128>
  %106 = ashr <4 x i32> %104, <i32 8, i32 8, i32 8, i32 8>
  %107 = ashr <4 x i32> %105, <i32 8, i32 8, i32 8, i32 8>
  %108 = bitcast <4 x i32> %106 to <8 x i16>
  %109 = bitcast <4 x i32> %107 to <8 x i16>
  %110 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %108, <8 x i16> %109) #3
  %111 = shufflevector <16 x i8> %110, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %112 = bitcast <16 x i8> %111 to <2 x i64>
  %113 = getelementptr inbounds i8, i8* %19, i64 24
  %114 = extractelement <2 x i64> %112, i32 0
  %115 = bitcast i8* %113 to i64*
  store i64 %114, i64* %115, align 1
  %116 = getelementptr inbounds i8, i8* %19, i64 %1
  %117 = add nuw nsw i64 %18, 1
  %118 = icmp eq i64 %117, 32
  br i1 %118, label %119, label %17

119:                                              ; preds = %17
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_smooth_v_predictor_32x64_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i8, i8* %3, i64 63
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <4 x i32> undef, i32 %7, i32 0
  %9 = bitcast <4 x i32> %8 to <8 x i16>
  %10 = bitcast i8* %2 to i64*
  %11 = getelementptr inbounds i8, i8* %2, i64 8
  %12 = bitcast i8* %11 to i64*
  %13 = getelementptr inbounds i8, i8* %2, i64 16
  %14 = bitcast i8* %13 to i64*
  %15 = getelementptr inbounds i8, i8* %2, i64 24
  %16 = bitcast i8* %15 to i64*
  br label %17

17:                                               ; preds = %17, %4
  %18 = phi i64 [ 0, %4 ], [ %117, %17 ]
  %19 = phi i8* [ %0, %4 ], [ %116, %17 ]
  %20 = getelementptr inbounds i8, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @sm_weight_arrays, i64 0, i64 64), i64 %18
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %22, i32 0
  %24 = bitcast <4 x i32> %23 to <8 x i16>
  %25 = shufflevector <8 x i16> %24, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %26 = bitcast <8 x i16> %25 to <4 x i32>
  %27 = shufflevector <4 x i32> %26, <4 x i32> undef, <4 x i32> zeroinitializer
  %28 = sub <8 x i16> <i16 256, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>, %24
  %29 = bitcast <8 x i16> %28 to <16 x i8>
  %30 = shufflevector <16 x i8> %29, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %31 = bitcast <16 x i8> %30 to <8 x i16>
  %32 = bitcast <4 x i32> %27 to <8 x i16>
  %33 = load i64, i64* %10, align 1
  %34 = insertelement <2 x i64> undef, i64 %33, i32 0
  %35 = bitcast <2 x i64> %34 to <16 x i8>
  %36 = shufflevector <16 x i8> %35, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %37 = bitcast <16 x i8> %36 to <8 x i16>
  %38 = shufflevector <8 x i16> %37, <8 x i16> %31, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %39 = shufflevector <8 x i16> %37, <8 x i16> %31, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %40 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %38, <8 x i16> %32) #3
  %41 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %39, <8 x i16> %32) #3
  %42 = add <4 x i32> %40, <i32 128, i32 128, i32 128, i32 128>
  %43 = add <4 x i32> %41, <i32 128, i32 128, i32 128, i32 128>
  %44 = ashr <4 x i32> %42, <i32 8, i32 8, i32 8, i32 8>
  %45 = ashr <4 x i32> %43, <i32 8, i32 8, i32 8, i32 8>
  %46 = bitcast <4 x i32> %44 to <8 x i16>
  %47 = bitcast <4 x i32> %45 to <8 x i16>
  %48 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %46, <8 x i16> %47) #3
  %49 = shufflevector <16 x i8> %48, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %50 = bitcast <16 x i8> %49 to <2 x i64>
  %51 = extractelement <2 x i64> %50, i32 0
  %52 = bitcast i8* %19 to i64*
  store i64 %51, i64* %52, align 1
  %53 = load i64, i64* %12, align 1
  %54 = insertelement <2 x i64> undef, i64 %53, i32 0
  %55 = bitcast <2 x i64> %54 to <16 x i8>
  %56 = shufflevector <16 x i8> %55, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %57 = bitcast <16 x i8> %56 to <8 x i16>
  %58 = shufflevector <8 x i16> %57, <8 x i16> %31, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %59 = shufflevector <8 x i16> %57, <8 x i16> %31, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %60 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %58, <8 x i16> %32) #3
  %61 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %59, <8 x i16> %32) #3
  %62 = add <4 x i32> %60, <i32 128, i32 128, i32 128, i32 128>
  %63 = add <4 x i32> %61, <i32 128, i32 128, i32 128, i32 128>
  %64 = ashr <4 x i32> %62, <i32 8, i32 8, i32 8, i32 8>
  %65 = ashr <4 x i32> %63, <i32 8, i32 8, i32 8, i32 8>
  %66 = bitcast <4 x i32> %64 to <8 x i16>
  %67 = bitcast <4 x i32> %65 to <8 x i16>
  %68 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %66, <8 x i16> %67) #3
  %69 = shufflevector <16 x i8> %68, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %70 = bitcast <16 x i8> %69 to <2 x i64>
  %71 = getelementptr inbounds i8, i8* %19, i64 8
  %72 = extractelement <2 x i64> %70, i32 0
  %73 = bitcast i8* %71 to i64*
  store i64 %72, i64* %73, align 1
  %74 = load i64, i64* %14, align 1
  %75 = insertelement <2 x i64> undef, i64 %74, i32 0
  %76 = bitcast <2 x i64> %75 to <16 x i8>
  %77 = shufflevector <16 x i8> %76, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %78 = bitcast <16 x i8> %77 to <8 x i16>
  %79 = shufflevector <8 x i16> %78, <8 x i16> %31, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %80 = shufflevector <8 x i16> %78, <8 x i16> %31, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %81 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %79, <8 x i16> %32) #3
  %82 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %80, <8 x i16> %32) #3
  %83 = add <4 x i32> %81, <i32 128, i32 128, i32 128, i32 128>
  %84 = add <4 x i32> %82, <i32 128, i32 128, i32 128, i32 128>
  %85 = ashr <4 x i32> %83, <i32 8, i32 8, i32 8, i32 8>
  %86 = ashr <4 x i32> %84, <i32 8, i32 8, i32 8, i32 8>
  %87 = bitcast <4 x i32> %85 to <8 x i16>
  %88 = bitcast <4 x i32> %86 to <8 x i16>
  %89 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %87, <8 x i16> %88) #3
  %90 = shufflevector <16 x i8> %89, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %91 = bitcast <16 x i8> %90 to <2 x i64>
  %92 = getelementptr inbounds i8, i8* %19, i64 16
  %93 = extractelement <2 x i64> %91, i32 0
  %94 = bitcast i8* %92 to i64*
  store i64 %93, i64* %94, align 1
  %95 = load i64, i64* %16, align 1
  %96 = insertelement <2 x i64> undef, i64 %95, i32 0
  %97 = bitcast <2 x i64> %96 to <16 x i8>
  %98 = shufflevector <16 x i8> %97, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %99 = bitcast <16 x i8> %98 to <8 x i16>
  %100 = shufflevector <8 x i16> %99, <8 x i16> %31, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %101 = shufflevector <8 x i16> %99, <8 x i16> %31, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %102 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %100, <8 x i16> %32) #3
  %103 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %101, <8 x i16> %32) #3
  %104 = add <4 x i32> %102, <i32 128, i32 128, i32 128, i32 128>
  %105 = add <4 x i32> %103, <i32 128, i32 128, i32 128, i32 128>
  %106 = ashr <4 x i32> %104, <i32 8, i32 8, i32 8, i32 8>
  %107 = ashr <4 x i32> %105, <i32 8, i32 8, i32 8, i32 8>
  %108 = bitcast <4 x i32> %106 to <8 x i16>
  %109 = bitcast <4 x i32> %107 to <8 x i16>
  %110 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %108, <8 x i16> %109) #3
  %111 = shufflevector <16 x i8> %110, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %112 = bitcast <16 x i8> %111 to <2 x i64>
  %113 = getelementptr inbounds i8, i8* %19, i64 24
  %114 = extractelement <2 x i64> %112, i32 0
  %115 = bitcast i8* %113 to i64*
  store i64 %114, i64* %115, align 1
  %116 = getelementptr inbounds i8, i8* %19, i64 %1
  %117 = add nuw nsw i64 %18, 1
  %118 = icmp eq i64 %117, 64
  br i1 %118, label %119, label %17

119:                                              ; preds = %17
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_smooth_v_predictor_64x64_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i8, i8* %3, i64 63
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <4 x i32> undef, i32 %7, i32 0
  %9 = bitcast <4 x i32> %8 to <8 x i16>
  %10 = bitcast i8* %2 to i64*
  %11 = getelementptr inbounds i8, i8* %2, i64 8
  %12 = bitcast i8* %11 to i64*
  %13 = getelementptr inbounds i8, i8* %2, i64 16
  %14 = bitcast i8* %13 to i64*
  %15 = getelementptr inbounds i8, i8* %2, i64 24
  %16 = bitcast i8* %15 to i64*
  %17 = getelementptr inbounds i8, i8* %2, i64 32
  %18 = bitcast i8* %17 to i64*
  %19 = getelementptr inbounds i8, i8* %2, i64 40
  %20 = bitcast i8* %19 to i64*
  %21 = getelementptr inbounds i8, i8* %2, i64 48
  %22 = bitcast i8* %21 to i64*
  %23 = getelementptr inbounds i8, i8* %2, i64 56
  %24 = bitcast i8* %23 to i64*
  br label %25

25:                                               ; preds = %25, %4
  %26 = phi i64 [ 0, %4 ], [ %209, %25 ]
  %27 = phi i8* [ %0, %4 ], [ %208, %25 ]
  %28 = getelementptr inbounds i8, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @sm_weight_arrays, i64 0, i64 64), i64 %26
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %30, i32 0
  %32 = bitcast <4 x i32> %31 to <8 x i16>
  %33 = shufflevector <8 x i16> %32, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %34 = bitcast <8 x i16> %33 to <4 x i32>
  %35 = shufflevector <4 x i32> %34, <4 x i32> undef, <4 x i32> zeroinitializer
  %36 = sub <8 x i16> <i16 256, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>, %32
  %37 = bitcast <8 x i16> %36 to <16 x i8>
  %38 = shufflevector <16 x i8> %37, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %39 = bitcast <16 x i8> %38 to <8 x i16>
  %40 = bitcast <4 x i32> %35 to <8 x i16>
  %41 = load i64, i64* %10, align 1
  %42 = insertelement <2 x i64> undef, i64 %41, i32 0
  %43 = bitcast <2 x i64> %42 to <16 x i8>
  %44 = shufflevector <16 x i8> %43, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %45 = bitcast <16 x i8> %44 to <8 x i16>
  %46 = shufflevector <8 x i16> %45, <8 x i16> %39, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %47 = shufflevector <8 x i16> %45, <8 x i16> %39, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %48 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %46, <8 x i16> %40) #3
  %49 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %47, <8 x i16> %40) #3
  %50 = add <4 x i32> %48, <i32 128, i32 128, i32 128, i32 128>
  %51 = add <4 x i32> %49, <i32 128, i32 128, i32 128, i32 128>
  %52 = ashr <4 x i32> %50, <i32 8, i32 8, i32 8, i32 8>
  %53 = ashr <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %54 = bitcast <4 x i32> %52 to <8 x i16>
  %55 = bitcast <4 x i32> %53 to <8 x i16>
  %56 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %54, <8 x i16> %55) #3
  %57 = shufflevector <16 x i8> %56, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %58 = bitcast <16 x i8> %57 to <2 x i64>
  %59 = extractelement <2 x i64> %58, i32 0
  %60 = bitcast i8* %27 to i64*
  store i64 %59, i64* %60, align 1
  %61 = load i64, i64* %12, align 1
  %62 = insertelement <2 x i64> undef, i64 %61, i32 0
  %63 = bitcast <2 x i64> %62 to <16 x i8>
  %64 = shufflevector <16 x i8> %63, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %65 = bitcast <16 x i8> %64 to <8 x i16>
  %66 = shufflevector <8 x i16> %65, <8 x i16> %39, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %67 = shufflevector <8 x i16> %65, <8 x i16> %39, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %68 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %66, <8 x i16> %40) #3
  %69 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %67, <8 x i16> %40) #3
  %70 = add <4 x i32> %68, <i32 128, i32 128, i32 128, i32 128>
  %71 = add <4 x i32> %69, <i32 128, i32 128, i32 128, i32 128>
  %72 = ashr <4 x i32> %70, <i32 8, i32 8, i32 8, i32 8>
  %73 = ashr <4 x i32> %71, <i32 8, i32 8, i32 8, i32 8>
  %74 = bitcast <4 x i32> %72 to <8 x i16>
  %75 = bitcast <4 x i32> %73 to <8 x i16>
  %76 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %74, <8 x i16> %75) #3
  %77 = shufflevector <16 x i8> %76, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %78 = bitcast <16 x i8> %77 to <2 x i64>
  %79 = getelementptr inbounds i8, i8* %27, i64 8
  %80 = extractelement <2 x i64> %78, i32 0
  %81 = bitcast i8* %79 to i64*
  store i64 %80, i64* %81, align 1
  %82 = load i64, i64* %14, align 1
  %83 = insertelement <2 x i64> undef, i64 %82, i32 0
  %84 = bitcast <2 x i64> %83 to <16 x i8>
  %85 = shufflevector <16 x i8> %84, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %86 = bitcast <16 x i8> %85 to <8 x i16>
  %87 = shufflevector <8 x i16> %86, <8 x i16> %39, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %88 = shufflevector <8 x i16> %86, <8 x i16> %39, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %89 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %87, <8 x i16> %40) #3
  %90 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %88, <8 x i16> %40) #3
  %91 = add <4 x i32> %89, <i32 128, i32 128, i32 128, i32 128>
  %92 = add <4 x i32> %90, <i32 128, i32 128, i32 128, i32 128>
  %93 = ashr <4 x i32> %91, <i32 8, i32 8, i32 8, i32 8>
  %94 = ashr <4 x i32> %92, <i32 8, i32 8, i32 8, i32 8>
  %95 = bitcast <4 x i32> %93 to <8 x i16>
  %96 = bitcast <4 x i32> %94 to <8 x i16>
  %97 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %95, <8 x i16> %96) #3
  %98 = shufflevector <16 x i8> %97, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %99 = bitcast <16 x i8> %98 to <2 x i64>
  %100 = getelementptr inbounds i8, i8* %27, i64 16
  %101 = extractelement <2 x i64> %99, i32 0
  %102 = bitcast i8* %100 to i64*
  store i64 %101, i64* %102, align 1
  %103 = load i64, i64* %16, align 1
  %104 = insertelement <2 x i64> undef, i64 %103, i32 0
  %105 = bitcast <2 x i64> %104 to <16 x i8>
  %106 = shufflevector <16 x i8> %105, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %107 = bitcast <16 x i8> %106 to <8 x i16>
  %108 = shufflevector <8 x i16> %107, <8 x i16> %39, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %109 = shufflevector <8 x i16> %107, <8 x i16> %39, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %110 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %108, <8 x i16> %40) #3
  %111 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %109, <8 x i16> %40) #3
  %112 = add <4 x i32> %110, <i32 128, i32 128, i32 128, i32 128>
  %113 = add <4 x i32> %111, <i32 128, i32 128, i32 128, i32 128>
  %114 = ashr <4 x i32> %112, <i32 8, i32 8, i32 8, i32 8>
  %115 = ashr <4 x i32> %113, <i32 8, i32 8, i32 8, i32 8>
  %116 = bitcast <4 x i32> %114 to <8 x i16>
  %117 = bitcast <4 x i32> %115 to <8 x i16>
  %118 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %116, <8 x i16> %117) #3
  %119 = shufflevector <16 x i8> %118, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %120 = bitcast <16 x i8> %119 to <2 x i64>
  %121 = getelementptr inbounds i8, i8* %27, i64 24
  %122 = extractelement <2 x i64> %120, i32 0
  %123 = bitcast i8* %121 to i64*
  store i64 %122, i64* %123, align 1
  %124 = load i64, i64* %18, align 1
  %125 = insertelement <2 x i64> undef, i64 %124, i32 0
  %126 = bitcast <2 x i64> %125 to <16 x i8>
  %127 = shufflevector <16 x i8> %126, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %128 = bitcast <16 x i8> %127 to <8 x i16>
  %129 = shufflevector <8 x i16> %128, <8 x i16> %39, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %130 = shufflevector <8 x i16> %128, <8 x i16> %39, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %131 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %129, <8 x i16> %40) #3
  %132 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %130, <8 x i16> %40) #3
  %133 = add <4 x i32> %131, <i32 128, i32 128, i32 128, i32 128>
  %134 = add <4 x i32> %132, <i32 128, i32 128, i32 128, i32 128>
  %135 = ashr <4 x i32> %133, <i32 8, i32 8, i32 8, i32 8>
  %136 = ashr <4 x i32> %134, <i32 8, i32 8, i32 8, i32 8>
  %137 = bitcast <4 x i32> %135 to <8 x i16>
  %138 = bitcast <4 x i32> %136 to <8 x i16>
  %139 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %137, <8 x i16> %138) #3
  %140 = shufflevector <16 x i8> %139, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %141 = bitcast <16 x i8> %140 to <2 x i64>
  %142 = getelementptr inbounds i8, i8* %27, i64 32
  %143 = extractelement <2 x i64> %141, i32 0
  %144 = bitcast i8* %142 to i64*
  store i64 %143, i64* %144, align 1
  %145 = load i64, i64* %20, align 1
  %146 = insertelement <2 x i64> undef, i64 %145, i32 0
  %147 = bitcast <2 x i64> %146 to <16 x i8>
  %148 = shufflevector <16 x i8> %147, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %149 = bitcast <16 x i8> %148 to <8 x i16>
  %150 = shufflevector <8 x i16> %149, <8 x i16> %39, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %151 = shufflevector <8 x i16> %149, <8 x i16> %39, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %152 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %150, <8 x i16> %40) #3
  %153 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %151, <8 x i16> %40) #3
  %154 = add <4 x i32> %152, <i32 128, i32 128, i32 128, i32 128>
  %155 = add <4 x i32> %153, <i32 128, i32 128, i32 128, i32 128>
  %156 = ashr <4 x i32> %154, <i32 8, i32 8, i32 8, i32 8>
  %157 = ashr <4 x i32> %155, <i32 8, i32 8, i32 8, i32 8>
  %158 = bitcast <4 x i32> %156 to <8 x i16>
  %159 = bitcast <4 x i32> %157 to <8 x i16>
  %160 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %158, <8 x i16> %159) #3
  %161 = shufflevector <16 x i8> %160, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %162 = bitcast <16 x i8> %161 to <2 x i64>
  %163 = getelementptr inbounds i8, i8* %27, i64 40
  %164 = extractelement <2 x i64> %162, i32 0
  %165 = bitcast i8* %163 to i64*
  store i64 %164, i64* %165, align 1
  %166 = load i64, i64* %22, align 1
  %167 = insertelement <2 x i64> undef, i64 %166, i32 0
  %168 = bitcast <2 x i64> %167 to <16 x i8>
  %169 = shufflevector <16 x i8> %168, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %170 = bitcast <16 x i8> %169 to <8 x i16>
  %171 = shufflevector <8 x i16> %170, <8 x i16> %39, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %172 = shufflevector <8 x i16> %170, <8 x i16> %39, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %173 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %171, <8 x i16> %40) #3
  %174 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %172, <8 x i16> %40) #3
  %175 = add <4 x i32> %173, <i32 128, i32 128, i32 128, i32 128>
  %176 = add <4 x i32> %174, <i32 128, i32 128, i32 128, i32 128>
  %177 = ashr <4 x i32> %175, <i32 8, i32 8, i32 8, i32 8>
  %178 = ashr <4 x i32> %176, <i32 8, i32 8, i32 8, i32 8>
  %179 = bitcast <4 x i32> %177 to <8 x i16>
  %180 = bitcast <4 x i32> %178 to <8 x i16>
  %181 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %179, <8 x i16> %180) #3
  %182 = shufflevector <16 x i8> %181, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %183 = bitcast <16 x i8> %182 to <2 x i64>
  %184 = getelementptr inbounds i8, i8* %27, i64 48
  %185 = extractelement <2 x i64> %183, i32 0
  %186 = bitcast i8* %184 to i64*
  store i64 %185, i64* %186, align 1
  %187 = load i64, i64* %24, align 1
  %188 = insertelement <2 x i64> undef, i64 %187, i32 0
  %189 = bitcast <2 x i64> %188 to <16 x i8>
  %190 = shufflevector <16 x i8> %189, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %191 = bitcast <16 x i8> %190 to <8 x i16>
  %192 = shufflevector <8 x i16> %191, <8 x i16> %39, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %193 = shufflevector <8 x i16> %191, <8 x i16> %39, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %194 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %192, <8 x i16> %40) #3
  %195 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %193, <8 x i16> %40) #3
  %196 = add <4 x i32> %194, <i32 128, i32 128, i32 128, i32 128>
  %197 = add <4 x i32> %195, <i32 128, i32 128, i32 128, i32 128>
  %198 = ashr <4 x i32> %196, <i32 8, i32 8, i32 8, i32 8>
  %199 = ashr <4 x i32> %197, <i32 8, i32 8, i32 8, i32 8>
  %200 = bitcast <4 x i32> %198 to <8 x i16>
  %201 = bitcast <4 x i32> %199 to <8 x i16>
  %202 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %200, <8 x i16> %201) #3
  %203 = shufflevector <16 x i8> %202, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %204 = bitcast <16 x i8> %203 to <2 x i64>
  %205 = getelementptr inbounds i8, i8* %27, i64 56
  %206 = extractelement <2 x i64> %204, i32 0
  %207 = bitcast i8* %205 to i64*
  store i64 %206, i64* %207, align 1
  %208 = getelementptr inbounds i8, i8* %27, i64 %1
  %209 = add nuw nsw i64 %26, 1
  %210 = icmp eq i64 %209, 64
  br i1 %210, label %211, label %25

211:                                              ; preds = %25
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_smooth_v_predictor_64x32_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i8, i8* %3, i64 31
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <4 x i32> undef, i32 %7, i32 0
  %9 = bitcast <4 x i32> %8 to <8 x i16>
  %10 = bitcast i8* %2 to i64*
  %11 = getelementptr inbounds i8, i8* %2, i64 8
  %12 = bitcast i8* %11 to i64*
  %13 = getelementptr inbounds i8, i8* %2, i64 16
  %14 = bitcast i8* %13 to i64*
  %15 = getelementptr inbounds i8, i8* %2, i64 24
  %16 = bitcast i8* %15 to i64*
  %17 = getelementptr inbounds i8, i8* %2, i64 32
  %18 = bitcast i8* %17 to i64*
  %19 = getelementptr inbounds i8, i8* %2, i64 40
  %20 = bitcast i8* %19 to i64*
  %21 = getelementptr inbounds i8, i8* %2, i64 48
  %22 = bitcast i8* %21 to i64*
  %23 = getelementptr inbounds i8, i8* %2, i64 56
  %24 = bitcast i8* %23 to i64*
  br label %25

25:                                               ; preds = %25, %4
  %26 = phi i64 [ 0, %4 ], [ %209, %25 ]
  %27 = phi i8* [ %0, %4 ], [ %208, %25 ]
  %28 = getelementptr inbounds i8, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @sm_weight_arrays, i64 0, i64 32), i64 %26
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %30, i32 0
  %32 = bitcast <4 x i32> %31 to <8 x i16>
  %33 = shufflevector <8 x i16> %32, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %34 = bitcast <8 x i16> %33 to <4 x i32>
  %35 = shufflevector <4 x i32> %34, <4 x i32> undef, <4 x i32> zeroinitializer
  %36 = sub <8 x i16> <i16 256, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>, %32
  %37 = bitcast <8 x i16> %36 to <16 x i8>
  %38 = shufflevector <16 x i8> %37, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %39 = bitcast <16 x i8> %38 to <8 x i16>
  %40 = bitcast <4 x i32> %35 to <8 x i16>
  %41 = load i64, i64* %10, align 1
  %42 = insertelement <2 x i64> undef, i64 %41, i32 0
  %43 = bitcast <2 x i64> %42 to <16 x i8>
  %44 = shufflevector <16 x i8> %43, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %45 = bitcast <16 x i8> %44 to <8 x i16>
  %46 = shufflevector <8 x i16> %45, <8 x i16> %39, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %47 = shufflevector <8 x i16> %45, <8 x i16> %39, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %48 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %46, <8 x i16> %40) #3
  %49 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %47, <8 x i16> %40) #3
  %50 = add <4 x i32> %48, <i32 128, i32 128, i32 128, i32 128>
  %51 = add <4 x i32> %49, <i32 128, i32 128, i32 128, i32 128>
  %52 = ashr <4 x i32> %50, <i32 8, i32 8, i32 8, i32 8>
  %53 = ashr <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %54 = bitcast <4 x i32> %52 to <8 x i16>
  %55 = bitcast <4 x i32> %53 to <8 x i16>
  %56 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %54, <8 x i16> %55) #3
  %57 = shufflevector <16 x i8> %56, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %58 = bitcast <16 x i8> %57 to <2 x i64>
  %59 = extractelement <2 x i64> %58, i32 0
  %60 = bitcast i8* %27 to i64*
  store i64 %59, i64* %60, align 1
  %61 = load i64, i64* %12, align 1
  %62 = insertelement <2 x i64> undef, i64 %61, i32 0
  %63 = bitcast <2 x i64> %62 to <16 x i8>
  %64 = shufflevector <16 x i8> %63, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %65 = bitcast <16 x i8> %64 to <8 x i16>
  %66 = shufflevector <8 x i16> %65, <8 x i16> %39, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %67 = shufflevector <8 x i16> %65, <8 x i16> %39, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %68 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %66, <8 x i16> %40) #3
  %69 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %67, <8 x i16> %40) #3
  %70 = add <4 x i32> %68, <i32 128, i32 128, i32 128, i32 128>
  %71 = add <4 x i32> %69, <i32 128, i32 128, i32 128, i32 128>
  %72 = ashr <4 x i32> %70, <i32 8, i32 8, i32 8, i32 8>
  %73 = ashr <4 x i32> %71, <i32 8, i32 8, i32 8, i32 8>
  %74 = bitcast <4 x i32> %72 to <8 x i16>
  %75 = bitcast <4 x i32> %73 to <8 x i16>
  %76 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %74, <8 x i16> %75) #3
  %77 = shufflevector <16 x i8> %76, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %78 = bitcast <16 x i8> %77 to <2 x i64>
  %79 = getelementptr inbounds i8, i8* %27, i64 8
  %80 = extractelement <2 x i64> %78, i32 0
  %81 = bitcast i8* %79 to i64*
  store i64 %80, i64* %81, align 1
  %82 = load i64, i64* %14, align 1
  %83 = insertelement <2 x i64> undef, i64 %82, i32 0
  %84 = bitcast <2 x i64> %83 to <16 x i8>
  %85 = shufflevector <16 x i8> %84, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %86 = bitcast <16 x i8> %85 to <8 x i16>
  %87 = shufflevector <8 x i16> %86, <8 x i16> %39, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %88 = shufflevector <8 x i16> %86, <8 x i16> %39, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %89 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %87, <8 x i16> %40) #3
  %90 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %88, <8 x i16> %40) #3
  %91 = add <4 x i32> %89, <i32 128, i32 128, i32 128, i32 128>
  %92 = add <4 x i32> %90, <i32 128, i32 128, i32 128, i32 128>
  %93 = ashr <4 x i32> %91, <i32 8, i32 8, i32 8, i32 8>
  %94 = ashr <4 x i32> %92, <i32 8, i32 8, i32 8, i32 8>
  %95 = bitcast <4 x i32> %93 to <8 x i16>
  %96 = bitcast <4 x i32> %94 to <8 x i16>
  %97 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %95, <8 x i16> %96) #3
  %98 = shufflevector <16 x i8> %97, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %99 = bitcast <16 x i8> %98 to <2 x i64>
  %100 = getelementptr inbounds i8, i8* %27, i64 16
  %101 = extractelement <2 x i64> %99, i32 0
  %102 = bitcast i8* %100 to i64*
  store i64 %101, i64* %102, align 1
  %103 = load i64, i64* %16, align 1
  %104 = insertelement <2 x i64> undef, i64 %103, i32 0
  %105 = bitcast <2 x i64> %104 to <16 x i8>
  %106 = shufflevector <16 x i8> %105, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %107 = bitcast <16 x i8> %106 to <8 x i16>
  %108 = shufflevector <8 x i16> %107, <8 x i16> %39, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %109 = shufflevector <8 x i16> %107, <8 x i16> %39, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %110 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %108, <8 x i16> %40) #3
  %111 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %109, <8 x i16> %40) #3
  %112 = add <4 x i32> %110, <i32 128, i32 128, i32 128, i32 128>
  %113 = add <4 x i32> %111, <i32 128, i32 128, i32 128, i32 128>
  %114 = ashr <4 x i32> %112, <i32 8, i32 8, i32 8, i32 8>
  %115 = ashr <4 x i32> %113, <i32 8, i32 8, i32 8, i32 8>
  %116 = bitcast <4 x i32> %114 to <8 x i16>
  %117 = bitcast <4 x i32> %115 to <8 x i16>
  %118 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %116, <8 x i16> %117) #3
  %119 = shufflevector <16 x i8> %118, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %120 = bitcast <16 x i8> %119 to <2 x i64>
  %121 = getelementptr inbounds i8, i8* %27, i64 24
  %122 = extractelement <2 x i64> %120, i32 0
  %123 = bitcast i8* %121 to i64*
  store i64 %122, i64* %123, align 1
  %124 = load i64, i64* %18, align 1
  %125 = insertelement <2 x i64> undef, i64 %124, i32 0
  %126 = bitcast <2 x i64> %125 to <16 x i8>
  %127 = shufflevector <16 x i8> %126, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %128 = bitcast <16 x i8> %127 to <8 x i16>
  %129 = shufflevector <8 x i16> %128, <8 x i16> %39, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %130 = shufflevector <8 x i16> %128, <8 x i16> %39, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %131 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %129, <8 x i16> %40) #3
  %132 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %130, <8 x i16> %40) #3
  %133 = add <4 x i32> %131, <i32 128, i32 128, i32 128, i32 128>
  %134 = add <4 x i32> %132, <i32 128, i32 128, i32 128, i32 128>
  %135 = ashr <4 x i32> %133, <i32 8, i32 8, i32 8, i32 8>
  %136 = ashr <4 x i32> %134, <i32 8, i32 8, i32 8, i32 8>
  %137 = bitcast <4 x i32> %135 to <8 x i16>
  %138 = bitcast <4 x i32> %136 to <8 x i16>
  %139 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %137, <8 x i16> %138) #3
  %140 = shufflevector <16 x i8> %139, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %141 = bitcast <16 x i8> %140 to <2 x i64>
  %142 = getelementptr inbounds i8, i8* %27, i64 32
  %143 = extractelement <2 x i64> %141, i32 0
  %144 = bitcast i8* %142 to i64*
  store i64 %143, i64* %144, align 1
  %145 = load i64, i64* %20, align 1
  %146 = insertelement <2 x i64> undef, i64 %145, i32 0
  %147 = bitcast <2 x i64> %146 to <16 x i8>
  %148 = shufflevector <16 x i8> %147, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %149 = bitcast <16 x i8> %148 to <8 x i16>
  %150 = shufflevector <8 x i16> %149, <8 x i16> %39, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %151 = shufflevector <8 x i16> %149, <8 x i16> %39, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %152 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %150, <8 x i16> %40) #3
  %153 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %151, <8 x i16> %40) #3
  %154 = add <4 x i32> %152, <i32 128, i32 128, i32 128, i32 128>
  %155 = add <4 x i32> %153, <i32 128, i32 128, i32 128, i32 128>
  %156 = ashr <4 x i32> %154, <i32 8, i32 8, i32 8, i32 8>
  %157 = ashr <4 x i32> %155, <i32 8, i32 8, i32 8, i32 8>
  %158 = bitcast <4 x i32> %156 to <8 x i16>
  %159 = bitcast <4 x i32> %157 to <8 x i16>
  %160 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %158, <8 x i16> %159) #3
  %161 = shufflevector <16 x i8> %160, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %162 = bitcast <16 x i8> %161 to <2 x i64>
  %163 = getelementptr inbounds i8, i8* %27, i64 40
  %164 = extractelement <2 x i64> %162, i32 0
  %165 = bitcast i8* %163 to i64*
  store i64 %164, i64* %165, align 1
  %166 = load i64, i64* %22, align 1
  %167 = insertelement <2 x i64> undef, i64 %166, i32 0
  %168 = bitcast <2 x i64> %167 to <16 x i8>
  %169 = shufflevector <16 x i8> %168, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %170 = bitcast <16 x i8> %169 to <8 x i16>
  %171 = shufflevector <8 x i16> %170, <8 x i16> %39, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %172 = shufflevector <8 x i16> %170, <8 x i16> %39, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %173 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %171, <8 x i16> %40) #3
  %174 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %172, <8 x i16> %40) #3
  %175 = add <4 x i32> %173, <i32 128, i32 128, i32 128, i32 128>
  %176 = add <4 x i32> %174, <i32 128, i32 128, i32 128, i32 128>
  %177 = ashr <4 x i32> %175, <i32 8, i32 8, i32 8, i32 8>
  %178 = ashr <4 x i32> %176, <i32 8, i32 8, i32 8, i32 8>
  %179 = bitcast <4 x i32> %177 to <8 x i16>
  %180 = bitcast <4 x i32> %178 to <8 x i16>
  %181 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %179, <8 x i16> %180) #3
  %182 = shufflevector <16 x i8> %181, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %183 = bitcast <16 x i8> %182 to <2 x i64>
  %184 = getelementptr inbounds i8, i8* %27, i64 48
  %185 = extractelement <2 x i64> %183, i32 0
  %186 = bitcast i8* %184 to i64*
  store i64 %185, i64* %186, align 1
  %187 = load i64, i64* %24, align 1
  %188 = insertelement <2 x i64> undef, i64 %187, i32 0
  %189 = bitcast <2 x i64> %188 to <16 x i8>
  %190 = shufflevector <16 x i8> %189, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %191 = bitcast <16 x i8> %190 to <8 x i16>
  %192 = shufflevector <8 x i16> %191, <8 x i16> %39, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %193 = shufflevector <8 x i16> %191, <8 x i16> %39, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %194 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %192, <8 x i16> %40) #3
  %195 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %193, <8 x i16> %40) #3
  %196 = add <4 x i32> %194, <i32 128, i32 128, i32 128, i32 128>
  %197 = add <4 x i32> %195, <i32 128, i32 128, i32 128, i32 128>
  %198 = ashr <4 x i32> %196, <i32 8, i32 8, i32 8, i32 8>
  %199 = ashr <4 x i32> %197, <i32 8, i32 8, i32 8, i32 8>
  %200 = bitcast <4 x i32> %198 to <8 x i16>
  %201 = bitcast <4 x i32> %199 to <8 x i16>
  %202 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %200, <8 x i16> %201) #3
  %203 = shufflevector <16 x i8> %202, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %204 = bitcast <16 x i8> %203 to <2 x i64>
  %205 = getelementptr inbounds i8, i8* %27, i64 56
  %206 = extractelement <2 x i64> %204, i32 0
  %207 = bitcast i8* %205 to i64*
  store i64 %206, i64* %207, align 1
  %208 = getelementptr inbounds i8, i8* %27, i64 %1
  %209 = add nuw nsw i64 %26, 1
  %210 = icmp eq i64 %209, 32
  br i1 %210, label %211, label %25

211:                                              ; preds = %25
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_smooth_v_predictor_64x16_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i8, i8* %3, i64 15
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <4 x i32> undef, i32 %7, i32 0
  %9 = bitcast <4 x i32> %8 to <8 x i16>
  %10 = bitcast i8* %2 to i64*
  %11 = getelementptr inbounds i8, i8* %2, i64 8
  %12 = bitcast i8* %11 to i64*
  %13 = getelementptr inbounds i8, i8* %2, i64 16
  %14 = bitcast i8* %13 to i64*
  %15 = getelementptr inbounds i8, i8* %2, i64 24
  %16 = bitcast i8* %15 to i64*
  %17 = getelementptr inbounds i8, i8* %2, i64 32
  %18 = bitcast i8* %17 to i64*
  %19 = getelementptr inbounds i8, i8* %2, i64 40
  %20 = bitcast i8* %19 to i64*
  %21 = getelementptr inbounds i8, i8* %2, i64 48
  %22 = bitcast i8* %21 to i64*
  %23 = getelementptr inbounds i8, i8* %2, i64 56
  %24 = bitcast i8* %23 to i64*
  br label %25

25:                                               ; preds = %25, %4
  %26 = phi i64 [ 0, %4 ], [ %209, %25 ]
  %27 = phi i8* [ %0, %4 ], [ %208, %25 ]
  %28 = getelementptr inbounds i8, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @sm_weight_arrays, i64 0, i64 16), i64 %26
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %30, i32 0
  %32 = bitcast <4 x i32> %31 to <8 x i16>
  %33 = shufflevector <8 x i16> %32, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %34 = bitcast <8 x i16> %33 to <4 x i32>
  %35 = shufflevector <4 x i32> %34, <4 x i32> undef, <4 x i32> zeroinitializer
  %36 = sub <8 x i16> <i16 256, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>, %32
  %37 = bitcast <8 x i16> %36 to <16 x i8>
  %38 = shufflevector <16 x i8> %37, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %39 = bitcast <16 x i8> %38 to <8 x i16>
  %40 = bitcast <4 x i32> %35 to <8 x i16>
  %41 = load i64, i64* %10, align 1
  %42 = insertelement <2 x i64> undef, i64 %41, i32 0
  %43 = bitcast <2 x i64> %42 to <16 x i8>
  %44 = shufflevector <16 x i8> %43, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %45 = bitcast <16 x i8> %44 to <8 x i16>
  %46 = shufflevector <8 x i16> %45, <8 x i16> %39, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %47 = shufflevector <8 x i16> %45, <8 x i16> %39, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %48 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %46, <8 x i16> %40) #3
  %49 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %47, <8 x i16> %40) #3
  %50 = add <4 x i32> %48, <i32 128, i32 128, i32 128, i32 128>
  %51 = add <4 x i32> %49, <i32 128, i32 128, i32 128, i32 128>
  %52 = ashr <4 x i32> %50, <i32 8, i32 8, i32 8, i32 8>
  %53 = ashr <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %54 = bitcast <4 x i32> %52 to <8 x i16>
  %55 = bitcast <4 x i32> %53 to <8 x i16>
  %56 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %54, <8 x i16> %55) #3
  %57 = shufflevector <16 x i8> %56, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %58 = bitcast <16 x i8> %57 to <2 x i64>
  %59 = extractelement <2 x i64> %58, i32 0
  %60 = bitcast i8* %27 to i64*
  store i64 %59, i64* %60, align 1
  %61 = load i64, i64* %12, align 1
  %62 = insertelement <2 x i64> undef, i64 %61, i32 0
  %63 = bitcast <2 x i64> %62 to <16 x i8>
  %64 = shufflevector <16 x i8> %63, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %65 = bitcast <16 x i8> %64 to <8 x i16>
  %66 = shufflevector <8 x i16> %65, <8 x i16> %39, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %67 = shufflevector <8 x i16> %65, <8 x i16> %39, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %68 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %66, <8 x i16> %40) #3
  %69 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %67, <8 x i16> %40) #3
  %70 = add <4 x i32> %68, <i32 128, i32 128, i32 128, i32 128>
  %71 = add <4 x i32> %69, <i32 128, i32 128, i32 128, i32 128>
  %72 = ashr <4 x i32> %70, <i32 8, i32 8, i32 8, i32 8>
  %73 = ashr <4 x i32> %71, <i32 8, i32 8, i32 8, i32 8>
  %74 = bitcast <4 x i32> %72 to <8 x i16>
  %75 = bitcast <4 x i32> %73 to <8 x i16>
  %76 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %74, <8 x i16> %75) #3
  %77 = shufflevector <16 x i8> %76, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %78 = bitcast <16 x i8> %77 to <2 x i64>
  %79 = getelementptr inbounds i8, i8* %27, i64 8
  %80 = extractelement <2 x i64> %78, i32 0
  %81 = bitcast i8* %79 to i64*
  store i64 %80, i64* %81, align 1
  %82 = load i64, i64* %14, align 1
  %83 = insertelement <2 x i64> undef, i64 %82, i32 0
  %84 = bitcast <2 x i64> %83 to <16 x i8>
  %85 = shufflevector <16 x i8> %84, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %86 = bitcast <16 x i8> %85 to <8 x i16>
  %87 = shufflevector <8 x i16> %86, <8 x i16> %39, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %88 = shufflevector <8 x i16> %86, <8 x i16> %39, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %89 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %87, <8 x i16> %40) #3
  %90 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %88, <8 x i16> %40) #3
  %91 = add <4 x i32> %89, <i32 128, i32 128, i32 128, i32 128>
  %92 = add <4 x i32> %90, <i32 128, i32 128, i32 128, i32 128>
  %93 = ashr <4 x i32> %91, <i32 8, i32 8, i32 8, i32 8>
  %94 = ashr <4 x i32> %92, <i32 8, i32 8, i32 8, i32 8>
  %95 = bitcast <4 x i32> %93 to <8 x i16>
  %96 = bitcast <4 x i32> %94 to <8 x i16>
  %97 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %95, <8 x i16> %96) #3
  %98 = shufflevector <16 x i8> %97, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %99 = bitcast <16 x i8> %98 to <2 x i64>
  %100 = getelementptr inbounds i8, i8* %27, i64 16
  %101 = extractelement <2 x i64> %99, i32 0
  %102 = bitcast i8* %100 to i64*
  store i64 %101, i64* %102, align 1
  %103 = load i64, i64* %16, align 1
  %104 = insertelement <2 x i64> undef, i64 %103, i32 0
  %105 = bitcast <2 x i64> %104 to <16 x i8>
  %106 = shufflevector <16 x i8> %105, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %107 = bitcast <16 x i8> %106 to <8 x i16>
  %108 = shufflevector <8 x i16> %107, <8 x i16> %39, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %109 = shufflevector <8 x i16> %107, <8 x i16> %39, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %110 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %108, <8 x i16> %40) #3
  %111 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %109, <8 x i16> %40) #3
  %112 = add <4 x i32> %110, <i32 128, i32 128, i32 128, i32 128>
  %113 = add <4 x i32> %111, <i32 128, i32 128, i32 128, i32 128>
  %114 = ashr <4 x i32> %112, <i32 8, i32 8, i32 8, i32 8>
  %115 = ashr <4 x i32> %113, <i32 8, i32 8, i32 8, i32 8>
  %116 = bitcast <4 x i32> %114 to <8 x i16>
  %117 = bitcast <4 x i32> %115 to <8 x i16>
  %118 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %116, <8 x i16> %117) #3
  %119 = shufflevector <16 x i8> %118, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %120 = bitcast <16 x i8> %119 to <2 x i64>
  %121 = getelementptr inbounds i8, i8* %27, i64 24
  %122 = extractelement <2 x i64> %120, i32 0
  %123 = bitcast i8* %121 to i64*
  store i64 %122, i64* %123, align 1
  %124 = load i64, i64* %18, align 1
  %125 = insertelement <2 x i64> undef, i64 %124, i32 0
  %126 = bitcast <2 x i64> %125 to <16 x i8>
  %127 = shufflevector <16 x i8> %126, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %128 = bitcast <16 x i8> %127 to <8 x i16>
  %129 = shufflevector <8 x i16> %128, <8 x i16> %39, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %130 = shufflevector <8 x i16> %128, <8 x i16> %39, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %131 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %129, <8 x i16> %40) #3
  %132 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %130, <8 x i16> %40) #3
  %133 = add <4 x i32> %131, <i32 128, i32 128, i32 128, i32 128>
  %134 = add <4 x i32> %132, <i32 128, i32 128, i32 128, i32 128>
  %135 = ashr <4 x i32> %133, <i32 8, i32 8, i32 8, i32 8>
  %136 = ashr <4 x i32> %134, <i32 8, i32 8, i32 8, i32 8>
  %137 = bitcast <4 x i32> %135 to <8 x i16>
  %138 = bitcast <4 x i32> %136 to <8 x i16>
  %139 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %137, <8 x i16> %138) #3
  %140 = shufflevector <16 x i8> %139, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %141 = bitcast <16 x i8> %140 to <2 x i64>
  %142 = getelementptr inbounds i8, i8* %27, i64 32
  %143 = extractelement <2 x i64> %141, i32 0
  %144 = bitcast i8* %142 to i64*
  store i64 %143, i64* %144, align 1
  %145 = load i64, i64* %20, align 1
  %146 = insertelement <2 x i64> undef, i64 %145, i32 0
  %147 = bitcast <2 x i64> %146 to <16 x i8>
  %148 = shufflevector <16 x i8> %147, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %149 = bitcast <16 x i8> %148 to <8 x i16>
  %150 = shufflevector <8 x i16> %149, <8 x i16> %39, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %151 = shufflevector <8 x i16> %149, <8 x i16> %39, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %152 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %150, <8 x i16> %40) #3
  %153 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %151, <8 x i16> %40) #3
  %154 = add <4 x i32> %152, <i32 128, i32 128, i32 128, i32 128>
  %155 = add <4 x i32> %153, <i32 128, i32 128, i32 128, i32 128>
  %156 = ashr <4 x i32> %154, <i32 8, i32 8, i32 8, i32 8>
  %157 = ashr <4 x i32> %155, <i32 8, i32 8, i32 8, i32 8>
  %158 = bitcast <4 x i32> %156 to <8 x i16>
  %159 = bitcast <4 x i32> %157 to <8 x i16>
  %160 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %158, <8 x i16> %159) #3
  %161 = shufflevector <16 x i8> %160, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %162 = bitcast <16 x i8> %161 to <2 x i64>
  %163 = getelementptr inbounds i8, i8* %27, i64 40
  %164 = extractelement <2 x i64> %162, i32 0
  %165 = bitcast i8* %163 to i64*
  store i64 %164, i64* %165, align 1
  %166 = load i64, i64* %22, align 1
  %167 = insertelement <2 x i64> undef, i64 %166, i32 0
  %168 = bitcast <2 x i64> %167 to <16 x i8>
  %169 = shufflevector <16 x i8> %168, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %170 = bitcast <16 x i8> %169 to <8 x i16>
  %171 = shufflevector <8 x i16> %170, <8 x i16> %39, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %172 = shufflevector <8 x i16> %170, <8 x i16> %39, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %173 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %171, <8 x i16> %40) #3
  %174 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %172, <8 x i16> %40) #3
  %175 = add <4 x i32> %173, <i32 128, i32 128, i32 128, i32 128>
  %176 = add <4 x i32> %174, <i32 128, i32 128, i32 128, i32 128>
  %177 = ashr <4 x i32> %175, <i32 8, i32 8, i32 8, i32 8>
  %178 = ashr <4 x i32> %176, <i32 8, i32 8, i32 8, i32 8>
  %179 = bitcast <4 x i32> %177 to <8 x i16>
  %180 = bitcast <4 x i32> %178 to <8 x i16>
  %181 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %179, <8 x i16> %180) #3
  %182 = shufflevector <16 x i8> %181, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %183 = bitcast <16 x i8> %182 to <2 x i64>
  %184 = getelementptr inbounds i8, i8* %27, i64 48
  %185 = extractelement <2 x i64> %183, i32 0
  %186 = bitcast i8* %184 to i64*
  store i64 %185, i64* %186, align 1
  %187 = load i64, i64* %24, align 1
  %188 = insertelement <2 x i64> undef, i64 %187, i32 0
  %189 = bitcast <2 x i64> %188 to <16 x i8>
  %190 = shufflevector <16 x i8> %189, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %191 = bitcast <16 x i8> %190 to <8 x i16>
  %192 = shufflevector <8 x i16> %191, <8 x i16> %39, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %193 = shufflevector <8 x i16> %191, <8 x i16> %39, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %194 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %192, <8 x i16> %40) #3
  %195 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %193, <8 x i16> %40) #3
  %196 = add <4 x i32> %194, <i32 128, i32 128, i32 128, i32 128>
  %197 = add <4 x i32> %195, <i32 128, i32 128, i32 128, i32 128>
  %198 = ashr <4 x i32> %196, <i32 8, i32 8, i32 8, i32 8>
  %199 = ashr <4 x i32> %197, <i32 8, i32 8, i32 8, i32 8>
  %200 = bitcast <4 x i32> %198 to <8 x i16>
  %201 = bitcast <4 x i32> %199 to <8 x i16>
  %202 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %200, <8 x i16> %201) #3
  %203 = shufflevector <16 x i8> %202, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %204 = bitcast <16 x i8> %203 to <2 x i64>
  %205 = getelementptr inbounds i8, i8* %27, i64 56
  %206 = extractelement <2 x i64> %204, i32 0
  %207 = bitcast i8* %205 to i64*
  store i64 %206, i64* %207, align 1
  %208 = getelementptr inbounds i8, i8* %27, i64 %1
  %209 = add nuw nsw i64 %26, 1
  %210 = icmp eq i64 %209, 16
  br i1 %210, label %211, label %25

211:                                              ; preds = %25
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_smooth_v_predictor_16x64_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i8, i8* %3, i64 63
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <4 x i32> undef, i32 %7, i32 0
  %9 = bitcast <4 x i32> %8 to <8 x i16>
  %10 = bitcast i8* %2 to i64*
  %11 = getelementptr inbounds i8, i8* %2, i64 8
  %12 = bitcast i8* %11 to i64*
  br label %13

13:                                               ; preds = %13, %4
  %14 = phi i64 [ 0, %4 ], [ %71, %13 ]
  %15 = phi i8* [ %0, %4 ], [ %70, %13 ]
  %16 = getelementptr inbounds i8, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @sm_weight_arrays, i64 0, i64 64), i64 %14
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %18, i32 0
  %20 = bitcast <4 x i32> %19 to <8 x i16>
  %21 = shufflevector <8 x i16> %20, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %22 = bitcast <8 x i16> %21 to <4 x i32>
  %23 = shufflevector <4 x i32> %22, <4 x i32> undef, <4 x i32> zeroinitializer
  %24 = sub <8 x i16> <i16 256, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>, %20
  %25 = bitcast <8 x i16> %24 to <16 x i8>
  %26 = shufflevector <16 x i8> %25, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %27 = bitcast <16 x i8> %26 to <8 x i16>
  %28 = bitcast <4 x i32> %23 to <8 x i16>
  %29 = load i64, i64* %10, align 1
  %30 = insertelement <2 x i64> undef, i64 %29, i32 0
  %31 = bitcast <2 x i64> %30 to <16 x i8>
  %32 = shufflevector <16 x i8> %31, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %33 = bitcast <16 x i8> %32 to <8 x i16>
  %34 = shufflevector <8 x i16> %33, <8 x i16> %27, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %35 = shufflevector <8 x i16> %33, <8 x i16> %27, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %36 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %34, <8 x i16> %28) #3
  %37 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %35, <8 x i16> %28) #3
  %38 = add <4 x i32> %36, <i32 128, i32 128, i32 128, i32 128>
  %39 = add <4 x i32> %37, <i32 128, i32 128, i32 128, i32 128>
  %40 = ashr <4 x i32> %38, <i32 8, i32 8, i32 8, i32 8>
  %41 = ashr <4 x i32> %39, <i32 8, i32 8, i32 8, i32 8>
  %42 = bitcast <4 x i32> %40 to <8 x i16>
  %43 = bitcast <4 x i32> %41 to <8 x i16>
  %44 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %42, <8 x i16> %43) #3
  %45 = shufflevector <16 x i8> %44, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %46 = bitcast <16 x i8> %45 to <2 x i64>
  %47 = extractelement <2 x i64> %46, i32 0
  %48 = bitcast i8* %15 to i64*
  store i64 %47, i64* %48, align 1
  %49 = load i64, i64* %12, align 1
  %50 = insertelement <2 x i64> undef, i64 %49, i32 0
  %51 = bitcast <2 x i64> %50 to <16 x i8>
  %52 = shufflevector <16 x i8> %51, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %53 = bitcast <16 x i8> %52 to <8 x i16>
  %54 = shufflevector <8 x i16> %53, <8 x i16> %27, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %55 = shufflevector <8 x i16> %53, <8 x i16> %27, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %56 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %54, <8 x i16> %28) #3
  %57 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %55, <8 x i16> %28) #3
  %58 = add <4 x i32> %56, <i32 128, i32 128, i32 128, i32 128>
  %59 = add <4 x i32> %57, <i32 128, i32 128, i32 128, i32 128>
  %60 = ashr <4 x i32> %58, <i32 8, i32 8, i32 8, i32 8>
  %61 = ashr <4 x i32> %59, <i32 8, i32 8, i32 8, i32 8>
  %62 = bitcast <4 x i32> %60 to <8 x i16>
  %63 = bitcast <4 x i32> %61 to <8 x i16>
  %64 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %62, <8 x i16> %63) #3
  %65 = shufflevector <16 x i8> %64, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %66 = bitcast <16 x i8> %65 to <2 x i64>
  %67 = getelementptr inbounds i8, i8* %15, i64 8
  %68 = extractelement <2 x i64> %66, i32 0
  %69 = bitcast i8* %67 to i64*
  store i64 %68, i64* %69, align 1
  %70 = getelementptr inbounds i8, i8* %15, i64 %1
  %71 = add nuw nsw i64 %14, 1
  %72 = icmp eq i64 %71, 64
  br i1 %72, label %73, label %13

73:                                               ; preds = %13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_smooth_h_predictor_4x4_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %3 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %6, i32 0
  %8 = getelementptr inbounds i8, i8* %2, i64 3
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i16
  %11 = insertelement <8 x i16> undef, i16 %10, i32 0
  %12 = shufflevector <8 x i16> %11, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %13 = bitcast <4 x i32> %7 to <16 x i8>
  %14 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <16 x i8> %14 to <8 x i16>
  %16 = shufflevector <8 x i16> %15, <8 x i16> %12, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %17 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %18 = add <4 x i32> %17, <i32 128, i32 128, i32 128, i32 128>
  %19 = ashr <4 x i32> %18, <i32 8, i32 8, i32 8, i32 8>
  %20 = bitcast <4 x i32> %19 to <16 x i8>
  %21 = shufflevector <16 x i8> %20, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %22 = bitcast <16 x i8> %21 to <4 x i32>
  %23 = extractelement <4 x i32> %22, i32 0
  %24 = bitcast i8* %0 to i32*
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds i8, i8* %0, i64 %1
  %26 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %27 = bitcast <16 x i8> %26 to <8 x i16>
  %28 = shufflevector <8 x i16> %27, <8 x i16> %12, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %29 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %28, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %30 = add <4 x i32> %29, <i32 128, i32 128, i32 128, i32 128>
  %31 = ashr <4 x i32> %30, <i32 8, i32 8, i32 8, i32 8>
  %32 = bitcast <4 x i32> %31 to <16 x i8>
  %33 = shufflevector <16 x i8> %32, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %34 = bitcast <16 x i8> %33 to <4 x i32>
  %35 = extractelement <4 x i32> %34, i32 0
  %36 = bitcast i8* %25 to i32*
  store i32 %35, i32* %36, align 4
  %37 = getelementptr inbounds i8, i8* %25, i64 %1
  %38 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %39 = bitcast <16 x i8> %38 to <8 x i16>
  %40 = shufflevector <8 x i16> %39, <8 x i16> %12, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %41 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %40, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %42 = add <4 x i32> %41, <i32 128, i32 128, i32 128, i32 128>
  %43 = ashr <4 x i32> %42, <i32 8, i32 8, i32 8, i32 8>
  %44 = bitcast <4 x i32> %43 to <16 x i8>
  %45 = shufflevector <16 x i8> %44, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %46 = bitcast <16 x i8> %45 to <4 x i32>
  %47 = extractelement <4 x i32> %46, i32 0
  %48 = bitcast i8* %37 to i32*
  store i32 %47, i32* %48, align 4
  %49 = getelementptr inbounds i8, i8* %37, i64 %1
  %50 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %51 = bitcast <16 x i8> %50 to <8 x i16>
  %52 = shufflevector <8 x i16> %51, <8 x i16> %12, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %53 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %52, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %54 = add <4 x i32> %53, <i32 128, i32 128, i32 128, i32 128>
  %55 = ashr <4 x i32> %54, <i32 8, i32 8, i32 8, i32 8>
  %56 = bitcast <4 x i32> %55 to <16 x i8>
  %57 = shufflevector <16 x i8> %56, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %58 = bitcast <16 x i8> %57 to <4 x i32>
  %59 = extractelement <4 x i32> %58, i32 0
  %60 = bitcast i8* %49 to i32*
  store i32 %59, i32* %60, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_smooth_h_predictor_4x8_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %3 to i64*
  %6 = load i64, i64* %5, align 1
  %7 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %6, i32 0
  %8 = getelementptr inbounds i8, i8* %2, i64 3
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i16
  %11 = insertelement <8 x i16> undef, i16 %10, i32 0
  %12 = shufflevector <8 x i16> %11, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %13 = bitcast <2 x i64> %7 to <16 x i8>
  %14 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <16 x i8> %14 to <8 x i16>
  %16 = shufflevector <8 x i16> %15, <8 x i16> %12, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %17 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %18 = add <4 x i32> %17, <i32 128, i32 128, i32 128, i32 128>
  %19 = ashr <4 x i32> %18, <i32 8, i32 8, i32 8, i32 8>
  %20 = bitcast <4 x i32> %19 to <16 x i8>
  %21 = shufflevector <16 x i8> %20, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %22 = bitcast <16 x i8> %21 to <4 x i32>
  %23 = extractelement <4 x i32> %22, i32 0
  %24 = bitcast i8* %0 to i32*
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds i8, i8* %0, i64 %1
  %26 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %27 = bitcast <16 x i8> %26 to <8 x i16>
  %28 = shufflevector <8 x i16> %27, <8 x i16> %12, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %29 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %28, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %30 = add <4 x i32> %29, <i32 128, i32 128, i32 128, i32 128>
  %31 = ashr <4 x i32> %30, <i32 8, i32 8, i32 8, i32 8>
  %32 = bitcast <4 x i32> %31 to <16 x i8>
  %33 = shufflevector <16 x i8> %32, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %34 = bitcast <16 x i8> %33 to <4 x i32>
  %35 = extractelement <4 x i32> %34, i32 0
  %36 = bitcast i8* %25 to i32*
  store i32 %35, i32* %36, align 4
  %37 = getelementptr inbounds i8, i8* %25, i64 %1
  %38 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %39 = bitcast <16 x i8> %38 to <8 x i16>
  %40 = shufflevector <8 x i16> %39, <8 x i16> %12, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %41 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %40, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %42 = add <4 x i32> %41, <i32 128, i32 128, i32 128, i32 128>
  %43 = ashr <4 x i32> %42, <i32 8, i32 8, i32 8, i32 8>
  %44 = bitcast <4 x i32> %43 to <16 x i8>
  %45 = shufflevector <16 x i8> %44, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %46 = bitcast <16 x i8> %45 to <4 x i32>
  %47 = extractelement <4 x i32> %46, i32 0
  %48 = bitcast i8* %37 to i32*
  store i32 %47, i32* %48, align 4
  %49 = getelementptr inbounds i8, i8* %37, i64 %1
  %50 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %51 = bitcast <16 x i8> %50 to <8 x i16>
  %52 = shufflevector <8 x i16> %51, <8 x i16> %12, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %53 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %52, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %54 = add <4 x i32> %53, <i32 128, i32 128, i32 128, i32 128>
  %55 = ashr <4 x i32> %54, <i32 8, i32 8, i32 8, i32 8>
  %56 = bitcast <4 x i32> %55 to <16 x i8>
  %57 = shufflevector <16 x i8> %56, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %58 = bitcast <16 x i8> %57 to <4 x i32>
  %59 = extractelement <4 x i32> %58, i32 0
  %60 = bitcast i8* %49 to i32*
  store i32 %59, i32* %60, align 4
  %61 = getelementptr inbounds i8, i8* %49, i64 %1
  %62 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 16, i32 4, i32 16, i32 4, i32 16, i32 4, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %63 = bitcast <16 x i8> %62 to <8 x i16>
  %64 = shufflevector <8 x i16> %63, <8 x i16> %12, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %65 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %64, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %66 = add <4 x i32> %65, <i32 128, i32 128, i32 128, i32 128>
  %67 = ashr <4 x i32> %66, <i32 8, i32 8, i32 8, i32 8>
  %68 = bitcast <4 x i32> %67 to <16 x i8>
  %69 = shufflevector <16 x i8> %68, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %70 = bitcast <16 x i8> %69 to <4 x i32>
  %71 = extractelement <4 x i32> %70, i32 0
  %72 = bitcast i8* %61 to i32*
  store i32 %71, i32* %72, align 4
  %73 = getelementptr inbounds i8, i8* %61, i64 %1
  %74 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 5, i32 16, i32 5, i32 16, i32 5, i32 16, i32 5, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %75 = bitcast <16 x i8> %74 to <8 x i16>
  %76 = shufflevector <8 x i16> %75, <8 x i16> %12, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %77 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %76, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %78 = add <4 x i32> %77, <i32 128, i32 128, i32 128, i32 128>
  %79 = ashr <4 x i32> %78, <i32 8, i32 8, i32 8, i32 8>
  %80 = bitcast <4 x i32> %79 to <16 x i8>
  %81 = shufflevector <16 x i8> %80, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %82 = bitcast <16 x i8> %81 to <4 x i32>
  %83 = extractelement <4 x i32> %82, i32 0
  %84 = bitcast i8* %73 to i32*
  store i32 %83, i32* %84, align 4
  %85 = getelementptr inbounds i8, i8* %73, i64 %1
  %86 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 6, i32 16, i32 6, i32 16, i32 6, i32 16, i32 6, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %87 = bitcast <16 x i8> %86 to <8 x i16>
  %88 = shufflevector <8 x i16> %87, <8 x i16> %12, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %89 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %88, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %90 = add <4 x i32> %89, <i32 128, i32 128, i32 128, i32 128>
  %91 = ashr <4 x i32> %90, <i32 8, i32 8, i32 8, i32 8>
  %92 = bitcast <4 x i32> %91 to <16 x i8>
  %93 = shufflevector <16 x i8> %92, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %94 = bitcast <16 x i8> %93 to <4 x i32>
  %95 = extractelement <4 x i32> %94, i32 0
  %96 = bitcast i8* %85 to i32*
  store i32 %95, i32* %96, align 4
  %97 = getelementptr inbounds i8, i8* %85, i64 %1
  %98 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 7, i32 16, i32 7, i32 16, i32 7, i32 16, i32 7, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %99 = bitcast <16 x i8> %98 to <8 x i16>
  %100 = shufflevector <8 x i16> %99, <8 x i16> %12, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %101 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %100, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %102 = add <4 x i32> %101, <i32 128, i32 128, i32 128, i32 128>
  %103 = ashr <4 x i32> %102, <i32 8, i32 8, i32 8, i32 8>
  %104 = bitcast <4 x i32> %103 to <16 x i8>
  %105 = shufflevector <16 x i8> %104, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %106 = bitcast <16 x i8> %105 to <4 x i32>
  %107 = extractelement <4 x i32> %106, i32 0
  %108 = bitcast i8* %97 to i32*
  store i32 %107, i32* %108, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_smooth_h_predictor_4x16_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %3 to <16 x i8>*
  %6 = load <16 x i8>, <16 x i8>* %5, align 1
  %7 = getelementptr inbounds i8, i8* %2, i64 3
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i16
  %10 = insertelement <8 x i16> undef, i16 %9, i32 0
  %11 = shufflevector <8 x i16> %10, <8 x i16> undef, <8 x i32> zeroinitializer
  %12 = shufflevector <16 x i8> %6, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %13 = bitcast <16 x i8> %12 to <8 x i16>
  %14 = shufflevector <8 x i16> %13, <8 x i16> %11, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %15 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %14, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %16 = add <4 x i32> %15, <i32 128, i32 128, i32 128, i32 128>
  %17 = ashr <4 x i32> %16, <i32 8, i32 8, i32 8, i32 8>
  %18 = bitcast <4 x i32> %17 to <16 x i8>
  %19 = shufflevector <16 x i8> %18, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %20 = bitcast <16 x i8> %19 to <4 x i32>
  %21 = extractelement <4 x i32> %20, i32 0
  %22 = bitcast i8* %0 to i32*
  store i32 %21, i32* %22, align 4
  %23 = getelementptr inbounds i8, i8* %0, i64 %1
  %24 = shufflevector <16 x i8> %6, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %25 = bitcast <16 x i8> %24 to <8 x i16>
  %26 = shufflevector <8 x i16> %25, <8 x i16> %11, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %27 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %26, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %28 = add <4 x i32> %27, <i32 128, i32 128, i32 128, i32 128>
  %29 = ashr <4 x i32> %28, <i32 8, i32 8, i32 8, i32 8>
  %30 = bitcast <4 x i32> %29 to <16 x i8>
  %31 = shufflevector <16 x i8> %30, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %32 = bitcast <16 x i8> %31 to <4 x i32>
  %33 = extractelement <4 x i32> %32, i32 0
  %34 = bitcast i8* %23 to i32*
  store i32 %33, i32* %34, align 4
  %35 = getelementptr inbounds i8, i8* %23, i64 %1
  %36 = shufflevector <16 x i8> %6, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %37 = bitcast <16 x i8> %36 to <8 x i16>
  %38 = shufflevector <8 x i16> %37, <8 x i16> %11, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %39 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %38, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %40 = add <4 x i32> %39, <i32 128, i32 128, i32 128, i32 128>
  %41 = ashr <4 x i32> %40, <i32 8, i32 8, i32 8, i32 8>
  %42 = bitcast <4 x i32> %41 to <16 x i8>
  %43 = shufflevector <16 x i8> %42, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %44 = bitcast <16 x i8> %43 to <4 x i32>
  %45 = extractelement <4 x i32> %44, i32 0
  %46 = bitcast i8* %35 to i32*
  store i32 %45, i32* %46, align 4
  %47 = getelementptr inbounds i8, i8* %35, i64 %1
  %48 = shufflevector <16 x i8> %6, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %49 = bitcast <16 x i8> %48 to <8 x i16>
  %50 = shufflevector <8 x i16> %49, <8 x i16> %11, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %51 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %50, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %52 = add <4 x i32> %51, <i32 128, i32 128, i32 128, i32 128>
  %53 = ashr <4 x i32> %52, <i32 8, i32 8, i32 8, i32 8>
  %54 = bitcast <4 x i32> %53 to <16 x i8>
  %55 = shufflevector <16 x i8> %54, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %56 = bitcast <16 x i8> %55 to <4 x i32>
  %57 = extractelement <4 x i32> %56, i32 0
  %58 = bitcast i8* %47 to i32*
  store i32 %57, i32* %58, align 4
  %59 = getelementptr inbounds i8, i8* %47, i64 %1
  %60 = shufflevector <16 x i8> %6, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 16, i32 4, i32 16, i32 4, i32 16, i32 4, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %61 = bitcast <16 x i8> %60 to <8 x i16>
  %62 = shufflevector <8 x i16> %61, <8 x i16> %11, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %63 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %62, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %64 = add <4 x i32> %63, <i32 128, i32 128, i32 128, i32 128>
  %65 = ashr <4 x i32> %64, <i32 8, i32 8, i32 8, i32 8>
  %66 = bitcast <4 x i32> %65 to <16 x i8>
  %67 = shufflevector <16 x i8> %66, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %68 = bitcast <16 x i8> %67 to <4 x i32>
  %69 = extractelement <4 x i32> %68, i32 0
  %70 = bitcast i8* %59 to i32*
  store i32 %69, i32* %70, align 4
  %71 = getelementptr inbounds i8, i8* %59, i64 %1
  %72 = shufflevector <16 x i8> %6, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 5, i32 16, i32 5, i32 16, i32 5, i32 16, i32 5, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %73 = bitcast <16 x i8> %72 to <8 x i16>
  %74 = shufflevector <8 x i16> %73, <8 x i16> %11, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %75 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %74, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %76 = add <4 x i32> %75, <i32 128, i32 128, i32 128, i32 128>
  %77 = ashr <4 x i32> %76, <i32 8, i32 8, i32 8, i32 8>
  %78 = bitcast <4 x i32> %77 to <16 x i8>
  %79 = shufflevector <16 x i8> %78, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %80 = bitcast <16 x i8> %79 to <4 x i32>
  %81 = extractelement <4 x i32> %80, i32 0
  %82 = bitcast i8* %71 to i32*
  store i32 %81, i32* %82, align 4
  %83 = getelementptr inbounds i8, i8* %71, i64 %1
  %84 = shufflevector <16 x i8> %6, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 6, i32 16, i32 6, i32 16, i32 6, i32 16, i32 6, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %85 = bitcast <16 x i8> %84 to <8 x i16>
  %86 = shufflevector <8 x i16> %85, <8 x i16> %11, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %87 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %86, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %88 = add <4 x i32> %87, <i32 128, i32 128, i32 128, i32 128>
  %89 = ashr <4 x i32> %88, <i32 8, i32 8, i32 8, i32 8>
  %90 = bitcast <4 x i32> %89 to <16 x i8>
  %91 = shufflevector <16 x i8> %90, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %92 = bitcast <16 x i8> %91 to <4 x i32>
  %93 = extractelement <4 x i32> %92, i32 0
  %94 = bitcast i8* %83 to i32*
  store i32 %93, i32* %94, align 4
  %95 = getelementptr inbounds i8, i8* %83, i64 %1
  %96 = shufflevector <16 x i8> %6, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 7, i32 16, i32 7, i32 16, i32 7, i32 16, i32 7, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %97 = bitcast <16 x i8> %96 to <8 x i16>
  %98 = shufflevector <8 x i16> %97, <8 x i16> %11, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %99 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %98, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %100 = add <4 x i32> %99, <i32 128, i32 128, i32 128, i32 128>
  %101 = ashr <4 x i32> %100, <i32 8, i32 8, i32 8, i32 8>
  %102 = bitcast <4 x i32> %101 to <16 x i8>
  %103 = shufflevector <16 x i8> %102, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %104 = bitcast <16 x i8> %103 to <4 x i32>
  %105 = extractelement <4 x i32> %104, i32 0
  %106 = bitcast i8* %95 to i32*
  store i32 %105, i32* %106, align 4
  %107 = shl i64 %1, 3
  %108 = getelementptr inbounds i8, i8* %0, i64 %107
  %109 = shufflevector <16 x i8> %6, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %110 = shufflevector <16 x i8> %109, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %111 = bitcast <16 x i8> %110 to <8 x i16>
  %112 = shufflevector <8 x i16> %111, <8 x i16> %11, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %113 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %112, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %114 = add <4 x i32> %113, <i32 128, i32 128, i32 128, i32 128>
  %115 = ashr <4 x i32> %114, <i32 8, i32 8, i32 8, i32 8>
  %116 = bitcast <4 x i32> %115 to <16 x i8>
  %117 = shufflevector <16 x i8> %116, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %118 = bitcast <16 x i8> %117 to <4 x i32>
  %119 = extractelement <4 x i32> %118, i32 0
  %120 = bitcast i8* %108 to i32*
  store i32 %119, i32* %120, align 4
  %121 = getelementptr inbounds i8, i8* %108, i64 %1
  %122 = shufflevector <16 x i8> %109, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %123 = bitcast <16 x i8> %122 to <8 x i16>
  %124 = shufflevector <8 x i16> %123, <8 x i16> %11, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %125 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %124, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %126 = add <4 x i32> %125, <i32 128, i32 128, i32 128, i32 128>
  %127 = ashr <4 x i32> %126, <i32 8, i32 8, i32 8, i32 8>
  %128 = bitcast <4 x i32> %127 to <16 x i8>
  %129 = shufflevector <16 x i8> %128, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %130 = bitcast <16 x i8> %129 to <4 x i32>
  %131 = extractelement <4 x i32> %130, i32 0
  %132 = bitcast i8* %121 to i32*
  store i32 %131, i32* %132, align 4
  %133 = getelementptr inbounds i8, i8* %121, i64 %1
  %134 = shufflevector <16 x i8> %109, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %135 = bitcast <16 x i8> %134 to <8 x i16>
  %136 = shufflevector <8 x i16> %135, <8 x i16> %11, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %137 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %136, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %138 = add <4 x i32> %137, <i32 128, i32 128, i32 128, i32 128>
  %139 = ashr <4 x i32> %138, <i32 8, i32 8, i32 8, i32 8>
  %140 = bitcast <4 x i32> %139 to <16 x i8>
  %141 = shufflevector <16 x i8> %140, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %142 = bitcast <16 x i8> %141 to <4 x i32>
  %143 = extractelement <4 x i32> %142, i32 0
  %144 = bitcast i8* %133 to i32*
  store i32 %143, i32* %144, align 4
  %145 = getelementptr inbounds i8, i8* %133, i64 %1
  %146 = shufflevector <16 x i8> %109, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %147 = bitcast <16 x i8> %146 to <8 x i16>
  %148 = shufflevector <8 x i16> %147, <8 x i16> %11, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %149 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %148, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %150 = add <4 x i32> %149, <i32 128, i32 128, i32 128, i32 128>
  %151 = ashr <4 x i32> %150, <i32 8, i32 8, i32 8, i32 8>
  %152 = bitcast <4 x i32> %151 to <16 x i8>
  %153 = shufflevector <16 x i8> %152, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %154 = bitcast <16 x i8> %153 to <4 x i32>
  %155 = extractelement <4 x i32> %154, i32 0
  %156 = bitcast i8* %145 to i32*
  store i32 %155, i32* %156, align 4
  %157 = getelementptr inbounds i8, i8* %145, i64 %1
  %158 = shufflevector <16 x i8> %109, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 16, i32 4, i32 16, i32 4, i32 16, i32 4, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %159 = bitcast <16 x i8> %158 to <8 x i16>
  %160 = shufflevector <8 x i16> %159, <8 x i16> %11, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %161 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %160, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %162 = add <4 x i32> %161, <i32 128, i32 128, i32 128, i32 128>
  %163 = ashr <4 x i32> %162, <i32 8, i32 8, i32 8, i32 8>
  %164 = bitcast <4 x i32> %163 to <16 x i8>
  %165 = shufflevector <16 x i8> %164, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %166 = bitcast <16 x i8> %165 to <4 x i32>
  %167 = extractelement <4 x i32> %166, i32 0
  %168 = bitcast i8* %157 to i32*
  store i32 %167, i32* %168, align 4
  %169 = getelementptr inbounds i8, i8* %157, i64 %1
  %170 = shufflevector <16 x i8> %109, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 5, i32 16, i32 5, i32 16, i32 5, i32 16, i32 5, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %171 = bitcast <16 x i8> %170 to <8 x i16>
  %172 = shufflevector <8 x i16> %171, <8 x i16> %11, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %173 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %172, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %174 = add <4 x i32> %173, <i32 128, i32 128, i32 128, i32 128>
  %175 = ashr <4 x i32> %174, <i32 8, i32 8, i32 8, i32 8>
  %176 = bitcast <4 x i32> %175 to <16 x i8>
  %177 = shufflevector <16 x i8> %176, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %178 = bitcast <16 x i8> %177 to <4 x i32>
  %179 = extractelement <4 x i32> %178, i32 0
  %180 = bitcast i8* %169 to i32*
  store i32 %179, i32* %180, align 4
  %181 = getelementptr inbounds i8, i8* %169, i64 %1
  %182 = shufflevector <16 x i8> %109, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 6, i32 16, i32 6, i32 16, i32 6, i32 16, i32 6, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %183 = bitcast <16 x i8> %182 to <8 x i16>
  %184 = shufflevector <8 x i16> %183, <8 x i16> %11, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %185 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %184, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %186 = add <4 x i32> %185, <i32 128, i32 128, i32 128, i32 128>
  %187 = ashr <4 x i32> %186, <i32 8, i32 8, i32 8, i32 8>
  %188 = bitcast <4 x i32> %187 to <16 x i8>
  %189 = shufflevector <16 x i8> %188, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %190 = bitcast <16 x i8> %189 to <4 x i32>
  %191 = extractelement <4 x i32> %190, i32 0
  %192 = bitcast i8* %181 to i32*
  store i32 %191, i32* %192, align 4
  %193 = getelementptr inbounds i8, i8* %181, i64 %1
  %194 = shufflevector <16 x i8> %109, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 7, i32 16, i32 7, i32 16, i32 7, i32 16, i32 7, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %195 = bitcast <16 x i8> %194 to <8 x i16>
  %196 = shufflevector <8 x i16> %195, <8 x i16> %11, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %197 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %196, <8 x i16> <i16 255, i16 1, i16 149, i16 107, i16 85, i16 171, i16 64, i16 192>) #3
  %198 = add <4 x i32> %197, <i32 128, i32 128, i32 128, i32 128>
  %199 = ashr <4 x i32> %198, <i32 8, i32 8, i32 8, i32 8>
  %200 = bitcast <4 x i32> %199 to <16 x i8>
  %201 = shufflevector <16 x i8> %200, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %202 = bitcast <16 x i8> %201 to <4 x i32>
  %203 = extractelement <4 x i32> %202, i32 0
  %204 = bitcast i8* %193 to i32*
  store i32 %203, i32* %204, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_smooth_h_predictor_8x4_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = getelementptr inbounds i8, i8* %2, i64 7
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i16
  %8 = insertelement <8 x i16> undef, i16 %7, i32 0
  %9 = shufflevector <8 x i16> %8, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %10 = bitcast i8* %3 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %11, i32 0
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <16 x i8> %14 to <8 x i16>
  %16 = shufflevector <8 x i16> %15, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %17 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %18 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %19 = add <4 x i32> %17, <i32 128, i32 128, i32 128, i32 128>
  %20 = ashr <4 x i32> %19, <i32 8, i32 8, i32 8, i32 8>
  %21 = add <4 x i32> %18, <i32 128, i32 128, i32 128, i32 128>
  %22 = ashr <4 x i32> %21, <i32 8, i32 8, i32 8, i32 8>
  %23 = bitcast <4 x i32> %20 to <8 x i16>
  %24 = bitcast <4 x i32> %22 to <8 x i16>
  %25 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %23, <8 x i16> %24) #3
  %26 = shufflevector <16 x i8> %25, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %27 = bitcast <16 x i8> %26 to <2 x i64>
  %28 = extractelement <2 x i64> %27, i32 0
  %29 = bitcast i8* %0 to i64*
  store i64 %28, i64* %29, align 1
  %30 = getelementptr inbounds i8, i8* %0, i64 %1
  %31 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %32 = bitcast <16 x i8> %31 to <8 x i16>
  %33 = shufflevector <8 x i16> %32, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %34 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %33, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %35 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %33, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %36 = add <4 x i32> %34, <i32 128, i32 128, i32 128, i32 128>
  %37 = ashr <4 x i32> %36, <i32 8, i32 8, i32 8, i32 8>
  %38 = add <4 x i32> %35, <i32 128, i32 128, i32 128, i32 128>
  %39 = ashr <4 x i32> %38, <i32 8, i32 8, i32 8, i32 8>
  %40 = bitcast <4 x i32> %37 to <8 x i16>
  %41 = bitcast <4 x i32> %39 to <8 x i16>
  %42 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %40, <8 x i16> %41) #3
  %43 = shufflevector <16 x i8> %42, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %44 = bitcast <16 x i8> %43 to <2 x i64>
  %45 = extractelement <2 x i64> %44, i32 0
  %46 = bitcast i8* %30 to i64*
  store i64 %45, i64* %46, align 1
  %47 = getelementptr inbounds i8, i8* %30, i64 %1
  %48 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %49 = bitcast <16 x i8> %48 to <8 x i16>
  %50 = shufflevector <8 x i16> %49, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %51 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %50, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %52 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %50, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %53 = add <4 x i32> %51, <i32 128, i32 128, i32 128, i32 128>
  %54 = ashr <4 x i32> %53, <i32 8, i32 8, i32 8, i32 8>
  %55 = add <4 x i32> %52, <i32 128, i32 128, i32 128, i32 128>
  %56 = ashr <4 x i32> %55, <i32 8, i32 8, i32 8, i32 8>
  %57 = bitcast <4 x i32> %54 to <8 x i16>
  %58 = bitcast <4 x i32> %56 to <8 x i16>
  %59 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %57, <8 x i16> %58) #3
  %60 = shufflevector <16 x i8> %59, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %61 = bitcast <16 x i8> %60 to <2 x i64>
  %62 = extractelement <2 x i64> %61, i32 0
  %63 = bitcast i8* %47 to i64*
  store i64 %62, i64* %63, align 1
  %64 = getelementptr inbounds i8, i8* %47, i64 %1
  %65 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %66 = bitcast <16 x i8> %65 to <8 x i16>
  %67 = shufflevector <8 x i16> %66, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %68 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %67, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %69 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %67, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %70 = add <4 x i32> %68, <i32 128, i32 128, i32 128, i32 128>
  %71 = ashr <4 x i32> %70, <i32 8, i32 8, i32 8, i32 8>
  %72 = add <4 x i32> %69, <i32 128, i32 128, i32 128, i32 128>
  %73 = ashr <4 x i32> %72, <i32 8, i32 8, i32 8, i32 8>
  %74 = bitcast <4 x i32> %71 to <8 x i16>
  %75 = bitcast <4 x i32> %73 to <8 x i16>
  %76 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %74, <8 x i16> %75) #3
  %77 = shufflevector <16 x i8> %76, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %78 = bitcast <16 x i8> %77 to <2 x i64>
  %79 = extractelement <2 x i64> %78, i32 0
  %80 = bitcast i8* %64 to i64*
  store i64 %79, i64* %80, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_smooth_h_predictor_8x8_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = getelementptr inbounds i8, i8* %2, i64 7
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i16
  %8 = insertelement <8 x i16> undef, i16 %7, i32 0
  %9 = shufflevector <8 x i16> %8, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %10 = bitcast i8* %3 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %11, i32 0
  %13 = bitcast <2 x i64> %12 to <16 x i8>
  %14 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <16 x i8> %14 to <8 x i16>
  %16 = shufflevector <8 x i16> %15, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %17 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %18 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %16, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %19 = add <4 x i32> %17, <i32 128, i32 128, i32 128, i32 128>
  %20 = ashr <4 x i32> %19, <i32 8, i32 8, i32 8, i32 8>
  %21 = add <4 x i32> %18, <i32 128, i32 128, i32 128, i32 128>
  %22 = ashr <4 x i32> %21, <i32 8, i32 8, i32 8, i32 8>
  %23 = bitcast <4 x i32> %20 to <8 x i16>
  %24 = bitcast <4 x i32> %22 to <8 x i16>
  %25 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %23, <8 x i16> %24) #3
  %26 = shufflevector <16 x i8> %25, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %27 = bitcast <16 x i8> %26 to <2 x i64>
  %28 = extractelement <2 x i64> %27, i32 0
  %29 = bitcast i8* %0 to i64*
  store i64 %28, i64* %29, align 1
  %30 = getelementptr inbounds i8, i8* %0, i64 %1
  %31 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %32 = bitcast <16 x i8> %31 to <8 x i16>
  %33 = shufflevector <8 x i16> %32, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %34 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %33, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %35 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %33, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %36 = add <4 x i32> %34, <i32 128, i32 128, i32 128, i32 128>
  %37 = ashr <4 x i32> %36, <i32 8, i32 8, i32 8, i32 8>
  %38 = add <4 x i32> %35, <i32 128, i32 128, i32 128, i32 128>
  %39 = ashr <4 x i32> %38, <i32 8, i32 8, i32 8, i32 8>
  %40 = bitcast <4 x i32> %37 to <8 x i16>
  %41 = bitcast <4 x i32> %39 to <8 x i16>
  %42 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %40, <8 x i16> %41) #3
  %43 = shufflevector <16 x i8> %42, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %44 = bitcast <16 x i8> %43 to <2 x i64>
  %45 = extractelement <2 x i64> %44, i32 0
  %46 = bitcast i8* %30 to i64*
  store i64 %45, i64* %46, align 1
  %47 = getelementptr inbounds i8, i8* %30, i64 %1
  %48 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %49 = bitcast <16 x i8> %48 to <8 x i16>
  %50 = shufflevector <8 x i16> %49, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %51 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %50, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %52 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %50, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %53 = add <4 x i32> %51, <i32 128, i32 128, i32 128, i32 128>
  %54 = ashr <4 x i32> %53, <i32 8, i32 8, i32 8, i32 8>
  %55 = add <4 x i32> %52, <i32 128, i32 128, i32 128, i32 128>
  %56 = ashr <4 x i32> %55, <i32 8, i32 8, i32 8, i32 8>
  %57 = bitcast <4 x i32> %54 to <8 x i16>
  %58 = bitcast <4 x i32> %56 to <8 x i16>
  %59 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %57, <8 x i16> %58) #3
  %60 = shufflevector <16 x i8> %59, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %61 = bitcast <16 x i8> %60 to <2 x i64>
  %62 = extractelement <2 x i64> %61, i32 0
  %63 = bitcast i8* %47 to i64*
  store i64 %62, i64* %63, align 1
  %64 = getelementptr inbounds i8, i8* %47, i64 %1
  %65 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %66 = bitcast <16 x i8> %65 to <8 x i16>
  %67 = shufflevector <8 x i16> %66, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %68 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %67, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %69 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %67, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %70 = add <4 x i32> %68, <i32 128, i32 128, i32 128, i32 128>
  %71 = ashr <4 x i32> %70, <i32 8, i32 8, i32 8, i32 8>
  %72 = add <4 x i32> %69, <i32 128, i32 128, i32 128, i32 128>
  %73 = ashr <4 x i32> %72, <i32 8, i32 8, i32 8, i32 8>
  %74 = bitcast <4 x i32> %71 to <8 x i16>
  %75 = bitcast <4 x i32> %73 to <8 x i16>
  %76 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %74, <8 x i16> %75) #3
  %77 = shufflevector <16 x i8> %76, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %78 = bitcast <16 x i8> %77 to <2 x i64>
  %79 = extractelement <2 x i64> %78, i32 0
  %80 = bitcast i8* %64 to i64*
  store i64 %79, i64* %80, align 1
  %81 = getelementptr inbounds i8, i8* %64, i64 %1
  %82 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 16, i32 4, i32 16, i32 4, i32 16, i32 4, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %83 = bitcast <16 x i8> %82 to <8 x i16>
  %84 = shufflevector <8 x i16> %83, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %85 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %84, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %86 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %84, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %87 = add <4 x i32> %85, <i32 128, i32 128, i32 128, i32 128>
  %88 = ashr <4 x i32> %87, <i32 8, i32 8, i32 8, i32 8>
  %89 = add <4 x i32> %86, <i32 128, i32 128, i32 128, i32 128>
  %90 = ashr <4 x i32> %89, <i32 8, i32 8, i32 8, i32 8>
  %91 = bitcast <4 x i32> %88 to <8 x i16>
  %92 = bitcast <4 x i32> %90 to <8 x i16>
  %93 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %91, <8 x i16> %92) #3
  %94 = shufflevector <16 x i8> %93, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %95 = bitcast <16 x i8> %94 to <2 x i64>
  %96 = extractelement <2 x i64> %95, i32 0
  %97 = bitcast i8* %81 to i64*
  store i64 %96, i64* %97, align 1
  %98 = getelementptr inbounds i8, i8* %81, i64 %1
  %99 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 5, i32 16, i32 5, i32 16, i32 5, i32 16, i32 5, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %100 = bitcast <16 x i8> %99 to <8 x i16>
  %101 = shufflevector <8 x i16> %100, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %102 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %101, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %103 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %101, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %104 = add <4 x i32> %102, <i32 128, i32 128, i32 128, i32 128>
  %105 = ashr <4 x i32> %104, <i32 8, i32 8, i32 8, i32 8>
  %106 = add <4 x i32> %103, <i32 128, i32 128, i32 128, i32 128>
  %107 = ashr <4 x i32> %106, <i32 8, i32 8, i32 8, i32 8>
  %108 = bitcast <4 x i32> %105 to <8 x i16>
  %109 = bitcast <4 x i32> %107 to <8 x i16>
  %110 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %108, <8 x i16> %109) #3
  %111 = shufflevector <16 x i8> %110, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %112 = bitcast <16 x i8> %111 to <2 x i64>
  %113 = extractelement <2 x i64> %112, i32 0
  %114 = bitcast i8* %98 to i64*
  store i64 %113, i64* %114, align 1
  %115 = getelementptr inbounds i8, i8* %98, i64 %1
  %116 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 6, i32 16, i32 6, i32 16, i32 6, i32 16, i32 6, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %117 = bitcast <16 x i8> %116 to <8 x i16>
  %118 = shufflevector <8 x i16> %117, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %119 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %118, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %120 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %118, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %121 = add <4 x i32> %119, <i32 128, i32 128, i32 128, i32 128>
  %122 = ashr <4 x i32> %121, <i32 8, i32 8, i32 8, i32 8>
  %123 = add <4 x i32> %120, <i32 128, i32 128, i32 128, i32 128>
  %124 = ashr <4 x i32> %123, <i32 8, i32 8, i32 8, i32 8>
  %125 = bitcast <4 x i32> %122 to <8 x i16>
  %126 = bitcast <4 x i32> %124 to <8 x i16>
  %127 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %125, <8 x i16> %126) #3
  %128 = shufflevector <16 x i8> %127, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %129 = bitcast <16 x i8> %128 to <2 x i64>
  %130 = extractelement <2 x i64> %129, i32 0
  %131 = bitcast i8* %115 to i64*
  store i64 %130, i64* %131, align 1
  %132 = getelementptr inbounds i8, i8* %115, i64 %1
  %133 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 7, i32 16, i32 7, i32 16, i32 7, i32 16, i32 7, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %134 = bitcast <16 x i8> %133 to <8 x i16>
  %135 = shufflevector <8 x i16> %134, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %136 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %135, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %137 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %135, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %138 = add <4 x i32> %136, <i32 128, i32 128, i32 128, i32 128>
  %139 = ashr <4 x i32> %138, <i32 8, i32 8, i32 8, i32 8>
  %140 = add <4 x i32> %137, <i32 128, i32 128, i32 128, i32 128>
  %141 = ashr <4 x i32> %140, <i32 8, i32 8, i32 8, i32 8>
  %142 = bitcast <4 x i32> %139 to <8 x i16>
  %143 = bitcast <4 x i32> %141 to <8 x i16>
  %144 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %142, <8 x i16> %143) #3
  %145 = shufflevector <16 x i8> %144, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %146 = bitcast <16 x i8> %145 to <2 x i64>
  %147 = extractelement <2 x i64> %146, i32 0
  %148 = bitcast i8* %132 to i64*
  store i64 %147, i64* %148, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_smooth_h_predictor_8x16_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = getelementptr inbounds i8, i8* %2, i64 7
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i16
  %8 = insertelement <8 x i16> undef, i16 %7, i32 0
  %9 = shufflevector <8 x i16> %8, <8 x i16> undef, <8 x i32> zeroinitializer
  %10 = bitcast i8* %3 to <16 x i8>*
  %11 = load <16 x i8>, <16 x i8>* %10, align 16
  %12 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %13 = bitcast <16 x i8> %12 to <8 x i16>
  %14 = shufflevector <8 x i16> %13, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %15 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %14, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %16 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %14, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %17 = add <4 x i32> %15, <i32 128, i32 128, i32 128, i32 128>
  %18 = ashr <4 x i32> %17, <i32 8, i32 8, i32 8, i32 8>
  %19 = add <4 x i32> %16, <i32 128, i32 128, i32 128, i32 128>
  %20 = ashr <4 x i32> %19, <i32 8, i32 8, i32 8, i32 8>
  %21 = bitcast <4 x i32> %18 to <8 x i16>
  %22 = bitcast <4 x i32> %20 to <8 x i16>
  %23 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %21, <8 x i16> %22) #3
  %24 = shufflevector <16 x i8> %23, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %25 = bitcast <16 x i8> %24 to <2 x i64>
  %26 = extractelement <2 x i64> %25, i32 0
  %27 = bitcast i8* %0 to i64*
  store i64 %26, i64* %27, align 1
  %28 = getelementptr inbounds i8, i8* %0, i64 %1
  %29 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %30 = bitcast <16 x i8> %29 to <8 x i16>
  %31 = shufflevector <8 x i16> %30, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %32 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %31, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %33 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %31, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %34 = add <4 x i32> %32, <i32 128, i32 128, i32 128, i32 128>
  %35 = ashr <4 x i32> %34, <i32 8, i32 8, i32 8, i32 8>
  %36 = add <4 x i32> %33, <i32 128, i32 128, i32 128, i32 128>
  %37 = ashr <4 x i32> %36, <i32 8, i32 8, i32 8, i32 8>
  %38 = bitcast <4 x i32> %35 to <8 x i16>
  %39 = bitcast <4 x i32> %37 to <8 x i16>
  %40 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %38, <8 x i16> %39) #3
  %41 = shufflevector <16 x i8> %40, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %42 = bitcast <16 x i8> %41 to <2 x i64>
  %43 = extractelement <2 x i64> %42, i32 0
  %44 = bitcast i8* %28 to i64*
  store i64 %43, i64* %44, align 1
  %45 = getelementptr inbounds i8, i8* %28, i64 %1
  %46 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %47 = bitcast <16 x i8> %46 to <8 x i16>
  %48 = shufflevector <8 x i16> %47, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %49 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %48, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %50 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %48, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %51 = add <4 x i32> %49, <i32 128, i32 128, i32 128, i32 128>
  %52 = ashr <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %53 = add <4 x i32> %50, <i32 128, i32 128, i32 128, i32 128>
  %54 = ashr <4 x i32> %53, <i32 8, i32 8, i32 8, i32 8>
  %55 = bitcast <4 x i32> %52 to <8 x i16>
  %56 = bitcast <4 x i32> %54 to <8 x i16>
  %57 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %55, <8 x i16> %56) #3
  %58 = shufflevector <16 x i8> %57, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %59 = bitcast <16 x i8> %58 to <2 x i64>
  %60 = extractelement <2 x i64> %59, i32 0
  %61 = bitcast i8* %45 to i64*
  store i64 %60, i64* %61, align 1
  %62 = getelementptr inbounds i8, i8* %45, i64 %1
  %63 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %64 = bitcast <16 x i8> %63 to <8 x i16>
  %65 = shufflevector <8 x i16> %64, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %66 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %65, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %67 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %65, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %68 = add <4 x i32> %66, <i32 128, i32 128, i32 128, i32 128>
  %69 = ashr <4 x i32> %68, <i32 8, i32 8, i32 8, i32 8>
  %70 = add <4 x i32> %67, <i32 128, i32 128, i32 128, i32 128>
  %71 = ashr <4 x i32> %70, <i32 8, i32 8, i32 8, i32 8>
  %72 = bitcast <4 x i32> %69 to <8 x i16>
  %73 = bitcast <4 x i32> %71 to <8 x i16>
  %74 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %72, <8 x i16> %73) #3
  %75 = shufflevector <16 x i8> %74, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %76 = bitcast <16 x i8> %75 to <2 x i64>
  %77 = extractelement <2 x i64> %76, i32 0
  %78 = bitcast i8* %62 to i64*
  store i64 %77, i64* %78, align 1
  %79 = getelementptr inbounds i8, i8* %62, i64 %1
  %80 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 16, i32 4, i32 16, i32 4, i32 16, i32 4, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %81 = bitcast <16 x i8> %80 to <8 x i16>
  %82 = shufflevector <8 x i16> %81, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %83 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %82, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %84 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %82, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %85 = add <4 x i32> %83, <i32 128, i32 128, i32 128, i32 128>
  %86 = ashr <4 x i32> %85, <i32 8, i32 8, i32 8, i32 8>
  %87 = add <4 x i32> %84, <i32 128, i32 128, i32 128, i32 128>
  %88 = ashr <4 x i32> %87, <i32 8, i32 8, i32 8, i32 8>
  %89 = bitcast <4 x i32> %86 to <8 x i16>
  %90 = bitcast <4 x i32> %88 to <8 x i16>
  %91 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %89, <8 x i16> %90) #3
  %92 = shufflevector <16 x i8> %91, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %93 = bitcast <16 x i8> %92 to <2 x i64>
  %94 = extractelement <2 x i64> %93, i32 0
  %95 = bitcast i8* %79 to i64*
  store i64 %94, i64* %95, align 1
  %96 = getelementptr inbounds i8, i8* %79, i64 %1
  %97 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 5, i32 16, i32 5, i32 16, i32 5, i32 16, i32 5, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %98 = bitcast <16 x i8> %97 to <8 x i16>
  %99 = shufflevector <8 x i16> %98, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %100 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %99, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %101 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %99, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %102 = add <4 x i32> %100, <i32 128, i32 128, i32 128, i32 128>
  %103 = ashr <4 x i32> %102, <i32 8, i32 8, i32 8, i32 8>
  %104 = add <4 x i32> %101, <i32 128, i32 128, i32 128, i32 128>
  %105 = ashr <4 x i32> %104, <i32 8, i32 8, i32 8, i32 8>
  %106 = bitcast <4 x i32> %103 to <8 x i16>
  %107 = bitcast <4 x i32> %105 to <8 x i16>
  %108 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %106, <8 x i16> %107) #3
  %109 = shufflevector <16 x i8> %108, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %110 = bitcast <16 x i8> %109 to <2 x i64>
  %111 = extractelement <2 x i64> %110, i32 0
  %112 = bitcast i8* %96 to i64*
  store i64 %111, i64* %112, align 1
  %113 = getelementptr inbounds i8, i8* %96, i64 %1
  %114 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 6, i32 16, i32 6, i32 16, i32 6, i32 16, i32 6, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %115 = bitcast <16 x i8> %114 to <8 x i16>
  %116 = shufflevector <8 x i16> %115, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %117 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %116, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %118 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %116, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %119 = add <4 x i32> %117, <i32 128, i32 128, i32 128, i32 128>
  %120 = ashr <4 x i32> %119, <i32 8, i32 8, i32 8, i32 8>
  %121 = add <4 x i32> %118, <i32 128, i32 128, i32 128, i32 128>
  %122 = ashr <4 x i32> %121, <i32 8, i32 8, i32 8, i32 8>
  %123 = bitcast <4 x i32> %120 to <8 x i16>
  %124 = bitcast <4 x i32> %122 to <8 x i16>
  %125 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %123, <8 x i16> %124) #3
  %126 = shufflevector <16 x i8> %125, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %127 = bitcast <16 x i8> %126 to <2 x i64>
  %128 = extractelement <2 x i64> %127, i32 0
  %129 = bitcast i8* %113 to i64*
  store i64 %128, i64* %129, align 1
  %130 = getelementptr inbounds i8, i8* %113, i64 %1
  %131 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 7, i32 16, i32 7, i32 16, i32 7, i32 16, i32 7, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %132 = bitcast <16 x i8> %131 to <8 x i16>
  %133 = shufflevector <8 x i16> %132, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %134 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %133, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %135 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %133, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %136 = add <4 x i32> %134, <i32 128, i32 128, i32 128, i32 128>
  %137 = ashr <4 x i32> %136, <i32 8, i32 8, i32 8, i32 8>
  %138 = add <4 x i32> %135, <i32 128, i32 128, i32 128, i32 128>
  %139 = ashr <4 x i32> %138, <i32 8, i32 8, i32 8, i32 8>
  %140 = bitcast <4 x i32> %137 to <8 x i16>
  %141 = bitcast <4 x i32> %139 to <8 x i16>
  %142 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %140, <8 x i16> %141) #3
  %143 = shufflevector <16 x i8> %142, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %144 = bitcast <16 x i8> %143 to <2 x i64>
  %145 = extractelement <2 x i64> %144, i32 0
  %146 = bitcast i8* %130 to i64*
  store i64 %145, i64* %146, align 1
  %147 = shl i64 %1, 3
  %148 = getelementptr inbounds i8, i8* %0, i64 %147
  %149 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 16, i32 8, i32 16, i32 8, i32 16, i32 8, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %150 = bitcast <16 x i8> %149 to <8 x i16>
  %151 = shufflevector <8 x i16> %150, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %152 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %151, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %153 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %151, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %154 = add <4 x i32> %152, <i32 128, i32 128, i32 128, i32 128>
  %155 = ashr <4 x i32> %154, <i32 8, i32 8, i32 8, i32 8>
  %156 = add <4 x i32> %153, <i32 128, i32 128, i32 128, i32 128>
  %157 = ashr <4 x i32> %156, <i32 8, i32 8, i32 8, i32 8>
  %158 = bitcast <4 x i32> %155 to <8 x i16>
  %159 = bitcast <4 x i32> %157 to <8 x i16>
  %160 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %158, <8 x i16> %159) #3
  %161 = shufflevector <16 x i8> %160, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %162 = bitcast <16 x i8> %161 to <2 x i64>
  %163 = extractelement <2 x i64> %162, i32 0
  %164 = bitcast i8* %148 to i64*
  store i64 %163, i64* %164, align 1
  %165 = getelementptr inbounds i8, i8* %148, i64 %1
  %166 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 9, i32 16, i32 9, i32 16, i32 9, i32 16, i32 9, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %167 = bitcast <16 x i8> %166 to <8 x i16>
  %168 = shufflevector <8 x i16> %167, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %169 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %168, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %170 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %168, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %171 = add <4 x i32> %169, <i32 128, i32 128, i32 128, i32 128>
  %172 = ashr <4 x i32> %171, <i32 8, i32 8, i32 8, i32 8>
  %173 = add <4 x i32> %170, <i32 128, i32 128, i32 128, i32 128>
  %174 = ashr <4 x i32> %173, <i32 8, i32 8, i32 8, i32 8>
  %175 = bitcast <4 x i32> %172 to <8 x i16>
  %176 = bitcast <4 x i32> %174 to <8 x i16>
  %177 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %175, <8 x i16> %176) #3
  %178 = shufflevector <16 x i8> %177, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %179 = bitcast <16 x i8> %178 to <2 x i64>
  %180 = extractelement <2 x i64> %179, i32 0
  %181 = bitcast i8* %165 to i64*
  store i64 %180, i64* %181, align 1
  %182 = getelementptr inbounds i8, i8* %165, i64 %1
  %183 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 10, i32 16, i32 10, i32 16, i32 10, i32 16, i32 10, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %184 = bitcast <16 x i8> %183 to <8 x i16>
  %185 = shufflevector <8 x i16> %184, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %186 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %185, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %187 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %185, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %188 = add <4 x i32> %186, <i32 128, i32 128, i32 128, i32 128>
  %189 = ashr <4 x i32> %188, <i32 8, i32 8, i32 8, i32 8>
  %190 = add <4 x i32> %187, <i32 128, i32 128, i32 128, i32 128>
  %191 = ashr <4 x i32> %190, <i32 8, i32 8, i32 8, i32 8>
  %192 = bitcast <4 x i32> %189 to <8 x i16>
  %193 = bitcast <4 x i32> %191 to <8 x i16>
  %194 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %192, <8 x i16> %193) #3
  %195 = shufflevector <16 x i8> %194, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %196 = bitcast <16 x i8> %195 to <2 x i64>
  %197 = extractelement <2 x i64> %196, i32 0
  %198 = bitcast i8* %182 to i64*
  store i64 %197, i64* %198, align 1
  %199 = getelementptr inbounds i8, i8* %182, i64 %1
  %200 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 11, i32 16, i32 11, i32 16, i32 11, i32 16, i32 11, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %201 = bitcast <16 x i8> %200 to <8 x i16>
  %202 = shufflevector <8 x i16> %201, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %203 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %202, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %204 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %202, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %205 = add <4 x i32> %203, <i32 128, i32 128, i32 128, i32 128>
  %206 = ashr <4 x i32> %205, <i32 8, i32 8, i32 8, i32 8>
  %207 = add <4 x i32> %204, <i32 128, i32 128, i32 128, i32 128>
  %208 = ashr <4 x i32> %207, <i32 8, i32 8, i32 8, i32 8>
  %209 = bitcast <4 x i32> %206 to <8 x i16>
  %210 = bitcast <4 x i32> %208 to <8 x i16>
  %211 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %209, <8 x i16> %210) #3
  %212 = shufflevector <16 x i8> %211, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %213 = bitcast <16 x i8> %212 to <2 x i64>
  %214 = extractelement <2 x i64> %213, i32 0
  %215 = bitcast i8* %199 to i64*
  store i64 %214, i64* %215, align 1
  %216 = getelementptr inbounds i8, i8* %199, i64 %1
  %217 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 12, i32 16, i32 12, i32 16, i32 12, i32 16, i32 12, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %218 = bitcast <16 x i8> %217 to <8 x i16>
  %219 = shufflevector <8 x i16> %218, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %220 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %219, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %221 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %219, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %222 = add <4 x i32> %220, <i32 128, i32 128, i32 128, i32 128>
  %223 = ashr <4 x i32> %222, <i32 8, i32 8, i32 8, i32 8>
  %224 = add <4 x i32> %221, <i32 128, i32 128, i32 128, i32 128>
  %225 = ashr <4 x i32> %224, <i32 8, i32 8, i32 8, i32 8>
  %226 = bitcast <4 x i32> %223 to <8 x i16>
  %227 = bitcast <4 x i32> %225 to <8 x i16>
  %228 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %226, <8 x i16> %227) #3
  %229 = shufflevector <16 x i8> %228, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %230 = bitcast <16 x i8> %229 to <2 x i64>
  %231 = extractelement <2 x i64> %230, i32 0
  %232 = bitcast i8* %216 to i64*
  store i64 %231, i64* %232, align 1
  %233 = getelementptr inbounds i8, i8* %216, i64 %1
  %234 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 13, i32 16, i32 13, i32 16, i32 13, i32 16, i32 13, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %235 = bitcast <16 x i8> %234 to <8 x i16>
  %236 = shufflevector <8 x i16> %235, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %237 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %236, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %238 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %236, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %239 = add <4 x i32> %237, <i32 128, i32 128, i32 128, i32 128>
  %240 = ashr <4 x i32> %239, <i32 8, i32 8, i32 8, i32 8>
  %241 = add <4 x i32> %238, <i32 128, i32 128, i32 128, i32 128>
  %242 = ashr <4 x i32> %241, <i32 8, i32 8, i32 8, i32 8>
  %243 = bitcast <4 x i32> %240 to <8 x i16>
  %244 = bitcast <4 x i32> %242 to <8 x i16>
  %245 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %243, <8 x i16> %244) #3
  %246 = shufflevector <16 x i8> %245, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %247 = bitcast <16 x i8> %246 to <2 x i64>
  %248 = extractelement <2 x i64> %247, i32 0
  %249 = bitcast i8* %233 to i64*
  store i64 %248, i64* %249, align 1
  %250 = getelementptr inbounds i8, i8* %233, i64 %1
  %251 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 14, i32 16, i32 14, i32 16, i32 14, i32 16, i32 14, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %252 = bitcast <16 x i8> %251 to <8 x i16>
  %253 = shufflevector <8 x i16> %252, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %254 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %253, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %255 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %253, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %256 = add <4 x i32> %254, <i32 128, i32 128, i32 128, i32 128>
  %257 = ashr <4 x i32> %256, <i32 8, i32 8, i32 8, i32 8>
  %258 = add <4 x i32> %255, <i32 128, i32 128, i32 128, i32 128>
  %259 = ashr <4 x i32> %258, <i32 8, i32 8, i32 8, i32 8>
  %260 = bitcast <4 x i32> %257 to <8 x i16>
  %261 = bitcast <4 x i32> %259 to <8 x i16>
  %262 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %260, <8 x i16> %261) #3
  %263 = shufflevector <16 x i8> %262, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %264 = bitcast <16 x i8> %263 to <2 x i64>
  %265 = extractelement <2 x i64> %264, i32 0
  %266 = bitcast i8* %250 to i64*
  store i64 %265, i64* %266, align 1
  %267 = getelementptr inbounds i8, i8* %250, i64 %1
  %268 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 15, i32 16, i32 15, i32 16, i32 15, i32 16, i32 15, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %269 = bitcast <16 x i8> %268 to <8 x i16>
  %270 = shufflevector <8 x i16> %269, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %271 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %270, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %272 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %270, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %273 = add <4 x i32> %271, <i32 128, i32 128, i32 128, i32 128>
  %274 = ashr <4 x i32> %273, <i32 8, i32 8, i32 8, i32 8>
  %275 = add <4 x i32> %272, <i32 128, i32 128, i32 128, i32 128>
  %276 = ashr <4 x i32> %275, <i32 8, i32 8, i32 8, i32 8>
  %277 = bitcast <4 x i32> %274 to <8 x i16>
  %278 = bitcast <4 x i32> %276 to <8 x i16>
  %279 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %277, <8 x i16> %278) #3
  %280 = shufflevector <16 x i8> %279, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %281 = bitcast <16 x i8> %280 to <2 x i64>
  %282 = extractelement <2 x i64> %281, i32 0
  %283 = bitcast i8* %267 to i64*
  store i64 %282, i64* %283, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_smooth_h_predictor_8x32_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = getelementptr inbounds i8, i8* %2, i64 7
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i16
  %8 = insertelement <8 x i16> undef, i16 %7, i32 0
  %9 = shufflevector <8 x i16> %8, <8 x i16> undef, <8 x i32> zeroinitializer
  %10 = bitcast i8* %3 to <16 x i8>*
  %11 = load <16 x i8>, <16 x i8>* %10, align 16
  %12 = getelementptr inbounds i8, i8* %3, i64 16
  %13 = bitcast i8* %12 to <16 x i8>*
  %14 = load <16 x i8>, <16 x i8>* %13, align 16
  %15 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = bitcast <16 x i8> %15 to <8 x i16>
  %17 = shufflevector <8 x i16> %16, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %18 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %19 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %20 = add <4 x i32> %18, <i32 128, i32 128, i32 128, i32 128>
  %21 = ashr <4 x i32> %20, <i32 8, i32 8, i32 8, i32 8>
  %22 = add <4 x i32> %19, <i32 128, i32 128, i32 128, i32 128>
  %23 = ashr <4 x i32> %22, <i32 8, i32 8, i32 8, i32 8>
  %24 = bitcast <4 x i32> %21 to <8 x i16>
  %25 = bitcast <4 x i32> %23 to <8 x i16>
  %26 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %24, <8 x i16> %25) #3
  %27 = shufflevector <16 x i8> %26, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %28 = bitcast <16 x i8> %27 to <2 x i64>
  %29 = extractelement <2 x i64> %28, i32 0
  %30 = bitcast i8* %0 to i64*
  store i64 %29, i64* %30, align 1
  %31 = getelementptr inbounds i8, i8* %0, i64 %1
  %32 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %33 = bitcast <16 x i8> %32 to <8 x i16>
  %34 = shufflevector <8 x i16> %33, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %35 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %34, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %36 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %34, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %37 = add <4 x i32> %35, <i32 128, i32 128, i32 128, i32 128>
  %38 = ashr <4 x i32> %37, <i32 8, i32 8, i32 8, i32 8>
  %39 = add <4 x i32> %36, <i32 128, i32 128, i32 128, i32 128>
  %40 = ashr <4 x i32> %39, <i32 8, i32 8, i32 8, i32 8>
  %41 = bitcast <4 x i32> %38 to <8 x i16>
  %42 = bitcast <4 x i32> %40 to <8 x i16>
  %43 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %41, <8 x i16> %42) #3
  %44 = shufflevector <16 x i8> %43, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = bitcast <16 x i8> %44 to <2 x i64>
  %46 = extractelement <2 x i64> %45, i32 0
  %47 = bitcast i8* %31 to i64*
  store i64 %46, i64* %47, align 1
  %48 = getelementptr inbounds i8, i8* %31, i64 %1
  %49 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %50 = bitcast <16 x i8> %49 to <8 x i16>
  %51 = shufflevector <8 x i16> %50, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %52 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %51, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %53 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %51, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %54 = add <4 x i32> %52, <i32 128, i32 128, i32 128, i32 128>
  %55 = ashr <4 x i32> %54, <i32 8, i32 8, i32 8, i32 8>
  %56 = add <4 x i32> %53, <i32 128, i32 128, i32 128, i32 128>
  %57 = ashr <4 x i32> %56, <i32 8, i32 8, i32 8, i32 8>
  %58 = bitcast <4 x i32> %55 to <8 x i16>
  %59 = bitcast <4 x i32> %57 to <8 x i16>
  %60 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %58, <8 x i16> %59) #3
  %61 = shufflevector <16 x i8> %60, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %62 = bitcast <16 x i8> %61 to <2 x i64>
  %63 = extractelement <2 x i64> %62, i32 0
  %64 = bitcast i8* %48 to i64*
  store i64 %63, i64* %64, align 1
  %65 = getelementptr inbounds i8, i8* %48, i64 %1
  %66 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %67 = bitcast <16 x i8> %66 to <8 x i16>
  %68 = shufflevector <8 x i16> %67, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %69 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %68, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %70 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %68, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %71 = add <4 x i32> %69, <i32 128, i32 128, i32 128, i32 128>
  %72 = ashr <4 x i32> %71, <i32 8, i32 8, i32 8, i32 8>
  %73 = add <4 x i32> %70, <i32 128, i32 128, i32 128, i32 128>
  %74 = ashr <4 x i32> %73, <i32 8, i32 8, i32 8, i32 8>
  %75 = bitcast <4 x i32> %72 to <8 x i16>
  %76 = bitcast <4 x i32> %74 to <8 x i16>
  %77 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %75, <8 x i16> %76) #3
  %78 = shufflevector <16 x i8> %77, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %79 = bitcast <16 x i8> %78 to <2 x i64>
  %80 = extractelement <2 x i64> %79, i32 0
  %81 = bitcast i8* %65 to i64*
  store i64 %80, i64* %81, align 1
  %82 = getelementptr inbounds i8, i8* %65, i64 %1
  %83 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 16, i32 4, i32 16, i32 4, i32 16, i32 4, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %84 = bitcast <16 x i8> %83 to <8 x i16>
  %85 = shufflevector <8 x i16> %84, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %86 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %85, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %87 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %85, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %88 = add <4 x i32> %86, <i32 128, i32 128, i32 128, i32 128>
  %89 = ashr <4 x i32> %88, <i32 8, i32 8, i32 8, i32 8>
  %90 = add <4 x i32> %87, <i32 128, i32 128, i32 128, i32 128>
  %91 = ashr <4 x i32> %90, <i32 8, i32 8, i32 8, i32 8>
  %92 = bitcast <4 x i32> %89 to <8 x i16>
  %93 = bitcast <4 x i32> %91 to <8 x i16>
  %94 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %92, <8 x i16> %93) #3
  %95 = shufflevector <16 x i8> %94, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %96 = bitcast <16 x i8> %95 to <2 x i64>
  %97 = extractelement <2 x i64> %96, i32 0
  %98 = bitcast i8* %82 to i64*
  store i64 %97, i64* %98, align 1
  %99 = getelementptr inbounds i8, i8* %82, i64 %1
  %100 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 5, i32 16, i32 5, i32 16, i32 5, i32 16, i32 5, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %101 = bitcast <16 x i8> %100 to <8 x i16>
  %102 = shufflevector <8 x i16> %101, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %103 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %102, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %104 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %102, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %105 = add <4 x i32> %103, <i32 128, i32 128, i32 128, i32 128>
  %106 = ashr <4 x i32> %105, <i32 8, i32 8, i32 8, i32 8>
  %107 = add <4 x i32> %104, <i32 128, i32 128, i32 128, i32 128>
  %108 = ashr <4 x i32> %107, <i32 8, i32 8, i32 8, i32 8>
  %109 = bitcast <4 x i32> %106 to <8 x i16>
  %110 = bitcast <4 x i32> %108 to <8 x i16>
  %111 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %109, <8 x i16> %110) #3
  %112 = shufflevector <16 x i8> %111, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %113 = bitcast <16 x i8> %112 to <2 x i64>
  %114 = extractelement <2 x i64> %113, i32 0
  %115 = bitcast i8* %99 to i64*
  store i64 %114, i64* %115, align 1
  %116 = getelementptr inbounds i8, i8* %99, i64 %1
  %117 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 6, i32 16, i32 6, i32 16, i32 6, i32 16, i32 6, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %118 = bitcast <16 x i8> %117 to <8 x i16>
  %119 = shufflevector <8 x i16> %118, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %120 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %119, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %121 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %119, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %122 = add <4 x i32> %120, <i32 128, i32 128, i32 128, i32 128>
  %123 = ashr <4 x i32> %122, <i32 8, i32 8, i32 8, i32 8>
  %124 = add <4 x i32> %121, <i32 128, i32 128, i32 128, i32 128>
  %125 = ashr <4 x i32> %124, <i32 8, i32 8, i32 8, i32 8>
  %126 = bitcast <4 x i32> %123 to <8 x i16>
  %127 = bitcast <4 x i32> %125 to <8 x i16>
  %128 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %126, <8 x i16> %127) #3
  %129 = shufflevector <16 x i8> %128, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %130 = bitcast <16 x i8> %129 to <2 x i64>
  %131 = extractelement <2 x i64> %130, i32 0
  %132 = bitcast i8* %116 to i64*
  store i64 %131, i64* %132, align 1
  %133 = getelementptr inbounds i8, i8* %116, i64 %1
  %134 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 7, i32 16, i32 7, i32 16, i32 7, i32 16, i32 7, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %135 = bitcast <16 x i8> %134 to <8 x i16>
  %136 = shufflevector <8 x i16> %135, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %137 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %136, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %138 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %136, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %139 = add <4 x i32> %137, <i32 128, i32 128, i32 128, i32 128>
  %140 = ashr <4 x i32> %139, <i32 8, i32 8, i32 8, i32 8>
  %141 = add <4 x i32> %138, <i32 128, i32 128, i32 128, i32 128>
  %142 = ashr <4 x i32> %141, <i32 8, i32 8, i32 8, i32 8>
  %143 = bitcast <4 x i32> %140 to <8 x i16>
  %144 = bitcast <4 x i32> %142 to <8 x i16>
  %145 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %143, <8 x i16> %144) #3
  %146 = shufflevector <16 x i8> %145, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %147 = bitcast <16 x i8> %146 to <2 x i64>
  %148 = extractelement <2 x i64> %147, i32 0
  %149 = bitcast i8* %133 to i64*
  store i64 %148, i64* %149, align 1
  %150 = shl i64 %1, 3
  %151 = getelementptr inbounds i8, i8* %0, i64 %150
  %152 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 16, i32 8, i32 16, i32 8, i32 16, i32 8, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %153 = bitcast <16 x i8> %152 to <8 x i16>
  %154 = shufflevector <8 x i16> %153, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %155 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %154, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %156 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %154, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %157 = add <4 x i32> %155, <i32 128, i32 128, i32 128, i32 128>
  %158 = ashr <4 x i32> %157, <i32 8, i32 8, i32 8, i32 8>
  %159 = add <4 x i32> %156, <i32 128, i32 128, i32 128, i32 128>
  %160 = ashr <4 x i32> %159, <i32 8, i32 8, i32 8, i32 8>
  %161 = bitcast <4 x i32> %158 to <8 x i16>
  %162 = bitcast <4 x i32> %160 to <8 x i16>
  %163 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %161, <8 x i16> %162) #3
  %164 = shufflevector <16 x i8> %163, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %165 = bitcast <16 x i8> %164 to <2 x i64>
  %166 = extractelement <2 x i64> %165, i32 0
  %167 = bitcast i8* %151 to i64*
  store i64 %166, i64* %167, align 1
  %168 = getelementptr inbounds i8, i8* %151, i64 %1
  %169 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 9, i32 16, i32 9, i32 16, i32 9, i32 16, i32 9, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %170 = bitcast <16 x i8> %169 to <8 x i16>
  %171 = shufflevector <8 x i16> %170, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %172 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %171, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %173 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %171, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %174 = add <4 x i32> %172, <i32 128, i32 128, i32 128, i32 128>
  %175 = ashr <4 x i32> %174, <i32 8, i32 8, i32 8, i32 8>
  %176 = add <4 x i32> %173, <i32 128, i32 128, i32 128, i32 128>
  %177 = ashr <4 x i32> %176, <i32 8, i32 8, i32 8, i32 8>
  %178 = bitcast <4 x i32> %175 to <8 x i16>
  %179 = bitcast <4 x i32> %177 to <8 x i16>
  %180 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %178, <8 x i16> %179) #3
  %181 = shufflevector <16 x i8> %180, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %182 = bitcast <16 x i8> %181 to <2 x i64>
  %183 = extractelement <2 x i64> %182, i32 0
  %184 = bitcast i8* %168 to i64*
  store i64 %183, i64* %184, align 1
  %185 = getelementptr inbounds i8, i8* %168, i64 %1
  %186 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 10, i32 16, i32 10, i32 16, i32 10, i32 16, i32 10, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %187 = bitcast <16 x i8> %186 to <8 x i16>
  %188 = shufflevector <8 x i16> %187, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %189 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %188, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %190 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %188, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %191 = add <4 x i32> %189, <i32 128, i32 128, i32 128, i32 128>
  %192 = ashr <4 x i32> %191, <i32 8, i32 8, i32 8, i32 8>
  %193 = add <4 x i32> %190, <i32 128, i32 128, i32 128, i32 128>
  %194 = ashr <4 x i32> %193, <i32 8, i32 8, i32 8, i32 8>
  %195 = bitcast <4 x i32> %192 to <8 x i16>
  %196 = bitcast <4 x i32> %194 to <8 x i16>
  %197 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %195, <8 x i16> %196) #3
  %198 = shufflevector <16 x i8> %197, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %199 = bitcast <16 x i8> %198 to <2 x i64>
  %200 = extractelement <2 x i64> %199, i32 0
  %201 = bitcast i8* %185 to i64*
  store i64 %200, i64* %201, align 1
  %202 = getelementptr inbounds i8, i8* %185, i64 %1
  %203 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 11, i32 16, i32 11, i32 16, i32 11, i32 16, i32 11, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %204 = bitcast <16 x i8> %203 to <8 x i16>
  %205 = shufflevector <8 x i16> %204, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %206 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %205, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %207 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %205, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %208 = add <4 x i32> %206, <i32 128, i32 128, i32 128, i32 128>
  %209 = ashr <4 x i32> %208, <i32 8, i32 8, i32 8, i32 8>
  %210 = add <4 x i32> %207, <i32 128, i32 128, i32 128, i32 128>
  %211 = ashr <4 x i32> %210, <i32 8, i32 8, i32 8, i32 8>
  %212 = bitcast <4 x i32> %209 to <8 x i16>
  %213 = bitcast <4 x i32> %211 to <8 x i16>
  %214 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %212, <8 x i16> %213) #3
  %215 = shufflevector <16 x i8> %214, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %216 = bitcast <16 x i8> %215 to <2 x i64>
  %217 = extractelement <2 x i64> %216, i32 0
  %218 = bitcast i8* %202 to i64*
  store i64 %217, i64* %218, align 1
  %219 = getelementptr inbounds i8, i8* %202, i64 %1
  %220 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 12, i32 16, i32 12, i32 16, i32 12, i32 16, i32 12, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %221 = bitcast <16 x i8> %220 to <8 x i16>
  %222 = shufflevector <8 x i16> %221, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %223 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %222, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %224 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %222, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %225 = add <4 x i32> %223, <i32 128, i32 128, i32 128, i32 128>
  %226 = ashr <4 x i32> %225, <i32 8, i32 8, i32 8, i32 8>
  %227 = add <4 x i32> %224, <i32 128, i32 128, i32 128, i32 128>
  %228 = ashr <4 x i32> %227, <i32 8, i32 8, i32 8, i32 8>
  %229 = bitcast <4 x i32> %226 to <8 x i16>
  %230 = bitcast <4 x i32> %228 to <8 x i16>
  %231 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %229, <8 x i16> %230) #3
  %232 = shufflevector <16 x i8> %231, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %233 = bitcast <16 x i8> %232 to <2 x i64>
  %234 = extractelement <2 x i64> %233, i32 0
  %235 = bitcast i8* %219 to i64*
  store i64 %234, i64* %235, align 1
  %236 = getelementptr inbounds i8, i8* %219, i64 %1
  %237 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 13, i32 16, i32 13, i32 16, i32 13, i32 16, i32 13, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %238 = bitcast <16 x i8> %237 to <8 x i16>
  %239 = shufflevector <8 x i16> %238, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %240 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %239, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %241 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %239, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %242 = add <4 x i32> %240, <i32 128, i32 128, i32 128, i32 128>
  %243 = ashr <4 x i32> %242, <i32 8, i32 8, i32 8, i32 8>
  %244 = add <4 x i32> %241, <i32 128, i32 128, i32 128, i32 128>
  %245 = ashr <4 x i32> %244, <i32 8, i32 8, i32 8, i32 8>
  %246 = bitcast <4 x i32> %243 to <8 x i16>
  %247 = bitcast <4 x i32> %245 to <8 x i16>
  %248 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %246, <8 x i16> %247) #3
  %249 = shufflevector <16 x i8> %248, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %250 = bitcast <16 x i8> %249 to <2 x i64>
  %251 = extractelement <2 x i64> %250, i32 0
  %252 = bitcast i8* %236 to i64*
  store i64 %251, i64* %252, align 1
  %253 = getelementptr inbounds i8, i8* %236, i64 %1
  %254 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 14, i32 16, i32 14, i32 16, i32 14, i32 16, i32 14, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %255 = bitcast <16 x i8> %254 to <8 x i16>
  %256 = shufflevector <8 x i16> %255, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %257 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %256, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %258 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %256, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %259 = add <4 x i32> %257, <i32 128, i32 128, i32 128, i32 128>
  %260 = ashr <4 x i32> %259, <i32 8, i32 8, i32 8, i32 8>
  %261 = add <4 x i32> %258, <i32 128, i32 128, i32 128, i32 128>
  %262 = ashr <4 x i32> %261, <i32 8, i32 8, i32 8, i32 8>
  %263 = bitcast <4 x i32> %260 to <8 x i16>
  %264 = bitcast <4 x i32> %262 to <8 x i16>
  %265 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %263, <8 x i16> %264) #3
  %266 = shufflevector <16 x i8> %265, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %267 = bitcast <16 x i8> %266 to <2 x i64>
  %268 = extractelement <2 x i64> %267, i32 0
  %269 = bitcast i8* %253 to i64*
  store i64 %268, i64* %269, align 1
  %270 = getelementptr inbounds i8, i8* %253, i64 %1
  %271 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 15, i32 16, i32 15, i32 16, i32 15, i32 16, i32 15, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %272 = bitcast <16 x i8> %271 to <8 x i16>
  %273 = shufflevector <8 x i16> %272, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %274 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %273, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %275 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %273, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %276 = add <4 x i32> %274, <i32 128, i32 128, i32 128, i32 128>
  %277 = ashr <4 x i32> %276, <i32 8, i32 8, i32 8, i32 8>
  %278 = add <4 x i32> %275, <i32 128, i32 128, i32 128, i32 128>
  %279 = ashr <4 x i32> %278, <i32 8, i32 8, i32 8, i32 8>
  %280 = bitcast <4 x i32> %277 to <8 x i16>
  %281 = bitcast <4 x i32> %279 to <8 x i16>
  %282 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %280, <8 x i16> %281) #3
  %283 = shufflevector <16 x i8> %282, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %284 = bitcast <16 x i8> %283 to <2 x i64>
  %285 = extractelement <2 x i64> %284, i32 0
  %286 = bitcast i8* %270 to i64*
  store i64 %285, i64* %286, align 1
  %287 = getelementptr inbounds i8, i8* %151, i64 %150
  %288 = shufflevector <16 x i8> %14, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 0, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %289 = bitcast <16 x i8> %288 to <8 x i16>
  %290 = shufflevector <8 x i16> %289, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %291 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %290, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %292 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %290, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %293 = add <4 x i32> %291, <i32 128, i32 128, i32 128, i32 128>
  %294 = ashr <4 x i32> %293, <i32 8, i32 8, i32 8, i32 8>
  %295 = add <4 x i32> %292, <i32 128, i32 128, i32 128, i32 128>
  %296 = ashr <4 x i32> %295, <i32 8, i32 8, i32 8, i32 8>
  %297 = bitcast <4 x i32> %294 to <8 x i16>
  %298 = bitcast <4 x i32> %296 to <8 x i16>
  %299 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %297, <8 x i16> %298) #3
  %300 = shufflevector <16 x i8> %299, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %301 = bitcast <16 x i8> %300 to <2 x i64>
  %302 = extractelement <2 x i64> %301, i32 0
  %303 = bitcast i8* %287 to i64*
  store i64 %302, i64* %303, align 1
  %304 = getelementptr inbounds i8, i8* %287, i64 %1
  %305 = shufflevector <16 x i8> %14, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 1, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %306 = bitcast <16 x i8> %305 to <8 x i16>
  %307 = shufflevector <8 x i16> %306, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %308 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %307, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %309 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %307, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %310 = add <4 x i32> %308, <i32 128, i32 128, i32 128, i32 128>
  %311 = ashr <4 x i32> %310, <i32 8, i32 8, i32 8, i32 8>
  %312 = add <4 x i32> %309, <i32 128, i32 128, i32 128, i32 128>
  %313 = ashr <4 x i32> %312, <i32 8, i32 8, i32 8, i32 8>
  %314 = bitcast <4 x i32> %311 to <8 x i16>
  %315 = bitcast <4 x i32> %313 to <8 x i16>
  %316 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %314, <8 x i16> %315) #3
  %317 = shufflevector <16 x i8> %316, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %318 = bitcast <16 x i8> %317 to <2 x i64>
  %319 = extractelement <2 x i64> %318, i32 0
  %320 = bitcast i8* %304 to i64*
  store i64 %319, i64* %320, align 1
  %321 = getelementptr inbounds i8, i8* %304, i64 %1
  %322 = shufflevector <16 x i8> %14, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 2, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %323 = bitcast <16 x i8> %322 to <8 x i16>
  %324 = shufflevector <8 x i16> %323, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %325 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %324, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %326 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %324, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %327 = add <4 x i32> %325, <i32 128, i32 128, i32 128, i32 128>
  %328 = ashr <4 x i32> %327, <i32 8, i32 8, i32 8, i32 8>
  %329 = add <4 x i32> %326, <i32 128, i32 128, i32 128, i32 128>
  %330 = ashr <4 x i32> %329, <i32 8, i32 8, i32 8, i32 8>
  %331 = bitcast <4 x i32> %328 to <8 x i16>
  %332 = bitcast <4 x i32> %330 to <8 x i16>
  %333 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %331, <8 x i16> %332) #3
  %334 = shufflevector <16 x i8> %333, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %335 = bitcast <16 x i8> %334 to <2 x i64>
  %336 = extractelement <2 x i64> %335, i32 0
  %337 = bitcast i8* %321 to i64*
  store i64 %336, i64* %337, align 1
  %338 = getelementptr inbounds i8, i8* %321, i64 %1
  %339 = shufflevector <16 x i8> %14, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 3, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %340 = bitcast <16 x i8> %339 to <8 x i16>
  %341 = shufflevector <8 x i16> %340, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %342 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %341, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %343 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %341, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %344 = add <4 x i32> %342, <i32 128, i32 128, i32 128, i32 128>
  %345 = ashr <4 x i32> %344, <i32 8, i32 8, i32 8, i32 8>
  %346 = add <4 x i32> %343, <i32 128, i32 128, i32 128, i32 128>
  %347 = ashr <4 x i32> %346, <i32 8, i32 8, i32 8, i32 8>
  %348 = bitcast <4 x i32> %345 to <8 x i16>
  %349 = bitcast <4 x i32> %347 to <8 x i16>
  %350 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %348, <8 x i16> %349) #3
  %351 = shufflevector <16 x i8> %350, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %352 = bitcast <16 x i8> %351 to <2 x i64>
  %353 = extractelement <2 x i64> %352, i32 0
  %354 = bitcast i8* %338 to i64*
  store i64 %353, i64* %354, align 1
  %355 = getelementptr inbounds i8, i8* %338, i64 %1
  %356 = shufflevector <16 x i8> %14, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 16, i32 4, i32 16, i32 4, i32 16, i32 4, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %357 = bitcast <16 x i8> %356 to <8 x i16>
  %358 = shufflevector <8 x i16> %357, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %359 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %358, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %360 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %358, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %361 = add <4 x i32> %359, <i32 128, i32 128, i32 128, i32 128>
  %362 = ashr <4 x i32> %361, <i32 8, i32 8, i32 8, i32 8>
  %363 = add <4 x i32> %360, <i32 128, i32 128, i32 128, i32 128>
  %364 = ashr <4 x i32> %363, <i32 8, i32 8, i32 8, i32 8>
  %365 = bitcast <4 x i32> %362 to <8 x i16>
  %366 = bitcast <4 x i32> %364 to <8 x i16>
  %367 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %365, <8 x i16> %366) #3
  %368 = shufflevector <16 x i8> %367, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %369 = bitcast <16 x i8> %368 to <2 x i64>
  %370 = extractelement <2 x i64> %369, i32 0
  %371 = bitcast i8* %355 to i64*
  store i64 %370, i64* %371, align 1
  %372 = getelementptr inbounds i8, i8* %355, i64 %1
  %373 = shufflevector <16 x i8> %14, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 5, i32 16, i32 5, i32 16, i32 5, i32 16, i32 5, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %374 = bitcast <16 x i8> %373 to <8 x i16>
  %375 = shufflevector <8 x i16> %374, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %376 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %375, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %377 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %375, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %378 = add <4 x i32> %376, <i32 128, i32 128, i32 128, i32 128>
  %379 = ashr <4 x i32> %378, <i32 8, i32 8, i32 8, i32 8>
  %380 = add <4 x i32> %377, <i32 128, i32 128, i32 128, i32 128>
  %381 = ashr <4 x i32> %380, <i32 8, i32 8, i32 8, i32 8>
  %382 = bitcast <4 x i32> %379 to <8 x i16>
  %383 = bitcast <4 x i32> %381 to <8 x i16>
  %384 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %382, <8 x i16> %383) #3
  %385 = shufflevector <16 x i8> %384, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %386 = bitcast <16 x i8> %385 to <2 x i64>
  %387 = extractelement <2 x i64> %386, i32 0
  %388 = bitcast i8* %372 to i64*
  store i64 %387, i64* %388, align 1
  %389 = getelementptr inbounds i8, i8* %372, i64 %1
  %390 = shufflevector <16 x i8> %14, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 6, i32 16, i32 6, i32 16, i32 6, i32 16, i32 6, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %391 = bitcast <16 x i8> %390 to <8 x i16>
  %392 = shufflevector <8 x i16> %391, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %393 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %392, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %394 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %392, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %395 = add <4 x i32> %393, <i32 128, i32 128, i32 128, i32 128>
  %396 = ashr <4 x i32> %395, <i32 8, i32 8, i32 8, i32 8>
  %397 = add <4 x i32> %394, <i32 128, i32 128, i32 128, i32 128>
  %398 = ashr <4 x i32> %397, <i32 8, i32 8, i32 8, i32 8>
  %399 = bitcast <4 x i32> %396 to <8 x i16>
  %400 = bitcast <4 x i32> %398 to <8 x i16>
  %401 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %399, <8 x i16> %400) #3
  %402 = shufflevector <16 x i8> %401, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %403 = bitcast <16 x i8> %402 to <2 x i64>
  %404 = extractelement <2 x i64> %403, i32 0
  %405 = bitcast i8* %389 to i64*
  store i64 %404, i64* %405, align 1
  %406 = getelementptr inbounds i8, i8* %389, i64 %1
  %407 = shufflevector <16 x i8> %14, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 7, i32 16, i32 7, i32 16, i32 7, i32 16, i32 7, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %408 = bitcast <16 x i8> %407 to <8 x i16>
  %409 = shufflevector <8 x i16> %408, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %410 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %409, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %411 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %409, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %412 = add <4 x i32> %410, <i32 128, i32 128, i32 128, i32 128>
  %413 = ashr <4 x i32> %412, <i32 8, i32 8, i32 8, i32 8>
  %414 = add <4 x i32> %411, <i32 128, i32 128, i32 128, i32 128>
  %415 = ashr <4 x i32> %414, <i32 8, i32 8, i32 8, i32 8>
  %416 = bitcast <4 x i32> %413 to <8 x i16>
  %417 = bitcast <4 x i32> %415 to <8 x i16>
  %418 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %416, <8 x i16> %417) #3
  %419 = shufflevector <16 x i8> %418, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %420 = bitcast <16 x i8> %419 to <2 x i64>
  %421 = extractelement <2 x i64> %420, i32 0
  %422 = bitcast i8* %406 to i64*
  store i64 %421, i64* %422, align 1
  %423 = getelementptr inbounds i8, i8* %287, i64 %150
  %424 = shufflevector <16 x i8> %14, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 16, i32 8, i32 16, i32 8, i32 16, i32 8, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %425 = bitcast <16 x i8> %424 to <8 x i16>
  %426 = shufflevector <8 x i16> %425, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %427 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %426, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %428 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %426, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %429 = add <4 x i32> %427, <i32 128, i32 128, i32 128, i32 128>
  %430 = ashr <4 x i32> %429, <i32 8, i32 8, i32 8, i32 8>
  %431 = add <4 x i32> %428, <i32 128, i32 128, i32 128, i32 128>
  %432 = ashr <4 x i32> %431, <i32 8, i32 8, i32 8, i32 8>
  %433 = bitcast <4 x i32> %430 to <8 x i16>
  %434 = bitcast <4 x i32> %432 to <8 x i16>
  %435 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %433, <8 x i16> %434) #3
  %436 = shufflevector <16 x i8> %435, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %437 = bitcast <16 x i8> %436 to <2 x i64>
  %438 = extractelement <2 x i64> %437, i32 0
  %439 = bitcast i8* %423 to i64*
  store i64 %438, i64* %439, align 1
  %440 = getelementptr inbounds i8, i8* %423, i64 %1
  %441 = shufflevector <16 x i8> %14, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 9, i32 16, i32 9, i32 16, i32 9, i32 16, i32 9, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %442 = bitcast <16 x i8> %441 to <8 x i16>
  %443 = shufflevector <8 x i16> %442, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %444 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %443, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %445 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %443, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %446 = add <4 x i32> %444, <i32 128, i32 128, i32 128, i32 128>
  %447 = ashr <4 x i32> %446, <i32 8, i32 8, i32 8, i32 8>
  %448 = add <4 x i32> %445, <i32 128, i32 128, i32 128, i32 128>
  %449 = ashr <4 x i32> %448, <i32 8, i32 8, i32 8, i32 8>
  %450 = bitcast <4 x i32> %447 to <8 x i16>
  %451 = bitcast <4 x i32> %449 to <8 x i16>
  %452 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %450, <8 x i16> %451) #3
  %453 = shufflevector <16 x i8> %452, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %454 = bitcast <16 x i8> %453 to <2 x i64>
  %455 = extractelement <2 x i64> %454, i32 0
  %456 = bitcast i8* %440 to i64*
  store i64 %455, i64* %456, align 1
  %457 = getelementptr inbounds i8, i8* %440, i64 %1
  %458 = shufflevector <16 x i8> %14, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 10, i32 16, i32 10, i32 16, i32 10, i32 16, i32 10, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %459 = bitcast <16 x i8> %458 to <8 x i16>
  %460 = shufflevector <8 x i16> %459, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %461 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %460, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %462 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %460, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %463 = add <4 x i32> %461, <i32 128, i32 128, i32 128, i32 128>
  %464 = ashr <4 x i32> %463, <i32 8, i32 8, i32 8, i32 8>
  %465 = add <4 x i32> %462, <i32 128, i32 128, i32 128, i32 128>
  %466 = ashr <4 x i32> %465, <i32 8, i32 8, i32 8, i32 8>
  %467 = bitcast <4 x i32> %464 to <8 x i16>
  %468 = bitcast <4 x i32> %466 to <8 x i16>
  %469 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %467, <8 x i16> %468) #3
  %470 = shufflevector <16 x i8> %469, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %471 = bitcast <16 x i8> %470 to <2 x i64>
  %472 = extractelement <2 x i64> %471, i32 0
  %473 = bitcast i8* %457 to i64*
  store i64 %472, i64* %473, align 1
  %474 = getelementptr inbounds i8, i8* %457, i64 %1
  %475 = shufflevector <16 x i8> %14, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 11, i32 16, i32 11, i32 16, i32 11, i32 16, i32 11, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %476 = bitcast <16 x i8> %475 to <8 x i16>
  %477 = shufflevector <8 x i16> %476, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %478 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %477, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %479 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %477, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %480 = add <4 x i32> %478, <i32 128, i32 128, i32 128, i32 128>
  %481 = ashr <4 x i32> %480, <i32 8, i32 8, i32 8, i32 8>
  %482 = add <4 x i32> %479, <i32 128, i32 128, i32 128, i32 128>
  %483 = ashr <4 x i32> %482, <i32 8, i32 8, i32 8, i32 8>
  %484 = bitcast <4 x i32> %481 to <8 x i16>
  %485 = bitcast <4 x i32> %483 to <8 x i16>
  %486 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %484, <8 x i16> %485) #3
  %487 = shufflevector <16 x i8> %486, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %488 = bitcast <16 x i8> %487 to <2 x i64>
  %489 = extractelement <2 x i64> %488, i32 0
  %490 = bitcast i8* %474 to i64*
  store i64 %489, i64* %490, align 1
  %491 = getelementptr inbounds i8, i8* %474, i64 %1
  %492 = shufflevector <16 x i8> %14, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 12, i32 16, i32 12, i32 16, i32 12, i32 16, i32 12, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %493 = bitcast <16 x i8> %492 to <8 x i16>
  %494 = shufflevector <8 x i16> %493, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %495 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %494, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %496 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %494, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %497 = add <4 x i32> %495, <i32 128, i32 128, i32 128, i32 128>
  %498 = ashr <4 x i32> %497, <i32 8, i32 8, i32 8, i32 8>
  %499 = add <4 x i32> %496, <i32 128, i32 128, i32 128, i32 128>
  %500 = ashr <4 x i32> %499, <i32 8, i32 8, i32 8, i32 8>
  %501 = bitcast <4 x i32> %498 to <8 x i16>
  %502 = bitcast <4 x i32> %500 to <8 x i16>
  %503 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %501, <8 x i16> %502) #3
  %504 = shufflevector <16 x i8> %503, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %505 = bitcast <16 x i8> %504 to <2 x i64>
  %506 = extractelement <2 x i64> %505, i32 0
  %507 = bitcast i8* %491 to i64*
  store i64 %506, i64* %507, align 1
  %508 = getelementptr inbounds i8, i8* %491, i64 %1
  %509 = shufflevector <16 x i8> %14, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 13, i32 16, i32 13, i32 16, i32 13, i32 16, i32 13, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %510 = bitcast <16 x i8> %509 to <8 x i16>
  %511 = shufflevector <8 x i16> %510, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %512 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %511, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %513 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %511, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %514 = add <4 x i32> %512, <i32 128, i32 128, i32 128, i32 128>
  %515 = ashr <4 x i32> %514, <i32 8, i32 8, i32 8, i32 8>
  %516 = add <4 x i32> %513, <i32 128, i32 128, i32 128, i32 128>
  %517 = ashr <4 x i32> %516, <i32 8, i32 8, i32 8, i32 8>
  %518 = bitcast <4 x i32> %515 to <8 x i16>
  %519 = bitcast <4 x i32> %517 to <8 x i16>
  %520 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %518, <8 x i16> %519) #3
  %521 = shufflevector <16 x i8> %520, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %522 = bitcast <16 x i8> %521 to <2 x i64>
  %523 = extractelement <2 x i64> %522, i32 0
  %524 = bitcast i8* %508 to i64*
  store i64 %523, i64* %524, align 1
  %525 = getelementptr inbounds i8, i8* %508, i64 %1
  %526 = shufflevector <16 x i8> %14, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 14, i32 16, i32 14, i32 16, i32 14, i32 16, i32 14, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %527 = bitcast <16 x i8> %526 to <8 x i16>
  %528 = shufflevector <8 x i16> %527, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %529 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %528, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %530 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %528, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %531 = add <4 x i32> %529, <i32 128, i32 128, i32 128, i32 128>
  %532 = ashr <4 x i32> %531, <i32 8, i32 8, i32 8, i32 8>
  %533 = add <4 x i32> %530, <i32 128, i32 128, i32 128, i32 128>
  %534 = ashr <4 x i32> %533, <i32 8, i32 8, i32 8, i32 8>
  %535 = bitcast <4 x i32> %532 to <8 x i16>
  %536 = bitcast <4 x i32> %534 to <8 x i16>
  %537 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %535, <8 x i16> %536) #3
  %538 = shufflevector <16 x i8> %537, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %539 = bitcast <16 x i8> %538 to <2 x i64>
  %540 = extractelement <2 x i64> %539, i32 0
  %541 = bitcast i8* %525 to i64*
  store i64 %540, i64* %541, align 1
  %542 = getelementptr inbounds i8, i8* %525, i64 %1
  %543 = shufflevector <16 x i8> %14, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 15, i32 16, i32 15, i32 16, i32 15, i32 16, i32 15, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %544 = bitcast <16 x i8> %543 to <8 x i16>
  %545 = shufflevector <8 x i16> %544, <8 x i16> %9, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %546 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %545, <8 x i16> <i16 255, i16 1, i16 197, i16 59, i16 146, i16 110, i16 105, i16 151>) #3
  %547 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %545, <8 x i16> <i16 73, i16 183, i16 50, i16 206, i16 37, i16 219, i16 32, i16 224>) #3
  %548 = add <4 x i32> %546, <i32 128, i32 128, i32 128, i32 128>
  %549 = ashr <4 x i32> %548, <i32 8, i32 8, i32 8, i32 8>
  %550 = add <4 x i32> %547, <i32 128, i32 128, i32 128, i32 128>
  %551 = ashr <4 x i32> %550, <i32 8, i32 8, i32 8, i32 8>
  %552 = bitcast <4 x i32> %549 to <8 x i16>
  %553 = bitcast <4 x i32> %551 to <8 x i16>
  %554 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %552, <8 x i16> %553) #3
  %555 = shufflevector <16 x i8> %554, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %556 = bitcast <16 x i8> %555 to <2 x i64>
  %557 = extractelement <2 x i64> %556, i32 0
  %558 = bitcast i8* %542 to i64*
  store i64 %557, i64* %558, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_smooth_h_predictor_16x4_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i8, i8* %2, i64 15
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <4 x i32> undef, i32 %7, i32 0
  %9 = bitcast <4 x i32> %8 to <8 x i16>
  %10 = load i8, i8* %3, align 1
  %11 = zext i8 %10 to i32
  %12 = insertelement <4 x i32> undef, i32 %11, i32 0
  %13 = bitcast <4 x i32> %12 to <8 x i16>
  %14 = shufflevector <8 x i16> %9, <8 x i16> %13, <8 x i32> <i32 0, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <8 x i16> %14 to <4 x i32>
  %16 = shufflevector <4 x i32> %15, <4 x i32> undef, <4 x i32> zeroinitializer
  %17 = bitcast <4 x i32> %16 to <8 x i16>
  %18 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 1, i16 255, i16 31, i16 225, i16 60, i16 196, i16 86, i16 170>, <8 x i16> %17) #3
  %19 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 111, i16 145, i16 133, i16 123, i16 154, i16 102, i16 172, i16 84>, <8 x i16> %17) #3
  %20 = add <4 x i32> %18, <i32 128, i32 128, i32 128, i32 128>
  %21 = add <4 x i32> %19, <i32 128, i32 128, i32 128, i32 128>
  %22 = ashr <4 x i32> %20, <i32 8, i32 8, i32 8, i32 8>
  %23 = ashr <4 x i32> %21, <i32 8, i32 8, i32 8, i32 8>
  %24 = bitcast <4 x i32> %22 to <8 x i16>
  %25 = bitcast <4 x i32> %23 to <8 x i16>
  %26 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %24, <8 x i16> %25) #3
  %27 = shufflevector <16 x i8> %26, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %28 = bitcast <16 x i8> %27 to <2 x i64>
  %29 = extractelement <2 x i64> %28, i32 0
  %30 = bitcast i8* %0 to i64*
  store i64 %29, i64* %30, align 1
  %31 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 188, i16 68, i16 202, i16 54, i16 213, i16 43, i16 223, i16 33>, <8 x i16> %17) #3
  %32 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 230, i16 26, i16 236, i16 20, i16 239, i16 17, i16 240, i16 16>, <8 x i16> %17) #3
  %33 = add <4 x i32> %31, <i32 128, i32 128, i32 128, i32 128>
  %34 = add <4 x i32> %32, <i32 128, i32 128, i32 128, i32 128>
  %35 = ashr <4 x i32> %33, <i32 8, i32 8, i32 8, i32 8>
  %36 = ashr <4 x i32> %34, <i32 8, i32 8, i32 8, i32 8>
  %37 = bitcast <4 x i32> %35 to <8 x i16>
  %38 = bitcast <4 x i32> %36 to <8 x i16>
  %39 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %37, <8 x i16> %38) #3
  %40 = shufflevector <16 x i8> %39, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %41 = bitcast <16 x i8> %40 to <2 x i64>
  %42 = getelementptr inbounds i8, i8* %0, i64 8
  %43 = extractelement <2 x i64> %41, i32 0
  %44 = bitcast i8* %42 to i64*
  store i64 %43, i64* %44, align 1
  %45 = getelementptr inbounds i8, i8* %0, i64 %1
  %46 = getelementptr inbounds i8, i8* %3, i64 1
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = insertelement <4 x i32> undef, i32 %48, i32 0
  %50 = bitcast <4 x i32> %49 to <8 x i16>
  %51 = shufflevector <8 x i16> %9, <8 x i16> %50, <8 x i32> <i32 0, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %52 = bitcast <8 x i16> %51 to <4 x i32>
  %53 = shufflevector <4 x i32> %52, <4 x i32> undef, <4 x i32> zeroinitializer
  %54 = bitcast <4 x i32> %53 to <8 x i16>
  %55 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 1, i16 255, i16 31, i16 225, i16 60, i16 196, i16 86, i16 170>, <8 x i16> %54) #3
  %56 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 111, i16 145, i16 133, i16 123, i16 154, i16 102, i16 172, i16 84>, <8 x i16> %54) #3
  %57 = add <4 x i32> %55, <i32 128, i32 128, i32 128, i32 128>
  %58 = add <4 x i32> %56, <i32 128, i32 128, i32 128, i32 128>
  %59 = ashr <4 x i32> %57, <i32 8, i32 8, i32 8, i32 8>
  %60 = ashr <4 x i32> %58, <i32 8, i32 8, i32 8, i32 8>
  %61 = bitcast <4 x i32> %59 to <8 x i16>
  %62 = bitcast <4 x i32> %60 to <8 x i16>
  %63 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %61, <8 x i16> %62) #3
  %64 = shufflevector <16 x i8> %63, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %65 = bitcast <16 x i8> %64 to <2 x i64>
  %66 = extractelement <2 x i64> %65, i32 0
  %67 = bitcast i8* %45 to i64*
  store i64 %66, i64* %67, align 1
  %68 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 188, i16 68, i16 202, i16 54, i16 213, i16 43, i16 223, i16 33>, <8 x i16> %54) #3
  %69 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 230, i16 26, i16 236, i16 20, i16 239, i16 17, i16 240, i16 16>, <8 x i16> %54) #3
  %70 = add <4 x i32> %68, <i32 128, i32 128, i32 128, i32 128>
  %71 = add <4 x i32> %69, <i32 128, i32 128, i32 128, i32 128>
  %72 = ashr <4 x i32> %70, <i32 8, i32 8, i32 8, i32 8>
  %73 = ashr <4 x i32> %71, <i32 8, i32 8, i32 8, i32 8>
  %74 = bitcast <4 x i32> %72 to <8 x i16>
  %75 = bitcast <4 x i32> %73 to <8 x i16>
  %76 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %74, <8 x i16> %75) #3
  %77 = shufflevector <16 x i8> %76, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %78 = bitcast <16 x i8> %77 to <2 x i64>
  %79 = getelementptr inbounds i8, i8* %45, i64 8
  %80 = extractelement <2 x i64> %78, i32 0
  %81 = bitcast i8* %79 to i64*
  store i64 %80, i64* %81, align 1
  %82 = getelementptr inbounds i8, i8* %45, i64 %1
  %83 = getelementptr inbounds i8, i8* %3, i64 2
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i32
  %86 = insertelement <4 x i32> undef, i32 %85, i32 0
  %87 = bitcast <4 x i32> %86 to <8 x i16>
  %88 = shufflevector <8 x i16> %9, <8 x i16> %87, <8 x i32> <i32 0, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %89 = bitcast <8 x i16> %88 to <4 x i32>
  %90 = shufflevector <4 x i32> %89, <4 x i32> undef, <4 x i32> zeroinitializer
  %91 = bitcast <4 x i32> %90 to <8 x i16>
  %92 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 1, i16 255, i16 31, i16 225, i16 60, i16 196, i16 86, i16 170>, <8 x i16> %91) #3
  %93 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 111, i16 145, i16 133, i16 123, i16 154, i16 102, i16 172, i16 84>, <8 x i16> %91) #3
  %94 = add <4 x i32> %92, <i32 128, i32 128, i32 128, i32 128>
  %95 = add <4 x i32> %93, <i32 128, i32 128, i32 128, i32 128>
  %96 = ashr <4 x i32> %94, <i32 8, i32 8, i32 8, i32 8>
  %97 = ashr <4 x i32> %95, <i32 8, i32 8, i32 8, i32 8>
  %98 = bitcast <4 x i32> %96 to <8 x i16>
  %99 = bitcast <4 x i32> %97 to <8 x i16>
  %100 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %98, <8 x i16> %99) #3
  %101 = shufflevector <16 x i8> %100, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %102 = bitcast <16 x i8> %101 to <2 x i64>
  %103 = extractelement <2 x i64> %102, i32 0
  %104 = bitcast i8* %82 to i64*
  store i64 %103, i64* %104, align 1
  %105 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 188, i16 68, i16 202, i16 54, i16 213, i16 43, i16 223, i16 33>, <8 x i16> %91) #3
  %106 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 230, i16 26, i16 236, i16 20, i16 239, i16 17, i16 240, i16 16>, <8 x i16> %91) #3
  %107 = add <4 x i32> %105, <i32 128, i32 128, i32 128, i32 128>
  %108 = add <4 x i32> %106, <i32 128, i32 128, i32 128, i32 128>
  %109 = ashr <4 x i32> %107, <i32 8, i32 8, i32 8, i32 8>
  %110 = ashr <4 x i32> %108, <i32 8, i32 8, i32 8, i32 8>
  %111 = bitcast <4 x i32> %109 to <8 x i16>
  %112 = bitcast <4 x i32> %110 to <8 x i16>
  %113 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %111, <8 x i16> %112) #3
  %114 = shufflevector <16 x i8> %113, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %115 = bitcast <16 x i8> %114 to <2 x i64>
  %116 = getelementptr inbounds i8, i8* %82, i64 8
  %117 = extractelement <2 x i64> %115, i32 0
  %118 = bitcast i8* %116 to i64*
  store i64 %117, i64* %118, align 1
  %119 = getelementptr inbounds i8, i8* %82, i64 %1
  %120 = getelementptr inbounds i8, i8* %3, i64 3
  %121 = load i8, i8* %120, align 1
  %122 = zext i8 %121 to i32
  %123 = insertelement <4 x i32> undef, i32 %122, i32 0
  %124 = bitcast <4 x i32> %123 to <8 x i16>
  %125 = shufflevector <8 x i16> %9, <8 x i16> %124, <8 x i32> <i32 0, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %126 = bitcast <8 x i16> %125 to <4 x i32>
  %127 = shufflevector <4 x i32> %126, <4 x i32> undef, <4 x i32> zeroinitializer
  %128 = bitcast <4 x i32> %127 to <8 x i16>
  %129 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 1, i16 255, i16 31, i16 225, i16 60, i16 196, i16 86, i16 170>, <8 x i16> %128) #3
  %130 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 111, i16 145, i16 133, i16 123, i16 154, i16 102, i16 172, i16 84>, <8 x i16> %128) #3
  %131 = add <4 x i32> %129, <i32 128, i32 128, i32 128, i32 128>
  %132 = add <4 x i32> %130, <i32 128, i32 128, i32 128, i32 128>
  %133 = ashr <4 x i32> %131, <i32 8, i32 8, i32 8, i32 8>
  %134 = ashr <4 x i32> %132, <i32 8, i32 8, i32 8, i32 8>
  %135 = bitcast <4 x i32> %133 to <8 x i16>
  %136 = bitcast <4 x i32> %134 to <8 x i16>
  %137 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %135, <8 x i16> %136) #3
  %138 = shufflevector <16 x i8> %137, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %139 = bitcast <16 x i8> %138 to <2 x i64>
  %140 = extractelement <2 x i64> %139, i32 0
  %141 = bitcast i8* %119 to i64*
  store i64 %140, i64* %141, align 1
  %142 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 188, i16 68, i16 202, i16 54, i16 213, i16 43, i16 223, i16 33>, <8 x i16> %128) #3
  %143 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 230, i16 26, i16 236, i16 20, i16 239, i16 17, i16 240, i16 16>, <8 x i16> %128) #3
  %144 = add <4 x i32> %142, <i32 128, i32 128, i32 128, i32 128>
  %145 = add <4 x i32> %143, <i32 128, i32 128, i32 128, i32 128>
  %146 = ashr <4 x i32> %144, <i32 8, i32 8, i32 8, i32 8>
  %147 = ashr <4 x i32> %145, <i32 8, i32 8, i32 8, i32 8>
  %148 = bitcast <4 x i32> %146 to <8 x i16>
  %149 = bitcast <4 x i32> %147 to <8 x i16>
  %150 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %148, <8 x i16> %149) #3
  %151 = shufflevector <16 x i8> %150, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %152 = bitcast <16 x i8> %151 to <2 x i64>
  %153 = getelementptr inbounds i8, i8* %119, i64 8
  %154 = extractelement <2 x i64> %152, i32 0
  %155 = bitcast i8* %153 to i64*
  store i64 %154, i64* %155, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_smooth_h_predictor_16x8_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i8, i8* %2, i64 15
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <4 x i32> undef, i32 %7, i32 0
  %9 = bitcast <4 x i32> %8 to <8 x i16>
  br label %10

10:                                               ; preds = %10, %4
  %11 = phi i64 [ 0, %4 ], [ %50, %10 ]
  %12 = phi i8* [ %0, %4 ], [ %49, %10 ]
  %13 = getelementptr inbounds i8, i8* %3, i64 %11
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = insertelement <4 x i32> undef, i32 %15, i32 0
  %17 = bitcast <4 x i32> %16 to <8 x i16>
  %18 = shufflevector <8 x i16> %9, <8 x i16> %17, <8 x i32> <i32 0, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %19 = bitcast <8 x i16> %18 to <4 x i32>
  %20 = shufflevector <4 x i32> %19, <4 x i32> undef, <4 x i32> zeroinitializer
  %21 = bitcast <4 x i32> %20 to <8 x i16>
  %22 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 1, i16 255, i16 31, i16 225, i16 60, i16 196, i16 86, i16 170>, <8 x i16> %21) #3
  %23 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 111, i16 145, i16 133, i16 123, i16 154, i16 102, i16 172, i16 84>, <8 x i16> %21) #3
  %24 = add <4 x i32> %22, <i32 128, i32 128, i32 128, i32 128>
  %25 = add <4 x i32> %23, <i32 128, i32 128, i32 128, i32 128>
  %26 = ashr <4 x i32> %24, <i32 8, i32 8, i32 8, i32 8>
  %27 = ashr <4 x i32> %25, <i32 8, i32 8, i32 8, i32 8>
  %28 = bitcast <4 x i32> %26 to <8 x i16>
  %29 = bitcast <4 x i32> %27 to <8 x i16>
  %30 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %28, <8 x i16> %29) #3
  %31 = shufflevector <16 x i8> %30, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %32 = bitcast <16 x i8> %31 to <2 x i64>
  %33 = extractelement <2 x i64> %32, i32 0
  %34 = bitcast i8* %12 to i64*
  store i64 %33, i64* %34, align 1
  %35 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 188, i16 68, i16 202, i16 54, i16 213, i16 43, i16 223, i16 33>, <8 x i16> %21) #3
  %36 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 230, i16 26, i16 236, i16 20, i16 239, i16 17, i16 240, i16 16>, <8 x i16> %21) #3
  %37 = add <4 x i32> %35, <i32 128, i32 128, i32 128, i32 128>
  %38 = add <4 x i32> %36, <i32 128, i32 128, i32 128, i32 128>
  %39 = ashr <4 x i32> %37, <i32 8, i32 8, i32 8, i32 8>
  %40 = ashr <4 x i32> %38, <i32 8, i32 8, i32 8, i32 8>
  %41 = bitcast <4 x i32> %39 to <8 x i16>
  %42 = bitcast <4 x i32> %40 to <8 x i16>
  %43 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %41, <8 x i16> %42) #3
  %44 = shufflevector <16 x i8> %43, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = bitcast <16 x i8> %44 to <2 x i64>
  %46 = getelementptr inbounds i8, i8* %12, i64 8
  %47 = extractelement <2 x i64> %45, i32 0
  %48 = bitcast i8* %46 to i64*
  store i64 %47, i64* %48, align 1
  %49 = getelementptr inbounds i8, i8* %12, i64 %1
  %50 = add nuw nsw i64 %11, 1
  %51 = icmp eq i64 %50, 8
  br i1 %51, label %52, label %10

52:                                               ; preds = %10
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_smooth_h_predictor_16x16_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i8, i8* %2, i64 15
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <4 x i32> undef, i32 %7, i32 0
  %9 = bitcast <4 x i32> %8 to <8 x i16>
  br label %10

10:                                               ; preds = %10, %4
  %11 = phi i64 [ 0, %4 ], [ %50, %10 ]
  %12 = phi i8* [ %0, %4 ], [ %49, %10 ]
  %13 = getelementptr inbounds i8, i8* %3, i64 %11
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = insertelement <4 x i32> undef, i32 %15, i32 0
  %17 = bitcast <4 x i32> %16 to <8 x i16>
  %18 = shufflevector <8 x i16> %9, <8 x i16> %17, <8 x i32> <i32 0, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %19 = bitcast <8 x i16> %18 to <4 x i32>
  %20 = shufflevector <4 x i32> %19, <4 x i32> undef, <4 x i32> zeroinitializer
  %21 = bitcast <4 x i32> %20 to <8 x i16>
  %22 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 1, i16 255, i16 31, i16 225, i16 60, i16 196, i16 86, i16 170>, <8 x i16> %21) #3
  %23 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 111, i16 145, i16 133, i16 123, i16 154, i16 102, i16 172, i16 84>, <8 x i16> %21) #3
  %24 = add <4 x i32> %22, <i32 128, i32 128, i32 128, i32 128>
  %25 = add <4 x i32> %23, <i32 128, i32 128, i32 128, i32 128>
  %26 = ashr <4 x i32> %24, <i32 8, i32 8, i32 8, i32 8>
  %27 = ashr <4 x i32> %25, <i32 8, i32 8, i32 8, i32 8>
  %28 = bitcast <4 x i32> %26 to <8 x i16>
  %29 = bitcast <4 x i32> %27 to <8 x i16>
  %30 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %28, <8 x i16> %29) #3
  %31 = shufflevector <16 x i8> %30, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %32 = bitcast <16 x i8> %31 to <2 x i64>
  %33 = extractelement <2 x i64> %32, i32 0
  %34 = bitcast i8* %12 to i64*
  store i64 %33, i64* %34, align 1
  %35 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 188, i16 68, i16 202, i16 54, i16 213, i16 43, i16 223, i16 33>, <8 x i16> %21) #3
  %36 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 230, i16 26, i16 236, i16 20, i16 239, i16 17, i16 240, i16 16>, <8 x i16> %21) #3
  %37 = add <4 x i32> %35, <i32 128, i32 128, i32 128, i32 128>
  %38 = add <4 x i32> %36, <i32 128, i32 128, i32 128, i32 128>
  %39 = ashr <4 x i32> %37, <i32 8, i32 8, i32 8, i32 8>
  %40 = ashr <4 x i32> %38, <i32 8, i32 8, i32 8, i32 8>
  %41 = bitcast <4 x i32> %39 to <8 x i16>
  %42 = bitcast <4 x i32> %40 to <8 x i16>
  %43 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %41, <8 x i16> %42) #3
  %44 = shufflevector <16 x i8> %43, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = bitcast <16 x i8> %44 to <2 x i64>
  %46 = getelementptr inbounds i8, i8* %12, i64 8
  %47 = extractelement <2 x i64> %45, i32 0
  %48 = bitcast i8* %46 to i64*
  store i64 %47, i64* %48, align 1
  %49 = getelementptr inbounds i8, i8* %12, i64 %1
  %50 = add nuw nsw i64 %11, 1
  %51 = icmp eq i64 %50, 16
  br i1 %51, label %52, label %10

52:                                               ; preds = %10
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_smooth_h_predictor_16x32_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i8, i8* %2, i64 15
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <4 x i32> undef, i32 %7, i32 0
  %9 = bitcast <4 x i32> %8 to <8 x i16>
  br label %10

10:                                               ; preds = %10, %4
  %11 = phi i64 [ 0, %4 ], [ %50, %10 ]
  %12 = phi i8* [ %0, %4 ], [ %49, %10 ]
  %13 = getelementptr inbounds i8, i8* %3, i64 %11
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = insertelement <4 x i32> undef, i32 %15, i32 0
  %17 = bitcast <4 x i32> %16 to <8 x i16>
  %18 = shufflevector <8 x i16> %9, <8 x i16> %17, <8 x i32> <i32 0, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %19 = bitcast <8 x i16> %18 to <4 x i32>
  %20 = shufflevector <4 x i32> %19, <4 x i32> undef, <4 x i32> zeroinitializer
  %21 = bitcast <4 x i32> %20 to <8 x i16>
  %22 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 1, i16 255, i16 31, i16 225, i16 60, i16 196, i16 86, i16 170>, <8 x i16> %21) #3
  %23 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 111, i16 145, i16 133, i16 123, i16 154, i16 102, i16 172, i16 84>, <8 x i16> %21) #3
  %24 = add <4 x i32> %22, <i32 128, i32 128, i32 128, i32 128>
  %25 = add <4 x i32> %23, <i32 128, i32 128, i32 128, i32 128>
  %26 = ashr <4 x i32> %24, <i32 8, i32 8, i32 8, i32 8>
  %27 = ashr <4 x i32> %25, <i32 8, i32 8, i32 8, i32 8>
  %28 = bitcast <4 x i32> %26 to <8 x i16>
  %29 = bitcast <4 x i32> %27 to <8 x i16>
  %30 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %28, <8 x i16> %29) #3
  %31 = shufflevector <16 x i8> %30, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %32 = bitcast <16 x i8> %31 to <2 x i64>
  %33 = extractelement <2 x i64> %32, i32 0
  %34 = bitcast i8* %12 to i64*
  store i64 %33, i64* %34, align 1
  %35 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 188, i16 68, i16 202, i16 54, i16 213, i16 43, i16 223, i16 33>, <8 x i16> %21) #3
  %36 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 230, i16 26, i16 236, i16 20, i16 239, i16 17, i16 240, i16 16>, <8 x i16> %21) #3
  %37 = add <4 x i32> %35, <i32 128, i32 128, i32 128, i32 128>
  %38 = add <4 x i32> %36, <i32 128, i32 128, i32 128, i32 128>
  %39 = ashr <4 x i32> %37, <i32 8, i32 8, i32 8, i32 8>
  %40 = ashr <4 x i32> %38, <i32 8, i32 8, i32 8, i32 8>
  %41 = bitcast <4 x i32> %39 to <8 x i16>
  %42 = bitcast <4 x i32> %40 to <8 x i16>
  %43 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %41, <8 x i16> %42) #3
  %44 = shufflevector <16 x i8> %43, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = bitcast <16 x i8> %44 to <2 x i64>
  %46 = getelementptr inbounds i8, i8* %12, i64 8
  %47 = extractelement <2 x i64> %45, i32 0
  %48 = bitcast i8* %46 to i64*
  store i64 %47, i64* %48, align 1
  %49 = getelementptr inbounds i8, i8* %12, i64 %1
  %50 = add nuw nsw i64 %11, 1
  %51 = icmp eq i64 %50, 32
  br i1 %51, label %52, label %10

52:                                               ; preds = %10
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_smooth_h_predictor_16x64_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i8, i8* %2, i64 15
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <4 x i32> undef, i32 %7, i32 0
  %9 = bitcast <4 x i32> %8 to <8 x i16>
  br label %10

10:                                               ; preds = %10, %4
  %11 = phi i64 [ 0, %4 ], [ %50, %10 ]
  %12 = phi i8* [ %0, %4 ], [ %49, %10 ]
  %13 = getelementptr inbounds i8, i8* %3, i64 %11
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = insertelement <4 x i32> undef, i32 %15, i32 0
  %17 = bitcast <4 x i32> %16 to <8 x i16>
  %18 = shufflevector <8 x i16> %9, <8 x i16> %17, <8 x i32> <i32 0, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %19 = bitcast <8 x i16> %18 to <4 x i32>
  %20 = shufflevector <4 x i32> %19, <4 x i32> undef, <4 x i32> zeroinitializer
  %21 = bitcast <4 x i32> %20 to <8 x i16>
  %22 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 1, i16 255, i16 31, i16 225, i16 60, i16 196, i16 86, i16 170>, <8 x i16> %21) #3
  %23 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 111, i16 145, i16 133, i16 123, i16 154, i16 102, i16 172, i16 84>, <8 x i16> %21) #3
  %24 = add <4 x i32> %22, <i32 128, i32 128, i32 128, i32 128>
  %25 = add <4 x i32> %23, <i32 128, i32 128, i32 128, i32 128>
  %26 = ashr <4 x i32> %24, <i32 8, i32 8, i32 8, i32 8>
  %27 = ashr <4 x i32> %25, <i32 8, i32 8, i32 8, i32 8>
  %28 = bitcast <4 x i32> %26 to <8 x i16>
  %29 = bitcast <4 x i32> %27 to <8 x i16>
  %30 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %28, <8 x i16> %29) #3
  %31 = shufflevector <16 x i8> %30, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %32 = bitcast <16 x i8> %31 to <2 x i64>
  %33 = extractelement <2 x i64> %32, i32 0
  %34 = bitcast i8* %12 to i64*
  store i64 %33, i64* %34, align 1
  %35 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 188, i16 68, i16 202, i16 54, i16 213, i16 43, i16 223, i16 33>, <8 x i16> %21) #3
  %36 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 230, i16 26, i16 236, i16 20, i16 239, i16 17, i16 240, i16 16>, <8 x i16> %21) #3
  %37 = add <4 x i32> %35, <i32 128, i32 128, i32 128, i32 128>
  %38 = add <4 x i32> %36, <i32 128, i32 128, i32 128, i32 128>
  %39 = ashr <4 x i32> %37, <i32 8, i32 8, i32 8, i32 8>
  %40 = ashr <4 x i32> %38, <i32 8, i32 8, i32 8, i32 8>
  %41 = bitcast <4 x i32> %39 to <8 x i16>
  %42 = bitcast <4 x i32> %40 to <8 x i16>
  %43 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %41, <8 x i16> %42) #3
  %44 = shufflevector <16 x i8> %43, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = bitcast <16 x i8> %44 to <2 x i64>
  %46 = getelementptr inbounds i8, i8* %12, i64 8
  %47 = extractelement <2 x i64> %45, i32 0
  %48 = bitcast i8* %46 to i64*
  store i64 %47, i64* %48, align 1
  %49 = getelementptr inbounds i8, i8* %12, i64 %1
  %50 = add nuw nsw i64 %11, 1
  %51 = icmp eq i64 %50, 64
  br i1 %51, label %52, label %10

52:                                               ; preds = %10
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_smooth_h_predictor_32x8_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i8, i8* %2, i64 31
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <4 x i32> undef, i32 %7, i32 0
  %9 = bitcast <4 x i32> %8 to <8 x i16>
  br label %10

10:                                               ; preds = %10, %4
  %11 = phi i64 [ 0, %4 ], [ %78, %10 ]
  %12 = phi i8* [ %0, %4 ], [ %77, %10 ]
  %13 = getelementptr inbounds i8, i8* %3, i64 %11
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = insertelement <4 x i32> undef, i32 %15, i32 0
  %17 = bitcast <4 x i32> %16 to <8 x i16>
  %18 = shufflevector <8 x i16> %9, <8 x i16> %17, <8 x i32> <i32 0, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %19 = bitcast <8 x i16> %18 to <4 x i32>
  %20 = shufflevector <4 x i32> %19, <4 x i32> undef, <4 x i32> zeroinitializer
  %21 = bitcast <4 x i32> %20 to <8 x i16>
  %22 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 1, i16 255, i16 16, i16 240, i16 31, i16 225, i16 46, i16 210>, <8 x i16> %21) #3
  %23 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 60, i16 196, i16 74, i16 182, i16 87, i16 169, i16 99, i16 157>, <8 x i16> %21) #3
  %24 = add <4 x i32> %22, <i32 128, i32 128, i32 128, i32 128>
  %25 = add <4 x i32> %23, <i32 128, i32 128, i32 128, i32 128>
  %26 = ashr <4 x i32> %24, <i32 8, i32 8, i32 8, i32 8>
  %27 = ashr <4 x i32> %25, <i32 8, i32 8, i32 8, i32 8>
  %28 = bitcast <4 x i32> %26 to <8 x i16>
  %29 = bitcast <4 x i32> %27 to <8 x i16>
  %30 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %28, <8 x i16> %29) #3
  %31 = shufflevector <16 x i8> %30, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %32 = bitcast <16 x i8> %31 to <2 x i64>
  %33 = extractelement <2 x i64> %32, i32 0
  %34 = bitcast i8* %12 to i64*
  store i64 %33, i64* %34, align 1
  %35 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 111, i16 145, i16 123, i16 133, i16 134, i16 122, i16 145, i16 111>, <8 x i16> %21) #3
  %36 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 155, i16 101, i16 164, i16 92, i16 173, i16 83, i16 182, i16 74>, <8 x i16> %21) #3
  %37 = add <4 x i32> %35, <i32 128, i32 128, i32 128, i32 128>
  %38 = add <4 x i32> %36, <i32 128, i32 128, i32 128, i32 128>
  %39 = ashr <4 x i32> %37, <i32 8, i32 8, i32 8, i32 8>
  %40 = ashr <4 x i32> %38, <i32 8, i32 8, i32 8, i32 8>
  %41 = bitcast <4 x i32> %39 to <8 x i16>
  %42 = bitcast <4 x i32> %40 to <8 x i16>
  %43 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %41, <8 x i16> %42) #3
  %44 = shufflevector <16 x i8> %43, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = bitcast <16 x i8> %44 to <2 x i64>
  %46 = getelementptr inbounds i8, i8* %12, i64 8
  %47 = extractelement <2 x i64> %45, i32 0
  %48 = bitcast i8* %46 to i64*
  store i64 %47, i64* %48, align 1
  %49 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 190, i16 66, i16 197, i16 59, i16 204, i16 52, i16 211, i16 45>, <8 x i16> %21) #3
  %50 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 217, i16 39, i16 222, i16 34, i16 227, i16 29, i16 231, i16 25>, <8 x i16> %21) #3
  %51 = add <4 x i32> %49, <i32 128, i32 128, i32 128, i32 128>
  %52 = add <4 x i32> %50, <i32 128, i32 128, i32 128, i32 128>
  %53 = ashr <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %54 = ashr <4 x i32> %52, <i32 8, i32 8, i32 8, i32 8>
  %55 = bitcast <4 x i32> %53 to <8 x i16>
  %56 = bitcast <4 x i32> %54 to <8 x i16>
  %57 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %55, <8 x i16> %56) #3
  %58 = shufflevector <16 x i8> %57, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %59 = bitcast <16 x i8> %58 to <2 x i64>
  %60 = getelementptr inbounds i8, i8* %12, i64 16
  %61 = extractelement <2 x i64> %59, i32 0
  %62 = bitcast i8* %60 to i64*
  store i64 %61, i64* %62, align 1
  %63 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 235, i16 21, i16 239, i16 17, i16 242, i16 14, i16 244, i16 12>, <8 x i16> %21) #3
  %64 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 246, i16 10, i16 247, i16 9, i16 248, i16 8, i16 248, i16 8>, <8 x i16> %21) #3
  %65 = add <4 x i32> %63, <i32 128, i32 128, i32 128, i32 128>
  %66 = add <4 x i32> %64, <i32 128, i32 128, i32 128, i32 128>
  %67 = ashr <4 x i32> %65, <i32 8, i32 8, i32 8, i32 8>
  %68 = ashr <4 x i32> %66, <i32 8, i32 8, i32 8, i32 8>
  %69 = bitcast <4 x i32> %67 to <8 x i16>
  %70 = bitcast <4 x i32> %68 to <8 x i16>
  %71 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %69, <8 x i16> %70) #3
  %72 = shufflevector <16 x i8> %71, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %73 = bitcast <16 x i8> %72 to <2 x i64>
  %74 = getelementptr inbounds i8, i8* %12, i64 24
  %75 = extractelement <2 x i64> %73, i32 0
  %76 = bitcast i8* %74 to i64*
  store i64 %75, i64* %76, align 1
  %77 = getelementptr inbounds i8, i8* %12, i64 %1
  %78 = add nuw nsw i64 %11, 1
  %79 = icmp eq i64 %78, 8
  br i1 %79, label %80, label %10

80:                                               ; preds = %10
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_smooth_h_predictor_32x16_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i8, i8* %2, i64 31
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <4 x i32> undef, i32 %7, i32 0
  %9 = bitcast <4 x i32> %8 to <8 x i16>
  br label %10

10:                                               ; preds = %10, %4
  %11 = phi i64 [ 0, %4 ], [ %78, %10 ]
  %12 = phi i8* [ %0, %4 ], [ %77, %10 ]
  %13 = getelementptr inbounds i8, i8* %3, i64 %11
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = insertelement <4 x i32> undef, i32 %15, i32 0
  %17 = bitcast <4 x i32> %16 to <8 x i16>
  %18 = shufflevector <8 x i16> %9, <8 x i16> %17, <8 x i32> <i32 0, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %19 = bitcast <8 x i16> %18 to <4 x i32>
  %20 = shufflevector <4 x i32> %19, <4 x i32> undef, <4 x i32> zeroinitializer
  %21 = bitcast <4 x i32> %20 to <8 x i16>
  %22 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 1, i16 255, i16 16, i16 240, i16 31, i16 225, i16 46, i16 210>, <8 x i16> %21) #3
  %23 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 60, i16 196, i16 74, i16 182, i16 87, i16 169, i16 99, i16 157>, <8 x i16> %21) #3
  %24 = add <4 x i32> %22, <i32 128, i32 128, i32 128, i32 128>
  %25 = add <4 x i32> %23, <i32 128, i32 128, i32 128, i32 128>
  %26 = ashr <4 x i32> %24, <i32 8, i32 8, i32 8, i32 8>
  %27 = ashr <4 x i32> %25, <i32 8, i32 8, i32 8, i32 8>
  %28 = bitcast <4 x i32> %26 to <8 x i16>
  %29 = bitcast <4 x i32> %27 to <8 x i16>
  %30 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %28, <8 x i16> %29) #3
  %31 = shufflevector <16 x i8> %30, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %32 = bitcast <16 x i8> %31 to <2 x i64>
  %33 = extractelement <2 x i64> %32, i32 0
  %34 = bitcast i8* %12 to i64*
  store i64 %33, i64* %34, align 1
  %35 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 111, i16 145, i16 123, i16 133, i16 134, i16 122, i16 145, i16 111>, <8 x i16> %21) #3
  %36 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 155, i16 101, i16 164, i16 92, i16 173, i16 83, i16 182, i16 74>, <8 x i16> %21) #3
  %37 = add <4 x i32> %35, <i32 128, i32 128, i32 128, i32 128>
  %38 = add <4 x i32> %36, <i32 128, i32 128, i32 128, i32 128>
  %39 = ashr <4 x i32> %37, <i32 8, i32 8, i32 8, i32 8>
  %40 = ashr <4 x i32> %38, <i32 8, i32 8, i32 8, i32 8>
  %41 = bitcast <4 x i32> %39 to <8 x i16>
  %42 = bitcast <4 x i32> %40 to <8 x i16>
  %43 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %41, <8 x i16> %42) #3
  %44 = shufflevector <16 x i8> %43, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = bitcast <16 x i8> %44 to <2 x i64>
  %46 = getelementptr inbounds i8, i8* %12, i64 8
  %47 = extractelement <2 x i64> %45, i32 0
  %48 = bitcast i8* %46 to i64*
  store i64 %47, i64* %48, align 1
  %49 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 190, i16 66, i16 197, i16 59, i16 204, i16 52, i16 211, i16 45>, <8 x i16> %21) #3
  %50 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 217, i16 39, i16 222, i16 34, i16 227, i16 29, i16 231, i16 25>, <8 x i16> %21) #3
  %51 = add <4 x i32> %49, <i32 128, i32 128, i32 128, i32 128>
  %52 = add <4 x i32> %50, <i32 128, i32 128, i32 128, i32 128>
  %53 = ashr <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %54 = ashr <4 x i32> %52, <i32 8, i32 8, i32 8, i32 8>
  %55 = bitcast <4 x i32> %53 to <8 x i16>
  %56 = bitcast <4 x i32> %54 to <8 x i16>
  %57 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %55, <8 x i16> %56) #3
  %58 = shufflevector <16 x i8> %57, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %59 = bitcast <16 x i8> %58 to <2 x i64>
  %60 = getelementptr inbounds i8, i8* %12, i64 16
  %61 = extractelement <2 x i64> %59, i32 0
  %62 = bitcast i8* %60 to i64*
  store i64 %61, i64* %62, align 1
  %63 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 235, i16 21, i16 239, i16 17, i16 242, i16 14, i16 244, i16 12>, <8 x i16> %21) #3
  %64 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 246, i16 10, i16 247, i16 9, i16 248, i16 8, i16 248, i16 8>, <8 x i16> %21) #3
  %65 = add <4 x i32> %63, <i32 128, i32 128, i32 128, i32 128>
  %66 = add <4 x i32> %64, <i32 128, i32 128, i32 128, i32 128>
  %67 = ashr <4 x i32> %65, <i32 8, i32 8, i32 8, i32 8>
  %68 = ashr <4 x i32> %66, <i32 8, i32 8, i32 8, i32 8>
  %69 = bitcast <4 x i32> %67 to <8 x i16>
  %70 = bitcast <4 x i32> %68 to <8 x i16>
  %71 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %69, <8 x i16> %70) #3
  %72 = shufflevector <16 x i8> %71, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %73 = bitcast <16 x i8> %72 to <2 x i64>
  %74 = getelementptr inbounds i8, i8* %12, i64 24
  %75 = extractelement <2 x i64> %73, i32 0
  %76 = bitcast i8* %74 to i64*
  store i64 %75, i64* %76, align 1
  %77 = getelementptr inbounds i8, i8* %12, i64 %1
  %78 = add nuw nsw i64 %11, 1
  %79 = icmp eq i64 %78, 16
  br i1 %79, label %80, label %10

80:                                               ; preds = %10
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_smooth_h_predictor_32x32_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i8, i8* %2, i64 31
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <4 x i32> undef, i32 %7, i32 0
  %9 = bitcast <4 x i32> %8 to <8 x i16>
  br label %10

10:                                               ; preds = %10, %4
  %11 = phi i64 [ 0, %4 ], [ %78, %10 ]
  %12 = phi i8* [ %0, %4 ], [ %77, %10 ]
  %13 = getelementptr inbounds i8, i8* %3, i64 %11
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = insertelement <4 x i32> undef, i32 %15, i32 0
  %17 = bitcast <4 x i32> %16 to <8 x i16>
  %18 = shufflevector <8 x i16> %9, <8 x i16> %17, <8 x i32> <i32 0, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %19 = bitcast <8 x i16> %18 to <4 x i32>
  %20 = shufflevector <4 x i32> %19, <4 x i32> undef, <4 x i32> zeroinitializer
  %21 = bitcast <4 x i32> %20 to <8 x i16>
  %22 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 1, i16 255, i16 16, i16 240, i16 31, i16 225, i16 46, i16 210>, <8 x i16> %21) #3
  %23 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 60, i16 196, i16 74, i16 182, i16 87, i16 169, i16 99, i16 157>, <8 x i16> %21) #3
  %24 = add <4 x i32> %22, <i32 128, i32 128, i32 128, i32 128>
  %25 = add <4 x i32> %23, <i32 128, i32 128, i32 128, i32 128>
  %26 = ashr <4 x i32> %24, <i32 8, i32 8, i32 8, i32 8>
  %27 = ashr <4 x i32> %25, <i32 8, i32 8, i32 8, i32 8>
  %28 = bitcast <4 x i32> %26 to <8 x i16>
  %29 = bitcast <4 x i32> %27 to <8 x i16>
  %30 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %28, <8 x i16> %29) #3
  %31 = shufflevector <16 x i8> %30, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %32 = bitcast <16 x i8> %31 to <2 x i64>
  %33 = extractelement <2 x i64> %32, i32 0
  %34 = bitcast i8* %12 to i64*
  store i64 %33, i64* %34, align 1
  %35 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 111, i16 145, i16 123, i16 133, i16 134, i16 122, i16 145, i16 111>, <8 x i16> %21) #3
  %36 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 155, i16 101, i16 164, i16 92, i16 173, i16 83, i16 182, i16 74>, <8 x i16> %21) #3
  %37 = add <4 x i32> %35, <i32 128, i32 128, i32 128, i32 128>
  %38 = add <4 x i32> %36, <i32 128, i32 128, i32 128, i32 128>
  %39 = ashr <4 x i32> %37, <i32 8, i32 8, i32 8, i32 8>
  %40 = ashr <4 x i32> %38, <i32 8, i32 8, i32 8, i32 8>
  %41 = bitcast <4 x i32> %39 to <8 x i16>
  %42 = bitcast <4 x i32> %40 to <8 x i16>
  %43 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %41, <8 x i16> %42) #3
  %44 = shufflevector <16 x i8> %43, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = bitcast <16 x i8> %44 to <2 x i64>
  %46 = getelementptr inbounds i8, i8* %12, i64 8
  %47 = extractelement <2 x i64> %45, i32 0
  %48 = bitcast i8* %46 to i64*
  store i64 %47, i64* %48, align 1
  %49 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 190, i16 66, i16 197, i16 59, i16 204, i16 52, i16 211, i16 45>, <8 x i16> %21) #3
  %50 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 217, i16 39, i16 222, i16 34, i16 227, i16 29, i16 231, i16 25>, <8 x i16> %21) #3
  %51 = add <4 x i32> %49, <i32 128, i32 128, i32 128, i32 128>
  %52 = add <4 x i32> %50, <i32 128, i32 128, i32 128, i32 128>
  %53 = ashr <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %54 = ashr <4 x i32> %52, <i32 8, i32 8, i32 8, i32 8>
  %55 = bitcast <4 x i32> %53 to <8 x i16>
  %56 = bitcast <4 x i32> %54 to <8 x i16>
  %57 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %55, <8 x i16> %56) #3
  %58 = shufflevector <16 x i8> %57, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %59 = bitcast <16 x i8> %58 to <2 x i64>
  %60 = getelementptr inbounds i8, i8* %12, i64 16
  %61 = extractelement <2 x i64> %59, i32 0
  %62 = bitcast i8* %60 to i64*
  store i64 %61, i64* %62, align 1
  %63 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 235, i16 21, i16 239, i16 17, i16 242, i16 14, i16 244, i16 12>, <8 x i16> %21) #3
  %64 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 246, i16 10, i16 247, i16 9, i16 248, i16 8, i16 248, i16 8>, <8 x i16> %21) #3
  %65 = add <4 x i32> %63, <i32 128, i32 128, i32 128, i32 128>
  %66 = add <4 x i32> %64, <i32 128, i32 128, i32 128, i32 128>
  %67 = ashr <4 x i32> %65, <i32 8, i32 8, i32 8, i32 8>
  %68 = ashr <4 x i32> %66, <i32 8, i32 8, i32 8, i32 8>
  %69 = bitcast <4 x i32> %67 to <8 x i16>
  %70 = bitcast <4 x i32> %68 to <8 x i16>
  %71 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %69, <8 x i16> %70) #3
  %72 = shufflevector <16 x i8> %71, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %73 = bitcast <16 x i8> %72 to <2 x i64>
  %74 = getelementptr inbounds i8, i8* %12, i64 24
  %75 = extractelement <2 x i64> %73, i32 0
  %76 = bitcast i8* %74 to i64*
  store i64 %75, i64* %76, align 1
  %77 = getelementptr inbounds i8, i8* %12, i64 %1
  %78 = add nuw nsw i64 %11, 1
  %79 = icmp eq i64 %78, 32
  br i1 %79, label %80, label %10

80:                                               ; preds = %10
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_smooth_h_predictor_32x64_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i8, i8* %2, i64 31
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <4 x i32> undef, i32 %7, i32 0
  %9 = bitcast <4 x i32> %8 to <8 x i16>
  br label %10

10:                                               ; preds = %10, %4
  %11 = phi i64 [ 0, %4 ], [ %78, %10 ]
  %12 = phi i8* [ %0, %4 ], [ %77, %10 ]
  %13 = getelementptr inbounds i8, i8* %3, i64 %11
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = insertelement <4 x i32> undef, i32 %15, i32 0
  %17 = bitcast <4 x i32> %16 to <8 x i16>
  %18 = shufflevector <8 x i16> %9, <8 x i16> %17, <8 x i32> <i32 0, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %19 = bitcast <8 x i16> %18 to <4 x i32>
  %20 = shufflevector <4 x i32> %19, <4 x i32> undef, <4 x i32> zeroinitializer
  %21 = bitcast <4 x i32> %20 to <8 x i16>
  %22 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 1, i16 255, i16 16, i16 240, i16 31, i16 225, i16 46, i16 210>, <8 x i16> %21) #3
  %23 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 60, i16 196, i16 74, i16 182, i16 87, i16 169, i16 99, i16 157>, <8 x i16> %21) #3
  %24 = add <4 x i32> %22, <i32 128, i32 128, i32 128, i32 128>
  %25 = add <4 x i32> %23, <i32 128, i32 128, i32 128, i32 128>
  %26 = ashr <4 x i32> %24, <i32 8, i32 8, i32 8, i32 8>
  %27 = ashr <4 x i32> %25, <i32 8, i32 8, i32 8, i32 8>
  %28 = bitcast <4 x i32> %26 to <8 x i16>
  %29 = bitcast <4 x i32> %27 to <8 x i16>
  %30 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %28, <8 x i16> %29) #3
  %31 = shufflevector <16 x i8> %30, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %32 = bitcast <16 x i8> %31 to <2 x i64>
  %33 = extractelement <2 x i64> %32, i32 0
  %34 = bitcast i8* %12 to i64*
  store i64 %33, i64* %34, align 1
  %35 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 111, i16 145, i16 123, i16 133, i16 134, i16 122, i16 145, i16 111>, <8 x i16> %21) #3
  %36 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 155, i16 101, i16 164, i16 92, i16 173, i16 83, i16 182, i16 74>, <8 x i16> %21) #3
  %37 = add <4 x i32> %35, <i32 128, i32 128, i32 128, i32 128>
  %38 = add <4 x i32> %36, <i32 128, i32 128, i32 128, i32 128>
  %39 = ashr <4 x i32> %37, <i32 8, i32 8, i32 8, i32 8>
  %40 = ashr <4 x i32> %38, <i32 8, i32 8, i32 8, i32 8>
  %41 = bitcast <4 x i32> %39 to <8 x i16>
  %42 = bitcast <4 x i32> %40 to <8 x i16>
  %43 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %41, <8 x i16> %42) #3
  %44 = shufflevector <16 x i8> %43, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = bitcast <16 x i8> %44 to <2 x i64>
  %46 = getelementptr inbounds i8, i8* %12, i64 8
  %47 = extractelement <2 x i64> %45, i32 0
  %48 = bitcast i8* %46 to i64*
  store i64 %47, i64* %48, align 1
  %49 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 190, i16 66, i16 197, i16 59, i16 204, i16 52, i16 211, i16 45>, <8 x i16> %21) #3
  %50 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 217, i16 39, i16 222, i16 34, i16 227, i16 29, i16 231, i16 25>, <8 x i16> %21) #3
  %51 = add <4 x i32> %49, <i32 128, i32 128, i32 128, i32 128>
  %52 = add <4 x i32> %50, <i32 128, i32 128, i32 128, i32 128>
  %53 = ashr <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %54 = ashr <4 x i32> %52, <i32 8, i32 8, i32 8, i32 8>
  %55 = bitcast <4 x i32> %53 to <8 x i16>
  %56 = bitcast <4 x i32> %54 to <8 x i16>
  %57 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %55, <8 x i16> %56) #3
  %58 = shufflevector <16 x i8> %57, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %59 = bitcast <16 x i8> %58 to <2 x i64>
  %60 = getelementptr inbounds i8, i8* %12, i64 16
  %61 = extractelement <2 x i64> %59, i32 0
  %62 = bitcast i8* %60 to i64*
  store i64 %61, i64* %62, align 1
  %63 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 235, i16 21, i16 239, i16 17, i16 242, i16 14, i16 244, i16 12>, <8 x i16> %21) #3
  %64 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 246, i16 10, i16 247, i16 9, i16 248, i16 8, i16 248, i16 8>, <8 x i16> %21) #3
  %65 = add <4 x i32> %63, <i32 128, i32 128, i32 128, i32 128>
  %66 = add <4 x i32> %64, <i32 128, i32 128, i32 128, i32 128>
  %67 = ashr <4 x i32> %65, <i32 8, i32 8, i32 8, i32 8>
  %68 = ashr <4 x i32> %66, <i32 8, i32 8, i32 8, i32 8>
  %69 = bitcast <4 x i32> %67 to <8 x i16>
  %70 = bitcast <4 x i32> %68 to <8 x i16>
  %71 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %69, <8 x i16> %70) #3
  %72 = shufflevector <16 x i8> %71, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %73 = bitcast <16 x i8> %72 to <2 x i64>
  %74 = getelementptr inbounds i8, i8* %12, i64 24
  %75 = extractelement <2 x i64> %73, i32 0
  %76 = bitcast i8* %74 to i64*
  store i64 %75, i64* %76, align 1
  %77 = getelementptr inbounds i8, i8* %12, i64 %1
  %78 = add nuw nsw i64 %11, 1
  %79 = icmp eq i64 %78, 64
  br i1 %79, label %80, label %10

80:                                               ; preds = %10
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_smooth_h_predictor_64x64_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i8, i8* %2, i64 63
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <4 x i32> undef, i32 %7, i32 0
  %9 = bitcast <4 x i32> %8 to <8 x i16>
  br label %10

10:                                               ; preds = %10, %4
  %11 = phi i64 [ 0, %4 ], [ %134, %10 ]
  %12 = phi i8* [ %0, %4 ], [ %133, %10 ]
  %13 = getelementptr inbounds i8, i8* %3, i64 %11
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = insertelement <4 x i32> undef, i32 %15, i32 0
  %17 = bitcast <4 x i32> %16 to <8 x i16>
  %18 = shufflevector <8 x i16> %9, <8 x i16> %17, <8 x i32> <i32 0, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %19 = bitcast <8 x i16> %18 to <4 x i32>
  %20 = shufflevector <4 x i32> %19, <4 x i32> undef, <4 x i32> zeroinitializer
  %21 = bitcast <4 x i32> %20 to <8 x i16>
  %22 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 1, i16 255, i16 8, i16 248, i16 16, i16 240, i16 23, i16 233>, <8 x i16> %21) #3
  %23 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 31, i16 225, i16 38, i16 218, i16 46, i16 210, i16 53, i16 203>, <8 x i16> %21) #3
  %24 = add <4 x i32> %22, <i32 128, i32 128, i32 128, i32 128>
  %25 = add <4 x i32> %23, <i32 128, i32 128, i32 128, i32 128>
  %26 = ashr <4 x i32> %24, <i32 8, i32 8, i32 8, i32 8>
  %27 = ashr <4 x i32> %25, <i32 8, i32 8, i32 8, i32 8>
  %28 = bitcast <4 x i32> %26 to <8 x i16>
  %29 = bitcast <4 x i32> %27 to <8 x i16>
  %30 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %28, <8 x i16> %29) #3
  %31 = shufflevector <16 x i8> %30, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %32 = bitcast <16 x i8> %31 to <2 x i64>
  %33 = extractelement <2 x i64> %32, i32 0
  %34 = bitcast i8* %12 to i64*
  store i64 %33, i64* %34, align 1
  %35 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 60, i16 196, i16 67, i16 189, i16 74, i16 182, i16 80, i16 176>, <8 x i16> %21) #3
  %36 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 87, i16 169, i16 93, i16 163, i16 100, i16 156, i16 106, i16 150>, <8 x i16> %21) #3
  %37 = add <4 x i32> %35, <i32 128, i32 128, i32 128, i32 128>
  %38 = add <4 x i32> %36, <i32 128, i32 128, i32 128, i32 128>
  %39 = ashr <4 x i32> %37, <i32 8, i32 8, i32 8, i32 8>
  %40 = ashr <4 x i32> %38, <i32 8, i32 8, i32 8, i32 8>
  %41 = bitcast <4 x i32> %39 to <8 x i16>
  %42 = bitcast <4 x i32> %40 to <8 x i16>
  %43 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %41, <8 x i16> %42) #3
  %44 = shufflevector <16 x i8> %43, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = bitcast <16 x i8> %44 to <2 x i64>
  %46 = getelementptr inbounds i8, i8* %12, i64 8
  %47 = extractelement <2 x i64> %45, i32 0
  %48 = bitcast i8* %46 to i64*
  store i64 %47, i64* %48, align 1
  %49 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 112, i16 144, i16 118, i16 138, i16 123, i16 133, i16 129, i16 127>, <8 x i16> %21) #3
  %50 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 135, i16 121, i16 140, i16 116, i16 145, i16 111, i16 150, i16 106>, <8 x i16> %21) #3
  %51 = add <4 x i32> %49, <i32 128, i32 128, i32 128, i32 128>
  %52 = add <4 x i32> %50, <i32 128, i32 128, i32 128, i32 128>
  %53 = ashr <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %54 = ashr <4 x i32> %52, <i32 8, i32 8, i32 8, i32 8>
  %55 = bitcast <4 x i32> %53 to <8 x i16>
  %56 = bitcast <4 x i32> %54 to <8 x i16>
  %57 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %55, <8 x i16> %56) #3
  %58 = shufflevector <16 x i8> %57, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %59 = bitcast <16 x i8> %58 to <2 x i64>
  %60 = getelementptr inbounds i8, i8* %12, i64 16
  %61 = extractelement <2 x i64> %59, i32 0
  %62 = bitcast i8* %60 to i64*
  store i64 %61, i64* %62, align 1
  %63 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 155, i16 101, i16 160, i16 96, i16 165, i16 91, i16 170, i16 86>, <8 x i16> %21) #3
  %64 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 174, i16 82, i16 179, i16 77, i16 183, i16 73, i16 187, i16 69>, <8 x i16> %21) #3
  %65 = add <4 x i32> %63, <i32 128, i32 128, i32 128, i32 128>
  %66 = add <4 x i32> %64, <i32 128, i32 128, i32 128, i32 128>
  %67 = ashr <4 x i32> %65, <i32 8, i32 8, i32 8, i32 8>
  %68 = ashr <4 x i32> %66, <i32 8, i32 8, i32 8, i32 8>
  %69 = bitcast <4 x i32> %67 to <8 x i16>
  %70 = bitcast <4 x i32> %68 to <8 x i16>
  %71 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %69, <8 x i16> %70) #3
  %72 = shufflevector <16 x i8> %71, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %73 = bitcast <16 x i8> %72 to <2 x i64>
  %74 = getelementptr inbounds i8, i8* %12, i64 24
  %75 = extractelement <2 x i64> %73, i32 0
  %76 = bitcast i8* %74 to i64*
  store i64 %75, i64* %76, align 1
  %77 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 191, i16 65, i16 195, i16 61, i16 199, i16 57, i16 202, i16 54>, <8 x i16> %21) #3
  %78 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 206, i16 50, i16 209, i16 47, i16 212, i16 44, i16 215, i16 41>, <8 x i16> %21) #3
  %79 = add <4 x i32> %77, <i32 128, i32 128, i32 128, i32 128>
  %80 = add <4 x i32> %78, <i32 128, i32 128, i32 128, i32 128>
  %81 = ashr <4 x i32> %79, <i32 8, i32 8, i32 8, i32 8>
  %82 = ashr <4 x i32> %80, <i32 8, i32 8, i32 8, i32 8>
  %83 = bitcast <4 x i32> %81 to <8 x i16>
  %84 = bitcast <4 x i32> %82 to <8 x i16>
  %85 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %83, <8 x i16> %84) #3
  %86 = shufflevector <16 x i8> %85, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %87 = bitcast <16 x i8> %86 to <2 x i64>
  %88 = getelementptr inbounds i8, i8* %12, i64 32
  %89 = extractelement <2 x i64> %87, i32 0
  %90 = bitcast i8* %88 to i64*
  store i64 %89, i64* %90, align 1
  %91 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 218, i16 38, i16 221, i16 35, i16 224, i16 32, i16 227, i16 29>, <8 x i16> %21) #3
  %92 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 229, i16 27, i16 231, i16 25, i16 234, i16 22, i16 236, i16 20>, <8 x i16> %21) #3
  %93 = add <4 x i32> %91, <i32 128, i32 128, i32 128, i32 128>
  %94 = add <4 x i32> %92, <i32 128, i32 128, i32 128, i32 128>
  %95 = ashr <4 x i32> %93, <i32 8, i32 8, i32 8, i32 8>
  %96 = ashr <4 x i32> %94, <i32 8, i32 8, i32 8, i32 8>
  %97 = bitcast <4 x i32> %95 to <8 x i16>
  %98 = bitcast <4 x i32> %96 to <8 x i16>
  %99 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %97, <8 x i16> %98) #3
  %100 = shufflevector <16 x i8> %99, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %101 = bitcast <16 x i8> %100 to <2 x i64>
  %102 = getelementptr inbounds i8, i8* %12, i64 40
  %103 = extractelement <2 x i64> %101, i32 0
  %104 = bitcast i8* %102 to i64*
  store i64 %103, i64* %104, align 1
  %105 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 238, i16 18, i16 240, i16 16, i16 241, i16 15, i16 243, i16 13>, <8 x i16> %21) #3
  %106 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 244, i16 12, i16 246, i16 10, i16 247, i16 9, i16 248, i16 8>, <8 x i16> %21) #3
  %107 = add <4 x i32> %105, <i32 128, i32 128, i32 128, i32 128>
  %108 = add <4 x i32> %106, <i32 128, i32 128, i32 128, i32 128>
  %109 = ashr <4 x i32> %107, <i32 8, i32 8, i32 8, i32 8>
  %110 = ashr <4 x i32> %108, <i32 8, i32 8, i32 8, i32 8>
  %111 = bitcast <4 x i32> %109 to <8 x i16>
  %112 = bitcast <4 x i32> %110 to <8 x i16>
  %113 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %111, <8 x i16> %112) #3
  %114 = shufflevector <16 x i8> %113, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %115 = bitcast <16 x i8> %114 to <2 x i64>
  %116 = getelementptr inbounds i8, i8* %12, i64 48
  %117 = extractelement <2 x i64> %115, i32 0
  %118 = bitcast i8* %116 to i64*
  store i64 %117, i64* %118, align 1
  %119 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 249, i16 7, i16 250, i16 6, i16 250, i16 6, i16 251, i16 5>, <8 x i16> %21) #3
  %120 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 251, i16 5, i16 252, i16 4, i16 252, i16 4, i16 252, i16 4>, <8 x i16> %21) #3
  %121 = add <4 x i32> %119, <i32 128, i32 128, i32 128, i32 128>
  %122 = add <4 x i32> %120, <i32 128, i32 128, i32 128, i32 128>
  %123 = ashr <4 x i32> %121, <i32 8, i32 8, i32 8, i32 8>
  %124 = ashr <4 x i32> %122, <i32 8, i32 8, i32 8, i32 8>
  %125 = bitcast <4 x i32> %123 to <8 x i16>
  %126 = bitcast <4 x i32> %124 to <8 x i16>
  %127 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %125, <8 x i16> %126) #3
  %128 = shufflevector <16 x i8> %127, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %129 = bitcast <16 x i8> %128 to <2 x i64>
  %130 = getelementptr inbounds i8, i8* %12, i64 56
  %131 = extractelement <2 x i64> %129, i32 0
  %132 = bitcast i8* %130 to i64*
  store i64 %131, i64* %132, align 1
  %133 = getelementptr inbounds i8, i8* %12, i64 %1
  %134 = add nuw nsw i64 %11, 1
  %135 = icmp eq i64 %134, 64
  br i1 %135, label %136, label %10

136:                                              ; preds = %10
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_smooth_h_predictor_64x32_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i8, i8* %2, i64 63
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <4 x i32> undef, i32 %7, i32 0
  %9 = bitcast <4 x i32> %8 to <8 x i16>
  br label %10

10:                                               ; preds = %10, %4
  %11 = phi i64 [ 0, %4 ], [ %134, %10 ]
  %12 = phi i8* [ %0, %4 ], [ %133, %10 ]
  %13 = getelementptr inbounds i8, i8* %3, i64 %11
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = insertelement <4 x i32> undef, i32 %15, i32 0
  %17 = bitcast <4 x i32> %16 to <8 x i16>
  %18 = shufflevector <8 x i16> %9, <8 x i16> %17, <8 x i32> <i32 0, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %19 = bitcast <8 x i16> %18 to <4 x i32>
  %20 = shufflevector <4 x i32> %19, <4 x i32> undef, <4 x i32> zeroinitializer
  %21 = bitcast <4 x i32> %20 to <8 x i16>
  %22 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 1, i16 255, i16 8, i16 248, i16 16, i16 240, i16 23, i16 233>, <8 x i16> %21) #3
  %23 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 31, i16 225, i16 38, i16 218, i16 46, i16 210, i16 53, i16 203>, <8 x i16> %21) #3
  %24 = add <4 x i32> %22, <i32 128, i32 128, i32 128, i32 128>
  %25 = add <4 x i32> %23, <i32 128, i32 128, i32 128, i32 128>
  %26 = ashr <4 x i32> %24, <i32 8, i32 8, i32 8, i32 8>
  %27 = ashr <4 x i32> %25, <i32 8, i32 8, i32 8, i32 8>
  %28 = bitcast <4 x i32> %26 to <8 x i16>
  %29 = bitcast <4 x i32> %27 to <8 x i16>
  %30 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %28, <8 x i16> %29) #3
  %31 = shufflevector <16 x i8> %30, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %32 = bitcast <16 x i8> %31 to <2 x i64>
  %33 = extractelement <2 x i64> %32, i32 0
  %34 = bitcast i8* %12 to i64*
  store i64 %33, i64* %34, align 1
  %35 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 60, i16 196, i16 67, i16 189, i16 74, i16 182, i16 80, i16 176>, <8 x i16> %21) #3
  %36 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 87, i16 169, i16 93, i16 163, i16 100, i16 156, i16 106, i16 150>, <8 x i16> %21) #3
  %37 = add <4 x i32> %35, <i32 128, i32 128, i32 128, i32 128>
  %38 = add <4 x i32> %36, <i32 128, i32 128, i32 128, i32 128>
  %39 = ashr <4 x i32> %37, <i32 8, i32 8, i32 8, i32 8>
  %40 = ashr <4 x i32> %38, <i32 8, i32 8, i32 8, i32 8>
  %41 = bitcast <4 x i32> %39 to <8 x i16>
  %42 = bitcast <4 x i32> %40 to <8 x i16>
  %43 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %41, <8 x i16> %42) #3
  %44 = shufflevector <16 x i8> %43, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = bitcast <16 x i8> %44 to <2 x i64>
  %46 = getelementptr inbounds i8, i8* %12, i64 8
  %47 = extractelement <2 x i64> %45, i32 0
  %48 = bitcast i8* %46 to i64*
  store i64 %47, i64* %48, align 1
  %49 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 112, i16 144, i16 118, i16 138, i16 123, i16 133, i16 129, i16 127>, <8 x i16> %21) #3
  %50 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 135, i16 121, i16 140, i16 116, i16 145, i16 111, i16 150, i16 106>, <8 x i16> %21) #3
  %51 = add <4 x i32> %49, <i32 128, i32 128, i32 128, i32 128>
  %52 = add <4 x i32> %50, <i32 128, i32 128, i32 128, i32 128>
  %53 = ashr <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %54 = ashr <4 x i32> %52, <i32 8, i32 8, i32 8, i32 8>
  %55 = bitcast <4 x i32> %53 to <8 x i16>
  %56 = bitcast <4 x i32> %54 to <8 x i16>
  %57 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %55, <8 x i16> %56) #3
  %58 = shufflevector <16 x i8> %57, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %59 = bitcast <16 x i8> %58 to <2 x i64>
  %60 = getelementptr inbounds i8, i8* %12, i64 16
  %61 = extractelement <2 x i64> %59, i32 0
  %62 = bitcast i8* %60 to i64*
  store i64 %61, i64* %62, align 1
  %63 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 155, i16 101, i16 160, i16 96, i16 165, i16 91, i16 170, i16 86>, <8 x i16> %21) #3
  %64 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 174, i16 82, i16 179, i16 77, i16 183, i16 73, i16 187, i16 69>, <8 x i16> %21) #3
  %65 = add <4 x i32> %63, <i32 128, i32 128, i32 128, i32 128>
  %66 = add <4 x i32> %64, <i32 128, i32 128, i32 128, i32 128>
  %67 = ashr <4 x i32> %65, <i32 8, i32 8, i32 8, i32 8>
  %68 = ashr <4 x i32> %66, <i32 8, i32 8, i32 8, i32 8>
  %69 = bitcast <4 x i32> %67 to <8 x i16>
  %70 = bitcast <4 x i32> %68 to <8 x i16>
  %71 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %69, <8 x i16> %70) #3
  %72 = shufflevector <16 x i8> %71, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %73 = bitcast <16 x i8> %72 to <2 x i64>
  %74 = getelementptr inbounds i8, i8* %12, i64 24
  %75 = extractelement <2 x i64> %73, i32 0
  %76 = bitcast i8* %74 to i64*
  store i64 %75, i64* %76, align 1
  %77 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 191, i16 65, i16 195, i16 61, i16 199, i16 57, i16 202, i16 54>, <8 x i16> %21) #3
  %78 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 206, i16 50, i16 209, i16 47, i16 212, i16 44, i16 215, i16 41>, <8 x i16> %21) #3
  %79 = add <4 x i32> %77, <i32 128, i32 128, i32 128, i32 128>
  %80 = add <4 x i32> %78, <i32 128, i32 128, i32 128, i32 128>
  %81 = ashr <4 x i32> %79, <i32 8, i32 8, i32 8, i32 8>
  %82 = ashr <4 x i32> %80, <i32 8, i32 8, i32 8, i32 8>
  %83 = bitcast <4 x i32> %81 to <8 x i16>
  %84 = bitcast <4 x i32> %82 to <8 x i16>
  %85 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %83, <8 x i16> %84) #3
  %86 = shufflevector <16 x i8> %85, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %87 = bitcast <16 x i8> %86 to <2 x i64>
  %88 = getelementptr inbounds i8, i8* %12, i64 32
  %89 = extractelement <2 x i64> %87, i32 0
  %90 = bitcast i8* %88 to i64*
  store i64 %89, i64* %90, align 1
  %91 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 218, i16 38, i16 221, i16 35, i16 224, i16 32, i16 227, i16 29>, <8 x i16> %21) #3
  %92 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 229, i16 27, i16 231, i16 25, i16 234, i16 22, i16 236, i16 20>, <8 x i16> %21) #3
  %93 = add <4 x i32> %91, <i32 128, i32 128, i32 128, i32 128>
  %94 = add <4 x i32> %92, <i32 128, i32 128, i32 128, i32 128>
  %95 = ashr <4 x i32> %93, <i32 8, i32 8, i32 8, i32 8>
  %96 = ashr <4 x i32> %94, <i32 8, i32 8, i32 8, i32 8>
  %97 = bitcast <4 x i32> %95 to <8 x i16>
  %98 = bitcast <4 x i32> %96 to <8 x i16>
  %99 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %97, <8 x i16> %98) #3
  %100 = shufflevector <16 x i8> %99, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %101 = bitcast <16 x i8> %100 to <2 x i64>
  %102 = getelementptr inbounds i8, i8* %12, i64 40
  %103 = extractelement <2 x i64> %101, i32 0
  %104 = bitcast i8* %102 to i64*
  store i64 %103, i64* %104, align 1
  %105 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 238, i16 18, i16 240, i16 16, i16 241, i16 15, i16 243, i16 13>, <8 x i16> %21) #3
  %106 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 244, i16 12, i16 246, i16 10, i16 247, i16 9, i16 248, i16 8>, <8 x i16> %21) #3
  %107 = add <4 x i32> %105, <i32 128, i32 128, i32 128, i32 128>
  %108 = add <4 x i32> %106, <i32 128, i32 128, i32 128, i32 128>
  %109 = ashr <4 x i32> %107, <i32 8, i32 8, i32 8, i32 8>
  %110 = ashr <4 x i32> %108, <i32 8, i32 8, i32 8, i32 8>
  %111 = bitcast <4 x i32> %109 to <8 x i16>
  %112 = bitcast <4 x i32> %110 to <8 x i16>
  %113 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %111, <8 x i16> %112) #3
  %114 = shufflevector <16 x i8> %113, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %115 = bitcast <16 x i8> %114 to <2 x i64>
  %116 = getelementptr inbounds i8, i8* %12, i64 48
  %117 = extractelement <2 x i64> %115, i32 0
  %118 = bitcast i8* %116 to i64*
  store i64 %117, i64* %118, align 1
  %119 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 249, i16 7, i16 250, i16 6, i16 250, i16 6, i16 251, i16 5>, <8 x i16> %21) #3
  %120 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 251, i16 5, i16 252, i16 4, i16 252, i16 4, i16 252, i16 4>, <8 x i16> %21) #3
  %121 = add <4 x i32> %119, <i32 128, i32 128, i32 128, i32 128>
  %122 = add <4 x i32> %120, <i32 128, i32 128, i32 128, i32 128>
  %123 = ashr <4 x i32> %121, <i32 8, i32 8, i32 8, i32 8>
  %124 = ashr <4 x i32> %122, <i32 8, i32 8, i32 8, i32 8>
  %125 = bitcast <4 x i32> %123 to <8 x i16>
  %126 = bitcast <4 x i32> %124 to <8 x i16>
  %127 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %125, <8 x i16> %126) #3
  %128 = shufflevector <16 x i8> %127, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %129 = bitcast <16 x i8> %128 to <2 x i64>
  %130 = getelementptr inbounds i8, i8* %12, i64 56
  %131 = extractelement <2 x i64> %129, i32 0
  %132 = bitcast i8* %130 to i64*
  store i64 %131, i64* %132, align 1
  %133 = getelementptr inbounds i8, i8* %12, i64 %1
  %134 = add nuw nsw i64 %11, 1
  %135 = icmp eq i64 %134, 32
  br i1 %135, label %136, label %10

136:                                              ; preds = %10
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_smooth_h_predictor_64x16_ssse3(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i8, i8* %2, i64 63
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <4 x i32> undef, i32 %7, i32 0
  %9 = bitcast <4 x i32> %8 to <8 x i16>
  br label %10

10:                                               ; preds = %10, %4
  %11 = phi i64 [ 0, %4 ], [ %134, %10 ]
  %12 = phi i8* [ %0, %4 ], [ %133, %10 ]
  %13 = getelementptr inbounds i8, i8* %3, i64 %11
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = insertelement <4 x i32> undef, i32 %15, i32 0
  %17 = bitcast <4 x i32> %16 to <8 x i16>
  %18 = shufflevector <8 x i16> %9, <8 x i16> %17, <8 x i32> <i32 0, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %19 = bitcast <8 x i16> %18 to <4 x i32>
  %20 = shufflevector <4 x i32> %19, <4 x i32> undef, <4 x i32> zeroinitializer
  %21 = bitcast <4 x i32> %20 to <8 x i16>
  %22 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 1, i16 255, i16 8, i16 248, i16 16, i16 240, i16 23, i16 233>, <8 x i16> %21) #3
  %23 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 31, i16 225, i16 38, i16 218, i16 46, i16 210, i16 53, i16 203>, <8 x i16> %21) #3
  %24 = add <4 x i32> %22, <i32 128, i32 128, i32 128, i32 128>
  %25 = add <4 x i32> %23, <i32 128, i32 128, i32 128, i32 128>
  %26 = ashr <4 x i32> %24, <i32 8, i32 8, i32 8, i32 8>
  %27 = ashr <4 x i32> %25, <i32 8, i32 8, i32 8, i32 8>
  %28 = bitcast <4 x i32> %26 to <8 x i16>
  %29 = bitcast <4 x i32> %27 to <8 x i16>
  %30 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %28, <8 x i16> %29) #3
  %31 = shufflevector <16 x i8> %30, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %32 = bitcast <16 x i8> %31 to <2 x i64>
  %33 = extractelement <2 x i64> %32, i32 0
  %34 = bitcast i8* %12 to i64*
  store i64 %33, i64* %34, align 1
  %35 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 60, i16 196, i16 67, i16 189, i16 74, i16 182, i16 80, i16 176>, <8 x i16> %21) #3
  %36 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 87, i16 169, i16 93, i16 163, i16 100, i16 156, i16 106, i16 150>, <8 x i16> %21) #3
  %37 = add <4 x i32> %35, <i32 128, i32 128, i32 128, i32 128>
  %38 = add <4 x i32> %36, <i32 128, i32 128, i32 128, i32 128>
  %39 = ashr <4 x i32> %37, <i32 8, i32 8, i32 8, i32 8>
  %40 = ashr <4 x i32> %38, <i32 8, i32 8, i32 8, i32 8>
  %41 = bitcast <4 x i32> %39 to <8 x i16>
  %42 = bitcast <4 x i32> %40 to <8 x i16>
  %43 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %41, <8 x i16> %42) #3
  %44 = shufflevector <16 x i8> %43, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = bitcast <16 x i8> %44 to <2 x i64>
  %46 = getelementptr inbounds i8, i8* %12, i64 8
  %47 = extractelement <2 x i64> %45, i32 0
  %48 = bitcast i8* %46 to i64*
  store i64 %47, i64* %48, align 1
  %49 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 112, i16 144, i16 118, i16 138, i16 123, i16 133, i16 129, i16 127>, <8 x i16> %21) #3
  %50 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 135, i16 121, i16 140, i16 116, i16 145, i16 111, i16 150, i16 106>, <8 x i16> %21) #3
  %51 = add <4 x i32> %49, <i32 128, i32 128, i32 128, i32 128>
  %52 = add <4 x i32> %50, <i32 128, i32 128, i32 128, i32 128>
  %53 = ashr <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %54 = ashr <4 x i32> %52, <i32 8, i32 8, i32 8, i32 8>
  %55 = bitcast <4 x i32> %53 to <8 x i16>
  %56 = bitcast <4 x i32> %54 to <8 x i16>
  %57 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %55, <8 x i16> %56) #3
  %58 = shufflevector <16 x i8> %57, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %59 = bitcast <16 x i8> %58 to <2 x i64>
  %60 = getelementptr inbounds i8, i8* %12, i64 16
  %61 = extractelement <2 x i64> %59, i32 0
  %62 = bitcast i8* %60 to i64*
  store i64 %61, i64* %62, align 1
  %63 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 155, i16 101, i16 160, i16 96, i16 165, i16 91, i16 170, i16 86>, <8 x i16> %21) #3
  %64 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 174, i16 82, i16 179, i16 77, i16 183, i16 73, i16 187, i16 69>, <8 x i16> %21) #3
  %65 = add <4 x i32> %63, <i32 128, i32 128, i32 128, i32 128>
  %66 = add <4 x i32> %64, <i32 128, i32 128, i32 128, i32 128>
  %67 = ashr <4 x i32> %65, <i32 8, i32 8, i32 8, i32 8>
  %68 = ashr <4 x i32> %66, <i32 8, i32 8, i32 8, i32 8>
  %69 = bitcast <4 x i32> %67 to <8 x i16>
  %70 = bitcast <4 x i32> %68 to <8 x i16>
  %71 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %69, <8 x i16> %70) #3
  %72 = shufflevector <16 x i8> %71, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %73 = bitcast <16 x i8> %72 to <2 x i64>
  %74 = getelementptr inbounds i8, i8* %12, i64 24
  %75 = extractelement <2 x i64> %73, i32 0
  %76 = bitcast i8* %74 to i64*
  store i64 %75, i64* %76, align 1
  %77 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 191, i16 65, i16 195, i16 61, i16 199, i16 57, i16 202, i16 54>, <8 x i16> %21) #3
  %78 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 206, i16 50, i16 209, i16 47, i16 212, i16 44, i16 215, i16 41>, <8 x i16> %21) #3
  %79 = add <4 x i32> %77, <i32 128, i32 128, i32 128, i32 128>
  %80 = add <4 x i32> %78, <i32 128, i32 128, i32 128, i32 128>
  %81 = ashr <4 x i32> %79, <i32 8, i32 8, i32 8, i32 8>
  %82 = ashr <4 x i32> %80, <i32 8, i32 8, i32 8, i32 8>
  %83 = bitcast <4 x i32> %81 to <8 x i16>
  %84 = bitcast <4 x i32> %82 to <8 x i16>
  %85 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %83, <8 x i16> %84) #3
  %86 = shufflevector <16 x i8> %85, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %87 = bitcast <16 x i8> %86 to <2 x i64>
  %88 = getelementptr inbounds i8, i8* %12, i64 32
  %89 = extractelement <2 x i64> %87, i32 0
  %90 = bitcast i8* %88 to i64*
  store i64 %89, i64* %90, align 1
  %91 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 218, i16 38, i16 221, i16 35, i16 224, i16 32, i16 227, i16 29>, <8 x i16> %21) #3
  %92 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 229, i16 27, i16 231, i16 25, i16 234, i16 22, i16 236, i16 20>, <8 x i16> %21) #3
  %93 = add <4 x i32> %91, <i32 128, i32 128, i32 128, i32 128>
  %94 = add <4 x i32> %92, <i32 128, i32 128, i32 128, i32 128>
  %95 = ashr <4 x i32> %93, <i32 8, i32 8, i32 8, i32 8>
  %96 = ashr <4 x i32> %94, <i32 8, i32 8, i32 8, i32 8>
  %97 = bitcast <4 x i32> %95 to <8 x i16>
  %98 = bitcast <4 x i32> %96 to <8 x i16>
  %99 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %97, <8 x i16> %98) #3
  %100 = shufflevector <16 x i8> %99, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %101 = bitcast <16 x i8> %100 to <2 x i64>
  %102 = getelementptr inbounds i8, i8* %12, i64 40
  %103 = extractelement <2 x i64> %101, i32 0
  %104 = bitcast i8* %102 to i64*
  store i64 %103, i64* %104, align 1
  %105 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 238, i16 18, i16 240, i16 16, i16 241, i16 15, i16 243, i16 13>, <8 x i16> %21) #3
  %106 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 244, i16 12, i16 246, i16 10, i16 247, i16 9, i16 248, i16 8>, <8 x i16> %21) #3
  %107 = add <4 x i32> %105, <i32 128, i32 128, i32 128, i32 128>
  %108 = add <4 x i32> %106, <i32 128, i32 128, i32 128, i32 128>
  %109 = ashr <4 x i32> %107, <i32 8, i32 8, i32 8, i32 8>
  %110 = ashr <4 x i32> %108, <i32 8, i32 8, i32 8, i32 8>
  %111 = bitcast <4 x i32> %109 to <8 x i16>
  %112 = bitcast <4 x i32> %110 to <8 x i16>
  %113 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %111, <8 x i16> %112) #3
  %114 = shufflevector <16 x i8> %113, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %115 = bitcast <16 x i8> %114 to <2 x i64>
  %116 = getelementptr inbounds i8, i8* %12, i64 48
  %117 = extractelement <2 x i64> %115, i32 0
  %118 = bitcast i8* %116 to i64*
  store i64 %117, i64* %118, align 1
  %119 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 249, i16 7, i16 250, i16 6, i16 250, i16 6, i16 251, i16 5>, <8 x i16> %21) #3
  %120 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> <i16 251, i16 5, i16 252, i16 4, i16 252, i16 4, i16 252, i16 4>, <8 x i16> %21) #3
  %121 = add <4 x i32> %119, <i32 128, i32 128, i32 128, i32 128>
  %122 = add <4 x i32> %120, <i32 128, i32 128, i32 128, i32 128>
  %123 = ashr <4 x i32> %121, <i32 8, i32 8, i32 8, i32 8>
  %124 = ashr <4 x i32> %122, <i32 8, i32 8, i32 8, i32 8>
  %125 = bitcast <4 x i32> %123 to <8 x i16>
  %126 = bitcast <4 x i32> %124 to <8 x i16>
  %127 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %125, <8 x i16> %126) #3
  %128 = shufflevector <16 x i8> %127, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %129 = bitcast <16 x i8> %128 to <2 x i64>
  %130 = getelementptr inbounds i8, i8* %12, i64 56
  %131 = extractelement <2 x i64> %129, i32 0
  %132 = bitcast i8* %130 to i64*
  store i64 %131, i64* %132, align 1
  %133 = getelementptr inbounds i8, i8* %12, i64 %1
  %134 = add nuw nsw i64 %11, 1
  %135 = icmp eq i64 %134, 16
  br i1 %135, label %136, label %10

136:                                              ; preds = %10
  ret void
}

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8>, <16 x i8>) #2

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #2

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16>, <8 x i16>) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
