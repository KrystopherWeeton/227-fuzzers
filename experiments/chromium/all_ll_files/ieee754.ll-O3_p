; ModuleID = '../../v8/src/base/ieee754.cc'
source_filename = "../../v8/src/base/ieee754.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

@_ZZN2v84base7ieee7544atanEdE6atanhi = internal unnamed_addr constant [4 x double] [double 0x3FDDAC670561BB4F, double 0x3FE921FB54442D18, double 0x3FEF730BD281F69B, double 0x3FF921FB54442D18], align 16
@_ZZN2v84base7ieee7544atanEdE6atanlo = internal constant [4 x double] [double 0x3C7A2B7F222F65E2, double 0x3C81A62633145C07, double 0x3C7007887AF0CBBD, double 0x3C91A62633145C07], align 16
@_ZZN2v84base7ieee7545atan2EddE4tiny = internal global double 1.000000e-300, align 8
@_ZZN2v84base7ieee7545atan2EddE5pi_lo = internal global double 0x3CA1A62633145C07, align 8
@_ZZN2v84base7ieee7543expEdE4halF = internal unnamed_addr constant [2 x double] [double 5.000000e-01, double -5.000000e-01], align 16
@_ZZN2v84base7ieee7543expEdE5ln2HI = internal unnamed_addr constant [2 x double] [double 0x3FE62E42FEE00000, double 0xBFE62E42FEE00000], align 16
@_ZZN2v84base7ieee7543expEdE5ln2LO = internal unnamed_addr constant [2 x double] [double 0x3DEA39EF35793C76, double 0xBDEA39EF35793C76], align 16
@_ZZN2v84base7ieee7543expEdE4huge = internal global double 1.000000e+300, align 8
@_ZZN2v84base7ieee7543expEdE8twom1000 = internal global double 0x170000000000000, align 8
@_ZZN2v84base7ieee7543expEdE7two1023 = internal global double 0x7FE0000000000000, align 8
@_ZZN2v84base7ieee7545expm1EdE4huge = internal global double 1.000000e+300, align 8
@_ZZN2v84base7ieee7544coshEdE4huge = internal global double 1.000000e+300, align 8
@_ZZN2v84base7ieee7543powEddE2bp = internal unnamed_addr constant [2 x double] [double 1.000000e+00, double 1.500000e+00], align 16
@_ZZN2v84base7ieee7543powEddE4dp_h = internal unnamed_addr constant [2 x double] [double 0.000000e+00, double 0x3FE2B80340000000], align 16
@_ZZN2v84base7ieee7543powEddE4dp_l = internal unnamed_addr constant [2 x double] [double 0.000000e+00, double 0x3E4CFDEB43CFD006], align 16
@_ZZN2v84base7ieee7544tanhEdE4tiny = internal constant double 1.000000e-300, align 8
@_ZZN2v84base7ieee75412_GLOBAL__N_118__ieee754_rem_pio2EdPdE11two_over_pi = internal unnamed_addr constant [66 x i32] [i32 10680707, i32 7228996, i32 1387004, i32 2578385, i32 16069853, i32 12639074, i32 9804092, i32 4427841, i32 16666979, i32 11263675, i32 12935607, i32 2387514, i32 4345298, i32 14681673, i32 3074569, i32 13734428, i32 16653803, i32 1880361, i32 10960616, i32 8533493, i32 3062596, i32 8710556, i32 7349940, i32 6258241, i32 3772886, i32 3769171, i32 3798172, i32 8675211, i32 12450088, i32 3874808, i32 9961438, i32 366607, i32 15675153, i32 9132554, i32 7151469, i32 3571407, i32 2607881, i32 12013382, i32 4155038, i32 6285869, i32 7677882, i32 13102053, i32 15825725, i32 473591, i32 9065106, i32 15363067, i32 6271263, i32 9264392, i32 5636912, i32 4652155, i32 7056368, i32 13614112, i32 10155062, i32 1944035, i32 9527646, i32 15080200, i32 6658437, i32 6231200, i32 6832269, i32 16767104, i32 5075751, i32 3212806, i32 1398474, i32 7579849, i32 6349435, i32 12618859], align 16
@_ZZN2v84base7ieee75412_GLOBAL__N_118__ieee754_rem_pio2EdPdE8npio2_hw = internal unnamed_addr constant [32 x i32] [i32 1073291771, i32 1074340347, i32 1074977148, i32 1075388923, i32 1075800698, i32 1076025724, i32 1076231611, i32 1076437499, i32 1076643386, i32 1076849274, i32 1076971356, i32 1077074300, i32 1077177244, i32 1077280187, i32 1077383131, i32 1077486075, i32 1077589019, i32 1077691962, i32 1077794906, i32 1077897850, i32 1077968460, i32 1078019932, i32 1078071404, i32 1078122876, i32 1078174348, i32 1078225820, i32 1078277292, i32 1078328763, i32 1078380235, i32 1078431707, i32 1078483179, i32 1078534651], align 16

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN2v84base7ieee7544acosEd(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = lshr i64 %2, 32
  %4 = trunc i64 %3 to i32
  %5 = and i32 %4, 2147483647
  %6 = icmp ugt i32 %5, 1072693247
  br i1 %6, label %7, label %15

7:                                                ; preds = %1
  %8 = trunc i64 %2 to i32
  %9 = add nsw i32 %5, -1072693248
  %10 = or i32 %9, %8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %111

12:                                               ; preds = %7
  %13 = icmp sgt i32 %4, 0
  %14 = select i1 %13, double 0.000000e+00, double 0x400921FB54442D18
  br label %111

15:                                               ; preds = %1
  %16 = icmp ult i32 %5, 1071644672
  br i1 %16, label %17, label %45

17:                                               ; preds = %15
  %18 = icmp ult i32 %5, 1012924417
  br i1 %18, label %111, label %19

19:                                               ; preds = %17
  %20 = fmul double %0, %0
  %21 = fmul double %20, 0x3F023DE10DFDF709
  %22 = fadd double %21, 0x3F49EFE07501B288
  %23 = fmul double %20, %22
  %24 = fadd double %23, 0xBFA48228B5688F3B
  %25 = fmul double %20, %24
  %26 = fadd double %25, 0x3FC9C1550E884455
  %27 = fmul double %20, %26
  %28 = fadd double %27, 0xBFD4D61203EB6F7D
  %29 = fmul double %20, %28
  %30 = fadd double %29, 0x3FC5555555555555
  %31 = fmul double %20, %30
  %32 = fmul double %20, 0x3FB3B8C5B12E9282
  %33 = fadd double %32, 0xBFE6066C1B8D0159
  %34 = fmul double %20, %33
  %35 = fadd double %34, 0x40002AE59C598AC8
  %36 = fmul double %20, %35
  %37 = fadd double %36, 0xC0033A271C8A2D4B
  %38 = fmul double %20, %37
  %39 = fadd double %38, 1.000000e+00
  %40 = fdiv double %31, %39
  %41 = fmul double %40, %0
  %42 = fsub double 0x3C91A62633145C07, %41
  %43 = fsub double %42, %0
  %44 = fadd double %43, 0x3FF921FB54442D18
  br label %111

45:                                               ; preds = %15
  %46 = icmp slt i32 %4, 0
  br i1 %46, label %47, label %76

47:                                               ; preds = %45
  %48 = fadd double %0, 1.000000e+00
  %49 = fmul double %48, 5.000000e-01
  %50 = fmul double %49, 0x3F023DE10DFDF709
  %51 = fadd double %50, 0x3F49EFE07501B288
  %52 = fmul double %49, %51
  %53 = fadd double %52, 0xBFA48228B5688F3B
  %54 = fmul double %49, %53
  %55 = fadd double %54, 0x3FC9C1550E884455
  %56 = fmul double %49, %55
  %57 = fadd double %56, 0xBFD4D61203EB6F7D
  %58 = fmul double %49, %57
  %59 = fadd double %58, 0x3FC5555555555555
  %60 = fmul double %49, %59
  %61 = fmul double %49, 0x3FB3B8C5B12E9282
  %62 = fadd double %61, 0xBFE6066C1B8D0159
  %63 = fmul double %49, %62
  %64 = fadd double %63, 0x40002AE59C598AC8
  %65 = fmul double %49, %64
  %66 = fadd double %65, 0xC0033A271C8A2D4B
  %67 = fmul double %49, %66
  %68 = fadd double %67, 1.000000e+00
  %69 = tail call double @sqrt(double %49) #7
  %70 = fdiv double %60, %68
  %71 = fmul double %70, %69
  %72 = fadd double %71, 0xBC91A62633145C07
  %73 = fadd double %69, %72
  %74 = fmul double %73, 2.000000e+00
  %75 = fsub double 0x400921FB54442D18, %74
  br label %111

76:                                               ; preds = %45
  %77 = fsub double 1.000000e+00, %0
  %78 = fmul double %77, 5.000000e-01
  %79 = tail call double @sqrt(double %78) #7
  %80 = bitcast double %79 to i64
  %81 = and i64 %80, -4294967296
  %82 = bitcast i64 %81 to double
  %83 = fmul double %82, %82
  %84 = fsub double %78, %83
  %85 = fadd double %79, %82
  %86 = fdiv double %84, %85
  %87 = fmul double %78, 0x3F023DE10DFDF709
  %88 = fadd double %87, 0x3F49EFE07501B288
  %89 = fmul double %78, %88
  %90 = fadd double %89, 0xBFA48228B5688F3B
  %91 = fmul double %78, %90
  %92 = fadd double %91, 0x3FC9C1550E884455
  %93 = fmul double %78, %92
  %94 = fadd double %93, 0xBFD4D61203EB6F7D
  %95 = fmul double %78, %94
  %96 = fadd double %95, 0x3FC5555555555555
  %97 = fmul double %78, %96
  %98 = fmul double %78, 0x3FB3B8C5B12E9282
  %99 = fadd double %98, 0xBFE6066C1B8D0159
  %100 = fmul double %78, %99
  %101 = fadd double %100, 0x40002AE59C598AC8
  %102 = fmul double %78, %101
  %103 = fadd double %102, 0xC0033A271C8A2D4B
  %104 = fmul double %78, %103
  %105 = fadd double %104, 1.000000e+00
  %106 = fdiv double %97, %105
  %107 = fmul double %106, %79
  %108 = fadd double %107, %86
  %109 = fadd double %108, %82
  %110 = fmul double %109, 2.000000e+00
  br label %111

111:                                              ; preds = %7, %17, %12, %76, %47, %19
  %112 = phi double [ %44, %19 ], [ %75, %47 ], [ %110, %76 ], [ %14, %12 ], [ 0x3FF921FB54442D18, %17 ], [ 0x7FF4000000000000, %7 ]
  ret double %112
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #2

; Function Attrs: nofree nounwind ssp uwtable
define hidden double @_ZN2v84base7ieee7545acoshEd(double) local_unnamed_addr #3 {
  %2 = bitcast double %0 to i64
  %3 = lshr i64 %2, 32
  %4 = trunc i64 %3 to i32
  %5 = trunc i64 %2 to i32
  %6 = icmp slt i32 %4, 1072693248
  br i1 %6, label %39, label %7

7:                                                ; preds = %1
  %8 = icmp sgt i32 %4, 1102053375
  br i1 %8, label %9, label %16

9:                                                ; preds = %7
  %10 = icmp sgt i32 %4, 2146435071
  br i1 %10, label %11, label %13

11:                                               ; preds = %9
  %12 = fadd double %0, %0
  br label %39

13:                                               ; preds = %9
  %14 = tail call double @_ZN2v84base7ieee7543logEd(double %0)
  %15 = fadd double %14, 0x3FE62E42FEFA39EF
  br label %39

16:                                               ; preds = %7
  %17 = add nsw i32 %4, -1072693248
  %18 = or i32 %17, %5
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %39, label %20

20:                                               ; preds = %16
  %21 = icmp sgt i32 %4, 1073741824
  br i1 %21, label %22, label %31

22:                                               ; preds = %20
  %23 = fmul double %0, %0
  %24 = fmul double %0, 2.000000e+00
  %25 = fadd double %23, -1.000000e+00
  %26 = tail call double @sqrt(double %25) #7
  %27 = fadd double %26, %0
  %28 = fdiv double 1.000000e+00, %27
  %29 = fsub double %24, %28
  %30 = tail call double @_ZN2v84base7ieee7543logEd(double %29)
  br label %39

31:                                               ; preds = %20
  %32 = fadd double %0, -1.000000e+00
  %33 = fmul double %32, 2.000000e+00
  %34 = fmul double %32, %32
  %35 = fadd double %33, %34
  %36 = tail call double @sqrt(double %35) #7
  %37 = fadd double %32, %36
  %38 = tail call double @_ZN2v84base7ieee7545log1pEd(double %37)
  br label %39

39:                                               ; preds = %1, %16, %31, %22, %13, %11
  %40 = phi double [ %12, %11 ], [ %15, %13 ], [ %30, %22 ], [ %38, %31 ], [ 0.000000e+00, %16 ], [ 0x7FF4000000000000, %1 ]
  ret double %40
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden double @_ZN2v84base7ieee7543logEd(double) local_unnamed_addr #4 {
  %2 = bitcast double %0 to i64
  %3 = lshr i64 %2, 32
  %4 = trunc i64 %3 to i32
  %5 = icmp slt i32 %4, 1048576
  br i1 %5, label %6, label %18

6:                                                ; preds = %1
  %7 = trunc i64 %2 to i32
  %8 = and i32 %4, 2147483647
  %9 = or i32 %8, %7
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %125, label %11

11:                                               ; preds = %6
  %12 = icmp slt i32 %4, 0
  br i1 %12, label %125, label %13

13:                                               ; preds = %11
  %14 = fmul double %0, 0x4350000000000000
  %15 = bitcast double %14 to i64
  %16 = lshr i64 %15, 32
  %17 = trunc i64 %16 to i32
  br label %18

18:                                               ; preds = %13, %1
  %19 = phi double [ %14, %13 ], [ %0, %1 ]
  %20 = phi i64 [ %15, %13 ], [ %2, %1 ]
  %21 = phi i32 [ %17, %13 ], [ %4, %1 ]
  %22 = phi i32 [ -54, %13 ], [ 0, %1 ]
  %23 = icmp sgt i32 %21, 2146435071
  br i1 %23, label %24, label %26

24:                                               ; preds = %18
  %25 = fadd double %19, %19
  br label %125

26:                                               ; preds = %18
  %27 = ashr i32 %21, 20
  %28 = add nsw i32 %27, -1023
  %29 = add nsw i32 %28, %22
  %30 = and i32 %21, 1048575
  %31 = add nuw nsw i32 %30, 614244
  %32 = and i32 %31, 1048576
  %33 = and i64 %20, 4294967295
  %34 = or i32 %32, %30
  %35 = xor i32 %34, 1072693248
  %36 = zext i32 %35 to i64
  %37 = shl nuw nsw i64 %36, 32
  %38 = or i64 %37, %33
  %39 = bitcast i64 %38 to double
  %40 = lshr i32 %31, 20
  %41 = add nsw i32 %29, %40
  %42 = fadd double %39, -1.000000e+00
  %43 = add nsw i32 %21, 2
  %44 = and i32 %43, 1048575
  %45 = icmp ult i32 %44, 3
  br i1 %45, label %46, label %70

46:                                               ; preds = %26
  %47 = fcmp oeq double %42, 0.000000e+00
  br i1 %47, label %48, label %55

48:                                               ; preds = %46
  %49 = icmp eq i32 %41, 0
  br i1 %49, label %125, label %50

50:                                               ; preds = %48
  %51 = sitofp i32 %41 to double
  %52 = fmul double %51, 0x3FE62E42FEE00000
  %53 = fmul double %51, 0x3DEA39EF35793C76
  %54 = fadd double %52, %53
  br label %125

55:                                               ; preds = %46
  %56 = fmul double %42, %42
  %57 = fmul double %42, 0x3FD5555555555555
  %58 = fsub double 5.000000e-01, %57
  %59 = fmul double %56, %58
  %60 = icmp eq i32 %41, 0
  br i1 %60, label %61, label %63

61:                                               ; preds = %55
  %62 = fsub double %42, %59
  br label %125

63:                                               ; preds = %55
  %64 = sitofp i32 %41 to double
  %65 = fmul double %64, 0x3FE62E42FEE00000
  %66 = fmul double %64, 0x3DEA39EF35793C76
  %67 = fsub double %59, %66
  %68 = fsub double %67, %42
  %69 = fsub double %65, %68
  br label %125

70:                                               ; preds = %26
  %71 = fadd double %42, 2.000000e+00
  %72 = fdiv double %42, %71
  %73 = sitofp i32 %41 to double
  %74 = fmul double %72, %72
  %75 = add nsw i32 %30, -398458
  %76 = fmul double %74, %74
  %77 = sub nsw i32 440401, %30
  %78 = fmul double %76, 0x3FC39A09D078C69F
  %79 = fadd double %78, 0x3FCC71C51D8E78AF
  %80 = fmul double %76, %79
  %81 = fadd double %80, 0x3FD999999997FA04
  %82 = fmul double %76, %81
  %83 = fmul double %76, 0x3FC2F112DF3E5244
  %84 = fadd double %83, 0x3FC7466496CB03DE
  %85 = fmul double %76, %84
  %86 = fadd double %85, 0x3FD2492494229359
  %87 = fmul double %76, %86
  %88 = fadd double %87, 0x3FE5555555555593
  %89 = fmul double %74, %88
  %90 = or i32 %75, %77
  %91 = fadd double %82, %89
  %92 = icmp sgt i32 %90, 0
  br i1 %92, label %93, label %111

93:                                               ; preds = %70
  %94 = fmul double %42, 5.000000e-01
  %95 = fmul double %42, %94
  %96 = icmp eq i32 %41, 0
  br i1 %96, label %97, label %102

97:                                               ; preds = %93
  %98 = fadd double %95, %91
  %99 = fmul double %72, %98
  %100 = fsub double %95, %99
  %101 = fsub double %42, %100
  br label %125

102:                                              ; preds = %93
  %103 = fmul double %73, 0x3FE62E42FEE00000
  %104 = fadd double %95, %91
  %105 = fmul double %72, %104
  %106 = fmul double %73, 0x3DEA39EF35793C76
  %107 = fadd double %106, %105
  %108 = fsub double %95, %107
  %109 = fsub double %108, %42
  %110 = fsub double %103, %109
  br label %125

111:                                              ; preds = %70
  %112 = icmp eq i32 %41, 0
  br i1 %112, label %113, label %117

113:                                              ; preds = %111
  %114 = fsub double %42, %91
  %115 = fmul double %72, %114
  %116 = fsub double %42, %115
  br label %125

117:                                              ; preds = %111
  %118 = fmul double %73, 0x3FE62E42FEE00000
  %119 = fsub double %42, %91
  %120 = fmul double %72, %119
  %121 = fmul double %73, 0x3DEA39EF35793C76
  %122 = fsub double %120, %121
  %123 = fsub double %122, %42
  %124 = fsub double %118, %123
  br label %125

125:                                              ; preds = %11, %6, %48, %117, %113, %102, %97, %63, %61, %50, %24
  %126 = phi double [ %25, %24 ], [ %54, %50 ], [ %62, %61 ], [ %69, %63 ], [ %101, %97 ], [ %110, %102 ], [ %116, %113 ], [ %124, %117 ], [ 0.000000e+00, %48 ], [ 0xFFF0000000000000, %6 ], [ 0x7FF4000000000000, %11 ]
  ret double %126
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden double @_ZN2v84base7ieee7545log1pEd(double) local_unnamed_addr #4 {
  %2 = bitcast double %0 to i64
  %3 = lshr i64 %2, 32
  %4 = trunc i64 %3 to i32
  %5 = and i32 %4, 2147483647
  %6 = icmp slt i32 %4, 1071284858
  br i1 %6, label %7, label %23

7:                                                ; preds = %1
  %8 = icmp ugt i32 %5, 1072693247
  br i1 %8, label %9, label %12

9:                                                ; preds = %7
  %10 = fcmp oeq double %0, -1.000000e+00
  br i1 %10, label %147, label %11

11:                                               ; preds = %9
  br label %147

12:                                               ; preds = %7
  %13 = icmp ult i32 %5, 1042284544
  br i1 %13, label %14, label %27

14:                                               ; preds = %12
  %15 = fadd double %0, 0x4350000000000000
  %16 = fcmp ogt double %15, 0.000000e+00
  %17 = icmp ult i32 %5, 1016070144
  %18 = and i1 %16, %17
  br i1 %18, label %147, label %19

19:                                               ; preds = %14
  %20 = fmul double %0, %0
  %21 = fmul double %20, 5.000000e-01
  %22 = fsub double %0, %21
  br label %147

23:                                               ; preds = %1
  %24 = icmp sgt i32 %4, 2146435071
  br i1 %24, label %25, label %33

25:                                               ; preds = %23
  %26 = fadd double %0, %0
  br label %147

27:                                               ; preds = %12
  %28 = add i32 %4, 1076707643
  %29 = icmp ugt i32 %28, 1076707643
  br i1 %29, label %30, label %35

30:                                               ; preds = %27
  %31 = fmul double %0, 5.000000e-01
  %32 = fmul double %31, %0
  br label %109

33:                                               ; preds = %23
  %34 = icmp slt i32 %4, 1128267776
  br i1 %34, label %35, label %49

35:                                               ; preds = %27, %33
  %36 = fadd double %0, 1.000000e+00
  %37 = bitcast double %36 to i64
  %38 = lshr i64 %37, 32
  %39 = trunc i64 %38 to i32
  %40 = ashr i32 %39, 20
  %41 = add nsw i32 %40, -1023
  %42 = icmp sgt i32 %41, 0
  %43 = fsub double %0, %36
  %44 = fadd double %43, 1.000000e+00
  %45 = fadd double %36, -1.000000e+00
  %46 = fsub double %0, %45
  %47 = select i1 %42, double %44, double %46
  %48 = fdiv double %47, %36
  br label %53

49:                                               ; preds = %33
  %50 = lshr i64 %2, 52
  %51 = trunc i64 %50 to i32
  %52 = add nsw i32 %51, -1023
  br label %53

53:                                               ; preds = %49, %35
  %54 = phi i64 [ %37, %35 ], [ %2, %49 ]
  %55 = phi i32 [ %41, %35 ], [ %52, %49 ]
  %56 = phi i32 [ %39, %35 ], [ %4, %49 ]
  %57 = phi double [ %48, %35 ], [ 0.000000e+00, %49 ]
  %58 = and i32 %56, 1048575
  %59 = icmp ult i32 %58, 434334
  br i1 %59, label %60, label %66

60:                                               ; preds = %53
  %61 = and i64 %54, 4294967295
  %62 = or i32 %58, 1072693248
  %63 = zext i32 %62 to i64
  %64 = shl nuw nsw i64 %63, 32
  %65 = or i64 %64, %61
  br label %75

66:                                               ; preds = %53
  %67 = add nsw i32 %55, 1
  %68 = and i64 %54, 4294967295
  %69 = or i32 %58, 1071644672
  %70 = zext i32 %69 to i64
  %71 = shl nuw nsw i64 %70, 32
  %72 = or i64 %71, %68
  %73 = sub nuw nsw i32 1048576, %58
  %74 = lshr i32 %73, 2
  br label %75

75:                                               ; preds = %60, %66
  %76 = phi i64 [ %65, %60 ], [ %72, %66 ]
  %77 = phi i32 [ %55, %60 ], [ %67, %66 ]
  %78 = phi i32 [ %58, %60 ], [ %74, %66 ]
  %79 = bitcast i64 %76 to double
  %80 = fadd double %79, -1.000000e+00
  %81 = fmul double %80, 5.000000e-01
  %82 = fmul double %80, %81
  %83 = icmp eq i32 %78, 0
  br i1 %83, label %84, label %109

84:                                               ; preds = %75
  %85 = fcmp oeq double %80, 0.000000e+00
  br i1 %85, label %86, label %94

86:                                               ; preds = %84
  %87 = icmp eq i32 %77, 0
  br i1 %87, label %147, label %88

88:                                               ; preds = %86
  %89 = sitofp i32 %77 to double
  %90 = fmul double %89, 0x3DEA39EF35793C76
  %91 = fadd double %57, %90
  %92 = fmul double %89, 0x3FE62E42FEE00000
  %93 = fadd double %92, %91
  br label %147

94:                                               ; preds = %84
  %95 = fmul double %80, 0x3FE5555555555555
  %96 = fsub double 1.000000e+00, %95
  %97 = fmul double %82, %96
  %98 = icmp eq i32 %77, 0
  br i1 %98, label %99, label %101

99:                                               ; preds = %94
  %100 = fsub double %80, %97
  br label %147

101:                                              ; preds = %94
  %102 = sitofp i32 %77 to double
  %103 = fmul double %102, 0x3FE62E42FEE00000
  %104 = fmul double %102, 0x3DEA39EF35793C76
  %105 = fadd double %57, %104
  %106 = fsub double %97, %105
  %107 = fsub double %106, %80
  %108 = fsub double %103, %107
  br label %147

109:                                              ; preds = %30, %75
  %110 = phi double [ %32, %30 ], [ %82, %75 ]
  %111 = phi double [ %0, %30 ], [ %80, %75 ]
  %112 = phi double [ undef, %30 ], [ %57, %75 ]
  %113 = phi i32 [ 0, %30 ], [ %77, %75 ]
  %114 = fadd double %111, 2.000000e+00
  %115 = fdiv double %111, %114
  %116 = fmul double %115, %115
  %117 = fmul double %116, 0x3FC2F112DF3E5244
  %118 = fadd double %117, 0x3FC39A09D078C69F
  %119 = fmul double %116, %118
  %120 = fadd double %119, 0x3FC7466496CB03DE
  %121 = fmul double %116, %120
  %122 = fadd double %121, 0x3FCC71C51D8E78AF
  %123 = fmul double %116, %122
  %124 = fadd double %123, 0x3FD2492494229359
  %125 = fmul double %116, %124
  %126 = fadd double %125, 0x3FD999999997FA04
  %127 = fmul double %116, %126
  %128 = fadd double %127, 0x3FE5555555555593
  %129 = fmul double %116, %128
  %130 = icmp eq i32 %113, 0
  br i1 %130, label %131, label %136

131:                                              ; preds = %109
  %132 = fadd double %110, %129
  %133 = fmul double %115, %132
  %134 = fsub double %110, %133
  %135 = fsub double %111, %134
  br label %147

136:                                              ; preds = %109
  %137 = sitofp i32 %113 to double
  %138 = fmul double %137, 0x3FE62E42FEE00000
  %139 = fadd double %110, %129
  %140 = fmul double %115, %139
  %141 = fmul double %137, 0x3DEA39EF35793C76
  %142 = fadd double %112, %141
  %143 = fadd double %142, %140
  %144 = fsub double %110, %143
  %145 = fsub double %144, %111
  %146 = fsub double %138, %145
  br label %147

147:                                              ; preds = %9, %86, %14, %136, %131, %101, %99, %88, %25, %19, %11
  %148 = phi double [ 0x7FF4000000000000, %11 ], [ %22, %19 ], [ %26, %25 ], [ %93, %88 ], [ %100, %99 ], [ %108, %101 ], [ %135, %131 ], [ %146, %136 ], [ %0, %14 ], [ 0.000000e+00, %86 ], [ 0xFFF0000000000000, %9 ]
  ret double %148
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN2v84base7ieee7544asinEd(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = lshr i64 %2, 32
  %4 = trunc i64 %3 to i32
  %5 = and i32 %4, 2147483647
  %6 = icmp ugt i32 %5, 1072693247
  br i1 %6, label %7, label %16

7:                                                ; preds = %1
  %8 = trunc i64 %2 to i32
  %9 = add nsw i32 %5, -1072693248
  %10 = or i32 %9, %8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %104

12:                                               ; preds = %7
  %13 = fmul double %0, 0x3FF921FB54442D18
  %14 = fmul double %0, 0x3C91A62633145C07
  %15 = fadd double %13, %14
  br label %104

16:                                               ; preds = %1
  %17 = icmp ult i32 %5, 1071644672
  br i1 %17, label %18, label %49

18:                                               ; preds = %16
  %19 = icmp ult i32 %5, 1044381696
  br i1 %19, label %20, label %23

20:                                               ; preds = %18
  %21 = fadd double %0, 1.000000e+300
  %22 = fcmp ogt double %21, 1.000000e+00
  br i1 %22, label %104, label %25

23:                                               ; preds = %18
  %24 = fmul double %0, %0
  br label %25

25:                                               ; preds = %20, %23
  %26 = phi double [ 0.000000e+00, %20 ], [ %24, %23 ]
  %27 = fmul double %26, 0x3F023DE10DFDF709
  %28 = fadd double %27, 0x3F49EFE07501B288
  %29 = fmul double %26, %28
  %30 = fadd double %29, 0xBFA48228B5688F3B
  %31 = fmul double %26, %30
  %32 = fadd double %31, 0x3FC9C1550E884455
  %33 = fmul double %26, %32
  %34 = fadd double %33, 0xBFD4D61203EB6F7D
  %35 = fmul double %26, %34
  %36 = fadd double %35, 0x3FC5555555555555
  %37 = fmul double %26, %36
  %38 = fmul double %26, 0x3FB3B8C5B12E9282
  %39 = fadd double %38, 0xBFE6066C1B8D0159
  %40 = fmul double %26, %39
  %41 = fadd double %40, 0x40002AE59C598AC8
  %42 = fmul double %26, %41
  %43 = fadd double %42, 0xC0033A271C8A2D4B
  %44 = fmul double %26, %43
  %45 = fadd double %44, 1.000000e+00
  %46 = fdiv double %37, %45
  %47 = fmul double %46, %0
  %48 = fadd double %47, %0
  br label %104

49:                                               ; preds = %16
  %50 = tail call double @llvm.fabs.f64(double %0)
  %51 = fsub double 1.000000e+00, %50
  %52 = fmul double %51, 5.000000e-01
  %53 = fmul double %52, 0x3F023DE10DFDF709
  %54 = fadd double %53, 0x3F49EFE07501B288
  %55 = fmul double %52, %54
  %56 = fadd double %55, 0xBFA48228B5688F3B
  %57 = fmul double %52, %56
  %58 = fadd double %57, 0x3FC9C1550E884455
  %59 = fmul double %52, %58
  %60 = fadd double %59, 0xBFD4D61203EB6F7D
  %61 = fmul double %52, %60
  %62 = fadd double %61, 0x3FC5555555555555
  %63 = fmul double %52, %62
  %64 = fmul double %52, 0x3FB3B8C5B12E9282
  %65 = fadd double %64, 0xBFE6066C1B8D0159
  %66 = fmul double %52, %65
  %67 = fadd double %66, 0x40002AE59C598AC8
  %68 = fmul double %52, %67
  %69 = fadd double %68, 0xC0033A271C8A2D4B
  %70 = fmul double %52, %69
  %71 = fadd double %70, 1.000000e+00
  %72 = tail call double @sqrt(double %52) #7
  %73 = icmp ugt i32 %5, 1072640818
  br i1 %73, label %74, label %81

74:                                               ; preds = %49
  %75 = fdiv double %63, %71
  %76 = fmul double %75, %72
  %77 = fadd double %72, %76
  %78 = fmul double %77, 2.000000e+00
  %79 = fadd double %78, 0xBC91A62633145C07
  %80 = fsub double 0x3FF921FB54442D18, %79
  br label %99

81:                                               ; preds = %49
  %82 = bitcast double %72 to i64
  %83 = and i64 %82, -4294967296
  %84 = bitcast i64 %83 to double
  %85 = fmul double %84, %84
  %86 = fsub double %52, %85
  %87 = fadd double %72, %84
  %88 = fdiv double %86, %87
  %89 = fdiv double %63, %71
  %90 = fmul double %72, 2.000000e+00
  %91 = fmul double %89, %90
  %92 = fmul double %88, 2.000000e+00
  %93 = fsub double 0x3C91A62633145C07, %92
  %94 = fsub double %91, %93
  %95 = fmul double %84, 2.000000e+00
  %96 = fsub double 0x3FE921FB54442D18, %95
  %97 = fsub double %96, %94
  %98 = fadd double %97, 0x3FE921FB54442D18
  br label %99

99:                                               ; preds = %81, %74
  %100 = phi double [ %80, %74 ], [ %98, %81 ]
  %101 = icmp sgt i32 %4, 0
  %102 = fsub double -0.000000e+00, %100
  %103 = select i1 %101, double %100, double %102
  br label %104

104:                                              ; preds = %7, %99, %20, %12, %25
  %105 = phi double [ %48, %25 ], [ %15, %12 ], [ %0, %20 ], [ %103, %99 ], [ 0x7FF4000000000000, %7 ]
  ret double %105
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #5

; Function Attrs: nofree nounwind ssp uwtable
define hidden double @_ZN2v84base7ieee7545asinhEd(double) local_unnamed_addr #3 {
  %2 = bitcast double %0 to i64
  %3 = lshr i64 %2, 32
  %4 = trunc i64 %3 to i32
  %5 = and i32 %4, 2147483647
  %6 = icmp ugt i32 %5, 2146435071
  br i1 %6, label %7, label %9

7:                                                ; preds = %1
  %8 = fadd double %0, %0
  br label %46

9:                                                ; preds = %1
  %10 = icmp ult i32 %5, 1043333120
  br i1 %10, label %11, label %14

11:                                               ; preds = %9
  %12 = fadd double %0, 1.000000e+300
  %13 = fcmp ogt double %12, 1.000000e+00
  br i1 %13, label %46, label %32

14:                                               ; preds = %9
  %15 = icmp ugt i32 %5, 1102053376
  br i1 %15, label %16, label %20

16:                                               ; preds = %14
  %17 = tail call double @llvm.fabs.f64(double %0)
  %18 = tail call double @_ZN2v84base7ieee7543logEd(double %17)
  %19 = fadd double %18, 0x3FE62E42FEFA39EF
  br label %41

20:                                               ; preds = %14
  %21 = icmp ugt i32 %5, 1073741824
  br i1 %21, label %22, label %32

22:                                               ; preds = %20
  %23 = tail call double @llvm.fabs.f64(double %0)
  %24 = fmul double %23, 2.000000e+00
  %25 = fmul double %0, %0
  %26 = fadd double %25, 1.000000e+00
  %27 = tail call double @sqrt(double %26) #7
  %28 = fadd double %23, %27
  %29 = fdiv double 1.000000e+00, %28
  %30 = fadd double %24, %29
  %31 = tail call double @_ZN2v84base7ieee7543logEd(double %30)
  br label %41

32:                                               ; preds = %11, %20
  %33 = fmul double %0, %0
  %34 = tail call double @llvm.fabs.f64(double %0)
  %35 = fadd double %33, 1.000000e+00
  %36 = tail call double @sqrt(double %35) #7
  %37 = fadd double %36, 1.000000e+00
  %38 = fdiv double %33, %37
  %39 = fadd double %34, %38
  %40 = tail call double @_ZN2v84base7ieee7545log1pEd(double %39)
  br label %41

41:                                               ; preds = %22, %32, %16
  %42 = phi double [ %19, %16 ], [ %31, %22 ], [ %40, %32 ]
  %43 = icmp sgt i32 %4, 0
  %44 = fsub double -0.000000e+00, %42
  %45 = select i1 %43, double %42, double %44
  ret double %45

46:                                               ; preds = %11, %7
  %47 = phi double [ %8, %7 ], [ %0, %11 ]
  ret double %47
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden double @_ZN2v84base7ieee7544atanEd(double) local_unnamed_addr #3 {
  %2 = bitcast double %0 to i64
  %3 = lshr i64 %2, 32
  %4 = trunc i64 %3 to i32
  %5 = and i32 %4, 2147483647
  %6 = icmp ugt i32 %5, 1141899263
  br i1 %6, label %7, label %23

7:                                                ; preds = %1
  %8 = icmp ugt i32 %5, 2146435072
  br i1 %8, label %14, label %9

9:                                                ; preds = %7
  %10 = trunc i64 %2 to i32
  %11 = icmp eq i32 %5, 2146435072
  %12 = icmp ne i32 %10, 0
  %13 = and i1 %12, %11
  br i1 %13, label %14, label %16

14:                                               ; preds = %9, %7
  %15 = fadd double %0, %0
  br label %97

16:                                               ; preds = %9
  %17 = icmp sgt i32 %4, 0
  %18 = load volatile double, double* getelementptr inbounds ([4 x double], [4 x double]* @_ZZN2v84base7ieee7544atanEdE6atanlo, i64 0, i64 3), align 8
  br i1 %17, label %19, label %21

19:                                               ; preds = %16
  %20 = fadd double %18, 0x3FF921FB54442D18
  br label %97

21:                                               ; preds = %16
  %22 = fsub double 0xBFF921FB54442D18, %18
  br label %97

23:                                               ; preds = %1
  %24 = icmp ult i32 %5, 1071382528
  br i1 %24, label %25, label %30

25:                                               ; preds = %23
  %26 = icmp ult i32 %5, 1044381696
  %27 = fadd double %0, 1.000000e+300
  %28 = fcmp ogt double %27, 1.000000e+00
  %29 = and i1 %28, %26
  br i1 %29, label %97, label %53

30:                                               ; preds = %23
  %31 = tail call double @llvm.fabs.f64(double %0)
  %32 = icmp ult i32 %5, 1072889856
  br i1 %32, label %33, label %44

33:                                               ; preds = %30
  %34 = icmp ult i32 %5, 1072037888
  br i1 %34, label %35, label %40

35:                                               ; preds = %33
  %36 = fmul double %31, 2.000000e+00
  %37 = fadd double %36, -1.000000e+00
  %38 = fadd double %31, 2.000000e+00
  %39 = fdiv double %37, %38
  br label %53

40:                                               ; preds = %33
  %41 = fadd double %31, -1.000000e+00
  %42 = fadd double %31, 1.000000e+00
  %43 = fdiv double %41, %42
  br label %53

44:                                               ; preds = %30
  %45 = icmp ult i32 %5, 1073971200
  br i1 %45, label %46, label %51

46:                                               ; preds = %44
  %47 = fadd double %31, -1.500000e+00
  %48 = fmul double %31, 1.500000e+00
  %49 = fadd double %48, 1.000000e+00
  %50 = fdiv double %47, %49
  br label %53

51:                                               ; preds = %44
  %52 = fdiv double -1.000000e+00, %31
  br label %53

53:                                               ; preds = %25, %40, %35, %51, %46
  %54 = phi double [ %0, %25 ], [ %39, %35 ], [ %43, %40 ], [ %50, %46 ], [ %52, %51 ]
  %55 = phi i32 [ -1, %25 ], [ 0, %35 ], [ 1, %40 ], [ 2, %46 ], [ 3, %51 ]
  %56 = fmul double %54, %54
  %57 = fmul double %56, %56
  %58 = fmul double %57, 0x3F90AD3AE322DA11
  %59 = fadd double %58, 0x3FA97B4B24760DEB
  %60 = fmul double %57, %59
  %61 = fadd double %60, 0x3FB10D66A0D03D51
  %62 = fmul double %57, %61
  %63 = fadd double %62, 0x3FB745CDC54C206E
  %64 = fmul double %57, %63
  %65 = fadd double %64, 0x3FC24924920083FF
  %66 = fmul double %57, %65
  %67 = fadd double %66, 0x3FD555555555550D
  %68 = fmul double %56, %67
  %69 = fmul double %57, 0x3FA2B4442C6A6C2F
  %70 = fsub double 0xBFADDE2D52DEFD9A, %69
  %71 = fmul double %57, %70
  %72 = fadd double %71, 0xBFB3B0F2AF749A6D
  %73 = fmul double %57, %72
  %74 = fadd double %73, 0xBFBC71C6FE231671
  %75 = fmul double %57, %74
  %76 = fadd double %75, 0xBFC999999998EBC4
  %77 = fmul double %57, %76
  %78 = icmp slt i32 %55, 0
  br i1 %78, label %79, label %83

79:                                               ; preds = %53
  %80 = fadd double %77, %68
  %81 = fmul double %54, %80
  %82 = fsub double %54, %81
  br label %97

83:                                               ; preds = %53
  %84 = sext i32 %55 to i64
  %85 = getelementptr inbounds [4 x double], [4 x double]* @_ZZN2v84base7ieee7544atanEdE6atanhi, i64 0, i64 %84
  %86 = load double, double* %85, align 8
  %87 = fadd double %77, %68
  %88 = fmul double %54, %87
  %89 = getelementptr inbounds [4 x double], [4 x double]* @_ZZN2v84base7ieee7544atanEdE6atanlo, i64 0, i64 %84
  %90 = load double, double* %89, align 8
  %91 = fsub double %88, %90
  %92 = fsub double %91, %54
  %93 = fsub double %86, %92
  %94 = icmp slt i32 %4, 0
  %95 = fsub double -0.000000e+00, %93
  %96 = select i1 %94, double %95, double %93
  br label %97

97:                                               ; preds = %25, %14, %19, %21, %83, %79
  %98 = phi double [ %82, %79 ], [ %96, %83 ], [ %15, %14 ], [ %20, %19 ], [ %22, %21 ], [ %0, %25 ]
  ret double %98
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden double @_ZN2v84base7ieee7545atan2Edd(double, double) local_unnamed_addr #3 {
  %3 = bitcast double %0 to i64
  %4 = bitcast double %1 to i64
  %5 = lshr i64 %4, 32
  %6 = trunc i64 %5 to i32
  %7 = trunc i64 %4 to i32
  %8 = and i32 %6, 2147483647
  %9 = lshr i64 %3, 32
  %10 = trunc i64 %9 to i32
  %11 = trunc i64 %3 to i32
  %12 = and i32 %10, 2147483647
  %13 = icmp eq i32 %7, -2147483648
  %14 = sub nsw i32 0, %7
  %15 = select i1 %13, i32 -2147483648, i32 %14
  %16 = or i32 %15, %7
  %17 = lshr i32 %16, 31
  %18 = or i32 %17, %8
  %19 = icmp ugt i32 %18, 2146435072
  br i1 %19, label %28, label %20

20:                                               ; preds = %2
  %21 = icmp eq i32 %11, -2147483648
  %22 = sub nsw i32 0, %11
  %23 = select i1 %21, i32 -2147483648, i32 %22
  %24 = or i32 %23, %11
  %25 = lshr i32 %24, 31
  %26 = or i32 %25, %12
  %27 = icmp ugt i32 %26, 2146435072
  br i1 %27, label %28, label %30

28:                                               ; preds = %20, %2
  %29 = fadd double %0, %1
  br label %124

30:                                               ; preds = %20
  %31 = add i32 %6, -1072693248
  %32 = or i32 %31, %7
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %36

34:                                               ; preds = %30
  %35 = tail call double @_ZN2v84base7ieee7544atanEd(double %0)
  br label %124

36:                                               ; preds = %30
  %37 = lshr i64 %3, 63
  %38 = trunc i64 %37 to i32
  %39 = lshr i64 %4, 62
  %40 = trunc i64 %39 to i32
  %41 = and i32 %40, 2
  %42 = or i32 %41, %38
  %43 = or i32 %12, %11
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %53

45:                                               ; preds = %36
  switch i32 %42, label %52 [
    i32 0, label %124
    i32 1, label %124
    i32 2, label %46
    i32 3, label %49
  ]

46:                                               ; preds = %45
  %47 = load volatile double, double* @_ZZN2v84base7ieee7545atan2EddE4tiny, align 8
  %48 = fadd double %47, 0x400921FB54442D18
  br label %124

49:                                               ; preds = %45
  %50 = load volatile double, double* @_ZZN2v84base7ieee7545atan2EddE4tiny, align 8
  %51 = fsub double 0xC00921FB54442D18, %50
  br label %124

52:                                               ; preds = %45
  unreachable

53:                                               ; preds = %36
  %54 = or i32 %8, %7
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %62

56:                                               ; preds = %53
  %57 = icmp slt i32 %10, 0
  %58 = load volatile double, double* @_ZZN2v84base7ieee7545atan2EddE4tiny, align 8
  %59 = fsub double 0xBFF921FB54442D18, %58
  %60 = fadd double %58, 0x3FF921FB54442D18
  %61 = select i1 %57, double %59, double %60
  br label %124

62:                                               ; preds = %53
  %63 = icmp eq i32 %8, 2146435072
  %64 = icmp eq i32 %12, 2146435072
  br i1 %63, label %65, label %89

65:                                               ; preds = %62
  br i1 %64, label %66, label %79

66:                                               ; preds = %65
  switch i32 %42, label %87 [
    i32 0, label %67
    i32 1, label %70
    i32 2, label %73
    i32 3, label %76
  ]

67:                                               ; preds = %66
  %68 = load volatile double, double* @_ZZN2v84base7ieee7545atan2EddE4tiny, align 8
  %69 = fadd double %68, 0x3FE921FB54442D18
  br label %124

70:                                               ; preds = %66
  %71 = load volatile double, double* @_ZZN2v84base7ieee7545atan2EddE4tiny, align 8
  %72 = fsub double 0xBFE921FB54442D18, %71
  br label %124

73:                                               ; preds = %66
  %74 = load volatile double, double* @_ZZN2v84base7ieee7545atan2EddE4tiny, align 8
  %75 = fadd double %74, 0x4002D97C7F3321D2
  br label %124

76:                                               ; preds = %66
  %77 = load volatile double, double* @_ZZN2v84base7ieee7545atan2EddE4tiny, align 8
  %78 = fsub double 0xC002D97C7F3321D2, %77
  br label %124

79:                                               ; preds = %65
  switch i32 %42, label %88 [
    i32 0, label %124
    i32 1, label %80
    i32 2, label %81
    i32 3, label %84
  ]

80:                                               ; preds = %79
  br label %124

81:                                               ; preds = %79
  %82 = load volatile double, double* @_ZZN2v84base7ieee7545atan2EddE4tiny, align 8
  %83 = fadd double %82, 0x400921FB54442D18
  br label %124

84:                                               ; preds = %79
  %85 = load volatile double, double* @_ZZN2v84base7ieee7545atan2EddE4tiny, align 8
  %86 = fsub double 0xC00921FB54442D18, %85
  br label %124

87:                                               ; preds = %66
  unreachable

88:                                               ; preds = %79
  unreachable

89:                                               ; preds = %62
  br i1 %64, label %90, label %96

90:                                               ; preds = %89
  %91 = icmp slt i32 %10, 0
  %92 = load volatile double, double* @_ZZN2v84base7ieee7545atan2EddE4tiny, align 8
  %93 = fsub double 0xBFF921FB54442D18, %92
  %94 = fadd double %92, 0x3FF921FB54442D18
  %95 = select i1 %91, double %93, double %94
  br label %124

96:                                               ; preds = %89
  %97 = sub nsw i32 %12, %8
  %98 = icmp sgt i32 %97, 63963135
  br i1 %98, label %99, label %103

99:                                               ; preds = %96
  %100 = load volatile double, double* @_ZZN2v84base7ieee7545atan2EddE5pi_lo, align 8
  %101 = fmul double %100, 5.000000e-01
  %102 = fadd double %101, 0x3FF921FB54442D18
  br label %111

103:                                              ; preds = %96
  %104 = icmp slt i32 %6, 0
  %105 = icmp slt i32 %97, -62914560
  %106 = and i1 %104, %105
  br i1 %106, label %111, label %107

107:                                              ; preds = %103
  %108 = fdiv double %0, %1
  %109 = tail call double @llvm.fabs.f64(double %108)
  %110 = tail call double @_ZN2v84base7ieee7544atanEd(double %109)
  br label %111

111:                                              ; preds = %103, %107, %99
  %112 = phi i32 [ %38, %99 ], [ %42, %107 ], [ %42, %103 ]
  %113 = phi double [ %102, %99 ], [ %110, %107 ], [ 0.000000e+00, %103 ]
  switch i32 %112, label %120 [
    i32 0, label %124
    i32 1, label %114
    i32 2, label %116
  ]

114:                                              ; preds = %111
  %115 = fsub double -0.000000e+00, %113
  br label %124

116:                                              ; preds = %111
  %117 = load volatile double, double* @_ZZN2v84base7ieee7545atan2EddE5pi_lo, align 8
  %118 = fsub double %117, %113
  %119 = fadd double %118, 0x400921FB54442D18
  br label %124

120:                                              ; preds = %111
  %121 = load volatile double, double* @_ZZN2v84base7ieee7545atan2EddE5pi_lo, align 8
  %122 = fsub double %113, %121
  %123 = fadd double %122, 0xC00921FB54442D18
  br label %124

124:                                              ; preds = %45, %45, %111, %79, %120, %116, %114, %90, %84, %81, %80, %76, %73, %70, %67, %56, %49, %46, %34, %28
  %125 = phi double [ %29, %28 ], [ %35, %34 ], [ %61, %56 ], [ %95, %90 ], [ %123, %120 ], [ %119, %116 ], [ %115, %114 ], [ %78, %76 ], [ %75, %73 ], [ %72, %70 ], [ %69, %67 ], [ %86, %84 ], [ %83, %81 ], [ -0.000000e+00, %80 ], [ %51, %49 ], [ %48, %46 ], [ 0.000000e+00, %79 ], [ %113, %111 ], [ %0, %45 ], [ %0, %45 ]
  ret double %125
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN2v84base7ieee7543cosEd(double) local_unnamed_addr #0 {
  %2 = alloca [2 x double], align 16
  %3 = bitcast double %0 to i64
  %4 = bitcast [2 x double]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #7
  %5 = lshr i64 %3, 32
  %6 = trunc i64 %5 to i32
  %7 = and i32 %6, 2147483647
  %8 = icmp ult i32 %7, 1072243196
  br i1 %8, label %9, label %52

9:                                                ; preds = %1
  %10 = icmp ult i32 %7, 1044381696
  %11 = fptosi double %0 to i32
  %12 = icmp eq i32 %11, 0
  %13 = and i1 %12, %10
  br i1 %13, label %224, label %14

14:                                               ; preds = %9
  %15 = fmul double %0, %0
  %16 = fmul double %15, 0x3DA8FAE9BE8838D4
  %17 = fsub double 0x3E21EE9EBDB4B1C4, %16
  %18 = fmul double %15, %17
  %19 = fadd double %18, 0xBE927E4F809C52AD
  %20 = fmul double %15, %19
  %21 = fadd double %20, 0x3EFA01A019CB1590
  %22 = fmul double %15, %21
  %23 = fadd double %22, 0xBF56C16C16C15177
  %24 = fmul double %15, %23
  %25 = fadd double %24, 0x3FA555555555554C
  %26 = fmul double %15, %25
  %27 = icmp ult i32 %7, 1070805811
  br i1 %27, label %28, label %35

28:                                               ; preds = %14
  %29 = fmul double %15, 5.000000e-01
  %30 = fmul double %15, %26
  %31 = fmul double %0, 0.000000e+00
  %32 = fsub double %30, %31
  %33 = fsub double %32, %29
  %34 = fadd double %33, 1.000000e+00
  br label %224

35:                                               ; preds = %14
  %36 = icmp ugt i32 %7, 1072234496
  br i1 %36, label %42, label %37

37:                                               ; preds = %35
  %38 = add nsw i32 %7, -2097152
  %39 = zext i32 %38 to i64
  %40 = shl nuw i64 %39, 32
  %41 = bitcast i64 %40 to double
  br label %42

42:                                               ; preds = %37, %35
  %43 = phi double [ %41, %37 ], [ 2.812500e-01, %35 ]
  %44 = fmul double %15, 5.000000e-01
  %45 = fsub double %44, %43
  %46 = fsub double 1.000000e+00, %43
  %47 = fmul double %15, %26
  %48 = fmul double %0, 0.000000e+00
  %49 = fsub double %47, %48
  %50 = fsub double %45, %49
  %51 = fsub double %46, %50
  br label %224

52:                                               ; preds = %1
  %53 = icmp ugt i32 %7, 2146435071
  br i1 %53, label %54, label %56

54:                                               ; preds = %52
  %55 = fsub double %0, %0
  br label %224

56:                                               ; preds = %52
  %57 = getelementptr inbounds [2 x double], [2 x double]* %2, i64 0, i64 0
  %58 = call fastcc i32 @_ZN2v84base7ieee75412_GLOBAL__N_118__ieee754_rem_pio2EdPd(double %0, double* nonnull %57)
  %59 = and i32 %58, 3
  switch i32 %59, label %195 [
    i32 0, label %60
    i32 1, label %110
    i32 2, label %142
  ]

60:                                               ; preds = %56
  %61 = load double, double* %57, align 16
  %62 = getelementptr inbounds [2 x double], [2 x double]* %2, i64 0, i64 1
  %63 = load double, double* %62, align 8
  %64 = bitcast double %61 to i64
  %65 = lshr i64 %64, 32
  %66 = trunc i64 %65 to i32
  %67 = and i32 %66, 2147483647
  %68 = icmp ult i32 %67, 1044381696
  %69 = fptosi double %61 to i32
  %70 = icmp eq i32 %69, 0
  %71 = and i1 %70, %68
  br i1 %71, label %224, label %72

72:                                               ; preds = %60
  %73 = fmul double %61, %61
  %74 = fmul double %73, 0x3DA8FAE9BE8838D4
  %75 = fsub double 0x3E21EE9EBDB4B1C4, %74
  %76 = fmul double %73, %75
  %77 = fadd double %76, 0xBE927E4F809C52AD
  %78 = fmul double %73, %77
  %79 = fadd double %78, 0x3EFA01A019CB1590
  %80 = fmul double %73, %79
  %81 = fadd double %80, 0xBF56C16C16C15177
  %82 = fmul double %73, %81
  %83 = fadd double %82, 0x3FA555555555554C
  %84 = fmul double %73, %83
  %85 = icmp ult i32 %67, 1070805811
  br i1 %85, label %86, label %93

86:                                               ; preds = %72
  %87 = fmul double %73, 5.000000e-01
  %88 = fmul double %73, %84
  %89 = fmul double %61, %63
  %90 = fsub double %88, %89
  %91 = fsub double %90, %87
  %92 = fadd double %91, 1.000000e+00
  br label %224

93:                                               ; preds = %72
  %94 = icmp ugt i32 %67, 1072234496
  br i1 %94, label %100, label %95

95:                                               ; preds = %93
  %96 = add nsw i32 %67, -2097152
  %97 = zext i32 %96 to i64
  %98 = shl nuw i64 %97, 32
  %99 = bitcast i64 %98 to double
  br label %100

100:                                              ; preds = %95, %93
  %101 = phi double [ %99, %95 ], [ 2.812500e-01, %93 ]
  %102 = fmul double %73, 5.000000e-01
  %103 = fsub double %102, %101
  %104 = fsub double 1.000000e+00, %101
  %105 = fmul double %73, %84
  %106 = fmul double %61, %63
  %107 = fsub double %105, %106
  %108 = fsub double %103, %107
  %109 = fsub double %104, %108
  br label %224

110:                                              ; preds = %56
  %111 = load double, double* %57, align 16
  %112 = getelementptr inbounds [2 x double], [2 x double]* %2, i64 0, i64 1
  %113 = load double, double* %112, align 8
  %114 = bitcast double %111 to i64
  %115 = and i64 %114, 9205357638345293824
  %116 = icmp ult i64 %115, 4485585228861014016
  %117 = fptosi double %111 to i32
  %118 = icmp eq i32 %117, 0
  %119 = and i1 %118, %116
  br i1 %119, label %139, label %120

120:                                              ; preds = %110
  %121 = fmul double %111, %111
  %122 = fmul double %111, %121
  %123 = fmul double %121, 0x3DE5D93A5ACFD57C
  %124 = fadd double %123, 0xBE5AE5E68A2B9CEB
  %125 = fmul double %121, %124
  %126 = fadd double %125, 0x3EC71DE357B1FE7D
  %127 = fmul double %121, %126
  %128 = fadd double %127, 0xBF2A01A019C161D5
  %129 = fmul double %121, %128
  %130 = fadd double %129, 0x3F8111111110F8A6
  %131 = fmul double %113, 5.000000e-01
  %132 = fmul double %122, %130
  %133 = fsub double %131, %132
  %134 = fmul double %121, %133
  %135 = fsub double %134, %113
  %136 = fmul double %122, 0x3FC5555555555549
  %137 = fadd double %136, %135
  %138 = fsub double %111, %137
  br label %139

139:                                              ; preds = %110, %120
  %140 = phi double [ %138, %120 ], [ %111, %110 ]
  %141 = fsub double -0.000000e+00, %140
  br label %224

142:                                              ; preds = %56
  %143 = load double, double* %57, align 16
  %144 = getelementptr inbounds [2 x double], [2 x double]* %2, i64 0, i64 1
  %145 = load double, double* %144, align 8
  %146 = bitcast double %143 to i64
  %147 = lshr i64 %146, 32
  %148 = trunc i64 %147 to i32
  %149 = and i32 %148, 2147483647
  %150 = icmp ult i32 %149, 1044381696
  %151 = fptosi double %143 to i32
  %152 = icmp eq i32 %151, 0
  %153 = and i1 %152, %150
  br i1 %153, label %192, label %154

154:                                              ; preds = %142
  %155 = fmul double %143, %143
  %156 = fmul double %155, 0x3DA8FAE9BE8838D4
  %157 = fsub double 0x3E21EE9EBDB4B1C4, %156
  %158 = fmul double %155, %157
  %159 = fadd double %158, 0xBE927E4F809C52AD
  %160 = fmul double %155, %159
  %161 = fadd double %160, 0x3EFA01A019CB1590
  %162 = fmul double %155, %161
  %163 = fadd double %162, 0xBF56C16C16C15177
  %164 = fmul double %155, %163
  %165 = fadd double %164, 0x3FA555555555554C
  %166 = fmul double %155, %165
  %167 = icmp ult i32 %149, 1070805811
  br i1 %167, label %168, label %175

168:                                              ; preds = %154
  %169 = fmul double %155, 5.000000e-01
  %170 = fmul double %155, %166
  %171 = fmul double %143, %145
  %172 = fsub double %170, %171
  %173 = fsub double %172, %169
  %174 = fadd double %173, 1.000000e+00
  br label %192

175:                                              ; preds = %154
  %176 = icmp ugt i32 %149, 1072234496
  br i1 %176, label %182, label %177

177:                                              ; preds = %175
  %178 = add nsw i32 %149, -2097152
  %179 = zext i32 %178 to i64
  %180 = shl nuw i64 %179, 32
  %181 = bitcast i64 %180 to double
  br label %182

182:                                              ; preds = %177, %175
  %183 = phi double [ %181, %177 ], [ 2.812500e-01, %175 ]
  %184 = fmul double %155, 5.000000e-01
  %185 = fsub double %184, %183
  %186 = fsub double 1.000000e+00, %183
  %187 = fmul double %155, %166
  %188 = fmul double %143, %145
  %189 = fsub double %187, %188
  %190 = fsub double %185, %189
  %191 = fsub double %186, %190
  br label %192

192:                                              ; preds = %142, %168, %182
  %193 = phi double [ %174, %168 ], [ %191, %182 ], [ 1.000000e+00, %142 ]
  %194 = fsub double -0.000000e+00, %193
  br label %224

195:                                              ; preds = %56
  %196 = load double, double* %57, align 16
  %197 = getelementptr inbounds [2 x double], [2 x double]* %2, i64 0, i64 1
  %198 = load double, double* %197, align 8
  %199 = bitcast double %196 to i64
  %200 = and i64 %199, 9205357638345293824
  %201 = icmp ult i64 %200, 4485585228861014016
  %202 = fptosi double %196 to i32
  %203 = icmp eq i32 %202, 0
  %204 = and i1 %203, %201
  br i1 %204, label %224, label %205

205:                                              ; preds = %195
  %206 = fmul double %196, %196
  %207 = fmul double %196, %206
  %208 = fmul double %206, 0x3DE5D93A5ACFD57C
  %209 = fadd double %208, 0xBE5AE5E68A2B9CEB
  %210 = fmul double %206, %209
  %211 = fadd double %210, 0x3EC71DE357B1FE7D
  %212 = fmul double %206, %211
  %213 = fadd double %212, 0xBF2A01A019C161D5
  %214 = fmul double %206, %213
  %215 = fadd double %214, 0x3F8111111110F8A6
  %216 = fmul double %198, 5.000000e-01
  %217 = fmul double %207, %215
  %218 = fsub double %216, %217
  %219 = fmul double %206, %218
  %220 = fsub double %219, %198
  %221 = fmul double %207, 0x3FC5555555555549
  %222 = fadd double %221, %220
  %223 = fsub double %196, %222
  br label %224

224:                                              ; preds = %205, %195, %100, %86, %60, %42, %28, %9, %192, %139, %54
  %225 = phi double [ %55, %54 ], [ %194, %192 ], [ %141, %139 ], [ %34, %28 ], [ %51, %42 ], [ 1.000000e+00, %9 ], [ %92, %86 ], [ %109, %100 ], [ 1.000000e+00, %60 ], [ %223, %205 ], [ %196, %195 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #7
  ret double %225
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZN2v84base7ieee75412_GLOBAL__N_118__ieee754_rem_pio2EdPd(double, double*) unnamed_addr #0 {
  %3 = alloca [20 x i32], align 16
  %4 = alloca [20 x double], align 16
  %5 = alloca [20 x double], align 16
  %6 = alloca [20 x double], align 16
  %7 = alloca [3 x double], align 16
  %8 = bitcast double %0 to i64
  %9 = bitcast [3 x double]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #7
  %10 = lshr i64 %8, 32
  %11 = trunc i64 %10 to i32
  %12 = and i32 %11, 2147483647
  %13 = icmp ult i32 %12, 1072243196
  br i1 %13, label %14, label %16

14:                                               ; preds = %2
  store double %0, double* %1, align 8
  %15 = getelementptr inbounds double, double* %1, i64 1
  store double 0.000000e+00, double* %15, align 8
  br label %1109

16:                                               ; preds = %2
  %17 = icmp ult i32 %12, 1073928572
  br i1 %17, label %18, label %48

18:                                               ; preds = %16
  %19 = icmp sgt i32 %11, 0
  br i1 %19, label %20, label %34

20:                                               ; preds = %18
  %21 = fadd double %0, 0xBFF921FB54400000
  %22 = icmp eq i32 %12, 1073291771
  br i1 %22, label %28, label %23

23:                                               ; preds = %20
  %24 = fadd double %21, 0xBDD0B4611A626331
  store double %24, double* %1, align 8
  %25 = fsub double %21, %24
  %26 = fadd double %25, 0xBDD0B4611A626331
  %27 = getelementptr inbounds double, double* %1, i64 1
  store double %26, double* %27, align 8
  br label %1109

28:                                               ; preds = %20
  %29 = fadd double %21, 0xBDD0B4611A600000
  %30 = fadd double %29, 0xBBA3198A2E037073
  store double %30, double* %1, align 8
  %31 = fsub double %29, %30
  %32 = fadd double %31, 0xBBA3198A2E037073
  %33 = getelementptr inbounds double, double* %1, i64 1
  store double %32, double* %33, align 8
  br label %1109

34:                                               ; preds = %18
  %35 = fadd double %0, 0x3FF921FB54400000
  %36 = icmp eq i32 %12, 1073291771
  br i1 %36, label %42, label %37

37:                                               ; preds = %34
  %38 = fadd double %35, 0x3DD0B4611A626331
  store double %38, double* %1, align 8
  %39 = fsub double %35, %38
  %40 = fadd double %39, 0x3DD0B4611A626331
  %41 = getelementptr inbounds double, double* %1, i64 1
  store double %40, double* %41, align 8
  br label %1109

42:                                               ; preds = %34
  %43 = fadd double %35, 0x3DD0B4611A600000
  %44 = fadd double %43, 0x3BA3198A2E037073
  store double %44, double* %1, align 8
  %45 = fsub double %43, %44
  %46 = fadd double %45, 0x3BA3198A2E037073
  %47 = getelementptr inbounds double, double* %1, i64 1
  store double %46, double* %47, align 8
  br label %1109

48:                                               ; preds = %16
  %49 = icmp ult i32 %12, 1094263292
  br i1 %49, label %50, label %113

50:                                               ; preds = %48
  %51 = tail call double @llvm.fabs.f64(double %0)
  %52 = fmul double %51, 0x3FE45F306DC9C883
  %53 = fadd double %52, 5.000000e-01
  %54 = fptosi double %53 to i32
  %55 = sitofp i32 %54 to double
  %56 = fmul double %55, 0x3FF921FB54400000
  %57 = fsub double %51, %56
  %58 = fmul double %55, 0x3DD0B4611A626331
  %59 = icmp slt i32 %54, 32
  br i1 %59, label %60, label %68

60:                                               ; preds = %50
  %61 = add nsw i32 %54, -1
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds [32 x i32], [32 x i32]* @_ZZN2v84base7ieee75412_GLOBAL__N_118__ieee754_rem_pio2EdPdE8npio2_hw, i64 0, i64 %62
  %64 = load i32, i32* %63, align 4
  %65 = icmp eq i32 %12, %64
  br i1 %65, label %68, label %66

66:                                               ; preds = %60
  %67 = fsub double %57, %58
  store double %67, double* %1, align 8
  br label %99

68:                                               ; preds = %60, %50
  %69 = lshr i32 %12, 20
  %70 = fsub double %57, %58
  store double %70, double* %1, align 8
  %71 = bitcast double %70 to i64
  %72 = lshr i64 %71, 52
  %73 = trunc i64 %72 to i32
  %74 = and i32 %73, 2047
  %75 = sub nsw i32 %69, %74
  %76 = icmp sgt i32 %75, 16
  br i1 %76, label %77, label %99

77:                                               ; preds = %68
  %78 = fmul double %55, 0x3DD0B4611A600000
  %79 = fsub double %57, %78
  %80 = fmul double %55, 0x3BA3198A2E037073
  %81 = fsub double %57, %79
  %82 = fsub double %81, %78
  %83 = fsub double %80, %82
  %84 = fsub double %79, %83
  store double %84, double* %1, align 8
  %85 = bitcast double %84 to i64
  %86 = lshr i64 %85, 52
  %87 = trunc i64 %86 to i32
  %88 = and i32 %87, 2047
  %89 = sub nsw i32 %69, %88
  %90 = icmp sgt i32 %89, 49
  br i1 %90, label %91, label %99

91:                                               ; preds = %77
  %92 = fmul double %55, 0x3BA3198A2E000000
  %93 = fsub double %79, %92
  %94 = fmul double %55, 0x397B839A252049C1
  %95 = fsub double %79, %93
  %96 = fsub double %95, %92
  %97 = fsub double %94, %96
  %98 = fsub double %93, %97
  store double %98, double* %1, align 8
  br label %99

99:                                               ; preds = %68, %91, %77, %66
  %100 = phi double [ %67, %66 ], [ %98, %91 ], [ %84, %77 ], [ %70, %68 ]
  %101 = phi double [ %57, %66 ], [ %93, %91 ], [ %79, %77 ], [ %57, %68 ]
  %102 = phi double [ %58, %66 ], [ %97, %91 ], [ %83, %77 ], [ %58, %68 ]
  %103 = fsub double %101, %100
  %104 = fsub double %103, %102
  %105 = getelementptr inbounds double, double* %1, i64 1
  store double %104, double* %105, align 8
  %106 = icmp slt i32 %11, 0
  br i1 %106, label %107, label %1109

107:                                              ; preds = %99
  %108 = insertelement <2 x double> undef, double %100, i32 0
  %109 = insertelement <2 x double> %108, double %104, i32 1
  %110 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %109
  %111 = bitcast double* %1 to <2 x double>*
  store <2 x double> %110, <2 x double>* %111, align 8
  %112 = sub nsw i32 0, %54
  br label %1109

113:                                              ; preds = %48
  %114 = icmp ugt i32 %12, 2146435071
  br i1 %114, label %115, label %118

115:                                              ; preds = %113
  %116 = fsub double %0, %0
  %117 = getelementptr inbounds double, double* %1, i64 1
  store double %116, double* %117, align 8
  store double %116, double* %1, align 8
  br label %1109

118:                                              ; preds = %113
  %119 = and i64 %8, 4294967295
  %120 = lshr i32 %12, 20
  %121 = add nsw i32 %120, -1046
  %122 = shl i32 %121, 20
  %123 = sub nsw i32 %12, %122
  %124 = zext i32 %123 to i64
  %125 = shl nuw i64 %124, 32
  %126 = or i64 %125, %119
  %127 = bitcast i64 %126 to double
  %128 = fptosi double %127 to i32
  %129 = sitofp i32 %128 to double
  %130 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 0
  store double %129, double* %130, align 16
  %131 = fsub double %127, %129
  %132 = fmul double %131, 0x4170000000000000
  %133 = fptosi double %132 to i32
  %134 = sitofp i32 %133 to double
  %135 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 1
  store double %134, double* %135, align 8
  %136 = fsub double %132, %134
  %137 = fmul double %136, 0x4170000000000000
  %138 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 2
  store double %137, double* %138, align 16
  br label %139

139:                                              ; preds = %139, %118
  %140 = phi i64 [ 3, %118 ], [ %141, %139 ]
  %141 = add nsw i64 %140, -1
  %142 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 %141
  %143 = load double, double* %142, align 8
  %144 = fcmp oeq double %143, 0.000000e+00
  br i1 %144, label %139, label %145

145:                                              ; preds = %139
  %146 = trunc i64 %140 to i32
  %147 = bitcast [20 x double]* %6 to i8*
  %148 = bitcast [20 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %148) #7
  %149 = bitcast [20 x double]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %149) #7
  %150 = bitcast [20 x double]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %150) #7
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %147) #7
  %151 = add nsw i32 %120, -1049
  %152 = sdiv i32 %151, 24
  %153 = icmp sgt i32 %152, 0
  %154 = select i1 %153, i32 %152, i32 0
  %155 = mul nsw i32 %154, -24
  %156 = add nsw i32 %120, -1070
  %157 = add nsw i32 %156, %155
  %158 = icmp slt i32 %146, -3
  br i1 %158, label %184, label %159

159:                                              ; preds = %145
  %160 = add nuw nsw i32 %154, 1
  %161 = sub nsw i32 %160, %146
  %162 = sext i32 %161 to i64
  %163 = add i64 %140, 4
  %164 = and i64 %163, 4294967295
  %165 = and i64 %163, 1
  %166 = icmp eq i64 %164, 1
  br i1 %166, label %169, label %167

167:                                              ; preds = %159
  %168 = sub nsw i64 %164, %165
  br label %262

169:                                              ; preds = %1126, %159
  %170 = phi i64 [ 0, %159 ], [ %1129, %1126 ]
  %171 = phi i64 [ %162, %159 ], [ %1130, %1126 ]
  %172 = icmp eq i64 %165, 0
  br i1 %172, label %182, label %173

173:                                              ; preds = %169
  %174 = icmp slt i64 %171, 0
  br i1 %174, label %179, label %175

175:                                              ; preds = %173
  %176 = getelementptr inbounds [66 x i32], [66 x i32]* @_ZZN2v84base7ieee75412_GLOBAL__N_118__ieee754_rem_pio2EdPdE11two_over_pi, i64 0, i64 %171
  %177 = load i32, i32* %176, align 4
  %178 = sitofp i32 %177 to double
  br label %179

179:                                              ; preds = %175, %173
  %180 = phi double [ %178, %175 ], [ 0.000000e+00, %173 ]
  %181 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %170
  store double %180, double* %181, align 8
  br label %182

182:                                              ; preds = %169, %179
  %183 = icmp sgt i32 %146, 0
  br i1 %183, label %186, label %184

184:                                              ; preds = %182, %145
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %147, i8 0, i64 40, i1 false) #7
  %185 = and i64 %140, 4294967295
  br label %277

186:                                              ; preds = %182
  %187 = and i64 %140, 4294967295
  %188 = shl i64 %140, 32
  %189 = add i64 %188, -4294967296
  %190 = ashr exact i64 %189, 32
  %191 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %190
  %192 = load double, double* %191, align 8
  %193 = fmul double %192, %129
  %194 = fadd double %193, 0.000000e+00
  %195 = icmp eq i64 %187, 1
  br i1 %195, label %246, label %196

196:                                              ; preds = %186
  %197 = add nsw i64 %187, -1
  %198 = and i64 %197, 1
  %199 = icmp eq i64 %187, 2
  br i1 %199, label %230, label %200

200:                                              ; preds = %196
  %201 = sub nsw i64 %197, %198
  br label %202

202:                                              ; preds = %202, %200
  %203 = phi i64 [ 1, %200 ], [ %227, %202 ]
  %204 = phi double [ %194, %200 ], [ %226, %202 ]
  %205 = phi i64 [ %201, %200 ], [ %228, %202 ]
  %206 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 %203
  %207 = load double, double* %206, align 8
  %208 = xor i64 %203, 4294967295
  %209 = add i64 %140, %208
  %210 = shl i64 %209, 32
  %211 = ashr exact i64 %210, 32
  %212 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %211
  %213 = load double, double* %212, align 8
  %214 = fmul double %207, %213
  %215 = fadd double %204, %214
  %216 = add nuw nsw i64 %203, 1
  %217 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 %216
  %218 = load double, double* %217, align 8
  %219 = xor i64 %216, 4294967295
  %220 = add i64 %140, %219
  %221 = shl i64 %220, 32
  %222 = ashr exact i64 %221, 32
  %223 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %222
  %224 = load double, double* %223, align 8
  %225 = fmul double %218, %224
  %226 = fadd double %215, %225
  %227 = add nuw nsw i64 %203, 2
  %228 = add i64 %205, -2
  %229 = icmp eq i64 %228, 0
  br i1 %229, label %230, label %202

230:                                              ; preds = %202, %196
  %231 = phi double [ undef, %196 ], [ %226, %202 ]
  %232 = phi i64 [ 1, %196 ], [ %227, %202 ]
  %233 = phi double [ %194, %196 ], [ %226, %202 ]
  %234 = icmp eq i64 %198, 0
  br i1 %234, label %246, label %235

235:                                              ; preds = %230
  %236 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 %232
  %237 = load double, double* %236, align 8
  %238 = xor i64 %232, 4294967295
  %239 = add i64 %140, %238
  %240 = shl i64 %239, 32
  %241 = ashr exact i64 %240, 32
  %242 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %241
  %243 = load double, double* %242, align 8
  %244 = fmul double %237, %243
  %245 = fadd double %233, %244
  br label %246

246:                                              ; preds = %235, %230, %186
  %247 = phi double [ %194, %186 ], [ %231, %230 ], [ %245, %235 ]
  %248 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 0
  store double %247, double* %248, align 16
  %249 = shl i64 %140, 32
  %250 = ashr exact i64 %249, 32
  %251 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %250
  %252 = load double, double* %251, align 8
  %253 = fmul double %252, %129
  %254 = fadd double %253, 0.000000e+00
  %255 = icmp eq i64 %187, 1
  br i1 %255, label %902, label %256

256:                                              ; preds = %246
  %257 = add nsw i64 %187, -1
  %258 = and i64 %257, 1
  %259 = icmp eq i64 %187, 2
  br i1 %259, label %887, label %260

260:                                              ; preds = %256
  %261 = sub nsw i64 %257, %258
  br label %861

262:                                              ; preds = %1126, %167
  %263 = phi i64 [ 0, %167 ], [ %1129, %1126 ]
  %264 = phi i64 [ %162, %167 ], [ %1130, %1126 ]
  %265 = phi i64 [ %168, %167 ], [ %1131, %1126 ]
  %266 = icmp slt i64 %264, 0
  br i1 %266, label %271, label %267

267:                                              ; preds = %262
  %268 = getelementptr inbounds [66 x i32], [66 x i32]* @_ZZN2v84base7ieee75412_GLOBAL__N_118__ieee754_rem_pio2EdPdE11two_over_pi, i64 0, i64 %264
  %269 = load i32, i32* %268, align 4
  %270 = sitofp i32 %269 to double
  br label %271

271:                                              ; preds = %267, %262
  %272 = phi double [ %270, %267 ], [ 0.000000e+00, %262 ]
  %273 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %263
  store double %272, double* %273, align 16
  %274 = or i64 %263, 1
  %275 = add nsw i64 %264, 1
  %276 = icmp slt i64 %275, 0
  br i1 %276, label %1126, label %1122

277:                                              ; preds = %1076, %184
  %278 = phi i64 [ %187, %1076 ], [ %185, %184 ]
  %279 = phi i1 [ true, %1076 ], [ false, %184 ]
  %280 = phi double [ %1077, %1076 ], [ 0.000000e+00, %184 ]
  %281 = icmp sgt i32 %157, 0
  %282 = icmp eq i32 %157, 0
  %283 = sub nsw i32 24, %157
  %284 = sub nsw i32 23, %157
  %285 = zext i32 %154 to i64
  %286 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 1
  %287 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 3
  %288 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 2
  %289 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 1
  %290 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 0
  %291 = and i64 %278, 1
  %292 = icmp eq i64 %278, 1
  %293 = sub nsw i64 %278, %291
  %294 = icmp eq i64 %291, 0
  br label %298

295:                                              ; preds = %635, %629
  %296 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 %563
  %297 = load double, double* %296, align 8
  br label %298

298:                                              ; preds = %295, %277
  %299 = phi double [ %297, %295 ], [ %280, %277 ]
  %300 = phi i32 [ %562, %295 ], [ 4, %277 ]
  %301 = zext i32 %300 to i64
  %302 = sext i32 %300 to i64
  %303 = add nsw i64 %301, -1
  %304 = and i64 %301, 1
  %305 = icmp eq i64 %303, 0
  br i1 %305, label %339, label %306

306:                                              ; preds = %298
  %307 = sub nsw i64 %301, %304
  br label %308

308:                                              ; preds = %308, %306
  %309 = phi i64 [ 0, %306 ], [ %336, %308 ]
  %310 = phi i64 [ %302, %306 ], [ %332, %308 ]
  %311 = phi double [ %299, %306 ], [ %335, %308 ]
  %312 = phi i64 [ %307, %306 ], [ %337, %308 ]
  %313 = fmul double %311, 0x3E70000000000000
  %314 = fptosi double %313 to i32
  %315 = sitofp i32 %314 to double
  %316 = fmul double %315, 0x4170000000000000
  %317 = fsub double %311, %316
  %318 = fptosi double %317 to i32
  %319 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 %309
  store i32 %318, i32* %319, align 8
  %320 = add nsw i64 %310, -1
  %321 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 %320
  %322 = load double, double* %321, align 8
  %323 = fadd double %322, %315
  %324 = or i64 %309, 1
  %325 = fmul double %323, 0x3E70000000000000
  %326 = fptosi double %325 to i32
  %327 = sitofp i32 %326 to double
  %328 = fmul double %327, 0x4170000000000000
  %329 = fsub double %323, %328
  %330 = fptosi double %329 to i32
  %331 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 %324
  store i32 %330, i32* %331, align 4
  %332 = add nsw i64 %310, -2
  %333 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 %332
  %334 = load double, double* %333, align 8
  %335 = fadd double %334, %327
  %336 = add nuw nsw i64 %309, 2
  %337 = add i64 %312, -2
  %338 = icmp eq i64 %337, 0
  br i1 %338, label %339, label %308

339:                                              ; preds = %308, %298
  %340 = phi double [ undef, %298 ], [ %335, %308 ]
  %341 = phi i64 [ 0, %298 ], [ %336, %308 ]
  %342 = phi i64 [ %302, %298 ], [ %332, %308 ]
  %343 = phi double [ %299, %298 ], [ %335, %308 ]
  %344 = icmp eq i64 %304, 0
  br i1 %344, label %357, label %345

345:                                              ; preds = %339
  %346 = fmul double %343, 0x3E70000000000000
  %347 = fptosi double %346 to i32
  %348 = sitofp i32 %347 to double
  %349 = fmul double %348, 0x4170000000000000
  %350 = fsub double %343, %349
  %351 = fptosi double %350 to i32
  %352 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 %341
  store i32 %351, i32* %352, align 4
  %353 = add nsw i64 %342, -1
  %354 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 %353
  %355 = load double, double* %354, align 8
  %356 = fadd double %355, %348
  br label %357

357:                                              ; preds = %339, %345
  %358 = phi double [ %340, %339 ], [ %356, %345 ]
  %359 = tail call double @scalbn(double %358, i32 %157) #7
  %360 = fmul double %359, 1.250000e-01
  %361 = tail call double @llvm.floor.f64(double %360) #7
  %362 = fmul double %361, 8.000000e+00
  %363 = fsub double %359, %362
  %364 = fptosi double %363 to i32
  %365 = sitofp i32 %364 to double
  %366 = fsub double %363, %365
  br i1 %281, label %367, label %377

367:                                              ; preds = %357
  %368 = add nsw i32 %300, -1
  %369 = sext i32 %368 to i64
  %370 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 %369
  %371 = load i32, i32* %370, align 4
  %372 = ashr i32 %371, %283
  %373 = add nsw i32 %372, %364
  %374 = shl i32 %372, %283
  %375 = sub nsw i32 %371, %374
  store i32 %375, i32* %370, align 4
  %376 = ashr i32 %375, %284
  br label %386

377:                                              ; preds = %357
  br i1 %282, label %378, label %384

378:                                              ; preds = %377
  %379 = add nsw i32 %300, -1
  %380 = sext i32 %379 to i64
  %381 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 %380
  %382 = load i32, i32* %381, align 4
  %383 = ashr i32 %382, 23
  br label %386

384:                                              ; preds = %377
  %385 = fcmp ult double %366, 5.000000e-01
  br i1 %385, label %455, label %390

386:                                              ; preds = %378, %367
  %387 = phi i32 [ %373, %367 ], [ %364, %378 ]
  %388 = phi i32 [ %376, %367 ], [ %383, %378 ]
  %389 = icmp sgt i32 %388, 0
  br i1 %389, label %390, label %455

390:                                              ; preds = %386, %384
  %391 = phi i32 [ %388, %386 ], [ 2, %384 ]
  %392 = phi i32 [ %387, %386 ], [ %364, %384 ]
  %393 = and i64 %301, 1
  %394 = icmp eq i64 %303, 0
  br i1 %394, label %416, label %395

395:                                              ; preds = %390
  %396 = sub nsw i64 %301, %393
  br label %397

397:                                              ; preds = %1117, %395
  %398 = phi i64 [ 0, %395 ], [ %1119, %1117 ]
  %399 = phi i32 [ 0, %395 ], [ %1118, %1117 ]
  %400 = phi i64 [ %396, %395 ], [ %1120, %1117 ]
  %401 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 %398
  %402 = load i32, i32* %401, align 8
  %403 = icmp eq i32 %399, 0
  br i1 %403, label %404, label %406

404:                                              ; preds = %397
  %405 = icmp eq i32 %402, 0
  br i1 %405, label %410, label %406

406:                                              ; preds = %397, %404
  %407 = phi i32 [ 16777216, %404 ], [ 16777215, %397 ]
  %408 = phi i32 [ 1, %404 ], [ %399, %397 ]
  %409 = sub nsw i32 %407, %402
  store i32 %409, i32* %401, align 8
  br label %410

410:                                              ; preds = %406, %404
  %411 = phi i32 [ 0, %404 ], [ %408, %406 ]
  %412 = or i64 %398, 1
  %413 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 %412
  %414 = load i32, i32* %413, align 4
  %415 = icmp eq i32 %411, 0
  br i1 %415, label %1111, label %1113

416:                                              ; preds = %1117, %390
  %417 = phi i32 [ undef, %390 ], [ %1118, %1117 ]
  %418 = phi i64 [ 0, %390 ], [ %1119, %1117 ]
  %419 = phi i32 [ 0, %390 ], [ %1118, %1117 ]
  %420 = icmp eq i64 %393, 0
  br i1 %420, label %431, label %421

421:                                              ; preds = %416
  %422 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 %418
  %423 = load i32, i32* %422, align 4
  %424 = icmp eq i32 %419, 0
  br i1 %424, label %425, label %427

425:                                              ; preds = %421
  %426 = icmp eq i32 %423, 0
  br i1 %426, label %431, label %427

427:                                              ; preds = %425, %421
  %428 = phi i32 [ 16777216, %425 ], [ 16777215, %421 ]
  %429 = phi i32 [ 1, %425 ], [ %419, %421 ]
  %430 = sub nsw i32 %428, %423
  store i32 %430, i32* %422, align 4
  br label %431

431:                                              ; preds = %427, %425, %416
  %432 = phi i32 [ %417, %416 ], [ 0, %425 ], [ %429, %427 ]
  %433 = add nsw i32 %392, 1
  br i1 %281, label %434, label %447

434:                                              ; preds = %431
  switch i32 %157, label %447 [
    i32 1, label %435
    i32 2, label %441
  ]

435:                                              ; preds = %434
  %436 = add nsw i32 %300, -1
  %437 = sext i32 %436 to i64
  %438 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 %437
  %439 = load i32, i32* %438, align 4
  %440 = and i32 %439, 8388607
  store i32 %440, i32* %438, align 4
  br label %447

441:                                              ; preds = %434
  %442 = add nsw i32 %300, -1
  %443 = sext i32 %442 to i64
  %444 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 %443
  %445 = load i32, i32* %444, align 4
  %446 = and i32 %445, 4194303
  store i32 %446, i32* %444, align 4
  br label %447

447:                                              ; preds = %441, %435, %434, %431
  %448 = icmp eq i32 %391, 2
  br i1 %448, label %449, label %455

449:                                              ; preds = %447
  %450 = fsub double 1.000000e+00, %366
  %451 = icmp eq i32 %432, 0
  br i1 %451, label %455, label %452

452:                                              ; preds = %449
  %453 = tail call double @scalbn(double 1.000000e+00, i32 %157) #7
  %454 = fsub double %450, %453
  br label %455

455:                                              ; preds = %452, %449, %447, %386, %384
  %456 = phi i32 [ 2, %452 ], [ 2, %449 ], [ %391, %447 ], [ %388, %386 ], [ 0, %384 ]
  %457 = phi i32 [ %433, %452 ], [ %433, %449 ], [ %433, %447 ], [ %387, %386 ], [ %364, %384 ]
  %458 = phi double [ %454, %452 ], [ %450, %449 ], [ %366, %447 ], [ %366, %386 ], [ %366, %384 ]
  %459 = fcmp oeq double %458, 0.000000e+00
  br i1 %459, label %460, label %658

460:                                              ; preds = %455
  %461 = icmp sgt i32 %300, 4
  br i1 %461, label %462, label %553

462:                                              ; preds = %460
  %463 = add nsw i64 %302, -1
  %464 = add nsw i64 %302, -4
  %465 = icmp ult i64 %464, 8
  br i1 %465, label %539, label %466

466:                                              ; preds = %462
  %467 = and i64 %464, -8
  %468 = sub nsw i64 %463, %467
  %469 = add nsw i64 %467, -8
  %470 = lshr exact i64 %469, 3
  %471 = add nuw nsw i64 %470, 1
  %472 = and i64 %471, 1
  %473 = icmp eq i64 %469, 0
  br i1 %473, label %509, label %474

474:                                              ; preds = %466
  %475 = sub nuw nsw i64 %471, %472
  br label %476

476:                                              ; preds = %476, %474
  %477 = phi i64 [ 0, %474 ], [ %506, %476 ]
  %478 = phi <4 x i32> [ zeroinitializer, %474 ], [ %504, %476 ]
  %479 = phi <4 x i32> [ zeroinitializer, %474 ], [ %505, %476 ]
  %480 = phi i64 [ %475, %474 ], [ %507, %476 ]
  %481 = sub i64 %463, %477
  %482 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 %481
  %483 = getelementptr inbounds i32, i32* %482, i64 -3
  %484 = bitcast i32* %483 to <4 x i32>*
  %485 = load <4 x i32>, <4 x i32>* %484, align 4
  %486 = shufflevector <4 x i32> %485, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %487 = getelementptr inbounds i32, i32* %482, i64 -7
  %488 = bitcast i32* %487 to <4 x i32>*
  %489 = load <4 x i32>, <4 x i32>* %488, align 4
  %490 = shufflevector <4 x i32> %489, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %491 = or <4 x i32> %486, %478
  %492 = or <4 x i32> %490, %479
  %493 = or i64 %477, 8
  %494 = sub i64 %463, %493
  %495 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 %494
  %496 = getelementptr inbounds i32, i32* %495, i64 -3
  %497 = bitcast i32* %496 to <4 x i32>*
  %498 = load <4 x i32>, <4 x i32>* %497, align 4
  %499 = shufflevector <4 x i32> %498, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %500 = getelementptr inbounds i32, i32* %495, i64 -7
  %501 = bitcast i32* %500 to <4 x i32>*
  %502 = load <4 x i32>, <4 x i32>* %501, align 4
  %503 = shufflevector <4 x i32> %502, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %504 = or <4 x i32> %499, %491
  %505 = or <4 x i32> %503, %492
  %506 = add i64 %477, 16
  %507 = add i64 %480, -2
  %508 = icmp eq i64 %507, 0
  br i1 %508, label %509, label %476, !llvm.loop !2

509:                                              ; preds = %476, %466
  %510 = phi <4 x i32> [ undef, %466 ], [ %504, %476 ]
  %511 = phi <4 x i32> [ undef, %466 ], [ %505, %476 ]
  %512 = phi i64 [ 0, %466 ], [ %506, %476 ]
  %513 = phi <4 x i32> [ zeroinitializer, %466 ], [ %504, %476 ]
  %514 = phi <4 x i32> [ zeroinitializer, %466 ], [ %505, %476 ]
  %515 = icmp eq i64 %472, 0
  br i1 %515, label %529, label %516

516:                                              ; preds = %509
  %517 = sub i64 %463, %512
  %518 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 %517
  %519 = getelementptr inbounds i32, i32* %518, i64 -7
  %520 = bitcast i32* %519 to <4 x i32>*
  %521 = load <4 x i32>, <4 x i32>* %520, align 4
  %522 = shufflevector <4 x i32> %521, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %523 = or <4 x i32> %522, %514
  %524 = getelementptr inbounds i32, i32* %518, i64 -3
  %525 = bitcast i32* %524 to <4 x i32>*
  %526 = load <4 x i32>, <4 x i32>* %525, align 4
  %527 = shufflevector <4 x i32> %526, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %528 = or <4 x i32> %527, %513
  br label %529

529:                                              ; preds = %509, %516
  %530 = phi <4 x i32> [ %510, %509 ], [ %528, %516 ]
  %531 = phi <4 x i32> [ %511, %509 ], [ %523, %516 ]
  %532 = or <4 x i32> %531, %530
  %533 = shufflevector <4 x i32> %532, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %534 = or <4 x i32> %532, %533
  %535 = shufflevector <4 x i32> %534, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %536 = or <4 x i32> %534, %535
  %537 = extractelement <4 x i32> %536, i32 0
  %538 = icmp eq i64 %464, %467
  br i1 %538, label %550, label %539

539:                                              ; preds = %529, %462
  %540 = phi i64 [ %463, %462 ], [ %468, %529 ]
  %541 = phi i32 [ 0, %462 ], [ %537, %529 ]
  br label %542

542:                                              ; preds = %539, %542
  %543 = phi i64 [ %548, %542 ], [ %540, %539 ]
  %544 = phi i32 [ %547, %542 ], [ %541, %539 ]
  %545 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 %543
  %546 = load i32, i32* %545, align 4
  %547 = or i32 %546, %544
  %548 = add nsw i64 %543, -1
  %549 = icmp sgt i64 %548, 3
  br i1 %549, label %542, label %550, !llvm.loop !4

550:                                              ; preds = %542, %529
  %551 = phi i32 [ %537, %529 ], [ %547, %542 ]
  %552 = icmp eq i32 %551, 0
  br i1 %552, label %553, label %650

553:                                              ; preds = %550, %460
  %554 = load i32, i32* %287, align 4
  %555 = icmp eq i32 %554, 0
  br i1 %555, label %556, label %559

556:                                              ; preds = %553
  %557 = load i32, i32* %288, align 8
  %558 = icmp eq i32 %557, 0
  br i1 %558, label %854, label %559

559:                                              ; preds = %857, %854, %556, %553
  %560 = phi i32 [ 1, %553 ], [ 2, %556 ], [ 3, %854 ], [ %860, %857 ]
  %561 = add i32 %300, 1
  %562 = add i32 %560, %300
  %563 = zext i32 %562 to i64
  br i1 %279, label %564, label %566

564:                                              ; preds = %559
  %565 = sext i32 %561 to i64
  br label %577

566:                                              ; preds = %559
  %567 = getelementptr double, double* %286, i64 %301
  %568 = bitcast double* %567 to i8*
  %569 = icmp ugt i32 %562, %561
  %570 = select i1 %569, i32 %562, i32 %561
  %571 = xor i32 %300, -1
  %572 = add i32 %570, %571
  %573 = zext i32 %572 to i64
  %574 = shl nuw nsw i64 %573, 3
  %575 = add nuw nsw i64 %574, 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %568, i8 0, i64 %575, i1 false) #7
  %576 = sext i32 %561 to i64
  br label %635

577:                                              ; preds = %564, %629
  %578 = phi i64 [ %565, %564 ], [ %632, %629 ]
  %579 = phi i64 [ %301, %564 ], [ %581, %629 ]
  %580 = phi i32 [ %300, %564 ], [ %634, %629 ]
  %581 = add nuw nsw i64 %579, 1
  %582 = add nuw nsw i64 %581, %285
  %583 = getelementptr inbounds [66 x i32], [66 x i32]* @_ZZN2v84base7ieee75412_GLOBAL__N_118__ieee754_rem_pio2EdPdE11two_over_pi, i64 0, i64 %582
  %584 = load i32, i32* %583, align 4
  %585 = sitofp i32 %584 to double
  %586 = add i32 %580, %146
  %587 = sext i32 %586 to i64
  %588 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %587
  store double %585, double* %588, align 8
  br i1 %292, label %615, label %589

589:                                              ; preds = %577, %589
  %590 = phi i64 [ %612, %589 ], [ 0, %577 ]
  %591 = phi double [ %611, %589 ], [ 0.000000e+00, %577 ]
  %592 = phi i64 [ %613, %589 ], [ %293, %577 ]
  %593 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 %590
  %594 = load double, double* %593, align 16
  %595 = trunc i64 %590 to i32
  %596 = sub nsw i32 %586, %595
  %597 = sext i32 %596 to i64
  %598 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %597
  %599 = load double, double* %598, align 8
  %600 = fmul double %594, %599
  %601 = fadd double %591, %600
  %602 = or i64 %590, 1
  %603 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 %602
  %604 = load double, double* %603, align 8
  %605 = trunc i64 %602 to i32
  %606 = sub nsw i32 %586, %605
  %607 = sext i32 %606 to i64
  %608 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %607
  %609 = load double, double* %608, align 8
  %610 = fmul double %604, %609
  %611 = fadd double %601, %610
  %612 = add nuw nsw i64 %590, 2
  %613 = add i64 %592, -2
  %614 = icmp eq i64 %613, 0
  br i1 %614, label %615, label %589

615:                                              ; preds = %589, %577
  %616 = phi double [ undef, %577 ], [ %611, %589 ]
  %617 = phi i64 [ 0, %577 ], [ %612, %589 ]
  %618 = phi double [ 0.000000e+00, %577 ], [ %611, %589 ]
  br i1 %294, label %629, label %619

619:                                              ; preds = %615
  %620 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 %617
  %621 = load double, double* %620, align 8
  %622 = trunc i64 %617 to i32
  %623 = sub nsw i32 %586, %622
  %624 = sext i32 %623 to i64
  %625 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %624
  %626 = load double, double* %625, align 8
  %627 = fmul double %621, %626
  %628 = fadd double %618, %627
  br label %629

629:                                              ; preds = %615, %619
  %630 = phi double [ %616, %615 ], [ %628, %619 ]
  %631 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 %581
  store double %630, double* %631, align 8
  %632 = add nsw i64 %578, 1
  %633 = icmp ult i64 %581, %563
  %634 = trunc i64 %578 to i32
  br i1 %633, label %577, label %295

635:                                              ; preds = %635, %566
  %636 = phi i64 [ %647, %635 ], [ %576, %566 ]
  %637 = phi i64 [ %639, %635 ], [ %301, %566 ]
  %638 = phi i32 [ %649, %635 ], [ %300, %566 ]
  %639 = add nuw nsw i64 %637, 1
  %640 = add nuw nsw i64 %639, %285
  %641 = getelementptr inbounds [66 x i32], [66 x i32]* @_ZZN2v84base7ieee75412_GLOBAL__N_118__ieee754_rem_pio2EdPdE11two_over_pi, i64 0, i64 %640
  %642 = load i32, i32* %641, align 4
  %643 = sitofp i32 %642 to double
  %644 = add i32 %638, %146
  %645 = sext i32 %644 to i64
  %646 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %645
  store double %643, double* %646, align 8
  %647 = add nsw i64 %636, 1
  %648 = icmp ult i64 %639, %563
  %649 = trunc i64 %636 to i32
  br i1 %648, label %635, label %295

650:                                              ; preds = %550, %650
  %651 = phi i64 [ %654, %650 ], [ %302, %550 ]
  %652 = phi i32 [ %653, %650 ], [ %157, %550 ]
  %653 = add nsw i32 %652, -24
  %654 = add nsw i64 %651, -1
  %655 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 %654
  %656 = load i32, i32* %655, align 4
  %657 = icmp eq i32 %656, 0
  br i1 %657, label %650, label %678

658:                                              ; preds = %455
  %659 = zext i32 %300 to i64
  %660 = sub nsw i32 0, %157
  %661 = tail call double @scalbn(double %458, i32 %660) #7
  %662 = fcmp ult double %661, 0x4170000000000000
  br i1 %662, label %675, label %663

663:                                              ; preds = %658
  %664 = fmul double %661, 0x3E70000000000000
  %665 = fptosi double %664 to i32
  %666 = sitofp i32 %665 to double
  %667 = fmul double %666, 0x4170000000000000
  %668 = fsub double %661, %667
  %669 = fptosi double %668 to i32
  %670 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 %659
  store i32 %669, i32* %670, align 4
  %671 = add nuw nsw i32 %300, 1
  %672 = add nsw i32 %155, %121
  %673 = zext i32 %671 to i64
  %674 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 %673
  store i32 %665, i32* %674, align 4
  br label %680

675:                                              ; preds = %658
  %676 = fptosi double %661 to i32
  %677 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 %659
  store i32 %676, i32* %677, align 4
  br label %680

678:                                              ; preds = %650
  %679 = trunc i64 %654 to i32
  br label %680

680:                                              ; preds = %678, %675, %663
  %681 = phi i32 [ %671, %663 ], [ %300, %675 ], [ %679, %678 ]
  %682 = phi i32 [ %672, %663 ], [ %157, %675 ], [ %653, %678 ]
  %683 = tail call double @scalbn(double 1.000000e+00, i32 %682) #7
  %684 = icmp sgt i32 %681, -1
  br i1 %684, label %688, label %685

685:                                              ; preds = %680
  %686 = icmp eq i32 %456, 0
  %687 = select i1 %686, double 0.000000e+00, double -0.000000e+00
  store double %687, double* %1, align 8
  br label %1094

688:                                              ; preds = %680
  %689 = sext i32 %681 to i64
  br label %690

690:                                              ; preds = %690, %688
  %691 = phi i64 [ %689, %688 ], [ %699, %690 ]
  %692 = phi double [ %683, %688 ], [ %698, %690 ]
  %693 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 %691
  %694 = load i32, i32* %693, align 4
  %695 = sitofp i32 %694 to double
  %696 = fmul double %692, %695
  %697 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 %691
  store double %696, double* %697, align 8
  %698 = fmul double %692, 0x3E70000000000000
  %699 = add nsw i64 %691, -1
  %700 = icmp sgt i64 %691, 0
  br i1 %700, label %690, label %701

701:                                              ; preds = %690
  %702 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 %689
  %703 = load double, double* %702, align 8
  %704 = fmul double %703, 0x3FF921FB40000000
  %705 = fadd double %704, 0.000000e+00
  %706 = getelementptr inbounds [20 x double], [20 x double]* %5, i64 0, i64 0
  store double %705, double* %706, align 16
  %707 = add nsw i64 %689, -1
  %708 = icmp sgt i32 %681, 0
  br i1 %708, label %709, label %790

709:                                              ; preds = %701
  %710 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 %707
  %711 = load double, double* %710, align 8
  %712 = fmul double %711, 0x3FF921FB40000000
  %713 = fadd double %712, 0.000000e+00
  %714 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 %689
  %715 = load double, double* %714, align 8
  %716 = fmul double %715, 0x3E74442D00000000
  %717 = fadd double %713, %716
  %718 = getelementptr inbounds [20 x double], [20 x double]* %5, i64 0, i64 1
  store double %717, double* %718, align 8
  %719 = add nsw i64 %689, -2
  %720 = icmp sgt i64 %707, 0
  br i1 %720, label %721, label %790

721:                                              ; preds = %709
  %722 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 %719
  %723 = load double, double* %722, align 8
  %724 = fmul double %723, 0x3FF921FB40000000
  %725 = fadd double %724, 0.000000e+00
  %726 = add nsw i64 %689, -1
  %727 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 %726
  %728 = load double, double* %727, align 8
  %729 = fmul double %728, 0x3E74442D00000000
  %730 = fadd double %725, %729
  %731 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 %689
  %732 = load double, double* %731, align 8
  %733 = fmul double %732, 0x3CF8469880000000
  %734 = fadd double %730, %733
  %735 = getelementptr inbounds [20 x double], [20 x double]* %5, i64 0, i64 2
  store double %734, double* %735, align 16
  %736 = add nsw i64 %689, -3
  %737 = icmp sgt i64 %719, 0
  br i1 %737, label %738, label %790

738:                                              ; preds = %721
  %739 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 %736
  %740 = load double, double* %739, align 8
  %741 = fmul double %740, 0x3FF921FB40000000
  %742 = fadd double %741, 0.000000e+00
  %743 = add nsw i64 %689, -2
  %744 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 %743
  %745 = load double, double* %744, align 8
  %746 = fmul double %745, 0x3E74442D00000000
  %747 = fadd double %742, %746
  %748 = add nsw i64 %689, -1
  %749 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 %748
  %750 = load double, double* %749, align 8
  %751 = fmul double %750, 0x3CF8469880000000
  %752 = fadd double %747, %751
  %753 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 %689
  %754 = load double, double* %753, align 8
  %755 = fmul double %754, 0x3B78CC5160000000
  %756 = fadd double %752, %755
  %757 = getelementptr inbounds [20 x double], [20 x double]* %5, i64 0, i64 3
  store double %756, double* %757, align 8
  %758 = add nsw i64 %689, -4
  %759 = icmp sgt i64 %736, 0
  br i1 %759, label %760, label %790

760:                                              ; preds = %738, %760
  %761 = phi i64 [ %788, %760 ], [ %758, %738 ]
  %762 = sub nuw nsw i64 %689, %761
  %763 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 %761
  %764 = load double, double* %763, align 8
  %765 = fmul double %764, 0x3FF921FB40000000
  %766 = fadd double %765, 0.000000e+00
  %767 = add nsw i64 %761, 1
  %768 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 %767
  %769 = load double, double* %768, align 8
  %770 = fmul double %769, 0x3E74442D00000000
  %771 = fadd double %766, %770
  %772 = add nsw i64 %761, 2
  %773 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 %772
  %774 = load double, double* %773, align 8
  %775 = fmul double %774, 0x3CF8469880000000
  %776 = fadd double %771, %775
  %777 = add nsw i64 %761, 3
  %778 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 %777
  %779 = load double, double* %778, align 8
  %780 = fmul double %779, 0x3B78CC5160000000
  %781 = fadd double %776, %780
  %782 = add nsw i64 %761, 4
  %783 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 %782
  %784 = load double, double* %783, align 8
  %785 = fmul double %784, 0x39F01B8380000000
  %786 = fadd double %781, %785
  %787 = getelementptr inbounds [20 x double], [20 x double]* %5, i64 0, i64 %762
  store double %786, double* %787, align 8
  %788 = add nsw i64 %761, -1
  %789 = icmp sgt i64 %761, 0
  br i1 %789, label %760, label %790, !llvm.loop !6

790:                                              ; preds = %760, %738, %721, %709, %701
  br label %791

791:                                              ; preds = %790, %791
  %792 = phi i64 [ %797, %791 ], [ %689, %790 ]
  %793 = phi double [ %796, %791 ], [ 0.000000e+00, %790 ]
  %794 = getelementptr inbounds [20 x double], [20 x double]* %5, i64 0, i64 %792
  %795 = load double, double* %794, align 8
  %796 = fadd double %793, %795
  %797 = add nsw i64 %792, -1
  %798 = icmp sgt i64 %792, 0
  br i1 %798, label %791, label %799

799:                                              ; preds = %791
  %800 = getelementptr inbounds [20 x double], [20 x double]* %5, i64 0, i64 0
  %801 = load double, double* %800, align 16
  %802 = icmp eq i32 %456, 0
  %803 = fsub double -0.000000e+00, %796
  %804 = select i1 %802, double %796, double %803
  store double %804, double* %1, align 8
  %805 = fsub double %801, %796
  %806 = icmp slt i32 %681, 1
  br i1 %806, label %1094, label %807

807:                                              ; preds = %799
  %808 = add nuw i32 %681, 1
  %809 = zext i32 %808 to i64
  %810 = add nsw i64 %809, -1
  %811 = add nsw i64 %809, -2
  %812 = and i64 %810, 7
  %813 = icmp ult i64 %811, 7
  br i1 %813, label %1079, label %814

814:                                              ; preds = %807
  %815 = sub nsw i64 %810, %812
  br label %816

816:                                              ; preds = %816, %814
  %817 = phi i64 [ 1, %814 ], [ %851, %816 ]
  %818 = phi double [ %805, %814 ], [ %850, %816 ]
  %819 = phi i64 [ %815, %814 ], [ %852, %816 ]
  %820 = getelementptr inbounds [20 x double], [20 x double]* %5, i64 0, i64 %817
  %821 = load double, double* %820, align 8
  %822 = fadd double %818, %821
  %823 = add nuw nsw i64 %817, 1
  %824 = getelementptr inbounds [20 x double], [20 x double]* %5, i64 0, i64 %823
  %825 = load double, double* %824, align 8
  %826 = fadd double %822, %825
  %827 = add nuw nsw i64 %817, 2
  %828 = getelementptr inbounds [20 x double], [20 x double]* %5, i64 0, i64 %827
  %829 = load double, double* %828, align 8
  %830 = fadd double %826, %829
  %831 = add nuw nsw i64 %817, 3
  %832 = getelementptr inbounds [20 x double], [20 x double]* %5, i64 0, i64 %831
  %833 = load double, double* %832, align 8
  %834 = fadd double %830, %833
  %835 = add nuw nsw i64 %817, 4
  %836 = getelementptr inbounds [20 x double], [20 x double]* %5, i64 0, i64 %835
  %837 = load double, double* %836, align 8
  %838 = fadd double %834, %837
  %839 = add nuw nsw i64 %817, 5
  %840 = getelementptr inbounds [20 x double], [20 x double]* %5, i64 0, i64 %839
  %841 = load double, double* %840, align 8
  %842 = fadd double %838, %841
  %843 = add nuw nsw i64 %817, 6
  %844 = getelementptr inbounds [20 x double], [20 x double]* %5, i64 0, i64 %843
  %845 = load double, double* %844, align 8
  %846 = fadd double %842, %845
  %847 = add nuw nsw i64 %817, 7
  %848 = getelementptr inbounds [20 x double], [20 x double]* %5, i64 0, i64 %847
  %849 = load double, double* %848, align 8
  %850 = fadd double %846, %849
  %851 = add nuw nsw i64 %817, 8
  %852 = add i64 %819, -8
  %853 = icmp eq i64 %852, 0
  br i1 %853, label %1079, label %816

854:                                              ; preds = %556
  %855 = load i32, i32* %289, align 4
  %856 = icmp eq i32 %855, 0
  br i1 %856, label %857, label %559

857:                                              ; preds = %854
  %858 = load i32, i32* %290, align 16
  %859 = icmp eq i32 %858, 0
  %860 = select i1 %859, i32 5, i32 4
  br label %559

861:                                              ; preds = %861, %260
  %862 = phi i64 [ 1, %260 ], [ %884, %861 ]
  %863 = phi double [ %254, %260 ], [ %883, %861 ]
  %864 = phi i64 [ %261, %260 ], [ %885, %861 ]
  %865 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 %862
  %866 = load double, double* %865, align 8
  %867 = sub i64 %140, %862
  %868 = shl i64 %867, 32
  %869 = ashr exact i64 %868, 32
  %870 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %869
  %871 = load double, double* %870, align 8
  %872 = fmul double %866, %871
  %873 = fadd double %863, %872
  %874 = add nuw nsw i64 %862, 1
  %875 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 %874
  %876 = load double, double* %875, align 8
  %877 = sub i64 %140, %874
  %878 = shl i64 %877, 32
  %879 = ashr exact i64 %878, 32
  %880 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %879
  %881 = load double, double* %880, align 8
  %882 = fmul double %876, %881
  %883 = fadd double %873, %882
  %884 = add nuw nsw i64 %862, 2
  %885 = add i64 %864, -2
  %886 = icmp eq i64 %885, 0
  br i1 %886, label %887, label %861

887:                                              ; preds = %861, %256
  %888 = phi double [ undef, %256 ], [ %883, %861 ]
  %889 = phi i64 [ 1, %256 ], [ %884, %861 ]
  %890 = phi double [ %254, %256 ], [ %883, %861 ]
  %891 = icmp eq i64 %258, 0
  br i1 %891, label %902, label %892

892:                                              ; preds = %887
  %893 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 %889
  %894 = load double, double* %893, align 8
  %895 = sub i64 %140, %889
  %896 = shl i64 %895, 32
  %897 = ashr exact i64 %896, 32
  %898 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %897
  %899 = load double, double* %898, align 8
  %900 = fmul double %894, %899
  %901 = fadd double %890, %900
  br label %902

902:                                              ; preds = %892, %887, %246
  %903 = phi double [ %254, %246 ], [ %888, %887 ], [ %901, %892 ]
  %904 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 1
  store double %903, double* %904, align 8
  %905 = add i64 %140, 1
  %906 = shl i64 %905, 32
  %907 = ashr exact i64 %906, 32
  %908 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %907
  %909 = load double, double* %908, align 8
  %910 = fmul double %909, %129
  %911 = fadd double %910, 0.000000e+00
  %912 = icmp eq i64 %187, 1
  br i1 %912, label %960, label %913

913:                                              ; preds = %902
  %914 = add nsw i64 %187, -1
  %915 = and i64 %914, 1
  %916 = icmp eq i64 %187, 2
  br i1 %916, label %945, label %917

917:                                              ; preds = %913
  %918 = sub nsw i64 %914, %915
  br label %919

919:                                              ; preds = %919, %917
  %920 = phi i64 [ 1, %917 ], [ %942, %919 ]
  %921 = phi double [ %911, %917 ], [ %941, %919 ]
  %922 = phi i64 [ %918, %917 ], [ %943, %919 ]
  %923 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 %920
  %924 = load double, double* %923, align 8
  %925 = sub i64 %905, %920
  %926 = shl i64 %925, 32
  %927 = ashr exact i64 %926, 32
  %928 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %927
  %929 = load double, double* %928, align 8
  %930 = fmul double %924, %929
  %931 = fadd double %921, %930
  %932 = add nuw nsw i64 %920, 1
  %933 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 %932
  %934 = load double, double* %933, align 8
  %935 = sub i64 %905, %932
  %936 = shl i64 %935, 32
  %937 = ashr exact i64 %936, 32
  %938 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %937
  %939 = load double, double* %938, align 8
  %940 = fmul double %934, %939
  %941 = fadd double %931, %940
  %942 = add nuw nsw i64 %920, 2
  %943 = add i64 %922, -2
  %944 = icmp eq i64 %943, 0
  br i1 %944, label %945, label %919

945:                                              ; preds = %919, %913
  %946 = phi double [ undef, %913 ], [ %941, %919 ]
  %947 = phi i64 [ 1, %913 ], [ %942, %919 ]
  %948 = phi double [ %911, %913 ], [ %941, %919 ]
  %949 = icmp eq i64 %915, 0
  br i1 %949, label %960, label %950

950:                                              ; preds = %945
  %951 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 %947
  %952 = load double, double* %951, align 8
  %953 = sub i64 %905, %947
  %954 = shl i64 %953, 32
  %955 = ashr exact i64 %954, 32
  %956 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %955
  %957 = load double, double* %956, align 8
  %958 = fmul double %952, %957
  %959 = fadd double %948, %958
  br label %960

960:                                              ; preds = %950, %945, %902
  %961 = phi double [ %911, %902 ], [ %946, %945 ], [ %959, %950 ]
  %962 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 2
  store double %961, double* %962, align 16
  %963 = add i64 %140, 2
  %964 = shl i64 %963, 32
  %965 = ashr exact i64 %964, 32
  %966 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %965
  %967 = load double, double* %966, align 8
  %968 = fmul double %967, %129
  %969 = fadd double %968, 0.000000e+00
  %970 = icmp eq i64 %187, 1
  br i1 %970, label %1018, label %971

971:                                              ; preds = %960
  %972 = add nsw i64 %187, -1
  %973 = and i64 %972, 1
  %974 = icmp eq i64 %187, 2
  br i1 %974, label %1003, label %975

975:                                              ; preds = %971
  %976 = sub nsw i64 %972, %973
  br label %977

977:                                              ; preds = %977, %975
  %978 = phi i64 [ 1, %975 ], [ %1000, %977 ]
  %979 = phi double [ %969, %975 ], [ %999, %977 ]
  %980 = phi i64 [ %976, %975 ], [ %1001, %977 ]
  %981 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 %978
  %982 = load double, double* %981, align 8
  %983 = sub i64 %963, %978
  %984 = shl i64 %983, 32
  %985 = ashr exact i64 %984, 32
  %986 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %985
  %987 = load double, double* %986, align 8
  %988 = fmul double %982, %987
  %989 = fadd double %979, %988
  %990 = add nuw nsw i64 %978, 1
  %991 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 %990
  %992 = load double, double* %991, align 8
  %993 = sub i64 %963, %990
  %994 = shl i64 %993, 32
  %995 = ashr exact i64 %994, 32
  %996 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %995
  %997 = load double, double* %996, align 8
  %998 = fmul double %992, %997
  %999 = fadd double %989, %998
  %1000 = add nuw nsw i64 %978, 2
  %1001 = add i64 %980, -2
  %1002 = icmp eq i64 %1001, 0
  br i1 %1002, label %1003, label %977

1003:                                             ; preds = %977, %971
  %1004 = phi double [ undef, %971 ], [ %999, %977 ]
  %1005 = phi i64 [ 1, %971 ], [ %1000, %977 ]
  %1006 = phi double [ %969, %971 ], [ %999, %977 ]
  %1007 = icmp eq i64 %973, 0
  br i1 %1007, label %1018, label %1008

1008:                                             ; preds = %1003
  %1009 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 %1005
  %1010 = load double, double* %1009, align 8
  %1011 = sub i64 %963, %1005
  %1012 = shl i64 %1011, 32
  %1013 = ashr exact i64 %1012, 32
  %1014 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %1013
  %1015 = load double, double* %1014, align 8
  %1016 = fmul double %1010, %1015
  %1017 = fadd double %1006, %1016
  br label %1018

1018:                                             ; preds = %1008, %1003, %960
  %1019 = phi double [ %969, %960 ], [ %1004, %1003 ], [ %1017, %1008 ]
  %1020 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 3
  store double %1019, double* %1020, align 8
  %1021 = add i64 %140, 3
  %1022 = shl i64 %1021, 32
  %1023 = ashr exact i64 %1022, 32
  %1024 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %1023
  %1025 = load double, double* %1024, align 8
  %1026 = fmul double %1025, %129
  %1027 = fadd double %1026, 0.000000e+00
  %1028 = icmp eq i64 %187, 1
  br i1 %1028, label %1076, label %1029

1029:                                             ; preds = %1018
  %1030 = add nsw i64 %187, -1
  %1031 = and i64 %1030, 1
  %1032 = icmp eq i64 %187, 2
  br i1 %1032, label %1061, label %1033

1033:                                             ; preds = %1029
  %1034 = sub nsw i64 %1030, %1031
  br label %1035

1035:                                             ; preds = %1035, %1033
  %1036 = phi i64 [ 1, %1033 ], [ %1058, %1035 ]
  %1037 = phi double [ %1027, %1033 ], [ %1057, %1035 ]
  %1038 = phi i64 [ %1034, %1033 ], [ %1059, %1035 ]
  %1039 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 %1036
  %1040 = load double, double* %1039, align 8
  %1041 = sub i64 %1021, %1036
  %1042 = shl i64 %1041, 32
  %1043 = ashr exact i64 %1042, 32
  %1044 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %1043
  %1045 = load double, double* %1044, align 8
  %1046 = fmul double %1040, %1045
  %1047 = fadd double %1037, %1046
  %1048 = add nuw nsw i64 %1036, 1
  %1049 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 %1048
  %1050 = load double, double* %1049, align 8
  %1051 = sub i64 %1021, %1048
  %1052 = shl i64 %1051, 32
  %1053 = ashr exact i64 %1052, 32
  %1054 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %1053
  %1055 = load double, double* %1054, align 8
  %1056 = fmul double %1050, %1055
  %1057 = fadd double %1047, %1056
  %1058 = add nuw nsw i64 %1036, 2
  %1059 = add i64 %1038, -2
  %1060 = icmp eq i64 %1059, 0
  br i1 %1060, label %1061, label %1035

1061:                                             ; preds = %1035, %1029
  %1062 = phi double [ undef, %1029 ], [ %1057, %1035 ]
  %1063 = phi i64 [ 1, %1029 ], [ %1058, %1035 ]
  %1064 = phi double [ %1027, %1029 ], [ %1057, %1035 ]
  %1065 = icmp eq i64 %1031, 0
  br i1 %1065, label %1076, label %1066

1066:                                             ; preds = %1061
  %1067 = getelementptr inbounds [3 x double], [3 x double]* %7, i64 0, i64 %1063
  %1068 = load double, double* %1067, align 8
  %1069 = sub i64 %1021, %1063
  %1070 = shl i64 %1069, 32
  %1071 = ashr exact i64 %1070, 32
  %1072 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %1071
  %1073 = load double, double* %1072, align 8
  %1074 = fmul double %1068, %1073
  %1075 = fadd double %1064, %1074
  br label %1076

1076:                                             ; preds = %1066, %1061, %1018
  %1077 = phi double [ %1027, %1018 ], [ %1062, %1061 ], [ %1075, %1066 ]
  %1078 = getelementptr inbounds [20 x double], [20 x double]* %6, i64 0, i64 4
  store double %1077, double* %1078, align 16
  br label %277

1079:                                             ; preds = %816, %807
  %1080 = phi double [ undef, %807 ], [ %850, %816 ]
  %1081 = phi i64 [ 1, %807 ], [ %851, %816 ]
  %1082 = phi double [ %805, %807 ], [ %850, %816 ]
  %1083 = icmp eq i64 %812, 0
  br i1 %1083, label %1094, label %1084

1084:                                             ; preds = %1079, %1084
  %1085 = phi i64 [ %1091, %1084 ], [ %1081, %1079 ]
  %1086 = phi double [ %1090, %1084 ], [ %1082, %1079 ]
  %1087 = phi i64 [ %1092, %1084 ], [ %812, %1079 ]
  %1088 = getelementptr inbounds [20 x double], [20 x double]* %5, i64 0, i64 %1085
  %1089 = load double, double* %1088, align 8
  %1090 = fadd double %1086, %1089
  %1091 = add nuw nsw i64 %1085, 1
  %1092 = add i64 %1087, -1
  %1093 = icmp eq i64 %1092, 0
  br i1 %1093, label %1094, label %1084, !llvm.loop !8

1094:                                             ; preds = %1079, %1084, %685, %799
  %1095 = phi double [ %804, %799 ], [ %687, %685 ], [ %804, %1084 ], [ %804, %1079 ]
  %1096 = phi i1 [ %802, %799 ], [ %686, %685 ], [ %802, %1084 ], [ %802, %1079 ]
  %1097 = phi double [ %805, %799 ], [ 0x7FF8000000000000, %685 ], [ %1080, %1079 ], [ %1090, %1084 ]
  %1098 = fsub double -0.000000e+00, %1097
  %1099 = select i1 %1096, double %1097, double %1098
  %1100 = getelementptr inbounds double, double* %1, i64 1
  store double %1099, double* %1100, align 8
  %1101 = and i32 %457, 7
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %147) #7
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %150) #7
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %149) #7
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %148) #7
  %1102 = icmp slt i32 %11, 0
  br i1 %1102, label %1103, label %1109

1103:                                             ; preds = %1094
  %1104 = insertelement <2 x double> undef, double %1095, i32 0
  %1105 = insertelement <2 x double> %1104, double %1099, i32 1
  %1106 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %1105
  %1107 = bitcast double* %1 to <2 x double>*
  store <2 x double> %1106, <2 x double>* %1107, align 8
  %1108 = sub nsw i32 0, %1101
  br label %1109

1109:                                             ; preds = %1094, %99, %37, %42, %23, %28, %1103, %115, %107, %14
  %1110 = phi i32 [ 0, %14 ], [ %112, %107 ], [ 0, %115 ], [ %1108, %1103 ], [ 1, %28 ], [ 1, %23 ], [ -1, %42 ], [ -1, %37 ], [ %54, %99 ], [ %1101, %1094 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #7
  ret i32 %1110

1111:                                             ; preds = %410
  %1112 = icmp eq i32 %414, 0
  br i1 %1112, label %1117, label %1113

1113:                                             ; preds = %1111, %410
  %1114 = phi i32 [ 16777216, %1111 ], [ 16777215, %410 ]
  %1115 = phi i32 [ 1, %1111 ], [ %411, %410 ]
  %1116 = sub nsw i32 %1114, %414
  store i32 %1116, i32* %413, align 4
  br label %1117

1117:                                             ; preds = %1113, %1111
  %1118 = phi i32 [ 0, %1111 ], [ %1115, %1113 ]
  %1119 = add nuw nsw i64 %398, 2
  %1120 = add i64 %400, -2
  %1121 = icmp eq i64 %1120, 0
  br i1 %1121, label %416, label %397

1122:                                             ; preds = %271
  %1123 = getelementptr inbounds [66 x i32], [66 x i32]* @_ZZN2v84base7ieee75412_GLOBAL__N_118__ieee754_rem_pio2EdPdE11two_over_pi, i64 0, i64 %275
  %1124 = load i32, i32* %1123, align 4
  %1125 = sitofp i32 %1124 to double
  br label %1126

1126:                                             ; preds = %1122, %271
  %1127 = phi double [ %1125, %1122 ], [ 0.000000e+00, %271 ]
  %1128 = getelementptr inbounds [20 x double], [20 x double]* %4, i64 0, i64 %274
  store double %1127, double* %1128, align 8
  %1129 = add nuw nsw i64 %263, 2
  %1130 = add nsw i64 %264, 2
  %1131 = add i64 %265, -2
  %1132 = icmp eq i64 %1131, 0
  br i1 %1132, label %169, label %262
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN2v84base7ieee7543expEd(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = lshr i64 %2, 32
  %4 = trunc i64 %3 to i32
  %5 = lshr i64 %2, 63
  %6 = trunc i64 %5 to i32
  %7 = and i32 %4, 2147483647
  %8 = icmp ugt i32 %7, 1082535489
  br i1 %8, label %9, label %33

9:                                                ; preds = %1
  %10 = icmp ugt i32 %7, 2146435071
  br i1 %10, label %11, label %21

11:                                               ; preds = %9
  %12 = trunc i64 %2 to i32
  %13 = and i32 %4, 1048575
  %14 = or i32 %13, %12
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %18, label %16

16:                                               ; preds = %11
  %17 = fadd double %0, %0
  br label %122

18:                                               ; preds = %11
  %19 = icmp eq i32 %6, 0
  %20 = select i1 %19, double %0, double 0.000000e+00
  br label %122

21:                                               ; preds = %9
  %22 = fcmp ogt double %0, 0x40862E42FEFA39EF
  br i1 %22, label %23, label %27

23:                                               ; preds = %21
  %24 = load volatile double, double* @_ZZN2v84base7ieee7543expEdE4huge, align 8
  %25 = load volatile double, double* @_ZZN2v84base7ieee7543expEdE4huge, align 8
  %26 = fmul double %24, %25
  br label %122

27:                                               ; preds = %21
  %28 = fcmp olt double %0, 0xC0874910D52D3051
  br i1 %28, label %29, label %46

29:                                               ; preds = %27
  %30 = load volatile double, double* @_ZZN2v84base7ieee7543expEdE8twom1000, align 8
  %31 = load volatile double, double* @_ZZN2v84base7ieee7543expEdE8twom1000, align 8
  %32 = fmul double %30, %31
  br label %122

33:                                               ; preds = %1
  %34 = icmp ugt i32 %7, 1071001154
  br i1 %34, label %35, label %55

35:                                               ; preds = %33
  %36 = icmp ult i32 %7, 1072734898
  br i1 %36, label %37, label %46

37:                                               ; preds = %35
  %38 = fcmp oeq double %0, 1.000000e+00
  br i1 %38, label %122, label %39

39:                                               ; preds = %37
  %40 = getelementptr inbounds [2 x double], [2 x double]* @_ZZN2v84base7ieee7543expEdE5ln2HI, i64 0, i64 %5
  %41 = load double, double* %40, align 8
  %42 = getelementptr inbounds [2 x double], [2 x double]* @_ZZN2v84base7ieee7543expEdE5ln2LO, i64 0, i64 %5
  %43 = load double, double* %42, align 8
  %44 = xor i32 %6, 1
  %45 = sub nsw i32 %44, %6
  br label %65

46:                                               ; preds = %27, %35
  %47 = fmul double %0, 0x3FF71547652B82FE
  %48 = getelementptr inbounds [2 x double], [2 x double]* @_ZZN2v84base7ieee7543expEdE4halF, i64 0, i64 %5
  %49 = load double, double* %48, align 8
  %50 = fadd double %47, %49
  %51 = fptosi double %50 to i32
  %52 = sitofp i32 %51 to double
  %53 = fmul double %52, 0x3FE62E42FEE00000
  %54 = fmul double %52, 0x3DEA39EF35793C76
  br label %65

55:                                               ; preds = %33
  %56 = icmp ult i32 %7, 1043333120
  br i1 %56, label %57, label %63

57:                                               ; preds = %55
  %58 = load volatile double, double* @_ZZN2v84base7ieee7543expEdE4huge, align 8
  %59 = fadd double %58, %0
  %60 = fcmp ogt double %59, 1.000000e+00
  br i1 %60, label %61, label %63

61:                                               ; preds = %57
  %62 = fadd double %0, 1.000000e+00
  br label %122

63:                                               ; preds = %57, %55
  %64 = fmul double %0, %0
  br label %74

65:                                               ; preds = %39, %46
  %66 = phi i32 [ %45, %39 ], [ %51, %46 ]
  %67 = phi double [ %43, %39 ], [ %54, %46 ]
  %68 = phi double [ %41, %39 ], [ %53, %46 ]
  %69 = fsub double %0, %68
  %70 = fsub double %69, %67
  %71 = fmul double %70, %70
  %72 = icmp sgt i32 %66, -1022
  %73 = select i1 %72, i32 1072693248, i32 2121269248
  br label %74

74:                                               ; preds = %65, %63
  %75 = phi i32 [ 0, %63 ], [ %66, %65 ]
  %76 = phi i32 [ 1072693248, %63 ], [ %73, %65 ]
  %77 = phi i1 [ true, %63 ], [ %72, %65 ]
  %78 = phi double [ %64, %63 ], [ %71, %65 ]
  %79 = phi double [ %0, %63 ], [ %70, %65 ]
  %80 = phi double [ 0.000000e+00, %63 ], [ %69, %65 ]
  %81 = phi double [ 0.000000e+00, %63 ], [ %67, %65 ]
  %82 = shl i32 %75, 20
  %83 = add i32 %82, %76
  %84 = zext i32 %83 to i64
  %85 = shl nuw i64 %84, 32
  %86 = bitcast i64 %85 to double
  %87 = fmul double %78, 0x3E66376972BEA4D0
  %88 = fadd double %87, 0xBEBBBD41C5D26BF1
  %89 = fmul double %78, %88
  %90 = fadd double %89, 0x3F11566AAF25DE2C
  %91 = fmul double %78, %90
  %92 = fadd double %91, 0xBF66C16C16BEBD93
  %93 = fmul double %78, %92
  %94 = fadd double %93, 0x3FC555555555553E
  %95 = fmul double %78, %94
  %96 = fsub double %79, %95
  %97 = icmp eq i32 %75, 0
  %98 = fmul double %79, %96
  br i1 %97, label %99, label %104

99:                                               ; preds = %74
  %100 = fadd double %96, -2.000000e+00
  %101 = fdiv double %98, %100
  %102 = fsub double %79, %101
  %103 = fadd double %102, 1.000000e+00
  br label %122

104:                                              ; preds = %74
  %105 = fsub double 2.000000e+00, %96
  %106 = fdiv double %98, %105
  %107 = fsub double %81, %106
  %108 = fsub double %80, %107
  %109 = fadd double %108, 1.000000e+00
  br i1 %77, label %110, label %118

110:                                              ; preds = %104
  %111 = icmp eq i32 %75, 1024
  br i1 %111, label %112, label %116

112:                                              ; preds = %110
  %113 = fmul double %109, 2.000000e+00
  %114 = load volatile double, double* @_ZZN2v84base7ieee7543expEdE7two1023, align 8
  %115 = fmul double %113, %114
  br label %122

116:                                              ; preds = %110
  %117 = fmul double %109, %86
  br label %122

118:                                              ; preds = %104
  %119 = fmul double %109, %86
  %120 = load volatile double, double* @_ZZN2v84base7ieee7543expEdE8twom1000, align 8
  %121 = fmul double %119, %120
  br label %122

122:                                              ; preds = %37, %16, %18, %118, %116, %112, %99, %61, %29, %23
  %123 = phi double [ %26, %23 ], [ %32, %29 ], [ %103, %99 ], [ %115, %112 ], [ %117, %116 ], [ %121, %118 ], [ %62, %61 ], [ %17, %16 ], [ %20, %18 ], [ 0x4005BF0A8B145769, %37 ]
  ret double %123
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden double @_ZN2v84base7ieee7545atanhEd(double) local_unnamed_addr #4 {
  %2 = bitcast double %0 to i64
  %3 = lshr i64 %2, 32
  %4 = trunc i64 %3 to i32
  %5 = trunc i64 %2 to i32
  %6 = and i32 %4, 2147483647
  %7 = icmp eq i32 %5, -2147483648
  %8 = sub nsw i32 0, %5
  %9 = select i1 %7, i32 -2147483648, i32 %8
  %10 = or i32 %9, %5
  %11 = lshr i32 %10, 31
  %12 = or i32 %11, %6
  %13 = icmp ugt i32 %12, 1072693248
  br i1 %13, label %47, label %14

14:                                               ; preds = %1
  %15 = icmp eq i32 %6, 1072693248
  br i1 %15, label %16, label %19

16:                                               ; preds = %14
  %17 = fcmp ogt double %0, 0.000000e+00
  %18 = select i1 %17, double 0x7FF0000000000000, double 0xFFF0000000000000
  br label %47

19:                                               ; preds = %14
  %20 = icmp ult i32 %6, 1043333120
  %21 = fadd double %0, 1.000000e+300
  %22 = fcmp ogt double %21, 0.000000e+00
  %23 = and i1 %22, %20
  br i1 %23, label %47, label %24

24:                                               ; preds = %19
  %25 = and i64 %2, 4294967295
  %26 = zext i32 %6 to i64
  %27 = shl nuw nsw i64 %26, 32
  %28 = or i64 %27, %25
  %29 = bitcast i64 %28 to double
  %30 = icmp ult i32 %6, 1071644672
  %31 = fadd double %29, %29
  br i1 %30, label %32, label %37

32:                                               ; preds = %24
  %33 = fmul double %31, %29
  %34 = fsub double 1.000000e+00, %29
  %35 = fdiv double %33, %34
  %36 = fadd double %31, %35
  br label %40

37:                                               ; preds = %24
  %38 = fsub double 1.000000e+00, %29
  %39 = fdiv double %31, %38
  br label %40

40:                                               ; preds = %37, %32
  %41 = phi double [ %39, %37 ], [ %36, %32 ]
  %42 = tail call double @_ZN2v84base7ieee7545log1pEd(double %41)
  %43 = fmul double %42, 5.000000e-01
  %44 = icmp sgt i32 %4, -1
  %45 = fsub double -0.000000e+00, %43
  %46 = select i1 %44, double %43, double %45
  ret double %46

47:                                               ; preds = %19, %1, %16
  %48 = phi double [ %18, %16 ], [ 0x7FF4000000000000, %1 ], [ %0, %19 ]
  ret double %48
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden double @_ZN2v84base7ieee7544log2Ed(double) local_unnamed_addr #4 {
  %2 = bitcast double %0 to i64
  %3 = lshr i64 %2, 32
  %4 = trunc i64 %3 to i32
  %5 = trunc i64 %2 to i32
  %6 = icmp slt i32 %4, 1048576
  br i1 %6, label %7, label %18

7:                                                ; preds = %1
  %8 = and i32 %4, 2147483647
  %9 = or i32 %8, %5
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %86, label %11

11:                                               ; preds = %7
  %12 = icmp slt i32 %4, 0
  br i1 %12, label %86, label %13

13:                                               ; preds = %11
  %14 = fmul double %0, 0x4350000000000000
  %15 = bitcast double %14 to i64
  %16 = lshr i64 %15, 32
  %17 = trunc i64 %16 to i32
  br label %18

18:                                               ; preds = %13, %1
  %19 = phi double [ %14, %13 ], [ %0, %1 ]
  %20 = phi i64 [ %15, %13 ], [ %2, %1 ]
  %21 = phi i32 [ %17, %13 ], [ %4, %1 ]
  %22 = phi i32 [ -54, %13 ], [ 0, %1 ]
  %23 = icmp sgt i32 %21, 2146435071
  br i1 %23, label %24, label %26

24:                                               ; preds = %18
  %25 = fadd double %19, %19
  br label %86

26:                                               ; preds = %18
  %27 = icmp eq i32 %21, 1072693248
  %28 = icmp eq i32 %5, 0
  %29 = and i1 %28, %27
  br i1 %29, label %86, label %30

30:                                               ; preds = %26
  %31 = ashr i32 %21, 20
  %32 = add nsw i32 %31, -1023
  %33 = add nsw i32 %32, %22
  %34 = and i32 %21, 1048575
  %35 = add nuw nsw i32 %34, 614244
  %36 = and i32 %35, 1048576
  %37 = and i64 %20, 4294967295
  %38 = or i32 %36, %34
  %39 = xor i32 %38, 1072693248
  %40 = zext i32 %39 to i64
  %41 = shl nuw nsw i64 %40, 32
  %42 = or i64 %41, %37
  %43 = bitcast i64 %42 to double
  %44 = lshr i32 %35, 20
  %45 = add nsw i32 %33, %44
  %46 = sitofp i32 %45 to double
  %47 = fadd double %43, -1.000000e+00
  %48 = fmul double %47, 5.000000e-01
  %49 = fmul double %47, %48
  %50 = fadd double %47, 2.000000e+00
  %51 = fdiv double %47, %50
  %52 = fmul double %51, %51
  %53 = fmul double %52, %52
  %54 = fmul double %53, 0x3FC39A09D078C69F
  %55 = fadd double %54, 0x3FCC71C51D8E78AF
  %56 = fmul double %53, %55
  %57 = fadd double %56, 0x3FD999999997FA04
  %58 = fmul double %53, %57
  %59 = fmul double %53, 0x3FC2F112DF3E5244
  %60 = fadd double %59, 0x3FC7466496CB03DE
  %61 = fmul double %53, %60
  %62 = fadd double %61, 0x3FD2492494229359
  %63 = fmul double %53, %62
  %64 = fadd double %63, 0x3FE5555555555593
  %65 = fmul double %52, %64
  %66 = fadd double %58, %65
  %67 = fadd double %49, %66
  %68 = fmul double %51, %67
  %69 = fsub double %47, %49
  %70 = bitcast double %69 to i64
  %71 = and i64 %70, -4294967296
  %72 = bitcast i64 %71 to double
  %73 = fsub double %47, %72
  %74 = fsub double %73, %49
  %75 = fadd double %74, %68
  %76 = fmul double %72, 0x3FF7154765200000
  %77 = fadd double %75, %72
  %78 = fmul double %77, 0x3DE705FC2EEFA200
  %79 = fmul double %75, 0x3FF7154765200000
  %80 = fadd double %79, %78
  %81 = fadd double %76, %46
  %82 = fsub double %46, %81
  %83 = fadd double %76, %82
  %84 = fadd double %83, %80
  %85 = fadd double %81, %84
  br label %86

86:                                               ; preds = %11, %7, %26, %30, %24
  %87 = phi double [ %25, %24 ], [ %85, %30 ], [ 0.000000e+00, %26 ], [ 0xFFF0000000000000, %7 ], [ 0x7FF4000000000000, %11 ]
  ret double %87
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden double @_ZN2v84base7ieee7545log10Ed(double) local_unnamed_addr #4 {
  %2 = bitcast double %0 to i64
  %3 = lshr i64 %2, 32
  %4 = trunc i64 %3 to i32
  %5 = trunc i64 %2 to i32
  %6 = icmp slt i32 %4, 1048576
  br i1 %6, label %7, label %19

7:                                                ; preds = %1
  %8 = and i32 %4, 2147483647
  %9 = or i32 %8, %5
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %53, label %11

11:                                               ; preds = %7
  %12 = icmp slt i32 %4, 0
  br i1 %12, label %53, label %13

13:                                               ; preds = %11
  %14 = fmul double %0, 0x4350000000000000
  %15 = bitcast double %14 to i64
  %16 = lshr i64 %15, 32
  %17 = trunc i64 %16 to i32
  %18 = trunc i64 %15 to i32
  br label %19

19:                                               ; preds = %13, %1
  %20 = phi double [ %14, %13 ], [ %0, %1 ]
  %21 = phi i32 [ %18, %13 ], [ %5, %1 ]
  %22 = phi i32 [ %17, %13 ], [ %4, %1 ]
  %23 = phi i32 [ -54, %13 ], [ 0, %1 ]
  %24 = icmp sgt i32 %22, 2146435071
  br i1 %24, label %25, label %27

25:                                               ; preds = %19
  %26 = fadd double %20, %20
  br label %53

27:                                               ; preds = %19
  %28 = icmp eq i32 %22, 1072693248
  %29 = icmp eq i32 %21, 0
  %30 = and i1 %29, %28
  br i1 %30, label %53, label %31

31:                                               ; preds = %27
  %32 = ashr i32 %22, 20
  %33 = add nsw i32 %32, -1023
  %34 = add nsw i32 %33, %23
  %35 = lshr i32 %34, 31
  %36 = and i32 %22, 1048575
  %37 = shl nuw nsw i32 %35, 20
  %38 = or i32 %37, %36
  %39 = xor i32 %38, 1072693248
  %40 = add nsw i32 %35, %34
  %41 = sitofp i32 %40 to double
  %42 = zext i32 %39 to i64
  %43 = shl nuw nsw i64 %42, 32
  %44 = zext i32 %21 to i64
  %45 = or i64 %43, %44
  %46 = bitcast i64 %45 to double
  %47 = fmul double %41, 0x3D59FEF311F12B36
  %48 = tail call double @_ZN2v84base7ieee7543logEd(double %46)
  %49 = fmul double %48, 0x3FDBCB7B1526E50E
  %50 = fadd double %47, %49
  %51 = fmul double %41, 0x3FD34413509F6000
  %52 = fadd double %51, %50
  br label %53

53:                                               ; preds = %11, %7, %27, %31, %25
  %54 = phi double [ %26, %25 ], [ %52, %31 ], [ 0.000000e+00, %27 ], [ 0xFFF0000000000000, %7 ], [ 0x7FF8000000000000, %11 ]
  ret double %54
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN2v84base7ieee7545expm1Ed(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = lshr i64 %2, 32
  %4 = trunc i64 %3 to i32
  %5 = and i32 %4, -2147483648
  %6 = and i32 %4, 2147483647
  %7 = icmp ugt i32 %6, 1078159481
  br i1 %7, label %8, label %33

8:                                                ; preds = %1
  %9 = icmp ugt i32 %6, 1082535489
  br i1 %9, label %10, label %28

10:                                               ; preds = %8
  %11 = icmp ugt i32 %6, 2146435071
  br i1 %11, label %12, label %22

12:                                               ; preds = %10
  %13 = trunc i64 %2 to i32
  %14 = and i32 %4, 1048575
  %15 = or i32 %14, %13
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %19, label %17

17:                                               ; preds = %12
  %18 = fadd double %0, %0
  br label %153

19:                                               ; preds = %12
  %20 = icmp eq i32 %5, 0
  %21 = select i1 %20, double %0, double -1.000000e+00
  br label %153

22:                                               ; preds = %10
  %23 = fcmp ogt double %0, 0x40862E42FEFA39EF
  br i1 %23, label %24, label %28

24:                                               ; preds = %22
  %25 = load volatile double, double* @_ZZN2v84base7ieee7545expm1EdE4huge, align 8
  %26 = load volatile double, double* @_ZZN2v84base7ieee7545expm1EdE4huge, align 8
  %27 = fmul double %25, %26
  br label %153

28:                                               ; preds = %22, %8
  %29 = icmp ne i32 %5, 0
  %30 = fadd double %0, 1.000000e-300
  %31 = fcmp olt double %30, 0.000000e+00
  %32 = and i1 %31, %29
  br i1 %32, label %153, label %43

33:                                               ; preds = %1
  %34 = icmp ugt i32 %6, 1071001154
  br i1 %34, label %35, label %60

35:                                               ; preds = %33
  %36 = icmp ult i32 %6, 1072734898
  br i1 %36, label %37, label %43

37:                                               ; preds = %35
  %38 = icmp eq i32 %5, 0
  br i1 %38, label %39, label %41

39:                                               ; preds = %37
  %40 = fadd double %0, 0xBFE62E42FEE00000
  br label %53

41:                                               ; preds = %37
  %42 = fadd double %0, 0x3FE62E42FEE00000
  br label %53

43:                                               ; preds = %28, %35
  %44 = fmul double %0, 0x3FF71547652B82FE
  %45 = icmp eq i32 %5, 0
  %46 = select i1 %45, double 5.000000e-01, double -5.000000e-01
  %47 = fadd double %44, %46
  %48 = fptosi double %47 to i32
  %49 = sitofp i32 %48 to double
  %50 = fmul double %49, 0x3FE62E42FEE00000
  %51 = fsub double %0, %50
  %52 = fmul double %49, 0x3DEA39EF35793C76
  br label %53

53:                                               ; preds = %39, %41, %43
  %54 = phi i32 [ 1, %39 ], [ -1, %41 ], [ %48, %43 ]
  %55 = phi double [ 0x3DEA39EF35793C76, %39 ], [ 0xBDEA39EF35793C76, %41 ], [ %52, %43 ]
  %56 = phi double [ %40, %39 ], [ %42, %41 ], [ %51, %43 ]
  %57 = fsub double %56, %55
  %58 = fsub double %56, %57
  %59 = fsub double %58, %55
  br label %69

60:                                               ; preds = %33
  %61 = icmp ult i32 %6, 1016070144
  br i1 %61, label %62, label %69

62:                                               ; preds = %60
  %63 = load volatile double, double* @_ZZN2v84base7ieee7545expm1EdE4huge, align 8
  %64 = fadd double %63, %0
  %65 = load volatile double, double* @_ZZN2v84base7ieee7545expm1EdE4huge, align 8
  %66 = fadd double %65, %0
  %67 = fsub double %64, %66
  %68 = fsub double %0, %67
  br label %153

69:                                               ; preds = %60, %53
  %70 = phi double [ %57, %53 ], [ %0, %60 ]
  %71 = phi double [ %59, %53 ], [ undef, %60 ]
  %72 = phi i32 [ %54, %53 ], [ 0, %60 ]
  %73 = fmul double %70, 5.000000e-01
  %74 = fmul double %70, %73
  %75 = fmul double %74, 0x3E8AFDB76E09C32D
  %76 = fsub double 0x3ED0CFCA86E65239, %75
  %77 = fmul double %74, %76
  %78 = fadd double %77, 0xBF14CE199EAADBB7
  %79 = fmul double %74, %78
  %80 = fadd double %79, 0x3F5A01A019FE5585
  %81 = fmul double %74, %80
  %82 = fadd double %81, 0xBFA11111111110F4
  %83 = fmul double %74, %82
  %84 = fadd double %83, 1.000000e+00
  %85 = fmul double %73, %84
  %86 = fsub double 3.000000e+00, %85
  %87 = fsub double %84, %86
  %88 = fmul double %70, %86
  %89 = fsub double 6.000000e+00, %88
  %90 = fdiv double %87, %89
  %91 = fmul double %74, %90
  %92 = icmp eq i32 %72, 0
  br i1 %92, label %93, label %97

93:                                               ; preds = %69
  %94 = fmul double %70, %91
  %95 = fsub double %94, %74
  %96 = fsub double %70, %95
  br label %153

97:                                               ; preds = %69
  %98 = shl i32 %72, 20
  %99 = add nsw i32 %98, 1072693248
  %100 = zext i32 %99 to i64
  %101 = shl nuw i64 %100, 32
  %102 = bitcast i64 %101 to double
  %103 = fsub double %91, %71
  %104 = fmul double %70, %103
  %105 = fsub double %104, %71
  %106 = fsub double %105, %74
  switch i32 %72, label %121 [
    i32 -1, label %107
    i32 1, label %111
  ]

107:                                              ; preds = %97
  %108 = fsub double %70, %106
  %109 = fmul double %108, 5.000000e-01
  %110 = fadd double %109, -5.000000e-01
  br label %153

111:                                              ; preds = %97
  %112 = fcmp olt double %70, -2.500000e-01
  br i1 %112, label %113, label %117

113:                                              ; preds = %111
  %114 = fadd double %70, 5.000000e-01
  %115 = fsub double %106, %114
  %116 = fmul double %115, -2.000000e+00
  br label %153

117:                                              ; preds = %111
  %118 = fsub double %70, %106
  %119 = fmul double %118, 2.000000e+00
  %120 = fadd double %119, 1.000000e+00
  br label %153

121:                                              ; preds = %97
  %122 = icmp ugt i32 %72, 56
  br i1 %122, label %123, label %132

123:                                              ; preds = %121
  %124 = fsub double %70, %106
  %125 = fadd double %124, 1.000000e+00
  %126 = icmp eq i32 %72, 1024
  %127 = fmul double %125, 2.000000e+00
  %128 = fmul double %127, 0x7FE0000000000000
  %129 = fmul double %125, %102
  %130 = select i1 %126, double %128, double %129
  %131 = fadd double %130, -1.000000e+00
  br label %153

132:                                              ; preds = %121
  %133 = icmp slt i32 %72, 20
  br i1 %133, label %134, label %142

134:                                              ; preds = %132
  %135 = lshr i32 2097152, %72
  %136 = sub nuw nsw i32 1072693248, %135
  %137 = zext i32 %136 to i64
  %138 = shl nuw i64 %137, 32
  %139 = bitcast i64 %138 to double
  %140 = fsub double %106, %70
  %141 = fsub double %139, %140
  br label %150

142:                                              ; preds = %132
  %143 = sub i32 1072693248, %98
  %144 = zext i32 %143 to i64
  %145 = shl nuw i64 %144, 32
  %146 = bitcast i64 %145 to double
  %147 = fadd double %106, %146
  %148 = fsub double %70, %147
  %149 = fadd double %148, 1.000000e+00
  br label %150

150:                                              ; preds = %134, %142
  %151 = phi double [ %141, %134 ], [ %149, %142 ]
  %152 = fmul double %151, %102
  br label %153

153:                                              ; preds = %28, %17, %19, %150, %123, %117, %113, %107, %93, %62, %24
  %154 = phi double [ %27, %24 ], [ %96, %93 ], [ %110, %107 ], [ %116, %113 ], [ %120, %117 ], [ %131, %123 ], [ %152, %150 ], [ %68, %62 ], [ %18, %17 ], [ %21, %19 ], [ -1.000000e+00, %28 ]
  ret double %154
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden double @_ZN2v84base7ieee7544cbrtEd(double) local_unnamed_addr #4 {
  %2 = bitcast double %0 to i64
  %3 = lshr i64 %2, 32
  %4 = trunc i64 %3 to i32
  %5 = trunc i64 %2 to i32
  %6 = and i32 %4, -2147483648
  %7 = and i32 %4, 2147483647
  %8 = icmp ugt i32 %7, 2146435071
  br i1 %8, label %9, label %11

9:                                                ; preds = %1
  %10 = fadd double %0, %0
  br label %57

11:                                               ; preds = %1
  %12 = icmp ult i32 %7, 1048576
  br i1 %12, label %13, label %22

13:                                               ; preds = %11
  %14 = or i32 %7, %5
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %57, label %16

16:                                               ; preds = %13
  %17 = fmul double %0, 0x4350000000000000
  %18 = bitcast double %17 to i64
  %19 = lshr i64 %18, 32
  %20 = trunc i64 %19 to i32
  %21 = and i32 %20, 2147483647
  br label %22

22:                                               ; preds = %11, %16
  %23 = phi i32 [ %21, %16 ], [ %7, %11 ]
  %24 = phi i32 [ 696219795, %16 ], [ 715094163, %11 ]
  %25 = udiv i32 %23, 3
  %26 = add nuw nsw i32 %25, %24
  %27 = or i32 %26, %6
  %28 = zext i32 %27 to i64
  %29 = shl nuw i64 %28, 32
  %30 = bitcast i64 %29 to double
  %31 = fmul double %30, %30
  %32 = fdiv double %30, %0
  %33 = fmul double %31, %32
  %34 = fmul double %33, 0x3FF9F1604A49D6C2
  %35 = fadd double %34, 0xBFFE28E092F02420
  %36 = fmul double %33, %35
  %37 = fadd double %36, 0x3FFE03E60F61E692
  %38 = fmul double %33, %33
  %39 = fmul double %33, %38
  %40 = fmul double %33, 0x3FC2B000D4E4EDD7
  %41 = fadd double %40, 0xBFE844CBBEE751D9
  %42 = fmul double %39, %41
  %43 = fadd double %42, %37
  %44 = fmul double %43, %30
  %45 = bitcast double %44 to i64
  %46 = add i64 %45, 2147483648
  %47 = and i64 %46, -1073741824
  %48 = bitcast i64 %47 to double
  %49 = fmul double %48, %48
  %50 = fdiv double %0, %49
  %51 = fadd double %48, %48
  %52 = fsub double %50, %48
  %53 = fadd double %51, %50
  %54 = fdiv double %52, %53
  %55 = fmul double %54, %48
  %56 = fadd double %55, %48
  br label %57

57:                                               ; preds = %13, %22, %9
  %58 = phi double [ %10, %9 ], [ %56, %22 ], [ %0, %13 ]
  ret double %58
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN2v84base7ieee7543sinEd(double) local_unnamed_addr #0 {
  %2 = alloca [2 x double], align 16
  %3 = bitcast double %0 to i64
  %4 = bitcast [2 x double]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #7
  %5 = lshr i64 %3, 32
  %6 = trunc i64 %5 to i32
  %7 = and i32 %6, 2147483647
  %8 = icmp ult i32 %7, 1072243196
  br i1 %8, label %9, label %30

9:                                                ; preds = %1
  %10 = and i64 %3, 9205357638345293824
  %11 = icmp ult i64 %10, 4485585228861014016
  %12 = fptosi double %0 to i32
  %13 = icmp eq i32 %12, 0
  %14 = and i1 %13, %11
  br i1 %14, label %202, label %15

15:                                               ; preds = %9
  %16 = fmul double %0, %0
  %17 = fmul double %16, %0
  %18 = fmul double %16, 0x3DE5D93A5ACFD57C
  %19 = fadd double %18, 0xBE5AE5E68A2B9CEB
  %20 = fmul double %16, %19
  %21 = fadd double %20, 0x3EC71DE357B1FE7D
  %22 = fmul double %16, %21
  %23 = fadd double %22, 0xBF2A01A019C161D5
  %24 = fmul double %16, %23
  %25 = fadd double %24, 0x3F8111111110F8A6
  %26 = fmul double %16, %25
  %27 = fadd double %26, 0xBFC5555555555549
  %28 = fmul double %17, %27
  %29 = fadd double %28, %0
  br label %202

30:                                               ; preds = %1
  %31 = icmp ugt i32 %7, 2146435071
  br i1 %31, label %32, label %34

32:                                               ; preds = %30
  %33 = fsub double %0, %0
  br label %202

34:                                               ; preds = %30
  %35 = getelementptr inbounds [2 x double], [2 x double]* %2, i64 0, i64 0
  %36 = call fastcc i32 @_ZN2v84base7ieee75412_GLOBAL__N_118__ieee754_rem_pio2EdPd(double %0, double* nonnull %35)
  %37 = and i32 %36, 3
  switch i32 %37, label %149 [
    i32 0, label %38
    i32 1, label %67
    i32 2, label %117
  ]

38:                                               ; preds = %34
  %39 = load double, double* %35, align 16
  %40 = getelementptr inbounds [2 x double], [2 x double]* %2, i64 0, i64 1
  %41 = load double, double* %40, align 8
  %42 = bitcast double %39 to i64
  %43 = and i64 %42, 9205357638345293824
  %44 = icmp ult i64 %43, 4485585228861014016
  %45 = fptosi double %39 to i32
  %46 = icmp eq i32 %45, 0
  %47 = and i1 %46, %44
  br i1 %47, label %202, label %48

48:                                               ; preds = %38
  %49 = fmul double %39, %39
  %50 = fmul double %39, %49
  %51 = fmul double %49, 0x3DE5D93A5ACFD57C
  %52 = fadd double %51, 0xBE5AE5E68A2B9CEB
  %53 = fmul double %49, %52
  %54 = fadd double %53, 0x3EC71DE357B1FE7D
  %55 = fmul double %49, %54
  %56 = fadd double %55, 0xBF2A01A019C161D5
  %57 = fmul double %49, %56
  %58 = fadd double %57, 0x3F8111111110F8A6
  %59 = fmul double %41, 5.000000e-01
  %60 = fmul double %50, %58
  %61 = fsub double %59, %60
  %62 = fmul double %49, %61
  %63 = fsub double %62, %41
  %64 = fmul double %50, 0x3FC5555555555549
  %65 = fadd double %64, %63
  %66 = fsub double %39, %65
  br label %202

67:                                               ; preds = %34
  %68 = load double, double* %35, align 16
  %69 = getelementptr inbounds [2 x double], [2 x double]* %2, i64 0, i64 1
  %70 = load double, double* %69, align 8
  %71 = bitcast double %68 to i64
  %72 = lshr i64 %71, 32
  %73 = trunc i64 %72 to i32
  %74 = and i32 %73, 2147483647
  %75 = icmp ult i32 %74, 1044381696
  %76 = fptosi double %68 to i32
  %77 = icmp eq i32 %76, 0
  %78 = and i1 %77, %75
  br i1 %78, label %202, label %79

79:                                               ; preds = %67
  %80 = fmul double %68, %68
  %81 = fmul double %80, 0x3DA8FAE9BE8838D4
  %82 = fsub double 0x3E21EE9EBDB4B1C4, %81
  %83 = fmul double %80, %82
  %84 = fadd double %83, 0xBE927E4F809C52AD
  %85 = fmul double %80, %84
  %86 = fadd double %85, 0x3EFA01A019CB1590
  %87 = fmul double %80, %86
  %88 = fadd double %87, 0xBF56C16C16C15177
  %89 = fmul double %80, %88
  %90 = fadd double %89, 0x3FA555555555554C
  %91 = fmul double %80, %90
  %92 = icmp ult i32 %74, 1070805811
  br i1 %92, label %93, label %100

93:                                               ; preds = %79
  %94 = fmul double %80, 5.000000e-01
  %95 = fmul double %80, %91
  %96 = fmul double %68, %70
  %97 = fsub double %95, %96
  %98 = fsub double %97, %94
  %99 = fadd double %98, 1.000000e+00
  br label %202

100:                                              ; preds = %79
  %101 = icmp ugt i32 %74, 1072234496
  br i1 %101, label %107, label %102

102:                                              ; preds = %100
  %103 = add nsw i32 %74, -2097152
  %104 = zext i32 %103 to i64
  %105 = shl nuw i64 %104, 32
  %106 = bitcast i64 %105 to double
  br label %107

107:                                              ; preds = %102, %100
  %108 = phi double [ %106, %102 ], [ 2.812500e-01, %100 ]
  %109 = fmul double %80, 5.000000e-01
  %110 = fsub double %109, %108
  %111 = fsub double 1.000000e+00, %108
  %112 = fmul double %80, %91
  %113 = fmul double %68, %70
  %114 = fsub double %112, %113
  %115 = fsub double %110, %114
  %116 = fsub double %111, %115
  br label %202

117:                                              ; preds = %34
  %118 = load double, double* %35, align 16
  %119 = getelementptr inbounds [2 x double], [2 x double]* %2, i64 0, i64 1
  %120 = load double, double* %119, align 8
  %121 = bitcast double %118 to i64
  %122 = and i64 %121, 9205357638345293824
  %123 = icmp ult i64 %122, 4485585228861014016
  %124 = fptosi double %118 to i32
  %125 = icmp eq i32 %124, 0
  %126 = and i1 %125, %123
  br i1 %126, label %146, label %127

127:                                              ; preds = %117
  %128 = fmul double %118, %118
  %129 = fmul double %118, %128
  %130 = fmul double %128, 0x3DE5D93A5ACFD57C
  %131 = fadd double %130, 0xBE5AE5E68A2B9CEB
  %132 = fmul double %128, %131
  %133 = fadd double %132, 0x3EC71DE357B1FE7D
  %134 = fmul double %128, %133
  %135 = fadd double %134, 0xBF2A01A019C161D5
  %136 = fmul double %128, %135
  %137 = fadd double %136, 0x3F8111111110F8A6
  %138 = fmul double %120, 5.000000e-01
  %139 = fmul double %129, %137
  %140 = fsub double %138, %139
  %141 = fmul double %128, %140
  %142 = fsub double %141, %120
  %143 = fmul double %129, 0x3FC5555555555549
  %144 = fadd double %143, %142
  %145 = fsub double %118, %144
  br label %146

146:                                              ; preds = %117, %127
  %147 = phi double [ %145, %127 ], [ %118, %117 ]
  %148 = fsub double -0.000000e+00, %147
  br label %202

149:                                              ; preds = %34
  %150 = load double, double* %35, align 16
  %151 = getelementptr inbounds [2 x double], [2 x double]* %2, i64 0, i64 1
  %152 = load double, double* %151, align 8
  %153 = bitcast double %150 to i64
  %154 = lshr i64 %153, 32
  %155 = trunc i64 %154 to i32
  %156 = and i32 %155, 2147483647
  %157 = icmp ult i32 %156, 1044381696
  %158 = fptosi double %150 to i32
  %159 = icmp eq i32 %158, 0
  %160 = and i1 %159, %157
  br i1 %160, label %199, label %161

161:                                              ; preds = %149
  %162 = fmul double %150, %150
  %163 = fmul double %162, 0x3DA8FAE9BE8838D4
  %164 = fsub double 0x3E21EE9EBDB4B1C4, %163
  %165 = fmul double %162, %164
  %166 = fadd double %165, 0xBE927E4F809C52AD
  %167 = fmul double %162, %166
  %168 = fadd double %167, 0x3EFA01A019CB1590
  %169 = fmul double %162, %168
  %170 = fadd double %169, 0xBF56C16C16C15177
  %171 = fmul double %162, %170
  %172 = fadd double %171, 0x3FA555555555554C
  %173 = fmul double %162, %172
  %174 = icmp ult i32 %156, 1070805811
  br i1 %174, label %175, label %182

175:                                              ; preds = %161
  %176 = fmul double %162, 5.000000e-01
  %177 = fmul double %162, %173
  %178 = fmul double %150, %152
  %179 = fsub double %177, %178
  %180 = fsub double %179, %176
  %181 = fadd double %180, 1.000000e+00
  br label %199

182:                                              ; preds = %161
  %183 = icmp ugt i32 %156, 1072234496
  br i1 %183, label %189, label %184

184:                                              ; preds = %182
  %185 = add nsw i32 %156, -2097152
  %186 = zext i32 %185 to i64
  %187 = shl nuw i64 %186, 32
  %188 = bitcast i64 %187 to double
  br label %189

189:                                              ; preds = %184, %182
  %190 = phi double [ %188, %184 ], [ 2.812500e-01, %182 ]
  %191 = fmul double %162, 5.000000e-01
  %192 = fsub double %191, %190
  %193 = fsub double 1.000000e+00, %190
  %194 = fmul double %162, %173
  %195 = fmul double %150, %152
  %196 = fsub double %194, %195
  %197 = fsub double %192, %196
  %198 = fsub double %193, %197
  br label %199

199:                                              ; preds = %149, %175, %189
  %200 = phi double [ %181, %175 ], [ %198, %189 ], [ 1.000000e+00, %149 ]
  %201 = fsub double -0.000000e+00, %200
  br label %202

202:                                              ; preds = %107, %93, %67, %48, %38, %15, %9, %199, %146, %32
  %203 = phi double [ %33, %32 ], [ %201, %199 ], [ %148, %146 ], [ %29, %15 ], [ %0, %9 ], [ %66, %48 ], [ %39, %38 ], [ %99, %93 ], [ %116, %107 ], [ 1.000000e+00, %67 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #7
  ret double %203
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN2v84base7ieee7543tanEd(double) local_unnamed_addr #0 {
  %2 = alloca [2 x double], align 16
  %3 = bitcast double %0 to i64
  %4 = bitcast [2 x double]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #7
  %5 = lshr i64 %3, 32
  %6 = trunc i64 %5 to i32
  %7 = and i32 %6, 2147483647
  %8 = icmp ult i32 %7, 1072243196
  br i1 %8, label %9, label %11

9:                                                ; preds = %1
  %10 = tail call fastcc double @_ZN2v84base7ieee75412_GLOBAL__N_112__kernel_tanEddi(double %0, double 0.000000e+00, i32 1)
  br label %25

11:                                               ; preds = %1
  %12 = icmp ugt i32 %7, 2146435071
  br i1 %12, label %13, label %15

13:                                               ; preds = %11
  %14 = fsub double %0, %0
  br label %25

15:                                               ; preds = %11
  %16 = getelementptr inbounds [2 x double], [2 x double]* %2, i64 0, i64 0
  %17 = call fastcc i32 @_ZN2v84base7ieee75412_GLOBAL__N_118__ieee754_rem_pio2EdPd(double %0, double* nonnull %16)
  %18 = load double, double* %16, align 16
  %19 = getelementptr inbounds [2 x double], [2 x double]* %2, i64 0, i64 1
  %20 = load double, double* %19, align 8
  %21 = shl i32 %17, 1
  %22 = and i32 %21, 2
  %23 = sub nsw i32 1, %22
  %24 = call fastcc double @_ZN2v84base7ieee75412_GLOBAL__N_112__kernel_tanEddi(double %18, double %20, i32 %23)
  br label %25

25:                                               ; preds = %15, %13, %9
  %26 = phi double [ %10, %9 ], [ %14, %13 ], [ %24, %15 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #7
  ret double %26
}

; Function Attrs: nounwind readnone ssp uwtable
define internal fastcc double @_ZN2v84base7ieee75412_GLOBAL__N_112__kernel_tanEddi(double, double, i32) unnamed_addr #4 {
  %4 = bitcast double %0 to i64
  %5 = lshr i64 %4, 32
  %6 = trunc i64 %5 to i32
  %7 = and i32 %6, 2147483647
  %8 = icmp ult i32 %7, 1043333120
  br i1 %8, label %9, label %40

9:                                                ; preds = %3
  %10 = fptosi double %0 to i32
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %51

12:                                               ; preds = %9
  %13 = trunc i64 %4 to i32
  %14 = add nsw i32 %2, 1
  %15 = or i32 %14, %13
  %16 = or i32 %15, %7
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %21

18:                                               ; preds = %12
  %19 = tail call double @llvm.fabs.f64(double %0)
  %20 = fdiv double 1.000000e+00, %19
  br label %120

21:                                               ; preds = %12
  %22 = icmp eq i32 %2, 1
  br i1 %22, label %120, label %23

23:                                               ; preds = %21
  %24 = fadd double %0, %1
  %25 = bitcast double %24 to i64
  %26 = and i64 %25, -4294967296
  %27 = bitcast i64 %26 to double
  %28 = fsub double %27, %0
  %29 = fsub double %1, %28
  %30 = fdiv double -1.000000e+00, %24
  %31 = bitcast double %30 to i64
  %32 = and i64 %31, -4294967296
  %33 = bitcast i64 %32 to double
  %34 = fmul double %27, %33
  %35 = fadd double %34, 1.000000e+00
  %36 = fmul double %29, %33
  %37 = fadd double %35, %36
  %38 = fmul double %30, %37
  %39 = fadd double %38, %33
  br label %120

40:                                               ; preds = %3
  %41 = icmp ugt i32 %7, 1072010279
  br i1 %41, label %42, label %51

42:                                               ; preds = %40
  %43 = icmp slt i32 %6, 0
  %44 = fsub double -0.000000e+00, %0
  %45 = fsub double -0.000000e+00, %1
  %46 = select i1 %43, double %44, double %0
  %47 = select i1 %43, double %45, double %1
  %48 = fsub double 0x3FE921FB54442D18, %46
  %49 = fsub double 0x3C81A62633145C07, %47
  %50 = fadd double %48, %49
  br label %51

51:                                               ; preds = %9, %42, %40
  %52 = phi i1 [ true, %42 ], [ false, %40 ], [ false, %9 ]
  %53 = phi double [ %50, %42 ], [ %0, %40 ], [ %0, %9 ]
  %54 = phi double [ 0.000000e+00, %42 ], [ %1, %40 ], [ %1, %9 ]
  %55 = fmul double %53, %53
  %56 = fmul double %55, %55
  %57 = fmul double %56, 0x3EF375CBDB605373
  %58 = fsub double 0x3F147E88A03792A6, %57
  %59 = fmul double %56, %58
  %60 = fadd double %59, 0x3F4344D8F2F26501
  %61 = fmul double %56, %60
  %62 = fadd double %61, 0x3F6D6D22C9560328
  %63 = fmul double %56, %62
  %64 = fadd double %63, 0x3F9664F48406D637
  %65 = fmul double %56, %64
  %66 = fadd double %65, 0x3FC111111110FE7A
  %67 = fmul double %56, 0x3EFB2A7074BF7AD4
  %68 = fadd double %67, 0x3F12B80F32F0A7E9
  %69 = fmul double %56, %68
  %70 = fadd double %69, 0x3F3026F71A8D1068
  %71 = fmul double %56, %70
  %72 = fadd double %71, 0x3F57DBC8FEE08315
  %73 = fmul double %56, %72
  %74 = fadd double %73, 0x3F8226E3E96E8493
  %75 = fmul double %56, %74
  %76 = fadd double %75, 0x3FABA1BA1BB341FE
  %77 = fmul double %55, %76
  %78 = fmul double %53, %55
  %79 = fadd double %66, %77
  %80 = fmul double %78, %79
  %81 = fadd double %54, %80
  %82 = fmul double %55, %81
  %83 = fadd double %54, %82
  %84 = fmul double %78, 0x3FD5555555555563
  %85 = fadd double %84, %83
  %86 = fadd double %53, %85
  br i1 %52, label %87, label %102

87:                                               ; preds = %51
  %88 = sitofp i32 %2 to double
  %89 = lshr i64 %4, 62
  %90 = trunc i64 %89 to i32
  %91 = and i32 %90, 2
  %92 = sub nsw i32 1, %91
  %93 = sitofp i32 %92 to double
  %94 = fmul double %86, %86
  %95 = fadd double %86, %88
  %96 = fdiv double %94, %95
  %97 = fsub double %96, %85
  %98 = fsub double %53, %97
  %99 = fmul double %98, 2.000000e+00
  %100 = fsub double %88, %99
  %101 = fmul double %100, %93
  br label %120

102:                                              ; preds = %51
  %103 = icmp eq i32 %2, 1
  br i1 %103, label %120, label %104

104:                                              ; preds = %102
  %105 = bitcast double %86 to i64
  %106 = and i64 %105, -4294967296
  %107 = bitcast i64 %106 to double
  %108 = fsub double %107, %53
  %109 = fsub double %85, %108
  %110 = fdiv double -1.000000e+00, %86
  %111 = bitcast double %110 to i64
  %112 = and i64 %111, -4294967296
  %113 = bitcast i64 %112 to double
  %114 = fmul double %107, %113
  %115 = fadd double %114, 1.000000e+00
  %116 = fmul double %109, %113
  %117 = fadd double %115, %116
  %118 = fmul double %110, %117
  %119 = fadd double %118, %113
  br label %120

120:                                              ; preds = %21, %102, %18, %23, %104, %87
  %121 = phi double [ %101, %87 ], [ %119, %104 ], [ %20, %18 ], [ %39, %23 ], [ %86, %102 ], [ %0, %21 ]
  ret double %121
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN2v84base7ieee7544coshEd(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = lshr i64 %2, 32
  %4 = trunc i64 %3 to i32
  %5 = and i32 %4, 2147483647
  %6 = icmp ult i32 %5, 1071001155
  br i1 %6, label %7, label %17

7:                                                ; preds = %1
  %8 = tail call double @llvm.fabs.f64(double %0)
  %9 = tail call double @_ZN2v84base7ieee7545expm1Ed(double %8)
  %10 = fadd double %9, 1.000000e+00
  %11 = icmp ult i32 %5, 1015021568
  br i1 %11, label %46, label %12

12:                                               ; preds = %7
  %13 = fmul double %9, %9
  %14 = fadd double %10, %10
  %15 = fdiv double %13, %14
  %16 = fadd double %15, 1.000000e+00
  br label %46

17:                                               ; preds = %1
  %18 = icmp ult i32 %5, 1077280768
  br i1 %18, label %19, label %25

19:                                               ; preds = %17
  %20 = tail call double @llvm.fabs.f64(double %0)
  %21 = tail call double @_ZN2v84base7ieee7543expEd(double %20)
  %22 = fmul double %21, 5.000000e-01
  %23 = fdiv double 5.000000e-01, %21
  %24 = fadd double %22, %23
  br label %46

25:                                               ; preds = %17
  %26 = icmp ult i32 %5, 1082535490
  %27 = tail call double @llvm.fabs.f64(double %0)
  br i1 %26, label %28, label %31

28:                                               ; preds = %25
  %29 = tail call double @_ZN2v84base7ieee7543expEd(double %27)
  %30 = fmul double %29, 5.000000e-01
  br label %46

31:                                               ; preds = %25
  %32 = fcmp ugt double %27, 0x408633CE8FB9F87D
  br i1 %32, label %38, label %33

33:                                               ; preds = %31
  %34 = fmul double %27, 5.000000e-01
  %35 = tail call double @_ZN2v84base7ieee7543expEd(double %34)
  %36 = fmul double %35, 5.000000e-01
  %37 = fmul double %35, %36
  br label %46

38:                                               ; preds = %31
  %39 = icmp ugt i32 %5, 2146435071
  br i1 %39, label %40, label %42

40:                                               ; preds = %38
  %41 = fmul double %0, %0
  br label %46

42:                                               ; preds = %38
  %43 = load volatile double, double* @_ZZN2v84base7ieee7544coshEdE4huge, align 8
  %44 = load volatile double, double* @_ZZN2v84base7ieee7544coshEdE4huge, align 8
  %45 = fmul double %43, %44
  br label %46

46:                                               ; preds = %12, %7, %42, %40, %33, %28, %19
  %47 = phi double [ %24, %19 ], [ %30, %28 ], [ %37, %33 ], [ %41, %40 ], [ %45, %42 ], [ %16, %12 ], [ %10, %7 ]
  ret double %47
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN2v84base7ieee7543powEdd(double, double) local_unnamed_addr #0 {
  %3 = bitcast double %0 to i64
  %4 = bitcast double %1 to i64
  %5 = lshr i64 %3, 32
  %6 = trunc i64 %5 to i32
  %7 = trunc i64 %3 to i32
  %8 = lshr i64 %4, 32
  %9 = trunc i64 %8 to i32
  %10 = trunc i64 %4 to i32
  %11 = and i32 %6, 2147483647
  %12 = and i32 %9, 2147483647
  %13 = or i32 %12, %10
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %437, label %15

15:                                               ; preds = %2
  %16 = icmp ugt i32 %11, 2146435072
  br i1 %16, label %27, label %17

17:                                               ; preds = %15
  %18 = icmp eq i32 %11, 2146435072
  %19 = icmp ne i32 %7, 0
  %20 = and i1 %19, %18
  %21 = icmp ugt i32 %12, 2146435072
  %22 = or i1 %20, %21
  br i1 %22, label %27, label %23

23:                                               ; preds = %17
  %24 = icmp eq i32 %12, 2146435072
  %25 = icmp ne i32 %10, 0
  %26 = and i1 %25, %24
  br i1 %26, label %27, label %29

27:                                               ; preds = %23, %17, %15
  %28 = fadd double %0, %1
  br label %437

29:                                               ; preds = %23
  %30 = icmp slt i32 %6, 0
  br i1 %30, label %31, label %56

31:                                               ; preds = %29
  %32 = icmp ugt i32 %12, 1128267775
  br i1 %32, label %56, label %33

33:                                               ; preds = %31
  %34 = icmp ugt i32 %12, 1072693247
  br i1 %34, label %35, label %56

35:                                               ; preds = %33
  %36 = lshr i32 %12, 20
  %37 = icmp ugt i32 %12, 1094713343
  br i1 %37, label %38, label %46

38:                                               ; preds = %35
  %39 = sub nuw nsw i32 1075, %36
  %40 = lshr i32 %10, %39
  %41 = shl i32 %40, %39
  %42 = icmp eq i32 %41, %10
  br i1 %42, label %43, label %56

43:                                               ; preds = %38
  %44 = and i32 %40, 1
  %45 = sub nuw nsw i32 2, %44
  br label %56

46:                                               ; preds = %35
  %47 = icmp eq i32 %10, 0
  br i1 %47, label %48, label %97

48:                                               ; preds = %46
  %49 = sub nsw i32 1043, %36
  %50 = lshr i32 %12, %49
  %51 = shl i32 %50, %49
  %52 = icmp eq i32 %51, %12
  br i1 %52, label %53, label %59

53:                                               ; preds = %48
  %54 = and i32 %50, 1
  %55 = sub nuw nsw i32 2, %54
  br label %59

56:                                               ; preds = %31, %43, %38, %33, %29
  %57 = phi i32 [ %45, %43 ], [ 0, %38 ], [ 0, %33 ], [ 0, %29 ], [ 2, %31 ]
  %58 = icmp eq i32 %10, 0
  br i1 %58, label %59, label %97

59:                                               ; preds = %53, %48, %56
  %60 = phi i32 [ %57, %56 ], [ 0, %48 ], [ %55, %53 ]
  br i1 %24, label %61, label %76

61:                                               ; preds = %59
  %62 = add nsw i32 %11, -1072693248
  %63 = or i32 %62, %7
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %67

65:                                               ; preds = %61
  %66 = fsub double %1, %1
  br label %437

67:                                               ; preds = %61
  %68 = icmp ugt i32 %11, 1072693247
  br i1 %68, label %69, label %72

69:                                               ; preds = %67
  %70 = icmp sgt i32 %9, -1
  %71 = select i1 %70, double %1, double 0.000000e+00
  br label %437

72:                                               ; preds = %67
  %73 = icmp slt i32 %9, 0
  %74 = fsub double -0.000000e+00, %1
  %75 = select i1 %73, double %74, double 0.000000e+00
  br label %437

76:                                               ; preds = %59
  %77 = icmp eq i32 %12, 1072693248
  br i1 %77, label %78, label %87

78:                                               ; preds = %76
  %79 = icmp slt i32 %9, 0
  br i1 %79, label %80, label %437

80:                                               ; preds = %78
  %81 = fcmp une double %0, 0.000000e+00
  br i1 %81, label %82, label %84

82:                                               ; preds = %80
  %83 = fdiv double 1.000000e+00, %0
  br label %437

84:                                               ; preds = %80
  %85 = icmp sgt i64 %3, -1
  %86 = select i1 %85, double 0x7FF0000000000000, double 0xFFF0000000000000
  br label %437

87:                                               ; preds = %76
  %88 = icmp eq i32 %9, 1073741824
  br i1 %88, label %89, label %91

89:                                               ; preds = %87
  %90 = fmul double %0, %0
  br label %437

91:                                               ; preds = %87
  %92 = icmp eq i32 %9, 1071644672
  %93 = icmp sgt i32 %6, -1
  %94 = and i1 %93, %92
  br i1 %94, label %95, label %97

95:                                               ; preds = %91
  %96 = tail call double @sqrt(double %0) #7
  br label %437

97:                                               ; preds = %46, %91, %56
  %98 = phi i32 [ %60, %91 ], [ %57, %56 ], [ 0, %46 ]
  %99 = tail call double @llvm.fabs.f64(double %0)
  %100 = bitcast double %99 to i64
  %101 = icmp eq i32 %7, 0
  br i1 %101, label %102, label %125

102:                                              ; preds = %97
  %103 = icmp eq i32 %11, 0
  %104 = or i32 %11, 1073741824
  %105 = icmp eq i32 %104, 2146435072
  %106 = or i1 %103, %105
  br i1 %106, label %107, label %125

107:                                              ; preds = %102
  %108 = icmp slt i32 %9, 0
  br i1 %108, label %109, label %115

109:                                              ; preds = %107
  %110 = fcmp une double %0, 0.000000e+00
  %111 = fdiv double 1.000000e+00, %99
  %112 = icmp sgt i64 %100, -1
  %113 = select i1 %112, double 0x7FF0000000000000, double 0xFFF0000000000000
  %114 = select i1 %110, double %111, double %113
  br label %115

115:                                              ; preds = %109, %107
  %116 = phi double [ %99, %107 ], [ %114, %109 ]
  br i1 %30, label %117, label %437

117:                                              ; preds = %115
  %118 = add nsw i32 %11, -1072693248
  %119 = or i32 %98, %118
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %437, label %121

121:                                              ; preds = %117
  %122 = icmp eq i32 %98, 1
  %123 = fsub double -0.000000e+00, %116
  %124 = select i1 %122, double %123, double %116
  ret double %124

125:                                              ; preds = %102, %97
  %126 = ashr i32 %6, 31
  %127 = add nsw i32 %126, 1
  %128 = or i32 %98, %127
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %437, label %130

130:                                              ; preds = %125
  %131 = add nsw i32 %98, -1
  %132 = or i32 %131, %127
  %133 = icmp eq i32 %132, 0
  %134 = select i1 %133, double -1.000000e+00, double 1.000000e+00
  %135 = icmp ugt i32 %12, 1105199104
  br i1 %135, label %136, label %181

136:                                              ; preds = %130
  %137 = icmp ugt i32 %12, 1139802112
  br i1 %137, label %138, label %146

138:                                              ; preds = %136
  %139 = icmp ult i32 %11, 1072693248
  br i1 %139, label %140, label %143

140:                                              ; preds = %138
  %141 = icmp slt i32 %9, 0
  %142 = select i1 %141, double 0x7FF0000000000000, double 0.000000e+00
  br label %437

143:                                              ; preds = %138
  %144 = icmp sgt i32 %9, 0
  %145 = select i1 %144, double 0x7FF0000000000000, double 0.000000e+00
  br label %437

146:                                              ; preds = %136
  %147 = icmp ult i32 %11, 1072693247
  br i1 %147, label %148, label %155

148:                                              ; preds = %146
  %149 = icmp slt i32 %9, 0
  %150 = fmul double %134, 1.000000e+300
  %151 = fmul double %150, 1.000000e+300
  %152 = fmul double %134, 1.000000e-300
  %153 = fmul double %152, 1.000000e-300
  %154 = select i1 %149, double %151, double %153
  br label %437

155:                                              ; preds = %146
  %156 = icmp ugt i32 %11, 1072693248
  br i1 %156, label %157, label %164

157:                                              ; preds = %155
  %158 = icmp sgt i32 %9, 0
  %159 = fmul double %134, 1.000000e+300
  %160 = fmul double %159, 1.000000e+300
  %161 = fmul double %134, 1.000000e-300
  %162 = fmul double %161, 1.000000e-300
  %163 = select i1 %158, double %160, double %162
  br label %437

164:                                              ; preds = %155
  %165 = fadd double %99, -1.000000e+00
  %166 = fmul double %165, %165
  %167 = fmul double %165, 2.500000e-01
  %168 = fsub double 0x3FD5555555555555, %167
  %169 = fmul double %165, %168
  %170 = fsub double 5.000000e-01, %169
  %171 = fmul double %166, %170
  %172 = fmul double %165, 0x3FF7154760000000
  %173 = fmul double %165, 0x3E54AE0BF85DDF44
  %174 = fmul double %171, 0x3FF71547652B82FE
  %175 = fsub double %173, %174
  %176 = fadd double %172, %175
  %177 = bitcast double %176 to i64
  %178 = and i64 %177, -4294967296
  %179 = bitcast i64 %178 to double
  %180 = fsub double %179, %172
  br label %299

181:                                              ; preds = %130
  %182 = icmp ult i32 %11, 1048576
  br i1 %182, label %183, label %188

183:                                              ; preds = %181
  %184 = fmul double %99, 0x4340000000000000
  %185 = bitcast double %184 to i64
  %186 = lshr i64 %185, 32
  %187 = trunc i64 %186 to i32
  br label %188

188:                                              ; preds = %183, %181
  %189 = phi i64 [ %185, %183 ], [ %100, %181 ]
  %190 = phi i32 [ %187, %183 ], [ %11, %181 ]
  %191 = phi i32 [ -53, %183 ], [ 0, %181 ]
  %192 = ashr i32 %190, 20
  %193 = add nsw i32 %192, -1023
  %194 = add nsw i32 %193, %191
  %195 = and i32 %190, 1048575
  %196 = or i32 %195, 1072693248
  %197 = icmp ult i32 %195, 235663
  br i1 %197, label %203, label %198

198:                                              ; preds = %188
  %199 = icmp ult i32 %195, 767610
  br i1 %199, label %203, label %200

200:                                              ; preds = %198
  %201 = add nsw i32 %194, 1
  %202 = add nsw i32 %196, -1048576
  br label %203

203:                                              ; preds = %198, %188, %200
  %204 = phi i32 [ %202, %200 ], [ %196, %188 ], [ %196, %198 ]
  %205 = phi i32 [ %201, %200 ], [ %194, %188 ], [ %194, %198 ]
  %206 = phi i32 [ 0, %200 ], [ 0, %188 ], [ 1, %198 ]
  %207 = and i64 %189, 4294967295
  %208 = zext i32 %204 to i64
  %209 = shl nuw i64 %208, 32
  %210 = or i64 %209, %207
  %211 = bitcast i64 %210 to double
  %212 = zext i32 %206 to i64
  %213 = getelementptr inbounds [2 x double], [2 x double]* @_ZZN2v84base7ieee7543powEddE2bp, i64 0, i64 %212
  %214 = load double, double* %213, align 8
  %215 = fsub double %211, %214
  %216 = fadd double %214, %211
  %217 = fcmp une double %216, 0.000000e+00
  br i1 %217, label %218, label %220

218:                                              ; preds = %203
  %219 = fdiv double 1.000000e+00, %216
  br label %224

220:                                              ; preds = %203
  %221 = bitcast double %216 to i64
  %222 = icmp sgt i64 %221, -1
  %223 = select i1 %222, double 0x7FF0000000000000, double 0xFFF0000000000000
  br label %224

224:                                              ; preds = %220, %218
  %225 = phi double [ %219, %218 ], [ %223, %220 ]
  %226 = fmul double %215, %225
  %227 = bitcast double %226 to i64
  %228 = and i64 %227, -4294967296
  %229 = bitcast i64 %228 to double
  %230 = ashr i32 %204, 1
  %231 = or i32 %230, 536870912
  %232 = add nsw i32 %231, 524288
  %233 = shl nuw nsw i32 %206, 18
  %234 = add nsw i32 %232, %233
  %235 = zext i32 %234 to i64
  %236 = shl nuw i64 %235, 32
  %237 = bitcast i64 %236 to double
  %238 = fsub double %237, %214
  %239 = fsub double %211, %238
  %240 = fmul double %237, %229
  %241 = fsub double %215, %240
  %242 = fmul double %239, %229
  %243 = fsub double %241, %242
  %244 = fmul double %225, %243
  %245 = fmul double %226, %226
  %246 = fmul double %245, %245
  %247 = fmul double %245, 0x3FCA7E284A454EEF
  %248 = fadd double %247, 0x3FCD864A93C9DB65
  %249 = fmul double %245, %248
  %250 = fadd double %249, 0x3FD17460A91D4101
  %251 = fmul double %245, %250
  %252 = fadd double %251, 0x3FD55555518F264D
  %253 = fmul double %245, %252
  %254 = fadd double %253, 0x3FDB6DB6DB6FABFF
  %255 = fmul double %245, %254
  %256 = fadd double %255, 0x3FE3333333333303
  %257 = fmul double %246, %256
  %258 = fadd double %226, %229
  %259 = fmul double %258, %244
  %260 = fadd double %259, %257
  %261 = fmul double %229, %229
  %262 = fadd double %261, 3.000000e+00
  %263 = fadd double %262, %260
  %264 = bitcast double %263 to i64
  %265 = and i64 %264, -4294967296
  %266 = bitcast i64 %265 to double
  %267 = fadd double %266, -3.000000e+00
  %268 = fsub double %267, %261
  %269 = fsub double %260, %268
  %270 = fmul double %229, %266
  %271 = fmul double %244, %266
  %272 = fmul double %226, %269
  %273 = fadd double %271, %272
  %274 = fadd double %270, %273
  %275 = bitcast double %274 to i64
  %276 = and i64 %275, -4294967296
  %277 = bitcast i64 %276 to double
  %278 = fsub double %277, %270
  %279 = fsub double %273, %278
  %280 = fmul double %277, 0x3FEEC709E0000000
  %281 = fmul double %277, 0x3E3E2FE0145B01F5
  %282 = fmul double %279, 0x3FEEC709DC3A03FD
  %283 = fsub double %282, %281
  %284 = getelementptr inbounds [2 x double], [2 x double]* @_ZZN2v84base7ieee7543powEddE4dp_l, i64 0, i64 %212
  %285 = load double, double* %284, align 8
  %286 = fadd double %285, %283
  %287 = sitofp i32 %205 to double
  %288 = fadd double %280, %286
  %289 = getelementptr inbounds [2 x double], [2 x double]* @_ZZN2v84base7ieee7543powEddE4dp_h, i64 0, i64 %212
  %290 = load double, double* %289, align 8
  %291 = fadd double %290, %288
  %292 = fadd double %291, %287
  %293 = bitcast double %292 to i64
  %294 = and i64 %293, -4294967296
  %295 = bitcast i64 %294 to double
  %296 = fsub double %295, %287
  %297 = fsub double %296, %290
  %298 = fsub double %297, %280
  br label %299

299:                                              ; preds = %224, %164
  %300 = phi double [ %298, %224 ], [ %180, %164 ]
  %301 = phi double [ %286, %224 ], [ %175, %164 ]
  %302 = phi double [ %295, %224 ], [ %179, %164 ]
  %303 = fsub double %301, %300
  %304 = and i64 %4, -4294967296
  %305 = bitcast i64 %304 to double
  %306 = fsub double %1, %305
  %307 = fmul double %306, %302
  %308 = fmul double %303, %1
  %309 = fadd double %307, %308
  %310 = fmul double %302, %305
  %311 = fadd double %310, %309
  %312 = bitcast double %311 to i64
  %313 = lshr i64 %312, 32
  %314 = trunc i64 %313 to i32
  %315 = trunc i64 %312 to i32
  %316 = icmp sgt i32 %314, 1083179007
  br i1 %316, label %317, label %331

317:                                              ; preds = %299
  %318 = add nsw i32 %314, -1083179008
  %319 = or i32 %318, %315
  %320 = icmp eq i32 %319, 0
  br i1 %320, label %324, label %321

321:                                              ; preds = %317
  %322 = fmul double %134, 1.000000e+300
  %323 = fmul double %322, 1.000000e+300
  br label %437

324:                                              ; preds = %317
  %325 = fadd double %309, 0x3C971547652B82FE
  %326 = fsub double %311, %310
  %327 = fcmp ogt double %325, %326
  br i1 %327, label %328, label %347

328:                                              ; preds = %324
  %329 = fmul double %134, 1.000000e+300
  %330 = fmul double %329, 1.000000e+300
  br label %437

331:                                              ; preds = %299
  %332 = and i32 %314, 2147482624
  %333 = icmp ugt i32 %332, 1083231231
  br i1 %333, label %334, label %347

334:                                              ; preds = %331
  %335 = add nsw i32 %314, 1064252416
  %336 = or i32 %335, %315
  %337 = icmp eq i32 %336, 0
  br i1 %337, label %341, label %338

338:                                              ; preds = %334
  %339 = fmul double %134, 1.000000e-300
  %340 = fmul double %339, 1.000000e-300
  br label %437

341:                                              ; preds = %334
  %342 = fsub double %311, %310
  %343 = fcmp ugt double %309, %342
  br i1 %343, label %347, label %344

344:                                              ; preds = %341
  %345 = fmul double %134, 1.000000e-300
  %346 = fmul double %345, 1.000000e-300
  br label %437

347:                                              ; preds = %341, %331, %324
  %348 = and i32 %314, 2147483647
  %349 = icmp ugt i32 %348, 1071644672
  br i1 %349, label %350, label %373

350:                                              ; preds = %347
  %351 = lshr i32 %348, 20
  %352 = add nsw i32 %351, -1022
  %353 = lshr i32 1048576, %352
  %354 = add nsw i32 %353, %314
  %355 = lshr i32 %354, 20
  %356 = and i32 %355, 2047
  %357 = add nsw i32 %356, -1023
  %358 = ashr i32 -1048576, %357
  %359 = and i32 %358, %354
  %360 = zext i32 %359 to i64
  %361 = shl nuw i64 %360, 32
  %362 = bitcast i64 %361 to double
  %363 = and i32 %354, 1048575
  %364 = or i32 %363, 1048576
  %365 = sub nsw i32 1043, %356
  %366 = lshr i32 %364, %365
  %367 = icmp slt i32 %314, 0
  %368 = sub nsw i32 0, %366
  %369 = select i1 %367, i32 %368, i32 %366
  %370 = fsub double %310, %362
  %371 = fadd double %309, %370
  %372 = bitcast double %371 to i64
  br label %373

373:                                              ; preds = %350, %347
  %374 = phi i64 [ %372, %350 ], [ %312, %347 ]
  %375 = phi double [ %370, %350 ], [ %310, %347 ]
  %376 = phi i32 [ %369, %350 ], [ 0, %347 ]
  %377 = and i64 %374, -4294967296
  %378 = bitcast i64 %377 to double
  %379 = fmul double %378, 0x3FE62E4300000000
  %380 = fsub double %378, %375
  %381 = fsub double %309, %380
  %382 = fmul double %381, 0x3FE62E42FEFA39EF
  %383 = fmul double %378, 0x3E205C610CA86C39
  %384 = fsub double %382, %383
  %385 = fadd double %379, %384
  %386 = fsub double %385, %379
  %387 = fsub double %384, %386
  %388 = fmul double %385, %385
  %389 = fmul double %388, 0x3E66376972BEA4D0
  %390 = fadd double %389, 0xBEBBBD41C5D26BF1
  %391 = fmul double %388, %390
  %392 = fadd double %391, 0x3F11566AAF25DE2C
  %393 = fmul double %388, %392
  %394 = fadd double %393, 0xBF66C16C16BEBD93
  %395 = fmul double %388, %394
  %396 = fadd double %395, 0x3FC555555555553E
  %397 = fmul double %388, %396
  %398 = fsub double %385, %397
  %399 = fmul double %385, %398
  %400 = fadd double %398, -2.000000e+00
  %401 = fmul double %385, %387
  %402 = fadd double %387, %401
  %403 = fsub double %400, %402
  %404 = fcmp une double %403, 0.000000e+00
  br i1 %404, label %405, label %407

405:                                              ; preds = %373
  %406 = fdiv double %399, %403
  br label %415

407:                                              ; preds = %373
  %408 = fcmp ueq double %399, 0.000000e+00
  br i1 %408, label %415, label %409

409:                                              ; preds = %407
  %410 = fcmp oge double %399, 0.000000e+00
  %411 = bitcast double %403 to i64
  %412 = icmp slt i64 %411, 0
  %413 = xor i1 %410, %412
  %414 = select i1 %413, double 0x7FF0000000000000, double 0xFFF0000000000000
  br label %415

415:                                              ; preds = %405, %407, %409
  %416 = phi double [ %414, %409 ], [ %406, %405 ], [ 0x7FF8000000000000, %407 ]
  %417 = fsub double %385, %416
  %418 = fadd double %417, 1.000000e+00
  %419 = bitcast double %418 to i64
  %420 = lshr i64 %419, 32
  %421 = trunc i64 %420 to i32
  %422 = shl i32 %376, 20
  %423 = add nsw i32 %422, %421
  %424 = icmp slt i32 %423, 1048576
  br i1 %424, label %425, label %428

425:                                              ; preds = %415
  %426 = tail call double @scalbn(double %418, i32 %376) #7
  %427 = bitcast double %426 to i64
  br label %433

428:                                              ; preds = %415
  %429 = and i64 %419, 4294967295
  %430 = zext i32 %423 to i64
  %431 = shl nuw i64 %430, 32
  %432 = or i64 %431, %429
  br label %433

433:                                              ; preds = %428, %425
  %434 = phi i64 [ %427, %425 ], [ %432, %428 ]
  %435 = bitcast i64 %434 to double
  %436 = fmul double %134, %435
  br label %437

437:                                              ; preds = %115, %117, %125, %82, %84, %78, %2, %433, %344, %338, %328, %321, %157, %148, %143, %140, %95, %89, %72, %69, %65, %27
  %438 = phi double [ %28, %27 ], [ %66, %65 ], [ %71, %69 ], [ %75, %72 ], [ %90, %89 ], [ %96, %95 ], [ %142, %140 ], [ %145, %143 ], [ %154, %148 ], [ %163, %157 ], [ %323, %321 ], [ %330, %328 ], [ %436, %433 ], [ %340, %338 ], [ %346, %344 ], [ 1.000000e+00, %2 ], [ %0, %78 ], [ %83, %82 ], [ %86, %84 ], [ 0x7FF4000000000000, %125 ], [ %116, %115 ], [ 0x7FF4000000000000, %117 ]
  ret double %438
}

; Function Attrs: nounwind
declare double @scalbn(double, i32) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN2v84base7ieee7544sinhEd(double) local_unnamed_addr #0 {
  %2 = fcmp olt double %0, 0.000000e+00
  %3 = select i1 %2, double -5.000000e-01, double 5.000000e-01
  %4 = tail call double @llvm.fabs.f64(double %0)
  %5 = fcmp olt double %4, 2.200000e+01
  br i1 %5, label %6, label %24

6:                                                ; preds = %1
  %7 = fcmp olt double %4, 0x3E30000000000000
  br i1 %7, label %38, label %8

8:                                                ; preds = %6
  %9 = tail call double @_ZN2v84base7ieee7545expm1Ed(double %4)
  %10 = fcmp olt double %4, 1.000000e+00
  br i1 %10, label %11, label %17

11:                                               ; preds = %8
  %12 = fmul double %9, 2.000000e+00
  %13 = fmul double %9, %9
  %14 = fadd double %9, 1.000000e+00
  %15 = fdiv double %13, %14
  %16 = fsub double %12, %15
  br label %21

17:                                               ; preds = %8
  %18 = fadd double %9, 1.000000e+00
  %19 = fdiv double %9, %18
  %20 = fadd double %9, %19
  br label %21

21:                                               ; preds = %17, %11
  %22 = phi double [ %16, %11 ], [ %20, %17 ]
  %23 = fmul double %3, %22
  br label %38

24:                                               ; preds = %1
  %25 = fcmp olt double %4, 0x40862E4200000000
  br i1 %25, label %26, label %29

26:                                               ; preds = %24
  %27 = tail call double @_ZN2v84base7ieee7543expEd(double %4)
  %28 = fmul double %3, %27
  br label %38

29:                                               ; preds = %24
  %30 = fcmp ugt double %4, 0x408633CE8FB9F87D
  br i1 %30, label %36, label %31

31:                                               ; preds = %29
  %32 = fmul double %4, 5.000000e-01
  %33 = tail call double @_ZN2v84base7ieee7543expEd(double %32)
  %34 = fmul double %3, %33
  %35 = fmul double %33, %34
  br label %38

36:                                               ; preds = %29
  %37 = fmul double %0, 0x7FAC7B1F3CAC7433
  br label %38

38:                                               ; preds = %6, %36, %31, %26, %21
  %39 = phi double [ %23, %21 ], [ %28, %26 ], [ %35, %31 ], [ %37, %36 ], [ %0, %6 ]
  ret double %39
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN2v84base7ieee7544tanhEd(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = lshr i64 %2, 32
  %4 = trunc i64 %3 to i32
  %5 = and i32 %4, 2147483647
  %6 = icmp ugt i32 %5, 2146435071
  br i1 %6, label %7, label %14

7:                                                ; preds = %1
  %8 = icmp sgt i32 %4, -1
  %9 = fdiv double 1.000000e+00, %0
  br i1 %8, label %10, label %12

10:                                               ; preds = %7
  %11 = fadd double %9, 1.000000e+00
  br label %47

12:                                               ; preds = %7
  %13 = fadd double %9, -1.000000e+00
  br label %47

14:                                               ; preds = %1
  %15 = icmp ult i32 %5, 1077280768
  br i1 %15, label %16, label %39

16:                                               ; preds = %14
  %17 = icmp ult i32 %5, 1043333120
  br i1 %17, label %18, label %23

18:                                               ; preds = %16
  %19 = fadd double %0, 1.000000e+300
  %20 = fcmp ogt double %19, 1.000000e+00
  br i1 %20, label %47, label %21

21:                                               ; preds = %18
  %22 = tail call double @llvm.fabs.f64(double %0)
  br label %32

23:                                               ; preds = %16
  %24 = icmp ugt i32 %5, 1072693247
  %25 = tail call double @llvm.fabs.f64(double %0)
  br i1 %24, label %26, label %32

26:                                               ; preds = %23
  %27 = fmul double %25, 2.000000e+00
  %28 = tail call double @_ZN2v84base7ieee7545expm1Ed(double %27)
  %29 = fadd double %28, 2.000000e+00
  %30 = fdiv double 2.000000e+00, %29
  %31 = fsub double 1.000000e+00, %30
  br label %42

32:                                               ; preds = %21, %23
  %33 = phi double [ %22, %21 ], [ %25, %23 ]
  %34 = fmul double %33, -2.000000e+00
  %35 = tail call double @_ZN2v84base7ieee7545expm1Ed(double %34)
  %36 = fsub double -0.000000e+00, %35
  %37 = fadd double %35, 2.000000e+00
  %38 = fdiv double %36, %37
  br label %42

39:                                               ; preds = %14
  %40 = load volatile double, double* @_ZZN2v84base7ieee7544tanhEdE4tiny, align 8
  %41 = fsub double 1.000000e+00, %40
  br label %42

42:                                               ; preds = %26, %32, %39
  %43 = phi double [ %31, %26 ], [ %38, %32 ], [ %41, %39 ]
  %44 = icmp sgt i32 %4, -1
  %45 = fsub double -0.000000e+00, %43
  %46 = select i1 %44, double %43, double %45
  br label %47

47:                                               ; preds = %18, %42, %12, %10
  %48 = phi double [ %11, %10 ], [ %13, %12 ], [ %46, %42 ], [ %0, %18 ]
  ret double %48
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.unroll.disable"}
!8 = distinct !{!8, !7}
