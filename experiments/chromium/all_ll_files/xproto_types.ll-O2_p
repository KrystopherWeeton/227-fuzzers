; ModuleID = '../../ui/gfx/x/xproto_types.cc'
source_filename = "../../ui/gfx/x/xproto_types.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.x11::ReadBuffer" = type { %class.scoped_refptr, i64, i32* }
%class.scoped_refptr = type { %"class.base::RefCountedMemory"* }
%"class.base::RefCountedMemory" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", [4 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.x11::WriteBuffer" = type { %"class.std::__1::vector", %"class.std::__1::vector.3", i64, %"class.std::__1::vector.10" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %class.scoped_refptr*, %class.scoped_refptr*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.scoped_refptr* }
%"class.std::__1::vector.3" = type { %"class.std::__1::__vector_base.4" }
%"class.std::__1::__vector_base.4" = type { i8*, i8*, %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { i8* }
%"class.std::__1::vector.10" = type { %"class.std::__1::__vector_base.11" }
%"class.std::__1::__vector_base.11" = type { i32*, i32*, %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { i32* }
%"class.x11::OffsetRefCountedMemory" = type { %"class.base::RefCountedMemory.base", %class.scoped_refptr, i64, i64 }
%"class.base::RefCountedMemory.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe" }>
%"class.base::RefCountedBytes" = type { %"class.base::RefCountedMemory.base", %"class.std::__1::vector.3" }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorI13scoped_refptrIN4base16RefCountedMemoryEENS_9allocatorIS4_EEE21__push_back_slow_pathIRKS4_EEvOT_ = comdat any

$_ZNSt3__16vectorI13scoped_refptrIN4base16RefCountedMemoryEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_ = comdat any

@_ZN3x1110ReadBufferC1E13scoped_refptrIN4base16RefCountedMemoryEEb = hidden unnamed_addr alias void (%"struct.x11::ReadBuffer"*, %"class.base::RefCountedMemory"*, i1), void (%"struct.x11::ReadBuffer"*, %"class.base::RefCountedMemory"*, i1)* @_ZN3x1110ReadBufferC2E13scoped_refptrIN4base16RefCountedMemoryEEb
@_ZN3x1110ReadBufferC1EOS0_ = hidden unnamed_addr alias void (%"struct.x11::ReadBuffer"*, %"struct.x11::ReadBuffer"*), void (%"struct.x11::ReadBuffer"*, %"struct.x11::ReadBuffer"*)* @_ZN3x1110ReadBufferC2EOS0_
@_ZN3x1110ReadBufferD1Ev = hidden unnamed_addr alias void (%"struct.x11::ReadBuffer"*), void (%"struct.x11::ReadBuffer"*)* @_ZN3x1110ReadBufferD2Ev
@_ZN3x1111WriteBufferC1Ev = hidden unnamed_addr alias void (%"class.x11::WriteBuffer"*), void (%"class.x11::WriteBuffer"*)* @_ZN3x1111WriteBufferC2Ev
@_ZN3x1111WriteBufferC1EOS0_ = hidden unnamed_addr alias void (%"class.x11::WriteBuffer"*, %"class.x11::WriteBuffer"*), void (%"class.x11::WriteBuffer"*, %"class.x11::WriteBuffer"*)* @_ZN3x1111WriteBufferC2EOS0_
@_ZN3x1111WriteBufferD1Ev = hidden unnamed_addr alias void (%"class.x11::WriteBuffer"*), void (%"class.x11::WriteBuffer"*)* @_ZN3x1111WriteBufferD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3x1110ReadBufferC2E13scoped_refptrIN4base16RefCountedMemoryEEb(%"struct.x11::ReadBuffer"* nocapture, %"class.base::RefCountedMemory"*, i1 zeroext) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"struct.x11::ReadBuffer", %"struct.x11::ReadBuffer"* %0, i64 0, i32 0, i32 0
  store %"class.base::RefCountedMemory"* %1, %"class.base::RefCountedMemory"** %4, align 8
  %5 = icmp eq %"class.base::RefCountedMemory"* %1, null
  br i1 %5, label %9, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %"class.base::RefCountedMemory", %"class.base::RefCountedMemory"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 1 monotonic
  br label %9

9:                                                ; preds = %3, %6
  %10 = getelementptr inbounds %"struct.x11::ReadBuffer", %"struct.x11::ReadBuffer"* %0, i64 0, i32 1
  %11 = getelementptr inbounds %"struct.x11::ReadBuffer", %"struct.x11::ReadBuffer"* %0, i64 0, i32 2
  %12 = bitcast i64* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 16, i1 false)
  br i1 %2, label %32, label %13

13:                                               ; preds = %9
  %14 = bitcast %"class.base::RefCountedMemory"* %1 to i8* (%"class.base::RefCountedMemory"*)***
  %15 = load i8* (%"class.base::RefCountedMemory"*)**, i8* (%"class.base::RefCountedMemory"*)*** %14, align 8
  %16 = load i8* (%"class.base::RefCountedMemory"*)*, i8* (%"class.base::RefCountedMemory"*)** %15, align 8
  %17 = tail call i8* %16(%"class.base::RefCountedMemory"* %1) #9
  %18 = load i8, i8* %17, align 4
  %19 = icmp eq i8 %18, 1
  br i1 %19, label %20, label %32

20:                                               ; preds = %13
  %21 = getelementptr inbounds i8, i8* %17, i64 4
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = shl i32 %23, 2
  %25 = add i32 %24, 32
  %26 = zext i32 %25 to i64
  %27 = load i8* (%"class.base::RefCountedMemory"*)**, i8* (%"class.base::RefCountedMemory"*)*** %14, align 8
  %28 = load i8* (%"class.base::RefCountedMemory"*)*, i8* (%"class.base::RefCountedMemory"*)** %27, align 8
  %29 = tail call i8* %28(%"class.base::RefCountedMemory"* %1) #9
  %30 = getelementptr inbounds i8, i8* %29, i64 %26
  %31 = bitcast i32** %11 to i8**
  store i8* %30, i8** %31, align 8
  br label %32

32:                                               ; preds = %13, %20, %9
  br i1 %5, label %45, label %33

33:                                               ; preds = %32
  %34 = getelementptr inbounds %"class.base::RefCountedMemory", %"class.base::RefCountedMemory"* %1, i64 0, i32 1
  %35 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %34, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %36 = atomicrmw sub i32* %35, i32 1 acq_rel
  %37 = icmp eq i32 %36, 1
  br i1 %37, label %38, label %45

38:                                               ; preds = %33
  %39 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %34, i64 -2
  %40 = bitcast %"class.base::RefCountedThreadSafe"* %39 to %"class.base::RefCountedMemory"*
  %41 = bitcast %"class.base::RefCountedThreadSafe"* %39 to void (%"class.base::RefCountedMemory"*)***
  %42 = load void (%"class.base::RefCountedMemory"*)**, void (%"class.base::RefCountedMemory"*)*** %41, align 8
  %43 = getelementptr inbounds void (%"class.base::RefCountedMemory"*)*, void (%"class.base::RefCountedMemory"*)** %42, i64 3
  %44 = load void (%"class.base::RefCountedMemory"*)*, void (%"class.base::RefCountedMemory"*)** %43, align 8
  tail call void %44(%"class.base::RefCountedMemory"* nonnull %40) #9
  br label %45

45:                                               ; preds = %32, %33, %38
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3x1110ReadBufferC2EOS0_(%"struct.x11::ReadBuffer"* nocapture, %"struct.x11::ReadBuffer"* nocapture dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.x11::ReadBuffer", %"struct.x11::ReadBuffer"* %1, i64 0, i32 0, i32 0
  %4 = bitcast %"struct.x11::ReadBuffer"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"struct.x11::ReadBuffer"* %0 to i64*
  store i64 %5, i64* %6, align 8
  store %"class.base::RefCountedMemory"* null, %"class.base::RefCountedMemory"** %3, align 8
  %7 = getelementptr inbounds %"struct.x11::ReadBuffer", %"struct.x11::ReadBuffer"* %0, i64 0, i32 1
  %8 = getelementptr inbounds %"struct.x11::ReadBuffer", %"struct.x11::ReadBuffer"* %1, i64 0, i32 1
  %9 = bitcast i64* %7 to i8*
  %10 = bitcast i64* %8 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 16, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3x1110ReadBufferD2Ev(%"struct.x11::ReadBuffer"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.x11::ReadBuffer", %"struct.x11::ReadBuffer"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.base::RefCountedMemory"*, %"class.base::RefCountedMemory"** %2, align 8
  %4 = icmp eq %"class.base::RefCountedMemory"* %3, null
  br i1 %4, label %17, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.base::RefCountedMemory", %"class.base::RefCountedMemory"* %3, i64 0, i32 1
  %7 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw sub i32* %7, i32 1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %17

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %6, i64 -2
  %12 = bitcast %"class.base::RefCountedThreadSafe"* %11 to %"class.base::RefCountedMemory"*
  %13 = bitcast %"class.base::RefCountedThreadSafe"* %11 to void (%"class.base::RefCountedMemory"*)***
  %14 = load void (%"class.base::RefCountedMemory"*)**, void (%"class.base::RefCountedMemory"*)*** %13, align 8
  %15 = getelementptr inbounds void (%"class.base::RefCountedMemory"*)*, void (%"class.base::RefCountedMemory"*)** %14, i64 3
  %16 = load void (%"class.base::RefCountedMemory"*)*, void (%"class.base::RefCountedMemory"*)** %15, align 8
  tail call void %16(%"class.base::RefCountedMemory"* nonnull %12) #9
  br label %17

17:                                               ; preds = %1, %5, %10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.base::RefCountedMemory"* @_ZN3x1110ReadBuffer14ReadAndAdvanceEm(%"struct.x11::ReadBuffer"* nocapture, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.x11::ReadBuffer", %"struct.x11::ReadBuffer"* %0, i64 0, i32 1
  %4 = tail call i8* @_Znwm(i64 40) #10
  %5 = bitcast i8* %4 to %"class.x11::OffsetRefCountedMemory"*
  %6 = getelementptr inbounds %"struct.x11::ReadBuffer", %"struct.x11::ReadBuffer"* %0, i64 0, i32 0, i32 0
  %7 = load %"class.base::RefCountedMemory"*, %"class.base::RefCountedMemory"** %6, align 8
  %8 = icmp eq %"class.base::RefCountedMemory"* %7, null
  br i1 %8, label %12, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.base::RefCountedMemory", %"class.base::RefCountedMemory"* %7, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = atomicrmw add i32* %10, i32 1 monotonic
  br label %12

12:                                               ; preds = %9, %2
  %13 = load i64, i64* %3, align 8
  tail call void @_ZN3x1122OffsetRefCountedMemoryC1E13scoped_refptrIN4base16RefCountedMemoryEEmm(%"class.x11::OffsetRefCountedMemory"* nonnull %5, %"class.base::RefCountedMemory"* %7, i64 %13, i64 %1) #9
  %14 = getelementptr inbounds i8, i8* %4, i64 8
  %15 = bitcast i8* %14 to i32*
  %16 = atomicrmw add i32* %15, i32 1 monotonic
  %17 = load i64, i64* %3, align 8
  %18 = add i64 %17, %1
  store i64 %18, i64* %3, align 8
  %19 = bitcast i8* %4 to %"class.base::RefCountedMemory"*
  ret %"class.base::RefCountedMemory"* %19
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZN3x1110ReadBuffer6TakeFdEv(%"struct.x11::ReadBuffer"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"struct.x11::ReadBuffer", %"struct.x11::ReadBuffer"* %0, i64 0, i32 2
  %3 = load i32*, i32** %2, align 8
  %4 = getelementptr inbounds i32, i32* %3, i64 1
  store i32* %4, i32** %2, align 8
  %5 = load i32, i32* %3, align 4
  ret i32 %5
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3x1111WriteBufferC2Ev(%"class.x11::WriteBuffer"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.x11::WriteBuffer"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 80, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3x1111WriteBufferC2EOS0_(%"class.x11::WriteBuffer"* nocapture, %"class.x11::WriteBuffer"* nocapture dereferenceable(80)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.x11::WriteBuffer"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 24, i1 false) #9
  %4 = bitcast %"class.x11::WriteBuffer"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.x11::WriteBuffer"* %0 to i64*
  store i64 %5, i64* %6, align 8
  %7 = getelementptr inbounds %"class.x11::WriteBuffer", %"class.x11::WriteBuffer"* %1, i64 0, i32 0, i32 0, i32 1
  %8 = bitcast %class.scoped_refptr** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.x11::WriteBuffer", %"class.x11::WriteBuffer"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = bitcast %class.scoped_refptr** %10 to i64*
  store i64 %9, i64* %11, align 8
  %12 = getelementptr inbounds %"class.x11::WriteBuffer", %"class.x11::WriteBuffer"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %13 = bitcast %class.scoped_refptr** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.x11::WriteBuffer", %"class.x11::WriteBuffer"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %class.scoped_refptr** %15 to i64*
  store i64 %14, i64* %16, align 8
  %17 = bitcast %"class.x11::WriteBuffer"* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 24, i1 false) #9
  %18 = getelementptr inbounds %"class.x11::WriteBuffer", %"class.x11::WriteBuffer"* %0, i64 0, i32 1
  %19 = getelementptr inbounds %"class.x11::WriteBuffer", %"class.x11::WriteBuffer"* %1, i64 0, i32 1
  %20 = bitcast %"class.std::__1::vector.3"* %18 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 24, i1 false) #9
  %21 = bitcast %"class.std::__1::vector.3"* %19 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = bitcast %"class.std::__1::vector.3"* %18 to i64*
  store i64 %22, i64* %23, align 8
  %24 = getelementptr inbounds %"class.x11::WriteBuffer", %"class.x11::WriteBuffer"* %1, i64 0, i32 1, i32 0, i32 1
  %25 = bitcast i8** %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %"class.x11::WriteBuffer", %"class.x11::WriteBuffer"* %0, i64 0, i32 1, i32 0, i32 1
  %28 = bitcast i8** %27 to i64*
  store i64 %26, i64* %28, align 8
  %29 = getelementptr inbounds %"class.x11::WriteBuffer", %"class.x11::WriteBuffer"* %1, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %30 = bitcast i8** %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = getelementptr inbounds %"class.x11::WriteBuffer", %"class.x11::WriteBuffer"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %33 = bitcast i8** %32 to i64*
  store i64 %31, i64* %33, align 8
  %34 = bitcast %"class.std::__1::vector.3"* %19 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %34, i8 0, i64 24, i1 false) #9
  %35 = getelementptr inbounds %"class.x11::WriteBuffer", %"class.x11::WriteBuffer"* %0, i64 0, i32 2
  %36 = getelementptr inbounds %"class.x11::WriteBuffer", %"class.x11::WriteBuffer"* %1, i64 0, i32 2
  %37 = load i64, i64* %36, align 8
  store i64 %37, i64* %35, align 8
  %38 = getelementptr inbounds %"class.x11::WriteBuffer", %"class.x11::WriteBuffer"* %0, i64 0, i32 3
  %39 = getelementptr inbounds %"class.x11::WriteBuffer", %"class.x11::WriteBuffer"* %1, i64 0, i32 3
  %40 = bitcast %"class.std::__1::vector.10"* %38 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %40, i8 0, i64 24, i1 false) #9
  %41 = bitcast %"class.std::__1::vector.10"* %39 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = bitcast %"class.std::__1::vector.10"* %38 to i64*
  store i64 %42, i64* %43, align 8
  %44 = getelementptr inbounds %"class.x11::WriteBuffer", %"class.x11::WriteBuffer"* %1, i64 0, i32 3, i32 0, i32 1
  %45 = bitcast i32** %44 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %"class.x11::WriteBuffer", %"class.x11::WriteBuffer"* %0, i64 0, i32 3, i32 0, i32 1
  %48 = bitcast i32** %47 to i64*
  store i64 %46, i64* %48, align 8
  %49 = getelementptr inbounds %"class.x11::WriteBuffer", %"class.x11::WriteBuffer"* %1, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %50 = bitcast i32** %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds %"class.x11::WriteBuffer", %"class.x11::WriteBuffer"* %0, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %53 = bitcast i32** %52 to i64*
  store i64 %51, i64* %53, align 8
  %54 = bitcast %"class.std::__1::vector.10"* %39 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %54, i8 0, i64 24, i1 false) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3x1111WriteBufferD2Ev(%"class.x11::WriteBuffer"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.x11::WriteBuffer", %"class.x11::WriteBuffer"* %0, i64 0, i32 3, i32 0, i32 0
  %3 = load i32*, i32** %2, align 8
  %4 = icmp eq i32* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint i32* %3 to i64
  %7 = getelementptr inbounds %"class.x11::WriteBuffer", %"class.x11::WriteBuffer"* %0, i64 0, i32 3, i32 0, i32 1
  %8 = bitcast i32** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast i32* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #10
  br label %10

10:                                               ; preds = %1, %5
  %11 = getelementptr inbounds %"class.x11::WriteBuffer", %"class.x11::WriteBuffer"* %0, i64 0, i32 1, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = icmp eq i8* %12, null
  br i1 %13, label %18, label %14

14:                                               ; preds = %10
  %15 = ptrtoint i8* %12 to i64
  %16 = getelementptr inbounds %"class.x11::WriteBuffer", %"class.x11::WriteBuffer"* %0, i64 0, i32 1, i32 0, i32 1
  %17 = bitcast i8** %16 to i64*
  store i64 %15, i64* %17, align 8
  tail call void @_ZdlPv(i8* nonnull %12) #10
  br label %18

18:                                               ; preds = %10, %14
  %19 = getelementptr inbounds %"class.x11::WriteBuffer", %"class.x11::WriteBuffer"* %0, i64 0, i32 0, i32 0, i32 0
  %20 = load %class.scoped_refptr*, %class.scoped_refptr** %19, align 8
  %21 = icmp eq %class.scoped_refptr* %20, null
  br i1 %21, label %52, label %22

22:                                               ; preds = %18
  %23 = bitcast %class.scoped_refptr* %20 to i8*
  %24 = getelementptr inbounds %"class.x11::WriteBuffer", %"class.x11::WriteBuffer"* %0, i64 0, i32 0, i32 0, i32 1
  %25 = load %class.scoped_refptr*, %class.scoped_refptr** %24, align 8
  %26 = icmp eq %class.scoped_refptr* %25, %20
  br i1 %26, label %50, label %27

27:                                               ; preds = %22, %45
  %28 = phi %class.scoped_refptr* [ %29, %45 ], [ %25, %22 ]
  %29 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %28, i64 -1
  %30 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %29, i64 0, i32 0
  %31 = load %"class.base::RefCountedMemory"*, %"class.base::RefCountedMemory"** %30, align 8
  %32 = icmp eq %"class.base::RefCountedMemory"* %31, null
  br i1 %32, label %45, label %33

33:                                               ; preds = %27
  %34 = getelementptr inbounds %"class.base::RefCountedMemory", %"class.base::RefCountedMemory"* %31, i64 0, i32 1
  %35 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %34, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %36 = atomicrmw sub i32* %35, i32 1 acq_rel
  %37 = icmp eq i32 %36, 1
  br i1 %37, label %38, label %45

38:                                               ; preds = %33
  %39 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %34, i64 -2
  %40 = bitcast %"class.base::RefCountedThreadSafe"* %39 to %"class.base::RefCountedMemory"*
  %41 = bitcast %"class.base::RefCountedThreadSafe"* %39 to void (%"class.base::RefCountedMemory"*)***
  %42 = load void (%"class.base::RefCountedMemory"*)**, void (%"class.base::RefCountedMemory"*)*** %41, align 8
  %43 = getelementptr inbounds void (%"class.base::RefCountedMemory"*)*, void (%"class.base::RefCountedMemory"*)** %42, i64 3
  %44 = load void (%"class.base::RefCountedMemory"*)*, void (%"class.base::RefCountedMemory"*)** %43, align 8
  tail call void %44(%"class.base::RefCountedMemory"* nonnull %40) #9
  br label %45

45:                                               ; preds = %38, %33, %27
  %46 = icmp eq %class.scoped_refptr* %29, %20
  br i1 %46, label %47, label %27

47:                                               ; preds = %45
  %48 = bitcast %"class.x11::WriteBuffer"* %0 to i8**
  %49 = load i8*, i8** %48, align 8
  br label %50

50:                                               ; preds = %47, %22
  %51 = phi i8* [ %49, %47 ], [ %23, %22 ]
  store %class.scoped_refptr* %20, %class.scoped_refptr** %24, align 8
  tail call void @_ZdlPv(i8* %51) #10
  br label %52

52:                                               ; preds = %18, %50
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3x1111WriteBuffer12AppendBufferE13scoped_refptrIN4base16RefCountedMemoryEEm(%"class.x11::WriteBuffer"*, %"class.base::RefCountedMemory"*, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %class.scoped_refptr, align 8
  %5 = alloca %class.scoped_refptr, align 8
  %6 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %5, i64 0, i32 0
  store %"class.base::RefCountedMemory"* %1, %"class.base::RefCountedMemory"** %6, align 8
  %7 = bitcast %class.scoped_refptr* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #9
  %8 = getelementptr inbounds %"class.x11::WriteBuffer", %"class.x11::WriteBuffer"* %0, i64 0, i32 1
  %9 = tail call %"class.base::RefCountedBytes"* @_ZN4base15RefCountedBytes10TakeVectorEPNSt3__16vectorIhNS1_9allocatorIhEEEE(%"class.std::__1::vector.3"* %8) #9
  %10 = ptrtoint %"class.base::RefCountedBytes"* %9 to i64
  %11 = bitcast %class.scoped_refptr* %4 to i64*
  store i64 %10, i64* %11, align 8
  %12 = getelementptr inbounds %"class.x11::WriteBuffer", %"class.x11::WriteBuffer"* %0, i64 0, i32 0, i32 0, i32 1
  %13 = load %class.scoped_refptr*, %class.scoped_refptr** %12, align 8
  %14 = getelementptr inbounds %"class.x11::WriteBuffer", %"class.x11::WriteBuffer"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %15 = load %class.scoped_refptr*, %class.scoped_refptr** %14, align 8
  %16 = icmp ult %class.scoped_refptr* %13, %15
  br i1 %16, label %17, label %23

17:                                               ; preds = %3
  %18 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %4, i64 0, i32 0
  %19 = bitcast %class.scoped_refptr* %13 to i64*
  store i64 %10, i64* %19, align 8
  store %"class.base::RefCountedMemory"* null, %"class.base::RefCountedMemory"** %18, align 8
  %20 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %13, i64 1
  %21 = ptrtoint %class.scoped_refptr* %20 to i64
  %22 = bitcast %class.scoped_refptr** %12 to i64*
  store i64 %21, i64* %22, align 8
  br label %40

23:                                               ; preds = %3
  %24 = getelementptr inbounds %"class.x11::WriteBuffer", %"class.x11::WriteBuffer"* %0, i64 0, i32 0
  call void @_ZNSt3__16vectorI13scoped_refptrIN4base16RefCountedMemoryEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(%"class.std::__1::vector"* %24, %class.scoped_refptr* nonnull dereferenceable(8) %4) #9
  %25 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %4, i64 0, i32 0
  %26 = load %"class.base::RefCountedMemory"*, %"class.base::RefCountedMemory"** %25, align 8
  %27 = icmp eq %"class.base::RefCountedMemory"* %26, null
  br i1 %27, label %40, label %28

28:                                               ; preds = %23
  %29 = getelementptr inbounds %"class.base::RefCountedMemory", %"class.base::RefCountedMemory"* %26, i64 0, i32 1
  %30 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %29, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = atomicrmw sub i32* %30, i32 1 acq_rel
  %32 = icmp eq i32 %31, 1
  br i1 %32, label %33, label %40

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %29, i64 -2
  %35 = bitcast %"class.base::RefCountedThreadSafe"* %34 to %"class.base::RefCountedMemory"*
  %36 = bitcast %"class.base::RefCountedThreadSafe"* %34 to void (%"class.base::RefCountedMemory"*)***
  %37 = load void (%"class.base::RefCountedMemory"*)**, void (%"class.base::RefCountedMemory"*)*** %36, align 8
  %38 = getelementptr inbounds void (%"class.base::RefCountedMemory"*)*, void (%"class.base::RefCountedMemory"*)** %37, i64 3
  %39 = load void (%"class.base::RefCountedMemory"*)*, void (%"class.base::RefCountedMemory"*)** %38, align 8
  call void %39(%"class.base::RefCountedMemory"* nonnull %35) #9
  br label %40

40:                                               ; preds = %17, %23, %28, %33
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #9
  %41 = load %class.scoped_refptr*, %class.scoped_refptr** %12, align 8
  %42 = load %class.scoped_refptr*, %class.scoped_refptr** %14, align 8
  %43 = icmp eq %class.scoped_refptr* %41, %42
  br i1 %43, label %55, label %44

44:                                               ; preds = %40
  %45 = load %"class.base::RefCountedMemory"*, %"class.base::RefCountedMemory"** %6, align 8
  %46 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %41, i64 0, i32 0
  store %"class.base::RefCountedMemory"* %45, %"class.base::RefCountedMemory"** %46, align 8
  %47 = icmp eq %"class.base::RefCountedMemory"* %45, null
  br i1 %47, label %51, label %48

48:                                               ; preds = %44
  %49 = getelementptr inbounds %"class.base::RefCountedMemory", %"class.base::RefCountedMemory"* %45, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %50 = atomicrmw add i32* %49, i32 1 monotonic
  br label %51

51:                                               ; preds = %48, %44
  %52 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %41, i64 1
  %53 = ptrtoint %class.scoped_refptr* %52 to i64
  %54 = bitcast %class.scoped_refptr** %12 to i64*
  store i64 %53, i64* %54, align 8
  br label %57

55:                                               ; preds = %40
  %56 = getelementptr inbounds %"class.x11::WriteBuffer", %"class.x11::WriteBuffer"* %0, i64 0, i32 0
  call void @_ZNSt3__16vectorI13scoped_refptrIN4base16RefCountedMemoryEENS_9allocatorIS4_EEE21__push_back_slow_pathIRKS4_EEvOT_(%"class.std::__1::vector"* %56, %class.scoped_refptr* nonnull dereferenceable(8) %5) #9
  br label %57

57:                                               ; preds = %51, %55
  %58 = getelementptr inbounds %"class.x11::WriteBuffer", %"class.x11::WriteBuffer"* %0, i64 0, i32 2
  %59 = load i64, i64* %58, align 8
  %60 = add i64 %59, %2
  store i64 %60, i64* %58, align 8
  %61 = load %"class.base::RefCountedMemory"*, %"class.base::RefCountedMemory"** %6, align 8
  %62 = icmp eq %"class.base::RefCountedMemory"* %61, null
  br i1 %62, label %75, label %63

63:                                               ; preds = %57
  %64 = getelementptr inbounds %"class.base::RefCountedMemory", %"class.base::RefCountedMemory"* %61, i64 0, i32 1
  %65 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %64, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %66 = atomicrmw sub i32* %65, i32 1 acq_rel
  %67 = icmp eq i32 %66, 1
  br i1 %67, label %68, label %75

68:                                               ; preds = %63
  %69 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %64, i64 -2
  %70 = bitcast %"class.base::RefCountedThreadSafe"* %69 to %"class.base::RefCountedMemory"*
  %71 = bitcast %"class.base::RefCountedThreadSafe"* %69 to void (%"class.base::RefCountedMemory"*)***
  %72 = load void (%"class.base::RefCountedMemory"*)**, void (%"class.base::RefCountedMemory"*)*** %71, align 8
  %73 = getelementptr inbounds void (%"class.base::RefCountedMemory"*)*, void (%"class.base::RefCountedMemory"*)** %72, i64 3
  %74 = load void (%"class.base::RefCountedMemory"*)*, void (%"class.base::RefCountedMemory"*)** %73, align 8
  call void %74(%"class.base::RefCountedMemory"* nonnull %70) #9
  br label %75

75:                                               ; preds = %57, %63, %68
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3x1111WriteBuffer19AppendCurrentBufferEv(%"class.x11::WriteBuffer"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %class.scoped_refptr, align 8
  %3 = bitcast %class.scoped_refptr* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #9
  %4 = getelementptr inbounds %"class.x11::WriteBuffer", %"class.x11::WriteBuffer"* %0, i64 0, i32 1
  %5 = tail call %"class.base::RefCountedBytes"* @_ZN4base15RefCountedBytes10TakeVectorEPNSt3__16vectorIhNS1_9allocatorIhEEEE(%"class.std::__1::vector.3"* %4) #9
  %6 = ptrtoint %"class.base::RefCountedBytes"* %5 to i64
  %7 = bitcast %class.scoped_refptr* %2 to i64*
  store i64 %6, i64* %7, align 8
  %8 = getelementptr inbounds %"class.x11::WriteBuffer", %"class.x11::WriteBuffer"* %0, i64 0, i32 0, i32 0, i32 1
  %9 = load %class.scoped_refptr*, %class.scoped_refptr** %8, align 8
  %10 = getelementptr inbounds %"class.x11::WriteBuffer", %"class.x11::WriteBuffer"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %11 = load %class.scoped_refptr*, %class.scoped_refptr** %10, align 8
  %12 = icmp ult %class.scoped_refptr* %9, %11
  br i1 %12, label %13, label %19

13:                                               ; preds = %1
  %14 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %2, i64 0, i32 0
  %15 = bitcast %class.scoped_refptr* %9 to i64*
  store i64 %6, i64* %15, align 8
  store %"class.base::RefCountedMemory"* null, %"class.base::RefCountedMemory"** %14, align 8
  %16 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %9, i64 1
  %17 = ptrtoint %class.scoped_refptr* %16 to i64
  %18 = bitcast %class.scoped_refptr** %8 to i64*
  store i64 %17, i64* %18, align 8
  br label %36

19:                                               ; preds = %1
  %20 = getelementptr inbounds %"class.x11::WriteBuffer", %"class.x11::WriteBuffer"* %0, i64 0, i32 0
  call void @_ZNSt3__16vectorI13scoped_refptrIN4base16RefCountedMemoryEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(%"class.std::__1::vector"* %20, %class.scoped_refptr* nonnull dereferenceable(8) %2) #9
  %21 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %2, i64 0, i32 0
  %22 = load %"class.base::RefCountedMemory"*, %"class.base::RefCountedMemory"** %21, align 8
  %23 = icmp eq %"class.base::RefCountedMemory"* %22, null
  br i1 %23, label %36, label %24

24:                                               ; preds = %19
  %25 = getelementptr inbounds %"class.base::RefCountedMemory", %"class.base::RefCountedMemory"* %22, i64 0, i32 1
  %26 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %25, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %27 = atomicrmw sub i32* %26, i32 1 acq_rel
  %28 = icmp eq i32 %27, 1
  br i1 %28, label %29, label %36

29:                                               ; preds = %24
  %30 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %25, i64 -2
  %31 = bitcast %"class.base::RefCountedThreadSafe"* %30 to %"class.base::RefCountedMemory"*
  %32 = bitcast %"class.base::RefCountedThreadSafe"* %30 to void (%"class.base::RefCountedMemory"*)***
  %33 = load void (%"class.base::RefCountedMemory"*)**, void (%"class.base::RefCountedMemory"*)*** %32, align 8
  %34 = getelementptr inbounds void (%"class.base::RefCountedMemory"*)*, void (%"class.base::RefCountedMemory"*)** %33, i64 3
  %35 = load void (%"class.base::RefCountedMemory"*)*, void (%"class.base::RefCountedMemory"*)** %34, align 8
  call void %35(%"class.base::RefCountedMemory"* nonnull %31) #9
  br label %36

36:                                               ; preds = %13, %29, %24, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(24) %"class.std::__1::vector"* @_ZN3x1111WriteBuffer10GetBuffersEv(%"class.x11::WriteBuffer"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %class.scoped_refptr, align 8
  %3 = getelementptr inbounds %"class.x11::WriteBuffer", %"class.x11::WriteBuffer"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"class.std::__1::vector.3", %"class.std::__1::vector.3"* %3, i64 0, i32 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.x11::WriteBuffer", %"class.x11::WriteBuffer"* %0, i64 0, i32 1, i32 0, i32 1
  %7 = load i8*, i8** %6, align 8
  %8 = icmp eq i8* %5, %7
  br i1 %8, label %43, label %9

9:                                                ; preds = %1
  %10 = bitcast %class.scoped_refptr* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #9
  %11 = tail call %"class.base::RefCountedBytes"* @_ZN4base15RefCountedBytes10TakeVectorEPNSt3__16vectorIhNS1_9allocatorIhEEEE(%"class.std::__1::vector.3"* %3) #9
  %12 = ptrtoint %"class.base::RefCountedBytes"* %11 to i64
  %13 = bitcast %class.scoped_refptr* %2 to i64*
  store i64 %12, i64* %13, align 8
  %14 = getelementptr inbounds %"class.x11::WriteBuffer", %"class.x11::WriteBuffer"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load %class.scoped_refptr*, %class.scoped_refptr** %14, align 8
  %16 = getelementptr inbounds %"class.x11::WriteBuffer", %"class.x11::WriteBuffer"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %17 = load %class.scoped_refptr*, %class.scoped_refptr** %16, align 8
  %18 = icmp ult %class.scoped_refptr* %15, %17
  br i1 %18, label %19, label %25

19:                                               ; preds = %9
  %20 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %2, i64 0, i32 0
  %21 = bitcast %class.scoped_refptr* %15 to i64*
  store i64 %12, i64* %21, align 8
  store %"class.base::RefCountedMemory"* null, %"class.base::RefCountedMemory"** %20, align 8
  %22 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %15, i64 1
  %23 = ptrtoint %class.scoped_refptr* %22 to i64
  %24 = bitcast %class.scoped_refptr** %14 to i64*
  store i64 %23, i64* %24, align 8
  br label %42

25:                                               ; preds = %9
  %26 = getelementptr inbounds %"class.x11::WriteBuffer", %"class.x11::WriteBuffer"* %0, i64 0, i32 0
  call void @_ZNSt3__16vectorI13scoped_refptrIN4base16RefCountedMemoryEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(%"class.std::__1::vector"* %26, %class.scoped_refptr* nonnull dereferenceable(8) %2) #9
  %27 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %2, i64 0, i32 0
  %28 = load %"class.base::RefCountedMemory"*, %"class.base::RefCountedMemory"** %27, align 8
  %29 = icmp eq %"class.base::RefCountedMemory"* %28, null
  br i1 %29, label %42, label %30

30:                                               ; preds = %25
  %31 = getelementptr inbounds %"class.base::RefCountedMemory", %"class.base::RefCountedMemory"* %28, i64 0, i32 1
  %32 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %31, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = atomicrmw sub i32* %32, i32 1 acq_rel
  %34 = icmp eq i32 %33, 1
  br i1 %34, label %35, label %42

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %31, i64 -2
  %37 = bitcast %"class.base::RefCountedThreadSafe"* %36 to %"class.base::RefCountedMemory"*
  %38 = bitcast %"class.base::RefCountedThreadSafe"* %36 to void (%"class.base::RefCountedMemory"*)***
  %39 = load void (%"class.base::RefCountedMemory"*)**, void (%"class.base::RefCountedMemory"*)*** %38, align 8
  %40 = getelementptr inbounds void (%"class.base::RefCountedMemory"*)*, void (%"class.base::RefCountedMemory"*)** %39, i64 3
  %41 = load void (%"class.base::RefCountedMemory"*)*, void (%"class.base::RefCountedMemory"*)** %40, align 8
  call void %41(%"class.base::RefCountedMemory"* nonnull %37) #9
  br label %42

42:                                               ; preds = %19, %25, %30, %35
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #9
  br label %43

43:                                               ; preds = %42, %1
  %44 = getelementptr inbounds %"class.x11::WriteBuffer", %"class.x11::WriteBuffer"* %0, i64 0, i32 0
  ret %"class.std::__1::vector"* %44
}

declare %"class.base::RefCountedBytes"* @_ZN4base15RefCountedBytes10TakeVectorEPNSt3__16vectorIhNS1_9allocatorIhEEEE(%"class.std::__1::vector.3"*) local_unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

declare void @_ZN3x1122OffsetRefCountedMemoryC1E13scoped_refptrIN4base16RefCountedMemoryEEmm(%"class.x11::OffsetRefCountedMemory"*, %"class.base::RefCountedMemory"*, i64, i64) unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorI13scoped_refptrIN4base16RefCountedMemoryEENS_9allocatorIS4_EEE21__push_back_slow_pathIRKS4_EEvOT_(%"class.std::__1::vector"*, %class.scoped_refptr* dereferenceable(8)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %class.scoped_refptr** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 2305843009213693951
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #11
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %class.scoped_refptr** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 3
  %20 = icmp ult i64 %19, 1152921504606846975
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 2
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 2305843009213693951
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #11
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 2305843009213693951, %14 ]
  %31 = shl i64 %30, 3
  %32 = tail call i8* @_Znwm(i64 %31) #10
  %33 = bitcast i8* %32 to %class.scoped_refptr*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %class.scoped_refptr* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %36, i64 %9
  %38 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %36, i64 %35
  %39 = ptrtoint %class.scoped_refptr* %38 to i64
  %40 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %1, i64 0, i32 0
  %41 = load %"class.base::RefCountedMemory"*, %"class.base::RefCountedMemory"** %40, align 8
  %42 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %37, i64 0, i32 0
  store %"class.base::RefCountedMemory"* %41, %"class.base::RefCountedMemory"** %42, align 8
  %43 = icmp eq %"class.base::RefCountedMemory"* %41, null
  br i1 %43, label %47, label %44

44:                                               ; preds = %34
  %45 = getelementptr inbounds %"class.base::RefCountedMemory", %"class.base::RefCountedMemory"* %41, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = atomicrmw add i32* %45, i32 1 monotonic
  br label %47

47:                                               ; preds = %34, %44
  %48 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %37, i64 1
  %49 = ptrtoint %class.scoped_refptr* %48 to i64
  %50 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %51 = load %class.scoped_refptr*, %class.scoped_refptr** %50, align 8
  %52 = ptrtoint %class.scoped_refptr* %51 to i64
  %53 = load %class.scoped_refptr*, %class.scoped_refptr** %3, align 8
  %54 = icmp eq %class.scoped_refptr* %53, %51
  br i1 %54, label %136, label %55

55:                                               ; preds = %47
  %56 = getelementptr %class.scoped_refptr, %class.scoped_refptr* %53, i64 -1, i32 0
  %57 = ptrtoint %"class.base::RefCountedMemory"** %56 to i64
  %58 = sub i64 %57, %52
  %59 = lshr i64 %58, 3
  %60 = add nuw nsw i64 %59, 1
  %61 = and i64 %60, 7
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %75, label %63

63:                                               ; preds = %55, %63
  %64 = phi %class.scoped_refptr* [ %67, %63 ], [ %37, %55 ]
  %65 = phi %class.scoped_refptr* [ %68, %63 ], [ %53, %55 ]
  %66 = phi i64 [ %73, %63 ], [ %61, %55 ]
  %67 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %64, i64 -1
  %68 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %65, i64 -1
  %69 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %68, i64 0, i32 0
  %70 = bitcast %class.scoped_refptr* %68 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = bitcast %class.scoped_refptr* %67 to i64*
  store i64 %71, i64* %72, align 8
  store %"class.base::RefCountedMemory"* null, %"class.base::RefCountedMemory"** %69, align 8
  %73 = add i64 %66, -1
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %75, label %63, !llvm.loop !2

75:                                               ; preds = %63, %55
  %76 = phi %class.scoped_refptr* [ undef, %55 ], [ %67, %63 ]
  %77 = phi %class.scoped_refptr* [ %37, %55 ], [ %67, %63 ]
  %78 = phi %class.scoped_refptr* [ %53, %55 ], [ %68, %63 ]
  %79 = icmp ult i64 %58, 56
  br i1 %79, label %132, label %80

80:                                               ; preds = %75, %80
  %81 = phi %class.scoped_refptr* [ %125, %80 ], [ %77, %75 ]
  %82 = phi %class.scoped_refptr* [ %126, %80 ], [ %78, %75 ]
  %83 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %81, i64 -1
  %84 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %82, i64 -1
  %85 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %84, i64 0, i32 0
  %86 = bitcast %class.scoped_refptr* %84 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = bitcast %class.scoped_refptr* %83 to i64*
  store i64 %87, i64* %88, align 8
  store %"class.base::RefCountedMemory"* null, %"class.base::RefCountedMemory"** %85, align 8
  %89 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %81, i64 -2
  %90 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %82, i64 -2
  %91 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %90, i64 0, i32 0
  %92 = bitcast %class.scoped_refptr* %90 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = bitcast %class.scoped_refptr* %89 to i64*
  store i64 %93, i64* %94, align 8
  store %"class.base::RefCountedMemory"* null, %"class.base::RefCountedMemory"** %91, align 8
  %95 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %81, i64 -3
  %96 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %82, i64 -3
  %97 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %96, i64 0, i32 0
  %98 = bitcast %class.scoped_refptr* %96 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast %class.scoped_refptr* %95 to i64*
  store i64 %99, i64* %100, align 8
  store %"class.base::RefCountedMemory"* null, %"class.base::RefCountedMemory"** %97, align 8
  %101 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %81, i64 -4
  %102 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %82, i64 -4
  %103 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %102, i64 0, i32 0
  %104 = bitcast %class.scoped_refptr* %102 to i64*
  %105 = load i64, i64* %104, align 8
  %106 = bitcast %class.scoped_refptr* %101 to i64*
  store i64 %105, i64* %106, align 8
  store %"class.base::RefCountedMemory"* null, %"class.base::RefCountedMemory"** %103, align 8
  %107 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %81, i64 -5
  %108 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %82, i64 -5
  %109 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %108, i64 0, i32 0
  %110 = bitcast %class.scoped_refptr* %108 to i64*
  %111 = load i64, i64* %110, align 8
  %112 = bitcast %class.scoped_refptr* %107 to i64*
  store i64 %111, i64* %112, align 8
  store %"class.base::RefCountedMemory"* null, %"class.base::RefCountedMemory"** %109, align 8
  %113 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %81, i64 -6
  %114 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %82, i64 -6
  %115 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %114, i64 0, i32 0
  %116 = bitcast %class.scoped_refptr* %114 to i64*
  %117 = load i64, i64* %116, align 8
  %118 = bitcast %class.scoped_refptr* %113 to i64*
  store i64 %117, i64* %118, align 8
  store %"class.base::RefCountedMemory"* null, %"class.base::RefCountedMemory"** %115, align 8
  %119 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %81, i64 -7
  %120 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %82, i64 -7
  %121 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %120, i64 0, i32 0
  %122 = bitcast %class.scoped_refptr* %120 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast %class.scoped_refptr* %119 to i64*
  store i64 %123, i64* %124, align 8
  store %"class.base::RefCountedMemory"* null, %"class.base::RefCountedMemory"** %121, align 8
  %125 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %81, i64 -8
  %126 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %82, i64 -8
  %127 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %126, i64 0, i32 0
  %128 = bitcast %class.scoped_refptr* %126 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast %class.scoped_refptr* %125 to i64*
  store i64 %129, i64* %130, align 8
  store %"class.base::RefCountedMemory"* null, %"class.base::RefCountedMemory"** %127, align 8
  %131 = icmp eq %class.scoped_refptr* %126, %51
  br i1 %131, label %132, label %80

132:                                              ; preds = %80, %75
  %133 = phi %class.scoped_refptr* [ %76, %75 ], [ %125, %80 ]
  %134 = load i64, i64* %6, align 8
  %135 = load %class.scoped_refptr*, %class.scoped_refptr** %3, align 8
  br label %136

136:                                              ; preds = %47, %132
  %137 = phi %class.scoped_refptr* [ %135, %132 ], [ %51, %47 ]
  %138 = phi %class.scoped_refptr* [ %133, %132 ], [ %37, %47 ]
  %139 = phi i64 [ %134, %132 ], [ %52, %47 ]
  %140 = ptrtoint %class.scoped_refptr* %138 to i64
  store i64 %140, i64* %6, align 8
  store i64 %49, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %141 = inttoptr i64 %139 to %class.scoped_refptr*
  %142 = icmp eq %class.scoped_refptr* %137, %141
  br i1 %142, label %163, label %143

143:                                              ; preds = %136, %161
  %144 = phi %class.scoped_refptr* [ %145, %161 ], [ %137, %136 ]
  %145 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %144, i64 -1
  %146 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %145, i64 0, i32 0
  %147 = load %"class.base::RefCountedMemory"*, %"class.base::RefCountedMemory"** %146, align 8
  %148 = icmp eq %"class.base::RefCountedMemory"* %147, null
  br i1 %148, label %161, label %149

149:                                              ; preds = %143
  %150 = getelementptr inbounds %"class.base::RefCountedMemory", %"class.base::RefCountedMemory"* %147, i64 0, i32 1
  %151 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %150, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %152 = atomicrmw sub i32* %151, i32 1 acq_rel
  %153 = icmp eq i32 %152, 1
  br i1 %153, label %154, label %161

154:                                              ; preds = %149
  %155 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %150, i64 -2
  %156 = bitcast %"class.base::RefCountedThreadSafe"* %155 to %"class.base::RefCountedMemory"*
  %157 = bitcast %"class.base::RefCountedThreadSafe"* %155 to void (%"class.base::RefCountedMemory"*)***
  %158 = load void (%"class.base::RefCountedMemory"*)**, void (%"class.base::RefCountedMemory"*)*** %157, align 8
  %159 = getelementptr inbounds void (%"class.base::RefCountedMemory"*)*, void (%"class.base::RefCountedMemory"*)** %158, i64 3
  %160 = load void (%"class.base::RefCountedMemory"*)*, void (%"class.base::RefCountedMemory"*)** %159, align 8
  tail call void %160(%"class.base::RefCountedMemory"* nonnull %156) #9
  br label %161

161:                                              ; preds = %154, %149, %143
  %162 = icmp eq %class.scoped_refptr* %145, %141
  br i1 %162, label %163, label %143

163:                                              ; preds = %161, %136
  %164 = icmp eq i64 %139, 0
  br i1 %164, label %167, label %165

165:                                              ; preds = %163
  %166 = inttoptr i64 %139 to i8*
  tail call void @_ZdlPv(i8* %166) #10
  br label %167

167:                                              ; preds = %163, %165
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #8

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorI13scoped_refptrIN4base16RefCountedMemoryEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(%"class.std::__1::vector"*, %class.scoped_refptr* dereferenceable(8)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %class.scoped_refptr** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 2305843009213693951
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #11
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %class.scoped_refptr** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 3
  %20 = icmp ult i64 %19, 1152921504606846975
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 2
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 2305843009213693951
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #11
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 2305843009213693951, %14 ]
  %31 = shl i64 %30, 3
  %32 = tail call i8* @_Znwm(i64 %31) #10
  %33 = bitcast i8* %32 to %class.scoped_refptr*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %class.scoped_refptr* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %36, i64 %9
  %38 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %36, i64 %35
  %39 = ptrtoint %class.scoped_refptr* %38 to i64
  %40 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %1, i64 0, i32 0
  %41 = bitcast %class.scoped_refptr* %1 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = bitcast %class.scoped_refptr* %37 to i64*
  store i64 %42, i64* %43, align 8
  store %"class.base::RefCountedMemory"* null, %"class.base::RefCountedMemory"** %40, align 8
  %44 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %37, i64 1
  %45 = ptrtoint %class.scoped_refptr* %44 to i64
  %46 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %47 = load %class.scoped_refptr*, %class.scoped_refptr** %46, align 8
  %48 = ptrtoint %class.scoped_refptr* %47 to i64
  %49 = load %class.scoped_refptr*, %class.scoped_refptr** %3, align 8
  %50 = icmp eq %class.scoped_refptr* %49, %47
  br i1 %50, label %132, label %51

51:                                               ; preds = %34
  %52 = getelementptr %class.scoped_refptr, %class.scoped_refptr* %49, i64 -1, i32 0
  %53 = ptrtoint %"class.base::RefCountedMemory"** %52 to i64
  %54 = sub i64 %53, %48
  %55 = lshr i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = and i64 %56, 7
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %71, label %59

59:                                               ; preds = %51, %59
  %60 = phi %class.scoped_refptr* [ %63, %59 ], [ %37, %51 ]
  %61 = phi %class.scoped_refptr* [ %64, %59 ], [ %49, %51 ]
  %62 = phi i64 [ %69, %59 ], [ %57, %51 ]
  %63 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %60, i64 -1
  %64 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %61, i64 -1
  %65 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %64, i64 0, i32 0
  %66 = bitcast %class.scoped_refptr* %64 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = bitcast %class.scoped_refptr* %63 to i64*
  store i64 %67, i64* %68, align 8
  store %"class.base::RefCountedMemory"* null, %"class.base::RefCountedMemory"** %65, align 8
  %69 = add i64 %62, -1
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %59, !llvm.loop !4

71:                                               ; preds = %59, %51
  %72 = phi %class.scoped_refptr* [ undef, %51 ], [ %63, %59 ]
  %73 = phi %class.scoped_refptr* [ %37, %51 ], [ %63, %59 ]
  %74 = phi %class.scoped_refptr* [ %49, %51 ], [ %64, %59 ]
  %75 = icmp ult i64 %54, 56
  br i1 %75, label %128, label %76

76:                                               ; preds = %71, %76
  %77 = phi %class.scoped_refptr* [ %121, %76 ], [ %73, %71 ]
  %78 = phi %class.scoped_refptr* [ %122, %76 ], [ %74, %71 ]
  %79 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %77, i64 -1
  %80 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %78, i64 -1
  %81 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %80, i64 0, i32 0
  %82 = bitcast %class.scoped_refptr* %80 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast %class.scoped_refptr* %79 to i64*
  store i64 %83, i64* %84, align 8
  store %"class.base::RefCountedMemory"* null, %"class.base::RefCountedMemory"** %81, align 8
  %85 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %77, i64 -2
  %86 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %78, i64 -2
  %87 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %86, i64 0, i32 0
  %88 = bitcast %class.scoped_refptr* %86 to i64*
  %89 = load i64, i64* %88, align 8
  %90 = bitcast %class.scoped_refptr* %85 to i64*
  store i64 %89, i64* %90, align 8
  store %"class.base::RefCountedMemory"* null, %"class.base::RefCountedMemory"** %87, align 8
  %91 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %77, i64 -3
  %92 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %78, i64 -3
  %93 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %92, i64 0, i32 0
  %94 = bitcast %class.scoped_refptr* %92 to i64*
  %95 = load i64, i64* %94, align 8
  %96 = bitcast %class.scoped_refptr* %91 to i64*
  store i64 %95, i64* %96, align 8
  store %"class.base::RefCountedMemory"* null, %"class.base::RefCountedMemory"** %93, align 8
  %97 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %77, i64 -4
  %98 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %78, i64 -4
  %99 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %98, i64 0, i32 0
  %100 = bitcast %class.scoped_refptr* %98 to i64*
  %101 = load i64, i64* %100, align 8
  %102 = bitcast %class.scoped_refptr* %97 to i64*
  store i64 %101, i64* %102, align 8
  store %"class.base::RefCountedMemory"* null, %"class.base::RefCountedMemory"** %99, align 8
  %103 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %77, i64 -5
  %104 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %78, i64 -5
  %105 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %104, i64 0, i32 0
  %106 = bitcast %class.scoped_refptr* %104 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = bitcast %class.scoped_refptr* %103 to i64*
  store i64 %107, i64* %108, align 8
  store %"class.base::RefCountedMemory"* null, %"class.base::RefCountedMemory"** %105, align 8
  %109 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %77, i64 -6
  %110 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %78, i64 -6
  %111 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %110, i64 0, i32 0
  %112 = bitcast %class.scoped_refptr* %110 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast %class.scoped_refptr* %109 to i64*
  store i64 %113, i64* %114, align 8
  store %"class.base::RefCountedMemory"* null, %"class.base::RefCountedMemory"** %111, align 8
  %115 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %77, i64 -7
  %116 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %78, i64 -7
  %117 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %116, i64 0, i32 0
  %118 = bitcast %class.scoped_refptr* %116 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast %class.scoped_refptr* %115 to i64*
  store i64 %119, i64* %120, align 8
  store %"class.base::RefCountedMemory"* null, %"class.base::RefCountedMemory"** %117, align 8
  %121 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %77, i64 -8
  %122 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %78, i64 -8
  %123 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %122, i64 0, i32 0
  %124 = bitcast %class.scoped_refptr* %122 to i64*
  %125 = load i64, i64* %124, align 8
  %126 = bitcast %class.scoped_refptr* %121 to i64*
  store i64 %125, i64* %126, align 8
  store %"class.base::RefCountedMemory"* null, %"class.base::RefCountedMemory"** %123, align 8
  %127 = icmp eq %class.scoped_refptr* %122, %47
  br i1 %127, label %128, label %76

128:                                              ; preds = %76, %71
  %129 = phi %class.scoped_refptr* [ %72, %71 ], [ %121, %76 ]
  %130 = load i64, i64* %6, align 8
  %131 = load %class.scoped_refptr*, %class.scoped_refptr** %3, align 8
  br label %132

132:                                              ; preds = %34, %128
  %133 = phi %class.scoped_refptr* [ %131, %128 ], [ %47, %34 ]
  %134 = phi %class.scoped_refptr* [ %129, %128 ], [ %37, %34 ]
  %135 = phi i64 [ %130, %128 ], [ %48, %34 ]
  %136 = ptrtoint %class.scoped_refptr* %134 to i64
  store i64 %136, i64* %6, align 8
  store i64 %45, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %137 = inttoptr i64 %135 to %class.scoped_refptr*
  %138 = icmp eq %class.scoped_refptr* %133, %137
  br i1 %138, label %159, label %139

139:                                              ; preds = %132, %157
  %140 = phi %class.scoped_refptr* [ %141, %157 ], [ %133, %132 ]
  %141 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %140, i64 -1
  %142 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %141, i64 0, i32 0
  %143 = load %"class.base::RefCountedMemory"*, %"class.base::RefCountedMemory"** %142, align 8
  %144 = icmp eq %"class.base::RefCountedMemory"* %143, null
  br i1 %144, label %157, label %145

145:                                              ; preds = %139
  %146 = getelementptr inbounds %"class.base::RefCountedMemory", %"class.base::RefCountedMemory"* %143, i64 0, i32 1
  %147 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %146, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %148 = atomicrmw sub i32* %147, i32 1 acq_rel
  %149 = icmp eq i32 %148, 1
  br i1 %149, label %150, label %157

150:                                              ; preds = %145
  %151 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %146, i64 -2
  %152 = bitcast %"class.base::RefCountedThreadSafe"* %151 to %"class.base::RefCountedMemory"*
  %153 = bitcast %"class.base::RefCountedThreadSafe"* %151 to void (%"class.base::RefCountedMemory"*)***
  %154 = load void (%"class.base::RefCountedMemory"*)**, void (%"class.base::RefCountedMemory"*)*** %153, align 8
  %155 = getelementptr inbounds void (%"class.base::RefCountedMemory"*)*, void (%"class.base::RefCountedMemory"*)** %154, i64 3
  %156 = load void (%"class.base::RefCountedMemory"*)*, void (%"class.base::RefCountedMemory"*)** %155, align 8
  tail call void %156(%"class.base::RefCountedMemory"* nonnull %152) #9
  br label %157

157:                                              ; preds = %150, %145, %139
  %158 = icmp eq %class.scoped_refptr* %141, %137
  br i1 %158, label %159, label %139

159:                                              ; preds = %157, %132
  %160 = icmp eq i64 %135, 0
  br i1 %160, label %163, label %161

161:                                              ; preds = %159
  %162 = inttoptr i64 %135 to i8*
  tail call void @_ZdlPv(i8* %162) #10
  br label %163

163:                                              ; preds = %159, %161
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
