; ModuleID = '../../third_party/blink/renderer/core/html/parser/html_tree_builder_simulator.cc'
source_filename = "../../third_party/blink/renderer/core/html/parser/html_tree_builder_simulator.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.23" }
%"struct.std::__1::__atomic_base.23" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::SVGQualifiedName" = type { %"class.blink::QualifiedName" }
%"class.blink::QualifiedName" = type { %class.scoped_refptr.27 }
%class.scoped_refptr.27 = type { %"class.blink::QualifiedName::QualifiedNameImpl"* }
%"class.blink::QualifiedName::QualifiedNameImpl" = type { %"class.WTF::RefCounted", i32, %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.blink::MathMLQualifiedName" = type { %"class.blink::QualifiedName" }
%"class.blink::HTMLQualifiedName" = type { %"class.blink::QualifiedName" }
%"class.blink::HTMLTreeBuilderSimulator" = type { %"class.blink::HTMLParserOptions", [6 x i8], %"class.WTF::Vector", i8, [7 x i8], %"class.WTF::Vector.0" }
%"class.blink::HTMLParserOptions" = type { i8, i8 }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer.base", [4 x i8] }
%"class.WTF::VectorBuffer.base" = type <{ %"class.WTF::VectorBufferBase", [4 x i8] }>
%"class.WTF::VectorBufferBase" = type { i32*, i32, i32 }
%"class.WTF::Vector.0" = type { %"class.WTF::VectorBuffer.base.3", [4 x i8] }
%"class.WTF::VectorBuffer.base.3" = type <{ %"class.WTF::VectorBufferBase.2", [4 x i8] }>
%"class.WTF::VectorBufferBase.2" = type { i32*, i32, i32 }
%"class.blink::HTMLTreeBuilder" = type <{ i8, [7 x i8], %"class.blink::HTMLTreeBuilder::FragmentParsingContext", %"class.blink::HTMLConstructionSite", i32, i32, %"class.WTF::Vector.80", %"class.WTF::StringBuilder", i8, i8, [6 x i8], %"class.blink::Member.85", %"class.blink::Member.38", %"class.WTF::TextPosition", %"class.blink::HTMLParserOptions", [6 x i8] }>
%"class.blink::HTMLTreeBuilder::FragmentParsingContext" = type { %"class.blink::Member", %"class.blink::Member.7" }
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::DocumentFragment"* }
%"class.blink::DocumentFragment" = type opaque
%"class.blink::Member.7" = type { %"class.blink::MemberBase.8" }
%"class.blink::MemberBase.8" = type { %"class.blink::HTMLStackItem"* }
%"class.blink::HTMLStackItem" = type <{ %"class.blink::Member.11", %"class.WTF::AtomicString", %"class.WTF::Vector.24", %"class.WTF::AtomicString", i8, [7 x i8] }>
%"class.blink::Member.11" = type { %"class.blink::MemberBase.12" }
%"class.blink::MemberBase.12" = type { %"class.blink::ContainerNode"* }
%"class.blink::ContainerNode" = type { %"class.blink::Node", %"class.blink::Member.15", %"class.blink::Member.15" }
%"class.blink::Node" = type { %"class.blink::EventTarget", i32, %"class.blink::Member.15", %"class.blink::Member.17", %"class.blink::Member.15", %"class.blink::Member.15", %"class.blink::Member.19" }
%"class.blink::EventTarget" = type { %"class.blink::ScriptWrappable" }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.blink::Member.17" = type { %"class.blink::MemberBase.18" }
%"class.blink::MemberBase.18" = type { %"class.blink::TreeScope"* }
%"class.blink::TreeScope" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.11", %"class.blink::Member.32", %"class.blink::Member.17", %"class.blink::Member.89", %"class.blink::Member.89", %"class.blink::Member.107", %"class.blink::Member.109", %"class.blink::Member.111", %"class.blink::RadioButtonGroupScope", %"class.blink::Member.116", %"class.blink::HeapVector.118" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::Member.32" = type { %"class.blink::MemberBase.33" }
%"class.blink::MemberBase.33" = type { %"class.blink::Document"* }
%"class.blink::Document" = type { %"class.blink::ContainerNode", %"class.blink::TreeScope", %"class.blink::UseCounter", %"class.blink::Supplementable", i32, %"class.blink::DocumentLifecycle", i8, i8, %"class.WTF::Vector.134", %"class.WTF::Vector.134", i8, i32, %"class.blink::Member.145", %"class.blink::Member.147", %"class.blink::Member.149", %"class.blink::Member.151", %"class.blink::Member.153", %"class.blink::Member.155", i8, %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.std::__1::unique_ptr.158", %"class.blink::KURL", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.blink::Member.164", %"class.blink::Member.166", %"class.blink::Member.124", i32, i32, i32, i8, %"class.blink::TaskHandle", %"class.blink::TaskHandle", %"class.WTF::Vector.169", i8, i32, i8, %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapVector.100", %"class.blink::Member.38", %"class.blink::Member.367", %"class.blink::Member.38", %"class.blink::Member.38", %"class.blink::Member.38", %"class.blink::UserActionElementSet", %"class.blink::Member.376", double, double, i64, i64, %"class.blink::HeapHashSet", %"class.blink::HeapHashSet.383", i16, i8, %"class.blink::Member.390", %"class.blink::Member.392", %"class.blink::Member.394", %"class.blink::Member.396", %"class.blink::TextLinkColors", %"class.blink::Member.398", i8, [7 x i8], %"class.blink::HeapHashMap.400", i32, i32, i8, i8, i8, i32, i32, i32, i8, %"class.WTF::String", %"class.WTF::String", %"class.blink::Member.38", %"class.WTF::Vector.407", %"class.blink::Member.412", %"class.blink::Member.414", i8, %"class.blink::Member.38", i8, i32, i8, %"class.base::ElapsedTimer", %"class.blink::Member.416", %"class.blink::HeapVector.443", %"class.std::__1::unique_ptr.450", %"class.WTF::String", %"class.WTF::String", i8, %"class.WTF::AtomicString", %"class.blink::DocumentEncodingData", i8, i8, [6 x i8], %"class.blink::HeapHashSet.456", %"class.blink::LiveNodeListRegistry", %"class.blink::Member.469", %"class.WTF::Vector.471", i8, i8, %"class.std::__1::unique_ptr.476", %"class.blink::NthIndexCache"*, i8, i8, i8, i8, i8, i8, %"class.blink::LayoutView"*, %"class.blink::HeapVector.100", %"class.blink::HeapVector.482", i32, i8, %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapTaskRunnerTimer", %"class.blink::DocumentTiming", %"class.blink::Member.490", i8, i32, %"class.blink::Member.492", %"class.blink::Member.494", %"class.blink::Member.496", %"class.blink::HeapTaskRunnerTimer", %"class.blink::Member.498", %"class.WTF::HashMap.500", %"class.blink::Member.505", %"class.blink::Member.507", %"class.blink::Member.509", %"class.blink::Member.511", %"class.blink::Member.32", %"class.blink::Member.32", %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapHashSet.513", i8, i32, %"class.blink::Member.520", %"class.blink::Member.522", i32, %"class.blink::Member.524", %"class.blink::Member.526", %"class.blink::Member.528", %"class.std::__1::unique_ptr.530", i64, %"class.std::__1::unique_ptr.536", i32, i32, %"class.blink::Member.542", %"class.blink::Member.544", %"class.blink::Member.546", i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, %"class.blink::Member.548", %"class.WTF::Vector.550", %"class.WTF::AtomicString", %"class.blink::HeapHashMap.555", %"class.blink::Member.562", %"class.std::__1::unique_ptr.564", %"class.blink::Member.570", i8, i8, %"class.WTF::String", %"class.blink::Member.572", i8, [7 x i8], %"class.blink::HeapHashMap.574", %"class.blink::HeapObserverSet", %"class.blink::Member.588", i8, i8, i8, i8, i8, i8, i8, %"class.blink::Member.590", i32, i8, i8, %"class.blink::WeakMember.592", %"class.blink::Member.593" }
%"class.blink::UseCounter" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::Supplementable" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.127" }
%"class.blink::HeapHashMap.127" = type { %"class.WTF::HashMap.130" }
%"class.WTF::HashMap.130" = type { %"class.WTF::HashTable.131" }
%"class.WTF::HashTable.131" = type <{ %"struct.WTF::KeyValuePair.133"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.133" = type opaque
%"class.blink::DocumentLifecycle" = type <{ i32, i32, i32, i8, i8, [2 x i8] }>
%"class.WTF::Vector.134" = type { %"class.WTF::VectorBuffer.135" }
%"class.WTF::VectorBuffer.135" = type { %"class.WTF::VectorBufferBase.136" }
%"class.WTF::VectorBufferBase.136" = type { %"class.base::OnceCallback"*, i32, i32 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.137 }
%class.scoped_refptr.137 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic.138" }
%"struct.std::__1::atomic.138" = type { %"struct.std::__1::__atomic_base.139" }
%"struct.std::__1::__atomic_base.139" = type { %"struct.std::__1::__atomic_base.140" }
%"struct.std::__1::__atomic_base.140" = type { %"struct.std::__1::__cxx_atomic_impl.141" }
%"struct.std::__1::__cxx_atomic_impl.141" = type { %"struct.std::__1::__cxx_atomic_base_impl.142" }
%"struct.std::__1::__cxx_atomic_base_impl.142" = type { i32 }
%"class.blink::Member.145" = type { %"class.blink::MemberBase.146" }
%"class.blink::MemberBase.146" = type { %"class.blink::LocalDOMWindow"* }
%"class.blink::LocalDOMWindow" = type opaque
%"class.blink::Member.147" = type { %"class.blink::MemberBase.148" }
%"class.blink::MemberBase.148" = type { %"class.blink::ExecutionContext"* }
%"class.blink::ExecutionContext" = type opaque
%"class.blink::Member.149" = type { %"class.blink::MemberBase.150" }
%"class.blink::MemberBase.150" = type { %"class.blink::ResourceFetcher"* }
%"class.blink::ResourceFetcher" = type opaque
%"class.blink::Member.151" = type { %"class.blink::MemberBase.152" }
%"class.blink::MemberBase.152" = type { %"class.blink::DocumentParser"* }
%"class.blink::DocumentParser" = type opaque
%"class.blink::Member.153" = type { %"class.blink::MemberBase.154" }
%"class.blink::MemberBase.154" = type { %"class.blink::ContextFeatures"* }
%"class.blink::ContextFeatures" = type opaque
%"class.blink::Member.155" = type { %"class.blink::MemberBase.156" }
%"class.blink::MemberBase.156" = type { %"class.blink::HttpRefreshScheduler"* }
%"class.blink::HttpRefreshScheduler" = type opaque
%"class.std::__1::unique_ptr.158" = type { %"class.std::__1::__compressed_pair.159" }
%"class.std::__1::__compressed_pair.159" = type { %"struct.std::__1::__compressed_pair_elem.160" }
%"struct.std::__1::__compressed_pair_elem.160" = type { %"class.blink::OriginAccessEntry"* }
%"class.blink::OriginAccessEntry" = type opaque
%"class.blink::KURL" = type { i8, i8, %"class.WTF::String", %"struct.url::Parsed", %"class.WTF::String", %"class.std::__1::unique_ptr" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::KURL"* }
%"class.blink::Member.164" = type { %"class.blink::MemberBase.165" }
%"class.blink::MemberBase.165" = type { %"class.blink::DocumentType"* }
%"class.blink::DocumentType" = type opaque
%"class.blink::Member.166" = type { %"class.blink::MemberBase.167" }
%"class.blink::MemberBase.167" = type { %"class.blink::DOMImplementation"* }
%"class.blink::DOMImplementation" = type opaque
%"class.blink::Member.124" = type { %"class.blink::MemberBase.125" }
%"class.blink::MemberBase.125" = type { %"class.blink::CSSStyleSheet"* }
%"class.blink::CSSStyleSheet" = type opaque
%"class.blink::TaskHandle" = type { %class.scoped_refptr.168 }
%class.scoped_refptr.168 = type { %"class.blink::TaskHandle::Runner"* }
%"class.blink::TaskHandle::Runner" = type opaque
%"class.WTF::Vector.169" = type { %"class.WTF::VectorBuffer.170" }
%"class.WTF::VectorBuffer.170" = type { %"class.WTF::VectorBufferBase.171" }
%"class.WTF::VectorBufferBase.171" = type { %"struct.blink::Document::PendingJavascriptUrl"*, i32, i32 }
%"struct.blink::Document::PendingJavascriptUrl" = type { %"class.blink::KURL", %class.scoped_refptr.172 }
%class.scoped_refptr.172 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::DOMWrapperWorld" = type { %"class.WTF::RefCounted.173", i32, i32, %"class.blink::Persistent" }
%"class.WTF::RefCounted.173" = type { %"class.base::RefCounted.174" }
%"class.base::RefCounted.174" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Persistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::DOMDataStore"*, %"class.blink::PersistentNodePtr" }
%"class.blink::DOMDataStore" = type opaque
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.175", i32, [4 x i8], %"class.std::__1::unique_ptr.311", %"class.std::__1::unique_ptr.311", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.321", %"class.std::__1::unique_ptr.327", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.339", %"class.std::__1::unique_ptr.345", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.352", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.175" = type { %"class.std::__1::__compressed_pair.176" }
%"class.std::__1::__compressed_pair.176" = type { %"struct.std::__1::__compressed_pair_elem.177" }
%"struct.std::__1::__compressed_pair_elem.177" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.178", %"class.std::__1::unique_ptr.184", %"class.std::__1::unique_ptr.190", %"class.std::__1::unique_ptr.196", %"class.std::__1::unique_ptr.202", %"class.std::__1::unique_ptr.208", %"class.std::__1::unique_ptr.219", %"class.std::__1::unique_ptr.226", %"class.std::__1::unique_ptr.226", %"class.std::__1::unique_ptr.233", %"class.std::__1::unique_ptr.240", %"class.std::__1::unique_ptr.247", %"class.std::__1::unique_ptr.247", %"class.std::__1::unique_ptr.254", %"class.std::__1::unique_ptr.261", %"class.std::__1::unique_ptr.268", %"class.std::__1::unique_ptr.291", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.178" = type { %"class.std::__1::__compressed_pair.179" }
%"class.std::__1::__compressed_pair.179" = type { %"struct.std::__1::__compressed_pair_elem.180" }
%"struct.std::__1::__compressed_pair_elem.180" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.184" = type { %"class.std::__1::__compressed_pair.185" }
%"class.std::__1::__compressed_pair.185" = type { %"struct.std::__1::__compressed_pair_elem.186" }
%"struct.std::__1::__compressed_pair_elem.186" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.190" = type { %"class.std::__1::__compressed_pair.191" }
%"class.std::__1::__compressed_pair.191" = type { %"struct.std::__1::__compressed_pair_elem.192" }
%"struct.std::__1::__compressed_pair_elem.192" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.196" = type { %"class.std::__1::__compressed_pair.197" }
%"class.std::__1::__compressed_pair.197" = type { %"struct.std::__1::__compressed_pair_elem.198" }
%"struct.std::__1::__compressed_pair_elem.198" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.202" = type { %"class.std::__1::__compressed_pair.203" }
%"class.std::__1::__compressed_pair.203" = type { %"struct.std::__1::__compressed_pair_elem.204" }
%"struct.std::__1::__compressed_pair_elem.204" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.208" = type { %"class.std::__1::__compressed_pair.209" }
%"class.std::__1::__compressed_pair.209" = type { %"struct.std::__1::__compressed_pair_elem.210" }
%"struct.std::__1::__compressed_pair_elem.210" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.211" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.211" = type { %"struct.std::__1::__atomic_base.212" }
%"struct.std::__1::__atomic_base.212" = type { %"struct.std::__1::__atomic_base.213" }
%"struct.std::__1::__atomic_base.213" = type { %"struct.std::__1::__cxx_atomic_impl.214" }
%"struct.std::__1::__cxx_atomic_impl.214" = type { %"struct.std::__1::__cxx_atomic_base_impl.215" }
%"struct.std::__1::__cxx_atomic_base_impl.215" = type { i64 }
%"class.std::__1::unique_ptr.219" = type { %"class.std::__1::__compressed_pair.220" }
%"class.std::__1::__compressed_pair.220" = type { %"struct.std::__1::__compressed_pair_elem.221" }
%"struct.std::__1::__compressed_pair_elem.221" = type { %"class.blink::Worklist.222"* }
%"class.blink::Worklist.222" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.211" }
%"class.std::__1::unique_ptr.226" = type { %"class.std::__1::__compressed_pair.227" }
%"class.std::__1::__compressed_pair.227" = type { %"struct.std::__1::__compressed_pair_elem.228" }
%"struct.std::__1::__compressed_pair_elem.228" = type { %"class.blink::Worklist.229"* }
%"class.blink::Worklist.229" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.211" }
%"class.std::__1::unique_ptr.233" = type { %"class.std::__1::__compressed_pair.234" }
%"class.std::__1::__compressed_pair.234" = type { %"struct.std::__1::__compressed_pair_elem.235" }
%"struct.std::__1::__compressed_pair_elem.235" = type { %"class.blink::Worklist.236"* }
%"class.blink::Worklist.236" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.211" }
%"class.std::__1::unique_ptr.240" = type { %"class.std::__1::__compressed_pair.241" }
%"class.std::__1::__compressed_pair.241" = type { %"struct.std::__1::__compressed_pair_elem.242" }
%"struct.std::__1::__compressed_pair_elem.242" = type { %"class.blink::Worklist.243"* }
%"class.blink::Worklist.243" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.211" }
%"class.std::__1::unique_ptr.247" = type { %"class.std::__1::__compressed_pair.248" }
%"class.std::__1::__compressed_pair.248" = type { %"struct.std::__1::__compressed_pair_elem.249" }
%"struct.std::__1::__compressed_pair_elem.249" = type { %"class.blink::Worklist.250"* }
%"class.blink::Worklist.250" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.211" }
%"class.std::__1::unique_ptr.254" = type { %"class.std::__1::__compressed_pair.255" }
%"class.std::__1::__compressed_pair.255" = type { %"struct.std::__1::__compressed_pair_elem.256" }
%"struct.std::__1::__compressed_pair_elem.256" = type { %"class.blink::Worklist.257"* }
%"class.blink::Worklist.257" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.211" }
%"class.std::__1::unique_ptr.261" = type { %"class.std::__1::__compressed_pair.262" }
%"class.std::__1::__compressed_pair.262" = type { %"struct.std::__1::__compressed_pair_elem.263" }
%"struct.std::__1::__compressed_pair_elem.263" = type { %"class.blink::Worklist.264"* }
%"class.blink::Worklist.264" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.211" }
%"class.std::__1::unique_ptr.268" = type { %"class.std::__1::__compressed_pair.269" }
%"class.std::__1::__compressed_pair.269" = type { %"struct.std::__1::__compressed_pair_elem.270" }
%"struct.std::__1::__compressed_pair_elem.270" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.271", %"class.std::__1::__compressed_pair.278", %"class.std::__1::__compressed_pair.283", %"class.std::__1::__compressed_pair.285", [4 x i8] }>
%"class.std::__1::unique_ptr.271" = type { %"class.std::__1::__compressed_pair.272" }
%"class.std::__1::__compressed_pair.272" = type { %"struct.std::__1::__compressed_pair_elem.273", %"struct.std::__1::__compressed_pair_elem.274" }
%"struct.std::__1::__compressed_pair_elem.273" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.274" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.275" }
%"class.std::__1::__compressed_pair.275" = type { %"struct.std::__1::__compressed_pair_elem.276" }
%"struct.std::__1::__compressed_pair_elem.276" = type { i64 }
%"class.std::__1::__compressed_pair.278" = type { %"struct.std::__1::__compressed_pair_elem.279" }
%"struct.std::__1::__compressed_pair_elem.279" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.283" = type { %"struct.std::__1::__compressed_pair_elem.276" }
%"class.std::__1::__compressed_pair.285" = type { %"struct.std::__1::__compressed_pair_elem.286" }
%"struct.std::__1::__compressed_pair_elem.286" = type { float }
%"class.std::__1::unique_ptr.291" = type { %"class.std::__1::__compressed_pair.292" }
%"class.std::__1::__compressed_pair.292" = type { %"struct.std::__1::__compressed_pair_elem.293" }
%"struct.std::__1::__compressed_pair_elem.293" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.294", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.294" = type { %"class.std::__1::__compressed_pair.295" }
%"class.std::__1::__compressed_pair.295" = type { %"struct.std::__1::__compressed_pair_elem.296" }
%"struct.std::__1::__compressed_pair_elem.296" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.303" }
%"class.WTF::Vector.303" = type { %"class.WTF::VectorBuffer.304" }
%"class.WTF::VectorBuffer.304" = type { %"class.WTF::VectorBufferBase.305" }
%"class.WTF::VectorBufferBase.305" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.311" = type { %"class.std::__1::__compressed_pair.312" }
%"class.std::__1::__compressed_pair.312" = type { %"struct.std::__1::__compressed_pair_elem.313" }
%"struct.std::__1::__compressed_pair_elem.313" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.319" }
%"class.WTF::VectorBuffer.319" = type { %"class.WTF::VectorBufferBase.320" }
%"class.WTF::VectorBufferBase.320" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.321" = type { %"class.std::__1::__compressed_pair.322" }
%"class.std::__1::__compressed_pair.322" = type { %"struct.std::__1::__compressed_pair_elem.323" }
%"struct.std::__1::__compressed_pair_elem.323" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.327" = type { %"class.std::__1::__compressed_pair.328" }
%"class.std::__1::__compressed_pair.328" = type { %"struct.std::__1::__compressed_pair_elem.329" }
%"struct.std::__1::__compressed_pair_elem.329" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.333" }
%"class.std::__1::unique_ptr.333" = type { %"class.std::__1::__compressed_pair.334" }
%"class.std::__1::__compressed_pair.334" = type { %"struct.std::__1::__compressed_pair_elem.335" }
%"struct.std::__1::__compressed_pair_elem.335" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.222"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.229"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.236"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.243"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.250"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.606" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.606" = type { %"struct.std::__1::__compressed_pair_elem.607" }
%"struct.std::__1::__compressed_pair_elem.607" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.339" = type { %"class.std::__1::__compressed_pair.340" }
%"class.std::__1::__compressed_pair.340" = type { %"struct.std::__1::__compressed_pair_elem.341" }
%"struct.std::__1::__compressed_pair_elem.341" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.345" = type { %"class.std::__1::__compressed_pair.346" }
%"class.std::__1::__compressed_pair.346" = type { %"struct.std::__1::__compressed_pair_elem.347" }
%"struct.std::__1::__compressed_pair_elem.347" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.351 }
%class.scoped_refptr.351 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.352" = type { %"struct.std::__1::__atomic_base.353" }
%"struct.std::__1::__atomic_base.353" = type { %"struct.std::__1::__cxx_atomic_impl.354" }
%"struct.std::__1::__cxx_atomic_impl.354" = type { %"struct.std::__1::__cxx_atomic_base_impl.355" }
%"struct.std::__1::__cxx_atomic_base_impl.355" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.blink::Member.367" = type { %"class.blink::MemberBase.368" }
%"class.blink::MemberBase.368" = type { %"class.blink::Range"* }
%"class.blink::Range" = type opaque
%"class.blink::UserActionElementSet" = type { %"class.blink::HeapHashMap.369" }
%"class.blink::HeapHashMap.369" = type { %"class.WTF::HashMap.372" }
%"class.WTF::HashMap.372" = type { %"class.WTF::HashTable.373" }
%"class.WTF::HashTable.373" = type <{ %"struct.WTF::KeyValuePair.375"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.375" = type opaque
%"class.blink::Member.376" = type { %"class.blink::MemberBase.377" }
%"class.blink::MemberBase.377" = type { %"class.blink::RootScrollerController"* }
%"class.blink::RootScrollerController" = type opaque
%"class.blink::HeapHashSet" = type { %"class.WTF::HashSet" }
%"class.WTF::HashSet" = type { %"class.WTF::HashTable.380" }
%"class.WTF::HashTable.380" = type <{ %"class.blink::WeakMember.382"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.382" = type opaque
%"class.blink::HeapHashSet.383" = type { %"class.WTF::HashSet.386" }
%"class.WTF::HashSet.386" = type { %"class.WTF::HashTable.387" }
%"class.WTF::HashTable.387" = type <{ %"class.blink::WeakMember.389"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.389" = type opaque
%"class.blink::Member.390" = type { %"class.blink::MemberBase.391" }
%"class.blink::MemberBase.391" = type { %"class.blink::ElementIntersectionObserverData"* }
%"class.blink::ElementIntersectionObserverData" = type opaque
%"class.blink::Member.392" = type { %"class.blink::MemberBase.393" }
%"class.blink::MemberBase.393" = type { %"class.blink::StyleEngine"* }
%"class.blink::StyleEngine" = type opaque
%"class.blink::Member.394" = type { %"class.blink::MemberBase.395" }
%"class.blink::MemberBase.395" = type { %"class.blink::StyleSheetList"* }
%"class.blink::StyleSheetList" = type opaque
%"class.blink::Member.396" = type { %"class.blink::MemberBase.397" }
%"class.blink::MemberBase.397" = type { %"class.blink::FormController"* }
%"class.blink::FormController" = type opaque
%"class.blink::TextLinkColors" = type { %"class.blink::Color", %"class.blink::Color", %"class.blink::Color", %"class.blink::Color", i8, i8, i8, i8 }
%"class.blink::Color" = type { i32 }
%"class.blink::Member.398" = type { %"class.blink::MemberBase.399" }
%"class.blink::MemberBase.399" = type { %"class.blink::VisitedLinkState"* }
%"class.blink::VisitedLinkState" = type opaque
%"class.blink::HeapHashMap.400" = type { %"class.WTF::HashMap.403" }
%"class.WTF::HashMap.403" = type { %"class.WTF::HashTable.404" }
%"class.WTF::HashTable.404" = type <{ %"struct.WTF::KeyValuePair.406"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.406" = type opaque
%"class.WTF::Vector.407" = type { %"class.WTF::VectorBuffer.408" }
%"class.WTF::VectorBuffer.408" = type { %"class.WTF::VectorBufferBase.409" }
%"class.WTF::VectorBufferBase.409" = type { %"class.blink::AXContext"**, i32, i32 }
%"class.blink::AXContext" = type opaque
%"class.blink::Member.412" = type { %"class.blink::MemberBase.413" }
%"class.blink::MemberBase.413" = type { %"class.blink::AXObjectCache"* }
%"class.blink::AXObjectCache" = type opaque
%"class.blink::Member.414" = type { %"class.blink::MemberBase.415" }
%"class.blink::MemberBase.415" = type { %"class.blink::DocumentMarkerController"* }
%"class.blink::DocumentMarkerController" = type opaque
%"class.base::ElapsedTimer" = type { %"class.base::TimeTicks" }
%"class.blink::Member.416" = type { %"class.blink::MemberBase.417" }
%"class.blink::MemberBase.417" = type { %"class.blink::ScriptRunner"* }
%"class.blink::ScriptRunner" = type <{ %"class.blink::ExecutionContextLifecycleStateObserver.base", [4 x i8], %"class.blink::NameClient", %"class.blink::Member.32", %"class.blink::HeapDeque", %"class.blink::HeapHashSet.437", %"class.blink::HeapDeque", %"class.blink::HeapDeque", %"class.blink::HeapDeque", %class.scoped_refptr.358, i32, i8, i8, [2 x i8] }>
%"class.blink::ExecutionContextLifecycleStateObserver.base" = type { %"class.blink::ExecutionContextLifecycleObserver.base" }
%"class.blink::ExecutionContextLifecycleObserver.base" = type <{ %"class.blink::ContextLifecycleObserver", i32 }>
%"class.blink::ContextLifecycleObserver" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::WeakMember.420" }
%"class.blink::WeakMember.420" = type { %"class.blink::MemberBase.421" }
%"class.blink::MemberBase.421" = type { %"class.blink::ContextLifecycleNotifier"* }
%"class.blink::ContextLifecycleNotifier" = type opaque
%"class.blink::HeapHashSet.437" = type { %"class.WTF::HashSet.440" }
%"class.WTF::HashSet.440" = type { %"class.WTF::HashTable.441" }
%"class.WTF::HashTable.441" = type <{ %"class.blink::Member.428"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.428" = type { %"class.blink::MemberBase.429" }
%"class.blink::MemberBase.429" = type { %"class.blink::PendingScript"* }
%"class.blink::PendingScript" = type <{ %"class.blink::NameClient", %"class.blink::Member.432", %"class.WTF::TextPosition", %"class.base::TimeTicks", i32, [4 x i8], %"class.blink::WebScopedVirtualTimePauser", %"class.blink::Member.434", %"class.blink::WeakMember", %"class.blink::WeakMember.436", i8, [7 x i8] }>
%"class.blink::Member.432" = type { %"class.blink::MemberBase.433" }
%"class.blink::MemberBase.433" = type { %"class.blink::ScriptElementBase"* }
%"class.blink::ScriptElementBase" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::WebScopedVirtualTimePauser" = type { %"class.base::TimeTicks", i8, i8, i32, %"class.blink::scheduler::MainThreadSchedulerImpl"*, %"class.blink::WebString", i64 }
%"class.blink::scheduler::MainThreadSchedulerImpl" = type opaque
%"class.blink::WebString" = type { %class.scoped_refptr }
%"class.blink::Member.434" = type { %"class.blink::MemberBase.435" }
%"class.blink::MemberBase.435" = type { %"class.blink::PendingScriptClient"* }
%"class.blink::PendingScriptClient" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::WeakMember" = type { %"class.blink::MemberBase.33" }
%"class.blink::WeakMember.436" = type { %"class.blink::MemberBase.148" }
%"class.blink::HeapDeque" = type { %"class.WTF::Deque.424" }
%"class.WTF::Deque.424" = type { %"class.WTF::Deque<blink::Member<blink::PendingScript>, 0, blink::HeapAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<blink::Member<blink::PendingScript>, 0, blink::HeapAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.426" }
%"class.WTF::VectorBuffer.426" = type { %"class.WTF::VectorBufferBase.427" }
%"class.WTF::VectorBufferBase.427" = type { %"class.blink::Member.428"*, i32, i32 }
%class.scoped_refptr.358 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.359" }>
%"class.base::RefCountedThreadSafe.359" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.blink::HeapVector.443" = type { %"class.WTF::Vector.446" }
%"class.WTF::Vector.446" = type { %"class.WTF::VectorBuffer.447" }
%"class.WTF::VectorBuffer.447" = type { %"class.WTF::VectorBufferBase.448" }
%"class.WTF::VectorBufferBase.448" = type { %"class.blink::Member.432"*, i32, i32 }
%"class.std::__1::unique_ptr.450" = type { %"class.std::__1::__compressed_pair.451" }
%"class.std::__1::__compressed_pair.451" = type { %"struct.std::__1::__compressed_pair_elem.452" }
%"struct.std::__1::__compressed_pair_elem.452" = type { %"class.blink::TransformSource"* }
%"class.blink::TransformSource" = type opaque
%"class.blink::DocumentEncodingData" = type <{ %"class.WTF::TextEncoding", i8, i8, [6 x i8] }>
%"class.WTF::TextEncoding" = type { i8* }
%"class.blink::HeapHashSet.456" = type { %"class.WTF::HashSet.459" }
%"class.WTF::HashSet.459" = type { %"class.WTF::HashTable.460" }
%"class.WTF::HashTable.460" = type <{ %"class.blink::WeakMember.462"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.462" = type opaque
%"class.blink::LiveNodeListRegistry" = type <{ %"class.WTF::Vector.463", i32, [4 x i8] }>
%"class.WTF::Vector.463" = type { %"class.WTF::VectorBuffer.464" }
%"class.WTF::VectorBuffer.464" = type { %"class.WTF::VectorBufferBase.465" }
%"class.WTF::VectorBufferBase.465" = type { %"struct.std::__1::pair.466"*, i32, i32 }
%"struct.std::__1::pair.466" = type opaque
%"class.blink::Member.469" = type { %"class.blink::MemberBase.470" }
%"class.blink::MemberBase.470" = type { %"class.blink::SVGDocumentExtensions"* }
%"class.blink::SVGDocumentExtensions" = type opaque
%"class.WTF::Vector.471" = type { %"class.WTF::VectorBuffer.472" }
%"class.WTF::VectorBuffer.472" = type { %"class.WTF::VectorBufferBase.473" }
%"class.WTF::VectorBufferBase.473" = type { %"struct.blink::AnnotatedRegionValue"*, i32, i32 }
%"struct.blink::AnnotatedRegionValue" = type opaque
%"class.std::__1::unique_ptr.476" = type { %"class.std::__1::__compressed_pair.477" }
%"class.std::__1::__compressed_pair.477" = type { %"struct.std::__1::__compressed_pair_elem.478" }
%"struct.std::__1::__compressed_pair_elem.478" = type { %"class.blink::SelectorQueryCache"* }
%"class.blink::SelectorQueryCache" = type opaque
%"class.blink::NthIndexCache" = type opaque
%"class.blink::LayoutView" = type opaque
%"class.blink::HeapVector.100" = type { %"class.WTF::Vector.103" }
%"class.WTF::Vector.103" = type { %"class.WTF::VectorBuffer.104" }
%"class.WTF::VectorBuffer.104" = type { %"class.WTF::VectorBufferBase.105" }
%"class.WTF::VectorBufferBase.105" = type { %"class.blink::Member.38"*, i32, i32 }
%"class.blink::HeapVector.482" = type { %"class.WTF::Vector.485" }
%"class.WTF::Vector.485" = type { %"class.WTF::VectorBuffer.486" }
%"class.WTF::VectorBuffer.486" = type { %"class.WTF::VectorBufferBase.487" }
%"class.WTF::VectorBufferBase.487" = type { %"class.blink::Member.488"*, i32, i32 }
%"class.blink::Member.488" = type opaque
%"class.blink::DocumentTiming" = type { %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.blink::Member.32" }
%"class.blink::Member.490" = type { %"class.blink::MemberBase.491" }
%"class.blink::MemberBase.491" = type { %"class.blink::MediaQueryMatcher"* }
%"class.blink::MediaQueryMatcher" = type opaque
%"class.blink::Member.492" = type { %"class.blink::MemberBase.493" }
%"class.blink::MemberBase.493" = type { %"class.blink::ScriptedAnimationController"* }
%"class.blink::ScriptedAnimationController" = type opaque
%"class.blink::Member.494" = type { %"class.blink::MemberBase.495" }
%"class.blink::MemberBase.495" = type { %"class.blink::ScriptedIdleTaskController"* }
%"class.blink::ScriptedIdleTaskController" = type opaque
%"class.blink::Member.496" = type { %"class.blink::MemberBase.497" }
%"class.blink::MemberBase.497" = type { %"class.blink::TextAutosizer"* }
%"class.blink::TextAutosizer" = type opaque
%"class.blink::Member.498" = type { %"class.blink::MemberBase.499" }
%"class.blink::MemberBase.499" = type { %"class.blink::ElementDataCache"* }
%"class.blink::ElementDataCache" = type opaque
%"class.WTF::HashMap.500" = type { %"class.WTF::HashTable.501" }
%"class.WTF::HashTable.501" = type <{ %"struct.WTF::KeyValuePair.504"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.504" = type opaque
%"class.blink::Member.505" = type { %"class.blink::MemberBase.506" }
%"class.blink::MemberBase.506" = type { %"class.blink::DocumentAnimations"* }
%"class.blink::DocumentAnimations" = type opaque
%"class.blink::Member.507" = type { %"class.blink::MemberBase.508" }
%"class.blink::MemberBase.508" = type { %"class.blink::DocumentTimeline"* }
%"class.blink::DocumentTimeline" = type opaque
%"class.blink::Member.509" = type { %"class.blink::MemberBase.510" }
%"class.blink::MemberBase.510" = type { %"class.blink::PendingAnimations"* }
%"class.blink::PendingAnimations" = type opaque
%"class.blink::Member.511" = type { %"class.blink::MemberBase.512" }
%"class.blink::MemberBase.512" = type { %"class.blink::WorkletAnimationController"* }
%"class.blink::WorkletAnimationController" = type opaque
%"class.blink::HeapTaskRunnerTimer" = type { %"class.blink::TimerBase", %"class.blink::WeakMember", { i64, i64 } }
%"class.blink::TimerBase" = type { i32 (...)**, %"class.base::TimeTicks", %"class.base::TimeDelta", %"class.base::Location", %class.scoped_refptr.358, %"class.base::WeakPtrFactory" }
%"class.base::TimeDelta" = type { i64 }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.360 }
%class.scoped_refptr.360 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.361", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.361" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.362" }
%"struct.std::__1::atomic.362" = type { %"struct.std::__1::__atomic_base.363" }
%"struct.std::__1::__atomic_base.363" = type { %"struct.std::__1::__atomic_base.364" }
%"struct.std::__1::__atomic_base.364" = type { %"struct.std::__1::__cxx_atomic_impl.365" }
%"struct.std::__1::__cxx_atomic_impl.365" = type { %"struct.std::__1::__cxx_atomic_base_impl.366" }
%"struct.std::__1::__cxx_atomic_base_impl.366" = type { i8 }
%"class.blink::HeapHashSet.513" = type { %"class.WTF::HashSet.516" }
%"class.WTF::HashSet.516" = type { %"class.WTF::HashTable.517" }
%"class.WTF::HashTable.517" = type <{ %"class.blink::Member.519"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.519" = type opaque
%"class.blink::Member.520" = type { %"class.blink::MemberBase.521" }
%"class.blink::MemberBase.521" = type { %"class.blink::CanvasFontCache"* }
%"class.blink::CanvasFontCache" = type opaque
%"class.blink::Member.522" = type { %"class.blink::MemberBase.523" }
%"class.blink::MemberBase.523" = type { %"class.blink::IntersectionObserverController"* }
%"class.blink::IntersectionObserverController" = type opaque
%"class.blink::Member.524" = type { %"class.blink::MemberBase.525" }
%"class.blink::MemberBase.525" = type { %"class.blink::SnapCoordinator"* }
%"class.blink::SnapCoordinator" = type opaque
%"class.blink::Member.526" = type { %"class.blink::MemberBase.527" }
%"class.blink::MemberBase.527" = type { %"class.blink::PropertyRegistry"* }
%"class.blink::PropertyRegistry" = type opaque
%"class.blink::Member.528" = type { %"class.blink::MemberBase.529" }
%"class.blink::MemberBase.529" = type { %"class.blink::Document::NetworkStateObserver"* }
%"class.blink::Document::NetworkStateObserver" = type opaque
%"class.std::__1::unique_ptr.530" = type { %"class.std::__1::__compressed_pair.531" }
%"class.std::__1::__compressed_pair.531" = type { %"struct.std::__1::__compressed_pair_elem.532" }
%"struct.std::__1::__compressed_pair_elem.532" = type { %"class.ukm::UkmRecorder"* }
%"class.ukm::UkmRecorder" = type opaque
%"class.std::__1::unique_ptr.536" = type { %"class.std::__1::__compressed_pair.537" }
%"class.std::__1::__compressed_pair.537" = type { %"struct.std::__1::__compressed_pair_elem.538" }
%"struct.std::__1::__compressed_pair_elem.538" = type { %"class.blink::FontMatchingMetrics"* }
%"class.blink::FontMatchingMetrics" = type opaque
%"class.blink::Member.542" = type { %"class.blink::MemberBase.543" }
%"class.blink::MemberBase.543" = type { %"class.blink::DOMFeaturePolicy"* }
%"class.blink::DOMFeaturePolicy" = type opaque
%"class.blink::Member.544" = type { %"class.blink::MemberBase.545" }
%"class.blink::MemberBase.545" = type { %"class.blink::SlotAssignmentEngine"* }
%"class.blink::SlotAssignmentEngine" = type opaque
%"class.blink::Member.546" = type { %"class.blink::MemberBase.547" }
%"class.blink::MemberBase.547" = type { %"class.blink::ViewportData"* }
%"class.blink::ViewportData" = type opaque
%"class.blink::Member.548" = type { %"class.blink::MemberBase.549" }
%"class.blink::MemberBase.549" = type { %"class.blink::LazyLoadImageObserver"* }
%"class.blink::LazyLoadImageObserver" = type opaque
%"class.WTF::Vector.550" = type { %"class.WTF::VectorBuffer.551" }
%"class.WTF::VectorBuffer.551" = type { %"class.WTF::VectorBufferBase.552" }
%"class.WTF::VectorBufferBase.552" = type { i8*, i32, i32 }
%"class.blink::HeapHashMap.555" = type { %"class.WTF::HashMap.558" }
%"class.WTF::HashMap.558" = type { %"class.WTF::HashTable.559" }
%"class.WTF::HashTable.559" = type <{ %"struct.WTF::KeyValuePair.561"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.561" = type opaque
%"class.blink::Member.562" = type { %"class.blink::MemberBase.563" }
%"class.blink::MemberBase.563" = type { %"class.blink::BeforeUnloadEventListener"* }
%"class.blink::BeforeUnloadEventListener" = type opaque
%"class.std::__1::unique_ptr.564" = type { %"class.std::__1::__compressed_pair.565" }
%"class.std::__1::__compressed_pair.565" = type { %"struct.std::__1::__compressed_pair_elem.566" }
%"struct.std::__1::__compressed_pair_elem.566" = type { %"class.blink::DocumentResourceCoordinator"* }
%"class.blink::DocumentResourceCoordinator" = type opaque
%"class.blink::Member.570" = type { %"class.blink::MemberBase.571" }
%"class.blink::MemberBase.571" = type { %"class.blink::CookieJar"* }
%"class.blink::CookieJar" = type opaque
%"class.blink::Member.572" = type { %"class.blink::MemberBase.573" }
%"class.blink::MemberBase.573" = type { %"class.blink::FragmentDirective"* }
%"class.blink::FragmentDirective" = type { %"class.blink::ScriptWrappable" }
%"class.blink::HeapHashMap.574" = type { %"class.WTF::HashMap.577" }
%"class.WTF::HashMap.577" = type { %"class.WTF::HashTable.578" }
%"class.WTF::HashTable.578" = type <{ %"struct.WTF::KeyValuePair.580"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.580" = type opaque
%"class.blink::HeapObserverSet" = type { i32, [4 x i8], %"class.blink::HeapHashSet.581" }
%"class.blink::HeapHashSet.581" = type { %"class.WTF::HashSet.584" }
%"class.WTF::HashSet.584" = type { %"class.WTF::HashTable.585" }
%"class.WTF::HashTable.585" = type <{ %"class.blink::WeakMember.587"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.587" = type opaque
%"class.blink::Member.588" = type { %"class.blink::MemberBase.589" }
%"class.blink::MemberBase.589" = type { %"class.blink::DisplayLockDocumentState"* }
%"class.blink::DisplayLockDocumentState" = type opaque
%"class.blink::Member.590" = type { %"class.blink::MemberBase.591" }
%"class.blink::MemberBase.591" = type { %"class.blink::FontPreloadManager"* }
%"class.blink::FontPreloadManager" = type <{ %"class.blink::Member.32", %"class.blink::HeapHashSet.597", i32, [4 x i8], %"class.blink::HeapTaskRunnerTimer.604", %"class.base::TimeDelta", i32, [4 x i8] }>
%"class.blink::HeapHashSet.597" = type { %"class.WTF::HashSet.600" }
%"class.WTF::HashSet.600" = type { %"class.WTF::HashTable.601" }
%"class.WTF::HashTable.601" = type <{ %"class.blink::Member.603"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.603" = type opaque
%"class.blink::HeapTaskRunnerTimer.604" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.605", { i64, i64 } }
%"class.blink::WeakMember.605" = type { %"class.blink::MemberBase.591" }
%"class.blink::WeakMember.592" = type { %"class.blink::MemberBase.16" }
%"class.blink::MemberBase.16" = type { %"class.blink::Node"* }
%"class.blink::Member.593" = type { %"class.blink::MemberBase.594" }
%"class.blink::MemberBase.594" = type { %"class.blink::DocumentData"* }
%"class.blink::DocumentData" = type opaque
%"class.blink::Member.89" = type { %"class.blink::MemberBase.90" }
%"class.blink::MemberBase.90" = type { %"class.blink::TreeOrderedMap"* }
%"class.blink::TreeOrderedMap" = type { %"class.blink::HeapHashMap" }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap" }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type { %"class.WTF::AtomicString", %"class.blink::Member.96" }
%"class.blink::Member.96" = type { %"class.blink::MemberBase.97" }
%"class.blink::MemberBase.97" = type { %"class.blink::TreeOrderedMap::MapEntry"* }
%"class.blink::TreeOrderedMap::MapEntry" = type { %"class.blink::Member.38", i32, %"class.blink::HeapVector.100" }
%"class.blink::Member.107" = type { %"class.blink::MemberBase.108" }
%"class.blink::MemberBase.108" = type { %"class.blink::IdTargetObserverRegistry"* }
%"class.blink::IdTargetObserverRegistry" = type opaque
%"class.blink::Member.109" = type { %"class.blink::MemberBase.110" }
%"class.blink::MemberBase.110" = type { %"class.blink::ScopedStyleResolver"* }
%"class.blink::ScopedStyleResolver" = type opaque
%"class.blink::Member.111" = type { %"class.blink::MemberBase.112" }
%"class.blink::MemberBase.112" = type { %"class.blink::DOMSelection"* }
%"class.blink::DOMSelection" = type opaque
%"class.blink::RadioButtonGroupScope" = type { %"class.blink::Member.113" }
%"class.blink::Member.113" = type { %"class.blink::MemberBase.114" }
%"class.blink::MemberBase.114" = type { %"class.blink::HeapHashMap.115"* }
%"class.blink::HeapHashMap.115" = type opaque
%"class.blink::Member.116" = type { %"class.blink::MemberBase.117" }
%"class.blink::MemberBase.117" = type { %"class.blink::SVGTreeScopeResources"* }
%"class.blink::SVGTreeScopeResources" = type opaque
%"class.blink::HeapVector.118" = type { %"class.WTF::Vector.121" }
%"class.WTF::Vector.121" = type { %"class.WTF::VectorBuffer.122" }
%"class.WTF::VectorBuffer.122" = type { %"class.WTF::VectorBufferBase.123" }
%"class.WTF::VectorBufferBase.123" = type { %"class.blink::Member.124"*, i32, i32 }
%"class.blink::Member.19" = type { %"class.blink::MemberBase.20" }
%"class.blink::MemberBase.20" = type { %"class.blink::NodeData"* }
%"class.blink::NodeData" = type { i16, %"class.WTF::ConcurrentlyReadBitField" }
%"class.WTF::ConcurrentlyReadBitField" = type { %"class.WTF::SingleThreadedBitField" }
%"class.WTF::SingleThreadedBitField" = type { i16 }
%"class.blink::Member.15" = type { %"class.blink::MemberBase.16" }
%"class.WTF::Vector.24" = type { %"class.WTF::VectorBuffer.25" }
%"class.WTF::VectorBuffer.25" = type { %"class.WTF::VectorBufferBase.26" }
%"class.WTF::VectorBufferBase.26" = type { %"class.blink::Attribute"*, i32, i32 }
%"class.blink::Attribute" = type { %"class.blink::QualifiedName", %"class.WTF::AtomicString" }
%"class.blink::HTMLConstructionSite" = type <{ %"class.blink::Member.30", %"class.blink::Member.32", %"class.blink::Member.11", %"class.blink::Member.7", %"class.blink::Member.34", %"class.blink::HTMLElementStack", %"class.blink::HTMLFormattingElementList", %"class.blink::HeapVector.62", %"class.blink::HTMLConstructionSite::PendingText", i32, i8, i8, i8, i8 }>
%"class.blink::Member.30" = type { %"class.blink::MemberBase.31" }
%"class.blink::MemberBase.31" = type { %"class.blink::HTMLParserReentryPermit"* }
%"class.blink::HTMLParserReentryPermit" = type opaque
%"class.blink::Member.34" = type { %"class.blink::MemberBase.35" }
%"class.blink::MemberBase.35" = type { %"class.blink::HTMLFormElement"* }
%"class.blink::HTMLFormElement" = type opaque
%"class.blink::HTMLElementStack" = type <{ %"class.blink::Member.36", %"class.blink::Member.11", %"class.blink::Member.38", %"class.blink::Member.38", i32, [4 x i8] }>
%"class.blink::Member.36" = type { %"class.blink::MemberBase.37" }
%"class.blink::MemberBase.37" = type { %"class.blink::HTMLElementStack::ElementRecord"* }
%"class.blink::HTMLElementStack::ElementRecord" = type { %"class.blink::Member.7", %"class.blink::Member.36" }
%"class.blink::HTMLFormattingElementList" = type { %"class.blink::HeapVector" }
%"class.blink::HeapVector" = type { %"class.WTF::Vector.58" }
%"class.WTF::Vector.58" = type { %"class.WTF::VectorBuffer.59" }
%"class.WTF::VectorBuffer.59" = type { %"class.WTF::VectorBufferBase.60" }
%"class.WTF::VectorBufferBase.60" = type { %"class.blink::HTMLFormattingElementList::Entry"*, i32, i32 }
%"class.blink::HTMLFormattingElementList::Entry" = type { %"class.blink::Member.7" }
%"class.blink::HeapVector.62" = type { %"class.WTF::Vector.65" }
%"class.WTF::Vector.65" = type { %"class.WTF::VectorBuffer.66" }
%"class.WTF::VectorBuffer.66" = type { %"class.WTF::VectorBufferBase.67", [40 x i8] }
%"class.WTF::VectorBufferBase.67" = type { %"struct.blink::HTMLConstructionSiteTask"*, i32, i32 }
%"struct.blink::HTMLConstructionSiteTask" = type <{ i32, [4 x i8], %"class.blink::Member.11", %"class.blink::Member.15", %"class.blink::Member.15", i8, [7 x i8] }>
%"class.blink::HTMLConstructionSite::PendingText" = type <{ %"class.blink::Member.11", %"class.blink::Member.15", %"class.WTF::StringBuilder", i32, [4 x i8] }>
%"class.WTF::Vector.80" = type { %"class.WTF::VectorBuffer.81" }
%"class.WTF::VectorBuffer.81" = type { %"class.WTF::VectorBufferBase.82" }
%"class.WTF::VectorBufferBase.82" = type { i32*, i32, i32 }
%"class.WTF::StringBuilder" = type <{ %"class.WTF::String", %union.anon, i32, i8, i8, [2 x i8] }>
%union.anon = type { %"class.WTF::Vector.70" }
%"class.WTF::Vector.70" = type { %"class.WTF::VectorBuffer.71" }
%"class.WTF::VectorBuffer.71" = type { %"class.WTF::VectorBufferBase.72", [16 x i8] }
%"class.WTF::VectorBufferBase.72" = type { i8*, i32, i32 }
%"class.blink::Member.85" = type { %"class.blink::MemberBase.86" }
%"class.blink::MemberBase.86" = type { %"class.blink::HTMLDocumentParser"* }
%"class.blink::HTMLDocumentParser" = type opaque
%"class.blink::Member.38" = type { %"class.blink::MemberBase.39" }
%"class.blink::MemberBase.39" = type { %"class.blink::Element"* }
%"class.blink::Element" = type { %"class.blink::ContainerNode", %"class.blink::Animatable", %"class.blink::QualifiedName", %"class.blink::Member.40" }
%"class.blink::Animatable" = type { i32 (...)** }
%"class.blink::Member.40" = type { %"class.blink::MemberBase.41" }
%"class.blink::MemberBase.41" = type { %"class.blink::ElementData"* }
%"class.blink::ElementData" = type { %"class.WTF::ConcurrentlyReadBitField.44", %"class.blink::Member.46", %"class.blink::SpaceSplitString", %"class.WTF::AtomicString" }
%"class.WTF::ConcurrentlyReadBitField.44" = type { %"class.WTF::SingleThreadedBitField.45" }
%"class.WTF::SingleThreadedBitField.45" = type { i32 }
%"class.blink::Member.46" = type { %"class.blink::MemberBase.47" }
%"class.blink::MemberBase.47" = type { %"class.blink::CSSPropertyValueSet"* }
%"class.blink::CSSPropertyValueSet" = type opaque
%"class.blink::SpaceSplitString" = type { %class.scoped_refptr.48 }
%class.scoped_refptr.48 = type { %"class.blink::SpaceSplitString::Data"* }
%"class.blink::SpaceSplitString::Data" = type { %"class.WTF::RefCounted.49", %"class.WTF::AtomicString", %"class.WTF::Vector.51" }
%"class.WTF::RefCounted.49" = type { %"class.base::RefCounted.50" }
%"class.base::RefCounted.50" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.51" = type { %"class.WTF::VectorBuffer.52" }
%"class.WTF::VectorBuffer.52" = type { %"class.WTF::VectorBufferBase.53", [32 x i8] }
%"class.WTF::VectorBufferBase.53" = type { %"class.WTF::AtomicString"*, i32, i32 }
%"class.WTF::TextPosition" = type { %"class.WTF::OrdinalNumber", %"class.WTF::OrdinalNumber" }
%"class.WTF::OrdinalNumber" = type { i32 }
%"class.blink::CompactHTMLToken" = type { i8, %"class.WTF::String", %"class.WTF::Vector.611", %"class.WTF::TextPosition" }
%"class.WTF::Vector.611" = type { %"class.WTF::VectorBuffer.612" }
%"class.WTF::VectorBuffer.612" = type { %"class.WTF::VectorBufferBase.613" }
%"class.WTF::VectorBufferBase.613" = type { %"struct.blink::CompactHTMLToken::Attribute"*, i32, i32 }
%"struct.blink::CompactHTMLToken::Attribute" = type { %"class.WTF::String", %"class.WTF::String" }
%"class.blink::HTMLTokenizer" = type <{ i32, i8, i8, [2 x i8], %"class.blink::HTMLToken"*, i16, [6 x i8], %"class.blink::InputStreamPreprocessor", %class.LiteralBuffer.619, %class.LiteralBuffer.632, %class.LiteralBuffer.632, %"class.blink::HTMLParserOptions", [6 x i8] }>
%"class.blink::HTMLToken" = type { i32, %"class.blink::HTMLToken::Attribute::Range", i32, %class.LiteralBuffer, i16, i8, %"class.WTF::Vector.616", %"class.blink::HTMLToken::Attribute"*, %"class.std::__1::unique_ptr.622" }
%"class.blink::HTMLToken::Attribute::Range" = type { i32, i32 }
%class.LiteralBuffer = type { i16*, i16*, i16*, [256 x i16] }
%"class.WTF::Vector.616" = type { %"class.WTF::VectorBuffer.617" }
%"class.WTF::VectorBuffer.617" = type { %"class.WTF::VectorBufferBase.618", [1920 x i8] }
%"class.WTF::VectorBufferBase.618" = type { %"class.blink::HTMLToken::Attribute"*, i32, i32 }
%"class.blink::HTMLToken::Attribute" = type { %class.LiteralBuffer.619, %class.LiteralBuffer.619, %"class.blink::HTMLToken::Attribute::Range", %"class.blink::HTMLToken::Attribute::Range" }
%"class.std::__1::unique_ptr.622" = type { %"class.std::__1::__compressed_pair.623" }
%"class.std::__1::__compressed_pair.623" = type { %"struct.std::__1::__compressed_pair_elem.624" }
%"struct.std::__1::__compressed_pair_elem.624" = type { %"class.blink::DoctypeData"* }
%"class.blink::DoctypeData" = type <{ i8, i8, [6 x i8], %"class.WTF::Vector.625", %"class.WTF::Vector.625", i8, [7 x i8] }>
%"class.WTF::Vector.625" = type { %"class.WTF::VectorBuffer.626" }
%"class.WTF::VectorBuffer.626" = type { %"class.WTF::VectorBufferBase.77" }
%"class.WTF::VectorBufferBase.77" = type { i16*, i32, i32 }
%"class.blink::InputStreamPreprocessor" = type <{ %"class.blink::HTMLTokenizer"*, i8, [7 x i8] }>
%class.LiteralBuffer.619 = type { i16*, i16*, i16*, [32 x i16] }
%class.LiteralBuffer.632 = type { i8*, i8*, i8*, [32 x i8] }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.WTF::VectorBuffer" = type <{ %"class.WTF::VectorBufferBase", [4 x i8], [4 x i8] }>
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.633" }
%"class.std::__1::__compressed_pair.633" = type { %"struct.std::__1::__compressed_pair_elem.634" }
%"struct.std::__1::__compressed_pair_elem.634" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.635 }
%union.anon.635 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.WTF::VectorBuffer.1" = type <{ %"class.WTF::VectorBufferBase.2", [4 x i8], [4 x i8] }>

$_ZN3WTF22EqualIgnoringASCIICaseILm5EEEbRKNS_10StringViewERAT__Kc = comdat any

$_ZN3WTF22EqualIgnoringASCIICaseILm7EEEbRKNS_10StringViewERAT__Kc = comdat any

$_ZN3WTF22EqualIgnoringASCIICaseILm10EEEbRKNS_10StringViewERAT__Kc = comdat any

$_ZN3WTF12VectorBufferIN5blink24HTMLTreeBuilderSimulator9NamespaceELj1ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS3_ = comdat any

$_ZNK3WTF6VectorIN5blink24HTMLTreeBuilderSimulator9NamespaceELj1ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN3WTF6VectorIN5blink24HTMLTreeBuilderSimulator9NamespaceELj1ENS_18PartitionAllocatorEE14AppendSlowCaseIS3_EEvOT_ = comdat any

$_ZN3WTF6VectorIN5blink24HTMLTreeBuilderSimulator9NamespaceELj1ENS_18PartitionAllocatorEE14ExpandCapacityEj = comdat any

$_ZN3WTF6VectorIN5blink24HTMLTreeBuilderSimulator9NamespaceELj1ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink24HTMLTreeBuilderSimulator9NamespaceEEEmm = comdat any

$_ZN3WTF6VectorIN5blink24HTMLTreeBuilderSimulator9NamespaceELj1ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN3WTF6VectorIN5blink24HTMLTreeBuilderSimulator9NamespaceELj1ENS_18PartitionAllocatorEE14AppendSlowCaseIRS3_EEvOT_ = comdat any

$_ZN3WTF6VectorIN5blink24HTMLTreeBuilderSimulator12TemplateTypeELj1ENS_18PartitionAllocatorEE14AppendSlowCaseIRS3_EEvOT_ = comdat any

$_ZN3WTF6VectorIN5blink24HTMLTreeBuilderSimulator12TemplateTypeELj1ENS_18PartitionAllocatorEE14ExpandCapacityEj = comdat any

$_ZN3WTF6VectorIN5blink24HTMLTreeBuilderSimulator12TemplateTypeELj1ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink24HTMLTreeBuilderSimulator12TemplateTypeEEEmm = comdat any

$_ZN3WTF12VectorBufferIN5blink24HTMLTreeBuilderSimulator12TemplateTypeELj1ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS3_ = comdat any

$_ZN3WTF6VectorIN5blink24HTMLTreeBuilderSimulator12TemplateTypeELj1ENS_18PartitionAllocatorEE2atEj = comdat any

@_ZN5blink9svg_names13kNamespaceURIE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink12mathml_names13kNamespaceURIE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink9svg_names7kSVGTagE = external local_unnamed_addr constant %"class.blink::SVGQualifiedName"*, align 8
@_ZN5blink12mathml_names8kMathTagE = external local_unnamed_addr constant %"class.blink::MathMLQualifiedName"*, align 8
@_ZN5blink10html_names12kTextareaTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names9kTitleTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names10kScriptTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names9kTypeAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@_ZN5blink10html_names13kLanguageAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@_ZN5blink10html_names8kLinkTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names12kTemplateTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names15kShadowrootAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@.str = private unnamed_addr constant [5 x i8] c"open\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"closed\00", align 1
@_ZN5blink10html_names13kPlaintextTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names9kStyleTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names10kIFrameTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names7kXmpTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names11kNoembedTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names12kNoframesTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names12kNoscriptTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names10kSelectTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names5kPTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names6kBrTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink12mathml_names17kAnnotationXmlTagE = external local_unnamed_addr constant %"class.blink::MathMLQualifiedName"*, align 8
@_ZN5blink12mathml_names13kEncodingAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@.str.2 = private unnamed_addr constant [10 x i8] c"text/html\00", align 1
@.str.3 = private unnamed_addr constant [22 x i8] c"application/xhtml+xml\00", align 1
@_ZN5blink9svg_names17kForeignObjectTagE = external local_unnamed_addr constant %"class.blink::SVGQualifiedName"*, align 8
@_ZN5blink9svg_names8kDescTagE = external local_unnamed_addr constant %"class.blink::SVGQualifiedName"*, align 8
@_ZN5blink9svg_names9kTitleTagE = external local_unnamed_addr constant %"class.blink::SVGQualifiedName"*, align 8
@_ZN5blink10html_names5kBTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names7kBigTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names14kBlockquoteTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names8kBodyTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names10kCenterTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names8kCodeTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names6kDdTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names7kDivTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names6kDlTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names6kDtTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names6kEmTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names9kEmbedTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names6kH1TagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names6kH2TagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names6kH3TagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names6kH4TagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names6kH5TagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names6kH6TagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names8kHeadTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names6kHrTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names5kITagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names7kImgTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names6kLiTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names11kListingTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names8kMenuTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names8kMetaTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names8kNobrTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names6kOlTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names7kPreTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names8kRubyTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names5kSTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names9kSmallTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names8kSpanTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names10kStrongTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names10kStrikeTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names7kSubTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names7kSupTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names9kTableTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names6kTtTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names5kUTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names6kUlTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names7kVarTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names8kFontTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names10kColorAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@_ZN5blink10html_names9kFaceAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@_ZN5blink10html_names9kSizeAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@_ZN5blink12mathml_names6kMiTagE = external local_unnamed_addr constant %"class.blink::MathMLQualifiedName"*, align 8
@_ZN5blink12mathml_names6kMoTagE = external local_unnamed_addr constant %"class.blink::MathMLQualifiedName"*, align 8
@_ZN5blink12mathml_names6kMnTagE = external local_unnamed_addr constant %"class.blink::MathMLQualifiedName"*, align 8
@_ZN5blink12mathml_names6kMsTagE = external local_unnamed_addr constant %"class.blink::MathMLQualifiedName"*, align 8
@_ZN5blink12mathml_names9kMtextTagE = external local_unnamed_addr constant %"class.blink::MathMLQualifiedName"*, align 8
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@_ZN5blink10html_names9kInputTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@_ZN5blink10html_names10kKeygenTagE = external local_unnamed_addr constant %"class.blink::HTMLQualifiedName"*, align 8
@.str.4 = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@.str.5 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.6 = private unnamed_addr constant [33 x i8] c"expanded_capacity > old_capacity\00", align 1
@.str.8 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.9 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink24HTMLTreeBuilderSimulator9NamespaceEEEPKcv = private unnamed_addr constant [90 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::HTMLTreeBuilderSimulator::Namespace]\00", align 1
@_ZN3WTF19kASCIICaseFoldTableE = external local_unnamed_addr constant [256 x i8], align 16
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink24HTMLTreeBuilderSimulator12TemplateTypeEEEPKcv = private unnamed_addr constant [93 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::HTMLTreeBuilderSimulator::TemplateType]\00", align 1

@_ZN5blink24HTMLTreeBuilderSimulatorC1ERKNS_17HTMLParserOptionsE = hidden unnamed_addr alias void (%"class.blink::HTMLTreeBuilderSimulator"*, %"class.blink::HTMLParserOptions"*), void (%"class.blink::HTMLTreeBuilderSimulator"*, %"class.blink::HTMLParserOptions"*)* @_ZN5blink24HTMLTreeBuilderSimulatorC2ERKNS_17HTMLParserOptionsE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink24HTMLTreeBuilderSimulatorC2ERKNS_17HTMLParserOptionsE(%"class.blink::HTMLTreeBuilderSimulator"*, %"class.blink::HTMLParserOptions"* nocapture readonly dereferenceable(2)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.blink::HTMLParserOptions"* %1 to i16*
  %4 = bitcast %"class.blink::HTMLTreeBuilderSimulator"* %0 to i16*
  %5 = load i16, i16* %3, align 1
  store i16 %5, i16* %4, align 8
  %6 = getelementptr inbounds %"class.blink::HTMLTreeBuilderSimulator", %"class.blink::HTMLTreeBuilderSimulator"* %0, i64 0, i32 2
  %7 = getelementptr inbounds %"class.blink::HTMLTreeBuilderSimulator", %"class.blink::HTMLTreeBuilderSimulator"* %0, i64 0, i32 2, i32 0, i32 1, i64 0
  %8 = bitcast %"class.WTF::Vector"* %6 to i8**
  store i8* %7, i8** %8, align 8
  %9 = getelementptr inbounds %"class.blink::HTMLTreeBuilderSimulator", %"class.blink::HTMLTreeBuilderSimulator"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  store i32 1, i32* %9, align 8
  %10 = getelementptr inbounds %"class.blink::HTMLTreeBuilderSimulator", %"class.blink::HTMLTreeBuilderSimulator"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %11 = getelementptr inbounds %"class.blink::HTMLTreeBuilderSimulator", %"class.blink::HTMLTreeBuilderSimulator"* %0, i64 0, i32 3
  store i8 0, i8* %11, align 8
  %12 = getelementptr inbounds %"class.blink::HTMLTreeBuilderSimulator", %"class.blink::HTMLTreeBuilderSimulator"* %0, i64 0, i32 5
  %13 = getelementptr inbounds %"class.blink::HTMLTreeBuilderSimulator", %"class.blink::HTMLTreeBuilderSimulator"* %0, i64 0, i32 5, i32 0, i32 1, i64 0
  %14 = bitcast %"class.WTF::Vector.0"* %12 to i8**
  store i8* %13, i8** %14, align 8
  %15 = getelementptr inbounds %"class.blink::HTMLTreeBuilderSimulator", %"class.blink::HTMLTreeBuilderSimulator"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  store i32 1, i32* %15, align 8
  %16 = getelementptr inbounds %"class.blink::HTMLTreeBuilderSimulator", %"class.blink::HTMLTreeBuilderSimulator"* %0, i64 0, i32 5, i32 0, i32 0, i32 2
  store i32 0, i32* %16, align 4
  %17 = bitcast i8* %7 to i32*
  store i32 0, i32* %17, align 4
  store i32 1, i32* %10, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink24HTMLTreeBuilderSimulator8StateForEPNS_15HTMLTreeBuilderE(%"class.WTF::Vector"* noalias sret, %"class.blink::HTMLTreeBuilder"*) local_unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %7 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 1, i64 0
  %8 = bitcast %"class.WTF::Vector"* %0 to i8**
  %9 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 1, i64 0
  %10 = bitcast i8* %9 to i64*
  store i64 -6148914691236517206, i64* %10, align 8
  store i8* %7, i8** %8, align 8
  store i32 1, i32* %5, align 8
  store i32 0, i32* %6, align 4
  %11 = getelementptr inbounds %"class.blink::HTMLTreeBuilder", %"class.blink::HTMLTreeBuilder"* %1, i64 0, i32 3, i32 5
  %12 = tail call %"class.blink::HTMLElementStack::ElementRecord"* @_ZNK5blink16HTMLElementStack9TopRecordEv(%"class.blink::HTMLElementStack"* %11) #9
  %13 = icmp eq %"class.blink::HTMLElementStack::ElementRecord"* %12, null
  br i1 %13, label %20, label %14

14:                                               ; preds = %2
  %15 = bitcast i32* %3 to i8*
  %16 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink9svg_names13kNamespaceURIE, align 8
  %17 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %16, i64 0, i32 0, i32 0, i32 0
  %18 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink12mathml_names13kNamespaceURIE, align 8
  %19 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %18, i64 0, i32 0, i32 0, i32 0
  br label %37

20:                                               ; preds = %74, %2
  %21 = load i32, i32* %6, align 4
  %22 = icmp ugt i32 %21, 1
  br i1 %22, label %23, label %36

23:                                               ; preds = %20, %23
  %24 = phi i32 [ %32, %23 ], [ 0, %20 ]
  %25 = call dereferenceable(4) i32* @_ZN3WTF6VectorIN5blink24HTMLTreeBuilderSimulator9NamespaceELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %0, i32 %24) #9
  %26 = load i32, i32* %6, align 4
  %27 = xor i32 %24, -1
  %28 = add i32 %26, %27
  %29 = call dereferenceable(4) i32* @_ZN3WTF6VectorIN5blink24HTMLTreeBuilderSimulator9NamespaceELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %0, i32 %28) #9
  %30 = load i32, i32* %25, align 4
  %31 = load i32, i32* %29, align 4
  store i32 %31, i32* %25, align 4
  store i32 %30, i32* %29, align 4
  %32 = add nuw nsw i32 %24, 1
  %33 = load i32, i32* %6, align 4
  %34 = lshr i32 %33, 1
  %35 = icmp ult i32 %32, %34
  br i1 %35, label %23, label %36

36:                                               ; preds = %23, %20
  ret void

37:                                               ; preds = %14, %74
  %38 = phi %"class.blink::HTMLElementStack::ElementRecord"* [ %12, %14 ], [ %76, %74 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #9
  store i32 0, i32* %3, align 4
  %39 = getelementptr inbounds %"class.blink::HTMLElementStack::ElementRecord", %"class.blink::HTMLElementStack::ElementRecord"* %38, i64 0, i32 0, i32 0, i32 0
  %40 = load %"class.blink::HTMLStackItem"*, %"class.blink::HTMLStackItem"** %39, align 8
  %41 = getelementptr inbounds %"class.blink::HTMLStackItem", %"class.blink::HTMLStackItem"* %40, i64 0, i32 3, i32 0, i32 0, i32 0
  %42 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %41, align 8
  %43 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %17, align 8
  %44 = icmp eq %"class.WTF::StringImpl"* %42, %43
  br i1 %44, label %45, label %46

45:                                               ; preds = %37
  store i32 1, i32* %3, align 4
  br label %50

46:                                               ; preds = %37
  %47 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %19, align 8
  %48 = icmp eq %"class.WTF::StringImpl"* %42, %47
  br i1 %48, label %49, label %50

49:                                               ; preds = %46
  store i32 2, i32* %3, align 4
  br label %50

50:                                               ; preds = %46, %49, %45
  %51 = phi i32 [ 0, %46 ], [ 2, %49 ], [ 1, %45 ]
  %52 = load i32, i32* %6, align 4
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %62, label %54

54:                                               ; preds = %50
  %55 = add i32 %52, -1
  %56 = call dereferenceable(4) i32* @_ZN3WTF6VectorIN5blink24HTMLTreeBuilderSimulator9NamespaceELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %0, i32 %55) #9
  %57 = load i32, i32* %56, align 4
  %58 = load i32, i32* %3, align 4
  %59 = icmp eq i32 %57, %58
  br i1 %59, label %74, label %60

60:                                               ; preds = %54
  %61 = load i32, i32* %6, align 4
  br label %62

62:                                               ; preds = %60, %50
  %63 = phi i32 [ %58, %60 ], [ %51, %50 ]
  %64 = phi i32 [ %61, %60 ], [ 0, %50 ]
  %65 = load i32, i32* %5, align 8
  %66 = icmp eq i32 %64, %65
  br i1 %66, label %73, label %67, !prof !2

67:                                               ; preds = %62
  %68 = load i32*, i32** %4, align 8
  %69 = zext i32 %64 to i64
  %70 = getelementptr inbounds i32, i32* %68, i64 %69
  store i32 %63, i32* %70, align 4
  %71 = load i32, i32* %6, align 4
  %72 = add i32 %71, 1
  store i32 %72, i32* %6, align 4
  br label %74

73:                                               ; preds = %62
  call void @_ZN3WTF6VectorIN5blink24HTMLTreeBuilderSimulator9NamespaceELj1ENS_18PartitionAllocatorEE14AppendSlowCaseIRS3_EEvOT_(%"class.WTF::Vector"* %0, i32* nonnull dereferenceable(4) %3) #9
  br label %74

74:                                               ; preds = %73, %67, %54
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #9
  %75 = getelementptr inbounds %"class.blink::HTMLElementStack::ElementRecord", %"class.blink::HTMLElementStack::ElementRecord"* %38, i64 0, i32 1, i32 0, i32 0
  %76 = load %"class.blink::HTMLElementStack::ElementRecord"*, %"class.blink::HTMLElementStack::ElementRecord"** %75, align 8
  %77 = icmp eq %"class.blink::HTMLElementStack::ElementRecord"* %76, null
  br i1 %77, label %20, label %37
}

declare %"class.blink::HTMLElementStack::ElementRecord"* @_ZNK5blink16HTMLElementStack9TopRecordEv(%"class.blink::HTMLElementStack"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink24HTMLTreeBuilderSimulator8SimulateERKNS_16CompactHTMLTokenEPNS_13HTMLTokenizerE(%"class.blink::HTMLTreeBuilderSimulator"*, %"class.blink::CompactHTMLToken"* dereferenceable(40), %"class.blink::HTMLTokenizer"* nocapture) local_unnamed_addr #0 align 2 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca %"class.WTF::String", align 8
  %8 = alloca %"class.WTF::String", align 8
  %9 = alloca i32, align 4
  %10 = alloca %"class.WTF::StringView", align 8
  %11 = alloca %"class.WTF::StringView", align 8
  %12 = getelementptr inbounds %"class.blink::CompactHTMLToken", %"class.blink::CompactHTMLToken"* %1, i64 0, i32 0
  %13 = load i8, i8* %12, align 8
  %14 = and i8 %13, 15
  %15 = icmp eq i8 %14, 2
  br i1 %15, label %16, label %551

16:                                               ; preds = %3
  %17 = getelementptr inbounds %"class.blink::CompactHTMLToken", %"class.blink::CompactHTMLToken"* %1, i64 0, i32 1
  %18 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::SVGQualifiedName"** @_ZN5blink9svg_names7kSVGTagE to %"class.blink::QualifiedName"**), align 8
  %19 = tail call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %18) #9
  br i1 %19, label %20, label %37

20:                                               ; preds = %16
  %21 = getelementptr inbounds %"class.blink::HTMLTreeBuilderSimulator", %"class.blink::HTMLTreeBuilderSimulator"* %0, i64 0, i32 2
  %22 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %22) #9
  store i32 1, i32* %4, align 4
  %23 = getelementptr inbounds %"class.blink::HTMLTreeBuilderSimulator", %"class.blink::HTMLTreeBuilderSimulator"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %"class.blink::HTMLTreeBuilderSimulator", %"class.blink::HTMLTreeBuilderSimulator"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %26 = load i32, i32* %25, align 8
  %27 = icmp eq i32 %24, %26
  br i1 %27, label %35, label %28, !prof !2

28:                                               ; preds = %20
  %29 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %21, i64 0, i32 0, i32 0, i32 0
  %30 = load i32*, i32** %29, align 8
  %31 = zext i32 %24 to i64
  %32 = getelementptr inbounds i32, i32* %30, i64 %31
  store i32 1, i32* %32, align 4
  %33 = load i32, i32* %23, align 4
  %34 = add i32 %33, 1
  store i32 %34, i32* %23, align 4
  br label %36

35:                                               ; preds = %20
  call void @_ZN3WTF6VectorIN5blink24HTMLTreeBuilderSimulator9NamespaceELj1ENS_18PartitionAllocatorEE14AppendSlowCaseIS3_EEvOT_(%"class.WTF::Vector"* %21, i32* nonnull dereferenceable(4) %4) #9
  br label %36

36:                                               ; preds = %28, %35
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %22) #9
  br label %37

37:                                               ; preds = %36, %16
  %38 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::MathMLQualifiedName"** @_ZN5blink12mathml_names8kMathTagE to %"class.blink::QualifiedName"**), align 8
  %39 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %38) #9
  br i1 %39, label %40, label %57

40:                                               ; preds = %37
  %41 = getelementptr inbounds %"class.blink::HTMLTreeBuilderSimulator", %"class.blink::HTMLTreeBuilderSimulator"* %0, i64 0, i32 2
  %42 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %42) #9
  store i32 2, i32* %5, align 4
  %43 = getelementptr inbounds %"class.blink::HTMLTreeBuilderSimulator", %"class.blink::HTMLTreeBuilderSimulator"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %44 = load i32, i32* %43, align 4
  %45 = getelementptr inbounds %"class.blink::HTMLTreeBuilderSimulator", %"class.blink::HTMLTreeBuilderSimulator"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %46 = load i32, i32* %45, align 8
  %47 = icmp eq i32 %44, %46
  br i1 %47, label %55, label %48, !prof !2

48:                                               ; preds = %40
  %49 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %41, i64 0, i32 0, i32 0, i32 0
  %50 = load i32*, i32** %49, align 8
  %51 = zext i32 %44 to i64
  %52 = getelementptr inbounds i32, i32* %50, i64 %51
  store i32 2, i32* %52, align 4
  %53 = load i32, i32* %43, align 4
  %54 = add i32 %53, 1
  store i32 %54, i32* %43, align 4
  br label %56

55:                                               ; preds = %40
  call void @_ZN3WTF6VectorIN5blink24HTMLTreeBuilderSimulator9NamespaceELj1ENS_18PartitionAllocatorEE14AppendSlowCaseIS3_EEvOT_(%"class.WTF::Vector"* %41, i32* nonnull dereferenceable(4) %5) #9
  br label %56

56:                                               ; preds = %48, %55
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %42) #9
  br label %57

57:                                               ; preds = %56, %37
  %58 = getelementptr inbounds %"class.blink::HTMLTreeBuilderSimulator", %"class.blink::HTMLTreeBuilderSimulator"* %0, i64 0, i32 2
  %59 = getelementptr inbounds %"class.blink::HTMLTreeBuilderSimulator", %"class.blink::HTMLTreeBuilderSimulator"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %60 = load i32, i32* %59, align 4
  %61 = add i32 %60, -1
  %62 = call dereferenceable(4) i32* @_ZNK3WTF6VectorIN5blink24HTMLTreeBuilderSimulator9NamespaceELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %58, i32 %61) #9
  %63 = load i32, i32* %62, align 4
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %215, label %65

65:                                               ; preds = %57
  %66 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names5kBTagE to %"class.blink::QualifiedName"**), align 8
  %67 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %66) #9
  br i1 %67, label %212, label %68

68:                                               ; preds = %65
  %69 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names7kBigTagE to %"class.blink::QualifiedName"**), align 8
  %70 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %69) #9
  br i1 %70, label %212, label %71

71:                                               ; preds = %68
  %72 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names14kBlockquoteTagE to %"class.blink::QualifiedName"**), align 8
  %73 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %72) #9
  br i1 %73, label %212, label %74

74:                                               ; preds = %71
  %75 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names8kBodyTagE to %"class.blink::QualifiedName"**), align 8
  %76 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %75) #9
  br i1 %76, label %212, label %77

77:                                               ; preds = %74
  %78 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names6kBrTagE to %"class.blink::QualifiedName"**), align 8
  %79 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %78) #9
  br i1 %79, label %212, label %80

80:                                               ; preds = %77
  %81 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names10kCenterTagE to %"class.blink::QualifiedName"**), align 8
  %82 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %81) #9
  br i1 %82, label %212, label %83

83:                                               ; preds = %80
  %84 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names8kCodeTagE to %"class.blink::QualifiedName"**), align 8
  %85 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %84) #9
  br i1 %85, label %212, label %86

86:                                               ; preds = %83
  %87 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names6kDdTagE to %"class.blink::QualifiedName"**), align 8
  %88 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %87) #9
  br i1 %88, label %212, label %89

89:                                               ; preds = %86
  %90 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names7kDivTagE to %"class.blink::QualifiedName"**), align 8
  %91 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %90) #9
  br i1 %91, label %212, label %92

92:                                               ; preds = %89
  %93 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names6kDlTagE to %"class.blink::QualifiedName"**), align 8
  %94 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %93) #9
  br i1 %94, label %212, label %95

95:                                               ; preds = %92
  %96 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names6kDtTagE to %"class.blink::QualifiedName"**), align 8
  %97 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %96) #9
  br i1 %97, label %212, label %98

98:                                               ; preds = %95
  %99 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names6kEmTagE to %"class.blink::QualifiedName"**), align 8
  %100 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %99) #9
  br i1 %100, label %212, label %101

101:                                              ; preds = %98
  %102 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names9kEmbedTagE to %"class.blink::QualifiedName"**), align 8
  %103 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %102) #9
  br i1 %103, label %212, label %104

104:                                              ; preds = %101
  %105 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names6kH1TagE to %"class.blink::QualifiedName"**), align 8
  %106 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %105) #9
  br i1 %106, label %212, label %107

107:                                              ; preds = %104
  %108 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names6kH2TagE to %"class.blink::QualifiedName"**), align 8
  %109 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %108) #9
  br i1 %109, label %212, label %110

110:                                              ; preds = %107
  %111 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names6kH3TagE to %"class.blink::QualifiedName"**), align 8
  %112 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %111) #9
  br i1 %112, label %212, label %113

113:                                              ; preds = %110
  %114 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names6kH4TagE to %"class.blink::QualifiedName"**), align 8
  %115 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %114) #9
  br i1 %115, label %212, label %116

116:                                              ; preds = %113
  %117 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names6kH5TagE to %"class.blink::QualifiedName"**), align 8
  %118 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %117) #9
  br i1 %118, label %212, label %119

119:                                              ; preds = %116
  %120 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names6kH6TagE to %"class.blink::QualifiedName"**), align 8
  %121 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %120) #9
  br i1 %121, label %212, label %122

122:                                              ; preds = %119
  %123 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names8kHeadTagE to %"class.blink::QualifiedName"**), align 8
  %124 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %123) #9
  br i1 %124, label %212, label %125

125:                                              ; preds = %122
  %126 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names6kHrTagE to %"class.blink::QualifiedName"**), align 8
  %127 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %126) #9
  br i1 %127, label %212, label %128

128:                                              ; preds = %125
  %129 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names5kITagE to %"class.blink::QualifiedName"**), align 8
  %130 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %129) #9
  br i1 %130, label %212, label %131

131:                                              ; preds = %128
  %132 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names7kImgTagE to %"class.blink::QualifiedName"**), align 8
  %133 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %132) #9
  br i1 %133, label %212, label %134

134:                                              ; preds = %131
  %135 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names6kLiTagE to %"class.blink::QualifiedName"**), align 8
  %136 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %135) #9
  br i1 %136, label %212, label %137

137:                                              ; preds = %134
  %138 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names11kListingTagE to %"class.blink::QualifiedName"**), align 8
  %139 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %138) #9
  br i1 %139, label %212, label %140

140:                                              ; preds = %137
  %141 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names8kMenuTagE to %"class.blink::QualifiedName"**), align 8
  %142 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %141) #9
  br i1 %142, label %212, label %143

143:                                              ; preds = %140
  %144 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names8kMetaTagE to %"class.blink::QualifiedName"**), align 8
  %145 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %144) #9
  br i1 %145, label %212, label %146

146:                                              ; preds = %143
  %147 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names8kNobrTagE to %"class.blink::QualifiedName"**), align 8
  %148 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %147) #9
  br i1 %148, label %212, label %149

149:                                              ; preds = %146
  %150 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names6kOlTagE to %"class.blink::QualifiedName"**), align 8
  %151 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %150) #9
  br i1 %151, label %212, label %152

152:                                              ; preds = %149
  %153 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names5kPTagE to %"class.blink::QualifiedName"**), align 8
  %154 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %153) #9
  br i1 %154, label %212, label %155

155:                                              ; preds = %152
  %156 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names7kPreTagE to %"class.blink::QualifiedName"**), align 8
  %157 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %156) #9
  br i1 %157, label %212, label %158

158:                                              ; preds = %155
  %159 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names8kRubyTagE to %"class.blink::QualifiedName"**), align 8
  %160 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %159) #9
  br i1 %160, label %212, label %161

161:                                              ; preds = %158
  %162 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names5kSTagE to %"class.blink::QualifiedName"**), align 8
  %163 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %162) #9
  br i1 %163, label %212, label %164

164:                                              ; preds = %161
  %165 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names9kSmallTagE to %"class.blink::QualifiedName"**), align 8
  %166 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %165) #9
  br i1 %166, label %212, label %167

167:                                              ; preds = %164
  %168 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names8kSpanTagE to %"class.blink::QualifiedName"**), align 8
  %169 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %168) #9
  br i1 %169, label %212, label %170

170:                                              ; preds = %167
  %171 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names10kStrongTagE to %"class.blink::QualifiedName"**), align 8
  %172 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %171) #9
  br i1 %172, label %212, label %173

173:                                              ; preds = %170
  %174 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names10kStrikeTagE to %"class.blink::QualifiedName"**), align 8
  %175 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %174) #9
  br i1 %175, label %212, label %176

176:                                              ; preds = %173
  %177 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names7kSubTagE to %"class.blink::QualifiedName"**), align 8
  %178 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %177) #9
  br i1 %178, label %212, label %179

179:                                              ; preds = %176
  %180 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names7kSupTagE to %"class.blink::QualifiedName"**), align 8
  %181 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %180) #9
  br i1 %181, label %212, label %182

182:                                              ; preds = %179
  %183 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names9kTableTagE to %"class.blink::QualifiedName"**), align 8
  %184 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %183) #9
  br i1 %184, label %212, label %185

185:                                              ; preds = %182
  %186 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names6kTtTagE to %"class.blink::QualifiedName"**), align 8
  %187 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %186) #9
  br i1 %187, label %212, label %188

188:                                              ; preds = %185
  %189 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names5kUTagE to %"class.blink::QualifiedName"**), align 8
  %190 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %189) #9
  br i1 %190, label %212, label %191

191:                                              ; preds = %188
  %192 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names6kUlTagE to %"class.blink::QualifiedName"**), align 8
  %193 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %192) #9
  br i1 %193, label %212, label %194

194:                                              ; preds = %191
  %195 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names7kVarTagE to %"class.blink::QualifiedName"**), align 8
  %196 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %195) #9
  br i1 %196, label %212, label %197

197:                                              ; preds = %194
  %198 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names8kFontTagE to %"class.blink::QualifiedName"**), align 8
  %199 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %198) #9
  br i1 %199, label %200, label %215

200:                                              ; preds = %197
  %201 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names10kColorAttrE, align 8
  %202 = call %"struct.blink::CompactHTMLToken::Attribute"* @_ZNK5blink16CompactHTMLToken16GetAttributeItemERKNS_13QualifiedNameE(%"class.blink::CompactHTMLToken"* %1, %"class.blink::QualifiedName"* dereferenceable(8) %201) #9
  %203 = icmp eq %"struct.blink::CompactHTMLToken::Attribute"* %202, null
  br i1 %203, label %204, label %212

204:                                              ; preds = %200
  %205 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names9kFaceAttrE, align 8
  %206 = call %"struct.blink::CompactHTMLToken::Attribute"* @_ZNK5blink16CompactHTMLToken16GetAttributeItemERKNS_13QualifiedNameE(%"class.blink::CompactHTMLToken"* %1, %"class.blink::QualifiedName"* dereferenceable(8) %205) #9
  %207 = icmp eq %"struct.blink::CompactHTMLToken::Attribute"* %206, null
  br i1 %207, label %208, label %212

208:                                              ; preds = %204
  %209 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names9kSizeAttrE, align 8
  %210 = call %"struct.blink::CompactHTMLToken::Attribute"* @_ZNK5blink16CompactHTMLToken16GetAttributeItemERKNS_13QualifiedNameE(%"class.blink::CompactHTMLToken"* %1, %"class.blink::QualifiedName"* dereferenceable(8) %209) #9
  %211 = icmp eq %"struct.blink::CompactHTMLToken::Attribute"* %210, null
  br i1 %211, label %215, label %212

212:                                              ; preds = %208, %200, %204, %65, %68, %71, %74, %77, %80, %83, %86, %89, %92, %95, %98, %101, %104, %107, %110, %113, %116, %119, %122, %125, %128, %131, %134, %137, %140, %143, %146, %149, %152, %155, %158, %161, %164, %167, %170, %173, %176, %179, %182, %185, %188, %191, %194
  %213 = load i32, i32* %59, align 4
  %214 = add i32 %213, -1
  store i32 %214, i32* %59, align 4
  br label %215

215:                                              ; preds = %208, %57, %197, %212
  %216 = call zeroext i1 @_ZNK5blink24HTMLTreeBuilderSimulator33IsHTMLIntegrationPointForStartTagERKNS_16CompactHTMLTokenE(%"class.blink::HTMLTreeBuilderSimulator"* %0, %"class.blink::CompactHTMLToken"* dereferenceable(40) %1)
  br i1 %216, label %238, label %217

217:                                              ; preds = %215
  %218 = load i32, i32* %59, align 4
  %219 = add i32 %218, -1
  %220 = call dereferenceable(4) i32* @_ZN3WTF6VectorIN5blink24HTMLTreeBuilderSimulator9NamespaceELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %58, i32 %219) #9
  %221 = load i32, i32* %220, align 4
  %222 = icmp eq i32 %221, 2
  br i1 %222, label %223, label %253

223:                                              ; preds = %217
  %224 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::MathMLQualifiedName"** @_ZN5blink12mathml_names6kMiTagE to %"class.blink::QualifiedName"**), align 8
  %225 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %224) #9
  br i1 %225, label %238, label %226

226:                                              ; preds = %223
  %227 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::MathMLQualifiedName"** @_ZN5blink12mathml_names6kMoTagE to %"class.blink::QualifiedName"**), align 8
  %228 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %227) #9
  br i1 %228, label %238, label %229

229:                                              ; preds = %226
  %230 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::MathMLQualifiedName"** @_ZN5blink12mathml_names6kMnTagE to %"class.blink::QualifiedName"**), align 8
  %231 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %230) #9
  br i1 %231, label %238, label %232

232:                                              ; preds = %229
  %233 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::MathMLQualifiedName"** @_ZN5blink12mathml_names6kMsTagE to %"class.blink::QualifiedName"**), align 8
  %234 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %233) #9
  br i1 %234, label %238, label %235

235:                                              ; preds = %232
  %236 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::MathMLQualifiedName"** @_ZN5blink12mathml_names9kMtextTagE to %"class.blink::QualifiedName"**), align 8
  %237 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %236) #9
  br i1 %237, label %238, label %253

238:                                              ; preds = %223, %226, %229, %232, %235, %215
  %239 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %239) #9
  store i32 0, i32* %6, align 4
  %240 = load i32, i32* %59, align 4
  %241 = getelementptr inbounds %"class.blink::HTMLTreeBuilderSimulator", %"class.blink::HTMLTreeBuilderSimulator"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %242 = load i32, i32* %241, align 8
  %243 = icmp eq i32 %240, %242
  br i1 %243, label %251, label %244, !prof !2

244:                                              ; preds = %238
  %245 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %58, i64 0, i32 0, i32 0, i32 0
  %246 = load i32*, i32** %245, align 8
  %247 = zext i32 %240 to i64
  %248 = getelementptr inbounds i32, i32* %246, i64 %247
  store i32 0, i32* %248, align 4
  %249 = load i32, i32* %59, align 4
  %250 = add i32 %249, 1
  store i32 %250, i32* %59, align 4
  br label %252

251:                                              ; preds = %238
  call void @_ZN3WTF6VectorIN5blink24HTMLTreeBuilderSimulator9NamespaceELj1ENS_18PartitionAllocatorEE14AppendSlowCaseIS3_EEvOT_(%"class.WTF::Vector"* %58, i32* nonnull dereferenceable(4) %6) #9
  br label %252

252:                                              ; preds = %244, %251
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %239) #9
  br label %551

253:                                              ; preds = %235, %217
  %254 = load i32, i32* %59, align 4
  %255 = add i32 %254, -1
  %256 = call dereferenceable(4) i32* @_ZNK3WTF6VectorIN5blink24HTMLTreeBuilderSimulator9NamespaceELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %58, i32 %255) #9
  %257 = load i32, i32* %256, align 4
  %258 = icmp eq i32 %257, 0
  br i1 %258, label %259, label %551

259:                                              ; preds = %253
  %260 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names12kTextareaTagE to %"class.blink::QualifiedName"**), align 8
  %261 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %260) #9
  br i1 %261, label %265, label %262

262:                                              ; preds = %259
  %263 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names9kTitleTagE to %"class.blink::QualifiedName"**), align 8
  %264 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %263) #9
  br i1 %264, label %265, label %267

265:                                              ; preds = %262, %259
  %266 = getelementptr inbounds %"class.blink::HTMLTokenizer", %"class.blink::HTMLTokenizer"* %2, i64 0, i32 0
  store i32 2, i32* %266, align 8
  br label %533

267:                                              ; preds = %262
  %268 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names10kScriptTagE to %"class.blink::QualifiedName"**), align 8
  %269 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %268) #9
  br i1 %269, label %270, label %397

270:                                              ; preds = %267
  %271 = getelementptr inbounds %"class.blink::HTMLTokenizer", %"class.blink::HTMLTokenizer"* %2, i64 0, i32 0
  store i32 5, i32* %271, align 8
  %272 = bitcast %"class.WTF::String"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %272) #9
  %273 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %7, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %273, align 8
  %274 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names9kTypeAttrE, align 8
  %275 = call %"struct.blink::CompactHTMLToken::Attribute"* @_ZNK5blink16CompactHTMLToken16GetAttributeItemERKNS_13QualifiedNameE(%"class.blink::CompactHTMLToken"* %1, %"class.blink::QualifiedName"* dereferenceable(8) %274) #9
  %276 = icmp eq %"struct.blink::CompactHTMLToken::Attribute"* %275, null
  br i1 %276, label %316, label %277

277:                                              ; preds = %270
  %278 = getelementptr inbounds %"struct.blink::CompactHTMLToken::Attribute", %"struct.blink::CompactHTMLToken::Attribute"* %275, i64 0, i32 1, i32 0, i32 0
  %279 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %278, align 8
  %280 = icmp eq %"class.WTF::StringImpl"* %279, null
  br i1 %280, label %298, label %281

281:                                              ; preds = %277
  %282 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %279, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %283 = load atomic i32, i32* %282 monotonic, align 4
  %284 = and i32 %283, 2
  %285 = icmp eq i32 %284, 0
  br i1 %285, label %286, label %298

286:                                              ; preds = %281
  %287 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %279, i64 0, i32 0
  %288 = load i32, i32* %287, align 4
  %289 = zext i32 %288 to i33
  %290 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %289, i33 1) #9
  %291 = extractvalue { i33, i1 } %290, 1
  %292 = extractvalue { i33, i1 } %290, 0
  %293 = icmp slt i33 %292, 0
  %294 = or i1 %291, %293
  br i1 %294, label %295, label %296, !prof !2

295:                                              ; preds = %286
  call void @llvm.trap() #9
  unreachable

296:                                              ; preds = %286
  %297 = trunc i33 %292 to i32
  store i32 %297, i32* %287, align 4
  br label %298

298:                                              ; preds = %296, %281, %277
  %299 = ptrtoint %"class.WTF::StringImpl"* %279 to i64
  %300 = bitcast %"class.WTF::String"* %7 to i64*
  %301 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %273, align 8
  store i64 %299, i64* %300, align 8
  %302 = icmp eq %"class.WTF::StringImpl"* %301, null
  br i1 %302, label %316, label %303

303:                                              ; preds = %298
  %304 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %301, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %305 = load atomic i32, i32* %304 monotonic, align 4
  %306 = and i32 %305, 2
  %307 = icmp eq i32 %306, 0
  %308 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %301, i64 0, i32 0
  %309 = load i32, i32* %308, align 4
  br i1 %307, label %310, label %312

310:                                              ; preds = %303
  %311 = add i32 %309, -1
  store i32 %311, i32* %308, align 4
  br label %312

312:                                              ; preds = %310, %303
  %313 = phi i32 [ %311, %310 ], [ %309, %303 ]
  %314 = icmp eq i32 %313, 0
  br i1 %314, label %315, label %316

315:                                              ; preds = %312
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %301) #9
  br label %316

316:                                              ; preds = %315, %312, %298, %270
  %317 = bitcast %"class.WTF::String"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %317) #9
  %318 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %8, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %318, align 8
  %319 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names13kLanguageAttrE, align 8
  %320 = call %"struct.blink::CompactHTMLToken::Attribute"* @_ZNK5blink16CompactHTMLToken16GetAttributeItemERKNS_13QualifiedNameE(%"class.blink::CompactHTMLToken"* %1, %"class.blink::QualifiedName"* dereferenceable(8) %319) #9
  %321 = icmp eq %"struct.blink::CompactHTMLToken::Attribute"* %320, null
  br i1 %321, label %361, label %322

322:                                              ; preds = %316
  %323 = getelementptr inbounds %"struct.blink::CompactHTMLToken::Attribute", %"struct.blink::CompactHTMLToken::Attribute"* %320, i64 0, i32 1, i32 0, i32 0
  %324 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %323, align 8
  %325 = icmp eq %"class.WTF::StringImpl"* %324, null
  br i1 %325, label %343, label %326

326:                                              ; preds = %322
  %327 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %324, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %328 = load atomic i32, i32* %327 monotonic, align 4
  %329 = and i32 %328, 2
  %330 = icmp eq i32 %329, 0
  br i1 %330, label %331, label %343

331:                                              ; preds = %326
  %332 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %324, i64 0, i32 0
  %333 = load i32, i32* %332, align 4
  %334 = zext i32 %333 to i33
  %335 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %334, i33 1) #9
  %336 = extractvalue { i33, i1 } %335, 1
  %337 = extractvalue { i33, i1 } %335, 0
  %338 = icmp slt i33 %337, 0
  %339 = or i1 %336, %338
  br i1 %339, label %340, label %341, !prof !2

340:                                              ; preds = %331
  call void @llvm.trap() #9
  unreachable

341:                                              ; preds = %331
  %342 = trunc i33 %337 to i32
  store i32 %342, i32* %332, align 4
  br label %343

343:                                              ; preds = %341, %326, %322
  %344 = ptrtoint %"class.WTF::StringImpl"* %324 to i64
  %345 = bitcast %"class.WTF::String"* %8 to i64*
  %346 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %318, align 8
  store i64 %344, i64* %345, align 8
  %347 = icmp eq %"class.WTF::StringImpl"* %346, null
  br i1 %347, label %361, label %348

348:                                              ; preds = %343
  %349 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %346, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %350 = load atomic i32, i32* %349 monotonic, align 4
  %351 = and i32 %350, 2
  %352 = icmp eq i32 %351, 0
  %353 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %346, i64 0, i32 0
  %354 = load i32, i32* %353, align 4
  br i1 %352, label %355, label %357

355:                                              ; preds = %348
  %356 = add i32 %354, -1
  store i32 %356, i32* %353, align 4
  br label %357

357:                                              ; preds = %355, %348
  %358 = phi i32 [ %356, %355 ], [ %354, %348 ]
  %359 = icmp eq i32 %358, 0
  br i1 %359, label %360, label %361

360:                                              ; preds = %357
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %346) #9
  br label %361

361:                                              ; preds = %360, %357, %343, %316
  %362 = call i32 @_ZN5blink12ScriptLoader22GetScriptTypeAtPrepareERKN3WTF6StringES4_NS0_17LegacyTypeSupportE(%"class.WTF::String"* nonnull dereferenceable(8) %7, %"class.WTF::String"* nonnull dereferenceable(8) %8, i32 1) #9
  %363 = icmp eq i32 %362, 4
  %364 = select i1 %363, i32 6, i32 0
  %365 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %318, align 8
  %366 = icmp eq %"class.WTF::StringImpl"* %365, null
  br i1 %366, label %380, label %367

367:                                              ; preds = %361
  %368 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %365, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %369 = load atomic i32, i32* %368 monotonic, align 4
  %370 = and i32 %369, 2
  %371 = icmp eq i32 %370, 0
  %372 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %365, i64 0, i32 0
  %373 = load i32, i32* %372, align 4
  br i1 %371, label %374, label %376

374:                                              ; preds = %367
  %375 = add i32 %373, -1
  store i32 %375, i32* %372, align 4
  br label %376

376:                                              ; preds = %374, %367
  %377 = phi i32 [ %375, %374 ], [ %373, %367 ]
  %378 = icmp eq i32 %377, 0
  br i1 %378, label %379, label %380

379:                                              ; preds = %376
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %365) #9
  br label %380

380:                                              ; preds = %361, %376, %379
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %317) #9
  %381 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %273, align 8
  %382 = icmp eq %"class.WTF::StringImpl"* %381, null
  br i1 %382, label %396, label %383

383:                                              ; preds = %380
  %384 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %381, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %385 = load atomic i32, i32* %384 monotonic, align 4
  %386 = and i32 %385, 2
  %387 = icmp eq i32 %386, 0
  %388 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %381, i64 0, i32 0
  %389 = load i32, i32* %388, align 4
  br i1 %387, label %390, label %392

390:                                              ; preds = %383
  %391 = add i32 %389, -1
  store i32 %391, i32* %388, align 4
  br label %392

392:                                              ; preds = %390, %383
  %393 = phi i32 [ %391, %390 ], [ %389, %383 ]
  %394 = icmp eq i32 %393, 0
  br i1 %394, label %395, label %396

395:                                              ; preds = %392
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %381) #9
  br label %396

396:                                              ; preds = %380, %392, %395
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %272) #9
  br label %533

397:                                              ; preds = %267
  %398 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names8kLinkTagE to %"class.blink::QualifiedName"**), align 8
  %399 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %398) #9
  br i1 %399, label %533, label %400

400:                                              ; preds = %397
  %401 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names12kTemplateTagE to %"class.blink::QualifiedName"**), align 8
  %402 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %401) #9
  br i1 %402, label %403, label %497

403:                                              ; preds = %400
  %404 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %404) #9
  store i32 0, i32* %9, align 4
  %405 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names15kShadowrootAttrE, align 8
  %406 = call %"struct.blink::CompactHTMLToken::Attribute"* @_ZNK5blink16CompactHTMLToken16GetAttributeItemERKNS_13QualifiedNameE(%"class.blink::CompactHTMLToken"* %1, %"class.blink::QualifiedName"* dereferenceable(8) %405) #9
  %407 = icmp eq %"struct.blink::CompactHTMLToken::Attribute"* %406, null
  br i1 %407, label %480, label %408

408:                                              ; preds = %403
  %409 = getelementptr inbounds %"struct.blink::CompactHTMLToken::Attribute", %"struct.blink::CompactHTMLToken::Attribute"* %406, i64 0, i32 1, i32 0, i32 0
  %410 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %409, align 8
  %411 = icmp eq %"class.WTF::StringImpl"* %410, null
  br i1 %411, label %429, label %412

412:                                              ; preds = %408
  %413 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %410, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %414 = load atomic i32, i32* %413 monotonic, align 4
  %415 = and i32 %414, 2
  %416 = icmp eq i32 %415, 0
  br i1 %416, label %417, label %434

417:                                              ; preds = %412
  %418 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %410, i64 0, i32 0
  %419 = load i32, i32* %418, align 4
  %420 = zext i32 %419 to i33
  %421 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %420, i33 1) #9
  %422 = extractvalue { i33, i1 } %421, 1
  %423 = extractvalue { i33, i1 } %421, 0
  %424 = icmp slt i33 %423, 0
  %425 = or i1 %422, %424
  br i1 %425, label %426, label %427, !prof !2

426:                                              ; preds = %417
  call void @llvm.trap() #9
  unreachable

427:                                              ; preds = %417
  %428 = trunc i33 %423 to i32
  store i32 %428, i32* %418, align 4
  br label %434

429:                                              ; preds = %408
  %430 = bitcast %"class.WTF::StringView"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %430) #9
  %431 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 1
  store i8* null, i8** %431, align 8
  %432 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %433 = bitcast %"class.WTF::StringView"* %10 to i64*
  store i64 %432, i64* %433, align 8
  br label %442

434:                                              ; preds = %412, %427
  %435 = bitcast %"class.WTF::StringView"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %435) #9
  %436 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 0
  store %"class.WTF::StringImpl"* %410, %"class.WTF::StringImpl"** %436, align 8
  %437 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %410, i64 0, i32 1
  %438 = load i32, i32* %437, align 4
  %439 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %410, i64 1
  %440 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 1
  %441 = bitcast i8** %440 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %439, %"class.WTF::StringImpl"** %441, align 8
  br label %442

442:                                              ; preds = %429, %434
  %443 = phi i8* [ %435, %434 ], [ %430, %429 ]
  %444 = phi i32 [ %438, %434 ], [ 0, %429 ]
  %445 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 2
  store i32 %444, i32* %445, align 8
  %446 = call zeroext i1 @_ZN3WTF22EqualIgnoringASCIICaseILm5EEEbRKNS_10StringViewERAT__Kc(%"class.WTF::StringView"* nonnull dereferenceable(24) %10, [5 x i8]* nonnull dereferenceable(5) @.str)
  %447 = bitcast %"class.WTF::StringView"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %447) #9
  br i1 %446, label %464, label %448

448:                                              ; preds = %442
  br i1 %411, label %449, label %453

449:                                              ; preds = %448
  %450 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 1
  store i8* null, i8** %450, align 8
  %451 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %452 = bitcast %"class.WTF::StringView"* %11 to i64*
  store i64 %451, i64* %452, align 8
  br label %460

453:                                              ; preds = %448
  %454 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 0
  store %"class.WTF::StringImpl"* %410, %"class.WTF::StringImpl"** %454, align 8
  %455 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %410, i64 0, i32 1
  %456 = load i32, i32* %455, align 4
  %457 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %410, i64 1
  %458 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 1
  %459 = bitcast i8** %458 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %457, %"class.WTF::StringImpl"** %459, align 8
  br label %460

460:                                              ; preds = %449, %453
  %461 = phi i32 [ %456, %453 ], [ 0, %449 ]
  %462 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 2
  store i32 %461, i32* %462, align 8
  %463 = call zeroext i1 @_ZN3WTF22EqualIgnoringASCIICaseILm7EEEbRKNS_10StringViewERAT__Kc(%"class.WTF::StringView"* nonnull dereferenceable(24) %11, [7 x i8]* nonnull dereferenceable(7) @.str.1)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %447) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %443) #9
  br i1 %463, label %465, label %466

464:                                              ; preds = %442
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %447) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %443) #9
  br label %465

465:                                              ; preds = %464, %460
  store i32 1, i32* %9, align 4
  br label %466

466:                                              ; preds = %465, %460
  br i1 %411, label %480, label %467

467:                                              ; preds = %466
  %468 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %410, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %469 = load atomic i32, i32* %468 monotonic, align 4
  %470 = and i32 %469, 2
  %471 = icmp eq i32 %470, 0
  %472 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %410, i64 0, i32 0
  %473 = load i32, i32* %472, align 4
  br i1 %471, label %474, label %476

474:                                              ; preds = %467
  %475 = add i32 %473, -1
  store i32 %475, i32* %472, align 4
  br label %476

476:                                              ; preds = %474, %467
  %477 = phi i32 [ %475, %474 ], [ %473, %467 ]
  %478 = icmp eq i32 %477, 0
  br i1 %478, label %479, label %480

479:                                              ; preds = %476
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %410) #9
  br label %480

480:                                              ; preds = %479, %476, %466, %403
  %481 = getelementptr inbounds %"class.blink::HTMLTreeBuilderSimulator", %"class.blink::HTMLTreeBuilderSimulator"* %0, i64 0, i32 5
  %482 = getelementptr inbounds %"class.blink::HTMLTreeBuilderSimulator", %"class.blink::HTMLTreeBuilderSimulator"* %0, i64 0, i32 5, i32 0, i32 0, i32 2
  %483 = load i32, i32* %482, align 4
  %484 = getelementptr inbounds %"class.blink::HTMLTreeBuilderSimulator", %"class.blink::HTMLTreeBuilderSimulator"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  %485 = load i32, i32* %484, align 8
  %486 = icmp eq i32 %483, %485
  br i1 %486, label %495, label %487, !prof !2

487:                                              ; preds = %480
  %488 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %481, i64 0, i32 0, i32 0, i32 0
  %489 = load i32*, i32** %488, align 8
  %490 = zext i32 %483 to i64
  %491 = getelementptr inbounds i32, i32* %489, i64 %490
  %492 = load i32, i32* %9, align 4
  store i32 %492, i32* %491, align 4
  %493 = load i32, i32* %482, align 4
  %494 = add i32 %493, 1
  store i32 %494, i32* %482, align 4
  br label %496

495:                                              ; preds = %480
  call void @_ZN3WTF6VectorIN5blink24HTMLTreeBuilderSimulator12TemplateTypeELj1ENS_18PartitionAllocatorEE14AppendSlowCaseIRS3_EEvOT_(%"class.WTF::Vector.0"* %481, i32* nonnull dereferenceable(4) %9) #9
  br label %496

496:                                              ; preds = %487, %495
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %404) #9
  br label %533

497:                                              ; preds = %400
  %498 = getelementptr inbounds %"class.blink::HTMLTreeBuilderSimulator", %"class.blink::HTMLTreeBuilderSimulator"* %0, i64 0, i32 3
  %499 = load i8, i8* %498, align 8, !range !3
  %500 = icmp eq i8 %499, 0
  br i1 %500, label %501, label %533

501:                                              ; preds = %497
  %502 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names13kPlaintextTagE to %"class.blink::QualifiedName"**), align 8
  %503 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %502) #9
  br i1 %503, label %504, label %509

504:                                              ; preds = %501
  %505 = load i8, i8* %498, align 8, !range !3
  %506 = icmp eq i8 %505, 0
  br i1 %506, label %507, label %509

507:                                              ; preds = %504
  %508 = getelementptr inbounds %"class.blink::HTMLTokenizer", %"class.blink::HTMLTokenizer"* %2, i64 0, i32 0
  store i32 6, i32* %508, align 8
  br label %533

509:                                              ; preds = %504, %501
  %510 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names9kStyleTagE to %"class.blink::QualifiedName"**), align 8
  %511 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %510) #9
  br i1 %511, label %531, label %512

512:                                              ; preds = %509
  %513 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names10kIFrameTagE to %"class.blink::QualifiedName"**), align 8
  %514 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %513) #9
  br i1 %514, label %531, label %515

515:                                              ; preds = %512
  %516 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names7kXmpTagE to %"class.blink::QualifiedName"**), align 8
  %517 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %516) #9
  br i1 %517, label %531, label %518

518:                                              ; preds = %515
  %519 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names11kNoembedTagE to %"class.blink::QualifiedName"**), align 8
  %520 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %519) #9
  br i1 %520, label %531, label %521

521:                                              ; preds = %518
  %522 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names12kNoframesTagE to %"class.blink::QualifiedName"**), align 8
  %523 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %522) #9
  br i1 %523, label %531, label %524

524:                                              ; preds = %521
  %525 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names12kNoscriptTagE to %"class.blink::QualifiedName"**), align 8
  %526 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %525) #9
  br i1 %526, label %527, label %533

527:                                              ; preds = %524
  %528 = getelementptr inbounds %"class.blink::HTMLTreeBuilderSimulator", %"class.blink::HTMLTreeBuilderSimulator"* %0, i64 0, i32 0, i32 0
  %529 = load i8, i8* %528, align 8, !range !3
  %530 = icmp eq i8 %529, 0
  br i1 %530, label %533, label %531

531:                                              ; preds = %527, %521, %518, %515, %512, %509
  %532 = getelementptr inbounds %"class.blink::HTMLTokenizer", %"class.blink::HTMLTokenizer"* %2, i64 0, i32 0
  store i32 4, i32* %532, align 8
  br label %533

533:                                              ; preds = %397, %527, %497, %396, %496, %507, %531, %524, %265
  %534 = phi i32 [ 6, %265 ], [ %364, %396 ], [ 6, %496 ], [ 6, %497 ], [ 6, %531 ], [ 6, %527 ], [ 6, %524 ], [ 6, %507 ], [ 2, %397 ]
  %535 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names10kSelectTagE to %"class.blink::QualifiedName"**), align 8
  %536 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %535) #9
  %537 = getelementptr inbounds %"class.blink::HTMLTreeBuilderSimulator", %"class.blink::HTMLTreeBuilderSimulator"* %0, i64 0, i32 3
  br i1 %536, label %538, label %539

538:                                              ; preds = %533
  store i8 1, i8* %537, align 8
  br label %551

539:                                              ; preds = %533
  %540 = load i8, i8* %537, align 8, !range !3
  %541 = icmp eq i8 %540, 0
  br i1 %541, label %551, label %542

542:                                              ; preds = %539
  %543 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names9kInputTagE to %"class.blink::QualifiedName"**), align 8
  %544 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %543) #9
  br i1 %544, label %550, label %545

545:                                              ; preds = %542
  %546 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names10kKeygenTagE to %"class.blink::QualifiedName"**), align 8
  %547 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %546) #9
  br i1 %547, label %550, label %548

548:                                              ; preds = %545
  %549 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %17, %"class.blink::QualifiedName"* dereferenceable(8) %260) #9
  br i1 %549, label %550, label %551

550:                                              ; preds = %542, %545, %548
  store i8 0, i8* %537, align 8
  br label %551

551:                                              ; preds = %253, %252, %538, %550, %548, %539, %3
  %552 = phi i32 [ 6, %3 ], [ 6, %252 ], [ 6, %253 ], [ %534, %538 ], [ %534, %550 ], [ %534, %548 ], [ %534, %539 ]
  %553 = load i8, i8* %12, align 8
  %554 = and i8 %553, 15
  %555 = icmp eq i8 %554, 3
  br i1 %555, label %556, label %574

556:                                              ; preds = %551
  %557 = getelementptr inbounds %"class.blink::HTMLTreeBuilderSimulator", %"class.blink::HTMLTreeBuilderSimulator"* %0, i64 0, i32 2
  %558 = getelementptr inbounds %"class.blink::HTMLTreeBuilderSimulator", %"class.blink::HTMLTreeBuilderSimulator"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %559 = load i32, i32* %558, align 4
  %560 = add i32 %559, -1
  %561 = call dereferenceable(4) i32* @_ZNK3WTF6VectorIN5blink24HTMLTreeBuilderSimulator9NamespaceELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %557, i32 %560) #9
  %562 = load i32, i32* %561, align 4
  %563 = icmp eq i32 %562, 0
  br i1 %563, label %574, label %564

564:                                              ; preds = %556
  %565 = getelementptr inbounds %"class.blink::CompactHTMLToken", %"class.blink::CompactHTMLToken"* %1, i64 0, i32 1
  %566 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names5kPTagE to %"class.blink::QualifiedName"**), align 8
  %567 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %565, %"class.blink::QualifiedName"* dereferenceable(8) %566) #9
  br i1 %567, label %571, label %568

568:                                              ; preds = %564
  %569 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names6kBrTagE to %"class.blink::QualifiedName"**), align 8
  %570 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %565, %"class.blink::QualifiedName"* dereferenceable(8) %569) #9
  br i1 %570, label %571, label %574

571:                                              ; preds = %568, %564
  %572 = load i32, i32* %558, align 4
  %573 = add i32 %572, -1
  store i32 %573, i32* %558, align 4
  br label %574

574:                                              ; preds = %556, %568, %571, %551
  %575 = load i8, i8* %12, align 8
  %576 = and i8 %575, 15
  %577 = zext i8 %576 to i32
  switch i32 %577, label %691 [
    i32 3, label %589
    i32 2, label %578
  ]

578:                                              ; preds = %574
  %579 = and i8 %575, 16
  %580 = icmp eq i8 %579, 0
  br i1 %580, label %691, label %581

581:                                              ; preds = %578
  %582 = getelementptr inbounds %"class.blink::HTMLTreeBuilderSimulator", %"class.blink::HTMLTreeBuilderSimulator"* %0, i64 0, i32 2
  %583 = getelementptr inbounds %"class.blink::HTMLTreeBuilderSimulator", %"class.blink::HTMLTreeBuilderSimulator"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %584 = load i32, i32* %583, align 4
  %585 = add i32 %584, -1
  %586 = call dereferenceable(4) i32* @_ZNK3WTF6VectorIN5blink24HTMLTreeBuilderSimulator9NamespaceELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %582, i32 %585) #9
  %587 = load i32, i32* %586, align 4
  %588 = icmp eq i32 %587, 0
  br i1 %588, label %691, label %589

589:                                              ; preds = %581, %574
  %590 = getelementptr inbounds %"class.blink::CompactHTMLToken", %"class.blink::CompactHTMLToken"* %1, i64 0, i32 1
  %591 = getelementptr inbounds %"class.blink::HTMLTreeBuilderSimulator", %"class.blink::HTMLTreeBuilderSimulator"* %0, i64 0, i32 2
  %592 = getelementptr inbounds %"class.blink::HTMLTreeBuilderSimulator", %"class.blink::HTMLTreeBuilderSimulator"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %593 = load i32, i32* %592, align 4
  %594 = add i32 %593, -1
  %595 = call dereferenceable(4) i32* @_ZN3WTF6VectorIN5blink24HTMLTreeBuilderSimulator9NamespaceELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %591, i32 %594) #9
  %596 = load i32, i32* %595, align 4
  %597 = icmp eq i32 %596, 1
  br i1 %597, label %598, label %601

598:                                              ; preds = %589
  %599 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::SVGQualifiedName"** @_ZN5blink9svg_names7kSVGTagE to %"class.blink::QualifiedName"**), align 8
  %600 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %590, %"class.blink::QualifiedName"* dereferenceable(8) %599) #9
  br i1 %600, label %653, label %601

601:                                              ; preds = %598, %589
  %602 = load i32, i32* %592, align 4
  %603 = add i32 %602, -1
  %604 = call dereferenceable(4) i32* @_ZN3WTF6VectorIN5blink24HTMLTreeBuilderSimulator9NamespaceELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %591, i32 %603) #9
  %605 = load i32, i32* %604, align 4
  %606 = icmp eq i32 %605, 2
  br i1 %606, label %607, label %610

607:                                              ; preds = %601
  %608 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::MathMLQualifiedName"** @_ZN5blink12mathml_names8kMathTagE to %"class.blink::QualifiedName"**), align 8
  %609 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %590, %"class.blink::QualifiedName"* dereferenceable(8) %608) #9
  br i1 %609, label %653, label %610

610:                                              ; preds = %607, %601
  %611 = call zeroext i1 @_ZNK5blink24HTMLTreeBuilderSimulator31IsHTMLIntegrationPointForEndTagERKNS_16CompactHTMLTokenE(%"class.blink::HTMLTreeBuilderSimulator"* %0, %"class.blink::CompactHTMLToken"* dereferenceable(40) %1)
  br i1 %611, label %653, label %612

612:                                              ; preds = %610
  %613 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %591, i64 0, i32 0, i32 0, i32 0
  %614 = load i32*, i32** %613, align 8
  %615 = load i32, i32* %592, align 4
  %616 = zext i32 %615 to i64
  %617 = getelementptr inbounds i32, i32* %614, i64 %616
  %618 = icmp eq i32 %615, 0
  br i1 %618, label %656, label %619

619:                                              ; preds = %612, %623
  %620 = phi i32* [ %624, %623 ], [ %614, %612 ]
  %621 = load i32, i32* %620, align 4
  %622 = icmp eq i32 %621, 2
  br i1 %622, label %626, label %623

623:                                              ; preds = %619
  %624 = getelementptr inbounds i32, i32* %620, i64 1
  %625 = icmp ult i32* %624, %617
  br i1 %625, label %619, label %656

626:                                              ; preds = %619
  %627 = ptrtoint i32* %620 to i64
  %628 = ptrtoint i32* %614 to i64
  %629 = sub i64 %627, %628
  %630 = lshr exact i64 %629, 2
  %631 = trunc i64 %630 to i32
  %632 = icmp eq i32 %631, -1
  br i1 %632, label %656, label %633

633:                                              ; preds = %626
  %634 = add i32 %615, -1
  %635 = call dereferenceable(4) i32* @_ZN3WTF6VectorIN5blink24HTMLTreeBuilderSimulator9NamespaceELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %591, i32 %634) #9
  %636 = load i32, i32* %635, align 4
  %637 = icmp eq i32 %636, 0
  br i1 %637, label %638, label %656

638:                                              ; preds = %633
  %639 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::MathMLQualifiedName"** @_ZN5blink12mathml_names6kMiTagE to %"class.blink::QualifiedName"**), align 8
  %640 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %590, %"class.blink::QualifiedName"* dereferenceable(8) %639) #9
  br i1 %640, label %653, label %641

641:                                              ; preds = %638
  %642 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::MathMLQualifiedName"** @_ZN5blink12mathml_names6kMoTagE to %"class.blink::QualifiedName"**), align 8
  %643 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %590, %"class.blink::QualifiedName"* dereferenceable(8) %642) #9
  br i1 %643, label %653, label %644

644:                                              ; preds = %641
  %645 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::MathMLQualifiedName"** @_ZN5blink12mathml_names6kMnTagE to %"class.blink::QualifiedName"**), align 8
  %646 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %590, %"class.blink::QualifiedName"* dereferenceable(8) %645) #9
  br i1 %646, label %653, label %647

647:                                              ; preds = %644
  %648 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::MathMLQualifiedName"** @_ZN5blink12mathml_names6kMsTagE to %"class.blink::QualifiedName"**), align 8
  %649 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %590, %"class.blink::QualifiedName"* dereferenceable(8) %648) #9
  br i1 %649, label %653, label %650

650:                                              ; preds = %647
  %651 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::MathMLQualifiedName"** @_ZN5blink12mathml_names9kMtextTagE to %"class.blink::QualifiedName"**), align 8
  %652 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %590, %"class.blink::QualifiedName"* dereferenceable(8) %651) #9
  br i1 %652, label %653, label %656

653:                                              ; preds = %638, %641, %644, %647, %598, %607, %610, %650
  %654 = load i32, i32* %592, align 4
  %655 = add i32 %654, -1
  store i32 %655, i32* %592, align 4
  br label %656

656:                                              ; preds = %623, %626, %612, %633, %653, %650
  %657 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names10kScriptTagE to %"class.blink::QualifiedName"**), align 8
  %658 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %590, %"class.blink::QualifiedName"* dereferenceable(8) %657) #9
  br i1 %658, label %659, label %667

659:                                              ; preds = %656
  %660 = load i32, i32* %592, align 4
  %661 = add i32 %660, -1
  %662 = call dereferenceable(4) i32* @_ZNK3WTF6VectorIN5blink24HTMLTreeBuilderSimulator9NamespaceELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %591, i32 %661) #9
  %663 = load i32, i32* %662, align 4
  %664 = icmp eq i32 %663, 0
  br i1 %664, label %665, label %758

665:                                              ; preds = %659
  %666 = getelementptr inbounds %"class.blink::HTMLTokenizer", %"class.blink::HTMLTokenizer"* %2, i64 0, i32 0
  store i32 0, i32* %666, align 8
  br label %758

667:                                              ; preds = %656
  %668 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names10kSelectTagE to %"class.blink::QualifiedName"**), align 8
  %669 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %590, %"class.blink::QualifiedName"* dereferenceable(8) %668) #9
  br i1 %669, label %670, label %672

670:                                              ; preds = %667
  %671 = getelementptr inbounds %"class.blink::HTMLTreeBuilderSimulator", %"class.blink::HTMLTreeBuilderSimulator"* %0, i64 0, i32 3
  store i8 0, i8* %671, align 8
  br label %672

672:                                              ; preds = %670, %667
  %673 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names9kStyleTagE to %"class.blink::QualifiedName"**), align 8
  %674 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %590, %"class.blink::QualifiedName"* dereferenceable(8) %673) #9
  %675 = select i1 %674, i32 3, i32 %552
  %676 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::HTMLQualifiedName"** @_ZN5blink10html_names12kTemplateTagE to %"class.blink::QualifiedName"**), align 8
  %677 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %590, %"class.blink::QualifiedName"* dereferenceable(8) %676) #9
  br i1 %677, label %678, label %691

678:                                              ; preds = %672
  %679 = getelementptr inbounds %"class.blink::HTMLTreeBuilderSimulator", %"class.blink::HTMLTreeBuilderSimulator"* %0, i64 0, i32 5, i32 0, i32 0, i32 2
  %680 = load i32, i32* %679, align 4
  %681 = icmp eq i32 %680, 0
  br i1 %681, label %691, label %682

682:                                              ; preds = %678
  %683 = getelementptr inbounds %"class.blink::HTMLTreeBuilderSimulator", %"class.blink::HTMLTreeBuilderSimulator"* %0, i64 0, i32 5
  %684 = add i32 %680, -1
  %685 = call dereferenceable(4) i32* @_ZN3WTF6VectorIN5blink24HTMLTreeBuilderSimulator12TemplateTypeELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.0"* %683, i32 %684) #9
  %686 = load i32, i32* %685, align 4
  %687 = load i32, i32* %679, align 4
  %688 = add i32 %687, -1
  store i32 %688, i32* %679, align 4
  %689 = icmp eq i32 %686, 1
  %690 = select i1 %689, i32 5, i32 %675
  br label %691

691:                                              ; preds = %581, %578, %574, %672, %682, %678
  %692 = phi i32 [ %552, %581 ], [ %552, %578 ], [ %675, %672 ], [ %690, %682 ], [ %675, %678 ], [ %552, %574 ]
  %693 = load i8, i8* %12, align 8
  %694 = and i8 %693, 15
  %695 = icmp eq i8 %694, 2
  %696 = icmp eq i32 %692, 6
  %697 = and i1 %696, %695
  br i1 %697, label %698, label %740

698:                                              ; preds = %691
  %699 = getelementptr inbounds %"class.blink::CompactHTMLToken", %"class.blink::CompactHTMLToken"* %1, i64 0, i32 1, i32 0, i32 0
  %700 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %699, align 8
  %701 = icmp eq %"class.WTF::StringImpl"* %700, null
  br i1 %701, label %739, label %702

702:                                              ; preds = %698
  %703 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %700, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %704 = load atomic i32, i32* %703 monotonic, align 4
  %705 = and i32 %704, 1
  %706 = icmp eq i32 %705, 0
  %707 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %700, i64 1
  br i1 %706, label %720, label %708

708:                                              ; preds = %702
  %709 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %700, i64 0, i32 1
  %710 = load i32, i32* %709, align 4
  %711 = icmp eq i32 %710, 0
  br i1 %711, label %739, label %712

712:                                              ; preds = %708
  %713 = bitcast %"class.WTF::StringImpl"* %707 to i8*
  %714 = zext i32 %710 to i64
  %715 = call i8* @memchr(i8* %713, i32 45, i64 %714) #10
  %716 = icmp eq i8* %715, null
  %717 = ptrtoint i8* %715 to i64
  %718 = ptrtoint %"class.WTF::StringImpl"* %707 to i64
  %719 = sub i64 %717, %718
  br i1 %716, label %739, label %735

720:                                              ; preds = %702
  %721 = bitcast %"class.WTF::StringImpl"* %707 to i16*
  %722 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %700, i64 0, i32 1
  %723 = load i32, i32* %722, align 4
  %724 = icmp eq i32 %723, 0
  br i1 %724, label %739, label %725

725:                                              ; preds = %720
  %726 = zext i32 %723 to i64
  br label %727

727:                                              ; preds = %725, %732
  %728 = phi i64 [ %733, %732 ], [ 0, %725 ]
  %729 = getelementptr inbounds i16, i16* %721, i64 %728
  %730 = load i16, i16* %729, align 2
  %731 = icmp eq i16 %730, 45
  br i1 %731, label %735, label %732

732:                                              ; preds = %727
  %733 = add nuw nsw i64 %728, 1
  %734 = icmp eq i64 %733, %726
  br i1 %734, label %739, label %727

735:                                              ; preds = %727, %712
  %736 = phi i64 [ %719, %712 ], [ %728, %727 ]
  %737 = trunc i64 %736 to i32
  %738 = icmp eq i32 %737, -1
  br i1 %738, label %739, label %740

739:                                              ; preds = %732, %720, %708, %712, %698, %735
  br label %740

740:                                              ; preds = %739, %735, %691
  %741 = phi i32 [ %692, %691 ], [ 6, %739 ], [ 4, %735 ]
  %742 = getelementptr inbounds %"class.blink::HTMLTreeBuilderSimulator", %"class.blink::HTMLTreeBuilderSimulator"* %0, i64 0, i32 2
  %743 = getelementptr inbounds %"class.blink::HTMLTreeBuilderSimulator", %"class.blink::HTMLTreeBuilderSimulator"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %744 = load i32, i32* %743, align 4
  %745 = add i32 %744, -1
  %746 = call dereferenceable(4) i32* @_ZNK3WTF6VectorIN5blink24HTMLTreeBuilderSimulator9NamespaceELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %742, i32 %745) #9
  %747 = load i32, i32* %746, align 4
  %748 = icmp ne i32 %747, 0
  %749 = zext i1 %748 to i8
  %750 = getelementptr inbounds %"class.blink::HTMLTokenizer", %"class.blink::HTMLTokenizer"* %2, i64 0, i32 1
  store i8 %749, i8* %750, align 4
  %751 = load i32, i32* %743, align 4
  %752 = add i32 %751, -1
  %753 = call dereferenceable(4) i32* @_ZNK3WTF6VectorIN5blink24HTMLTreeBuilderSimulator9NamespaceELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %742, i32 %752) #9
  %754 = load i32, i32* %753, align 4
  %755 = icmp ne i32 %754, 0
  %756 = zext i1 %755 to i8
  %757 = getelementptr inbounds %"class.blink::HTMLTokenizer", %"class.blink::HTMLTokenizer"* %2, i64 0, i32 2
  store i8 %756, i8* %757, align 1
  br label %758

758:                                              ; preds = %659, %665, %740
  %759 = phi i32 [ %741, %740 ], [ 1, %659 ], [ 1, %665 ]
  ret i32 %759
}

declare zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8), %"class.blink::QualifiedName"* dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink24HTMLTreeBuilderSimulator33IsHTMLIntegrationPointForStartTagERKNS_16CompactHTMLTokenE(%"class.blink::HTMLTreeBuilderSimulator"*, %"class.blink::CompactHTMLToken"* dereferenceable(40)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::StringView", align 8
  %4 = alloca %"class.WTF::StringView", align 8
  %5 = alloca %"class.WTF::StringView", align 8
  %6 = getelementptr inbounds %"class.blink::HTMLTreeBuilderSimulator", %"class.blink::HTMLTreeBuilderSimulator"* %0, i64 0, i32 2
  %7 = getelementptr inbounds %"class.blink::HTMLTreeBuilderSimulator", %"class.blink::HTMLTreeBuilderSimulator"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -1
  %10 = tail call dereferenceable(4) i32* @_ZNK3WTF6VectorIN5blink24HTMLTreeBuilderSimulator9NamespaceELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %6, i32 %9) #9
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.blink::CompactHTMLToken", %"class.blink::CompactHTMLToken"* %1, i64 0, i32 1
  switch i32 %11, label %143 [
    i32 2, label %13
    i32 1, label %96
  ]

13:                                               ; preds = %2
  %14 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::MathMLQualifiedName"** @_ZN5blink12mathml_names17kAnnotationXmlTagE to %"class.blink::QualifiedName"**), align 8
  %15 = tail call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %12, %"class.blink::QualifiedName"* dereferenceable(8) %14) #9
  br i1 %15, label %16, label %143

16:                                               ; preds = %13
  %17 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink12mathml_names13kEncodingAttrE, align 8
  %18 = tail call %"struct.blink::CompactHTMLToken::Attribute"* @_ZNK5blink16CompactHTMLToken16GetAttributeItemERKNS_13QualifiedNameE(%"class.blink::CompactHTMLToken"* %1, %"class.blink::QualifiedName"* dereferenceable(8) %17) #9
  %19 = icmp eq %"struct.blink::CompactHTMLToken::Attribute"* %18, null
  br i1 %19, label %143, label %20

20:                                               ; preds = %16
  %21 = bitcast %"class.WTF::StringView"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %21) #9
  %22 = getelementptr inbounds %"struct.blink::CompactHTMLToken::Attribute", %"struct.blink::CompactHTMLToken::Attribute"* %18, i64 0, i32 1, i32 0, i32 0
  %23 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %22, align 8
  %24 = icmp eq %"class.WTF::StringImpl"* %23, null
  br i1 %24, label %25, label %29

25:                                               ; preds = %20
  %26 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 1
  store i8* null, i8** %26, align 8
  %27 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %28 = bitcast %"class.WTF::StringView"* %3 to i64*
  store i64 %27, i64* %28, align 8
  br label %36

29:                                               ; preds = %20
  %30 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 0
  store %"class.WTF::StringImpl"* %23, %"class.WTF::StringImpl"** %30, align 8
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %23, i64 0, i32 1
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %23, i64 1
  %34 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 1
  %35 = bitcast i8** %34 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %33, %"class.WTF::StringImpl"** %35, align 8
  br label %36

36:                                               ; preds = %25, %29
  %37 = phi i32 [ %32, %29 ], [ 0, %25 ]
  %38 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 2
  store i32 %37, i32* %38, align 8
  %39 = call zeroext i1 @_ZN3WTF22EqualIgnoringASCIICaseILm10EEEbRKNS_10StringViewERAT__Kc(%"class.WTF::StringView"* nonnull dereferenceable(24) %3, [10 x i8]* nonnull dereferenceable(10) @.str.2)
  br i1 %39, label %94, label %40

40:                                               ; preds = %36
  %41 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %22, align 8
  %42 = icmp eq %"class.WTF::StringImpl"* %41, null
  br i1 %42, label %94, label %43

43:                                               ; preds = %40
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 1
  %45 = load i32, i32* %44, align 4
  %46 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 1
  %47 = bitcast %"class.WTF::StringImpl"* %46 to i8*
  %48 = icmp eq i32 %45, 21
  br i1 %48, label %49, label %94

49:                                               ; preds = %43
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %51 = load atomic i32, i32* %50 monotonic, align 4
  %52 = and i32 %51, 1
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %72, label %56

54:                                               ; preds = %56
  %55 = icmp eq i64 %71, 21
  br i1 %55, label %94, label %163

56:                                               ; preds = %49, %177
  %57 = phi i64 [ %178, %177 ], [ 0, %49 ]
  %58 = getelementptr inbounds i8, i8* %47, i64 %57
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i64
  %61 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %60
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = getelementptr inbounds [22 x i8], [22 x i8]* @.str.3, i64 0, i64 %57
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i64
  %67 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %66
  %68 = load i8, i8* %67, align 1
  %69 = sext i8 %68 to i32
  %70 = icmp eq i32 %63, %69
  %71 = or i64 %57, 1
  br i1 %70, label %54, label %94

72:                                               ; preds = %49
  %73 = bitcast %"class.WTF::StringImpl"* %46 to i16*
  br label %76

74:                                               ; preds = %76
  %75 = icmp eq i64 %93, 21
  br i1 %75, label %94, label %145

76:                                               ; preds = %161, %72
  %77 = phi i64 [ 0, %72 ], [ %162, %161 ]
  %78 = getelementptr inbounds i16, i16* %73, i64 %77
  %79 = load i16, i16* %78, align 2
  %80 = add i16 %79, -65
  %81 = icmp ult i16 %80, 26
  %82 = zext i1 %81 to i16
  %83 = shl nuw nsw i16 %82, 5
  %84 = or i16 %83, %79
  %85 = zext i16 %84 to i32
  %86 = getelementptr inbounds [22 x i8], [22 x i8]* @.str.3, i64 0, i64 %77
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i64
  %89 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %88
  %90 = load i8, i8* %89, align 1
  %91 = sext i8 %90 to i32
  %92 = icmp eq i32 %85, %91
  %93 = or i64 %77, 1
  br i1 %92, label %74, label %94

94:                                               ; preds = %54, %56, %163, %74, %76, %145, %40, %36, %43
  %95 = phi i1 [ true, %36 ], [ false, %43 ], [ false, %40 ], [ true, %74 ], [ false, %76 ], [ false, %145 ], [ true, %54 ], [ false, %56 ], [ false, %163 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %21) #9
  br label %143

96:                                               ; preds = %2
  %97 = bitcast %"class.WTF::StringView"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %97) #9
  %98 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %12, i64 0, i32 0, i32 0
  %99 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %98, align 8
  %100 = icmp eq %"class.WTF::StringImpl"* %99, null
  br i1 %100, label %101, label %105

101:                                              ; preds = %96
  %102 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 1
  store i8* null, i8** %102, align 8
  %103 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %104 = bitcast %"class.WTF::StringView"* %4 to i64*
  store i64 %103, i64* %104, align 8
  br label %112

105:                                              ; preds = %96
  %106 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 0
  store %"class.WTF::StringImpl"* %99, %"class.WTF::StringImpl"** %106, align 8
  %107 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %99, i64 0, i32 1
  %108 = load i32, i32* %107, align 4
  %109 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %99, i64 1
  %110 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 1
  %111 = bitcast i8** %110 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %109, %"class.WTF::StringImpl"** %111, align 8
  br label %112

112:                                              ; preds = %101, %105
  %113 = phi i32 [ %108, %105 ], [ 0, %101 ]
  %114 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 2
  store i32 %113, i32* %114, align 8
  %115 = bitcast %"class.WTF::StringView"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %115) #9
  %116 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::SVGQualifiedName"** @_ZN5blink9svg_names17kForeignObjectTagE to %"class.blink::QualifiedName"**), align 8
  %117 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %116, i64 0, i32 0, i32 0
  %118 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %117, align 8
  %119 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %118, i64 0, i32 3, i32 0, i32 0, i32 0
  %120 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %119, align 8
  %121 = icmp eq %"class.WTF::StringImpl"* %120, null
  br i1 %121, label %122, label %126

122:                                              ; preds = %112
  %123 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 1
  store i8* null, i8** %123, align 8
  %124 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %125 = bitcast %"class.WTF::StringView"* %5 to i64*
  store i64 %124, i64* %125, align 8
  br label %133

126:                                              ; preds = %112
  %127 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 0
  store %"class.WTF::StringImpl"* %120, %"class.WTF::StringImpl"** %127, align 8
  %128 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %120, i64 0, i32 1
  %129 = load i32, i32* %128, align 4
  %130 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %120, i64 1
  %131 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 1
  %132 = bitcast i8** %131 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %130, %"class.WTF::StringImpl"** %132, align 8
  br label %133

133:                                              ; preds = %122, %126
  %134 = phi i32 [ %129, %126 ], [ 0, %122 ]
  %135 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 2
  store i32 %134, i32* %135, align 8
  %136 = call zeroext i1 @_ZN3WTF22EqualIgnoringASCIICaseERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %4, %"class.WTF::StringView"* nonnull dereferenceable(24) %5) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %115) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %97) #9
  br i1 %136, label %143, label %137

137:                                              ; preds = %133
  %138 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::SVGQualifiedName"** @_ZN5blink9svg_names8kDescTagE to %"class.blink::QualifiedName"**), align 8
  %139 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %12, %"class.blink::QualifiedName"* dereferenceable(8) %138) #9
  br i1 %139, label %143, label %140

140:                                              ; preds = %137
  %141 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::SVGQualifiedName"** @_ZN5blink9svg_names9kTitleTagE to %"class.blink::QualifiedName"**), align 8
  %142 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %12, %"class.blink::QualifiedName"* dereferenceable(8) %141) #9
  br label %143

143:                                              ; preds = %16, %2, %94, %137, %140, %133, %13
  %144 = phi i1 [ %95, %94 ], [ false, %13 ], [ true, %133 ], [ true, %137 ], [ %142, %140 ], [ false, %2 ], [ false, %16 ]
  ret i1 %144

145:                                              ; preds = %74
  %146 = getelementptr inbounds i16, i16* %73, i64 %93
  %147 = load i16, i16* %146, align 2
  %148 = add i16 %147, -65
  %149 = icmp ult i16 %148, 26
  %150 = zext i1 %149 to i16
  %151 = shl nuw nsw i16 %150, 5
  %152 = or i16 %151, %147
  %153 = zext i16 %152 to i32
  %154 = getelementptr inbounds [22 x i8], [22 x i8]* @.str.3, i64 0, i64 %93
  %155 = load i8, i8* %154, align 1
  %156 = zext i8 %155 to i64
  %157 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %156
  %158 = load i8, i8* %157, align 1
  %159 = sext i8 %158 to i32
  %160 = icmp eq i32 %153, %159
  br i1 %160, label %161, label %94

161:                                              ; preds = %145
  %162 = add nuw nsw i64 %77, 2
  br label %76

163:                                              ; preds = %54
  %164 = getelementptr inbounds i8, i8* %47, i64 %71
  %165 = load i8, i8* %164, align 1
  %166 = zext i8 %165 to i64
  %167 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %166
  %168 = load i8, i8* %167, align 1
  %169 = zext i8 %168 to i32
  %170 = getelementptr inbounds [22 x i8], [22 x i8]* @.str.3, i64 0, i64 %71
  %171 = load i8, i8* %170, align 1
  %172 = zext i8 %171 to i64
  %173 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %172
  %174 = load i8, i8* %173, align 1
  %175 = sext i8 %174 to i32
  %176 = icmp eq i32 %169, %175
  br i1 %176, label %177, label %94

177:                                              ; preds = %163
  %178 = add nuw nsw i64 %57, 2
  br label %56
}

declare %"struct.blink::CompactHTMLToken::Attribute"* @_ZNK5blink16CompactHTMLToken16GetAttributeItemERKNS_13QualifiedNameE(%"class.blink::CompactHTMLToken"*, %"class.blink::QualifiedName"* dereferenceable(8)) local_unnamed_addr #2

declare i32 @_ZN5blink12ScriptLoader22GetScriptTypeAtPrepareERKN3WTF6StringES4_NS0_17LegacyTypeSupportE(%"class.WTF::String"* dereferenceable(8), %"class.WTF::String"* dereferenceable(8), i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN3WTF22EqualIgnoringASCIICaseILm5EEEbRKNS_10StringViewERAT__Kc(%"class.WTF::StringView"* dereferenceable(24), [5 x i8]* dereferenceable(5)) local_unnamed_addr #3 comdat {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 4
  br i1 %5, label %6, label %75

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  %13 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 1
  br i1 %12, label %42, label %14

14:                                               ; preds = %6
  %15 = load i8*, i8** %13, align 8
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i64
  %18 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = getelementptr inbounds [5 x i8], [5 x i8]* %1, i64 0, i64 0
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i64
  %24 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %23
  %25 = load i8, i8* %24, align 1
  %26 = sext i8 %25 to i32
  %27 = icmp eq i32 %20, %26
  br i1 %27, label %28, label %75

28:                                               ; preds = %14
  %29 = getelementptr inbounds i8, i8* %15, i64 1
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i64
  %32 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = getelementptr inbounds [5 x i8], [5 x i8]* %1, i64 0, i64 1
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i64
  %38 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %37
  %39 = load i8, i8* %38, align 1
  %40 = sext i8 %39 to i32
  %41 = icmp eq i32 %34, %40
  br i1 %41, label %109, label %75

42:                                               ; preds = %6
  %43 = bitcast i8** %13 to i16**
  %44 = load i16*, i16** %43, align 8
  %45 = load i16, i16* %44, align 2
  %46 = add i16 %45, -65
  %47 = icmp ult i16 %46, 26
  %48 = zext i1 %47 to i16
  %49 = shl nuw nsw i16 %48, 5
  %50 = or i16 %49, %45
  %51 = zext i16 %50 to i32
  %52 = getelementptr inbounds [5 x i8], [5 x i8]* %1, i64 0, i64 0
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i64
  %55 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %54
  %56 = load i8, i8* %55, align 1
  %57 = sext i8 %56 to i32
  %58 = icmp eq i32 %51, %57
  br i1 %58, label %59, label %75

59:                                               ; preds = %42
  %60 = getelementptr inbounds i16, i16* %44, i64 1
  %61 = load i16, i16* %60, align 2
  %62 = add i16 %61, -65
  %63 = icmp ult i16 %62, 26
  %64 = zext i1 %63 to i16
  %65 = shl nuw nsw i16 %64, 5
  %66 = or i16 %65, %61
  %67 = zext i16 %66 to i32
  %68 = getelementptr inbounds [5 x i8], [5 x i8]* %1, i64 0, i64 1
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i64
  %71 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %70
  %72 = load i8, i8* %71, align 1
  %73 = sext i8 %72 to i32
  %74 = icmp eq i32 %67, %73
  br i1 %74, label %77, label %75

75:                                               ; preds = %123, %14, %28, %109, %42, %59, %77, %2
  %76 = phi i1 [ false, %2 ], [ false, %42 ], [ false, %59 ], [ false, %77 ], [ false, %14 ], [ false, %28 ], [ false, %109 ], [ %136, %123 ]
  ret i1 %76

77:                                               ; preds = %59
  %78 = getelementptr inbounds i16, i16* %44, i64 2
  %79 = load i16, i16* %78, align 2
  %80 = add i16 %79, -65
  %81 = icmp ult i16 %80, 26
  %82 = zext i1 %81 to i16
  %83 = shl nuw nsw i16 %82, 5
  %84 = or i16 %83, %79
  %85 = zext i16 %84 to i32
  %86 = getelementptr inbounds [5 x i8], [5 x i8]* %1, i64 0, i64 2
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i64
  %89 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %88
  %90 = load i8, i8* %89, align 1
  %91 = sext i8 %90 to i32
  %92 = icmp eq i32 %85, %91
  br i1 %92, label %93, label %75

93:                                               ; preds = %77
  %94 = getelementptr inbounds i16, i16* %44, i64 3
  %95 = load i16, i16* %94, align 2
  %96 = add i16 %95, -65
  %97 = icmp ult i16 %96, 26
  %98 = zext i1 %97 to i16
  %99 = shl nuw nsw i16 %98, 5
  %100 = or i16 %99, %95
  %101 = zext i16 %100 to i32
  %102 = getelementptr inbounds [5 x i8], [5 x i8]* %1, i64 0, i64 3
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i64
  %105 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %104
  %106 = load i8, i8* %105, align 1
  %107 = sext i8 %106 to i32
  %108 = icmp eq i32 %101, %107
  ret i1 %108

109:                                              ; preds = %28
  %110 = getelementptr inbounds i8, i8* %15, i64 2
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i64
  %113 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i32
  %116 = getelementptr inbounds [5 x i8], [5 x i8]* %1, i64 0, i64 2
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i64
  %119 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %118
  %120 = load i8, i8* %119, align 1
  %121 = sext i8 %120 to i32
  %122 = icmp eq i32 %115, %121
  br i1 %122, label %123, label %75

123:                                              ; preds = %109
  %124 = getelementptr inbounds i8, i8* %15, i64 3
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i64
  %127 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %126
  %128 = load i8, i8* %127, align 1
  %129 = zext i8 %128 to i32
  %130 = getelementptr inbounds [5 x i8], [5 x i8]* %1, i64 0, i64 3
  %131 = load i8, i8* %130, align 1
  %132 = zext i8 %131 to i64
  %133 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %132
  %134 = load i8, i8* %133, align 1
  %135 = sext i8 %134 to i32
  %136 = icmp eq i32 %129, %135
  br label %75
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN3WTF22EqualIgnoringASCIICaseILm7EEEbRKNS_10StringViewERAT__Kc(%"class.WTF::StringView"* dereferenceable(24), [7 x i8]* dereferenceable(7)) local_unnamed_addr #3 comdat {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 6
  br i1 %5, label %6, label %75

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  %13 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 1
  br i1 %12, label %42, label %14

14:                                               ; preds = %6
  %15 = load i8*, i8** %13, align 8
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i64
  %18 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 0
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i64
  %24 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %23
  %25 = load i8, i8* %24, align 1
  %26 = sext i8 %25 to i32
  %27 = icmp eq i32 %20, %26
  br i1 %27, label %28, label %75

28:                                               ; preds = %14
  %29 = getelementptr inbounds i8, i8* %15, i64 1
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i64
  %32 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 1
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i64
  %38 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %37
  %39 = load i8, i8* %38, align 1
  %40 = sext i8 %39 to i32
  %41 = icmp eq i32 %34, %40
  br i1 %41, label %141, label %75

42:                                               ; preds = %6
  %43 = bitcast i8** %13 to i16**
  %44 = load i16*, i16** %43, align 8
  %45 = load i16, i16* %44, align 2
  %46 = add i16 %45, -65
  %47 = icmp ult i16 %46, 26
  %48 = zext i1 %47 to i16
  %49 = shl nuw nsw i16 %48, 5
  %50 = or i16 %49, %45
  %51 = zext i16 %50 to i32
  %52 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 0
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i64
  %55 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %54
  %56 = load i8, i8* %55, align 1
  %57 = sext i8 %56 to i32
  %58 = icmp eq i32 %51, %57
  br i1 %58, label %59, label %75

59:                                               ; preds = %42
  %60 = getelementptr inbounds i16, i16* %44, i64 1
  %61 = load i16, i16* %60, align 2
  %62 = add i16 %61, -65
  %63 = icmp ult i16 %62, 26
  %64 = zext i1 %63 to i16
  %65 = shl nuw nsw i16 %64, 5
  %66 = or i16 %65, %61
  %67 = zext i16 %66 to i32
  %68 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 1
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i64
  %71 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %70
  %72 = load i8, i8* %71, align 1
  %73 = sext i8 %72 to i32
  %74 = icmp eq i32 %67, %73
  br i1 %74, label %77, label %75

75:                                               ; preds = %183, %14, %28, %141, %155, %169, %42, %59, %77, %93, %109, %2
  %76 = phi i1 [ false, %2 ], [ false, %42 ], [ false, %59 ], [ false, %77 ], [ false, %93 ], [ false, %109 ], [ false, %14 ], [ false, %28 ], [ false, %141 ], [ false, %155 ], [ false, %169 ], [ %196, %183 ]
  ret i1 %76

77:                                               ; preds = %59
  %78 = getelementptr inbounds i16, i16* %44, i64 2
  %79 = load i16, i16* %78, align 2
  %80 = add i16 %79, -65
  %81 = icmp ult i16 %80, 26
  %82 = zext i1 %81 to i16
  %83 = shl nuw nsw i16 %82, 5
  %84 = or i16 %83, %79
  %85 = zext i16 %84 to i32
  %86 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 2
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i64
  %89 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %88
  %90 = load i8, i8* %89, align 1
  %91 = sext i8 %90 to i32
  %92 = icmp eq i32 %85, %91
  br i1 %92, label %93, label %75

93:                                               ; preds = %77
  %94 = getelementptr inbounds i16, i16* %44, i64 3
  %95 = load i16, i16* %94, align 2
  %96 = add i16 %95, -65
  %97 = icmp ult i16 %96, 26
  %98 = zext i1 %97 to i16
  %99 = shl nuw nsw i16 %98, 5
  %100 = or i16 %99, %95
  %101 = zext i16 %100 to i32
  %102 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 3
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i64
  %105 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %104
  %106 = load i8, i8* %105, align 1
  %107 = sext i8 %106 to i32
  %108 = icmp eq i32 %101, %107
  br i1 %108, label %109, label %75

109:                                              ; preds = %93
  %110 = getelementptr inbounds i16, i16* %44, i64 4
  %111 = load i16, i16* %110, align 2
  %112 = add i16 %111, -65
  %113 = icmp ult i16 %112, 26
  %114 = zext i1 %113 to i16
  %115 = shl nuw nsw i16 %114, 5
  %116 = or i16 %115, %111
  %117 = zext i16 %116 to i32
  %118 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 4
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i64
  %121 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %120
  %122 = load i8, i8* %121, align 1
  %123 = sext i8 %122 to i32
  %124 = icmp eq i32 %117, %123
  br i1 %124, label %125, label %75

125:                                              ; preds = %109
  %126 = getelementptr inbounds i16, i16* %44, i64 5
  %127 = load i16, i16* %126, align 2
  %128 = add i16 %127, -65
  %129 = icmp ult i16 %128, 26
  %130 = zext i1 %129 to i16
  %131 = shl nuw nsw i16 %130, 5
  %132 = or i16 %131, %127
  %133 = zext i16 %132 to i32
  %134 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 5
  %135 = load i8, i8* %134, align 1
  %136 = zext i8 %135 to i64
  %137 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %136
  %138 = load i8, i8* %137, align 1
  %139 = sext i8 %138 to i32
  %140 = icmp eq i32 %133, %139
  ret i1 %140

141:                                              ; preds = %28
  %142 = getelementptr inbounds i8, i8* %15, i64 2
  %143 = load i8, i8* %142, align 1
  %144 = zext i8 %143 to i64
  %145 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %144
  %146 = load i8, i8* %145, align 1
  %147 = zext i8 %146 to i32
  %148 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 2
  %149 = load i8, i8* %148, align 1
  %150 = zext i8 %149 to i64
  %151 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %150
  %152 = load i8, i8* %151, align 1
  %153 = sext i8 %152 to i32
  %154 = icmp eq i32 %147, %153
  br i1 %154, label %155, label %75

155:                                              ; preds = %141
  %156 = getelementptr inbounds i8, i8* %15, i64 3
  %157 = load i8, i8* %156, align 1
  %158 = zext i8 %157 to i64
  %159 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %158
  %160 = load i8, i8* %159, align 1
  %161 = zext i8 %160 to i32
  %162 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 3
  %163 = load i8, i8* %162, align 1
  %164 = zext i8 %163 to i64
  %165 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %164
  %166 = load i8, i8* %165, align 1
  %167 = sext i8 %166 to i32
  %168 = icmp eq i32 %161, %167
  br i1 %168, label %169, label %75

169:                                              ; preds = %155
  %170 = getelementptr inbounds i8, i8* %15, i64 4
  %171 = load i8, i8* %170, align 1
  %172 = zext i8 %171 to i64
  %173 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %172
  %174 = load i8, i8* %173, align 1
  %175 = zext i8 %174 to i32
  %176 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 4
  %177 = load i8, i8* %176, align 1
  %178 = zext i8 %177 to i64
  %179 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %178
  %180 = load i8, i8* %179, align 1
  %181 = sext i8 %180 to i32
  %182 = icmp eq i32 %175, %181
  br i1 %182, label %183, label %75

183:                                              ; preds = %169
  %184 = getelementptr inbounds i8, i8* %15, i64 5
  %185 = load i8, i8* %184, align 1
  %186 = zext i8 %185 to i64
  %187 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %186
  %188 = load i8, i8* %187, align 1
  %189 = zext i8 %188 to i32
  %190 = getelementptr inbounds [7 x i8], [7 x i8]* %1, i64 0, i64 5
  %191 = load i8, i8* %190, align 1
  %192 = zext i8 %191 to i64
  %193 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %192
  %194 = load i8, i8* %193, align 1
  %195 = sext i8 %194 to i32
  %196 = icmp eq i32 %189, %195
  br label %75
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink24HTMLTreeBuilderSimulator31IsHTMLIntegrationPointForEndTagERKNS_16CompactHTMLTokenE(%"class.blink::HTMLTreeBuilderSimulator"*, %"class.blink::CompactHTMLToken"* dereferenceable(40)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::StringView", align 8
  %4 = alloca %"class.WTF::StringView", align 8
  %5 = getelementptr inbounds %"class.blink::CompactHTMLToken", %"class.blink::CompactHTMLToken"* %1, i64 0, i32 0
  %6 = load i8, i8* %5, align 8
  %7 = and i8 %6, 15
  %8 = icmp eq i8 %7, 3
  br i1 %8, label %9, label %75

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.blink::HTMLTreeBuilderSimulator", %"class.blink::HTMLTreeBuilderSimulator"* %0, i64 0, i32 2
  %11 = getelementptr inbounds %"class.blink::HTMLTreeBuilderSimulator", %"class.blink::HTMLTreeBuilderSimulator"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = add i32 %12, -1
  %14 = tail call dereferenceable(4) i32* @_ZNK3WTF6VectorIN5blink24HTMLTreeBuilderSimulator9NamespaceELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %10, i32 %13) #9
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %75

17:                                               ; preds = %9
  %18 = load i32, i32* %11, align 4
  %19 = icmp ult i32 %18, 2
  br i1 %19, label %75, label %20

20:                                               ; preds = %17
  %21 = add i32 %18, -2
  %22 = tail call dereferenceable(4) i32* @_ZNK3WTF6VectorIN5blink24HTMLTreeBuilderSimulator9NamespaceELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %10, i32 %21) #9
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %"class.blink::CompactHTMLToken", %"class.blink::CompactHTMLToken"* %1, i64 0, i32 1
  switch i32 %23, label %75 [
    i32 2, label %25
    i32 1, label %28
  ]

25:                                               ; preds = %20
  %26 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::MathMLQualifiedName"** @_ZN5blink12mathml_names17kAnnotationXmlTagE to %"class.blink::QualifiedName"**), align 8
  %27 = tail call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %24, %"class.blink::QualifiedName"* dereferenceable(8) %26) #9
  br label %75

28:                                               ; preds = %20
  %29 = bitcast %"class.WTF::StringView"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %29) #9
  %30 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %24, i64 0, i32 0, i32 0
  %31 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %30, align 8
  %32 = icmp eq %"class.WTF::StringImpl"* %31, null
  br i1 %32, label %33, label %37

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 1
  store i8* null, i8** %34, align 8
  %35 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %36 = bitcast %"class.WTF::StringView"* %3 to i64*
  store i64 %35, i64* %36, align 8
  br label %44

37:                                               ; preds = %28
  %38 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 0
  store %"class.WTF::StringImpl"* %31, %"class.WTF::StringImpl"** %38, align 8
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 0, i32 1
  %40 = load i32, i32* %39, align 4
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 1
  %42 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 1
  %43 = bitcast i8** %42 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %41, %"class.WTF::StringImpl"** %43, align 8
  br label %44

44:                                               ; preds = %33, %37
  %45 = phi i32 [ %40, %37 ], [ 0, %33 ]
  %46 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 2
  store i32 %45, i32* %46, align 8
  %47 = bitcast %"class.WTF::StringView"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %47) #9
  %48 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::SVGQualifiedName"** @_ZN5blink9svg_names17kForeignObjectTagE to %"class.blink::QualifiedName"**), align 8
  %49 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %48, i64 0, i32 0, i32 0
  %50 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %49, align 8
  %51 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %50, i64 0, i32 3, i32 0, i32 0, i32 0
  %52 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %51, align 8
  %53 = icmp eq %"class.WTF::StringImpl"* %52, null
  br i1 %53, label %54, label %58

54:                                               ; preds = %44
  %55 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 1
  store i8* null, i8** %55, align 8
  %56 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %57 = bitcast %"class.WTF::StringView"* %4 to i64*
  store i64 %56, i64* %57, align 8
  br label %65

58:                                               ; preds = %44
  %59 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 0
  store %"class.WTF::StringImpl"* %52, %"class.WTF::StringImpl"** %59, align 8
  %60 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 0, i32 1
  %61 = load i32, i32* %60, align 4
  %62 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 1
  %63 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 1
  %64 = bitcast i8** %63 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %62, %"class.WTF::StringImpl"** %64, align 8
  br label %65

65:                                               ; preds = %54, %58
  %66 = phi i32 [ %61, %58 ], [ 0, %54 ]
  %67 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 2
  store i32 %66, i32* %67, align 8
  %68 = call zeroext i1 @_ZN3WTF22EqualIgnoringASCIICaseERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %4) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %47) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %29) #9
  br i1 %68, label %75, label %69

69:                                               ; preds = %65
  %70 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::SVGQualifiedName"** @_ZN5blink9svg_names8kDescTagE to %"class.blink::QualifiedName"**), align 8
  %71 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %24, %"class.blink::QualifiedName"* dereferenceable(8) %70) #9
  br i1 %71, label %75, label %72

72:                                               ; preds = %69
  %73 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** bitcast (%"class.blink::SVGQualifiedName"** @_ZN5blink9svg_names9kTitleTagE to %"class.blink::QualifiedName"**), align 8
  %74 = call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %24, %"class.blink::QualifiedName"* dereferenceable(8) %73) #9
  br label %75

75:                                               ; preds = %25, %65, %72, %69, %20, %17, %9, %2
  %76 = phi i1 [ false, %2 ], [ false, %9 ], [ false, %17 ], [ %27, %25 ], [ true, %65 ], [ true, %69 ], [ %74, %72 ], [ false, %20 ]
  ret i1 %76
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN3WTF22EqualIgnoringASCIICaseILm10EEEbRKNS_10StringViewERAT__Kc(%"class.WTF::StringView"* dereferenceable(24), [10 x i8]* dereferenceable(10)) local_unnamed_addr #3 comdat {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 9
  br i1 %5, label %6, label %75

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  %13 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 1
  br i1 %12, label %42, label %14

14:                                               ; preds = %6
  %15 = load i8*, i8** %13, align 8
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i64
  %18 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = getelementptr inbounds [10 x i8], [10 x i8]* %1, i64 0, i64 0
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i64
  %24 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %23
  %25 = load i8, i8* %24, align 1
  %26 = sext i8 %25 to i32
  %27 = icmp eq i32 %20, %26
  br i1 %27, label %28, label %75

28:                                               ; preds = %14
  %29 = getelementptr inbounds i8, i8* %15, i64 1
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i64
  %32 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = getelementptr inbounds [10 x i8], [10 x i8]* %1, i64 0, i64 1
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i64
  %38 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %37
  %39 = load i8, i8* %38, align 1
  %40 = sext i8 %39 to i32
  %41 = icmp eq i32 %34, %40
  br i1 %41, label %189, label %75

42:                                               ; preds = %6
  %43 = bitcast i8** %13 to i16**
  %44 = load i16*, i16** %43, align 8
  %45 = load i16, i16* %44, align 2
  %46 = add i16 %45, -65
  %47 = icmp ult i16 %46, 26
  %48 = zext i1 %47 to i16
  %49 = shl nuw nsw i16 %48, 5
  %50 = or i16 %49, %45
  %51 = zext i16 %50 to i32
  %52 = getelementptr inbounds [10 x i8], [10 x i8]* %1, i64 0, i64 0
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i64
  %55 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %54
  %56 = load i8, i8* %55, align 1
  %57 = sext i8 %56 to i32
  %58 = icmp eq i32 %51, %57
  br i1 %58, label %59, label %75

59:                                               ; preds = %42
  %60 = getelementptr inbounds i16, i16* %44, i64 1
  %61 = load i16, i16* %60, align 2
  %62 = add i16 %61, -65
  %63 = icmp ult i16 %62, 26
  %64 = zext i1 %63 to i16
  %65 = shl nuw nsw i16 %64, 5
  %66 = or i16 %65, %61
  %67 = zext i16 %66 to i32
  %68 = getelementptr inbounds [10 x i8], [10 x i8]* %1, i64 0, i64 1
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i64
  %71 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %70
  %72 = load i8, i8* %71, align 1
  %73 = sext i8 %72 to i32
  %74 = icmp eq i32 %67, %73
  br i1 %74, label %77, label %75

75:                                               ; preds = %273, %14, %28, %189, %203, %217, %231, %245, %259, %42, %59, %77, %93, %109, %125, %141, %157, %2
  %76 = phi i1 [ false, %2 ], [ false, %42 ], [ false, %59 ], [ false, %77 ], [ false, %93 ], [ false, %109 ], [ false, %125 ], [ false, %141 ], [ false, %157 ], [ false, %14 ], [ false, %28 ], [ false, %189 ], [ false, %203 ], [ false, %217 ], [ false, %231 ], [ false, %245 ], [ false, %259 ], [ %286, %273 ]
  ret i1 %76

77:                                               ; preds = %59
  %78 = getelementptr inbounds i16, i16* %44, i64 2
  %79 = load i16, i16* %78, align 2
  %80 = add i16 %79, -65
  %81 = icmp ult i16 %80, 26
  %82 = zext i1 %81 to i16
  %83 = shl nuw nsw i16 %82, 5
  %84 = or i16 %83, %79
  %85 = zext i16 %84 to i32
  %86 = getelementptr inbounds [10 x i8], [10 x i8]* %1, i64 0, i64 2
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i64
  %89 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %88
  %90 = load i8, i8* %89, align 1
  %91 = sext i8 %90 to i32
  %92 = icmp eq i32 %85, %91
  br i1 %92, label %93, label %75

93:                                               ; preds = %77
  %94 = getelementptr inbounds i16, i16* %44, i64 3
  %95 = load i16, i16* %94, align 2
  %96 = add i16 %95, -65
  %97 = icmp ult i16 %96, 26
  %98 = zext i1 %97 to i16
  %99 = shl nuw nsw i16 %98, 5
  %100 = or i16 %99, %95
  %101 = zext i16 %100 to i32
  %102 = getelementptr inbounds [10 x i8], [10 x i8]* %1, i64 0, i64 3
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i64
  %105 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %104
  %106 = load i8, i8* %105, align 1
  %107 = sext i8 %106 to i32
  %108 = icmp eq i32 %101, %107
  br i1 %108, label %109, label %75

109:                                              ; preds = %93
  %110 = getelementptr inbounds i16, i16* %44, i64 4
  %111 = load i16, i16* %110, align 2
  %112 = add i16 %111, -65
  %113 = icmp ult i16 %112, 26
  %114 = zext i1 %113 to i16
  %115 = shl nuw nsw i16 %114, 5
  %116 = or i16 %115, %111
  %117 = zext i16 %116 to i32
  %118 = getelementptr inbounds [10 x i8], [10 x i8]* %1, i64 0, i64 4
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i64
  %121 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %120
  %122 = load i8, i8* %121, align 1
  %123 = sext i8 %122 to i32
  %124 = icmp eq i32 %117, %123
  br i1 %124, label %125, label %75

125:                                              ; preds = %109
  %126 = getelementptr inbounds i16, i16* %44, i64 5
  %127 = load i16, i16* %126, align 2
  %128 = add i16 %127, -65
  %129 = icmp ult i16 %128, 26
  %130 = zext i1 %129 to i16
  %131 = shl nuw nsw i16 %130, 5
  %132 = or i16 %131, %127
  %133 = zext i16 %132 to i32
  %134 = getelementptr inbounds [10 x i8], [10 x i8]* %1, i64 0, i64 5
  %135 = load i8, i8* %134, align 1
  %136 = zext i8 %135 to i64
  %137 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %136
  %138 = load i8, i8* %137, align 1
  %139 = sext i8 %138 to i32
  %140 = icmp eq i32 %133, %139
  br i1 %140, label %141, label %75

141:                                              ; preds = %125
  %142 = getelementptr inbounds i16, i16* %44, i64 6
  %143 = load i16, i16* %142, align 2
  %144 = add i16 %143, -65
  %145 = icmp ult i16 %144, 26
  %146 = zext i1 %145 to i16
  %147 = shl nuw nsw i16 %146, 5
  %148 = or i16 %147, %143
  %149 = zext i16 %148 to i32
  %150 = getelementptr inbounds [10 x i8], [10 x i8]* %1, i64 0, i64 6
  %151 = load i8, i8* %150, align 1
  %152 = zext i8 %151 to i64
  %153 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %152
  %154 = load i8, i8* %153, align 1
  %155 = sext i8 %154 to i32
  %156 = icmp eq i32 %149, %155
  br i1 %156, label %157, label %75

157:                                              ; preds = %141
  %158 = getelementptr inbounds i16, i16* %44, i64 7
  %159 = load i16, i16* %158, align 2
  %160 = add i16 %159, -65
  %161 = icmp ult i16 %160, 26
  %162 = zext i1 %161 to i16
  %163 = shl nuw nsw i16 %162, 5
  %164 = or i16 %163, %159
  %165 = zext i16 %164 to i32
  %166 = getelementptr inbounds [10 x i8], [10 x i8]* %1, i64 0, i64 7
  %167 = load i8, i8* %166, align 1
  %168 = zext i8 %167 to i64
  %169 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %168
  %170 = load i8, i8* %169, align 1
  %171 = sext i8 %170 to i32
  %172 = icmp eq i32 %165, %171
  br i1 %172, label %173, label %75

173:                                              ; preds = %157
  %174 = getelementptr inbounds i16, i16* %44, i64 8
  %175 = load i16, i16* %174, align 2
  %176 = add i16 %175, -65
  %177 = icmp ult i16 %176, 26
  %178 = zext i1 %177 to i16
  %179 = shl nuw nsw i16 %178, 5
  %180 = or i16 %179, %175
  %181 = zext i16 %180 to i32
  %182 = getelementptr inbounds [10 x i8], [10 x i8]* %1, i64 0, i64 8
  %183 = load i8, i8* %182, align 1
  %184 = zext i8 %183 to i64
  %185 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %184
  %186 = load i8, i8* %185, align 1
  %187 = sext i8 %186 to i32
  %188 = icmp eq i32 %181, %187
  ret i1 %188

189:                                              ; preds = %28
  %190 = getelementptr inbounds i8, i8* %15, i64 2
  %191 = load i8, i8* %190, align 1
  %192 = zext i8 %191 to i64
  %193 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %192
  %194 = load i8, i8* %193, align 1
  %195 = zext i8 %194 to i32
  %196 = getelementptr inbounds [10 x i8], [10 x i8]* %1, i64 0, i64 2
  %197 = load i8, i8* %196, align 1
  %198 = zext i8 %197 to i64
  %199 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %198
  %200 = load i8, i8* %199, align 1
  %201 = sext i8 %200 to i32
  %202 = icmp eq i32 %195, %201
  br i1 %202, label %203, label %75

203:                                              ; preds = %189
  %204 = getelementptr inbounds i8, i8* %15, i64 3
  %205 = load i8, i8* %204, align 1
  %206 = zext i8 %205 to i64
  %207 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %206
  %208 = load i8, i8* %207, align 1
  %209 = zext i8 %208 to i32
  %210 = getelementptr inbounds [10 x i8], [10 x i8]* %1, i64 0, i64 3
  %211 = load i8, i8* %210, align 1
  %212 = zext i8 %211 to i64
  %213 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %212
  %214 = load i8, i8* %213, align 1
  %215 = sext i8 %214 to i32
  %216 = icmp eq i32 %209, %215
  br i1 %216, label %217, label %75

217:                                              ; preds = %203
  %218 = getelementptr inbounds i8, i8* %15, i64 4
  %219 = load i8, i8* %218, align 1
  %220 = zext i8 %219 to i64
  %221 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %220
  %222 = load i8, i8* %221, align 1
  %223 = zext i8 %222 to i32
  %224 = getelementptr inbounds [10 x i8], [10 x i8]* %1, i64 0, i64 4
  %225 = load i8, i8* %224, align 1
  %226 = zext i8 %225 to i64
  %227 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %226
  %228 = load i8, i8* %227, align 1
  %229 = sext i8 %228 to i32
  %230 = icmp eq i32 %223, %229
  br i1 %230, label %231, label %75

231:                                              ; preds = %217
  %232 = getelementptr inbounds i8, i8* %15, i64 5
  %233 = load i8, i8* %232, align 1
  %234 = zext i8 %233 to i64
  %235 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %234
  %236 = load i8, i8* %235, align 1
  %237 = zext i8 %236 to i32
  %238 = getelementptr inbounds [10 x i8], [10 x i8]* %1, i64 0, i64 5
  %239 = load i8, i8* %238, align 1
  %240 = zext i8 %239 to i64
  %241 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %240
  %242 = load i8, i8* %241, align 1
  %243 = sext i8 %242 to i32
  %244 = icmp eq i32 %237, %243
  br i1 %244, label %245, label %75

245:                                              ; preds = %231
  %246 = getelementptr inbounds i8, i8* %15, i64 6
  %247 = load i8, i8* %246, align 1
  %248 = zext i8 %247 to i64
  %249 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %248
  %250 = load i8, i8* %249, align 1
  %251 = zext i8 %250 to i32
  %252 = getelementptr inbounds [10 x i8], [10 x i8]* %1, i64 0, i64 6
  %253 = load i8, i8* %252, align 1
  %254 = zext i8 %253 to i64
  %255 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %254
  %256 = load i8, i8* %255, align 1
  %257 = sext i8 %256 to i32
  %258 = icmp eq i32 %251, %257
  br i1 %258, label %259, label %75

259:                                              ; preds = %245
  %260 = getelementptr inbounds i8, i8* %15, i64 7
  %261 = load i8, i8* %260, align 1
  %262 = zext i8 %261 to i64
  %263 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %262
  %264 = load i8, i8* %263, align 1
  %265 = zext i8 %264 to i32
  %266 = getelementptr inbounds [10 x i8], [10 x i8]* %1, i64 0, i64 7
  %267 = load i8, i8* %266, align 1
  %268 = zext i8 %267 to i64
  %269 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %268
  %270 = load i8, i8* %269, align 1
  %271 = sext i8 %270 to i32
  %272 = icmp eq i32 %265, %271
  br i1 %272, label %273, label %75

273:                                              ; preds = %259
  %274 = getelementptr inbounds i8, i8* %15, i64 8
  %275 = load i8, i8* %274, align 1
  %276 = zext i8 %275 to i64
  %277 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %276
  %278 = load i8, i8* %277, align 1
  %279 = zext i8 %278 to i32
  %280 = getelementptr inbounds [10 x i8], [10 x i8]* %1, i64 0, i64 8
  %281 = load i8, i8* %280, align 1
  %282 = zext i8 %281 to i64
  %283 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %282
  %284 = load i8, i8* %283, align 1
  %285 = sext i8 %284 to i32
  %286 = icmp eq i32 %279, %285
  br label %75
}

declare zeroext i1 @_ZN3WTF22EqualIgnoringASCIICaseERKNS_10StringViewES2_(%"class.WTF::StringView"* dereferenceable(24), %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12VectorBufferIN5blink24HTMLTreeBuilderSimulator9NamespaceELj1ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS3_(%"class.WTF::VectorBuffer"*, i32*) local_unnamed_addr #4 comdat align 2 {
  %3 = bitcast i32* %1 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %3) #9
  ret void
}

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #2

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #5

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

; Function Attrs: nofree nounwind readonly
declare i8* @memchr(i8*, i32, i64) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(4) i32* @_ZNK3WTF6VectorIN5blink24HTMLTreeBuilderSimulator9NamespaceELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #9
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #9
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i8* %14, i8* %15) #9
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.5, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #9
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #9
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #9
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load i32*, i32** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds i32, i32* %24, i64 %25
  ret i32* %26
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #8

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink24HTMLTreeBuilderSimulator9NamespaceELj1ENS_18PartitionAllocatorEE14AppendSlowCaseIS3_EEvOT_(%"class.WTF::Vector"*, i32* dereferenceable(4)) local_unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load i32*, i32** %6, align 8
  %8 = icmp ugt i32* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds i32, i32* %7, i64 %10
  %12 = icmp ugt i32* %11, %1
  br i1 %12, label %15, label %13

13:                                               ; preds = %9, %2
  tail call void @_ZN3WTF6VectorIN5blink24HTMLTreeBuilderSimulator9NamespaceELj1ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector"* %0, i32 %5) #9
  %14 = load i32*, i32** %6, align 8
  br label %22

15:                                               ; preds = %9
  %16 = ptrtoint i32* %1 to i64
  %17 = ptrtoint i32* %7 to i64
  %18 = sub i64 %16, %17
  %19 = ashr exact i64 %18, 2
  tail call void @_ZN3WTF6VectorIN5blink24HTMLTreeBuilderSimulator9NamespaceELj1ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector"* %0, i32 %5) #9
  %20 = load i32*, i32** %6, align 8
  %21 = getelementptr inbounds i32, i32* %20, i64 %19
  br label %22

22:                                               ; preds = %13, %15
  %23 = phi i32* [ %14, %13 ], [ %20, %15 ]
  %24 = phi i32* [ %1, %13 ], [ %21, %15 ]
  %25 = load i32, i32* %3, align 4
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds i32, i32* %23, i64 %26
  %28 = load i32, i32* %24, align 4
  store i32 %28, i32* %27, align 4
  %29 = load i32, i32* %3, align 4
  %30 = add i32 %29, 1
  store i32 %30, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink24HTMLTreeBuilderSimulator9NamespaceELj1ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = shl i32 %7, 1
  %9 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #9
  %10 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %10, align 8
  %11 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = icmp ugt i32 %8, %7
  br i1 %12, label %13, label %14

13:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* null, i8** %10, align 8
  br label %23

14:                                               ; preds = %2
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %8) #9
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.6, i64 0, i64 0), i8* %15, i8* %16) #9
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* %18, i8** %10, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.5, i64 0, i64 0), i32 1715, %"class.logging::CheckOpResult"* nonnull %4) #9
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #9
  br label %23

23:                                               ; preds = %13, %14, %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #9
  %24 = icmp ugt i32 %8, 4
  %25 = select i1 %24, i32 %8, i32 4
  %26 = icmp ugt i32 %25, %1
  %27 = select i1 %26, i32 %25, i32 %1
  %28 = load i32, i32* %6, align 8
  %29 = icmp ult i32 %28, %27
  br i1 %29, label %30, label %51, !prof !4

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load i32*, i32** %31, align 8
  %33 = icmp eq i32* %32, null
  br i1 %33, label %34, label %50

34:                                               ; preds = %30
  %35 = icmp ugt i32 %27, 1
  br i1 %35, label %36, label %44

36:                                               ; preds = %34
  %37 = zext i32 %27 to i64
  %38 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink24HTMLTreeBuilderSimulator9NamespaceEEEmm(i64 %37) #9
  %39 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %38, i8* getelementptr inbounds ([90 x i8], [90 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink24HTMLTreeBuilderSimulator9NamespaceEEEPKcv, i64 0, i64 0)) #9
  %40 = ptrtoint i8* %39 to i64
  %41 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %40, i64* %41 monotonic, align 8
  %42 = lshr i64 %38, 2
  %43 = trunc i64 %42 to i32
  br label %48

44:                                               ; preds = %34
  %45 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 1, i64 0
  %46 = ptrtoint i8* %45 to i64
  %47 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %46, i64* %47 monotonic, align 8
  br label %48

48:                                               ; preds = %44, %36
  %49 = phi i32 [ 1, %44 ], [ %43, %36 ]
  store i32 %49, i32* %6, align 8
  br label %51

50:                                               ; preds = %30
  call void @_ZN3WTF6VectorIN5blink24HTMLTreeBuilderSimulator9NamespaceELj1ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"* %0, i32 %27) #9
  br label %51

51:                                               ; preds = %23, %48, %50
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink24HTMLTreeBuilderSimulator9NamespaceELj1ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp ult i32 %1, 2
  br i1 %3, label %4, label %29

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load i32*, i32** %5, align 8
  %7 = icmp eq i32* %6, null
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 1, i64 0
  %9 = bitcast i8* %8 to i32*
  %10 = icmp eq i32* %6, %9
  %11 = or i1 %10, %7
  br i1 %11, label %12, label %16

12:                                               ; preds = %4
  %13 = ptrtoint i8* %8 to i64
  %14 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %13, i64* %14 monotonic, align 8
  %15 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 1, i32* %15, align 8
  br label %58

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = bitcast %"class.WTF::Vector"* %0 to %"class.WTF::VectorBuffer"*
  %20 = ptrtoint i8* %8 to i64
  %21 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %20, i64* %21 monotonic, align 8
  %22 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 1, i32* %22, align 8
  %23 = icmp eq i8* %8, null
  br i1 %23, label %28, label %24, !prof !2

24:                                               ; preds = %16
  %25 = zext i32 %18 to i64
  %26 = bitcast i32* %6 to i8*
  %27 = shl nuw nsw i64 %25, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %8, i8* nonnull align 4 %26, i64 %27, i1 false) #9
  br label %28

28:                                               ; preds = %24, %16
  tail call void @_ZN3WTF12VectorBufferIN5blink24HTMLTreeBuilderSimulator9NamespaceELj1ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS3_(%"class.WTF::VectorBuffer"* %19, i32* nonnull %6) #9
  br label %58

29:                                               ; preds = %2
  %30 = zext i32 %1 to i64
  %31 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink24HTMLTreeBuilderSimulator9NamespaceEEEmm(i64 %30) #9
  %32 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %31, i8* getelementptr inbounds ([90 x i8], [90 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink24HTMLTreeBuilderSimulator9NamespaceEEEPKcv, i64 0, i64 0)) #9
  %33 = lshr i64 %31, 2
  %34 = ptrtoint i8* %32 to i64
  %35 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %36 = load i32*, i32** %35, align 8
  %37 = icmp ne i8* %32, null
  %38 = icmp ne i32* %36, null
  %39 = and i1 %37, %38
  br i1 %39, label %40, label %47, !prof !4

40:                                               ; preds = %29
  %41 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i64
  %44 = bitcast i32* %36 to i8*
  %45 = shl nuw nsw i64 %43, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %32, i8* nonnull align 4 %44, i64 %45, i1 false) #9
  %46 = load i32*, i32** %35, align 8
  br label %47

47:                                               ; preds = %29, %40
  %48 = phi i32* [ %36, %29 ], [ %46, %40 ]
  %49 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 1, i64 0
  %50 = bitcast i8* %49 to i32*
  %51 = icmp eq i32* %48, %50
  br i1 %51, label %54, label %52, !prof !4

52:                                               ; preds = %47
  %53 = bitcast %"class.WTF::Vector"* %0 to %"class.WTF::VectorBuffer"*
  tail call void @_ZN3WTF12VectorBufferIN5blink24HTMLTreeBuilderSimulator9NamespaceELj1ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS3_(%"class.WTF::VectorBuffer"* %53, i32* %48) #9
  br label %54

54:                                               ; preds = %47, %52
  %55 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %34, i64* %55 monotonic, align 8
  %56 = trunc i64 %33 to i32
  %57 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %56, i32* %57, align 8
  br label %58

58:                                               ; preds = %28, %54, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink24HTMLTreeBuilderSimulator9NamespaceEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 536346624
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #9
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 536346624) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.8, i64 0, i64 0), i8* %11, i8* %12) #9
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.9, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #9
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %20 = shl i64 %0, 2
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #9
  ret i64 %21
}

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(4) i32* @_ZN3WTF6VectorIN5blink24HTMLTreeBuilderSimulator9NamespaceELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #9
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #9
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i8* %14, i8* %15) #9
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.5, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #9
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #9
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #9
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load i32*, i32** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds i32, i32* %24, i64 %25
  ret i32* %26
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink24HTMLTreeBuilderSimulator9NamespaceELj1ENS_18PartitionAllocatorEE14AppendSlowCaseIRS3_EEvOT_(%"class.WTF::Vector"*, i32* dereferenceable(4)) local_unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load i32*, i32** %6, align 8
  %8 = icmp ugt i32* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds i32, i32* %7, i64 %10
  %12 = icmp ugt i32* %11, %1
  br i1 %12, label %15, label %13

13:                                               ; preds = %9, %2
  tail call void @_ZN3WTF6VectorIN5blink24HTMLTreeBuilderSimulator9NamespaceELj1ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector"* %0, i32 %5) #9
  %14 = load i32*, i32** %6, align 8
  br label %22

15:                                               ; preds = %9
  %16 = ptrtoint i32* %1 to i64
  %17 = ptrtoint i32* %7 to i64
  %18 = sub i64 %16, %17
  %19 = ashr exact i64 %18, 2
  tail call void @_ZN3WTF6VectorIN5blink24HTMLTreeBuilderSimulator9NamespaceELj1ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector"* %0, i32 %5) #9
  %20 = load i32*, i32** %6, align 8
  %21 = getelementptr inbounds i32, i32* %20, i64 %19
  br label %22

22:                                               ; preds = %13, %15
  %23 = phi i32* [ %14, %13 ], [ %20, %15 ]
  %24 = phi i32* [ %1, %13 ], [ %21, %15 ]
  %25 = load i32, i32* %3, align 4
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds i32, i32* %23, i64 %26
  %28 = load i32, i32* %24, align 4
  store i32 %28, i32* %27, align 4
  %29 = load i32, i32* %3, align 4
  %30 = add i32 %29, 1
  store i32 %30, i32* %3, align 4
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink24HTMLTreeBuilderSimulator12TemplateTypeELj1ENS_18PartitionAllocatorEE14AppendSlowCaseIRS3_EEvOT_(%"class.WTF::Vector.0"*, i32* dereferenceable(4)) local_unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load i32*, i32** %6, align 8
  %8 = icmp ugt i32* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds i32, i32* %7, i64 %10
  %12 = icmp ugt i32* %11, %1
  br i1 %12, label %15, label %13

13:                                               ; preds = %9, %2
  tail call void @_ZN3WTF6VectorIN5blink24HTMLTreeBuilderSimulator12TemplateTypeELj1ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.0"* %0, i32 %5) #9
  %14 = load i32*, i32** %6, align 8
  br label %22

15:                                               ; preds = %9
  %16 = ptrtoint i32* %1 to i64
  %17 = ptrtoint i32* %7 to i64
  %18 = sub i64 %16, %17
  %19 = ashr exact i64 %18, 2
  tail call void @_ZN3WTF6VectorIN5blink24HTMLTreeBuilderSimulator12TemplateTypeELj1ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.0"* %0, i32 %5) #9
  %20 = load i32*, i32** %6, align 8
  %21 = getelementptr inbounds i32, i32* %20, i64 %19
  br label %22

22:                                               ; preds = %13, %15
  %23 = phi i32* [ %14, %13 ], [ %20, %15 ]
  %24 = phi i32* [ %1, %13 ], [ %21, %15 ]
  %25 = load i32, i32* %3, align 4
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds i32, i32* %23, i64 %26
  %28 = load i32, i32* %24, align 4
  store i32 %28, i32* %27, align 4
  %29 = load i32, i32* %3, align 4
  %30 = add i32 %29, 1
  store i32 %30, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink24HTMLTreeBuilderSimulator12TemplateTypeELj1ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.0"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = shl i32 %7, 1
  %9 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #9
  %10 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %10, align 8
  %11 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = icmp ugt i32 %8, %7
  br i1 %12, label %13, label %14

13:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* null, i8** %10, align 8
  br label %23

14:                                               ; preds = %2
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %8) #9
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.6, i64 0, i64 0), i8* %15, i8* %16) #9
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* %18, i8** %10, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.5, i64 0, i64 0), i32 1715, %"class.logging::CheckOpResult"* nonnull %4) #9
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #9
  br label %23

23:                                               ; preds = %13, %14, %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #9
  %24 = icmp ugt i32 %8, 4
  %25 = select i1 %24, i32 %8, i32 4
  %26 = icmp ugt i32 %25, %1
  %27 = select i1 %26, i32 %25, i32 %1
  %28 = load i32, i32* %6, align 8
  %29 = icmp ult i32 %28, %27
  br i1 %29, label %30, label %51, !prof !4

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load i32*, i32** %31, align 8
  %33 = icmp eq i32* %32, null
  br i1 %33, label %34, label %50

34:                                               ; preds = %30
  %35 = icmp ugt i32 %27, 1
  br i1 %35, label %36, label %44

36:                                               ; preds = %34
  %37 = zext i32 %27 to i64
  %38 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink24HTMLTreeBuilderSimulator12TemplateTypeEEEmm(i64 %37) #9
  %39 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %38, i8* getelementptr inbounds ([93 x i8], [93 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink24HTMLTreeBuilderSimulator12TemplateTypeEEEPKcv, i64 0, i64 0)) #9
  %40 = ptrtoint i8* %39 to i64
  %41 = bitcast %"class.WTF::Vector.0"* %0 to i64*
  store atomic i64 %40, i64* %41 monotonic, align 8
  %42 = lshr i64 %38, 2
  %43 = trunc i64 %42 to i32
  br label %48

44:                                               ; preds = %34
  %45 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 1, i64 0
  %46 = ptrtoint i8* %45 to i64
  %47 = bitcast %"class.WTF::Vector.0"* %0 to i64*
  store atomic i64 %46, i64* %47 monotonic, align 8
  br label %48

48:                                               ; preds = %44, %36
  %49 = phi i32 [ 1, %44 ], [ %43, %36 ]
  store i32 %49, i32* %6, align 8
  br label %51

50:                                               ; preds = %30
  call void @_ZN3WTF6VectorIN5blink24HTMLTreeBuilderSimulator12TemplateTypeELj1ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.0"* %0, i32 %27) #9
  br label %51

51:                                               ; preds = %23, %48, %50
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink24HTMLTreeBuilderSimulator12TemplateTypeELj1ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.0"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp ult i32 %1, 2
  br i1 %3, label %4, label %29

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load i32*, i32** %5, align 8
  %7 = icmp eq i32* %6, null
  %8 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 1, i64 0
  %9 = bitcast i8* %8 to i32*
  %10 = icmp eq i32* %6, %9
  %11 = or i1 %10, %7
  br i1 %11, label %12, label %16

12:                                               ; preds = %4
  %13 = ptrtoint i8* %8 to i64
  %14 = bitcast %"class.WTF::Vector.0"* %0 to i64*
  store atomic i64 %13, i64* %14 monotonic, align 8
  %15 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 1, i32* %15, align 8
  br label %58

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = bitcast %"class.WTF::Vector.0"* %0 to %"class.WTF::VectorBuffer.1"*
  %20 = ptrtoint i8* %8 to i64
  %21 = bitcast %"class.WTF::Vector.0"* %0 to i64*
  store atomic i64 %20, i64* %21 monotonic, align 8
  %22 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 1, i32* %22, align 8
  %23 = icmp eq i8* %8, null
  br i1 %23, label %28, label %24, !prof !2

24:                                               ; preds = %16
  %25 = zext i32 %18 to i64
  %26 = bitcast i32* %6 to i8*
  %27 = shl nuw nsw i64 %25, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %8, i8* nonnull align 4 %26, i64 %27, i1 false) #9
  br label %28

28:                                               ; preds = %24, %16
  tail call void @_ZN3WTF12VectorBufferIN5blink24HTMLTreeBuilderSimulator12TemplateTypeELj1ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS3_(%"class.WTF::VectorBuffer.1"* %19, i32* nonnull %6) #9
  br label %58

29:                                               ; preds = %2
  %30 = zext i32 %1 to i64
  %31 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink24HTMLTreeBuilderSimulator12TemplateTypeEEEmm(i64 %30) #9
  %32 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %31, i8* getelementptr inbounds ([93 x i8], [93 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink24HTMLTreeBuilderSimulator12TemplateTypeEEEPKcv, i64 0, i64 0)) #9
  %33 = lshr i64 %31, 2
  %34 = ptrtoint i8* %32 to i64
  %35 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 0
  %36 = load i32*, i32** %35, align 8
  %37 = icmp ne i8* %32, null
  %38 = icmp ne i32* %36, null
  %39 = and i1 %37, %38
  br i1 %39, label %40, label %47, !prof !4

40:                                               ; preds = %29
  %41 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 2
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i64
  %44 = bitcast i32* %36 to i8*
  %45 = shl nuw nsw i64 %43, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %32, i8* nonnull align 4 %44, i64 %45, i1 false) #9
  %46 = load i32*, i32** %35, align 8
  br label %47

47:                                               ; preds = %29, %40
  %48 = phi i32* [ %36, %29 ], [ %46, %40 ]
  %49 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 1, i64 0
  %50 = bitcast i8* %49 to i32*
  %51 = icmp eq i32* %48, %50
  br i1 %51, label %54, label %52, !prof !4

52:                                               ; preds = %47
  %53 = bitcast %"class.WTF::Vector.0"* %0 to %"class.WTF::VectorBuffer.1"*
  tail call void @_ZN3WTF12VectorBufferIN5blink24HTMLTreeBuilderSimulator12TemplateTypeELj1ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS3_(%"class.WTF::VectorBuffer.1"* %53, i32* %48) #9
  br label %54

54:                                               ; preds = %47, %52
  %55 = bitcast %"class.WTF::Vector.0"* %0 to i64*
  store atomic i64 %34, i64* %55 monotonic, align 8
  %56 = trunc i64 %33 to i32
  %57 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %56, i32* %57, align 8
  br label %58

58:                                               ; preds = %28, %54, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink24HTMLTreeBuilderSimulator12TemplateTypeEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 536346624
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #9
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 536346624) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.8, i64 0, i64 0), i8* %11, i8* %12) #9
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.9, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #9
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %20 = shl i64 %0, 2
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #9
  ret i64 %21
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12VectorBufferIN5blink24HTMLTreeBuilderSimulator12TemplateTypeELj1ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS3_(%"class.WTF::VectorBuffer.1"*, i32*) local_unnamed_addr #4 comdat align 2 {
  %3 = bitcast i32* %1 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %3) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(4) i32* @_ZN3WTF6VectorIN5blink24HTMLTreeBuilderSimulator12TemplateTypeELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.0"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #9
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #9
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i8* %14, i8* %15) #9
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.5, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #9
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #9
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #9
  %23 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load i32*, i32** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds i32, i32* %24, i64 %25
  ret i32* %26
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{i8 0, i8 2}
!4 = !{!"branch_weights", i32 2000, i32 1}
