; ModuleID = '../../services/network/proxy_auto_config_library.cc'
source_filename = "../../services/network/proxy_auto_config_library.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.net::IPAddress"*, %"class.net::IPAddress"*, %"class.std::__1::__compressed_pair" }
%"class.net::IPAddress" = type { %"class.net::IPAddressBytes" }
%"class.net::IPAddressBytes" = type { %"struct.std::__1::array", i8 }
%"struct.std::__1::array" = type { [16 x i8] }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.net::IPAddress"* }
%"class.network::(anonymous namespace)::MyIpAddressImpl" = type { %"class.std::__1::set", %"class.std::__1::vector", %"class.std::__1::vector", i32, i8, %"class.net::ClientSocketFactory"*, %"class.std::__1::unique_ptr" }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.1", %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { i64 }
%"class.net::ClientSocketFactory" = type { i32 (...)** }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.net::AddressList"* }
%"class.net::AddressList" = type { %"class.std::__1::vector.11", %"class.std::__1::vector.18" }
%"class.std::__1::vector.11" = type { %"class.std::__1::__vector_base.12" }
%"class.std::__1::__vector_base.12" = type { %"class.net::IPEndPoint"*, %"class.net::IPEndPoint"*, %"class.std::__1::__compressed_pair.13" }
%"class.net::IPEndPoint" = type { %"class.net::IPAddress", i16 }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"class.net::IPEndPoint"* }
%"class.std::__1::vector.18" = type { %"class.std::__1::__vector_base.19" }
%"class.std::__1::__vector_base.19" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"class.std::__1::basic_string"* }
%"class.std::__1::__tree_node" = type { %"class.std::__1::__tree_node_base.base", %"class.net::IPAddress", [6 x i8] }
%"class.std::__1::__tree_node_base.base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8 }>
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.net::NetLogSource" = type { i32, i32, %"class.base::TimeTicks" }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.net::DatagramClientSocket" = type { %"class.net::DatagramSocket", %"class.net::Socket" }
%"class.net::DatagramSocket" = type { i32 (...)** }
%"class.net::Socket" = type { i32 (...)**, %"class.std::__1::vector.18" }
%"class.net::NetLog" = type { i32 (...)**, %"class.base::Lock", i32, i32, %"class.std::__1::vector.37", %"class.std::__1::vector.44" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.std::__1::vector.37" = type { %"class.std::__1::__vector_base.38" }
%"class.std::__1::__vector_base.38" = type { %"class.net::NetLog::ThreadSafeObserver"**, %"class.net::NetLog::ThreadSafeObserver"**, %"class.std::__1::__compressed_pair.39" }
%"class.net::NetLog::ThreadSafeObserver" = type { i32 (...)**, i32, %"class.net::NetLog"* }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { %"class.net::NetLog::ThreadSafeObserver"** }
%"class.std::__1::vector.44" = type { %"class.std::__1::__vector_base.45" }
%"class.std::__1::__vector_base.45" = type { %"class.net::NetLog::ThreadSafeCaptureModeObserver"**, %"class.net::NetLog::ThreadSafeCaptureModeObserver"**, %"class.std::__1::__compressed_pair.46" }
%"class.net::NetLog::ThreadSafeCaptureModeObserver" = type { i32 (...)**, %"class.net::NetLog"* }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"class.net::NetLog::ThreadSafeCaptureModeObserver"** }

$_ZNSt3__16__treeIN3net9IPAddressENS_4lessIS2_EENS_9allocatorIS2_EEE25__emplace_unique_key_argsIS2_JRKS2_EEENS_4pairINS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEEbEERKT_DpOT0_ = comdat any

$_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_ = comdat any

$_ZNSt3__16vectorIN3net9IPAddressENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_ = comdat any

$_ZNSt3__16__treeIN3net9IPAddressENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE = comdat any

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7network14PacMyIpAddressEv(%"class.std::__1::vector"* noalias sret) local_unnamed_addr #0 {
  %2 = alloca %"class.network::(anonymous namespace)::MyIpAddressImpl", align 8
  %3 = bitcast %"class.network::(anonymous namespace)::MyIpAddressImpl"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %3) #8
  %4 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %2, i64 0, i32 3
  %5 = bitcast i32* %4 to i64*
  store i64 -6148914691236517206, i64* %5, align 8
  %6 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %2, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %2, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %8 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %2, i64 0, i32 0, i32 0, i32 0
  %9 = bitcast %"class.std::__1::__tree_node_base"** %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 16, i1 false) #8
  store %"class.std::__1::__tree_end_node"* %7, %"class.std::__1::__tree_end_node"** %8, align 8
  %10 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %2, i64 0, i32 1
  %11 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %2, i64 0, i32 4
  store i8 0, i8* %11, align 4
  %12 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %2, i64 0, i32 5
  %13 = bitcast %"class.std::__1::vector"* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 48, i1 false) #8
  %14 = bitcast %"class.net::ClientSocketFactory"** %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 16, i1 false) #8
  call fastcc void @_ZN7network12_GLOBAL__N_115MyIpAddressImpl3RunENS0_4ModeE(%"class.std::__1::vector"* sret %0, %"class.network::(anonymous namespace)::MyIpAddressImpl"* nonnull %2, i32 0)
  %15 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %2, i64 0, i32 6, i32 0, i32 0, i32 0
  %16 = load %"class.net::AddressList"*, %"class.net::AddressList"** %15, align 8
  store %"class.net::AddressList"* null, %"class.net::AddressList"** %15, align 8
  %17 = icmp eq %"class.net::AddressList"* %16, null
  br i1 %17, label %20, label %18

18:                                               ; preds = %1
  call void @_ZN3net11AddressListD1Ev(%"class.net::AddressList"* nonnull %16) #8
  %19 = bitcast %"class.net::AddressList"* %16 to i8*
  call void @_ZdlPv(i8* %19) #9
  br label %20

20:                                               ; preds = %18, %1
  %21 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %2, i64 0, i32 2, i32 0, i32 0
  %22 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %21, align 8
  %23 = icmp eq %"class.net::IPAddress"* %22, null
  br i1 %23, label %37, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %2, i64 0, i32 2, i32 0, i32 1
  %26 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %25, align 8
  %27 = icmp eq %"class.net::IPAddress"* %26, %22
  br i1 %27, label %34, label %28

28:                                               ; preds = %24, %28
  %29 = phi %"class.net::IPAddress"* [ %30, %28 ], [ %26, %24 ]
  %30 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %29, i64 -1
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* %30) #8
  %31 = icmp eq %"class.net::IPAddress"* %30, %22
  br i1 %31, label %32, label %28

32:                                               ; preds = %28
  %33 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %21, align 8
  br label %34

34:                                               ; preds = %32, %24
  %35 = phi %"class.net::IPAddress"* [ %33, %32 ], [ %22, %24 ]
  store %"class.net::IPAddress"* %22, %"class.net::IPAddress"** %25, align 8
  %36 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %35, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @_ZdlPv(i8* %36) #9
  br label %37

37:                                               ; preds = %20, %34
  %38 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %10, i64 0, i32 0, i32 0
  %39 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %38, align 8
  %40 = icmp eq %"class.net::IPAddress"* %39, null
  br i1 %40, label %54, label %41

41:                                               ; preds = %37
  %42 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %2, i64 0, i32 1, i32 0, i32 1
  %43 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %42, align 8
  %44 = icmp eq %"class.net::IPAddress"* %43, %39
  br i1 %44, label %51, label %45

45:                                               ; preds = %41, %45
  %46 = phi %"class.net::IPAddress"* [ %47, %45 ], [ %43, %41 ]
  %47 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %46, i64 -1
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* %47) #8
  %48 = icmp eq %"class.net::IPAddress"* %47, %39
  br i1 %48, label %49, label %45

49:                                               ; preds = %45
  %50 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %38, align 8
  br label %51

51:                                               ; preds = %49, %41
  %52 = phi %"class.net::IPAddress"* [ %50, %49 ], [ %39, %41 ]
  store %"class.net::IPAddress"* %39, %"class.net::IPAddress"** %42, align 8
  %53 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %52, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @_ZdlPv(i8* %53) #9
  br label %54

54:                                               ; preds = %37, %51
  %55 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %2, i64 0, i32 0, i32 0
  %56 = bitcast %"class.std::__1::__tree_end_node"* %7 to %"class.std::__1::__tree_node"**
  %57 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %56, align 8
  call void @_ZNSt3__16__treeIN3net9IPAddressENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(%"class.std::__1::__tree"* nonnull %55, %"class.std::__1::__tree_node"* %57) #8
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %3) #8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN7network12_GLOBAL__N_115MyIpAddressImpl3RunENS0_4ModeE(%"class.std::__1::vector"* noalias sret, %"class.network::(anonymous namespace)::MyIpAddressImpl"*, i32) unnamed_addr #0 align 2 {
  %4 = alloca %"class.net::IPAddress", align 1
  %5 = alloca %"class.net::IPAddress", align 1
  %6 = alloca %"class.net::IPAddress", align 1
  %7 = alloca %"class.net::IPAddress", align 1
  %8 = alloca %"class.net::AddressList", align 8
  %9 = alloca %"class.std::__1::basic_string", align 8
  %10 = alloca %"class.net::IPAddress", align 1
  %11 = alloca %"class.net::IPAddress", align 1
  %12 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %1, i64 0, i32 3
  store i32 %2, i32* %12, align 8
  %13 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %1, i64 0, i32 4
  %14 = load i8, i8* %13, align 4
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %16, label %83

16:                                               ; preds = %3
  %17 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %10, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 17, i8* nonnull %17) #8
  call void @_ZN3net9IPAddressC1Ehhhh(%"class.net::IPAddress"* nonnull %10, i8 zeroext 8, i8 zeroext 8, i8 zeroext 8, i8 zeroext 8) #8
  call fastcc void @_ZN7network12_GLOBAL__N_115MyIpAddressImpl9TestRouteERKN3net9IPAddressE(%"class.network::(anonymous namespace)::MyIpAddressImpl"* %1, %"class.net::IPAddress"* nonnull dereferenceable(17) %10) #8
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* nonnull %10) #8
  call void @llvm.lifetime.end.p0i8(i64 17, i8* nonnull %17) #8
  %18 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %11, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 17, i8* nonnull %18) #8
  call void @_ZN3net9IPAddressC1Ehhhhhhhhhhhhhhhh(%"class.net::IPAddress"* nonnull %11, i8 zeroext 32, i8 zeroext 1, i8 zeroext 72, i8 zeroext 96, i8 zeroext 72, i8 zeroext 96, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext -120, i8 zeroext -120) #8
  call fastcc void @_ZN7network12_GLOBAL__N_115MyIpAddressImpl9TestRouteERKN3net9IPAddressE(%"class.network::(anonymous namespace)::MyIpAddressImpl"* %1, %"class.net::IPAddress"* nonnull dereferenceable(17) %11) #8
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* nonnull %11) #8
  call void @llvm.lifetime.end.p0i8(i64 17, i8* nonnull %18) #8
  %19 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %1, i64 0, i32 1, i32 0, i32 0
  %20 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %19, align 8
  %21 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %1, i64 0, i32 1, i32 0, i32 1
  %22 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %21, align 8
  %23 = icmp eq %"class.net::IPAddress"* %20, %22
  br i1 %23, label %25, label %24

24:                                               ; preds = %16
  store i8 1, i8* %13, align 4
  br label %81

25:                                               ; preds = %16
  %26 = load i8, i8* %13, align 4
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %28, label %81

28:                                               ; preds = %25
  %29 = bitcast %"class.net::AddressList"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %29) #8
  %30 = getelementptr inbounds %"class.net::AddressList", %"class.net::AddressList"* %8, i64 0, i32 0, i32 0, i32 0
  %31 = getelementptr inbounds %"class.net::AddressList", %"class.net::AddressList"* %8, i64 0, i32 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %29, i8 -86, i64 48, i1 false) #8
  call void @_ZN3net11AddressListC1Ev(%"class.net::AddressList"* nonnull %8) #8
  %32 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %1, i64 0, i32 6, i32 0, i32 0, i32 0
  %33 = load %"class.net::AddressList"*, %"class.net::AddressList"** %32, align 8
  %34 = icmp eq %"class.net::AddressList"* %33, null
  br i1 %34, label %40, label %35

35:                                               ; preds = %28
  %36 = call dereferenceable(48) %"class.net::AddressList"* @_ZN3net11AddressListaSERKS0_(%"class.net::AddressList"* nonnull %8, %"class.net::AddressList"* nonnull dereferenceable(48) %33) #8
  %37 = load %"class.net::IPEndPoint"*, %"class.net::IPEndPoint"** %30, align 8
  %38 = load %"class.net::IPEndPoint"*, %"class.net::IPEndPoint"** %31, align 8
  %39 = icmp eq %"class.net::IPEndPoint"* %37, %38
  br i1 %39, label %69, label %55

40:                                               ; preds = %28
  %41 = bitcast %"class.std::__1::basic_string"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %41) #8
  call void @_ZN3net11GetHostNameEv(%"class.std::__1::basic_string"* nonnull sret %9) #8
  %42 = call i32 @_ZN3net22SystemHostResolverCallERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_13AddressFamilyEiPNS_11AddressListEPi(%"class.std::__1::basic_string"* nonnull dereferenceable(24) %9, i32 0, i32 0, %"class.net::AddressList"* nonnull %8, i32* null) #8
  %43 = bitcast %"class.std::__1::basic_string"* %9 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %44 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %43, i64 0, i32 1, i32 0
  %45 = load i8, i8* %44, align 1
  %46 = icmp slt i8 %45, 0
  br i1 %46, label %47, label %50

47:                                               ; preds = %40
  %48 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %49 = load i8*, i8** %48, align 8
  call void @_ZdlPv(i8* %49) #9
  br label %50

50:                                               ; preds = %47, %40
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %41) #8
  %51 = icmp eq i32 %42, 0
  br i1 %51, label %52, label %69

52:                                               ; preds = %50
  %53 = load %"class.net::IPEndPoint"*, %"class.net::IPEndPoint"** %30, align 8
  %54 = load %"class.net::IPEndPoint"*, %"class.net::IPEndPoint"** %31, align 8
  br label %55

55:                                               ; preds = %52, %35
  %56 = phi %"class.net::IPEndPoint"* [ %54, %52 ], [ %38, %35 ]
  %57 = phi %"class.net::IPEndPoint"* [ %53, %52 ], [ %37, %35 ]
  %58 = icmp eq %"class.net::IPEndPoint"* %57, %56
  br i1 %58, label %59, label %64

59:                                               ; preds = %64, %55
  %60 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %19, align 8
  %61 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %21, align 8
  %62 = icmp eq %"class.net::IPAddress"* %60, %61
  br i1 %62, label %69, label %63

63:                                               ; preds = %59
  store i8 1, i8* %13, align 4
  br label %69

64:                                               ; preds = %55, %64
  %65 = phi %"class.net::IPEndPoint"* [ %67, %64 ], [ %57, %55 ]
  %66 = getelementptr inbounds %"class.net::IPEndPoint", %"class.net::IPEndPoint"* %65, i64 0, i32 0
  call fastcc void @_ZN7network12_GLOBAL__N_115MyIpAddressImpl3AddERKN3net9IPAddressE(%"class.network::(anonymous namespace)::MyIpAddressImpl"* %1, %"class.net::IPAddress"* dereferenceable(17) %66) #8
  %67 = getelementptr inbounds %"class.net::IPEndPoint", %"class.net::IPEndPoint"* %65, i64 1
  %68 = icmp eq %"class.net::IPEndPoint"* %67, %56
  br i1 %68, label %59, label %64

69:                                               ; preds = %35, %50, %59, %63
  call void @_ZN3net11AddressListD1Ev(%"class.net::AddressList"* nonnull %8) #8
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %29) #8
  %70 = load i8, i8* %13, align 4
  %71 = icmp eq i8 %70, 0
  br i1 %71, label %72, label %81

72:                                               ; preds = %69
  %73 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %4, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 17, i8* nonnull %73) #8
  call void @_ZN3net9IPAddressC1Ehhhh(%"class.net::IPAddress"* nonnull %4, i8 zeroext 10, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0) #8
  call fastcc void @_ZN7network12_GLOBAL__N_115MyIpAddressImpl9TestRouteERKN3net9IPAddressE(%"class.network::(anonymous namespace)::MyIpAddressImpl"* %1, %"class.net::IPAddress"* nonnull dereferenceable(17) %4) #8
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 17, i8* nonnull %73) #8
  %74 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %5, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 17, i8* nonnull %74) #8
  call void @_ZN3net9IPAddressC1Ehhhh(%"class.net::IPAddress"* nonnull %5, i8 zeroext -84, i8 zeroext 16, i8 zeroext 0, i8 zeroext 0) #8
  call fastcc void @_ZN7network12_GLOBAL__N_115MyIpAddressImpl9TestRouteERKN3net9IPAddressE(%"class.network::(anonymous namespace)::MyIpAddressImpl"* %1, %"class.net::IPAddress"* nonnull dereferenceable(17) %5) #8
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 17, i8* nonnull %74) #8
  %75 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 17, i8* nonnull %75) #8
  call void @_ZN3net9IPAddressC1Ehhhh(%"class.net::IPAddress"* nonnull %6, i8 zeroext -64, i8 zeroext -88, i8 zeroext 0, i8 zeroext 0) #8
  call fastcc void @_ZN7network12_GLOBAL__N_115MyIpAddressImpl9TestRouteERKN3net9IPAddressE(%"class.network::(anonymous namespace)::MyIpAddressImpl"* %1, %"class.net::IPAddress"* nonnull dereferenceable(17) %6) #8
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* nonnull %6) #8
  call void @llvm.lifetime.end.p0i8(i64 17, i8* nonnull %75) #8
  %76 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 17, i8* nonnull %76) #8
  call void @_ZN3net9IPAddressC1Ehhhhhhhhhhhhhhhh(%"class.net::IPAddress"* nonnull %7, i8 zeroext -4, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0) #8
  call fastcc void @_ZN7network12_GLOBAL__N_115MyIpAddressImpl9TestRouteERKN3net9IPAddressE(%"class.network::(anonymous namespace)::MyIpAddressImpl"* %1, %"class.net::IPAddress"* nonnull dereferenceable(17) %7) #8
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* nonnull %7) #8
  call void @llvm.lifetime.end.p0i8(i64 17, i8* nonnull %76) #8
  %77 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %19, align 8
  %78 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %21, align 8
  %79 = icmp eq %"class.net::IPAddress"* %77, %78
  br i1 %79, label %81, label %80

80:                                               ; preds = %72
  store i8 1, i8* %13, align 4
  br label %81

81:                                               ; preds = %80, %72, %69, %25, %24
  %82 = load i32, i32* %12, align 8
  br label %83

83:                                               ; preds = %81, %3
  %84 = phi i32 [ %82, %81 ], [ %2, %3 ]
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %104

86:                                               ; preds = %83
  %87 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %1, i64 0, i32 1
  %88 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %87, i64 0, i32 0, i32 0
  %89 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %88, align 8, !noalias !2
  %90 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %1, i64 0, i32 1, i32 0, i32 1
  %91 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %90, align 8, !noalias !2
  %92 = icmp eq %"class.net::IPAddress"* %89, %91
  br i1 %92, label %94, label %93

93:                                               ; preds = %86
  call fastcc void @_ZN7network12_GLOBAL__N_115MyIpAddressImpl27GetSingleResultFavoringIPv4ERKNSt3__16vectorIN3net9IPAddressENS2_9allocatorIS5_EEEE(%"class.std::__1::vector"* sret %0, %"class.std::__1::vector"* dereferenceable(24) %87) #8
  br label %148

94:                                               ; preds = %86
  %95 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %1, i64 0, i32 2
  %96 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %95, i64 0, i32 0, i32 0
  %97 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %96, align 8, !noalias !2
  %98 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %1, i64 0, i32 2, i32 0, i32 1
  %99 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %98, align 8, !noalias !2
  %100 = icmp eq %"class.net::IPAddress"* %97, %99
  br i1 %100, label %102, label %101

101:                                              ; preds = %94
  call fastcc void @_ZN7network12_GLOBAL__N_115MyIpAddressImpl27GetSingleResultFavoringIPv4ERKNSt3__16vectorIN3net9IPAddressENS2_9allocatorIS5_EEEE(%"class.std::__1::vector"* sret %0, %"class.std::__1::vector"* dereferenceable(24) %95) #8
  br label %148

102:                                              ; preds = %94
  %103 = bitcast %"class.std::__1::vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %103, i8 0, i64 24, i1 false) #8, !alias.scope !2
  br label %148

104:                                              ; preds = %83
  %105 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %1, i64 0, i32 1, i32 0, i32 0
  %106 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %105, align 8, !noalias !5
  %107 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %1, i64 0, i32 1, i32 0, i32 1
  %108 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %107, align 8, !noalias !5
  %109 = icmp eq %"class.net::IPAddress"* %106, %108
  br i1 %109, label %138, label %110

110:                                              ; preds = %104
  %111 = ptrtoint %"class.net::IPAddress"* %106 to i64
  %112 = ptrtoint %"class.net::IPAddress"* %108 to i64
  %113 = bitcast %"class.std::__1::vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %113, i8 0, i64 24, i1 false) #8, !alias.scope !5
  %114 = sub i64 %112, %111
  %115 = sdiv exact i64 %114, 17
  %116 = icmp eq i64 %114, 0
  br i1 %116, label %148, label %117

117:                                              ; preds = %110
  %118 = icmp ugt i64 %115, 1085102592571150095
  br i1 %118, label %119, label %121

119:                                              ; preds = %117
  %120 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %120) #10
  unreachable

121:                                              ; preds = %117
  %122 = call i8* @_Znwm(i64 %114) #9
  %123 = bitcast i8* %122 to %"class.net::IPAddress"*
  %124 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %125 = bitcast %"class.net::IPAddress"** %124 to i8**
  store i8* %122, i8** %125, align 8, !alias.scope !5
  %126 = bitcast %"class.std::__1::vector"* %0 to i8**
  store i8* %122, i8** %126, align 8, !alias.scope !5
  %127 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %123, i64 %115
  %128 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  store %"class.net::IPAddress"* %127, %"class.net::IPAddress"** %128, align 8, !alias.scope !5
  br label %129

129:                                              ; preds = %129, %121
  %130 = phi %"class.net::IPAddress"* [ %133, %129 ], [ %123, %121 ]
  %131 = phi %"class.net::IPAddress"* [ %132, %129 ], [ %106, %121 ]
  call void @_ZN3net9IPAddressC1ERKS0_(%"class.net::IPAddress"* %130, %"class.net::IPAddress"* dereferenceable(17) %131) #8
  %132 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %131, i64 1
  %133 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %130, i64 1
  %134 = icmp eq %"class.net::IPAddress"* %132, %108
  br i1 %134, label %135, label %129

135:                                              ; preds = %129
  %136 = bitcast %"class.net::IPAddress"** %124 to i64*
  %137 = ptrtoint %"class.net::IPAddress"* %133 to i64
  store i64 %137, i64* %136, align 8, !alias.scope !5
  br label %148

138:                                              ; preds = %104
  %139 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %1, i64 0, i32 2
  %140 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %139, i64 0, i32 0, i32 0
  %141 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %140, align 8, !noalias !5
  %142 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %1, i64 0, i32 2, i32 0, i32 1
  %143 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %142, align 8, !noalias !5
  %144 = icmp eq %"class.net::IPAddress"* %141, %143
  br i1 %144, label %146, label %145

145:                                              ; preds = %138
  call fastcc void @_ZN7network12_GLOBAL__N_115MyIpAddressImpl27GetSingleResultFavoringIPv4ERKNSt3__16vectorIN3net9IPAddressENS2_9allocatorIS5_EEEE(%"class.std::__1::vector"* sret %0, %"class.std::__1::vector"* dereferenceable(24) %139) #8
  br label %148

146:                                              ; preds = %138
  %147 = bitcast %"class.std::__1::vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %147, i8 0, i64 24, i1 false) #8, !alias.scope !5
  br label %148

148:                                              ; preds = %146, %145, %135, %110, %102, %101, %93
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7network16PacMyIpAddressExEv(%"class.std::__1::vector"* noalias sret) local_unnamed_addr #0 {
  %2 = alloca %"class.network::(anonymous namespace)::MyIpAddressImpl", align 8
  %3 = bitcast %"class.network::(anonymous namespace)::MyIpAddressImpl"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %3) #8
  %4 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %2, i64 0, i32 3
  %5 = bitcast i32* %4 to i64*
  store i64 -6148914691236517206, i64* %5, align 8
  %6 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %2, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %2, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %8 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %2, i64 0, i32 0, i32 0, i32 0
  %9 = bitcast %"class.std::__1::__tree_node_base"** %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 16, i1 false) #8
  store %"class.std::__1::__tree_end_node"* %7, %"class.std::__1::__tree_end_node"** %8, align 8
  %10 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %2, i64 0, i32 1
  %11 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %2, i64 0, i32 4
  store i8 0, i8* %11, align 4
  %12 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %2, i64 0, i32 5
  %13 = bitcast %"class.std::__1::vector"* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 48, i1 false) #8
  %14 = bitcast %"class.net::ClientSocketFactory"** %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 16, i1 false) #8
  call fastcc void @_ZN7network12_GLOBAL__N_115MyIpAddressImpl3RunENS0_4ModeE(%"class.std::__1::vector"* sret %0, %"class.network::(anonymous namespace)::MyIpAddressImpl"* nonnull %2, i32 1)
  %15 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %2, i64 0, i32 6, i32 0, i32 0, i32 0
  %16 = load %"class.net::AddressList"*, %"class.net::AddressList"** %15, align 8
  store %"class.net::AddressList"* null, %"class.net::AddressList"** %15, align 8
  %17 = icmp eq %"class.net::AddressList"* %16, null
  br i1 %17, label %20, label %18

18:                                               ; preds = %1
  call void @_ZN3net11AddressListD1Ev(%"class.net::AddressList"* nonnull %16) #8
  %19 = bitcast %"class.net::AddressList"* %16 to i8*
  call void @_ZdlPv(i8* %19) #9
  br label %20

20:                                               ; preds = %18, %1
  %21 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %2, i64 0, i32 2, i32 0, i32 0
  %22 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %21, align 8
  %23 = icmp eq %"class.net::IPAddress"* %22, null
  br i1 %23, label %37, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %2, i64 0, i32 2, i32 0, i32 1
  %26 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %25, align 8
  %27 = icmp eq %"class.net::IPAddress"* %26, %22
  br i1 %27, label %34, label %28

28:                                               ; preds = %24, %28
  %29 = phi %"class.net::IPAddress"* [ %30, %28 ], [ %26, %24 ]
  %30 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %29, i64 -1
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* %30) #8
  %31 = icmp eq %"class.net::IPAddress"* %30, %22
  br i1 %31, label %32, label %28

32:                                               ; preds = %28
  %33 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %21, align 8
  br label %34

34:                                               ; preds = %32, %24
  %35 = phi %"class.net::IPAddress"* [ %33, %32 ], [ %22, %24 ]
  store %"class.net::IPAddress"* %22, %"class.net::IPAddress"** %25, align 8
  %36 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %35, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @_ZdlPv(i8* %36) #9
  br label %37

37:                                               ; preds = %20, %34
  %38 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %10, i64 0, i32 0, i32 0
  %39 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %38, align 8
  %40 = icmp eq %"class.net::IPAddress"* %39, null
  br i1 %40, label %54, label %41

41:                                               ; preds = %37
  %42 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %2, i64 0, i32 1, i32 0, i32 1
  %43 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %42, align 8
  %44 = icmp eq %"class.net::IPAddress"* %43, %39
  br i1 %44, label %51, label %45

45:                                               ; preds = %41, %45
  %46 = phi %"class.net::IPAddress"* [ %47, %45 ], [ %43, %41 ]
  %47 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %46, i64 -1
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* %47) #8
  %48 = icmp eq %"class.net::IPAddress"* %47, %39
  br i1 %48, label %49, label %45

49:                                               ; preds = %45
  %50 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %38, align 8
  br label %51

51:                                               ; preds = %49, %41
  %52 = phi %"class.net::IPAddress"* [ %50, %49 ], [ %39, %41 ]
  store %"class.net::IPAddress"* %39, %"class.net::IPAddress"** %42, align 8
  %53 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %52, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @_ZdlPv(i8* %53) #9
  br label %54

54:                                               ; preds = %37, %51
  %55 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %2, i64 0, i32 0, i32 0
  %56 = bitcast %"class.std::__1::__tree_end_node"* %7 to %"class.std::__1::__tree_node"**
  %57 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %56, align 8
  call void @_ZNSt3__16__treeIN3net9IPAddressENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(%"class.std::__1::__tree"* nonnull %55, %"class.std::__1::__tree_node"* %57) #8
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %3) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7network21PacMyIpAddressForTestEPN3net19ClientSocketFactoryERKNS0_11AddressListE(%"class.std::__1::vector"* noalias sret, %"class.net::ClientSocketFactory"*, %"class.net::AddressList"* dereferenceable(48)) local_unnamed_addr #0 {
  %4 = alloca %"class.network::(anonymous namespace)::MyIpAddressImpl", align 8
  %5 = bitcast %"class.network::(anonymous namespace)::MyIpAddressImpl"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %4, i64 0, i32 3
  %7 = bitcast i32* %6 to i64*
  store i64 -6148914691236517206, i64* %7, align 8
  %8 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %4, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %4, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %10 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %4, i64 0, i32 0, i32 0, i32 0
  %11 = bitcast %"class.std::__1::__tree_node_base"** %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 16, i1 false) #8
  store %"class.std::__1::__tree_end_node"* %9, %"class.std::__1::__tree_end_node"** %10, align 8
  %12 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %4, i64 0, i32 1
  %13 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %4, i64 0, i32 4
  store i8 0, i8* %13, align 4
  %14 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %4, i64 0, i32 5
  %15 = bitcast %"class.std::__1::vector"* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 48, i1 false) #8
  %16 = getelementptr inbounds %"class.net::ClientSocketFactory"*, %"class.net::ClientSocketFactory"** %14, i64 1
  %17 = bitcast %"class.net::ClientSocketFactory"** %16 to i64*
  store i64 0, i64* %17, align 8
  store %"class.net::ClientSocketFactory"* %1, %"class.net::ClientSocketFactory"** %14, align 8
  %18 = call i8* @_Znwm(i64 48) #9
  %19 = bitcast i8* %18 to %"class.net::AddressList"*
  call void @_ZN3net11AddressListC1ERKS0_(%"class.net::AddressList"* nonnull %19, %"class.net::AddressList"* dereferenceable(48) %2) #8
  %20 = ptrtoint i8* %18 to i64
  %21 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %4, i64 0, i32 6
  %22 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %21, i64 0, i32 0, i32 0, i32 0
  %23 = load %"class.net::AddressList"*, %"class.net::AddressList"** %22, align 8
  %24 = bitcast %"class.std::__1::unique_ptr"* %21 to i64*
  store i64 %20, i64* %24, align 8
  %25 = icmp eq %"class.net::AddressList"* %23, null
  br i1 %25, label %28, label %26

26:                                               ; preds = %3
  call void @_ZN3net11AddressListD1Ev(%"class.net::AddressList"* nonnull %23) #8
  %27 = bitcast %"class.net::AddressList"* %23 to i8*
  call void @_ZdlPv(i8* %27) #9
  br label %28

28:                                               ; preds = %3, %26
  call fastcc void @_ZN7network12_GLOBAL__N_115MyIpAddressImpl3RunENS0_4ModeE(%"class.std::__1::vector"* sret %0, %"class.network::(anonymous namespace)::MyIpAddressImpl"* nonnull %4, i32 0)
  %29 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %4, i64 0, i32 6, i32 0, i32 0, i32 0
  %30 = load %"class.net::AddressList"*, %"class.net::AddressList"** %29, align 8
  store %"class.net::AddressList"* null, %"class.net::AddressList"** %29, align 8
  %31 = icmp eq %"class.net::AddressList"* %30, null
  br i1 %31, label %34, label %32

32:                                               ; preds = %28
  call void @_ZN3net11AddressListD1Ev(%"class.net::AddressList"* nonnull %30) #8
  %33 = bitcast %"class.net::AddressList"* %30 to i8*
  call void @_ZdlPv(i8* %33) #9
  br label %34

34:                                               ; preds = %32, %28
  %35 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %4, i64 0, i32 2, i32 0, i32 0
  %36 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %35, align 8
  %37 = icmp eq %"class.net::IPAddress"* %36, null
  br i1 %37, label %51, label %38

38:                                               ; preds = %34
  %39 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %4, i64 0, i32 2, i32 0, i32 1
  %40 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %39, align 8
  %41 = icmp eq %"class.net::IPAddress"* %40, %36
  br i1 %41, label %48, label %42

42:                                               ; preds = %38, %42
  %43 = phi %"class.net::IPAddress"* [ %44, %42 ], [ %40, %38 ]
  %44 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %43, i64 -1
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* %44) #8
  %45 = icmp eq %"class.net::IPAddress"* %44, %36
  br i1 %45, label %46, label %42

46:                                               ; preds = %42
  %47 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %35, align 8
  br label %48

48:                                               ; preds = %46, %38
  %49 = phi %"class.net::IPAddress"* [ %47, %46 ], [ %36, %38 ]
  store %"class.net::IPAddress"* %36, %"class.net::IPAddress"** %39, align 8
  %50 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %49, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @_ZdlPv(i8* %50) #9
  br label %51

51:                                               ; preds = %34, %48
  %52 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %12, i64 0, i32 0, i32 0
  %53 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %52, align 8
  %54 = icmp eq %"class.net::IPAddress"* %53, null
  br i1 %54, label %68, label %55

55:                                               ; preds = %51
  %56 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %4, i64 0, i32 1, i32 0, i32 1
  %57 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %56, align 8
  %58 = icmp eq %"class.net::IPAddress"* %57, %53
  br i1 %58, label %65, label %59

59:                                               ; preds = %55, %59
  %60 = phi %"class.net::IPAddress"* [ %61, %59 ], [ %57, %55 ]
  %61 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %60, i64 -1
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* %61) #8
  %62 = icmp eq %"class.net::IPAddress"* %61, %53
  br i1 %62, label %63, label %59

63:                                               ; preds = %59
  %64 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %52, align 8
  br label %65

65:                                               ; preds = %63, %55
  %66 = phi %"class.net::IPAddress"* [ %64, %63 ], [ %53, %55 ]
  store %"class.net::IPAddress"* %53, %"class.net::IPAddress"** %56, align 8
  %67 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %66, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @_ZdlPv(i8* %67) #9
  br label %68

68:                                               ; preds = %51, %65
  %69 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %4, i64 0, i32 0, i32 0
  %70 = bitcast %"class.std::__1::__tree_end_node"* %9 to %"class.std::__1::__tree_node"**
  %71 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %70, align 8
  call void @_ZNSt3__16__treeIN3net9IPAddressENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(%"class.std::__1::__tree"* nonnull %69, %"class.std::__1::__tree_node"* %71) #8
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %5) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7network23PacMyIpAddressExForTestEPN3net19ClientSocketFactoryERKNS0_11AddressListE(%"class.std::__1::vector"* noalias sret, %"class.net::ClientSocketFactory"*, %"class.net::AddressList"* dereferenceable(48)) local_unnamed_addr #0 {
  %4 = alloca %"class.network::(anonymous namespace)::MyIpAddressImpl", align 8
  %5 = bitcast %"class.network::(anonymous namespace)::MyIpAddressImpl"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %4, i64 0, i32 3
  %7 = bitcast i32* %6 to i64*
  store i64 -6148914691236517206, i64* %7, align 8
  %8 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %4, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %4, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %10 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %4, i64 0, i32 0, i32 0, i32 0
  %11 = bitcast %"class.std::__1::__tree_node_base"** %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 16, i1 false) #8
  store %"class.std::__1::__tree_end_node"* %9, %"class.std::__1::__tree_end_node"** %10, align 8
  %12 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %4, i64 0, i32 1
  %13 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %4, i64 0, i32 4
  store i8 0, i8* %13, align 4
  %14 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %4, i64 0, i32 5
  %15 = bitcast %"class.std::__1::vector"* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 48, i1 false) #8
  %16 = getelementptr inbounds %"class.net::ClientSocketFactory"*, %"class.net::ClientSocketFactory"** %14, i64 1
  %17 = bitcast %"class.net::ClientSocketFactory"** %16 to i64*
  store i64 0, i64* %17, align 8
  store %"class.net::ClientSocketFactory"* %1, %"class.net::ClientSocketFactory"** %14, align 8
  %18 = call i8* @_Znwm(i64 48) #9
  %19 = bitcast i8* %18 to %"class.net::AddressList"*
  call void @_ZN3net11AddressListC1ERKS0_(%"class.net::AddressList"* nonnull %19, %"class.net::AddressList"* dereferenceable(48) %2) #8
  %20 = ptrtoint i8* %18 to i64
  %21 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %4, i64 0, i32 6
  %22 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %21, i64 0, i32 0, i32 0, i32 0
  %23 = load %"class.net::AddressList"*, %"class.net::AddressList"** %22, align 8
  %24 = bitcast %"class.std::__1::unique_ptr"* %21 to i64*
  store i64 %20, i64* %24, align 8
  %25 = icmp eq %"class.net::AddressList"* %23, null
  br i1 %25, label %28, label %26

26:                                               ; preds = %3
  call void @_ZN3net11AddressListD1Ev(%"class.net::AddressList"* nonnull %23) #8
  %27 = bitcast %"class.net::AddressList"* %23 to i8*
  call void @_ZdlPv(i8* %27) #9
  br label %28

28:                                               ; preds = %3, %26
  call fastcc void @_ZN7network12_GLOBAL__N_115MyIpAddressImpl3RunENS0_4ModeE(%"class.std::__1::vector"* sret %0, %"class.network::(anonymous namespace)::MyIpAddressImpl"* nonnull %4, i32 1)
  %29 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %4, i64 0, i32 6, i32 0, i32 0, i32 0
  %30 = load %"class.net::AddressList"*, %"class.net::AddressList"** %29, align 8
  store %"class.net::AddressList"* null, %"class.net::AddressList"** %29, align 8
  %31 = icmp eq %"class.net::AddressList"* %30, null
  br i1 %31, label %34, label %32

32:                                               ; preds = %28
  call void @_ZN3net11AddressListD1Ev(%"class.net::AddressList"* nonnull %30) #8
  %33 = bitcast %"class.net::AddressList"* %30 to i8*
  call void @_ZdlPv(i8* %33) #9
  br label %34

34:                                               ; preds = %32, %28
  %35 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %4, i64 0, i32 2, i32 0, i32 0
  %36 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %35, align 8
  %37 = icmp eq %"class.net::IPAddress"* %36, null
  br i1 %37, label %51, label %38

38:                                               ; preds = %34
  %39 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %4, i64 0, i32 2, i32 0, i32 1
  %40 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %39, align 8
  %41 = icmp eq %"class.net::IPAddress"* %40, %36
  br i1 %41, label %48, label %42

42:                                               ; preds = %38, %42
  %43 = phi %"class.net::IPAddress"* [ %44, %42 ], [ %40, %38 ]
  %44 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %43, i64 -1
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* %44) #8
  %45 = icmp eq %"class.net::IPAddress"* %44, %36
  br i1 %45, label %46, label %42

46:                                               ; preds = %42
  %47 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %35, align 8
  br label %48

48:                                               ; preds = %46, %38
  %49 = phi %"class.net::IPAddress"* [ %47, %46 ], [ %36, %38 ]
  store %"class.net::IPAddress"* %36, %"class.net::IPAddress"** %39, align 8
  %50 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %49, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @_ZdlPv(i8* %50) #9
  br label %51

51:                                               ; preds = %34, %48
  %52 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %12, i64 0, i32 0, i32 0
  %53 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %52, align 8
  %54 = icmp eq %"class.net::IPAddress"* %53, null
  br i1 %54, label %68, label %55

55:                                               ; preds = %51
  %56 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %4, i64 0, i32 1, i32 0, i32 1
  %57 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %56, align 8
  %58 = icmp eq %"class.net::IPAddress"* %57, %53
  br i1 %58, label %65, label %59

59:                                               ; preds = %55, %59
  %60 = phi %"class.net::IPAddress"* [ %61, %59 ], [ %57, %55 ]
  %61 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %60, i64 -1
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* %61) #8
  %62 = icmp eq %"class.net::IPAddress"* %61, %53
  br i1 %62, label %63, label %59

63:                                               ; preds = %59
  %64 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %52, align 8
  br label %65

65:                                               ; preds = %63, %55
  %66 = phi %"class.net::IPAddress"* [ %64, %63 ], [ %53, %55 ]
  store %"class.net::IPAddress"* %53, %"class.net::IPAddress"** %56, align 8
  %67 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %66, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @_ZdlPv(i8* %67) #9
  br label %68

68:                                               ; preds = %51, %65
  %69 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %4, i64 0, i32 0, i32 0
  %70 = bitcast %"class.std::__1::__tree_end_node"* %9 to %"class.std::__1::__tree_node"**
  %71 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %70, align 8
  call void @_ZNSt3__16__treeIN3net9IPAddressENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(%"class.std::__1::__tree"* nonnull %69, %"class.std::__1::__tree_node"* %71) #8
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %5) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN7network12_GLOBAL__N_115MyIpAddressImpl9TestRouteERKN3net9IPAddressE(%"class.network::(anonymous namespace)::MyIpAddressImpl"*, %"class.net::IPAddress"* dereferenceable(17)) unnamed_addr #0 align 2 {
  %3 = alloca %"struct.net::NetLogSource", align 8
  %4 = alloca %"class.net::IPEndPoint", align 2
  %5 = alloca %"class.net::IPEndPoint", align 2
  %6 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %0, i64 0, i32 4
  %7 = load i8, i8* %6, align 4, !range !8
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %49

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %0, i64 0, i32 5
  %11 = load %"class.net::ClientSocketFactory"*, %"class.net::ClientSocketFactory"** %10, align 8
  %12 = icmp eq %"class.net::ClientSocketFactory"* %11, null
  br i1 %12, label %13, label %15

13:                                               ; preds = %9
  %14 = tail call %"class.net::ClientSocketFactory"* @_ZN3net19ClientSocketFactory17GetDefaultFactoryEv() #8
  br label %15

15:                                               ; preds = %9, %13
  %16 = phi %"class.net::ClientSocketFactory"* [ %14, %13 ], [ %11, %9 ]
  %17 = bitcast %"struct.net::NetLogSource"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %17) #8
  call void @_ZN3net12NetLogSourceC1Ev(%"struct.net::NetLogSource"* nonnull %3) #8
  %18 = bitcast %"class.net::ClientSocketFactory"* %16 to %"class.net::DatagramClientSocket"* (%"class.net::ClientSocketFactory"*, i32, %"class.net::NetLog"*, %"struct.net::NetLogSource"*)***
  %19 = load %"class.net::DatagramClientSocket"* (%"class.net::ClientSocketFactory"*, i32, %"class.net::NetLog"*, %"struct.net::NetLogSource"*)**, %"class.net::DatagramClientSocket"* (%"class.net::ClientSocketFactory"*, i32, %"class.net::NetLog"*, %"struct.net::NetLogSource"*)*** %18, align 8
  %20 = getelementptr inbounds %"class.net::DatagramClientSocket"* (%"class.net::ClientSocketFactory"*, i32, %"class.net::NetLog"*, %"struct.net::NetLogSource"*)*, %"class.net::DatagramClientSocket"* (%"class.net::ClientSocketFactory"*, i32, %"class.net::NetLog"*, %"struct.net::NetLogSource"*)** %19, i64 2
  %21 = load %"class.net::DatagramClientSocket"* (%"class.net::ClientSocketFactory"*, i32, %"class.net::NetLog"*, %"struct.net::NetLogSource"*)*, %"class.net::DatagramClientSocket"* (%"class.net::ClientSocketFactory"*, i32, %"class.net::NetLog"*, %"struct.net::NetLogSource"*)** %20, align 8
  %22 = call %"class.net::DatagramClientSocket"* %21(%"class.net::ClientSocketFactory"* %16, i32 1, %"class.net::NetLog"* null, %"struct.net::NetLogSource"* nonnull dereferenceable(16) %3) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %17) #8
  %23 = getelementptr inbounds %"class.net::IPEndPoint", %"class.net::IPEndPoint"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %23) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 2 %23, i8 -86, i64 20, i1 false)
  call void @_ZN3net10IPEndPointC1ERKNS_9IPAddressEt(%"class.net::IPEndPoint"* nonnull %4, %"class.net::IPAddress"* dereferenceable(17) %1, i16 zeroext 80) #8
  %24 = bitcast %"class.net::DatagramClientSocket"* %22 to i32 (%"class.net::DatagramClientSocket"*, %"class.net::IPEndPoint"*)***
  %25 = load i32 (%"class.net::DatagramClientSocket"*, %"class.net::IPEndPoint"*)**, i32 (%"class.net::DatagramClientSocket"*, %"class.net::IPEndPoint"*)*** %24, align 8
  %26 = getelementptr inbounds i32 (%"class.net::DatagramClientSocket"*, %"class.net::IPEndPoint"*)*, i32 (%"class.net::DatagramClientSocket"*, %"class.net::IPEndPoint"*)** %25, i64 9
  %27 = load i32 (%"class.net::DatagramClientSocket"*, %"class.net::IPEndPoint"*)*, i32 (%"class.net::DatagramClientSocket"*, %"class.net::IPEndPoint"*)** %26, align 8
  %28 = call i32 %27(%"class.net::DatagramClientSocket"* %22, %"class.net::IPEndPoint"* nonnull dereferenceable(20) %4) #8
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %42

30:                                               ; preds = %15
  %31 = getelementptr inbounds %"class.net::IPEndPoint", %"class.net::IPEndPoint"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %31) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 2 %31, i8 -86, i64 20, i1 false)
  call void @_ZN3net10IPEndPointC1Ev(%"class.net::IPEndPoint"* nonnull %5) #8
  %32 = getelementptr inbounds %"class.net::DatagramClientSocket", %"class.net::DatagramClientSocket"* %22, i64 0, i32 0
  %33 = bitcast %"class.net::DatagramClientSocket"* %22 to i32 (%"class.net::DatagramSocket"*, %"class.net::IPEndPoint"*)***
  %34 = load i32 (%"class.net::DatagramSocket"*, %"class.net::IPEndPoint"*)**, i32 (%"class.net::DatagramSocket"*, %"class.net::IPEndPoint"*)*** %33, align 8
  %35 = getelementptr inbounds i32 (%"class.net::DatagramSocket"*, %"class.net::IPEndPoint"*)*, i32 (%"class.net::DatagramSocket"*, %"class.net::IPEndPoint"*)** %34, i64 4
  %36 = load i32 (%"class.net::DatagramSocket"*, %"class.net::IPEndPoint"*)*, i32 (%"class.net::DatagramSocket"*, %"class.net::IPEndPoint"*)** %35, align 8
  %37 = call i32 %36(%"class.net::DatagramSocket"* %32, %"class.net::IPEndPoint"* nonnull %5) #8
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %41

39:                                               ; preds = %30
  %40 = getelementptr inbounds %"class.net::IPEndPoint", %"class.net::IPEndPoint"* %5, i64 0, i32 0
  call fastcc void @_ZN7network12_GLOBAL__N_115MyIpAddressImpl3AddERKN3net9IPAddressE(%"class.network::(anonymous namespace)::MyIpAddressImpl"* %0, %"class.net::IPAddress"* nonnull dereferenceable(17) %40)
  br label %41

41:                                               ; preds = %30, %39
  call void @_ZN3net10IPEndPointD1Ev(%"class.net::IPEndPoint"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %31) #8
  br label %42

42:                                               ; preds = %15, %41
  call void @_ZN3net10IPEndPointD1Ev(%"class.net::IPEndPoint"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %23) #8
  %43 = icmp eq %"class.net::DatagramClientSocket"* %22, null
  br i1 %43, label %49, label %44

44:                                               ; preds = %42
  %45 = bitcast %"class.net::DatagramClientSocket"* %22 to void (%"class.net::DatagramClientSocket"*)***
  %46 = load void (%"class.net::DatagramClientSocket"*)**, void (%"class.net::DatagramClientSocket"*)*** %45, align 8
  %47 = getelementptr inbounds void (%"class.net::DatagramClientSocket"*)*, void (%"class.net::DatagramClientSocket"*)** %46, i64 1
  %48 = load void (%"class.net::DatagramClientSocket"*)*, void (%"class.net::DatagramClientSocket"*)** %47, align 8
  call void %48(%"class.net::DatagramClientSocket"* nonnull %22) #8
  br label %49

49:                                               ; preds = %44, %42, %2
  ret void
}

declare void @_ZN3net9IPAddressC1Ehhhh(%"class.net::IPAddress"*, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"*) unnamed_addr #3

declare void @_ZN3net9IPAddressC1Ehhhhhhhhhhhhhhhh(%"class.net::IPAddress"*, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext) unnamed_addr #2

declare %"class.net::ClientSocketFactory"* @_ZN3net19ClientSocketFactory17GetDefaultFactoryEv() local_unnamed_addr #2

declare void @_ZN3net12NetLogSourceC1Ev(%"struct.net::NetLogSource"*) unnamed_addr #2

declare void @_ZN3net10IPEndPointC1ERKNS_9IPAddressEt(%"class.net::IPEndPoint"*, %"class.net::IPAddress"* dereferenceable(17), i16 zeroext) unnamed_addr #2

declare void @_ZN3net10IPEndPointC1Ev(%"class.net::IPEndPoint"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN7network12_GLOBAL__N_115MyIpAddressImpl3AddERKN3net9IPAddressE(%"class.network::(anonymous namespace)::MyIpAddressImpl"*, %"class.net::IPAddress"* dereferenceable(17)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %0, i64 0, i32 4
  %4 = load i8, i8* %3, align 4, !range !8
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %47

6:                                                ; preds = %2
  %7 = tail call zeroext i1 @_ZNK3net9IPAddress10IsLoopbackEv(%"class.net::IPAddress"* %1) #8
  br i1 %7, label %47, label %8

8:                                                ; preds = %6
  %9 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %0, i64 0, i32 0, i32 0
  %10 = tail call { %"class.std::__1::__tree_end_node"*, i8 } @_ZNSt3__16__treeIN3net9IPAddressENS_4lessIS2_EENS_9allocatorIS2_EEE25__emplace_unique_key_argsIS2_JRKS2_EEENS_4pairINS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEEbEERKT_DpOT0_(%"class.std::__1::__tree"* %9, %"class.net::IPAddress"* dereferenceable(17) %1, %"class.net::IPAddress"* dereferenceable(17) %1) #8
  %11 = extractvalue { %"class.std::__1::__tree_end_node"*, i8 } %10, 1
  %12 = and i8 %11, 1
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %47, label %14

14:                                               ; preds = %8
  %15 = tail call zeroext i1 @_ZNK3net9IPAddress11IsLinkLocalEv(%"class.net::IPAddress"* %1) #8
  br i1 %15, label %16, label %28

16:                                               ; preds = %14
  %17 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %0, i64 0, i32 2, i32 0, i32 1
  %18 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %17, align 8
  %19 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %20 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %19, align 8
  %21 = icmp eq %"class.net::IPAddress"* %18, %20
  br i1 %21, label %26, label %22

22:                                               ; preds = %16
  tail call void @_ZN3net9IPAddressC1ERKS0_(%"class.net::IPAddress"* %18, %"class.net::IPAddress"* dereferenceable(17) %1) #8
  %23 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %18, i64 1
  %24 = ptrtoint %"class.net::IPAddress"* %23 to i64
  %25 = bitcast %"class.net::IPAddress"** %17 to i64*
  store i64 %24, i64* %25, align 8
  br label %47

26:                                               ; preds = %16
  %27 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %0, i64 0, i32 2
  tail call void @_ZNSt3__16vectorIN3net9IPAddressENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(%"class.std::__1::vector"* %27, %"class.net::IPAddress"* dereferenceable(17) %1) #8
  br label %47

28:                                               ; preds = %14
  %29 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %0, i64 0, i32 3
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %35

32:                                               ; preds = %28
  %33 = tail call zeroext i1 @_ZNK3net9IPAddress6IsIPv4Ev(%"class.net::IPAddress"* %1) #8
  br i1 %33, label %34, label %35

34:                                               ; preds = %32
  store i8 1, i8* %3, align 4
  br label %35

35:                                               ; preds = %34, %32, %28
  %36 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %0, i64 0, i32 1, i32 0, i32 1
  %37 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %36, align 8
  %38 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %39 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %38, align 8
  %40 = icmp eq %"class.net::IPAddress"* %37, %39
  br i1 %40, label %45, label %41

41:                                               ; preds = %35
  tail call void @_ZN3net9IPAddressC1ERKS0_(%"class.net::IPAddress"* %37, %"class.net::IPAddress"* dereferenceable(17) %1) #8
  %42 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %37, i64 1
  %43 = ptrtoint %"class.net::IPAddress"* %42 to i64
  %44 = bitcast %"class.net::IPAddress"** %36 to i64*
  store i64 %43, i64* %44, align 8
  br label %47

45:                                               ; preds = %35
  %46 = getelementptr inbounds %"class.network::(anonymous namespace)::MyIpAddressImpl", %"class.network::(anonymous namespace)::MyIpAddressImpl"* %0, i64 0, i32 1
  tail call void @_ZNSt3__16vectorIN3net9IPAddressENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(%"class.std::__1::vector"* %46, %"class.net::IPAddress"* dereferenceable(17) %1) #8
  br label %47

47:                                               ; preds = %45, %41, %26, %22, %2, %8, %6
  ret void
}

; Function Attrs: nounwind
declare void @_ZN3net10IPEndPointD1Ev(%"class.net::IPEndPoint"*) unnamed_addr #3

declare zeroext i1 @_ZNK3net9IPAddress10IsLoopbackEv(%"class.net::IPAddress"*) local_unnamed_addr #2

declare zeroext i1 @_ZNK3net9IPAddress11IsLinkLocalEv(%"class.net::IPAddress"*) local_unnamed_addr #2

declare zeroext i1 @_ZNK3net9IPAddress6IsIPv4Ev(%"class.net::IPAddress"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.std::__1::__tree_end_node"*, i8 } @_ZNSt3__16__treeIN3net9IPAddressENS_4lessIS2_EENS_9allocatorIS2_EEE25__emplace_unique_key_argsIS2_JRKS2_EEENS_4pairINS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEEbEERKT_DpOT0_(%"class.std::__1::__tree"*, %"class.net::IPAddress"* dereferenceable(17), %"class.net::IPAddress"* dereferenceable(17)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.std::__1::__tree", %"class.std::__1::__tree"* %0, i64 0, i32 1, i32 0, i32 0
  %5 = bitcast %"class.std::__1::__tree_end_node"* %4 to %"class.std::__1::__tree_node"**
  %6 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %5, align 8
  %7 = icmp eq %"class.std::__1::__tree_node"* %6, null
  br i1 %7, label %35, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.std::__1::__tree", %"class.std::__1::__tree"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  br label %10

10:                                               ; preds = %31, %8
  %11 = phi %"class.std::__1::__tree_node"* [ %34, %31 ], [ %6, %8 ]
  %12 = phi %"class.std::__1::__tree_node_base"** [ %33, %31 ], [ %9, %8 ]
  %13 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %11, i64 0, i32 1
  %14 = tail call zeroext i1 @_ZNK3net9IPAddressltERKS0_(%"class.net::IPAddress"* %1, %"class.net::IPAddress"* dereferenceable(17) %13) #8
  br i1 %14, label %15, label %21

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %11, i64 0, i32 0, i32 0, i32 0
  %17 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %16, align 8
  %18 = icmp eq %"class.std::__1::__tree_node_base"* %17, null
  br i1 %18, label %19, label %31

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %11, i64 0, i32 0, i32 0
  br label %37

21:                                               ; preds = %10
  %22 = tail call zeroext i1 @_ZNK3net9IPAddressltERKS0_(%"class.net::IPAddress"* %13, %"class.net::IPAddress"* dereferenceable(17) %1) #8
  br i1 %22, label %23, label %29

23:                                               ; preds = %21
  %24 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %11, i64 0, i32 0, i32 1
  %25 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %24, align 8
  %26 = icmp eq %"class.std::__1::__tree_node_base"* %25, null
  br i1 %26, label %27, label %31

27:                                               ; preds = %23
  %28 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %11, i64 0, i32 0, i32 0
  br label %37

29:                                               ; preds = %21
  %30 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %11, i64 0, i32 0, i32 0
  br label %37

31:                                               ; preds = %23, %15
  %32 = phi %"class.std::__1::__tree_node_base"* [ %17, %15 ], [ %25, %23 ]
  %33 = phi %"class.std::__1::__tree_node_base"** [ %16, %15 ], [ %24, %23 ]
  %34 = bitcast %"class.std::__1::__tree_node_base"* %32 to %"class.std::__1::__tree_node"*
  br label %10

35:                                               ; preds = %3
  %36 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %4, i64 0, i32 0
  br label %37

37:                                               ; preds = %19, %27, %29, %35
  %38 = phi %"class.std::__1::__tree_end_node"* [ %4, %35 ], [ %20, %19 ], [ %28, %27 ], [ %30, %29 ]
  %39 = phi %"class.std::__1::__tree_node_base"** [ %36, %35 ], [ %16, %19 ], [ %24, %27 ], [ %12, %29 ]
  %40 = bitcast %"class.std::__1::__tree_node_base"** %39 to %"class.std::__1::__tree_node"**
  %41 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %40, align 8
  %42 = icmp eq %"class.std::__1::__tree_node"* %41, null
  br i1 %42, label %43, label %68

43:                                               ; preds = %37
  %44 = tail call i8* @_Znwm(i64 48) #9, !noalias !9
  %45 = getelementptr inbounds i8, i8* %44, i64 25
  %46 = bitcast i8* %45 to %"class.net::IPAddress"*
  tail call void @_ZN3net9IPAddressC1ERKS0_(%"class.net::IPAddress"* %46, %"class.net::IPAddress"* dereferenceable(17) %2) #8, !noalias !9
  %47 = bitcast i8* %44 to %"class.std::__1::__tree_node"*
  %48 = bitcast i8* %44 to %"class.std::__1::__tree_node_base"*
  %49 = getelementptr inbounds i8, i8* %44, i64 16
  %50 = bitcast i8* %49 to %"class.std::__1::__tree_end_node"**
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %44, i8 0, i64 16, i1 false) #8
  store %"class.std::__1::__tree_end_node"* %38, %"class.std::__1::__tree_end_node"** %50, align 8
  %51 = bitcast %"class.std::__1::__tree_node_base"** %39 to i8**
  store i8* %44, i8** %51, align 8
  %52 = getelementptr inbounds %"class.std::__1::__tree", %"class.std::__1::__tree"* %0, i64 0, i32 0
  %53 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %52, align 8
  %54 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %53, i64 0, i32 0
  %55 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %54, align 8
  %56 = icmp eq %"class.std::__1::__tree_node_base"* %55, null
  br i1 %56, label %61, label %57

57:                                               ; preds = %43
  %58 = ptrtoint %"class.std::__1::__tree_node_base"* %55 to i64
  %59 = bitcast %"class.std::__1::__tree"* %0 to i64*
  store i64 %58, i64* %59, align 8
  %60 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %39, align 8
  br label %61

61:                                               ; preds = %57, %43
  %62 = phi %"class.std::__1::__tree_node_base"* [ %48, %43 ], [ %60, %57 ]
  %63 = getelementptr inbounds %"class.std::__1::__tree", %"class.std::__1::__tree"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %64 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %63, align 8
  tail call void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* %64, %"class.std::__1::__tree_node_base"* %62) #8
  %65 = getelementptr inbounds %"class.std::__1::__tree", %"class.std::__1::__tree"* %0, i64 0, i32 2, i32 0, i32 0
  %66 = load i64, i64* %65, align 8
  %67 = add i64 %66, 1
  store i64 %67, i64* %65, align 8
  br label %68

68:                                               ; preds = %61, %37
  %69 = phi i8 [ 1, %61 ], [ 0, %37 ]
  %70 = phi %"class.std::__1::__tree_node"* [ %47, %61 ], [ %41, %37 ]
  %71 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %70, i64 0, i32 0, i32 0
  %72 = insertvalue { %"class.std::__1::__tree_end_node"*, i8 } undef, %"class.std::__1::__tree_end_node"* %71, 0
  %73 = insertvalue { %"class.std::__1::__tree_end_node"*, i8 } %72, i8 %69, 1
  ret { %"class.std::__1::__tree_end_node"*, i8 } %73
}

declare zeroext i1 @_ZNK3net9IPAddressltERKS0_(%"class.net::IPAddress"*, %"class.net::IPAddress"* dereferenceable(17)) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

declare void @_ZN3net9IPAddressC1ERKS0_(%"class.net::IPAddress"*, %"class.net::IPAddress"* dereferenceable(17)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"*) local_unnamed_addr #0 comdat {
  %3 = icmp eq %"class.std::__1::__tree_node_base"* %1, %0
  %4 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 3
  %5 = zext i1 %3 to i8
  store i8 %5, i8* %4, align 8
  br i1 %3, label %156, label %6

6:                                                ; preds = %2, %149
  %7 = phi %"class.std::__1::__tree_node_base"* [ %20, %149 ], [ %1, %2 ]
  %8 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %9 = bitcast %"class.std::__1::__tree_end_node"** %8 to %"class.std::__1::__tree_node_base"**
  %10 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 3
  %12 = load i8, i8* %11, align 8, !range !8
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %156

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %16 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 0, i32 0
  %18 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %17, align 8
  %19 = icmp eq %"class.std::__1::__tree_node_base"* %18, %10
  %20 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  br i1 %19, label %21, label %87

21:                                               ; preds = %14
  %22 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 1, i32 0
  %23 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %22, align 8
  %24 = icmp eq %"class.std::__1::__tree_node_base"* %23, null
  br i1 %24, label %29, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %23, i64 0, i32 3
  %27 = load i8, i8* %26, align 8, !range !8
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %149, label %29

29:                                               ; preds = %25, %21
  %30 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %31 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %32 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %33 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %32, align 8
  %34 = icmp eq %"class.std::__1::__tree_node_base"* %33, %7
  br i1 %34, label %61, label %35

35:                                               ; preds = %29
  %36 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %37 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 1
  %38 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %37, align 8
  %39 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0, i32 0
  %40 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %39, align 8
  store %"class.std::__1::__tree_node_base"* %40, %"class.std::__1::__tree_node_base"** %37, align 8
  %41 = icmp eq %"class.std::__1::__tree_node_base"* %40, null
  br i1 %41, label %47, label %42

42:                                               ; preds = %35
  %43 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %44 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %40, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %43, %"class.std::__1::__tree_end_node"** %44, align 8
  %45 = bitcast %"class.std::__1::__tree_end_node"** %30 to i64*
  %46 = load i64, i64* %45, align 8
  br label %47

47:                                               ; preds = %35, %42
  %48 = phi i64 [ %46, %42 ], [ %36, %35 ]
  %49 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %50 = bitcast %"class.std::__1::__tree_end_node"** %49 to i64*
  store i64 %48, i64* %50, align 8
  %51 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %30, align 8
  %52 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 0, i32 0
  %53 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %52, align 8
  %54 = icmp eq %"class.std::__1::__tree_node_base"* %53, %10
  %55 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 1, i32 0
  %56 = select i1 %54, %"class.std::__1::__tree_node_base"** %52, %"class.std::__1::__tree_node_base"** %55
  store %"class.std::__1::__tree_node_base"* %38, %"class.std::__1::__tree_node_base"** %56, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %39, align 8
  %57 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %57, %"class.std::__1::__tree_end_node"** %30, align 8
  %58 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %59 = bitcast %"class.std::__1::__tree_end_node"** %58 to %"class.std::__1::__tree_node_base"**
  %60 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %59, align 8
  br label %61

61:                                               ; preds = %47, %29
  %62 = phi %"class.std::__1::__tree_node_base"* [ %31, %29 ], [ %60, %47 ]
  %63 = phi %"class.std::__1::__tree_node_base"* [ %10, %29 ], [ %38, %47 ]
  %64 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %63, i64 0, i32 3
  store i8 1, i8* %64, align 8
  %65 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 3
  store i8 0, i8* %65, align 8
  %66 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0, i32 0
  %67 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %66, align 8
  %68 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 1
  %69 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %68, align 8
  store %"class.std::__1::__tree_node_base"* %69, %"class.std::__1::__tree_node_base"** %66, align 8
  %70 = icmp eq %"class.std::__1::__tree_node_base"* %69, null
  br i1 %70, label %74, label %71

71:                                               ; preds = %61
  %72 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0
  %73 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %69, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %72, %"class.std::__1::__tree_end_node"** %73, align 8
  br label %74

74:                                               ; preds = %71, %61
  %75 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 2
  %76 = bitcast %"class.std::__1::__tree_end_node"** %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 2
  %79 = bitcast %"class.std::__1::__tree_end_node"** %78 to i64*
  store i64 %77, i64* %79, align 8
  %80 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %75, align 8
  %81 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 0, i32 0
  %82 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %81, align 8
  %83 = icmp eq %"class.std::__1::__tree_node_base"* %82, %62
  %84 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 1, i32 0
  %85 = select i1 %83, %"class.std::__1::__tree_node_base"** %81, %"class.std::__1::__tree_node_base"** %84
  store %"class.std::__1::__tree_node_base"* %67, %"class.std::__1::__tree_node_base"** %85, align 8
  store %"class.std::__1::__tree_node_base"* %62, %"class.std::__1::__tree_node_base"** %68, align 8
  %86 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %86, %"class.std::__1::__tree_end_node"** %75, align 8
  br label %156

87:                                               ; preds = %14
  %88 = icmp eq %"class.std::__1::__tree_node_base"* %18, null
  br i1 %88, label %93, label %89

89:                                               ; preds = %87
  %90 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %18, i64 0, i32 3
  %91 = load i8, i8* %90, align 8, !range !8
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %149, label %93

93:                                               ; preds = %89, %87
  %94 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %95 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %96 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %97 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %96, align 8
  %98 = icmp eq %"class.std::__1::__tree_node_base"* %97, %7
  br i1 %98, label %99, label %123

99:                                               ; preds = %93
  %100 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %101 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %102 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 1
  %103 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %102, align 8
  store %"class.std::__1::__tree_node_base"* %103, %"class.std::__1::__tree_node_base"** %101, align 8
  %104 = icmp eq %"class.std::__1::__tree_node_base"* %103, null
  br i1 %104, label %110, label %105

105:                                              ; preds = %99
  %106 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %107 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %103, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %106, %"class.std::__1::__tree_end_node"** %107, align 8
  %108 = bitcast %"class.std::__1::__tree_end_node"** %94 to i64*
  %109 = load i64, i64* %108, align 8
  br label %110

110:                                              ; preds = %99, %105
  %111 = phi i64 [ %109, %105 ], [ %100, %99 ]
  %112 = bitcast %"class.std::__1::__tree_end_node"** %8 to i64*
  store i64 %111, i64* %112, align 8
  %113 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %94, align 8
  %114 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 0, i32 0
  %115 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %114, align 8
  %116 = icmp eq %"class.std::__1::__tree_node_base"* %115, %10
  %117 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 1, i32 0
  %118 = select i1 %116, %"class.std::__1::__tree_node_base"** %114, %"class.std::__1::__tree_node_base"** %117
  store %"class.std::__1::__tree_node_base"* %7, %"class.std::__1::__tree_node_base"** %118, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %102, align 8
  %119 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %119, %"class.std::__1::__tree_end_node"** %94, align 8
  %120 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %121 = bitcast %"class.std::__1::__tree_end_node"** %120 to %"class.std::__1::__tree_node_base"**
  %122 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %121, align 8
  br label %123

123:                                              ; preds = %93, %110
  %124 = phi %"class.std::__1::__tree_node_base"* [ %122, %110 ], [ %95, %93 ]
  %125 = phi %"class.std::__1::__tree_node_base"* [ %7, %110 ], [ %10, %93 ]
  %126 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %125, i64 0, i32 3
  store i8 1, i8* %126, align 8
  %127 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 3
  store i8 0, i8* %127, align 8
  %128 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 1
  %129 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %128, align 8
  %130 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0, i32 0
  %131 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %130, align 8
  store %"class.std::__1::__tree_node_base"* %131, %"class.std::__1::__tree_node_base"** %128, align 8
  %132 = icmp eq %"class.std::__1::__tree_node_base"* %131, null
  br i1 %132, label %136, label %133

133:                                              ; preds = %123
  %134 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 0
  %135 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %131, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %134, %"class.std::__1::__tree_end_node"** %135, align 8
  br label %136

136:                                              ; preds = %133, %123
  %137 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 2
  %138 = bitcast %"class.std::__1::__tree_end_node"** %137 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 2
  %141 = bitcast %"class.std::__1::__tree_end_node"** %140 to i64*
  store i64 %139, i64* %141, align 8
  %142 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %137, align 8
  %143 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 0, i32 0
  %144 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %143, align 8
  %145 = icmp eq %"class.std::__1::__tree_node_base"* %144, %124
  %146 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 1, i32 0
  %147 = select i1 %145, %"class.std::__1::__tree_node_base"** %143, %"class.std::__1::__tree_node_base"** %146
  store %"class.std::__1::__tree_node_base"* %129, %"class.std::__1::__tree_node_base"** %147, align 8
  store %"class.std::__1::__tree_node_base"* %124, %"class.std::__1::__tree_node_base"** %130, align 8
  %148 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %148, %"class.std::__1::__tree_end_node"** %137, align 8
  br label %156

149:                                              ; preds = %89, %25
  %150 = phi i8* [ %26, %25 ], [ %90, %89 ]
  store i8 1, i8* %11, align 8
  %151 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  %152 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 3
  %153 = bitcast %"class.std::__1::__tree_end_node"* %152 to i8*
  %154 = zext i1 %151 to i8
  store i8 %154, i8* %153, align 8
  store i8 1, i8* %150, align 8
  %155 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  br i1 %155, label %156, label %6

156:                                              ; preds = %6, %149, %2, %136, %74
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3net9IPAddressENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(%"class.std::__1::vector"*, %"class.net::IPAddress"* dereferenceable(17)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.net::IPAddress"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 17
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 1085102592571150095
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #10
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.net::IPAddress"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = sdiv exact i64 %18, 17
  %20 = icmp ult i64 %19, 542551296285575047
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = shl nsw i64 %19, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 1085102592571150095, %14 ]
  %28 = mul i64 %27, 17
  %29 = tail call i8* @_Znwm(i64 %28) #9
  %30 = bitcast i8* %29 to %"class.net::IPAddress"*
  br label %31

31:                                               ; preds = %21, %26
  %32 = phi i64 [ %27, %26 ], [ 0, %21 ]
  %33 = phi %"class.net::IPAddress"* [ %30, %26 ], [ null, %21 ]
  %34 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %33, i64 %9
  %35 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %33, i64 %32
  %36 = ptrtoint %"class.net::IPAddress"* %35 to i64
  tail call void @_ZN3net9IPAddressC1ERKS0_(%"class.net::IPAddress"* %34, %"class.net::IPAddress"* dereferenceable(17) %1) #8
  %37 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %34, i64 1
  %38 = ptrtoint %"class.net::IPAddress"* %37 to i64
  %39 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %40 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %39, align 8
  %41 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %3, align 8
  %42 = icmp eq %"class.net::IPAddress"* %41, %40
  br i1 %42, label %43, label %45

43:                                               ; preds = %31
  %44 = ptrtoint %"class.net::IPAddress"* %34 to i64
  store i64 %44, i64* %6, align 8
  store i64 %38, i64* %4, align 8
  store i64 %36, i64* %16, align 8
  br label %60

45:                                               ; preds = %31, %45
  %46 = phi %"class.net::IPAddress"* [ %48, %45 ], [ %34, %31 ]
  %47 = phi %"class.net::IPAddress"* [ %49, %45 ], [ %41, %31 ]
  %48 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %46, i64 -1
  %49 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %47, i64 -1
  tail call void @_ZN3net9IPAddressC1ERKS0_(%"class.net::IPAddress"* %48, %"class.net::IPAddress"* dereferenceable(17) %49) #8
  %50 = icmp eq %"class.net::IPAddress"* %49, %40
  br i1 %50, label %51, label %45

51:                                               ; preds = %45
  %52 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %39, align 8
  %53 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %3, align 8
  %54 = ptrtoint %"class.net::IPAddress"* %48 to i64
  store i64 %54, i64* %6, align 8
  store i64 %38, i64* %4, align 8
  store i64 %36, i64* %16, align 8
  %55 = icmp eq %"class.net::IPAddress"* %53, %52
  br i1 %55, label %60, label %56

56:                                               ; preds = %51, %56
  %57 = phi %"class.net::IPAddress"* [ %58, %56 ], [ %53, %51 ]
  %58 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %57, i64 -1
  tail call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* %58) #8
  %59 = icmp eq %"class.net::IPAddress"* %58, %52
  br i1 %59, label %60, label %56

60:                                               ; preds = %56, %43, %51
  %61 = phi %"class.net::IPAddress"* [ %40, %43 ], [ %52, %51 ], [ %52, %56 ]
  %62 = icmp eq %"class.net::IPAddress"* %61, null
  br i1 %62, label %65, label %63

63:                                               ; preds = %60
  %64 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %61, i64 0, i32 0, i32 0, i32 0, i64 0
  tail call void @_ZdlPv(i8* %64) #9
  br label %65

65:                                               ; preds = %60, %63
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

declare void @_ZN3net11AddressListC1Ev(%"class.net::AddressList"*) unnamed_addr #2

declare dereferenceable(48) %"class.net::AddressList"* @_ZN3net11AddressListaSERKS0_(%"class.net::AddressList"*, %"class.net::AddressList"* dereferenceable(48)) local_unnamed_addr #2

declare i32 @_ZN3net22SystemHostResolverCallERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_13AddressFamilyEiPNS_11AddressListEPi(%"class.std::__1::basic_string"* dereferenceable(24), i32, i32, %"class.net::AddressList"*, i32*) local_unnamed_addr #2

declare void @_ZN3net11GetHostNameEv(%"class.std::__1::basic_string"* sret) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN3net11AddressListD1Ev(%"class.net::AddressList"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN7network12_GLOBAL__N_115MyIpAddressImpl27GetSingleResultFavoringIPv4ERKNSt3__16vectorIN3net9IPAddressENS2_9allocatorIS5_EEEE(%"class.std::__1::vector"* noalias nocapture sret, %"class.std::__1::vector"* nocapture readonly dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = alloca [1 x %"class.net::IPAddress"], align 1
  %4 = alloca [1 x %"class.net::IPAddress"], align 1
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %6 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %8 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %7, align 8
  %9 = icmp eq %"class.net::IPAddress"* %6, %8
  br i1 %9, label %48, label %10

10:                                               ; preds = %2, %27
  %11 = phi %"class.net::IPAddress"* [ %28, %27 ], [ %6, %2 ]
  %12 = tail call zeroext i1 @_ZNK3net9IPAddress6IsIPv4Ev(%"class.net::IPAddress"* %11) #8
  br i1 %12, label %13, label %27

13:                                               ; preds = %10
  %14 = getelementptr inbounds [1 x %"class.net::IPAddress"], [1 x %"class.net::IPAddress"]* %3, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 17, i8* nonnull %14) #8
  %15 = getelementptr inbounds [1 x %"class.net::IPAddress"], [1 x %"class.net::IPAddress"]* %3, i64 0, i64 0
  call void @_ZN3net9IPAddressC1ERKS0_(%"class.net::IPAddress"* nonnull %15, %"class.net::IPAddress"* dereferenceable(17) %11) #8
  %16 = call i8* @_Znwm(i64 17) #9
  %17 = bitcast i8* %16 to %"class.net::IPAddress"*
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %19 = bitcast %"class.std::__1::vector"* %0 to i8**
  store i8* %16, i8** %19, align 8
  %20 = getelementptr inbounds i8, i8* %16, i64 17
  %21 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %22 = bitcast %"class.net::IPAddress"** %21 to i8**
  store i8* %20, i8** %22, align 8
  call void @_ZN3net9IPAddressC1ERKS0_(%"class.net::IPAddress"* nonnull %17, %"class.net::IPAddress"* nonnull dereferenceable(17) %15) #8
  %23 = getelementptr inbounds i8, i8* %16, i64 17
  %24 = bitcast %"class.net::IPAddress"** %18 to i64*
  %25 = ptrtoint i8* %23 to i64
  store i64 %25, i64* %24, align 8
  %26 = getelementptr inbounds [1 x %"class.net::IPAddress"], [1 x %"class.net::IPAddress"]* %3, i64 0, i64 0
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* nonnull %26) #8
  call void @llvm.lifetime.end.p0i8(i64 17, i8* nonnull %14) #8
  br label %50

27:                                               ; preds = %10
  %28 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %11, i64 1
  %29 = icmp eq %"class.net::IPAddress"* %28, %8
  br i1 %29, label %30, label %10

30:                                               ; preds = %27
  %31 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %5, align 8
  %32 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %7, align 8
  %33 = icmp eq %"class.net::IPAddress"* %31, %32
  br i1 %33, label %48, label %34

34:                                               ; preds = %30
  %35 = getelementptr inbounds [1 x %"class.net::IPAddress"], [1 x %"class.net::IPAddress"]* %4, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 17, i8* nonnull %35) #8
  %36 = getelementptr inbounds [1 x %"class.net::IPAddress"], [1 x %"class.net::IPAddress"]* %4, i64 0, i64 0
  call void @_ZN3net9IPAddressC1ERKS0_(%"class.net::IPAddress"* nonnull %36, %"class.net::IPAddress"* dereferenceable(17) %31) #8
  %37 = call i8* @_Znwm(i64 17) #9
  %38 = bitcast i8* %37 to %"class.net::IPAddress"*
  %39 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %40 = bitcast %"class.std::__1::vector"* %0 to i8**
  store i8* %37, i8** %40, align 8
  %41 = getelementptr inbounds i8, i8* %37, i64 17
  %42 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %43 = bitcast %"class.net::IPAddress"** %42 to i8**
  store i8* %41, i8** %43, align 8
  call void @_ZN3net9IPAddressC1ERKS0_(%"class.net::IPAddress"* nonnull %38, %"class.net::IPAddress"* nonnull dereferenceable(17) %36) #8
  %44 = getelementptr inbounds i8, i8* %37, i64 17
  %45 = bitcast %"class.net::IPAddress"** %39 to i64*
  %46 = ptrtoint i8* %44 to i64
  store i64 %46, i64* %45, align 8
  %47 = getelementptr inbounds [1 x %"class.net::IPAddress"], [1 x %"class.net::IPAddress"]* %4, i64 0, i64 0
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* nonnull %47) #8
  call void @llvm.lifetime.end.p0i8(i64 17, i8* nonnull %35) #8
  br label %50

48:                                               ; preds = %2, %30
  %49 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %49, i8 0, i64 24, i1 false) #8
  br label %50

50:                                               ; preds = %13, %48, %34
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__treeIN3net9IPAddressENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(%"class.std::__1::__tree"*, %"class.std::__1::__tree_node"*) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %"class.std::__1::__tree_node"* %1, null
  br i1 %3, label %12, label %4

4:                                                ; preds = %2
  %5 = bitcast %"class.std::__1::__tree_node"* %1 to %"class.std::__1::__tree_node"**
  %6 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %5, align 8
  tail call void @_ZNSt3__16__treeIN3net9IPAddressENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(%"class.std::__1::__tree"* %0, %"class.std::__1::__tree_node"* %6) #8
  %7 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1, i64 0, i32 0, i32 1
  %8 = bitcast %"class.std::__1::__tree_node_base"** %7 to %"class.std::__1::__tree_node"**
  %9 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %8, align 8
  tail call void @_ZNSt3__16__treeIN3net9IPAddressENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(%"class.std::__1::__tree"* %0, %"class.std::__1::__tree_node"* %9) #8
  %10 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1, i64 0, i32 1
  tail call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* %10) #8
  %11 = bitcast %"class.std::__1::__tree_node"* %1 to i8*
  tail call void @_ZdlPv(i8* %11) #9
  ret void

12:                                               ; preds = %2
  ret void
}

declare void @_ZN3net11AddressListC1ERKS0_(%"class.net::AddressList"*, %"class.net::AddressList"* dereferenceable(48)) unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK7network12_GLOBAL__N_115MyIpAddressImpl23GetResultForMyIpAddressEv: argument 0"}
!4 = distinct !{!4, !"_ZNK7network12_GLOBAL__N_115MyIpAddressImpl23GetResultForMyIpAddressEv"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZNK7network12_GLOBAL__N_115MyIpAddressImpl25GetResultForMyIpAddressExEv: argument 0"}
!7 = distinct !{!7, !"_ZNK7network12_GLOBAL__N_115MyIpAddressImpl25GetResultForMyIpAddressExEv"}
!8 = !{i8 0, i8 2}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZNSt3__16__treeIN3net9IPAddressENS_4lessIS2_EENS_9allocatorIS2_EEE16__construct_nodeIJRKS2_EEENS_10unique_ptrINS_11__tree_nodeIS2_PvEENS_22__tree_node_destructorINS5_ISE_EEEEEEDpOT_: argument 0"}
!11 = distinct !{!11, !"_ZNSt3__16__treeIN3net9IPAddressENS_4lessIS2_EENS_9allocatorIS2_EEE16__construct_nodeIJRKS2_EEENS_10unique_ptrINS_11__tree_nodeIS2_PvEENS_22__tree_node_destructorINS5_ISE_EEEEEEDpOT_"}
