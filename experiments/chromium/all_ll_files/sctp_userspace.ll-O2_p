; ModuleID = '../../third_party/usrsctp/usrsctplib/usrsctplib/netinet/sctp_userspace.c'
source_filename = "../../third_party/usrsctp/usrsctplib/usrsctplib/netinet/sctp_userspace.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%union.pthread_attr_t = type { i64, [48 x i8] }

; Function Attrs: nounwind ssp uwtable
define hidden i32 @sctp_userspace_thread_create(i64*, i8* (i8*)*) local_unnamed_addr #0 {
  %3 = tail call i32 @pthread_create(i64* %0, %union.pthread_attr_t* null, i8* (i8*)* %1, i8* null) #4
  ret i32 %3
}

; Function Attrs: nounwind
declare i32 @pthread_create(i64*, %union.pthread_attr_t*, i8* (i8*)*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @sctp_userspace_set_threadname(i8*) local_unnamed_addr #0 {
  %2 = tail call i32 (i32, ...) @prctl(i32 15, i8* %0) #4
  ret void
}

; Function Attrs: nounwind
declare i32 @prctl(i32, ...) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @sctp_userspace_get_mtu_from_ifn(i32, i32) local_unnamed_addr #2 {
  %3 = icmp eq i32 %1, 123
  %4 = select i1 %3, i32 1280, i32 0
  ret i32 %4
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @timingsafe_bcmp(i8* nocapture readonly, i8* nocapture readonly, i64) local_unnamed_addr #3 {
  %4 = icmp eq i64 %2, 0
  br i1 %4, label %123, label %5

5:                                                ; preds = %3
  %6 = icmp ult i64 %2, 8
  br i1 %6, label %100, label %7

7:                                                ; preds = %5
  %8 = and i64 %2, -8
  %9 = getelementptr i8, i8* %1, i64 %8
  %10 = getelementptr i8, i8* %0, i64 %8
  %11 = sub i64 %2, %8
  %12 = add i64 %8, -8
  %13 = lshr exact i64 %12, 3
  %14 = add nuw nsw i64 %13, 1
  %15 = and i64 %14, 1
  %16 = icmp eq i64 %12, 0
  br i1 %16, label %64, label %17

17:                                               ; preds = %7
  %18 = sub nuw nsw i64 %14, %15
  br label %19

19:                                               ; preds = %19, %17
  %20 = phi i64 [ 0, %17 ], [ %61, %19 ]
  %21 = phi <4 x i32> [ zeroinitializer, %17 ], [ %59, %19 ]
  %22 = phi <4 x i32> [ zeroinitializer, %17 ], [ %60, %19 ]
  %23 = phi i64 [ %18, %17 ], [ %62, %19 ]
  %24 = getelementptr i8, i8* %1, i64 %20
  %25 = getelementptr i8, i8* %0, i64 %20
  %26 = bitcast i8* %25 to <4 x i8>*
  %27 = load <4 x i8>, <4 x i8>* %26, align 1
  %28 = getelementptr i8, i8* %25, i64 4
  %29 = bitcast i8* %28 to <4 x i8>*
  %30 = load <4 x i8>, <4 x i8>* %29, align 1
  %31 = bitcast i8* %24 to <4 x i8>*
  %32 = load <4 x i8>, <4 x i8>* %31, align 1
  %33 = getelementptr i8, i8* %24, i64 4
  %34 = bitcast i8* %33 to <4 x i8>*
  %35 = load <4 x i8>, <4 x i8>* %34, align 1
  %36 = xor <4 x i8> %32, %27
  %37 = xor <4 x i8> %35, %30
  %38 = zext <4 x i8> %36 to <4 x i32>
  %39 = zext <4 x i8> %37 to <4 x i32>
  %40 = or <4 x i32> %21, %38
  %41 = or <4 x i32> %22, %39
  %42 = or i64 %20, 8
  %43 = getelementptr i8, i8* %1, i64 %42
  %44 = getelementptr i8, i8* %0, i64 %42
  %45 = bitcast i8* %44 to <4 x i8>*
  %46 = load <4 x i8>, <4 x i8>* %45, align 1
  %47 = getelementptr i8, i8* %44, i64 4
  %48 = bitcast i8* %47 to <4 x i8>*
  %49 = load <4 x i8>, <4 x i8>* %48, align 1
  %50 = bitcast i8* %43 to <4 x i8>*
  %51 = load <4 x i8>, <4 x i8>* %50, align 1
  %52 = getelementptr i8, i8* %43, i64 4
  %53 = bitcast i8* %52 to <4 x i8>*
  %54 = load <4 x i8>, <4 x i8>* %53, align 1
  %55 = xor <4 x i8> %51, %46
  %56 = xor <4 x i8> %54, %49
  %57 = zext <4 x i8> %55 to <4 x i32>
  %58 = zext <4 x i8> %56 to <4 x i32>
  %59 = or <4 x i32> %40, %57
  %60 = or <4 x i32> %41, %58
  %61 = add i64 %20, 16
  %62 = add i64 %23, -2
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %64, label %19, !llvm.loop !2

64:                                               ; preds = %19, %7
  %65 = phi <4 x i32> [ undef, %7 ], [ %59, %19 ]
  %66 = phi <4 x i32> [ undef, %7 ], [ %60, %19 ]
  %67 = phi i64 [ 0, %7 ], [ %61, %19 ]
  %68 = phi <4 x i32> [ zeroinitializer, %7 ], [ %59, %19 ]
  %69 = phi <4 x i32> [ zeroinitializer, %7 ], [ %60, %19 ]
  %70 = icmp eq i64 %15, 0
  br i1 %70, label %90, label %71

71:                                               ; preds = %64
  %72 = getelementptr i8, i8* %1, i64 %67
  %73 = getelementptr i8, i8* %0, i64 %67
  %74 = getelementptr i8, i8* %72, i64 4
  %75 = bitcast i8* %74 to <4 x i8>*
  %76 = load <4 x i8>, <4 x i8>* %75, align 1
  %77 = getelementptr i8, i8* %73, i64 4
  %78 = bitcast i8* %77 to <4 x i8>*
  %79 = load <4 x i8>, <4 x i8>* %78, align 1
  %80 = xor <4 x i8> %76, %79
  %81 = zext <4 x i8> %80 to <4 x i32>
  %82 = or <4 x i32> %69, %81
  %83 = bitcast i8* %72 to <4 x i8>*
  %84 = load <4 x i8>, <4 x i8>* %83, align 1
  %85 = bitcast i8* %73 to <4 x i8>*
  %86 = load <4 x i8>, <4 x i8>* %85, align 1
  %87 = xor <4 x i8> %84, %86
  %88 = zext <4 x i8> %87 to <4 x i32>
  %89 = or <4 x i32> %68, %88
  br label %90

90:                                               ; preds = %64, %71
  %91 = phi <4 x i32> [ %65, %64 ], [ %89, %71 ]
  %92 = phi <4 x i32> [ %66, %64 ], [ %82, %71 ]
  %93 = or <4 x i32> %92, %91
  %94 = shufflevector <4 x i32> %93, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %95 = or <4 x i32> %93, %94
  %96 = shufflevector <4 x i32> %95, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %97 = or <4 x i32> %95, %96
  %98 = extractelement <4 x i32> %97, i32 0
  %99 = icmp eq i64 %8, %2
  br i1 %99, label %119, label %100

100:                                              ; preds = %90, %5
  %101 = phi i32 [ 0, %5 ], [ %98, %90 ]
  %102 = phi i8* [ %1, %5 ], [ %9, %90 ]
  %103 = phi i8* [ %0, %5 ], [ %10, %90 ]
  %104 = phi i64 [ %2, %5 ], [ %11, %90 ]
  br label %105

105:                                              ; preds = %100, %105
  %106 = phi i32 [ %116, %105 ], [ %101, %100 ]
  %107 = phi i8* [ %112, %105 ], [ %102, %100 ]
  %108 = phi i8* [ %110, %105 ], [ %103, %100 ]
  %109 = phi i64 [ %117, %105 ], [ %104, %100 ]
  %110 = getelementptr inbounds i8, i8* %108, i64 1
  %111 = load i8, i8* %108, align 1
  %112 = getelementptr inbounds i8, i8* %107, i64 1
  %113 = load i8, i8* %107, align 1
  %114 = xor i8 %113, %111
  %115 = zext i8 %114 to i32
  %116 = or i32 %106, %115
  %117 = add i64 %109, -1
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %119, label %105, !llvm.loop !4

119:                                              ; preds = %105, %90
  %120 = phi i32 [ %98, %90 ], [ %116, %105 ]
  %121 = icmp ne i32 %120, 0
  %122 = zext i1 %121 to i32
  br label %123

123:                                              ; preds = %119, %3
  %124 = phi i32 [ 0, %3 ], [ %122, %119 ]
  ret i32 %124
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
