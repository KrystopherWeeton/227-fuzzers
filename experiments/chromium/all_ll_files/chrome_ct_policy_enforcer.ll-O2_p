; ModuleID = '../../components/certificate_transparency/chrome_ct_policy_enforcer.cc'
source_filename = "../../components/certificate_transparency/chrome_ct_policy_enforcer.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.certificate_transparency::ChromeCTPolicyEnforcer" = type { %"class.net::CTPolicyEnforcer", %"class.std::__1::vector", %"class.std::__1::vector.6", %"class.base::Clock"*, %"class.base::Time" }
%"class.net::CTPolicyEnforcer" = type { i32 (...)** }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.1" }
%"struct.std::__1::pair" = type { %"class.std::__1::basic_string", %"class.base::TimeDelta" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::TimeDelta" = type { i64 }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.std::__1::pair"* }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"class.std::__1::basic_string"* }
%"class.base::Clock" = type { i32 (...)** }
%"class.base::Time" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.base::DefaultClock" = type { %"class.base::Clock" }
%"class.net::X509Certificate" = type { %"class.base::RefCountedThreadSafe", %"struct.net::CertPrincipal", %"struct.net::CertPrincipal", %"class.base::Time", %"class.base::Time", %"class.std::__1::basic_string", %"class.std::__1::unique_ptr", %"class.std::__1::vector.17" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.13" }
%"struct.std::__1::__atomic_base.13" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.net::CertPrincipal" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::vector.6", %"class.std::__1::vector.6", %"class.std::__1::vector.6", %"class.std::__1::vector.6" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %struct.crypto_buffer_st* }
%struct.crypto_buffer_st = type opaque
%"class.std::__1::vector.17" = type { %"class.std::__1::__vector_base.18" }
%"class.std::__1::__vector_base.18" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::vector.24" = type { %"class.std::__1::__vector_base.25" }
%"class.std::__1::__vector_base.25" = type { %class.scoped_refptr*, %class.scoped_refptr*, %"class.std::__1::__compressed_pair.27" }
%class.scoped_refptr = type { %"struct.net::ct::SignedCertificateTimestamp"* }
%"struct.net::ct::SignedCertificateTimestamp" = type { %"class.base::RefCountedThreadSafe.26", i32, %"class.std::__1::basic_string", %"class.base::Time", %"class.std::__1::basic_string", %"struct.net::ct::DigitallySigned", i32, %"class.std::__1::basic_string" }
%"class.base::RefCountedThreadSafe.26" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"struct.net::ct::DigitallySigned" = type { i32, i32, %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %class.scoped_refptr* }
%"class.net::NetLogWithSource" = type { %"struct.net::NetLogSource", %"class.net::NetLog"* }
%"struct.net::NetLogSource" = type { i32, i32, %"class.base::TimeTicks" }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase.32" }
%"class.base::time_internal::TimeBase.32" = type { i64 }
%"class.net::NetLog" = type { i32 (...)**, %"class.base::Lock", i32, i32, %"class.std::__1::vector.33", %"class.std::__1::vector.40" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.std::__1::vector.33" = type { %"class.std::__1::__vector_base.34" }
%"class.std::__1::__vector_base.34" = type { %"class.net::NetLog::ThreadSafeObserver"**, %"class.net::NetLog::ThreadSafeObserver"**, %"class.std::__1::__compressed_pair.35" }
%"class.net::NetLog::ThreadSafeObserver" = type { i32 (...)**, i32, %"class.net::NetLog"* }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %"class.net::NetLog::ThreadSafeObserver"** }
%"class.std::__1::vector.40" = type { %"class.std::__1::__vector_base.41" }
%"class.std::__1::__vector_base.41" = type { %"class.net::NetLog::ThreadSafeCaptureModeObserver"**, %"class.net::NetLog::ThreadSafeCaptureModeObserver"**, %"class.std::__1::__compressed_pair.42" }
%"class.net::NetLog::ThreadSafeCaptureModeObserver" = type { i32 (...)**, %"class.net::NetLog"* }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %"class.net::NetLog::ThreadSafeCaptureModeObserver"** }
%"class.base::DictionaryValue" = type { %"class.base::Value" }
%"class.base::Value" = type { %"class.absl::variant" }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantCopyBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveBaseNontrivial" = type { %"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" }
%"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::DestructibleUnionImpl", i64 }
%"union.absl::variant_internal::DestructibleUnionImpl" = type { %"union.absl::variant_internal::DestructibleUnionImpl.59" }
%"union.absl::variant_internal::DestructibleUnionImpl.59" = type { %"union.absl::variant_internal::DestructibleUnionImpl.60" }
%"union.absl::variant_internal::DestructibleUnionImpl.60" = type { %"union.absl::variant_internal::DestructibleUnionImpl.61" }
%"union.absl::variant_internal::DestructibleUnionImpl.61" = type { %"union.absl::variant_internal::DestructibleUnionImpl.62" }
%"union.absl::variant_internal::DestructibleUnionImpl.62" = type { %"class.std::__1::basic_string" }
%"struct.base::Time::Exploded" = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%"struct.std::__1::__less.92" = type { i8 }
%"class.std::__1::vector.50" = type { %"class.std::__1::__vector_base.51" }
%"class.std::__1::__vector_base.51" = type { %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"class.std::__1::__compressed_pair.52" }
%"class.base::BasicStringPiece" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"struct.std::__1::__compressed_pair_elem.53" = type { %"class.base::BasicStringPiece"* }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZNSt3__16__sortIRNS_6__lessIN4base16BasicStringPieceIcNS_11char_traitsIcEEEES6_EEPS6_EEvT0_SA_T_ = comdat any

$_ZNSt3__17__sort3IRNS_6__lessIN4base16BasicStringPieceIcNS_11char_traitsIcEEEES6_EEPS6_EEjT0_SA_SA_T_ = comdat any

$_ZNSt3__17__sort4IRNS_6__lessIN4base16BasicStringPieceIcNS_11char_traitsIcEEEES6_EEPS6_EEjT0_SA_SA_SA_T_ = comdat any

$_ZNSt3__17__sort5IRNS_6__lessIN4base16BasicStringPieceIcNS_11char_traitsIcEEEES6_EEPS6_EEjT0_SA_SA_SA_SA_T_ = comdat any

$_ZNSt3__118__insertion_sort_3IRNS_6__lessIN4base16BasicStringPieceIcNS_11char_traitsIcEEEES6_EEPS6_EEvT0_SA_T_ = comdat any

$_ZNSt3__127__insertion_sort_incompleteIRNS_6__lessIN4base16BasicStringPieceIcNS_11char_traitsIcEEEES6_EEPS6_EEbT0_SA_T_ = comdat any

@_ZTVN24certificate_transparency22ChromeCTPolicyEnforcerE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.certificate_transparency::ChromeCTPolicyEnforcer"*)* @_ZN24certificate_transparency22ChromeCTPolicyEnforcerD2Ev to i8*), i8* bitcast (void (%"class.certificate_transparency::ChromeCTPolicyEnforcer"*)* @_ZN24certificate_transparency22ChromeCTPolicyEnforcerD0Ev to i8*), i8* bitcast (i32 (%"class.certificate_transparency::ChromeCTPolicyEnforcer"*, %"class.net::X509Certificate"*, %"class.std::__1::vector.24"*, %"class.net::NetLogWithSource"*)* @_ZN24certificate_transparency22ChromeCTPolicyEnforcer15CheckComplianceEPN3net15X509CertificateERKNSt3__16vectorI13scoped_refptrINS1_2ct26SignedCertificateTimestampEENS4_9allocatorIS9_EEEERKNS1_16NetLogWithSourceE to i8*)] }, align 8
@.str = private unnamed_addr constant [39 x i8] c"log_id.size() == crypto::kSHA256Length\00", align 1
@.str.1 = private unnamed_addr constant [71 x i8] c"../../components/certificate_transparency/chrome_ct_policy_enforcer.cc\00", align 1
@.str.2 = private unnamed_addr constant [23 x i8] c"../../base/time/time.h\00", align 1
@.str.3 = private unnamed_addr constant [38 x i8] c"!is_inf() || (delta_ == other.delta_)\00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c"certificates\00", align 1
@.str.6 = private unnamed_addr constant [12 x i8] c"certificate\00", align 1
@.str.7 = private unnamed_addr constant [13 x i8] c"build_timely\00", align 1
@.str.8 = private unnamed_addr constant [21 x i8] c"ct_compliance_status\00", align 1
@.str.11 = private unnamed_addr constant [18 x i8] c"COMPLIES_VIA_SCTS\00", align 1
@.str.12 = private unnamed_addr constant [16 x i8] c"NOT_ENOUGH_SCTS\00", align 1
@.str.13 = private unnamed_addr constant [17 x i8] c"NOT_DIVERSE_SCTS\00", align 1
@.str.14 = private unnamed_addr constant [17 x i8] c"BUILD_NOT_TIMELY\00", align 1
@.str.15 = private unnamed_addr constant [8 x i8] c"unknown\00", align 1
@switch.table._ZN24certificate_transparency22ChromeCTPolicyEnforcer15CheckComplianceEPN3net15X509CertificateERKNSt3__16vectorI13scoped_refptrINS1_2ct26SignedCertificateTimestampEENS4_9allocatorIS9_EEEERKNS1_16NetLogWithSourceE = private unnamed_addr constant [6 x i8*] [i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i64 0, i64 0)], align 8

@_ZN24certificate_transparency22ChromeCTPolicyEnforcerC1EN4base4TimeENSt3__16vectorINS3_4pairINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS1_9TimeDeltaEEENS9_ISD_EEEENS4_ISB_NS9_ISB_EEEE = hidden unnamed_addr alias void (%"class.certificate_transparency::ChromeCTPolicyEnforcer"*, i64, %"class.std::__1::vector"*, %"class.std::__1::vector.6"*), void (%"class.certificate_transparency::ChromeCTPolicyEnforcer"*, i64, %"class.std::__1::vector"*, %"class.std::__1::vector.6"*)* @_ZN24certificate_transparency22ChromeCTPolicyEnforcerC2EN4base4TimeENSt3__16vectorINS3_4pairINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS1_9TimeDeltaEEENS9_ISD_EEEENS4_ISB_NS9_ISB_EEEE
@_ZN24certificate_transparency22ChromeCTPolicyEnforcerD1Ev = hidden unnamed_addr alias void (%"class.certificate_transparency::ChromeCTPolicyEnforcer"*), void (%"class.certificate_transparency::ChromeCTPolicyEnforcer"*)* @_ZN24certificate_transparency22ChromeCTPolicyEnforcerD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24certificate_transparency22ChromeCTPolicyEnforcerC2EN4base4TimeENSt3__16vectorINS3_4pairINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS1_9TimeDeltaEEENS9_ISD_EEEENS4_ISB_NS9_ISB_EEEE(%"class.certificate_transparency::ChromeCTPolicyEnforcer"*, i64, %"class.std::__1::vector"* nocapture readonly, %"class.std::__1::vector.6"* nocapture readonly) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.certificate_transparency::ChromeCTPolicyEnforcer", %"class.certificate_transparency::ChromeCTPolicyEnforcer"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN24certificate_transparency22ChromeCTPolicyEnforcerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.certificate_transparency::ChromeCTPolicyEnforcer", %"class.certificate_transparency::ChromeCTPolicyEnforcer"* %0, i64 0, i32 1
  %7 = bitcast %"class.std::__1::vector"* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 24, i1 false) #13
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 1
  %9 = bitcast %"struct.std::__1::pair"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector"* %2 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 5
  %15 = icmp eq i64 %13, 0
  br i1 %15, label %61, label %16

16:                                               ; preds = %4
  %17 = icmp ugt i64 %14, 576460752303423487
  br i1 %17, label %18, label %20

18:                                               ; preds = %16
  %19 = bitcast %"class.std::__1::vector"* %6 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %19) #14
  unreachable

20:                                               ; preds = %16
  %21 = tail call i8* @_Znwm(i64 %13) #15
  %22 = bitcast i8* %21 to %"struct.std::__1::pair"*
  %23 = getelementptr inbounds %"class.certificate_transparency::ChromeCTPolicyEnforcer", %"class.certificate_transparency::ChromeCTPolicyEnforcer"* %0, i64 0, i32 1, i32 0, i32 1
  %24 = bitcast %"struct.std::__1::pair"** %23 to i8**
  store i8* %21, i8** %24, align 8
  %25 = bitcast %"class.std::__1::vector"* %6 to i8**
  store i8* %21, i8** %25, align 8
  %26 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %22, i64 %14
  %27 = getelementptr inbounds %"class.certificate_transparency::ChromeCTPolicyEnforcer", %"class.certificate_transparency::ChromeCTPolicyEnforcer"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  store %"struct.std::__1::pair"* %26, %"struct.std::__1::pair"** %27, align 8
  %28 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0
  %29 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %28, align 8
  %30 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %8, align 8
  %31 = bitcast %"struct.std::__1::pair"** %23 to i64*
  %32 = ptrtoint i8* %21 to i64
  %33 = icmp eq %"struct.std::__1::pair"* %29, %30
  br i1 %33, label %59, label %34

34:                                               ; preds = %20, %50
  %35 = phi %"struct.std::__1::pair"* [ %55, %50 ], [ %22, %20 ]
  %36 = phi %"struct.std::__1::pair"* [ %54, %50 ], [ %29, %20 ]
  %37 = bitcast %"struct.std::__1::pair"* %36 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %38 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %37, i64 0, i32 1, i32 0
  %39 = load i8, i8* %38, align 1
  %40 = icmp slt i8 %39, 0
  br i1 %40, label %44, label %41

41:                                               ; preds = %34
  %42 = bitcast %"struct.std::__1::pair"* %35 to i8*
  %43 = bitcast %"struct.std::__1::pair"* %36 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %42, i8* align 8 %43, i64 24, i1 false) #13
  br label %50

44:                                               ; preds = %34
  %45 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %35, i64 0, i32 0
  %46 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %36, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %36, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %49 = load i64, i64* %48, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %45, i8* %47, i64 %49) #13
  br label %50

50:                                               ; preds = %44, %41
  %51 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %36, i64 0, i32 1, i32 0
  %52 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %35, i64 0, i32 1, i32 0
  %53 = load i64, i64* %51, align 8
  store i64 %53, i64* %52, align 8
  %54 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %36, i64 1
  %55 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %35, i64 1
  %56 = icmp eq %"struct.std::__1::pair"* %54, %30
  br i1 %56, label %57, label %34

57:                                               ; preds = %50
  %58 = ptrtoint %"struct.std::__1::pair"* %55 to i64
  br label %59

59:                                               ; preds = %57, %20
  %60 = phi i64 [ %32, %20 ], [ %58, %57 ]
  store i64 %60, i64* %31, align 8
  br label %61

61:                                               ; preds = %4, %59
  %62 = getelementptr inbounds %"class.certificate_transparency::ChromeCTPolicyEnforcer", %"class.certificate_transparency::ChromeCTPolicyEnforcer"* %0, i64 0, i32 2
  %63 = bitcast %"class.std::__1::vector.6"* %62 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 24, i1 false) #13
  %64 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %3, i64 0, i32 0, i32 1
  %65 = bitcast %"class.std::__1::basic_string"** %64 to i64*
  %66 = load i64, i64* %65, align 8
  %67 = bitcast %"class.std::__1::vector.6"* %3 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = sub i64 %66, %68
  %70 = sdiv exact i64 %69, 24
  %71 = icmp eq i64 %69, 0
  br i1 %71, label %113, label %72

72:                                               ; preds = %61
  %73 = icmp ugt i64 %70, 768614336404564650
  br i1 %73, label %74, label %76

74:                                               ; preds = %72
  %75 = bitcast %"class.std::__1::vector.6"* %62 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %75) #14
  unreachable

76:                                               ; preds = %72
  %77 = tail call i8* @_Znwm(i64 %69) #15
  %78 = bitcast i8* %77 to %"class.std::__1::basic_string"*
  %79 = getelementptr inbounds %"class.certificate_transparency::ChromeCTPolicyEnforcer", %"class.certificate_transparency::ChromeCTPolicyEnforcer"* %0, i64 0, i32 2, i32 0, i32 1
  %80 = bitcast %"class.std::__1::basic_string"** %79 to i8**
  store i8* %77, i8** %80, align 8
  %81 = bitcast %"class.std::__1::vector.6"* %62 to i8**
  store i8* %77, i8** %81, align 8
  %82 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %78, i64 %70
  %83 = getelementptr inbounds %"class.certificate_transparency::ChromeCTPolicyEnforcer", %"class.certificate_transparency::ChromeCTPolicyEnforcer"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  store %"class.std::__1::basic_string"* %82, %"class.std::__1::basic_string"** %83, align 8
  %84 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %3, i64 0, i32 0, i32 0
  %85 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %84, align 8
  %86 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %64, align 8
  %87 = bitcast %"class.std::__1::basic_string"** %79 to i64*
  %88 = ptrtoint i8* %77 to i64
  %89 = icmp eq %"class.std::__1::basic_string"* %85, %86
  br i1 %89, label %111, label %90

90:                                               ; preds = %76, %105
  %91 = phi %"class.std::__1::basic_string"* [ %107, %105 ], [ %78, %76 ]
  %92 = phi %"class.std::__1::basic_string"* [ %106, %105 ], [ %85, %76 ]
  %93 = bitcast %"class.std::__1::basic_string"* %92 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %94 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %93, i64 0, i32 1, i32 0
  %95 = load i8, i8* %94, align 1
  %96 = icmp slt i8 %95, 0
  br i1 %96, label %100, label %97

97:                                               ; preds = %90
  %98 = bitcast %"class.std::__1::basic_string"* %91 to i8*
  %99 = bitcast %"class.std::__1::basic_string"* %92 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %98, i8* align 8 %99, i64 24, i1 false) #13
  br label %105

100:                                              ; preds = %90
  %101 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %92, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %102 = load i8*, i8** %101, align 8
  %103 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %92, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %104 = load i64, i64* %103, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %91, i8* %102, i64 %104) #13
  br label %105

105:                                              ; preds = %100, %97
  %106 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %92, i64 1
  %107 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %91, i64 1
  %108 = icmp eq %"class.std::__1::basic_string"* %106, %86
  br i1 %108, label %109, label %90

109:                                              ; preds = %105
  %110 = ptrtoint %"class.std::__1::basic_string"* %107 to i64
  br label %111

111:                                              ; preds = %109, %76
  %112 = phi i64 [ %88, %76 ], [ %110, %109 ]
  store i64 %112, i64* %87, align 8
  br label %113

113:                                              ; preds = %61, %111
  %114 = getelementptr inbounds %"class.certificate_transparency::ChromeCTPolicyEnforcer", %"class.certificate_transparency::ChromeCTPolicyEnforcer"* %0, i64 0, i32 3
  %115 = tail call %"class.base::DefaultClock"* @_ZN4base12DefaultClock11GetInstanceEv() #13
  %116 = getelementptr inbounds %"class.base::DefaultClock", %"class.base::DefaultClock"* %115, i64 0, i32 0
  store %"class.base::Clock"* %116, %"class.base::Clock"** %114, align 8
  %117 = getelementptr inbounds %"class.certificate_transparency::ChromeCTPolicyEnforcer", %"class.certificate_transparency::ChromeCTPolicyEnforcer"* %0, i64 0, i32 4, i32 0, i32 0
  store i64 %1, i64* %117, align 8
  ret void
}

declare %"class.base::DefaultClock"* @_ZN4base12DefaultClock11GetInstanceEv() local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24certificate_transparency22ChromeCTPolicyEnforcerD2Ev(%"class.certificate_transparency::ChromeCTPolicyEnforcer"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.certificate_transparency::ChromeCTPolicyEnforcer", %"class.certificate_transparency::ChromeCTPolicyEnforcer"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN24certificate_transparency22ChromeCTPolicyEnforcerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.certificate_transparency::ChromeCTPolicyEnforcer", %"class.certificate_transparency::ChromeCTPolicyEnforcer"* %0, i64 0, i32 2
  %4 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %3, i64 0, i32 0, i32 0
  %5 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %4, align 8
  %6 = icmp eq %"class.std::__1::basic_string"* %5, null
  br i1 %6, label %29, label %7

7:                                                ; preds = %1
  %8 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  %9 = getelementptr inbounds %"class.certificate_transparency::ChromeCTPolicyEnforcer", %"class.certificate_transparency::ChromeCTPolicyEnforcer"* %0, i64 0, i32 2, i32 0, i32 1
  %10 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %9, align 8
  %11 = icmp eq %"class.std::__1::basic_string"* %10, %5
  br i1 %11, label %27, label %12

12:                                               ; preds = %7, %22
  %13 = phi %"class.std::__1::basic_string"* [ %14, %22 ], [ %10, %7 ]
  %14 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %13, i64 -1
  %15 = bitcast %"class.std::__1::basic_string"* %14 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %16 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %15, i64 0, i32 1, i32 0
  %17 = load i8, i8* %16, align 1
  %18 = icmp slt i8 %17, 0
  br i1 %18, label %19, label %22

19:                                               ; preds = %12
  %20 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8
  tail call void @_ZdlPv(i8* %21) #15
  br label %22

22:                                               ; preds = %19, %12
  %23 = icmp eq %"class.std::__1::basic_string"* %14, %5
  br i1 %23, label %24, label %12

24:                                               ; preds = %22
  %25 = bitcast %"class.std::__1::vector.6"* %3 to i8**
  %26 = load i8*, i8** %25, align 8
  br label %27

27:                                               ; preds = %24, %7
  %28 = phi i8* [ %26, %24 ], [ %8, %7 ]
  store %"class.std::__1::basic_string"* %5, %"class.std::__1::basic_string"** %9, align 8
  tail call void @_ZdlPv(i8* %28) #15
  br label %29

29:                                               ; preds = %1, %27
  %30 = getelementptr inbounds %"class.certificate_transparency::ChromeCTPolicyEnforcer", %"class.certificate_transparency::ChromeCTPolicyEnforcer"* %0, i64 0, i32 1
  %31 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %30, i64 0, i32 0, i32 0
  %32 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %31, align 8
  %33 = icmp eq %"struct.std::__1::pair"* %32, null
  br i1 %33, label %56, label %34

34:                                               ; preds = %29
  %35 = bitcast %"struct.std::__1::pair"* %32 to i8*
  %36 = getelementptr inbounds %"class.certificate_transparency::ChromeCTPolicyEnforcer", %"class.certificate_transparency::ChromeCTPolicyEnforcer"* %0, i64 0, i32 1, i32 0, i32 1
  %37 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %36, align 8
  %38 = icmp eq %"struct.std::__1::pair"* %37, %32
  br i1 %38, label %54, label %39

39:                                               ; preds = %34, %49
  %40 = phi %"struct.std::__1::pair"* [ %41, %49 ], [ %37, %34 ]
  %41 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %40, i64 -1
  %42 = bitcast %"struct.std::__1::pair"* %41 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %43 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %42, i64 0, i32 1, i32 0
  %44 = load i8, i8* %43, align 1
  %45 = icmp slt i8 %44, 0
  br i1 %45, label %46, label %49

46:                                               ; preds = %39
  %47 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %41, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %48 = load i8*, i8** %47, align 8
  tail call void @_ZdlPv(i8* %48) #15
  br label %49

49:                                               ; preds = %46, %39
  %50 = icmp eq %"struct.std::__1::pair"* %41, %32
  br i1 %50, label %51, label %39

51:                                               ; preds = %49
  %52 = bitcast %"class.std::__1::vector"* %30 to i8**
  %53 = load i8*, i8** %52, align 8
  br label %54

54:                                               ; preds = %51, %34
  %55 = phi i8* [ %53, %51 ], [ %35, %34 ]
  store %"struct.std::__1::pair"* %32, %"struct.std::__1::pair"** %36, align 8
  tail call void @_ZdlPv(i8* %55) #15
  br label %56

56:                                               ; preds = %29, %54
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24certificate_transparency22ChromeCTPolicyEnforcerD0Ev(%"class.certificate_transparency::ChromeCTPolicyEnforcer"*) unnamed_addr #0 align 2 {
  tail call void @_ZN24certificate_transparency22ChromeCTPolicyEnforcerD2Ev(%"class.certificate_transparency::ChromeCTPolicyEnforcer"* %0) #13
  %2 = bitcast %"class.certificate_transparency::ChromeCTPolicyEnforcer"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #15
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN24certificate_transparency22ChromeCTPolicyEnforcer15CheckComplianceEPN3net15X509CertificateERKNSt3__16vectorI13scoped_refptrINS1_2ct26SignedCertificateTimestampEENS4_9allocatorIS9_EEEERKNS1_16NetLogWithSourceE(%"class.certificate_transparency::ChromeCTPolicyEnforcer"* nocapture readonly, %"class.net::X509Certificate"*, %"class.std::__1::vector.24"* nocapture readonly dereferenceable(24), %"class.net::NetLogWithSource"* dereferenceable(24)) unnamed_addr #0 align 2 {
  %5 = alloca %"class.base::DictionaryValue", align 8
  %6 = alloca %"class.base::Value", align 8
  %7 = alloca %"class.base::Value", align 8
  %8 = alloca %"class.base::Value", align 8
  %9 = alloca %"class.base::TimeDelta", align 8
  %10 = bitcast %"class.base::TimeDelta"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #13
  %11 = getelementptr inbounds %"class.certificate_transparency::ChromeCTPolicyEnforcer", %"class.certificate_transparency::ChromeCTPolicyEnforcer"* %0, i64 0, i32 3
  %12 = load %"class.base::Clock"*, %"class.base::Clock"** %11, align 8
  %13 = bitcast %"class.base::Clock"* %12 to i64 (%"class.base::Clock"*)***
  %14 = load i64 (%"class.base::Clock"*)**, i64 (%"class.base::Clock"*)*** %13, align 8
  %15 = getelementptr inbounds i64 (%"class.base::Clock"*)*, i64 (%"class.base::Clock"*)** %14, i64 2
  %16 = load i64 (%"class.base::Clock"*)*, i64 (%"class.base::Clock"*)** %15, align 8
  %17 = tail call i64 %16(%"class.base::Clock"* %12) #13
  %18 = getelementptr inbounds %"class.certificate_transparency::ChromeCTPolicyEnforcer", %"class.certificate_transparency::ChromeCTPolicyEnforcer"* %0, i64 0, i32 4, i32 0, i32 0
  %19 = load i64, i64* %18, align 8
  %20 = sub nsw i64 %17, %19
  %21 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %9, i64 0, i32 0
  store i64 %20, i64* %21, align 8
  %22 = call i32 @_ZNK4base9TimeDelta6InDaysEv(%"class.base::TimeDelta"* nonnull %9) #13
  %23 = icmp slt i32 %22, 70
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #13
  br i1 %23, label %24, label %26

24:                                               ; preds = %4
  %25 = call i32 @_ZNK24certificate_transparency22ChromeCTPolicyEnforcer23CheckCTPolicyComplianceERKN3net15X509CertificateERKNSt3__16vectorI13scoped_refptrINS1_2ct26SignedCertificateTimestampEENS5_9allocatorISA_EEEE(%"class.certificate_transparency::ChromeCTPolicyEnforcer"* %0, %"class.net::X509Certificate"* dereferenceable(464) %1, %"class.std::__1::vector.24"* dereferenceable(24) %2)
  br label %26

26:                                               ; preds = %4, %24
  %27 = phi i32 [ %25, %24 ], [ 3, %4 ]
  %28 = getelementptr inbounds %"class.net::NetLogWithSource", %"class.net::NetLogWithSource"* %3, i64 0, i32 1
  %29 = load %"class.net::NetLog"*, %"class.net::NetLog"** %28, align 8
  %30 = getelementptr inbounds %"class.net::NetLogWithSource", %"class.net::NetLogWithSource"* %3, i64 0, i32 0
  %31 = getelementptr inbounds %"class.net::NetLog", %"class.net::NetLog"* %29, i64 0, i32 3
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %52, label %34, !prof !2

34:                                               ; preds = %26
  %35 = bitcast %"class.base::Value"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %35) #13
  %36 = bitcast %"class.base::DictionaryValue"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %36) #13, !noalias !3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %36, i8 -86, i64 32, i1 false) #13, !noalias !3
  call void @_ZN4base15DictionaryValueC1Ev(%"class.base::DictionaryValue"* nonnull %5) #13, !noalias !3
  %37 = bitcast %"class.base::Value"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %37) #13, !noalias !3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %37, i8 -86, i64 32, i1 false) #13, !noalias !3
  call void @_ZN4base5ValueC1ENS0_4TypeE(%"class.base::Value"* nonnull %6, i8 zeroext 6) #13, !noalias !3
  %38 = bitcast %"class.base::Value"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %38) #13, !noalias !3
  call void @_ZN3net25NetLogX509CertificateListEPKNS_15X509CertificateE(%"class.base::Value"* nonnull sret %7, %"class.net::X509Certificate"* %1) #13, !noalias !3
  %39 = call %"class.base::Value"* @_ZN4base5Value6SetKeyEPKcOS0_(%"class.base::Value"* nonnull %6, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), %"class.base::Value"* nonnull dereferenceable(32) %7) #13, !noalias !3
  call void @_ZN4base5ValueD1Ev(%"class.base::Value"* nonnull %7) #13, !noalias !3
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %38) #13, !noalias !3
  %40 = getelementptr inbounds %"class.base::DictionaryValue", %"class.base::DictionaryValue"* %5, i64 0, i32 0
  %41 = call %"class.base::Value"* @_ZN4base5Value6SetKeyEPKcOS0_(%"class.base::Value"* nonnull %40, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), %"class.base::Value"* nonnull dereferenceable(32) %6) #13, !noalias !3
  %42 = call %"class.base::Value"* @_ZN4base15DictionaryValue10SetBooleanENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEb(%"class.base::DictionaryValue"* nonnull %5, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i64 0, i64 0), i64 12, i1 zeroext %23) #13, !noalias !3
  %43 = icmp ult i32 %27, 6
  br i1 %43, label %44, label %48

44:                                               ; preds = %34
  %45 = sext i32 %27 to i64
  %46 = getelementptr inbounds [6 x i8*], [6 x i8*]* @switch.table._ZN24certificate_transparency22ChromeCTPolicyEnforcer15CheckComplianceEPN3net15X509CertificateERKNSt3__16vectorI13scoped_refptrINS1_2ct26SignedCertificateTimestampEENS4_9allocatorIS9_EEEERKNS1_16NetLogWithSourceE, i64 0, i64 %45
  %47 = load i8*, i8** %46, align 8
  br label %48

48:                                               ; preds = %34, %44
  %49 = phi i8* [ %47, %44 ], [ getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i64 0, i64 0), %34 ]
  %50 = call i64 @strlen(i8* nonnull %49) #13, !noalias !3
  %51 = call %"class.base::Value"* @_ZN4base15DictionaryValue9SetStringENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES5_(%"class.base::DictionaryValue"* nonnull %5, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.8, i64 0, i64 0), i64 20, i8* nonnull %49, i64 %50) #13, !noalias !3
  call void @_ZN4base5ValueC1EOS0_(%"class.base::Value"* nonnull %8, %"class.base::Value"* nonnull dereferenceable(32) %40) #13
  call void @_ZN4base5ValueD1Ev(%"class.base::Value"* nonnull %6) #13
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %37) #13, !noalias !3
  call void @_ZN4base5ValueD2Ev(%"class.base::Value"* nonnull %40) #13
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %36) #13, !noalias !3
  call void @_ZN3net6NetLog30AddEntryWithMaterializedParamsENS_15NetLogEventTypeERKNS_12NetLogSourceENS_16NetLogEventPhaseEON4base5ValueE(%"class.net::NetLog"* %29, i32 72, %"struct.net::NetLogSource"* dereferenceable(16) %30, i32 0, %"class.base::Value"* nonnull dereferenceable(32) %8) #13
  call void @_ZN4base5ValueD1Ev(%"class.base::Value"* nonnull %8) #13
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %35) #13
  br label %52

52:                                               ; preds = %26, %48
  ret i32 %27
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK24certificate_transparency22ChromeCTPolicyEnforcer15IsLogDataTimelyEv(%"class.certificate_transparency::ChromeCTPolicyEnforcer"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.base::TimeDelta", align 8
  %3 = bitcast %"class.base::TimeDelta"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #13
  %4 = getelementptr inbounds %"class.certificate_transparency::ChromeCTPolicyEnforcer", %"class.certificate_transparency::ChromeCTPolicyEnforcer"* %0, i64 0, i32 3
  %5 = load %"class.base::Clock"*, %"class.base::Clock"** %4, align 8
  %6 = bitcast %"class.base::Clock"* %5 to i64 (%"class.base::Clock"*)***
  %7 = load i64 (%"class.base::Clock"*)**, i64 (%"class.base::Clock"*)*** %6, align 8
  %8 = getelementptr inbounds i64 (%"class.base::Clock"*)*, i64 (%"class.base::Clock"*)** %7, i64 2
  %9 = load i64 (%"class.base::Clock"*)*, i64 (%"class.base::Clock"*)** %8, align 8
  %10 = tail call i64 %9(%"class.base::Clock"* %5) #13
  %11 = getelementptr inbounds %"class.certificate_transparency::ChromeCTPolicyEnforcer", %"class.certificate_transparency::ChromeCTPolicyEnforcer"* %0, i64 0, i32 4, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = sub nsw i64 %10, %12
  %14 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %2, i64 0, i32 0
  store i64 %13, i64* %14, align 8
  %15 = call i32 @_ZNK4base9TimeDelta6InDaysEv(%"class.base::TimeDelta"* nonnull %2) #13
  %16 = icmp slt i32 %15, 70
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #13
  ret i1 %16
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK24certificate_transparency22ChromeCTPolicyEnforcer23CheckCTPolicyComplianceERKN3net15X509CertificateERKNSt3__16vectorI13scoped_refptrINS1_2ct26SignedCertificateTimestampEENS5_9allocatorISA_EEEE(%"class.certificate_transparency::ChromeCTPolicyEnforcer"* nocapture readonly, %"class.net::X509Certificate"* dereferenceable(464), %"class.std::__1::vector.24"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"struct.base::Time::Exploded", align 8
  %5 = alloca %"struct.base::Time::Exploded", align 8
  %6 = alloca %"struct.std::__1::__less.92", align 1
  %7 = alloca i64, align 8
  %8 = alloca %"class.base::Time", align 8
  %9 = alloca %"class.std::__1::vector.50", align 8
  %10 = alloca %"class.base::Time", align 8
  %11 = getelementptr inbounds %"class.net::X509Certificate", %"class.net::X509Certificate"* %1, i64 0, i32 3
  %12 = getelementptr inbounds %"class.base::Time", %"class.base::Time"* %11, i64 0, i32 0, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %392, label %15

15:                                               ; preds = %3
  %16 = getelementptr inbounds %"class.net::X509Certificate", %"class.net::X509Certificate"* %1, i64 0, i32 4
  %17 = icmp eq i64 %13, 9223372036854775807
  br i1 %17, label %392, label %18

18:                                               ; preds = %15
  %19 = getelementptr inbounds %"class.base::Time", %"class.base::Time"* %16, i64 0, i32 0, i32 0
  %20 = load i64, i64* %19, align 8
  switch i64 %20, label %21 [
    i64 9223372036854775807, label %392
    i64 0, label %392
  ]

21:                                               ; preds = %18
  %22 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22)
  store i64 9223372036854775807, i64* %7, align 8
  %23 = getelementptr inbounds %"class.std::__1::vector.24", %"class.std::__1::vector.24"* %2, i64 0, i32 0, i32 0
  %24 = load %class.scoped_refptr*, %class.scoped_refptr** %23, align 8
  %25 = getelementptr inbounds %"class.std::__1::vector.24", %"class.std::__1::vector.24"* %2, i64 0, i32 0, i32 1
  %26 = load %class.scoped_refptr*, %class.scoped_refptr** %25, align 8
  %27 = icmp eq %class.scoped_refptr* %24, %26
  br i1 %27, label %35, label %28

28:                                               ; preds = %21
  %29 = bitcast %"class.base::Time"* %8 to i8*
  %30 = getelementptr inbounds %"class.base::Time", %"class.base::Time"* %8, i64 0, i32 0, i32 0
  %31 = bitcast i64* %7 to %"class.base::Time"*
  br label %50

32:                                               ; preds = %78
  %33 = load %class.scoped_refptr*, %class.scoped_refptr** %23, align 8
  %34 = load %class.scoped_refptr*, %class.scoped_refptr** %25, align 8
  br label %35

35:                                               ; preds = %32, %21
  %36 = phi i64 [ %79, %32 ], [ 9223372036854775807, %21 ]
  %37 = phi %class.scoped_refptr* [ %34, %32 ], [ %24, %21 ]
  %38 = phi %class.scoped_refptr* [ %33, %32 ], [ %24, %21 ]
  %39 = bitcast %"class.std::__1::vector.50"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %39) #13
  %40 = getelementptr inbounds %"class.std::__1::vector.50", %"class.std::__1::vector.50"* %9, i64 0, i32 0, i32 0
  %41 = getelementptr inbounds %"class.std::__1::vector.50", %"class.std::__1::vector.50"* %9, i64 0, i32 0, i32 1
  %42 = getelementptr inbounds %"class.std::__1::vector.50", %"class.std::__1::vector.50"* %9, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %39, i8 0, i64 24, i1 false) #13
  %43 = icmp eq %class.scoped_refptr* %38, %37
  br i1 %43, label %82, label %44

44:                                               ; preds = %35
  %45 = bitcast %"class.base::Time"* %10 to i8*
  %46 = getelementptr inbounds %"class.base::Time", %"class.base::Time"* %10, i64 0, i32 0, i32 0
  %47 = bitcast %"class.base::BasicStringPiece"** %41 to i64*
  %48 = bitcast %"class.std::__1::vector.50"* %9 to i64*
  %49 = bitcast %"class.base::BasicStringPiece"** %42 to i64*
  br label %97

50:                                               ; preds = %28, %78
  %51 = phi i64 [ 9223372036854775807, %28 ], [ %79, %78 ]
  %52 = phi %class.scoped_refptr* [ %24, %28 ], [ %80, %78 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #13
  store i64 0, i64* %30, align 8
  %53 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %52, i64 0, i32 0
  %54 = load %"struct.net::ct::SignedCertificateTimestamp"*, %"struct.net::ct::SignedCertificateTimestamp"** %53, align 8
  %55 = getelementptr inbounds %"struct.net::ct::SignedCertificateTimestamp", %"struct.net::ct::SignedCertificateTimestamp"* %54, i64 0, i32 2
  %56 = bitcast %"class.std::__1::basic_string"* %55 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %57 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %56, i64 0, i32 1, i32 0
  %58 = load i8, i8* %57, align 1
  %59 = icmp slt i8 %58, 0
  %60 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %55, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = bitcast %"class.std::__1::basic_string"* %55 to i8*
  %63 = select i1 %59, i8* %61, i8* %62
  %64 = getelementptr inbounds %"struct.net::ct::SignedCertificateTimestamp", %"struct.net::ct::SignedCertificateTimestamp"* %54, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %65 = load i64, i64* %64, align 8
  %66 = zext i8 %58 to i64
  %67 = select i1 %59, i64 %65, i64 %66
  %68 = call zeroext i1 @_ZNK24certificate_transparency22ChromeCTPolicyEnforcer17IsLogDisqualifiedEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEEPNS1_4TimeE(%"class.certificate_transparency::ChromeCTPolicyEnforcer"* %0, i8* %63, i64 %67, %"class.base::Time"* nonnull %8)
  br i1 %68, label %78, label %69

69:                                               ; preds = %50
  %70 = load %"struct.net::ct::SignedCertificateTimestamp"*, %"struct.net::ct::SignedCertificateTimestamp"** %53, align 8
  %71 = getelementptr inbounds %"struct.net::ct::SignedCertificateTimestamp", %"struct.net::ct::SignedCertificateTimestamp"* %70, i64 0, i32 3
  %72 = getelementptr inbounds %"class.base::Time", %"class.base::Time"* %71, i64 0, i32 0, i32 0
  %73 = load i64, i64* %72, align 8
  %74 = icmp slt i64 %51, %73
  %75 = select i1 %74, %"class.base::Time"* %31, %"class.base::Time"* %71
  %76 = getelementptr inbounds %"class.base::Time", %"class.base::Time"* %75, i64 0, i32 0, i32 0
  %77 = load i64, i64* %76, align 8
  store i64 %77, i64* %7, align 8
  br label %78

78:                                               ; preds = %50, %69
  %79 = phi i64 [ %77, %69 ], [ %51, %50 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #13
  %80 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %52, i64 1
  %81 = icmp eq %class.scoped_refptr* %80, %26
  br i1 %81, label %32, label %50

82:                                               ; preds = %237, %35
  %83 = phi %"class.base::BasicStringPiece"* [ null, %35 ], [ %238, %237 ]
  %84 = phi i8 [ 0, %35 ], [ %241, %237 ]
  %85 = phi i8 [ 0, %35 ], [ %242, %237 ]
  %86 = phi i8 [ 0, %35 ], [ %243, %237 ]
  %87 = phi i8 [ 0, %35 ], [ %244, %237 ]
  %88 = phi i8 [ 0, %35 ], [ %245, %237 ]
  %89 = phi i8 [ 0, %35 ], [ %246, %237 ]
  %90 = and i8 %86, 1
  %91 = icmp ne i8 %90, 0
  %92 = xor i1 %91, true
  %93 = and i8 %88, 1
  %94 = and i8 %93, %89
  %95 = icmp eq i8 %94, 0
  %96 = or i1 %95, %92
  br i1 %96, label %249, label %383

97:                                               ; preds = %44, %237
  %98 = phi %"class.base::BasicStringPiece"* [ null, %44 ], [ %238, %237 ]
  %99 = phi i64 [ 0, %44 ], [ %239, %237 ]
  %100 = phi %"class.base::BasicStringPiece"* [ null, %44 ], [ %240, %237 ]
  %101 = phi i8 [ 0, %44 ], [ %246, %237 ]
  %102 = phi i8 [ 0, %44 ], [ %245, %237 ]
  %103 = phi i8 [ 0, %44 ], [ %244, %237 ]
  %104 = phi i8 [ 0, %44 ], [ %243, %237 ]
  %105 = phi i8 [ 0, %44 ], [ %242, %237 ]
  %106 = phi i8 [ 0, %44 ], [ %241, %237 ]
  %107 = phi %class.scoped_refptr* [ %38, %44 ], [ %247, %237 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %45) #13
  store i64 0, i64* %46, align 8
  %108 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %107, i64 0, i32 0
  %109 = load %"struct.net::ct::SignedCertificateTimestamp"*, %"struct.net::ct::SignedCertificateTimestamp"** %108, align 8
  %110 = getelementptr inbounds %"struct.net::ct::SignedCertificateTimestamp", %"struct.net::ct::SignedCertificateTimestamp"* %109, i64 0, i32 2
  %111 = bitcast %"class.std::__1::basic_string"* %110 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %112 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %111, i64 0, i32 1, i32 0
  %113 = load i8, i8* %112, align 1
  %114 = icmp slt i8 %113, 0
  %115 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %110, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %116 = load i8*, i8** %115, align 8
  %117 = bitcast %"class.std::__1::basic_string"* %110 to i8*
  %118 = select i1 %114, i8* %116, i8* %117
  %119 = getelementptr inbounds %"struct.net::ct::SignedCertificateTimestamp", %"struct.net::ct::SignedCertificateTimestamp"* %109, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %120 = load i64, i64* %119, align 8
  %121 = zext i8 %113 to i64
  %122 = select i1 %114, i64 %120, i64 %121
  %123 = call zeroext i1 @_ZNK24certificate_transparency22ChromeCTPolicyEnforcer17IsLogDisqualifiedEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEEPNS1_4TimeE(%"class.certificate_transparency::ChromeCTPolicyEnforcer"* %0, i8* %118, i64 %122, %"class.base::Time"* nonnull %10)
  %124 = load %"struct.net::ct::SignedCertificateTimestamp"*, %"struct.net::ct::SignedCertificateTimestamp"** %108, align 8
  br i1 %123, label %125, label %129

125:                                              ; preds = %97
  %126 = getelementptr inbounds %"struct.net::ct::SignedCertificateTimestamp", %"struct.net::ct::SignedCertificateTimestamp"* %124, i64 0, i32 6
  %127 = load i32, i32* %126, align 8
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %129, label %237

129:                                              ; preds = %97, %125
  %130 = getelementptr inbounds %"struct.net::ct::SignedCertificateTimestamp", %"struct.net::ct::SignedCertificateTimestamp"* %124, i64 0, i32 2
  %131 = bitcast %"class.std::__1::basic_string"* %130 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %132 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %131, i64 0, i32 1, i32 0
  %133 = load i8, i8* %132, align 1
  %134 = icmp slt i8 %133, 0
  %135 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %130, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %136 = load i8*, i8** %135, align 8
  %137 = bitcast %"class.std::__1::basic_string"* %130 to i8*
  %138 = select i1 %134, i8* %136, i8* %137
  %139 = getelementptr inbounds %"struct.net::ct::SignedCertificateTimestamp", %"struct.net::ct::SignedCertificateTimestamp"* %124, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %140 = load i64, i64* %139, align 8
  %141 = zext i8 %133 to i64
  %142 = select i1 %134, i64 %140, i64 %141
  %143 = tail call zeroext i1 @_ZNK24certificate_transparency22ChromeCTPolicyEnforcer21IsLogOperatedByGoogleEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.certificate_transparency::ChromeCTPolicyEnforcer"* %0, i8* %138, i64 %142)
  %144 = xor i1 %123, true
  br i1 %143, label %145, label %153

145:                                              ; preds = %129
  %146 = zext i1 %144 to i8
  %147 = and i8 %101, 1
  %148 = or i8 %147, %146
  %149 = getelementptr inbounds %"struct.net::ct::SignedCertificateTimestamp", %"struct.net::ct::SignedCertificateTimestamp"* %124, i64 0, i32 6
  %150 = load i32, i32* %149, align 8
  %151 = icmp eq i32 %150, 0
  %152 = select i1 %151, i8 1, i8 %105
  br label %161

153:                                              ; preds = %129
  %154 = and i8 %102, 1
  %155 = zext i1 %144 to i8
  %156 = or i8 %154, %155
  %157 = getelementptr inbounds %"struct.net::ct::SignedCertificateTimestamp", %"struct.net::ct::SignedCertificateTimestamp"* %124, i64 0, i32 6
  %158 = load i32, i32* %157, align 8
  %159 = icmp eq i32 %158, 0
  %160 = select i1 %159, i8 1, i8 %106
  br label %161

161:                                              ; preds = %153, %145
  %162 = phi i32 [ %150, %145 ], [ %158, %153 ]
  %163 = phi i8 [ %106, %145 ], [ %160, %153 ]
  %164 = phi i8 [ %152, %145 ], [ %105, %153 ]
  %165 = phi i8 [ %102, %145 ], [ %156, %153 ]
  %166 = phi i8 [ %148, %145 ], [ %101, %153 ]
  %167 = icmp eq i32 %162, 0
  br i1 %167, label %168, label %237

168:                                              ; preds = %161
  %169 = and i8 %103, 1
  %170 = zext i1 %144 to i8
  %171 = or i8 %169, %170
  br i1 %123, label %172, label %179

172:                                              ; preds = %168
  %173 = load i64, i64* %46, align 8
  %174 = icmp slt i64 %36, %173
  br i1 %174, label %175, label %237

175:                                              ; preds = %172
  %176 = getelementptr inbounds %"struct.net::ct::SignedCertificateTimestamp", %"struct.net::ct::SignedCertificateTimestamp"* %124, i64 0, i32 3, i32 0, i32 0
  %177 = load i64, i64* %176, align 8
  %178 = icmp slt i64 %177, %173
  br i1 %178, label %179, label %237

179:                                              ; preds = %175, %168
  %180 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %42, align 8
  %181 = icmp ult %"class.base::BasicStringPiece"* %100, %180
  %182 = ptrtoint %"class.base::BasicStringPiece"* %180 to i64
  br i1 %181, label %183, label %188

183:                                              ; preds = %179
  %184 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %100, i64 0, i32 0
  store i8* %138, i8** %184, align 8
  %185 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %100, i64 0, i32 1
  store i64 %142, i64* %185, align 8
  %186 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %100, i64 1
  %187 = ptrtoint %"class.base::BasicStringPiece"* %186 to i64
  store i64 %187, i64* %47, align 8
  br label %237

188:                                              ; preds = %179
  %189 = ptrtoint %"class.base::BasicStringPiece"* %100 to i64
  %190 = load i64, i64* %48, align 8
  %191 = sub i64 %189, %190
  %192 = ashr exact i64 %191, 4
  %193 = add nsw i64 %192, 1
  %194 = icmp ugt i64 %193, 1152921504606846975
  br i1 %194, label %195, label %197

195:                                              ; preds = %188
  %196 = bitcast %"class.std::__1::vector.50"* %9 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %196) #14
  unreachable

197:                                              ; preds = %188
  %198 = sub i64 %182, %190
  %199 = ashr exact i64 %198, 4
  %200 = icmp ult i64 %199, 576460752303423487
  br i1 %200, label %201, label %209

201:                                              ; preds = %197
  %202 = ashr exact i64 %198, 3
  %203 = icmp ult i64 %202, %193
  %204 = select i1 %203, i64 %193, i64 %202
  %205 = icmp eq i64 %204, 0
  br i1 %205, label %214, label %206

206:                                              ; preds = %201
  %207 = icmp ugt i64 %204, 1152921504606846975
  br i1 %207, label %208, label %209

208:                                              ; preds = %206
  tail call void @abort() #14
  unreachable

209:                                              ; preds = %206, %197
  %210 = phi i64 [ %204, %206 ], [ 1152921504606846975, %197 ]
  %211 = shl i64 %210, 4
  %212 = tail call i8* @_Znwm(i64 %211) #15
  %213 = bitcast i8* %212 to %"class.base::BasicStringPiece"*
  br label %214

214:                                              ; preds = %209, %201
  %215 = phi i64 [ %210, %209 ], [ 0, %201 ]
  %216 = phi %"class.base::BasicStringPiece"* [ %213, %209 ], [ null, %201 ]
  %217 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %216, i64 %192
  %218 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %216, i64 %215
  %219 = ptrtoint %"class.base::BasicStringPiece"* %218 to i64
  %220 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %217, i64 0, i32 0
  store i8* %138, i8** %220, align 8
  %221 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %216, i64 %192, i32 1
  store i64 %142, i64* %221, align 8
  %222 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %217, i64 1
  %223 = ptrtoint %"class.base::BasicStringPiece"* %222 to i64
  %224 = sub i64 %99, %190
  %225 = ashr exact i64 %224, 4
  %226 = sub nsw i64 0, %225
  %227 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %217, i64 %226
  %228 = ptrtoint %"class.base::BasicStringPiece"* %227 to i64
  %229 = icmp sgt i64 %224, 0
  br i1 %229, label %230, label %233

230:                                              ; preds = %214
  %231 = bitcast %"class.base::BasicStringPiece"* %227 to i8*
  %232 = inttoptr i64 %190 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %231, i8* align 8 %232, i64 %224, i1 false) #13
  br label %233

233:                                              ; preds = %230, %214
  store i64 %228, i64* %48, align 8
  store i64 %223, i64* %47, align 8
  store i64 %219, i64* %49, align 8
  %234 = icmp eq i64 %190, 0
  br i1 %234, label %237, label %235

235:                                              ; preds = %233
  %236 = inttoptr i64 %190 to i8*
  tail call void @_ZdlPv(i8* %236) #15
  br label %237

237:                                              ; preds = %235, %233, %183, %175, %172, %161, %125
  %238 = phi %"class.base::BasicStringPiece"* [ %98, %125 ], [ %98, %161 ], [ %98, %172 ], [ %98, %175 ], [ %98, %183 ], [ %227, %233 ], [ %227, %235 ]
  %239 = phi i64 [ %99, %125 ], [ %99, %161 ], [ %99, %172 ], [ %99, %175 ], [ %187, %183 ], [ %223, %233 ], [ %223, %235 ]
  %240 = phi %"class.base::BasicStringPiece"* [ %100, %125 ], [ %100, %161 ], [ %100, %172 ], [ %100, %175 ], [ %186, %183 ], [ %222, %233 ], [ %222, %235 ]
  %241 = phi i8 [ %106, %125 ], [ %163, %161 ], [ %163, %172 ], [ %163, %175 ], [ %163, %183 ], [ %163, %233 ], [ %163, %235 ]
  %242 = phi i8 [ %105, %125 ], [ %164, %161 ], [ %164, %172 ], [ %164, %175 ], [ %164, %183 ], [ %164, %233 ], [ %164, %235 ]
  %243 = phi i8 [ %104, %125 ], [ 1, %161 ], [ %104, %172 ], [ %104, %175 ], [ %104, %183 ], [ %104, %233 ], [ %104, %235 ]
  %244 = phi i8 [ %103, %125 ], [ %103, %161 ], [ %171, %172 ], [ %171, %175 ], [ %171, %183 ], [ %171, %233 ], [ %171, %235 ]
  %245 = phi i8 [ %102, %125 ], [ %165, %161 ], [ %165, %172 ], [ %165, %175 ], [ %165, %183 ], [ %165, %233 ], [ %165, %235 ]
  %246 = phi i8 [ %101, %125 ], [ %166, %161 ], [ %166, %172 ], [ %166, %175 ], [ %166, %183 ], [ %166, %233 ], [ %166, %235 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %45) #13
  %247 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %107, i64 1
  %248 = icmp eq %class.scoped_refptr* %247, %37
  br i1 %248, label %82, label %97

249:                                              ; preds = %82
  %250 = and i8 %87, 1
  %251 = icmp eq i8 %250, 0
  br i1 %251, label %252, label %254

252:                                              ; preds = %249
  %253 = select i1 %91, i32 2, i32 1
  br label %383

254:                                              ; preds = %249
  %255 = tail call i64 @_ZN4base4Time9UnixEpochEv() #13
  %256 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %255, i64 1435708800000000) #13
  %257 = extractvalue { i64, i1 } %256, 1
  %258 = extractvalue { i64, i1 } %256, 0
  %259 = select i1 %257, i64 9223372036854775807, i64 %258, !prof !8
  %260 = icmp slt i64 %36, %259
  br i1 %260, label %265, label %261

261:                                              ; preds = %254
  %262 = and i8 %84, 1
  %263 = and i8 %262, %85
  %264 = icmp eq i8 %263, 0
  br i1 %264, label %383, label %265

265:                                              ; preds = %254, %261
  %266 = bitcast %"struct.base::Time::Exploded"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %266) #13
  %267 = bitcast %"struct.base::Time::Exploded"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %266, i8 -86, i64 32, i1 false) #13
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %267) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %267, i8 -86, i64 32, i1 false) #13
  call void @_ZNK4base4Time7ExplodeEbPNS0_8ExplodedE(%"class.base::Time"* %11, i1 zeroext false, %"struct.base::Time::Exploded"* nonnull %4) #13
  call void @_ZNK4base4Time7ExplodeEbPNS0_8ExplodedE(%"class.base::Time"* %16, i1 zeroext false, %"struct.base::Time::Exploded"* nonnull %5) #13
  %268 = load i64, i64* %12, align 8
  %269 = load i64, i64* %19, align 8
  %270 = icmp slt i64 %269, %268
  br i1 %270, label %271, label %272

271:                                              ; preds = %265
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %267) #13
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %266) #13
  br label %302

272:                                              ; preds = %265
  %273 = getelementptr inbounds %"struct.base::Time::Exploded", %"struct.base::Time::Exploded"* %5, i64 0, i32 3
  %274 = getelementptr inbounds %"struct.base::Time::Exploded", %"struct.base::Time::Exploded"* %4, i64 0, i32 3
  %275 = bitcast %"struct.base::Time::Exploded"* %5 to <2 x i32>*
  %276 = load <2 x i32>, <2 x i32>* %275, align 8
  %277 = bitcast %"struct.base::Time::Exploded"* %4 to <2 x i32>*
  %278 = load <2 x i32>, <2 x i32>* %277, align 8
  %279 = sub <2 x i32> %276, %278
  %280 = extractelement <2 x i32> %279, i32 0
  %281 = mul nsw i32 %280, 12
  %282 = extractelement <2 x i32> %279, i32 1
  %283 = add nsw i32 %282, %281
  %284 = load i32, i32* %273, align 4
  %285 = load i32, i32* %274, align 4
  %286 = icmp slt i32 %284, %285
  %287 = zext i1 %286 to i32
  %288 = sub i32 %283, %287
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %267) #13
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %266) #13
  %289 = icmp ugt i32 %288, 39
  br i1 %289, label %302, label %290

290:                                              ; preds = %272
  %291 = icmp eq i32 %284, %285
  %292 = icmp ne i32 %288, 39
  %293 = or i1 %291, %292
  br i1 %293, label %294, label %302

294:                                              ; preds = %290
  %295 = icmp ult i32 %288, 28
  %296 = icmp ne i32 %288, 27
  %297 = or i1 %291, %296
  %298 = and i1 %295, %297
  br i1 %298, label %299, label %302

299:                                              ; preds = %294
  %300 = icmp ugt i32 %288, 14
  %301 = select i1 %300, i64 3, i64 2
  br label %302

302:                                              ; preds = %299, %294, %271, %272, %290
  %303 = phi i64 [ 5, %290 ], [ 5, %272 ], [ 4, %294 ], [ 2, %271 ], [ %301, %299 ]
  %304 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %40, align 8
  %305 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %41, align 8
  %306 = getelementptr inbounds %"struct.std::__1::__less.92", %"struct.std::__1::__less.92"* %6, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %306) #13
  call void @_ZNSt3__16__sortIRNS_6__lessIN4base16BasicStringPieceIcNS_11char_traitsIcEEEES6_EEPS6_EEvT0_SA_T_(%"class.base::BasicStringPiece"* %304, %"class.base::BasicStringPiece"* %305, %"struct.std::__1::__less.92"* nonnull dereferenceable(1) %6) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %306) #13
  %307 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %40, align 8
  %308 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %41, align 8
  %309 = icmp eq %"class.base::BasicStringPiece"* %307, %308
  br i1 %309, label %333, label %310

310:                                              ; preds = %302
  %311 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %307, i64 1
  %312 = icmp eq %"class.base::BasicStringPiece"* %311, %308
  br i1 %312, label %331, label %313

313:                                              ; preds = %310, %328
  %314 = phi %"class.base::BasicStringPiece"* [ %329, %328 ], [ %311, %310 ]
  %315 = phi %"class.base::BasicStringPiece"* [ %314, %328 ], [ %307, %310 ]
  %316 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %315, i64 0, i32 1
  %317 = load i64, i64* %316, align 8
  %318 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %315, i64 1, i32 1
  %319 = load i64, i64* %318, align 8
  %320 = icmp eq i64 %317, %319
  br i1 %320, label %321, label %328

321:                                              ; preds = %313
  %322 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %314, i64 0, i32 0
  %323 = load i8*, i8** %322, align 8
  %324 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %315, i64 0, i32 0
  %325 = load i8*, i8** %324, align 8
  %326 = call i32 @bcmp(i8* %325, i8* %323, i64 %317) #13
  %327 = icmp eq i32 %326, 0
  br i1 %327, label %333, label %328

328:                                              ; preds = %321, %313
  %329 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %314, i64 1
  %330 = icmp eq %"class.base::BasicStringPiece"* %329, %308
  br i1 %330, label %331, label %313

331:                                              ; preds = %328, %310
  %332 = ptrtoint %"class.base::BasicStringPiece"* %308 to i64
  br label %375

333:                                              ; preds = %321, %302
  %334 = phi %"class.base::BasicStringPiece"* [ %307, %302 ], [ %315, %321 ]
  %335 = ptrtoint %"class.base::BasicStringPiece"* %334 to i64
  %336 = icmp eq %"class.base::BasicStringPiece"* %334, %308
  br i1 %336, label %375, label %337

337:                                              ; preds = %333
  %338 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %334, i64 2
  %339 = icmp eq %"class.base::BasicStringPiece"* %338, %308
  br i1 %339, label %371, label %340

340:                                              ; preds = %337
  %341 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %334, i64 1
  br label %342

342:                                              ; preds = %364, %340
  %343 = phi %"class.base::BasicStringPiece"* [ %368, %364 ], [ %334, %340 ]
  %344 = phi %"class.base::BasicStringPiece"* [ %366, %364 ], [ %338, %340 ]
  %345 = phi %"class.base::BasicStringPiece"* [ %344, %364 ], [ %341, %340 ]
  %346 = phi i64 [ %365, %364 ], [ %335, %340 ]
  %347 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %343, i64 0, i32 1
  %348 = load i64, i64* %347, align 8
  %349 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %345, i64 1, i32 1
  %350 = load i64, i64* %349, align 8
  %351 = icmp eq i64 %348, %350
  br i1 %351, label %352, label %359

352:                                              ; preds = %342
  %353 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %344, i64 0, i32 0
  %354 = load i8*, i8** %353, align 8
  %355 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %343, i64 0, i32 0
  %356 = load i8*, i8** %355, align 8
  %357 = call i32 @bcmp(i8* %356, i8* %354, i64 %348) #13
  %358 = icmp eq i32 %357, 0
  br i1 %358, label %364, label %359

359:                                              ; preds = %352, %342
  %360 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %343, i64 1
  %361 = ptrtoint %"class.base::BasicStringPiece"* %360 to i64
  %362 = bitcast %"class.base::BasicStringPiece"* %360 to i8*
  %363 = bitcast %"class.base::BasicStringPiece"* %344 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %362, i8* align 8 %363, i64 16, i1 false) #13
  br label %364

364:                                              ; preds = %359, %352
  %365 = phi i64 [ %346, %352 ], [ %361, %359 ]
  %366 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %344, i64 1
  %367 = icmp eq %"class.base::BasicStringPiece"* %366, %308
  %368 = inttoptr i64 %365 to %"class.base::BasicStringPiece"*
  br i1 %367, label %369, label %342

369:                                              ; preds = %364
  %370 = inttoptr i64 %365 to %"class.base::BasicStringPiece"*
  br label %371

371:                                              ; preds = %369, %337
  %372 = phi %"class.base::BasicStringPiece"* [ %334, %337 ], [ %370, %369 ]
  %373 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %372, i64 1
  %374 = ptrtoint %"class.base::BasicStringPiece"* %373 to i64
  br label %375

375:                                              ; preds = %331, %333, %371
  %376 = phi i64 [ %374, %371 ], [ %335, %333 ], [ %332, %331 ]
  %377 = ptrtoint %"class.base::BasicStringPiece"* %307 to i64
  %378 = sub i64 %376, %377
  %379 = ashr exact i64 %378, 4
  %380 = icmp ult i64 %379, %303
  %381 = select i1 %91, i32 2, i32 1
  %382 = select i1 %380, i32 %381, i32 0
  br label %383

383:                                              ; preds = %375, %261, %82, %252
  %384 = phi %"class.base::BasicStringPiece"* [ %83, %252 ], [ %83, %82 ], [ %307, %375 ], [ %83, %261 ]
  %385 = phi i32 [ %253, %252 ], [ 0, %82 ], [ %382, %375 ], [ 2, %261 ]
  %386 = icmp eq %"class.base::BasicStringPiece"* %384, null
  br i1 %386, label %391, label %387

387:                                              ; preds = %383
  %388 = ptrtoint %"class.base::BasicStringPiece"* %384 to i64
  %389 = bitcast %"class.base::BasicStringPiece"** %41 to i64*
  store i64 %388, i64* %389, align 8
  %390 = bitcast %"class.base::BasicStringPiece"* %384 to i8*
  call void @_ZdlPv(i8* %390) #15
  br label %391

391:                                              ; preds = %383, %387
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %39) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  br label %392

392:                                              ; preds = %18, %18, %15, %3, %391
  %393 = phi i32 [ %385, %391 ], [ 1, %18 ], [ 1, %3 ], [ 1, %15 ], [ 1, %18 ]
  ret i32 %393
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK24certificate_transparency22ChromeCTPolicyEnforcer17IsLogDisqualifiedEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEEPNS1_4TimeE(%"class.certificate_transparency::ChromeCTPolicyEnforcer"* nocapture readonly, i8*, i64, %"class.base::Time"* nocapture) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #13
  %10 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %10, align 8
  %11 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = icmp eq i64 %2, 32
  br i1 %12, label %13, label %14

13:                                               ; preds = %4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* null, i8** %10, align 8
  br label %23

14:                                               ; preds = %4
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %2) #13
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 32) #13
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %5, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0), i8* %15, i8* %16) #13
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* %18, i8** %10, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #13
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.1, i64 0, i64 0), i32 147, %"class.logging::CheckOpResult"* nonnull %7) #13
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #13
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #13
  br label %23

23:                                               ; preds = %13, %14, %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #13
  %24 = getelementptr inbounds %"class.certificate_transparency::ChromeCTPolicyEnforcer", %"class.certificate_transparency::ChromeCTPolicyEnforcer"* %0, i64 0, i32 1, i32 0, i32 0
  %25 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %24, align 8
  %26 = getelementptr inbounds %"class.certificate_transparency::ChromeCTPolicyEnforcer", %"class.certificate_transparency::ChromeCTPolicyEnforcer"* %0, i64 0, i32 1, i32 0, i32 1
  %27 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %26, align 8
  %28 = ptrtoint %"struct.std::__1::pair"* %25 to i64
  %29 = ptrtoint %"struct.std::__1::pair"* %27 to i64
  %30 = sub i64 %29, %28
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %67, label %32

32:                                               ; preds = %23
  %33 = ashr exact i64 %30, 5
  br label %34

34:                                               ; preds = %63, %32
  %35 = phi %"struct.std::__1::pair"* [ %25, %32 ], [ %65, %63 ]
  %36 = phi i64 [ %33, %32 ], [ %64, %63 ]
  %37 = lshr i64 %36, 1
  %38 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %35, i64 %37
  %39 = bitcast %"struct.std::__1::pair"* %38 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %40 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %39, i64 0, i32 1, i32 0
  %41 = load i8, i8* %40, align 1
  %42 = icmp slt i8 %41, 0
  %43 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %38, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = load i8*, i8** %43, align 8
  %45 = bitcast %"struct.std::__1::pair"* %38 to i8*
  %46 = select i1 %42, i8* %44, i8* %45
  %47 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %35, i64 %37, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %48 = load i64, i64* %47, align 8
  %49 = zext i8 %41 to i64
  %50 = select i1 %42, i64 %48, i64 %49
  %51 = icmp ugt i64 %50, %2
  %52 = select i1 %51, i64 %2, i64 %50
  %53 = call i32 @memcmp(i8* %46, i8* %1, i64 %52) #13
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %57

55:                                               ; preds = %34
  %56 = icmp ult i64 %50, %2
  br i1 %56, label %59, label %63

57:                                               ; preds = %34
  %58 = icmp slt i32 %53, 0
  br i1 %58, label %59, label %63

59:                                               ; preds = %57, %55
  %60 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %38, i64 1
  %61 = xor i64 %37, -1
  %62 = add i64 %36, %61
  br label %63

63:                                               ; preds = %59, %57, %55
  %64 = phi i64 [ %62, %59 ], [ %37, %57 ], [ %37, %55 ]
  %65 = phi %"struct.std::__1::pair"* [ %60, %59 ], [ %35, %57 ], [ %35, %55 ]
  %66 = icmp eq i64 %64, 0
  br i1 %66, label %67, label %34

67:                                               ; preds = %63, %23
  %68 = phi %"struct.std::__1::pair"* [ %25, %23 ], [ %65, %63 ]
  %69 = icmp eq %"struct.std::__1::pair"* %68, %27
  br i1 %69, label %111, label %70

70:                                               ; preds = %67
  %71 = bitcast %"struct.std::__1::pair"* %68 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %72 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %71, i64 0, i32 1, i32 0
  %73 = load i8, i8* %72, align 1
  %74 = icmp slt i8 %73, 0
  %75 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %68, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %76 = load i64, i64* %75, align 8
  %77 = zext i8 %73 to i64
  %78 = select i1 %74, i64 %76, i64 %77
  %79 = icmp eq i64 %78, %2
  br i1 %79, label %80, label %111

80:                                               ; preds = %70
  %81 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %68, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %82 = load i8*, i8** %81, align 8
  %83 = bitcast %"struct.std::__1::pair"* %68 to i8*
  %84 = select i1 %74, i8* %82, i8* %83
  %85 = call i32 @bcmp(i8* %84, i8* %1, i64 %2) #13
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %111

87:                                               ; preds = %80
  %88 = call i64 @_ZN4base4Time9UnixEpochEv() #13
  %89 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %68, i64 0, i32 1, i32 0
  %90 = load i64, i64* %89, align 8
  %91 = add i64 %90, -9223372036854775807
  %92 = icmp ult i64 %91, 2
  br i1 %92, label %100, label %93

93:                                               ; preds = %87
  %94 = icmp slt i64 %90, 0
  %95 = select i1 %94, i64 -9223372036854775808, i64 9223372036854775807
  %96 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %88, i64 %90) #13
  %97 = extractvalue { i64, i1 } %96, 1
  %98 = extractvalue { i64, i1 } %96, 0
  %99 = select i1 %97, i64 %95, i64 %98, !prof !8
  br label %108

100:                                              ; preds = %87
  %101 = add i64 %88, -9223372036854775807
  %102 = icmp ugt i64 %101, 1
  %103 = icmp eq i64 %88, %90
  %104 = or i1 %103, %102
  br i1 %104, label %108, label %105

105:                                              ; preds = %100
  %106 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %106) #13
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), i32 378, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.3, i64 0, i64 0)) #13
  %107 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #13
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %106) #13
  br label %108

108:                                              ; preds = %93, %100, %105
  %109 = phi i64 [ %99, %93 ], [ %90, %100 ], [ %90, %105 ]
  %110 = getelementptr inbounds %"class.base::Time", %"class.base::Time"* %3, i64 0, i32 0, i32 0
  store i64 %109, i64* %110, align 8
  br label %111

111:                                              ; preds = %80, %70, %67, %108
  %112 = phi i1 [ true, %108 ], [ false, %80 ], [ false, %67 ], [ false, %70 ]
  ret i1 %112
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

declare i64 @_ZN4base4Time9UnixEpochEv() local_unnamed_addr #1

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK24certificate_transparency22ChromeCTPolicyEnforcer21IsLogOperatedByGoogleEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.certificate_transparency::ChromeCTPolicyEnforcer"* nocapture readonly, i8*, i64) local_unnamed_addr #5 align 2 {
  %4 = getelementptr inbounds %"class.certificate_transparency::ChromeCTPolicyEnforcer", %"class.certificate_transparency::ChromeCTPolicyEnforcer"* %0, i64 0, i32 2, i32 0, i32 0
  %5 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %4, align 8
  %6 = getelementptr inbounds %"class.certificate_transparency::ChromeCTPolicyEnforcer", %"class.certificate_transparency::ChromeCTPolicyEnforcer"* %0, i64 0, i32 2, i32 0, i32 1
  %7 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %6, align 8
  %8 = ptrtoint %"class.std::__1::basic_string"* %5 to i64
  %9 = ptrtoint %"class.std::__1::basic_string"* %7 to i64
  %10 = sub i64 %9, %8
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %47, label %12

12:                                               ; preds = %3
  %13 = sdiv exact i64 %10, 24
  br label %14

14:                                               ; preds = %43, %12
  %15 = phi %"class.std::__1::basic_string"* [ %5, %12 ], [ %45, %43 ]
  %16 = phi i64 [ %13, %12 ], [ %44, %43 ]
  %17 = lshr i64 %16, 1
  %18 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %15, i64 %17
  %19 = bitcast %"class.std::__1::basic_string"* %18 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %20 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %19, i64 0, i32 1, i32 0
  %21 = load i8, i8* %20, align 1
  %22 = icmp slt i8 %21, 0
  %23 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = bitcast %"class.std::__1::basic_string"* %18 to i8*
  %26 = select i1 %22, i8* %24, i8* %25
  %27 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %15, i64 %17, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = zext i8 %21 to i64
  %30 = select i1 %22, i64 %28, i64 %29
  %31 = icmp ugt i64 %30, %2
  %32 = select i1 %31, i64 %2, i64 %30
  %33 = tail call i32 @memcmp(i8* %26, i8* %1, i64 %32) #13
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %37

35:                                               ; preds = %14
  %36 = icmp ult i64 %30, %2
  br i1 %36, label %39, label %43

37:                                               ; preds = %14
  %38 = icmp slt i32 %33, 0
  br i1 %38, label %39, label %43

39:                                               ; preds = %37, %35
  %40 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %18, i64 1
  %41 = xor i64 %17, -1
  %42 = add i64 %16, %41
  br label %43

43:                                               ; preds = %39, %37, %35
  %44 = phi i64 [ %42, %39 ], [ %17, %37 ], [ %17, %35 ]
  %45 = phi %"class.std::__1::basic_string"* [ %40, %39 ], [ %15, %37 ], [ %15, %35 ]
  %46 = icmp eq i64 %44, 0
  br i1 %46, label %47, label %14

47:                                               ; preds = %43, %3
  %48 = phi %"class.std::__1::basic_string"* [ %5, %3 ], [ %45, %43 ]
  %49 = icmp eq %"class.std::__1::basic_string"* %48, %7
  br i1 %49, label %75, label %50

50:                                               ; preds = %47
  %51 = bitcast %"class.std::__1::basic_string"* %48 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %52 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %51, i64 0, i32 1, i32 0
  %53 = load i8, i8* %52, align 1
  %54 = icmp slt i8 %53, 0
  %55 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %48, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %56 = load i8*, i8** %55, align 8
  %57 = bitcast %"class.std::__1::basic_string"* %48 to i8*
  %58 = select i1 %54, i8* %56, i8* %57
  %59 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %48, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %60 = load i64, i64* %59, align 8
  %61 = zext i8 %53 to i64
  %62 = select i1 %54, i64 %60, i64 %61
  %63 = icmp ult i64 %62, %2
  %64 = select i1 %63, i64 %62, i64 %2
  %65 = tail call i32 @memcmp(i8* %1, i8* %58, i64 %64) #13
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %72

67:                                               ; preds = %50
  %68 = icmp eq i64 %62, %2
  br i1 %68, label %72, label %69

69:                                               ; preds = %67
  %70 = icmp ugt i64 %62, %2
  %71 = select i1 %70, i32 -1, i32 1
  br label %72

72:                                               ; preds = %69, %67, %50
  %73 = phi i32 [ %71, %69 ], [ %65, %50 ], [ 0, %67 ]
  %74 = icmp sgt i32 %73, -1
  br label %75

75:                                               ; preds = %47, %72
  %76 = phi i1 [ false, %47 ], [ %74, %72 ]
  ret i1 %76
}

declare i32 @_ZNK4base9TimeDelta6InDaysEv(%"class.base::TimeDelta"*) local_unnamed_addr #1

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #1

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #1

; Function Attrs: nofree nounwind readonly
declare i32 @memcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #6

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #7

declare void @_ZNK4base4Time7ExplodeEbPNS0_8ExplodedE(%"class.base::Time"*, i1 zeroext, %"struct.base::Time::Exploded"*) local_unnamed_addr #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #8

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #9

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #10

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #1

declare void @_ZN3net6NetLog30AddEntryWithMaterializedParamsENS_15NetLogEventTypeERKNS_12NetLogSourceENS_16NetLogEventPhaseEON4base5ValueE(%"class.net::NetLog"*, i32, %"struct.net::NetLogSource"* dereferenceable(16), i32, %"class.base::Value"* dereferenceable(32)) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4base5ValueD1Ev(%"class.base::Value"*) unnamed_addr #4

declare void @_ZN4base15DictionaryValueC1Ev(%"class.base::DictionaryValue"*) unnamed_addr #1

declare void @_ZN4base5ValueC1ENS0_4TypeE(%"class.base::Value"*, i8 zeroext) unnamed_addr #1

declare %"class.base::Value"* @_ZN4base5Value6SetKeyEPKcOS0_(%"class.base::Value"*, i8*, %"class.base::Value"* dereferenceable(32)) local_unnamed_addr #1

declare void @_ZN3net25NetLogX509CertificateListEPKNS_15X509CertificateE(%"class.base::Value"* sret, %"class.net::X509Certificate"*) local_unnamed_addr #1

declare %"class.base::Value"* @_ZN4base15DictionaryValue10SetBooleanENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEb(%"class.base::DictionaryValue"*, i8*, i64, i1 zeroext) local_unnamed_addr #1

declare %"class.base::Value"* @_ZN4base15DictionaryValue9SetStringENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES5_(%"class.base::DictionaryValue"*, i8*, i64, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4base5ValueC1EOS0_(%"class.base::Value"*, %"class.base::Value"* dereferenceable(32)) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN4base5ValueD2Ev(%"class.base::Value"*) unnamed_addr #4

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #11

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__sortIRNS_6__lessIN4base16BasicStringPieceIcNS_11char_traitsIcEEEES6_EEPS6_EEvT0_SA_T_(%"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"struct.std::__1::__less.92"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  br label %4

4:                                                ; preds = %302, %3
  %5 = phi %"class.base::BasicStringPiece"* [ %1, %3 ], [ %269, %302 ]
  %6 = phi %"class.base::BasicStringPiece"* [ %0, %3 ], [ %17, %302 ]
  %7 = ptrtoint %"class.base::BasicStringPiece"* %5 to i64
  %8 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %5, i64 -1
  %9 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %8, i64 0, i32 0
  %10 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %5, i64 -1, i32 1
  %11 = bitcast %"class.base::BasicStringPiece"* %8 to i8*
  %12 = bitcast %"class.base::BasicStringPiece"* %8 to i64*
  %13 = ptrtoint %"class.base::BasicStringPiece"* %5 to i64
  br label %14

14:                                               ; preds = %311, %4
  %15 = phi %"class.base::BasicStringPiece"* [ %6, %4 ], [ %312, %311 ]
  br label %16

16:                                               ; preds = %173, %14
  %17 = phi %"class.base::BasicStringPiece"* [ %15, %14 ], [ %140, %173 ]
  %18 = ptrtoint %"class.base::BasicStringPiece"* %17 to i64
  %19 = sub i64 %7, %18
  %20 = ashr exact i64 %19, 4
  switch i64 %20, label %59 [
    i64 0, label %315
    i64 1, label %315
    i64 2, label %21
    i64 3, label %44
    i64 4, label %48
    i64 5, label %53
  ]

21:                                               ; preds = %16
  %22 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %5, i64 -1
  %23 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %22, i64 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %5, i64 -1, i32 1
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %17, i64 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %17, i64 0, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = icmp ugt i64 %26, %30
  %32 = select i1 %31, i64 %30, i64 %26
  %33 = tail call i32 @memcmp(i8* %24, i8* %28, i64 %32) #13
  %34 = icmp eq i32 %33, 0
  %35 = ptrtoint i8* %28 to i64
  br i1 %34, label %36, label %38

36:                                               ; preds = %21
  %37 = icmp ult i64 %26, %30
  br i1 %37, label %40, label %315

38:                                               ; preds = %21
  %39 = icmp slt i32 %33, 0
  br i1 %39, label %40, label %315

40:                                               ; preds = %36, %38
  %41 = bitcast %"class.base::BasicStringPiece"* %17 to i8*
  %42 = bitcast %"class.base::BasicStringPiece"* %22 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %41, i8* align 8 %42, i64 16, i1 false) #13
  %43 = bitcast %"class.base::BasicStringPiece"* %22 to i64*
  store i64 %35, i64* %43, align 8
  store i64 %30, i64* %25, align 8
  br label %315

44:                                               ; preds = %16
  %45 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %17, i64 1
  %46 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %5, i64 -1
  %47 = tail call i32 @_ZNSt3__17__sort3IRNS_6__lessIN4base16BasicStringPieceIcNS_11char_traitsIcEEEES6_EEPS6_EEjT0_SA_SA_T_(%"class.base::BasicStringPiece"* %17, %"class.base::BasicStringPiece"* %45, %"class.base::BasicStringPiece"* %46, %"struct.std::__1::__less.92"* dereferenceable(1) %2)
  br label %315

48:                                               ; preds = %16
  %49 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %17, i64 1
  %50 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %17, i64 2
  %51 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %5, i64 -1
  %52 = tail call i32 @_ZNSt3__17__sort4IRNS_6__lessIN4base16BasicStringPieceIcNS_11char_traitsIcEEEES6_EEPS6_EEjT0_SA_SA_SA_T_(%"class.base::BasicStringPiece"* %17, %"class.base::BasicStringPiece"* %49, %"class.base::BasicStringPiece"* %50, %"class.base::BasicStringPiece"* %51, %"struct.std::__1::__less.92"* dereferenceable(1) %2)
  br label %315

53:                                               ; preds = %16
  %54 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %17, i64 1
  %55 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %17, i64 2
  %56 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %17, i64 3
  %57 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %5, i64 -1
  %58 = tail call i32 @_ZNSt3__17__sort5IRNS_6__lessIN4base16BasicStringPieceIcNS_11char_traitsIcEEEES6_EEPS6_EEjT0_SA_SA_SA_SA_T_(%"class.base::BasicStringPiece"* %17, %"class.base::BasicStringPiece"* %54, %"class.base::BasicStringPiece"* %55, %"class.base::BasicStringPiece"* %56, %"class.base::BasicStringPiece"* %57, %"struct.std::__1::__less.92"* dereferenceable(1) %2)
  br label %315

59:                                               ; preds = %16
  %60 = icmp slt i64 %19, 496
  br i1 %60, label %61, label %62

61:                                               ; preds = %59
  tail call void @_ZNSt3__118__insertion_sort_3IRNS_6__lessIN4base16BasicStringPieceIcNS_11char_traitsIcEEEES6_EEPS6_EEvT0_SA_T_(%"class.base::BasicStringPiece"* %17, %"class.base::BasicStringPiece"* %5, %"struct.std::__1::__less.92"* dereferenceable(1) %2)
  br label %315

62:                                               ; preds = %59
  %63 = icmp sgt i64 %19, 15984
  %64 = sdiv i64 %20, 2
  %65 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %17, i64 %64
  br i1 %63, label %66, label %71

66:                                               ; preds = %62
  %67 = sdiv i64 %20, 4
  %68 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %17, i64 %67
  %69 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %65, i64 %67
  %70 = tail call i32 @_ZNSt3__17__sort5IRNS_6__lessIN4base16BasicStringPieceIcNS_11char_traitsIcEEEES6_EEPS6_EEjT0_SA_SA_SA_SA_T_(%"class.base::BasicStringPiece"* %17, %"class.base::BasicStringPiece"* %68, %"class.base::BasicStringPiece"* %65, %"class.base::BasicStringPiece"* %69, %"class.base::BasicStringPiece"* %8, %"struct.std::__1::__less.92"* dereferenceable(1) %2)
  br label %73

71:                                               ; preds = %62
  %72 = tail call i32 @_ZNSt3__17__sort3IRNS_6__lessIN4base16BasicStringPieceIcNS_11char_traitsIcEEEES6_EEPS6_EEjT0_SA_SA_T_(%"class.base::BasicStringPiece"* %17, %"class.base::BasicStringPiece"* %65, %"class.base::BasicStringPiece"* %8, %"struct.std::__1::__less.92"* dereferenceable(1) %2)
  br label %73

73:                                               ; preds = %71, %66
  %74 = phi i32 [ %70, %66 ], [ %72, %71 ]
  %75 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %17, i64 0, i32 0
  %76 = load i8*, i8** %75, align 8
  %77 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %17, i64 0, i32 1
  %78 = load i64, i64* %77, align 8
  %79 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %65, i64 0, i32 0
  %80 = load i8*, i8** %79, align 8
  %81 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %17, i64 %64, i32 1
  %82 = load i64, i64* %81, align 8
  %83 = icmp ugt i64 %78, %82
  %84 = select i1 %83, i64 %82, i64 %78
  %85 = tail call i32 @memcmp(i8* %76, i8* %80, i64 %84) #13
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %89

87:                                               ; preds = %73
  %88 = icmp ult i64 %78, %82
  br i1 %88, label %204, label %91

89:                                               ; preds = %73
  %90 = icmp slt i32 %85, 0
  br i1 %90, label %204, label %91

91:                                               ; preds = %87, %89
  br label %92

92:                                               ; preds = %91, %194
  %93 = phi %"class.base::BasicStringPiece"* [ %94, %194 ], [ %8, %91 ]
  %94 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %93, i64 -1
  %95 = icmp eq %"class.base::BasicStringPiece"* %17, %94
  br i1 %95, label %96, label %181

96:                                               ; preds = %92
  %97 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %17, i64 1
  %98 = load i8*, i8** %9, align 8
  %99 = load i64, i64* %10, align 8
  %100 = icmp ugt i64 %78, %99
  %101 = select i1 %100, i64 %99, i64 %78
  %102 = tail call i32 @memcmp(i8* %76, i8* %98, i64 %101) #13
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %104, label %106

104:                                              ; preds = %96
  %105 = icmp ult i64 %78, %99
  br i1 %105, label %131, label %108

106:                                              ; preds = %96
  %107 = icmp slt i32 %102, 0
  br i1 %107, label %131, label %108

108:                                              ; preds = %104, %106
  %109 = icmp eq %"class.base::BasicStringPiece"* %97, %8
  br i1 %109, label %315, label %110

110:                                              ; preds = %108, %128
  %111 = phi %"class.base::BasicStringPiece"* [ %129, %128 ], [ %97, %108 ]
  %112 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %111, i64 0, i32 0
  %113 = load i8*, i8** %112, align 8
  %114 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %111, i64 0, i32 1
  %115 = load i64, i64* %114, align 8
  %116 = icmp ugt i64 %78, %115
  %117 = select i1 %116, i64 %115, i64 %78
  %118 = tail call i32 @memcmp(i8* %76, i8* %113, i64 %117) #13
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %120, label %122

120:                                              ; preds = %110
  %121 = icmp ult i64 %78, %115
  br i1 %121, label %124, label %128

122:                                              ; preds = %110
  %123 = icmp slt i32 %118, 0
  br i1 %123, label %124, label %128

124:                                              ; preds = %120, %122
  %125 = ptrtoint i8* %113 to i64
  %126 = bitcast %"class.base::BasicStringPiece"* %111 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %126, i8* align 8 %11, i64 16, i1 false) #13
  store i64 %125, i64* %12, align 8
  store i64 %115, i64* %10, align 8
  %127 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %111, i64 1
  br label %131

128:                                              ; preds = %120, %122
  %129 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %111, i64 1
  %130 = icmp eq %"class.base::BasicStringPiece"* %129, %8
  br i1 %130, label %315, label %110

131:                                              ; preds = %104, %124, %106
  %132 = phi %"class.base::BasicStringPiece"* [ %97, %106 ], [ %127, %124 ], [ %97, %104 ]
  %133 = icmp eq %"class.base::BasicStringPiece"* %132, %8
  br i1 %133, label %315, label %134

134:                                              ; preds = %131, %175
  %135 = phi %"class.base::BasicStringPiece"* [ %180, %175 ], [ %132, %131 ]
  %136 = phi %"class.base::BasicStringPiece"* [ %159, %175 ], [ %8, %131 ]
  %137 = load i8*, i8** %75, align 8
  %138 = load i64, i64* %77, align 8
  br label %139

139:                                              ; preds = %155, %134
  %140 = phi %"class.base::BasicStringPiece"* [ %135, %134 ], [ %156, %155 ]
  %141 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %140, i64 0, i32 0
  %142 = load i8*, i8** %141, align 8
  %143 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %140, i64 0, i32 1
  %144 = load i64, i64* %143, align 8
  %145 = icmp ugt i64 %138, %144
  %146 = select i1 %145, i64 %144, i64 %138
  %147 = tail call i32 @memcmp(i8* %137, i8* %142, i64 %146) #13
  %148 = icmp eq i32 %147, 0
  br i1 %148, label %149, label %151

149:                                              ; preds = %139
  %150 = icmp ult i64 %138, %144
  br i1 %150, label %153, label %155

151:                                              ; preds = %139
  %152 = icmp slt i32 %147, 0
  br i1 %152, label %153, label %155

153:                                              ; preds = %149, %151
  %154 = ptrtoint i8* %142 to i64
  br label %157

155:                                              ; preds = %149, %151
  %156 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %140, i64 1
  br label %139

157:                                              ; preds = %153, %170
  %158 = phi %"class.base::BasicStringPiece"* [ %159, %170 ], [ %136, %153 ]
  %159 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %158, i64 -1
  %160 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %159, i64 0, i32 0
  %161 = load i8*, i8** %160, align 8
  %162 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %158, i64 -1, i32 1
  %163 = load i64, i64* %162, align 8
  %164 = icmp ugt i64 %138, %163
  %165 = select i1 %164, i64 %163, i64 %138
  %166 = tail call i32 @memcmp(i8* %137, i8* %161, i64 %165) #13
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %168, label %170

168:                                              ; preds = %157
  %169 = icmp ult i64 %138, %163
  br i1 %169, label %170, label %173

170:                                              ; preds = %168, %157
  %171 = phi i32 [ %166, %157 ], [ -1, %168 ]
  %172 = icmp slt i32 %171, 0
  br i1 %172, label %157, label %173

173:                                              ; preds = %168, %170
  %174 = icmp ult %"class.base::BasicStringPiece"* %140, %159
  br i1 %174, label %175, label %16

175:                                              ; preds = %173
  %176 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %158, i64 -1, i32 1
  %177 = bitcast %"class.base::BasicStringPiece"* %140 to i8*
  %178 = bitcast %"class.base::BasicStringPiece"* %159 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %177, i8* align 8 %178, i64 16, i1 false) #13
  %179 = bitcast %"class.base::BasicStringPiece"* %159 to i64*
  store i64 %154, i64* %179, align 8
  store i64 %144, i64* %176, align 8
  %180 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %140, i64 1
  br label %134

181:                                              ; preds = %92
  %182 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %94, i64 0, i32 0
  %183 = load i8*, i8** %182, align 8
  %184 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %93, i64 -1, i32 1
  %185 = load i64, i64* %184, align 8
  %186 = icmp ugt i64 %185, %82
  %187 = select i1 %186, i64 %82, i64 %185
  %188 = tail call i32 @memcmp(i8* %183, i8* %80, i64 %187) #13
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %190, label %194

190:                                              ; preds = %181
  %191 = icmp eq i64 %185, %82
  br i1 %191, label %194, label %192

192:                                              ; preds = %190
  %193 = icmp ult i64 %185, %82
  br i1 %193, label %197, label %194

194:                                              ; preds = %192, %181, %190
  %195 = phi i32 [ 1, %192 ], [ %188, %181 ], [ 0, %190 ]
  %196 = icmp slt i32 %195, 0
  br i1 %196, label %197, label %92

197:                                              ; preds = %192, %194
  %198 = ptrtoint i8* %76 to i64
  %199 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %93, i64 -1, i32 1
  %200 = bitcast %"class.base::BasicStringPiece"* %17 to i8*
  %201 = bitcast %"class.base::BasicStringPiece"* %94 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %200, i8* align 8 %201, i64 16, i1 false) #13
  %202 = bitcast %"class.base::BasicStringPiece"* %94 to i64*
  store i64 %198, i64* %202, align 8
  store i64 %78, i64* %199, align 8
  %203 = add i32 %74, 1
  br label %204

204:                                              ; preds = %89, %87, %197
  %205 = phi i32 [ %203, %197 ], [ %74, %87 ], [ %74, %89 ]
  %206 = phi %"class.base::BasicStringPiece"* [ %94, %197 ], [ %8, %87 ], [ %8, %89 ]
  %207 = ptrtoint %"class.base::BasicStringPiece"* %17 to i64
  %208 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %17, i64 1
  %209 = icmp ult %"class.base::BasicStringPiece"* %208, %206
  br i1 %209, label %210, label %266

210:                                              ; preds = %204, %257
  %211 = phi %"class.base::BasicStringPiece"* [ %264, %257 ], [ %65, %204 ]
  %212 = phi i32 [ %262, %257 ], [ %205, %204 ]
  %213 = phi %"class.base::BasicStringPiece"* [ %265, %257 ], [ %208, %204 ]
  %214 = phi %"class.base::BasicStringPiece"* [ %239, %257 ], [ %206, %204 ]
  %215 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %211, i64 0, i32 0
  %216 = load i8*, i8** %215, align 8
  %217 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %211, i64 0, i32 1
  %218 = load i64, i64* %217, align 8
  br label %219

219:                                              ; preds = %235, %210
  %220 = phi %"class.base::BasicStringPiece"* [ %213, %210 ], [ %236, %235 ]
  %221 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %220, i64 0, i32 0
  %222 = load i8*, i8** %221, align 8
  %223 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %220, i64 0, i32 1
  %224 = load i64, i64* %223, align 8
  %225 = icmp ugt i64 %224, %218
  %226 = select i1 %225, i64 %218, i64 %224
  %227 = tail call i32 @memcmp(i8* %222, i8* %216, i64 %226) #13
  %228 = icmp eq i32 %227, 0
  br i1 %228, label %229, label %231

229:                                              ; preds = %219
  %230 = icmp ult i64 %224, %218
  br i1 %230, label %235, label %233

231:                                              ; preds = %219
  %232 = icmp slt i32 %227, 0
  br i1 %232, label %235, label %233

233:                                              ; preds = %229, %231
  %234 = ptrtoint i8* %222 to i64
  br label %237

235:                                              ; preds = %229, %231
  %236 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %220, i64 1
  br label %219

237:                                              ; preds = %233, %252
  %238 = phi %"class.base::BasicStringPiece"* [ %239, %252 ], [ %214, %233 ]
  %239 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %238, i64 -1
  %240 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %239, i64 0, i32 0
  %241 = load i8*, i8** %240, align 8
  %242 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %238, i64 -1, i32 1
  %243 = load i64, i64* %242, align 8
  %244 = icmp ugt i64 %243, %218
  %245 = select i1 %244, i64 %218, i64 %243
  %246 = tail call i32 @memcmp(i8* %241, i8* %216, i64 %245) #13
  %247 = icmp eq i32 %246, 0
  br i1 %247, label %248, label %252

248:                                              ; preds = %237
  %249 = icmp eq i64 %243, %218
  br i1 %249, label %252, label %250

250:                                              ; preds = %248
  %251 = icmp ult i64 %243, %218
  br i1 %251, label %255, label %252

252:                                              ; preds = %250, %237, %248
  %253 = phi i32 [ 1, %250 ], [ %246, %237 ], [ 0, %248 ]
  %254 = icmp slt i32 %253, 0
  br i1 %254, label %255, label %237

255:                                              ; preds = %250, %252
  %256 = icmp ugt %"class.base::BasicStringPiece"* %220, %239
  br i1 %256, label %266, label %257

257:                                              ; preds = %255
  %258 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %238, i64 -1, i32 1
  %259 = bitcast %"class.base::BasicStringPiece"* %220 to i8*
  %260 = bitcast %"class.base::BasicStringPiece"* %239 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %259, i8* align 8 %260, i64 16, i1 false) #13
  %261 = bitcast %"class.base::BasicStringPiece"* %239 to i64*
  store i64 %234, i64* %261, align 8
  store i64 %224, i64* %258, align 8
  %262 = add i32 %212, 1
  %263 = icmp eq %"class.base::BasicStringPiece"* %211, %220
  %264 = select i1 %263, %"class.base::BasicStringPiece"* %239, %"class.base::BasicStringPiece"* %211
  %265 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %220, i64 1
  br label %210

266:                                              ; preds = %255, %204
  %267 = phi %"class.base::BasicStringPiece"* [ %65, %204 ], [ %211, %255 ]
  %268 = phi i32 [ %205, %204 ], [ %212, %255 ]
  %269 = phi %"class.base::BasicStringPiece"* [ %208, %204 ], [ %220, %255 ]
  %270 = icmp eq %"class.base::BasicStringPiece"* %269, %267
  br i1 %270, label %294, label %271

271:                                              ; preds = %266
  %272 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %267, i64 0, i32 0
  %273 = load i8*, i8** %272, align 8
  %274 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %267, i64 0, i32 1
  %275 = load i64, i64* %274, align 8
  %276 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %269, i64 0, i32 0
  %277 = load i8*, i8** %276, align 8
  %278 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %269, i64 0, i32 1
  %279 = load i64, i64* %278, align 8
  %280 = icmp ugt i64 %275, %279
  %281 = select i1 %280, i64 %279, i64 %275
  %282 = tail call i32 @memcmp(i8* %273, i8* %277, i64 %281) #13
  %283 = icmp eq i32 %282, 0
  %284 = ptrtoint i8* %277 to i64
  br i1 %283, label %285, label %287

285:                                              ; preds = %271
  %286 = icmp ult i64 %275, %279
  br i1 %286, label %289, label %294

287:                                              ; preds = %271
  %288 = icmp slt i32 %282, 0
  br i1 %288, label %289, label %294

289:                                              ; preds = %285, %287
  %290 = bitcast %"class.base::BasicStringPiece"* %269 to i8*
  %291 = bitcast %"class.base::BasicStringPiece"* %267 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %290, i8* align 8 %291, i64 16, i1 false) #13
  %292 = bitcast %"class.base::BasicStringPiece"* %267 to i64*
  store i64 %284, i64* %292, align 8
  store i64 %279, i64* %274, align 8
  %293 = add i32 %268, 1
  br label %294

294:                                              ; preds = %285, %266, %289, %287
  %295 = phi i32 [ %293, %289 ], [ %268, %287 ], [ %268, %266 ], [ %268, %285 ]
  %296 = icmp eq i32 %295, 0
  br i1 %296, label %297, label %304

297:                                              ; preds = %294
  %298 = tail call zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRNS_6__lessIN4base16BasicStringPieceIcNS_11char_traitsIcEEEES6_EEPS6_EEbT0_SA_T_(%"class.base::BasicStringPiece"* %17, %"class.base::BasicStringPiece"* %269, %"struct.std::__1::__less.92"* dereferenceable(1) %2)
  %299 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %269, i64 1
  %300 = tail call zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRNS_6__lessIN4base16BasicStringPieceIcNS_11char_traitsIcEEEES6_EEPS6_EEbT0_SA_T_(%"class.base::BasicStringPiece"* %299, %"class.base::BasicStringPiece"* %5, %"struct.std::__1::__less.92"* dereferenceable(1) %2)
  br i1 %300, label %301, label %303

301:                                              ; preds = %297
  br i1 %298, label %315, label %302

302:                                              ; preds = %301, %313
  br label %4

303:                                              ; preds = %297
  br i1 %298, label %311, label %304

304:                                              ; preds = %303, %294
  %305 = ptrtoint %"class.base::BasicStringPiece"* %269 to i64
  %306 = sub i64 %305, %207
  %307 = sub i64 %13, %305
  %308 = icmp slt i64 %306, %307
  br i1 %308, label %309, label %313

309:                                              ; preds = %304
  tail call void @_ZNSt3__16__sortIRNS_6__lessIN4base16BasicStringPieceIcNS_11char_traitsIcEEEES6_EEPS6_EEvT0_SA_T_(%"class.base::BasicStringPiece"* %17, %"class.base::BasicStringPiece"* %269, %"struct.std::__1::__less.92"* dereferenceable(1) %2)
  %310 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %269, i64 1
  br label %311

311:                                              ; preds = %309, %303
  %312 = phi %"class.base::BasicStringPiece"* [ %299, %303 ], [ %310, %309 ]
  br label %14

313:                                              ; preds = %304
  %314 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %269, i64 1
  tail call void @_ZNSt3__16__sortIRNS_6__lessIN4base16BasicStringPieceIcNS_11char_traitsIcEEEES6_EEPS6_EEvT0_SA_T_(%"class.base::BasicStringPiece"* %314, %"class.base::BasicStringPiece"* %5, %"struct.std::__1::__less.92"* dereferenceable(1) %2)
  br label %302

315:                                              ; preds = %301, %131, %16, %16, %108, %128, %36, %38, %40, %44, %48, %53, %61
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNSt3__17__sort3IRNS_6__lessIN4base16BasicStringPieceIcNS_11char_traitsIcEEEES6_EEPS6_EEjT0_SA_SA_T_(%"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"struct.std::__1::__less.92"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %5 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = icmp ugt i64 %8, %12
  %14 = select i1 %13, i64 %12, i64 %8
  %15 = tail call i32 @memcmp(i8* %6, i8* %10, i64 %14) #13
  %16 = icmp eq i32 %15, 0
  %17 = ptrtoint i8* %6 to i64
  %18 = ptrtoint i8* %10 to i64
  br i1 %16, label %19, label %24

19:                                               ; preds = %4
  %20 = icmp eq i64 %8, %12
  br i1 %20, label %24, label %21

21:                                               ; preds = %19
  %22 = icmp ult i64 %8, %12
  %23 = select i1 %22, i32 -1, i32 1
  br label %24

24:                                               ; preds = %4, %19, %21
  %25 = phi i32 [ %23, %21 ], [ %15, %4 ], [ 0, %19 ]
  %26 = icmp slt i32 %25, 0
  %27 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %2, i64 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %2, i64 0, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = icmp ugt i64 %30, %8
  %32 = select i1 %31, i64 %8, i64 %30
  %33 = tail call i32 @memcmp(i8* %28, i8* %6, i64 %32) #13
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %40

35:                                               ; preds = %24
  %36 = icmp eq i64 %30, %8
  br i1 %36, label %40, label %37

37:                                               ; preds = %35
  %38 = icmp ult i64 %30, %8
  %39 = select i1 %38, i32 -1, i32 1
  br label %40

40:                                               ; preds = %24, %35, %37
  %41 = phi i32 [ %39, %37 ], [ %33, %24 ], [ 0, %35 ]
  %42 = icmp slt i32 %41, 0
  br i1 %26, label %64, label %43

43:                                               ; preds = %40
  br i1 %42, label %44, label %85

44:                                               ; preds = %43
  %45 = bitcast %"class.base::BasicStringPiece"* %1 to i64*
  %46 = bitcast %"class.base::BasicStringPiece"* %1 to i8*
  %47 = bitcast %"class.base::BasicStringPiece"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %46, i8* align 8 %47, i64 16, i1 false) #13
  %48 = bitcast %"class.base::BasicStringPiece"* %2 to i64*
  store i64 %17, i64* %48, align 8
  store i64 %8, i64* %29, align 8
  %49 = load i8*, i8** %5, align 8
  %50 = load i64, i64* %7, align 8
  %51 = load i8*, i8** %9, align 8
  %52 = load i64, i64* %11, align 8
  %53 = icmp ugt i64 %50, %52
  %54 = select i1 %53, i64 %52, i64 %50
  %55 = tail call i32 @memcmp(i8* %49, i8* %51, i64 %54) #13
  %56 = icmp eq i32 %55, 0
  %57 = ptrtoint i8* %51 to i64
  br i1 %56, label %58, label %60

58:                                               ; preds = %44
  %59 = icmp ult i64 %50, %52
  br i1 %59, label %62, label %85

60:                                               ; preds = %44
  %61 = icmp slt i32 %55, 0
  br i1 %61, label %62, label %85

62:                                               ; preds = %58, %60
  %63 = bitcast %"class.base::BasicStringPiece"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %63, i8* align 8 %46, i64 16, i1 false) #13
  store i64 %57, i64* %45, align 8
  store i64 %52, i64* %7, align 8
  br label %85

64:                                               ; preds = %40
  %65 = bitcast %"class.base::BasicStringPiece"* %0 to i8*
  br i1 %42, label %66, label %69

66:                                               ; preds = %64
  %67 = bitcast %"class.base::BasicStringPiece"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %65, i8* align 8 %67, i64 16, i1 false) #13
  %68 = bitcast %"class.base::BasicStringPiece"* %2 to i64*
  store i64 %18, i64* %68, align 8
  store i64 %12, i64* %29, align 8
  br label %85

69:                                               ; preds = %64
  %70 = bitcast %"class.base::BasicStringPiece"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %65, i8* align 8 %70, i64 16, i1 false) #13
  %71 = bitcast %"class.base::BasicStringPiece"* %1 to i64*
  store i64 %18, i64* %71, align 8
  store i64 %12, i64* %7, align 8
  %72 = load i8*, i8** %27, align 8
  %73 = load i64, i64* %29, align 8
  %74 = icmp ugt i64 %73, %12
  %75 = select i1 %74, i64 %12, i64 %73
  %76 = tail call i32 @memcmp(i8* %72, i8* %10, i64 %75) #13
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %80

78:                                               ; preds = %69
  %79 = icmp ult i64 %73, %12
  br i1 %79, label %82, label %85

80:                                               ; preds = %69
  %81 = icmp slt i32 %76, 0
  br i1 %81, label %82, label %85

82:                                               ; preds = %78, %80
  %83 = bitcast %"class.base::BasicStringPiece"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %70, i8* align 8 %83, i64 16, i1 false) #13
  %84 = bitcast %"class.base::BasicStringPiece"* %2 to i64*
  store i64 %18, i64* %84, align 8
  store i64 %12, i64* %29, align 8
  br label %85

85:                                               ; preds = %78, %58, %80, %82, %60, %62, %43, %66
  %86 = phi i32 [ 1, %66 ], [ 0, %43 ], [ 2, %62 ], [ 1, %60 ], [ 2, %82 ], [ 1, %80 ], [ 1, %58 ], [ 1, %78 ]
  ret i32 %86
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNSt3__17__sort4IRNS_6__lessIN4base16BasicStringPieceIcNS_11char_traitsIcEEEES6_EEPS6_EEjT0_SA_SA_SA_T_(%"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"struct.std::__1::__less.92"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %6 = tail call i32 @_ZNSt3__17__sort3IRNS_6__lessIN4base16BasicStringPieceIcNS_11char_traitsIcEEEES6_EEPS6_EEjT0_SA_SA_T_(%"class.base::BasicStringPiece"* %0, %"class.base::BasicStringPiece"* %1, %"class.base::BasicStringPiece"* %2, %"struct.std::__1::__less.92"* dereferenceable(1) %4)
  %7 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %3, i64 0, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %3, i64 0, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %2, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %2, i64 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = icmp ugt i64 %10, %14
  %16 = select i1 %15, i64 %14, i64 %10
  %17 = tail call i32 @memcmp(i8* %8, i8* %12, i64 %16) #13
  %18 = icmp eq i32 %17, 0
  %19 = ptrtoint i8* %12 to i64
  br i1 %18, label %20, label %22

20:                                               ; preds = %5
  %21 = icmp ult i64 %10, %14
  br i1 %21, label %24, label %67

22:                                               ; preds = %5
  %23 = icmp slt i32 %17, 0
  br i1 %23, label %24, label %67

24:                                               ; preds = %20, %22
  %25 = bitcast %"class.base::BasicStringPiece"* %2 to i64*
  %26 = bitcast %"class.base::BasicStringPiece"* %2 to i8*
  %27 = bitcast %"class.base::BasicStringPiece"* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %26, i8* align 8 %27, i64 16, i1 false) #13
  %28 = bitcast %"class.base::BasicStringPiece"* %3 to i64*
  store i64 %19, i64* %28, align 8
  store i64 %14, i64* %9, align 8
  %29 = add i32 %6, 1
  %30 = load i8*, i8** %11, align 8
  %31 = load i64, i64* %13, align 8
  %32 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 0, i32 1
  %35 = load i64, i64* %34, align 8
  %36 = icmp ugt i64 %31, %35
  %37 = select i1 %36, i64 %35, i64 %31
  %38 = tail call i32 @memcmp(i8* %30, i8* %33, i64 %37) #13
  %39 = icmp eq i32 %38, 0
  %40 = ptrtoint i8* %33 to i64
  br i1 %39, label %41, label %43

41:                                               ; preds = %24
  %42 = icmp ult i64 %31, %35
  br i1 %42, label %45, label %67

43:                                               ; preds = %24
  %44 = icmp slt i32 %38, 0
  br i1 %44, label %45, label %67

45:                                               ; preds = %41, %43
  %46 = bitcast %"class.base::BasicStringPiece"* %1 to i64*
  %47 = bitcast %"class.base::BasicStringPiece"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %47, i8* align 8 %26, i64 16, i1 false) #13
  store i64 %40, i64* %25, align 8
  store i64 %35, i64* %13, align 8
  %48 = add i32 %6, 2
  %49 = load i8*, i8** %32, align 8
  %50 = load i64, i64* %34, align 8
  %51 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %52 = load i8*, i8** %51, align 8
  %53 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %54 = load i64, i64* %53, align 8
  %55 = icmp ugt i64 %50, %54
  %56 = select i1 %55, i64 %54, i64 %50
  %57 = tail call i32 @memcmp(i8* %49, i8* %52, i64 %56) #13
  %58 = icmp eq i32 %57, 0
  %59 = ptrtoint i8* %52 to i64
  br i1 %58, label %60, label %62

60:                                               ; preds = %45
  %61 = icmp ult i64 %50, %54
  br i1 %61, label %64, label %67

62:                                               ; preds = %45
  %63 = icmp slt i32 %57, 0
  br i1 %63, label %64, label %67

64:                                               ; preds = %60, %62
  %65 = bitcast %"class.base::BasicStringPiece"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %65, i8* align 8 %47, i64 16, i1 false) #13
  store i64 %59, i64* %46, align 8
  store i64 %54, i64* %34, align 8
  %66 = add i32 %6, 3
  br label %67

67:                                               ; preds = %60, %41, %20, %43, %64, %62, %22
  %68 = phi i32 [ %66, %64 ], [ %48, %62 ], [ %29, %43 ], [ %6, %22 ], [ %6, %20 ], [ %29, %41 ], [ %48, %60 ]
  ret i32 %68
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNSt3__17__sort5IRNS_6__lessIN4base16BasicStringPieceIcNS_11char_traitsIcEEEES6_EEPS6_EEjT0_SA_SA_SA_SA_T_(%"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"struct.std::__1::__less.92"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %7 = tail call i32 @_ZNSt3__17__sort4IRNS_6__lessIN4base16BasicStringPieceIcNS_11char_traitsIcEEEES6_EEPS6_EEjT0_SA_SA_SA_T_(%"class.base::BasicStringPiece"* %0, %"class.base::BasicStringPiece"* %1, %"class.base::BasicStringPiece"* %2, %"class.base::BasicStringPiece"* %3, %"struct.std::__1::__less.92"* dereferenceable(1) %5)
  %8 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %4, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %4, i64 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %3, i64 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %3, i64 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = icmp ugt i64 %11, %15
  %17 = select i1 %16, i64 %15, i64 %11
  %18 = tail call i32 @memcmp(i8* %9, i8* %13, i64 %17) #13
  %19 = icmp eq i32 %18, 0
  %20 = ptrtoint i8* %13 to i64
  br i1 %19, label %21, label %23

21:                                               ; preds = %6
  %22 = icmp ult i64 %11, %15
  br i1 %22, label %25, label %87

23:                                               ; preds = %6
  %24 = icmp slt i32 %18, 0
  br i1 %24, label %25, label %87

25:                                               ; preds = %21, %23
  %26 = bitcast %"class.base::BasicStringPiece"* %3 to i64*
  %27 = bitcast %"class.base::BasicStringPiece"* %3 to i8*
  %28 = bitcast %"class.base::BasicStringPiece"* %4 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %27, i8* align 8 %28, i64 16, i1 false) #13
  %29 = bitcast %"class.base::BasicStringPiece"* %4 to i64*
  store i64 %20, i64* %29, align 8
  store i64 %15, i64* %10, align 8
  %30 = add i32 %7, 1
  %31 = load i8*, i8** %12, align 8
  %32 = load i64, i64* %14, align 8
  %33 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %2, i64 0, i32 0
  %34 = load i8*, i8** %33, align 8
  %35 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %2, i64 0, i32 1
  %36 = load i64, i64* %35, align 8
  %37 = icmp ugt i64 %32, %36
  %38 = select i1 %37, i64 %36, i64 %32
  %39 = tail call i32 @memcmp(i8* %31, i8* %34, i64 %38) #13
  %40 = icmp eq i32 %39, 0
  %41 = ptrtoint i8* %34 to i64
  br i1 %40, label %42, label %44

42:                                               ; preds = %25
  %43 = icmp ult i64 %32, %36
  br i1 %43, label %46, label %87

44:                                               ; preds = %25
  %45 = icmp slt i32 %39, 0
  br i1 %45, label %46, label %87

46:                                               ; preds = %42, %44
  %47 = bitcast %"class.base::BasicStringPiece"* %2 to i64*
  %48 = bitcast %"class.base::BasicStringPiece"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %48, i8* align 8 %27, i64 16, i1 false) #13
  store i64 %41, i64* %26, align 8
  store i64 %36, i64* %14, align 8
  %49 = add i32 %7, 2
  %50 = load i8*, i8** %33, align 8
  %51 = load i64, i64* %35, align 8
  %52 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 0, i32 0
  %53 = load i8*, i8** %52, align 8
  %54 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 0, i32 1
  %55 = load i64, i64* %54, align 8
  %56 = icmp ugt i64 %51, %55
  %57 = select i1 %56, i64 %55, i64 %51
  %58 = tail call i32 @memcmp(i8* %50, i8* %53, i64 %57) #13
  %59 = icmp eq i32 %58, 0
  %60 = ptrtoint i8* %53 to i64
  br i1 %59, label %61, label %63

61:                                               ; preds = %46
  %62 = icmp ult i64 %51, %55
  br i1 %62, label %65, label %87

63:                                               ; preds = %46
  %64 = icmp slt i32 %58, 0
  br i1 %64, label %65, label %87

65:                                               ; preds = %61, %63
  %66 = bitcast %"class.base::BasicStringPiece"* %1 to i64*
  %67 = bitcast %"class.base::BasicStringPiece"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %67, i8* align 8 %48, i64 16, i1 false) #13
  store i64 %60, i64* %47, align 8
  store i64 %55, i64* %35, align 8
  %68 = add i32 %7, 3
  %69 = load i8*, i8** %52, align 8
  %70 = load i64, i64* %54, align 8
  %71 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %72 = load i8*, i8** %71, align 8
  %73 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %74 = load i64, i64* %73, align 8
  %75 = icmp ugt i64 %70, %74
  %76 = select i1 %75, i64 %74, i64 %70
  %77 = tail call i32 @memcmp(i8* %69, i8* %72, i64 %76) #13
  %78 = icmp eq i32 %77, 0
  %79 = ptrtoint i8* %72 to i64
  br i1 %78, label %80, label %82

80:                                               ; preds = %65
  %81 = icmp ult i64 %70, %74
  br i1 %81, label %84, label %87

82:                                               ; preds = %65
  %83 = icmp slt i32 %77, 0
  br i1 %83, label %84, label %87

84:                                               ; preds = %80, %82
  %85 = bitcast %"class.base::BasicStringPiece"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %85, i8* align 8 %67, i64 16, i1 false) #13
  store i64 %79, i64* %66, align 8
  store i64 %74, i64* %54, align 8
  %86 = add i32 %7, 4
  br label %87

87:                                               ; preds = %80, %61, %42, %21, %44, %82, %84, %63, %23
  %88 = phi i32 [ %86, %84 ], [ %68, %82 ], [ %49, %63 ], [ %30, %44 ], [ %7, %23 ], [ %7, %21 ], [ %30, %42 ], [ %49, %61 ], [ %68, %80 ]
  ret i32 %88
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__118__insertion_sort_3IRNS_6__lessIN4base16BasicStringPieceIcNS_11char_traitsIcEEEES6_EEPS6_EEvT0_SA_T_(%"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"struct.std::__1::__less.92"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %4 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 2
  %5 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 1
  %6 = tail call i32 @_ZNSt3__17__sort3IRNS_6__lessIN4base16BasicStringPieceIcNS_11char_traitsIcEEEES6_EEPS6_EEjT0_SA_SA_T_(%"class.base::BasicStringPiece"* %0, %"class.base::BasicStringPiece"* %5, %"class.base::BasicStringPiece"* %4, %"struct.std::__1::__less.92"* dereferenceable(1) %2)
  %7 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 3
  %8 = icmp eq %"class.base::BasicStringPiece"* %7, %1
  br i1 %8, label %9, label %10

9:                                                ; preds = %55, %3
  ret void

10:                                               ; preds = %3, %55
  %11 = phi %"class.base::BasicStringPiece"* [ %56, %55 ], [ %7, %3 ]
  %12 = phi %"class.base::BasicStringPiece"* [ %11, %55 ], [ %4, %3 ]
  %13 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %11, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %11, i64 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %12, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %12, i64 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = icmp ugt i64 %16, %20
  %22 = select i1 %21, i64 %20, i64 %16
  %23 = tail call i32 @memcmp(i8* %14, i8* %18, i64 %22) #13
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %10
  %26 = icmp ult i64 %16, %20
  br i1 %26, label %29, label %55

27:                                               ; preds = %10
  %28 = icmp slt i32 %23, 0
  br i1 %28, label %29, label %55

29:                                               ; preds = %25, %27
  br label %30

30:                                               ; preds = %29, %48
  %31 = phi %"class.base::BasicStringPiece"* [ %32, %48 ], [ %11, %29 ]
  %32 = phi %"class.base::BasicStringPiece"* [ %37, %48 ], [ %12, %29 ]
  %33 = bitcast %"class.base::BasicStringPiece"* %31 to i8*
  %34 = bitcast %"class.base::BasicStringPiece"* %32 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %33, i8* align 8 %34, i64 16, i1 false)
  %35 = icmp eq %"class.base::BasicStringPiece"* %32, %0
  br i1 %35, label %51, label %36

36:                                               ; preds = %30
  %37 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %32, i64 -1
  %38 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %37, i64 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %32, i64 -1, i32 1
  %41 = load i64, i64* %40, align 8
  %42 = icmp ugt i64 %16, %41
  %43 = select i1 %42, i64 %41, i64 %16
  %44 = tail call i32 @memcmp(i8* %14, i8* %39, i64 %43) #13
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %48

46:                                               ; preds = %36
  %47 = icmp ult i64 %16, %41
  br i1 %47, label %48, label %51

48:                                               ; preds = %46, %36
  %49 = phi i32 [ %44, %36 ], [ -1, %46 ]
  %50 = icmp slt i32 %49, 0
  br i1 %50, label %30, label %51

51:                                               ; preds = %46, %30, %48
  %52 = phi %"class.base::BasicStringPiece"* [ %32, %46 ], [ %0, %30 ], [ %32, %48 ]
  %53 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %52, i64 0, i32 0
  store i8* %14, i8** %53, align 8
  %54 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %52, i64 0, i32 1
  store i64 %16, i64* %54, align 8
  br label %55

55:                                               ; preds = %25, %51, %27
  %56 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %11, i64 1
  %57 = icmp eq %"class.base::BasicStringPiece"* %56, %1
  br i1 %57, label %9, label %10
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRNS_6__lessIN4base16BasicStringPieceIcNS_11char_traitsIcEEEES6_EEPS6_EEbT0_SA_T_(%"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"struct.std::__1::__less.92"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %4 = ptrtoint %"class.base::BasicStringPiece"* %1 to i64
  %5 = ptrtoint %"class.base::BasicStringPiece"* %0 to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 4
  switch i64 %7, label %46 [
    i64 0, label %107
    i64 1, label %107
    i64 2, label %8
    i64 3, label %31
    i64 4, label %35
    i64 5, label %40
  ]

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 -1
  %10 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %9, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 -1, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = icmp ugt i64 %13, %17
  %19 = select i1 %18, i64 %17, i64 %13
  %20 = tail call i32 @memcmp(i8* %11, i8* %15, i64 %19) #13
  %21 = icmp eq i32 %20, 0
  %22 = ptrtoint i8* %15 to i64
  br i1 %21, label %23, label %25

23:                                               ; preds = %8
  %24 = icmp ult i64 %13, %17
  br i1 %24, label %27, label %107

25:                                               ; preds = %8
  %26 = icmp slt i32 %20, 0
  br i1 %26, label %27, label %107

27:                                               ; preds = %23, %25
  %28 = bitcast %"class.base::BasicStringPiece"* %0 to i8*
  %29 = bitcast %"class.base::BasicStringPiece"* %9 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %28, i8* align 8 %29, i64 16, i1 false) #13
  %30 = bitcast %"class.base::BasicStringPiece"* %9 to i64*
  store i64 %22, i64* %30, align 8
  store i64 %17, i64* %12, align 8
  br label %107

31:                                               ; preds = %3
  %32 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 1
  %33 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 -1
  %34 = tail call i32 @_ZNSt3__17__sort3IRNS_6__lessIN4base16BasicStringPieceIcNS_11char_traitsIcEEEES6_EEPS6_EEjT0_SA_SA_T_(%"class.base::BasicStringPiece"* %0, %"class.base::BasicStringPiece"* %32, %"class.base::BasicStringPiece"* %33, %"struct.std::__1::__less.92"* dereferenceable(1) %2)
  br label %107

35:                                               ; preds = %3
  %36 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 1
  %37 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 2
  %38 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 -1
  %39 = tail call i32 @_ZNSt3__17__sort4IRNS_6__lessIN4base16BasicStringPieceIcNS_11char_traitsIcEEEES6_EEPS6_EEjT0_SA_SA_SA_T_(%"class.base::BasicStringPiece"* %0, %"class.base::BasicStringPiece"* %36, %"class.base::BasicStringPiece"* %37, %"class.base::BasicStringPiece"* %38, %"struct.std::__1::__less.92"* dereferenceable(1) %2)
  br label %107

40:                                               ; preds = %3
  %41 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 1
  %42 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 2
  %43 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 3
  %44 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 -1
  %45 = tail call i32 @_ZNSt3__17__sort5IRNS_6__lessIN4base16BasicStringPieceIcNS_11char_traitsIcEEEES6_EEPS6_EEjT0_SA_SA_SA_SA_T_(%"class.base::BasicStringPiece"* %0, %"class.base::BasicStringPiece"* %41, %"class.base::BasicStringPiece"* %42, %"class.base::BasicStringPiece"* %43, %"class.base::BasicStringPiece"* %44, %"struct.std::__1::__less.92"* dereferenceable(1) %2)
  br label %107

46:                                               ; preds = %3
  %47 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 2
  %48 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 1
  %49 = tail call i32 @_ZNSt3__17__sort3IRNS_6__lessIN4base16BasicStringPieceIcNS_11char_traitsIcEEEES6_EEPS6_EEjT0_SA_SA_T_(%"class.base::BasicStringPiece"* %0, %"class.base::BasicStringPiece"* %48, %"class.base::BasicStringPiece"* %47, %"struct.std::__1::__less.92"* dereferenceable(1) %2)
  %50 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 3
  %51 = icmp eq %"class.base::BasicStringPiece"* %50, %1
  br i1 %51, label %107, label %52

52:                                               ; preds = %46, %100
  %53 = phi %"class.base::BasicStringPiece"* [ %102, %100 ], [ %50, %46 ]
  %54 = phi i32 [ %101, %100 ], [ 0, %46 ]
  %55 = phi %"class.base::BasicStringPiece"* [ %53, %100 ], [ %47, %46 ]
  %56 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %53, i64 0, i32 0
  %57 = load i8*, i8** %56, align 8
  %58 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %53, i64 0, i32 1
  %59 = load i64, i64* %58, align 8
  %60 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %55, i64 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %55, i64 0, i32 1
  %63 = load i64, i64* %62, align 8
  %64 = icmp ugt i64 %59, %63
  %65 = select i1 %64, i64 %63, i64 %59
  %66 = tail call i32 @memcmp(i8* %57, i8* %61, i64 %65) #13
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %70

68:                                               ; preds = %52
  %69 = icmp ult i64 %59, %63
  br i1 %69, label %72, label %100

70:                                               ; preds = %52
  %71 = icmp slt i32 %66, 0
  br i1 %71, label %72, label %100

72:                                               ; preds = %68, %70
  br label %73

73:                                               ; preds = %72, %91
  %74 = phi %"class.base::BasicStringPiece"* [ %75, %91 ], [ %53, %72 ]
  %75 = phi %"class.base::BasicStringPiece"* [ %80, %91 ], [ %55, %72 ]
  %76 = bitcast %"class.base::BasicStringPiece"* %74 to i8*
  %77 = bitcast %"class.base::BasicStringPiece"* %75 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %76, i8* align 8 %77, i64 16, i1 false)
  %78 = icmp eq %"class.base::BasicStringPiece"* %75, %0
  br i1 %78, label %94, label %79

79:                                               ; preds = %73
  %80 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %75, i64 -1
  %81 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %80, i64 0, i32 0
  %82 = load i8*, i8** %81, align 8
  %83 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %75, i64 -1, i32 1
  %84 = load i64, i64* %83, align 8
  %85 = icmp ugt i64 %59, %84
  %86 = select i1 %85, i64 %84, i64 %59
  %87 = tail call i32 @memcmp(i8* %57, i8* %82, i64 %86) #13
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %91

89:                                               ; preds = %79
  %90 = icmp ult i64 %59, %84
  br i1 %90, label %91, label %94

91:                                               ; preds = %89, %79
  %92 = phi i32 [ %87, %79 ], [ -1, %89 ]
  %93 = icmp slt i32 %92, 0
  br i1 %93, label %73, label %94

94:                                               ; preds = %89, %73, %91
  %95 = phi %"class.base::BasicStringPiece"* [ %75, %89 ], [ %0, %73 ], [ %75, %91 ]
  %96 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %95, i64 0, i32 0
  store i8* %57, i8** %96, align 8
  %97 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %95, i64 0, i32 1
  store i64 %59, i64* %97, align 8
  %98 = add i32 %54, 1
  %99 = icmp eq i32 %98, 8
  br i1 %99, label %104, label %100

100:                                              ; preds = %94, %68, %70
  %101 = phi i32 [ %98, %94 ], [ %54, %70 ], [ %54, %68 ]
  %102 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %53, i64 1
  %103 = icmp eq %"class.base::BasicStringPiece"* %102, %1
  br i1 %103, label %107, label %52

104:                                              ; preds = %94
  %105 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %53, i64 1
  %106 = icmp eq %"class.base::BasicStringPiece"* %105, %1
  br label %107

107:                                              ; preds = %100, %104, %46, %23, %25, %27, %3, %3, %40, %35, %31
  %108 = phi i1 [ true, %40 ], [ true, %35 ], [ true, %31 ], [ true, %3 ], [ true, %3 ], [ true, %27 ], [ true, %25 ], [ true, %23 ], [ true, %46 ], [ %106, %104 ], [ true, %100 ]
  ret i1 %108
}

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #12

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nofree nounwind readonly }
attributes #13 = { nounwind }
attributes #14 = { noreturn nounwind }
attributes #15 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!4, !6}
!4 = distinct !{!4, !5, !"_ZN24certificate_transparency12_GLOBAL__N_137NetLogCertComplianceCheckResultParamsEPN3net15X509CertificateEbNS1_2ct18CTPolicyComplianceE: argument 0"}
!5 = distinct !{!5, !"_ZN24certificate_transparency12_GLOBAL__N_137NetLogCertComplianceCheckResultParamsEPN3net15X509CertificateEbNS1_2ct18CTPolicyComplianceE"}
!6 = distinct !{!6, !7, !"_ZZN24certificate_transparency22ChromeCTPolicyEnforcer15CheckComplianceEPN3net15X509CertificateERKNSt3__16vectorI13scoped_refptrINS1_2ct26SignedCertificateTimestampEENS4_9allocatorIS9_EEEERKNS1_16NetLogWithSourceEENK3$_0clEv: argument 0"}
!7 = distinct !{!7, !"_ZZN24certificate_transparency22ChromeCTPolicyEnforcer15CheckComplianceEPN3net15X509CertificateERKNSt3__16vectorI13scoped_refptrINS1_2ct26SignedCertificateTimestampEENS4_9allocatorIS9_EEEERKNS1_16NetLogWithSourceEENK3$_0clEv"}
!8 = !{!"branch_weights", i32 1, i32 2000}
