; ModuleID = '../../third_party/opus/src/celt/bands.c'
source_filename = "../../third_party/opus/src/celt/bands.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.OpusCustomMode = type { i32, i32, i32, i32, [4 x float], i16*, i32, i32, i32, i32, i8*, i16*, float*, %struct.mdct_lookup, %struct.PulseCache }
%struct.mdct_lookup = type { i32, i32, [4 x %struct.kiss_fft_state*], float* }
%struct.kiss_fft_state = type { i32, float, i32, [16 x i16], i16*, %struct.kiss_twiddle_cpx*, %struct.arch_fft_state* }
%struct.kiss_twiddle_cpx = type { float, float }
%struct.arch_fft_state = type { i32, i8* }
%struct.PulseCache = type { i32, i16*, i8*, i8* }
%struct.ec_ctx = type { i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.band_ctx = type { i32, i32, %struct.OpusCustomMode*, i32, i32, i32, i32, %struct.ec_ctx*, i32, float*, i32, i32, i32, i32, i32 }
%struct.split_ctx = type { i32, i32, i32, i32, i32, i32 }

@eMeans = external local_unnamed_addr constant [25 x float], align 16
@.str = private unnamed_addr constant [31 x i8] c"assertion failed: start <= end\00", align 1
@.str.1 = private unnamed_addr constant [40 x i8] c"../../third_party/opus/src/celt/bands.c\00", align 1
@.str.2 = private unnamed_addr constant [24 x i8] c"assertion failed: end>0\00", align 1
@.str.3 = private unnamed_addr constant [28 x i8] c"assertion failed: nbBands>0\00", align 1
@.str.4 = private unnamed_addr constant [25 x i8] c"assertion failed: sum>=0\00", align 1
@.str.5 = private unnamed_addr constant [24 x i8] c"assertion failed: N > 0\00", align 1
@quant_band.bit_interleave_table = internal unnamed_addr constant [16 x i8] c"\00\01\01\01\02\03\03\03\02\03\03\03\02\03\03\03", align 16
@quant_band.bit_deinterleave_table = internal unnamed_addr constant [16 x i8] c"\00\03\0C\0F03<?\C0\C3\CC\CF\F0\F3\FC\FF", align 16
@.str.6 = private unnamed_addr constant [27 x i8] c"assertion failed: stride>0\00", align 1
@ordery_table = internal unnamed_addr constant [30 x i32] [i32 1, i32 0, i32 3, i32 0, i32 2, i32 1, i32 7, i32 0, i32 4, i32 3, i32 6, i32 1, i32 5, i32 2, i32 15, i32 0, i32 8, i32 7, i32 12, i32 3, i32 11, i32 4, i32 14, i32 1, i32 9, i32 6, i32 13, i32 2, i32 10, i32 5], align 16
@.str.7 = private unnamed_addr constant [28 x i8] c"assertion failed: itheta>=0\00", align 1
@compute_qn.exp2_table8 = internal unnamed_addr constant [8 x i16] [i16 16384, i16 17866, i16 19483, i16 21247, i16 23170, i16 25267, i16 27554, i16 30048], align 16
@.str.8 = private unnamed_addr constant [28 x i8] c"assertion failed: qn <= 256\00", align 1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @hysteresis_decision(float, float* nocapture readonly, float* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %21

7:                                                ; preds = %5
  %8 = zext i32 %3 to i64
  br label %9

9:                                                ; preds = %15, %7
  %10 = phi i64 [ 0, %7 ], [ %16, %15 ]
  %11 = phi i32 [ 0, %7 ], [ %17, %15 ]
  %12 = getelementptr inbounds float, float* %1, i64 %10
  %13 = load float, float* %12, align 4
  %14 = fcmp ogt float %13, %0
  br i1 %14, label %19, label %15

15:                                               ; preds = %9
  %16 = add nuw nsw i64 %10, 1
  %17 = add nuw nsw i32 %11, 1
  %18 = icmp eq i64 %16, %8
  br i1 %18, label %21, label %9

19:                                               ; preds = %9
  %20 = trunc i64 %10 to i32
  br label %21

21:                                               ; preds = %15, %19, %5
  %22 = phi i32 [ 0, %5 ], [ %20, %19 ], [ %17, %15 ]
  %23 = icmp sgt i32 %22, %4
  br i1 %23, label %24, label %32

24:                                               ; preds = %21
  %25 = sext i32 %4 to i64
  %26 = getelementptr inbounds float, float* %1, i64 %25
  %27 = load float, float* %26, align 4
  %28 = getelementptr inbounds float, float* %2, i64 %25
  %29 = load float, float* %28, align 4
  %30 = fadd float %27, %29
  %31 = fcmp ogt float %30, %0
  br i1 %31, label %44, label %32

32:                                               ; preds = %24, %21
  %33 = icmp slt i32 %22, %4
  br i1 %33, label %34, label %44

34:                                               ; preds = %32
  %35 = add nsw i32 %4, -1
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds float, float* %1, i64 %36
  %38 = load float, float* %37, align 4
  %39 = getelementptr inbounds float, float* %2, i64 %36
  %40 = load float, float* %39, align 4
  %41 = fsub float %38, %40
  %42 = fcmp olt float %41, %0
  br i1 %42, label %43, label %44

43:                                               ; preds = %34
  br label %44

44:                                               ; preds = %24, %43, %34, %32
  %45 = phi i32 [ %4, %43 ], [ %22, %34 ], [ %22, %32 ], [ %4, %24 ]
  ret i32 %45
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @celt_lcg_rand(i32) local_unnamed_addr #2 {
  %2 = mul i32 %0, 1664525
  %3 = add i32 %2, 1013904223
  ret i32 %3
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden signext i16 @bitexact_cos(i16 signext) local_unnamed_addr #2 {
  %2 = sext i16 %0 to i32
  %3 = shl nsw i32 %2, 3
  %4 = mul i32 %3, %2
  %5 = add i32 %4, 32768
  %6 = ashr i32 %5, 16
  %7 = sub nsw i32 32767, %6
  %8 = mul nsw i32 %6, -626
  %9 = add nsw i32 %8, 16384
  %10 = ashr i32 %9, 15
  %11 = add nsw i32 %10, 8277
  %12 = mul nsw i32 %11, %6
  %13 = add nsw i32 %12, 16384
  %14 = lshr i32 %13, 15
  %15 = shl i32 %14, 16
  %16 = add i32 %15, -501415936
  %17 = ashr exact i32 %16, 16
  %18 = mul nsw i32 %17, %6
  %19 = add nsw i32 %18, 16384
  %20 = lshr i32 %19, 15
  %21 = add nuw nsw i32 %7, %20
  %22 = trunc i32 %21 to i16
  %23 = add i16 %22, 1
  ret i16 %23
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden i32 @bitexact_log2tan(i32, i32) local_unnamed_addr #3 {
  %3 = tail call i32 @llvm.ctlz.i32(i32 %1, i1 true), !range !2
  %4 = tail call i32 @llvm.ctlz.i32(i32 %0, i1 true), !range !2
  %5 = sub nuw nsw i32 32, %4
  %6 = add nsw i32 %3, -17
  %7 = shl i32 %1, %6
  %8 = add nsw i32 %4, -17
  %9 = shl i32 %0, %8
  %10 = or i32 %3, 2097120
  %11 = add nuw nsw i32 %5, %10
  %12 = shl i32 %11, 11
  %13 = shl i32 %9, 16
  %14 = ashr exact i32 %13, 16
  %15 = mul nsw i32 %14, -2597
  %16 = add nsw i32 %15, 16384
  %17 = ashr i32 %16, 15
  %18 = add nsw i32 %17, 7932
  %19 = mul nsw i32 %18, %14
  %20 = add nsw i32 %19, 16384
  %21 = ashr i32 %20, 15
  %22 = add nsw i32 %21, %12
  %23 = shl i32 %7, 16
  %24 = ashr exact i32 %23, 16
  %25 = mul nsw i32 %24, -2597
  %26 = add nsw i32 %25, 16384
  %27 = ashr i32 %26, 15
  %28 = add nsw i32 %27, 7932
  %29 = mul nsw i32 %28, %24
  %30 = add nsw i32 %29, 16384
  %31 = ashr i32 %30, 15
  %32 = sub i32 %22, %31
  ret i32 %32
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #4

; Function Attrs: nounwind ssp uwtable
define hidden void @compute_band_energies(%struct.OpusCustomMode* nocapture readonly, float*, float* nocapture, i32, i32, i32, i32) local_unnamed_addr #5 {
  %8 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 5
  %9 = load i16*, i16** %8, align 8
  %10 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 8
  %11 = load i32, i32* %10, align 8
  %12 = shl i32 %11, %5
  %13 = icmp sgt i32 %3, 0
  %14 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 2
  br i1 %13, label %15, label %48

15:                                               ; preds = %7
  %16 = zext i32 %3 to i64
  br label %17

17:                                               ; preds = %15, %45
  %18 = phi i32 [ %46, %45 ], [ 0, %15 ]
  %19 = mul nsw i32 %18, %12
  br label %20

20:                                               ; preds = %20, %17
  %21 = phi i64 [ 0, %17 ], [ %29, %20 ]
  %22 = getelementptr inbounds i16, i16* %9, i64 %21
  %23 = load i16, i16* %22, align 2
  %24 = sext i16 %23 to i32
  %25 = shl i32 %24, %5
  %26 = add nsw i32 %25, %19
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds float, float* %1, i64 %27
  %29 = add nuw nsw i64 %21, 1
  %30 = getelementptr inbounds i16, i16* %9, i64 %29
  %31 = load i16, i16* %30, align 2
  %32 = sext i16 %31 to i32
  %33 = sub nsw i32 %32, %24
  %34 = shl i32 %33, %5
  %35 = tail call float @celt_inner_prod_sse(float* %28, float* %28, i32 %34) #10
  %36 = fadd float %35, 0x3A53CE9A40000000
  %37 = tail call float @sqrtf(float %36) #7
  %38 = load i32, i32* %14, align 8
  %39 = mul nsw i32 %38, %18
  %40 = trunc i64 %21 to i32
  %41 = add nsw i32 %39, %40
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds float, float* %2, i64 %42
  store float %37, float* %43, align 4
  %44 = icmp eq i64 %29, %16
  br i1 %44, label %45, label %20

45:                                               ; preds = %20
  %46 = add nuw nsw i32 %18, 1
  %47 = icmp slt i32 %46, %4
  br i1 %47, label %17, label %48

48:                                               ; preds = %45, %7
  ret void
}

declare float @celt_inner_prod_sse(float*, float*, i32) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #7

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @normalise_bands(%struct.OpusCustomMode* nocapture readonly, float* noalias nocapture readonly, float* noalias nocapture, float* nocapture readonly, i32, i32, i32) local_unnamed_addr #8 {
  %8 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 5
  %9 = load i16*, i16** %8, align 8
  %10 = icmp sgt i32 %4, 0
  br i1 %10, label %11, label %134

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 2
  %13 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 8
  %14 = load i32, i32* %13, align 8
  %15 = mul nsw i32 %14, %6
  %16 = sext i32 %5 to i64
  %17 = sext i32 %15 to i64
  %18 = load i32, i32* %12, align 8
  %19 = load i16, i16* %9, align 2
  %20 = sext i32 %18 to i64
  %21 = zext i32 %4 to i64
  br label %22

22:                                               ; preds = %11, %131
  %23 = phi i64 [ 0, %11 ], [ %132, %131 ]
  %24 = mul nsw i64 %23, %20
  %25 = mul nsw i64 %23, %17
  br label %26

26:                                               ; preds = %51, %22
  %27 = phi i16 [ %19, %22 ], [ %38, %51 ]
  %28 = phi i64 [ 0, %22 ], [ %36, %51 ]
  %29 = add nsw i64 %24, %28
  %30 = getelementptr inbounds float, float* %3, i64 %29
  %31 = load float, float* %30, align 4
  %32 = fadd float %31, 0x3A53CE9A40000000
  %33 = fdiv float 1.000000e+00, %32
  %34 = sext i16 %27 to i32
  %35 = mul i32 %34, %6
  %36 = add nuw nsw i64 %28, 1
  %37 = getelementptr inbounds i16, i16* %9, i64 %36
  %38 = load i16, i16* %37, align 2
  %39 = sext i16 %38 to i32
  %40 = mul nsw i32 %39, %6
  %41 = icmp slt i32 %35, %40
  br i1 %41, label %53, label %51

42:                                               ; preds = %60, %42
  %43 = phi i64 [ %49, %42 ], [ %61, %60 ]
  %44 = add nsw i64 %43, %25
  %45 = getelementptr inbounds float, float* %1, i64 %44
  %46 = load float, float* %45, align 4
  %47 = fmul float %33, %46
  %48 = getelementptr inbounds float, float* %2, i64 %44
  store float %47, float* %48, align 4
  %49 = add nsw i64 %43, 1
  %50 = icmp slt i64 %49, %55
  br i1 %50, label %42, label %51, !llvm.loop !3

51:                                               ; preds = %42, %129, %26
  %52 = icmp eq i64 %36, %21
  br i1 %52, label %131, label %26

53:                                               ; preds = %26
  %54 = sext i32 %35 to i64
  %55 = sext i32 %40 to i64
  %56 = mul i32 %39, %6
  %57 = sext i32 %56 to i64
  %58 = sub nsw i64 %57, %54
  %59 = icmp ult i64 %58, 8
  br i1 %59, label %60, label %62

60:                                               ; preds = %129, %53
  %61 = phi i64 [ %54, %53 ], [ %64, %129 ]
  br label %42

62:                                               ; preds = %53
  %63 = and i64 %58, -8
  %64 = add nsw i64 %63, %54
  %65 = insertelement <4 x float> undef, float %33, i32 0
  %66 = shufflevector <4 x float> %65, <4 x float> undef, <4 x i32> zeroinitializer
  %67 = insertelement <4 x float> undef, float %33, i32 0
  %68 = shufflevector <4 x float> %67, <4 x float> undef, <4 x i32> zeroinitializer
  %69 = add nsw i64 %63, -8
  %70 = lshr exact i64 %69, 3
  %71 = add nuw nsw i64 %70, 1
  %72 = and i64 %71, 1
  %73 = icmp eq i64 %69, 0
  br i1 %73, label %111, label %74

74:                                               ; preds = %62
  %75 = sub nuw nsw i64 %71, %72
  br label %76

76:                                               ; preds = %76, %74
  %77 = phi i64 [ 0, %74 ], [ %108, %76 ]
  %78 = phi i64 [ %75, %74 ], [ %109, %76 ]
  %79 = add i64 %77, %54
  %80 = add nsw i64 %79, %25
  %81 = getelementptr inbounds float, float* %1, i64 %80
  %82 = bitcast float* %81 to <4 x float>*
  %83 = load <4 x float>, <4 x float>* %82, align 4
  %84 = getelementptr inbounds float, float* %81, i64 4
  %85 = bitcast float* %84 to <4 x float>*
  %86 = load <4 x float>, <4 x float>* %85, align 4
  %87 = fmul <4 x float> %66, %83
  %88 = fmul <4 x float> %68, %86
  %89 = getelementptr inbounds float, float* %2, i64 %80
  %90 = bitcast float* %89 to <4 x float>*
  store <4 x float> %87, <4 x float>* %90, align 4
  %91 = getelementptr inbounds float, float* %89, i64 4
  %92 = bitcast float* %91 to <4 x float>*
  store <4 x float> %88, <4 x float>* %92, align 4
  %93 = or i64 %77, 8
  %94 = add i64 %93, %54
  %95 = add nsw i64 %94, %25
  %96 = getelementptr inbounds float, float* %1, i64 %95
  %97 = bitcast float* %96 to <4 x float>*
  %98 = load <4 x float>, <4 x float>* %97, align 4
  %99 = getelementptr inbounds float, float* %96, i64 4
  %100 = bitcast float* %99 to <4 x float>*
  %101 = load <4 x float>, <4 x float>* %100, align 4
  %102 = fmul <4 x float> %66, %98
  %103 = fmul <4 x float> %68, %101
  %104 = getelementptr inbounds float, float* %2, i64 %95
  %105 = bitcast float* %104 to <4 x float>*
  store <4 x float> %102, <4 x float>* %105, align 4
  %106 = getelementptr inbounds float, float* %104, i64 4
  %107 = bitcast float* %106 to <4 x float>*
  store <4 x float> %103, <4 x float>* %107, align 4
  %108 = add i64 %77, 16
  %109 = add i64 %78, -2
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %111, label %76, !llvm.loop !6

111:                                              ; preds = %76, %62
  %112 = phi i64 [ 0, %62 ], [ %108, %76 ]
  %113 = icmp eq i64 %72, 0
  br i1 %113, label %129, label %114

114:                                              ; preds = %111
  %115 = add i64 %112, %54
  %116 = add nsw i64 %115, %25
  %117 = getelementptr inbounds float, float* %1, i64 %116
  %118 = bitcast float* %117 to <4 x float>*
  %119 = load <4 x float>, <4 x float>* %118, align 4
  %120 = getelementptr inbounds float, float* %117, i64 4
  %121 = bitcast float* %120 to <4 x float>*
  %122 = load <4 x float>, <4 x float>* %121, align 4
  %123 = fmul <4 x float> %66, %119
  %124 = fmul <4 x float> %68, %122
  %125 = getelementptr inbounds float, float* %2, i64 %116
  %126 = bitcast float* %125 to <4 x float>*
  store <4 x float> %123, <4 x float>* %126, align 4
  %127 = getelementptr inbounds float, float* %125, i64 4
  %128 = bitcast float* %127 to <4 x float>*
  store <4 x float> %124, <4 x float>* %128, align 4
  br label %129

129:                                              ; preds = %111, %114
  %130 = icmp eq i64 %58, %63
  br i1 %130, label %51, label %60

131:                                              ; preds = %51
  %132 = add nuw nsw i64 %23, 1
  %133 = icmp slt i64 %132, %16
  br i1 %133, label %22, label %134

134:                                              ; preds = %131, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @denormalise_bands(%struct.OpusCustomMode* nocapture readonly, float* noalias nocapture readonly, float* noalias nocapture, float* nocapture readonly, i32, i32, i32, i32, i32) local_unnamed_addr #5 {
  %10 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 5
  %11 = load i16*, i16** %10, align 8
  %12 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 8
  %13 = load i32, i32* %12, align 8
  %14 = mul nsw i32 %13, %6
  %15 = sext i32 %5 to i64
  %16 = getelementptr inbounds i16, i16* %11, i64 %15
  %17 = load i16, i16* %16, align 2
  %18 = sext i16 %17 to i32
  %19 = mul nsw i32 %18, %6
  %20 = icmp eq i32 %7, 1
  br i1 %20, label %25, label %21

21:                                               ; preds = %9
  %22 = sdiv i32 %14, %7
  %23 = icmp slt i32 %19, %22
  %24 = select i1 %23, i32 %19, i32 %22
  br label %25

25:                                               ; preds = %9, %21
  %26 = phi i32 [ %24, %21 ], [ %19, %9 ]
  %27 = icmp eq i32 %8, 0
  %28 = select i1 %27, i32 %5, i32 0
  %29 = select i1 %27, i32 %26, i32 0
  %30 = select i1 %27, i32 %4, i32 0
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds i16, i16* %11, i64 %31
  %33 = load i16, i16* %32, align 2
  %34 = sext i16 %33 to i32
  %35 = mul nsw i32 %34, %6
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds float, float* %1, i64 %36
  %38 = icmp sgt i32 %35, 0
  br i1 %38, label %45, label %39

39:                                               ; preds = %45, %25
  %40 = phi i16 [ %33, %25 ], [ %50, %45 ]
  %41 = phi float* [ %2, %25 ], [ %48, %45 ]
  %42 = icmp slt i32 %30, %28
  br i1 %42, label %43, label %193

43:                                               ; preds = %39
  %44 = sext i32 %28 to i64
  br label %60

45:                                               ; preds = %25, %45
  %46 = phi float* [ %48, %45 ], [ %2, %25 ]
  %47 = phi i32 [ %49, %45 ], [ 0, %25 ]
  %48 = getelementptr inbounds float, float* %46, i64 1
  store float 0.000000e+00, float* %46, align 4
  %49 = add nuw nsw i32 %47, 1
  %50 = load i16, i16* %32, align 2
  %51 = sext i16 %50 to i32
  %52 = mul nsw i32 %51, %6
  %53 = icmp slt i32 %49, %52
  br i1 %53, label %45, label %39

54:                                               ; preds = %183, %177
  %55 = phi float* [ %116, %177 ], [ %187, %183 ]
  %56 = phi float* [ %115, %177 ], [ %190, %183 ]
  %57 = icmp eq i64 %67, %44
  br i1 %57, label %193, label %58

58:                                               ; preds = %54
  %59 = load i16, i16* %68, align 2
  br label %60

60:                                               ; preds = %58, %43
  %61 = phi i16 [ %40, %43 ], [ %59, %58 ]
  %62 = phi i64 [ %31, %43 ], [ %67, %58 ]
  %63 = phi float* [ %37, %43 ], [ %55, %58 ]
  %64 = phi float* [ %41, %43 ], [ %56, %58 ]
  %65 = sext i16 %61 to i32
  %66 = mul nsw i32 %65, %6
  %67 = add nsw i64 %62, 1
  %68 = getelementptr inbounds i16, i16* %11, i64 %67
  %69 = load i16, i16* %68, align 2
  %70 = sext i16 %69 to i32
  %71 = mul nsw i32 %70, %6
  %72 = getelementptr inbounds float, float* %3, i64 %62
  %73 = load float, float* %72, align 4
  %74 = getelementptr inbounds [25 x float], [25 x float]* @eMeans, i64 0, i64 %62
  %75 = load float, float* %74, align 4
  %76 = fadd float %73, %75
  %77 = fcmp ogt float %76, 3.200000e+01
  %78 = select i1 %77, float 3.200000e+01, float %76
  %79 = fpext float %78 to double
  %80 = fmul double %79, 0x3FE62E42FEFA39EF
  %81 = tail call double @exp(double %80) #10
  %82 = fptrunc double %81 to float
  %83 = sext i16 %69 to i32
  %84 = mul i32 %83, %6
  %85 = sext i16 %61 to i32
  %86 = mul i32 %85, %6
  %87 = add nsw i32 %86, 1
  %88 = icmp sgt i32 %84, %87
  %89 = select i1 %88, i32 %84, i32 %87
  %90 = xor i32 %86, -1
  %91 = add i32 %89, %90
  %92 = zext i32 %91 to i64
  %93 = add nuw nsw i64 %92, 1
  %94 = icmp ult i64 %93, 8
  br i1 %94, label %179, label %95

95:                                               ; preds = %60
  %96 = getelementptr float, float* %64, i64 1
  %97 = sext i16 %69 to i32
  %98 = mul i32 %97, %6
  %99 = sext i16 %61 to i32
  %100 = mul i32 %99, %6
  %101 = add nsw i32 %100, 1
  %102 = icmp sgt i32 %98, %101
  %103 = select i1 %102, i32 %98, i32 %101
  %104 = xor i32 %100, -1
  %105 = add i32 %103, %104
  %106 = zext i32 %105 to i64
  %107 = getelementptr float, float* %96, i64 %106
  %108 = getelementptr float, float* %63, i64 1
  %109 = getelementptr float, float* %108, i64 %106
  %110 = icmp ult float* %64, %109
  %111 = icmp ult float* %63, %107
  %112 = and i1 %110, %111
  br i1 %112, label %179, label %113

113:                                              ; preds = %95
  %114 = and i64 %93, 8589934584
  %115 = getelementptr float, float* %64, i64 %114
  %116 = getelementptr float, float* %63, i64 %114
  %117 = trunc i64 %114 to i32
  %118 = add i32 %66, %117
  %119 = insertelement <4 x float> undef, float %82, i32 0
  %120 = shufflevector <4 x float> %119, <4 x float> undef, <4 x i32> zeroinitializer
  %121 = insertelement <4 x float> undef, float %82, i32 0
  %122 = shufflevector <4 x float> %121, <4 x float> undef, <4 x i32> zeroinitializer
  %123 = add nsw i64 %114, -8
  %124 = lshr exact i64 %123, 3
  %125 = add nuw nsw i64 %124, 1
  %126 = and i64 %125, 1
  %127 = icmp eq i64 %123, 0
  br i1 %127, label %161, label %128

128:                                              ; preds = %113
  %129 = sub nuw nsw i64 %125, %126
  br label %130

130:                                              ; preds = %130, %128
  %131 = phi i64 [ 0, %128 ], [ %158, %130 ]
  %132 = phi i64 [ %129, %128 ], [ %159, %130 ]
  %133 = getelementptr float, float* %64, i64 %131
  %134 = getelementptr float, float* %63, i64 %131
  %135 = bitcast float* %134 to <4 x float>*
  %136 = load <4 x float>, <4 x float>* %135, align 4, !alias.scope !7
  %137 = getelementptr float, float* %134, i64 4
  %138 = bitcast float* %137 to <4 x float>*
  %139 = load <4 x float>, <4 x float>* %138, align 4, !alias.scope !7
  %140 = fmul <4 x float> %136, %120
  %141 = fmul <4 x float> %139, %122
  %142 = bitcast float* %133 to <4 x float>*
  store <4 x float> %140, <4 x float>* %142, align 4, !alias.scope !10, !noalias !7
  %143 = getelementptr float, float* %133, i64 4
  %144 = bitcast float* %143 to <4 x float>*
  store <4 x float> %141, <4 x float>* %144, align 4, !alias.scope !10, !noalias !7
  %145 = or i64 %131, 8
  %146 = getelementptr float, float* %64, i64 %145
  %147 = getelementptr float, float* %63, i64 %145
  %148 = bitcast float* %147 to <4 x float>*
  %149 = load <4 x float>, <4 x float>* %148, align 4, !alias.scope !7
  %150 = getelementptr float, float* %147, i64 4
  %151 = bitcast float* %150 to <4 x float>*
  %152 = load <4 x float>, <4 x float>* %151, align 4, !alias.scope !7
  %153 = fmul <4 x float> %149, %120
  %154 = fmul <4 x float> %152, %122
  %155 = bitcast float* %146 to <4 x float>*
  store <4 x float> %153, <4 x float>* %155, align 4, !alias.scope !10, !noalias !7
  %156 = getelementptr float, float* %146, i64 4
  %157 = bitcast float* %156 to <4 x float>*
  store <4 x float> %154, <4 x float>* %157, align 4, !alias.scope !10, !noalias !7
  %158 = add i64 %131, 16
  %159 = add i64 %132, -2
  %160 = icmp eq i64 %159, 0
  br i1 %160, label %161, label %130, !llvm.loop !12

161:                                              ; preds = %130, %113
  %162 = phi i64 [ 0, %113 ], [ %158, %130 ]
  %163 = icmp eq i64 %126, 0
  br i1 %163, label %177, label %164

164:                                              ; preds = %161
  %165 = getelementptr float, float* %64, i64 %162
  %166 = getelementptr float, float* %63, i64 %162
  %167 = bitcast float* %166 to <4 x float>*
  %168 = load <4 x float>, <4 x float>* %167, align 4, !alias.scope !7
  %169 = getelementptr float, float* %166, i64 4
  %170 = bitcast float* %169 to <4 x float>*
  %171 = load <4 x float>, <4 x float>* %170, align 4, !alias.scope !7
  %172 = fmul <4 x float> %168, %120
  %173 = fmul <4 x float> %171, %122
  %174 = bitcast float* %165 to <4 x float>*
  store <4 x float> %172, <4 x float>* %174, align 4, !alias.scope !10, !noalias !7
  %175 = getelementptr float, float* %165, i64 4
  %176 = bitcast float* %175 to <4 x float>*
  store <4 x float> %173, <4 x float>* %176, align 4, !alias.scope !10, !noalias !7
  br label %177

177:                                              ; preds = %161, %164
  %178 = icmp eq i64 %93, %114
  br i1 %178, label %54, label %179

179:                                              ; preds = %177, %95, %60
  %180 = phi float* [ %64, %95 ], [ %64, %60 ], [ %115, %177 ]
  %181 = phi float* [ %63, %95 ], [ %63, %60 ], [ %116, %177 ]
  %182 = phi i32 [ %66, %95 ], [ %66, %60 ], [ %118, %177 ]
  br label %183

183:                                              ; preds = %179, %183
  %184 = phi float* [ %190, %183 ], [ %180, %179 ]
  %185 = phi float* [ %187, %183 ], [ %181, %179 ]
  %186 = phi i32 [ %191, %183 ], [ %182, %179 ]
  %187 = getelementptr inbounds float, float* %185, i64 1
  %188 = load float, float* %185, align 4
  %189 = fmul float %188, %82
  %190 = getelementptr inbounds float, float* %184, i64 1
  store float %189, float* %184, align 4
  %191 = add nsw i32 %186, 1
  %192 = icmp slt i32 %191, %71
  br i1 %192, label %183, label %54, !llvm.loop !13

193:                                              ; preds = %54, %39
  %194 = icmp sgt i32 %30, %28
  br i1 %194, label %195, label %196

195:                                              ; preds = %193
  tail call void @celt_fatal(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.1, i64 0, i64 0), i32 263) #11
  unreachable

196:                                              ; preds = %193
  %197 = sext i32 %29 to i64
  %198 = getelementptr inbounds float, float* %2, i64 %197
  %199 = bitcast float* %198 to i8*
  %200 = sub nsw i32 %14, %29
  %201 = sext i32 %200 to i64
  %202 = shl nsw i64 %201, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %199, i8 0, i64 %202, i1 false)
  ret void
}

; Function Attrs: nofree nounwind
declare double @exp(double) local_unnamed_addr #7

; Function Attrs: noreturn
declare void @celt_fatal(i8*, i8*, i32) local_unnamed_addr #9

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @anti_collapse(%struct.OpusCustomMode* nocapture readonly, float*, i8* nocapture readonly, i32, i32, i32, i32, i32, float* nocapture readonly, float* nocapture readonly, float* nocapture readonly, i32* nocapture readonly, i32, i32) local_unnamed_addr #5 {
  %15 = icmp slt i32 %6, %7
  br i1 %15, label %16, label %201

16:                                               ; preds = %14
  %17 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 5
  %18 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 2
  %19 = icmp eq i32 %4, 1
  %20 = icmp eq i32 %3, 3
  %21 = shl i32 1, %3
  %22 = icmp eq i32 %3, 31
  %23 = sext i32 %4 to i64
  %24 = sext i32 %5 to i64
  %25 = sext i32 %6 to i64
  %26 = sext i32 %7 to i64
  br label %29

27:                                               ; preds = %197
  %28 = icmp eq i64 %33, %26
  br i1 %28, label %201, label %29

29:                                               ; preds = %27, %16
  %30 = phi i64 [ %25, %16 ], [ %33, %27 ]
  %31 = phi i32 [ %12, %16 ], [ %198, %27 ]
  %32 = load i16*, i16** %17, align 8
  %33 = add nsw i64 %30, 1
  %34 = getelementptr inbounds i16, i16* %32, i64 %33
  %35 = load i16, i16* %34, align 2
  %36 = sext i16 %35 to i32
  %37 = getelementptr inbounds i16, i16* %32, i64 %30
  %38 = load i16, i16* %37, align 2
  %39 = sext i16 %38 to i32
  %40 = sub nsw i32 %36, %39
  %41 = getelementptr inbounds i32, i32* %11, i64 %30
  %42 = load i32, i32* %41, align 4
  %43 = add nsw i32 %42, 1
  %44 = udiv i32 %43, %40
  %45 = lshr i32 %44, %3
  %46 = sitofp i32 %45 to float
  %47 = fmul float %46, -1.250000e-01
  %48 = fpext float %47 to double
  %49 = fmul double %48, 0x3FE62E42FEFA39EF
  %50 = tail call double @exp(double %49) #10
  %51 = fptrunc double %50 to float
  %52 = fmul float %51, 5.000000e-01
  %53 = shl i32 %40, %3
  %54 = sitofp i32 %53 to double
  %55 = tail call double @sqrt(double %54) #10
  %56 = fptrunc double %55 to float
  %57 = fdiv float 1.000000e+00, %56
  %58 = mul nsw i64 %30, %23
  %59 = icmp sgt i32 %40, 0
  %60 = trunc i64 %30 to i32
  %61 = sub nsw i32 %36, %39
  %62 = xor i32 %39, -1
  %63 = and i32 %61, 1
  %64 = sub nsw i32 0, %36
  %65 = icmp eq i32 %62, %64
  %66 = sub nsw i32 %61, %63
  %67 = icmp eq i32 %63, 0
  br label %68

68:                                               ; preds = %197, %29
  %69 = phi i64 [ %199, %197 ], [ 0, %29 ]
  %70 = phi i32 [ %198, %197 ], [ %31, %29 ]
  %71 = load i32, i32* %18, align 8
  %72 = trunc i64 %69 to i32
  %73 = mul nsw i32 %71, %72
  %74 = add nsw i32 %73, %60
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds float, float* %9, i64 %75
  %77 = load float, float* %76, align 4
  %78 = getelementptr inbounds float, float* %10, i64 %75
  %79 = load float, float* %78, align 4
  br i1 %19, label %80, label %91

80:                                               ; preds = %68
  %81 = sext i32 %71 to i64
  %82 = add nsw i64 %30, %81
  %83 = getelementptr inbounds float, float* %9, i64 %82
  %84 = load float, float* %83, align 4
  %85 = fcmp ogt float %77, %84
  %86 = select i1 %85, float %77, float %84
  %87 = getelementptr inbounds float, float* %10, i64 %82
  %88 = load float, float* %87, align 4
  %89 = fcmp ogt float %79, %88
  %90 = select i1 %89, float %79, float %88
  br label %91

91:                                               ; preds = %80, %68
  %92 = phi float [ %77, %68 ], [ %86, %80 ]
  %93 = phi float [ %79, %68 ], [ %90, %80 ]
  %94 = getelementptr inbounds float, float* %8, i64 %75
  %95 = load float, float* %94, align 4
  %96 = fcmp olt float %92, %93
  %97 = select i1 %96, float %92, float %93
  %98 = fsub float %95, %97
  %99 = fcmp olt float %98, 0.000000e+00
  %100 = select i1 %99, float 0.000000e+00, float %98
  %101 = fsub float -0.000000e+00, %100
  %102 = fpext float %101 to double
  %103 = fmul double %102, 0x3FE62E42FEFA39EF
  %104 = tail call double @exp(double %103) #10
  %105 = fptrunc double %104 to float
  %106 = fmul float %105, 2.000000e+00
  %107 = fmul float %106, 0x3FF6A09E60000000
  %108 = select i1 %20, float %107, float %106
  %109 = fcmp olt float %52, %108
  %110 = select i1 %109, float %52, float %108
  %111 = fmul float %57, %110
  %112 = mul nsw i64 %69, %24
  %113 = getelementptr inbounds float, float* %1, i64 %112
  %114 = load i16*, i16** %17, align 8
  %115 = getelementptr inbounds i16, i16* %114, i64 %30
  %116 = load i16, i16* %115, align 2
  %117 = sext i16 %116 to i32
  %118 = shl i32 %117, %3
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds float, float* %113, i64 %119
  br i1 %22, label %197, label %121

121:                                              ; preds = %91
  %122 = add nsw i64 %69, %58
  %123 = getelementptr inbounds i8, i8* %2, i64 %122
  %124 = fsub float -0.000000e+00, %111
  br i1 %59, label %128, label %125

125:                                              ; preds = %121
  %126 = load i8, i8* %123, align 1
  %127 = zext i8 %126 to i32
  br label %183

128:                                              ; preds = %121, %152
  %129 = phi i32 [ %154, %152 ], [ 0, %121 ]
  %130 = phi i32 [ %153, %152 ], [ %70, %121 ]
  %131 = phi i32 [ %155, %152 ], [ 0, %121 ]
  %132 = load i8, i8* %123, align 1
  %133 = zext i8 %132 to i32
  %134 = shl i32 1, %131
  %135 = and i32 %134, %133
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %137, label %152

137:                                              ; preds = %128
  br i1 %65, label %138, label %157

138:                                              ; preds = %157, %137
  %139 = phi i32 [ undef, %137 ], [ %172, %157 ]
  %140 = phi i32 [ %130, %137 ], [ %172, %157 ]
  %141 = phi i32 [ 0, %137 ], [ %180, %157 ]
  br i1 %67, label %152, label %142

142:                                              ; preds = %138
  %143 = mul i32 %140, 1664525
  %144 = add i32 %143, 1013904223
  %145 = trunc i32 %144 to i16
  %146 = icmp slt i16 %145, 0
  %147 = select i1 %146, float %111, float %124
  %148 = shl i32 %141, %3
  %149 = add nsw i32 %148, %131
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds float, float* %120, i64 %150
  store float %147, float* %151, align 4
  br label %152

152:                                              ; preds = %142, %138, %128
  %153 = phi i32 [ %130, %128 ], [ %139, %138 ], [ %144, %142 ]
  %154 = phi i32 [ %129, %128 ], [ 1, %138 ], [ 1, %142 ]
  %155 = add nuw nsw i32 %131, 1
  %156 = icmp slt i32 %155, %21
  br i1 %156, label %128, label %192

157:                                              ; preds = %137, %157
  %158 = phi i32 [ %172, %157 ], [ %130, %137 ]
  %159 = phi i32 [ %180, %157 ], [ 0, %137 ]
  %160 = phi i32 [ %181, %157 ], [ %66, %137 ]
  %161 = mul i32 %158, 1664525
  %162 = add i32 %161, 1013904223
  %163 = trunc i32 %162 to i16
  %164 = icmp slt i16 %163, 0
  %165 = select i1 %164, float %111, float %124
  %166 = shl i32 %159, %3
  %167 = add nsw i32 %166, %131
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds float, float* %120, i64 %168
  store float %165, float* %169, align 4
  %170 = or i32 %159, 1
  %171 = mul i32 %162, 1664525
  %172 = add i32 %171, 1013904223
  %173 = trunc i32 %172 to i16
  %174 = icmp slt i16 %173, 0
  %175 = select i1 %174, float %111, float %124
  %176 = shl i32 %170, %3
  %177 = add nsw i32 %176, %131
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds float, float* %120, i64 %178
  store float %175, float* %179, align 4
  %180 = add nuw nsw i32 %159, 2
  %181 = add i32 %160, -2
  %182 = icmp eq i32 %181, 0
  br i1 %182, label %138, label %157

183:                                              ; preds = %125, %183
  %184 = phi i32 [ %189, %183 ], [ 0, %125 ]
  %185 = phi i32 [ %190, %183 ], [ 0, %125 ]
  %186 = shl i32 1, %185
  %187 = and i32 %186, %127
  %188 = icmp eq i32 %187, 0
  %189 = select i1 %188, i32 1, i32 %184
  %190 = add nuw nsw i32 %185, 1
  %191 = icmp slt i32 %190, %21
  br i1 %191, label %183, label %192

192:                                              ; preds = %183, %152
  %193 = phi i32 [ %153, %152 ], [ %70, %183 ]
  %194 = phi i32 [ %154, %152 ], [ %189, %183 ]
  %195 = icmp eq i32 %194, 0
  br i1 %195, label %197, label %196

196:                                              ; preds = %192
  tail call void @renormalise_vector(float* %120, i32 %53, float 1.000000e+00, i32 %13) #10
  br label %197

197:                                              ; preds = %91, %192, %196
  %198 = phi i32 [ %193, %192 ], [ %193, %196 ], [ %70, %91 ]
  %199 = add nuw nsw i64 %69, 1
  %200 = icmp slt i64 %199, %23
  br i1 %200, label %68, label %27

201:                                              ; preds = %27, %14
  ret void
}

declare void @renormalise_vector(float*, i32, float, i32) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden i32 @spreading_decision(%struct.OpusCustomMode* nocapture readonly, float* nocapture readonly, i32* nocapture, i32, i32* nocapture, i32* nocapture, i32, i32, i32, i32, i32* nocapture readonly) local_unnamed_addr #5 {
  %12 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 5
  %13 = load i16*, i16** %12, align 8
  %14 = icmp sgt i32 %7, 0
  br i1 %14, label %16, label %15

15:                                               ; preds = %11
  tail call void @celt_fatal(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.1, i64 0, i64 0), i32 489) #11
  unreachable

16:                                               ; preds = %11
  %17 = sext i32 %7 to i64
  %18 = getelementptr inbounds i16, i16* %13, i64 %17
  %19 = load i16, i16* %18, align 2
  %20 = sext i16 %19 to i32
  %21 = add nsw i32 %7, -1
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i16, i16* %13, i64 %22
  %24 = load i16, i16* %23, align 2
  %25 = sext i16 %24 to i32
  %26 = sub nsw i32 %20, %25
  %27 = mul nsw i32 %26, %9
  %28 = icmp slt i32 %27, 9
  br i1 %28, label %236, label %29

29:                                               ; preds = %16
  %30 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 8
  %31 = load i32, i32* %30, align 8
  %32 = mul nsw i32 %31, %9
  %33 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 2
  %34 = sext i32 %8 to i64
  %35 = sext i32 %32 to i64
  %36 = load i16, i16* %13, align 2
  %37 = zext i32 %7 to i64
  br label %38

38:                                               ; preds = %29, %185
  %39 = phi i64 [ 0, %29 ], [ %186, %185 ]
  %40 = phi i32 [ 0, %29 ], [ %114, %185 ]
  %41 = phi i32 [ 0, %29 ], [ %115, %185 ]
  %42 = phi i32 [ 0, %29 ], [ %116, %185 ]
  %43 = mul nsw i64 %39, %35
  %44 = getelementptr inbounds float, float* %1, i64 %43
  br label %45

45:                                               ; preds = %113, %38
  %46 = phi i16 [ %36, %38 ], [ %57, %113 ]
  %47 = phi i64 [ 0, %38 ], [ %55, %113 ]
  %48 = phi i32 [ %42, %38 ], [ %116, %113 ]
  %49 = phi i32 [ %41, %38 ], [ %115, %113 ]
  %50 = phi i32 [ %40, %38 ], [ %114, %113 ]
  %51 = sext i16 %46 to i32
  %52 = mul nsw i32 %51, %9
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds float, float* %44, i64 %53
  %55 = add nuw nsw i64 %47, 1
  %56 = getelementptr inbounds i16, i16* %13, i64 %55
  %57 = load i16, i16* %56, align 2
  %58 = sext i16 %57 to i32
  %59 = sub nsw i32 %58, %51
  %60 = mul i32 %59, %9
  %61 = icmp slt i32 %60, 9
  br i1 %61, label %113, label %118

62:                                               ; preds = %93, %165
  %63 = phi i32 [ %171, %165 ], [ %104, %93 ]
  %64 = phi i32 [ %177, %165 ], [ %107, %93 ]
  %65 = phi i32 [ %183, %165 ], [ %110, %93 ]
  %66 = load i32, i32* %33, align 8
  %67 = add nsw i32 %66, -4
  %68 = sext i32 %67 to i64
  %69 = icmp sgt i64 %47, %68
  br i1 %69, label %70, label %75

70:                                               ; preds = %62
  %71 = add nuw nsw i32 %64, %63
  %72 = shl nsw i32 %71, 5
  %73 = udiv i32 %72, %60
  %74 = add i32 %73, %48
  br label %75

75:                                               ; preds = %70, %62
  %76 = phi i32 [ %74, %70 ], [ %48, %62 ]
  %77 = shl nuw nsw i32 %65, 1
  %78 = icmp sge i32 %77, %60
  %79 = zext i1 %78 to i32
  %80 = shl nuw nsw i32 %64, 1
  %81 = icmp sge i32 %80, %60
  %82 = zext i1 %81 to i32
  %83 = shl nuw nsw i32 %63, 1
  %84 = icmp sge i32 %83, %60
  %85 = zext i1 %84 to i32
  %86 = add nuw nsw i32 %82, %85
  %87 = add nuw nsw i32 %86, %79
  %88 = getelementptr inbounds i32, i32* %10, i64 %47
  %89 = load i32, i32* %88, align 4
  %90 = mul nsw i32 %89, %87
  %91 = add nsw i32 %90, %50
  %92 = add nsw i32 %89, %49
  br label %113

93:                                               ; preds = %165, %93
  %94 = phi i64 [ %111, %93 ], [ %122, %165 ]
  %95 = phi i32 [ %110, %93 ], [ %183, %165 ]
  %96 = phi i32 [ %107, %93 ], [ %177, %165 ]
  %97 = phi i32 [ %104, %93 ], [ %171, %165 ]
  %98 = getelementptr inbounds float, float* %54, i64 %94
  %99 = load float, float* %98, align 4
  %100 = fmul float %99, %99
  %101 = fmul float %100, %119
  %102 = fcmp olt float %101, 2.500000e-01
  %103 = zext i1 %102 to i32
  %104 = add nuw nsw i32 %97, %103
  %105 = fcmp olt float %101, 6.250000e-02
  %106 = zext i1 %105 to i32
  %107 = add nuw nsw i32 %96, %106
  %108 = fcmp olt float %101, 1.562500e-02
  %109 = zext i1 %108 to i32
  %110 = add nuw nsw i32 %95, %109
  %111 = add nuw nsw i64 %94, 1
  %112 = icmp eq i64 %111, %120
  br i1 %112, label %62, label %93, !llvm.loop !14

113:                                              ; preds = %75, %45
  %114 = phi i32 [ %91, %75 ], [ %50, %45 ]
  %115 = phi i32 [ %92, %75 ], [ %49, %45 ]
  %116 = phi i32 [ %76, %75 ], [ %48, %45 ]
  %117 = icmp eq i64 %55, %37
  br i1 %117, label %185, label %45

118:                                              ; preds = %45
  %119 = sitofp i32 %60 to float
  %120 = zext i32 %60 to i64
  %121 = zext i32 %60 to i64
  %122 = and i64 %121, 4294967288
  %123 = insertelement <4 x float> undef, float %119, i32 0
  %124 = shufflevector <4 x float> %123, <4 x float> undef, <4 x i32> zeroinitializer
  %125 = insertelement <4 x float> undef, float %119, i32 0
  %126 = shufflevector <4 x float> %125, <4 x float> undef, <4 x i32> zeroinitializer
  br label %127

127:                                              ; preds = %127, %118
  %128 = phi i64 [ 0, %118 ], [ %163, %127 ]
  %129 = phi <4 x i32> [ zeroinitializer, %118 ], [ %161, %127 ]
  %130 = phi <4 x i32> [ zeroinitializer, %118 ], [ %162, %127 ]
  %131 = phi <4 x i32> [ zeroinitializer, %118 ], [ %155, %127 ]
  %132 = phi <4 x i32> [ zeroinitializer, %118 ], [ %156, %127 ]
  %133 = phi <4 x i32> [ zeroinitializer, %118 ], [ %149, %127 ]
  %134 = phi <4 x i32> [ zeroinitializer, %118 ], [ %150, %127 ]
  %135 = getelementptr inbounds float, float* %54, i64 %128
  %136 = bitcast float* %135 to <4 x float>*
  %137 = load <4 x float>, <4 x float>* %136, align 4
  %138 = getelementptr inbounds float, float* %135, i64 4
  %139 = bitcast float* %138 to <4 x float>*
  %140 = load <4 x float>, <4 x float>* %139, align 4
  %141 = fmul <4 x float> %137, %137
  %142 = fmul <4 x float> %140, %140
  %143 = fmul <4 x float> %141, %124
  %144 = fmul <4 x float> %142, %126
  %145 = fcmp olt <4 x float> %143, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %146 = fcmp olt <4 x float> %144, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %147 = zext <4 x i1> %145 to <4 x i32>
  %148 = zext <4 x i1> %146 to <4 x i32>
  %149 = add nuw nsw <4 x i32> %133, %147
  %150 = add nuw nsw <4 x i32> %134, %148
  %151 = fcmp olt <4 x float> %143, <float 6.250000e-02, float 6.250000e-02, float 6.250000e-02, float 6.250000e-02>
  %152 = fcmp olt <4 x float> %144, <float 6.250000e-02, float 6.250000e-02, float 6.250000e-02, float 6.250000e-02>
  %153 = zext <4 x i1> %151 to <4 x i32>
  %154 = zext <4 x i1> %152 to <4 x i32>
  %155 = add nuw nsw <4 x i32> %131, %153
  %156 = add nuw nsw <4 x i32> %132, %154
  %157 = fcmp olt <4 x float> %143, <float 1.562500e-02, float 1.562500e-02, float 1.562500e-02, float 1.562500e-02>
  %158 = fcmp olt <4 x float> %144, <float 1.562500e-02, float 1.562500e-02, float 1.562500e-02, float 1.562500e-02>
  %159 = zext <4 x i1> %157 to <4 x i32>
  %160 = zext <4 x i1> %158 to <4 x i32>
  %161 = add nuw nsw <4 x i32> %129, %159
  %162 = add nuw nsw <4 x i32> %130, %160
  %163 = add i64 %128, 8
  %164 = icmp eq i64 %163, %122
  br i1 %164, label %165, label %127, !llvm.loop !15

165:                                              ; preds = %127
  %166 = add nuw <4 x i32> %150, %149
  %167 = shufflevector <4 x i32> %166, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %168 = add <4 x i32> %166, %167
  %169 = shufflevector <4 x i32> %168, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %170 = add <4 x i32> %168, %169
  %171 = extractelement <4 x i32> %170, i32 0
  %172 = add nuw <4 x i32> %156, %155
  %173 = shufflevector <4 x i32> %172, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %174 = add <4 x i32> %172, %173
  %175 = shufflevector <4 x i32> %174, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %176 = add <4 x i32> %174, %175
  %177 = extractelement <4 x i32> %176, i32 0
  %178 = add nuw <4 x i32> %162, %161
  %179 = shufflevector <4 x i32> %178, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %180 = add <4 x i32> %178, %179
  %181 = shufflevector <4 x i32> %180, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %182 = add <4 x i32> %180, %181
  %183 = extractelement <4 x i32> %182, i32 0
  %184 = icmp eq i64 %122, %121
  br i1 %184, label %62, label %93

185:                                              ; preds = %113
  %186 = add nuw nsw i64 %39, 1
  %187 = icmp slt i64 %186, %34
  br i1 %187, label %38, label %188

188:                                              ; preds = %185
  %189 = icmp eq i32 %6, 0
  br i1 %189, label %214, label %190

190:                                              ; preds = %188
  %191 = icmp eq i32 %116, 0
  br i1 %191, label %198, label %192

192:                                              ; preds = %190
  %193 = load i32, i32* %33, align 8
  %194 = add i32 %7, 4
  %195 = sub i32 %194, %193
  %196 = mul nsw i32 %195, %8
  %197 = udiv i32 %116, %196
  br label %198

198:                                              ; preds = %190, %192
  %199 = phi i32 [ %197, %192 ], [ 0, %190 ]
  %200 = load i32, i32* %4, align 4
  %201 = add nsw i32 %200, %199
  %202 = ashr i32 %201, 1
  store i32 %202, i32* %4, align 4
  %203 = load i32, i32* %5, align 4
  switch i32 %203, label %208 [
    i32 2, label %204
    i32 0, label %206
  ]

204:                                              ; preds = %198
  %205 = add nsw i32 %202, 4
  br label %208

206:                                              ; preds = %198
  %207 = add nsw i32 %202, -4
  br label %208

208:                                              ; preds = %198, %206, %204
  %209 = phi i32 [ %205, %204 ], [ %207, %206 ], [ %202, %198 ]
  %210 = icmp sgt i32 %209, 22
  %211 = icmp sgt i32 %209, 18
  %212 = zext i1 %211 to i32
  %213 = select i1 %210, i32 2, i32 %212
  store i32 %213, i32* %5, align 4
  br label %214

214:                                              ; preds = %208, %188
  %215 = icmp sgt i32 %115, 0
  br i1 %215, label %217, label %216

216:                                              ; preds = %214
  tail call void @celt_fatal(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.1, i64 0, i64 0), i32 545) #11
  unreachable

217:                                              ; preds = %214
  %218 = icmp sgt i32 %114, -1
  br i1 %218, label %220, label %219

219:                                              ; preds = %217
  tail call void @celt_fatal(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.1, i64 0, i64 0), i32 546) #11
  unreachable

220:                                              ; preds = %217
  %221 = shl i32 %114, 8
  %222 = udiv i32 %221, %115
  %223 = load i32, i32* %2, align 4
  %224 = add nsw i32 %223, %222
  %225 = ashr i32 %224, 1
  store i32 %225, i32* %2, align 4
  %226 = mul nsw i32 %225, 3
  %227 = shl i32 %3, 7
  %228 = sub i32 450, %227
  %229 = add i32 %228, %226
  %230 = icmp slt i32 %229, 320
  br i1 %230, label %236, label %231

231:                                              ; preds = %220
  %232 = icmp slt i32 %229, 1024
  br i1 %232, label %236, label %233

233:                                              ; preds = %231
  %234 = icmp slt i32 %229, 1536
  %235 = zext i1 %234 to i32
  br label %236

236:                                              ; preds = %220, %231, %233, %16
  %237 = phi i32 [ 0, %16 ], [ 3, %220 ], [ 2, %231 ], [ %235, %233 ]
  ret i32 %237
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @haar1(float* nocapture, i32, i32) local_unnamed_addr #8 {
  %4 = icmp sgt i32 %2, 0
  %5 = icmp sgt i32 %1, 1
  %6 = and i1 %4, %5
  br i1 %6, label %7, label %37

7:                                                ; preds = %3
  %8 = ashr i32 %1, 1
  %9 = shl i32 %2, 1
  %10 = sext i32 %9 to i64
  %11 = sext i32 %2 to i64
  %12 = sext i32 %8 to i64
  %13 = zext i32 %2 to i64
  br label %14

14:                                               ; preds = %34, %7
  %15 = phi i64 [ 0, %7 ], [ %35, %34 ]
  br label %16

16:                                               ; preds = %14, %16
  %17 = phi i64 [ 0, %14 ], [ %32, %16 ]
  %18 = mul nsw i64 %17, %10
  %19 = add nsw i64 %18, %15
  %20 = getelementptr inbounds float, float* %0, i64 %19
  %21 = load float, float* %20, align 4
  %22 = fmul float %21, 0x3FE6A09E60000000
  %23 = shl nuw nsw i64 %17, 1
  %24 = or i64 %23, 1
  %25 = mul nsw i64 %24, %11
  %26 = add nsw i64 %25, %15
  %27 = getelementptr inbounds float, float* %0, i64 %26
  %28 = load float, float* %27, align 4
  %29 = fmul float %28, 0x3FE6A09E60000000
  %30 = fadd float %22, %29
  store float %30, float* %20, align 4
  %31 = fsub float %22, %29
  store float %31, float* %27, align 4
  %32 = add nuw nsw i64 %17, 1
  %33 = icmp slt i64 %32, %12
  br i1 %33, label %16, label %34

34:                                               ; preds = %16
  %35 = add nuw nsw i64 %15, 1
  %36 = icmp eq i64 %35, %13
  br i1 %36, label %37, label %14

37:                                               ; preds = %34, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @quant_all_bands(i32, %struct.OpusCustomMode*, i32, i32, float*, float*, i8* nocapture, float*, i32* nocapture readonly, i32, i32, i32, i32, i32* nocapture readonly, i32, i32, %struct.ec_ctx*, i32, i32, i32* nocapture, i32, i32, i32) local_unnamed_addr #5 {
  %24 = alloca %struct.band_ctx, align 8
  %25 = alloca { i32, i32, i32, i32 }, align 8
  %26 = alloca [24 x i8], align 8
  %27 = alloca %struct.ec_ctx, align 8
  %28 = alloca %struct.band_ctx, align 8
  %29 = alloca %struct.band_ctx, align 8
  %30 = alloca [1275 x i8], align 16
  %31 = getelementptr %struct.OpusCustomMode, %struct.OpusCustomMode* %1, i64 0, i32 5
  %32 = load i16*, i16** %31, align 8
  %33 = icmp ne float* %5, null
  %34 = select i1 %33, i32 2, i32 1
  %35 = icmp ne i32 %0, 0
  %36 = and i1 %35, %33
  %37 = icmp eq i32 %11, 0
  %38 = icmp sgt i32 %20, 7
  %39 = and i1 %36, %37
  %40 = and i1 %39, %38
  %41 = xor i1 %35, true
  %42 = or i1 %40, %41
  %43 = zext i1 %42 to i32
  %44 = bitcast %struct.band_ctx* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %44) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %44, i8 -86, i64 80, i1 false)
  %45 = shl i32 1, %17
  %46 = icmp eq i32 %9, 0
  %47 = select i1 %46, i32 1, i32 %45
  %48 = sext i32 %2 to i64
  %49 = getelementptr inbounds i16, i16* %32, i64 %48
  %50 = load i16, i16* %49, align 2
  %51 = sext i16 %50 to i32
  %52 = shl i32 %51, %17
  %53 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %1, i64 0, i32 2
  %54 = load i32, i32* %53, align 8
  %55 = add nsw i32 %54, -1
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i16, i16* %32, i64 %56
  %58 = load i16, i16* %57, align 2
  %59 = sext i16 %58 to i32
  %60 = shl i32 %59, %17
  %61 = sub nsw i32 %60, %52
  %62 = mul nsw i32 %61, %34
  %63 = sext i32 %62 to i64
  %64 = shl nsw i64 %63, 2
  %65 = alloca float, i64 %63, align 16
  %66 = bitcast float* %65 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %66, i8 -86, i64 %64, i1 false)
  %67 = load i16, i16* %57, align 2
  %68 = sext i16 %67 to i32
  %69 = shl i32 %68, %17
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds float, float* %65, i64 %70
  %72 = sext i32 %52 to i64
  %73 = sub nsw i64 0, %72
  %74 = getelementptr inbounds float, float* %71, i64 %73
  br i1 %40, label %75, label %86

75:                                               ; preds = %23
  %76 = sext i32 %54 to i64
  %77 = getelementptr inbounds i16, i16* %32, i64 %76
  %78 = load i16, i16* %77, align 2
  %79 = sext i16 %78 to i32
  %80 = sub nsw i32 %79, %68
  %81 = shl i32 %80, %17
  %82 = sext i32 %81 to i64
  %83 = shl nsw i64 %82, 2
  %84 = alloca float, i64 %82, align 16
  %85 = bitcast float* %84 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %85, i8 -86, i64 %83, i1 false)
  br label %88

86:                                               ; preds = %23
  %87 = getelementptr inbounds float, float* %4, i64 %70
  br label %88

88:                                               ; preds = %86, %75
  %89 = phi i64 [ %83, %75 ], [ 0, %86 ]
  %90 = phi float* [ %84, %75 ], [ %87, %86 ]
  %91 = alloca i8, i64 %89, align 16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %91, i8 -86, i64 %89, i1 false)
  %92 = bitcast i8* %91 to float*
  %93 = alloca i8, i64 %89, align 16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %93, i8 -86, i64 %89, i1 false)
  %94 = bitcast i8* %93 to float*
  %95 = alloca i8, i64 %89, align 16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %95, i8 -86, i64 %89, i1 false)
  %96 = alloca i8, i64 %89, align 16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %96, i8 -86, i64 %89, i1 false)
  %97 = alloca i8, i64 %89, align 16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %97, i8 -86, i64 %89, i1 false)
  %98 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %24, i64 0, i32 9
  store float* %7, float** %98, align 8
  %99 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %24, i64 0, i32 7
  store %struct.ec_ctx* %16, %struct.ec_ctx** %99, align 8
  %100 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %24, i64 0, i32 0
  store i32 %0, i32* %100, align 8
  %101 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %24, i64 0, i32 4
  store i32 %12, i32* %101, align 4
  %102 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %24, i64 0, i32 2
  store %struct.OpusCustomMode* %1, %struct.OpusCustomMode** %102, align 8
  %103 = load i32, i32* %19, align 4
  %104 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %24, i64 0, i32 10
  store i32 %103, i32* %104, align 8
  %105 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %24, i64 0, i32 5
  store i32 %10, i32* %105, align 8
  %106 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %24, i64 0, i32 11
  store i32 %21, i32* %106, align 4
  %107 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %24, i64 0, i32 13
  store i32 %22, i32* %107, align 4
  %108 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %24, i64 0, i32 1
  store i32 %43, i32* %108, align 4
  %109 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %24, i64 0, i32 12
  store i32 0, i32* %109, align 8
  %110 = icmp sgt i32 %47, 1
  %111 = zext i1 %110 to i32
  %112 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %24, i64 0, i32 14
  store i32 %111, i32* %112, align 8
  %113 = icmp slt i32 %2, %3
  br i1 %113, label %114, label %624

114:                                              ; preds = %88
  %115 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %24, i64 0, i32 3
  %116 = add nsw i32 %3, -1
  %117 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %24, i64 0, i32 8
  %118 = add nsw i32 %2, 1
  %119 = sext i32 %118 to i64
  %120 = add nsw i32 %2, 2
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %24, i64 0, i32 6
  %123 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %1, i64 0, i32 3
  %124 = select i1 %33, float* %65, float* null
  %125 = icmp ne i32 %10, 3
  %126 = or i1 %125, %110
  %127 = add nsw i32 %34, -1
  %128 = shl nsw i32 -1, %47
  %129 = xor i32 %128, -1
  %130 = xor i1 %42, true
  %131 = getelementptr inbounds float, float* %65, i64 %73
  %132 = getelementptr inbounds float, float* %74, i64 %73
  %133 = bitcast { i32, i32, i32, i32 }* %25 to i8*
  %134 = getelementptr inbounds [24 x i8], [24 x i8]* %26, i64 0, i64 0
  %135 = bitcast %struct.ec_ctx* %27 to i8*
  %136 = bitcast %struct.band_ctx* %28 to i8*
  %137 = bitcast %struct.band_ctx* %29 to i8*
  %138 = getelementptr inbounds [1275 x i8], [1275 x i8]* %30, i64 0, i64 0
  %139 = getelementptr inbounds %struct.ec_ctx, %struct.ec_ctx* %16, i64 0, i32 0
  %140 = getelementptr inbounds %struct.ec_ctx, %struct.ec_ctx* %16, i64 0, i32 1
  %141 = getelementptr inbounds %struct.ec_ctx, %struct.ec_ctx* %16, i64 0, i32 2
  %142 = bitcast i32* %141 to i8*
  %143 = getelementptr inbounds %struct.ec_ctx, %struct.ec_ctx* %16, i64 0, i32 6
  %144 = getelementptr inbounds %struct.ec_ctx, %struct.ec_ctx* %16, i64 0, i32 7
  %145 = bitcast i32* %144 to i8*
  %146 = bitcast %struct.ec_ctx* %16 to i8*
  %147 = zext i32 %34 to i64
  %148 = sext i32 %12 to i64
  %149 = sext i32 %18 to i64
  %150 = sext i32 %116 to i64
  %151 = sext i32 %3 to i64
  br label %152

152:                                              ; preds = %602, %114
  %153 = phi i64 [ %48, %114 ], [ %169, %602 ]
  %154 = phi i32 [ 1, %114 ], [ %620, %602 ]
  %155 = phi i32 [ 0, %114 ], [ %219, %602 ]
  %156 = phi float* [ %90, %114 ], [ %264, %602 ]
  %157 = phi i32 [ %11, %114 ], [ %603, %602 ]
  %158 = phi i32 [ %15, %114 ], [ %617, %602 ]
  %159 = trunc i64 %153 to i32
  store i32 %159, i32* %115, align 8
  %160 = icmp eq i64 %153, %150
  %161 = getelementptr inbounds i16, i16* %32, i64 %153
  %162 = load i16, i16* %161, align 2
  %163 = sext i16 %162 to i32
  %164 = shl i32 %163, %17
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds float, float* %4, i64 %165
  %167 = getelementptr inbounds float, float* %5, i64 %165
  %168 = select i1 %33, float* %167, float* null
  %169 = add nsw i64 %153, 1
  %170 = getelementptr inbounds i16, i16* %32, i64 %169
  %171 = load i16, i16* %170, align 2
  %172 = sext i16 %171 to i32
  %173 = shl i32 %172, %17
  %174 = sub nsw i32 %173, %164
  %175 = icmp sgt i32 %174, 0
  br i1 %175, label %177, label %176

176:                                              ; preds = %152
  call void @celt_fatal(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.1, i64 0, i64 0), i32 1495) #11
  unreachable

177:                                              ; preds = %152
  %178 = call i32 @ec_tell_frac(%struct.ec_ctx* %16) #10
  %179 = icmp eq i64 %153, %48
  %180 = select i1 %179, i32 0, i32 %178
  %181 = sub nsw i32 %158, %180
  %182 = sub nsw i32 %14, %178
  %183 = add nsw i32 %182, -1
  store i32 %183, i32* %117, align 8
  %184 = icmp slt i64 %153, %149
  br i1 %184, label %185, label %200

185:                                              ; preds = %177
  %186 = sub nsw i64 %149, %153
  %187 = icmp slt i64 %186, 3
  %188 = select i1 %187, i64 %186, i64 3
  %189 = trunc i64 %188 to i32
  %190 = sdiv i32 %181, %189
  %191 = getelementptr inbounds i32, i32* %8, i64 %153
  %192 = load i32, i32* %191, align 4
  %193 = add nsw i32 %192, %190
  %194 = icmp slt i32 %182, %193
  %195 = select i1 %194, i32 %182, i32 %193
  %196 = icmp sgt i32 %195, 16383
  br i1 %196, label %200, label %197

197:                                              ; preds = %185
  %198 = icmp sgt i32 %195, 0
  %199 = select i1 %198, i32 %195, i32 0
  br label %200

200:                                              ; preds = %197, %185, %177
  %201 = phi i32 [ 0, %177 ], [ 16383, %185 ], [ %199, %197 ]
  br i1 %42, label %202, label %218

202:                                              ; preds = %200
  %203 = load i16, i16* %161, align 2
  %204 = sext i16 %203 to i32
  %205 = shl i32 %204, %17
  %206 = sub nsw i32 %205, %174
  %207 = load i16, i16* %49, align 2
  %208 = sext i16 %207 to i32
  %209 = shl i32 %208, %17
  %210 = icmp sge i32 %206, %209
  %211 = icmp eq i64 %153, %119
  %212 = or i1 %211, %210
  br i1 %212, label %213, label %218

213:                                              ; preds = %202
  %214 = icmp ne i32 %154, 0
  %215 = icmp eq i32 %155, 0
  %216 = or i1 %215, %214
  %217 = select i1 %216, i32 %159, i32 %155
  br label %218

218:                                              ; preds = %213, %202, %200
  %219 = phi i32 [ %155, %200 ], [ %155, %202 ], [ %217, %213 ]
  %220 = icmp eq i64 %153, %119
  br i1 %220, label %221, label %253

221:                                              ; preds = %218
  %222 = load i16*, i16** %31, align 8
  %223 = getelementptr inbounds i16, i16* %222, i64 %119
  %224 = load i16, i16* %223, align 2
  %225 = sext i16 %224 to i32
  %226 = getelementptr inbounds i16, i16* %222, i64 %48
  %227 = load i16, i16* %226, align 2
  %228 = sext i16 %227 to i32
  %229 = sub nsw i32 %225, %228
  %230 = shl i32 %229, %17
  %231 = getelementptr inbounds i16, i16* %222, i64 %121
  %232 = load i16, i16* %231, align 2
  %233 = sext i16 %232 to i32
  %234 = sub nsw i32 %233, %225
  %235 = shl i32 %234, %17
  %236 = sext i32 %230 to i64
  %237 = getelementptr inbounds float, float* %65, i64 %236
  %238 = bitcast float* %237 to i8*
  %239 = shl nsw i32 %230, 1
  %240 = sub nsw i32 %239, %235
  %241 = sext i32 %240 to i64
  %242 = getelementptr inbounds float, float* %65, i64 %241
  %243 = bitcast float* %242 to i8*
  %244 = sub nsw i32 %235, %230
  %245 = sext i32 %244 to i64
  %246 = shl nsw i64 %245, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %238, i8* align 4 %243, i64 %246, i1 false) #10
  %247 = icmp eq i32 %157, 0
  br i1 %247, label %253, label %248

248:                                              ; preds = %221
  %249 = getelementptr inbounds float, float* %74, i64 %236
  %250 = bitcast float* %249 to i8*
  %251 = getelementptr inbounds float, float* %74, i64 %241
  %252 = bitcast float* %251 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %250, i8* align 4 %252, i64 %246, i1 false) #10
  br label %253

253:                                              ; preds = %248, %221, %218
  %254 = getelementptr inbounds i32, i32* %13, i64 %153
  %255 = load i32, i32* %254, align 4
  store i32 %255, i32* %122, align 4
  %256 = load i32, i32* %123, align 4
  %257 = sext i32 %256 to i64
  %258 = icmp slt i64 %153, %257
  %259 = select i1 %258, float* %166, float* %65
  %260 = select i1 %258, float* %168, float* %124
  %261 = xor i1 %160, true
  %262 = or i1 %40, %261
  %263 = and i1 %262, %258
  %264 = select i1 %263, float* %156, float* null
  %265 = icmp ne i32 %219, 0
  %266 = icmp slt i32 %255, 0
  %267 = or i1 %126, %266
  %268 = and i1 %265, %267
  br i1 %268, label %269, label %402

269:                                              ; preds = %253
  %270 = sext i32 %219 to i64
  %271 = getelementptr inbounds i16, i16* %32, i64 %270
  %272 = load i16, i16* %271, align 2
  %273 = sext i16 %272 to i32
  %274 = shl i32 %273, %17
  %275 = sub nsw i32 %274, %52
  %276 = sub i32 %275, %174
  %277 = icmp sgt i32 %276, 0
  %278 = select i1 %277, i32 %276, i32 0
  %279 = add nsw i32 %278, %52
  br label %280

280:                                              ; preds = %280, %269
  %281 = phi i64 [ %282, %280 ], [ %270, %269 ]
  %282 = add nsw i64 %281, -1
  %283 = getelementptr inbounds i16, i16* %32, i64 %282
  %284 = load i16, i16* %283, align 2
  %285 = sext i16 %284 to i32
  %286 = shl i32 %285, %17
  %287 = icmp sgt i32 %286, %279
  br i1 %287, label %280, label %288

288:                                              ; preds = %280
  %289 = add nsw i32 %279, %174
  %290 = add nsw i64 %270, -1
  br label %291

291:                                              ; preds = %295, %288
  %292 = phi i64 [ %293, %295 ], [ %290, %288 ]
  %293 = add nsw i64 %292, 1
  %294 = icmp slt i64 %293, %153
  br i1 %294, label %295, label %301

295:                                              ; preds = %291
  %296 = getelementptr inbounds i16, i16* %32, i64 %293
  %297 = load i16, i16* %296, align 2
  %298 = sext i16 %297 to i32
  %299 = shl i32 %298, %17
  %300 = icmp slt i32 %299, %289
  br i1 %300, label %291, label %301

301:                                              ; preds = %291, %295
  %302 = shl i64 %282, 32
  %303 = ashr exact i64 %302, 32
  %304 = shl i64 %292, 32
  %305 = ashr exact i64 %304, 32
  %306 = shl i64 %282, 32
  %307 = ashr exact i64 %306, 32
  %308 = shl i64 %292, 32
  %309 = ashr exact i64 %308, 32
  %310 = icmp sgt i64 %307, %309
  %311 = select i1 %310, i64 %307, i64 %309
  %312 = add nsw i64 %311, 1
  %313 = sub nsw i64 %312, %307
  %314 = icmp ult i64 %313, 8
  br i1 %314, label %380, label %315

315:                                              ; preds = %301
  %316 = trunc i64 %282 to i32
  %317 = shl i64 %282, 32
  %318 = ashr exact i64 %317, 32
  %319 = shl i64 %292, 32
  %320 = ashr exact i64 %319, 32
  %321 = icmp sgt i64 %318, %320
  %322 = select i1 %321, i64 %318, i64 %320
  %323 = sub nsw i64 %322, %318
  %324 = trunc i64 %323 to i32
  %325 = add i32 %316, %324
  %326 = icmp slt i32 %325, %316
  %327 = icmp ugt i64 %323, 4294967295
  %328 = or i1 %326, %327
  %329 = or i1 %33, %328
  br i1 %329, label %380, label %330

330:                                              ; preds = %315
  %331 = and i64 %313, -8
  %332 = add nsw i64 %303, %331
  br label %333

333:                                              ; preds = %333, %330
  %334 = phi i64 [ 0, %330 ], [ %364, %333 ]
  %335 = phi <4 x i32> [ zeroinitializer, %330 ], [ %349, %333 ]
  %336 = phi <4 x i32> [ zeroinitializer, %330 ], [ %350, %333 ]
  %337 = phi <4 x i32> [ zeroinitializer, %330 ], [ %362, %333 ]
  %338 = phi <4 x i32> [ zeroinitializer, %330 ], [ %363, %333 ]
  %339 = add i64 %303, %334
  %340 = mul nsw i64 %339, %147
  %341 = getelementptr inbounds i8, i8* %6, i64 %340
  %342 = bitcast i8* %341 to <4 x i8>*
  %343 = load <4 x i8>, <4 x i8>* %342, align 1
  %344 = getelementptr inbounds i8, i8* %341, i64 4
  %345 = bitcast i8* %344 to <4 x i8>*
  %346 = load <4 x i8>, <4 x i8>* %345, align 1
  %347 = zext <4 x i8> %343 to <4 x i32>
  %348 = zext <4 x i8> %346 to <4 x i32>
  %349 = or <4 x i32> %335, %347
  %350 = or <4 x i32> %336, %348
  %351 = trunc i64 %340 to i32
  %352 = add i32 %127, %351
  %353 = sext i32 %352 to i64
  %354 = getelementptr inbounds i8, i8* %6, i64 %353
  %355 = bitcast i8* %354 to <4 x i8>*
  %356 = load <4 x i8>, <4 x i8>* %355, align 1
  %357 = getelementptr inbounds i8, i8* %354, i64 4
  %358 = bitcast i8* %357 to <4 x i8>*
  %359 = load <4 x i8>, <4 x i8>* %358, align 1
  %360 = zext <4 x i8> %356 to <4 x i32>
  %361 = zext <4 x i8> %359 to <4 x i32>
  %362 = or <4 x i32> %337, %360
  %363 = or <4 x i32> %338, %361
  %364 = add i64 %334, 8
  %365 = icmp eq i64 %364, %331
  br i1 %365, label %366, label %333, !llvm.loop !16

366:                                              ; preds = %333
  %367 = or <4 x i32> %363, %362
  %368 = shufflevector <4 x i32> %367, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %369 = or <4 x i32> %367, %368
  %370 = shufflevector <4 x i32> %369, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %371 = or <4 x i32> %369, %370
  %372 = extractelement <4 x i32> %371, i32 0
  %373 = or <4 x i32> %350, %349
  %374 = shufflevector <4 x i32> %373, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %375 = or <4 x i32> %373, %374
  %376 = shufflevector <4 x i32> %375, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %377 = or <4 x i32> %375, %376
  %378 = extractelement <4 x i32> %377, i32 0
  %379 = icmp eq i64 %313, %331
  br i1 %379, label %402, label %380

380:                                              ; preds = %366, %315, %301
  %381 = phi i64 [ %303, %315 ], [ %303, %301 ], [ %332, %366 ]
  %382 = phi i32 [ 0, %315 ], [ 0, %301 ], [ %378, %366 ]
  %383 = phi i32 [ 0, %315 ], [ 0, %301 ], [ %372, %366 ]
  br label %384

384:                                              ; preds = %380, %384
  %385 = phi i64 [ %400, %384 ], [ %381, %380 ]
  %386 = phi i32 [ %392, %384 ], [ %382, %380 ]
  %387 = phi i32 [ %399, %384 ], [ %383, %380 ]
  %388 = mul nsw i64 %385, %147
  %389 = getelementptr inbounds i8, i8* %6, i64 %388
  %390 = load i8, i8* %389, align 1
  %391 = zext i8 %390 to i32
  %392 = or i32 %386, %391
  %393 = trunc i64 %388 to i32
  %394 = add i32 %127, %393
  %395 = sext i32 %394 to i64
  %396 = getelementptr inbounds i8, i8* %6, i64 %395
  %397 = load i8, i8* %396, align 1
  %398 = zext i8 %397 to i32
  %399 = or i32 %387, %398
  %400 = add nsw i64 %385, 1
  %401 = icmp slt i64 %385, %305
  br i1 %401, label %384, label %402, !llvm.loop !17

402:                                              ; preds = %384, %366, %253
  %403 = phi i32 [ -1, %253 ], [ %278, %366 ], [ %278, %384 ]
  %404 = phi i32 [ %129, %253 ], [ %378, %366 ], [ %392, %384 ]
  %405 = phi i32 [ %129, %253 ], [ %372, %366 ], [ %399, %384 ]
  %406 = icmp eq i32 %157, 0
  br i1 %406, label %463, label %407

407:                                              ; preds = %402
  %408 = icmp ne i64 %153, %148
  %409 = or i1 %408, %130
  br i1 %409, label %430, label %410

410:                                              ; preds = %407
  %411 = load i16, i16* %161, align 2
  %412 = sext i16 %411 to i32
  %413 = shl i32 %412, %17
  %414 = icmp sgt i32 %413, %52
  br i1 %414, label %415, label %463

415:                                              ; preds = %410, %415
  %416 = phi i64 [ %423, %415 ], [ 0, %410 ]
  %417 = getelementptr inbounds float, float* %65, i64 %416
  %418 = load float, float* %417, align 4
  %419 = getelementptr inbounds float, float* %74, i64 %416
  %420 = load float, float* %419, align 4
  %421 = fadd float %418, %420
  %422 = fmul float %421, 5.000000e-01
  store float %422, float* %417, align 4
  %423 = add nuw nsw i64 %416, 1
  %424 = load i16, i16* %161, align 2
  %425 = sext i16 %424 to i32
  %426 = shl i32 %425, %17
  %427 = sub nsw i32 %426, %52
  %428 = sext i32 %427 to i64
  %429 = icmp slt i64 %423, %428
  br i1 %429, label %415, label %463

430:                                              ; preds = %407
  %431 = icmp eq i32 %157, 0
  %432 = xor i1 %408, true
  %433 = or i1 %431, %432
  br i1 %433, label %463, label %434

434:                                              ; preds = %430
  %435 = lshr i32 %201, 1
  %436 = icmp ne i32 %403, -1
  %437 = sext i32 %403 to i64
  %438 = getelementptr inbounds float, float* %65, i64 %437
  %439 = select i1 %436, float* %438, float* null
  br i1 %160, label %440, label %444

440:                                              ; preds = %434
  %441 = call fastcc i32 @quant_band(%struct.band_ctx* nonnull %24, float* %259, i32 %174, i32 %435, i32 %47, float* %439, i32 %17, float* null, float 1.000000e+00, float* %264, i32 %404)
  %442 = getelementptr inbounds float, float* %74, i64 %437
  %443 = select i1 %436, float* %442, float* null
  br label %458

444:                                              ; preds = %434
  %445 = load i16, i16* %161, align 2
  %446 = sext i16 %445 to i32
  %447 = shl i32 %446, %17
  %448 = sext i32 %447 to i64
  %449 = getelementptr inbounds float, float* %131, i64 %448
  %450 = call fastcc i32 @quant_band(%struct.band_ctx* nonnull %24, float* %259, i32 %174, i32 %435, i32 %47, float* %439, i32 %17, float* %449, float 1.000000e+00, float* %264, i32 %404)
  %451 = getelementptr inbounds float, float* %74, i64 %437
  %452 = select i1 %436, float* %451, float* null
  %453 = load i16, i16* %161, align 2
  %454 = sext i16 %453 to i32
  %455 = shl i32 %454, %17
  %456 = sext i32 %455 to i64
  %457 = getelementptr inbounds float, float* %132, i64 %456
  br label %458

458:                                              ; preds = %440, %444
  %459 = phi float* [ %452, %444 ], [ %443, %440 ]
  %460 = phi i32 [ %450, %444 ], [ %441, %440 ]
  %461 = phi float* [ %457, %444 ], [ null, %440 ]
  %462 = call fastcc i32 @quant_band(%struct.band_ctx* nonnull %24, float* %260, i32 %174, i32 %435, i32 %47, float* %459, i32 %17, float* %461, float 1.000000e+00, float* %264, i32 %405)
  br label %602

463:                                              ; preds = %415, %410, %402, %430
  %464 = icmp eq float* %260, null
  br i1 %464, label %587, label %465

465:                                              ; preds = %463
  %466 = icmp slt i64 %153, %148
  %467 = and i1 %40, %466
  br i1 %467, label %468, label %572

468:                                              ; preds = %465
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %133)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %134)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %133, i8 -86, i64 16, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %134, i8 -86, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %135)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %135, i8 -86, i64 56, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %136)
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %137)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %137, i8 -86, i64 80, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 1275, i8* nonnull %138)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %138, i8 -86, i64 1275, i1 false)
  %469 = getelementptr inbounds float, float* %7, i64 %153
  %470 = load float, float* %469, align 4
  %471 = load i32, i32* %53, align 8
  %472 = sext i32 %471 to i64
  %473 = add nsw i64 %153, %472
  %474 = getelementptr inbounds float, float* %7, i64 %473
  %475 = load float, float* %474, align 4
  %476 = fcmp olt float %470, %475
  %477 = select i1 %476, float %470, float %475
  %478 = fdiv float %477, 3.000000e+00
  %479 = fadd float %470, %478
  %480 = fadd float %475, %478
  %481 = or i32 %405, %404
  %482 = load i8*, i8** %139, align 8
  %483 = load i32, i32* %140, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %133, i8* align 4 %142, i64 16, i1 false)
  %484 = load i32, i32* %143, align 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %134, i8* align 8 %145, i64 24, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %136, i8* nonnull align 8 %44, i64 80, i1 false)
  %485 = bitcast float* %259 to i8*
  %486 = sext i32 %174 to i64
  %487 = shl nsw i64 %486, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %91, i8* align 4 %485, i64 %487, i1 false)
  %488 = bitcast float* %260 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %93, i8* nonnull align 4 %488, i64 %487, i1 false)
  store i32 -1, i32* %109, align 8
  %489 = icmp eq i32 %403, -1
  %490 = sext i32 %403 to i64
  %491 = getelementptr inbounds float, float* %65, i64 %490
  %492 = select i1 %489, float* null, float* %491
  br i1 %160, label %499, label %493

493:                                              ; preds = %468
  %494 = load i16, i16* %161, align 2
  %495 = sext i16 %494 to i32
  %496 = shl i32 %495, %17
  %497 = sext i32 %496 to i64
  %498 = getelementptr inbounds float, float* %131, i64 %497
  br label %499

499:                                              ; preds = %468, %493
  %500 = phi float* [ %498, %493 ], [ null, %468 ]
  %501 = call fastcc i32 @quant_band_stereo(%struct.band_ctx* nonnull %24, float* %259, float* nonnull %260, i32 %174, i32 %201, i32 %47, float* %492, i32 %17, float* %500, float* %264, i32 %481)
  %502 = call float @celt_inner_prod_sse(float* nonnull %92, float* %259, i32 %174) #10
  %503 = fmul float %479, %502
  %504 = call float @celt_inner_prod_sse(float* nonnull %94, float* nonnull %260, i32 %174) #10
  %505 = fmul float %480, %504
  %506 = fadd float %503, %505
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %135, i8* align 8 %146, i64 56, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %137, i8* nonnull align 8 %44, i64 80, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %95, i8* align 4 %485, i64 %487, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %96, i8* nonnull align 4 %488, i64 %487, i1 false)
  br i1 %160, label %514, label %507

507:                                              ; preds = %499
  %508 = load i16, i16* %161, align 2
  %509 = sext i16 %508 to i32
  %510 = shl i32 %509, %17
  %511 = sext i32 %510 to i64
  %512 = getelementptr inbounds float, float* %131, i64 %511
  %513 = bitcast float* %512 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %97, i8* align 4 %513, i64 %487, i1 false)
  br label %514

514:                                              ; preds = %507, %499
  %515 = sext i32 %484 to i64
  %516 = getelementptr inbounds i8, i8* %482, i64 %515
  %517 = sub nsw i32 %483, %484
  %518 = sext i32 %517 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %138, i8* align 1 %516, i64 %518, i1 false)
  store i8* %482, i8** %139, align 8
  store i32 %483, i32* %140, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %142, i8* nonnull align 8 %133, i64 16, i1 false)
  store i32 %484, i32* %143, align 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %145, i8* nonnull align 8 %134, i64 24, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %44, i8* nonnull align 8 %136, i64 80, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %485, i8* nonnull align 16 %91, i64 %487, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %488, i8* nonnull align 16 %93, i64 %487, i1 false)
  br i1 %220, label %519, label %545

519:                                              ; preds = %514
  %520 = load i16*, i16** %31, align 8
  %521 = getelementptr inbounds i16, i16* %520, i64 %119
  %522 = load i16, i16* %521, align 2
  %523 = sext i16 %522 to i32
  %524 = getelementptr inbounds i16, i16* %520, i64 %48
  %525 = load i16, i16* %524, align 2
  %526 = sext i16 %525 to i32
  %527 = sub nsw i32 %523, %526
  %528 = shl i32 %527, %17
  %529 = getelementptr inbounds i16, i16* %520, i64 %121
  %530 = load i16, i16* %529, align 2
  %531 = sext i16 %530 to i32
  %532 = sub nsw i32 %531, %523
  %533 = shl i32 %532, %17
  %534 = sext i32 %528 to i64
  %535 = getelementptr inbounds float, float* %65, i64 %534
  %536 = bitcast float* %535 to i8*
  %537 = shl nsw i32 %528, 1
  %538 = sub nsw i32 %537, %533
  %539 = sext i32 %538 to i64
  %540 = getelementptr inbounds float, float* %65, i64 %539
  %541 = bitcast float* %540 to i8*
  %542 = sub nsw i32 %533, %528
  %543 = sext i32 %542 to i64
  %544 = shl nsw i64 %543, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %536, i8* align 4 %541, i64 %544, i1 false) #10
  br label %545

545:                                              ; preds = %519, %514
  store i32 1, i32* %109, align 8
  br i1 %160, label %552, label %546

546:                                              ; preds = %545
  %547 = load i16, i16* %161, align 2
  %548 = sext i16 %547 to i32
  %549 = shl i32 %548, %17
  %550 = sext i32 %549 to i64
  %551 = getelementptr inbounds float, float* %131, i64 %550
  br label %552

552:                                              ; preds = %545, %546
  %553 = phi float* [ %551, %546 ], [ null, %545 ]
  %554 = call fastcc i32 @quant_band_stereo(%struct.band_ctx* nonnull %24, float* %259, float* nonnull %260, i32 %174, i32 %201, i32 %47, float* %492, i32 %17, float* %553, float* %264, i32 %481)
  %555 = call float @celt_inner_prod_sse(float* nonnull %92, float* %259, i32 %174) #10
  %556 = fmul float %479, %555
  %557 = call float @celt_inner_prod_sse(float* nonnull %94, float* nonnull %260, i32 %174) #10
  %558 = fmul float %480, %557
  %559 = fadd float %556, %558
  %560 = fcmp ult float %506, %559
  br i1 %560, label %570, label %561

561:                                              ; preds = %552
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %146, i8* nonnull align 8 %135, i64 56, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %44, i8* nonnull align 8 %137, i64 80, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %485, i8* nonnull align 16 %95, i64 %487, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %488, i8* nonnull align 16 %96, i64 %487, i1 false)
  br i1 %160, label %569, label %562

562:                                              ; preds = %561
  %563 = load i16, i16* %161, align 2
  %564 = sext i16 %563 to i32
  %565 = shl i32 %564, %17
  %566 = sext i32 %565 to i64
  %567 = getelementptr inbounds float, float* %131, i64 %566
  %568 = bitcast float* %567 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %568, i8* nonnull align 16 %97, i64 %487, i1 false)
  br label %569

569:                                              ; preds = %562, %561
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %516, i8* nonnull align 16 %138, i64 %518, i1 false)
  br label %570

570:                                              ; preds = %552, %569
  %571 = phi i32 [ %501, %569 ], [ %554, %552 ]
  call void @llvm.lifetime.end.p0i8(i64 1275, i8* nonnull %138)
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %137)
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %136)
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %135)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %133)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %134)
  br label %602

572:                                              ; preds = %465
  store i32 0, i32* %109, align 8
  %573 = icmp eq i32 %403, -1
  %574 = sext i32 %403 to i64
  %575 = getelementptr inbounds float, float* %65, i64 %574
  %576 = select i1 %573, float* null, float* %575
  br i1 %160, label %583, label %577

577:                                              ; preds = %572
  %578 = load i16, i16* %161, align 2
  %579 = sext i16 %578 to i32
  %580 = shl i32 %579, %17
  %581 = sext i32 %580 to i64
  %582 = getelementptr inbounds float, float* %131, i64 %581
  br label %583

583:                                              ; preds = %572, %577
  %584 = phi float* [ %582, %577 ], [ null, %572 ]
  %585 = or i32 %405, %404
  %586 = call fastcc i32 @quant_band_stereo(%struct.band_ctx* nonnull %24, float* %259, float* nonnull %260, i32 %174, i32 %201, i32 %47, float* %576, i32 %17, float* %584, float* %264, i32 %585)
  br label %602

587:                                              ; preds = %463
  %588 = icmp eq i32 %403, -1
  %589 = sext i32 %403 to i64
  %590 = getelementptr inbounds float, float* %65, i64 %589
  %591 = select i1 %588, float* null, float* %590
  br i1 %160, label %598, label %592

592:                                              ; preds = %587
  %593 = load i16, i16* %161, align 2
  %594 = sext i16 %593 to i32
  %595 = shl i32 %594, %17
  %596 = sext i32 %595 to i64
  %597 = getelementptr inbounds float, float* %131, i64 %596
  br label %598

598:                                              ; preds = %587, %592
  %599 = phi float* [ %597, %592 ], [ null, %587 ]
  %600 = or i32 %405, %404
  %601 = call fastcc i32 @quant_band(%struct.band_ctx* nonnull %24, float* %259, i32 %174, i32 %201, i32 %47, float* %591, i32 %17, float* %599, float 1.000000e+00, float* %264, i32 %600)
  br label %602

602:                                              ; preds = %598, %583, %570, %458
  %603 = phi i32 [ %157, %458 ], [ 0, %570 ], [ 0, %583 ], [ 0, %598 ]
  %604 = phi i32 [ %460, %458 ], [ %571, %570 ], [ %586, %583 ], [ %601, %598 ]
  %605 = phi i32 [ %462, %458 ], [ %571, %570 ], [ %586, %583 ], [ %601, %598 ]
  %606 = trunc i32 %604 to i8
  %607 = mul nsw i64 %153, %147
  %608 = getelementptr inbounds i8, i8* %6, i64 %607
  store i8 %606, i8* %608, align 1
  %609 = trunc i32 %605 to i8
  %610 = trunc i64 %607 to i32
  %611 = add i32 %127, %610
  %612 = sext i32 %611 to i64
  %613 = getelementptr inbounds i8, i8* %6, i64 %612
  store i8 %609, i8* %613, align 1
  %614 = getelementptr inbounds i32, i32* %8, i64 %153
  %615 = load i32, i32* %614, align 4
  %616 = add i32 %181, %178
  %617 = add i32 %616, %615
  %618 = shl i32 %174, 3
  %619 = icmp sgt i32 %201, %618
  %620 = zext i1 %619 to i32
  store i32 0, i32* %112, align 8
  %621 = icmp eq i64 %169, %151
  br i1 %621, label %622, label %152

622:                                              ; preds = %602
  %623 = load i32, i32* %104, align 8
  br label %624

624:                                              ; preds = %622, %88
  %625 = phi i32 [ %623, %622 ], [ %103, %88 ]
  store i32 %625, i32* %19, align 4
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %44) #10
  ret void
}

declare i32 @ec_tell_frac(%struct.ec_ctx*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @quant_band(%struct.band_ctx*, float*, i32, i32, i32, float*, i32, float*, float, float*, i32) unnamed_addr #5 {
  %12 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %0, i64 0, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %0, i64 0, i32 6
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %4, 1
  %17 = zext i1 %16 to i32
  %18 = udiv i32 %2, %4
  %19 = icmp eq i32 %2, 1
  br i1 %19, label %20, label %60

20:                                               ; preds = %11
  %21 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %0, i64 0, i32 7
  %22 = load %struct.ec_ctx*, %struct.ec_ctx** %21, align 8
  %23 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %0, i64 0, i32 8
  %24 = icmp eq i32 %13, 0
  %25 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %0, i64 0, i32 1
  %26 = load i32, i32* %23, align 8
  %27 = icmp sgt i32 %26, 7
  br i1 %24, label %28, label %40

28:                                               ; preds = %20
  br i1 %27, label %29, label %33

29:                                               ; preds = %28
  %30 = tail call i32 @ec_dec_bits(%struct.ec_ctx* %22, i32 1) #10
  %31 = load i32, i32* %23, align 8
  %32 = add nsw i32 %31, -8
  store i32 %32, i32* %23, align 8
  br label %33

33:                                               ; preds = %29, %28
  %34 = phi i32 [ %30, %29 ], [ 0, %28 ]
  %35 = load i32, i32* %25, align 4
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %54, label %37

37:                                               ; preds = %33
  %38 = icmp eq i32 %34, 0
  %39 = select i1 %38, float 1.000000e+00, float -1.000000e+00
  store float %39, float* %1, align 4
  br label %54

40:                                               ; preds = %20
  br i1 %27, label %41, label %47

41:                                               ; preds = %40
  %42 = load float, float* %1, align 4
  %43 = fcmp olt float %42, 0.000000e+00
  %44 = zext i1 %43 to i32
  tail call void @ec_enc_bits(%struct.ec_ctx* %22, i32 %44, i32 1) #10
  %45 = load i32, i32* %23, align 8
  %46 = add nsw i32 %45, -8
  store i32 %46, i32* %23, align 8
  br label %47

47:                                               ; preds = %41, %40
  %48 = phi i32 [ %44, %41 ], [ 0, %40 ]
  %49 = load i32, i32* %25, align 4
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %54, label %51

51:                                               ; preds = %47
  %52 = icmp eq i32 %48, 0
  %53 = select i1 %52, float 1.000000e+00, float -1.000000e+00
  store float %53, float* %1, align 4
  br label %54

54:                                               ; preds = %47, %51, %33, %37
  %55 = icmp eq float* %7, null
  br i1 %55, label %620, label %56

56:                                               ; preds = %54
  %57 = bitcast float* %1 to i32*
  %58 = load i32, i32* %57, align 4
  %59 = bitcast float* %7 to i32*
  store i32 %58, i32* %59, align 4
  br label %620

60:                                               ; preds = %11
  %61 = icmp sgt i32 %15, 0
  %62 = select i1 %61, i32 %15, i32 0
  %63 = icmp ne float* %9, null
  %64 = icmp ne float* %5, null
  %65 = and i1 %64, %63
  br i1 %65, label %66, label %80

66:                                               ; preds = %60
  %67 = icmp slt i32 %15, 1
  br i1 %67, label %68, label %75

68:                                               ; preds = %66
  %69 = and i32 %18, 1
  %70 = icmp eq i32 %69, 0
  %71 = icmp ne i32 %15, 0
  %72 = and i1 %71, %70
  %73 = icmp sgt i32 %4, 1
  %74 = or i1 %73, %72
  br i1 %74, label %75, label %80

75:                                               ; preds = %66, %68
  %76 = bitcast float* %9 to i8*
  %77 = bitcast float* %5 to i8*
  %78 = sext i32 %2 to i64
  %79 = shl nsw i64 %78, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %76, i8* nonnull align 4 %77, i64 %79, i1 false)
  br label %80

80:                                               ; preds = %68, %75, %60
  %81 = phi float* [ %9, %75 ], [ %5, %68 ], [ %5, %60 ]
  br i1 %61, label %82, label %226

82:                                               ; preds = %80
  %83 = icmp eq i32 %13, 0
  %84 = icmp eq float* %81, null
  br i1 %83, label %85, label %139

85:                                               ; preds = %82, %124
  %86 = phi i32 [ %137, %124 ], [ 0, %82 ]
  %87 = phi i32 [ %136, %124 ], [ %10, %82 ]
  br i1 %84, label %124, label %88

88:                                               ; preds = %85
  %89 = ashr i32 %2, %86
  %90 = shl i32 1, %86
  %91 = icmp ne i32 %86, 31
  %92 = icmp sgt i32 %89, 1
  %93 = and i1 %91, %92
  br i1 %93, label %94, label %124

94:                                               ; preds = %88
  %95 = lshr i32 %89, 1
  %96 = shl i32 %90, 1
  %97 = sext i32 %96 to i64
  %98 = sext i32 %90 to i64
  %99 = zext i32 %95 to i64
  %100 = zext i32 %90 to i64
  br label %101

101:                                              ; preds = %121, %94
  %102 = phi i64 [ 0, %94 ], [ %122, %121 ]
  br label %103

103:                                              ; preds = %103, %101
  %104 = phi i64 [ 0, %101 ], [ %119, %103 ]
  %105 = mul nsw i64 %104, %97
  %106 = add nsw i64 %105, %102
  %107 = getelementptr inbounds float, float* %81, i64 %106
  %108 = load float, float* %107, align 4
  %109 = fmul float %108, 0x3FE6A09E60000000
  %110 = shl nuw nsw i64 %104, 1
  %111 = or i64 %110, 1
  %112 = mul nsw i64 %111, %98
  %113 = add nsw i64 %112, %102
  %114 = getelementptr inbounds float, float* %81, i64 %113
  %115 = load float, float* %114, align 4
  %116 = fmul float %115, 0x3FE6A09E60000000
  %117 = fadd float %109, %116
  store float %117, float* %107, align 4
  %118 = fsub float %109, %116
  store float %118, float* %114, align 4
  %119 = add nuw nsw i64 %104, 1
  %120 = icmp ult i64 %119, %99
  br i1 %120, label %103, label %121

121:                                              ; preds = %103
  %122 = add nuw nsw i64 %102, 1
  %123 = icmp eq i64 %122, %100
  br i1 %123, label %124, label %101

124:                                              ; preds = %121, %88, %85
  %125 = and i32 %87, 15
  %126 = zext i32 %125 to i64
  %127 = getelementptr inbounds [16 x i8], [16 x i8]* @quant_band.bit_interleave_table, i64 0, i64 %126
  %128 = load i8, i8* %127, align 1
  %129 = zext i8 %128 to i32
  %130 = ashr i32 %87, 4
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds [16 x i8], [16 x i8]* @quant_band.bit_interleave_table, i64 0, i64 %131
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i32
  %135 = shl nuw nsw i32 %134, 2
  %136 = or i32 %135, %129
  %137 = add nuw nsw i32 %86, 1
  %138 = icmp ult i32 %137, %62
  br i1 %138, label %85, label %226

139:                                              ; preds = %82, %211
  %140 = phi i32 [ %224, %211 ], [ 0, %82 ]
  %141 = phi i32 [ %223, %211 ], [ %10, %82 ]
  %142 = ashr i32 %2, %140
  %143 = shl i32 1, %140
  %144 = icmp ne i32 %140, 31
  %145 = icmp sgt i32 %142, 1
  %146 = and i1 %144, %145
  br i1 %146, label %147, label %177

147:                                              ; preds = %139
  %148 = lshr i32 %142, 1
  %149 = shl i32 %143, 1
  %150 = sext i32 %149 to i64
  %151 = sext i32 %143 to i64
  %152 = zext i32 %148 to i64
  %153 = zext i32 %143 to i64
  br label %154

154:                                              ; preds = %174, %147
  %155 = phi i64 [ 0, %147 ], [ %175, %174 ]
  br label %156

156:                                              ; preds = %156, %154
  %157 = phi i64 [ 0, %154 ], [ %172, %156 ]
  %158 = mul nsw i64 %157, %150
  %159 = add nsw i64 %158, %155
  %160 = getelementptr inbounds float, float* %1, i64 %159
  %161 = load float, float* %160, align 4
  %162 = fmul float %161, 0x3FE6A09E60000000
  %163 = shl nuw nsw i64 %157, 1
  %164 = or i64 %163, 1
  %165 = mul nsw i64 %164, %151
  %166 = add nsw i64 %165, %155
  %167 = getelementptr inbounds float, float* %1, i64 %166
  %168 = load float, float* %167, align 4
  %169 = fmul float %168, 0x3FE6A09E60000000
  %170 = fadd float %162, %169
  store float %170, float* %160, align 4
  %171 = fsub float %162, %169
  store float %171, float* %167, align 4
  %172 = add nuw nsw i64 %157, 1
  %173 = icmp ult i64 %172, %152
  br i1 %173, label %156, label %174

174:                                              ; preds = %156
  %175 = add nuw nsw i64 %155, 1
  %176 = icmp eq i64 %175, %153
  br i1 %176, label %177, label %154

177:                                              ; preds = %174, %139
  %178 = and i1 %144, %145
  %179 = xor i1 %178, true
  %180 = or i1 %84, %179
  br i1 %180, label %211, label %181

181:                                              ; preds = %177
  %182 = lshr i32 %142, 1
  %183 = shl i32 %143, 1
  %184 = sext i32 %183 to i64
  %185 = sext i32 %143 to i64
  %186 = zext i32 %182 to i64
  %187 = zext i32 %143 to i64
  br label %188

188:                                              ; preds = %208, %181
  %189 = phi i64 [ 0, %181 ], [ %209, %208 ]
  br label %190

190:                                              ; preds = %190, %188
  %191 = phi i64 [ 0, %188 ], [ %206, %190 ]
  %192 = mul nsw i64 %191, %184
  %193 = add nsw i64 %192, %189
  %194 = getelementptr inbounds float, float* %81, i64 %193
  %195 = load float, float* %194, align 4
  %196 = fmul float %195, 0x3FE6A09E60000000
  %197 = shl nuw nsw i64 %191, 1
  %198 = or i64 %197, 1
  %199 = mul nsw i64 %198, %185
  %200 = add nsw i64 %199, %189
  %201 = getelementptr inbounds float, float* %81, i64 %200
  %202 = load float, float* %201, align 4
  %203 = fmul float %202, 0x3FE6A09E60000000
  %204 = fadd float %196, %203
  store float %204, float* %194, align 4
  %205 = fsub float %196, %203
  store float %205, float* %201, align 4
  %206 = add nuw nsw i64 %191, 1
  %207 = icmp ult i64 %206, %186
  br i1 %207, label %190, label %208

208:                                              ; preds = %190
  %209 = add nuw nsw i64 %189, 1
  %210 = icmp eq i64 %209, %187
  br i1 %210, label %211, label %188

211:                                              ; preds = %208, %177
  %212 = and i32 %141, 15
  %213 = zext i32 %212 to i64
  %214 = getelementptr inbounds [16 x i8], [16 x i8]* @quant_band.bit_interleave_table, i64 0, i64 %213
  %215 = load i8, i8* %214, align 1
  %216 = zext i8 %215 to i32
  %217 = ashr i32 %141, 4
  %218 = sext i32 %217 to i64
  %219 = getelementptr inbounds [16 x i8], [16 x i8]* @quant_band.bit_interleave_table, i64 0, i64 %218
  %220 = load i8, i8* %219, align 1
  %221 = zext i8 %220 to i32
  %222 = shl nuw nsw i32 %221, 2
  %223 = or i32 %222, %216
  %224 = add nuw nsw i32 %140, 1
  %225 = icmp ult i32 %224, %62
  br i1 %225, label %139, label %226

226:                                              ; preds = %211, %124, %80
  %227 = phi i32 [ %10, %80 ], [ %136, %124 ], [ %223, %211 ]
  %228 = ashr i32 %4, %62
  %229 = shl i32 %18, %62
  %230 = and i32 %229, 1
  %231 = icmp eq i32 %230, 0
  %232 = icmp slt i32 %15, 0
  %233 = and i1 %231, %232
  br i1 %233, label %234, label %372

234:                                              ; preds = %226
  %235 = icmp eq i32 %13, 0
  %236 = icmp eq float* %81, null
  br i1 %235, label %237, label %288

237:                                              ; preds = %234, %277
  %238 = phi i32 [ %283, %277 ], [ %15, %234 ]
  %239 = phi i32 [ %282, %277 ], [ 0, %234 ]
  %240 = phi i32 [ %281, %277 ], [ %229, %234 ]
  %241 = phi i32 [ %279, %277 ], [ %227, %234 ]
  %242 = phi i32 [ %280, %277 ], [ %228, %234 ]
  br i1 %236, label %277, label %243

243:                                              ; preds = %237
  %244 = icmp sgt i32 %242, 0
  %245 = icmp sgt i32 %240, 1
  %246 = and i1 %244, %245
  br i1 %246, label %247, label %277

247:                                              ; preds = %243
  %248 = lshr i32 %240, 1
  %249 = shl i32 %242, 1
  %250 = sext i32 %249 to i64
  %251 = sext i32 %242 to i64
  %252 = zext i32 %248 to i64
  %253 = zext i32 %242 to i64
  br label %254

254:                                              ; preds = %274, %247
  %255 = phi i64 [ 0, %247 ], [ %275, %274 ]
  br label %256

256:                                              ; preds = %256, %254
  %257 = phi i64 [ 0, %254 ], [ %272, %256 ]
  %258 = mul nsw i64 %257, %250
  %259 = add nsw i64 %258, %255
  %260 = getelementptr inbounds float, float* %81, i64 %259
  %261 = load float, float* %260, align 4
  %262 = fmul float %261, 0x3FE6A09E60000000
  %263 = shl nuw nsw i64 %257, 1
  %264 = or i64 %263, 1
  %265 = mul nsw i64 %264, %251
  %266 = add nsw i64 %265, %255
  %267 = getelementptr inbounds float, float* %81, i64 %266
  %268 = load float, float* %267, align 4
  %269 = fmul float %268, 0x3FE6A09E60000000
  %270 = fadd float %262, %269
  store float %270, float* %260, align 4
  %271 = fsub float %262, %269
  store float %271, float* %267, align 4
  %272 = add nuw nsw i64 %257, 1
  %273 = icmp ult i64 %272, %252
  br i1 %273, label %256, label %274

274:                                              ; preds = %256
  %275 = add nuw nsw i64 %255, 1
  %276 = icmp eq i64 %275, %253
  br i1 %276, label %277, label %254

277:                                              ; preds = %274, %243, %237
  %278 = shl i32 %241, %242
  %279 = or i32 %278, %241
  %280 = shl i32 %242, 1
  %281 = ashr i32 %240, 1
  %282 = add nuw nsw i32 %239, 1
  %283 = add nsw i32 %238, 1
  %284 = and i32 %240, 2
  %285 = icmp eq i32 %284, 0
  %286 = icmp slt i32 %283, 0
  %287 = and i1 %285, %286
  br i1 %287, label %237, label %372

288:                                              ; preds = %234, %361
  %289 = phi i32 [ %367, %361 ], [ %15, %234 ]
  %290 = phi i32 [ %366, %361 ], [ 0, %234 ]
  %291 = phi i32 [ %365, %361 ], [ %229, %234 ]
  %292 = phi i32 [ %363, %361 ], [ %227, %234 ]
  %293 = phi i32 [ %364, %361 ], [ %228, %234 ]
  %294 = icmp sgt i32 %293, 0
  %295 = icmp sgt i32 %291, 1
  %296 = and i1 %294, %295
  br i1 %296, label %297, label %327

297:                                              ; preds = %288
  %298 = lshr i32 %291, 1
  %299 = shl i32 %293, 1
  %300 = sext i32 %299 to i64
  %301 = sext i32 %293 to i64
  %302 = zext i32 %298 to i64
  %303 = zext i32 %293 to i64
  br label %304

304:                                              ; preds = %324, %297
  %305 = phi i64 [ 0, %297 ], [ %325, %324 ]
  br label %306

306:                                              ; preds = %306, %304
  %307 = phi i64 [ 0, %304 ], [ %322, %306 ]
  %308 = mul nsw i64 %307, %300
  %309 = add nsw i64 %308, %305
  %310 = getelementptr inbounds float, float* %1, i64 %309
  %311 = load float, float* %310, align 4
  %312 = fmul float %311, 0x3FE6A09E60000000
  %313 = shl nuw nsw i64 %307, 1
  %314 = or i64 %313, 1
  %315 = mul nsw i64 %314, %301
  %316 = add nsw i64 %315, %305
  %317 = getelementptr inbounds float, float* %1, i64 %316
  %318 = load float, float* %317, align 4
  %319 = fmul float %318, 0x3FE6A09E60000000
  %320 = fadd float %312, %319
  store float %320, float* %310, align 4
  %321 = fsub float %312, %319
  store float %321, float* %317, align 4
  %322 = add nuw nsw i64 %307, 1
  %323 = icmp ult i64 %322, %302
  br i1 %323, label %306, label %324

324:                                              ; preds = %306
  %325 = add nuw nsw i64 %305, 1
  %326 = icmp eq i64 %325, %303
  br i1 %326, label %327, label %304

327:                                              ; preds = %324, %288
  %328 = and i1 %294, %295
  %329 = xor i1 %328, true
  %330 = or i1 %236, %329
  br i1 %330, label %361, label %331

331:                                              ; preds = %327
  %332 = lshr i32 %291, 1
  %333 = shl i32 %293, 1
  %334 = sext i32 %333 to i64
  %335 = sext i32 %293 to i64
  %336 = zext i32 %332 to i64
  %337 = zext i32 %293 to i64
  br label %338

338:                                              ; preds = %358, %331
  %339 = phi i64 [ 0, %331 ], [ %359, %358 ]
  br label %340

340:                                              ; preds = %340, %338
  %341 = phi i64 [ 0, %338 ], [ %356, %340 ]
  %342 = mul nsw i64 %341, %334
  %343 = add nsw i64 %342, %339
  %344 = getelementptr inbounds float, float* %81, i64 %343
  %345 = load float, float* %344, align 4
  %346 = fmul float %345, 0x3FE6A09E60000000
  %347 = shl nuw nsw i64 %341, 1
  %348 = or i64 %347, 1
  %349 = mul nsw i64 %348, %335
  %350 = add nsw i64 %349, %339
  %351 = getelementptr inbounds float, float* %81, i64 %350
  %352 = load float, float* %351, align 4
  %353 = fmul float %352, 0x3FE6A09E60000000
  %354 = fadd float %346, %353
  store float %354, float* %344, align 4
  %355 = fsub float %346, %353
  store float %355, float* %351, align 4
  %356 = add nuw nsw i64 %341, 1
  %357 = icmp ult i64 %356, %336
  br i1 %357, label %340, label %358

358:                                              ; preds = %340
  %359 = add nuw nsw i64 %339, 1
  %360 = icmp eq i64 %359, %337
  br i1 %360, label %361, label %338

361:                                              ; preds = %358, %327
  %362 = shl i32 %292, %293
  %363 = or i32 %362, %292
  %364 = shl i32 %293, 1
  %365 = ashr i32 %291, 1
  %366 = add nuw nsw i32 %290, 1
  %367 = add nsw i32 %289, 1
  %368 = and i32 %291, 2
  %369 = icmp eq i32 %368, 0
  %370 = icmp slt i32 %367, 0
  %371 = and i1 %369, %370
  br i1 %371, label %288, label %372

372:                                              ; preds = %361, %277, %226
  %373 = phi i32 [ %228, %226 ], [ %280, %277 ], [ %364, %361 ]
  %374 = phi i32 [ %227, %226 ], [ %279, %277 ], [ %363, %361 ]
  %375 = phi i32 [ %229, %226 ], [ %281, %277 ], [ %365, %361 ]
  %376 = phi i32 [ 0, %226 ], [ %282, %277 ], [ %366, %361 ]
  %377 = icmp sgt i32 %373, 1
  br i1 %377, label %378, label %388

378:                                              ; preds = %372
  %379 = icmp eq i32 %13, 0
  br i1 %379, label %383, label %380

380:                                              ; preds = %378
  %381 = ashr i32 %375, %62
  %382 = shl i32 %373, %62
  tail call fastcc void @deinterleave_hadamard(float* %1, i32 %381, i32 %382, i32 %17)
  br label %383

383:                                              ; preds = %378, %380
  %384 = icmp eq float* %81, null
  br i1 %384, label %388, label %385

385:                                              ; preds = %383
  %386 = ashr i32 %375, %62
  %387 = shl i32 %373, %62
  tail call fastcc void @deinterleave_hadamard(float* nonnull %81, i32 %386, i32 %387, i32 %17)
  br label %388

388:                                              ; preds = %383, %385, %372
  %389 = tail call fastcc i32 @quant_partition(%struct.band_ctx* %0, float* %1, i32 %2, i32 %3, i32 %373, float* %81, i32 %6, float %8, i32 %374)
  %390 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %0, i64 0, i32 1
  %391 = load i32, i32* %390, align 4
  %392 = icmp eq i32 %391, 0
  br i1 %392, label %620, label %393

393:                                              ; preds = %388
  br i1 %377, label %394, label %397

394:                                              ; preds = %393
  %395 = ashr i32 %375, %62
  %396 = shl i32 %373, %62
  tail call fastcc void @interleave_hadamard(float* %1, i32 %395, i32 %396, i32 %17)
  br label %397

397:                                              ; preds = %394, %393
  %398 = icmp eq i32 %376, 0
  br i1 %398, label %399, label %402

399:                                              ; preds = %444, %397
  %400 = phi i32 [ %373, %397 ], [ %407, %444 ]
  %401 = phi i32 [ %389, %397 ], [ %410, %444 ]
  br i1 %61, label %447, label %494

402:                                              ; preds = %397, %444
  %403 = phi i32 [ %445, %444 ], [ 0, %397 ]
  %404 = phi i32 [ %410, %444 ], [ %389, %397 ]
  %405 = phi i32 [ %408, %444 ], [ %375, %397 ]
  %406 = phi i32 [ %407, %444 ], [ %373, %397 ]
  %407 = ashr i32 %406, 1
  %408 = shl i32 %405, 1
  %409 = lshr i32 %404, %407
  %410 = or i32 %409, %404
  %411 = icmp sgt i32 %406, 1
  %412 = icmp sgt i32 %408, 1
  %413 = and i1 %411, %412
  br i1 %413, label %414, label %444

414:                                              ; preds = %402
  %415 = and i32 %405, 2147483647
  %416 = and i32 %406, -2
  %417 = sext i32 %416 to i64
  %418 = sext i32 %407 to i64
  %419 = zext i32 %415 to i64
  %420 = zext i32 %407 to i64
  br label %421

421:                                              ; preds = %441, %414
  %422 = phi i64 [ 0, %414 ], [ %442, %441 ]
  br label %423

423:                                              ; preds = %423, %421
  %424 = phi i64 [ 0, %421 ], [ %439, %423 ]
  %425 = mul nsw i64 %424, %417
  %426 = add nsw i64 %425, %422
  %427 = getelementptr inbounds float, float* %1, i64 %426
  %428 = load float, float* %427, align 4
  %429 = fmul float %428, 0x3FE6A09E60000000
  %430 = shl nuw nsw i64 %424, 1
  %431 = or i64 %430, 1
  %432 = mul nsw i64 %431, %418
  %433 = add nsw i64 %432, %422
  %434 = getelementptr inbounds float, float* %1, i64 %433
  %435 = load float, float* %434, align 4
  %436 = fmul float %435, 0x3FE6A09E60000000
  %437 = fadd float %429, %436
  store float %437, float* %427, align 4
  %438 = fsub float %429, %436
  store float %438, float* %434, align 4
  %439 = add nuw nsw i64 %424, 1
  %440 = icmp ult i64 %439, %419
  br i1 %440, label %423, label %441

441:                                              ; preds = %423
  %442 = add nuw nsw i64 %422, 1
  %443 = icmp eq i64 %442, %420
  br i1 %443, label %444, label %421

444:                                              ; preds = %441, %402
  %445 = add nuw nsw i32 %403, 1
  %446 = icmp eq i32 %445, %376
  br i1 %446, label %399, label %402

447:                                              ; preds = %399, %489
  %448 = phi i32 [ %490, %489 ], [ 0, %399 ]
  %449 = phi i32 [ %453, %489 ], [ %401, %399 ]
  %450 = zext i32 %449 to i64
  %451 = getelementptr inbounds [16 x i8], [16 x i8]* @quant_band.bit_deinterleave_table, i64 0, i64 %450
  %452 = load i8, i8* %451, align 1
  %453 = zext i8 %452 to i32
  %454 = ashr i32 %2, %448
  %455 = shl i32 1, %448
  %456 = icmp ne i32 %448, 31
  %457 = icmp sgt i32 %454, 1
  %458 = and i1 %456, %457
  br i1 %458, label %459, label %489

459:                                              ; preds = %447
  %460 = lshr i32 %454, 1
  %461 = shl i32 %455, 1
  %462 = sext i32 %461 to i64
  %463 = sext i32 %455 to i64
  %464 = zext i32 %460 to i64
  %465 = zext i32 %455 to i64
  br label %466

466:                                              ; preds = %486, %459
  %467 = phi i64 [ 0, %459 ], [ %487, %486 ]
  br label %468

468:                                              ; preds = %468, %466
  %469 = phi i64 [ 0, %466 ], [ %484, %468 ]
  %470 = mul nsw i64 %469, %462
  %471 = add nsw i64 %470, %467
  %472 = getelementptr inbounds float, float* %1, i64 %471
  %473 = load float, float* %472, align 4
  %474 = fmul float %473, 0x3FE6A09E60000000
  %475 = shl nuw nsw i64 %469, 1
  %476 = or i64 %475, 1
  %477 = mul nsw i64 %476, %463
  %478 = add nsw i64 %477, %467
  %479 = getelementptr inbounds float, float* %1, i64 %478
  %480 = load float, float* %479, align 4
  %481 = fmul float %480, 0x3FE6A09E60000000
  %482 = fadd float %474, %481
  store float %482, float* %472, align 4
  %483 = fsub float %474, %481
  store float %483, float* %479, align 4
  %484 = add nuw nsw i64 %469, 1
  %485 = icmp ult i64 %484, %464
  br i1 %485, label %468, label %486

486:                                              ; preds = %468
  %487 = add nuw nsw i64 %467, 1
  %488 = icmp eq i64 %487, %465
  br i1 %488, label %489, label %466

489:                                              ; preds = %486, %447
  %490 = add nuw nsw i32 %448, 1
  %491 = icmp ult i32 %490, %62
  br i1 %491, label %447, label %492

492:                                              ; preds = %489
  %493 = zext i8 %452 to i32
  br label %494

494:                                              ; preds = %492, %399
  %495 = phi i32 [ %401, %399 ], [ %493, %492 ]
  %496 = shl i32 %400, %62
  %497 = icmp eq float* %7, null
  br i1 %497, label %616, label %498

498:                                              ; preds = %494
  %499 = sitofp i32 %2 to double
  %500 = tail call double @sqrt(double %499) #10
  %501 = fptrunc double %500 to float
  %502 = icmp sgt i32 %2, 0
  br i1 %502, label %503, label %616

503:                                              ; preds = %498
  %504 = zext i32 %2 to i64
  %505 = icmp ult i32 %2, 8
  br i1 %505, label %574, label %506

506:                                              ; preds = %503
  %507 = getelementptr float, float* %7, i64 %504
  %508 = getelementptr float, float* %1, i64 %504
  %509 = icmp ugt float* %508, %7
  %510 = icmp ugt float* %507, %1
  %511 = and i1 %509, %510
  br i1 %511, label %574, label %512

512:                                              ; preds = %506
  %513 = and i64 %504, 4294967288
  %514 = insertelement <4 x float> undef, float %501, i32 0
  %515 = shufflevector <4 x float> %514, <4 x float> undef, <4 x i32> zeroinitializer
  %516 = insertelement <4 x float> undef, float %501, i32 0
  %517 = shufflevector <4 x float> %516, <4 x float> undef, <4 x i32> zeroinitializer
  %518 = add nsw i64 %513, -8
  %519 = lshr exact i64 %518, 3
  %520 = add nuw nsw i64 %519, 1
  %521 = and i64 %520, 1
  %522 = icmp eq i64 %518, 0
  br i1 %522, label %556, label %523

523:                                              ; preds = %512
  %524 = sub nuw nsw i64 %520, %521
  br label %525

525:                                              ; preds = %525, %523
  %526 = phi i64 [ 0, %523 ], [ %553, %525 ]
  %527 = phi i64 [ %524, %523 ], [ %554, %525 ]
  %528 = getelementptr inbounds float, float* %1, i64 %526
  %529 = bitcast float* %528 to <4 x float>*
  %530 = load <4 x float>, <4 x float>* %529, align 4, !alias.scope !18
  %531 = getelementptr inbounds float, float* %528, i64 4
  %532 = bitcast float* %531 to <4 x float>*
  %533 = load <4 x float>, <4 x float>* %532, align 4, !alias.scope !18
  %534 = fmul <4 x float> %530, %515
  %535 = fmul <4 x float> %533, %517
  %536 = getelementptr inbounds float, float* %7, i64 %526
  %537 = bitcast float* %536 to <4 x float>*
  store <4 x float> %534, <4 x float>* %537, align 4, !alias.scope !21, !noalias !18
  %538 = getelementptr inbounds float, float* %536, i64 4
  %539 = bitcast float* %538 to <4 x float>*
  store <4 x float> %535, <4 x float>* %539, align 4, !alias.scope !21, !noalias !18
  %540 = or i64 %526, 8
  %541 = getelementptr inbounds float, float* %1, i64 %540
  %542 = bitcast float* %541 to <4 x float>*
  %543 = load <4 x float>, <4 x float>* %542, align 4, !alias.scope !18
  %544 = getelementptr inbounds float, float* %541, i64 4
  %545 = bitcast float* %544 to <4 x float>*
  %546 = load <4 x float>, <4 x float>* %545, align 4, !alias.scope !18
  %547 = fmul <4 x float> %543, %515
  %548 = fmul <4 x float> %546, %517
  %549 = getelementptr inbounds float, float* %7, i64 %540
  %550 = bitcast float* %549 to <4 x float>*
  store <4 x float> %547, <4 x float>* %550, align 4, !alias.scope !21, !noalias !18
  %551 = getelementptr inbounds float, float* %549, i64 4
  %552 = bitcast float* %551 to <4 x float>*
  store <4 x float> %548, <4 x float>* %552, align 4, !alias.scope !21, !noalias !18
  %553 = add i64 %526, 16
  %554 = add i64 %527, -2
  %555 = icmp eq i64 %554, 0
  br i1 %555, label %556, label %525, !llvm.loop !23

556:                                              ; preds = %525, %512
  %557 = phi i64 [ 0, %512 ], [ %553, %525 ]
  %558 = icmp eq i64 %521, 0
  br i1 %558, label %572, label %559

559:                                              ; preds = %556
  %560 = getelementptr inbounds float, float* %1, i64 %557
  %561 = bitcast float* %560 to <4 x float>*
  %562 = load <4 x float>, <4 x float>* %561, align 4, !alias.scope !18
  %563 = getelementptr inbounds float, float* %560, i64 4
  %564 = bitcast float* %563 to <4 x float>*
  %565 = load <4 x float>, <4 x float>* %564, align 4, !alias.scope !18
  %566 = fmul <4 x float> %562, %515
  %567 = fmul <4 x float> %565, %517
  %568 = getelementptr inbounds float, float* %7, i64 %557
  %569 = bitcast float* %568 to <4 x float>*
  store <4 x float> %566, <4 x float>* %569, align 4, !alias.scope !21, !noalias !18
  %570 = getelementptr inbounds float, float* %568, i64 4
  %571 = bitcast float* %570 to <4 x float>*
  store <4 x float> %567, <4 x float>* %571, align 4, !alias.scope !21, !noalias !18
  br label %572

572:                                              ; preds = %556, %559
  %573 = icmp eq i64 %513, %504
  br i1 %573, label %616, label %574

574:                                              ; preds = %572, %506, %503
  %575 = phi i64 [ 0, %506 ], [ 0, %503 ], [ %513, %572 ]
  %576 = xor i64 %575, -1
  %577 = add nsw i64 %576, %504
  %578 = and i64 %504, 3
  %579 = icmp eq i64 %578, 0
  br i1 %579, label %590, label %580

580:                                              ; preds = %574, %580
  %581 = phi i64 [ %587, %580 ], [ %575, %574 ]
  %582 = phi i64 [ %588, %580 ], [ %578, %574 ]
  %583 = getelementptr inbounds float, float* %1, i64 %581
  %584 = load float, float* %583, align 4
  %585 = fmul float %584, %501
  %586 = getelementptr inbounds float, float* %7, i64 %581
  store float %585, float* %586, align 4
  %587 = add nuw nsw i64 %581, 1
  %588 = add i64 %582, -1
  %589 = icmp eq i64 %588, 0
  br i1 %589, label %590, label %580, !llvm.loop !24

590:                                              ; preds = %580, %574
  %591 = phi i64 [ %575, %574 ], [ %587, %580 ]
  %592 = icmp ult i64 %577, 3
  br i1 %592, label %616, label %593

593:                                              ; preds = %590, %593
  %594 = phi i64 [ %614, %593 ], [ %591, %590 ]
  %595 = getelementptr inbounds float, float* %1, i64 %594
  %596 = load float, float* %595, align 4
  %597 = fmul float %596, %501
  %598 = getelementptr inbounds float, float* %7, i64 %594
  store float %597, float* %598, align 4
  %599 = add nuw nsw i64 %594, 1
  %600 = getelementptr inbounds float, float* %1, i64 %599
  %601 = load float, float* %600, align 4
  %602 = fmul float %601, %501
  %603 = getelementptr inbounds float, float* %7, i64 %599
  store float %602, float* %603, align 4
  %604 = add nuw nsw i64 %594, 2
  %605 = getelementptr inbounds float, float* %1, i64 %604
  %606 = load float, float* %605, align 4
  %607 = fmul float %606, %501
  %608 = getelementptr inbounds float, float* %7, i64 %604
  store float %607, float* %608, align 4
  %609 = add nuw nsw i64 %594, 3
  %610 = getelementptr inbounds float, float* %1, i64 %609
  %611 = load float, float* %610, align 4
  %612 = fmul float %611, %501
  %613 = getelementptr inbounds float, float* %7, i64 %609
  store float %612, float* %613, align 4
  %614 = add nuw nsw i64 %594, 4
  %615 = icmp eq i64 %614, %504
  br i1 %615, label %616, label %593, !llvm.loop !26

616:                                              ; preds = %590, %593, %572, %498, %494
  %617 = shl nsw i32 -1, %496
  %618 = xor i32 %617, -1
  %619 = and i32 %495, %618
  br label %620

620:                                              ; preds = %56, %54, %616, %388
  %621 = phi i32 [ %619, %616 ], [ %389, %388 ], [ 1, %54 ], [ 1, %56 ]
  ret i32 %621
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @quant_band_stereo(%struct.band_ctx*, float*, float*, i32, i32, i32, float*, i32, float*, float*, i32) unnamed_addr #5 {
  %12 = alloca float, align 4
  %13 = alloca float, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %struct.split_ctx, align 4
  store i32 %4, i32* %14, align 4
  store i32 %10, i32* %15, align 4
  %17 = bitcast %struct.split_ctx* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %17) #10
  %18 = getelementptr inbounds %struct.split_ctx, %struct.split_ctx* %16, i64 0, i32 3
  %19 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %0, i64 0, i32 0
  %20 = bitcast %struct.split_ctx* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %20, i8 -86, i64 24, i1 false)
  %21 = load i32, i32* %19, align 8
  %22 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %0, i64 0, i32 7
  %23 = load %struct.ec_ctx*, %struct.ec_ctx** %22, align 8
  %24 = icmp eq i32 %3, 1
  br i1 %24, label %25, label %105

25:                                               ; preds = %11
  %26 = icmp eq float* %2, null
  %27 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %0, i64 0, i32 8
  %28 = icmp eq i32 %21, 0
  %29 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %0, i64 0, i32 1
  %30 = select i1 %26, i32 1, i32 2
  %31 = load i32, i32* %27, align 8
  %32 = icmp sgt i32 %31, 7
  br i1 %28, label %48, label %33

33:                                               ; preds = %25
  br i1 %32, label %34, label %40

34:                                               ; preds = %33
  %35 = load float, float* %1, align 4
  %36 = fcmp olt float %35, 0.000000e+00
  %37 = zext i1 %36 to i32
  tail call void @ec_enc_bits(%struct.ec_ctx* %23, i32 %37, i32 1) #10
  %38 = load i32, i32* %27, align 8
  %39 = add nsw i32 %38, -8
  store i32 %39, i32* %27, align 8
  br label %40

40:                                               ; preds = %34, %33
  %41 = phi i32 [ %37, %34 ], [ 0, %33 ]
  %42 = load i32, i32* %29, align 4
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %47, label %44

44:                                               ; preds = %40
  %45 = icmp eq i32 %41, 0
  %46 = select i1 %45, float 1.000000e+00, float -1.000000e+00
  store float %46, float* %1, align 4
  br label %47

47:                                               ; preds = %44, %40
  br i1 %26, label %99, label %79

48:                                               ; preds = %25
  br i1 %32, label %49, label %53

49:                                               ; preds = %48
  %50 = tail call i32 @ec_dec_bits(%struct.ec_ctx* %23, i32 1) #10
  %51 = load i32, i32* %27, align 8
  %52 = add nsw i32 %51, -8
  store i32 %52, i32* %27, align 8
  br label %53

53:                                               ; preds = %49, %48
  %54 = phi i32 [ %50, %49 ], [ 0, %48 ]
  %55 = load i32, i32* %29, align 4
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %60, label %57

57:                                               ; preds = %53
  %58 = icmp eq i32 %54, 0
  %59 = select i1 %58, float 1.000000e+00, float -1.000000e+00
  store float %59, float* %1, align 4
  br label %60

60:                                               ; preds = %57, %53
  br i1 %26, label %99, label %61

61:                                               ; preds = %60, %76
  %62 = phi i32 [ %77, %76 ], [ 1, %60 ]
  %63 = load i32, i32* %27, align 8
  %64 = icmp sgt i32 %63, 7
  br i1 %64, label %65, label %69

65:                                               ; preds = %61
  %66 = tail call i32 @ec_dec_bits(%struct.ec_ctx* %23, i32 1) #10
  %67 = load i32, i32* %27, align 8
  %68 = add nsw i32 %67, -8
  store i32 %68, i32* %27, align 8
  br label %69

69:                                               ; preds = %65, %61
  %70 = phi i32 [ %66, %65 ], [ 0, %61 ]
  %71 = load i32, i32* %29, align 4
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %76, label %73

73:                                               ; preds = %69
  %74 = icmp eq i32 %70, 0
  %75 = select i1 %74, float 1.000000e+00, float -1.000000e+00
  store float %75, float* %2, align 4
  br label %76

76:                                               ; preds = %73, %69
  %77 = add nuw nsw i32 %62, 1
  %78 = icmp ult i32 %77, %30
  br i1 %78, label %61, label %99, !llvm.loop !27

79:                                               ; preds = %47, %96
  %80 = phi i32 [ %97, %96 ], [ 1, %47 ]
  %81 = load i32, i32* %27, align 8
  %82 = icmp sgt i32 %81, 7
  br i1 %82, label %83, label %89

83:                                               ; preds = %79
  %84 = load float, float* %2, align 4
  %85 = fcmp olt float %84, 0.000000e+00
  %86 = zext i1 %85 to i32
  tail call void @ec_enc_bits(%struct.ec_ctx* %23, i32 %86, i32 1) #10
  %87 = load i32, i32* %27, align 8
  %88 = add nsw i32 %87, -8
  store i32 %88, i32* %27, align 8
  br label %89

89:                                               ; preds = %83, %79
  %90 = phi i32 [ %86, %83 ], [ 0, %79 ]
  %91 = load i32, i32* %29, align 4
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %96, label %93

93:                                               ; preds = %89
  %94 = icmp eq i32 %90, 0
  %95 = select i1 %94, float 1.000000e+00, float -1.000000e+00
  store float %95, float* %2, align 4
  br label %96

96:                                               ; preds = %93, %89
  %97 = add nuw nsw i32 %80, 1
  %98 = icmp ult i32 %97, %30
  br i1 %98, label %79, label %99, !llvm.loop !28

99:                                               ; preds = %47, %96, %60, %76
  %100 = icmp eq float* %8, null
  br i1 %100, label %414, label %101

101:                                              ; preds = %99
  %102 = bitcast float* %1 to i32*
  %103 = load i32, i32* %102, align 4
  %104 = bitcast float* %8 to i32*
  store i32 %103, i32* %104, align 4
  br label %414

105:                                              ; preds = %11
  %106 = getelementptr inbounds %struct.split_ctx, %struct.split_ctx* %16, i64 0, i32 0
  %107 = getelementptr inbounds %struct.split_ctx, %struct.split_ctx* %16, i64 0, i32 5
  %108 = getelementptr inbounds %struct.split_ctx, %struct.split_ctx* %16, i64 0, i32 4
  %109 = getelementptr inbounds %struct.split_ctx, %struct.split_ctx* %16, i64 0, i32 2
  %110 = getelementptr inbounds %struct.split_ctx, %struct.split_ctx* %16, i64 0, i32 1
  call fastcc void @compute_theta(%struct.band_ctx* %0, %struct.split_ctx* nonnull %16, float* %1, float* %2, i32 %3, i32* nonnull %14, i32 %5, i32 %5, i32 %7, i32 1, i32* nonnull %15)
  %111 = load i32, i32* %106, align 4
  %112 = load i32, i32* %110, align 4
  %113 = load i32, i32* %109, align 4
  %114 = load i32, i32* %108, align 4
  %115 = load i32, i32* %107, align 4
  %116 = sitofp i32 %112 to float
  %117 = fmul float %116, 0x3F00000000000000
  %118 = sitofp i32 %113 to float
  %119 = fmul float %118, 0x3F00000000000000
  %120 = icmp eq i32 %3, 2
  %121 = load i32, i32* %14, align 4
  br i1 %120, label %122, label %187

122:                                              ; preds = %105
  %123 = and i32 %114, -16385
  %124 = icmp ne i32 %123, 0
  %125 = select i1 %124, i32 8, i32 0
  %126 = sub nsw i32 %121, %125
  %127 = icmp sgt i32 %114, 8192
  %128 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %0, i64 0, i32 8
  %129 = load i32, i32* %128, align 8
  %130 = add i32 %125, %115
  %131 = sub i32 %129, %130
  store i32 %131, i32* %128, align 8
  %132 = select i1 %127, float* %2, float* %1
  %133 = select i1 %127, float* %1, float* %2
  br i1 %124, label %134, label %150

134:                                              ; preds = %122
  %135 = icmp eq i32 %21, 0
  br i1 %135, label %148, label %136

136:                                              ; preds = %134
  %137 = bitcast float* %132 to <2 x float>*
  %138 = load <2 x float>, <2 x float>* %137, align 4
  %139 = bitcast float* %133 to <2 x float>*
  %140 = load <2 x float>, <2 x float>* %139, align 4
  %141 = shufflevector <2 x float> %140, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %142 = fmul <2 x float> %138, %141
  %143 = extractelement <2 x float> %142, i32 0
  %144 = extractelement <2 x float> %142, i32 1
  %145 = fsub float %143, %144
  %146 = fcmp olt float %145, 0.000000e+00
  %147 = zext i1 %146 to i32
  tail call void @ec_enc_bits(%struct.ec_ctx* %23, i32 %147, i32 1) #10
  br label %150

148:                                              ; preds = %134
  %149 = tail call i32 @ec_dec_bits(%struct.ec_ctx* %23, i32 1) #10
  br label %150

150:                                              ; preds = %136, %148, %122
  %151 = phi i32 [ %147, %136 ], [ %149, %148 ], [ 0, %122 ]
  %152 = shl nsw i32 %151, 1
  %153 = sub nsw i32 1, %152
  %154 = tail call fastcc i32 @quant_band(%struct.band_ctx* %0, float* %132, i32 2, i32 %126, i32 %5, float* %6, i32 %7, float* %8, float 1.000000e+00, float* %9, i32 %10)
  %155 = add i32 %152, -1
  %156 = sitofp i32 %155 to float
  %157 = getelementptr inbounds float, float* %132, i64 1
  %158 = load float, float* %157, align 4
  %159 = fmul float %158, %156
  store float %159, float* %133, align 4
  %160 = sitofp i32 %153 to float
  %161 = load float, float* %132, align 4
  %162 = fmul float %161, %160
  %163 = getelementptr inbounds float, float* %133, i64 1
  store float %162, float* %163, align 4
  %164 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %0, i64 0, i32 1
  %165 = load i32, i32* %164, align 4
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %229, label %167

167:                                              ; preds = %150
  %168 = load float, float* %1, align 4
  %169 = fmul float %117, %168
  store float %169, float* %1, align 4
  %170 = getelementptr inbounds float, float* %1, i64 1
  %171 = load float, float* %170, align 4
  %172 = fmul float %117, %171
  store float %172, float* %170, align 4
  %173 = load float, float* %2, align 4
  %174 = fmul float %119, %173
  store float %174, float* %2, align 4
  %175 = getelementptr inbounds float, float* %2, i64 1
  %176 = load float, float* %175, align 4
  %177 = fmul float %119, %176
  store float %177, float* %175, align 4
  %178 = load float, float* %1, align 4
  %179 = fsub float %178, %174
  store float %179, float* %1, align 4
  %180 = load float, float* %2, align 4
  %181 = fadd float %178, %180
  store float %181, float* %2, align 4
  %182 = load float, float* %170, align 4
  %183 = load float, float* %175, align 4
  %184 = fsub float %182, %183
  store float %184, float* %170, align 4
  %185 = load float, float* %175, align 4
  %186 = fadd float %182, %185
  store float %186, float* %175, align 4
  br label %229

187:                                              ; preds = %105
  %188 = load i32, i32* %18, align 4
  %189 = sub nsw i32 %121, %188
  %190 = sdiv i32 %189, 2
  %191 = icmp slt i32 %121, %190
  %192 = select i1 %191, i32 %121, i32 %190
  %193 = icmp sgt i32 %192, 0
  %194 = select i1 %193, i32 %192, i32 0
  %195 = sub nsw i32 %121, %194
  %196 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %0, i64 0, i32 8
  %197 = load i32, i32* %196, align 8
  %198 = sub nsw i32 %197, %115
  store i32 %198, i32* %196, align 8
  %199 = icmp slt i32 %194, %195
  %200 = load i32, i32* %15, align 4
  br i1 %199, label %215, label %201

201:                                              ; preds = %187
  %202 = tail call fastcc i32 @quant_band(%struct.band_ctx* %0, float* %1, i32 %3, i32 %194, i32 %5, float* %6, i32 %7, float* %8, float 1.000000e+00, float* %9, i32 %200)
  %203 = load i32, i32* %196, align 8
  %204 = sub i32 %203, %198
  %205 = add i32 %204, %194
  %206 = icmp sgt i32 %205, 24
  %207 = icmp ne i32 %114, 0
  %208 = and i1 %207, %206
  %209 = add nsw i32 %205, -24
  %210 = select i1 %208, i32 %209, i32 0
  %211 = add nsw i32 %210, %195
  %212 = ashr i32 %200, %5
  %213 = tail call fastcc i32 @quant_band(%struct.band_ctx* %0, float* %2, i32 %3, i32 %211, i32 %5, float* null, i32 %7, float* null, float %119, float* null, i32 %212)
  %214 = or i32 %213, %202
  br label %229

215:                                              ; preds = %187
  %216 = ashr i32 %200, %5
  %217 = tail call fastcc i32 @quant_band(%struct.band_ctx* %0, float* %2, i32 %3, i32 %195, i32 %5, float* null, i32 %7, float* null, float %119, float* null, i32 %216)
  %218 = load i32, i32* %196, align 8
  %219 = sub i32 %218, %198
  %220 = add i32 %219, %195
  %221 = icmp sgt i32 %220, 24
  %222 = icmp ne i32 %114, 16384
  %223 = and i1 %222, %221
  %224 = add nsw i32 %220, -24
  %225 = select i1 %223, i32 %224, i32 0
  %226 = add nsw i32 %225, %194
  %227 = tail call fastcc i32 @quant_band(%struct.band_ctx* %0, float* %1, i32 %3, i32 %226, i32 %5, float* %6, i32 %7, float* %8, float 1.000000e+00, float* %9, i32 %200)
  %228 = or i32 %227, %217
  br label %229

229:                                              ; preds = %201, %215, %167, %150
  %230 = phi i32 [ %154, %150 ], [ %154, %167 ], [ %214, %201 ], [ %228, %215 ]
  %231 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %0, i64 0, i32 1
  %232 = load i32, i32* %231, align 4
  %233 = icmp eq i32 %232, 0
  br i1 %233, label %414, label %234

234:                                              ; preds = %229
  br i1 %120, label %346, label %235

235:                                              ; preds = %234
  %236 = bitcast float* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %236) #10, !noalias !29
  store float 0.000000e+00, float* %12, align 4, !noalias !29
  %237 = bitcast float* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %237) #10, !noalias !29
  store float 0.000000e+00, float* %13, align 4, !noalias !29
  call void @dual_inner_prod_sse(float* %2, float* %1, float* %2, i32 %3, float* nonnull %12, float* nonnull %13) #10
  %238 = load float, float* %12, align 4, !noalias !29
  %239 = fmul float %117, %238
  store float %239, float* %12, align 4, !noalias !29
  %240 = fmul float %117, %117
  %241 = load float, float* %13, align 4, !noalias !29
  %242 = fadd float %240, %241
  %243 = fmul float %239, 2.000000e+00
  %244 = fsub float %242, %243
  %245 = fadd float %243, %242
  %246 = fcmp olt float %245, 0x3F43A92A40000000
  %247 = fcmp olt float %244, 0x3F43A92A40000000
  %248 = or i1 %246, %247
  br i1 %248, label %249, label %254

249:                                              ; preds = %235
  %250 = bitcast float* %2 to i8*
  %251 = bitcast float* %1 to i8*
  %252 = sext i32 %3 to i64
  %253 = shl nsw i64 %252, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %250, i8* align 4 %251, i64 %253, i1 false) #10, !alias.scope !29
  br label %345

254:                                              ; preds = %235
  %255 = call float @sqrtf(float %244) #7
  %256 = fdiv float 1.000000e+00, %255
  %257 = call float @sqrtf(float %245) #7
  %258 = fdiv float 1.000000e+00, %257
  %259 = icmp sgt i32 %3, 0
  br i1 %259, label %260, label %345

260:                                              ; preds = %254
  %261 = zext i32 %3 to i64
  %262 = icmp ult i32 %3, 4
  br i1 %262, label %330, label %263

263:                                              ; preds = %260
  %264 = and i64 %261, 4294967292
  %265 = insertelement <4 x float> undef, float %117, i32 0
  %266 = shufflevector <4 x float> %265, <4 x float> undef, <4 x i32> zeroinitializer
  %267 = insertelement <4 x float> undef, float %256, i32 0
  %268 = shufflevector <4 x float> %267, <4 x float> undef, <4 x i32> zeroinitializer
  %269 = insertelement <4 x float> undef, float %258, i32 0
  %270 = shufflevector <4 x float> %269, <4 x float> undef, <4 x i32> zeroinitializer
  %271 = add nsw i64 %264, -4
  %272 = lshr exact i64 %271, 2
  %273 = add nuw nsw i64 %272, 1
  %274 = and i64 %273, 1
  %275 = icmp eq i64 %271, 0
  br i1 %275, label %311, label %276

276:                                              ; preds = %263
  %277 = sub nuw nsw i64 %273, %274
  br label %278

278:                                              ; preds = %278, %276
  %279 = phi i64 [ 0, %276 ], [ %308, %278 ]
  %280 = phi i64 [ %277, %276 ], [ %309, %278 ]
  %281 = getelementptr inbounds float, float* %1, i64 %279
  %282 = bitcast float* %281 to <4 x float>*
  %283 = load <4 x float>, <4 x float>* %282, align 4, !alias.scope !33, !noalias !34
  %284 = fmul <4 x float> %266, %283
  %285 = getelementptr inbounds float, float* %2, i64 %279
  %286 = bitcast float* %285 to <4 x float>*
  %287 = load <4 x float>, <4 x float>* %286, align 4, !alias.scope !34, !noalias !33
  %288 = fsub <4 x float> %284, %287
  %289 = fmul <4 x float> %268, %288
  %290 = bitcast float* %281 to <4 x float>*
  store <4 x float> %289, <4 x float>* %290, align 4, !alias.scope !33, !noalias !34
  %291 = fadd <4 x float> %284, %287
  %292 = fmul <4 x float> %270, %291
  %293 = bitcast float* %285 to <4 x float>*
  store <4 x float> %292, <4 x float>* %293, align 4, !alias.scope !34, !noalias !33
  %294 = or i64 %279, 4
  %295 = getelementptr inbounds float, float* %1, i64 %294
  %296 = bitcast float* %295 to <4 x float>*
  %297 = load <4 x float>, <4 x float>* %296, align 4, !alias.scope !33, !noalias !34
  %298 = fmul <4 x float> %266, %297
  %299 = getelementptr inbounds float, float* %2, i64 %294
  %300 = bitcast float* %299 to <4 x float>*
  %301 = load <4 x float>, <4 x float>* %300, align 4, !alias.scope !34, !noalias !33
  %302 = fsub <4 x float> %298, %301
  %303 = fmul <4 x float> %268, %302
  %304 = bitcast float* %295 to <4 x float>*
  store <4 x float> %303, <4 x float>* %304, align 4, !alias.scope !33, !noalias !34
  %305 = fadd <4 x float> %298, %301
  %306 = fmul <4 x float> %270, %305
  %307 = bitcast float* %299 to <4 x float>*
  store <4 x float> %306, <4 x float>* %307, align 4, !alias.scope !34, !noalias !33
  %308 = add i64 %279, 8
  %309 = add i64 %280, -2
  %310 = icmp eq i64 %309, 0
  br i1 %310, label %311, label %278, !llvm.loop !35

311:                                              ; preds = %278, %263
  %312 = phi i64 [ 0, %263 ], [ %308, %278 ]
  %313 = icmp eq i64 %274, 0
  br i1 %313, label %328, label %314

314:                                              ; preds = %311
  %315 = getelementptr inbounds float, float* %1, i64 %312
  %316 = bitcast float* %315 to <4 x float>*
  %317 = load <4 x float>, <4 x float>* %316, align 4, !alias.scope !33, !noalias !34
  %318 = fmul <4 x float> %266, %317
  %319 = getelementptr inbounds float, float* %2, i64 %312
  %320 = bitcast float* %319 to <4 x float>*
  %321 = load <4 x float>, <4 x float>* %320, align 4, !alias.scope !34, !noalias !33
  %322 = fsub <4 x float> %318, %321
  %323 = fmul <4 x float> %268, %322
  %324 = bitcast float* %315 to <4 x float>*
  store <4 x float> %323, <4 x float>* %324, align 4, !alias.scope !33, !noalias !34
  %325 = fadd <4 x float> %318, %321
  %326 = fmul <4 x float> %270, %325
  %327 = bitcast float* %319 to <4 x float>*
  store <4 x float> %326, <4 x float>* %327, align 4, !alias.scope !34, !noalias !33
  br label %328

328:                                              ; preds = %311, %314
  %329 = icmp eq i64 %264, %261
  br i1 %329, label %345, label %330

330:                                              ; preds = %328, %260
  %331 = phi i64 [ 0, %260 ], [ %264, %328 ]
  br label %332

332:                                              ; preds = %330, %332
  %333 = phi i64 [ %343, %332 ], [ %331, %330 ]
  %334 = getelementptr inbounds float, float* %1, i64 %333
  %335 = load float, float* %334, align 4, !alias.scope !33, !noalias !34
  %336 = fmul float %117, %335
  %337 = getelementptr inbounds float, float* %2, i64 %333
  %338 = load float, float* %337, align 4, !alias.scope !34, !noalias !33
  %339 = fsub float %336, %338
  %340 = fmul float %256, %339
  store float %340, float* %334, align 4, !alias.scope !33, !noalias !34
  %341 = fadd float %336, %338
  %342 = fmul float %258, %341
  store float %342, float* %337, align 4, !alias.scope !34, !noalias !33
  %343 = add nuw nsw i64 %333, 1
  %344 = icmp eq i64 %343, %261
  br i1 %344, label %345, label %332, !llvm.loop !36

345:                                              ; preds = %332, %328, %249, %254
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %237) #10, !noalias !29
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %236) #10, !noalias !29
  br label %346

346:                                              ; preds = %234, %345
  %347 = icmp ne i32 %111, 0
  %348 = icmp sgt i32 %3, 0
  %349 = and i1 %347, %348
  br i1 %349, label %350, label %414

350:                                              ; preds = %346
  %351 = zext i32 %3 to i64
  %352 = icmp ult i32 %3, 8
  br i1 %352, label %405, label %353

353:                                              ; preds = %350
  %354 = and i64 %351, 4294967288
  %355 = add nsw i64 %354, -8
  %356 = lshr exact i64 %355, 3
  %357 = add nuw nsw i64 %356, 1
  %358 = and i64 %357, 1
  %359 = icmp eq i64 %355, 0
  br i1 %359, label %389, label %360

360:                                              ; preds = %353
  %361 = sub nuw nsw i64 %357, %358
  br label %362

362:                                              ; preds = %362, %360
  %363 = phi i64 [ 0, %360 ], [ %386, %362 ]
  %364 = phi i64 [ %361, %360 ], [ %387, %362 ]
  %365 = getelementptr inbounds float, float* %2, i64 %363
  %366 = bitcast float* %365 to <4 x float>*
  %367 = load <4 x float>, <4 x float>* %366, align 4
  %368 = getelementptr inbounds float, float* %365, i64 4
  %369 = bitcast float* %368 to <4 x float>*
  %370 = load <4 x float>, <4 x float>* %369, align 4
  %371 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %367
  %372 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %370
  %373 = bitcast float* %365 to <4 x float>*
  store <4 x float> %371, <4 x float>* %373, align 4
  %374 = bitcast float* %368 to <4 x float>*
  store <4 x float> %372, <4 x float>* %374, align 4
  %375 = or i64 %363, 8
  %376 = getelementptr inbounds float, float* %2, i64 %375
  %377 = bitcast float* %376 to <4 x float>*
  %378 = load <4 x float>, <4 x float>* %377, align 4
  %379 = getelementptr inbounds float, float* %376, i64 4
  %380 = bitcast float* %379 to <4 x float>*
  %381 = load <4 x float>, <4 x float>* %380, align 4
  %382 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %378
  %383 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %381
  %384 = bitcast float* %376 to <4 x float>*
  store <4 x float> %382, <4 x float>* %384, align 4
  %385 = bitcast float* %379 to <4 x float>*
  store <4 x float> %383, <4 x float>* %385, align 4
  %386 = add i64 %363, 16
  %387 = add i64 %364, -2
  %388 = icmp eq i64 %387, 0
  br i1 %388, label %389, label %362, !llvm.loop !37

389:                                              ; preds = %362, %353
  %390 = phi i64 [ 0, %353 ], [ %386, %362 ]
  %391 = icmp eq i64 %358, 0
  br i1 %391, label %403, label %392

392:                                              ; preds = %389
  %393 = getelementptr inbounds float, float* %2, i64 %390
  %394 = bitcast float* %393 to <4 x float>*
  %395 = load <4 x float>, <4 x float>* %394, align 4
  %396 = getelementptr inbounds float, float* %393, i64 4
  %397 = bitcast float* %396 to <4 x float>*
  %398 = load <4 x float>, <4 x float>* %397, align 4
  %399 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %395
  %400 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %398
  %401 = bitcast float* %393 to <4 x float>*
  store <4 x float> %399, <4 x float>* %401, align 4
  %402 = bitcast float* %396 to <4 x float>*
  store <4 x float> %400, <4 x float>* %402, align 4
  br label %403

403:                                              ; preds = %389, %392
  %404 = icmp eq i64 %354, %351
  br i1 %404, label %414, label %405

405:                                              ; preds = %403, %350
  %406 = phi i64 [ 0, %350 ], [ %354, %403 ]
  br label %407

407:                                              ; preds = %405, %407
  %408 = phi i64 [ %412, %407 ], [ %406, %405 ]
  %409 = getelementptr inbounds float, float* %2, i64 %408
  %410 = load float, float* %409, align 4
  %411 = fsub float -0.000000e+00, %410
  store float %411, float* %409, align 4
  %412 = add nuw nsw i64 %408, 1
  %413 = icmp eq i64 %412, %351
  br i1 %413, label %414, label %407, !llvm.loop !38

414:                                              ; preds = %407, %403, %346, %101, %99, %229
  %415 = phi i32 [ %230, %346 ], [ %230, %229 ], [ 1, %99 ], [ 1, %101 ], [ %230, %403 ], [ %230, %407 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %17) #10
  ret i32 %415
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @deinterleave_hadamard(float* nocapture, i32, i32, i32) unnamed_addr #5 {
  %5 = mul nsw i32 %2, %1
  %6 = sext i32 %5 to i64
  %7 = shl nsw i64 %6, 2
  %8 = alloca float, i64 %6, align 16
  %9 = bitcast float* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 %7, i1 false)
  %10 = icmp sgt i32 %2, 0
  br i1 %10, label %12, label %11

11:                                               ; preds = %4
  tail call void @celt_fatal(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.1, i64 0, i64 0), i32 591) #11
  unreachable

12:                                               ; preds = %4
  %13 = icmp eq i32 %3, 0
  br i1 %13, label %14, label %89

14:                                               ; preds = %12
  %15 = icmp sgt i32 %1, 0
  br i1 %15, label %16, label %168

16:                                               ; preds = %14
  %17 = sext i32 %2 to i64
  %18 = sext i32 %1 to i64
  %19 = zext i32 %2 to i64
  %20 = zext i32 %1 to i64
  %21 = add nsw i64 %20, -1
  %22 = and i64 %20, 3
  %23 = icmp ult i64 %21, 3
  %24 = sub nsw i64 %20, %22
  %25 = icmp eq i64 %22, 0
  br label %26

26:                                               ; preds = %86, %16
  %27 = phi i64 [ 0, %16 ], [ %87, %86 ]
  %28 = mul nsw i64 %27, %18
  br i1 %23, label %70, label %29

29:                                               ; preds = %26, %29
  %30 = phi i64 [ %67, %29 ], [ 0, %26 ]
  %31 = phi i64 [ %68, %29 ], [ %24, %26 ]
  %32 = mul nsw i64 %30, %17
  %33 = add nsw i64 %32, %27
  %34 = getelementptr inbounds float, float* %0, i64 %33
  %35 = bitcast float* %34 to i32*
  %36 = load i32, i32* %35, align 4
  %37 = add nsw i64 %30, %28
  %38 = getelementptr inbounds float, float* %8, i64 %37
  %39 = bitcast float* %38 to i32*
  store i32 %36, i32* %39, align 4
  %40 = or i64 %30, 1
  %41 = mul nsw i64 %40, %17
  %42 = add nsw i64 %41, %27
  %43 = getelementptr inbounds float, float* %0, i64 %42
  %44 = bitcast float* %43 to i32*
  %45 = load i32, i32* %44, align 4
  %46 = add nsw i64 %40, %28
  %47 = getelementptr inbounds float, float* %8, i64 %46
  %48 = bitcast float* %47 to i32*
  store i32 %45, i32* %48, align 4
  %49 = or i64 %30, 2
  %50 = mul nsw i64 %49, %17
  %51 = add nsw i64 %50, %27
  %52 = getelementptr inbounds float, float* %0, i64 %51
  %53 = bitcast float* %52 to i32*
  %54 = load i32, i32* %53, align 4
  %55 = add nsw i64 %49, %28
  %56 = getelementptr inbounds float, float* %8, i64 %55
  %57 = bitcast float* %56 to i32*
  store i32 %54, i32* %57, align 4
  %58 = or i64 %30, 3
  %59 = mul nsw i64 %58, %17
  %60 = add nsw i64 %59, %27
  %61 = getelementptr inbounds float, float* %0, i64 %60
  %62 = bitcast float* %61 to i32*
  %63 = load i32, i32* %62, align 4
  %64 = add nsw i64 %58, %28
  %65 = getelementptr inbounds float, float* %8, i64 %64
  %66 = bitcast float* %65 to i32*
  store i32 %63, i32* %66, align 4
  %67 = add nuw nsw i64 %30, 4
  %68 = add i64 %31, -4
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %70, label %29

70:                                               ; preds = %29, %26
  %71 = phi i64 [ 0, %26 ], [ %67, %29 ]
  br i1 %25, label %86, label %72

72:                                               ; preds = %70, %72
  %73 = phi i64 [ %83, %72 ], [ %71, %70 ]
  %74 = phi i64 [ %84, %72 ], [ %22, %70 ]
  %75 = mul nsw i64 %73, %17
  %76 = add nsw i64 %75, %27
  %77 = getelementptr inbounds float, float* %0, i64 %76
  %78 = bitcast float* %77 to i32*
  %79 = load i32, i32* %78, align 4
  %80 = add nsw i64 %73, %28
  %81 = getelementptr inbounds float, float* %8, i64 %80
  %82 = bitcast float* %81 to i32*
  store i32 %79, i32* %82, align 4
  %83 = add nuw nsw i64 %73, 1
  %84 = add i64 %74, -1
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %86, label %72, !llvm.loop !39

86:                                               ; preds = %72, %70
  %87 = add nuw nsw i64 %27, 1
  %88 = icmp eq i64 %87, %19
  br i1 %88, label %168, label %26

89:                                               ; preds = %12
  %90 = sext i32 %2 to i64
  %91 = getelementptr inbounds [30 x i32], [30 x i32]* @ordery_table, i64 0, i64 %90
  %92 = getelementptr inbounds i32, i32* %91, i64 -2
  %93 = icmp sgt i32 %1, 0
  br i1 %93, label %94, label %168

94:                                               ; preds = %89
  %95 = zext i32 %2 to i64
  %96 = zext i32 %1 to i64
  %97 = add nsw i64 %96, -1
  %98 = and i64 %96, 3
  %99 = icmp ult i64 %97, 3
  %100 = sub nsw i64 %96, %98
  %101 = icmp eq i64 %98, 0
  br label %102

102:                                              ; preds = %165, %94
  %103 = phi i64 [ 0, %94 ], [ %166, %165 ]
  %104 = getelementptr inbounds i32, i32* %92, i64 %103
  %105 = load i32, i32* %104, align 4
  %106 = mul nsw i32 %105, %1
  %107 = sext i32 %106 to i64
  br i1 %99, label %149, label %108

108:                                              ; preds = %102, %108
  %109 = phi i64 [ %146, %108 ], [ 0, %102 ]
  %110 = phi i64 [ %147, %108 ], [ %100, %102 ]
  %111 = mul nsw i64 %109, %90
  %112 = add nsw i64 %111, %103
  %113 = getelementptr inbounds float, float* %0, i64 %112
  %114 = bitcast float* %113 to i32*
  %115 = load i32, i32* %114, align 4
  %116 = add nsw i64 %109, %107
  %117 = getelementptr inbounds float, float* %8, i64 %116
  %118 = bitcast float* %117 to i32*
  store i32 %115, i32* %118, align 4
  %119 = or i64 %109, 1
  %120 = mul nsw i64 %119, %90
  %121 = add nsw i64 %120, %103
  %122 = getelementptr inbounds float, float* %0, i64 %121
  %123 = bitcast float* %122 to i32*
  %124 = load i32, i32* %123, align 4
  %125 = add nsw i64 %119, %107
  %126 = getelementptr inbounds float, float* %8, i64 %125
  %127 = bitcast float* %126 to i32*
  store i32 %124, i32* %127, align 4
  %128 = or i64 %109, 2
  %129 = mul nsw i64 %128, %90
  %130 = add nsw i64 %129, %103
  %131 = getelementptr inbounds float, float* %0, i64 %130
  %132 = bitcast float* %131 to i32*
  %133 = load i32, i32* %132, align 4
  %134 = add nsw i64 %128, %107
  %135 = getelementptr inbounds float, float* %8, i64 %134
  %136 = bitcast float* %135 to i32*
  store i32 %133, i32* %136, align 4
  %137 = or i64 %109, 3
  %138 = mul nsw i64 %137, %90
  %139 = add nsw i64 %138, %103
  %140 = getelementptr inbounds float, float* %0, i64 %139
  %141 = bitcast float* %140 to i32*
  %142 = load i32, i32* %141, align 4
  %143 = add nsw i64 %137, %107
  %144 = getelementptr inbounds float, float* %8, i64 %143
  %145 = bitcast float* %144 to i32*
  store i32 %142, i32* %145, align 4
  %146 = add nuw nsw i64 %109, 4
  %147 = add i64 %110, -4
  %148 = icmp eq i64 %147, 0
  br i1 %148, label %149, label %108

149:                                              ; preds = %108, %102
  %150 = phi i64 [ 0, %102 ], [ %146, %108 ]
  br i1 %101, label %165, label %151

151:                                              ; preds = %149, %151
  %152 = phi i64 [ %162, %151 ], [ %150, %149 ]
  %153 = phi i64 [ %163, %151 ], [ %98, %149 ]
  %154 = mul nsw i64 %152, %90
  %155 = add nsw i64 %154, %103
  %156 = getelementptr inbounds float, float* %0, i64 %155
  %157 = bitcast float* %156 to i32*
  %158 = load i32, i32* %157, align 4
  %159 = add nsw i64 %152, %107
  %160 = getelementptr inbounds float, float* %8, i64 %159
  %161 = bitcast float* %160 to i32*
  store i32 %158, i32* %161, align 4
  %162 = add nuw nsw i64 %152, 1
  %163 = add i64 %153, -1
  %164 = icmp eq i64 %163, 0
  br i1 %164, label %165, label %151, !llvm.loop !40

165:                                              ; preds = %151, %149
  %166 = add nuw nsw i64 %103, 1
  %167 = icmp eq i64 %166, %95
  br i1 %167, label %168, label %102

168:                                              ; preds = %165, %86, %89, %14
  %169 = bitcast float* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %169, i8* nonnull align 16 %9, i64 %7, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @quant_partition(%struct.band_ctx*, float*, i32, i32, i32, float*, i32, float, i32) unnamed_addr #5 {
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca %struct.split_ctx, align 4
  store i32 %3, i32* %10, align 4
  store i32 %8, i32* %11, align 4
  %13 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %0, i64 0, i32 0
  %14 = load i32, i32* %13, align 8
  %15 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %0, i64 0, i32 2
  %16 = load %struct.OpusCustomMode*, %struct.OpusCustomMode** %15, align 8
  %17 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %0, i64 0, i32 3
  %18 = load i32, i32* %17, align 8
  %19 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %0, i64 0, i32 5
  %20 = load i32, i32* %19, align 8
  %21 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %0, i64 0, i32 7
  %22 = load %struct.ec_ctx*, %struct.ec_ctx** %21, align 8
  %23 = getelementptr %struct.OpusCustomMode, %struct.OpusCustomMode* %16, i64 0, i32 14, i32 2
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr %struct.OpusCustomMode, %struct.OpusCustomMode* %16, i64 0, i32 14, i32 1
  %26 = load i16*, i16** %25, align 8
  %27 = add nsw i32 %6, 1
  %28 = getelementptr %struct.OpusCustomMode, %struct.OpusCustomMode* %16, i64 0, i32 2
  %29 = load i32, i32* %28, align 8
  %30 = mul nsw i32 %29, %27
  %31 = add nsw i32 %30, %18
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i16, i16* %26, i64 %32
  %34 = load i16, i16* %33, align 2
  %35 = sext i16 %34 to i64
  %36 = getelementptr inbounds i8, i8* %24, i64 %35
  %37 = icmp eq i32 %6, -1
  br i1 %37, label %38, label %129

38:                                               ; preds = %9
  %39 = sext i32 %18 to i64
  %40 = getelementptr inbounds i16, i16* %26, i64 %39
  %41 = load i16, i16* %40, align 2
  %42 = sext i16 %41 to i64
  %43 = getelementptr inbounds i8, i8* %24, i64 %42
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = add nsw i32 %3, -1
  %47 = add nuw nsw i32 %45, 1
  %48 = lshr i32 %47, 1
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds i8, i8* %43, i64 %49
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = icmp sgt i32 %46, %52
  %54 = select i1 %53, i32 %48, i32 0
  %55 = select i1 %53, i32 %45, i32 %48
  %56 = add nuw nsw i32 %54, 1
  %57 = add nuw nsw i32 %56, %55
  %58 = lshr i32 %57, 1
  %59 = zext i32 %58 to i64
  %60 = getelementptr inbounds i8, i8* %43, i64 %59
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = icmp sgt i32 %46, %62
  %64 = select i1 %63, i32 %58, i32 %54
  %65 = select i1 %63, i32 %55, i32 %58
  %66 = add nuw nsw i32 %64, 1
  %67 = add nuw nsw i32 %66, %65
  %68 = lshr i32 %67, 1
  %69 = zext i32 %68 to i64
  %70 = getelementptr inbounds i8, i8* %43, i64 %69
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i32
  %73 = icmp sgt i32 %46, %72
  %74 = select i1 %73, i32 %68, i32 %64
  %75 = select i1 %73, i32 %65, i32 %68
  %76 = add nuw nsw i32 %74, 1
  %77 = add nuw nsw i32 %76, %75
  %78 = lshr i32 %77, 1
  %79 = zext i32 %78 to i64
  %80 = getelementptr inbounds i8, i8* %43, i64 %79
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i32
  %83 = icmp sgt i32 %46, %82
  %84 = select i1 %83, i32 %78, i32 %74
  %85 = select i1 %83, i32 %75, i32 %78
  %86 = add nuw nsw i32 %84, 1
  %87 = add nuw nsw i32 %86, %85
  %88 = ashr i32 %87, 1
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds i8, i8* %43, i64 %89
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i32
  %93 = icmp sgt i32 %46, %92
  %94 = select i1 %93, i32 %88, i32 %84
  %95 = select i1 %93, i32 %85, i32 %88
  %96 = add nuw nsw i32 %94, 1
  %97 = add nuw nsw i32 %96, %95
  %98 = ashr i32 %97, 1
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds i8, i8* %43, i64 %99
  %101 = load i8, i8* %100, align 1
  %102 = zext i8 %101 to i32
  %103 = icmp sgt i32 %46, %102
  %104 = select i1 %103, i32 %98, i32 %94
  %105 = select i1 %103, i32 %95, i32 %98
  %106 = icmp eq i32 %104, 0
  br i1 %106, label %112, label %107

107:                                              ; preds = %38
  %108 = sext i32 %104 to i64
  %109 = getelementptr inbounds i8, i8* %43, i64 %108
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i32
  br label %112

112:                                              ; preds = %38, %107
  %113 = phi i32 [ %111, %107 ], [ -1, %38 ]
  %114 = sub nsw i32 %46, %113
  %115 = sext i32 %105 to i64
  %116 = getelementptr inbounds i8, i8* %43, i64 %115
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i32
  %119 = sub nsw i32 %118, %46
  %120 = icmp sgt i32 %114, %119
  %121 = select i1 %120, i32 %105, i32 %104
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %329, label %123

123:                                              ; preds = %112
  %124 = sext i32 %121 to i64
  %125 = getelementptr inbounds i8, i8* %43, i64 %124
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i32
  %128 = add nuw nsw i32 %127, 1
  br label %329

129:                                              ; preds = %9
  %130 = load i8, i8* %36, align 1
  %131 = zext i8 %130 to i64
  %132 = getelementptr inbounds i8, i8* %36, i64 %131
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i32
  %135 = add nuw nsw i32 %134, 12
  %136 = icmp slt i32 %135, %3
  %137 = icmp sgt i32 %2, 2
  %138 = and i1 %137, %136
  br i1 %138, label %224, label %139

139:                                              ; preds = %129
  %140 = zext i8 %130 to i32
  %141 = add nsw i32 %3, -1
  %142 = add nuw nsw i32 %140, 1
  %143 = lshr i32 %142, 1
  %144 = zext i32 %143 to i64
  %145 = getelementptr inbounds i8, i8* %36, i64 %144
  %146 = load i8, i8* %145, align 1
  %147 = zext i8 %146 to i32
  %148 = icmp sgt i32 %141, %147
  %149 = select i1 %148, i32 %143, i32 0
  %150 = select i1 %148, i32 %140, i32 %143
  %151 = add nuw nsw i32 %149, 1
  %152 = add nuw nsw i32 %151, %150
  %153 = lshr i32 %152, 1
  %154 = zext i32 %153 to i64
  %155 = getelementptr inbounds i8, i8* %36, i64 %154
  %156 = load i8, i8* %155, align 1
  %157 = zext i8 %156 to i32
  %158 = icmp sgt i32 %141, %157
  %159 = select i1 %158, i32 %153, i32 %149
  %160 = select i1 %158, i32 %150, i32 %153
  %161 = add nuw nsw i32 %159, 1
  %162 = add nuw nsw i32 %161, %160
  %163 = lshr i32 %162, 1
  %164 = zext i32 %163 to i64
  %165 = getelementptr inbounds i8, i8* %36, i64 %164
  %166 = load i8, i8* %165, align 1
  %167 = zext i8 %166 to i32
  %168 = icmp sgt i32 %141, %167
  %169 = select i1 %168, i32 %163, i32 %159
  %170 = select i1 %168, i32 %160, i32 %163
  %171 = add nuw nsw i32 %169, 1
  %172 = add nuw nsw i32 %171, %170
  %173 = lshr i32 %172, 1
  %174 = zext i32 %173 to i64
  %175 = getelementptr inbounds i8, i8* %36, i64 %174
  %176 = load i8, i8* %175, align 1
  %177 = zext i8 %176 to i32
  %178 = icmp sgt i32 %141, %177
  %179 = select i1 %178, i32 %173, i32 %169
  %180 = select i1 %178, i32 %170, i32 %173
  %181 = add nuw nsw i32 %179, 1
  %182 = add nuw nsw i32 %181, %180
  %183 = ashr i32 %182, 1
  %184 = sext i32 %183 to i64
  %185 = getelementptr inbounds i8, i8* %36, i64 %184
  %186 = load i8, i8* %185, align 1
  %187 = zext i8 %186 to i32
  %188 = icmp sgt i32 %141, %187
  %189 = select i1 %188, i32 %183, i32 %179
  %190 = select i1 %188, i32 %180, i32 %183
  %191 = add nuw nsw i32 %189, 1
  %192 = add nuw nsw i32 %191, %190
  %193 = ashr i32 %192, 1
  %194 = sext i32 %193 to i64
  %195 = getelementptr inbounds i8, i8* %36, i64 %194
  %196 = load i8, i8* %195, align 1
  %197 = zext i8 %196 to i32
  %198 = icmp sgt i32 %141, %197
  %199 = select i1 %198, i32 %193, i32 %189
  %200 = select i1 %198, i32 %190, i32 %193
  %201 = icmp eq i32 %199, 0
  br i1 %201, label %207, label %202

202:                                              ; preds = %139
  %203 = sext i32 %199 to i64
  %204 = getelementptr inbounds i8, i8* %36, i64 %203
  %205 = load i8, i8* %204, align 1
  %206 = zext i8 %205 to i32
  br label %207

207:                                              ; preds = %139, %202
  %208 = phi i32 [ %206, %202 ], [ -1, %139 ]
  %209 = sub nsw i32 %141, %208
  %210 = sext i32 %200 to i64
  %211 = getelementptr inbounds i8, i8* %36, i64 %210
  %212 = load i8, i8* %211, align 1
  %213 = zext i8 %212 to i32
  %214 = sub nsw i32 %213, %141
  %215 = icmp sgt i32 %209, %214
  %216 = select i1 %215, i32 %200, i32 %199
  %217 = icmp eq i32 %216, 0
  br i1 %217, label %329, label %218

218:                                              ; preds = %207
  %219 = sext i32 %216 to i64
  %220 = getelementptr inbounds i8, i8* %36, i64 %219
  %221 = load i8, i8* %220, align 1
  %222 = zext i8 %221 to i32
  %223 = add nuw nsw i32 %222, 1
  br label %329

224:                                              ; preds = %129
  %225 = bitcast %struct.split_ctx* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %225) #10
  %226 = getelementptr inbounds %struct.split_ctx, %struct.split_ctx* %12, i64 0, i32 1
  %227 = getelementptr inbounds %struct.split_ctx, %struct.split_ctx* %12, i64 0, i32 2
  %228 = getelementptr inbounds %struct.split_ctx, %struct.split_ctx* %12, i64 0, i32 3
  %229 = getelementptr inbounds %struct.split_ctx, %struct.split_ctx* %12, i64 0, i32 4
  %230 = getelementptr inbounds %struct.split_ctx, %struct.split_ctx* %12, i64 0, i32 5
  %231 = lshr i32 %2, 1
  %232 = zext i32 %231 to i64
  %233 = getelementptr inbounds float, float* %1, i64 %232
  %234 = add nsw i32 %6, -1
  %235 = icmp eq i32 %4, 1
  %236 = bitcast %struct.split_ctx* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %236, i8 -86, i64 24, i1 false)
  br i1 %235, label %240, label %237

237:                                              ; preds = %224
  %238 = add nsw i32 %4, 1
  %239 = ashr i32 %238, 1
  call fastcc void @compute_theta(%struct.band_ctx* %0, %struct.split_ctx* nonnull %12, float* %1, float* %233, i32 %231, i32* nonnull %10, i32 %239, i32 %4, i32 %234, i32 0, i32* nonnull %11)
  br label %244

240:                                              ; preds = %224
  %241 = and i32 %8, 1
  %242 = shl i32 %8, 1
  %243 = or i32 %241, %242
  store i32 %243, i32* %11, align 4
  call fastcc void @compute_theta(%struct.band_ctx* %0, %struct.split_ctx* nonnull %12, float* %1, float* %233, i32 %231, i32* nonnull %10, i32 1, i32 1, i32 %234, i32 0, i32* nonnull %11)
  br label %244

244:                                              ; preds = %237, %240
  %245 = phi i32 [ %239, %237 ], [ 1, %240 ]
  %246 = load i32, i32* %226, align 4
  %247 = load i32, i32* %227, align 4
  %248 = load i32, i32* %228, align 4
  %249 = load i32, i32* %229, align 4
  %250 = load i32, i32* %230, align 4
  %251 = sitofp i32 %246 to float
  %252 = fmul float %251, 0x3F00000000000000
  %253 = sitofp i32 %247 to float
  %254 = fmul float %253, 0x3F00000000000000
  %255 = icmp slt i32 %4, 2
  %256 = and i32 %249, 16383
  %257 = icmp eq i32 %256, 0
  %258 = or i1 %255, %257
  br i1 %258, label %272, label %259

259:                                              ; preds = %244
  %260 = icmp sgt i32 %249, 8192
  br i1 %260, label %261, label %265

261:                                              ; preds = %259
  %262 = sub i32 5, %6
  %263 = ashr i32 %248, %262
  %264 = sub nsw i32 %248, %263
  br label %272

265:                                              ; preds = %259
  %266 = shl i32 %231, 3
  %267 = sub i32 6, %6
  %268 = ashr i32 %266, %267
  %269 = add nsw i32 %248, %268
  %270 = icmp slt i32 %269, 0
  %271 = select i1 %270, i32 %269, i32 0
  br label %272

272:                                              ; preds = %244, %261, %265
  %273 = phi i32 [ %264, %261 ], [ %271, %265 ], [ %248, %244 ]
  %274 = load i32, i32* %10, align 4
  %275 = sub nsw i32 %274, %273
  %276 = sdiv i32 %275, 2
  %277 = icmp slt i32 %274, %276
  %278 = select i1 %277, i32 %274, i32 %276
  %279 = icmp sgt i32 %278, 0
  %280 = select i1 %279, i32 %278, i32 0
  %281 = sub nsw i32 %274, %280
  %282 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %0, i64 0, i32 8
  %283 = load i32, i32* %282, align 8
  %284 = sub nsw i32 %283, %250
  store i32 %284, i32* %282, align 8
  %285 = icmp eq float* %5, null
  %286 = getelementptr inbounds float, float* %5, i64 %232
  %287 = select i1 %285, float* null, float* %286
  %288 = icmp slt i32 %280, %281
  br i1 %288, label %308, label %289

289:                                              ; preds = %272
  %290 = fmul float %252, %7
  %291 = load i32, i32* %11, align 4
  %292 = tail call fastcc i32 @quant_partition(%struct.band_ctx* %0, float* %1, i32 %231, i32 %280, i32 %245, float* %5, i32 %234, float %290, i32 %291)
  %293 = load i32, i32* %282, align 8
  %294 = sub i32 %293, %284
  %295 = add i32 %294, %280
  %296 = icmp sgt i32 %295, 24
  %297 = icmp ne i32 %249, 0
  %298 = and i1 %297, %296
  %299 = add nsw i32 %295, -24
  %300 = select i1 %298, i32 %299, i32 0
  %301 = add nsw i32 %300, %281
  %302 = fmul float %254, %7
  %303 = ashr i32 %291, %245
  %304 = tail call fastcc i32 @quant_partition(%struct.band_ctx* %0, float* %233, i32 %231, i32 %301, i32 %245, float* %287, i32 %234, float %302, i32 %303)
  %305 = ashr i32 %4, 1
  %306 = shl i32 %304, %305
  %307 = or i32 %306, %292
  br label %327

308:                                              ; preds = %272
  %309 = fmul float %254, %7
  %310 = load i32, i32* %11, align 4
  %311 = ashr i32 %310, %245
  %312 = tail call fastcc i32 @quant_partition(%struct.band_ctx* %0, float* %233, i32 %231, i32 %281, i32 %245, float* %287, i32 %234, float %309, i32 %311)
  %313 = ashr i32 %4, 1
  %314 = shl i32 %312, %313
  %315 = load i32, i32* %282, align 8
  %316 = sub i32 %315, %284
  %317 = add i32 %316, %281
  %318 = icmp sgt i32 %317, 24
  %319 = icmp ne i32 %249, 16384
  %320 = and i1 %319, %318
  %321 = add nsw i32 %317, -24
  %322 = select i1 %320, i32 %321, i32 0
  %323 = add nsw i32 %322, %280
  %324 = fmul float %252, %7
  %325 = tail call fastcc i32 @quant_partition(%struct.band_ctx* %0, float* %1, i32 %231, i32 %323, i32 %245, float* %5, i32 %234, float %324, i32 %310)
  %326 = or i32 %325, %314
  br label %327

327:                                              ; preds = %308, %289
  %328 = phi i32 [ %307, %289 ], [ %326, %308 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %225) #10
  br label %497

329:                                              ; preds = %218, %207, %123, %112
  %330 = phi i32 [ %128, %123 ], [ 0, %112 ], [ %223, %218 ], [ 0, %207 ]
  %331 = phi i32 [ %121, %123 ], [ 0, %112 ], [ %216, %218 ], [ 0, %207 ]
  %332 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %0, i64 0, i32 8
  %333 = load i32, i32* %332, align 8
  %334 = sub nsw i32 %333, %330
  store i32 %334, i32* %332, align 8
  %335 = icmp slt i32 %334, 0
  %336 = icmp sgt i32 %331, 0
  %337 = and i1 %335, %336
  br i1 %337, label %338, label %367

338:                                              ; preds = %329
  %339 = sext i32 %331 to i64
  br label %340

340:                                              ; preds = %338, %348
  %341 = phi i64 [ %339, %338 ], [ %345, %348 ]
  %342 = phi i32 [ %330, %338 ], [ %362, %348 ]
  %343 = phi i32 [ %334, %338 ], [ %363, %348 ]
  %344 = add nsw i32 %342, %343
  store i32 %344, i32* %332, align 8
  %345 = add nsw i64 %341, -1
  %346 = icmp eq i64 %345, 0
  br i1 %346, label %347, label %348

347:                                              ; preds = %340
  store i32 %344, i32* %332, align 8
  br label %365

348:                                              ; preds = %340
  %349 = load i8*, i8** %23, align 8
  %350 = load i16*, i16** %25, align 8
  %351 = load i32, i32* %28, align 8
  %352 = mul nsw i32 %351, %27
  %353 = add nsw i32 %352, %18
  %354 = sext i32 %353 to i64
  %355 = getelementptr inbounds i16, i16* %350, i64 %354
  %356 = load i16, i16* %355, align 2
  %357 = sext i16 %356 to i64
  %358 = getelementptr inbounds i8, i8* %349, i64 %357
  %359 = getelementptr inbounds i8, i8* %358, i64 %345
  %360 = load i8, i8* %359, align 1
  %361 = zext i8 %360 to i32
  %362 = add nuw nsw i32 %361, 1
  %363 = sub nsw i32 %344, %362
  store i32 %363, i32* %332, align 8
  %364 = icmp slt i32 %363, 0
  br i1 %364, label %340, label %365

365:                                              ; preds = %348, %347
  %366 = trunc i64 %345 to i32
  br label %367

367:                                              ; preds = %365, %329
  %368 = phi i32 [ %331, %329 ], [ %366, %365 ]
  %369 = icmp eq i32 %368, 0
  br i1 %369, label %389, label %370

370:                                              ; preds = %367
  %371 = icmp slt i32 %368, 8
  br i1 %371, label %378, label %372

372:                                              ; preds = %370
  %373 = and i32 %368, 7
  %374 = or i32 %373, 8
  %375 = lshr i32 %368, 3
  %376 = add nsw i32 %375, -1
  %377 = shl i32 %374, %376
  br label %378

378:                                              ; preds = %370, %372
  %379 = phi i32 [ %377, %372 ], [ %368, %370 ]
  %380 = icmp eq i32 %14, 0
  br i1 %380, label %387, label %381

381:                                              ; preds = %378
  %382 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %0, i64 0, i32 1
  %383 = load i32, i32* %382, align 4
  %384 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %0, i64 0, i32 11
  %385 = load i32, i32* %384, align 4
  %386 = tail call i32 @alg_quant(float* %1, i32 %2, i32 %379, i32 %20, i32 %4, %struct.ec_ctx* %22, float %7, i32 %383, i32 %385) #10
  br label %497

387:                                              ; preds = %378
  %388 = tail call i32 @alg_unquant(float* %1, i32 %2, i32 %379, i32 %20, i32 %4, %struct.ec_ctx* %22, float %7) #10
  br label %497

389:                                              ; preds = %367
  %390 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %0, i64 0, i32 1
  %391 = load i32, i32* %390, align 4
  %392 = icmp eq i32 %391, 0
  br i1 %392, label %497, label %393

393:                                              ; preds = %389
  %394 = zext i32 %4 to i64
  %395 = shl i64 1, %394
  %396 = trunc i64 %395 to i32
  %397 = add i32 %396, -1
  %398 = and i32 %397, %8
  store i32 %398, i32* %11, align 4
  %399 = icmp eq i32 %398, 0
  br i1 %399, label %400, label %404

400:                                              ; preds = %393
  %401 = bitcast float* %1 to i8*
  %402 = sext i32 %2 to i64
  %403 = shl nsw i64 %402, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %401, i8 0, i64 %403, i1 false)
  br label %497

404:                                              ; preds = %393
  %405 = icmp eq float* %5, null
  %406 = icmp sgt i32 %2, 0
  br i1 %405, label %415, label %407

407:                                              ; preds = %404
  br i1 %406, label %408, label %493

408:                                              ; preds = %407
  %409 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %0, i64 0, i32 10
  %410 = zext i32 %2 to i64
  %411 = and i64 %410, 1
  %412 = icmp eq i32 %2, 1
  br i1 %412, label %479, label %413

413:                                              ; preds = %408
  %414 = sub nsw i64 %410, %411
  br label %442

415:                                              ; preds = %404
  br i1 %406, label %416, label %493

416:                                              ; preds = %415
  %417 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %0, i64 0, i32 10
  %418 = zext i32 %2 to i64
  %419 = and i64 %418, 1
  %420 = icmp eq i32 %2, 1
  br i1 %420, label %469, label %421

421:                                              ; preds = %416
  %422 = sub nsw i64 %418, %419
  br label %423

423:                                              ; preds = %423, %421
  %424 = phi i64 [ 0, %421 ], [ %439, %423 ]
  %425 = phi i64 [ %422, %421 ], [ %440, %423 ]
  %426 = load i32, i32* %417, align 8
  %427 = mul i32 %426, 1664525
  %428 = add i32 %427, 1013904223
  store i32 %428, i32* %417, align 8
  %429 = ashr i32 %428, 20
  %430 = sitofp i32 %429 to float
  %431 = getelementptr inbounds float, float* %1, i64 %424
  store float %430, float* %431, align 4
  %432 = or i64 %424, 1
  %433 = load i32, i32* %417, align 8
  %434 = mul i32 %433, 1664525
  %435 = add i32 %434, 1013904223
  store i32 %435, i32* %417, align 8
  %436 = ashr i32 %435, 20
  %437 = sitofp i32 %436 to float
  %438 = getelementptr inbounds float, float* %1, i64 %432
  store float %437, float* %438, align 4
  %439 = add nuw nsw i64 %424, 2
  %440 = add i64 %425, -2
  %441 = icmp eq i64 %440, 0
  br i1 %441, label %469, label %423

442:                                              ; preds = %442, %413
  %443 = phi i64 [ 0, %413 ], [ %466, %442 ]
  %444 = phi i64 [ %414, %413 ], [ %467, %442 ]
  %445 = load i32, i32* %409, align 8
  %446 = mul i32 %445, 1664525
  %447 = add i32 %446, 1013904223
  store i32 %447, i32* %409, align 8
  %448 = trunc i32 %447 to i16
  %449 = icmp slt i16 %448, 0
  %450 = select i1 %449, float 3.906250e-03, float -3.906250e-03
  %451 = getelementptr inbounds float, float* %5, i64 %443
  %452 = load float, float* %451, align 4
  %453 = fadd float %452, %450
  %454 = getelementptr inbounds float, float* %1, i64 %443
  store float %453, float* %454, align 4
  %455 = or i64 %443, 1
  %456 = load i32, i32* %409, align 8
  %457 = mul i32 %456, 1664525
  %458 = add i32 %457, 1013904223
  store i32 %458, i32* %409, align 8
  %459 = trunc i32 %458 to i16
  %460 = icmp slt i16 %459, 0
  %461 = select i1 %460, float 3.906250e-03, float -3.906250e-03
  %462 = getelementptr inbounds float, float* %5, i64 %455
  %463 = load float, float* %462, align 4
  %464 = fadd float %463, %461
  %465 = getelementptr inbounds float, float* %1, i64 %455
  store float %464, float* %465, align 4
  %466 = add nuw nsw i64 %443, 2
  %467 = add i64 %444, -2
  %468 = icmp eq i64 %467, 0
  br i1 %468, label %479, label %442

469:                                              ; preds = %423, %416
  %470 = phi i64 [ 0, %416 ], [ %439, %423 ]
  %471 = icmp eq i64 %419, 0
  br i1 %471, label %493, label %472

472:                                              ; preds = %469
  %473 = load i32, i32* %417, align 8
  %474 = mul i32 %473, 1664525
  %475 = add i32 %474, 1013904223
  store i32 %475, i32* %417, align 8
  %476 = ashr i32 %475, 20
  %477 = sitofp i32 %476 to float
  %478 = getelementptr inbounds float, float* %1, i64 %470
  store float %477, float* %478, align 4
  br label %493

479:                                              ; preds = %442, %408
  %480 = phi i64 [ 0, %408 ], [ %466, %442 ]
  %481 = icmp eq i64 %411, 0
  br i1 %481, label %493, label %482

482:                                              ; preds = %479
  %483 = load i32, i32* %409, align 8
  %484 = mul i32 %483, 1664525
  %485 = add i32 %484, 1013904223
  store i32 %485, i32* %409, align 8
  %486 = trunc i32 %485 to i16
  %487 = icmp slt i16 %486, 0
  %488 = select i1 %487, float 3.906250e-03, float -3.906250e-03
  %489 = getelementptr inbounds float, float* %5, i64 %480
  %490 = load float, float* %489, align 4
  %491 = fadd float %490, %488
  %492 = getelementptr inbounds float, float* %1, i64 %480
  store float %491, float* %492, align 4
  br label %493

493:                                              ; preds = %482, %479, %472, %469, %407, %415
  %494 = phi i32 [ %397, %415 ], [ %398, %407 ], [ %397, %469 ], [ %397, %472 ], [ %398, %479 ], [ %398, %482 ]
  %495 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %0, i64 0, i32 11
  %496 = load i32, i32* %495, align 4
  tail call void @renormalise_vector(float* %1, i32 %2, float %7, i32 %496) #10
  br label %497

497:                                              ; preds = %389, %493, %400, %381, %387, %327
  %498 = phi i32 [ %328, %327 ], [ %386, %381 ], [ %388, %387 ], [ 0, %389 ], [ %494, %493 ], [ 0, %400 ]
  ret i32 %498
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @interleave_hadamard(float* nocapture, i32, i32, i32) unnamed_addr #5 {
  %5 = mul nsw i32 %2, %1
  %6 = sext i32 %5 to i64
  %7 = shl nsw i64 %6, 2
  %8 = alloca float, i64 %6, align 16
  %9 = bitcast float* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 %7, i1 false)
  %10 = icmp eq i32 %3, 0
  br i1 %10, label %11, label %88

11:                                               ; preds = %4
  %12 = icmp sgt i32 %2, 0
  %13 = icmp sgt i32 %1, 0
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %169

15:                                               ; preds = %11
  %16 = sext i32 %2 to i64
  %17 = sext i32 %1 to i64
  %18 = zext i32 %2 to i64
  %19 = zext i32 %1 to i64
  %20 = add nsw i64 %19, -1
  %21 = and i64 %19, 3
  %22 = icmp ult i64 %20, 3
  %23 = sub nsw i64 %19, %21
  %24 = icmp eq i64 %21, 0
  br label %25

25:                                               ; preds = %85, %15
  %26 = phi i64 [ 0, %15 ], [ %86, %85 ]
  %27 = mul nsw i64 %26, %17
  br i1 %22, label %69, label %28

28:                                               ; preds = %25, %28
  %29 = phi i64 [ %66, %28 ], [ 0, %25 ]
  %30 = phi i64 [ %67, %28 ], [ %23, %25 ]
  %31 = add nsw i64 %29, %27
  %32 = getelementptr inbounds float, float* %0, i64 %31
  %33 = bitcast float* %32 to i32*
  %34 = load i32, i32* %33, align 4
  %35 = mul nsw i64 %29, %16
  %36 = add nsw i64 %35, %26
  %37 = getelementptr inbounds float, float* %8, i64 %36
  %38 = bitcast float* %37 to i32*
  store i32 %34, i32* %38, align 4
  %39 = or i64 %29, 1
  %40 = add nsw i64 %39, %27
  %41 = getelementptr inbounds float, float* %0, i64 %40
  %42 = bitcast float* %41 to i32*
  %43 = load i32, i32* %42, align 4
  %44 = mul nsw i64 %39, %16
  %45 = add nsw i64 %44, %26
  %46 = getelementptr inbounds float, float* %8, i64 %45
  %47 = bitcast float* %46 to i32*
  store i32 %43, i32* %47, align 4
  %48 = or i64 %29, 2
  %49 = add nsw i64 %48, %27
  %50 = getelementptr inbounds float, float* %0, i64 %49
  %51 = bitcast float* %50 to i32*
  %52 = load i32, i32* %51, align 4
  %53 = mul nsw i64 %48, %16
  %54 = add nsw i64 %53, %26
  %55 = getelementptr inbounds float, float* %8, i64 %54
  %56 = bitcast float* %55 to i32*
  store i32 %52, i32* %56, align 4
  %57 = or i64 %29, 3
  %58 = add nsw i64 %57, %27
  %59 = getelementptr inbounds float, float* %0, i64 %58
  %60 = bitcast float* %59 to i32*
  %61 = load i32, i32* %60, align 4
  %62 = mul nsw i64 %57, %16
  %63 = add nsw i64 %62, %26
  %64 = getelementptr inbounds float, float* %8, i64 %63
  %65 = bitcast float* %64 to i32*
  store i32 %61, i32* %65, align 4
  %66 = add nuw nsw i64 %29, 4
  %67 = add i64 %30, -4
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %69, label %28

69:                                               ; preds = %28, %25
  %70 = phi i64 [ 0, %25 ], [ %66, %28 ]
  br i1 %24, label %85, label %71

71:                                               ; preds = %69, %71
  %72 = phi i64 [ %82, %71 ], [ %70, %69 ]
  %73 = phi i64 [ %83, %71 ], [ %21, %69 ]
  %74 = add nsw i64 %72, %27
  %75 = getelementptr inbounds float, float* %0, i64 %74
  %76 = bitcast float* %75 to i32*
  %77 = load i32, i32* %76, align 4
  %78 = mul nsw i64 %72, %16
  %79 = add nsw i64 %78, %26
  %80 = getelementptr inbounds float, float* %8, i64 %79
  %81 = bitcast float* %80 to i32*
  store i32 %77, i32* %81, align 4
  %82 = add nuw nsw i64 %72, 1
  %83 = add i64 %73, -1
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %85, label %71, !llvm.loop !41

85:                                               ; preds = %71, %69
  %86 = add nuw nsw i64 %26, 1
  %87 = icmp eq i64 %86, %18
  br i1 %87, label %169, label %25

88:                                               ; preds = %4
  %89 = sext i32 %2 to i64
  %90 = getelementptr inbounds [30 x i32], [30 x i32]* @ordery_table, i64 0, i64 %89
  %91 = getelementptr inbounds i32, i32* %90, i64 -2
  %92 = icmp sgt i32 %2, 0
  %93 = icmp sgt i32 %1, 0
  %94 = and i1 %92, %93
  br i1 %94, label %95, label %169

95:                                               ; preds = %88
  %96 = zext i32 %2 to i64
  %97 = zext i32 %1 to i64
  %98 = add nsw i64 %97, -1
  %99 = and i64 %97, 3
  %100 = icmp ult i64 %98, 3
  %101 = sub nsw i64 %97, %99
  %102 = icmp eq i64 %99, 0
  br label %103

103:                                              ; preds = %166, %95
  %104 = phi i64 [ 0, %95 ], [ %167, %166 ]
  %105 = getelementptr inbounds i32, i32* %91, i64 %104
  %106 = load i32, i32* %105, align 4
  %107 = mul nsw i32 %106, %1
  %108 = sext i32 %107 to i64
  br i1 %100, label %150, label %109

109:                                              ; preds = %103, %109
  %110 = phi i64 [ %147, %109 ], [ 0, %103 ]
  %111 = phi i64 [ %148, %109 ], [ %101, %103 ]
  %112 = add nsw i64 %110, %108
  %113 = getelementptr inbounds float, float* %0, i64 %112
  %114 = bitcast float* %113 to i32*
  %115 = load i32, i32* %114, align 4
  %116 = mul nsw i64 %110, %89
  %117 = add nsw i64 %116, %104
  %118 = getelementptr inbounds float, float* %8, i64 %117
  %119 = bitcast float* %118 to i32*
  store i32 %115, i32* %119, align 4
  %120 = or i64 %110, 1
  %121 = add nsw i64 %120, %108
  %122 = getelementptr inbounds float, float* %0, i64 %121
  %123 = bitcast float* %122 to i32*
  %124 = load i32, i32* %123, align 4
  %125 = mul nsw i64 %120, %89
  %126 = add nsw i64 %125, %104
  %127 = getelementptr inbounds float, float* %8, i64 %126
  %128 = bitcast float* %127 to i32*
  store i32 %124, i32* %128, align 4
  %129 = or i64 %110, 2
  %130 = add nsw i64 %129, %108
  %131 = getelementptr inbounds float, float* %0, i64 %130
  %132 = bitcast float* %131 to i32*
  %133 = load i32, i32* %132, align 4
  %134 = mul nsw i64 %129, %89
  %135 = add nsw i64 %134, %104
  %136 = getelementptr inbounds float, float* %8, i64 %135
  %137 = bitcast float* %136 to i32*
  store i32 %133, i32* %137, align 4
  %138 = or i64 %110, 3
  %139 = add nsw i64 %138, %108
  %140 = getelementptr inbounds float, float* %0, i64 %139
  %141 = bitcast float* %140 to i32*
  %142 = load i32, i32* %141, align 4
  %143 = mul nsw i64 %138, %89
  %144 = add nsw i64 %143, %104
  %145 = getelementptr inbounds float, float* %8, i64 %144
  %146 = bitcast float* %145 to i32*
  store i32 %142, i32* %146, align 4
  %147 = add nuw nsw i64 %110, 4
  %148 = add i64 %111, -4
  %149 = icmp eq i64 %148, 0
  br i1 %149, label %150, label %109

150:                                              ; preds = %109, %103
  %151 = phi i64 [ 0, %103 ], [ %147, %109 ]
  br i1 %102, label %166, label %152

152:                                              ; preds = %150, %152
  %153 = phi i64 [ %163, %152 ], [ %151, %150 ]
  %154 = phi i64 [ %164, %152 ], [ %99, %150 ]
  %155 = add nsw i64 %153, %108
  %156 = getelementptr inbounds float, float* %0, i64 %155
  %157 = bitcast float* %156 to i32*
  %158 = load i32, i32* %157, align 4
  %159 = mul nsw i64 %153, %89
  %160 = add nsw i64 %159, %104
  %161 = getelementptr inbounds float, float* %8, i64 %160
  %162 = bitcast float* %161 to i32*
  store i32 %158, i32* %162, align 4
  %163 = add nuw nsw i64 %153, 1
  %164 = add i64 %154, -1
  %165 = icmp eq i64 %164, 0
  br i1 %165, label %166, label %152, !llvm.loop !42

166:                                              ; preds = %152, %150
  %167 = add nuw nsw i64 %104, 1
  %168 = icmp eq i64 %167, %96
  br i1 %168, label %169, label %103

169:                                              ; preds = %166, %85, %88, %11
  %170 = bitcast float* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %170, i8* nonnull align 16 %9, i64 %7, i1 false)
  ret void
}

declare void @ec_enc_bits(%struct.ec_ctx*, i32, i32) local_unnamed_addr #6

declare i32 @ec_dec_bits(%struct.ec_ctx*, i32) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @compute_theta(%struct.band_ctx* nocapture readonly, %struct.split_ctx* nocapture, float*, float*, i32, i32* nocapture, i32, i32, i32, i32, i32* nocapture) unnamed_addr #5 {
  %12 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %0, i64 0, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %0, i64 0, i32 2
  %15 = load %struct.OpusCustomMode*, %struct.OpusCustomMode** %14, align 8
  %16 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %0, i64 0, i32 3
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %0, i64 0, i32 4
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %0, i64 0, i32 7
  %21 = load %struct.ec_ctx*, %struct.ec_ctx** %20, align 8
  %22 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %0, i64 0, i32 9
  %23 = load float*, float** %22, align 8
  %24 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %15, i64 0, i32 11
  %25 = load i16*, i16** %24, align 8
  %26 = sext i32 %17 to i64
  %27 = getelementptr inbounds i16, i16* %25, i64 %26
  %28 = load i16, i16* %27, align 2
  %29 = sext i16 %28 to i32
  %30 = shl nsw i32 %8, 3
  %31 = add nsw i32 %30, %29
  %32 = ashr i32 %31, 1
  %33 = icmp ne i32 %9, 0
  %34 = icmp eq i32 %4, 2
  %35 = and i1 %34, %33
  %36 = select i1 %35, i32 16, i32 4
  %37 = sub nsw i32 %32, %36
  %38 = load i32, i32* %5, align 4
  %39 = shl nsw i32 %4, 1
  %40 = select i1 %35, i32 -2, i32 -1
  %41 = add nsw i32 %40, %39
  %42 = mul nsw i32 %37, %41
  %43 = add nsw i32 %42, %38
  %44 = sdiv i32 %43, %41
  %45 = sub nsw i32 %38, %31
  %46 = add nsw i32 %45, -32
  %47 = icmp slt i32 %46, %44
  %48 = select i1 %47, i32 %46, i32 %44
  %49 = icmp slt i32 %48, 64
  %50 = select i1 %49, i32 %48, i32 64
  %51 = icmp slt i32 %50, 4
  br i1 %51, label %65, label %52

52:                                               ; preds = %11
  %53 = and i32 %50, 7
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds [8 x i16], [8 x i16]* @compute_qn.exp2_table8, i64 0, i64 %54
  %56 = load i16, i16* %55, align 2
  %57 = sext i16 %56 to i32
  %58 = lshr i32 %50, 3
  %59 = sub nuw nsw i32 14, %58
  %60 = ashr i32 %57, %59
  %61 = add nsw i32 %60, 1
  %62 = and i32 %61, -2
  %63 = icmp slt i32 %62, 257
  br i1 %63, label %65, label %64

64:                                               ; preds = %52
  tail call void @celt_fatal(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.1, i64 0, i64 0), i32 669) #11
  unreachable

65:                                               ; preds = %11, %52
  %66 = phi i32 [ %62, %52 ], [ 1, %11 ]
  %67 = xor i1 %33, true
  %68 = icmp slt i32 %17, %19
  %69 = or i1 %68, %67
  %70 = select i1 %69, i32 %66, i32 1
  %71 = icmp ne i32 %13, 0
  br i1 %71, label %72, label %76

72:                                               ; preds = %65
  %73 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %0, i64 0, i32 11
  %74 = load i32, i32* %73, align 4
  %75 = tail call i32 @stereo_itheta(float* %2, float* %3, i32 %9, i32 %4, i32 %74) #10
  br label %76

76:                                               ; preds = %72, %65
  %77 = phi i32 [ %75, %72 ], [ 0, %65 ]
  %78 = tail call i32 @ec_tell_frac(%struct.ec_ctx* %21) #10
  %79 = icmp eq i32 %70, 1
  br i1 %79, label %536, label %80

80:                                               ; preds = %76
  br i1 %71, label %81, label %210

81:                                               ; preds = %80
  br i1 %33, label %82, label %90

82:                                               ; preds = %81
  %83 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %0, i64 0, i32 12
  %84 = load i32, i32* %83, align 8
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %195

86:                                               ; preds = %82
  %87 = mul nsw i32 %77, %70
  %88 = add nsw i32 %87, 8192
  %89 = ashr i32 %88, 14
  br label %210

90:                                               ; preds = %81
  %91 = mul nsw i32 %77, %70
  %92 = add nsw i32 %91, 8192
  %93 = ashr i32 %92, 14
  %94 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %0, i64 0, i32 14
  %95 = load i32, i32* %94, align 8
  %96 = icmp ne i32 %95, 0
  %97 = icmp sgt i32 %92, 16383
  %98 = and i1 %97, %96
  %99 = icmp slt i32 %93, %70
  %100 = and i1 %99, %98
  br i1 %100, label %101, label %257

101:                                              ; preds = %90
  %102 = and i32 %92, -16384
  %103 = udiv i32 %102, %70
  %104 = shl i32 %103, 16
  %105 = ashr exact i32 %104, 16
  %106 = ashr exact i32 %104, 13
  %107 = mul i32 %106, %105
  %108 = add i32 %107, 32768
  %109 = ashr i32 %108, 16
  %110 = sub nsw i32 32767, %109
  %111 = mul nsw i32 %109, -626
  %112 = add nsw i32 %111, 16384
  %113 = ashr i32 %112, 15
  %114 = add nsw i32 %113, 8277
  %115 = mul nsw i32 %114, %109
  %116 = add nsw i32 %115, 16384
  %117 = lshr i32 %116, 15
  %118 = shl i32 %117, 16
  %119 = add i32 %118, -501415936
  %120 = ashr exact i32 %119, 16
  %121 = mul nsw i32 %120, %109
  %122 = add nsw i32 %121, 16384
  %123 = lshr i32 %122, 15
  %124 = add nuw nsw i32 %110, %123
  %125 = shl i32 %124, 16
  %126 = add i32 %125, 65536
  %127 = ashr exact i32 %126, 16
  %128 = sub i32 1073741824, %104
  %129 = ashr exact i32 %128, 16
  %130 = ashr exact i32 %128, 13
  %131 = mul i32 %130, %129
  %132 = add i32 %131, 32768
  %133 = ashr i32 %132, 16
  %134 = sub nsw i32 32767, %133
  %135 = mul nsw i32 %133, -626
  %136 = add nsw i32 %135, 16384
  %137 = ashr i32 %136, 15
  %138 = add nsw i32 %137, 8277
  %139 = mul nsw i32 %138, %133
  %140 = add nsw i32 %139, 16384
  %141 = lshr i32 %140, 15
  %142 = shl i32 %141, 16
  %143 = add i32 %142, -501415936
  %144 = ashr exact i32 %143, 16
  %145 = mul nsw i32 %144, %133
  %146 = add nsw i32 %145, 16384
  %147 = lshr i32 %146, 15
  %148 = add nuw nsw i32 %134, %147
  %149 = shl i32 %148, 16
  %150 = add i32 %149, 65536
  %151 = ashr exact i32 %150, 16
  %152 = trunc i32 %4 to i16
  %153 = shl i16 %152, 7
  %154 = add i16 %153, -128
  %155 = sext i16 %154 to i32
  %156 = tail call i32 @llvm.ctlz.i32(i32 %127, i1 true) #10, !range !2
  %157 = tail call i32 @llvm.ctlz.i32(i32 %151, i1 true) #10, !range !2
  %158 = add nsw i32 %156, -17
  %159 = shl i32 %127, %158
  %160 = add nsw i32 %157, -17
  %161 = shl i32 %151, %160
  %162 = sub nsw i32 %156, %157
  %163 = shl nsw i32 %162, 11
  %164 = shl i32 %161, 16
  %165 = ashr exact i32 %164, 16
  %166 = mul nsw i32 %165, -2597
  %167 = add nsw i32 %166, 16384
  %168 = ashr i32 %167, 15
  %169 = add nsw i32 %168, 7932
  %170 = mul nsw i32 %169, %165
  %171 = add nsw i32 %170, 16384
  %172 = lshr i32 %171, 15
  %173 = shl i32 %159, 16
  %174 = ashr exact i32 %173, 16
  %175 = mul nsw i32 %174, -2597
  %176 = add nsw i32 %175, 16384
  %177 = ashr i32 %176, 15
  %178 = add nsw i32 %177, 7932
  %179 = mul nsw i32 %178, %174
  %180 = add nsw i32 %179, 16384
  %181 = lshr i32 %180, 15
  %182 = sub nsw i32 %163, %181
  %183 = add nsw i32 %182, %172
  %184 = shl i32 %183, 16
  %185 = ashr exact i32 %184, 16
  %186 = mul nsw i32 %185, %155
  %187 = add nsw i32 %186, 16384
  %188 = ashr i32 %187, 15
  %189 = load i32, i32* %5, align 4
  %190 = icmp sgt i32 %188, %189
  br i1 %190, label %257, label %191

191:                                              ; preds = %101
  %192 = sub nsw i32 0, %189
  %193 = icmp slt i32 %188, %192
  %194 = select i1 %193, i32 0, i32 %93
  br label %257

195:                                              ; preds = %82
  %196 = icmp sgt i32 %77, 8192
  %197 = select i1 %196, i32 32767, i32 -32767
  %198 = sdiv i32 %197, %70
  %199 = add nsw i32 %70, -1
  %200 = mul nsw i32 %77, %70
  %201 = add nsw i32 %198, %200
  %202 = ashr i32 %201, 14
  %203 = icmp slt i32 %201, 0
  %204 = select i1 %203, i32 0, i32 %202
  %205 = icmp sgt i32 %70, %204
  %206 = select i1 %205, i32 %204, i32 %199
  %207 = lshr i32 %84, 31
  %208 = xor i32 %207, 1
  %209 = add nsw i32 %206, %208
  br label %210

210:                                              ; preds = %86, %195, %80
  %211 = phi i32 [ %77, %80 ], [ %209, %195 ], [ %89, %86 ]
  %212 = icmp sgt i32 %4, 2
  %213 = and i1 %212, %33
  br i1 %213, label %214, label %257

214:                                              ; preds = %210
  %215 = sdiv i32 %70, 2
  %216 = add nsw i32 %215, 1
  %217 = mul nsw i32 %216, 3
  %218 = add nsw i32 %217, %215
  br i1 %71, label %219, label %235

219:                                              ; preds = %214
  %220 = icmp sle i32 %211, %215
  br i1 %220, label %221, label %223

221:                                              ; preds = %219
  %222 = mul i32 %211, 3
  br label %228

223:                                              ; preds = %219
  %224 = xor i32 %215, -1
  %225 = add i32 %217, %224
  %226 = add i32 %225, %211
  %227 = mul i32 %211, 3
  br label %228

228:                                              ; preds = %223, %221
  %229 = phi i32 [ %227, %223 ], [ %222, %221 ]
  %230 = phi i32 [ %226, %223 ], [ %222, %221 ]
  %231 = add i32 %229, 3
  %232 = sub i32 %217, %215
  %233 = add i32 %232, %211
  %234 = select i1 %220, i32 %231, i32 %233
  tail call void @ec_encode(%struct.ec_ctx* %21, i32 %230, i32 %234, i32 %218) #10
  br label %325

235:                                              ; preds = %214
  %236 = tail call i32 @ec_decode(%struct.ec_ctx* %21, i32 %218) #10
  %237 = icmp slt i32 %236, %217
  %238 = sdiv i32 %236, 3
  %239 = mul i32 %216, -2
  %240 = add i32 %239, %236
  %241 = select i1 %237, i32 %238, i32 %240
  %242 = icmp sle i32 %241, %215
  br i1 %242, label %243, label %245

243:                                              ; preds = %235
  %244 = mul i32 %241, 3
  br label %250

245:                                              ; preds = %235
  %246 = xor i32 %215, -1
  %247 = add i32 %217, %246
  %248 = add i32 %247, %241
  %249 = mul i32 %241, 3
  br label %250

250:                                              ; preds = %245, %243
  %251 = phi i32 [ %249, %245 ], [ %244, %243 ]
  %252 = phi i32 [ %248, %245 ], [ %244, %243 ]
  %253 = add i32 %251, 3
  %254 = sub i32 %217, %215
  %255 = add i32 %254, %241
  %256 = select i1 %242, i32 %253, i32 %255
  tail call void @ec_dec_update(%struct.ec_ctx* %21, i32 %252, i32 %256, i32 %218) #10
  br label %325

257:                                              ; preds = %90, %101, %191, %210
  %258 = phi i32 [ %211, %210 ], [ %194, %191 ], [ %70, %101 ], [ %93, %90 ]
  %259 = icmp sgt i32 %7, 1
  %260 = or i1 %259, %33
  br i1 %260, label %261, label %266

261:                                              ; preds = %257
  %262 = add nsw i32 %70, 1
  br i1 %71, label %263, label %264

263:                                              ; preds = %261
  tail call void @ec_enc_uint(%struct.ec_ctx* %21, i32 %258, i32 %262) #10
  br label %325

264:                                              ; preds = %261
  %265 = tail call i32 @ec_dec_uint(%struct.ec_ctx* %21, i32 %262) #10
  br label %325

266:                                              ; preds = %257
  %267 = ashr i32 %70, 1
  %268 = add nsw i32 %267, 1
  %269 = mul nsw i32 %268, %268
  br i1 %71, label %270, label %288

270:                                              ; preds = %266
  %271 = icmp sle i32 %258, %267
  %272 = add nsw i32 %258, 1
  %273 = add nsw i32 %70, 1
  %274 = sub i32 %273, %258
  %275 = select i1 %271, i32 %272, i32 %274
  br i1 %271, label %276, label %279

276:                                              ; preds = %270
  %277 = mul nsw i32 %272, %258
  %278 = ashr i32 %277, 1
  br label %285

279:                                              ; preds = %270
  %280 = add nsw i32 %70, 2
  %281 = sub i32 %280, %258
  %282 = mul nsw i32 %274, %281
  %283 = ashr i32 %282, 1
  %284 = sub nsw i32 %269, %283
  br label %285

285:                                              ; preds = %279, %276
  %286 = phi i32 [ %278, %276 ], [ %284, %279 ]
  %287 = add nsw i32 %286, %275
  tail call void @ec_encode(%struct.ec_ctx* %21, i32 %286, i32 %287, i32 %269) #10
  br label %325

288:                                              ; preds = %266
  %289 = tail call i32 @ec_decode(%struct.ec_ctx* %21, i32 %269) #10
  %290 = mul nsw i32 %268, %267
  %291 = ashr i32 %290, 1
  %292 = icmp slt i32 %289, %291
  br i1 %292, label %293, label %302

293:                                              ; preds = %288
  %294 = shl i32 %289, 3
  %295 = or i32 %294, 1
  %296 = tail call i32 @isqrt32(i32 %295) #10
  %297 = add i32 %296, -1
  %298 = lshr i32 %297, 1
  %299 = add nuw nsw i32 %298, 1
  %300 = mul nsw i32 %299, %298
  %301 = lshr i32 %300, 1
  br label %318

302:                                              ; preds = %288
  %303 = add nsw i32 %70, 1
  %304 = shl nsw i32 %303, 1
  %305 = xor i32 %289, 536870911
  %306 = add i32 %305, %269
  %307 = shl i32 %306, 3
  %308 = or i32 %307, 1
  %309 = tail call i32 @isqrt32(i32 %308) #10
  %310 = sub i32 %304, %309
  %311 = lshr i32 %310, 1
  %312 = sub nsw i32 %303, %311
  %313 = add nsw i32 %70, 2
  %314 = sub i32 %313, %311
  %315 = mul nsw i32 %312, %314
  %316 = ashr i32 %315, 1
  %317 = sub nsw i32 %269, %316
  br label %318

318:                                              ; preds = %302, %293
  %319 = phi i32 [ %298, %293 ], [ %311, %302 ]
  %320 = phi i32 [ %299, %293 ], [ %312, %302 ]
  %321 = phi i32 [ %301, %293 ], [ %317, %302 ]
  %322 = add nsw i32 %321, %320
  tail call void @ec_dec_update(%struct.ec_ctx* %21, i32 %321, i32 %322, i32 %269) #10
  %323 = shl nsw i32 %319, 14
  %324 = udiv i32 %323, %70
  br label %760

325:                                              ; preds = %285, %228, %250, %264, %263
  %326 = phi i32 [ %258, %263 ], [ %265, %264 ], [ %211, %228 ], [ %241, %250 ], [ %258, %285 ]
  %327 = icmp sgt i32 %326, -1
  br i1 %327, label %329, label %328

328:                                              ; preds = %325
  tail call void @celt_fatal(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.1, i64 0, i64 0), i32 838) #11
  unreachable

329:                                              ; preds = %325
  %330 = shl nsw i32 %326, 14
  %331 = udiv i32 %330, %70
  %332 = and i1 %33, %71
  br i1 %332, label %333, label %760

333:                                              ; preds = %329
  %334 = icmp ugt i32 %70, %330
  br i1 %334, label %335, label %459

335:                                              ; preds = %333
  %336 = getelementptr %struct.OpusCustomMode, %struct.OpusCustomMode* %15, i64 0, i32 2
  %337 = load i32, i32* %336, align 8
  %338 = getelementptr inbounds float, float* %23, i64 %26
  %339 = load float, float* %338, align 4, !noalias !43
  %340 = add nsw i32 %337, %17
  %341 = sext i32 %340 to i64
  %342 = getelementptr inbounds float, float* %23, i64 %341
  %343 = load float, float* %342, align 4, !noalias !43
  %344 = fmul float %339, %339
  %345 = fadd float %344, 0x3CD203AFA0000000
  %346 = fmul float %343, %343
  %347 = fadd float %345, %346
  %348 = tail call float @sqrtf(float %347) #7, !noalias !43
  %349 = fadd float %348, 0x3CD203AFA0000000
  %350 = fdiv float %339, %349
  %351 = fdiv float %343, %349
  %352 = icmp sgt i32 %4, 0
  br i1 %352, label %353, label %754

353:                                              ; preds = %335
  %354 = zext i32 %4 to i64
  %355 = icmp ult i32 %4, 8
  br i1 %355, label %446, label %356

356:                                              ; preds = %353
  %357 = and i64 %354, 4294967288
  %358 = insertelement <4 x float> undef, float %350, i32 0
  %359 = shufflevector <4 x float> %358, <4 x float> undef, <4 x i32> zeroinitializer
  %360 = insertelement <4 x float> undef, float %350, i32 0
  %361 = shufflevector <4 x float> %360, <4 x float> undef, <4 x i32> zeroinitializer
  %362 = insertelement <4 x float> undef, float %351, i32 0
  %363 = shufflevector <4 x float> %362, <4 x float> undef, <4 x i32> zeroinitializer
  %364 = insertelement <4 x float> undef, float %351, i32 0
  %365 = shufflevector <4 x float> %364, <4 x float> undef, <4 x i32> zeroinitializer
  %366 = add nsw i64 %357, -8
  %367 = lshr exact i64 %366, 3
  %368 = add nuw nsw i64 %367, 1
  %369 = and i64 %368, 1
  %370 = icmp eq i64 %366, 0
  br i1 %370, label %420, label %371

371:                                              ; preds = %356
  %372 = sub nuw nsw i64 %368, %369
  br label %373

373:                                              ; preds = %373, %371
  %374 = phi i64 [ 0, %371 ], [ %417, %373 ]
  %375 = phi i64 [ %372, %371 ], [ %418, %373 ]
  %376 = getelementptr inbounds float, float* %2, i64 %374
  %377 = bitcast float* %376 to <4 x float>*
  %378 = load <4 x float>, <4 x float>* %377, align 4, !alias.scope !47, !noalias !48
  %379 = getelementptr inbounds float, float* %376, i64 4
  %380 = bitcast float* %379 to <4 x float>*
  %381 = load <4 x float>, <4 x float>* %380, align 4, !alias.scope !47, !noalias !48
  %382 = getelementptr inbounds float, float* %3, i64 %374
  %383 = bitcast float* %382 to <4 x float>*
  %384 = load <4 x float>, <4 x float>* %383, align 4, !alias.scope !48, !noalias !47
  %385 = getelementptr inbounds float, float* %382, i64 4
  %386 = bitcast float* %385 to <4 x float>*
  %387 = load <4 x float>, <4 x float>* %386, align 4, !alias.scope !48, !noalias !47
  %388 = fmul <4 x float> %359, %378
  %389 = fmul <4 x float> %361, %381
  %390 = fmul <4 x float> %363, %384
  %391 = fmul <4 x float> %365, %387
  %392 = fadd <4 x float> %388, %390
  %393 = fadd <4 x float> %389, %391
  %394 = bitcast float* %376 to <4 x float>*
  store <4 x float> %392, <4 x float>* %394, align 4, !alias.scope !47, !noalias !48
  %395 = bitcast float* %379 to <4 x float>*
  store <4 x float> %393, <4 x float>* %395, align 4, !alias.scope !47, !noalias !48
  %396 = or i64 %374, 8
  %397 = getelementptr inbounds float, float* %2, i64 %396
  %398 = bitcast float* %397 to <4 x float>*
  %399 = load <4 x float>, <4 x float>* %398, align 4, !alias.scope !47, !noalias !48
  %400 = getelementptr inbounds float, float* %397, i64 4
  %401 = bitcast float* %400 to <4 x float>*
  %402 = load <4 x float>, <4 x float>* %401, align 4, !alias.scope !47, !noalias !48
  %403 = getelementptr inbounds float, float* %3, i64 %396
  %404 = bitcast float* %403 to <4 x float>*
  %405 = load <4 x float>, <4 x float>* %404, align 4, !alias.scope !48, !noalias !47
  %406 = getelementptr inbounds float, float* %403, i64 4
  %407 = bitcast float* %406 to <4 x float>*
  %408 = load <4 x float>, <4 x float>* %407, align 4, !alias.scope !48, !noalias !47
  %409 = fmul <4 x float> %359, %399
  %410 = fmul <4 x float> %361, %402
  %411 = fmul <4 x float> %363, %405
  %412 = fmul <4 x float> %365, %408
  %413 = fadd <4 x float> %409, %411
  %414 = fadd <4 x float> %410, %412
  %415 = bitcast float* %397 to <4 x float>*
  store <4 x float> %413, <4 x float>* %415, align 4, !alias.scope !47, !noalias !48
  %416 = bitcast float* %400 to <4 x float>*
  store <4 x float> %414, <4 x float>* %416, align 4, !alias.scope !47, !noalias !48
  %417 = add i64 %374, 16
  %418 = add i64 %375, -2
  %419 = icmp eq i64 %418, 0
  br i1 %419, label %420, label %373, !llvm.loop !49

420:                                              ; preds = %373, %356
  %421 = phi i64 [ 0, %356 ], [ %417, %373 ]
  %422 = icmp eq i64 %369, 0
  br i1 %422, label %444, label %423

423:                                              ; preds = %420
  %424 = getelementptr inbounds float, float* %2, i64 %421
  %425 = bitcast float* %424 to <4 x float>*
  %426 = load <4 x float>, <4 x float>* %425, align 4, !alias.scope !47, !noalias !48
  %427 = getelementptr inbounds float, float* %424, i64 4
  %428 = bitcast float* %427 to <4 x float>*
  %429 = load <4 x float>, <4 x float>* %428, align 4, !alias.scope !47, !noalias !48
  %430 = getelementptr inbounds float, float* %3, i64 %421
  %431 = bitcast float* %430 to <4 x float>*
  %432 = load <4 x float>, <4 x float>* %431, align 4, !alias.scope !48, !noalias !47
  %433 = getelementptr inbounds float, float* %430, i64 4
  %434 = bitcast float* %433 to <4 x float>*
  %435 = load <4 x float>, <4 x float>* %434, align 4, !alias.scope !48, !noalias !47
  %436 = fmul <4 x float> %359, %426
  %437 = fmul <4 x float> %361, %429
  %438 = fmul <4 x float> %363, %432
  %439 = fmul <4 x float> %365, %435
  %440 = fadd <4 x float> %436, %438
  %441 = fadd <4 x float> %437, %439
  %442 = bitcast float* %424 to <4 x float>*
  store <4 x float> %440, <4 x float>* %442, align 4, !alias.scope !47, !noalias !48
  %443 = bitcast float* %427 to <4 x float>*
  store <4 x float> %441, <4 x float>* %443, align 4, !alias.scope !47, !noalias !48
  br label %444

444:                                              ; preds = %420, %423
  %445 = icmp eq i64 %357, %354
  br i1 %445, label %754, label %446

446:                                              ; preds = %444, %353
  %447 = phi i64 [ 0, %353 ], [ %357, %444 ]
  br label %448

448:                                              ; preds = %446, %448
  %449 = phi i64 [ %457, %448 ], [ %447, %446 ]
  %450 = getelementptr inbounds float, float* %2, i64 %449
  %451 = load float, float* %450, align 4, !alias.scope !47, !noalias !48
  %452 = getelementptr inbounds float, float* %3, i64 %449
  %453 = load float, float* %452, align 4, !alias.scope !48, !noalias !47
  %454 = fmul float %350, %451
  %455 = fmul float %351, %453
  %456 = fadd float %454, %455
  store float %456, float* %450, align 4, !alias.scope !47, !noalias !48
  %457 = add nuw nsw i64 %449, 1
  %458 = icmp eq i64 %457, %354
  br i1 %458, label %754, label %448, !llvm.loop !50

459:                                              ; preds = %333
  %460 = icmp sgt i32 %4, 0
  br i1 %460, label %461, label %760

461:                                              ; preds = %459
  %462 = zext i32 %4 to i64
  %463 = icmp ult i32 %4, 4
  br i1 %463, label %522, label %464

464:                                              ; preds = %461
  %465 = and i64 %462, 4294967292
  %466 = add nsw i64 %465, -4
  %467 = lshr exact i64 %466, 2
  %468 = add nuw nsw i64 %467, 1
  %469 = and i64 %468, 1
  %470 = icmp eq i64 %466, 0
  br i1 %470, label %504, label %471

471:                                              ; preds = %464
  %472 = sub nuw nsw i64 %468, %469
  br label %473

473:                                              ; preds = %473, %471
  %474 = phi i64 [ 0, %471 ], [ %501, %473 ]
  %475 = phi i64 [ %472, %471 ], [ %502, %473 ]
  %476 = getelementptr inbounds float, float* %2, i64 %474
  %477 = bitcast float* %476 to <4 x float>*
  %478 = load <4 x float>, <4 x float>* %477, align 4, !alias.scope !51, !noalias !54
  %479 = fmul <4 x float> %478, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %480 = getelementptr inbounds float, float* %3, i64 %474
  %481 = bitcast float* %480 to <4 x float>*
  %482 = load <4 x float>, <4 x float>* %481, align 4, !alias.scope !54, !noalias !51
  %483 = fmul <4 x float> %482, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %484 = fadd <4 x float> %479, %483
  %485 = bitcast float* %476 to <4 x float>*
  store <4 x float> %484, <4 x float>* %485, align 4, !alias.scope !51, !noalias !54
  %486 = fsub <4 x float> %483, %479
  %487 = bitcast float* %480 to <4 x float>*
  store <4 x float> %486, <4 x float>* %487, align 4, !alias.scope !54, !noalias !51
  %488 = or i64 %474, 4
  %489 = getelementptr inbounds float, float* %2, i64 %488
  %490 = bitcast float* %489 to <4 x float>*
  %491 = load <4 x float>, <4 x float>* %490, align 4, !alias.scope !51, !noalias !54
  %492 = fmul <4 x float> %491, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %493 = getelementptr inbounds float, float* %3, i64 %488
  %494 = bitcast float* %493 to <4 x float>*
  %495 = load <4 x float>, <4 x float>* %494, align 4, !alias.scope !54, !noalias !51
  %496 = fmul <4 x float> %495, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %497 = fadd <4 x float> %492, %496
  %498 = bitcast float* %489 to <4 x float>*
  store <4 x float> %497, <4 x float>* %498, align 4, !alias.scope !51, !noalias !54
  %499 = fsub <4 x float> %496, %492
  %500 = bitcast float* %493 to <4 x float>*
  store <4 x float> %499, <4 x float>* %500, align 4, !alias.scope !54, !noalias !51
  %501 = add i64 %474, 8
  %502 = add i64 %475, -2
  %503 = icmp eq i64 %502, 0
  br i1 %503, label %504, label %473, !llvm.loop !56

504:                                              ; preds = %473, %464
  %505 = phi i64 [ 0, %464 ], [ %501, %473 ]
  %506 = icmp eq i64 %469, 0
  br i1 %506, label %520, label %507

507:                                              ; preds = %504
  %508 = getelementptr inbounds float, float* %2, i64 %505
  %509 = bitcast float* %508 to <4 x float>*
  %510 = load <4 x float>, <4 x float>* %509, align 4, !alias.scope !51, !noalias !54
  %511 = fmul <4 x float> %510, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %512 = getelementptr inbounds float, float* %3, i64 %505
  %513 = bitcast float* %512 to <4 x float>*
  %514 = load <4 x float>, <4 x float>* %513, align 4, !alias.scope !54, !noalias !51
  %515 = fmul <4 x float> %514, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %516 = fadd <4 x float> %511, %515
  %517 = bitcast float* %508 to <4 x float>*
  store <4 x float> %516, <4 x float>* %517, align 4, !alias.scope !51, !noalias !54
  %518 = fsub <4 x float> %515, %511
  %519 = bitcast float* %512 to <4 x float>*
  store <4 x float> %518, <4 x float>* %519, align 4, !alias.scope !54, !noalias !51
  br label %520

520:                                              ; preds = %504, %507
  %521 = icmp eq i64 %465, %462
  br i1 %521, label %760, label %522

522:                                              ; preds = %520, %461
  %523 = phi i64 [ 0, %461 ], [ %465, %520 ]
  br label %524

524:                                              ; preds = %522, %524
  %525 = phi i64 [ %534, %524 ], [ %523, %522 ]
  %526 = getelementptr inbounds float, float* %2, i64 %525
  %527 = load float, float* %526, align 4, !alias.scope !51, !noalias !54
  %528 = fmul float %527, 0x3FE6A09E60000000
  %529 = getelementptr inbounds float, float* %3, i64 %525
  %530 = load float, float* %529, align 4, !alias.scope !54, !noalias !51
  %531 = fmul float %530, 0x3FE6A09E60000000
  %532 = fadd float %528, %531
  store float %532, float* %526, align 4, !alias.scope !51, !noalias !54
  %533 = fsub float %531, %528
  store float %533, float* %529, align 4, !alias.scope !54, !noalias !51
  %534 = add nuw nsw i64 %525, 1
  %535 = icmp eq i64 %534, %462
  br i1 %535, label %760, label %524, !llvm.loop !57

536:                                              ; preds = %76
  br i1 %33, label %537, label %760

537:                                              ; preds = %536
  br i1 %71, label %538, label %736

538:                                              ; preds = %537
  %539 = icmp sgt i32 %77, 8192
  br i1 %539, label %540, label %611

540:                                              ; preds = %538
  %541 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %0, i64 0, i32 13
  %542 = load i32, i32* %541, align 4
  %543 = icmp eq i32 %542, 0
  %544 = zext i1 %543 to i32
  br i1 %543, label %545, label %611

545:                                              ; preds = %540
  %546 = icmp sgt i32 %4, 0
  br i1 %546, label %547, label %611

547:                                              ; preds = %545
  %548 = zext i32 %4 to i64
  %549 = icmp ult i32 %4, 8
  br i1 %549, label %602, label %550

550:                                              ; preds = %547
  %551 = and i64 %548, 4294967288
  %552 = add nsw i64 %551, -8
  %553 = lshr exact i64 %552, 3
  %554 = add nuw nsw i64 %553, 1
  %555 = and i64 %554, 1
  %556 = icmp eq i64 %552, 0
  br i1 %556, label %586, label %557

557:                                              ; preds = %550
  %558 = sub nuw nsw i64 %554, %555
  br label %559

559:                                              ; preds = %559, %557
  %560 = phi i64 [ 0, %557 ], [ %583, %559 ]
  %561 = phi i64 [ %558, %557 ], [ %584, %559 ]
  %562 = getelementptr inbounds float, float* %3, i64 %560
  %563 = bitcast float* %562 to <4 x float>*
  %564 = load <4 x float>, <4 x float>* %563, align 4
  %565 = getelementptr inbounds float, float* %562, i64 4
  %566 = bitcast float* %565 to <4 x float>*
  %567 = load <4 x float>, <4 x float>* %566, align 4
  %568 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %564
  %569 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %567
  %570 = bitcast float* %562 to <4 x float>*
  store <4 x float> %568, <4 x float>* %570, align 4
  %571 = bitcast float* %565 to <4 x float>*
  store <4 x float> %569, <4 x float>* %571, align 4
  %572 = or i64 %560, 8
  %573 = getelementptr inbounds float, float* %3, i64 %572
  %574 = bitcast float* %573 to <4 x float>*
  %575 = load <4 x float>, <4 x float>* %574, align 4
  %576 = getelementptr inbounds float, float* %573, i64 4
  %577 = bitcast float* %576 to <4 x float>*
  %578 = load <4 x float>, <4 x float>* %577, align 4
  %579 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %575
  %580 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %578
  %581 = bitcast float* %573 to <4 x float>*
  store <4 x float> %579, <4 x float>* %581, align 4
  %582 = bitcast float* %576 to <4 x float>*
  store <4 x float> %580, <4 x float>* %582, align 4
  %583 = add i64 %560, 16
  %584 = add i64 %561, -2
  %585 = icmp eq i64 %584, 0
  br i1 %585, label %586, label %559, !llvm.loop !58

586:                                              ; preds = %559, %550
  %587 = phi i64 [ 0, %550 ], [ %583, %559 ]
  %588 = icmp eq i64 %555, 0
  br i1 %588, label %600, label %589

589:                                              ; preds = %586
  %590 = getelementptr inbounds float, float* %3, i64 %587
  %591 = bitcast float* %590 to <4 x float>*
  %592 = load <4 x float>, <4 x float>* %591, align 4
  %593 = getelementptr inbounds float, float* %590, i64 4
  %594 = bitcast float* %593 to <4 x float>*
  %595 = load <4 x float>, <4 x float>* %594, align 4
  %596 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %592
  %597 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %595
  %598 = bitcast float* %590 to <4 x float>*
  store <4 x float> %596, <4 x float>* %598, align 4
  %599 = bitcast float* %593 to <4 x float>*
  store <4 x float> %597, <4 x float>* %599, align 4
  br label %600

600:                                              ; preds = %586, %589
  %601 = icmp eq i64 %551, %548
  br i1 %601, label %611, label %602

602:                                              ; preds = %600, %547
  %603 = phi i64 [ 0, %547 ], [ %551, %600 ]
  br label %604

604:                                              ; preds = %602, %604
  %605 = phi i64 [ %609, %604 ], [ %603, %602 ]
  %606 = getelementptr inbounds float, float* %3, i64 %605
  %607 = load float, float* %606, align 4
  %608 = fsub float -0.000000e+00, %607
  store float %608, float* %606, align 4
  %609 = add nuw nsw i64 %605, 1
  %610 = icmp eq i64 %609, %548
  br i1 %610, label %611, label %604, !llvm.loop !59

611:                                              ; preds = %604, %600, %545, %538, %540
  %612 = phi i32 [ 0, %540 ], [ 0, %538 ], [ 1, %545 ], [ %544, %600 ], [ %544, %604 ]
  %613 = getelementptr %struct.OpusCustomMode, %struct.OpusCustomMode* %15, i64 0, i32 2
  %614 = load i32, i32* %613, align 8
  %615 = getelementptr inbounds float, float* %23, i64 %26
  %616 = load float, float* %615, align 4, !noalias !60
  %617 = add nsw i32 %614, %17
  %618 = sext i32 %617 to i64
  %619 = getelementptr inbounds float, float* %23, i64 %618
  %620 = load float, float* %619, align 4, !noalias !60
  %621 = fmul float %616, %616
  %622 = fadd float %621, 0x3CD203AFA0000000
  %623 = fmul float %620, %620
  %624 = fadd float %622, %623
  %625 = tail call float @sqrtf(float %624) #7, !noalias !60
  %626 = fadd float %625, 0x3CD203AFA0000000
  %627 = fdiv float %616, %626
  %628 = fdiv float %620, %626
  %629 = icmp sgt i32 %4, 0
  br i1 %629, label %630, label %736

630:                                              ; preds = %611
  %631 = zext i32 %4 to i64
  %632 = icmp ult i32 %4, 8
  br i1 %632, label %723, label %633

633:                                              ; preds = %630
  %634 = and i64 %631, 4294967288
  %635 = insertelement <4 x float> undef, float %627, i32 0
  %636 = shufflevector <4 x float> %635, <4 x float> undef, <4 x i32> zeroinitializer
  %637 = insertelement <4 x float> undef, float %627, i32 0
  %638 = shufflevector <4 x float> %637, <4 x float> undef, <4 x i32> zeroinitializer
  %639 = insertelement <4 x float> undef, float %628, i32 0
  %640 = shufflevector <4 x float> %639, <4 x float> undef, <4 x i32> zeroinitializer
  %641 = insertelement <4 x float> undef, float %628, i32 0
  %642 = shufflevector <4 x float> %641, <4 x float> undef, <4 x i32> zeroinitializer
  %643 = add nsw i64 %634, -8
  %644 = lshr exact i64 %643, 3
  %645 = add nuw nsw i64 %644, 1
  %646 = and i64 %645, 1
  %647 = icmp eq i64 %643, 0
  br i1 %647, label %697, label %648

648:                                              ; preds = %633
  %649 = sub nuw nsw i64 %645, %646
  br label %650

650:                                              ; preds = %650, %648
  %651 = phi i64 [ 0, %648 ], [ %694, %650 ]
  %652 = phi i64 [ %649, %648 ], [ %695, %650 ]
  %653 = getelementptr inbounds float, float* %2, i64 %651
  %654 = bitcast float* %653 to <4 x float>*
  %655 = load <4 x float>, <4 x float>* %654, align 4, !alias.scope !64, !noalias !65
  %656 = getelementptr inbounds float, float* %653, i64 4
  %657 = bitcast float* %656 to <4 x float>*
  %658 = load <4 x float>, <4 x float>* %657, align 4, !alias.scope !64, !noalias !65
  %659 = getelementptr inbounds float, float* %3, i64 %651
  %660 = bitcast float* %659 to <4 x float>*
  %661 = load <4 x float>, <4 x float>* %660, align 4, !alias.scope !65, !noalias !64
  %662 = getelementptr inbounds float, float* %659, i64 4
  %663 = bitcast float* %662 to <4 x float>*
  %664 = load <4 x float>, <4 x float>* %663, align 4, !alias.scope !65, !noalias !64
  %665 = fmul <4 x float> %636, %655
  %666 = fmul <4 x float> %638, %658
  %667 = fmul <4 x float> %640, %661
  %668 = fmul <4 x float> %642, %664
  %669 = fadd <4 x float> %665, %667
  %670 = fadd <4 x float> %666, %668
  %671 = bitcast float* %653 to <4 x float>*
  store <4 x float> %669, <4 x float>* %671, align 4, !alias.scope !64, !noalias !65
  %672 = bitcast float* %656 to <4 x float>*
  store <4 x float> %670, <4 x float>* %672, align 4, !alias.scope !64, !noalias !65
  %673 = or i64 %651, 8
  %674 = getelementptr inbounds float, float* %2, i64 %673
  %675 = bitcast float* %674 to <4 x float>*
  %676 = load <4 x float>, <4 x float>* %675, align 4, !alias.scope !64, !noalias !65
  %677 = getelementptr inbounds float, float* %674, i64 4
  %678 = bitcast float* %677 to <4 x float>*
  %679 = load <4 x float>, <4 x float>* %678, align 4, !alias.scope !64, !noalias !65
  %680 = getelementptr inbounds float, float* %3, i64 %673
  %681 = bitcast float* %680 to <4 x float>*
  %682 = load <4 x float>, <4 x float>* %681, align 4, !alias.scope !65, !noalias !64
  %683 = getelementptr inbounds float, float* %680, i64 4
  %684 = bitcast float* %683 to <4 x float>*
  %685 = load <4 x float>, <4 x float>* %684, align 4, !alias.scope !65, !noalias !64
  %686 = fmul <4 x float> %636, %676
  %687 = fmul <4 x float> %638, %679
  %688 = fmul <4 x float> %640, %682
  %689 = fmul <4 x float> %642, %685
  %690 = fadd <4 x float> %686, %688
  %691 = fadd <4 x float> %687, %689
  %692 = bitcast float* %674 to <4 x float>*
  store <4 x float> %690, <4 x float>* %692, align 4, !alias.scope !64, !noalias !65
  %693 = bitcast float* %677 to <4 x float>*
  store <4 x float> %691, <4 x float>* %693, align 4, !alias.scope !64, !noalias !65
  %694 = add i64 %651, 16
  %695 = add i64 %652, -2
  %696 = icmp eq i64 %695, 0
  br i1 %696, label %697, label %650, !llvm.loop !66

697:                                              ; preds = %650, %633
  %698 = phi i64 [ 0, %633 ], [ %694, %650 ]
  %699 = icmp eq i64 %646, 0
  br i1 %699, label %721, label %700

700:                                              ; preds = %697
  %701 = getelementptr inbounds float, float* %2, i64 %698
  %702 = bitcast float* %701 to <4 x float>*
  %703 = load <4 x float>, <4 x float>* %702, align 4, !alias.scope !64, !noalias !65
  %704 = getelementptr inbounds float, float* %701, i64 4
  %705 = bitcast float* %704 to <4 x float>*
  %706 = load <4 x float>, <4 x float>* %705, align 4, !alias.scope !64, !noalias !65
  %707 = getelementptr inbounds float, float* %3, i64 %698
  %708 = bitcast float* %707 to <4 x float>*
  %709 = load <4 x float>, <4 x float>* %708, align 4, !alias.scope !65, !noalias !64
  %710 = getelementptr inbounds float, float* %707, i64 4
  %711 = bitcast float* %710 to <4 x float>*
  %712 = load <4 x float>, <4 x float>* %711, align 4, !alias.scope !65, !noalias !64
  %713 = fmul <4 x float> %636, %703
  %714 = fmul <4 x float> %638, %706
  %715 = fmul <4 x float> %640, %709
  %716 = fmul <4 x float> %642, %712
  %717 = fadd <4 x float> %713, %715
  %718 = fadd <4 x float> %714, %716
  %719 = bitcast float* %701 to <4 x float>*
  store <4 x float> %717, <4 x float>* %719, align 4, !alias.scope !64, !noalias !65
  %720 = bitcast float* %704 to <4 x float>*
  store <4 x float> %718, <4 x float>* %720, align 4, !alias.scope !64, !noalias !65
  br label %721

721:                                              ; preds = %697, %700
  %722 = icmp eq i64 %634, %631
  br i1 %722, label %736, label %723

723:                                              ; preds = %721, %630
  %724 = phi i64 [ 0, %630 ], [ %634, %721 ]
  br label %725

725:                                              ; preds = %723, %725
  %726 = phi i64 [ %734, %725 ], [ %724, %723 ]
  %727 = getelementptr inbounds float, float* %2, i64 %726
  %728 = load float, float* %727, align 4, !alias.scope !64, !noalias !65
  %729 = getelementptr inbounds float, float* %3, i64 %726
  %730 = load float, float* %729, align 4, !alias.scope !65, !noalias !64
  %731 = fmul float %627, %728
  %732 = fmul float %628, %730
  %733 = fadd float %731, %732
  store float %733, float* %727, align 4, !alias.scope !64, !noalias !65
  %734 = add nuw nsw i64 %726, 1
  %735 = icmp eq i64 %734, %631
  br i1 %735, label %736, label %725, !llvm.loop !67

736:                                              ; preds = %725, %721, %611, %537
  %737 = phi i32 [ 0, %537 ], [ %612, %611 ], [ %612, %721 ], [ %612, %725 ]
  %738 = load i32, i32* %5, align 4
  %739 = icmp sgt i32 %738, 16
  br i1 %739, label %740, label %748

740:                                              ; preds = %736
  %741 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %0, i64 0, i32 8
  %742 = load i32, i32* %741, align 8
  %743 = icmp sgt i32 %742, 16
  br i1 %743, label %744, label %748

744:                                              ; preds = %740
  br i1 %71, label %745, label %746

745:                                              ; preds = %744
  tail call void @ec_enc_bit_logp(%struct.ec_ctx* %21, i32 %737, i32 2) #10
  br label %748

746:                                              ; preds = %744
  %747 = tail call i32 @ec_dec_bit_logp(%struct.ec_ctx* %21, i32 2) #10
  br label %748

748:                                              ; preds = %736, %740, %745, %746
  %749 = phi i32 [ %737, %745 ], [ %747, %746 ], [ 0, %740 ], [ 0, %736 ]
  %750 = getelementptr inbounds %struct.band_ctx, %struct.band_ctx* %0, i64 0, i32 13
  %751 = load i32, i32* %750, align 4
  %752 = icmp eq i32 %751, 0
  %753 = select i1 %752, i32 %749, i32 0
  br label %754

754:                                              ; preds = %448, %444, %748, %335
  %755 = phi i32 [ 0, %335 ], [ %753, %748 ], [ 0, %444 ], [ 0, %448 ]
  %756 = tail call i32 @ec_tell_frac(%struct.ec_ctx* %21) #10
  %757 = sub i32 %756, %78
  %758 = load i32, i32* %5, align 4
  %759 = sub nsw i32 %758, %757
  store i32 %759, i32* %5, align 4
  br label %766

760:                                              ; preds = %524, %520, %459, %318, %536, %329
  %761 = phi i32 [ %331, %329 ], [ %77, %536 ], [ %324, %318 ], [ %331, %459 ], [ %331, %520 ], [ %331, %524 ]
  %762 = tail call i32 @ec_tell_frac(%struct.ec_ctx* %21) #10
  %763 = sub i32 %762, %78
  %764 = load i32, i32* %5, align 4
  %765 = sub nsw i32 %764, %763
  store i32 %765, i32* %5, align 4
  switch i32 %761, label %779 [
    i32 0, label %766
    i32 16384, label %773
  ]

766:                                              ; preds = %754, %760
  %767 = phi i32 [ %757, %754 ], [ %763, %760 ]
  %768 = phi i32 [ %755, %754 ], [ %761, %760 ]
  %769 = shl nsw i32 -1, %6
  %770 = xor i32 %769, -1
  %771 = load i32, i32* %10, align 4
  %772 = and i32 %771, %770
  store i32 %772, i32* %10, align 4
  br label %865

773:                                              ; preds = %760
  %774 = shl nsw i32 -1, %6
  %775 = xor i32 %774, -1
  %776 = shl i32 %775, %6
  %777 = load i32, i32* %10, align 4
  %778 = and i32 %777, %776
  store i32 %778, i32* %10, align 4
  br label %865

779:                                              ; preds = %760
  %780 = shl i32 %761, 16
  %781 = ashr exact i32 %780, 16
  %782 = ashr exact i32 %780, 13
  %783 = mul i32 %782, %781
  %784 = add i32 %783, 32768
  %785 = ashr i32 %784, 16
  %786 = sub nsw i32 32767, %785
  %787 = mul nsw i32 %785, -626
  %788 = add nsw i32 %787, 16384
  %789 = ashr i32 %788, 15
  %790 = add nsw i32 %789, 8277
  %791 = mul nsw i32 %790, %785
  %792 = add nsw i32 %791, 16384
  %793 = lshr i32 %792, 15
  %794 = shl i32 %793, 16
  %795 = add i32 %794, -501415936
  %796 = ashr exact i32 %795, 16
  %797 = mul nsw i32 %796, %785
  %798 = add nsw i32 %797, 16384
  %799 = lshr i32 %798, 15
  %800 = add nuw nsw i32 %786, %799
  %801 = shl i32 %800, 16
  %802 = add i32 %801, 65536
  %803 = ashr exact i32 %802, 16
  %804 = sub i32 1073741824, %780
  %805 = ashr exact i32 %804, 16
  %806 = ashr exact i32 %804, 13
  %807 = mul i32 %806, %805
  %808 = add i32 %807, 32768
  %809 = ashr i32 %808, 16
  %810 = sub nsw i32 32767, %809
  %811 = mul nsw i32 %809, -626
  %812 = add nsw i32 %811, 16384
  %813 = ashr i32 %812, 15
  %814 = add nsw i32 %813, 8277
  %815 = mul nsw i32 %814, %809
  %816 = add nsw i32 %815, 16384
  %817 = lshr i32 %816, 15
  %818 = shl i32 %817, 16
  %819 = add i32 %818, -501415936
  %820 = ashr exact i32 %819, 16
  %821 = mul nsw i32 %820, %809
  %822 = add nsw i32 %821, 16384
  %823 = lshr i32 %822, 15
  %824 = add nuw nsw i32 %810, %823
  %825 = shl i32 %824, 16
  %826 = add i32 %825, 65536
  %827 = ashr exact i32 %826, 16
  %828 = trunc i32 %4 to i16
  %829 = shl i16 %828, 7
  %830 = add i16 %829, -128
  %831 = sext i16 %830 to i32
  %832 = tail call i32 @llvm.ctlz.i32(i32 %803, i1 true) #10, !range !2
  %833 = tail call i32 @llvm.ctlz.i32(i32 %827, i1 true) #10, !range !2
  %834 = add nsw i32 %832, -17
  %835 = shl i32 %803, %834
  %836 = add nsw i32 %833, -17
  %837 = shl i32 %827, %836
  %838 = sub nsw i32 %832, %833
  %839 = shl nsw i32 %838, 11
  %840 = shl i32 %837, 16
  %841 = ashr exact i32 %840, 16
  %842 = mul nsw i32 %841, -2597
  %843 = add nsw i32 %842, 16384
  %844 = ashr i32 %843, 15
  %845 = add nsw i32 %844, 7932
  %846 = mul nsw i32 %845, %841
  %847 = add nsw i32 %846, 16384
  %848 = lshr i32 %847, 15
  %849 = shl i32 %835, 16
  %850 = ashr exact i32 %849, 16
  %851 = mul nsw i32 %850, -2597
  %852 = add nsw i32 %851, 16384
  %853 = ashr i32 %852, 15
  %854 = add nsw i32 %853, 7932
  %855 = mul nsw i32 %854, %850
  %856 = add nsw i32 %855, 16384
  %857 = lshr i32 %856, 15
  %858 = sub nsw i32 %839, %857
  %859 = add nsw i32 %858, %848
  %860 = shl i32 %859, 16
  %861 = ashr exact i32 %860, 16
  %862 = mul nsw i32 %861, %831
  %863 = add nsw i32 %862, 16384
  %864 = ashr i32 %863, 15
  br label %865

865:                                              ; preds = %773, %779, %766
  %866 = phi i32 [ %767, %766 ], [ %763, %773 ], [ %763, %779 ]
  %867 = phi i32 [ %768, %766 ], [ 0, %773 ], [ 0, %779 ]
  %868 = phi i32 [ 0, %766 ], [ 16384, %773 ], [ %761, %779 ]
  %869 = phi i32 [ 32767, %766 ], [ 0, %773 ], [ %803, %779 ]
  %870 = phi i32 [ 0, %766 ], [ 32767, %773 ], [ %827, %779 ]
  %871 = phi i32 [ -16384, %766 ], [ 16384, %773 ], [ %864, %779 ]
  %872 = getelementptr inbounds %struct.split_ctx, %struct.split_ctx* %1, i64 0, i32 0
  store i32 %867, i32* %872, align 4
  %873 = getelementptr inbounds %struct.split_ctx, %struct.split_ctx* %1, i64 0, i32 1
  store i32 %869, i32* %873, align 4
  %874 = getelementptr inbounds %struct.split_ctx, %struct.split_ctx* %1, i64 0, i32 2
  store i32 %870, i32* %874, align 4
  %875 = getelementptr inbounds %struct.split_ctx, %struct.split_ctx* %1, i64 0, i32 3
  store i32 %871, i32* %875, align 4
  %876 = getelementptr inbounds %struct.split_ctx, %struct.split_ctx* %1, i64 0, i32 4
  store i32 %868, i32* %876, align 4
  %877 = getelementptr inbounds %struct.split_ctx, %struct.split_ctx* %1, i64 0, i32 5
  store i32 %866, i32* %877, align 4
  ret void
}

declare i32 @alg_quant(float*, i32, i32, i32, i32, %struct.ec_ctx*, float, i32, i32) local_unnamed_addr #6

declare i32 @alg_unquant(float*, i32, i32, i32, i32, %struct.ec_ctx*, float) local_unnamed_addr #6

declare i32 @stereo_itheta(float*, float*, i32, i32, i32) local_unnamed_addr #6

declare void @ec_encode(%struct.ec_ctx*, i32, i32, i32) local_unnamed_addr #6

declare i32 @ec_decode(%struct.ec_ctx*, i32) local_unnamed_addr #6

declare void @ec_dec_update(%struct.ec_ctx*, i32, i32, i32) local_unnamed_addr #6

declare void @ec_enc_uint(%struct.ec_ctx*, i32, i32) local_unnamed_addr #6

declare i32 @ec_dec_uint(%struct.ec_ctx*, i32) local_unnamed_addr #6

declare i32 @isqrt32(i32) local_unnamed_addr #6

declare void @ec_enc_bit_logp(%struct.ec_ctx*, i32, i32) local_unnamed_addr #6

declare i32 @ec_dec_bit_logp(%struct.ec_ctx*, i32) local_unnamed_addr #6

declare void @dual_inner_prod_sse(float*, float*, float*, i32, float*, float*) local_unnamed_addr #6

declare float @sqrtf(float) local_unnamed_addr

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
!3 = distinct !{!3, !4, !5}
!4 = !{!"llvm.loop.unroll.runtime.disable"}
!5 = !{!"llvm.loop.isvectorized", i32 1}
!6 = distinct !{!6, !5}
!7 = !{!8}
!8 = distinct !{!8, !9}
!9 = distinct !{!9, !"LVerDomain"}
!10 = !{!11}
!11 = distinct !{!11, !9}
!12 = distinct !{!12, !5}
!13 = distinct !{!13, !5}
!14 = distinct !{!14, !4, !5}
!15 = distinct !{!15, !5}
!16 = distinct !{!16, !5}
!17 = distinct !{!17, !5}
!18 = !{!19}
!19 = distinct !{!19, !20}
!20 = distinct !{!20, !"LVerDomain"}
!21 = !{!22}
!22 = distinct !{!22, !20}
!23 = distinct !{!23, !5}
!24 = distinct !{!24, !25}
!25 = !{!"llvm.loop.unroll.disable"}
!26 = distinct !{!26, !5}
!27 = distinct !{!27, !25}
!28 = distinct !{!28, !25}
!29 = !{!30, !32}
!30 = distinct !{!30, !31, !"stereo_merge: argument 0"}
!31 = distinct !{!31, !"stereo_merge"}
!32 = distinct !{!32, !31, !"stereo_merge: argument 1"}
!33 = !{!30}
!34 = !{!32}
!35 = distinct !{!35, !5}
!36 = distinct !{!36, !4, !5}
!37 = distinct !{!37, !5}
!38 = distinct !{!38, !4, !5}
!39 = distinct !{!39, !25}
!40 = distinct !{!40, !25}
!41 = distinct !{!41, !25}
!42 = distinct !{!42, !25}
!43 = !{!44, !46}
!44 = distinct !{!44, !45, !"intensity_stereo: argument 0"}
!45 = distinct !{!45, !"intensity_stereo"}
!46 = distinct !{!46, !45, !"intensity_stereo: argument 1"}
!47 = !{!44}
!48 = !{!46}
!49 = distinct !{!49, !5}
!50 = distinct !{!50, !4, !5}
!51 = !{!52}
!52 = distinct !{!52, !53, !"stereo_split: argument 0"}
!53 = distinct !{!53, !"stereo_split"}
!54 = !{!55}
!55 = distinct !{!55, !53, !"stereo_split: argument 1"}
!56 = distinct !{!56, !5}
!57 = distinct !{!57, !4, !5}
!58 = distinct !{!58, !5}
!59 = distinct !{!59, !4, !5}
!60 = !{!61, !63}
!61 = distinct !{!61, !62, !"intensity_stereo: argument 0"}
!62 = distinct !{!62, !"intensity_stereo"}
!63 = distinct !{!63, !62, !"intensity_stereo: argument 1"}
!64 = !{!61}
!65 = !{!63}
!66 = distinct !{!66, !5}
!67 = distinct !{!67, !4, !5}
