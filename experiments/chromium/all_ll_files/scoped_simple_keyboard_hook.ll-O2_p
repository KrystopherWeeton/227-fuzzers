; ModuleID = '../../ui/aura/scoped_simple_keyboard_hook.cc'
source_filename = "../../ui/aura/scoped_simple_keyboard_hook.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.aura::ScopedSimpleKeyboardHook" = type { %"class.aura::ScopedKeyboardHook", %"class.absl::optional" }
%"class.aura::ScopedKeyboardHook" = type { i32 (...)**, %"class.base::WeakPtr" }
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.1" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i8 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }

@_ZTVN4aura24ScopedSimpleKeyboardHookE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.aura::ScopedSimpleKeyboardHook"*)* @_ZN4aura24ScopedSimpleKeyboardHookD2Ev to i8*), i8* bitcast (void (%"class.aura::ScopedSimpleKeyboardHook"*)* @_ZN4aura24ScopedSimpleKeyboardHookD0Ev to i8*), i8* bitcast (i1 (%"class.aura::ScopedSimpleKeyboardHook"*, i32)* @_ZN4aura24ScopedSimpleKeyboardHook11IsKeyLockedEN2ui7DomCodeE to i8*)] }, align 8

@_ZN4aura24ScopedSimpleKeyboardHookC1EN4absl8optionalIN4base8internal9flat_treeIN2ui7DomCodeENS3_8identityENSt3__14lessIvEENS9_6vectorIS7_NS9_9allocatorIS7_EEEEEEEE = hidden unnamed_addr alias void (%"class.aura::ScopedSimpleKeyboardHook"*, %"class.absl::optional"*), void (%"class.aura::ScopedSimpleKeyboardHook"*, %"class.absl::optional"*)* @_ZN4aura24ScopedSimpleKeyboardHookC2EN4absl8optionalIN4base8internal9flat_treeIN2ui7DomCodeENS3_8identityENSt3__14lessIvEENS9_6vectorIS7_NS9_9allocatorIS7_EEEEEEEE
@_ZN4aura24ScopedSimpleKeyboardHookD1Ev = hidden unnamed_addr alias void (%"class.aura::ScopedSimpleKeyboardHook"*), void (%"class.aura::ScopedSimpleKeyboardHook"*)* @_ZN4aura24ScopedSimpleKeyboardHookD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4aura24ScopedSimpleKeyboardHookC2EN4absl8optionalIN4base8internal9flat_treeIN2ui7DomCodeENS3_8identityENSt3__14lessIvEENS9_6vectorIS7_NS9_9allocatorIS7_EEEEEEEE(%"class.aura::ScopedSimpleKeyboardHook"*, %"class.absl::optional"* nocapture) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.aura::ScopedSimpleKeyboardHook", %"class.aura::ScopedSimpleKeyboardHook"* %0, i64 0, i32 0
  tail call void @_ZN4aura18ScopedKeyboardHookC2Ev(%"class.aura::ScopedKeyboardHook"* %3) #5
  %4 = getelementptr inbounds %"class.aura::ScopedSimpleKeyboardHook", %"class.aura::ScopedSimpleKeyboardHook"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN4aura24ScopedSimpleKeyboardHookE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.aura::ScopedSimpleKeyboardHook", %"class.aura::ScopedSimpleKeyboardHook"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 32, i1 false) #5
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %27, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %11 = getelementptr inbounds %"class.aura::ScopedSimpleKeyboardHook", %"class.aura::ScopedSimpleKeyboardHook"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  %12 = bitcast %"class.base::internal::flat_tree"* %11 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 24, i1 false) #5
  %13 = bitcast %"class.base::internal::flat_tree"* %10 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.base::internal::flat_tree"* %11 to i64*
  store i64 %14, i64* %15, align 8
  %16 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %17 = bitcast i32** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %"class.aura::ScopedSimpleKeyboardHook", %"class.aura::ScopedSimpleKeyboardHook"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %20 = bitcast i32** %19 to i64*
  store i64 %18, i64* %20, align 8
  %21 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %22 = bitcast i32** %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = getelementptr inbounds %"class.aura::ScopedSimpleKeyboardHook", %"class.aura::ScopedSimpleKeyboardHook"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %25 = bitcast i32** %24 to i64*
  store i64 %23, i64* %25, align 8
  %26 = bitcast %"class.base::internal::flat_tree"* %10 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 24, i1 false) #5
  store i8 1, i8* %5, align 8
  br label %27

27:                                               ; preds = %2, %9
  ret void
}

declare void @_ZN4aura18ScopedKeyboardHookC2Ev(%"class.aura::ScopedKeyboardHook"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4aura24ScopedSimpleKeyboardHookD2Ev(%"class.aura::ScopedSimpleKeyboardHook"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.aura::ScopedSimpleKeyboardHook", %"class.aura::ScopedSimpleKeyboardHook"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN4aura24ScopedSimpleKeyboardHookE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.aura::ScopedSimpleKeyboardHook", %"class.aura::ScopedSimpleKeyboardHook"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %16, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.aura::ScopedSimpleKeyboardHook", %"class.aura::ScopedSimpleKeyboardHook"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %8 = load i32*, i32** %7, align 8
  %9 = icmp eq i32* %8, null
  br i1 %9, label %15, label %10

10:                                               ; preds = %6
  %11 = ptrtoint i32* %8 to i64
  %12 = getelementptr inbounds %"class.aura::ScopedSimpleKeyboardHook", %"class.aura::ScopedSimpleKeyboardHook"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %13 = bitcast i32** %12 to i64*
  store i64 %11, i64* %13, align 8
  %14 = bitcast i32* %8 to i8*
  tail call void @_ZdlPv(i8* %14) #6
  br label %15

15:                                               ; preds = %10, %6
  store i8 0, i8* %3, align 8
  br label %16

16:                                               ; preds = %1, %15
  %17 = getelementptr inbounds %"class.aura::ScopedSimpleKeyboardHook", %"class.aura::ScopedSimpleKeyboardHook"* %0, i64 0, i32 0
  tail call void @_ZN4aura18ScopedKeyboardHookD2Ev(%"class.aura::ScopedKeyboardHook"* %17) #5
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4aura18ScopedKeyboardHookD2Ev(%"class.aura::ScopedKeyboardHook"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4aura24ScopedSimpleKeyboardHookD0Ev(%"class.aura::ScopedSimpleKeyboardHook"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.aura::ScopedSimpleKeyboardHook", %"class.aura::ScopedSimpleKeyboardHook"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN4aura24ScopedSimpleKeyboardHookE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.aura::ScopedSimpleKeyboardHook", %"class.aura::ScopedSimpleKeyboardHook"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %16, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.aura::ScopedSimpleKeyboardHook", %"class.aura::ScopedSimpleKeyboardHook"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %8 = load i32*, i32** %7, align 8
  %9 = icmp eq i32* %8, null
  br i1 %9, label %15, label %10

10:                                               ; preds = %6
  %11 = ptrtoint i32* %8 to i64
  %12 = getelementptr inbounds %"class.aura::ScopedSimpleKeyboardHook", %"class.aura::ScopedSimpleKeyboardHook"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %13 = bitcast i32** %12 to i64*
  store i64 %11, i64* %13, align 8
  %14 = bitcast i32* %8 to i8*
  tail call void @_ZdlPv(i8* %14) #6
  br label %15

15:                                               ; preds = %10, %6
  store i8 0, i8* %3, align 8
  br label %16

16:                                               ; preds = %1, %15
  %17 = getelementptr inbounds %"class.aura::ScopedSimpleKeyboardHook", %"class.aura::ScopedSimpleKeyboardHook"* %0, i64 0, i32 0
  tail call void @_ZN4aura18ScopedKeyboardHookD2Ev(%"class.aura::ScopedKeyboardHook"* %17) #5
  %18 = bitcast %"class.aura::ScopedSimpleKeyboardHook"* %0 to i8*
  tail call void @_ZdlPv(i8* %18) #6
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4aura24ScopedSimpleKeyboardHook11IsKeyLockedEN2ui7DomCodeE(%"class.aura::ScopedSimpleKeyboardHook"* nocapture readonly, i32) unnamed_addr #0 align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %39, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.aura::ScopedSimpleKeyboardHook", %"class.aura::ScopedSimpleKeyboardHook"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %6 = load i8, i8* %5, align 8, !range !2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %39, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %"class.aura::ScopedSimpleKeyboardHook", %"class.aura::ScopedSimpleKeyboardHook"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %10 = load i32*, i32** %9, align 8
  %11 = getelementptr inbounds %"class.aura::ScopedSimpleKeyboardHook", %"class.aura::ScopedSimpleKeyboardHook"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %12 = bitcast i32** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = ptrtoint i32* %10 to i64
  %15 = sub i64 %13, %14
  %16 = icmp eq i64 %15, 0
  %17 = inttoptr i64 %13 to i32*
  br i1 %16, label %33, label %18

18:                                               ; preds = %8
  %19 = ashr exact i64 %15, 2
  br label %20

20:                                               ; preds = %20, %18
  %21 = phi i32* [ %10, %18 ], [ %31, %20 ]
  %22 = phi i64 [ %19, %18 ], [ %30, %20 ]
  %23 = lshr i64 %22, 1
  %24 = getelementptr inbounds i32, i32* %21, i64 %23
  %25 = load i32, i32* %24, align 4
  %26 = icmp slt i32 %25, %1
  %27 = getelementptr inbounds i32, i32* %24, i64 1
  %28 = xor i64 %23, -1
  %29 = add i64 %22, %28
  %30 = select i1 %26, i64 %29, i64 %23
  %31 = select i1 %26, i32* %27, i32* %21
  %32 = icmp eq i64 %30, 0
  br i1 %32, label %33, label %20

33:                                               ; preds = %20, %8
  %34 = phi i32* [ %10, %8 ], [ %31, %20 ]
  %35 = icmp eq i32* %34, %17
  br i1 %35, label %39, label %36

36:                                               ; preds = %33
  %37 = load i32, i32* %34, align 4
  %38 = icmp sle i32 %37, %1
  br label %39

39:                                               ; preds = %4, %36, %33, %2
  %40 = phi i1 [ false, %2 ], [ true, %4 ], [ false, %33 ], [ %38, %36 ]
  ret i1 %40
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
