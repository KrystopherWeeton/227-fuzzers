; ModuleID = '../../components/invalidation/public/invalidation_util.cc'
source_filename = "../../components/invalidation/public/invalidation_util.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.invalidation::InvalidationVersionLessThan" = type { i8 }
%"class.invalidation::Invalidation" = type { %"class.std::__1::basic_string", i8, i64, %"class.std::__1::basic_string", %"class.invalidation::AckHandle", %"class.base::WeakPtr", %class.scoped_refptr.7 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.invalidation::AckHandle" = type { %"class.std::__1::basic_string", %"class.base::Time" }
%"class.base::Time" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.2" }
%"struct.std::__1::atomic.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl.5" }
%"struct.std::__1::__cxx_atomic_impl.5" = type { %"struct.std::__1::__cxx_atomic_base_impl.6" }
%"struct.std::__1::__cxx_atomic_base_impl.6" = type { i8 }
%class.scoped_refptr.7 = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.8" }>
%"class.base::RefCountedThreadSafe.8" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"struct.invalidation::TopicMetadata" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

@.str = private unnamed_addr constant [6 x i8] c"Cloud\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"Fake\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"RemoteCommands\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"Drive\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"Sync\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"TICL\00", align 1
@.str.6 = private unnamed_addr constant [28 x i8] c"ChildAccountInfoFetcherImpl\00", align 1
@.str.7 = private unnamed_addr constant [20 x i8] c"NotificationPrinter\00", align 1
@.str.8 = private unnamed_addr constant [16 x i8] c"InvalidatorShim\00", align 1
@.str.9 = private unnamed_addr constant [15 x i8] c"SyncEngineImpl\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK12invalidation27InvalidationVersionLessThanclERKNS_12InvalidationES3_(%"struct.invalidation::InvalidationVersionLessThan"* nocapture readnone, %"class.invalidation::Invalidation"* dereferenceable(120), %"class.invalidation::Invalidation"* dereferenceable(120)) local_unnamed_addr #0 align 2 {
  %4 = tail call zeroext i1 @_ZNK12invalidation12Invalidation18is_unknown_versionEv(%"class.invalidation::Invalidation"* %1) #3
  br i1 %4, label %5, label %7

5:                                                ; preds = %3
  %6 = tail call zeroext i1 @_ZNK12invalidation12Invalidation18is_unknown_versionEv(%"class.invalidation::Invalidation"* %2) #3
  br i1 %6, label %7, label %19

7:                                                ; preds = %5, %3
  %8 = tail call zeroext i1 @_ZNK12invalidation12Invalidation18is_unknown_versionEv(%"class.invalidation::Invalidation"* %1) #3
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = tail call zeroext i1 @_ZNK12invalidation12Invalidation18is_unknown_versionEv(%"class.invalidation::Invalidation"* %2) #3
  br i1 %10, label %19, label %11

11:                                               ; preds = %9, %7
  %12 = tail call zeroext i1 @_ZNK12invalidation12Invalidation18is_unknown_versionEv(%"class.invalidation::Invalidation"* %1) #3
  br i1 %12, label %13, label %15

13:                                               ; preds = %11
  %14 = tail call zeroext i1 @_ZNK12invalidation12Invalidation18is_unknown_versionEv(%"class.invalidation::Invalidation"* %2) #3
  br i1 %14, label %19, label %15

15:                                               ; preds = %13, %11
  %16 = tail call i64 @_ZNK12invalidation12Invalidation7versionEv(%"class.invalidation::Invalidation"* %1) #3
  %17 = tail call i64 @_ZNK12invalidation12Invalidation7versionEv(%"class.invalidation::Invalidation"* %2) #3
  %18 = icmp slt i64 %16, %17
  br label %19

19:                                               ; preds = %13, %9, %5, %15
  %20 = phi i1 [ %18, %15 ], [ true, %5 ], [ false, %9 ], [ false, %13 ]
  ret i1 %20
}

declare zeroext i1 @_ZNK12invalidation12Invalidation18is_unknown_versionEv(%"class.invalidation::Invalidation"*) local_unnamed_addr #1

declare i64 @_ZNK12invalidation12Invalidation7versionEv(%"class.invalidation::Invalidation"*) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN12invalidationeqERKNS_13TopicMetadataES2_(%"struct.invalidation::TopicMetadata"* nocapture readonly dereferenceable(1), %"struct.invalidation::TopicMetadata"* nocapture readonly dereferenceable(1)) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %"struct.invalidation::TopicMetadata", %"struct.invalidation::TopicMetadata"* %0, i64 0, i32 0
  %4 = load i8, i8* %3, align 1, !range !2
  %5 = getelementptr inbounds %"struct.invalidation::TopicMetadata", %"struct.invalidation::TopicMetadata"* %1, i64 0, i32 0
  %6 = load i8, i8* %5, align 1, !range !2
  %7 = icmp eq i8 %4, %6
  ret i1 %7
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN12invalidation22OwnerNameToHandlerTypeERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(%"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #0 {
  %2 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %3 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %2, i64 0, i32 1, i32 0
  %4 = load i8, i8* %3, align 1
  %5 = icmp slt i8 %4, 0
  %6 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = zext i8 %4 to i64
  %9 = select i1 %5, i64 %7, i64 %8
  %10 = icmp eq i64 %9, 5
  br i1 %10, label %11, label %18

11:                                               ; preds = %1
  %12 = tail call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* %0, i64 0, i64 -1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i64 5) #3
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %141, label %14

14:                                               ; preds = %11
  %15 = load i8, i8* %3, align 1
  %16 = load i64, i64* %6, align 8
  %17 = zext i8 %15 to i64
  br label %18

18:                                               ; preds = %14, %1
  %19 = phi i64 [ %17, %14 ], [ %8, %1 ]
  %20 = phi i64 [ %16, %14 ], [ %7, %1 ]
  %21 = phi i8 [ %15, %14 ], [ %4, %1 ]
  %22 = icmp slt i8 %21, 0
  %23 = select i1 %22, i64 %20, i64 %19
  %24 = icmp eq i64 %23, 4
  br i1 %24, label %25, label %32

25:                                               ; preds = %18
  %26 = tail call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* %0, i64 0, i64 -1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64 4) #3
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %141, label %28

28:                                               ; preds = %25
  %29 = load i8, i8* %3, align 1
  %30 = load i64, i64* %6, align 8
  %31 = zext i8 %29 to i64
  br label %32

32:                                               ; preds = %28, %18
  %33 = phi i64 [ %31, %28 ], [ %19, %18 ]
  %34 = phi i64 [ %30, %28 ], [ %20, %18 ]
  %35 = phi i8 [ %29, %28 ], [ %21, %18 ]
  %36 = icmp slt i8 %35, 0
  %37 = select i1 %36, i64 %34, i64 %33
  %38 = icmp eq i64 %37, 14
  br i1 %38, label %39, label %46

39:                                               ; preds = %32
  %40 = tail call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* %0, i64 0, i64 -1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i64 14) #3
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %141, label %42

42:                                               ; preds = %39
  %43 = load i8, i8* %3, align 1
  %44 = load i64, i64* %6, align 8
  %45 = zext i8 %43 to i64
  br label %46

46:                                               ; preds = %42, %32
  %47 = phi i64 [ %45, %42 ], [ %33, %32 ]
  %48 = phi i64 [ %44, %42 ], [ %34, %32 ]
  %49 = phi i8 [ %43, %42 ], [ %35, %32 ]
  %50 = icmp slt i8 %49, 0
  %51 = select i1 %50, i64 %48, i64 %47
  %52 = icmp eq i64 %51, 5
  br i1 %52, label %53, label %60

53:                                               ; preds = %46
  %54 = tail call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* %0, i64 0, i64 -1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0), i64 5) #3
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %141, label %56

56:                                               ; preds = %53
  %57 = load i8, i8* %3, align 1
  %58 = load i64, i64* %6, align 8
  %59 = zext i8 %57 to i64
  br label %60

60:                                               ; preds = %56, %46
  %61 = phi i64 [ %59, %56 ], [ %47, %46 ]
  %62 = phi i64 [ %58, %56 ], [ %48, %46 ]
  %63 = phi i8 [ %57, %56 ], [ %49, %46 ]
  %64 = icmp slt i8 %63, 0
  %65 = select i1 %64, i64 %62, i64 %61
  %66 = icmp eq i64 %65, 4
  br i1 %66, label %67, label %74

67:                                               ; preds = %60
  %68 = tail call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* %0, i64 0, i64 -1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0), i64 4) #3
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %141, label %70

70:                                               ; preds = %67
  %71 = load i8, i8* %3, align 1
  %72 = load i64, i64* %6, align 8
  %73 = zext i8 %71 to i64
  br label %74

74:                                               ; preds = %70, %60
  %75 = phi i64 [ %73, %70 ], [ %61, %60 ]
  %76 = phi i64 [ %72, %70 ], [ %62, %60 ]
  %77 = phi i8 [ %71, %70 ], [ %63, %60 ]
  %78 = icmp slt i8 %77, 0
  %79 = select i1 %78, i64 %76, i64 %75
  %80 = icmp eq i64 %79, 4
  br i1 %80, label %81, label %88

81:                                               ; preds = %74
  %82 = tail call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* %0, i64 0, i64 -1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0), i64 4) #3
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %141, label %84

84:                                               ; preds = %81
  %85 = load i8, i8* %3, align 1
  %86 = load i64, i64* %6, align 8
  %87 = zext i8 %85 to i64
  br label %88

88:                                               ; preds = %84, %74
  %89 = phi i64 [ %87, %84 ], [ %75, %74 ]
  %90 = phi i64 [ %86, %84 ], [ %76, %74 ]
  %91 = phi i8 [ %85, %84 ], [ %77, %74 ]
  %92 = icmp slt i8 %91, 0
  %93 = select i1 %92, i64 %90, i64 %89
  %94 = icmp eq i64 %93, 27
  br i1 %94, label %95, label %102

95:                                               ; preds = %88
  %96 = tail call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* %0, i64 0, i64 -1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.6, i64 0, i64 0), i64 27) #3
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %141, label %98

98:                                               ; preds = %95
  %99 = load i8, i8* %3, align 1
  %100 = load i64, i64* %6, align 8
  %101 = zext i8 %99 to i64
  br label %102

102:                                              ; preds = %98, %88
  %103 = phi i64 [ %101, %98 ], [ %89, %88 ]
  %104 = phi i64 [ %100, %98 ], [ %90, %88 ]
  %105 = phi i8 [ %99, %98 ], [ %91, %88 ]
  %106 = icmp slt i8 %105, 0
  %107 = select i1 %106, i64 %104, i64 %103
  %108 = icmp eq i64 %107, 19
  br i1 %108, label %109, label %116

109:                                              ; preds = %102
  %110 = tail call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* %0, i64 0, i64 -1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7, i64 0, i64 0), i64 19) #3
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %141, label %112

112:                                              ; preds = %109
  %113 = load i8, i8* %3, align 1
  %114 = load i64, i64* %6, align 8
  %115 = zext i8 %113 to i64
  br label %116

116:                                              ; preds = %112, %102
  %117 = phi i64 [ %115, %112 ], [ %103, %102 ]
  %118 = phi i64 [ %114, %112 ], [ %104, %102 ]
  %119 = phi i8 [ %113, %112 ], [ %105, %102 ]
  %120 = icmp slt i8 %119, 0
  %121 = select i1 %120, i64 %118, i64 %117
  %122 = icmp eq i64 %121, 15
  br i1 %122, label %123, label %130

123:                                              ; preds = %116
  %124 = tail call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* %0, i64 0, i64 -1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i64 15) #3
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %141, label %126

126:                                              ; preds = %123
  %127 = load i8, i8* %3, align 1
  %128 = load i64, i64* %6, align 8
  %129 = zext i8 %127 to i64
  br label %130

130:                                              ; preds = %126, %116
  %131 = phi i64 [ %129, %126 ], [ %117, %116 ]
  %132 = phi i64 [ %128, %126 ], [ %118, %116 ]
  %133 = phi i8 [ %127, %126 ], [ %119, %116 ]
  %134 = icmp slt i8 %133, 0
  %135 = select i1 %134, i64 %132, i64 %131
  %136 = icmp eq i64 %135, 14
  br i1 %136, label %137, label %141

137:                                              ; preds = %130
  %138 = tail call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* %0, i64 0, i64 -1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0), i64 14) #3
  %139 = icmp eq i32 %138, 0
  %140 = select i1 %139, i32 9, i32 10
  ret i32 %140

141:                                              ; preds = %130, %123, %109, %95, %81, %67, %53, %39, %25, %11
  %142 = phi i32 [ 0, %11 ], [ 1, %25 ], [ 2, %39 ], [ 3, %53 ], [ 4, %67 ], [ 5, %81 ], [ 6, %95 ], [ 7, %109 ], [ 8, %123 ], [ 10, %130 ]
  ret i32 %142
}

declare i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"*, i64, i64, i8*, i64) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
