; ModuleID = '../../third_party/libaom/source/libaom/aom_dsp/x86/aom_quantize_avx.c'
source_filename = "../../third_party/libaom/source/libaom/aom_dsp/x86/aom_quantize_avx.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_quantize_b_avx(i32* nocapture readonly, i64, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i32* nocapture, i32* nocapture, i16* nocapture readonly, i16* nocapture, i16* nocapture readnone, i16* nocapture readonly) local_unnamed_addr #0 {
  store i16 0, i16* %9, align 2
  %13 = bitcast i16* %2 to <8 x i16>*
  %14 = load <8 x i16>, <8 x i16>* %13, align 16
  %15 = bitcast i16* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 16
  %17 = bitcast i16* %4 to <2 x i64>*
  %18 = load <2 x i64>, <2 x i64>* %17, align 16
  %19 = add <8 x i16> %14, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  %20 = bitcast <8 x i16> %19 to <2 x i64>
  %21 = bitcast i16* %8 to <2 x i64>*
  %22 = load <2 x i64>, <2 x i64>* %21, align 16
  %23 = bitcast i16* %5 to <2 x i64>*
  %24 = load <2 x i64>, <2 x i64>* %23, align 16
  %25 = bitcast i32* %0 to <4 x i32>*
  %26 = load <4 x i32>, <4 x i32>* %25, align 16
  %27 = getelementptr inbounds i32, i32* %0, i64 4
  %28 = bitcast i32* %27 to <4 x i32>*
  %29 = load <4 x i32>, <4 x i32>* %28, align 16
  %30 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %26, <4 x i32> %29) #3
  %31 = getelementptr inbounds i32, i32* %0, i64 8
  %32 = bitcast i32* %31 to <4 x i32>*
  %33 = load <4 x i32>, <4 x i32>* %32, align 16
  %34 = getelementptr inbounds i32, i32* %0, i64 12
  %35 = bitcast i32* %34 to <4 x i32>*
  %36 = load <4 x i32>, <4 x i32>* %35, align 16
  %37 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %33, <4 x i32> %36) #3
  %38 = sub <8 x i16> zeroinitializer, %30
  %39 = icmp slt <8 x i16> %30, zeroinitializer
  %40 = select <8 x i1> %39, <8 x i16> %38, <8 x i16> %30
  %41 = sub <8 x i16> zeroinitializer, %37
  %42 = icmp slt <8 x i16> %37, zeroinitializer
  %43 = select <8 x i1> %42, <8 x i16> %41, <8 x i16> %37
  %44 = icmp sgt <8 x i16> %40, %19
  %45 = sext <8 x i1> %44 to <8 x i16>
  %46 = shufflevector <2 x i64> %20, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %47 = bitcast <2 x i64> %46 to <8 x i16>
  %48 = icmp sgt <8 x i16> %43, %47
  %49 = sext <8 x i1> %48 to <8 x i16>
  %50 = or <8 x i1> %48, %44
  %51 = sext <8 x i1> %50 to <8 x i16>
  %52 = bitcast <8 x i16> %51 to <2 x i64>
  %53 = tail call i32 @llvm.x86.sse41.ptestz(<2 x i64> %52, <2 x i64> %52) #3
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %68, label %55

55:                                               ; preds = %12
  %56 = bitcast i32* %6 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %56, align 32
  %57 = bitcast i32* %7 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %57, align 32
  %58 = getelementptr inbounds i32, i32* %6, i64 8
  %59 = bitcast i32* %58 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %59, align 32
  %60 = getelementptr inbounds i32, i32* %7, i64 8
  %61 = bitcast i32* %60 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %61, align 32
  %62 = icmp eq i64 %1, 16
  br i1 %62, label %270, label %63

63:                                               ; preds = %55
  %64 = shufflevector <2 x i64> %16, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %65 = shufflevector <2 x i64> %18, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %66 = shufflevector <2 x i64> %24, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %67 = shufflevector <2 x i64> %22, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  br label %135

68:                                               ; preds = %12
  %69 = bitcast <2 x i64> %16 to <8 x i16>
  %70 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %40, <8 x i16> %69) #3
  %71 = bitcast <2 x i64> %18 to <8 x i16>
  %72 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %70, <8 x i16> %71) #3
  %73 = add <8 x i16> %72, %70
  %74 = bitcast <2 x i64> %24 to <8 x i16>
  %75 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %73, <8 x i16> %74) #3
  %76 = shufflevector <2 x i64> %16, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %77 = shufflevector <2 x i64> %18, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %78 = shufflevector <2 x i64> %24, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %79 = bitcast <2 x i64> %76 to <8 x i16>
  %80 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %43, <8 x i16> %79) #3
  %81 = bitcast <2 x i64> %77 to <8 x i16>
  %82 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %80, <8 x i16> %81) #3
  %83 = add <8 x i16> %82, %80
  %84 = bitcast <2 x i64> %78 to <8 x i16>
  %85 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %83, <8 x i16> %84) #3
  %86 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %75, <8 x i16> %30) #3
  %87 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %85, <8 x i16> %37) #3
  %88 = and <8 x i16> %86, %45
  %89 = and <8 x i16> %87, %49
  %90 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %88, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %91 = shufflevector <8 x i16> %88, <8 x i16> %90, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %92 = shufflevector <8 x i16> %88, <8 x i16> %90, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %93 = bitcast i32* %6 to <8 x i16>*
  store <8 x i16> %91, <8 x i16>* %93, align 16
  %94 = getelementptr inbounds i32, i32* %6, i64 4
  %95 = bitcast i32* %94 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %95, align 16
  %96 = getelementptr inbounds i32, i32* %6, i64 8
  %97 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %89, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %98 = shufflevector <8 x i16> %89, <8 x i16> %97, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %99 = shufflevector <8 x i16> %89, <8 x i16> %97, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %100 = bitcast i32* %96 to <8 x i16>*
  store <8 x i16> %98, <8 x i16>* %100, align 16
  %101 = getelementptr inbounds i32, i32* %6, i64 12
  %102 = bitcast i32* %101 to <8 x i16>*
  store <8 x i16> %99, <8 x i16>* %102, align 16
  %103 = bitcast <2 x i64> %22 to <8 x i16>
  %104 = mul <8 x i16> %88, %103
  %105 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %88, <8 x i16> %103) #3
  %106 = shufflevector <8 x i16> %104, <8 x i16> %105, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %107 = shufflevector <8 x i16> %104, <8 x i16> %105, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %108 = bitcast i32* %7 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %108, align 16
  %109 = getelementptr inbounds i32, i32* %7, i64 4
  %110 = bitcast i32* %109 to <8 x i16>*
  store <8 x i16> %107, <8 x i16>* %110, align 16
  %111 = shufflevector <2 x i64> %22, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %112 = getelementptr inbounds i32, i32* %7, i64 8
  %113 = bitcast <2 x i64> %111 to <8 x i16>
  %114 = mul <8 x i16> %89, %113
  %115 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %89, <8 x i16> %113) #3
  %116 = shufflevector <8 x i16> %114, <8 x i16> %115, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %117 = shufflevector <8 x i16> %114, <8 x i16> %115, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %118 = bitcast i32* %112 to <8 x i16>*
  store <8 x i16> %116, <8 x i16>* %118, align 16
  %119 = getelementptr inbounds i32, i32* %7, i64 12
  %120 = bitcast i32* %119 to <8 x i16>*
  store <8 x i16> %117, <8 x i16>* %120, align 16
  %121 = icmp eq <8 x i16> %88, zeroinitializer
  %122 = icmp eq <8 x i16> %89, zeroinitializer
  %123 = bitcast i16* %11 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 16
  %125 = getelementptr inbounds i16, i16* %11, i64 8
  %126 = bitcast i16* %125 to <8 x i16>*
  %127 = load <8 x i16>, <8 x i16>* %126, align 16
  %128 = sub <8 x i16> %124, %45
  %129 = sub <8 x i16> %127, %49
  %130 = select <8 x i1> %121, <8 x i16> zeroinitializer, <8 x i16> %128
  %131 = select <8 x i1> %122, <8 x i16> zeroinitializer, <8 x i16> %129
  %132 = icmp sgt <8 x i16> %130, %131
  %133 = select <8 x i1> %132, <8 x i16> %130, <8 x i16> %131
  %134 = bitcast <8 x i16> %133 to <2 x i64>
  br label %135

135:                                              ; preds = %68, %63
  %136 = phi <2 x i64> [ %76, %68 ], [ %64, %63 ]
  %137 = phi <2 x i64> [ %77, %68 ], [ %65, %63 ]
  %138 = phi <2 x i64> [ %111, %68 ], [ %67, %63 ]
  %139 = phi <2 x i64> [ %78, %68 ], [ %66, %63 ]
  %140 = phi <8 x i16> [ %133, %68 ], [ zeroinitializer, %63 ]
  %141 = phi <2 x i64> [ %134, %68 ], [ zeroinitializer, %63 ]
  %142 = icmp sgt i64 %1, 16
  br i1 %142, label %143, label %255

143:                                              ; preds = %135
  %144 = bitcast <2 x i64> %136 to <8 x i16>
  %145 = bitcast <2 x i64> %137 to <8 x i16>
  %146 = bitcast <2 x i64> %139 to <8 x i16>
  %147 = bitcast <2 x i64> %138 to <8 x i16>
  br label %148

148:                                              ; preds = %143, %250
  %149 = phi i64 [ 16, %143 ], [ %253, %250 ]
  %150 = phi <2 x i64> [ %141, %143 ], [ %252, %250 ]
  %151 = phi <8 x i16> [ %140, %143 ], [ %251, %250 ]
  %152 = getelementptr inbounds i32, i32* %0, i64 %149
  %153 = bitcast i32* %152 to <4 x i32>*
  %154 = load <4 x i32>, <4 x i32>* %153, align 16
  %155 = getelementptr inbounds i32, i32* %152, i64 4
  %156 = bitcast i32* %155 to <4 x i32>*
  %157 = load <4 x i32>, <4 x i32>* %156, align 16
  %158 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %154, <4 x i32> %157) #3
  %159 = getelementptr inbounds i32, i32* %152, i64 8
  %160 = bitcast i32* %159 to <4 x i32>*
  %161 = load <4 x i32>, <4 x i32>* %160, align 16
  %162 = getelementptr inbounds i32, i32* %159, i64 4
  %163 = bitcast i32* %162 to <4 x i32>*
  %164 = load <4 x i32>, <4 x i32>* %163, align 16
  %165 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %161, <4 x i32> %164) #3
  %166 = sub <8 x i16> zeroinitializer, %158
  %167 = icmp slt <8 x i16> %158, zeroinitializer
  %168 = select <8 x i1> %167, <8 x i16> %166, <8 x i16> %158
  %169 = sub <8 x i16> zeroinitializer, %165
  %170 = icmp slt <8 x i16> %165, zeroinitializer
  %171 = select <8 x i1> %170, <8 x i16> %169, <8 x i16> %165
  %172 = icmp sgt <8 x i16> %168, %47
  %173 = sext <8 x i1> %172 to <8 x i16>
  %174 = icmp sgt <8 x i16> %171, %47
  %175 = sext <8 x i1> %174 to <8 x i16>
  %176 = or <8 x i1> %174, %172
  %177 = sext <8 x i1> %176 to <8 x i16>
  %178 = bitcast <8 x i16> %177 to <2 x i64>
  %179 = tail call i32 @llvm.x86.sse41.ptestz(<2 x i64> %178, <2 x i64> %178) #3
  %180 = icmp eq i32 %179, 0
  br i1 %180, label %190, label %181

181:                                              ; preds = %148
  %182 = getelementptr inbounds i32, i32* %6, i64 %149
  %183 = bitcast i32* %182 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %183, align 32
  %184 = getelementptr inbounds i32, i32* %7, i64 %149
  %185 = bitcast i32* %184 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %185, align 32
  %186 = getelementptr inbounds i32, i32* %182, i64 8
  %187 = bitcast i32* %186 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %187, align 32
  %188 = getelementptr inbounds i32, i32* %184, i64 8
  %189 = bitcast i32* %188 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %189, align 32
  br label %250

190:                                              ; preds = %148
  %191 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %168, <8 x i16> %144) #3
  %192 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %191, <8 x i16> %145) #3
  %193 = add <8 x i16> %192, %191
  %194 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %193, <8 x i16> %146) #3
  %195 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %171, <8 x i16> %144) #3
  %196 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %195, <8 x i16> %145) #3
  %197 = add <8 x i16> %196, %195
  %198 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %197, <8 x i16> %146) #3
  %199 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %194, <8 x i16> %158) #3
  %200 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %198, <8 x i16> %165) #3
  %201 = and <8 x i16> %199, %173
  %202 = and <8 x i16> %200, %175
  %203 = getelementptr inbounds i32, i32* %6, i64 %149
  %204 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %201, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %205 = shufflevector <8 x i16> %201, <8 x i16> %204, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %206 = shufflevector <8 x i16> %201, <8 x i16> %204, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %207 = bitcast i32* %203 to <8 x i16>*
  store <8 x i16> %205, <8 x i16>* %207, align 16
  %208 = getelementptr inbounds i32, i32* %203, i64 4
  %209 = bitcast i32* %208 to <8 x i16>*
  store <8 x i16> %206, <8 x i16>* %209, align 16
  %210 = getelementptr inbounds i32, i32* %203, i64 8
  %211 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %202, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %212 = shufflevector <8 x i16> %202, <8 x i16> %211, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %213 = shufflevector <8 x i16> %202, <8 x i16> %211, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %214 = bitcast i32* %210 to <8 x i16>*
  store <8 x i16> %212, <8 x i16>* %214, align 16
  %215 = getelementptr inbounds i32, i32* %210, i64 4
  %216 = bitcast i32* %215 to <8 x i16>*
  store <8 x i16> %213, <8 x i16>* %216, align 16
  %217 = getelementptr inbounds i32, i32* %7, i64 %149
  %218 = mul <8 x i16> %201, %147
  %219 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %201, <8 x i16> %147) #3
  %220 = shufflevector <8 x i16> %218, <8 x i16> %219, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %221 = shufflevector <8 x i16> %218, <8 x i16> %219, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %222 = bitcast i32* %217 to <8 x i16>*
  store <8 x i16> %220, <8 x i16>* %222, align 16
  %223 = getelementptr inbounds i32, i32* %217, i64 4
  %224 = bitcast i32* %223 to <8 x i16>*
  store <8 x i16> %221, <8 x i16>* %224, align 16
  %225 = getelementptr inbounds i32, i32* %217, i64 8
  %226 = mul <8 x i16> %202, %147
  %227 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %202, <8 x i16> %147) #3
  %228 = shufflevector <8 x i16> %226, <8 x i16> %227, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %229 = shufflevector <8 x i16> %226, <8 x i16> %227, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %230 = bitcast i32* %225 to <8 x i16>*
  store <8 x i16> %228, <8 x i16>* %230, align 16
  %231 = getelementptr inbounds i32, i32* %225, i64 4
  %232 = bitcast i32* %231 to <8 x i16>*
  store <8 x i16> %229, <8 x i16>* %232, align 16
  %233 = icmp eq <8 x i16> %201, zeroinitializer
  %234 = icmp eq <8 x i16> %202, zeroinitializer
  %235 = getelementptr inbounds i16, i16* %11, i64 %149
  %236 = bitcast i16* %235 to <8 x i16>*
  %237 = load <8 x i16>, <8 x i16>* %236, align 16
  %238 = getelementptr inbounds i16, i16* %235, i64 8
  %239 = bitcast i16* %238 to <8 x i16>*
  %240 = load <8 x i16>, <8 x i16>* %239, align 16
  %241 = sub <8 x i16> %237, %173
  %242 = sub <8 x i16> %240, %175
  %243 = select <8 x i1> %233, <8 x i16> zeroinitializer, <8 x i16> %241
  %244 = select <8 x i1> %234, <8 x i16> zeroinitializer, <8 x i16> %242
  %245 = icmp sgt <8 x i16> %243, %244
  %246 = select <8 x i1> %245, <8 x i16> %243, <8 x i16> %244
  %247 = icmp sgt <8 x i16> %151, %246
  %248 = select <8 x i1> %247, <8 x i16> %151, <8 x i16> %246
  %249 = bitcast <8 x i16> %248 to <2 x i64>
  br label %250

250:                                              ; preds = %190, %181
  %251 = phi <8 x i16> [ %151, %181 ], [ %248, %190 ]
  %252 = phi <2 x i64> [ %150, %181 ], [ %249, %190 ]
  %253 = add nuw i64 %149, 16
  %254 = icmp slt i64 %253, %1
  br i1 %254, label %148, label %255

255:                                              ; preds = %250, %135
  %256 = phi <8 x i16> [ %140, %135 ], [ %251, %250 ]
  %257 = phi <2 x i64> [ %141, %135 ], [ %252, %250 ]
  %258 = bitcast <2 x i64> %257 to <4 x i32>
  %259 = shufflevector <4 x i32> %258, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 0>
  %260 = bitcast <4 x i32> %259 to <8 x i16>
  %261 = icmp sgt <8 x i16> %256, %260
  %262 = select <8 x i1> %261, <8 x i16> %256, <8 x i16> %260
  %263 = shufflevector <8 x i16> %262, <8 x i16> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 0, i32 4, i32 5, i32 6, i32 7>
  %264 = icmp sgt <8 x i16> %262, %263
  %265 = select <8 x i1> %264, <8 x i16> %262, <8 x i16> %263
  %266 = shufflevector <8 x i16> %265, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 0, i32 0, i32 4, i32 5, i32 6, i32 7>
  %267 = icmp sgt <8 x i16> %265, %266
  %268 = select <8 x i1> %267, <8 x i16> %265, <8 x i16> %266
  %269 = extractelement <8 x i16> %268, i64 1
  store i16 %269, i16* %9, align 2
  br label %270

270:                                              ; preds = %55, %255
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_quantize_b_32x32_avx(i32* nocapture readonly, i64, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i32* nocapture, i32* nocapture, i16* nocapture readonly, i16* nocapture, i16* nocapture readnone, i16* nocapture readonly) local_unnamed_addr #0 {
  %13 = bitcast i16* %2 to <8 x i16>*
  %14 = load <8 x i16>, <8 x i16>* %13, align 16
  %15 = add <8 x i16> %14, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %16 = lshr <8 x i16> %15, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %17 = add <8 x i16> %16, <i16 undef, i16 undef, i16 undef, i16 undef, i16 -1, i16 -1, i16 -1, i16 -1>
  %18 = bitcast <8 x i16> %17 to <2 x i64>
  %19 = bitcast i16* %3 to <8 x i16>*
  %20 = load <8 x i16>, <8 x i16>* %19, align 16
  %21 = add <8 x i16> %20, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %22 = lshr <8 x i16> %21, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %23 = bitcast <8 x i16> %22 to <2 x i64>
  %24 = bitcast i16* %4 to <2 x i64>*
  %25 = load <2 x i64>, <2 x i64>* %24, align 16
  %26 = bitcast i16* %8 to <2 x i64>*
  %27 = load <2 x i64>, <2 x i64>* %26, align 16
  %28 = bitcast i16* %5 to <2 x i64>*
  %29 = load <2 x i64>, <2 x i64>* %28, align 16
  %30 = bitcast i32* %0 to <4 x i32>*
  %31 = load <4 x i32>, <4 x i32>* %30, align 16
  %32 = getelementptr inbounds i32, i32* %0, i64 4
  %33 = bitcast i32* %32 to <4 x i32>*
  %34 = load <4 x i32>, <4 x i32>* %33, align 16
  %35 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %31, <4 x i32> %34) #3
  %36 = getelementptr inbounds i32, i32* %0, i64 8
  %37 = bitcast i32* %36 to <4 x i32>*
  %38 = load <4 x i32>, <4 x i32>* %37, align 16
  %39 = getelementptr inbounds i32, i32* %0, i64 12
  %40 = bitcast i32* %39 to <4 x i32>*
  %41 = load <4 x i32>, <4 x i32>* %40, align 16
  %42 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %38, <4 x i32> %41) #3
  %43 = sub <8 x i16> zeroinitializer, %35
  %44 = icmp slt <8 x i16> %35, zeroinitializer
  %45 = select <8 x i1> %44, <8 x i16> %43, <8 x i16> %35
  %46 = sub <8 x i16> zeroinitializer, %42
  %47 = icmp slt <8 x i16> %42, zeroinitializer
  %48 = select <8 x i1> %47, <8 x i16> %46, <8 x i16> %42
  %49 = icmp sge <8 x i16> %45, %16
  %50 = sext <8 x i1> %49 to <8 x i16>
  %51 = shufflevector <2 x i64> %18, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %52 = bitcast <2 x i64> %51 to <8 x i16>
  %53 = icmp sgt <8 x i16> %48, %52
  %54 = sext <8 x i1> %53 to <8 x i16>
  %55 = or <8 x i1> %53, %49
  %56 = sext <8 x i1> %55 to <8 x i16>
  %57 = bitcast <8 x i16> %56 to <2 x i64>
  %58 = tail call i32 @llvm.x86.sse41.ptestz(<2 x i64> %57, <2 x i64> %57) #3
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %71, label %60

60:                                               ; preds = %12
  %61 = bitcast i32* %6 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %61, align 32
  %62 = bitcast i32* %7 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %62, align 32
  %63 = getelementptr inbounds i32, i32* %6, i64 8
  %64 = bitcast i32* %63 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %64, align 32
  %65 = getelementptr inbounds i32, i32* %7, i64 8
  %66 = bitcast i32* %65 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %66, align 32
  %67 = shufflevector <2 x i64> %23, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %68 = shufflevector <2 x i64> %25, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %69 = shufflevector <2 x i64> %29, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %70 = shufflevector <2 x i64> %27, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  br label %175

71:                                               ; preds = %12
  %72 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %45, <8 x i16> %22) #3
  %73 = bitcast <2 x i64> %25 to <8 x i16>
  %74 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %72, <8 x i16> %73) #3
  %75 = add <8 x i16> %74, %72
  %76 = bitcast <2 x i64> %29 to <8 x i16>
  %77 = mul <8 x i16> %75, %76
  %78 = lshr <8 x i16> %77, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %79 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %75, <8 x i16> %76) #3
  %80 = shl <8 x i16> %79, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %81 = or <8 x i16> %78, %80
  %82 = shufflevector <2 x i64> %23, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %83 = shufflevector <2 x i64> %25, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %84 = shufflevector <2 x i64> %29, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %85 = bitcast <2 x i64> %82 to <8 x i16>
  %86 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %48, <8 x i16> %85) #3
  %87 = bitcast <2 x i64> %83 to <8 x i16>
  %88 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %86, <8 x i16> %87) #3
  %89 = add <8 x i16> %88, %86
  %90 = bitcast <2 x i64> %84 to <8 x i16>
  %91 = mul <8 x i16> %89, %90
  %92 = lshr <8 x i16> %91, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %93 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %89, <8 x i16> %90) #3
  %94 = shl <8 x i16> %93, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %95 = or <8 x i16> %92, %94
  %96 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %81, <8 x i16> %35) #3
  %97 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %95, <8 x i16> %42) #3
  %98 = and <8 x i16> %96, %50
  %99 = and <8 x i16> %97, %54
  %100 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %98, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %101 = shufflevector <8 x i16> %98, <8 x i16> %100, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %102 = shufflevector <8 x i16> %98, <8 x i16> %100, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %103 = bitcast i32* %6 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %103, align 16
  %104 = getelementptr inbounds i32, i32* %6, i64 4
  %105 = bitcast i32* %104 to <8 x i16>*
  store <8 x i16> %102, <8 x i16>* %105, align 16
  %106 = getelementptr inbounds i32, i32* %6, i64 8
  %107 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %99, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %108 = shufflevector <8 x i16> %99, <8 x i16> %107, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %109 = shufflevector <8 x i16> %99, <8 x i16> %107, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %110 = bitcast i32* %106 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %110, align 16
  %111 = getelementptr inbounds i32, i32* %6, i64 12
  %112 = bitcast i32* %111 to <8 x i16>*
  store <8 x i16> %109, <8 x i16>* %112, align 16
  %113 = ashr <8 x i16> %98, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %114 = xor <8 x i16> %113, %98
  %115 = sub <8 x i16> %114, %113
  %116 = shufflevector <8 x i16> %113, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %117 = shufflevector <8 x i16> %113, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %118 = bitcast <2 x i64> %27 to <8 x i16>
  %119 = mul <8 x i16> %115, %118
  %120 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %115, <8 x i16> %118) #3
  %121 = shufflevector <8 x i16> %119, <8 x i16> %120, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %122 = shufflevector <8 x i16> %119, <8 x i16> %120, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %123 = bitcast <8 x i16> %121 to <4 x i32>
  %124 = lshr <4 x i32> %123, <i32 1, i32 1, i32 1, i32 1>
  %125 = bitcast <8 x i16> %122 to <4 x i32>
  %126 = lshr <4 x i32> %125, <i32 1, i32 1, i32 1, i32 1>
  %127 = bitcast <8 x i16> %116 to <4 x i32>
  %128 = xor <4 x i32> %124, %127
  %129 = sub <4 x i32> %128, %127
  %130 = bitcast <8 x i16> %117 to <4 x i32>
  %131 = xor <4 x i32> %126, %130
  %132 = sub <4 x i32> %131, %130
  %133 = bitcast i32* %7 to <4 x i32>*
  store <4 x i32> %129, <4 x i32>* %133, align 16
  %134 = getelementptr inbounds i32, i32* %7, i64 4
  %135 = bitcast i32* %134 to <4 x i32>*
  store <4 x i32> %132, <4 x i32>* %135, align 16
  %136 = shufflevector <2 x i64> %27, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %137 = getelementptr inbounds i32, i32* %7, i64 8
  %138 = ashr <8 x i16> %99, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %139 = xor <8 x i16> %138, %99
  %140 = sub <8 x i16> %139, %138
  %141 = shufflevector <8 x i16> %138, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %142 = shufflevector <8 x i16> %138, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %143 = bitcast <2 x i64> %136 to <8 x i16>
  %144 = mul <8 x i16> %140, %143
  %145 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %140, <8 x i16> %143) #3
  %146 = shufflevector <8 x i16> %144, <8 x i16> %145, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %147 = shufflevector <8 x i16> %144, <8 x i16> %145, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %148 = bitcast <8 x i16> %146 to <4 x i32>
  %149 = lshr <4 x i32> %148, <i32 1, i32 1, i32 1, i32 1>
  %150 = bitcast <8 x i16> %147 to <4 x i32>
  %151 = lshr <4 x i32> %150, <i32 1, i32 1, i32 1, i32 1>
  %152 = bitcast <8 x i16> %141 to <4 x i32>
  %153 = xor <4 x i32> %149, %152
  %154 = sub <4 x i32> %153, %152
  %155 = bitcast <8 x i16> %142 to <4 x i32>
  %156 = xor <4 x i32> %151, %155
  %157 = sub <4 x i32> %156, %155
  %158 = bitcast i32* %137 to <4 x i32>*
  store <4 x i32> %154, <4 x i32>* %158, align 16
  %159 = getelementptr inbounds i32, i32* %7, i64 12
  %160 = bitcast i32* %159 to <4 x i32>*
  store <4 x i32> %157, <4 x i32>* %160, align 16
  %161 = icmp eq <8 x i16> %98, zeroinitializer
  %162 = icmp eq <8 x i16> %99, zeroinitializer
  %163 = bitcast i16* %11 to <8 x i16>*
  %164 = load <8 x i16>, <8 x i16>* %163, align 16
  %165 = getelementptr inbounds i16, i16* %11, i64 8
  %166 = bitcast i16* %165 to <8 x i16>*
  %167 = load <8 x i16>, <8 x i16>* %166, align 16
  %168 = sub <8 x i16> %164, %50
  %169 = sub <8 x i16> %167, %54
  %170 = select <8 x i1> %161, <8 x i16> zeroinitializer, <8 x i16> %168
  %171 = select <8 x i1> %162, <8 x i16> zeroinitializer, <8 x i16> %169
  %172 = icmp sgt <8 x i16> %170, %171
  %173 = select <8 x i1> %172, <8 x i16> %170, <8 x i16> %171
  %174 = bitcast <8 x i16> %173 to <2 x i64>
  br label %175

175:                                              ; preds = %71, %60
  %176 = phi <2 x i64> [ %84, %71 ], [ %69, %60 ]
  %177 = phi <2 x i64> [ %82, %71 ], [ %67, %60 ]
  %178 = phi <2 x i64> [ %83, %71 ], [ %68, %60 ]
  %179 = phi <2 x i64> [ %136, %71 ], [ %70, %60 ]
  %180 = phi <8 x i16> [ %173, %71 ], [ zeroinitializer, %60 ]
  %181 = phi <2 x i64> [ %174, %71 ], [ zeroinitializer, %60 ]
  %182 = icmp sgt i64 %1, 16
  br i1 %182, label %183, label %333

183:                                              ; preds = %175
  %184 = bitcast <2 x i64> %177 to <8 x i16>
  %185 = bitcast <2 x i64> %178 to <8 x i16>
  %186 = bitcast <2 x i64> %176 to <8 x i16>
  %187 = bitcast <2 x i64> %179 to <8 x i16>
  br label %188

188:                                              ; preds = %183, %328
  %189 = phi i64 [ 16, %183 ], [ %331, %328 ]
  %190 = phi <2 x i64> [ %181, %183 ], [ %330, %328 ]
  %191 = phi <8 x i16> [ %180, %183 ], [ %329, %328 ]
  %192 = getelementptr inbounds i32, i32* %0, i64 %189
  %193 = bitcast i32* %192 to <4 x i32>*
  %194 = load <4 x i32>, <4 x i32>* %193, align 16
  %195 = getelementptr inbounds i32, i32* %192, i64 4
  %196 = bitcast i32* %195 to <4 x i32>*
  %197 = load <4 x i32>, <4 x i32>* %196, align 16
  %198 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %194, <4 x i32> %197) #3
  %199 = getelementptr inbounds i32, i32* %192, i64 8
  %200 = bitcast i32* %199 to <4 x i32>*
  %201 = load <4 x i32>, <4 x i32>* %200, align 16
  %202 = getelementptr inbounds i32, i32* %199, i64 4
  %203 = bitcast i32* %202 to <4 x i32>*
  %204 = load <4 x i32>, <4 x i32>* %203, align 16
  %205 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %201, <4 x i32> %204) #3
  %206 = sub <8 x i16> zeroinitializer, %198
  %207 = icmp slt <8 x i16> %198, zeroinitializer
  %208 = select <8 x i1> %207, <8 x i16> %206, <8 x i16> %198
  %209 = sub <8 x i16> zeroinitializer, %205
  %210 = icmp slt <8 x i16> %205, zeroinitializer
  %211 = select <8 x i1> %210, <8 x i16> %209, <8 x i16> %205
  %212 = icmp sgt <8 x i16> %208, %52
  %213 = sext <8 x i1> %212 to <8 x i16>
  %214 = icmp sgt <8 x i16> %211, %52
  %215 = sext <8 x i1> %214 to <8 x i16>
  %216 = or <8 x i1> %214, %212
  %217 = sext <8 x i1> %216 to <8 x i16>
  %218 = bitcast <8 x i16> %217 to <2 x i64>
  %219 = tail call i32 @llvm.x86.sse41.ptestz(<2 x i64> %218, <2 x i64> %218) #3
  %220 = icmp eq i32 %219, 0
  br i1 %220, label %230, label %221

221:                                              ; preds = %188
  %222 = getelementptr inbounds i32, i32* %6, i64 %189
  %223 = bitcast i32* %222 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %223, align 32
  %224 = getelementptr inbounds i32, i32* %7, i64 %189
  %225 = bitcast i32* %224 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %225, align 32
  %226 = getelementptr inbounds i32, i32* %222, i64 8
  %227 = bitcast i32* %226 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %227, align 32
  %228 = getelementptr inbounds i32, i32* %224, i64 8
  %229 = bitcast i32* %228 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %229, align 32
  br label %328

230:                                              ; preds = %188
  %231 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %208, <8 x i16> %184) #3
  %232 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %231, <8 x i16> %185) #3
  %233 = add <8 x i16> %232, %231
  %234 = mul <8 x i16> %233, %186
  %235 = lshr <8 x i16> %234, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %236 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %233, <8 x i16> %186) #3
  %237 = shl <8 x i16> %236, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %238 = or <8 x i16> %235, %237
  %239 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %211, <8 x i16> %184) #3
  %240 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %239, <8 x i16> %185) #3
  %241 = add <8 x i16> %240, %239
  %242 = mul <8 x i16> %241, %186
  %243 = lshr <8 x i16> %242, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %244 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %241, <8 x i16> %186) #3
  %245 = shl <8 x i16> %244, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %246 = or <8 x i16> %243, %245
  %247 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %238, <8 x i16> %198) #3
  %248 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %246, <8 x i16> %205) #3
  %249 = and <8 x i16> %247, %213
  %250 = and <8 x i16> %248, %215
  %251 = getelementptr inbounds i32, i32* %6, i64 %189
  %252 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %249, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %253 = shufflevector <8 x i16> %249, <8 x i16> %252, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %254 = shufflevector <8 x i16> %249, <8 x i16> %252, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %255 = bitcast i32* %251 to <8 x i16>*
  store <8 x i16> %253, <8 x i16>* %255, align 16
  %256 = getelementptr inbounds i32, i32* %251, i64 4
  %257 = bitcast i32* %256 to <8 x i16>*
  store <8 x i16> %254, <8 x i16>* %257, align 16
  %258 = getelementptr inbounds i32, i32* %251, i64 8
  %259 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %250, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %260 = shufflevector <8 x i16> %250, <8 x i16> %259, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %261 = shufflevector <8 x i16> %250, <8 x i16> %259, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %262 = bitcast i32* %258 to <8 x i16>*
  store <8 x i16> %260, <8 x i16>* %262, align 16
  %263 = getelementptr inbounds i32, i32* %258, i64 4
  %264 = bitcast i32* %263 to <8 x i16>*
  store <8 x i16> %261, <8 x i16>* %264, align 16
  %265 = getelementptr inbounds i32, i32* %7, i64 %189
  %266 = ashr <8 x i16> %249, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %267 = xor <8 x i16> %266, %249
  %268 = sub <8 x i16> %267, %266
  %269 = shufflevector <8 x i16> %266, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %270 = shufflevector <8 x i16> %266, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %271 = mul <8 x i16> %268, %187
  %272 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %268, <8 x i16> %187) #3
  %273 = shufflevector <8 x i16> %271, <8 x i16> %272, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %274 = shufflevector <8 x i16> %271, <8 x i16> %272, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %275 = bitcast <8 x i16> %273 to <4 x i32>
  %276 = lshr <4 x i32> %275, <i32 1, i32 1, i32 1, i32 1>
  %277 = bitcast <8 x i16> %274 to <4 x i32>
  %278 = lshr <4 x i32> %277, <i32 1, i32 1, i32 1, i32 1>
  %279 = bitcast <8 x i16> %269 to <4 x i32>
  %280 = xor <4 x i32> %276, %279
  %281 = sub <4 x i32> %280, %279
  %282 = bitcast <8 x i16> %270 to <4 x i32>
  %283 = xor <4 x i32> %278, %282
  %284 = sub <4 x i32> %283, %282
  %285 = bitcast i32* %265 to <4 x i32>*
  store <4 x i32> %281, <4 x i32>* %285, align 16
  %286 = getelementptr inbounds i32, i32* %265, i64 4
  %287 = bitcast i32* %286 to <4 x i32>*
  store <4 x i32> %284, <4 x i32>* %287, align 16
  %288 = getelementptr inbounds i32, i32* %265, i64 8
  %289 = ashr <8 x i16> %250, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %290 = xor <8 x i16> %289, %250
  %291 = sub <8 x i16> %290, %289
  %292 = shufflevector <8 x i16> %289, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %293 = shufflevector <8 x i16> %289, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %294 = mul <8 x i16> %291, %187
  %295 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %291, <8 x i16> %187) #3
  %296 = shufflevector <8 x i16> %294, <8 x i16> %295, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %297 = shufflevector <8 x i16> %294, <8 x i16> %295, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %298 = bitcast <8 x i16> %296 to <4 x i32>
  %299 = lshr <4 x i32> %298, <i32 1, i32 1, i32 1, i32 1>
  %300 = bitcast <8 x i16> %297 to <4 x i32>
  %301 = lshr <4 x i32> %300, <i32 1, i32 1, i32 1, i32 1>
  %302 = bitcast <8 x i16> %292 to <4 x i32>
  %303 = xor <4 x i32> %299, %302
  %304 = sub <4 x i32> %303, %302
  %305 = bitcast <8 x i16> %293 to <4 x i32>
  %306 = xor <4 x i32> %301, %305
  %307 = sub <4 x i32> %306, %305
  %308 = bitcast i32* %288 to <4 x i32>*
  store <4 x i32> %304, <4 x i32>* %308, align 16
  %309 = getelementptr inbounds i32, i32* %288, i64 4
  %310 = bitcast i32* %309 to <4 x i32>*
  store <4 x i32> %307, <4 x i32>* %310, align 16
  %311 = icmp eq <8 x i16> %249, zeroinitializer
  %312 = icmp eq <8 x i16> %250, zeroinitializer
  %313 = getelementptr inbounds i16, i16* %11, i64 %189
  %314 = bitcast i16* %313 to <8 x i16>*
  %315 = load <8 x i16>, <8 x i16>* %314, align 16
  %316 = getelementptr inbounds i16, i16* %313, i64 8
  %317 = bitcast i16* %316 to <8 x i16>*
  %318 = load <8 x i16>, <8 x i16>* %317, align 16
  %319 = sub <8 x i16> %315, %213
  %320 = sub <8 x i16> %318, %215
  %321 = select <8 x i1> %311, <8 x i16> zeroinitializer, <8 x i16> %319
  %322 = select <8 x i1> %312, <8 x i16> zeroinitializer, <8 x i16> %320
  %323 = icmp sgt <8 x i16> %321, %322
  %324 = select <8 x i1> %323, <8 x i16> %321, <8 x i16> %322
  %325 = icmp sgt <8 x i16> %191, %324
  %326 = select <8 x i1> %325, <8 x i16> %191, <8 x i16> %324
  %327 = bitcast <8 x i16> %326 to <2 x i64>
  br label %328

328:                                              ; preds = %230, %221
  %329 = phi <8 x i16> [ %191, %221 ], [ %326, %230 ]
  %330 = phi <2 x i64> [ %190, %221 ], [ %327, %230 ]
  %331 = add nuw i64 %189, 16
  %332 = icmp slt i64 %331, %1
  br i1 %332, label %188, label %333

333:                                              ; preds = %328, %175
  %334 = phi <8 x i16> [ %180, %175 ], [ %329, %328 ]
  %335 = phi <2 x i64> [ %181, %175 ], [ %330, %328 ]
  %336 = bitcast <2 x i64> %335 to <4 x i32>
  %337 = shufflevector <4 x i32> %336, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 0>
  %338 = bitcast <4 x i32> %337 to <8 x i16>
  %339 = icmp sgt <8 x i16> %334, %338
  %340 = select <8 x i1> %339, <8 x i16> %334, <8 x i16> %338
  %341 = shufflevector <8 x i16> %340, <8 x i16> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 0, i32 4, i32 5, i32 6, i32 7>
  %342 = icmp sgt <8 x i16> %340, %341
  %343 = select <8 x i1> %342, <8 x i16> %340, <8 x i16> %341
  %344 = shufflevector <8 x i16> %343, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 0, i32 0, i32 4, i32 5, i32 6, i32 7>
  %345 = icmp sgt <8 x i16> %343, %344
  %346 = select <8 x i1> %345, <8 x i16> %343, <8 x i16> %344
  %347 = extractelement <8 x i16> %346, i64 1
  store i16 %347, i16* %9, align 2
  ret void
}

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #1

; Function Attrs: nounwind readnone
declare i32 @llvm.x86.sse41.ptestz(<2 x i64>, <2 x i64>) #1

; Function Attrs: nounwind readnone speculatable
declare <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16>, <8 x i16>) #2

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16>, <8 x i16>) #1

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16>, <8 x i16>) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
