; ModuleID = '../../third_party/blink/common/widget/device_emulation_params_mojom_traits.cc'
source_filename = "../../third_party/blink/common/widget/device_emulation_params_mojom_traits.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::mojom::internal::DeviceEmulationParams_Data" = type { %"struct.mojo::internal::StructHeader", i32, float, %"struct.mojo::internal::Pointer", %"struct.mojo::internal::Pointer.0", %"struct.mojo::internal::Pointer", float, float, %"struct.mojo::internal::Pointer.1", i32, i32, %"struct.mojo::internal::Pointer.2" }
%"struct.mojo::internal::StructHeader" = type { i32, i32 }
%"struct.mojo::internal::Pointer.0" = type { i64 }
%"struct.mojo::internal::Pointer" = type { i64 }
%"struct.mojo::internal::Pointer.1" = type { i64 }
%"struct.mojo::internal::Pointer.2" = type { i64 }
%"class.mojo::Message" = type { %"class.mojo::ScopedHandleBase", %"class.mojo::internal::Buffer", %"class.std::__1::vector", %"class.std::__1::vector.5", %"class.mojo::ConnectionGroup::Ref"*, i8, i8, i8* }
%"class.mojo::ScopedHandleBase" = type { %"class.mojo::MessageHandle" }
%"class.mojo::MessageHandle" = type { i64 }
%"class.mojo::internal::Buffer" = type { %"class.mojo::MessageHandle", i64, i8*, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.mojo::ScopedHandleBase.3"*, %"class.mojo::ScopedHandleBase.3"*, %"class.std::__1::__compressed_pair" }
%"class.mojo::ScopedHandleBase.3" = type { %"class.mojo::Handle" }
%"class.mojo::Handle" = type { i32 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.mojo::ScopedHandleBase.3"* }
%"class.std::__1::vector.5" = type { %"class.std::__1::__vector_base.6" }
%"class.std::__1::__vector_base.6" = type { %"class.mojo::ScopedInterfaceEndpointHandle"*, %"class.mojo::ScopedInterfaceEndpointHandle"*, %"class.std::__1::__compressed_pair.7" }
%"class.mojo::ScopedInterfaceEndpointHandle" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.mojo::ScopedInterfaceEndpointHandle::State"* }
%"class.mojo::ScopedInterfaceEndpointHandle::State" = type opaque
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"class.mojo::ScopedInterfaceEndpointHandle"* }
%"class.mojo::ConnectionGroup::Ref" = type { i32, %class.scoped_refptr.12 }
%class.scoped_refptr.12 = type { %"class.mojo::ConnectionGroup"* }
%"class.mojo::ConnectionGroup" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", [4 x i8], %"class.base::RepeatingCallback", %class.scoped_refptr.16, %"class.mojo::ConnectionGroup::Ref", %"struct.std::__1::atomic.18", [4 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.13" }
%"struct.std::__1::__atomic_base.13" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.14 }
%class.scoped_refptr.14 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.15", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.15" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%class.scoped_refptr.16 = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.17" }>
%"class.base::RefCountedThreadSafe.17" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"struct.std::__1::atomic.18" = type { %"struct.std::__1::__atomic_base.19" }
%"struct.std::__1::__atomic_base.19" = type { %"struct.std::__1::__atomic_base.20" }
%"struct.std::__1::__atomic_base.20" = type { %"struct.std::__1::__cxx_atomic_impl.21" }
%"struct.std::__1::__cxx_atomic_impl.21" = type { %"struct.std::__1::__cxx_atomic_base_impl.22" }
%"struct.std::__1::__cxx_atomic_base_impl.22" = type { i32 }
%"struct.blink::DeviceEmulationParams" = type { i32, %"class.gfx::Size", %"class.absl::optional", %"class.gfx::Size", float, float, %"class.gfx::PointF", float, i32, i32, %"class.std::__1::vector.23" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.gfx::Point" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%"class.gfx::PointF" = type { float, float }
%"class.std::__1::vector.23" = type { %"class.std::__1::__vector_base.24" }
%"class.std::__1::__vector_base.24" = type { %"class.gfx::Rect"*, %"class.gfx::Rect"*, %"class.std::__1::__compressed_pair.25" }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"class.gfx::Rect"* }
%"class.mojo::internal::Array_Data" = type { %"struct.mojo::internal::ArrayHeader" }
%"struct.mojo::internal::ArrayHeader" = type { i32, i32 }

$_ZN4mojo8internal15ArraySerializerINS_13ArrayDataViewIN3gfx5mojom12RectDataViewEEENSt3__16vectorINS3_4RectENS7_9allocatorIS9_EEEENS0_13ArrayIteratorINS_11ArrayTraitsISC_EESC_Lb0EEEvE19DeserializeElementsEPNS0_10Array_DataINS0_7PointerINS4_8internal9Rect_DataEEEEEPSC_PNS_7MessageE = comdat any

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4mojo12StructTraitsIN5blink5mojom29DeviceEmulationParamsDataViewENS1_21DeviceEmulationParamsEE4ReadES3_PS4_(%"class.blink::mojom::internal::DeviceEmulationParams_Data"*, %"class.mojo::Message"*, %"struct.blink::DeviceEmulationParams"*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::mojom::internal::DeviceEmulationParams_Data", %"class.blink::mojom::internal::DeviceEmulationParams_Data"* %0, i64 0, i32 3
  %5 = getelementptr inbounds %"struct.mojo::internal::Pointer", %"struct.mojo::internal::Pointer"* %4, i64 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %6, 0
  %8 = bitcast %"struct.mojo::internal::Pointer"* %4 to i8*
  %9 = getelementptr inbounds i8, i8* %8, i64 %6
  br i1 %7, label %25, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds i8, i8* %9, i64 8
  %12 = bitcast i8* %11 to i32*
  %13 = load i32, i32* %12, align 1
  %14 = icmp slt i32 %13, 0
  br i1 %14, label %130, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds i8, i8* %9, i64 12
  %17 = bitcast i8* %16 to i32*
  %18 = load i32, i32* %17, align 1
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %130, label %20

20:                                               ; preds = %15
  %21 = icmp sgt i32 %13, 0
  %22 = select i1 %21, i32 %13, i32 0
  %23 = getelementptr inbounds %"struct.blink::DeviceEmulationParams", %"struct.blink::DeviceEmulationParams"* %2, i64 0, i32 1, i32 0
  store i32 %22, i32* %23, align 4
  %24 = getelementptr inbounds %"struct.blink::DeviceEmulationParams", %"struct.blink::DeviceEmulationParams"* %2, i64 0, i32 1, i32 1
  store i32 %18, i32* %24, align 4
  br label %25

25:                                               ; preds = %3, %20
  %26 = getelementptr inbounds %"class.blink::mojom::internal::DeviceEmulationParams_Data", %"class.blink::mojom::internal::DeviceEmulationParams_Data"* %0, i64 0, i32 4
  %27 = getelementptr inbounds %"struct.mojo::internal::Pointer.0", %"struct.mojo::internal::Pointer.0"* %26, i64 0, i32 0
  %28 = load i64, i64* %27, align 8
  %29 = icmp eq i64 %28, 0
  %30 = bitcast %"struct.mojo::internal::Pointer.0"* %26 to i8*
  %31 = getelementptr inbounds i8, i8* %30, i64 %28
  %32 = getelementptr inbounds %"struct.blink::DeviceEmulationParams", %"struct.blink::DeviceEmulationParams"* %2, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  br i1 %29, label %33, label %34

33:                                               ; preds = %25
  store i8 0, i8* %32, align 4
  br label %49

34:                                               ; preds = %25
  %35 = load i8, i8* %32, align 4, !range !2
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %37, label %40

37:                                               ; preds = %34
  %38 = getelementptr inbounds %"struct.blink::DeviceEmulationParams", %"struct.blink::DeviceEmulationParams"* %2, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store i32 0, i32* %38, align 4
  %39 = getelementptr inbounds %"struct.blink::DeviceEmulationParams", %"struct.blink::DeviceEmulationParams"* %2, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  store i32 0, i32* %39, align 4
  store i8 1, i8* %32, align 4
  br label %40

40:                                               ; preds = %37, %34
  %41 = getelementptr inbounds i8, i8* %31, i64 8
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr inbounds i8, i8* %31, i64 12
  %45 = bitcast i8* %44 to i32*
  %46 = load i32, i32* %45, align 1
  %47 = getelementptr inbounds %"struct.blink::DeviceEmulationParams", %"struct.blink::DeviceEmulationParams"* %2, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store i32 %43, i32* %47, align 4
  %48 = getelementptr inbounds %"struct.blink::DeviceEmulationParams", %"struct.blink::DeviceEmulationParams"* %2, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  store i32 %46, i32* %48, align 4
  br label %49

49:                                               ; preds = %40, %33
  %50 = getelementptr inbounds %"class.blink::mojom::internal::DeviceEmulationParams_Data", %"class.blink::mojom::internal::DeviceEmulationParams_Data"* %0, i64 0, i32 5
  %51 = getelementptr inbounds %"struct.mojo::internal::Pointer", %"struct.mojo::internal::Pointer"* %50, i64 0, i32 0
  %52 = load i64, i64* %51, align 8
  %53 = icmp eq i64 %52, 0
  %54 = bitcast %"struct.mojo::internal::Pointer"* %50 to i8*
  %55 = getelementptr inbounds i8, i8* %54, i64 %52
  br i1 %53, label %71, label %56

56:                                               ; preds = %49
  %57 = getelementptr inbounds i8, i8* %55, i64 8
  %58 = bitcast i8* %57 to i32*
  %59 = load i32, i32* %58, align 1
  %60 = icmp slt i32 %59, 0
  br i1 %60, label %130, label %61

61:                                               ; preds = %56
  %62 = getelementptr inbounds i8, i8* %55, i64 12
  %63 = bitcast i8* %62 to i32*
  %64 = load i32, i32* %63, align 1
  %65 = icmp slt i32 %64, 0
  br i1 %65, label %130, label %66

66:                                               ; preds = %61
  %67 = icmp sgt i32 %59, 0
  %68 = select i1 %67, i32 %59, i32 0
  %69 = getelementptr inbounds %"struct.blink::DeviceEmulationParams", %"struct.blink::DeviceEmulationParams"* %2, i64 0, i32 3, i32 0
  store i32 %68, i32* %69, align 4
  %70 = getelementptr inbounds %"struct.blink::DeviceEmulationParams", %"struct.blink::DeviceEmulationParams"* %2, i64 0, i32 3, i32 1
  store i32 %64, i32* %70, align 4
  br label %71

71:                                               ; preds = %49, %66
  %72 = getelementptr inbounds %"class.blink::mojom::internal::DeviceEmulationParams_Data", %"class.blink::mojom::internal::DeviceEmulationParams_Data"* %0, i64 0, i32 8
  %73 = getelementptr inbounds %"struct.mojo::internal::Pointer.1", %"struct.mojo::internal::Pointer.1"* %72, i64 0, i32 0
  %74 = load i64, i64* %73, align 8
  %75 = icmp eq i64 %74, 0
  %76 = bitcast %"struct.mojo::internal::Pointer.1"* %72 to i8*
  %77 = getelementptr inbounds i8, i8* %76, i64 %74
  br i1 %75, label %89, label %78

78:                                               ; preds = %71
  %79 = getelementptr inbounds %"struct.blink::DeviceEmulationParams", %"struct.blink::DeviceEmulationParams"* %2, i64 0, i32 6
  %80 = getelementptr inbounds i8, i8* %77, i64 8
  %81 = bitcast i8* %80 to i32*
  %82 = load i32, i32* %81, align 1
  %83 = getelementptr inbounds i8, i8* %77, i64 12
  %84 = bitcast i8* %83 to i32*
  %85 = load i32, i32* %84, align 1
  %86 = bitcast %"class.gfx::PointF"* %79 to i32*
  store i32 %82, i32* %86, align 4
  %87 = getelementptr inbounds %"struct.blink::DeviceEmulationParams", %"struct.blink::DeviceEmulationParams"* %2, i64 0, i32 6, i32 1
  %88 = bitcast float* %87 to i32*
  store i32 %85, i32* %88, align 4
  br label %89

89:                                               ; preds = %78, %71
  %90 = getelementptr inbounds %"struct.blink::DeviceEmulationParams", %"struct.blink::DeviceEmulationParams"* %2, i64 0, i32 10
  %91 = getelementptr inbounds %"class.blink::mojom::internal::DeviceEmulationParams_Data", %"class.blink::mojom::internal::DeviceEmulationParams_Data"* %0, i64 0, i32 11
  %92 = getelementptr inbounds %"struct.mojo::internal::Pointer.2", %"struct.mojo::internal::Pointer.2"* %91, i64 0, i32 0
  %93 = load i64, i64* %92, align 8
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %95, label %100

95:                                               ; preds = %89
  %96 = bitcast %"class.std::__1::vector.23"* %90 to i64*
  %97 = load i64, i64* %96, align 8
  %98 = getelementptr inbounds %"struct.blink::DeviceEmulationParams", %"struct.blink::DeviceEmulationParams"* %2, i64 0, i32 10, i32 0, i32 1
  %99 = bitcast %"class.gfx::Rect"** %98 to i64*
  store i64 %97, i64* %99, align 8
  br label %105

100:                                              ; preds = %89
  %101 = bitcast %"struct.mojo::internal::Pointer.2"* %91 to i8*
  %102 = getelementptr inbounds i8, i8* %101, i64 %93
  %103 = bitcast i8* %102 to %"class.mojo::internal::Array_Data"*
  %104 = tail call zeroext i1 @_ZN4mojo8internal15ArraySerializerINS_13ArrayDataViewIN3gfx5mojom12RectDataViewEEENSt3__16vectorINS3_4RectENS7_9allocatorIS9_EEEENS0_13ArrayIteratorINS_11ArrayTraitsISC_EESC_Lb0EEEvE19DeserializeElementsEPNS0_10Array_DataINS0_7PointerINS4_8internal9Rect_DataEEEEEPSC_PNS_7MessageE(%"class.mojo::internal::Array_Data"* nonnull %103, %"class.std::__1::vector.23"* %90, %"class.mojo::Message"* %1) #4
  br i1 %104, label %105, label %130

105:                                              ; preds = %95, %100
  %106 = getelementptr inbounds %"class.blink::mojom::internal::DeviceEmulationParams_Data", %"class.blink::mojom::internal::DeviceEmulationParams_Data"* %0, i64 0, i32 1
  %107 = load i32, i32* %106, align 1
  %108 = getelementptr inbounds %"struct.blink::DeviceEmulationParams", %"struct.blink::DeviceEmulationParams"* %2, i64 0, i32 0
  store i32 %107, i32* %108, align 8
  %109 = getelementptr inbounds %"class.blink::mojom::internal::DeviceEmulationParams_Data", %"class.blink::mojom::internal::DeviceEmulationParams_Data"* %0, i64 0, i32 2
  %110 = bitcast float* %109 to i32*
  %111 = load i32, i32* %110, align 1
  %112 = getelementptr inbounds %"struct.blink::DeviceEmulationParams", %"struct.blink::DeviceEmulationParams"* %2, i64 0, i32 4
  %113 = bitcast float* %112 to i32*
  store i32 %111, i32* %113, align 8
  %114 = getelementptr inbounds %"class.blink::mojom::internal::DeviceEmulationParams_Data", %"class.blink::mojom::internal::DeviceEmulationParams_Data"* %0, i64 0, i32 6
  %115 = bitcast float* %114 to i32*
  %116 = load i32, i32* %115, align 1
  %117 = getelementptr inbounds %"struct.blink::DeviceEmulationParams", %"struct.blink::DeviceEmulationParams"* %2, i64 0, i32 5
  %118 = bitcast float* %117 to i32*
  store i32 %116, i32* %118, align 4
  %119 = getelementptr inbounds %"class.blink::mojom::internal::DeviceEmulationParams_Data", %"class.blink::mojom::internal::DeviceEmulationParams_Data"* %0, i64 0, i32 7
  %120 = bitcast float* %119 to i32*
  %121 = load i32, i32* %120, align 1
  %122 = getelementptr inbounds %"struct.blink::DeviceEmulationParams", %"struct.blink::DeviceEmulationParams"* %2, i64 0, i32 7
  %123 = bitcast float* %122 to i32*
  store i32 %121, i32* %123, align 8
  %124 = getelementptr inbounds %"class.blink::mojom::internal::DeviceEmulationParams_Data", %"class.blink::mojom::internal::DeviceEmulationParams_Data"* %0, i64 0, i32 9
  %125 = load i32, i32* %124, align 1
  %126 = getelementptr inbounds %"struct.blink::DeviceEmulationParams", %"struct.blink::DeviceEmulationParams"* %2, i64 0, i32 8
  store i32 %125, i32* %126, align 4
  %127 = getelementptr inbounds %"class.blink::mojom::internal::DeviceEmulationParams_Data", %"class.blink::mojom::internal::DeviceEmulationParams_Data"* %0, i64 0, i32 10
  %128 = load i32, i32* %127, align 1
  %129 = getelementptr inbounds %"struct.blink::DeviceEmulationParams", %"struct.blink::DeviceEmulationParams"* %2, i64 0, i32 9
  store i32 %128, i32* %129, align 8
  br label %130

130:                                              ; preds = %61, %56, %15, %10, %100, %105
  %131 = phi i1 [ true, %105 ], [ false, %100 ], [ false, %10 ], [ false, %15 ], [ false, %56 ], [ false, %61 ]
  ret i1 %131
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN4mojo8internal15ArraySerializerINS_13ArrayDataViewIN3gfx5mojom12RectDataViewEEENSt3__16vectorINS3_4RectENS7_9allocatorIS9_EEEENS0_13ArrayIteratorINS_11ArrayTraitsISC_EESC_Lb0EEEvE19DeserializeElementsEPNS0_10Array_DataINS0_7PointerINS4_8internal9Rect_DataEEEEEPSC_PNS_7MessageE(%"class.mojo::internal::Array_Data"*, %"class.std::__1::vector.23"*, %"class.mojo::Message"*) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.mojo::internal::Array_Data", %"class.mojo::internal::Array_Data"* %0, i64 0, i32 0, i32 1
  %5 = load i32, i32* %4, align 1
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %1, i64 0, i32 0, i32 1
  %8 = bitcast %"class.gfx::Rect"** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.std::__1::vector.23"* %1 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %9, %11
  %13 = ashr exact i64 %12, 4
  %14 = icmp eq i64 %13, %6
  br i1 %14, label %38, label %15

15:                                               ; preds = %3
  %16 = icmp eq i32 %5, 0
  br i1 %16, label %30, label %17

17:                                               ; preds = %15
  %18 = shl nuw nsw i64 %6, 4
  %19 = tail call i8* @_Znwm(i64 %18) #5
  %20 = bitcast i8* %19 to %"class.gfx::Rect"*
  %21 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %20, i64 %6
  %22 = ptrtoint i8* %19 to i64
  %23 = add nsw i64 %6, -1
  %24 = getelementptr %"class.gfx::Rect", %"class.gfx::Rect"* %20, i64 %23, i32 0, i32 0
  %25 = ptrtoint i32* %24 to i64
  %26 = sub i64 16, %22
  %27 = add i64 %26, %25
  %28 = and i64 %27, -16
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %19, i8 0, i64 %28, i1 false) #4
  %29 = ptrtoint %"class.gfx::Rect"* %21 to i64
  br label %30

30:                                               ; preds = %15, %17
  %31 = phi i64 [ %29, %17 ], [ 0, %15 ]
  %32 = phi i64 [ %22, %17 ], [ 0, %15 ]
  store i64 %32, i64* %10, align 8
  store i64 %31, i64* %8, align 8
  %33 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %34 = bitcast %"class.gfx::Rect"** %33 to i64*
  store i64 %31, i64* %34, align 8
  %35 = icmp eq i64 %11, 0
  br i1 %35, label %38, label %36

36:                                               ; preds = %30
  %37 = inttoptr i64 %11 to i8*
  tail call void @_ZdlPv(i8* %37) #5
  br label %38

38:                                               ; preds = %3, %36, %30
  %39 = getelementptr inbounds %"class.mojo::internal::Array_Data", %"class.mojo::internal::Array_Data"* %0, i64 1
  %40 = load i32, i32* %4, align 1
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %99, label %42

42:                                               ; preds = %38
  %43 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %1, i64 0, i32 0, i32 0
  br label %44

44:                                               ; preds = %42, %95
  %45 = phi i32 [ %40, %42 ], [ %96, %95 ]
  %46 = phi i64 [ 0, %42 ], [ %53, %95 ]
  %47 = getelementptr inbounds %"class.mojo::internal::Array_Data", %"class.mojo::internal::Array_Data"* %39, i64 %46
  %48 = bitcast %"class.mojo::internal::Array_Data"* %47 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = icmp eq i64 %49, 0
  %51 = bitcast %"class.mojo::internal::Array_Data"* %47 to i8*
  %52 = getelementptr inbounds i8, i8* %51, i64 %49
  %53 = add nuw nsw i64 %46, 1
  %54 = load %"class.gfx::Rect"*, %"class.gfx::Rect"** %43, align 8
  %55 = icmp eq i8* %52, null
  %56 = or i1 %50, %55
  br i1 %56, label %95, label %57

57:                                               ; preds = %44
  %58 = getelementptr inbounds i8, i8* %52, i64 16
  %59 = bitcast i8* %58 to i32*
  %60 = load i32, i32* %59, align 1
  %61 = icmp slt i32 %60, 0
  br i1 %61, label %99, label %62

62:                                               ; preds = %57
  %63 = getelementptr inbounds i8, i8* %52, i64 20
  %64 = bitcast i8* %63 to i32*
  %65 = load i32, i32* %64, align 1
  %66 = icmp slt i32 %65, 0
  br i1 %66, label %99, label %67

67:                                               ; preds = %62
  %68 = getelementptr inbounds i8, i8* %52, i64 8
  %69 = bitcast i8* %68 to i32*
  %70 = load i32, i32* %69, align 1
  %71 = getelementptr inbounds i8, i8* %52, i64 12
  %72 = bitcast i8* %71 to i32*
  %73 = load i32, i32* %72, align 1
  %74 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %54, i64 %46, i32 0, i32 0
  store i32 %70, i32* %74, align 4
  %75 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %54, i64 %46, i32 0, i32 1
  store i32 %73, i32* %75, align 4
  %76 = icmp sgt i32 %70, 0
  %77 = icmp sgt i32 %60, 0
  %78 = and i1 %77, %76
  %79 = sub nuw nsw i32 2147483647, %70
  %80 = icmp ult i32 %79, %60
  %81 = and i1 %80, %78
  %82 = select i1 %81, i32 %79, i32 %60
  %83 = icmp sgt i32 %82, 0
  %84 = select i1 %83, i32 %82, i32 0
  %85 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %54, i64 %46, i32 1, i32 0
  store i32 %84, i32* %85, align 4
  %86 = icmp sgt i32 %73, 0
  %87 = sub nuw nsw i32 2147483647, %73
  %88 = icmp ult i32 %87, %65
  %89 = and i1 %86, %88
  %90 = select i1 %89, i32 %87, i32 %65
  %91 = icmp sgt i32 %90, 0
  %92 = select i1 %91, i32 %90, i32 0
  %93 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %54, i64 %46, i32 1, i32 1
  store i32 %92, i32* %93, align 4
  %94 = load i32, i32* %4, align 1
  br label %95

95:                                               ; preds = %44, %67
  %96 = phi i32 [ %45, %44 ], [ %94, %67 ]
  %97 = zext i32 %96 to i64
  %98 = icmp ult i64 %53, %97
  br i1 %98, label %44, label %99

99:                                               ; preds = %95, %57, %62, %38
  %100 = phi i1 [ true, %38 ], [ false, %62 ], [ false, %57 ], [ true, %95 ]
  ret i1 %100
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
