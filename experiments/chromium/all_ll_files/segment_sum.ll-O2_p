; ModuleID = '../../third_party/tflite/src/tensorflow/lite/kernels/segment_sum.cc'
source_filename = "../../third_party/tflite/src/tensorflow/lite/kernels/segment_sum.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.TfLiteRegistration = type { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }
%struct.TfLiteContext = type { i64, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray**)*, %struct.TfLiteTensor*, i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, void (%struct.TfLiteContext*, i8*, ...)*, i32 (%struct.TfLiteContext*, i32, i32*)*, i32 (%struct.TfLiteContext*, i32, %struct.TfLiteNode**, %struct.TfLiteRegistration**)*, i32 (%struct.TfLiteContext*, %struct.TfLiteRegistration*, %struct.TfLiteIntArray*, %struct.TfLiteDelegate*)*, i32, %struct.TfLiteExternalContext* (%struct.TfLiteContext*, i32)*, void (%struct.TfLiteContext*, i32, %struct.TfLiteExternalContext*)*, i8, i8*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i32*)*, i8* (%struct.TfLiteContext*, i32)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, i32, i32*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray*, %struct.TfLiteDelegateParams**, i32*)* }
%struct.TfLiteIntArray = type { i32, [0 x i32] }
%struct.TfLiteTensor = type { i32, %union.TfLitePtrUnion, %struct.TfLiteIntArray*, %struct.TfLiteQuantizationParams, i32, i64, i8*, i8*, %struct.TfLiteDelegate*, i32, i8, i8, %struct.TfLiteQuantization, %struct.TfLiteSparsity*, %struct.TfLiteIntArray* }
%union.TfLitePtrUnion = type { i32* }
%struct.TfLiteQuantizationParams = type { float, i32 }
%struct.TfLiteDelegate = type { i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, void (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32*)*, i64 }
%struct.TfLiteQuantization = type { i32, i8* }
%struct.TfLiteSparsity = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteDimensionMetadata*, i32 }
%struct.TfLiteDimensionMetadata = type { i32, i32, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%struct.TfLiteNode = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, i8*, i8*, i8*, i32, %struct.TfLiteDelegate* }
%struct.TfLiteExternalContext = type { i32, i32 (%struct.TfLiteContext*)* }
%struct.TfLiteDelegateParams = type { %struct.TfLiteDelegate*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%"class.tflite::RuntimeShape" = type { i32, %union.anon }
%union.anon = type { i32*, [16 x i8] }

@.str = private unnamed_addr constant [26 x i8] c"%s:%d %s != %s (%d != %d)\00", align 1
@.str.3 = private unnamed_addr constant [68 x i8] c"../../third_party/tflite/src/tensorflow/lite/kernels/segment_sum.cc\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"segment_id_size\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"data->dims->data[0]\00", align 1
@.str.6 = private unnamed_addr constant [19 x i8] c"current_segment_id\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.8 = private unnamed_addr constant [23 x i8] c"%s:%d %s was not true.\00", align 1
@.str.9 = private unnamed_addr constant [25 x i8] c"delta == 0 || delta == 1\00", align 1
@.str.10 = private unnamed_addr constant [16 x i8] c"NumInputs(node)\00", align 1
@.str.11 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@.str.12 = private unnamed_addr constant [17 x i8] c"NumOutputs(node)\00", align 1
@.str.13 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.14 = private unnamed_addr constant [59 x i8] c"data->type == kTfLiteInt32 || data->type == kTfLiteFloat32\00", align 1
@.str.15 = private unnamed_addr constant [18 x i8] c"segment_ids->type\00", align 1
@.str.16 = private unnamed_addr constant [13 x i8] c"kTfLiteInt32\00", align 1
@.str.17 = private unnamed_addr constant [46 x i8] c"Currently SegmentSum doesn't support type: %s\00", align 1
@_ZZN6tflite3ops7builtin20Register_SEGMENT_SUMEvE1r = internal global %struct.TfLiteRegistration { i8* (%struct.TfLiteContext*, i8*, i64)* null, void (%struct.TfLiteContext*, i8*)* null, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin11segment_sum7PrepareEP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin11segment_sum4EvalEP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin11segment_sum18ResizeOutputTensorEP13TfLiteContextPK12TfLiteTensorS7_PS5_(%struct.TfLiteContext*, %struct.TfLiteTensor* nocapture readonly, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor*) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %6 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %5, align 8
  %7 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %6, i64 0, i32 1, i64 0
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 2
  %10 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %9, align 8
  %11 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %10, i64 0, i32 1, i64 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %8, %12
  br i1 %13, label %14, label %20

14:                                               ; preds = %4
  %15 = icmp sgt i32 %8, 0
  br i1 %15, label %16, label %49

16:                                               ; preds = %14
  %17 = icmp eq %struct.TfLiteTensor* %2, null
  %18 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1, i32 0
  %19 = zext i32 %8 to i64
  br label %23

20:                                               ; preds = %4
  %21 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %22 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %21, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %22(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 40, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i64 0, i64 0), i32 %8, i32 %12) #6
  br label %106

23:                                               ; preds = %44, %16
  %24 = phi i64 [ 0, %16 ], [ %45, %44 ]
  %25 = phi i32 [ -1, %16 ], [ %31, %44 ]
  br i1 %17, label %28, label %26

26:                                               ; preds = %23
  %27 = load i32*, i32** %18, align 8
  br label %28

28:                                               ; preds = %23, %26
  %29 = phi i32* [ %27, %26 ], [ null, %23 ]
  %30 = getelementptr inbounds i32, i32* %29, i64 %24
  %31 = load i32, i32* %30, align 4
  %32 = icmp eq i64 %24, 0
  br i1 %32, label %33, label %38

33:                                               ; preds = %28
  %34 = icmp eq i32 %31, 0
  br i1 %34, label %44, label %35

35:                                               ; preds = %33
  %36 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %37 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %36, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %37(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 45, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0), i32 %31, i32 0) #6
  br label %106

38:                                               ; preds = %28
  %39 = sub nsw i32 %31, %25
  %40 = icmp ult i32 %39, 2
  br i1 %40, label %44, label %41

41:                                               ; preds = %38
  %42 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %43 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %42, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %43(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 48, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i64 0, i64 0)) #6
  br label %106

44:                                               ; preds = %38, %33
  %45 = add nuw nsw i64 %24, 1
  %46 = icmp eq i64 %45, %19
  br i1 %46, label %47, label %23

47:                                               ; preds = %44
  %48 = add i32 %31, 1
  br label %49

49:                                               ; preds = %47, %14
  %50 = phi i32 [ 0, %14 ], [ %48, %47 ]
  %51 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %10, i64 0, i32 0
  %52 = load i32, i32* %51, align 4
  %53 = tail call %struct.TfLiteIntArray* @TfLiteIntArrayCreate(i32 %52) #6
  %54 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %53, i64 0, i32 1, i64 0
  store i32 %50, i32* %54, align 4
  %55 = icmp sgt i32 %52, 1
  br i1 %55, label %56, label %77

56:                                               ; preds = %49
  %57 = zext i32 %52 to i64
  %58 = add nsw i64 %57, -1
  %59 = add nsw i64 %57, -2
  %60 = and i64 %58, 3
  %61 = icmp ult i64 %59, 3
  br i1 %61, label %64, label %62

62:                                               ; preds = %56
  %63 = sub nsw i64 %58, %60
  br label %81

64:                                               ; preds = %81, %56
  %65 = phi i64 [ 1, %56 ], [ %103, %81 ]
  %66 = icmp eq i64 %60, 0
  br i1 %66, label %77, label %67

67:                                               ; preds = %64, %67
  %68 = phi i64 [ %74, %67 ], [ %65, %64 ]
  %69 = phi i64 [ %75, %67 ], [ %60, %64 ]
  %70 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %9, align 8
  %71 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %70, i64 0, i32 1, i64 %68
  %72 = load i32, i32* %71, align 4
  %73 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %53, i64 0, i32 1, i64 %68
  store i32 %72, i32* %73, align 4
  %74 = add nuw nsw i64 %68, 1
  %75 = add i64 %69, -1
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %77, label %67, !llvm.loop !2

77:                                               ; preds = %64, %67, %49
  %78 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 4
  %79 = load i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)** %78, align 8
  %80 = tail call i32 %79(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %3, %struct.TfLiteIntArray* %53) #6
  br label %106

81:                                               ; preds = %81, %62
  %82 = phi i64 [ 1, %62 ], [ %103, %81 ]
  %83 = phi i64 [ %63, %62 ], [ %104, %81 ]
  %84 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %9, align 8
  %85 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %84, i64 0, i32 1, i64 %82
  %86 = load i32, i32* %85, align 4
  %87 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %53, i64 0, i32 1, i64 %82
  store i32 %86, i32* %87, align 4
  %88 = add nuw nsw i64 %82, 1
  %89 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %9, align 8
  %90 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %89, i64 0, i32 1, i64 %88
  %91 = load i32, i32* %90, align 4
  %92 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %53, i64 0, i32 1, i64 %88
  store i32 %91, i32* %92, align 4
  %93 = add nuw nsw i64 %82, 2
  %94 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %9, align 8
  %95 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %94, i64 0, i32 1, i64 %93
  %96 = load i32, i32* %95, align 4
  %97 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %53, i64 0, i32 1, i64 %93
  store i32 %96, i32* %97, align 4
  %98 = add nuw nsw i64 %82, 3
  %99 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %9, align 8
  %100 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %99, i64 0, i32 1, i64 %98
  %101 = load i32, i32* %100, align 4
  %102 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %53, i64 0, i32 1, i64 %98
  store i32 %101, i32* %102, align 4
  %103 = add nuw nsw i64 %82, 4
  %104 = add i64 %83, -4
  %105 = icmp eq i64 %104, 0
  br i1 %105, label %64, label %81

106:                                              ; preds = %41, %35, %77, %20
  %107 = phi i32 [ 1, %20 ], [ %80, %77 ], [ 1, %35 ], [ 1, %41 ]
  ret i32 %107
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare %struct.TfLiteIntArray* @TfLiteIntArrayCreate(i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin11segment_sum7PrepareEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #0 {
  %3 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %4 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %3, align 8
  %5 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 2
  br i1 %7, label %11, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %10 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %9, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %10(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 65, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i64 0, i64 0), i32 %6, i32 2) #6
  br label %82

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %13 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %12, align 8
  %14 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %13, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 1
  br i1 %16, label %20, label %17

17:                                               ; preds = %11
  %18 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %19 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %18, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %19(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 66, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0), i32 %15, i32 1) #6
  br label %82

20:                                               ; preds = %11
  %21 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 1, i64 0
  %22 = load i32, i32* %21, align 4
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %29, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %26 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %25, align 8
  %27 = sext i32 %22 to i64
  %28 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %26, i64 %27
  br label %29

29:                                               ; preds = %20, %24
  %30 = phi %struct.TfLiteTensor* [ %28, %24 ], [ null, %20 ]
  %31 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 1, i64 1
  %32 = load i32, i32* %31, align 4
  %33 = icmp slt i32 %32, 0
  br i1 %33, label %39, label %34

34:                                               ; preds = %29
  %35 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %36 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %35, align 8
  %37 = sext i32 %32 to i64
  %38 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %36, i64 %37
  br label %39

39:                                               ; preds = %29, %34
  %40 = phi %struct.TfLiteTensor* [ %38, %34 ], [ null, %29 ]
  %41 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %13, i64 0, i32 1, i64 0
  %42 = load i32, i32* %41, align 4
  %43 = icmp slt i32 %42, 0
  br i1 %43, label %49, label %44

44:                                               ; preds = %39
  %45 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %46 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %45, align 8
  %47 = sext i32 %42 to i64
  %48 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %46, i64 %47
  br label %49

49:                                               ; preds = %39, %44
  %50 = phi %struct.TfLiteTensor* [ %48, %44 ], [ null, %39 ]
  %51 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 0, i32 0
  %52 = load i32, i32* %51, align 8
  %53 = add i32 %52, -1
  %54 = icmp ult i32 %53, 2
  br i1 %54, label %58, label %55

55:                                               ; preds = %49
  %56 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %57 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %56, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %57(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 73, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.14, i64 0, i64 0)) #6
  br label %82

58:                                               ; preds = %49
  %59 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %40, i64 0, i32 0
  %60 = load i32, i32* %59, align 8
  %61 = icmp eq i32 %60, 2
  br i1 %61, label %65, label %62

62:                                               ; preds = %58
  %63 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %64 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %63, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %64(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 74, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.16, i64 0, i64 0), i32 %60, i32 2) #6
  br label %82

65:                                               ; preds = %58
  %66 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 0, i32 4
  %67 = load i32, i32* %66, align 8
  %68 = icmp eq i32 %67, 1
  br i1 %68, label %69, label %73

69:                                               ; preds = %65
  %70 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %40, i64 0, i32 4
  %71 = load i32, i32* %70, align 8
  %72 = icmp eq i32 %71, 1
  br i1 %72, label %80, label %73

73:                                               ; preds = %69, %65
  %74 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %50, i64 0, i32 4
  %75 = load i32, i32* %74, align 8
  %76 = icmp eq i32 %75, 4
  br i1 %76, label %82, label %77

77:                                               ; preds = %73
  store i32 4, i32* %74, align 8
  %78 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %50, i64 0, i32 1
  %79 = bitcast %union.TfLitePtrUnion* %78 to i8**
  store i8* null, i8** %79, align 8
  br label %82

80:                                               ; preds = %69
  %81 = tail call i32 @_ZN6tflite3ops7builtin11segment_sum18ResizeOutputTensorEP13TfLiteContextPK12TfLiteTensorS7_PS5_(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %30, %struct.TfLiteTensor* %40, %struct.TfLiteTensor* %50)
  br label %82

82:                                               ; preds = %77, %73, %55, %62, %80, %17, %8
  %83 = phi i32 [ 1, %8 ], [ 1, %17 ], [ 1, %62 ], [ %81, %80 ], [ 1, %55 ], [ 0, %73 ], [ 0, %77 ]
  ret i32 %83
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin11segment_sum4EvalEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #0 {
  %3 = alloca %"class.tflite::RuntimeShape", align 8
  %4 = alloca %"class.tflite::RuntimeShape", align 8
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = alloca %"class.tflite::RuntimeShape", align 8
  %8 = alloca %"class.tflite::RuntimeShape", align 8
  %9 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %10 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %9, align 8
  %11 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %10, i64 0, i32 1, i64 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %19, label %14

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %16 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %15, align 8
  %17 = sext i32 %12 to i64
  %18 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %16, i64 %17
  br label %19

19:                                               ; preds = %2, %14
  %20 = phi %struct.TfLiteTensor* [ %18, %14 ], [ null, %2 ]
  %21 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %10, i64 0, i32 1, i64 1
  %22 = load i32, i32* %21, align 4
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %29, label %24

24:                                               ; preds = %19
  %25 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %26 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %25, align 8
  %27 = sext i32 %22 to i64
  %28 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %26, i64 %27
  br label %29

29:                                               ; preds = %19, %24
  %30 = phi %struct.TfLiteTensor* [ %28, %24 ], [ null, %19 ]
  %31 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %32 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %31, align 8
  %33 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %32, i64 0, i32 1, i64 0
  %34 = load i32, i32* %33, align 4
  %35 = icmp slt i32 %34, 0
  br i1 %35, label %41, label %36

36:                                               ; preds = %29
  %37 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %38 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %37, align 8
  %39 = sext i32 %34 to i64
  %40 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %38, i64 %39
  br label %41

41:                                               ; preds = %29, %36
  %42 = phi %struct.TfLiteTensor* [ %40, %36 ], [ null, %29 ]
  %43 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %42, i64 0, i32 4
  %44 = load i32, i32* %43, align 8
  %45 = icmp eq i32 %44, 4
  br i1 %45, label %46, label %49

46:                                               ; preds = %41
  %47 = tail call i32 @_ZN6tflite3ops7builtin11segment_sum18ResizeOutputTensorEP13TfLiteContextPK12TfLiteTensorS7_PS5_(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %20, %struct.TfLiteTensor* %30, %struct.TfLiteTensor* %42)
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %956

49:                                               ; preds = %46, %41
  %50 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %20, i64 0, i32 0
  %51 = load i32, i32* %50, align 8
  switch i32 %51, label %952 [
    i32 2, label %52
    i32 1, label %501
  ]

52:                                               ; preds = %49
  %53 = bitcast %"class.tflite::RuntimeShape"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %53) #6
  %54 = icmp eq %struct.TfLiteTensor* %20, null
  br i1 %54, label %55, label %57

55:                                               ; preds = %52
  %56 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 0, i32* %56, align 8, !alias.scope !4
  br label %84

57:                                               ; preds = %52
  %58 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %20, i64 0, i32 2
  %59 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %58, align 8, !noalias !4
  %60 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %59, i64 0, i32 0
  %61 = load i32, i32* %60, align 4, !noalias !4
  %62 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %59, i64 0, i32 1, i64 0
  %63 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 %61, i32* %63, align 8, !alias.scope !4
  %64 = icmp sgt i32 %61, 5
  br i1 %64, label %65, label %72

65:                                               ; preds = %57
  %66 = sext i32 %61 to i64
  %67 = shl nsw i64 %66, 2
  %68 = tail call i8* @_Znam(i64 %67) #7, !noalias !4
  %69 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %70 = bitcast i32** %69 to i8**
  store i8* %68, i8** %70, align 8, !alias.scope !4
  %71 = bitcast i8* %68 to i32*
  br label %77

72:                                               ; preds = %57
  %73 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %74 = bitcast %union.anon* %73 to i32*
  %75 = sext i32 %61 to i64
  %76 = shl nsw i64 %75, 2
  br label %77

77:                                               ; preds = %72, %65
  %78 = phi i64 [ %67, %65 ], [ %76, %72 ]
  %79 = phi i32* [ %71, %65 ], [ %74, %72 ]
  %80 = bitcast i32* %79 to i8*
  %81 = bitcast i32* %62 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %80, i8* align 4 %81, i64 %78, i1 false) #6
  %82 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %20, i64 0, i32 1, i32 0
  %83 = load i32*, i32** %82, align 8
  br label %84

84:                                               ; preds = %55, %77
  %85 = phi i32 [ %61, %77 ], [ 0, %55 ]
  %86 = phi i32* [ %83, %77 ], [ null, %55 ]
  %87 = bitcast %"class.tflite::RuntimeShape"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %87) #6
  %88 = icmp eq %struct.TfLiteTensor* %30, null
  br i1 %88, label %89, label %91

89:                                               ; preds = %84
  %90 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 0, i32* %90, align 8, !alias.scope !7
  br label %118

91:                                               ; preds = %84
  %92 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 0, i32 2
  %93 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %92, align 8, !noalias !7
  %94 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %93, i64 0, i32 0
  %95 = load i32, i32* %94, align 4, !noalias !7
  %96 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %93, i64 0, i32 1, i64 0
  %97 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 %95, i32* %97, align 8, !alias.scope !7
  %98 = icmp sgt i32 %95, 5
  br i1 %98, label %99, label %106

99:                                               ; preds = %91
  %100 = sext i32 %95 to i64
  %101 = shl nsw i64 %100, 2
  %102 = tail call i8* @_Znam(i64 %101) #7, !noalias !7
  %103 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %104 = bitcast i32** %103 to i8**
  store i8* %102, i8** %104, align 8, !alias.scope !7
  %105 = bitcast i8* %102 to i32*
  br label %111

106:                                              ; preds = %91
  %107 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %108 = bitcast %union.anon* %107 to i32*
  %109 = sext i32 %95 to i64
  %110 = shl nsw i64 %109, 2
  br label %111

111:                                              ; preds = %106, %99
  %112 = phi i64 [ %101, %99 ], [ %110, %106 ]
  %113 = phi i32* [ %105, %99 ], [ %108, %106 ]
  %114 = bitcast i32* %113 to i8*
  %115 = bitcast i32* %96 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %114, i8* align 4 %115, i64 %112, i1 false) #6
  %116 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 0, i32 1, i32 0
  %117 = load i32*, i32** %116, align 8
  br label %118

118:                                              ; preds = %89, %111
  %119 = phi i32 [ %95, %111 ], [ 0, %89 ]
  %120 = phi i32* [ %117, %111 ], [ null, %89 ]
  %121 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %121) #6
  %122 = icmp eq %struct.TfLiteTensor* %42, null
  br i1 %122, label %123, label %125

123:                                              ; preds = %118
  %124 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %124, align 8, !alias.scope !10
  br label %153

125:                                              ; preds = %118
  %126 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %42, i64 0, i32 2
  %127 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %126, align 8, !noalias !10
  %128 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %127, i64 0, i32 0
  %129 = load i32, i32* %128, align 4, !noalias !10
  %130 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %127, i64 0, i32 1, i64 0
  %131 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %129, i32* %131, align 8, !alias.scope !10
  %132 = icmp sgt i32 %129, 5
  br i1 %132, label %133, label %140

133:                                              ; preds = %125
  %134 = sext i32 %129 to i64
  %135 = shl nsw i64 %134, 2
  %136 = tail call i8* @_Znam(i64 %135) #7, !noalias !10
  %137 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %138 = bitcast i32** %137 to i8**
  store i8* %136, i8** %138, align 8, !alias.scope !10
  %139 = bitcast i8* %136 to i32*
  br label %145

140:                                              ; preds = %125
  %141 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %142 = bitcast %union.anon* %141 to i32*
  %143 = sext i32 %129 to i64
  %144 = shl nsw i64 %143, 2
  br label %145

145:                                              ; preds = %140, %133
  %146 = phi i64 [ %135, %133 ], [ %144, %140 ]
  %147 = phi i32* [ %139, %133 ], [ %142, %140 ]
  %148 = bitcast i32* %147 to i8*
  %149 = bitcast i32* %130 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %148, i8* align 4 %149, i64 %146, i1 false) #6
  %150 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %42, i64 0, i32 1, i32 0
  %151 = load i32*, i32** %150, align 8
  %152 = bitcast i32* %151 to i8*
  br label %153

153:                                              ; preds = %123, %145
  %154 = phi i32 [ %129, %145 ], [ 0, %123 ]
  %155 = phi i8* [ %152, %145 ], [ null, %123 ]
  %156 = phi i32* [ %151, %145 ], [ null, %123 ]
  %157 = icmp sgt i32 %85, 5
  %158 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %159 = getelementptr inbounds %union.anon, %union.anon* %158, i64 0, i32 0
  %160 = load i32*, i32** %159, align 8
  %161 = bitcast %union.anon* %158 to i32*
  %162 = select i1 %157, i32* %160, i32* %161
  %163 = icmp sgt i32 %85, 0
  br i1 %163, label %164, label %216

164:                                              ; preds = %153
  %165 = zext i32 %85 to i64
  %166 = add nsw i64 %165, -1
  %167 = and i64 %165, 3
  %168 = icmp ult i64 %166, 3
  br i1 %168, label %197, label %169

169:                                              ; preds = %164
  %170 = sub nsw i64 %165, %167
  br label %171

171:                                              ; preds = %179, %169
  %172 = phi i64 [ 0, %169 ], [ %194, %179 ]
  %173 = phi i32 [ 1, %169 ], [ %193, %179 ]
  %174 = phi i64 [ %170, %169 ], [ %195, %179 ]
  %175 = icmp eq i64 %172, 0
  br i1 %175, label %179, label %176

176:                                              ; preds = %171
  %177 = getelementptr inbounds i32, i32* %162, i64 %172
  %178 = load i32, i32* %177, align 4
  br label %179

179:                                              ; preds = %176, %171
  %180 = phi i32 [ %178, %176 ], [ 1, %171 ]
  %181 = mul nsw i32 %180, %173
  %182 = or i64 %172, 1
  %183 = getelementptr inbounds i32, i32* %162, i64 %182
  %184 = load i32, i32* %183, align 4
  %185 = mul nsw i32 %184, %181
  %186 = or i64 %172, 2
  %187 = getelementptr inbounds i32, i32* %162, i64 %186
  %188 = load i32, i32* %187, align 4
  %189 = mul nsw i32 %188, %185
  %190 = or i64 %172, 3
  %191 = getelementptr inbounds i32, i32* %162, i64 %190
  %192 = load i32, i32* %191, align 4
  %193 = mul nsw i32 %192, %189
  %194 = add nuw nsw i64 %172, 4
  %195 = add i64 %174, -4
  %196 = icmp eq i64 %195, 0
  br i1 %196, label %197, label %171

197:                                              ; preds = %179, %164
  %198 = phi i32 [ undef, %164 ], [ %193, %179 ]
  %199 = phi i64 [ 0, %164 ], [ %194, %179 ]
  %200 = phi i32 [ 1, %164 ], [ %193, %179 ]
  %201 = icmp eq i64 %167, 0
  br i1 %201, label %216, label %202

202:                                              ; preds = %197, %210
  %203 = phi i64 [ %213, %210 ], [ %199, %197 ]
  %204 = phi i32 [ %212, %210 ], [ %200, %197 ]
  %205 = phi i64 [ %214, %210 ], [ %167, %197 ]
  %206 = icmp eq i64 %203, 0
  br i1 %206, label %210, label %207

207:                                              ; preds = %202
  %208 = getelementptr inbounds i32, i32* %162, i64 %203
  %209 = load i32, i32* %208, align 4
  br label %210

210:                                              ; preds = %207, %202
  %211 = phi i32 [ %209, %207 ], [ 1, %202 ]
  %212 = mul nsw i32 %211, %204
  %213 = add nuw nsw i64 %203, 1
  %214 = add i64 %205, -1
  %215 = icmp eq i64 %214, 0
  br i1 %215, label %216, label %202, !llvm.loop !13

216:                                              ; preds = %197, %210, %153
  %217 = phi i32 [ 1, %153 ], [ %198, %197 ], [ %212, %210 ]
  %218 = icmp sgt i32 %154, 5
  %219 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  br i1 %218, label %220, label %223

220:                                              ; preds = %216
  %221 = getelementptr inbounds %union.anon, %union.anon* %219, i64 0, i32 0
  %222 = load i32*, i32** %221, align 8
  br label %226

223:                                              ; preds = %216
  %224 = bitcast %union.anon* %219 to i32*
  %225 = icmp sgt i32 %154, 0
  br i1 %225, label %226, label %330

226:                                              ; preds = %223, %220
  %227 = phi i32* [ %222, %220 ], [ %224, %223 ]
  %228 = zext i32 %154 to i64
  %229 = icmp ult i32 %154, 8
  br i1 %229, label %315, label %230

230:                                              ; preds = %226
  %231 = and i64 %228, 4294967288
  %232 = add nsw i64 %231, -8
  %233 = lshr exact i64 %232, 3
  %234 = add nuw nsw i64 %233, 1
  %235 = and i64 %234, 3
  %236 = icmp ult i64 %232, 24
  br i1 %236, label %282, label %237

237:                                              ; preds = %230
  %238 = sub nsw i64 %234, %235
  br label %239

239:                                              ; preds = %239, %237
  %240 = phi i64 [ 0, %237 ], [ %279, %239 ]
  %241 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %237 ], [ %277, %239 ]
  %242 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %237 ], [ %278, %239 ]
  %243 = phi i64 [ %238, %237 ], [ %280, %239 ]
  %244 = getelementptr inbounds i32, i32* %227, i64 %240
  %245 = bitcast i32* %244 to <4 x i32>*
  %246 = load <4 x i32>, <4 x i32>* %245, align 4
  %247 = getelementptr inbounds i32, i32* %244, i64 4
  %248 = bitcast i32* %247 to <4 x i32>*
  %249 = load <4 x i32>, <4 x i32>* %248, align 4
  %250 = mul nsw <4 x i32> %246, %241
  %251 = mul nsw <4 x i32> %249, %242
  %252 = or i64 %240, 8
  %253 = getelementptr inbounds i32, i32* %227, i64 %252
  %254 = bitcast i32* %253 to <4 x i32>*
  %255 = load <4 x i32>, <4 x i32>* %254, align 4
  %256 = getelementptr inbounds i32, i32* %253, i64 4
  %257 = bitcast i32* %256 to <4 x i32>*
  %258 = load <4 x i32>, <4 x i32>* %257, align 4
  %259 = mul nsw <4 x i32> %255, %250
  %260 = mul nsw <4 x i32> %258, %251
  %261 = or i64 %240, 16
  %262 = getelementptr inbounds i32, i32* %227, i64 %261
  %263 = bitcast i32* %262 to <4 x i32>*
  %264 = load <4 x i32>, <4 x i32>* %263, align 4
  %265 = getelementptr inbounds i32, i32* %262, i64 4
  %266 = bitcast i32* %265 to <4 x i32>*
  %267 = load <4 x i32>, <4 x i32>* %266, align 4
  %268 = mul nsw <4 x i32> %264, %259
  %269 = mul nsw <4 x i32> %267, %260
  %270 = or i64 %240, 24
  %271 = getelementptr inbounds i32, i32* %227, i64 %270
  %272 = bitcast i32* %271 to <4 x i32>*
  %273 = load <4 x i32>, <4 x i32>* %272, align 4
  %274 = getelementptr inbounds i32, i32* %271, i64 4
  %275 = bitcast i32* %274 to <4 x i32>*
  %276 = load <4 x i32>, <4 x i32>* %275, align 4
  %277 = mul nsw <4 x i32> %273, %268
  %278 = mul nsw <4 x i32> %276, %269
  %279 = add i64 %240, 32
  %280 = add i64 %243, -4
  %281 = icmp eq i64 %280, 0
  br i1 %281, label %282, label %239, !llvm.loop !14

282:                                              ; preds = %239, %230
  %283 = phi <4 x i32> [ undef, %230 ], [ %277, %239 ]
  %284 = phi <4 x i32> [ undef, %230 ], [ %278, %239 ]
  %285 = phi i64 [ 0, %230 ], [ %279, %239 ]
  %286 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %230 ], [ %277, %239 ]
  %287 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %230 ], [ %278, %239 ]
  %288 = icmp eq i64 %235, 0
  br i1 %288, label %305, label %289

289:                                              ; preds = %282, %289
  %290 = phi i64 [ %302, %289 ], [ %285, %282 ]
  %291 = phi <4 x i32> [ %300, %289 ], [ %286, %282 ]
  %292 = phi <4 x i32> [ %301, %289 ], [ %287, %282 ]
  %293 = phi i64 [ %303, %289 ], [ %235, %282 ]
  %294 = getelementptr inbounds i32, i32* %227, i64 %290
  %295 = bitcast i32* %294 to <4 x i32>*
  %296 = load <4 x i32>, <4 x i32>* %295, align 4
  %297 = getelementptr inbounds i32, i32* %294, i64 4
  %298 = bitcast i32* %297 to <4 x i32>*
  %299 = load <4 x i32>, <4 x i32>* %298, align 4
  %300 = mul nsw <4 x i32> %296, %291
  %301 = mul nsw <4 x i32> %299, %292
  %302 = add i64 %290, 8
  %303 = add i64 %293, -1
  %304 = icmp eq i64 %303, 0
  br i1 %304, label %305, label %289, !llvm.loop !16

305:                                              ; preds = %289, %282
  %306 = phi <4 x i32> [ %283, %282 ], [ %300, %289 ]
  %307 = phi <4 x i32> [ %284, %282 ], [ %301, %289 ]
  %308 = mul <4 x i32> %307, %306
  %309 = shufflevector <4 x i32> %308, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %310 = mul <4 x i32> %308, %309
  %311 = shufflevector <4 x i32> %310, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %312 = mul <4 x i32> %310, %311
  %313 = extractelement <4 x i32> %312, i32 0
  %314 = icmp eq i64 %231, %228
  br i1 %314, label %326, label %315

315:                                              ; preds = %305, %226
  %316 = phi i64 [ 0, %226 ], [ %231, %305 ]
  %317 = phi i32 [ 1, %226 ], [ %313, %305 ]
  br label %318

318:                                              ; preds = %315, %318
  %319 = phi i64 [ %324, %318 ], [ %316, %315 ]
  %320 = phi i32 [ %323, %318 ], [ %317, %315 ]
  %321 = getelementptr inbounds i32, i32* %227, i64 %319
  %322 = load i32, i32* %321, align 4
  %323 = mul nsw i32 %322, %320
  %324 = add nuw nsw i64 %319, 1
  %325 = icmp eq i64 %324, %228
  br i1 %325, label %326, label %318, !llvm.loop !17

326:                                              ; preds = %318, %305
  %327 = phi i32 [ %313, %305 ], [ %323, %318 ]
  %328 = sext i32 %327 to i64
  %329 = shl nsw i64 %328, 2
  br label %330

330:                                              ; preds = %326, %223
  %331 = phi i64 [ 4, %223 ], [ %329, %326 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %155, i8 0, i64 %331, i1 false) #6
  %332 = load i32, i32* %162, align 4
  %333 = icmp sgt i32 %332, 0
  br i1 %333, label %334, label %479

334:                                              ; preds = %330
  %335 = icmp sgt i32 %217, 0
  %336 = sext i32 %217 to i64
  %337 = zext i32 %217 to i64
  %338 = getelementptr i32, i32* %156, i64 %337
  %339 = and i64 %337, 4294967288
  %340 = add nsw i64 %339, -8
  %341 = lshr exact i64 %340, 3
  %342 = add nuw nsw i64 %341, 1
  %343 = icmp ult i32 %217, 8
  %344 = and i64 %337, 4294967288
  %345 = and i64 %342, 1
  %346 = icmp eq i64 %340, 0
  %347 = sub nuw nsw i64 %342, %345
  %348 = icmp eq i64 %345, 0
  %349 = icmp eq i64 %344, %337
  %350 = and i64 %337, 1
  %351 = icmp eq i64 %350, 0
  %352 = sub nsw i64 0, %337
  br label %353

353:                                              ; preds = %455, %334
  %354 = phi i32 [ %332, %334 ], [ %456, %455 ]
  %355 = phi i64 [ 0, %334 ], [ %457, %455 ]
  %356 = mul i64 %355, %336
  %357 = getelementptr i32, i32* %86, i64 %356
  %358 = add i64 %356, %337
  %359 = getelementptr i32, i32* %86, i64 %358
  br i1 %335, label %360, label %455

360:                                              ; preds = %353
  %361 = getelementptr inbounds i32, i32* %120, i64 %355
  %362 = load i32, i32* %361, align 4
  %363 = mul nsw i64 %355, %336
  %364 = mul nsw i32 %362, %217
  %365 = sext i32 %364 to i64
  br i1 %343, label %366, label %381

366:                                              ; preds = %452, %381, %360
  %367 = phi i64 [ 0, %381 ], [ 0, %360 ], [ %344, %452 ]
  %368 = xor i64 %367, -1
  br i1 %351, label %378, label %369

369:                                              ; preds = %366
  %370 = add nsw i64 %367, %363
  %371 = getelementptr inbounds i32, i32* %86, i64 %370
  %372 = load i32, i32* %371, align 4
  %373 = add nsw i64 %367, %365
  %374 = getelementptr inbounds i32, i32* %156, i64 %373
  %375 = load i32, i32* %374, align 4
  %376 = add nsw i32 %375, %372
  store i32 %376, i32* %374, align 4
  %377 = or i64 %367, 1
  br label %378

378:                                              ; preds = %369, %366
  %379 = phi i64 [ %377, %369 ], [ %367, %366 ]
  %380 = icmp eq i64 %368, %352
  br i1 %380, label %453, label %460

381:                                              ; preds = %360
  %382 = getelementptr i32, i32* %156, i64 %365
  %383 = getelementptr i32, i32* %338, i64 %365
  %384 = icmp ult i32* %382, %359
  %385 = icmp ult i32* %357, %383
  %386 = and i1 %384, %385
  br i1 %386, label %366, label %387

387:                                              ; preds = %381
  br i1 %346, label %431, label %388

388:                                              ; preds = %387, %388
  %389 = phi i64 [ %428, %388 ], [ 0, %387 ]
  %390 = phi i64 [ %429, %388 ], [ %347, %387 ]
  %391 = add nsw i64 %389, %363
  %392 = getelementptr inbounds i32, i32* %86, i64 %391
  %393 = bitcast i32* %392 to <4 x i32>*
  %394 = load <4 x i32>, <4 x i32>* %393, align 4, !alias.scope !19
  %395 = getelementptr inbounds i32, i32* %392, i64 4
  %396 = bitcast i32* %395 to <4 x i32>*
  %397 = load <4 x i32>, <4 x i32>* %396, align 4, !alias.scope !19
  %398 = add nsw i64 %389, %365
  %399 = getelementptr inbounds i32, i32* %156, i64 %398
  %400 = bitcast i32* %399 to <4 x i32>*
  %401 = load <4 x i32>, <4 x i32>* %400, align 4, !alias.scope !22, !noalias !19
  %402 = getelementptr inbounds i32, i32* %399, i64 4
  %403 = bitcast i32* %402 to <4 x i32>*
  %404 = load <4 x i32>, <4 x i32>* %403, align 4, !alias.scope !22, !noalias !19
  %405 = add nsw <4 x i32> %401, %394
  %406 = add nsw <4 x i32> %404, %397
  %407 = bitcast i32* %399 to <4 x i32>*
  store <4 x i32> %405, <4 x i32>* %407, align 4, !alias.scope !22, !noalias !19
  %408 = bitcast i32* %402 to <4 x i32>*
  store <4 x i32> %406, <4 x i32>* %408, align 4, !alias.scope !22, !noalias !19
  %409 = or i64 %389, 8
  %410 = add nsw i64 %409, %363
  %411 = getelementptr inbounds i32, i32* %86, i64 %410
  %412 = bitcast i32* %411 to <4 x i32>*
  %413 = load <4 x i32>, <4 x i32>* %412, align 4, !alias.scope !19
  %414 = getelementptr inbounds i32, i32* %411, i64 4
  %415 = bitcast i32* %414 to <4 x i32>*
  %416 = load <4 x i32>, <4 x i32>* %415, align 4, !alias.scope !19
  %417 = add nsw i64 %409, %365
  %418 = getelementptr inbounds i32, i32* %156, i64 %417
  %419 = bitcast i32* %418 to <4 x i32>*
  %420 = load <4 x i32>, <4 x i32>* %419, align 4, !alias.scope !22, !noalias !19
  %421 = getelementptr inbounds i32, i32* %418, i64 4
  %422 = bitcast i32* %421 to <4 x i32>*
  %423 = load <4 x i32>, <4 x i32>* %422, align 4, !alias.scope !22, !noalias !19
  %424 = add nsw <4 x i32> %420, %413
  %425 = add nsw <4 x i32> %423, %416
  %426 = bitcast i32* %418 to <4 x i32>*
  store <4 x i32> %424, <4 x i32>* %426, align 4, !alias.scope !22, !noalias !19
  %427 = bitcast i32* %421 to <4 x i32>*
  store <4 x i32> %425, <4 x i32>* %427, align 4, !alias.scope !22, !noalias !19
  %428 = add i64 %389, 16
  %429 = add i64 %390, -2
  %430 = icmp eq i64 %429, 0
  br i1 %430, label %431, label %388, !llvm.loop !24

431:                                              ; preds = %388, %387
  %432 = phi i64 [ 0, %387 ], [ %428, %388 ]
  br i1 %348, label %452, label %433

433:                                              ; preds = %431
  %434 = add nsw i64 %432, %363
  %435 = getelementptr inbounds i32, i32* %86, i64 %434
  %436 = bitcast i32* %435 to <4 x i32>*
  %437 = load <4 x i32>, <4 x i32>* %436, align 4, !alias.scope !19
  %438 = getelementptr inbounds i32, i32* %435, i64 4
  %439 = bitcast i32* %438 to <4 x i32>*
  %440 = load <4 x i32>, <4 x i32>* %439, align 4, !alias.scope !19
  %441 = add nsw i64 %432, %365
  %442 = getelementptr inbounds i32, i32* %156, i64 %441
  %443 = bitcast i32* %442 to <4 x i32>*
  %444 = load <4 x i32>, <4 x i32>* %443, align 4, !alias.scope !22, !noalias !19
  %445 = getelementptr inbounds i32, i32* %442, i64 4
  %446 = bitcast i32* %445 to <4 x i32>*
  %447 = load <4 x i32>, <4 x i32>* %446, align 4, !alias.scope !22, !noalias !19
  %448 = add nsw <4 x i32> %444, %437
  %449 = add nsw <4 x i32> %447, %440
  %450 = bitcast i32* %442 to <4 x i32>*
  store <4 x i32> %448, <4 x i32>* %450, align 4, !alias.scope !22, !noalias !19
  %451 = bitcast i32* %445 to <4 x i32>*
  store <4 x i32> %449, <4 x i32>* %451, align 4, !alias.scope !22, !noalias !19
  br label %452

452:                                              ; preds = %431, %433
  br i1 %349, label %453, label %366

453:                                              ; preds = %378, %460, %452
  %454 = load i32, i32* %162, align 4
  br label %455

455:                                              ; preds = %453, %353
  %456 = phi i32 [ %454, %453 ], [ %354, %353 ]
  %457 = add nuw nsw i64 %355, 1
  %458 = sext i32 %456 to i64
  %459 = icmp slt i64 %457, %458
  br i1 %459, label %353, label %479

460:                                              ; preds = %378, %460
  %461 = phi i64 [ %477, %460 ], [ %379, %378 ]
  %462 = add nsw i64 %461, %363
  %463 = getelementptr inbounds i32, i32* %86, i64 %462
  %464 = load i32, i32* %463, align 4
  %465 = add nsw i64 %461, %365
  %466 = getelementptr inbounds i32, i32* %156, i64 %465
  %467 = load i32, i32* %466, align 4
  %468 = add nsw i32 %467, %464
  store i32 %468, i32* %466, align 4
  %469 = add nuw nsw i64 %461, 1
  %470 = add nsw i64 %469, %363
  %471 = getelementptr inbounds i32, i32* %86, i64 %470
  %472 = load i32, i32* %471, align 4
  %473 = add nsw i64 %469, %365
  %474 = getelementptr inbounds i32, i32* %156, i64 %473
  %475 = load i32, i32* %474, align 4
  %476 = add nsw i32 %475, %472
  store i32 %476, i32* %474, align 4
  %477 = add nuw nsw i64 %461, 2
  %478 = icmp eq i64 %477, %337
  br i1 %478, label %453, label %460, !llvm.loop !25

479:                                              ; preds = %455, %330
  br i1 %218, label %480, label %486

480:                                              ; preds = %479
  %481 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %482 = load i32*, i32** %481, align 8
  %483 = icmp eq i32* %482, null
  br i1 %483, label %486, label %484

484:                                              ; preds = %480
  %485 = bitcast i32* %482 to i8*
  tail call void @_ZdaPv(i8* %485) #7
  br label %486

486:                                              ; preds = %479, %480, %484
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %121) #6
  %487 = icmp sgt i32 %119, 5
  br i1 %487, label %488, label %494

488:                                              ; preds = %486
  %489 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %490 = load i32*, i32** %489, align 8
  %491 = icmp eq i32* %490, null
  br i1 %491, label %494, label %492

492:                                              ; preds = %488
  %493 = bitcast i32* %490 to i8*
  tail call void @_ZdaPv(i8* %493) #7
  br label %494

494:                                              ; preds = %486, %488, %492
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %87) #6
  %495 = xor i1 %157, true
  %496 = icmp eq i32* %160, null
  %497 = or i1 %496, %495
  br i1 %497, label %500, label %498

498:                                              ; preds = %494
  %499 = bitcast i32* %160 to i8*
  tail call void @_ZdaPv(i8* %499) #7
  br label %500

500:                                              ; preds = %494, %498
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %53) #6
  br label %956

501:                                              ; preds = %49
  %502 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %502) #6
  %503 = icmp eq %struct.TfLiteTensor* %20, null
  br i1 %503, label %504, label %506

504:                                              ; preds = %501
  %505 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %505, align 8, !alias.scope !26
  br label %534

506:                                              ; preds = %501
  %507 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %20, i64 0, i32 2
  %508 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %507, align 8, !noalias !26
  %509 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %508, i64 0, i32 0
  %510 = load i32, i32* %509, align 4, !noalias !26
  %511 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %508, i64 0, i32 1, i64 0
  %512 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %510, i32* %512, align 8, !alias.scope !26
  %513 = icmp sgt i32 %510, 5
  br i1 %513, label %514, label %521

514:                                              ; preds = %506
  %515 = sext i32 %510 to i64
  %516 = shl nsw i64 %515, 2
  %517 = tail call i8* @_Znam(i64 %516) #7, !noalias !26
  %518 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %519 = bitcast i32** %518 to i8**
  store i8* %517, i8** %519, align 8, !alias.scope !26
  %520 = bitcast i8* %517 to i32*
  br label %526

521:                                              ; preds = %506
  %522 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %523 = bitcast %union.anon* %522 to i32*
  %524 = sext i32 %510 to i64
  %525 = shl nsw i64 %524, 2
  br label %526

526:                                              ; preds = %521, %514
  %527 = phi i64 [ %516, %514 ], [ %525, %521 ]
  %528 = phi i32* [ %520, %514 ], [ %523, %521 ]
  %529 = bitcast i32* %528 to i8*
  %530 = bitcast i32* %511 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %529, i8* align 4 %530, i64 %527, i1 false) #6
  %531 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %20, i64 0, i32 1
  %532 = bitcast %union.TfLitePtrUnion* %531 to float**
  %533 = load float*, float** %532, align 8
  br label %534

534:                                              ; preds = %504, %526
  %535 = phi i32 [ %510, %526 ], [ 0, %504 ]
  %536 = phi float* [ %533, %526 ], [ null, %504 ]
  %537 = bitcast %"class.tflite::RuntimeShape"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %537) #6
  %538 = icmp eq %struct.TfLiteTensor* %30, null
  br i1 %538, label %539, label %541

539:                                              ; preds = %534
  %540 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 0, i32* %540, align 8, !alias.scope !29
  br label %568

541:                                              ; preds = %534
  %542 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 0, i32 2
  %543 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %542, align 8, !noalias !29
  %544 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %543, i64 0, i32 0
  %545 = load i32, i32* %544, align 4, !noalias !29
  %546 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %543, i64 0, i32 1, i64 0
  %547 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 %545, i32* %547, align 8, !alias.scope !29
  %548 = icmp sgt i32 %545, 5
  br i1 %548, label %549, label %556

549:                                              ; preds = %541
  %550 = sext i32 %545 to i64
  %551 = shl nsw i64 %550, 2
  %552 = tail call i8* @_Znam(i64 %551) #7, !noalias !29
  %553 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %554 = bitcast i32** %553 to i8**
  store i8* %552, i8** %554, align 8, !alias.scope !29
  %555 = bitcast i8* %552 to i32*
  br label %561

556:                                              ; preds = %541
  %557 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %558 = bitcast %union.anon* %557 to i32*
  %559 = sext i32 %545 to i64
  %560 = shl nsw i64 %559, 2
  br label %561

561:                                              ; preds = %556, %549
  %562 = phi i64 [ %551, %549 ], [ %560, %556 ]
  %563 = phi i32* [ %555, %549 ], [ %558, %556 ]
  %564 = bitcast i32* %563 to i8*
  %565 = bitcast i32* %546 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %564, i8* align 4 %565, i64 %562, i1 false) #6
  %566 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 0, i32 1, i32 0
  %567 = load i32*, i32** %566, align 8
  br label %568

568:                                              ; preds = %539, %561
  %569 = phi i32 [ %545, %561 ], [ 0, %539 ]
  %570 = phi i32* [ %567, %561 ], [ null, %539 ]
  %571 = bitcast %"class.tflite::RuntimeShape"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %571) #6
  %572 = icmp eq %struct.TfLiteTensor* %42, null
  br i1 %572, label %573, label %575

573:                                              ; preds = %568
  %574 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 0, i32* %574, align 8, !alias.scope !32
  br label %604

575:                                              ; preds = %568
  %576 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %42, i64 0, i32 2
  %577 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %576, align 8, !noalias !32
  %578 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %577, i64 0, i32 0
  %579 = load i32, i32* %578, align 4, !noalias !32
  %580 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %577, i64 0, i32 1, i64 0
  %581 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 %579, i32* %581, align 8, !alias.scope !32
  %582 = icmp sgt i32 %579, 5
  br i1 %582, label %583, label %590

583:                                              ; preds = %575
  %584 = sext i32 %579 to i64
  %585 = shl nsw i64 %584, 2
  %586 = tail call i8* @_Znam(i64 %585) #7, !noalias !32
  %587 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %588 = bitcast i32** %587 to i8**
  store i8* %586, i8** %588, align 8, !alias.scope !32
  %589 = bitcast i8* %586 to i32*
  br label %595

590:                                              ; preds = %575
  %591 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1
  %592 = bitcast %union.anon* %591 to i32*
  %593 = sext i32 %579 to i64
  %594 = shl nsw i64 %593, 2
  br label %595

595:                                              ; preds = %590, %583
  %596 = phi i64 [ %585, %583 ], [ %594, %590 ]
  %597 = phi i32* [ %589, %583 ], [ %592, %590 ]
  %598 = bitcast i32* %597 to i8*
  %599 = bitcast i32* %580 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %598, i8* align 4 %599, i64 %596, i1 false) #6
  %600 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %42, i64 0, i32 1
  %601 = bitcast %union.TfLitePtrUnion* %600 to float**
  %602 = load float*, float** %601, align 8
  %603 = bitcast float* %602 to i8*
  br label %604

604:                                              ; preds = %573, %595
  %605 = phi i32 [ %579, %595 ], [ 0, %573 ]
  %606 = phi i8* [ %603, %595 ], [ null, %573 ]
  %607 = phi float* [ %602, %595 ], [ null, %573 ]
  %608 = icmp sgt i32 %535, 5
  %609 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %610 = getelementptr inbounds %union.anon, %union.anon* %609, i64 0, i32 0
  %611 = load i32*, i32** %610, align 8
  %612 = bitcast %union.anon* %609 to i32*
  %613 = select i1 %608, i32* %611, i32* %612
  %614 = icmp sgt i32 %535, 0
  br i1 %614, label %615, label %667

615:                                              ; preds = %604
  %616 = zext i32 %535 to i64
  %617 = add nsw i64 %616, -1
  %618 = and i64 %616, 3
  %619 = icmp ult i64 %617, 3
  br i1 %619, label %648, label %620

620:                                              ; preds = %615
  %621 = sub nsw i64 %616, %618
  br label %622

622:                                              ; preds = %630, %620
  %623 = phi i64 [ 0, %620 ], [ %645, %630 ]
  %624 = phi i32 [ 1, %620 ], [ %644, %630 ]
  %625 = phi i64 [ %621, %620 ], [ %646, %630 ]
  %626 = icmp eq i64 %623, 0
  br i1 %626, label %630, label %627

627:                                              ; preds = %622
  %628 = getelementptr inbounds i32, i32* %613, i64 %623
  %629 = load i32, i32* %628, align 4
  br label %630

630:                                              ; preds = %627, %622
  %631 = phi i32 [ %629, %627 ], [ 1, %622 ]
  %632 = mul nsw i32 %631, %624
  %633 = or i64 %623, 1
  %634 = getelementptr inbounds i32, i32* %613, i64 %633
  %635 = load i32, i32* %634, align 4
  %636 = mul nsw i32 %635, %632
  %637 = or i64 %623, 2
  %638 = getelementptr inbounds i32, i32* %613, i64 %637
  %639 = load i32, i32* %638, align 4
  %640 = mul nsw i32 %639, %636
  %641 = or i64 %623, 3
  %642 = getelementptr inbounds i32, i32* %613, i64 %641
  %643 = load i32, i32* %642, align 4
  %644 = mul nsw i32 %643, %640
  %645 = add nuw nsw i64 %623, 4
  %646 = add i64 %625, -4
  %647 = icmp eq i64 %646, 0
  br i1 %647, label %648, label %622

648:                                              ; preds = %630, %615
  %649 = phi i32 [ undef, %615 ], [ %644, %630 ]
  %650 = phi i64 [ 0, %615 ], [ %645, %630 ]
  %651 = phi i32 [ 1, %615 ], [ %644, %630 ]
  %652 = icmp eq i64 %618, 0
  br i1 %652, label %667, label %653

653:                                              ; preds = %648, %661
  %654 = phi i64 [ %664, %661 ], [ %650, %648 ]
  %655 = phi i32 [ %663, %661 ], [ %651, %648 ]
  %656 = phi i64 [ %665, %661 ], [ %618, %648 ]
  %657 = icmp eq i64 %654, 0
  br i1 %657, label %661, label %658

658:                                              ; preds = %653
  %659 = getelementptr inbounds i32, i32* %613, i64 %654
  %660 = load i32, i32* %659, align 4
  br label %661

661:                                              ; preds = %658, %653
  %662 = phi i32 [ %660, %658 ], [ 1, %653 ]
  %663 = mul nsw i32 %662, %655
  %664 = add nuw nsw i64 %654, 1
  %665 = add i64 %656, -1
  %666 = icmp eq i64 %665, 0
  br i1 %666, label %667, label %653, !llvm.loop !35

667:                                              ; preds = %648, %661, %604
  %668 = phi i32 [ 1, %604 ], [ %649, %648 ], [ %663, %661 ]
  %669 = icmp sgt i32 %605, 5
  %670 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1
  br i1 %669, label %671, label %674

671:                                              ; preds = %667
  %672 = getelementptr inbounds %union.anon, %union.anon* %670, i64 0, i32 0
  %673 = load i32*, i32** %672, align 8
  br label %677

674:                                              ; preds = %667
  %675 = bitcast %union.anon* %670 to i32*
  %676 = icmp sgt i32 %605, 0
  br i1 %676, label %677, label %781

677:                                              ; preds = %674, %671
  %678 = phi i32* [ %673, %671 ], [ %675, %674 ]
  %679 = zext i32 %605 to i64
  %680 = icmp ult i32 %605, 8
  br i1 %680, label %766, label %681

681:                                              ; preds = %677
  %682 = and i64 %679, 4294967288
  %683 = add nsw i64 %682, -8
  %684 = lshr exact i64 %683, 3
  %685 = add nuw nsw i64 %684, 1
  %686 = and i64 %685, 3
  %687 = icmp ult i64 %683, 24
  br i1 %687, label %733, label %688

688:                                              ; preds = %681
  %689 = sub nsw i64 %685, %686
  br label %690

690:                                              ; preds = %690, %688
  %691 = phi i64 [ 0, %688 ], [ %730, %690 ]
  %692 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %688 ], [ %728, %690 ]
  %693 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %688 ], [ %729, %690 ]
  %694 = phi i64 [ %689, %688 ], [ %731, %690 ]
  %695 = getelementptr inbounds i32, i32* %678, i64 %691
  %696 = bitcast i32* %695 to <4 x i32>*
  %697 = load <4 x i32>, <4 x i32>* %696, align 4
  %698 = getelementptr inbounds i32, i32* %695, i64 4
  %699 = bitcast i32* %698 to <4 x i32>*
  %700 = load <4 x i32>, <4 x i32>* %699, align 4
  %701 = mul nsw <4 x i32> %697, %692
  %702 = mul nsw <4 x i32> %700, %693
  %703 = or i64 %691, 8
  %704 = getelementptr inbounds i32, i32* %678, i64 %703
  %705 = bitcast i32* %704 to <4 x i32>*
  %706 = load <4 x i32>, <4 x i32>* %705, align 4
  %707 = getelementptr inbounds i32, i32* %704, i64 4
  %708 = bitcast i32* %707 to <4 x i32>*
  %709 = load <4 x i32>, <4 x i32>* %708, align 4
  %710 = mul nsw <4 x i32> %706, %701
  %711 = mul nsw <4 x i32> %709, %702
  %712 = or i64 %691, 16
  %713 = getelementptr inbounds i32, i32* %678, i64 %712
  %714 = bitcast i32* %713 to <4 x i32>*
  %715 = load <4 x i32>, <4 x i32>* %714, align 4
  %716 = getelementptr inbounds i32, i32* %713, i64 4
  %717 = bitcast i32* %716 to <4 x i32>*
  %718 = load <4 x i32>, <4 x i32>* %717, align 4
  %719 = mul nsw <4 x i32> %715, %710
  %720 = mul nsw <4 x i32> %718, %711
  %721 = or i64 %691, 24
  %722 = getelementptr inbounds i32, i32* %678, i64 %721
  %723 = bitcast i32* %722 to <4 x i32>*
  %724 = load <4 x i32>, <4 x i32>* %723, align 4
  %725 = getelementptr inbounds i32, i32* %722, i64 4
  %726 = bitcast i32* %725 to <4 x i32>*
  %727 = load <4 x i32>, <4 x i32>* %726, align 4
  %728 = mul nsw <4 x i32> %724, %719
  %729 = mul nsw <4 x i32> %727, %720
  %730 = add i64 %691, 32
  %731 = add i64 %694, -4
  %732 = icmp eq i64 %731, 0
  br i1 %732, label %733, label %690, !llvm.loop !36

733:                                              ; preds = %690, %681
  %734 = phi <4 x i32> [ undef, %681 ], [ %728, %690 ]
  %735 = phi <4 x i32> [ undef, %681 ], [ %729, %690 ]
  %736 = phi i64 [ 0, %681 ], [ %730, %690 ]
  %737 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %681 ], [ %728, %690 ]
  %738 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %681 ], [ %729, %690 ]
  %739 = icmp eq i64 %686, 0
  br i1 %739, label %756, label %740

740:                                              ; preds = %733, %740
  %741 = phi i64 [ %753, %740 ], [ %736, %733 ]
  %742 = phi <4 x i32> [ %751, %740 ], [ %737, %733 ]
  %743 = phi <4 x i32> [ %752, %740 ], [ %738, %733 ]
  %744 = phi i64 [ %754, %740 ], [ %686, %733 ]
  %745 = getelementptr inbounds i32, i32* %678, i64 %741
  %746 = bitcast i32* %745 to <4 x i32>*
  %747 = load <4 x i32>, <4 x i32>* %746, align 4
  %748 = getelementptr inbounds i32, i32* %745, i64 4
  %749 = bitcast i32* %748 to <4 x i32>*
  %750 = load <4 x i32>, <4 x i32>* %749, align 4
  %751 = mul nsw <4 x i32> %747, %742
  %752 = mul nsw <4 x i32> %750, %743
  %753 = add i64 %741, 8
  %754 = add i64 %744, -1
  %755 = icmp eq i64 %754, 0
  br i1 %755, label %756, label %740, !llvm.loop !37

756:                                              ; preds = %740, %733
  %757 = phi <4 x i32> [ %734, %733 ], [ %751, %740 ]
  %758 = phi <4 x i32> [ %735, %733 ], [ %752, %740 ]
  %759 = mul <4 x i32> %758, %757
  %760 = shufflevector <4 x i32> %759, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %761 = mul <4 x i32> %759, %760
  %762 = shufflevector <4 x i32> %761, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %763 = mul <4 x i32> %761, %762
  %764 = extractelement <4 x i32> %763, i32 0
  %765 = icmp eq i64 %682, %679
  br i1 %765, label %777, label %766

766:                                              ; preds = %756, %677
  %767 = phi i64 [ 0, %677 ], [ %682, %756 ]
  %768 = phi i32 [ 1, %677 ], [ %764, %756 ]
  br label %769

769:                                              ; preds = %766, %769
  %770 = phi i64 [ %775, %769 ], [ %767, %766 ]
  %771 = phi i32 [ %774, %769 ], [ %768, %766 ]
  %772 = getelementptr inbounds i32, i32* %678, i64 %770
  %773 = load i32, i32* %772, align 4
  %774 = mul nsw i32 %773, %771
  %775 = add nuw nsw i64 %770, 1
  %776 = icmp eq i64 %775, %679
  br i1 %776, label %777, label %769, !llvm.loop !38

777:                                              ; preds = %769, %756
  %778 = phi i32 [ %764, %756 ], [ %774, %769 ]
  %779 = sext i32 %778 to i64
  %780 = shl nsw i64 %779, 2
  br label %781

781:                                              ; preds = %777, %674
  %782 = phi i64 [ 4, %674 ], [ %780, %777 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %606, i8 0, i64 %782, i1 false) #6
  %783 = load i32, i32* %613, align 4
  %784 = icmp sgt i32 %783, 0
  br i1 %784, label %785, label %930

785:                                              ; preds = %781
  %786 = icmp sgt i32 %668, 0
  %787 = sext i32 %668 to i64
  %788 = zext i32 %668 to i64
  %789 = getelementptr float, float* %607, i64 %788
  %790 = and i64 %788, 4294967288
  %791 = add nsw i64 %790, -8
  %792 = lshr exact i64 %791, 3
  %793 = add nuw nsw i64 %792, 1
  %794 = icmp ult i32 %668, 8
  %795 = and i64 %788, 4294967288
  %796 = and i64 %793, 1
  %797 = icmp eq i64 %791, 0
  %798 = sub nuw nsw i64 %793, %796
  %799 = icmp eq i64 %796, 0
  %800 = icmp eq i64 %795, %788
  %801 = and i64 %788, 1
  %802 = icmp eq i64 %801, 0
  %803 = sub nsw i64 0, %788
  br label %804

804:                                              ; preds = %906, %785
  %805 = phi i32 [ %783, %785 ], [ %907, %906 ]
  %806 = phi i64 [ 0, %785 ], [ %908, %906 ]
  %807 = mul i64 %806, %787
  %808 = getelementptr float, float* %536, i64 %807
  %809 = add i64 %807, %788
  %810 = getelementptr float, float* %536, i64 %809
  br i1 %786, label %811, label %906

811:                                              ; preds = %804
  %812 = getelementptr inbounds i32, i32* %570, i64 %806
  %813 = load i32, i32* %812, align 4
  %814 = mul nsw i64 %806, %787
  %815 = mul nsw i32 %813, %668
  %816 = sext i32 %815 to i64
  br i1 %794, label %817, label %832

817:                                              ; preds = %903, %832, %811
  %818 = phi i64 [ 0, %832 ], [ 0, %811 ], [ %795, %903 ]
  %819 = xor i64 %818, -1
  br i1 %802, label %829, label %820

820:                                              ; preds = %817
  %821 = add nsw i64 %818, %814
  %822 = getelementptr inbounds float, float* %536, i64 %821
  %823 = load float, float* %822, align 4
  %824 = add nsw i64 %818, %816
  %825 = getelementptr inbounds float, float* %607, i64 %824
  %826 = load float, float* %825, align 4
  %827 = fadd float %823, %826
  store float %827, float* %825, align 4
  %828 = or i64 %818, 1
  br label %829

829:                                              ; preds = %820, %817
  %830 = phi i64 [ %828, %820 ], [ %818, %817 ]
  %831 = icmp eq i64 %819, %803
  br i1 %831, label %904, label %911

832:                                              ; preds = %811
  %833 = getelementptr float, float* %607, i64 %816
  %834 = getelementptr float, float* %789, i64 %816
  %835 = icmp ult float* %833, %810
  %836 = icmp ult float* %808, %834
  %837 = and i1 %835, %836
  br i1 %837, label %817, label %838

838:                                              ; preds = %832
  br i1 %797, label %882, label %839

839:                                              ; preds = %838, %839
  %840 = phi i64 [ %879, %839 ], [ 0, %838 ]
  %841 = phi i64 [ %880, %839 ], [ %798, %838 ]
  %842 = add nsw i64 %840, %814
  %843 = getelementptr inbounds float, float* %536, i64 %842
  %844 = bitcast float* %843 to <4 x float>*
  %845 = load <4 x float>, <4 x float>* %844, align 4, !alias.scope !39
  %846 = getelementptr inbounds float, float* %843, i64 4
  %847 = bitcast float* %846 to <4 x float>*
  %848 = load <4 x float>, <4 x float>* %847, align 4, !alias.scope !39
  %849 = add nsw i64 %840, %816
  %850 = getelementptr inbounds float, float* %607, i64 %849
  %851 = bitcast float* %850 to <4 x float>*
  %852 = load <4 x float>, <4 x float>* %851, align 4, !alias.scope !42, !noalias !39
  %853 = getelementptr inbounds float, float* %850, i64 4
  %854 = bitcast float* %853 to <4 x float>*
  %855 = load <4 x float>, <4 x float>* %854, align 4, !alias.scope !42, !noalias !39
  %856 = fadd <4 x float> %845, %852
  %857 = fadd <4 x float> %848, %855
  %858 = bitcast float* %850 to <4 x float>*
  store <4 x float> %856, <4 x float>* %858, align 4, !alias.scope !42, !noalias !39
  %859 = bitcast float* %853 to <4 x float>*
  store <4 x float> %857, <4 x float>* %859, align 4, !alias.scope !42, !noalias !39
  %860 = or i64 %840, 8
  %861 = add nsw i64 %860, %814
  %862 = getelementptr inbounds float, float* %536, i64 %861
  %863 = bitcast float* %862 to <4 x float>*
  %864 = load <4 x float>, <4 x float>* %863, align 4, !alias.scope !39
  %865 = getelementptr inbounds float, float* %862, i64 4
  %866 = bitcast float* %865 to <4 x float>*
  %867 = load <4 x float>, <4 x float>* %866, align 4, !alias.scope !39
  %868 = add nsw i64 %860, %816
  %869 = getelementptr inbounds float, float* %607, i64 %868
  %870 = bitcast float* %869 to <4 x float>*
  %871 = load <4 x float>, <4 x float>* %870, align 4, !alias.scope !42, !noalias !39
  %872 = getelementptr inbounds float, float* %869, i64 4
  %873 = bitcast float* %872 to <4 x float>*
  %874 = load <4 x float>, <4 x float>* %873, align 4, !alias.scope !42, !noalias !39
  %875 = fadd <4 x float> %864, %871
  %876 = fadd <4 x float> %867, %874
  %877 = bitcast float* %869 to <4 x float>*
  store <4 x float> %875, <4 x float>* %877, align 4, !alias.scope !42, !noalias !39
  %878 = bitcast float* %872 to <4 x float>*
  store <4 x float> %876, <4 x float>* %878, align 4, !alias.scope !42, !noalias !39
  %879 = add i64 %840, 16
  %880 = add i64 %841, -2
  %881 = icmp eq i64 %880, 0
  br i1 %881, label %882, label %839, !llvm.loop !44

882:                                              ; preds = %839, %838
  %883 = phi i64 [ 0, %838 ], [ %879, %839 ]
  br i1 %799, label %903, label %884

884:                                              ; preds = %882
  %885 = add nsw i64 %883, %814
  %886 = getelementptr inbounds float, float* %536, i64 %885
  %887 = bitcast float* %886 to <4 x float>*
  %888 = load <4 x float>, <4 x float>* %887, align 4, !alias.scope !39
  %889 = getelementptr inbounds float, float* %886, i64 4
  %890 = bitcast float* %889 to <4 x float>*
  %891 = load <4 x float>, <4 x float>* %890, align 4, !alias.scope !39
  %892 = add nsw i64 %883, %816
  %893 = getelementptr inbounds float, float* %607, i64 %892
  %894 = bitcast float* %893 to <4 x float>*
  %895 = load <4 x float>, <4 x float>* %894, align 4, !alias.scope !42, !noalias !39
  %896 = getelementptr inbounds float, float* %893, i64 4
  %897 = bitcast float* %896 to <4 x float>*
  %898 = load <4 x float>, <4 x float>* %897, align 4, !alias.scope !42, !noalias !39
  %899 = fadd <4 x float> %888, %895
  %900 = fadd <4 x float> %891, %898
  %901 = bitcast float* %893 to <4 x float>*
  store <4 x float> %899, <4 x float>* %901, align 4, !alias.scope !42, !noalias !39
  %902 = bitcast float* %896 to <4 x float>*
  store <4 x float> %900, <4 x float>* %902, align 4, !alias.scope !42, !noalias !39
  br label %903

903:                                              ; preds = %882, %884
  br i1 %800, label %904, label %817

904:                                              ; preds = %829, %911, %903
  %905 = load i32, i32* %613, align 4
  br label %906

906:                                              ; preds = %904, %804
  %907 = phi i32 [ %905, %904 ], [ %805, %804 ]
  %908 = add nuw nsw i64 %806, 1
  %909 = sext i32 %907 to i64
  %910 = icmp slt i64 %908, %909
  br i1 %910, label %804, label %930

911:                                              ; preds = %829, %911
  %912 = phi i64 [ %928, %911 ], [ %830, %829 ]
  %913 = add nsw i64 %912, %814
  %914 = getelementptr inbounds float, float* %536, i64 %913
  %915 = load float, float* %914, align 4
  %916 = add nsw i64 %912, %816
  %917 = getelementptr inbounds float, float* %607, i64 %916
  %918 = load float, float* %917, align 4
  %919 = fadd float %915, %918
  store float %919, float* %917, align 4
  %920 = add nuw nsw i64 %912, 1
  %921 = add nsw i64 %920, %814
  %922 = getelementptr inbounds float, float* %536, i64 %921
  %923 = load float, float* %922, align 4
  %924 = add nsw i64 %920, %816
  %925 = getelementptr inbounds float, float* %607, i64 %924
  %926 = load float, float* %925, align 4
  %927 = fadd float %923, %926
  store float %927, float* %925, align 4
  %928 = add nuw nsw i64 %912, 2
  %929 = icmp eq i64 %928, %788
  br i1 %929, label %904, label %911, !llvm.loop !45

930:                                              ; preds = %906, %781
  br i1 %669, label %931, label %937

931:                                              ; preds = %930
  %932 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %933 = load i32*, i32** %932, align 8
  %934 = icmp eq i32* %933, null
  br i1 %934, label %937, label %935

935:                                              ; preds = %931
  %936 = bitcast i32* %933 to i8*
  tail call void @_ZdaPv(i8* %936) #7
  br label %937

937:                                              ; preds = %930, %931, %935
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %571) #6
  %938 = icmp sgt i32 %569, 5
  br i1 %938, label %939, label %945

939:                                              ; preds = %937
  %940 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %941 = load i32*, i32** %940, align 8
  %942 = icmp eq i32* %941, null
  br i1 %942, label %945, label %943

943:                                              ; preds = %939
  %944 = bitcast i32* %941 to i8*
  tail call void @_ZdaPv(i8* %944) #7
  br label %945

945:                                              ; preds = %937, %939, %943
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %537) #6
  %946 = xor i1 %608, true
  %947 = icmp eq i32* %611, null
  %948 = or i1 %947, %946
  br i1 %948, label %951, label %949

949:                                              ; preds = %945
  %950 = bitcast i32* %611 to i8*
  tail call void @_ZdaPv(i8* %950) #7
  br label %951

951:                                              ; preds = %945, %949
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %502) #6
  br label %956

952:                                              ; preds = %49
  %953 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %954 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %953, align 8
  %955 = tail call i8* @TfLiteTypeGetName(i32 %51) #6
  tail call void (%struct.TfLiteContext*, i8*, ...) %954(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.17, i64 0, i64 0), i8* %955) #6
  br label %956

956:                                              ; preds = %500, %951, %46, %952
  %957 = phi i32 [ 1, %952 ], [ %47, %46 ], [ 0, %951 ], [ 0, %500 ]
  ret i32 %957
}

declare i8* @TfLiteTypeGetName(i32) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden nonnull %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin20Register_SEGMENT_SUMEv() local_unnamed_addr #3 {
  ret %struct.TfLiteRegistration* @_ZZN6tflite3ops7builtin20Register_SEGMENT_SUMEvE1r
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = !{!5}
!5 = distinct !{!5, !6, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!6 = distinct !{!6, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!7 = !{!8}
!8 = distinct !{!8, !9, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!9 = distinct !{!9, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!10 = !{!11}
!11 = distinct !{!11, !12, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!12 = distinct !{!12, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!13 = distinct !{!13, !3}
!14 = distinct !{!14, !15}
!15 = !{!"llvm.loop.isvectorized", i32 1}
!16 = distinct !{!16, !3}
!17 = distinct !{!17, !18, !15}
!18 = !{!"llvm.loop.unroll.runtime.disable"}
!19 = !{!20}
!20 = distinct !{!20, !21}
!21 = distinct !{!21, !"LVerDomain"}
!22 = !{!23}
!23 = distinct !{!23, !21}
!24 = distinct !{!24, !15}
!25 = distinct !{!25, !15}
!26 = !{!27}
!27 = distinct !{!27, !28, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!28 = distinct !{!28, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!29 = !{!30}
!30 = distinct !{!30, !31, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!31 = distinct !{!31, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!32 = !{!33}
!33 = distinct !{!33, !34, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!34 = distinct !{!34, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!35 = distinct !{!35, !3}
!36 = distinct !{!36, !15}
!37 = distinct !{!37, !3}
!38 = distinct !{!38, !18, !15}
!39 = !{!40}
!40 = distinct !{!40, !41}
!41 = distinct !{!41, !"LVerDomain"}
!42 = !{!43}
!43 = distinct !{!43, !41}
!44 = distinct !{!44, !15}
!45 = distinct !{!45, !15}
