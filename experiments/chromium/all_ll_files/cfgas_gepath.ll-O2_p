; ModuleID = '../../third_party/pdfium/xfa/fgas/graphics/cfgas_gepath.cpp'
source_filename = "../../third_party/pdfium/xfa/fgas/graphics/cfgas_gepath.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CFGAS_GEPath = type { %class.CFX_PathData }
%class.CFX_PathData = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %class.FX_PATHPOINT*, %class.FX_PATHPOINT*, %"class.std::__1::__compressed_pair" }
%class.FX_PATHPOINT = type <{ %class.CFX_PTemplate, i8, i8, [2 x i8] }>
%class.CFX_PTemplate = type { float, float }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.FX_PATHPOINT* }
%class.CFX_STemplate = type { float, float }
%class.CFX_RectF = type { float, float, float, float }
%class.CFX_Matrix = type { float, float, float, float, float, float }

@_ZN12CFGAS_GEPathC1Ev = hidden unnamed_addr alias void (%class.CFGAS_GEPath*), void (%class.CFGAS_GEPath*)* @_ZN12CFGAS_GEPathC2Ev
@_ZN12CFGAS_GEPathD1Ev = hidden unnamed_addr alias void (%class.CFGAS_GEPath*), void (%class.CFGAS_GEPath*)* @_ZN12CFGAS_GEPathD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CFGAS_GEPathC2Ev(%class.CFGAS_GEPath*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFGAS_GEPath, %class.CFGAS_GEPath* %0, i64 0, i32 0
  tail call void @_ZN12CFX_PathDataC1Ev(%class.CFX_PathData* %2) #5
  ret void
}

declare void @_ZN12CFX_PathDataC1Ev(%class.CFX_PathData*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CFGAS_GEPathD2Ev(%class.CFGAS_GEPath*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFGAS_GEPath, %class.CFGAS_GEPath* %0, i64 0, i32 0
  tail call void @_ZN12CFX_PathDataD1Ev(%class.CFX_PathData* %2) #5
  ret void
}

; Function Attrs: nounwind
declare void @_ZN12CFX_PathDataD1Ev(%class.CFX_PathData*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CFGAS_GEPath5ClearEv(%class.CFGAS_GEPath*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFGAS_GEPath, %class.CFGAS_GEPath* %0, i64 0, i32 0
  tail call void @_ZN12CFX_PathData5ClearEv(%class.CFX_PathData* %2) #5
  ret void
}

declare void @_ZN12CFX_PathData5ClearEv(%class.CFX_PathData*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CFGAS_GEPath5CloseEv(%class.CFGAS_GEPath*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFGAS_GEPath, %class.CFGAS_GEPath* %0, i64 0, i32 0
  tail call void @_ZN12CFX_PathData9ClosePathEv(%class.CFX_PathData* %2) #5
  ret void
}

declare void @_ZN12CFX_PathData9ClosePathEv(%class.CFX_PathData*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CFGAS_GEPath6MoveToERK13CFX_PTemplateIfE(%class.CFGAS_GEPath*, %class.CFX_PTemplate* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CFGAS_GEPath, %class.CFGAS_GEPath* %0, i64 0, i32 0
  tail call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* %3, %class.CFX_PTemplate* dereferenceable(8) %1, i8 zeroext 2) #5
  ret void
}

declare void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData*, %class.CFX_PTemplate* dereferenceable(8), i8 zeroext) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CFGAS_GEPath6LineToERK13CFX_PTemplateIfE(%class.CFGAS_GEPath*, %class.CFX_PTemplate* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CFGAS_GEPath, %class.CFGAS_GEPath* %0, i64 0, i32 0
  tail call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* %3, %class.CFX_PTemplate* dereferenceable(8) %1, i8 zeroext 0) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CFGAS_GEPath8BezierToERK13CFX_PTemplateIfES3_S3_(%class.CFGAS_GEPath*, %class.CFX_PTemplate* dereferenceable(8), %class.CFX_PTemplate* dereferenceable(8), %class.CFX_PTemplate* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %class.CFGAS_GEPath, %class.CFGAS_GEPath* %0, i64 0, i32 0
  tail call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* %5, %class.CFX_PTemplate* dereferenceable(8) %1, i8 zeroext 1) #5
  tail call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* %5, %class.CFX_PTemplate* dereferenceable(8) %2, i8 zeroext 1) #5
  tail call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* %5, %class.CFX_PTemplate* dereferenceable(8) %3, i8 zeroext 1) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CFGAS_GEPath5ArcToERK13CFX_PTemplateIfERK13CFX_STemplateIfEff(%class.CFGAS_GEPath*, %class.CFX_PTemplate* nocapture readonly dereferenceable(8), %class.CFX_STemplate* nocapture readonly dereferenceable(8), float, float) local_unnamed_addr #0 align 2 {
  %6 = alloca %class.CFX_PTemplate, align 4
  %7 = getelementptr inbounds %class.CFX_STemplate, %class.CFX_STemplate* %2, i64 0, i32 0
  %8 = load float, float* %7, align 4, !noalias !2
  %9 = fmul float %8, 5.000000e-01
  %10 = getelementptr inbounds %class.CFX_STemplate, %class.CFX_STemplate* %2, i64 0, i32 1
  %11 = load float, float* %10, align 4, !noalias !2
  %12 = fmul float %11, 5.000000e-01
  %13 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %1, i64 0, i32 0
  %14 = load float, float* %13, align 4
  %15 = fadd float %9, %14
  %16 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %1, i64 0, i32 1
  %17 = load float, float* %16, align 4
  %18 = fadd float %12, %17
  %19 = fmul float %4, 5.000000e-01
  %20 = tail call float @cosf(float %19) #5
  %21 = tail call float @sinf(float %19) #5
  %22 = fsub float 1.000000e+00, %20
  %23 = fmul float %22, 4.000000e+00
  %24 = fdiv float %23, 3.000000e+00
  %25 = fmul float %20, %24
  %26 = fdiv float %25, %21
  %27 = fsub float %21, %26
  %28 = fadd float %20, %24
  %29 = fsub float -0.000000e+00, %27
  %30 = fadd float %19, %3
  %31 = tail call float @sinf(float %30) #5
  %32 = tail call float @cosf(float %30) #5
  %33 = bitcast %class.CFX_PTemplate* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #5
  %34 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %6, i64 0, i32 0
  %35 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %6, i64 0, i32 1
  %36 = fmul float %32, %28
  %37 = fmul float %31, %29
  %38 = fsub float %36, %37
  %39 = fmul float %9, %38
  %40 = fadd float %15, %39
  store float %40, float* %34, align 4
  %41 = fmul float %31, %28
  %42 = fmul float %32, %29
  %43 = fadd float %41, %42
  %44 = fmul float %12, %43
  %45 = fadd float %18, %44
  store float %45, float* %35, align 4
  %46 = getelementptr inbounds %class.CFGAS_GEPath, %class.CFGAS_GEPath* %0, i64 0, i32 0
  call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* %46, %class.CFX_PTemplate* nonnull dereferenceable(8) %6, i8 zeroext 1) #5
  %47 = fmul float %31, %27
  %48 = fsub float %36, %47
  %49 = fmul float %9, %48
  %50 = fadd float %15, %49
  store float %50, float* %34, align 4
  %51 = fmul float %32, %27
  %52 = fadd float %41, %51
  %53 = fmul float %12, %52
  %54 = fadd float %18, %53
  store float %54, float* %35, align 4
  call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* %46, %class.CFX_PTemplate* nonnull dereferenceable(8) %6, i8 zeroext 1) #5
  %55 = fadd float %3, %4
  %56 = call float @cosf(float %55) #5
  %57 = fmul float %9, %56
  %58 = fadd float %15, %57
  store float %58, float* %34, align 4
  %59 = call float @sinf(float %55) #5
  %60 = fmul float %12, %59
  %61 = fadd float %18, %60
  store float %61, float* %35, align 4
  call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* %46, %class.CFX_PTemplate* nonnull dereferenceable(8) %6, i8 zeroext 1) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #5
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CFGAS_GEPath13ArcToInternalERK13CFX_PTemplateIfERK13CFX_STemplateIfEff(%class.CFGAS_GEPath*, %class.CFX_PTemplate* nocapture readonly dereferenceable(8), %class.CFX_STemplate* nocapture readonly dereferenceable(8), float, float) local_unnamed_addr #0 align 2 {
  %6 = alloca %class.CFX_PTemplate, align 4
  %7 = fmul float %4, 5.000000e-01
  %8 = tail call float @cosf(float %7) #5
  %9 = tail call float @sinf(float %7) #5
  %10 = fsub float 1.000000e+00, %8
  %11 = fmul float %10, 4.000000e+00
  %12 = fdiv float %11, 3.000000e+00
  %13 = fmul float %8, %12
  %14 = fdiv float %13, %9
  %15 = fsub float %9, %14
  %16 = fadd float %8, %12
  %17 = fsub float -0.000000e+00, %15
  %18 = fadd float %7, %3
  %19 = tail call float @sinf(float %18) #5
  %20 = tail call float @cosf(float %18) #5
  %21 = bitcast %class.CFX_PTemplate* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #5
  %22 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %6, i64 0, i32 0
  %23 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %6, i64 0, i32 1
  %24 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %1, i64 0, i32 0
  %25 = load float, float* %24, align 4
  %26 = getelementptr inbounds %class.CFX_STemplate, %class.CFX_STemplate* %2, i64 0, i32 0
  %27 = load float, float* %26, align 4
  %28 = fmul float %20, %16
  %29 = fmul float %19, %17
  %30 = fsub float %28, %29
  %31 = fmul float %30, %27
  %32 = fadd float %25, %31
  store float %32, float* %22, align 4
  %33 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %1, i64 0, i32 1
  %34 = load float, float* %33, align 4
  %35 = getelementptr inbounds %class.CFX_STemplate, %class.CFX_STemplate* %2, i64 0, i32 1
  %36 = load float, float* %35, align 4
  %37 = fmul float %19, %16
  %38 = fmul float %20, %17
  %39 = fadd float %37, %38
  %40 = fmul float %39, %36
  %41 = fadd float %34, %40
  store float %41, float* %23, align 4
  %42 = getelementptr inbounds %class.CFGAS_GEPath, %class.CFGAS_GEPath* %0, i64 0, i32 0
  call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* %42, %class.CFX_PTemplate* nonnull dereferenceable(8) %6, i8 zeroext 1) #5
  %43 = load float, float* %24, align 4
  %44 = load float, float* %26, align 4
  %45 = fmul float %19, %15
  %46 = fsub float %28, %45
  %47 = fmul float %46, %44
  %48 = fadd float %43, %47
  store float %48, float* %22, align 4
  %49 = load float, float* %33, align 4
  %50 = load float, float* %35, align 4
  %51 = fmul float %20, %15
  %52 = fadd float %37, %51
  %53 = fmul float %52, %50
  %54 = fadd float %49, %53
  store float %54, float* %23, align 4
  call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* %42, %class.CFX_PTemplate* nonnull dereferenceable(8) %6, i8 zeroext 1) #5
  %55 = load float, float* %24, align 4
  %56 = load float, float* %26, align 4
  %57 = fadd float %3, %4
  %58 = call float @cosf(float %57) #5
  %59 = fmul float %56, %58
  %60 = fadd float %55, %59
  store float %60, float* %22, align 4
  %61 = load float, float* %33, align 4
  %62 = load float, float* %35, align 4
  %63 = call float @sinf(float %57) #5
  %64 = fmul float %62, %63
  %65 = fadd float %61, %64
  store float %65, float* %23, align 4
  call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* %42, %class.CFX_PTemplate* nonnull dereferenceable(8) %6, i8 zeroext 1) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #5
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CFGAS_GEPath7AddLineERK13CFX_PTemplateIfES3_(%class.CFGAS_GEPath*, %class.CFX_PTemplate* dereferenceable(8), %class.CFX_PTemplate* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.CFGAS_GEPath, %class.CFGAS_GEPath* %0, i64 0, i32 0
  tail call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* %4, %class.CFX_PTemplate* dereferenceable(8) %1, i8 zeroext 2) #5
  tail call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* %4, %class.CFX_PTemplate* dereferenceable(8) %2, i8 zeroext 0) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CFGAS_GEPath12AddRectangleEffff(%class.CFGAS_GEPath*, float, float, float, float) local_unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %class.CFGAS_GEPath, %class.CFGAS_GEPath* %0, i64 0, i32 0
  %7 = fadd float %1, %3
  %8 = fadd float %2, %4
  tail call void @_ZN12CFX_PathData10AppendRectEffff(%class.CFX_PathData* %6, float %1, float %2, float %7, float %8) #5
  ret void
}

declare void @_ZN12CFX_PathData10AppendRectEffff(%class.CFX_PathData*, float, float, float, float) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CFGAS_GEPath10AddEllipseERK9CFX_RectF(%class.CFGAS_GEPath*, %class.CFX_RectF* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = alloca %class.CFX_PTemplate, align 4
  %4 = alloca %class.CFX_STemplate, align 4
  %5 = bitcast %class.CFX_PTemplate* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #5
  %6 = bitcast %class.CFX_RectF* %1 to i32*
  %7 = load i32, i32* %6, align 4, !noalias !5
  %8 = getelementptr inbounds %class.CFX_RectF, %class.CFX_RectF* %1, i64 0, i32 1
  %9 = bitcast float* %8 to i32*
  %10 = load i32, i32* %9, align 4, !noalias !5
  %11 = bitcast %class.CFX_PTemplate* %3 to i32*
  store i32 %7, i32* %11, align 4, !alias.scope !5
  %12 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %3, i64 0, i32 1
  %13 = bitcast float* %12 to i32*
  store i32 %10, i32* %13, align 4, !alias.scope !5
  %14 = bitcast %class.CFX_STemplate* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #5
  %15 = getelementptr inbounds %class.CFX_RectF, %class.CFX_RectF* %1, i64 0, i32 2
  %16 = bitcast float* %15 to i32*
  %17 = load i32, i32* %16, align 4, !noalias !8
  %18 = getelementptr inbounds %class.CFX_RectF, %class.CFX_RectF* %1, i64 0, i32 3
  %19 = bitcast float* %18 to i32*
  %20 = load i32, i32* %19, align 4, !noalias !8
  %21 = bitcast %class.CFX_STemplate* %4 to i32*
  store i32 %17, i32* %21, align 4, !alias.scope !8
  %22 = getelementptr inbounds %class.CFX_STemplate, %class.CFX_STemplate* %4, i64 0, i32 1
  %23 = bitcast float* %22 to i32*
  store i32 %20, i32* %23, align 4, !alias.scope !8
  call void @_ZN12CFGAS_GEPath6AddArcERK13CFX_PTemplateIfERK13CFX_STemplateIfEff(%class.CFGAS_GEPath* %0, %class.CFX_PTemplate* nonnull dereferenceable(8) %3, %class.CFX_STemplate* nonnull dereferenceable(8) %4, float 0.000000e+00, float 0x401921FB60000000)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CFGAS_GEPath6AddArcERK13CFX_PTemplateIfERK13CFX_STemplateIfEff(%class.CFGAS_GEPath*, %class.CFX_PTemplate* nocapture readonly dereferenceable(8), %class.CFX_STemplate* nocapture readonly dereferenceable(8), float, float) local_unnamed_addr #0 align 2 {
  %6 = alloca %class.CFX_PTemplate, align 4
  %7 = alloca %class.CFX_PTemplate, align 4
  %8 = fcmp oeq float %4, 0.000000e+00
  br i1 %8, label %115, label %9

9:                                                ; preds = %5
  %10 = fcmp ogt float %3, 0x401921FB60000000
  br i1 %10, label %14, label %11

11:                                               ; preds = %14, %9
  %12 = phi float [ %3, %9 ], [ %16, %14 ]
  %13 = fcmp olt float %12, 0.000000e+00
  br i1 %13, label %18, label %22

14:                                               ; preds = %9, %14
  %15 = phi float [ %16, %14 ], [ %3, %9 ]
  %16 = fadd float %15, 0xC01921FB60000000
  %17 = fcmp ogt float %16, 0x401921FB60000000
  br i1 %17, label %14, label %11

18:                                               ; preds = %11, %18
  %19 = phi float [ %20, %18 ], [ %12, %11 ]
  %20 = fadd float %19, 0x401921FB60000000
  %21 = fcmp olt float %20, 0.000000e+00
  br i1 %21, label %18, label %22

22:                                               ; preds = %18, %11
  %23 = phi float [ %12, %11 ], [ %20, %18 ]
  %24 = fcmp oge float %4, 0x401921FB60000000
  %25 = select i1 %24, float 0x401921FB60000000, float %4
  %26 = fcmp ole float %25, 0xC01921FB60000000
  %27 = select i1 %26, float 0xC01921FB60000000, float %25
  %28 = getelementptr inbounds %class.CFX_STemplate, %class.CFX_STemplate* %2, i64 0, i32 0
  %29 = load float, float* %28, align 4, !noalias !11
  %30 = fmul float %29, 5.000000e-01
  %31 = getelementptr inbounds %class.CFX_STemplate, %class.CFX_STemplate* %2, i64 0, i32 1
  %32 = load float, float* %31, align 4, !noalias !11
  %33 = fmul float %32, 5.000000e-01
  %34 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %1, i64 0, i32 0
  %35 = load float, float* %34, align 4
  %36 = fadd float %30, %35
  %37 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %1, i64 0, i32 1
  %38 = load float, float* %37, align 4
  %39 = fadd float %33, %38
  %40 = getelementptr inbounds %class.CFGAS_GEPath, %class.CFGAS_GEPath* %0, i64 0, i32 0
  %41 = bitcast %class.CFX_PTemplate* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %41) #5
  %42 = tail call float @cosf(float %23) #5
  %43 = fmul float %30, %42
  %44 = tail call float @sinf(float %23) #5
  %45 = fmul float %33, %44
  %46 = fadd float %36, %43
  %47 = fadd float %39, %45
  %48 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %7, i64 0, i32 0
  store float %46, float* %48, align 4, !alias.scope !14
  %49 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %7, i64 0, i32 1
  store float %47, float* %49, align 4, !alias.scope !14
  call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* %40, %class.CFX_PTemplate* nonnull dereferenceable(8) %7, i8 zeroext 2) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41) #5
  %50 = fcmp olt float %27, 0.000000e+00
  %51 = fadd float %27, 0xBF847AE140000000
  %52 = fadd float %27, 0x3F847AE140000000
  %53 = bitcast %class.CFX_PTemplate* %6 to i8*
  %54 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %6, i64 0, i32 0
  %55 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %6, i64 0, i32 1
  br label %56

56:                                               ; preds = %70, %22
  %57 = phi float [ %23, %22 ], [ %106, %70 ]
  %58 = phi float [ 0.000000e+00, %22 ], [ %71, %70 ]
  %59 = phi i8 [ 0, %22 ], [ %73, %70 ]
  br i1 %50, label %60, label %65

60:                                               ; preds = %56
  %61 = fadd float %58, 0xBFF921FB60000000
  %62 = fcmp ugt float %61, %52
  br i1 %62, label %70, label %63

63:                                               ; preds = %60
  %64 = fsub float %27, %58
  br label %70

65:                                               ; preds = %56
  %66 = fadd float %58, 0x3FF921FB60000000
  %67 = fcmp ult float %66, %51
  br i1 %67, label %70, label %68

68:                                               ; preds = %65
  %69 = fsub float %27, %58
  br label %70

70:                                               ; preds = %60, %65, %68, %63
  %71 = phi float [ %61, %63 ], [ %61, %60 ], [ %66, %68 ], [ %66, %65 ]
  %72 = phi float [ %64, %63 ], [ 0xBFF921FB60000000, %60 ], [ %69, %68 ], [ 0x3FF921FB60000000, %65 ]
  %73 = phi i8 [ 1, %63 ], [ %59, %60 ], [ 1, %68 ], [ %59, %65 ]
  %74 = fmul float %72, 5.000000e-01
  %75 = call float @cosf(float %74) #5
  %76 = call float @sinf(float %74) #5
  %77 = fsub float 1.000000e+00, %75
  %78 = fmul float %77, 4.000000e+00
  %79 = fdiv float %78, 3.000000e+00
  %80 = fmul float %75, %79
  %81 = fdiv float %80, %76
  %82 = fsub float %76, %81
  %83 = fadd float %75, %79
  %84 = fsub float -0.000000e+00, %82
  %85 = fadd float %57, %74
  %86 = call float @sinf(float %85) #5
  %87 = call float @cosf(float %85) #5
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %53) #5
  %88 = fmul float %87, %83
  %89 = fmul float %86, %84
  %90 = fsub float %88, %89
  %91 = fmul float %30, %90
  %92 = fadd float %36, %91
  store float %92, float* %54, align 4
  %93 = fmul float %86, %83
  %94 = fmul float %87, %84
  %95 = fadd float %93, %94
  %96 = fmul float %33, %95
  %97 = fadd float %39, %96
  store float %97, float* %55, align 4
  call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* %40, %class.CFX_PTemplate* nonnull dereferenceable(8) %6, i8 zeroext 1) #5
  %98 = fmul float %86, %82
  %99 = fsub float %88, %98
  %100 = fmul float %30, %99
  %101 = fadd float %36, %100
  store float %101, float* %54, align 4
  %102 = fmul float %87, %82
  %103 = fadd float %93, %102
  %104 = fmul float %33, %103
  %105 = fadd float %39, %104
  store float %105, float* %55, align 4
  call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* %40, %class.CFX_PTemplate* nonnull dereferenceable(8) %6, i8 zeroext 1) #5
  %106 = fadd float %57, %72
  %107 = call float @cosf(float %106) #5
  %108 = fmul float %30, %107
  %109 = fadd float %36, %108
  store float %109, float* %54, align 4
  %110 = call float @sinf(float %106) #5
  %111 = fmul float %33, %110
  %112 = fadd float %39, %111
  store float %112, float* %55, align 4
  call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* %40, %class.CFX_PTemplate* nonnull dereferenceable(8) %6, i8 zeroext 1) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %53) #5
  %113 = and i8 %73, 1
  %114 = icmp eq i8 %113, 0
  br i1 %114, label %56, label %115

115:                                              ; preds = %70, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CFGAS_GEPath10AddSubpathERKS_(%class.CFGAS_GEPath*, %class.CFGAS_GEPath* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CFGAS_GEPath, %class.CFGAS_GEPath* %0, i64 0, i32 0
  %4 = getelementptr inbounds %class.CFGAS_GEPath, %class.CFGAS_GEPath* %1, i64 0, i32 0
  tail call void @_ZN12CFX_PathData6AppendERKS_PK10CFX_Matrix(%class.CFX_PathData* %3, %class.CFX_PathData* dereferenceable(24) %4, %class.CFX_Matrix* null) #5
  ret void
}

declare void @_ZN12CFX_PathData6AppendERKS_PK10CFX_Matrix(%class.CFX_PathData*, %class.CFX_PathData* dereferenceable(24), %class.CFX_Matrix*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CFGAS_GEPath11TransformByERK10CFX_Matrix(%class.CFGAS_GEPath*, %class.CFX_Matrix* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CFGAS_GEPath, %class.CFGAS_GEPath* %0, i64 0, i32 0
  tail call void @_ZN12CFX_PathData9TransformERK10CFX_Matrix(%class.CFX_PathData* %3, %class.CFX_Matrix* dereferenceable(24) %1) #5
  ret void
}

declare void @_ZN12CFX_PathData9TransformERK10CFX_Matrix(%class.CFX_PathData*, %class.CFX_Matrix* dereferenceable(24)) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare float @cosf(float) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare float @sinf(float) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK13CFX_STemplateIfEdvEf: argument 0"}
!4 = distinct !{!4, !"_ZNK13CFX_STemplateIfEdvEf"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZNK9CFX_RectF7TopLeftEv: argument 0"}
!7 = distinct !{!7, !"_ZNK9CFX_RectF7TopLeftEv"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZNK9CFX_RectF4SizeEv: argument 0"}
!10 = distinct !{!10, !"_ZNK9CFX_RectF4SizeEv"}
!11 = !{!12}
!12 = distinct !{!12, !13, !"_ZNK13CFX_STemplateIfEdvEf: argument 0"}
!13 = distinct !{!13, !"_ZNK13CFX_STemplateIfEdvEf"}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZNK13CFX_PTemplateIfEplERKS0_: argument 0"}
!16 = distinct !{!16, !"_ZNK13CFX_PTemplateIfEplERKS0_"}
