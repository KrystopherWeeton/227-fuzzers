; ModuleID = '../../third_party/nasm/asm/directbl.c'
source_filename = "../../third_party/nasm/asm/directbl.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.perfect_hash = type { i64, i32, i32, i32, i32, i16*, i8** }

@.str = private unnamed_addr constant [9 x i8] c"absolute\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"bits\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"common\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"cpu\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"debug\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"default\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"extern\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"global\00", align 1
@.str.9 = private unnamed_addr constant [7 x i8] c"static\00", align 1
@.str.10 = private unnamed_addr constant [5 x i8] c"list\00", align 1
@.str.11 = private unnamed_addr constant [8 x i8] c"section\00", align 1
@.str.12 = private unnamed_addr constant [8 x i8] c"segment\00", align 1
@.str.13 = private unnamed_addr constant [8 x i8] c"warning\00", align 1
@.str.14 = private unnamed_addr constant [10 x i8] c"sectalign\00", align 1
@.str.15 = private unnamed_addr constant [7 x i8] c"pragma\00", align 1
@.str.16 = private unnamed_addr constant [9 x i8] c"required\00", align 1
@.str.17 = private unnamed_addr constant [7 x i8] c"export\00", align 1
@.str.18 = private unnamed_addr constant [6 x i8] c"group\00", align 1
@.str.19 = private unnamed_addr constant [7 x i8] c"import\00", align 1
@.str.20 = private unnamed_addr constant [8 x i8] c"library\00", align 1
@.str.21 = private unnamed_addr constant [4 x i8] c"map\00", align 1
@.str.22 = private unnamed_addr constant [7 x i8] c"module\00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c"org\00", align 1
@.str.24 = private unnamed_addr constant [6 x i8] c"osabi\00", align 1
@.str.25 = private unnamed_addr constant [8 x i8] c"safeseh\00", align 1
@.str.26 = private unnamed_addr constant [10 x i8] c"uppercase\00", align 1
@.str.27 = private unnamed_addr constant [7 x i8] c"prefix\00", align 1
@.str.28 = private unnamed_addr constant [7 x i8] c"suffix\00", align 1
@.str.29 = private unnamed_addr constant [8 x i8] c"gprefix\00", align 1
@.str.30 = private unnamed_addr constant [8 x i8] c"gsuffix\00", align 1
@.str.31 = private unnamed_addr constant [8 x i8] c"lprefix\00", align 1
@.str.32 = private unnamed_addr constant [8 x i8] c"lsuffix\00", align 1
@.str.33 = private unnamed_addr constant [6 x i8] c"limit\00", align 1
@.str.34 = private unnamed_addr constant [8 x i8] c"options\00", align 1
@.str.35 = private unnamed_addr constant [24 x i8] c"subsections_via_symbols\00", align 1
@.str.36 = private unnamed_addr constant [14 x i8] c"no_dead_strip\00", align 1
@.str.37 = private unnamed_addr constant [8 x i8] c"maxdump\00", align 1
@.str.38 = private unnamed_addr constant [9 x i8] c"nodepend\00", align 1
@.str.39 = private unnamed_addr constant [12 x i8] c"noseclabels\00", align 1
@directive_tbl = hidden constant [40 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.35, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.36, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.37, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.38, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.39, i32 0, i32 0)], align 16
@directive_hashvals = internal constant [64 x i16] [i16 0, i16 21845, i16 0, i16 21845, i16 27, i16 -5, i16 0, i16 11, i16 0, i16 8, i16 21845, i16 21845, i16 0, i16 -5, i16 29, i16 15, i16 21845, i16 21845, i16 21845, i16 -17, i16 21845, i16 2, i16 20, i16 -4, i16 -23, i16 17, i16 34, i16 7, i16 12, i16 -21, i16 17, i16 -14, i16 0, i16 21845, i16 21845, i16 21845, i16 0, i16 0, i16 6, i16 0, i16 23, i16 2, i16 -29, i16 33, i16 12, i16 24, i16 3, i16 21845, i16 27, i16 -11, i16 13, i16 30, i16 10, i16 18, i16 29, i16 36, i16 21845, i16 21845, i16 1, i16 10, i16 28, i16 21845, i16 20, i16 14], align 16
@directive_hash = hidden local_unnamed_addr constant %struct.perfect_hash { i64 532086403837837932, i32 31, i32 40, i32 3, i32 1, i16* getelementptr inbounds ([64 x i16], [64 x i16]* @directive_hashvals, i32 0, i32 0), i8** getelementptr inbounds ([40 x i8*], [40 x i8*]* @directive_tbl, i32 0, i32 0) }, align 8

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
