; ModuleID = '../../third_party/nasm/nasmlib/hashtbl.c'
source_filename = "../../third_party/nasm/nasmlib/hashtbl.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hash_table = type { %struct.hash_node*, i64, i64, i64 }
%struct.hash_node = type { i64, i8*, i64, i8* }
%struct.hash_insert = type { %struct.hash_table*, %struct.hash_node*, %struct.hash_node }
%struct.hash_iterator = type { %struct.hash_table*, %struct.hash_node* }

; Function Attrs: nounwind ssp uwtable
define hidden i8** @hash_findb(%struct.hash_table*, i8*, i64, %struct.hash_insert*) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 0
  %6 = load %struct.hash_node*, %struct.hash_node** %5, align 8
  %7 = tail call i64 @crc64b(i64 -1, i8* %1, i64 %2) #7
  %8 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %9, -1
  %11 = lshr i64 %7, 32
  %12 = and i64 %10, %11
  %13 = or i64 %12, 1
  %14 = icmp eq %struct.hash_node* %6, null
  br i1 %14, label %44, label %15, !prof !2

15:                                               ; preds = %4
  %16 = and i64 %7, %10
  %17 = getelementptr inbounds %struct.hash_node, %struct.hash_node* %6, i64 %16
  %18 = getelementptr inbounds %struct.hash_node, %struct.hash_node* %6, i64 %16, i32 1
  %19 = load i8*, i8** %18, align 8
  %20 = icmp eq i8* %19, null
  br i1 %20, label %44, label %21

21:                                               ; preds = %15, %36
  %22 = phi i8* [ %40, %36 ], [ %19, %15 ]
  %23 = phi i64 [ %38, %36 ], [ %16, %15 ]
  %24 = getelementptr inbounds %struct.hash_node, %struct.hash_node* %6, i64 %23, i32 0
  %25 = load i64, i64* %24, align 8
  %26 = icmp eq i64 %7, %25
  br i1 %26, label %27, label %36

27:                                               ; preds = %21
  %28 = getelementptr inbounds %struct.hash_node, %struct.hash_node* %6, i64 %23, i32 2
  %29 = load i64, i64* %28, align 8
  %30 = icmp eq i64 %29, %2
  br i1 %30, label %31, label %36

31:                                               ; preds = %27
  %32 = tail call i32 @bcmp(i8* %1, i8* nonnull %22, i64 %2)
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %36

34:                                               ; preds = %31
  %35 = getelementptr inbounds %struct.hash_node, %struct.hash_node* %6, i64 %23, i32 3
  br label %54

36:                                               ; preds = %31, %27, %21
  %37 = add i64 %23, %13
  %38 = and i64 %37, %10
  %39 = getelementptr inbounds %struct.hash_node, %struct.hash_node* %6, i64 %38, i32 1
  %40 = load i8*, i8** %39, align 8
  %41 = icmp eq i8* %40, null
  br i1 %41, label %42, label %21

42:                                               ; preds = %36
  %43 = getelementptr inbounds %struct.hash_node, %struct.hash_node* %6, i64 %38
  br label %44

44:                                               ; preds = %42, %15, %4
  %45 = phi %struct.hash_node* [ null, %4 ], [ %17, %15 ], [ %43, %42 ]
  %46 = icmp eq %struct.hash_insert* %3, null
  br i1 %46, label %54, label %47

47:                                               ; preds = %44
  %48 = getelementptr inbounds %struct.hash_insert, %struct.hash_insert* %3, i64 0, i32 2, i32 0
  store i64 %7, i64* %48, align 8
  %49 = getelementptr inbounds %struct.hash_insert, %struct.hash_insert* %3, i64 0, i32 2, i32 1
  store i8* %1, i8** %49, align 8
  %50 = getelementptr inbounds %struct.hash_insert, %struct.hash_insert* %3, i64 0, i32 2, i32 2
  store i64 %2, i64* %50, align 8
  %51 = getelementptr inbounds %struct.hash_insert, %struct.hash_insert* %3, i64 0, i32 2, i32 3
  store i8* null, i8** %51, align 8
  %52 = getelementptr inbounds %struct.hash_insert, %struct.hash_insert* %3, i64 0, i32 0
  store %struct.hash_table* %0, %struct.hash_table** %52, align 8
  %53 = getelementptr inbounds %struct.hash_insert, %struct.hash_insert* %3, i64 0, i32 1
  store %struct.hash_node* %45, %struct.hash_node** %53, align 8
  br label %54

54:                                               ; preds = %47, %44, %34
  %55 = phi i8** [ %35, %34 ], [ null, %44 ], [ null, %47 ]
  ret i8** %55
}

declare i64 @crc64b(i64, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i8** @hash_find(%struct.hash_table*, i8*, %struct.hash_insert*) local_unnamed_addr #0 {
  %4 = tail call i64 @strlen(i8* %1) #8
  %5 = add i64 %4, 1
  %6 = tail call i8** @hash_findb(%struct.hash_table* %0, i8* %1, i64 %5, %struct.hash_insert* %2)
  ret i8** %6
}

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i8** @hash_findib(%struct.hash_table*, i8*, i64, %struct.hash_insert*) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 0
  %6 = load %struct.hash_node*, %struct.hash_node** %5, align 8
  %7 = tail call i64 @crc64ib(i64 -1, i8* %1, i64 %2) #7
  %8 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %9, -1
  %11 = lshr i64 %7, 32
  %12 = and i64 %10, %11
  %13 = or i64 %12, 1
  %14 = icmp eq %struct.hash_node* %6, null
  br i1 %14, label %44, label %15, !prof !2

15:                                               ; preds = %4
  %16 = and i64 %7, %10
  %17 = getelementptr inbounds %struct.hash_node, %struct.hash_node* %6, i64 %16
  %18 = getelementptr inbounds %struct.hash_node, %struct.hash_node* %6, i64 %16, i32 1
  %19 = load i8*, i8** %18, align 8
  %20 = icmp eq i8* %19, null
  br i1 %20, label %44, label %21

21:                                               ; preds = %15, %36
  %22 = phi i8* [ %40, %36 ], [ %19, %15 ]
  %23 = phi i64 [ %38, %36 ], [ %16, %15 ]
  %24 = getelementptr inbounds %struct.hash_node, %struct.hash_node* %6, i64 %23, i32 0
  %25 = load i64, i64* %24, align 8
  %26 = icmp eq i64 %7, %25
  br i1 %26, label %27, label %36

27:                                               ; preds = %21
  %28 = getelementptr inbounds %struct.hash_node, %struct.hash_node* %6, i64 %23, i32 2
  %29 = load i64, i64* %28, align 8
  %30 = icmp eq i64 %29, %2
  br i1 %30, label %31, label %36

31:                                               ; preds = %27
  %32 = tail call i32 @nasm_memicmp(i8* %1, i8* nonnull %22, i64 %2) #8
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %36

34:                                               ; preds = %31
  %35 = getelementptr inbounds %struct.hash_node, %struct.hash_node* %6, i64 %23, i32 3
  br label %54

36:                                               ; preds = %31, %27, %21
  %37 = add i64 %23, %13
  %38 = and i64 %37, %10
  %39 = getelementptr inbounds %struct.hash_node, %struct.hash_node* %6, i64 %38, i32 1
  %40 = load i8*, i8** %39, align 8
  %41 = icmp eq i8* %40, null
  br i1 %41, label %42, label %21

42:                                               ; preds = %36
  %43 = getelementptr inbounds %struct.hash_node, %struct.hash_node* %6, i64 %38
  br label %44

44:                                               ; preds = %42, %15, %4
  %45 = phi %struct.hash_node* [ null, %4 ], [ %17, %15 ], [ %43, %42 ]
  %46 = icmp eq %struct.hash_insert* %3, null
  br i1 %46, label %54, label %47

47:                                               ; preds = %44
  %48 = getelementptr inbounds %struct.hash_insert, %struct.hash_insert* %3, i64 0, i32 2, i32 0
  store i64 %7, i64* %48, align 8
  %49 = getelementptr inbounds %struct.hash_insert, %struct.hash_insert* %3, i64 0, i32 2, i32 1
  store i8* %1, i8** %49, align 8
  %50 = getelementptr inbounds %struct.hash_insert, %struct.hash_insert* %3, i64 0, i32 2, i32 2
  store i64 %2, i64* %50, align 8
  %51 = getelementptr inbounds %struct.hash_insert, %struct.hash_insert* %3, i64 0, i32 2, i32 3
  store i8* null, i8** %51, align 8
  %52 = getelementptr inbounds %struct.hash_insert, %struct.hash_insert* %3, i64 0, i32 0
  store %struct.hash_table* %0, %struct.hash_table** %52, align 8
  %53 = getelementptr inbounds %struct.hash_insert, %struct.hash_insert* %3, i64 0, i32 1
  store %struct.hash_node* %45, %struct.hash_node** %53, align 8
  br label %54

54:                                               ; preds = %47, %44, %34
  %55 = phi i8** [ %35, %34 ], [ null, %44 ], [ null, %47 ]
  ret i8** %55
}

declare i64 @crc64ib(i64, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind readonly
declare i32 @nasm_memicmp(i8*, i8*, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i8** @hash_findi(%struct.hash_table*, i8*, %struct.hash_insert*) local_unnamed_addr #0 {
  %4 = tail call i64 @strlen(i8* %1) #8
  %5 = add i64 %4, 1
  %6 = tail call i8** @hash_findib(%struct.hash_table* %0, i8* %1, i64 %5, %struct.hash_insert* %2)
  ret i8** %6
}

; Function Attrs: nounwind ssp uwtable
define hidden i8** @hash_add(%struct.hash_insert* nocapture readonly, i8*, i8*) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.hash_insert, %struct.hash_insert* %0, i64 0, i32 0
  %5 = load %struct.hash_table*, %struct.hash_table** %4, align 8
  %6 = getelementptr inbounds %struct.hash_insert, %struct.hash_insert* %0, i64 0, i32 1
  %7 = load %struct.hash_node*, %struct.hash_node** %6, align 8
  %8 = icmp eq %struct.hash_node* %7, null
  br i1 %8, label %9, label %23, !prof !2

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %5, i64 0, i32 2
  %11 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %5, i64 0, i32 1
  %12 = bitcast i64* %11 to <2 x i64>*
  store <2 x i64> <i64 0, i64 16>, <2 x i64>* %12, align 8
  %13 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %5, i64 0, i32 3
  store i64 8, i64* %13, align 8
  %14 = tail call noalias i8* @nasm_calloc(i64 16, i64 32) #7
  %15 = bitcast %struct.hash_table* %5 to i8**
  store i8* %14, i8** %15, align 8
  %16 = bitcast i8* %14 to %struct.hash_node*
  %17 = getelementptr inbounds %struct.hash_insert, %struct.hash_insert* %0, i64 0, i32 2, i32 0
  %18 = load i64, i64* %17, align 8
  %19 = load i64, i64* %10, align 8
  %20 = add i64 %19, -1
  %21 = and i64 %20, %18
  %22 = getelementptr inbounds %struct.hash_node, %struct.hash_node* %16, i64 %21
  br label %23

23:                                               ; preds = %9, %3
  %24 = phi %struct.hash_node* [ %22, %9 ], [ %7, %3 ]
  %25 = getelementptr inbounds %struct.hash_insert, %struct.hash_insert* %0, i64 0, i32 2
  %26 = bitcast %struct.hash_node* %24 to i8*
  %27 = bitcast %struct.hash_node* %25 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %26, i8* align 8 %27, i64 24, i1 false)
  %28 = getelementptr inbounds %struct.hash_node, %struct.hash_node* %24, i64 0, i32 3
  store i8* %2, i8** %28, align 8
  %29 = icmp eq i8* %1, null
  br i1 %29, label %32, label %30

30:                                               ; preds = %23
  %31 = getelementptr inbounds %struct.hash_node, %struct.hash_node* %24, i64 0, i32 1
  store i8* %1, i8** %31, align 8
  br label %32

32:                                               ; preds = %23, %30
  %33 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %5, i64 0, i32 1
  %34 = load i64, i64* %33, align 8
  %35 = add i64 %34, 1
  store i64 %35, i64* %33, align 8
  %36 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %5, i64 0, i32 3
  %37 = load i64, i64* %36, align 8
  %38 = icmp ugt i64 %35, %37
  br i1 %38, label %39, label %95, !prof !2

39:                                               ; preds = %32
  %40 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %5, i64 0, i32 2
  %41 = load i64, i64* %40, align 8
  %42 = shl i64 %41, 1
  %43 = add i64 %42, -1
  %44 = tail call noalias i8* @nasm_calloc(i64 %42, i64 32) #7
  %45 = bitcast i8* %44 to %struct.hash_node*
  %46 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %5, i64 0, i32 0
  %47 = load %struct.hash_node*, %struct.hash_node** %46, align 8
  %48 = load i64, i64* %40, align 8
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %53

50:                                               ; preds = %39
  %51 = bitcast %struct.hash_node* %47 to i8*
  %52 = bitcast %struct.hash_table* %5 to i8**
  br label %90

53:                                               ; preds = %39, %81
  %54 = phi i64 [ %82, %81 ], [ %48, %39 ]
  %55 = phi i64 [ %84, %81 ], [ 0, %39 ]
  %56 = phi %struct.hash_node* [ %85, %81 ], [ %47, %39 ]
  %57 = phi %struct.hash_node* [ %83, %81 ], [ %24, %39 ]
  %58 = getelementptr inbounds %struct.hash_node, %struct.hash_node* %56, i64 0, i32 1
  %59 = load i8*, i8** %58, align 8
  %60 = icmp eq i8* %59, null
  br i1 %60, label %81, label %61

61:                                               ; preds = %53
  %62 = getelementptr inbounds %struct.hash_node, %struct.hash_node* %56, i64 0, i32 0
  %63 = load i64, i64* %62, align 8
  %64 = lshr i64 %63, 32
  %65 = and i64 %64, %43
  %66 = or i64 %65, 1
  br label %67

67:                                               ; preds = %67, %61
  %68 = phi i64 [ %63, %61 ], [ %73, %67 ]
  %69 = and i64 %68, %43
  %70 = getelementptr inbounds %struct.hash_node, %struct.hash_node* %45, i64 %69, i32 1
  %71 = load i8*, i8** %70, align 8
  %72 = icmp eq i8* %71, null
  %73 = add i64 %69, %66
  br i1 %72, label %74, label %67

74:                                               ; preds = %67
  %75 = getelementptr inbounds %struct.hash_node, %struct.hash_node* %45, i64 %69
  %76 = bitcast %struct.hash_node* %75 to i8*
  %77 = bitcast %struct.hash_node* %56 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %76, i8* align 8 %77, i64 32, i1 false)
  %78 = icmp eq %struct.hash_node* %56, %57
  %79 = select i1 %78, %struct.hash_node* %75, %struct.hash_node* %57
  %80 = load i64, i64* %40, align 8
  br label %81

81:                                               ; preds = %53, %74
  %82 = phi i64 [ %80, %74 ], [ %54, %53 ]
  %83 = phi %struct.hash_node* [ %79, %74 ], [ %57, %53 ]
  %84 = add nuw i64 %55, 1
  %85 = getelementptr inbounds %struct.hash_node, %struct.hash_node* %56, i64 1
  %86 = icmp ult i64 %84, %82
  br i1 %86, label %53, label %87

87:                                               ; preds = %81
  %88 = bitcast %struct.hash_table* %5 to i8**
  %89 = load i8*, i8** %88, align 8
  br label %90

90:                                               ; preds = %50, %87
  %91 = phi i8** [ %52, %50 ], [ %88, %87 ]
  %92 = phi i8* [ %51, %50 ], [ %89, %87 ]
  %93 = phi %struct.hash_node* [ %24, %50 ], [ %83, %87 ]
  tail call void @nasm_free(i8* %92) #7
  store i8* %44, i8** %91, align 8
  store i64 %42, i64* %40, align 8
  %94 = and i64 %41, 9223372036854775807
  store i64 %94, i64* %36, align 8
  br label %95

95:                                               ; preds = %90, %32
  %96 = phi %struct.hash_node* [ %93, %90 ], [ %24, %32 ]
  %97 = getelementptr inbounds %struct.hash_node, %struct.hash_node* %96, i64 0, i32 3
  ret i8** %97
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

declare noalias i8* @nasm_calloc(i64, i64) local_unnamed_addr #1

declare void @nasm_free(i8*) local_unnamed_addr #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden %struct.hash_node* @hash_iterate(%struct.hash_iterator* nocapture) local_unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.hash_iterator, %struct.hash_iterator* %0, i64 0, i32 0
  %3 = load %struct.hash_table*, %struct.hash_table** %2, align 8
  %4 = getelementptr inbounds %struct.hash_iterator, %struct.hash_iterator* %0, i64 0, i32 1
  %5 = load %struct.hash_node*, %struct.hash_node** %4, align 8
  %6 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %3, i64 0, i32 0
  %7 = load %struct.hash_node*, %struct.hash_node** %6, align 8
  %8 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %3, i64 0, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %struct.hash_node, %struct.hash_node* %7, i64 %9
  %11 = ptrtoint %struct.hash_node* %7 to i64
  br label %12

12:                                               ; preds = %15, %1
  %13 = phi %struct.hash_node* [ %5, %1 ], [ %19, %15 ]
  %14 = icmp ult %struct.hash_node* %13, %10
  br i1 %14, label %15, label %21

15:                                               ; preds = %12
  %16 = getelementptr inbounds %struct.hash_node, %struct.hash_node* %13, i64 0, i32 1
  %17 = load i8*, i8** %16, align 8
  %18 = icmp eq i8* %17, null
  %19 = getelementptr inbounds %struct.hash_node, %struct.hash_node* %13, i64 1
  br i1 %18, label %12, label %20

20:                                               ; preds = %15
  store %struct.hash_node* %19, %struct.hash_node** %4, align 8
  br label %23

21:                                               ; preds = %12
  %22 = bitcast %struct.hash_node** %4 to i64*
  store i64 %11, i64* %22, align 8
  br label %23

23:                                               ; preds = %21, %20
  %24 = phi %struct.hash_node* [ %13, %20 ], [ null, %21 ]
  ret %struct.hash_node* %24
}

; Function Attrs: nounwind ssp uwtable
define hidden void @hash_free(%struct.hash_table* nocapture) local_unnamed_addr #0 {
  %2 = bitcast %struct.hash_table* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast %struct.hash_table* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 32, i1 false)
  tail call void @nasm_free(i8* %3) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nounwind ssp uwtable
define hidden void @hash_free_all(%struct.hash_table*, i1 zeroext) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 0
  %4 = load %struct.hash_node*, %struct.hash_node** %3, align 8
  %5 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i64 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %struct.hash_node, %struct.hash_node* %4, i64 %6
  br label %8

8:                                                ; preds = %11, %2
  %9 = phi %struct.hash_node* [ %4, %2 ], [ %15, %11 ]
  %10 = icmp ult %struct.hash_node* %9, %7
  br i1 %10, label %11, label %45

11:                                               ; preds = %8
  %12 = getelementptr inbounds %struct.hash_node, %struct.hash_node* %9, i64 0, i32 1
  %13 = load i8*, i8** %12, align 8
  %14 = icmp eq i8* %13, null
  %15 = getelementptr inbounds %struct.hash_node, %struct.hash_node* %9, i64 1
  br i1 %14, label %8, label %16

16:                                               ; preds = %11
  %17 = icmp eq %struct.hash_node* %9, null
  br i1 %17, label %45, label %18

18:                                               ; preds = %16, %43
  %19 = phi %struct.hash_node* [ %36, %43 ], [ %9, %16 ]
  %20 = phi %struct.hash_node* [ %42, %43 ], [ %15, %16 ]
  %21 = getelementptr inbounds %struct.hash_node, %struct.hash_node* %19, i64 0, i32 3
  %22 = load i8*, i8** %21, align 8
  %23 = icmp eq i8* %22, null
  br i1 %23, label %25, label %24

24:                                               ; preds = %18
  tail call void @nasm_free(i8* nonnull %22) #7
  br label %25

25:                                               ; preds = %18, %24
  br i1 %1, label %26, label %31

26:                                               ; preds = %25
  %27 = getelementptr inbounds %struct.hash_node, %struct.hash_node* %19, i64 0, i32 1
  %28 = load i8*, i8** %27, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %31, label %30

30:                                               ; preds = %26
  tail call void @nasm_free(i8* nonnull %28) #7
  br label %31

31:                                               ; preds = %26, %25, %30
  %32 = load %struct.hash_node*, %struct.hash_node** %3, align 8
  %33 = load i64, i64* %5, align 8
  %34 = getelementptr inbounds %struct.hash_node, %struct.hash_node* %32, i64 %33
  br label %35

35:                                               ; preds = %38, %31
  %36 = phi %struct.hash_node* [ %20, %31 ], [ %42, %38 ]
  %37 = icmp ult %struct.hash_node* %36, %34
  br i1 %37, label %38, label %45

38:                                               ; preds = %35
  %39 = getelementptr inbounds %struct.hash_node, %struct.hash_node* %36, i64 0, i32 1
  %40 = load i8*, i8** %39, align 8
  %41 = icmp eq i8* %40, null
  %42 = getelementptr inbounds %struct.hash_node, %struct.hash_node* %36, i64 1
  br i1 %41, label %35, label %43

43:                                               ; preds = %38
  %44 = icmp eq %struct.hash_node* %36, null
  br i1 %44, label %45, label %18

45:                                               ; preds = %8, %43, %35, %16
  %46 = phi %struct.hash_node* [ %4, %16 ], [ %32, %35 ], [ %32, %43 ], [ %4, %8 ]
  %47 = bitcast %struct.hash_node* %46 to i8*
  %48 = bitcast %struct.hash_table* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %48, i8 0, i64 32, i1 false) #7
  tail call void @nasm_free(i8* %47) #7
  ret void
}

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind readonly }
attributes #7 = { nounwind }
attributes #8 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
