; ModuleID = '../../device/fido/ed25519_public_key.cc'
source_filename = "../../device/fido/ed25519_public_key.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.device::cbor_extract::StepOrByte" = type { %union.anon.11 }
%union.anon.11 = type { i8 }
%"struct.device::cbor_extract::internal::Step" = type { %struct.anon }
%struct.anon = type { i8 }
%"struct.device::PublicKey" = type { i32, %"class.std::__1::vector", %"class.absl::optional" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair.0" }
%"class.std::__1::__compressed_pair.0" = type { %"struct.std::__1::__compressed_pair_elem.1" }
%"struct.std::__1::__compressed_pair_elem.1" = type { i8* }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.std::__1::vector" }
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.4" }
%"class.std::__1::vector.4" = type { %"class.std::__1::__vector_base.5" }
%"class.std::__1::__vector_base.5" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.6" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.std::__1::pair"* }
%struct.COSEKey = type { i64*, i64*, %"class.std::__1::vector"* }
%"class.bssl::internal::StackAllocated" = type { %struct.cbb_st }
%struct.cbb_st = type { %struct.cbb_buffer_st*, %struct.cbb_st*, i64, i8, i8, i8 }
%struct.cbb_buffer_st = type { i8*, i64, i64, i8, i8 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"struct.device::cbor_extract::StepOrByte.20" = type opaque
%struct.evp_pkey_st = type { i32, i32, %union.anon.16, %struct.evp_pkey_asn1_method_st* }
%union.anon.16 = type { i8* }
%struct.evp_pkey_asn1_method_st = type opaque
%struct.engine_st = type opaque
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::__vector_base_common" = type { i8 }

@_ZZN6device16Ed25519PublicKey18ExtractFromCOSEKeyEiN4base4spanIKhLm18446744073709551615EEERKNS1_8flat_mapIN4cbor5ValueES7_NS7_4LessENSt3__16vectorINS9_4pairIS7_S7_EENS9_9allocatorISC_EEEEEEE6kSteps = internal constant <{ { { %"struct.device::cbor_extract::internal::Step" } }, %"struct.device::cbor_extract::StepOrByte", { { %"struct.device::cbor_extract::internal::Step" } }, %"struct.device::cbor_extract::StepOrByte", { { %"struct.device::cbor_extract::internal::Step" } }, %"struct.device::cbor_extract::StepOrByte", { { %"struct.device::cbor_extract::internal::Step" } } }> <{ { { %"struct.device::cbor_extract::internal::Step" } } { { %"struct.device::cbor_extract::internal::Step" } { %"struct.device::cbor_extract::internal::Step" { %struct.anon { i8 7 } } } }, %"struct.device::cbor_extract::StepOrByte" { %union.anon.11 { i8 1 } }, { { %"struct.device::cbor_extract::internal::Step" } } { { %"struct.device::cbor_extract::internal::Step" } { %"struct.device::cbor_extract::internal::Step" { %struct.anon { i8 23 } } } }, %"struct.device::cbor_extract::StepOrByte" { %union.anon.11 { i8 -1 } }, { { %"struct.device::cbor_extract::internal::Step" } } { { %"struct.device::cbor_extract::internal::Step" } { %"struct.device::cbor_extract::internal::Step" { %struct.anon { i8 33 } } } }, %"struct.device::cbor_extract::StepOrByte" { %union.anon.11 { i8 -2 } }, { { %"struct.device::cbor_extract::internal::Step" } } { { %"struct.device::cbor_extract::internal::Step" } { %"struct.device::cbor_extract::internal::Step" { %struct.anon { i8 14 } } } } }>, align 1
@.str = private unnamed_addr constant [40 x i8] c"../../device/fido/ed25519_public_key.cc\00", align 1
@.str.1 = private unnamed_addr constant [127 x i8] c"CBB_init(cbb.get(), 128) && EVP_marshal_public_key(cbb.get(), pkey.get()) && CBB_finish(cbb.get(), &der_bytes, &der_bytes_len)\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden %"struct.device::PublicKey"* @_ZN6device16Ed25519PublicKey18ExtractFromCOSEKeyEiN4base4spanIKhLm18446744073709551615EEERKNS1_8flat_mapIN4cbor5ValueES7_NS7_4LessENSt3__16vectorINS9_4pairIS7_S7_EENS9_9allocatorISC_EEEEEE(i32, i64, i8*, %"class.base::flat_map"* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.absl::optional", align 8
  %6 = alloca %struct.COSEKey, align 8
  %7 = alloca %"class.bssl::internal::StackAllocated", align 8
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca %"class.logging::CheckError", align 8
  %11 = alloca %"class.std::__1::vector", align 8
  %12 = bitcast %struct.COSEKey* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #7
  %13 = getelementptr inbounds %struct.COSEKey, %struct.COSEKey* %6, i64 0, i32 1
  %14 = getelementptr inbounds %struct.COSEKey, %struct.COSEKey* %6, i64 0, i32 2
  %15 = bitcast %struct.COSEKey* %6 to i8**
  %16 = bitcast %struct.COSEKey* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 -86, i64 24, i1 false)
  %17 = call zeroext i1 @_ZN6device12cbor_extract8internal7ExtractEN4base4spanIPKvLm18446744073709551615EEENS3_IKNS0_10StepOrByteIvEELm18446744073709551615EEERKNS2_8flat_mapIN4cbor5ValueESD_NSD_4LessENSt3__16vectorINSF_4pairISD_SD_EENSF_9allocatorISI_EEEEEE(i64 3, i8** nonnull %15, i64 7, %"struct.device::cbor_extract::StepOrByte.20"* bitcast (<{ { { %"struct.device::cbor_extract::internal::Step" } }, %"struct.device::cbor_extract::StepOrByte", { { %"struct.device::cbor_extract::internal::Step" } }, %"struct.device::cbor_extract::StepOrByte", { { %"struct.device::cbor_extract::internal::Step" } }, %"struct.device::cbor_extract::StepOrByte", { { %"struct.device::cbor_extract::internal::Step" } } }>* @_ZZN6device16Ed25519PublicKey18ExtractFromCOSEKeyEiN4base4spanIKhLm18446744073709551615EEERKNS1_8flat_mapIN4cbor5ValueES7_NS7_4LessENSt3__16vectorINS9_4pairIS7_S7_EENS9_9allocatorISC_EEEEEEE6kSteps to %"struct.device::cbor_extract::StepOrByte.20"*), %"class.base::flat_map"* dereferenceable(24) %3) #7
  br i1 %17, label %18, label %106

18:                                               ; preds = %4
  %19 = getelementptr inbounds %struct.COSEKey, %struct.COSEKey* %6, i64 0, i32 0
  %20 = load i64*, i64** %19, align 8
  %21 = load i64, i64* %20, align 8
  %22 = icmp eq i64 %21, 1
  br i1 %22, label %23, label %106

23:                                               ; preds = %18
  %24 = load i64*, i64** %13, align 8
  %25 = load i64, i64* %24, align 8
  %26 = icmp eq i64 %25, 6
  br i1 %26, label %27, label %106

27:                                               ; preds = %23
  %28 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %14, align 8
  %29 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %28, i64 0, i32 0, i32 1
  %30 = bitcast i8** %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = bitcast %"class.std::__1::vector"* %28 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = sub i64 %31, %33
  %35 = icmp eq i64 %34, 32
  br i1 %35, label %36, label %106

36:                                               ; preds = %27
  %37 = inttoptr i64 %33 to i8*
  %38 = call %struct.evp_pkey_st* @EVP_PKEY_new_raw_public_key(i32 949, %struct.engine_st* null, i8* %37, i64 32) #7
  %39 = icmp eq %struct.evp_pkey_st* %38, null
  br i1 %39, label %106, label %40

40:                                               ; preds = %36
  %41 = bitcast %"class.bssl::internal::StackAllocated"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %41) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %41, i8 -86, i64 32, i1 false)
  %42 = getelementptr inbounds %"class.bssl::internal::StackAllocated", %"class.bssl::internal::StackAllocated"* %7, i64 0, i32 0
  call void @CBB_zero(%struct.cbb_st* nonnull %42) #7
  %43 = bitcast i8** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %43) #7
  store i8* null, i8** %8, align 8
  %44 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %44) #7
  store i64 0, i64* %9, align 8
  %45 = call i32 @CBB_init(%struct.cbb_st* nonnull %42, i64 128) #7
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %53, label %47

47:                                               ; preds = %40
  %48 = call i32 @EVP_marshal_public_key(%struct.cbb_st* nonnull %42, %struct.evp_pkey_st* nonnull %38) #7
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %53, label %50

50:                                               ; preds = %47
  %51 = call i32 @CBB_finish(%struct.cbb_st* nonnull %42, i8** nonnull %8, i64* nonnull %9) #7
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %56

53:                                               ; preds = %50, %47, %40
  %54 = bitcast %"class.logging::CheckError"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %54) #7
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %10, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0), i32 80, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.1, i64 0, i64 0)) #7
  %55 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %10) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %10) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %54) #7
  br label %56

56:                                               ; preds = %50, %53
  %57 = bitcast %"class.std::__1::vector"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %57) #7
  %58 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %11, i64 0, i32 0, i32 0
  %59 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %11, i64 0, i32 0, i32 1
  %60 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %11, i64 0, i32 0, i32 2, i32 0, i32 0
  %61 = load i8*, i8** %8, align 8
  %62 = load i64, i64* %9, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %57, i8 0, i64 24, i1 false) #7
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %56
  %65 = bitcast i8** %59 to i64*
  br label %75

66:                                               ; preds = %56
  %67 = icmp slt i64 %62, 0
  br i1 %67, label %68, label %70

68:                                               ; preds = %66
  %69 = bitcast %"class.std::__1::vector"* %11 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %69) #8
  unreachable

70:                                               ; preds = %66
  %71 = call i8* @_Znwm(i64 %62) #9
  store i8* %71, i8** %59, align 8
  store i8* %71, i8** %58, align 8
  %72 = getelementptr inbounds i8, i8* %71, i64 %62
  store i8* %72, i8** %60, align 8
  %73 = bitcast i8** %59 to i64*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %71, i8* align 1 %61, i64 %62, i1 false) #7
  %74 = ptrtoint i8* %72 to i64
  store i64 %74, i64* %73, align 8
  br label %75

75:                                               ; preds = %64, %70
  %76 = phi i64* [ %65, %64 ], [ %73, %70 ]
  call void @OPENSSL_free(i8* %61) #7
  %77 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %77)
  %78 = call i8* @_Znwm(i64 64) #9
  %79 = bitcast i8* %78 to %"struct.device::PublicKey"*
  store i8 1, i8* %77, align 8
  %80 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %81 = bitcast %"class.std::__1::vector"* %11 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = bitcast %"class.std::__1::vector"* %80 to i64*
  store i64 %82, i64* %83, align 8
  %84 = load i64, i64* %76, align 8
  %85 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %86 = bitcast i8** %85 to i64*
  store i64 %84, i64* %86, align 8
  %87 = bitcast i8** %60 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %90 = bitcast i8** %89 to i64*
  store i64 %88, i64* %90, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %57, i8 0, i64 24, i1 false) #7
  call void @_ZN6device9PublicKeyC1EiN4base4spanIKhLm18446744073709551615EEEN4absl8optionalINSt3__16vectorIhNS7_9allocatorIhEEEEEE(%"struct.device::PublicKey"* nonnull %79, i32 %0, i64 %1, i8* %2, %"class.absl::optional"* nonnull %5) #7
  %91 = load i8, i8* %77, align 8, !range !2
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %100, label %93

93:                                               ; preds = %75
  %94 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %95 = load i8*, i8** %94, align 8
  %96 = icmp eq i8* %95, null
  br i1 %96, label %99, label %97

97:                                               ; preds = %93
  %98 = ptrtoint i8* %95 to i64
  store i64 %98, i64* %86, align 8
  call void @_ZdlPv(i8* nonnull %95) #9
  br label %99

99:                                               ; preds = %97, %93
  store i8 0, i8* %77, align 8
  br label %100

100:                                              ; preds = %75, %99
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %77)
  %101 = load i8*, i8** %58, align 8
  %102 = icmp eq i8* %101, null
  br i1 %102, label %105, label %103

103:                                              ; preds = %100
  %104 = ptrtoint i8* %101 to i64
  store i64 %104, i64* %76, align 8
  call void @_ZdlPv(i8* nonnull %101) #9
  br label %105

105:                                              ; preds = %100, %103
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %57) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %44) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %43) #7
  call void @CBB_cleanup(%struct.cbb_st* nonnull %42) #7
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %41) #7
  call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %38) #7
  br label %106

106:                                              ; preds = %36, %105, %4, %18, %23, %27
  %107 = phi %"struct.device::PublicKey"* [ null, %27 ], [ null, %23 ], [ null, %18 ], [ null, %4 ], [ %79, %105 ], [ null, %36 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #7
  ret %"struct.device::PublicKey"* %107
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %struct.evp_pkey_st* @EVP_PKEY_new_raw_public_key(i32, %struct.engine_st*, i8*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare i32 @CBB_init(%struct.cbb_st*, i64) local_unnamed_addr #2

declare i32 @EVP_marshal_public_key(%struct.cbb_st*, %struct.evp_pkey_st*) local_unnamed_addr #2

declare i32 @CBB_finish(%struct.cbb_st*, i8**, i64*) local_unnamed_addr #2

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @OPENSSL_free(i8*) local_unnamed_addr #2

declare void @EVP_PKEY_free(%struct.evp_pkey_st*) local_unnamed_addr #2

declare zeroext i1 @_ZN6device12cbor_extract8internal7ExtractEN4base4spanIPKvLm18446744073709551615EEENS3_IKNS0_10StepOrByteIvEELm18446744073709551615EEERKNS2_8flat_mapIN4cbor5ValueESD_NSD_4LessENSt3__16vectorINSF_4pairISD_SD_EENSF_9allocatorISI_EEEEEE(i64, i8**, i64, %"struct.device::cbor_extract::StepOrByte.20"*, %"class.base::flat_map"* dereferenceable(24)) local_unnamed_addr #2

declare void @CBB_zero(%struct.cbb_st*) local_unnamed_addr #2

declare void @CBB_cleanup(%struct.cbb_st*) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

declare void @_ZN6device9PublicKeyC1EiN4base4spanIKhLm18446744073709551615EEEN4absl8optionalINSt3__16vectorIhNS7_9allocatorIhEEEEEE(%"struct.device::PublicKey"*, i32, i64, i8*, %"class.absl::optional"*) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
