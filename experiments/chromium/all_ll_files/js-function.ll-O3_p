; ModuleID = '../../v8/src/objects/js-function.cc'
source_filename = "../../v8/src/objects/js-function.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::SoleReadOnlyHeap" = type { %"class.v8::internal::ReadOnlyHeap", [587 x i64] }
%"class.v8::internal::ReadOnlyHeap" = type { i32 (...)**, i8, %"class.v8::internal::ReadOnlySpace"*, %"class.std::__1::vector.543" }
%"class.v8::internal::ReadOnlySpace" = type { %"class.v8::internal::BaseSpace", i8, %"class.v8::internal::AllocationStats", %"class.std::__1::vector.141", i64, i64, i8, i64, i64 }
%"class.v8::internal::BaseSpace" = type { i32 (...)**, %"class.v8::internal::Heap"*, i32, %"struct.std::__1::atomic.21", i64 }
%"class.v8::internal::Heap" = type { %"class.std::__1::unordered_map", %"struct.std::__1::atomic.21", %"class.v8::internal::Heap::ExternalMemoryAccounting", %"class.v8::internal::Isolate"*, i64, i64, i64, i64, %"struct.std::__1::atomic.21", i64, i64, i64, i64, i64, i8, i64, i64, %"struct.std::__1::atomic.21", i64, i64, %"struct.std::__1::atomic.21", %"struct.std::__1::atomic.31", %"class.std::__1::vector", i32, %"class.v8::internal::NewSpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::CodeSpace"*, %"class.v8::internal::MapSpace"*, %"class.v8::internal::OldLargeObjectSpace"*, %"class.v8::internal::CodeLargeObjectSpace"*, %"class.v8::internal::NewLargeObjectSpace"*, %"class.v8::internal::ReadOnlySpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::MapSpace"*, %"class.std::__1::unique_ptr.148", %"class.std::__1::unique_ptr.148", [8 x %"class.v8::internal::Space"*], %"class.v8::internal::LocalHeap"*, %"class.v8::internal::ArrayBufferExtension"*, %"class.v8::internal::ArrayBufferExtension"*, i8, i64, %"struct.std::__1::atomic.163", i32, i32, i32, i32, %"class.v8::internal::AllocationObserver"*, %"class.v8::internal::StressScavengeObserver"*, double, i32, i32, i32, i64, i32, [128 x i64], %"struct.std::__1::atomic.21", i64, i8, %"struct.std::__1::atomic.21", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.std::__1::vector.167", %"class.std::__1::vector.167", i64 ()*, [113 x i32], i64, double, double, i64, i64, double, i32, i32, i32, i32, double, double, double, %"class.std::__1::unique_ptr.174", %"class.std::__1::unique_ptr.180", %"class.v8::internal::MinorMarkCompactCollector"*, %"class.std::__1::unique_ptr.310", %"class.std::__1::unique_ptr.316", %"class.std::__1::unique_ptr.322", %"class.std::__1::unique_ptr.361", %"class.std::__1::unique_ptr.400", %"class.std::__1::unique_ptr.430", %"class.std::__1::unique_ptr.436", %"class.std::__1::unique_ptr.446", %"class.std::__1::unique_ptr.452", %"class.std::__1::unique_ptr.452", %"class.std::__1::unique_ptr.458", %"class.std::__1::unique_ptr.464", %"class.std::__1::unique_ptr.464", %"class.std::__1::unique_ptr.470", %"class.std::__1::unique_ptr.476", %"class.std::__1::shared_ptr.482", %"class.v8::CppHeap"*, %"class.v8::EmbedderRootsHandler"*, %"class.v8::internal::StrongRootsEntry"*, %"class.v8::base::Mutex", i8, i64, i64, i64, i64, %"class.std::__1::unordered_map.505", %"class.std::__1::unique_ptr.531", [512 x i8], i8, i8, i64, i8, i32, i32, %"class.std::__1::unique_ptr.537", i8, %"class.v8::internal::Heap::ExternalStringTable", %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.550", i32, i8, i8, i8, i8, i8, %"class.v8::internal::HeapObject", %"class.v8::base::SharedMutex", %"class.v8::base::Mutex", %"class.std::__1::unordered_set.332", i8, [7 x i8], %"class.std::__1::unordered_map.556", %"class.std::__1::unordered_map.582", %"class.std::__1::unordered_map.556", %"class.std::__1::unordered_map.606", %"class.std::__1::vector.634", i8, %"class.std::__1::unique_ptr.641", i32, i32 }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.4", %"class.std::__1::__compressed_pair.11", %"class.std::__1::__compressed_pair.16", %"class.std::__1::__compressed_pair.18", [4 x i8] }>
%"class.std::__1::unique_ptr.4" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6", %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { i64 }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { float }
%"class.v8::internal::Heap::ExternalMemoryAccounting" = type { %"struct.std::__1::atomic.26", %"struct.std::__1::atomic.26", %"struct.std::__1::atomic.26" }
%"struct.std::__1::atomic.26" = type { %"struct.std::__1::__atomic_base.27" }
%"struct.std::__1::__atomic_base.27" = type { %"struct.std::__1::__atomic_base.28" }
%"struct.std::__1::__atomic_base.28" = type { %"struct.std::__1::__cxx_atomic_impl.29" }
%"struct.std::__1::__cxx_atomic_impl.29" = type { %"struct.std::__1::__cxx_atomic_base_impl.30" }
%"struct.std::__1::__cxx_atomic_base_impl.30" = type { i64 }
%"class.v8::internal::Isolate" = type { %"class.v8::internal::IsolateData", %"class.std::__1::unique_ptr", %"class.v8::internal::Heap", %"class.v8::internal::ReadOnlyHeap"*, %"class.std::__1::shared_ptr.647", %"class.std::__1::unique_ptr.668", i32, %"class.v8::internal::Isolate::EntryStackItem"*, i32, %"class.v8::internal::StringStream"*, [13 x i64], %"class.v8::internal::Bootstrapper"*, %"class.v8::internal::RuntimeProfiler"*, %"class.v8::internal::CompilationCache"*, %"class.std::__1::shared_ptr.678", %"class.v8::base::RecursiveMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::internal::Logger"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::Deoptimizer"*, i8, %"class.v8::internal::MaterializedObjectStore"*, i8, i32, i32, %"class.v8::internal::DescriptorLookupCache"*, %"struct.v8::internal::HandleScopeData", %"class.v8::internal::HandleScopeImplementer"*, %"class.v8::internal::UnicodeCache"*, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::InnerPointerToCodeCache"*, %"class.v8::internal::GlobalHandles"*, %"class.v8::internal::EternalHandles"*, %"class.v8::internal::ThreadManager"*, %"class.v8::bigint::Processor"*, %"class.v8::internal::RuntimeState", %"class.v8::internal::Builtins", %"class.v8::internal::SetupIsolateDelegate"*, %"class.v8::internal::RegExpStack"*, %"class.std::__1::vector.817", %"class.v8::internal::DateCache"*, %"class.v8::base::RandomNumberGenerator"*, %"class.v8::base::RandomNumberGenerator"*, %"struct.std::__1::atomic.830", {}*, i8*, void (i32, %"class.v8::Promise"*, %"class.v8::Value"*)*, {}*, {}*, %"struct.std::__1::atomic.840", {}*, %"class.v8::base::Mutex", double, %"class.std::__1::basic_string", %"class.std::__1::unordered_map.851", %"struct.std::__1::atomic.154", i8, i8, i8, i8, i8, i8, double, %"class.v8::internal::Debug"*, %"class.v8::internal::HeapProfiler"*, %"class.std::__1::unique_ptr.926", %"class.v8::internal::AstStringConstants"*, %"class.v8::internal::interpreter::Interpreter"*, %"class.v8::internal::compiler::PerIsolateCompilerCache"*, %"class.v8::internal::Zone"*, %"class.v8::internal::CompilerDispatcher"*, %"class.std::__1::queue", void (i8*, i8*)*, void (i8*, i1)*, void (i8*, i32)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*, i1)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::Context"*)*, void (%"class.v8::FunctionCallbackInfo"*)*, %"class.v8::String"* (%"class.v8::Isolate"*, i8*)*, i1 (%"class.v8::Context"*)*, i1 (%"class.v8::Context"*)*, %"class.v8::internal::Relocatable"*, %"class.std::__1::vector.969"*, %"class.v8::internal::Object", i64*, %"class.v8::internal::AddressToIndexHashMap"*, %"class.v8::internal::HeapObjectToIndexHashMap"*, %"class.v8::internal::MicrotaskQueue"*, %"class.v8::internal::CompilationStatistics"*, %"class.v8::internal::CodeTracer"*, i32, void (%"class.v8::PromiseRejectMessage"*)*, %"class.v8::StartupData"*, i32, i32, i32, i64, i8, i8, i32, i8, i32, %"class.v8_inspector::V8Inspector"*, i8, i8, i8, i32, i32, %"class.v8::internal::compiler::NodeObserver"*, i8, [128 x i32], [256 x i32], [251 x i32], [251 x i32], %"class.v8::internal::OptimizingCompileDispatcher"*, %"class.std::__1::unique_ptr.977", i32, i8, i8, i32, i32, %"class.std::__1::vector.983", %"class.std::__1::vector.983", void (%"class.v8::Isolate"*, i32)*, %"class.std::__1::shared_ptr.990", i64, %"class.std::__1::unordered_map.991", i64, %"struct.v8::metrics::LongTaskStats", %"class.std::__1::vector.543", %"class.v8::internal::BuiltinsConstantsTableBuilder"*, i8*, i32, i8*, i32, %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::shared_ptr.162", %"class.v8::internal::FutexWaitListNode", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::debug::ConsoleDelegate"*, %"class.v8::debug::AsyncEventDelegate"*, i32, i32, %"class.std::__1::unique_ptr.1047", i1 (%"class.v8::Isolate"*)*, i8, %"class.v8::base::Mutex", %"struct.v8::internal::ManagedPtrDestructor"*, i64, i64, %"class.v8::internal::wasm::WasmEngine"*, %"class.std::__1::unique_ptr.1085", %"class.v8::internal::EmbeddedFileWriterInterface"*, %"class.v8::Context::BackupIncumbentScope"*, {}*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate::ThreadDataTable", i8, %"class.v8::internal::Isolate"*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"struct.std::__1::atomic.1119", %"class.std::__1::vector.1123", %"class.std::__1::vector.1123", void (i32, %"class.std::__1::basic_string"*)* }
%"class.v8::internal::IsolateData" = type { [4 x i8*], i64, i64, i64, i64, i64, %"class.v8::internal::StackGuard", %"class.v8::internal::RootsTable", %"class.v8::internal::ExternalReferenceTable", %"class.v8::internal::ThreadLocalTop", [1711 x i64], [1711 x i64], i8, [15 x i8] }
%"class.v8::internal::StackGuard" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::StackGuard::ThreadLocal" }
%"class.v8::internal::StackGuard::ThreadLocal" = type { i64, i64, i64, i64, %"class.v8::internal::InterruptsScope"*, i64 }
%"class.v8::internal::InterruptsScope" = type { i32 (...)**, %"class.v8::internal::StackGuard"*, i64, i64, i32, %"class.v8::internal::InterruptsScope"* }
%"class.v8::internal::RootsTable" = type { [669 x i64] }
%"class.v8::internal::ExternalReferenceTable" = type { [1042 x i64], i32, i32 }
%"class.v8::internal::ThreadLocalTop" = type { %"class.v8::TryCatch"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Context", %"struct.std::__1::atomic", %"class.v8::internal::Object", %"class.v8::internal::Context", i64, i64, i64, i64, i64, %"class.v8::internal::Object", i8, i8, %"class.v8::internal::Object", i64, i64, i64, %"class.v8::internal::PromiseOnStack"*, %"class.v8::internal::Simulator"*, i64, %"class.v8::internal::ExternalCallbackScope"*, i32, void (%"class.v8::Object"*, i32, %"class.v8::Value"*)*, i64 }
%"class.v8::TryCatch" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::TryCatch"*, i8*, i8*, i8*, i8, [7 x i8] }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { %"class.v8::internal::ThreadId" }
%"class.v8::internal::ThreadId" = type { i32 }
%"class.v8::internal::Context" = type { %"class.v8::internal::TorqueGeneratedContext" }
%"class.v8::internal::TorqueGeneratedContext" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::PromiseOnStack" = type { %"class.v8::internal::Handle.1", %"class.v8::internal::PromiseOnStack"* }
%"class.v8::internal::Handle.1" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HandleBase" = type { i64* }
%"class.v8::internal::Simulator" = type opaque
%"class.v8::internal::ExternalCallbackScope" = type opaque
%"class.v8::Object" = type { i8 }
%"class.v8::Value" = type { i8 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.v8::internal::IsolateAllocator"* }
%"class.v8::internal::IsolateAllocator" = type { i8*, %"class.v8::PageAllocator"* }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.std::__1::shared_ptr.647" = type { %"class.v8::internal::ReadOnlyArtifacts"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::ReadOnlyArtifacts" = type { i32 (...)**, %"class.std::__1::vector.141", %"class.v8::internal::AllocationStats", %"class.std::__1::unique_ptr.648", %"class.std::__1::unique_ptr.662" }
%"class.std::__1::unique_ptr.648" = type { %"class.std::__1::__compressed_pair.649" }
%"class.std::__1::__compressed_pair.649" = type { %"struct.std::__1::__compressed_pair_elem.650" }
%"struct.std::__1::__compressed_pair_elem.650" = type { %"class.v8::internal::SharedReadOnlySpace"* }
%"class.v8::internal::SharedReadOnlySpace" = type { %"class.v8::internal::ReadOnlySpace", %"class.std::__1::vector.651" }
%"class.std::__1::vector.651" = type { %"class.std::__1::__vector_base.652" }
%"class.std::__1::__vector_base.652" = type { %"class.std::__1::unique_ptr.653"*, %"class.std::__1::unique_ptr.653"*, %"class.std::__1::__compressed_pair.654" }
%"class.std::__1::unique_ptr.653" = type { %"class.std::__1::__compressed_pair.1344" }
%"class.std::__1::__compressed_pair.1344" = type { %"struct.std::__1::__compressed_pair_elem.1345" }
%"struct.std::__1::__compressed_pair_elem.1345" = type { %"class.v8::PageAllocator::SharedMemoryMapping"* }
%"class.v8::PageAllocator::SharedMemoryMapping" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.654" = type { %"struct.std::__1::__compressed_pair_elem.655" }
%"struct.std::__1::__compressed_pair_elem.655" = type { %"class.std::__1::unique_ptr.653"* }
%"class.std::__1::unique_ptr.662" = type { %"class.std::__1::__compressed_pair.663" }
%"class.std::__1::__compressed_pair.663" = type { %"struct.std::__1::__compressed_pair_elem.664" }
%"struct.std::__1::__compressed_pair_elem.664" = type { %"class.v8::internal::ReadOnlyHeap"* }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::unique_ptr.668" = type { %"class.std::__1::__compressed_pair.669" }
%"class.std::__1::__compressed_pair.669" = type { %"struct.std::__1::__compressed_pair_elem.670" }
%"struct.std::__1::__compressed_pair_elem.670" = type { %"class.v8::internal::StringTable"* }
%"class.v8::internal::StringTable" = type { %"struct.std::__1::atomic.671", %"class.v8::base::Mutex" }
%"struct.std::__1::atomic.671" = type { %"struct.std::__1::__atomic_base.672" }
%"struct.std::__1::__atomic_base.672" = type { %"struct.std::__1::__cxx_atomic_impl.673" }
%"struct.std::__1::__cxx_atomic_impl.673" = type { %"struct.std::__1::__cxx_atomic_base_impl.674" }
%"struct.std::__1::__cxx_atomic_base_impl.674" = type { %"class.v8::internal::StringTable::Data"* }
%"class.v8::internal::StringTable::Data" = type opaque
%"class.v8::internal::Isolate::EntryStackItem" = type { i32, %"class.v8::internal::Isolate::PerIsolateThreadData"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate::EntryStackItem"* }
%"class.v8::internal::Isolate::PerIsolateThreadData" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::ThreadId", i64, %"class.v8::internal::ThreadState"* }
%"class.v8::internal::ThreadState" = type opaque
%"class.v8::internal::StringStream" = type opaque
%"class.v8::internal::Bootstrapper" = type { %"class.v8::internal::Isolate"*, i32, %"class.v8::internal::SourceCodeCache" }
%"class.v8::internal::SourceCodeCache" = type { i32, %"class.v8::internal::FixedArray" }
%"class.v8::internal::FixedArray" = type { %"class.v8::internal::TorqueGeneratedFixedArray" }
%"class.v8::internal::TorqueGeneratedFixedArray" = type { %"class.v8::internal::FixedArrayBase" }
%"class.v8::internal::FixedArrayBase" = type { %"class.v8::internal::TorqueGeneratedFixedArrayBase" }
%"class.v8::internal::TorqueGeneratedFixedArrayBase" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::RuntimeProfiler" = type opaque
%"class.v8::internal::CompilationCache" = type opaque
%"class.std::__1::shared_ptr.678" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::Counters" = type { %"class.std::__1::enable_shared_from_this", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::AggregatableHistogramTimer", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::RuntimeCallStats", %"class.v8::internal::WorkerThreadRuntimeCallStats", %"class.v8::internal::Isolate"*, %"class.v8::internal::StatsTable" }
%"class.std::__1::enable_shared_from_this" = type { %"class.std::__1::weak_ptr" }
%"class.std::__1::weak_ptr" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::HistogramTimer" = type { %"class.v8::internal::TimedHistogram.base", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::TimedHistogram.base" = type <{ %"class.v8::internal::Histogram", i32 }>
%"class.v8::base::ElapsedTimer" = type { %"class.v8::base::TimeTicks" }
%"class.v8::base::TimeTicks" = type { %"class.v8::base::time_internal::TimeBase" }
%"class.v8::base::time_internal::TimeBase" = type { i64 }
%"class.v8::internal::TimedHistogram" = type <{ %"class.v8::internal::Histogram", i32, [4 x i8] }>
%"class.v8::internal::AggregatableHistogramTimer" = type { %"class.v8::internal::Histogram", %"class.v8::base::TimeDelta" }
%"class.v8::base::TimeDelta" = type { i64 }
%"class.v8::internal::Histogram" = type { i8*, i32, i32, i32, i8*, %"class.v8::internal::Counters"* }
%"class.v8::internal::StatsCounterThreadSafe" = type { %"class.v8::internal::StatsCounterBase", %"class.v8::base::Mutex" }
%"class.v8::internal::StatsCounterBase" = type { %"class.v8::internal::Counters"*, i8*, i32* }
%"class.v8::internal::StatsCounter" = type <{ %"class.v8::internal::StatsCounterBase", i8, [7 x i8] }>
%"class.v8::internal::RuntimeCallStats" = type { %"class.v8::base::AtomicValue", %"class.v8::base::AtomicValue.679", i8, i32, %"class.v8::internal::ThreadId", [1370 x %"class.v8::internal::RuntimeCallCounter"] }
%"class.v8::base::AtomicValue" = type { i64 }
%"class.v8::base::AtomicValue.679" = type { i64 }
%"class.v8::internal::RuntimeCallCounter" = type { i8*, i64, i64 }
%"class.v8::internal::WorkerThreadRuntimeCallStats" = type <{ %"class.v8::base::Mutex", %"class.std::__1::vector.680", %"class.v8::base::Optional", %"class.v8::internal::ThreadId", [4 x i8] }>
%"class.std::__1::vector.680" = type { %"class.std::__1::__vector_base.681" }
%"class.std::__1::__vector_base.681" = type { %"class.std::__1::unique_ptr.682"*, %"class.std::__1::unique_ptr.682"*, %"class.std::__1::__compressed_pair.683" }
%"class.std::__1::unique_ptr.682" = type opaque
%"class.std::__1::__compressed_pair.683" = type { %"struct.std::__1::__compressed_pair_elem.684" }
%"struct.std::__1::__compressed_pair_elem.684" = type { %"class.std::__1::unique_ptr.682"* }
%"class.v8::base::Optional" = type { %"class.v8::base::internal::OptionalBase" }
%"class.v8::base::internal::OptionalBase" = type { %"struct.v8::base::internal::OptionalStorage" }
%"struct.v8::base::internal::OptionalStorage" = type { %"struct.v8::base::internal::OptionalStorageBase" }
%"struct.v8::base::internal::OptionalStorageBase" = type { i8, %union.anon }
%union.anon = type { i32 }
%"class.v8::internal::StatsTable" = type { i32* (i8*)*, i8* (i8*, i32, i32, i64)*, void (i8*, i32)* }
%"class.v8::base::RecursiveMutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.v8::internal::Logger" = type { %"class.v8::internal::CodeEventListener", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.688", %"class.std::__1::unique_ptr.694", %"struct.std::__1::atomic.154", %"class.std::__1::unique_ptr.700", %"class.std::__1::unique_ptr.706", %"class.std::__1::unique_ptr.712", %"class.std::__1::unique_ptr.718", %"class.std::__1::unique_ptr.724", %"class.std::__1::set.730", i32, i8, %"class.v8::internal::ExistingCodeLogger", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::CodeEventListener" = type { i32 (...)** }
%"class.std::__1::unique_ptr.688" = type { %"class.std::__1::__compressed_pair.689" }
%"class.std::__1::__compressed_pair.689" = type { %"struct.std::__1::__compressed_pair_elem.690" }
%"struct.std::__1::__compressed_pair_elem.690" = type { %"class.v8::internal::Ticker"* }
%"class.v8::internal::Ticker" = type opaque
%"class.std::__1::unique_ptr.694" = type { %"class.std::__1::__compressed_pair.695" }
%"class.std::__1::__compressed_pair.695" = type { %"struct.std::__1::__compressed_pair_elem.696" }
%"struct.std::__1::__compressed_pair_elem.696" = type { %"class.v8::internal::Profiler"* }
%"class.v8::internal::Profiler" = type opaque
%"class.std::__1::unique_ptr.700" = type { %"class.std::__1::__compressed_pair.701" }
%"class.std::__1::__compressed_pair.701" = type { %"struct.std::__1::__compressed_pair_elem.702" }
%"struct.std::__1::__compressed_pair_elem.702" = type { %"class.v8::internal::Log"* }
%"class.v8::internal::Log" = type opaque
%"class.std::__1::unique_ptr.706" = type { %"class.std::__1::__compressed_pair.707" }
%"class.std::__1::__compressed_pair.707" = type { %"struct.std::__1::__compressed_pair_elem.708" }
%"struct.std::__1::__compressed_pair_elem.708" = type { %"class.v8::internal::PerfBasicLogger"* }
%"class.v8::internal::PerfBasicLogger" = type opaque
%"class.std::__1::unique_ptr.712" = type { %"class.std::__1::__compressed_pair.713" }
%"class.std::__1::__compressed_pair.713" = type { %"struct.std::__1::__compressed_pair_elem.714" }
%"struct.std::__1::__compressed_pair_elem.714" = type { %"class.v8::internal::PerfJitLogger"* }
%"class.v8::internal::PerfJitLogger" = type opaque
%"class.std::__1::unique_ptr.718" = type { %"class.std::__1::__compressed_pair.719" }
%"class.std::__1::__compressed_pair.719" = type { %"struct.std::__1::__compressed_pair_elem.720" }
%"struct.std::__1::__compressed_pair_elem.720" = type { %"class.v8::internal::LowLevelLogger"* }
%"class.v8::internal::LowLevelLogger" = type opaque
%"class.std::__1::unique_ptr.724" = type { %"class.std::__1::__compressed_pair.725" }
%"class.std::__1::__compressed_pair.725" = type { %"struct.std::__1::__compressed_pair_elem.726" }
%"struct.std::__1::__compressed_pair_elem.726" = type { %"class.v8::internal::JitLogger"* }
%"class.v8::internal::JitLogger" = type opaque
%"class.std::__1::set.730" = type { %"class.std::__1::__tree.731" }
%"class.std::__1::__tree.731" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.732", %"class.std::__1::__compressed_pair.736" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.732" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"struct.std::__1::__compressed_pair_elem.82" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.736" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.v8::internal::ExistingCodeLogger" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::CodeEventListener"* }
%"class.v8::internal::StubCache" = type { [2048 x %"struct.v8::internal::StubCache::Entry"], [512 x %"struct.v8::internal::StubCache::Entry"], %"class.v8::internal::Isolate"* }
%"struct.v8::internal::StubCache::Entry" = type { %"class.v8::internal::StrongTaggedValue", %"class.v8::internal::TaggedValue", %"class.v8::internal::StrongTaggedValue" }
%"class.v8::internal::TaggedValue" = type { %"class.v8::internal::TaggedImpl.739" }
%"class.v8::internal::TaggedImpl.739" = type { i32 }
%"class.v8::internal::StrongTaggedValue" = type { %"class.v8::internal::TaggedImpl.738" }
%"class.v8::internal::TaggedImpl.738" = type { i32 }
%"class.v8::internal::Deoptimizer" = type opaque
%"class.v8::internal::MaterializedObjectStore" = type opaque
%"class.v8::internal::DescriptorLookupCache" = type { [64 x %"struct.v8::internal::DescriptorLookupCache::Key"], [64 x i32] }
%"struct.v8::internal::DescriptorLookupCache::Key" = type { %"class.v8::internal::Map", %"class.v8::internal::Name" }
%"class.v8::internal::Map" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Name" = type { %"class.v8::internal::TorqueGeneratedName" }
%"class.v8::internal::TorqueGeneratedName" = type { %"class.v8::internal::PrimitiveHeapObject" }
%"class.v8::internal::PrimitiveHeapObject" = type { %"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" }
%"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" = type { %"class.v8::internal::HeapObject" }
%"struct.v8::internal::HandleScopeData" = type { i64*, i64*, i32, i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::CanonicalHandleScope" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::OptimizedCompilationInfo"*, %"class.v8::internal::Zone"*, %"class.v8::internal::RootIndexMap"*, %"class.std::__1::unique_ptr.746", i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::OptimizedCompilationInfo" = type opaque
%"class.v8::internal::RootIndexMap" = type opaque
%"class.std::__1::unique_ptr.746" = type { %"class.std::__1::__compressed_pair.747" }
%"class.std::__1::__compressed_pair.747" = type { %"struct.std::__1::__compressed_pair_elem.748" }
%"struct.std::__1::__compressed_pair_elem.748" = type { %"class.v8::internal::IdentityMap"* }
%"class.v8::internal::IdentityMap" = type opaque
%"class.v8::internal::HandleScopeImplementer" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::DetachableVector", %"class.v8::internal::DetachableVector.752", %"class.v8::internal::DetachableVector.753", %"class.v8::internal::DetachableVector.752", i64*, i64*, %"struct.v8::internal::HandleScopeData" }
%"class.v8::internal::DetachableVector" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVectorBase" = type { i8*, i64, i64 }
%"class.v8::internal::DetachableVector.753" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVector.752" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::UnicodeCache" = type opaque
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic.21", %"struct.std::__1::atomic.21", %"class.std::__1::unique_ptr.740", %"class.std::__1::unique_ptr.483" }
%"class.std::__1::unique_ptr.740" = type { %"class.std::__1::__compressed_pair.741" }
%"class.std::__1::__compressed_pair.741" = type { %"struct.std::__1::__compressed_pair_elem.742" }
%"struct.std::__1::__compressed_pair_elem.742" = type { %"class.v8::internal::VirtualMemory"* }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::unique_ptr.483" = type { %"class.std::__1::__compressed_pair.484" }
%"class.std::__1::__compressed_pair.484" = type { %"struct.std::__1::__compressed_pair_elem.485" }
%"struct.std::__1::__compressed_pair_elem.485" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type { %"class.v8::PageAllocator", %"class.v8::base::Mutex", i64, i64, %"class.v8::PageAllocator"*, %"class.v8::base::RegionAllocator" }
%"class.v8::base::RegionAllocator" = type { %"class.v8::base::RegionAllocator::Region", i64, i64, i64, i64, %"class.std::__1::set.486", %"class.std::__1::set.494" }
%"class.v8::base::RegionAllocator::Region" = type <{ %"class.v8::base::AddressRegion", i32, [4 x i8] }>
%"class.std::__1::set.486" = type { %"class.std::__1::__tree.487" }
%"class.std::__1::__tree.487" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.488", %"class.std::__1::__compressed_pair.492" }
%"class.std::__1::__compressed_pair.488" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"class.std::__1::__compressed_pair.492" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::set.494" = type { %"class.std::__1::__tree.495" }
%"class.std::__1::__tree.495" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.488", %"class.std::__1::__compressed_pair.496" }
%"class.std::__1::__compressed_pair.496" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.v8::internal::InnerPointerToCodeCache" = type opaque
%"class.v8::internal::GlobalHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.754", %"class.std::__1::vector.760", %"class.std::__1::unique_ptr.767", %"class.std::__1::vector.774", %"class.std::__1::unique_ptr.781", i64, %"class.std::__1::vector.787", %"class.std::__1::vector.795", %"class.std::__1::vector.803", i8, i8, i32 }
%"class.std::__1::unique_ptr.754" = type { %"class.std::__1::__compressed_pair.755" }
%"class.std::__1::__compressed_pair.755" = type { %"struct.std::__1::__compressed_pair_elem.756" }
%"struct.std::__1::__compressed_pair_elem.756" = type { %"class.v8::internal::GlobalHandles::NodeSpace"* }
%"class.v8::internal::GlobalHandles::NodeSpace" = type opaque
%"class.std::__1::vector.760" = type { %"class.std::__1::__vector_base.761" }
%"class.std::__1::__vector_base.761" = type { %"class.v8::internal::GlobalHandles::Node"**, %"class.v8::internal::GlobalHandles::Node"**, %"class.std::__1::__compressed_pair.762" }
%"class.v8::internal::GlobalHandles::Node" = type opaque
%"class.std::__1::__compressed_pair.762" = type { %"struct.std::__1::__compressed_pair_elem.763" }
%"struct.std::__1::__compressed_pair_elem.763" = type { %"class.v8::internal::GlobalHandles::Node"** }
%"class.std::__1::unique_ptr.767" = type { %"class.std::__1::__compressed_pair.768" }
%"class.std::__1::__compressed_pair.768" = type { %"struct.std::__1::__compressed_pair_elem.769" }
%"struct.std::__1::__compressed_pair_elem.769" = type { %"class.v8::internal::GlobalHandles::NodeSpace.770"* }
%"class.v8::internal::GlobalHandles::NodeSpace.770" = type opaque
%"class.std::__1::vector.774" = type { %"class.std::__1::__vector_base.775" }
%"class.std::__1::__vector_base.775" = type { %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.std::__1::__compressed_pair.776" }
%"class.v8::internal::GlobalHandles::TracedNode" = type opaque
%"class.std::__1::__compressed_pair.776" = type { %"struct.std::__1::__compressed_pair_elem.777" }
%"struct.std::__1::__compressed_pair_elem.777" = type { %"class.v8::internal::GlobalHandles::TracedNode"** }
%"class.std::__1::unique_ptr.781" = type { %"class.std::__1::__compressed_pair.782" }
%"class.std::__1::__compressed_pair.782" = type { %"struct.std::__1::__compressed_pair_elem.783" }
%"struct.std::__1::__compressed_pair_elem.783" = type { %"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace"* }
%"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace" = type opaque
%"class.std::__1::vector.787" = type { %"class.std::__1::__vector_base.788" }
%"class.std::__1::__vector_base.788" = type { %"struct.std::__1::pair.789"*, %"struct.std::__1::pair.789"*, %"class.std::__1::__compressed_pair.790" }
%"struct.std::__1::pair.789" = type opaque
%"class.std::__1::__compressed_pair.790" = type { %"struct.std::__1::__compressed_pair_elem.791" }
%"struct.std::__1::__compressed_pair_elem.791" = type { %"struct.std::__1::pair.789"* }
%"class.std::__1::vector.795" = type { %"class.std::__1::__vector_base.796" }
%"class.std::__1::__vector_base.796" = type { %"struct.std::__1::pair.797"*, %"struct.std::__1::pair.797"*, %"class.std::__1::__compressed_pair.798" }
%"struct.std::__1::pair.797" = type opaque
%"class.std::__1::__compressed_pair.798" = type { %"struct.std::__1::__compressed_pair_elem.799" }
%"struct.std::__1::__compressed_pair_elem.799" = type { %"struct.std::__1::pair.797"* }
%"class.std::__1::vector.803" = type { %"class.std::__1::__vector_base.804" }
%"class.std::__1::__vector_base.804" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.std::__1::__compressed_pair.805" }
%"class.v8::internal::GlobalHandles::PendingPhantomCallback" = type { void (%"class.v8::WeakCallbackInfo"*)*, i8*, [2 x i8*] }
%"class.v8::WeakCallbackInfo" = type { %"class.v8::Isolate"*, i8*, {}**, [2 x i8*] }
%"class.v8::Isolate" = type { i8 }
%"class.std::__1::__compressed_pair.805" = type { %"struct.std::__1::__compressed_pair_elem.806" }
%"struct.std::__1::__compressed_pair_elem.806" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"* }
%"class.v8::internal::EternalHandles" = type { i32, %"class.std::__1::vector.810", %"class.std::__1::vector.817" }
%"class.std::__1::vector.810" = type { %"class.std::__1::__vector_base.811" }
%"class.std::__1::__vector_base.811" = type { i64**, i64**, %"class.std::__1::__compressed_pair.812" }
%"class.std::__1::__compressed_pair.812" = type { %"struct.std::__1::__compressed_pair_elem.813" }
%"struct.std::__1::__compressed_pair_elem.813" = type { i64** }
%"class.v8::internal::ThreadManager" = type opaque
%"class.v8::bigint::Processor" = type opaque
%"class.v8::internal::RuntimeState" = type { %"class.std::__1::unique_ptr.824" }
%"class.std::__1::unique_ptr.824" = type { %"class.std::__1::__compressed_pair.825" }
%"class.std::__1::__compressed_pair.825" = type { %"struct.std::__1::__compressed_pair_elem.826" }
%"struct.std::__1::__compressed_pair_elem.826" = type { %"struct.v8::internal::Runtime::Function"* }
%"struct.v8::internal::Runtime::Function" = type { i32, i32, i8*, i64, i8, i8 }
%"class.v8::internal::Builtins" = type { %"class.v8::internal::Isolate"*, i8, i32 }
%"class.v8::internal::SetupIsolateDelegate" = type opaque
%"class.v8::internal::RegExpStack" = type opaque
%"class.std::__1::vector.817" = type { %"class.std::__1::__vector_base.818" }
%"class.std::__1::__vector_base.818" = type { i32*, i32*, %"class.std::__1::__compressed_pair.819" }
%"class.std::__1::__compressed_pair.819" = type { %"struct.std::__1::__compressed_pair_elem.820" }
%"struct.std::__1::__compressed_pair_elem.820" = type { i32* }
%"class.v8::internal::DateCache" = type opaque
%"class.v8::base::RandomNumberGenerator" = type { i64, i64, i64 }
%"struct.std::__1::atomic.830" = type { %"struct.std::__1::__atomic_base.831" }
%"struct.std::__1::__atomic_base.831" = type { %"struct.std::__1::__cxx_atomic_impl.832" }
%"struct.std::__1::__cxx_atomic_impl.832" = type { %"struct.std::__1::__cxx_atomic_base_impl.833" }
%"struct.std::__1::__cxx_atomic_base_impl.833" = type { i32 }
%"class.v8::Promise" = type { i8 }
%"struct.std::__1::atomic.840" = type { %"struct.std::__1::__atomic_base.841" }
%"struct.std::__1::__atomic_base.841" = type { %"struct.std::__1::__cxx_atomic_impl.842" }
%"struct.std::__1::__cxx_atomic_impl.842" = type { %"struct.std::__1::__cxx_atomic_base_impl.843" }
%"struct.std::__1::__cxx_atomic_base_impl.843" = type { i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.845" }
%"class.std::__1::__compressed_pair.845" = type { %"struct.std::__1::__compressed_pair_elem.846" }
%"struct.std::__1::__compressed_pair_elem.846" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.847 }
%union.anon.847 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unordered_map.851" = type { %"class.std::__1::__hash_table.852" }
%"class.std::__1::__hash_table.852" = type <{ %"class.std::__1::unique_ptr.853", %"class.std::__1::__compressed_pair.863", %"class.std::__1::__compressed_pair.868", %"class.std::__1::__compressed_pair.871", [4 x i8] }>
%"class.std::__1::unique_ptr.853" = type { %"class.std::__1::__compressed_pair.854" }
%"class.std::__1::__compressed_pair.854" = type { %"struct.std::__1::__compressed_pair_elem.855", %"struct.std::__1::__compressed_pair_elem.857" }
%"struct.std::__1::__compressed_pair_elem.855" = type { %"struct.std::__1::__hash_node_base.856"** }
%"struct.std::__1::__hash_node_base.856" = type { %"struct.std::__1::__hash_node_base.856"* }
%"struct.std::__1::__compressed_pair_elem.857" = type { %"class.std::__1::__bucket_list_deallocator.858" }
%"class.std::__1::__bucket_list_deallocator.858" = type { %"class.std::__1::__compressed_pair.859" }
%"class.std::__1::__compressed_pair.859" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.863" = type { %"struct.std::__1::__compressed_pair_elem.864" }
%"struct.std::__1::__compressed_pair_elem.864" = type { %"struct.std::__1::__hash_node_base.856" }
%"class.std::__1::__compressed_pair.868" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.871" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::atomic.154" = type { %"struct.std::__1::__atomic_base.155" }
%"struct.std::__1::__atomic_base.155" = type { %"struct.std::__1::__cxx_atomic_impl.156" }
%"struct.std::__1::__cxx_atomic_impl.156" = type { %"struct.std::__1::__cxx_atomic_base_impl.157" }
%"struct.std::__1::__cxx_atomic_base_impl.157" = type { i8 }
%"class.v8::internal::Debug" = type { %"class.v8::debug::DebugDelegate"*, i8, i8, i8, i8, i8, i8, i8, i8, i8, %"class.v8::internal::DebugInfoListNode"*, %"class.std::__1::unique_ptr.877", %"class.v8::internal::Handle.883", %"class.v8::internal::DebugFeatureTracker", %"class.v8::internal::Debug::ThreadLocal", %"class.v8::internal::Handle.884", %"class.v8::internal::Isolate"* }
%"class.v8::debug::DebugDelegate" = type { i32 (...)** }
%"class.v8::internal::DebugInfoListNode" = type { i64*, %"class.v8::internal::DebugInfoListNode"* }
%"class.std::__1::unique_ptr.877" = type { %"class.std::__1::__compressed_pair.878" }
%"class.std::__1::__compressed_pair.878" = type { %"struct.std::__1::__compressed_pair_elem.879" }
%"struct.std::__1::__compressed_pair_elem.879" = type { %"class.v8::internal::Debug::TemporaryObjectsTracker"* }
%"class.v8::internal::Debug::TemporaryObjectsTracker" = type opaque
%"class.v8::internal::Handle.883" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::DebugFeatureTracker" = type <{ %"class.v8::internal::Isolate"*, i32, [4 x i8] }>
%"class.v8::internal::Debug::ThreadLocal" = type <{ i64, i32, i8, [3 x i8], %"class.v8::internal::Object", i8, [3 x i8], i32, i32, i32, %"class.v8::internal::Object", %"class.v8::internal::Object", i32, i8, [3 x i8] }>
%"class.v8::internal::Handle.884" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HeapProfiler" = type { %"class.v8::internal::HeapObjectAllocationTracker", %"class.std::__1::unique_ptr.885", %"class.std::__1::vector.891", %"class.std::__1::unique_ptr.899", %"class.std::__1::unique_ptr.905", i8, i8, %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.911", %"class.std::__1::vector.917", %"struct.std::__1::pair.925" }
%"class.v8::internal::HeapObjectAllocationTracker" = type { i32 (...)** }
%"class.std::__1::unique_ptr.885" = type { %"class.std::__1::__compressed_pair.886" }
%"class.std::__1::__compressed_pair.886" = type { %"struct.std::__1::__compressed_pair_elem.887" }
%"struct.std::__1::__compressed_pair_elem.887" = type { %"class.v8::internal::HeapObjectsMap"* }
%"class.v8::internal::HeapObjectsMap" = type opaque
%"class.std::__1::vector.891" = type { %"class.std::__1::__vector_base.892" }
%"class.std::__1::__vector_base.892" = type { %"class.std::__1::unique_ptr.893"*, %"class.std::__1::unique_ptr.893"*, %"class.std::__1::__compressed_pair.894" }
%"class.std::__1::unique_ptr.893" = type opaque
%"class.std::__1::__compressed_pair.894" = type { %"struct.std::__1::__compressed_pair_elem.895" }
%"struct.std::__1::__compressed_pair_elem.895" = type { %"class.std::__1::unique_ptr.893"* }
%"class.std::__1::unique_ptr.899" = type { %"class.std::__1::__compressed_pair.900" }
%"class.std::__1::__compressed_pair.900" = type { %"struct.std::__1::__compressed_pair_elem.901" }
%"struct.std::__1::__compressed_pair_elem.901" = type { %"class.v8::internal::StringsStorage"* }
%"class.v8::internal::StringsStorage" = type opaque
%"class.std::__1::unique_ptr.905" = type { %"class.std::__1::__compressed_pair.906" }
%"class.std::__1::__compressed_pair.906" = type { %"struct.std::__1::__compressed_pair_elem.907" }
%"struct.std::__1::__compressed_pair_elem.907" = type { %"class.v8::internal::AllocationTracker"* }
%"class.v8::internal::AllocationTracker" = type opaque
%"class.std::__1::unique_ptr.911" = type { %"class.std::__1::__compressed_pair.912" }
%"class.std::__1::__compressed_pair.912" = type { %"struct.std::__1::__compressed_pair_elem.913" }
%"struct.std::__1::__compressed_pair_elem.913" = type { %"class.v8::internal::SamplingHeapProfiler"* }
%"class.v8::internal::SamplingHeapProfiler" = type opaque
%"class.std::__1::vector.917" = type { %"class.std::__1::__vector_base.918" }
%"class.std::__1::__vector_base.918" = type { %"struct.std::__1::pair.919"*, %"struct.std::__1::pair.919"*, %"class.std::__1::__compressed_pair.920" }
%"struct.std::__1::pair.919" = type opaque
%"class.std::__1::__compressed_pair.920" = type { %"struct.std::__1::__compressed_pair_elem.921" }
%"struct.std::__1::__compressed_pair_elem.921" = type { %"struct.std::__1::pair.919"* }
%"struct.std::__1::pair.925" = type { i8 (%"class.v8::Isolate"*, %"class.v8::Local.2"*, i16, i8*)*, i8* }
%"class.v8::Local.2" = type { %"class.v8::Value"* }
%"class.std::__1::unique_ptr.926" = type { %"class.std::__1::__compressed_pair.927" }
%"class.std::__1::__compressed_pair.927" = type { %"struct.std::__1::__compressed_pair_elem.928" }
%"struct.std::__1::__compressed_pair_elem.928" = type { %"class.v8::internal::CodeEventDispatcher"* }
%"class.v8::internal::CodeEventDispatcher" = type { %"class.v8::internal::CodeEventListener", %"class.std::__1::unordered_set.929", %"class.v8::base::Mutex" }
%"class.std::__1::unordered_set.929" = type { %"class.std::__1::__hash_table.930" }
%"class.std::__1::__hash_table.930" = type <{ %"class.std::__1::unique_ptr.931", %"class.std::__1::__compressed_pair.941", %"class.std::__1::__compressed_pair.946", %"class.std::__1::__compressed_pair.950", [4 x i8] }>
%"class.std::__1::unique_ptr.931" = type { %"class.std::__1::__compressed_pair.932" }
%"class.std::__1::__compressed_pair.932" = type { %"struct.std::__1::__compressed_pair_elem.933", %"struct.std::__1::__compressed_pair_elem.935" }
%"struct.std::__1::__compressed_pair_elem.933" = type { %"struct.std::__1::__hash_node_base.934"** }
%"struct.std::__1::__hash_node_base.934" = type { %"struct.std::__1::__hash_node_base.934"* }
%"struct.std::__1::__compressed_pair_elem.935" = type { %"class.std::__1::__bucket_list_deallocator.936" }
%"class.std::__1::__bucket_list_deallocator.936" = type { %"class.std::__1::__compressed_pair.937" }
%"class.std::__1::__compressed_pair.937" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.941" = type { %"struct.std::__1::__compressed_pair_elem.942" }
%"struct.std::__1::__compressed_pair_elem.942" = type { %"struct.std::__1::__hash_node_base.934" }
%"class.std::__1::__compressed_pair.946" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.950" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.v8::internal::AstStringConstants" = type opaque
%"class.v8::internal::interpreter::Interpreter" = type opaque
%"class.v8::internal::compiler::PerIsolateCompilerCache" = type opaque
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"class.v8::internal::CompilerDispatcher" = type opaque
%"class.std::__1::queue" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.964" }
%"struct.std::__1::__split_buffer" = type { %"struct.std::__1::pair.958"**, %"struct.std::__1::pair.958"**, %"struct.std::__1::pair.958"**, %"class.std::__1::__compressed_pair.959" }
%"struct.std::__1::pair.958" = type opaque
%"class.std::__1::__compressed_pair.959" = type { %"struct.std::__1::__compressed_pair_elem.960" }
%"struct.std::__1::__compressed_pair_elem.960" = type { %"struct.std::__1::pair.958"** }
%"class.std::__1::__compressed_pair.964" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.v8::String" = type { i8 }
%"class.v8::Context" = type { i8 }
%"class.v8::FunctionCallbackInfo" = type <{ i64*, i64*, i32, [4 x i8] }>
%"class.v8::internal::Relocatable" = type { i32 (...)**, %"class.v8::internal::Isolate"*, %"class.v8::internal::Relocatable"* }
%"class.std::__1::vector.969" = type { %"class.std::__1::__vector_base.970" }
%"class.std::__1::__vector_base.970" = type { %"class.v8::internal::Handle.971"*, %"class.v8::internal::Handle.971"*, %"class.std::__1::__compressed_pair.972" }
%"class.v8::internal::Handle.971" = type { %"class.v8::internal::HandleBase" }
%"class.std::__1::__compressed_pair.972" = type { %"struct.std::__1::__compressed_pair_elem.973" }
%"struct.std::__1::__compressed_pair_elem.973" = type { %"class.v8::internal::Handle.971"* }
%"class.v8::internal::AddressToIndexHashMap" = type opaque
%"class.v8::internal::HeapObjectToIndexHashMap" = type opaque
%"class.v8::internal::MicrotaskQueue" = type opaque
%"class.v8::internal::CompilationStatistics" = type opaque
%"class.v8::internal::CodeTracer" = type <{ %"class.v8::internal::EmbeddedVector", %struct._IO_FILE*, i32, [4 x i8] }>
%"class.v8::internal::EmbeddedVector" = type { %"class.v8::internal::Vector", [128 x i8] }
%"class.v8::internal::Vector" = type { i8*, i64 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%"class.v8::PromiseRejectMessage" = type { %"class.v8::Local.835", i32, %"class.v8::Local.2" }
%"class.v8::Local.835" = type { %"class.v8::Promise"* }
%"class.v8::StartupData" = type { i8*, i32 }
%"class.v8_inspector::V8Inspector" = type opaque
%"class.v8::internal::compiler::NodeObserver" = type opaque
%"class.v8::internal::OptimizingCompileDispatcher" = type opaque
%"class.std::__1::unique_ptr.977" = type { %"class.std::__1::__compressed_pair.978" }
%"class.std::__1::__compressed_pair.978" = type { %"struct.std::__1::__compressed_pair_elem.979" }
%"struct.std::__1::__compressed_pair_elem.979" = type { %"class.v8::internal::PersistentHandlesList"* }
%"class.v8::internal::PersistentHandlesList" = type { %"class.v8::base::Mutex", %"class.v8::internal::PersistentHandles"* }
%"class.v8::internal::PersistentHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::vector.810", i64*, i64*, %"class.v8::internal::PersistentHandles"*, %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.983" = type { %"class.std::__1::__vector_base.984" }
%"class.std::__1::__vector_base.984" = type { void (%"class.v8::Isolate"*)**, void (%"class.v8::Isolate"*)**, %"class.std::__1::__compressed_pair.985" }
%"class.std::__1::__compressed_pair.985" = type { %"struct.std::__1::__compressed_pair_elem.986" }
%"struct.std::__1::__compressed_pair_elem.986" = type { void (%"class.v8::Isolate"*)** }
%"class.std::__1::shared_ptr.990" = type { %"class.v8::internal::metrics::Recorder"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::metrics::Recorder" = type opaque
%"class.std::__1::unordered_map.991" = type { %"class.std::__1::__hash_table.992" }
%"class.std::__1::__hash_table.992" = type <{ %"class.std::__1::unique_ptr.993", %"class.std::__1::__compressed_pair.1003", %"class.std::__1::__compressed_pair.1008", %"class.std::__1::__compressed_pair.1011", [4 x i8] }>
%"class.std::__1::unique_ptr.993" = type { %"class.std::__1::__compressed_pair.994" }
%"class.std::__1::__compressed_pair.994" = type { %"struct.std::__1::__compressed_pair_elem.995", %"struct.std::__1::__compressed_pair_elem.997" }
%"struct.std::__1::__compressed_pair_elem.995" = type { %"struct.std::__1::__hash_node_base.996"** }
%"struct.std::__1::__hash_node_base.996" = type { %"struct.std::__1::__hash_node_base.996"* }
%"struct.std::__1::__compressed_pair_elem.997" = type { %"class.std::__1::__bucket_list_deallocator.998" }
%"class.std::__1::__bucket_list_deallocator.998" = type { %"class.std::__1::__compressed_pair.999" }
%"class.std::__1::__compressed_pair.999" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.1003" = type { %"struct.std::__1::__compressed_pair_elem.1004" }
%"struct.std::__1::__compressed_pair_elem.1004" = type { %"struct.std::__1::__hash_node_base.996" }
%"class.std::__1::__compressed_pair.1008" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.1011" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.v8::metrics::LongTaskStats" = type { i64, i64, i64 }
%"class.v8::internal::BuiltinsConstantsTableBuilder" = type opaque
%"class.v8::ArrayBuffer::Allocator" = type { i32 (...)** }
%"class.std::__1::shared_ptr.162" = type { %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::FutexWaitListNode" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::shared_ptr.1015", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::base::ConditionVariable", %"class.v8::internal::FutexWaitListNode"*, %"class.v8::internal::FutexWaitListNode"*, %"class.std::__1::weak_ptr.1044", i64, i8*, i8, i8, %"class.v8::Global", %"class.v8::Global.1045", %"class.v8::base::TimeTicks", i64 }
%"class.std::__1::shared_ptr.1015" = type { %"class.v8::TaskRunner"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::TaskRunner" = type { i32 (...)** }
%"class.v8::base::ConditionVariable" = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.1040, %union.anon.1042, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.1040 = type { i64 }
%union.anon.1042 = type { i64 }
%"class.std::__1::weak_ptr.1044" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::BackingStore" = type <{ i8*, %"struct.std::__1::atomic.21", i64, %"union.v8::internal::BackingStore::TypeSpecificData", i16, [6 x i8] }>
%"union.v8::internal::BackingStore::TypeSpecificData" = type { %"class.std::__1::shared_ptr.162" }
%"class.v8::Global" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Promise"* }
%"class.v8::Global.1045" = type { %"class.v8::PersistentBase.1046" }
%"class.v8::PersistentBase.1046" = type { %"class.v8::Context"* }
%"class.v8::internal::CancelableTaskManager" = type <{ i64, %"class.std::__1::unordered_map.1016", %"class.v8::base::ConditionVariable", %"class.v8::base::Mutex", i8, [7 x i8] }>
%"class.std::__1::unordered_map.1016" = type { %"class.std::__1::__hash_table.1017" }
%"class.std::__1::__hash_table.1017" = type <{ %"class.std::__1::unique_ptr.1018", %"class.std::__1::__compressed_pair.1028", %"class.std::__1::__compressed_pair.1033", %"class.std::__1::__compressed_pair.1036", [4 x i8] }>
%"class.std::__1::unique_ptr.1018" = type { %"class.std::__1::__compressed_pair.1019" }
%"class.std::__1::__compressed_pair.1019" = type { %"struct.std::__1::__compressed_pair_elem.1020", %"struct.std::__1::__compressed_pair_elem.1022" }
%"struct.std::__1::__compressed_pair_elem.1020" = type { %"struct.std::__1::__hash_node_base.1021"** }
%"struct.std::__1::__hash_node_base.1021" = type { %"struct.std::__1::__hash_node_base.1021"* }
%"struct.std::__1::__compressed_pair_elem.1022" = type { %"class.std::__1::__bucket_list_deallocator.1023" }
%"class.std::__1::__bucket_list_deallocator.1023" = type { %"class.std::__1::__compressed_pair.1024" }
%"class.std::__1::__compressed_pair.1024" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.1028" = type { %"struct.std::__1::__compressed_pair_elem.1029" }
%"struct.std::__1::__compressed_pair_elem.1029" = type { %"struct.std::__1::__hash_node_base.1021" }
%"class.std::__1::__compressed_pair.1033" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.1036" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.v8::debug::ConsoleDelegate" = type { i32 (...)** }
%"class.v8::debug::AsyncEventDelegate" = type { i32 (...)** }
%"class.std::__1::unique_ptr.1047" = type { %"class.std::__1::__compressed_pair.1048" }
%"class.std::__1::__compressed_pair.1048" = type { %"struct.std::__1::__compressed_pair_elem.1049" }
%"struct.std::__1::__compressed_pair_elem.1049" = type { %"class.v8::internal::LocalIsolate"* }
%"class.v8::internal::LocalIsolate" = type { %"class.v8::internal::HiddenLocalFactory", %"class.v8::internal::LocalHeap", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.1076", %"class.v8::internal::ThreadId", i64, %"class.v8::internal::RuntimeCallStats"* }
%"class.v8::internal::HiddenLocalFactory" = type { %"class.v8::internal::LocalFactory" }
%"class.v8::internal::LocalFactory" = type { %"class.v8::internal::ReadOnlyRoots" }
%"class.v8::internal::ReadOnlyRoots" = type { i64* }
%"class.v8::internal::LocalHeap" = type { %"class.v8::internal::Heap"*, i8, %"struct.std::__1::atomic.1052", i8, i8, %"class.v8::internal::LocalHeap"*, %"class.v8::internal::LocalHeap"*, %"class.std::__1::unique_ptr.1056", %"class.std::__1::unique_ptr.1062", %"class.std::__1::unique_ptr.476", %"class.std::__1::vector.1068", %"class.v8::internal::ConcurrentAllocator" }
%"struct.std::__1::atomic.1052" = type { %"struct.std::__1::__atomic_base.1053" }
%"struct.std::__1::__atomic_base.1053" = type { %"struct.std::__1::__cxx_atomic_impl.1054" }
%"struct.std::__1::__cxx_atomic_impl.1054" = type { %"struct.std::__1::__cxx_atomic_base_impl.1055" }
%"struct.std::__1::__cxx_atomic_base_impl.1055" = type { i32 }
%"class.std::__1::unique_ptr.1056" = type { %"class.std::__1::__compressed_pair.1057" }
%"class.std::__1::__compressed_pair.1057" = type { %"struct.std::__1::__compressed_pair_elem.1058" }
%"struct.std::__1::__compressed_pair_elem.1058" = type { %"class.v8::internal::LocalHandles"* }
%"class.v8::internal::LocalHandles" = type { %"struct.v8::internal::HandleScopeData", %"class.std::__1::vector.810" }
%"class.std::__1::unique_ptr.1062" = type { %"class.std::__1::__compressed_pair.1063" }
%"class.std::__1::__compressed_pair.1063" = type { %"struct.std::__1::__compressed_pair_elem.1064" }
%"struct.std::__1::__compressed_pair_elem.1064" = type { %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.1068" = type { %"class.std::__1::__vector_base.1069" }
%"class.std::__1::__vector_base.1069" = type { %"struct.std::__1::pair.1070"*, %"struct.std::__1::pair.1070"*, %"class.std::__1::__compressed_pair.1071" }
%"struct.std::__1::pair.1070" = type opaque
%"class.std::__1::__compressed_pair.1071" = type { %"struct.std::__1::__compressed_pair_elem.1072" }
%"struct.std::__1::__compressed_pair_elem.1072" = type { %"struct.std::__1::pair.1070"* }
%"class.v8::internal::ConcurrentAllocator" = type { %"class.v8::internal::LocalHeap"*, %"class.v8::internal::PagedSpace"*, %"class.v8::internal::LocalAllocationBuffer" }
%"class.v8::internal::PagedSpace" = type { %"class.v8::internal::SpaceWithLinearArea", i32, i32, i64, %"class.v8::internal::AllocationStats", %"class.v8::base::Mutex", i64, i64 }
%"class.v8::internal::SpaceWithLinearArea" = type { %"class.v8::internal::Space", %"class.v8::internal::LinearAllocationArea", [3 x i64] }
%"class.v8::internal::Space" = type { %"class.v8::internal::BaseSpace", %"class.v8::internal::AllocationCounter", %"class.v8::internal::heap::List", %"struct.std::__1::atomic.21"*, %"class.std::__1::unique_ptr.99" }
%"class.v8::internal::AllocationCounter" = type <{ %"class.std::__1::vector.40", %"class.std::__1::vector.40", %"class.std::__1::unordered_set", i8, [7 x i8], i64, i64, i8, [7 x i8] }>
%"class.std::__1::vector.40" = type { %"class.std::__1::__vector_base.41" }
%"class.std::__1::__vector_base.41" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"class.std::__1::__compressed_pair.42" }
%"struct.v8::internal::AllocationCounter::AllocationObserverCounter" = type { %"class.v8::internal::AllocationObserver"*, i64, i64 }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"* }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table.47" }
%"class.std::__1::__hash_table.47" = type <{ %"class.std::__1::unique_ptr.48", %"class.std::__1::__compressed_pair.58", %"class.std::__1::__compressed_pair.63", %"class.std::__1::__compressed_pair.65", [4 x i8] }>
%"class.std::__1::unique_ptr.48" = type { %"class.std::__1::__compressed_pair.49" }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.50", %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.50" = type { %"struct.std::__1::__hash_node_base.51"** }
%"struct.std::__1::__hash_node_base.51" = type { %"struct.std::__1::__hash_node_base.51"* }
%"struct.std::__1::__compressed_pair_elem.52" = type { %"class.std::__1::__bucket_list_deallocator.53" }
%"class.std::__1::__bucket_list_deallocator.53" = type { %"class.std::__1::__compressed_pair.54" }
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.58" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"struct.std::__1::__compressed_pair_elem.59" = type { %"struct.std::__1::__hash_node_base.51" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.65" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.v8::internal::heap::List" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::MemoryChunk" = type { %"class.v8::internal::BasicMemoryChunk", [2 x %"class.v8::internal::SlotSet"*], %"struct.std::__1::atomic.21", %"struct.std::__1::atomic.26", %"class.v8::internal::SlotSet"*, [2 x %"class.v8::internal::TypedSlotSet"*], [2 x %"class.std::__1::set"*], %"class.v8::base::Mutex"*, %"struct.std::__1::atomic.88", %"class.v8::base::Mutex"*, i64, [2 x %"struct.std::__1::atomic.21"], %"class.v8::internal::heap::ListNode", %"class.v8::internal::FreeListCategory"**, %"struct.std::__1::atomic.26", %"class.v8::internal::Bitmap"*, %"class.v8::internal::CodeObjectRegistry"*, %"class.v8::internal::PossiblyEmptyBuckets" }
%"class.v8::internal::BasicMemoryChunk" = type { i64, i64, %"class.v8::internal::Heap"*, i64, i64, i64, i64, %"struct.std::__1::atomic.26", %"struct.std::__1::atomic.70", %"class.v8::internal::VirtualMemory" }
%"struct.std::__1::atomic.70" = type { %"struct.std::__1::__atomic_base.71" }
%"struct.std::__1::__atomic_base.71" = type { %"struct.std::__1::__cxx_atomic_impl.72" }
%"struct.std::__1::__cxx_atomic_impl.72" = type { %"struct.std::__1::__cxx_atomic_base_impl.73" }
%"struct.std::__1::__cxx_atomic_base_impl.73" = type { %"class.v8::internal::BaseSpace"* }
%"class.v8::internal::SlotSet" = type { i8 }
%"class.v8::internal::TypedSlotSet" = type { %"class.v8::internal::TypedSlots", i64 }
%"class.v8::internal::TypedSlots" = type { i32 (...)**, %"struct.v8::internal::TypedSlots::Chunk"*, %"struct.v8::internal::TypedSlots::Chunk"* }
%"struct.v8::internal::TypedSlots::Chunk" = type { %"struct.v8::internal::TypedSlots::Chunk"*, %"class.std::__1::vector.74" }
%"class.std::__1::vector.74" = type { %"class.std::__1::__vector_base.75" }
%"class.std::__1::__vector_base.75" = type { %"struct.v8::internal::TypedSlots::TypedSlot"*, %"struct.v8::internal::TypedSlots::TypedSlot"*, %"class.std::__1::__compressed_pair.76" }
%"struct.v8::internal::TypedSlots::TypedSlot" = type { i32 }
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.77" }
%"struct.std::__1::__compressed_pair_elem.77" = type { %"struct.v8::internal::TypedSlots::TypedSlot"* }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.81", %"class.std::__1::__compressed_pair.86" }
%"class.std::__1::__compressed_pair.81" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::atomic.88" = type { %"struct.std::__1::__atomic_base.89" }
%"struct.std::__1::__atomic_base.89" = type { %"struct.std::__1::__cxx_atomic_impl.90" }
%"struct.std::__1::__cxx_atomic_impl.90" = type { %"struct.std::__1::__cxx_atomic_base_impl.91" }
%"struct.std::__1::__cxx_atomic_base_impl.91" = type { i64 }
%"class.v8::internal::heap::ListNode" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::FreeListCategory" = type { i32, i32, %"class.v8::internal::FreeSpace", %"class.v8::internal::FreeListCategory"*, %"class.v8::internal::FreeListCategory"* }
%"class.v8::internal::FreeSpace" = type { %"class.v8::internal::TorqueGeneratedFreeSpace" }
%"class.v8::internal::TorqueGeneratedFreeSpace" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Bitmap" = type { i8 }
%"class.v8::internal::CodeObjectRegistry" = type <{ %"class.std::__1::vector.92", i8, [7 x i8] }>
%"class.std::__1::vector.92" = type { %"class.std::__1::__vector_base.93" }
%"class.std::__1::__vector_base.93" = type { i64*, i64*, %"class.std::__1::__compressed_pair.94" }
%"class.std::__1::__compressed_pair.94" = type { %"struct.std::__1::__compressed_pair_elem.95" }
%"struct.std::__1::__compressed_pair_elem.95" = type { i64* }
%"class.v8::internal::PossiblyEmptyBuckets" = type { i64 }
%"class.std::__1::unique_ptr.99" = type { %"class.std::__1::__compressed_pair.100" }
%"class.std::__1::__compressed_pair.100" = type { %"struct.std::__1::__compressed_pair_elem.101" }
%"struct.std::__1::__compressed_pair_elem.101" = type { %"class.v8::internal::FreeList"* }
%"class.v8::internal::FreeList" = type { i32 (...)**, i32, i32, i64, %"struct.std::__1::atomic.21", %"class.v8::internal::FreeListCategory"**, i64 }
%"class.v8::internal::LinearAllocationArea" = type { i64, i64, i64 }
%"class.v8::internal::LocalAllocationBuffer" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::LinearAllocationArea" }
%"class.std::__1::unique_ptr.1076" = type { %"class.std::__1::__compressed_pair.1077" }
%"class.std::__1::__compressed_pair.1077" = type { %"struct.std::__1::__compressed_pair_elem.1078" }
%"struct.std::__1::__compressed_pair_elem.1078" = type { %"class.v8::internal::LocalLogger"* }
%"class.v8::internal::LocalLogger" = type opaque
%"struct.v8::internal::ManagedPtrDestructor" = type { i64, %"struct.v8::internal::ManagedPtrDestructor"*, %"struct.v8::internal::ManagedPtrDestructor"*, i8*, void (i8*)*, i64* }
%"class.v8::internal::wasm::WasmEngine" = type opaque
%"class.std::__1::unique_ptr.1085" = type { %"class.std::__1::__compressed_pair.1086" }
%"class.std::__1::__compressed_pair.1086" = type { %"struct.std::__1::__compressed_pair_elem.1087" }
%"struct.std::__1::__compressed_pair_elem.1087" = type { %"class.v8::internal::TracingCpuProfilerImpl"* }
%"class.v8::internal::TracingCpuProfilerImpl" = type opaque
%"class.v8::internal::EmbeddedFileWriterInterface" = type opaque
%"class.v8::Context::BackupIncumbentScope" = type { %"class.v8::Local.836", i64, %"class.v8::Context::BackupIncumbentScope"* }
%"class.v8::Local.836" = type { %"class.v8::Context"* }
%"class.v8::internal::Isolate::ThreadDataTable" = type { %"class.std::__1::unordered_map.1093" }
%"class.std::__1::unordered_map.1093" = type { %"class.std::__1::__hash_table.1094" }
%"class.std::__1::__hash_table.1094" = type <{ %"class.std::__1::unique_ptr.1095", %"class.std::__1::__compressed_pair.1105", %"class.std::__1::__compressed_pair.1110", %"class.std::__1::__compressed_pair.1113", [4 x i8] }>
%"class.std::__1::unique_ptr.1095" = type { %"class.std::__1::__compressed_pair.1096" }
%"class.std::__1::__compressed_pair.1096" = type { %"struct.std::__1::__compressed_pair_elem.1097", %"struct.std::__1::__compressed_pair_elem.1099" }
%"struct.std::__1::__compressed_pair_elem.1097" = type { %"struct.std::__1::__hash_node_base.1098"** }
%"struct.std::__1::__hash_node_base.1098" = type { %"struct.std::__1::__hash_node_base.1098"* }
%"struct.std::__1::__compressed_pair_elem.1099" = type { %"class.std::__1::__bucket_list_deallocator.1100" }
%"class.std::__1::__bucket_list_deallocator.1100" = type { %"class.std::__1::__compressed_pair.1101" }
%"class.std::__1::__compressed_pair.1101" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.1105" = type { %"struct.std::__1::__compressed_pair_elem.1106" }
%"struct.std::__1::__compressed_pair_elem.1106" = type { %"struct.std::__1::__hash_node_base.1098" }
%"class.std::__1::__compressed_pair.1110" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.1113" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::atomic.1119" = type { %"struct.std::__1::__atomic_base.1120" }
%"struct.std::__1::__atomic_base.1120" = type { %"struct.std::__1::__cxx_atomic_impl.1121" }
%"struct.std::__1::__cxx_atomic_impl.1121" = type { %"struct.std::__1::__cxx_atomic_base_impl.1122" }
%"struct.std::__1::__cxx_atomic_base_impl.1122" = type { %"class.std::__1::vector.1123"* }
%"class.std::__1::vector.1123" = type { %"class.std::__1::__vector_base.1124" }
%"class.std::__1::__vector_base.1124" = type { %"struct.v8::MemoryRange"*, %"struct.v8::MemoryRange"*, %"class.std::__1::__compressed_pair.1125" }
%"struct.v8::MemoryRange" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.1125" = type { %"struct.std::__1::__compressed_pair_elem.1126" }
%"struct.std::__1::__compressed_pair_elem.1126" = type { %"struct.v8::MemoryRange"* }
%"struct.std::__1::atomic.31" = type { %"struct.std::__1::__atomic_base.32" }
%"struct.std::__1::__atomic_base.32" = type { %"struct.std::__1::__cxx_atomic_impl.33" }
%"struct.std::__1::__cxx_atomic_impl.33" = type { %"struct.std::__1::__cxx_atomic_base_impl.34" }
%"struct.std::__1::__cxx_atomic_base_impl.34" = type { i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.35" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %"struct.std::__1::pair"* }
%"class.v8::internal::NewSpace" = type { %"class.v8::internal::SpaceWithLinearArea", %"class.v8::base::Mutex", %"struct.std::__1::atomic.21", %"struct.std::__1::atomic.21", %"class.v8::internal::SemiSpace", %"class.v8::internal::SemiSpace", %"class.v8::internal::VirtualMemory", %"class.std::__1::vector.105" }
%"class.v8::internal::SemiSpace" = type { %"class.v8::internal::Space", i64, i64, i64, i64, i64, i32, %"class.v8::internal::Page"* }
%"class.v8::internal::Page" = type { %"class.v8::internal::MemoryChunk" }
%"class.std::__1::vector.105" = type { %"class.std::__1::__vector_base.106" }
%"class.std::__1::__vector_base.106" = type { %"struct.std::__1::pair.107"*, %"struct.std::__1::pair.107"*, %"class.std::__1::__compressed_pair.108" }
%"struct.std::__1::pair.107" = type { i32, i64 }
%"class.std::__1::__compressed_pair.108" = type { %"struct.std::__1::__compressed_pair_elem.109" }
%"struct.std::__1::__compressed_pair_elem.109" = type { %"struct.std::__1::pair.107"* }
%"class.v8::internal::CodeSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::OldLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace" }
%"class.v8::internal::LargeObjectSpace" = type { %"class.v8::internal::Space", %"struct.std::__1::atomic.21", i32, %"struct.std::__1::atomic.21", %"class.v8::base::Mutex", %"struct.std::__1::atomic.21" }
%"class.v8::internal::CodeLargeObjectSpace" = type { %"class.v8::internal::OldLargeObjectSpace", %"class.std::__1::unordered_map.113" }
%"class.std::__1::unordered_map.113" = type { %"class.std::__1::__hash_table.114" }
%"class.std::__1::__hash_table.114" = type <{ %"class.std::__1::unique_ptr.115", %"class.std::__1::__compressed_pair.125", %"class.std::__1::__compressed_pair.130", %"class.std::__1::__compressed_pair.135", [4 x i8] }>
%"class.std::__1::unique_ptr.115" = type { %"class.std::__1::__compressed_pair.116" }
%"class.std::__1::__compressed_pair.116" = type { %"struct.std::__1::__compressed_pair_elem.117", %"struct.std::__1::__compressed_pair_elem.119" }
%"struct.std::__1::__compressed_pair_elem.117" = type { %"struct.std::__1::__hash_node_base.118"** }
%"struct.std::__1::__hash_node_base.118" = type { %"struct.std::__1::__hash_node_base.118"* }
%"struct.std::__1::__compressed_pair_elem.119" = type { %"class.std::__1::__bucket_list_deallocator.120" }
%"class.std::__1::__bucket_list_deallocator.120" = type { %"class.std::__1::__compressed_pair.121" }
%"class.std::__1::__compressed_pair.121" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.125" = type { %"struct.std::__1::__compressed_pair_elem.126" }
%"struct.std::__1::__compressed_pair_elem.126" = type { %"struct.std::__1::__hash_node_base.118" }
%"class.std::__1::__compressed_pair.130" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.135" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.v8::internal::NewLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace", i64 }
%"class.v8::internal::OldSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::MapSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.std::__1::unique_ptr.148" = type { %"class.std::__1::__compressed_pair.149" }
%"class.std::__1::__compressed_pair.149" = type { %"struct.std::__1::__compressed_pair_elem.150" }
%"struct.std::__1::__compressed_pair_elem.150" = type { %"class.v8::internal::ConcurrentAllocator"* }
%"class.v8::internal::ArrayBufferExtension" = type { %"struct.std::__1::atomic.154", %"struct.std::__1::atomic.158", %"class.std::__1::shared_ptr", %"class.v8::internal::ArrayBufferExtension"*, %"struct.std::__1::atomic.21" }
%"struct.std::__1::atomic.158" = type { %"struct.std::__1::__atomic_base.159" }
%"struct.std::__1::__atomic_base.159" = type { %"struct.std::__1::__cxx_atomic_impl.160" }
%"struct.std::__1::__cxx_atomic_impl.160" = type { %"struct.std::__1::__cxx_atomic_base_impl.161" }
%"struct.std::__1::__cxx_atomic_base_impl.161" = type { i8 }
%"class.std::__1::shared_ptr" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"struct.std::__1::atomic.163" = type { %"struct.std::__1::__atomic_base.164" }
%"struct.std::__1::__atomic_base.164" = type { %"struct.std::__1::__cxx_atomic_impl.165" }
%"struct.std::__1::__cxx_atomic_impl.165" = type { %"struct.std::__1::__cxx_atomic_base_impl.166" }
%"struct.std::__1::__cxx_atomic_base_impl.166" = type { i32 }
%"class.v8::internal::AllocationObserver" = type { i32 (...)**, i64 }
%"class.v8::internal::StressScavengeObserver" = type opaque
%"class.v8::internal::Object" = type { %"class.v8::internal::TaggedImpl" }
%"class.v8::internal::TaggedImpl" = type { i64 }
%"class.std::__1::vector.167" = type { %"class.std::__1::__vector_base.168" }
%"class.std::__1::__vector_base.168" = type { %"struct.v8::internal::Heap::GCCallbackTuple"*, %"struct.v8::internal::Heap::GCCallbackTuple"*, %"class.std::__1::__compressed_pair.169" }
%"struct.v8::internal::Heap::GCCallbackTuple" = type { void (%"class.v8::Isolate"*, i32, i32, i8*)*, i32, i8* }
%"class.std::__1::__compressed_pair.169" = type { %"struct.std::__1::__compressed_pair_elem.170" }
%"struct.std::__1::__compressed_pair_elem.170" = type { %"struct.v8::internal::Heap::GCCallbackTuple"* }
%"class.std::__1::unique_ptr.174" = type { %"class.std::__1::__compressed_pair.175" }
%"class.std::__1::__compressed_pair.175" = type { %"struct.std::__1::__compressed_pair_elem.176" }
%"struct.std::__1::__compressed_pair_elem.176" = type { %"class.v8::internal::GCTracer"* }
%"class.v8::internal::GCTracer" = type opaque
%"class.std::__1::unique_ptr.180" = type { %"class.std::__1::__compressed_pair.181" }
%"class.std::__1::__compressed_pair.181" = type { %"struct.std::__1::__compressed_pair_elem.182" }
%"struct.std::__1::__compressed_pair_elem.182" = type { %"class.v8::internal::MarkCompactCollector"* }
%"class.v8::internal::MarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::base::Mutex", %"class.v8::base::Semaphore", i8, i8, i8, i8, i8, i8, [2 x i8], %"class.v8::internal::MarkingWorklists", %"class.v8::internal::WeakObjects", %"struct.v8::internal::EphemeronMarking", %"class.std::__1::unique_ptr.222", %"class.std::__1::unique_ptr.228", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", %"class.std::__1::vector.282", %"class.std::__1::vector.282", %"class.std::__1::vector.282", %"class.std::__1::vector.289", %"class.v8::internal::Sweeper"*, %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", [2 x i8], i32, i32, [4 x i8] }>
%"class.v8::internal::MarkCompactCollectorBase" = type { i32 (...)**, %"class.v8::internal::Heap"* }
%"class.v8::base::Semaphore" = type { %union.sem_t }
%union.sem_t = type { i64, [24 x i8] }
%"class.v8::internal::MarkingWorklists" = type { %"class.heap::base::Worklist", %"class.heap::base::Worklist", %"class.heap::base::Worklist.183", %"class.std::__1::vector.184", %"class.std::__1::vector.191", %"class.heap::base::Worklist" }
%"class.heap::base::Worklist.183" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment"*, %"struct.std::__1::atomic.21" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment" = type opaque
%"class.std::__1::vector.184" = type { %"class.std::__1::__vector_base.185" }
%"class.std::__1::__vector_base.185" = type { %"struct.v8::internal::ContextWorklistPair"*, %"struct.v8::internal::ContextWorklistPair"*, %"class.std::__1::__compressed_pair.186" }
%"struct.v8::internal::ContextWorklistPair" = type { i64, %"class.heap::base::Worklist"* }
%"class.std::__1::__compressed_pair.186" = type { %"struct.std::__1::__compressed_pair_elem.187" }
%"struct.std::__1::__compressed_pair_elem.187" = type { %"struct.v8::internal::ContextWorklistPair"* }
%"class.std::__1::vector.191" = type { %"class.std::__1::__vector_base.192" }
%"class.std::__1::__vector_base.192" = type { %"class.std::__1::unique_ptr.193"*, %"class.std::__1::unique_ptr.193"*, %"class.std::__1::__compressed_pair.194" }
%"class.std::__1::unique_ptr.193" = type opaque
%"class.std::__1::__compressed_pair.194" = type { %"struct.std::__1::__compressed_pair_elem.195" }
%"struct.std::__1::__compressed_pair_elem.195" = type { %"class.std::__1::unique_ptr.193"* }
%"class.heap::base::Worklist" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment"*, %"struct.std::__1::atomic.21" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment" = type opaque
%"class.v8::internal::WeakObjects" = type { %"class.v8::internal::Worklist", %"class.v8::internal::Worklist.199", %"class.v8::internal::Worklist.201", %"class.v8::internal::Worklist.201", %"class.v8::internal::Worklist.201", %"class.v8::internal::Worklist.203", %"class.v8::internal::Worklist.205", %"class.v8::internal::Worklist.207", %"class.v8::internal::Worklist.209", %"class.v8::internal::Worklist.211", %"class.v8::internal::Worklist.213" }
%"class.v8::internal::Worklist" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"struct.std::__1::atomic.21" }
%"class.v8::internal::Worklist.199" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"struct.std::__1::atomic.21" }
%"class.v8::internal::Worklist.201" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"struct.std::__1::atomic.21" }
%"class.v8::internal::Worklist.203" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"struct.std::__1::atomic.21" }
%"class.v8::internal::Worklist.205" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"struct.std::__1::atomic.21" }
%"class.v8::internal::Worklist.207" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"struct.std::__1::atomic.21" }
%"class.v8::internal::Worklist.209" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"struct.std::__1::atomic.21" }
%"class.v8::internal::Worklist.211" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"struct.std::__1::atomic.21" }
%"class.v8::internal::Worklist.213" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"struct.std::__1::atomic.21" }
%"struct.v8::internal::EphemeronMarking" = type { %"class.std::__1::vector.215", i8, i64 }
%"class.std::__1::vector.215" = type { %"class.std::__1::__vector_base.216" }
%"class.std::__1::__vector_base.216" = type { %"class.v8::internal::HeapObject"*, %"class.v8::internal::HeapObject"*, %"class.std::__1::__compressed_pair.217" }
%"class.std::__1::__compressed_pair.217" = type { %"struct.std::__1::__compressed_pair_elem.218" }
%"struct.std::__1::__compressed_pair_elem.218" = type { %"class.v8::internal::HeapObject"* }
%"class.std::__1::unique_ptr.222" = type { %"class.std::__1::__compressed_pair.223" }
%"class.std::__1::__compressed_pair.223" = type { %"struct.std::__1::__compressed_pair_elem.224" }
%"struct.std::__1::__compressed_pair_elem.224" = type { %"class.v8::internal::MainMarkingVisitor"* }
%"class.v8::internal::MainMarkingVisitor" = type opaque
%"class.std::__1::unique_ptr.228" = type { %"class.std::__1::__compressed_pair.229" }
%"class.std::__1::__compressed_pair.229" = type { %"struct.std::__1::__compressed_pair_elem.230" }
%"struct.std::__1::__compressed_pair_elem.230" = type { %"class.v8::internal::MarkingWorklists::Local"* }
%"class.v8::internal::MarkingWorklists::Local" = type { %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", i64, %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local"*, i8, [7 x i8], %"class.std::__1::unordered_map.231" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local" = type { %"class.heap::base::Worklist.183"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.heap::base::internal::SegmentBase" = type { i16, i16 }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local" = type { %"class.heap::base::Worklist"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.std::__1::unordered_map.231" = type { %"class.std::__1::__hash_table.232" }
%"class.std::__1::__hash_table.232" = type <{ %"class.std::__1::unique_ptr.233", %"class.std::__1::__compressed_pair.243", %"class.std::__1::__compressed_pair.248", %"class.std::__1::__compressed_pair.251", [4 x i8] }>
%"class.std::__1::unique_ptr.233" = type { %"class.std::__1::__compressed_pair.234" }
%"class.std::__1::__compressed_pair.234" = type { %"struct.std::__1::__compressed_pair_elem.235", %"struct.std::__1::__compressed_pair_elem.237" }
%"struct.std::__1::__compressed_pair_elem.235" = type { %"struct.std::__1::__hash_node_base.236"** }
%"struct.std::__1::__hash_node_base.236" = type { %"struct.std::__1::__hash_node_base.236"* }
%"struct.std::__1::__compressed_pair_elem.237" = type { %"class.std::__1::__bucket_list_deallocator.238" }
%"class.std::__1::__bucket_list_deallocator.238" = type { %"class.std::__1::__compressed_pair.239" }
%"class.std::__1::__compressed_pair.239" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.243" = type { %"struct.std::__1::__compressed_pair_elem.244" }
%"struct.std::__1::__compressed_pair_elem.244" = type { %"struct.std::__1::__hash_node_base.236" }
%"class.std::__1::__compressed_pair.248" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.251" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.v8::internal::NativeContextInferrer" = type { i8 }
%"class.v8::internal::NativeContextStats" = type { %"class.std::__1::unordered_map.258" }
%"class.std::__1::unordered_map.258" = type { %"class.std::__1::__hash_table.259" }
%"class.std::__1::__hash_table.259" = type <{ %"class.std::__1::unique_ptr.260", %"class.std::__1::__compressed_pair.270", %"class.std::__1::__compressed_pair.275", %"class.std::__1::__compressed_pair.278", [4 x i8] }>
%"class.std::__1::unique_ptr.260" = type { %"class.std::__1::__compressed_pair.261" }
%"class.std::__1::__compressed_pair.261" = type { %"struct.std::__1::__compressed_pair_elem.262", %"struct.std::__1::__compressed_pair_elem.264" }
%"struct.std::__1::__compressed_pair_elem.262" = type { %"struct.std::__1::__hash_node_base.263"** }
%"struct.std::__1::__hash_node_base.263" = type { %"struct.std::__1::__hash_node_base.263"* }
%"struct.std::__1::__compressed_pair_elem.264" = type { %"class.std::__1::__bucket_list_deallocator.265" }
%"class.std::__1::__bucket_list_deallocator.265" = type { %"class.std::__1::__compressed_pair.266" }
%"class.std::__1::__compressed_pair.266" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.270" = type { %"struct.std::__1::__compressed_pair_elem.271" }
%"struct.std::__1::__compressed_pair_elem.271" = type { %"struct.std::__1::__hash_node_base.263" }
%"class.std::__1::__compressed_pair.275" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.278" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.std::__1::vector.282" = type { %"class.std::__1::__vector_base.283" }
%"class.std::__1::__vector_base.283" = type { %"class.v8::internal::Page"**, %"class.v8::internal::Page"**, %"class.std::__1::__compressed_pair.284" }
%"class.std::__1::__compressed_pair.284" = type { %"struct.std::__1::__compressed_pair_elem.285" }
%"struct.std::__1::__compressed_pair_elem.285" = type { %"class.v8::internal::Page"** }
%"class.std::__1::vector.289" = type { %"class.std::__1::__vector_base.290" }
%"class.std::__1::__vector_base.290" = type { %"struct.std::__1::pair.291"*, %"struct.std::__1::pair.291"*, %"class.std::__1::__compressed_pair.292" }
%"struct.std::__1::pair.291" = type opaque
%"class.std::__1::__compressed_pair.292" = type { %"struct.std::__1::__compressed_pair_elem.293" }
%"struct.std::__1::__compressed_pair_elem.293" = type { %"struct.std::__1::pair.291"* }
%"class.v8::internal::Sweeper" = type <{ %"class.v8::internal::Heap"*, %"class.v8::internal::MajorNonAtomicMarkingState"*, %"class.std::__1::unique_ptr.297", %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.282"], [3 x %"class.std::__1::vector.282"], i8, %"struct.std::__1::atomic.154", [6 x i8], %"class.std::__1::vector.282", i64, %"class.v8::base::Semaphore", i8, i8, i8, [5 x i8] }>
%"class.std::__1::unique_ptr.297" = type { %"class.std::__1::__compressed_pair.298" }
%"class.std::__1::__compressed_pair.298" = type { %"struct.std::__1::__compressed_pair_elem.299" }
%"struct.std::__1::__compressed_pair_elem.299" = type { %"class.v8::JobHandle"* }
%"class.v8::JobHandle" = type { i32 (...)** }
%"class.v8::internal::MajorMarkingState" = type { i8 }
%"class.v8::internal::MajorNonAtomicMarkingState" = type { i8 }
%"class.v8::internal::MinorMarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::internal::Worklist.307"*, %"class.v8::internal::YoungGenerationMarkingVisitor"*, %"class.v8::base::Semaphore", %"class.std::__1::vector.282", %"class.std::__1::vector.282", %"class.v8::internal::MinorMarkingState", %"class.v8::internal::MinorNonAtomicMarkingState", [6 x i8] }>
%"class.v8::internal::Worklist.307" = type opaque
%"class.v8::internal::YoungGenerationMarkingVisitor" = type opaque
%"class.v8::internal::MinorMarkingState" = type { i8 }
%"class.v8::internal::MinorNonAtomicMarkingState" = type { i8 }
%"class.std::__1::unique_ptr.310" = type { %"class.std::__1::__compressed_pair.311" }
%"class.std::__1::__compressed_pair.311" = type { %"struct.std::__1::__compressed_pair_elem.312" }
%"struct.std::__1::__compressed_pair_elem.312" = type { %"class.v8::internal::ScavengerCollector"* }
%"class.v8::internal::ScavengerCollector" = type opaque
%"class.std::__1::unique_ptr.316" = type { %"class.std::__1::__compressed_pair.317" }
%"class.std::__1::__compressed_pair.317" = type { %"struct.std::__1::__compressed_pair_elem.318" }
%"struct.std::__1::__compressed_pair_elem.318" = type { %"class.v8::internal::ArrayBufferSweeper"* }
%"class.v8::internal::ArrayBufferSweeper" = type opaque
%"class.std::__1::unique_ptr.322" = type { %"class.std::__1::__compressed_pair.323" }
%"class.std::__1::__compressed_pair.323" = type { %"struct.std::__1::__compressed_pair_elem.324" }
%"struct.std::__1::__compressed_pair_elem.324" = type { %"class.v8::internal::MemoryAllocator"* }
%"class.v8::internal::MemoryAllocator" = type { %"class.v8::internal::Isolate"*, %"class.v8::PageAllocator"*, %"class.v8::PageAllocator"*, i64, %"struct.std::__1::atomic.21", %"struct.std::__1::atomic.21", %"struct.std::__1::atomic.21", %"struct.std::__1::atomic.21", %"class.v8::internal::VirtualMemory", %"class.v8::internal::MemoryAllocator::Unmapper", %"class.std::__1::unordered_set.332", %"class.v8::base::Mutex" }
%"class.v8::internal::MemoryAllocator::Unmapper" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MemoryAllocator"*, %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.325"], %"class.std::__1::unique_ptr.297" }
%"class.std::__1::vector.325" = type { %"class.std::__1::__vector_base.326" }
%"class.std::__1::__vector_base.326" = type { %"class.v8::internal::MemoryChunk"**, %"class.v8::internal::MemoryChunk"**, %"class.std::__1::__compressed_pair.327" }
%"class.std::__1::__compressed_pair.327" = type { %"struct.std::__1::__compressed_pair_elem.328" }
%"struct.std::__1::__compressed_pair_elem.328" = type { %"class.v8::internal::MemoryChunk"** }
%"class.std::__1::unique_ptr.361" = type { %"class.std::__1::__compressed_pair.362" }
%"class.std::__1::__compressed_pair.362" = type { %"struct.std::__1::__compressed_pair_elem.363" }
%"struct.std::__1::__compressed_pair_elem.363" = type { %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::IncrementalMarking" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MarkCompactCollector"*, %"class.v8::internal::WeakObjects"*, double, double, i64, i64, i64, i64, double, i64, %"struct.std::__1::atomic.364", i8, i8, i8, i8, [3 x i8], %"class.v8::internal::IncrementalMarkingJob", %"struct.std::__1::atomic.368", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorAtomicMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", %"class.v8::base::Mutex", %"class.std::__1::unordered_map.373" }
%"struct.std::__1::atomic.364" = type { %"struct.std::__1::__atomic_base.365" }
%"struct.std::__1::__atomic_base.365" = type { %"struct.std::__1::__cxx_atomic_impl.366" }
%"struct.std::__1::__cxx_atomic_impl.366" = type { %"struct.std::__1::__cxx_atomic_base_impl.367" }
%"struct.std::__1::__cxx_atomic_base_impl.367" = type { i8 }
%"class.v8::internal::IncrementalMarkingJob" = type <{ %"class.v8::base::Mutex", double, i8, i8, [6 x i8] }>
%"struct.std::__1::atomic.368" = type { %"struct.std::__1::__atomic_base.369" }
%"struct.std::__1::__atomic_base.369" = type { %"struct.std::__1::__cxx_atomic_impl.370" }
%"struct.std::__1::__cxx_atomic_impl.370" = type { %"struct.std::__1::__cxx_atomic_base_impl.371" }
%"struct.std::__1::__cxx_atomic_base_impl.371" = type { i32 }
%"class.v8::internal::IncrementalMarking::Observer" = type { %"class.v8::internal::AllocationObserver", %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::MajorAtomicMarkingState" = type { i8 }
%"class.std::__1::unordered_map.373" = type { %"class.std::__1::__hash_table.374" }
%"class.std::__1::__hash_table.374" = type <{ %"class.std::__1::unique_ptr.375", %"class.std::__1::__compressed_pair.385", %"class.std::__1::__compressed_pair.390", %"class.std::__1::__compressed_pair.393", [4 x i8] }>
%"class.std::__1::unique_ptr.375" = type { %"class.std::__1::__compressed_pair.376" }
%"class.std::__1::__compressed_pair.376" = type { %"struct.std::__1::__compressed_pair_elem.377", %"struct.std::__1::__compressed_pair_elem.379" }
%"struct.std::__1::__compressed_pair_elem.377" = type { %"struct.std::__1::__hash_node_base.378"** }
%"struct.std::__1::__hash_node_base.378" = type { %"struct.std::__1::__hash_node_base.378"* }
%"struct.std::__1::__compressed_pair_elem.379" = type { %"class.std::__1::__bucket_list_deallocator.380" }
%"class.std::__1::__bucket_list_deallocator.380" = type { %"class.std::__1::__compressed_pair.381" }
%"class.std::__1::__compressed_pair.381" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.385" = type { %"struct.std::__1::__compressed_pair_elem.386" }
%"struct.std::__1::__compressed_pair_elem.386" = type { %"struct.std::__1::__hash_node_base.378" }
%"class.std::__1::__compressed_pair.390" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.393" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.std::__1::unique_ptr.400" = type { %"class.std::__1::__compressed_pair.401" }
%"class.std::__1::__compressed_pair.401" = type { %"struct.std::__1::__compressed_pair_elem.402" }
%"struct.std::__1::__compressed_pair_elem.402" = type { %"class.v8::internal::ConcurrentMarking"* }
%"class.v8::internal::ConcurrentMarking" = type <{ %"class.std::__1::unique_ptr.297", %"class.v8::internal::Heap"*, %"class.v8::internal::MarkingWorklists"*, %"class.v8::internal::WeakObjects"*, [8 x %"struct.v8::internal::ConcurrentMarking::TaskState"], %"struct.std::__1::atomic.21", %"struct.std::__1::atomic.154", [7 x i8] }>
%"struct.v8::internal::ConcurrentMarking::TaskState" = type { i64, %"class.std::__1::unordered_map.403", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", [64 x i8] }
%"class.std::__1::unordered_map.403" = type { %"class.std::__1::__hash_table.404" }
%"class.std::__1::__hash_table.404" = type <{ %"class.std::__1::unique_ptr.405", %"class.std::__1::__compressed_pair.415", %"class.std::__1::__compressed_pair.420", %"class.std::__1::__compressed_pair.423", [4 x i8] }>
%"class.std::__1::unique_ptr.405" = type { %"class.std::__1::__compressed_pair.406" }
%"class.std::__1::__compressed_pair.406" = type { %"struct.std::__1::__compressed_pair_elem.407", %"struct.std::__1::__compressed_pair_elem.409" }
%"struct.std::__1::__compressed_pair_elem.407" = type { %"struct.std::__1::__hash_node_base.408"** }
%"struct.std::__1::__hash_node_base.408" = type { %"struct.std::__1::__hash_node_base.408"* }
%"struct.std::__1::__compressed_pair_elem.409" = type { %"class.std::__1::__bucket_list_deallocator.410" }
%"class.std::__1::__bucket_list_deallocator.410" = type { %"class.std::__1::__compressed_pair.411" }
%"class.std::__1::__compressed_pair.411" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.415" = type { %"struct.std::__1::__compressed_pair_elem.416" }
%"struct.std::__1::__compressed_pair_elem.416" = type { %"struct.std::__1::__hash_node_base.408" }
%"class.std::__1::__compressed_pair.420" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.423" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.std::__1::unique_ptr.430" = type { %"class.std::__1::__compressed_pair.431" }
%"class.std::__1::__compressed_pair.431" = type { %"struct.std::__1::__compressed_pair_elem.432" }
%"struct.std::__1::__compressed_pair_elem.432" = type { %"class.v8::internal::GCIdleTimeHandler"* }
%"class.v8::internal::GCIdleTimeHandler" = type opaque
%"class.std::__1::unique_ptr.436" = type { %"class.std::__1::__compressed_pair.437" }
%"class.std::__1::__compressed_pair.437" = type { %"struct.std::__1::__compressed_pair_elem.438" }
%"struct.std::__1::__compressed_pair_elem.438" = type { %"class.v8::internal::MemoryMeasurement"* }
%"class.v8::internal::MemoryMeasurement" = type { %"class.std::__1::list", %"class.std::__1::list", %"class.std::__1::list", %"class.v8::internal::Isolate"*, i8, i8, i8, %"class.v8::base::RandomNumberGenerator" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.439" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.439" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::unique_ptr.446" = type { %"class.std::__1::__compressed_pair.447" }
%"class.std::__1::__compressed_pair.447" = type { %"struct.std::__1::__compressed_pair_elem.448" }
%"struct.std::__1::__compressed_pair_elem.448" = type { %"class.v8::internal::MemoryReducer"* }
%"class.v8::internal::MemoryReducer" = type opaque
%"class.std::__1::unique_ptr.452" = type { %"class.std::__1::__compressed_pair.453" }
%"class.std::__1::__compressed_pair.453" = type { %"struct.std::__1::__compressed_pair_elem.454" }
%"struct.std::__1::__compressed_pair_elem.454" = type { %"class.v8::internal::ObjectStats"* }
%"class.v8::internal::ObjectStats" = type opaque
%"class.std::__1::unique_ptr.458" = type { %"class.std::__1::__compressed_pair.459" }
%"class.std::__1::__compressed_pair.459" = type { %"struct.std::__1::__compressed_pair_elem.460" }
%"struct.std::__1::__compressed_pair_elem.460" = type { %"class.v8::internal::ScavengeJob"* }
%"class.v8::internal::ScavengeJob" = type opaque
%"class.std::__1::unique_ptr.464" = type { %"class.std::__1::__compressed_pair.465" }
%"class.std::__1::__compressed_pair.465" = type { %"struct.std::__1::__compressed_pair_elem.466" }
%"struct.std::__1::__compressed_pair_elem.466" = type { %"class.v8::internal::AllocationObserver"* }
%"class.std::__1::unique_ptr.470" = type { %"class.std::__1::__compressed_pair.471" }
%"class.std::__1::__compressed_pair.471" = type { %"struct.std::__1::__compressed_pair_elem.472" }
%"struct.std::__1::__compressed_pair_elem.472" = type { %"class.v8::internal::LocalEmbedderHeapTracer"* }
%"class.v8::internal::LocalEmbedderHeapTracer" = type opaque
%"class.std::__1::unique_ptr.476" = type { %"class.std::__1::__compressed_pair.477" }
%"class.std::__1::__compressed_pair.477" = type { %"struct.std::__1::__compressed_pair_elem.478" }
%"struct.std::__1::__compressed_pair_elem.478" = type { %"class.v8::internal::MarkingBarrier"* }
%"class.v8::internal::MarkingBarrier" = type opaque
%"class.std::__1::shared_ptr.482" = type { %"class.v8::internal::CodeRange"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::CodeRange" = type { %"class.v8::internal::VirtualMemoryCage", %"struct.std::__1::atomic.501", %"class.v8::base::Mutex" }
%"class.v8::internal::VirtualMemoryCage" = type { i32 (...)**, i64, %"class.std::__1::unique_ptr.483", %"class.v8::internal::VirtualMemory" }
%"struct.std::__1::atomic.501" = type { %"struct.std::__1::__atomic_base.502" }
%"struct.std::__1::__atomic_base.502" = type { %"struct.std::__1::__cxx_atomic_impl.503" }
%"struct.std::__1::__cxx_atomic_impl.503" = type { %"struct.std::__1::__cxx_atomic_base_impl.504" }
%"struct.std::__1::__cxx_atomic_base_impl.504" = type { i8* }
%"class.v8::CppHeap" = type opaque
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"class.v8::internal::StrongRootsEntry" = type { %"class.v8::internal::FullObjectSlot", %"class.v8::internal::FullObjectSlot", %"class.v8::internal::StrongRootsEntry"*, %"class.v8::internal::StrongRootsEntry"* }
%"class.v8::internal::FullObjectSlot" = type { %"class.v8::internal::SlotBase" }
%"class.v8::internal::SlotBase" = type { i64 }
%"class.std::__1::unordered_map.505" = type { %"class.std::__1::__hash_table.506" }
%"class.std::__1::__hash_table.506" = type <{ %"class.std::__1::unique_ptr.507", %"class.std::__1::__compressed_pair.517", %"class.std::__1::__compressed_pair.522", %"class.std::__1::__compressed_pair.525", [4 x i8] }>
%"class.std::__1::unique_ptr.507" = type { %"class.std::__1::__compressed_pair.508" }
%"class.std::__1::__compressed_pair.508" = type { %"struct.std::__1::__compressed_pair_elem.509", %"struct.std::__1::__compressed_pair_elem.511" }
%"struct.std::__1::__compressed_pair_elem.509" = type { %"struct.std::__1::__hash_node_base.510"** }
%"struct.std::__1::__hash_node_base.510" = type { %"struct.std::__1::__hash_node_base.510"* }
%"struct.std::__1::__compressed_pair_elem.511" = type { %"class.std::__1::__bucket_list_deallocator.512" }
%"class.std::__1::__bucket_list_deallocator.512" = type { %"class.std::__1::__compressed_pair.513" }
%"class.std::__1::__compressed_pair.513" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.517" = type { %"struct.std::__1::__compressed_pair_elem.518" }
%"struct.std::__1::__compressed_pair_elem.518" = type { %"struct.std::__1::__hash_node_base.510" }
%"class.std::__1::__compressed_pair.522" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.525" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.std::__1::unique_ptr.531" = type { %"class.std::__1::__compressed_pair.532" }
%"class.std::__1::__compressed_pair.532" = type { %"struct.std::__1::__compressed_pair_elem.533" }
%"struct.std::__1::__compressed_pair_elem.533" = type { %"class.v8::internal::GlobalHandleVector"* }
%"class.v8::internal::GlobalHandleVector" = type opaque
%"class.std::__1::unique_ptr.537" = type { %"class.std::__1::__compressed_pair.538" }
%"class.std::__1::__compressed_pair.538" = type { %"struct.std::__1::__compressed_pair_elem.539" }
%"struct.std::__1::__compressed_pair_elem.539" = type { %"class.v8::internal::GlobalSafepoint"* }
%"class.v8::internal::GlobalSafepoint" = type opaque
%"class.v8::internal::Heap::ExternalStringTable" = type { %"class.v8::internal::Heap"*, %"class.std::__1::vector.543", %"class.std::__1::vector.543" }
%"class.std::__1::unique_ptr.550" = type { %"class.std::__1::__compressed_pair.551" }
%"class.std::__1::__compressed_pair.551" = type { %"struct.std::__1::__compressed_pair_elem.552" }
%"struct.std::__1::__compressed_pair_elem.552" = type { %"class.v8::internal::CollectionBarrier"* }
%"class.v8::internal::CollectionBarrier" = type opaque
%"class.v8::internal::HeapObject" = type { %"class.v8::internal::Object" }
%"class.v8::base::SharedMutex" = type { %union.pthread_rwlock_t }
%union.pthread_rwlock_t = type { %struct.__pthread_rwlock_arch_t }
%struct.__pthread_rwlock_arch_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i8, [7 x i8], i64, i32 }
%"class.v8::base::Mutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set.332" = type { %"class.std::__1::__hash_table.333" }
%"class.std::__1::__hash_table.333" = type <{ %"class.std::__1::unique_ptr.334", %"class.std::__1::__compressed_pair.344", %"class.std::__1::__compressed_pair.349", %"class.std::__1::__compressed_pair.353", [4 x i8] }>
%"class.std::__1::unique_ptr.334" = type { %"class.std::__1::__compressed_pair.335" }
%"class.std::__1::__compressed_pair.335" = type { %"struct.std::__1::__compressed_pair_elem.336", %"struct.std::__1::__compressed_pair_elem.338" }
%"struct.std::__1::__compressed_pair_elem.336" = type { %"struct.std::__1::__hash_node_base.337"** }
%"struct.std::__1::__hash_node_base.337" = type { %"struct.std::__1::__hash_node_base.337"* }
%"struct.std::__1::__compressed_pair_elem.338" = type { %"class.std::__1::__bucket_list_deallocator.339" }
%"class.std::__1::__bucket_list_deallocator.339" = type { %"class.std::__1::__compressed_pair.340" }
%"class.std::__1::__compressed_pair.340" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.344" = type { %"struct.std::__1::__compressed_pair_elem.345" }
%"struct.std::__1::__compressed_pair_elem.345" = type { %"struct.std::__1::__hash_node_base.337" }
%"class.std::__1::__compressed_pair.349" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.353" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.std::__1::unordered_map.582" = type { %"class.std::__1::__hash_table.583" }
%"class.std::__1::__hash_table.583" = type <{ %"class.std::__1::unique_ptr.584", %"class.std::__1::__compressed_pair.594", %"class.std::__1::__compressed_pair.599", %"class.std::__1::__compressed_pair.602", [4 x i8] }>
%"class.std::__1::unique_ptr.584" = type { %"class.std::__1::__compressed_pair.585" }
%"class.std::__1::__compressed_pair.585" = type { %"struct.std::__1::__compressed_pair_elem.586", %"struct.std::__1::__compressed_pair_elem.588" }
%"struct.std::__1::__compressed_pair_elem.586" = type { %"struct.std::__1::__hash_node_base.587"** }
%"struct.std::__1::__hash_node_base.587" = type { %"struct.std::__1::__hash_node_base.587"* }
%"struct.std::__1::__compressed_pair_elem.588" = type { %"class.std::__1::__bucket_list_deallocator.589" }
%"class.std::__1::__bucket_list_deallocator.589" = type { %"class.std::__1::__compressed_pair.590" }
%"class.std::__1::__compressed_pair.590" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.594" = type { %"struct.std::__1::__compressed_pair_elem.595" }
%"struct.std::__1::__compressed_pair_elem.595" = type { %"struct.std::__1::__hash_node_base.587" }
%"class.std::__1::__compressed_pair.599" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.602" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.std::__1::unordered_map.556" = type { %"class.std::__1::__hash_table.557" }
%"class.std::__1::__hash_table.557" = type <{ %"class.std::__1::unique_ptr.558", %"class.std::__1::__compressed_pair.568", %"class.std::__1::__compressed_pair.573", %"class.std::__1::__compressed_pair.576", [4 x i8] }>
%"class.std::__1::unique_ptr.558" = type { %"class.std::__1::__compressed_pair.559" }
%"class.std::__1::__compressed_pair.559" = type { %"struct.std::__1::__compressed_pair_elem.560", %"struct.std::__1::__compressed_pair_elem.562" }
%"struct.std::__1::__compressed_pair_elem.560" = type { %"struct.std::__1::__hash_node_base.561"** }
%"struct.std::__1::__hash_node_base.561" = type { %"struct.std::__1::__hash_node_base.561"* }
%"struct.std::__1::__compressed_pair_elem.562" = type { %"class.std::__1::__bucket_list_deallocator.563" }
%"class.std::__1::__bucket_list_deallocator.563" = type { %"class.std::__1::__compressed_pair.564" }
%"class.std::__1::__compressed_pair.564" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.568" = type { %"struct.std::__1::__compressed_pair_elem.569" }
%"struct.std::__1::__compressed_pair_elem.569" = type { %"struct.std::__1::__hash_node_base.561" }
%"class.std::__1::__compressed_pair.573" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.576" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.std::__1::unordered_map.606" = type { %"class.std::__1::__hash_table.607" }
%"class.std::__1::__hash_table.607" = type <{ %"class.std::__1::unique_ptr.608", %"class.std::__1::__compressed_pair.618", %"class.std::__1::__compressed_pair.623", %"class.std::__1::__compressed_pair.628", [4 x i8] }>
%"class.std::__1::unique_ptr.608" = type { %"class.std::__1::__compressed_pair.609" }
%"class.std::__1::__compressed_pair.609" = type { %"struct.std::__1::__compressed_pair_elem.610", %"struct.std::__1::__compressed_pair_elem.612" }
%"struct.std::__1::__compressed_pair_elem.610" = type { %"struct.std::__1::__hash_node_base.611"** }
%"struct.std::__1::__hash_node_base.611" = type { %"struct.std::__1::__hash_node_base.611"* }
%"struct.std::__1::__compressed_pair_elem.612" = type { %"class.std::__1::__bucket_list_deallocator.613" }
%"class.std::__1::__bucket_list_deallocator.613" = type { %"class.std::__1::__compressed_pair.614" }
%"class.std::__1::__compressed_pair.614" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.618" = type { %"struct.std::__1::__compressed_pair_elem.619" }
%"struct.std::__1::__compressed_pair_elem.619" = type { %"struct.std::__1::__hash_node_base.611" }
%"class.std::__1::__compressed_pair.623" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.628" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.std::__1::vector.634" = type { %"class.std::__1::__vector_base.635" }
%"class.std::__1::__vector_base.635" = type { %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.std::__1::__compressed_pair.636" }
%"class.std::__1::__compressed_pair.636" = type { %"struct.std::__1::__compressed_pair_elem.637" }
%"struct.std::__1::__compressed_pair_elem.637" = type { %"class.v8::internal::HeapObjectAllocationTracker"** }
%"class.std::__1::unique_ptr.641" = type { %"class.std::__1::__compressed_pair.642" }
%"class.std::__1::__compressed_pair.642" = type { %"struct.std::__1::__compressed_pair_elem.643" }
%"struct.std::__1::__compressed_pair_elem.643" = type { %"class.v8::internal::third_party_heap::Heap"* }
%"class.v8::internal::third_party_heap::Heap" = type { i8 }
%"struct.std::__1::atomic.21" = type { %"struct.std::__1::__atomic_base.22" }
%"struct.std::__1::__atomic_base.22" = type { %"struct.std::__1::__atomic_base.23" }
%"struct.std::__1::__atomic_base.23" = type { %"struct.std::__1::__cxx_atomic_impl.24" }
%"struct.std::__1::__cxx_atomic_impl.24" = type { %"struct.std::__1::__cxx_atomic_base_impl.25" }
%"struct.std::__1::__cxx_atomic_base_impl.25" = type { i64 }
%"class.v8::internal::AllocationStats" = type { %"struct.std::__1::atomic.21", i64, %"struct.std::__1::atomic.21" }
%"class.std::__1::vector.141" = type { %"class.std::__1::__vector_base.142" }
%"class.std::__1::__vector_base.142" = type { %"class.v8::internal::ReadOnlyPage"**, %"class.v8::internal::ReadOnlyPage"**, %"class.std::__1::__compressed_pair.143" }
%"class.v8::internal::ReadOnlyPage" = type { %"class.v8::internal::BasicMemoryChunk" }
%"class.std::__1::__compressed_pair.143" = type { %"struct.std::__1::__compressed_pair_elem.144" }
%"struct.std::__1::__compressed_pair_elem.144" = type { %"class.v8::internal::ReadOnlyPage"** }
%"class.std::__1::vector.543" = type { %"class.std::__1::__vector_base.544" }
%"class.std::__1::__vector_base.544" = type { %"class.v8::internal::Object"*, %"class.v8::internal::Object"*, %"class.std::__1::__compressed_pair.545" }
%"class.std::__1::__compressed_pair.545" = type { %"struct.std::__1::__compressed_pair_elem.546" }
%"struct.std::__1::__compressed_pair_elem.546" = type { %"class.v8::internal::Object"* }
%"class.v8::internal::JSFunction" = type { %"class.v8::internal::JSFunctionOrBoundFunction" }
%"class.v8::internal::JSFunctionOrBoundFunction" = type { %"class.v8::internal::TorqueGeneratedJSFunctionOrBoundFunction" }
%"class.v8::internal::TorqueGeneratedJSFunctionOrBoundFunction" = type { %"class.v8::internal::JSObject" }
%"class.v8::internal::JSObject" = type { %"class.v8::internal::TorqueGeneratedJSObject" }
%"class.v8::internal::TorqueGeneratedJSObject" = type { %"class.v8::internal::JSReceiver" }
%"class.v8::internal::JSReceiver" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::SharedFunctionInfo" = type { %"class.v8::internal::TorqueGeneratedSharedFunctionInfo" }
%"class.v8::internal::TorqueGeneratedSharedFunctionInfo" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::FactoryBase" = type { i8 }
%"class.v8::internal::Factory" = type { i8 }
%"class.v8::internal::ScopeInfo" = type { %"class.v8::internal::TorqueGeneratedScopeInfo" }
%"class.v8::internal::TorqueGeneratedScopeInfo" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Handle<v8::internal::JSFunction>::ObjectRef" = type { %"class.v8::internal::JSFunction" }
%"class.v8::internal::IsCompiledScope" = type <{ %"class.v8::internal::MaybeHandle.1138", i8, [7 x i8] }>
%"class.v8::internal::MaybeHandle.1138" = type { i64* }
%"class.v8::internal::DependentCode" = type { %"class.v8::internal::WeakFixedArray" }
%"class.v8::internal::WeakFixedArray" = type { %"class.v8::internal::TorqueGeneratedWeakFixedArray" }
%"class.v8::internal::TorqueGeneratedWeakFixedArray" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Handle<v8::internal::Map>::ObjectRef" = type { %"class.v8::internal::Map" }
%"class.v8::internal::PrototypeIterator" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::internal::Object", %"class.v8::internal::Handle.971", i32, i8, [3 x i8], i32, [4 x i8] }>
%"class.v8::internal::LookupIterator" = type { i32, i32, i8, i32, %"class.v8::internal::PropertyDetails", %"class.v8::internal::Isolate"*, %"class.v8::internal::Handle.1145", %"class.v8::internal::Handle.1133", %"class.v8::internal::Handle.1133", %"class.v8::internal::Handle.0", %"class.v8::internal::Handle.1133", i64, %"class.v8::internal::InternalIndex" }
%"class.v8::internal::PropertyDetails" = type { i32 }
%"class.v8::internal::Handle.1145" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::Handle.0" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::Handle.1133" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::InternalIndex" = type { i64 }
%"class.v8::internal::IncrementalStringBuilder" = type { %"class.v8::internal::Isolate"*, i32, i8, i32, i32, %"class.v8::internal::Handle.1131", %"class.v8::internal::Handle.1131" }
%"class.v8::internal::Handle.1131" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::Script" = type { %"class.v8::internal::TorqueGeneratedScript" }
%"class.v8::internal::TorqueGeneratedScript" = type { %"class.v8::internal::Struct" }
%"class.v8::internal::Struct" = type { %"class.v8::internal::TorqueGeneratedStruct" }
%"class.v8::internal::TorqueGeneratedStruct" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef" = type { %"class.v8::internal::SharedFunctionInfo" }
%"class.v8::internal::WasmInstanceObject" = type { %"class.v8::internal::JSObject" }
%"struct.v8::internal::wasm::WasmModule" = type { %"class.std::__1::unique_ptr.1154", i32, i32, i8, i8, i8, i8, i8, i32, %"class.std::__1::vector.1160", i32, i32, i32, i32, i32, i32, i32, i32, %"class.v8::internal::wasm::WireBytesRef", %"class.v8::internal::wasm::WireBytesRef", %"class.std::__1::vector.1174", %"class.std::__1::vector.1182", %"class.std::__1::vector.1189", %"class.std::__1::vector.1196", %"class.std::__1::vector.1203", %"class.std::__1::vector.1210", %"class.std::__1::vector.1217", %"class.std::__1::vector.1224", %"class.std::__1::vector.1231", %"class.std::__1::vector.1238", %"class.std::__1::vector.1251", %"class.std::__1::unordered_map.1258", %"class.v8::internal::wasm::SignatureMap", i8, %"class.v8::internal::wasm::LazilyGeneratedNames", %"struct.v8::internal::wasm::WasmDebugSymbols", %"class.std::__1::unique_ptr.1319" }
%"class.std::__1::unique_ptr.1154" = type { %"class.std::__1::__compressed_pair.1155" }
%"class.std::__1::__compressed_pair.1155" = type { %"struct.std::__1::__compressed_pair_elem.1156" }
%"struct.std::__1::__compressed_pair_elem.1156" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::vector.1160" = type { %"class.std::__1::__vector_base.1161" }
%"class.std::__1::__vector_base.1161" = type { %"struct.v8::internal::wasm::WasmGlobal"*, %"struct.v8::internal::wasm::WasmGlobal"*, %"class.std::__1::__compressed_pair.1169" }
%"struct.v8::internal::wasm::WasmGlobal" = type <{ %"class.v8::internal::wasm::ValueType", i8, [3 x i8], %"class.v8::internal::wasm::WasmInitExpr", %union.anon.1168, i8, i8, [2 x i8] }>
%"class.v8::internal::wasm::ValueType" = type { i32 }
%"class.v8::internal::wasm::WasmInitExpr" = type { %"union.v8::internal::wasm::WasmInitExpr::Immediate", i32, %"class.std::__1::unique_ptr.1162" }
%"union.v8::internal::wasm::WasmInitExpr::Immediate" = type { i64, [8 x i8] }
%"class.std::__1::unique_ptr.1162" = type { %"class.std::__1::__compressed_pair.1163" }
%"class.std::__1::__compressed_pair.1163" = type { %"struct.std::__1::__compressed_pair_elem.1164" }
%"struct.std::__1::__compressed_pair_elem.1164" = type { %"class.v8::internal::wasm::WasmInitExpr"* }
%union.anon.1168 = type { i32 }
%"class.std::__1::__compressed_pair.1169" = type { %"struct.std::__1::__compressed_pair_elem.1170" }
%"struct.std::__1::__compressed_pair_elem.1170" = type { %"struct.v8::internal::wasm::WasmGlobal"* }
%"class.v8::internal::wasm::WireBytesRef" = type { i32, i32 }
%"class.std::__1::vector.1174" = type { %"class.std::__1::__vector_base.1175" }
%"class.std::__1::__vector_base.1175" = type { %"struct.v8::internal::wasm::TypeDefinition"*, %"struct.v8::internal::wasm::TypeDefinition"*, %"class.std::__1::__compressed_pair.1177" }
%"struct.v8::internal::wasm::TypeDefinition" = type { %union.anon.1176 }
%union.anon.1176 = type { %"class.v8::internal::Signature"* }
%"class.v8::internal::Signature" = type { i64, i64, %"class.v8::internal::wasm::ValueType"* }
%"class.std::__1::__compressed_pair.1177" = type { %"struct.std::__1::__compressed_pair_elem.1178" }
%"struct.std::__1::__compressed_pair_elem.1178" = type { %"struct.v8::internal::wasm::TypeDefinition"* }
%"class.std::__1::vector.1182" = type { %"class.std::__1::__vector_base.1183" }
%"class.std::__1::__vector_base.1183" = type { i8*, i8*, %"class.std::__1::__compressed_pair.1184" }
%"class.std::__1::__compressed_pair.1184" = type { %"struct.std::__1::__compressed_pair_elem.1185" }
%"struct.std::__1::__compressed_pair_elem.1185" = type { i8* }
%"class.std::__1::vector.1189" = type { %"class.std::__1::__vector_base.1190" }
%"class.std::__1::__vector_base.1190" = type { i32*, i32*, %"class.std::__1::__compressed_pair.1191" }
%"class.std::__1::__compressed_pair.1191" = type { %"struct.std::__1::__compressed_pair_elem.1192" }
%"struct.std::__1::__compressed_pair_elem.1192" = type { i32* }
%"class.std::__1::vector.1196" = type { %"class.std::__1::__vector_base.1197" }
%"class.std::__1::__vector_base.1197" = type { %"struct.v8::internal::wasm::WasmFunction"*, %"struct.v8::internal::wasm::WasmFunction"*, %"class.std::__1::__compressed_pair.1198" }
%"struct.v8::internal::wasm::WasmFunction" = type <{ %"class.v8::internal::Signature"*, i32, i32, %"class.v8::internal::wasm::WireBytesRef", i8, i8, i8, [5 x i8] }>
%"class.std::__1::__compressed_pair.1198" = type { %"struct.std::__1::__compressed_pair_elem.1199" }
%"struct.std::__1::__compressed_pair_elem.1199" = type { %"struct.v8::internal::wasm::WasmFunction"* }
%"class.std::__1::vector.1203" = type { %"class.std::__1::__vector_base.1204" }
%"class.std::__1::__vector_base.1204" = type { %"struct.v8::internal::wasm::WasmDataSegment"*, %"struct.v8::internal::wasm::WasmDataSegment"*, %"class.std::__1::__compressed_pair.1205" }
%"struct.v8::internal::wasm::WasmDataSegment" = type <{ %"class.v8::internal::wasm::WasmInitExpr", %"class.v8::internal::wasm::WireBytesRef", i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.1205" = type { %"struct.std::__1::__compressed_pair_elem.1206" }
%"struct.std::__1::__compressed_pair_elem.1206" = type { %"struct.v8::internal::wasm::WasmDataSegment"* }
%"class.std::__1::vector.1210" = type { %"class.std::__1::__vector_base.1211" }
%"class.std::__1::__vector_base.1211" = type { %"struct.v8::internal::wasm::WasmTable"*, %"struct.v8::internal::wasm::WasmTable"*, %"class.std::__1::__compressed_pair.1212" }
%"struct.v8::internal::wasm::WasmTable" = type { %"class.v8::internal::wasm::ValueType", i32, i32, i8, i8, i8, %"class.v8::internal::wasm::WasmInitExpr" }
%"class.std::__1::__compressed_pair.1212" = type { %"struct.std::__1::__compressed_pair_elem.1213" }
%"struct.std::__1::__compressed_pair_elem.1213" = type { %"struct.v8::internal::wasm::WasmTable"* }
%"class.std::__1::vector.1217" = type { %"class.std::__1::__vector_base.1218" }
%"class.std::__1::__vector_base.1218" = type { %"struct.v8::internal::wasm::WasmImport"*, %"struct.v8::internal::wasm::WasmImport"*, %"class.std::__1::__compressed_pair.1219" }
%"struct.v8::internal::wasm::WasmImport" = type { %"class.v8::internal::wasm::WireBytesRef", %"class.v8::internal::wasm::WireBytesRef", i8, i32 }
%"class.std::__1::__compressed_pair.1219" = type { %"struct.std::__1::__compressed_pair_elem.1220" }
%"struct.std::__1::__compressed_pair_elem.1220" = type { %"struct.v8::internal::wasm::WasmImport"* }
%"class.std::__1::vector.1224" = type { %"class.std::__1::__vector_base.1225" }
%"class.std::__1::__vector_base.1225" = type { %"struct.v8::internal::wasm::WasmExport"*, %"struct.v8::internal::wasm::WasmExport"*, %"class.std::__1::__compressed_pair.1226" }
%"struct.v8::internal::wasm::WasmExport" = type { %"class.v8::internal::wasm::WireBytesRef", i8, i32 }
%"class.std::__1::__compressed_pair.1226" = type { %"struct.std::__1::__compressed_pair_elem.1227" }
%"struct.std::__1::__compressed_pair_elem.1227" = type { %"struct.v8::internal::wasm::WasmExport"* }
%"class.std::__1::vector.1231" = type { %"class.std::__1::__vector_base.1232" }
%"class.std::__1::__vector_base.1232" = type { %"struct.v8::internal::wasm::WasmException"*, %"struct.v8::internal::wasm::WasmException"*, %"class.std::__1::__compressed_pair.1233" }
%"struct.v8::internal::wasm::WasmException" = type { %"class.v8::internal::Signature"* }
%"class.std::__1::__compressed_pair.1233" = type { %"struct.std::__1::__compressed_pair_elem.1234" }
%"struct.std::__1::__compressed_pair_elem.1234" = type { %"struct.v8::internal::wasm::WasmException"* }
%"class.std::__1::vector.1238" = type { %"class.std::__1::__vector_base.1239" }
%"class.std::__1::__vector_base.1239" = type { %"struct.v8::internal::wasm::WasmElemSegment"*, %"struct.v8::internal::wasm::WasmElemSegment"*, %"class.std::__1::__compressed_pair.1246" }
%"struct.v8::internal::wasm::WasmElemSegment" = type <{ %"class.v8::internal::wasm::ValueType", i32, %"class.v8::internal::wasm::WasmInitExpr", %"class.std::__1::vector.1240", i32, [4 x i8] }>
%"class.std::__1::vector.1240" = type { %"class.std::__1::__vector_base.1241" }
%"class.std::__1::__vector_base.1241" = type { %"class.v8::internal::wasm::WasmInitExpr"*, %"class.v8::internal::wasm::WasmInitExpr"*, %"class.std::__1::__compressed_pair.1242" }
%"class.std::__1::__compressed_pair.1242" = type { %"struct.std::__1::__compressed_pair_elem.1164" }
%"class.std::__1::__compressed_pair.1246" = type { %"struct.std::__1::__compressed_pair_elem.1247" }
%"struct.std::__1::__compressed_pair_elem.1247" = type { %"struct.v8::internal::wasm::WasmElemSegment"* }
%"class.std::__1::vector.1251" = type { %"class.std::__1::__vector_base.1252" }
%"class.std::__1::__vector_base.1252" = type { %"struct.v8::internal::wasm::WasmCompilationHint"*, %"struct.v8::internal::wasm::WasmCompilationHint"*, %"class.std::__1::__compressed_pair.1253" }
%"struct.v8::internal::wasm::WasmCompilationHint" = type { i8, i8, i8 }
%"class.std::__1::__compressed_pair.1253" = type { %"struct.std::__1::__compressed_pair_elem.1254" }
%"struct.std::__1::__compressed_pair_elem.1254" = type { %"struct.v8::internal::wasm::WasmCompilationHint"* }
%"class.std::__1::unordered_map.1258" = type { %"class.std::__1::__hash_table.1259" }
%"class.std::__1::__hash_table.1259" = type <{ %"class.std::__1::unique_ptr.1260", %"class.std::__1::__compressed_pair.1270", %"class.std::__1::__compressed_pair.1275", %"class.std::__1::__compressed_pair.1280", [4 x i8] }>
%"class.std::__1::unique_ptr.1260" = type { %"class.std::__1::__compressed_pair.1261" }
%"class.std::__1::__compressed_pair.1261" = type { %"struct.std::__1::__compressed_pair_elem.1262", %"struct.std::__1::__compressed_pair_elem.1264" }
%"struct.std::__1::__compressed_pair_elem.1262" = type { %"struct.std::__1::__hash_node_base.1263"** }
%"struct.std::__1::__hash_node_base.1263" = type { %"struct.std::__1::__hash_node_base.1263"* }
%"struct.std::__1::__compressed_pair_elem.1264" = type { %"class.std::__1::__bucket_list_deallocator.1265" }
%"class.std::__1::__bucket_list_deallocator.1265" = type { %"class.std::__1::__compressed_pair.1266" }
%"class.std::__1::__compressed_pair.1266" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.1270" = type { %"struct.std::__1::__compressed_pair_elem.1271" }
%"struct.std::__1::__compressed_pair_elem.1271" = type { %"struct.std::__1::__hash_node_base.1263" }
%"class.std::__1::__compressed_pair.1275" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.1280" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.v8::internal::wasm::SignatureMap" = type { i8, [7 x i8], %"class.std::__1::unordered_map.1286" }
%"class.std::__1::unordered_map.1286" = type { %"class.std::__1::__hash_table.1287" }
%"class.std::__1::__hash_table.1287" = type <{ %"class.std::__1::unique_ptr.1288", %"class.std::__1::__compressed_pair.1298", %"class.std::__1::__compressed_pair.1303", %"class.std::__1::__compressed_pair.1306", [4 x i8] }>
%"class.std::__1::unique_ptr.1288" = type { %"class.std::__1::__compressed_pair.1289" }
%"class.std::__1::__compressed_pair.1289" = type { %"struct.std::__1::__compressed_pair_elem.1290", %"struct.std::__1::__compressed_pair_elem.1292" }
%"struct.std::__1::__compressed_pair_elem.1290" = type { %"struct.std::__1::__hash_node_base.1291"** }
%"struct.std::__1::__hash_node_base.1291" = type { %"struct.std::__1::__hash_node_base.1291"* }
%"struct.std::__1::__compressed_pair_elem.1292" = type { %"class.std::__1::__bucket_list_deallocator.1293" }
%"class.std::__1::__bucket_list_deallocator.1293" = type { %"class.std::__1::__compressed_pair.1294" }
%"class.std::__1::__compressed_pair.1294" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.1298" = type { %"struct.std::__1::__compressed_pair_elem.1299" }
%"struct.std::__1::__compressed_pair_elem.1299" = type { %"struct.std::__1::__hash_node_base.1291" }
%"class.std::__1::__compressed_pair.1303" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.1306" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.v8::internal::wasm::LazilyGeneratedNames" = type { %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.1312" }
%"class.std::__1::unique_ptr.1312" = type { %"class.std::__1::__compressed_pair.1313" }
%"class.std::__1::__compressed_pair.1313" = type { %"struct.std::__1::__compressed_pair_elem.1314" }
%"struct.std::__1::__compressed_pair_elem.1314" = type { %"class.std::__1::unordered_map.1315"* }
%"class.std::__1::unordered_map.1315" = type opaque
%"struct.v8::internal::wasm::WasmDebugSymbols" = type { i32, %"class.v8::internal::wasm::WireBytesRef" }
%"class.std::__1::unique_ptr.1319" = type { %"class.std::__1::__compressed_pair.1320" }
%"class.std::__1::__compressed_pair.1320" = type { %"struct.std::__1::__compressed_pair_elem.1321" }
%"struct.std::__1::__compressed_pair_elem.1321" = type { %"class.v8::internal::wasm::AsmJsOffsetInformation"* }
%"class.v8::internal::wasm::AsmJsOffsetInformation" = type { %"class.v8::base::Mutex", %"class.v8::internal::OwnedVector", %"class.std::__1::unique_ptr.1328" }
%"class.v8::internal::OwnedVector" = type { %"class.std::__1::unique_ptr.1322", i64 }
%"class.std::__1::unique_ptr.1322" = type { %"class.std::__1::__compressed_pair.1323" }
%"class.std::__1::__compressed_pair.1323" = type { %"struct.std::__1::__compressed_pair_elem.1324" }
%"struct.std::__1::__compressed_pair_elem.1324" = type { i8* }
%"class.std::__1::unique_ptr.1328" = type { %"class.std::__1::__compressed_pair.1329" }
%"class.std::__1::__compressed_pair.1329" = type { %"struct.std::__1::__compressed_pair_elem.1330" }
%"struct.std::__1::__compressed_pair_elem.1330" = type { %"struct.v8::internal::wasm::AsmJsOffsets"* }
%"struct.v8::internal::wasm::AsmJsOffsets" = type opaque
%"class.v8::base::Optional.1338" = type { %"class.v8::base::internal::OptionalBase.1339" }
%"class.v8::base::internal::OptionalBase.1339" = type { %"struct.v8::base::internal::OptionalStorage.1340" }
%"struct.v8::base::internal::OptionalStorage.1340" = type { %"struct.v8::base::internal::OptionalStorageBase.1341" }
%"struct.v8::base::internal::OptionalStorageBase.1341" = type { i8, %union.anon.1342 }
%union.anon.1342 = type { %"class.std::__1::function" }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { void (%"union.std::__1::__function::__policy_storage"*, %"class.v8::internal::HeapObject"*, %"class.v8::internal::CompressedObjectSlot"*, %"class.v8::internal::HeapObject"*)* }
%"class.v8::internal::CompressedObjectSlot" = type { %"class.v8::internal::SlotBase.1343" }
%"class.v8::internal::SlotBase.1343" = type { i64 }
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"class.v8::internal::FeedbackVector" = type { %"class.v8::internal::TorqueGeneratedFeedbackVector" }
%"class.v8::internal::TorqueGeneratedFeedbackVector" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::FeedbackCell" = type { %"class.v8::internal::TorqueGeneratedFeedbackCell" }
%"class.v8::internal::TorqueGeneratedFeedbackCell" = type { %"class.v8::internal::Struct" }

$_ZNK2v88internal18SharedFunctionInfo4NameEv = comdat any

$_ZN2v88internal10JSFunction18SetInterruptBudgetEv = comdat any

$_ZN2v88internal10JSReceiver15GetDataPropertyENS0_6HandleIS1_EENS2_INS0_4NameEEE = comdat any

$_ZN2v88internal17PrototypeIterator7AdvanceEv = comdat any

$_ZN2v88internal10JSFunction22ResetIfBytecodeFlushedENS_4base8OptionalINSt3__18functionIFvNS0_10HeapObjectENS0_20CompressedObjectSlotES6_EEEEE = comdat any

$_ZNK2v88internal18SharedFunctionInfo16GetBytecodeArrayINS0_7IsolateEEENS0_13BytecodeArrayEPT_ = comdat any

$_ZNK2v88internal10JSFunction9prototypeENS0_16PtrComprCageBaseE = comdat any

$_ZN2v88internal12FeedbackCell21reset_feedback_vectorENS_4base8OptionalINSt3__18functionIFvNS0_10HeapObjectENS0_20CompressedObjectSlotES6_EEEEE = comdat any

$_ZN2v88internal15IsCompiledScopeC2ENS0_18SharedFunctionInfoEPNS0_7IsolateE = comdat any

@_ZN2v88internal25FLAG_turboprop_as_toptierE = external local_unnamed_addr global i8, align 1
@_ZN2v88internal14FLAG_turbopropE = external local_unnamed_addr global i8, align 1
@_ZN2v88internal41FLAG_feedback_allocation_on_bytecode_sizeE = external local_unnamed_addr global i8, align 1
@.str = private unnamed_addr constant [18 x i8] c"Check failed: %s.\00", align 1
@.str.1 = private unnamed_addr constant [92 x i8] c"function->feedback_vector().length() == function->feedback_vector().metadata().slot_count()\00", align 1
@.str.2 = private unnamed_addr constant [119 x i8] c"function->closure_feedback_cell_array().length() == function->shared().feedback_metadata().create_closure_slot_count()\00", align 1
@_ZN2v88internal29FLAG_lazy_feedback_allocationE = external local_unnamed_addr global i8, align 1
@_ZN2v88internal15FLAG_always_optE = external local_unnamed_addr global i8, align 1
@_ZN2v88internal24FLAG_log_function_eventsE = external local_unnamed_addr global i8, align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"SetPrototype\00", align 1
@_ZN2v88internal13FLAG_log_mapsE = external local_unnamed_addr global i8, align 1
@_ZN2v88internal8FLAG_logE = external local_unnamed_addr global i8, align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"InitialMap\00", align 1
@.str.5 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.6 = private unnamed_addr constant [26 x i8] c"prototype->IsJSReceiver()\00", align 1
@.str.7 = private unnamed_addr constant [11 x i8] c"RAB / GSAB\00", align 1
@.str.8 = private unnamed_addr constant [18 x i8] c"has_initial_map()\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.10 = private unnamed_addr constant [51 x i8] c"max_nof_fields <= JSObject::kMaxInObjectProperties\00", align 1
@.str.11 = private unnamed_addr constant [90 x i8] c"static_cast<unsigned>(requested_embedder_fields) <= static_cast<unsigned>(max_nof_fields)\00", align 1
@.str.12 = private unnamed_addr constant [105 x i8] c"*in_object_properties == ((*instance_size - header_size) >> kTaggedSizeLog2) - requested_embedder_fields\00", align 1
@.str.13 = private unnamed_addr constant [91 x i8] c"static_cast<unsigned>(*instance_size) <= static_cast<unsigned>(JSObject::kMaxInstanceSize)\00", align 1
@.str.14 = private unnamed_addr constant [22 x i8] c"ClearTypeFeedbackInfo\00", align 1
@_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E = external local_unnamed_addr global %"class.v8::internal::SoleReadOnlyHeap"*, align 8
@_ZN2v88internal42FLAG_budget_for_feedback_vector_allocationE = external local_unnamed_addr global i32, align 4
@_ZN2v88internal41FLAG_scale_factor_for_feedback_allocationE = external local_unnamed_addr global i32, align 4
@.str.15 = private unnamed_addr constant [39 x i8] c"!constructor_or_back_pointer().IsMap()\00", align 1
@.str.16 = private unnamed_addr constant [21 x i8] c"SetInstancePrototype\00", align 1
@.str.17 = private unnamed_addr constant [61 x i8] c"constructor_initial_map->UsedInstanceSize() <= instance_size\00", align 1
@.str.18 = private unnamed_addr constant [53 x i8] c"static_cast<int>(elements_kind) < kElementsKindCount\00", align 1
@.str.20 = private unnamed_addr constant [21 x i8] c"() { [native code] }\00", align 1
@.str.21 = private unnamed_addr constant [23 x i8] c"(location_) != nullptr\00", align 1
@.str.22 = private unnamed_addr constant [19 x i8] c"!handle_.is_null()\00", align 1
@_ZN2v88internal19FLAG_flush_bytecodeE = external local_unnamed_addr global i8, align 1
@.str.23 = private unnamed_addr constant [27 x i8] c"value().IsFeedbackVector()\00", align 1
@_ZN2v88internal21FLAG_interrupt_budgetE = external local_unnamed_addr global i32, align 4
@switch.table._ZNK2v88internal10JSFunction19HasAttachedCodeKindENS0_8CodeKindE = private unnamed_addr constant [3 x i32] [i32 1024, i32 2048, i32 4096], align 4
@switch.table._ZNK2v88internal10JSFunction20HasAvailableCodeKindENS0_8CodeKindE = private unnamed_addr constant [13 x i32] [i32 1, i32 2, i32 4, i32 8, i32 16, i32 32, i32 64, i32 128, i32 256, i32 512, i32 1024, i32 2048, i32 4096], align 4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK2v88internal10JSFunction20GetAttachedCodeKindsEv(%"class.v8::internal::JSFunction"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::JSFunction", %"class.v8::internal::JSFunction"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, -4294967296
  %5 = add i64 %3, 23
  %6 = inttoptr i64 %5 to i32*
  %7 = load atomic i32, i32* %6 acquire, align 4
  %8 = zext i32 %7 to i64
  %9 = or i64 %4, %8
  %10 = add i64 %9, 31
  %11 = inttoptr i64 %10 to i32*
  %12 = load atomic i32, i32* %11 monotonic, align 4
  switch i32 %12, label %13 [
    i32 77, label %41
    i32 76, label %41
    i32 69, label %41
  ]

13:                                               ; preds = %1
  %14 = add i64 %9, 27
  %15 = inttoptr i64 %14 to i32*
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = and i32 %16, 15
  %18 = add nsw i32 %17, -10
  %19 = icmp ult i32 %18, 4
  br i1 %19, label %20, label %41

20:                                               ; preds = %13
  %21 = and i32 %16, 14
  %22 = icmp eq i32 %21, 12
  br i1 %22, label %23, label %34

23:                                               ; preds = %20
  %24 = add i64 %9, 15
  %25 = inttoptr i64 %24 to i32*
  %26 = load atomic i32, i32* %25 acquire, align 4
  %27 = zext i32 %26 to i64
  %28 = or i64 %4, %27
  %29 = add i64 %28, 7
  %30 = inttoptr i64 %29 to i32*
  %31 = load atomic i32, i32* %30 monotonic, align 4
  %32 = and i32 %31, 1
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %41

34:                                               ; preds = %23, %20
  %35 = add nsw i32 %17, -10
  %36 = icmp ult i32 %35, 3
  br i1 %36, label %37, label %41

37:                                               ; preds = %34
  %38 = sext i32 %35 to i64
  %39 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table._ZNK2v88internal10JSFunction19HasAttachedCodeKindENS0_8CodeKindE, i64 0, i64 %38
  %40 = load i32, i32* %39, align 4
  ret i32 %40

41:                                               ; preds = %34, %23, %13, %1, %1, %1
  %42 = phi i32 [ 0, %13 ], [ 0, %23 ], [ 1024, %1 ], [ 1024, %1 ], [ 1024, %1 ], [ 8192, %34 ]
  ret i32 %42
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK2v88internal10JSFunction21GetAvailableCodeKindsEv(%"class.v8::internal::JSFunction"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::JSFunction", %"class.v8::internal::JSFunction"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, -4294967296
  %5 = add i64 %3, 23
  %6 = inttoptr i64 %5 to i32*
  %7 = load atomic i32, i32* %6 acquire, align 4
  %8 = zext i32 %7 to i64
  %9 = or i64 %4, %8
  %10 = add i64 %9, 31
  %11 = inttoptr i64 %10 to i32*
  %12 = load atomic i32, i32* %11 monotonic, align 4
  switch i32 %12, label %13 [
    i32 77, label %85
    i32 76, label %85
    i32 69, label %85
  ]

13:                                               ; preds = %1
  %14 = add i64 %9, 27
  %15 = inttoptr i64 %14 to i32*
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = and i32 %16, 15
  %18 = add nsw i32 %17, -10
  %19 = icmp ult i32 %18, 4
  br i1 %19, label %20, label %37

20:                                               ; preds = %13
  %21 = and i32 %16, 14
  %22 = icmp eq i32 %21, 12
  br i1 %22, label %23, label %34

23:                                               ; preds = %20
  %24 = add i64 %9, 15
  %25 = inttoptr i64 %24 to i32*
  %26 = load atomic i32, i32* %25 acquire, align 4
  %27 = zext i32 %26 to i64
  %28 = or i64 %4, %27
  %29 = add i64 %28, 7
  %30 = inttoptr i64 %29 to i32*
  %31 = load atomic i32, i32* %30 monotonic, align 4
  %32 = and i32 %31, 1
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %37

34:                                               ; preds = %23, %20
  switch i32 %17, label %37 [
    i32 12, label %36
    i32 11, label %35
    i32 10, label %85
  ]

35:                                               ; preds = %34
  br label %37

36:                                               ; preds = %34
  br label %37

37:                                               ; preds = %13, %23, %35, %36, %34
  %38 = phi i32 [ 8192, %34 ], [ 4096, %36 ], [ 2048, %35 ], [ 0, %23 ], [ 0, %13 ]
  %39 = load i64, i64* %2, align 8
  %40 = add i64 %39, 11
  %41 = inttoptr i64 %40 to i32*
  %42 = load atomic i32, i32* %41 monotonic, align 4
  %43 = and i64 %39, -4294967296
  %44 = zext i32 %42 to i64
  %45 = or i64 %43, %44
  %46 = add i64 %45, 3
  %47 = inttoptr i64 %46 to i32*
  %48 = load atomic i32, i32* %47 acquire, align 4
  %49 = zext i32 %48 to i64
  %50 = and i64 %49, 1
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %81, label %52

52:                                               ; preds = %37
  %53 = or i64 %43, %49
  %54 = add i64 %53, -1
  %55 = inttoptr i64 %54 to i32*
  %56 = load atomic i32, i32* %55 monotonic, align 4
  %57 = zext i32 %56 to i64
  %58 = or i64 %43, %57
  %59 = add i64 %58, 7
  %60 = inttoptr i64 %59 to i16*
  %61 = load atomic i16, i16* %60 monotonic, align 2
  %62 = icmp eq i16 %61, 133
  br i1 %62, label %79, label %63

63:                                               ; preds = %52
  %64 = load atomic i32, i32* %55 monotonic, align 4
  %65 = zext i32 %64 to i64
  %66 = or i64 %43, %65
  %67 = add i64 %66, 7
  %68 = inttoptr i64 %67 to i16*
  %69 = load atomic i16, i16* %68 monotonic, align 2
  %70 = icmp eq i16 %69, 105
  br i1 %70, label %79, label %71

71:                                               ; preds = %63
  %72 = load atomic i32, i32* %55 monotonic, align 4
  %73 = zext i32 %72 to i64
  %74 = or i64 %43, %73
  %75 = add i64 %74, 7
  %76 = inttoptr i64 %75 to i16*
  %77 = load atomic i16, i16* %76 monotonic, align 2
  %78 = icmp eq i16 %77, 94
  br i1 %78, label %79, label %81

79:                                               ; preds = %52, %63, %71
  %80 = or i32 %38, 1024
  br label %81

81:                                               ; preds = %37, %71, %79
  %82 = phi i32 [ %80, %79 ], [ %38, %71 ], [ %38, %37 ]
  %83 = and i32 %82, 2048
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %85, label %113

85:                                               ; preds = %1, %1, %1, %34, %81
  %86 = phi i32 [ %82, %81 ], [ 1024, %34 ], [ 1024, %1 ], [ 1024, %1 ], [ 1024, %1 ]
  %87 = load i64, i64* %2, align 8
  %88 = add i64 %87, 11
  %89 = inttoptr i64 %88 to i32*
  %90 = load atomic i32, i32* %89 monotonic, align 4
  %91 = and i64 %87, -4294967296
  %92 = zext i32 %90 to i64
  %93 = or i64 %91, %92
  %94 = add i64 %93, 3
  %95 = inttoptr i64 %94 to i32*
  %96 = load atomic i32, i32* %95 acquire, align 4
  %97 = zext i32 %96 to i64
  %98 = and i64 %97, 1
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %113, label %100

100:                                              ; preds = %85
  %101 = or i64 %91, %97
  %102 = add i64 %101, -1
  %103 = inttoptr i64 %102 to i32*
  %104 = load atomic i32, i32* %103 monotonic, align 4
  %105 = zext i32 %104 to i64
  %106 = or i64 %91, %105
  %107 = add i64 %106, 7
  %108 = inttoptr i64 %107 to i16*
  %109 = load atomic i16, i16* %108 monotonic, align 2
  %110 = icmp eq i16 %109, 94
  %111 = or i32 %86, 2048
  %112 = select i1 %110, i32 %111, i32 %86
  br label %113

113:                                              ; preds = %100, %85, %81
  %114 = phi i32 [ %82, %81 ], [ %86, %85 ], [ %112, %100 ]
  %115 = load i64, i64* %2, align 8
  %116 = add i64 %115, 11
  %117 = inttoptr i64 %116 to i32*
  %118 = load atomic i32, i32* %117 monotonic, align 4
  %119 = and i64 %115, -4294967296
  %120 = zext i32 %118 to i64
  %121 = or i64 %119, %120
  %122 = add i64 %121, 3
  %123 = inttoptr i64 %122 to i32*
  %124 = load atomic i32, i32* %123 acquire, align 4
  %125 = zext i32 %124 to i64
  %126 = or i64 %119, %125
  %127 = icmp eq i32 %124, 170
  br i1 %127, label %246, label %128

128:                                              ; preds = %113
  %129 = and i64 %125, 1
  %130 = icmp eq i64 %129, 0
  br i1 %130, label %142, label %131

131:                                              ; preds = %128
  %132 = add i64 %126, -1
  %133 = inttoptr i64 %132 to i32*
  %134 = load atomic i32, i32* %133 monotonic, align 4
  %135 = zext i32 %134 to i64
  %136 = or i64 %119, %135
  %137 = add i64 %136, 7
  %138 = inttoptr i64 %137 to i16*
  %139 = load atomic i16, i16* %138 monotonic, align 2
  %140 = add i16 %139, -157
  %141 = icmp ugt i16 %140, 1
  br i1 %141, label %142, label %246

142:                                              ; preds = %128, %131
  %143 = load i64, i64* %2, align 8
  %144 = and i64 %143, -4294967296
  %145 = add i64 %143, 19
  %146 = inttoptr i64 %145 to i32*
  %147 = load i32, i32* %146, align 4
  %148 = zext i32 %147 to i64
  %149 = or i64 %144, %148
  %150 = add i64 %149, 3
  %151 = inttoptr i64 %150 to i32*
  %152 = load i32, i32* %151, align 4
  %153 = zext i32 %152 to i64
  %154 = or i64 %144, %153
  %155 = add i64 %154, -1
  %156 = inttoptr i64 %155 to i32*
  %157 = load atomic i32, i32* %156 monotonic, align 4
  %158 = zext i32 %157 to i64
  %159 = or i64 %144, %158
  %160 = add i64 %159, 7
  %161 = inttoptr i64 %160 to i16*
  %162 = load atomic i16, i16* %161 monotonic, align 2
  %163 = icmp eq i16 %162, 167
  br i1 %163, label %164, label %246

164:                                              ; preds = %142
  %165 = add i64 %154, 23
  %166 = inttoptr i64 %165 to i32*
  %167 = load atomic i32, i32* %166 acquire, align 4
  %168 = and i32 %167, 1
  %169 = icmp ne i32 %168, 0
  %170 = icmp ne i32 %167, 3
  %171 = and i1 %170, %169
  br i1 %171, label %172, label %246

172:                                              ; preds = %164
  %173 = load i64, i64* %2, align 8
  %174 = and i64 %173, -4294967296
  %175 = add i64 %173, 19
  %176 = inttoptr i64 %175 to i32*
  %177 = load i32, i32* %176, align 4
  %178 = zext i32 %177 to i64
  %179 = or i64 %174, %178
  %180 = add i64 %179, 3
  %181 = inttoptr i64 %180 to i32*
  %182 = load i32, i32* %181, align 4
  %183 = zext i32 %182 to i64
  %184 = or i64 %174, %183
  %185 = add i64 %184, 23
  %186 = inttoptr i64 %185 to i32*
  %187 = load atomic i32, i32* %186 acquire, align 4
  %188 = zext i32 %187 to i64
  %189 = and i64 %188, 1
  %190 = icmp ne i64 %189, 0
  %191 = icmp ne i32 %187, 3
  %192 = and i1 %191, %190
  %193 = and i64 %188, 4294967293
  %194 = or i64 %193, %174
  %195 = select i1 %192, i64 %194, i64 0
  %196 = and i64 %195, -4294967296
  %197 = add i64 %195, 15
  %198 = inttoptr i64 %197 to i32*
  %199 = load atomic i32, i32* %198 acquire, align 4
  %200 = zext i32 %199 to i64
  %201 = or i64 %196, %200
  %202 = add i64 %201, 7
  %203 = inttoptr i64 %202 to i32*
  %204 = load atomic i32, i32* %203 monotonic, align 4
  %205 = and i32 %204, 1
  %206 = icmp eq i32 %205, 0
  br i1 %206, label %207, label %246

207:                                              ; preds = %172
  %208 = load i64, i64* %2, align 8
  %209 = and i64 %208, -4294967296
  %210 = add i64 %208, 19
  %211 = inttoptr i64 %210 to i32*
  %212 = load i32, i32* %211, align 4
  %213 = zext i32 %212 to i64
  %214 = or i64 %209, %213
  %215 = add i64 %214, 3
  %216 = inttoptr i64 %215 to i32*
  %217 = load i32, i32* %216, align 4
  %218 = zext i32 %217 to i64
  %219 = or i64 %209, %218
  %220 = add i64 %219, 23
  %221 = inttoptr i64 %220 to i32*
  %222 = load atomic i32, i32* %221 acquire, align 4
  %223 = zext i32 %222 to i64
  %224 = and i64 %223, 1
  %225 = icmp ne i64 %224, 0
  %226 = icmp ne i32 %222, 3
  %227 = and i1 %226, %225
  %228 = and i64 %223, 4294967293
  %229 = or i64 %228, %209
  %230 = add i64 %229, 27
  %231 = inttoptr i64 %230 to i32*
  %232 = select i1 %227, i32* %231, i32* inttoptr (i64 27 to i32*)
  %233 = load atomic i32, i32* %232 monotonic, align 4
  %234 = and i32 %233, 15
  %235 = icmp ult i32 %234, 13
  br i1 %235, label %239, label %236

236:                                              ; preds = %207
  %237 = icmp eq i32 %234, 13
  %238 = select i1 %237, i32 8192, i32 1024
  br label %243

239:                                              ; preds = %207
  %240 = zext i32 %234 to i64
  %241 = getelementptr inbounds [13 x i32], [13 x i32]* @switch.table._ZNK2v88internal10JSFunction20HasAvailableCodeKindENS0_8CodeKindE, i64 0, i64 %240
  %242 = load i32, i32* %241, align 4
  br label %243

243:                                              ; preds = %239, %236
  %244 = phi i32 [ %238, %236 ], [ %242, %239 ]
  %245 = or i32 %244, %114
  br label %246

246:                                              ; preds = %172, %113, %131, %142, %164, %243
  %247 = phi i32 [ %114, %172 ], [ %245, %243 ], [ %114, %164 ], [ %114, %142 ], [ %114, %131 ], [ %114, %113 ]
  ret i32 %247
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal10JSFunction24HasAttachedOptimizedCodeEv(%"class.v8::internal::JSFunction"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::JSFunction", %"class.v8::internal::JSFunction"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, -4294967296
  %5 = add i64 %3, 23
  %6 = inttoptr i64 %5 to i32*
  %7 = load atomic i32, i32* %6 acquire, align 4
  %8 = zext i32 %7 to i64
  %9 = or i64 %4, %8
  %10 = add i64 %9, 31
  %11 = inttoptr i64 %10 to i32*
  %12 = load atomic i32, i32* %11 monotonic, align 4
  switch i32 %12, label %13 [
    i32 77, label %37
    i32 76, label %37
    i32 69, label %37
  ]

13:                                               ; preds = %1
  %14 = add i64 %9, 27
  %15 = inttoptr i64 %14 to i32*
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = and i32 %16, 15
  %18 = add nsw i32 %17, -10
  %19 = icmp ult i32 %18, 4
  br i1 %19, label %20, label %37

20:                                               ; preds = %13
  %21 = and i32 %16, 14
  %22 = icmp eq i32 %21, 12
  br i1 %22, label %23, label %34

23:                                               ; preds = %20
  %24 = add i64 %9, 15
  %25 = inttoptr i64 %24 to i32*
  %26 = load atomic i32, i32* %25 acquire, align 4
  %27 = zext i32 %26 to i64
  %28 = or i64 %4, %27
  %29 = add i64 %28, 7
  %30 = inttoptr i64 %29 to i32*
  %31 = load atomic i32, i32* %30 monotonic, align 4
  %32 = and i32 %31, 1
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %37

34:                                               ; preds = %23, %20
  switch i32 %17, label %37 [
    i32 10, label %35
    i32 11, label %36
  ]

35:                                               ; preds = %34
  br label %37

36:                                               ; preds = %34
  br label %37

37:                                               ; preds = %1, %1, %1, %13, %23, %34, %35, %36
  %38 = phi i1 [ false, %13 ], [ false, %23 ], [ false, %35 ], [ false, %36 ], [ false, %1 ], [ false, %1 ], [ false, %1 ], [ true, %34 ]
  ret i1 %38
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal10JSFunction25HasAvailableOptimizedCodeEv(%"class.v8::internal::JSFunction"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = tail call i32 @_ZNK2v88internal10JSFunction21GetAvailableCodeKindsEv(%"class.v8::internal::JSFunction"* %0)
  %3 = and i32 %2, 12288
  %4 = icmp ne i32 %3, 0
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal10JSFunction19HasAttachedCodeKindENS0_8CodeKindE(%"class.v8::internal::JSFunction"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::JSFunction", %"class.v8::internal::JSFunction"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = and i64 %4, -4294967296
  %6 = add i64 %4, 23
  %7 = inttoptr i64 %6 to i32*
  %8 = load atomic i32, i32* %7 acquire, align 4
  %9 = zext i32 %8 to i64
  %10 = or i64 %5, %9
  %11 = add i64 %10, 31
  %12 = inttoptr i64 %11 to i32*
  %13 = load atomic i32, i32* %12 monotonic, align 4
  switch i32 %13, label %14 [
    i32 77, label %42
    i32 76, label %42
    i32 69, label %42
  ]

14:                                               ; preds = %2
  %15 = add i64 %10, 27
  %16 = inttoptr i64 %15 to i32*
  %17 = load atomic i32, i32* %16 monotonic, align 4
  %18 = and i32 %17, 15
  %19 = add nsw i32 %18, -10
  %20 = icmp ult i32 %19, 4
  br i1 %20, label %21, label %42

21:                                               ; preds = %14
  %22 = and i32 %17, 14
  %23 = icmp eq i32 %22, 12
  br i1 %23, label %24, label %35

24:                                               ; preds = %21
  %25 = add i64 %10, 15
  %26 = inttoptr i64 %25 to i32*
  %27 = load atomic i32, i32* %26 acquire, align 4
  %28 = zext i32 %27 to i64
  %29 = or i64 %5, %28
  %30 = add i64 %29, 7
  %31 = inttoptr i64 %30 to i32*
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = and i32 %32, 1
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %42

35:                                               ; preds = %24, %21
  %36 = add nsw i32 %18, -10
  %37 = icmp ult i32 %36, 3
  br i1 %37, label %38, label %42

38:                                               ; preds = %35
  %39 = sext i32 %36 to i64
  %40 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table._ZNK2v88internal10JSFunction19HasAttachedCodeKindENS0_8CodeKindE, i64 0, i64 %39
  %41 = load i32, i32* %40, align 4
  br label %42

42:                                               ; preds = %38, %35, %2, %2, %2, %14, %24
  %43 = phi i32 [ 0, %14 ], [ 0, %24 ], [ 1024, %2 ], [ 1024, %2 ], [ 1024, %2 ], [ 8192, %35 ], [ %41, %38 ]
  %44 = icmp ult i32 %1, 13
  br i1 %44, label %48, label %45

45:                                               ; preds = %42
  %46 = icmp eq i32 %1, 13
  %47 = select i1 %46, i32 8192, i32 1024
  br label %52

48:                                               ; preds = %42
  %49 = sext i32 %1 to i64
  %50 = getelementptr inbounds [13 x i32], [13 x i32]* @switch.table._ZNK2v88internal10JSFunction20HasAvailableCodeKindENS0_8CodeKindE, i64 0, i64 %49
  %51 = load i32, i32* %50, align 4
  br label %52

52:                                               ; preds = %48, %45
  %53 = phi i32 [ %47, %45 ], [ %51, %48 ]
  %54 = and i32 %53, %43
  %55 = icmp ne i32 %54, 0
  ret i1 %55
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal10JSFunction20HasAvailableCodeKindENS0_8CodeKindE(%"class.v8::internal::JSFunction"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = tail call i32 @_ZNK2v88internal10JSFunction21GetAvailableCodeKindsEv(%"class.v8::internal::JSFunction"* %0)
  %4 = icmp ult i32 %1, 13
  br i1 %4, label %8, label %5

5:                                                ; preds = %2
  %6 = icmp eq i32 %1, 13
  %7 = select i1 %6, i32 8192, i32 1024
  br label %12

8:                                                ; preds = %2
  %9 = sext i32 %1 to i64
  %10 = getelementptr inbounds [13 x i32], [13 x i32]* @switch.table._ZNK2v88internal10JSFunction20HasAvailableCodeKindENS0_8CodeKindE, i64 0, i64 %9
  %11 = load i32, i32* %10, align 4
  br label %12

12:                                               ; preds = %8, %5
  %13 = phi i32 [ %7, %5 ], [ %11, %8 ]
  %14 = and i32 %13, %3
  %15 = icmp ne i32 %14, 0
  ret i1 %15
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal10JSFunction20ActiveTierIsIgnitionEv(%"class.v8::internal::JSFunction"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::JSFunction", %"class.v8::internal::JSFunction"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 11
  %5 = inttoptr i64 %4 to i32*
  %6 = load atomic i32, i32* %5 monotonic, align 4
  %7 = and i64 %3, -4294967296
  %8 = zext i32 %6 to i64
  %9 = or i64 %7, %8
  %10 = add i64 %9, 3
  %11 = inttoptr i64 %10 to i32*
  %12 = load atomic i32, i32* %11 acquire, align 4
  %13 = zext i32 %12 to i64
  %14 = and i64 %13, 1
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %50, label %16

16:                                               ; preds = %1
  %17 = or i64 %7, %13
  %18 = add i64 %17, -1
  %19 = inttoptr i64 %18 to i32*
  %20 = load atomic i32, i32* %19 monotonic, align 4
  %21 = zext i32 %20 to i64
  %22 = or i64 %7, %21
  %23 = add i64 %22, 7
  %24 = inttoptr i64 %23 to i16*
  %25 = load atomic i16, i16* %24 monotonic, align 2
  %26 = icmp eq i16 %25, 133
  br i1 %26, label %43, label %27

27:                                               ; preds = %16
  %28 = load atomic i32, i32* %19 monotonic, align 4
  %29 = zext i32 %28 to i64
  %30 = or i64 %7, %29
  %31 = add i64 %30, 7
  %32 = inttoptr i64 %31 to i16*
  %33 = load atomic i16, i16* %32 monotonic, align 2
  %34 = icmp eq i16 %33, 105
  br i1 %34, label %43, label %35

35:                                               ; preds = %27
  %36 = load atomic i32, i32* %19 monotonic, align 4
  %37 = zext i32 %36 to i64
  %38 = or i64 %7, %37
  %39 = add i64 %38, 7
  %40 = inttoptr i64 %39 to i16*
  %41 = load atomic i16, i16* %40 monotonic, align 2
  %42 = icmp eq i16 %41, 94
  br i1 %42, label %43, label %50

43:                                               ; preds = %16, %27, %35
  %44 = tail call i32 @_ZNK2v88internal10JSFunction21GetAvailableCodeKindsEv(%"class.v8::internal::JSFunction"* %0) #6
  %45 = and i32 %44, 12288
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %50

47:                                               ; preds = %43
  %48 = and i32 %44, 2048
  %49 = icmp eq i32 %48, 0
  br label %50

50:                                               ; preds = %47, %43, %1, %35
  %51 = phi i1 [ false, %35 ], [ false, %1 ], [ %49, %47 ], [ false, %43 ]
  ret i1 %51
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK2v88internal10JSFunction13GetActiveTierEv(%"class.v8::internal::JSFunction"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = tail call i32 @_ZNK2v88internal10JSFunction21GetAvailableCodeKindsEv(%"class.v8::internal::JSFunction"* %0)
  %3 = and i32 %2, 8192
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %12

5:                                                ; preds = %1
  %6 = and i32 %2, 4096
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %12

8:                                                ; preds = %5
  %9 = and i32 %2, 2048
  %10 = icmp eq i32 %9, 0
  %11 = select i1 %10, i32 10, i32 11
  ret i32 %11

12:                                               ; preds = %5, %1
  %13 = phi i32 [ 13, %1 ], [ 12, %5 ]
  ret i32 %13
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal10JSFunction20ActiveTierIsTurbofanEv(%"class.v8::internal::JSFunction"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::JSFunction", %"class.v8::internal::JSFunction"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 11
  %5 = inttoptr i64 %4 to i32*
  %6 = load atomic i32, i32* %5 monotonic, align 4
  %7 = and i64 %3, -4294967296
  %8 = zext i32 %6 to i64
  %9 = or i64 %7, %8
  %10 = add i64 %9, 3
  %11 = inttoptr i64 %10 to i32*
  %12 = load atomic i32, i32* %11 acquire, align 4
  %13 = zext i32 %12 to i64
  %14 = and i64 %13, 1
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %47, label %16

16:                                               ; preds = %1
  %17 = or i64 %7, %13
  %18 = add i64 %17, -1
  %19 = inttoptr i64 %18 to i32*
  %20 = load atomic i32, i32* %19 monotonic, align 4
  %21 = zext i32 %20 to i64
  %22 = or i64 %7, %21
  %23 = add i64 %22, 7
  %24 = inttoptr i64 %23 to i16*
  %25 = load atomic i16, i16* %24 monotonic, align 2
  %26 = icmp eq i16 %25, 133
  br i1 %26, label %43, label %27

27:                                               ; preds = %16
  %28 = load atomic i32, i32* %19 monotonic, align 4
  %29 = zext i32 %28 to i64
  %30 = or i64 %7, %29
  %31 = add i64 %30, 7
  %32 = inttoptr i64 %31 to i16*
  %33 = load atomic i16, i16* %32 monotonic, align 2
  %34 = icmp eq i16 %33, 105
  br i1 %34, label %43, label %35

35:                                               ; preds = %27
  %36 = load atomic i32, i32* %19 monotonic, align 4
  %37 = zext i32 %36 to i64
  %38 = or i64 %7, %37
  %39 = add i64 %38, 7
  %40 = inttoptr i64 %39 to i16*
  %41 = load atomic i16, i16* %40 monotonic, align 2
  %42 = icmp eq i16 %41, 94
  br i1 %42, label %43, label %47

43:                                               ; preds = %16, %27, %35
  %44 = tail call i32 @_ZNK2v88internal10JSFunction21GetAvailableCodeKindsEv(%"class.v8::internal::JSFunction"* %0) #6
  %45 = and i32 %44, 8192
  %46 = icmp ne i32 %45, 0
  ret i1 %46

47:                                               ; preds = %1, %35
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal10JSFunction20ActiveTierIsBaselineEv(%"class.v8::internal::JSFunction"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = tail call i32 @_ZNK2v88internal10JSFunction21GetAvailableCodeKindsEv(%"class.v8::internal::JSFunction"* %0) #6
  %3 = and i32 %2, 14336
  %4 = icmp eq i32 %3, 2048
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal10JSFunction30ActiveTierIsIgnitionOrBaselineEv(%"class.v8::internal::JSFunction"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::JSFunction", %"class.v8::internal::JSFunction"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 11
  %5 = inttoptr i64 %4 to i32*
  %6 = load atomic i32, i32* %5 monotonic, align 4
  %7 = and i64 %3, -4294967296
  %8 = zext i32 %6 to i64
  %9 = or i64 %7, %8
  %10 = add i64 %9, 3
  %11 = inttoptr i64 %10 to i32*
  %12 = load atomic i32, i32* %11 acquire, align 4
  %13 = zext i32 %12 to i64
  %14 = and i64 %13, 1
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %47, label %16

16:                                               ; preds = %1
  %17 = or i64 %7, %13
  %18 = add i64 %17, -1
  %19 = inttoptr i64 %18 to i32*
  %20 = load atomic i32, i32* %19 monotonic, align 4
  %21 = zext i32 %20 to i64
  %22 = or i64 %7, %21
  %23 = add i64 %22, 7
  %24 = inttoptr i64 %23 to i16*
  %25 = load atomic i16, i16* %24 monotonic, align 2
  %26 = icmp eq i16 %25, 133
  br i1 %26, label %43, label %27

27:                                               ; preds = %16
  %28 = load atomic i32, i32* %19 monotonic, align 4
  %29 = zext i32 %28 to i64
  %30 = or i64 %7, %29
  %31 = add i64 %30, 7
  %32 = inttoptr i64 %31 to i16*
  %33 = load atomic i16, i16* %32 monotonic, align 2
  %34 = icmp eq i16 %33, 105
  br i1 %34, label %43, label %35

35:                                               ; preds = %27
  %36 = load atomic i32, i32* %19 monotonic, align 4
  %37 = zext i32 %36 to i64
  %38 = or i64 %7, %37
  %39 = add i64 %38, 7
  %40 = inttoptr i64 %39 to i16*
  %41 = load atomic i16, i16* %40 monotonic, align 2
  %42 = icmp eq i16 %41, 94
  br i1 %42, label %43, label %47

43:                                               ; preds = %35, %27, %16
  %44 = tail call i32 @_ZNK2v88internal10JSFunction21GetAvailableCodeKindsEv(%"class.v8::internal::JSFunction"* %0) #6
  %45 = and i32 %44, 14336
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %51, label %47

47:                                               ; preds = %43, %1, %35
  %48 = tail call i32 @_ZNK2v88internal10JSFunction21GetAvailableCodeKindsEv(%"class.v8::internal::JSFunction"* %0) #6
  %49 = and i32 %48, 14336
  %50 = icmp eq i32 %49, 2048
  br label %51

51:                                               ; preds = %43, %47
  %52 = phi i1 [ %50, %47 ], [ true, %43 ]
  ret i1 %52
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal10JSFunction28ActiveTierIsToptierTurbopropEv(%"class.v8::internal::JSFunction"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = load i8, i8* @_ZN2v88internal25FLAG_turboprop_as_toptierE, align 1, !range !2
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %54, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %"class.v8::internal::JSFunction", %"class.v8::internal::JSFunction"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 11
  %8 = inttoptr i64 %7 to i32*
  %9 = load atomic i32, i32* %8 monotonic, align 4
  %10 = and i64 %6, -4294967296
  %11 = zext i32 %9 to i64
  %12 = or i64 %10, %11
  %13 = add i64 %12, 3
  %14 = inttoptr i64 %13 to i32*
  %15 = load atomic i32, i32* %14 acquire, align 4
  %16 = zext i32 %15 to i64
  %17 = and i64 %16, 1
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %54, label %19

19:                                               ; preds = %4
  %20 = or i64 %10, %16
  %21 = add i64 %20, -1
  %22 = inttoptr i64 %21 to i32*
  %23 = load atomic i32, i32* %22 monotonic, align 4
  %24 = zext i32 %23 to i64
  %25 = or i64 %10, %24
  %26 = add i64 %25, 7
  %27 = inttoptr i64 %26 to i16*
  %28 = load atomic i16, i16* %27 monotonic, align 2
  %29 = icmp eq i16 %28, 133
  br i1 %29, label %46, label %30

30:                                               ; preds = %19
  %31 = load atomic i32, i32* %22 monotonic, align 4
  %32 = zext i32 %31 to i64
  %33 = or i64 %10, %32
  %34 = add i64 %33, 7
  %35 = inttoptr i64 %34 to i16*
  %36 = load atomic i16, i16* %35 monotonic, align 2
  %37 = icmp eq i16 %36, 105
  br i1 %37, label %46, label %38

38:                                               ; preds = %30
  %39 = load atomic i32, i32* %22 monotonic, align 4
  %40 = zext i32 %39 to i64
  %41 = or i64 %10, %40
  %42 = add i64 %41, 7
  %43 = inttoptr i64 %42 to i16*
  %44 = load atomic i16, i16* %43 monotonic, align 2
  %45 = icmp eq i16 %44, 94
  br i1 %45, label %46, label %54

46:                                               ; preds = %19, %30, %38
  %47 = tail call i32 @_ZNK2v88internal10JSFunction21GetAvailableCodeKindsEv(%"class.v8::internal::JSFunction"* %0) #6
  %48 = and i32 %47, 12288
  %49 = icmp eq i32 %48, 4096
  %50 = load i8, i8* @_ZN2v88internal25FLAG_turboprop_as_toptierE, align 1
  %51 = and i8 %50, 1
  %52 = icmp ne i8 %51, 0
  %53 = and i1 %49, %52
  br label %54

54:                                               ; preds = %4, %38, %1, %46
  %55 = phi i1 [ %53, %46 ], [ false, %1 ], [ false, %38 ], [ false, %4 ]
  ret i1 %55
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal10JSFunction28ActiveTierIsMidtierTurbopropEv(%"class.v8::internal::JSFunction"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = load i8, i8* @_ZN2v88internal14FLAG_turbopropE, align 1, !range !2
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %53, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %"class.v8::internal::JSFunction", %"class.v8::internal::JSFunction"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 11
  %8 = inttoptr i64 %7 to i32*
  %9 = load atomic i32, i32* %8 monotonic, align 4
  %10 = and i64 %6, -4294967296
  %11 = zext i32 %9 to i64
  %12 = or i64 %10, %11
  %13 = add i64 %12, 3
  %14 = inttoptr i64 %13 to i32*
  %15 = load atomic i32, i32* %14 acquire, align 4
  %16 = zext i32 %15 to i64
  %17 = and i64 %16, 1
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %53, label %19

19:                                               ; preds = %4
  %20 = or i64 %10, %16
  %21 = add i64 %20, -1
  %22 = inttoptr i64 %21 to i32*
  %23 = load atomic i32, i32* %22 monotonic, align 4
  %24 = zext i32 %23 to i64
  %25 = or i64 %10, %24
  %26 = add i64 %25, 7
  %27 = inttoptr i64 %26 to i16*
  %28 = load atomic i16, i16* %27 monotonic, align 2
  %29 = icmp eq i16 %28, 133
  br i1 %29, label %46, label %30

30:                                               ; preds = %19
  %31 = load atomic i32, i32* %22 monotonic, align 4
  %32 = zext i32 %31 to i64
  %33 = or i64 %10, %32
  %34 = add i64 %33, 7
  %35 = inttoptr i64 %34 to i16*
  %36 = load atomic i16, i16* %35 monotonic, align 2
  %37 = icmp eq i16 %36, 105
  br i1 %37, label %46, label %38

38:                                               ; preds = %30
  %39 = load atomic i32, i32* %22 monotonic, align 4
  %40 = zext i32 %39 to i64
  %41 = or i64 %10, %40
  %42 = add i64 %41, 7
  %43 = inttoptr i64 %42 to i16*
  %44 = load atomic i16, i16* %43 monotonic, align 2
  %45 = icmp eq i16 %44, 94
  br i1 %45, label %46, label %53

46:                                               ; preds = %19, %30, %38
  %47 = tail call i32 @_ZNK2v88internal10JSFunction21GetAvailableCodeKindsEv(%"class.v8::internal::JSFunction"* %0) #6
  %48 = and i32 %47, 12288
  %49 = icmp eq i32 %48, 4096
  br i1 %49, label %50, label %53

50:                                               ; preds = %46
  %51 = load i8, i8* @_ZN2v88internal25FLAG_turboprop_as_toptierE, align 1
  %52 = icmp eq i8 %51, 0
  br label %53

53:                                               ; preds = %46, %4, %50, %38, %1
  %54 = phi i1 [ false, %1 ], [ false, %38 ], [ %52, %50 ], [ false, %4 ], [ false, %46 ]
  ret i1 %54
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK2v88internal10JSFunction8NextTierEv(%"class.v8::internal::JSFunction"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = load i8, i8* @_ZN2v88internal14FLAG_turbopropE, align 1, !range !2
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %53, label %4, !prof !3

4:                                                ; preds = %1
  %5 = getelementptr inbounds %"class.v8::internal::JSFunction", %"class.v8::internal::JSFunction"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 11
  %8 = inttoptr i64 %7 to i32*
  %9 = load atomic i32, i32* %8 monotonic, align 4
  %10 = and i64 %6, -4294967296
  %11 = zext i32 %9 to i64
  %12 = or i64 %10, %11
  %13 = add i64 %12, 3
  %14 = inttoptr i64 %13 to i32*
  %15 = load atomic i32, i32* %14 acquire, align 4
  %16 = zext i32 %15 to i64
  %17 = and i64 %16, 1
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %53, label %19

19:                                               ; preds = %4
  %20 = or i64 %10, %16
  %21 = add i64 %20, -1
  %22 = inttoptr i64 %21 to i32*
  %23 = load atomic i32, i32* %22 monotonic, align 4
  %24 = zext i32 %23 to i64
  %25 = or i64 %10, %24
  %26 = add i64 %25, 7
  %27 = inttoptr i64 %26 to i16*
  %28 = load atomic i16, i16* %27 monotonic, align 2
  %29 = icmp eq i16 %28, 133
  br i1 %29, label %46, label %30

30:                                               ; preds = %19
  %31 = load atomic i32, i32* %22 monotonic, align 4
  %32 = zext i32 %31 to i64
  %33 = or i64 %10, %32
  %34 = add i64 %33, 7
  %35 = inttoptr i64 %34 to i16*
  %36 = load atomic i16, i16* %35 monotonic, align 2
  %37 = icmp eq i16 %36, 105
  br i1 %37, label %46, label %38

38:                                               ; preds = %30
  %39 = load atomic i32, i32* %22 monotonic, align 4
  %40 = zext i32 %39 to i64
  %41 = or i64 %10, %40
  %42 = add i64 %41, 7
  %43 = inttoptr i64 %42 to i16*
  %44 = load atomic i16, i16* %43 monotonic, align 2
  %45 = icmp eq i16 %44, 94
  br i1 %45, label %46, label %53

46:                                               ; preds = %38, %30, %19
  %47 = tail call i32 @_ZNK2v88internal10JSFunction21GetAvailableCodeKindsEv(%"class.v8::internal::JSFunction"* %0) #6
  %48 = and i32 %47, 12288
  %49 = icmp eq i32 %48, 4096
  %50 = load i8, i8* @_ZN2v88internal25FLAG_turboprop_as_toptierE, align 1
  %51 = icmp eq i8 %50, 0
  %52 = and i1 %49, %51
  br i1 %52, label %57, label %53

53:                                               ; preds = %46, %4, %38, %1
  %54 = load i8, i8* @_ZN2v88internal14FLAG_turbopropE, align 1, !range !2
  %55 = icmp eq i8 %54, 0
  %56 = select i1 %55, i32 13, i32 12, !prof !3
  br label %57

57:                                               ; preds = %46, %53
  %58 = phi i32 [ %56, %53 ], [ 13, %46 ]
  ret i32 %58
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal10JSFunction18CanDiscardCompiledEv(%"class.v8::internal::JSFunction"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::JSFunction", %"class.v8::internal::JSFunction"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 23
  %5 = inttoptr i64 %4 to i32*
  %6 = load atomic i32, i32* %5 monotonic, align 4
  %7 = and i64 %3, -4294967296
  %8 = zext i32 %6 to i64
  %9 = or i64 %7, %8
  %10 = add i64 %9, 27
  %11 = inttoptr i64 %10 to i32*
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 14
  %14 = icmp eq i32 %13, 12
  br i1 %14, label %19, label %15

15:                                               ; preds = %1
  %16 = tail call i32 @_ZNK2v88internal10JSFunction21GetAvailableCodeKindsEv(%"class.v8::internal::JSFunction"* %0)
  %17 = and i32 %16, 15360
  %18 = icmp ne i32 %17, 0
  br label %19

19:                                               ; preds = %1, %15
  %20 = phi i1 [ %18, %15 ], [ true, %1 ]
  ret i1 %20
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal15JSBoundFunction16GetFunctionRealmENS0_6HandleIS1_EE(i64*) local_unnamed_addr #0 align 2 {
  %2 = load i64, i64* %0, align 8
  %3 = and i64 %2, -4294967296
  %4 = add i64 %2, 11
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = zext i32 %6 to i64
  %8 = or i64 %3, %7
  %9 = and i64 %2, -262144
  %10 = or i64 %9, 16
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11, align 16
  %13 = add i64 %12, -41416
  %14 = inttoptr i64 %13 to %"class.v8::internal::Isolate"*
  %15 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %14, i64 0, i32 31, i32 4
  %16 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %15, align 8
  %17 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %16, null
  br i1 %17, label %20, label %18

18:                                               ; preds = %1
  %19 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %16, i64 %8) #6
  br label %33

20:                                               ; preds = %1
  %21 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %14, i64 0, i32 31, i32 0
  %22 = load i64*, i64** %21, align 8
  %23 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %14, i64 0, i32 31, i32 1
  %24 = load i64*, i64** %23, align 8
  %25 = icmp eq i64* %22, %24
  br i1 %25, label %26, label %28

26:                                               ; preds = %20
  %27 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %14) #6
  br label %28

28:                                               ; preds = %26, %20
  %29 = phi i64* [ %27, %26 ], [ %22, %20 ]
  %30 = ptrtoint i64* %29 to i64
  %31 = add i64 %30, 8
  %32 = inttoptr i64 %31 to i64*
  store i64* %32, i64** %21, align 8
  store i64 %8, i64* %29, align 8
  br label %33

33:                                               ; preds = %18, %28
  %34 = phi i64* [ %19, %18 ], [ %29, %28 ]
  %35 = tail call i64* @_ZN2v88internal10JSReceiver16GetFunctionRealmENS0_6HandleIS1_EE(i64* %34) #6
  ret i64* %35
}

declare i64* @_ZN2v88internal10JSReceiver16GetFunctionRealmENS0_6HandleIS1_EE(i64*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal15JSBoundFunction7GetNameEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"*, i64*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::SharedFunctionInfo", align 8
  %4 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 7, i32 0, i64 281
  %5 = load i64, i64* %1, align 8
  %6 = and i64 %5, -4294967296
  %7 = add i64 %5, 11
  %8 = inttoptr i64 %7 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  %11 = or i64 %6, %10
  %12 = add i64 %11, -1
  %13 = inttoptr i64 %12 to i32*
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = zext i32 %14 to i64
  %16 = or i64 %6, %15
  %17 = add i64 %16, 7
  %18 = inttoptr i64 %17 to i16*
  %19 = load atomic i16, i16* %18 monotonic, align 2
  %20 = icmp eq i16 %19, 1058
  br i1 %20, label %21, label %75

21:                                               ; preds = %2
  %22 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %23 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %24 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %25 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  br label %26

26:                                               ; preds = %21, %55
  %27 = phi i64* [ %1, %21 ], [ %57, %55 ]
  %28 = phi i64* [ %4, %21 ], [ %29, %55 ]
  %29 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE13NewConsStringENS0_6HandleINS0_6StringEEES6_NS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %22, i64* %4, i64* %28, i8 zeroext 0) #6
  %30 = icmp eq i64* %29, null
  br i1 %30, label %170, label %31

31:                                               ; preds = %26
  %32 = load i64, i64* %27, align 8
  %33 = and i64 %32, -4294967296
  %34 = add i64 %32, 11
  %35 = inttoptr i64 %34 to i32*
  %36 = load i32, i32* %35, align 4
  %37 = zext i32 %36 to i64
  %38 = or i64 %33, %37
  %39 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %23, align 8
  %40 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %39, null
  br i1 %40, label %44, label %41

41:                                               ; preds = %31
  %42 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %39, i64 %38) #6
  %43 = load i64, i64* %42, align 8
  br label %55

44:                                               ; preds = %31
  %45 = load i64*, i64** %24, align 8
  %46 = load i64*, i64** %25, align 8
  %47 = icmp eq i64* %45, %46
  br i1 %47, label %48, label %50

48:                                               ; preds = %44
  %49 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %50

50:                                               ; preds = %48, %44
  %51 = phi i64* [ %49, %48 ], [ %45, %44 ]
  %52 = ptrtoint i64* %51 to i64
  %53 = add i64 %52, 8
  %54 = inttoptr i64 %53 to i64*
  store i64* %54, i64** %24, align 8
  store i64 %38, i64* %51, align 8
  br label %55

55:                                               ; preds = %41, %50
  %56 = phi i64 [ %43, %41 ], [ %38, %50 ]
  %57 = phi i64* [ %42, %41 ], [ %51, %50 ]
  %58 = and i64 %56, -4294967296
  %59 = add i64 %56, 11
  %60 = inttoptr i64 %59 to i32*
  %61 = load i32, i32* %60, align 4
  %62 = zext i32 %61 to i64
  %63 = or i64 %58, %62
  %64 = add i64 %63, -1
  %65 = inttoptr i64 %64 to i32*
  %66 = load atomic i32, i32* %65 monotonic, align 4
  %67 = zext i32 %66 to i64
  %68 = or i64 %58, %67
  %69 = add i64 %68, 7
  %70 = inttoptr i64 %69 to i16*
  %71 = load atomic i16, i16* %70 monotonic, align 2
  %72 = icmp eq i16 %71, 1058
  br i1 %72, label %26, label %73

73:                                               ; preds = %55
  %74 = inttoptr i64 %64 to i32*
  br label %75

75:                                               ; preds = %73, %2
  %76 = phi i64* [ %4, %2 ], [ %29, %73 ]
  %77 = phi i64 [ %6, %2 ], [ %58, %73 ]
  %78 = phi i64 [ %11, %2 ], [ %63, %73 ]
  %79 = phi i32* [ %13, %2 ], [ %74, %73 ]
  %80 = ptrtoint i64* %76 to i64
  %81 = load atomic i32, i32* %79 monotonic, align 4
  %82 = zext i32 %81 to i64
  %83 = or i64 %77, %82
  %84 = add i64 %83, 7
  %85 = inttoptr i64 %84 to i16*
  %86 = load atomic i16, i16* %85 monotonic, align 2
  %87 = add i16 %86, -1059
  %88 = icmp ult i16 %87, 15
  br i1 %88, label %89, label %170

89:                                               ; preds = %75
  %90 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %91 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %90, align 8
  %92 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %91, null
  br i1 %92, label %96, label %93

93:                                               ; preds = %89
  %94 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %91, i64 %78) #6
  %95 = load i64, i64* %94, align 8
  br label %109

96:                                               ; preds = %89
  %97 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %98 = load i64*, i64** %97, align 8
  %99 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %100 = load i64*, i64** %99, align 8
  %101 = icmp eq i64* %98, %100
  br i1 %101, label %102, label %104

102:                                              ; preds = %96
  %103 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %104

104:                                              ; preds = %102, %96
  %105 = phi i64* [ %103, %102 ], [ %98, %96 ]
  %106 = ptrtoint i64* %105 to i64
  %107 = add i64 %106, 8
  %108 = inttoptr i64 %107 to i64*
  store i64* %108, i64** %97, align 8
  store i64 %78, i64* %105, align 8
  br label %109

109:                                              ; preds = %93, %104
  %110 = phi i64 [ %95, %93 ], [ %78, %104 ]
  %111 = add i64 %110, 11
  %112 = inttoptr i64 %111 to i32*
  %113 = load atomic i32, i32* %112 monotonic, align 4
  %114 = and i64 %110, -4294967296
  %115 = zext i32 %113 to i64
  %116 = or i64 %114, %115
  %117 = add i64 %116, 27
  %118 = inttoptr i64 %117 to i32*
  %119 = load atomic i32, i32* %118 monotonic, align 4
  %120 = and i32 %119, 33554432
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %124, label %122

122:                                              ; preds = %109
  %123 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 7, i32 0, i64 259
  br label %150

124:                                              ; preds = %109
  %125 = bitcast %"class.v8::internal::SharedFunctionInfo"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %125) #6
  %126 = load atomic i32, i32* %112 monotonic, align 4
  %127 = zext i32 %126 to i64
  %128 = or i64 %114, %127
  %129 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %128, i64* %129, align 8
  %130 = call i64 @_ZNK2v88internal18SharedFunctionInfo4NameEv(%"class.v8::internal::SharedFunctionInfo"* nonnull %3) #6
  %131 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %90, align 8
  %132 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %131, null
  br i1 %132, label %135, label %133

133:                                              ; preds = %124
  %134 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %131, i64 %130) #6
  br label %148

135:                                              ; preds = %124
  %136 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %137 = load i64*, i64** %136, align 8
  %138 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %139 = load i64*, i64** %138, align 8
  %140 = icmp eq i64* %137, %139
  br i1 %140, label %141, label %143

141:                                              ; preds = %135
  %142 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %143

143:                                              ; preds = %141, %135
  %144 = phi i64* [ %142, %141 ], [ %137, %135 ]
  %145 = ptrtoint i64* %144 to i64
  %146 = add i64 %145, 8
  %147 = inttoptr i64 %146 to i64*
  store i64* %147, i64** %136, align 8
  store i64 %130, i64* %144, align 8
  br label %148

148:                                              ; preds = %143, %133
  %149 = phi i64* [ %134, %133 ], [ %144, %143 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %125) #6
  br label %150

150:                                              ; preds = %122, %148
  %151 = phi i64* [ %123, %122 ], [ %149, %148 ]
  %152 = load i64, i64* %151, align 8
  %153 = and i64 %152, 1
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %170, label %155

155:                                              ; preds = %150
  %156 = and i64 %152, -4294967296
  %157 = add i64 %152, -1
  %158 = inttoptr i64 %157 to i32*
  %159 = load atomic i32, i32* %158 monotonic, align 4
  %160 = zext i32 %159 to i64
  %161 = or i64 %156, %160
  %162 = add i64 %161, 7
  %163 = inttoptr i64 %162 to i16*
  %164 = load atomic i16, i16* %163 monotonic, align 2
  %165 = icmp ult i16 %164, 64
  br i1 %165, label %166, label %170

166:                                              ; preds = %155
  %167 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %168 = call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE13NewConsStringENS0_6HandleINS0_6StringEEES6_NS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %167, i64* %76, i64* %151, i8 zeroext 0) #6
  %169 = ptrtoint i64* %168 to i64
  br label %170

170:                                              ; preds = %26, %75, %155, %150, %166
  %171 = phi i64 [ %169, %166 ], [ %80, %150 ], [ %80, %155 ], [ %80, %75 ], [ 0, %26 ]
  %172 = inttoptr i64 %171 to i64*
  ret i64* %172
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE13NewConsStringENS0_6HandleINS0_6StringEEES6_NS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"*, i64*, i64*, i8 zeroext) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal10JSFunction7GetNameEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"*, i64*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::SharedFunctionInfo", align 8
  %4 = load i64, i64* %1, align 8
  %5 = add i64 %4, 11
  %6 = inttoptr i64 %5 to i32*
  %7 = load atomic i32, i32* %6 monotonic, align 4
  %8 = and i64 %4, -4294967296
  %9 = zext i32 %7 to i64
  %10 = or i64 %8, %9
  %11 = add i64 %10, 27
  %12 = inttoptr i64 %11 to i32*
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 33554432
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %18, label %16

16:                                               ; preds = %2
  %17 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 7, i32 0, i64 259
  br label %45

18:                                               ; preds = %2
  %19 = bitcast %"class.v8::internal::SharedFunctionInfo"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #6
  %20 = load atomic i32, i32* %6 monotonic, align 4
  %21 = zext i32 %20 to i64
  %22 = or i64 %8, %21
  %23 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %22, i64* %23, align 8
  %24 = call i64 @_ZNK2v88internal18SharedFunctionInfo4NameEv(%"class.v8::internal::SharedFunctionInfo"* nonnull %3)
  %25 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %26 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %25, align 8
  %27 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %26, null
  br i1 %27, label %30, label %28

28:                                               ; preds = %18
  %29 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %26, i64 %24) #6
  br label %43

30:                                               ; preds = %18
  %31 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %32 = load i64*, i64** %31, align 8
  %33 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %34 = load i64*, i64** %33, align 8
  %35 = icmp eq i64* %32, %34
  br i1 %35, label %36, label %38

36:                                               ; preds = %30
  %37 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %38

38:                                               ; preds = %36, %30
  %39 = phi i64* [ %37, %36 ], [ %32, %30 ]
  %40 = ptrtoint i64* %39 to i64
  %41 = add i64 %40, 8
  %42 = inttoptr i64 %41 to i64*
  store i64* %42, i64** %31, align 8
  store i64 %24, i64* %39, align 8
  br label %43

43:                                               ; preds = %28, %38
  %44 = phi i64* [ %29, %28 ], [ %39, %38 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #6
  br label %45

45:                                               ; preds = %43, %16
  %46 = phi i64* [ %17, %16 ], [ %44, %43 ]
  ret i64* %46
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN2v88internal15JSBoundFunction9GetLengthEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"*, i64*) local_unnamed_addr #0 align 2 {
  %3 = load i64, i64* %1, align 8
  %4 = and i64 %3, -4294967296
  %5 = add i64 %3, 19
  %6 = inttoptr i64 %5 to i32*
  %7 = load i32, i32* %6, align 4
  %8 = zext i32 %7 to i64
  %9 = or i64 %4, %8
  %10 = add i64 %9, 3
  %11 = inttoptr i64 %10 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = ashr i32 %12, 1
  %14 = add i64 %3, 11
  %15 = inttoptr i64 %14 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = zext i32 %16 to i64
  %18 = or i64 %4, %17
  %19 = add i64 %18, -1
  %20 = inttoptr i64 %19 to i32*
  %21 = load atomic i32, i32* %20 monotonic, align 4
  %22 = zext i32 %21 to i64
  %23 = or i64 %4, %22
  %24 = add i64 %23, 7
  %25 = inttoptr i64 %24 to i16*
  %26 = load atomic i16, i16* %25 monotonic, align 2
  %27 = icmp eq i16 %26, 1058
  %28 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %29 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %28, align 8
  %30 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %29, null
  br i1 %27, label %31, label %85

31:                                               ; preds = %2
  %32 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %33 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  br label %34

34:                                               ; preds = %31, %53
  %35 = phi i1 [ %30, %31 ], [ %84, %53 ]
  %36 = phi %"class.v8::internal::CanonicalHandleScope"* [ %29, %31 ], [ %83, %53 ]
  %37 = phi i64 [ %18, %31 ], [ %73, %53 ]
  %38 = phi i32 [ %13, %31 ], [ %68, %53 ]
  br i1 %35, label %42, label %39

39:                                               ; preds = %34
  %40 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %36, i64 %37) #6
  %41 = load i64, i64* %40, align 8
  br label %53

42:                                               ; preds = %34
  %43 = load i64*, i64** %32, align 8
  %44 = load i64*, i64** %33, align 8
  %45 = icmp eq i64* %43, %44
  br i1 %45, label %46, label %48

46:                                               ; preds = %42
  %47 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %48

48:                                               ; preds = %46, %42
  %49 = phi i64* [ %47, %46 ], [ %43, %42 ]
  %50 = ptrtoint i64* %49 to i64
  %51 = add i64 %50, 8
  %52 = inttoptr i64 %51 to i64*
  store i64* %52, i64** %32, align 8
  store i64 %37, i64* %49, align 8
  br label %53

53:                                               ; preds = %39, %48
  %54 = phi i64 [ %41, %39 ], [ %37, %48 ]
  %55 = and i64 %54, -4294967296
  %56 = add i64 %54, 19
  %57 = inttoptr i64 %56 to i32*
  %58 = load i32, i32* %57, align 4
  %59 = zext i32 %58 to i64
  %60 = or i64 %55, %59
  %61 = add i64 %60, 3
  %62 = inttoptr i64 %61 to i32*
  %63 = load i32, i32* %62, align 4
  %64 = ashr i32 %63, 1
  %65 = sub nsw i32 1073741823, %38
  %66 = icmp sgt i32 %65, %64
  %67 = add nsw i32 %64, %38
  %68 = select i1 %66, i32 %67, i32 1073741823, !prof !3
  %69 = add i64 %54, 11
  %70 = inttoptr i64 %69 to i32*
  %71 = load i32, i32* %70, align 4
  %72 = zext i32 %71 to i64
  %73 = or i64 %55, %72
  %74 = add i64 %73, -1
  %75 = inttoptr i64 %74 to i32*
  %76 = load atomic i32, i32* %75 monotonic, align 4
  %77 = zext i32 %76 to i64
  %78 = or i64 %55, %77
  %79 = add i64 %78, 7
  %80 = inttoptr i64 %79 to i16*
  %81 = load atomic i16, i16* %80 monotonic, align 2
  %82 = icmp eq i16 %81, 1058
  %83 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %28, align 8
  %84 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %83, null
  br i1 %82, label %34, label %85

85:                                               ; preds = %53, %2
  %86 = phi i32 [ %13, %2 ], [ %68, %53 ]
  %87 = phi i64 [ %18, %2 ], [ %73, %53 ]
  %88 = phi %"class.v8::internal::CanonicalHandleScope"* [ %29, %2 ], [ %83, %53 ]
  %89 = phi i1 [ %30, %2 ], [ %84, %53 ]
  br i1 %89, label %93, label %90

90:                                               ; preds = %85
  %91 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %88, i64 %87) #6
  %92 = load i64, i64* %91, align 8
  br label %106

93:                                               ; preds = %85
  %94 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %95 = load i64*, i64** %94, align 8
  %96 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %97 = load i64*, i64** %96, align 8
  %98 = icmp eq i64* %95, %97
  br i1 %98, label %99, label %101

99:                                               ; preds = %93
  %100 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %101

101:                                              ; preds = %99, %93
  %102 = phi i64* [ %100, %99 ], [ %95, %93 ]
  %103 = ptrtoint i64* %102 to i64
  %104 = add i64 %103, 8
  %105 = inttoptr i64 %104 to i64*
  store i64* %105, i64** %94, align 8
  store i64 %87, i64* %102, align 8
  br label %106

106:                                              ; preds = %90, %101
  %107 = phi i64 [ %92, %90 ], [ %87, %101 ]
  %108 = add i64 %107, 11
  %109 = inttoptr i64 %108 to i32*
  %110 = load atomic i32, i32* %109 monotonic, align 4
  %111 = and i64 %107, -4294967296
  %112 = zext i32 %110 to i64
  %113 = or i64 %111, %112
  %114 = add i64 %113, 19
  %115 = inttoptr i64 %114 to i16*
  %116 = load i16, i16* %115, align 2
  %117 = sext i16 %116 to i32
  %118 = sub nsw i32 %117, %86
  %119 = icmp sgt i32 %118, 0
  %120 = select i1 %119, i32 %118, i32 0
  %121 = zext i32 %120 to i64
  %122 = shl nuw nsw i64 %121, 32
  %123 = or i64 %122, 1
  ret i64 %123
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64* @_ZN2v88internal15JSBoundFunction8ToStringENS0_6HandleIS1_EE(i64*) local_unnamed_addr #3 align 2 {
  %2 = load i64, i64* %0, align 8
  %3 = and i64 %2, -262144
  %4 = or i64 %3, 16
  %5 = inttoptr i64 %4 to i64*
  %6 = load i64, i64* %5, align 16
  %7 = add i64 %6, -41416
  %8 = inttoptr i64 %7 to %"class.v8::internal::Factory"*
  %9 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %8, i64 2792
  %10 = bitcast %"class.v8::internal::Factory"* %9 to i64*
  ret i64* %10
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK2v88internal18SharedFunctionInfo4NameEv(%"class.v8::internal::SharedFunctionInfo"*) local_unnamed_addr #4 comdat align 2 {
  %2 = alloca %"class.v8::internal::ScopeInfo", align 8
  %3 = alloca %"class.v8::internal::ScopeInfo", align 8
  %4 = alloca %"class.v8::internal::ScopeInfo", align 8
  %5 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = and i64 %6, -4294967296
  %8 = add i64 %6, 7
  %9 = inttoptr i64 %8 to i32*
  %10 = load atomic i32, i32* %9 acquire, align 4
  %11 = zext i32 %10 to i64
  %12 = or i64 %7, %11
  %13 = and i64 %11, 1
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %29, label %15

15:                                               ; preds = %1
  %16 = add i64 %12, -1
  %17 = inttoptr i64 %16 to i32*
  %18 = load atomic i32, i32* %17 monotonic, align 4
  %19 = zext i32 %18 to i64
  %20 = or i64 %7, %19
  %21 = add i64 %20, 7
  %22 = inttoptr i64 %21 to i16*
  %23 = load atomic i16, i16* %22 monotonic, align 2
  %24 = icmp eq i16 %23, 178
  br i1 %24, label %25, label %29

25:                                               ; preds = %15
  %26 = bitcast %"class.v8::internal::ScopeInfo"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26) #6
  %27 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %12, i64* %27, align 8
  %28 = call zeroext i1 @_ZNK2v88internal9ScopeInfo21HasSharedFunctionNameEv(%"class.v8::internal::ScopeInfo"* nonnull %2) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26) #6
  br i1 %28, label %53, label %31

29:                                               ; preds = %1, %15
  %30 = icmp eq i32 %10, 0
  br i1 %30, label %31, label %53

31:                                               ; preds = %29, %25
  %32 = load i64, i64* %5, align 8
  %33 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %34 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %33, null
  br i1 %34, label %41, label %35

35:                                               ; preds = %31
  %36 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %33, i64 0, i32 0, i32 1
  %37 = load i8, i8* %36, align 8, !range !2
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %41, label %39

39:                                               ; preds = %35
  %40 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %33, i64 0, i32 1, i64 0
  br label %49

41:                                               ; preds = %35, %31
  %42 = and i64 %32, -262144
  %43 = or i64 %42, 16
  %44 = inttoptr i64 %43 to i64*
  %45 = load i64, i64* %44, align 16
  %46 = add i64 %45, -41416
  %47 = inttoptr i64 %46 to %"class.v8::internal::Isolate"*
  %48 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %47, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %49

49:                                               ; preds = %39, %41
  %50 = phi i64* [ %48, %41 ], [ %40, %39 ]
  %51 = getelementptr inbounds i64, i64* %50, i64 9
  %52 = load i64, i64* %51, align 8
  br label %103

53:                                               ; preds = %29, %25
  %54 = load i64, i64* %5, align 8
  %55 = and i64 %54, -4294967296
  %56 = add i64 %54, 7
  %57 = inttoptr i64 %56 to i32*
  %58 = load atomic i32, i32* %57 acquire, align 4
  %59 = zext i32 %58 to i64
  %60 = or i64 %55, %59
  %61 = and i64 %59, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %103, label %63

63:                                               ; preds = %53
  %64 = add i64 %60, -1
  %65 = inttoptr i64 %64 to i32*
  %66 = load atomic i32, i32* %65 monotonic, align 4
  %67 = zext i32 %66 to i64
  %68 = or i64 %55, %67
  %69 = add i64 %68, 7
  %70 = inttoptr i64 %69 to i16*
  %71 = load atomic i16, i16* %70 monotonic, align 2
  %72 = icmp eq i16 %71, 178
  br i1 %72, label %73, label %103

73:                                               ; preds = %63
  %74 = bitcast %"class.v8::internal::ScopeInfo"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %74) #6
  %75 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %60, i64* %75, align 8
  %76 = call zeroext i1 @_ZNK2v88internal9ScopeInfo15HasFunctionNameEv(%"class.v8::internal::ScopeInfo"* nonnull %3) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %74) #6
  br i1 %76, label %77, label %81

77:                                               ; preds = %73
  %78 = bitcast %"class.v8::internal::ScopeInfo"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %78) #6
  %79 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %60, i64* %79, align 8
  %80 = call i64 @_ZNK2v88internal9ScopeInfo12FunctionNameEv(%"class.v8::internal::ScopeInfo"* nonnull %4) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %78) #6
  br label %103

81:                                               ; preds = %73
  %82 = load i64, i64* %5, align 8
  %83 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %84 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %83, null
  br i1 %84, label %91, label %85

85:                                               ; preds = %81
  %86 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %83, i64 0, i32 0, i32 1
  %87 = load i8, i8* %86, align 8, !range !2
  %88 = icmp eq i8 %87, 0
  br i1 %88, label %91, label %89

89:                                               ; preds = %85
  %90 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %83, i64 0, i32 1, i64 0
  br label %99

91:                                               ; preds = %85, %81
  %92 = and i64 %82, -262144
  %93 = or i64 %92, 16
  %94 = inttoptr i64 %93 to i64*
  %95 = load i64, i64* %94, align 16
  %96 = add i64 %95, -41416
  %97 = inttoptr i64 %96 to %"class.v8::internal::Isolate"*
  %98 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %97, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %99

99:                                               ; preds = %89, %91
  %100 = phi i64* [ %98, %91 ], [ %90, %89 ]
  %101 = getelementptr inbounds i64, i64* %100, i64 9
  %102 = load i64, i64* %101, align 8
  br label %103

103:                                              ; preds = %53, %77, %99, %63, %49
  %104 = phi i64 [ %52, %49 ], [ %80, %77 ], [ %102, %99 ], [ %60, %63 ], [ %60, %53 ]
  ret i64 %104
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal10JSFunction16GetFunctionRealmENS0_6HandleIS1_EE(i64*) local_unnamed_addr #0 align 2 {
  %2 = load i64, i64* %0, align 8
  %3 = add i64 %2, 15
  %4 = inttoptr i64 %3 to i32*
  %5 = load i32, i32* %4, align 4
  %6 = and i64 %2, -4294967296
  %7 = zext i32 %5 to i64
  %8 = or i64 %6, %7
  %9 = add i64 %8, -1
  %10 = inttoptr i64 %9 to i32*
  %11 = load atomic i32, i32* %10 monotonic, align 4
  %12 = zext i32 %11 to i64
  %13 = or i64 %6, %12
  %14 = add i64 %13, 19
  %15 = inttoptr i64 %14 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = zext i32 %16 to i64
  %18 = or i64 %6, %17
  %19 = and i64 %2, -262144
  %20 = or i64 %19, 16
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21, align 16
  %23 = add i64 %22, -41416
  %24 = inttoptr i64 %23 to %"class.v8::internal::Isolate"*
  %25 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %24, i64 0, i32 31, i32 4
  %26 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %25, align 8
  %27 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %26, null
  br i1 %27, label %30, label %28

28:                                               ; preds = %1
  %29 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %26, i64 %18) #6
  br label %43

30:                                               ; preds = %1
  %31 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %24, i64 0, i32 31, i32 0
  %32 = load i64*, i64** %31, align 8
  %33 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %24, i64 0, i32 31, i32 1
  %34 = load i64*, i64** %33, align 8
  %35 = icmp eq i64* %32, %34
  br i1 %35, label %36, label %38

36:                                               ; preds = %30
  %37 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %24) #6
  br label %38

38:                                               ; preds = %36, %30
  %39 = phi i64* [ %37, %36 ], [ %32, %30 ]
  %40 = ptrtoint i64* %39 to i64
  %41 = add i64 %40, 8
  %42 = inttoptr i64 %41 to i64*
  store i64* %42, i64** %31, align 8
  store i64 %18, i64* %39, align 8
  br label %43

43:                                               ; preds = %28, %38
  %44 = phi i64* [ %29, %28 ], [ %39, %38 ]
  ret i64* %44
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal10JSFunction30EnsureClosureFeedbackCellArrayENS0_6HandleIS1_EEb(i64*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::Handle<v8::internal::JSFunction>::ObjectRef", align 8
  %4 = alloca %"class.v8::internal::Handle<v8::internal::JSFunction>::ObjectRef", align 8
  %5 = load i64, i64* %0, align 8
  %6 = and i64 %5, -262144
  %7 = or i64 %6, 16
  %8 = inttoptr i64 %7 to i64*
  %9 = load i64, i64* %8, align 16
  %10 = add i64 %9, -41416
  %11 = inttoptr i64 %10 to %"class.v8::internal::Isolate"*
  %12 = add i64 %5, 11
  %13 = inttoptr i64 %12 to i32*
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = and i64 %5, -4294967296
  %16 = zext i32 %14 to i64
  %17 = or i64 %15, %16
  %18 = add i64 %17, 3
  %19 = inttoptr i64 %18 to i32*
  %20 = load atomic i32, i32* %19 acquire, align 4
  %21 = zext i32 %20 to i64
  %22 = and i64 %21, 1
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %35, label %24

24:                                               ; preds = %2
  %25 = or i64 %15, %21
  %26 = add i64 %25, -1
  %27 = inttoptr i64 %26 to i32*
  %28 = load atomic i32, i32* %27 monotonic, align 4
  %29 = zext i32 %28 to i64
  %30 = or i64 %15, %29
  %31 = add i64 %30, 7
  %32 = inttoptr i64 %31 to i16*
  %33 = load atomic i16, i16* %32 monotonic, align 2
  %34 = icmp eq i16 %33, 92
  br i1 %34, label %262, label %35

35:                                               ; preds = %2, %24
  %36 = load i64, i64* %0, align 8
  %37 = add i64 %36, 11
  %38 = inttoptr i64 %37 to i32*
  %39 = load atomic i32, i32* %38 monotonic, align 4
  %40 = and i64 %36, -4294967296
  %41 = zext i32 %39 to i64
  %42 = or i64 %40, %41
  %43 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %11, i64 0, i32 31, i32 4
  %44 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %43, align 8
  %45 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %44, null
  br i1 %45, label %48, label %46

46:                                               ; preds = %35
  %47 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %44, i64 %42) #6
  br label %61

48:                                               ; preds = %35
  %49 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %11, i64 0, i32 31, i32 0
  %50 = load i64*, i64** %49, align 8
  %51 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %11, i64 0, i32 31, i32 1
  %52 = load i64*, i64** %51, align 8
  %53 = icmp eq i64* %50, %52
  br i1 %53, label %54, label %56

54:                                               ; preds = %48
  %55 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %11) #6
  br label %56

56:                                               ; preds = %54, %48
  %57 = phi i64* [ %55, %54 ], [ %50, %48 ]
  %58 = ptrtoint i64* %57 to i64
  %59 = add i64 %58, 8
  %60 = inttoptr i64 %59 to i64*
  store i64* %60, i64** %49, align 8
  store i64 %42, i64* %57, align 8
  br label %61

61:                                               ; preds = %46, %56
  %62 = phi i64* [ %47, %46 ], [ %57, %56 ]
  %63 = load i64, i64* %0, align 8
  %64 = add i64 %63, 11
  %65 = inttoptr i64 %64 to i32*
  %66 = load atomic i32, i32* %65 monotonic, align 4
  %67 = and i64 %63, -4294967296
  %68 = zext i32 %66 to i64
  %69 = or i64 %67, %68
  %70 = add i64 %69, 3
  %71 = inttoptr i64 %70 to i32*
  %72 = load atomic i32, i32* %71 acquire, align 4
  %73 = zext i32 %72 to i64
  %74 = or i64 %67, %73
  %75 = icmp eq i32 %72, 170
  br i1 %75, label %110, label %76

76:                                               ; preds = %61
  %77 = and i64 %73, 1
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %90, label %79

79:                                               ; preds = %76
  %80 = add i64 %74, -1
  %81 = inttoptr i64 %80 to i32*
  %82 = load atomic i32, i32* %81 monotonic, align 4
  %83 = zext i32 %82 to i64
  %84 = or i64 %67, %83
  %85 = add i64 %84, 7
  %86 = inttoptr i64 %85 to i16*
  %87 = load atomic i16, i16* %86 monotonic, align 2
  %88 = add i16 %87, -157
  %89 = icmp ugt i16 %88, 1
  br i1 %89, label %90, label %110

90:                                               ; preds = %76, %79
  %91 = add i64 %63, 19
  %92 = inttoptr i64 %91 to i32*
  %93 = load i32, i32* %92, align 4
  %94 = zext i32 %93 to i64
  %95 = or i64 %67, %94
  %96 = add i64 %95, 3
  %97 = inttoptr i64 %96 to i32*
  %98 = load i32, i32* %97, align 4
  %99 = zext i32 %98 to i64
  %100 = or i64 %67, %99
  %101 = add i64 %100, -1
  %102 = inttoptr i64 %101 to i32*
  %103 = load atomic i32, i32* %102 monotonic, align 4
  %104 = zext i32 %103 to i64
  %105 = or i64 %67, %104
  %106 = add i64 %105, 7
  %107 = inttoptr i64 %106 to i16*
  %108 = load atomic i16, i16* %107 monotonic, align 2
  %109 = icmp eq i16 %108, 129
  br i1 %109, label %158, label %110

110:                                              ; preds = %61, %79, %90
  %111 = load i64, i64* %0, align 8
  %112 = add i64 %111, 11
  %113 = inttoptr i64 %112 to i32*
  %114 = load atomic i32, i32* %113 monotonic, align 4
  %115 = and i64 %111, -4294967296
  %116 = zext i32 %114 to i64
  %117 = or i64 %115, %116
  %118 = add i64 %117, 3
  %119 = inttoptr i64 %118 to i32*
  %120 = load atomic i32, i32* %119 acquire, align 4
  %121 = zext i32 %120 to i64
  %122 = or i64 %115, %121
  %123 = icmp eq i32 %120, 170
  br i1 %123, label %158, label %124

124:                                              ; preds = %110
  %125 = and i64 %121, 1
  %126 = icmp eq i64 %125, 0
  br i1 %126, label %138, label %127

127:                                              ; preds = %124
  %128 = add i64 %122, -1
  %129 = inttoptr i64 %128 to i32*
  %130 = load atomic i32, i32* %129 monotonic, align 4
  %131 = zext i32 %130 to i64
  %132 = or i64 %115, %131
  %133 = add i64 %132, 7
  %134 = inttoptr i64 %133 to i16*
  %135 = load atomic i16, i16* %134 monotonic, align 2
  %136 = add i16 %135, -157
  %137 = icmp ugt i16 %136, 1
  br i1 %137, label %138, label %158

138:                                              ; preds = %127, %124
  %139 = add i64 %111, 19
  %140 = inttoptr i64 %139 to i32*
  %141 = load i32, i32* %140, align 4
  %142 = zext i32 %141 to i64
  %143 = or i64 %115, %142
  %144 = add i64 %143, 3
  %145 = inttoptr i64 %144 to i32*
  %146 = load i32, i32* %145, align 4
  %147 = zext i32 %146 to i64
  %148 = or i64 %115, %147
  %149 = add i64 %148, -1
  %150 = inttoptr i64 %149 to i32*
  %151 = load atomic i32, i32* %150 monotonic, align 4
  %152 = zext i32 %151 to i64
  %153 = or i64 %115, %152
  %154 = add i64 %153, 7
  %155 = inttoptr i64 %154 to i16*
  %156 = load atomic i16, i16* %155 monotonic, align 2
  %157 = icmp eq i16 %156, 167
  br label %158

158:                                              ; preds = %138, %127, %110, %90
  %159 = phi i1 [ true, %90 ], [ false, %127 ], [ %157, %138 ], [ false, %110 ]
  %160 = load i8, i8* @_ZN2v88internal41FLAG_feedback_allocation_on_bytecode_sizeE, align 1, !range !2
  %161 = icmp ne i8 %160, 0
  %162 = xor i1 %159, true
  %163 = or i1 %162, %1
  %164 = and i1 %163, %161
  br i1 %164, label %165, label %170, !prof !4

165:                                              ; preds = %158
  %166 = bitcast %"class.v8::internal::Handle<v8::internal::JSFunction>::ObjectRef"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %166) #6
  %167 = load i64, i64* %0, align 8
  %168 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::JSFunction>::ObjectRef", %"class.v8::internal::Handle<v8::internal::JSFunction>::ObjectRef"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %167, i64* %168, align 8
  %169 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::JSFunction>::ObjectRef", %"class.v8::internal::Handle<v8::internal::JSFunction>::ObjectRef"* %3, i64 0, i32 0
  call void @_ZN2v88internal10JSFunction18SetInterruptBudgetEv(%"class.v8::internal::JSFunction"* nonnull %169)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %166) #6
  br label %170

170:                                              ; preds = %158, %165
  br i1 %159, label %262, label %171

171:                                              ; preds = %170
  %172 = call i64* @_ZN2v88internal24ClosureFeedbackCellArray3NewEPNS0_7IsolateENS0_6HandleINS0_18SharedFunctionInfoEEE(%"class.v8::internal::Isolate"* %11, i64* %62) #6
  %173 = load i64, i64* %0, align 8
  %174 = and i64 %173, -4294967296
  %175 = add i64 %173, 19
  %176 = inttoptr i64 %175 to i32*
  %177 = load i32, i32* %176, align 4
  %178 = zext i32 %177 to i64
  %179 = or i64 %174, %178
  %180 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %11, i64 0, i32 2
  %181 = ptrtoint %"class.v8::internal::Heap"* %180 to i64
  %182 = add i64 %181, -41416
  %183 = inttoptr i64 %182 to %"class.v8::internal::Isolate"*
  %184 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %183, i64 0, i32 0, i32 7, i32 0, i64 601
  %185 = load i64, i64* %184, align 8
  %186 = trunc i64 %185 to i32
  %187 = icmp eq i32 %177, %186
  br i1 %187, label %188, label %229

188:                                              ; preds = %171
  %189 = inttoptr i64 %10 to %"class.v8::internal::Factory"*
  %190 = call i64* @_ZN2v88internal7Factory17NewOneClosureCellENS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::Factory"* %189, i64* %172) #6
  %191 = load i64, i64* %0, align 8
  %192 = load i64, i64* %190, align 8
  %193 = add i64 %191, 19
  %194 = inttoptr i64 %193 to i32*
  %195 = trunc i64 %192 to i32
  store atomic volatile i32 %195, i32* %194 release, align 4
  %196 = and i64 %192, 1
  %197 = icmp eq i64 %196, 0
  br i1 %197, label %209, label %198

198:                                              ; preds = %188
  %199 = and i64 %191, -262144
  %200 = or i64 %199, 8
  %201 = inttoptr i64 %200 to i64*
  %202 = load i64, i64* %201, align 8
  %203 = and i64 %202, 262144
  %204 = icmp eq i64 %203, 0
  br i1 %204, label %209, label %205

205:                                              ; preds = %198
  %206 = or i64 %199, 16
  %207 = inttoptr i64 %206 to %"class.v8::internal::Heap"**
  %208 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %207, align 16
  call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %208, i64 %191, i64 %193, i64 %192) #6
  br label %209

209:                                              ; preds = %205, %198, %188
  %210 = and i64 %192, -262144
  %211 = or i64 %210, 8
  %212 = inttoptr i64 %211 to i64*
  %213 = load i64, i64* %212, align 8
  %214 = and i64 %213, 24
  %215 = icmp eq i64 %214, 0
  br i1 %215, label %224, label %216

216:                                              ; preds = %209
  %217 = and i64 %191, -262144
  %218 = or i64 %217, 8
  %219 = inttoptr i64 %218 to i64*
  %220 = load i64, i64* %219, align 8
  %221 = and i64 %220, 24
  %222 = icmp eq i64 %221, 0
  br i1 %222, label %223, label %224

223:                                              ; preds = %216
  call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %191, i64 %193, i64 %192) #6
  br label %224

224:                                              ; preds = %209, %216, %223
  %225 = bitcast %"class.v8::internal::Handle<v8::internal::JSFunction>::ObjectRef"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %225) #6
  %226 = load i64, i64* %0, align 8
  %227 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::JSFunction>::ObjectRef", %"class.v8::internal::Handle<v8::internal::JSFunction>::ObjectRef"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %226, i64* %227, align 8
  %228 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::JSFunction>::ObjectRef", %"class.v8::internal::Handle<v8::internal::JSFunction>::ObjectRef"* %4, i64 0, i32 0
  call void @_ZN2v88internal10JSFunction18SetInterruptBudgetEv(%"class.v8::internal::JSFunction"* nonnull %228)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %225) #6
  br label %262

229:                                              ; preds = %171
  %230 = load i64, i64* %172, align 8
  %231 = add i64 %179, 3
  %232 = inttoptr i64 %231 to i32*
  %233 = trunc i64 %230 to i32
  store atomic volatile i32 %233, i32* %232 release, align 4
  %234 = and i64 %230, 1
  %235 = icmp eq i64 %234, 0
  br i1 %235, label %247, label %236

236:                                              ; preds = %229
  %237 = and i64 %179, -262144
  %238 = or i64 %237, 8
  %239 = inttoptr i64 %238 to i64*
  %240 = load i64, i64* %239, align 8
  %241 = and i64 %240, 262144
  %242 = icmp eq i64 %241, 0
  br i1 %242, label %247, label %243

243:                                              ; preds = %236
  %244 = or i64 %237, 16
  %245 = inttoptr i64 %244 to %"class.v8::internal::Heap"**
  %246 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %245, align 16
  call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %246, i64 %179, i64 %231, i64 %230) #6
  br label %247

247:                                              ; preds = %243, %236, %229
  %248 = and i64 %230, -262144
  %249 = or i64 %248, 8
  %250 = inttoptr i64 %249 to i64*
  %251 = load i64, i64* %250, align 8
  %252 = and i64 %251, 24
  %253 = icmp eq i64 %252, 0
  br i1 %253, label %262, label %254

254:                                              ; preds = %247
  %255 = and i64 %179, -262144
  %256 = or i64 %255, 8
  %257 = inttoptr i64 %256 to i64*
  %258 = load i64, i64* %257, align 8
  %259 = and i64 %258, 24
  %260 = icmp eq i64 %259, 0
  br i1 %260, label %261, label %262

261:                                              ; preds = %254
  call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %179, i64 %231, i64 %230) #6
  br label %262

262:                                              ; preds = %170, %261, %254, %247, %224, %24
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal10JSFunction18SetInterruptBudgetEv(%"class.v8::internal::JSFunction"*) local_unnamed_addr #4 comdat align 2 {
  %2 = alloca %"class.v8::internal::SharedFunctionInfo", align 8
  %3 = getelementptr inbounds %"class.v8::internal::JSFunction", %"class.v8::internal::JSFunction"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, 11
  %6 = inttoptr i64 %5 to i32*
  %7 = load atomic i32, i32* %6 monotonic, align 4
  %8 = and i64 %4, -4294967296
  %9 = zext i32 %7 to i64
  %10 = or i64 %8, %9
  %11 = add i64 %10, 3
  %12 = inttoptr i64 %11 to i32*
  %13 = load atomic i32, i32* %12 acquire, align 4
  %14 = zext i32 %13 to i64
  %15 = or i64 %8, %14
  %16 = icmp eq i32 %13, 170
  br i1 %16, label %53, label %17

17:                                               ; preds = %1
  %18 = and i64 %14, 1
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %31, label %20

20:                                               ; preds = %17
  %21 = add i64 %15, -1
  %22 = inttoptr i64 %21 to i32*
  %23 = load atomic i32, i32* %22 monotonic, align 4
  %24 = zext i32 %23 to i64
  %25 = or i64 %8, %24
  %26 = add i64 %25, 7
  %27 = inttoptr i64 %26 to i16*
  %28 = load atomic i16, i16* %27 monotonic, align 2
  %29 = add i16 %28, -157
  %30 = icmp ugt i16 %29, 1
  br i1 %30, label %31, label %53

31:                                               ; preds = %17, %20
  %32 = load i64, i64* %3, align 8
  %33 = and i64 %32, -4294967296
  %34 = add i64 %32, 19
  %35 = inttoptr i64 %34 to i32*
  %36 = load i32, i32* %35, align 4
  %37 = zext i32 %36 to i64
  %38 = or i64 %33, %37
  %39 = add i64 %38, 3
  %40 = inttoptr i64 %39 to i32*
  %41 = load i32, i32* %40, align 4
  %42 = zext i32 %41 to i64
  %43 = or i64 %33, %42
  %44 = add i64 %43, -1
  %45 = inttoptr i64 %44 to i32*
  %46 = load atomic i32, i32* %45 monotonic, align 4
  %47 = zext i32 %46 to i64
  %48 = or i64 %33, %47
  %49 = add i64 %48, 7
  %50 = inttoptr i64 %49 to i16*
  %51 = load atomic i16, i16* %50 monotonic, align 2
  %52 = icmp eq i16 %51, 167
  br i1 %52, label %91, label %53

53:                                               ; preds = %1, %20, %31
  %54 = load i32, i32* @_ZN2v88internal42FLAG_budget_for_feedback_vector_allocationE, align 4
  %55 = load i8, i8* @_ZN2v88internal41FLAG_feedback_allocation_on_bytecode_sizeE, align 1, !range !2
  %56 = icmp eq i8 %55, 0
  br i1 %56, label %80, label %57

57:                                               ; preds = %53
  %58 = bitcast %"class.v8::internal::SharedFunctionInfo"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %58) #6
  %59 = load i64, i64* %3, align 8
  %60 = add i64 %59, 11
  %61 = inttoptr i64 %60 to i32*
  %62 = load atomic i32, i32* %61 monotonic, align 4
  %63 = and i64 %59, -4294967296
  %64 = zext i32 %62 to i64
  %65 = or i64 %63, %64
  %66 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %65, i64* %66, align 8
  %67 = and i64 %59, -262144
  %68 = or i64 %67, 16
  %69 = inttoptr i64 %68 to i64*
  %70 = load i64, i64* %69, align 16
  %71 = add i64 %70, -41416
  %72 = inttoptr i64 %71 to %"class.v8::internal::Isolate"*
  %73 = call i64 @_ZNK2v88internal18SharedFunctionInfo16GetBytecodeArrayINS0_7IsolateEEENS0_13BytecodeArrayEPT_(%"class.v8::internal::SharedFunctionInfo"* nonnull %2, %"class.v8::internal::Isolate"* %72)
  %74 = add i64 %73, 3
  %75 = inttoptr i64 %74 to i32*
  %76 = load i32, i32* %75, align 4
  %77 = ashr i32 %76, 1
  %78 = load i32, i32* @_ZN2v88internal41FLAG_scale_factor_for_feedback_allocationE, align 4
  %79 = mul nsw i32 %77, %78
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %58) #6
  br label %80

80:                                               ; preds = %53, %57
  %81 = phi i32 [ %79, %57 ], [ %54, %53 ]
  %82 = load i64, i64* %3, align 8
  %83 = and i64 %82, -4294967296
  %84 = add i64 %82, 19
  %85 = inttoptr i64 %84 to i32*
  %86 = load i32, i32* %85, align 4
  %87 = zext i32 %86 to i64
  %88 = or i64 %83, %87
  %89 = add i64 %88, 7
  %90 = inttoptr i64 %89 to i32*
  store i32 %81, i32* %90, align 4
  br label %92

91:                                               ; preds = %31
  tail call void @_ZN2v88internal14FeedbackVector18SetInterruptBudgetENS0_12FeedbackCellE(i64 %38) #6
  br label %92

92:                                               ; preds = %91, %80
  ret void
}

declare i64* @_ZN2v88internal24ClosureFeedbackCellArray3NewEPNS0_7IsolateENS0_6HandleINS0_18SharedFunctionInfoEEE(%"class.v8::internal::Isolate"*, i64*) local_unnamed_addr #2

declare i64* @_ZN2v88internal7Factory17NewOneClosureCellENS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::Factory"*, i64*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal10JSFunction20EnsureFeedbackVectorENS0_6HandleIS1_EEPNS0_15IsCompiledScopeE(i64*, %"class.v8::internal::IsCompiledScope"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::Handle<v8::internal::JSFunction>::ObjectRef", align 8
  %4 = load i64, i64* %0, align 8
  %5 = and i64 %4, -262144
  %6 = or i64 %5, 16
  %7 = inttoptr i64 %6 to i64*
  %8 = load i64, i64* %7, align 16
  %9 = add i64 %8, -41416
  %10 = inttoptr i64 %9 to %"class.v8::internal::Isolate"*
  %11 = add i64 %4, 11
  %12 = inttoptr i64 %11 to i32*
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i64 %4, -4294967296
  %15 = zext i32 %13 to i64
  %16 = or i64 %14, %15
  %17 = add i64 %16, 3
  %18 = inttoptr i64 %17 to i32*
  %19 = load atomic i32, i32* %18 acquire, align 4
  %20 = zext i32 %19 to i64
  %21 = or i64 %14, %20
  %22 = icmp eq i32 %19, 170
  br i1 %22, label %57, label %23

23:                                               ; preds = %2
  %24 = and i64 %20, 1
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %37, label %26

26:                                               ; preds = %23
  %27 = add i64 %21, -1
  %28 = inttoptr i64 %27 to i32*
  %29 = load atomic i32, i32* %28 monotonic, align 4
  %30 = zext i32 %29 to i64
  %31 = or i64 %14, %30
  %32 = add i64 %31, 7
  %33 = inttoptr i64 %32 to i16*
  %34 = load atomic i16, i16* %33 monotonic, align 2
  %35 = add i16 %34, -157
  %36 = icmp ugt i16 %35, 1
  br i1 %36, label %37, label %57

37:                                               ; preds = %23, %26
  %38 = add i64 %4, 19
  %39 = inttoptr i64 %38 to i32*
  %40 = load i32, i32* %39, align 4
  %41 = zext i32 %40 to i64
  %42 = or i64 %14, %41
  %43 = add i64 %42, 3
  %44 = inttoptr i64 %43 to i32*
  %45 = load i32, i32* %44, align 4
  %46 = zext i32 %45 to i64
  %47 = or i64 %14, %46
  %48 = add i64 %47, -1
  %49 = inttoptr i64 %48 to i32*
  %50 = load atomic i32, i32* %49 monotonic, align 4
  %51 = zext i32 %50 to i64
  %52 = or i64 %14, %51
  %53 = add i64 %52, 7
  %54 = inttoptr i64 %53 to i16*
  %55 = load atomic i16, i16* %54 monotonic, align 2
  %56 = icmp eq i16 %55, 167
  br i1 %56, label %186, label %57

57:                                               ; preds = %2, %26, %37
  %58 = load i64, i64* %0, align 8
  %59 = add i64 %58, 11
  %60 = inttoptr i64 %59 to i32*
  %61 = load atomic i32, i32* %60 monotonic, align 4
  %62 = and i64 %58, -4294967296
  %63 = zext i32 %61 to i64
  %64 = or i64 %62, %63
  %65 = add i64 %64, 3
  %66 = inttoptr i64 %65 to i32*
  %67 = load atomic i32, i32* %66 acquire, align 4
  %68 = zext i32 %67 to i64
  %69 = and i64 %68, 1
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %82, label %71

71:                                               ; preds = %57
  %72 = or i64 %62, %68
  %73 = add i64 %72, -1
  %74 = inttoptr i64 %73 to i32*
  %75 = load atomic i32, i32* %74 monotonic, align 4
  %76 = zext i32 %75 to i64
  %77 = or i64 %62, %76
  %78 = add i64 %77, 7
  %79 = inttoptr i64 %78 to i16*
  %80 = load atomic i16, i16* %79 monotonic, align 2
  %81 = icmp eq i16 %80, 92
  br i1 %81, label %186, label %82

82:                                               ; preds = %57, %71
  %83 = load i64, i64* %0, align 8
  %84 = add i64 %83, 11
  %85 = inttoptr i64 %84 to i32*
  %86 = load atomic i32, i32* %85 monotonic, align 4
  %87 = and i64 %83, -4294967296
  %88 = zext i32 %86 to i64
  %89 = or i64 %87, %88
  %90 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %10, i64 0, i32 31, i32 4
  %91 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %90, align 8
  %92 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %91, null
  br i1 %92, label %95, label %93

93:                                               ; preds = %82
  %94 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %91, i64 %89) #6
  br label %108

95:                                               ; preds = %82
  %96 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %10, i64 0, i32 31, i32 0
  %97 = load i64*, i64** %96, align 8
  %98 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %10, i64 0, i32 31, i32 1
  %99 = load i64*, i64** %98, align 8
  %100 = icmp eq i64* %97, %99
  br i1 %100, label %101, label %103

101:                                              ; preds = %95
  %102 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %10) #6
  br label %103

103:                                              ; preds = %101, %95
  %104 = phi i64* [ %102, %101 ], [ %97, %95 ]
  %105 = ptrtoint i64* %104 to i64
  %106 = add i64 %105, 8
  %107 = inttoptr i64 %106 to i64*
  store i64* %107, i64** %96, align 8
  store i64 %89, i64* %104, align 8
  br label %108

108:                                              ; preds = %93, %103
  %109 = phi i64* [ %94, %93 ], [ %104, %103 ]
  tail call void @_ZN2v88internal10JSFunction30EnsureClosureFeedbackCellArrayENS0_6HandleIS1_EEb(i64* %0, i1 zeroext false)
  %110 = load i64, i64* %0, align 8
  %111 = and i64 %110, -4294967296
  %112 = add i64 %110, 19
  %113 = inttoptr i64 %112 to i32*
  %114 = load i32, i32* %113, align 4
  %115 = zext i32 %114 to i64
  %116 = or i64 %111, %115
  %117 = add i64 %116, 3
  %118 = inttoptr i64 %117 to i32*
  %119 = load i32, i32* %118, align 4
  %120 = zext i32 %119 to i64
  %121 = or i64 %111, %120
  %122 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %90, align 8
  %123 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %122, null
  br i1 %123, label %126, label %124

124:                                              ; preds = %108
  %125 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %122, i64 %121) #6
  br label %139

126:                                              ; preds = %108
  %127 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %10, i64 0, i32 31, i32 0
  %128 = load i64*, i64** %127, align 8
  %129 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %10, i64 0, i32 31, i32 1
  %130 = load i64*, i64** %129, align 8
  %131 = icmp eq i64* %128, %130
  br i1 %131, label %132, label %134

132:                                              ; preds = %126
  %133 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %10) #6
  br label %134

134:                                              ; preds = %132, %126
  %135 = phi i64* [ %133, %132 ], [ %128, %126 ]
  %136 = ptrtoint i64* %135 to i64
  %137 = add i64 %136, 8
  %138 = inttoptr i64 %137 to i64*
  store i64* %138, i64** %127, align 8
  store i64 %121, i64* %135, align 8
  br label %139

139:                                              ; preds = %124, %134
  %140 = phi i64* [ %125, %124 ], [ %135, %134 ]
  %141 = tail call i64* @_ZN2v88internal14FeedbackVector3NewEPNS0_7IsolateENS0_6HandleINS0_18SharedFunctionInfoEEENS4_INS0_24ClosureFeedbackCellArrayEEEPNS0_15IsCompiledScopeE(%"class.v8::internal::Isolate"* %10, i64* %109, i64* %140, %"class.v8::internal::IsCompiledScope"* %1) #6
  %142 = load i64, i64* %0, align 8
  %143 = and i64 %142, -4294967296
  %144 = add i64 %142, 19
  %145 = inttoptr i64 %144 to i32*
  %146 = load i32, i32* %145, align 4
  %147 = zext i32 %146 to i64
  %148 = or i64 %143, %147
  %149 = load i64, i64* %141, align 8
  %150 = add i64 %148, 3
  %151 = inttoptr i64 %150 to i32*
  %152 = trunc i64 %149 to i32
  store atomic volatile i32 %152, i32* %151 release, align 4
  %153 = and i64 %149, 1
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %166, label %155

155:                                              ; preds = %139
  %156 = and i64 %148, -262144
  %157 = or i64 %156, 8
  %158 = inttoptr i64 %157 to i64*
  %159 = load i64, i64* %158, align 8
  %160 = and i64 %159, 262144
  %161 = icmp eq i64 %160, 0
  br i1 %161, label %166, label %162

162:                                              ; preds = %155
  %163 = or i64 %156, 16
  %164 = inttoptr i64 %163 to %"class.v8::internal::Heap"**
  %165 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %164, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %165, i64 %148, i64 %150, i64 %149) #6
  br label %166

166:                                              ; preds = %162, %155, %139
  %167 = and i64 %149, -262144
  %168 = or i64 %167, 8
  %169 = inttoptr i64 %168 to i64*
  %170 = load i64, i64* %169, align 8
  %171 = and i64 %170, 24
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %181, label %173

173:                                              ; preds = %166
  %174 = and i64 %148, -262144
  %175 = or i64 %174, 8
  %176 = inttoptr i64 %175 to i64*
  %177 = load i64, i64* %176, align 8
  %178 = and i64 %177, 24
  %179 = icmp eq i64 %178, 0
  br i1 %179, label %180, label %181

180:                                              ; preds = %173
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %148, i64 %150, i64 %149) #6
  br label %181

181:                                              ; preds = %166, %173, %180
  %182 = bitcast %"class.v8::internal::Handle<v8::internal::JSFunction>::ObjectRef"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %182) #6
  %183 = load i64, i64* %0, align 8
  %184 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::JSFunction>::ObjectRef", %"class.v8::internal::Handle<v8::internal::JSFunction>::ObjectRef"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %183, i64* %184, align 8
  %185 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::JSFunction>::ObjectRef", %"class.v8::internal::Handle<v8::internal::JSFunction>::ObjectRef"* %3, i64 0, i32 0
  call void @_ZN2v88internal10JSFunction18SetInterruptBudgetEv(%"class.v8::internal::JSFunction"* nonnull %185)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %182) #6
  br label %186

186:                                              ; preds = %71, %37, %181
  ret void
}

declare i64* @_ZN2v88internal14FeedbackVector3NewEPNS0_7IsolateENS0_6HandleINS0_18SharedFunctionInfoEEENS4_INS0_24ClosureFeedbackCellArrayEEEPNS0_15IsCompiledScopeE(%"class.v8::internal::Isolate"*, i64*, i64*, %"class.v8::internal::IsCompiledScope"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal10JSFunction22InitializeFeedbackCellENS0_6HandleIS1_EEPNS0_15IsCompiledScopeEb(i64*, %"class.v8::internal::IsCompiledScope"*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %4 = load i64, i64* %0, align 8
  %5 = and i64 %4, -262144
  %6 = or i64 %5, 16
  %7 = inttoptr i64 %6 to i64*
  %8 = load i64, i64* %7, align 16
  %9 = add i64 %8, -41416
  %10 = inttoptr i64 %9 to %"class.v8::internal::Isolate"*
  %11 = add i64 %4, 11
  %12 = inttoptr i64 %11 to i32*
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i64 %4, -4294967296
  %15 = zext i32 %13 to i64
  %16 = or i64 %14, %15
  %17 = add i64 %16, 3
  %18 = inttoptr i64 %17 to i32*
  %19 = load atomic i32, i32* %18 acquire, align 4
  %20 = zext i32 %19 to i64
  %21 = and i64 %20, 1
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %34, label %23

23:                                               ; preds = %3
  %24 = or i64 %14, %20
  %25 = add i64 %24, -1
  %26 = inttoptr i64 %25 to i32*
  %27 = load atomic i32, i32* %26 monotonic, align 4
  %28 = zext i32 %27 to i64
  %29 = or i64 %14, %28
  %30 = add i64 %29, 7
  %31 = inttoptr i64 %30 to i16*
  %32 = load atomic i16, i16* %31 monotonic, align 2
  %33 = icmp eq i16 %32, 92
  br i1 %33, label %211, label %34

34:                                               ; preds = %3, %23
  %35 = load i64, i64* %0, align 8
  %36 = add i64 %35, 11
  %37 = inttoptr i64 %36 to i32*
  %38 = load atomic i32, i32* %37 monotonic, align 4
  %39 = and i64 %35, -4294967296
  %40 = zext i32 %38 to i64
  %41 = or i64 %39, %40
  %42 = add i64 %41, 3
  %43 = inttoptr i64 %42 to i32*
  %44 = load atomic i32, i32* %43 acquire, align 4
  %45 = zext i32 %44 to i64
  %46 = or i64 %39, %45
  %47 = icmp eq i32 %44, 170
  br i1 %47, label %113, label %48

48:                                               ; preds = %34
  %49 = and i64 %45, 1
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %62, label %51

51:                                               ; preds = %48
  %52 = add i64 %46, -1
  %53 = inttoptr i64 %52 to i32*
  %54 = load atomic i32, i32* %53 monotonic, align 4
  %55 = zext i32 %54 to i64
  %56 = or i64 %39, %55
  %57 = add i64 %56, 7
  %58 = inttoptr i64 %57 to i16*
  %59 = load atomic i16, i16* %58 monotonic, align 2
  %60 = add i16 %59, -157
  %61 = icmp ugt i16 %60, 1
  br i1 %61, label %62, label %113

62:                                               ; preds = %48, %51
  %63 = add i64 %35, 19
  %64 = inttoptr i64 %63 to i32*
  %65 = load i32, i32* %64, align 4
  %66 = zext i32 %65 to i64
  %67 = or i64 %39, %66
  %68 = add i64 %67, 3
  %69 = inttoptr i64 %68 to i32*
  %70 = load i32, i32* %69, align 4
  %71 = zext i32 %70 to i64
  %72 = or i64 %39, %71
  %73 = add i64 %72, -1
  %74 = inttoptr i64 %73 to i32*
  %75 = load atomic i32, i32* %74 monotonic, align 4
  %76 = zext i32 %75 to i64
  %77 = or i64 %39, %76
  %78 = add i64 %77, 7
  %79 = inttoptr i64 %78 to i16*
  %80 = load atomic i16, i16* %79 monotonic, align 2
  %81 = icmp eq i16 %80, 167
  br i1 %81, label %82, label %113

82:                                               ; preds = %62
  %83 = load i64, i64* %0, align 8
  %84 = and i64 %83, -4294967296
  %85 = add i64 %83, 19
  %86 = inttoptr i64 %85 to i32*
  %87 = load i32, i32* %86, align 4
  %88 = zext i32 %87 to i64
  %89 = or i64 %84, %88
  %90 = add i64 %89, 3
  %91 = inttoptr i64 %90 to i32*
  %92 = load i32, i32* %91, align 4
  %93 = zext i32 %92 to i64
  %94 = or i64 %84, %93
  %95 = add i64 %94, 3
  %96 = inttoptr i64 %95 to i32*
  %97 = load i32, i32* %96, align 4
  %98 = add i64 %94, 19
  %99 = inttoptr i64 %98 to i32*
  %100 = load i32, i32* %99, align 4
  %101 = zext i32 %100 to i64
  %102 = or i64 %84, %101
  %103 = add i64 %102, 11
  %104 = inttoptr i64 %103 to i32*
  %105 = load i32, i32* %104, align 4
  %106 = zext i32 %105 to i64
  %107 = or i64 %84, %106
  %108 = add i64 %107, 3
  %109 = inttoptr i64 %108 to i32*
  %110 = load i32, i32* %109, align 4
  %111 = icmp eq i32 %97, %110
  br i1 %111, label %211, label %112, !prof !3

112:                                              ; preds = %82
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.1, i64 0, i64 0)) #8
  unreachable

113:                                              ; preds = %34, %51, %62
  %114 = load i64, i64* %0, align 8
  %115 = add i64 %114, 11
  %116 = inttoptr i64 %115 to i32*
  %117 = load atomic i32, i32* %116 monotonic, align 4
  %118 = and i64 %114, -4294967296
  %119 = zext i32 %117 to i64
  %120 = or i64 %118, %119
  %121 = add i64 %120, 3
  %122 = inttoptr i64 %121 to i32*
  %123 = load atomic i32, i32* %122 acquire, align 4
  %124 = zext i32 %123 to i64
  %125 = or i64 %118, %124
  %126 = icmp eq i32 %123, 170
  br i1 %126, label %193, label %127

127:                                              ; preds = %113
  %128 = and i64 %124, 1
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %141, label %130

130:                                              ; preds = %127
  %131 = add i64 %125, -1
  %132 = inttoptr i64 %131 to i32*
  %133 = load atomic i32, i32* %132 monotonic, align 4
  %134 = zext i32 %133 to i64
  %135 = or i64 %118, %134
  %136 = add i64 %135, 7
  %137 = inttoptr i64 %136 to i16*
  %138 = load atomic i16, i16* %137 monotonic, align 2
  %139 = add i16 %138, -157
  %140 = icmp ugt i16 %139, 1
  br i1 %140, label %141, label %193

141:                                              ; preds = %127, %130
  %142 = add i64 %114, 19
  %143 = inttoptr i64 %142 to i32*
  %144 = load i32, i32* %143, align 4
  %145 = zext i32 %144 to i64
  %146 = or i64 %118, %145
  %147 = add i64 %146, 3
  %148 = inttoptr i64 %147 to i32*
  %149 = load i32, i32* %148, align 4
  %150 = zext i32 %149 to i64
  %151 = or i64 %118, %150
  %152 = add i64 %151, -1
  %153 = inttoptr i64 %152 to i32*
  %154 = load atomic i32, i32* %153 monotonic, align 4
  %155 = zext i32 %154 to i64
  %156 = or i64 %118, %155
  %157 = add i64 %156, 7
  %158 = inttoptr i64 %157 to i16*
  %159 = load atomic i16, i16* %158 monotonic, align 2
  %160 = icmp eq i16 %159, 129
  br i1 %160, label %161, label %193

161:                                              ; preds = %141
  %162 = load i64, i64* %0, align 8
  %163 = and i64 %162, -4294967296
  %164 = add i64 %162, 19
  %165 = inttoptr i64 %164 to i32*
  %166 = load i32, i32* %165, align 4
  %167 = zext i32 %166 to i64
  %168 = or i64 %163, %167
  %169 = add i64 %168, 3
  %170 = inttoptr i64 %169 to i32*
  %171 = load i32, i32* %170, align 4
  %172 = zext i32 %171 to i64
  %173 = or i64 %163, %172
  %174 = add i64 %173, 3
  %175 = inttoptr i64 %174 to i32*
  %176 = load i32, i32* %175, align 4
  %177 = ashr i32 %176, 1
  %178 = add i64 %162, 11
  %179 = inttoptr i64 %178 to i32*
  %180 = load atomic i32, i32* %179 monotonic, align 4
  %181 = zext i32 %180 to i64
  %182 = or i64 %163, %181
  %183 = add i64 %182, 11
  %184 = inttoptr i64 %183 to i32*
  %185 = load i32, i32* %184, align 4
  %186 = zext i32 %185 to i64
  %187 = or i64 %163, %186
  %188 = add i64 %187, 7
  %189 = inttoptr i64 %188 to i32*
  %190 = load i32, i32* %189, align 4
  %191 = icmp eq i32 %177, %190
  br i1 %191, label %193, label %192, !prof !3

192:                                              ; preds = %161
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([119 x i8], [119 x i8]* @.str.2, i64 0, i64 0)) #8
  unreachable

193:                                              ; preds = %113, %130, %161, %141
  %194 = load i8, i8* @_ZN2v88internal29FLAG_lazy_feedback_allocationE, align 1, !range !2
  %195 = icmp ne i8 %194, 0
  %196 = load i8, i8* @_ZN2v88internal15FLAG_always_optE, align 1
  %197 = load i8, i8* @_ZN2v88internal24FLAG_log_function_eventsE, align 1
  %198 = or i8 %197, %196
  %199 = icmp eq i8 %198, 0
  %200 = and i1 %195, %199
  br i1 %200, label %201, label %209

201:                                              ; preds = %193
  %202 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %10, i64 0, i32 54, i32 0, i32 0, i32 0, i32 0
  %203 = load atomic i32, i32* %202 monotonic, align 4
  %204 = icmp eq i32 %203, 0
  br i1 %204, label %205, label %209

205:                                              ; preds = %201
  %206 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %10, i64 0, i32 109
  %207 = load i32, i32* %206, align 4
  %208 = icmp eq i32 %207, 1
  br i1 %208, label %209, label %210

209:                                              ; preds = %193, %201, %205
  tail call void @_ZN2v88internal10JSFunction20EnsureFeedbackVectorENS0_6HandleIS1_EEPNS0_15IsCompiledScopeE(i64* %0, %"class.v8::internal::IsCompiledScope"* %1)
  br label %211

210:                                              ; preds = %205
  tail call void @_ZN2v88internal10JSFunction30EnsureClosureFeedbackCellArrayENS0_6HandleIS1_EEb(i64* %0, i1 zeroext %2)
  br label %211

211:                                              ; preds = %209, %210, %82, %23
  ret void
}

; Function Attrs: noreturn
declare void @_Z8V8_FatalPKcz(i8*, ...) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal10JSFunction12SetPrototypeENS0_6HandleIS1_EENS2_INS0_6ObjectEEE(i64*, i64*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::Map", align 8
  %4 = alloca %"class.v8::internal::DependentCode", align 8
  %5 = load i64, i64* %0, align 8
  %6 = and i64 %5, -262144
  %7 = or i64 %6, 16
  %8 = inttoptr i64 %7 to i64*
  %9 = load i64, i64* %8, align 16
  %10 = add i64 %9, -41416
  %11 = inttoptr i64 %10 to %"class.v8::internal::Isolate"*
  %12 = load i64, i64* %1, align 8
  %13 = and i64 %12, 1
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %26, label %15

15:                                               ; preds = %2
  %16 = and i64 %12, -4294967296
  %17 = add i64 %12, -1
  %18 = inttoptr i64 %17 to i32*
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = zext i32 %19 to i64
  %21 = or i64 %16, %20
  %22 = add i64 %21, 7
  %23 = inttoptr i64 %22 to i16*
  %24 = load atomic i16, i16* %23 monotonic, align 2
  %25 = icmp ugt i16 %24, 185
  br i1 %25, label %193, label %26

26:                                               ; preds = %2, %15
  %27 = and i64 %5, -4294967296
  %28 = add i64 %5, -1
  %29 = inttoptr i64 %28 to i32*
  %30 = load atomic i32, i32* %29 monotonic, align 4
  %31 = zext i32 %30 to i64
  %32 = or i64 %27, %31
  %33 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %11, i64 0, i32 31, i32 4
  %34 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %33, align 8
  %35 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %34, null
  br i1 %35, label %38, label %36

36:                                               ; preds = %26
  %37 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %34, i64 %32) #6
  br label %51

38:                                               ; preds = %26
  %39 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %11, i64 0, i32 31, i32 0
  %40 = load i64*, i64** %39, align 8
  %41 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %11, i64 0, i32 31, i32 1
  %42 = load i64*, i64** %41, align 8
  %43 = icmp eq i64* %40, %42
  br i1 %43, label %44, label %46

44:                                               ; preds = %38
  %45 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %11) #6
  br label %46

46:                                               ; preds = %44, %38
  %47 = phi i64* [ %45, %44 ], [ %40, %38 ]
  %48 = ptrtoint i64* %47 to i64
  %49 = add i64 %48, 8
  %50 = inttoptr i64 %49 to i64*
  store i64* %50, i64** %39, align 8
  store i64 %32, i64* %47, align 8
  br label %51

51:                                               ; preds = %36, %46
  %52 = phi i64* [ %37, %36 ], [ %47, %46 ]
  %53 = tail call i64* @_ZN2v88internal3Map4CopyEPNS0_7IsolateENS0_6HandleIS1_EEPKc(%"class.v8::internal::Isolate"* %11, i64* %52, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i64 0, i64 0)) #6
  %54 = load i64, i64* %53, align 8
  %55 = load i64, i64* %1, align 8
  %56 = and i64 %54, -4294967296
  %57 = add i64 %54, 19
  %58 = inttoptr i64 %57 to i32*
  %59 = load i32, i32* %58, align 4
  %60 = zext i32 %59 to i64
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %75, label %63

63:                                               ; preds = %51
  %64 = or i64 %56, %60
  %65 = add i64 %64, -1
  %66 = inttoptr i64 %65 to i32*
  %67 = load atomic i32, i32* %66 monotonic, align 4
  %68 = zext i32 %67 to i64
  %69 = or i64 %56, %68
  %70 = add i64 %69, 7
  %71 = inttoptr i64 %70 to i16*
  %72 = load atomic i16, i16* %71 monotonic, align 2
  %73 = icmp eq i16 %72, 172
  br i1 %73, label %74, label %75, !prof !5

74:                                               ; preds = %63
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.15, i64 0, i64 0)) #8
  unreachable

75:                                               ; preds = %63, %51
  %76 = trunc i64 %55 to i32
  store atomic volatile i32 %76, i32* %58 monotonic, align 4
  %77 = and i64 %55, 1
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %102, label %79

79:                                               ; preds = %75
  %80 = and i64 %54, -262144
  %81 = or i64 %80, 8
  %82 = inttoptr i64 %81 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = and i64 %83, 262144
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %90, label %86

86:                                               ; preds = %79
  %87 = or i64 %80, 16
  %88 = inttoptr i64 %87 to %"class.v8::internal::Heap"**
  %89 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %88, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %89, i64 %54, i64 %57, i64 %55) #6
  br label %90

90:                                               ; preds = %86, %79
  %91 = and i64 %55, -262144
  %92 = or i64 %91, 8
  %93 = inttoptr i64 %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = and i64 %94, 24
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %102, label %97

97:                                               ; preds = %90
  %98 = load i64, i64* %82, align 8
  %99 = and i64 %98, 24
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %101, label %102

101:                                              ; preds = %97
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %54, i64 %57, i64 %55) #6
  br label %102

102:                                              ; preds = %75, %90, %97, %101
  %103 = load i64, i64* %53, align 8
  %104 = add i64 %103, 9
  %105 = inttoptr i64 %104 to i8*
  %106 = load atomic i8, i8* %105 monotonic, align 1
  %107 = or i8 %106, 1
  store atomic volatile i8 %107, i8* %105 monotonic, align 1
  tail call void @_ZN2v88internal8JSObject12MigrateToMapEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_3MapEEEi(%"class.v8::internal::Isolate"* %11, i64* %0, i64* %53, i32 0) #6
  %108 = load i64, i64* %0, align 8
  %109 = add i64 %108, 11
  %110 = inttoptr i64 %109 to i32*
  %111 = load atomic i32, i32* %110 monotonic, align 4
  %112 = and i64 %108, -4294967296
  %113 = zext i32 %111 to i64
  %114 = or i64 %112, %113
  %115 = add i64 %114, 27
  %116 = inttoptr i64 %115 to i32*
  %117 = load atomic i32, i32* %116 monotonic, align 4
  %118 = trunc i32 %117 to i8
  %119 = and i8 %118, 31
  %120 = add i64 %108, 15
  %121 = inttoptr i64 %120 to i32*
  %122 = load i32, i32* %121, align 4
  %123 = zext i32 %122 to i64
  %124 = or i64 %112, %123
  %125 = add i64 %124, -1
  %126 = inttoptr i64 %125 to i32*
  %127 = load atomic i32, i32* %126 monotonic, align 4
  %128 = zext i32 %127 to i64
  %129 = or i64 %112, %128
  %130 = add i64 %129, 19
  %131 = inttoptr i64 %130 to i32*
  %132 = load i32, i32* %131, align 4
  %133 = zext i32 %132 to i64
  %134 = or i64 %112, %133
  %135 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %33, align 8
  %136 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %135, null
  br i1 %136, label %139, label %137

137:                                              ; preds = %102
  %138 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %135, i64 %134) #6
  br label %152

139:                                              ; preds = %102
  %140 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %11, i64 0, i32 31, i32 0
  %141 = load i64*, i64** %140, align 8
  %142 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %11, i64 0, i32 31, i32 1
  %143 = load i64*, i64** %142, align 8
  %144 = icmp eq i64* %141, %143
  br i1 %144, label %145, label %147

145:                                              ; preds = %139
  %146 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %11) #6
  br label %147

147:                                              ; preds = %145, %139
  %148 = phi i64* [ %146, %145 ], [ %141, %139 ]
  %149 = ptrtoint i64* %148 to i64
  %150 = add i64 %149, 8
  %151 = inttoptr i64 %150 to i64*
  store i64* %151, i64** %140, align 8
  store i64 %134, i64* %148, align 8
  br label %152

152:                                              ; preds = %137, %147
  %153 = phi i64* [ %138, %137 ], [ %148, %147 ]
  %154 = add nsw i8 %119, -16
  %155 = icmp ult i8 %154, 6
  br i1 %155, label %156, label %165

156:                                              ; preds = %152
  %157 = add nsw i8 %119, -12
  %158 = icmp ult i8 %157, 7
  %159 = load i64, i64* %153, align 8
  %160 = and i64 %159, -4294967296
  br i1 %158, label %161, label %163

161:                                              ; preds = %156
  %162 = add i64 %159, 331
  br label %169

163:                                              ; preds = %156
  %164 = add i64 %159, 323
  br label %169

165:                                              ; preds = %152
  %166 = load i64, i64* %153, align 8
  %167 = and i64 %166, -4294967296
  %168 = add i64 %166, 347
  br label %169

169:                                              ; preds = %161, %163, %165
  %170 = phi i64 [ %162, %161 ], [ %164, %163 ], [ %168, %165 ]
  %171 = phi i64 [ %160, %161 ], [ %160, %163 ], [ %167, %165 ]
  %172 = inttoptr i64 %170 to i32*
  %173 = load atomic i32, i32* %172 monotonic, align 4
  %174 = zext i32 %173 to i64
  %175 = or i64 %171, %174
  %176 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %33, align 8
  %177 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %176, null
  br i1 %177, label %180, label %178

178:                                              ; preds = %169
  %179 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %176, i64 %175) #6
  br label %204

180:                                              ; preds = %169
  %181 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %11, i64 0, i32 31, i32 0
  %182 = load i64*, i64** %181, align 8
  %183 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %11, i64 0, i32 31, i32 1
  %184 = load i64*, i64** %183, align 8
  %185 = icmp eq i64* %182, %184
  br i1 %185, label %186, label %188

186:                                              ; preds = %180
  %187 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %11) #6
  br label %188

188:                                              ; preds = %186, %180
  %189 = phi i64* [ %187, %186 ], [ %182, %180 ]
  %190 = ptrtoint i64* %189 to i64
  %191 = add i64 %190, 8
  %192 = inttoptr i64 %191 to i64*
  store i64* %192, i64** %181, align 8
  store i64 %175, i64* %189, align 8
  br label %204

193:                                              ; preds = %15
  %194 = and i64 %5, -4294967296
  %195 = add i64 %5, -1
  %196 = inttoptr i64 %195 to i32*
  %197 = load atomic i32, i32* %196 monotonic, align 4
  %198 = zext i32 %197 to i64
  %199 = or i64 %194, %198
  %200 = add i64 %199, 9
  %201 = inttoptr i64 %200 to i8*
  %202 = load atomic i8, i8* %201 monotonic, align 1
  %203 = and i8 %202, -2
  store atomic volatile i8 %203, i8* %201 monotonic, align 1
  br label %204

204:                                              ; preds = %188, %178, %193
  %205 = phi i64* [ %1, %193 ], [ %179, %178 ], [ %189, %188 ]
  %206 = load i64, i64* %0, align 8
  %207 = and i64 %206, -4294967296
  %208 = add i64 %206, 27
  %209 = inttoptr i64 %208 to i32*
  %210 = load atomic i32, i32* %209 acquire, align 4
  %211 = zext i32 %210 to i64
  %212 = or i64 %207, %211
  %213 = add i64 %212, -1
  %214 = inttoptr i64 %213 to i32*
  %215 = load atomic i32, i32* %214 monotonic, align 4
  %216 = zext i32 %215 to i64
  %217 = or i64 %207, %216
  %218 = add i64 %217, 7
  %219 = inttoptr i64 %218 to i16*
  %220 = load atomic i16, i16* %219 monotonic, align 2
  %221 = icmp eq i16 %220, 172
  %222 = load i64, i64* %0, align 8
  br i1 %221, label %223, label %439

223:                                              ; preds = %204
  %224 = and i64 %222, -4294967296
  %225 = add i64 %222, -1
  %226 = inttoptr i64 %225 to i32*
  %227 = load atomic i32, i32* %226 monotonic, align 4
  %228 = zext i32 %227 to i64
  %229 = or i64 %224, %228
  %230 = add i64 %229, 9
  %231 = inttoptr i64 %230 to i8*
  %232 = load atomic i8, i8* %231 monotonic, align 1
  %233 = icmp slt i8 %232, 0
  br i1 %233, label %234, label %269

234:                                              ; preds = %223
  %235 = add i64 %222, 27
  %236 = inttoptr i64 %235 to i32*
  %237 = load atomic i32, i32* %236 acquire, align 4
  %238 = zext i32 %237 to i64
  %239 = or i64 %224, %238
  %240 = add i64 %239, -1
  %241 = inttoptr i64 %240 to i32*
  %242 = load atomic i32, i32* %241 monotonic, align 4
  %243 = zext i32 %242 to i64
  %244 = or i64 %224, %243
  %245 = add i64 %244, 7
  %246 = inttoptr i64 %245 to i16*
  %247 = load atomic i16, i16* %246 monotonic, align 2
  %248 = icmp eq i16 %247, 172
  br i1 %248, label %249, label %269

249:                                              ; preds = %234
  %250 = load atomic i32, i32* %236 acquire, align 4
  %251 = zext i32 %250 to i64
  %252 = or i64 %224, %251
  %253 = add i64 %252, 11
  %254 = inttoptr i64 %253 to i32*
  %255 = load atomic i32, i32* %254 monotonic, align 4
  %256 = icmp ugt i32 %255, 536870911
  br i1 %256, label %257, label %269

257:                                              ; preds = %249
  %258 = bitcast %"class.v8::internal::Map"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %258) #6
  %259 = load atomic i32, i32* %236 acquire, align 4
  %260 = zext i32 %259 to i64
  %261 = or i64 %224, %260
  %262 = getelementptr inbounds %"class.v8::internal::Map", %"class.v8::internal::Map"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  store i64 %261, i64* %262, align 8
  %263 = and i64 %222, -262144
  %264 = or i64 %263, 16
  %265 = inttoptr i64 %264 to i64*
  %266 = load i64, i64* %265, align 16
  %267 = add i64 %266, -41416
  %268 = inttoptr i64 %267 to %"class.v8::internal::Isolate"*
  call void @_ZN2v88internal3Map29CompleteInobjectSlackTrackingEPNS0_7IsolateE(%"class.v8::internal::Map"* nonnull %3, %"class.v8::internal::Isolate"* %268) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %258) #6
  br label %269

269:                                              ; preds = %257, %249, %234, %223
  %270 = load i64, i64* %0, align 8
  %271 = and i64 %270, -4294967296
  %272 = add i64 %270, 27
  %273 = inttoptr i64 %272 to i32*
  %274 = load atomic i32, i32* %273 acquire, align 4
  %275 = zext i32 %274 to i64
  %276 = or i64 %271, %275
  %277 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %11, i64 0, i32 31, i32 4
  %278 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %277, align 8
  %279 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %278, null
  br i1 %279, label %282, label %280

280:                                              ; preds = %269
  %281 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %278, i64 %276) #6
  br label %295

282:                                              ; preds = %269
  %283 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %11, i64 0, i32 31, i32 0
  %284 = load i64*, i64** %283, align 8
  %285 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %11, i64 0, i32 31, i32 1
  %286 = load i64*, i64** %285, align 8
  %287 = icmp eq i64* %284, %286
  br i1 %287, label %288, label %290

288:                                              ; preds = %282
  %289 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %11) #6
  br label %290

290:                                              ; preds = %288, %282
  %291 = phi i64* [ %289, %288 ], [ %284, %282 ]
  %292 = ptrtoint i64* %291 to i64
  %293 = add i64 %292, 8
  %294 = inttoptr i64 %293 to i64*
  store i64* %294, i64** %283, align 8
  store i64 %276, i64* %291, align 8
  br label %295

295:                                              ; preds = %290, %280
  %296 = phi i64* [ %281, %280 ], [ %291, %290 ]
  %297 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %11, i64 0, i32 11
  %298 = load %"class.v8::internal::Bootstrapper"*, %"class.v8::internal::Bootstrapper"** %297, align 8
  %299 = getelementptr inbounds %"class.v8::internal::Bootstrapper", %"class.v8::internal::Bootstrapper"* %298, i64 0, i32 1
  %300 = load i32, i32* %299, align 8
  %301 = icmp eq i32 %300, 0
  br i1 %301, label %302, label %342

302:                                              ; preds = %295
  %303 = load i64, i64* %296, align 8
  %304 = add i64 %303, 7
  %305 = inttoptr i64 %304 to i16*
  %306 = load atomic i16, i16* %305 monotonic, align 2
  %307 = icmp eq i16 %306, 1057
  br i1 %307, label %308, label %342

308:                                              ; preds = %302
  %309 = load i64, i64* %0, align 8
  %310 = load i64, i64* %205, align 8
  %311 = add i64 %309, 27
  %312 = inttoptr i64 %311 to i32*
  %313 = trunc i64 %310 to i32
  store atomic volatile i32 %313, i32* %312 release, align 4
  %314 = and i64 %310, 1
  %315 = icmp eq i64 %314, 0
  br i1 %315, label %327, label %316

316:                                              ; preds = %308
  %317 = and i64 %309, -262144
  %318 = or i64 %317, 8
  %319 = inttoptr i64 %318 to i64*
  %320 = load i64, i64* %319, align 8
  %321 = and i64 %320, 262144
  %322 = icmp eq i64 %321, 0
  br i1 %322, label %327, label %323

323:                                              ; preds = %316
  %324 = or i64 %317, 16
  %325 = inttoptr i64 %324 to %"class.v8::internal::Heap"**
  %326 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %325, align 16
  call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %326, i64 %309, i64 %311, i64 %310) #6
  br label %327

327:                                              ; preds = %323, %316, %308
  %328 = and i64 %310, -262144
  %329 = or i64 %328, 8
  %330 = inttoptr i64 %329 to i64*
  %331 = load i64, i64* %330, align 8
  %332 = and i64 %331, 24
  %333 = icmp eq i64 %332, 0
  br i1 %333, label %429, label %334

334:                                              ; preds = %327
  %335 = and i64 %309, -262144
  %336 = or i64 %335, 8
  %337 = inttoptr i64 %336 to i64*
  %338 = load i64, i64* %337, align 8
  %339 = and i64 %338, 24
  %340 = icmp eq i64 %339, 0
  br i1 %340, label %341, label %429

341:                                              ; preds = %334
  call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %309, i64 %311, i64 %310) #6
  br label %429

342:                                              ; preds = %302, %295
  %343 = call i64* @_ZN2v88internal3Map4CopyEPNS0_7IsolateENS0_6HandleIS1_EEPKc(%"class.v8::internal::Isolate"* %11, i64* %296, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.16, i64 0, i64 0)) #6
  call void @_ZN2v88internal10JSFunction13SetInitialMapEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_3MapEEENS4_INS0_10HeapObjectEEES5_(%"class.v8::internal::Isolate"* %11, i64* %0, i64* %343, i64* %205, i64* %0) #6
  %344 = load i64, i64* %0, align 8
  %345 = add i64 %344, 15
  %346 = inttoptr i64 %345 to i32*
  %347 = load i32, i32* %346, align 4
  %348 = and i64 %344, -4294967296
  %349 = zext i32 %347 to i64
  %350 = or i64 %348, %349
  %351 = add i64 %350, -1
  %352 = inttoptr i64 %351 to i32*
  %353 = load atomic i32, i32* %352 monotonic, align 4
  %354 = zext i32 %353 to i64
  %355 = or i64 %348, %354
  %356 = add i64 %355, 19
  %357 = inttoptr i64 %356 to i32*
  %358 = load i32, i32* %357, align 4
  %359 = zext i32 %358 to i64
  %360 = or i64 %348, %359
  %361 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %277, align 8
  %362 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %361, null
  br i1 %362, label %366, label %363

363:                                              ; preds = %342
  %364 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %361, i64 %360) #6
  %365 = load i64, i64* %364, align 8
  br label %379

366:                                              ; preds = %342
  %367 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %11, i64 0, i32 31, i32 0
  %368 = load i64*, i64** %367, align 8
  %369 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %11, i64 0, i32 31, i32 1
  %370 = load i64*, i64** %369, align 8
  %371 = icmp eq i64* %368, %370
  br i1 %371, label %372, label %374

372:                                              ; preds = %366
  %373 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %11) #6
  br label %374

374:                                              ; preds = %372, %366
  %375 = phi i64* [ %373, %372 ], [ %368, %366 ]
  %376 = ptrtoint i64* %375 to i64
  %377 = add i64 %376, 8
  %378 = inttoptr i64 %377 to i64*
  store i64* %378, i64** %367, align 8
  store i64 %360, i64* %375, align 8
  br label %379

379:                                              ; preds = %374, %363
  %380 = phi i64 [ %365, %363 ], [ %360, %374 ]
  %381 = phi i64* [ %364, %363 ], [ %375, %374 ]
  %382 = and i64 %380, -4294967296
  %383 = add i64 %380, 179
  %384 = inttoptr i64 %383 to i32*
  %385 = load atomic i32, i32* %384 monotonic, align 4
  %386 = zext i32 %385 to i64
  %387 = or i64 %382, %386
  %388 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %277, align 8
  %389 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %388, null
  br i1 %389, label %393, label %390

390:                                              ; preds = %379
  %391 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %388, i64 %387) #6
  %392 = load i64, i64* %391, align 8
  br label %406

393:                                              ; preds = %379
  %394 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %11, i64 0, i32 31, i32 0
  %395 = load i64*, i64** %394, align 8
  %396 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %11, i64 0, i32 31, i32 1
  %397 = load i64*, i64** %396, align 8
  %398 = icmp eq i64* %395, %397
  br i1 %398, label %399, label %401

399:                                              ; preds = %393
  %400 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %11) #6
  br label %401

401:                                              ; preds = %399, %393
  %402 = phi i64* [ %400, %399 ], [ %395, %393 ]
  %403 = ptrtoint i64* %402 to i64
  %404 = add i64 %403, 8
  %405 = inttoptr i64 %404 to i64*
  store i64* %405, i64** %394, align 8
  store i64 %387, i64* %402, align 8
  br label %406

406:                                              ; preds = %401, %390
  %407 = phi i64 [ %392, %390 ], [ %387, %401 ]
  %408 = and i64 %407, 1
  %409 = icmp eq i64 %408, 0
  br i1 %409, label %429, label %410

410:                                              ; preds = %406
  %411 = and i64 %407, -4294967296
  %412 = add i64 %407, -1
  %413 = inttoptr i64 %412 to i32*
  %414 = load atomic i32, i32* %413 monotonic, align 4
  %415 = zext i32 %414 to i64
  %416 = or i64 %411, %415
  %417 = add i64 %416, 7
  %418 = inttoptr i64 %417 to i16*
  %419 = load atomic i16, i16* %418 monotonic, align 2
  %420 = add i16 %419, -1059
  %421 = icmp ult i16 %420, 15
  br i1 %421, label %422, label %429

422:                                              ; preds = %410
  %423 = load i64, i64* %0, align 8
  %424 = trunc i64 %423 to i32
  %425 = trunc i64 %407 to i32
  %426 = icmp eq i32 %424, %425
  br i1 %426, label %427, label %429

427:                                              ; preds = %422
  %428 = call i64* @_ZN2v88internal23CacheInitialJSArrayMapsEPNS0_7IsolateENS0_6HandleINS0_7ContextEEENS3_INS0_3MapEEE(%"class.v8::internal::Isolate"* %11, i64* %381, i64* %343) #6
  br label %429

429:                                              ; preds = %427, %422, %410, %406, %341, %334, %327
  %430 = bitcast %"class.v8::internal::DependentCode"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %430) #6
  %431 = load i64, i64* %296, align 8
  %432 = and i64 %431, -4294967296
  %433 = add i64 %431, 27
  %434 = inttoptr i64 %433 to i32*
  %435 = load i32, i32* %434, align 4
  %436 = zext i32 %435 to i64
  %437 = or i64 %432, %436
  %438 = getelementptr inbounds %"class.v8::internal::DependentCode", %"class.v8::internal::DependentCode"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %437, i64* %438, align 8
  call void @_ZN2v88internal13DependentCode28DeoptimizeDependentCodeGroupENS1_15DependencyGroupE(%"class.v8::internal::DependentCode"* nonnull %4, i32 6) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %430) #6
  br label %485

439:                                              ; preds = %204
  %440 = load i64, i64* %205, align 8
  %441 = add i64 %222, 27
  %442 = inttoptr i64 %441 to i32*
  %443 = trunc i64 %440 to i32
  store atomic volatile i32 %443, i32* %442 release, align 4
  %444 = and i64 %440, 1
  %445 = icmp eq i64 %444, 0
  br i1 %445, label %457, label %446

446:                                              ; preds = %439
  %447 = and i64 %222, -262144
  %448 = or i64 %447, 8
  %449 = inttoptr i64 %448 to i64*
  %450 = load i64, i64* %449, align 8
  %451 = and i64 %450, 262144
  %452 = icmp eq i64 %451, 0
  br i1 %452, label %457, label %453

453:                                              ; preds = %446
  %454 = or i64 %447, 16
  %455 = inttoptr i64 %454 to %"class.v8::internal::Heap"**
  %456 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %455, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %456, i64 %222, i64 %441, i64 %440) #6
  br label %457

457:                                              ; preds = %453, %446, %439
  %458 = and i64 %440, -262144
  %459 = or i64 %458, 8
  %460 = inttoptr i64 %459 to i64*
  %461 = load i64, i64* %460, align 8
  %462 = and i64 %461, 24
  %463 = icmp eq i64 %462, 0
  br i1 %463, label %472, label %464

464:                                              ; preds = %457
  %465 = and i64 %222, -262144
  %466 = or i64 %465, 8
  %467 = inttoptr i64 %466 to i64*
  %468 = load i64, i64* %467, align 8
  %469 = and i64 %468, 24
  %470 = icmp eq i64 %469, 0
  br i1 %470, label %471, label %472

471:                                              ; preds = %464
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %222, i64 %441, i64 %440) #6
  br label %472

472:                                              ; preds = %471, %464, %457
  %473 = load i64, i64* %205, align 8
  %474 = and i64 %473, -4294967296
  %475 = add i64 %473, -1
  %476 = inttoptr i64 %475 to i32*
  %477 = load atomic i32, i32* %476 monotonic, align 4
  %478 = zext i32 %477 to i64
  %479 = or i64 %474, %478
  %480 = add i64 %479, 7
  %481 = inttoptr i64 %480 to i16*
  %482 = load atomic i16, i16* %481 monotonic, align 2
  %483 = icmp ugt i16 %482, 188
  br i1 %483, label %484, label %485

484:                                              ; preds = %472
  tail call void @_ZN2v88internal8JSObject19OptimizeAsPrototypeENS0_6HandleIS1_EEb(i64* %205, i1 zeroext true) #6
  br label %485

485:                                              ; preds = %429, %472, %484
  ret void
}

declare i64* @_ZN2v88internal3Map4CopyEPNS0_7IsolateENS0_6HandleIS1_EEPKc(%"class.v8::internal::Isolate"*, i64*, i8*) local_unnamed_addr #2

declare void @_ZN2v88internal8JSObject12MigrateToMapEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_3MapEEEi(%"class.v8::internal::Isolate"*, i64*, i64*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal10JSFunction13SetInitialMapEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_3MapEEENS4_INS0_10HeapObjectEEE(%"class.v8::internal::Isolate"*, i64*, i64*, i64*) local_unnamed_addr #0 align 2 {
  tail call void @_ZN2v88internal10JSFunction13SetInitialMapEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_3MapEEENS4_INS0_10HeapObjectEEES5_(%"class.v8::internal::Isolate"* %0, i64* %1, i64* %2, i64* %3, i64* %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal10JSFunction13SetInitialMapEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_3MapEEENS4_INS0_10HeapObjectEEES5_(%"class.v8::internal::Isolate"*, i64*, i64*, i64*, i64*) local_unnamed_addr #0 align 2 {
  %6 = load i64, i64* %2, align 8
  %7 = add i64 %6, 15
  %8 = inttoptr i64 %7 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = load i64, i64* %3, align 8
  %11 = trunc i64 %10 to i32
  %12 = icmp eq i32 %9, %11
  br i1 %12, label %15, label %13

13:                                               ; preds = %5
  tail call void @_ZN2v88internal3Map12SetPrototypeEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_10HeapObjectEEEb(%"class.v8::internal::Isolate"* %0, i64* %2, i64* %3, i1 zeroext true) #6
  %14 = load i64, i64* %2, align 8
  br label %15

15:                                               ; preds = %5, %13
  %16 = phi i64 [ %6, %5 ], [ %14, %13 ]
  %17 = load i64, i64* %4, align 8
  %18 = and i64 %16, -4294967296
  %19 = add i64 %16, 19
  %20 = inttoptr i64 %19 to i32*
  %21 = load i32, i32* %20, align 4
  %22 = zext i32 %21 to i64
  %23 = and i64 %22, 1
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %37, label %25

25:                                               ; preds = %15
  %26 = or i64 %18, %22
  %27 = add i64 %26, -1
  %28 = inttoptr i64 %27 to i32*
  %29 = load atomic i32, i32* %28 monotonic, align 4
  %30 = zext i32 %29 to i64
  %31 = or i64 %18, %30
  %32 = add i64 %31, 7
  %33 = inttoptr i64 %32 to i16*
  %34 = load atomic i16, i16* %33 monotonic, align 2
  %35 = icmp eq i16 %34, 172
  br i1 %35, label %36, label %37, !prof !5

36:                                               ; preds = %25
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.15, i64 0, i64 0)) #8
  unreachable

37:                                               ; preds = %25, %15
  %38 = trunc i64 %17 to i32
  store atomic volatile i32 %38, i32* %20 monotonic, align 4
  %39 = and i64 %17, 1
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %64, label %41

41:                                               ; preds = %37
  %42 = and i64 %16, -262144
  %43 = or i64 %42, 8
  %44 = inttoptr i64 %43 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = and i64 %45, 262144
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %52, label %48

48:                                               ; preds = %41
  %49 = or i64 %42, 16
  %50 = inttoptr i64 %49 to %"class.v8::internal::Heap"**
  %51 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %50, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %51, i64 %16, i64 %19, i64 %17) #6
  br label %52

52:                                               ; preds = %48, %41
  %53 = and i64 %17, -262144
  %54 = or i64 %53, 8
  %55 = inttoptr i64 %54 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = and i64 %56, 24
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %64, label %59

59:                                               ; preds = %52
  %60 = load i64, i64* %44, align 8
  %61 = and i64 %60, 24
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %64

63:                                               ; preds = %59
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %16, i64 %19, i64 %17) #6
  br label %64

64:                                               ; preds = %37, %52, %59, %63
  %65 = load i64, i64* %1, align 8
  %66 = load i64, i64* %2, align 8
  %67 = add i64 %65, 27
  %68 = inttoptr i64 %67 to i32*
  %69 = trunc i64 %66 to i32
  store atomic volatile i32 %69, i32* %68 release, align 4
  %70 = and i64 %66, 1
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %83, label %72

72:                                               ; preds = %64
  %73 = and i64 %65, -262144
  %74 = or i64 %73, 8
  %75 = inttoptr i64 %74 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = and i64 %76, 262144
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %83, label %79

79:                                               ; preds = %72
  %80 = or i64 %73, 16
  %81 = inttoptr i64 %80 to %"class.v8::internal::Heap"**
  %82 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %81, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %82, i64 %65, i64 %67, i64 %66) #6
  br label %83

83:                                               ; preds = %79, %72, %64
  %84 = and i64 %66, -262144
  %85 = or i64 %84, 8
  %86 = inttoptr i64 %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = and i64 %87, 24
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %98, label %90

90:                                               ; preds = %83
  %91 = and i64 %65, -262144
  %92 = or i64 %91, 8
  %93 = inttoptr i64 %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = and i64 %94, 24
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %97, label %98

97:                                               ; preds = %90
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %65, i64 %67, i64 %66) #6
  br label %98

98:                                               ; preds = %83, %90, %97
  %99 = load i8, i8* @_ZN2v88internal13FLAG_log_mapsE, align 1, !range !2
  %100 = icmp eq i8 %99, 0
  %101 = load i8, i8* @_ZN2v88internal8FLAG_logE, align 1
  %102 = icmp eq i8 %101, 0
  %103 = or i1 %100, %102
  br i1 %103, label %135, label %104

104:                                              ; preds = %98
  %105 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 21
  %106 = load %"class.v8::internal::Logger"*, %"class.v8::internal::Logger"** %105, align 8
  %107 = load i64, i64* %1, align 8
  %108 = add i64 %107, 11
  %109 = inttoptr i64 %108 to i32*
  %110 = load atomic i32, i32* %109 monotonic, align 4
  %111 = and i64 %107, -4294967296
  %112 = zext i32 %110 to i64
  %113 = or i64 %111, %112
  %114 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %115 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %114, align 8
  %116 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %115, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %104
  %118 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %115, i64 %113) #6
  br label %132

119:                                              ; preds = %104
  %120 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %121 = load i64*, i64** %120, align 8
  %122 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %123 = load i64*, i64** %122, align 8
  %124 = icmp eq i64* %121, %123
  br i1 %124, label %125, label %127

125:                                              ; preds = %119
  %126 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %127

127:                                              ; preds = %125, %119
  %128 = phi i64* [ %126, %125 ], [ %121, %119 ]
  %129 = ptrtoint i64* %128 to i64
  %130 = add i64 %129, 8
  %131 = inttoptr i64 %130 to i64*
  store i64* %131, i64** %120, align 8
  store i64 %113, i64* %128, align 8
  br label %132

132:                                              ; preds = %117, %127
  %133 = phi i64* [ %118, %117 ], [ %128, %127 ]
  %134 = tail call i64* @_ZN2v88internal18SharedFunctionInfo9DebugNameENS0_6HandleIS1_EE(i64* %133) #6
  tail call void @_ZN2v88internal6Logger8MapEventEPKcNS0_6HandleINS0_3MapEEES6_S3_NS4_INS0_10HeapObjectEEE(%"class.v8::internal::Logger"* %106, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i64* null, i64* %2, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.5, i64 0, i64 0), i64* %134) #6
  br label %135

135:                                              ; preds = %98, %132
  ret void
}

declare void @_ZN2v88internal3Map12SetPrototypeEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_10HeapObjectEEEb(%"class.v8::internal::Isolate"*, i64*, i64*, i1 zeroext) local_unnamed_addr #2

declare void @_ZN2v88internal6Logger8MapEventEPKcNS0_6HandleINS0_3MapEEES6_S3_NS4_INS0_10HeapObjectEEE(%"class.v8::internal::Logger"*, i8*, i64*, i64*, i8*, i64*) local_unnamed_addr #2

declare i64* @_ZN2v88internal18SharedFunctionInfo9DebugNameENS0_6HandleIS1_EE(i64*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal10JSFunction19EnsureHasInitialMapENS0_6HandleIS1_EE(i64*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", align 8
  %3 = load i64, i64* %0, align 8
  %4 = and i64 %3, -4294967296
  %5 = add i64 %3, 27
  %6 = inttoptr i64 %5 to i32*
  %7 = load atomic i32, i32* %6 acquire, align 4
  %8 = zext i32 %7 to i64
  %9 = or i64 %4, %8
  %10 = add i64 %9, -1
  %11 = inttoptr i64 %10 to i32*
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = zext i32 %12 to i64
  %14 = or i64 %4, %13
  %15 = add i64 %14, 7
  %16 = inttoptr i64 %15 to i16*
  %17 = load atomic i16, i16* %16 monotonic, align 2
  %18 = icmp eq i16 %17, 172
  br i1 %18, label %189, label %19

19:                                               ; preds = %1
  %20 = load i64, i64* %0, align 8
  %21 = and i64 %20, -262144
  %22 = or i64 %21, 16
  %23 = inttoptr i64 %22 to i64*
  %24 = load i64, i64* %23, align 16
  %25 = add i64 %24, -41416
  %26 = inttoptr i64 %25 to %"class.v8::internal::Isolate"*
  %27 = tail call i32 @_ZN2v88internal10JSFunction30CalculateExpectedNofPropertiesEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"* %26, i64* %0)
  %28 = load i64, i64* %0, align 8
  %29 = and i64 %28, -4294967296
  %30 = add i64 %28, 27
  %31 = inttoptr i64 %30 to i32*
  %32 = load atomic i32, i32* %31 acquire, align 4
  %33 = zext i32 %32 to i64
  %34 = or i64 %29, %33
  %35 = add i64 %34, -1
  %36 = inttoptr i64 %35 to i32*
  %37 = load atomic i32, i32* %36 monotonic, align 4
  %38 = zext i32 %37 to i64
  %39 = or i64 %29, %38
  %40 = add i64 %39, 7
  %41 = inttoptr i64 %40 to i16*
  %42 = load atomic i16, i16* %41 monotonic, align 2
  %43 = icmp eq i16 %42, 172
  br i1 %43, label %189, label %44

44:                                               ; preds = %19
  %45 = load i64, i64* %0, align 8
  %46 = add i64 %45, 11
  %47 = inttoptr i64 %46 to i32*
  %48 = load atomic i32, i32* %47 monotonic, align 4
  %49 = and i64 %45, -4294967296
  %50 = zext i32 %48 to i64
  %51 = or i64 %49, %50
  %52 = add i64 %51, 27
  %53 = inttoptr i64 %52 to i32*
  %54 = load atomic i32, i32* %53 monotonic, align 4
  %55 = trunc i32 %54 to i8
  %56 = and i8 %55, 31
  %57 = add nsw i8 %56, -12
  %58 = icmp ult i8 %57, 10
  %59 = add nsw i8 %56, -1
  %60 = icmp ult i8 %59, 2
  %61 = or i1 %58, %60
  br i1 %61, label %62, label %74

62:                                               ; preds = %44
  %63 = load atomic i32, i32* %47 monotonic, align 4
  %64 = zext i32 %63 to i64
  %65 = or i64 %49, %64
  %66 = add i64 %65, 27
  %67 = inttoptr i64 %66 to i32*
  %68 = load atomic i32, i32* %67 monotonic, align 4
  %69 = trunc i32 %68 to i8
  %70 = and i8 %69, 31
  %71 = add nsw i8 %70, -16
  %72 = icmp ult i8 %71, 3
  %73 = select i1 %72, i16 1054, i16 1052
  br label %74

74:                                               ; preds = %44, %62
  %75 = phi i16 [ %73, %62 ], [ 1057, %44 ]
  %76 = tail call i32 @_ZN2v88internal8JSObject13GetHeaderSizeENS0_12InstanceTypeEb(i16 zeroext %75, i1 zeroext false) #6
  %77 = sub nsw i32 1020, %76
  %78 = ashr i32 %77, 2
  %79 = icmp sgt i32 %76, 8
  br i1 %79, label %81, label %80, !prof !3

80:                                               ; preds = %74
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.10, i64 0, i64 0)) #8
  unreachable

81:                                               ; preds = %74
  %82 = icmp slt i32 %78, %27
  %83 = select i1 %82, i32 %78, i32 %27
  %84 = shl i32 %83, 2
  %85 = add nsw i32 %84, %76
  %86 = add i32 %83, 536870912
  %87 = icmp ult i32 %86, 1073741824
  br i1 %87, label %89, label %88, !prof !3

88:                                               ; preds = %81
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0)) #8
  unreachable

89:                                               ; preds = %81
  %90 = icmp ult i32 %85, 1021
  br i1 %90, label %92, label %91, !prof !3

91:                                               ; preds = %89
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([91 x i8], [91 x i8]* @.str.13, i64 0, i64 0)) #8
  unreachable

92:                                               ; preds = %89
  %93 = inttoptr i64 %25 to %"class.v8::internal::Factory"*
  %94 = tail call i64* @_ZN2v88internal7Factory6NewMapENS0_12InstanceTypeEiNS0_12ElementsKindEi(%"class.v8::internal::Factory"* %93, i16 zeroext %75, i32 %85, i8 zeroext 3, i32 %83) #6
  %95 = load i64, i64* %0, align 8
  %96 = and i64 %95, -4294967296
  %97 = add i64 %95, 27
  %98 = inttoptr i64 %97 to i32*
  %99 = load atomic i32, i32* %98 acquire, align 4
  %100 = zext i32 %99 to i64
  %101 = or i64 %96, %100
  %102 = add i64 %101, -1
  %103 = inttoptr i64 %102 to i32*
  %104 = load atomic i32, i32* %103 monotonic, align 4
  %105 = zext i32 %104 to i64
  %106 = or i64 %96, %105
  %107 = add i64 %106, 7
  %108 = inttoptr i64 %107 to i16*
  %109 = load atomic i16, i16* %108 monotonic, align 2
  %110 = icmp eq i16 %109, 172
  br i1 %110, label %135, label %111

111:                                              ; preds = %92
  %112 = load atomic i32, i32* %98 acquire, align 4
  %113 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %114 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %113, null
  br i1 %114, label %121, label %115

115:                                              ; preds = %111
  %116 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %113, i64 0, i32 0, i32 1
  %117 = load i8, i8* %116, align 8, !range !2
  %118 = icmp eq i8 %117, 0
  br i1 %118, label %121, label %119

119:                                              ; preds = %115
  %120 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %113, i64 0, i32 1, i64 0
  br label %129

121:                                              ; preds = %115, %111
  %122 = and i64 %95, -262144
  %123 = or i64 %122, 16
  %124 = inttoptr i64 %123 to i64*
  %125 = load i64, i64* %124, align 16
  %126 = add i64 %125, -41416
  %127 = inttoptr i64 %126 to %"class.v8::internal::Isolate"*
  %128 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %127, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %129

129:                                              ; preds = %119, %121
  %130 = phi i64* [ %128, %121 ], [ %120, %119 ]
  %131 = getelementptr inbounds i64, i64* %130, i64 5
  %132 = load i64, i64* %131, align 8
  %133 = trunc i64 %132 to i32
  %134 = icmp eq i32 %112, %133
  br i1 %134, label %181, label %135

135:                                              ; preds = %129, %92
  %136 = load i64, i64* %0, align 8
  %137 = and i64 %136, -4294967296
  %138 = add i64 %136, 27
  %139 = inttoptr i64 %138 to i32*
  %140 = load atomic i32, i32* %139 acquire, align 4
  %141 = zext i32 %140 to i64
  %142 = or i64 %137, %141
  %143 = add i64 %142, -1
  %144 = inttoptr i64 %143 to i32*
  %145 = load atomic i32, i32* %144 monotonic, align 4
  %146 = zext i32 %145 to i64
  %147 = or i64 %137, %146
  %148 = add i64 %147, 7
  %149 = inttoptr i64 %148 to i16*
  %150 = load atomic i16, i16* %149 monotonic, align 2
  %151 = icmp eq i16 %150, 172
  %152 = load atomic i32, i32* %139 acquire, align 4
  %153 = zext i32 %152 to i64
  %154 = or i64 %137, %153
  br i1 %151, label %155, label %161

155:                                              ; preds = %135
  %156 = add i64 %154, 15
  %157 = inttoptr i64 %156 to i32*
  %158 = load i32, i32* %157, align 4
  %159 = zext i32 %158 to i64
  %160 = or i64 %137, %159
  br label %161

161:                                              ; preds = %135, %155
  %162 = phi i64 [ %160, %155 ], [ %154, %135 ]
  %163 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %26, i64 0, i32 31, i32 4
  %164 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %163, align 8
  %165 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %164, null
  br i1 %165, label %168, label %166

166:                                              ; preds = %161
  %167 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %164, i64 %162) #6
  br label %183

168:                                              ; preds = %161
  %169 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %26, i64 0, i32 31, i32 0
  %170 = load i64*, i64** %169, align 8
  %171 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %26, i64 0, i32 31, i32 1
  %172 = load i64*, i64** %171, align 8
  %173 = icmp eq i64* %170, %172
  br i1 %173, label %174, label %176

174:                                              ; preds = %168
  %175 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %26) #6
  br label %176

176:                                              ; preds = %174, %168
  %177 = phi i64* [ %175, %174 ], [ %170, %168 ]
  %178 = ptrtoint i64* %177 to i64
  %179 = add i64 %178, 8
  %180 = inttoptr i64 %179 to i64*
  store i64* %180, i64** %169, align 8
  store i64 %162, i64* %177, align 8
  br label %183

181:                                              ; preds = %129
  %182 = tail call i64* @_ZN2v88internal7Factory20NewFunctionPrototypeENS0_6HandleINS0_10JSFunctionEEE(%"class.v8::internal::Factory"* %93, i64* %0) #6
  br label %183

183:                                              ; preds = %176, %166, %181
  %184 = phi i64* [ %182, %181 ], [ %167, %166 ], [ %177, %176 ]
  tail call void @_ZN2v88internal10JSFunction13SetInitialMapEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_3MapEEENS4_INS0_10HeapObjectEEES5_(%"class.v8::internal::Isolate"* %26, i64* %0, i64* %94, i64* %184, i64* %0) #6
  %185 = bitcast %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %185) #6
  %186 = load i64, i64* %94, align 8
  %187 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %186, i64* %187, align 8
  %188 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %2, i64 0, i32 0
  call void @_ZN2v88internal3Map26StartInobjectSlackTrackingEv(%"class.v8::internal::Map"* nonnull %188) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %185) #6
  br label %189

189:                                              ; preds = %183, %19, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal10JSFunction30CalculateExpectedNofPropertiesEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"*, i64*) local_unnamed_addr #0 align 2 {
  %3 = alloca { i64*, i8 }, align 8
  %4 = alloca %"class.v8::internal::PrototypeIterator", align 8
  %5 = alloca { i64*, i8 }, align 8
  %6 = bitcast { i64*, i8 }* %5 to %"class.v8::internal::IsCompiledScope"*
  %7 = bitcast %"class.v8::internal::PrototypeIterator"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %7) #6
  %8 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %4, i64 0, i32 0
  store %"class.v8::internal::Isolate"* %0, %"class.v8::internal::Isolate"** %8, align 8
  %9 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %4, i64 0, i32 1, i32 0, i32 0
  store i64 0, i64* %9, align 8
  %10 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %4, i64 0, i32 2, i32 0, i32 0
  store i64* %1, i64** %10, align 8
  %11 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %4, i64 0, i32 3
  store i32 0, i32* %11, align 8
  %12 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %4, i64 0, i32 4
  store i8 0, i8* %12, align 4
  %13 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %4, i64 0, i32 6
  store i32 0, i32* %13, align 8
  %14 = icmp eq i64* %1, null
  br i1 %14, label %38, label %15, !prof !5

15:                                               ; preds = %2
  %16 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %17 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %18 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %19 = bitcast { i64*, i8 }* %5 to i8*
  %20 = bitcast { i64*, i8 }* %3 to i8*
  %21 = bitcast { i64*, i8 }* %3 to %"class.v8::internal::IsCompiledScope"*
  %22 = bitcast { i64*, i8 }* %3 to i64*
  %23 = getelementptr inbounds { i64*, i8 }, { i64*, i8 }* %3, i64 0, i32 1
  %24 = bitcast { i64*, i8 }* %5 to i64*
  %25 = getelementptr inbounds { i64*, i8 }, { i64*, i8 }* %5, i64 0, i32 1
  %26 = load i64, i64* %1, align 8
  %27 = and i64 %26, -4294967296
  %28 = add i64 %26, -1
  %29 = inttoptr i64 %28 to i32*
  %30 = load atomic i32, i32* %29 monotonic, align 4
  %31 = zext i32 %30 to i64
  %32 = or i64 %27, %31
  %33 = add i64 %32, 7
  %34 = inttoptr i64 %33 to i16*
  %35 = load atomic i16, i16* %34 monotonic, align 2
  %36 = add i16 %35, -1059
  %37 = icmp ult i16 %36, 15
  br i1 %37, label %39, label %103

38:                                               ; preds = %2
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.22, i64 0, i64 0)) #8
  unreachable

39:                                               ; preds = %15, %88
  %40 = phi i64 [ %91, %88 ], [ %27, %15 ]
  %41 = phi i64 [ %90, %88 ], [ %26, %15 ]
  %42 = phi i32 [ %85, %88 ], [ 0, %15 ]
  %43 = phi i64* [ %89, %88 ], [ %1, %15 ]
  %44 = add i64 %41, 11
  %45 = inttoptr i64 %44 to i32*
  %46 = load atomic i32, i32* %45 monotonic, align 4
  %47 = zext i32 %46 to i64
  %48 = or i64 %40, %47
  %49 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %16, align 8
  %50 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %49, null
  br i1 %50, label %54, label %51

51:                                               ; preds = %39
  %52 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %49, i64 %48) #6
  %53 = load i64, i64* %52, align 8
  br label %65

54:                                               ; preds = %39
  %55 = load i64*, i64** %17, align 8
  %56 = load i64*, i64** %18, align 8
  %57 = icmp eq i64* %55, %56
  br i1 %57, label %58, label %60

58:                                               ; preds = %54
  %59 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %60

60:                                               ; preds = %58, %54
  %61 = phi i64* [ %59, %58 ], [ %55, %54 ]
  %62 = ptrtoint i64* %61 to i64
  %63 = add i64 %62, 8
  %64 = inttoptr i64 %63 to i64*
  store i64* %64, i64** %17, align 8
  store i64 %48, i64* %61, align 8
  br label %65

65:                                               ; preds = %51, %60
  %66 = phi i64 [ %53, %51 ], [ %48, %60 ]
  %67 = phi i64* [ %52, %51 ], [ %61, %60 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %19) #6
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %20)
  call void @_ZN2v88internal15IsCompiledScopeC2ENS0_18SharedFunctionInfoEPNS0_7IsolateE(%"class.v8::internal::IsCompiledScope"* nonnull %21, i64 %66, %"class.v8::internal::Isolate"* %0) #6
  %68 = load i64, i64* %22, align 8
  %69 = load i8, i8* %23, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %20)
  store i64 %68, i64* %24, align 8
  store i8 %69, i8* %25, align 8
  %70 = icmp eq i8 %69, 0
  br i1 %70, label %71, label %74

71:                                               ; preds = %65
  %72 = call zeroext i1 @_ZN2v88internal8Compiler7CompileEPNS0_7IsolateENS0_6HandleINS0_10JSFunctionEEENS1_18ClearExceptionFlagEPNS0_15IsCompiledScopeE(%"class.v8::internal::Isolate"* %0, i64* %43, i32 1, %"class.v8::internal::IsCompiledScope"* nonnull %6) #6
  br i1 %72, label %74, label %73

73:                                               ; preds = %71
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %19) #6
  br label %84

74:                                               ; preds = %65, %71
  %75 = load i64, i64* %67, align 8
  %76 = add i64 %75, 25
  %77 = inttoptr i64 %76 to i8*
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i32
  %80 = sub nsw i32 252, %79
  %81 = icmp sgt i32 %42, %80
  %82 = select i1 %81, i32 0, i32 %79
  %83 = add nsw i32 %82, %42
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %19) #6
  br i1 %81, label %102, label %84

84:                                               ; preds = %74, %73
  %85 = phi i32 [ %42, %73 ], [ %83, %74 ]
  call void @_ZN2v88internal17PrototypeIterator7AdvanceEv(%"class.v8::internal::PrototypeIterator"* nonnull %4)
  %86 = load i8, i8* %12, align 4
  %87 = icmp eq i8 %86, 0
  br i1 %87, label %88, label %103

88:                                               ; preds = %84
  %89 = load i64*, i64** %10, align 8
  %90 = load i64, i64* %89, align 8
  %91 = and i64 %90, -4294967296
  %92 = add i64 %90, -1
  %93 = inttoptr i64 %92 to i32*
  %94 = load atomic i32, i32* %93 monotonic, align 4
  %95 = zext i32 %94 to i64
  %96 = or i64 %91, %95
  %97 = add i64 %96, 7
  %98 = inttoptr i64 %97 to i16*
  %99 = load atomic i16, i16* %98 monotonic, align 2
  %100 = add i16 %99, -1059
  %101 = icmp ult i16 %100, 15
  br i1 %101, label %39, label %103

102:                                              ; preds = %74
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %7) #6
  br label %110

103:                                              ; preds = %88, %84, %15
  %104 = phi i32 [ 0, %15 ], [ %85, %84 ], [ %85, %88 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %7) #6
  %105 = icmp sgt i32 %104, 0
  br i1 %105, label %106, label %110

106:                                              ; preds = %103
  %107 = icmp slt i32 %104, 244
  %108 = select i1 %107, i32 %104, i32 244
  %109 = add nuw nsw i32 %108, 8
  br label %110

110:                                              ; preds = %102, %103, %106
  %111 = phi i32 [ 252, %102 ], [ %109, %106 ], [ %104, %103 ]
  ret i32 %111
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal10JSFunction27CalculateInstanceSizeHelperENS0_12InstanceTypeEbiiPiS3_(i16 zeroext, i1 zeroext, i32, i32, i32* nocapture, i32* nocapture) local_unnamed_addr #0 align 2 {
  %7 = tail call i32 @_ZN2v88internal8JSObject13GetHeaderSizeENS0_12InstanceTypeEb(i16 zeroext %0, i1 zeroext %1) #6
  %8 = icmp eq i32 %2, 0
  br i1 %8, label %13, label %9

9:                                                ; preds = %6
  %10 = add i32 %7, 7
  %11 = and i32 %10, -8
  %12 = shl nsw i32 %2, 1
  br label %13

13:                                               ; preds = %6, %9
  %14 = phi i32 [ %11, %9 ], [ %7, %6 ]
  %15 = phi i32 [ %12, %9 ], [ 0, %6 ]
  %16 = sub nsw i32 1020, %14
  %17 = ashr i32 %16, 2
  %18 = icmp sgt i32 %14, 8
  br i1 %18, label %20, label %19, !prof !3

19:                                               ; preds = %13
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.10, i64 0, i64 0)) #8
  unreachable

20:                                               ; preds = %13
  %21 = icmp ult i32 %17, %15
  br i1 %21, label %22, label %23, !prof !5

22:                                               ; preds = %20
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([90 x i8], [90 x i8]* @.str.11, i64 0, i64 0)) #8
  unreachable

23:                                               ; preds = %20
  %24 = sub nsw i32 %17, %15
  %25 = icmp slt i32 %24, %3
  %26 = select i1 %25, i32 %24, i32 %3
  store i32 %26, i32* %5, align 4
  %27 = add nsw i32 %26, %15
  %28 = shl i32 %27, 2
  %29 = add nsw i32 %28, %14
  store i32 %29, i32* %4, align 4
  %30 = load i32, i32* %5, align 4
  %31 = ashr exact i32 %28, 2
  %32 = sub nsw i32 %31, %15
  %33 = icmp eq i32 %30, %32
  br i1 %33, label %35, label %34, !prof !3

34:                                               ; preds = %23
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0)) #8
  unreachable

35:                                               ; preds = %23
  %36 = icmp ult i32 %29, 1021
  br i1 %36, label %38, label %37, !prof !3

37:                                               ; preds = %35
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([91 x i8], [91 x i8]* @.str.13, i64 0, i64 0)) #8
  unreachable

38:                                               ; preds = %35
  ret void
}

declare i64* @_ZN2v88internal7Factory6NewMapENS0_12InstanceTypeEiNS0_12ElementsKindEi(%"class.v8::internal::Factory"*, i16 zeroext, i32, i8 zeroext, i32) local_unnamed_addr #2

declare i64* @_ZN2v88internal7Factory20NewFunctionPrototypeENS0_6HandleINS0_10JSFunctionEEE(%"class.v8::internal::Factory"*, i64*) local_unnamed_addr #2

declare void @_ZN2v88internal3Map26StartInobjectSlackTrackingEv(%"class.v8::internal::Map"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal10JSFunction13GetDerivedMapEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_10JSReceiverEEE(%"class.v8::internal::Isolate"*, i64*, i64*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.v8::internal::LookupIterator", align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", align 8
  %8 = alloca %"class.v8::internal::Handle<v8::internal::JSFunction>::ObjectRef", align 8
  %9 = alloca %"class.v8::internal::Handle<v8::internal::JSFunction>::ObjectRef", align 8
  tail call void @_ZN2v88internal10JSFunction19EnsureHasInitialMapENS0_6HandleIS1_EE(i64* %1)
  %10 = load i64, i64* %1, align 8
  %11 = and i64 %10, -4294967296
  %12 = add i64 %10, 27
  %13 = inttoptr i64 %12 to i32*
  %14 = load atomic i32, i32* %13 acquire, align 4
  %15 = zext i32 %14 to i64
  %16 = or i64 %11, %15
  %17 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %18 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %17, align 8
  %19 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %18, null
  br i1 %19, label %22, label %20

20:                                               ; preds = %3
  %21 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %18, i64 %16) #6
  br label %35

22:                                               ; preds = %3
  %23 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %24 = load i64*, i64** %23, align 8
  %25 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %26 = load i64*, i64** %25, align 8
  %27 = icmp eq i64* %24, %26
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %30

30:                                               ; preds = %28, %22
  %31 = phi i64* [ %29, %28 ], [ %24, %22 ]
  %32 = ptrtoint i64* %31 to i64
  %33 = add i64 %32, 8
  %34 = inttoptr i64 %33 to i64*
  store i64* %34, i64** %23, align 8
  store i64 %16, i64* %31, align 8
  br label %35

35:                                               ; preds = %20, %30
  %36 = phi i64* [ %21, %20 ], [ %31, %30 ]
  %37 = load i64, i64* %2, align 8
  %38 = load i64, i64* %1, align 8
  %39 = trunc i64 %37 to i32
  %40 = trunc i64 %38 to i32
  %41 = icmp eq i32 %39, %40
  br i1 %41, label %42, label %44

42:                                               ; preds = %35
  %43 = ptrtoint i64* %36 to i64
  br label %702

44:                                               ; preds = %35
  %45 = and i64 %37, -4294967296
  %46 = add i64 %37, -1
  %47 = inttoptr i64 %46 to i32*
  %48 = load atomic i32, i32* %47 monotonic, align 4
  %49 = zext i32 %48 to i64
  %50 = or i64 %45, %49
  %51 = add i64 %50, 7
  %52 = inttoptr i64 %51 to i16*
  %53 = load atomic i16, i16* %52 monotonic, align 2
  %54 = add i16 %53, -1059
  %55 = icmp ult i16 %54, 15
  br i1 %55, label %56, label %362

56:                                               ; preds = %44
  %57 = load atomic i32, i32* %47 monotonic, align 4
  %58 = zext i32 %57 to i64
  %59 = or i64 %45, %58
  %60 = add i64 %59, 9
  %61 = inttoptr i64 %60 to i8*
  %62 = load atomic i8, i8* %61 monotonic, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %362

64:                                               ; preds = %56
  %65 = add i64 %37, 27
  %66 = inttoptr i64 %65 to i32*
  %67 = load atomic i32, i32* %66 acquire, align 4
  %68 = zext i32 %67 to i64
  %69 = or i64 %45, %68
  %70 = add i64 %69, -1
  %71 = inttoptr i64 %70 to i32*
  %72 = load atomic i32, i32* %71 monotonic, align 4
  %73 = zext i32 %72 to i64
  %74 = or i64 %45, %73
  %75 = add i64 %74, 7
  %76 = inttoptr i64 %75 to i16*
  %77 = load atomic i16, i16* %76 monotonic, align 2
  %78 = icmp eq i16 %77, 172
  br i1 %78, label %79, label %170

79:                                               ; preds = %64
  %80 = load i64, i64* %2, align 8
  %81 = and i64 %80, -4294967296
  %82 = add i64 %80, 27
  %83 = inttoptr i64 %82 to i32*
  %84 = load atomic i32, i32* %83 acquire, align 4
  %85 = zext i32 %84 to i64
  %86 = or i64 %81, %85
  %87 = add i64 %86, 19
  %88 = inttoptr i64 %87 to i32*
  %89 = load i32, i32* %88, align 4
  %90 = zext i32 %89 to i64
  %91 = or i64 %81, %90
  %92 = and i64 %90, 1
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %164, label %94

94:                                               ; preds = %79
  %95 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %96 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %95, null
  %97 = and i64 %86, -262144
  %98 = or i64 %97, 16
  %99 = inttoptr i64 %98 to i64*
  br i1 %96, label %129, label %100

100:                                              ; preds = %94
  %101 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %95, i64 0, i32 0, i32 1
  %102 = load i8, i8* %101, align 8, !range !2
  %103 = icmp eq i8 %102, 0
  br i1 %103, label %108, label %104

104:                                              ; preds = %100
  %105 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %95, i64 0, i32 1, i64 10
  %106 = load i64, i64* %105, align 8
  %107 = trunc i64 %106 to i32
  br label %150

108:                                              ; preds = %100
  %109 = load i64, i64* %99, align 16
  %110 = add i64 %109, -41416
  %111 = inttoptr i64 %110 to %"class.v8::internal::Isolate"*
  %112 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %111, i64 0, i32 0, i32 7, i32 0, i64 10
  %113 = load i64, i64* %112, align 8
  %114 = trunc i64 %113 to i32
  br label %115

115:                                              ; preds = %121, %108
  %116 = phi i64 [ %126, %121 ], [ %91, %108 ]
  %117 = add i64 %116, -1
  %118 = inttoptr i64 %117 to i32*
  %119 = load atomic i32, i32* %118 monotonic, align 4
  %120 = icmp eq i32 %119, %114
  br i1 %120, label %121, label %164

121:                                              ; preds = %115
  %122 = add i64 %116, 19
  %123 = inttoptr i64 %122 to i32*
  %124 = load i32, i32* %123, align 4
  %125 = zext i32 %124 to i64
  %126 = or i64 %81, %125
  %127 = and i64 %125, 1
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %164, label %115

129:                                              ; preds = %94
  %130 = load i64, i64* %99, align 16
  %131 = add i64 %130, -41416
  %132 = inttoptr i64 %131 to %"class.v8::internal::Isolate"*
  %133 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %132, i64 0, i32 0, i32 7, i32 0, i64 10
  %134 = load i64, i64* %133, align 8
  %135 = trunc i64 %134 to i32
  br label %136

136:                                              ; preds = %142, %129
  %137 = phi i64 [ %147, %142 ], [ %91, %129 ]
  %138 = add i64 %137, -1
  %139 = inttoptr i64 %138 to i32*
  %140 = load atomic i32, i32* %139 monotonic, align 4
  %141 = icmp eq i32 %140, %135
  br i1 %141, label %142, label %164

142:                                              ; preds = %136
  %143 = add i64 %137, 19
  %144 = inttoptr i64 %143 to i32*
  %145 = load i32, i32* %144, align 4
  %146 = zext i32 %145 to i64
  %147 = or i64 %81, %146
  %148 = and i64 %146, 1
  %149 = icmp eq i64 %148, 0
  br i1 %149, label %164, label %136

150:                                              ; preds = %156, %104
  %151 = phi i64 [ %161, %156 ], [ %91, %104 ]
  %152 = add i64 %151, -1
  %153 = inttoptr i64 %152 to i32*
  %154 = load atomic i32, i32* %153 monotonic, align 4
  %155 = icmp eq i32 %154, %107
  br i1 %155, label %156, label %164

156:                                              ; preds = %150
  %157 = add i64 %151, 19
  %158 = inttoptr i64 %157 to i32*
  %159 = load i32, i32* %158, align 4
  %160 = zext i32 %159 to i64
  %161 = or i64 %81, %160
  %162 = and i64 %160, 1
  %163 = icmp eq i64 %162, 0
  br i1 %163, label %164, label %150

164:                                              ; preds = %156, %150, %121, %115, %142, %136, %79
  %165 = phi i64 [ %91, %79 ], [ %137, %136 ], [ %147, %142 ], [ %126, %121 ], [ %116, %115 ], [ %161, %156 ], [ %151, %150 ]
  %166 = load i64, i64* %1, align 8
  %167 = trunc i64 %165 to i32
  %168 = trunc i64 %166 to i32
  %169 = icmp eq i32 %167, %168
  br i1 %169, label %336, label %170

170:                                              ; preds = %164, %64
  %171 = load i64, i64* %36, align 8
  %172 = add i64 %171, 7
  %173 = inttoptr i64 %172 to i16*
  %174 = load atomic i16, i16* %173 monotonic, align 2
  %175 = load i64, i64* %2, align 8
  %176 = add i64 %175, 11
  %177 = inttoptr i64 %176 to i32*
  %178 = load atomic i32, i32* %177 monotonic, align 4
  %179 = and i64 %175, -4294967296
  %180 = zext i32 %178 to i64
  %181 = or i64 %179, %180
  %182 = add i64 %181, 27
  %183 = inttoptr i64 %182 to i32*
  %184 = load atomic i32, i32* %183 monotonic, align 4
  %185 = trunc i32 %184 to i8
  %186 = and i8 %185, 31
  %187 = add nsw i8 %186, -5
  %188 = icmp ult i8 %187, 2
  br i1 %188, label %192, label %189

189:                                              ; preds = %170
  %190 = add i64 %175, -1
  %191 = inttoptr i64 %190 to i32*
  br label %362

192:                                              ; preds = %170
  %193 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %193) #6
  %194 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %194) #6
  %195 = add i64 %171, 3
  %196 = inttoptr i64 %195 to i8*
  %197 = load atomic i8, i8* %196 monotonic, align 1
  %198 = zext i8 %197 to i32
  %199 = shl nuw nsw i32 %198, 2
  %200 = icmp eq i8 %197, 0
  br i1 %200, label %223, label %201

201:                                              ; preds = %192
  %202 = load atomic i16, i16* %173 monotonic, align 2
  %203 = icmp eq i16 %202, 1057
  br i1 %203, label %210, label %204

204:                                              ; preds = %201
  %205 = add i64 %171, 9
  %206 = inttoptr i64 %205 to i8*
  %207 = load atomic i8, i8* %206 monotonic, align 1
  %208 = icmp slt i8 %207, 0
  %209 = tail call i32 @_ZN2v88internal8JSObject13GetHeaderSizeENS0_12InstanceTypeEb(i16 zeroext %202, i1 zeroext %208) #6
  br label %210

210:                                              ; preds = %204, %201
  %211 = phi i32 [ %209, %204 ], [ 12, %201 ]
  %212 = sub nsw i32 %199, %211
  %213 = ashr i32 %212, 2
  %214 = load atomic i8, i8* %196 monotonic, align 1
  %215 = zext i8 %214 to i32
  %216 = add i64 %171, 4
  %217 = inttoptr i64 %216 to i8*
  %218 = load atomic i8, i8* %217 monotonic, align 1
  %219 = zext i8 %218 to i32
  %220 = sub nsw i32 %213, %215
  %221 = add nsw i32 %220, %219
  %222 = sdiv i32 %221, 2
  br label %223

223:                                              ; preds = %210, %192
  %224 = phi i32 [ %222, %210 ], [ 0, %192 ]
  %225 = load i64, i64* %1, align 8
  %226 = add i64 %225, 11
  %227 = inttoptr i64 %226 to i32*
  %228 = load atomic i32, i32* %227 monotonic, align 4
  %229 = and i64 %225, -4294967296
  %230 = zext i32 %228 to i64
  %231 = or i64 %229, %230
  %232 = add i64 %231, 25
  %233 = inttoptr i64 %232 to i8*
  %234 = load i8, i8* %233, align 1
  %235 = zext i8 %234 to i32
  %236 = tail call i32 @_ZN2v88internal10JSFunction30CalculateExpectedNofPropertiesEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"* %0, i64* %2) #6
  %237 = icmp sgt i32 %236, %235
  %238 = select i1 %237, i32 %236, i32 %235
  call void @_ZN2v88internal10JSFunction27CalculateInstanceSizeHelperENS0_12InstanceTypeEbiiPiS3_(i16 zeroext %174, i1 zeroext true, i32 %224, i32 %238, i32* nonnull %5, i32* nonnull %6) #6
  %239 = load i64, i64* %36, align 8
  %240 = add i64 %239, 3
  %241 = inttoptr i64 %240 to i8*
  %242 = load atomic i8, i8* %241 monotonic, align 1
  %243 = zext i8 %242 to i32
  %244 = add i64 %239, 4
  %245 = inttoptr i64 %244 to i8*
  %246 = load atomic i8, i8* %245 monotonic, align 1
  %247 = zext i8 %246 to i32
  %248 = add i64 %239, 5
  %249 = inttoptr i64 %248 to i8*
  %250 = load atomic i8, i8* %249 monotonic, align 1
  %251 = zext i8 %250 to i32
  %252 = icmp ugt i8 %250, 2
  br i1 %252, label %253, label %257

253:                                              ; preds = %223
  %254 = load atomic i8, i8* %241 monotonic, align 1
  %255 = zext i8 %254 to i32
  %256 = sub nsw i32 %255, %251
  br label %257

257:                                              ; preds = %253, %223
  %258 = phi i32 [ %256, %253 ], [ %251, %223 ]
  %259 = load atomic i8, i8* %249 monotonic, align 1
  %260 = icmp ult i8 %259, 3
  br i1 %260, label %261, label %263

261:                                              ; preds = %257
  %262 = load atomic i8, i8* %241 monotonic, align 1
  br label %263

263:                                              ; preds = %261, %257
  %264 = phi i8 [ %262, %261 ], [ %259, %257 ]
  %265 = zext i8 %264 to i32
  %266 = shl nuw nsw i32 %265, 2
  %267 = load i32, i32* %5, align 4
  %268 = icmp sgt i32 %266, %267
  br i1 %268, label %269, label %270, !prof !5

269:                                              ; preds = %263
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.17, i64 0, i64 0)) #8
  unreachable

270:                                              ; preds = %263
  %271 = load i32, i32* %6, align 4
  %272 = sub nsw i32 %247, %243
  %273 = add nsw i32 %272, %258
  %274 = add i32 %273, %271
  %275 = tail call i64* @_ZN2v88internal3Map14CopyInitialMapEPNS0_7IsolateENS0_6HandleIS1_EEiii(%"class.v8::internal::Isolate"* %0, i64* %36, i32 %267, i32 %271, i32 %274) #6
  %276 = load i64, i64* %275, align 8
  %277 = add i64 %276, 10
  %278 = inttoptr i64 %277 to i8*
  %279 = load i8, i8* %278, align 1
  %280 = and i8 %279, -2
  store i8 %280, i8* %278, align 1
  %281 = load i64, i64* %2, align 8
  %282 = and i64 %281, -4294967296
  %283 = add i64 %281, 27
  %284 = inttoptr i64 %283 to i32*
  %285 = load atomic i32, i32* %284 acquire, align 4
  %286 = zext i32 %285 to i64
  %287 = or i64 %282, %286
  %288 = add i64 %287, -1
  %289 = inttoptr i64 %288 to i32*
  %290 = load atomic i32, i32* %289 monotonic, align 4
  %291 = zext i32 %290 to i64
  %292 = or i64 %282, %291
  %293 = add i64 %292, 7
  %294 = inttoptr i64 %293 to i16*
  %295 = load atomic i16, i16* %294 monotonic, align 2
  %296 = icmp eq i16 %295, 172
  %297 = load atomic i32, i32* %284 acquire, align 4
  %298 = zext i32 %297 to i64
  %299 = or i64 %282, %298
  br i1 %296, label %300, label %306

300:                                              ; preds = %270
  %301 = add i64 %299, 15
  %302 = inttoptr i64 %301 to i32*
  %303 = load i32, i32* %302, align 4
  %304 = zext i32 %303 to i64
  %305 = or i64 %282, %304
  br label %306

306:                                              ; preds = %300, %270
  %307 = phi i64 [ %305, %300 ], [ %299, %270 ]
  %308 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %17, align 8
  %309 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %308, null
  br i1 %309, label %312, label %310

310:                                              ; preds = %306
  %311 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %308, i64 %307) #6
  br label %325

312:                                              ; preds = %306
  %313 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %314 = load i64*, i64** %313, align 8
  %315 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %316 = load i64*, i64** %315, align 8
  %317 = icmp eq i64* %314, %316
  br i1 %317, label %318, label %320

318:                                              ; preds = %312
  %319 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %320

320:                                              ; preds = %318, %312
  %321 = phi i64* [ %319, %318 ], [ %314, %312 ]
  %322 = ptrtoint i64* %321 to i64
  %323 = add i64 %322, 8
  %324 = inttoptr i64 %323 to i64*
  store i64* %324, i64** %313, align 8
  store i64 %307, i64* %321, align 8
  br label %325

325:                                              ; preds = %320, %310
  %326 = phi i64* [ %311, %310 ], [ %321, %320 ]
  tail call void @_ZN2v88internal10JSFunction13SetInitialMapEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_3MapEEENS4_INS0_10HeapObjectEEES5_(%"class.v8::internal::Isolate"* %0, i64* %2, i64* %275, i64* %326, i64* %1) #6
  %327 = load i64, i64* %275, align 8
  %328 = add i64 %327, 11
  %329 = inttoptr i64 %328 to i32*
  %330 = load atomic i32, i32* %329 monotonic, align 4
  %331 = and i32 %330, 536870911
  store atomic volatile i32 %331, i32* %329 monotonic, align 4
  %332 = bitcast %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %332) #6
  %333 = load i64, i64* %275, align 8
  %334 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %333, i64* %334, align 8
  %335 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef", %"class.v8::internal::Handle<v8::internal::Map>::ObjectRef"* %7, i64 0, i32 0
  call void @_ZN2v88internal3Map26StartInobjectSlackTrackingEv(%"class.v8::internal::Map"* nonnull %335) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %332) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %194) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %193) #6
  br label %336

336:                                              ; preds = %164, %325
  %337 = load i64, i64* %2, align 8
  %338 = and i64 %337, -4294967296
  %339 = add i64 %337, 27
  %340 = inttoptr i64 %339 to i32*
  %341 = load atomic i32, i32* %340 acquire, align 4
  %342 = zext i32 %341 to i64
  %343 = or i64 %338, %342
  %344 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %17, align 8
  %345 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %344, null
  br i1 %345, label %349, label %346

346:                                              ; preds = %336
  %347 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %344, i64 %343) #6
  %348 = ptrtoint i64* %347 to i64
  br label %702

349:                                              ; preds = %336
  %350 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %351 = load i64*, i64** %350, align 8
  %352 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %353 = load i64*, i64** %352, align 8
  %354 = icmp eq i64* %351, %353
  br i1 %354, label %355, label %357

355:                                              ; preds = %349
  %356 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %357

357:                                              ; preds = %355, %349
  %358 = phi i64* [ %356, %355 ], [ %351, %349 ]
  %359 = ptrtoint i64* %358 to i64
  %360 = add i64 %359, 8
  %361 = inttoptr i64 %360 to i64*
  store i64* %361, i64** %350, align 8
  store i64 %343, i64* %358, align 8
  br label %702

362:                                              ; preds = %189, %56, %44
  %363 = phi i32* [ %191, %189 ], [ %47, %56 ], [ %47, %44 ]
  %364 = phi i64 [ %179, %189 ], [ %45, %56 ], [ %45, %44 ]
  %365 = load atomic i32, i32* %363 monotonic, align 4
  %366 = zext i32 %365 to i64
  %367 = or i64 %364, %366
  %368 = add i64 %367, 7
  %369 = inttoptr i64 %368 to i16*
  %370 = load atomic i16, i16* %369 monotonic, align 2
  %371 = add i16 %370, -1059
  %372 = icmp ult i16 %371, 15
  br i1 %372, label %373, label %409

373:                                              ; preds = %362
  %374 = load atomic i32, i32* %363 monotonic, align 4
  %375 = zext i32 %374 to i64
  %376 = or i64 %364, %375
  %377 = add i64 %376, 9
  %378 = inttoptr i64 %377 to i8*
  %379 = load atomic i8, i8* %378 monotonic, align 1
  %380 = icmp slt i8 %379, 0
  br i1 %380, label %381, label %407

381:                                              ; preds = %373
  tail call void @_ZN2v88internal10JSFunction19EnsureHasInitialMapENS0_6HandleIS1_EE(i64* %2)
  %382 = bitcast %"class.v8::internal::Handle<v8::internal::JSFunction>::ObjectRef"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %382) #6
  %383 = load i64, i64* %2, align 8
  %384 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::JSFunction>::ObjectRef", %"class.v8::internal::Handle<v8::internal::JSFunction>::ObjectRef"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %383, i64* %384, align 8
  %385 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::JSFunction>::ObjectRef", %"class.v8::internal::Handle<v8::internal::JSFunction>::ObjectRef"* %8, i64 0, i32 0
  %386 = and i64 %383, -4294967296
  %387 = call i64 @_ZNK2v88internal10JSFunction9prototypeENS0_16PtrComprCageBaseE(%"class.v8::internal::JSFunction"* nonnull %385, i64 %386) #6
  %388 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %17, align 8
  %389 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %388, null
  br i1 %389, label %392, label %390

390:                                              ; preds = %381
  %391 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %388, i64 %387) #6
  br label %405

392:                                              ; preds = %381
  %393 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %394 = load i64*, i64** %393, align 8
  %395 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %396 = load i64*, i64** %395, align 8
  %397 = icmp eq i64* %394, %396
  br i1 %397, label %398, label %400

398:                                              ; preds = %392
  %399 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %400

400:                                              ; preds = %398, %392
  %401 = phi i64* [ %399, %398 ], [ %394, %392 ]
  %402 = ptrtoint i64* %401 to i64
  %403 = add i64 %402, 8
  %404 = inttoptr i64 %403 to i64*
  store i64* %404, i64** %393, align 8
  store i64 %387, i64* %401, align 8
  br label %405

405:                                              ; preds = %390, %400
  %406 = phi i64* [ %391, %390 ], [ %401, %400 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %382) #6
  br label %512

407:                                              ; preds = %373
  %408 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 7, i32 0, i64 4
  br label %512

409:                                              ; preds = %362
  %410 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 7, i32 0, i64 408
  %411 = bitcast %"class.v8::internal::LookupIterator"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %411) #6
  %412 = ptrtoint i64* %2 to i64
  %413 = getelementptr inbounds %"class.v8::internal::LookupIterator", %"class.v8::internal::LookupIterator"* %4, i64 0, i32 0
  %414 = icmp eq i64* %410, null
  br i1 %414, label %415, label %419

415:                                              ; preds = %409
  %416 = load i64, i64* null, align 536870912
  %417 = add i64 %416, -1
  %418 = inttoptr i64 %417 to i32*
  br label %440

419:                                              ; preds = %409
  %420 = load i64, i64* %410, align 8
  %421 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 4
  %422 = load i64, i64* %421, align 8
  %423 = add i64 %420, -1
  %424 = inttoptr i64 %423 to i32*
  %425 = load atomic i32, i32* %424 monotonic, align 4
  %426 = and i64 %422, 4294967295
  %427 = icmp eq i64 %426, 0
  tail call void @llvm.assume(i1 %427) #6
  %428 = zext i32 %425 to i64
  %429 = or i64 %422, %428
  %430 = add i64 %429, 7
  %431 = inttoptr i64 %430 to i16*
  %432 = load atomic i16, i16* %431 monotonic, align 2
  %433 = icmp eq i16 %432, 64
  br i1 %433, label %434, label %440

434:                                              ; preds = %419
  %435 = add i64 %420, 7
  %436 = inttoptr i64 %435 to i32*
  %437 = load i32, i32* %436, align 4
  %438 = and i32 %437, 1
  %439 = icmp eq i32 %438, 0
  br i1 %439, label %440, label %443

440:                                              ; preds = %415, %434, %419
  %441 = phi i32* [ %418, %415 ], [ %424, %434 ], [ %424, %419 ]
  %442 = phi i64 [ %416, %415 ], [ %420, %434 ], [ %420, %419 ]
  br label %443

443:                                              ; preds = %440, %434
  %444 = phi i32* [ %441, %440 ], [ %424, %434 ]
  %445 = phi i64 [ %442, %440 ], [ %420, %434 ]
  %446 = phi i32 [ 3, %440 ], [ 0, %434 ]
  store i32 %446, i32* %413, align 8
  %447 = getelementptr inbounds %"class.v8::internal::LookupIterator", %"class.v8::internal::LookupIterator"* %4, i64 0, i32 1
  store i32 4, i32* %447, align 4
  %448 = getelementptr inbounds %"class.v8::internal::LookupIterator", %"class.v8::internal::LookupIterator"* %4, i64 0, i32 2
  store i8 0, i8* %448, align 8
  %449 = getelementptr inbounds %"class.v8::internal::LookupIterator", %"class.v8::internal::LookupIterator"* %4, i64 0, i32 3
  store i32 0, i32* %449, align 4
  %450 = getelementptr inbounds %"class.v8::internal::LookupIterator", %"class.v8::internal::LookupIterator"* %4, i64 0, i32 4, i32 0
  store i32 0, i32* %450, align 8
  %451 = getelementptr inbounds %"class.v8::internal::LookupIterator", %"class.v8::internal::LookupIterator"* %4, i64 0, i32 5
  store %"class.v8::internal::Isolate"* %0, %"class.v8::internal::Isolate"** %451, align 8
  %452 = getelementptr inbounds %"class.v8::internal::LookupIterator", %"class.v8::internal::LookupIterator"* %4, i64 0, i32 6, i32 0, i32 0
  store i64* %410, i64** %452, align 8
  %453 = getelementptr inbounds %"class.v8::internal::LookupIterator", %"class.v8::internal::LookupIterator"* %4, i64 0, i32 7, i32 0, i32 0
  store i64* null, i64** %453, align 8
  %454 = getelementptr inbounds %"class.v8::internal::LookupIterator", %"class.v8::internal::LookupIterator"* %4, i64 0, i32 8, i32 0, i32 0
  store i64* %2, i64** %454, align 8
  %455 = getelementptr inbounds %"class.v8::internal::LookupIterator", %"class.v8::internal::LookupIterator"* %4, i64 0, i32 9, i32 0, i32 0
  store i64* null, i64** %455, align 8
  %456 = getelementptr inbounds %"class.v8::internal::LookupIterator", %"class.v8::internal::LookupIterator"* %4, i64 0, i32 10
  %457 = bitcast %"class.v8::internal::Handle.1133"* %456 to i64*
  store i64 %412, i64* %457, align 8
  %458 = getelementptr inbounds %"class.v8::internal::LookupIterator", %"class.v8::internal::LookupIterator"* %4, i64 0, i32 11
  %459 = bitcast i64* %458 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %459, i8 -1, i64 16, i1 false) #6
  %460 = and i64 %445, -4294967296
  %461 = load atomic i32, i32* %444 monotonic, align 4
  %462 = zext i32 %461 to i64
  %463 = or i64 %460, %462
  %464 = add i64 %463, 7
  %465 = inttoptr i64 %464 to i16*
  %466 = load atomic i16, i16* %465 monotonic, align 2
  %467 = and i16 %466, -32
  %468 = icmp eq i16 %467, 32
  br i1 %468, label %469, label %473

469:                                              ; preds = %443
  %470 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %471 = load %"class.v8::internal::StringTable"*, %"class.v8::internal::StringTable"** %470, align 8
  %472 = tail call i64* @_ZN2v88internal11StringTable12LookupStringEPNS0_7IsolateENS0_6HandleINS0_6StringEEE(%"class.v8::internal::StringTable"* %471, %"class.v8::internal::Isolate"* %0, i64* %410) #6
  br label %473

473:                                              ; preds = %443, %469
  %474 = phi i64* [ %472, %469 ], [ %410, %443 ]
  store i64* %474, i64** %452, align 8
  call void @_ZN2v88internal14LookupIterator5StartILb0EEEvv(%"class.v8::internal::LookupIterator"* nonnull %4) #6
  %475 = load i32, i32* %447, align 4
  %476 = icmp eq i32 %475, 4
  br i1 %476, label %477, label %482

477:                                              ; preds = %473
  %478 = bitcast %"class.v8::internal::Isolate"** %451 to %"class.v8::internal::Factory"**
  %479 = load %"class.v8::internal::Factory"*, %"class.v8::internal::Factory"** %478, align 8
  %480 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %479, i64 160
  %481 = bitcast %"class.v8::internal::Factory"* %480 to i64*
  br label %484

482:                                              ; preds = %473
  %483 = call i64* @_ZN2v88internal6Object11GetPropertyEPNS0_14LookupIteratorEb(%"class.v8::internal::LookupIterator"* nonnull %4, i1 zeroext false) #6
  br label %484

484:                                              ; preds = %477, %482
  %485 = phi i64* [ %483, %482 ], [ %481, %477 ]
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %411) #6
  %486 = icmp eq i64* %485, null
  br i1 %486, label %702, label %487

487:                                              ; preds = %484
  call void @_ZN2v88internal10JSFunction19EnsureHasInitialMapENS0_6HandleIS1_EE(i64* %1)
  %488 = load i64, i64* %1, align 8
  %489 = and i64 %488, -4294967296
  %490 = add i64 %488, 27
  %491 = inttoptr i64 %490 to i32*
  %492 = load atomic i32, i32* %491 acquire, align 4
  %493 = zext i32 %492 to i64
  %494 = or i64 %489, %493
  %495 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %17, align 8
  %496 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %495, null
  br i1 %496, label %499, label %497

497:                                              ; preds = %487
  %498 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %495, i64 %494) #6
  br label %512

499:                                              ; preds = %487
  %500 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %501 = load i64*, i64** %500, align 8
  %502 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %503 = load i64*, i64** %502, align 8
  %504 = icmp eq i64* %501, %503
  br i1 %504, label %505, label %507

505:                                              ; preds = %499
  %506 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %507

507:                                              ; preds = %505, %499
  %508 = phi i64* [ %506, %505 ], [ %501, %499 ]
  %509 = ptrtoint i64* %508 to i64
  %510 = add i64 %509, 8
  %511 = inttoptr i64 %510 to i64*
  store i64* %511, i64** %500, align 8
  store i64 %494, i64* %508, align 8
  br label %512

512:                                              ; preds = %507, %497, %405, %407
  %513 = phi i64* [ %406, %405 ], [ %408, %407 ], [ %485, %497 ], [ %485, %507 ]
  %514 = phi i64* [ %36, %405 ], [ %36, %407 ], [ %498, %497 ], [ %508, %507 ]
  %515 = load i64, i64* %513, align 8
  %516 = and i64 %515, 1
  %517 = icmp eq i64 %516, 0
  br i1 %517, label %529, label %518

518:                                              ; preds = %512
  %519 = and i64 %515, -4294967296
  %520 = add i64 %515, -1
  %521 = inttoptr i64 %520 to i32*
  %522 = load atomic i32, i32* %521 monotonic, align 4
  %523 = zext i32 %522 to i64
  %524 = or i64 %519, %523
  %525 = add i64 %524, 7
  %526 = inttoptr i64 %525 to i16*
  %527 = load atomic i16, i16* %526 monotonic, align 2
  %528 = icmp ugt i16 %527, 185
  br i1 %528, label %595, label %529

529:                                              ; preds = %512, %518
  %530 = call i64* @_ZN2v88internal10JSReceiver16GetFunctionRealmENS0_6HandleIS1_EE(i64* %2) #6
  %531 = icmp eq i64* %530, null
  br i1 %531, label %702, label %532

532:                                              ; preds = %529
  %533 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 7, i32 0, i64 489
  %534 = call i64* @_ZN2v88internal10JSReceiver15GetDataPropertyENS0_6HandleIS1_EENS2_INS0_4NameEEE(i64* %1, i64* %533)
  %535 = load i64, i64* %534, align 8
  %536 = and i64 %535, 1
  %537 = icmp eq i64 %536, 0
  %538 = trunc i64 %535 to i32
  %539 = lshr i32 %538, 1
  %540 = load i64, i64* %530, align 8
  %541 = and i64 %540, -4294967296
  %542 = shl i32 %539, 2
  %543 = sext i32 %542 to i64
  %544 = add nsw i64 %543, 7
  %545 = select i1 %537, i64 %544, i64 571
  %546 = add i64 %545, %540
  %547 = inttoptr i64 %546 to i32*
  %548 = load atomic i32, i32* %547 monotonic, align 4
  %549 = zext i32 %548 to i64
  %550 = or i64 %541, %549
  %551 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %17, align 8
  %552 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %551, null
  br i1 %552, label %556, label %553

553:                                              ; preds = %532
  %554 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %551, i64 %550) #6
  %555 = load i64, i64* %554, align 8
  br label %569

556:                                              ; preds = %532
  %557 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %558 = load i64*, i64** %557, align 8
  %559 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %560 = load i64*, i64** %559, align 8
  %561 = icmp eq i64* %558, %560
  br i1 %561, label %562, label %564

562:                                              ; preds = %556
  %563 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %564

564:                                              ; preds = %562, %556
  %565 = phi i64* [ %563, %562 ], [ %558, %556 ]
  %566 = ptrtoint i64* %565 to i64
  %567 = add i64 %566, 8
  %568 = inttoptr i64 %567 to i64*
  store i64* %568, i64** %557, align 8
  store i64 %550, i64* %565, align 8
  br label %569

569:                                              ; preds = %553, %564
  %570 = phi i64 [ %555, %553 ], [ %550, %564 ]
  %571 = bitcast %"class.v8::internal::Handle<v8::internal::JSFunction>::ObjectRef"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %571) #6
  %572 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::JSFunction>::ObjectRef", %"class.v8::internal::Handle<v8::internal::JSFunction>::ObjectRef"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %570, i64* %572, align 8
  %573 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::JSFunction>::ObjectRef", %"class.v8::internal::Handle<v8::internal::JSFunction>::ObjectRef"* %9, i64 0, i32 0
  %574 = and i64 %570, -4294967296
  %575 = call i64 @_ZNK2v88internal10JSFunction9prototypeENS0_16PtrComprCageBaseE(%"class.v8::internal::JSFunction"* nonnull %573, i64 %574) #6
  %576 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %17, align 8
  %577 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %576, null
  br i1 %577, label %580, label %578

578:                                              ; preds = %569
  %579 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %576, i64 %575) #6
  br label %593

580:                                              ; preds = %569
  %581 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %582 = load i64*, i64** %581, align 8
  %583 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %584 = load i64*, i64** %583, align 8
  %585 = icmp eq i64* %582, %584
  br i1 %585, label %586, label %588

586:                                              ; preds = %580
  %587 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %588

588:                                              ; preds = %586, %580
  %589 = phi i64* [ %587, %586 ], [ %582, %580 ]
  %590 = ptrtoint i64* %589 to i64
  %591 = add i64 %590, 8
  %592 = inttoptr i64 %591 to i64*
  store i64* %592, i64** %581, align 8
  store i64 %575, i64* %589, align 8
  br label %593

593:                                              ; preds = %578, %588
  %594 = phi i64* [ %579, %578 ], [ %589, %588 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %571) #6
  br label %595

595:                                              ; preds = %593, %518
  %596 = phi i64* [ %513, %518 ], [ %594, %593 ]
  %597 = load i64, i64* %514, align 8
  %598 = add i64 %597, 3
  %599 = inttoptr i64 %598 to i8*
  %600 = load atomic i8, i8* %599 monotonic, align 1
  %601 = zext i8 %600 to i32
  %602 = shl nuw nsw i32 %601, 2
  %603 = load atomic i8, i8* %599 monotonic, align 1
  %604 = zext i8 %603 to i32
  %605 = add i64 %597, 4
  %606 = inttoptr i64 %605 to i8*
  %607 = load atomic i8, i8* %606 monotonic, align 1
  %608 = zext i8 %607 to i32
  %609 = sub nsw i32 %604, %608
  %610 = add i64 %597, 5
  %611 = inttoptr i64 %610 to i8*
  %612 = load atomic i8, i8* %611 monotonic, align 1
  %613 = zext i8 %612 to i32
  %614 = icmp ugt i8 %612, 2
  br i1 %614, label %615, label %619

615:                                              ; preds = %595
  %616 = load atomic i8, i8* %599 monotonic, align 1
  %617 = zext i8 %616 to i32
  %618 = sub nsw i32 %617, %613
  br label %619

619:                                              ; preds = %595, %615
  %620 = phi i32 [ %618, %615 ], [ %613, %595 ]
  %621 = call i64* @_ZN2v88internal3Map14CopyInitialMapEPNS0_7IsolateENS0_6HandleIS1_EEiii(%"class.v8::internal::Isolate"* %0, i64* %514, i32 %602, i32 %609, i32 %620) #6
  %622 = load i64, i64* %621, align 8
  %623 = add i64 %622, 10
  %624 = inttoptr i64 %623 to i8*
  %625 = load i8, i8* %624, align 1
  %626 = and i8 %625, -2
  store i8 %626, i8* %624, align 1
  %627 = load i64, i64* %596, align 8
  %628 = and i64 %627, 1
  %629 = icmp eq i64 %628, 0
  br i1 %629, label %641, label %630, !prof !6

630:                                              ; preds = %619
  %631 = and i64 %627, -4294967296
  %632 = add i64 %627, -1
  %633 = inttoptr i64 %632 to i32*
  %634 = load atomic i32, i32* %633 monotonic, align 4
  %635 = zext i32 %634 to i64
  %636 = or i64 %631, %635
  %637 = add i64 %636, 7
  %638 = inttoptr i64 %637 to i16*
  %639 = load atomic i16, i16* %638 monotonic, align 2
  %640 = icmp ugt i16 %639, 185
  br i1 %640, label %642, label %641, !prof !3

641:                                              ; preds = %619, %630
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.6, i64 0, i64 0)) #8
  unreachable

642:                                              ; preds = %630
  %643 = load i64, i64* %621, align 8
  %644 = add i64 %643, 15
  %645 = inttoptr i64 %644 to i32*
  %646 = load i32, i32* %645, align 4
  %647 = trunc i64 %627 to i32
  %648 = icmp eq i32 %646, %647
  br i1 %648, label %651, label %649

649:                                              ; preds = %642
  call void @_ZN2v88internal3Map12SetPrototypeEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_10HeapObjectEEEb(%"class.v8::internal::Isolate"* %0, i64* %621, i64* %596, i1 zeroext true) #6
  %650 = load i64, i64* %621, align 8
  br label %651

651:                                              ; preds = %642, %649
  %652 = phi i64 [ %643, %642 ], [ %650, %649 ]
  %653 = load i64, i64* %1, align 8
  %654 = and i64 %652, -4294967296
  %655 = add i64 %652, 19
  %656 = inttoptr i64 %655 to i32*
  %657 = load i32, i32* %656, align 4
  %658 = zext i32 %657 to i64
  %659 = and i64 %658, 1
  %660 = icmp eq i64 %659, 0
  br i1 %660, label %673, label %661

661:                                              ; preds = %651
  %662 = or i64 %654, %658
  %663 = add i64 %662, -1
  %664 = inttoptr i64 %663 to i32*
  %665 = load atomic i32, i32* %664 monotonic, align 4
  %666 = zext i32 %665 to i64
  %667 = or i64 %654, %666
  %668 = add i64 %667, 7
  %669 = inttoptr i64 %668 to i16*
  %670 = load atomic i16, i16* %669 monotonic, align 2
  %671 = icmp eq i16 %670, 172
  br i1 %671, label %672, label %673, !prof !5

672:                                              ; preds = %661
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.15, i64 0, i64 0)) #8
  unreachable

673:                                              ; preds = %661, %651
  %674 = trunc i64 %653 to i32
  store atomic volatile i32 %674, i32* %656 monotonic, align 4
  %675 = and i64 %653, 1
  %676 = icmp eq i64 %675, 0
  br i1 %676, label %700, label %677

677:                                              ; preds = %673
  %678 = and i64 %652, -262144
  %679 = or i64 %678, 8
  %680 = inttoptr i64 %679 to i64*
  %681 = load i64, i64* %680, align 8
  %682 = and i64 %681, 262144
  %683 = icmp eq i64 %682, 0
  br i1 %683, label %688, label %684

684:                                              ; preds = %677
  %685 = or i64 %678, 16
  %686 = inttoptr i64 %685 to %"class.v8::internal::Heap"**
  %687 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %686, align 16
  call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %687, i64 %652, i64 %655, i64 %653) #6
  br label %688

688:                                              ; preds = %684, %677
  %689 = and i64 %653, -262144
  %690 = or i64 %689, 8
  %691 = inttoptr i64 %690 to i64*
  %692 = load i64, i64* %691, align 8
  %693 = and i64 %692, 24
  %694 = icmp eq i64 %693, 0
  br i1 %694, label %700, label %695

695:                                              ; preds = %688
  %696 = load i64, i64* %680, align 8
  %697 = and i64 %696, 24
  %698 = icmp eq i64 %697, 0
  br i1 %698, label %699, label %700

699:                                              ; preds = %695
  call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %652, i64 %655, i64 %653) #6
  br label %700

700:                                              ; preds = %673, %688, %695, %699
  %701 = ptrtoint i64* %621 to i64
  br label %702

702:                                              ; preds = %357, %346, %529, %484, %700, %42
  %703 = phi i64 [ %43, %42 ], [ %701, %700 ], [ 0, %484 ], [ 0, %529 ], [ %348, %346 ], [ %359, %357 ]
  %704 = inttoptr i64 %703 to i64*
  ret i64* %704
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i64* @_ZN2v88internal10JSReceiver15GetDataPropertyENS0_6HandleIS1_EENS2_INS0_4NameEEE(i64*, i64*) local_unnamed_addr #4 comdat align 2 {
  %3 = alloca %"class.v8::internal::LookupIterator", align 8
  %4 = bitcast %"class.v8::internal::LookupIterator"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %4) #6
  %5 = load i64, i64* %0, align 8
  %6 = and i64 %5, -262144
  %7 = or i64 %6, 16
  %8 = inttoptr i64 %7 to i64*
  %9 = load i64, i64* %8, align 16
  %10 = add i64 %9, -41416
  %11 = inttoptr i64 %10 to %"class.v8::internal::Isolate"*
  %12 = ptrtoint i64* %0 to i64
  %13 = getelementptr inbounds %"class.v8::internal::LookupIterator", %"class.v8::internal::LookupIterator"* %3, i64 0, i32 0
  %14 = icmp eq i64* %1, null
  br i1 %14, label %15, label %19

15:                                               ; preds = %2
  %16 = load i64, i64* null, align 536870912
  %17 = add i64 %16, -1
  %18 = inttoptr i64 %17 to i32*
  br label %40

19:                                               ; preds = %2
  %20 = load i64, i64* %1, align 8
  %21 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %11, i64 0, i32 0, i32 4
  %22 = load i64, i64* %21, align 8
  %23 = add i64 %20, -1
  %24 = inttoptr i64 %23 to i32*
  %25 = load atomic i32, i32* %24 monotonic, align 4
  %26 = and i64 %22, 4294967295
  %27 = icmp eq i64 %26, 0
  tail call void @llvm.assume(i1 %27) #6
  %28 = zext i32 %25 to i64
  %29 = or i64 %22, %28
  %30 = add i64 %29, 7
  %31 = inttoptr i64 %30 to i16*
  %32 = load atomic i16, i16* %31 monotonic, align 2
  %33 = icmp eq i16 %32, 64
  br i1 %33, label %34, label %40

34:                                               ; preds = %19
  %35 = add i64 %20, 7
  %36 = inttoptr i64 %35 to i32*
  %37 = load i32, i32* %36, align 4
  %38 = and i32 %37, 1
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %43

40:                                               ; preds = %15, %34, %19
  %41 = phi i32* [ %18, %15 ], [ %24, %34 ], [ %24, %19 ]
  %42 = phi i64 [ %16, %15 ], [ %20, %34 ], [ %20, %19 ]
  br label %43

43:                                               ; preds = %40, %34
  %44 = phi i32* [ %41, %40 ], [ %24, %34 ]
  %45 = phi i64 [ %42, %40 ], [ %20, %34 ]
  %46 = phi i32 [ 2, %40 ], [ 0, %34 ]
  store i32 %46, i32* %13, align 8
  %47 = getelementptr inbounds %"class.v8::internal::LookupIterator", %"class.v8::internal::LookupIterator"* %3, i64 0, i32 1
  store i32 4, i32* %47, align 4
  %48 = getelementptr inbounds %"class.v8::internal::LookupIterator", %"class.v8::internal::LookupIterator"* %3, i64 0, i32 2
  store i8 0, i8* %48, align 8
  %49 = getelementptr inbounds %"class.v8::internal::LookupIterator", %"class.v8::internal::LookupIterator"* %3, i64 0, i32 3
  store i32 0, i32* %49, align 4
  %50 = getelementptr inbounds %"class.v8::internal::LookupIterator", %"class.v8::internal::LookupIterator"* %3, i64 0, i32 4, i32 0
  store i32 0, i32* %50, align 8
  %51 = getelementptr inbounds %"class.v8::internal::LookupIterator", %"class.v8::internal::LookupIterator"* %3, i64 0, i32 5
  store %"class.v8::internal::Isolate"* %11, %"class.v8::internal::Isolate"** %51, align 8
  %52 = getelementptr inbounds %"class.v8::internal::LookupIterator", %"class.v8::internal::LookupIterator"* %3, i64 0, i32 6, i32 0, i32 0
  store i64* %1, i64** %52, align 8
  %53 = getelementptr inbounds %"class.v8::internal::LookupIterator", %"class.v8::internal::LookupIterator"* %3, i64 0, i32 7, i32 0, i32 0
  store i64* null, i64** %53, align 8
  %54 = getelementptr inbounds %"class.v8::internal::LookupIterator", %"class.v8::internal::LookupIterator"* %3, i64 0, i32 8, i32 0, i32 0
  store i64* %0, i64** %54, align 8
  %55 = getelementptr inbounds %"class.v8::internal::LookupIterator", %"class.v8::internal::LookupIterator"* %3, i64 0, i32 9, i32 0, i32 0
  store i64* null, i64** %55, align 8
  %56 = getelementptr inbounds %"class.v8::internal::LookupIterator", %"class.v8::internal::LookupIterator"* %3, i64 0, i32 10
  %57 = bitcast %"class.v8::internal::Handle.1133"* %56 to i64*
  store i64 %12, i64* %57, align 8
  %58 = getelementptr inbounds %"class.v8::internal::LookupIterator", %"class.v8::internal::LookupIterator"* %3, i64 0, i32 11
  %59 = bitcast i64* %58 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %59, i8 -1, i64 16, i1 false) #6
  %60 = and i64 %45, -4294967296
  %61 = load atomic i32, i32* %44 monotonic, align 4
  %62 = zext i32 %61 to i64
  %63 = or i64 %60, %62
  %64 = add i64 %63, 7
  %65 = inttoptr i64 %64 to i16*
  %66 = load atomic i16, i16* %65 monotonic, align 2
  %67 = and i16 %66, -32
  %68 = icmp eq i16 %67, 32
  br i1 %68, label %69, label %73

69:                                               ; preds = %43
  %70 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %11, i64 0, i32 5, i32 0, i32 0, i32 0
  %71 = load %"class.v8::internal::StringTable"*, %"class.v8::internal::StringTable"** %70, align 8
  %72 = tail call i64* @_ZN2v88internal11StringTable12LookupStringEPNS0_7IsolateENS0_6HandleINS0_6StringEEE(%"class.v8::internal::StringTable"* %71, %"class.v8::internal::Isolate"* %11, i64* %1) #6
  br label %73

73:                                               ; preds = %43, %69
  %74 = phi i64* [ %72, %69 ], [ %1, %43 ]
  store i64* %74, i64** %52, align 8
  call void @_ZN2v88internal14LookupIterator5StartILb0EEEvv(%"class.v8::internal::LookupIterator"* nonnull %3) #6
  %75 = load i32, i32* %47, align 4
  %76 = icmp eq i32 %75, 4
  br i1 %76, label %77, label %82

77:                                               ; preds = %73
  %78 = bitcast %"class.v8::internal::Isolate"** %51 to %"class.v8::internal::Factory"**
  %79 = load %"class.v8::internal::Factory"*, %"class.v8::internal::Factory"** %78, align 8
  %80 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %79, i64 160
  %81 = bitcast %"class.v8::internal::Factory"* %80 to i64*
  br label %84

82:                                               ; preds = %73
  %83 = call i64* @_ZN2v88internal10JSReceiver15GetDataPropertyEPNS0_14LookupIteratorENS0_16AllocationPolicyE(%"class.v8::internal::LookupIterator"* nonnull %3, i32 0) #6
  br label %84

84:                                               ; preds = %82, %77
  %85 = phi i64* [ %83, %82 ], [ %81, %77 ]
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %4) #6
  ret i64* %85
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal10JSFunction20GetDerivedRabGsabMapEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_10JSReceiverEEE(%"class.v8::internal::Isolate"*, i64*, i64*) local_unnamed_addr #0 align 2 {
  %4 = tail call i64* @_ZN2v88internal10JSFunction13GetDerivedMapEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_10JSReceiverEEE(%"class.v8::internal::Isolate"* %0, i64* %1, i64* %2)
  %5 = icmp eq i64* %4, null
  br i1 %5, label %6, label %7, !prof !5

6:                                                ; preds = %3
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.21, i64 0, i64 0)) #8
  unreachable

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 9, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = and i64 %9, -4294967296
  %11 = add i64 %9, -1
  %12 = inttoptr i64 %11 to i32*
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = zext i32 %13 to i64
  %15 = or i64 %10, %14
  %16 = add i64 %15, 19
  %17 = inttoptr i64 %16 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i64
  %20 = or i64 %10, %19
  %21 = load i64, i64* %4, align 8
  %22 = add i64 %21, 10
  %23 = inttoptr i64 %22 to i8*
  %24 = load i8, i8* %23, align 1
  %25 = load i64, i64* %2, align 8
  %26 = or i8 %24, 3
  %27 = zext i8 %26 to i64
  %28 = add i64 %20, %27
  %29 = inttoptr i64 %28 to i32*
  %30 = load atomic i32, i32* %29 monotonic, align 4
  %31 = trunc i64 %25 to i32
  %32 = icmp eq i32 %30, %31
  br i1 %32, label %33, label %62

33:                                               ; preds = %7
  %34 = lshr i8 %24, 2
  %35 = add nuw nsw i8 %34, 10
  %36 = zext i8 %35 to i64
  %37 = shl nuw nsw i64 %36, 2
  %38 = add i64 %20, 7
  %39 = add i64 %38, %37
  %40 = inttoptr i64 %39 to i32*
  %41 = load atomic i32, i32* %40 monotonic, align 4
  %42 = zext i32 %41 to i64
  %43 = or i64 %10, %42
  %44 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %45 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %44, align 8
  %46 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %33
  %48 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %45, i64 %43) #6
  br label %80

49:                                               ; preds = %33
  %50 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %51 = load i64*, i64** %50, align 8
  %52 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %53 = load i64*, i64** %52, align 8
  %54 = icmp eq i64* %51, %53
  br i1 %54, label %55, label %57

55:                                               ; preds = %49
  %56 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #6
  br label %57

57:                                               ; preds = %55, %49
  %58 = phi i64* [ %56, %55 ], [ %51, %49 ]
  %59 = ptrtoint i64* %58 to i64
  %60 = add i64 %59, 8
  %61 = inttoptr i64 %60 to i64*
  store i64* %61, i64** %50, align 8
  store i64 %43, i64* %58, align 8
  br label %80

62:                                               ; preds = %7
  %63 = tail call i64* @_ZN2v88internal3Map4CopyEPNS0_7IsolateENS0_6HandleIS1_EEPKc(%"class.v8::internal::Isolate"* %0, i64* nonnull %4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0)) #6
  %64 = load i64, i64* %4, align 8
  %65 = add i64 %64, 10
  %66 = inttoptr i64 %65 to i8*
  %67 = load i8, i8* %66, align 1
  %68 = lshr i8 %67, 2
  %69 = add nuw nsw i8 %68, 11
  %70 = icmp ult i8 %69, 39
  br i1 %70, label %72, label %71, !prof !3

71:                                               ; preds = %62
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.18, i64 0, i64 0)) #8
  unreachable

72:                                               ; preds = %62
  %73 = load i64, i64* %63, align 8
  %74 = add i64 %73, 10
  %75 = inttoptr i64 %74 to i8*
  %76 = load i8, i8* %75, align 1
  %77 = and i8 %76, 3
  %78 = shl i8 %69, 2
  %79 = or i8 %77, %78
  store i8 %79, i8* %75, align 1
  br label %80

80:                                               ; preds = %57, %47, %72
  %81 = phi i64* [ %63, %72 ], [ %58, %57 ], [ %48, %47 ]
  ret i64* %81
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal10JSFunction31ComputeInstanceSizeWithMinSlackEPNS0_7IsolateE(%"class.v8::internal::JSFunction"* nocapture readonly, %"class.v8::internal::Isolate"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::Map", align 8
  %4 = getelementptr inbounds %"class.v8::internal::JSFunction", %"class.v8::internal::JSFunction"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = and i64 %5, -4294967296
  %7 = add i64 %5, 27
  %8 = inttoptr i64 %7 to i32*
  %9 = load atomic i32, i32* %8 acquire, align 4
  %10 = zext i32 %9 to i64
  %11 = or i64 %6, %10
  %12 = add i64 %11, -1
  %13 = inttoptr i64 %12 to i32*
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = zext i32 %14 to i64
  %16 = or i64 %6, %15
  %17 = add i64 %16, 7
  %18 = inttoptr i64 %17 to i16*
  %19 = load atomic i16, i16* %18 monotonic, align 2
  %20 = icmp eq i16 %19, 172
  br i1 %20, label %22, label %21, !prof !3

21:                                               ; preds = %2
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.8, i64 0, i64 0)) #8
  unreachable

22:                                               ; preds = %2
  %23 = load i64, i64* %4, align 8
  %24 = and i64 %23, -4294967296
  %25 = add i64 %23, 27
  %26 = inttoptr i64 %25 to i32*
  %27 = load atomic i32, i32* %26 acquire, align 4
  %28 = zext i32 %27 to i64
  %29 = or i64 %24, %28
  %30 = add i64 %29, 11
  %31 = inttoptr i64 %30 to i32*
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = icmp ugt i32 %32, 536870911
  br i1 %33, label %34, label %57

34:                                               ; preds = %22
  %35 = bitcast %"class.v8::internal::Map"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #6
  %36 = load i64, i64* %4, align 8
  %37 = and i64 %36, -4294967296
  %38 = add i64 %36, 27
  %39 = inttoptr i64 %38 to i32*
  %40 = load atomic i32, i32* %39 acquire, align 4
  %41 = zext i32 %40 to i64
  %42 = or i64 %37, %41
  %43 = getelementptr inbounds %"class.v8::internal::Map", %"class.v8::internal::Map"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  store i64 %42, i64* %43, align 8
  %44 = call i32 @_ZN2v88internal3Map21ComputeMinObjectSlackEPNS0_7IsolateE(%"class.v8::internal::Map"* nonnull %3, %"class.v8::internal::Isolate"* %1) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #6
  %45 = load i64, i64* %4, align 8
  %46 = and i64 %45, -4294967296
  %47 = add i64 %45, 27
  %48 = inttoptr i64 %47 to i32*
  %49 = load atomic i32, i32* %48 acquire, align 4
  %50 = zext i32 %49 to i64
  %51 = or i64 %46, %50
  %52 = add i64 %51, 3
  %53 = inttoptr i64 %52 to i8*
  %54 = load atomic i8, i8* %53 monotonic, align 1
  %55 = zext i8 %54 to i32
  %56 = sub i32 %55, %44
  br label %69

57:                                               ; preds = %22
  %58 = load i64, i64* %4, align 8
  %59 = and i64 %58, -4294967296
  %60 = add i64 %58, 27
  %61 = inttoptr i64 %60 to i32*
  %62 = load atomic i32, i32* %61 acquire, align 4
  %63 = zext i32 %62 to i64
  %64 = or i64 %59, %63
  %65 = add i64 %64, 3
  %66 = inttoptr i64 %65 to i8*
  %67 = load atomic i8, i8* %66 monotonic, align 1
  %68 = zext i8 %67 to i32
  br label %69

69:                                               ; preds = %57, %34
  %70 = phi i32 [ %56, %34 ], [ %68, %57 ]
  %71 = shl i32 %70, 2
  ret i32 %71
}

declare i32 @_ZN2v88internal3Map21ComputeMinObjectSlackEPNS0_7IsolateE(%"class.v8::internal::Map"*, %"class.v8::internal::Isolate"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal10JSFunction9PrintNameEP8_IO_FILE(%"class.v8::internal::JSFunction"* nocapture readonly, %struct._IO_FILE*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::SharedFunctionInfo", align 8
  %4 = bitcast %"class.v8::internal::SharedFunctionInfo"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #6
  %5 = getelementptr inbounds %"class.v8::internal::JSFunction", %"class.v8::internal::JSFunction"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 11
  %8 = inttoptr i64 %7 to i32*
  %9 = load atomic i32, i32* %8 monotonic, align 4
  %10 = and i64 %6, -4294967296
  %11 = zext i32 %9 to i64
  %12 = or i64 %10, %11
  %13 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %12, i64* %13, align 8
  %14 = call i8* @_ZN2v88internal18SharedFunctionInfo13DebugNameCStrEv(%"class.v8::internal::SharedFunctionInfo"* nonnull %3) #6
  call void (%struct._IO_FILE*, i8*, ...) @_ZN2v88internal6PrintFEP8_IO_FILEPKcz(%struct._IO_FILE* %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i64 0, i64 0), i8* %14) #6
  %15 = icmp eq i8* %14, null
  br i1 %15, label %17, label %16

16:                                               ; preds = %2
  call void @_ZdaPv(i8* nonnull %14) #9
  br label %17

17:                                               ; preds = %2, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #6
  ret void
}

declare void @_ZN2v88internal6PrintFEP8_IO_FILEPKcz(%struct._IO_FILE*, i8*, ...) local_unnamed_addr #2

declare i8* @_ZN2v88internal18SharedFunctionInfo13DebugNameCStrEv(%"class.v8::internal::SharedFunctionInfo"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal10JSFunction12GetDebugNameENS0_6HandleIS1_EE(i64*) local_unnamed_addr #0 align 2 {
  %2 = load i64, i64* %0, align 8
  %3 = and i64 %2, -262144
  %4 = or i64 %3, 16
  %5 = inttoptr i64 %4 to i64*
  %6 = load i64, i64* %5, align 16
  %7 = add i64 %6, -41416
  %8 = inttoptr i64 %7 to %"class.v8::internal::Isolate"*
  %9 = and i64 %2, -4294967296
  %10 = add i64 %2, -1
  %11 = inttoptr i64 %10 to i32*
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = zext i32 %12 to i64
  %14 = or i64 %9, %13
  %15 = add i64 %14, 11
  %16 = inttoptr i64 %15 to i32*
  %17 = load atomic i32, i32* %16 acquire, align 4
  %18 = and i32 %17, 1046528
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %55, label %20

20:                                               ; preds = %1
  %21 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %8, i64 0, i32 0, i32 4
  %22 = load i64, i64* %21, align 8
  %23 = add i64 %14, 23
  %24 = inttoptr i64 %23 to i32*
  %25 = load i32, i32* %24, align 4
  %26 = and i64 %22, 4294967295
  %27 = icmp eq i64 %26, 0
  tail call void @llvm.assume(i1 %27) #6
  %28 = zext i32 %25 to i64
  %29 = or i64 %22, %28
  %30 = add i64 %29, 27
  %31 = inttoptr i64 %30 to i32*
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %8, i64 0, i32 0, i32 7, i32 0, i64 378
  %34 = load i64, i64* %33, align 8
  %35 = trunc i64 %34 to i32
  %36 = icmp eq i32 %32, %35
  br i1 %36, label %37, label %55

37:                                               ; preds = %20
  %38 = add i64 %29, 35
  %39 = inttoptr i64 %38 to i32*
  %40 = load atomic i32, i32* %39 monotonic, align 4
  %41 = zext i32 %40 to i64
  %42 = and i64 %41, 3
  %43 = icmp eq i64 %42, 1
  br i1 %43, label %44, label %55

44:                                               ; preds = %37
  %45 = or i64 %22, %41
  %46 = add i64 %45, -1
  %47 = inttoptr i64 %46 to i32*
  %48 = load atomic i32, i32* %47 monotonic, align 4
  %49 = zext i32 %48 to i64
  %50 = or i64 %22, %49
  %51 = add i64 %50, 7
  %52 = inttoptr i64 %51 to i16*
  %53 = load atomic i16, i16* %52 monotonic, align 2
  %54 = icmp eq i16 %53, 86
  br i1 %54, label %74, label %55

55:                                               ; preds = %20, %37, %1, %44
  %56 = inttoptr i64 %7 to %"class.v8::internal::Factory"*
  %57 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %56, i64 3152
  %58 = bitcast %"class.v8::internal::Factory"* %57 to i64*
  %59 = tail call i64* @_ZN2v88internal10JSReceiver15GetDataPropertyENS0_6HandleIS1_EENS2_INS0_4NameEEE(i64* %0, i64* %58)
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %74, label %63

63:                                               ; preds = %55
  %64 = and i64 %60, -4294967296
  %65 = add i64 %60, -1
  %66 = inttoptr i64 %65 to i32*
  %67 = load atomic i32, i32* %66 monotonic, align 4
  %68 = zext i32 %67 to i64
  %69 = or i64 %64, %68
  %70 = add i64 %69, 7
  %71 = inttoptr i64 %70 to i16*
  %72 = load atomic i16, i16* %71 monotonic, align 2
  %73 = icmp ult i16 %72, 64
  br i1 %73, label %103, label %74

74:                                               ; preds = %55, %63, %44
  %75 = load i64, i64* %0, align 8
  %76 = add i64 %75, 11
  %77 = inttoptr i64 %76 to i32*
  %78 = load atomic i32, i32* %77 monotonic, align 4
  %79 = and i64 %75, -4294967296
  %80 = zext i32 %78 to i64
  %81 = or i64 %79, %80
  %82 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %8, i64 0, i32 31, i32 4
  %83 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %82, align 8
  %84 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %83, null
  br i1 %84, label %87, label %85

85:                                               ; preds = %74
  %86 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %83, i64 %81) #6
  br label %100

87:                                               ; preds = %74
  %88 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %8, i64 0, i32 31, i32 0
  %89 = load i64*, i64** %88, align 8
  %90 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %8, i64 0, i32 31, i32 1
  %91 = load i64*, i64** %90, align 8
  %92 = icmp eq i64* %89, %91
  br i1 %92, label %93, label %95

93:                                               ; preds = %87
  %94 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %8) #6
  br label %95

95:                                               ; preds = %93, %87
  %96 = phi i64* [ %94, %93 ], [ %89, %87 ]
  %97 = ptrtoint i64* %96 to i64
  %98 = add i64 %97, 8
  %99 = inttoptr i64 %98 to i64*
  store i64* %99, i64** %88, align 8
  store i64 %81, i64* %96, align 8
  br label %100

100:                                              ; preds = %85, %95
  %101 = phi i64* [ %86, %85 ], [ %96, %95 ]
  %102 = tail call i64* @_ZN2v88internal18SharedFunctionInfo9DebugNameENS0_6HandleIS1_EE(i64* %101) #6
  br label %103

103:                                              ; preds = %63, %100
  %104 = phi i64* [ %102, %100 ], [ %59, %63 ]
  ret i64* %104
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal10JSFunction7SetNameENS0_6HandleIS1_EENS2_INS0_4NameEEENS2_INS0_6StringEEE(i64*, i64*, i64*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.v8::internal::IncrementalStringBuilder", align 8
  %5 = load i64, i64* %0, align 8
  %6 = and i64 %5, -262144
  %7 = or i64 %6, 16
  %8 = inttoptr i64 %7 to i64*
  %9 = load i64, i64* %8, align 16
  %10 = add i64 %9, -41416
  %11 = inttoptr i64 %10 to %"class.v8::internal::Isolate"*
  %12 = tail call i64* @_ZN2v88internal4Name14ToFunctionNameEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"* %11, i64* %1) #6
  %13 = icmp eq i64* %12, null
  br i1 %13, label %62, label %14

14:                                               ; preds = %3
  %15 = load i64, i64* %2, align 8
  %16 = add i64 %15, 7
  %17 = inttoptr i64 %16 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = icmp sgt i32 %18, 0
  br i1 %19, label %20, label %55

20:                                               ; preds = %14
  %21 = bitcast %"class.v8::internal::IncrementalStringBuilder"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %21) #6
  call void @_ZN2v88internal24IncrementalStringBuilderC1EPNS0_7IsolateE(%"class.v8::internal::IncrementalStringBuilder"* nonnull %4, %"class.v8::internal::Isolate"* %11) #6
  call void @_ZN2v88internal24IncrementalStringBuilder12AppendStringENS0_6HandleINS0_6StringEEE(%"class.v8::internal::IncrementalStringBuilder"* nonnull %4, i64* %2) #6
  %22 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %4, i64 0, i32 1
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %23, 0
  %25 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %4, i64 0, i32 6, i32 0, i32 0
  %26 = load i64*, i64** %25, align 8
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %4, i64 0, i32 4
  %29 = load i32, i32* %28, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %28, align 4
  br i1 %24, label %31, label %41

31:                                               ; preds = %20
  %32 = sext i32 %29 to i64
  %33 = add i64 %27, 11
  %34 = add i64 %33, %32
  %35 = inttoptr i64 %34 to i8*
  store i8 32, i8* %35, align 1
  %36 = load i32, i32* %28, align 4
  %37 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %4, i64 0, i32 3
  %38 = load i32, i32* %37, align 8
  %39 = icmp eq i32 %36, %38
  br i1 %39, label %40, label %52

40:                                               ; preds = %31
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %4) #6
  br label %52

41:                                               ; preds = %20
  %42 = shl nsw i32 %29, 1
  %43 = sext i32 %42 to i64
  %44 = add i64 %27, 11
  %45 = add i64 %44, %43
  %46 = inttoptr i64 %45 to i16*
  store i16 32, i16* %46, align 2
  %47 = load i32, i32* %28, align 4
  %48 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %4, i64 0, i32 3
  %49 = load i32, i32* %48, align 8
  %50 = icmp eq i32 %47, %49
  br i1 %50, label %51, label %52

51:                                               ; preds = %41
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %4) #6
  br label %52

52:                                               ; preds = %31, %40, %41, %51
  call void @_ZN2v88internal24IncrementalStringBuilder12AppendStringENS0_6HandleINS0_6StringEEE(%"class.v8::internal::IncrementalStringBuilder"* nonnull %4, i64* nonnull %12) #6
  %53 = call i64* @_ZN2v88internal24IncrementalStringBuilder6FinishEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %4) #6
  %54 = icmp eq i64* %53, null
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %21) #6
  br i1 %54, label %62, label %55

55:                                               ; preds = %52, %14
  %56 = phi i64* [ %12, %14 ], [ %53, %52 ]
  %57 = inttoptr i64 %10 to %"class.v8::internal::Factory"*
  %58 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %57, i64 3152
  %59 = bitcast %"class.v8::internal::Factory"* %58 to i64*
  %60 = call i64* @_ZN2v88internal8JSObject39DefinePropertyOrElementIgnoreAttributesENS0_6HandleIS1_EENS2_INS0_4NameEEENS2_INS0_6ObjectEEENS0_18PropertyAttributesE(i64* %0, i64* %59, i64* nonnull %56, i32 3) #6
  %61 = icmp ne i64* %60, null
  br label %62

62:                                               ; preds = %52, %3, %55
  %63 = phi i1 [ %61, %55 ], [ false, %3 ], [ false, %52 ]
  ret i1 %63
}

declare i64* @_ZN2v88internal4Name14ToFunctionNameEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"*, i64*) local_unnamed_addr #2

declare void @_ZN2v88internal24IncrementalStringBuilderC1EPNS0_7IsolateE(%"class.v8::internal::IncrementalStringBuilder"*, %"class.v8::internal::Isolate"*) unnamed_addr #2

declare void @_ZN2v88internal24IncrementalStringBuilder12AppendStringENS0_6HandleINS0_6StringEEE(%"class.v8::internal::IncrementalStringBuilder"*, i64*) local_unnamed_addr #2

declare i64* @_ZN2v88internal24IncrementalStringBuilder6FinishEv(%"class.v8::internal::IncrementalStringBuilder"*) local_unnamed_addr #2

declare i64* @_ZN2v88internal8JSObject39DefinePropertyOrElementIgnoreAttributesENS0_6HandleIS1_EENS2_INS0_4NameEEENS2_INS0_6ObjectEEENS0_18PropertyAttributesE(i64*, i64*, i64*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal10JSFunction8ToStringENS0_6HandleIS1_EE(i64*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::Script", align 8
  %3 = alloca %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", align 8
  %4 = alloca %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", align 8
  %5 = alloca %"class.v8::internal::WasmInstanceObject", align 8
  %6 = alloca %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", align 8
  %7 = load i64, i64* %0, align 8
  %8 = and i64 %7, -262144
  %9 = or i64 %8, 16
  %10 = inttoptr i64 %9 to i64*
  %11 = load i64, i64* %10, align 16
  %12 = add i64 %11, -41416
  %13 = inttoptr i64 %12 to %"class.v8::internal::Isolate"*
  %14 = add i64 %7, 11
  %15 = inttoptr i64 %14 to i32*
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = and i64 %7, -4294967296
  %18 = zext i32 %16 to i64
  %19 = or i64 %17, %18
  %20 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %13, i64 0, i32 31, i32 4
  %21 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %20, align 8
  %22 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %21, null
  br i1 %22, label %26, label %23

23:                                               ; preds = %1
  %24 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %21, i64 %19) #6
  %25 = load i64, i64* %24, align 8
  br label %39

26:                                               ; preds = %1
  %27 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %13, i64 0, i32 31, i32 0
  %28 = load i64*, i64** %27, align 8
  %29 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %13, i64 0, i32 31, i32 1
  %30 = load i64*, i64** %29, align 8
  %31 = icmp eq i64* %28, %30
  br i1 %31, label %32, label %34

32:                                               ; preds = %26
  %33 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %13) #6
  br label %34

34:                                               ; preds = %32, %26
  %35 = phi i64* [ %33, %32 ], [ %28, %26 ]
  %36 = ptrtoint i64* %35 to i64
  %37 = add i64 %36, 8
  %38 = inttoptr i64 %37 to i64*
  store i64* %38, i64** %27, align 8
  store i64 %19, i64* %35, align 8
  br label %39

39:                                               ; preds = %23, %34
  %40 = phi i64 [ %25, %23 ], [ %19, %34 ]
  %41 = phi i64* [ %24, %23 ], [ %35, %34 ]
  %42 = and i64 %40, -4294967296
  %43 = add i64 %40, 15
  %44 = inttoptr i64 %43 to i32*
  %45 = load atomic i32, i32* %44 acquire, align 4
  %46 = zext i32 %45 to i64
  %47 = or i64 %42, %46
  %48 = add i64 %47, -1
  %49 = inttoptr i64 %48 to i32*
  %50 = load atomic i32, i32* %49 monotonic, align 4
  %51 = zext i32 %50 to i64
  %52 = or i64 %42, %51
  %53 = add i64 %52, 7
  %54 = inttoptr i64 %53 to i16*
  %55 = load atomic i16, i16* %54 monotonic, align 2
  %56 = icmp eq i16 %55, 100
  br i1 %56, label %57, label %63

57:                                               ; preds = %39
  %58 = add i64 %47, 11
  %59 = inttoptr i64 %58 to i32*
  %60 = load i32, i32* %59, align 4
  %61 = zext i32 %60 to i64
  %62 = or i64 %42, %61
  br label %63

63:                                               ; preds = %57, %39
  %64 = phi i64 [ %62, %57 ], [ %47, %39 ]
  %65 = and i64 %64, 1
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %91, label %67

67:                                               ; preds = %63
  %68 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %69 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %68, null
  br i1 %69, label %76, label %70

70:                                               ; preds = %67
  %71 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %68, i64 0, i32 0, i32 1
  %72 = load i8, i8* %71, align 8, !range !2
  %73 = icmp eq i8 %72, 0
  br i1 %73, label %76, label %74

74:                                               ; preds = %70
  %75 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %68, i64 0, i32 1, i64 0
  br label %84

76:                                               ; preds = %70, %67
  %77 = and i64 %64, -262144
  %78 = or i64 %77, 16
  %79 = inttoptr i64 %78 to i64*
  %80 = load i64, i64* %79, align 16
  %81 = add i64 %80, -41416
  %82 = inttoptr i64 %81 to %"class.v8::internal::Isolate"*
  %83 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %82, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %84

84:                                               ; preds = %76, %74
  %85 = phi i64* [ %83, %76 ], [ %75, %74 ]
  %86 = getelementptr inbounds i64, i64* %85, i64 4
  %87 = load i64, i64* %86, align 8
  %88 = trunc i64 %64 to i32
  %89 = trunc i64 %87 to i32
  %90 = icmp eq i32 %88, %89
  br i1 %90, label %95, label %91

91:                                               ; preds = %63, %84
  %92 = bitcast %"class.v8::internal::Script"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %92) #6
  %93 = getelementptr inbounds %"class.v8::internal::Script", %"class.v8::internal::Script"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %64, i64* %93, align 8
  %94 = call zeroext i1 @_ZNK2v88internal6Script16IsUserJavaScriptEv(%"class.v8::internal::Script"* nonnull %2) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %92) #6
  br i1 %94, label %97, label %95

95:                                               ; preds = %84, %91
  %96 = call fastcc i64* @_ZN2v88internal12_GLOBAL__N_130NativeCodeFunctionSourceStringENS0_6HandleINS0_18SharedFunctionInfoEEE(i64* %41)
  br label %341

97:                                               ; preds = %91
  %98 = inttoptr i64 %12 to %"class.v8::internal::Factory"*
  %99 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %98, i64 3960
  %100 = bitcast %"class.v8::internal::Factory"* %99 to i64*
  %101 = call i64* @_ZN2v88internal10JSReceiver15GetDataPropertyENS0_6HandleIS1_EENS2_INS0_4NameEEE(i64* %0, i64* %100)
  %102 = load i64, i64* %101, align 8
  %103 = and i64 %102, 1
  %104 = icmp eq i64 %103, 0
  br i1 %104, label %183, label %105

105:                                              ; preds = %97
  %106 = and i64 %102, -4294967296
  %107 = add i64 %102, -1
  %108 = inttoptr i64 %107 to i32*
  %109 = load atomic i32, i32* %108 monotonic, align 4
  %110 = zext i32 %109 to i64
  %111 = or i64 %106, %110
  %112 = add i64 %111, 7
  %113 = inttoptr i64 %112 to i16*
  %114 = load atomic i16, i16* %113 monotonic, align 2
  %115 = icmp eq i16 %114, 99
  br i1 %115, label %116, label %183

116:                                              ; preds = %105
  %117 = add i64 %102, 3
  %118 = inttoptr i64 %117 to i32*
  %119 = load i32, i32* %118, align 4
  %120 = ashr i32 %119, 1
  %121 = add i64 %102, 7
  %122 = inttoptr i64 %121 to i32*
  %123 = load i32, i32* %122, align 4
  %124 = ashr i32 %123, 1
  %125 = load i64, i64* %41, align 8
  %126 = and i64 %125, -4294967296
  %127 = add i64 %125, 15
  %128 = inttoptr i64 %127 to i32*
  %129 = load atomic i32, i32* %128 acquire, align 4
  %130 = zext i32 %129 to i64
  %131 = or i64 %126, %130
  %132 = add i64 %131, -1
  %133 = inttoptr i64 %132 to i32*
  %134 = load atomic i32, i32* %133 monotonic, align 4
  %135 = zext i32 %134 to i64
  %136 = or i64 %126, %135
  %137 = add i64 %136, 7
  %138 = inttoptr i64 %137 to i16*
  %139 = load atomic i16, i16* %138 monotonic, align 2
  %140 = icmp eq i16 %139, 100
  br i1 %140, label %141, label %147

141:                                              ; preds = %116
  %142 = add i64 %131, 11
  %143 = inttoptr i64 %142 to i32*
  %144 = load i32, i32* %143, align 4
  %145 = zext i32 %144 to i64
  %146 = or i64 %126, %145
  br label %147

147:                                              ; preds = %116, %141
  %148 = phi i64 [ %146, %141 ], [ %131, %116 ]
  %149 = and i64 %148, -4294967296
  %150 = add i64 %148, 3
  %151 = inttoptr i64 %150 to i32*
  %152 = load i32, i32* %151, align 4
  %153 = zext i32 %152 to i64
  %154 = or i64 %149, %153
  %155 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %20, align 8
  %156 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %155, null
  br i1 %156, label %159, label %157

157:                                              ; preds = %147
  %158 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %155, i64 %154) #6
  br label %172

159:                                              ; preds = %147
  %160 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %13, i64 0, i32 31, i32 0
  %161 = load i64*, i64** %160, align 8
  %162 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %13, i64 0, i32 31, i32 1
  %163 = load i64*, i64** %162, align 8
  %164 = icmp eq i64* %161, %163
  br i1 %164, label %165, label %167

165:                                              ; preds = %159
  %166 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %13) #6
  br label %167

167:                                              ; preds = %165, %159
  %168 = phi i64* [ %166, %165 ], [ %161, %159 ]
  %169 = ptrtoint i64* %168 to i64
  %170 = add i64 %169, 8
  %171 = inttoptr i64 %170 to i64*
  store i64* %171, i64** %160, align 8
  store i64 %154, i64* %168, align 8
  br label %172

172:                                              ; preds = %157, %167
  %173 = phi i64* [ %158, %157 ], [ %168, %167 ]
  %174 = icmp eq i32 %120, 0
  br i1 %174, label %175, label %181

175:                                              ; preds = %172
  %176 = load i64, i64* %173, align 8
  %177 = add i64 %176, 7
  %178 = inttoptr i64 %177 to i32*
  %179 = load i32, i32* %178, align 4
  %180 = icmp eq i32 %179, %124
  br i1 %180, label %341, label %181

181:                                              ; preds = %175, %172
  %182 = call i64* @_ZN2v88internal7Factory18NewProperSubStringENS0_6HandleINS0_6StringEEEii(%"class.v8::internal::Factory"* %98, i64* %173, i32 %120, i32 %124) #6
  br label %341

183:                                              ; preds = %97, %105
  %184 = bitcast %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %184) #6
  %185 = load i64, i64* %41, align 8
  %186 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %185, i64* %186, align 8
  %187 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %3, i64 0, i32 0
  %188 = call zeroext i1 @_ZNK2v88internal18SharedFunctionInfo13HasSourceCodeEv(%"class.v8::internal::SharedFunctionInfo"* nonnull %187) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %184) #6
  br i1 %188, label %191, label %189

189:                                              ; preds = %183
  %190 = call fastcc i64* @_ZN2v88internal12_GLOBAL__N_130NativeCodeFunctionSourceStringENS0_6HandleINS0_18SharedFunctionInfoEEE(i64* %41)
  br label %341

191:                                              ; preds = %183
  %192 = load i64, i64* %41, align 8
  %193 = and i64 %192, -4294967296
  %194 = add i64 %192, 3
  %195 = inttoptr i64 %194 to i32*
  %196 = load atomic i32, i32* %195 acquire, align 4
  %197 = zext i32 %196 to i64
  %198 = and i64 %197, 1
  %199 = icmp eq i64 %198, 0
  br i1 %199, label %322, label %200

200:                                              ; preds = %191
  %201 = or i64 %193, %197
  %202 = add i64 %201, -1
  %203 = inttoptr i64 %202 to i32*
  %204 = load atomic i32, i32* %203 monotonic, align 4
  %205 = zext i32 %204 to i64
  %206 = or i64 %193, %205
  %207 = add i64 %206, 7
  %208 = inttoptr i64 %207 to i16*
  %209 = load atomic i16, i16* %208 monotonic, align 2
  %210 = icmp eq i16 %209, 73
  br i1 %210, label %211, label %322

211:                                              ; preds = %200
  %212 = bitcast %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %212) #6
  %213 = load i64, i64* %41, align 8
  %214 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %213, i64* %214, align 8
  %215 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %4, i64 0, i32 0
  %216 = call i64 @_ZNK2v88internal18SharedFunctionInfo27wasm_exported_function_dataEv(%"class.v8::internal::SharedFunctionInfo"* nonnull %215) #6
  %217 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %20, align 8
  %218 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %217, null
  br i1 %218, label %221, label %219

219:                                              ; preds = %211
  %220 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %217, i64 %216) #6
  br label %234

221:                                              ; preds = %211
  %222 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %13, i64 0, i32 31, i32 0
  %223 = load i64*, i64** %222, align 8
  %224 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %13, i64 0, i32 31, i32 1
  %225 = load i64*, i64** %224, align 8
  %226 = icmp eq i64* %223, %225
  br i1 %226, label %227, label %229

227:                                              ; preds = %221
  %228 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %13) #6
  br label %229

229:                                              ; preds = %227, %221
  %230 = phi i64* [ %228, %227 ], [ %223, %221 ]
  %231 = ptrtoint i64* %230 to i64
  %232 = add i64 %231, 8
  %233 = inttoptr i64 %232 to i64*
  store i64* %233, i64** %222, align 8
  store i64 %216, i64* %230, align 8
  br label %234

234:                                              ; preds = %219, %229
  %235 = phi i64* [ %220, %219 ], [ %230, %229 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %212) #6
  %236 = bitcast %"class.v8::internal::WasmInstanceObject"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %236) #6
  %237 = load i64, i64* %235, align 8
  %238 = and i64 %237, -4294967296
  %239 = add i64 %237, 19
  %240 = inttoptr i64 %239 to i32*
  %241 = load i32, i32* %240, align 4
  %242 = zext i32 %241 to i64
  %243 = or i64 %238, %242
  %244 = getelementptr inbounds %"class.v8::internal::WasmInstanceObject", %"class.v8::internal::WasmInstanceObject"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %243, i64* %244, align 8
  %245 = call %"struct.v8::internal::wasm::WasmModule"* @_ZN2v88internal18WasmInstanceObject6moduleEv(%"class.v8::internal::WasmInstanceObject"* nonnull %5) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %236) #6
  %246 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModule", %"struct.v8::internal::wasm::WasmModule"* %245, i64 0, i32 33
  %247 = load i8, i8* %246, align 8
  %248 = icmp eq i8 %247, 0
  br i1 %248, label %322, label %249

249:                                              ; preds = %234
  %250 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModule", %"struct.v8::internal::wasm::WasmModule"* %245, i64 0, i32 36, i32 0, i32 0, i32 0
  %251 = load %"class.v8::internal::wasm::AsmJsOffsetInformation"*, %"class.v8::internal::wasm::AsmJsOffsetInformation"** %250, align 8
  %252 = load i64, i64* %235, align 8
  %253 = add i64 %252, 23
  %254 = inttoptr i64 %253 to i32*
  %255 = load i32, i32* %254, align 4
  %256 = ashr i32 %255, 1
  %257 = getelementptr inbounds %"struct.v8::internal::wasm::WasmModule", %"struct.v8::internal::wasm::WasmModule"* %245, i64 0, i32 13
  %258 = load i32, i32* %257, align 4
  %259 = sub i32 %256, %258
  %260 = call i64 @_ZN2v88internal4wasm22AsmJsOffsetInformation18GetFunctionOffsetsEi(%"class.v8::internal::wasm::AsmJsOffsetInformation"* %251, i32 %259) #6
  %261 = trunc i64 %260 to i32
  %262 = lshr i64 %260, 32
  %263 = trunc i64 %262 to i32
  %264 = load i64, i64* %41, align 8
  %265 = and i64 %264, -4294967296
  %266 = add i64 %264, 15
  %267 = inttoptr i64 %266 to i32*
  %268 = load atomic i32, i32* %267 acquire, align 4
  %269 = zext i32 %268 to i64
  %270 = or i64 %265, %269
  %271 = add i64 %270, -1
  %272 = inttoptr i64 %271 to i32*
  %273 = load atomic i32, i32* %272 monotonic, align 4
  %274 = zext i32 %273 to i64
  %275 = or i64 %265, %274
  %276 = add i64 %275, 7
  %277 = inttoptr i64 %276 to i16*
  %278 = load atomic i16, i16* %277 monotonic, align 2
  %279 = icmp eq i16 %278, 100
  br i1 %279, label %280, label %286

280:                                              ; preds = %249
  %281 = add i64 %270, 11
  %282 = inttoptr i64 %281 to i32*
  %283 = load i32, i32* %282, align 4
  %284 = zext i32 %283 to i64
  %285 = or i64 %265, %284
  br label %286

286:                                              ; preds = %249, %280
  %287 = phi i64 [ %285, %280 ], [ %270, %249 ]
  %288 = and i64 %287, -4294967296
  %289 = add i64 %287, 3
  %290 = inttoptr i64 %289 to i32*
  %291 = load i32, i32* %290, align 4
  %292 = zext i32 %291 to i64
  %293 = or i64 %288, %292
  %294 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %20, align 8
  %295 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %294, null
  br i1 %295, label %298, label %296

296:                                              ; preds = %286
  %297 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %294, i64 %293) #6
  br label %311

298:                                              ; preds = %286
  %299 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %13, i64 0, i32 31, i32 0
  %300 = load i64*, i64** %299, align 8
  %301 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %13, i64 0, i32 31, i32 1
  %302 = load i64*, i64** %301, align 8
  %303 = icmp eq i64* %300, %302
  br i1 %303, label %304, label %306

304:                                              ; preds = %298
  %305 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %13) #6
  br label %306

306:                                              ; preds = %304, %298
  %307 = phi i64* [ %305, %304 ], [ %300, %298 ]
  %308 = ptrtoint i64* %307 to i64
  %309 = add i64 %308, 8
  %310 = inttoptr i64 %309 to i64*
  store i64* %310, i64** %299, align 8
  store i64 %293, i64* %307, align 8
  br label %311

311:                                              ; preds = %296, %306
  %312 = phi i64* [ %297, %296 ], [ %307, %306 ]
  %313 = icmp eq i32 %261, 0
  br i1 %313, label %314, label %320

314:                                              ; preds = %311
  %315 = load i64, i64* %312, align 8
  %316 = add i64 %315, 7
  %317 = inttoptr i64 %316 to i32*
  %318 = load i32, i32* %317, align 4
  %319 = icmp eq i32 %318, %263
  br i1 %319, label %341, label %320

320:                                              ; preds = %314, %311
  %321 = call i64* @_ZN2v88internal7Factory18NewProperSubStringENS0_6HandleINS0_6StringEEEii(%"class.v8::internal::Factory"* %98, i64* %312, i32 %261, i32 %263) #6
  br label %341

322:                                              ; preds = %234, %191, %200
  %323 = bitcast %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %323) #6
  %324 = load i64, i64* %41, align 8
  %325 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %324, i64* %325, align 8
  %326 = add i64 %324, 23
  %327 = inttoptr i64 %326 to i16*
  %328 = load i16, i16* %327, align 2
  %329 = icmp eq i16 %328, -1
  br i1 %329, label %330, label %331

330:                                              ; preds = %322
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %323) #6
  br label %337

331:                                              ; preds = %322
  %332 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %6, i64 0, i32 0
  %333 = zext i16 %328 to i32
  %334 = call i32 @_ZNK2v88internal18SharedFunctionInfo13StartPositionEv(%"class.v8::internal::SharedFunctionInfo"* nonnull %332) #6
  %335 = sub nsw i32 %334, %333
  %336 = icmp eq i32 %335, -1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %323) #6
  br i1 %336, label %337, label %339

337:                                              ; preds = %330, %331
  call void @_ZN2v88internal7Isolate10CountUsageENS_7Isolate17UseCounterFeatureE(%"class.v8::internal::Isolate"* %13, i32 49) #6
  %338 = call fastcc i64* @_ZN2v88internal12_GLOBAL__N_130NativeCodeFunctionSourceStringENS0_6HandleINS0_18SharedFunctionInfoEEE(i64* %41)
  br label %341

339:                                              ; preds = %331
  %340 = call i64* @_ZN2v88internal18SharedFunctionInfo20GetSourceCodeHarmonyENS0_6HandleIS1_EE(i64* %41) #6
  br label %341

341:                                              ; preds = %320, %314, %189, %337, %339, %175, %181, %95
  %342 = phi i64* [ %96, %95 ], [ %190, %189 ], [ %338, %337 ], [ %340, %339 ], [ %182, %181 ], [ %173, %175 ], [ %312, %314 ], [ %321, %320 ]
  ret i64* %342
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i64* @_ZN2v88internal12_GLOBAL__N_130NativeCodeFunctionSourceStringENS0_6HandleINS0_18SharedFunctionInfoEEE(i64*) unnamed_addr #0 {
  %2 = alloca %"class.v8::internal::IncrementalStringBuilder", align 8
  %3 = alloca %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", align 8
  %4 = load i64, i64* %0, align 8
  %5 = and i64 %4, -262144
  %6 = or i64 %5, 16
  %7 = inttoptr i64 %6 to i64*
  %8 = load i64, i64* %7, align 16
  %9 = add i64 %8, -41416
  %10 = inttoptr i64 %9 to %"class.v8::internal::Isolate"*
  %11 = bitcast %"class.v8::internal::IncrementalStringBuilder"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %11) #6
  call void @_ZN2v88internal24IncrementalStringBuilderC1EPNS0_7IsolateE(%"class.v8::internal::IncrementalStringBuilder"* nonnull %2, %"class.v8::internal::Isolate"* %10) #6
  %12 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 6, i32 0, i32 0
  %16 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 4
  %17 = getelementptr inbounds %"class.v8::internal::IncrementalStringBuilder", %"class.v8::internal::IncrementalStringBuilder"* %2, i64 0, i32 3
  %18 = load i64*, i64** %15, align 8
  %19 = load i64, i64* %18, align 8
  %20 = load i32, i32* %16, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %16, align 4
  br i1 %14, label %31, label %22

22:                                               ; preds = %1
  %23 = shl nsw i32 %20, 1
  %24 = sext i32 %23 to i64
  %25 = add i64 %19, 11
  %26 = add i64 %25, %24
  %27 = inttoptr i64 %26 to i16*
  store i16 102, i16* %27, align 2
  %28 = load i32, i32* %16, align 4
  %29 = load i32, i32* %17, align 8
  %30 = icmp eq i32 %28, %29
  br i1 %30, label %53, label %55

31:                                               ; preds = %1
  %32 = sext i32 %20 to i64
  %33 = add i64 %19, 11
  %34 = add i64 %33, %32
  %35 = inttoptr i64 %34 to i8*
  store i8 102, i8* %35, align 1
  %36 = load i32, i32* %16, align 4
  %37 = load i32, i32* %17, align 8
  %38 = icmp eq i32 %36, %37
  br i1 %38, label %39, label %41

39:                                               ; preds = %31
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %2) #6
  %40 = load i32, i32* %16, align 4
  br label %41

41:                                               ; preds = %39, %31
  %42 = phi i32 [ %40, %39 ], [ %36, %31 ]
  %43 = load i64*, i64** %15, align 8
  %44 = load i64, i64* %43, align 8
  %45 = add nsw i32 %42, 1
  store i32 %45, i32* %16, align 4
  %46 = sext i32 %42 to i64
  %47 = add i64 %44, 11
  %48 = add i64 %47, %46
  %49 = inttoptr i64 %48 to i8*
  store i8 117, i8* %49, align 1
  %50 = load i32, i32* %16, align 4
  %51 = load i32, i32* %17, align 8
  %52 = icmp eq i32 %50, %51
  br i1 %52, label %141, label %143

53:                                               ; preds = %22
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %2) #6
  %54 = load i32, i32* %16, align 4
  br label %55

55:                                               ; preds = %53, %22
  %56 = phi i32 [ %54, %53 ], [ %28, %22 ]
  %57 = load i64*, i64** %15, align 8
  %58 = load i64, i64* %57, align 8
  %59 = add nsw i32 %56, 1
  store i32 %59, i32* %16, align 4
  %60 = shl nsw i32 %56, 1
  %61 = sext i32 %60 to i64
  %62 = add i64 %58, 11
  %63 = add i64 %62, %61
  %64 = inttoptr i64 %63 to i16*
  store i16 117, i16* %64, align 2
  %65 = load i32, i32* %16, align 4
  %66 = load i32, i32* %17, align 8
  %67 = icmp eq i32 %65, %66
  br i1 %67, label %240, label %242

68:                                               ; preds = %332, %345, %227, %239
  %69 = bitcast %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %69) #6
  %70 = load i64, i64* %0, align 8
  %71 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %70, i64* %71, align 8
  %72 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %3, i64 0, i32 0
  %73 = call i64 @_ZNK2v88internal18SharedFunctionInfo4NameEv(%"class.v8::internal::SharedFunctionInfo"* nonnull %72)
  %74 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %10, i64 0, i32 31, i32 4
  %75 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %74, align 8
  %76 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %68
  %78 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %75, i64 %73) #6
  br label %92

79:                                               ; preds = %68
  %80 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %10, i64 0, i32 31, i32 0
  %81 = load i64*, i64** %80, align 8
  %82 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %10, i64 0, i32 31, i32 1
  %83 = load i64*, i64** %82, align 8
  %84 = icmp eq i64* %81, %83
  br i1 %84, label %85, label %87

85:                                               ; preds = %79
  %86 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %10) #6
  br label %87

87:                                               ; preds = %85, %79
  %88 = phi i64* [ %86, %85 ], [ %81, %79 ]
  %89 = ptrtoint i64* %88 to i64
  %90 = add i64 %89, 8
  %91 = inttoptr i64 %90 to i64*
  store i64* %91, i64** %80, align 8
  store i64 %73, i64* %88, align 8
  br label %92

92:                                               ; preds = %77, %87
  %93 = phi i64* [ %78, %77 ], [ %88, %87 ]
  call void @_ZN2v88internal24IncrementalStringBuilder12AppendStringENS0_6HandleINS0_6StringEEE(%"class.v8::internal::IncrementalStringBuilder"* nonnull %2, i64* %93) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %69) #6
  %94 = load i32, i32* %12, align 8
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %115

96:                                               ; preds = %92, %112
  %97 = phi i8 [ %113, %112 ], [ 40, %92 ]
  %98 = phi i8* [ %99, %112 ], [ getelementptr inbounds ([21 x i8], [21 x i8]* @.str.20, i64 0, i64 0), %92 ]
  %99 = getelementptr inbounds i8, i8* %98, i64 1
  %100 = load i64*, i64** %15, align 8
  %101 = load i64, i64* %100, align 8
  %102 = load i32, i32* %16, align 4
  %103 = add nsw i32 %102, 1
  store i32 %103, i32* %16, align 4
  %104 = sext i32 %102 to i64
  %105 = add i64 %101, 11
  %106 = add i64 %105, %104
  %107 = inttoptr i64 %106 to i8*
  store i8 %97, i8* %107, align 1
  %108 = load i32, i32* %16, align 4
  %109 = load i32, i32* %17, align 8
  %110 = icmp eq i32 %108, %109
  br i1 %110, label %111, label %112

111:                                              ; preds = %96
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %2) #6
  br label %112

112:                                              ; preds = %111, %96
  %113 = load i8, i8* %99, align 1
  %114 = icmp eq i8* %99, getelementptr inbounds ([21 x i8], [21 x i8]* @.str.20, i64 0, i64 20)
  br i1 %114, label %136, label %96

115:                                              ; preds = %92, %133
  %116 = phi i8 [ %134, %133 ], [ 40, %92 ]
  %117 = phi i8* [ %118, %133 ], [ getelementptr inbounds ([21 x i8], [21 x i8]* @.str.20, i64 0, i64 0), %92 ]
  %118 = getelementptr inbounds i8, i8* %117, i64 1
  %119 = load i64*, i64** %15, align 8
  %120 = load i64, i64* %119, align 8
  %121 = load i32, i32* %16, align 4
  %122 = add nsw i32 %121, 1
  store i32 %122, i32* %16, align 4
  %123 = zext i8 %116 to i16
  %124 = shl nsw i32 %121, 1
  %125 = sext i32 %124 to i64
  %126 = add i64 %120, 11
  %127 = add i64 %126, %125
  %128 = inttoptr i64 %127 to i16*
  store i16 %123, i16* %128, align 2
  %129 = load i32, i32* %16, align 4
  %130 = load i32, i32* %17, align 8
  %131 = icmp eq i32 %129, %130
  br i1 %131, label %132, label %133

132:                                              ; preds = %115
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %2) #6
  br label %133

133:                                              ; preds = %132, %115
  %134 = load i8, i8* %118, align 1
  %135 = icmp eq i8* %118, getelementptr inbounds ([21 x i8], [21 x i8]* @.str.20, i64 0, i64 20)
  br i1 %135, label %136, label %115

136:                                              ; preds = %133, %112
  %137 = call i64* @_ZN2v88internal24IncrementalStringBuilder6FinishEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %2) #6
  %138 = icmp eq i64* %137, null
  br i1 %138, label %139, label %140, !prof !5

139:                                              ; preds = %136
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.21, i64 0, i64 0)) #8
  unreachable

140:                                              ; preds = %136
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %11) #6
  ret i64* %137

141:                                              ; preds = %41
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %2) #6
  %142 = load i32, i32* %16, align 4
  br label %143

143:                                              ; preds = %141, %41
  %144 = phi i32 [ %142, %141 ], [ %50, %41 ]
  %145 = load i64*, i64** %15, align 8
  %146 = load i64, i64* %145, align 8
  %147 = add nsw i32 %144, 1
  store i32 %147, i32* %16, align 4
  %148 = sext i32 %144 to i64
  %149 = add i64 %146, 11
  %150 = add i64 %149, %148
  %151 = inttoptr i64 %150 to i8*
  store i8 110, i8* %151, align 1
  %152 = load i32, i32* %16, align 4
  %153 = load i32, i32* %17, align 8
  %154 = icmp eq i32 %152, %153
  br i1 %154, label %155, label %157

155:                                              ; preds = %143
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %2) #6
  %156 = load i32, i32* %16, align 4
  br label %157

157:                                              ; preds = %155, %143
  %158 = phi i32 [ %156, %155 ], [ %152, %143 ]
  %159 = load i64*, i64** %15, align 8
  %160 = load i64, i64* %159, align 8
  %161 = add nsw i32 %158, 1
  store i32 %161, i32* %16, align 4
  %162 = sext i32 %158 to i64
  %163 = add i64 %160, 11
  %164 = add i64 %163, %162
  %165 = inttoptr i64 %164 to i8*
  store i8 99, i8* %165, align 1
  %166 = load i32, i32* %16, align 4
  %167 = load i32, i32* %17, align 8
  %168 = icmp eq i32 %166, %167
  br i1 %168, label %169, label %171

169:                                              ; preds = %157
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %2) #6
  %170 = load i32, i32* %16, align 4
  br label %171

171:                                              ; preds = %169, %157
  %172 = phi i32 [ %170, %169 ], [ %166, %157 ]
  %173 = load i64*, i64** %15, align 8
  %174 = load i64, i64* %173, align 8
  %175 = add nsw i32 %172, 1
  store i32 %175, i32* %16, align 4
  %176 = sext i32 %172 to i64
  %177 = add i64 %174, 11
  %178 = add i64 %177, %176
  %179 = inttoptr i64 %178 to i8*
  store i8 116, i8* %179, align 1
  %180 = load i32, i32* %16, align 4
  %181 = load i32, i32* %17, align 8
  %182 = icmp eq i32 %180, %181
  br i1 %182, label %183, label %185

183:                                              ; preds = %171
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %2) #6
  %184 = load i32, i32* %16, align 4
  br label %185

185:                                              ; preds = %183, %171
  %186 = phi i32 [ %184, %183 ], [ %180, %171 ]
  %187 = load i64*, i64** %15, align 8
  %188 = load i64, i64* %187, align 8
  %189 = add nsw i32 %186, 1
  store i32 %189, i32* %16, align 4
  %190 = sext i32 %186 to i64
  %191 = add i64 %188, 11
  %192 = add i64 %191, %190
  %193 = inttoptr i64 %192 to i8*
  store i8 105, i8* %193, align 1
  %194 = load i32, i32* %16, align 4
  %195 = load i32, i32* %17, align 8
  %196 = icmp eq i32 %194, %195
  br i1 %196, label %197, label %199

197:                                              ; preds = %185
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %2) #6
  %198 = load i32, i32* %16, align 4
  br label %199

199:                                              ; preds = %197, %185
  %200 = phi i32 [ %198, %197 ], [ %194, %185 ]
  %201 = load i64*, i64** %15, align 8
  %202 = load i64, i64* %201, align 8
  %203 = add nsw i32 %200, 1
  store i32 %203, i32* %16, align 4
  %204 = sext i32 %200 to i64
  %205 = add i64 %202, 11
  %206 = add i64 %205, %204
  %207 = inttoptr i64 %206 to i8*
  store i8 111, i8* %207, align 1
  %208 = load i32, i32* %16, align 4
  %209 = load i32, i32* %17, align 8
  %210 = icmp eq i32 %208, %209
  br i1 %210, label %211, label %213

211:                                              ; preds = %199
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %2) #6
  %212 = load i32, i32* %16, align 4
  br label %213

213:                                              ; preds = %211, %199
  %214 = phi i32 [ %212, %211 ], [ %208, %199 ]
  %215 = load i64*, i64** %15, align 8
  %216 = load i64, i64* %215, align 8
  %217 = add nsw i32 %214, 1
  store i32 %217, i32* %16, align 4
  %218 = sext i32 %214 to i64
  %219 = add i64 %216, 11
  %220 = add i64 %219, %218
  %221 = inttoptr i64 %220 to i8*
  store i8 110, i8* %221, align 1
  %222 = load i32, i32* %16, align 4
  %223 = load i32, i32* %17, align 8
  %224 = icmp eq i32 %222, %223
  br i1 %224, label %225, label %227

225:                                              ; preds = %213
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %2) #6
  %226 = load i32, i32* %16, align 4
  br label %227

227:                                              ; preds = %225, %213
  %228 = phi i32 [ %226, %225 ], [ %222, %213 ]
  %229 = load i64*, i64** %15, align 8
  %230 = load i64, i64* %229, align 8
  %231 = add nsw i32 %228, 1
  store i32 %231, i32* %16, align 4
  %232 = sext i32 %228 to i64
  %233 = add i64 %230, 11
  %234 = add i64 %233, %232
  %235 = inttoptr i64 %234 to i8*
  store i8 32, i8* %235, align 1
  %236 = load i32, i32* %16, align 4
  %237 = load i32, i32* %17, align 8
  %238 = icmp eq i32 %236, %237
  br i1 %238, label %239, label %68

239:                                              ; preds = %227
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %2) #6
  br label %68

240:                                              ; preds = %55
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %2) #6
  %241 = load i32, i32* %16, align 4
  br label %242

242:                                              ; preds = %240, %55
  %243 = phi i32 [ %241, %240 ], [ %65, %55 ]
  %244 = load i64*, i64** %15, align 8
  %245 = load i64, i64* %244, align 8
  %246 = add nsw i32 %243, 1
  store i32 %246, i32* %16, align 4
  %247 = shl nsw i32 %243, 1
  %248 = sext i32 %247 to i64
  %249 = add i64 %245, 11
  %250 = add i64 %249, %248
  %251 = inttoptr i64 %250 to i16*
  store i16 110, i16* %251, align 2
  %252 = load i32, i32* %16, align 4
  %253 = load i32, i32* %17, align 8
  %254 = icmp eq i32 %252, %253
  br i1 %254, label %255, label %257

255:                                              ; preds = %242
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %2) #6
  %256 = load i32, i32* %16, align 4
  br label %257

257:                                              ; preds = %255, %242
  %258 = phi i32 [ %256, %255 ], [ %252, %242 ]
  %259 = load i64*, i64** %15, align 8
  %260 = load i64, i64* %259, align 8
  %261 = add nsw i32 %258, 1
  store i32 %261, i32* %16, align 4
  %262 = shl nsw i32 %258, 1
  %263 = sext i32 %262 to i64
  %264 = add i64 %260, 11
  %265 = add i64 %264, %263
  %266 = inttoptr i64 %265 to i16*
  store i16 99, i16* %266, align 2
  %267 = load i32, i32* %16, align 4
  %268 = load i32, i32* %17, align 8
  %269 = icmp eq i32 %267, %268
  br i1 %269, label %270, label %272

270:                                              ; preds = %257
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %2) #6
  %271 = load i32, i32* %16, align 4
  br label %272

272:                                              ; preds = %270, %257
  %273 = phi i32 [ %271, %270 ], [ %267, %257 ]
  %274 = load i64*, i64** %15, align 8
  %275 = load i64, i64* %274, align 8
  %276 = add nsw i32 %273, 1
  store i32 %276, i32* %16, align 4
  %277 = shl nsw i32 %273, 1
  %278 = sext i32 %277 to i64
  %279 = add i64 %275, 11
  %280 = add i64 %279, %278
  %281 = inttoptr i64 %280 to i16*
  store i16 116, i16* %281, align 2
  %282 = load i32, i32* %16, align 4
  %283 = load i32, i32* %17, align 8
  %284 = icmp eq i32 %282, %283
  br i1 %284, label %285, label %287

285:                                              ; preds = %272
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %2) #6
  %286 = load i32, i32* %16, align 4
  br label %287

287:                                              ; preds = %285, %272
  %288 = phi i32 [ %286, %285 ], [ %282, %272 ]
  %289 = load i64*, i64** %15, align 8
  %290 = load i64, i64* %289, align 8
  %291 = add nsw i32 %288, 1
  store i32 %291, i32* %16, align 4
  %292 = shl nsw i32 %288, 1
  %293 = sext i32 %292 to i64
  %294 = add i64 %290, 11
  %295 = add i64 %294, %293
  %296 = inttoptr i64 %295 to i16*
  store i16 105, i16* %296, align 2
  %297 = load i32, i32* %16, align 4
  %298 = load i32, i32* %17, align 8
  %299 = icmp eq i32 %297, %298
  br i1 %299, label %300, label %302

300:                                              ; preds = %287
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %2) #6
  %301 = load i32, i32* %16, align 4
  br label %302

302:                                              ; preds = %300, %287
  %303 = phi i32 [ %301, %300 ], [ %297, %287 ]
  %304 = load i64*, i64** %15, align 8
  %305 = load i64, i64* %304, align 8
  %306 = add nsw i32 %303, 1
  store i32 %306, i32* %16, align 4
  %307 = shl nsw i32 %303, 1
  %308 = sext i32 %307 to i64
  %309 = add i64 %305, 11
  %310 = add i64 %309, %308
  %311 = inttoptr i64 %310 to i16*
  store i16 111, i16* %311, align 2
  %312 = load i32, i32* %16, align 4
  %313 = load i32, i32* %17, align 8
  %314 = icmp eq i32 %312, %313
  br i1 %314, label %315, label %317

315:                                              ; preds = %302
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %2) #6
  %316 = load i32, i32* %16, align 4
  br label %317

317:                                              ; preds = %315, %302
  %318 = phi i32 [ %316, %315 ], [ %312, %302 ]
  %319 = load i64*, i64** %15, align 8
  %320 = load i64, i64* %319, align 8
  %321 = add nsw i32 %318, 1
  store i32 %321, i32* %16, align 4
  %322 = shl nsw i32 %318, 1
  %323 = sext i32 %322 to i64
  %324 = add i64 %320, 11
  %325 = add i64 %324, %323
  %326 = inttoptr i64 %325 to i16*
  store i16 110, i16* %326, align 2
  %327 = load i32, i32* %16, align 4
  %328 = load i32, i32* %17, align 8
  %329 = icmp eq i32 %327, %328
  br i1 %329, label %330, label %332

330:                                              ; preds = %317
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %2) #6
  %331 = load i32, i32* %16, align 4
  br label %332

332:                                              ; preds = %330, %317
  %333 = phi i32 [ %331, %330 ], [ %327, %317 ]
  %334 = load i64*, i64** %15, align 8
  %335 = load i64, i64* %334, align 8
  %336 = add nsw i32 %333, 1
  store i32 %336, i32* %16, align 4
  %337 = shl nsw i32 %333, 1
  %338 = sext i32 %337 to i64
  %339 = add i64 %335, 11
  %340 = add i64 %339, %338
  %341 = inttoptr i64 %340 to i16*
  store i16 32, i16* %341, align 2
  %342 = load i32, i32* %16, align 4
  %343 = load i32, i32* %17, align 8
  %344 = icmp eq i32 %342, %343
  br i1 %344, label %345, label %68

345:                                              ; preds = %332
  call void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"* nonnull %2) #6
  br label %68
}

declare zeroext i1 @_ZNK2v88internal18SharedFunctionInfo13HasSourceCodeEv(%"class.v8::internal::SharedFunctionInfo"*) local_unnamed_addr #2

declare i64 @_ZNK2v88internal18SharedFunctionInfo27wasm_exported_function_dataEv(%"class.v8::internal::SharedFunctionInfo"*) local_unnamed_addr #2

declare %"struct.v8::internal::wasm::WasmModule"* @_ZN2v88internal18WasmInstanceObject6moduleEv(%"class.v8::internal::WasmInstanceObject"*) local_unnamed_addr #2

declare i64 @_ZN2v88internal4wasm22AsmJsOffsetInformation18GetFunctionOffsetsEi(%"class.v8::internal::wasm::AsmJsOffsetInformation"*, i32) local_unnamed_addr #2

declare void @_ZN2v88internal7Isolate10CountUsageENS_7Isolate17UseCounterFeatureE(%"class.v8::internal::Isolate"*, i32) local_unnamed_addr #2

declare i64* @_ZN2v88internal18SharedFunctionInfo20GetSourceCodeHarmonyENS0_6HandleIS1_EE(i64*) local_unnamed_addr #2

declare zeroext i1 @_ZN2v88internal8Compiler7CompileEPNS0_7IsolateENS0_6HandleINS0_10JSFunctionEEENS1_18ClearExceptionFlagEPNS0_15IsCompiledScopeE(%"class.v8::internal::Isolate"*, i64*, i32, %"class.v8::internal::IsCompiledScope"*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal17PrototypeIterator7AdvanceEv(%"class.v8::internal::PrototypeIterator"*) local_unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %0, i64 0, i32 2
  %3 = getelementptr inbounds %"class.v8::internal::Handle.971", %"class.v8::internal::Handle.971"* %2, i64 0, i32 0, i32 0
  %4 = load i64*, i64** %3, align 8
  %5 = icmp eq i64* %4, null
  br i1 %5, label %6, label %28

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %0, i64 0, i32 1, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = and i64 %8, 1
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %47, label %11

11:                                               ; preds = %6
  %12 = and i64 %8, -4294967296
  %13 = add i64 %8, -1
  %14 = inttoptr i64 %13 to i32*
  %15 = load atomic i32, i32* %14 monotonic, align 4
  %16 = zext i32 %15 to i64
  %17 = or i64 %12, %16
  %18 = add i64 %17, 7
  %19 = inttoptr i64 %18 to i16*
  %20 = load atomic i16, i16* %19 monotonic, align 2
  %21 = icmp eq i16 %20, 188
  br i1 %21, label %22, label %47

22:                                               ; preds = %11
  %23 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %0, i64 0, i32 4
  store i8 1, i8* %23, align 4
  %24 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %0, i64 0, i32 0
  %25 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %24, align 8
  %26 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %25, i64 0, i32 0, i32 7, i32 0, i64 6
  %27 = load i64, i64* %26, align 8
  store i64 %27, i64* %7, align 8
  br label %104

28:                                               ; preds = %1
  %29 = load i64, i64* %4, align 8
  %30 = and i64 %29, -4294967296
  %31 = add i64 %29, -1
  %32 = inttoptr i64 %31 to i32*
  %33 = load atomic i32, i32* %32 monotonic, align 4
  %34 = zext i32 %33 to i64
  %35 = or i64 %30, %34
  %36 = add i64 %35, 7
  %37 = inttoptr i64 %36 to i16*
  %38 = load atomic i16, i16* %37 monotonic, align 2
  %39 = icmp eq i16 %38, 188
  br i1 %39, label %40, label %47

40:                                               ; preds = %28
  %41 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %0, i64 0, i32 4
  store i8 1, i8* %41, align 4
  %42 = bitcast %"class.v8::internal::PrototypeIterator"* %0 to %"class.v8::internal::Factory"**
  %43 = load %"class.v8::internal::Factory"*, %"class.v8::internal::Factory"** %42, align 8
  %44 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %43, i64 176
  %45 = ptrtoint %"class.v8::internal::Factory"* %44 to i64
  %46 = bitcast %"class.v8::internal::Handle.971"* %2 to i64*
  store i64 %45, i64* %46, align 8
  br label %104

47:                                               ; preds = %6, %11, %28
  %48 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %0, i64 0, i32 2, i32 0, i32 0
  %49 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %0, i64 0, i32 1, i32 0, i32 0
  %50 = select i1 %5, i64* %49, i64* %4
  %51 = load i64, i64* %50, align 8
  %52 = and i64 %51, -4294967296
  %53 = add i64 %51, -1
  %54 = inttoptr i64 %53 to i32*
  %55 = load atomic i32, i32* %54 monotonic, align 4
  %56 = zext i32 %55 to i64
  %57 = or i64 %52, %56
  %58 = add i64 %57, 15
  %59 = inttoptr i64 %58 to i32*
  %60 = load i32, i32* %59, align 4
  %61 = zext i32 %60 to i64
  %62 = or i64 %52, %61
  %63 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %0, i64 0, i32 0
  %64 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %63, align 8
  %65 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %64, i64 0, i32 0, i32 7, i32 0, i64 6
  %66 = load i64, i64* %65, align 8
  %67 = trunc i64 %66 to i32
  %68 = icmp eq i32 %60, %67
  br i1 %68, label %79, label %69

69:                                               ; preds = %47
  %70 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %0, i64 0, i32 3
  %71 = load i32, i32* %70, align 8
  %72 = icmp eq i32 %71, 1
  br i1 %72, label %73, label %79

73:                                               ; preds = %69
  %74 = add i64 %57, 7
  %75 = inttoptr i64 %74 to i16*
  %76 = load atomic i16, i16* %75 monotonic, align 2
  %77 = icmp ne i16 %76, 190
  %78 = zext i1 %77 to i8
  br label %79

79:                                               ; preds = %73, %69, %47
  %80 = phi i8 [ 1, %47 ], [ 0, %69 ], [ %78, %73 ]
  %81 = getelementptr inbounds %"class.v8::internal::PrototypeIterator", %"class.v8::internal::PrototypeIterator"* %0, i64 0, i32 4
  store i8 %80, i8* %81, align 4
  br i1 %5, label %82, label %83

82:                                               ; preds = %79
  store i64 %62, i64* %49, align 8
  br label %104

83:                                               ; preds = %79
  %84 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %64, i64 0, i32 31, i32 4
  %85 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %84, align 8
  %86 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %85, null
  br i1 %86, label %89, label %87

87:                                               ; preds = %83
  %88 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %85, i64 %62) #6
  br label %102

89:                                               ; preds = %83
  %90 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %64, i64 0, i32 31, i32 0
  %91 = load i64*, i64** %90, align 8
  %92 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %64, i64 0, i32 31, i32 1
  %93 = load i64*, i64** %92, align 8
  %94 = icmp eq i64* %91, %93
  br i1 %94, label %95, label %97

95:                                               ; preds = %89
  %96 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %64) #6
  br label %97

97:                                               ; preds = %95, %89
  %98 = phi i64* [ %96, %95 ], [ %91, %89 ]
  %99 = ptrtoint i64* %98 to i64
  %100 = add i64 %99, 8
  %101 = inttoptr i64 %100 to i64*
  store i64* %101, i64** %90, align 8
  store i64 %62, i64* %98, align 8
  br label %102

102:                                              ; preds = %97, %87
  %103 = phi i64* [ %88, %87 ], [ %98, %97 ]
  store i64* %103, i64** %48, align 8
  br label %104

104:                                              ; preds = %102, %82, %40, %22
  ret void
}

declare i32 @_ZN2v88internal8JSObject13GetHeaderSizeENS0_12InstanceTypeEb(i16 zeroext, i1 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal10JSFunction21ClearTypeFeedbackInfoEv(%"class.v8::internal::JSFunction"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::base::Optional.1338", align 8
  %3 = alloca %"class.v8::internal::FeedbackVector", align 8
  %4 = getelementptr inbounds %"class.v8::base::Optional.1338", %"class.v8::base::Optional.1338"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %4, align 8
  %5 = getelementptr inbounds %"class.v8::base::Optional.1338", %"class.v8::base::Optional.1338"* %2, i64 0, i32 0, i32 0, i32 0, i32 1
  %6 = bitcast %union.anon.1342* %5 to i8*
  store i8 0, i8* %6, align 8
  call void @_ZN2v88internal10JSFunction22ResetIfBytecodeFlushedENS_4base8OptionalINSt3__18functionIFvNS0_10HeapObjectENS0_20CompressedObjectSlotES6_EEEEE(%"class.v8::internal::JSFunction"* %0, %"class.v8::base::Optional.1338"* nonnull %2)
  %7 = load i8, i8* %4, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %18, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.v8::base::Optional.1338", %"class.v8::base::Optional.1338"* %2, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 2
  %11 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %11, i64 0, i32 1
  %13 = load void (i8*)*, void (i8*)** %12, align 8
  %14 = icmp eq void (i8*)* %13, null
  br i1 %14, label %18, label %15

15:                                               ; preds = %9
  %16 = getelementptr inbounds %"class.v8::base::Optional.1338", %"class.v8::base::Optional.1338"* %2, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void %13(i8* %17) #6
  br label %18

18:                                               ; preds = %1, %9, %15
  %19 = getelementptr inbounds %"class.v8::internal::JSFunction", %"class.v8::internal::JSFunction"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = add i64 %20, 11
  %22 = inttoptr i64 %21 to i32*
  %23 = load atomic i32, i32* %22 monotonic, align 4
  %24 = and i64 %20, -4294967296
  %25 = zext i32 %23 to i64
  %26 = or i64 %24, %25
  %27 = add i64 %26, 3
  %28 = inttoptr i64 %27 to i32*
  %29 = load atomic i32, i32* %28 acquire, align 4
  %30 = zext i32 %29 to i64
  %31 = or i64 %24, %30
  %32 = icmp eq i32 %29, 170
  br i1 %32, label %82, label %33

33:                                               ; preds = %18
  %34 = and i64 %30, 1
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %47, label %36

36:                                               ; preds = %33
  %37 = add i64 %31, -1
  %38 = inttoptr i64 %37 to i32*
  %39 = load atomic i32, i32* %38 monotonic, align 4
  %40 = zext i32 %39 to i64
  %41 = or i64 %24, %40
  %42 = add i64 %41, 7
  %43 = inttoptr i64 %42 to i16*
  %44 = load atomic i16, i16* %43 monotonic, align 2
  %45 = add i16 %44, -157
  %46 = icmp ugt i16 %45, 1
  br i1 %46, label %47, label %82

47:                                               ; preds = %33, %36
  %48 = load i64, i64* %19, align 8
  %49 = and i64 %48, -4294967296
  %50 = add i64 %48, 19
  %51 = inttoptr i64 %50 to i32*
  %52 = load i32, i32* %51, align 4
  %53 = zext i32 %52 to i64
  %54 = or i64 %49, %53
  %55 = add i64 %54, 3
  %56 = inttoptr i64 %55 to i32*
  %57 = load i32, i32* %56, align 4
  %58 = zext i32 %57 to i64
  %59 = or i64 %49, %58
  %60 = add i64 %59, -1
  %61 = inttoptr i64 %60 to i32*
  %62 = load atomic i32, i32* %61 monotonic, align 4
  %63 = zext i32 %62 to i64
  %64 = or i64 %49, %63
  %65 = add i64 %64, 7
  %66 = inttoptr i64 %65 to i16*
  %67 = load atomic i16, i16* %66 monotonic, align 2
  %68 = icmp eq i16 %67, 167
  br i1 %68, label %69, label %82

69:                                               ; preds = %47
  %70 = bitcast %"class.v8::internal::FeedbackVector"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %70) #6
  %71 = getelementptr inbounds %"class.v8::internal::FeedbackVector", %"class.v8::internal::FeedbackVector"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %59, i64* %71, align 8
  %72 = and i64 %48, -262144
  %73 = or i64 %72, 16
  %74 = inttoptr i64 %73 to i64*
  %75 = load i64, i64* %74, align 16
  %76 = add i64 %75, -41416
  %77 = inttoptr i64 %76 to %"class.v8::internal::Isolate"*
  %78 = call zeroext i1 @_ZN2v88internal14FeedbackVector10ClearSlotsEPNS0_7IsolateE(%"class.v8::internal::FeedbackVector"* nonnull %3, %"class.v8::internal::Isolate"* %77) #6
  br i1 %78, label %79, label %81

79:                                               ; preds = %69
  %80 = load i64, i64* %71, align 8
  call void @_ZN2v88internal2IC17OnFeedbackChangedEPNS0_7IsolateENS0_14FeedbackVectorENS0_12FeedbackSlotEPKc(%"class.v8::internal::Isolate"* %77, i64 %80, i32 -1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.14, i64 0, i64 0)) #6
  br label %81

81:                                               ; preds = %79, %69
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %70) #6
  br label %82

82:                                               ; preds = %18, %36, %81, %47
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal10JSFunction22ResetIfBytecodeFlushedENS_4base8OptionalINSt3__18functionIFvNS0_10HeapObjectENS0_20CompressedObjectSlotES6_EEEEE(%"class.v8::internal::JSFunction"*, %"class.v8::base::Optional.1338"*) local_unnamed_addr #4 comdat align 2 {
  %3 = alloca %"class.v8::internal::FeedbackCell", align 8
  %4 = alloca %"class.v8::base::Optional.1338", align 8
  %5 = load i8, i8* @_ZN2v88internal19FLAG_flush_bytecodeE, align 1, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %155, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.v8::internal::JSFunction", %"class.v8::internal::JSFunction"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %9, 11
  %11 = inttoptr i64 %10 to i32*
  %12 = load atomic i32, i32* %11 acquire, align 4
  %13 = and i64 %9, -4294967296
  %14 = zext i32 %12 to i64
  %15 = or i64 %13, %14
  %16 = load i64, i64* %8, align 8
  %17 = add i64 %16, 23
  %18 = inttoptr i64 %17 to i32*
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = and i64 %16, -4294967296
  %21 = zext i32 %19 to i64
  %22 = or i64 %20, %21
  %23 = and i64 %14, 1
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %155, label %25

25:                                               ; preds = %7
  %26 = add i64 %15, -1
  %27 = inttoptr i64 %26 to i32*
  %28 = load atomic i32, i32* %27 monotonic, align 4
  %29 = zext i32 %28 to i64
  %30 = or i64 %13, %29
  %31 = add i64 %30, 7
  %32 = inttoptr i64 %31 to i16*
  %33 = load atomic i16, i16* %32 monotonic, align 2
  %34 = icmp ne i16 %33, 179
  %35 = and i64 %21, 1
  %36 = icmp eq i64 %35, 0
  %37 = or i1 %36, %34
  br i1 %37, label %155, label %38

38:                                               ; preds = %25
  %39 = add i64 %22, -1
  %40 = inttoptr i64 %39 to i32*
  %41 = load atomic i32, i32* %40 monotonic, align 4
  %42 = zext i32 %41 to i64
  %43 = or i64 %20, %42
  %44 = add i64 %43, 7
  %45 = inttoptr i64 %44 to i16*
  %46 = load atomic i16, i16* %45 monotonic, align 2
  %47 = icmp eq i16 %46, 162
  br i1 %47, label %48, label %155

48:                                               ; preds = %38
  %49 = add i64 %15, 3
  %50 = inttoptr i64 %49 to i32*
  %51 = load atomic i32, i32* %50 acquire, align 4
  %52 = zext i32 %51 to i64
  %53 = or i64 %13, %52
  %54 = icmp eq i32 %51, 170
  br i1 %54, label %69, label %55

55:                                               ; preds = %48
  %56 = and i64 %52, 1
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %155, label %58

58:                                               ; preds = %55
  %59 = add i64 %53, -1
  %60 = inttoptr i64 %59 to i32*
  %61 = load atomic i32, i32* %60 monotonic, align 4
  %62 = zext i32 %61 to i64
  %63 = or i64 %13, %62
  %64 = add i64 %63, 7
  %65 = inttoptr i64 %64 to i16*
  %66 = load atomic i16, i16* %65 monotonic, align 2
  %67 = add i16 %66, -157
  %68 = icmp ugt i16 %67, 1
  br i1 %68, label %155, label %69

69:                                               ; preds = %48, %58
  %70 = add i64 %22, 31
  %71 = inttoptr i64 %70 to i32*
  %72 = load atomic i32, i32* %71 monotonic, align 4
  %73 = icmp eq i32 %72, 85
  br i1 %73, label %155, label %74

74:                                               ; preds = %69
  %75 = load i64, i64* %8, align 8
  %76 = and i64 %75, -262144
  %77 = or i64 %76, 16
  %78 = inttoptr i64 %77 to i64*
  %79 = load i64, i64* %78, align 16
  %80 = add i64 %79, -41416
  %81 = inttoptr i64 %80 to %"class.v8::internal::Isolate"*
  %82 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %81, i64 0, i32 41
  %83 = tail call i64 @_ZN2v88internal8Builtins7builtinEi(%"class.v8::internal::Builtins"* %82, i32 85) #6
  %84 = load i64, i64* %8, align 8
  %85 = add i64 %84, 23
  %86 = inttoptr i64 %85 to i32*
  %87 = trunc i64 %83 to i32
  store atomic volatile i32 %87, i32* %86 monotonic, align 4
  %88 = load i64, i64* %8, align 8
  %89 = add i64 %88, 23
  %90 = and i64 %83, 1
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %104, label %92

92:                                               ; preds = %74
  %93 = and i64 %88, -262144
  %94 = or i64 %93, 8
  %95 = inttoptr i64 %94 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = and i64 %96, 262144
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %104, label %99

99:                                               ; preds = %92
  %100 = or i64 %93, 16
  %101 = inttoptr i64 %100 to %"class.v8::internal::Heap"**
  %102 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %101, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %102, i64 %88, i64 %89, i64 %83) #6
  %103 = load i64, i64* %8, align 8
  br label %104

104:                                              ; preds = %74, %92, %99
  %105 = phi i64 [ %88, %74 ], [ %88, %92 ], [ %103, %99 ]
  %106 = bitcast %"class.v8::internal::FeedbackCell"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %106) #6
  %107 = and i64 %105, -4294967296
  %108 = add i64 %105, 19
  %109 = inttoptr i64 %108 to i32*
  %110 = load i32, i32* %109, align 4
  %111 = zext i32 %110 to i64
  %112 = or i64 %107, %111
  %113 = getelementptr inbounds %"class.v8::internal::FeedbackCell", %"class.v8::internal::FeedbackCell"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %112, i64* %113, align 8
  %114 = getelementptr inbounds %"class.v8::base::Optional.1338", %"class.v8::base::Optional.1338"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %114, align 8
  %115 = getelementptr inbounds %"class.v8::base::Optional.1338", %"class.v8::base::Optional.1338"* %4, i64 0, i32 0, i32 0, i32 0, i32 1
  %116 = bitcast %union.anon.1342* %115 to i8*
  store i8 0, i8* %116, align 8
  %117 = getelementptr inbounds %"class.v8::base::Optional.1338", %"class.v8::base::Optional.1338"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %118 = load i8, i8* %117, align 8, !range !2
  %119 = icmp eq i8 %118, 0
  br i1 %119, label %142, label %120

120:                                              ; preds = %104
  %121 = getelementptr inbounds %"class.v8::base::Optional.1338", %"class.v8::base::Optional.1338"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %122 = getelementptr inbounds %"class.v8::base::Optional.1338", %"class.v8::base::Optional.1338"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %123 = bitcast %"class.std::__1::function"* %122 to i8*
  %124 = bitcast %"class.std::__1::function"* %121 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %123, i8* align 8 %124, i64 16, i1 false) #6
  %125 = getelementptr inbounds %"class.v8::base::Optional.1338", %"class.v8::base::Optional.1338"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %126 = getelementptr inbounds %"class.v8::base::Optional.1338", %"class.v8::base::Optional.1338"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %127 = bitcast %"struct.std::__1::__function::__policy_invoker"* %126 to i64*
  %128 = bitcast %"struct.std::__1::__function::__policy_invoker"* %125 to i64*
  %129 = load i64, i64* %127, align 8
  store i64 %129, i64* %128, align 8
  %130 = getelementptr inbounds %"class.v8::base::Optional.1338", %"class.v8::base::Optional.1338"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 2
  %131 = getelementptr inbounds %"class.v8::base::Optional.1338", %"class.v8::base::Optional.1338"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 2
  %132 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %131, align 8
  store %"struct.std::__1::__function::__policy"* %132, %"struct.std::__1::__function::__policy"** %130, align 8
  %133 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %132, i64 0, i32 0
  %134 = load i8* (i8*)*, i8* (i8*)** %133, align 8
  %135 = icmp eq i8* (i8*)* %134, null
  br i1 %135, label %141, label %136

136:                                              ; preds = %120
  %137 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %121, i64 0, i32 0, i32 0, i32 0
  %138 = load i8*, i8** %137, align 8
  %139 = tail call i8* %134(i8* %138) #6
  %140 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %122, i64 0, i32 0, i32 0, i32 0
  store i8* %139, i8** %140, align 8
  br label %141

141:                                              ; preds = %136, %120
  store i8 1, i8* %114, align 8
  br label %142

142:                                              ; preds = %104, %141
  call void @_ZN2v88internal12FeedbackCell21reset_feedback_vectorENS_4base8OptionalINSt3__18functionIFvNS0_10HeapObjectENS0_20CompressedObjectSlotES6_EEEEE(%"class.v8::internal::FeedbackCell"* nonnull %3, %"class.v8::base::Optional.1338"* nonnull %4)
  %143 = load i8, i8* %114, align 8, !range !2
  %144 = icmp eq i8 %143, 0
  br i1 %144, label %154, label %145

145:                                              ; preds = %142
  %146 = getelementptr inbounds %"class.v8::base::Optional.1338", %"class.v8::base::Optional.1338"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 2
  %147 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %146, align 8
  %148 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %147, i64 0, i32 1
  %149 = load void (i8*)*, void (i8*)** %148, align 8
  %150 = icmp eq void (i8*)* %149, null
  br i1 %150, label %154, label %151

151:                                              ; preds = %145
  %152 = getelementptr inbounds %"class.v8::base::Optional.1338", %"class.v8::base::Optional.1338"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %153 = load i8*, i8** %152, align 8
  call void %149(i8* %153) #6
  br label %154

154:                                              ; preds = %142, %145, %151
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %106) #6
  br label %155

155:                                              ; preds = %69, %55, %7, %58, %25, %38, %2, %154
  ret void
}

declare zeroext i1 @_ZN2v88internal14FeedbackVector10ClearSlotsEPNS0_7IsolateE(%"class.v8::internal::FeedbackVector"*, %"class.v8::internal::Isolate"*) local_unnamed_addr #2

declare void @_ZN2v88internal2IC17OnFeedbackChangedEPNS0_7IsolateENS0_14FeedbackVectorENS0_12FeedbackSlotEPKc(%"class.v8::internal::Isolate"*, i64, i32, i8*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @llvm.assume(i1) #6

declare zeroext i1 @_ZNK2v88internal9ScopeInfo15HasFunctionNameEv(%"class.v8::internal::ScopeInfo"*) local_unnamed_addr #2

declare i64 @_ZNK2v88internal9ScopeInfo12FunctionNameEv(%"class.v8::internal::ScopeInfo"*) local_unnamed_addr #2

declare zeroext i1 @_ZNK2v88internal9ScopeInfo21HasSharedFunctionNameEv(%"class.v8::internal::ScopeInfo"*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK2v88internal18SharedFunctionInfo16GetBytecodeArrayINS0_7IsolateEEENS0_13BytecodeArrayEPT_(%"class.v8::internal::SharedFunctionInfo"*, %"class.v8::internal::Isolate"*) local_unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = and i64 %4, -4294967296
  %6 = add i64 %4, 15
  %7 = inttoptr i64 %6 to i32*
  %8 = load atomic i32, i32* %7 acquire, align 4
  %9 = zext i32 %8 to i64
  %10 = or i64 %5, %9
  %11 = add i64 %10, -1
  %12 = inttoptr i64 %11 to i32*
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = zext i32 %13 to i64
  %15 = or i64 %5, %14
  %16 = add i64 %15, 7
  %17 = inttoptr i64 %16 to i16*
  %18 = load atomic i16, i16* %17 monotonic, align 2
  %19 = icmp eq i16 %18, 100
  br i1 %19, label %20, label %55

20:                                               ; preds = %2
  %21 = load i64, i64* %3, align 8
  %22 = and i64 %21, -4294967296
  %23 = add i64 %21, 15
  %24 = inttoptr i64 %23 to i32*
  %25 = load atomic i32, i32* %24 acquire, align 4
  %26 = zext i32 %25 to i64
  %27 = or i64 %22, %26
  %28 = add i64 %27, 19
  %29 = inttoptr i64 %28 to i32*
  %30 = load atomic i32, i32* %29 acquire, align 4
  %31 = zext i32 %30 to i64
  %32 = or i64 %22, %31
  %33 = add i64 %32, -1
  %34 = inttoptr i64 %33 to i32*
  %35 = load atomic i32, i32* %34 monotonic, align 4
  %36 = zext i32 %35 to i64
  %37 = or i64 %22, %36
  %38 = add i64 %37, 7
  %39 = inttoptr i64 %38 to i16*
  %40 = load atomic i16, i16* %39 monotonic, align 2
  %41 = icmp eq i16 %40, 133
  br i1 %41, label %42, label %55

42:                                               ; preds = %20
  %43 = load i64, i64* %3, align 8
  %44 = and i64 %43, -4294967296
  %45 = add i64 %43, 15
  %46 = inttoptr i64 %45 to i32*
  %47 = load atomic i32, i32* %46 acquire, align 4
  %48 = zext i32 %47 to i64
  %49 = or i64 %44, %48
  %50 = add i64 %49, 15
  %51 = inttoptr i64 %50 to i32*
  %52 = load atomic i32, i32* %51 acquire, align 4
  %53 = zext i32 %52 to i64
  %54 = or i64 %44, %53
  br label %120

55:                                               ; preds = %2, %20
  %56 = load i64, i64* %3, align 8
  %57 = and i64 %56, -4294967296
  %58 = add i64 %56, 3
  %59 = inttoptr i64 %58 to i32*
  %60 = load atomic i32, i32* %59 acquire, align 4
  %61 = zext i32 %60 to i64
  %62 = or i64 %57, %61
  %63 = and i64 %61, 1
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %114, label %65

65:                                               ; preds = %55
  %66 = add i64 %62, -1
  %67 = inttoptr i64 %66 to i32*
  %68 = load atomic i32, i32* %67 monotonic, align 4
  %69 = zext i32 %68 to i64
  %70 = or i64 %57, %69
  %71 = add i64 %70, 7
  %72 = inttoptr i64 %71 to i16*
  %73 = load atomic i16, i16* %72 monotonic, align 2
  %74 = icmp eq i16 %73, 133
  br i1 %74, label %120, label %75

75:                                               ; preds = %65
  %76 = load atomic i32, i32* %67 monotonic, align 4
  %77 = zext i32 %76 to i64
  %78 = or i64 %57, %77
  %79 = add i64 %78, 7
  %80 = inttoptr i64 %79 to i16*
  %81 = load atomic i16, i16* %80 monotonic, align 2
  %82 = icmp eq i16 %81, 94
  br i1 %82, label %83, label %114

83:                                               ; preds = %75
  %84 = load i64, i64* %3, align 8
  %85 = and i64 %84, -4294967296
  %86 = add i64 %84, 3
  %87 = inttoptr i64 %86 to i32*
  %88 = load atomic i32, i32* %87 acquire, align 4
  %89 = zext i32 %88 to i64
  %90 = or i64 %85, %89
  %91 = add i64 %90, 7
  %92 = inttoptr i64 %91 to i32*
  %93 = load i32, i32* %92, align 4
  %94 = zext i32 %93 to i64
  %95 = or i64 %85, %94
  %96 = and i64 %94, 1
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %108, label %98

98:                                               ; preds = %83
  %99 = add i64 %95, -1
  %100 = inttoptr i64 %99 to i32*
  %101 = load atomic i32, i32* %100 monotonic, align 4
  %102 = zext i32 %101 to i64
  %103 = or i64 %85, %102
  %104 = add i64 %103, 7
  %105 = inttoptr i64 %104 to i16*
  %106 = load atomic i16, i16* %105 monotonic, align 2
  %107 = icmp eq i16 %106, 133
  br i1 %107, label %120, label %108

108:                                              ; preds = %98, %83
  %109 = add i64 %95, 3
  %110 = inttoptr i64 %109 to i32*
  %111 = load i32, i32* %110, align 4
  %112 = zext i32 %111 to i64
  %113 = or i64 %85, %112
  br label %120

114:                                              ; preds = %75, %55
  %115 = add i64 %62, 3
  %116 = inttoptr i64 %115 to i32*
  %117 = load i32, i32* %116, align 4
  %118 = zext i32 %117 to i64
  %119 = or i64 %57, %118
  br label %120

120:                                              ; preds = %114, %108, %98, %65, %42
  %121 = phi i64 [ %54, %42 ], [ %119, %114 ], [ %62, %65 ], [ %113, %108 ], [ %95, %98 ]
  ret i64 %121
}

declare void @_ZN2v88internal14FeedbackVector18SetInterruptBudgetENS0_12FeedbackCellE(i64) local_unnamed_addr #2

declare void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"*, i64, i64, i64) local_unnamed_addr #2

declare void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64, i64, i64) local_unnamed_addr #2

declare i64* @_ZN2v88internal23CacheInitialJSArrayMapsEPNS0_7IsolateENS0_6HandleINS0_7ContextEEENS3_INS0_3MapEEE(%"class.v8::internal::Isolate"*, i64*, i64*) local_unnamed_addr #2

declare void @_ZN2v88internal13DependentCode28DeoptimizeDependentCodeGroupENS1_15DependencyGroupE(%"class.v8::internal::DependentCode"*, i32) local_unnamed_addr #2

declare void @_ZN2v88internal8JSObject19OptimizeAsPrototypeENS0_6HandleIS1_EEb(i64*, i1 zeroext) local_unnamed_addr #2

declare void @_ZN2v88internal3Map29CompleteInobjectSlackTrackingEPNS0_7IsolateE(%"class.v8::internal::Map"*, %"class.v8::internal::Isolate"*) local_unnamed_addr #2

declare i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"*, i64) local_unnamed_addr #2

declare i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"*) local_unnamed_addr #2

declare i64* @_ZN2v88internal3Map14CopyInitialMapEPNS0_7IsolateENS0_6HandleIS1_EEiii(%"class.v8::internal::Isolate"*, i64*, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK2v88internal10JSFunction9prototypeENS0_16PtrComprCageBaseE(%"class.v8::internal::JSFunction"*, i64) local_unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::JSFunction", %"class.v8::internal::JSFunction"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, -1
  %6 = inttoptr i64 %5 to i32*
  %7 = load atomic i32, i32* %6 monotonic, align 4
  %8 = and i64 %1, 4294967295
  %9 = icmp eq i64 %8, 0
  tail call void @llvm.assume(i1 %9) #6
  %10 = zext i32 %7 to i64
  %11 = or i64 %10, %1
  %12 = add i64 %11, 9
  %13 = inttoptr i64 %12 to i8*
  %14 = load atomic i8, i8* %13 monotonic, align 1
  %15 = and i8 %14, 1
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %98, label %17

17:                                               ; preds = %2
  %18 = load atomic i32, i32* %6 monotonic, align 4
  %19 = zext i32 %18 to i64
  %20 = or i64 %19, %1
  %21 = add i64 %20, 19
  %22 = inttoptr i64 %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = zext i32 %23 to i64
  %25 = or i64 %24, %1
  %26 = and i64 %24, 1
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %125, label %28

28:                                               ; preds = %17
  %29 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %30 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %29, null
  %31 = and i64 %20, -262144
  %32 = or i64 %31, 16
  %33 = inttoptr i64 %32 to i64*
  br i1 %30, label %63, label %34

34:                                               ; preds = %28
  %35 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %29, i64 0, i32 0, i32 1
  %36 = load i8, i8* %35, align 8, !range !2
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %42, label %38

38:                                               ; preds = %34
  %39 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %29, i64 0, i32 1, i64 10
  %40 = load i64, i64* %39, align 8
  %41 = trunc i64 %40 to i32
  br label %84

42:                                               ; preds = %34
  %43 = load i64, i64* %33, align 16
  %44 = add i64 %43, -41416
  %45 = inttoptr i64 %44 to %"class.v8::internal::Isolate"*
  %46 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %45, i64 0, i32 0, i32 7, i32 0, i64 10
  %47 = load i64, i64* %46, align 8
  %48 = trunc i64 %47 to i32
  br label %49

49:                                               ; preds = %42, %55
  %50 = phi i64 [ %60, %55 ], [ %25, %42 ]
  %51 = add i64 %50, -1
  %52 = inttoptr i64 %51 to i32*
  %53 = load atomic i32, i32* %52 monotonic, align 4
  %54 = icmp eq i32 %53, %48
  br i1 %54, label %55, label %125

55:                                               ; preds = %49
  %56 = add i64 %50, 19
  %57 = inttoptr i64 %56 to i32*
  %58 = load i32, i32* %57, align 4
  %59 = zext i32 %58 to i64
  %60 = or i64 %59, %1
  %61 = and i64 %59, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %125, label %49

63:                                               ; preds = %28
  %64 = load i64, i64* %33, align 16
  %65 = add i64 %64, -41416
  %66 = inttoptr i64 %65 to %"class.v8::internal::Isolate"*
  %67 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %66, i64 0, i32 0, i32 7, i32 0, i64 10
  %68 = load i64, i64* %67, align 8
  %69 = trunc i64 %68 to i32
  br label %70

70:                                               ; preds = %76, %63
  %71 = phi i64 [ %81, %76 ], [ %25, %63 ]
  %72 = add i64 %71, -1
  %73 = inttoptr i64 %72 to i32*
  %74 = load atomic i32, i32* %73 monotonic, align 4
  %75 = icmp eq i32 %74, %69
  br i1 %75, label %76, label %125

76:                                               ; preds = %70
  %77 = add i64 %71, 19
  %78 = inttoptr i64 %77 to i32*
  %79 = load i32, i32* %78, align 4
  %80 = zext i32 %79 to i64
  %81 = or i64 %80, %1
  %82 = and i64 %80, 1
  %83 = icmp eq i64 %82, 0
  br i1 %83, label %125, label %70

84:                                               ; preds = %38, %90
  %85 = phi i64 [ %95, %90 ], [ %25, %38 ]
  %86 = add i64 %85, -1
  %87 = inttoptr i64 %86 to i32*
  %88 = load atomic i32, i32* %87 monotonic, align 4
  %89 = icmp eq i32 %88, %41
  br i1 %89, label %90, label %125

90:                                               ; preds = %84
  %91 = add i64 %85, 19
  %92 = inttoptr i64 %91 to i32*
  %93 = load i32, i32* %92, align 4
  %94 = zext i32 %93 to i64
  %95 = or i64 %94, %1
  %96 = and i64 %94, 1
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %125, label %84

98:                                               ; preds = %2
  %99 = add i64 %4, 27
  %100 = inttoptr i64 %99 to i32*
  %101 = load atomic i32, i32* %100 acquire, align 4
  %102 = zext i32 %101 to i64
  %103 = or i64 %102, %1
  %104 = add i64 %103, -1
  %105 = inttoptr i64 %104 to i32*
  %106 = load atomic i32, i32* %105 monotonic, align 4
  %107 = zext i32 %106 to i64
  %108 = or i64 %107, %1
  %109 = add i64 %108, 7
  %110 = inttoptr i64 %109 to i16*
  %111 = load atomic i16, i16* %110 monotonic, align 2
  %112 = icmp eq i16 %111, 172
  %113 = load i64, i64* %3, align 8
  %114 = add i64 %113, 27
  %115 = inttoptr i64 %114 to i32*
  %116 = load atomic i32, i32* %115 acquire, align 4
  %117 = zext i32 %116 to i64
  %118 = or i64 %117, %1
  br i1 %112, label %119, label %125

119:                                              ; preds = %98
  %120 = add i64 %118, 15
  %121 = inttoptr i64 %120 to i32*
  %122 = load i32, i32* %121, align 4
  %123 = zext i32 %122 to i64
  %124 = or i64 %123, %1
  br label %125

125:                                              ; preds = %90, %84, %55, %49, %76, %70, %119, %98, %17
  %126 = phi i64 [ %25, %17 ], [ %124, %119 ], [ %118, %98 ], [ %71, %70 ], [ %81, %76 ], [ %60, %55 ], [ %50, %49 ], [ %95, %90 ], [ %85, %84 ]
  ret i64 %126
}

declare i64* @_ZN2v88internal6Object11GetPropertyEPNS0_14LookupIteratorEb(%"class.v8::internal::LookupIterator"*, i1 zeroext) local_unnamed_addr #2

declare void @_ZN2v88internal14LookupIterator5StartILb0EEEvv(%"class.v8::internal::LookupIterator"*) local_unnamed_addr #2

declare i64* @_ZN2v88internal11StringTable12LookupStringEPNS0_7IsolateENS0_6HandleINS0_6StringEEE(%"class.v8::internal::StringTable"*, %"class.v8::internal::Isolate"*, i64*) local_unnamed_addr #2

declare i64* @_ZN2v88internal10JSReceiver15GetDataPropertyEPNS0_14LookupIteratorENS0_16AllocationPolicyE(%"class.v8::internal::LookupIterator"*, i32) local_unnamed_addr #2

declare void @_ZN2v88internal24IncrementalStringBuilder6ExtendEv(%"class.v8::internal::IncrementalStringBuilder"*) local_unnamed_addr #2

declare zeroext i1 @_ZNK2v88internal6Script16IsUserJavaScriptEv(%"class.v8::internal::Script"*) local_unnamed_addr #2

declare i64* @_ZN2v88internal7Factory18NewProperSubStringENS0_6HandleINS0_6StringEEEii(%"class.v8::internal::Factory"*, i64*, i32, i32) local_unnamed_addr #2

declare i32 @_ZNK2v88internal18SharedFunctionInfo13StartPositionEv(%"class.v8::internal::SharedFunctionInfo"*) local_unnamed_addr #2

declare i64 @_ZN2v88internal8Builtins7builtinEi(%"class.v8::internal::Builtins"*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal12FeedbackCell21reset_feedback_vectorENS_4base8OptionalINSt3__18functionIFvNS0_10HeapObjectENS0_20CompressedObjectSlotES6_EEEEE(%"class.v8::internal::FeedbackCell"*, %"class.v8::base::Optional.1338"*) local_unnamed_addr #4 comdat align 2 {
  %3 = alloca %"class.v8::internal::HeapObject", align 8
  %4 = alloca %"class.v8::internal::CompressedObjectSlot", align 8
  %5 = alloca %"class.v8::internal::HeapObject", align 8
  %6 = load i8, i8* @_ZN2v88internal29FLAG_lazy_feedback_allocationE, align 1, !range !2
  %7 = icmp eq i8 %6, 0
  %8 = load i32, i32* @_ZN2v88internal21FLAG_interrupt_budgetE, align 4
  %9 = load i32, i32* @_ZN2v88internal42FLAG_budget_for_feedback_vector_allocationE, align 4
  %10 = select i1 %7, i32 %8, i32 %9
  %11 = getelementptr inbounds %"class.v8::internal::FeedbackCell", %"class.v8::internal::FeedbackCell"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = add i64 %12, 7
  %14 = inttoptr i64 %13 to i32*
  store i32 %10, i32* %14, align 4
  %15 = getelementptr inbounds %"class.v8::internal::FeedbackCell", %"class.v8::internal::FeedbackCell"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load i64, i64* %15, align 8
  %17 = and i64 %16, -4294967296
  %18 = add i64 %16, 3
  %19 = inttoptr i64 %18 to i32*
  %20 = load i32, i32* %19, align 4
  %21 = zext i32 %20 to i64
  %22 = or i64 %17, %21
  %23 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %24 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %23, null
  br i1 %24, label %31, label %25

25:                                               ; preds = %2
  %26 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %23, i64 0, i32 0, i32 1
  %27 = load i8, i8* %26, align 8, !range !2
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %31, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %23, i64 0, i32 1, i64 0
  br label %39

31:                                               ; preds = %25, %2
  %32 = and i64 %22, -262144
  %33 = or i64 %32, 16
  %34 = inttoptr i64 %33 to i64*
  %35 = load i64, i64* %34, align 16
  %36 = add i64 %35, -41416
  %37 = inttoptr i64 %36 to %"class.v8::internal::Isolate"*
  %38 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %37, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %39

39:                                               ; preds = %29, %31
  %40 = phi i64* [ %38, %31 ], [ %30, %29 ]
  %41 = getelementptr inbounds i64, i64* %40, i64 4
  %42 = load i64, i64* %41, align 8
  %43 = trunc i64 %42 to i32
  %44 = icmp eq i32 %20, %43
  br i1 %44, label %120, label %45

45:                                               ; preds = %39
  %46 = add i64 %22, -1
  %47 = inttoptr i64 %46 to i32*
  %48 = load atomic i32, i32* %47 monotonic, align 4
  %49 = zext i32 %48 to i64
  %50 = or i64 %17, %49
  %51 = add i64 %50, 7
  %52 = inttoptr i64 %51 to i16*
  %53 = load atomic i16, i16* %52 monotonic, align 2
  %54 = icmp eq i16 %53, 129
  br i1 %54, label %120, label %55

55:                                               ; preds = %45
  %56 = load atomic i32, i32* %47 monotonic, align 4
  %57 = zext i32 %56 to i64
  %58 = or i64 %17, %57
  %59 = add i64 %58, 7
  %60 = inttoptr i64 %59 to i16*
  %61 = load atomic i16, i16* %60 monotonic, align 2
  %62 = icmp eq i16 %61, 167
  br i1 %62, label %64, label %63, !prof !3

63:                                               ; preds = %55
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.23, i64 0, i64 0)) #8
  unreachable

64:                                               ; preds = %55
  %65 = add i64 %22, 27
  %66 = inttoptr i64 %65 to i32*
  %67 = load i32, i32* %66, align 4
  %68 = zext i32 %67 to i64
  %69 = or i64 %17, %68
  store atomic volatile i32 %67, i32* %19 monotonic, align 4
  %70 = load i64, i64* %15, align 8
  %71 = add i64 %70, 3
  %72 = and i64 %68, 1
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %87, label %74

74:                                               ; preds = %64
  %75 = and i64 %70, -262144
  %76 = or i64 %75, 8
  %77 = inttoptr i64 %76 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = and i64 %78, 262144
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %87, label %81

81:                                               ; preds = %74
  %82 = or i64 %75, 16
  %83 = inttoptr i64 %82 to %"class.v8::internal::Heap"**
  %84 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %83, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %84, i64 %70, i64 %71, i64 %69) #6
  %85 = load i64, i64* %15, align 8
  %86 = add i64 %85, 3
  br label %87

87:                                               ; preds = %81, %74, %64
  %88 = phi i64 [ %86, %81 ], [ %71, %74 ], [ %71, %64 ]
  %89 = phi i64 [ %85, %81 ], [ %70, %74 ], [ %70, %64 ]
  %90 = and i64 %69, -262144
  %91 = or i64 %90, 8
  %92 = inttoptr i64 %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = and i64 %93, 24
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %104, label %96

96:                                               ; preds = %87
  %97 = and i64 %89, -262144
  %98 = or i64 %97, 8
  %99 = inttoptr i64 %98 to i64*
  %100 = load i64, i64* %99, align 8
  %101 = and i64 %100, 24
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %103, label %104

103:                                              ; preds = %96
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %89, i64 %88, i64 %69) #6
  br label %104

104:                                              ; preds = %87, %96, %103
  %105 = getelementptr inbounds %"class.v8::base::Optional.1338", %"class.v8::base::Optional.1338"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %106 = load i8, i8* %105, align 8, !range !2
  %107 = icmp eq i8 %106, 0
  br i1 %107, label %120, label %108

108:                                              ; preds = %104
  %109 = load i64, i64* %15, align 8
  %110 = add i64 %109, 3
  %111 = bitcast %"class.v8::internal::HeapObject"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %111)
  %112 = bitcast %"class.v8::internal::CompressedObjectSlot"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %112)
  %113 = bitcast %"class.v8::internal::HeapObject"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %113)
  %114 = getelementptr inbounds %"class.v8::internal::HeapObject", %"class.v8::internal::HeapObject"* %3, i64 0, i32 0, i32 0, i32 0
  store i64 %109, i64* %114, align 8
  %115 = getelementptr inbounds %"class.v8::internal::CompressedObjectSlot", %"class.v8::internal::CompressedObjectSlot"* %4, i64 0, i32 0, i32 0
  store i64 %110, i64* %115, align 8
  %116 = getelementptr inbounds %"class.v8::internal::HeapObject", %"class.v8::internal::HeapObject"* %5, i64 0, i32 0, i32 0, i32 0
  store i64 %69, i64* %116, align 8
  %117 = getelementptr inbounds %"class.v8::base::Optional.1338", %"class.v8::base::Optional.1338"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0
  %118 = load void (%"union.std::__1::__function::__policy_storage"*, %"class.v8::internal::HeapObject"*, %"class.v8::internal::CompressedObjectSlot"*, %"class.v8::internal::HeapObject"*)*, void (%"union.std::__1::__function::__policy_storage"*, %"class.v8::internal::HeapObject"*, %"class.v8::internal::CompressedObjectSlot"*, %"class.v8::internal::HeapObject"*)** %117, align 8
  %119 = getelementptr inbounds %"class.v8::base::Optional.1338", %"class.v8::base::Optional.1338"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  call void %118(%"union.std::__1::__function::__policy_storage"* %119, %"class.v8::internal::HeapObject"* nonnull dereferenceable(8) %3, %"class.v8::internal::CompressedObjectSlot"* nonnull dereferenceable(8) %4, %"class.v8::internal::HeapObject"* nonnull dereferenceable(8) %5) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %111)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %112)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %113)
  br label %120

120:                                              ; preds = %104, %39, %108, %45
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #7

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal15IsCompiledScopeC2ENS0_18SharedFunctionInfoEPNS0_7IsolateE(%"class.v8::internal::IsCompiledScope"*, i64, %"class.v8::internal::Isolate"*) unnamed_addr #4 comdat align 2 {
  %4 = alloca %"class.v8::internal::SharedFunctionInfo", align 8
  %5 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %1, i64* %5, align 8
  %6 = and i64 %1, -4294967296
  %7 = add i64 %1, 3
  %8 = inttoptr i64 %7 to i32*
  %9 = load atomic i32, i32* %8 acquire, align 4
  %10 = zext i32 %9 to i64
  %11 = and i64 %10, 1
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %60, label %13

13:                                               ; preds = %3
  %14 = or i64 %6, %10
  %15 = add i64 %14, -1
  %16 = inttoptr i64 %15 to i32*
  %17 = load atomic i32, i32* %16 monotonic, align 4
  %18 = zext i32 %17 to i64
  %19 = or i64 %6, %18
  %20 = add i64 %19, 7
  %21 = inttoptr i64 %20 to i16*
  %22 = load atomic i16, i16* %21 monotonic, align 2
  %23 = icmp eq i16 %22, 133
  br i1 %23, label %40, label %24

24:                                               ; preds = %13
  %25 = load atomic i32, i32* %16 monotonic, align 4
  %26 = zext i32 %25 to i64
  %27 = or i64 %6, %26
  %28 = add i64 %27, 7
  %29 = inttoptr i64 %28 to i16*
  %30 = load atomic i16, i16* %29 monotonic, align 2
  %31 = icmp eq i16 %30, 105
  br i1 %31, label %40, label %32

32:                                               ; preds = %24
  %33 = load atomic i32, i32* %16 monotonic, align 4
  %34 = zext i32 %33 to i64
  %35 = or i64 %6, %34
  %36 = add i64 %35, 7
  %37 = inttoptr i64 %36 to i16*
  %38 = load atomic i16, i16* %37 monotonic, align 2
  %39 = icmp eq i16 %38, 94
  br i1 %39, label %40, label %60

40:                                               ; preds = %13, %24, %32
  %41 = call i64 @_ZNK2v88internal18SharedFunctionInfo16GetBytecodeArrayINS0_7IsolateEEENS0_13BytecodeArrayEPT_(%"class.v8::internal::SharedFunctionInfo"* nonnull %4, %"class.v8::internal::Isolate"* %2)
  %42 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31, i32 4
  %43 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %42, align 8
  %44 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %40
  %46 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %43, i64 %41) #6
  br label %60

47:                                               ; preds = %40
  %48 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31, i32 0
  %49 = load i64*, i64** %48, align 8
  %50 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31, i32 1
  %51 = load i64*, i64** %50, align 8
  %52 = icmp eq i64* %49, %51
  br i1 %52, label %53, label %55

53:                                               ; preds = %47
  %54 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %2) #6
  br label %55

55:                                               ; preds = %53, %47
  %56 = phi i64* [ %54, %53 ], [ %49, %47 ]
  %57 = ptrtoint i64* %56 to i64
  %58 = add i64 %57, 8
  %59 = inttoptr i64 %58 to i64*
  store i64* %59, i64** %48, align 8
  store i64 %41, i64* %56, align 8
  br label %60

60:                                               ; preds = %32, %3, %55, %45
  %61 = phi i64* [ %46, %45 ], [ %56, %55 ], [ null, %3 ], [ null, %32 ]
  %62 = getelementptr inbounds %"class.v8::internal::IsCompiledScope", %"class.v8::internal::IsCompiledScope"* %0, i64 0, i32 0, i32 0
  store i64* %61, i64** %62, align 8
  %63 = getelementptr inbounds %"class.v8::internal::IsCompiledScope", %"class.v8::internal::IsCompiledScope"* %0, i64 0, i32 1
  %64 = load i64, i64* %5, align 8
  %65 = and i64 %64, -4294967296
  %66 = add i64 %64, 3
  %67 = inttoptr i64 %66 to i32*
  %68 = load atomic i32, i32* %67 acquire, align 4
  %69 = zext i32 %68 to i64
  %70 = or i64 %65, %69
  %71 = icmp eq i32 %68, 170
  br i1 %71, label %87, label %72

72:                                               ; preds = %60
  %73 = and i64 %69, 1
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %87, label %75

75:                                               ; preds = %72
  %76 = add i64 %70, -1
  %77 = inttoptr i64 %76 to i32*
  %78 = load atomic i32, i32* %77 monotonic, align 4
  %79 = zext i32 %78 to i64
  %80 = or i64 %65, %79
  %81 = add i64 %80, 7
  %82 = inttoptr i64 %81 to i16*
  %83 = load atomic i16, i16* %82 monotonic, align 2
  %84 = add i16 %83, -157
  %85 = icmp ugt i16 %84, 1
  %86 = zext i1 %85 to i8
  br label %87

87:                                               ; preds = %60, %72, %75
  %88 = phi i8 [ 0, %60 ], [ 1, %72 ], [ %86, %75 ]
  store i8 %88, i8* %63, align 8
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = !{!"branch_weights", i32 1, i32 4001}
!5 = !{!"branch_weights", i32 1, i32 2000}
!6 = !{!"branch_weights", i32 1073205, i32 2146410443}
