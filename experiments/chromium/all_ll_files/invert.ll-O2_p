; ModuleID = '../../third_party/pdfium/third_party/libopenjpeg20/invert.c'
source_filename = "../../third_party/pdfium/third_party/libopenjpeg20/invert.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_matrix_inversion_f(float* nocapture, float* nocapture, i32) local_unnamed_addr #0 {
  %4 = shl i32 %2, 4
  %5 = zext i32 %4 to i64
  %6 = tail call i8* @opj_malloc(i64 %5) #3
  %7 = icmp eq i8* %6, null
  br i1 %7, label %632, label %8

8:                                                ; preds = %3
  %9 = shl i32 %2, 2
  %10 = bitcast i8* %6 to i32*
  %11 = zext i32 %9 to i64
  %12 = getelementptr inbounds i8, i8* %6, i64 %11
  %13 = bitcast i8* %12 to float*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %6, i8 0, i64 %11, i1 false)
  %14 = add i32 %2, -1
  %15 = icmp eq i32 %2, 0
  br i1 %15, label %90, label %16

16:                                               ; preds = %8
  %17 = add i32 %2, -1
  %18 = zext i32 %17 to i64
  %19 = add nuw nsw i64 %18, 1
  %20 = icmp ult i64 %19, 8
  br i1 %20, label %21, label %24

21:                                               ; preds = %86, %16
  %22 = phi i32 [ 0, %16 ], [ %26, %86 ]
  %23 = phi i32* [ %10, %16 ], [ %27, %86 ]
  br label %95

24:                                               ; preds = %16
  %25 = and i64 %19, 8589934584
  %26 = trunc i64 %25 to i32
  %27 = getelementptr i32, i32* %10, i64 %25
  %28 = add nsw i64 %25, -8
  %29 = lshr exact i64 %28, 3
  %30 = add nuw nsw i64 %29, 1
  %31 = and i64 %30, 3
  %32 = icmp ult i64 %28, 24
  br i1 %32, label %69, label %33

33:                                               ; preds = %24
  %34 = sub nsw i64 %30, %31
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %65, %35 ]
  %37 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %33 ], [ %66, %35 ]
  %38 = phi i64 [ %34, %33 ], [ %67, %35 ]
  %39 = add <4 x i32> %37, <i32 4, i32 4, i32 4, i32 4>
  %40 = getelementptr i32, i32* %10, i64 %36
  %41 = bitcast i32* %40 to <4 x i32>*
  store <4 x i32> %37, <4 x i32>* %41, align 4
  %42 = getelementptr i32, i32* %40, i64 4
  %43 = bitcast i32* %42 to <4 x i32>*
  store <4 x i32> %39, <4 x i32>* %43, align 4
  %44 = or i64 %36, 8
  %45 = add <4 x i32> %37, <i32 8, i32 8, i32 8, i32 8>
  %46 = add <4 x i32> %37, <i32 12, i32 12, i32 12, i32 12>
  %47 = getelementptr i32, i32* %10, i64 %44
  %48 = bitcast i32* %47 to <4 x i32>*
  store <4 x i32> %45, <4 x i32>* %48, align 4
  %49 = getelementptr i32, i32* %47, i64 4
  %50 = bitcast i32* %49 to <4 x i32>*
  store <4 x i32> %46, <4 x i32>* %50, align 4
  %51 = or i64 %36, 16
  %52 = add <4 x i32> %37, <i32 16, i32 16, i32 16, i32 16>
  %53 = add <4 x i32> %37, <i32 20, i32 20, i32 20, i32 20>
  %54 = getelementptr i32, i32* %10, i64 %51
  %55 = bitcast i32* %54 to <4 x i32>*
  store <4 x i32> %52, <4 x i32>* %55, align 4
  %56 = getelementptr i32, i32* %54, i64 4
  %57 = bitcast i32* %56 to <4 x i32>*
  store <4 x i32> %53, <4 x i32>* %57, align 4
  %58 = or i64 %36, 24
  %59 = add <4 x i32> %37, <i32 24, i32 24, i32 24, i32 24>
  %60 = add <4 x i32> %37, <i32 28, i32 28, i32 28, i32 28>
  %61 = getelementptr i32, i32* %10, i64 %58
  %62 = bitcast i32* %61 to <4 x i32>*
  store <4 x i32> %59, <4 x i32>* %62, align 4
  %63 = getelementptr i32, i32* %61, i64 4
  %64 = bitcast i32* %63 to <4 x i32>*
  store <4 x i32> %60, <4 x i32>* %64, align 4
  %65 = add i64 %36, 32
  %66 = add <4 x i32> %37, <i32 32, i32 32, i32 32, i32 32>
  %67 = add i64 %38, -4
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %69, label %35, !llvm.loop !2

69:                                               ; preds = %35, %24
  %70 = phi i64 [ 0, %24 ], [ %65, %35 ]
  %71 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %24 ], [ %66, %35 ]
  %72 = icmp eq i64 %31, 0
  br i1 %72, label %86, label %73

73:                                               ; preds = %69, %73
  %74 = phi i64 [ %82, %73 ], [ %70, %69 ]
  %75 = phi <4 x i32> [ %83, %73 ], [ %71, %69 ]
  %76 = phi i64 [ %84, %73 ], [ %31, %69 ]
  %77 = add <4 x i32> %75, <i32 4, i32 4, i32 4, i32 4>
  %78 = getelementptr i32, i32* %10, i64 %74
  %79 = bitcast i32* %78 to <4 x i32>*
  store <4 x i32> %75, <4 x i32>* %79, align 4
  %80 = getelementptr i32, i32* %78, i64 4
  %81 = bitcast i32* %80 to <4 x i32>*
  store <4 x i32> %77, <4 x i32>* %81, align 4
  %82 = add i64 %74, 8
  %83 = add <4 x i32> %75, <i32 8, i32 8, i32 8, i32 8>
  %84 = add i64 %76, -1
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %86, label %73, !llvm.loop !4

86:                                               ; preds = %73, %69
  %87 = icmp eq i64 %19, %25
  br i1 %87, label %88, label %21

88:                                               ; preds = %95, %86
  %89 = icmp eq i32 %14, 0
  br i1 %89, label %381, label %90

90:                                               ; preds = %88, %8
  %91 = zext i32 %2 to i64
  %92 = zext i32 %14 to i64
  %93 = add i32 %2, -2
  %94 = sub i32 0, %2
  br label %101

95:                                               ; preds = %21, %95
  %96 = phi i32 [ %99, %95 ], [ %22, %21 ]
  %97 = phi i32* [ %98, %95 ], [ %23, %21 ]
  %98 = getelementptr inbounds i32, i32* %97, i64 1
  store i32 %96, i32* %97, align 4
  %99 = add nuw i32 %96, 1
  %100 = icmp eq i32 %99, %2
  br i1 %100, label %88, label %95, !llvm.loop !6

101:                                              ; preds = %374, %90
  %102 = phi i64 [ 0, %90 ], [ %379, %374 ]
  %103 = phi i32 [ %14, %90 ], [ %376, %374 ]
  %104 = phi i32 [ 1, %90 ], [ %375, %374 ]
  %105 = phi float* [ %0, %90 ], [ %377, %374 ]
  %106 = phi i32 [ 0, %90 ], [ %176, %374 ]
  %107 = phi i32* [ %10, %90 ], [ %378, %374 ]
  %108 = trunc i64 %102 to i32
  %109 = sub i32 %93, %108
  %110 = zext i32 %109 to i64
  %111 = add nuw nsw i64 %110, 1
  %112 = and i64 %111, 8589934584
  %113 = add nsw i64 %112, -8
  %114 = lshr exact i64 %113, 3
  %115 = add nuw nsw i64 %114, 1
  %116 = trunc i64 %102 to i32
  %117 = xor i32 %116, -1
  %118 = trunc i64 %102 to i32
  %119 = sub i32 %93, %118
  %120 = zext i32 %119 to i64
  %121 = trunc i64 %102 to i32
  %122 = sub i32 %93, %121
  %123 = zext i32 %122 to i64
  %124 = add nuw nsw i64 %123, 1
  %125 = getelementptr inbounds float, float* %105, i64 %102
  %126 = icmp eq i64 %102, %91
  br i1 %126, label %630, label %127

127:                                              ; preds = %101
  %128 = trunc i64 %102 to i32
  %129 = sub i32 %2, %128
  %130 = trunc i64 %102 to i32
  %131 = and i32 %129, 1
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %143, label %133

133:                                              ; preds = %127
  %134 = load float, float* %125, align 4
  %135 = fcmp ogt float %134, 0.000000e+00
  %136 = fsub float -0.000000e+00, %134
  %137 = select i1 %135, float %134, float %136
  %138 = fcmp ogt float %137, 0.000000e+00
  %139 = select i1 %138, i32 %130, i32 %106
  %140 = select i1 %138, float %137, float 0.000000e+00
  %141 = getelementptr inbounds float, float* %125, i64 %91
  %142 = add nuw i32 %130, 1
  br label %143

143:                                              ; preds = %133, %127
  %144 = phi i32 [ %139, %133 ], [ undef, %127 ]
  %145 = phi float [ %140, %133 ], [ undef, %127 ]
  %146 = phi float* [ %141, %133 ], [ %125, %127 ]
  %147 = phi float [ %140, %133 ], [ 0.000000e+00, %127 ]
  %148 = phi i32 [ %142, %133 ], [ %130, %127 ]
  %149 = phi i32 [ %139, %133 ], [ %106, %127 ]
  %150 = icmp eq i32 %117, %94
  br i1 %150, label %175, label %151

151:                                              ; preds = %143, %151
  %152 = phi float* [ %172, %151 ], [ %146, %143 ]
  %153 = phi float [ %171, %151 ], [ %147, %143 ]
  %154 = phi i32 [ %173, %151 ], [ %148, %143 ]
  %155 = phi i32 [ %170, %151 ], [ %149, %143 ]
  %156 = load float, float* %152, align 4
  %157 = fcmp ogt float %156, 0.000000e+00
  %158 = fsub float -0.000000e+00, %156
  %159 = select i1 %157, float %156, float %158
  %160 = fcmp ogt float %159, %153
  %161 = select i1 %160, i32 %154, i32 %155
  %162 = select i1 %160, float %159, float %153
  %163 = getelementptr inbounds float, float* %152, i64 %91
  %164 = add nuw i32 %154, 1
  %165 = load float, float* %163, align 4
  %166 = fcmp ogt float %165, 0.000000e+00
  %167 = fsub float -0.000000e+00, %165
  %168 = select i1 %166, float %165, float %167
  %169 = fcmp ogt float %168, %162
  %170 = select i1 %169, i32 %164, i32 %161
  %171 = select i1 %169, float %168, float %162
  %172 = getelementptr inbounds float, float* %163, i64 %91
  %173 = add nuw i32 %154, 2
  %174 = icmp eq i32 %173, %2
  br i1 %174, label %175, label %151

175:                                              ; preds = %151, %143
  %176 = phi i32 [ %144, %143 ], [ %170, %151 ]
  %177 = phi float [ %145, %143 ], [ %171, %151 ]
  %178 = fcmp oeq float %177, 0.000000e+00
  br i1 %178, label %630, label %179

179:                                              ; preds = %175
  %180 = zext i32 %176 to i64
  %181 = icmp eq i64 %102, %180
  br i1 %181, label %194, label %182

182:                                              ; preds = %179
  %183 = getelementptr inbounds i32, i32* %107, i64 %180
  %184 = sub nsw i64 0, %102
  %185 = getelementptr inbounds i32, i32* %183, i64 %184
  %186 = load i32, i32* %107, align 4
  %187 = load i32, i32* %185, align 4
  store i32 %187, i32* %107, align 4
  store i32 %186, i32* %185, align 4
  %188 = sub i32 %176, %130
  %189 = mul i32 %188, %2
  %190 = zext i32 %189 to i64
  %191 = getelementptr inbounds float, float* %105, i64 %190
  %192 = bitcast float* %191 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %12, i8* align 4 %192, i64 %11, i1 false) #3
  %193 = bitcast float* %105 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %192, i8* align 4 %193, i64 %11, i1 false) #3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %193, i8* align 4 %12, i64 %11, i1 false) #3
  br label %194

194:                                              ; preds = %182, %179
  %195 = load float, float* %125, align 4
  %196 = icmp ult i32 %104, %2
  br i1 %196, label %197, label %374

197:                                              ; preds = %194
  %198 = getelementptr inbounds float, float* %125, i64 1
  %199 = getelementptr inbounds float, float* %125, i64 %91
  %200 = zext i32 %103 to i64
  %201 = sub nsw i64 0, %200
  %202 = icmp ult i64 %124, 8
  %203 = and i64 %124, 8589934584
  %204 = trunc i64 %203 to i32
  %205 = add i32 %104, %204
  %206 = and i64 %115, 1
  %207 = icmp eq i64 %113, 0
  %208 = sub nuw nsw i64 %115, %206
  %209 = icmp eq i64 %206, 0
  %210 = icmp eq i64 %124, %203
  %211 = add nsw i64 %203, -1
  br label %212

212:                                              ; preds = %366, %197
  %213 = phi float* [ %198, %197 ], [ %370, %366 ]
  %214 = phi float* [ %199, %197 ], [ %371, %366 ]
  %215 = phi i32 [ %104, %197 ], [ %372, %366 ]
  %216 = load float, float* %214, align 4
  %217 = fdiv float %216, %195
  store float %217, float* %214, align 4
  br i1 %202, label %304, label %218

218:                                              ; preds = %212
  %219 = getelementptr float, float* %214, i64 1
  %220 = getelementptr float, float* %214, i64 2
  %221 = getelementptr float, float* %220, i64 %120
  %222 = getelementptr float, float* %213, i64 1
  %223 = getelementptr float, float* %222, i64 %120
  %224 = icmp ult float* %219, %223
  %225 = icmp ult float* %213, %221
  %226 = and i1 %224, %225
  br i1 %226, label %304, label %227

227:                                              ; preds = %218
  %228 = getelementptr float, float* %214, i64 %203
  %229 = getelementptr float, float* %213, i64 %203
  %230 = insertelement <4 x float> undef, float %217, i32 0
  %231 = shufflevector <4 x float> %230, <4 x float> undef, <4 x i32> zeroinitializer
  %232 = insertelement <4 x float> undef, float %217, i32 0
  %233 = shufflevector <4 x float> %232, <4 x float> undef, <4 x i32> zeroinitializer
  br i1 %207, label %280, label %234

234:                                              ; preds = %227
  %235 = getelementptr float, float* %214, i64 1
  %236 = getelementptr float, float* %214, i64 1
  br label %237

237:                                              ; preds = %237, %234
  %238 = phi i64 [ 0, %234 ], [ %277, %237 ]
  %239 = phi i64 [ %208, %234 ], [ %278, %237 ]
  %240 = getelementptr float, float* %213, i64 %238
  %241 = getelementptr inbounds float, float* %235, i64 %238
  %242 = bitcast float* %240 to <4 x float>*
  %243 = load <4 x float>, <4 x float>* %242, align 4, !alias.scope !8
  %244 = getelementptr float, float* %240, i64 4
  %245 = bitcast float* %244 to <4 x float>*
  %246 = load <4 x float>, <4 x float>* %245, align 4, !alias.scope !8
  %247 = fmul <4 x float> %231, %243
  %248 = fmul <4 x float> %233, %246
  %249 = bitcast float* %241 to <4 x float>*
  %250 = load <4 x float>, <4 x float>* %249, align 4, !alias.scope !11, !noalias !8
  %251 = getelementptr inbounds float, float* %241, i64 4
  %252 = bitcast float* %251 to <4 x float>*
  %253 = load <4 x float>, <4 x float>* %252, align 4, !alias.scope !11, !noalias !8
  %254 = fsub <4 x float> %250, %247
  %255 = fsub <4 x float> %253, %248
  %256 = bitcast float* %241 to <4 x float>*
  store <4 x float> %254, <4 x float>* %256, align 4, !alias.scope !11, !noalias !8
  %257 = bitcast float* %251 to <4 x float>*
  store <4 x float> %255, <4 x float>* %257, align 4, !alias.scope !11, !noalias !8
  %258 = or i64 %238, 8
  %259 = getelementptr float, float* %213, i64 %258
  %260 = getelementptr inbounds float, float* %236, i64 %258
  %261 = bitcast float* %259 to <4 x float>*
  %262 = load <4 x float>, <4 x float>* %261, align 4, !alias.scope !8
  %263 = getelementptr float, float* %259, i64 4
  %264 = bitcast float* %263 to <4 x float>*
  %265 = load <4 x float>, <4 x float>* %264, align 4, !alias.scope !8
  %266 = fmul <4 x float> %231, %262
  %267 = fmul <4 x float> %233, %265
  %268 = bitcast float* %260 to <4 x float>*
  %269 = load <4 x float>, <4 x float>* %268, align 4, !alias.scope !11, !noalias !8
  %270 = getelementptr inbounds float, float* %260, i64 4
  %271 = bitcast float* %270 to <4 x float>*
  %272 = load <4 x float>, <4 x float>* %271, align 4, !alias.scope !11, !noalias !8
  %273 = fsub <4 x float> %269, %266
  %274 = fsub <4 x float> %272, %267
  %275 = bitcast float* %260 to <4 x float>*
  store <4 x float> %273, <4 x float>* %275, align 4, !alias.scope !11, !noalias !8
  %276 = bitcast float* %270 to <4 x float>*
  store <4 x float> %274, <4 x float>* %276, align 4, !alias.scope !11, !noalias !8
  %277 = add i64 %238, 16
  %278 = add i64 %239, -2
  %279 = icmp eq i64 %278, 0
  br i1 %279, label %280, label %237, !llvm.loop !13

280:                                              ; preds = %237, %227
  %281 = phi i64 [ 0, %227 ], [ %277, %237 ]
  br i1 %209, label %302, label %282

282:                                              ; preds = %280
  %283 = getelementptr float, float* %214, i64 1
  %284 = getelementptr float, float* %213, i64 %281
  %285 = getelementptr inbounds float, float* %283, i64 %281
  %286 = bitcast float* %284 to <4 x float>*
  %287 = load <4 x float>, <4 x float>* %286, align 4, !alias.scope !8
  %288 = getelementptr float, float* %284, i64 4
  %289 = bitcast float* %288 to <4 x float>*
  %290 = load <4 x float>, <4 x float>* %289, align 4, !alias.scope !8
  %291 = fmul <4 x float> %231, %287
  %292 = fmul <4 x float> %233, %290
  %293 = bitcast float* %285 to <4 x float>*
  %294 = load <4 x float>, <4 x float>* %293, align 4, !alias.scope !11, !noalias !8
  %295 = getelementptr inbounds float, float* %285, i64 4
  %296 = bitcast float* %295 to <4 x float>*
  %297 = load <4 x float>, <4 x float>* %296, align 4, !alias.scope !11, !noalias !8
  %298 = fsub <4 x float> %294, %291
  %299 = fsub <4 x float> %297, %292
  %300 = bitcast float* %285 to <4 x float>*
  store <4 x float> %298, <4 x float>* %300, align 4, !alias.scope !11, !noalias !8
  %301 = bitcast float* %295 to <4 x float>*
  store <4 x float> %299, <4 x float>* %301, align 4, !alias.scope !11, !noalias !8
  br label %302

302:                                              ; preds = %280, %282
  %303 = getelementptr float, float* %214, i64 %211
  br i1 %210, label %366, label %304

304:                                              ; preds = %302, %218, %212
  %305 = phi float* [ %214, %218 ], [ %214, %212 ], [ %228, %302 ]
  %306 = phi float* [ %213, %218 ], [ %213, %212 ], [ %229, %302 ]
  %307 = phi i32 [ %104, %218 ], [ %104, %212 ], [ %205, %302 ]
  %308 = sub i32 %2, %307
  %309 = xor i32 %307, -1
  %310 = add i32 %309, %2
  %311 = and i32 %308, 3
  %312 = icmp eq i32 %311, 0
  br i1 %312, label %327, label %313

313:                                              ; preds = %304, %313
  %314 = phi float* [ %318, %313 ], [ %305, %304 ]
  %315 = phi float* [ %319, %313 ], [ %306, %304 ]
  %316 = phi i32 [ %324, %313 ], [ %307, %304 ]
  %317 = phi i32 [ %325, %313 ], [ %311, %304 ]
  %318 = getelementptr inbounds float, float* %314, i64 1
  %319 = getelementptr inbounds float, float* %315, i64 1
  %320 = load float, float* %315, align 4
  %321 = fmul float %217, %320
  %322 = load float, float* %318, align 4
  %323 = fsub float %322, %321
  store float %323, float* %318, align 4
  %324 = add nuw i32 %316, 1
  %325 = add i32 %317, -1
  %326 = icmp eq i32 %325, 0
  br i1 %326, label %327, label %313, !llvm.loop !14

327:                                              ; preds = %313, %304
  %328 = phi float* [ undef, %304 ], [ %314, %313 ]
  %329 = phi float* [ undef, %304 ], [ %319, %313 ]
  %330 = phi float* [ %305, %304 ], [ %318, %313 ]
  %331 = phi float* [ %306, %304 ], [ %319, %313 ]
  %332 = phi i32 [ %307, %304 ], [ %324, %313 ]
  %333 = icmp ult i32 %310, 3
  br i1 %333, label %366, label %334

334:                                              ; preds = %327, %334
  %335 = phi float* [ %356, %334 ], [ %330, %327 ]
  %336 = phi float* [ %357, %334 ], [ %331, %327 ]
  %337 = phi i32 [ %362, %334 ], [ %332, %327 ]
  %338 = getelementptr inbounds float, float* %335, i64 1
  %339 = getelementptr inbounds float, float* %336, i64 1
  %340 = load float, float* %336, align 4
  %341 = fmul float %217, %340
  %342 = load float, float* %338, align 4
  %343 = fsub float %342, %341
  store float %343, float* %338, align 4
  %344 = getelementptr inbounds float, float* %335, i64 2
  %345 = getelementptr inbounds float, float* %336, i64 2
  %346 = load float, float* %339, align 4
  %347 = fmul float %217, %346
  %348 = load float, float* %344, align 4
  %349 = fsub float %348, %347
  store float %349, float* %344, align 4
  %350 = getelementptr inbounds float, float* %335, i64 3
  %351 = getelementptr inbounds float, float* %336, i64 3
  %352 = load float, float* %345, align 4
  %353 = fmul float %217, %352
  %354 = load float, float* %350, align 4
  %355 = fsub float %354, %353
  store float %355, float* %350, align 4
  %356 = getelementptr inbounds float, float* %335, i64 4
  %357 = getelementptr inbounds float, float* %336, i64 4
  %358 = load float, float* %351, align 4
  %359 = fmul float %217, %358
  %360 = load float, float* %356, align 4
  %361 = fsub float %360, %359
  store float %361, float* %356, align 4
  %362 = add nuw i32 %337, 4
  %363 = icmp eq i32 %362, %2
  br i1 %363, label %364, label %334, !llvm.loop !15

364:                                              ; preds = %334
  %365 = getelementptr inbounds float, float* %335, i64 3
  br label %366

366:                                              ; preds = %364, %327, %302
  %367 = phi float* [ %303, %302 ], [ %328, %327 ], [ %365, %364 ]
  %368 = phi float* [ %229, %302 ], [ %329, %327 ], [ %357, %364 ]
  %369 = getelementptr inbounds float, float* %367, i64 2
  %370 = getelementptr inbounds float, float* %368, i64 %201
  %371 = getelementptr inbounds float, float* %369, i64 %102
  %372 = add i32 %215, 1
  %373 = icmp eq i32 %372, %2
  br i1 %373, label %374, label %212

374:                                              ; preds = %366, %194
  %375 = add i32 %104, 1
  %376 = add i32 %103, -1
  %377 = getelementptr inbounds float, float* %105, i64 %91
  %378 = getelementptr inbounds i32, i32* %107, i64 1
  %379 = add nuw nsw i64 %102, 1
  %380 = icmp eq i64 %379, %92
  br i1 %380, label %381, label %101

381:                                              ; preds = %374, %88
  %382 = phi i64 [ 1, %88 ], [ %91, %374 ]
  %383 = getelementptr inbounds float, float* %13, i64 %382
  %384 = shl i32 %2, 1
  %385 = zext i32 %384 to i64
  %386 = getelementptr inbounds float, float* %13, i64 %385
  br i1 %15, label %630, label %387

387:                                              ; preds = %381
  %388 = add i32 %2, 1
  %389 = getelementptr inbounds float, float* %383, i64 %382
  %390 = getelementptr inbounds float, float* %386, i64 %382
  %391 = mul i32 %2, %2
  %392 = zext i32 %391 to i64
  %393 = getelementptr inbounds float, float* %0, i64 -1
  %394 = getelementptr inbounds float, float* %393, i64 %392
  %395 = zext i32 %388 to i64
  %396 = sub nsw i64 0, %395
  %397 = add nsw i64 %382, -1
  %398 = and i64 %382, 7
  %399 = icmp ult i64 %397, 7
  %400 = sub nsw i64 %382, %398
  %401 = icmp eq i64 %398, 0
  br label %402

402:                                              ; preds = %626, %387
  %403 = phi i64 [ 0, %387 ], [ %628, %626 ]
  %404 = phi float* [ %1, %387 ], [ %627, %626 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %12, i8 0, i64 %11, i1 false) #3
  %405 = getelementptr inbounds float, float* %13, i64 %403
  store float 1.000000e+00, float* %405, align 4
  br label %406

406:                                              ; preds = %468, %402
  %407 = phi i32* [ %470, %468 ], [ %10, %402 ]
  %408 = phi float* [ %477, %468 ], [ %0, %402 ]
  %409 = phi float* [ %476, %468 ], [ %386, %402 ]
  %410 = phi i32 [ %478, %468 ], [ 0, %402 ]
  %411 = icmp eq i32 %410, 0
  br i1 %411, label %468, label %412

412:                                              ; preds = %406
  %413 = add i32 %410, -1
  %414 = and i32 %410, 3
  %415 = icmp ult i32 %413, 3
  br i1 %415, label %449, label %416

416:                                              ; preds = %412
  %417 = sub i32 %410, %414
  br label %418

418:                                              ; preds = %418, %416
  %419 = phi float* [ %408, %416 ], [ %441, %418 ]
  %420 = phi float* [ %386, %416 ], [ %443, %418 ]
  %421 = phi float [ 0.000000e+00, %416 ], [ %446, %418 ]
  %422 = phi i32 [ %417, %416 ], [ %447, %418 ]
  %423 = getelementptr inbounds float, float* %419, i64 1
  %424 = load float, float* %419, align 4
  %425 = getelementptr inbounds float, float* %420, i64 1
  %426 = load float, float* %420, align 4
  %427 = fmul float %424, %426
  %428 = fadd float %421, %427
  %429 = getelementptr inbounds float, float* %419, i64 2
  %430 = load float, float* %423, align 4
  %431 = getelementptr inbounds float, float* %420, i64 2
  %432 = load float, float* %425, align 4
  %433 = fmul float %430, %432
  %434 = fadd float %428, %433
  %435 = getelementptr inbounds float, float* %419, i64 3
  %436 = load float, float* %429, align 4
  %437 = getelementptr inbounds float, float* %420, i64 3
  %438 = load float, float* %431, align 4
  %439 = fmul float %436, %438
  %440 = fadd float %434, %439
  %441 = getelementptr inbounds float, float* %419, i64 4
  %442 = load float, float* %435, align 4
  %443 = getelementptr inbounds float, float* %420, i64 4
  %444 = load float, float* %437, align 4
  %445 = fmul float %442, %444
  %446 = fadd float %440, %445
  %447 = add i32 %422, -4
  %448 = icmp eq i32 %447, 0
  br i1 %448, label %449, label %418

449:                                              ; preds = %418, %412
  %450 = phi float [ undef, %412 ], [ %446, %418 ]
  %451 = phi float* [ %408, %412 ], [ %441, %418 ]
  %452 = phi float* [ %386, %412 ], [ %443, %418 ]
  %453 = phi float [ 0.000000e+00, %412 ], [ %446, %418 ]
  %454 = icmp eq i32 %414, 0
  br i1 %454, label %468, label %455

455:                                              ; preds = %449, %455
  %456 = phi float* [ %460, %455 ], [ %451, %449 ]
  %457 = phi float* [ %462, %455 ], [ %452, %449 ]
  %458 = phi float [ %465, %455 ], [ %453, %449 ]
  %459 = phi i32 [ %466, %455 ], [ %414, %449 ]
  %460 = getelementptr inbounds float, float* %456, i64 1
  %461 = load float, float* %456, align 4
  %462 = getelementptr inbounds float, float* %457, i64 1
  %463 = load float, float* %457, align 4
  %464 = fmul float %461, %463
  %465 = fadd float %458, %464
  %466 = add i32 %459, -1
  %467 = icmp eq i32 %466, 0
  br i1 %467, label %468, label %455, !llvm.loop !16

468:                                              ; preds = %449, %455, %406
  %469 = phi float [ 0.000000e+00, %406 ], [ %450, %449 ], [ %465, %455 ]
  %470 = getelementptr inbounds i32, i32* %407, i64 1
  %471 = load i32, i32* %407, align 4
  %472 = zext i32 %471 to i64
  %473 = getelementptr inbounds float, float* %13, i64 %472
  %474 = load float, float* %473, align 4
  %475 = fsub float %474, %469
  %476 = getelementptr inbounds float, float* %409, i64 1
  store float %475, float* %409, align 4
  %477 = getelementptr inbounds float, float* %408, i64 %382
  %478 = add nuw i32 %410, 1
  %479 = icmp eq i32 %478, %2
  br i1 %479, label %480, label %406

480:                                              ; preds = %468, %548
  %481 = phi i32 [ %555, %548 ], [ 0, %468 ]
  %482 = phi i32 [ %489, %548 ], [ %2, %468 ]
  %483 = phi float* [ %488, %548 ], [ %390, %468 ]
  %484 = phi float* [ %487, %548 ], [ %389, %468 ]
  %485 = phi float* [ %553, %548 ], [ %394, %468 ]
  %486 = add i32 %481, -1
  %487 = getelementptr inbounds float, float* %484, i64 -1
  %488 = getelementptr inbounds float, float* %483, i64 -1
  %489 = add nsw i32 %482, -1
  %490 = load float, float* %485, align 4
  %491 = icmp ult i32 %482, %2
  br i1 %491, label %492, label %548

492:                                              ; preds = %480
  %493 = and i32 %481, 3
  %494 = icmp eq i32 %493, 0
  br i1 %494, label %510, label %495

495:                                              ; preds = %492, %495
  %496 = phi float* [ %501, %495 ], [ %485, %492 ]
  %497 = phi float* [ %503, %495 ], [ %484, %492 ]
  %498 = phi float [ %506, %495 ], [ 0.000000e+00, %492 ]
  %499 = phi i32 [ %507, %495 ], [ %482, %492 ]
  %500 = phi i32 [ %508, %495 ], [ %493, %492 ]
  %501 = getelementptr inbounds float, float* %496, i64 1
  %502 = load float, float* %501, align 4
  %503 = getelementptr inbounds float, float* %497, i64 1
  %504 = load float, float* %497, align 4
  %505 = fmul float %502, %504
  %506 = fadd float %498, %505
  %507 = add nuw i32 %499, 1
  %508 = add i32 %500, -1
  %509 = icmp eq i32 %508, 0
  br i1 %509, label %510, label %495, !llvm.loop !17

510:                                              ; preds = %495, %492
  %511 = phi float [ undef, %492 ], [ %506, %495 ]
  %512 = phi float* [ %485, %492 ], [ %501, %495 ]
  %513 = phi float* [ %484, %492 ], [ %503, %495 ]
  %514 = phi float [ 0.000000e+00, %492 ], [ %506, %495 ]
  %515 = phi i32 [ %482, %492 ], [ %507, %495 ]
  %516 = icmp ult i32 %486, 3
  br i1 %516, label %548, label %517

517:                                              ; preds = %510, %517
  %518 = phi float* [ %540, %517 ], [ %512, %510 ]
  %519 = phi float* [ %542, %517 ], [ %513, %510 ]
  %520 = phi float [ %545, %517 ], [ %514, %510 ]
  %521 = phi i32 [ %546, %517 ], [ %515, %510 ]
  %522 = getelementptr inbounds float, float* %518, i64 1
  %523 = load float, float* %522, align 4
  %524 = getelementptr inbounds float, float* %519, i64 1
  %525 = load float, float* %519, align 4
  %526 = fmul float %523, %525
  %527 = fadd float %520, %526
  %528 = getelementptr inbounds float, float* %518, i64 2
  %529 = load float, float* %528, align 4
  %530 = getelementptr inbounds float, float* %519, i64 2
  %531 = load float, float* %524, align 4
  %532 = fmul float %529, %531
  %533 = fadd float %527, %532
  %534 = getelementptr inbounds float, float* %518, i64 3
  %535 = load float, float* %534, align 4
  %536 = getelementptr inbounds float, float* %519, i64 3
  %537 = load float, float* %530, align 4
  %538 = fmul float %535, %537
  %539 = fadd float %533, %538
  %540 = getelementptr inbounds float, float* %518, i64 4
  %541 = load float, float* %540, align 4
  %542 = getelementptr inbounds float, float* %519, i64 4
  %543 = load float, float* %536, align 4
  %544 = fmul float %541, %543
  %545 = fadd float %539, %544
  %546 = add nuw i32 %521, 4
  %547 = icmp eq i32 %546, %2
  br i1 %547, label %548, label %517

548:                                              ; preds = %510, %517, %480
  %549 = phi float [ 0.000000e+00, %480 ], [ %511, %510 ], [ %545, %517 ]
  %550 = load float, float* %488, align 4
  %551 = fsub float %550, %549
  %552 = fdiv float %551, %490
  store float %552, float* %487, align 4
  %553 = getelementptr inbounds float, float* %485, i64 %396
  %554 = icmp eq i32 %489, 0
  %555 = add i32 %481, 1
  br i1 %554, label %556, label %480

556:                                              ; preds = %548
  br i1 %399, label %611, label %557

557:                                              ; preds = %556, %557
  %558 = phi i64 [ %608, %557 ], [ 0, %556 ]
  %559 = phi float* [ %607, %557 ], [ %404, %556 ]
  %560 = phi i64 [ %609, %557 ], [ %400, %556 ]
  %561 = getelementptr inbounds float, float* %383, i64 %558
  %562 = bitcast float* %561 to i32*
  %563 = load i32, i32* %562, align 4
  %564 = bitcast float* %559 to i32*
  store i32 %563, i32* %564, align 4
  %565 = getelementptr inbounds float, float* %559, i64 %382
  %566 = or i64 %558, 1
  %567 = getelementptr inbounds float, float* %383, i64 %566
  %568 = bitcast float* %567 to i32*
  %569 = load i32, i32* %568, align 4
  %570 = bitcast float* %565 to i32*
  store i32 %569, i32* %570, align 4
  %571 = getelementptr inbounds float, float* %565, i64 %382
  %572 = or i64 %558, 2
  %573 = getelementptr inbounds float, float* %383, i64 %572
  %574 = bitcast float* %573 to i32*
  %575 = load i32, i32* %574, align 4
  %576 = bitcast float* %571 to i32*
  store i32 %575, i32* %576, align 4
  %577 = getelementptr inbounds float, float* %571, i64 %382
  %578 = or i64 %558, 3
  %579 = getelementptr inbounds float, float* %383, i64 %578
  %580 = bitcast float* %579 to i32*
  %581 = load i32, i32* %580, align 4
  %582 = bitcast float* %577 to i32*
  store i32 %581, i32* %582, align 4
  %583 = getelementptr inbounds float, float* %577, i64 %382
  %584 = or i64 %558, 4
  %585 = getelementptr inbounds float, float* %383, i64 %584
  %586 = bitcast float* %585 to i32*
  %587 = load i32, i32* %586, align 4
  %588 = bitcast float* %583 to i32*
  store i32 %587, i32* %588, align 4
  %589 = getelementptr inbounds float, float* %583, i64 %382
  %590 = or i64 %558, 5
  %591 = getelementptr inbounds float, float* %383, i64 %590
  %592 = bitcast float* %591 to i32*
  %593 = load i32, i32* %592, align 4
  %594 = bitcast float* %589 to i32*
  store i32 %593, i32* %594, align 4
  %595 = getelementptr inbounds float, float* %589, i64 %382
  %596 = or i64 %558, 6
  %597 = getelementptr inbounds float, float* %383, i64 %596
  %598 = bitcast float* %597 to i32*
  %599 = load i32, i32* %598, align 4
  %600 = bitcast float* %595 to i32*
  store i32 %599, i32* %600, align 4
  %601 = getelementptr inbounds float, float* %595, i64 %382
  %602 = or i64 %558, 7
  %603 = getelementptr inbounds float, float* %383, i64 %602
  %604 = bitcast float* %603 to i32*
  %605 = load i32, i32* %604, align 4
  %606 = bitcast float* %601 to i32*
  store i32 %605, i32* %606, align 4
  %607 = getelementptr inbounds float, float* %601, i64 %382
  %608 = add nuw nsw i64 %558, 8
  %609 = add i64 %560, -8
  %610 = icmp eq i64 %609, 0
  br i1 %610, label %611, label %557

611:                                              ; preds = %557, %556
  %612 = phi i64 [ 0, %556 ], [ %608, %557 ]
  %613 = phi float* [ %404, %556 ], [ %607, %557 ]
  br i1 %401, label %626, label %614

614:                                              ; preds = %611, %614
  %615 = phi i64 [ %623, %614 ], [ %612, %611 ]
  %616 = phi float* [ %622, %614 ], [ %613, %611 ]
  %617 = phi i64 [ %624, %614 ], [ %398, %611 ]
  %618 = getelementptr inbounds float, float* %383, i64 %615
  %619 = bitcast float* %618 to i32*
  %620 = load i32, i32* %619, align 4
  %621 = bitcast float* %616 to i32*
  store i32 %620, i32* %621, align 4
  %622 = getelementptr inbounds float, float* %616, i64 %382
  %623 = add nuw nsw i64 %615, 1
  %624 = add i64 %617, -1
  %625 = icmp eq i64 %624, 0
  br i1 %625, label %626, label %614, !llvm.loop !18

626:                                              ; preds = %614, %611
  %627 = getelementptr inbounds float, float* %404, i64 1
  %628 = add nuw nsw i64 %403, 1
  %629 = icmp eq i64 %628, %382
  br i1 %629, label %630, label %402

630:                                              ; preds = %175, %101, %626, %381
  %631 = phi i32 [ 1, %381 ], [ 1, %626 ], [ 0, %101 ], [ 0, %175 ]
  tail call void @opj_free(i8* nonnull %6) #3
  br label %632

632:                                              ; preds = %630, %3
  %633 = phi i32 [ 0, %3 ], [ %631, %630 ]
  ret i32 %633
}

declare i8* @opj_malloc(i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @opj_free(i8*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = distinct !{!6, !7, !3}
!7 = !{!"llvm.loop.unroll.runtime.disable"}
!8 = !{!9}
!9 = distinct !{!9, !10}
!10 = distinct !{!10, !"LVerDomain"}
!11 = !{!12}
!12 = distinct !{!12, !10}
!13 = distinct !{!13, !3}
!14 = distinct !{!14, !5}
!15 = distinct !{!15, !3}
!16 = distinct !{!16, !5}
!17 = distinct !{!17, !5}
!18 = distinct !{!18, !5}
