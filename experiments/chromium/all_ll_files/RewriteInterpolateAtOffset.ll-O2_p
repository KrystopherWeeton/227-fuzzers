; ModuleID = '../../third_party/angle/src/compiler/translator/tree_ops/vulkan/RewriteInterpolateAtOffset.cpp'
source_filename = "../../third_party/angle/src/compiler/translator/tree_ops/vulkan/RewriteInterpolateAtOffset.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.sh::TCompiler" = type { %"class.sh::TShHandleBase", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.8", %"class.std::__1::vector.8", %"class.std::__1::vector.8", %"struct.sh::ValidateASTOptions", %"class.angle::BitSetT", i8, i8, i32, i32, i32, %"class.sh::CallDAG", %"class.std::__1::vector.59", %struct.ShBuiltInResources, %"class.std::__1::basic_string", %"class.sh::TSymbolTable", %"class.std::__1::map.90", %"class.sh::ArrayBoundsClamper", %"class.sh::BuiltInFunctionEmulator", i32, %"class.sh::TInfoSink", %"class.sh::TDiagnostics", i8*, i8, i8, i8, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"class.std::__1::map.124", %struct.TPragma, i64 }
%"class.sh::TShHandleBase" = type { i32 (...)**, %"class.angle::PoolAllocator" }
%"class.angle::PoolAllocator" = type <{ i64, i64, i64, i64, i64, %"struct.angle::PoolAllocator::Header"*, %"struct.angle::PoolAllocator::Header"*, %"class.std::__1::vector", i32, [4 x i8], i64, i8, [7 x i8] }>
%"struct.angle::PoolAllocator::Header" = type { %"struct.angle::PoolAllocator::Header"*, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.angle::PoolAllocator::AllocState"*, %"struct.angle::PoolAllocator::AllocState"*, %"class.std::__1::__compressed_pair" }
%"struct.angle::PoolAllocator::AllocState" = type { i64, %"struct.angle::PoolAllocator::Header"* }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.angle::PoolAllocator::AllocState"* }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"*, %"class.std::__1::__compressed_pair.3" }
%"struct.sh::ShaderVariable" = type { i32, i32, %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::vector.117", i8, i8, %"class.std::__1::vector.1", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, i32, i8, i32, i32, i32, i8, i8, i8, i32, i8, i32, i8, i8, i8, i8, i32 }
%"class.std::__1::vector.117" = type { %"class.std::__1::__vector_base.118" }
%"class.std::__1::__vector_base.118" = type { i32*, i32*, %"class.std::__1::__compressed_pair.119" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.120" }
%"struct.std::__1::__compressed_pair_elem.120" = type { i32* }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.sh::ShaderVariable"* }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { %"struct.sh::InterfaceBlock"*, %"struct.sh::InterfaceBlock"*, %"class.std::__1::__compressed_pair.15" }
%"struct.sh::InterfaceBlock" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, i32, i8, i32, i8, i8, i32, %"class.std::__1::vector.1" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"struct.sh::InterfaceBlock"* }
%"struct.sh::ValidateASTOptions" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"class.angle::BitSetT" = type { i32 }
%"class.sh::CallDAG" = type { %"class.std::__1::vector.20", %"class.std::__1::map" }
%"class.std::__1::vector.20" = type { %"class.std::__1::__vector_base.21" }
%"class.std::__1::__vector_base.21" = type { %"struct.sh::CallDAG::Record"*, %"struct.sh::CallDAG::Record"*, %"class.std::__1::__compressed_pair.46" }
%"struct.sh::CallDAG::Record" = type { %"class.sh::TIntermFunctionDefinition"*, %"class.std::__1::vector.39" }
%"class.sh::TIntermFunctionDefinition" = type { %"class.sh::TIntermNode", %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermNode" = type { i32 (...)**, %"struct.sh::TSourceLoc" }
%"struct.sh::TSourceLoc" = type { i32, i32, i32, i32 }
%"class.sh::TIntermFunctionPrototype" = type { %"class.sh::TIntermTyped", %"class.sh::TFunction"* }
%"class.sh::TIntermTyped" = type { %"class.sh::TIntermNode" }
%"class.sh::TFunction" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TVector"*, %"class.sh::TVariable"**, i64, %"class.sh::TType"*, %"class.sh::ImmutableString", i8, i8, i8, i8, [4 x i8] }>
%"class.sh::TSymbol.base" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8 }>
%"class.sh::TSymbolUniqueId" = type { i32 }
%"class.sh::TVector" = type opaque
%"class.sh::TVariable" = type { %"class.sh::TSymbol.base", %"class.sh::TType"*, %"class.sh::TConstantUnion"* }
%"class.sh::TConstantUnion" = type { %union.anon.30, i32 }
%union.anon.30 = type { i32 }
%"class.sh::TType" = type { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", i8, %"struct.sh::TLayoutQualifier", i8, i8, %"class.sh::TSpan", %"class.sh::TVector.22"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }
%"struct.sh::TMemoryQualifier" = type { i8, i8, i8, i8, i8 }
%"struct.sh::TLayoutQualifier" = type <{ i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"class.sh::TSpan" = type { i32*, i64 }
%"class.sh::TVector.22" = type opaque
%"class.sh::TInterfaceBlock" = type { %"class.sh::TSymbol.base", %"class.sh::TFieldListCollection", i32, i32 }
%"class.sh::TFieldListCollection" = type { %"class.sh::TVector.23"*, i64, i32, %"class.std::__1::basic_string.24" }
%"class.sh::TVector.23" = type opaque
%"class.std::__1::basic_string.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" = type { %union.anon.27 }
%union.anon.27 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TStructure" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TFieldListCollection", i8, [7 x i8] }>
%"class.sh::ImmutableString" = type { i8*, i64 }
%"class.sh::TIntermBlock" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.31", i8, [7 x i8] }>
%"class.sh::TIntermAggregateBase" = type { i32 (...)** }
%"class.sh::TVector.31" = type { %"class.std::__1::vector.32" }
%"class.std::__1::vector.32" = type { %"class.std::__1::__vector_base.33" }
%"class.std::__1::__vector_base.33" = type { %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"class.sh::TIntermNode"** }
%"class.std::__1::vector.39" = type { %"class.std::__1::__vector_base.40" }
%"class.std::__1::__vector_base.40" = type { i32*, i32*, %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { i32* }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"struct.sh::CallDAG::Record"* }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.51", %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { i64 }
%"class.std::__1::vector.59" = type { %"class.std::__1::__vector_base.60" }
%"class.std::__1::__vector_base.60" = type { %"struct.sh::TCompiler::FunctionMetadata"*, %"struct.sh::TCompiler::FunctionMetadata"*, %"class.std::__1::__compressed_pair.61" }
%"struct.sh::TCompiler::FunctionMetadata" = type { i8 }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { %"struct.sh::TCompiler::FunctionMetadata"* }
%struct.ShBuiltInResources = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 (i8*, i64)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"struct.std::__1::array", %"struct.std::__1::array", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"struct.std::__1::array" = type { [3 x i32] }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TSymbolTable" = type { %"class.sh::TSymbolTableBase", %"class.std::__1::vector.66", %"class.std::__1::vector.73", i8, i32, i32, i32, %struct.ShBuiltInResources, %"class.std::__1::map.81", %"class.sh::TVariable"* }
%"class.sh::TSymbolTableBase" = type { %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"* }
%"class.sh::TSymbol" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8, i8 }>
%"class.std::__1::vector.66" = type { %"class.std::__1::__vector_base.67" }
%"class.std::__1::__vector_base.67" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.68" }
%"class.std::__1::unique_ptr" = type opaque
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::vector.73" = type { %"class.std::__1::__vector_base.74" }
%"class.std::__1::__vector_base.74" = type { %"class.std::__1::unique_ptr.75"*, %"class.std::__1::unique_ptr.75"*, %"class.std::__1::__compressed_pair.76" }
%"class.std::__1::unique_ptr.75" = type opaque
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.77" }
%"struct.std::__1::__compressed_pair_elem.77" = type { %"class.std::__1::unique_ptr.75"* }
%"class.std::__1::map.81" = type { %"class.std::__1::__tree.82" }
%"class.std::__1::__tree.82" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.83", %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"class.std::__1::map.90" = type { %"class.std::__1::__tree.91" }
%"class.std::__1::__tree.91" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.92", %"class.std::__1::__compressed_pair.96" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"class.sh::ArrayBoundsClamper" = type <{ i32, i8, [3 x i8] }>
%"class.sh::BuiltInFunctionEmulator" = type { %"class.std::__1::map.101", %"class.std::__1::map", %"class.std::__1::vector.39", %"class.std::__1::vector.110" }
%"class.std::__1::map.101" = type { %"class.std::__1::__tree.102" }
%"class.std::__1::__tree.102" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.103", %"class.std::__1::__compressed_pair.107" }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::__compressed_pair.107" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"class.std::__1::vector.110" = type { %"class.std::__1::__vector_base.111" }
%"class.std::__1::__vector_base.111" = type { i8* (i32)**, i8* (i32)**, %"class.std::__1::__compressed_pair.112" }
%"class.std::__1::__compressed_pair.112" = type { %"struct.std::__1::__compressed_pair_elem.113" }
%"struct.std::__1::__compressed_pair_elem.113" = type { i8* (i32)** }
%"class.sh::TInfoSink" = type { %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase" }
%"class.sh::TInfoSinkBase" = type { %"class.std::__1::basic_string", %"class.std::__1::vector.117" }
%"class.sh::TDiagnostics" = type { %"class.angle::pp::Diagnostics", %"class.sh::TInfoSinkBase"*, i32, i32 }
%"class.angle::pp::Diagnostics" = type { i32 (...)** }
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.std::__1::map.124" = type { %"class.std::__1::__tree.125" }
%"class.std::__1::__tree.125" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.126", %"class.std::__1::__compressed_pair.130" }
%"class.std::__1::__compressed_pair.126" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::__compressed_pair.130" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%struct.TPragma = type { i8, i8, i8, %"struct.TPragma::STDGL" }
%"struct.TPragma::STDGL" = type { i8 }
%"class.sh::SpecConst" = type <{ i32 (...)**, %"class.sh::TSymbolTable"*, i64, %"class.angle::BitSetT", [4 x i8] }>
%"class.sh::DriverUniform" = type { i32 (...)**, %"class.sh::TVariable"*, %"class.sh::TType"* }
%"class.sh::(anonymous namespace)::Traverser" = type <{ %"class.sh::TIntermTraverser", %"class.sh::TSymbolTable"*, i32, [4 x i8], %"class.sh::SpecConst"*, %"class.sh::DriverUniform"*, i8, [7 x i8] }>
%"class.sh::TIntermTraverser" = type { i32 (...)**, i8, i8, i8, i32, i32, i8, %"class.std::__1::vector.135", %"class.sh::TSymbolTable"*, %"class.std::__1::vector.142", %"class.std::__1::vector.149", %"class.sh::TVector.31", %"class.std::__1::vector.156" }
%"class.std::__1::vector.135" = type { %"class.std::__1::__vector_base.136" }
%"class.std::__1::__vector_base.136" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"class.std::__1::__compressed_pair.137" }
%"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry" = type { %"class.sh::TIntermAggregateBase"*, %"class.sh::TIntermNode"*, %"class.sh::TVector.31" }
%"class.std::__1::__compressed_pair.137" = type { %"struct.std::__1::__compressed_pair_elem.138" }
%"struct.std::__1::__compressed_pair_elem.138" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* }
%"class.std::__1::vector.142" = type { %"class.std::__1::__vector_base.143" }
%"class.std::__1::__vector_base.143" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"class.std::__1::__compressed_pair.144" }
%"struct.sh::TIntermTraverser::NodeInsertMultipleEntry" = type { %"class.sh::TIntermBlock"*, i64, %"class.sh::TVector.31", %"class.sh::TVector.31" }
%"class.std::__1::__compressed_pair.144" = type { %"struct.std::__1::__compressed_pair_elem.145" }
%"struct.std::__1::__compressed_pair_elem.145" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"* }
%"class.std::__1::vector.149" = type { %"class.std::__1::__vector_base.150" }
%"class.std::__1::__vector_base.150" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"class.std::__1::__compressed_pair.151" }
%"struct.sh::TIntermTraverser::NodeUpdateEntry" = type <{ %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.151" = type { %"struct.std::__1::__compressed_pair_elem.152" }
%"struct.std::__1::__compressed_pair_elem.152" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"* }
%"class.std::__1::vector.156" = type { %"class.std::__1::__vector_base.157" }
%"class.std::__1::__vector_base.157" = type { %"struct.sh::TIntermTraverser::ParentBlock"*, %"struct.sh::TIntermTraverser::ParentBlock"*, %"class.std::__1::__compressed_pair.158" }
%"struct.sh::TIntermTraverser::ParentBlock" = type { %"class.sh::TIntermBlock"*, i64 }
%"class.std::__1::__compressed_pair.158" = type { %"struct.std::__1::__compressed_pair_elem.159" }
%"struct.std::__1::__compressed_pair_elem.159" = type { %"struct.sh::TIntermTraverser::ParentBlock"* }
%"class.sh::TIntermSymbol" = type { %"class.sh::TIntermTyped", %"class.sh::TVariable"* }
%"class.sh::TIntermConstantUnion" = type { %"class.sh::TIntermExpression", %"class.sh::TConstantUnion"* }
%"class.sh::TIntermExpression" = type { %"class.sh::TIntermTyped", %"class.sh::TType" }
%"class.sh::TIntermSwizzle" = type <{ %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TVector.163", i8, [7 x i8] }>
%"class.sh::TVector.163" = type { %"class.std::__1::vector.164" }
%"class.std::__1::vector.164" = type { %"class.std::__1::__vector_base.165" }
%"class.std::__1::__vector_base.165" = type { i32*, i32*, %"class.std::__1::__compressed_pair.166" }
%"class.std::__1::__compressed_pair.166" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"class.sh::TIntermBinary" = type <{ %"class.sh::TIntermOperator.base", [7 x i8], %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, i8, [7 x i8] }>
%"class.sh::TIntermOperator.base" = type <{ %"class.sh::TIntermExpression", i8 }>
%"class.sh::TIntermUnary" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermTyped"*, i8, %"class.sh::TFunction"* }
%"class.sh::TIntermTernary" = type { %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermIfElse" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermSwitch" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermCase" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"* }
%"class.sh::TIntermAggregate" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.31", i8, i8, %"class.sh::TFunction"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.sh::TIntermGlobalQualifierDeclaration" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermSymbol"*, i8, [7 x i8] }>
%"class.sh::TIntermDeclaration" = type { %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.31" }
%"class.sh::TIntermLoop" = type { %"class.sh::TIntermNode", i32, %"class.sh::TIntermNode"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermBranch" = type { %"class.sh::TIntermNode", i8, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermPreprocessorDirective" = type { %"class.sh::TIntermNode", i32, %"class.sh::ImmutableString" }

$_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE = comdat any

$_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE = comdat any

$_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE = comdat any

$_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE = comdat any

$_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE = comdat any

$_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE = comdat any

$_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE = comdat any

$_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE = comdat any

$_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE = comdat any

$_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE = comdat any

$_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE = comdat any

$_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE = comdat any

$_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE = comdat any

$_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE = comdat any

$_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE = comdat any

$_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE = comdat any

$_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE = comdat any

@_ZTVN2sh12_GLOBAL__N_19TraverserE = internal unnamed_addr constant { [28 x i8*] } { [28 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TIntermTraverser"*)* @_ZN2sh16TIntermTraverserD2Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::Traverser"*)* @_ZN2sh12_GLOBAL__N_19TraverserD0Ev to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermSymbol"*)* @_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*)* @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*)* @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*)* @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*)* @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*)* @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*)* @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*)* @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::Traverser"*, i32, %"class.sh::TIntermAggregate"*)* @_ZN2sh12_GLOBAL__N_19Traverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*)* @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermDeclaration"*)* @_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*)* @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*)* @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE to i8*)] }, align 8
@.str = private unnamed_addr constant [20 x i8] c"interpolateAtOffset\00", align 1
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh26RewriteInterpolateAtOffsetEPNS_9TCompilerEmPNS_11TIntermNodeERKNS_12TSymbolTableEiPNS_9SpecConstEPKNS_13DriverUniformE(%"class.sh::TCompiler"*, i64, %"class.sh::TIntermNode"*, %"class.sh::TSymbolTable"* dereferenceable(1720), i32, %"class.sh::SpecConst"*, %"class.sh::DriverUniform"*) local_unnamed_addr #0 {
  %8 = alloca %"class.sh::(anonymous namespace)::Traverser", align 8
  %9 = icmp slt i32 %4, 300
  br i1 %9, label %27, label %10

10:                                               ; preds = %7
  %11 = bitcast %"class.sh::(anonymous namespace)::Traverser"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 192, i8* nonnull %11) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 192, i1 false) #7
  %12 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %8, i64 0, i32 0
  call void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"* nonnull %12, i1 zeroext true, i1 zeroext false, i1 zeroext false, %"class.sh::TSymbolTable"* %3) #7
  %13 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %8, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_19TraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %13, align 8
  %14 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %8, i64 0, i32 1
  store %"class.sh::TSymbolTable"* %3, %"class.sh::TSymbolTable"** %14, align 8
  %15 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %8, i64 0, i32 2
  store i32 %4, i32* %15, align 8
  %16 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %8, i64 0, i32 4
  store %"class.sh::SpecConst"* %5, %"class.sh::SpecConst"** %16, align 8
  %17 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %8, i64 0, i32 5
  store %"class.sh::DriverUniform"* %6, %"class.sh::DriverUniform"** %17, align 8
  %18 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %8, i64 0, i32 6
  %19 = lshr i64 %1, 52
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  store i8 %21, i8* %18, align 8
  %22 = bitcast %"class.sh::TIntermNode"* %2 to void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)***
  %23 = load void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)**, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*** %22, align 8
  %24 = getelementptr inbounds void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)** %23, i64 2
  %25 = load void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)** %24, align 8
  call void %25(%"class.sh::TIntermNode"* %2, %"class.sh::TIntermTraverser"* nonnull %12) #7
  %26 = call zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"* nonnull %12, %"class.sh::TCompiler"* %0, %"class.sh::TIntermNode"* %2) #7
  call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* nonnull %12) #7
  call void @llvm.lifetime.end.p0i8(i64 192, i8* nonnull %11) #7
  br label %27

27:                                               ; preds = %7, %10
  %28 = phi i1 [ %26, %10 ], [ true, %7 ]
  ret i1 %28
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TCompiler"*, %"class.sh::TIntermNode"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"*, i1 zeroext, i1 zeroext, i1 zeroext, %"class.sh::TSymbolTable"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_19TraverserD0Ev(%"class.sh::(anonymous namespace)::Traverser"*) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermSymbol"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBinary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_19Traverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE(%"class.sh::(anonymous namespace)::Traverser"*, i32, %"class.sh::TIntermAggregate"*) unnamed_addr #0 align 2 {
  %4 = alloca %"class.sh::TVector.31", align 8
  %5 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %2, i64 0, i32 0, i32 1
  %6 = load i8, i8* %5, align 8
  %7 = icmp eq i8 %6, 3
  br i1 %7, label %8, label %522

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %2, i64 0, i32 5
  %10 = bitcast %"class.sh::TFunction"** %9 to %"class.sh::TSymbol"**
  %11 = load %"class.sh::TSymbol"*, %"class.sh::TSymbol"** %10, align 8
  %12 = tail call { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"* %11) #7
  %13 = extractvalue { i8*, i64 } %12, 0
  %14 = icmp eq i8* %13, null
  %15 = select i1 %14, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i8* %13
  %16 = tail call i32 @strcmp(i8* %15, i8* nonnull getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0)) #8
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %522

18:                                               ; preds = %8
  %19 = bitcast %"class.sh::TIntermAggregate"* %2 to %"class.sh::TVector.31"* (%"class.sh::TIntermAggregate"*)***
  %20 = load %"class.sh::TVector.31"* (%"class.sh::TIntermAggregate"*)**, %"class.sh::TVector.31"* (%"class.sh::TIntermAggregate"*)*** %19, align 8
  %21 = getelementptr inbounds %"class.sh::TVector.31"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermAggregate"*)** %20, i64 32
  %22 = load %"class.sh::TVector.31"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermAggregate"*)** %21, align 8
  %23 = tail call %"class.sh::TVector.31"* %22(%"class.sh::TIntermAggregate"* %2) #7
  %24 = bitcast %"class.sh::TVector.31"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %24) #7
  %25 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %4, i64 0, i32 0, i32 0, i32 0
  %26 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %4, i64 0, i32 0, i32 0, i32 1
  %27 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %4, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %24, i8 0, i64 24, i1 false) #7
  %28 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %23, i64 0, i32 0, i32 0, i32 1
  %29 = bitcast %"class.sh::TIntermNode"*** %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = bitcast %"class.sh::TVector.31"* %23 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = icmp eq i64 %30, %32
  br i1 %33, label %34, label %36

34:                                               ; preds = %18
  %35 = bitcast %"class.sh::TVector.31"* %23 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* %35) #9
  unreachable

36:                                               ; preds = %18
  %37 = bitcast %"class.sh::TIntermNode"*** %26 to i64*
  %38 = bitcast %"class.sh::TVector.31"* %4 to i64*
  %39 = bitcast %"class.sh::TIntermNode"*** %27 to i64*
  %40 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %41 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %40, i64 8) #7
  %42 = bitcast i8* %41 to %"class.sh::TIntermNode"**
  %43 = getelementptr inbounds i8, i8* %41, i64 8
  %44 = ptrtoint i8* %43 to i64
  %45 = inttoptr i64 %32 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = bitcast i8* %41 to i64*
  store i64 %46, i64* %47, align 8
  %48 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %25, align 8
  %49 = ptrtoint %"class.sh::TIntermNode"** %48 to i64
  %50 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %26, align 8
  %51 = bitcast %"class.sh::TIntermNode"** %50 to i8*
  %52 = icmp eq %"class.sh::TIntermNode"** %50, %48
  br i1 %52, label %226, label %53

53:                                               ; preds = %36
  %54 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %50, i64 -1
  %55 = ptrtoint %"class.sh::TIntermNode"** %54 to i64
  %56 = sub i64 %55, %49
  %57 = lshr i64 %56, 3
  %58 = add nuw nsw i64 %57, 1
  %59 = icmp ult i64 %58, 4
  br i1 %59, label %156, label %60

60:                                               ; preds = %53
  %61 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %50, i64 -1
  %62 = ptrtoint %"class.sh::TIntermNode"** %61 to i64
  %63 = sub i64 %62, %49
  %64 = lshr i64 %63, 3
  %65 = and i64 %63, -8
  %66 = xor i64 %65, -8
  %67 = getelementptr i8, i8* %41, i64 %66
  %68 = xor i64 %64, -1
  %69 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %50, i64 %68
  %70 = bitcast %"class.sh::TIntermNode"** %69 to i8*
  %71 = icmp ult i8* %67, %51
  %72 = icmp ugt i8* %41, %70
  %73 = and i1 %71, %72
  br i1 %73, label %156, label %74

74:                                               ; preds = %60
  %75 = and i64 %58, 4611686018427387900
  %76 = sub nsw i64 0, %75
  %77 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %42, i64 %76
  %78 = sub nsw i64 0, %75
  %79 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %50, i64 %78
  %80 = add nsw i64 %75, -4
  %81 = lshr exact i64 %80, 2
  %82 = add nuw nsw i64 %81, 1
  %83 = and i64 %82, 1
  %84 = icmp eq i64 %80, 0
  br i1 %84, label %131, label %85

85:                                               ; preds = %74
  %86 = sub nuw nsw i64 %82, %83
  %87 = getelementptr i8, i8* %41, i64 -8
  %88 = bitcast i8* %87 to %"class.sh::TIntermNode"**
  %89 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %50, i64 -1
  %90 = getelementptr i8, i8* %41, i64 -8
  %91 = bitcast i8* %90 to %"class.sh::TIntermNode"**
  %92 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %50, i64 -1
  br label %93

93:                                               ; preds = %93, %85
  %94 = phi i64 [ 0, %85 ], [ %128, %93 ]
  %95 = phi i64 [ %86, %85 ], [ %129, %93 ]
  %96 = sub i64 0, %94
  %97 = sub i64 0, %94
  %98 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %88, i64 %96
  %99 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %89, i64 %97
  %100 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %99, i64 -1
  %101 = bitcast %"class.sh::TIntermNode"** %100 to <2 x i64>*
  %102 = load <2 x i64>, <2 x i64>* %101, align 8, !alias.scope !2
  %103 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %99, i64 -2
  %104 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %103, i64 -1
  %105 = bitcast %"class.sh::TIntermNode"** %104 to <2 x i64>*
  %106 = load <2 x i64>, <2 x i64>* %105, align 8, !alias.scope !2
  %107 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %98, i64 -1
  %108 = bitcast %"class.sh::TIntermNode"** %107 to <2 x i64>*
  store <2 x i64> %102, <2 x i64>* %108, align 8, !alias.scope !5, !noalias !2
  %109 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %98, i64 -2
  %110 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %109, i64 -1
  %111 = bitcast %"class.sh::TIntermNode"** %110 to <2 x i64>*
  store <2 x i64> %106, <2 x i64>* %111, align 8, !alias.scope !5, !noalias !2
  %112 = sub nuw nsw i64 -4, %94
  %113 = sub nuw nsw i64 -4, %94
  %114 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %91, i64 %112
  %115 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %92, i64 %113
  %116 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %115, i64 -1
  %117 = bitcast %"class.sh::TIntermNode"** %116 to <2 x i64>*
  %118 = load <2 x i64>, <2 x i64>* %117, align 8, !alias.scope !2
  %119 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %115, i64 -2
  %120 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %119, i64 -1
  %121 = bitcast %"class.sh::TIntermNode"** %120 to <2 x i64>*
  %122 = load <2 x i64>, <2 x i64>* %121, align 8, !alias.scope !2
  %123 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %114, i64 -1
  %124 = bitcast %"class.sh::TIntermNode"** %123 to <2 x i64>*
  store <2 x i64> %118, <2 x i64>* %124, align 8, !alias.scope !5, !noalias !2
  %125 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %114, i64 -2
  %126 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %125, i64 -1
  %127 = bitcast %"class.sh::TIntermNode"** %126 to <2 x i64>*
  store <2 x i64> %122, <2 x i64>* %127, align 8, !alias.scope !5, !noalias !2
  %128 = add i64 %94, 8
  %129 = add i64 %95, -2
  %130 = icmp eq i64 %129, 0
  br i1 %130, label %131, label %93, !llvm.loop !7

131:                                              ; preds = %93, %74
  %132 = phi i64 [ 0, %74 ], [ %128, %93 ]
  %133 = icmp eq i64 %83, 0
  br i1 %133, label %154, label %134

134:                                              ; preds = %131
  %135 = sub i64 0, %132
  %136 = getelementptr i8, i8* %41, i64 -8
  %137 = bitcast i8* %136 to %"class.sh::TIntermNode"**
  %138 = sub i64 0, %132
  %139 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %50, i64 -1
  %140 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %137, i64 %135
  %141 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %139, i64 %138
  %142 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %141, i64 -1
  %143 = bitcast %"class.sh::TIntermNode"** %142 to <2 x i64>*
  %144 = load <2 x i64>, <2 x i64>* %143, align 8, !alias.scope !2
  %145 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %141, i64 -2
  %146 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %145, i64 -1
  %147 = bitcast %"class.sh::TIntermNode"** %146 to <2 x i64>*
  %148 = load <2 x i64>, <2 x i64>* %147, align 8, !alias.scope !2
  %149 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %140, i64 -1
  %150 = bitcast %"class.sh::TIntermNode"** %149 to <2 x i64>*
  store <2 x i64> %144, <2 x i64>* %150, align 8, !alias.scope !5, !noalias !2
  %151 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %140, i64 -2
  %152 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %151, i64 -1
  %153 = bitcast %"class.sh::TIntermNode"** %152 to <2 x i64>*
  store <2 x i64> %148, <2 x i64>* %153, align 8, !alias.scope !5, !noalias !2
  br label %154

154:                                              ; preds = %131, %134
  %155 = icmp eq i64 %58, %75
  br i1 %155, label %226, label %156

156:                                              ; preds = %154, %60, %53
  %157 = phi %"class.sh::TIntermNode"** [ %42, %60 ], [ %42, %53 ], [ %77, %154 ]
  %158 = phi %"class.sh::TIntermNode"** [ %50, %60 ], [ %50, %53 ], [ %79, %154 ]
  %159 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %158, i64 -1
  %160 = ptrtoint %"class.sh::TIntermNode"** %159 to i64
  %161 = sub i64 %160, %49
  %162 = lshr i64 %161, 3
  %163 = add nuw nsw i64 %162, 1
  %164 = and i64 %163, 7
  %165 = icmp eq i64 %164, 0
  br i1 %165, label %177, label %166

166:                                              ; preds = %156, %166
  %167 = phi %"class.sh::TIntermNode"** [ %170, %166 ], [ %157, %156 ]
  %168 = phi %"class.sh::TIntermNode"** [ %171, %166 ], [ %158, %156 ]
  %169 = phi i64 [ %175, %166 ], [ %164, %156 ]
  %170 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %167, i64 -1
  %171 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %168, i64 -1
  %172 = bitcast %"class.sh::TIntermNode"** %171 to i64*
  %173 = load i64, i64* %172, align 8
  %174 = bitcast %"class.sh::TIntermNode"** %170 to i64*
  store i64 %173, i64* %174, align 8
  %175 = add i64 %169, -1
  %176 = icmp eq i64 %175, 0
  br i1 %176, label %177, label %166, !llvm.loop !9

177:                                              ; preds = %166, %156
  %178 = phi %"class.sh::TIntermNode"** [ undef, %156 ], [ %170, %166 ]
  %179 = phi %"class.sh::TIntermNode"** [ %157, %156 ], [ %170, %166 ]
  %180 = phi %"class.sh::TIntermNode"** [ %158, %156 ], [ %171, %166 ]
  %181 = icmp ult i64 %161, 56
  br i1 %181, label %226, label %182

182:                                              ; preds = %177, %182
  %183 = phi %"class.sh::TIntermNode"** [ %220, %182 ], [ %179, %177 ]
  %184 = phi %"class.sh::TIntermNode"** [ %221, %182 ], [ %180, %177 ]
  %185 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %183, i64 -1
  %186 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %184, i64 -1
  %187 = bitcast %"class.sh::TIntermNode"** %186 to i64*
  %188 = load i64, i64* %187, align 8
  %189 = bitcast %"class.sh::TIntermNode"** %185 to i64*
  store i64 %188, i64* %189, align 8
  %190 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %183, i64 -2
  %191 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %184, i64 -2
  %192 = bitcast %"class.sh::TIntermNode"** %191 to i64*
  %193 = load i64, i64* %192, align 8
  %194 = bitcast %"class.sh::TIntermNode"** %190 to i64*
  store i64 %193, i64* %194, align 8
  %195 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %183, i64 -3
  %196 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %184, i64 -3
  %197 = bitcast %"class.sh::TIntermNode"** %196 to i64*
  %198 = load i64, i64* %197, align 8
  %199 = bitcast %"class.sh::TIntermNode"** %195 to i64*
  store i64 %198, i64* %199, align 8
  %200 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %183, i64 -4
  %201 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %184, i64 -4
  %202 = bitcast %"class.sh::TIntermNode"** %201 to i64*
  %203 = load i64, i64* %202, align 8
  %204 = bitcast %"class.sh::TIntermNode"** %200 to i64*
  store i64 %203, i64* %204, align 8
  %205 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %183, i64 -5
  %206 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %184, i64 -5
  %207 = bitcast %"class.sh::TIntermNode"** %206 to i64*
  %208 = load i64, i64* %207, align 8
  %209 = bitcast %"class.sh::TIntermNode"** %205 to i64*
  store i64 %208, i64* %209, align 8
  %210 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %183, i64 -6
  %211 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %184, i64 -6
  %212 = bitcast %"class.sh::TIntermNode"** %211 to i64*
  %213 = load i64, i64* %212, align 8
  %214 = bitcast %"class.sh::TIntermNode"** %210 to i64*
  store i64 %213, i64* %214, align 8
  %215 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %183, i64 -7
  %216 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %184, i64 -7
  %217 = bitcast %"class.sh::TIntermNode"** %216 to i64*
  %218 = load i64, i64* %217, align 8
  %219 = bitcast %"class.sh::TIntermNode"** %215 to i64*
  store i64 %218, i64* %219, align 8
  %220 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %183, i64 -8
  %221 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %184, i64 -8
  %222 = bitcast %"class.sh::TIntermNode"** %221 to i64*
  %223 = load i64, i64* %222, align 8
  %224 = bitcast %"class.sh::TIntermNode"** %220 to i64*
  store i64 %223, i64* %224, align 8
  %225 = icmp eq %"class.sh::TIntermNode"** %221, %48
  br i1 %225, label %226, label %182, !llvm.loop !11

226:                                              ; preds = %177, %182, %154, %36
  %227 = phi %"class.sh::TIntermNode"** [ %42, %36 ], [ %77, %154 ], [ %178, %177 ], [ %220, %182 ]
  %228 = ptrtoint %"class.sh::TIntermNode"** %227 to i64
  store i64 %228, i64* %38, align 8
  store i64 %44, i64* %37, align 8
  store i64 %44, i64* %39, align 8
  %229 = load i64, i64* %29, align 8
  %230 = load i64, i64* %31, align 8
  %231 = sub i64 %229, %230
  %232 = ashr exact i64 %231, 3
  %233 = icmp ugt i64 %232, 1
  br i1 %233, label %236, label %234

234:                                              ; preds = %226
  %235 = bitcast %"class.sh::TVector.31"* %23 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* %235) #9
  unreachable

236:                                              ; preds = %226
  %237 = inttoptr i64 %230 to %"class.sh::TIntermNode"**
  %238 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %237, i64 1
  %239 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %238, align 8
  %240 = bitcast %"class.sh::TIntermNode"* %239 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %241 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %240, align 8
  %242 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %241, i64 4
  %243 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %242, align 8
  %244 = tail call %"class.sh::TIntermTyped"* %243(%"class.sh::TIntermNode"* %239) #7
  %245 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 6
  %246 = load i8, i8* %245, align 8, !range !12
  %247 = icmp eq i8 %246, 0
  %248 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 4
  %249 = load %"class.sh::SpecConst"*, %"class.sh::SpecConst"** %248, align 8
  br i1 %247, label %273, label %250

250:                                              ; preds = %236
  %251 = tail call %"class.sh::TIntermTyped"* @_ZN2sh9SpecConst29getFragRotationMultiplyFlipXYEv(%"class.sh::SpecConst"* %249) #7
  %252 = icmp eq %"class.sh::TIntermTyped"* %251, null
  br i1 %252, label %253, label %285

253:                                              ; preds = %250
  %254 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 5
  %255 = load %"class.sh::DriverUniform"*, %"class.sh::DriverUniform"** %254, align 8
  %256 = bitcast %"class.sh::DriverUniform"* %255 to %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)***
  %257 = load %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)**, %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)*** %256, align 8
  %258 = getelementptr inbounds %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)*, %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)** %257, i64 2
  %259 = load %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)*, %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)** %258, align 8
  %260 = tail call %"class.sh::TIntermBinary"* %259(%"class.sh::DriverUniform"* %255) #7
  %261 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %260, i64 0, i32 0, i32 0, i32 0
  %262 = load %"class.sh::DriverUniform"*, %"class.sh::DriverUniform"** %254, align 8
  %263 = bitcast %"class.sh::DriverUniform"* %262 to %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)***
  %264 = load %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)**, %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)*** %263, align 8
  %265 = getelementptr inbounds %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)*, %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)** %264, i64 4
  %266 = load %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)*, %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)** %265, align 8
  %267 = tail call %"class.sh::TIntermBinary"* %266(%"class.sh::DriverUniform"* %262) #7
  %268 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %267, i64 0, i32 0, i32 0, i32 0
  %269 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %270 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %269, i64 240) #7
  %271 = bitcast i8* %270 to %"class.sh::TIntermBinary"*
  tail call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %271, i8 zeroext 33, %"class.sh::TIntermTyped"* %268, %"class.sh::TIntermTyped"* %261) #7
  %272 = bitcast i8* %270 to %"class.sh::TIntermTyped"*
  br label %285

273:                                              ; preds = %236
  %274 = tail call %"class.sh::TIntermTyped"* @_ZN2sh9SpecConst9getFlipXYEv(%"class.sh::SpecConst"* %249) #7
  %275 = icmp eq %"class.sh::TIntermTyped"* %274, null
  br i1 %275, label %276, label %285

276:                                              ; preds = %273
  %277 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 5
  %278 = load %"class.sh::DriverUniform"*, %"class.sh::DriverUniform"** %277, align 8
  %279 = bitcast %"class.sh::DriverUniform"* %278 to %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)***
  %280 = load %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)**, %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)*** %279, align 8
  %281 = getelementptr inbounds %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)*, %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)** %280, i64 2
  %282 = load %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)*, %"class.sh::TIntermBinary"* (%"class.sh::DriverUniform"*)** %281, align 8
  %283 = tail call %"class.sh::TIntermBinary"* %282(%"class.sh::DriverUniform"* %278) #7
  %284 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %283, i64 0, i32 0, i32 0, i32 0
  br label %285

285:                                              ; preds = %250, %273, %276, %253
  %286 = phi %"class.sh::TIntermTyped"* [ %251, %250 ], [ %272, %253 ], [ %274, %273 ], [ %284, %276 ]
  %287 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %288 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %287, i64 240) #7
  %289 = bitcast i8* %288 to %"class.sh::TIntermBinary"*
  tail call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %289, i8 zeroext 15, %"class.sh::TIntermTyped"* %244, %"class.sh::TIntermTyped"* %286) #7
  %290 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %244, i64 0, i32 0, i32 1
  %291 = getelementptr inbounds i8, i8* %288, i64 8
  %292 = bitcast %"struct.sh::TSourceLoc"* %290 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %291, i8* align 4 %292, i64 16, i1 false) #7
  %293 = ptrtoint i8* %288 to i64
  %294 = ptrtoint i8* %43 to i64
  %295 = bitcast %"class.sh::TIntermNode"*** %26 to i64*
  %296 = bitcast %"class.sh::TVector.31"* %4 to i64*
  %297 = sub i64 %294, %228
  %298 = ashr exact i64 %297, 3
  %299 = add nsw i64 %298, 1
  %300 = icmp ugt i64 %299, 2305843009213693951
  br i1 %300, label %301, label %303

301:                                              ; preds = %285
  %302 = bitcast %"class.sh::TVector.31"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %302) #9
  unreachable

303:                                              ; preds = %285
  %304 = ptrtoint i8* %43 to i64
  %305 = bitcast %"class.sh::TIntermNode"*** %27 to i64*
  %306 = sub i64 %304, %228
  %307 = ashr exact i64 %306, 3
  %308 = icmp ult i64 %307, 1152921504606846975
  br i1 %308, label %309, label %314

309:                                              ; preds = %303
  %310 = ashr exact i64 %306, 2
  %311 = icmp ult i64 %310, %299
  %312 = select i1 %311, i64 %299, i64 %310
  %313 = icmp eq i64 %312, 0
  br i1 %313, label %320, label %314

314:                                              ; preds = %309, %303
  %315 = phi i64 [ %312, %309 ], [ 2305843009213693951, %303 ]
  %316 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %317 = shl i64 %315, 3
  %318 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %316, i64 %317) #7
  %319 = bitcast i8* %318 to %"class.sh::TIntermNode"**
  br label %320

320:                                              ; preds = %314, %309
  %321 = phi i64 [ %315, %314 ], [ 0, %309 ]
  %322 = phi %"class.sh::TIntermNode"** [ %319, %314 ], [ null, %309 ]
  %323 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %322, i64 %298
  %324 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %322, i64 %321
  %325 = ptrtoint %"class.sh::TIntermNode"** %324 to i64
  %326 = bitcast %"class.sh::TIntermNode"** %323 to i64*
  store i64 %293, i64* %326, align 8
  %327 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %323, i64 1
  %328 = ptrtoint %"class.sh::TIntermNode"** %327 to i64
  %329 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %25, align 8
  %330 = ptrtoint %"class.sh::TIntermNode"** %329 to i64
  %331 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %26, align 8
  %332 = icmp eq %"class.sh::TIntermNode"** %331, %329
  br i1 %332, label %502, label %333

333:                                              ; preds = %320
  %334 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %331, i64 -1
  %335 = ptrtoint %"class.sh::TIntermNode"** %334 to i64
  %336 = sub i64 %335, %330
  %337 = lshr i64 %336, 3
  %338 = add nuw nsw i64 %337, 1
  %339 = icmp ult i64 %338, 4
  br i1 %339, label %432, label %340

340:                                              ; preds = %333
  %341 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %331, i64 -1
  %342 = ptrtoint %"class.sh::TIntermNode"** %341 to i64
  %343 = sub i64 %342, %330
  %344 = lshr i64 %343, 3
  %345 = xor i64 %344, -1
  %346 = add nsw i64 %298, %345
  %347 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %322, i64 %346
  %348 = xor i64 %344, -1
  %349 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %331, i64 %348
  %350 = icmp ult %"class.sh::TIntermNode"** %347, %331
  %351 = icmp ult %"class.sh::TIntermNode"** %349, %323
  %352 = and i1 %350, %351
  br i1 %352, label %432, label %353

353:                                              ; preds = %340
  %354 = and i64 %338, 4611686018427387900
  %355 = sub nsw i64 0, %354
  %356 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %323, i64 %355
  %357 = sub nsw i64 0, %354
  %358 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %331, i64 %357
  %359 = add nsw i64 %354, -4
  %360 = lshr exact i64 %359, 2
  %361 = add nuw nsw i64 %360, 1
  %362 = and i64 %361, 1
  %363 = icmp eq i64 %359, 0
  br i1 %363, label %410, label %364

364:                                              ; preds = %353
  %365 = sub nuw nsw i64 %361, %362
  %366 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %323, i64 -1
  %367 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %331, i64 -1
  %368 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %323, i64 -1
  %369 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %331, i64 -1
  br label %370

370:                                              ; preds = %370, %364
  %371 = phi i64 [ 0, %364 ], [ %405, %370 ]
  %372 = phi i64 [ %365, %364 ], [ %406, %370 ]
  %373 = sub i64 0, %371
  %374 = sub i64 0, %371
  %375 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %366, i64 %373
  %376 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %367, i64 %374
  %377 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %376, i64 -1
  %378 = bitcast %"class.sh::TIntermNode"** %377 to <2 x i64>*
  %379 = load <2 x i64>, <2 x i64>* %378, align 8, !alias.scope !13
  %380 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %376, i64 -2
  %381 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %380, i64 -1
  %382 = bitcast %"class.sh::TIntermNode"** %381 to <2 x i64>*
  %383 = load <2 x i64>, <2 x i64>* %382, align 8, !alias.scope !13
  %384 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %375, i64 -1
  %385 = bitcast %"class.sh::TIntermNode"** %384 to <2 x i64>*
  store <2 x i64> %379, <2 x i64>* %385, align 8, !alias.scope !16, !noalias !13
  %386 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %375, i64 -2
  %387 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %386, i64 -1
  %388 = bitcast %"class.sh::TIntermNode"** %387 to <2 x i64>*
  store <2 x i64> %383, <2 x i64>* %388, align 8, !alias.scope !16, !noalias !13
  %389 = sub nuw nsw i64 -4, %371
  %390 = sub nuw nsw i64 -4, %371
  %391 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %368, i64 %389
  %392 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %369, i64 %390
  %393 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %392, i64 -1
  %394 = bitcast %"class.sh::TIntermNode"** %393 to <2 x i64>*
  %395 = load <2 x i64>, <2 x i64>* %394, align 8, !alias.scope !13
  %396 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %392, i64 -2
  %397 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %396, i64 -1
  %398 = bitcast %"class.sh::TIntermNode"** %397 to <2 x i64>*
  %399 = load <2 x i64>, <2 x i64>* %398, align 8, !alias.scope !13
  %400 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %391, i64 -1
  %401 = bitcast %"class.sh::TIntermNode"** %400 to <2 x i64>*
  store <2 x i64> %395, <2 x i64>* %401, align 8, !alias.scope !16, !noalias !13
  %402 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %391, i64 -2
  %403 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %402, i64 -1
  %404 = bitcast %"class.sh::TIntermNode"** %403 to <2 x i64>*
  store <2 x i64> %399, <2 x i64>* %404, align 8, !alias.scope !16, !noalias !13
  %405 = add i64 %371, 8
  %406 = add i64 %372, -2
  %407 = icmp eq i64 %406, 0
  br i1 %407, label %408, label %370, !llvm.loop !18

408:                                              ; preds = %370
  %409 = sub nuw nsw i64 -8, %371
  br label %410

410:                                              ; preds = %408, %353
  %411 = phi i64 [ 0, %353 ], [ %409, %408 ]
  %412 = icmp eq i64 %362, 0
  br i1 %412, label %430, label %413

413:                                              ; preds = %410
  %414 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %323, i64 -1
  %415 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %331, i64 -1
  %416 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %414, i64 %411
  %417 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %415, i64 %411
  %418 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %417, i64 -1
  %419 = bitcast %"class.sh::TIntermNode"** %418 to <2 x i64>*
  %420 = load <2 x i64>, <2 x i64>* %419, align 8, !alias.scope !13
  %421 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %417, i64 -2
  %422 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %421, i64 -1
  %423 = bitcast %"class.sh::TIntermNode"** %422 to <2 x i64>*
  %424 = load <2 x i64>, <2 x i64>* %423, align 8, !alias.scope !13
  %425 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %416, i64 -1
  %426 = bitcast %"class.sh::TIntermNode"** %425 to <2 x i64>*
  store <2 x i64> %420, <2 x i64>* %426, align 8, !alias.scope !16, !noalias !13
  %427 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %416, i64 -2
  %428 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %427, i64 -1
  %429 = bitcast %"class.sh::TIntermNode"** %428 to <2 x i64>*
  store <2 x i64> %424, <2 x i64>* %429, align 8, !alias.scope !16, !noalias !13
  br label %430

430:                                              ; preds = %410, %413
  %431 = icmp eq i64 %338, %354
  br i1 %431, label %502, label %432

432:                                              ; preds = %430, %340, %333
  %433 = phi %"class.sh::TIntermNode"** [ %323, %340 ], [ %323, %333 ], [ %356, %430 ]
  %434 = phi %"class.sh::TIntermNode"** [ %331, %340 ], [ %331, %333 ], [ %358, %430 ]
  %435 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %434, i64 -1
  %436 = ptrtoint %"class.sh::TIntermNode"** %435 to i64
  %437 = sub i64 %436, %330
  %438 = lshr i64 %437, 3
  %439 = add nuw nsw i64 %438, 1
  %440 = and i64 %439, 7
  %441 = icmp eq i64 %440, 0
  br i1 %441, label %453, label %442

442:                                              ; preds = %432, %442
  %443 = phi %"class.sh::TIntermNode"** [ %446, %442 ], [ %433, %432 ]
  %444 = phi %"class.sh::TIntermNode"** [ %447, %442 ], [ %434, %432 ]
  %445 = phi i64 [ %451, %442 ], [ %440, %432 ]
  %446 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %443, i64 -1
  %447 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %444, i64 -1
  %448 = bitcast %"class.sh::TIntermNode"** %447 to i64*
  %449 = load i64, i64* %448, align 8
  %450 = bitcast %"class.sh::TIntermNode"** %446 to i64*
  store i64 %449, i64* %450, align 8
  %451 = add i64 %445, -1
  %452 = icmp eq i64 %451, 0
  br i1 %452, label %453, label %442, !llvm.loop !19

453:                                              ; preds = %442, %432
  %454 = phi %"class.sh::TIntermNode"** [ undef, %432 ], [ %446, %442 ]
  %455 = phi %"class.sh::TIntermNode"** [ %433, %432 ], [ %446, %442 ]
  %456 = phi %"class.sh::TIntermNode"** [ %434, %432 ], [ %447, %442 ]
  %457 = icmp ult i64 %437, 56
  br i1 %457, label %502, label %458

458:                                              ; preds = %453, %458
  %459 = phi %"class.sh::TIntermNode"** [ %496, %458 ], [ %455, %453 ]
  %460 = phi %"class.sh::TIntermNode"** [ %497, %458 ], [ %456, %453 ]
  %461 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %459, i64 -1
  %462 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %460, i64 -1
  %463 = bitcast %"class.sh::TIntermNode"** %462 to i64*
  %464 = load i64, i64* %463, align 8
  %465 = bitcast %"class.sh::TIntermNode"** %461 to i64*
  store i64 %464, i64* %465, align 8
  %466 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %459, i64 -2
  %467 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %460, i64 -2
  %468 = bitcast %"class.sh::TIntermNode"** %467 to i64*
  %469 = load i64, i64* %468, align 8
  %470 = bitcast %"class.sh::TIntermNode"** %466 to i64*
  store i64 %469, i64* %470, align 8
  %471 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %459, i64 -3
  %472 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %460, i64 -3
  %473 = bitcast %"class.sh::TIntermNode"** %472 to i64*
  %474 = load i64, i64* %473, align 8
  %475 = bitcast %"class.sh::TIntermNode"** %471 to i64*
  store i64 %474, i64* %475, align 8
  %476 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %459, i64 -4
  %477 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %460, i64 -4
  %478 = bitcast %"class.sh::TIntermNode"** %477 to i64*
  %479 = load i64, i64* %478, align 8
  %480 = bitcast %"class.sh::TIntermNode"** %476 to i64*
  store i64 %479, i64* %480, align 8
  %481 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %459, i64 -5
  %482 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %460, i64 -5
  %483 = bitcast %"class.sh::TIntermNode"** %482 to i64*
  %484 = load i64, i64* %483, align 8
  %485 = bitcast %"class.sh::TIntermNode"** %481 to i64*
  store i64 %484, i64* %485, align 8
  %486 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %459, i64 -6
  %487 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %460, i64 -6
  %488 = bitcast %"class.sh::TIntermNode"** %487 to i64*
  %489 = load i64, i64* %488, align 8
  %490 = bitcast %"class.sh::TIntermNode"** %486 to i64*
  store i64 %489, i64* %490, align 8
  %491 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %459, i64 -7
  %492 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %460, i64 -7
  %493 = bitcast %"class.sh::TIntermNode"** %492 to i64*
  %494 = load i64, i64* %493, align 8
  %495 = bitcast %"class.sh::TIntermNode"** %491 to i64*
  store i64 %494, i64* %495, align 8
  %496 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %459, i64 -8
  %497 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %460, i64 -8
  %498 = bitcast %"class.sh::TIntermNode"** %497 to i64*
  %499 = load i64, i64* %498, align 8
  %500 = bitcast %"class.sh::TIntermNode"** %496 to i64*
  store i64 %499, i64* %500, align 8
  %501 = icmp eq %"class.sh::TIntermNode"** %497, %329
  br i1 %501, label %502, label %458, !llvm.loop !20

502:                                              ; preds = %453, %458, %430, %320
  %503 = phi %"class.sh::TIntermNode"** [ %323, %320 ], [ %356, %430 ], [ %454, %453 ], [ %496, %458 ]
  %504 = ptrtoint %"class.sh::TIntermNode"** %503 to i64
  store i64 %504, i64* %296, align 8
  store i64 %328, i64* %295, align 8
  store i64 %325, i64* %305, align 8
  %505 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 1
  %506 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %505, align 8
  %507 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 2
  %508 = load i32, i32* %507, align 8
  %509 = call %"class.sh::TIntermTyped"* @_ZN2sh29CreateBuiltInFunctionCallNodeEPKcPNS_7TVectorIPNS_11TIntermNodeEEERKNS_12TSymbolTableEi(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0), %"class.sh::TVector.31"* nonnull %4, %"class.sh::TSymbolTable"* dereferenceable(1720) %506, i32 %508) #7
  %510 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %509, i64 0, i32 0
  %511 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %512 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %509, i64 0, i32 0, i32 1
  %513 = bitcast %"struct.sh::TSourceLoc"* %512 to i8*
  %514 = bitcast %"struct.sh::TSourceLoc"* %511 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %513, i8* align 4 %514, i64 16, i1 false) #7
  %515 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 0
  call void @_ZN2sh16TIntermTraverser16queueReplacementEPNS_11TIntermNodeENS0_12OriginalNodeE(%"class.sh::TIntermTraverser"* %515, %"class.sh::TIntermNode"* %510, i32 1) #7
  %516 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %25, align 8
  %517 = icmp eq %"class.sh::TIntermNode"** %516, null
  br i1 %517, label %521, label %518

518:                                              ; preds = %502
  %519 = ptrtoint %"class.sh::TIntermNode"** %516 to i64
  %520 = bitcast %"class.sh::TIntermNode"*** %26 to i64*
  store i64 %519, i64* %520, align 8
  br label %521

521:                                              ; preds = %502, %518
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %24) #7
  br label %522

522:                                              ; preds = %8, %3, %521
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermDeclaration"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*) unnamed_addr #2

declare { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"*) local_unnamed_addr #2

declare %"class.sh::TIntermTyped"* @_ZN2sh9SpecConst29getFragRotationMultiplyFlipXYEv(%"class.sh::SpecConst"*) local_unnamed_addr #2

declare void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"*, i8 zeroext, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*) unnamed_addr #2

declare %"class.sh::TIntermTyped"* @_ZN2sh9SpecConst9getFlipXYEv(%"class.sh::SpecConst"*) local_unnamed_addr #2

declare %"class.sh::TIntermTyped"* @_ZN2sh29CreateBuiltInFunctionCallNodeEPKcPNS_7TVectorIPNS_11TIntermNodeEEERKNS_12TSymbolTableEi(i8*, %"class.sh::TVector.31"*, %"class.sh::TSymbolTable"* dereferenceable(1720), i32) local_unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser16queueReplacementEPNS_11TIntermNodeENS0_12OriginalNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermNode"*, i32) local_unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #5

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

declare i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"*, i64) local_unnamed_addr #2

declare %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { nounwind readonly }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
!12 = !{i8 0, i8 2}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !8}
!19 = distinct !{!19, !10}
!20 = distinct !{!20, !8}
